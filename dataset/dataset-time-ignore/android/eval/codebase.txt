public int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws java.io.InterruptedIOException, libcore.io.ErrnoException { return os.writev(fd, buffers, offsets, byteCounts); }
public static void arraycopy(float[] src, int srcPos, float[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + " dst.length=") + (dst.length)) + " dstPos=") + dstPos) + " length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_FLOAT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyFloatUnchecked(src, srcPos, dst, dstPos, length); } }
@android.platform.test.annotations.Postsubmit @org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCommonTranslate() { java.lang.String s = null; try { s = new java.lang.String(new byte[]{ ((byte) (0)), ((byte) (211)), ((byte) (0)), ((byte) (207)), ((byte) (1)), ((byte) (4)) }, "UTF-16"); } catch (java.io.UnsupportedEncodingException e) { fail(e.toString()); } assertEquals("OIA", com.android.internal.telephony.Sms7BitEncodingTranslator.translate(s)); }
public void test_parseLjava_lang_String_Ljava_text_ParsePosition_2() { java.text.DecimalFormat form = ((java.text.DecimalFormat) (java.text.DecimalFormat.getInstance(java.util.Locale.US))); form.setParseIntegerOnly(true); form.setParseBigDecimal(true); final java.lang.String doubleMax2 = "359,538,626,972,463,141,629,054,847,463,408," + ((((("713,596,141,135,051,689,993,197,834,953,606,314,521,560,057,077," + "521,179,117,265,533,756,343,080,917,907,028,764,928,468,642,653,") + "778,928,365,536,935,093,407,075,033,972,099,821,153,102,564,152,") + "490,980,180,778,657,888,151,737,016,910,267,884,609,166,473,806,") + "445,896,331,617,118,664,246,696,549,595,652,408,289,446,337,476,") + "354,361,838,599,762,500,808,052,368,249,716,736"); java.lang.Number number = form.parse(doubleMax2, new java.text.ParsePosition(0)); assertTrue((number instanceof java.math.BigDecimal)); java.math.BigDecimal result = ((java.math.BigDecimal) (number)); assertEquals(new java.math.BigDecimal(java.lang.Double.MAX_VALUE).add(new java.math.BigDecimal(java.lang.Double.MAX_VALUE)), result); }
private final void mainLoop() { while (isRunning()) { final int bytesRead; try { bytesRead = android.system.Os.read(mSocket, mPacket, 0, mPacket.length); if (bytesRead < 1) { if (isRunning()) logError("Socket closed, exiting", null); break; } (mPacketsReceived)++; } catch (android.system.ErrnoException e) { if ((e.errno) != (android.system.OsConstants.EINTR)) { if (isRunning()) logError("read error: ", e); break; } continue; } catch (java.io.IOException ioe) { if (isRunning()) logError("read error: ", ioe); continue; } try { handlePacket(mPacket, bytesRead); } catch (java.lang.Exception e) { logError("Unexpected exception: ", e); break; } } stop(); onExit(); }
@org.junit.Test public void test002b() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); try { jackOutput = runTest002(false, "fail", errOut, true, false); junit.framework.Assert.fail(); } catch (com.android.jack.JackAbortException e) { junit.framework.Assert.assertTrue(((e.getCause()) instanceof com.android.jack.library.LibraryReadingException)); junit.framework.Assert.assertTrue(((e.getCause().getCause()) instanceof com.android.jack.resource.ResourceImportConflictException)); java.lang.String errString = errOut.toString(); junit.framework.Assert.assertTrue(errString.contains("Resource in")); junit.framework.Assert.assertTrue(errString.contains("rsc/Resource1")); junit.framework.Assert.assertTrue(errString.contains("has already been imported")); } }

private static void deleteRecursive(java.io.File root) { if (root.exists()) { if (root.isDirectory()) { for (java.io.File file : root.listFiles()) { com.android.build.gradle.internal.test.fixture.GradleProjectTestRule.deleteRecursive(file); } } assertTrue(root.delete()); } }
public void setJavaCompileTask(@com.android.annotations.Nullable com.android.build.gradle.internal.scope.AndroidTask<? extends org.gradle.api.tasks.compile.AbstractCompile> javaCompileTask) { this.javaCompileTask = javaCompileTask; }
public void setSuperClass(com.android.ide.eclipse.adt.internal.resources.ViewClassInfo superClass) { mSuperClass = superClass; }


@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { super.widgetSelected(e); if ((mResourceType) == (com.android.resources.ResourceType.STRING)) { createNewString(); } else { assert com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.isValueResource(mResourceType); java.lang.String newName = createNewValue(mResourceType); if (newName != null) { com.android.ide.eclipse.adt.internal.resources.ResourceItem[] items = setupResourceList(); selectItemName(newName, items); } } }
private static void putInJackClasspath(@javax.annotation.Nonnull java.util.List<java.io.File> jackFiles, @javax.annotation.Nonnull com.android.jack.ir.ast.JPackage rootPackage, @javax.annotation.Nonnull com.android.jack.lookup.JPhantomLookup phantomJNodeLookup, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks) { com.android.sched.util.config.ReflectFactory<com.android.jack.jayce.JaycePackageLoader> factory = com.android.sched.util.config.ThreadConfig.get(com.android.jack.Jack.CLASSPATH_POLICY); for (final java.io.File jackFile : jackFiles) { try { com.android.sched.vfs.InputVDir vDir = com.android.jack.Jack.wrapAsVDir(jackFile, hooks); com.android.jack.jayce.JaycePackageLoader rootPLoader = factory.create(vDir, phantomJNodeLookup); rootPackage.addLoader(rootPLoader); } catch (java.io.IOException ioException) { com.android.jack.Jack.logger.log(java.util.logging.Level.WARNING, "Bad classpath entry ignored: {0}", ioException.getMessage()); } } }
public void testInputUrl() throws java.lang.Exception { byte[] fileContents = "abcdef 1234567890".getBytes(java.nio.charset.StandardCharsets.UTF_8); java.net.URL fileUrl = addFileEntry(libcore.java.net.FtpURLConnectionTest.FILE_PATH, fileContents); java.net.URLConnection connection = fileUrl.openConnection(); libcore.java.net.FtpURLConnectionTest.assertContents(fileContents, connection.getInputStream()); }
@java.lang.Override @javax.annotation.CheckForNull public com.android.jack.ir.ast.JAbstractStringLiteral getRefinedExpression(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call, @javax.annotation.Nonnull com.android.jack.ir.ast.JStringLiteral paramToRefine) { com.android.jack.ir.ast.JMethodNameLiteral strMethodLiteral = null; java.lang.String methodName = paramToRefine.getValue(); com.android.jack.ir.ast.JDefinedClassOrInterface type = getTypeFromClassLiteralExpression(call.getInstance()); java.lang.String methodSignature = getMethodSignature(call); if ((type != null) && (methodSignature != null)) { com.android.jack.ir.ast.JMethod method = lookupMethod(type, methodSignature); if (method != null) { strMethodLiteral = new com.android.jack.ir.ast.JMethodNameLiteral(paramToRefine.getSourceInfo(), method); assert methodName.equals(strMethodLiteral.getValue()); } } return strMethodLiteral; }
public void testIke() throws java.lang.Exception { java.net.InetAddress localAddr = java.net.InetAddress.getByName(android.net.cts.IpSecManagerTest.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr);android.net.IpSecTransform transform = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, spi, encapSocket, localAddr)) { java.io.FileDescriptor sock = null; try { sock = android.net.cts.IpSecManagerTest.getBoundUdpSocket(localAddr); int port = android.net.cts.IpSecManagerTest.getPort(sock); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_OUT, transform); byte[] header = new byte[]{ 1, 1, 1, 1 }; java.lang.String message = "Sample ESP Packet"; byte[] data = ((new java.lang.String(header)) + message).getBytes("UTF-8"); android.system.Os.sendto(sock, data, 0, data.length, 0, localAddr, encapSocket.getPort()); header = new byte[]{ 0, 0, 0, 0 }; message = "Sample IKE Packet"; data = ((new java.lang.String(header)) + message).getBytes("UTF-8"); android.system.Os.sendto(encapSocket.getSocket(), data, 0, data.length, 0, localAddr, encapSocket.getPort()); byte[] in = new byte[4]; in[0] = 1; android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertTrue("Encap socket received UDP-encap-ESP data despite invalid SPIs", java.util.Arrays.equals(header, in)); mISM.removeTransportModeTransforms(sock); } finally { if (sock != null) { android.system.Os.close(sock); } } } }
public void testKeyguardHidesActivity() throws java.lang.Exception { if (!(isHandheld())) { return; } launchActivity("TestActivity"); mAmWmState.computeState(mDevice, new java.lang.String[]{ "TestActivity" }); mAmWmState.assertVisibility("TestActivity", true); gotoKeyguard(); mAmWmState.computeState(mDevice, null); assertShowingAndNotOccluded(); mAmWmState.assertVisibility("TestActivity", false); unlockDevice(); }


@com.android.compatibility.common.util.CddTest(requirement = "9.7") public void testAospPropertyContexts() throws java.lang.Exception { devicePcFile = java.io.File.createTempFile("property_contexts", ".tmp"); devicePcFile.deleteOnExit(); mDevice.pullFile("/property_contexts", devicePcFile); aospPcFile = copyResourceToTempFile("/general_property_contexts"); assertFileStartsWith(aospPcFile, devicePcFile); }
public boolean delete() { try { Libcore.os.remove(path); return true; } catch (libcore.io.ErrnoException errnoException) { return false; } }

@java.lang.Override public boolean accept(@org.jetbrains.annotations.NotNull com.intellij.openapi.project.Project project, @org.jetbrains.annotations.NotNull com.intellij.openapi.vfs.VirtualFile file) { if ((file.isDirectory()) || (!(file.isValid()))) { return false; } return com.intellij.psi.SingleRootFileViewProvider.isTooLargeForContentLoading(file); }



public void testOnKeyDown_capitalizeSentences() { android.text.method.MultiTapKeyListener keyListener = android.text.method.MultiTapKeyListener.getInstance(false, Capitalize.SENTENCES); prepareEmptyTextView(); callOnKeyDown(keyListener, KeyEvent.KEYCODE_4, 2); assertEquals("H", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_4, 3); assertEquals("Hi", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_1, 1); assertEquals("Hi.", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_POUND, 1); assertEquals("Hi. ", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_2, 2); assertEquals("Hi. B", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_9, 3); assertEquals("Hi. By", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_3, 2); assertEquals("Hi. Bye", mTextView.getText().toString()); }
@java.lang.Override public void run() { logWriter.println(("Redirector started: " + (name))); try { java.lang.String line = ""; while (!(doExit)) { try { line = br.readLine(); if (line == null) break; logWriter.println((((name) + "> ") + line)); } catch (java.lang.IllegalStateException e) { } } logWriter.println(("Redirector completed: " + (name))); } catch (java.io.IOException e) { logWriter.printError(e); } }
public static junit.framework.Test suite() { junit.framework.TestSuite suite = new junit.framework.TestSuite(); suite.setName("ManifestMergerTestSuite"); for (java.lang.String fileName : com.android.manifmerger.ManifestMerger2Test.sDataFiles) { suite.addTest(junit.framework.TestSuite.createTest(com.android.manifmerger.ManifestMerger2Test.class, fileName)); } return suite; }
public void testRunNormalInputOnWindows() throws com.android.tradefed.device.DeviceNotAvailableException, java.lang.IllegalArgumentException { java.lang.String originalName = java.lang.System.getProperty(VtsMultiDeviceTest.OS_NAME); java.lang.System.setProperty(VtsMultiDeviceTest.OS_NAME, VtsMultiDeviceTest.WINDOWS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice()); mTest.setRunUtil(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockRunUtil("where", "python.exe", CommandStatus.SUCCESS)); try { mTest.run(mMockInvocationListener); } finally { java.lang.System.setProperty(VtsMultiDeviceTest.OS_NAME, originalName); } }
@java.lang.Override protected void ensureAll(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loaded) { synchronized(this) { if (!(structureLoaded)) { structureLoaded = true; com.android.jack.jayce.DeclaredTypeNode type; try { type = getNNode(NodeLevel.STRUCTURE); } catch (java.io.IOException e) { throw new com.android.jack.load.JackLoadingException(getLocation(), e); } catch (com.android.jack.JackFileException e) { throw new com.android.jack.load.JackLoadingException(getLocation(), e); } try { type.updateToStructure(loaded, this); } catch (com.android.jack.lookup.JLookupException e) { throw new com.android.jack.load.JackLoadingException(getLocation(), e); } com.android.jack.frontend.ParentSetter parentSetter = new com.android.jack.frontend.ParentSetter(); parentSetter.accept(loaded); tracer.getStatistic(com.android.jack.jayce.JayceClassOrInterfaceLoader.STRUCTURE_LOAD).incValue(); methodNotLoadedCount = loaded.getMethods().size(); if ((methodNotLoadedCount) == 0) { loaded.removeLoader(); } } } }
private void pushFile(final java.lang.String local, final java.lang.String remoteDirectory) { try { final com.android.ddmlib.SyncService sync = mCurrentDevice.getSyncService(); if (sync != null) { new org.eclipse.jface.dialogs.ProgressMonitorDialog(mParent.getShell()).run(true, true, new org.eclipse.jface.operation.IRunnableWithProgress() { public void run(org.eclipse.core.runtime.IProgressMonitor monitor) throws java.lang.InterruptedException, java.lang.reflect.InvocationTargetException { java.lang.String[] segs = local.split(java.util.regex.Pattern.quote(java.io.File.separator)); java.lang.String name = segs[((segs.length) - 1)]; java.lang.String remoteFile = (remoteDirectory + (com.android.ddmlib.FileListingService.FILE_SEPARATOR)) + name; com.android.ddmlib.SyncService.SyncResult result = sync.pushFile(local, remoteFile, new com.android.ddmuilib.SyncProgressMonitor(monitor, java.lang.String.format("Pushing %1$s to the device.", name))); if ((result.getCode()) != (com.android.ddmlib.SyncService.RESULT_OK)) { com.android.ddmuilib.console.DdmConsole.printErrorToConsole(java.lang.String.format("Failed to push %1$s on %2$s: %3$s", name, mCurrentDevice.getSerialNumber(), result.getMessage())); } sync.close(); } }); } } catch (java.lang.Exception e) { com.android.ddmuilib.console.DdmConsole.printErrorToConsole("Failed to push the item(s)."); com.android.ddmuilib.console.DdmConsole.printErrorToConsole(e.getMessage()); } }
com.android.ddmlib.RawImage getScreenshot() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException;

private boolean waitForFinalization() { long startTime = java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingStartedNanos; sleepFor(startTime, java.lang.Daemons.MAX_FINALIZE_NANOS); return ((java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingObject) == null) || ((java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingStartedNanos) != startTime); }
private void updateCall(com.android.server.telecom.Call call, boolean videoProviderChanged) { if (!(mInCallServices.isEmpty())) { android.telecom.Log.i(this, "Sending updateCall %s", call); java.util.List<android.content.ComponentName> componentsUpdated = new java.util.ArrayList<>(); for (java.util.Map.Entry<com.android.server.telecom.InCallController.InCallServiceInfo, com.android.internal.telecom.IInCallService> entry : mInCallServices.entrySet()) { com.android.server.telecom.InCallController.InCallServiceInfo info = entry.getKey(); if ((call.isExternalCall()) && (!(info.isExternalCallsSupported()))) { continue; } android.telecom.ParcelableCall parcelableCall = com.android.server.telecom.ParcelableCallUtils.toParcelableCall(call, videoProviderChanged, mCallsManager.getPhoneAccountRegistrar(), info.isExternalCallsSupported()); android.content.ComponentName componentName = info.getComponentName(); com.android.internal.telecom.IInCallService inCallService = entry.getValue(); componentsUpdated.add(componentName); try { inCallService.updateCall(parcelableCall); } catch (android.os.RemoteException ignored) { } } android.telecom.Log.i(this, "Components updated: %s", componentsUpdated); } }
public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void test_getInstance() { java.util.Calendar us_calendar = java.util.Calendar.getInstance(java.util.Locale.US); java.util.Calendar ch_calendar = java.util.Calendar.getInstance(java.util.Locale.CHINESE); assertEquals(java.util.Calendar.SUNDAY, us_calendar.getFirstDayOfWeek()); assertEquals(java.util.Calendar.MONDAY, ch_calendar.getFirstDayOfWeek()); java.util.Calendar gmt_calendar = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("GMT"), java.util.Locale.US); assertEquals(java.util.TimeZone.getTimeZone("GMT"), gmt_calendar.getTimeZone()); java.util.Calendar est_calendar = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("EST"), java.util.Locale.US); assertEquals(java.util.TimeZone.getTimeZone("EST").getID(), est_calendar.getTimeZone().getID()); }
public int timeIntegerValueOf(int reps) throws java.lang.Exception { java.lang.String[] intStrings = new java.lang.String[]{ "0", "1", "12", "123", "1234", "12345", "123456", "1234567", "12345678" }; int t = 0; for (int i = 0; i < reps; ++i) { for (int j = 0; j < (intStrings.length); ++j) { t += java.lang.Integer.valueOf(intStrings[j]); } } return t; }

public java.net.InetAddress getLocalAddress() { return localAddress; }
@org.junit.Test public void backgroundScanNoBatch() { com.android.server.wifi.WifiNative.ScanSettings settings = new com.android.server.wifi.ScanTestUtil.NativeScanSettingsBuilder().withBasePeriod(10000).withMaxApPerScan(10).addBucketWithBand(10000, WifiScanner.REPORT_EVENT_NO_BATCH, WifiScanner.WIFI_BAND_24_GHZ).build(); com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod[] expectedPeriods = new com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod[]{ new com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod.ReportType.NONE, com.android.server.wifi.ScanResults.create(0, 2400, 2400, 2400), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)), new com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod.ReportType.NONE, com.android.server.wifi.ScanResults.create(1, 2400, 2400, 2450), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)), new com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod.ReportType.NONE, com.android.server.wifi.ScanResults.create(2, 2400, 2450, 2400), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)) }; doSuccessfulTest(settings, expectedPeriods); }
void setAudioStatus(boolean mute, int volume) { if ((!(isTvDeviceEnabled())) || (!(tv().isSystemAudioActivated()))) { return; } android.media.AudioManager audioManager = getAudioManager(); boolean muted = audioManager.isStreamMute(AudioManager.STREAM_MUSIC); if (mute) { if (!muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, true); } } else { if (muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, false); } audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, volume, ((android.media.AudioManager.FLAG_SHOW_UI) | (android.media.AudioManager.FLAG_HDMI_SYSTEM_AUDIO_VOLUME))); } }

public android.content.Intent getIntent(java.lang.Class newActivityClass) { android.content.Intent intent = new android.content.Intent(com.android.phone.SubscriptionInfoHelper.mContext, newActivityClass); if (hasSubId()) { intent.putExtra(com.android.phone.SubscriptionInfoHelper.SUB_ID_EXTRA, com.android.phone.SubscriptionInfoHelper.mSubId); } if (!(android.text.TextUtils.isEmpty(com.android.phone.SubscriptionInfoHelper.mSubLabel))) { intent.putExtra(com.android.phone.SubscriptionInfoHelper.SUB_LABEL_EXTRA, com.android.phone.SubscriptionInfoHelper.mSubLabel); } return intent; }
public com.android.jack.dx.rop.code.RopMethod process() { int szBlocks = blocks.size(); java.util.BitSet toDelete = new java.util.BitSet(blocks.getMaxLabel()); for (int bindex = 0; bindex < szBlocks; bindex++) { com.android.jack.dx.rop.code.BasicBlock b = blocks.get(bindex); if (toDelete.get(b.getLabel())) { continue; } com.android.jack.dx.util.IntList preds = ropMethod.labelToPredecessors(b.getLabel()); int szPreds = preds.size(); for (int i = 0; i < szPreds; i++) { int iLabel = preds.get(i); com.android.jack.dx.rop.code.BasicBlock iBlock = blocks.labelToBlock(iLabel); if (((toDelete.get(iLabel)) || ((iBlock.getSuccessors().size()) > 1)) || ((iBlock.getFirstInsn().getOpcode().getOpcode()) == (com.android.jack.dx.rop.code.RegOps.MOVE_RESULT))) { continue; } com.android.jack.dx.util.IntList toCombine = new com.android.jack.dx.util.IntList(); for (int j = i + 1; j < szPreds; j++) { int jLabel = preds.get(j); com.android.jack.dx.rop.code.BasicBlock jBlock = blocks.labelToBlock(jLabel); if (((jBlock.getSuccessors().size()) == 1) && (com.android.jack.dx.ssa.back.IdenticalBlockCombiner.compareInsns(iBlock, jBlock))) { toCombine.add(jLabel); toDelete.set(jLabel); } } combineBlocks(iLabel, toCombine); } } for (int i = szBlocks - 1; i >= 0; i--) { if (toDelete.get(newBlocks.get(i).getLabel())) { newBlocks.set(i, null); } } newBlocks.shrinkToFit(); newBlocks.setImmutable(); return new com.android.jack.dx.rop.code.RopMethod(newBlocks, ropMethod.getFirstLabel()); }

@java.lang.Override public int describeContents() { return 0; }
private static void signFile(java.util.jar.Manifest manifest, java.security.cert.X509Certificate[] publicKey, java.security.PrivateKey[] privateKey, java.util.jar.JarOutputStream outputJar) throws java.lang.Exception { long timestamp = (publicKey[0].getNotBefore().getTime()) + (3600L * 1000); java.util.jar.JarEntry je = new java.util.jar.JarEntry(java.util.jar.JarFile.MANIFEST_NAME); je.setTime(timestamp); outputJar.putNextEntry(je); manifest.write(outputJar); int numKeys = publicKey.length; for (int k = 0; k < numKeys; ++k) { je = new java.util.jar.JarEntry((numKeys == 1 ? com.android.signapk.SignApk.CERT_SF_NAME : java.lang.String.format(com.android.signapk.SignApk.CERT_SF_MULTI_NAME, k))); je.setTime(timestamp); outputJar.putNextEntry(je); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); com.android.signapk.SignApk.writeSignatureFile(manifest, baos, com.android.signapk.SignApk.getDigestAlgorithm(publicKey[k])); byte[] signedData = baos.toByteArray(); outputJar.write(signedData); final java.lang.String keyType = publicKey[k].getPublicKey().getAlgorithm(); je = new java.util.jar.JarEntry((numKeys == 1 ? java.lang.String.format(com.android.signapk.SignApk.CERT_SIG_NAME, keyType) : java.lang.String.format(com.android.signapk.SignApk.CERT_SIG_MULTI_NAME, k, keyType))); je.setTime(timestamp); outputJar.putNextEntry(je); com.android.signapk.SignApk.writeSignatureBlock(new org.bouncycastle.cms.CMSProcessableByteArray(signedData), publicKey[k], privateKey[k], outputJar); } }


@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { case com.android.internal.telephony.uicc.UiccProfile.EVENT_OPEN_LOGICAL_CHANNEL_DONE : case com.android.internal.telephony.uicc.UiccProfile.EVENT_CLOSE_LOGICAL_CHANNEL_DONE : case com.android.internal.telephony.uicc.UiccProfile.EVENT_TRANSMIT_APDU_LOGICAL_CHANNEL_DONE : case com.android.internal.telephony.uicc.UiccProfile.EVENT_TRANSMIT_APDU_BASIC_CHANNEL_DONE : case com.android.internal.telephony.uicc.UiccProfile.EVENT_SIM_IO_DONE : android.os.AsyncResult ar = ((android.os.AsyncResult) (msg.obj)); if ((ar.exception) != null) { loglocal(("Exception: " + (ar.exception))); log(("Error in SIM access with exception" + (ar.exception))); } android.os.AsyncResult.forMessage(((android.os.Message) (ar.userObj)), ar.result, ar.exception); ((android.os.Message) (ar.userObj)).sendToTarget(); break; case com.android.internal.telephony.uicc.UiccProfile.EVENT_CARRIER_PRIVILEGES_LOADED : onCarrierPriviligesLoadedMessage(); break; default : loge(("Unknown Event " + (msg.what))); } }

public static android.telephony.SmsCbMessage createSmsCbMessage(com.android.internal.telephony.gsm.SmsCbHeader header, android.telephony.SmsCbLocation location, byte[][] pdus) throws java.lang.IllegalArgumentException { if (header.isEtwsPrimaryNotification()) { return new android.telephony.SmsCbMessage(android.telephony.SmsCbMessage.MESSAGE_FORMAT_3GPP, header.getGeographicalScope(), header.getSerialNumber(), location, header.getServiceCategory(), null, "ETWS", android.telephony.SmsCbMessage.MESSAGE_PRIORITY_EMERGENCY, header.getEtwsInfo(), header.getCmasInfo()); } else { java.lang.String language = null; java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (byte[] pdu : pdus) { android.util.Pair<java.lang.String, java.lang.String> p = com.android.internal.telephony.gsm.GsmSmsCbMessage.parseBody(header, pdu); language = p.first; sb.append(p.second); } int priority = (header.isEmergencyMessage()) ? android.telephony.SmsCbMessage.MESSAGE_PRIORITY_EMERGENCY : android.telephony.SmsCbMessage.MESSAGE_PRIORITY_NORMAL; return new android.telephony.SmsCbMessage(android.telephony.SmsCbMessage.MESSAGE_FORMAT_3GPP, header.getGeographicalScope(), header.getSerialNumber(), location, header.getServiceCategory(), language, sb.toString(), priority, header.getEtwsInfo(), header.getCmasInfo()); } }
@java.lang.Override public com.android.jack.dx.dex.file.IndexedItem get(com.android.jack.dx.rop.cst.Constant cst) { if (cst == null) { throw new java.lang.NullPointerException("cst == null"); } throwIfNotPrepared(); com.android.jack.dx.rop.type.Type type = ((com.android.jack.dx.rop.cst.CstType) (cst)).getClassType(); com.android.jack.dx.dex.file.IndexedItem result = classDefs.get(type); if (result == null) { throw new java.lang.IllegalArgumentException("not found"); } return result; }
boolean okToConnect(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.btservice.AdapterService adapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); int priority = mService.getPriority(device); if ((adapterService == null) || ((adapterService.isQuietModeEnabled()) && ((mTargetDevice) == null))) { return false; } if (((android.bluetooth.BluetoothProfile.PRIORITY_OFF) < priority) || (((android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED) == priority) && ((device.getBondState()) != (android.bluetooth.BluetoothDevice.BOND_NONE)))) { return true; } return false; }
public void add(int index, int value) { if ((index < 0) || (index > (mSize))) { throw new java.lang.IndexOutOfBoundsException(); } ensureCapacity(1); if (((mSize) - index) != 0) { java.lang.System.arraycopy(mValues, index, mValues, (index + 1), ((mSize) - index)); } mValues[index] = value; (mSize)++; }

native void rsnAllocationRead(long con, long id, java.lang.Object d, int dt);
@java.lang.Override @javax.annotation.Nonnull java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.ParentVFile file, boolean append) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.WRITE); java.io.File path = getNativeFile(file.getPath()); try { return new java.io.FileOutputStream(path, append); } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.WRITE); throw new com.android.sched.util.ConcurrentIOException(e); } }
public native android.system.StructUcred getsockoptUcred(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException;


private void notifyHandshakeCompletedListeners() { if (((listeners) != null) && (!(listeners.isEmpty()))) { javax.net.ssl.HandshakeCompletedEvent event = new javax.net.ssl.HandshakeCompletedEvent(this, sslSession); for (javax.net.ssl.HandshakeCompletedListener listener : listeners) { try { listener.handshakeCompleted(event); } catch (java.lang.RuntimeException e) { java.lang.Thread thread = java.lang.Thread.currentThread(); thread.getUncaughtExceptionHandler().uncaughtException(thread, e); } } } }

void startScreenRecorder(@com.android.annotations.NonNull java.lang.String remoteFilePath, @com.android.annotations.NonNull com.android.ddmlib.ScreenRecorderOptions options, @com.android.annotations.NonNull com.android.ddmlib.IShellOutputReceiver receiver) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException;


@java.lang.Override public void await(java.io.File nonEmptyDirectory) { run.androidSdk.waitForDevice(); run.androidSdk.waitForNonEmptyDirectory(nonEmptyDirectory, (5 * 60)); run.androidSdk.remount(); }
@org.junit.Test public void testStartStopFlow() throws java.lang.Exception { executeAndValidateStartupSequence(); mDut.stop(); mTestLooper.dispatchAll(); mInOrder.verify(mWifiMock).stop(); mInOrder.verify(mManagerStatusCallbackMock).onStop(); verifyNoMoreInteractions(mServiceManagerMock, mWifiMock, mManagerStatusCallbackMock); }

private void updateButtonState() { java.lang.String hostname = mHostnameView.getText().toString(); java.util.regex.Matcher hostMatch = com.android.bips.ui.AddManualPrinterDialog.HOSTNAME_PATTERN.matcher(hostname); mAddButton.setEnabled(hostMatch.matches()); }
@java.lang.Override public void close(java.io.FileDescriptor fd) throws android.system.ErrnoException { try { if (fd.isSocket$()) { if (libcore.io.BlockGuardOs.isLingerSocket(fd)) { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); } } } catch (android.system.ErrnoException ignored) { } os.close(fd); }





void testFloat2(com.android.rs.test.RenderScript rs, com.android.rs.test.ScriptC_copy_test s) { com.android.rs.test.Allocation a1 = com.android.rs.test.Allocation.createSized(rs, com.android.rs.test.Element.F32_2(rs), 1024); com.android.rs.test.Allocation a2 = com.android.rs.test.Allocation.createSized(rs, com.android.rs.test.Element.F32_2(rs), 1024); float[] f1 = new float[1024 * 2]; float[] f2 = new float[1024 * 2]; for (int ct = 0; ct < (f1.length); ct++) { f1[ct] = ((float) (ct)); } a1.copyFrom(f1); s.forEach_copyFloat2(a1, a2); a2.copyTo(f2); for (int ct = 0; ct < (f1.length); ct++) { if ((f1[ct]) != (f2[ct])) { failTest(); android.util.Log.v("RS Test", ((((("Compare failed at " + ct) + ", ") + (f1[ct])) + ", ") + (f2[ct]))); } } a1.destroy(); a2.destroy(); }


public void continueOperation(android.content.Intent resolutionIntent, android.os.Bundle resolutionExtras) { if (!(isEnabled())) { android.app.PendingIntent callbackIntent = resolutionIntent.getParcelableExtra(android.telephony.euicc.EuiccManager.EXTRA_EMBEDDED_SUBSCRIPTION_RESOLUTION_CALLBACK_INTENT); if (callbackIntent != null) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); } return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().continueOperation(resolutionIntent, resolutionExtras); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public static void main(java.lang.String[] args) { java.lang.System.out.println(Main.$opt$noinline$foo(new Main())); java.lang.System.out.println(Main.$opt$noinline$foo(new SubMain())); java.lang.System.out.println(Main.$opt$noinline$foo(new SubSubMain())); }


@java.lang.Override protected com.android.bluetooth.btservice.ProfileService.IProfileServiceBinder initBinder() { return null; }
public com.android.builder.VariantConfiguration setAndroidDependencies(@com.android.annotations.NonNull java.util.List<com.android.builder.AndroidDependency> directLibraries) { if (directLibraries != null) { mDirectLibraries.addAll(directLibraries); } resolveIndirectLibraryDependencies(mDirectLibraries, mFlatLibraries); return this; }

private synchronized void addMediaPlayerController(android.media.session.MediaController controller) { java.lang.String packageName = controller.getPackageName(); removeMediaPlayerInfo(packageName); com.android.bluetooth.avrcp.MediaPlayerInfo info = new com.android.bluetooth.avrcp.MediaPlayerInfo(com.android.bluetooth.avrcp.MediaController.wrap(controller), AvrcpConstants.PLAYER_TYPE_AUDIO, AvrcpConstants.PLAYER_SUBTYPE_NONE, getPlayStateBytes(controller.getPlaybackState()), getFeatureBitMask(packageName), getAppLabel(packageName)); addMediaPlayerInfo(info); }
@com.android.annotations.NonNull @java.lang.Override public com.android.builder.core.VariantConfiguration addProductFlavor(@com.android.annotations.NonNull com.android.build.gradle.internal.dsl.GroupableProductFlavor productFlavor, @com.android.annotations.NonNull com.android.builder.model.SourceProvider sourceProvider, @com.android.annotations.NonNull java.lang.String dimensionName) { checkNotNull(productFlavor); checkNotNull(sourceProvider); checkNotNull(dimensionName); super.addProductFlavor(productFlavor, sourceProvider, dimensionName); computeNdkConfig(); return this; }
@java.lang.Override @javax.annotation.Nonnull public com.android.sched.util.file.OutputStreamFile checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) throws com.android.sched.util.codec.ParsingException { super.checkString(context, string); if (string.equals(com.android.sched.util.codec.STANDARD_IO_NAME)) { return new com.android.sched.util.file.OutputStreamFile(); } else { try { return new com.android.sched.util.file.OutputStreamFile(string, context.getRunnableHooks(), existence, change, append); } catch (java.io.IOException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } } }



private void prepareInternal(java.lang.String newPackage) { long token = android.os.Binder.clearCallingIdentity(); try { if ((mInterface) != null) { mStatusIntent = null; agentDisconnect(); jniReset(mInterface); mInterface = null; mVpnUsers = null; } if ((mConnection) != null) { try { mConnection.mService.transact(IBinder.LAST_CALL_TRANSACTION, android.os.Parcel.obtain(), null, IBinder.FLAG_ONEWAY); } catch (java.lang.Exception e) { } mContext.unbindService(mConnection); mConnection = null; } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } try { mNetd.denyProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, ((("Failed to disallow UID " + (mOwnerUID)) + " to call protect() ") + e)); } android.util.Log.i(com.android.server.connectivity.Vpn.TAG, ((("Switched from " + (mPackage)) + " to ") + newPackage)); mPackage = newPackage; mOwnerUID = getAppUid(newPackage, mUserHandle); try { mNetd.allowProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, ((("Failed to allow UID " + (mOwnerUID)) + " to call protect() ") + e)); } mConfig = null; updateState(DetailedState.IDLE, "prepare"); setVpnForcedLocked(mLockdown); } finally { android.os.Binder.restoreCallingIdentity(token); } }
public void registerBuildTypeSourceProvider(@com.android.annotations.NonNull java.lang.String name, @com.android.annotations.NonNull com.android.build.gradle.internal.dsl.BuildType buildType, @com.android.annotations.NonNull com.android.builder.model.SourceProvider sourceProvider) { if ((extraArtifactMap.get(name)) == null) { throw new java.lang.IllegalArgumentException("Artifact with name $name is not yet registered. Use registerArtifactType()"); } extraBuildTypeSourceProviders.put(buildType.getName(), new com.android.build.gradle.internal.variant.DefaultSourceProviderContainer(name, sourceProvider)); }

static java.math.BigInt bigExp(java.math.BigInt a, java.math.BigInt p) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_exp(r.bignum, a.bignum, p.bignum); return r; }

private void startBrowsedPlayer(int browseId) { if ((browseId < 0) || (browseId >= (mBrowsePlayerInfoList.size()))) return; com.android.bluetooth.avrcp.BrowsePlayerInfo player = mBrowsePlayerInfoList.get(browseId); android.content.Intent intent = new android.content.Intent(); intent.setComponent(new android.content.ComponentName(player.packageName, player.serviceClass)); android.util.Log.i(com.android.bluetooth.avrcp.Avrcp.TAG, ((("Starting service:" + (player.packageName)) + ", ") + (player.serviceClass))); try { mContext.startService(intent); } catch (java.lang.SecurityException ex) { android.util.Log.e(com.android.bluetooth.avrcp.Avrcp.TAG, ((("Can't start " + (player.serviceClass)) + ": ") + (ex.getMessage()))); } }



public void iccOpenLogicalChannel(java.lang.String AID, android.os.Message response) { loglocal(((((("Open Logical Channel: " + AID) + " by pid:") + (android.os.Binder.getCallingPid())) + " uid:") + (android.os.Binder.getCallingUid()))); mCi.iccOpenLogicalChannel(AID, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_OPEN_LOGICAL_CHANNEL_DONE, response)); }
@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println("Skipping dump in APP SERVICES, see bluetooth_manager section."); writer.println("Use --print argument for dumpsys direct from AdapterService."); return; } verboseLog(("dumpsys arguments, check for protobuf output: " + (android.text.TextUtils.join(" ", args)))); if (args[0].startsWith("--proto")) { if (args[0].equals("--proto-bin")) { dumpMetrics(fd); } else if (args[0].equals("--proto-java-bin")) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ("proto-java-bin dump, empty metrics size is " + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog("Unable to write Java protobuf to file descriptor."); } } return; } writer.println("Bonded devices:"); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println((((((" " + (device.getAddress())) + " [") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + "] ") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }
@java.lang.Override public void onLinkPropertiesChanged(android.net.Network network, android.net.LinkProperties newLp) { mTarget.getHandler().post(() -> handleLinkProp(network, newLp)); }


@org.junit.Test public void testFileAccessError003() throws java.lang.Exception { com.android.jack.test.helper.ErrorTestHelper te = new com.android.jack.test.helper.ErrorTestHelper(); java.io.File a = com.android.jack.test.toolchain.AbstractTestTools.createFile(te.getSourceFolder(), "jack.incremental", "A.java", ("package jack.incremental; \n" + "public class A {} \n")); if (!(a.setReadable(false))) { junit.framework.Assert.fail(("Fails to change file permissions of " + (a.getAbsolutePath()))); } com.android.jack.test.toolchain.JackApiToolchainBase jackApiToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchainBase.class); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackApiToolchain.setErrorStream(errOut); try { jackApiToolchain.addToClasspath(jackApiToolchain.getDefaultBootClasspath()).srcToExe(te.getOutputDexFolder(), false, te.getSourceFolder()); junit.framework.Assert.fail(); } catch (com.android.jack.JackUserException e) { junit.framework.Assert.assertTrue(e.getMessage().contains("is not readable")); } finally { if (!(a.setReadable(true))) { junit.framework.Assert.fail(("Fails to change file permissions of " + (a.getAbsolutePath()))); } } }



public synchronized boolean appliesToUid(int uid) { if (!(isRunningLocked())) { return false; } for (android.net.UidRange uidRange : mVpnUsers) { if (uidRange.contains(uid)) { return true; } } return false; }
public void logCall(com.android.internal.telephony.CallerInfo ci, java.lang.String number, int presentation, int callType, long start, long duration) { final boolean isEmergencyNumber = android.telephony.PhoneNumberUtils.isLocalEmergencyNumber(number, mApplication); final boolean okToLogEmergencyNumber = mApplication.getResources().getBoolean(R.bool.allow_emergency_numbers_in_call_log); boolean isOkToLogThisCall = (!isEmergencyNumber) || okToLogEmergencyNumber; if (isOkToLogThisCall) { if (com.android.phone.CallLogger.DBG) { log(((((((((((("sending Calllog entry: " + ci) + ", ") + (com.android.phone.PhoneUtils.toLogSafePhoneNumber(number))) + ",") + presentation) + ", ") + callType) + ", ") + start) + ", ") + duration)); } com.android.phone.common.CallLogAsync.AddCallArgs args = new com.android.phone.common.CallLogAsync.AddCallArgs(mApplication, ci, number, presentation, callType, start, duration); mCallLog.addCall(args); } }
private void rejectCallWithMessage(android.content.Context context, java.lang.String phoneNumber, java.lang.String textMessage, int subId) { if (textMessage != null) { final android.content.ComponentName component = com.android.internal.telephony.SmsApplication.getDefaultRespondViaMessageApplication(context, true); if (component != null) { final android.net.Uri uri = android.net.Uri.fromParts(Constants.SCHEME_SMSTO, phoneNumber, null); final android.content.Intent intent = new android.content.Intent(android.telephony.TelephonyManager.ACTION_RESPOND_VIA_MESSAGE, uri); intent.putExtra(Intent.EXTRA_TEXT, textMessage); if (android.telephony.SubscriptionManager.isValidSubscriptionId(subId)) { intent.putExtra(PhoneConstants.SUBSCRIPTION_KEY, subId); } com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = phoneNumber; args.arg2 = context; mHandler.obtainMessage(com.android.server.telecom.RespondViaSmsManager.MSG_SHOW_SENT_TOAST, args).sendToTarget(); intent.setComponent(component); context.startService(intent); } } }





@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add("name", mName).add("debuggable", mDebuggable).add("testCoverageEnabled", mTestCoverageEnabled).add("jniDebuggable", mJniDebuggable).add("renderscriptDebuggable", mRenderscriptDebuggable).add("renderscriptOptimLevel", mRenderscriptOptimLevel).add("applicationIdSuffix", mApplicationIdSuffix).add("versionNameSuffix", mVersionNameSuffix).add("minifyEnabled", mMinifyEnabled).add("zipAlignEnabled", mZipAlignEnabled).add("signingConfig", mSigningConfig).add("embedMicroApp", mEmbedMicroApp).add("mBuildConfigFields", getBuildConfigFields()).add("mResValues", getResValues()).add("mProguardFiles", getProguardFiles()).add("mConsumerProguardFiles", getConsumerProguardFiles()).add("mManifestPlaceholders", getManifestPlaceholders()).toString(); }
private int getListenerKey(java.lang.Object listener) { synchronized(mMapLock) { int valueIndex = mListenerMap.indexOfValue(listener); if (valueIndex != (-1)) { return mListenerMap.keyAt(valueIndex); } } return android.net.nsd.NsdManager.INVALID_LISTENER_KEY; }
private void initializeGlobals(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_kernel2d s) { com.android.rs.test.Type.Builder typeBuilder = new com.android.rs.test.Type.Builder(RS, com.android.rs.test.Element.I32(RS)); int X = 2; s.set_gDimX(X); typeBuilder.setX(X); int Y = 5; s.set_gDimY(Y); typeBuilder.setY(Y); A = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); s.set_A(A); B = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); s.set_B(B); return; }

private void stopListenForPhoneState() { if (mListening) { mTelephonyManager.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE); mListening = false; } }
@java.lang.Override public void write(byte[] buffer, int offset, int byteCount) throws java.io.IOException { java.util.Arrays.checkOffsetAndCount(buffer.length, offset, byteCount); if ((currentEntry) == null) { throw new java.util.zip.ZipException("No active entry"); } if ((currentEntry.getMethod()) == (java.util.zip.ZipOutputStream.STORED)) { out.write(buffer, offset, byteCount); } else { super.write(buffer, offset, byteCount); } crc.update(buffer, offset, byteCount); }



@java.lang.Override public void nvResetConfig(int resetType, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_NV_RESET_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " resetType = ") + resetType)); } try { radioProxy.nvResetConfig(rr.mSerial, com.android.internal.telephony.RIL.convertToHalResetNvType(resetType)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "nvResetConfig", e); } } }
@java.lang.Override public synchronized void removeAddressFromTunnelInterface(int tunnelResourceId, java.lang.String localAddr) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); }
@java.lang.Override @com.android.annotations.NonNull public java.util.Map<java.lang.String, com.android.build.gradle.internal.ProductFlavorData<com.android.build.gradle.internal.dsl.GroupableProductFlavor>> getProductFlavors() { return productFlavors; }



public android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int subId) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd(("[getActiveSubscriptionInfo]+ subId=" + subId)); if (!(android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { if (android.telephony.SubscriptionManager.DBG) { android.telephony.SubscriptionManager.logd("[getActiveSubscriptionInfo]- invalid subId"); } return null; } android.telephony.SubscriptionInfo subInfo = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService("isub")); if (iSub != null) { subInfo = iSub.getActiveSubscriptionInfo(subId, mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return subInfo; }

public int getsockoptByte(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException;
public org.w3c.dom.Node toXml(org.w3c.dom.Element location) { location.appendChild(mSourceLocation.toXml(location.getOwnerDocument())); org.w3c.dom.Element position = location.getOwnerDocument().createElement("position"); position.setAttribute("line", java.lang.String.valueOf(mPosition.getLine())); position.setAttribute("col", java.lang.String.valueOf(mPosition.getColumn())); position.setAttribute("offset", java.lang.String.valueOf(mPosition.getOffset())); location.appendChild(position); return location; }

@javax.annotation.Nonnull public static com.android.jack.ir.ast.JSession buildSession(@javax.annotation.Nonnull com.android.jack.Options options, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks) throws java.lang.Exception { if (((options.proguardFlagsFiles) != null) && (!(options.proguardFlagsFiles.isEmpty()))) { if ((options.flags) == null) { options.flags = new com.android.jack.shrob.spec.Flags(); } for (java.io.File proguardFlagsFile : options.proguardFlagsFiles) { com.android.jack.shrob.proguard.GrammarActions.parse(proguardFlagsFile.getAbsolutePath(), ".", options.flags); } options.applyShrobFlags(); } options.checkValidity(hooks); com.android.sched.util.config.ThreadConfig.setConfig(options.getConfig()); com.android.jack.ir.ast.JSession session = com.android.jack.Jack.buildSession(options, hooks); com.android.sched.scheduler.Request request = com.android.jack.Jack.createInitialRequest(); request.addInitialTagsOrMarkers(com.android.jack.Jack.getJavaSourceInitialTagSet()); if (com.android.sched.util.config.ThreadConfig.get(Options.GENERATE_JACK_FILE).booleanValue()) { request.addProduction(com.android.jack.backend.jayce.JackFormatProduct.class); } com.android.sched.scheduler.PlanBuilder<com.android.jack.ir.ast.JSession> planBuilder = request.getPlanBuilder(com.android.jack.ir.ast.JSession.class); com.android.jack.Jack.fillDexPlan(options, planBuilder); request.addTargetIncludeTagOrMarker(ClassDefItemMarker.Complete.class); planBuilder.getPlan().getScheduleInstance().process(session); return session; }
native void setCharAt(int index, char c);
@java.lang.Override public boolean sendReport(android.bluetooth.BluetoothDevice device, int id, byte[] data) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ((("sendReport(): device=" + device) + " id=") + id)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { return false; } return service.sendReport(device, id, data); }

public static final javax.crypto.Cipher getInstance(java.lang.String transformation) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException { java.util.List transforms = javax.crypto.Cipher.getTransforms(transformation); java.util.List services = javax.crypto.Cipher.getServices(transforms); java.util.Iterator t = services.iterator(); java.lang.Exception failure = null; while (t.hasNext()) { java.security.Provider.Service s = ((java.security.Provider.Service) (t.next())); if ((javax.crypto.JceSecurity.canUseProvider(s.getProvider())) == false) { continue; } javax.crypto.Cipher.Transform tr = javax.crypto.Cipher.getTransform(s, transforms); if (tr == null) { continue; } int canuse = tr.supportsModePadding(s); if (canuse == (javax.crypto.Cipher.S_NO)) { continue; } if (canuse == (javax.crypto.Cipher.S_YES)) { try { javax.crypto.CipherSpi spi = ((javax.crypto.CipherSpi) (s.newInstance(null))); return new javax.crypto.Cipher(transformation, transforms); } catch (java.lang.Exception e) { failure = e; } } else { try { javax.crypto.CipherSpi spi = ((javax.crypto.CipherSpi) (s.newInstance(null))); tr.setModePadding(spi); return new javax.crypto.Cipher(transformation, transforms); } catch (java.lang.Exception e) { failure = e; } } } throw new java.security.NoSuchAlgorithmException(("Cannot find any provider supporting " + transformation), failure); }

public java.io.InputStream getInputStream(java.util.zip.ZipEntry entry) throws java.io.IOException { entry = getEntry(entry.getName()); if (entry == null) { return null; } java.io.RandomAccessFile localRaf = raf; synchronized(localRaf) { java.util.zip.ZipFile.RAFStream rafStream = new java.util.zip.ZipFile.RAFStream(localRaf, ((entry.localHeaderRelOffset) + 28)); java.io.DataInputStream is = new java.io.DataInputStream(rafStream); int localExtraLenOrWhatever = java.lang.Short.reverseBytes(is.readShort()); is.close(); rafStream.skip(((entry.nameLength) + localExtraLenOrWhatever)); rafStream.length = (rafStream.offset) + (entry.compressedSize); if ((entry.compressionMethod) == (java.util.zip.ZipEntry.DEFLATED)) { int bufSize = java.lang.Math.max(1024, ((int) (java.lang.Math.min(entry.getSize(), 65535L)))); return new java.util.zip.ZipFile.ZipInflaterInputStream(rafStream, new java.util.zip.Inflater(true), bufSize, entry); } else { return rafStream; } } }
public void testConnectTimeouts() throws java.io.IOException { tests.net.StuckServer ss = new tests.net.StuckServer(false); int serverPort = ss.getLocalPort(); java.net.URLConnection urlConnection = new java.net.URL(("http://localhost:" + serverPort)).openConnection(); int timeout = 1000; urlConnection.setConnectTimeout(timeout); long start = java.lang.System.currentTimeMillis(); try { urlConnection.getInputStream(); fail(); } catch (java.net.SocketTimeoutException expected) { long elapsed = (java.lang.System.currentTimeMillis()) - start; int attempts = java.net.InetAddress.getAllByName("localhost").length; assertTrue(((((("timeout=" + timeout) + ", elapsed=") + elapsed) + ", attempts=") + attempts), ((java.lang.Math.abs(((attempts * timeout) - elapsed))) < 500)); } finally { ss.close(); } }


public void testShellUtilIntegrity() throws java.lang.Exception { java.lang.String cmd = "ls /system/bin"; com.android.devtools.systemimage.uitest.utils.ShellUtil.ShellResult result = com.android.devtools.systemimage.uitest.utils.ShellUtil.invokeCommand(cmd); assertTrue(result.stderr, ((result.stderr.length()) == 0)); java.io.InputStream inputStream = mInstrumentation.getTargetContext().getAssets().open("util.txt"); java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream, "UTF-8")); java.lang.String line; java.lang.StringBuilder util = new java.lang.StringBuilder(); while ((line = reader.readLine()) != null) { util.append(line).append("\n"); } assertEquals("Failure: The shell util is incomplete!", util.toString(), result.stdout); }
@org.junit.Test public void testThisRefInDefenderMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_33).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }
public boolean p2pProvisionDiscovery(android.net.wifi.p2p.WifiP2pConfig config) { if (config == null) return false; if ((com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.provisionDiscovery(config); } else { switch (config.wps.setup) { case android.net.wifi.WpsInfo.PBC : return doBooleanCommand((("P2P_PROV_DISC " + (config.deviceAddress)) + " pbc")); case android.net.wifi.WpsInfo.DISPLAY : return doBooleanCommand((("P2P_PROV_DISC " + (config.deviceAddress)) + " keypad")); case android.net.wifi.WpsInfo.KEYPAD : return doBooleanCommand((("P2P_PROV_DISC " + (config.deviceAddress)) + " display")); default : break; } return false; } }



public static void test() { int i; assertTrue(((i = 2) == 2)); assertTrue((i == 2)); }
public void countEvent(android.net.metrics.WakeupEvent ev) { (totalWakeups)++; switch (ev.uid) { case ROOT_UID : (rootWakeups)++; break; case SYSTEM_UID : (systemWakeups)++; break; case android.net.metrics.WakeupStats.NO_UID : (noUidWakeups)++; break; default : if ((ev.uid) >= (FIRST_APPLICATION_UID)) { (applicationWakeups)++; } else { (nonApplicationWakeups)++; } break; } }
public void run() { mToast.setGravity(Gravity.BOTTOM, 0, 0); mToast.show(); }
public static boolean hasExtension(java.lang.String extension) { if ((extension == null) || (extension.isEmpty())) { return false; } return libcore.net.MimeUtils.extensionToMimeTypeMap.containsKey(extension); }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getContext(); android.media.cts.Utils.enableAppOps(mContext.getPackageName(), android.media.cts.AudioManagerTest.APPOPS_OP_STR, getInstrumentation()); mAudioManager = ((android.media.AudioManager) (mContext.getSystemService(Context.AUDIO_SERVICE))); android.os.Vibrator vibrator = ((android.os.Vibrator) (mContext.getSystemService(Context.VIBRATOR_SERVICE))); mNm = ((android.app.NotificationManager) (mContext.getSystemService(Context.NOTIFICATION_SERVICE))); mHasVibrator = (vibrator != null) && (vibrator.hasVibrator()); mUseFixedVolume = mContext.getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier("config_useFixedVolume", "bool", "android")); android.content.pm.PackageManager packageManager = mContext.getPackageManager(); mIsTelevision = (packageManager != null) && ((packageManager.hasSystemFeature(PackageManager.FEATURE_LEANBACK)) || (packageManager.hasSystemFeature(PackageManager.FEATURE_TELEVISION))); }


@java.lang.Override @javax.annotation.Nonnull public void delete(@javax.annotation.Nonnull com.android.jack.library.FileType fileType, @javax.annotation.Nonnull com.android.sched.vfs.VPath typePath) throws com.android.sched.util.file.CannotDeleteFileException { vfs.getRootInputOutputVDir().delete(fileType.buildFileVPath(typePath)); }
void onBluetoothDisable() { com.android.bluetooth.btservice.AdapterProperties.debugLog("onBluetoothDisable()"); mBluetoothDisabling = true; if ((getState()) == (android.bluetooth.BluetoothAdapter.STATE_TURNING_OFF)) { mService.cancelDiscovery(); setScanMode(AbstractionLayer.BT_SCAN_MODE_NONE); } }



private void onLocked() { if (DBG) log("only fetch EF_ICCID in locked state"); mLockedRecordsRequested = true; mFh.loadEFTransparent(com.android.internal.telephony.uicc.EF_ICCID, obtainMessage(com.android.internal.telephony.uicc.RuimRecords.EVENT_GET_ICCID_DONE)); (mRecordsToLoad)++; }

public com.android.layoutlib.api.SceneResult moveChild(java.lang.Object parentView, java.lang.Object childView, java.lang.Object beforeSibling, com.android.layoutlib.api.LayoutScene.IAnimationListener listener) { return SceneStatus.NOT_IMPLEMENTED.getResult(); }
@org.junit.Test public void testDefenderMethodByInterfaceInstance() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_31).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }


public static void connect(java.io.FileDescriptor fd, java.net.InetAddress inetAddress, int port, int timeoutMs) throws java.net.SocketException, java.net.SocketTimeoutException { try { libcore.io.IoBridge.connectErrno(fd, inetAddress, port, timeoutMs); } catch (android.system.ErrnoException errnoException) { throw new java.net.ConnectException(libcore.io.IoBridge.connectDetail(inetAddress, port, timeoutMs, errnoException), errnoException); } catch (java.net.SocketException ex) { throw ex; } catch (java.net.SocketTimeoutException ex) { throw ex; } catch (java.io.IOException ex) { throw new java.net.SocketException(ex); } }
private int getTextWidth(java.lang.String str, android.text.TextPaint paint) { float totalWidth = 0.0F; float[] widths = new float[str.length()]; paint.getTextWidths(str, widths); for (float f : widths) { totalWidth += f; } return ((int) (totalWidth)); }
private static void doTestPrimitiveFieldsClasses() { Main.setTag(Main.IntObject.class, 10000); java.lang.System.out.println(Main.followReferencesPrimitiveFields(Main.IntObject.class)); java.lang.System.out.println(Main.getTag(Main.IntObject.class)); Main.setTag(Main.IntObject.class, 0); Main.setTag(Main.FloatObject.class, 10000); java.lang.System.out.println(Main.followReferencesPrimitiveFields(Main.FloatObject.class)); java.lang.System.out.println(Main.getTag(Main.FloatObject.class)); Main.setTag(Main.FloatObject.class, 0); Main.setTag(Main.Inf1.class, 10000); java.lang.System.out.println(Main.followReferencesPrimitiveFields(Main.Inf1.class)); java.lang.System.out.println(Main.getTag(Main.Inf1.class)); Main.setTag(Main.Inf1.class, 0); Main.setTag(Main.Inf2.class, 10000); java.lang.System.out.println(Main.followReferencesPrimitiveFields(Main.Inf2.class)); java.lang.System.out.println(Main.getTag(Main.Inf2.class)); Main.setTag(Main.Inf2.class, 0); }


public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth); }
@com.android.annotations.NonNull java.lang.Boolean getFunctionalTest();

@java.lang.Override protected void applyMutation(dexfuzz.program.Mutation uncastMutation) { dexfuzz.program.mutators.NewArrayLengthChanger.AssociatedMutation mutation = ((dexfuzz.program.mutators.NewArrayLengthChanger.AssociatedMutation) (uncastMutation)); dexfuzz.program.MutatableCode mutatableCode = mutation.mutatableCode; dexfuzz.program.MInsn newArrayInsn = newArrayLengthInsns.get(mutation.newArrayToChangeIdx); int newArrayInsnIdx = mutatableCode.getInstructionIndex(newArrayInsn); dexfuzz.program.MInsn newInsn = new dexfuzz.program.MInsn(); newInsn.insn = new dexfuzz.rawdex.Instruction(); newInsn.insn.info = dexfuzz.rawdex.Instruction.getOpcodeInfo(Opcode.CONST_16); newInsn.insn.vregA = ((int) (newArrayInsn.insn.vregB)); newInsn.insn.vregB = rng.nextInt(100); mutatableCode.insertInstructionAt(newInsn, newArrayInsnIdx); dexfuzz.Log.info(("Changed the length of the array to " + (newInsn.insn.vregB))); stats.incrementStat("Changed length of new array"); }
private int performDexOptInternal(java.lang.String packageName, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete) { android.content.pm.PackageParser.Package p; synchronized(mPackages) { p = mPackages.get(packageName); if (p == null) { return PackageDexOptimizer.DEX_OPT_FAILED; } mPackageUsage.maybeWriteAsync(mPackages); mCompilerStats.maybeWriteAsync(); } long callingId = android.os.Binder.clearCallingIdentity(); try { synchronized(mInstallLock) { return performDexOptInternalWithDependenciesLI(p, checkProfiles, targetCompilerFilter, force, bootComplete); } } finally { android.os.Binder.restoreCallingIdentity(callingId); } }


private boolean hasBlankLineAbove() { if ((mOut.length()) < (2 * (mLineSeparator.length()))) { return false; } return (com.android.ide.eclipse.adt.AdtUtils.endsWith(mOut, mLineSeparator)) && (com.android.ide.eclipse.adt.AdtUtils.endsWith(mOut, ((mOut.length()) - (mLineSeparator.length())), mLineSeparator)); }
@org.junit.Test public void testLamba025() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA025).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }

public void requestPeers(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.PeerListListener listener) { android.net.wifi.p2p.WifiP2pManager.checkChannel(c); c.mAsyncChannel.sendMessage(android.net.wifi.p2p.WifiP2pManager.REQUEST_PEERS, 0, c.putListener(listener)); }
private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException { stream.defaultReadObject(); byte[] encoded = ((byte[]) (stream.readObject())); key = new org.conscrypt.OpenSSLKey(org.conscrypt.NativeCrypto.d2i_PKCS8_PRIV_KEY_INFO(encoded)); final long origGroup = org.conscrypt.NativeCrypto.EC_KEY_get0_group(key.getNativeRef()); group = new org.conscrypt.OpenSSLECGroupContext(org.conscrypt.NativeCrypto.EC_GROUP_dup(origGroup)); }
private void notifyInterfaceAdded(java.lang.String iface) { final int length = mObservers.beginBroadcast(); try { for (int i = 0; i < length; i++) { try { mObservers.getBroadcastItem(i).interfaceAdded(iface); } catch (android.os.RemoteException | java.lang.RuntimeException e) { } } } finally { mObservers.finishBroadcast(); } }
void addToSize(long increment) { mSize += increment; }



@java.lang.Override public android.media.cts.BrowserRoot onGetRoot(java.lang.String clientPackageName, int clientUid, android.os.Bundle rootHints) { mExtras = new android.os.Bundle(); mExtras.putString(android.media.cts.StubMediaBrowserService.EXTRAS_KEY, android.media.cts.StubMediaBrowserService.EXTRAS_VALUE); return new android.media.cts.BrowserRoot(android.media.cts.StubMediaBrowserService.MEDIA_ID_ROOT, mExtras); }
@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JLabeledStatement labeledStatement) { if (!(currentStmts.isEmpty())) { assert (cfg) != null; com.android.jack.cfg.BasicBlock normalBasicBlock = new com.android.jack.cfg.NormalBasicBlock(cfg, currentStmts); setBlockOfStatement(normalBasicBlock); forwardBranchResolver.addForwardBranch(ForwardBranchKind.BRANCH, normalBasicBlock, getConcreteStatement(((com.android.jack.ir.ast.JBlock) (labeledStatement.getBody())))); } super.visit(labeledStatement); return true; }

@org.junit.Test public void testLamba012() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA012).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }
private void executeBuild(java.util.List<java.lang.String> arguments, org.gradle.tooling.ProjectConnection connection, java.lang.String[] tasks) { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add("-i"); args.add("-u"); args.addAll(arguments); org.gradle.tooling.BuildLauncher launcher = connection.newBuild().forTasks(tasks).withArguments(args.toArray(new java.lang.String[args.size()])); if ((stdout) != null) { launcher.setStandardOutput(stdout); } launcher.run(); }
void stopForegroundCompat(int id) { if ((mStopForeground) != null) { mStopForegroundArgs[0] = java.lang.Boolean.TRUE; try { mStopForeground.invoke(this, mStopForegroundArgs); } catch (java.lang.reflect.InvocationTargetException e) { android.util.Log.w("ApiDemos", "Unable to invoke stopForeground", e); } catch (java.lang.IllegalAccessException e) { android.util.Log.w("ApiDemos", "Unable to invoke stopForeground", e); } return; } mNM.cancel(id); setForeground(false); }
public com.android.ide.eclipse.adt.internal.resources.ViewClassInfo getSuperClass() { return mSuperClass; }
public java.lang.String createNetworkSpecifier(int clientId, @android.net.wifi.aware.WifiAwareManager.DataPathRole int role, @android.annotation.Nullable byte[] peer, @android.annotation.Nullable byte[] pmk, @android.annotation.Nullable java.lang.String passphrase) { if (android.net.wifi.aware.WifiAwareManager.VDBG) { android.util.Log.v(android.net.wifi.aware.WifiAwareManager.TAG, ((((("createNetworkSpecifier: role=" + role) + ", pmk=") + (pmk == null ? "null" : "non-null")) + ", passphrase=") + (passphrase == null ? "null" : "non-null"))); } int type = (peer == null) ? android.net.wifi.aware.WifiAwareManager.NETWORK_SPECIFIER_TYPE_OOB_ANY_PEER : android.net.wifi.aware.WifiAwareManager.NETWORK_SPECIFIER_TYPE_OOB; if ((role != (android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_INITIATOR)) && (role != (android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_RESPONDER))) { throw new java.lang.IllegalArgumentException(("createNetworkSpecifier: Invalid 'role' argument when creating a network " + "specifier")); } if (role == (android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_INITIATOR)) { if (peer == null) { throw new java.lang.IllegalArgumentException(("createNetworkSpecifier: Invalid peer MAC " + "address - null not permitted on INITIATOR")); } } if ((peer != null) && ((peer.length) != 6)) { throw new java.lang.IllegalArgumentException("createNetworkSpecifier: Invalid peer MAC address"); } org.json.JSONObject json; try { json = new org.json.JSONObject(); json.put(android.net.wifi.aware.WifiAwareManager.NETWORK_SPECIFIER_KEY_TYPE, type); json.put(android.net.wifi.aware.WifiAwareManager.NETWORK_SPECIFIER_KEY_ROLE, role); json.put(android.net.wifi.aware.WifiAwareManager.NETWORK_SPECIFIER_KEY_CLIENT_ID, clientId); if (peer != null) { json.put(android.net.wifi.aware.WifiAwareManager.NETWORK_SPECIFIER_KEY_PEER_MAC, new java.lang.String(libcore.util.HexEncoding.encode(peer))); } if (pmk == null) { pmk = new byte[0]; } json.put(android.net.wifi.aware.WifiAwareManager.NETWORK_SPECIFIER_KEY_PMK, android.util.Base64.encodeToString(pmk, 0, pmk.length, Base64.DEFAULT)); if (passphrase == null) { passphrase = new java.lang.String(); } json.put(android.net.wifi.aware.WifiAwareManager.NETWORK_SPECIFIER_KEY_PASSPHRASE, passphrase); } catch (org.json.JSONException e) { return ""; } return json.toString(); }
public void setuid(int uid) throws libcore.io.ErrnoException { os.setuid(uid); }
@java.lang.Override public boolean isReachable(java.net.InetAddress addr, int timeout, java.net.NetworkInterface netif, int ttl) throws java.io.IOException { byte[] ifaddr = null; int scope = -1; int netif_scope = -1; if (netif != null) { java.util.Enumeration<java.net.InetAddress> it = netif.getInetAddresses(); java.net.InetAddress inetaddr = null; while (it.hasMoreElements()) { inetaddr = it.nextElement(); if (inetaddr.getClass().isInstance(addr)) { ifaddr = inetaddr.getAddress(); if (inetaddr instanceof java.net.Inet6Address) { netif_scope = ((java.net.Inet6Address) (inetaddr)).getScopeId(); } break; } } if (ifaddr == null) { return false; } } if (addr instanceof java.net.Inet6Address) scope = ((java.net.Inet6Address) (addr)).getScopeId(); dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); try { return isReachable0(addr.getAddress(), scope, timeout, ifaddr, ttl, netif_scope); } catch (java.io.IOException ioe) { return false; } }
public void testAsset() throws java.lang.Throwable { final int resId = com.android.internal.R.drawable.default_wallpaper; int actual = calculateRawResourceChecksum(resId); int expected = (mWithOverlay) ? 20954 : 1371086; assertEquals(expected, actual); }
public void testAesCbcHmacSha256Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public static void main(java.lang.String[] params) throws java.lang.Exception { if ((((params.length) == 0) || ("--help".equals(params[0]))) || ("-h".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if ("--version".equals(params[0])) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } java.lang.String cmd = params[0]; try { if ("sign".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("verify".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("rotate".equals(cmd)) { com.android.apksigner.ApkSignerTool.rotate(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("help".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if ("version".equals(cmd)) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } else { throw new com.android.apksigner.ApkSignerTool.ParameterException((("Unsupported command: " + cmd) + ". See --help for supported commands")); } } catch (com.android.apksigner.ApkSignerTool.ParameterException | com.android.apksigner.OptionsParser e) { java.lang.System.err.println(e.getMessage()); java.lang.System.exit(1); return; } }
@java.lang.Override public int recvfrom(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetSocketAddress srcAddress) throws java.net.SocketException, libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); return os.recvfrom(fd, bytes, byteOffset, byteCount, flags, srcAddress); }
private void postCallback(int advertiserId, int status) { try { com.android.bluetooth.gatt.AdvertiseClient client = getAdvertiseClient(advertiserId); android.bluetooth.le.AdvertiseSettings settings = (client == null) ? null : client.settings; boolean isStart = true; mService.onMultipleAdvertiseCallback(advertiserId, status, isStart, settings); } catch (android.os.RemoteException e) { loge("failed onMultipleAdvertiseCallback", e); } }
public void munlock(long address, long byteCount) throws libcore.io.ErrnoException { os.munlock(address, byteCount); }
@java.lang.Override @javax.annotation.Nonnull public java.lang.String toString() { return (((fileSourceInfo.getFileName()) + '(') + (getStartLine())) + ')'; }
private int updateCarrierIdForCurrentSubscription(android.net.Uri uri, android.content.ContentValues cv) { int subId; try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException(("invalid subid in provided uri " + uri)); } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ("updateCarrierIdForSubId: " + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(com.android.internal.telephony.SubscriptionController.getInstance().isActiveSubId(subId))) { final java.util.List activeSubscriptions = java.util.Arrays.asList(com.android.internal.telephony.SubscriptionController.getInstance().getActiveSubIdList()); int count = 0; for (int subscription : mCurrentSubscriptionMap.keySet()) { if (!(activeSubscriptions.contains(subscription))) { count++; android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ("updateCarrierIdForSubId: " + subscription)); mCurrentSubscriptionMap.remove(subscription); getContext().getContentResolver().notifyChange(CarrierIdentification.CONTENT_URI, null); } } return count; } else { mCurrentSubscriptionMap.put(subId, new android.util.Pair(cv.getAsInteger(CarrierIdentification.CID), cv.getAsString(CarrierIdentification.NAME))); getContext().getContentResolver().notifyChange(CarrierIdentification.CONTENT_URI, null); return 1; } }

private static native void nativeCopyPixelsFromBuffer(int nb, java.nio.Buffer src);
public com.android.server.wifi.hotspot2.DomainMatcher.Match isSubDomain(java.util.List<java.lang.String> domain) { com.android.server.wifi.hotspot2.DomainMatcher.Label label = mRoot; for (java.lang.String labelString : domain) { label = label.getSubLabel(labelString); if (label == null) { return com.android.server.wifi.hotspot2.DomainMatcher.Match.None; } else if ((label.getMatch()) != (com.android.server.wifi.hotspot2.DomainMatcher.Match.None)) { return label.getMatch(); } } return com.android.server.wifi.hotspot2.DomainMatcher.Match.None; }
@java.lang.Override public void executeShellCommand(java.lang.String command, com.android.ddmlib.IShellOutputReceiver receiver, int maxTimeToOutputResponse) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.AdbHelper.executeRemoteCommand(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), command, this, receiver, maxTimeToOutputResponse); }
@org.junit.Before public void before() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mTestLooper = new android.os.test.TestLooper(); mStatusOk = new android.hardware.wifi.V1_0.WifiStatus(); mStatusOk.code = android.hardware.wifi.V1_0.WifiStatusCode.SUCCESS; mStatusFail = new android.hardware.wifi.V1_0.WifiStatus(); mStatusFail.code = android.hardware.wifi.V1_0.WifiStatusCode.ERROR_UNKNOWN; when(mServiceManagerMock.linkToDeath(any(IHwBinder.DeathRecipient.class), anyLong())).thenReturn(true); when(mServiceManagerMock.registerForNotifications(anyString(), anyString(), any(IServiceNotification.Stub.class))).thenReturn(true); when(mWifiMock.linkToDeath(any(IHwBinder.DeathRecipient.class), anyLong())).thenReturn(true); when(mWifiMock.registerEventCallback(any(android.hardware.wifi.V1_0.IWifiEventCallback.class))).thenReturn(mStatusOk); when(mWifiMock.start()).thenReturn(mStatusOk); when(mWifiMock.stop()).thenReturn(mStatusOk); mInOrder = inOrder(mServiceManagerMock, mWifiMock, mManagerStatusCallbackMock); mDut = new com.android.server.wifi.HalDeviceManagerTest.HalDeviceManagerSpy(); executeAndValidateInitializationSequence(); }
private com.android.builder.model.SigningConfig createSigningOverride() { if ((((project.hasProperty(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_STORE_FILE)) && (project.hasProperty(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_STORE_PASSWORD))) && (project.hasProperty(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_KEY_ALIAS))) && (project.hasProperty(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_KEY_PASSWORD))) { com.android.build.gradle.internal.dsl.SigningConfig signingConfigDsl = new com.android.build.gradle.internal.dsl.SigningConfig("externalOverride"); java.util.Map<java.lang.String, ?> props = project.getProperties(); signingConfigDsl.setStoreFile(new java.io.File(((java.lang.String) (props.get(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_STORE_FILE))))); signingConfigDsl.setStorePassword(((java.lang.String) (props.get(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_STORE_PASSWORD)))); signingConfigDsl.setKeyAlias(((java.lang.String) (props.get(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_KEY_ALIAS)))); signingConfigDsl.setKeyPassword(((java.lang.String) (props.get(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_KEY_PASSWORD)))); if (project.hasProperty(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_STORE_TYPE)) { signingConfigDsl.setStoreType(((java.lang.String) (props.get(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_STORE_TYPE)))); } return signingConfigDsl; } return null; }
private static boolean isTruncationLengthValid(java.lang.String algo, int truncLenBits) { switch (algo) { case android.net.IpSecAlgorithm.CRYPT_AES_CBC : return ((truncLenBits == 128) || (truncLenBits == 192)) || (truncLenBits == 256); case android.net.IpSecAlgorithm.AUTH_HMAC_MD5 : return (truncLenBits >= 96) && (truncLenBits <= 128); case android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 : return (truncLenBits >= 96) && (truncLenBits <= 160); case android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 : return (truncLenBits >= 96) && (truncLenBits <= 256); case android.net.IpSecAlgorithm.AUTH_HMAC_SHA384 : return (truncLenBits >= 192) && (truncLenBits <= 384); case android.net.IpSecAlgorithm.AUTH_HMAC_SHA512 : return (truncLenBits >= 256) && (truncLenBits <= 512); case android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM : return ((truncLenBits == 64) || (truncLenBits == 96)) || (truncLenBits == 128); default : return false; } }
public static org.apache.harmony.luni.platform.PlatformAddress on(int value, long size) { org.apache.harmony.luni.platform.PlatformAddress addr = (value == 0) ? PlatformAddress.NULL : new org.apache.harmony.luni.platform.PlatformAddress(value, size); return addr; }

@java.lang.Override public int write(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws java.io.InterruptedIOException, libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); return os.write(fd, bytes, byteOffset, byteCount); }
public void iccExchangeSimIO(int fileID, int command, int p1, int p2, int p3, java.lang.String pathID, android.os.Message response) { mCi.iccIO(command, fileID, pathID, p1, p2, p3, null, null, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_SIM_IO_DONE, response)); }
static void loadAllContacts(android.content.Context context, android.os.Handler handler) { if (com.android.bluetooth.pbap.BluetoothPbapUtils.V) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG, "Loading Contacts ..."); } java.lang.String[] projection = new java.lang.String[]{ android.provider.ContactsContract.Data.CONTACT_ID, android.provider.ContactsContract.Data.DATA1, android.provider.ContactsContract.Data.MIMETYPE }; com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = com.android.bluetooth.pbap.BluetoothPbapUtils.fetchAndSetContacts(context, handler, projection, null, null, true); if ((com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts) < 0) { com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = 0; return; } com.android.bluetooth.pbap.BluetoothPbapUtils.sContactsLoaded = true; }
public android.system.StructStatVfs statvfs(java.lang.String path) throws android.system.ErrnoException { return os.statvfs(path); }
public native void setxattr(java.lang.String path, java.lang.String name, byte[] value, int flags) throws android.system.ErrnoException;
public java.lang.String findNativeLibrary(java.lang.String name) { maybeInit(); if (isDirectory) { java.lang.String path = new java.io.File(dir, name).getPath(); if (libcore.io.IoUtils.canOpenReadOnly(path)) { return path; } } else if ((urlHandler) != null) { java.lang.String entryName = new java.io.File(dir, name).getPath(); if (urlHandler.isEntryStored(entryName)) { return ((zip.getPath()) + (dalvik.system.DexPathList.zipSeparator)) + entryName; } } return null; }
@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedEnum getEnum(@javax.annotation.Nonnull java.lang.String typeName) throws com.android.jack.ir.ast.JTypeLookupException { return ((com.android.jack.ir.ast.JDefinedEnum) (getType(typeName))); }
private void updateBoundCarrierServices(int subId) { int slotId = mSubscriptionManagerProxy.getSlotIndex(subId); java.lang.String newPackageName = mCarrierConfigManager.getConfigForSubId(subId).getString(CarrierConfigManager.KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING, null); if ((slotId != (android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX)) && (slotId < (mNumSlots))) { java.lang.String oldPackageName = mCarrierServices[slotId]; mCarrierServices[slotId] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "Carrier Config updated, binding new ImsService"); unbindImsService(getImsServiceInfoFromCache(oldPackageName)); bindNewImsService(getImsServiceInfoFromCache(newPackageName)); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } } }

public void addRegistrationListener(int serviceClass, com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable(); if (listener == null) { throw new java.lang.NullPointerException("listener can't be null"); } try { mImsService.addRegistrationListener(mPhoneId, serviceClass, createRegistrationListenerProxy(serviceClass, listener)); } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException("addRegistrationListener()", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } }
public static org.conscrypt.OpenSSLECPointContext getInstance(int curveType, org.conscrypt.OpenSSLECGroupContext group, java.security.spec.ECPoint javaPoint) { org.conscrypt.OpenSSLECPointContext point = new org.conscrypt.OpenSSLECPointContext(group, org.conscrypt.NativeCrypto.EC_POINT_new(group.getContext())); org.conscrypt.NativeCrypto.EC_POINT_set_affine_coordinates(group.getContext(), point.getContext(), javaPoint.getAffineX().toByteArray(), javaPoint.getAffineY().toByteArray()); return point; }





private static java.lang.String getDateFormatStringForSetting(android.content.Context context, java.lang.String value) { if (value != null) { int month = value.indexOf('M'); int day = value.indexOf('d'); int year = value.indexOf('y'); if (((month >= 0) && (day >= 0)) && (year >= 0)) { java.lang.String template = context.getString(R.string.numeric_date_template); if ((year < month) && (year < day)) { if (month < day) { value = java.lang.String.format(template, "yyyy", "MM", "dd"); } else { value = java.lang.String.format(template, "yyyy", "dd", "MM"); } } else if (month < day) { if (day < year) { value = java.lang.String.format(template, "MM", "dd", "yyyy"); } else { value = java.lang.String.format(template, "MM", "yyyy", "dd"); } } else { if (month < year) { value = java.lang.String.format(template, "dd", "MM", "yyyy"); } else { value = java.lang.String.format(template, "dd", "yyyy", "MM"); } } return value; } } value = context.getString(R.string.numeric_date_format); return value; }
boolean setData(java.lang.String data) { java.lang.String[] values = data.split(com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigState.SEP); if ((values.length) == 4) { for (com.android.ide.eclipse.adt.internal.sdk.LayoutDevice d : mDeviceList) { if (d.getName().equals(values[0])) { device = d; com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config = device.getConfigs().get(values[1]); if (config != null) { configName = values[1]; locale = new com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier[2]; java.lang.String[] locales = values[2].split(com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigState.SEP_LOCALE); if ((locales.length) >= 2) { if ((locales[0].length()) > 0) { locale[0] = new com.android.ide.eclipse.adt.internal.resources.configurations.LanguageQualifier(locales[0]); } if ((locales[1].length()) > 0) { locale[1] = new com.android.ide.eclipse.adt.internal.resources.configurations.RegionQualifier(locales[1]); } } theme = values[3]; return true; } } } } return false; }

@javax.annotation.Nonnull private com.android.jack.dx.dex.code.DalvCode createCode(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method, @javax.annotation.Nonnull com.android.jack.dx.rop.code.RopMethod ropMethod) { com.android.jack.dx.dex.DexOptions options = new com.android.jack.dx.dex.DexOptions(); options.forceJumbo = forceJumbo; int paramSize = getParameterWordCount(method); int positionListKind; com.android.jack.dx.rop.code.LocalVariableInfo lvInfo; if (emitLocalDebugInfo) { lvInfo = com.android.jack.dx.rop.code.LocalVariableExtractor.extract(ropMethod); } else { lvInfo = null; } if (emitLineNumberTable) { positionListKind = com.android.jack.dx.dex.code.PositionList.LINES; } else { positionListKind = com.android.jack.dx.dex.code.PositionList.NONE; } return com.android.jack.dx.dex.code.RopTranslator.translate(ropMethod, positionListKind, lvInfo, paramSize, options); }
public java.lang.String getIsimImpi() { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) return null; return info.getIsimImpi(); } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } }
@org.junit.Test public void anqpRequestCompletedWithError() { mHandler.notifyANQPDone(com.android.server.wifi.hotspot2.PasspointEventHandlerTest.BSSID, false); verify(mWifiNative, never()).scanResult(anyString()); verify(mCallbacks).onANQPResponse(com.android.server.wifi.hotspot2.PasspointEventHandlerTest.BSSID, null); }

private void notifyHostEmuActivated() { mListener.onHostCardEmulationActivated(); }
public static java.io.File createTempDir(@javax.annotation.Nonnull java.lang.String prefix) throws com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotSetPermissionException, com.android.sched.util.file.WrongPermissionException { final java.io.File tmp = com.android.sched.util.file.Files.createTempDir(((com.android.jack.TestTools.TMP_PREFIX) + prefix)); java.lang.Runtime.getRuntime().addShutdownHook(new java.lang.Thread() { @java.lang.Override public void run() { try { com.android.sched.util.file.FileUtils.deleteDir(tmp); } catch (java.io.IOException e) { java.lang.System.err.println(e.getMessage()); } } }); return tmp; }

public java.net.SocketAddress getsockname(java.io.FileDescriptor fd) throws android.system.ErrnoException;
@java.lang.Override protected void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.pass_fail_list); setPassFailButtonClickListeners(); setInfoResources(R.string.streaming_video, R.string.streaming_video_info, (-1)); android.widget.TextView empty = ((android.widget.TextView) (findViewById(android.R.id.empty))); empty.setText(R.string.sv_no_data); getPassButton().setEnabled(false); setTestListAdapter(getStreamAdapter()); }
@java.lang.Override public void trackResponse(java.net.ResponseSource source) { delegate.trackResponse(source); }

public android.net.IpSecManager.SecurityParameterIndex reserveSecurityParameterIndex(int direction, java.net.InetAddress remoteAddress, int requestedSpi) throws android.net.IpSecManager.ResourceUnavailableException, android.net.IpSecManager.SpiUnavailableException { return new android.net.IpSecManager.SecurityParameterIndex(mService, direction, remoteAddress, requestedSpi); }
@android.test.suitebuilder.annotation.SmallTest public void testCallVoicemail() { try { android.content.Intent intent = new android.content.Intent("android.intent.action.CALL_PRIVILEGED", android.net.Uri.fromParts("voicemail", "", null)); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); mContext.startActivity(intent); fail("startActivity(Intent.ACTION_CALL_PRIVILEGED) did not throw SecurityException as expected"); } catch (java.lang.SecurityException e) { } }

@java.lang.Override protected byte[] engineSign() throws java.security.SignatureException { if ((key) == null) { throw new java.security.SignatureException("Need DSA or RSA or EC private key"); } try { byte[] buffer = new byte[org.conscrypt.NativeCrypto.EVP_PKEY_size(key.getPkeyContext())]; int bytesWritten = org.conscrypt.NativeCrypto.EVP_SignFinal(ctx, buffer, 0, key.getPkeyContext()); byte[] signature = new byte[bytesWritten]; java.lang.System.arraycopy(buffer, 0, signature, 0, bytesWritten); return signature; } catch (java.lang.Exception ex) { throw new java.security.SignatureException(ex); } finally { destroyContextIfExists(); } }

public void saveToXml(org.xmlpull.v1.XmlSerializer out) throws java.io.IOException { out.startTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_ROOT); com.android.server.pm.ShortcutService.writeAttr(out, com.android.server.pm.ShortcutPackageInfo.ATTR_VERSION, mVersionCode); com.android.server.pm.ShortcutService.writeAttr(out, com.android.server.pm.ShortcutPackageInfo.ATTR_SHADOW, mIsShadow); for (int i = 0; i < (mSigHashes.size()); i++) { out.startTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_SIGNATURE); com.android.server.pm.ShortcutService.writeAttr(out, com.android.server.pm.ShortcutPackageInfo.ATTR_SIGNATURE_HASH, libcore.io.Base64.encode(mSigHashes.get(i))); out.endTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_SIGNATURE); } out.endTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_ROOT); }
private void defaultWriteFields(java.lang.Object obj, java.io.ObjectStreamClass desc) throws java.io.IOException { desc.checkDefaultSerialize(); int primDataSize = desc.getPrimDataSize(); if (((primVals) == null) || ((primVals.length) < primDataSize)) { primVals = new byte[primDataSize]; } desc.getPrimFieldValues(obj, primVals); bout.write(primVals, 0, primDataSize, false); java.io.ObjectStreamField[] fields = desc.getFields(false); java.lang.Object[] objVals = new java.lang.Object[desc.getNumObjFields()]; int numPrimFields = (fields.length) - (objVals.length); desc.getObjFieldValues(obj, objVals); for (int i = 0; i < (objVals.length); i++) { if (java.io.ObjectOutputStream.extendedDebugInfo) { debugInfoStack.push((((((("field (class \"" + (desc.getName())) + "\", name: \"") + (fields[(numPrimFields + i)].getName())) + "\", type: \"") + (fields[(numPrimFields + i)].getType())) + "\")")); } try { writeObject0(objVals[i], fields[(numPrimFields + i)].isUnshared()); } finally { if (java.io.ObjectOutputStream.extendedDebugInfo) { debugInfoStack.pop(); } } } }
@org.junit.Test public void testMethodRef005() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(METHODREF005).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }


@java.lang.Override public int getSerializedSize() { int size = 0; int unknownFieldCount = ((unknownFieldData) == null) ? 0 : unknownFieldData.size(); for (int i = 0; i < unknownFieldCount; i++) { com.google.protobuf.nano.UnknownFieldData unknownField = unknownFieldData.get(i); size += com.google.protobuf.nano.CodedOutputByteBufferNano.computeRawVarint32Size(unknownField.tag); size += unknownField.bytes.length; } cachedSize = size; return size; }











private boolean hasOnlyOneDefinition(@javax.annotation.Nonnull com.android.jack.ir.ast.JVariable var, @javax.annotation.Nonnull com.android.jack.cfg.BasicBlock bb) { com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker rdm = bb.getMarker(com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker.class); assert rdm != null; boolean alreadyDefined = false; for (com.android.jack.analysis.DefinitionMarker dm : rdm.getReachingDefs()) { if ((dm.getDefinedVariable()) == var) { if (alreadyDefined) { return false; } alreadyDefined = true; } } return true; }
@org.junit.Test public void backgroundScanSuccessSingleBucket() { com.android.server.wifi.WifiNative.ScanSettings settings = new com.android.server.wifi.ScanTestUtil.NativeScanSettingsBuilder().withBasePeriod(10000).withMaxApPerScan(10).addBucketWithBand(10000, WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN, WifiScanner.WIFI_BAND_24_GHZ).build(); com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod[] expectedPeriods = new com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod[]{ new com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod.ReportType.RESULT, com.android.server.wifi.ScanResults.create(0, 2400), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)), new com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod.ReportType.RESULT, com.android.server.wifi.ScanResults.create(1, 2450), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)) }; doSuccessfulTest(settings, expectedPeriods); }




static android.telephony.SignalStrength convertHalSignalStrength_1_2(android.hardware.radio.V1_2.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gsm.signalStrength, signalStrength.gsm.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, signalStrength.tdScdma.rscp); }
public java.lang.String getLogLine() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(mBuildInfo).append(':'); write(sb, com.android.sdklib.internal.export.ApkData.PROP_MINOR, mMinor); write(sb, com.android.sdklib.internal.export.ApkData.PROP_PROJECT, mRelativePath); write(sb, com.android.sdklib.internal.export.ApkData.PROP_API, mMinSdkVersion); if ((mGlVersion) != (com.android.sdklib.xml.ManifestData.GL_ES_VERSION_NOT_SET)) { write(sb, com.android.sdklib.internal.export.ApkData.PROP_GL, mGlVersion); } if ((mAbi) != null) { write(sb, com.android.sdklib.internal.export.ApkData.PROP_ABI, mAbi); } write(sb, com.android.sdklib.internal.export.ApkData.PROP_SCREENS, mSupportsScreens); return sb.toString(); }


public org.eclipse.swt.graphics.Image setImage(java.awt.image.BufferedImage awtImage) { if (awtImage != (mAwtImage)) { mAwtImage = null; if ((mImage) != null) { mImage.dispose(); } if (awtImage == null) { mImage = null; } else { mImage = com.android.ide.eclipse.adt.internal.editors.layout.gle2.SwtUtils.convertToSwt(mCanvas.getDisplay(), awtImage, false, (-1)); } } else { java.awt.image.WritableRaster awtRaster = mAwtImage.getRaster(); java.awt.image.DataBufferByte byteBuffer = ((java.awt.image.DataBufferByte) (awtRaster.getDataBuffer())); byte[] data = byteBuffer.getData(); org.eclipse.swt.graphics.ImageData imageData = new org.eclipse.swt.graphics.ImageData(mAwtImage.getWidth(), mAwtImage.getHeight(), 32, new org.eclipse.swt.graphics.PaletteData(16711680, 65280, 255)); java.lang.System.arraycopy(data, 0, imageData.data, 0, data.length); mImage = new org.eclipse.swt.graphics.Image(getDevice(), imageData); } return mImage; }

public void enqueueFault(java.lang.String methodName, final int errno) { getHandlers(methodName).add(new java.lang.reflect.InvocationHandler() { @java.lang.Override public java.lang.Object invoke(java.lang.Object proxy, java.lang.reflect.Method method, java.lang.Object[] args) throws libcore.io.ErrnoException { throw new libcore.io.ErrnoException(method.getName(), errno); } }); }
@javax.annotation.Nonnull public com.android.jack.ir.sourceinfo.SourceInfo create(int startCol, int endCol, @javax.annotation.Nonnegative int startLine, @javax.annotation.Nonnegative int endLine, @javax.annotation.Nonnull java.lang.String fileName) { com.android.jack.ir.sourceinfo.FileSourceInfo fileSourceInfo = create(fileName); com.android.jack.ir.sourceinfo.LineSourceInfo lineSourceOrigin = create(startLine, endLine, fileSourceInfo); if ((startCol <= 0) && (endCol <= 0)) { return lineSourceOrigin; } com.android.jack.ir.sourceinfo.ColumnSourceInfo newInstance = new com.android.jack.ir.sourceinfo.ColumnSourceInfo(lineSourceOrigin, startCol, endCol); com.android.jack.ir.sourceinfo.ColumnSourceInfo canonical = canonicalColumnSourceInfos.get(newInstance); assert (canonical == null) || ((newInstance != canonical) && (newInstance.equals(canonical))); if (canonical != null) { return canonical; } else { com.android.jack.ir.sourceinfo.ColumnSourceInfo previousValue = canonicalColumnSourceInfos.putIfAbsent(newInstance, newInstance); if (previousValue != null) { newInstance = previousValue; } return newInstance; } }


@java.lang.Override protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return mUserQuotaTracker.getUserRecord(this.uid).socket; }
private byte getPlayBackState(com.android.bluetooth.avrcp.MediaController mediaController) { android.media.session.PlaybackState pbState = mediaController.getPlaybackState(); byte playStateBytes = com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_STOPPED; if (pbState != null) { playStateBytes = ((byte) (convertPlayStateToBytes(pbState.getState()))); android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ("getPlayBackState: playStateBytes = " + playStateBytes)); } else { android.util.Log.w(com.android.bluetooth.avrcp.Avrcp.TAG, ("playState object null, sending playStateBytes = " + playStateBytes)); } return playStateBytes; }
private com.android.manifmerger.MergingReport merge() throws com.android.manifmerger.ManifestMerger2.MergeFailureException { com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder(mILogger); com.google.common.base.Optional<com.android.manifmerger.XmlDocument> xmlDocumentOptional = com.google.common.base.Optional.absent(); for (java.io.File inputFile : mFlavorsAndBuildTypeFiles) { mILogger.info(("Merging flavors and build manifest " + (inputFile.getPath()))); xmlDocumentOptional = merge(xmlDocumentOptional, inputFile, mergingReportBuilder); } mILogger.info(("Merging main manifest" + (mMainManifestFile.getPath()))); xmlDocumentOptional = merge(xmlDocumentOptional, mMainManifestFile, mergingReportBuilder); for (java.io.File inputFile : mLibraryFiles) { mILogger.info(("Merging library manifest " + (inputFile.getPath()))); xmlDocumentOptional = merge(xmlDocumentOptional, inputFile, mergingReportBuilder); } if (xmlDocumentOptional.isPresent()) { mergingReportBuilder.setMergedDocument(xmlDocumentOptional.get()); } return mergingReportBuilder.build(); }
private void addOtherUserItem(android.content.Context context, java.util.ArrayList<com.android.settings.applications.RunningState.MergedItem> newMergedItems, android.util.SparseArray<com.android.settings.applications.RunningState.MergedItem> userItems, com.android.settings.applications.RunningState.MergedItem newItem) { com.android.settings.applications.RunningState.MergedItem userItem = userItems.get(newItem.mUserId); boolean first = (userItem == null) || ((userItem.mCurSeq) != (mSequence)); if (first) { if (userItem == null) { userItem = new com.android.settings.applications.RunningState.MergedItem(newItem.mUserId); userItems.put(newItem.mUserId, userItem); } else { userItem.mChildren.clear(); } userItem.mCurSeq = mSequence; if ((userItem.mUser = mUsers.get(newItem.mUserId)) == null) { userItem.mUser = new com.android.settings.applications.RunningState.UserState(); android.content.pm.UserInfo info = mUm.getUserInfo(newItem.mUserId); userItem.mUser.mInfo = info; if (info != null) { userItem.mUser.mIcon = com.android.settings.users.UserUtils.getUserIcon(context, mUm, info, context.getResources()); } java.lang.String name = (info != null) ? info.name : null; if (name == null) { name = java.lang.Integer.toString(info.id); } userItem.mUser.mLabel = context.getResources().getString(R.string.running_process_item_user_label, name); } newMergedItems.add(userItem); } userItem.mChildren.add(newItem); }
public static java.io.File getPrebuilt(@javax.annotation.Nonnull java.lang.String prebuiltName) { java.lang.String prebuiltVarName = (com.android.jack.test.toolchain.AbstractTestTools.TOOLCHAIN_PREBUILT_PREFIX) + prebuiltName; java.lang.String prebuiltPath; prebuiltPath = com.android.jack.test.TestsProperties.getProperty(prebuiltVarName); if (prebuiltPath.equals("")) { throw new com.android.jack.test.TestConfigurationException((("Property '" + prebuiltVarName) + "' is not set")); } java.io.File result = new java.io.File(prebuiltPath); if (!(result.isAbsolute())) { result = new java.io.File(com.android.jack.test.TestsProperties.getJackRootDir(), prebuiltPath); } if (!(result.exists())) { throw new com.android.jack.test.TestConfigurationException((((("Can not find '" + prebuiltName) + "' prebuilt at '") + (result.getPath())) + "'")); } return result; }



public native void fdatasync(java.io.FileDescriptor fd) throws android.system.ErrnoException;
public void run() { for (com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction a2 : actions) { if (a2 instanceof com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) { gre.callClosure(((com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) (a2)).getClosure(), a2, key, (!isChecked)); } } }
void startScan(int appIf, boolean isServer, android.bluetooth.le.ScanSettings settings, java.util.List<android.bluetooth.le.ScanFilter> filters, java.util.List<java.util.List<android.bluetooth.le.ResultStorageDescriptor>> storages, java.lang.String callingPackage) { if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, "start scan with filters"); enforceAdminPermission(); if (needsPrivilegedPermissionForScan(settings)) { enforcePrivilegedPermission(); } final com.android.bluetooth.gatt.ScanClient scanClient = new com.android.bluetooth.gatt.ScanClient(appIf, isServer, settings, filters, storages); scanClient.hasLocationPermission = com.android.bluetooth.Utils.checkCallerHasLocationPermission(this, mAppOps, callingPackage); scanClient.hasPeersMacAddressPermission = com.android.bluetooth.Utils.checkCallerHasPeersMacAddressPermission(this); scanClient.legacyForegroundApp = com.android.bluetooth.Utils.isLegacyForegroundApp(this, callingPackage); mClientMap.getScanStatsById(appIf).startScan(); mScanManager.startScan(scanClient); }

public static void e(java.lang.Object objectPrefix, java.lang.Throwable tr, java.lang.String format, java.lang.Object... args) { if (android.telecom.Log.ERROR) { android.util.Log.e(android.telecom.Log.TAG, android.telecom.Log.buildMessage(android.telecom.Log.getPrefixFromObject(objectPrefix), format, args), tr); } }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((getDesc()) == null ? 0 : getDesc().hashCode()); result = (prime * result) + ((mLocalDir) == null ? 0 : mLocalDir.hashCode()); result = (prime * result) + ((mSourceProperties) == null ? 0 : mSourceProperties.hashCode()); return result; }
public static java.lang.String guessMimeTypeFromExtension(java.lang.String extension) { if ((extension == null) || (extension.isEmpty())) { return null; } return libcore.net.MimeUtils.extensionToMimeTypeMap.get(extension); }
@java.lang.Override public boolean hasCompliantPrebuilts() { { com.android.sched.util.config.Config config = com.android.sched.util.config.ThreadConfig.getConfig(); java.util.Collection<com.android.sched.util.config.id.PropertyId<?>> properties = config.getPropertyIds(); for (com.android.sched.util.config.id.PropertyId<?> property : properties) { if (property.hasCategory(com.android.jack.library.PrebuiltCompatibility.class)) { try { if (!(getProperty(("config." + (property.getName()))).equals(config.getAsString(property)))) { return false; } } catch (com.android.jack.library.MissingLibraryPropertyException e) { return false; } } } return true; } }
public static java.security.Provider getExternalProvider(java.lang.String algorithm) { java.security.Provider selectedProvider = null; for (java.security.Provider p : java.security.Security.getProviders(algorithm)) { if (!(p.getClass().getClassLoader().equals(org.conscrypt.CryptoUpcalls.class.getClassLoader()))) { selectedProvider = p; break; } } if (selectedProvider == null) { java.lang.System.err.println(("Could not find external provider for algorithm: " + algorithm)); } return selectedProvider; }
public native java.lang.String getnameinfo(java.net.InetAddress address, int flags) throws android.system.GaiException;
private int readImpl(java.nio.ByteBuffer buffer, long position) throws java.io.IOException { buffer.checkWritable(); checkOpen(); checkReadable(); if (!(buffer.hasRemaining())) { return 0; } int bytesRead = 0; boolean completed = false; try { begin(); try { if (position == (-1)) { bytesRead = Libcore.os.read(fd, buffer); } else { bytesRead = Libcore.os.pread(fd, buffer, position); } if (bytesRead == 0) { bytesRead = -1; } } catch (libcore.io.ErrnoException errnoException) { if ((errnoException.errno) == (EAGAIN)) { bytesRead = 0; } else { throw errnoException.rethrowAsIOException(); } } completed = true; } finally { end((completed && (bytesRead >= 0))); } if (bytesRead > 0) { buffer.position(((buffer.position()) + bytesRead)); } return bytesRead; }
@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) { com.android.sched.vfs.InputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VFS prefixedInputVFS = null; try { prefixedInputVFS = new com.android.sched.vfs.PrefixedFS(vfs, com.android.jack.library.v0002.InputJackLibraryImpl.getSectionPath(fileType)); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.NotDirectoryException e) { throw new java.lang.AssertionError(e); } if (fileType == (com.android.jack.library.FileType.PREBUILT)) { try { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(new com.android.sched.vfs.MessageDigestFS(prefixedInputVFS, com.android.sched.util.config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO))); } catch (com.android.sched.vfs.WrongVFSFormatException e) { throw new java.lang.AssertionError(e); } } else { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(prefixedInputVFS); } sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }


@java.lang.Override public java.security.Key engineDoPhase(java.security.Key key, boolean lastPhase) throws java.security.InvalidKeyException { if ((mOpenSslPrivateKey) == null) { throw new java.lang.IllegalStateException("Not initialized"); } if (!lastPhase) { throw new java.lang.IllegalStateException("ECDH only has one phase"); } if (key == null) { throw new java.security.InvalidKeyException("key == null"); } if (!(key instanceof java.security.interfaces.ECPublicKey)) { throw new java.security.InvalidKeyException(("This phase requires an ECPublicKey. Actual key type: " + (key.getClass()))); } java.security.interfaces.ECPublicKey publicKey = ((java.security.interfaces.ECPublicKey) (key)); org.apache.harmony.xnet.provider.jsse.OpenSSLKey openSslPublicKey; if (publicKey instanceof org.apache.harmony.xnet.provider.jsse.OpenSSLECPublicKey) { openSslPublicKey = ((org.apache.harmony.xnet.provider.jsse.OpenSSLECPublicKey) (publicKey)).getOpenSSLKey(); } else { if (!("X.509".equals(publicKey.getFormat()))) { throw new java.security.InvalidKeyException(((("Non-OpenSSL public key (" + (publicKey.getClass())) + ") offers unsupported encoding format: ") + (publicKey.getFormat()))); } byte[] encoded = publicKey.getEncoded(); if (encoded == null) { throw new java.security.InvalidKeyException((("Non-OpenSSL public key (" + (publicKey.getClass())) + ") does not provide encoded form")); } try { openSslPublicKey = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_PUBKEY(encoded)); } catch (java.lang.Exception e) { throw new java.security.InvalidKeyException("Failed to decode X.509 encoded public key", e); } } byte[] buffer = new byte[mExpectedResultLength]; int actualResultLength = org.apache.harmony.xnet.provider.jsse.NativeCrypto.ECDH_compute_key(buffer, 0, openSslPublicKey.getPkeyContext(), mOpenSslPrivateKey.getPkeyContext()); byte[] result; if (actualResultLength == (-1)) { throw new java.lang.RuntimeException(("Engine returned " + actualResultLength)); } else if (actualResultLength == (mExpectedResultLength)) { result = buffer; } else if (actualResultLength < (mExpectedResultLength)) { result = new byte[actualResultLength]; java.lang.System.arraycopy(buffer, 0, mResult, 0, mResult.length); } else { throw new java.lang.RuntimeException(((("Engine produced a longer than expected result. Expected: " + (mExpectedResultLength)) + ", actual: ") + actualResultLength)); } mResult = result; return null; }
public void setreuid(int ruid, int euid) throws android.system.ErrnoException;
public final void init(int opmode, java.security.Key key, java.security.SecureRandom random) throws java.security.InvalidKeyException { initialized = false; javax.crypto.Cipher.checkOpmode(opmode); if (((spi) != null) && (((lock) == null) || (key == null))) { checkCryptoPerm(spi, key); spi.engineInit(opmode, key, random); } else { try { chooseProvider(javax.crypto.Cipher.I_KEY, opmode, key, null, null, random); } catch (java.security.InvalidAlgorithmParameterException e) { throw new java.security.InvalidKeyException(e); } } initialized = true; this.opmode = opmode; }

public native libcore.io.StructStat fstat(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;

@vogar.target.TestRunnerProperties(testClass = vogar.target.TestRunnerTest.JUnit3Test.class) @org.junit.Test public void testConstructor_SkipPastJUnitRunner() throws java.lang.Exception { java.lang.String failingTestName = (vogar.target.TestRunnerTest.JUnit3Test.class.getName()) + "#testMethodName"; vogar.target.TestRunner runner = testRunnerRule.createTestRunner("--skipPast", failingTestName); java.lang.String skipPast = runner.skipPastReference.get(); assertEquals(failingTestName, skipPast); runner.run(); assertEquals(((((("" + "//00xx{\"outcome\":\"") + (vogar.target.TestRunnerTest.JUnit3Test.class.getName())) + "#testOtherName\"}\n") + "//00xx{\"result\":\"SUCCESS\"}\n") + "//00xx{\"completedNormally\":true}\n"), ios.contents(Stream.OUT)); }

private void onRemoveSiteSelected() { boolean changed = false; org.eclipse.jface.viewers.ISelection sel = mTreeViewerSources.getSelection(); if (((mUpdaterData) != null) && (sel instanceof org.eclipse.jface.viewers.ITreeSelection)) { for (java.lang.Object c : ((org.eclipse.jface.viewers.ITreeSelection) (sel)).toList()) { if ((c instanceof com.android.sdklib.internal.repository.SdkSource) && (((com.android.sdklib.internal.repository.SdkSource) (c)).isUserSource())) { com.android.sdklib.internal.repository.SdkSource source = ((com.android.sdklib.internal.repository.SdkSource) (c)); java.lang.String title = "Delete Add-on Site?"; java.lang.String msg = java.lang.String.format("Are you sure you want to delete the add-on site '%1$s'?", source.getUrl()); if (org.eclipse.jface.dialogs.MessageDialog.openQuestion(getShell(), title, msg)) { mUpdaterData.getSources().remove(source); changed = true; } } } } if (changed) { onRefreshSelected(); } }

private void initializeImageReader(java.lang.String cameraId, int format) throws java.lang.Exception { mOrderedPreviewSizes = android.hardware.camera2.cts.CameraTestUtils.getSupportedPreviewSizes(cameraId, mCameraManager, CameraTestUtils.PREVIEW_SIZE_BOUND); android.util.Size maxPreviewSize = mOrderedPreviewSizes.get(0); createImageReader(maxPreviewSize, format, android.hardware.camera2.cts.PerformanceTest.NUM_MAX_IMAGES, null); updatePreviewSurface(maxPreviewSize); }
public static native double floor(double d);
public void addI8(android.support.v8.renderscript.Byte4 v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addI8(new android.renderscript.Byte4(v.x, v.y, v.z, v.w)); return; } addI8(v.x); addI8(v.y); addI8(v.z); addI8(v.w); }
@org.junit.Test public void testMethodRef009() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(METHODREF009).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }
private static boolean verifyVpnStatus(final android.support.test.uiautomator.UiDevice device) throws java.lang.Exception { device.openNotification(); boolean isTrue = new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws java.lang.Exception { return (device.hasObject(android.support.test.uiautomator.By.res(Res.VPN_LOCK_ICON_RES))) || (device.hasObject(android.support.test.uiautomator.By.text(com.android.devtools.systemimage.uitest.smoke.VpnTest.VPN_ACTIVATED_TEXT))); } }); device.pressHome(); return isTrue; }


static java.math.BigInt generatePrimeDefault(int bitLength) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_generate_prime_ex(r.bignum, bitLength, false, 0, 0, 0); return r; }

public boolean p2pSetChannel(int lc, int oc) { if (com.android.server.wifi.WifiNative.DBG) android.util.Log.d(mTAG, ((("p2pSetChannel: lc=" + lc) + ", oc=") + oc)); synchronized(com.android.server.wifi.WifiNative.sLock) { if ((lc >= 1) && (lc <= 11)) { if (!(doBooleanCommand(("P2P_SET listen_channel " + lc)))) { return false; } } else if (lc != 0) { return false; } if ((oc >= 1) && (oc <= 165)) { int freq = (oc <= 14 ? 2407 : 5000) + (oc * 5); return doBooleanCommand((((("P2P_SET disallow_freq 1000-" + (freq - 5)) + ",") + (freq + 5)) + "-6000")); } else if (oc == 0) { return doBooleanCommand("P2P_SET disallow_freq \"\""); } } return false; }
@java.lang.Override public java.io.File getManifestFile() { return getManifest().getFile(); }





private void removeImsServiceFeature(android.util.Pair<java.lang.Integer, java.lang.Integer> featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, "removeImsServiceFeature called with null values."); return; } com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback callbackToRemove = mFeatureStatusCallbacks.stream().filter(( c) -> ((c.mSlotId) == (featurePair.first)) && ((c.mFeatureType) == (featurePair.second))).findFirst().orElse(null); if (callbackToRemove != null) { mFeatureStatusCallbacks.remove(callbackToRemove); } removeImsFeature(featurePair.first, featurePair.second, (callbackToRemove != null ? callbackToRemove.getCallback() : null)); removeImsFeatureBinder(featurePair.first, featurePair.second); mCallbacks.imsServiceFeatureRemoved(featurePair.first, featurePair.second, this); sendImsFeatureRemovedCallback(featurePair.first, featurePair.second); }

public static void createTasks(org.gradle.model.collection.CollectionBuilder<org.gradle.api.Task> tasks, org.gradle.nativeplatform.SharedLibraryBinarySpec binary, java.io.File buildDir, com.android.build.gradle.managed.NdkConfig ndkConfig, com.android.build.gradle.internal.NdkHandler ndkHandler) { com.android.build.gradle.ndk.internal.StlConfiguration.createStlCopyTask(ndkHandler, ndkConfig.getStl(), tasks, buildDir, binary); if (binary.getBuildType().getName().equals(BuilderConstants.DEBUG)) { com.android.build.gradle.ndk.internal.NdkConfiguration.setupNdkGdbDebug(tasks, binary, buildDir, ndkConfig, ndkHandler); } }
boolean acceptCall(android.bluetooth.BluetoothDevice device, int flag) { enforceCallingOrSelfPermission(com.android.bluetooth.hfpclient.BLUETOOTH_PERM, "Need BLUETOOTH permission"); com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = getStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ("Cannot allocate SM for device " + device)); return false; } int connectionState = sm.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } android.os.Message msg = sm.obtainMessage(HeadsetClientStateMachine.ACCEPT_CALL); msg.arg1 = flag; sm.sendMessage(msg); return true; }
@java.lang.Override public com.android.jack.dx.io.instructions.DecodedInstruction withIndex(int newIndex) { return new com.android.jack.dx.io.instructions.ZeroRegisterDecodedInstruction(getFormat(), getOpcode(), newIndex, getIndexType(), getTarget(), getLiteral()); }
@javax.annotation.Nonnull private com.android.jack.ir.ast.JDefinedClassOrInterface create(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.jayce.JayceFormatException, com.android.jack.jayce.JayceVersionException, java.io.IOException { com.android.jack.jayce.DeclaredTypeNode type = getNNode(NodeLevel.TYPES); java.lang.String packageQualifiedName = com.android.jack.util.NamingTools.getPackageNameFromBinaryName(com.android.jack.util.NamingTools.getClassBinaryNameFromDescriptor(type.getSignature())); com.android.jack.ir.ast.JPackage pack = session.getLookup().getOrCreatePackage(packageQualifiedName); com.android.jack.ir.ast.JDefinedClassOrInterface jType = type.create(pack, this); return jType; }
@java.lang.Override public void onResume() { super.onResume(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ((("onResume, slot id: " + (mSlotId)) + ",") + (mState))); appService.indicateMenuVisibility(true, mSlotId); if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { mStkMenu = appService.getMainMenu(mSlotId); } else { mStkMenu = appService.getMenu(mSlotId); } if ((mStkMenu) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "menu is null"); cancelTimeOut(); finish(); return; } if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "set main menu instance."); appService.getStkContext(mSlotId).setMainActivityInstance(this); } displayMenu(); startTimeOut(); if (!(mAcceptUsersInput)) { mAcceptUsersInput = true; } invalidateOptionsMenu(); mProgressView.setIndeterminate(false); mProgressView.setVisibility(View.GONE); }


protected void syncWithBuildFile() { com.google.gct.idea.appengine.gradle.facet.AppEngineGradleFacet facet = com.google.gct.idea.appengine.gradle.facet.AppEngineGradleFacet.getInstance(moduleSelector.getModule()); if (facet != null) { com.google.gct.idea.appengine.gradle.facet.AppEngineConfigurationProperties model = facet.getConfiguration().getState(); if (model != null) { myServerPortField.setText(model.HTTP_PORT.toString()); myServerAddressField.setText(model.HTTP_ADDRESS); myAppEngineSdkField.setText(model.APPENGINE_SDKROOT); myWarPathField.setText(model.WAR_DIR); myVmArgsField.setText(model.getJvmFlags()); } } }
static com.android.server.timezone.PackageTracker create(android.content.Context context) { com.android.server.timezone.PackageTrackerHelperImpl helperImpl = new com.android.server.timezone.PackageTrackerHelperImpl(context); return new com.android.server.timezone.PackageTracker(helperImpl, helperImpl, helperImpl, new com.android.server.timezone.PackageStatusStorage(context), new com.android.server.timezone.IntentHelperImpl(context)); }



void log(com.android.utils.ILogger logger) { java.lang.StringBuilder stringBuilder = new java.lang.StringBuilder(); stringBuilder.append(com.android.manifmerger.Actions.HEADER); for (java.util.Map.Entry<com.android.manifmerger.XmlNode.NodeKey, com.android.manifmerger.Actions.DecisionTreeRecord> record : mRecords.entrySet()) { stringBuilder.append(record.getKey()).append("\n"); for (com.android.manifmerger.Actions.NodeRecord nodeRecord : record.getValue().getNodeRecords()) { nodeRecord.print(stringBuilder); stringBuilder.append("\n"); } for (java.util.Map.Entry<com.android.manifmerger.XmlNode.NodeName, java.util.List<com.android.manifmerger.Actions.AttributeRecord>> attributeRecords : record.getValue().mAttributeRecords.entrySet()) { stringBuilder.append("\t").append(attributeRecords.getKey()); for (com.android.manifmerger.Actions.AttributeRecord attributeRecord : attributeRecords.getValue()) { stringBuilder.append("\t\t"); attributeRecord.print(stringBuilder); stringBuilder.append("\n"); } } } logger.info(stringBuilder.toString()); }

public void testInflatingStreamsRequiringZipRefill() throws java.io.IOException { int originalSize = 1024 * 1024; byte[] readBuffer = new byte[8192]; java.util.zip.ZipInputStream in = new java.util.zip.ZipInputStream(new java.io.FileInputStream(createZipFile(1, originalSize))); while ((in.getNextEntry()) != null) { while ((in.read(readBuffer, 0, readBuffer.length)) != (-1)) { } } in.close(); }
@javax.annotation.Nonnull com.android.jack.dx.rop.code.RegisterSpec createThisReg(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) { assert (thisReg) == null : "This register was already created."; com.android.jack.dx.rop.type.Type dexRegType = com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx(type); if (emitDebugInfo) { com.android.jack.dx.rop.cst.CstString cstSignature = null; com.android.jack.ir.ast.marker.ThisRefTypeInfo thisMarker = type.getMarker(com.android.jack.ir.ast.marker.ThisRefTypeInfo.class); if ((thisMarker != null) && (!(thisMarker.getGenericSignature().isEmpty()))) { cstSignature = new com.android.jack.dx.rop.cst.CstString(thisMarker.getGenericSignature()); } com.android.jack.dx.rop.code.LocalItem localItem = com.android.jack.dx.rop.code.LocalItem.make(new com.android.jack.dx.rop.cst.CstString("this"), com.android.jack.backend.dex.rop.RopHelper.getCstType(type), cstSignature); thisReg = com.android.jack.dx.rop.code.RegisterSpec.make(nextFreeReg, dexRegType, localItem); } else { thisReg = com.android.jack.dx.rop.code.RegisterSpec.make(nextFreeReg, dexRegType); } nextFreeReg += dexRegType.getCategory(); assert (thisReg) != null; return thisReg; }



public void testSkipOnLargeFiles() throws java.lang.Exception { java.io.File largeFile = java.io.File.createTempFile("FileInputStreamTest_testSkipOnLargeFiles", ""); final long requiredFreeSpaceBytes = (3172L * 1024) * 1024; long fileSize = ((3 * 1024L) * 1024) * 1024; final android.system.StructStatVfs statVfs = android.system.Os.statvfs(largeFile.getPath()); final long freeSpaceAvailableBytes = (statVfs.f_bsize) * (statVfs.f_bavail); if (freeSpaceAvailableBytes < requiredFreeSpaceBytes) { return; } try { libcore.java.io.FileInputStreamTest.allocateEmptyFile(largeFile, fileSize); assertEquals(fileSize, largeFile.length()); try (java.io.FileInputStream fis = new java.io.FileInputStream(largeFile)) { long lastByte = fileSize - 1; assertEquals(0, Libcore.os.lseek(fis.getFD(), 0, OsConstants.SEEK_CUR)); assertEquals(lastByte, fis.skip(lastByte)); } java.io.FileInputStream fis = new java.io.FileInputStream(largeFile); long lastByte = (((3 * 1024) * 1024) * 1024L) - 1; assertEquals(0, Libcore.os.lseek(fis.getFD(), 0, OsConstants.SEEK_CUR)); assertEquals(lastByte, fis.skip(lastByte)); } finally { assertTrue(largeFile.delete()); } }

public void setsockoptIfreq(java.io.FileDescriptor fd, int level, int option, java.lang.String value) throws libcore.io.ErrnoException;
@org.junit.Test public void testConfigRequestBuilderDefaults() { android.net.wifi.aware.ConfigRequest configRequest = new android.net.wifi.aware.ConfigRequest.Builder().build(); collector.checkThat("mClusterHigh", ConfigRequest.CLUSTER_ID_MAX, equalTo(configRequest.mClusterHigh)); collector.checkThat("mClusterLow", ConfigRequest.CLUSTER_ID_MIN, equalTo(configRequest.mClusterLow)); collector.checkThat("mMasterPreference", 0, equalTo(configRequest.mMasterPreference)); collector.checkThat("mSupport5gBand", false, equalTo(configRequest.mSupport5gBand)); }
public static void printVersion(@javax.annotation.Nonnull java.io.PrintStream printStream, @javax.annotation.Nonnull com.android.jack.plugin.Plugin plugin) { printStream.println((((((("Jack plugin: " + (plugin.getFriendlyName())) + " (") + (plugin.getName())) + ") ") + (plugin.getVersion().getVerboseVersion())) + '.')); printStream.println(((" " + (plugin.getDescription())) + '.')); }


public com.android.utils.Pair<S, java.io.File> getDataSetContaining(java.io.File file) { for (S dataSet : mDataSets) { java.io.File sourceFile = dataSet.findMatchingSourceFile(file); if (sourceFile != null) { return com.android.utils.Pair.of(dataSet, sourceFile); } } return null; }




public void testAdjustVolumeInAlarmsOnlyMode() throws java.lang.Exception { if ((mUseFixedVolume) || (mIsTelevision)) { return; } try { android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 1, 0); setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALARMS); int musicVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC); mAudioManager.adjustStreamVolume(AudioManager.STREAM_MUSIC, AudioManager.ADJUST_RAISE, 0); int volumeDelta = getVolumeDelta(mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); assertEquals((musicVolume + volumeDelta), mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); } finally { setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL); } }






static void displayRemoveBookmarkDialog(final long id, final java.lang.String title, final android.content.Context context, final android.os.Message msg) { new android.app.AlertDialog.Builder(context).setIconAttribute(android.R.attr.alertDialogIcon).setMessage(context.getString(R.string.delete_bookmark_warning, title)).setPositiveButton(R.string.ok, new android.content.DialogInterface.OnClickListener() { @java.lang.Override public void onClick(android.content.DialogInterface dialog, int whichButton) { if (msg != null) { msg.sendToTarget(); } java.lang.Runnable runnable = new java.lang.Runnable() { @java.lang.Override public void run() { android.net.Uri uri = android.content.ContentUris.withAppendedId(BrowserContract.Bookmarks.CONTENT_URI, id); context.getContentResolver().delete(uri, null, null); } }; new java.lang.Thread(runnable).start(); } }).setNegativeButton(R.string.cancel, null).show(); }
@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null) ? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); enforceAccessPermission(); } else { networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureRequestableCapabilities(networkCapabilities); if (timeoutMs < 0) { throw new java.lang.IllegalArgumentException("Bad timeout specified"); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(("requestNetwork for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri)); if (timeoutMs > 0) { mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs); } return networkRequest; }




@java.lang.Override public void dispose() { super.dispose(); if ((mOutlinePage) != null) { mOutlinePage.setModel(null); mOutlinePage = null; } if ((mHoverFgColor) != null) { mHoverFgColor.dispose(); mHoverFgColor = null; } if ((mDropTarget) != null) { mDropTarget.dispose(); mDropTarget = null; } if ((mRulesEngine) != null) { mRulesEngine.dispose(); mRulesEngine = null; } if ((mDragSource) != null) { mDragSource.dispose(); mDragSource = null; } if ((mClipboard) != null) { mClipboard.dispose(); mClipboard = null; } }
public boolean getMultiDex() { java.lang.Boolean value = mBuildType.getMultiDex(); if (value != null) { return value; } value = mMergedFlavor.getMultiDex(); if (value != null) { return value; } return false; }
public static void sort(java.lang.Object[] a, int fromIndex, int toIndex) { if (java.util.Arrays.LegacyMergeSort.userRequested) java.util.Arrays.legacyMergeSort(a, fromIndex, toIndex); else java.util.ComparableTimSort.sort(a, fromIndex, toIndex); }

public boolean loadFromUserStoreAfterUnlockOrSwitch(int userId) { com.android.server.wifi.WifiConfigStoreData storeData; try { storeData = mWifiConfigStore.switchUserStoreAndRead(mWifiConfigStore.createUserFile(userId)); } catch (java.io.IOException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG, "Reading from new store failed. All saved private networks are lost!", e); return false; } catch (org.xmlpull.v1.XmlPullParserException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG, ("XML deserialization of store failed. All saved private networks are" + "lost!"), e); return false; } loadInternalDataFromUserStore(storeData.getUserConfigurations(), storeData.getDeletedEphemeralSSIDs()); return true; }
public void runTest() { result = com.android.rs.unittest.UnitTest.UnitTestResult.UT_RUNNING; run(); }
@java.lang.Override void setupSetter(java.lang.Class targetClass) { if ((mProperty) != null) { return; } try { mPropertyMapLock.writeLock().lock(); java.util.HashMap<java.lang.String, java.lang.Integer> propertyMap = android.animation.PropertyValuesHolder.FloatPropertyValuesHolder.sJNISetterPropertyMap.get(targetClass); if (propertyMap != null) { java.lang.Integer mJniSetterInteger = propertyMap.get(mPropertyName); if (mJniSetterInteger != null) { mJniSetter = mJniSetterInteger; } } if ((mJniSetter) == 0) { java.lang.String methodName = android.animation.PropertyValuesHolder.getMethodName("set", mPropertyName); mJniSetter = android.animation.PropertyValuesHolder.nGetFloatMethod(targetClass, methodName); if ((mJniSetter) != 0) { if (propertyMap == null) { propertyMap = new java.util.HashMap<java.lang.String, java.lang.Integer>(); android.animation.PropertyValuesHolder.FloatPropertyValuesHolder.sJNISetterPropertyMap.put(targetClass, propertyMap); } propertyMap.put(mPropertyName, mJniSetter); } } } catch (java.lang.NoSuchMethodError e) { } finally { mPropertyMapLock.writeLock().unlock(); } if ((mJniSetter) == 0) { super.setupSetter(targetClass); } }
@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.InputVFile getFile(@javax.annotation.Nonnull com.android.jack.library.FileType fileType, @javax.annotation.Nonnull com.android.sched.vfs.VPath typePath) throws com.android.jack.library.FileTypeDoesNotExistException { try { typePath.addSuffix(fileType.getFileExtension()); return libraryVDir.getInputVFile(typePath); } catch (com.android.sched.util.file.NotFileOrDirectoryException e) { throw new com.android.jack.library.FileTypeDoesNotExistException(getLocation(), typePath, fileType); } catch (com.android.sched.util.file.NoSuchFileException e) { throw new com.android.jack.library.FileTypeDoesNotExistException(getLocation(), typePath, fileType); } }

protected java.io.File buildProject(java.lang.String name, java.lang.String gradleVersion) { return runTasksOnProject(name, gradleVersion, "clean", "assembleDebug", "lint"); }
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws java.lang.Exception { assert (outputVDir) != null; java.util.List<com.android.jack.ir.ast.Resource> resources = session.getResources(); for (com.android.jack.ir.ast.Resource resource : resources) { com.android.sched.vfs.InputVFile inputFile = resource.getVFile(); com.android.sched.vfs.VPath path = resource.getPath(); com.android.sched.vfs.OutputVFile outputFile = outputVDir.getRootOutputVDir().createOutputVFile(path); outputFile.copy(inputFile); } }
@java.lang.Override public void getPreferredVoicePrivacy(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getPreferredVoicePrivacy(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getPreferredVoicePrivacy", e); } } }

@org.junit.Test public void testMergerWithHighNumberOfMethods() throws java.lang.Exception { java.io.File srcFolder = com.android.jack.TestTools.createTempDir("oneDexPerType", "SrcFolder"); for (int fileIdx = 0; fileIdx < (com.android.jack.tools.merger.test011.MergerTest011.fileCount); fileIdx++) { generateJavaFileWithMethods(srcFolder, fileIdx, 100); } generateJavaFileWithMethods(srcFolder, com.android.jack.tools.merger.test011.MergerTest011.fileCount, 36); try { buildOneDexPerType(com.android.jack.TestTools.getDefaultBootclasspathString(), srcFolder, false); junit.framework.Assert.fail(); } catch (com.android.jack.JackAbortException e) { java.lang.Throwable cause = e.getCause(); junit.framework.Assert.assertTrue((cause instanceof com.android.jack.backend.dex.DexWritingException)); junit.framework.Assert.assertTrue(((cause.getCause()) instanceof com.android.jack.backend.dex.SingleDexOverflowException)); junit.framework.Assert.assertTrue(((cause.getCause().getCause()) instanceof com.android.jack.tools.merger.MethodIdOverflowException)); } }
private static int getExpectedBlockSize(java.lang.String algorithm) { java.lang.Integer expected = libcore.javax.crypto.CipherTest.EXPECTED_BLOCK_SIZE.get(algorithm); assertNotNull(algorithm, expected); return expected; }


public boolean startScan(com.android.server.wifi.WifiNative.ScanSettings settings, com.android.server.wifi.WifiNative.ScanEventHandler eventHandler) { android.hardware.wifi.V1_0.WifiStatus status; kilroy(); if (eventHandler == null) return false; synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return false; try { if (((mScan) != null) && (!(mScan.paused))) { status = mIWifiStaIface.stopBackgroundScan(mScan.cmdId); if ((status.code) != (android.hardware.wifi.V1_0.WifiStatusCode.SUCCESS)) { kilroy(); } mScan = null; } mLastScanCmdId = ((mLastScanCmdId) % 9) + 1; com.android.server.wifi.WifiVendorHal.CurrentBackgroundScan scan = new com.android.server.wifi.WifiVendorHal.CurrentBackgroundScan(mLastScanCmdId, settings); status = mIWifiStaIface.startBackgroundScan(scan.cmdId, scan.param); if ((status.code) != (android.hardware.wifi.V1_0.WifiStatusCode.SUCCESS)) return false; kilroy(); scan.eventHandler = eventHandler; mScan = scan; return true; } catch (android.os.RemoteException e) { handleRemoteException(e); return false; } } }


public void answer(byte[] peer, int method, java.lang.String pin, boolean joinExisting, boolean persistent, int goIntent, ISupplicantP2pIface.connectCallback cb) throws android.os.RemoteException { methods.add(method); if (method == (ISupplicantP2pIface.WpsProvisionMethod.DISPLAY)) { assertEquals(pin, configPin); } cb.onValues(mStatusSuccess, pin); }
private static void processFailLoadAndGc() throws Main.TestFailed { try { Main.BrokenDexLoader loader; loader = new Main.BrokenDexLoader(java.lang.ClassLoader.getSystemClassLoader()); loader.findBrokenClass(); java.lang.System.err.println("ERROR: Inaccessible was accessible"); } catch (java.lang.reflect.InvocationTargetException ite) { java.lang.Throwable cause = ite.getCause(); if (cause instanceof java.lang.NullPointerException) { java.lang.System.err.println("Got expected ITE/NPE"); } else { java.lang.System.err.println("Got unexpected ITE"); ite.printStackTrace(); } } }

public java.security.Provider.Service getService(java.lang.String type, java.lang.String name) { for (int i = 0; i < (configs.length); i++) { java.security.Provider p = getProvider(i); java.security.Provider.Service s = p.getService(type, name); if (s != null) { return s; } } return null; }


@java.lang.Override public java.net.CacheResponse get(java.net.URI uri, java.lang.String requestMethod, java.util.Map<java.lang.String, java.util.List<java.lang.String>> requestHeaders) throws java.io.IOException { return delegate.get(uri, requestMethod, requestHeaders); }
public static native long EVP_VerifyInit(java.lang.String algorithm);
@com.android.annotations.NonNull private java.util.List<java.lang.String> getAaptOutput(@com.android.annotations.NonNull java.io.File apkFile) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { java.util.ArrayList<java.lang.String> command = com.google.common.collect.Lists.newArrayList(); command.add(mAaptFile.getAbsolutePath()); command.add("dump"); command.add("badging"); command.add(apkFile.getPath()); final java.util.List<java.lang.String> aaptOutput = com.google.common.collect.Lists.newArrayList(); mCommandLineRunner.runCmdLine(command, new com.android.ide.common.internal.CommandLineRunner.CommandLineOutput() { @java.lang.Override public void out(@com.android.annotations.Nullable java.lang.String line) { if (line != null) { aaptOutput.add(line); } } @java.lang.Override public void err(@com.android.annotations.Nullable java.lang.String line) { super.err(line); } }, null); return aaptOutput; }



@java.lang.Override public android.os.IBinder onBind(android.content.Intent intent) { if ((intent == null) || (!(android.telephony.data.DataService.DATA_SERVICE_INTERFACE.equals(intent.getAction())))) { loge(("Unexpected intent " + intent)); return null; } int slotId = intent.getIntExtra(android.telephony.data.DataService.DATA_SERVICE_EXTRA_SLOT_ID, SubscriptionManager.INVALID_SIM_SLOT_INDEX); if (!(android.telephony.SubscriptionManager.isValidSlotIndex(slotId))) { loge(("Invalid slot id " + slotId)); return null; } log(("onBind: slot id=" + slotId)); android.telephony.data.DataService.IDataServiceWrapper binder = mBinderMap.get(slotId); if (binder == null) { android.os.Message msg = mHandler.obtainMessage(android.telephony.data.DataService.DATA_SERVICE_INTERNAL_REQUEST_INITIALIZE_SERVICE); msg.arg1 = slotId; msg.sendToTarget(); binder = new android.telephony.data.DataService.IDataServiceWrapper(slotId); mBinderMap.put(slotId, binder); } return binder; }
public static java.net.URI uri(java.lang.String format, java.lang.Object... args) { java.lang.String uriString = java.lang.String.format(format, args); try { return new java.net.URI(uriString); } catch (java.net.URISyntaxException e) { throw new java.lang.IllegalStateException(("Known good uri has syntax error: " + uriString), e); } }
protected void chooseUpstreamType(boolean tryCell) { updateConfiguration(); final int upstreamType = findPreferredUpstreamType(getConnectivityManager(), mConfig); if (upstreamType == (android.net.ConnectivityManager.TYPE_NONE)) { if (tryCell) { mUpstreamNetworkMonitor.registerMobileNetworkRequest(); } else { sendMessageDelayed(com.android.server.connectivity.Tethering.TetherMasterSM.CMD_RETRY_UPSTREAM, com.android.server.connectivity.Tethering.TetherMasterSM.UPSTREAM_SETTLE_TIME_MS); } } setUpstreamByType(upstreamType); }
public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException { return os.sendfile(outFd, inFd, inOffset, byteCount); }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578822") public void testVpn() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); if (!(com.android.devtools.systemimage.uitest.smoke.VpnTest.verifyVpnStatus(device))) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "TestVPN"); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.START_VPN_BUTTON_RES)).clickAndWaitForNewWindow(); new com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher(device).checkForCondition(); org.junit.Assert.assertTrue("Failed to find the VPN lock icon after starting VPN!", com.android.devtools.systemimage.uitest.smoke.VpnTest.verifyVpnStatus(device)); } }
@org.junit.Test @java.lang.Runtime public void test002() throws java.lang.Exception { java.lang.String test = "com.android.jack.optimizations.wofr.test002"; java.lang.String aType = "Lcom/android/jack/optimizations/wofr/test002/jack/A;"; compileAndValidate(test, defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert((("test(" + aType) + "I)V"), dalvik(test, "A.test.dalvik")))); com.android.jack.optimizations.wofr.CompilationProperties properties = defaultProperties().with(Optimizations.WriteOnlyFieldRemoval.PRESERVE_NULL_CHECKS.getName(), java.lang.Boolean.TRUE).with(Optimizations.WriteOnlyFieldRemoval.PRESERVE_OBJECT_LIFETIME.getName(), java.lang.Boolean.TRUE).with(Optimizations.WriteOnlyFieldRemoval.ENSURE_TYPE_INITIALIZERS.getName(), java.lang.Boolean.TRUE); compileAndValidate(test, properties, new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert((("test(" + aType) + "I)V"), dalvik(test, "A.test.jls.dalvik")))); }
public void onHostCardEmulationActivated();
public void writeCurrentFileName(@javax.annotation.Nonnull java.lang.String fileName) throws java.io.IOException { writeOpenFileName(); writeString(fileName); writeCloseFileName(); currentFileName = fileName; }
public void test_SSLSocket_setSoWriteTimeout() throws java.lang.Exception { if (libcore.java.security.StandardNames.IS_RI) { return; } final libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create(); SSLSocket client = ((SSLSocket) (c.clientContext.getSocketFactory().createSocket())); int sendBufferSize = 1024; client.setSendBufferSize(sendBufferSize); sendBufferSize = client.getSendBufferSize(); final int recvBufferSize = 128; c.serverSocket.setReceiveBufferSize(recvBufferSize); client.connect(new java.net.InetSocketAddress(c.host, c.port)); final SSLSocket server = ((SSLSocket) (c.serverSocket.accept())); java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newSingleThreadExecutor(); java.util.concurrent.Future<java.lang.Void> future = executor.submit(new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { server.startHandshake(); return null; } }); executor.shutdown(); client.startHandshake(); java.lang.String expectedClassName = "com.android.org.conscrypt.OpenSSLSocketImpl"; java.lang.Class<?> actualClass = client.getClass(); assertEquals(expectedClassName, actualClass.getName()); java.lang.reflect.Method setSoWriteTimeout = actualClass.getMethod("setSoWriteTimeout", new java.lang.Class<?>[]{ java.lang.Integer.TYPE }); setSoWriteTimeout.invoke(client, 1); try { final int extra = 1; client.getOutputStream().write(new byte[sendBufferSize + extra]); fail(); } catch (java.net.SocketTimeoutException expected) { } future.get(); client.close(); server.close(); c.close(); }





public static org.xmlpull.v1.XmlPullParserFactory newInstance(java.lang.String classNames, java.lang.Class context) throws org.xmlpull.v1.XmlPullParserException { classNames = "org.kxml2.io.KXmlParser,org.kxml2.io.KXmlSerializer"; org.xmlpull.v1.XmlPullParserFactory factory = null; final java.util.ArrayList parserClasses = new java.util.ArrayList(); final java.util.ArrayList serializerClasses = new java.util.ArrayList(); int pos = 0; while (pos < (classNames.length())) { int cut = classNames.indexOf(',', pos); if (cut == (-1)) cut = classNames.length(); final java.lang.String name = classNames.substring(pos, cut); java.lang.Class candidate = null; java.lang.Object instance = null; try { candidate = java.lang.Class.forName(name); instance = candidate.newInstance(); } catch (java.lang.Exception e) { } if (candidate != null) { boolean recognized = false; if (instance instanceof org.xmlpull.v1.XmlPullParser) { parserClasses.add(candidate); recognized = true; } if (instance instanceof org.xmlpull.v1.XmlSerializer) { serializerClasses.add(candidate); recognized = true; } if (instance instanceof org.xmlpull.v1.XmlPullParserFactory) { if (factory == null) { factory = ((org.xmlpull.v1.XmlPullParserFactory) (instance)); } recognized = true; } if (!recognized) { throw new org.xmlpull.v1.XmlPullParserException(("incompatible class: " + name)); } } pos = cut + 1; } if (factory == null) { factory = new org.xmlpull.v1.XmlPullParserFactory(); } factory.parserClasses = parserClasses; factory.serializerClasses = serializerClasses; factory.classNamesLocation = "org.kxml2.io.kXmlParser,org.kxml2.io.KXmlSerializer"; return factory; }
public void testOptionsMenuKey() { if (!(mActivity.getWindow().hasFeature(Window.FEATURE_OPTIONS_PANEL))) { return; } final boolean[] menuIsVisible = new boolean[]{ false }; mActivity.getActionBar().addOnMenuVisibilityListener(( isVisible) -> menuIsVisible[0] = isVisible); getInstrumentation().sendKeyDownUpSync(KeyEvent.KEYCODE_MENU); getInstrumentation().waitForIdleSync(); assertTrue(menuIsVisible[0]); getInstrumentation().sendKeyDownUpSync(KeyEvent.KEYCODE_MENU); getInstrumentation().waitForIdleSync(); assertFalse(menuIsVisible[0]); }
public static final native android.os.IHwBinder getService(java.lang.String iface, java.lang.String serviceName) throws android.os.RemoteException, java.util.NoSuchElementException;


public void stopVendorHal() { mHalDeviceManager.stop(); android.util.Log.i(com.android.server.wifi.WifiVendorHal.TAG, "Vendor Hal stopped"); }
@org.junit.Test public void testClassFileIsCompiled() throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File[] defaultClasspath = toolchain.getDefaultBootClasspath(); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempFile("jackOut", toolchain.getLibraryExtension()); java.io.File classOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File sourceDir = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir("com.android.jack.classfile.test001"); toolchain.addProperty(Options.EMIT_CLASS_FILES.getName(), "true"); toolchain.addProperty(Options.EMIT_CLASS_FILES_FOLDER.getName(), classOut.getPath()); toolchain.addToClasspath(defaultClasspath).srcToLib(jackOut, true, sourceDir); junit.framework.Assert.assertTrue(new java.io.File(classOut, "com/android/jack/classfile/test001/jack/ClassTest.class").isFile()); }
@org.junit.Test public void testLamba023() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA023).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }

@javax.annotation.Nonnull @java.lang.Override public com.android.jack.load.PackageLoader getLoaderForSubPackage(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) throws com.android.jack.ir.ast.JPackageLookupException { for (com.android.sched.vfs.InputVElement sub : packageVDir.list()) { if ((sub.isVDir()) && (sub.getName().equals(simpleName))) { return new com.android.jack.jayce.JaycePackageLoader(inputJackLibrary, ((com.android.sched.vfs.InputVDir) (sub)), lookup, defaultLoadLevel); } } throw new com.android.jack.ir.ast.JPackageLookupException(simpleName, loading); }
public static java.lang.String encode(byte[] in) { int length = (((in.length) + 2) * 4) / 3; byte[] out = new byte[length]; int index = 0; int end = (in.length) - ((in.length) % 3); for (int i = 0; i < end; i += 3) { out[(index++)] = libcore.io.Base64.map[(((in[i]) & 255) >> 2)]; out[(index++)] = libcore.io.Base64.map[((((in[i]) & 3) << 4) | (((in[(i + 1)]) & 255) >> 4))]; out[(index++)] = libcore.io.Base64.map[((((in[(i + 1)]) & 15) << 2) | (((in[(i + 2)]) & 255) >> 6))]; out[(index++)] = libcore.io.Base64.map[((in[(i + 2)]) & 63)]; } switch ((in.length) % 3) { case 1 : out[(index++)] = libcore.io.Base64.map[(((in[end]) & 255) >> 2)]; out[(index++)] = libcore.io.Base64.map[(((in[end]) & 3) << 4)]; out[(index++)] = '='; out[(index++)] = '='; break; case 2 : out[(index++)] = libcore.io.Base64.map[(((in[end]) & 255) >> 2)]; out[(index++)] = libcore.io.Base64.map[((((in[end]) & 3) << 4) | (((in[(end + 1)]) & 255) >> 4))]; out[(index++)] = libcore.io.Base64.map[(((in[(end + 1)]) & 15) << 2)]; out[(index++)] = '='; break; } return new java.lang.String(out, 0, index, java.nio.charset.StandardCharsets.US_ASCII); }
private void handleRemoveNetworkRequest(final com.android.server.ConnectivityService.NetworkRequestInfo nri, final int whichCallback) { final java.lang.String logCallbackType = android.net.ConnectivityManager.getCallbackName(whichCallback); if ((com.android.server.ConnectivityService.VDBG) || ((com.android.server.ConnectivityService.DBG) && (nri.request.isRequest()))) { com.android.server.ConnectivityService.log((((("releasing " + (nri.request)) + " (") + logCallbackType) + ")")); } nri.unlinkDeathRecipient(); mNetworkRequests.remove(nri.request); synchronized(mUidToNetworkRequestCount) { int requests = mUidToNetworkRequestCount.get(nri.mUid, 0); if (requests < 1) { android.util.Slog.wtf(com.android.server.ConnectivityService.TAG, ((("BUG: too small request count " + requests) + " for UID ") + (nri.mUid))); } else if (requests == 1) { mUidToNetworkRequestCount.removeAt(mUidToNetworkRequestCount.indexOfKey(nri.mUid)); } else { mUidToNetworkRequestCount.put(nri.mUid, (requests - 1)); } } mNetworkRequestInfoLogs.log(("RELEASE " + nri)); if (nri.request.isRequest()) { boolean wasKept = false; com.android.server.connectivity.NetworkAgentInfo nai = mNetworkForRequestId.get(nri.request.requestId); if (nai != null) { boolean wasBackgroundNetwork = nai.isBackgroundNetwork(); nai.removeRequest(nri.request.requestId); if (com.android.server.ConnectivityService.VDBG) { com.android.server.ConnectivityService.log(((((" Removing from current network " + (nai.name())) + ", leaving ") + (nai.numNetworkRequests())) + " requests.")); } updateLingerState(nai, android.os.SystemClock.elapsedRealtime()); if (unneeded(nai, com.android.server.ConnectivityService.UnneededFor.TEARDOWN)) { if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log((("no live requests for " + (nai.name())) + "; disconnecting")); teardownUnneededNetwork(nai); } else { wasKept = true; } mNetworkForRequestId.remove(nri.request.requestId); if ((!wasBackgroundNetwork) && (nai.isBackgroundNetwork())) { updateCapabilities(nai.getCurrentScore(), nai, nai.networkCapabilities); } } for (com.android.server.connectivity.NetworkAgentInfo otherNai : mNetworkAgentInfos.values()) { if ((otherNai.isSatisfyingRequest(nri.request.requestId)) && (otherNai != nai)) { android.util.Slog.wtf(com.android.server.ConnectivityService.TAG, ((((("Request " + (nri.request)) + " satisfied by ") + (otherNai.name())) + ", but mNetworkAgentInfos says ") + (nai != null ? nai.name() : "null"))); } } if (((nri.request.legacyType) != (TYPE_NONE)) && (nai != null)) { boolean doRemove = true; if (wasKept) { for (int i = 0; i < (nai.numNetworkRequests()); i++) { android.net.NetworkRequest otherRequest = nai.requestAt(i); if (((otherRequest.legacyType) == (nri.request.legacyType)) && (otherRequest.isRequest())) { if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(" still have other legacy request - leaving"); doRemove = false; } } } if (doRemove) { mLegacyTypeTracker.remove(nri.request.legacyType, nai, false); } } for (com.android.server.ConnectivityService.NetworkFactoryInfo nfi : mNetworkFactoryInfos.values()) { nfi.asyncChannel.sendMessage(android.net.NetworkFactory.CMD_CANCEL_REQUEST, nri.request); } } else { for (com.android.server.connectivity.NetworkAgentInfo nai : mNetworkAgentInfos.values()) { nai.removeRequest(nri.request.requestId); if ((nri.request.networkCapabilities.hasSignalStrength()) && (nai.satisfiesImmutableCapabilitiesOf(nri.request))) { updateSignalStrengthThresholds(nai, "RELEASE", nri.request); } } } callCallbackForRequest(nri, null, whichCallback, 0); }

@android.test.suitebuilder.annotation.SmallTest public void testScanResultParceling() { android.bluetooth.BluetoothDevice device = android.bluetooth.BluetoothAdapter.getDefaultAdapter().getRemoteDevice(android.bluetooth.cts.ScanResultTest.DEVICE_ADDRESS); android.bluetooth.le.ScanResult result = new android.bluetooth.le.ScanResult(device, android.bluetooth.cts.TestUtils.parseScanRecord(android.bluetooth.cts.ScanResultTest.SCAN_RECORD), android.bluetooth.cts.ScanResultTest.RSSI, android.bluetooth.cts.ScanResultTest.TIMESTAMP_NANOS); android.os.Parcel parcel = android.os.Parcel.obtain(); result.writeToParcel(parcel, 0); parcel.setDataPosition(0); android.bluetooth.le.ScanResult resultFromParcel = ScanResult.CREATOR.createFromParcel(parcel); assertEquals(android.bluetooth.cts.ScanResultTest.RSSI, resultFromParcel.getRssi()); assertEquals(android.bluetooth.cts.ScanResultTest.TIMESTAMP_NANOS, resultFromParcel.getTimestampNanos()); assertEquals(device, resultFromParcel.getDevice()); android.bluetooth.cts.TestUtils.assertArrayEquals(android.bluetooth.cts.ScanResultTest.SCAN_RECORD, resultFromParcel.getScanRecord().getBytes()); }
@org.junit.Test public void opc_return() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(OPC_RETURN).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }

@org.junit.Test public void test002a() throws java.lang.Exception { java.io.File jackOutput; try { jackOutput = runTest002(false, null); junit.framework.Assert.fail(); } catch (com.android.jack.resource.ResourceImportConflictException e) { } }
@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) { for (com.android.sched.vfs.InputVElement sub : dir.list()) { if ((!(sub.isVDir())) && (isJackFileNameOf(sub.getName(), simpleName))) { try { return new com.android.jack.jayce.JayceClassOrInterfaceLoader(inputJackLibrary, loading, simpleName, ((com.android.sched.vfs.InputVFile) (sub)), lookup, defaultLoadLevel).load(); } catch (java.io.IOException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } catch (com.android.jack.JackFileException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } } } throw new com.android.jack.ir.ast.MissingJTypeLookupException(loading, simpleName); }


public boolean hasFileDescriptors() { if (!(mFdsKnown)) { boolean fdFound = false; if ((mParcelledData) != null) { if (mParcelledData.hasFileDescriptors()) { fdFound = true; } } else { for (int i = (mMap.size()) - 1; i >= 0; i--) { java.lang.Object obj = mMap.valueAt(i); if (obj instanceof android.os.Parcelable) { if (((((android.os.Parcelable) (obj)).describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0) { fdFound = true; break; } } else if (obj instanceof android.os.Parcelable[]) { android.os.Parcelable[] array = ((android.os.Parcelable[]) (obj)); for (int n = (array.length) - 1; n >= 0; n--) { if (((array[n].describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0) { fdFound = true; break; } } } else if (obj instanceof android.util.SparseArray) { android.util.SparseArray<? extends android.os.Parcelable> array = ((android.util.SparseArray<? extends android.os.Parcelable>) (obj)); for (int n = (array.size()) - 1; n >= 0; n--) { if (((array.valueAt(n).describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0) { fdFound = true; break; } } } else if (obj instanceof java.util.ArrayList) { java.util.ArrayList array = ((java.util.ArrayList) (obj)); if ((!(array.isEmpty())) && ((array.get(0)) instanceof android.os.Parcelable)) { for (int n = (array.size()) - 1; n >= 0; n--) { android.os.Parcelable p = ((android.os.Parcelable) (array.get(n))); if ((p != null) && (((p.describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0)) { fdFound = true; break; } } } } } } mHasFds = fdFound; mFdsKnown = true; } return mHasFds; }
public void test_setPositivePrefixLjava_lang_String() throws java.lang.Exception { java.text.DecimalFormat format = new java.text.DecimalFormat(); assertEquals("", format.getPositivePrefix()); format.setPositivePrefix("PosPrf"); assertEquals("PosPrf", format.getPositivePrefix()); assertTrue(((format.parse("PosPrf123.45").doubleValue()) == 123.45)); format.setPositivePrefix(""); assertEquals("", format.getPositivePrefix()); format.setPositivePrefix(null); assertNull(format.getPositivePrefix()); }
public void handleShowToast(int lockTaskModeState) { java.lang.String text = null; if (lockTaskModeState == (android.app.ActivityManager.LOCK_TASK_MODE_LOCKED)) { text = mContext.getString(R.string.lock_to_app_toast_locked); } else if (lockTaskModeState == (android.app.ActivityManager.LOCK_TASK_MODE_PINNED)) { text = mContext.getString(R.string.lock_to_app_toast); } if (text == null) { return; } if ((mLastToast) != null) { mLastToast.cancel(); } mLastToast = makeAllUserToastAndShow(text); }
public com.android.se.Channel openLogicalArfChannel(byte[] aid) throws java.io.IOException { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { return null; } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { android.util.Log.e(mTag, ("no channels left to access ARF: " + (e.getMessage()))); throw ((java.util.MissingResourceException) (e)); } else { android.util.Log.e(mTag, ("Error opening logical channel " + (e.getLocalizedMessage()))); } mArfChannel = null; return null; } }
public void stop() { mUpstreamLinkProperties = null; mHwInterface.stopOffloadControl(); mControlInitialized = false; mConfigInitialized = false; }

@org.junit.Test @org.junit.experimental.categories.Category(com.android.jack.test.category.KnownBugs.class) public void test002g() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackOutput = runTest002(true, "keep-first", errOut, false, true); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(jackOutput); checkResourceContent(zipFile, com.android.jack.fileconflict.FileConflictTests.RESOURCE1_LONGPATH, "Res1"); checkResourceContent(zipFile, com.android.jack.fileconflict.FileConflictTests.RESOURCE2_LONGPATH, "Res2"); checkResourceContent(zipFile, com.android.jack.fileconflict.FileConflictTests.RESOURCE3_LONGPATH, "Res3"); java.lang.String errString = errOut.toString(); junit.framework.Assert.assertTrue(errString.contains("Resource in")); junit.framework.Assert.assertTrue(errString.contains("rsc/Resource1")); junit.framework.Assert.assertTrue(errString.contains("has already been imported")); }
@org.junit.Test public void testUnbondDevice_disconnectBeforeUnbond() { mCurrentDevice = getTestDevice(0); org.junit.Assert.assertTrue(mHeadsetService.connect(mCurrentDevice)); verify(mObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectHfp(mCurrentDevice); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectedEvent); try { java.lang.Thread.sleep(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException exception) { org.junit.Assert.fail("Interrupted while waiting for callback to disconnected state"); } doReturn(BluetoothDevice.BOND_NONE).when(mAdapterService).getBondState(eq(mCurrentDevice)); android.content.Intent unbondIntent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_BOND_STATE_CHANGED); unbondIntent.putExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.BOND_NONE); unbondIntent.putExtra(BluetoothDevice.EXTRA_DEVICE, mCurrentDevice); android.support.test.InstrumentationRegistry.getTargetContext().sendBroadcast(unbondIntent); verify(mObjectsFactory, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).destroyStateMachine(mStateMachineArgument.capture()); org.junit.Assert.assertEquals(mCurrentDevice, mStateMachineArgument.getValue().getDevice()); }
private void disconnectProfiles(android.bluetooth.BluetoothDevice device, java.lang.String deviceID) { com.googlecode.android_scripting.Log.d(("Disconnecting device " + device)); mA2dpProfile.a2dpDisconnect(device); mA2dpSinkProfile.a2dpSinkDisconnect(device); mHidProfile.hidDisconnect(device); mHspProfile.hspDisconnect(device); mHfpClientProfile.hfpClientDisconnect(device); mPanProfile.panDisconnect(device); mPbapClientProfile.pbapClientDisconnect(device); }
@java.lang.Override protected boolean start() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, "start()"); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) != null) { throw new java.lang.IllegalStateException("start() called twice"); } mAdapter = java.util.Objects.requireNonNull(android.bluetooth.BluetoothAdapter.getDefaultAdapter(), "BluetoothAdapter cannot be null when HearingAidService starts"); mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapterService(), "AdapterService cannot be null when HearingAidService starts"); mStateMachines.clear(); mStateMachinesThread = new android.os.HandlerThread("HearingAidService.StateMachines"); mStateMachinesThread.start(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.BondStateChangedReceiver(); registerReceiver(mBondStateChangedReceiver, filter); filter = new android.content.IntentFilter(); filter.addAction(BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); mConnectionStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(this); setActiveDevice(null); return true; }
private void processRegisterNotification(int eventId, int param) { switch (eventId) { case com.android.bluetooth.avrcp.Avrcp.EVT_PLAY_STATUS_CHANGED : mPlayStatusChangedNT = com.android.bluetooth.avrcp.Avrcp.NOTIFICATION_TYPE_INTERIM; registerNotificationRspPlayStatusNative(mPlayStatusChangedNT, convertPlayStateToPlayStatus(mCurrentPlayState)); break; case com.android.bluetooth.avrcp.Avrcp.EVT_TRACK_CHANGED : mTrackChangedNT = com.android.bluetooth.avrcp.Avrcp.NOTIFICATION_TYPE_INTERIM; sendTrackChangedRsp(); break; case com.android.bluetooth.avrcp.Avrcp.EVT_PLAY_POS_CHANGED : long songPosition = getPlayPosition(); mPlayPosChangedNT = com.android.bluetooth.avrcp.Avrcp.NOTIFICATION_TYPE_INTERIM; mPlaybackIntervalMs = ((long) (param)) * 1000L; if ((mCurrentPosMs) != (android.media.RemoteControlClient.PLAYBACK_POSITION_ALWAYS_UNKNOWN)) { mNextPosMs = songPosition + (mPlaybackIntervalMs); mPrevPosMs = songPosition - (mPlaybackIntervalMs); if ((mCurrentPlayState) == (android.media.RemoteControlClient.PLAYSTATE_PLAYING)) { android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MESSAGE_PLAY_INTERVAL_TIMEOUT); mHandler.sendMessageDelayed(msg, mPlaybackIntervalMs); } } registerNotificationRspPlayPosNative(mPlayPosChangedNT, ((int) (songPosition))); break; } }

boolean connectAudio(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ("connectAudio, device=" + device)); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: device is null"); return false; } synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("connectAudio: device " + device) + " was never connected/connecting")); return false; } if ((stateMachine.getConnectionState()) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: profile not connected"); return false; } if (isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ("connectAudio: audio is not idle, current audio device is " + (getCurrentAudioDevice()))); return false; } stateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, device); } return true; }

public void start() { if (isStarted()) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, "startClat: already started"); return; } if ((mNetwork.linkProperties) == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, "startClat: Can't start clat with null LinkProperties"); return; } try { mNMService.registerObserver(this); } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ("startClat: Can't register interface observer for clat on " + (mNetwork))); return; } mBaseIface = mNetwork.linkProperties.getInterfaceName(); if ((mBaseIface) == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, "startClat: Can't start clat on null interface"); return; } mIface = (com.android.server.connectivity.Nat464Xlat.CLAT_PREFIX) + (mBaseIface); android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, ("Starting clatd on " + (mBaseIface))); try { mNMService.startClatd(mBaseIface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ("Error starting clatd: " + e)); } }

public native java.lang.Object invoke(java.lang.Object receiver, java.lang.Object... args) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException;

@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(eq(com.android.bluetooth.hfp.HeadsetService.class.getName()), eq(BluetoothAdapter.STATE_OFF)); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService); mStateMachines.clear(); mCurrentDevice = null; }
@javax.annotation.Nonnull private com.android.jack.ir.ast.JDefinedClassOrInterface create(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.library.LibraryFormatException, com.android.jack.library.LibraryIOException { com.android.jack.jayce.DeclaredTypeNode type = getNNode(NodeLevel.TYPES); java.lang.String packageQualifiedName = com.android.jack.util.NamingTools.getPackageNameFromBinaryName(com.android.jack.util.NamingTools.getClassBinaryNameFromDescriptor(type.getSignature())); com.android.jack.ir.ast.JPackage pack = session.getLookup().getOrCreatePackage(packageQualifiedName); com.android.jack.ir.ast.JDefinedClassOrInterface jType = type.create(pack, this); return jType; }

@java.lang.SuppressWarnings("unused") @java.lang.Override public void verifyCertificateChain(long[] certRefs, java.lang.String authMethod) throws java.security.cert.CertificateException { try { if ((certRefs == null) || ((certRefs.length) == 0)) { throw new javax.net.ssl.SSLException("Peer sent no certificate"); } org.conscrypt.OpenSSLX509Certificate[] peerCertChain = new org.conscrypt.OpenSSLX509Certificate[certRefs.length]; for (int i = 0; i < (certRefs.length); i++) { peerCertChain[i] = new org.conscrypt.OpenSSLX509Certificate(certRefs[i]); } boolean client = sslParameters.getUseClientMode(); if (client) { javax.net.ssl.X509TrustManager x509tm = sslParameters.getTrustManager(); if (x509tm instanceof org.conscrypt.TrustManagerImpl) { org.conscrypt.TrustManagerImpl tm = ((org.conscrypt.TrustManagerImpl) (x509tm)); tm.checkServerTrusted(peerCertChain, authMethod, getPeerHostName()); } else { x509tm.checkServerTrusted(peerCertChain, authMethod); } } else { java.lang.String authType = peerCertChain[0].getPublicKey().getAlgorithm(); sslParameters.getTrustManager().checkClientTrusted(peerCertChain, authType); } } catch (java.security.cert.CertificateException e) { throw e; } catch (java.lang.Exception e) { throw new java.security.cert.CertificateException(e); } }
@org.junit.Test public void legacyAppTest002b() throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir("com.android.jack.multidex.test002.jack"); java.io.File out = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); com.android.jack.test.toolchain.JackApiToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class); addCommonOptionsForMultiDex(toolchain, new java.io.File(testFolder, "config-001.jpp")); toolchain.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), "minimal-multidex"); toolchain.addStaticLibs(com.android.jack.multidex.MultiDexTests.library); toolchain.srcToExe(com.android.jack.test.toolchain.AbstractTestTools.getClasspathsAsString(toolchain.getDefaultBootClasspath(), new java.io.File[]{ com.android.jack.multidex.MultiDexTests.annotations, com.android.jack.multidex.MultiDexTests.frameworks }), out, false, testFolder); java.io.File outList = getListingOfDex(new java.io.File(out, "classes.dex")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, "ref-list-002-1.txt"), outList); java.io.File outList2 = getListingOfDex(new java.io.File(out, "classes2.dex")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, "ref-list-002-2.txt"), outList2); junit.framework.Assert.assertFalse(new java.io.File(out, "classes3.dex").exists()); return; }

@java.lang.Override public void onDestroy() { hideTitleBar(); }
public void setupDataCall(int accessNetworkType, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, boolean isHandover, android.net.LinkProperties linkProperties, android.telephony.data.DataServiceCallback callback) { callback.onSetupDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED, null); }


@javax.annotation.Nonnull public java.io.File getJackFolder() { return jackFolder; }
private void computePerMethodStats(@com.android.annotations.NonNull com.android.tools.perflib.vmtrace.Call top, @com.android.annotations.NonNull com.android.tools.perflib.vmtrace.VmTraceData data) { java.util.Iterator<com.android.tools.perflib.vmtrace.Call> it = top.getCallHierarchyIterator(); while (it.hasNext()) { com.android.tools.perflib.vmtrace.Call c = it.next(); com.android.tools.perflib.vmtrace.MethodInfo info = data.getMethod(c.getMethodId()); info.addExclusiveThreadTimes(c.getExclusiveThreadTime()); if (!(c.isRecursive())) { info.addInclusiveThreadTimes(c.getInclusiveThreadTime()); } } }

@java.lang.Override public synchronized void close() throws com.android.jack.library.LibraryIOException { try { for (com.android.sched.vfs.InputVFS currentSectionVFS : sectionVFS.values()) { currentSectionVFS.close(); } vfs.close(); } catch (com.android.sched.util.file.CannotCloseOutputException | com.android.sched.util.file.CannotCloseInputException e) { throw new com.android.jack.library.LibraryIOException(getLocation(), e); } }
@org.junit.Test public void new_array() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(NEW_ARRAY).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }


@java.lang.Override public void executeInBackground(final java.lang.Runnable task) { executor.execute(new java.lang.Runnable() { public void run() { task.run(); } }); }


public void addRegistrationListener(com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { if (listener == null) { throw new java.lang.NullPointerException("listener can't be null"); } synchronized(mHasRegisteredLock) { if (!(mHasRegisteredForProxy)) { try { checkAndThrowExceptionIfServiceUnavailable(); mImsServiceProxy.addRegistrationListener(mRegistrationListenerProxy); com.android.ims.ImsManager.log("RegistrationListenerProxy registered."); mHasRegisteredForProxy = true; } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException("addRegistrationListener()", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } } } synchronized(mRegistrationListeners) { com.android.ims.ImsManager.log(("Local registration listener added: " + listener)); mRegistrationListeners.add(listener); } }



@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) { com.android.sched.util.log.Tracer tracer = com.android.sched.util.log.TracerFactory.getTracer(); com.android.sched.util.log.Event event = tracer.start(JackEventType.DEX_MERGER); com.android.jack.backend.dex.DexWritingTool writingTool = com.android.sched.util.config.ThreadConfig.get(com.android.jack.backend.dex.DexFileWriter.DEX_WRITING_POLICY); try { writingTool.write(outputVDir); } catch (com.android.jack.backend.dex.DexWritingException e) { session.getReporter().report(Severity.FATAL, e); throw new com.android.jack.JackAbortException(e); } finally { event.end(); } }



@org.junit.Test public void legacyAppTest002b_withoutAnnotations() throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestsWithJackFolder("multidex/test002"); java.io.File out = com.android.jack.TestTools.createTempDir("out", ""); com.android.jack.Options app1Options = addCommonOptionsForMultiDex(new java.io.File(testFolder, "config-001.jpp")); app1Options.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), "minimal-multidex"); app1Options.addJayceImport(com.android.jack.multidex.MultiDexTests.library); com.android.jack.TestTools.compileSourceToDex(app1Options, testFolder, (((com.android.jack.TestTools.getDefaultBootclasspathString()) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.frameworks.getPath())), out, false); java.io.File outList = getListingOfDex(new java.io.File(out, "classes.dex")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, "ref-list-002-1.txt"), outList); java.io.File outList2 = getListingOfDex(new java.io.File(out, "classes2.dex")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, "ref-list-002-2.txt"), outList2); junit.framework.Assert.assertFalse(new java.io.File(out, "classes3.dex").exists()); return; }

public static final java.text.DateFormat getTimeInstance(int style, java.util.Locale locale) { java.text.DateFormat.checkTimeStyle(style); return new java.text.SimpleDateFormat(libcore.icu.LocaleData.get(locale).getTimeFormat(style), locale); }

public void test_SSL_do_handshake_server_timeout() throws java.lang.Exception { final java.net.ServerSocket listener = new java.net.ServerSocket(0); try { org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.Hooks cHooks = new org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.Hooks(); org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.Hooks sHooks = new org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.ServerHooks(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.getServerPrivateKey(), org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.getServerCertificates()); java.util.concurrent.Future<org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.TestSSLHandshakeCallbacks> client = org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.handshake(listener, (-1), true, cHooks, null); java.util.concurrent.Future<org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.TestSSLHandshakeCallbacks> server = org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.handshake(listener, 1, false, sHooks, null); server.get(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.TIMEOUT_SECONDS, java.util.concurrent.TimeUnit.SECONDS); fail(); } catch (java.util.concurrent.ExecutionException expected) { assertEquals(java.net.SocketTimeoutException.class, expected.getCause().getClass()); } }
private void updateNewCallbackWithState(android.telephony.ims.internal.aidl.IImsRegistrationCallback c) throws android.os.RemoteException { int state; com.android.ims.ImsReasonInfo disconnectInfo; synchronized(mLock) { state = mRegistrationState; disconnectInfo = mLastDisconnectCause; } switch (state) { case android.telephony.ims.internal.stub.ImsRegistrationImplBase.REGISTRATION_STATE_NOT_REGISTERED : { c.onDeregistered(disconnectInfo); break; } case android.telephony.ims.internal.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERING : { c.onRegistering(getConnectionType()); break; } case android.telephony.ims.internal.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERED : { c.onRegistered(getConnectionType()); break; } } }




@java.lang.Override protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor monitor) { com.android.sdkstats.SdkStatsService stats = new com.android.sdkstats.SdkStatsService(); java.lang.String toolsPath = new org.eclipse.core.runtime.Path(com.android.ide.eclipse.monitor.MonitorPlugin.getDefault().getSdkPath()).append("tools").toString(); com.android.ide.eclipse.monitor.MonitorStartup.ping(stats, toolsPath); return org.eclipse.core.runtime.Status.OK_STATUS; }
public static void wtf(java.lang.String prefix, java.lang.Throwable tr, java.lang.String format, java.lang.Object... args) { android.util.Log.wtf(android.telecom.Log.TAG, android.telecom.Log.buildMessage(prefix, format, args), tr); }
public void testReadWrite_Block_WriterNotBind() throws java.lang.Exception { byte[] sourceArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; byte[] targetArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; for (int i = 0; i < (sourceArray.length); i++) { sourceArray[i] = ((byte) (i)); } this.channel1.connect(localAddr1); this.channel2.socket().bind(localAddr1); this.channel2.connect(localAddr2); java.nio.ByteBuffer sourceBuf = java.nio.ByteBuffer.wrap(sourceArray); assertEquals(org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL, this.channel1.write(sourceBuf)); java.nio.ByteBuffer targetBuf = java.nio.ByteBuffer.wrap(targetArray); closeBlockedReaderChannel2(targetBuf); }




@java.lang.Override public libcore.io.StructStatVfs fstatvfs(java.io.FileDescriptor fd) throws libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onReadFromDisk(); return os.fstatvfs(fd); }
@java.lang.Override public java.io.FileDescriptor accept(java.io.FileDescriptor fd, java.net.InetSocketAddress peerAddress) throws java.net.SocketException, libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); return tagSocket(os.accept(fd, peerAddress)); }

@org.junit.Test public void testV1SignedAttrs() throws java.lang.Exception { com.android.apksig.ApkVerifierTest.assertVerified(verify("v1-only-with-signed-attrs.apk")); }




@java.lang.Override @javax.annotation.Nonnull public java.lang.String getTranslatorVersion() { return com.android.jill.Jill.getVersion().getVersion(); }
com.android.internal.telephony.DataState getDataConnectionState(java.lang.String apnType);
@java.lang.Override public boolean doAction(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) { com.android.jack.shrob.obfuscation.NewMethodSignatureMarker marker = type.getMarker(com.android.jack.shrob.obfuscation.NewMethodSignatureMarker.class); if ((marker != null) && (marker.getNewNames().contains(methodKey))) { hasFoundMethodId = true; return false; } for (com.android.jack.ir.ast.JMethod sameEnclosingTypeMethod : type.getMethods()) { com.android.jack.ir.ast.JMethodIdWide id = sameEnclosingTypeMethod.getMethodId().getMethodIdWide(); if ((id.canBeVirtual()) && (!(com.android.jack.shrob.obfuscation.Renamer.mustBeRenamed(id)))) { if (com.android.jack.shrob.obfuscation.Renamer.getKey(id).equals(methodKey)) { hasFoundMethodId = true; return false; } } } return true; }
private com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData.LayoutBridge loadLayoutBridge() { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData.LayoutBridge layoutBridge = new com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData.LayoutBridge(); try { java.io.File f = new java.io.File(mAndroidTarget.getPath(IAndroidTarget.LAYOUT_LIB)); if ((f.isFile()) == false) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, "layoutlib.jar is missing!"); } else { java.net.URI uri = f.toURI(); java.net.URL url = uri.toURL(); layoutBridge.classLoader = new java.net.URLClassLoader(new java.net.URL[]{ url }, this.getClass().getClassLoader()); java.lang.Class<?> clazz = layoutBridge.classLoader.loadClass(AndroidConstants.CLASS_BRIDGE); if (clazz != null) { java.lang.reflect.Constructor<?> constructor = clazz.getConstructor(); if (constructor != null) { java.lang.Object bridge = constructor.newInstance(); if (bridge instanceof com.android.layoutlib.api.ILayoutBridge) { layoutBridge.bridge = ((com.android.layoutlib.api.ILayoutBridge) (bridge)); } } } if ((layoutBridge.bridge) == null) { layoutBridge.status = LoadStatus.FAILED; com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, ("Failed to load " + (com.android.ide.eclipse.adt.AndroidConstants.CLASS_BRIDGE))); } else { try { layoutBridge.apiLevel = layoutBridge.bridge.getApiLevel(); } catch (java.lang.AbstractMethodError e) { layoutBridge.apiLevel = 1; } layoutBridge.status = LoadStatus.LOADED; } } } catch (java.lang.Throwable t) { layoutBridge.status = LoadStatus.FAILED; com.android.ide.eclipse.adt.AdtPlugin.log(t, "Failed to load the LayoutLib"); } return layoutBridge; }

public void testAesCbcHmacSha256Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
@java.lang.Override public void srcToLib(@javax.annotation.Nonnull java.io.File out, boolean zipFiles, @javax.annotation.Nonnull java.io.File... sources) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); srcToCommon(args, sources); if (zipFiles) { args.add("--output-jack"); } else { args.add("--output-jack-dir"); } args.add(out.getAbsolutePath()); com.android.jack.test.toolchain.AbstractTestTools.addFile(args, false, sources); com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(errRedirectStream); exec.setOut(outRedirectStream); exec.setVerbose(isVerbose); try { if ((exec.run()) != 0) { throw new java.lang.RuntimeException("Jack compiler exited with an error"); } } catch (com.android.jack.test.util.ExecFileException e) { throw new java.lang.RuntimeException("An error occurred while running Jack", e); } }
public boolean addLinkAddress(android.net.LinkAddress address) { if ((address != null) && (!(mLinkAddresses.contains(address)))) { mLinkAddresses.add(address); return true; } return false; }


public static void processJar(java.io.File file, java.util.Collection<java.io.FileInputStream> resourcesJars) throws java.io.FileNotFoundException { if (file.isDirectory()) { java.lang.String[] filenames = file.list(new java.io.FilenameFilter() { public boolean accept(java.io.File dir, java.lang.String name) { return com.android.apkbuilder.internal.ApkBuilderImpl.PATTERN_JAR_EXT.matcher(name).matches(); } }); for (java.lang.String filename : filenames) { java.io.File f = new java.io.File(file, filename); com.android.apkbuilder.internal.ApkBuilderImpl.processJarFile(f, resourcesJars); } } else { com.android.apkbuilder.internal.ApkBuilderImpl.processJarFile(file, resourcesJars); } }



@org.junit.Test public void testJackDirToJackArchive() throws java.lang.Exception { java.io.File jackFolder = com.android.jack.TestTools.createTempDir("tempjack", "dir"); com.android.jack.Options options = new com.android.jack.Options(); options.addResource(new java.io.File(com.android.jack.resource.ResourceTests.FILE, "rsc")); com.android.jack.TestTools.compileSourceToJack(options, com.android.jack.resource.ResourceTests.FILE, com.android.jack.TestTools.getDefaultBootclasspathString(), jackFolder, false); java.io.File shrobbedJackAr = com.android.jack.TestTools.createTempFile("shrobbedJackAr", ".zip"); com.android.jack.ProguardFlags flags = new com.android.jack.ProguardFlags(new java.io.File(com.android.jack.resource.ResourceTests.FILE, "proguard.flags")); com.android.jack.TestTools.shrobJackToJack(new com.android.jack.Options(), jackFolder, null, shrobbedJackAr, java.util.Collections.singletonList(flags), true); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(shrobbedJackAr); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.RESOURCE1_SHORTPATH, "Res1", true); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.RESOURCE2_SHORTPATH, "Res2", true); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.RESOURCE3_SHORTPATH, "Res3", true); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.RESOURCE4_SHORTPATH, "Res4", true); }

private void submitCurrentKeyValue() { if (((mCurrentKey) != null) && ((mCurrentValue) != null)) { java.lang.String statusValue = mCurrentValue.toString(); if (mInInstrumentationResultKey) { if (!(com.android.ddmlib.testrunner.InstrumentationResultParser.KNOWN_KEYS.contains(mCurrentKey))) { mInstrumentationResultBundle.put(mCurrentKey, statusValue); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.SHORTMSG)) { handleTestRunFailed(statusValue); } } else { com.android.ddmlib.testrunner.InstrumentationResultParser.TestResult testInfo = getCurrentTestInfo(); if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.CLASS)) { testInfo.mTestClass = statusValue.trim(); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.TEST)) { testInfo.mTestName = statusValue.trim(); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.NUMTESTS)) { try { testInfo.mNumTests = java.lang.Integer.parseInt(statusValue); } catch (java.lang.NumberFormatException e) { com.android.ddmlib.Log.e(com.android.ddmlib.testrunner.InstrumentationResultParser.LOG_TAG, ("Unexpected integer number of tests, received " + statusValue)); } } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.ERROR)) { handleTestRunFailed(statusValue); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.STACK)) { testInfo.mStackTrace = statusValue; } else if (!(com.android.ddmlib.testrunner.InstrumentationResultParser.KNOWN_KEYS.contains(mCurrentKey))) { mTestMetrics.put(mCurrentKey, statusValue); } } mCurrentKey = null; mCurrentValue = null; } }


@java.lang.Override public android.net.NetworkMisc createFromParcel(android.os.Parcel in) { android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (in.readInt()) != 0; networkMisc.explicitlySelected = (in.readInt()) != 0; networkMisc.acceptUnvalidated = (in.readInt()) != 0; networkMisc.subscriberId = in.readString(); networkMisc.provisioningNotificationDisabled = (in.readInt()) != 0; return networkMisc; }




private boolean createBond(android.bluetooth.BluetoothDevice dev, int transport, boolean transition) { if ((dev.getBondState()) == (android.bluetooth.BluetoothDevice.BOND_NONE)) { infoLog(("Bond address is:" + dev)); byte[] addr = com.android.bluetooth.Utils.getBytesFromAddress(dev.getAddress()); if (!(mAdapterService.createBondNative(addr, transport))) { sendIntent(dev, BluetoothDevice.BOND_NONE, BluetoothDevice.UNBOND_REASON_REMOVED); return false; } else if (transition) { transitionTo(mPendingCommandState); } return true; } return false; }

public boolean setPin(android.bluetooth.BluetoothDevice device, boolean accept, int len, byte[] pinCode) { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, "setPin() - Not allowed for non-active user"); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.setPin(device, accept, len, pinCode); }
@com.android.internal.annotations.GuardedBy("this") private void setVpnForcedLocked(boolean enforce) { final java.util.Set<android.net.UidRange> removedRanges = new android.util.ArraySet(mBlockedUsers); if (enforce) { final java.util.Set<android.net.UidRange> addedRanges = createUserAndRestrictedProfilesRanges(mUserHandle, null, java.util.Collections.singletonList(mPackage)); removedRanges.removeAll(addedRanges); addedRanges.removeAll(mBlockedUsers); setAllowOnlyVpnForUids(false, removedRanges); setAllowOnlyVpnForUids(true, addedRanges); } else { setAllowOnlyVpnForUids(false, removedRanges); } }
public int read(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws java.io.InterruptedIOException, libcore.io.ErrnoException;

public synchronized void appendMessage(final com.android.ddmuilib.logcat.LogCatMessage m) { if ((mQ.remainingCapacity()) == 0) { mQ.poll(); } mQ.offer(m); }
@java.lang.Override public com.android.ddmlib.RawImage getScreenshot(long timeout, java.util.concurrent.TimeUnit unit) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException { return com.android.ddmlib.AdbHelper.getFrameBuffer(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), this, timeout, unit); }
private void initModuleDescriptionText() { final com.android.tools.idea.templates.TemplateMetadata metadata = myState.get(NewCloudModuleDynamicWizardPath.KEY_TEMPLATE_METADATA); assert metadata != null; final com.android.tools.idea.templates.Parameter docUrlParam = metadata.getParameter(CloudModuleUtils.ATTR_DOC_URL); assert docUrlParam != null; myModuleDescriptionText.setContentType(UIUtil.HTML_MIME); myModuleDescriptionText.putClientProperty(javax.swing.JEditorPane.HONOR_DISPLAY_PROPERTIES, true); myModuleDescriptionText.setFont(javax.swing.UIManager.getFont("Label.font")); myModuleDescriptionText.addHyperlinkListener(new javax.swing.event.HyperlinkListener() { @java.lang.Override public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent e) { if ((e.getEventType()) == (javax.swing.event.HyperlinkEvent.EventType.ACTIVATED)) { com.intellij.ide.BrowserUtil.browse(e.getURL().toString()); } } }); myModuleDescriptionText.setText(java.lang.String.format(("<html><body>Check the <a href=\'%s\'>\"%s\"</a> documentation for more " + (("information about the contents of this backend module, and for " + "detailed instructions about connecting your Android app to this ") + "backend.</body></html>")), docUrlParam.initial, metadata.getTitle())); }



protected void onRadioOffOrNotAvailable() { imsi = null; msisdn = null; voiceMailNum = null; countVoiceMessages = 0; mncLength = UNINITIALIZED; iccid = null; spnDisplayCondition = -1; efMWIS = null; efCPHS_MWI = null; spdiNetworks = null; pnnHomeName = null; adnCache.reset(); log("SIMRecords: onRadioOffOrNotAvailable set 'gsm.sim.operator.numeric' to operator=null"); android.os.SystemProperties.set(com.android.internal.telephony.TelephonyProperties.PROPERTY_ICC_OPERATOR_NUMERIC, null); android.os.SystemProperties.set(com.android.internal.telephony.TelephonyProperties.PROPERTY_ICC_OPERATOR_ALPHA, null); android.os.SystemProperties.set(com.android.internal.telephony.TelephonyProperties.PROPERTY_ICC_OPERATOR_ISO_COUNTRY, null); recordsRequested = false; }



@java.lang.Override public int hashCode() { int result = super.hashCode(); result = (31 * result) + (mName.hashCode()); result = (31 * result) + (mDebuggable ? 1 : 0); result = (31 * result) + (mDebugJniBuild ? 1 : 0); result = (31 * result) + ((mPackageNameSuffix) != null ? mPackageNameSuffix.hashCode() : 0); result = (31 * result) + ((mVersionNameSuffix) != null ? mVersionNameSuffix.hashCode() : 0); result = (31 * result) + (mRunProguard ? 1 : 0); result = (31 * result) + (mZipAlign ? 1 : 0); result = (31 * result) + ((mSigningConfig) != null ? mSigningConfig.hashCode() : 0); return result; }
public boolean connect(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log((("connect(" + device) + ")")); if ((((mService) != null) && (isEnabled())) && (isValidDevice(device))) { try { return mService.connect(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return false; } } if ((mService) == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return false; }
@java.lang.Override public void run() { while (isRunning()) { boolean waitSuccessful = waitForObject(); if (waitSuccessful == false) { continue; } boolean finalized = waitForFinalization(); if ((!finalized) && (!(dalvik.system.VMRuntime.getRuntime().isDebuggerActive()))) { java.lang.Object finalizedObject = java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingObject; if (finalizedObject != null) { java.lang.Daemons.FinalizerWatchdogDaemon.finalizerTimedOut(finalizedObject); break; } } } }
@javax.annotation.Nonnull public static com.android.jill.Version getVersion() { if ((com.android.jill.Jill.version) == null) { java.io.InputStream is = com.android.jill.Jill.class.getClassLoader().getResourceAsStream(com.android.jill.Jill.PROPERTIES_FILE); if (is != null) { com.android.jill.Jill.version = new com.android.jill.Version(is); } else { java.lang.System.err.println(("Failed to open Jack properties file " + (com.android.jill.Jill.PROPERTIES_FILE))); throw new java.lang.AssertionError(); } } assert (com.android.jill.Jill.version) != null; return com.android.jill.Jill.version; }



public void test_format_minus_zero() throws java.lang.Exception { final java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(java.util.Locale.US); java.text.DecimalFormat df = new java.text.DecimalFormat("00.0#E0", dfs); compare("00.0#E0: -0.0", df.format((-0.0)), "-00.0E0"); df = new java.text.DecimalFormat("##0.0E0", dfs); compare("##0.0E0: -0.0", df.format((-0.0)), "-0.0E0"); df = new java.text.DecimalFormat("#.0E0", dfs); compare("#.0E0: -0.0", df.format((-0.0)), "-.0E0"); df = new java.text.DecimalFormat("0.#E0", dfs); compare("0.#E0: -0.0", df.format((-0.0)), "-0E0"); df = new java.text.DecimalFormat(".0E0", dfs); compare(".0E0: -0.0", df.format((-0.0)), "-.0E0"); }
public boolean isVideoTelephonyAvailable() { try { return getITelephony().isVideoTelephonyAvailable(); } catch (android.os.RemoteException ex) { return false; } catch (java.lang.NullPointerException ex) { return false; } }

@java.lang.Override public org.eclipse.swt.graphics.Image getImage(java.lang.Object element) { com.android.sdkuilib.internal.repository.icons.ImageFactory imgFactory = mUpdaterData.getImageFactory(); if (imgFactory != null) { if ((mColumn) == (mColumnName)) { if (element instanceof com.android.sdkuilib.internal.repository.core.PkgCategory) { return imgFactory.getImageForObject(((com.android.sdkuilib.internal.repository.core.PkgCategory) (element)).getIconRef()); } else if (element instanceof com.android.sdkuilib.internal.repository.core.PkgItem) { return imgFactory.getImageForObject(((com.android.sdkuilib.internal.repository.core.PkgItem) (element)).getMainPackage()); } return imgFactory.getImageForObject(element); } else if (((mColumn) == (mColumnStatus)) && (element instanceof com.android.sdkuilib.internal.repository.core.PkgItem)) { com.android.sdkuilib.internal.repository.core.PkgItem pi = ((com.android.sdkuilib.internal.repository.core.PkgItem) (element)); switch (pi.getState()) { case INSTALLED : if (pi.hasUpdatePkg()) { return imgFactory.getImageByName(com.android.sdkuilib.internal.repository.ui.PackagesPage.ICON_PKG_UPDATE); } else { return imgFactory.getImageByName(com.android.sdkuilib.internal.repository.ui.PackagesPage.ICON_PKG_INSTALLED); } case NEW : java.lang.Package p = pi.getMainPackage(); if ((p != null) && (p.hasCompatibleArchive())) { return imgFactory.getImageByName(com.android.sdkuilib.internal.repository.ui.PackagesPage.ICON_PKG_NEW); } else { return imgFactory.getImageByName(com.android.sdkuilib.internal.repository.ui.PackagesPage.ICON_PKG_INCOMPAT); } } } } return super.getImage(element); }

public static void main(java.lang.String[] args) { Main.assertEquals(10, Main.div()); Main.assertEquals(100, Main.innerDiv()); Main.assertEquals(12, Main.arrayLength(new int[]{ 4, 8 })); }
private static org.eclipse.core.resources.IResource findNonValueFile(org.eclipse.core.resources.IProject project, com.android.ide.eclipse.adt.internal.resources.ResourceType type, java.lang.String name) { com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources resources = com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.getResources(project, false); if (resources == null) { return null; } com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration configuration = com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.getConfiguration(); if (configuration != null) { org.eclipse.core.resources.IResource file = com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.findFileByConfig(type, name, resources, configuration); if (file != null) { return file; } } return com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.findFileByConfig(type, name, resources, null); }
@com.android.internal.annotations.VisibleForTesting public static android.telephony.data.DataProfile createDataProfile(com.android.internal.telephony.dataconnection.ApnSetting apn, int profileId) { int profileType; if ((apn.bearerBitmask) == 0) { profileType = android.telephony.data.DataProfile.TYPE_COMMON; } else if (android.telephony.ServiceState.bearerBitmapHasCdma(apn.bearerBitmask)) { profileType = android.telephony.data.DataProfile.TYPE_3GPP2; } else { profileType = android.telephony.data.DataProfile.TYPE_3GPP; } return new android.telephony.data.DataProfile(profileId, apn.apn, apn.protocol, apn.authType, apn.user, apn.password, profileType, apn.maxConnsTime, apn.maxConns, apn.waitTime, apn.carrierEnabled, apn.typesBitmap, apn.roamingProtocol, apn.bearerBitmask, apn.mtu, apn.mvnoType, apn.mvnoMatchData, apn.modemCognitive); }
public void testHardcodedAliases() throws java.lang.Exception { final java.io.ByteArrayOutputStream errBuffer = new java.io.ByteArrayOutputStream(); java.io.PrintStream out = new java.io.PrintStream(errBuffer); for (int i = 0; i < (HARDCODED_ALIASES.length); i++) { try { assertEquals(HARDCODED_ALIASES[i][1], org.apache.harmony.security.utils.AlgNameMapper.map2AlgName(HARDCODED_ALIASES[i][0])); assertEquals(HARDCODED_ALIASES[i][0], org.apache.harmony.security.utils.AlgNameMapper.map2OID(HARDCODED_ALIASES[i][1])); assertEquals(HARDCODED_ALIASES[i][1], org.apache.harmony.security.utils.AlgNameMapper.getStandardName(HARDCODED_ALIASES[i][1].toUpperCase(java.util.Locale.US))); assertTrue(org.apache.harmony.security.utils.AlgNameMapper.isOID(HARDCODED_ALIASES[i][0])); } catch (java.lang.Throwable e) { out.append((("Error encountered checking " + (HARDCODED_ALIASES[i][1])) + "\n")); e.printStackTrace(out); } } out.flush(); if ((errBuffer.size()) > 0) { throw new java.lang.Exception((("Errors encountered:\n\n" + (errBuffer.toString())) + "\n\n")); } }


@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(eq(com.android.bluetooth.hfp.HeadsetService.class.getName()), eq(BluetoothAdapter.STATE_OFF)); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService); mStateMachines.clear(); mCurrentDevice = null; }
public android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int keyType) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) { throw new java.lang.RuntimeException("IMSI error: Subscriber Info is null"); } int subId = getSubId(android.telephony.SubscriptionManager.getDefaultDataSubscriptionId()); if ((keyType != (android.telephony.TelephonyManager.KEY_TYPE_EPDG)) && (keyType != (android.telephony.TelephonyManager.KEY_TYPE_WLAN))) { throw new java.lang.IllegalArgumentException("IMSI error: Invalid key type"); } android.telephony.ImsiEncryptionInfo imsiEncryptionInfo = info.getCarrierInfoForImsiEncryption(subId, keyType, mContext.getOpPackageName()); if ((imsiEncryptionInfo == null) && (isImsiEncryptionRequired(subId, keyType))) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, "IMSI error: key is required but not found"); throw new java.lang.RuntimeException("IMSI error: key is required but not found"); } return imsiEncryptionInfo; } catch (android.os.RemoteException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ("getCarrierInfoForImsiEncryption RemoteException" + ex)); throw new java.lang.RuntimeException("IMSI error: Remote Exception"); } catch (java.lang.NullPointerException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ("getCarrierInfoForImsiEncryption NullPointerException" + ex)); throw new java.lang.RuntimeException("IMSI error: Null Pointer exception"); } }
private static void sanityCheck(android.database.sqlite.SQLiteDatabase db, int fromVersion) { android.database.Cursor c1 = db.query("audio_meta", new java.lang.String[]{ "count(*)" }, null, null, null, null, null); android.database.Cursor c2 = db.query("audio_meta", new java.lang.String[]{ "count(distinct _data)" }, null, null, null, null, null); c1.moveToFirst(); c2.moveToFirst(); int num1 = c1.getInt(0); int num2 = c2.getInt(0); c1.close(); c2.close(); if (num1 != num2) { android.util.Log.e(com.android.providers.media.MediaProvider.TAG, (((((("audio_meta._data column is not unique while upgrading" + " from schema ") + fromVersion) + " : ") + num1) + "/") + num2)); db.execSQL("DELETE FROM audio_meta;"); } }

@java.lang.Override public void visitBlock(com.android.jack.dx.ssa.SsaBasicBlock b, com.android.jack.dx.ssa.SsaBasicBlock parent) { java.util.ArrayList<com.android.jack.dx.ssa.SsaInsn> insns = b.getInsns(); if (((insns.size()) == 1) && ((insns.get(0).getOpcode()) == (com.android.jack.dx.rop.code.Rops.GOTO))) { java.util.BitSet preds = ((java.util.BitSet) (b.getPredecessors().clone())); for (int i = preds.nextSetBit(0); i >= 0; i = preds.nextSetBit((i + 1))) { com.android.jack.dx.ssa.SsaBasicBlock pb = blocks.get(i); pb.replaceSuccessor(b.getIndex(), b.getPrimarySuccessorIndex()); } } }
public void getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }





private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dpSink.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); mContext.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); log(((((("Connection state " + device) + ": ") + prevState) + "->") + state)); }
@com.android.annotations.Nullable public static com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutWindowCoordinator get() { return com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutWindowCoordinator.sSingleton; }
@org.junit.Test public void compileWithAnnotationProcessorNoAuto_processorPath() throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorPath(processors.getPath()); jack.setAnnotationProcessorClasses(java.util.Collections.singletonList(com.android.jack.annotation.processor.sample.processors.ResourceAnnotationProcessor.class.getName())); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(jackOut); libOut.getFile(FileType.RSC, new com.android.sched.vfs.VPath("rscGeneratedFile0", '/')); try { libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath("Annotated2Duplicated", '/')); junit.framework.Assert.fail(); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { } }

public void destroy() { validate(); nContextFinish(); if ((mIncCon) != 0) { nIncContextFinish(); nIncContextDestroy(); mIncCon = 0; } nContextDeinitToClient(mContext); mMessageThread.mRun = false; try { mMessageThread.join(); } catch (java.lang.InterruptedException e) { } nContextDestroy(); nDeviceDestroy(mDev); if ((mIncDev) != 0) { nIncDeviceDestroy(mIncDev); mIncDev = 0; } mDev = 0; }

public void fchown(java.io.FileDescriptor fd, int uid, int gid) throws android.system.ErrnoException;
private void TestHalf4(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_fp16 s, int nDims) { initializeGlobals(RS, s, com.android.rs.test.Element.F16_4(RS), nDims); s.forEach_set_kernel_half4(alloc); s.invoke_verify_half4(); initializeGlobals(RS, s, com.android.rs.test.Element.F16_4(RS), nDims); s.invoke_set_half4(); s.forEach_verify_kernel_half4(alloc); }

@java.lang.Override public boolean notifyInstantiation(@javax.annotation.Nonnull java.lang.Object object, @javax.annotation.Nonnegative long size, int count, @javax.annotation.Nonnull com.android.sched.util.log.EventType notUsed) { try { com.android.sched.util.log.TracerFactory.getTracer().getStatistic(com.android.sched.util.log.tracer.watcher.TotalAllocationWatcher.ALLOCATIONS).recordAllocation(size); } catch (java.lang.RuntimeException e) { } return false; }

private boolean runCorrectnessPatterns(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_reduce s) { boolean pass = true; pass &= patternDuplicateAnonymousResult(RS, s); pass &= patternFindMinAndMaxInf(RS, s); pass &= patternInterleavedReduce(RS, s); pass &= patternRedundantGet(RS, s); return pass; }
public static void arraycopy(int[] src, int srcPos, int[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + " dst.length=") + (dst.length)) + " dstPos=") + dstPos) + " length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_INT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyIntUnchecked(src, srcPos, dst, dstPos, length); } }
@java.lang.Override public void onClick(android.view.View v) { if (v == (mButton)) { if ((mFolderSelector.getVisibility()) == (android.view.View.VISIBLE)) { if (mIsFolderNamerShowing) { completeOrCancelFolderNaming(false); } else { mSaveToHomeScreen = false; switchToDefaultView(true); } } else if (save()) { finish(); } } else if (v == (mCancelButton)) { if (mIsFolderNamerShowing) { completeOrCancelFolderNaming(true); } else if ((mFolderSelector.getVisibility()) == (android.view.View.VISIBLE)) { switchToDefaultView(false); } else { finish(); } } else if (v == (mFolderCancel)) { completeOrCancelFolderNaming(true); } else if (v == (mAddNewFolder)) { setShowFolderNamer(true); mFolderNamer.setText(R.string.new_folder); mFolderNamer.requestFocus(); mAddNewFolder.setVisibility(View.GONE); mAddSeparator.setVisibility(View.GONE); android.view.inputmethod.InputMethodManager imm = getInputMethodManager(); imm.focusIn(mListView); imm.showSoftInput(mFolderNamer, InputMethodManager.SHOW_IMPLICIT); } else if (v == (mRemoveLink)) { if (!(mEditingExisting)) { throw new java.lang.AssertionError(("Remove button should not be shown for" + " new bookmarks")); } long id = mMap.getLong(BrowserContract.Bookmarks._ID); createHandler(); android.os.Message msg = android.os.Message.obtain(mHandler, com.android.browser.AddBookmarkPage.BOOKMARK_DELETED); com.android.browser.BookmarkUtils.displayRemoveBookmarkDialog(id, mTitle.getText().toString(), this, msg); } }

@javax.annotation.Nonnull static com.android.jack.shrob.spec.NameSpecification name(java.lang.String name) { assert name != null; java.lang.String transformedName = ("^" + (com.android.jack.shrob.proguard.GrammarActions.convertNameToPattern(name))) + "$"; java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(transformedName); return new com.android.jack.shrob.spec.NameSpecification(pattern); }
public void test_getGroupingSize() { java.text.DecimalFormat df = new java.text.DecimalFormat("###0.##"); assertEquals("Wrong unset size", 0, df.getGroupingSize()); df = new java.text.DecimalFormat("#,##0.##"); assertEquals("Wrong set size", 3, df.getGroupingSize()); df = new java.text.DecimalFormat("#,###,###0.##"); assertEquals("Wrong multiple set size", 4, df.getGroupingSize()); }
private void getImsService() throws com.android.ims.ImsException { if (com.android.internal.telephony.imsphone.ImsPhoneCallTracker.DBG) log("getImsService"); mImsManager = com.android.ims.ImsManager.getInstance(mPhone.getContext(), mPhone.getPhoneId()); mImsManager.addNotifyStatusChangedCallback(mNotifyFeatureRemovedCallback); if ((mImsManager.getImsServiceStatus()) != (android.telephony.ims.feature.ImsFeature.STATE_READY)) { throw new com.android.ims.ImsException("getImsServiceStatus()", com.android.ims.ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } mImsServiceRetryCount = 0; mServiceId = mImsManager.open(ImsServiceClass.MMTEL, createIncomingCallPendingIntent(), mImsConnectionStateListener); mImsManager.setImsConfigListener(mImsConfigListener); getEcbmInterface().setEcbmStateListener(mPhone.getImsEcbmStateListener()); if (mPhone.isInEcm()) { mPhone.exitEmergencyCallbackMode(); } int mPreferredTtyMode = Settings.Secure.getInt(mPhone.getContext().getContentResolver(), Settings.Secure.PREFERRED_TTY_MODE, Phone.TTY_MODE_OFF); mImsManager.setUiTTYMode(mPhone.getContext(), mPreferredTtyMode, null); com.android.ims.ImsMultiEndpoint multiEndpoint = getMultiEndpointInterface(); if (multiEndpoint != null) { multiEndpoint.setExternalCallStateListener(mPhone.getExternalCallTracker().getExternalCallStateListener()); } }
public static java.lang.String retrieveFieldValueName(java.lang.String id, int field, int value, int style, java.util.Locale locale) { return null; }

protected void showError(int error) { new android.app.AlertDialog.Builder(this).setTitle(R.string.proxy_error).setMessage(error).setPositiveButton(R.string.proxy_error_dismiss, null).show(); }
public java.io.FileDescriptor[] pipe() throws libcore.io.ErrnoException;

public void destroy() { clearTextEntry(false); if ((mListBoxDialog) != null) { mListBoxDialog.dismiss(); mListBoxDialog = null; } if ((mWebViewCore) != null) { mCallbackProxy.setWebViewClient(null); mCallbackProxy.setWebChromeClient(null); synchronized(this) { android.webkit.WebViewCore webViewCore = mWebViewCore; mWebViewCore = null; webViewCore.destroy(); } mPrivateHandler.removeCallbacksAndMessages(null); mCallbackProxy.removeCallbacksAndMessages(null); synchronized(mCallbackProxy) { mCallbackProxy.notify(); } } if ((mNativeClass) != 0) { nativeDestroy(); mNativeClass = 0; } }
@java.lang.Deprecated public synchronized void setPluginsEnabled(boolean flag) { setPluginState(android.webkit.WebSettings.PluginState.ON); }
public void snapshotJackFilesModificationDate() { java.util.List<java.io.File> jackFiles = new java.util.ArrayList<java.io.File>(); fillJackFiles(jackFolder, jackFiles); for (java.io.File jackFile : jackFiles) { fileModificationDate.put(jackFile.getAbsolutePath(), java.lang.Long.valueOf(jackFile.lastModified())); } }
public void writeBlobTo(@com.android.annotations.NonNull java.io.File blobRootFolder, @com.android.annotations.NonNull com.android.ide.common.res2.MergeConsumer<I> consumer) throws com.android.ide.common.res2.MergingException { javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance(); factory.setNamespaceAware(true); factory.setValidating(false); factory.setIgnoringComments(true); javax.xml.parsers.DocumentBuilder builder; try { builder = factory.newDocumentBuilder(); org.w3c.dom.Document document = builder.newDocument(); org.w3c.dom.Node rootNode = document.createElement(com.android.ide.common.res2.DataMerger.NODE_MERGER); document.appendChild(rootNode); for (S dataSet : mDataSets) { org.w3c.dom.Node dataSetNode = document.createElement(com.android.ide.common.res2.DataMerger.NODE_DATA_SET); rootNode.appendChild(dataSetNode); dataSet.appendToXml(dataSetNode, document, consumer); } java.lang.String content = com.android.ide.common.xml.XmlPrettyPrinter.prettyPrint(document, true); try { createDir(blobRootFolder); } catch (java.io.IOException ioe) { throw new com.android.ide.common.res2.MergingException(ioe).setFile(blobRootFolder); } java.io.File file = new java.io.File(blobRootFolder, com.android.ide.common.res2.DataMerger.FN_MERGER_XML); try { com.google.common.io.Files.write(content, file, Charsets.UTF_8); } catch (java.io.IOException ioe) { throw new com.android.ide.common.res2.MergingException(ioe).setFile(file); } } catch (javax.xml.parsers.ParserConfigurationException e) { throw new com.android.ide.common.res2.MergingException(e); } }

@javax.annotation.Nonnull public <T extends com.android.jack.ir.ast.JStatement> T cloneStatement(@javax.annotation.Nonnull T stmt) { clonedLabeledStmts = new java.util.HashMap<com.android.jack.ir.ast.JLabeledStatement, com.android.jack.ir.ast.JLabeledStatement>(); clonedLocals = new java.util.HashMap<com.android.jack.ir.ast.JLocal, com.android.jack.ir.ast.JLocal>(); clonedGotos = new java.util.ArrayList<com.android.jack.ir.ast.JGoto>(); clonedStmts = new java.util.HashMap<com.android.jack.ir.ast.JStatement, com.android.jack.ir.ast.JStatement>(); clonedMarkers = new java.util.ArrayList<com.android.sched.marker.Marker>(); clonedCatchBlocks = new java.util.HashMap<com.android.jack.ir.ast.JCatchBlock, com.android.jack.ir.ast.JCatchBlock>(); T statement = internalCloneStatement(stmt); fixGotos(); for (com.android.sched.marker.Marker m : clonedMarkers) { if (m instanceof com.android.jack.transformations.finallyblock.InlinedFinallyMarker) { com.android.jack.transformations.finallyblock.InlinedFinallyMarker newMarker = ((com.android.jack.transformations.finallyblock.InlinedFinallyMarker) (m)); com.android.jack.ir.ast.JStatement newStmt = clonedStmts.get(newMarker.getTryStmt()); if (newStmt != null) { newMarker.setTryStmt(((com.android.jack.ir.ast.JTryStatement) (newStmt))); } } } return statement; }

@java.lang.Override public void getCurrentCalls(android.os.Message result) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_GET_CURRENT_CALLS, result); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(); if (radioProxy != null) { addRequest(rr); try { radioProxy.getCurrentCalls(rr.mSerial); } catch (java.lang.Exception e) { riljLoge("getCurrentCalls", e); rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); decrementWakeLock(rr); rr.release(); } } else { rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); rr.release(); } }
public int readInt() { int result = libcore.io.Memory.peekInt(((address) + (position)), swap); position += SizeOf.INT; return result; }
public void testAssistantStackZOrder() throws java.lang.Exception { if ((!(supportsPip())) || (!(supportsSplitScreenMultiWindow()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ENTER_PIP, "true"); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.PINNED_STACK_ID); mAmWmState.assertContainsStack("Must contain pinned stack.", android.server.cts.PINNED_STACK_ID); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack("Must contain fullscreen stack.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack("Must contain docked stack.", android.server.cts.DOCKED_STACK_ID); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); assertAssistantStackExists(); mAmWmState.assertFrontStack("Pinned stack should be on top.", android.server.cts.PINNED_STACK_ID); mAmWmState.assertFocusedStack("Assistant stack should be focused.", android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }
public void test() throws java.lang.Exception { assertEquals(("" + (((((("local.properties:11: Error: Colon (:) must be escaped in .property files [PropertyEscape]\n" + "windows.dir=C:\\my\\path\\to\\sdk\n") + " ~\n") + "local.properties:11: Error: Windows file separators (\\) must be escaped (\\\\); use C:\\\\my\\\\path\\\\to\\\\sdk [PropertyEscape]\n") + "windows.dir=C:\\my\\path\\to\\sdk\n") + " ~~~~~~~~~~~~~~~~~\n") + "2 errors, 0 warnings\n")), lintProject("local.properties=>local.properties")); }
@javax.annotation.Nonnull private java.util.Set<java.lang.String> getInternalFileNamesToCompile() { com.android.jack.library.InputJackLibrary incrementalInputLibrary = getIncrementalInternalLibrary(); if ((incrementalInputLibrary == null) || (needFullRebuild())) { return fileNamesOnCmdLine; } assert (typeDependencies) != null; java.util.Map<java.lang.String, java.util.Set<java.lang.String>> typeRecompileDependencies = typeDependencies.getRecompileDependencies(); java.util.Set<java.lang.String> filesToRecompile = new java.util.HashSet<java.lang.String>(); filesToRecompile.addAll(addedFileNames); filesToRecompile.addAll(modifiedFileNames); addDependencies(filesToRecompile, typeRecompileDependencies, modifiedFileNames); addDependencies(filesToRecompile, typeRecompileDependencies, deletedFileNames); tracer.getStatistic(com.android.jack.incremental.IncrementalInputFilter.RECOMPILED_FILES).incValue(filesToRecompile.size()); return filesToRecompile; }
public static void arraycopy(char[] src, int srcPos, char[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + " dst.length=") + (dst.length)) + " dstPos=") + dstPos) + " length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_CHAR_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyCharUnchecked(src, srcPos, dst, dstPos, length); } }
public void write(java.io.DataOutputStream out) throws java.io.IOException { final java.util.HashMap<com.android.server.net.NetworkIdentitySet, java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key>> keysByIdent = com.google.android.collect.Maps.newHashMap(); for (com.android.server.net.NetworkStatsCollection.Key key : mStats.keySet()) { java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(key.ident); if (keys == null) { keys = com.google.android.collect.Lists.newArrayList(); keysByIdent.put(key.ident, keys); } keys.add(key); } out.writeInt(com.android.server.net.NetworkStatsCollection.FILE_MAGIC); out.writeInt(com.android.server.net.NetworkStatsCollection.VERSION_UNIFIED_INIT); out.writeInt(keysByIdent.size()); for (com.android.server.net.NetworkIdentitySet ident : keysByIdent.keySet()) { final java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(ident); ident.writeToStream(out); out.writeInt(keys.size()); for (com.android.server.net.NetworkStatsCollection.Key key : keys) { final android.net.NetworkStatsHistory history = mStats.get(key); out.writeInt(key.uid); out.writeInt(key.set); out.writeInt(key.tag); history.writeToStream(out); } } out.flush(); }

@java.lang.Override protected boolean stop() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, "stop()"); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidService.TAG, "stop() called before start()"); return true; } setActiveDevice(null); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(null); unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; if ((mStateMachinesThread) != null) { mStateMachinesThread.quitSafely(); mStateMachinesThread = null; } mAdapterService = null; mAdapter = null; return true; }

public void postForkChild(int debugFlags, java.lang.String instructionSet) { dalvik.system.ZygoteHooks.nativePostForkChild(token, debugFlags, instructionSet); }
@java.lang.Override public void setNetworkSelectionModeAutomatic(android.os.Message response) { }
public static <T> com.google.protobuf.nano.Extension<T> create(int fieldNumber, com.google.protobuf.nano.Extension.TypeLiteral<T> type) { return new com.google.protobuf.nano.Extension<T>(fieldNumber, type); }


private static java.lang.String wpaCipherToString(int cipher) { switch (cipher) { case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_CIPHER_NONE : return "NONE"; case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_CIPHER_TKIP : return "TKIP"; case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_CIPHER_CCMP : return "CCMP"; default : return "?"; } }
@android.test.suitebuilder.annotation.SmallTest public void testParcelWithInvalidMccMnc() { final java.lang.String invalidMcc = "randomStuff"; final java.lang.String invalidMnc = "randomStuff"; android.telephony.CellIdentityLte ci = new android.telephony.CellIdentityLte(com.android.internal.telephony.CellIdentityLteTest.CI, com.android.internal.telephony.CellIdentityLteTest.PCI, com.android.internal.telephony.CellIdentityLteTest.TAC, com.android.internal.telephony.CellIdentityLteTest.EARFCN, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.CI); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.PCI); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.TAC); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.EARFCN); p.writeString(invalidMcc); p.writeString(invalidMnc); p.setDataPosition(0); android.telephony.CellIdentityLte newCi = CellIdentityLte.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }
public void initializeGlobals(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_addup s) { mArray = new int[(com.android.rs.test.UT_script_group2_gatherscatter.ARRAY_SIZE) * 4]; for (int i = 0; i < (com.android.rs.test.UT_script_group2_gatherscatter.ARRAY_SIZE); i++) { mArray[(i * 4)] = i * 7; mArray[((i * 4) + 1)] = (i * 7) + 1; mArray[((i * 4) + 2)] = (i * 7) + 2; mArray[((i * 4) + 3)] = (i * 7) + 3; } }
@org.junit.Test public void aget_char() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(AGET_CHAR).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }
public java.lang.String[] getIsimPcscf() throws android.os.RemoteException { com.android.internal.telephony.Phone phone = getPhone(getDefaultSubscription()); mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, "Requires READ_PRIVILEGED_PHONE_STATE"); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimPcscf(); } else { return null; } }
private void doPerform() { isRunning.set(true); new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { try { myApplied = myOperation.execute(com.intellij.updater.SwingUpdaterUI.this); } catch (com.intellij.updater.OperationCancelledException ignore) { } catch (java.lang.Throwable e) { showError(e); } finally { isRunning.set(false); if (hasError.get()) { startProcess("Failed to apply patch"); setProgress(100); myCancelButton.setText(com.intellij.updater.SwingUpdaterUI.EXIT_BUTTON_TITLE); myCancelButton.setEnabled(true); } else { exit(); } } } }).start(); }
public void closeSupplicantConnection() { synchronized(com.android.server.wifi.WifiNative.sLock) { localLog(((mInterfacePrefix) + "closeSupplicantConnection")); com.android.server.wifi.WifiNative.closeSupplicantConnectionNative(); } }

public static boolean hasVersionCode(com.android.io.IAbstractFile manifestFile) throws com.android.io.StreamException, javax.xml.xpath.XPathExpressionException { javax.xml.xpath.XPath xPath = com.android.xml.AndroidXPathFactory.newXPath(); java.lang.Object result = xPath.evaluate(((((("/" + (com.android.xml.AndroidManifest.NODE_MANIFEST)) + "/@") + (AndroidXPathFactory.DEFAULT_NS_PREFIX)) + ":") + (com.android.xml.AndroidManifest.ATTRIBUTE_VERSIONCODE)), new org.xml.sax.InputSource(manifestFile.getContents()), javax.xml.xpath.XPathConstants.NODE); if (result != null) { org.w3c.dom.Node node = ((org.w3c.dom.Node) (result)); if ((node.getNodeValue().length()) > 0) { return true; } } return false; }
public int getScreenResolution() { long display = sun.awt.X11.XToolkit.getDisplay(); sun.awt.SunToolkit.awtLock(); try { return ((int) (((sun.awt.X11.XlibWrapper.DisplayWidth(display, sun.awt.X11.XlibWrapper.DefaultScreen(display))) * 25.4) / (sun.awt.X11.XlibWrapper.DisplayWidthMM(display, sun.awt.X11.XlibWrapper.DefaultScreen(display))))); } finally { sun.awt.SunToolkit.awtUnlock(); } }
@java.lang.Override protected boolean start() { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "start()"); } initNative(); mNativeAvailable = true; return true; }


@android.test.suitebuilder.annotation.LargeTest public void testInjectLargeString() throws java.lang.InterruptedException { sendActivity = getActivity(); getInstrumentation().waitForIdleSync(); final java.util.concurrent.atomic.AtomicBoolean requestFocusSucceded = new java.util.concurrent.atomic.AtomicBoolean(false); getInstrumentation().runOnMainSync(new java.lang.Runnable() { @java.lang.Override public void run() { final android.view.View view = sendActivity.findViewById(R.id.send_data_to_call_edit_text); android.util.Log.i("TEST", android.support.test.espresso.util.HumanReadables.describe(view)); requestFocusSucceded.set(view.requestFocus()); android.util.Log.i("TEST-post", android.support.test.espresso.util.HumanReadables.describe(view)); focusLatch.countDown(); } }); assertTrue("requestFocus timed out!", focusLatch.await(2, java.util.concurrent.TimeUnit.SECONDS)); assertTrue("requestFocus failed.", requestFocusSucceded.get()); getInstrumentation().runOnMainSync(new java.lang.Runnable() { @java.lang.Override public void run() { try { injectEventWorked.set(uiController.injectString("This is a string with 32 chars!!")); latch.countDown(); } catch (android.support.test.espresso.InjectEventSecurityException e) { injectEventThrewSecurityException.set(true); } } }); assertFalse("SecurityException exception was thrown.", injectEventThrewSecurityException.get()); assertTrue("Timed out!", latch.await(20, java.util.concurrent.TimeUnit.SECONDS)); assertTrue(injectEventWorked.get()); }
@java.lang.Override public void queryCdmaRoamingPreference(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_QUERY_ROAMING_PREFERENCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getCdmaRoamingPreference(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "queryCdmaRoamingPreference", e); } } }
public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testDiff3() throws java.lang.Exception { java.lang.String main = "" + ((((((((("<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n") + " package=\"com.example.lib3\">\n") + "\n") + " <application android:label=\"@string/lib_name\" />\n") + " <!-- some comment that should be ignored -->\n") + " <activity android:name=\"activityOne\" />\n") + "\n") + "\n") + "</manifest>"); java.lang.String library = "" + (((((((("<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n") + " package=\"com.example.lib3\">\n") + "\n") + " <!-- some comment that should also be ignored -->\n") + " <activity android:name=\"activityOne\" />\n") + " <application android:label=\"@string/lib_name\" />\n") + "\n") + "</manifest>"); com.android.manifmerger.XmlDocument mainDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), "testDiff3()"), main); com.android.manifmerger.XmlDocument libraryDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), "testDiff3()"), library); assertTrue(mainDocument.getRootNode().compareTo(libraryDocument.getRootNode(), mergingReport)); }

public void selectDefaultApplication() { try { select(null); } catch (java.util.NoSuchElementException e) { if ((getAccessControlEnforcer()) != null) { try { select(mAccessControlEnforcer.getDefaultAccessControlAid()); } catch (java.lang.Exception ignore) { } } } catch (android.os.RemoteException ignore) { } synchronized(mLock) { mDefaultApplicationSelectedOnBasicChannel = true; } }
static java.util.List<? extends java.io.File> load(android.content.Context context, java.io.File sourceApk, java.io.File dexDir, java.lang.String prefsKeyPrefix, boolean forceReload) throws java.io.IOException { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, (((((("MultiDexExtractor.load(" + (sourceApk.getPath())) + ", ") + forceReload) + ", ") + prefsKeyPrefix) + ")")); long currentCrc = android.support.multidex.MultiDexExtractor.getZipCrc(sourceApk); java.io.File lockFile = new java.io.File(dexDir, android.support.multidex.MultiDexExtractor.LOCK_FILENAME); java.io.RandomAccessFile lockRaf = new java.io.RandomAccessFile(lockFile, "rw"); java.nio.channels.FileChannel lockChannel = null; java.nio.channels.FileLock cacheLock = null; java.util.List<android.support.multidex.MultiDexExtractor.ExtractedDex> files; java.io.IOException releaseLockException = null; try { lockChannel = lockRaf.getChannel(); android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ("Blocking on lock " + (lockFile.getPath()))); cacheLock = lockChannel.lock(); android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((lockFile.getPath()) + " locked")); if ((!forceReload) && (!(android.support.multidex.MultiDexExtractor.isModified(context, sourceApk, currentCrc, prefsKeyPrefix)))) { try { files = android.support.multidex.MultiDexExtractor.loadExistingExtractions(context, sourceApk, dexDir, prefsKeyPrefix); } catch (java.io.IOException ioe) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, ("Failed to reload existing extracted secondary dex files," + " falling back to fresh extraction"), ioe); files = android.support.multidex.MultiDexExtractor.performExtractions(sourceApk, dexDir); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), currentCrc, files); } } else { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, "Detected that extraction must be performed."); files = android.support.multidex.MultiDexExtractor.performExtractions(sourceApk, dexDir); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), currentCrc, files); } } finally { if (cacheLock != null) { try { cacheLock.release(); } catch (java.io.IOException e) { android.util.Log.e(android.support.multidex.MultiDexExtractor.TAG, ("Failed to release lock on " + (lockFile.getPath()))); releaseLockException = e; } } if (lockChannel != null) { android.support.multidex.MultiDexExtractor.closeQuietly(lockChannel); } android.support.multidex.MultiDexExtractor.closeQuietly(lockRaf); } if (releaseLockException != null) { throw releaseLockException; } android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, (("load found " + (files.size())) + " secondary dex files")); return files; }
public void buildNewRa(android.net.ip.RouterAdvertisementDaemon.RaParams deprecatedParams, android.net.ip.RouterAdvertisementDaemon.RaParams newParams) { synchronized(mLock) { if (deprecatedParams != null) { mDeprecatedInfoTracker.putPrefixes(deprecatedParams.prefixes); mDeprecatedInfoTracker.putDnses(deprecatedParams.dnses); } if (newParams != null) { mDeprecatedInfoTracker.removePrefixes(newParams.prefixes); mDeprecatedInfoTracker.removeDnses(newParams.dnses); } mRaParams = newParams; assembleRaLocked(); } maybeNotifyMulticastTransmitter(); }
private static libcore.tzdata.update2.TimeZoneBundle createValidTimeZoneBundle(java.lang.String rulesVersion, java.lang.String androidRevision) throws java.lang.Exception { return libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundleBuilder(rulesVersion, androidRevision).build(); }

@java.lang.Override public com.google.gson.JsonElement serialize(com.android.ide.common.blame.SourceFragmentPositionRange position, java.lang.reflect.Type type, com.google.gson.JsonSerializationContext jsonSerializationContext) { com.google.gson.JsonObject result = new com.google.gson.JsonObject(); if ((position.getStartLine()) != (-1)) { result.addProperty(com.android.ide.common.blame.SourceFragmentPositionRange.START_LINE, position.getStartLine()); } if ((position.getStartColumn()) != (-1)) { result.addProperty(com.android.ide.common.blame.SourceFragmentPositionRange.START_COLUMN, position.getStartColumn()); } if ((position.getStartOffset()) != (-1)) { result.addProperty(com.android.ide.common.blame.SourceFragmentPositionRange.START_OFFSET, position.getStartOffset()); } if (((position.getEndLine()) != (-1)) && ((position.getEndLine()) != (position.getStartLine()))) { result.addProperty(com.android.ide.common.blame.SourceFragmentPositionRange.END_LINE, position.getEndLine()); } if (((position.getEndColumn()) != (-1)) && ((position.getEndColumn()) != (position.getStartColumn()))) { result.addProperty(com.android.ide.common.blame.SourceFragmentPositionRange.END_COLUMN, position.getEndColumn()); } if (((position.getEndOffset()) != (-1)) && ((position.getEndOffset()) != (position.getStartOffset()))) { result.addProperty(com.android.ide.common.blame.SourceFragmentPositionRange.END_OFFSET, position.getEndOffset()); } return result; }
synchronized void notifyMethodLoaded(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loaded) { assert structureLoaded; (methodNotLoadedCount)--; if ((methodNotLoadedCount) == 0) { loaded.removeLoader(); } }
@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.OutputVDir getOutputVDir() { return outputVDir; }
@java.lang.Override protected void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); mShowVoicemailPreference = (icicle == null) && (android.text.TextUtils.equals(getIntent().getAction(), com.android.phone.settings.VoicemailSettingsActivity.ACTION_ADD_VOICEMAIL)); mSubscriptionInfoHelper = new com.android.phone.SubscriptionInfoHelper(this, getIntent()); mSubscriptionInfoHelper.setActionBarTitle(getActionBar(), getResources(), R.string.voicemail_settings_with_label); mPhone = mSubscriptionInfoHelper.getPhone(); mPhoneAccountHandle = com.android.phone.PhoneUtils.makePstnPhoneAccountHandle(mPhone); mOmtpVvmCarrierConfigHelper = new com.android.phone.vvm.omtp.OmtpVvmCarrierConfigHelper(mPhone.getContext(), mPhone.getSubId()); }

@org.junit.Test public void testSetupDriverForClientMode() { com.android.server.wifi.WificondControl wificondControl = mock(com.android.server.wifi.WificondControl.class); android.net.wifi.IWificond wificond = mock(android.net.wifi.IWificond.class); android.net.wifi.IClientInterface clientInterface = mock(android.net.wifi.IClientInterface.class); when(wificondControl.setupDriverForClientMode()).thenReturn(clientInterface); mWifiNative.setWificondControl(wificondControl); android.net.wifi.IClientInterface returnedClientInterface = mWifiNative.setupDriverForClientMode(); assertEquals(clientInterface, returnedClientInterface); verify(wificondControl).setupDriverForClientMode(); verify(mWifiNative).startHal(eq(true)); }

public boolean startVendorHal(boolean isStaMode) { if (!(mHalDeviceManager.start())) { android.util.Log.e(com.android.server.wifi.WifiVendorHal.TAG, "Failed to start the vendor HAL"); return false; } android.hardware.wifi.V1_0.IWifiIface iface; if (isStaMode) { mIWifiStaIface = mHalDeviceManager.createStaIface(null, null); if ((mIWifiStaIface) == null) { android.util.Log.e(com.android.server.wifi.WifiVendorHal.TAG, "Failed to create STA Iface. Vendor Hal start failed"); mHalDeviceManager.stop(); return false; } iface = ((android.hardware.wifi.V1_0.IWifiIface) (mIWifiStaIface)); if (!(registerStaIfaceCallback())) { android.util.Log.e(com.android.server.wifi.WifiVendorHal.TAG, "Failed to register sta iface callback"); mHalDeviceManager.stop(); return false; } mIWifiRttController = mHalDeviceManager.createRttController(iface); if ((mIWifiRttController) == null) { android.util.Log.e(com.android.server.wifi.WifiVendorHal.TAG, "Failed to create RTT controller. Vendor Hal start failed"); stopVendorHal(); return false; } enableLinkLayerStats(); } else { mIWifiApIface = mHalDeviceManager.createApIface(null, null); if ((mIWifiApIface) == null) { android.util.Log.e(com.android.server.wifi.WifiVendorHal.TAG, "Failed to create AP Iface. Vendor Hal start failed"); stopVendorHal(); return false; } iface = ((android.hardware.wifi.V1_0.IWifiIface) (mIWifiApIface)); } mIWifiChip = mHalDeviceManager.getChip(iface); if ((mIWifiChip) == null) { android.util.Log.e(com.android.server.wifi.WifiVendorHal.TAG, "Failed to get the chip created for the Iface. Vendor Hal start failed"); stopVendorHal(); return false; } if (!(registerChipCallback())) { android.util.Log.e(com.android.server.wifi.WifiVendorHal.TAG, "Failed to register chip callback"); mHalDeviceManager.stop(); return false; } android.util.Log.i(com.android.server.wifi.WifiVendorHal.TAG, "Vendor Hal started successfully"); return true; }
private void removeConnection(android.telecom.Connection connection) { java.lang.String id = mIdByConnection.get(connection); connection.unsetConnectionService(this); connection.removeConnectionListener(mConnectionListener); mConnectionById.remove(mIdByConnection.get(connection)); mIdByConnection.remove(connection); mAdapter.removeCall(id); }
public void testClientSendsContentLength() throws java.lang.Exception { server.enqueue(new com.google.mockwebserver.MockResponse().setBody("A")); server.play(); java.net.HttpURLConnection connection = ((java.net.HttpURLConnection) (server.getUrl("/").openConnection())); connection.setDoOutput(true); java.io.OutputStream out = connection.getOutputStream(); out.write(new byte[]{ 'A', 'B', 'C' }); out.close(); assertEquals("A", readAscii(connection.getInputStream(), java.lang.Integer.MAX_VALUE)); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); assertContains(request.getHeaders(), "Content-Length: 3"); }
public static junit.framework.Test suite() { java.io.File folder = com.android.build.tests.ProjectTest.getFolderFromEnvVar(com.android.build.tests.ProjectTest.TEST_FOLDER); java.io.File sdkFolder = com.android.build.tests.ProjectTest.getFolderFromEnvVar(com.android.build.tests.ProjectTest.TEST_SDK); java.io.File ndkFolder = com.android.build.tests.ProjectTest.getFolderFromEnvVar(com.android.build.tests.ProjectTest.TEST_NDK); junit.framework.TestSuite suite = new junit.framework.TestSuite(); suite.setName("ProjectTests"); java.io.File[] children = folder.listFiles(); if (children != null) { for (java.io.File child : children) { if (child.isDirectory()) { com.android.build.tests.ProjectTest.searchForProject(suite, child, sdkFolder, ndkFolder); } } } return suite; }
protected void setUp() throws java.lang.Exception { super.setUp(); ssc = java.nio.channels.ServerSocketChannel.open(); ssc.configureBlocking(false); java.net.ServerSocket ss = ssc.socket(); java.net.InetSocketAddress address = new java.net.InetSocketAddress(org.apache.harmony.nio.tests.java.nio.channels.SelectorTest.PORT); ss.bind(address); selector = java.nio.channels.Selector.open(); }
@javax.annotation.Nonnull public com.android.jack.cfg.ControlFlowGraph getCfg() { assert (cfg) != null; return cfg; }


@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "T144630613") public void activateDeactivatePolicy() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); if (checkStatusOfPolicy(instrumentation, "Sample Device Admin")) { com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, "Sample Device Admin"); } assertFalse(checkStatusOfPolicy(instrumentation, "Sample Device Admin")); com.android.devtools.systemimage.uitest.utils.SettingsUtil.activate(instrumentation, "Sample Device Admin"); assertTrue(checkStatusOfPolicy(instrumentation, "Sample Device Admin")); com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, "Sample Device Admin"); assertFalse(checkStatusOfPolicy(instrumentation, "Sample Device Admin")); }

@com.android.annotations.NonNull public static java.lang.String getGenericLabel(@com.android.annotations.NonNull com.android.sdklib.devices.Device device) { java.lang.String name = device.getName(); if (name.equals("3.7 FWVGA slider")) { name = "3.7in FWVGA slider"; } java.util.regex.Matcher matcher = com.android.ide.common.rendering.HardwareConfigHelper.GENERIC_PATTERN.matcher(name); if (matcher.matches()) { java.lang.String size = matcher.group(1); java.lang.String n = matcher.group(2); int dot = size.indexOf('.'); if (dot == (-1)) { size = size + ".0"; dot = (size.length()) - 2; } for (int i = 0; i < (2 - dot); i++) { size = ' ' + size; } name = (size + "\" ") + n; } return java.lang.String.format(java.util.Locale.US, "%1$s (%2$s)", name, com.android.ide.common.rendering.HardwareConfigHelper.getResolutionString(device)); }
public void cancelSession(byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }
public int setsid() throws android.system.ErrnoException;
private static native boolean native_clipRect(int nCanvas, float left, float top, float right, float bottom, int regionOp);









public void testReadOneByteAtATime() throws java.io.IOException { java.io.InputStream in = new java.io.FilterInputStream(tests.support.resource.Support_Resources.getStream("hyts_ZipFile.zip")) { @java.lang.Override public int read(byte[] buffer, int offset, int count) throws java.io.IOException { return super.read(buffer, offset, 1); } @java.lang.Override public int read(byte[] buffer) throws java.io.IOException { return super.read(buffer, 0, 1); } }; zis = new java.util.zip.ZipInputStream(in); while ((zentry = zis.getNextEntry()) != null) { zentry.getName(); } zis.close(); }

public boolean contains(java.lang.Object value) { return containsValue(value); }

public android.security.KeyGeneratorSpec build() { return new android.security.KeyGeneratorSpec(mContext, mKeystoreAlias, mFlags, mKeySize, mKeyValidityStart, mKeyValidityForOriginationEnd, mKeyValidityForConsumptionEnd, mPurposes, mPaddings, mBlockModes, mUserAuthenticators, mUserAuthenticationValidityDurationSeconds); }

private java.io.File createDex(vogar.Action action, java.io.File actionJar) { java.io.File dex = run.localFile(action, "classes.dex"); vogar.Classpath classesToDex = vogar.Classpath.of(actionJar); classesToDex.addAll(run.classpath); if ((run.toolchain) == (vogar.Toolchain.JACK)) { throw new java.lang.UnsupportedOperationException("Jack support for --mode=activity not yet implemented"); } java.io.File localTempDir = run.localDir(action.getName()); vogar.Classpath dependentCp = new vogar.Classpath(); run.androidSdk.dex(run.multidex, dex, localTempDir, classesToDex, dependentCp); return dex; }



public void testBigDecimalBug1897917() { java.text.NumberFormat pf = java.text.NumberFormat.getPercentInstance(); assertEquals("17%", pf.format(java.math.BigDecimal.valueOf(0.17))); java.lang.String longDec = "11.2345678901234567890123456789012345678901234567890"; java.math.BigDecimal bd = new java.math.BigDecimal(longDec); assertBigDecimalWithFraction(bd, "1,123.46%", 2); assertBigDecimalWithFraction(bd, "1,123.45678901%", 8); assertBigDecimalWithFraction(bd, "1,123.4567890123%", 10); assertBigDecimalWithFraction(bd, "1,123.45678901234567890123%", 20); assertBigDecimalWithFraction(bd, "1,123.456789012345678901234567890123%", 30); assertDecFmtWithMultiplierAndFraction("3333.33333333", 3, 4, "10,000"); assertDecFmtWithMultiplierAndFraction("3333.33333333", (-3), 4, "-10,000"); assertDecFmtWithMultiplierAndFraction("0.00333333", 3, 4, "0.01"); assertDecFmtWithMultiplierAndFraction("3330000000000000000000000000000000", 3, 4, "9,990,000,000,000,000,000,000,000,000,000,000"); }


private static com.android.apksig.SigningCertificateLineage read(java.nio.ByteBuffer inputByteBuffer, int version) throws java.io.IOException { switch (version) { case com.android.apksig.SigningCertificateLineage.FIRST_VERSION : try { java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> nodes = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.readSigningCertificateLineage(getLengthPrefixedSlice(inputByteBuffer)); int minSdkVersion = com.android.apksig.SigningCertificateLineage.calculateMinSdkVersion(nodes); return new com.android.apksig.SigningCertificateLineage(minSdkVersion, nodes); } catch (com.android.apksig.apk.ApkFormatException e) { throw new java.io.IOException(("Unable to read list of signing certificate nodes in " + "SigningCertificateLineage"), e); } default : throw new java.lang.IllegalArgumentException("Improper SigningCertificateLineage format: unrecognized version."); } }
@java.lang.Override public void setCallForward(int action, int cfReason, int serviceClass, java.lang.String number, int timeSeconds, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_CALL_FORWARD, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " action = ") + action) + " cfReason = ") + cfReason) + " serviceClass = ") + serviceClass) + " timeSeconds = ") + timeSeconds)); } android.hardware.radio.V1_0.CallForwardInfo cfInfo = new android.hardware.radio.V1_0.CallForwardInfo(); cfInfo.status = action; cfInfo.reason = cfReason; cfInfo.serviceClass = serviceClass; cfInfo.toa = android.telephony.PhoneNumberUtils.toaFromString(number); cfInfo.number = convertNullToEmptyString(number); cfInfo.timeSeconds = timeSeconds; try { radioProxy.setCallForward(rr.mSerial, cfInfo); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCallForward", e); } } }

@java.lang.Override public void onPostDialContinue(java.lang.String callId, boolean proceed) { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.argi1 = (proceed) ? 1 : 0; mHandler.obtainMessage(android.telecom.ConnectionService.MSG_ON_POST_DIAL_CONTINUE, args).sendToTarget(); }

@javax.annotation.Nonnull public static java.util.List<com.android.jack.test.runner.RuntimeRunner> listRuntimeTestRunners(@javax.annotation.CheckForNull java.util.Properties properties) throws com.android.jack.test.runner.RuntimeRunnerException, java.lang.IllegalArgumentException, java.lang.SecurityException { if (properties != null) { java.lang.String rtAsString = properties.getProperty(com.android.jack.test.toolchain.AbstractTestTools.RUNTIME_LIST_KEY); if (rtAsString != null) { return com.android.jack.test.toolchain.AbstractTestTools.parseRuntimeList(rtAsString); } } if ((!(com.android.jack.test.toolchain.AbstractTestTools.hasRuntimeWarningBeenEmitted)) && ((com.android.jack.test.toolchain.AbstractTestTools.runtimes.size()) == 0)) { java.lang.System.err.println("WARNING: no runtime has been provided"); com.android.jack.test.toolchain.AbstractTestTools.hasRuntimeWarningBeenEmitted = true; } return com.android.jack.test.toolchain.AbstractTestTools.runtimes; }
public void addDexPath(java.lang.String dexPath, java.io.File optimizedDirectory) { final java.util.List<java.io.IOException> suppressedExceptionList = new java.util.ArrayList<java.io.IOException>(); final dalvik.system.DexPathList.Element[] newElements = dalvik.system.DexPathList.makeDexElements(dalvik.system.DexPathList.splitDexPath(dexPath), optimizedDirectory, suppressedExceptionList, definingContext); if ((newElements != null) && ((newElements.length) > 0)) { final dalvik.system.DexPathList.Element[] oldElements = dexElements; dexElements = new dalvik.system.DexPathList.Element[(oldElements.length) + (newElements.length)]; java.lang.System.arraycopy(oldElements, 0, dexElements, 0, oldElements.length); java.lang.System.arraycopy(newElements, 0, dexElements, oldElements.length, newElements.length); } if ((suppressedExceptionList.size()) > 0) { final java.io.IOException[] newSuppressedExceptions = suppressedExceptionList.toArray(new java.io.IOException[suppressedExceptionList.size()]); if ((dexElementsSuppressedExceptions) != null) { final java.io.IOException[] oldSuppressedExceptions = dexElementsSuppressedExceptions; final int suppressedExceptionsLength = (oldSuppressedExceptions.length) + (newSuppressedExceptions.length); dexElementsSuppressedExceptions = new java.io.IOException[suppressedExceptionsLength]; java.lang.System.arraycopy(oldSuppressedExceptions, 0, dexElementsSuppressedExceptions, 0, oldSuppressedExceptions.length); java.lang.System.arraycopy(newSuppressedExceptions, 0, dexElementsSuppressedExceptions, oldSuppressedExceptions.length, newSuppressedExceptions.length); } else { dexElementsSuppressedExceptions = newSuppressedExceptions; } } }


static void inlinedForNull(java.lang.Iterable<?> it) { it.iterator(); }
@org.junit.Test public void shr_int() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(SHR_INT).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }


void run(java.util.Collection<com.android.ddmlib.testrunner.ITestRunListener> listeners) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException;
public static android.support.v8.renderscript.ScriptIntrinsicColorMatrix create(android.support.v8.renderscript.RenderScript rs, android.support.v8.renderscript.Element e) { if (!(e.isCompatible(android.support.v8.renderscript.Element.U8_4(rs)))) { throw new android.support.v8.renderscript.RSIllegalArgumentException("Unsuported element type."); } long id = rs.nScriptIntrinsicCreate(2, e.getID(rs)); return new android.support.v8.renderscript.ScriptIntrinsicColorMatrix(id, rs); }


void removeForward(int localPort, java.lang.String remoteSocketName, com.android.ddmlib.IDevice.DeviceUnixSocketNamespace namespace) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException;
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) throws java.lang.Exception { if (((method.isNative()) || (method.isAbstract())) || (!(filter.accept(this.getClass(), method)))) { return; } com.android.jack.cfg.ControlFlowGraph cfg = method.getMarker(com.android.jack.cfg.ControlFlowGraph.class); assert cfg != null; com.android.jack.optimizations.DefUsesChainsSimplifier.Visitor visitor = new com.android.jack.optimizations.DefUsesChainsSimplifier.Visitor(method); for (com.android.jack.cfg.BasicBlock bb : cfg.getNodes()) { for (com.android.jack.ir.ast.JStatement stmt : bb.getStatements()) { visitor.accept(stmt); } } method.removeMarker(com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker.class); }
@com.android.annotations.NonNull public java.util.Set<java.io.File> getPackagedJars() { java.util.Set<java.io.File> jars = com.google.common.collect.Sets.newHashSetWithExpectedSize(((mJars.size()) + (mFlatLibraries.size()))); for (com.android.builder.dependency.JarDependency jar : mJars) { java.io.File jarFile = jar.getJarFile(); if ((jar.isPackaged()) && (jarFile.exists())) { jars.add(jarFile); } } for (com.android.builder.dependency.LibraryDependency libraryDependency : mFlatLibraries) { java.io.File libJar = libraryDependency.getJarFile(); if (libJar.exists()) { jars.add(libJar); } for (java.io.File jarFile : libraryDependency.getLocalJars()) { if (jarFile.isFile()) { jars.add(jarFile); } } } return jars; }
private final java.lang.String[][] getZoneStringsImpl(boolean needsCopy) { java.lang.String[][] zoneStrings = internalZoneStrings(); if (!needsCopy) { return zoneStrings; } int len = zoneStrings.length; java.lang.String[][] aCopy = new java.lang.String[len][]; for (int i = 0; i < len; i++) { aCopy[i] = java.util.Arrays.copyOf(zoneStrings[i], zoneStrings[i].length); } return aCopy; }




public java.lang.String[] getForbiddenPlmns(int subId, int appType) { mApp.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, "Requires READ_PRIVILEGED_PHONE_STATE"); if ((appType != (android.telephony.TelephonyManager.APPTYPE_USIM)) && (appType != (android.telephony.TelephonyManager.APPTYPE_SIM))) { com.android.phone.PhoneInterfaceManager.loge("getForbiddenPlmnList(): App Type must be USIM or SIM"); return null; } java.lang.Object response = sendRequest(com.android.phone.PhoneInterfaceManager.CMD_GET_FORBIDDEN_PLMNS, new java.lang.Integer(appType), subId); if (response instanceof java.lang.String[]) { return ((java.lang.String[]) (response)); } return null; }
private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, final float[] javaResult, final float[] rsResult) { if ((javaResult.length) != (rsResult.length)) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((testName + ": java length ") + (javaResult.length)) + ", rs length ") + (rsResult.length)) + ": FAILED")); return false; } for (int i = 0; i < (javaResult.length); ++i) { if ((javaResult[i]) != (rsResult[i])) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((((testName + "[") + i) + "]: java ") + (javaResult[i])) + ", rs ") + (rsResult[i])) + ": FAILED")); return false; } } java.lang.String status = "PASSED"; if (t != null) status += " " + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((testName + ": ") + status)); return true; }
@java.lang.Override public void onClick(android.view.View view) { server = new com.android.bluetooth.opp.TestTcpServer(); java.lang.Thread server_thread = new java.lang.Thread(server); server_thread.start(); }





@java.lang.Override public void mouseReleased(java.awt.event.MouseEvent event) { endDrawingLine(); }

@java.lang.Override public void setUp() throws java.lang.Exception { mFilePath = com.android.ide.eclipse.tests.AdtTestData.getInstance().getTestFilePath(com.android.ide.eclipse.adt.internal.resources.AttrsXmlParserManifestTest.MOCK_DATA_PATH); mParser = new com.android.ide.eclipse.adt.internal.resources.AttrsXmlParser(mFilePath); }



@java.lang.Override public void onError(int error) { synchronized(mKeepaliveSyncLock) { mKeepaliveStatus = error; mKeepaliveSyncLock.notifyAll(); } }
public void testInstall_withMissingBundleVersionFile() throws java.lang.Exception { libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundleBuilder(libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION, "001").clearVersionForTests().buildUnvalidated(); assertFalse(installer.install(bundle.getBytes())); assertNoContentInstalled(); }

@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add("name", mName).add("minSdkVersion", mMinSdkVersion).add("targetSdkVersion", mTargetSdkVersion).add("renderscriptTargetApi", mRenderscriptTargetApi).add("renderscriptSupportMode", mRenderscriptSupportMode).add("renderscriptNdkMode", mRenderscriptNdkMode).add("versionCode", mVersionCode).add("versionName", mVersionName).add("packageName", mPackageName).add("testPackageName", mTestPackageName).add("testInstrumentationRunner", mTestInstrumentationRunner).add("testHandleProfiling", mTestHandleProfiling).add("testFunctionalTest", mTestFunctionalTest).add("signingConfig", mSigningConfig).add("resConfig", mResourceConfiguration).toString(); }
@java.lang.Override public void run() { try { java.io.File output = java.io.File.createTempFile("predex", ".jar"); output.deleteOnExit(); outputFiles[ii] = output; com.android.builder.internal.compiler.PreDexCache.getCache().preDexLibrary(input, output, dexOptions, mBuildToolInfo, false, (ii == 0 ? clrWithError : clr)); } catch (java.lang.Exception ignored) { } threadDoneCount.incrementAndGet(); }

public void addDevice(com.android.ddmlib.IDevice device, com.android.hierarchyviewerlib.device.Window[] windows, com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo info) { synchronized(mDeviceMap) { mDeviceMap.put(device, new com.android.hierarchyviewerlib.models.DeviceSelectionModel.DeviceInfo(windows, info)); mDeviceList.add(device); } notifyDeviceConnected(device); }

@java.lang.Override public boolean validate() { if ((myState.get(com.google.gct.idea.samples.SampleImportWizardPath.SAMPLE_KEY)) == null) { setErrorHtml("Please select a sample"); return false; } setErrorHtml(""); return true; }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.android.cellbroadcastreceiver.CellBroadcastAlertService.MessageIdAndScope) { com.android.cellbroadcastreceiver.CellBroadcastAlertService.MessageIdAndScope other = ((com.android.cellbroadcastreceiver.CellBroadcastAlertService.MessageIdAndScope) (o)); return ((mMessageId) == (other.mMessageId)) && (mLocation.equals(other.mLocation)); } return false; }


@java.lang.Override @com.android.annotations.NonNull @java.lang.SuppressWarnings("deprecation") public java.util.Properties loadProperties(@com.android.annotations.NonNull java.io.File file) { java.util.Properties props = new java.util.Properties(); java.io.FileInputStream fis = null; try { fis = new java.io.FileInputStream(file); props.load(fis); } catch (java.io.IOException ignore) { } finally { com.google.common.io.Closeables.closeQuietly(fis); } return props; }
public final void testPkgDescBuildTool_Preview() { com.android.sdklib.repository.descriptors.IPkgDesc p = PkgDesc.Builder.newBuildTool(new com.android.sdklib.repository.FullRevision(1, 2, 3, 4)).create(); assertEquals(PkgType.PKG_BUILD_TOOLS, p.getType()); assertTrue(p.hasFullRevision()); assertEquals(new com.android.sdklib.repository.FullRevision(1, 2, 3, 4), p.getFullRevision()); assertTrue(p.getFullRevision().isPreview()); assertFalse(p.hasMajorRevision()); assertNull(p.getMajorRevision()); assertFalse(p.hasAndroidVersion()); assertNull(p.getAndroidVersion()); assertFalse(p.hasPath()); assertNull(p.getPath()); assertFalse(p.hasMinToolsRev()); assertNull(p.getMinToolsRev()); assertFalse(p.hasMinPlatformToolsRev()); assertNull(p.getMinPlatformToolsRev()); assertEquals("build-tools-1.2.3_rc4", p.getInstallId()); assertEquals(com.android.sdklib.io.FileOp.append(mRoot, "build-tools", "build-tools-1.2.3_rc4"), p.getCanonicalInstallFolder(mRoot)); assertEquals("<PkgDesc Type=build_tools FullRev=1.2.3 rc4>", p.toString()); assertEquals("Android SDK Build-Tools 1.2.3 rc4", p.getListDescription()); }



private void readHeader(com.android.jack.dx.io.DexBuffer.Section headerIn) { byte[] magic = headerIn.readByteArray(8); if (!(com.android.jack.dx.dex.DexFormat.isSupportedDexMagic(magic))) { throw new com.android.jack.dx.util.DexException(("Unexpected magic: " + (java.util.Arrays.toString(magic)))); } apiLevel = com.android.jack.dx.dex.DexFormat.magicToApi(magic); checksum = headerIn.readInt(); signature = headerIn.readByteArray(20); fileSize = headerIn.readInt(); int headerSize = headerIn.readInt(); if (headerSize != (com.android.jack.dx.dex.SizeOf.getHeaderSize(apiLevel))) { throw new com.android.jack.dx.util.DexException(("Unexpected header: 0x" + (java.lang.Integer.toHexString(headerSize)))); } int endianTag = headerIn.readInt(); if (endianTag != (DexFormat.ENDIAN_TAG)) { throw new com.android.jack.dx.util.DexException(("Unexpected endian tag: 0x" + (java.lang.Integer.toHexString(endianTag)))); } linkSize = headerIn.readInt(); linkOff = headerIn.readInt(); mapList.off = headerIn.readInt(); if ((mapList.off) == 0) { throw new com.android.jack.dx.util.DexException("Cannot merge dex files that do not contain a map"); } stringIds.size = headerIn.readInt(); stringIds.off = headerIn.readInt(); typeIds.size = headerIn.readInt(); typeIds.off = headerIn.readInt(); protoIds.size = headerIn.readInt(); protoIds.off = headerIn.readInt(); fieldIds.size = headerIn.readInt(); fieldIds.off = headerIn.readInt(); methodIds.size = headerIn.readInt(); methodIds.off = headerIn.readInt(); classDefs.size = headerIn.readInt(); classDefs.off = headerIn.readInt(); dataSize = headerIn.readInt(); dataOff = headerIn.readInt(); }

@java.lang.Override public void init() { super.init(); initSamplesTree(); register(com.google.gct.idea.samples.SampleImportWizardPath.SAMPLE_URL, myUrlField, new com.google.gct.idea.samples.ComponentBinding<java.lang.String, com.intellij.ui.HyperlinkLabel>() { @java.lang.Override public void setValue(@org.jetbrains.annotations.Nullable java.lang.String newValue, @org.jetbrains.annotations.NotNull com.intellij.ui.HyperlinkLabel component) { component.setHyperlinkTarget(newValue); newValue = (com.intellij.openapi.util.text.StringUtil.isEmpty(newValue)) ? "" : "Browse Source"; component.setHyperlinkText(newValue); } }); register(com.google.gct.idea.samples.SampleBrowserStep.SAMPLE_SCREENSHOT, myScreenshotHtmlPanel, new com.google.gct.idea.samples.SampleBrowserStep.EditorPaneComponentBinding()); registerValueDeriver(com.google.gct.idea.samples.SampleImportWizardPath.SAMPLE_URL, new com.google.gct.idea.samples.SampleBrowserStep.SampleUrlValueDeriver()); registerValueDeriver(com.google.gct.idea.samples.SampleBrowserStep.SAMPLE_SCREENSHOT, new com.google.gct.idea.samples.SampleBrowserStep.ImageListToStringDeriver()); registerValueDeriver(com.google.gct.idea.samples.KEY_DESCRIPTION, new com.google.gct.idea.samples.SampleBrowserStep.DescriptionValueDeriver()); mySearchBox.addDocumentListener(new com.intellij.ui.DocumentAdapter() { @java.lang.Override protected void textChanged(javax.swing.event.DocumentEvent e) { try { java.lang.String keyword = e.getDocument().getText(0, e.getDocument().getLength()); mySampleTreeManager.filterTree(keyword); } catch (javax.swing.text.BadLocationException e1) { } } }); myUrlField.setOpaque(false); }


public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mLteRsrpBoost); out.writeInt(mTdScdmaRscp); out.writeInt((isGsm ? 1 : 0)); out.writeInt((mUseOnlyRsrpForLteLevel ? 1 : 0)); }
public int write(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws java.io.InterruptedIOException, libcore.io.ErrnoException { return writeBytes(fd, bytes, byteOffset, byteCount); }
public void mlock(long address, long byteCount) throws libcore.io.ErrnoException { os.mlock(address, byteCount); }
public void testReceiveSend_Block_Oversize_S2C() throws java.lang.Exception { this.channel1.socket().bind(localAddr2); sendByDatagramSocket("0123456789", localAddr2); receiveByChannel(5, localAddr2, "01234"); }
private void buildAlloc(@javax.annotation.Nonnull com.android.jack.dx.rop.code.RegisterSpec destReg, @javax.annotation.Nonnull com.android.jack.ir.ast.JAlloc alloc, @javax.annotation.Nonnull com.android.jack.dx.rop.code.SourcePosition sourcePosition) { com.android.jack.dx.rop.cst.CstType type = com.android.jack.backend.dex.rop.RopHelper.getCstType(alloc.getInstanceType()); com.android.jack.dx.rop.code.Rop rop = com.android.jack.dx.rop.code.Rops.NEW_INSTANCE; addInstruction(new com.android.jack.dx.rop.code.ThrowingCstInsn(rop, sourcePosition, com.android.jack.dx.rop.code.RegisterSpecList.EMPTY, getCatchTypes(), type)); addMoveResultPseudoAsExtraInstruction(destReg, sourcePosition); }
public void posix_fallocate(java.io.FileDescriptor fd, long offset, long length) throws android.system.ErrnoException;



private boolean checkForAndHandleModeChange(android.os.Message message) { switch (message.what) { case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_START_CLIENT_MODE : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, (("Switching from " + (getCurrentMode())) + " to ClientMode")); mModeStateMachine.transitionTo(mClientModeState); break; case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_START_SCAN_ONLY_MODE : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, (("Switching from " + (getCurrentMode())) + " to ScanOnlyMode")); mModeStateMachine.transitionTo(mScanOnlyModeState); break; case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_START_SOFT_AP_MODE : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, (("Switching from " + (getCurrentMode())) + " to SoftApMode")); mModeStateMachine.transitionTo(mSoftAPModeState); break; case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_DISABLE_WIFI : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, ("disabling wifi, calling exit on " + (getCurrentMode()))); mModeStateMachine.getCurrentState().exit(); tearDownInterfaces(); mModeStateMachine.quit(); mModeStateMachine = null; break; default : return false; } return true; }


@com.android.annotations.NonNull java.util.List<? extends com.android.builder.model.AndroidLibrary> getLibraryDependencies();
public void test_getParams() throws java.lang.Exception { java.security.KeyPairGenerator kg = java.security.KeyPairGenerator.getInstance("DH"); kg.initialize(1024); java.security.KeyPair kp1 = kg.genKeyPair(); java.security.KeyPair kp2 = kg.genKeyPair(); javax.crypto.interfaces.DHPublicKey pk1 = ((javax.crypto.interfaces.DHPublicKey) (kp1.getPublic())); javax.crypto.interfaces.DHPublicKey pk2 = ((javax.crypto.interfaces.DHPublicKey) (kp2.getPublic())); assertTrue(pk1.getY().getClass().getCanonicalName().equals("java.math.BigInteger")); assertTrue(pk2.getParams().getClass().getCanonicalName().equals("javax.crypto.spec.DHParameterSpec")); assertFalse(pk1.equals(pk2)); assertTrue(pk1.getY().equals(pk1.getY())); }

public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
private boolean stmtCanBeOptimized(@javax.annotation.Nonnull com.android.jack.ir.ast.JStatement s1, @javax.annotation.Nonnull com.android.jack.analysis.DefinitionMarker defOfa) { if ((!(defOfa.hasValue())) || (!((defOfa.getValue()) instanceof com.android.jack.ir.ast.JVariableRef))) { return false; } com.android.jack.ir.ast.JVariableRef varRefb = ((com.android.jack.ir.ast.JVariableRef) (defOfa.getValue())); com.android.jack.cfg.BasicBlock bbOfs1 = com.android.jack.util.ControlFlowHelper.getBasicBlock(s1); com.android.jack.ir.ast.JStatement s0 = defOfa.getStatement(); assert s0 != null; com.android.jack.cfg.BasicBlock bbOfs0 = com.android.jack.util.ControlFlowHelper.getBasicBlock(s0); com.android.jack.ir.ast.JVariable b = varRefb.getTarget(); if (bbOfs0 == bbOfs1) { if (!(hasLocalDef(b, bbOfs0, s0, s1))) { return true; } } else { java.util.List<com.android.jack.analysis.DefinitionMarker> defsOfbUseFroms0 = com.android.jack.util.DefsAndUsesChainOptimizationTools.getUsedDefinitions(varRefb); if ((((defsOfbUseFroms0.size()) == 1) && (bbHasOnlyDefinitions(bbOfs1, b, defsOfbUseFroms0))) && (!(hasLocalDef(b, bbOfs1, null, s1)))) { return true; } } return false; }
private java.lang.invoke.MethodHandle findAccessor(java.lang.reflect.Field field, java.lang.Class<?> refc, java.lang.Class<?> fieldType, int kind, boolean performAccessChecks) throws java.lang.IllegalAccessException { if (!performAccessChecks) { checkAccess(refc, field.getDeclaringClass(), field.getModifiers(), field.getName()); } final boolean isStaticKind = (kind == (SGET)) || (kind == (SPUT)); final int modifiers = field.getModifiers(); if ((java.lang.reflect.Modifier.isStatic(modifiers)) != isStaticKind) { java.lang.String reason = ((("Field " + field) + " is ") + (isStaticKind ? "not " : "")) + "static"; throw new java.lang.IllegalAccessException(reason); } final boolean isSetterKind = (kind == (IPUT)) || (kind == (SPUT)); if ((java.lang.reflect.Modifier.isFinal(modifiers)) && isSetterKind) { throw new java.lang.IllegalAccessException((("Field " + field) + " is final")); } final java.lang.invoke.MethodType methodType; switch (kind) { case SGET : methodType = java.lang.invoke.MethodType.methodType(fieldType); break; case SPUT : methodType = java.lang.invoke.MethodType.methodType(void.class, fieldType); break; case IGET : methodType = java.lang.invoke.MethodType.methodType(fieldType, refc); break; case IPUT : methodType = java.lang.invoke.MethodType.methodType(void.class, refc, fieldType); break; default : throw new java.lang.IllegalArgumentException(("Invalid kind " + kind)); } return new java.lang.invoke.MethodHandleImpl(field.getArtField(), kind, methodType); }
@java.lang.Override public void checkValue(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull com.android.sched.vfs.OutputVDir dir) { }
private com.android.build.gradle.internal.tasks.PrepareLibraryTask maybeCreatePrepareLibraryTask(@com.android.annotations.NonNull com.android.build.gradle.internal.dependency.LibraryDependencyImpl library, @com.android.annotations.NonNull org.gradle.api.Project project) { com.android.build.gradle.internal.dependency.LibraryDependencyImpl key = library.getNonTransitiveRepresentation(); com.android.build.gradle.internal.tasks.PrepareLibraryTask prepareLibraryTask = prepareTaskMap.get(key); if (prepareLibraryTask == null) { java.lang.String bundleName = org.gradle.util.GUtil.toCamelCase(library.getName().replaceAll("\\:", " ")); prepareLibraryTask = project.getTasks().create((("prepare" + bundleName) + "Library"), com.android.build.gradle.internal.tasks.PrepareLibraryTask.class); prepareLibraryTask.setDescription(("Prepare " + (library.getName()))); prepareLibraryTask.setBundle(library.getBundle()); prepareLibraryTask.setExplodedDir(library.getBundleFolder()); prepareTaskMap.put(key, prepareLibraryTask); } return prepareLibraryTask; }
@org.junit.Test public void testEnableDisableNetworkFailedDueToPermissionDenied() throws java.lang.Exception { android.net.wifi.WifiConfiguration openNetwork = com.android.server.wifi.WifiConfigurationTestUtil.createOpenNetwork(); com.android.server.wifi.NetworkUpdateResult result = verifyAddNetworkToWifiConfigManager(openNetwork); assertTrue(mWifiConfigManager.enableNetwork(result.getNetworkId(), false, com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)); android.net.wifi.WifiConfiguration retrievedNetwork = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()); android.net.wifi.WifiConfiguration.NetworkSelectionStatus retrievedStatus = retrievedNetwork.getNetworkSelectionStatus(); assertTrue(retrievedStatus.isNetworkEnabled()); verifyUpdateNetworkStatus(retrievedNetwork, WifiConfiguration.Status.ENABLED); doAnswer(new android.app.test.MockAnswerUtil.AnswerWithArguments() { public int answer(java.lang.String permName, int uid) throws java.lang.Exception { if (uid == (com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)) { return android.content.pm.PackageManager.PERMISSION_GRANTED; } return android.content.pm.PackageManager.PERMISSION_DENIED; } }).when(mFrameworkFacade).checkUidPermission(anyString(), anyInt()); assertFalse(mWifiConfigManager.disableNetwork(result.getNetworkId(), com.android.server.wifi.WifiConfigManagerTest.TEST_UPDATE_UID)); retrievedStatus = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()).getNetworkSelectionStatus(); assertTrue(retrievedStatus.isNetworkEnabled()); assertEquals(WifiConfiguration.Status.ENABLED, retrievedNetwork.status); }
android.content.pm.ActivityInfo resolveActivity(android.content.Intent intent, java.lang.String resolvedType, int startFlags, android.app.ProfilerInfo profilerInfo, int userId) { android.content.pm.ActivityInfo aInfo; try { android.content.pm.ResolveInfo rInfo = android.app.AppGlobals.getPackageManager().resolveIntent(intent, resolvedType, ((android.content.pm.PackageManager.MATCH_DEFAULT_ONLY) | (ActivityManagerService.STOCK_PM_FLAGS)), userId); aInfo = (rInfo != null) ? rInfo.activityInfo : null; } catch (android.os.RemoteException e) { aInfo = null; } if (aInfo != null) { intent.setComponent(new android.content.ComponentName(aInfo.applicationInfo.packageName, aInfo.name)); if ((startFlags & (android.app.ActivityManager.START_FLAG_DEBUG)) != 0) { if (!(aInfo.processName.equals("system"))) { mService.setDebugApp(aInfo.processName, true, false); } } if ((startFlags & (android.app.ActivityManager.START_FLAG_OPENGL_TRACES)) != 0) { if (!(aInfo.processName.equals("system"))) { mService.setOpenGlTraceApp(aInfo.applicationInfo, aInfo.processName); } } if (profilerInfo != null) { if (!(aInfo.processName.equals("system"))) { mService.setProfileApp(aInfo.applicationInfo, aInfo.processName, profilerInfo); } } } return aInfo; }

public void createAndroidTasks() { variantFactory.validateModel(this); variantFactory.preVariantWork(project); final com.android.build.gradle.internal.TaskFactory tasks = new com.android.build.gradle.internal.TaskContainerAdaptor(project.getTasks()); if (variantDataList.isEmpty()) { populateVariantDataList(); } com.android.builder.profile.ThreadRecorder.get().record(ExecutionType.VARIANT_MANAGER_CREATE_TESTS_TASKS, new com.android.builder.profile.Recorder.Block<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { taskManager.createTopLevelTestTasks(tasks, (!(productFlavors.isEmpty()))); return null; } }); for (final com.android.build.gradle.internal.variant.BaseVariantData<? extends com.android.build.gradle.internal.variant.BaseVariantOutputData> variantData : variantDataList) { com.android.build.gradle.internal.profile.SpanRecorders.record(project, ExecutionType.VARIANT_MANAGER_CREATE_TASKS_FOR_VARIANT, new com.android.builder.profile.Recorder.Block<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { createTasksForVariantData(tasks, variantData); return null; } }, new com.android.builder.profile.Recorder.Property(com.android.build.gradle.internal.profile.SpanRecorders.VARIANT, variantData.getName())); } createApiObjects(); taskManager.createReportTasks(variantDataList); }


public com.android.sdklib.internal.repository.packages.Package.UpdateInfo canBeUpdatedBy(com.android.sdklib.internal.repository.packages.Package replacementPackage) { if (replacementPackage == null) { return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.INCOMPATIBLE; } if ((sameItemAs(replacementPackage)) == false) { return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.INCOMPATIBLE; } if ((replacementPackage.getRevision()) > (this.getRevision())) { return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.UPDATE; } return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.NOT_UPDATE; }

public void test_DomainMatches() { boolean match = java.net.HttpCookie.domainMatches("hostname", "hostname"); assertFalse(match); match = java.net.HttpCookie.domainMatches(".com", "test.com"); assertFalse(match); match = java.net.HttpCookie.domainMatches(".com.", "test.com"); assertFalse(match); match = java.net.HttpCookie.domainMatches(".local", "hostname"); assertTrue(match); match = java.net.HttpCookie.domainMatches(".c.d", "a.b.c.d"); assertTrue(match); match = java.net.HttpCookie.domainMatches("c.d", "a.b.c.d"); assertFalse(match); match = java.net.HttpCookie.domainMatches(".foo.com", "y.x.foo.com"); assertTrue(match); match = java.net.HttpCookie.domainMatches(".foo.com", "x.foo.com"); assertTrue(match); match = java.net.HttpCookie.domainMatches(".local", "hostname.local"); assertTrue(match); match = java.net.HttpCookie.domainMatches(".ajax.com", "a.ajax.com"); assertTrue(match); match = java.net.HttpCookie.domainMatches(".ajax.com", "a.AJAX.com"); assertTrue(match); match = java.net.HttpCookie.domainMatches("...", "test..."); assertFalse(match); match = java.net.HttpCookie.domainMatches(".ajax.com", "b.a.AJAX.com"); assertTrue(match); match = java.net.HttpCookie.domainMatches(".a", "b.a"); assertFalse(match); match = java.net.HttpCookie.domainMatches(".ajax.com", null); assertFalse(match); match = java.net.HttpCookie.domainMatches(null, null); assertFalse(match); match = java.net.HttpCookie.domainMatches(null, "b.a.AJAX.com"); assertFalse(match); }

@java.lang.Override public java.lang.String getContentType() { try { if (!(connected)) { connect(); } } catch (java.io.IOException e) { return "content/unknown"; } if (isDir) { return "text/plain"; } java.lang.String result = java.net.URLConnection.guessContentTypeFromName(url.getFile()); if (result != null) { return result; } try { result = java.net.URLConnection.guessContentTypeFromStream(is); } catch (java.io.IOException e) { } if (result != null) { return result; } return "content/unknown"; }




void setBounds(android.graphics.Rect bounds) { mBounds.set(bounds); if ((isDimming()) && (!(mLastBounds.equals(bounds)))) { adjustSurface(mLayer, false); } }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mWifiWakeupEnabledOriginalValue = Settings.Global.getInt(mContentResolver, Settings.Global.WIFI_WAKEUP_ENABLED, 0); mAirplaneModeOriginalValue = Settings.Global.getInt(mContentResolver, Settings.Global.AIRPLANE_MODE_ON, 0); Settings.Global.putInt(mContentResolver, Settings.Global.WIFI_WAKEUP_ENABLED, 1); Settings.Global.putInt(mContentResolver, Settings.Global.AIRPLANE_MODE_ON, 0); mWifiWakeupController = new com.android.networkrecommendation.WifiWakeupController(mContext, mContentResolver, android.os.Looper.getMainLooper(), mWifiManager, mWifiWakeupNetworkSelector); mWifiWakeupController.start(); verify(mContext).registerReceiver(mBroadcastReceiverCaptor.capture(), any(android.content.IntentFilter.class), anyString(), any(android.os.Handler.class)); mBroadcastReceiver = mBroadcastReceiverCaptor.getValue(); com.android.networkrecommendation.Util.sendWifiApStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_AP_STATE_DISABLED); }


public final int getCompositeSize() { com.android.tools.perflib.heap.Instance.CollectingVisitor visitor = new com.android.tools.perflib.heap.Instance.CollectingVisitor(); this.accept(visitor); int size = 0; for (com.android.tools.perflib.heap.Instance instance : visitor.getVisited()) { size += instance.getSize(); } return size; }

public void testProcFiles() throws android.system.ErrnoException, java.io.IOException, java.lang.NumberFormatException { for (java.lang.String sysctl : android.net.cts.MultinetworkSysctlTest.GLOBAL_SYSCTLS) { checkSysctlPermissions(sysctl); int value = java.lang.Integer.parseInt(readFile(sysctl).trim()); assertEquals((("value of " + sysctl) + ":"), 1, value); } java.io.File[] interfaceDirs = new java.io.File(android.net.cts.MultinetworkSysctlTest.IPV6_SYSCTL_DIR).listFiles(); for (java.io.File interfaceDir : interfaceDirs) { if ((interfaceDir.getName().equals("all")) || (interfaceDir.getName().equals("lo"))) { continue; } java.lang.String sysctl = new java.io.File(interfaceDir, android.net.cts.MultinetworkSysctlTest.AUTOCONF_SYSCTL).getAbsolutePath(); checkSysctlPermissions(sysctl); int value = java.lang.Integer.parseInt(readFile(sysctl).trim()); assertLess((("value of " + sysctl) + ":"), value, 0); } }
@org.junit.Test public void if_lt() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(IF_LT).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }
public static long getMobileTxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { total += android.net.TrafficStats.getTxBytes(iface); } return total; }

public int poll(libcore.io.StructPollfd[] fds, int timeoutMs) throws libcore.io.ErrnoException;
public java.nio.channels.FileChannel position(long newPosition) throws java.io.IOException { checkOpen(); if (newPosition < 0) { throw new java.lang.IllegalArgumentException(("position: " + newPosition)); } try { Libcore.os.lseek(fd, newPosition, java.nio.SEEK_SET); } catch (libcore.io.ErrnoException errnoException) { throw errnoException.rethrowAsIOException(); } return this; }

public native java.io.FileDescriptor dup2(java.io.FileDescriptor oldFd, int newFd) throws android.system.ErrnoException;
public void testZipFileLargerThan2GiB() throws java.io.IOException { if (false) { java.io.File f = createZipFile(1024, ((3 * 1024) * 1024)); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); int entryCount = 0; for (java.util.Enumeration<? extends java.util.zip.ZipEntry> e = zipFile.entries(); e.hasMoreElements();) { java.util.zip.ZipEntry zipEntry = e.nextElement(); ++entryCount; } assertEquals(1024, entryCount); zipFile.close(); } }

private static void TestLinkerMethodMultipleArgumentTypes() throws java.lang.Throwable { byte[] base64Data = TestDataLinkerMethodMultipleArgumentTypes.BASE64_DEX_FILE.getBytes(); java.util.Base64.Decoder decoder = java.util.Base64.getDecoder(); java.nio.ByteBuffer dexBuffer = java.nio.ByteBuffer.wrap(decoder.decode(base64Data)); dalvik.system.InMemoryDexClassLoader classLoader = new dalvik.system.InMemoryDexClassLoader(dexBuffer, java.lang.ClassLoader.getSystemClassLoader()); java.lang.Class<?> testClass = classLoader.loadClass("TestLinkerMethodMultipleArgumentTypes"); java.lang.reflect.Method testMethod = testClass.getDeclaredMethod("test", int.class, int.class); testMethod.invoke(null, 33, 67); testMethod.invoke(null, (-10000), (+1000)); testMethod.invoke(null, (-1000), (+10000)); }

@org.junit.Test public void testSetWifiDisabledNoToggle() throws java.lang.Exception { when(mSettingsStore.handleWifiToggled(eq(false))).thenReturn(false); assertTrue(mWifiServiceImpl.setWifiEnabled(com.android.server.wifi.WifiServiceImplTest.TEST_PACKAGE_NAME, false)); verify(mWifiController, never()).obtainMessageAndSend(eq(com.android.server.wifi.WifiController.CMD_WIFI_TOGGLED)); }
private void addListener(java.util.List<org.junit.runner.notification.RunListener> list, org.junit.runner.JUnitCore testRunner, org.junit.runner.notification.RunListener listener) { list.add(listener); testRunner.addListener(listener); }
private void restoreDefaultAPN(int subId) { android.database.sqlite.SQLiteDatabase db = getWritableDatabase(); try { db.delete(com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE, com.android.providers.telephony.TelephonyProvider.IS_NOT_OWNED_BY_DPC, null); } catch (android.database.SQLException e) { com.android.providers.telephony.TelephonyProvider.loge(("got exception when deleting to restore: " + e)); } android.content.SharedPreferences spApnId = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApnId = spApnId.edit(); editorApnId.clear(); editorApnId.apply(); android.content.SharedPreferences spApn = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_FULL_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApn = spApn.edit(); editorApn.clear(); editorApn.apply(); if (com.android.providers.telephony.TelephonyProvider.apnSourceServiceExists(getContext())) { restoreApnsWithService(); } else { initDatabaseWithDatabaseHelper(db); } }
@java.lang.Override public void run() { com.android.monkeyrunner.core.IMonkeyBackend adb = new com.android.monkeyrunner.adb.AdbBackend(); final com.android.monkeyrunner.core.IMonkeyDevice device = adb.waitForConnection(); com.android.monkeyrunner.controller.MonkeyControllerFrame mf = new com.android.monkeyrunner.controller.MonkeyControllerFrame(device); mf.setVisible(true); mf.addWindowListener(new java.awt.event.WindowAdapter() { @java.lang.Override public void windowClosed(java.awt.event.WindowEvent e) { device.dispose(); } }); }
@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JThrowStatement throwStmt) { super.visit(throwStmt); com.android.jack.cfg.ThrowBasicBlock throwBlock = new com.android.jack.cfg.ThrowBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(throwBlock); forwardBranchResolver.addPeiBasicBlock(throwBlock, null, throwStmt.getJCatchBlocks()); throwBlock.setExitBlockWhenUncaught(exitBlock); return false; }

public void testSocket_Block_BasicStatusAfterConnect() throws java.io.IOException { this.channel1.connect(localAddr1); java.net.DatagramSocket s1 = this.channel1.socket(); assertSocketAfterConnect(s1); java.net.DatagramSocket s2 = this.channel1.socket(); assertSame(s1, s2); }
public void test_addAttributesLjava_util_MapII() { java.text.AttributedString as = new java.text.AttributedString("test"); java.util.Map<java.text.AttributedCharacterIterator.Attribute, java.lang.String> whm = new java.util.WeakHashMap<java.text.AttributedCharacterIterator.Attribute, java.lang.String>(); try { whm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute("test1"), "value1"); whm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute("test2"), "value2"); whm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute("test3"), "value3"); as.addAttributes(whm, 0, 3); } catch (java.lang.Exception e) { fail(("Unexpected exception " + (e.toString()))); } try { as.addAttributes(null, 0, 3); fail("Expected NullPointerException was not thrown"); } catch (java.lang.NullPointerException e) { } try { as.addAttributes(whm, 0, 0); fail("Expected IllegalArgumentException was not thrown"); } catch (java.lang.IllegalArgumentException e) { } }
public static android.support.v8.renderscript.ScriptIntrinsicBlur create(android.support.v8.renderscript.RenderScript rs, android.support.v8.renderscript.Element e) { if ((!(e.isCompatible(android.support.v8.renderscript.Element.U8_4(rs)))) && (!(e.isCompatible(android.support.v8.renderscript.Element.U8(rs))))) { throw new android.support.v8.renderscript.RSIllegalArgumentException("Unsuported element type."); } long id = rs.nScriptIntrinsicCreate(5, e.getID(rs)); android.support.v8.renderscript.ScriptIntrinsicBlur sib = new android.support.v8.renderscript.ScriptIntrinsicBlur(id, rs); sib.setRadius(5.0F); return sib; }
@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCatchBlock block) { if (!(currentStmts.isEmpty())) { com.android.jack.cfg.NormalBasicBlock endOfBlock = new com.android.jack.cfg.NormalBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(endOfBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(block); if (nextStatement != null) { forwardBranchResolver.addNormalBasicBlock(endOfBlock, nextStatement); } } }
private static void initPython(java.util.Collection<java.lang.String> pythonPath, java.lang.String[] argv) { java.util.Properties props = new java.util.Properties(); java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(java.lang.System.getProperty("java.class.path")); for (java.lang.String p : pythonPath) { sb.append(":").append(p); } props.setProperty("python.path", sb.toString()); props.setProperty("python.verbose", "error"); org.python.util.PythonInterpreter.initialize(java.lang.System.getProperties(), props, argv); }
public void retainSubscriptionsForFactoryReset(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().retainSubscriptionsForFactoryReset(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@org.junit.Test public void testMalformedVenueNameElementBytes() { for (byte[] invalidBytes : com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.MALFORMED_VENUE_NAME_ELEMENT_BYTES) { try { com.android.server.wifi.hotspot2.anqp.VenueNameElement venueNameElement = new com.android.server.wifi.hotspot2.anqp.VenueNameElement(Constants.ANQPElementType.ANQPVenueName, java.nio.ByteBuffer.wrap(invalidBytes).order(java.nio.ByteOrder.LITTLE_ENDIAN)); } catch (java.net.ProtocolException e) { continue; } fail(("Expected exception while parsing malformed Venue Name Element bytes: " + invalidBytes)); } }
public void append() { runOnUiThread(new java.lang.Runnable() { @java.lang.Override public void run() { mLogLayout.addView(mView); mLogScrollView.post(new java.lang.Runnable() { @java.lang.Override public void run() { mLogScrollView.fullScroll(View.FOCUS_DOWN); } }); } }); }





public void pushFile(java.lang.String local, java.lang.String remote, com.android.ddmlib.SyncService.ISyncProgressMonitor monitor) throws com.android.ddmlib.SyncException, com.android.ddmlib.TimeoutException, java.io.IOException { java.io.File f = new java.io.File(local); if (!(f.exists())) { throw new com.android.ddmlib.SyncException(com.android.ddmlib.SyncException.SyncError.NO_LOCAL_FILE); } if (f.isDirectory()) { throw new com.android.ddmlib.SyncException(com.android.ddmlib.SyncException.SyncError.LOCAL_IS_DIRECTORY); } monitor.start(((int) (f.length()))); doPushFile(local, remote, monitor); monitor.stop(); }

@java.lang.Override public void handleMessage(android.os.Message msg) { if ((msg.what) != (com.android.bluetooth.avrcp.MediaPlayerWrapper.TimeoutHandler.MSG_TIMEOUT)) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("Unknown message on timeout handler: " + (msg.what))); return; } android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("Timeout while waiting for metadata to sync for " + (mPackageName))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (" └ Current Metadata: " + (getMetadata().getDescription()))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (" └ Current Playstate: " + (getPlaybackState()))); for (int i = 0; ((getQueue()) != null) && (i < (getQueue().size())); i++) { android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (((" └ QueueItem(" + i) + "): ") + (getQueue().get(i)))); } if (com.android.bluetooth.avrcp.MediaPlayerWrapper.sTesting) android.util.Log.wtfStack(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, "Crashing the stack"); }


public native libcore.io.StructStat lstat(java.lang.String path) throws libcore.io.ErrnoException;
public native void lchown(java.lang.String path, int uid, int gid) throws libcore.io.ErrnoException;
@java.lang.Override public void close() throws java.io.IOException { synchronized(handshakeLock) { if (!(handshakeStarted)) { handshakeStarted = true; synchronized(this) { free(); if ((socket) != (this)) { if ((autoClose) && (!(socket.isClosed()))) { socket.close(); } } else { if (!(super.isClosed())) { super.close(); } } } return; } } synchronized(this) { org.conscrypt.NativeCrypto.SSL_interrupt(sslNativePointer); synchronized(writeLock) { synchronized(readLock) { try { if (handshakeStarted) { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); org.conscrypt.NativeCrypto.SSL_shutdown(sslNativePointer, socket.getFileDescriptor$(), this); } } catch (java.io.IOException ignored) { } finally { free(); if ((socket) != (this)) { if ((autoClose) && (!(socket.isClosed()))) { socket.close(); } } else { if (!(super.isClosed())) { super.close(); } } } } } } }



int runJavaDoc() throws java.io.IOException, java.lang.InterruptedException { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add("javadoc"); args.add("-doclet"); args.add("com.android.cts.javascannerdoclet.CtsJavaScannerDoclet"); args.add("-docletpath"); args.add(mDocletPath.toString()); args.add("-sourcepath"); args.add(getSourcePath(mSourceDir)); args.add("-classpath"); args.add(getClassPath()); args.addAll(getSourceFiles(mSourceDir)); java.lang.Process process = new java.lang.ProcessBuilder(args).start(); java.util.Scanner scanner = null; try { scanner = new java.util.Scanner(process.getInputStream()); while (scanner.hasNextLine()) { java.lang.System.out.println(scanner.nextLine()); } } finally { if (scanner != null) { scanner.close(); } } return process.waitFor(); }

com.android.apksig.internal.apk.v2.ContentDigestAlgorithm getContentDigestAlgorithm() { return mContentDigestAlgorithm; }



public java.lang.String getAdvMacAddress() { return mAdvMacAddress; }
@android.annotation.Nullable private static java.lang.String getCarrierImsPackage(android.content.Context context, com.android.internal.telephony.Phone phone) { android.telephony.CarrierConfigManager cm = ((android.telephony.CarrierConfigManager) (context.getSystemService(Context.CARRIER_CONFIG_SERVICE))); if (cm == null) { android.telephony.Rlog.e(com.android.internal.telephony.CarrierSmsUtils.TAG, "Failed to retrieve CarrierConfigManager"); return null; } android.os.PersistableBundle config = cm.getConfigForSubId(phone.getSubId()); if (config == null) { if (com.android.internal.telephony.CarrierSmsUtils.VDBG) android.telephony.Rlog.v(com.android.internal.telephony.CarrierSmsUtils.TAG, ("No CarrierConfig for subId:" + (phone.getSubId()))); return null; } return config.getString(com.android.internal.telephony.CarrierSmsUtils.CARRIER_IMS_PACKAGE_KEY, null); }
@com.android.annotations.NonNull static com.android.build.gradle.internal.model.BuildTypeImpl cloneBuildType(com.android.builder.model.BuildType buildType) { com.android.build.gradle.internal.model.BuildTypeImpl clonedBuildType = new com.android.build.gradle.internal.model.BuildTypeImpl(); clonedBuildType.name = buildType.getName(); clonedBuildType.debuggable = buildType.isDebuggable(); clonedBuildType.jniDebugBuild = buildType.isJniDebugBuild(); clonedBuildType.renderscriptDebugBuild = buildType.isRenderscriptDebugBuild(); clonedBuildType.renderscriptOptimLevel = buildType.getRenderscriptOptimLevel(); clonedBuildType.packageNameSuffix = buildType.getPackageNameSuffix(); clonedBuildType.versionNameSuffix = buildType.getVersionNameSuffix(); clonedBuildType.runProguard = buildType.isRunProguard(); clonedBuildType.zipAlign = buildType.isZipAlign(); return clonedBuildType; }
@java.lang.Override @javax.annotation.CheckForNull public com.android.jack.library.JarLibrary checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) throws com.android.sched.util.codec.ParsingException { com.android.sched.util.file.InputZipFile inputZipFile; try { inputZipFile = new com.android.sched.util.file.InputZipFile(context.getWorkingDirectory(), string, context.getRunnableHooks(), existence, change); } catch (com.android.sched.util.file.NotFileException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } catch (com.android.sched.util.file.NoSuchFileException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } catch (com.android.sched.util.file.WrongPermissionException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } catch (com.android.sched.util.file.FileAlreadyExistsException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.CannotChangePermissionException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } catch (com.android.sched.util.file.ZipException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } return new com.android.jack.library.JarLibrary(inputZipFile); }
private java.lang.String ipSupport() { if ((prevIPv4) && (prevIPv6)) { return "DUAL"; } if (prevIPv6) { return "IPv6"; } if (prevIPv4) { return "IPv4"; } return "NONE"; }
public static void setEnabled(boolean enabled) { dalvik.system.CloseGuard.ENABLED = enabled; }
private void outputYear(int value, boolean outputTop, boolean outputBottom, int modifier) { int lead; int trail; final int DIVISOR = 100; trail = value % DIVISOR; lead = (value / DIVISOR) + (trail / DIVISOR); trail %= DIVISOR; if ((trail < 0) && (lead > 0)) { trail += DIVISOR; --lead; } else if ((lead < 0) && (trail > 0)) { trail -= DIVISOR; ++lead; } if (outputTop) { if ((lead == 0) && (trail < 0)) { modifyAndAppend("-0", modifier); } else { outputFormatter.format(android.text.format.TimeFormatter.getFormat(modifier, "%02d", "%2d", "%d", "%02d"), lead); } } if (outputBottom) { int n = (trail < 0) ? -trail : trail; outputFormatter.format(android.text.format.TimeFormatter.getFormat(modifier, "%02d", "%2d", "%d", "%02d"), n); } }
public void handleOnBootPhase() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "Bluetooth boot completed"); } android.os.UserManagerInternal userManagerInternal = com.android.server.LocalServices.getService(android.os.UserManagerInternal.class); userManagerInternal.addUserRestrictionsListener(mUserRestrictionsListener); final boolean isBluetoothDisallowed = isBluetoothDisallowed(); if (isBluetoothDisallowed) { return; } if ((mEnableExternal) && (isBluetoothPersistedStateOnBluetooth())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "Auto-enabling Bluetooth."); } sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_SYSTEM_BOOT); } else if (!(isNameAndAddressSet())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "Getting adapter name and address"); } android.os.Message getMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_GET_NAME_AND_ADDRESS); mHandler.sendMessage(getMsg); } }
@java.lang.Override public boolean onPrepareOptionsMenu(android.view.Menu menu) { super.onPrepareOptionsMenu(menu); boolean hasSelection = (getSelectedItemPosition()) >= 0; menu.findItem(com.android.phone.settings.fdn.FdnList.MENU_ADD).setVisible(true); menu.findItem(com.android.phone.settings.fdn.FdnList.MENU_EDIT).setVisible(hasSelection); menu.findItem(com.android.phone.settings.fdn.FdnList.MENU_DELETE).setVisible(hasSelection); return true; }
public void testFileContexts() throws java.lang.Exception { java.lang.ProcessBuilder pb = new java.lang.ProcessBuilder(checkFc.getAbsolutePath(), devicePolicyFile.getAbsolutePath(), deviceFcFile.getAbsolutePath()); pb.redirectOutput(java.lang.ProcessBuilder.Redirect.PIPE); pb.redirectErrorStream(true); java.lang.Process p = pb.start(); p.waitFor(); java.io.BufferedReader result = new java.io.BufferedReader(new java.io.InputStreamReader(p.getInputStream())); java.lang.String line; java.lang.StringBuilder errorString = new java.lang.StringBuilder(); while ((line = result.readLine()) != null) { errorString.append(line); errorString.append("\n"); } assertTrue(("The file_contexts file was invalid:\n" + errorString), ((errorString.length()) == 0)); }

native boolean nLoadSO(boolean useNative);
@org.junit.Test public void testConstructorReferenceBinding() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_10).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }
void copy2DRangeToUnchecked(int xoff, int yoff, int w, int h, java.lang.Object array, android.renderscript.Element.DataType dt, int arrayLen) { android.os.Trace.traceBegin(RenderScript.TRACE_TAG, "copy2DRangeToUnchecked"); mRS.validate(); validate2DRange(xoff, yoff, w, h); mRS.nAllocationRead2D(getIDSafe(), xoff, yoff, mSelectedLOD, mSelectedFace.mID, w, h, array, (arrayLen * (dt.mSize)), dt); android.os.Trace.traceEnd(RenderScript.TRACE_TAG); }
@java.lang.Override public void addAllMarkers(@javax.annotation.Nonnull java.util.Collection<com.android.sched.marker.Marker> collection) { ensureMap(); for (com.android.sched.marker.Marker marker : collection) { assert isValidMarker(marker) : ((("Marker '" + (com.android.sched.item.Items.getName(marker.getClass()))) + "' is not supported for class '") + (this.getClass().getName())) + "'"; assert (markers) != null; markers.put(marker.getClass(), marker); } }

public void test_getDisplayScript() { java.util.Locale.Builder b = new java.util.Locale.Builder(); b.setLanguage("en").setRegion("US").setScript("Latn"); java.util.Locale l = b.build(); java.util.Locale.setDefault(java.util.Locale.US); assertEquals("Latin", l.getDisplayScript()); assertEquals("Lateinisch", l.getDisplayScript(java.util.Locale.GERMAN)); assertEquals("Latin", l.getDisplayScript(new java.util.Locale("nv", "US"))); b = new java.util.Locale.Builder(); b.setLanguage("en").setRegion("US").setScript("Fooo"); l = b.build(); assertEquals("Fooo", l.getDisplayScript()); }
@java.lang.Override @com.android.annotations.NonNull public java.lang.String readFile(@com.android.annotations.NonNull java.io.File f) { org.eclipse.core.resources.IFile file = com.android.ide.eclipse.adt.AdtUtils.fileToIFile(f); if ((file == null) || (!(file.exists()))) { java.lang.String path = f.getPath(); com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, "Can't find file %1$s in workspace", path); return readPlainFile(f); } if (com.android.ide.eclipse.adt.AdtUtils.endsWithIgnoreCase(file.getName(), com.android.SdkConstants.DOT_XML)) { org.eclipse.wst.sse.core.internal.provisional.IStructuredModel model = null; try { org.eclipse.wst.sse.core.internal.provisional.IModelManager modelManager = org.eclipse.wst.sse.core.StructuredModelManager.getModelManager(); model = modelManager.getModelForRead(file); return model.getStructuredDocument().get(); } catch (java.io.IOException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, "Cannot read XML file"); } catch (org.eclipse.core.runtime.CoreException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, null); } finally { if (model != null) { model.releaseFromRead(); } } } return readPlainFile(f); }
@java.lang.Override public java.lang.String toString() { return new java.lang.StringBuilder().append("{socket=").append(socket).append(", transform=").append(transform).append(", spi=").append(spi).append("}").toString(); }

public native void setBoolean(java.lang.Object object, boolean value) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
public void postForkChild(int debugFlags) { dalvik.system.ZygoteHooks.nativePostForkChild(token, debugFlags); }




@org.junit.Test public void testProcessInitProfilePriorities() { android.bluetooth.BluetoothAdapter inst = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); android.bluetooth.BluetoothDevice device = inst.getRemoteDevice("00:01:02:03:04:05"); com.android.bluetooth.btservice.AdapterService mockAdapterService = mock(com.android.bluetooth.btservice.AdapterService.class); com.android.bluetooth.btservice.ServiceFactory mockServiceFactory = mock(com.android.bluetooth.btservice.ServiceFactory.class); com.android.bluetooth.hfp.HeadsetService mockHeadsetService = mock(com.android.bluetooth.hfp.HeadsetService.class); com.android.bluetooth.a2dp.A2dpService mockA2dpService = mock(com.android.bluetooth.a2dp.A2dpService.class); when(mockServiceFactory.getHeadsetService()).thenReturn(mockHeadsetService); when(mockHeadsetService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_UNDEFINED); when(mockServiceFactory.getA2dpService()).thenReturn(mockA2dpService); when(mockA2dpService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_UNDEFINED); when(mockAdapterService.getMainLooper()).thenReturn(mHandlerThread.getLooper()); when(mockAdapterService.isMock()).thenReturn(true); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mockAdapterService, mockServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_UUID); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); android.os.ParcelUuid[] uuids = new android.os.ParcelUuid[2]; uuids[0] = android.bluetooth.BluetoothUuid.Handsfree; uuids[1] = android.bluetooth.BluetoothUuid.AudioSink; intent.putExtra(BluetoothDevice.EXTRA_UUID, uuids); injector.onReceive(null, intent); verify(mockHeadsetService, timeout(com.android.bluetooth.btservice.PhonePolicyTest.ASYNC_CALL_TIMEOUT).times(1)).setPriority(eq(device), eq(BluetoothProfile.PRIORITY_ON)); verify(mockA2dpService, timeout(com.android.bluetooth.btservice.PhonePolicyTest.ASYNC_CALL_TIMEOUT).times(1)).setPriority(eq(device), eq(BluetoothProfile.PRIORITY_ON)); }
@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) { for (com.android.sched.vfs.InputVElement sub : dir.list()) { if ((!(sub.isVDir())) && (isJackFileNameOf(sub.getName(), simpleName))) { try { return new com.android.jack.jayce.JayceClassOrInterfaceLoader(inputJackLibrary, loading, simpleName, ((com.android.sched.vfs.InputVFile) (sub)), lookup, defaultLoadLevel).load(); } catch (com.android.jack.LibraryException e) { com.android.jack.library.LibraryReadingException reportable = new com.android.jack.library.LibraryReadingException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, reportable); throw new com.android.jack.JackAbortException(reportable); } } } throw new com.android.jack.ir.ast.MissingJTypeLookupException(loading, simpleName); }
public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { com.android.internal.telephony.uicc.IccCardStatus.CardState oldState = mCardState; mCardState = ics.mCardState; mContext = c; mCi = ci; mIccid = ics.iccid; if ((mCardState) != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = new com.android.internal.telephony.uicc.UiccProfile(mContext, mCi, ics, mPhoneId, this); } else { mUiccProfile.update(mContext, mCi, ics); } } else { throw new java.lang.RuntimeException("Card state is absent when updating!"); } } }
@java.lang.Override public void supplyIccPin2ForApp(java.lang.String pin, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_ENTER_SIM_PIN2, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " aid = ") + aid)); } try { radioProxy.supplyIccPin2ForApp(rr.mSerial, convertNullToEmptyString(pin), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "supplyIccPin2ForApp", e); } } }

@java.lang.Override public boolean startSingleScan(com.android.server.wifi.WifiNative.ScanSettings settings, com.android.server.wifi.WifiNative.ScanEventHandler eventHandler) { if ((eventHandler == null) || (settings == null)) { android.util.Log.w(com.android.server.wifi.scanner.SupplicantWifiScannerImpl.TAG, ((("Invalid arguments for startSingleScan: settings=" + settings) + ",eventHandler=") + eventHandler)); return false; } if (((mPendingSingleScanSettings) != null) || (((mLastScanSettings) != null) && (mLastScanSettings.singleScanActive))) { android.util.Log.w(com.android.server.wifi.scanner.SupplicantWifiScannerImpl.TAG, "A single scan is already running"); return false; } synchronized(mSettingsLock) { mPendingSingleScanSettings = settings; mPendingSingleScanEventHandler = eventHandler; processPendingScans(); return true; } }

public void testAllTypes() { com.android.manifmerger.MergingReport mergingReport = new com.android.manifmerger.MergingReport.Builder(mLoggerMock).addInfo("merging info").addWarning("something weird happened").addError("something bad happened").build(); assertEquals(MergingReport.Result.ERROR, mergingReport.getResult()); }

@org.junit.Test(expected = java.lang.IllegalStateException.class) public void testClear() throws java.lang.Exception { final com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String> cache = new com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String>(new com.android.ide.common.caching.CreatingCacheTest.DelayedFactory()); new java.lang.Thread() { @java.lang.Override public void run() { cache.get("foo"); } }.start(); java.lang.Thread.sleep(1000); cache.clear(); }
public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }




public void testVolumeDndAffectedStream() throws java.lang.Exception { if (((mUseFixedVolume) || (mHasVibrator)) || (mIsTelevision)) { return; } android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 7, AudioManager.FLAG_ALLOW_RINGER_MODES); mAudioManager.setRingerMode(AudioManager.RINGER_MODE_NORMAL); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), false); try { mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 0, AudioManager.FLAG_ALLOW_RINGER_MODES); fail("Apps without notification policy access cannot change ringer mode"); } catch (java.lang.SecurityException e) { } mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 1, AudioManager.FLAG_ALLOW_RINGER_MODES); assertEquals("setStreamVolume did not change volume", 1, mAudioManager.getStreamVolume(AudioManager.STREAM_SYSTEM)); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setRingerMode(AudioManager.RINGER_MODE_SILENT); mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 0, AudioManager.FLAG_ALLOW_RINGER_MODES); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), false); try { mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 6, AudioManager.FLAG_ALLOW_RINGER_MODES); fail("Apps without notification policy access cannot change ringer mode"); } catch (java.lang.SecurityException e) { } }
public void run() { if ((threadIndex) == 0) { for (int i = 0; i < (Main.totalOperations); ++i) { if ((i % 50) == 0) { Main.deoptimizeAll(); } if ((i % 50) == 25) { Main.undeoptimizeAll(); } } Main.done = true; } else { while (!(Main.done)) { $noinline$run0(); } } }


public android.system.StructStatVfs statvfs(java.lang.String path) throws android.system.ErrnoException;
public void retrieveNotificationList(java.lang.String cardId, @android.telephony.euicc.EuiccNotification.Event int events, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification[]> callback) { try { getIEuiccCardController().retrieveNotificationList(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.euicc.IRetrieveNotificationListCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification[] notifications) { callback.onComplete(resultCode, notifications); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling retrieveNotificationList", e); throw e.rethrowFromSystemServer(); } }

public java.net.InetAddress getsockoptInAddr(java.io.FileDescriptor fd, int level, int option) throws libcore.io.ErrnoException { return os.getsockoptInAddr(fd, level, option); }
@org.junit.Test public void testMacAddressRandomGeneration() { final int iterations = 1000; final java.lang.String expectedAndroidOui = "da:a1:19"; for (int i = 0; i < iterations; i++) { android.net.MacAddress mac = android.net.MacAddress.getRandomAddress(); java.lang.String stringRepr = mac.toString(); assertTrue((stringRepr + " expected to be a locally assigned address"), mac.isLocallyAssigned()); assertTrue(((stringRepr + " expected to begin with ") + expectedAndroidOui), stringRepr.startsWith(expectedAndroidOui)); } final java.util.Random r = new java.util.Random(); final java.lang.String anotherOui = "24:5f:78"; final java.lang.String expectedLocalOui = "26:5f:78"; final android.net.MacAddress base = new android.net.MacAddress((anotherOui + ":0:0:0")); for (int i = 0; i < iterations; i++) { android.net.MacAddress mac = android.net.MacAddress.getRandomAddress(base, r); java.lang.String stringRepr = mac.toString(); assertTrue((stringRepr + " expected to be a locally assigned address"), mac.isLocallyAssigned()); assertTrue(((stringRepr + " expected to begin with ") + expectedLocalOui), stringRepr.startsWith(expectedLocalOui)); } }


@java.lang.Override @com.android.annotations.NonNull public com.android.build.gradle.internal.variant.ApplicationVariantData createVariantData(@com.android.annotations.NonNull com.android.builder.core.VariantConfiguration variantConfiguration, @com.android.annotations.NonNull java.util.Set<java.lang.String> densities, @com.android.annotations.NonNull java.util.Set<java.lang.String> abis, @com.android.annotations.NonNull java.util.Set<java.lang.String> compatibleScreens) { com.android.build.gradle.internal.variant.ApplicationVariantData variant = new com.android.build.gradle.internal.variant.ApplicationVariantData(basePlugin, variantConfiguration); if (!(densities.isEmpty())) { variant.setCompatibleScreens(compatibleScreens); } if ((variant.getSplitHandlingPolicy()) == (BaseVariantData.SplitHandlingPolicy.PRE_21_POLICY)) { for (java.lang.String density : densities) { for (java.lang.String abi : abis) { variant.createOutput(density, abi); } } } else { variant.createOutput(null, null); } return variant; }

public int recvfrom(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, int flags, java.net.InetSocketAddress srcAddress) throws java.net.SocketException, libcore.io.ErrnoException { return os.recvfrom(fd, buffer, flags, srcAddress); }
public native android.system.StructUtsname uname();
@java.lang.Override @javax.annotation.Nonnull java.io.InputStream openRead(@javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVFile file) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.READ); VFSStatCategory.DIR_READ.getCounterStat(getTracer(), infoString).incValue(); java.io.File path = getNativeFile(file.getPath()); try { return new java.io.FileInputStream(path); } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.READ); throw new com.android.sched.util.ConcurrentIOException(e); } }
private void addImportedResource(@javax.annotation.Nonnull com.android.sched.vfs.InputVFile file, @javax.annotation.Nonnull com.android.jack.ir.ast.JSession session, @javax.annotation.Nonnull java.lang.String currentPath) throws com.android.jack.backend.jayce.ResourceImportConflictException { com.android.sched.vfs.VPath path = new com.android.sched.vfs.VPath(currentPath, com.android.jack.backend.jayce.JayceFileImporter.VPATH_SEPARATOR); if (path.equals(JackLibrary.LIBRARY_PROPERTIES_VPATH)) { return; } com.android.jack.ir.ast.Resource newResource = new com.android.jack.ir.ast.Resource(path, file); for (com.android.jack.ir.ast.Resource existingResource : session.getResources()) { if (existingResource.getPath().equals(path)) { if ((resourceCollisionPolicy) == (com.android.jack.backend.jayce.JayceFileImporter.CollisionPolicy.FAIL)) { throw new com.android.jack.backend.jayce.ResourceImportConflictException(newResource.getLocation(), existingResource.getLocation()); } else { session.getUserLogger().log(java.util.logging.Level.INFO, "Resource in {0} has already been imported from {1}: ignoring import", new java.lang.Object[]{ newResource.getLocation().getDescription(), existingResource.getLocation().getDescription() }); } return; } } session.addResource(newResource); }
public boolean p2pSetChannel(int lc, int oc) { if (com.android.server.wifi.WifiNative.DBG) android.util.Log.d(mTAG, ((("p2pSetChannel: lc=" + lc) + ", oc=") + oc)); if ((com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.setListenChannel(lc, oc); } else { synchronized(com.android.server.wifi.WifiNative.sLock) { if ((lc >= 1) && (lc <= 11)) { if (!(doBooleanCommand(("P2P_SET listen_channel " + lc)))) { return false; } } else if (lc != 0) { return false; } if ((oc >= 1) && (oc <= 165)) { int freq = (oc <= 14 ? 2407 : 5000) + (oc * 5); return doBooleanCommand((((("P2P_SET disallow_freq 1000-" + (freq - 5)) + ",") + (freq + 5)) + "-6000")); } else if (oc == 0) { return doBooleanCommand("P2P_SET disallow_freq \"\""); } } return false; } }
@android.test.suitebuilder.annotation.SmallTest public void testParcelWithInvalidMccMnc() { final java.lang.String invalidMcc = "randomStuff"; final java.lang.String invalidMnc = "randomStuff"; android.telephony.CellIdentityWcdma ci = new android.telephony.CellIdentityWcdma(com.android.internal.telephony.CellIdentityWcdmaTest.LAC, com.android.internal.telephony.CellIdentityWcdmaTest.CID, com.android.internal.telephony.CellIdentityWcdmaTest.PSC, com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.LAC); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.CID); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.PSC); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN); p.writeString(invalidMcc); p.writeString(invalidMnc); p.setDataPosition(0); android.telephony.CellIdentityWcdma newCi = CellIdentityWcdma.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }

void testFloat4(com.android.rs.test.RenderScript rs, com.android.rs.test.ScriptC_copy_test s) { com.android.rs.test.Allocation a1 = com.android.rs.test.Allocation.createSized(rs, com.android.rs.test.Element.F32_4(rs), 1024); com.android.rs.test.Allocation a2 = com.android.rs.test.Allocation.createSized(rs, com.android.rs.test.Element.F32_4(rs), 1024); float[] f1 = new float[1024 * 4]; float[] f2 = new float[1024 * 4]; for (int ct = 0; ct < (f1.length); ct++) { f1[ct] = ((float) (ct)); } a1.copyFrom(f1); s.forEach_copyFloat4(a1, a2); a2.copyTo(f2); for (int ct = 0; ct < (f1.length); ct++) { if ((f1[ct]) != (f2[ct])) { failTest(); android.util.Log.v("RS Test", ((((("Compare failed at " + ct) + ", ") + (f1[ct])) + ", ") + (f2[ct]))); } } a1.destroy(); a2.destroy(); }



public void test_SSLSocket_getSSLParameters() throws java.lang.Exception { javax.net.ssl.SSLSocketFactory sf = ((javax.net.ssl.SSLSocketFactory) (javax.net.ssl.SSLSocketFactory.getDefault())); javax.net.ssl.SSLSocket ssl = ((javax.net.ssl.SSLSocket) (sf.createSocket())); javax.net.ssl.SSLParameters p = ssl.getSSLParameters(); assertNotNull(p); java.lang.String[] cipherSuites = p.getCipherSuites(); assertNotSame(cipherSuites, ssl.getEnabledCipherSuites()); assertEquals(java.util.Arrays.asList(cipherSuites), java.util.Arrays.asList(ssl.getEnabledCipherSuites())); java.lang.String[] protocols = p.getProtocols(); assertNotSame(protocols, ssl.getEnabledProtocols()); assertEquals(java.util.Arrays.asList(protocols), java.util.Arrays.asList(ssl.getEnabledProtocols())); assertEquals(p.getWantClientAuth(), ssl.getWantClientAuth()); assertEquals(p.getNeedClientAuth(), ssl.getNeedClientAuth()); }

@javax.annotation.Nonnull private void fillDependencies(@javax.annotation.Nonnull com.android.jack.library.InputJackLibrary library, @javax.annotation.Nonnull com.android.sched.vfs.VPath dependencyVPath, @javax.annotation.Nonnull com.android.jack.analysis.dependency.Dependency dependency) throws com.android.jack.library.FileTypeDoesNotExistException, com.android.sched.util.file.CannotReadException { com.android.sched.vfs.InputVFile dependenciesVFile = library.getFile(FileType.DEPENDENCIES, dependencyVPath); java.io.InputStreamReader fileReader = null; try { fileReader = new java.io.InputStreamReader(dependenciesVFile.getInputStream()); dependency.read(fileReader); } catch (java.util.NoSuchElementException e) { throw new com.android.sched.util.file.CannotReadException(dependenciesVFile, e); } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotReadException(dependenciesVFile, e); } finally { if (fileReader != null) { try { fileReader.close(); } catch (java.io.IOException e) { } } } }
public void testCerficateException() { try { java.security.cert.CertificateFactory cf = java.security.cert.CertificateFactory.getInstance("X.509"); java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(tests.security.cert.X509Certificate2Test.base64certTampered.getBytes()); cert = ((java.security.cert.X509Certificate) (cf.generateCertificate(bais))); } catch (java.security.cert.CertificateException e) { } try { java.security.cert.CertificateFactory cf = java.security.cert.CertificateFactory.getInstance("X.509"); java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(tests.security.cert.X509Certificate2Test.base64cert.getBytes()); cert = ((java.security.cert.X509Certificate) (cf.generateCertificate(bais))); } catch (java.security.cert.CertificateException e) { } }
public void testZipFileWithLotsOfEntries() throws java.io.IOException { int expectedEntryCount = (64 * 1024) - 1; java.io.File f = createZipFile(expectedEntryCount, 0); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); int entryCount = 0; for (java.util.Enumeration<? extends java.util.zip.ZipEntry> e = zipFile.entries(); e.hasMoreElements();) { java.util.zip.ZipEntry zipEntry = e.nextElement(); ++entryCount; } assertEquals(expectedEntryCount, entryCount); zipFile.close(); }
@java.lang.Override public boolean matches(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) { if (((annotationType) != null) && (!(annotationType.matches(type.getAnnotations())))) { return false; } if (((modifier) != null) && (!(modifier.matches(type)))) { return false; } if (!(classType.matches(type))) { return false; } if (!(name.matches(com.android.jack.shrob.proguard.GrammarActions.getSourceFormatter().getName(type)))) { return false; } if (((inheritance) != null) && (!(inheritance.matches(type)))) { return false; } return true; }
public native java.io.FileDescriptor dup(java.io.FileDescriptor oldFd) throws libcore.io.ErrnoException;
@com.android.annotations.Nullable public static java.awt.image.BufferedImage getPreviewFromVectorXml(int imageWidth, @com.android.annotations.Nullable java.lang.String xmlFileContent, @com.android.annotations.Nullable java.lang.StringBuilder vdErrorLog) { if ((xmlFileContent == null) || (xmlFileContent.isEmpty())) { return null; } com.android.assetstudiolib.vectordrawable.VdParser p = new com.android.assetstudiolib.vectordrawable.VdParser(); com.android.assetstudiolib.vectordrawable.VdTree vdTree; java.io.InputStream inputStream = new java.io.ByteArrayInputStream(xmlFileContent.getBytes(Charsets.UTF_8)); vdTree = p.parse(inputStream, vdErrorLog); if (vdTree == null) { return null; } java.awt.image.BufferedImage image = new java.awt.image.BufferedImage(imageWidth, ((int) (imageWidth / (vdTree.getAspectRatio()))), java.awt.image.BufferedImage.TYPE_INT_ARGB); java.awt.Graphics g = image.getGraphics(); g.setColor(new java.awt.Color(255, 255, 255, 0)); g.fillRect(0, 0, image.getWidth(), image.getHeight()); vdTree.draw(g, image.getWidth(), image.getHeight()); return image; }
@com.android.annotations.NonNull public com.android.tools.gradle.eclipse.GradleImport setSdkManager(@com.android.annotations.NonNull com.android.sdklib.SdkManager sdkManager) { mSdkManager = sdkManager; mSdkLocation = new java.io.File(sdkManager.getLocation()); return this; }
protected void fillDexLists(java.util.List<com.android.sched.vfs.InputVFile> mainDexList, java.util.List<com.android.sched.vfs.InputVFile> anyDexList) throws com.android.jack.JackIOException { for (com.android.jack.ir.ast.JDefinedClassOrInterface type : com.android.jack.Jack.getSession().getTypesToEmit()) { try { com.android.sched.vfs.InputVFile inputVFile = getTypeDexDir().getInputVFile(com.android.jack.backend.dex.DexWriter.getFilePath(type)); if (type.containsMarker(com.android.jack.backend.dex.MainDexMarker.class)) { mainDexList.add(inputVFile); } else { anyDexList.add(inputVFile); } } catch (com.android.sched.util.file.NotFileOrDirectoryException e) { throw new com.android.jack.JackIOException((("Error trying to read file for type '" + (com.android.jack.Jack.getUserFriendlyFormatter().getName(type))) + "'"), e); } } }


public native void fsync(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;
public void requestGC() { if (java.lang.Daemons.GCDaemon.atomicBoolean.getAndSet(true)) { return; } synchronized(this) { notify(); } java.lang.Daemons.GCDaemon.atomicBoolean.set(false); }


public void test_setMaximumIntegerDigits() { java.text.NumberFormat format = java.text.NumberFormat.getInstance(); format.setMaximumIntegerDigits(2); assertEquals("Wrong result: case 1", "23", format.format(123)); format.setMaximumIntegerDigits(java.lang.Integer.MIN_VALUE); assertEquals("Wrong result: case 2", "0", format.format(123)); }
private boolean setNetworkDetailedState(android.net.NetworkInfo.DetailedState state) { boolean hidden = false; if ((linkDebouncing) || (isRoaming())) { hidden = true; } if (com.android.server.wifi.WifiStateMachine.DBG) { log(((((("setDetailed state, old =" + (mNetworkInfo.getDetailedState())) + " and new state=") + state) + " hidden=") + hidden)); } if (((mNetworkInfo.getExtraInfo()) != null) && ((mWifiInfo.getSSID()) != null)) { if (!(mNetworkInfo.getExtraInfo().equals(mWifiInfo.getSSID()))) { if (com.android.server.wifi.WifiStateMachine.DBG) { log(("setDetailed state send new extra info" + (mWifiInfo.getSSID()))); } mNetworkInfo.setExtraInfo(mWifiInfo.getSSID()); sendNetworkStateChangeBroadcast(null); } } if (hidden == true) { return false; } if (state != (mNetworkInfo.getDetailedState())) { mNetworkInfo.setDetailedState(state, null, mWifiInfo.getSSID()); if ((mNetworkAgent) != null) { mNetworkAgent.sendNetworkInfo(mNetworkInfo); } sendNetworkStateChangeBroadcast(null); return true; } return false; }

@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mTransportType); dest.writeInt(mDomain); dest.writeInt(mRegState); dest.writeInt(mAccessNetworkTechnology); dest.writeInt(mReasonForDenial); dest.writeBoolean(mEmergencyOnly); dest.writeIntArray(mAvailableServices); dest.writeParcelable(mCellIdentity, 0); }
@java.lang.Override @javax.annotation.Nonnull protected java.util.Map<T, U> convert(@javax.annotation.Nonnull java.util.List<java.util.Map.Entry<T, U>> list) { java.util.Map<T, U> map = new java.util.HashMap<T, U>(java.lang.Math.round(((list.size()) / 0.75F)), 0.75F); for (java.util.Map.Entry<T, U> entry : list) { map.put(entry.getKey(), entry.getValue()); } return map; }



public void reloadConfig() throws com.android.jack.server.api.v01.ServerException, com.android.sched.util.file.NotFileException, com.android.sched.util.file.WrongPermissionException, java.io.IOException { shutdownConnections(); try { checkAccess(serverDir, java.util.EnumSet.of(java.nio.file.attribute.PosixFilePermission.OWNER_READ, java.nio.file.attribute.PosixFilePermission.OWNER_WRITE, java.nio.file.attribute.PosixFilePermission.OWNER_EXECUTE)); loadConfig(); } catch (java.io.IOException e) { shutdown(); throw e; } start(new java.util.HashMap<java.lang.String, java.lang.Object>()); }
static com.android.apksig.internal.apk.v2.SignatureAlgorithm findById(int id) { for (com.android.apksig.internal.apk.v2.SignatureAlgorithm alg : com.android.apksig.internal.apk.v2.SignatureAlgorithm.values()) { if ((alg.getId()) == id) { return alg; } } return null; }
@com.android.monkeyrunner.doc.MonkeyRunnerExported(doc = "Returns the accessibility ids of the current view", returns = "The accessibility ids of the view as a list of ints") public org.python.core.PyList getAccessibilityIds(org.python.core.PyObject[] args, java.lang.String[] kws) { org.python.core.ArgParser ap = com.android.monkeyrunner.JythonUtils.createArgParser(args, kws); com.google.common.base.Preconditions.checkNotNull(ap); int[] ids = impl.getAccessibilityIds(); org.python.core.PyList pyIds = new org.python.core.PyList(); for (int i = 0; i < (ids.length); i++) { pyIds.append(new org.python.core.PyInteger(ids[i])); } return pyIds; }
private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController1, com.android.internal.telephony.ims.ImsServiceController carrierController2) { mTestImsResolver.setImsServiceControllerFactory(( context, componentName) -> { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(deviceController.getComponentName()).thenReturn(componentName); return deviceController; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController1.getComponentName()).thenReturn(componentName); return carrierController1; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_2_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController2.getComponentName()).thenReturn(componentName); return carrierController2; } return null; }); }

public final java.lang.String getOwnerPhoneNumberVcard(final boolean vcardType21, final byte[] filter) { if (com.android.bluetooth.pbap.BluetoothPbapConfig.useProfileForOwnerVcard()) { java.lang.String vcard = getOwnerPhoneNumberVcardFromProfile(vcardType21, filter); if ((vcard != null) && ((vcard.length()) != 0)) { return vcard; } } com.android.bluetooth.pbap.BluetoothPbapCallLogComposer composer = new com.android.bluetooth.pbap.BluetoothPbapCallLogComposer(mContext); java.lang.String name = com.android.bluetooth.pbap.BluetoothPbapService.getLocalPhoneName(); java.lang.String number = com.android.bluetooth.pbap.BluetoothPbapService.getLocalPhoneNum(); java.lang.String vcard = composer.composeVCardForPhoneOwnNumber(Phone.TYPE_MOBILE, name, number, vcardType21); return vcard; }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mScanMode); dest.writeInt(mCallbackType); dest.writeInt(mScanResultType); dest.writeLong(mReportDelayMillis); dest.writeInt(mMatchMode); dest.writeInt(mNumOfMatchesPerFilter); }
private void parse(java.lang.String line) { if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS_CODE)) { submitCurrentKeyValue(); parseStatusCode(line); } else if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS)) { submitCurrentKeyValue(); parseKey(line, com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS.length()); } else if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.RESULT)) { submitCurrentKeyValue(); parseKey(line, com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.RESULT.length()); } else if ((line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS_FAILED)) || (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.CODE))) { submitCurrentKeyValue(); mTestRunFinished = true; } else if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.TIME_REPORT)) { parseTime(line, com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.TIME_REPORT.length()); } else { if ((mCurrentValue) != null) { mCurrentValue.append("\r\n"); mCurrentValue.append(line); } else if ((line.trim().length()) > 0) { com.android.ddmlib.Log.d(com.android.ddmlib.testrunner.InstrumentationResultParser.LOG_TAG, ("unrecognized line " + line)); } } }
@java.lang.Override public com.android.jack.dx.io.instructions.DecodedInstruction withIndex(int newIndex) { return new com.android.jack.dx.io.instructions.RegisterRangeDecodedInstruction(getFormat(), getOpcode(), newIndex, getIndexType(), getTarget(), getLiteral(), a, registerCount); }
public void authenticateServer(java.lang.String cardId, java.lang.String matchingId, byte[] serverSigned1, byte[] serverSignature1, byte[] euiccCiPkIdToBeUsed, byte[] serverCertificate, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().authenticateServer(mContext.getOpPackageName(), cardId, matchingId, serverSigned1, serverSignature1, euiccCiPkIdToBeUsed, serverCertificate, new com.android.internal.telephony.euicc.IAuthenticateServerCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { callback.onComplete(resultCode, response); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling authenticateServer", e); throw e.rethrowFromSystemServer(); } }


public void test_getRemoteDevice() { android.bluetooth.BluetoothAdapter adapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); disable(adapter); try { adapter.getRemoteDevice(null); fail("IllegalArgumentException not thrown"); } catch (java.lang.IllegalArgumentException e) { } try { adapter.getRemoteDevice("00:00:00:00:00:00:00:00"); fail("IllegalArgumentException not thrown"); } catch (java.lang.IllegalArgumentException e) { } android.bluetooth.BluetoothDevice device = adapter.getRemoteDevice("00:11:22:AA:BB:CC"); assertNotNull(device); assertEquals("00:11:22:AA:BB:CC", device.getAddress()); }

public static java.text.BreakIterator getCharacterInstance(java.util.Locale locale) { return new java.text.RuleBasedBreakIterator(libcore.icu.NativeBreakIterator.getCharacterInstance(locale)); }

private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { if (callback == null) { throw new java.lang.IllegalArgumentException("null NetworkCallback"); } if ((need == null) && (action != (android.net.ConnectivityManager.REQUEST))) { throw new java.lang.IllegalArgumentException("null NetworkCapabilities"); } final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return request; }
@java.lang.Override protected void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddr, destAddr, text, (deliveryIntent != null)); if (pdu != null) { sendRawPdu(pdu.encodedScAddress, pdu.encodedMessage, sentIntent, deliveryIntent, destAddr); } else { android.telephony.Rlog.e(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "GsmSMSDispatcher.sendText(): getSubmitPdu() returned null"); } }
public static java.util.List<com.android.apksig.internal.apk.v2.SignatureAlgorithm> getSuggestedSignatureAlgorithms(java.security.PublicKey signingKey, int minSdkVersion) throws java.security.InvalidKeyException { java.lang.String keyAlgorithm = signingKey.getAlgorithm(); if ("RSA".equalsIgnoreCase(keyAlgorithm)) { int modulusLengthBits = ((java.security.interfaces.RSAKey) (signingKey)).getModulus().bitLength(); if (modulusLengthBits <= 3072) { return java.util.Collections.singletonList(SignatureAlgorithm.RSA_PKCS1_V1_5_WITH_SHA256); } else { return java.util.Collections.singletonList(SignatureAlgorithm.RSA_PKCS1_V1_5_WITH_SHA512); } } else if ("DSA".equalsIgnoreCase(keyAlgorithm)) { return java.util.Collections.singletonList(SignatureAlgorithm.DSA_WITH_SHA256); } else if ("EC".equalsIgnoreCase(keyAlgorithm)) { int keySizeBits = ((java.security.interfaces.ECKey) (signingKey)).getParams().getOrder().bitLength(); if (keySizeBits <= 256) { return java.util.Collections.singletonList(SignatureAlgorithm.ECDSA_WITH_SHA256); } else { return java.util.Collections.singletonList(SignatureAlgorithm.ECDSA_WITH_SHA512); } } else { throw new java.security.InvalidKeyException(("Unsupported key algorithm: " + keyAlgorithm)); } }
public native libcore.io.StructStatVfs fstatvfs(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;




public void test3_2ParameterChangedListener() throws java.lang.Exception { if (!(isBassBoostAvailable())) { return; } synchronized(mLock) { mInitialized = false; createListenerLooper(false, false, true); waitForLooperInitialization_l(); getBassBoost(0); mChangedParameter = -1; mBassBoost.setStrength(android.media.cts.BassBoostTest.TEST_STRENGTH); int looperWaitCount = android.media.cts.BassBoostTest.MAX_LOOPER_WAIT_COUNT; while (((mChangedParameter) == (-1)) && ((looperWaitCount--) > 0)) { try { mLock.wait(); } catch (java.lang.Exception e) { } } terminateListenerLooper(); releaseBassBoost(); } assertEquals("parameter change not received", BassBoost.PARAM_STRENGTH, mChangedParameter); }
public void testNullValue() throws org.json.JSONException { org.json.JSONObject object = new org.json.JSONObject(); object.put("foo", JSONObject.NULL); object.put("bar", ((java.util.Collection) (null))); assertTrue(object.has("foo")); assertFalse(object.has("bar")); assertTrue(object.isNull("foo")); assertTrue(object.isNull("bar")); }


@java.lang.Override public void onReceivedSslError(android.webkit.WebView view, android.webkit.SslErrorHandler handler, android.net.http.SslError error) { logMetricsEvent(MetricsEvent.CAPTIVE_PORTAL_LOGIN_ACTIVITY_SSL_ERROR); android.util.Log.w(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, (((((("SSL error (error: " + (error.getPrimaryError())) + " host: ") + (android.net.Uri.parse(error.getUrl()).getHost())) + " certificate: ") + (error.getCertificate())) + "); displaying SSL warning.")); final java.lang.String sslErrorPage = makeSslErrorPage(); if (com.android.captiveportallogin.CaptivePortalLoginActivity.VDBG) { android.util.Log.d(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, sslErrorPage); } view.loadDataWithBaseURL(com.android.captiveportallogin.CaptivePortalLoginActivity.MyWebViewClient.INTERNAL_ASSETS, sslErrorPage, "text/HTML", "UTF-8", null); }


@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession program) throws com.android.jack.JackUserException { try { com.android.sched.vfs.OutputVFile outputVFile; if ((((outputLibrary) != null) && (!(isIncrementalMode))) && ((intermediateDexDir) == null)) { outputVFile = outputLibrary.createFile(FileType.DEPENDENCIES, TypeDependencies.vpath); } else { assert (intermediateDexDir) != null; com.android.sched.vfs.VPath typeDependencyPath = TypeDependencies.vpath.clone(); typeDependencyPath.prependPath(new com.android.sched.vfs.VPath("..", '/')); outputVFile = intermediateDexDir.getRootOutputVDir().createOutputVFile(typeDependencyPath); } com.android.jack.Jack.getSession().getTypeDependencies().write(outputVFile); } catch (com.android.sched.util.file.CannotCreateFileException e) { com.android.jack.experimental.incremental.IncrementalException incrementalException = new com.android.jack.experimental.incremental.IncrementalException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, incrementalException); throw new com.android.jack.JackAbortException(incrementalException); } catch (java.io.IOException e) { com.android.jack.experimental.incremental.IncrementalException incrementalException = new com.android.jack.experimental.incremental.IncrementalException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, incrementalException); throw new com.android.jack.JackAbortException(incrementalException); } }

private void handleSimLocked(int slotId, java.lang.String reason) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM))) { logd((("SIM" + (slotId + 1)) + " hot plug in")); com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = null; } com.android.internal.telephony.uicc.IccFileHandler fileHandler = ((com.android.internal.telephony.SubscriptionInfoUpdater.mPhone[slotId].getIccCard()) == null) ? null : com.android.internal.telephony.SubscriptionInfoUpdater.mPhone[slotId].getIccCard().getIccFileHandler(); if (fileHandler != null) { java.lang.String iccId = com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]; if (iccId == null) { logd("Querying IccId"); fileHandler.loadEFTransparent(IccConstants.EF_ICCID, obtainMessage(com.android.internal.telephony.SubscriptionInfoUpdater.EVENT_SIM_LOCKED_QUERY_ICCID_DONE, new com.android.internal.telephony.SubscriptionInfoUpdater.QueryIccIdUserObj(reason, slotId))); } else { logd(((("NOT Querying IccId its already set sIccid[" + slotId) + "]=") + iccId)); updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED, reason); } } else { logd((("sFh[" + slotId) + "] is null, ignore")); } }

public void testCookieStoreNullUris() { java.net.CookieStore cookieStore = new java.net.CookieManager(createCookieStore(), null).getCookieStore(); java.net.HttpCookie cookieA = libcore.java.net.AbstractCookiesTest.createCookie("a", "android", ".android.com", "/source"); java.net.HttpCookie cookieB = libcore.java.net.AbstractCookiesTest.createCookie("b", "banana", "code.google.com", "/p/android"); try { cookieStore.add(null, cookieA); } catch (java.lang.NullPointerException expected) { expected.printStackTrace(); } assertEquals(java.util.Arrays.asList(cookieA), cookieStore.getCookies()); try { cookieStore.add(null, cookieB); } catch (java.lang.NullPointerException expected) { } assertEquals(java.util.Arrays.asList(cookieA, cookieB), cookieStore.getCookies()); try { cookieStore.get(null); fail(); } catch (java.lang.NullPointerException expected) { } assertEquals(java.util.Collections.<java.net.URI>emptyList(), cookieStore.getURIs()); assertTrue(cookieStore.remove(null, cookieA)); assertEquals(java.util.Arrays.asList(cookieB), cookieStore.getCookies()); assertTrue(cookieStore.removeAll()); assertEquals(java.util.Collections.<java.net.URI>emptyList(), cookieStore.getURIs()); assertEquals(java.util.Collections.<java.net.HttpCookie>emptyList(), cookieStore.getCookies()); }
public static java.lang.String toASCII(java.lang.String input, int flags) { return libcore.icu.NativeIDN.toASCII(input, flags); }
@java.lang.Override public void getIccCardStatus(android.os.Message result) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_GET_SIM_STATUS, result); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); send(rr); }
public void stopListening() { if (com.android.server.connectivity.tethering.SimChangeListener.DBG) android.util.Log.d(com.android.server.connectivity.tethering.SimChangeListener.TAG, "stopListening for SIM changes"); if ((mBroadcastReceiver) == null) return; mSimBcastGenerationNumber.incrementAndGet(); mContext.unregisterReceiver(mBroadcastReceiver); mBroadcastReceiver = null; }




@java.lang.Override public void onConnected() { android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, (("BrowsablePlayerListBuilder: " + (mCurrentPlayer.packageName)) + " OK")); mCurrentBrowser.disconnect(); mCurrentBrowser = null; mBrowsePlayerInfoList.add(mCurrentPlayer); com.android.bluetooth.avrcp.MediaPlayerInfo info = getMediaPlayerInfo(mCurrentPlayer.packageName); if (info != null) { com.android.bluetooth.avrcp.MediaController controller = info.getMediaController(); if (controller != null) { addMediaPlayerController(controller.getWrappedInstance()); } } else { addMediaPlayerPackage(mCurrentPlayer.packageName); } mPlayersChanged = true; connectNextPlayer(); }
public void test_getDoInput() throws java.io.IOException { assertTrue("Should be set to true by default", uc.getDoInput()); fileURLCon.setDoInput(true); assertTrue("Should have been set to true", fileURLCon.getDoInput()); uc2.setDoInput(false); assertFalse("Should have been set to false", uc2.getDoInput()); fileURLCon.connect(); fileURLCon.getInputStream().close(); uc2.connect(); try { uc2.getInputStream(); } catch (java.lang.Throwable expected) { } }


static double $opt$IntToDouble(int a) { if (Main.doThrow) throw new java.lang.Error(); return ((double) (a)); }
private float[] createInputArrayFloat(int len, int seed) { return createInputArrayFloat(len, new java.util.Random(seed)); }

public static void applyInvokeWithSystemProperty(com.android.internal.os.ZygoteConnection.Arguments args) { if (((args.invokeWith) == null) && ((args.niceName) != null)) { java.lang.String property = "wrap." + (args.niceName); if ((property.length()) > 31) { if ((property.charAt(30)) != '.') { property = property.substring(0, 31); } else { property = property.substring(0, 30); } } args.invokeWith = android.os.SystemProperties.get(property); if (((args.invokeWith) != null) && ((args.invokeWith.length()) == 0)) { args.invokeWith = null; } } }
@dalvik.annotation.TestTargetNew(level = dalvik.annotation.TestLevel.COMPLETE, method = "convert", args = { double.class, int.class }) public void testConvert_CoordinateToRepresentation() { java.lang.String result; result = android.location.Location.convert((-80.0), Location.FORMAT_DEGREES); assertEquals("-80", result); result = android.location.Location.convert((-80.085), Location.FORMAT_MINUTES); assertEquals("-80:5.1", result); result = android.location.Location.convert((-80), Location.FORMAT_MINUTES); assertEquals("-80:0", result); result = android.location.Location.convert((-80.075), Location.FORMAT_MINUTES); assertEquals("-80:4.5", result); result = android.location.Location.convert((-80.075), Location.FORMAT_DEGREES); assertEquals("-80.075", result); result = android.location.Location.convert((-80.075), Location.FORMAT_SECONDS); assertEquals("-80:4:30", result); try { android.location.Location.convert((-181), Location.FORMAT_SECONDS); fail("should throw IllegalArgumentException."); } catch (java.lang.IllegalArgumentException e) { } try { android.location.Location.convert(181, Location.FORMAT_SECONDS); fail("should throw IllegalArgumentException."); } catch (java.lang.IllegalArgumentException e) { } try { android.location.Location.convert((-80.075), (-1)); fail("should throw IllegalArgumentException."); } catch (java.lang.IllegalArgumentException e) { } }
private static void printArrayElements(com.android.ahat.Doc doc, com.android.ahat.Query query, com.android.ahat.AhatSnapshot snapshot, com.android.tools.perflib.heap.ArrayInstance array) { doc.section("Array Elements"); doc.table(new com.android.ahat.Column("Index", Column.Align.RIGHT), new com.android.ahat.Column("Value")); java.util.List<java.lang.Object> elements = java.util.Arrays.asList(array.getValues()); com.android.ahat.SubsetSelector<java.lang.Object> selector = new com.android.ahat.SubsetSelector(query, com.android.ahat.ObjectHandler.ARRAY_ELEMENTS_ID, elements); int i = 0; for (java.lang.Object elem : selector.selected()) { doc.row(com.android.ahat.DocString.format("%d", i), com.android.ahat.Value.render(snapshot, elem)); i++; } doc.end(); selector.render(doc); }

public com.android.builder.model.AndroidProject executeAndReturnModel(java.lang.String... tasks) { return execute(java.util.Collections.<java.lang.String>emptyList(), true, tasks); }
@java.lang.Override public void checkValue(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull com.android.jack.library.InputJackLibrary data) { }


@java.lang.Override public void rejectWithMessage(java.lang.String callId, java.lang.String message) { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = message; mHandler.obtainMessage(android.telecom.ConnectionService.MSG_REJECT_WITH_MESSAGE, args).sendToTarget(); }



private static void searchForProject(junit.framework.TestSuite suite, java.io.File folder, java.io.File sdkFolder, java.io.File ndkFolder) { java.io.File buildGradle = new java.io.File(folder, "build.gradle"); if (buildGradle.isFile()) { suite.addTest(com.android.build.tests.ProjectTest.createTest(folder, sdkFolder, ndkFolder)); } }
public com.android.ims.internal.IImsServiceController getImsServiceControllerAndListen(int slotId, int feature, com.android.ims.internal.IImsServiceFeatureListener callback) { if ((((slotId < 0) || (slotId >= (mNumSlots))) || (feature <= (android.telephony.ims.feature.ImsFeature.INVALID))) || (feature >= (android.telephony.ims.feature.ImsFeature.MAX))) { return null; } com.android.internal.telephony.ims.ImsServiceController controller; synchronized(mBoundServicesLock) { android.util.SparseArray<com.android.internal.telephony.ims.ImsServiceController> services = mBoundImsServicesByFeature.get(slotId); if (services == null) { return null; } controller = services.get(feature); } if (controller != null) { controller.addImsServiceFeatureListener(callback); return controller.getImsServiceController(); } return null; }
public static android.telephony.MbmsDownloadManager create(android.content.Context context, android.telephony.mbms.MbmsDownloadManagerCallback listener, int subscriptionId) throws android.telephony.mbms.MbmsException { android.telephony.MbmsDownloadManager mdm = new android.telephony.MbmsDownloadManager(context, listener, subscriptionId); mdm.bindAndInitialize(); return mdm; }



private com.android.rs.test.Short3 pack_s3(short[] val) { assert (val.length) == 3; return new com.android.rs.test.Short3(val[0], val[1], val[2]); }
@org.junit.Test public void testCollectPipApps() { android.content.pm.PackageInfo primaryP1 = createPackage("Calculator", true); android.content.pm.PackageInfo primaryP2 = createPackage("Clock", false); android.content.pm.PackageInfo profileP1 = createPackage("Calculator", false); android.content.pm.PackageInfo profileP2 = createPackage("Clock", true); mPrimaryUserPackages.add(primaryP1); mPrimaryUserPackages.add(primaryP2); mProfileUserPackages.add(profileP1); mProfileUserPackages.add(profileP2); java.util.ArrayList<android.util.Pair<android.content.pm.ApplicationInfo, java.lang.Integer>> apps = mFragment.collectPipApps(com.android.settings.applications.PictureInPictureSettingsTest.PRIMARY_USER_ID); assertThat(containsPackages(apps, primaryP1, profileP2)).isTrue(); assertThat(containsPackages(apps, primaryP2, profileP1)).isFalse(); }


public static int booleanFieldEqualZero() { return (Main.booleanField) != (Main.$inline$false()) ? 13 : 54; }


protected void libToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.lang.String classpath, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { boolean assertEnable = false; assert true == (assertEnable = true); args.add("java"); args.add((assertEnable ? "-ea" : "-da")); args.add("-jar"); args.add(jackPrebuilt.getAbsolutePath()); args.add("--verbose"); args.add(verbosityLevel.name()); args.add("--sanity-checks"); args.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { args.add("--incremental-folder"); args.add(incrementalFolder.getAbsolutePath()); } for (java.io.File res : resImport) { args.add("--import-resource"); args.add(res.getPath()); } for (java.io.File meta : metaImport) { args.add("--import-meta"); args.add(meta.getPath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if (!(classpath.equals(""))) { args.add("--classpath"); args.add(classpath); } for (java.io.File jarjarFile : jarjarRules) { args.add("--config-jarjar"); args.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add("--config-proguard"); args.add(flags.getAbsolutePath()); } if (withDebugInfos) { args.add("-g"); } libToImportStaticLibs(args, in); }
public synchronized com.android.ide.common.rendering.LayoutLibrary getLayoutLibrary() { if (((mLayoutBridgeInit) == false) && ((mLayoutLibrary.getStatus()) == (com.android.ide.common.sdk.LoadStatus.LOADED))) { mLayoutLibrary.init(mTarget.getProperties(), new java.io.File(mTarget.getPath(IAndroidTarget.FONTS)), getEnumValueMap(), new com.android.ide.common.rendering.api.LayoutLog() { @java.lang.Override public void error(java.lang.String tag, java.lang.String message, java.lang.Throwable throwable, java.lang.Object data) { com.android.ide.eclipse.adt.AdtPlugin.log(throwable, message); } @java.lang.Override public void error(java.lang.String tag, java.lang.String message, java.lang.Object data) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, message); } @java.lang.Override public void warning(java.lang.String tag, java.lang.String message, java.lang.Object data) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.WARNING, message); } }); mLayoutBridgeInit = true; } return mLayoutLibrary; }
public static com.android.hierarchyviewerlib.models.ViewNode parseViewHierarchy(java.io.BufferedReader in, com.android.hierarchyviewerlib.models.Window window) { com.android.hierarchyviewerlib.models.ViewNode currentNode = null; int currentDepth = -1; java.lang.String line; try { while ((line = in.readLine()) != null) { if ("DONE.".equalsIgnoreCase(line)) { break; } int depth = 0; while ((line.charAt(depth)) == ' ') { depth++; } while (depth <= currentDepth) { if (currentNode != null) { currentNode = currentNode.parent; } currentDepth--; } currentNode = new com.android.hierarchyviewerlib.models.ViewNode(window, currentNode, line.substring(depth)); currentDepth = depth; } } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DeviceBridge.TAG, ("Error reading view hierarchy stream: " + (e.getMessage()))); return null; } if (currentNode == null) { return null; } while ((currentNode.parent) != null) { currentNode = currentNode.parent; } return currentNode; }
private void setupInitialSelection(com.android.resources.ResourceType resourceType, java.lang.String resourceName) { com.android.ide.eclipse.adt.internal.resources.ResourceItem[] resourceItems = mResources.getResources(resourceType); for (com.android.ide.eclipse.adt.internal.resources.ResourceItem resourceItem : resourceItems) { if (resourceName.equals(resourceItem.getName())) { org.eclipse.jface.viewers.TreePath treePath = new org.eclipse.jface.viewers.TreePath(new java.lang.Object[]{ resourceType, resourceItem }); mFilteredTree.getViewer().setSelection(new org.eclipse.jface.viewers.TreeSelection(treePath), true); return; } } org.eclipse.jface.viewers.TreePath treePath = new org.eclipse.jface.viewers.TreePath(new java.lang.Object[]{ resourceType }); mFilteredTree.getViewer().setSelection(new org.eclipse.jface.viewers.TreeSelection(treePath), true); mFilteredTree.getViewer().setExpandedState(resourceType, true); }
void putDecString(java.lang.String original) { java.lang.String s = checkString(original, 10); this.makeValid(); int usedLen = java.math.NativeBN.BN_dec2bn(this.bignum, s); if (usedLen < (s.length())) { throw invalidBigInteger(original); } }


private void displayTestResultSummary() { int passNum = mSessionLog.getTestList(CtsTestResult.CODE_PASS).size(); int failNum = mSessionLog.getTestList(CtsTestResult.CODE_FAIL).size(); int notExecutedNum = mSessionLog.getTestList(CtsTestResult.CODE_NOT_EXECUTED).size(); int timeOutNum = mSessionLog.getTestList(CtsTestResult.CODE_TIMEOUT).size(); int total = ((passNum + failNum) + notExecutedNum) + timeOutNum; println(((((((((("Test summary: pass=" + passNum) + " fail=") + failNum) + " timeOut=") + timeOutNum) + " notExecuted=") + notExecutedNum) + " Total=") + total)); }

public void setTargetInfo(@com.android.annotations.NonNull com.android.builder.sdk.SdkInfo sdkInfo, @com.android.annotations.NonNull com.android.builder.sdk.TargetInfo targetInfo) { mSdkInfo = sdkInfo; mTargetInfo = targetInfo; if ((mTargetInfo.getBuildTools().getRevision().compareTo(com.android.builder.core.AndroidBuilder.MIN_BUILD_TOOLS_REV)) < 0) { throw new java.lang.IllegalArgumentException(java.lang.String.format("The SDK Build Tools revision (%1$s) is too low for project '%2$s'. Minimum required is %3$s", mTargetInfo.getBuildTools().getRevision(), mProjectId, com.android.builder.core.AndroidBuilder.MIN_BUILD_TOOLS_REV)); } }
public long scheduledExecutionTime() { synchronized(lock) { return scheduledTime; } }
public void testWildcardMatchingSubstring() { assertTrue(verifier.verifyHostName("b.c.d", "b*.c.d")); assertTrue(verifier.verifyHostName("imap.google.com", "ima*.google.com")); }
public void applyDeviceVolume_syncVSS(int device) { int index; if (mIsMuted) { index = 0; } else if (((device & (android.media.AudioSystem.DEVICE_OUT_ALL_A2DP)) != 0) && (mAvrcpAbsVolSupported)) { int i = ((getIndex(device)) + 5) / 10; if (i == 0) { index = 0; } else if (i == 1) { index = ((int) ((mIndexMax) * 0.5)) / 10; } else if (i == 2) { index = ((int) ((mIndexMax) * 0.75)) / 10; } else { index = ((mIndexMax) + 5) / 10; } } else if ((device & (mFullVolumeDevices)) != 0) { index = ((mIndexMax) + 5) / 10; } else { index = ((getIndex(device)) + 5) / 10; } android.media.AudioSystem.setStreamVolumeIndex(mStreamType, index, device); }
public void testGetActivityThemes3() throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo info = getManifestInfo(("<manifest xmlns:android=\'http://schemas.android.com/apk/res/android\'\n" + ((" package=\'com.android.unittest\'>\n" + " <uses-sdk android:minSdkVersion=\'11\'/>\n") + "</manifest>\n"))); java.util.Map<java.lang.String, java.lang.String> map = info.getActivityThemes(); assertEquals(map.toString(), 0, map.size()); assertEquals("com.android.unittest", info.getPackage()); assertEquals("Theme.Holo", com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme(info.getDefaultTheme(null, com.android.ide.eclipse.adt.internal.editors.manifest.XLARGE))); assertEquals("Theme", com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme(info.getDefaultTheme(null, com.android.ide.eclipse.adt.internal.editors.manifest.NORMAL))); }


static void setInt(java.lang.invoke.MethodHandle m, Main.ValueHolder v, int value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
@java.lang.SuppressWarnings("unused") @java.lang.Override public void verifyCertificateChain(long sslSessionNativePtr, long[] certRefs, java.lang.String authMethod) throws java.security.cert.CertificateException { try { javax.net.ssl.X509TrustManager x509tm = sslParameters.getX509TrustManager(); if (x509tm == null) { throw new java.security.cert.CertificateException("No X.509 TrustManager"); } if ((certRefs == null) || ((certRefs.length) == 0)) { throw new javax.net.ssl.SSLException("Peer sent no certificate"); } org.conscrypt.OpenSSLX509Certificate[] peerCertChain = new org.conscrypt.OpenSSLX509Certificate[certRefs.length]; for (int i = 0; i < (certRefs.length); i++) { peerCertChain[i] = new org.conscrypt.OpenSSLX509Certificate(certRefs[i]); } handshakeSession = new org.conscrypt.OpenSSLSessionImpl(sslSessionNativePtr, null, peerCertChain, getPeerHostName(), getPeerPort(), null); boolean client = sslParameters.getUseClientMode(); if (client) { org.conscrypt.Platform.checkServerTrusted(x509tm, peerCertChain, authMethod, getPeerHostName()); } else { java.lang.String authType = peerCertChain[0].getPublicKey().getAlgorithm(); x509tm.checkClientTrusted(peerCertChain, authType); } } catch (java.security.cert.CertificateException e) { throw e; } catch (java.lang.Exception e) { throw new java.security.cert.CertificateException(e); } finally { handshakeSession = null; } }


public static sun.security.jca.ProviderList insertAt(sun.security.jca.ProviderList providerList, java.security.Provider p, int position) { if ((providerList.getProvider(p.getName())) != null) { return providerList; } java.util.List<sun.security.jca.ProviderConfig> list = new java.util.ArrayList<>(java.util.Arrays.asList(providerList.configs)); int n = list.size(); if ((position < 0) || (position > n)) { position = n; } list.add(position, new sun.security.jca.ProviderConfig(p)); return new sun.security.jca.ProviderList(list.toArray(sun.security.jca.ProviderList.PC0), true); }
@com.android.annotations.NonNull public abstract java.io.File getOutputFile();



public static void assignSeinfoValue(android.content.pm.PackageParser.Package pkg) { if ((((pkg.applicationInfo.flags) & (android.content.pm.ApplicationInfo.FLAG_SYSTEM)) != 0) || (((pkg.applicationInfo.flags) & (android.content.pm.ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) != 0)) { for (android.content.pm.Signature s : pkg.mSignatures) { if (s == null) continue; if (com.android.server.pm.SELinuxMMAC.sSigSeinfo.containsKey(s)) { java.lang.String seinfo = pkg.applicationInfo.seinfo = com.android.server.pm.SELinuxMMAC.sSigSeinfo.get(s); if (com.android.server.pm.SELinuxMMAC.DEBUG_POLICY_INSTALL) android.util.Slog.i(com.android.server.pm.SELinuxMMAC.TAG, ((("package (" + (pkg.packageName)) + ") labeled with seinfo=") + seinfo)); return; } } if (com.android.server.pm.SELinuxMMAC.sPackageSeinfo.containsKey(pkg.packageName)) { java.lang.String seinfo = pkg.applicationInfo.seinfo = com.android.server.pm.SELinuxMMAC.sPackageSeinfo.get(pkg.packageName); if (com.android.server.pm.SELinuxMMAC.DEBUG_POLICY_INSTALL) android.util.Slog.i(com.android.server.pm.SELinuxMMAC.TAG, ((("package (" + (pkg.packageName)) + ") labeled with seinfo=") + seinfo)); return; } } java.lang.String seinfo = pkg.applicationInfo.seinfo = com.android.server.pm.SELinuxMMAC.sSigSeinfo.get(null); if (com.android.server.pm.SELinuxMMAC.DEBUG_POLICY_INSTALL) android.util.Slog.i(com.android.server.pm.SELinuxMMAC.TAG, ((("package (" + (pkg.packageName)) + ") labeled with seinfo=") + (seinfo == null ? "null" : seinfo))); }
private final synchronized void closeServerSocket() { if ((mServerSocket) != null) { try { mServerSocket.close(); mServerSocket = null; } catch (java.io.IOException ex) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("Close Server Socket error: " + ex)); } } }

public static synchronized javax.net.SocketFactory getDefault() { int newCacheVersion = org.apache.harmony.security.fortress.Services.getCacheVersion(); if ((javax.net.ssl.SSLSocketFactory.lastCacheVersion) != newCacheVersion) { javax.net.ssl.SSLSocketFactory.defaultSocketFactory = null; javax.net.ssl.SSLSocketFactory.defaultName = null; javax.net.ssl.SSLSocketFactory.lastCacheVersion = newCacheVersion; } if ((javax.net.ssl.SSLSocketFactory.defaultSocketFactory) != null) { return javax.net.ssl.SSLSocketFactory.defaultSocketFactory; } if ((javax.net.ssl.SSLSocketFactory.defaultName) == null) { javax.net.ssl.SSLSocketFactory.defaultName = java.security.Security.getProperty("ssl.SocketFactory.provider"); if ((javax.net.ssl.SSLSocketFactory.defaultName) != null) { java.lang.ClassLoader cl = java.lang.Thread.currentThread().getContextClassLoader(); if (cl == null) { cl = java.lang.ClassLoader.getSystemClassLoader(); } try { final java.lang.Class<?> sfc = java.lang.Class.forName(javax.net.ssl.SSLSocketFactory.defaultName, true, cl); javax.net.ssl.SSLSocketFactory.defaultSocketFactory = ((javax.net.SocketFactory) (sfc.newInstance())); } catch (java.lang.Exception e) { java.lang.System.logE(("Problem creating " + (javax.net.ssl.SSLSocketFactory.defaultName)), e); } } } if ((javax.net.ssl.SSLSocketFactory.defaultSocketFactory) == null) { javax.net.ssl.SSLContext context; try { context = javax.net.ssl.SSLContext.getDefault(); } catch (java.security.NoSuchAlgorithmException e) { context = null; } if (context != null) { javax.net.ssl.SSLSocketFactory.defaultSocketFactory = context.getSocketFactory(); } } if ((javax.net.ssl.SSLSocketFactory.defaultSocketFactory) == null) { javax.net.ssl.SSLSocketFactory.defaultSocketFactory = new javax.net.ssl.DefaultSSLSocketFactory("No SSLSocketFactory installed"); } return javax.net.ssl.SSLSocketFactory.defaultSocketFactory; }
public static int getAttachmentType(com.android.mms.model.SlideshowModel model, com.google.android.mms.pdu.MultimediaMessagePdu mmp) { if (model == null) { return MessageItem.ATTACHMENT_TYPE_NOT_LOADED; } int numberOfSlides = model.size(); if (numberOfSlides > 1) { return com.android.mms.data.WorkingMessage.SLIDESHOW; } else if (numberOfSlides == 1) { com.android.mms.model.SlideModel slide = model.get(0); if (slide.hasVideo()) { return com.android.mms.data.WorkingMessage.VIDEO; } if ((slide.hasAudio()) && (slide.hasImage())) { return com.android.mms.data.WorkingMessage.SLIDESHOW; } if (slide.hasAudio()) { return com.android.mms.data.WorkingMessage.AUDIO; } if (slide.hasImage()) { return com.android.mms.data.WorkingMessage.IMAGE; } if (slide.hasText()) { return com.android.mms.data.WorkingMessage.TEXT; } if ((mmp != null) && (!(android.text.TextUtils.isEmpty(mmp.getSubject().getString())))) { return com.android.mms.data.WorkingMessage.TEXT; } } return MessageItem.ATTACHMENT_TYPE_NOT_LOADED; }

public final void testLoadViewAttributes() throws java.lang.Exception { mParser.preload(); com.android.ide.eclipse.adt.internal.resources.ViewClassInfo info = new com.android.ide.eclipse.adt.internal.resources.ViewClassInfo(false, "mock_android.something.Theme", "Theme"); mParser.loadViewAttributes(info); assertEquals("These are the standard attributes that make up a complete theme.", info.getJavaDoc()); com.android.ide.eclipse.adt.internal.resources.AttributeInfo[] attrs = info.getAttributes(); assertEquals(1, attrs.length); assertEquals("scrollbarSize", info.getAttributes()[0].getName()); assertEquals(1, info.getAttributes()[0].getFormats().length); assertEquals(Format.DIMENSION, info.getAttributes()[0].getFormats()[0]); }




@java.lang.Override protected synchronized void implCloseSelectableChannel() throws java.io.IOException { if ((status) != (java.nio.SocketChannelImpl.SOCKET_STATUS_CLOSED)) { status = java.nio.SocketChannelImpl.SOCKET_STATUS_CLOSED; if (((socket) != null) && (!(socket.isClosed()))) { socket.close(); } else { libcore.io.IoBridge.closeSocket(fd); } } }



@org.junit.Test public void testMinimalMainDexOverflowWithMethods() throws java.lang.Exception { java.io.File srcFolder = com.android.jack.TestTools.createTempDir("src", "dir"); java.io.File outFolder = com.android.jack.TestTools.createTempDir("out", "dir"); int fileCount = 655; for (int fileIdx = 0; fileIdx < fileCount; fileIdx++) { generateJavaFileWithMethods(srcFolder, fileIdx, 100); } generateJavaFileWithMethods(srcFolder, fileCount, 36); com.android.jack.Options options = new com.android.jack.Options(); options.addProperty(MultiDexLegacy.MULTIDEX_LEGACY.getName(), "true"); options.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), "minimal-multidex"); try { com.android.jack.TestTools.compileSourceToDex(options, srcFolder, com.android.jack.TestTools.getClasspathsAsString(com.android.jack.TestTools.getDefaultBootclasspath(), new java.io.File[]{ com.android.jack.multidex.MultiDexOverflowTests.annotations }), outFolder, false); junit.framework.Assert.fail(); } catch (com.android.jack.JackAbortException e) { java.lang.Throwable cause = e.getCause(); junit.framework.Assert.assertTrue((cause instanceof com.android.jack.backend.dex.DexWritingException)); junit.framework.Assert.assertTrue(((cause.getCause()) instanceof com.android.jack.backend.dex.MainDexOverflowException)); junit.framework.Assert.assertTrue(((cause.getCause().getCause()) instanceof com.android.jack.tools.merger.MethodIdOverflowException)); } }

@java.lang.Override public javax.swing.JLabel getDescriptionText() { return myDescriptionLabel; }
@org.junit.Test public void monitor_enter() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(MONITOR_ENTER).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }

public void setUpstreamLinkProperties(android.net.LinkProperties lp) { if (!(started())) return; mUpstreamLinkProperties = lp; }
private void testDataPathInitiatorResponderMismatchUtility(boolean doPublish) throws java.lang.Exception { final int clientId = 123; final int pubSubId = 11234; final int ndpId = 2; final byte[] pmk = "some bytes".getBytes(); final android.net.wifi.aware.PeerHandle peerHandle = new android.net.wifi.aware.PeerHandle(1341234); final byte[] peerDiscoveryMac = libcore.util.HexEncoding.decode("000102030405".toCharArray(), false); org.mockito.InOrder inOrder = inOrder(mMockNative, mMockCm, mMockCallback, mMockSessionCallback); Pair<java.lang.Integer, Messenger> res = initDataPathEndPoint(clientId, pubSubId, peerHandle, peerDiscoveryMac, inOrder, doPublish); NetworkRequest nr = getSessionNetworkRequest(clientId, res.first, peerHandle, pmk, doPublish); JSONObject jsonObject = new JSONObject(((StringNetworkSpecifier) (nr.networkCapabilities.getNetworkSpecifier())).specifier); jsonObject.put(WifiAwareManager.NETWORK_SPECIFIER_KEY_ROLE, (1 - (jsonObject.getInt(WifiAwareManager.NETWORK_SPECIFIER_KEY_ROLE)))); nr.networkCapabilities.setNetworkSpecifier(new StringNetworkSpecifier(jsonObject.toString())); Message reqNetworkMsg = Message.obtain(); reqNetworkMsg.what = android.net.NetworkFactory.CMD_REQUEST_NETWORK; reqNetworkMsg.obj = nr; reqNetworkMsg.arg1 = 0; res.second.send(reqNetworkMsg); mMockLooper.dispatchAll(); if (doPublish) { mDut.onDataPathRequestNotification(pubSubId, peerDiscoveryMac, ndpId); mMockLooper.dispatchAll(); inOrder.verify(mMockNative).respondToDataPathRequest(anyShort(), eq(false), eq(ndpId), eq(""), eq(null), eq(null), any()); } verifyNoMoreInteractions(mMockNative, mMockCm); }
private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, final long[] javaResult, final long[] rsResult) { if ((javaResult.length) != (rsResult.length)) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((testName + ": java length ") + (javaResult.length)) + ", rs length ") + (rsResult.length)) + ": FAILED")); return false; } for (int i = 0; i < (javaResult.length); ++i) { if ((javaResult[i]) != (rsResult[i])) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((((testName + "[") + i) + "]: java ") + (javaResult[i])) + ", rs ") + (rsResult[i])) + ": FAILED")); return false; } } java.lang.String status = "PASSED"; if (t != null) status += " " + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((testName + ": ") + status)); return true; }

private static void setInjectableValues(com.android.manifmerger.ManifestMerger2.Invoker<?> invoker, java.lang.String packageOverride, int versionCode, java.lang.String versionName, @com.android.annotations.Nullable java.lang.String minSdkVersion, @com.android.annotations.Nullable java.lang.String targetSdkVersion) { if (!(com.google.common.base.Strings.isNullOrEmpty(packageOverride))) { invoker.setOverride(SystemProperty.PACKAGE, packageOverride); } if (versionCode > 0) { invoker.setOverride(SystemProperty.VERSION_CODE, java.lang.String.valueOf(versionCode)); } if (!(com.google.common.base.Strings.isNullOrEmpty(versionName))) { invoker.setOverride(SystemProperty.VERSION_NAME, versionName); } if (!(com.google.common.base.Strings.isNullOrEmpty(minSdkVersion))) { invoker.setOverride(SystemProperty.MIN_SDK_VERSION, minSdkVersion); } if (!(com.google.common.base.Strings.isNullOrEmpty(targetSdkVersion))) { invoker.setOverride(SystemProperty.TARGET_SDK_VERSION, targetSdkVersion); } }
public static void performTest() { new SubMain(); if ((Main.$noinline$returnInt()) != 53) { throw new java.lang.Error("Unexpected return value"); } if ((Main.$noinline$returnFloat()) != 42.2F) { throw new java.lang.Error("Unexpected return value"); } if ((Main.$noinline$returnDouble()) != (java.lang.Double.longBitsToDouble(-1152921504606842607L))) { throw new java.lang.Error("Unexpected return value "); } if ((Main.$noinline$returnLong()) != -281474976706287L) { throw new java.lang.Error("Unexpected return value"); } try { Main.$noinline$deopt(); } catch (java.lang.Exception e) { } DeoptimizationController.stopDeoptimization(); Main.$noinline$inlineCache(new Main(), false); if ((Main.$noinline$inlineCache(new SubMain(), true)) != (SubMain.class)) { throw new java.lang.Error("Unexpected return value"); } Main.$noinline$stackOverflow(new Main(), false); Main.$noinline$stackOverflow(new SubMain(), true); }


public final android.content.IContentProvider acquireProvider(android.content.Context c, java.lang.String auth, int userId, boolean stable) { final android.content.IContentProvider provider = acquireExistingProvider(c, auth, userId, stable); if (provider != null) { return provider; } android.app.IActivityManager.ContentProviderHolder holder = null; try { holder = android.app.ActivityManagerNative.getDefault().getContentProvider(getApplicationThread(), auth, userId, stable); } catch (android.os.RemoteException ex) { } if (holder == null) { android.util.Slog.e(android.app.ActivityThread.TAG, ("Failed to find provider info for " + auth)); return null; } holder = installProvider(c, holder, holder.info, true, holder.noReleaseNeeded, stable); return holder.provider; }
private boolean addint2D(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_reduce_backward s) { final int dimX = 450; final int dimY = 225; final int[] inputArray = createInputArrayInt((dimX * dimY), 1, (1 << 13)); com.android.rs.test.Type.Builder typeBuilder = new com.android.rs.test.Type.Builder(RS, com.android.rs.test.Element.I32(RS)); typeBuilder.setX(dimX).setY(dimY); com.android.rs.test.Allocation inputAllocation = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); inputAllocation.copy2DRangeFrom(0, 0, dimX, dimY, inputArray); final int javaRslt = addint(inputArray); final int rsRslt = s.reduce_addint(inputAllocation).get(); return result("addint2D", javaRslt, rsRslt); }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeString(mNetworkSpecifier); dest.writeInt(mSignalStrength); }
@javax.annotation.Nonnull public com.android.sched.util.config.GatherConfigBuilder getDefaultConfigBuilder() throws com.android.jack.IllegalOptionsException, java.io.IOException { ensurePluginManager(); com.android.sched.util.config.GatherConfigBuilder configBuilder = new com.android.sched.util.config.GatherConfigBuilder(sanityChecks, getPluginManager().getReflectionManager(com.android.sched.reflections.ReflectionFactory.getManager())); configBuilder.setCodecContext(codecContext); java.lang.String resourceName = "/config.properties"; java.io.InputStream is = com.android.jack.Main.class.getResourceAsStream(resourceName); if (is != null) { try { configBuilder.load(is, new com.android.sched.util.location.StringLocation(("resource " + resourceName))); } finally { is.close(); } } return configBuilder; }
private void onDeviceChange(boolean recomputeLayout) { if ((mDisableUpdates) > 0) { return; } java.lang.String newConfigName = null; int deviceIndex = mDeviceCombo.getSelectionIndex(); if (deviceIndex != (-1)) { if (deviceIndex == ((mDeviceCombo.getItemCount()) - 1)) { onCustomDeviceConfig(); return; } if ((mState.device) != null) { int index = mDeviceConfigCombo.getSelectionIndex(); if (index != (-1)) { com.android.ide.common.resources.configuration.FolderConfiguration oldConfig = mState.device.getFolderConfigByName(mDeviceConfigCombo.getItem(index)); com.android.ide.eclipse.adt.internal.sdk.LayoutDevice newDevice = mDeviceList.get(deviceIndex); newConfigName = getClosestMatch(oldConfig, newDevice.getConfigs()); } } mState.device = mDeviceList.get(deviceIndex); } else { mState.device = null; } fillConfigCombo(newConfigName); computeCurrentConfig(); if (recomputeLayout) { onDeviceConfigChange(); } }

@android.platform.test.annotations.Presubmit public void testMoveTaskBetweenDisplays() throws java.lang.Exception { if (!(supportsMultiDisplay())) { return; } final android.server.cts.DisplayState newDisplay = new android.server.cts.VirtualDisplayBuilder(this).build(); mAmWmState.assertVisibility(android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY, true); mAmWmState.assertFocusedActivity("Virtual display activity must be focused", android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY); final int defaultDisplayStackId = mAmWmState.getAmState().getFocusedStackId(); android.server.cts.ActivityManagerState.ActivityStack focusedStack = mAmWmState.getAmState().getStackById(defaultDisplayStackId); assertEquals("Focus must remain on primary display", android.server.cts.ActivityAndWindowManagersState.DEFAULT_DISPLAY_ID, focusedStack.mDisplayId); launchActivityOnDisplay(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, newDisplay.mDisplayId); mAmWmState.assertFocusedActivity("Focus must be on secondary display", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); int focusedStackId = mAmWmState.getAmState().getFocusedStackId(); focusedStack = mAmWmState.getAmState().getStackById(focusedStackId); assertEquals("Focused stack must be on secondary display", newDisplay.mDisplayId, focusedStack.mDisplayId); moveActivityToStack(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, defaultDisplayStackId); mAmWmState.waitForFocusedStack(mDevice, defaultDisplayStackId); mAmWmState.assertFocusedActivity("Focus must be on moved activity", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); focusedStackId = mAmWmState.getAmState().getFocusedStackId(); focusedStack = mAmWmState.getAmState().getStackById(focusedStackId); assertEquals("Focus must return to primary display", android.server.cts.ActivityAndWindowManagersState.DEFAULT_DISPLAY_ID, focusedStack.mDisplayId); }

public java.net.SocketAddress getsockname(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;

public void saveUserDevices() { synchronized(com.android.sdklib.devices.DeviceManager.sLock) { if (((com.android.sdklib.devices.DeviceManager.mUserDevices) != null) && ((com.android.sdklib.devices.DeviceManager.mUserDevices.size()) != 0)) { java.io.File userDevicesFile; try { userDevicesFile = new java.io.File(com.android.prefs.AndroidLocation.getFolder(), com.android.SdkConstants.FN_DEVICES_XML); com.android.sdklib.devices.DeviceWriter.writeToXml(new java.io.FileOutputStream(userDevicesFile), com.android.sdklib.devices.DeviceManager.mUserDevices); } catch (com.android.prefs.AndroidLocation.AndroidLocationException e) { mLog.warning("Couldn't find user directory: %1$s", e.getMessage()); } catch (java.io.FileNotFoundException e) { mLog.warning("Couldn't open file: %1$s", e.getMessage()); } catch (javax.xml.parsers.ParserConfigurationException e) { mLog.warning("Error writing file: %1$s", e.getMessage()); } catch (javax.xml.transform.TransformerFactoryConfigurationError e) { mLog.warning("Error writing file: %1$s", e.getMessage()); } catch (javax.xml.transform.TransformerException e) { mLog.warning("Error writing file: %1$s", e.getMessage()); } } } }
private static int preloadDrawables(dalvik.system.VMRuntime runtime, android.content.res.TypedArray ar) { int N = ar.length(); for (int i = 0; i < N; i++) { if ((android.os.Debug.getGlobalAllocSize()) > (com.android.internal.os.ZygoteInit.PRELOAD_GC_THRESHOLD)) { if (false) { android.util.Log.v(com.android.internal.os.ZygoteInit.TAG, (" GC at " + (android.os.Debug.getGlobalAllocSize()))); } java.lang.System.gc(); runtime.runFinalizationSync(); android.os.Debug.resetGlobalAllocSize(); } int id = ar.getResourceId(i, 0); if (false) { android.util.Log.v(com.android.internal.os.ZygoteInit.TAG, ("Preloading resource #" + (java.lang.Integer.toHexString(id)))); } if (id != 0) { android.graphics.drawable.Drawable dr = com.android.internal.os.ZygoteInit.mResources.getDrawable(id); if (((dr.getChangingConfigurations()) & (~(android.content.pm.ActivityInfo.CONFIG_FONT_SCALE))) != 0) { android.util.Log.w(com.android.internal.os.ZygoteInit.TAG, (((("Preloaded drawable resource #0x" + (java.lang.Integer.toHexString(id))) + " (") + (ar.getString(i))) + ") that varies with configuration!!")); } } } return N; }
public com.android.builder.internal.packaging.Packager.JarStatus addResourcesFromJar(java.io.File jarFile) throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SealedPackageException { if (mIsSealed) { throw new com.android.builder.packaging.SealedPackageException("APK is already sealed"); } try { mLogger.verbose("%s:", jarFile); mFilter.reset(jarFile); java.io.FileInputStream fis = new java.io.FileInputStream(jarFile); mBuilder.writeZip(fis, mFilter); return new com.android.builder.internal.packaging.Packager.JarStatusImpl(mFilter.getNativeLibs(), mFilter.getNativeLibsConflict()); } catch (com.android.builder.packaging.DuplicateFileException e) { mBuilder.cleanUp(); throw e; } catch (java.lang.Exception e) { mBuilder.cleanUp(); throw new com.android.builder.packaging.PackagerException(e, "Failed to add %s", jarFile); } }
public void testTunneledVideoPlayback() throws java.lang.Exception { if (!(isVideoFeatureSupported(MediaFormat.MIMETYPE_VIDEO_AVC, CodecCapabilities.FEATURE_TunneledPlayback))) { android.cts.util.MediaUtils.skipTest(android.media.cts.DecoderTest.TAG, "No tunneled video playback codec found!"); return; } android.media.AudioManager am = ((android.media.AudioManager) (mContext.getSystemService(Context.AUDIO_SERVICE))); mMediaCodecPlayer = new android.media.cts.MediaCodecTunneledPlayer(getActivity().getSurfaceHolder(), true, am.generateAudioSessionId()); mMediaCodecPlayer.setAudioDataSource(android.media.cts.DecoderTest.AUDIO_URL, null); mMediaCodecPlayer.setVideoDataSource(android.media.cts.DecoderTest.VIDEO_URL, null); assertTrue("MediaCodecPlayer.start() failed!", mMediaCodecPlayer.start()); assertTrue("MediaCodecPlayer.prepare() failed!", mMediaCodecPlayer.prepare()); mMediaCodecPlayer.startThread(); long timeOut = (java.lang.System.currentTimeMillis()) + (4 * (android.media.cts.DecoderTest.PLAY_TIME_MS)); while ((timeOut > (java.lang.System.currentTimeMillis())) && (!(mMediaCodecPlayer.isEnded()))) { java.lang.Thread.sleep(android.media.cts.DecoderTest.SLEEP_TIME_MS); if ((mMediaCodecPlayer.getCurrentPosition()) >= (mMediaCodecPlayer.getDuration())) { android.util.Log.d(android.media.cts.DecoderTest.TAG, ((("testTunneledVideoPlayback -- current pos = " + (mMediaCodecPlayer.getCurrentPosition())) + ">= duration = ") + (mMediaCodecPlayer.getDuration()))); break; } } assertTrue("Tunneled video playback timeout exceeded!", (timeOut > (java.lang.System.currentTimeMillis()))); android.util.Log.d(android.media.cts.DecoderTest.TAG, "playVideo player.reset()"); mMediaCodecPlayer.reset(); }


void readCharacteristic(int clientIf, java.lang.String address, int srvcType, int srvcInstanceId, java.util.UUID srvcUuid, int charInstanceId, java.util.UUID charUuid, int authReq) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if ((isRestrictedCharUuid(charUuid)) || (isRestrictedSrvcUuid(srvcUuid))) { enforcePrivilegedPermission(); } if (com.android.bluetooth.gatt.GattService.VDBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ("readCharacteristic() - address=" + address)); java.lang.Integer connId = mClientMap.connIdByAddress(clientIf, address); if (connId != null) gattClientReadCharacteristicNative(connId, srvcType, srvcInstanceId, srvcUuid.getLeastSignificantBits(), srvcUuid.getMostSignificantBits(), charInstanceId, charUuid.getLeastSignificantBits(), charUuid.getMostSignificantBits(), authReq); else android.util.Log.e(com.android.bluetooth.gatt.GattService.TAG, (("readCharacteristic() - No connection for " + address) + "...")); }
private void testExplicitPositionMatchParent() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; params.x = 100; params.y = 100; }); }

final void releaseTheme(int theme) { synchronized(this) { deleteTheme(theme); decRefsLocked(theme); } }
@org.junit.Test public void testCompile022() throws java.lang.Exception { properties.clear(); properties.put("jack.optimization.enum.switch", "feedback"); java.lang.String packageName = "com.android.jack.switchstatement.test022.jack"; java.lang.String classPrefix = (packageName.replace('.', '_')) + "_"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put("Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo("java_lang_Thread$State", true)); checkCompiledCode(packageName, input); }
public void setsockoptInt(java.io.FileDescriptor fd, int level, int option, int value) throws android.system.ErrnoException;
@java.lang.Override public void pauseBatchedScan() { synchronized(mSettingsLock) { if (com.android.server.wifi.scanner.SupplicantWifiScannerImpl.DBG) android.util.Log.d(com.android.server.wifi.scanner.SupplicantWifiScannerImpl.TAG, "Pausing scan"); if ((mPendingBackgroundScanSettings) == null) { mPendingBackgroundScanSettings = mBackgroundScanSettings; mPendingBackgroundScanEventHandler = mBackgroundScanEventHandler; } mBackgroundScanSettings = null; mBackgroundScanEventHandler = null; mBackgroundScanPeriodPending = false; mBackgroundScanPaused = true; unscheduleScansLocked(); android.net.wifi.WifiScanner[] results = getLatestBatchedScanResults(true); if ((mPendingBackgroundScanEventHandler) != null) { mPendingBackgroundScanEventHandler.onScanPaused(results); } } processPendingScans(); }
private void testConnectViaHttpProxyToHttps(libcore.java.net.URLConnectionTest.ProxyConfig proxyConfig) throws java.lang.Exception { TestSSLContext testSSLContext = TestSSLContext.create(); libcore.java.net.URLConnectionTest.RecordingHostnameVerifier hostnameVerifier = new libcore.java.net.URLConnectionTest.RecordingHostnameVerifier(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), true); server.enqueue(new com.google.mockwebserver.MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders()); server.enqueue(new com.google.mockwebserver.MockResponse().setBody("this response comes via a secure proxy")); server.play(); java.net.URL url = new java.net.URL("https://android.com/foo"); javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (proxyConfig.connect(server, url))); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); connection.setHostnameVerifier(hostnameVerifier); assertContent("this response comes via a secure proxy", connection); com.google.mockwebserver.RecordedRequest connect = server.takeRequest(); assertEquals("Connect line failure on proxy", "CONNECT android.com:443 HTTP/1.1", connect.getRequestLine()); assertContains(connect.getHeaders(), "Host: android.com"); com.google.mockwebserver.RecordedRequest get = server.takeRequest(); assertEquals("GET /foo HTTP/1.1", get.getRequestLine()); assertContains(get.getHeaders(), "Host: android.com"); assertEquals(java.util.Arrays.asList("verify android.com"), hostnameVerifier.calls); }

private void removePackageDataLI(com.android.server.pm.PackageSetting ps, com.android.server.pm.PackageManagerService.PackageRemovedInfo outInfo, int flags, boolean writeSettings) { java.lang.String packageName = ps.name; removePackageLI(ps, ((flags & (com.android.server.pm.PackageManagerService.REMOVE_CHATTY)) != 0)); final com.android.server.pm.PackageSetting deletedPs; synchronized(mPackages) { deletedPs = mSettings.mPackages.get(packageName); if (outInfo != null) { outInfo.removedPackage = packageName; outInfo.removedUsers = (deletedPs != null) ? deletedPs.queryInstalledUsers(com.android.server.pm.PackageManagerService.sUserManager.getUserIds(), true) : null; } } if ((flags & (android.content.pm.PackageManager.DELETE_KEEP_DATA)) == 0) { removeDataDirsLI(packageName); schedulePackageCleaning(packageName, UserHandle.USER_ALL, true); } synchronized(mPackages) { if (deletedPs != null) { if ((flags & (android.content.pm.PackageManager.DELETE_KEEP_DATA)) == 0) { if (outInfo != null) { outInfo.removedAppId = mSettings.removePackageLPw(packageName); } if (deletedPs != null) { updatePermissionsLPw(deletedPs.name, null, 0); if ((deletedPs.sharedUser) != null) { mSettings.updateSharedUserPermsLPw(deletedPs, mGlobalGids); } } clearPackagePreferredActivitiesLPw(deletedPs.name, UserHandle.USER_ALL); } } if (writeSettings) { mSettings.writeLPr(); } } }
boolean finishDisabledPackageActivitiesLocked(java.lang.String packageName, java.util.Set<java.lang.String> filterByClasses, boolean doit, boolean evenPersistent, int userId) { boolean didSomething = false; for (int displayNdx = (mActivityDisplays.size()) - 1; displayNdx >= 0; --displayNdx) { final java.util.ArrayList<com.android.server.am.ActivityStack> stacks = mActivityDisplays.valueAt(displayNdx).mStacks; final int numStacks = stacks.size(); for (int stackNdx = 0; stackNdx < numStacks; ++stackNdx) { final com.android.server.am.ActivityStack stack = stacks.get(stackNdx); if (stack.finishDisabledPackageActivitiesLocked(packageName, filterByClasses, doit, evenPersistent, userId)) { didSomething = true; } } } return didSomething; }


@java.lang.Override @com.android.annotations.NonNull public java.util.List<com.android.builder.core.DefaultProductFlavor> getProductFlavors() { return getVariantData().getVariantConfiguration().getFlavorConfigs(); }

public void setuid(int uid) throws android.system.ErrnoException;
private static java.util.TimeZone getCustomTimeZone(java.lang.String id) { java.util.regex.Matcher m = java.util.TimeZone.CUSTOM_ZONE_ID_PATTERN.matcher(id); if (!(m.matches())) { return null; } int hour; int minute = 0; try { hour = java.lang.Integer.parseInt(m.group(1)); if ((m.group(3)) != null) { minute = java.lang.Integer.parseInt(m.group(3)); } } catch (java.lang.NumberFormatException impossible) { throw new java.lang.AssertionError(impossible); } if ((((hour < 0) || (hour > 23)) || (minute < 0)) || (minute > 59)) { return null; } char sign = id.charAt(3); int raw = (hour * 3600000) + (minute * 60000); if (sign == '-') { raw = -raw; } java.lang.String cleanId = java.lang.String.format("GMT%c%02d:%02d", sign, hour, minute); return new java.util.SimpleTimeZone(raw, cleanId); }
public static long AddNeg2(long arg1, long arg2) { long temp = -arg2; return (arg1 + temp) | (arg1 + temp); }


@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("okToConnect: cannot connect to " + device) + " : quiet mode enabled")); return false; } if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("okToConnect: cannot connect to " + device) + " : too many connected devices")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((((("okToConnect: cannot connect to " + device) + " : priority=") + priority) + " bondState=") + bondState)); return false; } if (priority <= (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((("okToConnect: cannot connect to " + device) + " : priority=") + priority)); return false; } return true; }




@javax.annotation.Nonnull public com.android.jack.ir.ast.JType getType() { return type; }

private static int wordCount(com.android.jack.dx.rop.code.RegisterSpecList regs) { int sz = regs.size(); if (sz > (com.android.jack.dx.dex.code.form.Form35c.MAX_NUM_OPS)) { return -1; } int result = 0; for (int i = 0; i < sz; i++) { com.android.jack.dx.rop.code.RegisterSpec one = regs.get(i); result += one.getCategory(); if (!(unsignedFitsInNibble((((one.getReg()) + (one.getCategory())) - 1)))) { return -1; } } return result <= (com.android.jack.dx.dex.code.form.Form35c.MAX_NUM_OPS) ? result : -1; }
private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { android.net.ConnectivityManager.checkCallbackNotNull(callback); com.android.internal.util.Preconditions.checkArgument(((action == (android.net.ConnectivityManager.REQUEST)) || (need != null)), "null NetworkCapabilities"); final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { if (callback.isRegistered()) { android.util.Log.e(android.net.ConnectivityManager.TAG, "NetworkCallback was already registered"); } android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throw android.net.ConnectivityManager.convertServiceException(e); } return request; }
private static void checkSetTime(long time) throws java.io.IOException { java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setTime(time); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(time, zipFile.getEntry("x").getTime()); zipFile.close(); }
public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_alloc s = new com.android.rs.test.ScriptC_alloc(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_root(s.get_aRaw()); s.invoke_alloc_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }
protected void libToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> commandLine, @javax.annotation.Nonnull java.lang.String classpath, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { buildJackCall(commandLine); commandLine.add("--verbose"); commandLine.add(verbosityLevel.name()); commandLine.add("--sanity-checks"); commandLine.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { commandLine.add("--incremental-folder"); commandLine.add(incrementalFolder.getAbsolutePath()); } for (java.io.File res : resImport) { commandLine.add("--import-resource"); commandLine.add(res.getPath()); } for (java.io.File meta : metaImport) { commandLine.add("--import-meta"); commandLine.add(meta.getPath()); } if ((outputJack) != null) { if (zipOutputJackFiles) { commandLine.add("--output-jack"); } else { commandLine.add("--output-jack-dir"); } commandLine.add(outputJack.getAbsolutePath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, commandLine); if (!(classpath.equals(""))) { commandLine.add("--classpath"); commandLine.add(classpath); } for (java.io.File jarjarFile : jarjarRules) { commandLine.add("--config-jarjar"); commandLine.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { commandLine.add("--config-proguard"); commandLine.add(flags.getAbsolutePath()); } if (withDebugInfos) { commandLine.add("-g"); } addPluginPath(commandLine); addPluginNames(commandLine); libToImportStaticLibs(commandLine, in); }


public void paintControl(org.eclipse.swt.events.PaintEvent e) { synchronized(this) { if (((tree) != null) && ((viewport) != null)) { e.gc.setBackground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_WHITE)); e.gc.fillRectangle(0, 0, getBounds().width, getBounds().height); e.gc.setTransform(transform); org.eclipse.swt.graphics.Path connectionPath = new org.eclipse.swt.graphics.Path(org.eclipse.swt.widgets.Display.getDefault()); paintRecursive(e.gc, tree, connectionPath); e.gc.drawPath(connectionPath); connectionPath.dispose(); e.gc.setAlpha(80); e.gc.setBackground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_DARK_GRAY)); e.gc.fillRectangle(((int) (viewport.x)), ((int) (viewport.y)), ((int) (java.lang.Math.ceil(viewport.width))), ((int) (java.lang.Math.ceil(viewport.height)))); e.gc.setAlpha(255); e.gc.setForeground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_BLACK)); e.gc.setLineWidth(((int) (java.lang.Math.ceil((2 / (scale)))))); e.gc.drawRectangle(((int) (viewport.x)), ((int) (viewport.y)), ((int) (java.lang.Math.ceil(viewport.width))), ((int) (java.lang.Math.ceil(viewport.height)))); } } }
@org.junit.Test public void testSetWifiDisabledSuccess() throws java.lang.Exception { when(mSettingsStore.handleWifiToggled(eq(false))).thenReturn(true); assertTrue(mWifiServiceImpl.setWifiEnabled(com.android.server.wifi.WifiServiceImplTest.TEST_PACKAGE_NAME, false)); verify(mWifiController).obtainMessageAndSend(eq(com.android.server.wifi.WifiController.CMD_WIFI_TOGGLED)); }
public void writeBlobTo(java.io.File blobRootFolder) throws java.io.IOException { javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance(); factory.setNamespaceAware(true); factory.setValidating(false); factory.setIgnoringComments(true); javax.xml.parsers.DocumentBuilder builder; try { builder = factory.newDocumentBuilder(); org.w3c.dom.Document document = builder.newDocument(); org.w3c.dom.Node rootNode = document.createElement(com.android.builder.resources.ResourceMerger.NODE_MERGER); document.appendChild(rootNode); for (com.android.builder.resources.ResourceSet resourceSet : mResourceSets) { org.w3c.dom.Node resourceSetNode = document.createElement(com.android.builder.resources.ResourceMerger.NODE_RESOURCE_SET); rootNode.appendChild(resourceSetNode); resourceSet.appendToXml(resourceSetNode, document); } java.lang.String content = com.android.ide.common.xml.XmlPrettyPrinter.prettyPrint(document); blobRootFolder.mkdirs(); com.google.common.io.Files.write(content, new java.io.File(blobRootFolder, com.android.builder.resources.ResourceMerger.FN_MERGER_XML), Charsets.UTF_8); } catch (javax.xml.parsers.ParserConfigurationException e) { throw new java.io.IOException(e); } }
public void test_SSLSocket_startHandshake() throws java.lang.Exception { final libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create(); SSLSocket client = ((SSLSocket) (c.clientContext.getSocketFactory().createSocket(c.host, c.port))); final SSLSocket server = ((SSLSocket) (c.serverSocket.accept())); java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newSingleThreadExecutor(); java.util.concurrent.Future<java.lang.Void> future = executor.submit(new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { server.startHandshake(); assertNotNull(server.getSession()); try { server.getSession().getPeerCertificates(); fail(); } catch (javax.net.ssl.SSLPeerUnverifiedException expected) { } java.security.cert.Certificate[] localCertificates = server.getSession().getLocalCertificates(); assertNotNull(localCertificates); libcore.java.security.TestKeyStore.assertChainLength(localCertificates); assertNotNull(localCertificates[0]); libcore.javax.net.ssl.TestSSLContext.assertServerCertificateChain(c.serverTrustManager, localCertificates); libcore.javax.net.ssl.TestSSLContext.assertCertificateInKeyStore(localCertificates[0], c.serverKeyStore); return null; } }); executor.shutdown(); client.startHandshake(); assertNotNull(client.getSession()); assertNull(client.getSession().getLocalCertificates()); java.security.cert.Certificate[] peerCertificates = client.getSession().getPeerCertificates(); assertNotNull(peerCertificates); libcore.java.security.TestKeyStore.assertChainLength(peerCertificates); assertNotNull(peerCertificates[0]); libcore.javax.net.ssl.TestSSLContext.assertServerCertificateChain(c.clientTrustManager, peerCertificates); libcore.javax.net.ssl.TestSSLContext.assertCertificateInKeyStore(peerCertificates[0], c.serverKeyStore); future.get(); client.close(); server.close(); c.close(); }
@java.lang.Override public void onResume() { super.onResume(); createPreferenceHierarchy(); final com.android.internal.widget.LockPatternUtils lockPatternUtils = mChooseLockSettingsHelper.utils(); if ((mVisiblePattern) != null) { mVisiblePattern.setChecked(lockPatternUtils.isVisiblePatternEnabled()); } if ((mTactileFeedback) != null) { mTactileFeedback.setChecked(lockPatternUtils.isTactileFeedbackEnabled()); } mShowPassword.setChecked(((Settings.System.getInt(getContentResolver(), Settings.System.TEXT_SHOW_PASSWORD, 1)) != 0)); android.security.KeyStore.State state = android.security.KeyStore.getInstance().state(); mResetCredentials.setEnabled((state != (KeyStore.State.UNINITIALIZED))); }
private void onInBandRing(int inBand, byte[] address) { android.util.Log.w(com.android.bluetooth.hfpclient.NativeInterface.TAG, "onInBandRing not supported"); }

@com.android.annotations.Nullable public static com.android.build.SplitOutput computeBestOutput(@com.android.annotations.NonNull java.util.List<? extends com.android.build.SplitOutput> outputs, int density, @com.android.annotations.NonNull java.util.List<java.lang.String> abis) { com.android.resources.Density densityEnum = com.android.resources.Density.getEnum(density); java.lang.String densityValue; if (densityEnum == null) { densityValue = null; } else { densityValue = densityEnum.getResourceValue(); } com.android.build.SplitOutput fullMatch = null; int fullMatchAbiLevel = java.lang.Integer.MAX_VALUE; com.android.build.SplitOutput universalMatch = null; com.android.build.SplitOutput universalDensityMatch = null; int densityMatchAbiLevel = java.lang.Integer.MAX_VALUE; com.android.build.SplitOutput universalAbiMatch = null; for (com.android.build.SplitOutput output : outputs) { java.lang.String densityFilter = output.getDensityFilter(); java.lang.String abiFilter = output.getAbiFilter(); boolean isUniversalDensityMatch = false; if (densityFilter != null) { if (!(densityFilter.equals(densityValue))) { continue; } } else { isUniversalDensityMatch = true; } if (abiFilter != null) { int levelMatch = abis.indexOf(abiFilter); if (levelMatch == (-1)) { levelMatch = java.lang.Integer.MAX_VALUE; } if (isUniversalDensityMatch) { if (levelMatch < densityMatchAbiLevel) { densityMatchAbiLevel = levelMatch; universalDensityMatch = output; } } else { if (levelMatch < fullMatchAbiLevel) { fullMatchAbiLevel = levelMatch; fullMatch = output; } } } else { if (isUniversalDensityMatch) { universalMatch = output; } else { universalAbiMatch = output; } } } if (fullMatch != null) { return fullMatch; } if (universalDensityMatch != null) { return universalDensityMatch; } if (universalAbiMatch != null) { return universalAbiMatch; } return universalMatch; }
@java.lang.Override public void run() { do { if ((mAdbConnection) == null) { com.android.ddmlib.Log.d("DeviceMonitor", "Opening adb connection"); mAdbConnection = com.android.ddmlib.DeviceMonitor.openAdbConnection(); if ((mAdbConnection) == null) { (mConnectionAttempt)++; com.android.ddmlib.Log.e("DeviceMonitor", ("Connection attempts: " + (mConnectionAttempt))); if ((mConnectionAttempt) > 10) { if (!(mBridge.startAdb())) { (mRestartAttemptCount)++; com.android.ddmlib.Log.e("DeviceMonitor", ("adb restart attempts: " + (mRestartAttemptCount))); } else { com.android.ddmlib.Log.i("DeviceMonitor", "adb restarted"); mRestartAttemptCount = 0; } } com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly(1, java.util.concurrent.TimeUnit.SECONDS); } else { com.android.ddmlib.Log.d("DeviceMonitor", "Connected to adb for device monitoring"); mConnectionAttempt = 0; } } try { if (((mAdbConnection) != null) && (!(mMonitoring))) { mMonitoring = sendDeviceListMonitoringRequest(); } if (mMonitoring) { int length = com.android.ddmlib.DeviceMonitor.readLength(mAdbConnection, mLengthBuffer); if (length >= 0) { processIncomingDeviceData(length); mInitialDeviceListDone = true; } } } catch (java.nio.channels.AsynchronousCloseException ace) { } catch (com.android.ddmlib.TimeoutException ioe) { handleExceptionInMonitorLoop(ioe); } catch (java.io.IOException ioe) { handleExceptionInMonitorLoop(ioe); } } while (!(mQuit) ); }


public static void testAsType() throws java.lang.Throwable { java.lang.invoke.MethodHandle mh = java.lang.invoke.MethodHandles.lookup().findVirtual(java.lang.String.class, "concat", java.lang.invoke.MethodType.methodType(java.lang.String.class, java.lang.String.class)); java.lang.invoke.MethodHandle asType = mh.asType(java.lang.invoke.MethodType.methodType(java.lang.Object.class, java.lang.CharSequence.class, java.lang.String.class)); java.lang.Object obj = asType.invokeExact(((java.lang.CharSequence) (Main.getSequence())), "bar"); Main.assertEquals("foobar", ((java.lang.String) (obj))); try { java.lang.String str = ((java.lang.String) (asType.invokeExact(((java.lang.CharSequence) (Main.getSequence())), "bar"))); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } try { java.lang.String str = ((java.lang.String) (asType.invokeExact("baz", "bar"))); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } try { mh.asType(java.lang.invoke.MethodType.methodType(int.class, java.lang.String.class, java.lang.String.class)); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } try { mh.asType(java.lang.invoke.MethodType.methodType(java.lang.String.class, int.class, java.lang.String.class)); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } }
@java.lang.Override public void traverse(@javax.annotation.Nonnull com.android.jack.ir.ast.JVisitor visitor) { if (visitor.visit(this)) { if (visitor.needLoading()) { loadSubPackages(); loadClassesAndInterfaces(); } visitor.accept(subPackages); visitor.accept(declaredTypes); } visitor.endVisit(this); }
public void test_SetRoundingMode_Ljava_math_RoundingMode() { java.text.DecimalFormat decimalFormat = ((java.text.DecimalFormat) (java.text.DecimalFormat.getInstance(java.util.Locale.US))); decimalFormat.setMaximumFractionDigits(0); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_DOWN); java.lang.String result = decimalFormat.format(11.3); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_DOWN", "11", result); result = decimalFormat.format(11.5); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_DOWN", "11", result); result = decimalFormat.format(11.6); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_DOWN", "12", result); decimalFormat.setRoundingMode(java.math.RoundingMode.CEILING); result = decimalFormat.format(11.3); assertEquals("Incorrect RoundingMode behavior: RoundingMode.CEILING", "12", result); result = decimalFormat.format((-11.5)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.CEILING", "-11", result); decimalFormat.setRoundingMode(java.math.RoundingMode.DOWN); result = decimalFormat.format(11.3); assertEquals("Incorrect RoundingMode behavior: RoundingMode.DOWN", "11", result); result = decimalFormat.format((-11.5)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.DOWN", "-11", result); result = decimalFormat.format(0); assertEquals("Incorrect RoundingMode behavior: RoundingMode.DOWN", "0", result); decimalFormat.setRoundingMode(java.math.RoundingMode.FLOOR); result = decimalFormat.format(11.3); assertEquals("Incorrect RoundingMode behavior: RoundingMode.FLOOR", "11", result); result = decimalFormat.format((-11.5)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.FLOOR", "-12", result); result = decimalFormat.format(0); assertEquals("Incorrect RoundingMode behavior: RoundingMode.FLOOR", "0", result); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_EVEN); result = decimalFormat.format(5.5); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_EVEN", "6", result); result = decimalFormat.format((-5.5)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_EVEN", "-6", result); result = decimalFormat.format(0.2); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_EVEN", "0", result); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_UP); result = decimalFormat.format(5.5); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_UP", "6", result); result = decimalFormat.format((-5.5)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_UP", "-6", result); result = decimalFormat.format(0.2); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_UP", "0", result); result = decimalFormat.format((-0.2)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_UP", "-0", result); decimalFormat.setRoundingMode(java.math.RoundingMode.UP); result = decimalFormat.format(5.5); assertEquals("Incorrect RoundingMode behavior: RoundingMode.UP", "6", result); result = decimalFormat.format((-5.5)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.UP", "-6", result); result = decimalFormat.format(0.2); assertEquals("Incorrect RoundingMode behavior: RoundingMode.UP", "1", result); result = decimalFormat.format((-0.2)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.UP", "-1", result); decimalFormat.setRoundingMode(java.math.RoundingMode.UNNECESSARY); try { result = decimalFormat.format(5.5); fail("ArithmeticException expected: RoundingMode.UNNECESSARY"); } catch (java.lang.ArithmeticException e) { } result = decimalFormat.format(1.0); assertEquals("Incorrect RoundingMode behavior: RoundingMode.UNNECESSARY", "1", result); result = decimalFormat.format((-1.0)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.UNNECESSARY", "-1", result); try { decimalFormat.setRoundingMode(null); fail("NullPointerException expected"); } catch (java.lang.NullPointerException e) { } decimalFormat.setMaximumFractionDigits(3); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_DOWN); result = decimalFormat.format(11.5653); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_DOWN", "11.565", result); result = decimalFormat.format(11.5655); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_DOWN", "11.565", result); result = decimalFormat.format(11.5656); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_DOWN", "11.566", result); decimalFormat.setRoundingMode(java.math.RoundingMode.CEILING); result = decimalFormat.format(11.5653); assertEquals("Incorrect RoundingMode behavior: RoundingMode.CEILING", "11.566", result); result = decimalFormat.format((-11.5653)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.CEILING", "-11.565", result); decimalFormat.setRoundingMode(java.math.RoundingMode.DOWN); result = decimalFormat.format(11.5653); assertEquals("Incorrect RoundingMode behavior: RoundingMode.DOWN", "11.565", result); result = decimalFormat.format((-11.5653)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.DOWN", "-11.565", result); result = decimalFormat.format(0); assertEquals("Incorrect RoundingMode behavior: RoundingMode.DOWN", "0", result); decimalFormat.setRoundingMode(java.math.RoundingMode.FLOOR); result = decimalFormat.format(11.5653); assertEquals("Incorrect RoundingMode behavior: RoundingMode.FLOOR", "11.565", result); result = decimalFormat.format((-11.5655)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.FLOOR", "-11.566", result); result = decimalFormat.format(0); assertEquals("Incorrect RoundingMode behavior: RoundingMode.FLOOR", "0", result); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_EVEN); result = decimalFormat.format(11.5653); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_EVEN", "11.565", result); result = decimalFormat.format((-11.5655)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_EVEN", "-11.566", result); result = decimalFormat.format(11.5656); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_EVEN", "11.566", result); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_UP); result = decimalFormat.format(11.5653); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_UP", "11.565", result); result = decimalFormat.format((-11.5655)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_UP", "-11.566", result); result = decimalFormat.format(11.5656); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_UP", "11.566", result); decimalFormat.setRoundingMode(java.math.RoundingMode.UP); result = decimalFormat.format(11.5653); assertEquals("Incorrect RoundingMode behavior: RoundingMode.UP", "11.566", result); result = decimalFormat.format((-11.5655)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.UP", "-11.566", result); decimalFormat.setRoundingMode(java.math.RoundingMode.UNNECESSARY); result = decimalFormat.format((-11.565)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.UNNECESSARY", "-11.565", result); result = decimalFormat.format(11.565); assertEquals("Incorrect RoundingMode behavior: RoundingMode.UNNECESSARY", "11.565", result); decimalFormat.setMaximumFractionDigits((-2)); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_DOWN); result = decimalFormat.format(11.3); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_DOWN", "11", result); result = decimalFormat.format(11.5); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_DOWN", "11", result); result = decimalFormat.format(11.6); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_DOWN", "12", result); decimalFormat.setRoundingMode(java.math.RoundingMode.CEILING); result = decimalFormat.format(11.3); assertEquals("Incorrect RoundingMode behavior: RoundingMode.CEILING", "12", result); result = decimalFormat.format((-11.5)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.CEILING", "-11", result); decimalFormat.setRoundingMode(java.math.RoundingMode.DOWN); result = decimalFormat.format(11.3); assertEquals("Incorrect RoundingMode behavior: RoundingMode.DOWN", "11", result); result = decimalFormat.format((-11.5)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.DOWN", "-11", result); result = decimalFormat.format(0); assertEquals("Incorrect RoundingMode behavior: RoundingMode.DOWN", "0", result); decimalFormat.setRoundingMode(java.math.RoundingMode.FLOOR); result = decimalFormat.format(11.3); assertEquals("Incorrect RoundingMode behavior: RoundingMode.FLOOR", "11", result); result = decimalFormat.format((-11.5)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.FLOOR", "-12", result); result = decimalFormat.format(0); assertEquals("Incorrect RoundingMode behavior: RoundingMode.FLOOR", "0", result); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_EVEN); result = decimalFormat.format(5.5); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_EVEN", "6", result); result = decimalFormat.format((-5.5)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_EVEN", "-6", result); result = decimalFormat.format(0.2); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_EVEN", "0", result); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_UP); result = decimalFormat.format(5.5); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_UP", "6", result); result = decimalFormat.format((-5.5)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_UP", "-6", result); result = decimalFormat.format(0.2); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_UP", "0", result); result = decimalFormat.format((-0.2)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.HALF_UP", "-0", result); decimalFormat.setRoundingMode(java.math.RoundingMode.UP); result = decimalFormat.format(5.5); assertEquals("Incorrect RoundingMode behavior: RoundingMode.UP", "6", result); result = decimalFormat.format((-5.5)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.UP", "-6", result); result = decimalFormat.format(0.2); assertEquals("Incorrect RoundingMode behavior: RoundingMode.UP", "1", result); result = decimalFormat.format((-0.2)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.UP", "-1", result); decimalFormat.setRoundingMode(java.math.RoundingMode.UNNECESSARY); result = decimalFormat.format(1.0); assertEquals("Incorrect RoundingMode behavior: RoundingMode.UNNECESSARY", "1", result); result = decimalFormat.format((-1.0)); assertEquals("Incorrect RoundingMode behavior: RoundingMode.UNNECESSARY", "-1", result); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_UP); decimalFormat.applyPattern(".##"); result = decimalFormat.format(0.125); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".13", result); result = decimalFormat.format(0.255); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".26", result); result = decimalFormat.format(0.732); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".73", result); result = decimalFormat.format(0.467); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".47", result); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_DOWN); decimalFormat.applyPattern(".##"); result = decimalFormat.format(0.125); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".12", result); result = decimalFormat.format(0.255); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".25", result); result = decimalFormat.format(0.732); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".73", result); result = decimalFormat.format(0.467); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".47", result); decimalFormat.setRoundingMode(java.math.RoundingMode.UP); decimalFormat.applyPattern(".##"); result = decimalFormat.format(0.125); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".13", result); result = decimalFormat.format(0.255); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".26", result); result = decimalFormat.format(0.732); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".74", result); result = decimalFormat.format(0.467); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".47", result); decimalFormat.setRoundingMode(java.math.RoundingMode.DOWN); decimalFormat.applyPattern(".##"); result = decimalFormat.format(0.125); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".12", result); result = decimalFormat.format(0.255); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".25", result); result = decimalFormat.format(0.732); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".73", result); result = decimalFormat.format(0.467); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".46", result); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_EVEN); decimalFormat.applyPattern(".##"); result = decimalFormat.format(0.125); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".12", result); result = decimalFormat.format(0.255); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".26", result); result = decimalFormat.format(0.732); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".73", result); result = decimalFormat.format(0.467); assertEquals("Incorrect RoundingMode behavior after applyPattern", ".47", result); }
public native void munmap(long address, long byteCount) throws libcore.io.ErrnoException;
public void lchown(java.lang.String path, int uid, int gid) throws libcore.io.ErrnoException { os.lchown(path, uid, gid); }
private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException { java.io.ObjectInputStream.GetField fields = stream.readFields(); final int serialVersionOnStream = fields.get("serialVersionOnStream", 0); currencySymbol = ((java.lang.String) (fields.get("currencySymbol", ""))); setDecimalSeparator(fields.get("decimalSeparator", '.')); setDigit(fields.get("digit", '#')); setGroupingSeparator(fields.get("groupingSeparator", ',')); infinity = ((java.lang.String) (fields.get("infinity", ""))); intlCurrencySymbol = ((java.lang.String) (fields.get("intlCurrencySymbol", ""))); setMinusSign(fields.get("minusSign", '-')); NaN = ((java.lang.String) (fields.get("NaN", ""))); setPatternSeparator(fields.get("patternSeparator", ';')); setPercent(fields.get("percent", '%')); setPerMill(fields.get("perMill", '\u2030')); setZeroDigit(fields.get("zeroDigit", '0')); locale = ((java.util.Locale) (fields.get("locale", null))); if (serialVersionOnStream == 0) { setMonetaryDecimalSeparator(getDecimalSeparator()); } else { setMonetaryDecimalSeparator(fields.get("monetarySeparator", '.')); } if (serialVersionOnStream == 0) { exponentSeparator = "E"; } else if (serialVersionOnStream < 3) { setExponentSeparator(java.lang.String.valueOf(fields.get("exponential", 'E'))); } else { setExponentSeparator(((java.lang.String) (fields.get("exponentialSeparator", "E")))); } try { currency = java.util.Currency.getInstance(intlCurrencySymbol); } catch (java.lang.IllegalArgumentException e) { currency = null; } }
private static int getCallFeatures(int videoState, boolean isPulledCall, boolean isStoreHd) { int features = 0; if (android.telecom.VideoProfile.isVideo(videoState)) { features |= android.provider.CallLog.Calls.FEATURES_VIDEO; } if (isPulledCall) { features |= android.provider.CallLog.Calls.FEATURES_PULLED_EXTERNALLY; } if (isStoreHd) { features |= android.provider.CallLog.Calls.FEATURES_HD_CALL; } return features; }
@org.junit.Test public void testDefaultMethod007() throws java.lang.Exception { run(DEFAULTMETHOD007); }
public void test_SSLSocket_getSupportedCipherSuites_names() throws java.lang.Exception { javax.net.ssl.SSLSocketFactory sf = ((javax.net.ssl.SSLSocketFactory) (javax.net.ssl.SSLSocketFactory.getDefault())); javax.net.ssl.SSLSocket ssl = ((javax.net.ssl.SSLSocket) (sf.createSocket())); java.lang.String[] cipherSuites = ssl.getSupportedCipherSuites(); libcore.java.security.StandardNames.assertSupportedCipherSuites(cipherSuites); assertNotSame(cipherSuites, ssl.getSupportedCipherSuites()); }
@javax.annotation.Nonnull private static com.android.jack.backend.jayce.JayceFileImporter getJayceFileImporter(@javax.annotation.Nonnull java.util.List<java.io.File> jayceImport, @javax.annotation.Nonnull com.android.jack.ir.ast.JPackage rootPackage, @javax.annotation.Nonnull com.android.jack.lookup.JPhantomLookup phantomLookup, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks) throws com.android.jack.JackFileException { java.util.List<com.android.sched.vfs.InputVDir> jackFilesToImport = new java.util.ArrayList<com.android.sched.vfs.InputVDir>(jayceImport.size()); com.android.sched.util.config.ReflectFactory<com.android.jack.jayce.JaycePackageLoader> factory = com.android.sched.util.config.ThreadConfig.get(com.android.jack.Jack.IMPORT_POLICY); for (final java.io.File jackFile : jayceImport) { try { com.android.sched.vfs.InputVDir vDir = com.android.jack.Jack.wrapAsVDir(jackFile, hooks); jackFilesToImport.add(vDir); com.android.jack.jayce.JaycePackageLoader rootPLoader = factory.create(vDir, phantomLookup); rootPackage.addLoader(rootPLoader); } catch (java.io.IOException ioException) { throw new com.android.jack.JackFileException(("Error importing jack container: " + (ioException.getMessage())), ioException); } } return new com.android.jack.backend.jayce.JayceFileImporter(jackFilesToImport); }

@org.junit.Test public void mul_double() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(MUL_DOUBLE).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }

@java.lang.Override public void setCallWaiting(boolean enable, int serviceClass, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_CALL_WAITING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " enable = ") + enable) + " serviceClass = ") + serviceClass)); } try { radioProxy.setCallWaiting(rr.mSerial, enable, serviceClass); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCallWaiting", e); } } }


@java.lang.Override public void run() { getActivity().runOnUiThread(new java.lang.Runnable() { @java.lang.Override public void run() { android.app.NotificationManager notificationManager = ((android.app.NotificationManager) (getActivity().getSystemService(Service.NOTIFICATION_SERVICE))); notificationManager.notify(notificationId, notification); getActivity().finish(); } }); }
@java.lang.Override public void handleChunk(com.android.ddmlib.Client client, int type, java.nio.ByteBuffer data, boolean isReply, int msgId) { }

private void addDexFolder(@com.android.annotations.NonNull java.io.File dexFolder) throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SealedPackageException { java.io.File[] files = dexFolder.listFiles(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File file, java.lang.String name) { return name.endsWith(SdkConstants.DOT_DEX); } }); if ((files != null) && ((files.length) > 0)) { for (java.io.File file : files) { addFile(file, file.getName()); } } }
@org.junit.Test public void testLamba007() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA007).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }


@java.lang.Override public void mkfifo(java.lang.String path, int mode) throws libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.mkfifo(path, mode); }
private void addMetaToOutputJackLib(com.android.jack.meta.Meta meta, com.android.jack.library.OutputJackLibrary ojl) throws java.io.IOException { com.android.sched.vfs.InputVFile inputFile = meta.getVFile(); com.android.sched.vfs.VPath path = meta.getPath(); com.android.sched.vfs.OutputVFile outputFile = ojl.createFile(FileType.JPP, path); java.io.InputStream is = null; try { is = inputFile.getInputStream(); com.android.sched.util.stream.ByteStreamSucker sucker = new com.android.sched.util.stream.ByteStreamSucker(is, outputFile.getOutputStream(), true); sucker.suck(); } finally { if (is != null) { is.close(); } } }
public com.android.builder.DefaultBuildType initWith(com.android.builder.DefaultBuildType that) { _initWith(that); setDebuggable(that.isDebuggable()); setJniDebugBuild(that.isJniDebugBuild()); setRenderscriptDebugBuild(that.isRenderscriptDebugBuild()); setRenderscriptOptimLevel(that.getRenderscriptOptimLevel()); setPackageNameSuffix(that.getPackageNameSuffix()); setVersionNameSuffix(that.getVersionNameSuffix()); setRunProguard(that.isRunProguard()); setZipAlign(that.isZipAlign()); setSigningConfig(that.getSigningConfig()); return this; }
@java.lang.Override public void processLibrary(java.lang.String libRootPath) { mJars.add(new java.io.File(((((libRootPath + "/") + (com.android.sdklib.SdkConstants.FD_OUTPUT)) + "/") + (com.android.sdklib.SdkConstants.FN_CLASSES_JAR)))); java.io.File libsFolder = new java.io.File(libRootPath, com.android.sdklib.SdkConstants.FD_NATIVE_LIBS); java.io.File[] jarFiles = libsFolder.listFiles(mFilter); if (jarFiles != null) { for (java.io.File jarFile : jarFiles) { mJars.add(jarFile); } } }
com.android.server.wifi.WifiConnectivityManager createConnectivityManager() { return new com.android.server.wifi.WifiConnectivityManager(mContext, mWifiStateMachine, mWifiScanner, mWifiConfigManager, mWifiInfo, mWifiNS, mScoreCache, mWifiLastResortWatchdog, mWifiMetrics, mLooper.getLooper(), mClock, true); }


@java.lang.Override public com.android.server.wifi.LogMessage trace(java.lang.String format) { return makeLogMessage(Log.DEBUG, format); }
public void testEnableCameraInManagedProfile() throws java.lang.Exception { mDevicePolicyManager.setCameraDisabled(mManagedProfileAdminComponent, false); assertFalse(mDevicePolicyManager.getCameraDisabled(mManagedProfileAdminComponent)); assertFalse(mDevicePolicyManager.getCameraDisabled(null)); checkCanOpenCamera(true); }
public boolean apply(boolean isSecondaryIcon) { if ((mMobileVisible) && (!(mIsAirplaneMode))) { if ((mLastMobileStrengthId) != (mMobileStrengthId)) { updateAnimatableIcon(mMobile, mMobileStrengthId); updateAnimatableIcon(mMobileDark, mMobileStrengthId); mLastMobileStrengthId = mMobileStrengthId; } if ((mLastMobileTypeId) != (mMobileTypeId)) { mMobileType.setImageResource(mMobileTypeId); mLastMobileTypeId = mMobileTypeId; } mMobileGroup.setContentDescription((((mMobileTypeDescription) + " ") + (mMobileDescription))); mMobileGroup.setVisibility(View.VISIBLE); } else { mMobileGroup.setVisibility(View.GONE); } mMobileGroup.setPaddingRelative((isSecondaryIcon ? mSecondaryTelephonyPadding : 0), 0, 0, 0); mMobile.setPaddingRelative((mIsMobileTypeIconWide ? mWideTypeIconStartPadding : mMobileDataIconStartPadding), 0, 0, 0); mMobileDark.setPaddingRelative((mIsMobileTypeIconWide ? mWideTypeIconStartPadding : mMobileDataIconStartPadding), 0, 0, 0); if (com.android.systemui.statusbar.SignalClusterView.DEBUG) android.util.Log.d(com.android.systemui.statusbar.SignalClusterView.TAG, java.lang.String.format("mobile: %s sig=%d typ=%d", (mMobileVisible ? "VISIBLE" : "GONE"), mMobileStrengthId, mMobileTypeId)); mMobileType.setVisibility(((mMobileTypeId) != 0 ? android.view.View.VISIBLE : android.view.View.GONE)); return mMobileVisible; }
@java.lang.Override public void registrationConnectedWithRadioTech(int imsRadioTech) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log(("registrationConnectedWithRadioTech :: imsRadioTech=" + imsRadioTech)); } synchronized(mRegistrationListeners) { mRegistrationListeners.forEach(( l) -> l.onImsConnected(imsRadioTech)); } }
private void applyLidSwitchState() { if (((mLidState) == (android.view.WindowManagerPolicy.WindowManagerFuncs.LID_CLOSED)) && (mLidControlsSleep)) { mPowerManager.goToSleep(android.os.SystemClock.uptimeMillis(), PowerManager.GO_TO_SLEEP_REASON_LID_SWITCH, PowerManager.GO_TO_SLEEP_FLAG_NO_DOZE); } synchronized(mLock) { updateWakeGestureListenerLp(); } }
public void testConstructor_NullEndDate_Failure() throws java.lang.Exception { try { new android.security.KeyPairGeneratorSpec(getContext(), android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1, "RSA", 1024, null, android.security.KeyPairGeneratorSpecTest.TEST_DN_1, android.security.KeyPairGeneratorSpecTest.SERIAL_1, android.security.KeyPairGeneratorSpecTest.NOW, null, 0); fail("Should throw IllegalArgumentException when keystoreAlias is null"); } catch (java.lang.IllegalArgumentException success) { } }


@java.lang.Override public void crunchPng(@com.android.annotations.NonNull final java.io.File from, @com.android.annotations.NonNull final java.io.File to) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { final com.android.builder.tasks.Job<com.android.builder.png.AaptProcess> aaptProcessJob = new com.android.builder.tasks.Job<com.android.builder.png.AaptProcess>(("Cruncher " + (from.getName())), new com.android.builder.tasks.Task<com.android.builder.png.AaptProcess>() { @java.lang.Override public void run(com.android.builder.tasks.Job<com.android.builder.png.AaptProcess> job, com.android.builder.tasks.JobContext<com.android.builder.png.AaptProcess> context) throws java.io.IOException { mLogger.verbose("Thread(%1$s): begin executing job %2$s", java.lang.Thread.currentThread().getName(), job.getJobTitle()); context.getPayload().crunch(from, to, job); mLogger.verbose("Thread(%1$s): done executing job %2$s", java.lang.Thread.currentThread().getName(), job.getJobTitle()); } }); mOutstandingJobs.add(aaptProcessJob); mCrunchingRequests.push(aaptProcessJob); }
private void createParameters(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method, @javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration x, @javax.annotation.Nonnull com.android.jack.ir.impl.CudInfo cuInfo) throws com.android.jack.ir.ast.JTypeLookupException { if ((x.arguments) != null) { for (org.eclipse.jdt.internal.compiler.ast.Argument argument : x.arguments) { com.android.jack.ir.sourceinfo.SourceInfo info = com.android.jack.ir.impl.ReferenceMapper.makeSourceInfo(cuInfo, argument, sourceInfoFactory); org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding binding = argument.binding; createParameter(info, method, com.android.jack.ir.impl.ReferenceMapper.intern(binding.name), binding.type, getModifier(binding)); } } }
public boolean mkdirs() { if (exists()) { return false; } if (mkdir()) { return true; } java.lang.String parentDir = getParent(); if (parentDir == null) { return false; } return (new java.io.File(parentDir).mkdirs()) && (mkdir()); }
private com.android.rs.test.Long4 pack_l4(long[] val) { assert (val.length) == 4; return new com.android.rs.test.Long4(val[0], val[1], val[2], val[3]); }

@org.junit.Before public void setUp() throws java.lang.Exception { mTelephonyManager = ((android.telephony.TelephonyManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.TELEPHONY_SERVICE))); android.telephony.cts.TelephonyManagerTest.mCm = ((android.net.ConnectivityManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); mPackageManager = android.telephony.cts.TelephonyManagerTest.getContext().getPackageManager(); }
public void test_EncodeLjava_nio_CharBuffer() throws java.lang.Exception { org.apache.harmony.nio_char.tests.java.nio.charset.CharsetEncoderTest.MockMalfunctionCharset cs = new org.apache.harmony.nio_char.tests.java.nio.charset.CharsetEncoderTest.MockMalfunctionCharset("mock", null); try { cs.encode(java.nio.CharBuffer.wrap("AB")); fail("should throw CoderMalfunctionError"); } catch (java.nio.charset.CoderMalfunctionError e) { } }

private void onDiscoverServicesResult(java.lang.String deviceObjectPath, boolean result) { java.lang.String address = mBluetoothService.getAddressFromObjectPath(deviceObjectPath); if (result) { mBluetoothService.updateRemoteDevicePropertiesCache(address); } mBluetoothService.sendUuidIntent(address); mBluetoothService.makeServiceChannelCallbacks(address); }



@org.junit.After public void tearDown() throws java.lang.Exception { if ((mListener) != null) { mTelephonyManager.listen(mListener, PhoneStateListener.LISTEN_NONE); } }


public void testMaxLengthComment() throws java.lang.Exception { java.lang.String maxLengthComment = libcore.java.util.zip.ZipEntryTest.makeString(65535, "z"); java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setComment(maxLengthComment); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(maxLengthComment, zipFile.getEntry("x").getComment()); zipFile.close(); }
public native void ftruncate(java.io.FileDescriptor fd, long length) throws android.system.ErrnoException;
public void test_init_List_null() { try { new javax.net.ssl.KeyStoreBuilderParameters(((java.util.List) (null))); } catch (java.lang.NullPointerException expected) { } }

@android.support.annotation.VisibleForTesting synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((((("connectionStateChanged: unexpected invocation. device=" + device) + " fromState=") + fromState) + " toState=") + toState)); return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { setActiveDevice(device); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (getConnectedDevices().isEmpty())) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (device + " is unbond. Remove state machine")); } removeStateMachine(device); } } }

public void test1_0BandLevel() throws java.lang.Exception { getEqualizer(0); try { short numBands = mEqualizer.getNumberOfBands(); assertTrue("not enough bands", (numBands >= (android.media.cts.EqualizerTest.MIN_NUMBER_OF_BANDS))); short[] levelRange = mEqualizer.getBandLevelRange(); assertTrue("min level too high", ((levelRange[0]) <= (android.media.cts.EqualizerTest.MAX_LEVEL_RANGE_LOW))); assertTrue("max level too low", ((levelRange[1]) >= (android.media.cts.EqualizerTest.MIN_LEVEL_RANGE_HIGH))); mEqualizer.setBandLevel(((short) (0)), levelRange[1]); short level = mEqualizer.getBandLevel(((short) (0))); assertTrue("setBandLevel failed", ((level >= ((levelRange[1]) - (android.media.cts.EqualizerTest.TOLERANCE))) && (level <= ((levelRange[1]) + (android.media.cts.EqualizerTest.TOLERANCE))))); } catch (java.lang.IllegalArgumentException e) { fail("Bad parameter value"); } catch (java.lang.UnsupportedOperationException e) { fail("get parameter() rejected"); } catch (java.lang.IllegalStateException e) { fail("get parameter() called in wrong state"); } finally { releaseEqualizer(); } }
@android.test.suitebuilder.annotation.MediumTest public void testJavaStrings() { assertEquals(mAppTextView2.getText(), "SUCCESS-APP"); assertEquals(mLib1TextView2.getText(), "SUCCESS-LIB1"); assertEquals(mLib2TextView2.getText(), "SUCCESS-LIB2"); assertEquals(mLib2bTextView2.getText(), "SUCCESS-LIB2b"); assertEquals(mLibappTextView2.getText(), "SUCCESS-LIBAPP"); }

public int read(java.nio.ByteBuffer buf) throws java.io.IOException { if (buf == null) throw new java.lang.NullPointerException(); synchronized(readLock) { if (!(ensureReadOpen())) return -1; java.lang.Object traceContext = null; if (isBlocking()) { traceContext = sun.misc.IoTrace.socketReadBegin(); } int n = 0; try { begin(); synchronized(stateLock) { if (!(isOpen())) { return 0; } readerThread = sun.nio.ch.NativeThread.current(); } for (; ;) { n = sun.nio.ch.IOUtil.read(fd, buf, (-1), sun.nio.ch.SocketChannelImpl.nd); if ((n == (sun.nio.ch.IOStatus.INTERRUPTED)) && (isOpen())) { continue; } return sun.nio.ch.IOStatus.normalize(n); } } finally { readerCleanup(); if (isBlocking()) { sun.misc.IoTrace.socketReadEnd(traceContext, remoteAddress.getAddress(), remoteAddress.getPort(), 0, (n > 0 ? n : 0)); } end(((n > 0) || (n == (sun.nio.ch.IOStatus.UNAVAILABLE)))); synchronized(stateLock) { if ((n <= 0) && (!(isInputOpen))) return sun.nio.ch.IOStatus.EOF; } assert sun.nio.ch.IOStatus.check(n); } } }

@android.test.suitebuilder.annotation.LargeTest public void testInjectMotionEvent_upEventFailure() throws java.lang.InterruptedException { final java.util.concurrent.CountDownLatch activityStarted = new java.util.concurrent.CountDownLatch(1); android.support.test.runner.lifecycle.ActivityLifecycleCallback callback = new android.support.test.runner.lifecycle.ActivityLifecycleCallback() { @java.lang.Override public void onActivityLifecycleChanged(android.app.Activity activity, android.support.test.runner.lifecycle.Stage stage) { if (((android.support.test.runner.lifecycle.Stage.RESUMED) == stage) && (activity instanceof android.support.test.testapp.SendActivity)) { activityStarted.countDown(); } } }; android.support.test.runner.lifecycle.ActivityLifecycleMonitorRegistry.getInstance().addLifecycleCallback(callback); try { getActivity(); assertTrue(activityStarted.await(20, java.util.concurrent.TimeUnit.SECONDS)); final int[] xy = android.support.test.espresso.base.UiControllerImplIntegrationTest.getCoordinatesInMiddleOfSendButton(getActivity(), getInstrumentation()); getInstrumentation().runOnMainSync(new java.lang.Runnable() { @java.lang.Override public void run() { android.view.MotionEvent up = android.view.MotionEvent.obtain(android.os.SystemClock.uptimeMillis(), android.os.SystemClock.uptimeMillis(), MotionEvent.ACTION_UP, xy[0], xy[1], 0); try { injectEventWorked.set(injector.injectMotionEvent(up)); } catch (android.support.test.espresso.InjectEventSecurityException e) { android.util.Log.e(android.support.test.espresso.base.EventInjectorTest.TAG, "injectEvent threw a SecurityException"); } up.recycle(); latch.countDown(); } }); latch.await(10, java.util.concurrent.TimeUnit.SECONDS); assertFalse(injectEventWorked.get()); } finally { android.support.test.runner.lifecycle.ActivityLifecycleMonitorRegistry.getInstance().removeLifecycleCallback(callback); } }
@android.annotation.NonNull com.android.bluetooth.avrcp.Metadata getCurrentSongInfo() { final com.android.bluetooth.avrcp.MediaPlayerWrapper player = getActivePlayer(); if (player == null) return com.android.bluetooth.avrcp.Util.empty_data(); return player.getCurrentMetadata(); }






@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.CstInsn)) { return false; } com.android.dx.dex.code.CstInsn ci = ((com.android.dx.dex.code.CstInsn) (insn)); int cpi = ci.getIndex(); com.android.dx.rop.cst.Constant cst = ci.getConstant(); if (!(unsignedFitsInShort(cpi))) { return false; } if (!((cst instanceof com.android.dx.rop.cst.CstMethodRef) || (cst instanceof com.android.dx.rop.cst.CstType))) { return false; } com.android.dx.rop.code.RegisterSpecList regs = ci.getRegisters(); int sz = regs.size(); return ((regs.size()) == 0) || (((isRegListSequential(regs)) && (unsignedFitsInShort(regs.get(0).getReg()))) && (unsignedFitsInByte(regs.getWordCount()))); }

public long transferTo(long position, long count, java.nio.channels.WritableByteChannel target) throws java.io.IOException { checkOpen(); if (!(target.isOpen())) { throw new java.nio.channels.ClosedChannelException(); } checkReadable(); if (target instanceof java.nio.FileChannelImpl) { ((java.nio.FileChannelImpl) (target)).checkWritable(); } if ((position < 0) || (count < 0)) { throw new java.lang.IllegalArgumentException(((("position=" + position) + " count=") + count)); } if ((count == 0) || (position >= (size()))) { return 0; } count = java.lang.Math.min(count, ((size()) - position)); boolean completed = false; if (target instanceof java.nio.SocketChannelImpl) { java.io.FileDescriptor outFd = ((java.nio.SocketChannelImpl) (target)).getFD(); try { begin(); try { libcore.util.MutableLong offset = new libcore.util.MutableLong(position); long rc = Libcore.os.sendfile(outFd, fd, offset, count); completed = true; return rc; } catch (libcore.io.ErrnoException errnoException) { if (((errnoException.errno) != (ENOSYS)) && ((errnoException.errno) != (EINVAL))) { throw errnoException.rethrowAsIOException(); } } } finally { end(completed); } } java.nio.ByteBuffer buffer = null; try { buffer = map(java.nio.channels.FileChannel.MapMode.READ_ONLY, position, count); return target.write(buffer); } finally { java.nio.NioUtils.freeDirectBuffer(buffer); } }
private synchronized com.android.se.security.ChannelAccess internal_setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag) { if ((packageName == null) || (packageName.isEmpty())) { throw new java.security.AccessControlException("package names must be specified"); } try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw new java.security.AccessControlException("Application certificates are invalid or do not exist."); } if (checkRefreshTag) { updateAccessRuleIfNeed(); } return getAccessRule(aid, appCerts); } catch (java.lang.Throwable exp) { throw new java.security.AccessControlException(exp.getMessage()); } }
public void testSslFallback_defaultProtocols() throws java.lang.Exception { TestSSLContext testSSLContext = createDefaultTestSSLContext(); javax.net.ssl.SSLSocketFactory serverSocketFactory = testSSLContext.serverContext.getSocketFactory(); javax.net.ssl.SSLSocketFactory clientSocketFactoryDelegate = testSSLContext.clientContext.getSocketFactory(); checkSslFallback(serverSocketFactory, clientSocketFactoryDelegate); }
@java.lang.Override public libcore.io.StructStatVfs statvfs(java.lang.String path) throws libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onReadFromDisk(); return os.statvfs(path); }




@com.android.annotations.Nullable java.io.File getJarJarRuleFile();
private void requestInputMethod(android.app.Dialog dialog) { android.view.Window window = dialog.getWindow(); window.setSoftInputMode(((WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE) | (WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE))); }

@dalvik.annotation.TestTargetNew(level = dalvik.annotation.TestLevel.SUFFICIENT, method = "findAll", args = { java.lang.String.class }, notes = "Cannot check highlighting") @android.test.UiThreadTest public void testFindAll() throws java.lang.InterruptedException { java.lang.String p = "<p>Find all instances of find on the page and highlight them.</p>"; mWebView.loadData((("<html><body>" + p) + "</body></html>"), "text/html", "UTF-8"); waitForLoadComplete(mWebView, android.webkit.cts.WebViewTest.TEST_TIMEOUT); assertEquals(2, mWebView.findAll("find")); }


@org.junit.Test public void testDefaultMethod015() throws java.lang.Exception { run(DEFAULTMETHOD015); }
@java.lang.Override public void onCallAudioStateChanged(java.lang.String callId, android.telecom.CallAudioState callAudioState) { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = callAudioState; mHandler.obtainMessage(android.telecom.ConnectionService.MSG_ON_CALL_AUDIO_STATE_CHANGED, args).sendToTarget(); }
@java.lang.SuppressWarnings("unchecked") public <T> T[] toArray(T[] contents) { int size = size(); int index = 0; if (size > (contents.length)) { java.lang.Class<?> ct = contents.getClass().getComponentType(); contents = ((T[]) (java.lang.reflect.Array.newInstance(ct, size))); } for (E entry : this) { contents[(index++)] = ((T) (entry)); } if (index < (contents.length)) { contents[index] = null; } return contents; }

private void activate() { java.io.File binDir = new java.io.File(mVenvDir, (com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.isOnWindows() ? "Scripts" : "bin")); mRunUtil.setWorkingDir(binDir); java.lang.String path = java.lang.System.getenv(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PATH); mRunUtil.setEnvVariable(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PATH, ((binDir + (java.io.File.pathSeparator)) + path)); java.io.File pipFile = new java.io.File(binDir, com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PIP); pipFile.setExecutable(true); mPip = pipFile.getAbsolutePath(); }
public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
@java.lang.Override public int compare(com.android.ahat.heapdump.AhatInstance a, com.android.ahat.heapdump.AhatInstance b) { return java.lang.Long.compare(b.getRetainedSize(mHeap), a.getRetainedSize(mHeap)); }
@java.lang.SuppressWarnings("javadoc") public void visitMethod(@com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context, @com.android.annotations.Nullable lombok.ast.AstVisitor visitor, @com.android.annotations.NonNull lombok.ast.MethodInvocation node) { }

public void loadPlugIns() { if ((getState()) == (android.drm.DrmManagerClient.STATE_UNINITIALIZED)) { _loadPlugIns(mUniqueId, new java.lang.ref.WeakReference<android.drm.DrmManagerClient>(this)); mCurrentState = android.drm.DrmManagerClient.STATE_INITIALIZED; } }
public static boolean hasCyclicDependency(org.eclipse.jdt.core.IJavaProject javaProject) throws org.eclipse.core.runtime.CoreException { org.eclipse.core.resources.IMarker[] markers = javaProject.getProject().findMarkers(IJavaModelMarker.BUILDPATH_PROBLEM_MARKER, false, IResource.DEPTH_ONE); for (int i = 0; i < (markers.length); i++) { org.eclipse.core.resources.IMarker marker = markers[i]; java.lang.String cycleAttr = ((java.lang.String) (marker.getAttribute(IJavaModelMarker.CYCLE_DETECTED))); if ((cycleAttr != null) && (cycleAttr.equals("true"))) { return true; } } return false; }
public void onPreferencesMenuSelected() { org.eclipse.jface.dialogs.MessageDialog.openInformation(mShell, "test", "on prefs"); }
public void test_PBKDF2_rfc3211_192() throws java.lang.Exception { char[] password = ("All n-entities must communicate with other " + "n-entities via n-1 entiteeheehees").toCharArray(); byte[] salt = new byte[]{ ((byte) (18)), ((byte) (52)), ((byte) (86)), ((byte) (120)), ((byte) (120)), ((byte) (86)), ((byte) (52)), ((byte) (18)) }; int iterations = 500; int keyLength = 192; byte[] expected = new byte[]{ ((byte) (106)), ((byte) (137)), ((byte) (112)), ((byte) (191)), ((byte) (104)), ((byte) (201)), ((byte) (44)), ((byte) (174)), ((byte) (168)), ((byte) (74)), ((byte) (141)), ((byte) (242)), ((byte) (133)), ((byte) (16)), ((byte) (133)), ((byte) (134)), ((byte) (7)), ((byte) (18)), ((byte) (99)), ((byte) (128)), ((byte) (204)), ((byte) (71)), ((byte) (171)), ((byte) (45)) }; test_PBKDF2(password, salt, iterations, keyLength, expected); }

@javax.annotation.Nonnull private static java.lang.Object instantiateConstructorWithParameters(@javax.annotation.Nonnull com.android.sched.vfs.InputRootVDir vdir, @javax.annotation.Nonnull java.lang.String className, @javax.annotation.Nonnull java.lang.Class<?>[] parameterTypes, @javax.annotation.Nonnull java.lang.Object[] parameterInstances, @javax.annotation.Nonnull java.lang.String version) throws com.android.jack.library.LibraryVersionException { java.lang.Object constructorInstance = null; try { java.lang.Class<?> libraryReaderClass = java.lang.Class.forName(className); java.lang.reflect.Constructor<?> constructor = libraryReaderClass.getConstructor(parameterTypes); constructorInstance = constructor.newInstance(parameterInstances); } catch (java.lang.SecurityException e) { throw new java.lang.AssertionError(); } catch (java.lang.IllegalArgumentException e) { throw new java.lang.AssertionError(("Illegal argument for library constructor for version " + version)); } catch (java.lang.ClassNotFoundException e) { throw new com.android.jack.library.LibraryVersionException(((("Library " + vdir) + " has an unsupported version ") + version)); } catch (java.lang.NoSuchMethodException e) { throw new java.lang.AssertionError(("Library constructor not found for version " + version)); } catch (java.lang.InstantiationException e) { throw new java.lang.AssertionError(("Problem instantiating a library for version " + version)); } catch (java.lang.IllegalAccessException e) { throw new java.lang.AssertionError(("Problem accessing library constructor for version " + version)); } catch (java.lang.reflect.InvocationTargetException e) { throw new java.lang.RuntimeException(e.getCause()); } return constructorInstance; }
private java.lang.String getDexFileName(java.io.File inputFile) { java.lang.String name = inputFile.getName(); int pos = name.lastIndexOf('.'); if (pos != (-1)) { name = name.substring(0, pos); } com.google.common.hash.HashFunction hashFunction = com.google.common.hash.Hashing.md5(); com.google.common.hash.HashCode hashCode = hashFunction.hashString(inputFile.getAbsolutePath()); return ((name + "-") + (hashCode.toString())) + ".jar"; }


java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_PERM, "Need BLUETOOTH permission"); return new java.util.ArrayList<>(); }



private void testRotation(java.lang.String activityName, int rotationStep, int numRelaunch, int numConfigChange) throws java.lang.Exception { executeShellCommand(getAmStartCmd(activityName)); final java.lang.String[] waitForActivitiesVisible = new java.lang.String[]{ activityName }; mAmWmState.computeState(mDevice, waitForActivitiesVisible); mAmWmState.assertContainsStack("Must contain fullscreen stack.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); setDeviceRotation((4 - rotationStep)); mAmWmState.computeState(mDevice, waitForActivitiesVisible); for (int rotation = 0; rotation < 4; rotation += rotationStep) { clearLogcat(); setDeviceRotation(rotation); mAmWmState.computeState(mDevice, waitForActivitiesVisible); assertRelaunchOrConfigChanged(activityName, numRelaunch, numConfigChange); } }
@java.lang.Override public boolean processMessage(android.os.Message msg) { if ((super.processMessage(msg)) == (HANDLED)) { return HANDLED; } switch (msg.what) { case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_WIRED_HEADSET : sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_HEADSET); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_BLUETOOTH : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH : sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_BASELINE_ROUTE); mWasOnSpeaker = false; return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_WIRED_HEADSET : updateSystemAudioState(); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_DOCK : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_DOCK : return HANDLED; default : return NOT_HANDLED; } }

private static void setDefaultNetworkEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent out, android.net.metrics.DefaultNetworkEvent in) { com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.DefaultNetworkEvent defaultNetworkEvent = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.DefaultNetworkEvent(); defaultNetworkEvent.networkId = com.android.server.connectivity.IpConnectivityEventBuilder.netIdOf(in.netId); defaultNetworkEvent.previousNetworkId = com.android.server.connectivity.IpConnectivityEventBuilder.netIdOf(in.prevNetId); defaultNetworkEvent.transportTypes = in.transportTypes; defaultNetworkEvent.previousNetworkIpSupport = com.android.server.connectivity.IpConnectivityEventBuilder.ipSupportOf(in); out.setDefaultNetworkEvent(defaultNetworkEvent); }

private static void createDexFile() { if ((com.android.dx.command.dexer.Main.outputDex) != null) { com.android.dx.command.dexer.Main.dexOutputArrays.add(com.android.dx.command.dexer.Main.writeDex()); } com.android.dx.command.dexer.Main.outputDex = new com.android.dx.dex.file.DexFile(com.android.dx.command.dexer.Main.args.dexOptions); if ((com.android.dx.command.dexer.Main.args.dumpWidth) != 0) { com.android.dx.command.dexer.Main.outputDex.setDumpWidth(com.android.dx.command.dexer.Main.args.dumpWidth); } }


private java.awt.Color getFontColor(com.android.tools.perflib.vmtrace.Call c) { com.android.tools.perflib.vmtrace.MethodInfo info = mTraceData.getMethod(c.getMethodId()); int percent = quantize(info.getInclusiveThreadPercent()); return getFontColor(percent); }



public android.icu.text.QuantityFormatter.Builder add(java.lang.String variant, java.lang.String template) { ensureCapacity(); java.lang.Integer idx = android.icu.text.QuantityFormatter.INDEX_MAP.get(variant); if (idx == null) { throw new java.lang.IllegalArgumentException(variant); } android.icu.impl.SimplePatternFormatter newT = android.icu.impl.SimplePatternFormatter.compile(template); if ((newT.getPlaceholderCount()) > 1) { throw new java.lang.IllegalArgumentException(("Extra placeholders: " + template)); } templates[idx.intValue()] = newT; return this; }

int getResourceId() { return mResourceId; }

@java.lang.Override public void sendEnvelopeWithStatus(java.lang.String contents, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_STK_SEND_ENVELOPE_WITH_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " contents = ") + contents)); } try { radioProxy.sendEnvelopeWithStatus(rr.mSerial, convertNullToEmptyString(contents)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendEnvelopeWithStatus", e); } } }
public java.lang.String getDisplayLanguage(java.util.Locale locale) { if (languageCode.isEmpty()) { return ""; } java.lang.String localeString = toString(); if (languageCode.equals("tl")) { localeString = java.util.Locale.toNewString("fil", countryCode, variantCode); } java.lang.String result = libcore.icu.ICU.getDisplayLanguageNative(localeString, locale.toString()); if (result == null) { result = libcore.icu.ICU.getDisplayLanguageNative(localeString, java.util.Locale.getDefault().toString()); } return result; }


public void incrementalBuildFromFolder(@javax.annotation.CheckForNull java.io.File[] classpath, @javax.annotation.Nonnull java.util.List<java.io.File> imports, @javax.annotation.Nonnull com.android.jack.test.toolchain.JackBasedToolchain.MultiDexKind multiDexKind) throws java.lang.Exception { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeList = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(1); excludeList.add(com.android.jack.test.toolchain.JillBasedToolchain.class); com.android.jack.test.toolchain.JackApiToolchain jackToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class, excludeList); jackToolchain.setIncrementalFolder(getCompilerStateFolder()); jackToolchain.addStaticLibs(imports.toArray(new java.io.File[imports.size()])); jackToolchain.setMultiDexKind(multiDexKind); jackToolchain.setOutputStream(out); jackToolchain.setErrorStream(err); java.io.File[] bootclasspath = jackToolchain.getDefaultBootClasspath(); jackToolchain.addToClasspath(bootclasspath); if (classpath != null) { jackToolchain.addToClasspath(classpath); } jackToolchain.srcToExe(dexOutDir, false, sourceFolder); java.lang.Thread.sleep(1000); }
public void testGoodOverrideFile() throws java.lang.Exception { java.io.RandomAccessFile in = new java.io.RandomAccessFile(libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT, "r"); byte[] content = new byte[((int) (in.length()))]; in.readFully(content); content[6] = '9'; content[7] = '9'; content[8] = '9'; content[9] = '9'; content[10] = 'z'; in.close(); libcore.util.ZoneInfoDB.TzData data = new libcore.util.ZoneInfoDB.TzData(libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT); java.lang.String goodFile = libcore.util.ZoneInfoDBTest.makeTemporaryFile(content); try { libcore.util.ZoneInfoDB.TzData dataWithOverride = new libcore.util.ZoneInfoDB.TzData(goodFile, libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT); assertEquals("9999z", dataWithOverride.getVersion()); assertEquals(data.getAvailableIDs().length, dataWithOverride.getAvailableIDs().length); } finally { new java.io.File(goodFile).delete(); } }
@java.lang.Override public void setUp(com.android.tradefed.invoker.IInvocationContext context) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.TargetSetupError { mBuildInfo = context.getBuildInfos().get(0); startVirtualenv(mBuildInfo); setLocalPypiPath(); installDeps(mBuildInfo); }
void requestCapabilities() { mPrintService.getCapabilitiesCache().request(mDiscoveredPrinter, mSession.isPriority(mPrinterId), this); }
@android.annotation.SystemApi public int getOtaStatus() { if (!(isEnabled())) { return android.telephony.euicc.EuiccManager.EUICC_OTA_STATUS_UNAVAILABLE; } try { return android.telephony.euicc.EuiccManager.getIEuiccController().getOtaStatus(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }


@java.lang.Override @javax.annotation.Nonnull public java.io.File[] getDefaultBootClasspath() { return new java.io.File[]{ new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "toolchain/jack/jack-tests/libs/core-stubs-mini.jack"), new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "toolchain/jack/jack-tests/prebuilts/junit4-targetdex-jack.zip") }; }
synchronized void recordScanStop() { if (!(isScanning)) return; (this.scansStopped)++; isScanning = false; stopTime = java.lang.System.currentTimeMillis(); long scanDuration = (stopTime) - (startTime); minScanTime = java.lang.Math.min(scanDuration, minScanTime); maxScanTime = java.lang.Math.max(scanDuration, maxScanTime); totalScanTime += scanDuration; com.android.bluetooth.gatt.AppScanStats.LastScan curr = lastScans.get(((lastScans.size()) - 1)); curr.duration = scanDuration; if ((lastScans.size()) > (com.android.bluetooth.gatt.AppScanStats.NUM_SCAN_DURATIONS_KEPT)) { lastScans.remove(0); } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_STOP); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setInitiator(appName); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); gattService.addScanEvent(scanEvent); }
public static void finalizeAllEnqueued() throws java.lang.InterruptedException { java.lang.ref.FinalizerReference.Sentinel sentinel = new java.lang.ref.FinalizerReference.Sentinel(); java.lang.ref.FinalizerReference<java.lang.Object> reference = new java.lang.ref.FinalizerReference<java.lang.Object>(null, java.lang.ref.FinalizerReference.queue); reference.zombie = sentinel; reference.enqueueInternal(); sentinel.awaitFinalization(); }
public void listen(java.io.FileDescriptor fd, int backlog) throws android.system.ErrnoException;
@java.lang.Override public void onResume() { super.onResume(); startTimeOut(mTextMsg.userClear); }


public static java.lang.String parseSvgToXml(java.io.File inputSVG, java.io.OutputStream outStream) { java.lang.String errorLog = null; try { com.android.assetstudiolib.vectordrawable.SvgTree svgTree = com.android.assetstudiolib.vectordrawable.Svg2Vector.parse(inputSVG); errorLog = svgTree.getErrorLog(); com.android.assetstudiolib.vectordrawable.Svg2Vector.writeFile(outStream, svgTree); } catch (java.lang.Exception e) { errorLog = (("EXCEPTION in parsing " + (inputSVG.getName())) + ":\n") + (e.getMessage()); } return errorLog; }
private void clearImsUceService() { synchronized(mSyncObj) { mImsUceManager = null; mStackService = null; mStackPresService = null; } }
private void handleUpstreamNetworkMonitorCallback(int arg1, java.lang.Object o) { if (arg1 == (com.android.server.connectivity.tethering.UpstreamNetworkMonitor.NOTIFY_LOCAL_PREFIXES)) { mOffload.sendOffloadExemptPrefixes(((java.util.Set<android.net.IpPrefix>) (o))); return; } final android.net.NetworkState ns = ((android.net.NetworkState) (o)); if ((ns == null) || (!(pertainsToCurrentUpstream(ns)))) { if ((mCurrentUpstreamIface) == null) { chooseUpstreamType(false); } return; } switch (arg1) { case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_AVAILABLE : break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_CAPABILITIES : handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LINKPROPERTIES : setDnsForwarders(ns.network, ns.linkProperties); handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LOST : handleNewUpstreamNetworkState(null); break; default : mLog.e(("Unknown arg1 value: " + arg1)); break; } }
@java.lang.Override public void enter() { maybeLogEvaluationResult(networkEventType(validationStage(), com.android.server.connectivity.NetworkMonitor.EvaluationResult.VALIDATED)); mConnectivityServiceHandler.sendMessage(obtainMessage(com.android.server.connectivity.NetworkMonitor.EVENT_NETWORK_TESTED, com.android.server.connectivity.NetworkMonitor.NETWORK_TEST_RESULT_VALID, mNetId, null)); (mValidations)++; }

private boolean isFilteredIn(com.android.bluetooth.pbap.BluetoothPbapVcardManager.VCardFilter.FilterBit bit, boolean vCardType21) { final int offset = ((bit.pos) / 8) + 1; final int bit_pos = (bit.pos) % 8; if ((!vCardType21) && (bit.onlyCheckV21)) return true; if (vCardType21 && (bit.excludeForV21)) return false; if (((filter) == null) || (offset >= (filter.length))) return true; return (((filter[((filter.length) - offset)]) >> bit_pos) & 1) != 0; }

private com.android.ide.eclipse.adt.internal.resources.DeclareStyleableInfo parseDeclaredStyleable(java.lang.String styleName, org.w3c.dom.Node declareStyleableNode) { java.util.ArrayList<com.android.ide.eclipse.adt.internal.resources.AttributeInfo> attrs = new java.util.ArrayList<com.android.ide.eclipse.adt.internal.resources.AttributeInfo>(); org.w3c.dom.Node lastComment = null; for (org.w3c.dom.Node node = declareStyleableNode.getFirstChild(); node != null; node = node.getNextSibling()) { switch (node.getNodeType()) { case org.w3c.dom.Node.COMMENT_NODE : lastComment = node; break; case org.w3c.dom.Node.ELEMENT_NODE : if (node.getNodeName().equals("attr")) { com.android.ide.eclipse.adt.internal.resources.AttributeInfo info = parseAttr(node, lastComment); if (info != null) { attrs.add(info); } } lastComment = null; break; } } return new com.android.ide.eclipse.adt.internal.resources.DeclareStyleableInfo(styleName, attrs.toArray(new com.android.ide.eclipse.adt.internal.resources.AttributeInfo[attrs.size()])); }
private void createTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration x) { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo(x); try { com.android.jack.ir.ast.JDefinedClassOrInterface type = ((com.android.jack.ir.ast.JDefinedClassOrInterface) (getTypeMap().get(x.binding))); newTypes.add(type); if ((x.memberTypes) != null) { for (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration memberType : x.memberTypes) { createTypes(memberType); } } } catch (com.android.jack.ir.ast.JTypeLookupException e) { throw translateException(x, e, info); } catch (java.lang.RuntimeException e) { throw translateException(x, e, info); } }

private static native void native_drawPaint(int nativeCanvas, int paint);

public void setsockoptInt(java.io.FileDescriptor fd, int level, int option, int value) throws libcore.io.ErrnoException { os.setsockoptInt(fd, level, option, value); }
public void test_ConstructorI() { java.lang.StringBuilder sb = new java.lang.StringBuilder(24); assertNotNull(sb); assertEquals(24, sb.capacity()); try { new java.lang.StringBuilder((-1)); fail("no exception"); } catch (java.lang.NegativeArraySizeException e) { } assertNotNull(new java.lang.StringBuilder(0)); }
@java.lang.Override public void enter() { try { startObexServerSession(); } catch (java.io.IOException ex) { android.util.Log.e(com.android.bluetooth.pbap.PbapStateMachine.TAG, ("Caught exception starting OBEX server session" + (ex.toString()))); } broadcastStateTransitions(); }
public libcore.tzdata.update2.tools.TimeZoneBundleBuilder setAndroidRevision(java.lang.String androidRevision) { this.androidRevision = androidRevision; return this; }
private void sendNsdStateChangeBroadcast(boolean enabled) { final android.content.Intent intent = new android.content.Intent(android.net.nsd.NsdManager.ACTION_NSD_STATE_CHANGED); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); if (enabled) { intent.putExtra(NsdManager.EXTRA_NSD_STATE, NsdManager.NSD_STATE_ENABLED); } else { intent.putExtra(NsdManager.EXTRA_NSD_STATE, NsdManager.NSD_STATE_DISABLED); } mContext.sendStickyBroadcastAsUser(intent, UserHandle.ALL); }
public void getItemAttr(com.android.bluetooth.avrcp.AvrcpCmd.ItemAttrCmd itemAttr) { java.lang.String mediaID; if (com.android.bluetooth.avrcp.BrowsedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG, "getItemAttr"); mItemAttrReqObj = itemAttr; mediaID = byteToString(itemAttr.mUid); if (mediaID == null) { android.util.Log.e(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG, "uid is invalid"); mMediaInterface.getItemAttrRsp(mBDAddr, AvrcpConstants.RSP_INV_ITEM, null); return; } if ((itemAttr.mScope) != (AvrcpConstants.BTRC_SCOPE_FILE_SYSTEM)) { android.util.Log.e(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG, "invalid scope"); mMediaInterface.getItemAttrRsp(mBDAddr, AvrcpConstants.RSP_INV_SCOPE, null); return; } if ((mMediaBrowser) == null) { android.util.Log.e(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG, "mMediaBrowser is null"); mMediaInterface.getItemAttrRsp(mBDAddr, AvrcpConstants.RSP_INTERNAL_ERR, null); return; } mMediaBrowser.subscribe(mediaID, itemAttrCb); }
@java.lang.Override public void deviceConnected(final com.android.ddmlib.IDevice device) { executeInBackground("Connecting device", new java.lang.Runnable() { @java.lang.Override public void run() { if (com.android.hierarchyviewerlib.models.DeviceSelectionModel.getModel().containsDevice(device)) { windowsChanged(device); } else if (device.isOnline()) { com.android.hierarchyviewerlib.device.DeviceBridge.setupDeviceForward(device); if (!(com.android.hierarchyviewerlib.device.DeviceBridge.isViewServerRunning(device))) { if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { try { java.lang.Thread.sleep(2000); } catch (java.lang.InterruptedException e) { } if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, ("Unable to debug device " + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); } else { loadViewServerInfoAndWindows(device); } return; } } loadViewServerInfoAndWindows(device); } } }); }
public void addData(com.android.vts.proto.VtsReportMessage.TestReportMessage testReportMessage) { if (!(includeInSummary(testReportMessage))) return; for (com.android.vts.proto.VtsReportMessage.ProfilingReportMessage profilingReportMessage : testReportMessage.getProfilingList()) { if ((profilingReportMessage.getRegressionMode()) == (com.android.vts.proto.VtsReportMessage.VtsProfilingRegressionMode.VTS_REGRESSION_MODE_DISABLED)) { continue; } java.lang.String name = profilingReportMessage.getName().toStringUtf8(); java.lang.String optionSuffix = com.android.vts.util.PerformanceUtil.getOptionKeys(profilingReportMessage.getOptionsList(), optionSplitKeys); if (!(optionSuffix.equals(""))) { name += (" (" + optionSuffix) + ")"; } switch (profilingReportMessage.getType()) { case UNKNOWN_VTS_PROFILING_TYPE : case VTS_PROFILING_TYPE_TIMESTAMP : com.android.vts.util.PerformanceSummary.logger.log(java.util.logging.Level.WARNING, ("Timestamp profiling data skipped : " + name)); break; case VTS_PROFILING_TYPE_LABELED_VECTOR : if (((profilingReportMessage.getLabelList().size()) == 0) || ((profilingReportMessage.getLabelList().size()) != (profilingReportMessage.getValueList().size()))) { continue; } if (!(summaryMap.containsKey(name))) { summaryMap.put(name, new com.android.vts.util.ProfilingPointSummary()); } summaryMap.get(name).update(profilingReportMessage); break; case VTS_PROFILING_TYPE_UNLABELED_VECTOR : if ((profilingReportMessage.getValueList().size()) == 0) return; if (!(summaryMap.containsKey(name))) { summaryMap.put(name, new com.android.vts.util.ProfilingPointSummary()); } summaryMap.get(name).update(profilingReportMessage); default : break; } } }

public synchronized boolean loadAccessControlRules(java.lang.String secureElement) { mSELabel = secureElement; android.util.Log.i(mTag, (("- Loading " + (mSELabel)) + " rules...")); try { initACEntryPoint(); return updateACRules(); } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { throw ((java.util.MissingResourceException) (e)); } android.util.Log.e(mTag, (((mSELabel) + " rules not correctly initialized! ") + (e.getLocalizedMessage()))); throw new java.security.AccessControlException(e.getLocalizedMessage()); } finally { if ((mArfChannel) != null) mSEHandle.closeArfChannel(); } }
public void setRenderscriptNdkMode(java.lang.Boolean renderscriptNdkMode) { mRenderscriptNdkMode = renderscriptNdkMode; }
void ndk(org.gradle.api.Action<com.android.build.gradle.internal.dsl.NdkOptions> action) { action.execute(ndkConfig); }
public void broadcastIccStateChangedIntent(java.lang.String value, java.lang.String reason) { if (mQuietMode) { log(((("QuietMode: NOT Broadcasting intent ACTION_SIM_STATE_CHANGED " + value) + " reason ") + reason)); return; } android.content.Intent intent = new android.content.Intent(TelephonyIntents.ACTION_SIM_STATE_CHANGED); intent.addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING); intent.putExtra(PhoneConstants.PHONE_NAME_KEY, "Phone"); intent.putExtra(IccCardConstants.INTENT_KEY_ICC_STATE, value); intent.putExtra(IccCardConstants.INTENT_KEY_LOCKED_REASON, reason); if (com.android.internal.telephony.IccCardProxy.DBG) log(((("Broadcasting intent ACTION_SIM_STATE_CHANGED " + value) + " reason ") + reason)); android.app.ActivityManagerNative.broadcastStickyIntent(intent, android.Manifest.permission.READ_PHONE_STATE); }


@java.lang.Override public void testRunStarted(java.lang.String ignoredRunName, int testCount) { mTotalTestCount = testCount; }
@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCaseStatement caseStatement) { if (!(currentStmts.isEmpty())) { com.android.jack.cfg.NormalBasicBlock caseBlock = new com.android.jack.cfg.NormalBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(caseBlock); forwardBranchResolver.addNormalBasicBlock(caseBlock, caseStatement); } super.visit(caseStatement); return true; }

@org.junit.Test public void testCommandLineError002() throws java.lang.Exception { com.android.jack.test.helper.ErrorTestHelper ite = new com.android.jack.test.helper.ErrorTestHelper(); com.android.jack.test.toolchain.JackApiToolchain jackApiToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(); jackApiToolchain.setErrorStream(errOut); jackApiToolchain.setOutputStream(out); try { jackApiToolchain.addToClasspath(jackApiToolchain.getDefaultBootClasspath()).srcToExe(ite.getOutputDexFolder(), false, ite.getSourceFolder()); } finally { junit.framework.Assert.assertEquals("", errOut.toString()); junit.framework.Assert.assertTrue(out.toString().contains("Usage:")); } }
static short $opt$ByteToShort(byte a) { if (Main.doThrow) throw new java.lang.Error(); return ((short) (a)); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getTargetContext(); mOldVrListener = Settings.Secure.getString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS); }






@java.lang.Override public void setUp(com.android.tradefed.device.ITestDevice device, com.android.tradefed.build.IBuildInfo buildInfo) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.TargetSetupError { for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : com.android.tradefed.targetprep.VtsDeviceInfoCollector.BUILD_KEYS.entrySet()) { buildInfo.addBuildAttribute(entry.getKey(), com.android.tradefed.util.ArrayUtil.join(",", device.getProperty(entry.getValue()))); } }


@java.lang.Override public void onRemoval(@javax.annotation.Nonnull com.google.common.cache.RemovalNotification<com.android.jack.server.JackHttpServer.VersionKey, com.android.jack.server.JackHttpServer.Program<com.android.jack.api.JackProvider>> notification) { com.android.jack.server.JackHttpServer.Program<com.android.jack.api.JackProvider> program = notification.getValue(); com.android.jack.api.JackProvider provider = program.getLoadedProgram(); final java.io.File jar = program.getJar(); if (provider != null) { com.android.jack.server.JackHttpServer.logger.info((("Queuing " + (jar.getPath())) + " for deletion")); final java.io.File deleteMarker = new java.io.File(((jar.getPath()) + (com.android.jack.server.JackHttpServer.DELETED_SUFFIX))); try { if (!(deleteMarker.createNewFile())) { throw new java.io.IOException("File already exists"); } } catch (java.io.IOException e) { com.android.jack.server.JackHttpServer.logger.log(java.util.logging.Level.SEVERE, (("Failed to create delete file marker '" + deleteMarker) + "' aborting deletion by finalizer"), e); return; } getLauncherHandle().deleteFilesOnGarbage(new java.io.File[]{ deleteMarker, jar }, provider.getClass().getClassLoader()); deleteMarker.deleteOnExit(); jar.deleteOnExit(); } else { com.android.jack.server.JackHttpServer.logger.info((("Deleting " + (jar.getPath())) + " immediatly")); if (!(jar.delete())) { com.android.jack.server.JackHttpServer.logger.log(java.util.logging.Level.SEVERE, (("Failed to delete file '" + jar) + "'")); } } }
public void testConstructor_NullSubjectDN_Failure() throws java.lang.Exception { try { new android.security.KeyPairGeneratorSpec(getContext(), android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1, "RSA", 1024, null, null, android.security.KeyPairGeneratorSpecTest.SERIAL_1, android.security.KeyPairGeneratorSpecTest.NOW, android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS, 0); fail("Should throw IllegalArgumentException when subjectDN is null"); } catch (java.lang.IllegalArgumentException success) { } }

@java.lang.Override public void writeSources(java.io.File sourceDir) throws java.io.IOException { for (com.android.build.gradle.integration.common.fixture.app.TestSourceFile srcFile : getAllSourceFiles()) { srcFile.writeToDir(sourceDir); } }
private static boolean isLingerSocket(java.io.FileDescriptor fd) throws libcore.io.ErrnoException { libcore.io.StructLinger linger = Libcore.os.getsockoptLinger(fd, libcore.io.SOL_SOCKET, libcore.io.SO_LINGER); return (linger.isOn()) && ((linger.l_linger) > 0); }

@java.lang.Override protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor monitor) { try { com.android.ide.eclipse.adt.internal.project.ExportHelper.export(project, new java.io.File(saveLocation), null, null, monitor); com.android.ide.eclipse.adt.AdtPlugin.displayWarning("Android IDE Plug-in", java.lang.String.format(("An unsigned package of the application was saved at\n%1$s\n\n" + (((("Before publishing the application you will need to:\n" + "- Sign the application with your release key,\n") + "- run zipalign on the signed package. ZipAlign is located in <SDK>/tools/\n\n") + "Aligning applications allows Android to use application resources\n") + "more efficiently.")), saveLocation)); return org.eclipse.core.runtime.Status.OK_STATUS; } catch (org.eclipse.core.runtime.CoreException e) { return e.getStatus(); } }
@java.lang.Override public void shutdown() { if ((mBluetoothAdapter.getState()) == (android.bluetooth.BluetoothAdapter.STATE_ON)) { for (com.googlecode.android_scripting.facade.bluetooth.BluetoothLeAdvertiseFacade.myAdvertiseCallback mAdvertise : mAdvertiseCallbackList.values()) { if (mAdvertise != null) { try { mBluetoothAdapter.getBluetoothLeAdvertiser().stopAdvertising(mAdvertise); } catch (java.lang.NullPointerException e) { com.googlecode.android_scripting.Log.e("Failed to stop ble advertising.", e); } } } } mAdvertiseCallbackList.clear(); mAdvertiseSettingsList.clear(); mAdvertiseDataList.clear(); }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mBuildToolInfo = com.android.builder.internal.compiler.PreDexCacheTest.getBuildToolInfo(); }
private static void parseTransformation(com.android.assetstudiolib.vectordrawable.SvgTree avg, org.w3c.dom.Node nNode) { org.w3c.dom.NamedNodeMap a = nNode.getAttributes(); int len = a.getLength(); for (int i = 0; i < len; i++) { org.w3c.dom.Node n = a.item(i); java.lang.String name = n.getNodeName(); java.lang.String value = n.getNodeValue(); if (com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_TRANSFORM.equals(name)) { if (value.startsWith("matrix(")) { value = value.substring("matrix(".length(), ((value.length()) - 1)); java.lang.String[] sp = value.split(" "); for (int j = 0; j < (sp.length); j++) { avg.matrix[j] = java.lang.Float.parseFloat(sp[j]); } } } else if (name.equals("y")) { java.lang.Float.parseFloat(value); } else if (name.equals("x")) { java.lang.Float.parseFloat(value); } } }
private vogar.tasks.Task newCreateDexJarTask(vogar.Classpath classpath, java.io.File classpathElement, java.lang.String name, vogar.Action action, java.io.File localDex) { vogar.tasks.Task dex; if (run.useJack) { dex = new vogar.android.JackDexTask(run, classpath, run.benchmark, name, classpathElement, action, localDex); } else { dex = new vogar.android.DexTask(run.androidSdk, classpath, run.benchmark, name, classpathElement, action, localDex, run.multidex); } return dex; }
@org.junit.Test public void filterOutBlacklistedBssid() { java.lang.String[] ssids = new java.lang.String[]{ "\"test1\"" }; java.lang.String[] bssids = new java.lang.String[]{ "6c:f3:7f:ae:8c:f3" }; int[] freqs = new int[]{ 5180 }; java.lang.String[] caps = new java.lang.String[]{ "[WPA2-EAP-CCMP][ESS]" }; int[] levels = new int[]{ (mThresholdQualifiedRssi5G) + 8 }; int[] securities = new int[]{ com.android.server.wifi.WifiConfigurationTestUtil.SECURITY_PSK }; com.android.server.wifi.WifiNetworkSelectorTestUtil.ScanDetailsAndWifiConfigs scanDetailsAndConfigs = com.android.server.wifi.WifiNetworkSelectorTestUtil.setupScanDetailsAndConfigStore(ssids, bssids, freqs, caps, levels, securities, mWifiConfigManager, mClock); java.util.List<com.android.server.wifi.ScanDetail> scanDetails = scanDetailsAndConfigs.getScanDetails(); for (int i = 0; i < (WifiNetworkSelector.BSSID_BLACKLIST_THRESHOLD); i++) { mWifiNetworkSelector.enableBssidForNetworkSelection(bssids[0], false, 1); } android.net.wifi.WifiConfiguration candidate = mWifiNetworkSelector.selectNetwork(scanDetails, mWifiInfo, false, true, false); assertEquals("Expect null configuration", null, candidate); }

private boolean isScoAcceptable() { return (mAudioRouteAllowed) && ((mVoiceRecognitionStarted) || (isInCall())); }

public void testMakeTimeZone_NoOffsets() throws java.lang.Exception { int[][] times = new int[][]{ }; int[][] offsets = new int[][]{ }; try { createZoneInfo(times, offsets); fail("Did not detect no transitions"); } catch (java.lang.IllegalStateException expected) { } }
public int ioctlInt(java.io.FileDescriptor fd, int cmd, android.util.MutableInt arg) throws android.system.ErrnoException;


@com.android.annotations.Nullable public com.android.sdklib.repository.local.LocalPkgInfo getPkgInfo(@com.android.annotations.NonNull com.android.sdklib.repository.descriptors.PkgType filter, @com.android.annotations.NonNull java.lang.String vendor, @com.android.annotations.NonNull java.lang.String path) { assert (filter == (com.android.sdklib.repository.descriptors.PkgType.PKG_EXTRAS)) || (filter == (com.android.sdklib.repository.descriptors.PkgType.PKG_ADDONS)); for (com.android.sdklib.repository.local.LocalPkgInfo pkg : getPkgsInfos(filter)) { com.android.sdklib.repository.descriptors.IPkgDesc d = pkg.getDesc(); if ((d.hasVendor()) && (vendor.equals(d.getVendor().getId()))) { if ((d.hasPath()) && (path.equals(d.getPath()))) { return pkg; } } } return null; }

private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app != null) && (isSupportedApplication(app))) && (!(app.isReady()))) { return false; } } return (mUiccApplications[0]) != null; }


@java.lang.Override public java.lang.String getDisplayName() { return java.lang.String.format("%s touchscreen at (%d, %d)", com.android.monkeyrunner.recorder.actions.TouchAction.DOWNUP_FLAG_MAP.get(direction), x, y); }
@com.android.annotations.NonNull public static com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration create(@com.android.annotations.NonNull com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration other, @com.android.annotations.NonNull com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration values, @com.android.annotations.NonNull com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration parent) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration configuration = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration(other.mConfigChooser, parent); configuration.setDisplayName(values.getDisplayName()); configuration.setActivity(values.getActivity()); configuration.mOverrideLocale = other.mOverrideLocale; if (configuration.mOverrideLocale) { configuration.setLocale(values.getLocale(), true); } configuration.mOverrideTarget = other.mOverrideTarget; if (configuration.mOverrideTarget) { configuration.setTarget(values.getTarget(), true); } configuration.mOverrideDevice = other.mOverrideDevice; configuration.mOverrideDeviceState = other.mOverrideDeviceState; if (configuration.mOverrideDevice) { configuration.setDevice(values.getDevice(), true); } if (configuration.mOverrideDeviceState) { configuration.setDeviceState(values.getDeviceState(), true); } configuration.mOverrideNightMode = other.mOverrideNightMode; if (configuration.mOverrideNightMode) { configuration.setNightMode(values.getNightMode(), true); } configuration.mOverrideUiMode = other.mOverrideUiMode; if (configuration.mOverrideUiMode) { configuration.setUiMode(values.getUiMode(), true); } return configuration; }
public native android.system.StructStat stat(java.lang.String path) throws android.system.ErrnoException;
@org.junit.Test public void testLamba029() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA029).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }
private void logDefaultNetworkEvent(com.android.server.connectivity.NetworkAgentInfo newNai, com.android.server.connectivity.NetworkAgentInfo prevNai) { int newNetid = NETID_UNSET; int prevNetid = NETID_UNSET; int[] transports = new int[0]; boolean hadIPv4 = false; boolean hadIPv6 = false; if (newNai != null) { newNetid = newNai.network.netId; transports = newNai.networkCapabilities.getTransportTypes(); } if (prevNai != null) { prevNetid = prevNai.network.netId; final android.net.LinkProperties lp = prevNai.linkProperties; hadIPv4 = (lp.hasIPv4Address()) && (lp.hasIPv4DefaultRoute()); hadIPv6 = (lp.hasGlobalIPv6Address()) && (lp.hasIPv6DefaultRoute()); } mMetricsLog.log(new android.net.metrics.DefaultNetworkEvent(newNetid, transports, prevNetid, hadIPv4, hadIPv6)); }
@com.android.annotations.Nullable java.lang.String computePreferredTheme() { org.eclipse.core.resources.IProject project = mConfigChooser.getProject(); com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo manifest = com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo.get(project); com.android.resources.ScreenSize screenSize = null; com.android.sdklib.devices.Device device = getDevice(); if (device != null) { java.util.List<com.android.sdklib.devices.State> states = device.getAllStates(); for (com.android.sdklib.devices.State state : states) { com.android.ide.common.resources.configuration.FolderConfiguration folderConfig = com.android.ide.common.resources.configuration.DeviceConfigHelper.getFolderConfig(state); if (folderConfig != null) { com.android.ide.common.resources.configuration.ScreenSizeQualifier qualifier = folderConfig.getScreenSizeQualifier(); screenSize = qualifier.getValue(); break; } } } java.lang.String defaultTheme = manifest.getDefaultTheme(getTarget(), screenSize); java.lang.String preferred = defaultTheme; if ((getTheme()) == null) { java.lang.String activity = getActivity(); if (activity != null) { java.util.Map<java.lang.String, java.lang.String> activityThemes = manifest.getActivityThemes(); preferred = activityThemes.get(activity); } if (preferred == null) { preferred = defaultTheme; } setTheme(preferred); } return preferred; }

private com.android.jack.sample.instrumentation.JStatement createPrintlnStatement(@javax.annotation.Nonnull com.android.jack.sample.instrumentation.JMethod method) { com.android.jack.ir.sourceinfo.SourceInfo sourceInfo = com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN; java.lang.String methodName = getMethodName(method); com.android.jack.sample.instrumentation.JStringLiteral methodNameString = new com.android.jack.sample.instrumentation.JStringLiteral(sourceInfo, methodName); com.android.jack.sample.instrumentation.JFieldRef systemOutFieldAccess = new com.android.jack.sample.instrumentation.JFieldRef(sourceInfo, null, systemOutFieldId, javaLangSystemClass); com.android.jack.sample.instrumentation.JMethodCall methodCall = new com.android.jack.sample.instrumentation.JMethodCall(sourceInfo, systemOutFieldAccess, javaIoPrintStreamClass, printlnMethod.getMethodIdWide(), printlnMethod.getType(), true); methodCall.addArg(methodNameString); return new com.android.jack.sample.instrumentation.JExpressionStatement(methodCall.getSourceInfo(), methodCall); }
@android.test.suitebuilder.annotation.SmallTest public void testSatisfiedNetworkRequestDoesNotTriggerOnUnavailable() { android.net.NetworkRequest nr = new android.net.NetworkRequest.Builder().addTransportType(NetworkCapabilities.TRANSPORT_WIFI).build(); final com.android.server.ConnectivityServiceTest.TestNetworkCallback networkCallback = new com.android.server.ConnectivityServiceTest.TestNetworkCallback(); mCm.requestNetwork(nr, networkCallback, 10); mWiFiNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_WIFI); mWiFiNetworkAgent.connect(false); networkCallback.expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE, mWiFiNetworkAgent); com.android.server.ConnectivityServiceTest.sleepFor(15); networkCallback.assertNoCallback(); }
private static void createProductFlavorCombinations(java.util.List<com.android.build.gradle.internal.ProductFlavorCombo> flavorGroups, com.android.builder.model.ProductFlavor[] group, int index, java.util.List<java.lang.String> flavorDimensionList, com.google.common.collect.ListMultimap<java.lang.String, com.android.builder.model.ProductFlavor> map) { if (index == (flavorDimensionList.size())) { flavorGroups.add(new com.android.build.gradle.internal.ProductFlavorCombo(com.android.build.gradle.internal.ProductFlavorCombo.filterNullFromArray(group))); return; } java.lang.String dimension = flavorDimensionList.get(index); java.util.List<com.android.builder.model.ProductFlavor> flavorList = map.get(dimension); if (flavorList.isEmpty()) { throw new java.lang.RuntimeException(java.lang.String.format("No flavor is associated with flavor dimension '%1$s'.", dimension)); } else { for (com.android.builder.model.ProductFlavor flavor : flavorList) { group[index] = flavor; com.android.build.gradle.internal.ProductFlavorCombo.createProductFlavorCombinations(flavorGroups, group, (index + 1), flavorDimensionList, map); } } }
public static java.awt.image.BufferedImage convertToAwt(org.eclipse.swt.graphics.Image swtImage) { org.eclipse.swt.graphics.ImageData data = swtImage.getImageData(); java.awt.image.BufferedImage awtImage = new java.awt.image.BufferedImage(data.width, data.height, java.awt.image.BufferedImage.TYPE_INT_ARGB); org.eclipse.swt.graphics.PaletteData palette = data.palette; if (palette.isDirect) { for (int y = 0; y < (data.height); y++) { for (int x = 0; x < (data.width); x++) { int pixel = data.getPixel(x, y); awtImage.setRGB(x, y, (-16777216 | pixel)); } } } else { return null; } return awtImage; }
private void onConnectionStateChanged(int prevState, int state) { if ((mDevice) == null) { return; } if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, ((((("Connection state " + (mDevice)) + ": ") + prevState) + "->") + state)); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothMapClient.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }
private void addLibraryProjects(@com.android.annotations.NonNull java.util.Collection<com.android.tools.lint.detector.api.Project> collection) { for (com.android.tools.lint.detector.api.Project library : mDirectLibraries) { collection.add(library); library.addLibraryProjects(collection); } }
private boolean patternDuplicateAnonymousResult(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_reduce s) { boolean pass = true; final int inputSize = 1000; final int[] input = createInputArrayInt(149, ((java.lang.Integer.MAX_VALUE) / inputSize)); final int[] javaResultDec = sillySumIntoDecArray(input); final int[] rsResultDec = s.reduce_sillySumIntoDecArray(input).get(); pass &= result("patternDuplicateAnonymousResult (Dec)", new com.android.rs.test.UT_reduce.timing(inputSize), javaResultDec, rsResultDec); final int[] javaResultInc = sillySumIntoIncArray(input); final int[] rsResultInc = s.reduce_sillySumIntoIncArray(input).get(); pass &= result("patternDuplicateAnonymousResult (Inc)", new com.android.rs.test.UT_reduce.timing(inputSize), javaResultInc, rsResultInc); return pass; }


public void preDexLibrary(@com.android.annotations.NonNull java.io.File inputFile, @com.android.annotations.NonNull java.io.File outFile, @com.android.annotations.NonNull com.android.builder.core.DexOptions dexOptions, @com.android.annotations.NonNull com.android.sdklib.BuildToolInfo buildToolInfo, boolean verbose, @com.android.annotations.NonNull com.android.ide.common.internal.CommandLineRunner commandLineRunner) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { com.android.utils.Pair<com.android.builder.internal.compiler.PreDexCache.Item, java.lang.Boolean> pair = getItem(inputFile, outFile, buildToolInfo, dexOptions); if (pair.getSecond()) { try { com.android.builder.core.AndroidBuilder.preDexLibrary(inputFile, outFile, dexOptions, buildToolInfo, verbose, commandLineRunner); synchronized(this) { (mMisses)++; } } catch (java.io.IOException exception) { outFile.delete(); throw exception; } catch (com.android.ide.common.internal.LoggedErrorException exception) { outFile.delete(); throw exception; } catch (java.lang.InterruptedException exception) { outFile.delete(); throw exception; } finally { pair.getFirst().getLatch().countDown(); } } else { pair.getFirst().getLatch().await(); java.io.File fromFile = pair.getFirst().getOutputFile(); if (fromFile.isFile()) { com.google.common.io.Files.copy(pair.getFirst().getOutputFile(), outFile); synchronized(this) { (mHits)++; } } } }
@java.lang.Override protected void doFullTaskAction() { com.google.common.collect.SetMultimap<java.lang.String, java.lang.String> state = com.google.common.collect.HashMultimap.create(); emptyFolder(getOutputResDirectory()); emptyFolder(getGeneratedResDirectory()); emptyFolder(getIncrementalFolder()); try { for (java.io.File resourceFile : getProject().fileTree(getMergedResDirectory())) { handleFile(resourceFile, state); } saveState(state); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } }
@java.lang.Override public void performApply(org.eclipse.debug.core.ILaunchConfigurationWorkingCopy configuration) { configuration.setAttribute(LaunchConfigDelegate.ATTR_TARGET_MODE, mAutoTargetButton.getSelection()); com.android.sdklib.internal.avd.AvdInfo avd = mPreferredAvdSelector.getSelected(); if (avd != null) { configuration.setAttribute(LaunchConfigDelegate.ATTR_AVD_NAME, avd.getName()); } else { configuration.setAttribute(LaunchConfigDelegate.ATTR_AVD_NAME, ((java.lang.String) (null))); } configuration.setAttribute(LaunchConfigDelegate.ATTR_SPEED, mSpeedCombo.getSelectionIndex()); configuration.setAttribute(LaunchConfigDelegate.ATTR_DELAY, mDelayCombo.getSelectionIndex()); configuration.setAttribute(LaunchConfigDelegate.ATTR_COMMANDLINE, mEmulatorCLOptions.getText()); configuration.setAttribute(LaunchConfigDelegate.ATTR_WIPE_DATA, mWipeDataButton.getSelection()); configuration.setAttribute(LaunchConfigDelegate.ATTR_NO_BOOT_ANIM, mNoBootAnimButton.getSelection()); }
public void createAndroidTasks(@com.android.annotations.Nullable com.android.builder.model.SigningConfig signingOverride) { variantFactory.validateModel(this); if (!(productFlavors.isEmpty())) { org.gradle.api.Task assembleTest = project.getTasks().create("assembleAndroidTest"); assembleTest.setGroup(org.gradle.api.plugins.BasePlugin.BUILD_GROUP); assembleTest.setDescription("Assembles all the Test applications"); basePlugin.setAssembleAndroidTest(assembleTest); } if (variantDataList.isEmpty()) { populateVariantDataList(signingOverride); } for (com.android.build.gradle.internal.variant.BaseVariantData variantData : variantDataList) { createTasksForVariantData(project.getTasks(), variantData); } basePlugin.createLintTasks(); basePlugin.createConnectedCheckTasks((!(productFlavors.isEmpty())), false); basePlugin.createUnitTestTasks(); createApiObjects(); }
private void loadConfig() throws com.android.sched.util.file.NotFileException, com.android.sched.util.file.WrongPermissionException, java.io.IOException { com.android.jack.server.JackHttpServer.logger.log(java.util.logging.Level.INFO, ("Loading config of jack server version: " + (getVersion().getVerboseVersion()))); com.android.jack.server.ConfigFile config = new com.android.jack.server.ConfigFile(serverDir); checkAccess(config.getStorageFile(), java.util.EnumSet.of(java.nio.file.attribute.PosixFilePermission.OWNER_READ, java.nio.file.attribute.PosixFilePermission.OWNER_WRITE)); portService = config.getServicePort(); portAdmin = config.getAdminPort(); timeout = config.getTimeout(); maxJarSize = config.getMaxJarSize(); maxServices = config.getMaxServices(); java.util.List<com.android.sched.util.codec.PairCodec.Pair<java.lang.Integer, java.lang.Long>> maxServicesByMem = config.getMaxServiceByMem(); if (!(maxServicesByMem.isEmpty())) { long maxMemory = java.lang.Runtime.getRuntime().maxMemory(); for (com.android.sched.util.codec.PairCodec.Pair<java.lang.Integer, java.lang.Long> pair : maxServicesByMem) { if (maxMemory < (pair.getSecond().longValue())) { maxServices = java.lang.Math.min(pair.getFirst().intValue(), maxServices); } } } if ((config.isModified()) && ((config.getConfigVersion()) < (ConfigFile.CURRENT_CONFIG_VERSION))) { config.store(); } }
public void addU64(android.support.v8.renderscript.Long3 v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addU64(new android.renderscript.Long3(v.x, v.y, v.z)); return; } addU64(v.x); addU64(v.y); addU64(v.z); }
public static org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance(java.io.InputStream in, java.lang.String encoding) throws java.security.cert.CertificateException { if (!(org.apache.harmony.security.provider.cert.X509CertPathImpl.encodings.contains(encoding))) { throw new java.security.cert.CertificateException("Unsupported encoding"); } try { if (org.apache.harmony.security.provider.cert.X509CertPathImpl.encodingsArr[0].equals(encoding)) { return ((org.apache.harmony.security.provider.cert.X509CertPathImpl) (org.apache.harmony.security.provider.cert.X509CertPathImpl.ASN1.decode(in))); } else { org.apache.harmony.security.pkcs7.ContentInfo ci = ((org.apache.harmony.security.pkcs7.ContentInfo) (ContentInfo.ASN1.decode(in))); org.apache.harmony.security.pkcs7.SignedData sd = ci.getSignedData(); if (sd == null) { throw new java.security.cert.CertificateException("Incorrect PKCS7 encoded form: missing signed data"); } java.util.List<org.apache.harmony.security.x509.Certificate> certs = sd.getCertificates(); if (certs == null) { certs = new java.util.ArrayList<org.apache.harmony.security.x509.Certificate>(); } java.util.List<org.apache.harmony.security.provider.cert.X509CertImpl> result = new java.util.ArrayList<org.apache.harmony.security.provider.cert.X509CertImpl>(); for (org.apache.harmony.security.x509.Certificate cert : certs) { result.add(new org.apache.harmony.security.provider.cert.X509CertImpl(cert)); } return new org.apache.harmony.security.provider.cert.X509CertPathImpl(result, org.apache.harmony.security.provider.cert.X509CertPathImpl.PKCS7, ci.getEncoded()); } } catch (java.io.IOException e) { throw new java.security.cert.CertificateException(("Incorrect encoded form: " + (e.getMessage()))); } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testModemSuggestNoRetry() throws java.lang.Exception { com.android.internal.telephony.dataconnection.DataCallResponse response = new com.android.internal.telephony.dataconnection.DataCallResponse(); response.suggestedRetryTime = java.lang.Integer.MAX_VALUE; android.os.AsyncResult ar = new android.os.AsyncResult(null, response, null); assertEquals(RetryManager.NO_RETRY, getSuggestedRetryDelay(ar)); }

private boolean ensureConnectedLocked() { if (mConnected) { return true; } if (mVerboseLoggingEnabled) android.util.Log.d(com.android.server.wifi.WifiMonitor.TAG, "connecting to supplicant"); int connectTries = 0; while (true) { if (mWifiNative.connectToSupplicant()) { mConnected = true; new com.android.server.wifi.WifiMonitor.MonitorThread(mWifiNative.getLocalLog()).start(); return true; } if ((connectTries++) < 5) { try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException ignore) { } } else { return false; } } }
private com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor createSearchable(java.util.Map<java.lang.String, com.android.ide.eclipse.adt.internal.resources.DeclareStyleableInfo> searchableStyleMap, com.android.ide.eclipse.adt.internal.editors.descriptors.XmlnsAttributeDescriptor xmlns) { com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor action_key = createElement(searchableStyleMap, "SearchableActionKey", "actionkey", "Action Key", null, null, null, false); com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor searchable = createElement(searchableStyleMap, "Searchable", "searchable", "Searchable", null, xmlns, new com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor[]{ action_key }, false); return searchable; }

@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.OutputVDir parseString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) { try { return checkString(context, string); } catch (com.android.sched.util.codec.ParsingException e) { throw new com.android.sched.util.config.ConfigurationError(e); } }
public void testSetDecimalFormatSymbolsAsNull() { java.text.DecimalFormat format = ((java.text.DecimalFormat) (java.text.DecimalFormat.getInstance())); format.setDecimalFormatSymbols(null); }
private void updateAccessPointsDelayed() { if ((((getActivity()) != null) && (!(mIsRestricted))) && (mWifiManager.isWifiEnabled())) { setProgressBarVisible(true); getView().postDelayed(mUpdateAccessPointsRunnable, 300); } }
@java.lang.Override public java.util.List<android.content.pm.PackageInfo> getInstalledPackages(int flags) { try { return mPM.getInstalledPackages(flags); } catch (android.os.RemoteException e) { throw new java.lang.RuntimeException("Package manager has died", e); } }
@java.lang.Override public void call(org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams response) { if (((response.output) != null) && ((response.output.which()) == (RunOutput.Tag.QueryVersionResult))) { mVersion = response.output.getQueryVersionResult().version; } try { callback.call(mVersion); } catch (java.lang.RuntimeException e) { android.util.Log.wtf("org.chromium.mojo.bindings.Interface", "Uncaught runtime exception", e); } }
@org.junit.Test public void testSniper3d() throws java.io.IOException, java.lang.InterruptedException { startApp(com.google.android.gfx.benchmark.test.GraphicsBenchmarkTest.App.SNIPER_3D); }
public java.lang.String getName() { if (isLocal) { return "LOCAL DEVICE"; } return deviceName; }
@org.junit.Test public void testSuperReferenceExpressionWithVarArgs() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_18).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }
public static java.lang.String asString(com.android.tools.perflib.heap.Instance inst) { if (!(com.android.ahat.InstanceUtils.isInstanceOfClass(inst, "java.lang.String"))) { return null; } char[] value = com.android.ahat.InstanceUtils.getCharArrayField(inst, "value"); return value == null ? null : new java.lang.String(value); }
static void read(java.nio.channels.SocketChannel chan, byte[] data) throws com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.AdbHelper.read(chan, data, (-1), com.android.ddmlib.DdmPreferences.getTimeOut()); }

public final void onSmsStatusReportReceived(int token, int messageRef, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException("Feature not ready."); } try { mListener.onSmsStatusReportReceived(token, messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, ("Can not process sms status report: " + (e.getMessage()))); acknowledgeSmsReport(token, messageRef, android.telephony.ims.stub.ImsSmsImplBase.STATUS_REPORT_STATUS_ERROR); } } }
public void serviceDoneExecutingLocked(com.android.server.am.ServiceRecord r, boolean inStopping) { (r.executeNesting)--; if (((r.executeNesting) <= 0) && ((r.app) != null)) { r.app.executingServices.remove(r); if ((r.app.executingServices.size()) == 0) { mHandler.removeMessages(com.android.server.am.ActivityManagerService.SERVICE_TIMEOUT_MSG, r.app); } if (inStopping) { mStoppingServices.remove(r); } updateOomAdjLocked(r.app); } }
public void finish(@javax.annotation.Nonnull java.io.OutputStream out) throws java.io.IOException { dexResult.prepare(cstManager.getCstIndexMaps()); if (!(cstManager.validate(dexResult))) { throw new java.lang.AssertionError(); } dexResult.writeTo(out, null, false); finished = true; }
public java.lang.String getDisplayLanguage(java.util.Locale locale) { if (languageCode.isEmpty()) { return ""; } try { java.util.Locale.Builder.normalizeAndValidateLanguage(languageCode); } catch (java.util.IllformedLocaleException ex) { return languageCode; } java.lang.String result = libcore.icu.ICU.getDisplayLanguage(this, locale); if (result == null) { result = libcore.icu.ICU.getDisplayLanguage(this, java.util.Locale.getDefault()); } return result; }
public native int getsockoptByte(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException;
@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testDefaultMethod006() throws java.lang.Exception { run(DEFAULTMETHOD006); }
@java.lang.Override public boolean processMessage(android.os.Message msg) { log(("IdleState.processMessage:" + (msg.what))); if (com.android.internal.telephony.InboundSmsHandler.DBG) log(("Idle state processing message type " + (msg.what))); switch (msg.what) { case com.android.internal.telephony.InboundSmsHandler.EVENT_NEW_SMS : case com.android.internal.telephony.InboundSmsHandler.EVENT_INJECT_SMS : case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_SMS : deferMessage(msg); transitionTo(mDeliveringState); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_RELEASE_WAKELOCK : mWakeLock.release(); if (com.android.internal.telephony.InboundSmsHandler.DBG) { if (mWakeLock.isHeld()) { log("mWakeLock is still held after release"); } else { log("mWakeLock released"); } } return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE : return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_COMPLETE : case com.android.internal.telephony.InboundSmsHandler.EVENT_START_ACCEPTING_SMS : default : return NOT_HANDLED; } }
@javax.annotation.Nonnull public static java.io.File createTempFile(@javax.annotation.Nonnull java.lang.String prefix) throws com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotSetPermissionException, com.android.sched.util.file.WrongPermissionException { return com.android.sched.util.file.Files.createTempFile(prefix, ""); }

public void testConfig() throws java.lang.Exception { if (android.security.cts.EncryptionTest.cpuHasAes()) { assertTrue(((android.security.cts.EncryptionTest.crypto) + " is missing xts-aes-ce"), hasKernelCrypto("xts-aes-ce")); } else if (android.security.cts.EncryptionTest.cpuHasNeon()) { assertTrue(((android.security.cts.EncryptionTest.crypto) + " is missing xts-aes-neon (or xts-aes-neonbs)"), (((hasKernelCrypto("xts-aes-neon")) || (hasKernelCrypto("xts-aes-neonbs"))) || (hasKernelCrypto("aes-asm")))); } if (android.security.cts.EncryptionTest.cpuHasNeon()) { assertTrue("libcrypto must have NEON", android.security.cts.EncryptionTest.neonIsEnabled()); } }


private void readStack(@javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame<org.objectweb.asm.tree.analysis.BasicValue> frame, int stackIdx) throws java.io.IOException, java.lang.IndexOutOfBoundsException { writeLocalRef(getStackVariable(frame, stackIdx)); }

void registerServerSocket(java.lang.String socketName) { if ((mServerSocket) == null) { int fileDesc; final java.lang.String fullSocketName = (com.android.internal.os.ZygoteServer.ANDROID_SOCKET_PREFIX) + socketName; try { java.lang.String env = java.lang.System.getenv(fullSocketName); fileDesc = java.lang.Integer.parseInt(env); } catch (java.lang.RuntimeException ex) { throw new java.lang.RuntimeException((fullSocketName + " unset or invalid"), ex); } try { java.io.FileDescriptor fd = new java.io.FileDescriptor(); fd.setInt$(fileDesc); mServerSocket = new android.net.LocalServerSocket(fd); } catch (java.io.IOException ex) { throw new java.lang.RuntimeException((("Error binding to local socket '" + fileDesc) + "'"), ex); } } }
@org.junit.BeforeClass public static void setupClass() throws com.android.sched.util.config.ConfigurationException { com.android.sched.util.config.ThreadConfig.setConfig(new com.android.sched.util.config.GatherConfigBuilder().build()); com.android.jack.annotation.processor.AnnotationProcessorTests.noConfigProcessors = null; com.android.jack.annotation.processor.AnnotationProcessorTests.autoProcessors = null; }

@javax.annotation.Nonnull private com.android.sched.util.config.cli.TokenIterator.Entry getNext() throws com.android.sched.util.file.CannotReadException, com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotFileOrDirectoryException, com.android.sched.util.file.WrongPermissionException, java.util.NoSuchElementException { while (true) { java.io.StreamTokenizer tokenizer = tokenizers.peek(); while (tokenizer != null) { try { if ((tokenizer.nextToken()) != (java.io.StreamTokenizer.TT_EOF)) { if ((allowFileRefInFile) && ((tokenizer.sval.charAt(0)) == (filePrefix))) { pushFileTokenizer(tokenizer.sval.substring(1)); tokenizer = tokenizers.peek(); continue; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(tokenizer.sval, new com.android.sched.util.location.LineLocation(locations.peek(), tokenizer.lineno())); } } } catch (java.io.IOException e) { tokenizers.clear(); tokenizers.push(null); index = args.length; throw new com.android.sched.util.file.CannotReadException(locations.peek()); } tokenizers.pop(); tokenizer = tokenizers.peek(); locations.pop(); } if ((index) >= (args.length)) { throw new java.util.NoSuchElementException(); } if ((allowFileRefInArray) && ((args[index].charAt(0)) == (filePrefix))) { pushFileTokenizer(args[index].substring(1)); (index)++; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(args[((index)++)], locations.peek()); } } }
public void push(java.lang.String[] local, com.android.ddmlib.FileListingService.FileEntry remote, com.android.ddmlib.SyncService.ISyncProgressMonitor monitor) throws com.android.ddmlib.SyncException, com.android.ddmlib.TimeoutException, java.io.IOException { if (!(remote.isDirectory())) { throw new com.android.ddmlib.SyncException(com.android.ddmlib.SyncException.SyncError.REMOTE_IS_FILE); } java.util.ArrayList<java.io.File> files = new java.util.ArrayList<java.io.File>(); for (java.lang.String path : local) { files.add(new java.io.File(path)); } java.io.File[] fileArray = files.toArray(new java.io.File[files.size()]); int total = getTotalLocalFileSize(fileArray); monitor.start(total); doPush(fileArray, remote.getFullPath(), monitor); monitor.stop(); }

@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) > 0) { debugLog(("dumpsys arguments, skipping normal dumpsys: " + (android.text.TextUtils.join(" ", args)))); if (args[0].startsWith("--proto")) { dumpNative(fd, args); } return; } writer.println("Bluetooth Status"); writer.println((" enabled: " + (isEnabled()))); writer.println((" state: " + (getState()))); writer.println((" address: " + (getAddress()))); writer.println(((" name: " + (getName())) + "\n")); writer.println("Bonded devices:"); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println((((((" " + (device.getAddress())) + " [") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + "] ") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }

public java.util.Map<java.lang.String, java.lang.String> getNetworkExtra(int netId, java.lang.String name) { final java.lang.String extraString = getNetworkVariable(netId, name); return com.android.server.wifi.WifiNative.parseNetworkExtra(extraString); }
@java.lang.Override public void update(java.net.CacheResponse conditionalCacheHit, java.net.HttpURLConnection connection) { delegate.update(conditionalCacheHit, connection); }


@java.lang.Override protected void setUserUnlocked(int userId) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "User unlocked, initializing the service"); if (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.avrcp.AvrcpTargetService.AVRCP_ENABLE_PROPERTY, false))) { android.util.Log.w(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "Skipping initialization of the new AVRCP Target Service"); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = null; return; } init(); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = this; }

private void readExternalData(java.io.Externalizable obj, java.io.ObjectStreamClass desc) throws java.io.IOException { java.io.SerialCallbackContext oldContext = curContext; curContext = null; try { boolean blocked = desc.hasBlockExternalData(); if (blocked) { bin.setBlockDataMode(true); } if (obj != null) { try { obj.readExternal(this); } catch (java.lang.ClassNotFoundException ex) { handles.markException(passHandle, ex); } } if (blocked) { skipCustomData(); } } finally { curContext = oldContext; } }


private void registerUiccCardEvents() { if ((mUiccApplication) != null) { mUiccApplication.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); mUiccApplication.registerForNetworkLocked(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_NETWORK_LOCKED, null); } if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); mIccRecords.registerForLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_LOCKED, null); mIccRecords.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } }

public void handleEvent(org.eclipse.swt.widgets.Event event) { if (!(mInternalApplicationNameUpdate)) { mApplicationNameModifiedByUser = true; } }


@java.lang.Override protected void engineUpdate(byte[] input, int offset, int len) { org.conscrypt.NativeCrypto.EVP_DigestUpdate(ctx.getContext(), input, offset, len); }
public void getOwnAddress() { try { gatt.getOwnAddress(this.advertiserId); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }

private void notifyShutdown() { if (com.android.bluetooth.sap.SapRilReceiver.DEBUG) android.util.Log.i(com.android.bluetooth.sap.SapRilReceiver.TAG, "notifyShutdown()"); synchronized(this) { if ((mSocket) != null) sendShutdownMessage(); } }
private static native void nativeDrawBitmapMatrix(int nCanvas, int nBitmap, int nMatrix, int nPaint);

public void testStackFocusSwitchOnTouchEvent() throws java.lang.Exception { if (!(supportsMultiDisplay())) { return; } final android.server.cts.DisplayState newDisplay = new android.server.cts.VirtualDisplayBuilder(this).build(); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY }); mAmWmState.assertFocusedActivity("Focus must be switched back to primary display", android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY); launchActivityOnDisplay(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, newDisplay.mDisplayId); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME }); mAmWmState.assertFocusedActivity("Activity launched on secondary display must be focused", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); final android.server.cts.ActivityManagerDisplayTests.ReportedDisplayMetrics displayMetrics = getDisplayMetrics(); final int width = displayMetrics.getWidth(); final int height = displayMetrics.getHeight(); executeShellCommand(((("input tap " + (width / 2)) + " ") + (height / 2))); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY }); mAmWmState.assertFocusedActivity("Focus must be switched back to primary display", android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY); }
public int sendto(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, int flags, java.net.InetAddress inetAddress, int port) throws java.net.SocketException, libcore.io.ErrnoException { if (buffer.isDirect()) { return sendtoBytes(fd, buffer, buffer.position(), buffer.remaining(), flags, inetAddress, port); } else { return sendtoBytes(fd, java.nio.NioUtils.unsafeArray(buffer), ((java.nio.NioUtils.unsafeArrayOffset(buffer)) + (buffer.position())), buffer.remaining(), flags, inetAddress, port); } }
public void testCyclicGraph() { mSnapshot = new com.android.tools.perflib.heap.analysis.SnapshotBuilder(4).addReferences(1, 2, 3, 4).addReferences(2, 3).addReferences(3, 4).addReferences(4, 2).addRoot(1).getSnapshot(); mDominators = com.android.tools.perflib.heap.analysis.Dominators.getDominatorMap(mSnapshot); assertEquals(4, mDominators.size()); assertDominates(1, 2); assertDominates(1, 3); assertDominates(1, 4); }
private int performDexOptTraced(java.lang.String packageName, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete) { android.os.Trace.traceBegin(com.android.server.pm.TRACE_TAG_PACKAGE_MANAGER, "dexopt"); try { return performDexOptInternal(packageName, checkProfiles, targetCompilerFilter, force, bootComplete); } finally { android.os.Trace.traceEnd(com.android.server.pm.TRACE_TAG_PACKAGE_MANAGER); } }

static void getLong(java.lang.invoke.MethodHandle m, Main.ValueHolder v, long value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final long got = (v == null) ? ((long) (m.invokeExact())) : ((long) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
private synchronized void initMediaPlayersInfoList() { mMediaPlayerInfoList.clear(); if ((mMediaSessionManager) == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.w(com.android.bluetooth.avrcp.Avrcp.TAG, "initMediaPlayersInfoList: no media session manager!"); return; } java.util.List<android.media.session.MediaController> controllers = mMediaSessionManager.getActiveSessions(null); if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, (("initMediaPlayerInfoList: " + (controllers.size())) + " controllers")); for (android.media.session.MediaController mediaController : controllers) { java.lang.String packageName = mediaController.getPackageName(); com.android.bluetooth.avrcp.MediaController controller = com.android.bluetooth.avrcp.MediaController.wrap(mediaController); com.android.bluetooth.avrcp.MediaPlayerInfo info = new com.android.bluetooth.avrcp.MediaPlayerInfo(packageName, AvrcpConstants.PLAYER_TYPE_AUDIO, AvrcpConstants.PLAYER_SUBTYPE_NONE, getPlayBackState(controller), getFeatureBitMask(packageName), getAppLabel(packageName), controller); if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, info.toString()); mMediaPlayerInfoList.add(info); } }
@org.junit.Test public void testDefaultMethod013() throws java.lang.Exception { run(DEFAULTMETHOD013); }









public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { if (android.bluetooth.BluetoothHeadset.VDBG) android.bluetooth.BluetoothHeadset.log("getConnectedDevices()"); if (((mService) != null) && (isEnabled())) { try { return mService.getConnectedDevices(); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); } } if ((mService) == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); }



private void onCleanupUser(int userId) { android.util.Slog.d(com.android.server.MountService.TAG, ("onCleanupUser " + userId)); try { mConnector.execute("volume", "user_stopped", userId); } catch (com.android.server.NativeDaemonConnectorException ignored) { } synchronized(mVolumes) { mStartedUsers = com.android.internal.util.ArrayUtils.removeInt(mStartedUsers, userId); } }
@org.junit.Test public void testDefaultInterfaceMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_28).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }
void discoveryStateChangeCallback(int state) { infoLog(("Callback:discoveryStateChangeCallback with state:" + state)); synchronized(mObject) { android.content.Intent intent; if (state == (AbstractionLayer.BT_DISCOVERY_STOPPED)) { mDiscovering = false; intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_FINISHED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } else if (state == (AbstractionLayer.BT_DISCOVERY_STARTED)) { mDiscovering = true; intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_STARTED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } } }

@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JAnnotation getAnnotation(@javax.annotation.Nonnull java.lang.String signature) { com.android.jack.ir.ast.JAnnotation type; try { type = jackLookup.getAnnotation(signature); assert !(doesCacheContain(annotationCache, signature)); } catch (com.android.jack.lookup.JLookupException e) { synchronized(annotationCache) { type = annotationCache.get(signature); if (type == null) { java.lang.String[] splitName = splitSignature(signature); com.android.jack.ir.ast.JPackage pack = getPackage(splitName); type = pack.getPhantomAnnotation(splitName[((splitName.length) - 1)]); annotationCache.put(signature, type); } } } return type; }
public void testInterruptedTimedPoll() throws java.lang.InterruptedException { final java.util.concurrent.BlockingQueue<java.lang.Integer> q = populatedQueue(jsr166.SIZE); final java.util.concurrent.CountDownLatch aboutToWait = new java.util.concurrent.CountDownLatch(1); java.lang.Thread t = newStartedThread(new jsr166.CheckedRunnable() { public void realRun() throws java.lang.InterruptedException { long startTime = java.lang.System.nanoTime(); for (int i = 0; i < (SIZE); ++i) assertEquals(i, ((int) (q.poll(jsr166.LONG_DELAY_MS, java.util.concurrent.TimeUnit.MILLISECONDS)))); aboutToWait.countDown(); try { q.poll(jsr166.LONG_DELAY_MS, java.util.concurrent.TimeUnit.MILLISECONDS); shouldThrow(); } catch (java.lang.InterruptedException success) { } assertTrue(((millisElapsedSince(startTime)) < (LONG_DELAY_MS))); } }); aboutToWait.await(); waitForThreadToEnterWaitState(t); t.interrupt(); awaitTermination(t); checkEmpty(q); }
private static final void commonInit() { if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, "Entered RuntimeInit!"); java.lang.Thread.setDefaultUncaughtExceptionHandler(new com.android.internal.os.RuntimeInit.UncaughtHandler()); org.apache.harmony.luni.internal.util.TimezoneGetter.setInstance(new org.apache.harmony.luni.internal.util.TimezoneGetter() { @java.lang.Override public java.lang.String getId() { return android.os.SystemProperties.get("persist.sys.timezone"); } }); java.util.TimeZone.setDefault(null); java.util.logging.LogManager.getLogManager().reset(); new com.android.internal.logging.AndroidConfig(); java.lang.String userAgent = com.android.internal.os.RuntimeInit.getDefaultUserAgent(); java.lang.System.setProperty("http.agent", userAgent); com.android.server.NetworkManagementSocketTagger.install(); java.lang.String trace = android.os.SystemProperties.get("ro.kernel.android.tracing"); if (trace.equals("1")) { android.util.Slog.i(com.android.internal.os.RuntimeInit.TAG, "NOTE: emulator trace profiling enabled"); android.os.Debug.enableEmulatorTraceOutput(); } com.android.internal.os.RuntimeInit.initialized = true; }
public native int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws java.io.InterruptedIOException, libcore.io.ErrnoException;

@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { if (!(mAutoScrollLock)) { return; } boolean isAtBottom = ((vbar.getThumb()) + (vbar.getSelection())) == (vbar.getMaximum()); setScrollToLatestLog(isAtBottom); mScrollLockCheckBox.setSelection(isAtBottom); }
@org.junit.Test public void legacyAppTest003() throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestsWithJackFolder("multidex/test003"); java.io.File out = com.android.jack.TestTools.createTempDir("out", ""); com.android.jack.Options appOptions = new com.android.jack.Options(); appOptions.addProperty(MultiDexLegacy.MULTIDEX_LEGACY.getName(), "true"); appOptions.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), "minimal-multidex"); com.android.jack.TestTools.compileSourceToDex(appOptions, testFolder, (((((com.android.jack.TestTools.getDefaultBootclasspathString()) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.annotations.getPath())) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.frameworks.getPath())), out, false); java.io.File outList = getListingOfDex(new java.io.File(out, "classes.dex")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, "ref-list-003-1.txt"), outList); java.io.File outList2 = getListingOfDex(new java.io.File(out, "classes2.dex")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, "ref-list-003-2.txt"), outList2); junit.framework.Assert.assertFalse(new java.io.File(out, "classes3.dex").exists()); return; }
public void checkClass(@com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context, @com.android.annotations.Nullable lombok.ast.ClassDeclaration declaration, @com.android.annotations.NonNull lombok.ast.Node node, @com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedClass resolvedClass) { }


public void testAesCbcHmacSha512Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }

public void testWrongSeparator2() throws java.lang.Exception { assertEquals(("AndroidManifest.xml:14: Error: Class referenced in the manifest, test.pkg.Foo.Bar, was not found in the project or the libraries [MissingRegistered]\n" + (((((" <activity\n" + " ^\n") + "AndroidManifest.xml:15: Warning: Use \'$\' instead of \'.\' for inner classes (or use only lowercase letters in package names) [InnerclassSeparator]\n") + " android:name=\".Foo.Bar\"\n") + " ~~~~~~~~~~~~~~~~~~~~~~~\n") + "1 errors, 1 warnings\n")), lintProject("registration/AndroidManifestWrong2.xml=>AndroidManifest.xml", "bytecode/.classpath=>.classpath", "registration/Bar.java.txt=>src/test/pkg/Foo/Bar.java")); }

@org.junit.Test public void compileWithAnnotationProcessorNoAutoNoClasses_processorPath() throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorPath(processors.getPath()); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(jackOut); junit.framework.Assert.assertFalse(libOut.containsFileType(FileType.RSC)); try { libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath("Annotated2Duplicated", '/')); junit.framework.Assert.fail(); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { } }


@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JSwitchStatement switchStatement) { super.visit(switchStatement); com.android.jack.cfg.SwitchBasicBlock switchBlock = new com.android.jack.cfg.SwitchBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(switchBlock); java.util.List<com.android.jack.ir.ast.JCaseStatement> cases = switchStatement.getCases(); java.util.Collections.sort(cases, new com.android.jack.cfg.CfgBuilder.JCaseStatementComparator()); com.android.jack.ir.ast.JStatement defaultCase = switchStatement.getDefaultCase(); if (defaultCase == null) { defaultCase = com.android.jack.util.ControlFlowHelper.getNextStatement(switchStatement); } forwardBranchResolver.addSwitchBasicBlock(switchBlock, cases, defaultCase); return true; }

@java.lang.Override public synchronized void applyTunnelModeTransform(int direction, int transformResourceId, int tunnelResourceId) throws android.os.RemoteException { com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TransformRecord transformInfo = userRecord.mTransformRecords.getResourceOrThrow(transformResourceId); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); android.net.IpSecConfig c = transformInfo.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (android.net.IpSecTransform.MODE_TUNNEL)), "Transform mode was not Tunnel mode; cannot be applied to a tunnel interface"); int[] keys = tunnelInterfaceInfo.getKeys(); }




@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int set, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, rxBytes, rxPackets, txBytes, txPackets, operations)); }
private void update() { mBlacklistDisabled = "*".equals(Settings.Global.getString(mContext.getContentResolver(), Settings.Global.HIDDEN_API_BLACKLIST_EXEMPTIONS)); }
public int getDiscoverableTimeout() { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, "getDiscoverableTimeout() - Not allowed for non-active user"); return 0; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return 0; return service.getDiscoverableTimeout(); }
int measureContentWidth(android.widget.SpinnerAdapter adapter, android.graphics.drawable.Drawable background) { if (adapter == null) { return 0; } int width = 0; android.view.View itemView = null; int itemType = 0; final int widthMeasureSpec = android.widget.MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED); final int heightMeasureSpec = android.widget.MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED); int start = java.lang.Math.max(0, getSelectedItemPosition()); final int end = java.lang.Math.min(adapter.getCount(), (start + (android.widget.Spinner.MAX_ITEMS_MEASURED))); final int count = end - start; start = java.lang.Math.max(0, (start - ((android.widget.Spinner.MAX_ITEMS_MEASURED) - count))); for (int i = start; i < end; i++) { final int positionType = adapter.getItemViewType(i); if (positionType != itemType) { itemType = positionType; itemView = null; } itemView = adapter.getView(i, itemView, this); if ((itemView.getLayoutParams()) == null) { itemView.setLayoutParams(new android.view.ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT)); } itemView.measure(widthMeasureSpec, heightMeasureSpec); width = java.lang.Math.max(width, itemView.getMeasuredWidth()); } if (background != null) { background.getPadding(mTempRect); width += (mTempRect.left) + (mTempRect.right); } return width; }

protected com.intellij.updater.ValidationResult doValidateAccess(java.io.File toFile, com.intellij.updater.ValidationResult.Action action) { if (!(toFile.exists())) return null; if (toFile.isDirectory()) return null; com.intellij.updater.ValidationResult result = validateProcessLock(toFile, action); if (result != null) { return result; } if (((toFile.canRead()) && (toFile.canWrite())) && (isWritable(toFile))) return null; return new com.intellij.updater.ValidationResult(ValidationResult.Kind.ERROR, myPath, action, ValidationResult.ACCESS_DENIED_MESSAGE, ValidationResult.Option.IGNORE); }
public synchronized void startSocketListeners() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, "Map Service startSocketListeners"); } if ((mServerSession) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, "mServerSession exists - shutting it down..."); } mServerSession.close(); mServerSession = null; } if ((mObserver) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, "mObserver exists - shutting it down..."); } mObserver.deinit(); mObserver = null; } closeConnectionSocket(); if ((mServerSockets) != null) { mServerSockets.prepareForNewConnect(); } else { mServerSockets = com.android.bluetooth.ObexServerSockets.create(this); if ((mServerSockets) == null) { android.util.Log.e(mTag, "Failed to start the listeners"); return; } removeSdpRecord(); mSdpHandle = createMasSdpRecord(mServerSockets.getRfcommChannel(), mServerSockets.getL2capPsm()); if (com.android.bluetooth.map.BluetoothMapMasInstance.V) { android.util.Log.d(mTag, ((((("Creating new SDP record for MAS instance: " + (mMasInstanceId)) + " Object reference: ") + (this)) + "SDP handle: ") + (mSdpHandle))); } updateDbIdentifier(); } }


@javax.annotation.Nonnull private java.io.File createJackArchiveWithResources() throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File jackAr = com.android.jack.test.toolchain.AbstractTestTools.createTempFile("resourcetestjack", toolchain.getLibraryExtension()); toolchain.addResourceDir(new java.io.File(com.android.jack.resource.ResourceTests.FILE, "rsc")); toolchain.addToClasspath(toolchain.getDefaultBootClasspath()).srcToLib(jackAr, true, com.android.jack.resource.ResourceTests.FILE); return jackAr; }
public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public native int setsid() throws android.system.ErrnoException;
@java.lang.Override public void onChanged(android.net.sip.SipAudioCall call) { synchronized(com.android.internal.telephony.sip.SipPhone.class) { com.android.internal.telephony.Call.State newState = com.android.internal.telephony.sip.SipPhone.getCallStateFrom(call); if ((mState) == newState) return; if (newState == (Call.State.INCOMING)) { setState(mOwner.getState()); } else { if ((mOwner) == (mRingingCall)) { if ((mRingingCall.getState()) == (Call.State.WAITING)) { try { switchHoldingAndActive(); } catch (com.android.internal.telephony.CallStateException e) { onCallEnded(DisconnectCause.LOCAL); return; } } mForegroundCall.switchWith(mRingingCall); } setState(newState); } mOwner.onConnectionStateChanged(this); if (com.android.internal.telephony.sip.SipPhone.SipConnection.SCN_DBG) log(((((("onChanged: " + (mPeer.getUriString())) + ": ") + (mState)) + " on phone ") + (getPhone()))); } }
@java.lang.Override public void incrementOperationCount(int uid, int tag, int operationCount) { if ((android.os.Binder.getCallingUid()) != uid) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.UPDATE_DEVICE_STATS, com.android.server.net.NetworkStatsService.TAG); } if (operationCount < 0) { throw new java.lang.IllegalArgumentException("operation count can only be incremented"); } if (tag == (android.net.NetworkStats.TAG_NONE)) { throw new java.lang.IllegalArgumentException("operation count must have specific tag"); } synchronized(mStatsLock) { final int set = mActiveUidCounterSet.get(uid, android.net.NetworkStats.SET_DEFAULT); mUidOperations.combineValues(mActiveIface, uid, set, tag, 0L, 0L, 0L, 0L, operationCount); mUidOperations.combineValues(mActiveIface, uid, set, android.net.NetworkStats.TAG_NONE, 0L, 0L, 0L, 0L, operationCount); } }

static void setShort(java.lang.invoke.MethodHandle m, Main.ValueHolder v, short value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
public void testConfigurationUpdatesWhenResizedFromDockedStack() throws java.lang.Exception { if (!(supportsMultiWindowMode())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, "Skipping test: no multi-window support"); return; } launchActivityInStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); moveActivityToStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); android.server.cts.ActivityManagerAppConfigurationTests.assertSizesAreSane(fullscreenSizes, dockedSizes); }
public java.net.URL getEntryUrlOrNull(java.lang.String entryName) { if ((jarFile.findEntry(entryName)) != null) { try { return new java.net.URL("jar", null, (-1), (((fileUri) + "!/") + entryName), this); } catch (java.net.MalformedURLException e) { throw new java.lang.RuntimeException("Invalid entry name", e); } } return null; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Return True if Enhanced 4g Lte mode is enabled by user.") public boolean imsIsEnhanced4gLteModeSettingEnabledByUser() { return com.android.ims.ImsManager.isEnhanced4gLteModeSettingEnabledByUser(mContext); }

boolean disconnect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("disconnect(): " + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); int connectionState = mStateMachine.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mStateMachine.sendMessage(A2dpStateMachine.DISCONNECT, device); return true; }

@org.junit.Test public void opc_goto() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(OPC_GOTO).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }
public int getDefaultSim() { return android.telephony.SubscriptionManager.getSlotId(android.telephony.SubscriptionManager.getDefaultSubscriptionId()); }
@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.CstInsn)) { return false; } com.android.dx.dex.code.CstInsn ci = ((com.android.dx.dex.code.CstInsn) (insn)); int cpi = ci.getIndex(); if (!(unsignedFitsInShort(cpi))) { return false; } com.android.dx.rop.cst.Constant cst = ci.getConstant(); if (!((cst instanceof com.android.dx.rop.cst.CstMethodRef) || (cst instanceof com.android.dx.rop.cst.CstType))) { return false; } com.android.dx.rop.code.RegisterSpecList regs = ci.getRegisters(); return (com.android.dx.dex.code.form.Form45cc.wordCount(regs)) >= 0; }

public boolean saveToStore(boolean forceWrite) { java.util.ArrayList<android.net.wifi.WifiConfiguration> sharedConfigurations = new java.util.ArrayList<>(); java.util.ArrayList<android.net.wifi.WifiConfiguration> userConfigurations = new java.util.ArrayList<>(); for (android.net.wifi.WifiConfiguration config : mConfiguredNetworks.valuesForAllUsers()) { if ((!(config.ephemeral)) && (!(config.isPasspoint()))) { if ((config.shared) || (!(com.android.server.wifi.WifiConfigurationUtil.doesUidBelongToAnyProfile(config.creatorUid, mUserManager.getProfiles(mCurrentUserId))))) { sharedConfigurations.add(config); } else { userConfigurations.add(config); } } } com.android.server.wifi.WifiConfigStoreData storeData = new com.android.server.wifi.WifiConfigStoreData(sharedConfigurations, userConfigurations, mDeletedEphemeralSSIDs); try { mWifiConfigStore.write(forceWrite, storeData); } catch (java.io.IOException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG, "Writing to store failed. Saved networks maybe lost!", e); return false; } catch (org.xmlpull.v1.XmlPullParserException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG, "XML serialization for store failed. Saved networks maybe lost!", e); return false; } return true; }
public void onAlternateLayoutCreated() { org.eclipse.core.resources.IFile best = com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher.getBestFileMatch(this); if ((best != null) && (!(best.equals(mEditedFile)))) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher matcher = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher(this); matcher.adaptConfigSelection(true); mConfiguration.syncFolderConfig(); if ((mClient) != null) { mClient.changed(com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationClient.CHANGED_ALL); } } }
public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_kernel2d_oldstyle s = new com.android.rs.test.ScriptC_kernel2d_oldstyle(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_init_vars(A); s.forEach_xform(A, B); s.invoke_verify_xform(); s.invoke_kernel_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }
void removeForward(int localPort, int remotePort) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException;


private static java.nio.charset.Charset lookup2(java.lang.String charsetName) { java.lang.Object[] a; if (((a = java.nio.charset.Charset.cache2) != null) && (charsetName.equals(a[0]))) { java.nio.charset.Charset.cache2 = java.nio.charset.Charset.cache1; java.nio.charset.Charset.cache1 = a; return ((java.nio.charset.Charset) (a[1])); } java.nio.charset.Charset cs; if (((cs = libcore.icu.NativeConverter.charsetForName(charsetName)) != null) || ((cs = java.nio.charset.Charset.lookupViaProviders(charsetName)) != null)) { java.nio.charset.Charset.cache(charsetName, cs); return cs; } java.nio.charset.Charset.checkName(charsetName); return null; }
public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException { return os.sendfile(outFd, inFd, inOffset, byteCount); }
native void rsnAllocationData2D(long con, long id, int xoff, int yoff, int mip, int face, int w, int h, java.lang.Object d, int sizeBytes, int dt);
protected void addDeviceAndVariantTabs() { if ((results.getResultsPerDevices().size()) > 1) { addTab("Devices", new org.gradle.internal.ErroringAction<org.gradle.api.internal.html.SimpleHtmlWriter>() { @java.lang.Override public void doExecute(org.gradle.api.internal.html.SimpleHtmlWriter writer) throws java.io.IOException { renderCompositeResults(writer, results.getResultsPerDevices(), "Devices"); } }); } if ((results.getResultsPerVariants().size()) > 1) { addTab("Variants", new org.gradle.internal.ErroringAction<org.gradle.api.internal.html.SimpleHtmlWriter>() { @java.lang.Override public void doExecute(org.gradle.api.internal.html.SimpleHtmlWriter writer) throws java.io.IOException { renderCompositeResults(writer, results.getResultsPerVariants(), "Variants"); } }); } }

public int readv(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws java.io.InterruptedIOException, libcore.io.ErrnoException;
@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.lang.String testPackageName = "com.android.jack.shrob.test" + testNumber; java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(testPackageName); com.android.jack.test.toolchain.JackApiToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class); com.android.jack.shrob.spec.Flags flags = new com.android.jack.shrob.spec.Flags(); toolchain.setShrobFlags(flags); com.android.jack.shrob.proguard.GrammarActions.parse(("proguard.flags" + flagNumber), testFolder.getAbsolutePath(), flags); java.io.File refFolder = new java.io.File(testFolder, "refsObfuscationWithoutMapping"); toolchain.addProperty(NameProviderFactory.NAMEPROVIDER.getName(), "rot13"); toolchain.addProperty(Options.METHOD_FILTER.getName(), "supported-methods"); java.io.File candidateOutputMapping = com.android.jack.test.toolchain.AbstractTestTools.createTempFile("mapping", ".txt"); java.io.File refOutputMapping = new java.io.File(refFolder, (("expected-" + flagNumber) + ".txt")); flags.setOutputMapping(candidateOutputMapping); flags.setPrintMapping(true); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, "jack")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorMapping(candidateOutputMapping, refOutputMapping)); }
public void onClick(android.content.DialogInterface dialog, int whichButton) { dialog.dismiss(); finish(); }
@java.lang.Override public void fchown(java.io.FileDescriptor fd, int uid, int gid) throws libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.fchown(fd, uid, gid); }
public void notifyANQPDone(long bssid, boolean success) { java.util.Map<com.android.server.wifi.hotspot2.anqp.Constants.ANQPElementType, com.android.server.wifi.hotspot2.anqp.ANQPElement> elements = null; if (success) { java.lang.String bssData = mSupplicantHook.scanResult(com.android.server.wifi.hotspot2.Utils.macToString(bssid)); try { elements = com.android.server.wifi.hotspot2.PasspointEventHandler.parseWPSData(bssData); android.util.Log.d(com.android.server.wifi.hotspot2.Utils.hs2LogTag(getClass()), java.lang.String.format("Successful ANQP response for %012x: %s", bssid, elements)); } catch (java.io.IOException | java.nio.BufferUnderflowException e) { android.util.Log.e(com.android.server.wifi.hotspot2.Utils.hs2LogTag(getClass()), ((("Failed to parse ANQP: " + (e.toString())) + ": ") + bssData)); } } mCallbacks.onANQPResponse(bssid, elements); }

@org.junit.Test public void testReconnectOnPartialConnect() { android.bluetooth.BluetoothAdapter inst = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); android.bluetooth.BluetoothDevice device = inst.getRemoteDevice("00:01:02:03:04:05"); com.android.bluetooth.btservice.AdapterService mockAdapterService = mock(com.android.bluetooth.btservice.AdapterService.class); com.android.bluetooth.btservice.ServiceFactory mockServiceFactory = mock(com.android.bluetooth.btservice.ServiceFactory.class); com.android.bluetooth.hfp.HeadsetService mockHeadsetService = mock(com.android.bluetooth.hfp.HeadsetService.class); com.android.bluetooth.a2dp.A2dpService mockA2dpService = mock(com.android.bluetooth.a2dp.A2dpService.class); when(mockServiceFactory.getHeadsetService()).thenReturn(mockHeadsetService); when(mockServiceFactory.getA2dpService()).thenReturn(mockA2dpService); android.bluetooth.BluetoothDevice[] bondedDevices = new android.bluetooth.BluetoothDevice[1]; bondedDevices[0] = device; when(mockAdapterService.getBondedDevices()).thenReturn(bondedDevices); when(mockHeadsetService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mockA2dpService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mockAdapterService.getState()).thenReturn(BluetoothAdapter.STATE_ON); when(mockAdapterService.getMainLooper()).thenReturn(mHandlerThread.getLooper()); when(mockAdapterService.isMock()).thenReturn(true); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mockAdapterService, mockServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, BluetoothProfile.STATE_DISCONNECTED); intent.putExtra(BluetoothProfile.EXTRA_STATE, BluetoothProfile.STATE_CONNECTED); intent.addFlags(Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND); injector.onReceive(null, intent); java.util.ArrayList<android.bluetooth.BluetoothDevice> hsConnectedDevices = new java.util.ArrayList<>(); hsConnectedDevices.add(device); when(mockHeadsetService.getConnectedDevices()).thenReturn(hsConnectedDevices); when(mockA2dpService.getConnectionState(device)).thenReturn(BluetoothProfile.STATE_DISCONNECTED); verify(mockA2dpService, timeout(com.android.bluetooth.btservice.PhonePolicyTest.RETRY_TIMEOUT).times(1)).connect(eq(device)); }

@java.lang.Override @javax.annotation.Nonnull public void libToLib(@javax.annotation.Nonnull java.io.File[] in, @javax.annotation.Nonnull java.io.File out, boolean zipFiles) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add("java"); args.add("-cp"); args.add(jackPrebuilt.getAbsolutePath()); if ((incrementalFolder) != null) { args.add(com.android.jack.experimental.incremental.Main.class.getName()); args.add("--incremental-folder"); args.add(incrementalFolder.getAbsolutePath()); } else { args.add(com.android.jack.Main.class.getName()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if ((jarjarRules) != null) { args.add("--config-jarjar"); args.add(jarjarRules.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add("--config-proguard"); args.add(flags.getAbsolutePath()); } for (java.io.File staticlib : in) { args.add("--import"); args.add(staticlib.getAbsolutePath()); } for (java.io.File staticLib : staticLibs) { args.add("--import"); args.add(staticLib.getAbsolutePath()); } if (zipFiles) { args.add("--output-jack"); } else { args.add("--output-jack-dir"); } args.add(out.getAbsolutePath()); com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(outRedirectStream); exec.setOut(errRedirectStream); exec.setVerbose(true); if (!(exec.run())) { throw new java.lang.RuntimeException("Jack compiler exited with an error"); } }
static void setLong(java.lang.invoke.MethodHandle m, Main.ValueHolder v, long value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
private void test_leaveGroupLjava_net_SocketAddressLjava_net_NetworkInterface(java.net.InetAddress group, java.net.InetAddress group2) throws java.lang.Exception { java.lang.String msg = null; java.net.SocketAddress groupSockAddr = null; java.net.SocketAddress groupSockAddr2 = null; java.net.MulticastSocket mss = new java.net.MulticastSocket(0); groupSockAddr = new java.net.InetSocketAddress(group, mss.getLocalPort()); mss.joinGroup(groupSockAddr, null); mss.leaveGroup(groupSockAddr, null); try { mss.leaveGroup(groupSockAddr, null); fail("Did not get exception when trying to leave group that was already left"); } catch (java.io.IOException expected) { } groupSockAddr2 = new java.net.InetSocketAddress(group2, mss.getLocalPort()); mss.joinGroup(groupSockAddr, networkInterface1); try { mss.leaveGroup(groupSockAddr2, networkInterface1); fail("Did not get exception when trying to leave group that was never joined"); } catch (java.io.IOException expected) { } mss.leaveGroup(groupSockAddr, networkInterface1); if (atLeastTwoInterfaces) { mss.joinGroup(groupSockAddr, networkInterface1); try { mss.leaveGroup(groupSockAddr, networkInterface2); fail(((((("Did not get exception when trying to leave group on wrong interface " + "joined on [") + (networkInterface1)) + "] left on [") + (networkInterface2)) + "]")); } catch (java.io.IOException expected) { } } }

@org.junit.Test @java.lang.Runtime public void test002() throws java.lang.Exception { java.lang.String test = "com.android.jack.optimizations.valuepropagation.test002"; java.lang.String aType = "Lcom/android/jack/optimizations/valuepropagation/test002/jack/A;"; java.lang.String bType = "Lcom/android/jack/optimizations/valuepropagation/test002/jack/B;"; java.lang.String cType = "Lcom/android/jack/optimizations/valuepropagation/test002/jack/C;"; java.lang.String dType = "Lcom/android/jack/optimizations/valuepropagation/test002/jack/D;"; compileAndValidate(test, defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert("<init>(I)V", dalvik(test, "A.init.dalvik")).andAlso(missing("<clinit>()V"))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert("<init>(I)V", dalvik(test, "B.init.dalvik")).insert("<clinit>()V", dalvik(test, "B.clinit.dalvik"))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert("<init>()V", dalvik(test, "C.init.dalvik")).insert("foo()I", dalvik(test, "C.foo.dalvik"))).insert(dType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert("foo()I", dalvik(test, "D.foo.dalvik")))); }
public void test_setSoTimeoutI() throws java.lang.Exception { java.net.DatagramSocket ds = new java.net.DatagramSocket(); ds.setSoTimeout(100); assertTrue("Set incorrect timeout", ((ds.getSoTimeout()) >= 100)); }

public static void startMethodTracing(java.lang.String traceName) { android.os.Debug.startMethodTracing(traceName, 0, 0); }



@org.junit.Test public void testWriteZipVFS() throws com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotSetPermissionException, com.android.sched.util.file.FileAlreadyExistsException, com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotDirectoryException, com.android.sched.util.file.WrongPermissionException, java.io.IOException { java.io.File file = null; com.android.sched.vfs.InputOutputVFS outputZipVFS = null; com.android.sched.vfs.InputZipVFS inputZipVFS = null; try { file = java.io.File.createTempFile("vfs", ".zip"); java.lang.String path = file.getAbsolutePath(); outputZipVFS = new com.android.sched.vfs.GenericInputOutputVFS(new com.android.sched.vfs.WriteZipFS(new com.android.sched.util.file.OutputZipFile(path, null, com.android.sched.util.file.FileOrDirectory.Existence.MAY_EXIST, com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE))); testOutputVFS(outputZipVFS); outputZipVFS.close(); inputZipVFS = new com.android.sched.vfs.InputZipVFS(new com.android.sched.util.file.InputZipFile(path, null, com.android.sched.util.file.FileOrDirectory.Existence.MUST_EXIST, com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE)); testInputVFS(inputZipVFS); } finally { if (outputZipVFS != null) { outputZipVFS.close(); } if (inputZipVFS != null) { inputZipVFS.close(); } if (file != null) { junit.framework.Assert.assertTrue(file.delete()); } } }

private void updateAlertText(android.telephony.CellBroadcastMessage message) { int titleId = com.android.cellbroadcastreceiver.CellBroadcastResources.getDialogTitleResource(getApplicationContext(), message); setTitle(titleId); ((android.widget.TextView) (findViewById(R.id.alertTitle))).setText(titleId); ((android.widget.TextView) (findViewById(R.id.message))).setText(message.getMessageBody()); if ((mMessageList.size()) > 1) { ((android.widget.TextView) (findViewById(R.id.dismissButton))).setText((("OK (1/" + (mMessageList.size())) + ")")); } else if ((mMessageList.size()) == 1) { ((android.widget.TextView) (findViewById(R.id.dismissButton))).setText("OK"); } com.android.cellbroadcastreceiver.CellBroadcastAlertReminder.queueAlertReminder(this, true); }
@org.junit.Test public void testDefaultMethod017() throws java.lang.Exception { run(DEFAULTMETHOD017); }



static float $opt$IntToFloat(int a) { if (Main.doThrow) throw new java.lang.Error(); return ((float) (a)); }
public boolean setRemoteAlias(android.bluetooth.BluetoothDevice device, java.lang.String name) { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, "setRemoteAlias() - Not allowed for non-active user"); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.setRemoteAlias(device, name); }
@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SLOT_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.getSimSlotsStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getIccSlotStatus", e); } } } }


public void test_nullLocale() { assertEquals(java.util.Calendar.getInstance(java.util.Locale.getDefault()), java.util.Calendar.getInstance(((java.util.Locale) (null)))); assertEquals(java.util.Calendar.getInstance(java.util.TimeZone.getDefault(), java.util.Locale.getDefault()), java.util.Calendar.getInstance(java.util.TimeZone.getDefault(), null)); assertEquals(new java.util.GregorianCalendar(java.util.Locale.getDefault()), new java.util.GregorianCalendar(((java.util.Locale) (null)))); }

@javax.annotation.Nonnull private static java.util.Properties loadLibraryProperties(@javax.annotation.Nonnull com.android.sched.vfs.InputVFS vfs) throws com.android.jack.library.NotJackLibraryException { java.util.Properties libraryProperties = new java.util.Properties(); try { com.android.sched.vfs.InputVFile libProp = vfs.getRootInputVDir().getInputVFile(JackLibrary.LIBRARY_PROPERTIES_VPATH); libraryProperties.load(libProp.getInputStream()); } catch (java.io.IOException e) { throw new com.android.jack.library.NotJackLibraryException(vfs.getLocation()); } return libraryProperties; }
@java.lang.Override public javax.net.ssl.SSLSession getSession(byte[] sessionId) { javax.net.ssl.SSLSession session = super.getSession(sessionId); if (session != null) { return session; } if ((persistentCache) != null) { byte[] data = persistentCache.getSessionData(sessionId); if (data != null) { session = toSession(data, null, (-1)); if ((session != null) && (session.isValid())) { super.putSession(session); return session; } } } return null; }
@java.lang.Override public void onCreate(android.os.Bundle arguments) { java.io.File cacheDir = getTargetContext().getCacheDir(); java.lang.System.setProperty("user.language", "en"); java.lang.System.setProperty("user.region", "US"); java.lang.System.setProperty("java.home", cacheDir.getAbsolutePath()); java.lang.System.setProperty("user.home", cacheDir.getAbsolutePath()); java.lang.System.setProperty("java.io.tmpdir", cacheDir.getAbsolutePath()); java.lang.System.setProperty("user.dir", cacheDir.getAbsolutePath()); java.lang.System.setProperty("javax.net.ssl.trustStore", "/etc/security/cacerts.bks"); java.util.TimeZone.setDefault(java.util.TimeZone.getTimeZone("GMT")); if (arguments != null) { java.lang.String classArg = arguments.getString(android.test.ARGUMENT_TEST_CLASS); mSingleTest = (classArg != null) && (classArg.contains("#")); } if ((getContext().checkCallingOrSelfPermission(android.Manifest.permission.DISABLE_KEYGUARD)) == (android.content.pm.PackageManager.PERMISSION_GRANTED)) { android.util.Log.i(android.test.InstrumentationCtsTestRunner.TAG, "Disabling keyguard"); android.app.KeyguardManager keyguardManager = ((android.app.KeyguardManager) (getContext().getSystemService(Context.KEYGUARD_SERVICE))); keyguardManager.newKeyguardLock("cts").disableKeyguard(); } else { android.util.Log.i(android.test.InstrumentationCtsTestRunner.TAG, ("Test lacks permission to disable keyguard. " + "UI based tests may fail if keyguard is up")); } super.onCreate(arguments); }

public void testAesCbcHmacSha384Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
private void logErrorAndDisplayDialog(@org.jetbrains.annotations.NotNull final java.lang.String title, @org.jetbrains.annotations.NotNull final java.lang.Exception exception) { if (com.intellij.openapi.application.ApplicationManager.getApplication().isDispatchThread()) { com.intellij.openapi.ui.Messages.showErrorDialog(exception.getMessage(), title); } else { com.intellij.openapi.application.ApplicationManager.getApplication().invokeLater(new java.lang.Runnable() { @java.lang.Override public void run() { com.intellij.openapi.ui.Messages.showErrorDialog(exception.getMessage(), title); } }, com.intellij.openapi.application.ModalityState.defaultModalityState()); } com.google.gct.login.GoogleLogin.GOOGLE_LOGIN_LOG.error(exception.getMessage(), exception); }





private void getAllDexFilesFromDir(@javax.annotation.Nonnull com.android.sched.vfs.InputVDir dexFileVDir, @javax.annotation.Nonnull java.util.List<com.android.sched.vfs.InputVFile> dexFiles) { for (com.android.sched.vfs.InputVElement subFile : dexFileVDir.list()) { if (subFile.isVDir()) { getAllDexFilesFromDir(((com.android.sched.vfs.InputVDir) (subFile)), dexFiles); } else if (subFile.getName().endsWith(DexFileWriter.DEX_FILE_EXTENSION)) { dexFiles.add(((com.android.sched.vfs.InputOutputVFile) (subFile))); } } }
private void doSelectionChanged(com.android.ddmlib.IDevice selectedDevice) { mCaptureAction.setEnabled((selectedDevice != null)); mViewUiAutomatorHierarchyAction.setEnabled((selectedDevice != null)); }


@java.lang.Override @java.lang.SuppressWarnings({ "rawtypes", "unchecked" }) public <X extends com.android.sched.schedulable.VisitorSchedulable<T>, U extends com.android.sched.item.Component> void process(@javax.annotation.Nonnull T t) throws com.android.sched.scheduler.ProcessException { for (com.android.sched.scheduler.SchedStep step : steps) { com.android.sched.schedulable.Schedulable instance = step.getInstance(); com.android.sched.scheduler.ManagedSchedulable managedSchedulable = schedulableManager.getManagedSchedulable(instance.getClass()); if (instance instanceof com.android.sched.schedulable.AdapterSchedulable) { com.android.sched.scheduler.ScheduleInstance<U> subSchedInstance = ((com.android.sched.scheduler.ScheduleInstance<U>) (step.getSubSchedInstance())); assert subSchedInstance != null; java.util.Iterator<U> iterData = com.android.sched.scheduler.SingleScheduleInstance.adaptWithLog(((com.android.sched.schedulable.AdapterSchedulable<T, U>) (instance)), t); while (iterData.hasNext()) { subSchedInstance.process(iterData.next()); } } else if (instance instanceof com.android.sched.schedulable.RunnableSchedulable) { com.android.sched.scheduler.SingleScheduleInstance.runWithLog(((com.android.sched.schedulable.RunnableSchedulable) (instance)), t); } else if (instance instanceof com.android.sched.schedulable.VisitorSchedulable) { com.android.sched.scheduler.SingleScheduleInstance.visitWithLog(((com.android.sched.schedulable.VisitorSchedulable) (instance)), t); } } }

private void logi(java.lang.String s) { android.telephony.Rlog.i(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, ("[GsmCdmaPhone] " + s)); }
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws java.lang.Exception { com.android.jack.backend.dex.DexWritingTool writingTool = com.android.sched.util.config.ThreadConfig.get(com.android.jack.backend.dex.DexFileWriter.DEX_WRITING_POLICY); writingTool.write(outputVDir); }
public void setLintOnExport(boolean on) { mLintOnExport = on; org.eclipse.jface.preference.IPreferenceStore store = com.android.ide.eclipse.adt.AdtPlugin.getDefault().getPreferenceStore(); store.setValue(com.android.ide.eclipse.adt.internal.preferences.AdtPrefs.PREFS_LINT_ON_EXPORT, on); }


private native int recvfromBytes(java.io.FileDescriptor fd, java.lang.Object buffer, int byteOffset, int byteCount, int flags, java.net.InetSocketAddress srcAddress) throws java.net.SocketException, libcore.io.ErrnoException;

android.graphics.Bitmap createNotificationBadgeBitmap(@android.annotation.NonNull android.net.wifi.WifiConfiguration config, @android.annotation.NonNull java.util.List<android.net.wifi.ScanResult> scanResults) { android.net.wifi.ScanResult matchingScanResult = findMatchingScanResult(scanResults, config); if (matchingScanResult == null) { return null; } int rssi = matchingScanResult.level; android.net.WifiKey wifiKey = new android.net.WifiKey(config.SSID, config.BSSID); android.net.ScoredNetwork scoredNetwork = mCachedScoredNetworkProvider.getCachedScoredNetwork(new android.net.NetworkKey(wifiKey)); if (scoredNetwork != null) { return getBadgedWifiBitmap(scoredNetwork.calculateBadge(rssi), rssi); } return null; }

public native void setLong(java.lang.Object object, long value) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
public void dispose() { com.android.internal.telephony.cat.CatService.mIccRecords.unregisterForRecordsLoaded(this); mCmdIf.unSetOnCatSessionEnd(this); mCmdIf.unSetOnCatProactiveCmd(this); mCmdIf.unSetOnCatEvent(this); mCmdIf.unSetOnCatCallSetUp(this); removeCallbacksAndMessages(null); }
public native java.lang.String getHostByAddr(byte[] addr) throws java.net.UnknownHostException;

@org.junit.Test public void testDefaultTruncLen() throws java.lang.Exception { android.net.IpSecAlgorithm explicit = new android.net.IpSecAlgorithm(IpSecAlgorithm.AUTH_HMAC_SHA256, java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, (256 / 8)), 256); android.net.IpSecAlgorithm implicit = new android.net.IpSecAlgorithm(IpSecAlgorithm.AUTH_HMAC_SHA256, java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, (256 / 8))); assertTrue(((("Default Truncation Length Incorrect, Explicit: " + explicit) + "implicit: ") + implicit), android.net.IpSecAlgorithm.equals(explicit, implicit)); }
public boolean parse(java.lang.String s) { if (s == null) { throw new java.lang.NullPointerException("time string is null"); } if (nativeParse(s)) { timezone = android.text.format.Time.TIMEZONE_UTC; return true; } return false; }
@java.lang.Override public void stopDtmfTone(java.lang.String callId) { mHandler.obtainMessage(android.telecom.ConnectionService.MSG_STOP_DTMF_TONE, callId).sendToTarget(); }


private int parseHostname(int start, int n) throws java.net.URISyntaxException { int p = start; int q; int l = -1; do { q = scan(p, n, java.net.URI.L_ALPHANUM, java.net.URI.H_ALPHANUM); if (q <= p) break; l = p; if (q > p) { p = q; q = scan(p, n, ((java.net.URI.L_ALPHANUM) | (java.net.URI.L_DASH)), ((java.net.URI.H_ALPHANUM) | (java.net.URI.H_DASH))); if (q > p) { if ((charAt((q - 1))) == '-') fail("Illegal character in hostname", (q - 1)); p = q; } } q = scan(p, n, '.'); if (q <= p) break; p = q; } while (p < n ); if ((p < n) && (!(at(p, n, ':')))) fail("Illegal character in hostname", p); if (l < 0) failExpecting("hostname", start); if ((l > start) && (!(java.net.URI.match(charAt(l), java.net.URI.L_ALPHA, java.net.URI.H_ALPHA)))) { fail("Illegal character in hostname", l); } host = substring(start, p); return p; }


private void combineSpecifiers(android.net.NetworkCapabilities nc) { java.lang.String otherSpecifier = nc.getNetworkSpecifier(); if (android.text.TextUtils.isEmpty(otherSpecifier)) return; if ((android.text.TextUtils.isEmpty(mNetworkSpecifier)) == false) { throw new java.lang.IllegalStateException("Can't combine two networkSpecifiers"); } setNetworkSpecifier(otherSpecifier); }






public void dispose() { try { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { android.util.Log.i(android.telephony.MbmsDownloadManager.LOG_TAG, "Service already dead"); return; } downloadService.dispose(mSubscriptionId); mService.set(null); } catch (android.os.RemoteException e) { android.util.Log.i(android.telephony.MbmsDownloadManager.LOG_TAG, "Remote exception while disposing of service"); } }
@java.lang.Override public int compare(java.util.Map.Entry<java.lang.Long, com.android.tools.perflib.vmtrace.MethodInfo> o1, java.util.Map.Entry<java.lang.Long, com.android.tools.perflib.vmtrace.MethodInfo> o2) { long diff = (o2.getValue().getInclusiveThreadTimes()) - (o1.getValue().getInclusiveThreadTimes()); return com.google.common.primitives.Ints.saturatedCast(diff); }
@org.junit.Test public void testLamba001() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA001).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }
@java.lang.Override public void stopNetworkScan(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_1.IRadio radioProxy11 = android.hardware.radio.V1_1.IRadio.castFrom(radioProxy); if (radioProxy11 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_STOP_NETWORK_SCAN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy11.stopNetworkScan(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "stopNetworkScan", e); } } } }
private static void writeToParcelForLte(android.os.Parcel p, int ci, int pci, int tac, int earfcn, java.lang.String mcc, java.lang.String mnc, java.lang.String al, java.lang.String as, int ss, int rsrp, int rsrq, int rssnr, int cqi, int ta) { p.writeInt(ci); p.writeInt(pci); p.writeInt(tac); p.writeInt(earfcn); p.writeString(mcc); p.writeString(mnc); p.writeString(al); p.writeString(as); p.writeInt(ss); p.writeInt(rsrp); p.writeInt(rsrq); p.writeInt(rssnr); p.writeInt(cqi); p.writeInt(ta); }

@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add("name", mName).add("debuggable", mDebuggable).add("jniDebugBuild", mJniDebugBuild).add("renderscriptDebugBuild", mRenderscriptDebugBuild).add("renderscriptOptimLevel", mRenderscriptOptimLevel).add("packageNameSuffix", mPackageNameSuffix).add("versionNameSuffix", mVersionNameSuffix).add("runProguard", mRunProguard).add("zipAlign", mZipAlign).add("signingConfig", mSigningConfig).toString(); }

public void test1_2SetStrengthAfterRelease() throws java.lang.Exception { if (!(isBassBoostAvailable())) { return; } getBassBoost(0); mBassBoost.release(); try { mBassBoost.setStrength(android.media.cts.BassBoostTest.TEST_STRENGTH); fail("setStrength() processed after release()"); } catch (java.lang.IllegalStateException e) { } finally { releaseBassBoost(); } }
void show(int layer, float alpha, long duration) { if (com.android.server.wm.DimLayer.DEBUG) android.util.Slog.v(com.android.server.wm.DimLayer.TAG, ((((("show: layer=" + layer) + " alpha=") + alpha) + " duration=") + duration)); if ((mDimSurface) == null) { android.util.Slog.e(com.android.server.wm.DimLayer.TAG, "show: no Surface"); mTargetAlpha = mAlpha = 0; return; } if ((!(mLastBounds.equals(mBounds))) || ((mLayer) != layer)) { adjustSurface(layer, true); } long curTime = android.os.SystemClock.uptimeMillis(); final boolean animating = isAnimating(); if ((animating && (((mTargetAlpha) != alpha) || (durationEndsEarlier(duration)))) || ((!animating) && ((mAlpha) != alpha))) { if (duration <= 0) { setAlpha(alpha); } else { mStartAlpha = mAlpha; mStartTime = curTime; mDuration = duration; } } if (com.android.server.wm.DimLayer.DEBUG) android.util.Slog.v(com.android.server.wm.DimLayer.TAG, ((("show: mStartAlpha=" + (mStartAlpha)) + " mStartTime=") + (mStartTime))); mTargetAlpha = alpha; }





@java.lang.Override public void enter() { if (com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, ("Enter Connected: " + (getCurrentMessage().what))); } mAudioWbs = false; mCommandedSpeakerVolume = -1; }
@java.lang.Override public void imsFeatureRemoved(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((mIsAvailable) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(LOG_TAG, ((("Feature disabled on slotId: " + slotId) + " for feature: ") + feature)); mIsAvailable = false; } } }


@javax.annotation.CheckForNull private java.lang.String getMethodSignature(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call) { com.android.jack.ir.ast.JExpression instance = call.getInstance(); assert instance != null; java.util.List<com.android.jack.ir.ast.JExpression> args = call.getArgs(); assert (args.size()) == 2; com.android.jack.ir.ast.JExpression methodName = args.get(0); com.android.jack.ir.ast.JExpression parameters = args.get(1); if ((methodName instanceof com.android.jack.ir.ast.JStringLiteral) && (parameters instanceof com.android.jack.ir.ast.JNewArray)) { java.lang.StringBuilder sb = new java.lang.StringBuilder(((com.android.jack.ir.ast.JStringLiteral) (methodName)).getValue()); sb.append("("); for (com.android.jack.ir.ast.JExpression param : ((com.android.jack.ir.ast.JNewArray) (parameters)).getInitializers()) { if (param instanceof com.android.jack.ir.ast.JClassLiteral) { sb.append(com.android.jack.Jack.getLookupFormatter().getName(((com.android.jack.ir.ast.JClassLiteral) (param)).getRefType())); } else { return null; } } sb.append(")"); return sb.toString(); } return null; }


public void onCharacteristicReadRequest(java.lang.String address, int transId, int offset, boolean isLong, int srvcType, int srvcInstId, android.os.ParcelUuid srvcId, int charInstId, android.os.ParcelUuid charId) { java.util.UUID srvcUuid = srvcId.getUuid(); java.util.UUID charUuid = charId.getUuid(); if (android.bluetooth.BluetoothGattServer.VDBG) android.util.Log.d(android.bluetooth.BluetoothGattServer.TAG, (((("onCharacteristicReadRequest() - " + "service=") + srvcUuid) + ", characteristic=") + charUuid)); android.bluetooth.BluetoothDevice device = mAdapter.getRemoteDevice(address); android.bluetooth.BluetoothGattService service = getService(srvcUuid, srvcInstId, srvcType); if (service == null) return; android.bluetooth.BluetoothGattCharacteristic characteristic = service.getCharacteristic(charUuid); if (characteristic == null) return; try { mCallback.onCharacteristicReadRequest(device, transId, offset, characteristic); } catch (java.lang.Exception ex) { android.util.Log.w(android.bluetooth.BluetoothGattServer.TAG, "Unhandled exception in callback", ex); } }
@java.lang.Override public final boolean isValid() { return !(freed); }

@org.junit.Test public void retroLambdaDefaultMethodsTest003() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_003); }
public void transform(@javax.annotation.Nonnull java.util.jar.JarFile jarFile) { java.util.zip.ZipOutputStream zos = null; try { if ((options.getOutputContainer()) == (com.android.jill.ContainerType.ZIP)) { zos = new java.util.zip.ZipOutputStream(new java.io.FileOutputStream(options.getOutput())); } transformJavaFiles(jarFile, zos); dumpJackLibraryProperties(zos); } catch (java.lang.Exception e) { throw new com.android.jill.JillException(("Failed to transform " + (jarFile.getName())), e); } finally { if (zos != null) { try { zos.close(); } catch (java.io.IOException e) { throw new com.android.jill.JillException("Error closing zip.", e); } } } }



public void test_GetRoundingMode() { java.text.DecimalFormat decimalFormat = ((java.text.DecimalFormat) (java.text.DecimalFormat.getInstance(java.util.Locale.US))); assertEquals("Incorrect default RoundingMode", decimalFormat.getRoundingMode(), java.math.RoundingMode.HALF_EVEN); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_DOWN); assertEquals("Returned incorrect RoundingMode", decimalFormat.getRoundingMode(), java.math.RoundingMode.HALF_DOWN); }

private static native boolean native_preConcat(int native_object, int other_matrix);
private void loadRemoteAddonsListInTask(com.android.sdklib.internal.repository.ITaskMonitor monitor) { mStateFetchRemoteAddonsList = -1; java.lang.String url = java.lang.System.getenv("SDK_UPDATER_ADDONS_LIST"); if (url == null) { url = com.android.sdklib.repository.SdkAddonsListConstants.URL_ADDON_LIST; } if (getSettingsController().getForceHttp()) { url = url.replaceAll("https://", "http://"); } com.android.sdklib.internal.repository.AddonsListFetcher fetcher = new com.android.sdklib.internal.repository.AddonsListFetcher(); com.android.sdklib.internal.repository.AddonsListFetcher.Site[] sites = fetcher.fetch(monitor, url); if (sites != null) { mSources.removeAll(SdkSourceCategory.ADDONS_3RD_PARTY); for (com.android.sdklib.internal.repository.AddonsListFetcher.Site s : sites) { mSources.add(SdkSourceCategory.ADDONS_3RD_PARTY, new com.android.sdklib.internal.repository.SdkAddonSource(s.getUrl(), s.getUiName())); } mStateFetchRemoteAddonsList = 1; } }


private void onQueryCfComplete(android.os.AsyncResult ar) { java.lang.StringBuilder sb = new java.lang.StringBuilder(getScString()); sb.append("\n"); if ((ar.exception) != null) { mState = State.FAILED; if ((ar.exception) instanceof com.android.ims.ImsException) { com.android.ims.ImsException error = ((com.android.ims.ImsException) (ar.exception)); if ((error.getMessage()) != null) { sb.append(error.getMessage()); } else { sb.append(getErrorMessage(ar)); } } else { sb.append(getErrorMessage(ar)); } } else { com.android.internal.telephony.CallForwardInfo[] infos; infos = ((com.android.internal.telephony.CallForwardInfo[]) (ar.result)); if ((infos.length) == 0) { sb.append(mContext.getText(com.android.internal.R.string.serviceDisabled)); if ((mIccRecords) != null) { mPhone.setVoiceCallForwardingFlag(1, false, null); } } else { android.text.SpannableStringBuilder tb = new android.text.SpannableStringBuilder(); for (int serviceClassMask = 1; serviceClassMask <= (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_MAX); serviceClassMask <<= 1) { for (int i = 0, s = infos.length; i < s; i++) { if ((serviceClassMask & (infos[i].serviceClass)) != 0) { tb.append(makeCFQueryResultMessage(infos[i], serviceClassMask)); tb.append("\n"); } } } sb.append(tb); } mState = State.COMPLETE; } mMessage = sb; mPhone.onMMIDone(this); }
public static void doTest() throws java.lang.Exception { java.lang.reflect.Method say_hi_method = art.Test986.Transform.class.getDeclaredMethod("sayHi"); art.Main.bindAgentJNIForClass(art.Test986.Transform.class); art.Test986.Transform.sayHi(); art.Test986.setNativeTransform(say_hi_method, "NoReallySayGoodbye"); art.Main.bindAgentJNIForClass(art.Test986.Transform.class); art.Test986.Transform.sayHi(); art.Main.bindAgentJNIForClass(art.Main.class); art.Main.bindAgentJNIForClass(art.Test986.class); }

@org.junit.Test public void testEvaluateNetworks_recommendation_untrustedNetworksAllowed() { when(mWifiConfigManager.wasEphemeralNetworkDeleted(anyString())).thenReturn(false); when(mNetworkScoreManager.requestRecommendation(any(android.net.RecommendationRequest.class))).thenReturn(new android.net.RecommendationResult(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_WIFI_CONFIGURATION)); android.net.wifi.WifiConfiguration result = mRecommendedNetworkEvaluator.evaluateNetworks(com.google.android.collect.Lists.newArrayList(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL, com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL), null, null, false, true, null); assertEquals(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_WIFI_CONFIGURATION, result); verify(mNetworkScoreManager).requestRecommendation(mRecommendationRequestCaptor.capture()); assertEquals(2, mRecommendationRequestCaptor.getValue().getScanResults().length); assertEquals(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL.getScanResult(), mRecommendationRequestCaptor.getValue().getScanResults()[0]); assertEquals(com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL.getScanResult(), mRecommendationRequestCaptor.getValue().getScanResults()[1]); }

@sun.reflect.CallerSensitive public static java.lang.Object newProxyInstance(java.lang.ClassLoader loader, java.lang.Class<?>[] interfaces, java.lang.reflect.InvocationHandler h) throws java.lang.IllegalArgumentException { if (h == null) { throw new java.lang.NullPointerException(); } java.lang.Class<?> cl = java.lang.reflect.Proxy.getProxyClass0(loader, interfaces); try { final java.lang.reflect.Constructor<?> cons = cl.getConstructor(java.lang.reflect.Proxy.constructorParams); return java.lang.reflect.Proxy.newInstance(cons, h); } catch (java.lang.NoSuchMethodException e) { throw new java.lang.InternalError(e.toString()); } }

@org.junit.Test public void singleScanFailOnTimeout() { com.android.server.wifi.WifiNative.ScanSettings settings = new com.android.server.wifi.ScanTestUtil.NativeScanSettingsBuilder().withBasePeriod(10000).withMaxApPerScan(10).addBucketWithBand(10000, WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN, WifiScanner.WIFI_BAND_24_GHZ).build(); com.android.server.wifi.WifiNative.ScanEventHandler eventHandler = mock(WifiNative.ScanEventHandler.class); com.android.server.wifi.ScanResults results = com.android.server.wifi.ScanResults.create(0, 2400, 2450, 2450); org.mockito.InOrder order = inOrder(eventHandler, mWifiNative); when(mWifiNative.scan(any(java.util.Set.class), any(java.util.Set.class))).thenReturn(true); assertTrue(mScanner.startSingleScan(settings, eventHandler)); mLooper.dispatchAll(); mAlarmManager.dispatch(SupplicantWifiScannerImpl.TIMEOUT_ALARM_TAG); mLooper.dispatchAll(); order.verify(eventHandler).onScanStatus(WifiNative.WIFI_SCAN_FAILED); verifyNoMoreInteractions(eventHandler); }




public void testDefaultConfiguration() { javax.net.ssl.SSLServerSocketFactory socketFactory = ((javax.net.ssl.SSLServerSocketFactory) (javax.net.ssl.SSLServerSocketFactory.getDefault())); libcore.java.security.StandardNames.assertDefaultCipherSuites(socketFactory.getDefaultCipherSuites()); libcore.java.security.StandardNames.assertSupportedCipherSuites(socketFactory.getSupportedCipherSuites()); }

@java.lang.Override protected void onRestoreInstanceState(android.os.Bundle savedInstanceState) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ("onRestoreInstanceState: " + (mSlotId))); mState = savedInstanceState.getInt("STATE"); mStkMenu = savedInstanceState.getParcelable("MENU"); mAcceptUsersInput = savedInstanceState.getBoolean("ACCEPT_USERS_INPUT"); }
@java.lang.Override public void getIMSIForApp(java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_IMSI, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " aid = ") + aid)); } try { radioProxy.getImsiForApp(rr.mSerial, convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getIMSIForApp", e); } } }
@java.lang.Override public boolean isCallToPolymorphicMethod() { return isCallToPolymorphicMethod(getReceiverType(), getMethodId(), getType()); }
private boolean bindResponse(int indId, boolean indStatus) { for (android.bluetooth.BluetoothDevice device : getConnectedDevices()) { int connectionState = mStateMachine.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { continue; } if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d("Bind Response sent for", device.getAddress()); } android.os.Message msg = mStateMachine.obtainMessage(HeadsetStateMachine.BIND_RESPONSE); msg.obj = device; msg.arg1 = indId; msg.arg2 = (indStatus) ? 1 : 0; mStateMachine.sendMessage(msg); return true; } return false; }
private void initializeGlobals(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_alloc s) { com.android.rs.test.Type.Builder typeBuilder = new com.android.rs.test.Type.Builder(RS, com.android.rs.test.Element.I32(RS)); int X = 5; int Y = 7; int Z = 0; s.set_dimX(X); s.set_dimY(Y); s.set_dimZ(Z); typeBuilder.setX(X); com.android.rs.test.Allocation A = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); s.bind_a(A); s.set_aRaw(A); typeBuilder = new com.android.rs.test.Type.Builder(RS, com.android.rs.test.Element.I32(RS)); typeBuilder.setX(X).setY(Y).setFaces(true); com.android.rs.test.Allocation AFaces = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); s.set_aFaces(AFaces); typeBuilder.setFaces(false).setMipmaps(true); com.android.rs.test.Allocation ALOD = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); s.set_aLOD(ALOD); typeBuilder.setFaces(true).setMipmaps(true); com.android.rs.test.Allocation AFacesLOD = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); s.set_aFacesLOD(AFacesLOD); return; }
@org.junit.Test public void versionedTest001a_withoutAnnotations() throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestsWithJackFolder("multidex/test001"); java.io.File out = com.android.jack.TestTools.createTempDir("out", ""); com.android.jack.Options app1Options = addCommonOptionsForMultiDex(new java.io.File(testFolder, "config-001.jpp")); app1Options.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), "multidex"); com.android.jack.TestTools.compileSourceToDex(app1Options, testFolder, (((com.android.jack.TestTools.getDefaultBootclasspathString()) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.frameworks.getPath())), out, false); java.io.File outList = getListingOfDex(new java.io.File(out, "classes.dex")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, "ref-list-001.txt"), outList); junit.framework.Assert.assertFalse(new java.io.File(out, "classes2.dex").exists()); return; }


public void testServiceContexts() throws java.lang.Exception { java.lang.ProcessBuilder pb = new java.lang.ProcessBuilder(checkFc.getAbsolutePath(), "-p", devicePolicyFile.getAbsolutePath(), devicePcFile.getAbsolutePath()); pb.redirectOutput(java.lang.ProcessBuilder.Redirect.PIPE); pb.redirectErrorStream(true); java.lang.Process p = pb.start(); p.waitFor(); java.io.BufferedReader result = new java.io.BufferedReader(new java.io.InputStreamReader(p.getInputStream())); java.lang.String line; java.lang.StringBuilder errorString = new java.lang.StringBuilder(); while ((line = result.readLine()) != null) { errorString.append(line); errorString.append("\n"); } assertTrue(("The service_contexts file was invalid:\n" + errorString), ((errorString.length()) == 0)); }

@java.lang.SuppressWarnings("unchecked") @java.lang.Override @javax.annotation.CheckForNull public <T extends com.android.sched.marker.Marker> T addMarker(@javax.annotation.Nonnull T marker) { assert isValidMarker(marker) : ((("Marker '" + (com.android.sched.item.Items.getName(marker.getClass()))) + "' is not supported for class '") + (this.getClass().getName())) + "'"; ensureMap(); assert (markers) != null; return ((T) (markers.put(marker.getClass(), marker))); }



private static void assertGsmDeviceId(java.lang.String deviceId) { java.lang.String imeiPattern = "[0-9]{14,15}"; assertTrue(((("IMEI device id " + deviceId) + " does not match pattern ") + imeiPattern), java.util.regex.Pattern.matches(imeiPattern, deviceId)); if ((deviceId.length()) == 15) { android.telephony.cts.TelephonyManagerTest.assertImeiCheckDigit(deviceId); } }
@java.lang.Override public void earlyStartup() { org.eclipse.core.runtime.jobs.Job pingJob = new org.eclipse.core.runtime.jobs.Job("Android SDK Ping") { @java.lang.Override protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor monitor) { com.android.sdkstats.SdkStatsService stats = new com.android.sdkstats.SdkStatsService(); java.lang.String toolsPath = new org.eclipse.core.runtime.Path(com.android.ide.eclipse.monitor.MonitorPlugin.getDefault().getSdkPath()).append("tools").toString(); com.android.ide.eclipse.monitor.MonitorStartup.ping(stats, toolsPath); return org.eclipse.core.runtime.Status.OK_STATUS; } }; pingJob.setPriority(Job.DECORATE); pingJob.schedule(); }

public android.net.NetworkStats readNetworkStatsDetail() throws java.io.IOException { return readNetworkStatsDetail(com.android.internal.net.UID_ALL, null, com.android.internal.net.TAG_ALL, null); }
@org.junit.Test public void testCreateTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = buildIpSecConfig(); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceTest.DROID_SPI), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceTest.CRYPT_KEY), anyInt(), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceTest.DROID_SPI2), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceTest.CRYPT_KEY), anyInt(), anyInt(), anyInt(), anyInt()); }
@java.lang.Override protected final java.nio.charset.CoderResult implFlush(java.nio.CharBuffer out) { try { input = libcore.util.EmptyArray.BYTE; inEnd = 0; data[java.nio.charset.CharsetDecoderICU.INPUT_OFFSET] = 0; data[java.nio.charset.CharsetDecoderICU.OUTPUT_OFFSET] = getArray(out); data[java.nio.charset.CharsetDecoderICU.INVALID_BYTES] = 0; int error = libcore.icu.NativeConverter.decode(converterHandle, input, inEnd, output, outEnd, data, true); if (libcore.icu.ICU.U_FAILURE(error)) { if (error == (libcore.icu.ICU.U_BUFFER_OVERFLOW_ERROR)) { return java.nio.charset.CoderResult.OVERFLOW; } else if (error == (libcore.icu.ICU.U_TRUNCATED_CHAR_FOUND)) { if ((data[java.nio.charset.CharsetDecoderICU.INPUT_OFFSET]) > 0) { return java.nio.charset.CoderResult.malformedForLength(data[java.nio.charset.CharsetDecoderICU.INPUT_OFFSET]); } } } return java.nio.charset.CoderResult.UNDERFLOW; } finally { setPosition(out); implReset(); } }
public com.android.ddmlib.SyncService.SyncResult pull(com.android.ddmlib.FileListingService.FileEntry[] entries, java.lang.String localPath, com.android.ddmlib.SyncService.ISyncProgressMonitor monitor) { java.io.File f = new java.io.File(localPath); if ((f.exists()) == false) { return new com.android.ddmlib.SyncService.SyncResult(com.android.ddmlib.SyncService.RESULT_NO_DIR_TARGET); } if ((f.isDirectory()) == false) { return new com.android.ddmlib.SyncService.SyncResult(com.android.ddmlib.SyncService.RESULT_TARGET_IS_FILE); } com.android.ddmlib.FileListingService fls = new com.android.ddmlib.FileListingService(mDevice); int total = getTotalRemoteFileSize(entries, fls); monitor.start(total); com.android.ddmlib.SyncService.SyncResult result = doPull(entries, localPath, fls, monitor); monitor.stop(); return result; }
public native void setsockoptInt(java.io.FileDescriptor fd, int level, int option, int value) throws libcore.io.ErrnoException;

@org.junit.Test public void retroLambdaDefaultMethodsTest027() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_027).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
private java.lang.String getLibraryVariableName(java.lang.String name) { return "_android_" + (name.replaceAll("-", "_")); }
public void testRemove() throws java.lang.Exception { stats = new android.net.NetworkStatsHistory(HOUR_IN_MILLIS); stats.recordData(android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + (DAY_IN_MILLIS)), 24L, 24L); assertEquals(24, stats.size()); stats.removeBucketsBefore((0 - (DAY_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) - (YEAR_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (SECOND_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (HOUR_IN_MILLIS))); assertEquals(23, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (4 * (HOUR_IN_MILLIS)))); assertEquals(20, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (YEAR_IN_MILLIS))); assertEquals(0, stats.size()); }


public boolean inLearnMoreUrl(java.awt.Point point) { double urlYStart = ((((com.google.gct.login.ui.UsersListCellRenderer.GOOGLE_IMAGE_NORTH) + (com.google.gct.login.ui.UsersListCellRenderer.GOOGLE_IMAGE_HEIGHT)) + (com.google.gct.login.ui.UsersListCellRenderer.WELCOME_LABEL_NORTH)) + ((myGeneralFontHeight) * 3)) + 3; double urlYEnd = urlYStart + (myLearnMoreLabelDimension.getHeight()); double urlXStart = com.google.gct.login.ui.UsersListCellRenderer.GOOGLE_IMAGE_WEST; double urlXEnd = urlXStart + (myLearnMoreLabelDimension.getWidth()); return ((((point.getX()) > urlXStart) && ((point.getX()) < urlXEnd)) && ((point.getY()) > urlYStart)) && ((point.getY()) < urlYEnd); }


@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws java.lang.Exception { java.util.Collection<com.android.jack.preprocessor.Rule> rules = new java.util.ArrayList<com.android.jack.preprocessor.Rule>(); if (com.android.sched.util.config.ThreadConfig.get(PreProcessor.ENABLE).booleanValue()) { com.android.sched.util.file.InputStreamFile input = com.android.sched.util.config.ThreadConfig.get(PreProcessor.FILE); java.io.InputStream inputStream = input.getInputStream(); try { rules.addAll(parseRules(session, inputStream)); } finally { try { inputStream.close(); } catch (java.io.IOException e) { } } } for (java.util.Iterator<com.android.sched.vfs.InputRootVDir> iter = session.getPathSources(); iter.hasNext();) { com.android.sched.vfs.InputRootVDir dir = iter.next(); for (com.android.sched.vfs.InputVElement sub : dir.list()) { if ((sub.getName().equals("JACK-INF")) && (sub.isVDir())) { for (com.android.sched.vfs.InputVElement inf : ((com.android.sched.vfs.InputVDir) (sub)).list()) { if ((inf.getName().endsWith(".jpp")) && (!(inf.isVDir()))) { java.io.InputStream inputStream = ((com.android.sched.vfs.InputVFile) (inf)).openRead(); try { rules.addAll(parseRules(session, inputStream)); } finally { try { inputStream.close(); } catch (java.io.IOException e) { } } } } break; } } } applyRules(rules, session); }
@java.lang.Override public java.lang.String toString() { return (((((((("ScanResult{" + "mDevice=") + (mDevice)) + ", mScanRecord=") + (java.util.Objects.toString(mScanRecord))) + ", mRssi=") + (mRssi)) + ", mTimestampNanos=") + (mTimestampNanos)) + '}'; }
public java.lang.String[] getTetherableBluetoothRegexs() { return mTetherableBluetoothRegexs; }
boolean createBond(android.bluetooth.BluetoothDevice device, int transport) { enforceCallingOrSelfPermission(com.android.bluetooth.btservice.AdapterService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); com.android.bluetooth.btservice.RemoteDevices.DeviceProperties deviceProp = mRemoteDevices.getDeviceProperties(device); if ((deviceProp != null) && ((deviceProp.getBondState()) != (android.bluetooth.BluetoothDevice.BOND_NONE))) { return false; } cancelDiscoveryNative(); android.os.Message msg = mBondStateMachine.obtainMessage(BondStateMachine.CREATE_BOND); msg.obj = device; msg.arg1 = transport; mBondStateMachine.sendMessage(msg); return true; }


public void testVFE5() { try { java.lang.Class.forName("dot.junit.opcodes.iget_short.d.T_iget_short_7"); fail("expected a verification exception"); } catch (java.lang.Throwable t) { dot.junit.DxUtil.checkVerifyException(t); } }
public void testBrowserLoadsSite() throws java.lang.Exception { android.app.Instrumentation instrumentation = getInstrumentation(); android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); com.android.devtools.systemimage.uitest.utils.TestUtils.disableHomeOverlayItems(device); if (com.android.devtools.systemimage.uitest.utils.TestUtils.verifyNetworkStatus(device)) { com.android.devtools.systemimage.uitest.utils.TestUtils.disableAppsOverlayItems(device); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "Browser"); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.NetworkIOTest.BROWSER_URL_TEXT_FIELD)).click(); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.NetworkIOTest.BROWSER_URL_TEXT_FIELD)).clearTextField(); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.NetworkIOTest.BROWSER_URL_TEXT_FIELD)).setText("google.com"); device.pressEnter(); device.registerWatcher(com.android.devtools.systemimage.uitest.watchers.BrowserPageLoadedWatcher.class.getName(), new com.android.devtools.systemimage.uitest.watchers.BrowserPageLoadedWatcher(device)); } }

public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha256Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }



@org.junit.Test public void basicRecommendation() throws java.lang.Exception { android.net.wifi.ScanResult[] scanResults = new android.net.wifi.ScanResult[6]; for (int i = 0; i < 3; i++) { scanResults[i] = com.android.networkrecommendation.Util.createMockScanResult(i); } mStorage.addScore(com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK); { android.net.wifi.ScanResult scanResult = new android.net.wifi.ScanResult(); scanResult.level = 115; scanResult.SSID = com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK_STRING_UNQUOTED; scanResult.wifiSsid = android.net.wifi.WifiSsid.createFromAsciiEncoded(com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK_STRING_UNQUOTED); scanResult.BSSID = com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK.networkKey.wifiKey.bssid; scanResult.capabilities = "[ESS]"; scanResult.timestamp = (android.os.SystemClock.elapsedRealtime()) * 1000; scanResults[3] = scanResult; } for (int i = 4; i < 6; i++) { scanResults[i] = com.android.networkrecommendation.Util.createMockScanResult(i); } android.net.RecommendationRequest request = new android.net.RecommendationRequest.Builder().setScanResults(scanResults).setNetworkCapabilities(new android.net.NetworkCapabilities().removeCapability(NetworkCapabilities.NET_CAPABILITY_TRUSTED)).build(); android.net.RecommendationResult result = verifyAndCaptureResult(mProvider, request); assertEquals(com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK.networkKey.wifiKey.ssid, result.getWifiConfiguration().SSID); }

private static java.lang.String getVersion(@javax.annotation.Nonnull java.lang.String name) { java.io.File prebuilt = com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt(name); java.util.jar.JarFile jarFile = null; try { jarFile = new java.util.jar.JarFile(prebuilt); java.util.zip.ZipEntry entry = jarFile.getEntry((name + "-version.properties")); java.io.InputStream is = jarFile.getInputStream(entry); com.android.sched.util.Version version = new com.android.sched.util.Version(is); return version.getVerboseVersion(); } catch (java.io.IOException e) { throw new com.android.jack.test.TestConfigurationException(e); } finally { if (jarFile != null) { try { jarFile.close(); } catch (java.io.IOException e) { } } } }
int doTransfer(java.io.FileDescriptor fd) throws java.io.IOException { try { if ((direction) == (java.nio.IoVec.Direction.READV)) { int result = Libcore.os.readv(fd, ioBuffers, offsets, byteCounts); if (result == 0) { result = -1; } return result; } else { return Libcore.os.writev(fd, ioBuffers, offsets, byteCounts); } } catch (libcore.io.ErrnoException errnoException) { throw errnoException.rethrowAsIOException(); } }
public void testDisplayAvdList_OneSnapshot() { com.android.sdkmanager.Main main = new com.android.sdkmanager.Main(); main.setLogger(getLog()); getAvdManager().createAvd(mAvdFolder, this.getName(), mTarget, SystemImage.DEFAULT_TAG, SdkConstants.ABI_ARMEABI, null, null, null, true, false, false, getLog()); getLog().clear(); main.displayAvdList(getAvdManager()); assertEquals(((((((((((("[P Available Android Virtual Devices:\n" + ", P Name: ") + (this.getName())) + "\n") + ", P Path: ") + (mAvdFolder)) + "\n") + ", P Target: Android 0.0 (API level 0)\n") + ", P Tag/ABI: default/armeabi\n") + ", P Skin: HVGA\n") + ", P Snapshot: true\n") + "]"), getLog().toString()); }
public int ioctlInt(java.io.FileDescriptor fd, int cmd, libcore.util.MutableInt arg) throws libcore.io.ErrnoException;
@javax.annotation.Nonnull public static java.lang.String getSyntheticSwitchMapInitializerName(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedEnum enumType) { java.lang.String enumName = com.android.jack.util.NamingTools.getValidName(com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter().getName(enumType)); java.lang.String methodName = com.android.jack.util.NamingTools.getNonSourceConflictingName((("get" + enumName) + (com.android.jack.transformations.enums.OptimizationUtil.Suffix))); return methodName; }



private static boolean compare(java.awt.image.BufferedImage reference, java.awt.image.BufferedImage generated, int threshold) { final int w = generated.getWidth(); final int h = generated.getHeight(); if ((w != (reference.getWidth())) || (h != (reference.getHeight()))) { return false; } for (int i = 0; i < w; i++) { for (int j = 0; j < h; j++) { final int p1 = reference.getRGB(i, j); final int p2 = generated.getRGB(i, j); final int dr = (p1 & 255) - (p2 & 255); final int dg = ((p1 & 65280) - (p2 & 65280)) >> 8; final int db = ((p1 & 16711680) - (p2 & 16711680)) >> 16; final int da = ((p1 & -16777216) - (p2 & -16777216)) >> 24; if (((((java.lang.Math.abs(db)) > threshold) || ((java.lang.Math.abs(dg)) > threshold)) || ((java.lang.Math.abs(dr)) > threshold)) || ((java.lang.Math.abs(da)) > threshold)) { return false; } } } return true; }
private void refreshMacAddress() { android.net.wifi.WifiManager wifiManager = ((android.net.wifi.WifiManager) (getSystemService(com.android.settings.wifi.WIFI_SERVICE))); android.net.wifi.WifiInfo wifiInfo = wifiManager.getConnectionInfo(); android.preference.Preference wifiMacAddressPref = findPreference(com.android.settings.wifi.AdvancedSettings.KEY_MAC_ADDRESS); java.lang.String macAddress = (wifiInfo == null) ? null : wifiInfo.getMacAddress(); wifiMacAddressPref.setSummary((!(android.text.TextUtils.isEmpty(macAddress)) ? macAddress : getString(R.string.status_unavailable))); }

private void writeResource(java.io.File rootFolder, com.google.common.collect.ListMultimap<java.lang.String, com.android.builder.resources.Resource> valuesResMap, com.android.builder.resources.Resource resource) throws java.io.IOException { com.android.builder.resources.ResourceFile.FileType type = resource.getSource().getType(); if (type == (ResourceFile.FileType.MULTI)) { java.lang.String qualifier = resource.getSource().getQualifiers(); if (qualifier == null) { qualifier = ""; } valuesResMap.put(qualifier, resource); } else { if (resource.isTouched()) { com.android.builder.resources.ResourceFile resourceFile = resource.getSource(); java.io.File file = resourceFile.getFile(); java.lang.String filename = file.getName(); java.lang.String folderName = resource.getType().getName(); java.lang.String qualifiers = resourceFile.getQualifiers(); if ((qualifiers != null) && ((qualifiers.length()) > 0)) { folderName = (folderName + (com.android.SdkConstants.RES_QUALIFIER_SEP)) + qualifiers; } java.io.File typeFolder = new java.io.File(rootFolder, folderName); if (!(typeFolder.isDirectory())) { typeFolder.mkdirs(); } java.io.File outFile = new java.io.File(typeFolder, filename); com.google.common.io.Files.copy(file, outFile); } } }
private boolean checkGoldenExecutorForSelfDivergence(java.lang.String programName) { java.lang.String seenOutput = null; for (int i = 0; i < 5; i++) { goldenExecutor.reset(); goldenExecutor.execute(programName); java.lang.String output = goldenExecutor.getResult().getFlattenedOutput(); if (seenOutput == null) { seenOutput = output; } else if (!(seenOutput.equals(output))) { return true; } } return false; }
@com.android.annotations.NonNull static com.android.builder.model.ProductFlavorContainer createPFC(@com.android.annotations.NonNull com.android.build.gradle.internal.ProductFlavorData productFlavorData, @com.android.annotations.NonNull java.util.Collection<com.android.builder.model.SourceProviderContainer> sourceProviderContainers) { java.util.List<com.android.builder.model.SourceProviderContainer> clonedContainer = com.android.build.gradle.internal.model.SourceProviderContainerImpl.cloneCollection(sourceProviderContainers); com.android.builder.model.SourceProviderContainer testASP = com.android.build.gradle.internal.model.SourceProviderContainerImpl.create(com.android.build.gradle.internal.model.ARTIFACT_ANDROID_TEST, productFlavorData.getTestSourceSet()); clonedContainer.add(testASP); return new com.android.build.gradle.internal.model.ProductFlavorContainerImpl(com.android.build.gradle.internal.model.ProductFlavorImpl.cloneFlavor(productFlavorData.getProductFlavor(), null, null), com.android.build.gradle.internal.model.SourceProviderImpl.cloneProvider(productFlavorData.getSourceSet()), clonedContainer); }
@java.lang.Override public android.view.View getView(int position, android.view.View convertView, android.view.ViewGroup parent) { android.widget.TextView text; android.widget.ImageView image; android.view.View view; if (convertView == null) { view = mInflater.inflate(com.android.mms.ui.IconListAdapter.mResource, parent, false); } else { view = convertView; } text = ((android.widget.TextView) (view.findViewById(R.id.text1))); text.setText(getItem(position).getTitle()); image = ((android.widget.ImageView) (view.findViewById(R.id.icon))); image.setImageResource(getItem(position).getResource()); return view; }


@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(("com.android.jack.shrob.test" + testNumber)); com.android.jack.test.toolchain.JackApiToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class); com.android.jack.shrob.spec.Flags flags = new com.android.jack.shrob.spec.Flags(); toolchain.setShrobFlags(flags); com.android.jack.shrob.proguard.GrammarActions.parse(("proguard.flags" + flagNumber), testFolder.getAbsolutePath(), flags); java.io.File candidateOutputMapping = com.android.jack.test.toolchain.AbstractTestTools.createTempFile("mapping", ".txt"); java.io.File refFolder = new java.io.File(testFolder, "refsObfuscationWithMapping"); java.io.File refOutputMapping = new java.io.File(refFolder, (("expected-" + flagNumber) + ".txt")); flags.setOutputMapping(candidateOutputMapping); flags.setPrintMapping(true); java.io.File inputMapping = new java.io.File(testFolder, ((("proguard.flags" + flagNumber) + ".mapping") + mappingNumber)); if (inputMapping.exists()) { flags.setObfuscationMapping(inputMapping); } com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, "jack")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorMapping(candidateOutputMapping, refOutputMapping)); }
public void fchown(java.io.FileDescriptor fd, int uid, int gid) throws libcore.io.ErrnoException;
@java.lang.Override @javax.annotation.Nonnull public synchronized com.android.sched.util.stream.ExtendedBufferedReader getBufferedReader() { wasUsed = true; if ((reader) == null) { clearRemover(); try { reader = new com.android.sched.util.stream.ExtendedBufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), charset), bufferSize); fromFile = true; } catch (java.io.FileNotFoundException e) { throw new com.android.sched.util.ConcurrentIOException(e); } } return reader; }

public boolean areCarrierPriviligeRulesLoaded() { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return (carrierPrivilegeRules == null) || (carrierPrivilegeRules.areCarrierPriviligeRulesLoaded()); }
public void execve(java.lang.String filename, java.lang.String[] argv, java.lang.String[] envp) throws android.system.ErrnoException;
public int pwrite(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, long offset) throws java.io.InterruptedIOException, libcore.io.ErrnoException;


void executeShellCommand(java.lang.String command, com.android.ddmlib.IShellOutputReceiver receiver) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException;

public com.android.apksig.DefaultApkSignerEngine build() throws java.security.InvalidKeyException { return new com.android.apksig.DefaultApkSignerEngine(mSignerConfigs, mMinSdkVersion, mV1SigningEnabled, mV2SigningEnabled, mOtherSignersSignaturesPreserved, mCreatedBy); }

public void test_sort$JII() { int startIndex = (tests.api.java.util.ArraysTest.arraySize) / 4; int endIndex = (3 * (tests.api.java.util.ArraysTest.arraySize)) / 4; long[] reversedArray = new long[tests.api.java.util.ArraysTest.arraySize]; long[] originalReversedArray = new long[tests.api.java.util.ArraysTest.arraySize]; for (int counter = 0; counter < (tests.api.java.util.ArraysTest.arraySize); counter++) { reversedArray[counter] = ((long) (((tests.api.java.util.ArraysTest.arraySize) - counter) - 1)); originalReversedArray[counter] = reversedArray[counter]; } java.util.Arrays.sort(reversedArray, startIndex, endIndex); for (int counter = 0; counter < startIndex; counter++) assertTrue("Array modified outside of bounds", ((reversedArray[counter]) == (originalReversedArray[counter]))); for (int counter = startIndex; counter < (endIndex - 1); counter++) assertTrue("Array not sorted within bounds", ((reversedArray[counter]) <= (reversedArray[(counter + 1)]))); for (int counter = endIndex; counter < (tests.api.java.util.ArraysTest.arraySize); counter++) assertTrue("Array modified outside of bounds", ((reversedArray[counter]) == (originalReversedArray[counter]))); try { java.util.Arrays.sort(reversedArray, (startIndex + 1), startIndex); fail("IllegalArgumentException expected"); } catch (java.lang.IllegalArgumentException ignore) { } try { java.util.Arrays.sort(reversedArray, (-1), startIndex); fail("ArrayIndexOutOfBoundsException expected (1)"); } catch (java.lang.ArrayIndexOutOfBoundsException ignore) { } try { java.util.Arrays.sort(reversedArray, startIndex, ((reversedArray.length) + 1)); fail("ArrayIndexOutOfBoundsException expected (2)"); } catch (java.lang.ArrayIndexOutOfBoundsException ignore) { } }
public static boolean isNormalized(java.lang.CharSequence src, java.text.Normalizer.Form form) { return libcore.icu.NativeNormalizer.isNormalized(src, form); }
private void refreshViewerInput() { if (!(mGroupPackages.isDisposed())) { java.util.List<com.android.sdkuilib.internal.repository.core.PkgCategory> cats = mDiffLogic.getCategories(isSortByApi()); if ((mTreeViewer.getInput()) != cats) { mTreeViewer.setInput(cats); } else { mTreeViewer.refresh(); } expandInitial(mTreeViewer.getInput()); updateButtonsState(); updateMenuCheckmarks(); } }
public static synchronized com.android.builder.sdk.SdkLoader getLoader(@com.android.annotations.NonNull java.io.File sdkLocation) { if (((com.android.builder.sdk.DefaultSdkLoader.sLoader) != null) && (!(sdkLocation.equals(com.android.builder.sdk.DefaultSdkLoader.sLoader.mSdkLocation)))) { throw new java.lang.IllegalStateException("Already created an SDK Loader with different SDK Path"); } return com.android.builder.sdk.DefaultSdkLoader.sLoader = new com.android.builder.sdk.DefaultSdkLoader(sdkLocation); }
public void requestNetwork(android.net.NetworkRequest request, android.app.PendingIntent operation) { checkPendingIntent(operation); try { mService.pendingRequestForNetwork(request.networkCapabilities, operation); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
protected byte[] wrap(byte content_type, org.conscrypt.DataStream dataStream) { byte[] fragment = dataStream.getData(org.conscrypt.SSLRecordProtocol.MAX_DATA_LENGTH); return wrap(content_type, fragment, 0, fragment.length); }
@java.lang.Override public void libToLib(@javax.annotation.Nonnull java.io.File[] in, @javax.annotation.Nonnull java.io.File out, boolean zipFiles) throws java.lang.Exception { java.util.List<java.lang.String> commandLine = new java.util.ArrayList<java.lang.String>(); libToCommon(commandLine, convertClasspahtWithJillAsString(), in); if (zipFiles) { commandLine.add("--output-jack"); } else { commandLine.add("--output-jack-dir"); } commandLine.add(out.getAbsolutePath()); com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile(commandLine.toArray(new java.lang.String[commandLine.size()])); exec.inheritEnvironment(); exec.setErr(errRedirectStream); exec.setOut(outRedirectStream); exec.setVerbose(isVerbose); if ((exec.run()) != 0) { throw new java.lang.RuntimeException("Jack compiler exited with an error"); } }

private void removeDerivedResources(org.eclipse.core.resources.IResource rootResource, boolean deleteRoot, org.eclipse.core.runtime.IProgressMonitor monitor) throws org.eclipse.core.runtime.CoreException { if (rootResource.exists()) { if ((rootResource.getType()) == (org.eclipse.core.resources.IResource.FOLDER)) { org.eclipse.core.resources.IFolder folder = ((org.eclipse.core.resources.IFolder) (rootResource)); org.eclipse.core.resources.IResource[] members = folder.members(); for (org.eclipse.core.resources.IResource member : members) { removeDerivedResources(member, true, monitor); } } else if (rootResource.isDerived()) { rootResource.getLocation().toFile().delete(); } if (deleteRoot) { rootResource.getLocation().toFile().delete(); } } }


@org.junit.Test public void testSetupDriverForSoftApMode() { com.android.server.wifi.WificondControl wificondControl = mock(com.android.server.wifi.WificondControl.class); android.net.wifi.IWificond wificond = mock(android.net.wifi.IWificond.class); android.net.wifi.IApInterface apInterface = mock(android.net.wifi.IApInterface.class); when(wificondControl.setupDriverForSoftApMode()).thenReturn(apInterface); mWifiNative.setWificondControl(wificondControl); android.net.wifi.IApInterface returnedApInterface = mWifiNative.setupDriverForSoftApMode(); assertEquals(apInterface, returnedApInterface); verify(wificondControl).setupDriverForSoftApMode(); verify(mWifiNative).startHal(eq(false)); }

public void testAppLauncher() throws java.lang.Exception { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, "Contacts"); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, "Calendar"); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, "Email"); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, "Settings"); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, "API Demos"); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, "Custom Locale"); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, "Dev Tools"); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, "Dev Settings"); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, "Gestures Builder"); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, "Widget Preview"); }
public com.android.dx.util.ByteArray slice(int start, int end) { checkOffsets(start, end); return new com.android.dx.util.ByteArray(bytes, (start + (this.start)), (end + (this.start))); }
protected com.android.internal.telephony.SMSDispatcher.SmsTracker getSmsTracker(java.util.HashMap<java.lang.String, java.lang.Object> data, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, java.lang.String format, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, com.android.internal.telephony.SmsHeader smsHeader, boolean isExpectMore, java.lang.String fullMessageText, boolean isText, boolean persistMessage) { android.content.pm.PackageManager pm = mContext.getPackageManager(); java.lang.String[] packageNames = pm.getPackagesForUid(android.os.Binder.getCallingUid()); final int userId = android.os.UserHandle.getCallingUserId(); android.content.pm.PackageInfo appInfo = null; if ((packageNames != null) && ((packageNames.length) > 0)) { try { appInfo = pm.getPackageInfoAsUser(packageNames[0], PackageManager.GET_SIGNATURES, userId); } catch (android.content.pm.PackageManager e) { } } java.lang.String destAddr = android.telephony.PhoneNumberUtils.extractNetworkPortion(((java.lang.String) (data.get("destAddr")))); return new com.android.internal.telephony.SMSDispatcher.SmsTracker(data, sentIntent, deliveryIntent, appInfo, destAddr, format, unsentPartCount, anyPartFailed, messageUri, smsHeader, isExpectMore, fullMessageText, getSubId(), isText, persistMessage, userId); }


@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) { com.android.sched.vfs.InputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VFS prefixedInputVFS = null; try { prefixedInputVFS = new com.android.sched.vfs.PrefixedFS(vfs, com.android.jack.library.v0002.InputJackLibraryImpl.getSectionPath(fileType)); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.NotDirectoryException e) { throw new java.lang.AssertionError(e); } if (fileType == (com.android.jack.library.FileType.PREBUILT)) { try { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(new com.android.sched.vfs.MessageDigestFS(prefixedInputVFS, com.android.sched.util.config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO))); } catch (com.android.sched.vfs.WrongVFSFormatException e) { throw new java.lang.AssertionError(e); } } else { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(prefixedInputVFS); } sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }





public android.net.Uri scanSingleFile(java.lang.String path, java.lang.String volumeName, java.lang.String mimeType) { try { initialize(volumeName); prescan(path); java.io.File file = new java.io.File(path); return mClient.doScanFile(path, mimeType, file.lastModified(), file.length(), true); } catch (android.os.RemoteException e) { android.util.Log.e(android.media.MediaScanner.TAG, "RemoteException in MediaScanner.scanFile()", e); return null; } }
private void initiateBatteryQuery() { java.lang.String threadName = java.lang.String.format("query-battery-%s", mDevice.getSerialNumber()); java.lang.Thread fetchThread = new java.lang.Thread(threadName) { @java.lang.Override public void run() { java.lang.Exception exception = null; try { com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver sysBattReceiver = new com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver(); mDevice.executeShellCommand("cat /sys/class/power_supply/*/capacity", sysBattReceiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (!(setBatteryLevel(sysBattReceiver.getBatteryLevel()))) { com.android.ddmlib.BatteryFetcher.BatteryReceiver receiver = new com.android.ddmlib.BatteryFetcher.BatteryReceiver(); mDevice.executeShellCommand("dumpsys battery", receiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (setBatteryLevel(receiver.getBatteryLevel())) { return; } } exception = new java.io.IOException("Unrecognized response to battery level queries"); } catch (com.android.ddmlib.TimeoutException e) { exception = e; } catch (com.android.ddmlib.AdbCommandRejectedException e) { exception = e; } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { exception = e; } catch (java.io.IOException e) { exception = e; } handleBatteryLevelFailure(exception); } }; fetchThread.setDaemon(true); fetchThread.start(); }

public int setsid() throws libcore.io.ErrnoException { return os.setsid(); }
@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCatchBlock block) { assert (cfg) != null; com.android.jack.cfg.NormalBasicBlock endOfBlock = new com.android.jack.cfg.NormalBasicBlock(cfg, currentStmts); setBlockOfStatement(endOfBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(block); if (nextStatement != null) { forwardBranchResolver.addForwardBranch(ForwardBranchKind.BRANCH, endOfBlock, nextStatement); } }

public int setsid() throws libcore.io.ErrnoException;



public void updateDate(int year, int monthOfYear, int dayOfMonth) { mYear = year; mMonth = monthOfYear; mDay = dayOfMonth; updateSpinners(); reorderPickers(new java.text.DateFormatSymbols().getShortMonths()); }
@java.lang.Override long getLastModified(@javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVFile file) { return vfs.getLastModified(file.getWrappedFile()); }
@java.lang.Override public final int getInt(int index) { checkNotFreed(); checkIndex(index, SizeOf.INT); return this.block.peekInt(((offset) + index), order); }

public void run() { try { if (Main.DEBUG) { java.lang.System.out.println(("Starting ThreadStress Daemon " + (id))); } int i = 0; while (true) { Main.Operation operation = operations[i]; if (Main.DEBUG) { java.lang.System.out.println(((((("ThreadStress Daemon " + (id)) + " operation ") + i) + " is ") + operation)); } operation.perform(); i = (i + 1) % (operations.length); } } catch (java.lang.OutOfMemoryError e) { } finally { if (Main.DEBUG) { java.lang.System.out.println(("Finishing ThreadStress Daemon for " + (id))); } } }
@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.InputOutputVFS checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull final java.lang.String string) throws com.android.sched.util.codec.ParsingException { try { return new com.android.sched.vfs.GenericInputOutputVFS(new com.android.sched.vfs.CachedDirectFS(new com.android.sched.util.file.Directory(string, context.getRunnableHooks(), existence, permissions, change), permissions)); } catch (java.io.IOException e) { throw new com.android.sched.util.codec.ParsingException(e); } }
@javax.annotation.Nonnull @java.lang.Override public java.util.Collection<java.lang.String> getSubPackageNames(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading) { java.util.List<java.lang.String> subs = new java.util.ArrayList<java.lang.String>(); for (com.android.sched.vfs.InputVElement sub : dir.list()) { if (sub.isVDir()) { subs.add(sub.getName()); } } return subs; }


@java.lang.Override public void tearDown(com.android.tradefed.invoker.IInvocationContext context, java.lang.Throwable e) throws com.android.tradefed.device.DeviceNotAvailableException { if (((mVenvDir) != null) && (mIsDirCreator)) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.recursiveDelete(mVenvDir.toPath()); com.android.tradefed.log.LogUtil.CLog.i("Deleted the virtual env's temp working dir, %s.", mVenvDir); } catch (java.io.IOException exception) { com.android.tradefed.log.LogUtil.CLog.e("Failed to delete %s: %s", mVenvDir, exception); } mVenvDir = null; } }

public boolean p2pExtListen(boolean enable, int period, int interval) { if (enable && (interval < period)) { return false; } return doBooleanCommand(("P2P_EXT_LISTEN" + (enable ? ((" " + period) + " ") + interval : ""))); }
@java.lang.Override public int read(byte[] arr, int offset, int length) { if ((offset + length) > (arr.length)) { length = (arr.length) - offset; } int maxLength = (size) - (cursor); if (length > maxLength) { length = maxLength; } java.lang.System.arraycopy(bytes, ((cursor) + (start)), arr, offset, length); cursor += length; return length; }

@org.junit.Test public void testDoubleClatAccounting100MBDownload() throws java.lang.Exception { long appRxBytesBefore = 328684029L; long appRxBytesAfter = 439237478L; assertEquals("App traffic should be ~100MB", 110553449, (appRxBytesAfter - appRxBytesBefore)); long rootRxBytesBefore = 1394011L; long rootRxBytesAfter = 1398634L; assertEquals("UID 0 traffic should be ~0", 4623, (rootRxBytesAfter - rootRxBytesBefore)); com.android.internal.net.NetworkStatsFactory.noteStackedIface("v4-wlan0", "wlan0"); android.net.NetworkStats stats; stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_before); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "v4-wlan0", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesBefore, 5199872L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "wlan0", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesBefore, 647888L); stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_after); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "v4-wlan0", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesAfter, 7867488L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "wlan0", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesAfter, 647587L); com.android.internal.net.NetworkStatsFactory.noteStackedIface("v4-wlan0", null); }
public native libcore.io.StructStat stat(java.lang.String path) throws libcore.io.ErrnoException;

public void testTimeKeyListener() { final android.text.method.TimeKeyListener timeKeyListener = android.text.method.TimeKeyListener.getInstance(); mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(timeKeyListener); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); assertEquals("", mTextView.getText().toString()); mInstrumentation.sendStringSync("1"); assertEquals("1", mTextView.getText().toString()); mInstrumentation.sendStringSync("2"); assertEquals("12", mTextView.getText().toString()); mInstrumentation.sendStringSync("a"); assertEquals("12a", mTextView.getText().toString()); int keyCode = android.text.method.cts.TextMethodUtils.getUnacceptedKeyCode(TimeKeyListener.CHARACTERS); if ((-1) != keyCode) { sendKeys(keyCode); assertEquals("12a", mTextView.getText().toString()); } mInstrumentation.sendStringSync("m"); assertEquals("12am", mTextView.getText().toString()); mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(null); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); mInstrumentation.sendStringSync("1"); assertEquals("12am", mTextView.getText().toString()); }
public void run() { try { java.lang.Thread.sleep(2000); } catch (java.lang.InterruptedException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, ("Unable to debug device " + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); return; } if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, ("Unable to debug device " + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); } else { loadViewServerInfoAndWindows(device); } }
@android.test.suitebuilder.annotation.SmallTest public void testNetworkInfoOfTypeNone() { android.os.ConditionVariable broadcastCV = waitForConnectivityBroadcasts(1); verifyNoNetwork(); com.android.server.ConnectivityServiceTest.MockNetworkAgent lowpanNetwork = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_LOWPAN); assertNull(mCm.getActiveNetworkInfo()); lowpanNetwork.connect(true); waitForIdle(); verifyActiveNetwork(com.android.server.TRANSPORT_LOWPAN); assertEquals(1, mCm.getAllNetworks().length); android.net.NetworkInfo info = mCm.getActiveNetworkInfo(); android.net.Network network = mCm.getActiveNetwork(); com.android.server.NetworkCapabilities capabilities = mCm.getNetworkCapabilities(network); assertNotNull(info); assertNotNull(network); assertNotNull(capabilities); assertEquals(com.android.server.TYPE_NONE, info.getType()); assertTrue(capabilities.hasTransport(com.android.server.TRANSPORT_LOWPAN)); lowpanNetwork.disconnect(); waitForIdle(); verifyNoNetwork(); if (broadcastCV.block(10)) { fail("expected no broadcast, but got CONNECTIVITY_ACTION broadcast"); } }
public static void setExtensionDefault(com.android.build.gradle.managed.NdkConfig ndkConfig) { if (ndkConfig.getToolchain().isEmpty()) { ndkConfig.setToolchain(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_TOOLCHAIN); } else { if ((!(ndkConfig.getToolchain().equals("gcc"))) && (!(ndkConfig.getToolchain().equals("clang")))) { throw new org.gradle.api.InvalidUserDataException(java.lang.String.format("Invalid toolchain '%s'. Supported toolchains are 'gcc' and 'clang'.", ndkConfig.getToolchain())); } } if (ndkConfig.getToolchainVersion().isEmpty()) { ndkConfig.setToolchainVersion(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_TOOLCHAIN_VERSION); } ndkConfig.getCFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue("**/*.c"); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue("**/*.cpp"); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue("**/*.cc"); } }); if (ndkConfig.getStl().isEmpty()) { ndkConfig.setStl(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_STL); } else { com.android.build.gradle.ndk.internal.StlConfiguration.checkStl(ndkConfig.getStl()); } }
@java.lang.Override boolean build() { if (super.build()) { java.io.File outDir = outputFile.fileName.getParentFile(); if ((!(outDir.exists())) && (!(outDir.mkdirs()))) { java.lang.System.err.println(("failed to create output dir: " + (outDir.getAbsolutePath()))); return false; } int args = 3; java.lang.String[] commandLine = new java.lang.String[args]; commandLine[0] = "--output"; commandLine[1] = outputFile.fileName.getAbsolutePath(); commandLine[2] = inputFile.fileName.getAbsolutePath(); try { com.android.jill.Options options = com.android.jill.Main.getOptions(commandLine); com.android.jill.Jill.process(options); } catch (java.lang.Throwable ex) { ex.printStackTrace(); return false; } return true; } return false; }
public boolean click(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint mousePos) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreview preview = getPreview(mousePos); if (preview != null) { boolean handled = preview.click((((mousePos.x) - (getX())) - (preview.getX())), (((mousePos.y) - (getY())) - (preview.getY()))); if (handled) { moved(mousePos); return true; } } return false; }

public void testConfigurationUpdatesWhenResizedFromFullscreen() throws java.lang.Exception { if (!(supportsMultiWindowMode())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, "Skipping test: no multi-window support"); return; } launchActivityInStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); moveActivityToStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); android.server.cts.ActivityManagerAppConfigurationTests.assertSizesAreSane(fullscreenSizes, dockedSizes); }
@java.lang.Override public void handleMessage(android.os.Message msg) { if (mTestNameChanged) { getActionBar().setTitle(("IP-Compat test: " + (mTestName))); } if ((mDisplayedBitmap) == 0) { mDisplayView.setImageBitmap(mBitmapOut1); } else { mDisplayView.setImageBitmap(mBitmapOut2); } mDisplayedBitmap ^= 1; mDisplayView.invalidate(); }
public void testLaunchToSideSingleInstance() throws java.lang.Exception { launchTargetToSide(android.server.cts.ActivityManagerDockedStackTests.SINGLE_INSTANCE_ACTIVITY_NAME, false); }

public static long SubNeg3(long arg1, long arg2) { long res = 0; long temp = -arg1; for (long i = 0; i < 1; i++) { res += (temp - arg2) - i; } return res; }

@org.junit.Test public void testLamba002() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA002).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }



@javax.annotation.Nonnull private com.android.jack.dx.dex.file.ClassDefItem createClassDefItem(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) throws com.android.jack.ir.ast.JTypeLookupException { com.android.jack.dx.rop.cst.CstType thisClass = com.android.jack.backend.dex.rop.RopHelper.getCstType(type); com.android.jack.dx.rop.cst.CstType superclassType = com.android.jack.backend.dex.ClassDefItemBuilder.createSuperClass(type); int accessFlags = getDxAccessFlagsForType(type); com.android.jack.dx.rop.type.TypeList interfaces = com.android.jack.backend.dex.ClassDefItemBuilder.createInterfacesList(type); com.android.jack.dx.rop.cst.CstString sourceFile = null; if (emitSourceFileInfo) { sourceFile = com.android.jack.backend.dex.ClassDefItemBuilder.createSourceFile(type); } com.android.jack.dx.dex.file.ClassDefItem classDefItem = new com.android.jack.dx.dex.file.ClassDefItem(thisClass, accessFlags, superclassType, interfaces, sourceFile); return classDefItem; }
@java.lang.Override public boolean equals(java.lang.Object otherObj) { if ((this) == otherObj) { return true; } else if ((otherObj == null) || ((getClass()) != (otherObj.getClass()))) { return false; } com.android.server.wifi.WifiNative.PnoNetwork other = ((com.android.server.wifi.WifiNative.PnoNetwork) (otherObj)); return ((((java.util.Objects.equals(ssid, other.ssid)) && ((networkId) == (other.networkId))) && ((priority) == (other.priority))) && ((flags) == (other.flags))) && ((auth_bit_field) == (other.auth_bit_field)); }
public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_array_alloc s = new com.android.rs.test.ScriptC_array_alloc(pRS); pRS.setMessageHandler(mRsMessage); int dimX = s.get_dimX(); com.android.rs.test.Allocation[] Arr = new com.android.rs.test.Allocation[dimX]; com.android.rs.test.Type.Builder typeBuilder = new com.android.rs.test.Type.Builder(pRS, com.android.rs.test.Element.I32(pRS)); com.android.rs.test.Type T = typeBuilder.setX(1).create(); for (int i = 0; i < dimX; i++) { com.android.rs.test.Allocation A = com.android.rs.test.Allocation.createTyped(pRS, T); Arr[i] = A; } s.set_a(Arr); s.invoke_array_alloc_test(); pRS.finish(); waitForMessage(); pRS.destroy(); passTest(); }
@java.lang.Override protected void resizeMedia(int byteLimit, long messageId) throws com.google.android.mms.MmsException { com.android.mms.ui.UriImage image = new com.android.mms.ui.UriImage(mContext, getUri()); if (image == null) { throw new com.android.mms.ExceedMessageSizeException(("No room to resize picture: " + (getUri()))); } com.google.android.mms.pdu.PduPart part = image.getResizedImageAsPart(com.android.mms.MmsConfig.getMaxImageWidth(), com.android.mms.MmsConfig.getMaxImageHeight(), byteLimit); if (part == null) { throw new com.android.mms.ExceedMessageSizeException(("Not enough memory to turn image into part: " + (getUri()))); } com.google.android.mms.pdu.PduPersister persister = com.google.android.mms.pdu.PduPersister.getPduPersister(mContext); this.mSize = part.getData().length; android.net.Uri newUri = persister.persistPart(part, messageId); setUri(newUri); }
public java.lang.String startWpsPinDisplay(java.lang.String groupIfName, java.lang.String bssid) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure("startWpsPinDisplay"))) return null; if (groupIfName == null) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, "Group name required when requesting WPS KEYPAD."); return null; } byte[] macAddress = null; if (bssid != null) { try { macAddress = com.android.server.wifi.util.NativeUtil.macAddressToByteArray(bssid); } catch (java.lang.Exception e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, "Could not parse BSSID.", e); return null; } } com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.String> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult((((("startWpsPinDisplay(" + groupIfName) + ", ") + bssid) + ")")); try { mISupplicantP2pIface.startWpsPinDisplay(groupIfName, macAddress, (android.hardware.wifi.supplicant.V1_0.SupplicantStatus status,java.lang.String generatedPin) -> { result.setResult(status, generatedPin); }); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ("ISupplicantP2pIface exception: " + e)); supplicantServiceDiedHandler(); } return result.getResult(); } }

public void append(@com.android.annotations.NonNull com.android.build.gradle.internal.core.NdkConfig ndkConfig) { if ((ndkConfig.getModuleName()) != null) { moduleName = ndkConfig.getModuleName(); } if ((ndkConfig.getStl()) != null) { stl = ndkConfig.getStl(); } if ((ndkConfig.getAbiFilters()) != null) { if ((abiFilters) == null) { abiFilters = com.google.common.collect.Sets.newHashSetWithExpectedSize(ndkConfig.getAbiFilters().size()); } else { abiFilters.clear(); } abiFilters.addAll(ndkConfig.getAbiFilters()); } if ((cFlags) == null) { cFlags = ndkConfig.getcFlags(); } else if ((ndkConfig.getcFlags()) != null) { cFlags = ((cFlags) + " ") + (ndkConfig.getcFlags()); } if ((ndkConfig.getLdLibs()) != null) { if ((ldLibs) == null) { ldLibs = com.google.common.collect.Lists.newArrayListWithCapacity(ndkConfig.getLdLibs().size()); } else { ldLibs.clear(); } ldLibs.addAll(ndkConfig.getLdLibs()); } }



public void testIkeOverUdpEncapSocket() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecManagerTest.IPV4_LOOPBACK); android.net.cts.IpSecManagerTest.StatsChecker.initStatsChecker(); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket()) { int localPort = android.net.cts.IpSecManagerTest.getPort(encapSocket.getSocket()); byte[] dataWithEspHeader = new byte[(android.net.cts.IpSecManagerTest.TEST_DATA.length) + 8]; java.lang.System.arraycopy(android.net.cts.IpSecManagerTest.TEST_DATA, 0, dataWithEspHeader, 8, android.net.cts.IpSecManagerTest.TEST_DATA.length); byte[] in = new byte[dataWithEspHeader.length]; android.system.Os.sendto(encapSocket.getSocket(), dataWithEspHeader, 0, dataWithEspHeader.length, 0, local, localPort); android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertArrayEquals("Encapsulated data did not match.", dataWithEspHeader, in); int ipHdrLen = (local instanceof java.net.Inet6Address) ? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int expectedPacketSize = ((dataWithEspHeader.length) + (android.net.cts.IpSecManagerTest.UDP_HDRLEN)) + ipHdrLen; android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); } }

public void timeSinh(int reps) { for (int rep = 0; rep < reps; ++rep) { java.lang.Math.sinh(d); } }
public void timeSignumF(int reps) { for (int rep = 0; rep < reps; ++rep) { java.lang.Math.signum(f); } }


private void applyUpdate() throws android.system.ErrnoException, java.io.IOException { android.util.Slog.i(com.android.server.updates.SELinuxPolicyInstallReceiver.TAG, "Applying SELinux policy"); java.io.File contexts = new java.io.File(updateDir.getParentFile(), "contexts"); java.io.File current = new java.io.File(updateDir.getParentFile(), "current"); java.io.File update = new java.io.File(updateDir.getParentFile(), "update"); java.io.File tmp = new java.io.File(updateDir.getParentFile(), "tmp"); if (current.exists()) { android.system.Os.symlink(updateDir.getPath(), update.getPath()); android.system.Os.rename(update.getPath(), current.getPath()); } else { android.system.Os.symlink(updateDir.getPath(), current.getPath()); } contexts.mkdirs(); backupContexts(contexts); copyUpdate(contexts); android.system.Os.symlink(contexts.getPath(), tmp.getPath()); android.system.Os.rename(tmp.getPath(), current.getPath()); android.os.SystemProperties.set("selinux.reload_policy", "1"); }

public android.system.StructPasswd getpwnam(java.lang.String name) throws android.system.ErrnoException { return os.getpwnam(name); }
public void test_getPositiveSuffix() { java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setPositiveSuffix("%"); assertTrue("Incorrect positive prefix", df.getPositiveSuffix().equals("%")); }
public void testVFE16() { try { java.lang.Class.forName("dot.junit.opcodes.iget_wide.d.T_iget_wide_5"); fail("expected a verification exception"); } catch (java.lang.Throwable t) { dot.junit.DxUtil.checkVerifyException(t); } }

@java.lang.Override public void run() { java.lang.Exception exception = null; try { com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver sysBattReceiver = new com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver(); mDevice.executeShellCommand("cat /sys/class/power_supply/*/capacity", sysBattReceiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (!(setBatteryLevel(sysBattReceiver.getBatteryLevel()))) { com.android.ddmlib.BatteryFetcher.BatteryReceiver receiver = new com.android.ddmlib.BatteryFetcher.BatteryReceiver(); mDevice.executeShellCommand("dumpsys battery", receiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (setBatteryLevel(receiver.getBatteryLevel())) { return; } } exception = new java.io.IOException("Unrecognized response to battery level queries"); } catch (com.android.ddmlib.TimeoutException e) { exception = e; } catch (com.android.ddmlib.AdbCommandRejectedException e) { exception = e; } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { exception = e; } catch (java.io.IOException e) { exception = e; } handleBatteryLevelFailure(exception); }
public void test_SSLContext_defaultConfiguration() throws java.lang.Exception { libcore.javax.net.ssl.SSLDefaultConfigurationAsserts.assertSSLContext(javax.net.ssl.SSLContext.getDefault()); for (java.lang.String protocol : libcore.java.security.StandardNames.SSL_CONTEXT_PROTOCOLS) { javax.net.ssl.SSLContext sslContext = javax.net.ssl.SSLContext.getInstance(protocol); if (!(protocol.equals(StandardNames.SSL_CONTEXT_PROTOCOLS_DEFAULT))) { sslContext.init(null, null, null); } libcore.javax.net.ssl.SSLDefaultConfigurationAsserts.assertSSLContext(sslContext); } }
public static void shutdown() throws java.lang.InterruptedException { synchronized(com.android.builder.profile.ProcessRecorderFactory.LOCK) { java.util.List<java.lang.management.GarbageCollectorMXBean> garbageCollectorMXBeans = java.lang.management.ManagementFactory.getGarbageCollectorMXBeans(); com.android.builder.profile.ThreadRecorder.get().record(ExecutionType.FINAL_METADATA, Recorder.EmptyBlock, new com.android.builder.profile.Recorder.Property("build_time", java.lang.Long.toString(((java.lang.System.currentTimeMillis()) - (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.startTime)))), new com.android.builder.profile.Recorder.Property("gc_count", java.lang.Long.toString(((garbageCollectorMXBeans.get(0).getCollectionCount()) - (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.gcCountAtStart)))), new com.android.builder.profile.Recorder.Property("gc_time", java.lang.Long.toString(((garbageCollectorMXBeans.get(0).getCollectionTime()) - (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.gcTimeAtStart))))); if (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.isInitialized()) { com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.get().finish(); com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.uploadData(); } com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.processRecorder = null; } }

@java.lang.Override public void disconnect() { try { Libcore.os.connect(fd, UNSPECIFIED, 0); } catch (libcore.io.ErrnoException errnoException) { throw new java.lang.AssertionError(errnoException); } catch (java.net.SocketException ignored) { } connectedPort = -1; connectedAddress = null; isNativeConnected = false; }


@java.lang.Override public void supplyIccPuk2ForApp(java.lang.String puk, java.lang.String newPin2, java.lang.String aid, android.os.Message result) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_ENTER_SIM_PUK2, result); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(); if (radioProxy != null) { addRequest(rr); try { radioProxy.supplyIccPuk2ForApp(rr.mSerial, (puk != null ? puk : ""), (newPin2 != null ? newPin2 : ""), (aid != null ? aid : "")); } catch (java.lang.Exception e) { riljLoge("supplyIccPuk2ForApp", e); rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); decrementWakeLock(rr); rr.release(); } } else { rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); rr.release(); } }
@com.googlecode.android_scripting.rpc.Rpc(description = "Return True if WiFi Calling is enabled during roaming.") public boolean imsIsWfcRoamingEnabledByUser() { return com.android.ims.ImsManager.isWfcRoamingEnabledByUser(mContext); }


public int fcntlInt(java.io.FileDescriptor fd, int cmd, int arg) throws android.system.ErrnoException { return os.fcntlInt(fd, cmd, arg); }
public static void logError(java.lang.String message) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, AdtPlugin.PLUGIN_ID, message); }
@java.lang.Override public void lchown(java.lang.String path, int uid, int gid) throws libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.lchown(path, uid, gid); }
private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int truncLenBits) throws java.lang.Exception { int innerPacketSize = ((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateAesCbcEspPacketSizeWithAuth(((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen), truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = calculateAesCbcEspPacketSizeWithAuth(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, truncLenBits); sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (udpEncapLen != 0) { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } }
@javax.annotation.Nonnull private static java.util.Properties loadLibraryProperties(@javax.annotation.Nonnull com.android.sched.vfs.InputVFS vfs) throws com.android.jack.library.NotJackLibraryException { java.util.Properties libraryProperties = new java.util.Properties(); try { com.android.sched.vfs.InputVFile libProp = vfs.getRootInputVDir().getInputVFile(JackLibrary.LIBRARY_PROPERTIES_VPATH); libraryProperties.load(libProp.openRead()); } catch (java.io.IOException e) { com.android.jack.library.JackLibraryFactory.logger.log(java.util.logging.Level.SEVERE, ((("Fails to read " + (JackLibrary.LIBRARY_PROPERTIES_VPATH.getPathAsString('/'))) + " from ") + vfs), e); throw new com.android.jack.library.NotJackLibraryException(vfs.getLocation()); } return libraryProperties; }
@javax.annotation.Nonnull public java.lang.String getVerboseVersion() { return ((((((version) + " '") + (releaseName)) + "' (") + ((buildId) != null ? buildId : "engineering")) + ((codeBase) != null ? ' ' + (codeBase) : "")) + ")"; }
public int setUsbTethering(boolean enable) { if (com.android.server.connectivity.Tethering.VDBG) android.util.Log.d(com.android.server.connectivity.Tethering.TAG, (("setUsbTethering(" + enable) + ")")); android.hardware.usb.UsbManager usbManager = mContext.getSystemService(android.hardware.usb.UsbManager.class); synchronized(mPublicSync) { if (enable) { if (mRndisEnabled) { final long ident = android.os.Binder.clearCallingIdentity(); try { tetherMatchingInterfaces(true, ConnectivityManager.TETHERING_USB); } finally { android.os.Binder.restoreCallingIdentity(ident); } } else { mUsbTetherRequested = true; usbManager.setCurrentFunction(UsbManager.USB_FUNCTION_RNDIS, false); } } else { final long ident = android.os.Binder.clearCallingIdentity(); try { tetherMatchingInterfaces(false, ConnectivityManager.TETHERING_USB); } finally { android.os.Binder.restoreCallingIdentity(ident); } if (mRndisEnabled) { usbManager.setCurrentFunction(null, false); } mUsbTetherRequested = false; } } return android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR; }

public void run() { task.run(); }
private static java.lang.String parseWpaOneElement(android.net.wifi.ScanResult.InformationElement ie) { java.nio.ByteBuffer buf = java.nio.ByteBuffer.wrap(ie.bytes).order(java.nio.ByteOrder.LITTLE_ENDIAN); try { buf.getInt(); java.lang.String security = "[WPA"; if ((buf.getShort()) != (com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_VENDOR_OUI_VERSION)) { return null; } buf.getInt(); short cipherCount = buf.getShort(); for (int i = 0; i < cipherCount; i++) { buf.getInt(); } short akmCount = buf.getShort(); if (akmCount == 0) { security += "-EAP"; } boolean found = false; for (int i = 0; i < akmCount; i++) { int akm = buf.getInt(); switch (akm) { case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_AKM_EAP : security += (found ? "+" : "-") + "EAP"; found = true; break; case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_AKM_PSK : security += (found ? "+" : "-") + "PSK"; found = true; break; default : break; } } security += "]"; return security; } catch (java.nio.BufferUnderflowException e) { android.util.Log.e("IE_Capabilities", "Couldn't parse type 1 WPA, buffer underflow"); return null; } }
@java.lang.Override protected org.junit.runners.model.Statement methodInvoker(org.junit.runners.model.FrameworkMethod method, java.lang.Object test) { org.junit.runners.model.Statement methodInvoker = parameterisedRunner.parameterisedMethodInvoker(method, test); if (methodInvoker == null) methodInvoker = super.methodInvoker(method, test); return methodInvoker; }
@org.junit.Test public void testLambdaNestingInMultipleMixedAnonymousCaptureLocal_withInterference() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_44).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }
public void listen(java.io.FileDescriptor fd, int backlog) throws libcore.io.ErrnoException;
private android.util.Pair<java.lang.ref.WeakReference<com.android.services.telephony.TelephonyConnection>, java.util.List<com.android.internal.telephony.Phone>> makeCachedConnectionPhonePair(com.android.services.telephony.TelephonyConnection c) { java.util.List<com.android.internal.telephony.Phone> phones = new java.util.ArrayList(java.util.Arrays.asList(com.android.internal.telephony.PhoneFactory.getPhones())); return new android.util.Pair(new java.lang.ref.WeakReference(c), phones); }


public static int toLowerCase(int codePoint) { return java.lang.Character.toLowerCaseImpl(codePoint); }
@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ("[ImsPhoneCallTracker] " + msg)); }
public void addU32(android.support.v8.renderscript.Long4 v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addU32(new android.renderscript.Long4(v.x, v.y, v.z, v.w)); return; } addU32(v.x); addU32(v.y); addU32(v.z); addU32(v.w); }
@org.junit.Test public void testCompile017() throws java.lang.Exception { java.lang.String packageName = "com.android.jack.switchstatement.test017.jack"; java.lang.String classPrefix = (packageName.replace('.', '-')) + "-"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); { input.put("Enum1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), false)); input.put("Enum1$Enum1_", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), false)); input.put("Enum1$Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), true)); } checkCompiledCode(packageName, input); }


static java.math.BigInt gcd(java.math.BigInt a, java.math.BigInt b) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_gcd(r.bignum, a.bignum, b.bignum); return r; }