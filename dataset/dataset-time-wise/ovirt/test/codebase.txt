

@java.lang.Override protected void init() { org.ovirt.engine.core.common.businessentities.VM vmFromConfiguration = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm(); if (vmFromConfiguration != null) { vmFromConfiguration.getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterId()); if (!(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget())) { setDisksToBeAttached(vmFromConfiguration); } org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setContainerId(vmFromConfiguration.getId()); } else { initUnregisteredVM(); } if ((Guid.Empty.equals(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVmId())) && ((org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm()) != null)) { org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm().getId()); } setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterId()); org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getCluster().getStoragePoolId()); super.init(); }



@java.lang.Override public void removeAllForVm(org.ovirt.engine.core.compat.Guid vmId) { getCallsHandler().executeModification("DeleteVmGuestAgentInterfacesByVmId", getCustomMapSqlParameterSource().addValue("vm_id", vmId)); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsList = org.ovirt.engine.core.bll.GetAllVmsQuery.getDbFacade().getVmDao().getAll(org.ovirt.engine.core.bll.GetAllVmsQuery.getUserID(), org.ovirt.engine.core.bll.GetAllVmsQuery.getParameters().isFiltered()); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsList) { org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(vm); } org.ovirt.engine.core.bll.GetAllVmsQuery.getQueryReturnValue().setReturnValue(vmsList); }


public org.ovirt.engine.core.common.action.VdcReturnValueBase endAction(org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task, org.ovirt.engine.core.bll.job.ExecutionContext context) { org.ovirt.engine.core.common.businessentities.AsyncTask dbAsyncTask = task.getParameters().getDbAsyncTask(); org.ovirt.engine.core.common.action.VdcActionType actionType = getEndActionType(dbAsyncTask); org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = dbAsyncTask.getActionParameters(); org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.tasks.CommandHelper.buildCommand(actionType, parameters, context, coco.getCommandStatus(dbAsyncTask.getCommandId())); return new org.ovirt.engine.core.bll.tasks.DecoratedCommand(command).endAction(); }
private static org.ovirt.engine.core.common.businessentities.UsbPolicy getUsbPolicyAccordingToUsbType(org.ovirt.engine.api.model.UsbType usbType) { switch (usbType) { case LEGACY : return org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_LEGACY; case NATIVE : return org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE; default : return null; } }
private void initUsbPolicy() { java.lang.Integer osType = getOSType().getSelectedItem(); org.ovirt.engine.core.common.businessentities.DisplayType displayType = getDisplayType().getSelectedItem(); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.GraphicsTypes graphicsTypes = getGraphicsType().getSelectedItem(); if (((osType == null) || (displayType == null)) || (graphicsTypes == null)) { return; } getUsbPolicy().setIsChangeable(true); org.ovirt.engine.core.common.businessentities.UsbPolicy prevSelectedUsbPolicy = getUsbPolicy().getSelectedItem(); if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isLinuxOsType(osType)) { getUsbPolicy().setItems(java.util.Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE)); } else { getUsbPolicy().setItems(java.util.Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY, UsbPolicy.ENABLED_NATIVE)); } if (!(graphicsTypes.getBackingGraphicsTypes().contains(GraphicsType.SPICE))) { getUsbPolicy().setIsChangeable(false); } if (getBehavior().basedOnCustomInstanceType()) { java.util.Collection<org.ovirt.engine.core.common.businessentities.UsbPolicy> policies = getUsbPolicy().getItems(); if (policies.contains(prevSelectedUsbPolicy)) { getUsbPolicy().setSelectedItem(prevSelectedUsbPolicy); } else if ((policies.size()) > 0) { getUsbPolicy().setSelectedItem(policies.iterator().next()); } } }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel fenceAgentModel) { driver.edit(fenceAgentModel); this.model = fenceAgentModel; determineLabelValue(fenceAgentModel); fenceAgentModel.getManagementIp().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { determineLabelValue(model); } }); fenceAgentModel.getConcurrentSelectList().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsAvailable".equals(args.propertyName)) { determineLabelValue(model); } } }); }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel fenceAgentModel) { driver.edit(fenceAgentModel); this.model = fenceAgentModel; determineLabelValue(fenceAgentModel); fenceAgentModel.getManagementIp().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { determineLabelValue(model); } }); }
public void validate(java.util.List<java.lang.String> errors) { int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); assert (errors != null) && ((errors.size()) == rowCount) : "errors must be the same size as the contents of the table!"; for (int i = 0; i < rowCount; ++i) { com.google.gwt.dom.client.Element element = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowElement(i); assert element != null : "element shouldn't be null if errors is the same size as the contents of the table!"; java.lang.String error = errors.get(i); boolean valid = org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(error); if (!valid) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(error), element); element.addClassName(style.invalidRow()); } else { element.removeClassName(style.invalidRow()); } } }
@java.lang.Override public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.Boolean value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.Boolean> valueUpdater) { if (tooltipContent == null) { tooltipContent = getTooltip(value); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.handleTooltipEvent(parent, tooltipContent, event); super.onBrowserEvent(context, parent, value, event, valueUpdater); }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip(java.lang.Boolean value) { return tooltip; }

@java.lang.Override public java.util.Set<java.lang.String> getConsumedEvents() { java.util.Set<java.lang.String> set = new java.util.HashSet<>(); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipsEvents(set); set.add(BrowserEvents.CHANGE); set.add(BrowserEvents.KEYDOWN); set.add(BrowserEvents.MOUSEMOVE); return set; }
private void updateKeyTitle(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) { java.lang.String selectedKey = object.getKeys().getSelectedItem(); if (selectedKey != null) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(selectedKey), keyField.getElement()); } }
@java.lang.Override public void setTooltip(com.google.gwt.safehtml.shared.SafeHtml tooltip, org.gwtbootstrap3.client.ui.constants.Placement placement) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, getElement(), placement); }
@java.lang.Override public void setTooltip(com.google.gwt.safehtml.shared.SafeHtml tooltip) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, getElement()); }
public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element elem, final T object, com.google.gwt.dom.client.NativeEvent event) { final int index = context.getIndex(); com.google.gwt.cell.client.ValueUpdater<C> valueUpdater = ((org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getFieldUpdater()) == null) ? null : new com.google.gwt.cell.client.ValueUpdater<C>() { @java.lang.Override public void update(C value) { getFieldUpdater().update(index, object, value); } }; getCell().onBrowserEvent(context, elem, org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getValue(object), getTooltip(object), event, valueUpdater); }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { if (tooltipContent == null) { tooltipContent = getTooltip(value); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.handleTooltipEvent(parent, tooltipContent, event); super.onBrowserEvent(context, parent, value, event, valueUpdater); }
@java.lang.Override public final void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { onBrowserEvent(context, parent, value, null, event, valueUpdater); }
public void setText(com.google.gwt.safehtml.shared.SafeHtml text) { setTooltipText(text.asString()); tooltip.reconfigure(); }



@java.lang.Override public java.util.Set<java.lang.String> getConsumedEvents() { java.util.Set<java.lang.String> set = new java.util.HashSet<>(); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipsEvents(set); set.addAll(super.getConsumedEvents()); return set; }

void attachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().add(alertPanel); com.google.gwt.dom.client.Element messageDivElement = alertPanel.getMessageAt(0).getElement(); if (org.ovirt.engine.ui.common.utils.ElementUtils.detectHorizontalOverflow(messageDivElement)) { com.google.gwt.safehtml.shared.SafeHtml tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(messageDivElement.getInnerText()); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltipContent, alertPanel.getElement(), Placement.BOTTOM); } }
private void updateBadge() { badge.setVisible(((count) != 1)); badgeText.setText(java.lang.String.valueOf(count)); if (badge.isVisible()) { com.google.gwt.safehtml.shared.SafeHtmlBuilder builder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); for (com.google.gwt.safehtml.shared.SafeHtml message : messagesList) { builder.append(message); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.updateTooltipContent(builder.toSafeHtml(), getElement()); } }

public void setMaxWidth(org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.Width width) { addTooltipClassName(width.getWidthClass()); }






@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.FencingPolicy.class, to = org.ovirt.engine.api.model.FencingPolicy.class) public static org.ovirt.engine.api.model.FencingPolicy map(org.ovirt.engine.api.model.FencingPolicy model, org.ovirt.engine.core.common.businessentities.FencingPolicy template) { org.ovirt.engine.core.common.businessentities.FencingPolicy entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.FencingPolicy(); entity.setFencingEnabled(model.isEnabled()); if (model.isSetSkipIfSdActive()) { entity.setSkipFencingIfSDActive(model.getSkipIfSdActive().isEnabled()); } if (model.isSetSkipIfConnectivityBroken()) { entity.setSkipFencingIfConnectivityBroken(model.getSkipIfConnectivityBroken().isEnabled()); if ((model.getSkipIfConnectivityBroken().getThreshold()) != null) { entity.setHostsWithBrokenConnectivityThreshold(model.getSkipIfConnectivityBroken().getThreshold()); } else { entity.setHostsWithBrokenConnectivityThreshold(50); } } return entity; }
@java.lang.Override protected boolean validate() { setStoragePoolId(getVm().getStoragePoolId()); if ((((!(isValidParametersList())) || (!(checkImagesStatus()))) || (!(validateSpaceRequirements()))) || (!(performVmRelatedChecks()))) { return false; } for (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getParametersList()) { org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getReturnValue().setValid((((((isDiskNotShareable(parameters.getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(parameters.getImageId()))) && (isTemplateInDestStorageDomain(parameters.getImageId(), parameters.getTargetStorageDomainId()))) && (performStorageDomainsChecks(parameters))) && (isSameSourceAndDest(parameters)))); if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getReturnValue().isValid())) { return false; } } if (!(setAndValidateDiskProfiles())) { return false; } return true; }
private void initSpyCommand() { doReturn(true).when(command).validateSpaceRequirements(); doReturn(true).when(command).checkImagesStatus(); doReturn(true).when(command).setAndValidateDiskProfiles(); }










@java.lang.Override protected void executeCommand() { log.info("Creating ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getParameters().getUploadSize()); imageTransferDao.save(entity); log.info("Creating {} image", getUploadType()); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getParameters().getImageId())) { createImage(); } else { handleImageIsReadyForUpload(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.setSucceeded(true); }



protected java.lang.String getTransferDescription() { return java.lang.String.format("%s '%s' (id '%s')", getImageType(), getImageAlias(), getImageIdNullSafe()); }

@java.lang.Override protected boolean validate() { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(imageId))) { return validateImageTransfer(imageId); } else { return validateCreateImage(); } }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.ImageTransfer imageTransfer) { org.ovirt.engine.core.common.action.TransferDiskImageParameters params = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(); params.setImageId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(imageTransfer.getImage().getId())); params.setKeepaliveInterval(ConfigurationValues.UploadImageUiInactivityTimeoutInSeconds.getValue()); return performCreate(VdcActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }

@java.lang.Override protected void executeCommand() { log.info("Creating ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); log.info("Creating {} image", getImageType()); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())) { createImage(); } else { handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> getOvfEntityList(org.ovirt.engine.core.common.businessentities.VmEntityType vmEntityType) { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = org.ovirt.engine.core.bll.storage.domain.GetUnregisteredEntitiesQuery.getDbFacade().getUnregisteredOVFDataDao().getAllForStorageDomainByEntityType(org.ovirt.engine.core.bll.storage.domain.GetUnregisteredEntitiesQuery.getParameters().getId(), vmEntityType); return entityList; }
private static org.ovirt.vdsm.jsonrpc.client.JsonRpcClient createClient(java.lang.String hostname, int port, org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy connectionPolicy, org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy clientPolicy, boolean isSecure, org.ovirt.vdsm.jsonrpc.client.reactors.ReactorType type, java.lang.String protocol, int parallelism) { org.ovirt.vdsm.jsonrpc.client.reactors.ManagerProvider provider = null; if (isSecure) { provider = new org.ovirt.engine.core.vdsbroker.jsonrpc.EngineManagerProvider(protocol); } try { final org.ovirt.vdsm.jsonrpc.client.reactors.Reactor reactor = org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.getReactor(provider, type); return org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.getJsonClient(reactor, hostname, port, connectionPolicy, clientPolicy, parallelism); } catch (org.ovirt.vdsm.jsonrpc.client.ClientConnectionException e) { org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.log.error("Exception occured during building ssl context or obtaining selector", e); throw new java.lang.IllegalStateException(e); } }
private boolean executeSshReboot(java.lang.String version) { try (final org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient();final java.io.ByteArrayOutputStream cmdOut = new java.io.ByteArrayOutputStream();final java.io.ByteArrayOutputStream cmdErr = new java.io.ByteArrayOutputStream()) { try { log.info("Opening SSH reboot session on host {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName()); sshClient.setVds(org.ovirt.engine.core.bll.SshHostRebootCommand.getVds()); sshClient.useDefaultKeyPair(); sshClient.connect(); sshClient.authenticate(); log.info("Executing SSH reboot command on host {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName()); sshClient.executeCommand(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SshHostRebootCommand, version), null, cmdOut, cmdErr); return true; } catch (java.lang.Exception ex) { log.error("SSH reboot command failed on host \'{}\': {}\nStdout: {}\nStderr: {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName(), ex.getMessage(), cmdOut, cmdErr); log.debug("Exception", ex); } } catch (java.io.IOException e) { log.error("IOException", e); } return false; }
private boolean executeSshPowerDown(java.lang.String version) { boolean ret = false; try (final org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient();final java.io.ByteArrayOutputStream cmdOut = new java.io.ByteArrayOutputStream();final java.io.ByteArrayOutputStream cmdErr = new java.io.ByteArrayOutputStream()) { try { log.info("Opening SSH power down session on host {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName()); sshClient.setVds(org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds()); sshClient.useDefaultKeyPair(); sshClient.connect(); sshClient.authenticate(); log.info("Executing SSH power down command on host {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName()); sshClient.executeCommand(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SshVdsPowerdownCommand, version), null, cmdOut, cmdErr); ret = true; } catch (java.lang.Exception ex) { log.error("SSH power down command failed on host \'{}\': {}\nStdout: {}\nStderr: {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName(), ex.getMessage(), cmdOut, cmdErr); log.debug("Exception", ex); } } catch (java.io.IOException e) { log.error("IOException", e); } return ret; }
private void cloneStructureNotCollapsed() { org.ovirt.engine.core.common.action.CloneImageGroupVolumesStructureCommandParameters p = new org.ovirt.engine.core.common.action.CloneImageGroupVolumesStructureCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getSrcDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getDestDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getDestinationFormat(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getActionType(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters()); p.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters()); p.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getActionType()); p.setEndProcedure(EndProcedure.COMMAND_MANAGED); runInternalAction(VdcActionType.CloneImageGroupVolumesStructure, p); }

public org.ovirt.engine.core.common.job.Step addStep(org.ovirt.engine.core.bll.job.ExecutionContext context, org.ovirt.engine.core.common.job.StepEnum stepName, java.lang.String description, boolean isExternal) { if (context == null) { return null; } org.ovirt.engine.core.common.job.Step step = null; if (context.isMonitored()) { if (description == null) { description = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.getInstance().getStepMessage(stepName); } try { org.ovirt.engine.core.common.job.Job job = context.getJob(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsJob)) && (job != null)) { step = job.addStep(stepName, description); try { step.setExternal(isExternal); jobRepository.saveStep(step); } catch (java.lang.Exception e) { log.error("Failed to save new step '{}' for job '{}', '{}': {}", stepName.name(), job.getId(), job.getActionType().name(), e.getMessage()); log.debug("Exception", e); job.getSteps().remove(step); step = null; } } else { org.ovirt.engine.core.common.job.Step contextStep = context.getStep(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsStep)) && (contextStep != null)) { step = addSubStep(contextStep, stepName, description); step.setExternal(isExternal); } } } catch (java.lang.Exception e) { log.error("Exception", e); } } return step; }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = diskImageDao.getAllSnapshotsForImageGroup(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID()); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.sortImageList(images); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().setImageIds(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDiskImageIds(images)); persistCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getParentCommand(), ((getCallback()) != null)); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.setSucceeded(true); }
private void copyVolumeData(org.ovirt.engine.core.compat.Guid image) { org.ovirt.engine.core.common.action.CopyDataCommandParameters parameters = new org.ovirt.engine.core.common.action.CopyDataCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getStoragePoolId(), buildImageLocationInfo(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getSrcDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID(), image), buildImageLocationInfo(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getDestDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID(), image), false); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters()); runInternalActionWithTasksContext(VdcActionType.CopyData, parameters); }
public org.ovirt.engine.core.common.job.Step addTaskStep(org.ovirt.engine.core.bll.job.ExecutionContext context, org.ovirt.engine.core.common.job.StepEnum stepName, java.lang.String description) { if (context == null) { return null; } org.ovirt.engine.core.common.job.Step step = null; if (context.isTasksMonitored()) { org.ovirt.engine.core.common.job.Step parentTaskStep = context.getParentTasksStep(); if (parentTaskStep != null) { step = addSubStep(parentTaskStep, stepName, description); } } return step; }
private org.ovirt.engine.core.common.job.Step addSubStep(org.ovirt.engine.core.common.job.Step parentStep, org.ovirt.engine.core.common.job.StepEnum stepName, java.lang.String description) { org.ovirt.engine.core.common.job.Step step = null; if (parentStep != null) { if (description == null) { description = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.getInstance().getStepMessage(stepName); } step = parentStep.addStep(stepName, description); try { jobRepository.saveStep(step); } catch (java.lang.Exception e) { log.error("Failed to save new step '{}' for step '{}', '{}': {}", stepName.name(), parentStep.getId(), parentStep.getStepType().name(), e.getMessage()); log.debug("Exception", e); parentStep.getSteps().remove(step); step = null; } } return step; }


public org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand, java.lang.String description, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType> entitiesMap) { org.ovirt.engine.core.common.job.Step taskStep = org.ovirt.engine.core.bll.job.ExecutionHandler.getInstance().addTaskStep(command.getExecutionContext(), org.ovirt.engine.core.common.job.StepEnum.getStepNameByTaskType(asyncTaskCreationInfo.getTaskType()), description); if (taskStep != null) { asyncTaskCreationInfo.setStepId(taskStep.getId()); } org.ovirt.engine.core.bll.tasks.SPMAsyncTask task = concreteCreateTask(taskId, command, asyncTaskCreationInfo, parentCommand); task.setEntitiesMap(entitiesMap); org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.addOrUpdateTaskInDB(task); getAsyncTaskManager().lockAndAddTaskToManager(task); org.ovirt.engine.core.compat.Guid vdsmTaskId = task.getVdsmTaskId(); org.ovirt.engine.core.bll.job.ExecutionHandler.getInstance().updateStepExternalId(taskStep, vdsmTaskId, ExternalSystemType.VDSM); return vdsmTaskId; }
private void handleCommandStepAndEntities() { if ((getCommandStep()) != null) { org.ovirt.engine.core.common.job.Step taskStep = executionHandler.addTaskStep(getExecutionContext(), getCommandStep(), null); if (taskStep != null) { getExecutionContext().setStep(taskStep); persistCommandIfNeeded(); subjectEntityDao.saveAll(getCommandStepSubjectEntities()); } } }



private org.ovirt.engine.core.common.businessentities.aaa.DbUser buildUser(T params, java.lang.String authzName) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = dbUserDao.getByExternalId(authzName, params.getPrincipalId()); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = new org.ovirt.engine.core.common.businessentities.aaa.DbUser(); user.setId((dbUser == null ? org.ovirt.engine.core.compat.Guid.newGuid() : dbUser.getId())); user.setExternalId(params.getPrincipalId()); user.setDomain(authzName); user.setEmail(params.getEmail()); user.setLoginName(params.getPrincipalName()); java.util.List<org.ovirt.engine.core.compat.Guid> groupIds = new java.util.ArrayList<>(); java.util.List<java.lang.String> groupRecordIds = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.aaa.CreateUserSessionCommand.flatGroups(((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (params.getGroupIds())), groupRecordIds); for (java.lang.String groupId : groupRecordIds) { org.ovirt.engine.core.common.businessentities.aaa.DbGroup dbGroup = dbGroupDao.getByExternalId(authzName, groupId); if (dbGroup != null) { groupIds.add(dbGroup.getId()); } } user.setGroupIds(groupIds); if (dbUser == null) { dbUserDao.save(user); } else if (!(dbUser.equals(user))) { dbUserDao.update(user); } return user; }

@java.lang.Override public boolean isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = backendInternal.runInternalQuery(VdcQueryType.GetoVirtISOs, new org.ovirt.engine.core.common.queries.IdQueryParameters(host.getId())); java.util.List<org.ovirt.engine.core.compat.RpmVersion> isos = returnValue.getReturnValue(); boolean updateAvailable = org.ovirt.engine.core.common.utils.RpmVersionUtils.isUpdateAvailable(isos, host.getHostOs()); if (updateAvailable) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLog = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLog.setVds(host); auditLogDirector.log(auditLog, AuditLogType.OVIRT_NODE_UPDATES_ARE_AVAILABLE); } return updateAvailable; }
boolean isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host);

public boolean isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { return create(host.getVdsType()).isUpdateAvailable(host); }




@java.lang.Override public boolean isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { return availableUpdatesFinder.isUpdateAvailable(host); }

@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", getLUNId()).append("physicalVolumeId", getPhysicalVolumeId()).append("volumeGroupId", getVolumeGroupId()).append("serial", getSerial()).append("lunMapping", getLunMapping()).append("vendorId", getVendorId()).append("productId", getProductId()).append("lunConnections", getLunConnections()).append("deviceSize", getDeviceSize()).append("pvSize", getPvSize()).append("vendorName", getVendorName()).append("pathsDictionary", getPathsDictionary()).append("pathsCapacity", getPathsCapacity()).append("lunType", getLunType()).append("status", getStatus()).append("diskId", getDiskId()).append("diskAlias", getDiskAlias()).append("storageDomainId", getStorageDomainId()).append("storageDomainName", getStorageDomainName()).build(); }




@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.storage.LUNs)) { return false; } org.ovirt.engine.core.common.businessentities.storage.LUNs other = ((org.ovirt.engine.core.common.businessentities.storage.LUNs) (obj)); return ((((((((((((((((((java.util.Objects.equals(id, other.id)) && (java.util.Objects.equals(_lunConnections, other._lunConnections))) && (java.util.Objects.equals(lunMapping, other.lunMapping))) && (java.util.Objects.equals(physicalVolumeId, other.physicalVolumeId))) && ((deviceSize) == (other.deviceSize))) && ((pvSize) == (other.pvSize))) && ((lunType) == (other.lunType))) && (java.util.Objects.equals(pathsDictionary, other.pathsDictionary))) && (java.util.Objects.equals(pathsCapacity, other.pathsCapacity))) && (java.util.Objects.equals(vendorName, other.vendorName))) && (java.util.Objects.equals(productId, other.productId))) && (java.util.Objects.equals(serial, other.serial))) && (java.util.Objects.equals(vendorId, other.vendorId))) && (java.util.Objects.equals(volumeGroupId, other.volumeGroupId))) && (java.util.Objects.equals(status, other.status))) && (java.util.Objects.equals(diskId, other.diskId))) && (java.util.Objects.equals(diskAlias, other.diskAlias))) && (java.util.Objects.equals(storageDomainId, other.storageDomainId))) && (java.util.Objects.equals(storageDomainName, other.storageDomainName)); }

@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("lun_id", lun.getLUNId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getLunMapping()).addValue("vendor_id", lun.getVendorId()).addValue("product_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize()); getCallsHandler().executeModification("InsertLUNs", parameterSource); }

@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { return createIdParameterMapper(lun.getId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getLunMapping()).addValue("vendor_id", lun.getVendorId()).addValue("product_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize()); }
protected java.util.Map<java.util.function.Consumer<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDbMap = lunsFromDb.stream().collect(java.util.stream.Collectors.toMap(LUNs::getLUNId, java.util.function.Function.identity())); return lunsFromVgInfo.stream().collect(java.util.stream.Collectors.groupingBy(( lunFromVgInfo) -> { org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDb = lunsFromDbMap.get(lunFromVgInfo.getLUNId()); if (lunFromDb == null) { return saveNewLuns; } boolean lunFromDbHasSamePvId = java.util.Objects.equals(lunFromDb.getPhysicalVolumeId(), lunFromVgInfo.getPhysicalVolumeId()); if (lunFromDbHasSamePvId) { if ((lunFromDb.getDeviceSize()) != (lunFromVgInfo.getDeviceSize())) { return updateExistingLuns; } return noOp; } return updateExistingLuns; })); }


@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("lun_id", lun.getLUNId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getLunMapping()).addValue("vendor_id", lun.getVendorId()).addValue("product_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize()); getCallsHandler().executeModification("UpdateLUNs", parameterSource); }

public static boolean needsAlert(org.ovirt.engine.core.common.businessentities.VM vm) { return (((org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasDifferentTimezone(vm)) || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasDifferentOSType(vm))) || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.isUpdateNeeded(vm))) || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasPauseError(vm)); }
public void setVdsNumaNodeList(java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>>> vdsNumaNodeList) { this.vdsNumaNodeList = vdsNumaNodeList; }
public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>>> getVdsNumaNodeList() { return vdsNumaNodeList; }
private static org.ovirt.engine.core.bll.ValidationResult checkNumaPreferredTuneMode(org.ovirt.engine.core.common.businessentities.NumaTuneMode numaTuneMode, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) { if (numaTuneMode != (org.ovirt.engine.core.common.businessentities.NumaTuneMode.PREFERRED)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((vmNumaNodes.size()) == 1) { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>>> vdsNumaNodeList = vmNumaNodes.get(0).getVdsNumaNodeList(); boolean pinnedToSingleNode = (((vdsNumaNodeList != null) && ((vdsNumaNodeList.size()) == 1)) && ((vdsNumaNodeList.get(0).getSecond()) != null)) && (vdsNumaNodeList.get(0).getSecond().getFirst()); if (pinnedToSingleNode) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_PREFERRED_NOT_PINNED_TO_SINGLE_NODE); }
private java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>>>> getAllVmNumaNodePinInfo() { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>>>> numaNodesAssign = getCallsHandler().executeReadList("GetAllAssignedNumaNodeInfomation", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeAssignmentRowMapper, null); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>>>> vmNumaNodesPinMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>>> pair : numaNodesAssign) { if (!(vmNumaNodesPinMap.containsKey(pair.getFirst()))) { vmNumaNodesPinMap.put(pair.getFirst(), new java.util.ArrayList()); } vmNumaNodesPinMap.get(pair.getFirst()).add(pair.getSecond()); } return vmNumaNodesPinMap; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode>> getVmNumaNodeInfoByClusterId(org.ovirt.engine.core.compat.Guid cluster) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cluster_id", cluster); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode>> vmNumaNodes = getCallsHandler().executeReadList("GetVmNumaNodeByCluster", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeInfoWithClusterRowMapper, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.Integer>> numaNodesCpusMap = getAllNumaNodeCpuMap(); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>>>> vmNumaNodesPinMap = getAllVmNumaNodePinInfo(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode> pair : vmNumaNodes) { if (numaNodesCpusMap.containsKey(pair.getSecond().getId())) { pair.getSecond().setCpuIds(numaNodesCpusMap.get(pair.getSecond().getId())); } if (vmNumaNodesPinMap.containsKey(pair.getSecond().getId())) { pair.getSecond().setVdsNumaNodeList(vmNumaNodesPinMap.get(pair.getSecond().getId())); } } return vmNumaNodes; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> getAllVmNumaNodeByVmId(org.ovirt.engine.core.compat.Guid vmId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_id", vmId); java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = getCallsHandler().executeReadList("GetNumaNodeByVmId", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeCpuRowMapper, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>>>> vmNumaNodesPinMap = getAllVmNumaNodePinInfo(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { if (vmNumaNodesPinMap.containsKey(node.getId())) { node.setVdsNumaNodeList(vmNumaNodesPinMap.get(node.getId())); } } return vmNumaNodes; }
public static org.ovirt.engine.core.common.businessentities.VmNumaNode createVmNumaNode(int index, java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> vdsNumaNodes) { org.ovirt.engine.core.common.businessentities.VmNumaNode numaNode = org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode(index); final java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>>> numaPinning = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VdsNumaNode vdsNumaNode : vdsNumaNodes) { numaPinning.add(org.ovirt.engine.core.bll.utils.NumaTestUtils.toWeirdPair(vdsNumaNode)); } numaNode.setVdsNumaNodeList(numaPinning); return numaNode; }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createVnodeToPnodeParametersMapper(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>> pNode, org.ovirt.engine.core.compat.Guid vNodeId) { return org.ovirt.engine.core.dao.NumaNodeDaoImpl.getCustomMapSqlParameterSource().addValue("id", org.ovirt.engine.core.compat.Guid.newGuid()).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_id", pNode.getFirst()).addValue("vds_numa_node_index", pNode.getSecond().getSecond()).addValue("is_pinned", pNode.getSecond().getFirst()); }
private static java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> createTestVmNumaNodes() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> newVmNodes = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VmNumaNode newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.generateCpuList(0, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(0); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(new org.ovirt.engine.core.common.utils.Pair(org.ovirt.engine.core.compat.Guid.newGuid(), new org.ovirt.engine.core.common.utils.Pair(true, 0))); newVmNodes.add(newVmNumaNode); newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.generateCpuList(4, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(1); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(new org.ovirt.engine.core.common.utils.Pair(org.ovirt.engine.core.compat.Guid.newGuid(), new org.ovirt.engine.core.common.utils.Pair(true, 1))); newVmNodes.add(newVmNumaNode); return newVmNodes; }
private boolean isVmNumaPinned(java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes) { if ((nodes == null) || (nodes.isEmpty())) { return false; } for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : nodes) { for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>> pair : vmNumaNode.getVdsNumaNodeList()) { if (((pair.getSecond()) != null) && (pair.getSecond().getFirst())) { return true; } } } return false; }
@org.junit.Test public void shouldDetectMissingPinningEntry() { vm.getvNumaNodeList().get(0).getVdsNumaNodeList().get(0).getSecond().setSecond(null); assertValidationFailure(org.ovirt.engine.core.bll.numa.vm.NumaValidator.checkVmNumaNodesIntegrity(vm, vm.getvNumaNodeList()), EngineMessage.VM_NUMA_NODE_PINNED_INDEX_ERROR); }
public org.ovirt.engine.core.common.businessentities.VmNumaNode toVmNumaNode() { final org.ovirt.engine.core.common.businessentities.VmNumaNode newNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newNode.setIndex(vmNumaNode.getIndex()); newNode.setId(vmNumaNode.getId()); newNode.setMemTotal(vmNumaNode.getMemTotal()); if (isPinned()) { newNode.setVdsNumaNodeList(java.util.Arrays.asList(new org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>>(null, new org.ovirt.engine.core.common.utils.Pair(pinned, hostNodeIndex)))); } return newNode; }
private boolean canVmNumaPinnedToVds(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes, org.ovirt.engine.core.common.businessentities.VDS vds) { java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> pNodes = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsNumaNodeDao().getAllVdsNumaNodeByVdsId(vds.getId()); if ((pNodes == null) || (pNodes.isEmpty())) { return false; } java.util.Map<java.lang.Integer, org.ovirt.engine.core.common.businessentities.VdsNumaNode> indexMap = toMap(pNodes); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vNode : nodes) { for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>> pair : vNode.getVdsNumaNodeList()) { if (((pair.getSecond()) != null) && (pair.getSecond().getFirst())) { if ((vNode.getMemTotal()) > (indexMap.get(pair.getSecond().getSecond()).getNumaNodeStatistics().getMemFree())) { return false; } } } } return true; }
@org.junit.Test public void testGetAllVmNumaNodeByVmId() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> result = vmNumaNodeDao.getAllVmNumaNodeByVmId(existingVm.getId()); assertNotNull(result); assertEquals(2, result.size()); org.ovirt.engine.core.compat.Guid vmNumaNode1 = new org.ovirt.engine.core.compat.Guid("3c2b81e6-5080-4ad1-86a1-cf513b15b517"); org.ovirt.engine.core.compat.Guid vmNumaNode2 = new org.ovirt.engine.core.compat.Guid("3c2b81e6-5080-4ad1-86a1-cf513b15b518"); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes = new java.util.HashMap<>(2); nodes.put(result.get(0).getId(), result.get(0)); nodes.put(result.get(1).getId(), result.get(1)); assertTrue(nodes.containsKey(vmNumaNode1)); assertTrue(nodes.containsKey(vmNumaNode2)); assertEquals(2, nodes.get(vmNumaNode1).getVdsNumaNodeList().size()); assertEquals(true, nodes.get(vmNumaNode1).getVdsNumaNodeList().get(0).getSecond().getFirst()); assertEquals(true, nodes.get(vmNumaNode1).getVdsNumaNodeList().get(1).getSecond().getFirst()); assertEquals(1, nodes.get(vmNumaNode2).getVdsNumaNodeList().size()); assertEquals(false, nodes.get(vmNumaNode2).getVdsNumaNodeList().get(0).getSecond().getFirst()); assertEquals(0, nodes.get(vmNumaNode2).getVdsNumaNodeList().get(0).getSecond().getSecond().intValue()); }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.getParameters().getVmNumaNodeList(); java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> vdsNumaNodes = org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.getVdsNumaNodes(); java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : vmNumaNodes) { for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>> pair : vmNumaNode.getVdsNumaNodeList()) { if (((pair.getSecond()) != null) && (pair.getSecond().getFirst())) { int index = pair.getSecond().getSecond(); for (org.ovirt.engine.core.common.businessentities.VdsNumaNode vdsNumaNode : vdsNumaNodes) { if ((vdsNumaNode.getIndex()) == index) { pair.setFirst(vdsNumaNode.getId()); break; } } } } nodes.add(vmNumaNode); } org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.getVmNumaNodeDao().massUpdateNumaNode(nodes); org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.setSucceeded(true); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> filterVmsInClusterNeedUpdate() { return vmStaticDao.getAllByCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()).stream().filter(( vm) -> ((vm.getOrigin()) != OriginType.EXTERNAL) && (!(vm.isHostedEngine()))).filter(( vm) -> (vm.getCustomCompatibilityVersion()) == null).sorted().collect(java.util.stream.Collectors.toList()); }


@java.lang.Override protected void init() { org.ovirt.engine.core.bll.UpdateClusterCommand.updateMigrateOnError(); oldCluster = clusterDao.get(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()); if (((oldCluster) != null) && (!(java.util.Objects.equals(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion())))) { vmsLockedForUpdate = filterVmsInClusterNeedUpdate(); } }





@org.junit.Test public void testSave() { org.ovirt.engine.core.common.businessentities.storage.DiskImage newImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); newImage.setImageId(org.ovirt.engine.core.compat.Guid.newGuid()); newImage.setVolumeFormat(VolumeFormat.COW); newImage.setVolumeType(VolumeType.Sparse); newImage.setActive(true); newImage.setImageTemplateId(org.ovirt.engine.core.dao.DiskImageDynamicDaoTest.EXISTING_IMAGE_DISK_TEMPLATE); newImage.setId(org.ovirt.engine.core.compat.Guid.newGuid()); imageDao.save(newImage.getImage()); diskDao.save(newImage); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic dynamic = createDiskImageDynamic(newImage.getImageId()); dao.save(createDiskImageDynamic(newImage.getImageId())); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic result = dao.get(dynamic.getId()); assertNotNull(result); assertEquals(dynamic, result); }

@java.lang.Override public void saveUnregisteredDisk(org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk disk) { getCallsHandler().executeModification("InsertUnregisteredDisk", getCustomMapSqlParameterSource().addValue("disk_id", disk.getDiskImage().getId()).addValue("image_id", disk.getDiskImage().getImageId()).addValue("disk_alias", disk.getDiskImage().getDiskAlias()).addValue("disk_description", disk.getDiskImage().getDiskDescription()).addValue("creation_date", disk.getDiskImage().getCreationDate()).addValue("last_modified", disk.getDiskImage().getLastModified()).addValue("volume_type", disk.getDiskImage().getVolumeType()).addValue("volume_format", disk.getDiskImage().getVolumeFormat()).addValue("actual_size", disk.getDiskImage().getActualSize()).addValue("size", disk.getDiskImage().getSize()).addValue("storage_domain_id", disk.getDiskImage().getStorageIds().get(0))); for (org.ovirt.engine.core.common.businessentities.VmBase vmBase : disk.getVms()) { getCallsHandler().executeModification("InsertUnregisteredDisksToVms", getCustomMapSqlParameterSource().addValue("disk_id", disk.getDiskImage().getId()).addValue("entity_id", vmBase.getId()).addValue("entity_name", vmBase.getName()).addValue("storage_domain_id", disk.getDiskImage().getStorageIds().get(0))); } }
@javax.ws.rs.Path("{action: (activate|approve|commitnetconfig|deactivate|enrollcertificate|fence|forceselectspm|install|iscsidiscover|iscsilogin|refresh|setupnetworks|unregisteredstoragedomainsdiscover|upgrade)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
public java.lang.String exportVm(org.ovirt.engine.core.common.businessentities.VM vm, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, org.ovirt.engine.core.compat.Version version) { return new org.ovirt.engine.core.utils.ovf.OvfVmWriter(vm, images, version).build().getStringRepresentation(); }

protected static org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, boolean shouldPrepareAndTeardown) { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); if (shouldPrepareAndTeardown) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); if (shouldPrepareAndTeardown) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } return qemuImageInfo; }
public static java.util.Map<java.lang.String, java.lang.Object> buildVmNumatuneSetting(org.ovirt.engine.core.common.businessentities.NumaTuneMode numaTuneMode, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) { java.util.Map<java.lang.String, java.lang.Object> createNumaTune = new java.util.HashMap<>(2); java.util.Set<java.lang.Integer> vmNumaNodePinInfo = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { if (!(node.getVdsNumaNodeList().isEmpty())) { vmNumaNodePinInfo.addAll(node.getVdsNumaNodeList()); } } if (!(vmNumaNodePinInfo.isEmpty())) { createNumaTune.put(VdsProperties.NUMA_TUNE_NODESET, org.ovirt.engine.core.utils.NumaUtils.buildStringFromListForNuma(vmNumaNodePinInfo)); createNumaTune.put(VdsProperties.NUMA_TUNE_MODE, numaTuneMode.getValue()); } return createNumaTune; }
@org.junit.Test public void testBuildVmNumatuneSetting() throws java.lang.Exception { java.util.Map<java.lang.String, java.lang.Object> numaTune = org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactory.buildVmNumatuneSetting(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.numaTuneMode, org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes); assertEquals(2, numaTune.size()); assertTrue(numaTune.containsKey(VdsProperties.NUMA_TUNE_MODE)); assertEquals(NumaTuneMode.INTERLEAVE.getValue(), numaTune.get(VdsProperties.NUMA_TUNE_MODE)); assertTrue(numaTune.containsKey(VdsProperties.NUMA_TUNE_NODESET)); assertEquals("0,1", numaTune.get(VdsProperties.NUMA_TUNE_NODESET)); }
@org.junit.Test public void canSetNumaPinning() { newNumaNodes = java.util.Collections.singletonList(createVmNumaNode(1, vdsNumaNodes)); final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class)); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromParams() { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class)); }
@java.lang.Override public java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode>> getVmNumaNodeInfoByClusterIdAsMap(org.ovirt.engine.core.compat.Guid vdsGroupId) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode>> map = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode> pair : getVmNumaNodeInfoByClusterId(vdsGroupId)) { if (!(map.containsKey(pair.getFirst()))) { map.put(pair.getFirst(), new java.util.ArrayList()); } map.get(pair.getFirst()).add(pair.getSecond()); } return map; }
@org.junit.Test public void canSetNumaPinning() { newNumaNodes = java.util.Collections.singletonList(createVmNumaNode(1, vdsNumaNodes)); final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class)); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromDb() { final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromDb(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class)); }
@java.lang.Override protected void executeCommand() { if (!(oldNumaNodeIds.isEmpty())) { org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVmNumaNodeDao().massRemoveNumaNodeByNumaNodeId(oldNumaNodeIds); } java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getParameters().getVmNumaNodeList(); vmNumaNodes.stream().forEach(( node) -> node.setId(org.ovirt.engine.core.compat.Guid.newGuid())); org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVmNumaNodeDao().massSaveNumaNode(vmNumaNodes, null, org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVm().getId()); org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getParameters().getVmNumaNodeList(); vmNumaNodes.stream().forEach(( node) -> node.setId(org.ovirt.engine.core.compat.Guid.newGuid())); org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getVmNumaNodeDao().massSaveNumaNode(vmNumaNodes, null, org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getVm().getId()); setActionReturnValue(vmNumaNodes.get(0).getId()); org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.setSucceeded(true); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromParams() { final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class)); }
private void populateVMNUMAInfo(final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode>> numaNodes = getVmNumaNodeDao().getVmNumaNodeInfoByClusterIdAsMap(org.ovirt.engine.core.bll.ClusterOperationCommandBase.getClusterId()); for (final org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (numaNodes.containsKey(vm.getId())) { vm.setvNumaNodeList(numaNodes.get(vm.getId())); } } }
@org.junit.Test public void canSetNumaConfigurationWithVmFromDb() { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromDb(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class)); }
protected void updateRngDevice(org.ovirt.engine.core.compat.Guid templateId) { if (!(getModel().getIsRngEnabled().getIsChangable())) { return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetRngDevice, new org.ovirt.engine.core.common.queries.IdQueryParameters(templateId), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> devs = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(devs.isEmpty()))); getModel().setRngDevice((devs.isEmpty() ? new org.ovirt.engine.core.common.businessentities.VmRngDevice() : devs.get(0))); } })); }
@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> devs = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(devs.isEmpty()))); getModel().setRngDevice((devs.isEmpty() ? new org.ovirt.engine.core.common.businessentities.VmRngDevice() : devs.get(0))); }
@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { deactivate(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); getModel().setRngDevice(rngDevice); } activate(); updateVirtioScsi(vmBase); }


private void applyUserChanges(org.ovirt.engine.core.common.businessentities.storage.Disk diskToUpdate, org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dveToUpdate) { updateSnapshotIdOnShareableChange(diskToUpdate, getNewDisk()); diskToUpdate.setPropagateErrors(getNewDisk().getPropagateErrors()); diskToUpdate.setWipeAfterDelete(getNewDisk().isWipeAfterDelete()); diskToUpdate.setDiskAlias(getNewDisk().getDiskAlias()); diskToUpdate.setDiskDescription(getNewDisk().getDiskDescription()); diskToUpdate.setShareable(getNewDisk().isShareable()); diskToUpdate.setReadOnly(getNewDisk().getReadOnly()); diskToUpdate.setSgio(getNewDisk().getSgio()); dveToUpdate.setBoot(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isBoot()); dveToUpdate.setDiskInterface(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().getDiskInterface()); }




@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass()) != (o.getClass()))) { return false; } org.ovirt.engine.core.common.businessentities.storage.DiskVmElement that = ((org.ovirt.engine.core.common.businessentities.storage.DiskVmElement) (o)); return (((boot) == (that.boot)) && ((diskInterface) == (that.diskInterface))) && ((id) != null) ? id.equals(that.id) : (that.id) == null; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, boot, diskInterface); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement entity) { return createIdParameterMapper(entity.getId()).addValue("is_boot", entity.isBoot()).addValue("disk_interface", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getDiskInterface())); }



private void mockDiskValidator() { doReturn(diskValidator).when(command).getDiskValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class)); when(diskValidator.isReadOnlyPropertyCompatibleWithInterface(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class))).thenReturn(ValidationResult.VALID); when(diskValidator.isVirtIoScsiValid(any(org.ovirt.engine.core.common.businessentities.VM.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class))).thenReturn(ValidationResult.VALID); when(diskValidator.isDiskInterfaceSupported(any(org.ovirt.engine.core.common.businessentities.VM.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class))).thenReturn(ValidationResult.VALID); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Disk disk) { org.ovirt.engine.api.model.DiskAttachment diskAttachment = new org.ovirt.engine.api.model.DiskAttachment(); if (disk.isSetBootable()) { diskAttachment.setBootable(disk.isBootable()); } else { diskAttachment.setBootable(false); } if (disk.isSetInterface()) { diskAttachment.setInterface(disk.getInterface()); } else { diskAttachment.setInterface(DiskInterface.VIRTIO); } diskAttachment.setDisk(disk); if (disk.isSetId()) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(disk.getId()); return getAttachmentsResource().attachDiskToVm(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAttachDiskResolver(diskId)); } else { return getAttachmentsResource().createDisk(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAddDiskResolver()); } }

@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object virtioScsiEnabledReturnValue) { if (java.lang.Boolean.FALSE.equals(virtioScsiEnabledReturnValue)) { diskInterfaces.remove(DiskInterface.VirtIO_SCSI); } for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : diskModels) { diskModel.getDiskInterface().setItems(diskInterfaces); diskModel.getDiskInterface().setSelectedItem(DiskInterface.VirtIO); if (getIsBootable().getIsChangable()) { diskModel.getIsBootable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean isBootableMarked = ((java.lang.Boolean) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity())); parentModel.getIsBootable().setIsChangeable((!isBootableMarked)); } }); } else { diskModel.getIsBootable().setChangeProhibitionReason(org.ovirt.engine.ui.uicommonweb.models.vms.AttachDiskModel.constants.onlyOneBootableDisk()); diskModel.getIsBootable().setIsChangeable(false); } } java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel>> entities = org.ovirt.engine.ui.uicommonweb.Linq.toEntityModelList(org.ovirt.engine.ui.uicommonweb.Linq.filterDisksByType(diskModels, diskStorageType)); initAttachableDisks(entities); }


@java.lang.Override public int setTabIndexes(int nextTabIndex) { sizeEditor.setTabIndex((nextTabIndex++)); sizeExtendEditor.setTabIndex((nextTabIndex++)); aliasEditor.setTabIndex((nextTabIndex++)); descriptionEditor.setTabIndex((nextTabIndex++)); interfaceEditor.setTabIndex((nextTabIndex++)); datacenterEditor.setTabIndex((nextTabIndex++)); storageDomainEditor.setTabIndex((nextTabIndex++)); volumeTypeEditor.setTabIndex((nextTabIndex++)); cinderVolumeTypeEditor.setTabIndex((nextTabIndex++)); diskProfileEditor.setTabIndex((nextTabIndex++)); quotaEditor.setTabIndex((nextTabIndex++)); hostListEditor.setTabIndex((nextTabIndex++)); storageTypeEditor.setTabIndex((nextTabIndex++)); plugDiskToVmEditor.setTabIndex((nextTabIndex++)); wipeAfterDeleteEditor.setTabIndex((nextTabIndex++)); isBootableEditor.setTabIndex((nextTabIndex++)); isShareableEditor.setTabIndex((nextTabIndex++)); isReadOnlyEditor.setTabIndex((nextTabIndex++)); isScsiPassthroughEditor.setTabIndexes((nextTabIndex++)); isSgIoUnfilteredEditor.setTabIndex((nextTabIndex++)); isUsingScsiReservationEditor.setTabIndex((nextTabIndex++)); return nextTabIndex; }

public static void updateOperationProgress(final org.ovirt.engine.core.common.businessentities.VM vm) { vm.setBackgroundOperationDescription(org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().getVmManager(vm.getId()).getConvertOperationDescription()); vm.setBackgroundOperationProgress(org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().getVmManager(vm.getId()).getConvertOperationProgress()); }
@java.lang.Override protected void executeCommand() { try { addVmToDb(); processImages(); org.ovirt.engine.core.bll.VmHandler.addVmInitToDB(getVm().getStaticData()); } catch (java.lang.RuntimeException e) { macPool.freeMacs(macsAdded); throw e; } org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.setSucceeded(true); org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getReturnValue().setActionReturnValue(getVm()); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSnapshotDao().get(org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getParameters().getId(), Snapshot.SnapshotType.NEXT_RUN, org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getUserID(), org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getParameters().isFiltered()); if (snapshot != null) { org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(vm); org.ovirt.engine.core.bll.VmHandler.updateNetworkInterfacesFromDb(vm); org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getQueryReturnValue().setReturnValue(vm); } else { super.executeQueryCommand(); } }
public static void updateVmStatistics(final org.ovirt.engine.core.common.businessentities.VM vm) { vm.setStatisticsData(org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().getVmManager(vm.getId()).getStatistics()); }
public static boolean isUsbPolicyLegal(org.ovirt.engine.core.common.businessentities.UsbPolicy usbPolicy, int osId, java.util.List<java.lang.String> messages) { boolean retVal = true; if (UsbPolicy.ENABLED_LEGACY.equals(usbPolicy)) { if (org.ovirt.engine.core.bll.VmHandler.osRepository.isLinux(osId)) { messages.add(EngineMessage.USB_LEGACY_NOT_SUPPORTED_ON_LINUX_VMS.toString()); retVal = false; } } return retVal; }
private java.util.List<org.ovirt.engine.core.common.businessentities.VM> searchVmsFromDb() { org.ovirt.engine.core.aaa.QueryData data = initQueryData(true); if (data == null) { return java.util.Collections.emptyList(); } java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getVmDao().getAllUsingQuery(data.getQuery()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(vm); org.ovirt.engine.core.bll.VmHandler.updateVmLock(vm); org.ovirt.engine.core.bll.VmHandler.updateOperationProgress(vm); org.ovirt.engine.core.bll.VmHandler.updateVmStatistics(vm); } return vms; }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getDbFacade().getVmDao().getAllVmsRelatedToQuotaId(org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getParameters().getId()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(vm.getStaticData(), true); java.util.Collections.sort(vm.getDiskList(), new org.ovirt.engine.core.common.businessentities.comparators.DiskByDiskAliasComparator()); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.fillImagesBySnapshots(vm); } org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getQueryReturnValue().setReturnValue(vms); }
protected void addVmTemplateToDb() { getVmTemplate().setClusterId(getParameters().getClusterId()); if (!(org.ovirt.engine.core.bll.VmHandler.validateDedicatedVdsExistOnSameCluster(getVmTemplate(), null))) { getVmTemplate().setDedicatedVmForVdsList(java.util.Collections.emptyList()); } getVmTemplate().setStatus(VmTemplateStatus.Locked); getVmTemplate().setQuotaId(getParameters().getQuotaId()); org.ovirt.engine.core.bll.VmHandler.updateImportedVmUsbPolicy(getVmTemplate()); vmTemplateDao.save(getVmTemplate()); getCompensationContext().snapshotNewEntity(getVmTemplate()); int count = 1; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : getImages()) { image.setActive(true); org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap map = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.saveImage(image); getCompensationContext().snapshotNewEntity(image.getImage()); getCompensationContext().snapshotNewEntity(map); if (!(baseDiskDao.exists(image.getId()))) { image.setDiskAlias(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getSuggestedDiskAlias(image, getVmTemplateName(), count)); count++; baseDiskDao.save(image); getCompensationContext().snapshotNewEntity(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic(); diskDynamic.setId(image.getImageId()); diskDynamic.setActualSize(image.getActualSizeInBytes()); diskImageDynamicDao.save(diskDynamic); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.copyOf(image.getDiskVmElementForVm(sourceTemplateId), image.getId(), getVmTemplateId()); diskVmElementDao.save(dve); getCompensationContext().snapshotNewEntity(diskDynamic); } }
@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.canRunActionOnNonManagedVm())) { return false; } if ((!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.isInternalExecution())) && (!(org.ovirt.engine.core.utils.ObjectIdentityChecker.canUpdateField(org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm(), "clusterId", org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm().getStatus())))) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } org.ovirt.engine.core.bll.ChangeVmClusterValidator validator = new org.ovirt.engine.core.bll.ChangeVmClusterValidator(this, org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getClusterId(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getVmCustomCompatibilityVersion(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVmDeviceUtils()); return validator.validate(); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsList = getVMs(); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsList) { org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(vm); } org.ovirt.engine.core.bll.GetAllVmsQueryBase.getQueryReturnValue().setReturnValue(vmsList); }
protected void updateVMDetails(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(vm); org.ovirt.engine.core.bll.VmHandler.updateNetworkInterfacesFromDb(vm); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(vm.getStaticData(), true); org.ovirt.engine.core.bll.VmHandler.updateNumaNodesFromDb(vm); }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name", "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), getClusterId(action)); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(VdcActionType.ImportVm, params, action); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(name, clusterId, volumeType, status, replicaCount, stripeCount, disperseCount, redundancyCount, options, accessProtocols, transportTypes, bricks, asyncTask, advancedDetails, snapshotsCount, snapMaxLimit, snapshotScheduled); }

@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity) (obj)); return ((((((((((((((((java.util.Objects.equals(name, other.getName())) && (java.util.Objects.equals(clusterId, other.clusterId))) && ((volumeType) == (other.volumeType))) && ((status) == (other.status))) && (java.util.Objects.equals(replicaCount, other.replicaCount))) && (java.util.Objects.equals(stripeCount, other.stripeCount))) && (java.util.Objects.equals(disperseCount, other.disperseCount))) && (java.util.Objects.equals(redundancyCount, other.redundancyCount))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(getOptions(), other.getOptions()))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(accessProtocols, other.accessProtocols))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(transportTypes, other.transportTypes))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(bricks, other.bricks))) && (java.util.Objects.equals(asyncTask, other.asyncTask))) && (java.util.Objects.equals(advancedDetails, other.advancedDetails))) && (java.util.Objects.equals(snapshotsCount, other.snapshotsCount))) && (java.util.Objects.equals(snapMaxLimit, other.snapMaxLimit))) && (java.util.Objects.equals(snapshotScheduled, other.snapshotScheduled)); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity) (obj)); return ((((((java.util.Objects.equals(id, other.id)) && (java.util.Objects.equals(volumeId, other.volumeId))) && (java.util.Objects.equals(serverId, other.serverId))) && (java.util.Objects.equals(brickDirectory, other.brickDirectory))) && (java.util.Objects.equals(brickOrder, other.brickOrder))) && (java.util.Objects.equals(asyncTask, other.asyncTask))) && ((status) == (other.status)); }
public void copyFrom(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { setId(brick.getId()); setVolumeId(brick.getVolumeId()); setServerId(brick.getServerId()); setServerName(brick.getServerName()); setBrickDirectory(brick.getBrickDirectory()); setBrickOrder(brick.getBrickOrder()); setStatus(brick.getStatus()); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, volumeId, serverId, brickDirectory, brickOrder, status, asyncTask); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { return getCustomMapSqlParameterSource().addValue("id", volume.getId()).addValue("cluster_id", volume.getClusterId()).addValue("vol_name", volume.getName()).addValue("vol_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getVolumeType())).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getStatus())).addValue("replica_count", volume.getReplicaCount()).addValue("stripe_count", volume.getStripeCount()).addValue("disperse_count", volume.getDisperseCount()).addValue("redundancy_count", volume.getRedundancyCount()); }
@java.lang.Override public void updateGlusterVolume(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { getCallsHandler().executeModification("UpdateGlusterVolume", getCustomMapSqlParameterSource().addValue("id", volume.getId()).addValue("cluster_id", volume.getClusterId()).addValue("vol_name", volume.getName()).addValue("vol_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getVolumeType())).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getStatus())).addValue("replica_count", volume.getReplicaCount()).addValue("stripe_count", volume.getStripeCount()).addValue("disperse_count", volume.getDisperseCount()).addValue("redundancy_count", volume.getRedundancyCount())); }

@java.lang.Override public org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBatchMapper() { return new org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>() { @java.lang.Override public org.springframework.jdbc.core.namedparam.MapSqlParameterSource map(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource paramValue = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource().addValue("volume_id", entity.getVolumeId()).addValue("server_id", entity.getServerId()).addValue("brick_dir", entity.getBrickDirectory()).addValue("status", entity.getStatus().name()).addValue("id", entity.getId().toString()).addValue("brick_order", entity.getBrickOrder()).addValue("network_id", entity.getNetworkId()).addValue("task_id", ((entity.getAsyncTask().getTaskId()) != null ? entity.getAsyncTask().getTaskId().toString() : "")); return paramValue; } }; }
@java.lang.Override protected void executeCommand() { log.info("Creating ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())) { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(false); return; } log.info("Creating {} image", getImageType()); createImage(); } else { handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true); }

@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> listPermissionSubjects = new java.util.ArrayList<>(); listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); return listPermissionSubjects; }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(imageId))) { return validateImageTransfer(imageId); } else { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) != (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { return validateCreateImage(); } else { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); } } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if (cluster == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID); return false; } if (!(cluster.supportsGlusterService())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_DOES_NOT_SUPPORT_GLUSTER); return false; } if (volume.getVolumeType().isDispersedType()) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CREATION_OF_DISPERSE_VOLUME_NOT_SUPPORTED); return false; } if (volumeNameExists(volume.getName())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NAME_ALREADY_EXISTS); addValidationMessageVariable("volumeName", volume.getName()); return false; } if (!(validate(createVolumeValidator().isForceCreateVolumeAllowed(getCluster().getCompatibilityVersion(), getParameters().isForce())))) { return false; } return validateBricks(volume); }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = CreateGlusterVolumeVDSCommand.getParameters().getVolume(); boolean isForce = CreateGlusterVolumeVDSCommand.getParameters().isForce(); boolean supportForceCreateVolume = org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterForceCreateVolumeSupported(CreateGlusterVolumeVDSCommand.getParameters().getClusterVersion()); uuidReturn = (supportForceCreateVolume) ? CreateGlusterVolumeVDSCommand.getBroker().glusterVolumeCreate(volume.getName(), volume.getBrickDirectories().toArray(new java.lang.String[0]), volume.getReplicaCount(), volume.getStripeCount(), getTransportTypeArr(volume), isForce) : CreateGlusterVolumeVDSCommand.getBroker().glusterVolumeCreate(volume.getName(), volume.getBrickDirectories().toArray(new java.lang.String[0]), volume.getReplicaCount(), volume.getStripeCount(), getTransportTypeArr(volume)); CreateGlusterVolumeVDSCommand.proceedProxyReturnValue(); if (CreateGlusterVolumeVDSCommand.getVDSReturnValue().getSucceeded()) { volume.setId(org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(uuidReturn.uuid)); setReturnValue(volume); } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList, boolean force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.create").withParameter("volumeName", volumeName).withParameter("bricklist", new java.util.ArrayList(java.util.Arrays.asList(brickList))).withParameter("replicaCount", replicaCount).withParameter("stripeCount", stripeCount).withParameter("transportList", new java.util.ArrayList(java.util.Arrays.asList(transportList))).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(response); }

org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList, boolean force);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList, boolean force) { try { return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(vdsServer.glusterVolumeCreate(volumeName, brickList, replicaCount, stripeCount, transportList, force)); } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
@java.lang.Override public void buildVmVirtioScsi() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.VIRTIOSCSI.getName()); java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskInterface, java.lang.Integer> controllerIndexMap = org.ovirt.engine.core.utils.archstrategy.ArchStrategyFactory.getStrategy(vm.getClusterArch()).run(new org.ovirt.engine.core.vdsbroker.architecture.GetControllerIndices()).returnValue(); int virtioScsiIndex = controllerIndexMap.get(DiskInterface.VirtIO_SCSI); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceGeneralType.CONTROLLER.getValue()); struct.put(VdsProperties.Device, VdsProperties.Scsi); struct.put(VdsProperties.Model, VdsProperties.VirtioScsi); struct.put(VdsProperties.Index, java.lang.Integer.toString(virtioScsiIndex)); vmInfoBuildUtils.addAddress(vmDevice, struct); virtioScsiIndex++; addDevice(struct, vmDevice, null); } }
public void updateVmDevices(org.ovirt.engine.core.common.action.VmManagementParametersBase params, org.ovirt.engine.core.common.businessentities.VM oldVm) { org.ovirt.engine.core.common.businessentities.VmBase oldVmBase = oldVm.getStaticData(); org.ovirt.engine.core.common.businessentities.VmBase newVmBase = params.getVmStaticData(); if (newVmBase == null) { return; } updateCdPath(oldVmBase, newVmBase); updateBootOrder(oldVmBase, newVmBase); updateVideoDevices(oldVmBase, newVmBase); updateUsbSlots(oldVmBase, newVmBase); updateMemoryBalloon(newVmBase.getId(), params.isBalloonEnabled()); updateSoundDevice(oldVmBase, newVmBase, oldVm.getCompatibilityVersion(), params.isSoundDeviceEnabled()); updateSmartcardDevice(oldVm, newVmBase); updateConsoleDevice(newVmBase.getId(), params.isConsoleEnabled()); updateVirtioScsiController(newVmBase.getId(), params.isVirtioScsiEnabled()); }
public boolean validate() { getReplicaCount().setIsValid(true); getStripeCount().setIsValid(true); if (getReplicaCount().getIsAvailable()) { org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation replicaCountValidation = new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(); replicaCountValidation.setMinimum(2); replicaCountValidation.setMaximum(16); getReplicaCount().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), replicaCountValidation }); } if (getStripeCount().getIsAvailable()) { org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation stripeCountValidation = new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(); stripeCountValidation.setMinimum(4); stripeCountValidation.setMaximum(16); getReplicaCount().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), stripeCountValidation }); } return (getReplicaCount().getIsValid()) && (getStripeCount().getIsValid()); }


private void onAddBricksInternal() { org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel volumeBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel) (getWindow())); cancelConfirmation(); if (!(volumeBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType selectedVolumeType = getTypeList().getSelectedItem(); if (selectedVolumeType.isReplicatedType()) { getReplicaCount().setEntity(volumeBrickModel.getReplicaCount().getEntity()); } if (selectedVolumeType.isStripedType()) { getStripeCount().setEntity(volumeBrickModel.getStripeCount().getEntity()); } java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>> brickList = new java.util.ArrayList<>(); brickList.addAll(volumeBrickModel.getBricks().getItems()); volumeBrickModel.getBricks().setItems(null); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>> brickListModel = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); brickListModel.setItems(brickList); brickListModel.setSelectedItems(brickList); setBricks(brickListModel); setForceAddBricks(volumeBrickModel.getForce().getEntity()); setWindow(null); }

protected void addStyles() { volumeTypeEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); replicaCountEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); stripeCountEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); forceEditor.addContentWidgetContainerStyleName(style.forceEditorWidget()); }
private void clusterSelectedItemChanged() { setBricks(new org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>>()); if ((getCluster().getSelectedItem()) != null) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster().getSelectedItem(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isAnyHostUpInCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { if (!(getCluster().getSelectedItem().getId().equals(cluster.getId()))) { return; } if (((java.lang.Boolean) (returnValue))) { getAddBricksCommand().setIsExecutionAllowed(true); setMessage(null); } else { getAddBricksCommand().setIsExecutionAllowed(false); setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().volumeEmptyClusterValidationMsg()); } } }), cluster.getName()); } else { getAddBricksCommand().setIsExecutionAllowed(false); setMessage(null); } }

public void setDefaultInterface() { org.ovirt.engine.core.compat.Guid vmId = getVmId(); if ((org.ovirt.engine.core.compat.Guid.isNullOrEmpty(vmId)) || ((getDisk()) == null)) { getDiskInterface().setSelectedItem(DiskInterface.VirtIO); } else { getDiskInterface().setSelectedItem(getDisk().getDiskVmElementForVm(vmId).getDiskInterface()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(source, windowPopup, false, propName); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(source, confirmWindowPopup, true, propName); } }
protected <T extends org.ovirt.engine.ui.uicommonweb.models.Model> void revealAndAssignPopup(T model, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<T, ?> popup, boolean isConfirm) { revealPopup(model, popup); if (isConfirm) { confirmWindowPopup = popup; } else { windowPopup = popup; } }
@java.lang.SuppressWarnings("unchecked") void handleWindowModelChange(M sourceModel, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?> currentPopup, boolean isConfirmation, java.lang.String propertyName) { org.ovirt.engine.ui.uicommonweb.models.Model windowModel = (isConfirmation) ? popupResolver.getConfirmWindowModel(sourceModel, propertyName) : popupResolver.getWindowModel(sourceModel, propertyName); if ((windowModel != null) && (currentPopup == null)) { org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?> newPopup = null; org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand = sourceModel.getLastExecutedCommand(); if (windowModel instanceof org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) { newPopup = popupResolver.getConfirmModelPopup(sourceModel, lastExecutedCommand); if ((newPopup == null) && ((defaultConfirmPopupProvider) != null)) { newPopup = defaultConfirmPopupProvider.get(); } } else { newPopup = popupResolver.getModelPopup(sourceModel, lastExecutedCommand, windowModel); } if (newPopup != null) { revealAndAssignPopup(windowModel, ((org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<org.ovirt.engine.ui.uicommonweb.models.Model, ?>) (newPopup)), isConfirmation); } else { if (isConfirmation) { popupResolver.clearConfirmWindowModel(sourceModel, propertyName); } else { popupResolver.clearWindowModel(sourceModel, propertyName); } } } else if ((windowModel == null) && (currentPopup != null)) { hideAndClearPopup(currentPopup, isConfirmation); } }
protected void hideAndClearPopup(org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?> popup, boolean isConfirm) { popup.hideAndUnbind(); if (isConfirm) { confirmWindowPopup = null; } else { windowPopup = null; } }
void hideAndClearAllPopups() { if ((confirmWindowPopup) != null) { hideAndClearPopup(confirmWindowPopup, true); } if ((windowPopup) != null) { hideAndClearPopup(windowPopup, false); } }
public void addDialogModelListener(final M source) { hideAndClearAllPopups(); source.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(source, windowPopup, false, propName); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(source, confirmWindowPopup, true, propName); } } }); }
@org.junit.Test public void testEmptySignKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtilsTest.EMPTY_SIGN_KEY_VAL); assertEquals(1, map.size()); }
@org.junit.Test public void testOneKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtilsTest.ONE_KEY_VAL); assertEquals(1, map.size()); }
private java.util.Map<java.lang.String, java.lang.String> getAddressMapForScsiDisk(java.lang.String address, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, int controllerIndex, boolean reserveFirstAddress) { java.util.Map<java.lang.String, java.lang.String> addressMap; int availableUnit = vmInfoBuildUtils.getAvailableUnitForScsiDisk(vmDeviceUnitMap, reserveFirstAddress); if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { addressMap = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(address); int unit = java.lang.Integer.parseInt(addressMap.get(VdsProperties.Unit)); if (vmDeviceUnitMap.containsValue(unit)) { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } } else { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } updateVmDeviceAddress(addressMap.toString(), vmDevice); return addressMap; }
void addAddress(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.String, java.lang.Object> struct) { java.util.Map<java.lang.String, java.lang.String> addressMap = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(vmDevice.getAddress()); if (!(addressMap.isEmpty())) { struct.put(VdsProperties.Address, addressMap); } }
public static org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer createVdsServer(org.ovirt.engine.core.common.businessentities.VdsProtocol vdsProtocol, java.lang.String hostname, int port, int clientTimeOut, int connectionTimeOut, int clientRetries, int heartbeat) { org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer vdsServer = null; org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerConnector, org.apache.commons.httpclient.HttpClient> returnValue = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcUtils.getConnection(hostname, port, clientTimeOut, connectionTimeOut, clientRetries, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsMaxConnectionsPerHost), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.MaxTotalConnections), org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerConnector.class, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EncryptHostCommunication)); if ((org.ovirt.engine.core.common.businessentities.VdsProtocol.STOMP) == vdsProtocol) { java.lang.String eventQueue = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EventQueueName); vdsServer = new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer(org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.createStompClient(hostname, port, connectionTimeOut, clientTimeOut, clientRetries, heartbeat, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EncryptHostCommunication), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsmSSLProtocol), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EventProcessingPoolSize), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsRequestQueueName), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsResponseQueueName), eventQueue), returnValue.getSecond()); } else if ((org.ovirt.engine.core.common.businessentities.VdsProtocol.XML) == vdsProtocol) { org.apache.commons.httpclient.HttpClient httpClient = returnValue.getSecond(); java.lang.String protocol = (org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EncryptHostCommunication)) ? "https" : "http"; httpClient.getHostConfiguration().setHost(hostname, port, org.apache.commons.httpclient.protocol.Protocol.getProtocol(protocol)); vdsServer = new org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerWrapper(returnValue.getFirst(), httpClient); } return vdsServer; }
@org.junit.Test public void testEmptyKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtilsTest.EMPTY_KEY_VAL); assertEquals(2, map.size()); }

private void addAddress(java.util.Map<java.lang.String, java.lang.Object> map, java.lang.String address) { if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { map.put(VdsProperties.Address, org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters().getVmDevice().getAddress())); } }
private java.util.Map<java.lang.String, java.lang.Object> buildData() { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Object> memDeviceData = new java.util.HashMap<>(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getMemoryDevice(); data.put("vmId", org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getVmId().toString()); memDeviceData.put(VdsProperties.Type, vmDevice.getType().getValue()); memDeviceData.put(VdsProperties.Device, vmDevice.getDevice()); if (org.apache.commons.lang.StringUtils.isNotBlank(vmDevice.getAddress())) { memDeviceData.put(VdsProperties.Address, org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(vmDevice.getAddress())); } memDeviceData.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); memDeviceData.put(VdsProperties.DeviceId, vmDevice.getId().getDeviceId().toString()); memDeviceData.put("size", vmDevice.getSpecParams().get("size")); memDeviceData.put("node", vmDevice.getSpecParams().get("node")); data.put("memory", memDeviceData); return data; }
@org.junit.Test public void testMulKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtilsTest.MUL_KEY_VAL); assertEquals(4, map.size()); }
@org.junit.Test public void testNullKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtilsTest.NULL_KEY_VAL); assertEquals(0, map.size()); }
protected org.ovirt.engine.core.bll.ValidationResult validateMountOptions() { java.lang.String mountOptions = org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.getConnection().getMountOptions(); if (org.apache.commons.lang.StringUtils.isBlank(mountOptions)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.List<java.lang.String> disallowedOptions = ((org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.getConnection().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.POSIXFS)) ? org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.POSIX_MANAGED_OPTIONS : org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.NFS_MANAGED_OPTIONS; java.util.Map<java.lang.String, java.lang.String> optionsMap = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(mountOptions); java.util.Set<java.lang.String> optionsKeys = new java.util.HashSet<>(); for (java.lang.String option : optionsMap.keySet()) { optionsKeys.add(option.toLowerCase()); } optionsKeys.retainAll(disallowedOptions); if (!(optionsKeys.isEmpty())) { addValidationMessageVariable("invalidOptions", org.apache.commons.lang.StringUtils.join(optionsKeys, ", ")); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VALIDATION_STORAGE_CONNECTION_MOUNT_OPTIONS_CONTAINS_MANAGED_PROPERTY); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public static java.util.Map<java.lang.String, java.lang.String> string2Map(java.lang.String str) { java.util.Map<java.lang.String, java.lang.String> map = new java.util.HashMap<>(); if (str != null) { str = str.trim(); if (str.startsWith("{")) { str = str.substring(1, ((str.length()) - 1)); } if (str.endsWith("}")) { str = str.substring(0, ((str.length()) - 1)); } str = str.trim(); if ((str.length()) > 0) { java.lang.String[] keyValPairs = str.split(org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.PAIRS_SEPARATOR); for (java.lang.String pair : keyValPairs) { java.lang.String[] keyval = pair.split(org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.KEY_VALUE_SEPARATOR); if ((keyval.length) == 2) { map.put(keyval[0].trim(), keyval[1].trim()); } else if ((keyval.length) == 1) { map.put(keyval[0].trim(), ""); } } } } return map; }
@javax.annotation.PostConstruct protected final void postConstruct() { if (!(isCompensationContext())) { initCommandBase(); init(); } }
private boolean searchForDuplicatesWithExistingVmDevices(org.ovirt.engine.core.common.businessentities.VmDevice vmDeviceToHotplug) { java.lang.String deviceAddress = vmDeviceToHotplug.getAddress(); if (org.apache.commons.lang.StringUtils.isEmpty(deviceAddress)) { return false; } java.util.Map<java.lang.String, java.lang.String> addressMapToHotplug = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(deviceAddress); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> allVmDevices = vmDeviceDao.getVmDeviceByVmId(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm().getId()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : allVmDevices) { if (!(vmDeviceToHotplug.getId().equals(vmDevice.getId()))) { java.util.Map<java.lang.String, java.lang.String> deviceAddressMap = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(vmDevice.getAddress()); if (deviceAddressMap.equals(addressMapToHotplug)) { return true; } } } return false; }
protected void initTooltip() { tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(getContents()); tooltip.setPlacement(Placement.BOTTOM); java.lang.String tooltipContent = org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel.infoPopup.getTooltipContent(item, this); tooltip.setText(tooltipContent); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetDifferentlyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); assertThat(factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); assertThat(factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorB)), instanceOf(java.lang.reflect.Proxy.class)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor1 = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy).createLockingInstance(eq(macPoolDecoratorA), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor1.capture()); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor2 = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy).createLockingInstance(eq(macPoolDecoratorB), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor2.capture()); assertEquals(captor1.getValue(), captor2.getValue()); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetEquallyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); assertThat(factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); assertThat(factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(macPoolDecoratorA), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor.capture()); java.util.List<java.util.concurrent.locks.ReentrantReadWriteLock> capturesValues = captor.getAllValues(); assertEquals(capturesValues.get(0), capturesValues.get(1)); }
public void performPendingOperations() { boolean remove = false; java.util.Queue<java.util.concurrent.Future<?>> operations = pendingOperations; pendingOperations = new java.util.concurrent.ConcurrentLinkedQueue<>(); for (int i = 0; i < (operations.size()); i++) { java.util.concurrent.Future<?> task = operations.peek(); if (task instanceof java.util.concurrent.FutureTask) { ((java.util.concurrent.FutureTask<?>) (task)).run(); remove = true; } else { org.ovirt.vdsm.jsonrpc.client.utils.ChainedOperation<?> co = ((org.ovirt.vdsm.jsonrpc.client.utils.ChainedOperation<?>) (task)); co.call(); if (co.isDone()) { remove = true; } } if (remove) { operations.remove(task); i--; } } }
public void refreshVdsStats() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.DebugTimerLogging)) { org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("vdsManager::refreshVdsStats entered, host='{}'({})", vds.getName(), vds.getId()); } fetchHostInterfaces(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue statsReturnValue = resourceManager.runVdsCommand(VDSCommandType.GetStats, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase(vds)); if ((!(statsReturnValue.getSucceeded())) && ((statsReturnValue.getExceptionObject()) != null)) { org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.error("Failed getting vds stats, host='{}'({}): {}", vds.getName(), vds.getId(), statsReturnValue.getExceptionString()); throw statsReturnValue.getExceptionObject(); } getVdsEventListener().updateSchedulingStats(vds); updateV2VJobs(); saveVdsDynamic = true; saveVdsStatistics = true; alertIfLowDiskSpaceOnHost(); checkVdsInterfaces(); if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.DebugTimerLogging)) { org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("vds::refreshVdsStats\n{}", this); } }
public void updateStatisticsData(org.ovirt.engine.core.common.businessentities.VdsStatistics statisticsData) { vdsStatisticsDao.update(statisticsData); cachedVds.setStatisticsData(statisticsData); }
public void refresh() { try { refreshVdsRunTimeInfo(); } finally { try { if (((firstStatus) != (vds.getStatus())) && ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { vdsManager.cancelRecoveryJob(); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Host '{}' ({}) firing up event.", vds.getName(), vds.getId()); vdsManager.setIsSetNonOperationalExecuted((!(getVdsEventListener().vdsUpEvent(vds)))); } saveDataToDb(); } catch (org.ovirt.engine.core.vdsbroker.irsbroker.IRSErrorException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Exception", ex); } catch (java.lang.RuntimeException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.error("Exception", ex); } } }
private void moveVDSToMaintenanceIfNeeded() { if ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.PreparingForMaintenance)) { if (monitoringStrategy.canMoveToMaintenance(vds)) { org.ovirt.engine.core.common.businessentities.VdsDynamic dbVds = getDbFacade().getVdsDynamicDao().get(vds.getId()); vds.setMaintenanceReason(dbVds.getMaintenanceReason()); vdsManager.setStatus(VDSStatus.Maintenance, vds); saveVdsDynamic = true; saveVdsStatistics = true; org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.info("Updated host status from 'Preparing for Maintenance' to 'Maintenance' in database, host '{}'({})", vds.getName(), vds.getId()); } else { vdsMaintenanceTimeoutOccurred = vdsManager.isTimeToRetryMaintenance(); } } }
private void beforeFirstRefreshTreatment(boolean isVdsUpOrGoingToMaintenance) { if (vdsManager.getbeforeFirstRefresh()) { boolean flagsChanged = false; final java.util.concurrent.atomic.AtomicBoolean processHardwareCapsNeededTemp = new java.util.concurrent.atomic.AtomicBoolean(); vdsManager.refreshCapabilities(processHardwareCapsNeededTemp, vds); flagsChanged = processHardwareCapsNeededTemp.get(); vdsManager.setbeforeFirstRefresh(false); refreshedCapabilities = true; saveVdsDynamic = true; processHardwareCapsNeeded = (processHardwareCapsNeeded) ? processHardwareCapsNeeded : flagsChanged; } else if (isVdsUpOrGoingToMaintenance || ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Error))) { return; } if ((vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(vds.getId())); logable.addCustomValue("HostStatus", vds.getStatus().toString()); auditLog(logable, AuditLogType.VDS_DETECTED); } }
public void updateDynamicData(org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicData) { vdsDynamicDao.updateIfNeeded(dynamicData); cachedVds.setDynamicData(dynamicData); }
private void saveDataToDb() { if (saveVdsDynamic) { vdsManager.updateDynamicData(vds.getDynamicData()); if (refreshedCapabilities) { vdsManager.updateNumaData(vds); } } if (saveVdsStatistics) { org.ovirt.engine.core.common.businessentities.VdsStatistics stat = vds.getStatisticsData(); vdsManager.updateStatisticsData(stat); checkVdsMemoryThreshold(stat); checkVdsCpuThreshold(stat); checkVdsNetworkThreshold(stat); checkVdsSwapThreshold(stat); final java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics> statistics = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : vds.getInterfaces()) { statistics.add(iface.getStatistics()); } if (!(statistics.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getDbFacade().getInterfaceDao().massUpdateStatisticsForVds(statistics); return null; }); } saveNumaStatisticsDataToDb(); } }
public org.ovirt.engine.core.common.HostUpgradeManagerResult checkForUpdates(org.ovirt.engine.core.common.businessentities.VDS host) { if (upgradeCheckInProgressMap.getOrDefault(host.getId(), false)) { java.lang.String error = java.lang.String.format("Failed to refresh host '%s' packages availability, another refresh process already running.", host.getName()); org.ovirt.engine.core.bll.host.AvailableUpdatesFinder.log.error(error); throw new java.lang.RuntimeException(error); } try { upgradeCheckInProgressMap.put(host.getId(), true); return create(host.getVdsType()).checkForUpdates(host); } finally { upgradeCheckInProgressMap.remove(host.getId()); } }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { log.debug("Entered SsoPostLoginFilter"); javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); try { java.lang.String engineSessionId = ((java.lang.String) (req.getAttribute(SessionConstants.HTTP_SESSION_ENGINE_SESSION_ID_KEY))); if ((org.apache.commons.lang.StringUtils.isEmpty(engineSessionId)) && ((req.getSession(false)) != null)) { engineSessionId = ((java.lang.String) (req.getSession(false).getAttribute(SessionConstants.HTTP_SESSION_ENGINE_SESSION_ID_KEY))); } if (org.apache.commons.lang.StringUtils.isNotEmpty(engineSessionId)) { javax.naming.InitialContext ctx = new javax.naming.InitialContext(); try { java.lang.String ssoToken = ((java.lang.String) (runQuery(VdcQueryType.GetEngineSessionIdToken, engineSessionId, ctx))); log.debug("Adding userInfo to session"); org.ovirt.engine.core.common.businessentities.aaa.DbUser loggedInUser = ((org.ovirt.engine.core.common.businessentities.aaa.DbUser) (runQuery(VdcQueryType.GetUserBySessionId, engineSessionId, ctx))); req.getSession(true).setAttribute(org.ovirt.engine.core.aaa.filters.SsoPostLoginFilter.ATTR_USER_INFO, getUserInfoObject(loggedInUser, ssoToken)); chain.doFilter(request, response); } finally { ctx.close(); } } else { log.warn(("Missing sessionId in either request or session scope. " + "Please configure SSO properly with SsoPostLoginServlet.")); } } catch (java.lang.Exception ex) { log.error("Unable to get token for engine session {}", ex.getMessage()); log.debug("Exception", ex); } log.debug("Exiting SsoPostLoginFilter"); }
public java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> getVmInitByIds(java.util.List<org.ovirt.engine.core.compat.Guid> ids, boolean secure) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> all = vmInitDao.getVmInitByIds(ids); for (org.ovirt.engine.core.common.businessentities.VmInit vmInit : all) { if (secure) { vmInit.setPasswordAlreadyStored((!(org.apache.commons.lang.StringUtils.isEmpty(vmInit.getRootPassword())))); vmInit.setRootPassword(null); } else { vmInit.setPasswordAlreadyStored(false); } } return all; }
@java.lang.Override protected void executeQueryCommand() { if ((org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getIds()) != null) { org.ovirt.engine.core.bll.GetVmsInitQuery.getQueryReturnValue().setReturnValue(vmHandler.getVmInitByIds(org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getIds(), true)); } }

private java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> getCinderDisksToBeRemoved() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> imageDisks = org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getParameters().cinderDisks; java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = new java.util.ArrayList<>(); if (imageDisks == null) { cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getVmId())); } else { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : imageDisks) { cinderDisks.add(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (diskImage))); } } return cinderDisks; }
@java.lang.Override protected void init() { super.init(); org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmDao().get(getVmIdFromSnapshot()); org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); boolean isCinderDisksExist = !(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(vm.getDiskList()).isEmpty()); org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters().setUseCinderCommandCallback(isCinderDisksExist); }
public boolean validateCinder() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVmId())); if (!(cinderDisks.isEmpty())) { org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator cinderDisksValidator = getCinderDisksValidator(cinderDisks); return validate(cinderDisksValidator.validateCinderDiskLimits()); } return true; }
public boolean validateCinder() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVmId())); if (!(cinderDisks.isEmpty())) { org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator cinderDisksValidator = getCinderDisksValidator(cinderDisks); return validate(cinderDisksValidator.validateCinderDiskSnapshotsLimits()); } return true; }
private void addRedundantCinderSnapshots(org.ovirt.engine.core.compat.Guid previewedSnapshotId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesFromActiveSnapshot) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderImagesForPreviewedSnapshot = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getDiskImageDao().getAllSnapshotsForVmSnapshot(previewedSnapshotId)); java.util.Set<org.ovirt.engine.core.compat.Guid> criticalSnapshotsChain = getCriticalSnapshotsChain(imagesFromActiveSnapshot, cinderImagesForPreviewedSnapshot); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : cinderImagesForPreviewedSnapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> redundantSnapshotIdsToDelete = org.ovirt.engine.core.bll.storage.connection.CINDERStorageHelper.getRedundantVolumesToDeleteAfterCommitSnapshot(image.getId(), criticalSnapshotsChain); snapshotsToRemove.addAll(redundantSnapshotIdsToDelete.stream().filter(( snapIdToDelete) -> isSnapshotEligibleToBeDeleted(getSnapshotDao().get(snapIdToDelete))).collect(java.util.stream.Collectors.toList())); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) { imagesToPreview = ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks()) != null) ? org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks() : org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getDbFacade().getDiskImageDao().getAllSnapshotsForVmSnapshot(getDstSnapshot().getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(imagesToPreview, org.ovirt.engine.core.bll.snapshots.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.snapshots.ONLY_SNAPABLE); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }
@org.junit.Test public void testImportVMFromConfigurationXMLCouldNotGetParsed() { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntity = getOvfEntityData(); ovfEntity.setOvfData("This is not a valid XML"); initCommand(ovfEntity); java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> ovfEntityDataList = new java.util.ArrayList<>(); ovfEntityDataList.add(ovfEntity); when(unregisteredOVFDataDao.getByEntityIdAndStorageDomain(vmId, org.ovirt.engine.core.bll.exportimport.ImportVMFromConfigurationCommandTest.storageDomainId)).thenReturn(ovfEntityDataList); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED); }
protected boolean setAndValidateDiskProfiles() { if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm().getDiskMap()) != null) { java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskImage, org.ovirt.engine.core.compat.Guid> map = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); map.put(diskImage, imageToDestinationDomainMap.get(diskImage.getId())); } } return validate(diskProfileHelper.setAndValidateDiskProfiles(map, org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getCurrentUser())); } return true; }
@org.junit.Test public void testImportVMFromConfigurationWhenStorageDomainIsInactive() { initCommand(getOvfEntityData()); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomain(); storageDomain.setStatus(StorageDomainStatus.Inactive); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2); }
@java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget()) { if (!(validateExternalVnicProfileMapping())) { return false; } if (!(validateMacs(vmFromConfiguration))) { return false; } org.ovirt.engine.core.bll.validator.ImportValidator importValidator = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImportValidator(); if (!(validate(importValidator.validateUnregisteredEntity(vmFromConfiguration, ovfEntityData, org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImages())))) { return false; } setImagesWithStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVm().getImages()); } return super.validate(); }
@org.junit.Test public void testImportVMFromConfigurationWhenStorageDomainIsInMaintenance() { initCommand(getOvfEntityData()); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomain(); storageDomain.setStatus(StorageDomainStatus.Maintenance); doReturn(storageDomain).when(cmd).getStorageDomain(); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2); }
@org.junit.Test public void testPositiveImportVmFromConfiguration() { initCommand(getOvfEntityData()); doReturn(storagePool).when(cmd).getStoragePool(); doReturn(java.lang.Boolean.TRUE).when(cmd).validateAfterCloneVm(anyMapOf(org.ovirt.engine.core.compat.Guid.class, org.ovirt.engine.core.common.businessentities.StorageDomain.class)); doReturn(java.lang.Boolean.TRUE).when(cmd).validateBeforeCloneVm(anyMapOf(org.ovirt.engine.core.compat.Guid.class, org.ovirt.engine.core.common.businessentities.StorageDomain.class)); final org.ovirt.engine.core.common.businessentities.VM expectedVm = cmd.getVm(); when(externalVmMacsFinder.findExternalMacAddresses(eq(expectedVm), any(org.ovirt.engine.core.bll.context.CommandContext.class))).thenReturn(java.util.Collections.emptySet()); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class))).thenReturn(ValidationResult.VALID); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(cmd); }
public void performPendingOperations() { java.util.Queue<java.util.concurrent.Future<?>> operations = pendingOperations; pendingOperations = new java.util.concurrent.ConcurrentLinkedQueue<>(); operations.forEach(( task) -> { org.ovirt.vdsm.jsonrpc.client.utils.ReactorScheduler.log.info("running future task {}", task); ((java.util.concurrent.FutureTask) (task)).run(); }); }
@org.junit.Test public void testUpdate() { dao.save(vnicProfile); vnicProfile.setPortMirroring(true); vnicProfile.setPassthrough(true); dao.update(vnicProfile); org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(vnicProfile.getId()); assertNotNull(result); assertEquals(vnicProfile.getId(), result.getId()); assertTrue(result.isPortMirroring()); assertTrue(result.isPassthrough()); }
@org.junit.Test public void testSave() { dao.save(vnicProfile); org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(vnicProfile.getId()); assertNotNull(result); assertEquals(vnicProfile.getId(), result.getId()); assertFalse(result.isPortMirroring()); assertFalse(result.isPassthrough()); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(customProperties, id, name, networkId, networkQosId, portMirroring, passthrough, description); }
@org.junit.Test public void testGetWithPassthrough() { org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(FixturesTool.VM_NETWORK_INTERFACE_PASSTHROUGH_PROFILE); assertNotNull(result); assertEquals(FixturesTool.VM_NETWORK_INTERFACE_PASSTHROUGH_PROFILE, result.getId()); assertTrue(result.isPassthrough()); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", getId()).append("networkId", getNetworkId()).append("networkQosId", getNetworkQosId()).append("portMirroring", isPortMirroring()).append("passthrough", isPassthrough()).append("customProperties", getCustomProperties()).append("description", getDescription()).build(); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.network.VnicProfile)) { return false; } org.ovirt.engine.core.common.businessentities.network.VnicProfile other = ((org.ovirt.engine.core.common.businessentities.network.VnicProfile) (obj)); return (((((((java.util.Objects.equals(customProperties, other.customProperties)) && (java.util.Objects.equals(id, other.id))) && (java.util.Objects.equals(name, other.name))) && (java.util.Objects.equals(networkId, other.networkId))) && (java.util.Objects.equals(networkQosId, other.networkQosId))) && ((portMirroring) == (other.portMirroring))) && ((passthrough) == (other.passthrough))) && (java.util.Objects.equals(description, other.description)); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getVnicProfileDao(); vnicProfile = new org.ovirt.engine.core.common.businessentities.network.VnicProfile(); vnicProfile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vnicProfile.setName("new_profile"); vnicProfile.setNetworkId(FixturesTool.NETWORK_ENGINE); vnicProfile.setNetworkQosId(FixturesTool.NETWORK_QOS); vnicProfile.setPortMirroring(false); vnicProfile.setPassthrough(false); }
private org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface mockVnic(boolean passthrough) { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = mock(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface.class); when(vnic.isPassthrough()).thenReturn(passthrough); return vnic; }

public org.ovirt.engine.core.bll.ValidationResult vmNotHavingPassthroughVnics() { for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = getDbFacade().getVmNetworkInterfaceDao().getAllForVm(vm.getId()); java.util.List<java.lang.String> passthroughVnicNames = vnics.stream().filter(VmNic::isPassthrough).map(VmNic::getName).collect(java.util.stream.Collectors.toList()); if (!(passthroughVnicNames.isEmpty())) { java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith("interfaces", passthroughVnicNames); replacements.add(java.lang.String.format("$vmName %s", vm.getName())); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED, replacements); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }

@org.junit.Test public void vmNotHavingPassthroughVnicsNotValid() { vmNotHavingPassthroughVnicsCommon(vm.getId(), 2, 3); assertThat(validator.vmNotHavingPassthroughVnics(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED)); }
@org.junit.Test public void vmNotHavingPassthroughVnicsMulitpleVmsNotValid() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = initValidatorWithMultipleVms(3); vmNotHavingPassthroughVnicsCommon(vmList.get(0).getId(), 0, 2); vmNotHavingPassthroughVnicsCommon(vmList.get(1).getId(), 3, 8); vmNotHavingPassthroughVnicsCommon(vmList.get(2).getId(), 0, 4); assertThat(validator.vmNotHavingPassthroughVnics(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED)); }
@org.junit.Test public void vmNotHavingPassthroughVnicsMulitpleVmsValid() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = initValidatorWithMultipleVms(2); vmNotHavingPassthroughVnicsCommon(vmList.get(0).getId(), 0, 2); vmNotHavingPassthroughVnicsCommon(vmList.get(1).getId(), 0, 8); assertThat(validator.vmNotHavingPassthroughVnics(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
@org.junit.Test public void vmNotHavingVnicsValid() { vmNotHavingPassthroughVnicsCommon(vm.getId(), 0, 0); assertThatVmNotHavingPassthroughVnics(true); }
@org.junit.Test public void vmNotHavingPassthroughVnicsValid() { vmNotHavingPassthroughVnicsCommon(vm.getId(), 0, 2); assertThatVmNotHavingPassthroughVnics(true); }






@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { updateSysprepVisibility(object); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { updateCloudInitVisibility(object); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.CreateSnapshot, getCreateVDSCommandParameters()); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().setVdsmTaskIds(new java.util.ArrayList()); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVdsmTaskIds().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getTaskIdList().add(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVdsmTaskIds().get(0)); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.setSucceeded(true); } }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getParameters().isUseCinderCommandCallback() ? new org.ovirt.engine.core.bll.ConcurrentChildCommandsExecutionCallback() : null; }

private void updateVmStatistics() { statistics = getVmManager().getStatistics(); statistics.updateRuntimeData(vdsmVm.getVmStatistics(), getVmManager().getNumOfCpus()); }

private void updateStaticFields(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { name = vmStatic.getName(); origin = vmStatic.getOrigin(); autoStart = vmStatic.isAutoStartup(); memSizeMb = vmStatic.getMemSizeMb(); minAllocatedMem = vmStatic.getMinAllocatedMem(); numOfCpus = vmStatic.getNumOfCpus(); }

@java.lang.Override public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.Boolean value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.Boolean> valueUpdater) { if (tooltipContent == null) { tooltipContent = getTooltip(value); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.handleTooltipEvent(parent, tooltipContent, event); super.onBrowserEvent(context, parent, value, event, valueUpdater); }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { if (tooltipContent == null) { tooltipContent = getTooltip(value); } if (BrowserEvents.MOUSEOVER.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.configureTooltip(parent, tooltipContent, event); } if (BrowserEvents.MOUSEOUT.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.reapAllTooltips(); } if (BrowserEvents.MOUSEDOWN.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.hideAllTooltips(); } }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { if (tooltipContent == null) { tooltipContent = getTooltip(value); } if (BrowserEvents.MOUSEOVER.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.configureTooltip(parent, tooltipContent, event); } if (BrowserEvents.MOUSEOUT.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.reapAllTooltips(); } if (BrowserEvents.MOUSEDOWN.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.hideAllTooltips(); } super.onBrowserEvent(context, parent, value, event, valueUpdater); }
private void updateKeyTitle(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) { java.lang.String selectedKey = ((java.lang.String) (object.getKeys().getSelectedItem())); if (selectedKey != null) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(selectedKey), keyField.getElement()); } }
void attachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().add(alertPanel); com.google.gwt.dom.client.Element messageDivElement = alertPanel.getMessageAt(0).getElement(); if (org.ovirt.engine.ui.common.utils.ElementUtils.detectOverflowUsingScrollWidth(messageDivElement)) { com.google.gwt.safehtml.shared.SafeHtml tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(messageDivElement.getInnerText()); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltipContent, alertPanel.getElement(), Placement.BOTTOM); } }
protected void disableElement(com.google.gwt.dom.client.Element element) { element.getStyle().setProperty("disabled", "true"); element.getStyle().setColor("#999999"); if ((getNodeDisabledTooltip()) != null) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(getNodeDisabledTooltip()), element); } }
@java.lang.Override public void setTooltip(com.google.gwt.safehtml.shared.SafeHtml tooltip) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, getElement()); }
protected void updateInputTitle(java.util.ArrayList<java.lang.String> grayOutReasons, com.google.gwt.dom.client.Element input) { java.lang.StringBuilder title = new java.lang.StringBuilder(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.empty()); for (java.lang.String reason : grayOutReasons) { title.append(reason).append(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.space()); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(title.toString()), input, Placement.LEFT); }
public void setContentWidgetContainerTooltip(java.lang.String tooltipText) { contentWidgetContainerConfiguredTooltip = tooltipText; contentWidgetContainerTooltip.setText(tooltipText); contentWidgetContainerTooltip.reconfigure(); }
private void setTooltipText(java.lang.String text) { tooltip.setText((useItalic ? wrapItalic(text) : text)); }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { if (tooltipContent == null) { tooltipContent = getTooltip(value); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.handleTooltipEvent(parent, tooltipContent, event); super.onBrowserEvent(context, parent, value, event, valueUpdater); }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.String value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.String> valueUpdater) { if ((tooltipContent == null) || (tooltipContent.asString().isEmpty())) { tooltipContent = renderTooltip(context, parent, value); } super.onBrowserEvent(context, parent, value, tooltipContent, event, valueUpdater); }
public void validate(java.util.List<java.lang.String> errors) { int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); assert (errors != null) && ((errors.size()) == rowCount) : "errors must be the same size as the contents of the table!"; for (int i = 0; i < rowCount; ++i) { com.google.gwt.dom.client.Element element = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowElement(i); assert element != null : "element shouldn't be null if errors is the same size as the contents of the table!"; java.lang.String error = errors.get(i); boolean valid = org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(error); if (!valid) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(error), element); element.addClassName(style.invalidRow()); } else { element.removeClassName(style.invalidRow()); } } }







@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.bll.storage.domain.PostZeroHandler.fixParametersWithPostZero(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), false)); }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue mergeSnapshots(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.vdscommands.MergeSnapshotsVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.MergeSnapshotsVDSCommandParameters(storagePoolId, storageDomainId, org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getVmId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().getId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().getImageId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDestinationDiskImage().getImageId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().isWipeAfterDelete()); return runVdsCommand(VDSCommandType.MergeSnapshots, org.ovirt.engine.core.bll.storage.domain.PostZeroHandler.fixParametersWithPostZero(params)); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), false)); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(VdcActionType.RemoveVmTemplate); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.domain.PostZeroHandler.fixParametersWithPostZero(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getWipeAfterDelete(), false))); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getReturnValue().getInternalVdsmTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), VdcActionType.RemoveVmTemplate, VdcObjectType.Storage, org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.setSucceeded(true); } }
private org.ovirt.engine.core.common.vdscommands.VDSParametersBase createVDSParameters() { return org.ovirt.engine.core.bll.storage.domain.PostZeroHandler.fixParametersWithPostZero(new org.ovirt.engine.core.common.vdscommands.DestroyImageVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getImageList(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().isPostZero(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().isForce())); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(4), isPostZero(), false)); }
protected static <T extends org.ovirt.engine.core.common.vdscommands.StorageDomainIdParametersBase & org.ovirt.engine.core.common.vdscommands.PostZero> T fixParametersWithPostZero(T parameters, boolean isFileDomain) { if (isFileDomain) { parameters.setPostZero(false); } return parameters; }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.bll.storage.domain.PostZeroHandler.fixParametersWithPostZero(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(4), isPostZero(), false)); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue performImageVdsmOperation() { if (org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getParameters().isShouldLockImage()) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImageSnapshotsStatusWithCompensation(org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getRelevantDiskImage().getId(), ImageStatus.LOCKED, ImageStatus.ILLEGAL, org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getCompensationContext()); } return runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.domain.PostZeroHandler.fixParametersWithPostZero(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().getId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().isWipeAfterDelete(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getParameters().getForceDelete()))); }
public static <T extends org.ovirt.engine.core.common.vdscommands.StorageDomainIdParametersBase & org.ovirt.engine.core.common.vdscommands.PostZero> T fixParametersWithPostZero(T parameters) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainStaticDao().get(parameters.getStorageDomainId()); return org.ovirt.engine.core.bll.storage.domain.PostZeroHandler.fixParametersWithPostZero(parameters, storageDomainStatic.getStorageType().isFileDomain()); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VM vm) { java.lang.String tooltipContent; if ((vm.getVmPoolId()) == null) { org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig config = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig.from(vm.getVmType(), vm.isStateless(), vm.isNextRunConfigurationExists()); tooltipContent = config.getTooltip(); } else { tooltipContent = getPoolVmTooltip(vm.getVmType()); } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(tooltipContent); }

@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData object) { return new org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn().getValue(object.getVm()); }

@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(java.lang.Object object) { return new org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn().getValue(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm()); }

@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.VM vm) { if ((vm.getVmPoolId()) == null) { org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig config = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig.from(vm.getVmType(), vm.isStateless(), vm.isNextRunConfigurationExists()); return config.getImageResource(); } else { return org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.getPoolVmImageResource(vm.getVmType(), vm.isNextRunConfigurationExists()); } }
public static java.util.Map<java.lang.String, java.lang.Object> authenticate(javax.servlet.http.HttpServletRequest req, java.lang.String scope) { java.net.HttpURLConnection connection = null; try { connection = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createConnection("/oauth/token"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(connection); java.lang.String[] credentials = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getUserCredentialsFromHeader(req); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.postData(connection, new org.ovirt.engine.core.uutils.net.URLBuilder(connection.getURL()).addParameter("grant_type", "password").addParameter("username", credentials[0]).addParameter("password", credentials[1]).addParameter("scope", scope).buildURL().getQuery()); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getData(connection); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } finally { if (connection != null) { connection.disconnect(); } } }
private static java.net.HttpURLConnection createConnection(java.lang.String uri) throws java.lang.Exception { java.net.HttpURLConnection connection = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.create(new org.ovirt.engine.core.uutils.net.URLBuilder(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_SERVICE_URL"), uri).buildURL()); connection.setDoInput(true); connection.setDoOutput(true); connection.setRequestMethod("POST"); connection.setRequestProperty("Accept", "application/json"); connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded"); connection.setRequestProperty("Content-Language", "en-US"); return connection; }
private static java.util.Map<java.lang.String, java.lang.Object> search(java.lang.String token, java.util.Map<java.lang.String, java.lang.Object> params, java.lang.String queryType, java.lang.String scope) { java.net.HttpURLConnection connection = null; try { connection = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createConnection("/oauth/token-info"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(connection); org.ovirt.engine.core.uutils.net.URLBuilder urlBuilder = new org.ovirt.engine.core.uutils.net.URLBuilder(connection.getURL()).addParameter("query_type", queryType).addParameter("scope", scope); if (org.apache.commons.lang.StringUtils.isNotEmpty(token)) { urlBuilder.addParameter("token", token); } if (params != null) { urlBuilder.addParameter("params", org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.encode(new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer().serialize(params))); } org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.postData(connection, urlBuilder.buildURL().getQuery()); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getData(connection); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } finally { if (connection != null) { connection.disconnect(); } } }
public static java.util.Map<java.lang.String, java.lang.Object> getTokenInfo(java.lang.String token, java.lang.String scope) { java.net.HttpURLConnection connection = null; try { connection = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createConnection("/oauth/token-info"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(connection); java.lang.String data = new org.ovirt.engine.core.uutils.net.URLBuilder(connection.getURL()).addParameter("token", token).buildURL().getQuery(); if (org.apache.commons.lang.StringUtils.isNotEmpty(scope)) { data = new org.ovirt.engine.core.uutils.net.URLBuilder(connection.getURL()).addParameter("token", token).addParameter("scope", scope).buildURL().getQuery(); } org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.postData(connection, data); java.util.Map<java.lang.String, java.lang.Object> jsonData = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getData(connection); java.util.Map<java.lang.String, java.lang.Object> ovirtData = ((java.util.Map<java.lang.String, java.lang.Object>) (jsonData.get("ovirt"))); if (ovirtData != null) { java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> groupIds = ((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (ovirtData.get("group_ids"))); if (groupIds != null) { ovirtData.put("group_ids", org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.processGroupMembershipsFromJson(groupIds)); } } return jsonData; } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } finally { if (connection != null) { connection.disconnect(); } } }
public static java.util.Map<java.lang.String, java.lang.Object> getToken(java.lang.String grantType, java.lang.String code, java.lang.String scope, java.lang.String redirectUri) { java.net.HttpURLConnection connection = null; try { connection = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createConnection("/oauth/token"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(connection); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.postData(connection, new org.ovirt.engine.core.uutils.net.URLBuilder(connection.getURL()).addParameter("grant_type", grantType).addParameter("code", code).addParameter("redirect_uri", redirectUri).addParameter("scope", scope).buildURL().getQuery()); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getData(connection); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } finally { if (connection != null) { connection.disconnect(); } } }
private static java.util.Map<java.lang.String, java.lang.Object> loginWithPasswordImpl(java.lang.String username, java.lang.String password, java.lang.String scope, org.ovirt.engine.api.extensions.ExtMap authRecord) { java.net.HttpURLConnection connection = null; try { connection = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createConnection("/oauth/token"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(connection); org.ovirt.engine.core.uutils.net.URLBuilder urlBuilder = new org.ovirt.engine.core.uutils.net.URLBuilder(connection.getURL()).addParameter("grant_type", "password").addParameter("username", username).addParameter("password", password).addParameter("scope", scope); if (authRecord != null) { urlBuilder.addParameter("ovirt_auth_record", new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer().serialize(authRecord)); } org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.postData(connection, urlBuilder.buildURL().getQuery()); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getData(connection); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } finally { if (connection != null) { connection.disconnect(); } } }

public static java.util.Map<java.lang.String, java.lang.Object> isSsoDeployed() { java.net.HttpURLConnection connection = null; try { connection = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createConnection("/status"); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getData(connection); } catch (java.io.FileNotFoundException ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", "oVirt Engine is initializing."); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } finally { if (connection != null) { connection.disconnect(); } } }
private static void notifyClientOfLogoutEvent(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, java.lang.String clientId, java.lang.String token) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.ClientInfo clientInfo = ssoContext.getClienInfo(clientId); java.lang.String url = clientInfo.getClientNotificationCallback(); if (org.apache.commons.lang.StringUtils.isNotEmpty(url)) { java.net.HttpURLConnection connection = null; try { connection = org.ovirt.engine.core.sso.utils.SsoUtils.createConnection(ssoContext.getSsoLocalConfig(), clientInfo, url); java.lang.String data = new org.ovirt.engine.core.uutils.net.URLBuilder(url).addParameter("event", "logout").addParameter("token", token).addParameter("token_type", "bearer").buildURL().getQuery(); connection.setRequestProperty("Content-Length", ("" + (data.length()))); connection.connect(); try (java.io.OutputStreamWriter outputWriter = new java.io.OutputStreamWriter(connection.getOutputStream())) { outputWriter.write(data); outputWriter.flush(); } try (java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream()) { final byte[] buffer = new byte[8 * 1024]; int n; try (java.io.InputStream input = connection.getInputStream()) { while ((n = input.read(buffer)) != (-1)) { os.write(buffer, 0, n); } } } } finally { if (connection != null) { connection.disconnect(); } } } }
private static void postData(java.net.HttpURLConnection connection, java.lang.String data) throws java.lang.Exception { connection.setRequestProperty("Content-Length", ("" + (data.length()))); connection.connect(); try (java.io.OutputStreamWriter outputWriter = new java.io.OutputStreamWriter(connection.getOutputStream())) { outputWriter.write(data); outputWriter.flush(); } }
public static java.util.Map<java.lang.String, java.lang.Object> revoke(java.lang.String token, java.lang.String scope) { java.net.HttpURLConnection connection = null; try { connection = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createConnection("/oauth/revoke"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(connection); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.postData(connection, new org.ovirt.engine.core.uutils.net.URLBuilder(connection.getURL()).addParameter("token", token).addParameter("scope", scope).buildURL().getQuery()); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getData(connection); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } finally { if (connection != null) { connection.disconnect(); } } }
@java.lang.Override public void rerun() { cleanupPassthroughVnics(); setFlow(null); super.rerun(); }

@java.lang.Override protected void runningFailed() { cleanupPassthroughVnics(); if (memoryFromSnapshotUsed) { removeMemoryFromActiveSnapshot(); } super.runningFailed(); }
@org.junit.Test public void shouldNotTryToMigrateWhenNotSchedulable() { when(schedulingManager.canSchedule(eq(cluster), any(org.ovirt.engine.core.common.businessentities.VM.class), anyList(), anyList(), anyList(), anyList())).thenReturn(false); affinityGroups.add(createAffinityGroup(cluster, true, vm1, vm2, vm4)); assertThat(enforcer.chooseNextVmToMigrate(cluster)).isNull(); }
@org.junit.Test public void shouldSelectFirstSchedulableFromCandidatePool() { affinityGroups.add(createAffinityGroup(cluster, true, vm1, vm2, vm3, vm5, vm6)); when(schedulingManager.canSchedule(eq(cluster), any(org.ovirt.engine.core.common.businessentities.VM.class), anyList(), anyList(), anyList(), anyList())).thenReturn(false, true); assertThat(enforcer.chooseNextVmToMigrate(cluster)).isIn(vm5, vm6); verify(schedulingManager).canSchedule(eq(cluster), eq(vm5), anyList(), anyList(), anyList(), anyList()); verify(schedulingManager).canSchedule(eq(cluster), eq(vm6), anyList(), anyList(), anyList(), anyList()); }
protected void initParametersForPassthroughVnics() { org.ovirt.engine.core.bll.RunVmCommand.getVm().setPassthroughVnicToVfMap(getVnicToVfMap()); vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); }


@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.updateStaticDataDefaults(); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.addStorageDomainInDb(); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.updateStorageDomainDynamicFromIrs(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = getLUNsFromVgInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorage()); saveLUNsInDB(luns); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.setSucceeded(true); }





@java.lang.Override public void setValue(java.util.List<T> values, boolean fireEvents) { if (changing) { return; } for (T value : values) { if (selectedList.contains(value)) { selectedList.remove(value); } else { selectedList.add(value); } } listPanel.setSelected(selectedList); updateCurrentValue(selectedList, fireEvents); }



















@java.lang.Override protected void verify(org.ovirt.engine.api.model.AffinityGroup model, org.ovirt.engine.api.model.AffinityGroup transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getCluster().getId(), transform.getCluster().getId()); assertEquals(model.isPositive(), transform.isPositive()); assertEquals(model.isEnforcing(), transform.isEnforcing()); }
public org.ovirt.engine.core.common.businessentities.LeaseState getLeaseState() { return leaseState; }
public void setLeaseState(org.ovirt.engine.core.common.businessentities.LeaseState leaseState) { this.leaseState = leaseState; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Step.class, to = org.ovirt.engine.api.model.Step.class) public static org.ovirt.engine.api.model.Step map(org.ovirt.engine.api.model.Step step, org.ovirt.engine.core.common.job.Step entity) { org.ovirt.engine.core.common.job.Step target = (entity != null) ? entity : new org.ovirt.engine.core.common.job.Step(); target.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getId())); if (step.isSetParentStep()) { target.setParentStepId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getParentStep().getId())); } target.setJobId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getJob().getId())); if (step.isSetType()) { target.setStepType(org.ovirt.engine.api.restapi.types.StepMapper.map(step.getType())); } if (step.isSetDescription()) { target.setDescription(step.getDescription()); } if (step.isSetNumber()) { target.setStepNumber(step.getNumber()); } if (step.isSetStatus()) { target.setStatus(org.ovirt.engine.api.restapi.types.StepMapper.mapStepStatus(step.getStatus())); } target.setStartTime((step.isSetStartTime() ? step.getStartTime().toGregorianCalendar().getTime() : new java.sql.Date(java.util.Calendar.getInstance().getTimeInMillis()))); target.setEndTime((step.isSetEndTime() ? step.getEndTime().toGregorianCalendar().getTime() : new java.sql.Date(java.util.Calendar.getInstance().getTimeInMillis()))); target.setExternal((step.isSetExternal() ? step.isExternal() : true)); return target; }
private boolean perform() { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setStartTime(new java.util.Date()); try { if ((connectLunDisks(getDestinationVdsId())) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } } catch (org.ovirt.engine.core.common.errors.EngineException e) { } org.ovirt.engine.core.bll.MigrateVmCommand.runningFailed(); return false; }


@java.lang.Override public void runningSucceded() { try { getDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); } finally { super.runningSucceded(); } }



@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName); }





@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(4), isPostZero(), false)); }


@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), false)); }
private boolean validateStoragePropertiesUpdate() { if ((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn("There was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }

















@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("srcInfo", srcInfo).append("dstInfo", dstInfo).append("collapse", collapse); }










private void updateHaMaintenanceAvailability(java.util.List items) { if ((items == null) || ((items.size()) != 1)) { setHaMaintenanceAvailability(false); return; } org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem(); if ((vm == null) || (!(vm.isHostedEngine()))) { setHaMaintenanceAvailability(false); } else { setHaMaintenanceAvailability(true); } }

@org.junit.Test public void testFindExternalMacAddresses() { when(mockMacPool.isMacInRange(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_1)).thenReturn(java.lang.Boolean.TRUE); when(mockMacPool.isMacInRange(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_2)).thenReturn(java.lang.Boolean.FALSE); vm.setInterfaces(java.util.Arrays.asList(vNic1, vNic2)); final java.util.Set<java.lang.String> actual = underTest.findExternalMacAddresses(vm, org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.COMMAND_CONTEXT); assertThat(actual, contains(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_2)); }
private static boolean isDisplayTypeSupported(org.ovirt.engine.core.common.businessentities.DisplayType displayType, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.DisplayType>> graphicsAndDisplays) { for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.DisplayType> pair : graphicsAndDisplays) { if (displayType.equals(pair.getSecond())) { return true; } } return false; }
public void addVideoDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, int numberOfVideoDevices) { for (int i = 0; i < numberOfVideoDevices; i++) { addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vmBase.getId()), VmDeviceGeneralType.VIDEO, vmBase.getDefaultDisplayType().getDefaultVmDeviceType(), getVideoDeviceSpecParams(vmBase), true, false); } }
@java.lang.Override protected boolean validate() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.Permission p = permissionDao.get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getPermission().getId()); if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isLastSuperUserPermission(p.getRoleId())) { org.ovirt.engine.core.bll.RemovePermissionCommand.getReturnValue().getValidationMessages().add(EngineMessage.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString()); returnValue = false; } else if ((p.getRoleType().equals(RoleType.ADMIN)) && (!(org.ovirt.engine.core.bll.RemovePermissionCommand.isSystemSuperUser()))) { addValidationMessage(EngineMessage.PERMISSION_REMOVE_FAILED_ONLY_SYSTEM_SUPER_USER_CAN_REMOVE_ADMIN_ROLES); returnValue = false; } if ((!(java.util.Objects.equals(p.getAdElementId(), org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId()))) && ((dbUserDao.get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId())) != null)) { addValidationMessage(EngineMessage.INHERITED_PERMISSION_CANT_BE_REMOVED); returnValue = false; } return returnValue; }
@org.junit.Test public void testGetLunsThatBreakDiscardFunctionalityFullDiscardFunctionalityBreaks() { createVmDiskOnSd(false, false); createVmDiskOnSd(true, true); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardSupport = createLunWithDiscardFunctionality(0L, false); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardZeroesTheDataSupport = createLunWithDiscardFunctionality(1024L, false); assertGetLunsThatBreakDiscardFunctionalityContainsExpectedLuns(java.util.Arrays.asList(createLunWithDiscardFunctionality(1024L, true), lunThatBreaksDiscardSupport, lunThatBreaksDiscardZeroesTheDataSupport), java.util.Arrays.asList(lunThatBreaksDiscardSupport, lunThatBreaksDiscardZeroesTheDataSupport)); }
@org.junit.Test public void testGetLunsThatBreakDiscardFunctionalityDiscardFunctionalityDoesntBreak() { createVmDiskOnSd(false, false); createVmDiskOnSd(true, true); assertGetLunsThatBreakDiscardFunctionalityContainsExpectedLuns(java.util.Arrays.asList(createLunWithDiscardFunctionality(1024L, true), createLunWithDiscardFunctionality(2048L, true)), java.util.Collections.emptyList()); }
private org.ovirt.engine.core.bll.ValidationResult hostStatusLegalForSetupNetworks() { java.util.List<org.ovirt.engine.core.common.businessentities.VDSStatus> supportedStatuses = java.util.Arrays.asList(VDSStatus.Maintenance, VDSStatus.Up, VDSStatus.NonOperational); boolean hostStatusLegalForSetupNetworks = (supportedStatuses.contains(host.getStatus())) || (((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing)) && (internalExecution)); if (!hostStatusLegalForSetupNetworks) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL, org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.network.host.HostValidator.VAR_HOST_STATUS, supportedStatuses, ",", supportedStatuses.size())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public void setOldClusterSnapshotWithMemory(boolean value) { oldClusterSnapshotWithMemory = value; }




@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Failed to add VM. The reasons are: {}", java.lang.String.join(",", errorMessages)); return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } }


public org.ovirt.engine.core.bll.ValidationResult isMacAssignableValidator() { java.lang.Boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); boolean macIsAlreadyUsed = macPool.isMacInUse(macAddress); boolean illegalDuplicateMacUsage = macIsAlreadyUsed && (!allowDupMacs); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.NETWORK_MAC_ADDRESS_IN_USE).when(illegalDuplicateMacUsage); }
private void getDefaultConfigurationVersion(final org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue != null) { _defaultConfigurationVersion = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); } }); callback.setHandleFailure(true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetDefaultConfigurationVersion, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), callback); }

@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue != null) { _defaultConfigurationVersion = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); }

@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel object) { driver.edit(object); pathExampleLabel.setVisible(((object.getPath().getIsAvailable()) && (object.getPath().getIsChangable()))); }

@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostViolations = getAffinityHostsResult(false, hosts, vm, new org.ovirt.engine.core.common.scheduling.PerHostMessages()).getHostViolations(); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> retList = new java.util.ArrayList<>(); int score; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { score = (hostViolations.containsKey(host.getId())) ? hostViolations.get(host.getId()) : org.ovirt.engine.core.bll.scheduling.policyunits.VmToHostAffinityWeightPolicyUnit.DEFAULT_SCORE; retList.add(new org.ovirt.engine.core.common.utils.Pair(host.getId(), score)); } return retList; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { return getAffinityHostsResult(true, hosts, vm, messages).getAcceptableHosts(); }
public static void init() { org.ovirt.engine.core.bll.utils.VmDeviceUtils.osRepository = org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().get(org.ovirt.engine.core.common.osinfo.OsRepository.class); org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade = org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().get(org.ovirt.engine.core.dal.dbbroker.DbFacade.class); org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDeviceDao(); }


@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { deactivateInstanceTypeManager(new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.InstanceTypeManager.ActivatedListener() { @java.lang.Override public void activated() { getInstanceTypeManager().updateAll(); } }); updateDefaultHost(); updateCustomPropertySheet(); updateMinAllocatedMemory(); updateNumOfSockets(); if ((getModel().getTemplateWithVersion().getSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel().getTemplateWithVersion().getSelectedItem().getTemplateVersion(); updateQuotaByCluster(template.getQuotaId(), template.getQuotaName()); } updateCpuPinningVisibility(); updateTemplate(); updateOSValues(); updateMemoryBalloon(); updateCpuSharesAvailability(); updateVirtioScsiAvailability(); activateInstanceTypeManager(); }

public void buildVmLease() { java.util.Map<java.lang.String, java.lang.Object> device = new java.util.HashMap<>(); device.put(VdsProperties.Type, VdsProperties.VmLease); device.put(VdsProperties.Device, VdsProperties.VmLease); device.put(VdsProperties.DeviceId, org.ovirt.engine.core.compat.Guid.newGuid()); java.util.Map<java.lang.String, java.lang.Object> specParams = new java.util.HashMap<>(); specParams.put(VdsProperties.VmLeaseSdId, vm.getLeaseStorageDomainId()); specParams.put(VdsProperties.VmLeaseId, vm.getId()); device.put(VdsProperties.SpecParams, specParams); devices.add(device); }
private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if (((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) || (!(validateDiscardAfterDeleteLegal(storageDomainValidator)))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("discardAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn("There was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
private void generateStructReadOne(org.ovirt.api.metamodel.concepts.StructType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getInterfaceName(type); org.ovirt.api.metamodel.tool.JavaClassName containerName = javaTypes.getContainerName(type); javaBuffer.addImport(typeName); javaBuffer.addImport(containerName); javaBuffer.addImport(JsonParser.Event.class); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.json.JsonReader.class); javaBuffer.addLine("public static %1$s readOne(JsonReader reader) {", typeName.getSimpleName()); javaBuffer.addLine("return readOne(reader, false);"); javaBuffer.addLine("}"); javaBuffer.addLine(); java.util.List<org.ovirt.api.metamodel.concepts.StructMember> members = new java.util.ArrayList<>(); members.addAll(type.getAttributes()); members.addAll(type.getLinks()); javaBuffer.addLine("public static %1$s readOne(JsonReader reader, boolean started) {", typeName.getSimpleName()); javaBuffer.addLine("if (!started) {"); javaBuffer.addLine("reader.expect(Event.START_OBJECT);"); javaBuffer.addLine("}"); javaBuffer.addLine("%1$s object = new %1$s();", containerName.getSimpleName()); javaBuffer.addLine("while (reader.next() == Event.KEY_NAME) {"); if (members.isEmpty()) { javaBuffer.addLine("reader.skip();"); } else { javaBuffer.addLine("String name = reader.getString();"); javaBuffer.addLine("switch (name) {"); members.stream().sorted().forEach(this::generateStructReadMember); javaBuffer.addLine("default:"); javaBuffer.addLine("reader.skip();"); javaBuffer.addLine("}"); } javaBuffer.addLine("}"); javaBuffer.addLine("return object;"); javaBuffer.addLine("}"); javaBuffer.addLine(); }
protected void removeSnapshotsFromDB() { for (org.ovirt.engine.core.compat.Guid snapshotId : snapshotsToRemove) { org.ovirt.engine.core.common.businessentities.Snapshot snap = snapshotDao.get(snapshotId); if (snap != null) { java.lang.String memoryVolume = snapshotDao.get(snapshotId).getMemoryVolume(); if ((!(memoryVolume.isEmpty())) && ((snapshotDao.getNumOfSnapshotsByMemory(memoryVolume)) == 1)) { boolean succeed = org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.removeMemoryDisks(memoryVolume); if (!succeed) { log.error("Failed to remove memory '{}' of snapshot '{}'", memoryVolume, snapshotId); } } snapshotDao.remove(snapshotId); } } }


public boolean validate() { if (backingFile) { getInvalidityReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.ImageInfoModel.constants.uploadImageBackingFileUnsupported()); return false; } return true; }


private void analyzeMethod(com.thoughtworks.qdox.model.JavaClass javaClass, org.ovirt.api.metamodel.concepts.Service service) { org.ovirt.api.metamodel.concepts.Method method = new org.ovirt.api.metamodel.concepts.Method(); analyzeName(javaClass, method); analyzeAnnotations(javaClass, method); analyzeDocumentation(javaClass, method); javaClass.getMethods().forEach(( x) -> analyzeMethodMember(x, method)); method.setDeclaringService(service); service.addMethod(method); }





@java.lang.Override public <U extends T> javax.enterprise.inject.Instance<U> select(java.lang.Class<U> aClass, java.lang.annotation.Annotation... annotations) { return new org.ovirt.engine.core.di.InjectorRule.SimpleInstanceIdGenerator<U>(((U) (org.ovirt.engine.core.di.InjectorRule.beansCache.get(aClass.getName())))); }
private java.util.Set<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> getNewVnicProfileMappings(org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<org.ovirt.engine.core.common.businessentities.VM> vmImportEntityData, java.util.Set<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> clusterVnicProfileMappings) { final java.util.Set<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> result = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : vmImportEntityData.getEntity().getInterfaces()) { final org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping newMapping = new org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping(vnic.getNetworkName(), vnic.getVnicProfileName(), null); if (!(clusterVnicProfileMappings.contains(newMapping))) { result.add(newMapping); } } return result; }
private void updateExternalVnicProfilesPerTargetCluster() { for (org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<org.ovirt.engine.core.common.businessentities.VM> vmImportEntityData : getEntities().getItems()) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = vmImportEntityData.getCluster().getSelectedItem(); final java.util.Set<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> clusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { clusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { clusterVnicProfileMappings = new java.util.HashSet(); externalVnicProfilesPerTargetCluster.put(cluster, clusterVnicProfileMappings); } final java.util.Set<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> vmVnicProfiles = getNewVnicProfileMappings(vmImportEntityData, clusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); } }










private void selectInitialTargetVnicProfile() { final org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> predicate; if ((getEntity().getVnicProfileId()) == null) { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { return (java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getNetworkName())) && (java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getName())); } }; } else { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { return java.util.Objects.equals(getEntity().getVnicProfileId(), vnicProfile.getId()); } }; } selectTargetVnicProfileByPredicate(predicate); }










private void updateExternalVnicProfilesPerTargetCluster() { for (org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<org.ovirt.engine.core.common.businessentities.VM> vmImportEntityData : getEntities().getItems()) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = vmImportEntityData.getCluster().getSelectedItem(); final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> clusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { clusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { clusterVnicProfileMappings = new java.util.HashSet(); externalVnicProfilesPerTargetCluster.put(cluster, clusterVnicProfileMappings); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> vmVnicProfiles = getNewVnicProfileMappings(vmImportEntityData, clusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); } }
private java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> getNewVnicProfileMappings(org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<org.ovirt.engine.core.common.businessentities.VM> vmImportEntityData, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> clusterVnicProfileMappings) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> result = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : vmImportEntityData.getEntity().getInterfaces()) { final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity(vnic.getNetworkName(), vnic.getVnicProfileName(), null); if (!(clusterVnicProfileMappings.contains(newMapping))) { result.add(newMapping); } } return result; }


@javax.annotation.PostConstruct public void init() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(vmId); if (vmStatic != null) { updateStaticFields(vmStatic); } }
void proceedDownVm() { destroyVm(); if (!(isVmRunningInDatabaseOnMonitoredHost())) { return; } logVmStatusTransition(); switch (dbVm.getStatus()) { case SavingState : resourceManager.internalSetVmStatus(dbVm, VMStatus.Suspended); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); resourceManager.removeAsyncRunningVm(dbVm.getId()); auditVmSuspended(); break; case MigratingFrom : switch (vdsmVm.getVmDynamic().getExitStatus()) { case Normal : handOverVm(); break; case Error : abortVmMigration(); if (getVmManager().isAutoStart()) { setAutoRunFlag(); break; } } break; default : auditVmOnDownEvent(); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); switch (vdsmVm.getVmDynamic().getExitStatus()) { case Error : if (resourceManager.isVmInAsyncRunningList(vdsmVm.getVmDynamic().getId())) { setRerunFlag(); break; } if (getVmManager().isAutoStart()) { setAutoRunFlag(); break; } break; case Normal : resourceManager.removeAsyncRunningVm(vdsmVm.getVmDynamic().getId()); if (getVmManager().isColdReboot()) { setColdRebootFlag(); } } } }
private void proceedDisappearedVm() { switch (dbVm.getStatus()) { case MigratingFrom : handOverVm(); break; case PoweringDown : clearVm(VmExitStatus.Normal, java.lang.String.format("VM %s shutdown complete", getVmManager().getName()), VmExitReason.Success); if (getVmManager().isColdReboot()) { setColdRebootFlag(); } break; default : clearVm(VmExitStatus.Error, java.lang.String.format("Could not find VM %s on host, assuming it went down unexpectedly", getVmManager().getName()), VmExitReason.GenericError); if (resourceManager.isVmInAsyncRunningList(dbVm.getId())) { setRerunFlag(); break; } if (getVmManager().isColdReboot()) { setColdRebootFlag(); break; } if (getVmManager().isAutoStart()) { setAutoRunFlag(); break; } } }

private void initiateResumeUploadStartTransfer(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (((result.getReturnValue()) != null) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer rv = result.getReturnValue().getActionReturnValue(); setCommandId(rv.getId()); setBytesSent(rv.getBytesSent()); startStatusPolling(); model.stopProgress(); model.getCancelCommand().execute(); } else { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeMessage(result.getReturnValue().getDescription())); model.stopProgress(); } }
private void initiateResumeUploadCheckStatus(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (((result.getReturnValue()) != null) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer rv = result.getReturnValue().getActionReturnValue(); if ((rv.getBytesTotal()) != (getImageSize())) { if ((rv.getBytesTotal()) == 0) { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeUploadOriginatedInAPI()); } else { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeSizeMessage(rv.getBytesTotal(), getImageSize())); } model.stopProgress(); return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); updates.setPhase(ImageTransferPhase.RESUMING); final org.ovirt.engine.core.common.action.TransferImageStatusParameters parameters = new org.ovirt.engine.core.common.action.TransferImageStatusParameters(rv.getId()); parameters.setUpdates(updates); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TransferImageStatus, parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { initiateResumeUploadStartTransfer(result); } }, model); } else { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeMessage(result.getReturnValue().getDescription())); model.stopProgress(); } }

private org.ovirt.engine.core.common.businessentities.network.NetworkCluster getNetworkCluster() { if ((networkCluster) == null) { org.ovirt.engine.core.common.businessentities.network.NetworkClusterId networkClusterId = new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(host.getClusterId(), attachment.getNetworkId()); networkCluster = networkClusterDao.get(networkClusterId); } return networkCluster; }


public org.ovirt.engine.core.bll.ValidationResult existingAttachmentIsReused(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> existingAttachmentsByNetworkId) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingAttachmentWithTheSameNetwork = existingAttachmentsByNetworkId.get(attachment.getNetworkId()); if (existingAttachmentWithTheSameNetwork == null) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ATTACHMENT_IS_NOT_REUSED, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_ATTACHMENT_ID, existingAttachmentWithTheSameNetwork.getId()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_NAME, existingAttachmentWithTheSameNetwork.getNetworkName())).unless(existingAttachmentWithTheSameNetwork.getId().equals(attachment.getId())); }
public org.ovirt.engine.core.bll.ValidationResult networkNotChanged(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment oldAttachment) { org.ovirt.engine.core.compat.Guid oldAttachmentId = (oldAttachment == null) ? null : oldAttachment.getId(); boolean when = (oldAttachment != null) && (!(java.util.Objects.equals(oldAttachment.getNetworkId(), attachment.getNetworkId()))); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.CANNOT_CHANGE_ATTACHED_NETWORK, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_ATTACHMENT_ID, oldAttachmentId)).when(when); }

protected org.ovirt.engine.core.common.businessentities.network.Network getNetwork() { if ((network) == null) { network = networkDao.get(attachment.getNetworkId()); } return network; }
public void onFailed() { updateEntityPhase(ImageTransferPhase.FINISHED_FAILURE); log.debug("Removing ImageTransfer id {}", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); imageTransferDao.remove(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.endWithFailure(); log.error("Failed to transfer. {} (command id '{}')", getTransferDescription(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); }
public void onSucceeded() { updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); log.debug("Removing ImageTransfer id {}", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); imageTransferDao.remove(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.endSuccessfully(); log.info("Successfully transferred. {} (command id '{}')", getTransferDescription(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); }
@java.lang.Override public boolean runInThread(java.lang.Runnable runnable) { try { executorService.submit(runnable); return true; } catch (java.util.concurrent.RejectedExecutionException e) { return false; } }











public org.ovirt.engine.core.bll.ValidationResult validateThereIsEnoughOfFreeMacs(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> vmNics, org.ovirt.engine.core.bll.network.macpool.MacPool macPool) { long requiredMacs = streamOfFilteredNics(vmNics, true).count(); boolean notEnoughOfMacs = (requiredMacs > 0) && ((macPool.getAvailableMacsCount()) < requiredMacs); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES).when(notEnoughOfMacs); }
public org.ovirt.engine.core.bll.ValidationResult validateMacAddress(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> vmNics) { for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : vmNics) { if (!(org.apache.commons.lang.StringUtils.isEmpty(iface.getMacAddress()))) { if (!(org.ovirt.engine.core.bll.validator.VmNicMacsUtils.VALIDATE_MAC_ADDRESS.matcher(iface.getMacAddress()).matches())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_NETWORK_INTERFACE_MAC_INVALID, java.lang.String.format("$IfaceName %1$s", iface.getName()), java.lang.String.format("$MacAddress %1$s", iface.getMacAddress())); } } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }

@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } macPool = getMacPool(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> domainsMap = new java.util.HashMap<>(); if (!(validateBeforeCloneVm(domainsMap))) { return false; } if (org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().isImportAsNewEntity()) { initImportClonedVm(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getInterfaces().size()) > (macPool.getAvailableMacsCount())) { return failValidation(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateBallonDevice())) { return false; } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateSoundDevice())) { return false; } return validateAfterCloneVm(domainsMap); }
protected boolean initVdss() { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); java.util.Optional<org.ovirt.engine.core.compat.Guid> vdsToRunOn = getVdsToRunOn(); setDestinationVdsId(vdsToRunOn.orElse(null)); if (vdsToRunOn.isPresent()) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn.get()); } vmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); if (!(vdsToRunOn.isPresent())) { return false; } if (((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } return true; }
private java.util.List<org.ovirt.engine.core.compat.Guid> getVdsBlackList() { java.util.List<org.ovirt.engine.core.compat.Guid> blackList = new java.util.ArrayList(org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList()); if ((org.ovirt.engine.core.bll.MigrateVmCommand.getVdsId()) != null) { blackList.add(org.ovirt.engine.core.bll.MigrateVmCommand.getVdsId()); } return blackList; }
@java.lang.Override protected void processIncoming() throws java.io.IOException, org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if ((this.ibuff) == null) { int read = read(headerBuffer); if (read <= 0) { return; } updateLastIncomingHeartbeat(); this.message = getMessage(headerBuffer, read); if ((this.message) == null) { clean(); return; } int contentLength = this.message.getContentLength(); if (contentLength == (-1)) { java.lang.String[] messages = new java.lang.String(headerBuffer.array(), UTF8).split(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.END_OF_MESSAGE); for (java.lang.String message : messages) { message = message + (END_OF_MESSAGE); emitOnMessageReceived(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.parse(message.getBytes(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.UTF8))); } return; } int length = this.message.getContent().length; if (contentLength == (length - 1)) { emitOnMessageReceived(this.message); return; } else if (contentLength > length) { this.ibuff = java.nio.ByteBuffer.allocate(((contentLength - length) + 1)); } else { byte[] content = this.message.getContent(); this.message.withContent(java.util.Arrays.copyOfRange(content, 0, (contentLength + 1))); emitOnMessageReceived(this.message); headerBuffer.put(java.util.Arrays.copyOfRange(content, (contentLength + 1), content.length)); return; } } read(this.ibuff); updateLastIncomingHeartbeat(); int length = (this.message.getContent().length) + (this.ibuff.position()); if ((this.message.getContentLength()) != (length - 1)) { return; } this.message.withAdditionalContent(this.ibuff.array()); emitOnMessageReceived(this.message); }
private void translateVolumeType(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity) { org.ovirt.engine.ui.uicompat.EnumTranslator translator = org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance(); if (translator.containsKey(volumeEntity.getVolumeType())) { getDetailModel().setVolumeTypeSilently(translator.translate(volumeEntity.getVolumeType())); } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { return brick.getQualifiedName(); }
@java.lang.Override public void setVmsWithvNumaNodeList(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsWithvNumaNodeList) { super.setVmsWithvNumaNodeList(vmsWithvNumaNodeList); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(vm.getId())) { vmsWithvNumaNodeList.add(vm); } else { for (org.ovirt.engine.core.common.businessentities.VM vmFromDb : vmsWithvNumaNodeList) { if (vmFromDb.getId().equals(vm.getId())) { vmFromDb.setvNumaNodeList(vm.getvNumaNodeList()); break; } } } }
public org.ovirt.vdsm.jsonrpc.client.ResponseBuilder run(org.codehaus.jackson.JsonNode params, org.ovirt.vdsm.jsonrpc.client.ResponseBuilder builder) { java.lang.Object result = null; try { java.util.Map apiResult = activateApi(params); if ((fieldName()) != null) { result = apiResult.get(fieldName()); } else { result = apiResult; } } catch (java.lang.Exception e) { org.ovirt.vdsmfake.rpc.json.commands.JsonCommand.log.error("Can't run api call", e); return builder.withError(((java.util.Map<java.lang.String, java.lang.Object>) (java.util.Collections.EMPTY_MAP))); } if (result instanceof java.util.Map) { builder = builder.withResult(((java.util.Map) (result))); } else if (result instanceof java.util.List) { builder = builder.withResult(((java.util.List) (result))); } else if (result instanceof java.lang.String) { builder = builder.withResult(((java.lang.String) (result))); } else if ((result != null) && (result.getClass().isArray())) { java.util.List tempList = new java.util.ArrayList(); java.util.Collections.addAll(tempList, ((java.lang.Object[]) (result))); builder = builder.withResult(tempList); } else { org.ovirt.vdsmfake.rpc.json.commands.JsonCommand.log.error(("Unknown response data --> " + result), new java.lang.Exception()); } return builder; }


private void setDetailList(final org.ovirt.engine.ui.uicommonweb.models.storage.StorageEventListModel storageEventListModel, final org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.StorageDomain> permissionListModel) { generalModel.setIsAvailable(false); dcListModel.setIsAvailable(false); this.vmBackupModel.setIsAvailable(false); this.templateBackupModel.setIsAvailable(false); vmRegisterListModel.setIsAvailable(false); templateRegisterListModel.setIsAvailable(false); diskImageRegisterListModel.setIsAvailable(false); vmListModel.setIsAvailable(false); templateListModel.setIsAvailable(false); isoListModel.setIsAvailable(false); diskListModel.setIsAvailable(false); registerDiskListModel.setIsAvailable(false); snapshotListModel.setIsAvailable(false); this.diskProfileListModel.setIsAvailable(false); java.util.List<org.ovirt.engine.ui.uicommonweb.models.HasEntity<org.ovirt.engine.core.common.businessentities.StorageDomain>> list = new java.util.ArrayList<>(); list.add(generalModel); list.add(dcListModel); list.add(vmBackupModel); list.add(templateBackupModel); list.add(vmRegisterListModel); list.add(templateRegisterListModel); list.add(diskImageRegisterListModel); list.add(vmListModel); list.add(templateListModel); list.add(isoListModel); list.add(diskListModel); list.add(registerDiskListModel); list.add(snapshotListModel); list.add(this.diskProfileListModel); list.add(storageEventListModel); list.add(permissionListModel); setDetailModels(list); }





private void onNewDR() { final org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRModel) (getWindow())); if (!(model.validate())) { return; } org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getEntity(); final org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule syncSchedule = new org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule(); syncSchedule.setFrequency(model.getFrequency().getSelectedItem()); syncSchedule.setHour(model.getHour().getEntity()); syncSchedule.setMins(model.getMins().getEntity()); org.ovirt.engine.core.compat.Guid georepId = ((model.getGeoRepSession().getSelectedItem()) != null) ? model.getGeoRepSession().getSelectedItem().getId() : null; org.ovirt.engine.core.common.action.StorageSyncScheduleParameters parameter = new org.ovirt.engine.core.common.action.StorageSyncScheduleParameters(syncSchedule, storageDomain.getId(), georepId); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.ScheduleGlusterStorageSync, parameter, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel) (result.getState())); model.stopProgress(); localModel.postSaveAction(result.getReturnValue()); } }, this); }




protected void setVdsName(final java.lang.String value) { vdsName = value; }
protected void executeSPMMergeCommand(org.ovirt.engine.core.common.vdscommands.VDSCommandType vdsCommandType) { org.ovirt.engine.core.common.vdscommands.SPMColdMergeVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SPMColdMergeVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getSubchainInfo()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(vdsCommandType, parameters); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getParentCommand()); org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.setSucceeded(true); } }
private org.ovirt.engine.core.bll.snapshots.SnapshotsValidator mockSnapshotValidator() { org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = mock(org.ovirt.engine.core.bll.snapshots.SnapshotsValidator.class); when(snapshotsValidator.vmNotDuringSnapshot(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(ValidationResult.VALID); when(snapshotsValidator.vmNotInPreview(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(ValidationResult.VALID); return snapshotsValidator; }
@org.junit.Before public void initializeMocks() { doNothing().when(command).updateDisksFromDb(); doReturn(true).when(command).checkImageConfiguration(); doReturn(mockSnapshotValidator()).when(command).getSnapshotsValidator(); doReturn(false).when(command).isVirtioScsiControllerAttached(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(false).when(command).hasWatchdog(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(false).when(command).isBalloonEnabled(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(false).when(command).isSoundDeviceEnabled(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(true).when(command).setAndValidateDiskProfiles(); doReturn(new java.util.ArrayList()).when(diskVmElementDao).getAllForVm(org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.vmId); doReturn(true).when(command).validateQuota(); doAnswer(( invocation) -> (invocation.getArguments()[0]) != null ? invocation.getArguments()[0] : org.ovirt.engine.core.compat.Guid.newGuid()).when(quotaManager).getDefaultQuotaIfNull(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class)); doReturn(ValidationResult.VALID).when(diskVmElementValidator).isPassDiscardSupported(any(org.ovirt.engine.core.compat.Guid.class)); org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); injectorRule.bind(org.ovirt.engine.core.bll.utils.VmDeviceUtils.class, vmDeviceUtils); }
private void tagListModel_SelectedItemsChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs e) { boolean hadSelectedTags = getHasSelectedTags(); updateHasSelectedTags(); if (getHasSelectedTags()) { setAllListModelsUnavailable(); getHostList().setIsAvailable(true); getVmList().setIsAvailable(true); getUserList().setIsAvailable(true); } else { updateAvailability(SystemTreeItemType.System, null); } org.ovirt.engine.ui.uicommonweb.models.ListModel oldSelectedItem = getSelectedItem(); if (((((getHasSelectedTags()) && (oldSelectedItem != (getHostList()))) && (oldSelectedItem != (getVolumeList()))) && (oldSelectedItem != (getVmList()))) && (oldSelectedItem != (getUserList()))) { setSelectedItem(getVmList()); } else if ((getHasSelectedTags()) || hadSelectedTags) { java.lang.String prefix = ""; java.lang.String search = ""; org.ovirt.engine.core.compat.RefObject<java.lang.String> tempRef_prefix = new org.ovirt.engine.core.compat.RefObject(prefix); org.ovirt.engine.core.compat.RefObject<java.lang.String> tempRef_search = new org.ovirt.engine.core.compat.RefObject(search); splitSearchString(getSelectedItem().getDefaultSearchString(), tempRef_prefix, tempRef_search); prefix = tempRef_prefix.argvalue; search = tempRef_search.argvalue; setSearchStringPrefix(prefix); setSearchString(search); getSearchCommand().execute(); searchStringChanged(); } }
private void setAllListModelsUnavailable() { for (org.ovirt.engine.ui.uicommonweb.models.ListModel m : getItems()) { m.setIsAvailable(false); } }











private org.ovirt.engine.core.bll.context.CommandContext buildCommandContext(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getJobId()))) { executionContext.setJob(jobRepository.getJobWithSteps(cmdEntity.getJobId())); } else if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getStepId()))) { executionContext.setStep(jobRepository.getStep(cmdEntity.getStepId())); } return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext); }
public static org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid userId, long engineSessionSeqId, org.ovirt.engine.core.compat.Guid commandId, org.ovirt.engine.core.compat.Guid parentCommandId, org.ovirt.engine.core.compat.Guid rootCommandId, org.ovirt.engine.core.compat.Guid jobId, org.ovirt.engine.core.compat.Guid stepId, org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase params, org.ovirt.engine.core.compat.CommandStatus status, boolean callbackEnabled, org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue, java.util.Map<java.lang.String, java.io.Serializable> data) { org.ovirt.engine.core.common.businessentities.CommandEntity entity = new org.ovirt.engine.core.common.businessentities.CommandEntity(); entity.setEngineSessionSeqId(engineSessionSeqId); entity.setUserId(userId); entity.setId(commandId); entity.setParentCommandId(parentCommandId); entity.setRootCommandId(rootCommandId); entity.setJobId(jobId); entity.setStepId(stepId); entity.setCommandType(actionType); entity.setCommandParameters(params); entity.setCommandStatus(status); entity.setCallbackEnabled(callbackEnabled); entity.setReturnValue(returnValue); entity.setData(data); return entity; }





@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.AuditLog event) { if (event.isExternal()) { getCallsHandler().executeModification("InsertExternalAuditLog", getExternalEventSqlMapper(event)); } else { getCallsHandler().executeModification("InsertAuditLog", getSqlMapper(event)); } }
private static java.lang.String getMessageToLog(java.lang.String loggerString, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { if (loggerString.isEmpty()) { return auditLog.toStringForLogging(); } else { return java.text.MessageFormat.format(loggerString, auditLog.getMessage()); } }


public static java.util.Map<java.lang.String, java.lang.Object> prepareLocationInfoForVdsCommand(org.ovirt.engine.core.common.businessentities.LocationInfo locationInfo) { if (locationInfo instanceof org.ovirt.engine.core.common.businessentities.ExternalLocationInfo) { org.ovirt.engine.core.common.businessentities.ExternalLocationInfo info = ((org.ovirt.engine.core.common.businessentities.ExternalLocationInfo) (locationInfo)); if (ConnectionMethod.HTTP.equals(info.getConnectionMethod())) { org.ovirt.engine.core.common.businessentities.HttpLocationInfo httpInfo = ((org.ovirt.engine.core.common.businessentities.HttpLocationInfo) (info)); java.util.Map<java.lang.String, java.lang.Object> infoMap = new java.util.HashMap<>(); infoMap.put("method", "http"); infoMap.put("url", httpInfo.getUrl()); infoMap.put("headers", httpInfo.getHeaders()); return infoMap; } } if (locationInfo instanceof org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) { org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo info = ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (locationInfo)); java.util.Map<java.lang.String, java.lang.Object> infoMap = new java.util.HashMap<>(); infoMap.put("endpoint_type", "div"); infoMap.put("sd_id", info.getStorageDomainId().toString()); infoMap.put("img_id", info.getImageGroupId().toString()); infoMap.put("vol_id", info.getImageId().toString()); return infoMap; } throw new java.lang.RuntimeException("Unsupported location info"); }
@java.lang.Override public org.ovirt.engine.api.model.ImageTransfer get() { return performGet(VdcQueryType.GetImageTransferById, new org.ovirt.engine.core.common.queries.IdQueryParameters(guid)); }
@java.lang.Override public org.ovirt.engine.core.common.job.Step getStep(org.ovirt.engine.core.compat.Guid stepId) { return stepDao.get(stepId); }
org.ovirt.engine.core.common.job.Step getStep(org.ovirt.engine.core.compat.Guid stepId);
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.GetStepsByJobIdQuery.getQueryReturnValue().setReturnValue(stepDao.getStepsByJobId(org.ovirt.engine.core.bll.GetStepsByJobIdQuery.getParameters().getJobId())); }
private org.ovirt.engine.core.bll.context.CommandContext buildCommandContext(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getJobId()))) { executionContext.setJob(jobRepository.getJobWithSteps(cmdEntity.getJobId())); } else if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getStepId()))) { executionContext.setStep(jobRepository.getStep(cmdEntity.getStepId())); } return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext); }
private void reorderNics() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDevice> vmInterfaceDevices = getVmInterfaceDevices(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> nics = vmNicDao.getAllForVm(org.ovirt.engine.core.bll.network.vm.ReorderVmNicsCommand.getParameters().getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> nicsToReorder = new java.util.ArrayList<>(); java.util.List<java.lang.String> macsToReorder = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNic nic : nics) { org.ovirt.engine.core.common.businessentities.VmDevice nicDevice = vmInterfaceDevices.get(nic.getId()); if ((nicDevice == null) || (org.apache.commons.lang.StringUtils.isEmpty(nicDevice.getAddress()))) { nicsToReorder.add(nic); macsToReorder.add(nic.getMacAddress()); } } java.util.Collections.sort(nicsToReorder, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); java.util.Collections.sort(macsToReorder); for (int i = 0; i < (nicsToReorder.size()); ++i) { org.ovirt.engine.core.common.businessentities.network.VmNic nic = nicsToReorder.get(i); nic.setMacAddress(macsToReorder.get(i)); vmNicDao.update(nic); } }

private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.CommandBase<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info("Command {} id: '{}': attempting to determine the job status by polling the entity.", cmd.getActionType(), cmd.getCommandId()); return pollEntity(cmd); } if (jobsReportedByHost) { log.error(("Command {} id: '{}': entity polling isn't supported and the job isn't reported by the host," + "assuming it failed so that the command execution will end."), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } if (cmd.failJobWithUndeterminedStatus()) { log.error(("Command {} id: '{}': failed to determine the actual job status, considering as failed as per" + " the command implementation"), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } }
private void handlePolledJobStatus(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, org.ovirt.engine.core.common.businessentities.HostJobInfo jobInfo) { if ((jobInfo.getStatus()) != (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed)) { return; } if ((jobInfo.getError()) != null) { jobInfo.setStatus(cmd.handleJobError(jobInfo.getError().getCode())); if ((jobInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.done)) { jobInfo.setProgress(null); } } }


private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.CommandBase<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info("Command {} id: '{}': attempting to determine the job status by polling the entity.", cmd.getActionType(), cmd.getCommandId()); return pollEntity(cmd); } if (jobsReportedByHost) { log.error(("Command {} id: '{}': entity polling isn't supported and the job isn't reported by the host," + "assuming it failed so that the command execution will end."), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } log.error("Command {} id: '{}': entity polling isn't supported, will retry to poll the job soon", cmd.getActionType(), cmd.getCommandId()); return null; }


protected void initEffectiveCompatibilityVersion() { setEffectiveCompatibilityVersion(org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVmStaticData(), this::getCluster)); }
@org.junit.Test public void checkInvalidAddress() { assertFalse(underTest.test(generateVdsNetworkInterface(org.ovirt.engine.core.utils.network.predicate.AbstractVdsNetworkInterfacePredicateTest.INVALID))); }
@java.lang.Override protected void executeVdsBrokerCommand() { log.info("-- executeVdsBrokerCommand: calling 'copyVolumeData'"); status = org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getBroker().copyData(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getJobId().toString(), buildLocationInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getSrcInfo()), buildLocationInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getDstInfo())); org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.proceedProxyReturnValue(); }

@java.lang.Override protected void executeVmCommand() { if (shouldAddLease(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm())) { if (org.ovirt.engine.core.common.FeatureSupported.isVmLeasesSupported(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getEffectiveCompatibilityVersion())) { if (!(addVmLease(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getId()))) { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().setLeaseStorageDomainId(null); } } else { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().setLeaseStorageDomainId(null); auditLogDirector.log(this, AuditLogType.CANNOT_IMPORT_VM_WITH_LEASE_COMPAT_VERSION); } } super.executeVmCommand(); }
public java.lang.String getConfigurationValue(java.lang.String miimonValue) { return (((org.ovirt.engine.core.common.businessentities.network.BondMode.MODE) + (value)) + " miimon=") + miimonValue; }
void initComboBox() { keyListBoxEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.StringRenderer<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo>() { @java.lang.Override public java.lang.String render(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo optionInfo) { if (optionInfo != null) { return optionInfo.getKey(); } return null; } }); keyTextBoxEditor = new org.ovirt.engine.ui.common.widget.editor.generic.StringEntityModelTextBoxEditor(); keyComboBox = new org.ovirt.engine.ui.common.widget.ComboBox(keyListBoxEditor, keyTextBoxEditor); }

private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { log.info("Finalizing successful transfer for {}", getTransferDescription()); if (stopImageTransferSession(context.entity)) { org.ovirt.engine.core.compat.Guid transferingVdsId = context.entity.getVdsId(); if (verifyImage(transferingVdsId)) { setVolumeLegalityInStorage(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.LEGAL_IMAGE); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.unLockImage(); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); } else { setImageStatus(ImageStatus.ILLEGAL); updateEntityPhase(ImageTransferPhase.FINALIZING_FAILURE); } tearDownImage(context.entity.getVdsId()); } }
@java.lang.Override protected org.ovirt.engine.ui.common.widget.AbstractUiCommandButton createCommandButton(java.lang.String label, java.lang.String uniqueId) { if (VmBasedWidgetSwitchModeCommand.NAME.equals(uniqueId)) { org.ovirt.engine.ui.common.widget.LeftAlignedUiCommandButton leftAlignedUiCommandButton = new org.ovirt.engine.ui.common.widget.LeftAlignedUiCommandButton(label); leftAlignedUiCommandButton.setCustomContentStyle(style.showAdvancedOptionsButton()); return leftAlignedUiCommandButton; } return super.createCommandButton(label, uniqueId); }
@javax.ws.rs.Path("{action: (activate|migrate|stopmigrate)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (undelete)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (getprofilestatistics|rebalance|resetalloptions|resetoption|setoption|start|startprofile|stop|stopprofile|stoprebalance)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (activate|deactivate|export|move)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (end)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (activate|approve|commitnetconfig|deactivate|enrollcertificate|fence|forceselectspm|install|iscsidiscover|iscsilogin|refresh|setupnetworks|unregisteredstoragedomainsdiscover|upgrade)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@java.lang.Override public org.ovirt.engine.api.resource.ActionResource getActionResource(java.lang.String action, java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendActionResource(action, id)); }
@javax.ws.rs.Path("{action: (disable|enable|resolve)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
public org.ovirt.engine.api.resource.ActionResource getActionResource(java.lang.String action, java.lang.String oid) { return new org.ovirt.engine.api.resource.ActionResource() { @java.lang.Override public javax.ws.rs.core.Response get() { java.net.URI uri = java.net.URI.create(org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(newModel(id)).getHref()); javax.ws.rs.core.Response.Status status = Response.Status.MOVED_PERMANENTLY; return javax.ws.rs.core.Response.status(status).location(uri).build(); } @java.lang.Override public org.ovirt.engine.api.model.Action getAction() { return null; } }; }
public static java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> getSubServices(java.lang.Class<?> resource) { java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> resources = new java.util.ArrayList<>(); for (java.lang.reflect.Method method : org.ovirt.engine.api.rsdl.ServiceTree.getMethods(resource, org.ovirt.engine.api.rsdl.ServiceTree.SUB_RESOURCES)) { javax.ws.rs.Path path = method.getAnnotation(javax.ws.rs.Path.class); if ((!(method.getReturnType().equals(org.ovirt.engine.api.resource.ActionResource.class))) && (!(method.getReturnType().equals(org.ovirt.engine.api.resource.CreationResource.class)))) { resources.add(org.ovirt.engine.api.rsdl.ServiceTree.buildNode(method.getReturnType(), path.value())); } } return resources; }
@javax.ws.rs.Path("{action: (isattached|refreshluns)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (export)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (allocatevm)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (attach|detach|updatevirtualfunctionsconfiguration)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (restore)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (copy)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (copy|export)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (move)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (cancelmigration|clone|commit_snapshot|detach|export|freezefilesystems|logon|maintenance|migrate|move|preview_snapshot|reboot|reordermacaddresses|shutdown|start|stop|suspend|thawfilesystems|ticket|undo_snapshot)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (proxyticket)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (replace)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (copy|export|move)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (reloadconfigurations)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (resetemulatedmachine)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (importcertificates|testconnectivity)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (clear|end)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
public void addNetworkFiltersToNic(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VmNic vmNic) { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = fetchVnicProfileNetworkFilter(vmNic); if (networkFilter != null) { final java.lang.String networkFilterName = networkFilter.getName(); struct.put(VdsProperties.NW_FILTER, networkFilterName); } }
@java.lang.Override protected void init() { super.init(); setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getContainerId()); setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getStoragePoolId()); imageToDestinationDomainMap = org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getImageToDestinationDomainMap(); if (((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm()) != null) && ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap()) != null)) { imageList = new java.util.ArrayList(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { imageList.add(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))); } } } ensureDomainMap(imageList, org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getDestDomainId()); }

public java.util.Map hostdevListByCaps() { final org.ovirt.vdsmfake.domain.Host host = getActiveHost(); try { java.util.Map resultMap = getDoneStatus(); java.util.Map infoMap = map(); infoMap.put("computer", getCapability()); infoMap.put("pci_0000_00_1b_0", getHardware(0)); infoMap.put("pci_0000_00_1b_1", getHardware(1)); infoMap.put("pci_0000_00_1b_2", getHardware(2)); infoMap.put("pci_0000_00_1b_3", getHardware(3)); infoMap.put("pci_0000_00_1b_4", getHardware(4)); infoMap.put("pci_0000_00_1b_5", getHardware(5)); infoMap.put("pci_0000_00_1b_6", getHardware(6)); infoMap.put("pci_0000_00_1b_7", getHardware(7)); infoMap.put("pci_0000_00_1b_8", getHardware(8)); infoMap.put("pci_0000_00_1b_9", getHardware(9)); infoMap.put("pci_0000_00_1b_10", getHardware(10)); infoMap.put("pci_0000_00_1b_11", getHardware(11)); infoMap.put("pci_0000_00_1f_12", getHardware(12)); resultMap.put("info", infoMap); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }

private void setupParameters() { org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setImageGroupID(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setDestinationImageId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImageGroupID())); }
private void writeCdRom(org.ovirt.engine.core.utils.ovf.xml.XmlTextWriter writer, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices, org.ovirt.engine.core.common.businessentities.VM vm) { if (devices.isEmpty()) { return; } org.ovirt.engine.core.common.businessentities.VmDevice device = devices.get(0); writer.writeStartElement("disk"); writer.writeAttributeString("type", "file"); writer.writeAttributeString("device", "cdrom"); writer.writeAttributeString("snapshot", "no"); writer.writeStartElement("source"); writer.writeAttributeString("file", "optional"); writer.writeAttributeString("startupPolicy", "optional"); writer.writeEndElement(); java.lang.String cdInterface = getOsRepository().getCdInterface(vm.getOs(), vm.getCompatibilityVersion(), org.ovirt.engine.core.common.businessentities.ChipsetType.fromMachineType(vm.getEmulatedMachine())); writer.writeStartElement("target"); writer.writeAttributeString("dev", "hdc"); writer.writeAttributeString("bus", cdInterface); writer.writeEndElement(); writer.writeElement("readonly", null); writeAliasAndAddress(writer, device); writer.writeEndElement(); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } macPool = getMacPool(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> domainsMap = new java.util.HashMap<>(); if (!(validateBeforeCloneVm(domainsMap))) { return false; } if (org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().isImportAsNewEntity()) { initImportClonedVm(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getInterfaces().size()) > (macPool.getAvailableMacsCount())) { return failValidation(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateBallonDevice())) { return false; } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateSoundDevice())) { return false; } if (!(validate(org.ovirt.engine.core.bll.VmHandler.validateMaxMemorySize(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVmTemplate(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getEffectiveCompatibilityVersion())))) { return false; } return validateAfterCloneVm(domainsMap); }





@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } org.ovirt.engine.core.common.queries.VdcQueryReturnValue res = runInternalQuery(VdcQueryType.GetGraphicsDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(getParameters().getDev().getVmId())); if (res.getSucceeded()) { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> devices = res.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.GraphicsDevice device : devices) { if (device.getGraphicsType().equals(getParameters().getDev().getGraphicsType())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_ONLY_ONE_DEVICE_WITH_THIS_GRAPHICS_ALLOWED); } } return true; } return false; }
private int getNeededNumberOfVideoDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { int maxMonitorsSpice = (vmBase.getSingleQxlPci()) ? org.ovirt.engine.core.bll.utils.VmDeviceUtils.SINGLE_QXL_MONITORS : vmBase.getNumOfMonitors(); int maxMonitorsVnc = java.lang.Math.max(org.ovirt.engine.core.bll.utils.VmDeviceUtils.VNC_MIN_MONITORS, vmBase.getNumOfMonitors()); return java.lang.Math.min(maxMonitorsSpice, maxMonitorsVnc); }


private void updateQcowCompat() { if ((org.ovirt.engine.core.common.FeatureSupported.qcowCompatSupported(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getCompatibilityVersion())) && (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getVolumeFormat().equals(VolumeFormat.COW))) { org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImageId(), false); if (qemuImageInfo != null) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().setQcowCompat(qemuImageInfo.getQcowCompat()); imageDao.update(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage()); } } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() { return null; }
public static java.util.Map<java.lang.String, java.lang.String> prepareSubchainInfoForVdsCommand(org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo) { java.util.Map<java.lang.String, java.lang.String> map = new java.util.HashMap<>(); map.put("sd_id", subchainInfo.getStorageDomainId().toString()); map.put("img_id", subchainInfo.getImageGroupId().toString()); map.put("base_id", subchainInfo.getBaseImageId().toString()); map.put("top_id", subchainInfo.getTopImageId().toString()); return map; }

@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId).append("imageGroupId", imageGroupId).append("baseImageId", baseImageId).append("topImageId", topImageId).build(); }



@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId).append("imageGroupId", imageGroupId).append("baseImageId", baseImageId).append("topImageId", topImageId).build(); }

@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel object) { driver.edit(object); if (object.isVmUnpinned()) { setVisibilityToVmUnpinningWarrningPanel(true); } if ((object.getChangedFields().size()) > 0) { setVisibilityToChangedFieldsExpander(true); com.google.gwt.safehtml.shared.SafeHtmlBuilder changedFieldsBuilder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); for (java.lang.String field : object.getChangedFields()) { java.lang.String escapedField = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(field); changedFieldsBuilder.append(bulletedItem(escapedField)); } changedFields.setHTML(changedFieldsBuilder.toSafeHtml()); } setVisibilityToHotChanges(object); }
@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { java.util.Collection<java.lang.String> packages = org.ovirt.engine.core.bll.host.HostUpgradeManager.getPackagesForCheckUpdate(host.getVdsType(), host.getClusterCompatibilityVersion()); try (final org.ovirt.engine.core.bll.hostdeploy.VdsDeploy hostPackagesManager = createPackagesManager(host, true)) { hostPackagesManager.addUnit(new org.ovirt.engine.core.bll.hostdeploy.VdsDeployPackagesUnit(packages, false)); hostPackagesManager.execute(); } catch (final java.lang.Exception e) { org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error("Failed to update host '{}' packages '{}'.", host.getName(), org.apache.commons.lang.StringUtils.join(packages, ", ")); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error("Exception", e); throw new java.lang.RuntimeException(e); } }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (vdsManager.isMonitoringNeeded()) { org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher fetcher = new org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher(vdsManager); long fetchTime = java.lang.System.nanoTime(); if (fetcher.fetch()) { getVmsMonitoring().perform(fetcher.getChangedVms(), fetchTime, vdsManager, true); processDevices(fetcher.getVdsmVms().stream(), fetchTime); } else { org.ovirt.engine.core.vdsbroker.monitoring.PollVmStatsRefresher.log.info("Failed to fetch vms info for host '{}' - skipping VMs monitoring.", vdsManager.getVdsName()); } } }

@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.AffinityLabel.class, to = org.ovirt.engine.core.common.businessentities.Label.class) public static org.ovirt.engine.core.common.businessentities.Label map(org.ovirt.engine.api.model.AffinityLabel model, org.ovirt.engine.core.common.businessentities.Label template) { org.ovirt.engine.core.common.businessentities.LabelBuilder entity = (template != null) ? new org.ovirt.engine.core.common.businessentities.LabelBuilder(template) : new org.ovirt.engine.core.common.businessentities.LabelBuilder(); if (model.isSetId()) { entity.id(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.name(model.getName()); } if (model.isSetReadOnly()) { entity.readOnly(model.isReadOnly()); } if ((model.isSetVms()) && (model.getVms().isSetVms())) { model.getVms().getVms().forEach(( vm) -> entity.vm(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(vm.getId()))); } if ((model.isSetHosts()) && (model.getHosts().isSetHosts())) { model.getHosts().getHosts().forEach(( host) -> entity.host(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(host.getId()))); } return entity.build(); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.Disk model, org.ovirt.engine.api.model.Disk transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getImageId(), transform.getImageId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.isReadOnly(), transform.isReadOnly()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getLogicalName(), transform.getLogicalName()); assertEquals(model.getOpenstackVolumeType().getName(), transform.getOpenstackVolumeType().getName()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals("unexpected status", model.getStatus(), transform.getStatus()); assertEquals("unexpected sparse", model.isSparse(), transform.isSparse()); assertEquals("unexpected propagate errors", model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals("unexpected wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals("unexpected shareable", model.isShareable(), transform.isShareable()); }
protected javax.ws.rs.core.Response attachDiskToVm(org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource resource, org.ovirt.engine.api.model.DiskAttachment attachment, org.ovirt.engine.api.restapi.resource.IResolver entityResolver) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(attachment.getDisk().getId()); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = map(attachment); dve.getId().setVmId(vmId); dve.getId().setDeviceId(diskId); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve); org.ovirt.engine.api.model.Disk disk = attachment.getDisk(); boolean isDiskActive = false; if (attachment.isSetActive()) { isDiskActive = org.apache.commons.lang.BooleanUtils.toBoolean(attachment.isActive()); } params.setPlugUnPlug(isDiskActive); boolean isDiskReadOnly = false; if (disk.isSetReadOnly()) { isDiskReadOnly = org.apache.commons.lang.BooleanUtils.toBoolean(disk.isReadOnly()); } params.setReadOnly(isDiskReadOnly); if (disk.isSetSnapshot()) { validateParameters(disk, "snapshot.id"); params.setSnapshotId(asGuid(disk.getSnapshot().getId())); } return resource.performCreate(VdcActionType.AttachDiskToVm, params, entityResolver); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.AffinityLabel model, org.ovirt.engine.core.common.businessentities.Label entity) { org.ovirt.engine.core.common.businessentities.LabelBuilder newEntity = new org.ovirt.engine.core.common.businessentities.LabelBuilder(entity); if (model.isSetReadOnly()) { newEntity.readOnly(model.isReadOnly()); } if (model.isSetName()) { newEntity.name(model.getName()); } return new org.ovirt.engine.core.common.action.LabelActionParameters(newEntity.build()); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.DiskSnapshot model, org.ovirt.engine.api.model.DiskSnapshot transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.isReadOnly(), transform.isReadOnly()); assertEquals(model.getDescription(), transform.getDescription()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals("unexpected status", model.getStatus(), transform.getStatus()); assertEquals("unexpected sparse", model.isSparse(), transform.isSparse()); assertEquals("unexpected propagate errors", model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals("unexpected wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals("unexpected shareable", model.isShareable(), transform.isShareable()); }


@java.lang.Override protected void executeVdsBrokerCommand() { buildVmData(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.log.info("VM {}", createInfo); vmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getBroker().create(createInfo); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(vm.getDynamicData(), vmReturn.vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getVds()); }
@javax.annotation.PostConstruct public void create() { log.info("oVirt optimizer service starting"); threads = new java.util.HashSet<>(); int refresh = java.lang.Integer.parseInt(configProvider.load().getConfig().getProperty(ConfigProvider.SOLVER_CLUSTER_REFRESH)); discoveryTimer = scheduler.createTimer(refresh, org.ovirt.optimizer.solver.jobs.ClusterDiscoveryTrigger.class); }
public synchronized void discoveryTimeout(final org.quartz.JobDetail timer) { if ((timer.getKey()) != (discoveryTimer.getJobDetail().getKey())) { log.warn(java.lang.String.format("Unknown timeout from %s", timer.toString())); return; } log.debug("Discovering clusters..."); java.util.Set<java.lang.String> availableClusters = discovery.getClusters(); if (availableClusters == null) { log.error("Cluster discovery failed"); return; } java.util.Set<java.lang.String> missingClusters; synchronized(clusterOptimizers) { missingClusters = new java.util.HashSet(clusterOptimizers.keySet()); missingClusters.removeAll(availableClusters); availableClusters.removeAll(clusterOptimizers.keySet()); } java.util.Properties config = new org.ovirt.optimizer.config.ConfigProvider().load().getConfig(); final int maxSteps = java.lang.Integer.parseInt(config.getProperty(ConfigProvider.SOLVER_STEPS)); for (java.lang.String clusterId : availableClusters) { log.info(java.lang.String.format("New cluster %s detected", clusterId)); org.ovirt.optimizer.solver.thread.ClusterOptimizer planner = org.ovirt.optimizer.solver.thread.ClusterOptimizer.optimizeCluster(client, configProvider, clusterId, maxSteps, new org.ovirt.optimizer.solver.thread.ClusterOptimizer.Finished() { @java.lang.Override public void solvingFinished(org.ovirt.optimizer.solver.thread.ClusterOptimizer planner, java.lang.Thread thread) { threads.remove(thread); } }); java.lang.Thread updater = new java.lang.Thread(planner.getUpdaterInstance()); java.lang.Thread solver = new java.lang.Thread(planner); updater.start(); threads.add(updater); solver.start(); threads.add(solver); synchronized(clusterOptimizers) { clusterOptimizers.put(clusterId, planner); } } synchronized(clusterOptimizers) { for (java.lang.String clusterId : missingClusters) { clusterOptimizers.get(clusterId).terminate(); clusterOptimizers.get(clusterId).getUpdaterInstance().terminate(); log.info(java.lang.String.format("Cluster %s was removed", clusterId)); } } }
public java.util.List<java.io.File> customRuleFiles() { java.io.File dir = new java.io.File(config.getProperty(org.ovirt.optimizer.config.ConfigProvider.SOLVER_CUSTOM_RULE_DIR)); java.util.List<java.io.File> listOfDrlFiles = new java.util.ArrayList<>(); java.io.File[] candidateFiles = dir.listFiles(); if (candidateFiles == null) { org.ovirt.optimizer.config.ConfigProvider.log.warn("Could not get a list of custom DRL files"); return listOfDrlFiles; } org.ovirt.optimizer.config.ConfigProvider.log.debug("Found {} custom DRL candidate files", candidateFiles.length); for (java.io.File input : candidateFiles) { if ((input.isFile()) && (input.getName().endsWith(".drl"))) { listOfDrlFiles.add(input); org.ovirt.optimizer.config.ConfigProvider.log.debug("Using {} custom DRL file", input.getName()); } } return listOfDrlFiles; }
private void updateImportedVmDevice(org.ovirt.engine.core.common.businessentities.VmBase vmBase, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.compat.Guid deviceId, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate) { org.ovirt.engine.core.common.businessentities.VmDevice exportedDevice = vmBase.getManagedDeviceMap().get(deviceId); if (exportedDevice != null) { vmDevice.setAddress(exportedDevice.getAddress()); vmDevice.setBootOrder(exportedDevice.getBootOrder()); vmDevice.setIsPlugged(exportedDevice.getIsPlugged()); vmDevice.setIsReadOnly(exportedDevice.getIsReadOnly()); vmDevicesToUpdate.add(vmDevice); } }
private void setDefaultBootDevice() { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : _images) { disk.getDiskVmElements().stream().forEach(( dve) -> dve.setId(new org.ovirt.engine.core.common.businessentities.VmDeviceId(disk.getId(), vmBase.getId()))); disk.setDiskVmElements(disk.getDiskVmElements()); } boolean hasBootDevice = vmBase.getManagedDeviceMap().values().stream().anyMatch(( device) -> (device.getBootOrder()) > 0); if (hasBootDevice) { return; } java.util.concurrent.atomic.AtomicInteger order = new java.util.concurrent.atomic.AtomicInteger(1); _images.stream().filter(( d) -> d.getDiskVmElementForVm(vmBase.getId()).isBoot()).map(( image) -> vmBase.getManagedDeviceMap().get(image.getId())).filter(java.util.Objects::nonNull).forEachOrdered(( device) -> device.setBootOrder(order.getAndIncrement())); }
public static void deserialize(com.google.gwt.user.client.rpc.SerializationStreamReader streamReader, org.ovirt.engine.core.common.queries.VdcQueryReturnValue instance) throws com.google.gwt.user.client.rpc.SerializationException { instance.setSucceeded(streamReader.readBoolean()); instance.setExceptionString(streamReader.readString()); java.lang.String type = streamReader.readString(); java.lang.Object returnValue; java.lang.String deserializedAs = null; if (type == null) { returnValue = null; } else if (type.equals("java.lang.String")) { deserializedAs = "java.util.String"; instance.setReturnValue(streamReader.readString()); } else if (type.equals("java.lang.Integer")) { deserializedAs = "java.lang.Integer"; instance.setReturnValue(streamReader.readInt()); } else if (type.equals("java.lang.Boolean")) { deserializedAs = "java.lang.Boolean"; instance.setReturnValue(streamReader.readBoolean()); } else if (type.equals("java.lang.Double")) { deserializedAs = "java.lang.Double"; instance.setReturnValue(streamReader.readDouble()); } else if (type.equals("java.lang.Float")) { deserializedAs = "java.lang.Float"; instance.setReturnValue(streamReader.readFloat()); } else if (type.equals("java.lang.Character")) { deserializedAs = "java.lang.Character"; instance.setReturnValue(streamReader.readChar()); } else if (type.equals("java.lang.Short")) { deserializedAs = "java.lang.Short"; instance.setReturnValue(streamReader.readShort()); } else if (type.equals("java.lang.Byte")) { deserializedAs = "java.lang.Byte"; instance.setReturnValue(streamReader.readByte()); } else if (type.equals("java.util.List")) { deserializedAs = "java.util.List"; instance.setReturnValue(streamReader.readObject()); } else if (type.equals("java.util.Map")) { deserializedAs = "java.util.Map"; instance.setReturnValue(streamReader.readObject()); } else if (type.equals("java.util.Set")) { deserializedAs = "java.util.Set"; instance.setReturnValue(streamReader.readObject()); } else if (type.equals("IVdcQueryable")) { deserializedAs = "IVdcQueryable"; instance.setReturnValue(streamReader.readObject()); } else if (type.equals("UNKNOWN")) { deserializedAs = "UNKNOWN"; instance.setReturnValue(streamReader.readObject()); } }
public boolean poll(org.ovirt.engine.core.compat.Guid hostId) { waitBetweenPolls(); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace("Request to do poll for host {}.", hostId); org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runFutureVdsCommand(FutureVDSCommandType.Poll, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(hostId)); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace("FutureVDSCommandType.Poll executed for host{}.", hostId); boolean succeeded = getValue(task); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace("Result of FutureVDSCommandType.Poll for host {}: {}", hostId, succeeded); timestampOfEndOfPreviousInvocation = currentTimestamp(); return succeeded; }
private boolean getValue(org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = task.get(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SetupNetworksPollingTimeout), java.util.concurrent.TimeUnit.SECONDS); return vdsReturnValue.getSucceeded(); } catch (java.util.concurrent.TimeoutException e) { return false; } }
@org.junit.Test public void testGetValue() { assertEquals(("Wrong getValue() for " + (value)), value.ordinal(), value.getValue()); }
@org.junit.Test public void testForValue() { assertEquals(("Wrong forValue() for " + (value)), value, org.ovirt.engine.core.common.queries.ConfigurationValues.forValue(value.getValue())); }


@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase.getQueryReturnValue().setReturnValue(getUserRequestForStorageDomainRepoFileList()); }
public boolean isRebootCommandExecutionAllowed(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { if ((vms.isEmpty()) || (!(org.ovirt.engine.core.common.VdcActionUtils.canExecutePartially(vms, org.ovirt.engine.core.common.businessentities.VM.class, VdcActionType.RebootVm)))) { return false; } for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { boolean guestAgentPresent = !(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(vm.getIp())); boolean acpiEnabled = java.lang.Boolean.TRUE.equals(vm.getAcpiEnable()); if (!(guestAgentPresent || acpiEnabled)) { return false; } } return true; }

@java.lang.Override protected void proceedProxyReturnValue() { try { super.proceedProxyReturnValue(); } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ignored) { org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.log.debug("VDSNetworkException was caught and ignored", ignored); } }

@org.junit.Test public void testCreateDecoratedTwoRequestsToGetDifferentlyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); assertThat(factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); assertThat(factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorB)), instanceOf(java.lang.reflect.Proxy.class)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor1 = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy).createLockingInstance(eq(macPoolDecoratorA), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor1.capture()); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor2 = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy).createLockingInstance(eq(macPoolDecoratorB), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor2.capture()); assertEquals(captor1.getValue(), captor2.getValue()); }

@org.junit.Test public void testCreateDecoratedPoolByTwoDecorators() { doAnswer(( invocation) -> invocation.getArguments()[0]).when(lockedObjectFactoryMock).createLockingInstance(any(), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any()); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool = decoratePoolWhileNotUsingLocking(java.util.Arrays.asList(macPoolDecoratorA, macPoolDecoratorB)); assertThat(decoratedPool, is(macPoolDecoratorB)); java.lang.String macToPropagate = "macToPropagate"; when(macPool.allocateNewMac()).thenReturn(macToPropagate); java.lang.String propagatedMac = decoratedPool.allocateNewMac(); assertThat(propagatedMac, is(macToPropagate)); verify(macPoolDecoratorA).allocateNewMac(); verify(macPoolDecoratorB).allocateNewMac(); verify(macPool).allocateNewMac(); verifyNoMoreInteractions(macPoolDecoratorA); verifyNoMoreInteractions(macPoolDecoratorB); verifyNoMoreInteractions(macPool); }
public org.ovirt.engine.core.bll.network.macpool.MacPool createDecoratedPool(org.ovirt.engine.core.compat.Guid macPoolId, org.ovirt.engine.core.bll.network.macpool.MacPool poolById, java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator> decorators) { org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool = decoratePool(macPoolId, poolById, decorators); return lockedObjectFactory.createLockingInstance(decoratedPool, org.ovirt.engine.core.bll.network.macpool.MacPool.class, lockForMacPool(macPoolId)); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetEquallyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); assertThat(factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); assertThat(factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(macPoolDecoratorA), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor.capture()); java.util.List<java.util.concurrent.locks.ReentrantReadWriteLock> capturesValues = captor.getAllValues(); assertEquals(capturesValues.get(0), capturesValues.get(1)); }
public void modifyPool(org.ovirt.engine.core.common.businessentities.MacPool macPool) { try (org.ovirt.engine.core.utils.lock.AutoCloseableLock lock = writeLockResource()) { if (!(macPools.containsKey(macPool.getId()))) { throw new java.lang.IllegalStateException(org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.INEXISTENT_POOL_EXCEPTION_MESSAGE); } removeWithoutLocking(macPool.getId()); initializeMacPool(macPool); } }
@java.lang.Override public final void freeMacs(java.util.List<java.lang.String> macs) { java.util.List<java.lang.String> macsToRelease = filterOutUnusedMacs(macs); if (!(macsToRelease.isEmpty())) { getStrategyForMacRelease().releaseMacsOnCommit(macsToRelease); } }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { org.ovirt.engine.core.bll.context.CompensationContext compensationContext = this.commandContext.getCompensationContext(); org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.UsingCompensationState.ReleaseMacsCompensationListener compensationListener = this.compensationListener; compensationListener.macsToReleaseOnCommit.addAll(macs); compensationContext.addListener(compensationListener); }
public org.ovirt.engine.core.bll.network.macpool.MacPool getMacPoolById(org.ovirt.engine.core.compat.Guid macPoolId) { return getMacPoolById(macPoolId, java.util.Collections.emptyList()); }
@java.lang.Override public java.util.List<java.lang.String> allocateMacAddresses(int numberOfAddresses) { java.util.List<java.lang.Long> macs = macsStorage.allocateAvailableMacs(numberOfAddresses); java.util.Collections.sort(macs); logWhenMacPoolIsEmpty(); return org.ovirt.engine.core.utils.MacAddressRangeUtils.macAddressesToStrings(macs); }
private void initializeMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool) { java.util.List<java.lang.String> macsForMacPool = macPoolDao.getAllMacsForMacPool(macPool.getId()); final org.ovirt.engine.core.bll.network.macpool.MacPool pool = createPoolInternal(macPool); for (java.lang.String mac : macsForMacPool) { pool.forceAddMac(mac); } }
@java.lang.Override public void freeMacs(java.util.List<java.lang.String> macs) { for (java.lang.String mac : macs) { macsStorage.freeMac(org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong(mac)); } }
public org.ovirt.engine.core.bll.network.macpool.MacPool createDecoratedPool(org.ovirt.engine.core.bll.network.macpool.MacPool macPool, java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator> decorators) { org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool = decoratePool(macPool, decorators); return lockedObjectFactory.createLockingInstance(decoratedPool, org.ovirt.engine.core.bll.network.macpool.MacPool.class, lockForMacPool(macPool.getId())); }

@java.lang.Override public void cleaningCompensationDataAfterSuccess() { macsToReleaseOnCommit.forEach(macPool::freeMac); }
@java.lang.Override public void onSuccess() { releaseMacs(); }
@java.lang.Override public void onRollback() { releaseMacs(); }
private java.util.List<org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.TransactionalStrategyState> getStrategyForMacAllocation() { java.util.List<org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.TransactionalStrategyState> states = new java.util.ArrayList<>(); if (usingCompensationState.shouldUseCompensation()) { states.add(usingCompensationState); } boolean shouldUseTxDecorator = (org.ovirt.engine.core.utils.transaction.TransactionSupport.current()) != null; if (shouldUseTxDecorator) { states.add(usingTxDecoratorState); } if (states.isEmpty()) { states.add(nontransactionalState); } return states; }
private org.ovirt.engine.core.bll.network.macpool.MacPool decoratePool(org.ovirt.engine.core.bll.network.macpool.MacPool macPool, java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator> decorators) { org.ovirt.engine.core.bll.network.macpool.MacPool result = macPool; if (decorators != null) { for (org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator decorator : decorators) { decorator.setMacPool(result); result = decorator; } } return result; }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { macs.forEach(macPool::freeMac); }






private void initCreateOrUpdateBondParameters() { org.ovirt.engine.core.common.utils.NetworkCommonUtils.fillBondSlaves(allExistingNics); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : allExistingNics) { if (nic.isBond()) { getHostSetupNetworksParametersData().getBonds().add(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(((org.ovirt.engine.core.common.businessentities.network.Bond) (nic)))); } } }






@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.compat.Guid cmdId = command.getCommandId(); org.ovirt.engine.core.bll.SerialChildExecutingCommand serialChildExecutingCommand = ((org.ovirt.engine.core.bll.SerialChildExecutingCommand) (command)); if ((!anyFailed) || (serialChildExecutingCommand.ignoreChildCommandFailure())) { try { boolean endCommand = !(serialChildExecutingCommand.performNextOperation(completedChildren)); if (!endCommand) { return; } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.info("Command '{}' id: '{}' failed when attempting to perform the next operation, marking as FAILED '{}'", command.getActionType(), cmdId, childCmdIds, command.getCommandStatus()); serialChildExecutingCommand.handleFailure(); anyFailed = true; } } else { serialChildExecutingCommand.handleFailure(); } setCommandEndStatus(command, anyFailed, status, childCmdIds); }
@org.junit.Test public void testExecuteQueryWithNotExistingIscsiBond() { org.ovirt.engine.core.common.businessentities.IscsiBond iscsiBond = new org.ovirt.engine.core.common.businessentities.IscsiBond(); iscsiBond.setId(org.ovirt.engine.core.compat.Guid.newGuid()); when(getQueryParameters().getId()).thenReturn(iscsiBondId); when(iscsiBondDao.get(org.ovirt.engine.core.compat.Guid.newGuid())).thenReturn(iscsiBond); getQuery().executeQueryCommand(); org.ovirt.engine.core.common.businessentities.IscsiBond result = getQuery().getQueryReturnValue().getReturnValue(); assertNull(result); }

@java.lang.Override public void init(javax.servlet.FilterConfig config) throws javax.servlet.ServletException { org.ovirt.engine.api.restapi.LocalConfig localConfig = org.ovirt.engine.api.restapi.LocalConfig.getInstance(); supportedVersions = localConfig.getSupportedVersions(); defaultVersion = localConfig.getDefaultVersion(); }



public static void main(java.lang.String... args) { org.ovirt.engine.core.config.EngineConfigCLIParser parser = null; try { parser = new org.ovirt.engine.core.config.EngineConfigCLIParser(); parser.parse(args); org.ovirt.engine.core.config.EngineConfigMap argsMap = parser.getEngineConfigMap(); if ((argsMap.getLogFile()) != null) { org.ovirt.engine.core.utils.log.JavaLoggingUtils.addFileHandler(argsMap.getLogFile()); } if ((argsMap.getLogLevel()) != null) { org.ovirt.engine.core.utils.log.JavaLoggingUtils.setLogLevel(argsMap.getLogLevel()); } } catch (java.lang.Throwable t) { java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } try { org.ovirt.engine.core.config.EngineConfig.getInstance().setUpAndExecute(parser); } catch (java.lang.Throwable t) { org.slf4j.LoggerFactory.getLogger(org.ovirt.engine.core.config.EngineConfigExecutor.class).debug("Exiting with error: ", t); java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } }
public static void main(java.lang.String[] args) { org.ovirt.engine.core.notifier.utils.NotificationProperties prop = null; org.ovirt.engine.core.notifier.NotificationService notificationService = null; org.ovirt.engine.core.notifier.EngineMonitorService engineMonitorService = null; try { prop = org.ovirt.engine.core.notifier.utils.NotificationProperties.getInstance(); org.ovirt.engine.core.utils.log.JavaLoggingUtils.setLogLevel(prop.getProperty(org.ovirt.engine.core.notifier.LOG_LEVEL)); prop.validate(); notificationService = new org.ovirt.engine.core.notifier.NotificationService(prop); engineMonitorService = new org.ovirt.engine.core.notifier.EngineMonitorService(prop); notificationService.registerTransport(new org.ovirt.engine.core.notifier.transport.smtp.Smtp(prop)); notificationService.registerTransport(new org.ovirt.engine.core.notifier.transport.snmp.Snmp(prop)); if (!(notificationService.hasTransports())) { throw new java.lang.RuntimeException(("No transport is enabled, please enable at least one of SMTP (using MAIL_SERVER option)" + " or SNMP (using SNMP_MANAGERS option) transports.")); } } catch (java.lang.Exception ex) { org.ovirt.engine.core.notifier.Notifier.log.error("Failed to initialize", ex); java.lang.System.err.println(ex.getMessage()); java.lang.System.exit(1); } if (((args != null) && ((args.length) > 0)) && (org.ovirt.engine.core.notifier.Notifier.ARG_VALIDATE.equals(args[0]))) { java.lang.System.exit(0); } try { notificationService.run(); engineMonitorService.run(); } catch (java.lang.Exception e) { org.ovirt.engine.core.notifier.Notifier.log.error("Failed to run the event notification service. ", e); java.lang.System.exit(1); } }
public static void setLogLevel(java.lang.String levelName) { org.ovirt.engine.core.utils.log.JavaLoggingUtils.OVIRT_LOGGER.setLevel(org.ovirt.engine.core.utils.log.JavaLoggingUtils.parseLevel(levelName)); }
private java.lang.Integer calcMaxVCpu() { return org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu(vm.getStaticData(), vm.getClusterCompatibilityVersion()); }


private void writevCpu(org.ovirt.engine.core.utils.ovf.xml.XmlTextWriter writer, java.util.Map<java.lang.String, java.lang.Object> createInfo, org.ovirt.engine.core.common.businessentities.VM vm) { writer.writeStartElement("vcpu"); writer.writeAttributeString("current", java.lang.String.valueOf(vm.getNumOfCpus())); writer.writeRaw((org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.HotPlugCpuSupported, vm.getCompatibilityVersion(), vm.getClusterArch()) ? org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu(vm.getStaticData(), vm.getClusterCompatibilityVersion()).toString() : java.lang.String.valueOf(vm.getNumOfCpus()))); writer.writeEndElement(); }

@java.lang.Override protected void onAdd(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value, org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor widget) { super.onAdd(value, widget); value.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsNicLabelWidget.this, null); } }); }
@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value, org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor widget) { super.onRemove(value, widget); com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, null); }
@java.lang.Override protected void init(org.ovirt.engine.ui.uicommonweb.models.hosts.VfsNicLabelModel model) { super.init(model); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : model.getItems()) { labelModel.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsNicLabelWidget.this, null); } }); } }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.VfsNicLabelModel model) { suggestions = model.getSuggestedLabels(); super.edit(model); }
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> createGhostValue() { org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); value.setItems(suggestions); value.setSelectedItem(""); return value; }
@org.junit.Before public void init() { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.String>> initialHashes = new java.util.ArrayList<>(); initialHashes.add(new org.ovirt.engine.core.common.utils.Pair(org.ovirt.engine.core.vdsbroker.monitoring.VmDevicesMonitoringTest.VM_ID, org.ovirt.engine.core.vdsbroker.monitoring.VmDevicesMonitoringTest.INITIAL_HASH)); doReturn(initialHashes).when(vmDynamicDao).getAllDevicesHashes(); org.ovirt.engine.core.vdsbroker.monitoring.VmDevicesMonitoringTest.injectorRule.bind(javax.transaction.TransactionManager.class, transactionManager); }

protected boolean removeVmLease(org.ovirt.engine.core.compat.Guid leaseStorageDomainId, org.ovirt.engine.core.compat.Guid vmId) { if (leaseStorageDomainId == null) { return true; } return runVdsCommand(VDSCommandType.RemoveVmLease, new org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters(org.ovirt.engine.core.bll.VmCommand.getVm().getStoragePoolId(), leaseStorageDomainId, vmId)).getSucceeded(); }
protected boolean addVmLease(org.ovirt.engine.core.compat.Guid leaseStorageDomainId, org.ovirt.engine.core.compat.Guid vmId) { if (leaseStorageDomainId == null) { return true; } return runVdsCommand(VDSCommandType.AddVmLease, new org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters(getStoragePoolId(), leaseStorageDomainId, vmId)).getSucceeded(); }





@org.junit.Test public void networkInUseByTemplates() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmTemplate template = mock(org.ovirt.engine.core.common.businessentities.VmTemplate.class); when(template.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); networkNotUsedByTemplatesTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.failsWithNetworkInUse(), java.util.Collections.singletonList(template)); }
@org.junit.Test public void networkInUseByHosts() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VDS host = mock(org.ovirt.engine.core.common.businessentities.VDS.class); when(host.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); networkNotUsedByHostsTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.failsWithNetworkInUse(), java.util.Collections.singletonList(host)); }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()) != null) { vmPoolDao.removeVmFromVmPool(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmId()); if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isUpdatePrestartedVms()) { vmPoolDao.boundVmPoolPrestartedVms(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()); } org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); } }





@com.google.gwt.uibinder.client.UiHandler("container") void onPanelDragDrop(com.google.gwt.event.dom.client.DropEvent event) { org.ovirt.engine.core.compat.Guid vmGuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(event.getData("VM_GID")); boolean pinned = java.lang.Boolean.valueOf(event.getData("PINNED")); int vNumaNodeIndex = java.lang.Integer.parseInt(event.getData("INDEX")); container.removeStyleName(style.dragOver()); event.preventDefault(); org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(this, vmGuid, pinned, vNumaNodeIndex, pNumaNodeIndex); }








private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { return genericSearch(storagePoolDao, true); }

protected org.ovirt.engine.core.common.businessentities.VMStatus createVm() { final java.lang.String cdPath = chooseCd(); if (org.apache.commons.lang.StringUtils.isNotEmpty(cdPath)) { org.ovirt.engine.core.bll.RunVmCommand.log.info("Running VM with attached cd '{}'", cdPath); } updateCurrentCd(cdPath); org.ovirt.engine.core.bll.RunVmCommand.getVm().setCdPath(cdPathWindowsToLinux(cdPath)); if (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getParameters().getFloppyPath()))) { org.ovirt.engine.core.bll.RunVmCommand.getVm().setFloppyPath(cdPathWindowsToLinux(org.ovirt.engine.core.bll.RunVmCommand.getParameters().getFloppyPath())); } if (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getVm().getInitrdUrl()))) { org.ovirt.engine.core.bll.RunVmCommand.getVm().setInitrdUrl(getIsoPrefixFilePath(org.ovirt.engine.core.bll.RunVmCommand.getVm().getInitrdUrl())); } if (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getVm().getKernelUrl()))) { org.ovirt.engine.core.bll.RunVmCommand.getVm().setKernelUrl(getIsoPrefixFilePath(org.ovirt.engine.core.bll.RunVmCommand.getVm().getKernelUrl())); } initParametersForExternalNetworks(); initParametersForPassthroughVnics(); org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = ((org.ovirt.engine.core.common.businessentities.VMStatus) (org.ovirt.engine.core.bll.RunVmCommand.getVdsBroker().runAsyncVdsCommand(VDSCommandType.Create, buildCreateVmParameters(), this).getReturnValue())); memoryFromSnapshotUsed = (vmStatus.isRunning()) || (vmStatus == (org.ovirt.engine.core.common.businessentities.VMStatus.RestoringState)); return vmStatus; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmOnceParams)) { return false; } org.ovirt.engine.core.common.action.RunVmOnceParams other = ((org.ovirt.engine.core.common.action.RunVmOnceParams) (obj)); return (((((((super.equals(obj)) && (java.util.Objects.equals(sysPrepDomainName, other.sysPrepDomainName))) && (java.util.Objects.equals(sysPrepUserName, other.sysPrepUserName))) && (java.util.Objects.equals(sysPrepPassword, other.sysPrepPassword))) && (java.util.Objects.equals(vmInit, other.vmInit))) && (java.util.Objects.equals(destinationVdsId, other.destinationVdsId))) && (java.util.Objects.equals(customEmulatedMachine, other.customEmulatedMachine))) && (java.util.Objects.equals(customCpuName, other.customCpuName)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), sysPrepDomainName, sysPrepUserName, sysPrepPassword, vmInit, destinationVdsId, customEmulatedMachine, customCpuName); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmParams)) { return false; } org.ovirt.engine.core.common.action.RunVmParams other = ((org.ovirt.engine.core.common.action.RunVmParams) (obj)); return ((((((((((((((((((((java.util.Objects.equals(getVmId(), other.getVmId())) && ((bootSequence) == (other.bootSequence))) && (java.util.Objects.equals(diskPath, other.diskPath))) && (java.util.Objects.equals(runAndPause, other.runAndPause))) && ((acpiEnable) == (other.acpiEnable))) && (java.util.Objects.equals(win2kHackEnable, other.win2kHackEnable))) && (java.util.Objects.equals(customProperties, other.customProperties))) && (java.util.Objects.equals(floppyPath, other.floppyPath))) && (java.util.Objects.equals(clientIp, other.clientIp))) && (java.util.Objects.equals(requestingUser, other.requestingUser))) && ((initializationType) == (other.initializationType))) && (java.util.Objects.equals(runAsStateless, other.runAsStateless))) && (java.util.Objects.equals(initrdUrl, other.initrdUrl))) && (java.util.Objects.equals(kernelUrl, other.kernelUrl))) && (java.util.Objects.equals(kernelParams, other.kernelParams))) && (java.util.Objects.equals(payload, other.payload))) && ((balloonEnabled) == (other.balloonEnabled))) && ((cpuShares) == (other.cpuShares))) && (java.util.Objects.equals(bootMenuEnabled, other.bootMenuEnabled))) && (java.util.Objects.equals(spiceFileTransferEnabled, other.spiceFileTransferEnabled))) && (java.util.Objects.equals(spiceCopyPasteEnabled, other.spiceCopyPasteEnabled)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(getVmId(), bootSequence, diskPath, runAndPause, acpiEnable, win2kHackEnable, customProperties, floppyPath, clientIp, requestingUser, initializationType, runAsStateless, initrdUrl, kernelUrl, kernelParams, payload, balloonEnabled, cpuShares, bootMenuEnabled, spiceFileTransferEnabled, spiceCopyPasteEnabled); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmOnceParams)) { return false; } org.ovirt.engine.core.common.action.RunVmOnceParams other = ((org.ovirt.engine.core.common.action.RunVmOnceParams) (obj)); return (((((((super.equals(obj)) && (java.util.Objects.equals(sysPrepDomainName, other.sysPrepDomainName))) && (java.util.Objects.equals(sysPrepUserName, other.sysPrepUserName))) && (java.util.Objects.equals(sysPrepPassword, other.sysPrepPassword))) && (java.util.Objects.equals(vmInit, other.vmInit))) && (java.util.Objects.equals(destinationVdsId, other.destinationVdsId))) && (java.util.Objects.equals(customEmulatedMachine, other.customEmulatedMachine))) && (java.util.Objects.equals(customCpuName, other.customCpuName)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), sysPrepDomainName, sysPrepUserName, sysPrepPassword, vmInit, destinationVdsId, customEmulatedMachine, customCpuName); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmParams)) { return false; } org.ovirt.engine.core.common.action.RunVmParams other = ((org.ovirt.engine.core.common.action.RunVmParams) (obj)); return (((((((((((((((java.util.Objects.equals(getVmId(), other.getVmId())) && (java.util.Objects.equals(diskPath, other.diskPath))) && (java.util.Objects.equals(runAndPause, other.runAndPause))) && (java.util.Objects.equals(win2kHackEnable, other.win2kHackEnable))) && (java.util.Objects.equals(customProperties, other.customProperties))) && (java.util.Objects.equals(floppyPath, other.floppyPath))) && (java.util.Objects.equals(clientIp, other.clientIp))) && (java.util.Objects.equals(requestingUser, other.requestingUser))) && ((initializationType) == (other.initializationType))) && (java.util.Objects.equals(runAsStateless, other.runAsStateless))) && (java.util.Objects.equals(initrdUrl, other.initrdUrl))) && (java.util.Objects.equals(kernelUrl, other.kernelUrl))) && (java.util.Objects.equals(kernelParams, other.kernelParams))) && (java.util.Objects.equals(payload, other.payload))) && ((balloonEnabled) == (other.balloonEnabled))) && ((cpuShares) == (other.cpuShares)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(getVmId(), diskPath, runAndPause, win2kHackEnable, customProperties, floppyPath, clientIp, requestingUser, initializationType, runAsStateless, initrdUrl, kernelUrl, kernelParams, payload, balloonEnabled, cpuShares); }
private java.lang.String messageFormatter(java.lang.String msg, java.lang.String vmid) { org.codehaus.jackson.node.ObjectNode vmDetailNode = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); vmDetailNode.put("status", msg); vmDetailNode.put("hash", java.lang.Integer.toString(vmid.hashCode())); org.codehaus.jackson.node.ObjectNode paramsNode = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); paramsNode.put(vmid.toString(), vmDetailNode); org.codehaus.jackson.node.ObjectNode node = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); node.put("params", paramsNode); node.put("jsonrpc", "2.0"); node.put("method", ("|virt|VM_status|" + vmid)); return node.toString(); }
private void vmUpdateStatus(final org.ovirt.vdsmfake.domain.VM vm, final org.ovirt.vdsmfake.domain.VM.VMStatus status, final long delay, final java.lang.String msg, final boolean removeClient) throws java.lang.InterruptedException { java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newFixedThreadPool(5); java.util.concurrent.Future<java.lang.Void> future = ((java.util.concurrent.Future<java.lang.Void>) (executor.submit(() -> { try { java.util.concurrent.TimeUnit.MILLISECONDS.sleep(delay); vm.setStatus(status); sendNotification(msg, vm.getId(), removeClient); org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.info("VM {} set to {}", vm.getId(), msg); if (isUpdateRequired(status)) { org.ovirt.vdsmfake.domain.VdsmManager.getInstance().updateHost(vm.getHost()); } } catch (java.lang.Exception e) { e.printStackTrace(); } }))); try { future.get(); } catch (java.util.concurrent.ExecutionException e) { e.printStackTrace(); } }
private boolean isUpdateRequired(org.ovirt.vdsmfake.domain.VM.VMStatus status) { return status == (VM.VMStatus.Up) ? true : status == (VM.VMStatus.PoweringDown) ? true : status == (VM.VMStatus.Paused) ? true : false; }
private void sendNotification(java.lang.String message, java.lang.String vmId, boolean removeClient) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if (message == null) { org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.warn("empty message has arrived, ignore empty messages"); } send(messageFormatter(message, vmId), vmId, removeClient); }
protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setInitializationType(initializationType); return parameters; }
protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.setPassthroughVnicToVfMap(initParametersForPassthroughVnics()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setVmPayload(vmPayload); if ((((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }




@java.lang.Override public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runPublicQuery(org.ovirt.engine.core.common.queries.VdcQueryType actionType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters) { parameters.setRefresh(false); switch (actionType) { case GetAAAProfileList : case RegisterVds : case CheckDBConnection : case GetDbUserBySession : case GetEngineSessionIdForSsoToken : case ValidateSession : return runQueryImpl(actionType, parameters, false); case GetConfigurationValue : org.ovirt.engine.core.common.queries.GetConfigurationValueParameters configParameters = ((org.ovirt.engine.core.common.queries.GetConfigurationValueParameters) (parameters)); switch (configParameters.getConfigValue()) { case VdcVersion : case ProductRPMVersion : case ApplicationMode : case UserSessionTimeOutInterval : case CORSSupport : case CORSAllowedOrigins : return runQueryImpl(actionType, parameters, false); default : break; } default : break; } return getErrorQueryReturnValue(EngineMessage.USER_CANNOT_RUN_QUERY_NOT_PUBLIC); }

protected void initParametersForPassthroughVnics() { org.ovirt.engine.core.bll.RunVmCommand.getVm().setPassthroughVnicToVfMap(getVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommand.getVdsId())); vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); }
protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setVmPayload(vmPayload); if ((((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }







private void storeNetwork() throws java.io.UnsupportedEncodingException { java.lang.StringBuilder output = new java.lang.StringBuilder(); if ((vmInit.getNetworks()) != null) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInitNetwork> networks = vmInit.getNetworks(); for (org.ovirt.engine.core.common.businessentities.VmInitNetwork iface : networks) { if (java.lang.Boolean.TRUE.equals(iface.getStartOnBoot())) { output.append("auto ").append(iface.getName()).append("\n"); } output.append((((("iface " + (iface.getName())) + " inet ") + (iface.getIpv4BootProtocol().getDisplayName())) + "\n")); if (org.apache.commons.lang.StringUtils.isNotEmpty(iface.getIpv4Address())) { output.append(((" address " + (iface.getIpv4Address())) + "\n")); } if (org.apache.commons.lang.StringUtils.isNotEmpty(iface.getIpv4Netmask())) { output.append(((" netmask " + (iface.getIpv4Netmask())) + "\n")); } if (org.apache.commons.lang.StringUtils.isNotEmpty(iface.getIpv4Gateway())) { output.append(((" gateway " + (iface.getIpv4Gateway())) + "\n")); } if ((vmInit.getDnsServers()) != null) { output.append(" dns-nameservers").append(" ").append(vmInit.getDnsServers()); output.append("\n"); } if ((vmInit.getDnsSearch()) != null) { output.append(" dns-search").append(" ").append(vmInit.getDnsSearch()); output.append("\n"); } } } interfaces = output.toString(); if (!(interfaces.isEmpty())) { metaData.put("network-interfaces", interfaces); storeNextFile(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.CloudInitFileMode.NETWORK, "/etc/network/interfaces", interfaces.getBytes("US-ASCII")); } }

private int calculateValue(org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster) { int res = 0; if (networkCluster != null) { if (networkCluster.isManagement()) { res += 10; } if (networkCluster.isDisplay()) { res += 4; } if (networkCluster.isMigration()) { res += 2; } if (networkCluster.isGluster()) { res += 1; } } return res; }







@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getBroker().hotplugMemory(buildData()); org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.setVdsRuntimeErrorAndReport(e); org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getVDSReturnValue().setExceptionString(null); } }
@org.junit.Before public void init() { syncJob = spy(org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJob.getInstance()); syncJob.setLogUtil(logUtil); org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.injectorRule.bind(org.ovirt.engine.core.utils.lock.LockManager.class, lockManager); doReturn(clusterDao).when(syncJob).getClusterDao(); doReturn(vdsDao).when(syncJob).getVdsDao(); doReturn(geoRepDao).when(syncJob).getGeoRepDao(); doReturn(volumeDao).when(syncJob).getVolumeDao(); doReturn(getClusters()).when(clusterDao).getAll(); doReturn(getVolume()).when(volumeDao).getByName(any(org.ovirt.engine.core.compat.Guid.class), anyString()); doReturn(getVolume()).when(volumeDao).getById(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(getServer()).when(glusterUtil).getRandomUpServer(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(glusterUtil).when(syncJob).getGlusterUtil(); doReturn(getSessions(2, true)).when(geoRepDao).getGeoRepSessionsInCluster(org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.CLUSTER_GUID); }
@org.junit.Before public void init() { syncJob.setLogUtil(logUtil); org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.injectorRule.bind(org.ovirt.engine.core.utils.lock.LockManager.class, lockManager); doReturn(clusterDao).when(syncJob).getClusterDao(); doReturn(vdsDao).when(syncJob).getVdsDao(); doReturn(geoRepDao).when(syncJob).getGeoRepDao(); doReturn(volumeDao).when(syncJob).getVolumeDao(); doReturn(getClusters()).when(clusterDao).getAll(); doReturn(getVolume()).when(volumeDao).getByName(any(org.ovirt.engine.core.compat.Guid.class), anyString()); doReturn(getVolume()).when(volumeDao).getById(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(getServer()).when(glusterUtil).getRandomUpServer(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(glusterUtil).when(syncJob).getGlusterUtil(); doReturn(getSessions(2, true)).when(geoRepDao).getGeoRepSessionsInCluster(org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.CLUSTER_GUID); }
private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(( v1, v2) -> v1.compareTo(v2)); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); if (retVal.isPresent()) { dataCenters.stream().forEach(( dataCenter) -> dataCenter.setStoragePoolCompatibilityLevelUpgradeNeeded(((retVal.get().compareTo(dataCenter.getCompatibilityVersion())) > 0))); } return dataCenters; }




private java.util.Map<java.lang.String, java.lang.Object> createVmProperties() { java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(); map.put(VdsProperties.vm_name, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVmName()); map.put(VdsProperties.PoolId, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getStoragePoolId().toString()); map.put(VdsProperties.DomainId, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getStorageDomainId().toString()); map.put(VdsProperties.vm_disks, getDisksProperties()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getDisks()) { map.put(VdsProperties.Format, diskImage.getVolumeFormat().toString()); map.put(VdsProperties.DISK_ALLOCATION, diskImage.getVolumeType().toString()); break; } if ((org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVirtioIsoPath()) != null) { map.put(VdsProperties.VIRTIO_ISO_PATH, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVirtioIsoPath()); } return map; }
private void initCommandBase() { initUser(); org.ovirt.engine.core.bll.job.ExecutionContext executionContext = context.getExecutionContext(); if ((executionContext.getJob()) != null) { setJobId(executionContext.getJob().getId()); } else if ((executionContext.getStep()) != null) { setJobId(executionContext.getStep().getJobId()); } setCorrelationId(parameters.getCorrelationId()); }






@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.createVnicProfileValidator(); return (((((((((validate(validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileForVmNetworkOnly()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.passthroughProfileContainsSupportedProperties()))) && (validate(validator.validUseDefaultNetworkFilterFlag(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFiterId())))) && (validate(validator.validNetworkFilterId())); }


@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.UpdateVnicProfileCommand.createVnicProfileValidator(); return ((((((((((validate(validator.vnicProfileIsSet())) && (validate(validator.vnicProfileExists()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.networkNotChanged()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.portMirroringNotChangedIfUsedByVms()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.UpdateVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.passthroughNotChangedIfUsedByVms()))) && (validate(validator.passthroughProfileContainsSupportedProperties()))) && (validate(validator.validNetworkFilterId())); }
private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(java.util.Comparator.naturalOrder()); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); if (retVal.isPresent()) { dataCenters.stream().forEach(( dataCenter) -> dataCenter.setStoragePoolCompatibilityLevelUpgradeNeeded(((retVal.get().compareTo(dataCenter.getCompatibilityVersion())) > 0))); } return dataCenters; }




private void setDiskProfilesList(java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> diskProfiles) { if ((diskProfiles != null) && (!(diskProfiles.isEmpty()))) { getDiskProfile().setItems(diskProfiles); } org.ovirt.engine.core.compat.Guid defaultProfileId = (((getDisk()) != null) && ((getDisk().getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE))) ? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getDiskProfileId() : null; if (defaultProfileId != null) { for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile profile : diskProfiles) { if (profile.getId().equals(defaultProfileId)) { getDiskProfile().setSelectedItem(profile); return; } } org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile = new org.ovirt.engine.core.common.businessentities.profiles.DiskProfile(); diskProfile.setId(defaultProfileId); if ((getDisk()) != null) { diskProfile.setName(getDiskImage().getDiskProfileName()); } diskProfiles.add(diskProfile); getDiskProfile().setItems(diskProfiles); getDiskProfile().setSelectedItem(diskProfile); } }
@java.lang.Override public org.ovirt.engine.api.model.Vm update(org.ovirt.engine.api.model.Vm incoming) { validateParameters(incoming); if ((incoming.isSetCluster()) && ((incoming.getCluster().isSetId()) || (incoming.getCluster().isSetName()))) { org.ovirt.engine.core.compat.Guid clusterId = lookupClusterId(incoming); if (!(clusterId.toString().equals(get().getCluster().getId()))) { performAction(VdcActionType.ChangeVMCluster, new org.ovirt.engine.core.common.action.ChangeVMClusterParameters(clusterId, guid, null)); } } if (!(isFiltered())) { if (incoming.isSetPlacementPolicy()) { parent.validateAndUpdateHostsInPlacementPolicy(incoming.getPlacementPolicy()); } } else { incoming.setPlacementPolicy(null); } org.ovirt.engine.api.model.Vm vm = performUpdate(incoming, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetVmByVmId, org.ovirt.engine.core.common.queries.IdQueryParameters.class), VdcActionType.UpdateVm, new org.ovirt.engine.api.restapi.resource.BackendVmResource.UpdateParametersProvider()); if (vm != null) { org.ovirt.engine.api.restapi.util.DisplayHelper.adjustDisplayData(this, vm, false); removeRestrictedInfo(vm); } return vm; }
public void refresh() { try { refreshVdsRunTimeInfo(); } finally { try { if (((firstStatus) != (vds.getStatus())) && ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { vdsManager.cancelRecoveryJob(); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Host '{}' ({}) firing up event.", vds.getName(), vds.getId()); vdsManager.setIsSetNonOperationalExecuted((!(getVdsEventListener().vdsUpEvent(vds)))); } saveDataToDb(); } catch (org.ovirt.engine.core.vdsbroker.irsbroker.IRSErrorException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Exception", ex); } catch (java.lang.RuntimeException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.error("Exception", ex); } } }










private void injectHeaders(org.apache.http.client.methods.HttpUriRequest request) { for (java.util.Map.Entry<java.lang.String, java.lang.String> header : headers.entrySet()) { request.setHeader(header.getKey(), header.getValue()); } java.util.List<org.apache.http.Header> updated = excludeNullHeaders(request.getAllHeaders()); if ((updated != null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(new org.apache.http.Header[updated.size()])); } for (org.apache.http.NameValuePair nameValuePair : org.apache.http.client.utils.URLEncodedUtils.parse(request.getURI(), HTTP.UTF_8)) { if (nameValuePair.getName().equalsIgnoreCase("all_content")) { request.addHeader("All-Content", nameValuePair.getValue()); } } request.addHeader("Version", "4"); request.addHeader("Content-type", "application/xml"); request.addHeader("User-Agent", "JavaSDK"); request.addHeader("Accept", "application/xml"); request.addHeader("Authorization", ("Bearer " + (getAccessToken()))); }


private void injectHeaders(org.apache.http.client.methods.HttpUriRequest request) { java.util.List<org.apache.http.Header> updated = excludeNullHeaders(request.getAllHeaders()); if ((updated != null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(new org.apache.http.Header[updated.size()])); } for (org.apache.http.NameValuePair nameValuePair : org.apache.http.client.utils.URLEncodedUtils.parse(request.getURI(), HTTP.UTF_8)) { if (nameValuePair.getName().equalsIgnoreCase("all_content")) { request.addHeader("All-Content", nameValuePair.getValue()); } } request.addHeader("Version", "4"); request.addHeader("Content-type", "application/xml"); request.addHeader("User-Agent", "JavaSDK"); request.addHeader("Accept", "application/xml"); request.addHeader("Authorization", ("Bearer " + (getAccessToken()))); }

private void generateRequestInterface(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); java.lang.String request = getRequestName(method); java.lang.String response = getResponseName(method); javaBuffer.addLine("public interface %1$s extends Request<%1$s, %2$s> {", request, response); method.parameters().filter(Parameter::isIn).sorted().forEach(this::generateRequestParameterInterface); javaBuffer.addLine("}"); javaBuffer.addLine(); }

private void generateRequestImplementation(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Name name = method.getName(); java.lang.String request = getRequestName(method); java.lang.String requestImpl = getRequestImplName(method); buffer.addLine("private class %1$s implements %2$s {", requestImpl, request); method.parameters().filter(Parameter::isIn).sorted().forEach(this::generateRequestParameterImplementation); buffer.addLine("public %1$s send() {", getResponseName(method)); if (org.ovirt.sdk.java.ServicesImplGenerator.ADD.equals(name)) { generateAddRequestImplementation(method); } else if ((org.ovirt.sdk.java.ServicesImplGenerator.GET.equals(name)) || (org.ovirt.sdk.java.ServicesImplGenerator.LIST.equals(name))) { generateListRequestImplementation(method); } else if (org.ovirt.sdk.java.ServicesImplGenerator.REMOVE.equals(name)) { generateRemoveRequestImplementation(method); } else if (org.ovirt.sdk.java.ServicesImplGenerator.UPDATE.equals(name)) { generateUpdateRequestImplementation(method); } else { generateActionRequestImplementation(method); } buffer.addLine("}"); buffer.addLine(); buffer.addLine("}"); buffer.addLine(); }
@java.lang.Override public javax.ws.rs.core.Response ticket(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.businessentities.GraphicsType graphicsType = deriveGraphicsType(); java.lang.String consoleId = org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.asConsoleId(graphicsType); return getGraphicsConsolesResource().getConsoleResource(consoleId).ticket(action); }
public boolean isAction() { switch (getName().toString().toLowerCase()) { case "add" : case "get" : case "list" : case "update" : case "remove" : return false; default : return true; } }
private void generateUpdateMethod(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = method.getParameters().stream().filter(( x) -> (x.getType()) instanceof org.ovirt.api.metamodel.concepts.StructType).findFirst().orElse(null); if (mainParameter == null) { java.lang.System.err.println((("Method \"" + method) + "\" doesn\'t have any struct parameter")); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.PUT.class); javaBuffer.addImports(mainTypeReference.getImports()); generateDoc(method); javaBuffer.addLine("@PUT"); javaBuffer.addLine("@Consumes({ %s })", generateMediaTypes()); addMethod(mainTypeReference.getText(), "update(%s %s)", mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); javaBuffer.addLine(); }
private void generateAddMethod(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = method.getParameters().stream().filter(( x) -> ((x.getType()) instanceof org.ovirt.api.metamodel.concepts.StructType) || ((x.getType()) instanceof org.ovirt.api.metamodel.concepts.ListType)).findFirst().orElse(null); if (mainParameter == null) { java.lang.System.err.println((("Method \"" + method) + "\" doesn\'t have any struct parameter")); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.POST.class); javaBuffer.addImport(javax.ws.rs.core.Response.class); javaBuffer.addImports(mainTypeReference.getImports()); generateDoc(method); javaBuffer.addLine("@POST"); javaBuffer.addLine("@Consumes({ %s })", generateMediaTypes()); addResponseReturnMethod("add(%s %s)", mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); javaBuffer.addLine(); }
private void generateGetMethod(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = method.getParameters().stream().filter(( x) -> (x.getType()) instanceof org.ovirt.api.metamodel.concepts.StructType).findFirst().orElse(null); if (mainParameter == null) { java.lang.System.err.println((("Method \"" + method) + "\" doesn\'t have any struct parameter")); return; } org.ovirt.api.metamodel.concepts.Service service = method.getDeclaringService(); boolean isRoot = service == (service.getModel().getRoot()); generateDoc(method); javaBuffer.addImport(javax.ws.rs.GET.class); javaBuffer.addLine("@GET"); if (isRoot) { javaBuffer.addImport(javax.ws.rs.core.Response.class); addResponseReturnMethod("get()"); } else { org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImports(mainTypeReference.getImports()); addMethod(mainTypeReference.getText(), "get()"); } javaBuffer.addLine(); }
private void generateMethod(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Name name = method.getName(); if (org.ovirt.api.metamodel.tool.JaxrsGenerator.ADD.equals(name)) { generateAddMethod(method); } else if (org.ovirt.api.metamodel.tool.JaxrsGenerator.GET.equals(name)) { generateGetMethod(method); } else if (org.ovirt.api.metamodel.tool.JaxrsGenerator.LIST.equals(name)) { generateListMethod(method); } else if (org.ovirt.api.metamodel.tool.JaxrsGenerator.REMOVE.equals(name)) { generateRemoveMethod(method); } else if (org.ovirt.api.metamodel.tool.JaxrsGenerator.UPDATE.equals(name)) { generateUpdateMethod(method); } else { generateActionMethod(method); } }
private void generateActionMethod(org.ovirt.api.metamodel.concepts.Method method) { javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.POST.class); javaBuffer.addImport(javax.ws.rs.Path.class); javaBuffer.addImport(javax.ws.rs.core.Response.class); javaBuffer.addImport(javaPackages.getXjcPackageName(), "Action"); javaBuffer.addImport(javaPackages.getXjcPackageName(), "Actionable"); generateDoc(method); javaBuffer.addLine("@POST"); javaBuffer.addLine("@Consumes({ %s })", generateMediaTypes()); javaBuffer.addLine("@Actionable"); javaBuffer.addLine("@Path(\"%s\")", jaxrsNames.getActionPath(method.getName())); addResponseReturnMethod(((jaxrsNames.getMethodName(method.getName())) + "(Action action)")); javaBuffer.addLine(); }






























public void updateInitialRunFields() { getIsSysprepPossible().setEntity(getIsWindowsOS()); getIsSysprepEnabled().setEntity(((getInitializationType()) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep))); getIsCloudInitPossible().setEntity((!(getIsWindowsOS()))); getIsCloudInitEnabled().setEntity(((getInitializationType()) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit))); getIsCloudInitEnabled().setIsAvailable((!(getIsWindowsOS()))); }
private void vmInitEnabledChanged() { if (!(getVmInitEnabled().getEntity())) { getSysprepEnabled().setEntity(false); getCloudInitEnabled().setEntity(false); } else { getSysprepEnabled().setEntity(getIsWindowsOS()); getCloudInitEnabled().setEntity((!(getIsWindowsOS()))); autoSetHostname(); } }

public void moveMacsOfUpdatedCluster(org.ovirt.engine.core.compat.Guid oldMacPoolId, org.ovirt.engine.core.compat.Guid newMacPoolId, org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(oldMacPoolId); java.util.Objects.requireNonNull(newMacPoolId); if (needToMigrateMacs(oldMacPoolId, newMacPoolId)) { migrateMacs(oldMacPoolId, newMacPoolId, clusterId, commandContext); } }
private void migrateMacs(org.ovirt.engine.core.compat.Guid oldMacPoolId, org.ovirt.engine.core.compat.Guid newMacPoolId, org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.List<java.lang.String> vmInterfaceMacs = vmNicDao.getAllMacsByClusterId(clusterId); java.util.Objects.requireNonNull(vmInterfaceMacs); org.ovirt.engine.core.bll.network.macpool.MacPool sourcePool = poolPerCluster.getMacPoolById(oldMacPoolId, commandContext); org.ovirt.engine.core.bll.network.macpool.MacPool targetPool = poolPerCluster.getMacPoolById(newMacPoolId, commandContext); for (java.lang.String mac : vmInterfaceMacs) { sourcePool.freeMac(mac); targetPool.forceAddMac(mac); } }
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); final boolean shouldSetNewMacPoolOnAllClusters = newMacPoolId != null; if (shouldSetNewMacPoolOnAllClusters) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { this.moveMacsOfUpdatedCluster.updateClusterAndMoveMacs(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()); } } }
public org.ovirt.engine.api.model.Disks list() { return mapCollection(getBackendCollection(VdcQueryType.GetAllDisksByVmId, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmId))); }
@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Failed to add VM. The reasons are: {}", java.lang.String.join(",", errorMessages)); return; } if (!(addVmLease(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.AddVmCommand.getVmId()))) { return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } discardHelper.logIfDisksWithIllegalPassDiscardExist(org.ovirt.engine.core.bll.AddVmCommand.getVmId()); }
@org.junit.Test public void statusSupportedForHostUpgrade() { when(host.getStatus()).thenReturn(VDSStatus.Maintenance); assertThat(validator.statusSupportedForHostUpgrade(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }



@org.junit.Test public void externalNetworkNameChanged() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = mockExternalNetwork(); when(externalNetwork.getName()).thenReturn("aaa"); when(network.getName()).thenReturn("bbb"); assertThat(validator.externalNetworkDetailsUnchanged(externalNetwork), isValid()); }
@org.junit.Test public void externalNetworkDescriptionChanged() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = mockExternalNetwork(); when(externalNetwork.getDescription()).thenReturn("aaa"); when(network.getDescription()).thenReturn("bbb"); assertThat(validator.externalNetworkDetailsUnchanged(externalNetwork), isValid()); }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { macs.forEach(macPool::freeMac); }
@java.lang.Override public void cleaningCompensationDataAfterSuccess() { macsToReleaseOnCommit.forEach(macPool::freeMac); }


@java.lang.Override public java.lang.String toString() { java.lang.String prefix = ""; if ((TotalMilliseconds) < 0) { prefix = "-"; } return java.lang.String.format("%s%d.%02d:%02d:%02d.%03d", prefix, Days, Hours, Minutes, Seconds, Milliseconds); }

protected boolean perform() { try { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setStartTime(new java.util.Date()); if (((unplugPassthroughNics()) && (connectLunDisks(getDestinationVdsId()))) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } runningFailed(); return false; } catch (java.lang.Exception e) { runningFailed(); throw e; } }
public java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSetupNetworksLock(org.ovirt.engine.core.compat.Guid hostId) { return java.util.Collections.singletonMap(((LockingGroup.HOST_NETWORK.name()) + (hostId.toString())), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.HOST_NETWORK, EngineMessage.ACTION_TYPE_FAILED_SETUP_NETWORKS_OR_REFRESH_IN_PROGRESS)); }
@java.lang.Override protected void runningFailed() { try { cleanupPassthroughVnics(getDestinationVdsId()); } finally { super.runningFailed(); } }
java.lang.String ACTION_TYPE_FAILED_SETUP_NETWORKS_OR_REFRESH_IN_PROGRESS();
@java.lang.Override public void runningSucceded() { try { getDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugPassthroughNics(); } finally { super.runningSucceded(); } }


@java.lang.Override protected void endSuccessfully() { setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getVmTemplateId()); setVmId(getVmIdFromImageParameters()); isVmInDb = (org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm()) != null; vmStaticDao.incrementDbGeneration(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); for (org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getImagesParameters()) { org.ovirt.engine.core.bll.Backend.getInstance().endAction(p.getCommandType(), p, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); } if ((reloadVmTemplateFromDB()) != null) { endDefaultOperations(); } checkTrustedService(); org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded(true); }
private void endSuccessfullySynchronous() { if ((reloadVmTemplateFromDB()) != null) { endDefaultOperations(); } org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded(true); }














@java.lang.Override public boolean performNextOperation(int completedChildCount) { if (completedChildCount < (org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.AddVmTemplateCommand.getCommandId()).size())) { return false; } switch (org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getPhase()) { case CREATE_TEMPLATE : return true; } org.ovirt.engine.core.bll.AddVmTemplateCommand.persistCommandIfNeeded(); executeNextOperation(); return false; }

private static void switchTab(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> mapping, org.ovirt.engine.ui.common.view.TabbedView view) { int lowestIndex = java.lang.Integer.MAX_VALUE; java.util.List<org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> allTabs = view.getTabPanel().getTabs(); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if ((allTabs.indexOf(mapping.get(invalidTabName))) < lowestIndex) { lowestIndex = allTabs.indexOf(mapping.get(invalidTabName)); } } if (lowestIndex != (java.lang.Integer.MAX_VALUE)) { view.getTabPanel().switchTab(allTabs.get(lowestIndex)); } }
@java.lang.Override public void onValidationComplete(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent event) { if (((event.getModel()) != null) && (event.getModel().equals(presenterWidget.getModel()))) { java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs = presenterWidget.getModel().getInvalidTabs(); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> mapping = view.getTabNameMapping(); org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.markTabs(invalidTabs, mapping); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if (view.getTabPanel().getActiveTab().equals(mapping.get(invalidTabName))) { return; } } org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.switchTab(invalidTabs, mapping, view); } }
public static com.google.gwt.event.shared.HandlerRegistration registerValidationHandler(final com.google.gwt.event.shared.EventBus eventBus, final org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?> presenterWidget, final org.ovirt.engine.ui.common.view.TabbedView view) { return eventBus.addHandler(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent.getType(), new org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent.ValidationCompleteEventHandler() { @java.lang.Override public void onValidationComplete(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent event) { if (((event.getModel()) != null) && (event.getModel().equals(presenterWidget.getModel()))) { java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs = presenterWidget.getModel().getInvalidTabs(); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> mapping = view.getTabNameMapping(); org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.markTabs(invalidTabs, mapping); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if (view.getTabPanel().getActiveTab().equals(mapping.get(invalidTabName))) { return; } } org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.switchTab(invalidTabs, mapping, view); } } }); }
private void updateTabVisibilities(org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel object) { generalTab.setVisible(object.isGeneralTabVisible()); scheduleTab.setVisible(object.isScheduleTabVisible()); if ((object.getRecurrence().getSelectedItem()) != (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotScheduleRecurrence.UNKNOWN)) { scheduleTab.activate(); } }
@java.lang.Override public java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> getTabNameMapping() { return ((org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget) (getContentWidget())).getTabNameMapping(); }
@java.lang.Override public void init(java.lang.String title, java.lang.String width, java.lang.String height, boolean resizeEnabled, boolean closeIconVisible) { titleLabel.setText(title); asWidget().setWidth(width); asWidget().setHeight(height); asWidget().enableResizeSupport(resizeEnabled); asWidget().setCloseIconButtonVisible(closeIconVisible); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel object) { driver.edit(object); initLists(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (propName.equals("IsValid")) { onIsValidPropertyChange(object); } else if (propName.equals("IsGrouppedByTarget")) { updateListByGropping(object); } } }); iscsiTargetToLunView.edit(object); iscsiLunToTargetView.edit(object); targetsToLunTab.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { iscsiLunToTargetView.disableItemsUpdate(); object.setIsGrouppedByTarget(true); } }); lunToTargetsTab.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { iscsiTargetToLunView.disableItemsUpdate(); object.setIsGrouppedByTarget(false); } }); dialogTabPanel.switchTab((object.getIsGrouppedByTarget() ? targetsToLunTab : lunToTargetsTab)); updateListByGropping(object); }
@java.lang.Override public java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> getTabNameMapping() { return tabMap; }
private void addHelpButtonHandler() { helpIconButton.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { helpCommand.execute(); } }); }
@com.google.gwt.uibinder.client.UiChild(tagname = "logo", limit = 1) public void setLogo(com.google.gwt.user.client.ui.Widget widget) { logoPanel.setWidget(widget); }
@java.lang.Override @com.google.gwt.uibinder.client.UiChild(tagname = "header", limit = 1) public void setHeader(com.google.gwt.user.client.ui.Widget widget) { widget.addStyleName(style.obrand_dialogHeaderTitleElement()); headerTitlePanel.insert(widget, 0); }
public java.util.List<org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> getTabs() { java.util.List<org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> tabs = new java.util.ArrayList<>(); for (int i = 0; i < (tabContainer.getWidgetCount()); i++) { com.google.gwt.user.client.ui.Widget tab = tabContainer.getWidget(i); if (tab instanceof org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab) { tabs.add(((org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab) (tab))); } } return tabs; }
@java.lang.Override public void setHelpCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { AbstractModelBoundPopupView.asWidget().setHelpCommand(command); }
@java.lang.Override public final java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> getTabNameMapping() { return tabMap; }
public void activate() { isActive = true; tabContainer.getElement().replaceClassName(style.inactive(), style.obrand_active()); }
java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> getTabNameMapping();
@java.lang.Override public void setHelpCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { helpCommand = command; helpIconButton.setVisible((command != null)); }
private static void markTabs(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> mapping) { for (java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> entry : mapping.entrySet()) { if (invalidTabs.contains(entry.getKey())) { entry.getValue().markAsInvalid(null); } else { entry.getValue().markAsValid(); } } }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ManagePolicyUnitModel flush() { return driver.flush(); }
private void revealDiskPanel(final org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel disk) { boolean isInVm = (disk.getVm()) != null; diskTypePanel.setVisible(isNewLunDiskEnabled); externalDiskPanel.setVisible(((isNewLunDiskEnabled) && ((disk.getDiskStorageType().getEntity()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN)))); aliasEditor.setFocus((!isInVm)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ("IsChangable".equals(propName)) { if ((disk.getDiskStorageType().getIsChangable()) && (disk.isEditEnabled())) { enableWidget(diskTypePanel); } else { disableWidget(diskTypePanel); } } }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { disk.getDiskStorageType().setEntity(DiskStorageType.LUN); revealStorageView(disk); revealDiskPanel(disk); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (disk.getIsModelDisabled().getEntity()) { disableWidget(getWidget()); enableWidget(diskTypePanel); enableWidget(datacenterEditor); disk.getDefaultCommand().setIsExecutionAllowed(false); disk.setIsChangeable(false); } else { enableWidget(getWidget()); disk.getDefaultCommand().setIsExecutionAllowed(true); disk.setIsChangeable(true); driver.edit(disk); } }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { disk.getDiskStorageType().setEntity(DiskStorageType.LUN); revealDiskPanel(disk); }
@java.lang.Override public java.lang.String getRawValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel model) { return (java.lang.String.valueOf(model.getSize())) + "GB"; }
@java.lang.Override public java.lang.String getRawValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel model) { return (java.lang.String.valueOf(model.getSize())) + "GB"; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VM object) { return (java.lang.String.valueOf(object.getVmMemSizeMb())) + " MB"; }
private java.lang.String renderMemory(double memory) { if (memory <= 0) { return "0"; } return memory > (java.lang.Math.abs(((org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.MB_GB_THRESHOLD) * (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.GIGA)))) ? org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.diskSizeRenderer.render((memory / (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.GIGA))) : ((int) (memory)) + "MB"; }
private java.lang.String renderHumanReadableSize(long size) { long sizeInBytes = org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.BYTES).longValue(); if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_GB)) { return (org.ovirt.engine.core.common.utils.SizeConverter.convert(sizeInBytes, SizeConverter.SizeUnit.BYTES, SizeUnit.GiB).longValue()) + " GB"; } else if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_MB)) { return (org.ovirt.engine.core.common.utils.SizeConverter.convert(sizeInBytes, SizeConverter.SizeUnit.BYTES, SizeConverter.SizeUnit.MiB).longValue()) + " MB"; } else if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_KB)) { return (org.ovirt.engine.core.common.utils.SizeConverter.convert(sizeInBytes, SizeConverter.SizeUnit.BYTES, SizeConverter.SizeUnit.KiB).longValue()) + " KB"; } else { return sizeInBytes + " Bytes"; } }
@java.lang.Override public java.lang.String render(T sizeInMB) { return sizeInMB != null ? (sizeInMB.toString()) + " MB" : org.ovirt.engine.ui.common.widget.renderer.MemorySizeRenderer.constants.unAvailablePropertyLabel(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData object) { return (java.lang.String.valueOf(object.getVm().getVmMemSizeMb())) + " MB"; }
@java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return "< 1 GB"; } return (storage.getAvailableDiskSize()) + " GB"; }
private java.lang.String renderGigabyteSize(long size) { long sizeInGB = ((unit) == (org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit.GiB)) ? size : org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.GiB).longValue(); return sizeInGB >= 1 ? sizeInGB + " GB" : "< 1 GB"; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData) { int size = registerVmData.getVm().getVmMemSizeMb(); return size + " MB"; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VM object) { return (java.lang.String.valueOf(object.getVmMemSizeMb())) + " MB"; }
@java.lang.Override public java.lang.String getValue(java.lang.Object object) { int size = getEntity(object).getMemSizeMb(); return size + " MB"; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Quota object) { double value; double allocated = 0; double used = 0; if ((object.getGlobalQuotaStorage()) != null) { allocated = object.getGlobalQuotaStorage().getStorageSizeGB(); used = object.getGlobalQuotaStorage().getStorageSizeGBUsage(); } else { for (org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage : object.getQuotaStorages()) { if (!(QuotaStorage.UNLIMITED.equals(quotaStorage.getStorageSizeGB()))) { allocated += quotaStorage.getStorageSizeGB(); used += quotaStorage.getStorageSizeGBUsage(); } else { allocated = org.ovirt.engine.core.common.businessentities.QuotaStorage.UNLIMITED; break; } } } value = allocated - used; java.lang.String returnVal; if (allocated < 0) { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.unlimited(); } else if (value <= 0) { returnVal = "0 GB"; } else { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.diskSizeRenderer.render(value); } return returnVal; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return (java.lang.String.valueOf(object.getMemSizeMb())) + " MB"; }
private void initTable() { org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain> nameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { return storage.getStorageName(); } }; storageDomainItems.setColumnWidth(nameColumn, "280px"); storageDomainItems.addColumn(nameColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.nameStorage()); org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain> freeSpaceColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return "< 1 GB"; } return (storage.getAvailableDiskSize()) + " GB"; } }; storageDomainItems.setColumnWidth(freeSpaceColumn, "80px"); storageDomainItems.addColumn(freeSpaceColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.freeSpaceStorage()); }
@java.lang.Override public java.lang.String getValue(java.lang.Object object) { return (java.lang.String.valueOf(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm().getVmMemSizeMb())) + " MB"; }
@java.lang.Override public java.lang.String getValue(java.lang.Object object) { return (java.lang.String.valueOf(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData) (object)).getTemplate().getMemSizeMb())) + " MB"; }

@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Quota object) { int value; long allocated = 0; long used = 0; if ((object.getGlobalQuotaCluster()) != null) { allocated = object.getGlobalQuotaCluster().getMemSizeMB(); used = object.getGlobalQuotaCluster().getMemSizeMBUsage(); } else { for (org.ovirt.engine.core.common.businessentities.QuotaCluster quotaCluster : object.getQuotaClusters()) { if (!(QuotaCluster.UNLIMITED_MEM.equals(quotaCluster.getMemSizeMB()))) { allocated += ((quotaCluster.getMemSizeMB()) != null) ? quotaCluster.getMemSizeMB() : 0; used += quotaCluster.getMemSizeMBUsage(); } else { allocated = org.ovirt.engine.core.common.businessentities.QuotaCluster.UNLIMITED_MEM; break; } } } value = ((int) (allocated - used)); java.lang.String returnVal; if (allocated < 0) { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.unlimited(); } else if (value <= 0) { returnVal = "0 MB"; } else if (value <= (5 * 1024)) { returnVal = value + "MB"; } else { returnVal = (org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.decimalFormat.format((((double) (value)) / 1024))) + "GB"; } return returnVal; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (((java.lang.Double) (asVm(entity).getActualDiskWithSnapshotsSize())).intValue()) + "GB"; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return (java.lang.String.valueOf(object.getMemSizeMb())) + " MB"; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (((java.lang.Double) (asVm(entity).getDiskSize())).intValue()) + "GB"; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (((java.lang.Double) (asDisk(entity).getActualDiskWithSnapshotsSize())).intValue()) + "GB"; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (asDisk(entity).getSizeInGigabytes()) + "GB"; }
@java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return "< 1 GB"; } return (storage.getAvailableDiskSize()) + " GB"; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.DiskImage object) { return (java.lang.String.valueOf(object.getSizeInGigabytes())) + " GB"; }






@java.lang.Override protected boolean validateImageTransfer(org.ovirt.engine.core.compat.Guid imageId) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(imageId))); org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = getDiskValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = getDiskImagesValidator(diskImage); return (((validate(diskValidator.isDiskExists())) && (validate(diskValidator.isDiskAttachedToAnyVm()))) && (validate(diskImagesValidator.diskImagesNotIllegal()))) && (validate(diskImagesValidator.diskImagesNotLocked())); }
protected void initializeSuppliedImage() { super.initSuppliedImage(transferImageCommand); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); doReturn(diskImage).when(diskDao).get(any()); doReturn(diskValidator).when(getCommand()).getDiskValidator(any()); doReturn(diskImagesValidator).when(getCommand()).getDiskImagesValidator(any()); doReturn(ValidationResult.VALID).when(diskValidator).isDiskAttachedToAnyVm(); doReturn(ValidationResult.VALID).when(diskValidator).isDiskExists(); doReturn(ValidationResult.VALID).when(diskImagesValidator).diskImagesNotLocked(); doReturn(ValidationResult.VALID).when(diskImagesValidator).diskImagesNotIllegal(); }
private boolean updateVms() { for (org.ovirt.engine.core.common.businessentities.VmStatic vm : vmsLockedForUpdate) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); updateParams.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); upgradeGraphicsDevices(vm, updateParams); updateRngDeviceIfNecessary(vm.getId(), vm.getCustomCompatibilityVersion(), updateParams); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { propagateFailure(result); return false; } } return true; }
private boolean updateTemplates() { for (org.ovirt.engine.core.common.businessentities.VmTemplate template : templatesLockedForUpdate) { template.setClusterCompatibilityVersion(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()); final org.ovirt.engine.core.common.action.UpdateVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.UpdateVmTemplateParameters(template); parameters.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); parameters.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); updateRngDeviceIfNecessary(template.getId(), template.getCustomCompatibilityVersion(), parameters); if (!(parameters.isUpdateRngDevice())) { continue; } final org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVmTemplate, parameters, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { propagateFailure(result); return false; } } return true; }
@java.lang.Override public void initialize() throws org.quartz.SchedulerConfigException { executorService = new java.util.concurrent.ThreadPoolExecutor(10, count, 60L, java.util.concurrent.TimeUnit.SECONDS, new java.util.concurrent.ArrayBlockingQueue<java.lang.Runnable>(50), new org.ovirt.engine.core.utils.timer.SchedulerThreadPool.SchedulerThreadFactory(this)); }
private void generateReturnResponseBody(org.ovirt.api.metamodel.concepts.Parameter parameter) { org.ovirt.api.metamodel.concepts.Type type = parameter.getType(); buffer.addLine("begin"); buffer.addLine("reader = XmlReader.new(response.body)"); if (type instanceof org.ovirt.api.metamodel.concepts.StructType) { org.ovirt.sdk.ruby.RubyName reader = rubyNames.getReaderName(type); buffer.addLine("return %1$s.read_one(reader)", reader.getClassName()); } else if (type instanceof org.ovirt.api.metamodel.concepts.ListType) { org.ovirt.api.metamodel.concepts.ListType listType = ((org.ovirt.api.metamodel.concepts.ListType) (type)); org.ovirt.api.metamodel.concepts.Type elementType = listType.getElementType(); org.ovirt.sdk.ruby.RubyName reader = rubyNames.getReaderName(elementType); buffer.addLine("return %1$s.read_many(reader)", reader.getClassName()); } buffer.addLine("ensure"); buffer.addLine("reader.close"); buffer.addLine("end"); }
protected void setQcowCompat(org.ovirt.engine.core.common.businessentities.storage.Image diskImage, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newStorageDomainID, boolean shouldPrepareAndTeardown) { diskImage.setQcowCompat(QcowCompat.QCOW2_V2); if (org.ovirt.engine.core.common.FeatureSupported.qcowCompatSupported(org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand.getStoragePool().getCompatibilityVersion())) { org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, shouldPrepareAndTeardown); if (qemuImageInfo != null) { diskImage.setQcowCompat(qemuImageInfo.getQcowCompat()); } } }
private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { log.info("Finalizing successful transfer for {}", getTransferDescription()); if (stopImageTransferSession(context.entity)) { org.ovirt.engine.core.compat.Guid transferingVdsId = context.entity.getVdsId(); if (verifyImage(transferingVdsId)) { setVolumeLegalityInStorage(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.LEGAL_IMAGE); if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getVolumeFormat().equals(VolumeFormat.COW)) { setQcowCompat(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImageId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStorageDomainId(), false); imageDao.update(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage()); } org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.unLockImage(); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); } else { setImageStatus(ImageStatus.ILLEGAL); updateEntityPhase(ImageTransferPhase.FINALIZING_FAILURE); } tearDownImage(context.entity.getVdsId()); } }

private void showPanelItems(boolean show) { securityCheckbox.setVisible(show); bugCheckbox.setVisible(show); enhancementCheckbox.setVisible(show); enhancementCheckboxImage.setVisible(show); bugCheckboxImage.setVisible(show); securityCheckboxImage.setVisible(show); }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.Erratum erratum) { if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.BUGFIX)) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.ErrataTableView.resources.bug(); } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.ENHANCEMENT)) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.ErrataTableView.resources.enhancement(); } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.SECURITY)) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.ErrataTableView.resources.security(); } return null; }






public static int getCdDeviceIndex(java.lang.String cdInterface) { switch (cdInterface) { case "scsi" : return 0; case "ide" : return 2; case "sata" : return 0; default : return -1; } }


private java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> getAddedLuns(java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> lunModels) { java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = new java.util.LinkedList<>(); for (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lun : lunModels) { if (((lun.getIsSelected()) && (!(lun.getIsIncluded()))) && ((org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(luns, new org.ovirt.engine.ui.uicommonweb.Linq.LunPredicate(lun))) == null)) { luns.add(lun); } } return luns; }





@java.lang.Override public void setInSlot(java.lang.Object slot, com.gwtplatform.mvp.client.PresenterWidget<?> content) { super.setInSlot(slot, content); if (slot == (tabContentSlot)) { try { com.gwtplatform.mvp.client.Presenter<?, ?> presenter = ((com.gwtplatform.mvp.client.Presenter<?, ?>) (content)); com.gwtplatform.mvp.client.proxy.TabContentProxy<?> proxy = ((com.gwtplatform.mvp.client.proxy.TabContentProxy<?>) (presenter.getProxy())); org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.getView().setActiveTabHistoryToken(proxy.getTargetHistoryToken()); } catch (java.lang.Exception e) { org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.logger.log(java.util.logging.Level.SEVERE, "Error while updating tab view", e); } } }
@org.junit.Test public void testSetStatusForRequiredNetworksAbsentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = java.util.Arrays.asList(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1), createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID2, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME2)); testSetStatusForRequiredNetwork(networks, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME2); verify(networkClusterDao).updateStatus(same(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.NON_OPERATIONAL)); }
@org.junit.Before public void setUp() { networkCluster = createNetworkCluster(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1); when(networkClusterDao.get(networkCluster.getId())).thenReturn(networkCluster); managementNetworkCluster = createNetworkCluster(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID); managementNetwork = createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_NAME); when(managementNetworkUtil.getManagementNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID)).thenReturn(managementNetwork); when(networkClusterDao.get(new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID))).thenReturn(managementNetworkCluster); }
@org.junit.Test public void testSetStatusForRequiredNetworkAbsentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); testSetStatusForRequiredNetwork(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1), org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME2); verify(networkClusterDao).updateStatus(same(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.NON_OPERATIONAL)); }
@org.junit.Test public void testSetStatusForRequiredNetworkPresentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); testSetStatusForRequiredNetwork(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1), org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1); verify(networkClusterDao, never()).updateStatus(same(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.OPERATIONAL)); }
public void setStatus(org.ovirt.engine.core.compat.Guid clusterId, final java.util.Collection<org.ovirt.engine.core.common.businessentities.network.Network> networks) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.RequiredNetworkClusterStatusUpdater requiredNetworkClusterStatusUpdater = new org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.RequiredNetworkClusterStatusUpdater(clusterId); for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = networkClusterDao.get(new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(clusterId, network.getId())); boolean doUpdateNetworkClusterStatus = networkCluster != null; if (doUpdateNetworkClusterStatus) { if (networkCluster.isRequired()) { requiredNetworkClusterStatusUpdater.update(networkCluster, network.getName()); } else { updateNetworkClusterStatus(networkCluster, NetworkStatus.OPERATIONAL); } } } }
public static java.lang.Long determineImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.Image sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid dstDomain, org.ovirt.engine.core.compat.Guid imageGroupID) { if (org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isInitialSizeSupportedForFormat(destFormat, dstDomain)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromStorage = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(storagePoolId, srcDomain, imageGroupID, sourceImage.getId()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(imageInfoFromStorage.getActualSizeInBytes()); } return null; }
public static void redirectToModule(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException { org.ovirt.engine.core.sso.utils.SsoUtils.log.debug("Entered redirectToModule"); try { org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request); org.ovirt.engine.core.uutils.net.URLBuilder redirectUrl = new org.ovirt.engine.core.uutils.net.URLBuilder(org.ovirt.engine.core.sso.utils.SsoUtils.getRedirectUrl(request).toString()).addParameter("code", ssoSession.getAuthorizationCode()); java.lang.String appUrl = ssoSession.getAppUrl(); if (org.apache.commons.lang.StringUtils.isNotEmpty(appUrl)) { redirectUrl.addParameter("app_url", appUrl); } response.sendRedirect(redirectUrl.build()); org.ovirt.engine.core.sso.utils.SsoUtils.log.debug("Redirecting back to module: {}", redirectUrl); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.SsoUtils.log.error("Error redirecting back to module: {}", ex.getMessage()); org.ovirt.engine.core.sso.utils.SsoUtils.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex); } finally { org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request).cleanup(); } }
private static java.lang.String createTmpSsoClientConfFile(java.lang.String clientId, java.lang.String clientSecret, java.lang.String certificateFile, java.lang.String callbackPrefix) throws java.io.FileNotFoundException { java.io.File tmpFile = new java.io.File(org.ovirt.engine.ssoreg.core.SsoLocalConfig.getInstance().getTmpDir(), java.lang.String.format("99_sso_client_%s.conf", java.lang.System.currentTimeMillis())); try (java.io.PrintWriter pw = new java.io.PrintWriter(new java.io.FileOutputStream(tmpFile))) { pw.println(java.lang.String.format("SSO_CLIENT_ID=%s", clientId)); pw.println(java.lang.String.format("SSO_CLIENT_SECRET=%s", clientSecret)); pw.println(java.lang.String.format("SSO_CLIENT_CERTIFICATE_FILE=%s", certificateFile)); pw.println(java.lang.String.format("SSO_CLIENT_CALLBACK_PREFIX=%s", callbackPrefix)); } return tmpFile.getAbsolutePath(); }



@java.lang.Override protected void endSuccessfully() { if (shouldUpdateStorageDisk()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = diskImageDao.getAllSnapshotsForImageGroup(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getDestImageGroupId()); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.setSnapshotForShareableDisk(snapshots); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage snapshot : snapshots) { imageStorageDomainMapDao.remove(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMapId(snapshot.getImageId(), snapshot.getStorageIds().get(0))); imageStorageDomainMapDao.save(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap(snapshot.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getQuotaId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getDiskProfileId())); } } super.endSuccessfully(); }
@org.junit.Test public void testBadGuid() throws java.lang.Exception { try { new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResource("foo", null); fail("expected WebApplicationException"); } catch (javax.ws.rs.WebApplicationException wae) { verifyNotFoundException(wae); } }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Network network) { validateParameters(network, "id|name"); java.lang.String networkName = null; java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = getNetworks(); if (network.isSetId()) { org.ovirt.engine.core.common.businessentities.network.Network net = getNetworkById(network.getId(), networks); if (net == null) { notFound(org.ovirt.engine.api.model.Network.class); } else { networkName = net.getName(); } } java.lang.String networkId = null; if (network.isSetName()) { org.ovirt.engine.core.common.businessentities.network.Network net = getNetworkByName(network.getName(), networks); if (net == null) { notFound(org.ovirt.engine.api.model.Network.class); } else { networkId = net.getId().toString(); } } if (!(network.isSetId())) { network.setId(networkId); } else if ((network.isSetName()) && (!(network.getId().equals(networkId)))) { badRequest(("Network ID provided does not match the ID for network with name: " + (network.getName()))); } org.ovirt.engine.core.common.businessentities.network.Network entity = map(network); return performCreate(addAction, getAddParameters(network, entity), new org.ovirt.engine.api.restapi.resource.NetworkIdResolver(org.apache.commons.lang.StringUtils.defaultIfEmpty(network.getName(), networkName))); }
@java.lang.Override protected java.lang.String[] getRequiredAddFields() { return new java.lang.String[]{ "name" }; }
protected boolean setAndValidateCpuProfile() { getVm().getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getClusterId()); getVm().getStaticData().setCpuProfileId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getCpuProfileId()); return validate(cpuProfileHelper.setAndValidateCpuProfile(getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getUserId())); }
protected boolean setAndValidateCpuProfile() { if ((isInstanceType()) || (org.ovirt.engine.core.bll.UpdateVmTemplateCommand.isBlankTemplate())) { return true; } return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getUserId())); }
protected boolean setAndValidateCpuProfile() { getVmTemplate().setClusterId(getClusterId()); getVmTemplate().setCpuProfileId(getParameters().getCpuProfileId()); return validate(cpuProfileHelper.setAndValidateCpuProfile(getVmTemplate(), getUserId())); }
protected boolean setAndValidateCpuProfile() { return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.CommonVmPoolCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.CommonVmPoolCommand.getUserId())); }
protected boolean setAndValidateCpuProfile() { return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.VmManagementCommandBase.getUserId())); }

protected boolean setAndValidateCpuProfile() { if ((org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getTemplateType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE)) { return true; } return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getMasterVm(), org.ovirt.engine.core.bll.AddVmTemplateCommand.getUserId())); }
@javax.ws.rs.PUT @javax.ws.rs.Consumes({ "application/xml", "application/json" }) public org.ovirt.engine.api.v3.types.V3Host update(org.ovirt.engine.api.v3.types.V3Host host) { return adaptUpdate(getDelegate()::update, host); }


@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) == null) { return false; } switch (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) { case GEO_REP : org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters(getSession().getMasterVolumeId(), getSession().getId()); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getActionType()); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(DRStep.REMOVE_TMP_SNAPSHOTS); runInternalActionWithTasksContext(VdcActionType.GlusterStorageGeoRepSyncInternal, parameters); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; case REMOVE_TMP_SNAPSHOTS : removeDRSnapshots(); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(null); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; } return true; }


private java.lang.String authenticateUser(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, org.ovirt.engine.core.sso.utils.Credentials userCredentials) throws java.io.IOException, javax.servlet.ServletException, org.ovirt.engine.core.sso.utils.AuthenticationException { if ((userCredentials == null) || (!(userCredentials.isValid()))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_INVALID_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } try { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Authenticating user using credentials"); response.addCookie(new javax.servlet.http.Cookie("profile", userCredentials.getProfile())); org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(ssoContext, request, userCredentials); return (request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_REDIRECT_TO_MODULE_URI); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { throw ex; } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.error("Internal Server Error: {}", ex.getMessage()); org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex.getMessage(), ex); } }
@java.lang.Override public org.ovirt.engine.core.sso.utils.AuthResult doAuth(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.NonInteractiveAuth.log.debug("Performing Basic Auth"); org.ovirt.engine.core.sso.utils.Credentials credentials = org.ovirt.engine.core.sso.utils.SsoUtils.getUserCredentialsFromHeader(request); org.ovirt.engine.core.sso.utils.AuthResult retVal = new org.ovirt.engine.core.sso.utils.AuthResult(); if ((credentials == null) || (!(credentials.isValid()))) { retVal.setStatus(Authn.AuthResult.CREDENTIALS_INVALID); } else { retVal.setCredentials(credentials); org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(org.ovirt.engine.core.sso.utils.SsoUtils.getSsoContext(request), request, credentials); retVal.setToken(((java.lang.String) (request.getAttribute(SsoConstants.HTTP_REQ_ATTR_ACCESS_TOKEN)))); if ((retVal.getToken()) != null) { org.ovirt.engine.core.sso.utils.NonInteractiveAuth.log.debug("Basic authentication succeeded"); retVal.setStatus(Authn.AuthResult.SUCCESS); } else { retVal.setStatus(Authn.AuthResult.CREDENTIALS_INVALID); } } return retVal; }
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug("Extracting basic auth credentials from header"); org.ovirt.engine.core.sso.utils.Credentials credentials = org.ovirt.engine.core.sso.utils.SsoUtils.getUserCredentialsFromHeader(request); boolean credentialsValid = false; try { credentialsValid = (credentials != null) && (credentials.isValid()); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.error("Error validating credentials: {}", ex.getMessage()); org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug("Exception", ex); } if (credentialsValid) { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug("Credentials Valid redirecting to url: {}", SsoConstants.INTERACTIVE_LOGIN_URI); org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request).setTempCredentials(credentials); response.sendRedirect(((request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_LOGIN_URI))); } else { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug("Redirecting to url: {}", SsoConstants.INTERACTIVE_LOGIN_NEXT_AUTH_URI); response.sendRedirect(((request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_LOGIN_NEXT_AUTH_URI))); } }
public static org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid vdsId, boolean shouldPrepareAndTeardown) { if (vdsId == null) { vdsId = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldPrepareAndTeardown) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } try { qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.error("Unable to get qemu image info from storage", e); } finally { if (shouldPrepareAndTeardown) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } } return qemuImageInfo; }
public static java.lang.Long determineImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.Image sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid dstDomain, org.ovirt.engine.core.compat.Guid imageGroupID) { if (org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isInitialSizeSupportedForFormat(destFormat, dstDomain)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromStorage = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(storagePoolId, srcDomain, imageGroupID, sourceImage.getId()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(imageInfoFromStorage.getActualSizeInBytes()); } return null; }
public static java.lang.Long determineTotalImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid dstDomain) { if (org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isInitialSizeSupportedForFormat(destFormat, dstDomain)) { double totalSizeForClonedDisk = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getTotalActualSizeOfDisk(sourceImage, org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(dstDomain).getStorageStaticData()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(java.lang.Double.valueOf(totalSizeForClonedDisk).longValue()); } return null; }
public static java.lang.Long determineTotalImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid dstDomain) { if (org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isInitialSizeSupportedForFormat(destFormat, dstDomain)) { double totalSizeForClonedDisk = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getTotalActualSizeOfDisk(sourceImage, org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(dstDomain).getStorageStaticData()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(sourceImage.getVolumeFormat(), java.lang.Double.valueOf(totalSizeForClonedDisk).longValue()); } return null; }
private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase createEvent() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase()); event.setVds(host); return event; }


public static <T> java.util.List<java.lang.String> validateInputs(java.util.List<java.lang.Class<?>> validationGroupList, T parameters) { java.util.List<java.lang.String> messages = java.util.Collections.emptyList(); java.util.Set<javax.validation.ConstraintViolation<T>> violations = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, validationGroupList.toArray(new java.lang.Class<?>[validationGroupList.size()])); if (!(violations.isEmpty())) { messages = new java.util.ArrayList(violations.size()); for (javax.validation.ConstraintViolation<T> constraintViolation : violations) { messages.add(constraintViolation.getMessage()); javax.validation.metadata.ConstraintDescriptor<?> constraintDescriptor = constraintViolation.getConstraintDescriptor(); if (constraintDescriptor != null) { java.util.Map<java.lang.String, java.lang.Object> violationAttributes = constraintDescriptor.getAttributes(); for (java.util.Map.Entry violationAttribute : violationAttributes.entrySet()) { java.lang.String message = java.lang.String.format("$%s %s", violationAttribute.getKey(), violationAttribute.getValue()); messages.add(message); } } if ((constraintViolation.getPropertyPath()) != null) { messages.add(EngineMessage.ACTION_TYPE_FAILED_ATTRIBUTE_PATH.name()); messages.add(java.lang.String.format("$path %s", constraintViolation.getPropertyPath())); } } } return messages; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { setIsFingerprintVerified(false); if (((getGlusterHostAddress().getEntity()) == null) || ((getGlusterHostAddress().getEntity().trim().length()) == 0)) { getGlusterHostFingerprint().setEntity(""); return; } fetchFingerprint(getGlusterHostAddress().getEntity()); }
@java.lang.Override public void sendMessage(byte[] message) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { try { waitForConnect(); } finally { send(new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().send().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_DESTINATION, this.getRequestQueue()).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withContent(message).build()); } }
@java.lang.Override public void sendMessage(byte[] message) { send(new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().send().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_DESTINATION, this.getRequestQueue()).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withContent(message).build()); }















protected org.ovirt.engine.core.common.businessentities.VM setUpVm(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.core.common.businessentities.VM vm = control.createMock(org.ovirt.engine.core.common.businessentities.VM.class); expect(vm.getId()).andReturn(id).anyTimes(); return vm; }
private org.ovirt.engine.ui.frontend.server.dashboard.Dashboard populateUtilizationCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Dashboard dashboard = getDashboard(); long endTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.dashboardCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_KEY, dashboard, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_CACHE_UPDATE_INTERVAL, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Dashboard utilization cache updated in {}ms", (endTime - startTime)); return dashboard; }
private org.ovirt.engine.ui.frontend.server.dashboard.Inventory populateInventoryCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Inventory inventory = lookupInventory(); long endTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.inventoryCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_KEY, inventory, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_CACHE_UPDATE_INTERVAL, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Dashboard inventoy cache updated in {}ms", (endTime - startTime)); return inventory; }
private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase createAuditLog(final org.ovirt.engine.core.common.businessentities.network.VmNic iface) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase()); logable.setVmId(iface.getVmId()); logable.addCustomValue("MACAddr", iface.getMacAddress()); logable.addCustomValue("IfaceName", iface.getName()); return logable; }
@java.lang.Override public void init(final T model) { super.init(model); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel model = ((org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel) (sender)); java.lang.String propertyName = args.propertyName; if ("Message".equals(propertyName)) { getView().setMessageLabel(model.getMessage()); } } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleSubnetVisibility(model.getExport().getEntity()); model.getExport().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { getView().toggleSubnetVisibility(model.getExport().getEntity()); } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleProfilesVisibility(model.getProfiles().getIsAvailable()); model.getProfiles().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsAvailable".equals(args.propertyName)) { getView().toggleProfilesVisibility(model.getProfiles().getIsAvailable()); } } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().setCommand(model.getAddQosCommand()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { getView().getQosButton().getCommand().execute(); } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().addMtuEditor(); }
public void addMenuItem(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { final com.google.gwt.user.client.ui.MenuItem menuItem = new com.google.gwt.user.client.ui.MenuItem(buttonDef.getText(), new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { menuPanelPopup.asPopupPanel().hide(); buttonDef.onClick(null); } }); menuItem.setEnabled(buttonDef.isEnabled(null)); buttonDef.addInitializeHandler(new com.google.gwt.event.logical.shared.InitializeHandler() { @java.lang.Override public void onInitialize(com.google.gwt.event.logical.shared.InitializeEvent event) { menuItem.setEnabled(buttonDef.isEnabled(null)); } }); menuPanelPopup.getMenuBar().addItem(menuItem); }
public boolean invokeAsString(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, JsFunction.RESULT_TYPE_STRING, new org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ResultHandler<java.lang.String>() { @java.lang.Override public void onResult(java.lang.String result) { org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunctionResultHelper.this.resultValue = result; org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunctionResultHelper.this.resultType = JsFunction.RESULT_TYPE_STRING; } }, errorHandler); }
public boolean invokeAsBoolean(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, JsFunction.RESULT_TYPE_BOOLEAN, new org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ResultHandler<java.lang.Boolean>() { @java.lang.Override public void onResult(java.lang.Boolean result) { org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunctionResultHelper.this.resultValue = result; org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunctionResultHelper.this.resultType = JsFunction.RESULT_TYPE_BOOLEAN; } }, errorHandler); }
public boolean invokeAsNumber(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, JsFunction.RESULT_TYPE_NUMBER, new org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ResultHandler<java.lang.Double>() { @java.lang.Override public void onResult(java.lang.Double result) { org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunctionResultHelper.this.resultValue = result; org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunctionResultHelper.this.resultType = JsFunction.RESULT_TYPE_NUMBER; } }, errorHandler); }
@java.lang.Override protected void fillMenuBar(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { if (used) { menuBar.addItem("Remove Function", new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { model.removeFunction(policyUnit); menuPopup.hide(); } }); } else { menuBar.addItem("Add Function", new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { model.addFunction(policyUnit); menuPopup.hide(); } }); } }
private org.ovirt.engine.ui.common.widget.MenuBar menuFor(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item) { org.ovirt.engine.ui.common.widget.MenuBar menu = rootMenu(item); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> operationMap = item.getSetupModel().commandsFor(item); for (final java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> entry : operationMap.entrySet()) { final java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = entry.getValue(); if (entry.getKey().isUnary()) { assert (commands.size()) == 1 : "Got a NetworkCommand List with more than one Unary Operation"; menu.addItem(entry.getKey().getVerb(item), new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { executeCommand(entry.getKey(), commands.get(0)); } }); } else { java.util.Collections.sort(commands, java.util.Comparator.comparing(NetworkCommand::getName, new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator())); org.ovirt.engine.ui.common.widget.MenuBar subMenu = subMenu(); for (final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand command : commands) { subMenu.addItem(new com.google.gwt.user.client.ui.MenuItem(command.getName(), new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { executeCommand(entry.getKey(), command); } })); } menu.addItem(entry.getKey().getVerb(item), subMenu); } } return menu; }
protected void fillMenuBar(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { if (used) { menuBar.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.removeFilter(), new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { model.removeFilter(policyUnit); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); } }); } else { menuBar.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.addFilter(), new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { model.addFilter(policyUnit, used, 0); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); } }); } }
protected void addSubMenu(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { org.ovirt.engine.ui.common.widget.MenuBar subMenu = new org.ovirt.engine.ui.common.widget.MenuBar(true); if ((position) != 0) { subMenu.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.noPositionFilter(), new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { model.addFilter(policyUnit, used, 0); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); } }); } if ((position) >= 0) { subMenu.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.firstFilter(), new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { model.addFilter(policyUnit, used, (-1)); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); } }); } if ((position) <= 0) { subMenu.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.lastFilter(), new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { model.addFilter(policyUnit, used, 1); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); } }); } menuBar.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.position(), subMenu); }
private com.google.gwt.user.client.ui.PushButton createButton(com.google.gwt.resources.client.ImageResource imageResource) { com.google.gwt.user.client.ui.PushButton result = new com.google.gwt.user.client.ui.PushButton(new com.google.gwt.user.client.ui.Image(imageResource), new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { toggleVisibleWestPanel(); } }); result.setVisible(false); result.addStyleName(style.sliderButton()); result.addStyleName("tslp_sliderButton_pfly_fix"); return result; }
@java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { eventHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(new com.google.gwt.user.client.Event.NativePreviewHandler() { @java.lang.Override public void onPreviewNativeEvent(com.google.gwt.user.client.Event.NativePreviewEvent event) { com.google.gwt.dom.client.NativeEvent nativeEvent = event.getNativeEvent(); if ((((nativeEvent.getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) && (((event.getTypeInt()) == (com.google.gwt.user.client.Event.ONKEYPRESS)) || ((event.getTypeInt()) == (com.google.gwt.user.client.Event.ONKEYDOWN)))) && (!(event.isCanceled()))) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); event.cancel(); if ((event.getTypeInt()) == (com.google.gwt.user.client.Event.ONKEYDOWN)) { enterPressed(); } } } }); }
private org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionsMenu getRefreshOptionsMenu() { org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionsMenu refreshOptionsMenu = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionsMenu(true); refreshOptionsMenu.setStylePrimaryName(style.refreshRateMenu()); com.google.gwt.user.client.ui.MenuItem title = new com.google.gwt.user.client.ui.MenuItem(org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.constants.refreshRate(), new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { } }); title.setEnabled(false); title.setStylePrimaryName(style.refreshMenuTitle()); refreshOptionsMenu.addItem(title); java.util.Set<java.lang.Integer> refreshRates = org.ovirt.engine.ui.common.widget.refresh.AbstractRefreshManager.getRefreshRates(); int itemIndex = 0; for (java.lang.Integer refreshRate : refreshRates) { org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionCommand command = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionCommand(); org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionMenuItem refreshRateOption = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionMenuItem(refreshRate, command); refreshRateOption.setStylePrimaryName(style.refreshRateOption()); command.setMenuItem(refreshRateOption); refreshOptionsMenu.addItem(refreshRateOption); if (itemIndex != ((refreshRates.size()) - 1)) { com.google.gwt.user.client.ui.MenuItemSeparator separator = refreshOptionsMenu.addSeparator(); separator.getElement().getStyle().setBackgroundColor("#E0E9F2"); } itemIndex++; } return refreshOptionsMenu; }
@com.google.gwt.uibinder.client.UiHandler("uploadButton") void onUploadIconButton(com.google.gwt.event.dom.client.ClickEvent event) { hiddenPanel.clear(); final com.google.gwt.user.client.ui.FileUpload inputFileWidget = new com.google.gwt.user.client.ui.FileUpload(); inputFileWidget.getElement().setAttribute("accept", "image/gif,image/jpeg,image/png"); inputFileWidget.addChangeHandler(new com.google.gwt.event.dom.client.ChangeHandler() { @java.lang.Override public void onChange(com.google.gwt.event.dom.client.ChangeEvent event) { readUploadedIconFile(inputFileWidget.getElement()); } }); inputFileWidget.getElement().setTabIndex((-1)); hiddenPanel.add(inputFileWidget); inputFileWidget.click(); }
private void initMenuPopup(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> actions) { menuPopup = new org.ovirt.engine.ui.common.widget.action.MenuPanelPopup(true); for (final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef : actions) { com.google.gwt.user.client.ui.MenuItem menuItem = new com.google.gwt.user.client.ui.MenuItem(buttonDef.getText(), new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { menuPopup.asPopupPanel().hide(); buttonDef.onClick(selectedItemsProvider.getSelectedItems()); } }); menuItem.addStyleName(style.menuItem()); updateMenuItem(menuItem, buttonDef, selectedItemsProvider.getSelectedItems()); menuPopup.getMenuBar().addItem(menuItem); items.add(new org.ovirt.engine.core.common.utils.Pair(menuItem, buttonDef)); } menuPopup.asPopupPanel().setAutoHideEnabled(true); menuPopup.asPopupPanel().addAutoHidePartner(dropdownButton.getElement()); menuPopup.asPopupPanel().addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { dropdownButton.setDown(false); } }); }
private void createMenu(final java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> numaNodeList, int indexToSkip) { menuBar = new org.ovirt.engine.ui.common.widget.MenuBar(true); for (final org.ovirt.engine.core.common.businessentities.VdsNumaNode numaNode : numaNodeList) { final int nodeIndex = numaNode.getIndex(); menuBar.addItem(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.messages.numaNode(nodeIndex), new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.this, nodeModel.getVm().getId(), true, nodeModel.getIndex(), nodeIndex); org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.menuPopup.hide(); } }); } if (nodeModel.isPinned()) { menuBar.addSeparator(); menuBar.addItem(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.constants.unPinNode(), new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.this, nodeModel.getVm().getId(), false, nodeModel.getIndex(), (-1)); org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.menuPopup.hide(); } }); } }





@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation(org.ovirt.engine.core.bll.dwh.DwhHeartBeat.DWH_HEART_BEAT_METHOD) public void engineIsRunningNotification() { try { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("DWH Heart Beat - Start"); heartBeatVar.setDateTime(new java.util.Date()); dwhHistoryTimekeepingDao.save(heartBeatVar); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("DWH Heart Beat - End"); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.error("Error updating DWH Heart Beat: {}", ex.getMessage()); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Exception", ex); } }
@java.lang.Override protected void teardown() { }
private void setSessionUser(org.ovirt.engine.api.model.Session session) { org.ovirt.engine.api.model.User user = getUserResource().getUserByNameAndDomain(session.getUser().getUserName(), session.getUser().getDomain().getName()); if (user != null) { session.getUser().setId(user.getId()); session.getUser().setHref(user.getHref()); session.getUser().getDomain().setId(user.getDomain().getId()); session.getUser().getDomain().setHref(user.getDomain().getHref()); } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmDevice device) { return device.getAddress(); }
private void addPluggedColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.core.common.businessentities.VmDevice> pluggedColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.core.common.businessentities.VmDevice>() { @java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.core.common.businessentities.VmDevice object) { return object.isPlugged(); } @java.lang.Override protected boolean canEdit(org.ovirt.engine.core.common.businessentities.VmDevice object) { return false; } }; pluggedColumn.makeSortable(); getTable().addColumn(pluggedColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.devicePluggedAlias(), "70px"); }
@java.lang.Override public void initializeHandlers() { super.initializeHandlers(); getView().getHotUnplugColumn().addHandler(new org.ovirt.engine.ui.common.widget.CellClickHandler<org.ovirt.engine.core.common.businessentities.VmDevice>() { @java.lang.Override public void onClick(com.google.gwt.dom.client.NativeEvent event, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice) { getModelProvider().getModel().onHotUnplug(vmDevice); } }); }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.uicommon.vm.Context context, com.google.gwt.dom.client.Element parent, org.ovirt.engine.core.common.businessentities.VmDevice device, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<org.ovirt.engine.core.common.businessentities.VmDevice> valueUpdater) { super.onBrowserEvent(context, parent, device, event, valueUpdater); if (!(BrowserEvents.CLICK.equals(event.getType()))) { return; } if (((parent.getFirstChildElement()) == null) || (!(parent.getFirstChildElement().isOrHasChild(com.google.gwt.dom.client.Element.as(event.getEventTarget()))))) { return; } for (org.ovirt.engine.ui.common.widget.CellClickHandler<org.ovirt.engine.core.common.businessentities.VmDevice> clickHandler : clickHandlers) { clickHandler.onClick(event, device); } }

@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", id).append("device", getDevice()).append("type", getType()).append("specParams", getSpecParams()).append("address", getAddress()).append("managed", isManaged()).append("plugged", isPlugged()).append("readOnly", getReadOnly()).append("deviceAlias", getAlias()).append("customProperties", getCustomProperties()).append("snapshotId", getSnapshotId()).append("logicalName", getLogicalName()).append("hostDevice", getHostDevice()).build(); }


private void onMemoryHotUnplugConfirmed() { final org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getSelectedItem(); if ((vmDevice == null) || ((vmDevice.getType()) != (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } log(("call MemoryHotUnplugCommand " + vmDevice)); }


@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.core.common.businessentities.VmDevice object) { return object.isManaged(); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { setItems(((java.util.Collection<T>) (returnValue.getReturnValue()))); }
private void addDeviceTypeColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmDevice> deviceTypeColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmDevice>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmDevice device) { return device.getDevice(); } }; deviceTypeColumn.makeSortable(); getTable().addColumn(deviceTypeColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceType(), "70px"); }

private int toSortingIndex(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice) { return (vmDevice == null) || (!(org.ovirt.engine.ui.common.widget.uicommon.vm.HotUnplugCell.isHotUnpluggable(vmDevice))) ? 0 : 1; }
@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.core.common.businessentities.VmDevice object) { return object.getReadOnly(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmDevice device) { return device.getSpecParams().toString(); }
public void onHotUnplug(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice) { if ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getEntity()) == null) { return; } if ((vmDevice == null) || ((vmDevice.getType()) != (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } final java.lang.Integer memorySizeMb = ((java.lang.Integer) (vmDevice.getSpecParams().get("size"))); if (memorySizeMb == null) { return; } setSelectedItem(vmDevice); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); confirmationModel.setTitle(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.constants.memoryHotUnplug()); confirmationModel.setHelpTag(HelpTag.template_not_found_on_export_domain); confirmationModel.setMessage(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.messages.memoryHotUnplugConfirmation(memorySizeMb, org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getEntity().getName())); confirmationModel.getCommands().add(memoryHotUnplugCommand); confirmationModel.getCommands().add(cancelMemoryHotUnplugCommand); setConfirmWindow(confirmationModel); }
@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.core.common.businessentities.VmDevice object) { return object.isPlugged(); }

private void addAddressColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmDevice> deviceAddressColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmDevice>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmDevice device) { return device.getAddress(); } }; deviceAddressColumn.makeSortable(); getTable().addColumn(deviceAddressColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceAddress(), "395px"); }
private void addManagedColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.core.common.businessentities.VmDevice> managedColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.core.common.businessentities.VmDevice>() { @java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.core.common.businessentities.VmDevice object) { return object.isManaged(); } @java.lang.Override protected boolean canEdit(org.ovirt.engine.core.common.businessentities.VmDevice object) { return false; } }; managedColumn.makeSortable(); getTable().addColumn(managedColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceManagedAlias(), "70px"); }
private void addSpecParamsColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmDevice> specParamsColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmDevice>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmDevice device) { return device.getSpecParams().toString(); } }; specParamsColumn.makeSortable(); getTable().addColumn(specParamsColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceSpecParamsAlias(), "300px"); }
private void addReadOnlyColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.core.common.businessentities.VmDevice> readonlyColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.core.common.businessentities.VmDevice>() { @java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.core.common.businessentities.VmDevice object) { return object.getReadOnly(); } @java.lang.Override protected boolean canEdit(org.ovirt.engine.core.common.businessentities.VmDevice object) { return false; } }; readonlyColumn.makeSortable(); getTable().addColumn(readonlyColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceReadOnlyAlias(), "70px"); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmDevice device) { return device.getDevice(); }
private void validateUpdateWipeAfterDelete(org.ovirt.engine.core.common.businessentities.VMStatus status) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = createDiskImage(); disk.setReadOnly(false); when(diskDao.get(diskImageGuid)).thenReturn(disk); command.getParameters().getDiskInfo().setReadOnly(false); command.getParameters().getDiskInfo().setWipeAfterDelete(true); initializeCommand(createVm(status)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(command); }
private java.lang.String composeObjectId() { final java.lang.StringBuilder builder = new java.lang.StringBuilder(); compose(builder, "type", logType.toString()); compose(builder, "sd", org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator.nullToEmptyString(event.getStorageDomainId())); compose(builder, "dc", org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator.nullToEmptyString(event.getStoragePoolId())); compose(builder, "user", org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator.nullToEmptyString(event.getUserId())); compose(builder, "cluster", event.getClusterId().toString()); compose(builder, "vds", event.getVdsId().toString()); compose(builder, "vm", emptyGuidToEmptyString(event.getVmId())); compose(builder, "template", emptyGuidToEmptyString(event.getVmTemplateId())); compose(builder, "customId", org.apache.commons.lang.StringUtils.defaultString(event.getCustomId())); return builder.toString(); }
private void compose(java.lang.StringBuilder builder, java.lang.String key, java.lang.String value) { final char DELIMITER = ','; final char NAME_VALUE_SEPARATOR = '='; if ((builder.length()) > 0) { builder.append(DELIMITER); } builder.append(key).append(NAME_VALUE_SEPARATOR).append(value); }
private boolean hasHostExternalStatus() { return ((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent().getVdsId()) != null) && ((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()) != null); }
@java.lang.Override protected boolean validate() { boolean result = true; if (((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent()) == null) || (org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent().getOrigin().equalsIgnoreCase(AuditLog.OVIRT_ORIGIN))) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLEGAL_ORIGIN); result = false; } if (!result) { addValidationMessage(EngineMessage.VAR__ACTION__ADD); addValidationMessage(EngineMessage.VAR__TYPE__EXTERNAL_EVENT); } return result; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionList = getPermissionList(org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent()); if (hasHostExternalStatus()) { permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent().getVdsId(), org.ovirt.engine.core.common.VdcObjectType.VDS, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_HOST_CONFIGURATION)); } if (hasStorageDomainExternalStatus()) { permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_STORAGE_DOMAIN_CONFIGURATION)); } return permissionList; }
private boolean hasStorageDomainExternalStatus() { return ((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent().getStorageDomainId()) != null) && ((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()) != null); }
protected void addStorageDomainInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageStaticData = getStorageDomain().getStorageStaticData(); org.ovirt.engine.core.bll.storage.domain.storageDomainStaticDao.save(storageStaticData); getCompensationContext().snapshotNewEntity(storageStaticData); org.ovirt.engine.core.common.businessentities.StorageDomainDynamic newStorageDynamic = new org.ovirt.engine.core.common.businessentities.StorageDomainDynamic(null, getStorageDomain().getId(), null); getReturnValue().setActionReturnValue(getStorageDomain().getId()); org.ovirt.engine.core.bll.storage.domain.storageDomainDynamicDao.save(newStorageDynamic); getCompensationContext().snapshotNewEntity(newStorageDynamic); getCompensationContext().stateChanged(); return null; }); if (org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().getStorageDomainType().isDataDomain()) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.createDefaultDiskProfile(); } }
private void doBackupCheck() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase()); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastDbBackup = getLastBackupByScope(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.BackupScope.DB); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastFilesBackup = getLastBackupByScope(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.BackupScope.FILES); if ((lastDbBackup == null) || (lastFilesBackup == null)) { auditLogDirector.log(alert, AuditLogType.ENGINE_NO_FULL_BACKUP); } else { java.lang.Integer backupAlertPeriodInDays = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BackupAlertPeriodInDays); java.util.Date lastDbBackupDate = lastDbBackup.getDoneAt(); java.util.Date lastFilesBackupDate = lastFilesBackup.getDoneAt(); java.util.Date lastFullBackupDate = ((lastDbBackupDate.compareTo(lastFilesBackupDate)) < 0) ? lastDbBackupDate : lastFilesBackupDate; long diffInDays = ((java.util.Calendar.getInstance().getTimeInMillis()) - (lastFullBackupDate.getTime())) / (java.util.concurrent.TimeUnit.DAYS.toMillis(1)); if (diffInDays > backupAlertPeriodInDays) { alert.addCustomValue("Date", lastFullBackupDate.toString()); auditLogDirector.log(alert, AuditLogType.ENGINE_NO_WARM_BACKUP); } } }
protected static java.lang.String getMessageOrNull(org.ovirt.engine.core.common.AuditLogType logType) { final java.lang.String key = logType.name(); try { return org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.resourceBundle.getString(key); } catch (java.lang.Exception e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.error("Key '{}' is not translated in '{}'", key, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getResourceBundleName()); return null; } }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.AuditLog event) { if (event.isExternal()) { getCallsHandler().executeModification("InsertExternalAuditLog", getExternalEventSqlMapper(event)); } else { getCallsHandler().executeModification("InsertAuditLog", getSqlMapper(event)); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent())); event.setExternal(true); java.lang.String message = getEvent().getMessage(); switch (getEvent().getSeverity()) { case NORMAL : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_NORMAL, message); break; case WARNING : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_WARNING, message); break; case ERROR : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_ERROR, message); break; case ALERT : org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.alert(event, AuditLogType.EXTERNAL_ALERT, auditLogDirector, message); break; } org.ovirt.engine.core.common.businessentities.AuditLog auditLog = auditLogDao.getByOriginAndCustomEventId(getEvent().getOrigin(), getEvent().getCustomEventId()); if (auditLog != null) { setActionReturnValue(auditLog.getAuditLogId()); org.ovirt.engine.core.bll.AddExternalEventCommand.setSucceeded(true); } if (hasHostExternalStatus()) { vdsDynamicDao.updateExternalStatus(getEvent().getVdsId(), org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()); } if (hasStorageDomainExternalStatus()) { storageDomainDynamicDao.updateExternalStatus(getEvent().getStorageDomainId(), org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()); } }
private void auditLogFailedToConnect() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase()); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); }
public boolean discover() { boolean dbUpdated = false; java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("PolicyUnits updated for external broker."); dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase()); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Discovery returned empty result when talking to broker. Disabling external units"); java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit> failingPolicyUnits = policyUnitDao.getAll().stream().collect(java.util.stream.Collectors.toList()); markExternalPoliciesAsDisabled(failingPolicyUnits); dbUpdated = true; } return dbUpdated; }
private void hotSetMemory(int currentMemory, int newAmountOfMemory) { org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters params = new org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters(newVmStatic, (currentMemory < newAmountOfMemory ? org.ovirt.engine.core.common.action.PlugAction.PLUG : org.ovirt.engine.core.common.action.PlugAction.UNPLUG), 0); org.ovirt.engine.core.common.action.VdcReturnValueBase setAmountOfMemoryResult = runInternalAction(VdcActionType.HotSetAmountOfMemory, params, org.ovirt.engine.core.bll.UpdateVmCommand.cloneContextAndDetachFromParent()); if (!(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isHostedEngine())) { newVmStatic.setMemSizeMb((setAmountOfMemoryResult.getSucceeded() ? newAmountOfMemory : currentMemory)); } hotSetMemlog(params, setAmountOfMemoryResult); }

private void updateDefaultNetworkFilterIfRequired() { if (org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFiterId()) { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = org.ovirt.engine.core.bll.network.cluster.NetworkHelper.resolveVnicProfileDefaultNetworkFilter(networkFilterDao); if (networkFilter != null) { final org.ovirt.engine.core.compat.Guid networkFilterId = networkFilter.getId(); setNetworkFilterId(networkFilterId); } } }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.createVnicProfileValidator(); boolean useDefaultNetworkFilterId = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFiterId(); return (((((((((validate(validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileForVmNetworkOnly()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.passthroughProfileContainsSupportedProperties(useDefaultNetworkFilterId)))) && (validate(validator.validUseDefaultNetworkFilterFlag(useDefaultNetworkFilterId)))) && (validate(validator.validNetworkFilterId())); }
public boolean isUseDefaultNetworkFiterId() { return useDefaultNetworkFiterId; }

@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcActionType actionToExecute = org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters().getAction(); org.ovirt.engine.core.common.action.VdcActionParametersBase actionParameters = org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters().getActionParameters(); actionParameters.setParentCommand(VdcActionType.RunAsyncAction); actionParameters.setParentParameters(org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters()); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(actionToExecute, actionParameters, org.ovirt.engine.core.bll.RunAsyncActionCommand.cloneContextAndDetachFromParent()); org.ovirt.engine.core.bll.RunAsyncActionCommand.setSucceeded(true); }
public boolean isLegal() { if (useTimeout) { java.lang.String keyForCheck = ("".equals(timeoutObjectId)) ? logType.toString() : timeoutObjectId; synchronized(keyForCheck.intern()) { if (!(org.ovirt.engine.core.dal.utils.CacheManager.getTimeoutBaseCache().containsKey(keyForCheck))) { org.ovirt.engine.core.dal.utils.CacheManager.getTimeoutBaseCache().put(keyForCheck, keyForCheck, endTime, java.util.concurrent.TimeUnit.MILLISECONDS); return true; } } return false; } return true; }
private boolean validateManagementNetworkAttachement() { final org.ovirt.engine.core.common.businessentities.network.Network managementNetwork; final org.ovirt.engine.core.compat.Guid managementNetworkId = org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getManagementNetworkId(); if (managementNetworkId == null) { managementNetwork = getDefaultManagementNetworkFinder().findDefaultManagementNetwork(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getStoragePoolId()); if (managementNetwork == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } } else { managementNetwork = networkDao.get(managementNetworkId); if (managementNetwork == null) { addValidationMessage(EngineMessage.NETWORK_NOT_EXISTS); return false; } } managementNetworkCluster = createManagementNetworkCluster(managementNetwork); final org.ovirt.engine.core.bll.network.cluster.UpdateClusterNetworkClusterValidator networkClusterValidator = createManagementNetworkClusterValidator(); return validate(networkClusterValidator.managementNetworkChange()); }
private org.ovirt.engine.core.common.action.ColdMergeCommandParameters buildColdMergeParameters(org.ovirt.engine.core.compat.Guid baseVolumeId, org.ovirt.engine.core.compat.Guid topVolumeId) { org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo = new org.ovirt.engine.core.common.businessentities.SubchainInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), baseVolumeId, topVolumeId); org.ovirt.engine.core.common.action.ColdMergeCommandParameters parameters = new org.ovirt.engine.core.common.action.ColdMergeCommandParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStoragePoolId(), subchainInfo); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }


protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksListForStorageAllocations() { if ((getSnapshotActionType()) == (org.ovirt.engine.core.common.action.VdcActionType.RemoveSnapshotSingleDiskLive)) { return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDisksDummiesForStorageAllocations(getSourceImages()); } return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getSnapshotsDummiesForStorageAllocations(getSourceImages()); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId).append("imageGroupId", imageGroupId).append("baseImageId", baseImageId).append("topImageId", topImageId).append("baseImageGeneration", baseImageGeneration).build(); }


private boolean validateInputManagementNetwork() { setManagementNetwork(getManagementNetworkById()); if ((getManagementNetwork()) == null) { addValidationMessage(EngineMessage.NETWORK_NOT_EXISTS); return false; } final org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase networkClusterValidator = createNetworkClusterValidator(); return ((validate(networkClusterValidator.networkBelongsToClusterDataCenter(org.ovirt.engine.core.bll.AddClusterCommand.getCluster(), getManagementNetwork()))) && (validate(networkClusterValidator.managementNetworkRequired(getManagementNetwork())))) && (validate(networkClusterValidator.managementNetworkNotExternal(getManagementNetwork()))); }
protected boolean validateSpaceRequirements() { if (isUnregisteredDiskExistsForCopyTemplate()) { return true; } org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = createStorageDomainValidator(); if (validate(storageDomainValidator.isDomainWithinThresholds())) { if ((getImage().getVmEntityType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.TEMPLATE)) { getImage().getSnapshots().add(getImage()); } else { getImage().getSnapshots().addAll(diskImageDao.getAllSnapshotsForLeaf(getImage().getImageId())); } return validate(storageDomainValidator.hasSpaceForDiskWithSnapshots(getImage())); } return false; }
protected java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> getVmsWithVmDeviceInfoForDiskId() { if ((cachedVmsDeviceInfo) == null) { cachedVmsDeviceInfo = vmDao.getVmsWithPlugInfo(getImage().getId()); } return cachedVmsDeviceInfo; }

private boolean isTemplate() { return !(((getImage().getVmEntityType()) == null) || (!(getImage().getVmEntityType().isTemplateType()))); }
protected boolean checkTemplateInDestStorageDomain() { if (((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) && (!(Guid.Empty.equals(getImage().getImageTemplateId())))) { org.ovirt.engine.core.common.businessentities.storage.DiskImage templateImage = diskImageDao.get(getImage().getImageTemplateId()); if (!(templateImage.getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return true; }
protected boolean isImageExist() { if ((getImage()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST); } return true; }
protected org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator createMultipleDiskVmElementValidator() { return new org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator(getImage(), diskVmElementDao.getAllDiskVmElementsByDiskId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getImageGroupID())); }
private java.lang.String getDiskIsBeingMigratedMessage() { if ((cachedDiskIsBeingMigratedMessage) == null) { cachedDiskIsBeingMigratedMessage = new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_IS_BEING_MIGRATED).withOptional("DiskName", ((getImage()) != null ? getDiskAlias() : null)).toString(); } return cachedDiskIsBeingMigratedMessage; }
protected boolean checkOperationIsCorrect() { if ((((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) && ((getImage().getVmEntityType()) != null)) && (getImage().getVmEntityType().isTemplateType())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_IS_NOT_VM_DISK, java.lang.String.format("$%1$s %2$s", "diskAliases", getImage().getDiskAlias())); } return true; }
protected org.ovirt.engine.core.bll.validator.storage.DiskValidator createDiskValidator() { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator(getImage()); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(((getImage()) != null ? getImage().getId() : org.ovirt.engine.core.compat.Guid.Empty).toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, getDiskIsBeingMigratedMessage())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() { java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> list = new java.util.ArrayList<>(); list.add(new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter(getDestinationQuotaId(), null, QuotaConsumptionParameter.QuotaAction.CONSUME, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), ((double) (getImage().getSizeInGigabytes())))); if ((org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move) == (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation())) { if (((getImage().getQuotaId()) != null) && (!(Guid.Empty.equals(getImage().getQuotaId())))) { list.add(new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter(getImage().getQuotaId(), null, QuotaConsumptionParameter.QuotaAction.RELEASE, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(), ((double) (getImage().getSizeInGigabytes())))); } } return list; }
protected boolean setAndValidateDiskProfiles() { getImage().setDiskProfileId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getDiskProfileId()); return validate(diskProfileHelper.setAndValidateDiskProfiles(java.util.Collections.singletonMap(getImage(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getCurrentUser())); }
protected boolean isImageNotLocked() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getImage(); if ((diskImage.getImageStatus()) == (org.ovirt.engine.core.common.businessentities.storage.ImageStatus.LOCKED)) { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED, java.lang.String.format("$%1$s %2$s", "diskAliases", diskImage.getDiskAlias())); } else { return failValidation(EngineMessage.VM_TEMPLATE_IMAGE_IS_LOCKED); } } return true; }
protected boolean validateDestStorage() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain()); if ((!(validate(validator.isDomainExistAndActive()))) || (!(validate(validator.domainIsValidDestination())))) { return false; } boolean moveOrCopy = ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) || ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy)); if ((moveOrCopy && (getImage().isShareable())) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLUSTERFS))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS, java.lang.String.format("$%1$s %2$s", "diskAlias", getImage().getDiskAlias())); } return true; }
@java.lang.Override protected void executeCommand() { if (isUnregisteredDiskExistsForCopyTemplate()) { addDiskMapping(); return; } org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters p = prepareChildParameters(); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = runInternalActionWithTasksContext(getImagesActionType(), p); if (!(vdcRetValue.getSucceeded())) { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.setSucceeded(false); org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getReturnValue().setFault(vdcRetValue.getFault()); } else { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.setSucceeded(true); if (((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy)) && (!(isTemplate()))) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.addDiskImageWithNoVmDevice(getImage()); } } }
protected org.ovirt.engine.core.common.businessentities.VmTemplate getTemplateForImage() { if ((getImage()) == null) { return null; } java.util.Collection<org.ovirt.engine.core.common.businessentities.VmTemplate> templates = vmTemplateDao.getAllForImage(getImage().getImageId()).values(); return !(templates.isEmpty()) ? templates.iterator().next() : null; }
protected boolean checkIfNeedToBeOverride() { if ((((isTemplate()) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy))) && (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getForceOverride()))) && (getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_ALREADY_EXISTS); } return true; }
protected boolean validateSourceStorageDomain() { org.ovirt.engine.core.compat.Guid sourceDomainId = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(); if ((sourceDomainId == null) || (Guid.Empty.equals(sourceDomainId))) { sourceDomainId = getImage().getStorageIds().get(0); org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().setSourceDomainId(sourceDomainId); } org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(storageDomainDao.getForStoragePool(sourceDomainId, getImage().getStoragePoolId())); return validate(validator.isDomainExistAndActive()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { if ((cachedPermsList) == null) { cachedPermsList = new java.util.ArrayList(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = getImage(); org.ovirt.engine.core.compat.Guid diskId = (image == null) ? org.ovirt.engine.core.compat.Guid.Empty : image.getId(); cachedPermsList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(diskId, org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_DISK_STORAGE)); cachedPermsList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return cachedPermsList; }
protected boolean isUnregisteredDiskExistsForCopyTemplate() { if ((isTemplate()) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy))) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk> unregisteredDisks = unregisteredDisksDao.getByDiskIdAndStorageDomainId(getImage().getId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()); if (!(unregisteredDisks.isEmpty())) { return true; } } return false; }
private void prepareCopyNotTemplate(org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters parameters) { parameters.setAddImageDomainMapping(false); org.ovirt.engine.core.compat.Guid newImageId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.compat.Guid newId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = getImage(); image.setId(newId); image.setImageId(newImageId); image.setDiskAlias(getDiskAlias()); image.setStorageIds(new java.util.ArrayList()); image.getStorageIds().add(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()); image.setQuotaId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getQuotaId()); image.setDiskProfileId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getDiskProfileId()); image.setImageStatus(ImageStatus.LOCKED); image.setVmSnapshotId(null); image.setParentId(Guid.Empty); image.setImageTemplateId(Guid.Empty); parameters.setDestinationImageId(newImageId); parameters.setDestImageGroupId(newId); }
private void addStorageDomainMapForCopiedTemplateDisk() { imageStorageDomainMapDao.save(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getImageId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getQuotaId(), getImage().getDiskProfileId())); }


protected static org.dbunit.database.IDatabaseConnection getConnection() throws java.lang.Exception { java.sql.Connection con = org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource.getConnection(); org.dbunit.database.IDatabaseConnection connection = new org.dbunit.database.DatabaseConnection(con); connection.getConfig().setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY, org.ovirt.engine.core.dao.BaseDaoTestCase.dataFactory); if (org.ovirt.engine.core.dao.BaseDaoTestCase.needInitializationSql) { try (java.sql.Statement stmt = con.createStatement()) { stmt.executeUpdate(org.ovirt.engine.core.dao.BaseDaoTestCase.initSql); } } return connection; }
public void setComment(java.lang.String value) { comment = value; }
@java.lang.Override public T mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { T entity = createNetworkEntity(); entity.setId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuidDefaultEmpty(rs, "id")); entity.setName(rs.getString("name")); entity.setDescription(rs.getString("description")); entity.setComment(rs.getString("free_text_comment")); entity.setType(((java.lang.Integer) (rs.getObject("type")))); entity.setAddr(rs.getString("addr")); entity.setSubnet(rs.getString("subnet")); entity.setGateway(rs.getString("gateway")); entity.setVlanId(((java.lang.Integer) (rs.getObject("vlan_id")))); entity.setStp(rs.getBoolean("stp")); entity.setDataCenterId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuidDefaultEmpty(rs, "storage_pool_id")); entity.setMtu(rs.getInt("mtu")); entity.setVmNetwork(rs.getBoolean("vm_network")); org.ovirt.engine.core.compat.Guid providerId = org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuid(rs, "provider_network_provider_id"); if (providerId != null) { entity.setProvidedBy(new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(providerId, rs.getString("provider_network_external_id"))); } entity.setQosId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuid(rs, "qos_id")); entity.setLabel(rs.getString("label")); return entity; }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper = createIdParameterMapper(networkAttachment.getId()).addValue("network_id", networkAttachment.getNetworkId()).addValue("nic_id", networkAttachment.getNicId()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(networkAttachment.getProperties())); mapIpConfiguration(networkAttachment, mapper); return mapper; }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.Network network) { return getCustomMapSqlParameterSource().addValue("addr", network.getAddr()).addValue("description", network.getDescription()).addValue("free_text_comment", network.getComment()).addValue("id", network.getId()).addValue("name", network.getName()).addValue("subnet", network.getSubnet()).addValue("gateway", network.getGateway()).addValue("type", network.getType()).addValue("vlan_id", network.getVlanId()).addValue("stp", network.getStp()).addValue("storage_pool_id", network.getDataCenterId()).addValue("mtu", network.getMtu()).addValue("vm_network", network.isVmNetwork()).addValue("provider_network_provider_id", ((network.getProvidedBy()) == null ? null : network.getProvidedBy().getProviderId())).addValue("provider_network_external_id", ((network.getProvidedBy()) == null ? null : network.getProvidedBy().getExternalId())).addValue("qos_id", network.getQosId()).addValue("label", network.getLabel()); }












private boolean isManagementNetworkChanged() { java.lang.String mgmtNetworkName = managementNetworkUtil.getManagementNetwork(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterId()).getName(); for (org.ovirt.engine.core.common.vdscommands.HostNetwork network : getNetworksToConfigure()) { if (mgmtNetworkName.equals(network.getNetworkName())) { return true; } } for (org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond : org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateOrUpdateBonds()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bondNic = getExistingNicsBusinessEntityMap().get(createOrUpdateBond.getId()); if ((bondNic != null) && (mgmtNetworkName.equals(bondNic.getNetworkName()))) { return true; } } return false; }
private org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters createSetupNetworksParameters(int timeout) { org.ovirt.engine.core.common.network.SwitchType clusterSwitchType = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getCluster().getRequiredSwitchTypeForCluster(); final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters hostCmdParams = new org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds(), getNetworksToConfigure(), getAllNetworksToRemove(), org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateOrUpdateBonds(), getRemovedBondNames(), clusterSwitchType); hostCmdParams.setRollbackOnFailure(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().rollbackOnFailure()); hostCmdParams.setConnectivityTimeout(timeout); hostCmdParams.setManagementNetworkChanged(isManagementNetworkChanged()); return hostCmdParams; }


private void initValues() { if ((networkAttachment) == null) { return; } boolean newAttachment = (networkAttachment.getId()) == null; boolean attachmentNotReportedByTheEngine = (networkAttachment.getReportedConfigurations()) == null; boolean syncedNetwork = attachmentNotReportedByTheEngine || (networkAttachment.getReportedConfigurations().isNetworkInSync()); boolean syncRequestedByUser = (!syncedNetwork) && (java.lang.Boolean.TRUE.equals(getIsToSync().getEntity())); if ((newAttachment || syncedNetwork) || syncRequestedByUser) { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNetworkAttachmentForModel(networkAttachment, networkQos, nic)); } else { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNic(nic)); } }
@java.lang.Override public void edit(T model) { profilesEditor.edit(model.getProfiles()); subnetWidget.edit(model.getSubnetModel()); }
@java.lang.Override public T flush() { profilesEditor.flush(); subnetWidget.flush(); return null; }
@java.lang.Override protected void populateTabMap() { getTabNameMapping().put(TabName.IPV4_TAB, this.ipv4Tab); getTabNameMapping().put(TabName.IPV6_TAB, this.ipv6Tab); getTabNameMapping().put(TabName.QOS_TAB, this.qosTab); getTabNameMapping().put(TabName.CUSTOM_PROPERTIES_TAB, this.customPropertiesTab); }

@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel object) { driver.edit(object); qosWidget.edit(object.getQosModel()); enableDisableByBootProtocol(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel) (sender)); java.lang.String propertyName = args.propertyName; if ("BootProtocolsAvailable".equals(propertyName)) { enableDisableByBootProtocol(model); } } }); if (object.getIsToSync().getIsChangable()) { isToSyncInfo.setVisible(true); } customPropertiesTab.setVisible(object.getCustomPropertiesModel().getIsAvailable()); customPropertiesWidget.edit(object.getCustomPropertiesModel()); customPropertiesLabel.setEnabled(object.getCustomPropertiesModel().getIsChangable()); }












private void setVmLeasesAvailability() { TModel model = getModel(); org.ovirt.engine.core.compat.Version compVer = model.getSelectedCluster().getCompatibilityVersion(); if ((model.getCustomCompatibilityVersion().getSelectedItem()) != null) { compVer = model.getCustomCompatibilityVersion().getSelectedItem(); } model.getLease().setIsChangeable(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isVmLeasesFeatureSupported(compVer), constants.vmLeasesSupported()); }
protected void commonInitialize() { priorityUtil = new org.ovirt.engine.ui.uicommonweb.models.vms.PriorityUtil(getModel()); virtioScsiUtil = new org.ovirt.engine.ui.uicommonweb.models.vms.VirtioScsiUtil(getModel()); getModel().getVmId().setIsAvailable(false); getModel().getLease().setIsChangeable(false); getModel().getIsHighlyAvailable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean ha = getModel().getIsHighlyAvailable().getEntity(); getModel().getLease().setIsChangeable(ha); if (!ha) { getModel().getLease().setSelectedItem(null); } } }); getModel().getMigrationPolicies().setItems(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getMigrationPolicies(org.ovirt.engine.core.compat.Version.getLast())); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean ha = getModel().getIsHighlyAvailable().getEntity(); getModel().getLease().setIsChangeable(ha); if (!ha) { getModel().getLease().setSelectedItem(null); } }
private org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters createParameters() { org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters parameters = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(diskId, vmId)); parameters.setReadOnly(true); return parameters; }
@org.junit.Test public void testInactiveDomainInList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(StorageDomainStatus.Inactive); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getActiveOrLockedDomainList(domainsList); assertTrue(listReturned.isEmpty()); }
private void testBusyAndActiveDomainInList(org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(status); domainsList.add(tempStorageDomains); tempStorageDomains.setStatus(StorageDomainStatus.Active); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getActiveOrLockedDomainList(domainsList); assertEquals(2, listReturned.size()); }
@org.junit.Test public void testActiveDomainInList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(StorageDomainStatus.Active); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getActiveOrLockedDomainList(domainsList); assertTrue((!(listReturned.isEmpty()))); }
protected boolean checkStorageDomainStatus(final org.ovirt.engine.core.common.businessentities.StorageDomainStatus... statuses) { boolean valid = false; org.ovirt.engine.core.common.businessentities.StorageDomainStatus status = getStorageDomainStatus(); if (status != null) { valid = java.util.Arrays.asList(statuses).contains(status); } if (!valid) { if ((status != null) && (status.isStorageDomainInProcess())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED); } addStorageDomainStatusIllegalMessage(); } return valid; }
protected java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> getActiveOrLockedDomainList(java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList) { return domainsList.stream().filter(( d) -> ((d.getStatus()) == StorageDomainStatus.Active) || (d.getStatus().isStorageDomainInProcess())).collect(java.util.stream.Collectors.toList()); }
@org.junit.Test public void testEmptyDomainList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getActiveOrLockedDomainList(domainsList); assertTrue(listReturned.isEmpty()); }
private void testBusyDomainInList(org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(status); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getActiveOrLockedDomainList(domainsList); assertTrue((!(listReturned.isEmpty()))); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksList() { if ((cachedSelectedActiveDisks) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesAndCinderForVm = getDiskImagesForVm(); if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDisks()) == null) { cachedSelectedActiveDisks = imagesAndCinderForVm; } else { cachedSelectedActiveDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.imagesIntersection(imagesAndCinderForVm, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDisks()); } } return cachedSelectedActiveDisks; }
@org.junit.Test public void testImagesDoesNotExist() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage1 = org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getNewDiskImage(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage2 = org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getNewDiskImage(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImagesFromParams = new java.util.ArrayList<>(); diskImagesFromParams.addAll(java.util.Arrays.asList(diskImage1, diskImage2)); cmd.getParameters().setDisks(diskImagesFromParams); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST)).when(diskImagesValidator).diskImagesNotExist(); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST); }
protected org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters params = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(vm.getId(), (((vm.getName()) + (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getStorageDomain().getName())) + (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.DR_SNAPSHOT_NAME_SUFFIX)), false); params.setParentCommand(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getActionType()); params.setSnapshotType(SnapshotType.REGULAR); params.setParentParameters(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters()); params.setDisks(vm.getDiskList()); params.setNeedsLocking(false); params.setEndProcedure(EndProcedure.COMMAND_MANAGED); return params; }
private void fastForwardDisksToActiveSnapshot() { if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDisks()) != null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImagesToUpdate = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.imagesSubtract(getDiskImagesForVm(), org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDisks()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImagesToUpdate) { imageDao.updateImageVmSnapshotId(diskImage.getImageId(), newActiveSnapshotId); } } }
private boolean isSpecifiedDisksExist(java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks) { if ((disks == null) || (disks.isEmpty())) { return true; } org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = createDiskImageValidator(disks); if (!(validate(diskImagesValidator.diskImagesNotExist()))) { return false; } return true; }
@org.junit.Test public void validProviderType() { when(provider.getType()).thenReturn(ProviderType.OPENSTACK_NETWORK); assertThat(validator.providerTypeValid(), isValid()); }
private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus fetchedStatus) { org.ovirt.engine.core.bll.gluster.GlusterSyncJob.log.debug("Detected that status of brick '{}' in volume '{}' changed from '{}' to '{}'", brick.getQualifiedName(), volume.getName(), brick.getStatus(), fetchedStatus); java.util.Map<java.lang.String, java.lang.String> customValues = new java.util.HashMap<>(); customValues.put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); customValues.put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); customValues.put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, customValues); if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN); } }
public void logServerMessage(final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType) { logAuditMessage((server == null ? org.ovirt.engine.core.compat.Guid.Empty : server.getClusterId()), null, server, logType, java.util.Collections.emptyMap()); }
public void logAuditMessage(final org.ovirt.engine.core.compat.Guid clusterId, final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType, final org.ovirt.engine.core.compat.Guid brickId, final java.lang.String brickPath) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); logable.setVdsName(server.getName()); logable.setVdsId(server.getId()); logable.setGlusterVolumeName(volume.getName()); logable.setGlusterVolumeId(volume.getId()); logable.setClusterId(clusterId); logable.setClusterName(server.getClusterName()); logable.setBrickId(brickId); logable.setBrickPath(brickPath); auditLogDirector.log(logable, logType); }
public void logAuditMessage(final org.ovirt.engine.core.compat.Guid clusterId, final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType, final java.util.Map<java.lang.String, java.lang.String> customValues) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase()); logable.setVds(server); logable.setGlusterVolume(volume); logable.setClusterId(clusterId); if (customValues != null) { for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : customValues.entrySet()) { logable.addCustomValue(entry.getKey(), entry.getValue()); } } auditLogDirector.log(logable, logType); }
private java.util.Map<java.util.function.Consumer<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid lunFromVgLunId, org.ovirt.engine.core.compat.Guid lunFromDbLunId, org.ovirt.engine.core.compat.Guid lunFromVgPvId, org.ovirt.engine.core.compat.Guid lunFromDbPvId) { setLunsIds(lunFromVgLunId, lunFromDbLunId, lunFromVgPvId, lunFromDbPvId); return getLunsToUpdateInDb(); }
private java.util.Map<java.util.function.Consumer<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = java.util.Collections.singletonList(lunFromVg); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = java.util.Collections.singletonList(lunFromDb); return command.getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); }
@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); java.util.Map<java.util.function.Consumer<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDb = getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); boolean dbShouldBeUpdated = (lunsToUpdateInDb.containsKey(updateExistingLuns)) || (lunsToUpdateInDb.containsKey(saveNewLuns)); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { updateLunsInDb(lunsToUpdateInDb); refreshLunsConnections(lunsFromVgInfo); cleanupLunsFromDb(lunsFromVgInfo, lunsFromDb); return null; }); } org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }
protected java.util.Map<java.util.function.Consumer<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDbMap = lunsFromDb.stream().collect(java.util.stream.Collectors.toMap(LUNs::getLUNId, java.util.function.Function.identity())); return lunsFromVgInfo.stream().collect(java.util.stream.Collectors.groupingBy(( lunFromVgInfo) -> { org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDb = lunsFromDbMap.get(lunFromVgInfo.getLUNId()); if (lunFromDb == null) { return saveNewLuns; } boolean lunFromDbHasSamePvId = java.util.Objects.equals(lunFromDb.getPhysicalVolumeId(), lunFromVgInfo.getPhysicalVolumeId()); if (lunFromDbHasSamePvId) { if ((((lunFromDb.getDeviceSize()) != (lunFromVgInfo.getDeviceSize())) || (!(java.util.Objects.equals(lunFromDb.getDiscardMaxSize(), lunFromVgInfo.getDiscardMaxSize())))) || (!(java.util.Objects.equals(lunFromDb.getDiscardZeroesData(), lunFromVgInfo.getDiscardZeroesData())))) { return updateExistingLuns; } return noOp; } return updateExistingLuns; })); }
protected void updateLunsInDb(java.util.Map<java.util.function.Consumer<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDbMap) { lunsToUpdateInDbMap.entrySet().forEach(( entry) -> entry.getKey().accept(entry.getValue())); if ((lunsToUpdateInDbMap.containsKey(saveNewLuns)) || (lunsToUpdateInDbMap.containsKey(updateExistingLuns))) { java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToUpdateInDb = lunsToUpdateInDbMap.entrySet().stream().filter(( entry) -> (entry.getKey().equals(saveNewLuns)) || (entry.getKey().equals(updateExistingLuns))).map(java.util.Map.Entry::getValue).flatMap(java.util.List::stream).collect(java.util.stream.Collectors.toList()); discardHelper.logIfLunsBreakStorageDomainDiscardFunctionality(lunsToUpdateInDb, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomainId()); } }

@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDb = getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); boolean dbShouldBeUpdated = lunsToUpdateInDb.keySet().stream().anyMatch(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler::requiresDbUpdate); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { updateLunsInDb(lunsToUpdateInDb); refreshLunsConnections(lunsFromVgInfo); cleanupLunsFromDb(lunsFromVgInfo, lunsFromDb); return null; }); } org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }





protected javax.ws.rs.core.Response doAction(final org.ovirt.engine.core.common.action.VdcActionType task, final org.ovirt.engine.core.common.action.VdcActionParametersBase params, final org.ovirt.engine.api.model.Action action, org.ovirt.engine.api.restapi.resource.AbstractBackendResource.PollingType pollingType) { awaitGrace(action); try { org.ovirt.engine.core.common.action.VdcReturnValueBase actionResult = doAction(task, params); if ((actionResult.getJobId()) != null) { setJobLink(action, actionResult); } if (actionResult.getHasAsyncTasks()) { if (expectBlocking(action)) { org.ovirt.engine.api.model.CreationStatus status = awaitCompletion(actionResult, pollingType); return actionStatus(status, action, addLinks(newModel(id))); } else { return actionAsync(actionResult, action); } } else { return actionSuccess(action, addLinks(newModel(id))); } } catch (java.lang.Exception e) { return handleError(e, action); } }
private void cancel() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = windowModel.getCurrentProxies(); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> items = currentModels.getItems(); currentModels.setItems(null); items.remove(this); currentModels.setItems(items); setWindow(null); }
private void onOk() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = windowModel.getCurrentProxies(); org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel selectedModel = windowModel.getAvailableProxies().getSelectedItem(); setEntity(selectedModel.getEntity()); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> items = currentModels.getItems(); currentModels.setItems(null); currentModels.setItems(items); setWindow(null); }

public void fillMetadataDevicesInfo(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic, org.ovirt.engine.core.compat.Guid vdsId) { try { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainFromIrs = ((org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid>) (resourceManager.runVdsCommand(VDSCommandType.HSMGetStorageDomainInfo, new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(vdsId, storageDomainStatic.getId())).getReturnValue())).getFirst(); storageDomainStatic.setFirstMetadataDevice(domainFromIrs.getFirstMetadataDevice()); storageDomainStatic.setVgMetadataDevice(domainFromIrs.getVgMetadataDevice()); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info, ignoring"); } }
private void validateRetrievedMetadataDevices() { if (((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { auditLogDirector.log(this, AuditLogType.USER_REDUCE_DOMAIN_DEVICES_FAILED_DETERMINE_METADATA_DEVICES); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GeneralException, "Couldn't determine the domain metadata devices"); } }

@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); java.util.Map<java.util.function.Consumer<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDb = getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); boolean dbShouldBeUpdated = (lunsToUpdateInDb.containsKey(updateExistingLuns)) || (lunsToUpdateInDb.containsKey(saveNewLuns)); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { updateLunsInDb(lunsToUpdateInDb); refreshLunsConnections(lunsFromVgInfo); cleanupLunsFromDb(lunsFromVgInfo, lunsFromDb); return null; }); } org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }






@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getQueryReturnValue().setReturnValue(imageTransferDao.get(org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getParameters().getId())); }



private void addDnsConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { boolean dnsResolverConfigurationSupported = org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.DnsResolverConfigurationSupported, this.cluster.getCompatibilityVersion()); if ((!(isDefaultRouteNetwork)) || (!dnsResolverConfigurationSupported)) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetworkAttachment = getNameServers(networkAttachment.getDnsResolverConfiguration()); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetwork = getNameServers(network.getDnsResolverConfiguration()); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfHost = getNameServers(reportedDnsResolverConfiguration); boolean shouldSetDefaultRoute = new org.ovirt.engine.core.bll.network.host.ShouldSetDefaultRouteFlagAndDnsData().test(true, networkAttachment); boolean engineDefineDnsConfiguration = shouldSetDefaultRoute && ((nameServersOfNetworkAttachment != null) || (nameServersOfNetwork != null)); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> expectedNameServers = (nameServersOfNetworkAttachment != null) ? nameServersOfNetworkAttachment : nameServersOfNetwork; boolean outOfSync = engineDefineDnsConfiguration && (!(java.util.Objects.equals(nameServersOfHost, expectedNameServers))); result.add(org.ovirt.engine.core.utils.DNS_CONFIGURATION, addressesAsString(nameServersOfHost), (engineDefineDnsConfiguration ? addressesAsString(expectedNameServers) : ""), (!outOfSync)); }
@java.lang.Override protected boolean isGhost(org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel value) { return org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(value.getEntity()); }
private boolean canVmNumaPinnedToVds(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes, org.ovirt.engine.core.common.businessentities.VDS vds) { java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> pNodes = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsNumaNodeDao().getAllVdsNumaNodeByVdsId(vds.getId()); if ((pNodes == null) || (pNodes.isEmpty())) { return false; } java.util.Map<java.lang.Integer, org.ovirt.engine.core.common.businessentities.VdsNumaNode> indexMap = toMap(pNodes); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vNode : nodes) { for (java.lang.Integer pinnedIndex : vNode.getVdsNumaNodeList()) { if ((vNode.getMemTotal()) > (indexMap.get(pinnedIndex).getNumaNodeStatistics().getMemFree())) { return false; } } } return true; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingResources(java.lang.Class<T> type) { java.util.List<T> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : pendingResources.values()) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } return list; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingHostResources(org.ovirt.engine.core.compat.Guid host, java.lang.Class<T> type) { if (!(resourcesByHost.containsKey(host))) { return java.util.Collections.emptyList(); } java.util.List<T> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : resourcesByHost.get(host)) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } return list; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingVmResources(org.ovirt.engine.core.compat.Guid vm, java.lang.Class<T> type) { if (!(resourcesByVm.containsKey(vm))) { return java.util.Collections.emptyList(); } java.util.List<T> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : resourcesByVm.get(vm)) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } return list; }









private java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> getDirectoryUser(org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser) { java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> groups = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.Object> response = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.findPrincipalsByIds(org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getSessionDataContainer().getSsoAccessToken(org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getParameters().getSessionId()), dbUser.getDomain(), dbUser.getNamespace(), java.util.Arrays.asList(dbUser.getExternalId()), true, true); java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> principalRecords = java.util.Collections.emptyList(); if (response.containsKey("result")) { principalRecords = ((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (response.get("result"))); } if (!(principalRecords.isEmpty())) { org.ovirt.engine.api.extensions.ExtMap principalRecord = principalRecords.iterator().next(); directoryUtils.flatGroups(principalRecord); for (org.ovirt.engine.api.extensions.ExtMap group : principalRecord.<java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>>get(PrincipalRecord.GROUPS, java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>emptyList())) { groups.add(new org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup(dbUser.getDomain(), group.get(GroupRecord.NAMESPACE), group.get(GroupRecord.NAME))); } } return groups; }


@org.junit.Test public void testDeallocateIfExternalThrowException() { nic.setName(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_NAME); nic.setId(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_ID); provider.setName(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_NAME); doThrow(new org.ovirt.engine.core.common.errors.EngineException()).when(networkProviderProxy).deallocate(nic); underTest.deallocateIfExternal(); verify(auditLogDirector).log(auditLogableBaseCaptor.capture(), same(AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED)); final java.util.Map<java.lang.String, java.lang.String> capturedCustomValues = auditLogableBaseCaptor.getValue().getCustomValues(); assertThat(capturedCustomValues, hasEntry("nicname", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_NAME)); assertThat(capturedCustomValues, hasEntry("nicid", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_ID.toString())); assertThat(capturedCustomValues, hasEntry("providername", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_NAME)); }
@java.lang.Override protected void endSuccessfully() { freeVmSnapshotsWithWait(); vmDeviceDao.remove(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getRemovedVolume().getId(), null)); baseDiskDao.remove(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getRemovedVolume().getId()); if (org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getShouldBeLogged()) { new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(this, AuditLogType.USER_FINISHED_REMOVE_DISK); } org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.setSucceeded(true); }
private void auditLogFailedToConnect() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); }
private void updateAuditLog(org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand command, org.ovirt.engine.core.common.AuditLogType auditLogType, java.lang.Long imageSizeInGigabytes) { command.addCustomValue("DiskAlias", getDisk(command).getDiskAlias()); command.addCustomValue("NewSize", java.lang.String.valueOf(imageSizeInGigabytes)); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(command, auditLogType); }
public boolean discover() { boolean dbUpdated; java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("PolicyUnits updated for external broker."); dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Discovery returned empty result when talking to broker. Disabling external units"); java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit> failingPolicyUnits = policyUnitDao.getAll().stream().collect(java.util.stream.Collectors.toList()); markExternalPoliciesAsDisabled(failingPolicyUnits); dbUpdated = true; } return dbUpdated; }
private void processSingleClusterChanges(org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param) { final org.ovirt.engine.core.bll.network.cluster.transformer.NetworkClustersToSetupNetworksParametersTransformer networkClustersToSetupNetworksParametersTransformer = networkClustersToSetupNetworksParametersTransformerFactory.createNetworkClustersToSetupNetworksParametersTransformer(getContext()); final java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> setupNetworksParams = new java.util.ArrayList<>(); setupNetworksParams.addAll(networkClustersToSetupNetworksParametersTransformer.transform(param.getAttachments(), param.getDetachments())); org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, setupNetworksParams); }
private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.action.ManageNetworkClustersParameters> mapParametersByClusterId() { final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.action.ManageNetworkClustersParameters> paramsByClusterId = new java.util.HashMap<>(); final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> attachmentByClusterId = getParameters().getAttachments().stream().collect(java.util.stream.Collectors.groupingBy(NetworkCluster::getClusterId)); final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> detachmentByClusterId = getParameters().getDetachments().stream().collect(java.util.stream.Collectors.groupingBy(NetworkCluster::getClusterId)); for (java.util.Map.Entry<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> singleClusterAttachments : attachmentByClusterId.entrySet()) { final org.ovirt.engine.core.compat.Guid clusterId = singleClusterAttachments.getKey(); final java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster> networkAttachments = singleClusterAttachments.getValue(); final java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster> networkDetachments; if (detachmentByClusterId.containsKey(clusterId)) { networkDetachments = detachmentByClusterId.get(clusterId); } else { networkDetachments = java.util.Collections.emptyList(); } paramsByClusterId.put(clusterId, new org.ovirt.engine.core.common.action.ManageNetworkClustersParameters(networkAttachments, networkDetachments, java.util.Collections.emptyList())); } for (java.util.Map.Entry<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> singleClusterAttachments : detachmentByClusterId.entrySet()) { final org.ovirt.engine.core.compat.Guid clusterId = singleClusterAttachments.getKey(); final java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster> networkDetachments = singleClusterAttachments.getValue(); if (!(attachmentByClusterId.containsKey(clusterId))) { paramsByClusterId.put(clusterId, new org.ovirt.engine.core.common.action.ManageNetworkClustersParameters(java.util.Collections.emptyList(), networkDetachments, java.util.Collections.emptyList())); } } return paramsByClusterId; }
private void updateRngDeviceIfNecessary(org.ovirt.engine.core.compat.Guid vmBaseId, org.ovirt.engine.core.compat.Version customCompatibilityLevel, org.ovirt.engine.core.common.action.HasRngDevice updateParameters) { final org.ovirt.engine.core.compat.Version oldEffectiveVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(customCompatibilityLevel, () -> oldCluster.getCompatibilityVersion()); final org.ovirt.engine.core.compat.Version newEffectiveVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(customCompatibilityLevel, () -> getCluster().getCompatibilityVersion()); final java.util.Optional<org.ovirt.engine.core.common.businessentities.VmRngDevice> updatedDeviceOptional = rngDeviceUtils.createUpdatedRngDeviceIfNecessary(oldEffectiveVersion, newEffectiveVersion, vmBaseId, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContext()); if (updatedDeviceOptional.isPresent()) { updateParameters.setUpdateRngDevice(true); updateParameters.setRngDevice(updatedDeviceOptional.get()); } }
private boolean updateVm(org.ovirt.engine.core.common.businessentities.VmStatic vm, org.ovirt.engine.core.compat.Version oldClusterVersion, boolean disableLock) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setClusterLevelChangeFromVersion(oldClusterVersion); org.ovirt.engine.core.bll.context.CommandContext context; if (disableLock) { updateParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); context = org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.cloneContextAndDetachFromParent(); } else { org.ovirt.engine.core.utils.lock.EngineLock updateVmLock = createUpdateVmLock(); lockManager.acquireLockWait(updateVmLock); context = org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(updateVmLock); } org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, context); if (!(result.getSucceeded())) { org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getReturnValue().setFault(result.getFault()); return false; } return true; }
private boolean updateClusterCompatibilityVersionToOldCluster(boolean disableLock) { org.ovirt.engine.core.compat.Version oldClusterVersion = org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getClusterCompatibilityVersionOrigin(); if (((isRestoreMemory()) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCustomCompatibilityVersion()) == null)) && (oldClusterVersion.less(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getClusterCompatibilityVersion()))) { org.ovirt.engine.core.common.businessentities.VmStatic vmFromDb = vmStaticDao.get(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVmId()); return updateVm(vmFromDb, oldClusterVersion, disableLock); } return true; }
private boolean updateVms() { for (org.ovirt.engine.core.common.businessentities.VmStatic vm : vmsLockedForUpdate) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); updateParams.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); upgradeGraphicsDevices(vm, updateParams); updateRngDeviceIfNecessary(vm.getId(), vm.getCustomCompatibilityVersion(), updateParams); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { java.util.List<java.lang.String> params = new java.util.ArrayList<>(); params.add("$action Update"); params.add("$type VM"); params.add(parseErrorMessage(result.getValidationMessages())); java.util.List<java.lang.String> messages = org.ovirt.engine.core.bll.Backend.getInstance().getErrorsTranslator().translateErrorText(params); failedUpgradeEntities.put(vm.getName(), getFailedMessage(messages)); } } return true; }
@java.lang.Override protected void executeQueryCommand() { if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isAdminUser(org.ovirt.engine.core.bll.GetVmPayloadQuery.getUser())) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> disks = dao.getVmDeviceByVmIdAndType(org.ovirt.engine.core.bll.GetVmPayloadQuery.getParameters().getId(), VmDeviceGeneralType.DISK); for (org.ovirt.engine.core.common.businessentities.VmDevice disk : disks) { if (org.ovirt.engine.core.common.businessentities.VmPayload.isPayload(disk.getSpecParams())) { org.ovirt.engine.core.common.businessentities.VmPayload payload = new org.ovirt.engine.core.common.businessentities.VmPayload(disk); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : payload.getFiles().entrySet()) { entry.setValue(new java.lang.String(org.apache.commons.codec.binary.Base64.decodeBase64(entry.getValue()))); } org.ovirt.engine.core.bll.GetVmPayloadQuery.getQueryReturnValue().setReturnValue(payload); } } } }
@org.junit.runners.Parameterized.Parameters public static java.lang.Object[][] comparisonParameters() { return new java.lang.Object[][]{ new java.lang.Object[]{ null, false }, new java.lang.Object[]{ "", false }, new java.lang.Object[]{ "http://", false }, new java.lang.Object[]{ "www.redhat.com", false }, new java.lang.Object[]{ "192.168.0.1", false }, new java.lang.Object[]{ "ftp://www.redhat.com", false }, new java.lang.Object[]{ "ftp://192.168.0.1", false }, new java.lang.Object[]{ "http://1.2.3.4:666", true }, new java.lang.Object[]{ "http://1.2.3.4", true }, new java.lang.Object[]{ "http://[1:2:3:4:5:6:7:8]", true }, new java.lang.Object[]{ "http://[1:2:3:4:5:6:7:8]:666", true }, new java.lang.Object[]{ "http://www.redhat.com", true }, new java.lang.Object[]{ "http://www.redhat.com/main", true }, new java.lang.Object[]{ "http://www.redhat.com/main/index.html", true }, new java.lang.Object[]{ "http://www.redhat.com:80", true }, new java.lang.Object[]{ "http://www.redhat.com:80/main", true }, new java.lang.Object[]{ "http://www.redhat.com:80/main/index.html", true } }; }

@org.junit.Test public void validateDiskIsOvfStore() { initializeCommand(new org.ovirt.engine.core.common.businessentities.storage.DiskImage()); initVmDiskImage(false); command.getImage().setContentType(DiskContentType.OVF_STORE); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_OVF_DISK_NOT_SUPPORTED); }


public void refreshHost() { refreshHost(cachedVds); }

@java.lang.Override public void endSuccessfully() { super.endSuccessfully(); if (org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImportAsTemplate()) { org.ovirt.engine.core.compat.Guid newTemplateId = createTemplate(); if (newTemplateId != null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.setSucceeded(true); }
@org.junit.Before public void setUp() { nic = new org.ovirt.engine.core.common.businessentities.network.VmNic(); network = createNetwork(); underTest = spy(new org.ovirt.engine.core.bll.network.ExternalNetworkManager(nic, network)); injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); when(providerDao.get(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); doReturn(providerProxyFactory).when(underTest).getProviderProxyFactory(); when(providerProxyFactory.create(provider)).thenReturn(networkProviderProxy); }
public static org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy getFromStorageDomainId(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getDbFacade().getStorageDomainDao().get(storageDomainId, userID, isFiltered); if (storageDomain != null) { org.ovirt.engine.core.common.businessentities.Provider provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomain.getStorage())); return org.ovirt.engine.core.bll.provider.ProviderProxyFactory.getInstance().create(provider); } return null; }
public static org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy getFromStorageDomainId(org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = getDbFacade().getStorageDomainStaticDao().get(storageDomainId); if (storageDomainStatic != null) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomainStatic.getStorage())); return org.ovirt.engine.core.bll.provider.ProviderProxyFactory.getInstance().create(provider); } return null; }
private static org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy getProviderFromStorageDomainStatic(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic) { org.ovirt.engine.core.common.businessentities.Provider provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomainStatic.getStorage())); return org.ovirt.engine.core.bll.provider.ProviderProxyFactory.getInstance().create(provider); }
public void deallocateIfExternal() { if (((getNetwork()) != null) && (getNetwork().isExternal())) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = getProviderDao().get(getNetwork().getProvidedBy().getProviderId()); org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy providerProxy = getProviderProxyFactory().create(provider); try { providerProxy.deallocate(nic); } catch (org.ovirt.engine.core.common.errors.EngineException e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase removePortFailureEvent = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); removePortFailureEvent.addCustomValue("NicName", nic.getName()); removePortFailureEvent.addCustomValue("NicId", nic.getId().toString()); removePortFailureEvent.addCustomValue("ProviderName", provider.getName()); getAuditLogDirector().log(removePortFailureEvent, AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED); } } }















@java.lang.SuppressWarnings("unchecked") private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); if ((org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()) == null) { return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithoutFailover(VDSCommandType.GetVGInfo, params, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStoragePoolId(), null).getReturnValue())); } return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params).getReturnValue())); }


public static java.lang.Integer getSizeOfMemoryDeviceMb(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if ((memoryDevice.getType()) != (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) { throw new java.lang.RuntimeException(((("Memory device expected but device " + memoryDevice) + " passed of type ") + (memoryDevice.getType()))); } return ((java.lang.Integer) (memoryDevice.getSpecParams().get(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE))); }
private void addImportedOtherDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDeviceToAdd) { boolean hasCd = false; for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmBase.getManagedDeviceMap().values()) { switch (vmDevice.getType()) { case DISK : if (VmDeviceType.CDROM.getName().equals(vmDevice.getDevice())) { hasCd = true; } else { continue; } break; case INTERFACE : continue; case VIDEO : vmDevice.setSpecParams(getVideoDeviceSpecParams(vmBase)); break; case HOSTDEV : continue; } vmDevice.setManaged(true); vmDeviceToAdd.add(vmDevice); } if (!hasCd) { addCdDevice(vmBase.getId()); } vmDeviceToAdd.addAll(vmBase.getUnmanagedDeviceList()); }

@java.lang.Override public javax.ws.rs.core.Response updateOvfStore(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters params = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters(); params.setStorageDomainId(guid); return performAction(VdcActionType.ProcessOvfUpdateForStorageDomain, params); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Locked, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); if (shouldPerformOvfUpdate()) { org.ovirt.engine.core.common.action.ProcessOvfUpdateForStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStoragePoolParameters(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getStoragePoolId()); parameters.setUpdateStorage(false); runInternalAction(VdcActionType.ProcessOvfUpdateForStoragePool, parameters, null); runInternalActionWithTasksContext(VdcActionType.ProcessOvfUpdateForStorageDomain, createProcessOvfUpdateForDomainParams(), null); } if (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.noAsyncOperations()) { executeDeactivateCommand(); } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { int missingDiskCount = getMissingDiskCount(); if (missingDiskCount == 0) { setOvfUpdateStep(OvfUpdateStep.OVF_UPLOAD); updateOvfStoreContent(); } else { setOvfUpdateStep(OvfUpdateStep.OVF_STORES_CREATION); createOvfStoreDisks(getMissingDiskCount()); } org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.setSucceeded(true); }
private org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils mockVmPropertiesUtils() throws org.ovirt.engine.core.common.utils.exceptions.InitializationException { org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils utils = spy(new org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils()); doReturn(("sap_agent=^(true|false)$;sndbuf=^[0-9]+$;" + ("vhost=^(([a-zA-Z0-9_]*):(true|false))(,(([a-zA-Z0-9_]*):(true|false)))*$;" + "viodiskcache=^(none|writeback|writethrough)$"))).when(utils).getPredefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn("").when(utils).getUserdefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn(new java.util.HashSet(java.util.Arrays.asList(Version.v3_6, Version.v4_0))).when(utils).getSupportedClusterLevels(); doReturn(utils).when(runVmValidator).getVmPropertiesUtils(); utils.init(); return utils; }


protected com.google.gwt.view.client.AsyncDataProvider<T> getDataProvider() { return dataProvider; }
@java.lang.Override public java.util.List<T> getSelectedItems() { java.util.List<T> selectedItems = new java.util.ArrayList<>(); selectedItems.add(selectionModel.getSelectedObject()); return selectedItems; }
@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener(( ev, sender, args) -> clearSelection()); }
@java.lang.Override public java.util.List<T> getSelectedItems() { if (org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().isSingleSelectionOnly()) { return ((java.util.List<T>) (java.util.Collections.singletonList(org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().getSingleSelectionModel().getSelectedObject()))); } else { return org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().getOrderedMultiSelectionModel().getSelectedList(); } }
private org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils mockVmPropertiesUtils() throws org.ovirt.engine.core.common.utils.exceptions.InitializationException { org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils utils = spy(new org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils()); doReturn(("sap_agent=^(true|false)$;sndbuf=^[0-9]+$;" + (("vhost=^(([a-zA-Z0-9_]*):(true|false))(,(([a-zA-Z0-9_]*):(true|false)))*$;" + "viodiskcache=^(none|writeback|writethrough)$;") + "mdev_type=^.*$"))).when(utils).getPredefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn("").when(utils).getUserdefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn(new java.util.HashSet(java.util.Arrays.asList(Version.v3_6, Version.v4_0))).when(utils).getSupportedClusterLevels(); doReturn(utils).when(runVmValidator).getVmPropertiesUtils(); utils.init(); return utils; }
public void setHeaderTitle(java.lang.String title) { this.title.setText(title); }
@com.google.gwt.uibinder.client.UiHandler("toggleAnchor") void onToggleAnchor(com.google.gwt.event.dom.client.ClickEvent event) { if ((toggleHandler) != null) { toggleHandler.toggle(); } }
public void addAllAction(java.lang.String label, org.ovirt.engine.ui.uicommonweb.UICommand command, org.ovirt.engine.ui.webadmin.widget.alert.AuditLogActionCallback callback) { notificationList.addAllActionCallback(label, command, callback); }

private void updatePermissionPanel() { final org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile = getModel().getSelectedItem(); final org.ovirt.engine.ui.common.widget.table.SimpleActionTable<org.ovirt.engine.core.common.businessentities.profiles.CpuProfile> table = getTable(); table.removeStyleName(org.ovirt.engine.ui.webadmin.section.main.view.tab.cluster.CpuProfilesListModelTable.OBRAND_MAIN_TAB); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { if ((permissionPanelVisible) && (cpuProfile == null)) { tableContainer.clear(); tableContainer.add(getContainer()); permissionPanelVisible = false; } else if ((!(permissionPanelVisible)) && (cpuProfile != null)) { tableContainer.clear(); tableContainer.add(getContainer()); tableContainer.add(permissionContainer); permissionPanelVisible = true; } }); }

@java.lang.Override public void setSearchPanel(com.google.gwt.user.client.ui.IsWidget searchPanel) { actionPanel.setSearchPanel(searchPanel); }
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler(( event) -> { org.ovirt.engine.ui.webadmin.section.main.presenter.modelProvider.setSelectedItems(getSelectedItems()); fireTableSelectionChangeEvent(); if (!(isVisible())) { handlePlaceTransition(); } })); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setDetailPlaceTransitionHandler(this); this.breadCrumbs.setSelectionModel(getTable().getSelectionModel()); }









private java.util.Map<java.lang.String, java.lang.Object>[] getVmInfo(org.ovirt.engine.core.compat.Guid vdsId, java.util.List<org.ovirt.engine.core.compat.Guid> vms) { if ((vdsId == null) || (vms.isEmpty())) { return null; } java.util.Map<java.lang.String, java.lang.Object>[] result = new java.util.Map[0]; java.util.List<java.lang.String> vmIds = vms.stream().map(Guid::toString).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = getResourceManager().runVdsCommand(VDSCommandType.FullList, new org.ovirt.engine.core.common.vdscommands.FullListVDSCommandParameters(vdsId, vmIds)); if (vdsReturnValue.getSucceeded()) { result = ((java.util.Map<java.lang.String, java.lang.Object>[]) (vdsReturnValue.getReturnValue())); } return result; }


private boolean updateVmLease() { if (java.util.Objects.equals(oldVm.getLeaseStorageDomainId(), newVmStatic.getLeaseStorageDomainId())) { return true; } if (!(addVmLease(newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()))) { return false; } removeVmLease(oldVm.getLeaseStorageDomainId(), oldVm.getId()); return true; }
public boolean isFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(isFieldUpdatable(name))) { if (((fieldContainer != null) && ((container) != null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values != null) ? values.contains(name) : false; if ((!returnValue) && hotsetEnabled) { returnValue = isHotSetField(name); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn("Field '{}' can not be updated when status is '{}'", name, status); } } return returnValue; }
private boolean updateVmLease() { if (java.util.Objects.equals(oldVm.getLeaseStorageDomainId(), newVmStatic.getLeaseStorageDomainId())) { return true; } if (!(addVmLease(newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()))) { return false; } removeVmLease(oldVm.getLeaseStorageDomainId(), oldVm.getId()); return true; }



@java.lang.Override protected void executeCommand() { if ((isGlusterEnabled()) && ((upServer) != null)) { glusterHostRemove(); if (!(org.ovirt.engine.core.bll.RemoveVdsCommand.getSucceeded())) { return; } } if (!(clusterHasMultipleHosts())) { removeGlusterVolumesFromDb(); removeGlusterHooksFromDb(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { removeVdsStatisticsFromDb(); removeVdsDynamicFromDb(); removeVdsStaticFromDb(); return null; }); removeVdsFromCollection(); org.ovirt.engine.core.bll.RemoveVdsCommand.setSucceeded(true); }



public void init() { startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmListByClusterName(new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.model.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.VM>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList) { java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityGroup().getVmIds(); getVmsSelectionModel().init(vmList, (vmIds != null ? vmIds : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); stopProgress(); } }), clusterName); }
void onSave() { if (!(validate())) { return; } if ((getProgress()) != null) { return; } org.ovirt.engine.core.common.scheduling.AffinityGroup group = getAffinityGroup(); group.setName(getName().getEntity()); group.setDescription(getDescription().getEntity()); group.setClusterId(clusterId); group.setVmEnforcing(getEnforcing().getEntity()); group.setVmAffinityRule(getVmAffinityRule().getSelectedItem()); group.setVmIds(getVmsSelectionModel().getSelectedVmIds()); startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(saveActionType, new org.ovirt.engine.core.common.scheduling.parameters.AffinityGroupCRUDParameters(group.getId(), group), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { stopProgress(); if (((result != null) && ((result.getReturnValue()) != null)) && (result.getReturnValue().getSucceeded())) { cancel(); } } }, this); }



public java.util.List<org.ovirt.engine.core.compat.Guid> getSelectedVmIds() { java.util.List<org.ovirt.engine.core.compat.Guid> list = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyModel : getItems()) { java.lang.String selectedItem = keyModel.getKeys().getSelectedItem(); if (isKeyValid(selectedItem)) { list.add(allVmNameMap.get(selectedItem).getId()); } } return list; }

public void init(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms, java.util.List<org.ovirt.engine.core.compat.Guid> usedVms) { if ((vms == null) || (usedVms == null)) { return; } allVmNameMap = new java.util.HashMap(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vmmMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { allVmNameMap.put(vm.getName(), vm); vmmMap.put(vm.getId(), vm); } java.util.Set<java.lang.String> usedVmNames = new java.util.HashSet<>(); for (org.ovirt.engine.core.compat.Guid guid : usedVms) { usedVmNames.add(vmmMap.get(guid).getName()); } init(allVmNameMap.keySet(), usedVmNames); }




public void setUsePatternFly(boolean use) { keyField.setUsePatternFly(use); valueField.setUsePatternFly(use); valuesField.setUsePatternFly(use); }








private void updateKeyTitle(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) { java.lang.String selectedKey = object.getKeys().getSelectedItem(); if (selectedKey != null) { keyField.setWidgetTooltip(selectedKey); } }

@java.lang.Override protected void updateDetailsAvailability() { super.updateDetailsAvailability(); org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.getSelectedItem(); getClusterVmListModel().setIsAvailable(((cluster != null) && (cluster.supportsVirtService()))); getClusterServiceModel().setIsAvailable(((cluster != null) && (cluster.supportsGlusterService()))); getClusterGlusterHookListModel().setIsAvailable(((cluster != null) && (cluster.supportsGlusterService()))); getAffinityGroupListModel().setIsAvailable(((cluster != null) && (cluster.supportsVirtService()))); getCpuProfileListModel().setIsAvailable(((cluster != null) && (cluster.supportsVirtService()))); }













@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.VirtualMachineSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.AuditLog, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>, org.ovirt.engine.ui.uicommonweb.models.vms.VmEventListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineEventPresenter.constants.virtualMachineEventSubTabLabel(), 10, modelProvider, org.ovirt.engine.ui.common.widget.Align.RIGHT); }


public void setActiveDetailModel(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> value) { if ((activeDetailModel) != value) { activeDetailModelChanging(value, getActiveDetailModel()); activeDetailModel = value; activeDetailModelChanged(); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("ActiveDetailModel")); } }
private void activeDetailModelChanging(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> newValue, org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> oldValue) { if (oldValue != null) { oldValue.setEntity(null); if (oldValue instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (oldValue)).stopRefresh(); } } if (newValue != null) { newValue.setEntity(provideDetailModelEntity(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.getSelectedItem())); } }

public static java.lang.String encrypt(javax.servlet.ServletContext ctx, java.lang.String clientId, java.lang.String rawText) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.ClientInfo clientInfo = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoContext(ctx).getClienInfo(clientId); try (java.io.InputStream in = new java.io.FileInputStream(clientInfo.getCertificateLocation())) { return org.ovirt.engine.core.uutils.crypto.EnvelopeEncryptDecrypt.encrypt("AES/OFB/PKCS5Padding", 256, java.security.cert.CertificateFactory.getInstance("X.509").generateCertificate(in), 100, rawText.getBytes(java.nio.charset.StandardCharsets.UTF_8)); } }



@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { try { org.ovirt.engine.core.sso.servlets.OAuthAuthorizeServlet.log.debug("Entered AuthorizeServlet QueryString: {}, Parameters : {}", request.getQueryString(), org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameters(request)); java.lang.String clientId = org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameter(request, SsoConstants.HTTP_PARAM_CLIENT_ID); java.lang.String responseType = org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameter(request, SsoConstants.JSON_RESPONSE_TYPE); java.lang.String scope = org.ovirt.engine.core.sso.utils.SsoUtils.getScopeRequestParameter(request, ""); java.lang.String state = org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameter(request, SsoConstants.HTTP_PARAM_STATE, ""); java.lang.String appUrl = org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameter(request, SsoConstants.HTTP_PARAM_APP_URL, ""); java.lang.String engineUrl = org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameter(request, SsoConstants.HTTP_PARAM_ENGINE_URL, ""); java.lang.String redirectUri = request.getParameter(SsoConstants.HTTP_PARAM_REDIRECT_URI); org.ovirt.engine.core.sso.utils.SsoUtils.validateClientRequest(request, clientId, null, scope, redirectUri); if (!(responseType.equals("code"))) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SsoConstants.ERR_CODE_INVALID_REQUEST, java.lang.String.format(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_UNSUPPORTED_PARAMETER_IN_REQUEST, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE)))), responseType, SsoConstants.JSON_RESPONSE_TYPE)); } login(request, response, clientId, scope, state, appUrl, engineUrl, redirectUri); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.SsoUtils.redirectToErrorPage(request, response, ex); } }
private java.util.Map<java.lang.String, java.lang.Object> buildResponse(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession, java.lang.String clientId) throws java.lang.Exception { java.util.Map<java.lang.String, java.lang.Object> payload = buildResponse(ssoSession); if (org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList(ssoSession.getScope()).contains(SsoConstants.OPENID_SCOPE)) { payload.put("id_token", org.ovirt.engine.core.sso.utils.SsoUtils.createJWT(request, ssoSession, clientId)); } return payload; }




@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener(( ev, sender, args) -> clearSelection()); getModel().getSelectionModel().addSelectionChangeHandler(( event) -> { this.setSelectedItems(java.util.Collections.singletonList(((SingleSelectionModel<org.ovirt.engine.core.common.businessentities.Bookmark>) (getModel().getSelectionModel())).getSelectedObject())); }); }
private static void extractInterfaceStatistics(java.util.Map<java.lang.String, java.lang.Object> dict, org.ovirt.engine.core.common.businessentities.network.NetworkInterface<?> iface) { org.ovirt.engine.core.common.businessentities.network.NetworkStatistics stats = iface.getStatistics(); stats.setReceiveDropRate(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValueWithNullProtection(dict, VdsProperties.rx_dropped)); stats.setReceivedBytes(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignLongValue(dict, VdsProperties.rx_total)); stats.setTransmitDropRate(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValueWithNullProtection(dict, VdsProperties.tx_dropped)); stats.setTransmittedBytes(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignLongValue(dict, VdsProperties.tx_total)); stats.setSampleTime(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValue(dict, VdsProperties.sample_time)); iface.setSpeed(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignIntValue(dict, VdsProperties.INTERFACE_SPEED)); }


@java.lang.Override public void setHasSelectedTags(boolean hasSelectedTags) { if (hasSelectedTags) { searchBoxPanel.addStyleName(style.searchBoxPanel_HasSelectedTags()); searchBoxClear.addStyleName(style.searchBoxClear_HasSelectedTags()); } else { searchBoxPanel.setStyleName(style.searchBoxPanel()); searchBoxClear.setStyleName(style.searchBoxClear()); } }

private java.lang.String[] getSearchObjectFilter() { java.util.List<java.lang.String> filter = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.SearchableListModel list : commonModel.getItems()) { if ((list != null) && (!(list.getIsAvailable()))) { java.lang.String[] searchObjects = list.getSearchObjects(); if (searchObjects != null) { filter.addAll(java.util.Arrays.asList(searchObjects)); } } } return filter.toArray(new java.lang.String[0]); }
private void syncAttachedDirectLuns(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> deviceList) { org.ovirt.engine.core.common.action.SyncAttachedDirectLunsParameters parameters = new org.ovirt.engine.core.common.action.SyncAttachedDirectLunsParameters(org.ovirt.engine.core.bll.storage.pool.SyncAllUsedLunsCommand.getParameters().getStoragePoolId()); parameters.setDeviceList(deviceList); runInternalAction(VdcActionType.SyncAttachedDirectLuns, parameters); }
@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.storage.pool.AbstractSyncLunsCommand.checkStoragePool())) { return false; } return super.validate(); }
private void validateRemove() { if (((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getVdsId()); validateRetrievedMetadataDevices(); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageStaticData()); java.util.List<java.lang.String> metadataDevices = blockStorageDomainHelper.findMetadataDevices(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce()); if (!(metadataDevices.isEmpty())) { org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.setCustomCommaSeparatedValues("deviceIds", metadataDevices); auditLogDirector.log(this, AuditLogType.USER_REDUCE_DOMAIN_DEVICES_FAILED_METADATA_DEVICES); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GeneralException, "Cannot perform on metadata devices"); } } validateFreeSpace(); }
public void fillMetadataDevicesInfo(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic, org.ovirt.engine.core.compat.Guid vdsId) { try { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainFromIrs = ((org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid>) (resourceManager.runVdsCommand(VDSCommandType.HSMGetStorageDomainInfo, new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(vdsId, storageDomainStatic.getId())).getReturnValue())).getFirst(); storageDomainStatic.setFirstMetadataDevice(domainFromIrs.getFirstMetadataDevice()); storageDomainStatic.setVgMetadataDevice(domainFromIrs.getVgMetadataDevice()); } catch (java.lang.Exception e) { storageDomainStatic.setFirstMetadataDevice(null); storageDomainStatic.setVgMetadataDevice(null); org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info"); } }
protected void updateMetadataDevices() { if (((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getVds().getId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } }
private void refreshMetadataDevicesInfoIfNeeded() { if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId())) { log.info("vds id wasn't passed to the command, skipping metadata devices refresh"); return; } java.lang.String oldVgMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice(); java.lang.String oldFirstMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()); if ((!(java.util.Objects.equals(oldVgMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()))) || (!(java.util.Objects.equals(oldFirstMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice())))) { storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } blockStorageDomainHelper.checkDomainMetadataDevices(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain()); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.initializeStorageDomain(); java.lang.String storage = ((org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage()) != null) ? org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage() : ""; org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(""); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInDb(); if (org.apache.commons.lang.StringUtils.isEmpty(storage)) { storage = createVG(); } org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(storage); if ((org.apache.commons.lang.StringUtils.isNotEmpty(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage())) && (org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInIrs())) { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.updateStorageDomainDynamicFromIrs(); proceedVGLunsInDb(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getVds().getId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData()); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.setSucceeded(true); } }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getDeviceList(java.util.List<java.lang.String> lunsIds) { if ((AbstractSyncLunsCommand.getParameters().getDeviceList()) == null) { return runGetDeviceList(lunsIds); } if (lunsIds == null) { return AbstractSyncLunsCommand.getParameters().getDeviceList(); } java.util.Set<java.lang.String> lunsIdsSet = new java.util.HashSet<>(lunsIds); return AbstractSyncLunsCommand.getParameters().getDeviceList().stream().filter(( lun) -> lunsIdsSet.contains(lun.getId())).collect(java.util.stream.Collectors.toList()); }
private org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters createParameters(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.api.model.LogicalUnit> newLuns, boolean force) { org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters params = new org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters(); params.setStorageDomainId(storageDomainId); java.util.ArrayList<java.lang.String> lunIds = newLuns.stream().map(LogicalUnit::getId).collect(java.util.stream.Collectors.toCollection(java.util.ArrayList::new)); params.setLunIds(lunIds); params.setForce(force); return params; }
@java.lang.Override protected void writeGeneralData() { super.writeGeneralData(); _writer.writeStartElement(OvfProperties.NAME); _writer.writeRaw(_vmTemplate.getName()); _writer.writeEndElement(); _writer.writeStartElement(OvfProperties.TEMPLATE_ID); _writer.writeRaw(_vmTemplate.getId().toString()); _writer.writeEndElement(); _writer.writeStartElement(OvfProperties.ORIGIN); _writer.writeRaw(((_vmTemplate.getOrigin()) == null ? "" : java.lang.String.valueOf(_vmTemplate.getOrigin().getValue()))); _writer.writeEndElement(); _writer.writeStartElement(OvfProperties.TEMPLATE_DEFAULT_DISPLAY_TYPE); _writer.writeRaw(java.lang.String.valueOf(_vmTemplate.getDefaultDisplayType().getValue())); _writer.writeEndElement(); _writer.writeStartElement(OvfProperties.IS_DISABLED); _writer.writeRaw(java.lang.String.valueOf(_vmTemplate.isDisabled())); _writer.writeEndElement(); _writer.writeStartElement(OvfProperties.TRUSTED_SERVICE); _writer.writeRaw(java.lang.String.valueOf(_vmTemplate.isTrustedService())); _writer.writeEndElement(); _writer.writeStartElement(OvfProperties.TEMPLATE_TYPE); _writer.writeRaw(_vmTemplate.getTemplateType().name()); _writer.writeEndElement(); _writer.writeStartElement(OvfProperties.BASE_TEMPLATE_ID); _writer.writeRaw(_vmTemplate.getBaseTemplateId().toString()); _writer.writeEndElement(); _writer.writeStartElement(OvfProperties.TEMPLATE_VERSION_NUMBER); _writer.writeRaw(java.lang.String.valueOf(_vmTemplate.getTemplateVersionNumber())); _writer.writeEndElement(); _writer.writeStartElement(OvfProperties.TEMPLATE_VERSION_NAME); _writer.writeRaw(_vmTemplate.getTemplateVersionName()); _writer.writeEndElement(); _writer.writeStartElement("AutoStartup"); _writer.writeRaw(java.lang.String.valueOf(_vmTemplate.isAutoStartup())); _writer.writeEndElement(); }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getSelectedItems())) : null; boolean shouldAllowEdit = true; if (disk != null) { shouldAllowEdit = (!(disk.isOvfStore())) && (!(isDiskLocked(disk))); } getNewCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk != null) && (disks != null)) && ((disks.size()) == 1)) && shouldAllowEdit)); getRemoveCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isRemoveCommandAvailable()))); getScanAlignmentCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isScanAlignmentCommandAvailable()))); getExportCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveCommandAvailability(disks); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems()) != null ? getItems() : null), ((getSelectedItems()) != null ? getSelectedItems() : null), getSystemTreeSelectedItem(), getChangeQuotaCommand()); getCancelUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isCancelAllowed(disks)); getPauseUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isPauseAllowed(disks)); getResumeUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isResumeAllowed(disks)); }
protected void updateDefaultHost() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getModel().getSelectedCluster(); final org.ovirt.engine.ui.uicompat.UIConstants constants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants(); if (cluster == null) { getModel().getDefaultHost().setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); getModel().getDefaultHost().setSelectedItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); return; } getHostListByCluster(cluster, asyncQuery(( hosts) -> { List<org.ovirt.engine.core.common.businessentities.VDS> oldDefaultHosts = getModel().getDefaultHost().getSelectedItems(); if (((getModel().getBehavior().getSystemTreeSelectedItem()) != null) && ((getModel().getBehavior().getSystemTreeSelectedItem().getType()) == SystemTreeItemType.Host)) { org.ovirt.engine.core.common.businessentities.VDS host = ((org.ovirt.engine.core.common.businessentities.VDS) (getModel().getBehavior().getSystemTreeSelectedItem().getEntity())); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { if (host.getId().equals(vds.getId())) { getModel().getDefaultHost().setItems(new org.ovirt.engine.ui.uicommonweb.models.vms.ArrayList<>(java.util.Collections.singletonList(vds))); getModel().getDefaultHost().setSelectedItems(java.util.Collections.singletonList(vds)); getModel().getDefaultHost().setIsChangeable(false); getModel().getDefaultHost().setChangeProhibitionReason(constants.cannotChangeHostInTreeContext()); break; } } } else { getModel().getDefaultHost().setItems(hosts); if ((oldDefaultHosts != null) && (!(oldDefaultHosts.isEmpty()))) { Set<org.ovirt.engine.core.common.businessentities.VDS> oldSelectedIntersectionNewHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.HashSet<>(oldDefaultHosts); oldSelectedIntersectionNewHosts.retainAll(hosts); oldDefaultHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.ArrayList<>(oldSelectedIntersectionNewHosts); } List<org.ovirt.engine.core.common.businessentities.VDS> hostsToSelect = ((oldDefaultHosts != null) && (!(oldDefaultHosts.isEmpty()))) ? oldDefaultHosts : !(hosts.isEmpty()) ? java.util.Collections.singletonList(hosts.get(0)) : java.util.Collections.<org.ovirt.engine.core.common.businessentities.VDS>emptyList(); getModel().getDefaultHost().setSelectedItems(hostsToSelect); } changeDefaultHost(); })); }
private void updateActionAvailability() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> items = ((getSelectedItems()) != null) ? getSelectedItems() : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(); org.ovirt.engine.core.common.businessentities.StorageDomain item = getSelectedItem(); getNewDomainCommand().setIsAvailable(true); getEditCommand().setIsExecutionAllowed((((items.size()) == 1) && (isEditAvailable(item)))); getRemoveCommand().setIsExecutionAllowed(((((items.size()) == 1) && (!(items.get(0).getStorageType().isOpenStackDomain()))) && ((items.get(0).getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)))); getDestroyCommand().setIsExecutionAllowed(((((item != null) && ((items.size()) == 1)) && (!(items.get(0).getStorageType().isOpenStackDomain()))) && ((item.getStatus()) != (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)))); getScanDisksCommand().setIsExecutionAllowed((((((item != null) && ((items.size()) == 1)) && (!(items.get(0).getStorageType().isOpenStackDomain()))) && ((item.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active))) && (item.getStorageDomainType().isDataDomain()))); getUpdateOvfsCommand().setIsExecutionAllowed(((((item != null) && ((items.size()) == 1)) && (item.getStorageDomainType().isDataDomain())) && ((item.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)))); boolean isAvailable = !(((getSystemTreeSelectedItem()) != null) && ((getSystemTreeSelectedItem().getType()) == (org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemType.Storage))); getNewDomainCommand().setIsAvailable(isAvailable); getRemoveCommand().setIsAvailable(isAvailable); getDestroyCommand().setIsAvailable(isAvailable); getScanDisksCommand().setIsAvailable(isAvailable); getUpdateOvfsCommand().setIsAvailable(isAvailable); }
private void updateActionAvailability() { getCopyCommand().setIsExecutionAllowed(((((getSelectedItems()) != null) && ((getSelectedItems().size()) > 0)) && (isCopyCommandAvailable()))); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems()) != null ? getItems() : null), ((getSelectedItems()) != null ? getSelectedItems() : null), getSystemTreeSelectedItem(), getChangeQuotaCommand()); }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); getNewCommand().setIsExecutionAllowed(true); getAttachCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk != null) && (isSingleDiskSelected())) && (!(isDiskLocked(disk)))) && (((isVmDown()) || (!(disk.getPlugged()))) || (isExtendImageSizeEnabled())))); getRemoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isRemoveCommandAvailable()))); getSparsifyCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isSparsifyCommandAvailable()))); getMoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && ((isMoveCommandAvailable()) || (isLiveMoveCommandAvailable())))); updateScanAlignmentCommandAvailability(); getPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(true)); getUnPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(false)); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems()) != null ? ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getItems())) : null), ((getSelectedItems()) != null ? getSelectedItems() : null), getSystemTreeSelectedItem(), getChangeQuotaCommand()); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainSectionPresenter.TYPE_SetHeader)) { setPanelContent(headerPanel, content); } else if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainSectionPresenter.TYPE_SetMainContent)) { setPanelContent(mainContentPanel, content); } else { super.setInSlot(slot, content); } }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLogicalUnits() { boolean reportStatus = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendHostStorageResource.REPORT_STATUS, true, true); return getBackendCollection(VdcQueryType.GetDeviceList, new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(asGuid(hostId), org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN, reportStatus, null)); }

protected void syncSearch(org.ovirt.engine.core.common.queries.VdcQueryType vdcQueryType, final java.util.Comparator<? super T> comparator) { if ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity()) == null) { return; } org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity().getId()); parameters.setRefresh(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, parameters, new org.ovirt.engine.ui.uicommonweb.models.storage.SetSortedItemsAsyncQuery(comparator)); }
protected void syncSearch(org.ovirt.engine.core.common.queries.VdcQueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase, org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, vdcQueryParametersBase, asyncCallback); setIsQueryFirstTime(false); }
protected void syncSearch(org.ovirt.engine.core.common.queries.VdcQueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase) { syncSearch(vdcQueryType, vdcQueryParametersBase, new SetItemsAsyncQuery()); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase, org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, vdcQueryParametersBase, asyncCallback); setIsQueryFirstTime(false); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase) { syncSearch(vdcQueryType, vdcQueryParametersBase, new SetItemsAsyncQuery()); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLogicalUnits() { boolean reportStatus = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendHostStorageResource.REPORT_STATUS, true, true); return getBackendCollection(VdcQueryType.GetDeviceList, new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(asGuid(hostId), org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN, reportStatus, null)); }
java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> runMultipleQueries(java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryType> vdcQueryTypeList, java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryParametersBase> paramsList);
protected org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer initializeVdsBroker(org.ovirt.engine.core.compat.Guid vdsId) { org.ovirt.engine.core.vdsbroker.VdsManager vdsmanager = org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().getVdsManager(vdsId); if (vdsmanager == null) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.RESOURCE_MANAGER_VDS_NOT_FOUND, java.lang.String.format("Vds with id: %1$s was not found", vdsId)); } setVdsAndVdsStatic(vdsmanager.getCopyVds()); return vdsmanager.getVdsProxy(); }
@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener(( ev, sender, args) -> clearSelection()); getModel().getSelectionModel().addSelectionChangeHandler(( event) -> { this.setSelectedItems(java.util.Collections.singletonList(((SingleSelectionModel<org.ovirt.engine.core.common.businessentities.Bookmark>) (getModel().getSelectionModel())).getSelectedObject())); }); }


private void initStorageDomainDiscardAfterDelete(org.ovirt.engine.core.compat.Version compatibilityVersion) { if ((org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().getDiscardAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().setDiscardAfterDelete(getDefaultDiscardAfterDelete(compatibilityVersion)); } }
protected boolean validateVmNotDuringSnapshot() { return validate(snapshotsValidator.vmNotDuringSnapshot(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVmId())); }

private void convertCustomPropertiesStrToMaps(org.ovirt.engine.core.compat.Version version, java.lang.String propertiesValue, java.util.Map<java.lang.String, java.lang.String> predefinedPropertiesMap, java.util.Map<java.lang.String, java.lang.String> userDefinedPropertiesMap) { java.util.Map<java.lang.String, java.lang.String> propertiesMap = convertProperties(propertiesValue, allVmProperties.get(version)); java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.String>> propertiesEntries = propertiesMap.entrySet(); java.util.Set<java.lang.String> predefinedPropertiesKeys = predefinedProperties.get(version).keySet(); java.util.Set<java.lang.String> userdefinedPropertiesKeys = userdefinedProperties.get(version).keySet(); for (java.util.Map.Entry<java.lang.String, java.lang.String> propertiesEntry : propertiesEntries) { java.lang.String propertyKey = propertiesEntry.getKey(); java.lang.String propertyValue = org.ovirt.engine.core.compat.StringHelper.defaultString(propertiesEntry.getValue()); if (predefinedPropertiesKeys.contains(propertyKey)) { predefinedPropertiesMap.put(propertyKey, propertyValue); } if (userdefinedPropertiesKeys.contains(propertyKey)) { userDefinedPropertiesMap.put(propertyKey, propertyValue); } } }
public boolean syntaxErrorInProperties(java.util.Map<java.lang.String, java.lang.String> properties) { boolean error = false; if ((properties != null) && (!(properties.isEmpty()))) { for (java.util.Map.Entry<java.lang.String, java.lang.String> e : properties.entrySet()) { java.lang.String key = e.getKey(); if ((key == null) || (!(key.matches(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.KEY_REGEX)))) { error = true; break; } if (!(org.ovirt.engine.core.compat.StringHelper.defaultString(e.getValue()).matches(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.VALUE_REGEX))) { error = true; break; } } } return error; }
public java.lang.String convertProperties(java.util.Map<java.lang.String, java.lang.String> properties) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); if ((properties != null) && (!(properties.isEmpty()))) { for (java.util.Map.Entry<java.lang.String, java.lang.String> e : properties.entrySet()) { sb.append(e.getKey()); sb.append(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.KEY_VALUE_DELIMETER); sb.append(org.ovirt.engine.core.compat.StringHelper.defaultString(e.getValue())); sb.append(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.PROPERTIES_DELIMETER); } sb.deleteCharAt(((sb.length()) - 1)); } return sb.toString(); }
@org.junit.Test public void validateWithDirectLunIdAndInvalidVds() { command.getParameters().setDirectLunId(org.ovirt.engine.core.compat.Guid.newGuid()); when(hostValidator.hostExists()).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VDS_INVALID_SERVER_ID)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.VDS_INVALID_SERVER_ID); }












@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.VirtualMachineSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.AuditLog, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>, org.ovirt.engine.ui.uicommonweb.models.vms.VmEventListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineEventPresenter.constants.virtualMachineEventSubTabLabel(), 10, modelProvider, org.ovirt.engine.ui.common.widget.Align.RIGHT); }

@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation(getMovedDiskIds(), ImageStatus.LOCKED, ImageStatus.OK, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getCompensationContext()); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = runInternalAction(ActionType.CreateAllSnapshotsFromVm, getCreateSnapshotParameters(), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getContext())); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().setAutoGeneratedSnapshotId(vdcReturnValue.getActionReturnValue()); persistCommand(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getParentCommand(), ((getCallback()) != null)); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.setSucceeded(true); }
protected boolean checkCanBeMoveInVm() { return validate(new org.ovirt.engine.core.bll.validator.storage.DiskValidator(getImage()).isDiskPluggedToVmsThatAreNotDown(false, getVmsWithVmDeviceInfoForDiskId())); }
protected void initializeCommand(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { when(diskDao.get(any())).thenReturn(disk); org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(VMStatus.Down); when(vmDao.get(any())).thenReturn(vm); doReturn(storageDomainValidator).when(command).createStorageDomainValidator(); doReturn(multipleDiskVmElementValidator).when(command).createMultipleDiskVmElementValidator(); doReturn(diskValidator).when(command).createDiskValidator(disk); doReturn(true).when(command).setAndValidateDiskProfiles(); doReturn(disk.getId()).when(command).getImageGroupId(); doReturn(ActionType.MoveOrCopyDisk).when(command).getActionType(); }
@java.lang.Override protected void executeVmCommand() { this.setVmName(vmStaticDao.get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getVmId()).getName()); org.ovirt.engine.core.common.businessentities.network.VmNic iface = vmNicDao.get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getInterfaceId()); if (iface != null) { interfaceName = iface.getName(); java.lang.String interType = org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(iface.getType()).getDescription(); if (interType != null) { org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.addCustomValue("InterfaceType", interType); } new org.ovirt.engine.core.bll.network.ExternalNetworkManager(iface).deallocateIfExternal(); org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getMacPool().freeMac(iface.getMacAddress()); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.bll.network.vm.vmStaticDao.incrementDbGeneration(getParameters().getVmId()); org.ovirt.engine.core.bll.network.vm.vmNicDao.remove(getParameters().getInterfaceId()); org.ovirt.engine.core.bll.network.vm.vmNetworkStatisticsDao.remove(getParameters().getInterfaceId()); org.ovirt.engine.core.bll.network.vm.vmDeviceDao.remove(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getParameters().getInterfaceId(), getParameters().getVmId())); setSucceeded(true); return null; }); }
private void removeNetworks() { final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = networkDao.getAllForDataCenter(org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { if (network.isExternal()) { for (org.ovirt.engine.core.common.businessentities.network.VmNic nic : vmNicDao.getAllForNetwork(network.getId())) { new org.ovirt.engine.core.bll.network.ExternalNetworkManager(nic, network).deallocateIfExternal(); } } } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { for (final org.ovirt.engine.core.common.businessentities.network.Network net : networks) { List<org.ovirt.engine.core.common.businessentities.network.VnicProfile> profiles = org.ovirt.engine.core.bll.storage.pool.vnicProfileDao.getAllForNetwork(net.getId()); for (org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile : profiles) { getCompensationContext().snapshotEntity(vnicProfile); org.ovirt.engine.core.bll.storage.pool.vnicProfileDao.remove(vnicProfile.getId()); } getCompensationContext().snapshotEntity(net); org.ovirt.engine.core.bll.storage.pool.networkDao.remove(net.getId()); } getCompensationContext().stateChanged(); return null; }); }
private void unplugFromExternalNetwork() { new org.ovirt.engine.core.bll.network.ExternalNetworkManager(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic(), getNetwork()).deallocateIfExternal(); }
protected void removeFromExternalNetworks(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { new org.ovirt.engine.core.bll.network.ExternalNetworkManager(iface).deallocateIfExternal(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); }
@org.junit.Before public void setUp() { nic = new org.ovirt.engine.core.common.businessentities.network.VmNic(); network = createNetwork(); underTest = spy(new org.ovirt.engine.core.bll.network.ExternalNetworkManager(nic, network)); injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); when(providerDao.get(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); doReturn(providerProxyFactory).when(underTest).getProviderProxyFactory(); when(providerProxyFactory.create(provider)).thenReturn(networkProviderProxy); }
public org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid vdsId, boolean shouldPrepareAndTeardown) { if (vdsId == null) { vdsId = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldPrepareAndTeardown) { prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } try { qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (resourceManager.runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.error("Unable to get qemu image info from storage", e); } finally { if (shouldPrepareAndTeardown) { teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } } return qemuImageInfo; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.bll.network.dc.networkDao.save(getNetwork()); if ((getNetwork().isVmNetwork()) && (getParameters().isVnicProfileRequired())) { org.ovirt.engine.core.bll.network.dc.vnicProfileDao.save(org.ovirt.engine.core.bll.network.cluster.NetworkHelper.createVnicProfile(getNetwork(), networkFilterDao)); } org.ovirt.engine.core.bll.network.cluster.NetworkHelper.addPermissionsOnNetwork(getCurrentUser().getId(), getNetwork().getId()); return null; }); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getId()); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.setSucceeded(true); }
private static void chooseHostForExecution(org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase parametersBase, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.bll.CommandBase<?> cmd, java.util.Collection<org.ovirt.engine.core.compat.Guid> executedHosts) { org.ovirt.engine.core.compat.Guid vdsForExecution = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, executedHosts); parametersBase.setVdsId(vdsForExecution); if (cmd != null) { if (((cmd.getCommandStep()) != null) && ((cmd.getExecutionContext().getStep()) != null)) { org.ovirt.engine.core.compat.Guid stepId = cmd.getExecutionContext().getStep().getId(); if ((cmd.getParameters().getVdsRunningOn()) != null) { org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getStepSubjectEntityDao().remove(cmd.getParameters().getVdsRunningOn(), stepId); } if (vdsForExecution != null) { org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getStepSubjectEntityDao().saveAll(java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(stepId, org.ovirt.engine.core.common.VdcObjectType.EXECUTION_HOST, vdsForExecution))); } } cmd.getParameters().setVdsRunningOn(vdsForExecution); cmd.persistCommand(cmd.getParameters().getParentCommand(), ((cmd.getCallback()) != null)); } }
private static void removeNetworkFromHosts(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.bll.context.CommandContext context, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { org.ovirt.engine.core.bll.network.RemoveNetworkParametersBuilder builder = org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.network.RemoveNetworkParametersBuilder.class); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = builder.buildParameters(network, nics); if (!(parameters.isEmpty())) { org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(parameters); org.ovirt.engine.core.bll.Backend.getInstance().runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, parameters, context); } }
@java.lang.SuppressWarnings("unchecked") private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); if ((org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()) == null) { return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithoutFailover(VDSCommandType.GetVGInfo, params, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStoragePoolId(), null).getReturnValue())); } return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params).getReturnValue())); }
private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector getAuditLogDirector() { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class); }
protected boolean validatePMAgentPort() { java.lang.Integer port = getParameters().getAgent().getPort(); if (port == null) { if (getParameters().getAgent().getOptionsMap().containsKey(org.ovirt.engine.core.bll.FenceAgentCommandBase.PORT)) { java.lang.String portStr = getParameters().getAgent().getOptionsMap().get(org.ovirt.engine.core.bll.FenceAgentCommandBase.PORT); if (org.apache.commons.lang.StringUtils.isNumeric(portStr)) { port = java.lang.Integer.valueOf(portStr); } else { return false; } } else { return true; } } return (port == null) || (org.ovirt.engine.core.common.utils.ValidationUtils.validatePort(port)); }
private void addDnsConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { boolean dnsResolverConfigurationSupported = org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.DnsResolverConfigurationSupported, this.cluster.getCompatibilityVersion()); if ((!(isDefaultRouteNetwork)) || (!dnsResolverConfigurationSupported)) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetworkAttachment = getNameServers(networkAttachment.getDnsResolverConfiguration()); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetwork = getNameServers(network.getDnsResolverConfiguration()); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfHost = getNameServers(reportedDnsResolverConfiguration); boolean engineDefineDnsConfiguration = (nameServersOfNetworkAttachment != null) || (nameServersOfNetwork != null); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> expectedNameServers = (nameServersOfNetworkAttachment != null) ? nameServersOfNetworkAttachment : nameServersOfNetwork; result.add(org.ovirt.engine.core.utils.DNS_CONFIGURATION, addressesAsString(nameServersOfHost), (engineDefineDnsConfiguration ? addressesAsString(expectedNameServers) : ""), (!(engineDefineDnsConfiguration && (!(java.util.Objects.equals(nameServersOfHost, expectedNameServers)))))); result.add(org.ovirt.engine.core.utils.DEFAULT_ROUTE, iface.isIpv4DefaultRoute(), isDefaultRouteNetwork); }
private void processSingleClusterChanges(org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param) { final java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> setupNetworksParams = new java.util.ArrayList(createNetworkClustersToSetupNetworksParametersTransformer().transform(param.getAttachments(), param.getDetachments())); org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, setupNetworksParams); }
org.ovirt.engine.core.common.action.PersistentHostSetupNetworksParameters buildParameters(org.ovirt.engine.core.compat.Guid vdsId, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> labeledNetworksToBeAdded, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> labeledNetworksToBeRemoved, java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsByLabel);
@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getUserProfileDao(); existingProfile = dao.get(new org.ovirt.engine.core.compat.Guid("38cb5663-96bc-485c-834a-cbbc03acc820")); deletableProfile = dao.get(new org.ovirt.engine.core.compat.Guid("38cb5663-96bc-485c-834a-cbbc03acc821")); newProfile = new org.ovirt.engine.core.common.businessentities.UserProfile(); newProfile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newProfile.setUserId(new org.ovirt.engine.core.compat.Guid("81940459-2ec4-4afa-bbaa-22549555293c")); newProfile.setSshPublicKeyId(new org.ovirt.engine.core.compat.Guid("67bc5484-d4eb-47ce-8b6a-e9624b70b676")); newProfile.setSshPublicKey("key3"); newProfile.setLoginName("userportal4@testportal.redhat.com@testportal.redhat.com"); }
@org.junit.Test public void testUpdateLastAdminCheckStatus() { org.ovirt.engine.core.common.businessentities.aaa.DbUser nonAdminUser = dbFacade.getDbUserDao().getByUsernameAndDomain("userportal2@testportal.redhat.com", "testportal.redhat.com"); assertNotNull(nonAdminUser); assertFalse(nonAdminUser.isAdmin()); dao.updateLastAdminCheckStatus(nonAdminUser.getId()); nonAdminUser = dbFacade.getDbUserDao().get(nonAdminUser.getId()); assertFalse(nonAdminUser.isAdmin()); org.ovirt.engine.core.common.businessentities.Permission perms = new org.ovirt.engine.core.common.businessentities.Permission(); perms.setRoleType(RoleType.ADMIN); perms.setRoleId(org.ovirt.engine.core.dao.DbUserDaoTest.ADMIN_ROLE_TYPE_FROM_FIXTURE_ID); perms.setAdElementId(nonAdminUser.getId()); perms.setObjectId(org.ovirt.engine.core.dao.DbUserDaoTest.SYSTEM_OBJECT_ID); perms.setObjectType(VdcObjectType.System); dbFacade.getPermissionDao().save(perms); assertNotNull(dbFacade.getPermissionDao().get(perms.getId())); dao.updateLastAdminCheckStatus(nonAdminUser.getId()); nonAdminUser = dbFacade.getDbUserDao().get(nonAdminUser.getId()); assertTrue(nonAdminUser.isAdmin()); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); javax.servlet.http.HttpServletResponse res = ((javax.servlet.http.HttpServletResponse) (response)); if (org.ovirt.engine.core.aaa.filters.FiltersHelper.isAuthenticated(req)) { chain.doFilter(request, response); } else { @java.lang.SuppressWarnings("unchecked") java.util.List<java.lang.String> schemes = ((java.util.List<java.lang.String>) (req.getAttribute(FiltersHelper.Constants.REQUEST_SCHEMES_KEY))); if (schemes == null) { schemes = java.util.Collections.emptyList(); } java.util.Set<java.lang.String> allSchemes = new java.util.HashSet<>(schemes); if ((additionalSchemes) != null) { allSchemes.addAll(additionalSchemes); } for (java.lang.String scheme : allSchemes) { res.setHeader(FiltersHelper.Constants.HEADER_WWW_AUTHENTICATE, scheme); } res.sendError(HttpServletResponse.SC_UNAUTHORIZED); } }
@java.lang.Override public void init(javax.servlet.FilterConfig filterConfig) throws javax.servlet.ServletException { for (java.lang.String paramName : java.util.Collections.list(filterConfig.getInitParameterNames())) { if (paramName.startsWith("scheme")) { additionalSchemes.add(filterConfig.getInitParameter(paramName)); } } }
public boolean isBackedByHudepages(org.ovirt.engine.core.common.businessentities.VmBase vm) { if (((vm.getCustomProperties()) == null) || (vm.getCustomProperties().isEmpty())) { return false; } java.lang.String hugePage = getHugePageSize(vm); if (hugePage == null) { return false; } try { java.lang.Integer.parseInt(hugePage); return true; } catch (java.lang.NumberFormatException e) { return false; } }
public java.util.Map<java.lang.Integer, java.lang.Integer> getHugePages(org.ovirt.engine.core.common.businessentities.VmBase vm) { if (!(isBackedByHudepages(vm))) { return java.util.Collections.EMPTY_MAP; } int hugePageSize = java.lang.Integer.parseInt(getHugePageSize(vm)); int fullPages = (vm.getMemSizeMb()) / hugePageSize; int lastPage = java.lang.Math.min(1, ((vm.getMemSizeMb()) % hugePageSize)); return java.util.Collections.singletonMap(hugePageSize, (fullPages + lastPage)); }
@org.junit.Test public void getHugeMemoryFitsIntoOneHugePage() { org.ovirt.engine.core.common.utils.HugePageUtils utils = new org.ovirt.engine.core.common.utils.HugePageUtils(); org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setCustomProperties("hugepages=1024"); base.setMemSizeMb(1024); assertThat(utils.getHugePages(base).size(), is(1)); assertThat(utils.getHugePages(base).get(1024), is(1)); }
@org.junit.Test public void getHugePagesNoHugePagesDefined() { org.ovirt.engine.core.common.utils.HugePageUtils utils = new org.ovirt.engine.core.common.utils.HugePageUtils(); org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setMemSizeMb(1025); assertThat(utils.getHugePages(base).size(), is(0)); }
@org.junit.Test public void getHugePagesMemoryDoesNotFitIntoOne() { org.ovirt.engine.core.common.utils.HugePageUtils utils = new org.ovirt.engine.core.common.utils.HugePageUtils(); org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setCustomProperties("hugepages=1024"); base.setMemSizeMb(1025); assertThat(utils.getHugePages(base).size(), is(1)); assertThat(utils.getHugePages(base).get(1024), is(2)); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.SubTabVolumePermissionPresenter.constants.volumePermissionSubTabLabel(), 3, modelProvider); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.disk.DiskSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.disks.DiskListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.storage.Disk>> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.disk.SubTabDiskPermissionPresenter.constants.diskPermissionSubTabLabel(), 4, modelProvider); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.errata.ErrataSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider<org.ovirt.engine.ui.uicommonweb.models.EngineErrataListModel, org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.Erratum>> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.errata.SubTabEngineErrataDetailsPresenter.constants.errataDetailsSubTabLabel(), 1, modelProvider); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.pool.PoolSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.pools.PoolListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.VmPool>> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.pool.SubTabPoolPermissionPresenter.constants.poolPermissionSubTabLabel(), 2, modelProvider); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession, org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel, org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.SubTabVolumeGeoRepPresenter.constants.volumeGeoRepSubTabLabel(), 4, modelProvider); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.VmTemplate, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterTemplateListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageRegisterTemplatePresenter.constants.storageTemplateBackupSubTabLabel(), 3, modelProvider); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.StorageDomain>> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStoragePermissionPresenter.constants.storagePermissionSubTabLabel(), 13, modelProvider); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.StorageDomainDR, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageDRPresenter.constants.storageDRSubTabLabel(), 12, modelProvider); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.DataCenterSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.StoragePool>> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.SubTabDataCenterPermissionPresenter.constants.dataCenterPermissionSubTabLabel(), 5, modelProvider); }
java.lang.String getPrefixedKey(java.lang.String key) { return ((keyPrefix) + "_") + key; }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.template.TemplateSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.VmTemplate>> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.template.SubTabTemplatePermissionPresenter.constants.templatePermissionSubTabLabel(), 5, modelProvider); }
















@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel)) { if (content != null) { actionPanel.setSearchPanel(content); actionPanel.setVisible(true); } } else { super.setInSlot(slot, content); } }
@java.lang.Override public void onLoad() { super.onLoad(); keyHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(( event) -> { com.google.gwt.dom.client.NativeEvent nativeEvent = event.getNativeEvent(); if ((breadCrumbs) != null) { if ((event.getTypeInt()) == Event.ONKEYDOWN) { if (((nativeEvent.getCharCode()) == 's') || ((nativeEvent.getKeyCode()) == KeyCodes.KEY_S)) { if ((nativeEvent.getCtrlKey()) && (nativeEvent.getAltKey())) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.toggleSearchWidget(); event.cancel(); } } else if ((!(this.breadCrumbs.isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_DOWN)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.nextEntity(); event.cancel(); } else if ((!(this.breadCrumbs.isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_UP)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.previousEntity(); event.cancel(); } } } }); if ((breadCrumbs) != null) { if ((breadCrumbsContainer.getWidgetCount()) == 0) { breadCrumbsContainer.add(breadCrumbs); } } }


@java.lang.Override protected void onReveal() { super.onReveal(); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.setSubTabPanelVisible(false); getBreadCrumbs().clearActiveSubTab(); getTable().resetScrollPosition(); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setBreadCrumbs(getBreadCrumbs()); if (hasSearchPanelPresenterWidget()) { setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel, searchPanelPresenterWidget); } }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel)) { if (content != null) { actionPanel.setSearchPanel(content); actionPanel.setVisible(true); } } else { super.setInSlot(slot, content); } }
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { if ((getTable()) != null) { for (org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> buttonDef : pluginActionButtonList) { getTable().addActionButton(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition) (buttonDef))); } } }
protected org.ovirt.engine.ui.common.widget.action.SubTabTreeActionPanel createActionPanel(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider modelProvider) { return new org.ovirt.engine.ui.common.widget.action.SubTabTreeActionPanel(modelProvider); }
@java.lang.Override protected void onBind() { super.onBind(); org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel<?> tableSelectionModel = ((getTable()) != null) ? getTable().getSelectionModel() : null; if (tableSelectionModel != null) { registerHandler(tableSelectionModel.addSelectionChangeHandler(( event) -> { updateDetailModelSelection(); })); } initializeHandlers(); getSelectedMainItems().registerListener(this); itemChanged(getSelectedMainItems().getSelectedItem()); }

@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler(( event) -> { org.ovirt.engine.ui.webadmin.section.main.presenter.modelProvider.setSelectedItems(getSelectedItems()); fireTableSelectionChangeEvent(); if (!(isVisible())) { handlePlaceTransition(); } })); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getEventBus().addHandler(org.ovirt.engine.ui.uicommonweb.models.ApplySearchStringEvent.getType(), ( event) -> { applySearchString(event.getSearchString()); })); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setDetailPlaceTransitionHandler(this); java.lang.String searchString = searchStringCollector.getSearchStringPrefix(modelProvider.getModel().getSearchString()); if (searchString != null) { applySearchString(searchString); } }

@org.junit.Test public void testUpdate() { existingDomain.setStorageName("UpdatedName"); existingDomain.setWipeAfterDelete(true); existingDomain.setWarningLowSpaceIndicator(4); existingDomain.setCriticalSpaceActionBlocker(8); existingDomain.setFirstMetadataDevice(FixturesTool.LUN_ID1); existingDomain.setVgMetadataDevice(FixturesTool.LUN_ID1); dao.update(existingDomain); org.ovirt.engine.core.common.businessentities.StorageDomainStatic after = dao.get(existingDomain.getId()); assertEquals(after, existingDomain); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getStorageDomainStaticDao(); dynamicDao = dbFacade.getStorageDomainDynamicDao(); diskImageDao = dbFacade.getDiskImageDao(); imageDao = dbFacade.getImageDao(); existingDomain = dao.get(new org.ovirt.engine.core.compat.Guid("72e3a666-89e1-4005-a7ca-f7548004a9ab")); newStaticDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); newStaticDomain.setStorageName("NewStorageDomain"); newStaticDomain.setStorage("fDMzhE-wx3s-zo3q-Qcxd-T0li-yoYU-QvVePl"); newStaticDomain.setStorageFormat(StorageFormatType.V1); newStaticDomain.setWipeAfterDelete(true); newStaticDomain.setWarningLowSpaceIndicator(3); newStaticDomain.setCriticalSpaceActionBlocker(9); newStaticDomain.setFirstMetadataDevice(FixturesTool.LUN_ID2); newStaticDomain.setVgMetadataDevice(FixturesTool.LUN_ID2); }


private static org.ovirt.engine.core.common.businessentities.StorageDomainStatic cloneStorageDomainStatic(org.ovirt.engine.core.common.businessentities.StorageDomainStatic instance) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic obj = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); obj.setConnection(instance.getConnection()); obj.setId(instance.getId()); obj.setStorage(instance.getStorage()); obj.setStorageDomainType(instance.getStorageDomainType()); obj.setStorageType(instance.getStorageType()); obj.setStorageName(instance.getStorageName()); obj.setFirstMetadataDevice(instance.getFirstMetadataDevice()); obj.setVgMetadataDevice(instance.getVgMetadataDevice()); obj.setDescription(instance.getDescription()); obj.setComment(instance.getComment()); obj.setStorageFormat(instance.getStorageFormat()); obj.setWipeAfterDelete(instance.getWipeAfterDelete()); obj.setDiscardAfterDelete(instance.isDiscardAfterDelete()); obj.setWarningLowSpaceIndicator(instance.getWarningLowSpaceIndicator()); obj.setCriticalSpaceActionBlocker(instance.getCriticalSpaceActionBlocker()); return obj; }
private void assertGetResult(org.ovirt.engine.core.common.businessentities.StorageDomain result) { assertNotNull(result); assertEquals(existingDomain, result); assertEquals("Wrong committed disk size", 8, result.getCommittedDiskSize()); assertEquals("Wrong actual disk size", 4, result.getActualImagesSize()); assertEquals("Wrong first metadata device", FixturesTool.LUN_ID_OF_DOMAIN_METADATA, result.getFirstMetadataDevice()); assertEquals("Wrong vg metadata device", FixturesTool.LUN_ID_OF_DOMAIN_VG_METADATA, result.getVgMetadataDevice()); assertEquals("Wrong shared status", StorageDomainSharedStatus.Active, result.getStorageDomainSharedStatus()); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain) { return getCustomMapSqlParameterSource().addValue("id", domain.getId()).addValue("storage", domain.getStorage()).addValue("storage_name", domain.getStorageName()).addValue("storage_description", domain.getDescription()).addValue("storage_comment", domain.getComment()).addValue("storage_type", domain.getStorageType()).addValue("storage_domain_type", domain.getStorageDomainType()).addValue("storage_domain_format_type", domain.getStorageFormat()).addValue("last_time_used_as_master", domain.getLastTimeUsedAsMaster()).addValue("wipe_after_delete", domain.getWipeAfterDelete()).addValue("discard_after_delete", domain.isDiscardAfterDelete()).addValue("first_metadata_device", domain.getFirstMetadataDevice()).addValue("vg_metadata_device", domain.getVgMetadataDevice()).addValue("warning_low_space_indicator", domain.getWarningLowSpaceIndicator()).addValue("critical_space_action_blocker", domain.getCriticalSpaceActionBlocker()); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, autoRecoverable, connection, name, storage, storageFormat, storagePoolType, storageType, description, sanState, wipeAfterDelete, discardAfterDelete, firstMetadataDevice, vgMetadataDevice, warningLowSpaceIndicator, criticalSpaceActionBlocker); }


@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.StorageDomainStatic)) { return false; } org.ovirt.engine.core.common.businessentities.StorageDomainStatic other = ((org.ovirt.engine.core.common.businessentities.StorageDomainStatic) (obj)); return (((((((((((((((java.util.Objects.equals(id, other.id)) && ((autoRecoverable) == (other.autoRecoverable))) && (java.util.Objects.equals(connection, other.connection))) && (java.util.Objects.equals(name, other.name))) && (java.util.Objects.equals(storage, other.storage))) && ((storageFormat) == (other.storageFormat))) && ((storagePoolType) == (other.storagePoolType))) && ((storageType) == (other.storageType))) && ((sanState) == (other.sanState))) && (java.util.Objects.equals(wipeAfterDelete, other.wipeAfterDelete))) && ((discardAfterDelete) == (other.discardAfterDelete))) && (java.util.Objects.equals(firstMetadataDevice, other.firstMetadataDevice))) && (java.util.Objects.equals(vgMetadataDevice, other.vgMetadataDevice))) && (java.util.Objects.equals(description, other.description))) && (java.util.Objects.equals(warningLowSpaceIndicator, other.warningLowSpaceIndicator))) && (java.util.Objects.equals(criticalSpaceActionBlocker, other.criticalSpaceActionBlocker)); }








public static void cleanupSsoSession(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, org.ovirt.engine.core.sso.utils.SsoSession ssoSession, java.util.Set<java.lang.String> associateClientIds) { try { ssoContext.removeSsoSession(ssoSession.getAccessToken()); javax.servlet.http.HttpSession existingSession = ssoSession.getHttpSession(); if (existingSession == null) { org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.debug("No existing Session found for token: {}, cannot invalidate session", ssoSession.getAccessToken()); } else { org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.debug("Existing Session found for token: {}, invalidating session", ssoSession.getAccessToken()); existingSession.invalidate(); } org.ovirt.engine.core.sso.utils.TokenCleanupUtility.invokeAuthnLogout(ssoContext, ssoSession); org.ovirt.engine.core.sso.utils.SsoUtils.notifyClientsOfLogoutEvent(ssoContext, associateClientIds, ssoSession.getAccessToken()); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.error("Unable to cleanup SsoSession: {}", ex.getMessage()); org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.debug("Exception", ex); } }

public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("Group", groupTitle).append("label", getLabel()).append("priority", getPriority()).toString(); }

@java.lang.Override public com.gwtplatform.mvp.client.Tab addTab(com.gwtplatform.mvp.client.TabData tabData, java.lang.String historyToken) { org.ovirt.engine.ui.common.widget.tab.TabDefinition newTab = createNewTab(tabData); if (tabData instanceof org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) { menuLayout.addMenuItem(((org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) (tabData))); newTab.setTargetHistoryToken(historyToken); newTab.setId(((TabDefinition.TAB_ID_PREFIX) + historyToken)); newTab.setText(tabData.getLabel()); addTabDefinition(newTab, menuLayout.getMenuIndex(((org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) (tabData)))); } else { throw new java.lang.RuntimeException("Adding non GroupedTabData"); } updateTab(newTab); if (((getActiveTabHistoryToken()) != null) && (getActiveTabHistoryToken().equals(historyToken))) { setActiveTab(newTab); } return newTab; }

@java.lang.Override public com.gwtplatform.mvp.client.Tab addTab(com.gwtplatform.mvp.client.TabData tabData, java.lang.String historyToken) { org.ovirt.engine.ui.common.widget.tab.TabDefinition newTab = createNewTab(tabData); newTab.setTargetHistoryToken(historyToken); newTab.setText(tabData.getLabel()); int index = tabLayout.addGroupedTabData(tabData); addTabDefinition(newTab, index); updateTab(newTab); return newTab; }

public void initializeHandlers() { modelProvider.getModel().getEntityChangedEvent().addListener(( ev, sender, args) -> { java.lang.Object entity = modelProvider.getModel().getEntity(); if (entity != null) { onDetailModelEntityChange(entity); } }); modelProvider.getModel().getPropertyChangedEvent().addListener(( ev, sender, args) -> { if (PropertyChangedEventArgs.PROGRESS.equals(args.propertyName)) { if ((modelProvider.getModel().getProgress()) != null) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { if ((getTable()) != null) { getTable().setLoadingState(LoadingState.LOADING); } }); } } }); }

private void setSelectedSpiceImpl() { org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel spiceModel = model.getVmConsoles().getConsoleModel(org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel.class); if (spiceModel == null) { return; } if (spiceAutoImplRadioButton.asRadioButton().getValue()) { spiceModel.setConsoleClientMode(SpiceConsoleModel.ClientConsoleMode.Auto); } else if (spiceNativeImplRadioButton.asRadioButton().getValue()) { spiceModel.setConsoleClientMode(SpiceConsoleModel.ClientConsoleMode.Native); } else if (spiceHtml5ImplRadioButton.asRadioButton().getValue()) { spiceModel.setConsoleClientMode(SpiceConsoleModel.ClientConsoleMode.Html5); } }
@java.lang.Override protected void executeVdsBrokerCommand() { buildVmData(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.log.info("VM {}", createInfo); if (((boolean) (org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DomainXML)))) { org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder builder = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(createInfo, vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getVds().getId(), getRunOncePayload(), org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getParameters().isVolatileRun())); java.lang.String libvirtXml = builder.build(); java.lang.String prettyLibvirtXml = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.prettify(libvirtXml); if (prettyLibvirtXml != null) { org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.log.info("VM {}", prettyLibvirtXml); } createInfo.put("xml", libvirtXml); } vmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getBroker().create(createInfo); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(vm.getDynamicData(), vmReturn.vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getVds()); }
@org.ovirt.engine.ui.common.widget.table.cell.Template("<a id='{0}' href='javascript:;' style='display: inline-block'>") com.google.gwt.safehtml.shared.SafeHtml link(java.lang.String id);
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, java.lang.String value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { if (value != null) { sb.append(template.link(id)); super.render(context, value, sb, (id + (org.ovirt.engine.ui.common.widget.table.cell.LinkCell.CONTENT_ID_SUFFIX))); sb.appendHtmlConstant("</a>"); } }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(cluster().cpu().type()); mandatory(cluster().name()); mandatory(cluster().version().major()); mandatory(cluster().version().minor()); or(mandatory(cluster().dataCenter().id()), mandatory(cluster().dataCenter().name())); optional(cluster().ballooningEnabled()); optional(cluster().comment()); optional(cluster().cpu().architecture()); optional(cluster().description()); optional(cluster().display().proxy()); optional(cluster().errorHandling().onError()); optional(cluster().fencingPolicy().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().threshold()); optional(cluster().fencingPolicy().skipIfSdActive().enabled()); optional(cluster().glusterService()); optional(cluster().haReservation()); optional(cluster().ksm().enabled()); optional(cluster().ksm().mergeAcrossNodes()); optional(cluster().maintenanceReasonRequired()); optional(cluster().memoryPolicy().overCommit().percent()); optional(cluster().memoryPolicy().transparentHugePages().enabled()); optional(cluster().threadsAsCores()); optional(cluster().trustedService()); optional(cluster().tunnelMigration()); optional(cluster().virtService()); or(optional(cluster().managementNetwork().id()), optional(cluster().managementNetwork().name())); or(optional(cluster().schedulingPolicy().id()), optional(cluster().schedulingPolicy().name())); }
@java.lang.Override public void onLoad() { super.onLoad(); keyHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(( event) -> { com.google.gwt.dom.client.NativeEvent nativeEvent = event.getNativeEvent(); if ((breadCrumbs) != null) { if ((event.getTypeInt()) == Event.ONKEYDOWN) { if (((nativeEvent.getCharCode()) == 's') || ((nativeEvent.getKeyCode()) == KeyCodes.KEY_S)) { if ((nativeEvent.getCtrlKey()) && (nativeEvent.getAltKey())) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.toggleSearch(); event.cancel(); } } else if ((!(this.breadCrumbs.isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_DOWN)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.nextEntity(); event.cancel(); } else if ((!(this.breadCrumbs.isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_UP)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.previousEntity(); event.cancel(); } } } }); if ((breadCrumbs) != null) { if ((breadCrumbsContainer.getWidgetCount()) == 0) { breadCrumbsContainer.add(breadCrumbs); } } }
private void refreshReposIfNeeded(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType, boolean forceRefresh) { org.apache.commons.lang.mutable.MutableLong lastRefreshed = domainsLastRefreshedTime.computeIfAbsent(storageDomainId, ( k) -> new org.apache.commons.lang.mutable.MutableLong((-1))); if (forceRefresh || (shouldInvalidateCache(lastRefreshed.longValue()))) { synchronized(lastRefreshed) { if (forceRefresh || (shouldInvalidateCache(lastRefreshed.longValue()))) { boolean refreshSucceeded = refreshRepos(storageDomainId, imageType); lastRefreshed.setValue(java.lang.System.currentTimeMillis()); if (!refreshSucceeded) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IMAGES_NOT_SUPPORTED_ERROR); } } } } }

private void updateMoveWarning(java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> disks) { java.util.List<java.lang.String> liveMigrateDisks = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : disks) { if (diskModel.isPluggedToRunningVm()) { liveMigrateDisks.add(diskModel.getAlias().getEntity()); } } if (!(liveMigrateDisks.isEmpty())) { setMessage(messages.moveDisksWhileVmRunning(org.ovirt.engine.ui.uicompat.external.StringUtils.join(liveMigrateDisks, ", "))); } }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel model) { driver.edit(model); if ((model.isShowMemorySnapshotWarning()) && (!(model.isShowPartialSnapshotWarning()))) { com.google.gwt.dom.client.Style dialogStyle = getParent().getParent().getParent().getElement().getStyle(); dialogStyle.setWidth(450, Style.Unit.PX); dialogStyle.setHeight(240, Style.Unit.PX); } partialSnapshotWarningPanel.setVisible(model.isShowPartialSnapshotWarning()); memoryWarningPanel.setVisible(model.isShowMemorySnapshotWarning()); if ((model.getOldClusterVersionOfSnapshotWithMemory()) != null) { messageLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotPreviewPopupWidget.messages.snapshotContainsMemoryIncompatibleCluster(model.getOldClusterVersionOfSnapshotWithMemory().toString())); model.getMemory().setEntity(false); } horizontalSeparator.setVisible(((model.isShowPartialSnapshotWarning()) && (model.isShowMemorySnapshotWarning()))); vmDisksLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotPreviewPopupWidget.messages.vmDisksLabel(model.getVmDisks().size(), org.ovirt.engine.ui.uicompat.external.StringUtils.join(org.ovirt.engine.ui.uicommonweb.Linq.getDiskAliases(model.getVmDisks()), ", "))); snapshotDisksLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotPreviewPopupWidget.messages.snapshotDisksLabel(model.getDisks().size(), org.ovirt.engine.ui.uicompat.external.StringUtils.join(org.ovirt.engine.ui.uicommonweb.Linq.getDiskAliases(model.getDisks()), ", "))); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.storage.Disk object) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(org.ovirt.engine.ui.uicompat.external.StringUtils.join(diskImage.getStoragesNames(), ", ")); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label label) { java.lang.String hostNames = org.ovirt.engine.ui.uicompat.external.StringUtils.join(getHostNames(label), ", "); if (hostNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return hostNames; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label label) { java.lang.String vmNames = org.ovirt.engine.ui.uicompat.external.StringUtils.join(getVmNames(label), ", "); if (vmNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return vmNames; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.storage.Disk object) { if ((object.getNumberOfVms()) < 2) { return null; } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(org.ovirt.engine.ui.uicompat.external.StringUtils.join(object.getVmNames(), ", ")); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.scheduling.AffinityGroup group) { java.lang.String vmNames = org.ovirt.engine.ui.uicompat.external.StringUtils.join(getVmNames(group), ", "); if (vmNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityGroupsView.constants.noMembersAffinityGroup(); } return vmNames; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.scheduling.AffinityGroup group) { java.lang.String hostNames = org.ovirt.engine.ui.uicompat.external.StringUtils.join(getHostNames(group), ", "); if (hostNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityGroupsView.constants.noMembersAffinityGroup(); } return hostNames; }
private void volumeSelectedItemChanged() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolumes().getSelectedItem(); java.lang.Boolean useLinkGlusterVolume = getLinkGlusterVolume().getEntity(); java.lang.String mountOptions = ""; if ((volume == null) || (!useLinkGlusterVolume)) { return; } java.util.Set<java.lang.String> addressSet = new java.util.LinkedHashSet<>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : volume.getBricks()) { addressSet.add((((brick.getNetworkId()) != null) && (!(brick.getNetworkAddress().isEmpty())) ? brick.getNetworkAddress() : brick.getServerName())); } java.util.List<java.lang.String> addressList = new java.util.ArrayList<>(); addressList.addAll(addressSet); if ((addressList.size()) >= 1) { addressList.remove(0); } if ((addressList.size()) > 0) { mountOptions = ((org.ovirt.engine.core.common.constants.StorageConstants.GLUSTER_BACKUP_SERVERS_MNT_OPTION) + "=") + (org.ovirt.engine.ui.uicompat.external.StringUtils.join(addressList, ":")); } getMountOptions().setEntity(mountOptions); }
private java.lang.String createActiveBondTooltipMessage(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { java.util.List<java.lang.String> bondProperties = new java.util.ArrayList<>(); java.lang.String adPartnerMac = java.util.Objects.toString(bond.getAdPartnerMac(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondAdPartnerMac(adPartnerMac)); java.lang.String adAggregatorId = java.util.Objects.toString(bond.getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondAdAggregatorId(adAggregatorId)); for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface nic : lineModel.getInterfaces()) { java.lang.String nicName = nic.getName(); java.lang.String nicAggregatorId = java.util.Objects.toString(nic.getInterface().getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondSlaveAdAggregatorId(nicName, nicAggregatorId)); } return org.ovirt.engine.ui.uicompat.external.StringUtils.join(bondProperties, "\n"); }
@java.lang.Override protected java.lang.String getWarning(java.util.List<java.lang.String> disks) { return messages.cannotMoveDisks(org.ovirt.engine.core.compat.StringHelper.join(", ", disks.toArray())); }
public static org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk> getQoutaColumn(java.lang.String sortBy) { org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk> column = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) { java.lang.String value = ""; if ((object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); java.util.ArrayList<java.lang.String> quotaNamesArr = diskImage.getQuotaNames(); if (quotaNamesArr != null) { value = org.ovirt.engine.core.compat.StringHelper.join(", ", quotaNamesArr.toArray()); } } return value; } }; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable(column, sortBy); }
private void showRemoveTemplateWithDependentVMConfirmationWindow(java.util.Map<java.lang.String, java.util.List<java.lang.String>> problematicVmNames) { java.util.List<java.lang.String> missingTemplatesFromVms = problematicVmNames.entrySet().stream().map(( e) -> org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.messages.templatesWithDependentVMs(e.getKey(), org.ovirt.engine.ui.uicompat.external.StringUtils.join(e.getValue(), ", "))).collect(java.util.stream.Collectors.toList()); setConfirmWindow(null); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.constants.removeBackedUpTemplatesWithDependentsVMTitle()); confirmModel.setHelpTag(HelpTag.remove_backed_up_template); confirmModel.setHashName("remove_backed_up_template"); confirmModel.setMessage(org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.constants.theFollowingTemplatesHaveDependentVmsBackupOnExportDomainMsg()); confirmModel.setItems(missingTemplatesFromVms); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("RemoveVmTemplates", this)); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand(org.ovirt.engine.ui.uicommonweb.models.storage.CANCEL_CONFIRMATION_COMMAND, this)); }
public static java.lang.String getDiskLabelList(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { if (disks.isEmpty()) { return null; } final java.util.List<java.lang.String> labels = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { labels.add(disk.getDiskAlias()); } return org.ovirt.engine.ui.uicompat.external.StringUtils.join(labels, ", "); }
private void updateProperties() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getEntity(); setImage(disk.getDiskStorageType().isInternal()); setLun(((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN))); setAlias(disk.getDiskAlias()); setDescription(disk.getDiskDescription()); setDiskId(disk.getId().toString()); if ((disk.getLastAlignmentScan()) != null) { java.lang.String lastScanDate = com.google.gwt.i18n.client.DateTimeFormat.getFormat("yyyy-MM-dd, HH:mm").format(disk.getLastAlignmentScan()); setAlignment(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().diskAlignment(disk.getAlignment().toString(), lastScanDate)); } else { setAlignment(disk.getAlignment().toString()); } setWipeAfterDelete(disk.isWipeAfterDelete()); if (isImage()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); setDiskProfileName(org.ovirt.engine.ui.uicompat.external.StringUtils.join(diskImage.getDiskProfileNames(), ", ")); setQuotaName(org.ovirt.engine.ui.uicompat.external.StringUtils.join(diskImage.getQuotaNames(), ", ")); setQuotaAvailable((!(diskImage.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)))); } else if (isLun()) { org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk = ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (disk)); setLunId(lunDisk.getLun().getLUNId()); } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) { java.lang.String value = ""; if ((object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); java.util.ArrayList<java.lang.String> quotaNamesArr = diskImage.getQuotaNames(); if (quotaNamesArr != null) { value = org.ovirt.engine.core.compat.StringHelper.join(", ", quotaNamesArr.toArray()); } } return value; }
private void updateCurrentValue(final java.util.List<T> value, boolean fireEvents) { lastValues = value; java.util.List<java.lang.String> renderedValues = new java.util.ArrayList<>(); for (T val : value) { renderedValues.add(org.ovirt.engine.ui.common.widget.editor.ListModelMultipleSelectListBox.getRenderer().render(java.util.Arrays.asList(val))); } java.lang.String renderedValue = org.ovirt.engine.ui.uicompat.external.StringUtils.join(renderedValues, ","); if (org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(renderedValue)) { renderedValue = NBSP; } else { renderedValue = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(renderedValue); } ((com.google.gwt.dom.client.Element) (dropdownButton.getElement().getChild(0))).setInnerHTML(renderedValue); dropdownButton.setTitle(renderedValue); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> org.ovirt.engine.ui.common.widget.editor.listPanel.setSelected(value)); if (fireEvents) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, selectedItems()); lastValues = null; }); } else { lastValues = null; } }
protected void handleSetMessageQueryResult(org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult result) { setHelpTag(getRemoveQosHelpTag()); setHashName(getRemoveQosHashName()); int index = 0; int numberOfTimesUsedByDiskProfiles = 0; java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.queries.QueryReturnValue returnValue : result.getReturnValues()) { java.util.List<org.ovirt.engine.core.common.businessentities.Nameable> diskProfileEntities = returnValue.getReturnValue(); java.lang.String qosName = sourceListModel.getSelectedItems().get(index).getName(); if ((diskProfileEntities.size()) == 0) { list.add(qosName); } else { numberOfTimesUsedByDiskProfiles += diskProfileEntities.size(); java.util.List<java.lang.String> diskProfileNames = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Nameable diskProfileEntity : diskProfileEntities) { java.lang.String diskProfileName = diskProfileEntity.getName(); diskProfileNames.add(diskProfileName); } java.lang.String diskProfileNamesAsString = org.ovirt.engine.ui.uicompat.external.StringUtils.join(diskProfileNames, ", "); list.add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().removeStorageQoSItem(qosName, diskProfileNamesAsString)); } index++; } setMessage(getRemoveQosMessage(numberOfTimesUsedByDiskProfiles)); setItems(list); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); try { new org.ovirt.engine.ui.uicompat.MailAddress(((java.lang.String) (value))); } catch (java.lang.RuntimeException e) { result.setSuccess(false); result.getReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().invalidEmailAddressInvalidReason()); } return result; }
@java.lang.Override protected java.lang.String getWarning(java.util.List<java.lang.String> disks) { return messages.cannotCopyDisks(org.ovirt.engine.core.compat.StringHelper.join(", ", disks.toArray())); }
private java.lang.String getOuterClassNames() { java.util.Set<java.lang.String> classNames = new java.util.LinkedHashSet<>(); classNames.add(org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.Defaults.TEMPLATE_CLASS_OUTER); classNames.addAll(extraTooltipClassNames); return org.ovirt.engine.ui.uicompat.external.StringUtils.join(classNames, " "); }
private void updateDisksWarningByImageStatus(java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> disks, org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus) { java.util.ArrayList<java.lang.String> disksAliases = getDisksAliasesByImageStatus(disks, imageStatus); if (!(disksAliases.isEmpty())) { generalWarningMessage.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget.messages.disksStatusWarning(org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance().translate(imageStatus), org.ovirt.engine.ui.uicompat.external.StringUtils.join(disksAliases, ", "))); generalWarningMessage.setVisible(true); } }
private void updateProblematicDisk(org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = diskModel.getStorageDomain().getSelectedItem(); if (storageDomain == null) { return; } java.lang.String diskAlias = diskModel.getDisk().getDiskAlias(); if (storageDomain.getStorageType().isBlockDomain()) { if (!(problematicDisksForWarning.contains(diskAlias))) { problematicDisksForWarning.add(diskAlias); } } else { problematicDisksForWarning.remove(diskAlias); } if (!(problematicDisksForWarning.isEmpty())) { getDynamicWarning().setEntity(messages.moveDisksPreallocatedWarning(org.ovirt.engine.core.compat.StringHelper.join(", ", problematicDisksForWarning.toArray()))); getDynamicWarning().setIsAvailable(true); } else { getDynamicWarning().setIsAvailable(false); } }
public java.lang.String translateErrorTextSingle(java.lang.String errorMsg, java.lang.Boolean changeIfNotFound) { java.lang.String ret = ""; try { if ((errorMsg != null) && ((errorMsg.length()) > 0)) { java.lang.String errMsgCopy = errorMsg; if (!(isDynamicVariable(errorMsg))) { errorMsg = errorMsg.replace('.', '_'); } java.lang.String errorsString = errors.getString(errorMsg); if (errorsString != null) { ret = errorsString.replace("\n", "<br/>"); } else { if ((isDynamicVariable(errorMsg)) || (!changeIfNotFound)) { ret = errorMsg; } else { errorMsg = errMsgCopy; java.lang.String[] splitted = errorMsg.toLowerCase().split("_"); ret = org.ovirt.engine.core.compat.StringHelper.join(" ", splitted); } } } } catch (java.util.MissingResourceException e) { ret = errorMsg; } return ret; }
private java.lang.String composeExistingVmsWarningMessage(java.util.List<T> existingVms) { final java.util.List<java.lang.String> list = new java.util.ArrayList<>(); for (T t : existingVms) { list.add(extractNameFromEntity(t)); } return org.ovirt.engine.ui.uicompat.external.StringUtils.join(list, ", "); }
public static java.lang.String renderVmNamesList(java.util.List<java.lang.String> names) { return org.ovirt.engine.ui.uicompat.external.StringUtils.join(names, ", "); }
@java.lang.Override protected void onSelectedItemChanged() { super.onSelectedItemChanged(); java.util.List selectedItem = ((java.util.List) (getSelectedItem())); if (selectedItem != null) { java.util.ArrayList<java.lang.String> items = new java.util.ArrayList<>(); for (java.lang.Object item : selectedItem) { org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel i = ((org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel) (item)); items.add(i.getPartString()); } java.lang.String searchString = org.ovirt.engine.core.compat.StringHelper.join("", items.toArray(new java.lang.String[]{ })); if ((getPrefix()) != null) { searchString = searchString.substring(getPrefix().length()); } setSearchString(searchString); } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet object) { return org.ovirt.engine.ui.uicompat.external.StringUtils.join(object.getDnsServers(), ", "); }
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); final boolean shouldSetNewMacPoolOnAllClusters = newMacPoolId != null; if (shouldSetNewMacPoolOnAllClusters) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { moveMacs.updateClusterAndMoveMacs(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()); } } }
public void moveMacsOfUpdatedCluster(org.ovirt.engine.core.common.businessentities.Cluster sourceCluster, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceCluster); java.util.Objects.requireNonNull(targetMacPoolId); org.ovirt.engine.core.compat.Guid sourceMacPoolId = sourceCluster.getMacPoolId(); org.ovirt.engine.core.compat.Guid clusterId = sourceCluster.getId(); java.util.Objects.requireNonNull(sourceMacPoolId); java.util.Objects.requireNonNull(clusterId); if (needToMigrateMacs(sourceMacPoolId, targetMacPoolId)) { java.util.List<java.lang.String> macsToMigrate = vmNicDao.getAllMacsByClusterId(clusterId); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macsToMigrate, false, commandContext); } }
public void migrateMacsToAnotherMacPool(org.ovirt.engine.core.compat.Guid sourceMacPoolId, org.ovirt.engine.core.compat.Guid targetMacPoolId, java.util.List<java.lang.String> macsToMigrate, boolean checkForDuplicity, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceMacPoolId); java.util.Objects.requireNonNull(targetMacPoolId); java.util.Objects.requireNonNull(macsToMigrate); java.util.Objects.requireNonNull(commandContext); if ((macsToMigrate.isEmpty()) || (sourceMacPoolId.equals(targetMacPoolId))) { return; } org.ovirt.engine.core.bll.network.macpool.MacPool sourcePool = poolPerCluster.getMacPoolById(sourceMacPoolId, commandContext); org.ovirt.engine.core.bll.network.macpool.MacPool targetPool = poolPerCluster.getMacPoolById(targetMacPoolId, commandContext); sourcePool.freeMacs(macsToMigrate); if (checkForDuplicity) { java.util.List<java.lang.String> notAddedMacs = targetPool.addMacs(macsToMigrate); boolean allMacsWereAdded = notAddedMacs.isEmpty(); if (!allMacsWereAdded) { throw new java.lang.IllegalStateException(createMessageCannotChangeClusterDueToDuplicatesInTargetPool(notAddedMacs)); } } else { targetPool.forceAddMacs(macsToMigrate); } }

private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); final boolean shouldSetNewMacPoolOnAllClusters = newMacPoolId != null; if (shouldSetNewMacPoolOnAllClusters) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { moveMacs.migrateMacsToAnotherMacPoolIfNeeded(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()); cluster.setMacPoolId(newMacPoolId); clusterDao.update(cluster); } } }
public void migrateMacsToAnotherMacPoolIfNeeded(org.ovirt.engine.core.common.businessentities.Cluster sourceCluster, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceCluster); java.util.Objects.requireNonNull(targetMacPoolId); java.util.Objects.requireNonNull(commandContext); org.ovirt.engine.core.compat.Guid sourceMacPoolId = java.util.Objects.requireNonNull(sourceCluster.getMacPoolId()); org.ovirt.engine.core.compat.Guid clusterId = java.util.Objects.requireNonNull(sourceCluster.getId()); boolean macPoolChanged = !(sourceMacPoolId.equals(targetMacPoolId)); if (macPoolChanged) { java.util.List<java.lang.String> macsToMigrate = vmNicDao.getAllMacsByClusterId(clusterId); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macsToMigrate, false, commandContext); } }

private void initNetworkList(org.ovirt.engine.core.compat.Guid dataCenterId) { startProgress(); org.ovirt.engine.core.common.queries.IdQueryParameters queryParams = new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(QueryType.GetAllNetworks, queryParams, new org.ovirt.engine.ui.uicommonweb.models.profiles.AsyncQuery<org.ovirt.engine.core.common.queries.QueryReturnValue>(( returnValue) -> { Collection<org.ovirt.engine.core.common.businessentities.network.Network> networks = returnValue.getReturnValue(); getNetwork().setItems(networks); updateNetworks(networks); stopProgress(); })); }





private org.ovirt.engine.ui.common.widget.dialog.TooltippedIcon createBondIcon(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { org.ovirt.engine.core.common.businessentities.network.InterfaceStatus interfaceStatus = lineModel.getInterface().getStatistics().getStatus(); com.google.gwt.resources.client.ImageResource image = (InterfaceStatus.UP.equals(interfaceStatus)) ? org.ovirt.engine.ui.webadmin.widget.host.BondPanel.resources.splitUpImage() : org.ovirt.engine.ui.webadmin.widget.host.BondPanel.resources.splitDownImage(); com.google.gwt.safehtml.shared.SafeHtml bondPropertiesMessage = createBondTooltipMessage(lineModel, interfaceStatus); com.google.gwt.safehtml.shared.SafeHtml bondMessage = org.ovirt.engine.ui.webadmin.widget.host.BondPanel.templates.italicWordWrapMaxWidthWithBoldTitle(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.constants.bondProperties(), bondPropertiesMessage); org.ovirt.engine.ui.common.widget.dialog.TooltippedIcon bondIcon = new org.ovirt.engine.ui.common.widget.dialog.TooltippedIcon(bondMessage, image, image); return bondIcon; }

private java.lang.String createActiveBondTooltipMessage(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { java.util.List<java.lang.String> bondProperties = new java.util.ArrayList<>(); java.lang.String adPartnerMac = java.util.Objects.toString(bond.getAdPartnerMac(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondAdPartnerMac(adPartnerMac)); java.lang.String adAggregatorId = java.util.Objects.toString(bond.getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondAdAggregatorId(adAggregatorId)); for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface nic : lineModel.getInterfaces()) { java.lang.String nicName = nic.getName(); java.lang.String nicAggregatorId = java.util.Objects.toString(nic.getInterface().getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondSlaveAdAggregatorId(nicName, nicAggregatorId)); } return org.ovirt.engine.ui.uicompat.external.StringUtils.join(bondProperties, "\n"); }
private boolean isAdPartnerMacValid(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.core.common.businessentities.VDS vds) { java.lang.String partnerMac = bond.getAdPartnerMac(); boolean isAdPartnerMacEmpty = ((partnerMac == null) || (partnerMac.isEmpty())) || (partnerMac.equals(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.INVALID_AD_PARTNER_MAC)); boolean isIfcUp = InterfaceStatus.UP.equals(bond.getStatistics().getStatus()); boolean isBond4 = BondMode.BOND4.equals(org.ovirt.engine.core.common.businessentities.network.BondMode.parseBondMode(bond.getBondOptions())); boolean isAdPartnerSupportedForCluster = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.AdPartnerMacSupported, vds.getClusterCompatibilityVersion().getValue()))); return (((!isAdPartnerMacEmpty) || (!isIfcUp)) || (!isBond4)) || (!isAdPartnerSupportedForCluster); }

private com.google.gwt.user.client.ui.IsWidget createMainInfoPanel(java.lang.String header, T entity) { com.google.gwt.user.client.ui.FlowPanel mainInfoPanel = new com.google.gwt.user.client.ui.FlowPanel(); mainInfoPanel.addStyleName(PatternflyConstants.PF_LIST_VIEW_MAIN_INFO); mainInfoPanel.add(createIconPanel()); mainInfoPanel.add(createBodyPanel(header, entity)); return mainInfoPanel; }
void initTable() { table.addColumn(new org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.EmptyColumn(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.empty(), "30px"); table.addColumn(new org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.EmptyColumn(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.nameInterface(), "200px"); table.addColumn(new org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.EmptyColumn(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.bondInterface(), "200px"); table.addColumn(new org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.EmptyColumn(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.vlanInterface(), "200px"); table.addColumn(new org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.EmptyColumn(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.hostOutOfSync(), "75px"); table.addColumn(new org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.EmptyColumn(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.networkNameInterface(), "200px"); table.addColumn(new org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.EmptyColumn(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.ipv4AddressInterface(), "120px"); table.addColumn(new org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.EmptyColumn(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.ipv6AddressInterface(), "200px"); table.addColumn(new org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.EmptyColumn(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.macInterface(), "120px"); table.addColumnWithHtmlHeader(new org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.EmptyColumn(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.templates.sub(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.speedInterface(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.mbps()), "100px"); table.addColumnWithHtmlHeader(new org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.EmptyColumn(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.templates.sub(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.rxRate(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.mbps()), "100px"); table.addColumnWithHtmlHeader(new org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.EmptyColumn(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.templates.sub(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.txRate(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.mbps()), "100px"); table.addColumnWithHtmlHeader(new org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.EmptyColumn(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.templates.sub(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.rxTotal(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.bytes()), "150px"); table.addColumnWithHtmlHeader(new org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.EmptyColumn(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.templates.sub(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.txTotal(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.bytes()), "150px"); table.addColumnWithHtmlHeader(new org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.EmptyColumn(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.templates.sub(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.dropsInterface(), org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.pkts()), "100px"); pfActionPanel.addButtonToActionGroup(table.addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel>(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.setupHostNetworksInterface()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getSetupNetworksCommand(); } })); pfActionPanel.addButtonToActionGroup(table.addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel>(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.saveNetConfigInterface()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getSaveNetworkConfigCommand(); } })); pfActionPanel.addButtonToActionGroup(table.addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel>(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.syncAllHostNetworks()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getSyncAllHostNetworksCommand(); } })); table.table.setEmptyTableWidget(null); }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createBodyPanel(java.lang.String header, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { com.google.gwt.user.client.ui.FlowPanel bodyPanel = new com.google.gwt.user.client.ui.FlowPanel(); bodyPanel.addStyleName(PatternflyConstants.PF_LIST_VIEW_BODY); com.google.gwt.user.client.ui.FlowPanel descriptionPanel = new com.google.gwt.user.client.ui.FlowPanel(); descriptionPanel.addStyleName(PatternflyConstants.PF_LIST_VIEW_DESCRIPTION); com.google.gwt.user.client.ui.FlowPanel headerPanel = new com.google.gwt.user.client.ui.FlowPanel(); headerPanel.getElement().setInnerHTML(header); headerPanel.addStyleName(Styles.LIST_GROUP_ITEM_HEADING); descriptionPanel.add(headerPanel); com.google.gwt.user.client.ui.FlowPanel statusPanel = new com.google.gwt.user.client.ui.FlowPanel(); statusPanel.addStyleName(Styles.LIST_GROUP_ITEM_TEXT); statusPanel.add(createLinkStatusPanel((networkInterface != null ? networkInterface.isLinked() : false))); statusPanel.add(createCardPluggedStatusPanel((networkInterface != null ? networkInterface.isPlugged() : false))); descriptionPanel.add(statusPanel); bodyPanel.add(descriptionPanel); bodyPanel.add(createAdditionalInfoPanel()); return bodyPanel; }
private void updateInfoPanel() { if ((getModel().getItems()) instanceof java.util.List) { storeCurrentDisplayState(); clearClickHandlers(); selectionModel.clear(); org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.clear(); int i = 0; for (T item : getModel().getItems()) { org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T> newItem = creator.createListViewItem(item); handlerRegistrations.add(newItem.addClickHandler(this)); if (i < (currentState.size())) { restoreState(currentState.get(i), newItem); if (i == (selectedIndex)) { newItem.addStyleName(Styles.ACTIVE); } } add(newItem); i++; } if ((org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.getWidgetCount()) == 0) { org.gwtbootstrap3.client.ui.ListGroupItem noItems = new org.gwtbootstrap3.client.ui.ListGroupItem(); noItems.addStyleName(Styles.LIST_GROUP_ITEM_HEADING); noItems.setText(org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.constants.noItemsToDisplay()); add(noItems); } restoreSelection(selectedIndex); } }





private void setIcon(java.lang.String iconCss) { org.gwtbootstrap3.client.ui.html.Span iconPanel = new org.gwtbootstrap3.client.ui.html.Span(); iconPanel.addStyleName(getBaseStyle(iconCss)); iconPanel.addStyleName(iconCss); add(iconPanel); }

private com.google.gwt.user.client.ui.IsWidget createLinkStatusPanel(boolean isLinked) { org.gwtbootstrap3.client.ui.html.Span linkStatusPanel = new org.gwtbootstrap3.client.ui.html.Span(); org.gwtbootstrap3.client.ui.html.Span icon = new org.gwtbootstrap3.client.ui.html.Span(); icon.addStyleName(Styles.ICON_STACK); icon.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.FA_2X); org.gwtbootstrap3.client.ui.html.Italic plugItalic = new org.gwtbootstrap3.client.ui.html.Italic(); plugItalic.addStyleName(Styles.FONT_AWESOME_BASE); plugItalic.addStyleName(Styles.ICON_STACK_TOP); icon.add(plugItalic); if (isLinked) { plugItalic.addStyleName(IconType.ARROW_CIRCLE_O_UP.getCssName()); } else { plugItalic.addStyleName(IconType.ARROW_CIRCLE_O_DOWN.getCssName()); } linkStatusPanel.add(icon); return linkStatusPanel; }

private void updateProperties() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getEntity(); setImage(disk.getDiskStorageType().isInternal()); setLun(((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN))); setAlias(disk.getDiskAlias()); setDescription(disk.getDiskDescription()); setDiskId(disk.getId().toString()); if ((disk.getLastAlignmentScan()) != null) { java.lang.String lastScanDate = com.google.gwt.i18n.client.DateTimeFormat.getFormat("yyyy-MM-dd, HH:mm").format(disk.getLastAlignmentScan()); setAlignment(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().diskAlignment(disk.getAlignment().toString(), lastScanDate)); } else { setAlignment(disk.getAlignment().toString()); } setWipeAfterDelete(disk.isWipeAfterDelete()); if (isImage()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); setDiskProfileName(java.lang.String.join(", ", diskImage.getDiskProfileNames())); setQuotaName(java.lang.String.join(", ", diskImage.getQuotaNames())); setQuotaAvailable((!(diskImage.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)))); } else if (isLun()) { org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk = ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (disk)); setLunId(lunDisk.getLun().getLUNId()); } }

private void registerHandlers() { model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (("Window".equals(propName)) && ((model.getWindow()) == null)) { if (model.getSpecificClusterQuota().getEntity()) { quotaClusterTable.asEditor().edit(model.getAllDataCenterClusters()); } else { quotaClusterTable.asEditor().edit(model.getQuotaClusters()); } if (model.getSpecificStorageQuota().getEntity()) { quotaStorageTable.asEditor().edit(model.getAllDataCenterStorages()); } else { quotaStorageTable.asEditor().edit(model.getQuotaStorages()); } } } }); model.getSpecificClusterQuota().getEntityChangedEvent().addListener(clusterListener); model.getSpecificStorageQuota().getEntityChangedEvent().addListener(storageListener); }

public void addDialogModelListener(final M model) { hideAndClearAllPopups(); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(model, propName, windowPopupInstances.get(propName), false); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(model, propName, confirmWindowPopupInstances.get(propName), true); } } }); }
@java.lang.Override protected void onReveal() { org.ovirt.engine.ui.uicompat.Event<org.ovirt.engine.ui.uicompat.EventArgs> entityChangedEvent = getModel().getDiskViewType().getEntityChangedEvent(); if (!(entityChangedEvent.getListeners().contains(getView().getDiskTypeChangedEventListener()))) { entityChangedEvent.addListener(getView().getDiskTypeChangedEventListener()); } super.onReveal(); getView().handleQuotaColumnVisibility(); }
void initTableOverhead() { disksViewRadioGroup = new org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewRadioGroup(); disksViewRadioGroup.setClickHandler(clickHandler); getTable().setTableOverhead(disksViewRadioGroup); }


private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getSelectedItems())) : null; boolean shouldAllowEdit = true; if (disk != null) { shouldAllowEdit = (!(disk.isOvfStore())) && (!(isDiskLocked(disk))); } getNewCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk != null) && (disks != null)) && ((disks.size()) == 1)) && shouldAllowEdit)); getRemoveCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isRemoveCommandAvailable()))); getScanAlignmentCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isScanAlignmentCommandAvailable()))); getExportCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveCommandAvailability(disks); getCancelUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isCancelAllowed(disks)); getPauseUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isPauseAllowed(disks)); getResumeUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isResumeAllowed(disks)); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getNewCommand())) { newEntity(); } else if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getMoveCommand())) { move(); } else if (command == (getCopyCommand())) { copy(); } else if (command == (getScanAlignmentCommand())) { scanAlignment(); } else if (command == (getExportCommand())) { export(); } else if ((RemoveDiskModel.CANCEL_REMOVE.equals(command.getName())) || ("Cancel".equals(command.getName()))) { cancel(); } else if ("CancelConfirm".equals(command.getName())) { cancelConfirm(); } else if (RemoveDiskModel.ON_REMOVE.equals(command.getName())) { onRemove(); } else if (command == (getChangeQuotaCommand())) { changeQuota(); } else if (command.getName().equals("onChangeQuota")) { onChangeQuota(); } else if (command == (getUploadCommand())) { upload(); } else if (command == (getCancelUploadCommand())) { cancelUpload(); } else if ("OnCancelUpload".equals(command.getName())) { onCancelUpload(); } else if (command == (getPauseUploadCommand())) { pauseUpload(); } else if (command == (getResumeUploadCommand())) { resumeUpload(); } }

@java.lang.Override public javax.ws.rs.core.Response remove() { org.ovirt.engine.core.common.businessentities.Provider provider = org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.getProvider(this, id); org.ovirt.engine.core.common.action.ProviderParameters parameters = new org.ovirt.engine.core.common.action.ProviderParameters(provider); return performAction(ActionType.RemoveProvider, parameters); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBricks(org.ovirt.engine.core.compat.Guid volumeId) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricks = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick1 = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick1.setVolumeId(volumeId); brick1.setId(org.ovirt.engine.core.bll.gluster.AbstractRemoveGlusterVolumeBricksCommandTest.BRICK_UUID1); brick1.setBrickDirectory("/tmp/test-vol0"); brick1.setServerId(SERVER_ID); brick1.setStatus(GlusterStatus.UP); bricks.add(brick1); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick2 = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick2.setVolumeId(volumeId); brick2.setId(org.ovirt.engine.core.bll.gluster.AbstractRemoveGlusterVolumeBricksCommandTest.BRICK_UUID1); brick2.setBrickDirectory("/tmp/test-vol1"); brick2.setServerId(SERVER_ID); brick2.setStatus(GlusterStatus.UP); bricks.add(brick2); return bricks; }
private void onRemove() { java.util.List<org.ovirt.engine.core.common.action.ActionParametersBase> parameterList = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.Provider provider : providers) { parameterList.add(new org.ovirt.engine.core.common.action.ProviderParameters(provider)); } sourceListModel.selectNextItem(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleActions(ActionType.RemoveProvider, parameterList, ( result) -> sourceListModel.getSearchCommand().execute()); cancel(); }
private void updateActionAvailability() { java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> tempVar = getSelectedItems(); java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> selectedItems = (tempVar != null) ? tempVar : new java.util.ArrayList(); getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getAddCommand().setIsAvailable(true); getRemoveCommand().setIsAvailable(true); }

@java.lang.Override protected void executeCommand() { setStoragePoolId(getNetwork().getDataCenterId()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { removeVnicProfiles(); removeFromClusters(); getCompensationContext().snapshotEntity(getNetwork()); networkDao.remove(getNetwork().getId()); getCompensationContext().stateChanged(); return null; }); if (getNetwork().isExternal()) { if (org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getParameters().isRemoveFromNetworkProvider()) { removeExternalNetwork(); } } if (org.ovirt.engine.core.bll.network.cluster.NetworkHelper.shouldRemoveNetworkFromHostUponNetworkRemoval(getNetwork())) { removeNetworkFromHosts(); } org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.setSucceeded(true); }




private java.util.Set<org.ovirt.engine.core.compat.Guid> findNonResponsiveHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts) { final java.util.Set<org.ovirt.engine.core.compat.Guid> nonResponsiveHosts = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if ((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive)) { nonResponsiveHosts.add(host.getId()); } } return nonResponsiveHosts; }

@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured, reportedDnsResolverConfiguration); }


@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.AuditLog auditLog = getAuditLog(); auditLogDao.remove(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); setAuditLogDetails(auditLog); auditLog.setUserId(Guid.Empty); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logableToClear = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(auditLog); org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator eventFloodRegulator = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator(logableToClear, auditLog.getLogType()); eventFloodRegulator.evict(); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.setSucceeded(true); }





protected void updateStaticDataDefaults() { updateStorageDomainWipeAfterDelete(); updateSpaceThresholds(); }
private void warnIfNotAllDisksPermitSnapshots() { for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values()) { if (!(disk.isAllowSnapshot())) { auditLogDirector.log(this, AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT); break; } } }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.AuditLog)) { return false; } org.ovirt.engine.core.common.businessentities.AuditLog other = ((org.ovirt.engine.core.common.businessentities.AuditLog) (obj)); return ((((((((((((((((((((((auditLogId) == (other.auditLogId)) && (java.util.Objects.equals(logTime, other.logTime))) && ((logType) == (other.logType))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(storageDomainId, other.storageDomainId))) && (java.util.Objects.equals(storagePoolId, other.storagePoolId))) && ((severity) == (other.severity))) && (java.util.Objects.equals(userId, other.userId))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(quotaId, other.quotaId))) && (java.util.Objects.equals(vmId, other.vmId))) && (java.util.Objects.equals(vmTemplateId, other.vmTemplateId))) && ((processed) == (other.processed))) && (java.util.Objects.equals(correlationId, other.correlationId))) && (java.util.Objects.equals(jobId, other.jobId))) && (java.util.Objects.equals(origin, other.origin))) && ((customEventId) == (other.customEventId))) && ((eventFloodInSec) == (other.eventFloodInSec))) && (java.util.Objects.equals(customData, other.customData))) && ((external) == (other.external))) && ((deleted) == (other.deleted))) && (java.util.Objects.equals(callStack, other.callStack)); }

@org.junit.Before public void setupEnvironment() { org.ovirt.engine.core.utils.CorrelationIdTracker.clean(); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); when(engineSessionDao.remove(anyLong())).thenReturn(1); sessionDataContainer.setUser(session, user); }
@org.junit.Test public void testBlockUseHostCpuWithPPCArch() { when(cpuFlagsManagerHandler.getCpuId(anyString(), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(org.ovirt.engine.core.bll.CPU_ID); when(osRepository.isCpuSupported(anyInt(), any(org.ovirt.engine.core.compat.Version.class), anyString())).thenReturn(true); doNothing().when(cmd).initTemplateDisks(); setupCanAddPpcTest(); cmd.setEffectiveCompatibilityVersion(Version.v4_0); doReturn(java.util.Collections.emptyList()).when(cmd).getImagesToCheckDestinationStorageDomains(); initPpcCluster(); doReturn(true).when(cmd).validateAddVmCommand(); doReturn(true).when(cmd).isVmNameValidLength(any(org.ovirt.engine.core.common.businessentities.VM.class)); when(osRepository.getArchitectureFromOS(anyInt())).thenReturn(ArchitectureType.ppc64); cmd.getParameters().getVm().setClusterArch(ArchitectureType.ppc64); cmd.getParameters().getVm().setUseHostCpuFlags(true); cmd.getParameters().getVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST); cmd.getParameters().getVm().setClusterId(cluster.getId()); cmd.getParameters().getVm().setVmOs(OsType.Other.ordinal()); cmd.init(); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.USE_HOST_CPU_REQUESTED_ON_UNSUPPORTED_ARCH); }
@java.lang.Override public void setUp() { super.setUp(); generateStorageToDisksMap(); initDestSDs(); }

@org.junit.Test public void testNameNotChanged() { prepareVmToPassValidate(); vm.setName("vm1"); mockSameNameQuery(true); mockVmValidator(); command.initEffectiveCompatibilityVersion(); assertTrue("validate should have passed.", command.validate()); }
@org.junit.Before public void setUp() { when(vmDao.get(vm.getId())).thenReturn(vm); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); cluster.setCpuName("Intel Conroe Family"); cluster.setArchitecture(ArchitectureType.x86_64); cluster.setId(vm.getClusterId()); cluster.setStoragePoolId(vm.getStoragePoolId()); cluster.setCompatibilityVersion(org.ovirt.engine.core.compat.Version.getLast()); when(clusterDao.get(vm.getClusterId())).thenReturn(cluster); mockOsRepository(); doNothing().when(cmd).separateCustomProperties(any(org.ovirt.engine.core.common.businessentities.VmStatic.class)); doReturn(getDisksList(vm.getStoragePoolId())).when(cmd).getVmDisksFromDB(); doReturn(vmDeviceUtils).when(cmd).getVmDeviceUtils(); cmd.init(); }



@java.lang.Override protected void init() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getNicTypeList(getVm().getOsId(), getClusterCompatibilityVersion(), new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { setSupportedVnicTypes(returnValue); postNicInit(); })); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel iface) { driver.edit(iface); hideMacWhenNotEnabled(iface); iface.getMAC().getPropertyChangedEvent().addListener(( ev, sender, args) -> { if ("IsAvailable".equals(args.propertyName)) { hideMacWhenNotEnabled(iface); } }); }
protected void postOnSave() { }
protected void onSave() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic = createBaseNic(); if ((getProgress()) != null) { return; } if (!(validate())) { return; } nic.setName(getName().getEntity()); org.ovirt.engine.core.common.businessentities.network.VnicProfileView profile = getProfile().getSelectedItem(); nic.setVnicProfileId(profile.getId()); nic.setNetworkName(profile.getNetworkName()); nic.setLinked(getLinked().getEntity()); if ((getNicType().getSelectedItem()) == null) { nic.setType(null); } else { nic.setType(getNicType().getSelectedItem().getValue()); } onSaveMAC(nic); nic.setPlugged(getPlugged().getEntity()); startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(getActionType(), createVdcActionParameters(nic), ( result) -> { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue(); stopProgress(); if ((returnValue != null) && (returnValue.getSucceeded())) { cancel(); postOnSave(); } }, this); }

private void postNicInit() { getName().setEntity(getNic().getName()); initMAC(); initLinked(); initProfiles(); getPlugged().setEntity(getNic().isPlugged()); if (!(allowPlug())) { getPlugged().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().nicHotPlugNotSupported(getClusterCompatibilityVersion().toString())); } getPlugged().setIsChangeable(allowPlug()); initCommands(); }

protected java.util.Map<java.lang.String, java.lang.String> createPortAllocationRuntimeProperties(com.woorea.openstack.quantum.model.Port port) { java.util.Map<java.lang.String, java.lang.String> runtimeProperties = new java.util.HashMap<>(); runtimeProperties.put("vnic_id", port.getId()); java.lang.String providerType = getProvider().getType().name(); runtimeProperties.put("provider_type", providerType); if (((port.getSecurityGroups()) != null) && (!(port.getSecurityGroups().isEmpty()))) { runtimeProperties.put("security_groups", org.apache.commons.lang.StringUtils.join(port.getSecurityGroups(), ',')); } return runtimeProperties; }







@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.storage.RepoImage.class, to = org.ovirt.engine.api.model.Image.class) public static org.ovirt.engine.api.model.Image map(org.ovirt.engine.core.common.businessentities.storage.RepoImage entity, org.ovirt.engine.api.model.Image template) { org.ovirt.engine.api.model.Image model = (template != null) ? template : new org.ovirt.engine.api.model.Image(); model.setId(entity.getRepoImageId()); model.setName(entity.getRepoImageName()); return model; }
@java.lang.Override protected boolean validateImageTransfer(org.ovirt.engine.core.compat.Guid imageId) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(imageId))); org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = getDiskValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = getDiskImagesValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(storageDomainDao.getForStoragePool(diskImage.getStorageIds().get(0), diskImage.getStoragePoolId())); return ((((validate(diskValidator.isDiskExists())) && (validate(diskValidator.isDiskPluggedToAnyNonDownVm(false)))) && (validate(diskImagesValidator.diskImagesNotIllegal()))) && (validate(diskImagesValidator.diskImagesNotLocked()))) && (validate(storageDomainValidator.isDomainExistAndActive())); }


public void proceedCommandExecution(org.ovirt.engine.core.compat.Guid childCmdId) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = imageTransferDao.get(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); if ((entity == null) || ((entity.getPhase()) == null)) { log.error(("Image transfer status entity corrupt or missing from database" + " for image transfer command '{}'"), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); setCommandStatus(CommandStatus.FAILED); return; } if ((entity.getDiskId()) != null) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setImage(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(entity.getDiskId())))); } long ts = (java.lang.System.currentTimeMillis()) / 1000; if (pauseTransferIfNecessary(entity, ts)) { return; } executeStateHandler(entity, ts, childCmdId); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> listPermissionSubjects = new java.util.ArrayList<>(); if (org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.isImageProvided()) { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_DISK_PROPERTIES)); } else { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return listPermissionSubjects; }


@java.lang.Override public javax.ws.rs.core.Response toResponse(org.ovirt.engine.api.restapi.utils.MalformedIdException exception) { org.ovirt.engine.api.restapi.resource.validation.MalformedIdExceptionMapper.log.error("Malformed id detected while processing \"{}\" request for path \"{}\"", request.getMethod(), uriInfo.getPath()); org.ovirt.engine.api.restapi.resource.validation.MalformedIdExceptionMapper.log.error("Exception", exception); return javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(exception.getCause().getMessage()).build(); }


public void vmTypeChanged(org.ovirt.engine.core.common.businessentities.VmType vmType) { if (basedOnCustomInstanceType()) { getModel().getIsSoundcardEnabled().setEntity((vmType == (org.ovirt.engine.core.common.businessentities.VmType.Desktop))); } getModel().getAllowConsoleReconnect().setEntity((vmType == (org.ovirt.engine.core.common.businessentities.VmType.Server))); }
private void onDestroy() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); if ((model.getProgress()) != null) { return; } if (!(model.validate())) { return; } org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getSelectedItem(); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.ForceRemoveStorageDomain, new java.util.ArrayList(java.util.Arrays.asList(new org.ovirt.engine.core.common.action.ActionParametersBase[]{ new org.ovirt.engine.core.common.action.StorageDomainParametersBase(storageDomain.getId()) })), ( result) -> { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); }, model); }
@org.junit.Test public void testRemoveWithDestroy() throws java.lang.Exception { setUpGetEntityExpectations(); javax.ws.rs.core.UriInfo uriInfo = setUpActionExpectations(ActionType.ForceRemoveStorageDomain, org.ovirt.engine.core.common.action.StorageDomainParametersBase.class, new java.lang.String[]{ "StorageDomainId", "VdsId" }, new java.lang.Object[]{ GUIDS[0], GUIDS[1] }, true, true, false); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(BackendStorageDomainResource.HOST, GUIDS[1].toString()); parameters.put(BackendStorageDomainResource.DESTROY, java.lang.Boolean.TRUE.toString()); uriInfo = addMatrixParameterExpectations(uriInfo, parameters); setUriInfo(uriInfo); verifyRemove(resource.remove()); }
@java.lang.Override protected boolean validate() { boolean returnValue = ((super.validate()) && (org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.checkStorageDomain())) && (((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)) || (checkStorageDomainStatusNotEqual(StorageDomainStatus.Active))); if ((returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master))) && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStoragePool()) != null)) { if ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.electNewMaster()) == null) { returnValue = false; addValidationMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN); } else if (!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.initializeVds())) { returnValue = false; addValidationMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN_HOST_NOT_ACTIVE); } } if (returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLANCE))) { addValidationMessage(EngineMessage.ERROR_CANNOT_MANAGE_STORAGE_DOMAIN); returnValue = false; } return returnValue; }
@java.lang.Override public javax.ws.rs.core.Response remove() { java.lang.String host = org.ovirt.engine.api.restapi.util.ParametersHelper.getParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.HOST); if (host == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("host parameter is missing"); throw new javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fault).build()); } get(); org.ovirt.engine.core.compat.Guid hostId = getHostId(host); boolean destroy = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.DESTROY, true, false); boolean format = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.FORMAT, true, false); if (destroy) { org.ovirt.engine.core.common.action.StorageDomainParametersBase parameters = new org.ovirt.engine.core.common.action.StorageDomainParametersBase(guid); parameters.setVdsId(hostId); return performAction(ActionType.ForceRemoveStorageDomain, parameters); } else { org.ovirt.engine.core.common.action.RemoveStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.RemoveStorageDomainParameters(guid); parameters.setVdsId(hostId); parameters.setDoFormat(format); return performAction(ActionType.RemoveStorageDomain, parameters); } }
protected boolean isDetachAllowed(final boolean isRemoveLast) { if ((getStoragePoolIsoMap()) == null) { return failValidation(EngineMessage.STORAGE_DOMAIN_NOT_ATTACHED_TO_STORAGE_POOL); } if ((!isRemoveLast) && (isMaster())) { return failValidation(EngineMessage.ERROR_CANNOT_DETACH_LAST_STORAGE_DOMAIN); } return true; }
private boolean isDomainAttachedToDifferentStoragePool() { if ((org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getStoragePool().getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Uninitialized)) { for (org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getStorages()) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.get(storageDomainId); if ((domain.getStorageDomainType().isDataDomain()) && (isStorageDomainAttachedToStoragePool(domain))) { return failValidation(EngineMessage.ERROR_CANNOT_ADD_STORAGE_DOMAIN_WITH_ATTACHED_DATA_DOMAIN); } } } return true; }

@java.lang.Override public javax.ws.rs.core.Response remove() { java.lang.String host = org.ovirt.engine.api.restapi.util.ParametersHelper.getParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.HOST); if (host == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("host parameter is missing"); throw new javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fault).build()); } get(); org.ovirt.engine.core.compat.Guid hostId = getHostId(host); boolean destroy = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.DESTROY, true, false); boolean format = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.FORMAT, true, false); if (destroy) { org.ovirt.engine.core.common.action.StorageDomainParametersBase parameters = new org.ovirt.engine.core.common.action.StorageDomainParametersBase(guid); parameters.setVdsId(hostId); return performAction(ActionType.ForceRemoveStorageDomain, parameters); } else { org.ovirt.engine.core.common.action.RemoveStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.RemoveStorageDomainParameters(guid); parameters.setVdsId(hostId); parameters.setDoFormat(format); return performAction(ActionType.RemoveStorageDomain, parameters); } }
public void setWidgetColSize(org.gwtbootstrap3.client.ui.constants.ColumnSize size) { if ((sizeContainer) != null) { sizeContainer.addStyleName(size.getCssName()); } }
public void setLabelColSize(org.gwtbootstrap3.client.ui.constants.ColumnSize size) { getFormLabel().setAddStyleNames(size.getCssName()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(storageDomain().id()), mandatory(storageDomain().name())); optional(storageDomain().backup()); }
@javax.annotation.PostConstruct private void init() { int quotaCacheIntervalInMinutes = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.QuotaCacheIntervalInMinutes); schedulerUtil.scheduleAFixedDelayJob(this, "updateQuotaCache", new java.lang.Class[]{ }, new java.lang.Object[]{ }, 1, quotaCacheIntervalInMinutes, java.util.concurrent.TimeUnit.MINUTES); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("performLoadBalancing") public void performLoadBalancing() { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.debug("Load Balancer timer entered."); java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = getClusterDao().getAll(); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { org.ovirt.engine.core.common.scheduling.ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId()); org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnit = policyUnits.get(policy.getBalance()); java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> balanceResult = java.util.Optional.empty(); if (policyUnit.getPolicyUnit().isEnabled()) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = getVdsDao().getAllForClusterWithoutMigrating(cluster.getId()); if (policyUnit.getPolicyUnit().isInternal()) { balanceResult = internalRunBalance(policyUnit, cluster, hosts); } else if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.ExternalSchedulerEnabled)) { balanceResult = externalRunBalance(policyUnit, cluster, hosts); } } if ((balanceResult.isPresent()) && (balanceResult.get().isValid())) { migrationHandler.migrateVM(balanceResult.get().getCandidateHosts(), balanceResult.get().getVmToMigrate(), org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getMessage(AuditLogType.MIGRATION_REASON_LOAD_BALANCING)); } } }
private void enableLoadBalancer() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableVdsLoadBalancing)) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Start scheduling to enable vds load balancer"); org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.class).scheduleAFixedDelayJob(this, "performLoadBalancing", new java.lang.Class[]{ }, new java.lang.Object[]{ }, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsLoadBalancingIntervalInMinutes), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsLoadBalancingIntervalInMinutes), java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Finished scheduling to enable vds load balancer"); } }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("updateVmVersion") public void updateVmVersion() { for (org.ovirt.engine.core.compat.Guid vmId : vmDao.getVmIdsForVersionUpdate(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId())) { if (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobIdMap.containsKey(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId()))) { break; } org.ovirt.engine.core.common.action.UpdateVmVersionParameters params = new org.ovirt.engine.core.common.action.UpdateVmVersionParameters(vmId); params.setSessionId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getSessionId()); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(ActionType.UpdateVmVersion, params, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); } org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobIdMap.remove(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId()); }
public void scheduleJobs() { org.ovirt.engine.core.utils.timer.SchedulerUtil sched = getSchedulUtil(); int refreshRate = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsRefreshRate)) * 1000; registeredJobs.add(sched.scheduleAFixedDelayJob(this, "onTimer", new java.lang.Class[0], new java.lang.Object[0], refreshRate, refreshRate, java.util.concurrent.TimeUnit.MILLISECONDS)); vmsRefresher = getRefresherFactory().create(this); vmsRefresher.startMonitoring(); hostRefresher = new org.ovirt.engine.core.vdsbroker.HostConnectionRefresher(this, resourceManager); hostRefresher.start(); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("refresh") public void refresh() { log.debug("Affinity Rules Enforcement Manager interval reached."); final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmCandidates = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusterDao.getWithoutMigratingVms()) { if (!(cluster.isInUpgradeMode())) { final org.ovirt.engine.core.common.businessentities.VM candidate = rulesEnforcer.chooseNextVmToMigrate(cluster); if (candidate != null) { vmCandidates.add(candidate); } } } for (org.ovirt.engine.core.common.businessentities.VM vm : vmCandidates) { migrateVM(vm); } }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("backupCheck") public void backupCheck() { if (lock.tryLock()) { try { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Backup check started."); doBackupCheck(); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Backup check completed."); } finally { lock.unlock(); } } }
@org.junit.Before public void setup() { cluster1 = createCluster(); cluster2 = createCluster(); when(clusterDao.getWithoutMigratingVms()).thenReturn(java.util.Arrays.asList(cluster1, cluster2)); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster1))).thenReturn(vm1); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster2))).thenReturn(vm2); arem.wakeup(); }
@javax.annotation.PostConstruct private void initialize() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.PMHealthCheckEnabled)) { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Start initializing {}", getClass().getSimpleName()); java.lang.Integer pmHealthCheckInterval = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PMHealthCheckIntervalInSec); org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.class).scheduleAFixedDelayJob(this, "pmHealthCheck", new java.lang.Class[]{ }, new java.lang.Object[]{ }, pmHealthCheckInterval, pmHealthCheckInterval, java.util.concurrent.TimeUnit.SECONDS); } recover(vdsDao.getAll()); org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Finished initializing {}", getClass().getSimpleName()); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("pmHealthCheck") public void pmHealthCheck() { if (lock.tryLock()) { try { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Power Management Health Check started."); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().getAll(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.isPmEnabled()) { pmHealthCheck(host); } } org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Power Management Health Check completed."); } finally { lock.unlock(); } } }
private void endDefaultOperations() { endUnlockOps(); if (isTemplateVersion()) { org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobIdMap.put(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId(), StringUtils.EMPTY); java.lang.String jobId = getSchedulerUtil().scheduleAOneTimeJob(this, "updateVmVersion", new java.lang.Class[0], new java.lang.Object[0], 0, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobIdMap.put(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId(), jobId); } }
public void triggerPoolMonitoringJob() { schedulerUtil.triggerJob(poolMonitoringJobId); }
@javax.annotation.PostConstruct public void scheduleJob() { double interval = org.ovirt.engine.core.common.config.Config.<java.lang.Double>getValue(ConfigValues.CertificationValidityCheckTimeInHours); final int HOURS_TO_MINUTES = 60; long intervalInMinutes = java.lang.Math.round((interval * HOURS_TO_MINUTES)); scheduler.scheduleAFixedDelayJob(this, "checkCertificationValidity", new java.lang.Class[0], new java.lang.Object[0], 10, intervalInMinutes, java.util.concurrent.TimeUnit.MINUTES); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("checkCertificationValidity") public void checkCertificationValidity() { try { if ((!(checkCertificate(org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.getCertificate(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKICACert()), AuditLogType.ENGINE_CA_CERTIFICATION_HAS_EXPIRED, AuditLogType.ENGINE_CA_CERTIFICATION_IS_ABOUT_TO_EXPIRE_ALERT, AuditLogType.ENGINE_CA_CERTIFICATION_IS_ABOUT_TO_EXPIRE, null))) ^ (!(checkCertificate(((java.security.cert.X509Certificate) (org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.getCertificate())), AuditLogType.ENGINE_CERTIFICATION_HAS_EXPIRED, AuditLogType.ENGINE_CERTIFICATION_IS_ABOUT_TO_EXPIRE_ALERT, AuditLogType.ENGINE_CERTIFICATION_IS_ABOUT_TO_EXPIRE, null)))) { return; } if (!(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EncryptHostCommunication))) { return; } hostDao.getAll().stream().filter(( host) -> ((host.getStatus()) == VDSStatus.Up) || ((host.getStatus()) == VDSStatus.NonOperational)).forEach(this::checkHostCertificateValidity); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.CertificationValidityChecker.log.error("Failed to check certification validity: {}", e.getMessage()); org.ovirt.engine.core.bll.CertificationValidityChecker.log.error("Exception", e); } }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.info("Initializing DWH Heart Beat"); heartBeatVar = new org.ovirt.engine.core.common.businessentities.DwhHistoryTimekeeping(); heartBeatVar.setVariable(DwhHistoryTimekeepingVariable.HEART_BEAT); schedulerUtil.scheduleAFixedDelayJob(this, org.ovirt.engine.core.bll.dwh.DwhHeartBeat.DWH_HEART_BEAT_METHOD, new java.lang.Class[]{ }, new java.lang.Object[]{ }, 0, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.DwhHeartBeatInterval), java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.info("DWH Heart Beat initialized"); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("fetchIsoDomains") public synchronized void fetchIsoDomains() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> repofileList = repoFileMetaDataDao.getAllRepoFilesForAllStoragePools(StorageDomainType.ISO, StoragePoolStatus.Up, StorageDomainStatus.Active, VDSStatus.Up); resetProblematicList(); java.util.List<java.util.concurrent.Callable<java.lang.Void>> tasks = new java.util.ArrayList<>(); for (final org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage : repofileList) { if (shouldRefreshIsoDomain(repoImage.getLastRefreshed())) { tasks.add(() -> { updateCachedIsoFileListFromVdsm(repoImage); return null; }); } else { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.debug(("Automatic refresh process for '{}' file type in storage domain id '{}' was not performed" + " since refresh time out did not passed yet."), repoImage.getFileType(), repoImage.getRepoDomainId()); } } org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.invokeAll(tasks); handleErrorLog(new java.util.ArrayList(problematicRepoFileList)); }
@javax.annotation.PostConstruct public void scheduleJob() { double availableUpdatesRefreshRate = org.ovirt.engine.core.common.config.Config.<java.lang.Double>getValue(ConfigValues.HostPackagesUpdateTimeInHours); if (availableUpdatesRefreshRate > 0) { final int HOURS_TO_MINUTES = 60; long rateInMinutes = java.lang.Math.round((availableUpdatesRefreshRate * HOURS_TO_MINUTES)); scheduler.scheduleAFixedDelayJob(this, "availableUpdates", new java.lang.Class[0], new java.lang.Object[0], 15, rateInMinutes, java.util.concurrent.TimeUnit.MINUTES); } }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.info("Start initializing {}", getClass().getSimpleName()); isoDomainRefreshRate = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AutoRepoDomainRefreshTime)) * (org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.MIN_TO_MILLISECONDS); schedulerUtil.scheduleAFixedDelayJob(this, "fetchIsoDomains", new java.lang.Class[]{ }, new java.lang.Object[]{ }, 300000, isoDomainRefreshRate, java.util.concurrent.TimeUnit.MILLISECONDS); org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.info("Finished initializing {}", getClass().getSimpleName()); }
private void scheduleJobs(long regularInterval, long initialInterval) { scheduler.scheduleAFixedDelayJob(this, "refresh", new java.lang.Class[]{ }, new java.lang.Object[]{ }, initialInterval, regularInterval, java.util.concurrent.TimeUnit.MINUTES); }
@javax.annotation.PostConstruct private void initialize() { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Start initializing {}", getClass().getSimpleName()); java.lang.Integer backupCheckPeriodInHours = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BackupCheckPeriodInHours); if (backupCheckPeriodInHours > 0) { schedulerUtil.scheduleAFixedDelayJob(this, "backupCheck", new java.lang.Class[]{ }, new java.lang.Object[]{ }, backupCheckPeriodInHours, backupCheckPeriodInHours, java.util.concurrent.TimeUnit.HOURS); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Finished initializing {}", getClass().getSimpleName()); } }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("updateQuotaCache") public synchronized void updateQuotaCache() { if (!(isCacheUpdateNeeded())) { return; } log.debug("Updating Quota Cache..."); long timeStart = java.lang.System.currentTimeMillis(); java.util.List<org.ovirt.engine.core.common.businessentities.Quota> allQuotaIncludingConsumption = getQuotaDao().getAllQuotaIncludingConsumption(); if (allQuotaIncludingConsumption.isEmpty()) { return; } java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.Quota>> newStoragePoolQuotaMap = new java.util.HashMap<>(); java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> newDefaultQuotaIdMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.Quota quota : allQuotaIncludingConsumption) { if (!(newStoragePoolQuotaMap.containsKey(quota.getStoragePoolId()))) { newStoragePoolQuotaMap.put(quota.getStoragePoolId(), new java.util.HashMap()); } newStoragePoolQuotaMap.get(quota.getStoragePoolId()).put(quota.getId(), quota); if (quota.isDefault()) { newDefaultQuotaIdMap.put(quota.getStoragePoolId(), quota.getId()); } } lock.writeLock().lock(); try { storagePoolQuotaMap = newStoragePoolQuotaMap; storagePoolDefaultQuotaIdMap = newDefaultQuotaIdMap; } finally { lock.writeLock().unlock(); } long timeEnd = java.lang.System.currentTimeMillis(); log.info("Quota Cache updated. ({} msec)", (timeEnd - timeStart)); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("availableUpdates") public void availableUpdates() { hostDao.getAll().stream().filter(( h) -> h.getStatus().isEligibleForCheckUpdates()).forEach(this::submitCheckUpdatesForHost); }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Start initializing {}", getClass().getSimpleName()); schedulerUtil.scheduleAFixedDelayJob(this, "onTimer", new java.lang.Class[]{ }, new java.lang.Object[]{ }, 0, 7, java.util.concurrent.TimeUnit.DAYS); org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Finished initializing {}", getClass().getSimpleName()); }
public void triggerNow() { if ((updateTimerJobId) != null) { scheduler.triggerJob(updateTimerJobId); } }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("onTimer") public void onTimer() { java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(java.util.Comparator.naturalOrder()); if (retVal.isPresent()) { org.ovirt.engine.core.compat.Version version = retVal.get(); storagePoolDao.getAll().stream().filter(( storagePool) -> (version.compareTo(storagePool.getCompatibilityVersion())) > 0).forEach(( storagePool) -> logAlert(version, storagePool)); } }

@javax.annotation.PostConstruct public void initialize() { org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info("Start initializing {}", getClass().getSimpleName()); succeededJobTime = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SucceededJobCleanupTimeInMinutes); failedJobTime = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.FailedJobCleanupTimeInMinutes); java.lang.Integer cleanupFrequency = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.JobCleanupRateInMinutes); schedulerUtil.scheduleAFixedDelayJob(this, "completed_jobs_cleanup", new java.lang.Class[]{ }, new java.lang.Object[]{ }, cleanupFrequency, cleanupFrequency, java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info("Finished initializing {}", getClass().getSimpleName()); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("managePrestartedVmsInAllVmPools") public void managePrestartedVmsInAllVmPools() { vmPoolDao.getAll().stream().filter(( pool) -> (pool.getPrestartedVms()) > 0).forEach(this::managePrestartedVmsInPool); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation(org.ovirt.engine.core.bll.dwh.DwhHeartBeat.DWH_HEART_BEAT_METHOD) public void engineIsRunningNotification() { try { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("DWH Heart Beat - Start"); heartBeatVar.setDateTime(new java.util.Date()); dwhHistoryTimekeepingDao.save(heartBeatVar); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("DWH Heart Beat - End"); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.error("Error updating DWH Heart Beat: {}", ex.getMessage()); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Exception", ex); } }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Start initializing {}", getClass().getSimpleName()); java.util.Calendar calendar = new java.util.GregorianCalendar(); java.util.Date commandEntityCleanupTime = org.ovirt.engine.core.common.config.Config.<org.ovirt.engine.core.compat.DateTime>getValue(ConfigValues.CommandEntityCleanupTime); calendar.setTimeInMillis(commandEntityCleanupTime.getTime()); java.lang.String cronExpression = java.lang.String.format("%d %d %d * * ?", calendar.get(java.util.Calendar.SECOND), calendar.get(java.util.Calendar.MINUTE), calendar.get(java.util.Calendar.HOUR_OF_DAY)); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Setting command entity cleanup manager to run at: {}", cronExpression); schedulerUtil.scheduleACronJob(this, "onTimer", new java.lang.Class[]{ }, new java.lang.Object[]{ }, cronExpression); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Finished initializing {}", getClass().getSimpleName()); }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("Start initializing {}", getClass().getSimpleName()); pollingRate = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AsyncCommandPollingLoopInSeconds); initCommandExecutor(); schedulerUtil.scheduleAFixedDelayJob(this, "invokeCallbackMethods", new java.lang.Class[]{ }, new java.lang.Object[]{ }, pollingRate, pollingRate, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("Finished initializing {}", getClass().getSimpleName()); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("ovfUpdateTimer") public void ovfUpdateTimer() { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> storagePools = storagePoolDao.getAllByStatus(StoragePoolStatus.Up); updateOvfData(storagePools); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("onTimer") public void onTimer() { try { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Start deleteAgedOutCommandEntities"); org.ovirt.engine.core.compat.DateTime latestTimeToKeep = org.ovirt.engine.core.compat.DateTime.getNow().addDays(((org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.CommandEntityAgingThreshold)) * (-1))); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsBeforeDate(latestTimeToKeep); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Finished deleteAgedOutCommandEntities"); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.error("deleteAgedOutCommandEntities failed with exception", e); } }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("completed_jobs_cleanup") public void cleanCompletedJob() { java.util.Date succeededJobsDeleteTime = new java.util.Date(((java.lang.System.currentTimeMillis()) - (java.util.concurrent.TimeUnit.MILLISECONDS.convert(succeededJobTime, java.util.concurrent.TimeUnit.MINUTES)))); java.util.Date failedJobsDeleteTime = new java.util.Date(((java.lang.System.currentTimeMillis()) - (java.util.concurrent.TimeUnit.MILLISECONDS.convert(failedJobTime, java.util.concurrent.TimeUnit.MINUTES)))); try { jobDao.deleteCompletedJobs(succeededJobsDeleteTime, failedJobsDeleteTime); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.error("Failed to delete completed jobs: {}", e.getMessage()); org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.debug("Exception", e); } }
@javax.annotation.PostConstruct private void init() { autoStartVmsToRestart = new java.util.concurrent.CopyOnWriteArraySet<>(getInitialVmsToStart()); int autoStartVmsRunnerIntervalInSeconds = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AutoStartVmsRunnerIntervalInSeconds); schedulerUtil.scheduleAFixedDelayJob(this, "startFailedAutoStartVms", new java.lang.Class[]{ }, new java.lang.Object[]{ }, autoStartVmsRunnerIntervalInSeconds, autoStartVmsRunnerIntervalInSeconds, java.util.concurrent.TimeUnit.SECONDS); }
public org.ovirt.api.metamodel.concepts.Method createMethod(com.thoughtworks.qdox.model.JavaClass javaClass, org.ovirt.api.metamodel.concepts.Service service) { org.ovirt.api.metamodel.concepts.Method method = new org.ovirt.api.metamodel.concepts.Method(); analyzeName(javaClass, method); analyzeAnnotations(javaClass, method); analyzeDocumentation(javaClass, method); javaClass.getMethods().forEach(( x) -> analyzeMethodMember(x, method)); method.setDeclaringService(service); createSignatures(javaClass, service, method); return method; }

@org.junit.Test public void add() { runAddAndVerify(org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(), false, times(0), org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.OS_ID); }
@org.junit.Test public void addWithExistingMacAddressSucceed() { org.ovirt.engine.core.common.businessentities.network.VmNic iface = org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(); runAddAndVerify(iface, true, times(1), org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.OS_ID); }
@org.junit.Test public void removeAll() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces = java.util.Arrays.asList(org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(), org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface()); when(vmNicDao.getAllForVm(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(interfaces); vmInterfaceManager.removeAll(org.ovirt.engine.core.compat.Guid.newGuid()); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { verifyRemoveAllDelegatedCorrectly(iface); } }
public org.ovirt.engine.core.bll.network.macpool.MacPool createMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool, boolean engineStartup) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges macPoolUsingRanges = new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges(macPool.getId(), org.ovirt.engine.core.utils.MacAddressRangeUtils.macPoolToRanges(macPool), macPool.isAllowDuplicateMacAddresses(), auditLogDirector); macPoolUsingRanges.initialize(engineStartup, macPoolDao.getAllMacsForMacPool(macPool.getId())); return macPoolUsingRanges; }
protected void removeFromExternalNetworks(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { new org.ovirt.engine.core.bll.network.ExternalNetworkManager(iface).deallocateIfExternal(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); }
protected void addVmInterfaces() { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(macPool); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getClusterId(), org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getStoragePoolId(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_IMPORT_VM_INVALID_INTERFACES); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = getVm().getInterfaces(); vmInterfaceManager.sortVmNics(nics, getVm().getStaticData().getManagedDeviceMap()); if ((!(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().isImportAsNewEntity())) && (isExternalMacsToBeReported())) { reportExternalMacs(); } for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : getVm().getInterfaces()) { initInterface(iface); vnicProfileHelper.updateNicWithVnicProfileForUser(iface, org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCurrentUser()); final boolean reassignMac = (shouldMacBeReassigned(iface)) || (org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().isImportAsNewEntity()); vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCompensationContext(), reassignMac, getVm().getOs(), getEffectiveCompatibilityVersion()); macsAdded.add(iface.getMacAddress()); } vnicProfileHelper.auditInvalidInterfaces(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getVmName()); }

protected void runAddAndVerify(org.ovirt.engine.core.common.businessentities.network.VmNic iface, boolean reserveExistingMac, org.mockito.verification.VerificationMode addMacVerification, int osId) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = mock(org.ovirt.engine.core.common.osinfo.OsRepository.class); when(vmInterfaceManager.getOsRepository()).thenReturn(osRepository); when(osRepository.hasNicHotplugSupport(anyInt(), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(true); vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.context.NoOpCompensationContext.getInstance(), reserveExistingMac, false, osId, version); if (reserveExistingMac) { verify(macPool, times(1)).forceAddMac(iface.getMacAddress()); } else { verifyZeroInteractions(macPool); } verifyAddDelegatedCorrectly(iface, addMacVerification); }
@javax.interceptor.AroundInvoke public java.lang.Object manageTransaction(javax.interceptor.InvocationContext ctx) throws java.lang.Exception { long start = java.lang.System.currentTimeMillis(); try { return ctx.proceed(); } catch (java.lang.Exception e) { throw e; } finally { org.ovirt.engine.core.common.di.interceptor.ElapsedTimeInterceptor.logger.info("method: {} elapsed: {}ms", ctx.getMethod(), ((java.lang.System.currentTimeMillis()) - start)); } }
@java.lang.Override public org.ovirt.engine.core.common.queries.QueryReturnValue runQuery(org.ovirt.engine.core.common.queries.QueryType actionType, org.ovirt.engine.core.common.queries.QueryParametersBase parameters) { return runQueryImpl(actionType, parameters, true, null); }
@java.lang.Override public org.ovirt.engine.core.common.action.ActionReturnValue runAction(org.ovirt.engine.core.common.action.ActionType actionType, org.ovirt.engine.core.common.action.ActionParametersBase parameters) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = notAllowToRunAction(actionType); if (returnValue != null) { return returnValue; } return runActionImpl(actionType, parameters, false, null); }

protected void initAppsTable() { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, true); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String> appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String>() { @java.lang.Override public java.lang.String getValue(java.lang.String appName) { return appName; } }; appsTable.addColumn(appNameColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterEntityInfoPanel.constants.nameSnapshot()); appsTable.setRowData(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); appsTable.setWidth("100%", true); appsTable.setSelectionModel(new com.google.gwt.view.client.NoSelectionModel()); }



private void initAppsTable() { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, true); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String> appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String>() { @java.lang.Override public java.lang.String getValue(java.lang.String appName) { return appName; } }; appsTable.addColumn(appNameColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotInfoPanel.constants.nameSnapshot()); appsTable.setRowData(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); appsTable.setWidth("100%", true); appsTable.setSelectionModel(new com.google.gwt.view.client.NoSelectionModel()); }

public void switchTab(org.gwtbootstrap3.client.ui.TabListItem tabItem) { boolean found = false; for (int i = 0; i < (navTabs.getWidgetCount()); i++) { if (tabItem.getText().equals(((org.gwtbootstrap3.client.ui.TabListItem) (navTabs.getWidget(i))).getText())) { ((org.gwtbootstrap3.client.ui.TabListItem) (navTabs.getWidget(i))).showTab(); org.gwtbootstrap3.client.ui.TabPane tabPane = ((org.gwtbootstrap3.client.ui.TabPane) (tabContent.getWidget(i))); ((com.google.gwt.user.client.ui.FlowPanel) (tabPane.getWidget(0))).insert(tabHeaderContainer, 0); tabPane.getWidget(0).setHeight(height); tabPane.setActive(true); activeTab = ((org.gwtbootstrap3.client.ui.TabListItem) (navTabs.getWidget(i))); found = true; } else { org.gwtbootstrap3.client.ui.TabPane tabPane = ((org.gwtbootstrap3.client.ui.TabPane) (tabContent.getWidget(i))); ((com.google.gwt.user.client.ui.FlowPanel) (tabPane.getWidget(0))).remove(tabHeaderContainer); tabPane.setActive(false); } } if ((!found) && ((navTabs.getWidgetCount()) > 0)) { ((org.gwtbootstrap3.client.ui.TabListItem) (navTabs.getWidget(0))).showTab(); org.gwtbootstrap3.client.ui.TabPane tabPane = ((org.gwtbootstrap3.client.ui.TabPane) (tabContent.getWidget(0))); ((com.google.gwt.user.client.ui.FlowPanel) (tabPane.getWidget(0))).insert(tabHeaderContainer, 0); tabPane.setActive(true); } }
private void initNetworksTable() { networksTable.enableColumnResizing(); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network> nameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.Network network) { return network.getName(); } }; networksTable.addColumn(nameColumn, org.ovirt.engine.ui.common.widget.uicommon.popup.pool.IscsiBondPopupWidget.constants.name(), "40%"); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network> descriptionColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.Network network) { return network.getDescription(); } }; networksTable.addColumn(descriptionColumn, org.ovirt.engine.ui.common.widget.uicommon.popup.pool.IscsiBondPopupWidget.constants.description(), "60%"); networksTable.setWidth("100%", true); }
public void enableColumnResizing() { if (isTableHeaderVisible()) { table.enableColumnResizing(); tableHeader.enableColumnResizing(); } }
void updateListHeader(org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel model) { java.lang.String width = "100px"; listHeader = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, ((com.google.gwt.user.cellview.client.CellTable.Resources) (com.google.gwt.core.client.GWT.create(org.ovirt.engine.ui.common.PopupSimpleTableResources.class))), true); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.elementName(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.storageDomainDisk(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.currentQuota(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.quotaDisk(), width); listHeader.setRowData(new java.util.ArrayList()); listHeader.setWidth("100%", true); listHeaderPanel.setWidget(listHeader); }
private static java.util.List<org.ovirt.engine.api.model.BaseResource> getInlineResources(java.lang.Object obj) { java.util.ArrayList<org.ovirt.engine.api.model.BaseResource> ret = new java.util.ArrayList<>(); for (java.lang.reflect.Method method : org.ovirt.engine.api.restapi.util.LinkHelper.getRelevantMethods(obj.getClass())) { java.lang.Object inline = null; try { inline = method.invoke(obj); } catch (java.lang.Exception e) { } if (inline != null) { if (inline instanceof org.ovirt.engine.api.model.BaseResource) { ret.add(((org.ovirt.engine.api.model.BaseResource) (inline))); } else { ret.addAll(org.ovirt.engine.api.restapi.util.LinkHelper.getInlineResources(inline)); } } } return ret; }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public <T> T getValue(org.ovirt.engine.core.common.config.ConfigValues name, java.lang.String version) { T returnValue; java.util.Map<java.lang.String, java.lang.Object> values = org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.get(name.toString()); if ((values != null) && (values.containsKey(version))) { returnValue = ((T) (values.get(version))); } else { org.ovirt.engine.core.common.businessentities.VdcOption option = new org.ovirt.engine.core.common.businessentities.VdcOption(); option.setOptionName(name.toString()); option.setOptionValue(null); returnValue = ((T) (getValue(option))); if (values != null) { values.put(version, returnValue); } else { java.util.Map<java.lang.String, java.lang.Object> defaultValues = new java.util.HashMap<>(); defaultValues.put(version, returnValue); org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.put(option.getOptionName(), defaultValues); org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.log.debug("Adding new value to configuration cache."); } org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.log.debug("Didn't find the value of '{}' in DB for version '{}' - using default: '{}'", name, version, returnValue); } return returnValue; }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getQueryReturnValue().setReturnValue(diskDao.get(org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getUserID(), org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getParameters().isFiltered())); }




@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = storageDomainDao.get(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); if (storageDomain.getStorageType().isCinderDomain()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = diskImageDao.getAllForStorageDomain(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getQueryReturnValue().setReturnValue(diskImages); } else { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = diskImageDao.getAllSnapshotsForStorageDomain(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImagesMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages) { if (diskImage.getActive()) { diskImage.getSnapshots().add(org.ovirt.engine.core.common.businessentities.storage.DiskImage.copyOf(diskImage)); diskImagesMap.put(diskImage.getId(), diskImage); } } for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages) { if (!(diskImage.getActive())) { org.ovirt.engine.core.common.businessentities.storage.DiskImage activeImage = diskImagesMap.get(diskImage.getId()); if (activeImage != null) { activeImage.getSnapshots().add(diskImage); } } } org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getQueryReturnValue().setReturnValue(new java.util.ArrayList(diskImagesMap.values())); } }
@java.lang.Override public org.ovirt.engine.api.model.Disks list() { if (isFiltered()) { return mapCollection(getBackendCollection(QueryType.GetAllDisks, new org.ovirt.engine.core.common.queries.QueryParametersBase())); } else { return mapCollection(getBackendCollection(SearchType.Disk)); } }

private void activateDataCenter() { org.ovirt.engine.core.common.businessentities.StorageDomain masterDomain = storageDomainDao.getStorageDomains(org.ovirt.engine.core.bll.storage.FenceVdsManualyCommand.getStoragePool().getId(), StorageDomainType.Master).stream().findFirst().orElse(null); org.ovirt.engine.core.bll.storage.FenceVdsManualyCommand.calcStoragePoolStatusByDomainsStatus(); if (((masterDomain != null) && ((masterDomain.getStatus()) != null)) && ((((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)) || ((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Unknown))) || ((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Inactive)))) { resetIrs(); } }
public void refresh() { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.clear(); java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list = org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.getVdcOptionDao().getAll(); for (org.ovirt.engine.core.common.businessentities.VdcOption option : list) { try { if (((!(org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.containsKey(option.getOptionName()))) || (!(org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.get(option.getOptionName()).containsKey(option.getVersion())))) || (org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.isReloadable(option.getOptionName()))) { updateOption(option); } } catch (java.lang.NoSuchFieldException e) { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.log.error("Not refreshing field '{}': does not exist in class {}.", option.getOptionName(), org.ovirt.engine.core.common.config.ConfigValues.class.getSimpleName()); } } }

@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_VDC_LOGOUT : org.ovirt.engine.core.common.AuditLogType.USER_VDC_LOGOUT_FAILED; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.aaa.AuthenticationProfile profile = sessionDataContainer.getProfile(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId()); if (profile == null) { org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.setSucceeded(false); } else { sessionDataContainer.setSessionValid(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId(), false); org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.setSucceeded(true); } }



private void saveDefaultedStorageProperties(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model, org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic) { storageDomainStatic.setWipeAfterDelete(model.getWipeAfterDelete().getEntity()); storageDomainStatic.setDiscardAfterDelete(model.getDiscardAfterDelete().getEntity()); storageDomainStatic.setWarningLowSpaceIndicator(model.getWarningLowSpaceIndicator().getEntity()); storageDomainStatic.setCriticalSpaceActionBlocker(model.getCriticalSpaceActionBlocker().getEntity()); }




public void processResponse(org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse response) { org.codehaus.jackson.JsonNode id = response.getId(); if ((org.codehaus.jackson.node.NullNode.class.isInstance(id)) || (id == null)) { this.tracker.processIssue(response); return; } org.ovirt.vdsm.jsonrpc.client.internal.JsonRpcCall call = this.tracker.removeCall(response.getId()); if (call == null) { this.log.error("Not able to update response for {}", response.getId()); return; } call.addResponse(response); }

@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("Start initializing {}", getClass().getSimpleName()); pollingRate = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AsyncCommandPollingLoopInSeconds); initCommandExecutor(); schedulerUtil.scheduleAFixedDelayJob(this, "invokeCallbackMethods", new java.lang.Class[]{ }, new java.lang.Object[]{ }, pollingRate, pollingRate, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("Finished initializing {}", getClass().getSimpleName()); }
@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); when(providerDao.get(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); when(providerProxyFactory.create(provider)).thenReturn(networkProviderProxy); }
public boolean isGraphicsAndDisplaySupported(int osId, java.util.Collection<org.ovirt.engine.core.common.businessentities.GraphicsType> graphics, org.ovirt.engine.core.common.businessentities.DisplayType displayType, java.util.List<java.lang.String> reasons, org.ovirt.engine.core.compat.Version clusterVersion) { boolean result = org.ovirt.engine.core.bll.validator.VmValidationUtils.isGraphicsAndDisplaySupported(osId, clusterVersion, graphics, displayType); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_VM_DISPLAY_TYPE_IS_NOT_SUPPORTED_BY_OS.name()); } return result; }
public boolean isOsTypeSupportedForVirtioScsi(int osId, org.ovirt.engine.core.compat.Version clusterVersion, java.util.List<java.lang.String> reasons) { boolean result = org.ovirt.engine.core.bll.validator.VmValidationUtils.isDiskInterfaceSupportedByOs(osId, clusterVersion, DiskInterface.VirtIO_SCSI); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI.name()); } return result; }
public static java.util.Set<org.ovirt.engine.core.compat.Guid> fetchVmDisks(org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument) { java.util.Set<org.ovirt.engine.core.compat.Guid> disksIds = new java.util.HashSet<>(); XmlNode references = xmlDocument.selectSingleNode("//*/References"); for (XmlNode file : references.selectNodes("File")) { disksIds.add(org.ovirt.engine.core.compat.Guid.createGuidFromString(file.attributes.get("ovf:href").getValue().substring(0, org.ovirt.engine.core.utils.OvfUtils.GUID_LENGTH))); } return disksIds; }
public boolean isOsTypeSupported(int osId, org.ovirt.engine.core.common.businessentities.ArchitectureType architectureType, java.util.List<java.lang.String> reasons) { boolean result = org.ovirt.engine.core.bll.validator.VmValidationUtils.isOsTypeSupported(osId, architectureType); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_IS_NOT_SUPPORTED_BY_ARCHITECTURE_TYPE.toString()); } return result; }
@java.lang.Override public void onLoad() { super.onLoad(); int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getLoadingIndicator()) != null) ? org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.LOADING_HEIGHT : org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.NO_ITEMS_HEIGHT; if (rowCount > 0) { height = rowCount * (org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.ROW_HEIGHT); } updateGridSize(height); }

private void resizeGridToContentHeight(int height) { int top = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getAbsoluteTop(); int maxGridHeight = ((com.google.gwt.user.client.Window.getClientHeight()) - top) - (org.ovirt.engine.ui.common.widget.table.ActionCellTable.GRID_SUBTRACT); int contentHeight = determineBrowserHeightAdjustment(height); if (contentHeight > maxGridHeight) { contentHeight = maxGridHeight; } if (contentHeight > 0) { super.setHeight((contentHeight + (Unit.PX.getType()))); } org.ovirt.engine.ui.common.widget.table.ActionCellTable.redraw(); }
public void updateGridSize() { int rowCount = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.table.ActionCellTable.getLoadingIndicator()) != null) ? org.ovirt.engine.ui.common.widget.table.ActionCellTable.LOADING_HEIGHT : org.ovirt.engine.ui.common.widget.table.ActionCellTable.NO_ITEMS_HEIGHT; if (rowCount > 0) { height = rowCount * (org.ovirt.engine.ui.common.widget.table.ActionCellTable.ROW_HEIGHT); } updateGridSize(height); }




@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.OneMapReturn get_image_transfer_session_stats(java.lang.String ticketId) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.get_image_transfer_session_stats").withParameter("ticketUUID", ticketId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("statsMap"); return new org.ovirt.engine.core.vdsbroker.vdsbroker.OneMapReturn(response); }

@java.lang.Override public void cleaningCompensationDataAfterSuccess() { macPool.freeMacs(macsToReleaseOnCommit); }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { macPool.freeMacs(macs); }


@java.lang.Override public void setItems(java.util.Collection value) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots = (value != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.Snapshot>cast(value) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot>(); java.util.Collections.sort(snapshots, java.util.Collections.reverseOrder(new org.ovirt.engine.ui.uicommonweb.Linq.SnapshotByCreationDateCommparer())); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot> sortedSnapshots = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = snapshotsMap.get(snapshot.getId()); if (snapshotModel == null) { snapshotModel = new org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel(); snapshotsMap.put(snapshot.getId(), snapshotModel); } snapshotModel.setEntity(snapshot); if ((((snapshot.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE)) && ((getInType(SnapshotType.PREVIEW, snapshots)) == null)) || ((snapshot.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.PREVIEW))) { sortedSnapshots.add(0, snapshot); } else if (((snapshot.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.REGULAR)) || ((snapshot.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.STATELESS))) { sortedSnapshots.add(snapshot); } } if ((getInPreview(sortedSnapshots)) != null) { updatePreviewedDiskSnapshots(sortedSnapshots); } else { updateItems(sortedSnapshots); } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.VmType.class, to = org.ovirt.engine.api.model.VmType.class) public static org.ovirt.engine.api.model.VmType map(org.ovirt.engine.core.common.businessentities.VmType type, org.ovirt.engine.api.model.VmType incoming) { switch (type) { case Desktop : return org.ovirt.engine.api.model.VmType.DESKTOP; case Server : return org.ovirt.engine.api.model.VmType.SERVER; default : return null; } }

@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.VmType.class, to = org.ovirt.engine.api.model.VmType.class) public static org.ovirt.engine.api.model.VmType map(org.ovirt.engine.core.common.businessentities.VmType type, org.ovirt.engine.api.model.VmType incoming) { switch (type) { case Desktop : return org.ovirt.engine.api.model.VmType.DESKTOP; case Server : return org.ovirt.engine.api.model.VmType.SERVER; default : return null; } }

@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getVmtGuid())) { return failValidation(EngineMessage.VM_POOL_CANNOT_CREATE_FROM_BLANK_TEMPLATE); } if (((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getVmType()) == (org.ovirt.engine.core.common.businessentities.VmType.HighPerformance)) && (!(org.ovirt.engine.core.common.FeatureSupported.isHighPerformanceTypeSupported(org.ovirt.engine.core.bll.AddVmPoolCommand.getEffectiveCompatibilityVersion())))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_HIGH_PERFORMANCE_IS_NOT_SUPPORTED, java.lang.String.format("$Version %s", org.ovirt.engine.core.bll.AddVmPoolCommand.getEffectiveCompatibilityVersion())); } if (((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmLargeIcon()) != null) && (!(validate(org.ovirt.engine.core.bll.validator.IconValidator.validate(IconValidator.DimensionsType.LARGE_CUSTOM_ICON, org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmLargeIcon()))))) { return false; } return true; }
@java.lang.Override protected boolean validate() { if ((((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getId()) == null)) { return failValidation(EngineMessage.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } return super.validate(); }
@java.lang.Override protected void executeCommand() { runInternalAction(ActionType.CreateImagePlaceholder, buildCreateImagePlacerholderParams(), createStepsContext(StepEnum.CLONE_IMAGE_STRUCTURE)); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.setSucceeded(true); }

@java.lang.Override public javax.ws.rs.core.Response move(org.ovirt.engine.api.model.Action action) { validateParameters(action, "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid storageDomainId = getStorageDomainId(action); org.ovirt.engine.api.model.Disk disk = get(); org.ovirt.engine.core.compat.Guid imageId = getDiskImageId(disk.getImageId()); org.ovirt.engine.core.compat.Guid sourceStorageDomainId = getSourceStorageDomainId(disk); org.ovirt.engine.core.common.action.MoveDiskParameters innerParams = new org.ovirt.engine.core.common.action.MoveDiskParameters(imageId, sourceStorageDomainId, storageDomainId); innerParams.setImageGroupID(asGuid(disk.getId())); org.ovirt.engine.core.common.action.MoveDisksParameters params = new org.ovirt.engine.core.common.action.MoveDisksParameters(java.util.Collections.singletonList(innerParams)); return doAction(ActionType.MoveDisks, params, action); }
protected void updateParameters() { java.util.Map<org.ovirt.engine.core.common.businessentities.VM, java.util.List<org.ovirt.engine.core.common.action.MoveDiskParameters>> vmDiskParamsMap = createVmDiskParamsMap(); for (java.util.Map.Entry<org.ovirt.engine.core.common.businessentities.VM, java.util.List<org.ovirt.engine.core.common.action.MoveDiskParameters>> vmDiskParamsEntry : vmDiskParamsMap.entrySet()) { org.ovirt.engine.core.common.businessentities.VM vm = vmDiskParamsEntry.getKey(); java.util.List<org.ovirt.engine.core.common.action.MoveDiskParameters> moveDiskParamsList = vmDiskParamsEntry.getValue(); if (((vm == null) || (vm.isDown())) || (areAllDisksPluggedToVm(moveDiskParamsList, false))) { moveDiskParametersList.addAll(moveDiskParamsList); } else if (vm.isRunningAndQualifyForDisksMigration()) { if (!(areAllDisksPluggedToVm(moveDiskParamsList, true))) { addDisksDeactivatedMessage(moveDiskParamsList); continue; } liveMigrateVmDisksParametersList.add(createLiveMigrateVmDisksParameters(moveDiskParamsList, vm.getId())); } else { addInvalidVmStateMessage(vm); } } }
@org.junit.Test public void testMoveById() throws java.lang.Exception { setUpEntityQueryExpectations(QueryType.GetDiskByDiskId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest.DISK_ID }, getEntity(1)); setUriInfo(setUpActionExpectations(ActionType.MoveDisks, org.ovirt.engine.core.common.action.MoveDisksParameters.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, true, true, null, null, true)); verifyActionResponse(resource.move(setUpParams(false)), ("disks/" + (org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest.DISK_ID)), false); }
@java.lang.Override protected void executeCommand() { updateParameters(); if (!(moveDiskParametersList.isEmpty())) { actionReturnValues.addAll(org.ovirt.engine.core.bll.Backend.getInstance().runMultipleActions(ActionType.MoveOrCopyDisk, getParametersList(moveDiskParametersList), false)); } if (!(liveMigrateVmDisksParametersList.isEmpty())) { actionReturnValues.addAll(org.ovirt.engine.core.bll.Backend.getInstance().runMultipleActions(ActionType.LiveMigrateDisk, getParametersList(liveMigrateVmDisksParametersList), false)); } handleChildReturnValue(); org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.setSucceeded(true); }
private void addDisksDeactivatedMessage(java.util.List<org.ovirt.engine.core.common.action.MoveDiskParameters> moveDiskParamsList) { setActionMessageParameters(); addValidationMessageVariable("diskAliases", org.apache.commons.lang.StringUtils.join(getDisksAliases(moveDiskParamsList), ", ")); addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_MOVE_DISKS_MIXED_PLUGGED_STATUS); org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getReturnValue().setValid(false); }
private org.ovirt.engine.core.common.action.LiveMigrateDiskParameters createLiveMigrateDiskParameters(org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters, org.ovirt.engine.core.compat.Guid vmId) { return new org.ovirt.engine.core.common.action.LiveMigrateDiskParameters(moveDiskParameters.getImageId(), moveDiskParameters.getSourceDomainId(), moveDiskParameters.getStorageDomainId(), vmId, moveDiskParameters.getQuotaId(), moveDiskParameters.getDiskProfileId(), diskMap.get(moveDiskParameters.getImageId()).getId()); }







@org.junit.Test public void validateVmMemoryCantStartOnVdsHostTooSmall() { vds.setMemFree(8835L); boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsHostTooSmallButLowOverhead() { vds.setMemFree(8835L); vds.setGuestOverhead(0); boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsHighPendingButSwapHelps() { vds.setSwapFree(80L); boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Before public void prepateTest() { vds = basicHost(); vm = basicVm(); }
@org.junit.Test public void validateVmMemoryCantRunOnVdsSmallHost() { vds.setPhysicalMemMb(5000); boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCanStartOnVds() { boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void validateVmMemoryCanRunOnVdsHighMem() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); vds.setPhysicalMemMb(15000); boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void testBalanceCpuLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_hosts_cpu_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "900"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "512"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit.class, cluster, hosts, vms); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assertNotNull(result); assertNotNull(result.getSecond()); assertEquals(result.getFirst().size(), 1); assertEquals(result.getFirst().get(0), org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnitTest.DESTINATION_HOST); }
@org.junit.Test public void validateVmMemoryCanRunOnVdsHighMemLowOverhead() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); vds.setGuestOverhead((-1200)); boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsVmTooBigButLowOverhead() { vm.setMinAllocatedMem(8865); vm.setVmMemSizeMb(8865); vds.setGuestOverhead(0); boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, true); }
public boolean hasPhysMemoryToRunVM(org.ovirt.engine.core.common.businessentities.VDS curVds, org.ovirt.engine.core.common.businessentities.VM vm, int pendingMemory) { if (((curVds.getMemFree()) != null) && ((curVds.getGuestOverhead()) != null)) { double vmMemRequired = (vm.getMemSizeMb()) + (curVds.getGuestOverhead()); double vdsMemLimit = (curVds.getMemFree()) - pendingMemory; org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("hasPhysMemoryToRunVM: host '{}'; free memory is : {} MB (+ {} MB pending); free swap is: {} MB, required memory is {} MB; Guest overhead {} MB", curVds.getName(), vdsMemLimit, pendingMemory, curVds.getSwapFree(), vmMemRequired, curVds.getGuestOverhead()); if ((curVds.getSwapFree()) != null) { vdsMemLimit += curVds.getSwapFree(); } org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("{} <= ??? {}", vmMemRequired, vdsMemLimit); return vmMemRequired <= vdsMemLimit; } else { return false; } }
public boolean hasOvercommitMemoryToRunVM(org.ovirt.engine.core.common.businessentities.VDS curVds, org.ovirt.engine.core.common.businessentities.VM vm) { double vmMemRequired = (vm.getMemSizeMb()) + (curVds.getGuestOverhead()); double vdsMemLimit = curVds.getMaxSchedulingMemory(); org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("hasOvercommitMemoryToRunVM: host '{}'; max scheduling memory : {} MB; required memory is {} MB; Guest overhead {} MB", curVds.getName(), vdsMemLimit, vmMemRequired, curVds.getGuestOverhead()); org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("{} <= ??? {}", vmMemRequired, vdsMemLimit); return vmMemRequired <= vdsMemLimit; }
@org.junit.Test public void validateVmMemoryCantStartOnVdsBecauseOfPending() { boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsBecauseOfGuestOverhead() { vds.setGuestOverhead(256); boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void testBalanceCpuAndMemoryLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_hosts_cpumem_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "900"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "512"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit.class, cluster, hosts, vms); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assert result == null; }
@org.junit.Test public void validateVmMemoryCantRunOnVdsHighOverhead() { vds.setGuestOverhead(1024); boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsBecauseOfLowGuestOverhead() { vds.setGuestOverhead(0); boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void validateVmMemoryCantRunOnVdsNotEnoughMem() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsVmTooBig() { vm.setMinAllocatedMem(8865); vm.setVmMemSizeMb(8865); boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsHighPendingSwapSmall() { vds.setSwapFree(60L); boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, true); }

private org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getSnapshotType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.StatelessSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm()); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().isSaveMemory()) && (isLiveSnapshotApplicable())) { return new org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getStoragePool(), this); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }
protected boolean initVdss() { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); org.ovirt.engine.core.compat.Guid vdsToRunOn = schedulingManager.schedule(org.ovirt.engine.core.bll.MigrateVmCommand.getCluster(), org.ovirt.engine.core.bll.MigrateVmCommand.getVm(), getVdsBlackList(), getVdsWhiteList(), getDestinationHostList(), new java.util.ArrayList(), new org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker(this), org.ovirt.engine.core.bll.MigrateVmCommand.getCorrelationId()); setDestinationVdsId(vdsToRunOn); if ((vdsToRunOn != null) && (!(Guid.Empty.equals(vdsToRunOn)))) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn); } org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); if ((vdsToRunOn != null) && (vdsToRunOn.equals(Guid.Empty))) { return false; } if (((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } return true; }
@org.junit.Test public void validateVmMemoryCanRunOnVds() { boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, true); }
protected boolean getVdsToRunOn() { org.ovirt.engine.core.compat.Guid vdsToRunOn = schedulingManager.schedule(org.ovirt.engine.core.bll.RunVmCommand.getCluster(), org.ovirt.engine.core.bll.RunVmCommand.getVm(), org.ovirt.engine.core.bll.RunVmCommand.getRunVdssList(), getVdsWhiteList(), getPredefinedVdsIdListToRunOn(), new java.util.ArrayList(), new org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker(this), org.ovirt.engine.core.bll.RunVmCommand.getCorrelationId()); setVdsId(vdsToRunOn); if ((vdsToRunOn != null) && (!(Guid.Empty.equals(vdsToRunOn)))) { org.ovirt.engine.core.bll.RunVmCommand.getRunVdssList().add(vdsToRunOn); } org.ovirt.engine.core.bll.RunVmCommand.setVds(null); org.ovirt.engine.core.bll.RunVmCommand.setVdsName(null); if (org.ovirt.engine.core.bll.RunVmCommand.getVdsId().equals(Guid.Empty)) { org.ovirt.engine.core.bll.RunVmCommand.log.error("Can't find VDS to run the VM '{}' on, so this VM will not be run.", org.ovirt.engine.core.bll.RunVmCommand.getVmId()); return false; } if ((org.ovirt.engine.core.bll.RunVmCommand.getVds()) == null) { org.ovirt.engine.core.common.errors.EngineException outEx = new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.RESOURCE_MANAGER_VDS_NOT_FOUND); org.ovirt.engine.core.bll.RunVmCommand.log.error("VmHandler::{}: {}", getClass().getName(), outEx.getMessage()); return false; } return true; }
@org.junit.Test public void testBalanceNoLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_saving_hosts_no_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_power_saving_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "768"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "128"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit.class, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(org.ovirt.engine.core.common.businessentities.Cluster.class), anyList(), anyList(), anyList(), anyMap()); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assert result == null; }
@org.junit.Test public void testBalanceCpuAndMemLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_saving_hosts_cpumem_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_power_saving_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "768"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "128"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit.class, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(org.ovirt.engine.core.common.businessentities.Cluster.class), anyList(), anyList(), anyList(), anyMap()); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assert result == null; }
@org.junit.Test public void testBalanceMediumLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_saving_hosts_medium_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_power_saving_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "768"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "128"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit.class, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(org.ovirt.engine.core.common.businessentities.Cluster.class), anyList(), anyList(), anyList(), anyMap()); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assert result == null; }
protected int calcEvenDistributionScore(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm, boolean countThreadsAsCores) { int score = (MaxSchedulerWeight) - 1; java.lang.Integer effectiveCpuCores = org.ovirt.engine.core.bll.scheduling.SlaValidator.getEffectiveCpuCores(vds, countThreadsAsCores); if ((effectiveCpuCores != null) && ((vds.getUsageCpuPercent()) != null)) { score = java.lang.Math.min((((int) (java.lang.Math.round(calcDistributeMetric(vds, vm, effectiveCpuCores)))) + 1), org.ovirt.engine.core.bll.scheduling.policyunits.MaxSchedulerWeight); } score -= (vds.getMaxSchedulingMemory()) / 100; return score; }
@org.junit.Test public void testBalanceCpuAndHighMemoryLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_hosts_cpumem_medium_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "900"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "512"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit.class, cluster, hosts, vms); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assert result == null; }
public void updatePendingData(int pendingMemory, int pendingCpuCount) { synchronized(this) { cachedVds.setPendingVcpusCount(pendingCpuCount); cachedVds.setPendingVmemSize(pendingMemory); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.refreshCommitedMemory(cachedVds, getVmDynamicDao().getAllRunningForVds(getVdsId()), resourceManager); updateDynamicData(cachedVds.getDynamicData()); } }
public void setLastVmsList(java.util.List<org.ovirt.engine.core.common.businessentities.VmDynamic> lastVmsList) { this.lastVmsList = lastVmsList; }
@java.lang.Override protected void gatherChangedVms(org.ovirt.engine.core.common.businessentities.VmDynamic dbVm, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, vdsmVm)); if (org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher.log.isDebugEnabled()) { logBuilder.append(java.lang.String.format("%s:%s ", vdsmVm.getVmDynamic().getId().toString().substring(0, 8), vdsmVm.getVmDynamic().getStatus())); } }
public static boolean refreshCommitedMemory(org.ovirt.engine.core.common.businessentities.VDS host, java.util.List<org.ovirt.engine.core.common.businessentities.VmDynamic> vms, org.ovirt.engine.core.vdsbroker.ResourceManager resourceManager) { boolean memoryUpdated = false; int memCommited = host.getGuestOverhead(); int vmsCoresCount = 0; for (org.ovirt.engine.core.common.businessentities.VmDynamic vm : vms) { if (((vm != null) && ((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.WaitForLaunch))) && ((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { memCommited += resourceManager.getVmManager(vm.getId()).getMemSizeMb(); memCommited += host.getGuestOverhead(); vmsCoresCount += resourceManager.getVmManager(vm.getId()).getNumOfCpus(); } } if (memCommited != (host.getMemCommited())) { host.setMemCommited(memCommited); memoryUpdated = true; } if (vmsCoresCount != (host.getVmsCoresCount())) { host.setVmsCoresCount(vmsCoresCount); memoryUpdated = true; } return memoryUpdated; }
private void gatherNonRunningVms(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDynamic> dbVms) { for (org.ovirt.engine.core.common.businessentities.VmDynamic dbVm : dbVms.values()) { if (!(vdsmVms.containsKey(dbVm.getId()))) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, null)); } } }
protected void gatherChangedVms(org.ovirt.engine.core.common.businessentities.VmDynamic dbVm, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm) { if (statusChanged(dbVm, vdsmVm.getVmDynamic())) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vmStats = getResourceManager().runVdsCommand(VDSCommandType.GetVmStats, new org.ovirt.engine.core.common.vdscommands.GetVmStatsVDSCommandParameters(vdsManager.getVdsId(), vdsmVm.getVmDynamic().getId())); if (vmStats.getSucceeded()) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, ((org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm) (vmStats.getReturnValue())))); } else { if (dbVm != null) { org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher.log.error("failed to fetch VM '{}' stats. status remain unchanged ({})", dbVm.getId(), dbVm.getStatus()); } } } }
public java.util.List<org.ovirt.engine.core.common.businessentities.VmDynamic> getLastVmsList() { return lastVmsList; }
@org.junit.Before public void setup() { org.mockito.MockitoAnnotations.initMocks(this); when(dbFacade.getVdsDao()).thenReturn(vdsDao); when(dbFacade.getVmDynamicDao()).thenReturn(vmDynamicDao); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(VmTestPairs.SRC_HOST_ID); when(vdsManager.getCopyVds()).thenReturn(vds); when(vdsManager.getVdsId()).thenReturn(vds.getId()); vmsListFetcher = new org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher(vdsManager, dbFacade, resourceManager); }
private boolean statusChanged(org.ovirt.engine.core.common.businessentities.VmDynamic dbVm, org.ovirt.engine.core.common.businessentities.VmDynamic vdsmVm) { return (dbVm == null) || ((dbVm.getStatus()) != (vdsmVm.getStatus())); }
@org.junit.experimental.theories.Theory public void changedVms(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { stubCalls(data); assertTrue(vmsListFetcher.fetch()); assumeTrue(((data.dbVm()) != null)); assumeTrue(((data.vdsmVm()) != null)); assumeTrue(((data.dbVm().getStatus()) != (data.vdsmVm().getVmDynamic().getStatus()))); assertEquals(1, vmsListFetcher.getChangedVms().size()); assertSame(vmsListFetcher.getChangedVms().get(0).getFirst(), data.dbVm().getDynamicData()); }
protected void filterVms() { for (org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm : vdsmVms.values()) { org.ovirt.engine.core.common.businessentities.VmDynamic dbVm = dbVms.get(vdsmVm.getVmDynamic().getId()); gatherChangedVms(dbVm, vdsmVm); } }
@org.junit.experimental.theories.Theory public void lastVmListNotIncludingExternalVm(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { stubCalls(data); assertTrue(vmsListFetcher.fetch()); assumeTrue(((data.vdsmVm()) != null)); assumeTrue(((data.dbVm()) != null)); verify(vdsManager).setLastVmsList(vdsManagerArgumentCaptor.capture()); assertEquals(data.vdsmVm().getVmDynamic(), vdsManagerArgumentCaptor.getValue().get(0)); }
private void saveLastVmsList(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> vdsmVms) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDynamic> vms = new java.util.ArrayList(vdsmVms.size()); for (org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vmInternalData : this.vdsmVms.values()) { if (dbVms.containsKey(vmInternalData.getVmDynamic().getId())) { vms.add(vmInternalData.getVmDynamic()); } } vdsManager.setLastVmsList(vms); }
public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmDynamic, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm>> getChangedVms() { return changedVms; }
protected void onFetchVms() { dbVms = getVmDynamicDao().getAllRunningForVds(vdsManager.getVdsId()).stream().collect(java.util.stream.Collectors.toMap(VmDynamic::getId, java.util.function.Function.identity())); changedVms = new java.util.ArrayList(); filterVms(); gatherNonRunningVms(dbVms); saveLastVmsList(vdsmVms); }
public org.ovirt.engine.core.dao.VmDynamicDao getVmDynamicDao() { return dbFacade.getVmDynamicDao(); }
private void stubCalls(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { when(resourceManager.runVdsCommand(eq(VDSCommandType.List), any(org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase.class))).thenReturn(getVdsReturnValue(data.vdsmVm())); if ((data.dbVm()) != null) { when(vmDynamicDao.getAllRunningForVds(VmTestPairs.SRC_HOST_ID)).thenReturn(java.util.Collections.singletonList(data.dbVm().getDynamicData())); } if ((data.vdsmVm()) != null) { when(resourceManager.runVdsCommand(eq(VDSCommandType.GetVmStats), any(org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase.class))).thenReturn(getStatsReturnValue(data.vdsmVm())); } }








private void readCpuItem(org.ovirt.engine.core.utils.ovf.xml.XmlNode node) { vmBase.setNumOfSockets(java.lang.Integer.parseInt(selectSingleNode(node, "rasd:num_of_sockets", _xmlNS).innerText)); vmBase.setCpuPerSocket(java.lang.Integer.parseInt(selectSingleNode(node, "rasd:cpu_per_socket", _xmlNS).innerText)); vmBase.setThreadsPerCpu(parseNodeInteger(node, "rasd:threads_per_cpu", 1)); }
@java.lang.Override protected void executeCommand() { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_VM_NAME, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_MEMORY_SIZE_MB, java.lang.String.valueOf(getUnpluggedDeviceSize())); addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_DEVICE_ID, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getDeviceId().toString()); final org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.HotUnplugMemory, new org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.Params(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getRunOnVds(), getDeviceToHotUnplug())); if (!(vdsReturnValue.getSucceeded())) { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_ERROR_MESSAGE, vdsReturnValue.getVdsError().getMessage()); setReturnValueFailure(vdsReturnValue); return; } if (((org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMemSizeMb()) - (getUnpluggedDeviceSize())) >= (org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMinAllocatedMem())) { updateVm(); } org.ovirt.engine.core.bll.HotUnplugMemoryCommand.setSucceeded(true); }
@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getBroker().hotUnplugMemory(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createHotplugMemoryParamsMap(org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getParameters().getMemoryDeviceToUnplug(), true)); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.setVdsRuntimeErrorAndReport(e); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getVDSReturnValue().setExceptionString(null); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.SetAmountOfMemory, new org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.Params(org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getId(), createMemoryDevice())); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.setSucceeded(true); } else { org.ovirt.engine.core.common.errors.EngineFault fault = new org.ovirt.engine.core.common.errors.EngineFault(); fault.setError(vdsReturnValue.getVdsError().getCode()); fault.setMessage(vdsReturnValue.getVdsError().getMessage()); org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getReturnValue().setFault(fault); } }
public static java.util.Map<java.lang.String, java.lang.Object> createHotplugMemoryParamsMap(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, boolean copyAlias) { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); data.put("vmId", vmDevice.getVmId().toString()); data.put("memory", org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createVmMemoryDeviceMap(vmDevice, copyAlias)); return data; }


@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(cluster().name()); or(mandatory(cluster().dataCenter().id()), mandatory(cluster().dataCenter().name())); optional(cluster().version().major()); optional(cluster().version().minor()); optional(cluster().cpu().type()); optional(cluster().ballooningEnabled()); optional(cluster().comment()); optional(cluster().cpu().architecture()); optional(cluster().description()); optional(cluster().display().proxy()); optional(cluster().errorHandling().onError()); optional(cluster().fencingPolicy().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().threshold()); optional(cluster().fencingPolicy().skipIfSdActive().enabled()); optional(cluster().glusterService()); optional(cluster().haReservation()); optional(cluster().ksm().enabled()); optional(cluster().ksm().mergeAcrossNodes()); optional(cluster().maintenanceReasonRequired()); optional(cluster().memoryPolicy().overCommit().percent()); optional(cluster().memoryPolicy().transparentHugePages().enabled()); optional(cluster().threadsAsCores()); optional(cluster().trustedService()); optional(cluster().tunnelMigration()); optional(cluster().virtService()); or(optional(cluster().managementNetwork().id()), optional(cluster().managementNetwork().name())); or(optional(cluster().schedulingPolicy().id()), optional(cluster().schedulingPolicy().name())); }

protected void syncChildCommandList(org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters) { java.util.List<org.ovirt.engine.core.compat.Guid> childCommandIds = commandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommandBase.getCommandId()); if ((childCommandIds.size()) != (parameters.getChildCommands().size())) { for (org.ovirt.engine.core.compat.Guid id : childCommandIds) { if (!(parameters.getChildCommands().containsValue(id))) { parameters.getChildCommands().put(parameters.getCommandStep(), id); break; } } } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getImageGroupId())); java.util.List<org.ovirt.engine.core.compat.Guid> failedGuids = getFailedVolumeIds(); if (failedGuids.isEmpty()) { log.info("Requested images were successfully removed"); org.ovirt.engine.core.bll.DestroyImageCheckCommand.setSucceeded(true); persistCommand(org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getParentCommand()); } else { log.error("The following images were not removed: {}", failedGuids); } }
private void logException(java.lang.RuntimeException ex) { if (((ex.getMessage()) == null) || (!(ex.getMessage().contains("Policy reset")))) { log.error("Command '{}' execution failed: {}", this, ex.getMessage()); log.debug("Exception", ex); } }

@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.HostDevice entity) { return createIdParameterMapper(entity.getId()).addValue("parent_device_name", entity.getParentDeviceName()).addValue("capability", entity.getCapability()).addValue("iommu_group", entity.getIommuGroup()).addValue("product_name", entity.getProductName()).addValue("product_id", entity.getProductId()).addValue("vendor_name", entity.getVendorName()).addValue("vendor_id", entity.getVendorId()).addValue("physfn", entity.getParentPhysicalFunction()).addValue("total_vfs", entity.getTotalVirtualFunctions()).addValue("net_iface_name", entity.getNetworkInterfaceName()).addValue("driver", entity.getDriver()).addValue("is_assignable", entity.isAssignable()).addValue("address", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(entity.getAddress())); }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.setExecutorService(engineThreadPool); }
protected void markImagesIllegalIfNotInDb(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.compat.Guid snapshotId) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesInDb = diskImageDao.getAllSnapshotsForVmSnapshot(snapshotId); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesInDbMap = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDiskImagesByIdMap(imagesInDb); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage fromConfigImg : vm.getImages()) { if (((fromConfigImg.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) && (!(imagesInDbMap.containsKey(fromConfigImg.getImageId())))) { org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper.log.debug("Image '{}' of Disk '{}' cannot be found in database. This image will be returned as ILLEGAL from the query", fromConfigImg.getImageId(), fromConfigImg.getId()); fromConfigImg.setImageStatus(ImageStatus.ILLEGAL); } else { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInDb = imagesInDbMap.get(fromConfigImg.getImageId()); fromConfigImg.setImageStatus(imageInDb.getImageStatus()); } } }
private org.ovirt.engine.core.common.AuditLogType attemptToAttachDisksToImportedVm(java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { java.util.List<java.lang.String> failedDisks = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = disk.getDiskVmElements().iterator().next(); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(disk.getId(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVm().getId()), dve.isPlugged()); org.ovirt.engine.core.common.action.ActionReturnValue returnVal = runInternalAction(ActionType.AttachDiskToVm, params, org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.cloneContextAndDetachFromParent()); if (!(returnVal.getSucceeded())) { failedDisks.add(disk.getDiskAlias()); } } if (!(failedDisks.isEmpty())) { this.addCustomValue("DiskAliases", org.apache.commons.lang.StringUtils.join(failedDisks, ",")); return org.ovirt.engine.core.common.AuditLogType.VM_IMPORT_FROM_CONFIGURATION_ATTACH_DISKS_FAILED; } return org.ovirt.engine.core.common.AuditLogType.VM_IMPORT_FROM_CONFIGURATION_EXECUTED_SUCCESSFULLY; }
private java.util.Set<org.ovirt.engine.core.compat.Guid> mapDisks(org.ovirt.engine.api.model.DiskAttachments diskAttachments) { java.util.Set<org.ovirt.engine.core.compat.Guid> diskIds = null; if (diskAttachments.isSetDiskAttachments()) { diskIds = diskAttachments.getDiskAttachments().stream().map(DiskAttachment::getDisk).filter(java.util.Objects::nonNull).map(( d) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (org.ovirt.engine.api.restapi.types.DiskMapper.map(d, null)))).map(BaseDisk::getId).collect(java.util.stream.Collectors.toSet()); } return diskIds; }


private void onUpgrade() { if ((getProgress()) != null) { return; } org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(host.getId()); invokeHostUpgrade(params); }
@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { java.util.Collection<java.lang.String> packages = org.ovirt.engine.core.bll.host.HostUpgradeManager.getPackagesForCheckUpdate(host.getVdsType(), host.getClusterCompatibilityVersion()); try (final org.ovirt.engine.core.bll.hostdeploy.VdsDeploy hostPackagesManager = createPackagesManager(host, true)) { hostPackagesManager.addUnit(new org.ovirt.engine.core.bll.hostdeploy.VdsDeployPackagesUnit(packages, false)); hostPackagesManager.execute(); } catch (final java.lang.Exception e) { org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error("Failed to update host '{}' packages '{}': {}", host.getName(), org.apache.commons.lang.StringUtils.join(packages, ", "), e.getMessage()); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.debug("Exception", e); throw new java.lang.RuntimeException(e); } }


@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(cluster().id()), mandatory(cluster().name())); optional(clone()); optional(exclusive()); optional(template().name()); }

protected boolean validateOpenstackNetworkProviderProperties(org.ovirt.engine.core.compat.Guid providerId, java.lang.String networkMappings) { org.ovirt.engine.core.bll.provider.NetworkProviderValidator validator = new org.ovirt.engine.core.bll.provider.NetworkProviderValidator(providerDao.get(providerId)); return (((validate(validator.providerIsSet())) && (validate(validator.providerTypeIsOpenstack()))) && (validate(validator.networkMappingsProvided(networkMappings)))) && (validate(validator.messagingBrokerProvided())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface) { return (hostInterface.getTxTotal()) != null ? java.lang.String.valueOf(hostInterface.getTxTotal()) : org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.constants.notAvailableLabel(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface) { return (hostInterface.getRxTotal()) != null ? java.lang.String.valueOf(hostInterface.getRxTotal()) : org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.constants.notAvailableLabel(); }
@java.lang.Override public javax.ws.rs.core.Response upgrade(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(guid); if (action.isSetImage()) { params.setoVirtIsoFile(action.getImage()); } return doAction(ActionType.UpgradeHost, params, action); }
private org.ovirt.engine.core.common.businessentities.VM readVmFromOvf(java.lang.String ovf) { try { return ovfHelper.readVmFromOvf(ovf); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { org.ovirt.engine.core.bll.exportimport.ConvertVmCommand.log.debug(("failed to parse a given ovf configuration: \n " + ovf), e); auditLog(this, AuditLogType.IMPORTEXPORT_INVALID_OVF); throw new org.ovirt.engine.core.common.errors.EngineException(); } }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.VM); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { org.ovirt.engine.core.common.businessentities.VM vm = ovfHelper.readVmFromOvf(ovf.getOvfData()); vm.setClusterCompatibilityVersion(ovf.getLowestCompVersion()); vm.setClusterArch(ovf.getArchitecture()); vmList.add(vm); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("failed to parse a given ovf configuration: \n" + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setReturnValue(vmList); }
@java.lang.Override protected void executeQueryCommand() { if (ConfigurationType.OVF.equals(org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getConfigurationType())) { try { org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setReturnValue(ovfHelper.readVmFromOvf(org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getVmConfiguration())); org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setSucceeded(true); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("failed to parse a given ovf configuration: \n" + (org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getVmConfiguration())), e); org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); } } }
public org.ovirt.engine.core.common.businessentities.VmTemplate readVmTemplateFromOvf(java.lang.String ovf) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = new java.util.ArrayList<>(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate(); ovfManager.importTemplate(ovf, template, diskImages, interfaces); template.setInterfaces(interfaces); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : diskImages) { template.getDiskTemplateMap().put(disk.getId(), disk); } return template; }
public java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> getVmConfigurationInStatelessSnapshotOfVm(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = snapshotDao.get(vmId, SnapshotType.STATELESS); if (snapshot == null) { return java.util.Optional.empty(); } try { return java.util.Optional.of(ovfHelper.readVmFromOvf(snapshot.getVmConfiguration())); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { throw new java.lang.RuntimeException(e); } }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.TEMPLATE); java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> vmTemplates = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { vmTemplates.add(ovfHelper.readVmTemplateFromOvf(ovf.getOvfData())); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("failed to parse a given ovf configuration: \n" + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setReturnValue(vmTemplates); }
@java.lang.Override protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> buildFromOVFs(java.util.List<java.lang.String> ovfList) { java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> templateDisksMap = new java.util.HashMap<>(); for (java.lang.String ovf : ovfList) { try { if (ovfHelper.isOvfTemplate(ovf)) { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = ovfHelper.readVmTemplateFromOvf(ovf); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDisks = new java.util.ArrayList(vmTemplate.getDiskTemplateMap().values()); templateDisksMap.put(vmTemplate, templateDisks); } } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException ex) { auditLogOvfLoadError(ex.getName(), ex.getMessage()); } } return templateDisksMap; }
private boolean validateMemoryTakenInSupportedVersion() { org.ovirt.engine.core.common.businessentities.VM vmFromSnapshot = null; try { vmFromSnapshot = ovfHelper.readVmFromOvf(getDstSnapshot().getVmConfiguration()); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.error("Failed to parse a given ovf configuration: {}", e.getMessage()); return false; } org.ovirt.engine.core.compat.Version originalClusterVersion = vmFromSnapshot.getClusterCompatibilityVersionOrigin(); if (org.ovirt.engine.core.compat.Version.getLowest().greater(originalClusterVersion)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_MEMORY_TOO_OLD, java.lang.String.format("$Cv %s", (originalClusterVersion != null ? originalClusterVersion : "N/A"))); } return true; }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VM> buildFromOVFs(java.util.List<java.lang.String> ovfList) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<>(); for (java.lang.String ovf : ovfList) { try { if (!(ovfHelper.isOvfTemplate(ovf))) { vms.add(ovfHelper.readVmFromOvf(ovf)); } } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException ex) { auditLogOvfLoadError(ex.getName(), ex.getMessage()); } } return vms; }
private void removeDiskImages() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getVm().getDiskMap().values(), org.ovirt.engine.core.bll.exportimport.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.exportimport.ONLY_ACTIVE); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images) { image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); image.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); } removeVmImages(images); }
private void removeMemoryImages() { org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.bll.memory.MemoryImageRemoverFromExportDomain(getVm(), this, org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId())).remove(); }




@java.lang.Override public javax.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); params.setContainerId(guid); params.setStorageDomainId(parent.getStorageDomainId()); params.setClusterId(getClusterId(action)); params.setImagesExistOnTargetStorageDomain(true); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmTemplateFromConfiguration, params, action); }

public java.util.Map<java.lang.String, java.lang.Object> getDomainMap() { return domainMap; }


public void setClusterMap(java.util.Map<java.lang.String, java.lang.Object> clusterMap) { this.clusterMap = clusterMap; }

public java.util.Map<java.lang.String, java.lang.Object> getClusterMap() { return clusterMap; }

public void setDomainMap(java.util.Map<java.lang.String, java.lang.Object> domainMap) { this.domainMap = domainMap; }









@java.lang.Override public javax.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); validateVnicMappings(action); org.ovirt.engine.core.common.action.ImportVmFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmFromConfParameters(getVnicProfileMappings(action), getReassignBadMacs(action)); org.ovirt.engine.api.restapi.types.ExternalRegistrationConfigurationMapper.mapFromModel(action.getRegistrationConfiguration(), params); params.setContainerId(guid); params.setStorageDomainId(parent.getStorageDomainId()); params.setClusterId(getClusterId(action)); params.setImagesExistOnTargetStorageDomain(true); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmFromConfiguration, params, action); }








private void writeCpuTune() { writer.writeStartElement("cputune"); @java.lang.SuppressWarnings("unchecked") java.util.Map<java.lang.String, java.lang.Object> cpuPinning = ((java.util.Map<java.lang.String, java.lang.Object>) (createInfo.get(VdsProperties.cpuPinning))); if (cpuPinning != null) { cpuPinning.forEach(( vcpu, cpuset) -> { writer.writeStartElement("vcpupin"); writer.writeAttributeString("vcpu", vcpu); writer.writeAttributeString("cpuset", ((java.lang.String) (cpuset))); writer.writeEndElement(); }); } if ((vm.getCpuShares()) > 0) { writer.writeElement("shares", java.lang.String.valueOf(vm.getCpuShares())); } writer.writeEndElement(); }
@java.lang.Override public void search() { if ((getEntity()) != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmsRunningOnOrMigratingToVds(new org.ovirt.engine.ui.uicommonweb.models.hosts.SetRawItemsAsyncQuery(), getEntity().getId()); } else { setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>()); } startGridTimer(); }
private void cancel() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = windowModel.getCurrentProxies(); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> items = currentModels.getItems(); currentModels.setItems(null); items.remove(this); currentModels.setItems(items); setWindow(null); }


private com.google.gwt.user.client.ui.Widget getRadioGroupPanel() { buttonToType = new java.util.LinkedHashMap(); org.gwtbootstrap3.client.ui.RadioButton allButton = new org.gwtbootstrap3.client.ui.RadioButton(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.BUTTON_GROUP_NAME); buttonToType.put(allButton, null); allButton.setText(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.constants.allDisksLabel()); for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { org.gwtbootstrap3.client.ui.RadioButton button = new org.gwtbootstrap3.client.ui.RadioButton(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.BUTTON_GROUP_NAME); buttonToType.put(button, contentType); } org.gwtbootstrap3.client.ui.ButtonGroup buttonGroup = new org.gwtbootstrap3.client.ui.ButtonGroup(); buttonGroup.setDataToggle(Toggle.BUTTONS); buttonToType.entrySet().forEach(( e) -> { buttonGroup.add(e.getKey()); e.getKey().addClickHandler(( event) -> fireChangeHandlers(e.getValue())); }); setDiskContentType(null); localize(); buttonGroup.addStyleName("disk-type-buttons-group"); return buttonGroup; }
private void addVmsStatus(java.util.List<org.ovirt.engine.core.compat.Guid> vmAndTemplatesIds, java.util.Map<java.lang.String, java.lang.Object> data) { java.util.Map<java.lang.String, java.lang.Object> vmsStatus = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid vmId : vmAndTemplatesIds) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vmDynamicDao.get(vmId); if ((vmDynamic.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { vmsStatus.put(vmId.toString(), vmDynamic.getStatus().getValue()); log.debug("OVF_STORE - Add vm id '{}' with status: '{}'", vmId, vmDynamic.getStatus()); } else { log.debug("OVF_STORE - Skip vm id '{}' with status: '{}'", vmId, vmDynamic.getStatus()); } } data.put(OvfInfoFileConstants.VmStatus, vmsStatus); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.VM); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { org.ovirt.engine.core.common.businessentities.VM vm = ovfHelper.readVmFromOvf(ovf.getOvfData()).getVm(); vm.setClusterCompatibilityVersion(ovf.getLowestCompVersion()); vm.setClusterArch(ovf.getArchitecture()); vmList.add(vm); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("failed to parse a given ovf configuration: \n" + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setReturnValue(vmList); }

private void registerOvfStoreDisks() { for (final org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getStorages()) { if (storageDomainStaticDao.get(storageDomainId).getStorageDomainType().isDataDomain()) { org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.resetOvfStoreAndUnregisteredDisks(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> ovfStoreDiskImages = getAllOVFDisks(storageDomainId, getStoragePool().getId()); registerAllOvfDisks(ovfStoreDiskImages, storageDomainId); List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entitiesFromStorageOvfDisk = getEntitiesFromStorageOvfDisk(storageDomainId, getStoragePool().getId()); for (java.lang.Object ovf : entitiesFromStorageOvfDisk) { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntityData = ((org.ovirt.engine.core.common.businessentities.OvfEntityData) (ovf)); unregisteredOVFDataDao.removeEntity(ovfEntityData.getEntityId(), storageDomainId); unregisteredOVFDataDao.saveOVFData(ovfEntityData); org.ovirt.engine.core.bll.storage.pool.log.info("Adding OVF data of entity id '{}' and entity name '{}'", ovfEntityData.getEntityId(), ovfEntityData.getEntityName()); } initUnregisteredDisksToDB(storageDomainId); return null; }); } } }
private void removeEntitiesFromStorageDomain(final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsForStorageDomain, final java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> vmTemplatesForStorageDomain, final java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksForStorageDomain, final org.ovirt.engine.core.compat.Guid storageDomainId) { if (((!(vmsForStorageDomain.isEmpty())) || (!(vmTemplatesForStorageDomain.isEmpty()))) || (!(disksForStorageDomain.isEmpty()))) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { for (org.ovirt.engine.core.common.businessentities.VM vm : vmsForStorageDomain) { removeEntityLeftOver(vm.getId(), vm.getName(), storageDomainId); unregisteredOVFDataDao.saveOVFData(new org.ovirt.engine.core.common.businessentities.OvfEntityData(vm.getId(), vm.getName(), VmEntityType.VM, vm.getClusterArch(), vm.getCompatibilityVersion(), storageDomainId, null, null)); } for (org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate : vmTemplatesForStorageDomain) { removeEntityLeftOver(vmTemplate.getId(), vmTemplate.getName(), storageDomainId); unregisteredOVFDataDao.saveOVFData(new org.ovirt.engine.core.common.businessentities.OvfEntityData(vmTemplate.getId(), vmTemplate.getName(), VmEntityType.TEMPLATE, vmTemplate.getClusterArch(), clusterDao.get(vmTemplate.getClusterId()).getCompatibilityVersion(), storageDomainId, null, null)); } storageDomainDao.removeEntitesFromStorageDomain(storageDomainId); return null; }); } }
protected void resetOvfStoreAndUnregisteredDisks() { ovfDisks = null; unregisteredDisks = new java.util.ArrayList(); }


private void updateCurrentConfiguration() { final org.ovirt.engine.core.common.businessentities.VmStatic updatedVmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getStaticData()); updatedVmStatic.setMemSizeMb(((updatedVmStatic.getMemSizeMb()) - (getUnpluggedDeviceSize()))); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmManager().update(updatedVmStatic); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.StoragePoolParametersBase parameters = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStoragePoolId()); runInternalAction(ActionType.ProcessOvfUpdateForStoragePool, parameters, org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getContext()); runInternalActionWithTasksContext(ActionType.ProcessOvfUpdateForStorageDomain, createProcessOvfUpdateForDomainParams()); org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.setSucceeded(true); }

private void invokeHostUpgrade(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters parameters) { commandCoordinatorUtil.executeAsyncCommand(ActionType.UpgradeHostInternal, createUpgradeParameters(parameters), command.cloneContextAndDetachFromParent()); }

public void setSelectionModel(org.ovirt.engine.ui.uicommonweb.models.OvirtSelectionModel<T> selectionModel) { this.selectionModel = selectionModel; }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if ((event.getSource()) instanceof org.gwtbootstrap3.client.ui.ListGroupItem) { org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T> clickedItem = null; for (org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T> item : currentState) { if ((item.asListGroupItem()) == (event.getSource())) { clickedItem = item; break; } } if (clickedItem != null) { for (int i = 0; i < (org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.getWidgetCount()); i++) { com.google.gwt.user.client.ui.IsWidget widget = org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.getWidget(i); widget.asWidget().removeStyleName(Styles.ACTIVE); } if (!(event.isControlKeyDown())) { clickedItem.asListGroupItem().addStyleName(Styles.ACTIVE); selectionModel.setSelected(clickedItem.getEntity(), true); java.util.List<T> items = getModel().getItemsAsList(); if (items != null) { selectedIndex = items.indexOf(clickedItem.getEntity()); } getModel().setSelectedItem(clickedItem.getEntity()); } else { selectionModel.setSelected(clickedItem.getEntity(), false); selectedIndex = -1; getModel().setSelectedItem(null); } } } }

public void setModel(M model) { this.model = model; getModel().getSelectedItemChangedEvent().addListener(( ev, sender, args) -> updateInfoPanel()); getModel().getItemsChangedEvent().addListener(( ev, sender, args) -> updateInfoPanel()); }
@java.lang.Override protected java.lang.String transform(java.util.ArrayList<java.lang.String> fileNameList, org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.ISO_PREFIX) + (super.transform(fileNameList, repoImage)); }
public static void getUnknownImageList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<java.lang.String>> aQuery, org.ovirt.engine.core.compat.Guid storagePoolId, boolean forceRefresh) { org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.getIrsImageList(aQuery, storagePoolId, forceRefresh, ImageFileType.All, new org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.RepoImageToImageFileNameAsyncConverter() { @java.lang.Override protected java.lang.String transform(java.util.ArrayList<java.lang.String> fileNameList, org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.ISO_PREFIX) + (super.transform(fileNameList, repoImage)); } @java.lang.Override protected boolean desiredImage(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.core.common.businessentities.storage.ImageFileType.Unknown) == (repoImage.getFileType()); } }); }
public void addMainContentView(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, int priority) { menuPresenterWidget.addMenuItem(priority, label, historyToken); dynamicUrlContentProxyFactory.create(historyToken, contentUrl); }
@java.lang.Deprecated public void addMainTab(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { addMainContentView(label, historyToken, contentUrl, options.getPriority().intValue()); }
@java.lang.Override public void onUserLoginChange(org.ovirt.engine.ui.common.auth.UserLoginChangeEvent event) { user.setAutoLogin(false); if ((autoLoginRequest) != null) { revealPlace(autoLoginRequest); autoLoginRequest = null; } else { revealDefaultPlace(); } }

private boolean isColdReboot() { return (org.ovirt.engine.core.bll.RebootVmCommand.getVm().isRunOnce()) || (org.ovirt.engine.core.bll.RebootVmCommand.getVm().isNextRunConfigurationExists()); }
private java.lang.Integer getQosBandwidth(org.ovirt.engine.core.compat.Guid clusterId) { final org.ovirt.engine.core.common.businessentities.network.HostNetworkQos migrationHostNetworkQos = org.ovirt.engine.core.bll.MigrateVmCommand.getDbFacade().getHostNetworkQosDao().getHostNetworkQosOfMigrationNetworkByClusterId(clusterId); if (migrationHostNetworkQos == null) { return null; } if ((migrationHostNetworkQos.getOutAverageRealtime()) != null) { return migrationHostNetworkQos.getOutAverageRealtime(); } return migrationHostNetworkQos.getOutAverageUpperlimit(); }
protected org.ovirt.engine.api.model.Disk addLinks(org.ovirt.engine.api.model.Disk model, java.lang.Class<? extends org.ovirt.engine.api.model.BaseResource> suggestedParent, java.lang.String... subCollectionMembersToExclude) { org.ovirt.engine.api.model.Disk disk = super.addLinks(model, suggestedParent, subCollectionMembersToExclude); if (disk.isSetStorageDomains()) { disk.getStorageDomains().getStorageDomains().forEach(( storageDomain) -> org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(storageDomain, null, false)); } return disk; }
protected org.ovirt.engine.api.model.Disks mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> entities) { org.ovirt.engine.api.model.Disks collection = new org.ovirt.engine.api.model.Disks(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : entities) { collection.getDisks().add(addLinks(populate(map(disk), disk))); } return collection; }
private void selectRow(int shift) { if ((selectedSet.isEmpty()) || ((dataDisplay) == null)) { return; } int shiftSelectedRow = (lastSelectedRow) + shift; int nextRow = (shiftSelectedRow >= 0) ? shiftSelectedRow % (dataDisplay.getRowCount()) : shiftSelectedRow + (dataDisplay.getRowCount()); if (disabledRows.contains(nextRow)) { selectRow((shift > 0 ? shift + 1 : shift - 1)); return; } setSelected(visibleItemsAsList().get(nextRow), true); }


@java.lang.Override protected java.lang.String getColorByProgress(int progress) { return org.ovirt.engine.ui.common.widget.table.column.DiskUploadImageProgressColumn.color.asCode(); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid storageDomainId = org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStorageDomainId(); org.ovirt.engine.core.common.action.StoragePoolParametersBase parameters = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStoragePoolId()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.ProcessOvfUpdateForStoragePool, parameters, org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getContext()); java.util.Set<org.ovirt.engine.core.compat.Guid> proccessedDomains = actionReturnValue.getActionReturnValue(); if (((actionReturnValue.getSucceeded()) && (proccessedDomains != null)) && (proccessedDomains.contains(storageDomainId))) { runInternalActionWithTasksContext(ActionType.ProcessOvfUpdateForStorageDomain, createProcessOvfUpdateForDomainParams()); } else { log.info("OVFs update was ignored - nothing to update for storage domain '{}'", storageDomainId); } org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.setSucceeded(true); }
protected void proccessDomainsForOvfUpdate(org.ovirt.engine.core.common.businessentities.StoragePool pool) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsInPool = storageDomainDao.getAllForStoragePool(pool.getId()); for (org.ovirt.engine.core.common.businessentities.StorageDomain domain : domainsInPool) { if ((!(domain.getStorageDomainType().isDataDomain())) || ((domain.getStatus()) != (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active))) { continue; } activeDataDomainsIds.add(domain.getId()); java.lang.Integer ovfStoresCountForDomain = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.StorageDomainOvfStoreCount); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo> storageDomainOvfInfos = storageDomainOvfInfoDao.getAllForDomain(domain.getId()); if ((storageDomainOvfInfos.size()) < ovfStoresCountForDomain) { proccessedDomains.add(domain.getId()); continue; } for (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo storageDomainOvfInfo : storageDomainOvfInfos) { if ((storageDomainOvfInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.OUTDATED)) { proccessedDomains.add(storageDomainOvfInfo.getStorageDomainId()); break; } } } }










@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.HostDeviceView object) { return (object.getMdevTypes()) == null ? "" : java.lang.String.join(", ", object.getMdevTypes()); }
public static java.lang.Double percent2bytes(java.lang.Integer speedValueInMegaBits, java.lang.Double rxTxValueInPrecent) { if ((speedValueInMegaBits == null) || (rxTxValueInPrecent == null)) { return 0.0; } return org.ovirt.engine.api.restapi.util.RxTxCalculator.megaBitToByte(((speedValueInMegaBits * rxTxValueInPrecent) / 100)); }


@java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return ((clusterNetworkModel.isAttached()) && (!(clusterNetworkModel.isExternal()))) && (((!(isMultipleSelectionAllowed())) || (!(clusterNetworkModel.isManagement()))) || (!(clusterNetworkModel.getOriginalNetworkCluster().isDefaultRoute()))); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass()) != (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer other = ((org.ovirt.engine.core.common.businessentities.storage.ImageTransfer) (obj)); return ((((((((((java.util.Objects.equals(commandId, other.commandId)) && (java.util.Objects.equals(phase, other.phase))) && (java.util.Objects.equals(lastUpdated, other.lastUpdated))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(diskId, other.diskId))) && (java.util.Objects.equals(imagedTicketId, other.imagedTicketId))) && (java.util.Objects.equals(proxyUri, other.proxyUri))) && (java.util.Objects.equals(signedTicket, other.signedTicket))) && (java.util.Objects.equals(bytesSent, other.bytesSent))) && (java.util.Objects.equals(bytesTotal, other.bytesTotal)); }

@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass()) != (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer other = ((org.ovirt.engine.core.common.businessentities.storage.ImageTransfer) (obj)); return (((((((((((java.util.Objects.equals(commandId, other.commandId)) && (java.util.Objects.equals(phase, other.phase))) && ((type) == (other.type))) && (java.util.Objects.equals(lastUpdated, other.lastUpdated))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(diskId, other.diskId))) && (java.util.Objects.equals(imagedTicketId, other.imagedTicketId))) && (java.util.Objects.equals(proxyUri, other.proxyUri))) && (java.util.Objects.equals(signedTicket, other.signedTicket))) && (java.util.Objects.equals(bytesSent, other.bytesSent))) && (java.util.Objects.equals(bytesTotal, other.bytesTotal)); }
private void handleTransferring(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((context.iterationTimestamp) >= ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getSessionExpiration()) - (getHostTicketRefreshAllowance()))) { log.info("Renewing transfer ticket for {}", getTransferDescription()); extendImageTransferSession(context.entity); } else { log.debug("Not yet renewing transfer ticket for {}", getTransferDescription()); } resetPeriodicPauseLogTime(0); }



private void storeNetwork() throws java.io.UnsupportedEncodingException { java.lang.StringBuilder output = new java.lang.StringBuilder(); if ((vmInit.getNetworks()) != null) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInitNetwork> networks = vmInit.getNetworks(); for (org.ovirt.engine.core.common.businessentities.VmInitNetwork iface : networks) { if (java.lang.Boolean.TRUE.equals(iface.getStartOnBoot())) { output.append("auto ").append(iface.getName()).append("\n"); } storeIpv4(iface, output); if ((vmInit.getDnsServers()) != null) { output.append(" dns-nameservers").append(" ").append(vmInit.getDnsServers()); output.append("\n"); } if ((vmInit.getDnsSearch()) != null) { output.append(" dns-search").append(" ").append(vmInit.getDnsSearch()); output.append("\n"); } } } interfaces = output.toString(); if (!(interfaces.isEmpty())) { metaData.put("network-interfaces", interfaces); storeNextFile(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.CloudInitFileMode.NETWORK, "/etc/network/interfaces", interfaces.getBytes("US-ASCII")); } }










@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData)) { return false; } org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData other = ((org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData) (obj)); return ((((((super.equals(obj)) && (java.util.Objects.equals(diskImages, other.diskImages))) && (java.util.Objects.equals(lunDisks, other.lunDisks))) && (java.util.Objects.equals(interfaces, other.interfaces))) && (java.util.Objects.equals(vmBase, other.vmBase))) && (java.util.Objects.equals(clusterName, other.clusterName))) && (java.util.Objects.equals(affinityGroups, other.affinityGroups)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), diskImages, lunDisks, interfaces, vmBase, clusterName, affinityGroups); }
@java.lang.Override protected void executeCommand() { affinityGroupDao.update(getParameters().getAffinityGroup()); setSucceeded(true); }

@java.lang.Override public void buildVirtualSystem() { org.ovirt.engine.core.utils.ovf.xml.XmlNode virtualSystem = selectSingleNode(_document, "//*/Content"); consumeReadProperty(virtualSystem, org.ovirt.engine.core.utils.ovf.NAME, ( val) -> fullEntityOvfData.getVmBase().setName(val)); fullEntityOvfData.getVmBase().setOvfVersion(getVersion()); org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = selectNodes(virtualSystem, "Section"); if (list != null) { org.ovirt.engine.core.utils.ovf.xml.XmlNode node = getNode(list, "xsi:type", "ovf:OperatingSystemSection_Type"); if (node != null) { readOsSection(node); if ((!(osRepository.isLinux(fullEntityOvfData.getVmBase().getOsId()))) || ((fullEntityOvfData.getVmBase().getDefaultDisplayType()) != (org.ovirt.engine.core.common.businessentities.DisplayType.qxl))) { fullEntityOvfData.getVmBase().setSingleQxlPci(false); } } node = getNode(list, "xsi:type", "ovf:VirtualHardwareSection_Type"); if (node != null) { readHardwareSection(node); } node = getNode(list, "xsi:type", "ovf:SnapshotsSection_Type"); if (node != null) { readSnapshotsSection(node); } node = getNode(list, "xsi:type", "ovf:AffinityGroupsSection_Type"); if (node != null) { readAffinityGroupsSection(node); } node = getNode(list, "xsi:type", "ovf:UserDomainsSection_Type"); if (node != null) { readUserDomainsSection(node); } } readGeneralData(virtualSystem); }
@java.lang.Override protected void executeCommand() { labelDao.update(getParameters().getLabel()); setActionReturnValue(getParameters().getLabel()); setSucceeded(true); }




public boolean canSchedule(org.ovirt.engine.core.common.businessentities.Cluster cluster, org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.compat.Guid> vdsBlackList, java.util.List<org.ovirt.engine.core.compat.Guid> vdsWhiteList, java.util.List<java.lang.String> messages) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = vdsDao.getAllForClusterWithStatus(cluster.getId(), VDSStatus.Up); vdsList = removeBlacklistedHosts(vdsList, vdsBlackList); vdsList = keepOnlyWhitelistedHosts(vdsList, vdsWhiteList); refreshCachedPendingValues(vdsList); org.ovirt.engine.core.common.scheduling.ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId()); java.util.Map<java.lang.String, java.lang.String> parameters = createClusterPolicyParameters(cluster); vdsList = runFilters(policy.getFilters(), cluster, vdsList, vm, parameters, policy.getFilterPositionMap(), messages, noWaitingVmDelayer, false, null); return (vdsList != null) && (!(vdsList.isEmpty())); }
void localize() { selectHostAutomaticallyEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.vmMigratePopupSelectHostAutomaticallyLabel()); selectDestinationHostEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.vmMigratePopupSelectDestinationHostLabel()); hostsListEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.vmMigratePopupHostsListLabel()); clustersEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.hostClusterVmPopup()); message1.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateHostDisabledVMsInServerClusters()); message2.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateSomeVmsAlreadyRunningOnHost()); message3.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateNoAvailableHost()); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel object) { driver.edit(object); updateMessages(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { updateMessages(object); } }); }
private void updateMessages(org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel object) { message1.setVisible((!(object.getVmsOnSameCluster()))); message2.setVisible(object.getIsSameVdsMessageVisible()); message3.setVisible(object.getNoSelAvailable()); }
private void removeUnselectableHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.compat.Guid run_on_vds, boolean allRunOnSameVds) { if ((getVmsOnSameCluster()) && allRunOnSameVds) { org.ovirt.engine.core.common.businessentities.VDS runOnSameVDS = null; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getId().equals(run_on_vds)) { runOnSameVDS = host; } } hosts.remove(runOnSameVDS); } }
@java.lang.Override protected void onReveal() { super.onReveal(); setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.TYPE_SetSearchPanel, searchPanelPresenterWidget); setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.TYPE_SetBreadCrumbs, breadCrumbsPresenterWidget); }
@java.lang.Override protected boolean validate() { boolean returnValue = ((((super.validate()) && (org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.checkStoragePool())) && (checkStoragePoolStatus(StoragePoolStatus.Uninitialized))) && (org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.initializeVds())) && (checkStorageDomainsInPool()); return returnValue; }


@java.lang.Override protected boolean validate() { if ((((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getId()) == null)) { return failValidation(EngineMessage.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVds(); if ((host != null) && (host.isPmEnabled())) { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents = fenceAgentDao.getFenceAgentsForHost(org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVdsId()); if ((fenceAgents.size()) == 1) { return failValidation(EngineMessage.VDS_REMOVE_LAST_FENCE_AGENT_PM_ENABLED); } } return super.validate(); }

void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(dynamicMessages.ovirtVersionAbout()); }
void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(dynamicMessages.ovirtVersionAbout()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.userNameAboutLabel()); }


void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.versionAboutLabel()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.userNameAboutLabel()); }


@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(network().comment()); optional(network().description()); optional(network().display()); optional(network().ip().address()); optional(network().ip().gateway()); optional(network().ip().netmask()); optional(network().mtu()); optional(network().name()); optional(network().stp()); optional(network().vlan().id()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(network().id()), mandatory(network().name())); optional(network().comment()); optional(network().description()); optional(network().ip().address()); optional(network().ip().gateway()); optional(network().ip().netmask()); optional(network().mtu()); optional(network().profileRequired()); optional(network().stp()); optional(network().vlan().id()); optional(network().usages()[COLLECTION]); optional(network().externalProvider().id()); }


@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { org.ovirt.engine.core.aaa.servlet.SsoLoginServlet.log.debug("Entered SsoLoginServlet"); java.lang.String scope = java.lang.String.format("ovirt-app-admin ovirt-app-portal ovirt-ext=auth:sequence-priority=%s", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty(authSequencePriorityPropertyName)); java.lang.String redirectUri = java.lang.String.format("%s://%s:%s%s", request.getScheme(), org.ovirt.engine.core.aaa.filters.FiltersHelper.getRedirectUriServerName(request.getServerName()), request.getServerPort(), postActionUrl); org.ovirt.engine.core.uutils.net.URLBuilder urlBuilder = new org.ovirt.engine.core.uutils.net.URLBuilder(org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineSsoUrl(request), "/oauth/authorize").addParameter("client_id", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_CLIENT_ID")).addParameter("response_type", "code").addParameter("app_url", request.getParameter("app_url")).addParameter("engine_url", org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineUrl(request)).addParameter("redirect_uri", redirectUri).addParameter("scope", scope); if (org.apache.commons.lang.StringUtils.isNotEmpty(request.getParameter("sso_token"))) { urlBuilder.addParameter("sso_token", request.getParameter("sso_token")); } java.lang.String url = urlBuilder.build(); org.ovirt.engine.core.aaa.servlet.SsoLoginServlet.log.debug("Redirecting to '{}'", url); response.sendRedirect(url); }
private static java.lang.String map(org.ovirt.engine.api.model.NetworkPluginType model) { switch (model) { case OPEN_VSWITCH : return OpenstackNetworkPluginType.OPEN_VSWITCH.name(); default : throw new java.lang.IllegalArgumentException((("Unknown network plugin type \"" + model) + "\"")); } }
@java.lang.Override protected org.ovirt.engine.api.model.OpenStackNetworkProvider postPopulate(org.ovirt.engine.api.model.OpenStackNetworkProvider model) { model.setType(OpenStackNetworkProviderType.NEUTRON); model.setPluginType(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.NetworkPluginType.class)); org.ovirt.engine.api.model.AgentConfiguration agentConfiguration = model.getAgentConfiguration(); agentConfiguration.setBrokerType(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.MessageBrokerType.class)); return model; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.ArchitectureType.class, to = org.ovirt.engine.api.model.Architecture.class) public static org.ovirt.engine.api.model.Architecture map(org.ovirt.engine.core.common.businessentities.ArchitectureType model, java.lang.String template) { if (model != null) { switch (model) { case undefined : return org.ovirt.engine.api.model.Architecture.UNDEFINED; case x86_64 : return org.ovirt.engine.api.model.Architecture.X86_64; case ppc64 : return org.ovirt.engine.api.model.Architecture.PPC64; default : return null; } } return null; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Architecture.class, to = org.ovirt.engine.core.common.businessentities.ArchitectureType.class) public static org.ovirt.engine.core.common.businessentities.ArchitectureType map(org.ovirt.engine.api.model.Architecture model, org.ovirt.engine.core.common.businessentities.ArchitectureType template) { if (model != null) { switch (model) { case UNDEFINED : return org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined; case X86_64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.x86_64; case PPC64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64; default : return null; } } return null; }
@java.lang.Override protected void onHide() { getTable().hideContextMenu(); }



@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.ImageTransfer.class, to = org.ovirt.engine.api.model.ImageTransfer.class) public static org.ovirt.engine.api.model.ImageTransfer map(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, org.ovirt.engine.api.model.ImageTransfer template) { org.ovirt.engine.api.model.ImageTransfer model = (template != null) ? template : new org.ovirt.engine.api.model.ImageTransfer(); if ((entity.getId()) != null) { model.setId(entity.getId().toString()); } if ((entity.getVdsId()) != null) { model.setHost(new org.ovirt.engine.api.model.Host()); model.getHost().setId(entity.getVdsId().toString()); } if ((entity.getDiskId()) != null) { model.setImage(new org.ovirt.engine.api.model.Image()); model.getImage().setId(entity.getDiskId().toString()); } if (((entity.getProxyUri()) != null) && ((entity.getImagedTicketId()) != null)) { model.setProxyUrl(entity.getClientURLForTransfer()); } if ((entity.getSignedTicket()) != null) { model.setSignedTicket(entity.getSignedTicket()); } if ((entity.getPhase()) != null) { model.setPhase(org.ovirt.engine.api.restapi.types.ImageTransferMapper.mapPhase(entity.getPhase())); } if ((entity.getActive()) != null) { model.setActive(entity.getActive()); } return model; }


protected void cluster_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster().getSelectedItem(); if (cluster == null) { return; } getFencingEnabled().setEntity(cluster.getFencingPolicy().isFencingEnabled()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getPmTypeList(new org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncQuery(( pmTypes) -> updatePmTypeList(pmTypes)), cluster.getCompatibilityVersion()); if (((getDataCenter()) != null) && ((getDataCenter().getItems()) != null)) { for (org.ovirt.engine.core.common.businessentities.StoragePool datacenter : getDataCenter().getItems()) { if (datacenter.getId().equals(cluster.getStoragePoolId())) { getDataCenter().setSelectedItem(datacenter, false); break; } } } final org.ovirt.engine.core.common.utils.CpuVendor newCpuVendor = getCurrentCpuVendor(); if ((newCpuVendor != null) && (!(newCpuVendor.equals(lastNonNullCpuVendor)))) { lastNonNullCpuVendor = newCpuVendor; cpuVendorChanged(); } getHostedEngineWarning().setIsAvailable(cluster.getCompatibilityVersion().less(Version.v4_0)); }

@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(cluster().id()), mandatory(cluster().name())); optional(registrationConfiguration()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(cluster().id()), mandatory(cluster().name())); optional(clone()); optional(exclusive()); optional(template().name()); or(optional(storageDomain().id()), optional(storageDomain().name())); optional(vm().diskAttachments()[COLLECTION].id()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(cluster().id()), mandatory(cluster().name())); optional(clone()); optional(exclusive()); optional(vm().name()); or(optional(storageDomain().id()), optional(storageDomain().name())); optional(vm().diskAttachments()[COLLECTION].disk().format()); optional(vm().diskAttachments()[COLLECTION].id()); optional(vm().diskAttachments()[COLLECTION].disk().sparse()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(cluster().id()), mandatory(cluster().name())); optional(clone()); optional(exclusive()); optional(template().name()); optional(registrationConfiguration()); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadataDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(4), guids.get(5)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(4), guids.get(5)); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMetadataDisk(org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(guids.get(4)); memoryDisk.setImageId(guids.get(5)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); return memoryDisk; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(2), guids.get(3)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(2), guids.get(3)); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMemoryDisk(vm, sd.getStorageType(), vmOverheadCalculator, org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(guids.get(2)); memoryDisk.setImageId(guids.get(3)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); return memoryDisk; }
private org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getSnapshotType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.StatelessSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm()); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().isSaveMemory()) && (isLiveSnapshotApplicable())) { return new org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getStoragePool(), this, vmOverheadCalculator, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDescription()); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }
private java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> getLuns(boolean selectedLuns, boolean includedLuns) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = new java.util.ArrayList<>(); if (getIsGrouppedByTarget()) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel> items = ((java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel>) (getItems())); for (org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel item : items) { luns.addAll(getAddedLuns(item.getLuns(), selectedLuns, includedLuns)); } } else { java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> items = ((java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>) (getItems())); luns.addAll(getAddedLuns(items, selectedLuns, includedLuns)); } return luns; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadaaDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.utils.GuidUtils.getGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(4), guids.get(5)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(4), guids.get(5)); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createMetadataDisk(); memoryDisk.setId(guids.get(4)); memoryDisk.setImageId(guids.get(5)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); return memoryDisk; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.common.AuditLogType.UNASSIGNED; }
private void onMaintenance() { java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain item : getSelectedItems()) { org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters parameters = new org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(); parameters.setStorageDomainId(getEntity().getId()); parameters.setForceMaintenance(false); if ((item.getStoragePoolId()) != null) { parameters.setStoragePoolId(item.getStoragePoolId()); } list.add(parameters); } final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); confirmationModel.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.DeactivateStorageDomainWithOvfUpdate, list, ( result) -> { confirmationModel.stopProgress(); setWindow(null); }, null); }
@java.lang.Override public javax.ws.rs.core.Response deactivate(org.ovirt.engine.api.model.Action action) { return doAction(ActionType.DeactivateStorageDomainWithOvfUpdate, new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase(guid, dataCenterId), action); }
@java.lang.Override protected void endWithFailure() { if ((commandCoordinatorUtil.getCommandExecutionStatus(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCommandId())) != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { changeStorageDomainStatusInTransaction(loadStoragePoolIsoMap(), StorageDomainStatus.Unknown); auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_OVF_UPDATE_INCOMPLETE); } else { executeDeactivateCommand(); } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }
@java.lang.Override protected void endWithFailure() { if ((commandCoordinatorUtil.getCommandExecutionStatus(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCommandId())) != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { changeStorageDomainStatusInTransaction(loadStoragePoolIsoMap(), StorageDomainStatus.Unknown); auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_OVF_UPDATE_INCOMPLETE); } else { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Active, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }
private void onMaintenance() { java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain item : getSelectedItems()) { org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase parameters = new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase(); parameters.setStorageDomainId(getEntity().getId()); if ((item.getStoragePoolId()) != null) { parameters.setStoragePoolId(item.getStoragePoolId()); } list.add(parameters); } final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); confirmationModel.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.DeactivateStorageDomainWithOvfUpdate, list, ( result) -> { confirmationModel.stopProgress(); setWindow(null); }, null); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { switch (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getActionState()) { case END_FAILURE : return org.ovirt.engine.core.common.AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED; default : return org.ovirt.engine.core.common.AuditLogType.UNASSIGNED; } }
private void handlePaused(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { periodicPauseLog(context.entity, context.iterationTimestamp); if ((context.entity.getImagedTicketId()) != null) { stopImageTransferSession(context.entity); } }
private void pollDownloadStatus(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId())); if ((returnValue == null) || (!(returnValue.getSucceeded()))) { log.debug("Failed to poll download status."); return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer imageTransfer = returnValue.getActionReturnValue(); if ((((imageTransfer.getBytesTotal()) != 0) && (imageTransfer.getBytesTotal().equals(imageTransfer.getBytesSent()))) && (!(imageTransfer.getActive()))) { if (!(context.entity.getActive())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); updates.setPhase(ImageTransferPhase.FINALIZING_SUCCESS); org.ovirt.engine.core.common.action.TransferImageStatusParameters parameters = new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); parameters.setUpdates(updates); runInternalAction(ActionType.TransferImageStatus, parameters); } } }





private javax.ws.rs.core.Response performCreate(org.ovirt.engine.api.model.ImageTransfer imageTransfer, org.ovirt.engine.core.common.action.TransferDiskImageParameters params) { updateTransferType(imageTransfer, params); return performCreate(ActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }




@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements = diskVmElementDao.getAllDiskVmElementsByDiskId(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters().getImageGroupID()); org.ovirt.engine.core.common.action.ActionType actionType = getMoveActionType(diskVmElements); if (actionType == (org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk)) { org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters = org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters(); moveDiskParameters.setCommandId(null); actionReturnValues.add(runInternalAction(actionType, moveDiskParameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getContext(), org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getLock()))); } else { org.ovirt.engine.core.compat.Guid vmId = diskVmElements.get(0).getVmId(); engineLock = lockVmWithWait(vmId); actionReturnValues.add(runInternalAction(actionType, createLiveMigrateDiskParameters(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters(), vmId), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getContext(), engineLock))); } handleChildReturnValue(); org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.setSucceeded(true); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Cluster cluster) { validateParameters(cluster, getMandatoryParameters()); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = getDataCenter(cluster); return performCreate(ActionType.AddCluster, createAddCommandParams(cluster, dataCenter), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetClusterById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Host host) { validateParameters(host, "name", "address"); org.ovirt.engine.core.common.businessentities.VdsStatic staticHost = getMapper(org.ovirt.engine.api.model.Host.class, org.ovirt.engine.core.common.businessentities.VdsStatic.class).map(host, null); staticHost.setClusterId(getClusterId(host)); org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters addParams = new org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters(staticHost, host.getRootPassword()); if (host.isSetOverrideIptables()) { addParams.setOverrideFirewall(host.isOverrideIptables()); } addParams.setHostedEngineDeployConfiguration(org.ovirt.engine.api.restapi.resource.HostResourceParametersUtil.getHostedEngineDeployConfiguration(this)); addParams = ((org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters) (getMapper(org.ovirt.engine.api.model.Host.class, org.ovirt.engine.core.common.action.VdsOperationActionParameters.class).map(host, addParams))); return performCreate(ActionType.AddVds, addParams, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetVdsByVdsId, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override public org.ovirt.engine.api.model.Host update(org.ovirt.engine.api.model.Host incoming) { org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid> hostResolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.QueryType.GetVdsByVdsId, org.ovirt.engine.core.common.queries.IdQueryParameters.class); org.ovirt.engine.core.common.businessentities.VDS entity = getEntity(hostResolver, true); if ((incoming.getAgents()) == null) { entity.setFenceAgents(null); } if ((incoming.isSetCluster()) && ((incoming.getCluster().isSetId()) || (incoming.getCluster().isSetName()))) { org.ovirt.engine.core.compat.Guid clusterId = lookupClusterId(incoming); if (!(clusterId.equals(entity.getClusterId()))) { performAction(ActionType.ChangeVDSCluster, new org.ovirt.engine.core.common.action.ChangeVDSClusterParameters(clusterId, guid)); entity = getEntity(hostResolver, true); } } org.ovirt.engine.api.model.Host host = performUpdate(incoming, entity, map(entity), hostResolver, ActionType.UpdateVds, new org.ovirt.engine.api.restapi.resource.BackendHostResource.UpdateParametersProvider()); return host; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.Cluster update(org.ovirt.engine.api.model.Cluster incoming) { return performUpdate(incoming, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.QueryType.GetClusterById, org.ovirt.engine.core.common.queries.IdQueryParameters.class), ActionType.UpdateCluster, new UpdateParametersProvider()); }





public boolean isFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(isFieldUpdatable(name))) { if (((fieldContainer != null) && ((container) != null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values != null) ? values.contains(name) : false; if ((!returnValue) && hotsetEnabled) { returnValue = isHotSetField(name); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn("Field '{}' can not be updated when status is '{}'", name, status); } } return returnValue; }
public void createOvfStoreDisks(int missingDiskCount) { for (int i = 0; i < missingDiskCount; i++) { org.ovirt.engine.core.common.action.CreateOvfVolumeForStorageDomainCommandParameters parameters = createCreateOvfVolumeForStorageDomainParams(); runInternalAction(ActionType.CreateOvfVolumeForStorageDomain, parameters, org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getContext().clone().withoutLock()); } }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name", "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.common.action.ImportVmTemplateParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateParameters(parent.getDataCenterId(destStorageDomainId), parent.getStorageDomainId(), destStorageDomainId, getClusterId(action), getEntity()); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetTemplate()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } return doAction(ActionType.ImportVmTemplate, params, action); }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name", "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), getClusterId(action)); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(ActionType.ImportVm, params, action); }


private java.util.Optional<org.ovirt.engine.core.common.businessentities.storage.DiskImage> traceConfigurationDisk(org.ovirt.engine.core.compat.Guid spId, org.ovirt.engine.core.compat.Guid sdId, java.util.List<org.ovirt.engine.core.compat.Guid> diskIds) { if (diskIds == null) { return java.util.Optional.empty(); } return diskIds.stream().map(( diskId) -> new org.ovirt.engine.core.bll.hostedengine.Pair<>(diskId, ((List<org.ovirt.engine.core.compat.Guid>) (resourceManager.runVdsCommand(VDSCommandType.GetVolumesList, new org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters(spId, sdId, diskId)).getReturnValue())))).flatMap(( diskToVolumes) -> diskToVolumes.getSecond().stream().map(( volumeId) -> getImageInfo(spId, sdId, diskToVolumes.getFirst(), volumeId))).filter(java.util.Objects::nonNull).map(( diskImageCall) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskImageCall.getReturnValue()))).filter(java.util.Objects::nonNull).filter(( diskImage) -> org.ovirt.engine.core.bll.hostedengine.HostedEngineConfigFetcher.HOSTED_ENGINE_CONFIGURATION_IMAGE.equals(diskImage.getDescription())).findAny(); }

private void addImportedDevices(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vm.getStaticData(); vmStatic.setImages(new java.util.ArrayList()); vmStatic.setInterfaces(new java.util.ArrayList()); importUtils.updateGraphicsDevices(vmStatic, ConvertVmCommand.getStoragePool().getCompatibilityVersion()); ConvertVmCommand.getVmDeviceUtils().addImportedDevices(vmStatic, false, false); saveDiskVmElements(vm); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { initImportClonedTemplateDisks(); addVmTemplateToDb(); mapDbUsers(); updateOriginalTemplateNameOnDerivedVms(); addVmInterfaces(); getCompensationContext().stateChanged(); org.ovirt.engine.core.bll.exportimport.vmHandler.addVmInitToDB(getVmTemplate().getVmInit()); return null; }); boolean doesVmTemplateContainImages = !(getImages().isEmpty()); if (doesVmTemplateContainImages && (!(org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImagesExistOnTargetStorageDomain()))) { moveOrCopyAllImageGroups(getVmTemplateId(), getImages()); } org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getVmDeviceUtils().addImportedDevices(getVmTemplate(), org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImportAsNewEntity(), false); if ((!doesVmTemplateContainImages) || (org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImagesExistOnTargetStorageDomain())) { endMoveOrCopyCommand(); } discardHelper.logIfDisksWithIllegalPassDiscardExist(getVmTemplateId()); checkTrustedService(); org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.setSucceeded(true); }
public void attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot, org.ovirt.engine.core.compat.Guid activeSnapshotId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, org.ovirt.engine.core.bll.context.CompensationContext compensationContext, org.ovirt.engine.core.common.businessentities.aaa.DbUser user, org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager, boolean withMemory) { boolean vmUpdatedFromConfiguration = false; if ((snapshot.getVmConfiguration()) != null) { vmUpdatedFromConfiguration = updateVmFromConfiguration(vm, snapshot.getVmConfiguration()); if (images != null) { vmUpdatedFromConfiguration &= updateImagesByConfiguration(vm, images); } } if (!vmUpdatedFromConfiguration) { if (images == null) { images = diskImageDao.getAllSnapshotsForVmSnapshot(snapshot.getId()); } vm.setImages(new java.util.ArrayList(images)); } vm.setAppList(snapshot.getAppList()); vmDynamicDao.update(vm.getDynamicData()); synchronizeDisksFromSnapshot(vm.getId(), snapshot.getId(), activeSnapshotId, vm.getImages(), vm.getName()); if (vmUpdatedFromConfiguration) { vmStaticDao.update(vm.getStaticData()); boolean macsInSnapshotAreExpectedToBeAlreadyAllocated = SnapshotType.STATELESS.equals(snapshot.getType()); synchronizeNics(vm, compensationContext, user, vmInterfaceManager, macsInSnapshotAreExpectedToBeAlreadyAllocated); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDeviceDao.getVmDeviceByVmId(vm.getId())) { if (deviceCanBeRemoved(vmDevice)) { vmDeviceDao.remove(vmDevice.getId()); } } vmDeviceUtils.addImportedDevices(vm.getStaticData(), false, withMemory); } }
private void processImages(final boolean useCopyImages) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmImagesAndSnapshots(); addVmExternalLuns(); addMemoryImages(); updateSnapshotsFromExport(); if (useCopyImages) { moveOrCopyAllImageGroups(); } getVmDeviceUtils().addImportedDevices(getVm().getStaticData(), getParameters().isImportAsNewEntity(), false); if (getParameters().isImportAsNewEntity()) { getParameters().setVm(getVm()); setVmId(getVm().getId()); } return null; }); }
public void addImportedDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, boolean isImportAsNewEntity, boolean withMemory) { if (isImportAsNewEntity) { setNewIdInImportedCollections(vmBase); } java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToAdd = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate = new java.util.ArrayList<>(); addImportedDiskDevices(vmBase, vmDevicesToUpdate); addImportedInterfaces(vmBase, vmDevicesToUpdate); addImportedOtherDevices(vmBase, vmDevicesToAdd, withMemory); vmDeviceDao.saveAll(vmDevicesToAdd); vmDeviceDao.updateAll(vmDevicesToUpdate); }
private void addImportedDiskDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate) { final org.ovirt.engine.core.compat.Guid vmId = vmBase.getId(); for (org.ovirt.engine.core.common.businessentities.storage.BaseDisk disk : getDisks(vmBase.getImages())) { org.ovirt.engine.core.compat.Guid deviceId = disk.getId(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = addDiskDevice(vmId, deviceId, getVmDeviceAddress(vmBase, vmId)); updateImportedVmDevice(vmBase, vmDevice, deviceId, vmDevicesToUpdate); } }
@java.lang.Override public javax.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); org.ovirt.engine.api.restapi.types.ExternalRegistrationConfigurationMapper.mapFromModel(action.getRegistrationConfiguration(), params); params.setContainerId(guid); params.setStorageDomainId(parent.getStorageDomainId()); params.setClusterId(getClusterId(action)); params.setImagesExistOnTargetStorageDomain(true); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmTemplateFromConfiguration, params, action); }
private void init() { leftBound.setEntity(((macRange.getMacFrom()) == null ? "" : macRange.getMacFrom())); rightBound.setEntity(((macRange.getMacTo()) == null ? "" : macRange.getMacTo())); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.macpool.MacRangeModel model) { driver.edit(model); org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs> textChangedListener = ( ev, sender, args) -> com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, model); model.getLeftBound().getEntityChangedEvent().addListener(textChangedListener); model.getRightBound().getEntityChangedEvent().addListener(textChangedListener); }


private void processHeartbeat() { if (((!(this.isInInit())) && (this.policy.isIncomingHeartbeat())) && (this.isIncomingHeartbeatExeeded())) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info((((("Heartbeat exceeded for " + (getHostname())) + " last response was ") + (getHeartbeatTime())) + " milliseconds ago.")); this.disconnect("Heartbeat exceeded"); } }
private void processHeartbeat() { if (((!(this.isInInit())) && (this.policy.isIncomingHeartbeat())) && (this.isIncomingHeartbeatExeeded())) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.debug("Heartbeat exceeded. Closing channel"); this.disconnect("Heartbeat exceeded"); } }
@java.lang.Override protected void executeCommand() { java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = org.ovirt.engine.core.bll.CreateOvaCommand.getParameters().getDisks(); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> diskIdToPath = prepareImages(disks); fillDiskApparentSize(disks); org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.CreateOvaCommand.getParameters().getVm(); vmHandler.updateNetworkInterfacesFromDb(vm); org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(vm); fullEntityOvfData.setDiskImages(new java.util.ArrayList(disks)); fullEntityOvfData.setInterfaces(vm.getInterfaces()); java.lang.String ovf = ovfManager.exportOva(vm, fullEntityOvfData, vm.getCompatibilityVersion()); log.debug("Exporting OVF: {}", ovf); boolean succeeded = runAnsiblePackOvaPlaybook(vm.getName(), ovf, disks, diskIdToPath); org.ovirt.engine.core.bll.CreateOvaCommand.setSucceeded(succeeded); }
@java.lang.Override protected void writeOS() { _writer.writeStartElement("OperatingSystemSection"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI, "id", vmBase.getId().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI, "required", "false"); _writer.writeElement("Info", "Guest Operating System"); _writer.writeElement("Description", osRepository.getUniqueOsNames().get(vmBase.getOsId())); _writer.writeEndElement(); }


@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.GetVmFromOvaQuery.setReturnValue(getVmInfoFromOvaFile()); }

private void setCookie(final javax.servlet.http.HttpServletResponse response, final javax.servlet.ServletContext servletContext, final java.util.Locale userLocale) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(org.ovirt.engine.core.utils.servlet.LocaleFilter.LOCALE, userLocale.toString()); cookie.setSecure(true); cookie.setPath(org.ovirt.engine.core.utils.servlet.LocaleFilter.ROOT_PATH); cookie.setMaxAge(java.lang.Integer.MAX_VALUE); cookie.setHttpOnly(true); response.addCookie(cookie); }
private java.lang.String authenticateUser(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, org.ovirt.engine.core.sso.utils.Credentials userCredentials) throws java.io.IOException, javax.servlet.ServletException, org.ovirt.engine.core.sso.utils.AuthenticationException { if ((userCredentials == null) || (!(org.ovirt.engine.core.sso.utils.SsoUtils.areCredentialsValid(request, userCredentials, true)))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_INVALID_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } try { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Authenticating user using credentials"); javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie("profile", userCredentials.getProfile()); cookie.setSecure(true); response.addCookie(cookie); org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(ssoContext, request, userCredentials); return (request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_REDIRECT_TO_MODULE_URI); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { throw ex; } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.error("Internal Server Error: {}", ex.getMessage()); org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex.getMessage(), ex); } }
private void setLangPageShown(javax.servlet.http.HttpServletResponse response, boolean value) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(org.ovirt.engine.core.utils.servlet.DocsServlet.LANG_PAGE_SHOWN, java.lang.Boolean.toString(value)); cookie.setSecure(true); cookie.setPath(getServletContext().getContextPath()); cookie.setHttpOnly(true); response.addCookie(cookie); }


public org.ovirt.engine.core.common.utils.ansible.AnsibleReturnValue runCommand(org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>... envVars) throws java.io.IOException, java.lang.InterruptedException { return runCommand(command, org.ovirt.engine.core.common.utils.ansible.AnsibleExecutor.ANSIBLE_PLAYBOOK_TIMEOUT, true, envVars); }
@java.lang.Override public javax.ws.rs.core.Response iscsiLogin(org.ovirt.engine.api.model.Action action) { validateParameters(action, "iscsi.address", "iscsi.target"); org.ovirt.engine.core.common.businessentities.StorageServerConnections cnx = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); org.ovirt.engine.api.model.IscsiDetails iscsiDetails = action.getIscsi(); cnx.setConnection(iscsiDetails.getAddress()); cnx.setIqn(iscsiDetails.getTarget()); cnx.setStorageType(StorageType.ISCSI); if (iscsiDetails.isSetPort()) { cnx.setPort(iscsiDetails.getPort().toString()); } else { cnx.setPort(org.ovirt.engine.api.restapi.resource.BackendHostResource.DEFAULT_ISCSI_PORT); } if (iscsiDetails.isSetUsername()) { cnx.setUserName(iscsiDetails.getUsername()); } if (iscsiDetails.isSetPassword()) { cnx.setPassword(iscsiDetails.getPassword()); } org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase connectionParms = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase(cnx, guid, false); return doAction(ActionType.ConnectStorageToVds, connectionParms, action); }
private void handleFinalizingFailure(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { log.error("Finalizing failed transfer. {}", getTransferDescription()); stopImageTransferSession(context.entity); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageGroupID()))) { setImageStatus(((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Upload) ? org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL : org.ovirt.engine.core.common.businessentities.storage.ImageStatus.OK)); } updateEntityPhase(ImageTransferPhase.FINISHED_FAILURE); setAuditLogTypeFromPhase(ImageTransferPhase.FINISHED_FAILURE); }









@java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget()) { if (!(validateExternalVnicProfileMapping())) { return false; } org.ovirt.engine.core.bll.validator.ImportValidator importValidator = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImportValidator(); if (!(validate(importValidator.validateUnregisteredEntity(vmFromConfiguration, ovfEntityData)))) { return false; } if (!(validate(importValidator.validateStorageExistForUnregisteredEntity(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImages(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().isAllowPartialImport(), imageToDestinationDomainMap, failedDisksToImportForAuditLog)))) { return false; } if (!(validate(importValidator.validateStorageExistsForMemoryDisks(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVm().getSnapshots(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().isAllowPartialImport(), failedDisksToImportForAuditLog)))) { return false; } setImagesWithStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVm().getImages()); } return super.validate(); }

@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.Network network) { return getCustomMapSqlParameterSource().addValue("addr", network.getAddr()).addValue("description", network.getDescription()).addValue("free_text_comment", network.getComment()).addValue("id", network.getId()).addValue("name", network.getName()).addValue("vdsm_name", network.getVdsmName()).addValue("subnet", network.getSubnet()).addValue("gateway", network.getGateway()).addValue("type", network.getType()).addValue("vlan_id", network.getVlanId()).addValue("stp", network.getStp()).addValue("storage_pool_id", network.getDataCenterId()).addValue("mtu", network.getMtu()).addValue("vm_network", network.isVmNetwork()).addValue("provider_network_provider_id", ((network.getProvidedBy()) == null ? null : network.getProvidedBy().getProviderId())).addValue("provider_network_external_id", ((network.getProvidedBy()) == null ? null : network.getProvidedBy().getExternalId())).addValue("qos_id", network.getQosId()).addValue("label", network.getLabel()).addValue("dns_resolver_configuration_id", getDnsResolverConfigurationId(network)); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy proxy = providerProxyFactory.create(getProvider()); org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().getProvidedBy().setExternalId(proxy.add(org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork())); org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().setVlanId(null); org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().setLabel(null); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { super.executeCommand(); getReturnValue().setActionReturnValue(getNetwork().getId()); return null; }); }



@java.lang.SuppressWarnings("unchecked") public void initModelSortHandler(final org.ovirt.engine.ui.uicommonweb.models.SortedListModel<T> sortedModel) { final org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?, T> searchableModel = (sortedModel instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) ? ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?, T>) (sortedModel)) : null; org.ovirt.engine.ui.common.widget.table.ColumnResizeCellTable.addColumnSortHandler(( event) -> { Column<?, ?> column = event.getColumn(); if (column instanceof org.ovirt.engine.ui.common.widget.table.column.SortableColumn) { SortableColumn<org.ovirt.engine.ui.common.widget.table.T, ?> sortableColumn = ((SortableColumn<org.ovirt.engine.ui.common.widget.table.T, ?>) (column)); boolean sortApplied = false; boolean supportsServerSideSorting = (searchableModel != null) && (searchableModel.supportsServerSideSorting()); Comparator<? extends org.ovirt.engine.ui.common.widget.table.T> columnComparator = sortableColumn.getComparator(); Comparator<? extends org.ovirt.engine.ui.common.widget.table.T> realComparator = (columnComparator != null) ? org.ovirt.engine.ui.common.uicommon.model.DefaultModelItemComparator.fallbackFor(columnComparator) : null; if (supportsServerSideSorting && (realComparator != null)) { sortedModel.setComparator(realComparator, event.isSortAscending()); sortApplied = true; } else if (supportsServerSideSorting) { sortedModel.setComparator(null); if (searchableModel.isSearchValidForServerSideSorting()) { searchableModel.updateSortOptions(sortableColumn.getSortBy(), event.isSortAscending()); sortApplied = true; } else { searchableModel.clearSortOptions(); } } else if (realComparator != null) { sortedModel.setComparator(realComparator, event.isSortAscending()); sortApplied = true; if (searchableModel == null) { sortedModel.setItems(sortedModel.getItems()); } } com.google.gwt.user.cellview.client.ColumnSortList.ColumnSortInfo columnSortInfo = event.getColumnSortList().get(0); if (sortApplied) { pushColumnSort(columnSortInfo); } else { clearColumnSort(); } } }); }
@org.junit.Test public void passDiscardNotSupported() { testDiscardFieldsParsing(Version.v4_0, null, null); }
@org.junit.Test public void discardFieldsAreParsed() { testDiscardFieldsParsing(Version.v4_1, 1024L, false); }
@org.junit.Test public void sparsifyNotSupportedWhenWipeAfterDeleteIsOn() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomainForDisk(StorageType.ISCSI); disk.setWipeAfterDelete(true); storageDomain.setSupportsDiscardZeroesData(false); assertThat(validator.isSparsifySupported(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_SPARSIFY_NOT_SUPPORTED_BY_UNDERLYING_STORAGE_WHEN_WAD_IS_ENABLED)); }
private void applySearchString(java.lang.String searchString) { if ((modelProvider.getModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?, ? extends org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>> listModel = modelProvider.getModel(); if ((org.ovirt.engine.core.compat.StringHelper.isNotNullOrEmpty(searchString)) && (searchString.startsWith(listModel.getDefaultSearchString()))) { listModel.setSearchString(searchString); listModel.getSearchCommand().execute(); org.ovirt.engine.ui.uicommonweb.models.MainModelSelectionChangeEvent.fire(((com.google.gwt.event.shared.HasHandlers) (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getEventBus())), listModel); } } }


@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.column.Context context, org.ovirt.engine.ui.uicommonweb.models.storage.LunModel value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { int availableSizeToAdd = value.getAdditionalAvailableSize(); java.lang.String availableSizeToAddString = org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.messages.additionalAvailableSizeInGB(availableSizeToAdd); boolean isGrayedOut = value.getIsGrayedOut(); java.lang.String inputId = id + "_input"; com.google.gwt.safehtml.shared.SafeHtml input = null; if ((!isGrayedOut) && (!(value.getIsSelected()))) { input = templates.toggledUp(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.constants.addSanStorage()); } else if (!isGrayedOut) { input = templates.toggledDown(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.constants.addSanStorage()); } else if (!(value.getIsIncluded())) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.uiConstants.notAvailableLabel(), "color:gray", inputId); } else if (availableSizeToAdd == 0) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.constants.cannotExtendSanStorage(), "color:gray", inputId); } else if (value.isAdditionalAvailableSizeSelected()) { input = templates.toggledDown(inputId, availableSizeToAddString); } else { input = templates.toggledUp(inputId, availableSizeToAddString); } sb.append(templates.span(id, input)); }
private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if (((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) || (!(validateDiscardAfterDeleteLegal(storageDomainValidator)))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("discardAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); props.remove("backup"); if (!(props.isEmpty())) { log.warn("There was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }



@java.lang.Override public final com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { org.ovirt.engine.ui.common.widget.table.cell.ScrollableTextCell.CellTemplate template = com.google.gwt.core.client.GWT.create(ScrollableTextCell.CellTemplate.class); java.lang.String color = ""; if (object != null) { if (object.getIsGrayedOut()) { color = "gray"; } else if (!(object.getIsAccessible())) { color = "orange"; } else { color = "black"; } } return template.input(getRawValue(object), ("color:" + color), com.google.gwt.user.client.DOM.createUniqueId()); }
private void addAbstractLunAddOrExtendColumn(org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>> table, java.lang.String headerString) { org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn addOrExtendColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn() { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.storage.LunModel getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { return object; } }; addOrExtendColumn.makeSortable(); table.addColumn(addOrExtendColumn, headerString, "95px"); }
private void addAbstractLunAddOrExtendColumn(org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>> table, java.lang.String headerString) { table.addColumn(new org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn() { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.storage.LunModel getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { return object; } }, headerString, "85px"); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel object) { driver.edit(object); initLists(object); object.getPropertyChangedEvent().addListener(( ev, sender, args) -> { java.lang.String propName = args.propertyName; if (propName.equals("IsValid")) { onIsValidPropertyChange(object); } else if (propName.equals("IsGrouppedByTarget")) { updateListByGropping(object); } }); iscsiTargetToLunView.edit(object); iscsiLunToTargetView.edit(object); targetsToLunTab.addClickHandler(( event) -> { iscsiLunToTargetView.disableItemsUpdate(); object.setIsGrouppedByTarget(true); }); lunToTargetsTab.addClickHandler(( event) -> { iscsiTargetToLunView.disableItemsUpdate(); object.setIsGrouppedByTarget(false); }); dialogTabPanel.switchTab((object.getIsGrouppedByTarget() ? targetsToLunTab : lunToTargetsTab)); updateListByGropping(object); }


@java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.shouldSkipCommandExecutionCached()) { return true; } if ((org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.canRunActionOnNonManagedVm())) { return false; } if (!(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().isRunningOrPaused())) { return org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.failVmStatusIllegal(); } if (((isoDomainListSynchronizer.findActiveISODomain(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getStoragePoolId())) == null) && (!(org.apache.commons.lang.StringUtils.isEmpty(cdImagePath)))) { return failValidation(EngineMessage.VM_CANNOT_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO); } if ((org.apache.commons.lang.StringUtils.isNotEmpty(cdImagePath)) && (!(org.apache.commons.lang.StringUtils.endsWithIgnoreCase(cdImagePath, ValidationUtils.ISO_SUFFIX)))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_INVALID_CDROM_DISK_FORMAT); } return true; }
private void setup(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError expectedError) { when(getQueryParameters().getId()).thenReturn(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); returnValue.setSucceeded(true); returnValue.setReturnValue(creatLldpInfoMap((expectedError != (org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError.LLDP_ENABLE)))); when(vdsBrokerFrontendMocked.runVdsCommand(eq(VDSCommandType.GetLldp), any())).thenReturn(returnValue); }


@java.lang.Override protected void executeQueryCommand() { java.lang.String[] names = new java.lang.String[0]; org.ovirt.engine.core.common.vdscommands.GetLldpVDSCommandParameters lldpVDSCommandParameters = new org.ovirt.engine.core.common.vdscommands.GetLldpVDSCommandParameters(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getParameters().getId(), names); org.ovirt.engine.core.common.vdscommands.VDSReturnValue command = runVdsCommand(VDSCommandType.GetLldp, lldpVDSCommandParameters); org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getQueryReturnValue().setReturnValue(command.getReturnValue()); }

public boolean initGlusterHost(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterHostUUID, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(vds.getId())); if ((returnValue.getSucceeded()) && ((returnValue.getReturnValue()) != null)) { org.ovirt.engine.core.compat.Guid addedServerUuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(((java.lang.String) (returnValue.getReturnValue()))); if (hostUuidExists(vds, addedServerUuid)) { setNonOperational(vds, NonOperationalReason.GLUSTER_HOST_UUID_ALREADY_EXISTS, null); return false; } saveGlusterHostUuid(vds, addedServerUuid); } else { setNonOperational(vds, NonOperationalReason.GLUSTER_HOST_UUID_NOT_FOUND, null); return false; } refreshGlusterStorageDevices(vds); boolean ret = initGlusterPeerProcess(vds); glusterServerDao.updatePeerStatus(vds.getId(), (ret == true ? org.ovirt.engine.core.common.businessentities.gluster.PeerStatus.CONNECTED : org.ovirt.engine.core.common.businessentities.gluster.PeerStatus.DISCONNECTED)); return ret; }
private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus fetchedStatus) { log.debug("Detected that status of brick '{}' in volume '{}' changed from '{}' to '{}'", brick.getQualifiedName(), volume.getName(), brick.getStatus(), fetchedStatus); logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, new java.util.HashMap<java.lang.String, java.lang.String>() { { put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); } }); if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN); } }



public org.ovirt.engine.core.bll.ValidationResult cpuTypeSupportsVirtService() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_CPU_NOT_FOUND).when(((cluster.supportsVirtService()) && (!(cpuExists())))); }
@java.lang.Override protected void executeCommand() { int missingDiskCount = getMissingDiskCount(); if (missingDiskCount <= 0) { setOvfUpdateStep(OvfUpdateStep.OVF_UPLOAD); updateOvfStoreContent(); org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.setSucceeded(true); } else { setOvfUpdateStep(OvfUpdateStep.OVF_STORES_CREATION); org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.setSucceeded(createOvfStoreDisks(getMissingDiskCount())); } }




@java.lang.Override public void updateVisibility() { messageLabel.setVisible(false); exportLabel.setVisible(org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly)); }



@java.lang.Override protected void executeSave() { final org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(getSelectedDc().getId(), getNetwork()); parameters.setVnicProfileRequired(false); if (getExport().getEntity()) { org.ovirt.engine.core.common.businessentities.Provider<?> externalProvider = getExternalProviders().getSelectedItem(); org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providerNetwork = new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(); providerNetwork.setProviderId(externalProvider.getId()); getNetwork().setProvidedBy(providerNetwork); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.AddNetworkOnProvider, parameters, addNetworkCallback(), null); } else { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.AddNetwork, parameters, addNetworkCallback(), null); } }

@java.lang.Override protected void onExportChanged() { super.onExportChanged(); if (getExport().getEntity()) { getHasVLanTag().setIsChangeable(false); getVLanTag().setIsChangeable(false); getIsVmNetwork().setIsChangeable(false); getNetworkLabel().setIsChangeable(false); getNeutronPhysicalNetwork().setIsChangeable(false); } }



public void flush() { network.setDataCenterId(getSelectedDc().getId()); network.setName(getName().getEntity()); network.setStp(getIsStpEnabled().getEntity()); network.setDescription(getDescription().getEntity()); network.setComment(getComment().getEntity()); network.setVmNetwork(getIsVmNetwork().getEntity()); java.lang.String label = (getExport().getEntity()) ? getNeutronPhysicalNetwork().getEntity() : getNetworkLabel().getSelectedItem(); network.setLabel(((label == null) || (!(label.isEmpty())) ? label : null)); network.setMtu(0); if (getMtu().getIsChangable()) { network.setMtu(java.lang.Integer.parseInt(getMtu().getEntity().toString())); } network.setDnsResolverConfiguration(getDnsConfigurationModel().flush()); network.setVlanId(null); if (getHasVLanTag().getEntity()) { network.setVlanId(java.lang.Integer.parseInt(getVLanTag().getEntity().toString())); } for (org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel profileModel : getProfiles().getItems()) { profileModel.flush(); } if (getQos().getIsChangable()) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = getQos().getSelectedItem(); network.setQosId((qos == (org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel.EMPTY_HOST_NETWORK_QOS) ? null : qos.getId())); } }
protected void onExportChanged() { boolean externalNetwork = getExport().getEntity(); getNetworkLabel().setIsChangeable((!externalNetwork)); getNeutronPhysicalNetwork().setIsChangeable(externalNetwork); getQos().setIsChangeable((!externalNetwork)); getAddQosCommand().setIsExecutionAllowed((!externalNetwork)); updateMtuSelectorsChangeability(); }
private void updateAvailability() { if (!(org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly))) { getExternalProviders().setIsAvailable(false); getNeutronPhysicalNetwork().setIsAvailable(false); getCreateSubnet().setIsAvailable(false); getVLanTag().setIsAvailable(false); getHasVLanTag().setIsAvailable(false); getExport().setIsAvailable(false); } }




private void init() { setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editLogicalNetworkTitle()); setHelpTag(HelpTag.edit_logical_network); setHashName("edit_logical_network"); getName().setEntity(getNetwork().getName()); getDescription().setEntity(getNetwork().getDescription()); getComment().setEntity(getNetwork().getComment()); getIsStpEnabled().setEntity(getNetwork().getStp()); getHasVLanTag().setEntity(((getNetwork().getVlanId()) != null)); getVLanTag().setEntity(getNetwork().getVlanId()); initMtu(); initIsVm(); getExport().setEntity(getNetwork().isExternal()); getExport().setIsChangeable(false); getExternalProviders().setIsChangeable(false); if (getNetwork().isExternal()) { getNeutronPhysicalNetwork().setEntity(getNetwork().getLabel()); } else { getNetworkLabel().setSelectedItem(getNetwork().getLabel()); } toggleProfilesAvailability(); }


private void finalizeDownloadIfNecessary(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context, org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer) { if ((((upToDateImageTransfer.getBytesTotal()) != 0) && (upToDateImageTransfer.getBytesTotal().equals(upToDateImageTransfer.getBytesSent()))) && (!(upToDateImageTransfer.getActive()))) { if (!(context.entity.getActive())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer statusUpdate = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); statusUpdate.setPhase(ImageTransferPhase.FINALIZING_SUCCESS); runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId(), statusUpdate)); } } }


private void updateExternalVnicProfilesPerTargetCluster() { final java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> result = new java.util.HashMap<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData importTemplateData : getEntities().getItems()) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = importTemplateData.getCluster().getSelectedItem(); final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> clusterVnicProfileMappings; if (result.containsKey(cluster)) { clusterVnicProfileMappings = result.get(cluster); } else { clusterVnicProfileMappings = new java.util.HashSet(); result.put(cluster, clusterVnicProfileMappings); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> previousClusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { previousClusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { previousClusterVnicProfileMappings = new java.util.HashSet(); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> vmVnicProfiles = getNewVnicProfileMappings(importTemplateData, previousClusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); } externalVnicProfilesPerTargetCluster = result; }
private void updateExternalVnicProfilesPerTargetCluster() { final java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> result = new java.util.HashMap<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData : getEntities().getItems()) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = registerVmData.getCluster().getSelectedItem(); final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> clusterVnicProfileMappings; if (result.containsKey(cluster)) { clusterVnicProfileMappings = result.get(cluster); } else { clusterVnicProfileMappings = new java.util.HashSet(); result.put(cluster, clusterVnicProfileMappings); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> previousClusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { previousClusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { previousClusterVnicProfileMappings = new java.util.HashSet(); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> vmVnicProfiles = getNewVnicProfileMappings(registerVmData, previousClusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); } externalVnicProfilesPerTargetCluster = result; }




@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if ("OnSave".equals(command.getName())) { onSave(); } }

public java.lang.String getCommandType() { return commandType; }
protected org.ovirt.engine.core.bll.context.DefaultCompensationContext createDefaultCompensationContext() { org.ovirt.engine.core.bll.context.DefaultCompensationContext defaultContext = new org.ovirt.engine.core.bll.context.DefaultCompensationContext(); defaultContext.setCommandId(commandId); defaultContext.setCommandType(getClass().getName()); defaultContext.setBusinessEntitySnapshotDao(businessEntitySnapshotDao); defaultContext.setSnapshotSerializer(org.ovirt.engine.core.utils.SerializationFactory.getSerializer()); return defaultContext; }
@java.lang.Override public java.util.List<org.apache.commons.collections.KeyValue> getAllCommands() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource(); return getCallsHandler().executeReadList("get_all_commands", ( rs, rowNum) -> { org.apache.commons.collections.keyvalue.DefaultKeyValue result = new org.apache.commons.collections.keyvalue.DefaultKeyValue(); result.setKey(getGuidDefaultEmpty(rs, "command_id")); result.setValue(rs.getString("command_type")); return result; }, parameterSource); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot entitySnapshot) { org.ovirt.engine.core.compat.Guid id = entitySnapshot.getId(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(id)) { id = org.ovirt.engine.core.compat.Guid.newGuid(); entitySnapshot.setId(id); } org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", entitySnapshot.getId()).addValue("command_id", entitySnapshot.getCommandId()).addValue("command_type", entitySnapshot.getCommandType()).addValue("entity_id", entitySnapshot.getEntityId()).addValue("entity_type", entitySnapshot.getEntityType()).addValue("entity_snapshot", entitySnapshot.getEntitySnapshot()).addValue("snapshot_class", entitySnapshot.getSnapshotClass()).addValue("snapshot_type", entitySnapshot.getSnapshotType()).addValue("insertion_order", entitySnapshot.getInsertionOrder()); getCallsHandler().executeModification("insert_entity_snapshot", parameterSource); }
@org.junit.Test public void testInsertSnapshot() { org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot snapshot = new org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot(); org.ovirt.engine.core.compat.Guid commandId = org.ovirt.engine.core.compat.Guid.newGuid(); snapshot.setCommandId(commandId); snapshot.setCommandType("org.ovirt.engine.core.bll.UpdateVdsCommand"); snapshot.setEntityId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); snapshot.setEntityType("org.ovirt.engine.core.common.businessentities.VdsStatic"); snapshot.setEntitySnapshot("something"); snapshot.setSnapshotClass("someClass"); dao.save(snapshot); java.util.List<org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot> snapshotsFromDb = dao.getAllForCommandId(commandId); assertNotNull(snapshotsFromDb); assertEquals(1, snapshotsFromDb.size()); assertEquals(snapshot, snapshotsFromDb.get(0)); }
protected boolean validateCluster() { if ((org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getCluster()) == null) { return failValidation(EngineMessage.VDS_CLUSTER_IS_NOT_VALID); } return true; }

@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot> getAllForCommandId(org.ovirt.engine.core.compat.Guid commandID) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("command_id", commandID); return getCallsHandler().executeReadList("get_entity_snapshot_by_command_id", ( rs, rowNum) -> { org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot result = new org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot(); result.setId(getGuidDefaultEmpty(rs, "id")); result.setCommandId(getGuidDefaultEmpty(rs, "command_id")); result.setCommandType(rs.getString("command_type")); result.setEntityId(rs.getString("entity_id")); result.setEntityType(rs.getString("entity_type")); result.setEntitySnapshot(rs.getString("entity_snapshot")); result.setSnapshotClass(rs.getString("snapshot_class")); result.setSnapshotType(org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot.SnapshotType.values()[rs.getInt("snapshot_type")]); result.setInsertionOrder(rs.getInt("insertion_order")); return result; }, parameterSource); }
private void initDefaultNetworkProvider() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getAllProvidersByType(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(( result) -> { List<org.ovirt.engine.core.common.businessentities.Provider> providers = ((java.util.List) (result)); providers.add(0, null); getDefaultNetworkProvider().setItems(providers); org.ovirt.engine.core.common.businessentities.Cluster cluster = getEntity(); if (cluster != null) { org.ovirt.engine.core.common.businessentities.Provider defaultNetworkProvider = providers.stream().filter(( provider) -> provider != null).filter(( provider) -> provider.getId().equals(cluster.getDefaultNetworkProviderId())).findFirst().orElse(null); getDefaultNetworkProvider().setSelectedItem(defaultNetworkProvider); } }), ProviderType.OPENSTACK_NETWORK, ProviderType.EXTERNAL_NETWORK); }
public void selectProviderById(org.ovirt.engine.core.compat.Guid providerId) { if ((getNetworkProviders().getItems()) != null) { org.ovirt.engine.core.common.businessentities.Provider provider = getNetworkProviders().getItems().stream().filter(( candidate) -> candidate != null).filter(( candidate) -> candidate.getId().equals(providerId)).findFirst().orElse(null); getNetworkProviders().setSelectedItem(provider); } }

@java.lang.Override protected boolean validate() { return (((((((((((((((super.validate()) && (isImageExist())) && (checkOperationIsCorrect())) && (checkOperationAllowedOnDiskContentType())) && (isImageNotLocked())) && (isSourceAndDestTheSame())) && (validateSourceStorageDomain())) && (validateDestStorage())) && (checkTemplateInDestStorageDomain())) && (validateSpaceRequirements())) && (validateVmSnapshotStatus())) && (checkCanBeMoveInVm())) && (checkIfNeedToBeOverride())) && (setAndValidateDiskProfiles())) && (setAndValidateQuota())) && (validatePassDiscardSupportedForDestinationStorageDomain()); }

@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { try { org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command = new org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder().hostnames(host.getHostName()).logFileDirectory(VdsDeployBase.HOST_DEPLOY_LOG_DIRECTORY).logFilePrefix("ovirt-host-mgmt-ansible").logFileName(host.getHostName()).logFileSuffix(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()).playbook(AnsibleConstants.HOST_UPGRADE_PLAYBOOK); if ((ansibleExecutor.runCommand(command).getAnsibleReturnCode()) != (org.ovirt.engine.core.common.utils.ansible.AnsibleReturnCode.OK)) { java.lang.String error = java.lang.String.format("Failed to update host '%1$s'.", host.getHostName()); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error(error); throw new java.lang.RuntimeException(error); } } catch (java.lang.InterruptedException | java.io.IOException ex) { throw new java.lang.RuntimeException(ex); } }
@java.lang.Override protected void endSuccessfully() { if (org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().getActive()) { updateRelevantVms(); } else if (org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().hasRawBlock()) { refreshVolume(); } org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getImageInfo(); if ((diskImage != null) && ((org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().getSize()) != (diskImage.getSize()))) { org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getReturnValue().setActionReturnValue(diskImage.getSize()); imageDao.updateImageSize(diskImage.getImageId(), diskImage.getSize()); updateAuditLog(AuditLogType.USER_EXTEND_DISK_SIZE_SUCCESS, diskImage.getSizeInGigabytes()); } org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.setSucceeded(true); }
protected void mapDbUsers() { }
private void addPermissions(org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser, java.util.Set<java.lang.String> roles, org.ovirt.engine.core.compat.Guid entityId, org.ovirt.engine.core.common.VdcObjectType objectType, java.util.Map<java.lang.String, java.lang.Object> roleMap) { roles.forEach(( roleName) -> { org.ovirt.engine.core.common.businessentities.Permission permission = null; org.ovirt.engine.core.common.businessentities.Role originalRole = roleDao.getByName(roleName); if (roleMap != null) { org.ovirt.engine.core.common.businessentities.Role destRoleName = ((org.ovirt.engine.core.common.businessentities.Role) (roleMap.get(roleName))); if (destRoleName != null) { org.ovirt.engine.core.common.businessentities.Role destRole = roleDao.getByName(destRoleName.getName()); permission = new org.ovirt.engine.core.common.businessentities.Permission(dbUser.getId(), destRole.getId(), entityId, objectType); } else if (originalRole != null) { permission = new org.ovirt.engine.core.common.businessentities.Permission(dbUser.getId(), originalRole.getId(), entityId, objectType); } } else if (originalRole != null) { permission = new org.ovirt.engine.core.common.businessentities.Permission(dbUser.getId(), originalRole.getId(), entityId, objectType); } if (permission != null) { permissionDao.save(permission); } }); }
protected void mapDbUsers() { drMappingHelper.mapDbUsers(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getDomainMap(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getDbUsers(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getUserToRoles(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVmId(), VdcObjectType.VM, org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getRoleMap()); }
@java.lang.Override protected void executeVmCommand() { try { addVmToDb(); addVmToAffinityGroups(); addVmToAffinityLabels(); mapDbUsers(); processImages(); vmHandler.addVmInitToDB(getVm().getStaticData().getVmInit()); discardHelper.logIfDisksWithIllegalPassDiscardExist(getVmId()); } catch (java.lang.RuntimeException e) { macPool.freeMacs(macsAdded); throw e; } org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.setSucceeded(true); org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getReturnValue().setActionReturnValue(getVm()); }
@java.lang.Override protected void executeCommand() { if (shouldSkipCommandExecutionCached()) { org.ovirt.engine.core.bll.VmCommand.setSucceeded(true); return; } executeVmCommand(); }

private java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> getNameServers(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration dnsResolverConfiguration) { if (dnsResolverConfiguration == null) { return null; } java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServers = dnsResolverConfiguration.getNameServers(); if ((nameServers == null) || (nameServers.isEmpty())) { return null; } return nameServers; }
private void dataCenter_SelectedItemChanged() { updateItemsAvailability(); behavior.updateDataCenterAlert(); }

@org.junit.Test public void testReadBooleanList() { java.util.List<java.lang.Boolean> expected = java.util.Arrays.asList(true, false); org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader("<action><value>true</value><value>false</value></action>"); reader.next(); java.util.List<java.lang.Boolean> booleans = reader.readBooleans(); assertEquals(expected, booleans); }
@org.junit.Test public void testReadBooleanListEndElement() { org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader("<action><value>true</value><value>false</value></action>"); reader.next(); reader.readBooleans(); assertEquals(javax.xml.stream.XMLStreamConstants.END_ELEMENT, reader.getEventType()); assertEquals("action", reader.getLocalName()); }
@org.junit.Test public void testReadStringListEndElement() { org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader("<action><value>1</value><value>2</value></action>"); reader.next(); reader.readStrings(); assertEquals(javax.xml.stream.XMLStreamConstants.END_ELEMENT, reader.getEventType()); assertEquals("action", reader.getLocalName()); }
public java.util.List<java.lang.String> readStrings() { java.util.List<java.lang.String> values = new java.util.ArrayList<>(); java.lang.String startingLocalName = reader.getLocalName(); java.lang.String currentLocalName = startingLocalName; while (forward()) { currentLocalName = reader.getLocalName(); if (currentLocalName.equals(startingLocalName)) { values.add(readString()); } else { skip(); } } return values; }
@org.junit.Test public void testReadStringList() { java.util.List<java.lang.String> expected = java.util.Arrays.asList("1", "2"); org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader("<action><value>1</value><value>2</value></action>"); reader.next(); java.util.List<java.lang.String> strings = reader.readStrings(); assertEquals(expected, strings); }


public static void validateVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource br, org.ovirt.engine.api.model.Action action) { if (action.isSetVnicProfileMappings()) { br.validateParameters(action.getVnicProfileMappings(), "vnicProfileMappings"); for (org.ovirt.engine.api.model.VnicProfileMapping mapping : action.getVnicProfileMappings().getVnicProfileMappings()) { if ((mapping.getSourceNetworkName()) == null) { br.validateParameters(mapping, "sourceNetworkName"); } if ((mapping.getSourceNetworkProfileName()) == null) { br.validateParameters(mapping, "sourceNetworkProfileName"); } if ("".equalsIgnoreCase(mapping.getSourceNetworkName())) { mapping.setSourceNetworkName(null); } if ("".equalsIgnoreCase(mapping.getSourceNetworkProfileName())) { mapping.setSourceNetworkProfileName(null); } if ((mapping.isSetTargetVnicProfile()) && (mapping.getTargetVnicProfile().isSetId())) { asGuid(mapping.getTargetVnicProfile().getId()); } } } }







@java.lang.Override protected void executeVdsBrokerCommand() { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().poll(); }
private org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> invokeSetupNetworksCommand(int timeout) { final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters parameters = createSetupNetworksParameters(timeout); org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> setupNetworksTask = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsBroker().runFutureVdsCommand(FutureVDSCommandType.HostSetupNetworks, parameters); if (parameters.isRollbackOnFailure()) { org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller poller = new org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller(); while (!(setupNetworksTask.isDone())) { poller.poll(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsId()); } } return setupNetworksTask; }
public boolean check(final org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller poller = new org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller(); final long startTime = java.lang.System.nanoTime(); while (((java.lang.System.nanoTime()) - startTime) < (org.ovirt.engine.core.bll.host.HostConnectivityChecker.VDSM_RESPONSIVENESS_PERIOD_IN_NANOS)) { if (poller.poll(host.getId())) { org.ovirt.engine.core.bll.host.HostConnectivityChecker.log.info("Engine managed to communicate with VDSM agent on host '{}' with address '{}' ('{}')", host.getName(), host.getHostName(), host.getId()); return true; } } return false; }


private long getTransferSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage image, org.ovirt.engine.core.compat.Guid domainId) { if ((TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromVdsm = imagesHandler.getVolumeInfoFromVdsm(image.getStoragePoolId(), domainId, image.getId(), image.getImageId()); return imageInfoFromVdsm.getApparentSizeInBytes(); } else { return (TransferImageCommand.getParameters().getTransferSize()) != 0 ? TransferImageCommand.getParameters().getTransferSize() : TransferImageCommand.getDiskImage().getActualSizeInBytes(); } }
@java.lang.Override protected void addVmToDb() { super.addVmToDb(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getOrigin()) == (org.ovirt.engine.core.common.businessentities.OriginType.KVM)) { importUtils.updateGraphicsDevices(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStoragePool().getCompatibilityVersion()); if (org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().isImportAsNewEntity()) { for (org.ovirt.engine.core.common.businessentities.VmDevice device : org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values()) { device.getId().setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()); } } vmDeviceDao.saveAll(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values()); } }


@org.junit.Test public void invalidProviderType() { when(provider.getType()).thenReturn(org.ovirt.engine.core.bll.provider.NetworkProviderValidatorTest.NON_NETWORK_PROVIDER_TYPE); assertThat(validator.providerTypeIsOpenstack(), failsWith(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_TYPE_MISMATCH)); }


@java.lang.Override protected void executeCommand() { final org.ovirt.engine.core.compat.Guid dataCenterId = org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getStoragePoolId(); final org.ovirt.engine.core.common.businessentities.network.Network network = getNetwork(); network.setDataCenterId(dataCenterId); org.ovirt.engine.core.common.action.ActionReturnValue addNetworkReturnValue = addNetwork(dataCenterId, network); if (!(addNetworkReturnValue.getSucceeded())) { propagateFailure(addNetworkReturnValue); return; } network.setId(addNetworkReturnValue.getActionReturnValue()); org.ovirt.engine.core.common.action.ActionReturnValue addVnicReturnValue = addVnicProfile(network, org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().isPublicUse()); if (!(addVnicReturnValue.getSucceeded())) { propagateFailure(addVnicReturnValue); return; } if (org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().isAttachToAllClusters()) { org.ovirt.engine.core.common.action.ActionReturnValue attachReturnValue = attachToAllClusters(dataCenterId, network.getId()); if (!(attachReturnValue.getSucceeded())) { propagateFailure(attachReturnValue); return; } } org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getReturnValue().setActionReturnValue(network.getId()); org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.setSucceeded(true); }

@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.String> event) { super.onValueChange(event); if (clientAgentType.isFirefox()) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { com.google.gwt.dom.client.Node favicon = com.google.gwt.user.client.DOM.getElementById("id-link-favicon"); if (favicon != null) { com.google.gwt.dom.client.Node parent = favicon.getParentNode(); favicon.removeFromParent(); parent.appendChild(favicon); } }); } }

public void applySearchString(java.lang.String searchString) { if ((modelProvider.getModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?, ? extends org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>> listModel = modelProvider.getModel(); if ((org.ovirt.engine.core.compat.StringHelper.isNotNullOrEmpty(searchString)) && (searchString.startsWith(listModel.getDefaultSearchString()))) { listModel.setSearchString(searchString); listModel.getSearchCommand().execute(); } } }
@java.lang.Override public void handlePlaceTransition(boolean linkClicked) { if (((hasSelection()) && (hasSelectionDetails())) && linkClicked) { placeManager.revealPlace(getSubTabRequest()); } else { placeManager.revealPlace(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getMainViewRequest()); } }

void onRollback();
void onSuccess();

@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(snapshot().id()); optional(restoreMemory()); optional(disks()[COLLECTION].id()); optional(disks()[COLLECTION].imageId()); optional(disks()[COLLECTION].snapshot().id()); }
public void persistCommand(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity, org.ovirt.engine.core.bll.context.CommandContext cmdContext) { initChildHierarchy(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getId())) { return; } persistCommand(cmdEntity); if (cmdContext != null) { contextsCache.put(cmdEntity.getId(), cmdContext); } }
public boolean hasCommandEntitiesWithRootCommandId(org.ovirt.engine.core.compat.Guid rootCommandId) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.keySet()) { cmdEntity = commandsCache.get(cmdId); if ((((cmdEntity != null) && (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getRootCommandId())))) && (!(cmdEntity.getRootCommandId().equals(cmdId)))) && (cmdEntity.getRootCommandId().equals(rootCommandId))) { return true; } } return false; }
public void removeCommand(org.ovirt.engine.core.compat.Guid commandId) { commandsCache.remove(commandId); contextsCache.remove(commandId); updateCmdHierarchy(commandId); }
public java.util.List<org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity> getCommandAssociatedEntities(org.ovirt.engine.core.compat.Guid cmdId) { return commandsCache.getCommandAssociatedEntities(cmdId); }
public java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> getCommands(boolean onlyWithCallbackEnabled) { java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> cmdEntities = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.keySet()) { cmdEntity = commandsCache.get(cmdId); if ((!onlyWithCallbackEnabled) || (commandsCache.get(cmdId).isCallbackEnabled())) { cmdEntities.add(cmdEntity); } } return cmdEntities; }
public java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> getChildCmdsByParentCmdId(org.ovirt.engine.core.compat.Guid cmdId) { return commandsCache.getChildCmdsByParentCmdId(cmdId); }
public void updateCommandExecuted(org.ovirt.engine.core.compat.Guid commandId) { commandsCache.updateCommandExecuted(commandId); }
public java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsByEntityId(org.ovirt.engine.core.compat.Guid entityId) { return commandsCache.getCommandIdsByEntityId(entityId); }
public void updateCallbackNotified(final org.ovirt.engine.core.compat.Guid commandId) { commandsCache.updateCallbackNotified(commandId); }
public void persistCommand(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getId())) { return; } org.ovirt.engine.core.common.businessentities.CommandEntity existingCmdEntity = commandsCache.get(cmdEntity.getId()); if (existingCmdEntity != null) { cmdEntity.setExecuted(existingCmdEntity.isExecuted()); cmdEntity.setCallbackNotified(existingCmdEntity.isCallbackNotified()); } commandsCache.put(cmdEntity); if ((cmdEntity.isCallbackEnabled()) || (((!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getParentCommandId()))) && ((commandsCache.get(cmdEntity.getParentCommandId())) != null)) && (commandsCache.get(cmdEntity.getParentCommandId()).isCallbackEnabled()))) { buildCmdHierarchy(cmdEntity); if (!(cmdEntity.isCallbackNotified())) { addToCallbackMap(cmdEntity); } } }
public org.ovirt.engine.core.bll.CommandBase<?> retrieveCommand(org.ovirt.engine.core.compat.Guid commandId) { return retrieveCommand(commandsCache.get(commandId), retrieveCommandContext(commandId)); }
public void persistCommandAssociatedEntities(java.util.Collection<org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity> cmdAssociatedEntities) { commandsCache.persistCommandAssociatedEntities(cmdAssociatedEntities); }
public org.ovirt.engine.core.bll.context.CommandContext retrieveCommandContext(org.ovirt.engine.core.compat.Guid cmdId) { return contextsCache.get(cmdId); }
public void updateCommandData(org.ovirt.engine.core.compat.Guid commandId, java.util.Map<java.lang.String, java.io.Serializable> data) { commandsCache.updateCommandData(commandId, data); }
public org.ovirt.engine.core.common.businessentities.CommandEntity getCommandEntity(org.ovirt.engine.core.compat.Guid commandId) { return org.ovirt.engine.core.compat.Guid.isNullOrEmpty(commandId) ? null : commandsCache.get(commandId); }
public java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsBySessionSeqId(long engineSessionSeqId) { java.util.List<org.ovirt.engine.core.compat.Guid> cmdIds = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.keySet()) { cmdEntity = commandsCache.get(cmdId); if (((cmdEntity != null) && ((cmdEntity.getEngineSessionSeqId()) != (org.ovirt.engine.core.bll.aaa.SsoSessionUtils.EMPTY_SESSION_SEQ_ID))) && ((cmdEntity.getEngineSessionSeqId()) == engineSessionSeqId)) { cmdIds.add(cmdId); } } return cmdIds; }
@javax.annotation.PostConstruct private void handleUnmanagedCommands() { java.util.List<org.ovirt.engine.core.common.businessentities.AsyncTask> asyncTasks = asyncTaskDao.getAll(); java.util.Set<org.ovirt.engine.core.compat.Guid> asyncTaskManagerManagedCommands = asyncTasks.stream().filter(( x) -> (x.getVdsmTaskId()) != null).map(( x) -> x.getRootCommandId()).collect(java.util.stream.Collectors.toSet()); asyncTaskManagerManagedCommands.addAll(asyncTasks.stream().filter(( x) -> (x.getVdsmTaskId()) != null).map(( x) -> x.getCommandId()).collect(java.util.stream.Collectors.toSet())); getCommands(false).stream().filter(( x) -> !(x.isCallbackEnabled())).filter(( x) -> (x.getCommandStatus()) == CommandStatus.ACTIVE).filter(( x) -> !(asyncTaskManagerManagedCommands.contains(x.getId()))).forEach(( x) -> commandsCache.updateCommandStatus(x.getId(), CommandStatus.ENDED_WITH_FAILURE)); getCommands(false).stream().filter(( x) -> x.isCallbackEnabled()).filter(( x) -> !(x.isCallbackNotified())).filter(( x) -> x.getCommandStatus().isDuringExecution()).filter(( x) -> !(asyncTaskManagerManagedCommands.contains(x.getId()))).map(( x) -> retrieveCommand(x.getId())).filter(java.util.Objects::nonNull).forEach(CommandBase::reacquireLocks); }
public void removeAllCommandsBeforeDate(final org.ovirt.engine.core.compat.DateTime cutoff) { commandsCache.removeAllCommandsBeforeDate(cutoff); synchronized(LOCK) { childHierarchyInitialized = false; } }
public org.ovirt.engine.core.compat.CommandStatus getCommandStatus(final org.ovirt.engine.core.compat.Guid commandId) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = commandsCache.get(commandId); if (cmdEntity != null) { return cmdEntity.getCommandStatus(); } return org.ovirt.engine.core.compat.CommandStatus.UNKNOWN; }
public void updateCommandStatus(final org.ovirt.engine.core.compat.Guid commandId, final org.ovirt.engine.core.compat.CommandStatus status) { commandsCache.updateCommandStatus(commandId, status); }
private java.lang.String renderGigabyteSize(long size) { long sizeInGB = ((unit) == (org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit.GiB)) ? size : org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.GiB).longValue(); return org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.messages.gigabytes((sizeInGB >= 1 ? java.lang.String.valueOf(sizeInGB) : "< 1")); }
protected boolean isLunsAlreadyInUse(java.util.Set<java.lang.String> lunIds) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAll(); java.util.Set<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsUsedBySDs = new java.util.HashSet<>(); java.util.Set<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsUsedByDisks = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.storage.LUNs lun : lunsFromDb) { if (lunIds.contains(lun.getLUNId())) { if ((lun.getStorageDomainId()) != null) { lunsUsedBySDs.add(lun); } if ((lun.getDiskId()) != null) { lunsUsedByDisks.add(lun); } } } if (!(lunsUsedBySDs.isEmpty())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_LUNS_ALREADY_PART_OF_STORAGE_DOMAINS); java.util.Set<java.lang.String> formattedIds = lunsUsedBySDs.stream().map(( lun) -> getFormattedLunId(lun, lun.getStorageDomainName())).collect(java.util.stream.Collectors.toSet()); addValidationMessageVariable("lunIds", org.apache.commons.lang.StringUtils.join(formattedIds, ", ")); } if (!(lunsUsedByDisks.isEmpty())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_LUNS_ALREADY_USED_BY_DISKS); java.util.Set<java.lang.String> formattedIds = lunsUsedByDisks.stream().map(( lun) -> getFormattedLunId(lun, lun.getDiskAlias())).collect(java.util.stream.Collectors.toSet()); addValidationMessageVariable("lunIds", org.apache.commons.lang.StringUtils.join(formattedIds, ", ")); } return (!(lunsUsedBySDs.isEmpty())) || (!(lunsUsedByDisks.isEmpty())); }
protected java.lang.String getFormattedLunId(org.ovirt.engine.core.common.businessentities.storage.LUNs lun, java.lang.String usedByEntityName) { return java.lang.String.format("%1$s (%2$s)", lun.getLUNId(), usedByEntityName); }
@org.junit.Test public void validateVmShareableDisk() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); assertFalse(command.validate()); assertTrue(command.getReturnValue().getValidationMessages().contains(EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED.toString())); }
@org.junit.Test public void validateInvalidDestinationDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(dstStorageId); dstStorageDomain.setStatus(StorageDomainStatus.Active); dstStorageDomain.setStorageDomainType(StorageDomainType.ISO); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }
@org.junit.Test public void validateVmHavingDeviceSnapshotsPluggedToOtherVmsThatAreNotDown() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN)).when(diskValidator).isDiskPluggedToAnyNonDownVm(anyBoolean()); assertFalse(command.validate()); assertTrue(command.getReturnValue().getValidationMessages().contains(EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN.name())); }
@java.lang.Override protected boolean validate() { boolean validate = super.validate(); if (!validate) { auditLogDirector.log(this, AuditLogType.USER_MOVED_DISK_FINISHED_FAILURE); } if (!(getVm().isRunningAndQualifyForDisksMigration())) { return failValidation(EngineMessage.CANNOT_LIVE_MIGRATE_VM_SHOULD_BE_IN_PAUSED_OR_UP_STATUS); } setStoragePoolId(getVm().getStoragePoolId()); if (!(validateDestDomainsSpaceRequirements())) { return false; } org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getReturnValue().setValid(((isDiskNotShareable(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageId())))); if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getReturnValue().isValid())) { return false; } if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.setAndValidateDiskProfiles())) { return false; } return (validateCreateAllSnapshotsFromVmCommand()) && validate; }
@org.junit.Test public void validateCantLiveMigrateToBackupDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(srcStorageId); dstStorageDomain.setStatus(StorageDomainStatus.Active); dstStorageDomain.setBackup(true); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_VM_DISKS_ON_BACKUP_STORAGE); }
@org.junit.Test public void validateInvalidDestinationDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(dstStorageId); dstStorageDomain.setStatus(StorageDomainStatus.Active); dstStorageDomain.setStorageDomainType(StorageDomainType.ISO); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); assertFalse(command.validate()); assertTrue(command.getReturnValue().getValidationMessages().contains(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL.toString())); }
@org.junit.Test public void validateVmShareableDisk() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED); }



@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getBroker().getVdsStats(new GetStatsVDSCommandCallback()); }

@java.lang.Override protected void endSuccessfully() { org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.endActionOnDisks(); org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.freeLock(); convert(); org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.setSucceeded(true); }
protected void convert() { commandCoordinatorUtil.executeAsyncCommand(ActionType.ConvertVm, buildConvertVmParameters(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.cloneContextAndDetachFromParent()); }
@java.lang.Override protected void convert() { boolean useVirtV2V = (org.ovirt.engine.core.bll.exportimport.ImportVmFromOvaCommand.getParameters().getVm().getOrigin()) != (org.ovirt.engine.core.common.businessentities.OriginType.OVIRT); if (useVirtV2V) { commandCoordinatorUtil.executeAsyncCommand(ActionType.ConvertOva, buildConvertOvaParameters(), org.ovirt.engine.core.bll.exportimport.ImportVmFromOvaCommand.cloneContextAndDetachFromParent()); } else { commandCoordinatorUtil.executeAsyncCommand(ActionType.ExtractOva, buildExtractOvaParameters(), org.ovirt.engine.core.bll.exportimport.ImportVmFromOvaCommand.cloneContextAndDetachFromParent()); } }
protected void removeVm() { runInternalActionWithTasksContext(ActionType.RemoveVm, new org.ovirt.engine.core.common.action.RemoveVmParameters(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId(), true), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getLock()); }
protected org.ovirt.engine.core.common.action.AddDiskParameters buildAddDiskParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { image.setDiskAlias(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.renameDiskAlias(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getOrigin(), image.getDiskAlias())); org.ovirt.engine.core.common.action.AddDiskParameters diskParameters = new org.ovirt.engine.core.common.action.AddDiskParameters(image.getDiskVmElementForVm(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()), image); diskParameters.setStorageDomainId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStorageDomainId()); diskParameters.setParentCommand(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getActionType()); diskParameters.setParentParameters(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters()); diskParameters.setShouldRemainIllegalOnFailedExecution(true); diskParameters.setStorageDomainId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getDestDomainId()); return diskParameters; }


private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) { imagesToPreview = ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks()) != null) ? org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks() : diskImageDao.getAllSnapshotsForVmSnapshot(getDstSnapshot().getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(imagesToPreview, org.ovirt.engine.core.bll.snapshots.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.snapshots.ONLY_SNAPABLE); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }
@java.lang.Override public javax.ws.rs.core.Response previewSnapshot(org.ovirt.engine.api.model.Action action) { validateParameters(action, "snapshot.id"); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(guid, asGuid(action.getSnapshot().getId())); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { tryBackParams.setDisks(getParent().mapDisks(action.getDisks())); } javax.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action); return response; }
private void runTryBackToAllSnapshotsOfVm(final org.ovirt.engine.ui.uicommonweb.models.Model model, org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot, boolean memory, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks) { if (model != null) { model.startProgress(); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.TryBackToAllSnapshotsOfVm, new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vm.getId(), snapshot.getId(), memory, disks), ( result) -> { if (model != null) { model.stopProgress(); } if (result.getReturnValue().getSucceeded()) { cancel(); } }); }
private void onCustomPreview() { org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel previewSnapshotModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel) (getWindow())); org.ovirt.engine.core.common.businessentities.Snapshot snapshot = previewSnapshotModel.getSnapshotModel().getEntity(); boolean memory = java.lang.Boolean.TRUE.equals(previewSnapshotModel.getSnapshotModel().getMemory().getEntity()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = previewSnapshotModel.getSelectedDisks(); runTryBackToAllSnapshotsOfVm(previewSnapshotModel, vm, snapshot, memory, disks); }
private void onPreview() { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSelectedItem(); if (snapshot == null) { cancel(); return; } org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel) (getWindow())); boolean memory = false; java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = null; if (snapshotModel.isShowPartialSnapshotWarning()) { switch (snapshotModel.getPartialPreviewSnapshotOptions().getSelectedItem()) { case preserveActiveDisks : disks = snapshotModel.getDisks(); disks.addAll(org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel.imagesSubtract(getVmDisks(), disks)); break; case excludeActiveDisks : break; case openCustomPreviewDialog : setWindow(null); getCustomPreviewCommand().execute(); return; } } if (snapshotModel.isShowMemorySnapshotWarning()) { memory = snapshotModel.getMemory().getEntity(); } runTryBackToAllSnapshotsOfVm(snapshotModel, vm, snapshot, memory, disks); }
@java.lang.Override public javax.ws.rs.core.Response restore(org.ovirt.engine.api.model.Action action) { action.setAsync(false); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(parentId, guid); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { tryBackParams.setDisks(collection.mapDisks(action.getDisks())); } tryBackParams.setCorrelationId(org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESTORE_SNAPSHOT_CORRELATION_ID); javax.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action, PollingType.JOB); if ((response.getStatus()) == (Response.Status.OK.getStatusCode())) { org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters restoreParams = new org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters(parentId, org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT); restoreParams.setCorrelationId(org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESTORE_SNAPSHOT_CORRELATION_ID); javax.ws.rs.core.Response response2 = doAction(ActionType.RestoreAllSnapshots, restoreParams, action); if ((response2.getStatus()) != (Response.Status.OK.getStatusCode())) { return response2; } } return response; }






protected boolean validateSourceStorageDomain() { org.ovirt.engine.core.compat.Guid sourceDomainId = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(); if ((sourceDomainId == null) || (Guid.Empty.equals(sourceDomainId))) { sourceDomainId = getImage().getStorageIds().get(0); org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().setSourceDomainId(sourceDomainId); } org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(storageDomainDao.getForStoragePool(sourceDomainId, getImage().getStoragePoolId())); return validate(validator.isDomainExistAndActive()); }
protected boolean validateDestStorage() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain()); if ((!(validate(validator.isDomainExistAndActive()))) || (!(validate(validator.domainIsValidDestination())))) { return false; } boolean moveOrCopy = (isMoveOperation()) || (isCopyOperation()); if ((moveOrCopy && (getImage().isShareable())) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLUSTERFS))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS, java.lang.String.format("$%1$s %2$s", "diskAlias", getImage().getDiskAlias())); } return true; }




@java.lang.Override public void runningSucceded() { try { queryDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugPassthroughNics(); } finally { super.runningSucceded(); } }
public static java.lang.String crypt(java.lang.String password) { java.security.SecureRandom random = new java.security.SecureRandom(); byte[] r = new byte[org.ovirt.engine.core.uutils.crypto.CryptMD5.SALT_MAX_LENGTH]; char[] salt = new char[r.length]; random.nextBytes(r); for (int i = 0; i < (r.length); i++) { salt[i] = org.ovirt.engine.core.uutils.crypto.CryptMD5.b64t[(((r[i]) & 255) % (org.ovirt.engine.core.uutils.crypto.CryptMD5.b64t.length))]; } return org.ovirt.engine.core.uutils.crypto.CryptMD5.crypt(password, new java.lang.String(salt)); }
public double getActualDiskSize() { return getDiskImageMap().values().stream().mapToDouble(DiskImage::getActualSize).sum(); }
private void processUnmanagedVm() { unmanagedVm = true; org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vdsmVm.getVmDynamic(); vmDynamic.setRunOnVds(vdsManager.getVdsId()); saveDynamic(vmDynamic); }
protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntityPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); updates.setPhase(phase); return updateEntity(updates); }
private boolean pauseTransferIfNecessary(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval()) > 0) && (((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.INITIALIZING)) || ((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.TRANSFERRING)))) && ((((entity.getLastUpdated().getTime()) / 1000) + (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval())) < ts)) { log.warn("Transfer paused due to no updates in {} seconds. {}", (ts - ((entity.getLastUpdated().getTime()) / 1000)), getTransferDescription()); updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); return true; } return false; }
private void extendTicketIfNecessary(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((context.iterationTimestamp) >= ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getSessionExpiration()) - (getHostTicketRefreshAllowance()))) { log.info("Renewing transfer ticket for {}", getTransferDescription()); boolean extendSucceeded = extendImageTransferSession(context.entity); if (!extendSucceeded) { log.warn("Failed to renew transfer ticket for {}", getTransferDescription()); if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().isRetryExtendTicket()) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setRetryExtendTicket(false); } else { updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setRetryExtendTicket(true); } } } else { log.debug("Not yet renewing transfer ticket for {}", getTransferDescription()); } }
private void pollTransferStatus(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((((context.entity.getVdsId()) == null) || ((context.entity.getImagedTicketId()) == null)) || (!(org.ovirt.engine.core.common.FeatureSupported.getImageTicketSupported(vdsDao.get(context.entity.getVdsId()).getClusterCompatibilityVersion())))) { return; } org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation ticketInfo; try { ticketInfo = ((org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation) (runVdsCommand(VDSCommandType.GetImageTicket, new org.ovirt.engine.core.common.vdscommands.GetImageTicketVDSCommandParameters(context.entity.getVdsId(), context.entity.getImagedTicketId())).getReturnValue())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Could not get image ticket '{}' from vdsm", context.entity.getImagedTicketId(), e); updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer = updateTransferStatusWithTicketInformation(context.entity, ticketInfo); if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { finalizeDownloadIfNecessary(context, upToDateImageTransfer); } }
private org.ovirt.engine.core.common.action.TransferDiskImageParameters createInitParams() { org.ovirt.engine.core.common.action.TransferDiskImageParameters parameters = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(); parameters.setTransferType(TransferType.Download); parameters.setImageGroupID(diskImage.getId()); java.lang.String fileExtension = ((diskImage.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW)) ? ".qcow2" : ".raw"; parameters.setDownloadFilename(((diskImage.getDiskAlias()) + fileExtension)); parameters.setTransferSize(diskImage.getActualSizeInBytes()); return parameters; }
private boolean pauseTransferIfNecessary(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval()) > 0) && (((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.INITIALIZING)) || ((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.TRANSFERRING)))) && ((((entity.getLastUpdated().getTime()) / 1000) + (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval())) < ts)) { log.warn("Transfer paused due to no updates in {} seconds. {}", (ts - ((entity.getLastUpdated().getTime()) / 1000)), getTransferDescription()); updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); return true; } return false; }

private boolean isLeaseInfoUpdateNeeded() { return ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.CREATE_NEW_LEASE)) || ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.UPDATE_LEASE_INFO)); }
@java.lang.Override public javax.ws.rs.core.Response previewSnapshot(org.ovirt.engine.api.model.Action action) { validateParameters(action, "snapshot.id"); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(guid, asGuid(action.getSnapshot().getId())); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { tryBackParams.setDisks(getParent().mapDisks(action.getDisks())); } javax.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action); return response; }


@java.lang.Override public org.ovirt.engine.api.model.Vms list() { if (isFiltered()) { return mapCollection(getBackendCollection(QueryType.GetAllVms, new org.ovirt.engine.core.common.queries.QueryParametersBase(), SearchType.VM), true); } else { return mapCollection(getBackendCollection(SearchType.VM), false); } }


public static long greatestCommonDivisor(long a, long b) { while (b != 0) { a = b; b = a % b; } return a; }
public org.ovirt.engine.core.bll.ValidationResult canVnicWithExternalNetworkBePlugged() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.PLUGGED_UNLINKED_VM_INTERFACE_WITH_EXTERNAL_NETWORK_IS_NOT_SUPPORTED).when(((((org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.RequiredAction.PLUG) == (getRequiredAction())) && (!(nic.isLinked()))) && (isVnicAttachedToExternalNetwork()))); }
@org.junit.Before public void setUp() { prepareNetwork(commandNoCluster.getParameters().getExternalNetwork()); prepareNetwork(commandCluster.getParameters().getExternalNetwork()); when(backend.runInternalAction(eq(ActionType.AddNetwork), any(), any())).thenReturn(getAddNetworkReturnValue()); when(networkHelper.createVnicProfile(any())).thenReturn(new org.ovirt.engine.core.common.businessentities.network.VnicProfile()); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = new org.ovirt.engine.core.common.action.ActionReturnValue(); returnValue.setSucceeded(true); when(backend.runInternalAction(eq(ActionType.AddVnicProfile), any(), any())).thenReturn(returnValue); when(networkHelper.attachNetworkToClusters(eq(NETWORK_ID), any())).thenReturn(returnValue); org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = new org.ovirt.engine.core.common.queries.QueryReturnValue(); queryReturnValue.setReturnValue(getClusters()); queryReturnValue.setSucceeded(true); when(backend.runInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any(), any())).thenReturn(queryReturnValue); }
private void verifyCalls(boolean attachToAllClusters) { verify(backend).runInternalAction(eq(ActionType.AddNetwork), any(), any()); verify(networkHelper).createVnicProfile(any()); verify(backend).runInternalAction(eq(ActionType.AddVnicProfile), any(), any()); org.mockito.verification.VerificationMode expectedNumberOfCalls = (attachToAllClusters) ? times(1) : never(); verify(backend, expectedNumberOfCalls).runInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any(), any()); verify(networkHelper, expectedNumberOfCalls).attachNetworkToClusters(eq(NETWORK_ID), any()); }



protected java.lang.String getMemoryFromActiveSnapshot() { if (memoryFromSnapshotUsed) { return org.apache.commons.lang.StringUtils.EMPTY; } if ((getFlow()) == (org.ovirt.engine.core.common.action.RunVmParams.RunVmFlow.RESUME_HIBERNATE)) { return org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume(); } if (!(org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(org.ovirt.engine.core.bll.RunVmCommand.getVm().getClusterArch(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getCompatibilityVersion()))) { return org.apache.commons.lang.StringUtils.EMPTY; } return org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume(); }



@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { processRefreshVdsStatsResponse(((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result")))); refreshVdsRunTimeInfo(true); } catch (java.lang.Throwable t) { onFailure(t); } }


public java.lang.String getExternalNetworkProfileName() { return externalNetworkProfileName; }
@org.junit.Test public void testFindMappingEntry() { final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.VNIC_PROFILE1_NAME, externalVnicProfileMappings); assertThat(actual.get(), sameInstance(externalVnicProfileMapping1)); }

@org.junit.Test public void testFindMappingEntryNotFound() { final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(("not" + (org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.NETWORK_NAME)), org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.VNIC_PROFILE2_NAME, externalVnicProfileMappings); assertThat(actual, is(java.util.Optional.empty())); }
public static void validateRegistrationVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource br, org.ovirt.engine.api.model.Action action) { if (!(action.isSetRegistrationConfiguration())) { return; } if (!(action.getRegistrationConfiguration().isSetVnicProfileMappings())) { return; } org.ovirt.engine.api.model.RegistrationVnicProfileMappings mappings = action.getRegistrationConfiguration().getVnicProfileMappings(); br.validateParameters(mappings, "registrationVnicProfileMappings"); for (org.ovirt.engine.api.model.RegistrationVnicProfileMapping mapping : mappings.getRegistrationVnicProfileMappings()) { br.validateParameters(mapping, "from"); if ((mapping.getFrom().getName()) == null) { br.validateParameters(mapping, "from.name"); } br.validateParameters(mapping, "from.network"); if ((mapping.getFrom().getNetwork().getName()) == null) { br.validateParameters(mapping, "from.network.name"); } if ("".equalsIgnoreCase(mapping.getFrom().getName())) { mapping.getFrom().setName(null); } if ("".equalsIgnoreCase(mapping.getFrom().getNetwork().getName())) { mapping.getFrom().getNetwork().setName(null); } if ((mapping.isSetTo()) && (mapping.getTo().isSetId())) { asGuid(mapping.getTo().getId()); } } }
@org.junit.Test public void testFindMappingEntryEmptyInput() { final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.VNIC_PROFILE1_NAME, java.util.Collections.emptyList()); assertThat(actual, is(java.util.Optional.empty())); }
public org.ovirt.engine.core.compat.Guid getVnicProfileId() { return vnicProfileId; }
@org.junit.Test public void testFindMappingEntryEmptySourceVnicProfile() { final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(null, null, java.util.Collections.singletonList(emptySourceMapping)); assertThat(actual.get(), sameInstance(emptySourceMapping)); }
@org.junit.Test public void testFindMappingEntryEmptyExternal() { final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.VNIC_PROFILE1_NAME, java.util.Collections.singletonList(emptySourceMapping)); assertFalse(actual.isPresent()); }
private void updateVnicFromMapping(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic, org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping mapping) { if ((mapping.getVnicProfileId()) != null) { updateVnicUsingProfileId(vnic, mapping.getVnicProfileId()); } else { updateVnicSetNoProfile(vnic); } }
public java.lang.String getExternalNetworkName() { return externalNetworkName; }
public void setVnicProfileId(org.ovirt.engine.core.compat.Guid vnicProfileId) { this.vnicProfileId = vnicProfileId; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getDataCenter()))) { dataCenter_SelectedItemChanged(); } else if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getCluster()))) { cluster_SelectedItemChanged(); } else if (sender == (getConsoleAddressEnabled())) { consoleAddressChanged(); } else if ((ev.matchesDefinition(HasEntity.entityChangedEventDefinition)) && ((((sender == (getKernelCmdlineIommu())) || (sender == (getKernelCmdlineKvmNested()))) || (sender == (getKernelCmdlineUnsafeInterrupts()))) || (sender == (getKernelCmdlinePciRealloc())))) { if (isKernelCmdlineParsable()) { updateKernelCmdlineAccordingToCheckboxes(); } } }



@java.lang.Override protected void executeCommand() { java.util.Map<java.lang.String, java.lang.Object> raidParams = new java.util.HashMap<>(); if ((!(getParameters().getRaidType().equals(RaidType.NONE))) && (!(getParameters().getRaidType().equals(RaidType.RAID0)))) { raidParams.put("type", getParameters().getRaidType().getValue()); raidParams.put("pdCount", getParameters().getNoOfPhysicalDisksInRaidVolume()); raidParams.put("stripeSize", getParameters().getStripeSize()); } org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.CreateBrick, new org.ovirt.engine.core.common.vdscommands.gluster.CreateBrickVDSParameters(getVdsId(), getParameters().getLvName(), getParameters().getMountPoint(), raidParams, org.ovirt.engine.core.common.constants.gluster.GlusterConstants.FS_TYPE_XFS, getParameters().getDisks())); setSucceeded(returnValue.getSucceeded()); if (getSucceeded()) { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice = ((org.ovirt.engine.core.common.businessentities.gluster.StorageDevice) (returnValue.getReturnValue())); storageDevice.setMountPoint(getParameters().getMountPoint()); storageDevice.setGlusterBrick(true); saveStoageDevice(storageDevice); resetIsFreeFlag(getParameters().getDisks()); } else { handleVdsError(returnValue); } }
@org.junit.Test public void validateFailsForNoStorageDevice() { doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Collections.emptyList())).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
@org.junit.Test public void validateSucceeds() { doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Collections.singletonList(getStorageDevice("sda")))).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertTrue(cmd.validate()); }




private void initListBoxEditors() { raidTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.RaidType>()); }
@org.junit.Test public void validateFailsForDifferentStorageDevice() { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice1 = getStorageDevice("sda"); org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice2 = getStorageDevice("sdb"); storageDevice2.setDevType("SDA"); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Arrays.asList(storageDevice1, storageDevice2))).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
@org.junit.Test public void validateFailsForDeviceAlreadyInUse() { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice = getStorageDevice("sda"); storageDevice.setCanCreateBrick(false); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Collections.singletonList(storageDevice))).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }









@java.lang.Override public void testConnection() { try { getClient().execute(new com.woorea.openstack.base.client.OpenStackRequest(getClient(), com.woorea.openstack.base.client.HttpMethod.GET, "", null, org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.ApiRootResponse.class)); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.error("{} (OpenStack response error code: {})", e.getMessage(), e.getStatus()); org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.debug("Exception", e); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@org.junit.Test public void canCopyDiskFails() { org.ovirt.engine.core.common.businessentities.StorageDomain domain = createStorageDomainForDisk(StorageType.ISCSI); domain.setStorageFormat(StorageFormatType.V3); disk.setSize(1000); org.ovirt.engine.core.common.businessentities.storage.DiskImage child = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); child.setSize(1000); child.setStorageIds(java.util.Collections.singletonList(domain.getId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage parent = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); parent.setId(org.ovirt.engine.core.compat.Guid.newGuid()); parent.setSize(500); parent.setStorageIds(java.util.Collections.singletonList(domain.getId())); child.setParentId(parent.getParentId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = new java.util.ArrayList<>(2); diskImages.add(parent); diskImages.add(child); when(validator.getDiskImageDao().getAllSnapshotsForImageGroup(disk.getId())).thenReturn(diskImages); assertThat(validator.diskWasExtendedAfterSnapshotWasTaken(domain), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.CANNOT_MOVE_DISK)); }
private boolean diskContainsPreExtendSnapshots() { return validate(createDiskValidator(getImage()).diskWasExtendedAfterSnapshotWasTaken(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain())); }
@java.lang.Override public void addMenuItem(int index, java.lang.String label, java.lang.String href) { org.gwtbootstrap3.client.ui.ListGroupItem newMenuItem = new org.gwtbootstrap3.client.ui.ListGroupItem(); org.gwtbootstrap3.client.ui.Anchor menuAnchor = new org.gwtbootstrap3.client.ui.Anchor(hashifyString(href)); org.gwtbootstrap3.client.ui.html.Span iconSpan = new org.gwtbootstrap3.client.ui.html.Span(); if (index < 0) { iconSpan.addStyleName(Styles.FONT_AWESOME_BASE); iconSpan.addStyleName(IconType.TACHOMETER.getCssName()); newMenuItem.addStyleName(Styles.ACTIVE); index = 0; } menuAnchor.add(iconSpan); org.gwtbootstrap3.client.ui.html.Span labelSpan = new org.gwtbootstrap3.client.ui.html.Span(); labelSpan.setText(label); labelSpan.addStyleName(PatternflyStyles.LIST_GROUP_ITEM_VALUE); menuAnchor.add(labelSpan); newMenuItem.add(menuAnchor); hrefToGroupLabelMap.put(href, newMenuItem); if (index > (menuListGroup.getWidgetCount())) { menuListGroup.add(newMenuItem); } else { menuListGroup.insert(newMenuItem, index); } }


void addMenuItem(int index, java.lang.String label, java.lang.String href);
public void addMainContentView(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, int priority, boolean defaultPlace) { menuPresenterWidget.addMenuItem(priority, label, historyToken); dynamicUrlContentProxyFactory.create(historyToken, contentUrl); placeManager.setDefaultPlace(historyToken); }


@java.lang.Deprecated public void addMainTab(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { addMainContentView(label, historyToken, contentUrl, options.getPriority().intValue(), options.getDefaultPlace().booleanValue()); }


public void addMenuItem(int index, java.lang.String label, java.lang.String historyToken) { getView().addMenuItem(index, label, historyToken); }
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity) { super.update(entity); removeNameServersByDnsResolverConfigurationId(entity.getId()); saveNameServersByDnsResolverConfigurationId(entity.getId(), entity.getNameServers()); }
@java.lang.Override public void remove(org.ovirt.engine.core.compat.Guid id) { removeNameServersByDnsResolverConfigurationId(id); super.remove(id); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity) { entity.setId(org.ovirt.engine.core.compat.Guid.newGuid()); super.save(entity); saveNameServersByDnsResolverConfigurationId(entity.getId(), entity.getNameServers()); }
@java.lang.Override protected void writeFileForLunDisk(org.ovirt.engine.core.common.businessentities.storage.LunDisk lun) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "id", lun.getId().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "href", org.ovirt.engine.core.utils.ovf.OvfParser.createLunFile(lun)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "disk_storage_type", lun.getDiskStorageType().name()); }
@java.lang.Override protected void writeHeader() { super.writeHeader(); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "version", org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdcVersion)); }
protected void writeHeader() { _instanceId = 0; _writer.writeStartDocument(false); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_URI); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.VSSD_PREFIX, org.ovirt.engine.core.utils.ovf.VSSD_URI); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.XSI_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); _writer.writeStartElement(org.ovirt.engine.core.utils.ovf.OVF_URI, "Envelope"); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.VSSD_PREFIX, org.ovirt.engine.core.utils.ovf.VSSD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XSI_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); }

@java.lang.Override protected void startVirtualSystem() { _writer.writeStartElement("Content"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "id", "out"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", ((OVF_PREFIX) + ":VirtualSystem_Type")); }
@java.lang.Override protected void writeFile(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "href", org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(image)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "id", image.getImageId().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "size", java.lang.String.valueOf(image.getActualSizeInBytes())); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "description", org.apache.commons.lang.StringUtils.defaultString(image.getDescription())); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "disk_storage_type", image.getDiskStorageType().name()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "cinder_volume_type", org.apache.commons.lang.StringUtils.defaultString(image.getCinderVolumeType())); }
@java.lang.Override protected void writeOS() { _writer.writeStartElement("Section"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "id", vmBase.getId().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "required", "false"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", ((OVF_PREFIX) + ":OperatingSystemSection_Type")); _writer.writeElement("Info", "Guest Operating System"); _writer.writeElement("Description", osRepository.getUniqueOsNames().get(vmBase.getOsId())); _writer.writeEndElement(); }

private void writeDiskParentRef(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { if (image.getParentId().equals(Guid.Empty)) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "parentRef", ""); } else { int i = 0; while (_images.get(i).getImageId().equals(image.getParentId())) { i++; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> res = _images.subList(i, ((_images.size()) - 1)); if ((res.size()) > 0) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "parentRef", org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(res.get(0))); } else { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "parentRef", ""); } } }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { if (isCopyOperation()) { if (!(Guid.Empty.equals(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getVmTemplateId()))) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getVmTemplateId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.TEMPLATE, getDiskIsBeingMigratedMessage())); } } else { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> vmsForDisk = getVmsWithVmDeviceInfoForDiskId(); if (!(vmsForDisk.isEmpty())) { return vmsForDisk.stream().collect(java.util.stream.Collectors.toMap(( p) -> p.getFirst().getId().toString(), ( p) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, getDiskIsBeingMigratedMessage()))); } } return null; }


@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.queries.QueryReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().runInternalQuery(QueryType.GetAuthzGroupsByUserId, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters()); java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> authzGroups = returnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> groupsIds = authzGroups.stream().map(( g) -> dbGroupDao.getByExternalId(g.getAuthz(), g.getId())).filter(java.util.Objects::nonNull).map(( g) -> g.getId()).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getQueryReturnValue().setReturnValue(permissionDao.getAllForAdElementAndGroups(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId(), groupsIds, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().isFiltered())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id, java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered) { int appMode = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ApplicationMode); org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("ad_element_id", id).addValue("user_groups", createArrayOf("uuid", groupIds.toArray())).addValue("is_filtered", isFiltered).addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetPermissionsByAdElementIdAndGroupIds", org.ovirt.engine.core.dao.PermissionDaoImpl.permissionRowMapper, parameterSource); }
java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id, java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered);
@java.lang.Override public void deallocate(org.ovirt.engine.core.common.businessentities.network.VmNic nic) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic); if (port != null) { getClient().ports().delete(port.getId()).execute(); } } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> allocate(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.VDS host, boolean ignoreSecurityGroupsOnUpdate) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic); java.util.List<java.lang.String> securityGroups = getSecurityGroups(vnicProfile); java.lang.String hostId = getHostId(host); if (port == null) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(network.getProvidedBy()); com.woorea.openstack.quantum.model.Port portForCreate = createNewPortForAllocate(nic, securityGroups, hostId, externalNetwork); port = getClient().ports().create(portForCreate).execute(); } else { boolean securityGroupsChanged = (!ignoreSecurityGroupsOnUpdate) && (securityGroupsChanged(port.getSecurityGroups(), securityGroups)); boolean hostChanged = hostChanged(port, hostId); updatePort(port, securityGroupsChanged, hostChanged, securityGroups, hostId, nic); } java.util.Map<java.lang.String, java.lang.String> runtimeProperties = createPortAllocationRuntimeProperties(port); return runtimeProperties; } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override protected void executeCommand() { if ((getParameters().getRefresh()) || (getSessionDataContainer().isSsoOvirtAppApiScope(getParameters().getSessionId()))) { getSessionDataContainer().updateSessionLastActiveTime(getParameters().getSessionId()); } if (validatePermissions()) { if (validateInputs()) { long start = java.lang.System.currentTimeMillis(); try { returnValue.setSucceeded(true); executeQueryCommand(); } catch (java.lang.RuntimeException ex) { returnValue.setSucceeded(false); java.lang.Throwable th = (ex instanceof org.ovirt.engine.core.common.errors.EngineException) ? ex : ex.getCause(); if (th instanceof org.ovirt.engine.core.common.errors.EngineException) { org.ovirt.engine.core.common.errors.EngineException vdcExc = ((org.ovirt.engine.core.common.errors.EngineException) (th)); if ((vdcExc.getErrorCode()) != null) { returnValue.setExceptionString(vdcExc.getErrorCode().toString()); } else { returnValue.setExceptionString(vdcExc.getMessage()); } log.error("Query '{}' failed: {}", getClass().getSimpleName(), vdcExc.getMessage()); log.error("Exception", vdcExc); } else { returnValue.setExceptionString(ex.getMessage()); log.error("Query '{}' failed: {}", getClass().getSimpleName(), ex.getMessage()); log.error("Exception", ex); } } finally { log.debug("Query {} took {} ms", org.ovirt.engine.core.bll.QueriesCommandBase.getCommandName(), ((java.lang.System.currentTimeMillis()) - start)); } } else { log.error("Query execution failed due to invalid inputs: {}", returnValue.getExceptionString()); } } else { java.lang.String errMessage = "Query execution failed due to insufficient permissions."; log.error(errMessage); returnValue.setExceptionString(errMessage); } }
@java.lang.Override public void addSubnet(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet subnet) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(subnet.getExternalNetwork()); com.woorea.openstack.quantum.model.Subnet subnetForCreate = createNewSubnetEntity(subnet, externalNetwork); try { getClient().subnets().create(subnetForCreate).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public void remove(java.lang.String id) { try { getClient().networks().delete(id).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public void removeSubnet(java.lang.String id) { try { getClient().subnets().delete(id).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public java.lang.String add(org.ovirt.engine.core.common.businessentities.network.Network network) { com.woorea.openstack.quantum.model.Network networkForCreate = createNewNetworkEntity(network); try { com.woorea.openstack.quantum.model.Network createdNetwork = getClient().networks().create(networkForCreate).execute(); return createdNetwork.getId(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public void testConnection() { try { getClient().execute(new com.woorea.openstack.base.client.OpenStackRequest(getClient(), com.woorea.openstack.base.client.HttpMethod.GET, "", null, org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.ApiRootResponse.class)); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.error("{} (OpenStack response error code: {})", e.getMessage(), e.getStatus()); org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.debug("Exception", e); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAll() { try { com.woorea.openstack.quantum.model.Networks networks = getClient().networks().list().execute(); return map(networks.getList()); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
private void removeMemoryFromActiveSnapshot() { java.lang.String memory = org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume(); if (org.apache.commons.lang.StringUtils.isEmpty(memory)) { return; } snapshotDao.removeMemoryFromActiveSnapshot(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); if ((snapshotDao.getNumOfSnapshotsByMemory(memory)) == 0) { org.ovirt.engine.core.bll.RunVmCommand.removeMemoryDisks(memory); } }
private java.util.Collection<org.ovirt.engine.core.common.businessentities.Snapshot> getSnapshotsToBeExportedWithMemory() { if (org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getParameters().getCopyCollapse()) { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = snapshotDao.get(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVmId(), SnapshotType.ACTIVE); return !(activeSnapshot.getMemoryVolume().isEmpty()) ? java.util.Collections.singleton(activeSnapshot) : java.util.Collections.emptyList(); } else { return snapshotDao.getAll(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVmId()).stream().filter(( s) -> !(StringUtils.EMPTY.equals(s.getMemoryVolume()))).collect(java.util.stream.Collectors.toList()); } }
private void copyAllMemoryImages(org.ovirt.engine.core.compat.Guid containerID) { for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshotsWithMemory) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.action.ActionReturnValue vdcRetValue = runInternalActionWithTasksContext(ActionType.CopyImageGroup, buildMoveOrCopyImageGroupParametersForMemoryDumpImage(containerID, guids.get(0), guids.get(2), guids.get(3))); if (!(vdcRetValue.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(vdcRetValue.getFault().getError(), "Failed during ExportVmCommand"); } org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getTaskIdList().addAll(vdcRetValue.getVdsmTaskIdList()); vdcRetValue = runInternalActionWithTasksContext(ActionType.CopyImageGroup, buildMoveOrCopyImageGroupParametersForMemoryConfImage(containerID, guids.get(0), guids.get(4), guids.get(5))); if (!(vdcRetValue.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(vdcRetValue.getFault().getError(), "Failed during ExportVmCommand"); } org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getTaskIdList().addAll(vdcRetValue.getVdsmTaskIdList()); } }
private void restoreConfiguration(org.ovirt.engine.core.common.businessentities.Snapshot targetSnapshot) { removedSnapshot = snapshotDao.get(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVmId(), SnapshotType.ACTIVE); snapshotsToRemove.add(removedSnapshot.getId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().removeAllIllegalDisks(removedSnapshot.getId(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVmId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVm(), targetSnapshot, targetSnapshot.getId(), null, org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCompensationContext(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCurrentUser(), new org.ovirt.engine.core.bll.network.VmInterfaceManager(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getMacPool()), org.apache.commons.lang.StringUtils.isNotEmpty(targetSnapshot.getMemoryVolume())); snapshotDao.remove(targetSnapshot.getId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().addActiveSnapshot(targetSnapshot.getId(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVm(), SnapshotStatus.LOCKED, targetSnapshot.getMemoryVolume(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCompensationContext()); }
@java.lang.Override public int getNumOfSnapshotsByMemory(java.lang.String memoryVolume) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("memory_volume", getNullableRepresentation(memoryVolume)); return getCallsHandler().executeRead("GetNumOfSnapshotsByMemoryVolume", org.springframework.jdbc.core.SingleColumnRowMapper.newInstance(java.lang.Integer.class), parameterSource); }
@java.lang.Override protected void executeCommand() { if (isMemoryRemovable()) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.getParameters().getMemoryVolumes()); org.ovirt.engine.core.common.action.RemoveDiskParameters removeMemoryDumpDiskParameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters(guids.get(2)); removeMemoryDumpDiskParameters.setShouldBeLogged(false); runInternalAction(ActionType.RemoveDisk, removeMemoryDumpDiskParameters); org.ovirt.engine.core.common.action.RemoveDiskParameters removeMemoryMetadataDiskParameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters(guids.get(4)); removeMemoryMetadataDiskParameters.setShouldBeLogged(false); runInternalAction(ActionType.RemoveDisk, removeMemoryMetadataDiskParameters); } org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.setSucceeded(true); }
private void removeDiskImages() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getVm().getDiskMap().values(), org.ovirt.engine.core.bll.exportimport.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.exportimport.ONLY_ACTIVE); boolean shouldWipe = false; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images) { image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); image.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); shouldWipe |= image.isWipeAfterDelete(); } java.util.Set<java.lang.String> allMemoryVolumes = org.ovirt.engine.core.bll.memory.MemoryUtils.getMemoryVolumesFromSnapshots(getVm().getSnapshots()); for (java.lang.String memoryVolumes : allMemoryVolumes) { if (!(org.apache.commons.lang.StringUtils.isEmpty(memoryVolumes))) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(memoryVolumes); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = createMemoryDisk(guids.get(2), guids.get(3), shouldWipe); images.add(memoryDisk); org.ovirt.engine.core.common.businessentities.storage.DiskImage metadataDisk = createMemoryDisk(guids.get(4), guids.get(5), shouldWipe); images.add(metadataDisk); } } removeVmImages(images); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Snapshot.class, to = org.ovirt.engine.api.model.Snapshot.class) public static org.ovirt.engine.api.model.Snapshot map(org.ovirt.engine.core.common.businessentities.Snapshot entity, org.ovirt.engine.api.model.Snapshot template) { org.ovirt.engine.api.model.Snapshot model = (template != null) ? template : new org.ovirt.engine.api.model.Snapshot(); model.setId(entity.getId().toString()); if ((entity.getDescription()) != null) { model.setDescription(entity.getDescription()); } if ((entity.getCreationDate()) != null) { model.setDate(org.ovirt.engine.api.restapi.types.DateMapper.map(entity.getCreationDate(), null)); } if ((entity.getStatus()) != null) { model.setSnapshotStatus(org.ovirt.engine.api.restapi.types.SnapshotMapper.map(entity.getStatus(), null)); } if ((entity.getType()) != null) { model.setSnapshotType(org.ovirt.engine.api.restapi.types.SnapshotMapper.map(entity.getType(), null)); } if ((entity.getMemoryVolume()) != null) { model.setPersistMemorystate((!(entity.getMemoryVolume().isEmpty()))); } return model; }
private void writeSnapshotsSection() { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots = vm.getSnapshots(); if ((snapshots == null) || (snapshots.isEmpty())) { return; } _writer.writeStartElement("Section"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", "ovf:SnapshotsSection_Type"); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { _writer.writeStartElement("Snapshot"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "id", snapshot.getId().toString()); _writer.writeElement("Type", snapshot.getType().name()); _writer.writeElement("Description", snapshot.getDescription()); _writer.writeElement("CreationDate", org.ovirt.engine.core.utils.ovf.OvfParser.localDateToUtcDateString(snapshot.getCreationDate())); if (!(snapshot.getMemoryVolume().isEmpty())) { _writer.writeElement("Memory", snapshot.getMemoryVolume()); } if ((snapshot.getAppList()) != null) { _writer.writeElement("ApplicationList", snapshot.getAppList()); } if ((snapshot.getVmConfiguration()) != null) { _writer.writeElement("VmConfiguration", org.apache.commons.codec.binary.Base64.encodeBase64String(snapshot.getVmConfiguration().getBytes())); } _writer.writeEndElement(); } _writer.writeEndElement(); }
@java.lang.Override protected final void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.StorageDomain storage = getStorage(); T returnValue = getAllFromStorage(storage); org.ovirt.engine.core.bll.exportimport.GetAllFromExportDomainQuery.getQueryReturnValue().setReturnValue(returnValue); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(2), guids.get(3)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(2), guids.get(3)); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMemoryDisk(vm, sd.getStorageType(), vmOverheadCalculator, org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(guids.get(2)); memoryDisk.setImageId(guids.get(3)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(DiskImage::isWipeAfterDelete)); return memoryDisk; }
private void updateMemoryDisks(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(snapshot.getMemoryVolume()); snapshot.setMemoryDiskId(guids.get(2)); snapshot.setMetadataDiskId(guids.get(4)); }
private void addMemoryImages() { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getSnapshots().stream().filter(( snapshot) -> !(org.apache.commons.lang.StringUtils.isEmpty(snapshot.getMemoryVolume()))).forEach(( snapshot) -> { addDisk(createMemoryDisk(snapshot)); addDisk(createMetadataDisk(getVm(), snapshot)); }); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadataDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(4), guids.get(5)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(4), guids.get(5)); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMetadataDisk(org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(guids.get(4)); memoryDisk.setImageId(guids.get(5)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(DiskImage::isWipeAfterDelete)); return memoryDisk; }
public static java.util.Set<java.lang.String> getMemoryVolumesFromSnapshots(java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots) { java.util.Set<java.lang.String> memories = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { memories.add(snapshot.getMemoryVolume()); } memories.remove(StringUtils.EMPTY); return memories; }
protected boolean shouldRestoreMemory() { return ((!(memoryFromSnapshotUsed)) && (((getFlow()) == (org.ovirt.engine.core.common.action.RunVmParams.RunVmFlow.RESUME_HIBERNATE)) || (org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(org.ovirt.engine.core.bll.RunVmCommand.getVm().getClusterArch(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getCompatibilityVersion())))) && (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume()))); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured, reportedDnsResolverConfiguration, inFenceFlow, kernelFeatures); }
public int getAvailableUnitForScsiDisk(java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, boolean reserveFirstTwoLuns) { int unit = (reserveFirstTwoLuns) ? 2 : 0; if (vmDeviceUnitMap == null) { return unit; } while (vmDeviceUnitMap.containsValue(unit)) { unit++; } return unit; }
public org.ovirt.engine.core.bll.ValidationResult externalNetworkDetailsUnchanged(org.ovirt.engine.core.common.businessentities.network.Network newNetwork) { return ((((java.util.Objects.equals(network.getVlanId(), newNetwork.getVlanId())) && ((network.getMtu()) == (newNetwork.getMtu()))) && ((network.getStp()) == (newNetwork.getStp()))) && ((network.isVmNetwork()) == (newNetwork.isVmNetwork()))) && (java.util.Objects.equals(network.getProvidedBy(), newNetwork.getProvidedBy())) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_DETAILS_CANNOT_BE_EDITED); }
protected void setDefaultSwitchTypeIfNeeded() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if ((cluster.getRequiredSwitchTypeForCluster()) == null) { org.ovirt.engine.core.common.network.SwitchType defaultSwitchType = org.ovirt.engine.core.common.network.DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } }
private org.ovirt.engine.core.common.action.ActionReturnValue attachToAllClusters(org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.compat.Guid networkId) { org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = runInternalQuery(QueryType.GetClustersByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId)); java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = queryReturnValue.getReturnValue(); return networkHelper.attachNetworkToClusters(networkId, clusters.stream().map(Cluster::getId).collect(java.util.stream.Collectors.toList())); }
public void updateHostStatusAfterSuccessfulUpgrade() { org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicHostData = vdsDynamicDao.get(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVdsId()); dynamicHostData.setUpdateAvailable(false); vdsDynamicDao.update(dynamicHostData); if ((org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getVdsType()) == (org.ovirt.engine.core.common.businessentities.VDSType.VDS)) { if ((org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getParameters().getInitialStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance)) { setVdsStatus(VDSStatus.Maintenance); } else { if (org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getHighlyAvailableIsConfigured()) { haMaintenanceFailed = !(hostedEngineHelper.updateHaLocalMaintenanceMode(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds(), false)); } setVdsStatus(VDSStatus.Initializing); } } }
public static boolean isStatusOk(java.util.Map<java.lang.String, java.lang.Object> response) { if ((response.get("error")) != null) { throw new java.lang.RuntimeException(java.lang.String.format("%s: %s", response.get("error"), response.get("error_description"))); } return true; }

@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.utils.NetworkUtils.setNetworkVdsmName(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { networkDao.save(getNetwork()); if ((getNetwork().isVmNetwork()) && (getParameters().isVnicProfileRequired())) { vnicProfileDao.save(org.ovirt.engine.core.bll.network.dc.networkHelper.createVnicProfile(getNetwork())); } org.ovirt.engine.core.bll.network.dc.networkHelper.addPermissionsOnNetwork(getUserId(), getNetwork().getId()); return null; }); runClusterAttachment(); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getId()); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.setSucceeded(true); }
private org.ovirt.engine.core.common.action.ActionReturnValue addNetwork(org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.common.businessentities.network.Network network, boolean attachToAllClusters) { org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters params = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(dataCenterId, network); params.setVnicProfileRequired(false); if (attachToAllClusters) { params.setNetworkClusterList(networkHelper.createNetworkClusters(getAllClusterIdsInDataCenter(dataCenterId))); } return runInternalAction(ActionType.AddNetwork, params); }
void initialize(boolean engineStartup, java.util.List<java.lang.String> macsForMacPool) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.info("Initializing {}", this); this.macsStorage = createMacsStorage(this.rangesBoundaries); org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug("Initializing {} with macs: {}", this, macsForMacPool); java.util.List<java.lang.String> notAddedMacs = addMacs(macsForMacPool); if (!(notAddedMacs.isEmpty())) { if (engineStartup) { java.lang.String auditLogMessage = "Following MACs violates duplicity restriction, and was pushed into MAC pool without respect to it:" + notAddedMacs; auditLogDirector.log(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(), AuditLogType.MAC_ADDRESS_VIOLATES_NO_DUPLICATES_SETTING, auditLogMessage); forceAddMacs(notAddedMacs); } else { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.MAC_POOL_INITIALIZATION_FAILED, "Unable to initialize MAC pool due to existing duplicates"); } } org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.info("Finished initializing {}. Available MACs in pool: {}", this, macsStorage.getAvailableMacsCount()); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } oldMacPool = macPoolDao.get(getMacPoolId()); return ((validate(new org.ovirt.engine.core.bll.MacPoolValidator(oldMacPool).macPoolExists())) && (validate(new org.ovirt.engine.core.bll.MacPoolValidator(getMacPoolEntity()).hasUniqueName()))) && (validate(org.ovirt.engine.core.bll.UpdateMacPoolCommand.validateDefaultFlagIsNotChanged(oldMacPool, getMacPoolEntity()))); }
@java.lang.Override protected void executeCommand() { registerRollbackHandler(((org.ovirt.engine.core.utils.transaction.TransactionRollbackListener) (() -> org.ovirt.engine.core.bll.macPoolPerCluster.modifyPool(oldMacPool)))); macPoolDao.update(getMacPoolEntity()); macPoolPerCluster.modifyPool(getMacPoolEntity()); setSucceeded(true); getReturnValue().setActionReturnValue(getMacPoolId()); }





public void onSave() { if (((getProgress()) != null) || (!(validate()))) { return; } startProgress(); org.ovirt.engine.core.common.businessentities.VM vm = getVm(); java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> params = new java.util.ArrayList<>(); java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotDisksIds = null; if ((getSnapshotDisks().getSelectedItems()) != null) { snapshotDisksIds = getSnapshotDisks().getSelectedItems().stream().map(BaseDisk::getId).collect(java.util.stream.Collectors.toSet()); } org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters param = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(vm.getId(), getDescription().getEntity(), getMemory().getEntity(), snapshotDisksIds); param.setQuotaId(vm.getQuotaId()); params.add(param); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.CreateAllSnapshotsFromVm, params, ( result) -> { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel) (result.getState())); localModel.stopProgress(); getCancelCommand().execute(); }, this); }

protected javax.ws.rs.core.Response doAdd(org.ovirt.engine.api.model.Snapshot snapshot, boolean block) { validateParameters(snapshot, "description"); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters snapshotParams = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(parentId, snapshot.getDescription()); if (snapshot.isSetPersistMemorystate()) { snapshotParams.setSaveMemory(snapshot.isPersistMemorystate()); } if (snapshot.isSetDiskAttachments()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskToImageIds = mapDisks(snapshot.getDiskAttachments()); snapshotParams.setDiskIds(diskToImageIds.keySet()); snapshotParams.setDiskToImageIds(diskToImageIds); } return performCreate(ActionType.CreateAllSnapshotsFromVm, snapshotParams, new org.ovirt.engine.api.restapi.resource.BackendSnapshotsResource.SnapshotIdResolver(), block); }


private void createStatelessSnapshot() { warnIfNotAllDisksPermitSnapshots(); org.ovirt.engine.core.bll.RunVmCommand.log.info("Creating stateless snapshot for VM '{}' ({})", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters createAllSnapshotsFromVmParameters = buildCreateSnapshotParameters(); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.CreateAllSnapshotsFromVm, createAllSnapshotsFromVmParameters, createContextForStatelessSnapshotCreation()); org.ovirt.engine.core.bll.RunVmCommand.setLock(null); setSucceeded(actionReturnValue.getSucceeded()); if (!(actionReturnValue.getSucceeded())) { if (areDisksLocked(actionReturnValue)) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IRS_IMAGE_STATUS_ILLEGAL); } org.ovirt.engine.core.bll.RunVmCommand.getReturnValue().setFault(actionReturnValue.getFault()); org.ovirt.engine.core.bll.RunVmCommand.log.error("Failed to create stateless snapshot for VM '{}' ({})", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); } }











@org.junit.Test public void defaultProperties() { try { java.lang.String basedir = java.lang.System.getProperty("basedir"); assumeNotNull(basedir, "Test isn't run via Maven. Please set the basedir system property"); org.ovirt.engine.core.utils.osinfo.OsinfoPropertiesParser.parse(java.nio.file.Paths.get(basedir, "../../../../packaging/conf/osinfo-defaults.properties").toString()); } catch (java.lang.Exception e) { java.lang.System.err.println("oVirt-engine will fail to load with a broken osinfo properties file."); java.lang.System.err.println("Please fix the properties file or osinfo.jj grammar under org.ovirt.engine.core.utils.osinfo."); throw e; } }
private static org.ovirt.engine.core.common.utils.Pair dnsServersOnly() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setStartOnBoot(true); vmInit.setNetworks(java.util.Arrays.asList(underTest)); vmInit.setDnsSearch("search1 search2"); vmInit.setDnsServers("nameserver1 nameserver2 nameserver3"); java.lang.String expectedOutput = "{\n" + ((((((((((((((((((((((" \"services\": [\n" + " {\n") + " \"address\": \"nameserver1\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver2\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver3\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"search1\",\n") + " \"type\": \"dns-search\"\n") + " },\n") + " {\n") + " \"address\": \"search2\",\n") + " \"type\": \"dns-search\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> mapServices(org.ovirt.engine.core.common.businessentities.VmInit vmInit) { java.util.List<java.util.Map<java.lang.String, java.lang.Object>> services = new java.util.LinkedList<>(); if ((vmInit.getDnsServers()) != null) { java.lang.String[] dnsServers = vmInit.getDnsServers().split(" "); if ((dnsServers.length) > 0) { for (java.lang.String dnsServer : dnsServers) { java.util.Map<java.lang.String, java.lang.Object> service = new java.util.HashMap<>(); service.put("type", "dns-nameserver"); service.put("address", dnsServer); services.add(service); } } } if ((vmInit.getDnsSearch()) != null) { java.lang.String[] dnsSearch = vmInit.getDnsSearch().split(" "); if ((dnsSearch.length) > 0) { for (java.lang.String dnsServer : dnsSearch) { java.util.Map<java.lang.String, java.lang.Object> service = new java.util.HashMap<>(); service.put("type", "dns-search"); service.put("address", dnsServer); services.add(service); } } } return services; }

@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.compat.Guid cmdId = command.getCommandId(); if (status == (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { org.ovirt.engine.core.bll.SerialChildExecutingCommand serialChildExecutingCommand = ((org.ovirt.engine.core.bll.SerialChildExecutingCommand) (command)); if ((!anyFailed) || (serialChildExecutingCommand.ignoreChildCommandFailure())) { try { boolean endCommand = !(serialChildExecutingCommand.performNextOperation(completedChildren)); if (!endCommand) { return; } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.info("Command '{}' id: '{}' failed when attempting to perform the next operation, marking as FAILED '{}'", command.getActionType(), cmdId, childCmdIds, command.getCommandStatus()); serialChildExecutingCommand.handleFailure(); anyFailed = true; } } else { serialChildExecutingCommand.handleFailure(); } } else { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.info("Command '{}' id: '{}' execution didn't complete, not proceeding to perform the next operation", command.getActionType(), cmdId); } setCommandEndStatus(command, anyFailed, status, childCmdIds); }


public void setProperties(org.ovirt.engine.core.common.businessentities.gluster.BrickProperties brickProperties) { getStatus().setEntity(brickProperties.getStatus()); getPort().setEntity(brickProperties.getPort()); getPid().setEntity(brickProperties.getPid()); getTotalSize().setEntity(brickProperties.getTotalSize()); getFreeSize().setEntity(brickProperties.getFreeSize()); getDevice().setEntity(brickProperties.getDevice()); getBlockSize().setEntity(brickProperties.getBlockSize()); getMountOptions().setEntity(brickProperties.getMntOptions()); getFileSystem().setEntity(brickProperties.getFsName()); getRdmaPort().setEntity(brickProperties.getRdmaPort()); }

public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> getFreeSize() { return freeSize; }

public void setFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> freeSize) { this.freeSize = freeSize; }
@java.lang.Override public void setMainSelectedItem(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity selectedItem) { driver.edit(getDetailModel()); replicaFormItem.setIsAvailable(selectedItem.getVolumeType().isReplicatedType()); stripeFormItem.setIsAvailable(selectedItem.getVolumeType().isStripedType()); disperseCountFormItem.setIsAvailable(selectedItem.getVolumeType().isDispersedType()); redundancyCountFormItem.setIsAvailable(selectedItem.getVolumeType().isDispersedType()); java.util.ArrayList<com.google.gwt.user.client.ui.ValueLabel<java.lang.Long>> volumeCapacityDetails = new java.util.ArrayList(java.util.Arrays.<com.google.gwt.user.client.ui.ValueLabel<java.lang.Long>>asList(volumeTotalCapacity, volumeUsedCapacity, volumeFreeCapacity)); volumeCapacityDetailsLabel.setValue(volumeCapacityDetails); formBuilder.update(getDetailModel()); }


private void persistTopology(org.ovirt.engine.core.common.businessentities.VDS host, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> dbNics, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks, org.ovirt.engine.core.common.vdscommands.UserConfiguredNetworkData userConfiguredData) { vdsDynamicDao.updateDnsResolverConfiguration(host.getId(), host.getReportedDnsResolverConfiguration()); final org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersister networkInterfacesPersister = new org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersisterImpl(interfaceDao, host.getInterfaces(), dbNics, userConfiguredData.getUserOverriddenNicValuesByNicName()); networkInterfacesPersister.persistTopology(); createHostNetworkAttachmentsPersister(host, clusterNetworks, userConfiguredData).persistNetworkAttachments(); }

protected java.util.Stack<org.ovirt.engine.core.sso.utils.InteractiveAuth> getAuthSeq(org.ovirt.engine.core.sso.utils.SsoSession ssoSession) { java.lang.String scopes = ssoSession.getScope(); java.lang.String appAuthSeq = ssoContext.getSsoLocalConfig().getProperty("SSO_AUTH_LOGIN_SEQUENCE"); java.lang.String authSeq = null; if (!(org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList(scopes).contains("ovirt-ext=auth:sequence-priority="))) { authSeq = "~"; } else { for (java.lang.String scope : org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList(scopes)) { if (scope.startsWith("ovirt-ext=auth:sequence-priority=")) { java.lang.String[] tokens = scope.trim().split("=", 3); authSeq = tokens[2]; } } } java.util.List<org.ovirt.engine.core.sso.utils.InteractiveAuth> authSeqList = org.ovirt.engine.core.sso.servlets.OAuthAuthorizeServlet.getAuthListForSeq(authSeq); if ((org.apache.commons.lang.StringUtils.isNotEmpty(authSeq)) && (authSeq.startsWith("~"))) { for (char c : appAuthSeq.toCharArray()) { if (!(authSeqList.contains(org.ovirt.engine.core.sso.utils.InteractiveAuth.valueOf(("" + c))))) { authSeqList.add(org.ovirt.engine.core.sso.utils.InteractiveAuth.valueOf(("" + c))); } } authSeqList.retainAll(org.ovirt.engine.core.sso.servlets.OAuthAuthorizeServlet.getAuthListForSeq(appAuthSeq)); } java.util.Collections.reverse(authSeqList); java.util.Stack<org.ovirt.engine.core.sso.utils.InteractiveAuth> authSeqStack = new java.util.Stack<>(); authSeqStack.addAll(authSeqList); return authSeqStack; }
private void deScheduleTimeout() { if ((scheduledTask) != null) { scheduledTask.cancel(true); scheduledTask = null; } }
public static void poolStatusChanged(org.ovirt.engine.core.compat.Guid poolId, org.ovirt.engine.core.common.businessentities.StoragePoolStatus status) { if ((org.ovirt.engine.core.bll.storage.pool.StoragePoolStatusHandler.nonOperationalPools.containsKey(poolId)) && (status != (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational))) { org.ovirt.engine.core.bll.storage.pool.StoragePoolStatusHandler handler = org.ovirt.engine.core.bll.storage.pool.StoragePoolStatusHandler.nonOperationalPools.get(poolId); if (handler != null) { synchronized(handler) { handler.deScheduleTimeout(); } } org.ovirt.engine.core.bll.storage.pool.StoragePoolStatusHandler.nonOperationalPools.remove(poolId); } else if (status == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational)) { final org.ovirt.engine.core.bll.storage.pool.StoragePoolStatusHandler storagePoolStatusHandler = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.bll.storage.pool.StoragePoolStatusHandler(poolId)); org.ovirt.engine.core.bll.storage.pool.StoragePoolStatusHandler.nonOperationalPools.put(poolId, storagePoolStatusHandler.scheduleTimeout()); } }
protected boolean perform() { try { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setStartTime(new java.util.Date()); if (((unplugPassthroughNics()) && (connectLunDisks(getDestinationVdsId()))) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } runningFailed(); return false; } catch (java.lang.Exception e) { runningFailed(); throw e; } }




protected boolean validate() { getName().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(255), new org.ovirt.engine.ui.uicommonweb.validation.I18NNameValidation() }); getDescription().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.AsciiOrNoneValidation() }); return (getName().getIsValid()) && (getDescription().getIsValid()); }
private java.nio.file.Path createInventoryFile(org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command) throws java.io.IOException { java.nio.file.Path inventoryFile = null; if ((command.inventoryFile()) == null) { org.ovirt.engine.core.common.utils.ansible.AnsibleExecutor.log.debug("Inventory hosts: {}", command.hostnames()); inventoryFile = java.nio.file.Files.createTempFile("ansible-inventory", ""); java.nio.file.Files.write(inventoryFile, org.apache.commons.lang.StringUtils.join(command.hostnames(), java.lang.System.lineSeparator()).getBytes()); command.inventoryFile(inventoryFile); } return inventoryFile; }


@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createIcon() { org.gwtbootstrap3.client.ui.html.Span iconSpan = new org.gwtbootstrap3.client.ui.html.Span(); iconSpan.addStyleName(Styles.FONT_AWESOME_BASE); if (SnapshotStatus.IN_PREVIEW.equals(getEntity().getStatus())) { iconSpan.addStyleName(IconType.EYE.getCssName()); } else if (SnapshotStatus.LOCKED.equals(getEntity().getStatus())) { iconSpan.addStyleName(IconType.LOCK.getCssName()); } else { iconSpan.addStyleName(IconType.CAMERA.getCssName()); } iconSpan.addStyleName(PatternflyConstants.PF_LIST_VIEW_ICON_SM); iconPanel.add(iconSpan); return iconPanel; }
protected void removeVm() { runInternalActionWithTasksContext(ActionType.RemoveVm, new org.ovirt.engine.core.common.action.RemoveVmParameters(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId(), true), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getLock()); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { switch (org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getActionState()) { case EXECUTE : return org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_STARTING_IMPORT_VM : org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_IMPORT_VM_FAILED; case END_FAILURE : return org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_IMPORT_VM_FAILED; case END_SUCCESS : default : return super.getAuditLogTypeValue(); } }
@org.junit.Test public void testGetSoundDevice() throws java.lang.Exception { assertEquals(org.ovirt.engine.core.utils.OsRepositoryImplTest.SOUND_DEVICE, OsRepositoryImpl.INSTANCE.getSoundDevice(777, null)); }
public org.ovirt.engine.core.common.businessentities.VmDevice addSoundDevice(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return addSoundDevice(vmBase.getId(), vmBase.getOsId(), clusterUtils.getCompatibilityVersion(vmBase)); }
@java.lang.Override public javax.ws.rs.core.Response export(org.ovirt.engine.api.model.Action action) { validateParameters(action, "storageDomain.id|name"); org.ovirt.engine.core.common.action.MoveOrCopyParameters params = new org.ovirt.engine.core.common.action.MoveOrCopyParameters(guid, getStorageDomainId(action)); if ((action.isSetExclusive()) && (action.isExclusive())) { params.setForceOverride(true); } return doAction(ActionType.ExportVmTemplate, params, action, PollingType.JOB); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostViolations = getHostViolationCount(false, hosts, vm, new org.ovirt.engine.core.common.scheduling.PerHostMessages()); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> retList = new java.util.ArrayList<>(); int score; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { score = (hostViolations.containsKey(host.getId())) ? hostViolations.get(host.getId()) : org.ovirt.engine.core.bll.scheduling.policyunits.VmToHostAffinityWeightPolicyUnit.DEFAULT_SCORE; retList.add(new org.ovirt.engine.core.common.utils.Pair(host.getId(), score)); } return retList; }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> allocate(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.VDS host, boolean ignoreSecurityGroupsOnUpdate) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic); java.util.List<java.lang.String> securityGroups = getSecurityGroups(vnicProfile); java.lang.String hostId = getHostId(host); if (port == null) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(network.getProvidedBy()); com.woorea.openstack.quantum.model.Port portForCreate = createNewPortForAllocate(nic, securityGroups, hostId, externalNetwork); port = getClient().ports().create(portForCreate).execute(); } else { boolean securityGroupsChanged = (!ignoreSecurityGroupsOnUpdate) && (securityGroupsChanged(port.getSecurityGroups(), securityGroups)); boolean hostChanged = hostChanged(port, hostId); updatePort(port, securityGroupsChanged, hostChanged, securityGroups, hostId, nic); } java.util.Map<java.lang.String, java.lang.String> runtimeProperties = createPortAllocationRuntimeProperties(port); return runtimeProperties; } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
protected java.util.Map<java.lang.String, java.lang.String> createPortAllocationRuntimeProperties(com.woorea.openstack.quantum.model.Port port) { java.util.Map<java.lang.String, java.lang.String> runtimeProperties = new java.util.HashMap<>(); runtimeProperties.put("vnic_id", port.getId()); java.lang.String providerType = getProvider().getType().name(); runtimeProperties.put("provider_type", providerType); if (((port.getSecurityGroups()) != null) && (!(port.getSecurityGroups().isEmpty()))) { runtimeProperties.put("security_groups", org.apache.commons.lang.StringUtils.join(port.getSecurityGroups(), ',')); } runtimeProperties.put("plugin_type", org.apache.commons.lang.StringUtils.defaultString(getProvider().getAdditionalProperties().getPluginType())); return runtimeProperties; }

@java.lang.Override protected int calcHostScore(float maxMemoryOfVdsInCluster, org.ovirt.engine.core.common.businessentities.VDS vds) { int maxScore = (MaxSchedulerWeight) - 1; return maxScore - (super.calcHostScore(maxMemoryOfVdsInCluster, vds)); }

private static int setNetworkBootOrder(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices, int bootOrder) { for (org.ovirt.engine.core.common.businessentities.VmDevice pluggedInterface : org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.sortInterfacesByName(vm, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getPluggedManagedInterfaces(devices))) { pluggedInterface.setBootOrder((++bootOrder)); } return bootOrder; }
private static int setDiskBootOrder(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices, int bootOrder) { java.util.LinkedList<org.ovirt.engine.core.common.businessentities.VmDevice> diskDevices = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.VmDevice device : devices) { if (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isDisk(device)) { org.ovirt.engine.core.compat.Guid id = device.getDeviceId(); if ((id != null) && (!(id.equals(Guid.Empty)))) { if ((device.getSnapshotId()) == null) { diskDevices.addFirst(device); } else { diskDevices.addLast(device); } } } } for (org.ovirt.engine.core.common.businessentities.VmDevice device : diskDevices) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getDiskVmElement(vm, device.getDeviceId()); if ((dve != null) && (dve.isBoot())) { device.setBootOrder((++bootOrder)); } } return bootOrder; }








private static java.lang.String extractSubnet(java.util.Map<java.lang.String, java.lang.Object> properties) { return ((java.lang.String) (properties.get("netmask"))); }

private static java.lang.String extractAddress(java.util.Map<java.lang.String, java.lang.Object> properties) { return ((java.lang.String) (properties.get("addr"))); }
@org.junit.Test public void testIsNetworkInSyncWhenIpv4GatewayBothBlank() { java.util.List<java.lang.String> blankValues = java.util.Arrays.asList(null, ""); initIpv4ConfigurationStaticBootProtocol(Ipv4BootProtocol.STATIC_IP); int blankIndex = org.ovirt.engine.core.utils.RandomUtils.instance().nextInt(2); ipv4Address.setGateway(blankValues.get(blankIndex)); iface.setIpv4Gateway(blankValues.get((blankIndex ^ 1))); assertThat(createTestedInstance().isNetworkInSync(), is(true)); }

public static void toStringBuilder(java.util.Map<java.lang.String, ?> map, java.lang.StringBuilder builder) { if (map == null) { return; } for (java.util.Map.Entry<java.lang.String, ?> entry : map.entrySet()) { if ((entry.getValue()) instanceof java.util.Map) { builder.append(java.lang.String.format("%1$s:", entry.getKey())); builder.append("\n"); org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(((java.util.Map<java.lang.String, java.lang.Object>) (entry.getValue())), builder); builder.append("\n"); } else if ((!((entry.getValue()) instanceof java.lang.String)) && ((entry.getValue()) instanceof java.lang.Iterable)) { builder.append(java.lang.String.format("%1$s:", entry.getKey())); builder.append("\n"); org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(((java.lang.Iterable) (entry.getValue())), builder); builder.append("\n"); } else if ((entry.getValue()) instanceof java.lang.Object[]) { builder.append(java.lang.String.format("%1$s:", entry.getKey())); builder.append("\n"); builder.append(java.util.Arrays.deepToString(((java.lang.Object[]) (entry.getValue())))); builder.append("\n"); } else { builder.append(java.lang.String.format("%1$s = %2$s", entry.getKey(), entry.getValue().toString())); builder.append("\n"); } } }


@java.lang.Override protected org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.common.businessentities.storage.ImageTransfer> createEntityRowMapper() { return ( rs, rowNum) -> { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); entity.setId(getGuidDefaultEmpty(rs, "command_id")); entity.setCommandType(org.ovirt.engine.core.common.action.ActionType.forValue(rs.getInt("command_type"))); entity.setPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.forValue(rs.getInt("phase"))); entity.setType(org.ovirt.engine.core.common.businessentities.storage.TransferType.forValue(rs.getInt("type"))); entity.setActive(rs.getBoolean("active")); entity.setLastUpdated(new java.util.Date(rs.getTimestamp("last_updated").getTime())); entity.setMessage(rs.getString("message")); entity.setVdsId(getGuid(rs, "vds_id")); entity.setDiskId(getGuid(rs, "disk_id")); entity.setImagedTicketId(getGuid(rs, "imaged_ticket_id")); entity.setProxyUri(rs.getString("proxy_uri")); entity.setDaemonUri(rs.getString("daemon_uri")); entity.setSignedTicket(rs.getString("signed_ticket")); entity.setBytesSent(rs.getLong("bytes_sent")); entity.setBytesTotal(rs.getLong("bytes_total")); return entity; }; }
private javax.ws.rs.core.Response performCreate(org.ovirt.engine.api.model.ImageTransfer imageTransfer, org.ovirt.engine.core.common.action.TransferDiskImageParameters params) { updateTransferType(imageTransfer, params); if ((imageTransfer.isSetHost()) && (imageTransfer.getHost().isSetId())) { params.setVdsId(org.ovirt.engine.core.compat.Guid.createGuidFromString(imageTransfer.getHost().getId())); } return performCreate(ActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, T vm) { vm.setMemSizeMb(model.getMemSize().getEntity()); vm.setMaxMemorySizeMb(model.getMaxMemorySize().getEntity()); if (model.getIoThreadsEnabled().getEntity()) { vm.setNumOfIoThreads(org.ovirt.engine.ui.uicommonweb.builders.vm.HwOnlyCoreUnitToVmBaseBuilder.DEFAULT_NUM_OF_IOTHREADS); } else { vm.setNumOfIoThreads(0); } vm.setNumOfSockets(model.getNumOfSockets().getSelectedItem()); vm.setCpuPerSocket(model.getCoresPerSocket().getSelectedItem()); vm.setThreadsPerCpu(model.getThreadsPerCore().getSelectedItem()); vm.setDefaultDisplayType(model.getDisplayType().getSelectedItem()); vm.setNumOfMonitors(model.getNumOfMonitors().getSelectedItem()); vm.setSmartcardEnabled(model.getIsSmartcardEnabled().getEntity()); vm.setSsoMethod(model.extractSelectedSsoMethod()); vm.setMinAllocatedMem(model.getMinAllocatedMemory().getEntity()); vm.setDefaultBootSequence(model.getBootSequence()); vm.setSingleQxlPci(model.getIsSingleQxlEnabled().getEntity()); vm.setCustomEmulatedMachine(model.getEmulatedMachine().getSelectedItem()); vm.setCustomCpuName(model.getCustomCpu().getSelectedItem()); }
public void updateDnsResolverConfiguration(org.ovirt.engine.core.compat.Guid vdsId, org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration reportedDnsResolverConfiguration) { if (reportedDnsResolverConfiguration == null) { dnsResolverConfigurationDao.removeByVdsDynamicId(vdsId); } else { if ((reportedDnsResolverConfiguration.getId()) == null) { dnsResolverConfigurationDao.save(reportedDnsResolverConfiguration); } else { dnsResolverConfigurationDao.update(reportedDnsResolverConfiguration); } } org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_guid", vdsId).addValue("dns_resolver_configuration_id", (reportedDnsResolverConfiguration == null ? null : reportedDnsResolverConfiguration.getId())); getCallsHandler().executeModification("UpdateVdsDynamicDnsResolverConfigurationId", parameterSource); }
protected java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { return java.util.stream.IntStream.range(0, NAMES.length).filter(( x) -> !notFound).boxed().collect(java.util.stream.Collectors.toMap(this::getVmTemplateEntity, java.util.ArrayList::new, ( u, v) -> null, java.util.HashMap::new)); }
protected java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> ret = new java.util.HashMap<>(); if (notFound) { return ret; } for (int i = 0; i < (NAMES.length); i++) { ret.put(getVmTemplateEntity(i), new java.util.ArrayList()); } return ret; }
protected java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> ret = new java.util.HashMap<>(); if (notFound) { return ret; } for (int i = 0; i < (NAMES.length); i++) { ret.put(getEntity(i), new java.util.ArrayList()); } return ret; }



protected int calcEvenDistributionScore(float maxMemoryOfVdsInCluster, org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm, boolean countThreadsAsCores) { int score = (MaxSchedulerWeight) - 1; java.lang.Integer effectiveCpuCores = slaValidator.getEffectiveCpuCores(vds, countThreadsAsCores); if ((effectiveCpuCores != null) && ((vds.getUsageCpuPercent()) != null)) { score = java.lang.Math.min((((int) (java.lang.Math.round(calcDistributeMetric(vds, vm, effectiveCpuCores)))) + 1), org.ovirt.engine.core.bll.scheduling.policyunits.MaxSchedulerWeight); } return score; }

public void loadVmFromOva() { clearForLoad(); if (!(validateOvaConfiguration())) { return; } startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmFromOva(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { if (returnValue.getSucceeded()) { org.ovirt.engine.core.common.businessentities.VM vm = returnValue.getReturnValue(); updateVms(java.util.Collections.singletonList(vm)); } else { setError(messages.failedToLoadOva(getOvaPath().getEntity())); } stopProgress(); }), getHosts().getSelectedItem().getId(), getOvaPath().getEntity()); }
@java.lang.Override protected void executeQueryCommand() { boolean originOvirt = false; org.ovirt.engine.core.common.businessentities.VM vm = null; java.lang.String ovf = null; try { ovf = runAnsibleQueryOvaInfoPlaybook(); originOvirt = ovf.contains("xmlns:ovirt"); vm = readVmFromOva(ovf); } catch (java.lang.Exception e) { if (originOvirt) { log.debug(("failed to parse a given ovf configuration: \n" + ovf), e); org.ovirt.engine.core.bll.GetVmFromOvaQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); } } if ((!originOvirt) && (vm == null)) { vm = getVmInfoFromOvaFile(); } if (originOvirt && (vm != null)) { vm.setOrigin(OriginType.OVIRT); } setReturnValue(vm); org.ovirt.engine.core.bll.GetVmFromOvaQuery.getQueryReturnValue().setSucceeded((vm != null)); }


public org.ovirt.engine.core.bll.ValidationResult isMacAssignableValidator() { boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); boolean illegalDuplicateMacUsage = (!allowDupMacs) && (macPool.isMacInUse(macAddress)); org.ovirt.engine.core.common.errors.EngineMessage failMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE; return org.ovirt.engine.core.bll.ValidationResult.failWith(failMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(failMessage, macAddress)).when(illegalDuplicateMacUsage); }
public java.util.List<java.lang.String> getMacsForMacPool(org.ovirt.engine.core.compat.Guid macPoolId) { java.util.List<org.ovirt.engine.core.compat.Guid> idsOfAllClustersHavingMacPool = getIdsOfAllClustersHavingMacPool(macPoolId); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vmsById = idsOfAllClustersHavingMacPool.stream().flatMap(( clusterId) -> vmDao.getAllForCluster(clusterId).stream()).collect(java.util.stream.Collectors.toMap(VM::getId, java.util.function.Function.identity())); java.util.stream.Stream<org.ovirt.engine.core.compat.Guid> idsOfRunningStatelessVMs = vmsById.values().stream().filter(VM::isRunning).filter(VM::isStateless).map(VM::getId); java.util.stream.Stream<org.ovirt.engine.core.common.businessentities.VM> statelessSnapshotsOfRunningVMs = idsOfRunningStatelessVMs.map(snapshotsManager::getVmConfigurationInStatelessSnapshotOfVm).filter(java.util.Optional::isPresent).map(java.util.Optional::get); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>> snapshottedInterfacesByVmId = statelessSnapshotsOfRunningVMs.collect(java.util.stream.Collectors.toMap(VM::getId, VM::getInterfaces)); java.util.List<java.lang.String> macsToBeAllocated = vmsById.keySet().stream().flatMap(( vmId) -> calculateAllMacsUsedInVmAndItsSnapshot(getVmInterfaces(vmId), snapshottedInterfacesByVmId.get(vmId))).collect(java.util.stream.Collectors.toList()); return macsToBeAllocated; }


protected org.ovirt.engine.core.bll.ValidationResult macAvailable() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic(); org.ovirt.engine.core.common.errors.EngineMessage failMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE; return org.ovirt.engine.core.bll.ValidationResult.failWith(failMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(failMessage, nic.getMacAddress())).when(new org.ovirt.engine.core.bll.network.VmInterfaceManager().tooManyPluggedInterfaceWithSameMac(nic, org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getMacPool())); }
protected void addNetworkMainInfo(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface, com.google.gwt.user.client.ui.HasWidgets targetPanel) { com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLElement(); com.google.gwt.user.client.ui.FlowPanel infoPanel = new com.google.gwt.user.client.ui.FlowPanel(); java.util.StringJoiner ipv4AddressJoiner = new java.util.StringJoiner(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER); java.util.StringJoiner ipv6AddressJoiner = new java.util.StringJoiner(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER); for (org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface guestAgentInterface : allGuestAgentData) { if (((guestAgentInterface.getMacAddress()) != null) && (networkInterface.getMacAddress().equals(guestAgentInterface.getMacAddress()))) { if ((guestAgentInterface.getIpv4Addresses()) != null) { ipv4AddressJoiner.add(java.lang.String.join(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER, guestAgentInterface.getIpv4Addresses())); } if ((guestAgentInterface.getIpv6Addresses()) != null) { ipv6AddressJoiner.add(java.lang.String.join(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER, guestAgentInterface.getIpv6Addresses())); } } } java.lang.String ipv4Address = ipv4AddressJoiner.toString(); if (ipv4Address.isEmpty()) { ipv4Address = org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.notAvailableLabel(); } java.lang.String ipv6Address = ipv6AddressJoiner.toString(); if (ipv6Address.isEmpty()) { ipv6Address = org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.notAvailableLabel(); } addStackedDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.networkNameInterface()), com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(((networkInterface.getNetworkName()) != null ? networkInterface.getNetworkName() : org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.unAvailablePropertyLabel())), dl); addStackedDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.ipv4VmGuestAgent()), com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(ipv4Address), dl); addStackedDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.ipv6VmGuestAgent()), com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(ipv6Address), dl); addStackedDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.macVmGuestAgent()), com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(networkInterface.getMacAddress()), dl); infoPanel.getElement().appendChild(dl); targetPanel.add(infoPanel); }
private com.google.gwt.user.client.ui.IsWidget createStatisticsAdditionalInfo() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); panel.addStyleName(PatternflyConstants.PF_LIST_VIEW_ADDITIONAL_INFO_ITEM); statisticsExpand = new org.ovirt.engine.ui.common.widget.listgroup.ExpandableListViewItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.statistics())); getClickHandlerRegistrations().add(statisticsExpand.addClickHandler(this)); panel.add(statisticsExpand); return panel; }
private com.google.gwt.user.client.ui.IsWidget createGeneralAdditionalInfo() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); panel.addStyleName(PatternflyConstants.PF_LIST_VIEW_ADDITIONAL_INFO_ITEM); generalExpand = new org.ovirt.engine.ui.common.widget.listgroup.ExpandableListViewItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.generalLabel())); getClickHandlerRegistrations().add(generalExpand.addClickHandler(this)); panel.add(generalExpand); return panel; }

private com.google.gwt.user.client.ui.IsWidget createNetworkFilterParameterAdditionalInfo() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); panel.addStyleName(PatternflyConstants.PF_LIST_VIEW_ADDITIONAL_INFO_ITEM); networkFilterParameterExpand = new org.ovirt.engine.ui.common.widget.listgroup.ExpandableListViewItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.networkFilterParametersLabel())); getClickHandlerRegistrations().add(networkFilterParameterExpand.addClickHandler(this)); panel.add(networkFilterParameterExpand); return panel; }
private void updateNics(java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel> nics) { nicList.clear(); java.util.Collections.sort(nics); java.util.List<org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkGroup> groups = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic : nics) { groups.add(new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkGroup(nic, eventBus, style)); } nicList.addAll(groups, (!(rendered))); }
private org.ovirt.engine.ui.common.widget.MenuBar menuFor(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item) { org.ovirt.engine.ui.common.widget.MenuBar menu = rootMenu(item); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> operationMap = item.getSetupModel().commandsFor(item); for (final java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> entry : operationMap.entrySet()) { final java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = entry.getValue(); if (entry.getKey().isUnary()) { assert (commands.size()) == 1 : "Got a NetworkCommand List with more than one Unary Operation"; menu.addItem(entry.getKey().getVerb(item), () -> executeCommand(entry.getKey(), commands.get(0))); } else { java.util.Collections.sort(commands, java.util.Comparator.comparing(NetworkCommand::getName, new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator())); org.ovirt.engine.ui.common.widget.MenuBar subMenu = subMenu(); for (final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand command : commands) { subMenu.addItem(new com.google.gwt.user.client.ui.MenuItem(command.getName(), () -> executeCommand(entry.getKey(), command))); } menu.addItem(entry.getKey().getVerb(item), subMenu); } } return menu; }
@org.junit.Test public void testAdd() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "00000001-0001-0001-0001-000000000011", "nics"); javax.ws.rs.core.Request request = mockRequest("POST"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/apidoc#services/host_nics/methods/add", fault.getDetail()); }
@org.junit.Test public void testUpdateWithNonGuidId() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "00000001-0001-0001-0001-000000000011", "nics", "116"); javax.ws.rs.core.Request request = mockRequest("PUT"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/apidoc#services/host_nic/methods/update", fault.getDetail()); }
@org.junit.Test public void testAction() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = mockUri("vms", "00000001-0001-0001-0001-000000000011", "freezefilesystems"); javax.ws.rs.core.Request request = mockRequest("POST"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/apidoc#services/vm/methods/freeze_filesystems", fault.getDetail()); }

@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmDisksFromDb() { vmHandler.updateDisksFromDb(org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getVm()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksFromDb = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.ONLY_SNAPABLE, org.ovirt.engine.core.bll.storage.disk.ONLY_ACTIVE); disksFromDb.addAll(org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.ONLY_PLUGGED)); return disksFromDb; }
public void loadVmFromOva() { clearForLoad(); if (!(validateOvaConfiguration())) { return; } startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmFromOva(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { if (returnValue.getSucceeded()) { org.ovirt.engine.core.common.businessentities.VM vm = returnValue.getReturnValue(); updateVms(java.util.Collections.singletonList(vm)); } else { setError(messages.failedToLoadOva(getOvaPath().getEntity())); } stopProgress(); }), getHosts().getSelectedItem().getId(), getOvaPath().getEntity()); }
private void updateVmDynamicData() { java.util.List<java.lang.String> changedFields = getChangedFields(dbVm, vdsmVm.getVmDynamic()); changedFields.removeAll(org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer.UNCHANGEABLE_FIELDS_BY_VDSM); if ((vdsmVm.getVmDynamic().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { changedFields.remove(VmDynamic.APPLICATIONS_LIST_FIELD_NAME); vdsmVm.getVmDynamic().setAppList(dbVm.getAppList()); } if (!(changedFields.isEmpty())) { dbVm.updateRuntimeData(vdsmVm.getVmDynamic(), vdsManager.getVdsId()); saveDynamic(dbVm); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface> filterGuestAgentInterfaces(java.util.List<org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface> nics) { nics = removeLoopbacks(nics); return nics; }

protected void destroyVm() { if (((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) && ((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getMigratingToVds()) != null)) { runVdsCommand(VDSCommandType.DestroyVm, buildDestroyVmVDSCommandParameters(org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getMigratingToVds())); } setActionReturnValue(runVdsCommand(VDSCommandType.DestroyVm, buildDestroyVmVDSCommandParameters(org.ovirt.engine.core.bll.StopVmCommandBase.getVdsId()))); }
private void initButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, org.ovirt.engine.ui.common.widget.action.ActionButton button) { button.setText(buttonDef.getText()); java.lang.String buttonId = buttonDef.getUniqueId(); if (buttonId != null) { button.asWidget().getElement().setId(org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId(getElementId(), buttonId)); } actionFormGroup.remove(actionKebab); actionFormGroup.add(button); actionFormGroup.add(actionKebab); actionItemMap.put(buttonDef, button); }
public org.ovirt.engine.ui.common.widget.action.ActionButton addDropdownComboActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> subActions, org.ovirt.engine.ui.common.widget.action.DropdownActionButton.SelectedItemsProvider<T> selectedItemsProvider) { org.ovirt.engine.ui.common.widget.action.DropdownActionButton<T> dropdownActionButton; if ((buttonDef.getIcon()) instanceof org.gwtbootstrap3.client.ui.constants.IconType) { dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider, true, ((org.gwtbootstrap3.client.ui.constants.IconType) (buttonDef.getIcon()))); } else { dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider, true, null); } initButton(buttonDef, dropdownActionButton); return dropdownActionButton; }
@java.lang.Override public org.ovirt.engine.ui.common.widget.action.ActionButton addMenuListItem(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef) { org.ovirt.engine.ui.common.widget.action.ActionAnchorListItem menuItem = new org.ovirt.engine.ui.common.widget.action.ActionAnchorListItem(menuItemDef.getText()); java.lang.String menuItemId = menuItemDef.getUniqueId(); if (menuItemId != null) { menuItem.asWidget().getElement().setId(org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId(getElementId(), menuItemId)); } actionItemMap.put(menuItemDef, menuItem); actionKebab.addMenuItem(menuItem); return menuItem; }
public org.ovirt.engine.ui.common.widget.action.ActionButton addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { org.ovirt.engine.ui.common.widget.action.SimpleActionButton newActionButton = createNewActionButton(buttonDef); initButton(buttonDef, newActionButton); return newActionButton; }
public void addMenuItem(org.ovirt.engine.ui.common.widget.action.ActionButton actionButton) { kebabMenu.add(actionButton); }
org.ovirt.engine.ui.common.widget.action.ActionButton addMenuListItem(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef);
public void addDetailPlaceActionButton(org.ovirt.engine.ui.webadmin.plugin.entity.EntityType mainTabEntityType, org.ovirt.engine.ui.webadmin.plugin.entity.EntityType subTabEntityType, java.lang.String label, org.ovirt.engine.ui.webadmin.plugin.api.ActionButtonInterface actionButtonInterface) { java.lang.String historyToken = mainTabEntityType.getSubTabHistoryToken(subTabEntityType); if (historyToken != null) { org.ovirt.engine.ui.common.presenter.AddActionButtonEvent.fire(this, historyToken, createButtonDefinition(label, actionButtonInterface)); } }
public org.ovirt.engine.ui.common.widget.action.ActionButton addDropdownActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> subActions, org.ovirt.engine.ui.common.widget.action.DropdownActionButton.SelectedItemsProvider<T> selectedItemsProvider) { org.ovirt.engine.ui.common.widget.action.DropdownActionButton<T> dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider); initButton(buttonDef, dropdownActionButton); return dropdownActionButton; }
public void addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { org.ovirt.engine.ui.common.widget.action.ActionButton newButton = ActionPanelPresenterWidget.getView().addActionButton(buttonDef); actionButtonDefinitions.add(buttonDef); initButton(buttonDef, newButton); }
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { if ((getActionPanelPresenterWidget()) != null) { for (org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> buttonDef : pluginActionButtonList) { getActionPanelPresenterWidget().addActionButton(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition) (buttonDef))); } } }

private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { if (hasActionPanelPresenterWidget()) { for (org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> buttonDef : pluginActionButtonList) { org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getActionPanelPresenterWidget().addActionButton(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition) (buttonDef))); } } }

public void addMenuPlaceActionButton(org.ovirt.engine.ui.webadmin.plugin.entity.EntityType entityType, java.lang.String label, org.ovirt.engine.ui.webadmin.plugin.api.ActionButtonInterface actionButtonInterface) { java.lang.String historyToken = entityType.getMainHistoryToken(); if (historyToken != null) { org.ovirt.engine.ui.common.presenter.AddActionButtonEvent.fire(this, historyToken, createButtonDefinition(label, actionButtonInterface)); } }
public void addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButton actionButton) { notificationKebab.addMenuItem(actionButton); notificationKebab.setVisible(((notificationKebab.getWidgetCount()) > 0)); }
public void addMenuListItem(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef) { org.ovirt.engine.ui.common.widget.action.ActionButton newActionMenuListItem = ActionPanelPresenterWidget.getView().addMenuListItem(menuItemDef); registerSelectionChangeHandler(menuItemDef); registerHandler(newActionMenuListItem.addClickHandler(( e) -> { menuItemDef.onClick(getSelectedItems()); })); registerHandler(menuItemDef.addInitializeHandler(( e) -> { updateMenuItem(menuItemDef); })); updateMenuItem(menuItemDef); }
org.ovirt.engine.ui.common.widget.action.ActionButton addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef);
@org.junit.Before public void setUp() { vm = createVm(); validator = new org.ovirt.engine.core.bll.validator.VmValidator(vm); when(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao()).thenReturn(vmNetworkInterfaceDao); when(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVnicProfileDao()).thenReturn(vnicProfileDao); }
public void setLabel(java.lang.String label) { this.label = label; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = new org.ovirt.engine.core.common.action.ActionReturnValue(); final org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getVdsId(); final java.lang.String sessionId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getSessionId(); if (new org.ovirt.engine.core.bll.pm.HostFenceActionExecutor(org.ovirt.engine.core.bll.pm.RestartVdsCommand.getVds()).isHostPoweredOff()) { returnValue.setSucceeded(true); } else { returnValue = executeVdsFenceAction(vdsId, sessionId, ActionType.StopVds); if ((org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.ActionType.VdsNotRespondingTreatment)) { updateHostInFenceFlow(vdsId, true); } } if (wasSkippedDueToPolicy(returnValue)) { org.ovirt.engine.core.bll.pm.RestartVdsResult restartVdsResult = new org.ovirt.engine.core.bll.pm.RestartVdsResult(); restartVdsResult.setSkippedDueToFencingPolicy(true); setActionReturnValue(restartVdsResult); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); setVdsStatus(VDSStatus.NonResponsive); return; } else if (returnValue.getSucceeded()) { executeFenceVdsManuallyAction(vdsId, sessionId); returnValue = executeVdsFenceAction(vdsId, sessionId, ActionType.StartVds); setSucceeded(returnValue.getSucceeded()); } else { handleError(); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); } if (!(org.ovirt.engine.core.bll.pm.RestartVdsCommand.getSucceeded())) { log.warn("Restart host action failed, updating host '{}' to '{}'", vdsId, VDSStatus.NonResponsive.name()); setVdsStatus(VDSStatus.NonResponsive); } updateHostInFenceFlow(vdsId, false); }

protected org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult fence(org.ovirt.engine.core.common.businessentities.pm.FenceActionType fenceAction, java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents) { org.ovirt.engine.core.bll.pm.PowerManagementHelper.AgentsIterator iterator = createFenceAgentsIterator(fenceAgents); org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result = null; while (iterator.hasNext()) { result = createFenceActionExecutor(iterator.next()).fence(fenceAction); if ((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS)) { break; } } return result; }
public static java.util.Map<java.lang.String, java.lang.Long> ioTuneMapFrom(org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos) { java.util.Map<java.lang.String, java.lang.Long> ioTuneMap = new java.util.HashMap<>(); ioTuneMap.put(VdsProperties.TotalBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxThroughput())); ioTuneMap.put(VdsProperties.ReadBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxReadThroughput())); ioTuneMap.put(VdsProperties.WriteBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxWriteThroughput())); ioTuneMap.put(VdsProperties.TotalIopsSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertIops(storageQos.getMaxIops())); ioTuneMap.put(VdsProperties.ReadIopsSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertIops(storageQos.getMaxReadIops())); ioTuneMap.put(VdsProperties.WriteIopsSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertIops(storageQos.getMaxWriteIops())); return ioTuneMap; }
java.lang.String ACTION_TYPE_FAILED_IMAGE_ALREADY_EXISTS();
protected boolean checkIfNeedToBeOverride() { if ((((isTemplate()) && (isCopyOperation())) && (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getForceOverride()))) && (getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_ALREADY_EXISTS); } return true; }

public boolean isSearchUsingTags() { return (((origText.contains("tag")) || (((getSearchObjectStr()) != null) && (getSearchObjectStr().equals(SearchObjects.VDC_USER_OBJ_NAME)))) || (getCrossRefObjList().contains(SearchObjects.VDC_STORAGE_POOL_OBJ_NAME))) || (getCrossRefObjList().contains(SearchObjects.VDC_STORAGE_DOMAIN_OBJ_NAME)); }
public java.lang.String getCpuNameByCpuId(java.lang.String name, org.ovirt.engine.core.compat.Version ver) { final org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager cpuFlagsManager = org.ovirt.engine.core.bll.CpuFlagsManagerHandler.managersDictionary.get(ver); return cpuFlagsManager != null ? cpuFlagsManager.getCpuNameByCpuId(name) : null; }
private java.lang.String generateDomainXml() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getNic(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getVmDevice(); org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder builder = new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getVm(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getVds().getId(), nic, vmDevice, vmInfoBuildUtils, (nic.isPassthrough() ? java.util.Collections.singletonMap(nic.getId(), vmDevice.getHostDevice()) : java.util.Collections.emptyMap())); java.lang.String libvirtXml = builder.buildHotplugNic(); java.lang.String prettyLibvirtXml = org.ovirt.engine.core.utils.XmlUtils.prettify(libvirtXml); if (prettyLibvirtXml != null) { log.info("NIC hot-set: {}", prettyLibvirtXml); } return libvirtXml; }
@org.junit.Test public void searchUsingTags() { java.lang.String[] searchTexts = new java.lang.String[]{ "Users: type=user", "Users: type=group", "Users: type=user and vm.id=12345678-1234-1234-1234-1234-123456789012", "Users: type=user and tag = foo", "Hosts: tag=foo" }; for (java.lang.String searchText : searchTexts) { assertTrue(new org.ovirt.engine.core.searchbackend.SyntaxChecker().analyzeSyntaxState(searchText, false).isSearchUsingTags()); } }
@org.junit.Test public void searchNotUsingTags() { java.lang.String[] searchTexts = new java.lang.String[]{ "Hosts:", "Vms:", "Datacenters:", "Clusters:" }; for (java.lang.String searchText : searchTexts) { assertFalse(new org.ovirt.engine.core.searchbackend.SyntaxChecker().analyzeSyntaxState(searchText, false).isSearchUsingTags()); } }
private java.lang.Integer deserializeValue(java.util.Map<java.lang.String, java.lang.Object> entry, java.lang.String curveKey, int conversionRate) { java.util.Map<java.lang.String, java.lang.Integer> parameters = ((java.util.Map<java.lang.String, java.lang.Integer>) (entry.get(curveKey))); if (parameters == null) { return null; } java.lang.Integer average = parameters.get(VdsProperties.HOST_QOS_AVERAGE); return average == null ? null : average / conversionRate; }







@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) == null) { return false; } switch (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) { case GEO_REP : org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters(getSession().getMasterVolumeId(), getSession().getId()); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters()); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(DRStep.REMOVE_TMP_SNAPSHOTS); runInternalActionWithTasksContext(ActionType.GlusterStorageGeoRepSyncInternal, parameters); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; case REMOVE_TMP_SNAPSHOTS : removeDRSnapshots(); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(null); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; } return true; }