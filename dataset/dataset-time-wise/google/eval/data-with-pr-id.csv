PR_ID,filename,codebase,codebase-hash,initial,initial-hash,approved,approved-hash,submited_date,total_patchsets
109904,src_main_java_com_googlesource_gerrit_plugins_findowners_Checker.java,"static java.util.Map<java.lang.String, java.lang.Integer> getVotes(com.google.gerrit.server.query.change.ChangeData changeData) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = changeData.db(); java.util.Map<java.lang.String, java.lang.Integer> map = new java.util.HashMap<>(); com.google.gerrit.reviewdb.server.AccountAccess ac = db.accounts(); for (com.google.gerrit.reviewdb.client.PatchSetApproval p : changeData.currentApprovals()) { if ((p.getValue()) != 0) { com.google.gerrit.reviewdb.client.Account.Id id = p.getAccountId(); try { map.put(ac.get(id).getPreferredEmail(), java.lang.Integer.valueOf(p.getValue())); } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.findowners.Checker.log.error((""Cannot get email address of account id: "" + (id.get())), e); } } } return map; }",56a170d401978a4ab4065e5725fb10582e405c90,"static java.util.Map<java.lang.String, java.lang.Integer> getVotes(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.query.change.ChangeData changeData) throws com.google.gwtorm.server.OrmException { java.util.Map<java.lang.String, java.lang.Integer> map = new java.util.HashMap<>(); com.googlesource.gerrit.plugins.findowners.AccountAccess ac = db.accounts(); for (com.google.gerrit.reviewdb.client.PatchSetApproval p : changeData.currentApprovals()) { if ((p.getValue()) != 0) { map.put(accountCache.get(p.getAccountId()).getAccount().getPreferredEmail(), java.lang.Integer.valueOf(p.getValue())); } } return map; }",255ec56c237b731a355165e8b65e34d87efbd3d1,"static java.util.Map<java.lang.String, java.lang.Integer> getVotes(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.query.change.ChangeData changeData) throws com.google.gwtorm.server.OrmException { java.util.Map<java.lang.String, java.lang.Integer> map = new java.util.HashMap<>(); for (com.google.gerrit.reviewdb.client.PatchSetApproval p : changeData.currentApprovals()) { if ((p.getValue()) != 0) { map.put(accountCache.get(p.getAccountId()).getAccount().getPreferredEmail(), java.lang.Integer.valueOf(p.getValue())); } } return map; }",7e68b06ecbf8a1e29999c36b026be5f4d1e0fcc4,2017-06-16 10:26:09,3
109611,gerrit-httpd_src_main_java_com_google_gerrit_httpd_CacheBasedWebSession.java,"private java.lang.String readCookie() { final javax.servlet.http.Cookie[] all = request.getCookies(); if (all != null) { for (final javax.servlet.http.Cookie c : all) { if (com.google.gerrit.httpd.CacheBasedWebSession.ACCOUNT_COOKIE.equals(c.getName())) { final java.lang.String v = c.getValue(); return (v != null) && (!("""".equals(v))) ? v : null; } } } return null; }",17efb8f061840778f7cd93f18103a7eaab05fd17,"private java.lang.String readCookie() { javax.servlet.http.Cookie[] all = request.getCookies(); if (all != null) { for (javax.servlet.http.Cookie c : all) { if (com.google.gerrit.httpd.CacheBasedWebSession.ACCOUNT_COOKIE.equals(c.getName())) { java.lang.String v = c.getValue(); return (v != null) && (!("""".equals(v))) ? v : null; } } } return getQueryParameter(com.google.gerrit.httpd.CacheBasedWebSession.XD_AUTHORIZATION); }",d6e6dbc6049455b10387dbb7988d0f1870572d22,private static java.lang.String readCookie(javax.servlet.http.HttpServletRequest request) { javax.servlet.http.Cookie[] all = request.getCookies(); if (all != null) { for (javax.servlet.http.Cookie c : all) { if (com.google.gerrit.httpd.CacheBasedWebSession.ACCOUNT_COOKIE.equals(c.getName())) { return com.google.common.base.Strings.emptyToNull(c.getValue()); } } } return null; },1035f558deeae287073fa0881f325b5ac9a04530,2017-06-17 04:23:02,12
109611,gerrit-httpd_src_main_java_com_google_gerrit_httpd_CacheBasedWebSession.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private java.lang.String getQueryParameter(java.lang.String param) { java.lang.String queryString = request.getQueryString(); if ((!(com.google.common.base.Strings.isNullOrEmpty(queryString))) && (queryString.contains(param))) { for (java.lang.String kvPair : com.google.common.base.Splitter.on('&').split(queryString)) { java.util.Iterator<java.lang.String> i = com.google.common.base.Splitter.on('=').limit(2).split(kvPair).iterator(); java.lang.String key = com.google.gerrit.extensions.restapi.Url.decode(i.next()); if (param.equals(key)) { return i.hasNext() ? com.google.gerrit.extensions.restapi.Url.decode(i.next()) : null; } } } return null; },6e51324bd18592081af0f61b35c17cf659ab72bb,private void authFromQueryParameter(java.lang.String accessToken) { key = new com.google.gerrit.httpd.WebSessionManager.Key(accessToken); val = manager.get(key); if ((val) != null) { okPaths.add(AccessPath.REST_API); } },3d3375f946735673096dd032fcda95436e891319,2017-06-17 04:23:02,12
109611,gerrit-httpd_src_main_java_com_google_gerrit_httpd_restapi_RestApiServlet.java,"private static void setCorsHeaders(javax.servlet.http.HttpServletResponse res, java.lang.String origin) { res.setHeader(com.google.gerrit.httpd.restapi.ACCESS_CONTROL_ALLOW_ORIGIN, origin); res.setHeader(com.google.gerrit.httpd.restapi.ACCESS_CONTROL_ALLOW_CREDENTIALS, ""true""); res.setHeader(com.google.gerrit.httpd.restapi.ACCESS_CONTROL_MAX_AGE, ""600""); res.setHeader(com.google.gerrit.httpd.restapi.ACCESS_CONTROL_ALLOW_METHODS, ""GET, OPTIONS, PUT, DELETE, POST""); res.setHeader(com.google.gerrit.httpd.restapi.ACCESS_CONTROL_ALLOW_HEADERS, com.google.common.base.Joiner.on("", "").join(com.google.gerrit.httpd.restapi.RestApiServlet.ALLOWED_CORS_REQUEST_HEADERS)); }",6d09b5abbaca39c6e77902fe3836e1df7b75e047,"private static void setCorsHeaders(javax.servlet.http.HttpServletResponse res, java.lang.String origin) { res.setHeader(com.google.gerrit.httpd.restapi.ACCESS_CONTROL_ALLOW_ORIGIN, origin); res.setHeader(com.google.gerrit.httpd.restapi.ACCESS_CONTROL_ALLOW_CREDENTIALS, ""true""); res.setHeader(com.google.gerrit.httpd.restapi.ACCESS_CONTROL_MAX_AGE, ""600""); res.setHeader(com.google.gerrit.httpd.restapi.ACCESS_CONTROL_ALLOW_METHODS, com.google.common.base.Joiner.on("", "").join(com.google.common.collect.Iterables.concat(com.google.gerrit.httpd.restapi.RestApiServlet.ALLOWED_XD_METHODS, com.google.common.collect.ImmutableList.of(""HEAD"", ""OPTIONS"")))); res.setHeader(com.google.gerrit.httpd.restapi.ACCESS_CONTROL_ALLOW_HEADERS, com.google.common.base.Joiner.on("", "").join(com.google.gerrit.httpd.restapi.RestApiServlet.ALLOWED_CORS_REQUEST_HEADERS)); }",5625f5305f6d27a25dd52c7bc9e60ad8449937b7,"private static void setCorsHeaders(javax.servlet.http.HttpServletResponse res, java.lang.String origin) { res.setHeader(com.google.gerrit.httpd.restapi.ACCESS_CONTROL_ALLOW_ORIGIN, origin); res.setHeader(com.google.gerrit.httpd.restapi.ACCESS_CONTROL_ALLOW_CREDENTIALS, ""true""); res.setHeader(com.google.gerrit.httpd.restapi.ACCESS_CONTROL_MAX_AGE, ""600""); com.google.gerrit.httpd.restapi.RestApiServlet.setHeaderList(res, com.google.gerrit.httpd.restapi.ACCESS_CONTROL_ALLOW_METHODS, com.google.common.collect.Iterables.concat(com.google.gerrit.httpd.restapi.RestApiServlet.ALLOWED_CORS_METHODS, com.google.common.collect.ImmutableList.of(""OPTIONS""))); com.google.gerrit.httpd.restapi.RestApiServlet.setHeaderList(res, com.google.gerrit.httpd.restapi.ACCESS_CONTROL_ALLOW_HEADERS, com.google.gerrit.httpd.restapi.RestApiServlet.ALLOWED_CORS_REQUEST_HEADERS); }",08d1efba86124db848de23dd5198dd0ec1de3185,2017-06-17 04:23:02,12
109611,gerrit-httpd_src_main_java_com_google_gerrit_httpd_restapi_RestApiServlet.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static javax.servlet.http.HttpServletRequest applyXdOverrides(javax.servlet.http.HttpServletRequest req, com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> xd) throws com.google.gerrit.extensions.restapi.BadRequestException { java.lang.String method = com.google.common.collect.Iterables.getFirst(xd.get(com.google.gerrit.httpd.restapi.RestApiServlet.XD_METHOD), null); if (!(com.google.gerrit.httpd.restapi.RestApiServlet.ALLOWED_XD_METHODS.contains(method))) { com.google.gerrit.httpd.restapi.RestApiServlet.log.error((""method "" + method)); throw new com.google.gerrit.extensions.restapi.BadRequestException(""method not allowed""); } java.lang.String contentType = com.google.common.collect.Iterables.getFirst(xd.get(com.google.gerrit.httpd.restapi.RestApiServlet.XD_CONTENT_TYPE), null); if ((method.equals(""POST"")) || (method.equals(""PUT""))) { if (!(""text/plain"".equals(req.getContentType()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""invalid "" + (CONTENT_TYPE))); } else if (com.google.common.base.Strings.isNullOrEmpty(contentType)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(((com.google.gerrit.httpd.restapi.RestApiServlet.XD_CONTENT_TYPE) + "" required"")); } } return new javax.servlet.http.HttpServletRequestWrapper(req) { @java.lang.Override public java.lang.String getMethod() { return method; } @java.lang.Override public java.lang.String getContentType() { return contentType; } }; }",ea9565301274015db2fff60efd3f300d69e3ba09,"private static javax.servlet.http.HttpServletRequest applyXdOverrides(javax.servlet.http.HttpServletRequest req, com.google.gerrit.httpd.restapi.ParameterParser.QueryParams qp) throws com.google.gerrit.extensions.restapi.BadRequestException { if (!(""POST"".equals(req.getMethod()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""POST required""); } java.lang.String method = qp.xdMethod(); java.lang.String contentType = qp.xdContentType(); if ((method.equals(""POST"")) || (method.equals(""PUT""))) { if (!(""text/plain"".equals(req.getContentType()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""invalid "" + (CONTENT_TYPE))); } else if (com.google.common.base.Strings.isNullOrEmpty(contentType)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(((com.google.gerrit.httpd.restapi.RestApiServlet.XD_CONTENT_TYPE) + "" required"")); } } return new javax.servlet.http.HttpServletRequestWrapper(req) { @java.lang.Override public java.lang.String getMethod() { return method; } @java.lang.Override public java.lang.String getContentType() { return contentType; } }; }",514d6ea21925232af56eb9f95c170f0cb5bc2b37,2017-06-17 04:23:02,12
110053,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_GeneralPreferencesIT.java,@org.junit.After public void cleanUp() throws java.lang.Exception { gApi.accounts().id(user42.getId().toString()).setPreferences(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsers)) { if ((git.exactRef(RefNames.REFS_USERS_DEFAULT)) != null) { org.eclipse.jgit.lib.RefUpdate u = git.updateRef(RefNames.REFS_USERS_DEFAULT); u.setForceUpdate(true); assertThat(u.delete()).isEqualTo(RefUpdate.Result.FORCED); } } accountCache.evictAll(); },70cf67c5a4499b9f93086ed3b07f9c9b19d1d962,@org.junit.After public void cleanUp() throws java.lang.Exception { gApi.accounts().id(user42.getId().toString()).setPreferences(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsers)) { if ((git.exactRef(RefNames.REFS_USERS_DEFAULT)) != null) { org.eclipse.jgit.lib.RefUpdate u = git.updateRef(RefNames.REFS_USERS_DEFAULT); u.setForceUpdate(true); assertThat(u.delete()).isEqualTo(RefUpdate.Result.FORCED); } } for (com.google.gerrit.reviewdb.client.Account.Id id : accounts.allIds()) { accountCache.evict(id); } },7c457da18ef3a5e516d4c56de7c7ce8aca9bfed8,@org.junit.After public void cleanUp() throws java.lang.Exception { gApi.accounts().id(user42.getId().toString()).setPreferences(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsers)) { if ((git.exactRef(RefNames.REFS_USERS_DEFAULT)) != null) { org.eclipse.jgit.lib.RefUpdate u = git.updateRef(RefNames.REFS_USERS_DEFAULT); u.setForceUpdate(true); assertThat(u.delete()).isEqualTo(RefUpdate.Result.FORCED); } } accountCache.evictAllNoReindex(); },b3f96560e1e7565f263b14b002438d23e1153ed0,2017-06-19 13:28:04,2
110053,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_config_GeneralPreferencesIT.java,@org.junit.After public void cleanUp() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsers)) { if ((git.exactRef(RefNames.REFS_USERS_DEFAULT)) != null) { org.eclipse.jgit.lib.RefUpdate u = git.updateRef(RefNames.REFS_USERS_DEFAULT); u.setForceUpdate(true); assertThat(u.delete()).isEqualTo(RefUpdate.Result.FORCED); } } accountCache.evictAll(); },61c66be336d24fc39e41b7dd2d5bee6ba6cfd27d,@org.junit.After public void cleanUp() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsers)) { if ((git.exactRef(RefNames.REFS_USERS_DEFAULT)) != null) { org.eclipse.jgit.lib.RefUpdate u = git.updateRef(RefNames.REFS_USERS_DEFAULT); u.setForceUpdate(true); assertThat(u.delete()).isEqualTo(RefUpdate.Result.FORCED); } } for (com.google.gerrit.reviewdb.client.Account.Id id : accounts.allIds()) { accountCache.evict(id); } },b3aef81fa4c1ad616fedd8d340f436a22a415db2,@org.junit.After public void cleanUp() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsers)) { if ((git.exactRef(RefNames.REFS_USERS_DEFAULT)) != null) { org.eclipse.jgit.lib.RefUpdate u = git.updateRef(RefNames.REFS_USERS_DEFAULT); u.setForceUpdate(true); assertThat(u.delete()).isEqualTo(RefUpdate.Result.FORCED); } } accountCache.evictAllNoReindex(); },88fcb3715621274b9d4bb51dd92f6fd572b16b04,2017-06-19 13:28:04,2
110053,gerrit-server_src_main_java_com_google_gerrit_server_config_SetPreferences.java,"private com.google.gerrit.extensions.client.GeneralPreferencesInfo writeToGit(com.google.gerrit.extensions.client.GeneralPreferencesInfo i) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.get().create(allUsersName)) { com.google.gerrit.server.account.VersionedAccountPreferences p = com.google.gerrit.server.account.VersionedAccountPreferences.forDefault(); p.load(md); com.google.gerrit.server.config.ConfigUtil.storeSection(p.getConfig(), UserConfigSections.GENERAL, null, i, com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); com.google.gerrit.server.account.SetPreferences.storeMyMenus(p, i.my); com.google.gerrit.server.account.SetPreferences.storeUrlAliases(p, i.urlAliases); p.commit(md); accountCache.evictAll(); com.google.gerrit.extensions.client.GeneralPreferencesInfo r = com.google.gerrit.server.config.ConfigUtil.loadSection(p.getConfig(), UserConfigSections.GENERAL, null, new com.google.gerrit.extensions.client.GeneralPreferencesInfo(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), null); return loader.loadMyMenusAndUrlAliases(r, p, null); } }",d402ccbe052eb94556aabaf48df2fe3ab5e3bcb8,"private com.google.gerrit.extensions.client.GeneralPreferencesInfo writeToGit(com.google.gerrit.extensions.client.GeneralPreferencesInfo i) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.get().create(allUsersName)) { com.google.gerrit.server.account.VersionedAccountPreferences p = com.google.gerrit.server.account.VersionedAccountPreferences.forDefault(); p.load(md); com.google.gerrit.server.config.ConfigUtil.storeSection(p.getConfig(), UserConfigSections.GENERAL, null, i, com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); com.google.gerrit.server.account.SetPreferences.storeMyMenus(p, i.my); com.google.gerrit.server.account.SetPreferences.storeUrlAliases(p, i.urlAliases); p.commit(md); for (com.google.gerrit.reviewdb.client.Account.Id id : accounts.allIds()) { accountCache.evict(id); } com.google.gerrit.extensions.client.GeneralPreferencesInfo r = com.google.gerrit.server.config.ConfigUtil.loadSection(p.getConfig(), UserConfigSections.GENERAL, null, new com.google.gerrit.extensions.client.GeneralPreferencesInfo(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), null); return loader.loadMyMenusAndUrlAliases(r, p, null); } }",a19b069fb2b31fccaa2f68b877633102b84543b0,"private com.google.gerrit.extensions.client.GeneralPreferencesInfo writeToGit(com.google.gerrit.extensions.client.GeneralPreferencesInfo i) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.get().create(allUsersName)) { com.google.gerrit.server.account.VersionedAccountPreferences p = com.google.gerrit.server.account.VersionedAccountPreferences.forDefault(); p.load(md); com.google.gerrit.server.config.ConfigUtil.storeSection(p.getConfig(), UserConfigSections.GENERAL, null, i, com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); com.google.gerrit.server.account.SetPreferences.storeMyMenus(p, i.my); com.google.gerrit.server.account.SetPreferences.storeUrlAliases(p, i.urlAliases); p.commit(md); accountCache.evictAllNoReindex(); com.google.gerrit.extensions.client.GeneralPreferencesInfo r = com.google.gerrit.server.config.ConfigUtil.loadSection(p.getConfig(), UserConfigSections.GENERAL, null, new com.google.gerrit.extensions.client.GeneralPreferencesInfo(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), null); return loader.loadMyMenusAndUrlAliases(r, p, null); } }",8be4761b495016587d67fb4cbb00963c015768c3,2017-06-19 13:28:04,2
109852,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeOpRepoManager.java,"public java.util.List<com.google.gerrit.server.update.BatchUpdate> batchUpdates(java.util.Collection<com.google.gerrit.reviewdb.client.Project.NameKey> projects) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { java.util.List<com.google.gerrit.server.update.BatchUpdate> updates = new java.util.ArrayList(projects.size()); for (com.google.gerrit.reviewdb.client.Project.NameKey project : projects) { updates.add(getRepo(project).getUpdate()); } return updates; }",5a20867358e489b920f4d1c2869776f5fdc6ae97,"public java.util.List<com.google.gerrit.server.update.BatchUpdate> batchUpdates(java.util.Collection<com.google.gerrit.reviewdb.client.Project.NameKey> projects) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { java.util.List<com.google.gerrit.server.update.BatchUpdate> updates = new java.util.ArrayList(projects.size()); for (com.google.gerrit.reviewdb.client.Project.NameKey project : projects) { updates.add(getRepo(project).getUpdate().setRefLogMessage(""push"")); } return updates; }",9b658dcb97048574f7407a202ee3b7bfd0d527d6,"public java.util.List<com.google.gerrit.server.update.BatchUpdate> batchUpdates(java.util.Collection<com.google.gerrit.reviewdb.client.Project.NameKey> projects) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { java.util.List<com.google.gerrit.server.update.BatchUpdate> updates = new java.util.ArrayList(projects.size()); for (com.google.gerrit.reviewdb.client.Project.NameKey project : projects) { updates.add(getRepo(project).getUpdate().setRefLogMessage(""merged"")); } return updates; }",ae0ea72b9a9ef0867ef2160cf88c06e554b146a9,2017-06-20 01:19:43,4
110557,gerrit-common_src_main_java_com_google_gerrit_common_data_GroupReference.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static boolean isGroupReference(java.lang.String configValue) { return configValue.startsWith(com.google.gerrit.common.data.GroupReference.PREFIX); },2aeeadaafa15e697d33c6bb6560665983f40749f,public static boolean isGroupReference(java.lang.String configValue) { return (configValue != null) && (configValue.startsWith(com.google.gerrit.common.data.GroupReference.PREFIX)); },80ef73642444055c45b9a6b66231ee366c2ee0ec,2017-06-20 02:42:46,2
109879,gerrit-server_src_main_java_com_google_gerrit_server_git_WorkQueue.java,"public com.google.gerrit.server.git.WorkQueue.Executor createQueue(int poolsize, java.lang.String prefix) { final com.google.gerrit.server.git.WorkQueue.Executor r = new com.google.gerrit.server.git.WorkQueue.Executor(poolsize, prefix); r.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); r.setExecuteExistingDelayedTasksAfterShutdownPolicy(true); queues.add(r); return r; }",92eda1f8d462e17fd55c128eb5406c55698b4c34,"public com.google.gerrit.server.git.WorkQueue.Executor createQueue(int poolsize, java.lang.String prefix) { createQueue(poolsize, prefix, java.lang.Thread.NORM_PRIORITY); }",5ec838a11bf988250bbf37e1ef4a8649d90432ac,"public java.util.concurrent.ScheduledThreadPoolExecutor createQueue(int poolsize, java.lang.String prefix) { return createQueue(poolsize, prefix, java.lang.Thread.NORM_PRIORITY); }",7d46e03122a32e91143fee21ab60c1197db3521b,2017-06-20 10:45:04,7
109879,gerrit-sshd_src_main_java_com_google_gerrit_sshd_StreamCommandExecutorProvider.java,"@java.lang.Override public WorkQueue.Executor get() { final com.google.gerrit.server.git.WorkQueue.Executor executor; executor = queues.createQueue(poolSize, ""SSH-Stream-Worker""); final java.util.concurrent.ThreadFactory parent = executor.getThreadFactory(); executor.setThreadFactory(new java.util.concurrent.ThreadFactory() { @java.lang.Override public java.lang.Thread newThread(final java.lang.Runnable task) { final java.lang.Thread t = parent.newThread(task); t.setPriority(java.lang.Thread.MIN_PRIORITY); return t; } }); return executor; }",788dc55f832f94e94dc2ef2d3dbf9e376ec9ddeb,"@java.lang.Override public WorkQueue.Executor get() { return queues.createQueue(poolSize, ""SSH-Stream-Worker"", java.lang.Thread.MIN_PRIORITY); }",b55ac31fd82f7f3f39dd62d71cf006d4e30fbd6d,"@java.lang.Override public java.util.concurrent.ScheduledThreadPoolExecutor get() { return queues.createQueue(poolSize, ""SSH-Stream-Worker"", java.lang.Thread.MIN_PRIORITY); }",d65f8cba9e49544a2b7183dd8bf356506308e340,2017-06-20 10:45:04,7
109879,gerrit-server_src_main_java_com_google_gerrit_server_git_WorkQueue.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.gerrit.server.git.WorkQueue.Executor createQueue(int poolsize, java.lang.String prefix, int threadPriority) { final com.google.gerrit.server.git.WorkQueue.Executor r = new com.google.gerrit.server.git.WorkQueue.Executor(poolsize, prefix); if (threadPriority != (java.lang.Thread.NORM_PRIORITY)) { final java.util.concurrent.ThreadFactory parent = r.getThreadFactory(); r.setThreadFactory(( task) -> { final java.lang.Thread t = parent.newThread(task); t.setPriority(java.lang.Thread.MIN_PRIORITY); return t; }); } r.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); r.setExecuteExistingDelayedTasksAfterShutdownPolicy(true); queues.add(r); return r; }",90a5d19a83cb16dd11856e95b70788f51e58c40d,"public java.util.concurrent.ScheduledThreadPoolExecutor createQueue(int poolsize, java.lang.String prefix, int threadPriority) { com.google.gerrit.server.git.WorkQueue.Executor executor = new com.google.gerrit.server.git.WorkQueue.Executor(poolsize, prefix); executor.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); executor.setExecuteExistingDelayedTasksAfterShutdownPolicy(true); queues.add(executor); if (threadPriority != (java.lang.Thread.NORM_PRIORITY)) { java.util.concurrent.ThreadFactory parent = executor.getThreadFactory(); executor.setThreadFactory(( task) -> { java.lang.Thread t = parent.newThread(task); t.setPriority(threadPriority); return t; }); } return executor; }",f811d4c1e3771e06377c8314709d2818b2ad9f93,2017-06-20 10:45:04,7
110345,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_SiteRebuilder.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.google.gerrit.server.notedb.rebuild.SiteRebuilder setTrialMode(boolean trial) { this.trial = trial; return this; },706cd8ee9206c40fd742de1846d1f777a6714e3b,public com.google.gerrit.server.notedb.rebuild.SiteRebuilder.Builder setTrialMode(boolean trial) { this.trial = trial; return this; },2f790ade68bb9d23df13ffa32290bf95c52d787a,2017-06-20 12:18:19,4
110345,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_SiteRebuilder.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.google.gerrit.server.notedb.rebuild.SiteRebuilder setForceRebuild(boolean forceRebuild) { this.forceRebuild = forceRebuild; return this; },7c6077ee6e65fc79546b89bbdd676937fd82c0f6,public com.google.gerrit.server.notedb.rebuild.SiteRebuilder.Builder setForceRebuild(boolean forceRebuild) { this.forceRebuild = forceRebuild; return this; },483631d2d3c20aa6051c561043f916576a4c342e,2017-06-20 12:18:19,4
110344,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_SiteRebuilder.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.gerrit.server.notedb.rebuild.SiteRebuilder setThreads(int threads) { executor = (threads > 1) ? com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(threads, ""RebuildChange"")) : com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService(); return this; }",937320b53ed462e866eaeec5c8d05c636561b7b9,public com.google.gerrit.server.notedb.rebuild.SiteRebuilder.Builder setThreads(int threads) { this.threads = threads; return this; },87fd42ec7ede56dacabb0400fbe7410836d61cd9,2017-06-20 12:18:19,4
110344,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_SiteRebuilder.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.google.gerrit.server.notedb.rebuild.SiteRebuilder setChanges(@com.google.gerrit.common.Nullable java.util.Collection<com.google.gerrit.reviewdb.client.Change.Id> changes) { this.changes = (changes != null) ? com.google.common.collect.ImmutableList.copyOf(changes) : com.google.common.collect.ImmutableList.of(); return this; },053403652cf9b3534fdaa0a334b40ee1e51b262a,public com.google.gerrit.server.notedb.rebuild.SiteRebuilder.Builder setChanges(@com.google.gerrit.common.Nullable java.util.Collection<com.google.gerrit.reviewdb.client.Change.Id> changes) { this.changes = (changes != null) ? com.google.common.collect.ImmutableList.copyOf(changes) : com.google.common.collect.ImmutableList.of(); return this; },e9261f0fdc7887c47fcada1c5320c3394a0f5caf,2017-06-20 12:18:19,4
110344,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_SiteRebuilder.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.google.gerrit.server.notedb.rebuild.SiteRebuilder setProjects(@com.google.gerrit.common.Nullable java.util.Collection<com.google.gerrit.reviewdb.client.Project.NameKey> projects) { this.projects = (projects != null) ? com.google.common.collect.ImmutableList.copyOf(projects) : com.google.common.collect.ImmutableList.of(); return this; },da545139e189dfdfe9d9b0f80f2670465a1bc48e,public com.google.gerrit.server.notedb.rebuild.SiteRebuilder.Builder setProjects(@com.google.gerrit.common.Nullable java.util.Collection<com.google.gerrit.reviewdb.client.Project.NameKey> projects) { this.projects = (projects != null) ? com.google.common.collect.ImmutableList.copyOf(projects) : com.google.common.collect.ImmutableList.of(); return this; },0ed81e270052c02a052dabce242249b34e0ea7a1,2017-06-20 12:18:19,4
110344,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_SiteRebuilder.java,@java.lang.Override public void close() { executor.shutdownNow(); },90b84af0c8b9389beebfdadfdc49d55cad62905d,@java.lang.Override public void close() { if ((executor) != null) { executor.shutdownNow(); } },acd405753d309fed60f6af96291015afcd3d9603,@java.lang.Override public void close() { executor.shutdownNow(); },90b84af0c8b9389beebfdadfdc49d55cad62905d,2017-06-20 12:18:19,4
110345,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_SiteRebuilder.java,"private void checkPreconditions() { checkState((!(started)), ""SiteRebuilder may only be used once""); boolean hasChanges = !(changes.isEmpty()); boolean hasProjects = !(projects.isEmpty()); checkState((!(hasChanges && hasProjects)), ""cannot set both changes and projects""); }",ea0d1f3bc24acda204cbc483f20898a80037456f,"private void checkPreconditions() { checkState((!(started)), ""SiteRebuilder may only be used once""); }",2a461b698d53c8cd86f14753aae3bb146667755e,"public com.google.gerrit.server.notedb.rebuild.SiteRebuilder build() { return new com.google.gerrit.server.notedb.rebuild.SiteRebuilder(sitePaths, schemaFactory, updateManagerFactory, rebuilder, bundleReader, ((threads) > 1 ? com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(threads, ""RebuildChange"")) : com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService()), projects, changes, progressOut, trial, forceRebuild); }",7c748cbee9dbdad715739d4cb9bb5f64459274c6,2017-06-20 12:18:19,4
110344,gerrit-pgm_src_main_java_com_google_gerrit_pgm_RebuildNoteDb.java,"@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); threads = com.google.gerrit.pgm.util.ThreadLimiter.limitThreads(dbInjector, threads); com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); sysInjector.injectMembers(this); if (!(notesMigration.enabled())) { throw die(""NoteDb is not enabled.""); } com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); java.lang.System.out.println(""Rebuilding the NoteDb""); try (com.google.gerrit.server.notedb.rebuild.SiteRebuilder rebuilder = rebuilderFactory.create(threads, projects.stream().map(com.google.gerrit.reviewdb.client.Project.NameKey::new).collect(java.util.stream.Collectors.toList()), changes.stream().map(com.google.gerrit.reviewdb.client.Change.Id::new).collect(java.util.stream.Collectors.toList()))) { return rebuilder.rebuild() ? 0 : 1; } }",879faa0dfeaf2a877e640033fec408a0ae0d68f2,"@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); threads = com.google.gerrit.pgm.util.ThreadLimiter.limitThreads(dbInjector, threads); com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); sysInjector.injectMembers(this); if (!(notesMigration.enabled())) { throw die(""NoteDb is not enabled.""); } com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); try (com.google.gerrit.server.notedb.rebuild.SiteRebuilder rebuilder = rebuilderProvider.get().setThreads(threads).setProgressOut(java.lang.System.err).setProjects(projects.stream().map(com.google.gerrit.reviewdb.client.Project.NameKey::new).collect(java.util.stream.Collectors.toList())).setChanges(changes.stream().map(com.google.gerrit.reviewdb.client.Change.Id::new).collect(java.util.stream.Collectors.toList()))) { return rebuilder.rebuild() ? 0 : 1; } }",9ce5376f6bfba8a3a20c6f011aba6080a386787b,"@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); threads = com.google.gerrit.pgm.util.ThreadLimiter.limitThreads(dbInjector, threads); com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); sysInjector.injectMembers(this); if (!(notesMigration.enabled())) { throw die(""NoteDb is not enabled.""); } com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); try (com.google.gerrit.server.notedb.rebuild.SiteRebuilder rebuilder = rebuilderBuilderProvider.get().setThreads(threads).setProgressOut(java.lang.System.err).setProjects(projects.stream().map(com.google.gerrit.reviewdb.client.Project.NameKey::new).collect(java.util.stream.Collectors.toList())).setChanges(changes.stream().map(com.google.gerrit.reviewdb.client.Change.Id::new).collect(java.util.stream.Collectors.toList())).build()) { return rebuilder.rebuild() ? 0 : 1; } }",4141e391c6ffbcc2a41c6627341c8004f7bde76e,2017-06-20 12:18:19,4
110345,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_SiteRebuilder.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void autoRebuild() throws com.google.gwtorm.server.OrmException, java.io.IOException { checkAutoRebuildPreconditions(); java.util.Optional<com.google.gerrit.server.notedb.NotesMigrationState> maybeState = loadState(); if (!(maybeState.isPresent())) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException(""Could not determine initial migration state""); } com.google.gerrit.server.notedb.NotesMigrationState state = maybeState.get(); if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) > 0)) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException((""Migration has already progressed past the endpoint of the \""trial mode\"" state;"" + "" NoteDb is already the primary storage for some changes"")); } boolean rebuilt = false; while ((state.compareTo(NotesMigrationState.NOTE_DB_UNFUSED)) < 0) { if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) >= 0)) { return; } switch (state) { case REVIEW_DB : state = turnOnWrites(state); break; case WRITE : state = rebuildAndEnableReads(state); rebuilt = true; break; case READ_WRITE_NO_SEQUENCE : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = enableSequences(); break; case READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = setNoteDbPrimary(); break; case READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY : state = disableReviewDb(); break; case NOTE_DB_UNFUSED : break; case NOTE_DB : default : throw new com.google.gerrit.server.notedb.rebuild.MigrationException((""Migration out of the following state is not supported:\n"" + (state.toText()))); } } }",3d1e4334105b7e883d23719023d97c99a1d32252,"public void autoRebuild() throws com.google.gwtorm.server.OrmException, java.io.IOException { checkState(((changes.isEmpty()) && (projects.isEmpty())), ""cannot set changes or projects during auto-migration; call rebuild() instead""); java.util.Optional<com.google.gerrit.server.notedb.NotesMigrationState> maybeState = loadState(); if (!(maybeState.isPresent())) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException(""Could not determine initial migration state""); } com.google.gerrit.server.notedb.NotesMigrationState state = maybeState.get(); if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) > 0)) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException((""Migration has already progressed past the endpoint of the \""trial mode\"" state;"" + "" NoteDb is already the primary storage for some changes"")); } boolean rebuilt = false; while ((state.compareTo(NotesMigrationState.NOTE_DB_UNFUSED)) < 0) { if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) >= 0)) { return; } switch (state) { case REVIEW_DB : state = turnOnWrites(state); break; case WRITE : state = rebuildAndEnableReads(state); rebuilt = true; break; case READ_WRITE_NO_SEQUENCE : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = enableSequences(); break; case READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = setNoteDbPrimary(); break; case READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY : state = disableReviewDb(); break; case NOTE_DB_UNFUSED : break; case NOTE_DB : default : throw new com.google.gerrit.server.notedb.rebuild.MigrationException((""Migration out of the following state is not supported:\n"" + (state.toText()))); } } }",e715bcad0e32a5f935644499560fdb28bc2fb1a4,2017-06-20 12:18:19,4
110344,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_SiteRebuilder.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.google.gerrit.server.notedb.rebuild.SiteRebuilder setProgressOut(java.io.OutputStream progressOut) { this.progressOut = checkNotNull(progressOut); return this; },dfe60de89b1658880d28bafe68a5d63a363d9c1d,public com.google.gerrit.server.notedb.rebuild.SiteRebuilder.Builder setProgressOut(java.io.OutputStream progressOut) { this.progressOut = checkNotNull(progressOut); return this; },f9df06bcc5f3ae290b72fefe7be8c7edd1e634a7,2017-06-20 12:18:19,4
110345,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_pgm_RebuildNoteDbIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void rebuildEmptySiteStartingWithNoteDbDisabed() throws java.lang.Exception { setNotesMigrationState(NotesMigrationState.REVIEW_DB); com.google.gerrit.acceptance.pgm.RebuildNoteDbIT.runGerrit(""RebuildNoteDb"", ""-d"", sitePath, ""--show-stack-trace""); assertNotesMigrationState(NotesMigrationState.READ_WRITE_NO_SEQUENCE); }",e0134014073156e2f8136db477c1106bb5a88299,"@org.junit.Test public void rebuildEmptySiteStartingWithNoteDbDisabed() throws java.lang.Exception { assertNotesMigrationState(NotesMigrationState.REVIEW_DB); com.google.gerrit.acceptance.pgm.RebuildNoteDbIT.runGerrit(""RebuildNoteDb"", ""-d"", sitePath, ""--show-stack-trace""); assertNotesMigrationState(NotesMigrationState.READ_WRITE_NO_SEQUENCE); }",a661ace7479e7806e919cb85c2e033047db2bf0f,2017-06-20 12:18:19,4
110346,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_NoteDbMigrator.java,public com.google.gerrit.server.notedb.rebuild.SiteRebuilder setForceRebuild(boolean forceRebuild) { this.forceRebuild = forceRebuild; return this; },7c6077ee6e65fc79546b89bbdd676937fd82c0f6,public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator setForceRebuild(boolean forceRebuild) { this.forceRebuild = forceRebuild; return this; },4fe2b616cdbbd14c1e9c8f39f020b6c028c52b6f,public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator.Builder setForceRebuild(boolean forceRebuild) { this.forceRebuild = forceRebuild; return this; },3835b8809446abea1f4434acaa05641f131ef398,2017-06-20 12:18:19,4
110346,gerrit-pgm_src_main_java_com_google_gerrit_pgm_MigrateToNoteDb.java,"@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); threads = com.google.gerrit.pgm.util.ThreadLimiter.limitThreads(dbInjector, threads); com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); sysInjector.injectMembers(this); com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); try (com.google.gerrit.server.notedb.rebuild.SiteRebuilder rebuilder = rebuilderProvider.get().setThreads(threads).setProgressOut(java.lang.System.err).setTrialMode(true).setForceRebuild(true).setProjects(projects.stream().map(com.google.gerrit.reviewdb.client.Project.NameKey::new).collect(java.util.stream.Collectors.toList())).setChanges(changes.stream().map(com.google.gerrit.reviewdb.client.Change.Id::new).collect(java.util.stream.Collectors.toList()))) { if ((!(projects.isEmpty())) || (!(changes.isEmpty()))) { rebuilder.rebuild(); } else { rebuilder.autoRebuild(); } } return 0; }",fe2acb2e04e5975ec26b34bb3a4632cb66fad1b0,"@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); threads = com.google.gerrit.pgm.util.ThreadLimiter.limitThreads(dbInjector, threads); com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); sysInjector.injectMembers(this); com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); try (com.google.gerrit.server.notedb.rebuild.NoteDbMigrator rebuilder = migratorProvider.get().setThreads(threads).setProgressOut(java.lang.System.err).setProjects(projects.stream().map(com.google.gerrit.reviewdb.client.Project.NameKey::new).collect(java.util.stream.Collectors.toList())).setChanges(changes.stream().map(com.google.gerrit.reviewdb.client.Change.Id::new).collect(java.util.stream.Collectors.toList()))) { if ((!(changes.isEmpty())) || (!(projects.isEmpty()))) { rebuilder.rebuild(); } else { rebuilder.setTrialMode(trial).setForceRebuild(force).migrate(); } } return 0; }",82269fe04f38243ea3ae2beac1c8529e4e0baf2e,"@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); threads = com.google.gerrit.pgm.util.ThreadLimiter.limitThreads(dbInjector, threads); com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); sysInjector.injectMembers(this); com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); try (com.google.gerrit.server.notedb.rebuild.NoteDbMigrator migrator = migratorBuilderProvider.get().setThreads(threads).setProgressOut(java.lang.System.err).setProjects(projects.stream().map(com.google.gerrit.reviewdb.client.Project.NameKey::new).collect(java.util.stream.Collectors.toList())).setChanges(changes.stream().map(com.google.gerrit.reviewdb.client.Change.Id::new).collect(java.util.stream.Collectors.toList())).setTrialMode(trial).setForceRebuild(force).build()) { if ((!(projects.isEmpty())) || (!(changes.isEmpty()))) { migrator.rebuild(); } else { migrator.migrate(); } } return 0; }",2fcd1c3a9f9720c782e4155e3c24836f3fc20be8,2017-06-20 12:18:19,4
110346,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_NoteDbMigrator.java,public com.google.gerrit.server.notedb.rebuild.SiteRebuilder setTrialMode(boolean trial) { this.trial = trial; return this; },706cd8ee9206c40fd742de1846d1f777a6714e3b,public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator setTrialMode(boolean trial) { this.trial = trial; return this; },1bed5e0e4b440d01d45e6cb7abae7d6a2379703a,public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator.Builder setTrialMode(boolean trial) { this.trial = trial; return this; },488ecd5d74aecd5af5907a429ff51ee4044ec291,2017-06-20 12:18:19,4
110346,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_NoteDbMigrator.java,public com.google.gerrit.server.notedb.rebuild.SiteRebuilder setProjects(@com.google.gerrit.common.Nullable java.util.Collection<com.google.gerrit.reviewdb.client.Project.NameKey> projects) { this.projects = (projects != null) ? com.google.common.collect.ImmutableList.copyOf(projects) : com.google.common.collect.ImmutableList.of(); return this; },da545139e189dfdfe9d9b0f80f2670465a1bc48e,public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator setProjects(@com.google.gerrit.common.Nullable java.util.Collection<com.google.gerrit.reviewdb.client.Project.NameKey> projects) { this.projects = (projects != null) ? com.google.common.collect.ImmutableList.copyOf(projects) : com.google.common.collect.ImmutableList.of(); return this; },9ad5744bc9ae64182081a0cbcf04a1a6ea332248,public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator.Builder setProjects(@com.google.gerrit.common.Nullable java.util.Collection<com.google.gerrit.reviewdb.client.Project.NameKey> projects) { this.projects = (projects != null) ? com.google.common.collect.ImmutableList.copyOf(projects) : com.google.common.collect.ImmutableList.of(); return this; },8fbce6865e4448673ec8eef1fafa02b078c95f05,2017-06-20 12:18:19,4
110346,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_NoteDbMigrator.java,"public com.google.gerrit.server.notedb.rebuild.SiteRebuilder setThreads(int threads) { executor = (threads > 1) ? com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(threads, ""RebuildChange"")) : com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService(); return this; }",937320b53ed462e866eaeec5c8d05c636561b7b9,"public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator setThreads(int threads) { executor = (threads > 1) ? com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(threads, ""RebuildChange"")) : com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService(); return this; }",29c353ae3b5871c083c3b079d0ea9a165e98dd57,public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator.Builder setThreads(int threads) { this.threads = threads; return this; },04379520d1e9e317ca790f99ed4531182336b1a6,2017-06-20 12:18:19,4
110346,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_NoteDbMigrator.java,public com.google.gerrit.server.notedb.rebuild.SiteRebuilder setChanges(@com.google.gerrit.common.Nullable java.util.Collection<com.google.gerrit.reviewdb.client.Change.Id> changes) { this.changes = (changes != null) ? com.google.common.collect.ImmutableList.copyOf(changes) : com.google.common.collect.ImmutableList.of(); return this; },053403652cf9b3534fdaa0a334b40ee1e51b262a,public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator setChanges(@com.google.gerrit.common.Nullable java.util.Collection<com.google.gerrit.reviewdb.client.Change.Id> changes) { this.changes = (changes != null) ? com.google.common.collect.ImmutableList.copyOf(changes) : com.google.common.collect.ImmutableList.of(); return this; },dbc7fb9412eec2a700f3a9bf114d4608f86d5995,public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator.Builder setChanges(@com.google.gerrit.common.Nullable java.util.Collection<com.google.gerrit.reviewdb.client.Change.Id> changes) { this.changes = (changes != null) ? com.google.common.collect.ImmutableList.copyOf(changes) : com.google.common.collect.ImmutableList.of(); return this; },1d006db39fe6a67730c656260be518f95e0a82fe,2017-06-20 12:18:19,4
110346,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_NoteDbMigrator.java,public com.google.gerrit.server.notedb.rebuild.SiteRebuilder setProgressOut(java.io.OutputStream progressOut) { this.progressOut = checkNotNull(progressOut); return this; },dfe60de89b1658880d28bafe68a5d63a363d9c1d,public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator setProgressOut(java.io.OutputStream progressOut) { this.progressOut = checkNotNull(progressOut); return this; },c794ea028ec34104cdae97f59db0de6778d4c689,public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator.Builder setProgressOut(java.io.OutputStream progressOut) { this.progressOut = checkNotNull(progressOut); return this; },4f2a0a39a4af27f90ae14d0484730e9821d67834,2017-06-20 12:18:19,4
110346,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_NoteDbMigrator.java,"public void autoRebuild() throws com.google.gwtorm.server.OrmException, java.io.IOException { checkAutoRebuildPreconditions(); java.util.Optional<com.google.gerrit.server.notedb.NotesMigrationState> maybeState = loadState(); if (!(maybeState.isPresent())) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException(""Could not determine initial migration state""); } com.google.gerrit.server.notedb.NotesMigrationState state = maybeState.get(); if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) > 0)) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException((""Migration has already progressed past the endpoint of the \""trial mode\"" state;"" + "" NoteDb is already the primary storage for some changes"")); } boolean rebuilt = false; while ((state.compareTo(NotesMigrationState.NOTE_DB_UNFUSED)) < 0) { if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) >= 0)) { return; } switch (state) { case REVIEW_DB : state = turnOnWrites(state); break; case WRITE : state = rebuildAndEnableReads(state); rebuilt = true; break; case READ_WRITE_NO_SEQUENCE : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = enableSequences(); break; case READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = setNoteDbPrimary(); break; case READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY : state = disableReviewDb(); break; case NOTE_DB_UNFUSED : break; case NOTE_DB : default : throw new com.google.gerrit.server.notedb.rebuild.MigrationException((""Migration out of the following state is not supported:\n"" + (state.toText()))); } } }",3d1e4334105b7e883d23719023d97c99a1d32252,"public void migrate() throws com.google.gwtorm.server.OrmException, java.io.IOException { checkAutoRebuildPreconditions(); java.util.Optional<com.google.gerrit.server.notedb.NotesMigrationState> maybeState = loadState(); if (!(maybeState.isPresent())) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException(""Could not determine initial migration state""); } com.google.gerrit.server.notedb.NotesMigrationState state = maybeState.get(); if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) > 0)) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException((""Migration has already progressed past the endpoint of the \""trial mode\"" state;"" + "" NoteDb is already the primary storage for some changes"")); } boolean rebuilt = false; while ((state.compareTo(NotesMigrationState.NOTE_DB_UNFUSED)) < 0) { if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) >= 0)) { return; } switch (state) { case REVIEW_DB : state = turnOnWrites(state); break; case WRITE : state = rebuildAndEnableReads(state); rebuilt = true; break; case READ_WRITE_NO_SEQUENCE : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = enableSequences(); break; case READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = setNoteDbPrimary(); break; case READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY : state = disableReviewDb(); break; case NOTE_DB_UNFUSED : break; case NOTE_DB : default : throw new com.google.gerrit.server.notedb.rebuild.MigrationException((""Migration out of the following state is not supported:\n"" + (state.toText()))); } } }",d0d146e1adb6a18fe4aca104dcd7563b60035ff3,"public void migrate() throws com.google.gwtorm.server.OrmException, java.io.IOException { checkState(((changes.isEmpty()) && (projects.isEmpty())), ""cannot set changes or projects during auto-migration; call rebuild() instead""); java.util.Optional<com.google.gerrit.server.notedb.NotesMigrationState> maybeState = loadState(); if (!(maybeState.isPresent())) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException(""Could not determine initial migration state""); } com.google.gerrit.server.notedb.NotesMigrationState state = maybeState.get(); if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) > 0)) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException((""Migration has already progressed past the endpoint of the \""trial mode\"" state;"" + "" NoteDb is already the primary storage for some changes"")); } boolean rebuilt = false; while ((state.compareTo(NotesMigrationState.NOTE_DB_UNFUSED)) < 0) { if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) >= 0)) { return; } switch (state) { case REVIEW_DB : state = turnOnWrites(state); break; case WRITE : state = rebuildAndEnableReads(state); rebuilt = true; break; case READ_WRITE_NO_SEQUENCE : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = enableSequences(); break; case READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = setNoteDbPrimary(); break; case READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY : state = disableReviewDb(); break; case NOTE_DB_UNFUSED : break; case NOTE_DB : default : throw new com.google.gerrit.server.notedb.rebuild.MigrationException((""Migration out of the following state is not supported:\n"" + (state.toText()))); } } }",77a9b15ef184a8c036822877ae7a9978eaf28416,2017-06-20 12:18:19,4
110346,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_NoteDbMigrator.java,"private void checkPreconditions() { checkState((!(started)), ""SiteRebuilder may only be used once""); }",2a461b698d53c8cd86f14753aae3bb146667755e,"private void checkPreconditions() { checkState((!(started)), ""%s may only be used once"", getClass().getSimpleName()); }",fc4b2280ad3a1f3ab6f098e1528f7ab4f9d04d78,"public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator build() { return new com.google.gerrit.server.notedb.rebuild.NoteDbMigrator(sitePaths, schemaFactory, updateManagerFactory, rebuilder, bundleReader, ((threads) > 1 ? com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(threads, ""RebuildChange"")) : com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService()), projects, changes, progressOut, trial, forceRebuild); }",2ffb5532c1a02b34defcf346dd08b3951f5a35a7,2017-06-20 12:18:19,4
110732,src_main_java_com_googlesource_gerrit_plugins_gitiles_FilteredRepository.java,"com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectControl ctl = projectControlFactory.controlFor(name, userProvider.get()); if (ctl.isHidden()) { throw new com.google.gerrit.server.project.NoSuchProjectException(name); } org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(name); return new com.googlesource.gerrit.plugins.gitiles.FilteredRepository(ctl, repo, new com.google.gerrit.server.git.VisibleRefFilter(tagCache, changeNotesFactory, changeCache, repo, ctl, db.get(), true)); }",cbeda767b7a5751125cb340c43183b35631a0394,"com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectControl ctl = projectControlFactory.controlFor(name, userProvider.get()); if (ctl.getProject().getState().equals(ProjectState.HIDDEN)) { throw new com.google.gerrit.server.project.NoSuchProjectException(name); } org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(name); return new com.googlesource.gerrit.plugins.gitiles.FilteredRepository(ctl, repo, visibleRefFilterFactory.create(ctl.getProjectState(), repo)); }",657629cc762fd5eb8550f8249218aef77f1ace06,"com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectControl ctl = projectControlFactory.controlFor(name, userProvider.get()); if (ctl.getProject().getState().equals(ProjectState.HIDDEN)) { throw new com.google.gerrit.server.project.NoSuchProjectException(name); } return new com.googlesource.gerrit.plugins.gitiles.FilteredRepository(ctl, repoManager.openRepository(name), visibleRefFilterFactory); }",68b8d0dcc49dbb97303774f0d1c8fc1ba343ff01,2017-06-21 03:58:11,2
108164,gerrit-server_src_main_java_com_google_gerrit_server_account_externalids_ExternalId.java,"public org.eclipse.jgit.lib.ObjectId sha1() { return org.eclipse.jgit.lib.ObjectId.fromRaw(com.google.common.hash.Hashing.sha1().hashString(get(), java.nio.charset.StandardCharsets.UTF_8).asBytes()); }",ee0b1b12710d4bb3215a2372cb911ab06ea29ab6,"public org.eclipse.jgit.lib.ObjectId sha1() { @java.lang.SuppressWarnings(""deprecation"") byte[] h = com.google.common.hash.Hashing.sha1().hashString(get(), java.nio.charset.StandardCharsets.UTF_8).asBytes(); return org.eclipse.jgit.lib.ObjectId.fromRaw(h); }",bb0aef694ff8aa267fdaae39227e375518f412d0,"@java.lang.SuppressWarnings(""deprecation"") public org.eclipse.jgit.lib.ObjectId sha1() { return org.eclipse.jgit.lib.ObjectId.fromRaw(com.google.common.hash.Hashing.sha1().hashString(get(), java.nio.charset.StandardCharsets.UTF_8).asBytes()); }",5da83080dd5ce6a83ee63bd76a090c750c3a0d00,2017-06-21 06:50:28,7
108272,gitiles-servlet_src_main_java_com_google_gitiles_doc_DocServlet.java,"private java.lang.String etag(com.google.gitiles.doc.DocServlet.MarkdownFile srcmd, @javax.annotation.Nullable com.google.gitiles.doc.DocServlet.MarkdownFile navmd) { byte[] b = new byte[org.eclipse.jgit.lib.Constants.OBJECT_ID_LENGTH]; com.google.common.hash.Hasher h = com.google.common.hash.Hashing.sha1().newHasher(); h.putInt(com.google.gitiles.doc.DocServlet.ETAG_GEN); renderer.getTemplateHash(com.google.gitiles.doc.DocServlet.SOY_FILE).writeBytesTo(b, 0, b.length); h.putBytes(b); if (navmd != null) { navmd.id.copyRawTo(b, 0); h.putBytes(b); } srcmd.id.copyRawTo(b, 0); h.putBytes(b); return h.hash().toString(); }",d8c8f16a08361fe8171501e7488ce8d58b997f9d,"private java.lang.String etag(com.google.gitiles.doc.DocServlet.MarkdownFile srcmd, @javax.annotation.Nullable com.google.gitiles.doc.DocServlet.MarkdownFile navmd) { byte[] b = new byte[org.eclipse.jgit.lib.Constants.OBJECT_ID_LENGTH]; @java.lang.SuppressWarnings(""deprecation"") com.google.common.hash.Hasher h = com.google.common.hash.Hashing.sha1().newHasher(); h.putInt(com.google.gitiles.doc.DocServlet.ETAG_GEN); renderer.getTemplateHash(com.google.gitiles.doc.DocServlet.SOY_FILE).writeBytesTo(b, 0, b.length); h.putBytes(b); if (navmd != null) { navmd.id.copyRawTo(b, 0); h.putBytes(b); } srcmd.id.copyRawTo(b, 0); h.putBytes(b); return h.hash().toString(); }",02a735ac8a9b27657833744376538c3030f55a4d,"private java.lang.String etag(com.google.gitiles.doc.DocServlet.MarkdownFile srcmd, @javax.annotation.Nullable com.google.gitiles.doc.DocServlet.MarkdownFile navmd) { byte[] b = new byte[org.eclipse.jgit.lib.Constants.OBJECT_ID_LENGTH]; com.google.common.hash.Hasher h = com.google.common.hash.Hashing.murmur3_128().newHasher(); h.putInt(com.google.gitiles.doc.DocServlet.ETAG_GEN); renderer.getTemplateHash(com.google.gitiles.doc.DocServlet.SOY_FILE).writeBytesTo(b, 0, b.length); h.putBytes(b); if (navmd != null) { navmd.id.copyRawTo(b, 0); h.putBytes(b); } srcmd.id.copyRawTo(b, 0); h.putBytes(b); return h.hash().toString(); }",591d64bf07948a22061d1ad109a9aaa716aba7ee,2017-06-21 06:50:28,7
108164,gerrit-server_src_main_java_com_google_gerrit_server_change_FileContentUtil.java,"private static java.lang.String randSuffix() { com.google.common.hash.Hasher h = com.google.common.hash.Hashing.md5().newHasher(); byte[] buf = new byte[8]; org.eclipse.jgit.util.NB.encodeInt64(buf, 0, com.google.gerrit.common.TimeUtil.nowMs()); h.putBytes(buf); com.google.gerrit.server.change.FileContentUtil.rng.nextBytes(buf); h.putBytes(buf); return h.hash().toString(); }",4f01c84929363e5275af7c4dc5c3a8ecce0f21be,"private static java.lang.String randSuffix() { @java.lang.SuppressWarnings(""deprecation"") com.google.common.hash.Hasher h = com.google.common.hash.Hashing.md5().newHasher(); byte[] buf = new byte[8]; org.eclipse.jgit.util.NB.encodeInt64(buf, 0, com.google.gerrit.common.TimeUtil.nowMs()); h.putBytes(buf); com.google.gerrit.server.change.FileContentUtil.rng.nextBytes(buf); h.putBytes(buf); return h.hash().toString(); }",72cb18477d86d1a4312305a1b6177a37c408496e,"private static java.lang.String randSuffix() { com.google.common.hash.Hasher h = com.google.common.hash.Hashing.murmur3_128().newHasher(); byte[] buf = new byte[8]; org.eclipse.jgit.util.NB.encodeInt64(buf, 0, com.google.gerrit.common.TimeUtil.nowMs()); h.putBytes(buf); com.google.gerrit.server.change.FileContentUtil.rng.nextBytes(buf); h.putBytes(buf); return h.hash().toString(); }",557b7657e13590b21e106c3a64fd92ae1e3a4ee1,2017-06-21 06:50:28,7
108164,gerrit-server_src_main_java_com_google_gerrit_server_change_GetRevisionActions.java,"@java.lang.Override public java.lang.String getETag(com.google.gerrit.server.change.RevisionResource rsrc) { com.google.common.hash.Hasher h = com.google.common.hash.Hashing.md5().newHasher(); com.google.gerrit.server.CurrentUser user = rsrc.getControl().getUser(); try { rsrc.getChangeResource().prepareETag(h, user); h.putBoolean(com.google.gerrit.server.change.Submit.wholeTopicEnabled(config)); com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get(); com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.get().completeChangeSet(db, rsrc.getChange(), user); for (com.google.gerrit.server.query.change.ChangeData cd : cs.changes()) { changeResourceFactory.create(cd.changeControl()).prepareETag(h, user); } h.putBoolean(cs.furtherHiddenChanges()); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmRuntimeException(e); } return h.hash().toString(); }",86273744b70551393e4041916db14393d030a100,"@java.lang.Override public java.lang.String getETag(com.google.gerrit.server.change.RevisionResource rsrc) { @java.lang.SuppressWarnings(""deprecation"") com.google.common.hash.Hasher h = com.google.common.hash.Hashing.md5().newHasher(); com.google.gerrit.server.CurrentUser user = rsrc.getControl().getUser(); try { rsrc.getChangeResource().prepareETag(h, user); h.putBoolean(com.google.gerrit.server.change.Submit.wholeTopicEnabled(config)); com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get(); com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.get().completeChangeSet(db, rsrc.getChange(), user); for (com.google.gerrit.server.query.change.ChangeData cd : cs.changes()) { changeResourceFactory.create(cd.changeControl()).prepareETag(h, user); } h.putBoolean(cs.furtherHiddenChanges()); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmRuntimeException(e); } return h.hash().toString(); }",974b6a6126e0a42c4ea29fe0f333c500cd53fb41,"@java.lang.Override public java.lang.String getETag(com.google.gerrit.server.change.RevisionResource rsrc) { com.google.common.hash.Hasher h = com.google.common.hash.Hashing.murmur3_128().newHasher(); com.google.gerrit.server.CurrentUser user = rsrc.getControl().getUser(); try { rsrc.getChangeResource().prepareETag(h, user); h.putBoolean(com.google.gerrit.server.change.Submit.wholeTopicEnabled(config)); com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get(); com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.get().completeChangeSet(db, rsrc.getChange(), user); for (com.google.gerrit.server.query.change.ChangeData cd : cs.changes()) { changeResourceFactory.create(cd.changeControl()).prepareETag(h, user); } h.putBoolean(cs.furtherHiddenChanges()); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmRuntimeException(e); } return h.hash().toString(); }",a4a8e1fe9a42d793aa4c4aae8e77a38471149115,2017-06-21 06:50:28,7
108272,gitiles-servlet_src_main_java_com_google_gitiles_Renderer.java,"com.google.common.hash.HashCode computeTemplateHash(java.lang.String soyFile) { java.net.URL u = templates.get(soyFile); checkState((u != null), ""Missing Soy template %s"", soyFile); com.google.common.hash.Hasher h = com.google.common.hash.Hashing.sha1().newHasher(); try (java.io.InputStream is = u.openStream();java.io.OutputStream os = com.google.common.hash.Funnels.asOutputStream(h)) { com.google.common.io.ByteStreams.copy(is, os); } catch (java.io.IOException e) { throw new java.lang.IllegalStateException((""Missing Soy template "" + soyFile), e); } return h.hash(); }",8492b995be3896a2fe5ccb832db84d6d20d89eea,"com.google.common.hash.HashCode computeTemplateHash(java.lang.String soyFile) { java.net.URL u = templates.get(soyFile); checkState((u != null), ""Missing Soy template %s"", soyFile); @java.lang.SuppressWarnings(""deprecation"") com.google.common.hash.Hasher h = com.google.common.hash.Hashing.sha1().newHasher(); try (java.io.InputStream is = u.openStream();java.io.OutputStream os = com.google.common.hash.Funnels.asOutputStream(h)) { com.google.common.io.ByteStreams.copy(is, os); } catch (java.io.IOException e) { throw new java.lang.IllegalStateException((""Missing Soy template "" + soyFile), e); } return h.hash(); }",04ebf8335c7d64d7e9438949df74e8e3bbcc02c3,"com.google.common.hash.HashCode computeTemplateHash(java.lang.String soyFile) { java.net.URL u = templates.get(soyFile); checkState((u != null), ""Missing Soy template %s"", soyFile); com.google.common.hash.Hasher h = com.google.common.hash.Hashing.murmur3_128().newHasher(); try (java.io.InputStream is = u.openStream();java.io.OutputStream os = com.google.common.hash.Funnels.asOutputStream(h)) { com.google.common.io.ByteStreams.copy(is, os); } catch (java.io.IOException e) { throw new java.lang.IllegalStateException((""Missing Soy template "" + soyFile), e); } return h.hash(); }",139421c3731d7140c9dafb03f265884bd1d024e3,2017-06-21 06:50:28,7
108164,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeResource.java,"@java.lang.Override public java.lang.String getETag() { com.google.gerrit.server.CurrentUser user = control.getUser(); com.google.common.hash.Hasher h = com.google.common.hash.Hashing.md5().newHasher(); if (user.isIdentifiedUser()) { h.putString(starredChangesUtil.getObjectId(user.getAccountId(), getId()).name(), java.nio.charset.StandardCharsets.UTF_8); } prepareETag(h, user); return h.hash().toString(); }",7ae5321d7141e9bd6f290798221be1139bb50bfb,"@java.lang.Override public java.lang.String getETag() { com.google.gerrit.server.CurrentUser user = control.getUser(); @java.lang.SuppressWarnings(""deprecation"") com.google.common.hash.Hasher h = com.google.common.hash.Hashing.md5().newHasher(); if (user.isIdentifiedUser()) { h.putString(starredChangesUtil.getObjectId(user.getAccountId(), getId()).name(), java.nio.charset.StandardCharsets.UTF_8); } prepareETag(h, user); return h.hash().toString(); }",b2fb7e20e604a7eb0ec70eeb32254d0204f473a8,"@java.lang.Override public java.lang.String getETag() { com.google.gerrit.server.CurrentUser user = control.getUser(); com.google.common.hash.Hasher h = com.google.common.hash.Hashing.murmur3_128().newHasher(); if (user.isIdentifiedUser()) { h.putString(starredChangesUtil.getObjectId(user.getAccountId(), getId()).name(), java.nio.charset.StandardCharsets.UTF_8); } prepareETag(h, user); return h.hash().toString(); }",7220c169d5c064d7413706cdd2961f6494c9a5b1,2017-06-21 06:50:28,7
108164,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_LibraryDownloader.java,"private void verifyFileChecksum() { if ((sha1) == null) { java.lang.System.err.println(); java.lang.System.err.flush(); return; } com.google.common.hash.Hasher h = com.google.common.hash.Hashing.sha1().newHasher(); try (java.io.InputStream in = java.nio.file.Files.newInputStream(dst);java.io.OutputStream out = com.google.common.hash.Funnels.asOutputStream(h)) { com.google.common.io.ByteStreams.copy(in, out); } catch (java.io.IOException e) { deleteDst(); throw new com.google.gerrit.common.Die((""cannot checksum "" + (dst)), e); } if (sha1.equals(h.hash().toString())) { java.lang.System.err.println(((""Checksum "" + (dst.getFileName())) + "" OK"")); java.lang.System.err.flush(); } else if (ui.isBatch()) { deleteDst(); throw new com.google.gerrit.common.Die(((dst) + "" SHA-1 checksum does not match"")); } else if (!(ui.yesno(null, ""error: SHA-1 checksum does not match\nUse %s anyway"", dst.getFileName()))) { deleteDst(); throw new com.google.gerrit.common.Die(""aborted by user""); } }",5aa9757f703692b54ddca136a3e60c3c57be6753,"private void verifyFileChecksum() { if ((sha1) == null) { java.lang.System.err.println(); java.lang.System.err.flush(); return; } @java.lang.SuppressWarnings(""deprecation"") com.google.common.hash.Hasher h = com.google.common.hash.Hashing.sha1().newHasher(); try (java.io.InputStream in = java.nio.file.Files.newInputStream(dst);java.io.OutputStream out = com.google.common.hash.Funnels.asOutputStream(h)) { com.google.common.io.ByteStreams.copy(in, out); } catch (java.io.IOException e) { deleteDst(); throw new com.google.gerrit.common.Die((""cannot checksum "" + (dst)), e); } if (sha1.equals(h.hash().toString())) { java.lang.System.err.println(((""Checksum "" + (dst.getFileName())) + "" OK"")); java.lang.System.err.flush(); } else if (ui.isBatch()) { deleteDst(); throw new com.google.gerrit.common.Die(((dst) + "" SHA-1 checksum does not match"")); } else if (!(ui.yesno(null, ""error: SHA-1 checksum does not match\nUse %s anyway"", dst.getFileName()))) { deleteDst(); throw new com.google.gerrit.common.Die(""aborted by user""); } }",e2435484d4da5fed8283f77c7e9f78256fc6e39b,"private void verifyFileChecksum() { if ((sha1) == null) { java.lang.System.err.println(); java.lang.System.err.flush(); return; } com.google.common.hash.Hasher h = com.google.common.hash.Hashing.murmur3_128().newHasher(); try (java.io.InputStream in = java.nio.file.Files.newInputStream(dst);java.io.OutputStream out = com.google.common.hash.Funnels.asOutputStream(h)) { com.google.common.io.ByteStreams.copy(in, out); } catch (java.io.IOException e) { deleteDst(); throw new com.google.gerrit.common.Die((""cannot checksum "" + (dst)), e); } if (sha1.equals(h.hash().toString())) { java.lang.System.err.println(((""Checksum "" + (dst.getFileName())) + "" OK"")); java.lang.System.err.flush(); } else if (ui.isBatch()) { deleteDst(); throw new com.google.gerrit.common.Die(((dst) + "" SHA-1 checksum does not match"")); } else if (!(ui.yesno(null, ""error: SHA-1 checksum does not match\nUse %s anyway"", dst.getFileName()))) { deleteDst(); throw new com.google.gerrit.common.Die(""aborted by user""); } }",4f8fd83942df4adc38465dab014281d119f454d5,2017-06-21 06:50:28,7
108164,gerrit-server_src_main_java_com_google_gerrit_server_change_PostReview.java,"public static com.google.gerrit.server.change.PostReview.CommentSetEntry create(com.google.gerrit.reviewdb.client.Comment comment) { return com.google.gerrit.server.change.PostReview.CommentSetEntry.create(comment.key.filename, comment.key.patchSetId, comment.lineNbr, com.google.gerrit.extensions.client.Side.fromShort(comment.side), com.google.common.hash.Hashing.sha1().hashString(comment.message, java.nio.charset.StandardCharsets.UTF_8), comment.range); }",5cbfbec24d66be0738f070bb788a3559242ac4a7,"public static com.google.gerrit.server.change.PostReview.CommentSetEntry create(com.google.gerrit.reviewdb.client.Comment comment) { @java.lang.SuppressWarnings(""deprecation"") com.google.common.hash.HashCode h = com.google.common.hash.Hashing.sha1().hashString(comment.message, java.nio.charset.StandardCharsets.UTF_8); return com.google.gerrit.server.change.PostReview.CommentSetEntry.create(comment.key.filename, comment.key.patchSetId, comment.lineNbr, com.google.gerrit.extensions.client.Side.fromShort(comment.side), h, comment.range); }",aa48c6ba49566021eb36a525190fc7d263e830d3,"public static com.google.gerrit.server.change.PostReview.CommentSetEntry create(com.google.gerrit.reviewdb.client.Comment comment) { return com.google.gerrit.server.change.PostReview.CommentSetEntry.create(comment.key.filename, comment.key.patchSetId, comment.lineNbr, com.google.gerrit.extensions.client.Side.fromShort(comment.side), com.google.common.hash.Hashing.murmur3_128().hashString(comment.message, java.nio.charset.StandardCharsets.UTF_8), comment.range); }",b11d7b31e967385afa2d62c2bd103308dd30484b,2017-06-21 06:50:28,7
110173,gerrit-server_src_main_java_com_google_gerrit_server_git_strategy_SubmitStrategy.java,"public final void addOps(com.google.gerrit.server.update.BatchUpdate bu, java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.IntegrationException { java.util.List<com.google.gerrit.server.git.strategy.SubmitStrategyOp> ops = buildOps(toMerge); java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> added = com.google.common.collect.Sets.newHashSetWithExpectedSize(ops.size()); for (com.google.gerrit.server.git.strategy.SubmitStrategyOp op : ops) { added.add(op.getCommit()); } java.util.List<com.google.gerrit.server.git.CodeReviewCommit> difference = new java.util.ArrayList(com.google.common.collect.Sets.difference(toMerge, added)); java.util.Collections.reverse(difference); for (com.google.gerrit.server.git.CodeReviewCommit c : difference) { bu.addOp(c.change().getId(), new com.google.gerrit.server.git.strategy.ImplicitIntegrateOp(args, c)); } for (com.google.gerrit.server.git.strategy.SubmitStrategyOp op : ops) { bu.addOp(op.getId(), op); } }",2b63faf45954016e8d4985431e23d6a28e2e6228,"public final void addOps(com.google.gerrit.server.update.BatchUpdate bu, java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.IntegrationException { java.util.List<com.google.gerrit.server.git.strategy.SubmitStrategyOp> ops = buildOps(toMerge); java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> added = com.google.common.collect.Sets.newHashSetWithExpectedSize(ops.size()); for (com.google.gerrit.server.git.strategy.SubmitStrategyOp op : ops) { added.add(op.getCommit()); } java.util.List<com.google.gerrit.server.git.CodeReviewCommit> difference = new java.util.ArrayList(com.google.common.collect.Sets.difference(toMerge, added)); java.util.Collections.reverse(difference); for (com.google.gerrit.server.git.CodeReviewCommit c : difference) { com.google.gerrit.reviewdb.client.Change.Id id = c.change().getId(); bu.addOp(c.change().getId(), new com.google.gerrit.server.git.strategy.ImplicitIntegrateOp(args, c)); maybeAddTestHelperOp(bu, id); } for (com.google.gerrit.server.git.strategy.SubmitStrategyOp op : ops) { bu.addOp(op.getId(), op); maybeAddTestHelperOp(bu, op.getId()); } }",8c2506268bb53f2bd21f010eb17a3e77604cfeba,"public final void addOps(com.google.gerrit.server.update.BatchUpdate bu, java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.IntegrationException { java.util.List<com.google.gerrit.server.git.strategy.SubmitStrategyOp> ops = buildOps(toMerge); java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> added = com.google.common.collect.Sets.newHashSetWithExpectedSize(ops.size()); for (com.google.gerrit.server.git.strategy.SubmitStrategyOp op : ops) { added.add(op.getCommit()); } java.util.List<com.google.gerrit.server.git.CodeReviewCommit> difference = new java.util.ArrayList(com.google.common.collect.Sets.difference(toMerge, added)); java.util.Collections.reverse(difference); for (com.google.gerrit.server.git.CodeReviewCommit c : difference) { com.google.gerrit.reviewdb.client.Change.Id id = c.change().getId(); bu.addOp(id, new com.google.gerrit.server.git.strategy.ImplicitIntegrateOp(args, c)); maybeAddTestHelperOp(bu, id); } for (com.google.gerrit.server.git.strategy.SubmitStrategyOp op : ops) { bu.addOp(op.getId(), op); maybeAddTestHelperOp(bu, op.getId()); } }",9c2caeb2dd211a53bd2db0c890f830be186c43ca,2017-06-21 12:00:33,7
110172,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeOpRepoManager.java,"public java.util.List<com.google.gerrit.server.update.BatchUpdate> batchUpdates(com.google.gerrit.server.update.BatchUpdate.Factory batchUpdateFactory, java.util.Collection<com.google.gerrit.reviewdb.client.Project.NameKey> projects) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { java.util.List<com.google.gerrit.server.update.BatchUpdate> updates = new java.util.ArrayList(projects.size()); for (com.google.gerrit.reviewdb.client.Project.NameKey project : projects) { updates.add(getRepo(project).getUpdate(batchUpdateFactory)); } return updates; }",4d937b20643dfc98d2ce0181d8c6059e71e6c27f,"public java.util.List<com.google.gerrit.server.update.BatchUpdate> batchUpdates(java.util.Collection<com.google.gerrit.reviewdb.client.Project.NameKey> projects) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { java.util.List<com.google.gerrit.server.update.BatchUpdate> updates = new java.util.ArrayList(projects.size()); for (com.google.gerrit.reviewdb.client.Project.NameKey project : projects) { updates.add(getRepo(project).getUpdate()); } return updates; }",5a20867358e489b920f4d1c2869776f5fdc6ae97,"public java.util.List<com.google.gerrit.server.update.BatchUpdate> batchUpdates(java.util.Collection<com.google.gerrit.reviewdb.client.Project.NameKey> projects) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { java.util.List<com.google.gerrit.server.update.BatchUpdate> updates = new java.util.ArrayList(projects.size()); for (com.google.gerrit.reviewdb.client.Project.NameKey project : projects) { updates.add(getRepo(project).getUpdate().setRefLogMessage(""merged"")); } return updates; }",ae0ea72b9a9ef0867ef2160cf88c06e554b146a9,2017-06-21 12:00:33,4
110173,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_AbstractSubmit.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private org.eclipse.jgit.revwalk.RevCommit parseCurrentRevision(org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.acceptance.PushOneCommit.Result r) throws java.lang.Exception { return rw.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(get(r.getChangeId(), ListChangesOption.CURRENT_REVISION).currentRevision)); }",e8d1de9dd3b8bb93c2fa06ddd7793fa4f5708e2c,"private void assertSubmittedTogether(java.lang.String changeId, java.lang.Iterable<java.lang.String> expected) throws java.lang.Exception { assertThat(gApi.changes().id(changeId).submittedTogether().stream().map(( i) -> i.changeId)).containsExactlyElementsIn(expected); }",79d264ead26e8329f790b99447db2b4296fa9246,2017-06-21 12:00:33,7
108615,gerrit-server_src_main_java_com_google_gerrit_server_git_NotesBranchUtil.java,"public final org.eclipse.jgit.notes.NoteMap commitNewNotes(org.eclipse.jgit.notes.NoteMap notes, java.lang.String notesBranch, org.eclipse.jgit.lib.PersonIdent commitAuthor, java.lang.String commitMessage) throws java.io.IOException, org.eclipse.jgit.api.errors.ConcurrentRefUpdateException { this.overwrite = false; commitNotes(notes, notesBranch, commitAuthor, commitMessage); org.eclipse.jgit.notes.NoteMap newlyCreated = org.eclipse.jgit.notes.NoteMap.newEmptyMap(); for (org.eclipse.jgit.notes.Note n : notes) { if (((base) == null) || (!(base.contains(n)))) { newlyCreated.set(n, n.getData()); } } return newlyCreated; }",6a74ee00e5d4ab12d453fc1ba0381b1a9e9cfe27,"public final org.eclipse.jgit.notes.NoteMap commitNewNotes(org.eclipse.jgit.notes.NoteMap notes, java.lang.String notesBranch, org.eclipse.jgit.lib.PersonIdent commitAuthor, java.lang.String commitMessage) throws com.google.gerrit.server.git.LockFailureException, java.io.IOException { this.overwrite = false; commitNotes(notes, notesBranch, commitAuthor, commitMessage); org.eclipse.jgit.notes.NoteMap newlyCreated = org.eclipse.jgit.notes.NoteMap.newEmptyMap(); for (org.eclipse.jgit.notes.Note n : notes) { if (((base) == null) || (!(base.contains(n)))) { newlyCreated.set(n, n.getData()); } } return newlyCreated; }",41bc49716bc0234bc6c034da994b47fc6a59d5be,"public final org.eclipse.jgit.notes.NoteMap commitNewNotes(org.eclipse.jgit.notes.NoteMap notes, java.lang.String notesBranch, org.eclipse.jgit.lib.PersonIdent commitAuthor, java.lang.String commitMessage) throws java.io.IOException { this.overwrite = false; commitNotes(notes, notesBranch, commitAuthor, commitMessage); org.eclipse.jgit.notes.NoteMap newlyCreated = org.eclipse.jgit.notes.NoteMap.newEmptyMap(); for (org.eclipse.jgit.notes.Note n : notes) { if (((base) == null) || (!(base.contains(n)))) { newlyCreated.set(n, n.getData()); } } return newlyCreated; }",13c36e551efaa738f9b7db4283187a768e6513e8,2017-06-21 13:56:35,9
108615,gerrit-server_src_main_java_com_google_gerrit_server_project_BanCommit.java,"@java.lang.Override public com.google.gerrit.server.project.BanCommit.BanResultInfo apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.server.project.BanCommit.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, java.io.IOException { com.google.gerrit.server.project.BanCommit.BanResultInfo r = new com.google.gerrit.server.project.BanCommit.BanResultInfo(); if (((input != null) && ((input.commits) != null)) && (!(input.commits.isEmpty()))) { java.util.List<org.eclipse.jgit.lib.ObjectId> commitsToBan = new java.util.ArrayList<>(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } } try { com.google.gerrit.server.git.BanCommitResult result = banCommit.ban(rsrc.getControl(), commitsToBan, input.reason); r.newlyBanned = com.google.gerrit.server.project.BanCommit.transformCommits(result.getNewlyBannedCommits()); r.alreadyBanned = com.google.gerrit.server.project.BanCommit.transformCommits(result.getAlreadyBannedCommits()); r.ignored = com.google.gerrit.server.project.BanCommit.transformCommits(result.getIgnoredObjectIds()); } catch (com.google.gerrit.common.errors.PermissionDeniedException e) { throw new com.google.gerrit.extensions.restapi.AuthException(e.getMessage()); } catch (org.eclipse.jgit.api.errors.ConcurrentRefUpdateException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage(), e); } } return r; }",0ac41445ac1765257e9eb3cf954ca8ebd3f9800f,"@java.lang.Override public com.google.gerrit.server.project.BanCommit.BanResultInfo apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.server.project.BanCommit.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { return retryHelper.execute(( updateFactory) -> { com.google.gerrit.server.project.BanResultInfo r = new com.google.gerrit.server.project.BanResultInfo(); if (((input != null) && (input.commits != null)) && (!(input.commits.isEmpty()))) { List<org.eclipse.jgit.lib.ObjectId> commitsToBan = new com.google.gerrit.server.project.ArrayList<>(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch ( e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(com.google.gerrit.server.project.e.getMessage()); } } try { com.google.gerrit.server.git.BanCommitResult result = banCommit.ban(rsrc.getControl(), commitsToBan, input.reason); r.newlyBanned = transformCommits(result.getNewlyBannedCommits()); r.alreadyBanned = transformCommits(result.getAlreadyBannedCommits()); r.ignored = transformCommits(result.getIgnoredObjectIds()); } catch ( e) { throw new com.google.gerrit.extensions.restapi.AuthException(com.google.gerrit.server.project.e.getMessage()); } } return r; }); }",c8f24abad2d5d70b2cec91cdecc06b63b35345d0,"@java.lang.Override protected com.google.gerrit.server.project.BanCommit.BanResultInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.server.project.BanCommit.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, java.io.IOException { com.google.gerrit.server.project.BanCommit.BanResultInfo r = new com.google.gerrit.server.project.BanCommit.BanResultInfo(); if (((input != null) && ((input.commits) != null)) && (!(input.commits.isEmpty()))) { java.util.List<org.eclipse.jgit.lib.ObjectId> commitsToBan = new java.util.ArrayList<>(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } } try { com.google.gerrit.server.git.BanCommitResult result = banCommit.ban(rsrc.getControl(), commitsToBan, input.reason); r.newlyBanned = com.google.gerrit.server.project.BanCommit.transformCommits(result.getNewlyBannedCommits()); r.alreadyBanned = com.google.gerrit.server.project.BanCommit.transformCommits(result.getAlreadyBannedCommits()); r.ignored = com.google.gerrit.server.project.BanCommit.transformCommits(result.getIgnoredObjectIds()); } catch (com.google.gerrit.common.errors.PermissionDeniedException e) { throw new com.google.gerrit.extensions.restapi.AuthException(e.getMessage()); } } return r; }",2a15222eefdca0c6f555f8bd37faf787c95bd808,2017-06-21 13:56:35,9
108615,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_BanCommitCommand.java,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.project.BanCommit.Input input = BanCommit.Input.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, ObjectId::getName)); input.reason = reason; com.google.gerrit.server.project.BanCommit.BanResultInfo r = banCommit.apply(new com.google.gerrit.server.project.ProjectResource(projectControl), input); printCommits(r.newlyBanned, ""The following commits were banned""); printCommits(r.alreadyBanned, ""The following commits were already banned""); printCommits(r.ignored, ""The following ids do not represent commits and were ignored""); } catch (com.google.gerrit.extensions.restapi.RestApiException | java.io.IOException e) { throw die(e); } }",f703d0cb9019221bc6ceac63c868029c98193e5f,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.project.BanCommit.Input input = BanCommit.Input.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, ObjectId::getName)); input.reason = reason; com.google.gerrit.server.project.BanCommit.BanResultInfo r = banCommit.apply(new com.google.gerrit.server.project.ProjectResource(projectControl), input); printCommits(r.newlyBanned, ""The following commits were banned""); printCommits(r.alreadyBanned, ""The following commits were already banned""); printCommits(r.ignored, ""The following ids do not represent commits and were ignored""); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.update.UpdateException e) { throw die(e); } }",5cd2afb91be5a57768f7d15fa6a2611b067faf28,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.project.BanCommit.Input input = BanCommit.Input.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, ObjectId::getName)); input.reason = reason; com.google.gerrit.server.project.BanCommit.BanResultInfo r = banCommit.apply(new com.google.gerrit.server.project.ProjectResource(projectControl), input); printCommits(r.newlyBanned, ""The following commits were banned""); printCommits(r.alreadyBanned, ""The following commits were already banned""); printCommits(r.ignored, ""The following ids do not represent commits and were ignored""); } catch (java.lang.Exception e) { throw die(e); } }",cdefe99cefd0d6689a6e25ca701ea0d51ec5377f,2017-06-21 13:56:35,9
108615,gerrit-server_src_main_java_com_google_gerrit_server_git_NotesBranchUtil.java,"public final void commitAllNotes(org.eclipse.jgit.notes.NoteMap notes, java.lang.String notesBranch, org.eclipse.jgit.lib.PersonIdent commitAuthor, java.lang.String commitMessage) throws java.io.IOException, org.eclipse.jgit.api.errors.ConcurrentRefUpdateException { this.overwrite = true; commitNotes(notes, notesBranch, commitAuthor, commitMessage); }",a17b77af482da55cbd9ac1c82a6d686c9d418eae,"public final void commitAllNotes(org.eclipse.jgit.notes.NoteMap notes, java.lang.String notesBranch, org.eclipse.jgit.lib.PersonIdent commitAuthor, java.lang.String commitMessage) throws com.google.gerrit.server.git.LockFailureException, java.io.IOException { this.overwrite = true; commitNotes(notes, notesBranch, commitAuthor, commitMessage); }",c664c0ee67403ef06636a4afa1112a9cf1972114,"public final void commitAllNotes(org.eclipse.jgit.notes.NoteMap notes, java.lang.String notesBranch, org.eclipse.jgit.lib.PersonIdent commitAuthor, java.lang.String commitMessage) throws java.io.IOException { this.overwrite = true; commitNotes(notes, notesBranch, commitAuthor, commitMessage); }",a578ff2ab2c706ce64788496b4cff66c39292875,2017-06-21 13:56:35,9
110057,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_api_changes_ChangeApi.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,void message(java.lang.String message) throws com.google.gerrit.extensions.restapi.RestApiException;,f8dbd7d34e72c93823038d349ec664a7e2cc1fa7,void setMessage(java.lang.String message) throws com.google.gerrit.extensions.restapi.RestApiException;,5435c433f3759d3f5788c6ac43524cf66cae1ed5,2017-06-21 15:39:49,11
110057,gerrit-server_src_main_java_com_google_gerrit_server_change_PutMessage.java,,,"private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repository, org.eclipse.jgit.revwalk.RevCommit basePatchSetCommit, org.eclipse.jgit.lib.ObjectId tree, java.lang.String commitMessage, java.sql.Timestamp timestamp) throws java.io.IOException { try (org.eclipse.jgit.lib.ObjectInserter objectInserter = repository.newObjectInserter()) { org.eclipse.jgit.lib.CommitBuilder builder = new org.eclipse.jgit.lib.CommitBuilder(); builder.setTreeId(tree); builder.setParentIds(basePatchSetCommit.getParents()); builder.setAuthor(basePatchSetCommit.getAuthorIdent()); builder.setCommitter(currentUserProvider.get().asIdentifiedUser().newCommitterIdent(timestamp, tz)); builder.setMessage(commitMessage); org.eclipse.jgit.lib.ObjectId newCommitId = objectInserter.insert(builder); objectInserter.flush(); return newCommitId; } }",50aaf83cdb42e8c63158457caeb1f24f1659cf6c,"private static void ensureChangeIdIsCorrect(boolean requireChangeId, java.lang.String currentChangeId, java.lang.String newCommitMessage) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException { org.eclipse.jgit.revwalk.RevCommit revCommit = org.eclipse.jgit.revwalk.RevCommit.parse(org.eclipse.jgit.lib.Constants.encode((((""tree "" + (org.eclipse.jgit.lib.ObjectId.zeroId().name())) + ""\n\n"") + newCommitMessage))); com.google.gerrit.server.util.CommitMessageUtil.checkAndSanitizeCommitMessage(revCommit.getShortMessage()); java.util.List<java.lang.String> changeIdFooters = revCommit.getFooterLines(FooterConstants.CHANGE_ID); if (requireChangeId && (changeIdFooters.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""missing Change-Id footer""); } if ((!(changeIdFooters.isEmpty())) && (!(changeIdFooters.get(0).equals(currentChangeId)))) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""wrong Change-Id footer""); } if ((changeIdFooters.size()) > 1) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""multiple Change-Id footers""); } }",81a6ca26454832fc60d31159260ed095073828e3,2017-06-21 15:39:49,11
110057,gerrit-server_src_main_java_com_google_gerrit_server_change_PutMessage.java,,,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.PutMessage.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.edit.UnchangedCommitMessageException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.current(dbProvider.get(), rsrc.getNotes()); if (ps == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""current revision is missing""); } else if (!(rsrc.getControl().isPatchVisible(ps, dbProvider.get()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""current revision not accessible""); } return putMessage.applyImpl(updateFactory, new com.google.gerrit.server.change.RevisionResource(rsrc, ps), input); }",2e9821aeed523bc7519a6e60f7e0d9a978e469f6,"private void ensureCanEditCommitMessage(com.google.gerrit.server.notedb.ChangeNotes changeNotes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { if (!(currentUserProvider.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } try { permissionBackend.user(currentUserProvider.get()).database(db.get()).change(changeNotes).check(ChangePermission.ADD_PATCH_SET); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException(""modifying commit message not permitted"", denied); } }",965a101b58450ba162181cfe69f1f279d93210c6,2017-06-21 15:39:49,11
110057,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_api_changes_ChangeApi.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void message(java.lang.String message) { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); },fe5df9820a4372ded564ca8617eec2d1f1973172,@java.lang.Override public void setMessage(java.lang.String message) { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); },9fcb93853ee442407f214c6efc8e239123282092,2017-06-21 15:39:49,11
110057,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangeApiImpl.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void message(java.lang.String message) throws com.google.gerrit.extensions.restapi.RestApiException { current().message(message); },0293c50be1a811b22ea5c5db55157382d02d9d6a,"@java.lang.Override public void setMessage(java.lang.String in) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.change.PutMessage.Input input = new com.google.gerrit.server.change.PutMessage.Input(); input.message = in; putMessage.apply(change, input); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot edit commit message"", e); } }",3ddefa5bcb9a646d85b618c12e6a6e2ac0bad922,2017-06-21 15:39:49,11
105198,gerrit-server_src_main_java_com_google_gerrit_server_account_CapabilityControl.java,"public boolean doCanForDefaultPermissionBackend(com.google.gerrit.extensions.api.access.GlobalOrPluginPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { if (perm instanceof com.google.gerrit.server.permissions.GlobalPermission) { return can(((com.google.gerrit.server.permissions.GlobalPermission) (perm))); } else if (perm instanceof com.google.gerrit.extensions.api.access.PluginPermission) { return (canPerform(perm.permissionName())) || (isAdmin_DoNotUse()); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",22eaa34383216b2b33999f54b194a7a1560f5b02,"public boolean doCanForDefaultPermissionBackend(com.google.gerrit.extensions.api.access.GlobalOrPluginPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { if (perm instanceof com.google.gerrit.server.permissions.GlobalPermission) { return can(((com.google.gerrit.server.permissions.GlobalPermission) (perm))); } else if (perm instanceof com.google.gerrit.extensions.api.access.PluginPermission) { return (canPerform(perm.permissionName())) || (isAdmin()); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",3255f9b9c85a7619c8d7a45b2c5a22a95d2a3abb,"public boolean doCanForDefaultPermissionBackend(com.google.gerrit.extensions.api.access.GlobalOrPluginPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { if (perm instanceof com.google.gerrit.server.permissions.GlobalPermission) { return can(((com.google.gerrit.server.permissions.GlobalPermission) (perm))); } else if (perm instanceof com.google.gerrit.extensions.api.access.PluginPermission) { com.google.gerrit.extensions.api.access.PluginPermission pluginPermission = ((com.google.gerrit.extensions.api.access.PluginPermission) (perm)); return (canPerform(pluginPermission.permissionName())) || ((pluginPermission.fallBackToAdmin()) && (isAdmin())); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",ab37019ebae3010a54534740bd924c02693cb919,2017-06-21 23:41:42,6
105198,gerrit-pgm_src_main_java_com_google_gerrit_pgm_http_jetty_ProjectQoSFilter.java,private WorkQueue.Executor getExecutor() { return queue.getQueue(user.get().getCapabilities().getQueueType()); },b3d599fe59c316621d145e3d9acead0f2e901bec,private WorkQueue.Executor getExecutor() { com.google.gerrit.server.git.QueueProvider.QueueType qt = capabilityFactory.create(user.get()).getQueueType(); return queue.getQueue(qt); },6f6d95c786f26ab047a79ab95f1ba545ad8b4722,private java.util.concurrent.ScheduledThreadPoolExecutor getExecutor() { com.google.gerrit.server.git.QueueProvider.QueueType qt = capabilityFactory.create(user.get()).getQueueType(); return queue.getQueue(qt); },14a909f84838f3772f8f8e129cf3d161b968658c,2017-06-21 23:41:42,6
110770,gerrit-server_src_main_java_com_google_gerrit_server_change_SetWorkInProgress.java,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set work in progress""); } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""change is "" + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is already work in progress""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), new com.google.gerrit.server.change.WorkInProgressOp(cmUtil, true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""""); } }",323316b9259812c9702ff7c8a2b6ee3390c985cd,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set work in progress""); } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""change is "" + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is already work in progress""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), new com.google.gerrit.server.change.WorkInProgressOp(cmUtil, null, null, true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""""); } }",6d9f3314324fe874ab0f93b7ca803d437f7b20d6,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set work in progress""); } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""change is "" + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is already work in progress""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""""); } }",e371a78788c7f905f17ad0dbf9fa81ffd476dd6f,2017-06-22 14:03:43,4
110770,gerrit-server_src_main_java_com_google_gerrit_server_change_SetReadyForReview.java,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set ready for review""); } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""change is "" + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (!(change.isWorkInProgress())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is not work in progress""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), new com.google.gerrit.server.change.WorkInProgressOp(cmUtil, false, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""""); } }",8313813a3786d1fd7e40d0c6c53cee7eff6082ab,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set ready for review""); } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""change is "" + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (!(change.isWorkInProgress())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is not work in progress""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), new com.google.gerrit.server.change.WorkInProgressOp(cmUtil, email, psUtil, false, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""""); } }",5d49b196aa0531cd8d06eaafa0205659de0423d8,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set ready for review""); } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""change is "" + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (!(change.isWorkInProgress())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is not work in progress""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(false, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""""); } }",4cca7b1a38ee836a93c71ba051e26bb6403fb481,2017-06-22 14:03:43,4
110770,gerrit-server_src_main_java_com_google_gerrit_server_change_WorkInProgressOp.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { if (((email) == null) || ((ps) == null)) { return; } email.create(NotifyHandling.ALL, com.google.common.collect.ImmutableListMultimap.of(), notes, ps, ctx.getIdentifiedUser(), cmsg, com.google.common.collect.ImmutableList.of(), cmsg.getMessage(), com.google.common.collect.ImmutableList.of()).sendAsync(); }",8adb9bebb9def6da31145202c12d8101b3cdaff0,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { if (workInProgress) { return; } email.create(NotifyHandling.ALL, com.google.common.collect.ImmutableListMultimap.of(), notes, ps, ctx.getIdentifiedUser(), cmsg, com.google.common.collect.ImmutableList.of(), cmsg.getMessage(), com.google.common.collect.ImmutableList.of()).sendAsync(); }",8b78b46bb79341e5875d52bba74ca66b40287836,2017-06-22 14:03:43,4
110770,gerrit-server_src_main_java_com_google_gerrit_server_change_WorkInProgressOp.java,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = ctx.getChange(); com.google.gerrit.server.notedb.ChangeUpdate update = ctx.getUpdate(change.currentPatchSetId()); change.setWorkInProgress(workInProgress); if ((!(change.hasReviewStarted())) && (!(workInProgress))) { change.setReviewStarted(true); } change.setLastUpdatedOn(ctx.getWhen()); update.setWorkInProgress(workInProgress); addMessage(ctx, update); return true; }",8b339ff57007c7b987ebdf01cf0f58b0d5e52b4a,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { change = ctx.getChange(); notes = ctx.getNotes(); if ((psUtil) != null) { ps = psUtil.get(ctx.getDb(), ctx.getNotes(), change.currentPatchSetId()); } com.google.gerrit.server.notedb.ChangeUpdate update = ctx.getUpdate(change.currentPatchSetId()); change.setWorkInProgress(workInProgress); if ((!(change.hasReviewStarted())) && (!(workInProgress))) { change.setReviewStarted(true); } change.setLastUpdatedOn(ctx.getWhen()); update.setWorkInProgress(workInProgress); addMessage(ctx, update); return true; }",661c8aa33ae32fd69e23cd1686ed0eb087e1ed59,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { change = ctx.getChange(); notes = ctx.getNotes(); ps = psUtil.get(ctx.getDb(), ctx.getNotes(), change.currentPatchSetId()); com.google.gerrit.server.notedb.ChangeUpdate update = ctx.getUpdate(change.currentPatchSetId()); change.setWorkInProgress(workInProgress); if ((!(change.hasReviewStarted())) && (!(workInProgress))) { change.setReviewStarted(true); } change.setLastUpdatedOn(ctx.getWhen()); update.setWorkInProgress(workInProgress); addMessage(ctx, update); return true; }",2ee054f599eb4018a23920094c76dcaf1be2a939,2017-06-22 14:03:43,4
110770,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_ChangeNotificationsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void startReview(com.google.gerrit.acceptance.server.mail.StagedChange sc) throws com.google.gerrit.extensions.restapi.RestApiException { setApiUser(sc.owner); gApi.changes().id(sc.changeId).setReadyForReview(); gApi.changes().id(sc.changeId).revision(""current"").review(com.google.gerrit.extensions.api.changes.ReviewInput.noScore()); }",9a1dd17d17c22dac58790bd9b46c4881089a4c3f,"private void startReview(com.google.gerrit.acceptance.server.mail.StagedChange sc) throws java.lang.Exception { setApiUser(sc.owner); gApi.changes().id(sc.changeId).setReadyForReview(); gApi.changes().id(sc.changeId).revision(""current"").review(com.google.gerrit.extensions.api.changes.ReviewInput.noScore()); }",cba49f57be2086580f1f76f4150b2d028abef1bb,2017-06-22 14:03:43,4
111051,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_StandaloneSiteTest.java,,,"protected com.google.gerrit.acceptance.GerritServer startServer() throws java.lang.Exception { return com.google.gerrit.acceptance.GerritServer.start(serverDesc, baseConfig, sitePaths.site_path); }",cc11cfa7e54fe3c1faedf91e649331fc8f0a8d26,protected com.google.gerrit.acceptance.StandaloneSiteTest.ServerContext startServer() throws java.lang.Exception { return new com.google.gerrit.acceptance.StandaloneSiteTest.ServerContext(startImpl()); },1791e54d264bfa2a474dbff8025fd10d2e3f727d,2017-06-24 04:36:03,4
111051,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_pgm_OfflineNoteDbMigrationIT.java,"@org.junit.Test public void migrationDoesNotRequireIndex() throws java.lang.Exception { assertNotesMigrationState(NotesMigrationState.REVIEW_DB); setUpOneChange(); int version = ChangeSchemaDefinitions.INSTANCE.getLatest().getVersion(); com.google.gerrit.server.index.GerritIndexStatus status = new com.google.gerrit.server.index.GerritIndexStatus(new com.google.gerrit.server.config.SitePaths(site)); assertThat(status.getReady(ChangeSchemaDefinitions.NAME, version)).isTrue(); status.setReady(ChangeSchemaDefinitions.NAME, version, false); status.save(); migrate(""--trial"", ""false""); assertNotesMigrationState(NotesMigrationState.NOTE_DB_UNFUSED); status = new com.google.gerrit.server.index.GerritIndexStatus(new com.google.gerrit.server.config.SitePaths(site)); assertThat(status.getReady(ChangeSchemaDefinitions.NAME, version)).isFalse(); try (com.google.gerrit.acceptance.GerritServer server = startServer()) { fail(""expected server startup to fail""); } catch (com.google.gerrit.acceptance.GerritServer e) { } }",5554cde3c4fb85be4915ef6a690faf9aa43377ff,"@org.junit.Test public void migrationDoesNotRequireIndex() throws java.lang.Exception { assertNotesMigrationState(NotesMigrationState.REVIEW_DB); setUpOneChange(); int version = ChangeSchemaDefinitions.INSTANCE.getLatest().getVersion(); com.google.gerrit.server.index.GerritIndexStatus status = new com.google.gerrit.server.index.GerritIndexStatus(sitePaths); assertThat(status.getReady(ChangeSchemaDefinitions.NAME, version)).isTrue(); status.setReady(ChangeSchemaDefinitions.NAME, version, false); status.save(); migrate(""--trial"", ""false""); assertNotesMigrationState(NotesMigrationState.NOTE_DB_UNFUSED); status = new com.google.gerrit.server.index.GerritIndexStatus(sitePaths); assertThat(status.getReady(ChangeSchemaDefinitions.NAME, version)).isFalse(); try (com.google.gerrit.acceptance.GerritServer server = startServer()) { fail(""expected server startup to fail""); } catch (com.google.gerrit.acceptance.GerritServer e) { } }",5549eddc1e37bae51bad03eb6a5ab133b110e6bd,"@org.junit.Test public void migrationDoesNotRequireIndex() throws java.lang.Exception { assertNotesMigrationState(NotesMigrationState.REVIEW_DB); setUpOneChange(); int version = ChangeSchemaDefinitions.INSTANCE.getLatest().getVersion(); com.google.gerrit.server.index.GerritIndexStatus status = new com.google.gerrit.server.index.GerritIndexStatus(sitePaths); assertThat(status.getReady(ChangeSchemaDefinitions.NAME, version)).isTrue(); status.setReady(ChangeSchemaDefinitions.NAME, version, false); status.save(); migrate(""--trial"", ""false""); assertNotesMigrationState(NotesMigrationState.NOTE_DB_UNFUSED); status = new com.google.gerrit.server.index.GerritIndexStatus(sitePaths); assertThat(status.getReady(ChangeSchemaDefinitions.NAME, version)).isFalse(); assertServerStartupFails(); }",63ef2d5fac4ee98be31c7b24a1aecbdca6157ca8,2017-06-24 04:36:03,4
110915,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_notedb_OnlineNoteDbMigrationIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void enableSequencesWithGap() throws java.lang.Exception { testEnableSequences(null, 503, ""513""); }",1a39ba6bda01d4b77e04032a42738e760cbccf78,"@org.junit.Test public void enableSequencesWithGap() throws java.lang.Exception { testEnableSequences((-1), 502, ""512""); }",08be39700e5f20a3a97801fde5c21b88bf594de6,2017-06-24 04:36:03,6
110915,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_NoteDbMigrator.java,"public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator build() throws com.google.gerrit.server.notedb.rebuild.MigrationException { return new com.google.gerrit.server.notedb.rebuild.NoteDbMigrator(sitePaths, schemaFactory, rebuilder, globalNotesMigration, ((threads) > 1 ? com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(threads, ""RebuildChange"")) : com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService()), projects, changes, progressOut, trial, forceRebuild); }",c298bf7283a12363f5cd81b3195fd1685724efbf,"public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator build() throws com.google.gerrit.server.notedb.rebuild.MigrationException { return new com.google.gerrit.server.notedb.rebuild.NoteDbMigrator(sitePaths, schemaFactory, repoManager, allProjects, rebuilder, globalNotesMigration, ((threads) > 1 ? com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(threads, ""RebuildChange"")) : com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService()), projects, changes, progressOut, stopAtState, trial, forceRebuild, ((sequenceGap) != null ? sequenceGap : com.google.gerrit.server.Sequences.getChangeSequenceGap(cfg))); }",450f8532059452ca60cfc36ffda7892b2898bc20,"public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator build() throws com.google.gerrit.server.notedb.rebuild.MigrationException { return new com.google.gerrit.server.notedb.rebuild.NoteDbMigrator(sitePaths, schemaFactory, repoManager, allProjects, rebuilder, globalNotesMigration, ((threads) > 1 ? com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(threads, ""RebuildChange"")) : com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService()), projects, changes, progressOut, stopAtState, trial, forceRebuild, ((sequenceGap) >= 0 ? sequenceGap : com.google.gerrit.server.Sequences.getChangeSequenceGap(cfg))); }",15865f1e41c7adbbaf16075954ae71ded7b17c68,2017-06-24 04:36:03,6
111050,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_GerritServer.java,"private static com.google.gerrit.acceptance.GerritServer startOnDisk(com.google.gerrit.acceptance.GerritServer.Description desc, java.nio.file.Path site, com.google.gerrit.pgm.Daemon daemon, java.util.concurrent.CyclicBarrier serverStarted) throws java.lang.Exception { checkNotNull(site); java.util.concurrent.ExecutorService daemonService = java.util.concurrent.Executors.newSingleThreadExecutor(); @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<?> possiblyIgnoredError = daemonService.submit(() -> { int rc = daemon.main(new java.lang.String[]{ ""-d"", site.toString(), ""--headless"", ""--console-log"", ""--show-stack-trace"" }); if (rc != 0) { java.lang.System.err.println(""Failed to start Gerrit daemon""); serverStarted.reset(); } return null; }); serverStarted.await(); java.lang.System.out.println(""Gerrit Server Started""); return new com.google.gerrit.acceptance.GerritServer(desc, com.google.gerrit.acceptance.GerritServer.createTestInjector(daemon), daemon, daemonService); }",1c98569d7f19d837459c2b2b88ca34ce5c0c4958,"private static com.google.gerrit.acceptance.GerritServer startOnDisk(com.google.gerrit.acceptance.GerritServer.Description desc, java.nio.file.Path site, com.google.gerrit.pgm.Daemon daemon, java.util.concurrent.CyclicBarrier serverStarted) throws java.lang.Exception { checkNotNull(site); java.util.concurrent.ExecutorService daemonService = java.util.concurrent.Executors.newSingleThreadExecutor(); @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<?> possiblyIgnoredError = daemonService.submit(() -> { int rc = daemon.main(new java.lang.String[]{ ""-d"", site.toString(), ""--headless"", ""--console-log"", ""--show-stack-trace"" }); if (rc != 0) { java.lang.System.err.println(""Failed to start Gerrit daemon""); serverStarted.reset(); } return null; }); try { serverStarted.await(); } catch (java.util.concurrent.BrokenBarrierException e) { throw new com.google.gerrit.acceptance.GerritServer.StartupException(""Failed to start Gerrit daemon; see log"", e); } java.lang.System.out.println(""Gerrit Server Started""); return new com.google.gerrit.acceptance.GerritServer(desc, com.google.gerrit.acceptance.GerritServer.createTestInjector(daemon), daemon, daemonService); }",50e78a3bdafe8f07f68a6130859fb4d1d0fdba44,"private static com.google.gerrit.acceptance.GerritServer startOnDisk(com.google.gerrit.acceptance.GerritServer.Description desc, java.nio.file.Path site, com.google.gerrit.pgm.Daemon daemon, java.util.concurrent.CyclicBarrier serverStarted) throws java.lang.Exception { checkNotNull(site); java.util.concurrent.ExecutorService daemonService = java.util.concurrent.Executors.newSingleThreadExecutor(); @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<?> possiblyIgnoredError = daemonService.submit(() -> { int rc = daemon.main(new java.lang.String[]{ ""-d"", site.toString(), ""--headless"", ""--console-log"", ""--show-stack-trace"" }); if (rc != 0) { java.lang.System.err.println(""Failed to start Gerrit daemon""); serverStarted.reset(); } return null; }); try { serverStarted.await(); } catch (java.util.concurrent.BrokenBarrierException e) { daemon.stop(); throw new com.google.gerrit.acceptance.GerritServer.StartupException(""Failed to start Gerrit daemon; see log"", e); } java.lang.System.out.println(""Gerrit Server Started""); return new com.google.gerrit.acceptance.GerritServer(desc, com.google.gerrit.acceptance.GerritServer.createTestInjector(daemon), daemon, daemonService); }",48a3975083056fb34a42c6adb607c627e782cb46,2017-06-24 04:36:03,4
110915,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_NoteDbMigrator.java,"private com.google.gerrit.server.notedb.NotesMigrationState enableSequences() { throw new java.lang.UnsupportedOperationException(""not yet implemented""); }",9629a56dbd979101c95713fb30de288a715f7168,"private com.google.gerrit.server.notedb.NotesMigrationState enableSequences(com.google.gerrit.server.notedb.NotesMigrationState prev) throws com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { @java.lang.SuppressWarnings(""deprecation"") com.google.gerrit.server.notedb.RepoSequence seq = new com.google.gerrit.server.notedb.RepoSequence(repoManager, allProjects, com.google.gerrit.server.Sequences.CHANGES, () -> (db.nextChangeId()) + (sequenceGap), 1); seq.next(); } return saveState(prev, com.google.gerrit.server.notedb.NotesMigrationState.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY); }",a4e15149725656497c4a765a326d828c7b71dda5,"private com.google.gerrit.server.notedb.NotesMigrationState enableSequences(com.google.gerrit.server.notedb.NotesMigrationState prev) throws com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { @java.lang.SuppressWarnings(""deprecation"") com.google.gerrit.server.notedb.RepoSequence seq = new com.google.gerrit.server.notedb.RepoSequence(repoManager, allProjects, com.google.gerrit.server.Sequences.CHANGES, () -> ((db.nextChangeId()) + (sequenceGap)) - 1, 1); seq.next(); } return saveState(prev, com.google.gerrit.server.notedb.NotesMigrationState.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY); }",4ffe86a544663ca219ae6d109cdf69cac7bc52af,2017-06-24 04:36:03,6
110915,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_NoteDbMigrator.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator.Builder setSequenceGap(java.lang.Integer sequenceGap) { this.sequenceGap = sequenceGap; return this; },ae9ba7c0b38678d6305f828e6342d0836615e69b,public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator.Builder setSequenceGap(int sequenceGap) { this.sequenceGap = sequenceGap; return this; },80240ecdf8ac2b250bc569eddaf4a5e65a440276,2017-06-24 04:36:03,6
110915,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_notedb_OnlineNoteDbMigrationIT.java,"@org.junit.Test public void preconditionsFail() throws java.lang.Exception { java.util.List<com.google.gerrit.reviewdb.client.Change.Id> cs = com.google.common.collect.ImmutableList.of(new com.google.gerrit.reviewdb.client.Change.Id(1)); java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> ps = com.google.common.collect.ImmutableList.of(new com.google.gerrit.reviewdb.client.Project.NameKey(""p"")); assertMigrationException(""Cannot rebuild without noteDb.changes.write=true"", ( b) -> b, NoteDbMigrator::rebuild); assertMigrationException(""Cannot set both changes and projects"", ( b) -> b.setChanges(cs).setProjects(ps), ( m) -> { }); assertMigrationException(""Cannot set changes or projects during auto-migration"", ( b) -> b.setChanges(cs), NoteDbMigrator::migrate); assertMigrationException(""Cannot set changes or projects during auto-migration"", ( b) -> b.setProjects(ps), NoteDbMigrator::migrate); setNotesMigrationState(NotesMigrationState.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY); assertMigrationException(""Migration has already progressed past the endpoint of the \""trial mode\"" state"", ( b) -> b.setTrialMode(true), NoteDbMigrator::migrate); setNotesMigrationState(NotesMigrationState.READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY); assertMigrationException(""Cannot force rebuild changes; NoteDb is already the primary storage for some changes"", ( b) -> b.setForceRebuild(true), NoteDbMigrator::migrate); }",92ec95d09cf7df956bfc86faf4696573aac824cd,"@org.junit.Test public void preconditionsFail() throws java.lang.Exception { java.util.List<com.google.gerrit.reviewdb.client.Change.Id> cs = com.google.common.collect.ImmutableList.of(new com.google.gerrit.reviewdb.client.Change.Id(1)); java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> ps = com.google.common.collect.ImmutableList.of(new com.google.gerrit.reviewdb.client.Project.NameKey(""p"")); assertMigrationException(""Cannot rebuild without noteDb.changes.write=true"", ( b) -> b, NoteDbMigrator::rebuild); assertMigrationException(""Cannot set both changes and projects"", ( b) -> b.setChanges(cs).setProjects(ps), ( m) -> { }); assertMigrationException(""Cannot set changes or projects during auto-migration"", ( b) -> b.setChanges(cs), NoteDbMigrator::migrate); assertMigrationException(""Cannot set changes or projects during auto-migration"", ( b) -> b.setProjects(ps), NoteDbMigrator::migrate); assertMigrationException(""Sequence gap must be non-negative"", ( b) -> b.setSequenceGap((-1)), ( m) -> { }); setNotesMigrationState(com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY); assertMigrationException(""Migration has already progressed past the endpoint of the \""trial mode\"" state"", ( b) -> b.setTrialMode(true), NoteDbMigrator::migrate); setNotesMigrationState(com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY); assertMigrationException(""Cannot force rebuild changes; NoteDb is already the primary storage for some changes"", ( b) -> b.setForceRebuild(true), NoteDbMigrator::migrate); }",1ad106f6c3bb6d77e1802d241128b604426922b6,"@org.junit.Test public void preconditionsFail() throws java.lang.Exception { java.util.List<com.google.gerrit.reviewdb.client.Change.Id> cs = com.google.common.collect.ImmutableList.of(new com.google.gerrit.reviewdb.client.Change.Id(1)); java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> ps = com.google.common.collect.ImmutableList.of(new com.google.gerrit.reviewdb.client.Project.NameKey(""p"")); assertMigrationException(""Cannot rebuild without noteDb.changes.write=true"", ( b) -> b, NoteDbMigrator::rebuild); assertMigrationException(""Cannot set both changes and projects"", ( b) -> b.setChanges(cs).setProjects(ps), ( m) -> { }); assertMigrationException(""Cannot set changes or projects during auto-migration"", ( b) -> b.setChanges(cs), NoteDbMigrator::migrate); assertMigrationException(""Cannot set changes or projects during auto-migration"", ( b) -> b.setProjects(ps), NoteDbMigrator::migrate); setNotesMigrationState(com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY); assertMigrationException(""Migration has already progressed past the endpoint of the \""trial mode\"" state"", ( b) -> b.setTrialMode(true), NoteDbMigrator::migrate); setNotesMigrationState(com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY); assertMigrationException(""Cannot force rebuild changes; NoteDb is already the primary storage for some changes"", ( b) -> b.setForceRebuild(true), NoteDbMigrator::migrate); }",6b750ca7299322d55b49005d506bfbbba766c42d,2017-06-24 04:36:03,6
111051,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_StandaloneSiteTest.java,,,"protected static com.google.gerrit.server.util.ManualRequestContext openContext(com.google.gerrit.acceptance.GerritServer server) throws java.lang.Exception { com.google.inject.Injector i = server.getTestInjector(); com.google.gerrit.acceptance.TestAccount a = i.getInstance(com.google.gerrit.acceptance.AccountCreator.class).admin(); return com.google.gerrit.acceptance.StandaloneSiteTest.openContext(server, a.getId()); }",fa8cbe6b5da51bb13d1b525ae4d450e7dc7fff40,"protected void assertServerStartupFails() throws java.lang.Exception { try (com.google.gerrit.acceptance.GerritServer server = startImpl()) { fail(""expected server startup to fail""); } catch (com.google.gerrit.acceptance.GerritServer e) { } }",c7a521b985e5d3c6f952ad62e570614ff1215439,2017-06-24 04:36:03,4
111051,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_StandaloneSiteTest.java,,,"protected static com.google.gerrit.server.util.ManualRequestContext openContext(com.google.gerrit.acceptance.GerritServer server, com.google.gerrit.reviewdb.client.Account.Id accountId) throws java.lang.Exception { return server.getTestInjector().getInstance(com.google.gerrit.server.util.OneOffRequestContext.class).openAs(accountId); }",8842959d9e4ed0b99354b652a88c46c4c17ca58f,"private com.google.gerrit.acceptance.GerritServer startImpl() throws java.lang.Exception { return com.google.gerrit.acceptance.GerritServer.start(serverDesc, baseConfig, sitePaths.site_path); }",790cd75aa88f01ec940d36a7d586e6df2f8396cf,2017-06-24 04:36:03,4
110915,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_notedb_OnlineNoteDbMigrationIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void testEnableSequences(java.lang.Integer builderOption, int expectedFirstId, java.lang.String expectedRefValue) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getChange().getId(); assertThat(id.get()).isEqualTo(1); migrate(( b) -> b.setSequenceGap(builderOption).setStopAtStateForTesting(com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY)); assertThat(sequences.nextChangeId()).isEqualTo(expectedFirstId); assertThat(sequences.nextChangeId()).isEqualTo((expectedFirstId + 1)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allProjects);org.eclipse.jgit.lib.ObjectReader reader = repo.newObjectReader()) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(""refs/sequences/changes""); assertThat(ref).isNotNull(); org.eclipse.jgit.lib.ObjectLoader loader = reader.open(ref.getObjectId()); assertThat(loader.getType()).isEqualTo(Constants.OBJ_BLOB); assertThat(new java.lang.String(loader.getCachedBytes(), java.nio.charset.StandardCharsets.UTF_8)).isEqualTo(expectedRefValue); } try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { @java.lang.SuppressWarnings(""deprecation"") int nextFromReviewDb = db.nextChangeId(); assertThat(nextFromReviewDb).isEqualTo(3); } }",f0a467b9972a8796961f6e6ac6bdcbbe273a795a,"private void testEnableSequences(int builderOption, int expectedFirstId, java.lang.String expectedRefValue) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getChange().getId(); assertThat(id.get()).isEqualTo(1); migrate(( b) -> b.setSequenceGap(builderOption).setStopAtStateForTesting(com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY)); assertThat(sequences.nextChangeId()).isEqualTo(expectedFirstId); assertThat(sequences.nextChangeId()).isEqualTo((expectedFirstId + 1)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allProjects);org.eclipse.jgit.lib.ObjectReader reader = repo.newObjectReader()) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(""refs/sequences/changes""); assertThat(ref).isNotNull(); org.eclipse.jgit.lib.ObjectLoader loader = reader.open(ref.getObjectId()); assertThat(loader.getType()).isEqualTo(Constants.OBJ_BLOB); assertThat(new java.lang.String(loader.getCachedBytes(), java.nio.charset.StandardCharsets.UTF_8)).isEqualTo(expectedRefValue); } try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { @java.lang.SuppressWarnings(""deprecation"") int nextFromReviewDb = db.nextChangeId(); assertThat(nextFromReviewDb).isEqualTo(3); } }",99b55900756d27ed8865ab30b792f84d69e36626,2017-06-24 04:36:03,6
110915,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_notedb_OnlineNoteDbMigrationIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void enableSequencesNoGap() throws java.lang.Exception { testEnableSequences(0, 3, ""13""); }",c0eb85ea2c6db39a092e1ae53e9b74a2cfc8db8f,"@org.junit.Test public void enableSequencesNoGap() throws java.lang.Exception { testEnableSequences(0, 2, ""12""); }",6e3f019beec01e3773e722076f7730f29eb47be4,2017-06-24 04:36:03,6
111072,gerrit-server_src_main_java_com_google_gerrit_server_schema_DataSourceProvider.java,@java.lang.Override public synchronized void stop() { if ((ds) instanceof org.apache.commons.dbcp.BasicDataSource) { try { ((org.apache.commons.dbcp.BasicDataSource) (ds)).close(); } catch (java.sql.SQLException e) { } } },3a44a9f11372e35644812d13a5b3fe9e1f5f0d9f,"@java.lang.Override public synchronized void stop() { new java.lang.Exception((""Closing data source "" + (ds))).printStackTrace(); if ((ds) instanceof org.apache.commons.dbcp.BasicDataSource) { try { ((org.apache.commons.dbcp.BasicDataSource) (ds)).close(); } catch (java.sql.SQLException e) { new java.lang.Exception(""Failed to close"", e).printStackTrace(); } } }",5da41fed6fb945e1fbbb82a4031021156efbb46a,@java.lang.Override public synchronized void stop() { if ((ds) instanceof org.apache.commons.dbcp.BasicDataSource) { try { ((org.apache.commons.dbcp.BasicDataSource) (ds)).close(); } catch (java.sql.SQLException e) { } } },3a44a9f11372e35644812d13a5b3fe9e1f5f0d9f,2017-06-24 10:39:40,4
110715,gerrit-pgm_src_main_java_com_google_gerrit_pgm_http_jetty_ProjectQoSFilter.java,@java.lang.Override public void onTimeout(org.eclipse.jetty.continuation.Continuation self) { executor.remove(this); },b1ed4000f4581528a8e8d271adae5f43f675fd2f,@java.lang.Override public void onTimeout(org.eclipse.jetty.continuation.Continuation self) { end(); },764ca0fdafe7367f370e7857c034d7102090fdd7,@java.lang.Override public void onTimeout(org.eclipse.jetty.continuation.Continuation self) { future.cancel(true); },660f5f07e494b7b33eab26e1d1fb5c4f7262cc97,2017-06-26 15:51:59,5
111102,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,"private void parseCreate(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException { org.eclipse.jgit.revwalk.RevObject obj; try { obj = rp.getRevWalk().parseAny(cmd.getNewId()); } catch (java.io.IOException err) { logError(((((""Invalid object "" + (cmd.getNewId().name())) + "" for "") + (cmd.getRefName())) + "" creation""), err); reject(cmd, ""invalid object""); return; } logDebug(""Creating {}"", cmd); if ((com.google.gerrit.server.git.ReceiveCommits.isHead(cmd)) && (!(isCommit(cmd)))) { return; } com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); boolean ok; try { permissions.ref(cmd.getRefName()).check(RefPermission.CREATE); ok = true; } catch (com.google.gerrit.extensions.restapi.AuthException err) { ok = false; } if (ok && (ctl.canCreate(rp.getRepository(), obj))) { if (!(validRefOperation(cmd))) { return; } validateNewCommits(ctl, cmd); actualCommands.add(cmd); } else { reject(cmd, (""prohibited by Gerrit: create access denied for "" + (cmd.getRefName()))); } }",2b2fa981e5e56af65334bf28383c944656134a15,"private void parseCreate(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException { org.eclipse.jgit.revwalk.RevObject obj; try { obj = rp.getRevWalk().parseAny(cmd.getNewId()); } catch (java.io.IOException err) { logError(((((""Invalid object "" + (cmd.getNewId().name())) + "" for "") + (cmd.getRefName())) + "" creation""), err); reject(cmd, ""invalid object""); return; } logDebug(""Creating {}"", cmd); if ((com.google.gerrit.server.git.ReceiveCommits.isHead(cmd)) && (!(isCommit(cmd)))) { return; } com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); boolean ok; try { permissions.ref(cmd.getRefName()).check(RefPermission.CREATE); ok = true; } catch (com.google.gerrit.extensions.restapi.AuthException err) { ok = false; } if (!ok) { reject(cmd, (""prohibited by Gerrit: 'create' permission missing "" + (cmd.getRefName()))); return; } java.lang.String rejectReason = ctl.canCreate(rp.getRepository(), obj); if (rejectReason != null) { reject(cmd, (""prohibited by Gerrit: "" + rejectReason)); return; } if (!(validRefOperation(cmd))) { return; } validateNewCommits(ctl, cmd); actualCommands.add(cmd); }",595f84046e5a769ec96a2abad6725424df60cd11,"private void parseCreate(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException { org.eclipse.jgit.revwalk.RevObject obj; try { obj = rp.getRevWalk().parseAny(cmd.getNewId()); } catch (java.io.IOException err) { logError(((((""Invalid object "" + (cmd.getNewId().name())) + "" for "") + (cmd.getRefName())) + "" creation""), err); reject(cmd, ""invalid object""); return; } logDebug(""Creating {}"", cmd); if ((com.google.gerrit.server.git.ReceiveCommits.isHead(cmd)) && (!(isCommit(cmd)))) { return; } com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); java.lang.String rejectReason = ctl.canCreate(rp.getRepository(), obj); if (rejectReason != null) { reject(cmd, (""prohibited by Gerrit: "" + rejectReason)); return; } if (!(validRefOperation(cmd))) { return; } validateNewCommits(ctl, cmd); actualCommands.add(cmd); }",7cfe36aee0ad527814097ac5003926c21c2fd62c,2017-06-27 13:16:57,6
111102,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,"private boolean canCreateCommit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { if (canUpdate()) { return true; } else if (isMergedIntoBranchOrTag(repo, commit)) { return true; } return false; }",a5594c97b25048157ed27e71f2076626eb339539,"@com.google.gerrit.common.Nullable private java.lang.String canCreateCommit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { if (canUpdate()) { return null; } else if (isMergedIntoBranchOrTag(repo, commit)) { return null; } return ""creating new commit object requires 'push' permission""; }",02d51cde2cb4cdee7f017eb4b7dd527d594a6f80,"@com.google.gerrit.common.Nullable private java.lang.String canCreateCommit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { if (canUpdate()) { return null; } else if (isMergedIntoBranchOrTag(repo, commit)) { return null; } return (""lacks permission "" + (com.google.gerrit.common.data.Permission.PUSH)) + "" for creating new commit object""; }",5b3f97620b68e705015f283fcc8adc2c5637e2c7,2017-06-27 13:16:57,6
110691,src_test_java_com_ericsson_gerrit_plugins_projectgroupstructure_ProjectCreationValidatorIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void shouldBlockCreationToNonOwnersOfParentProjectIfGroupRefIsNotUsed() throws java.lang.Exception { java.lang.String ownerGroup = name(""groupA""); gApi.groups().create(ownerGroup); java.lang.String parent = name(""parentProject""); com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.permissionsOnly = true; in.owners = com.google.common.collect.Lists.newArrayList(ownerGroup); adminRestSession.put((""/projects/"" + parent), in).assertCreated(); in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.parent = parent; com.google.gerrit.acceptance.RestResponse r = userRestSession.put((""/projects/"" + (com.google.gerrit.extensions.restapi.Url.encode((parent + ""/childProject"")))), in); r.assertConflict(); assertThat(r.getEntityContent()).contains(""You must be owner of the parent project""); java.lang.String delegatingGroup = name(""groupB""); com.google.gerrit.extensions.api.groups.GroupApi dGroup = gApi.groups().create(delegatingGroup); dGroup.addMembers(user.username); com.google.gerrit.reviewdb.client.Project.NameKey parentNameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(parent); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(parentNameKey).getConfig(); cfg.getPluginConfig(""project-group-structure"").setString(ProjectCreationValidator.DELEGATE_PROJECT_CREATION_TO, delegatingGroup); saveProjectConfig(parentNameKey, cfg); userRestSession.put((""/projects/"" + (com.google.gerrit.extensions.restapi.Url.encode((parent + ""/childProject"")))), in).assertConflict(); }",d75aa4246e2803e60d3abb08b5612eea2349702f,"@org.junit.Test public void shouldBlockCreationIfGroupRefIsNotUsed() throws java.lang.Exception { java.lang.String ownerGroup = name(""groupA""); gApi.groups().create(ownerGroup); java.lang.String parent = name(""parentProject""); com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.permissionsOnly = true; in.owners = com.google.common.collect.Lists.newArrayList(ownerGroup); adminRestSession.put((""/projects/"" + parent), in).assertCreated(); in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.parent = parent; com.google.gerrit.acceptance.RestResponse r = userRestSession.put((""/projects/"" + (com.google.gerrit.extensions.restapi.Url.encode((parent + ""/childProject"")))), in); r.assertConflict(); assertThat(r.getEntityContent()).contains(""You must be owner of the parent project""); java.lang.String delegatingGroup = name(""groupB""); com.google.gerrit.extensions.api.groups.GroupApi dGroup = gApi.groups().create(delegatingGroup); dGroup.addMembers(user.username); com.google.gerrit.reviewdb.client.Project.NameKey parentNameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(parent); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(parentNameKey).getConfig(); cfg.getPluginConfig(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidatorIT.PLUGIN_NAME).setString(ProjectCreationValidator.DELEGATE_PROJECT_CREATION_TO, delegatingGroup); saveProjectConfig(parentNameKey, cfg); userRestSession.put((""/projects/"" + (com.google.gerrit.extensions.restapi.Url.encode((parent + ""/childProject"")))), in).assertConflict(); }",632ffa6b40d70eb90805329fac4d1a72e0b0563e,2017-06-27 18:01:58,6
110691,src_test_java_com_ericsson_gerrit_plugins_projectgroupstructure_ProjectCreationValidatorIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void shouldBlockCreationToNonOwnersOfParentProjectAndTheDelegatingGroupDoesNotExist() throws java.lang.Exception { java.lang.String ownerGroup = name(""groupA""); gApi.groups().create(ownerGroup); java.lang.String parent = name(""parentProject""); com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.permissionsOnly = true; in.owners = com.google.common.collect.Lists.newArrayList(ownerGroup); adminRestSession.put((""/projects/"" + parent), in).assertCreated(); in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.parent = parent; com.google.gerrit.acceptance.RestResponse r = userRestSession.put((""/projects/"" + (com.google.gerrit.extensions.restapi.Url.encode((parent + ""/childProject"")))), in); r.assertConflict(); assertThat(r.getEntityContent()).contains(""You must be owner of the parent project""); java.lang.String delegatingGroup = name(""groupB""); com.google.gerrit.reviewdb.client.Project.NameKey parentNameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(parent); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(parentNameKey).getConfig(); java.lang.String gId = ""fake-gId""; cfg.getPluginConfig(""project-group-structure"").setString(ProjectCreationValidator.DELEGATE_PROJECT_CREATION_TO, ((((""Group["" + delegatingGroup) + "" / "") + gId) + ""]"")); saveProjectConfig(parentNameKey, cfg); userRestSession.put((""/projects/"" + (com.google.gerrit.extensions.restapi.Url.encode((parent + ""/childProject"")))), in).assertConflict(); }",ede7d9ac45f55407a05380da06a0dbf2c07cca3a,"@org.junit.Test public void shouldBlockCreationIfDelegatingGroupDoesNotExist() throws java.lang.Exception { java.lang.String ownerGroup = name(""groupA""); gApi.groups().create(ownerGroup); java.lang.String parent = name(""parentProject""); com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.permissionsOnly = true; in.owners = com.google.common.collect.Lists.newArrayList(ownerGroup); adminRestSession.put((""/projects/"" + parent), in).assertCreated(); in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.parent = parent; com.google.gerrit.acceptance.RestResponse r = userRestSession.put((""/projects/"" + (com.google.gerrit.extensions.restapi.Url.encode((parent + ""/childProject"")))), in); r.assertConflict(); assertThat(r.getEntityContent()).contains(""You must be owner of the parent project""); java.lang.String delegatingGroup = name(""groupB""); com.google.gerrit.reviewdb.client.Project.NameKey parentNameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(parent); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(parentNameKey).getConfig(); java.lang.String gId = ""fake-gId""; cfg.getPluginConfig(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidatorIT.PLUGIN_NAME).setGroupReference(ProjectCreationValidator.DELEGATE_PROJECT_CREATION_TO, new com.google.gerrit.common.data.GroupReference(AccountGroup.UUID.parse(gId), delegatingGroup)); saveProjectConfig(parentNameKey, cfg); userRestSession.put((""/projects/"" + (com.google.gerrit.extensions.restapi.Url.encode((parent + ""/childProject"")))), in).assertConflict(); }",9d0fa1205c76c7dce05a3970dce538a60a84b17b,2017-06-27 18:01:58,6
110691,src_test_java_com_ericsson_gerrit_plugins_projectgroupstructure_ProjectCreationValidatorIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void shouldBlockCreationToNonOwnersOfParentProjectAndUserIsNotInDelegatingGroup() throws java.lang.Exception { java.lang.String ownerGroup = name(""groupA""); gApi.groups().create(ownerGroup); java.lang.String parent = name(""parentProject""); com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.permissionsOnly = true; in.owners = com.google.common.collect.Lists.newArrayList(ownerGroup); adminRestSession.put((""/projects/"" + parent), in).assertCreated(); in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.parent = parent; com.google.gerrit.acceptance.RestResponse r = userRestSession.put((""/projects/"" + (com.google.gerrit.extensions.restapi.Url.encode((parent + ""/childProject"")))), in); r.assertConflict(); assertThat(r.getEntityContent()).contains(""You must be owner of the parent project""); java.lang.String delegatingGroup = name(""groupB""); gApi.groups().create(delegatingGroup); com.google.gerrit.reviewdb.client.Project.NameKey parentNameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(parent); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(parentNameKey).getConfig(); java.lang.String gId = gApi.groups().id(delegatingGroup).get().id; cfg.getPluginConfig(""project-group-structure"").setString(ProjectCreationValidator.DELEGATE_PROJECT_CREATION_TO, ((((""Group["" + delegatingGroup) + "" / "") + gId) + ""]"")); saveProjectConfig(parentNameKey, cfg); userRestSession.put((""/projects/"" + (com.google.gerrit.extensions.restapi.Url.encode((parent + ""/childProject"")))), in).assertConflict(); }",c76969b465dc0d7f26d22b4404d666d2cef5cb10,"@org.junit.Test public void shouldBlockCreationIfUserIsNotInDelegatingGroup() throws java.lang.Exception { java.lang.String ownerGroup = name(""groupA""); gApi.groups().create(ownerGroup); java.lang.String parent = name(""parentProject""); com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.permissionsOnly = true; in.owners = com.google.common.collect.Lists.newArrayList(ownerGroup); adminRestSession.put((""/projects/"" + parent), in).assertCreated(); in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.parent = parent; com.google.gerrit.acceptance.RestResponse r = userRestSession.put((""/projects/"" + (com.google.gerrit.extensions.restapi.Url.encode((parent + ""/childProject"")))), in); r.assertConflict(); assertThat(r.getEntityContent()).contains(""You must be owner of the parent project""); java.lang.String delegatingGroup = name(""groupB""); gApi.groups().create(delegatingGroup); com.google.gerrit.reviewdb.client.Project.NameKey parentNameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(parent); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(parentNameKey).getConfig(); java.lang.String gId = gApi.groups().id(delegatingGroup).get().id; cfg.getPluginConfig(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidatorIT.PLUGIN_NAME).setGroupReference(ProjectCreationValidator.DELEGATE_PROJECT_CREATION_TO, new com.google.gerrit.common.data.GroupReference(AccountGroup.UUID.parse(gId), delegatingGroup)); saveProjectConfig(parentNameKey, cfg); userRestSession.put((""/projects/"" + (com.google.gerrit.extensions.restapi.Url.encode((parent + ""/childProject"")))), in).assertConflict(); }",6871cab50f7895ba9ef9f58987819fbf58e6a15c,2017-06-27 18:01:58,6
108619,src_main_java_com_googlesource_gerrit_plugins_adminconsole_GetFullPathCommand.java,,,"@java.lang.Override protected void run() throws com.googlesource.gerrit.plugins.adminconsole.UnloggedFailure { if ((localDiskRepositoryManager) == null) { throw new com.googlesource.gerrit.plugins.adminconsole.UnloggedFailure(1, ""Command only works with disk based repository managers""); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(projectName); if ((projectCache.get(nameKey)) != null) { stdout.print((((((localDiskRepositoryManager.getBasePath(nameKey)) + ""/"") + (nameKey.get())) + "".git"") + ""\n"")); } else { throw new com.googlesource.gerrit.plugins.adminconsole.UnloggedFailure(1, ""Repository not found""); } }",42b6112e1213e1f82329ad127bfa549a1f1ca944,"@java.lang.Override protected void run() throws com.googlesource.gerrit.plugins.adminconsole.UnloggedFailure { if ((localDiskRepositoryManager) == null) { throw new com.googlesource.gerrit.plugins.adminconsole.UnloggedFailure(1, ""Command only works with disk based repository managers""); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(projectName); if ((projectCache.get(nameKey)) != null) { stdout.println(localDiskRepositoryManager.getBasePath(nameKey).resolve(nameKey.get().concat(Constants.DOT_GIT_EXT))); } else { throw new com.googlesource.gerrit.plugins.adminconsole.UnloggedFailure(1, ""Repository not found""); } }",ceab860082e0d2ee783a47451282b9d7976fbec9,2017-06-28 12:16:19,3
111393,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_pgm_ReindexIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private synchronized void finish(com.google.gerrit.acceptance.pgm.ReindexIT.UpgradeAttempt a, java.util.List<com.google.gerrit.acceptance.pgm.ReindexIT.UpgradeAttempt> out) { checkState(((finished.getCount()) > 0), ""already started %s upgrades, can't start %s"", numExpected, a); out.add(a); finished.countDown(); }",f32436b5e921373ecfc7f75988d6f710670a9625,"private synchronized void finish(com.google.gerrit.acceptance.pgm.ReindexIT.UpgradeAttempt a, java.util.List<com.google.gerrit.acceptance.pgm.ReindexIT.UpgradeAttempt> out) { checkState(((readyToStart.getCount()) == 0), ""shouldn't be finishing upgrade before starting""); checkState(((finished.getCount()) > 0), ""already finished %s upgrades, can't finish %s"", numExpected, a); out.add(a); finished.countDown(); }",60dad85c5c567a1a5d5b7e4c269e4c1c8ed41db8,2017-06-28 16:30:19,10
111393,gerrit-elasticsearch_src_main_java_com_google_gerrit_elasticsearch_ElasticIndexModule.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void configure() { bind(com.google.gerrit.server.index.VersionManager.class).to(com.google.gerrit.elasticsearch.ElasticVersionManager.class); listener().to(com.google.gerrit.elasticsearch.ElasticVersionManager.class); listener().to(com.google.gerrit.server.index.OnlineUpgrader.class); },1e01b81870718296febd7fc6954082e138f44393,@java.lang.Override public void configure() { bind(com.google.gerrit.server.index.VersionManager.class).to(com.google.gerrit.elasticsearch.ElasticVersionManager.class); listener().to(com.google.gerrit.elasticsearch.ElasticVersionManager.class); if (onlineUpgrade) { listener().to(com.google.gerrit.server.index.OnlineUpgrader.class); } },7571dc662f0f9b71e6d85d63ab8131d6271d1de8,2017-06-28 16:30:19,10
111393,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_pgm_ReindexIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public synchronized void onStart(java.lang.String name, int oldVersion, int newVersion) { com.google.gerrit.acceptance.pgm.ReindexIT.UpgradeAttempt a = com.google.gerrit.acceptance.pgm.ReindexIT.UpgradeAttempt.create(name, oldVersion, newVersion); checkState(((started.getCount()) > 0), ""already started %s upgrades, can't start %s"", numExpected, a); startedAttempts.add(a); started.countDown(); }",92dc66a340d3c0d94b728cdf1d01dd774d3de5c9,"@java.lang.Override public synchronized void onStart(java.lang.String name, int oldVersion, int newVersion) { com.google.gerrit.acceptance.pgm.ReindexIT.UpgradeAttempt a = com.google.gerrit.acceptance.pgm.ReindexIT.UpgradeAttempt.create(name, oldVersion, newVersion); try { readyToStart.await(); } catch (java.lang.InterruptedException e) { throw new java.lang.AssertionError((""interrupted waiting to start "" + a), e); } checkState(((started.getCount()) > 0), ""already started %s upgrades, can't start %s"", numExpected, a); startedAttempts.add(a); started.countDown(); }",1440841dbd35c192b085419e43d95bbe5b4d4f7b,2017-06-28 16:30:19,10
111393,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_pgm_ReindexIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void runUpgrades() throws java.lang.Exception { int timeoutSec = 60; if (!(started.await(timeoutSec, java.util.concurrent.TimeUnit.SECONDS))) { assert_().fail(""%s/%s online upgrades started after %ss"", ((numExpected) - (started.getCount())), numExpected, timeoutSec); } finished.await(); }",0fa27480fb9e00ba31b64b32648801358a9963f2,"void runUpgrades() throws java.lang.Exception { readyToStart.countDown(); int timeoutSec = 60; if (!(started.await(timeoutSec, java.util.concurrent.TimeUnit.SECONDS))) { assert_().fail(""%s/%s online upgrades started after %ss"", ((numExpected) - (started.getCount())), numExpected, timeoutSec); } finished.await(); }",18f4f3b779345bd75819a5032d2ca175a2bc7fbf,2017-06-28 16:30:19,10
111393,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_pgm_ReindexIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void assertReady(int expectedReady) throws java.lang.Exception { java.util.Map<java.lang.Integer, java.lang.Boolean> expected = new java.util.LinkedHashMap<>(); ChangeSchemaDefinitions.INSTANCE.getSchemas().keySet().forEach(( v) -> expected.put(v, false)); expected.put(expectedReady, true); com.google.gerrit.server.index.GerritIndexStatus status = new com.google.gerrit.server.index.GerritIndexStatus(sitePaths); assertThat(ChangeSchemaDefinitions.INSTANCE.getSchemas().keySet().stream().collect(toImmutableMap(( v) -> v, ( v) -> status.getReady(ChangeSchemaDefinitions.NAME, v)))).named(""ready state for index versions"").containsExactlyEntriesIn(expected); }",340d0f04c1b9162ecbe4a7b22cf294432aa6665b,"private void assertReady(int expectedReady) throws java.lang.Exception { java.util.Set<java.lang.Integer> allVersions = ChangeSchemaDefinitions.INSTANCE.getSchemas().keySet(); com.google.gerrit.server.index.GerritIndexStatus status = new com.google.gerrit.server.index.GerritIndexStatus(sitePaths); assertThat(allVersions.stream().collect(toImmutableMap(( v) -> v, ( v) -> status.getReady(com.google.gerrit.acceptance.pgm.ReindexIT.CHANGES, v)))).named(""ready state for index versions"").isEqualTo(allVersions.stream().collect(toImmutableMap(( v) -> v, ( v) -> v == expectedReady))); }",8e961e48a6408a3dae81729ef7029b09cbdd7fcb,2017-06-28 16:30:19,10
111393,gerrit-lucene_src_main_java_com_google_gerrit_lucene_LuceneIndexModule.java,@java.lang.Override public void configure() { listener().to(com.google.gerrit.lucene.LuceneVersionManager.class); },3a4a4335ec400fc8d256468bf9a92fc7880d0858,@java.lang.Override public void configure() { bind(com.google.gerrit.server.index.VersionManager.class).to(com.google.gerrit.lucene.LuceneVersionManager.class); listener().to(com.google.gerrit.lucene.LuceneVersionManager.class); listener().to(com.google.gerrit.server.index.OnlineUpgrader.class); },054342c01a8022a8103b303497a79219504c2b4a,@java.lang.Override public void configure() { bind(com.google.gerrit.server.index.VersionManager.class).to(com.google.gerrit.lucene.LuceneVersionManager.class); listener().to(com.google.gerrit.lucene.LuceneVersionManager.class); if (onlineUpgrade) { listener().to(com.google.gerrit.server.index.OnlineUpgrader.class); } },bfcf8c523b486c8b4c489b5bb4c0d473c5cb5a66,2017-06-28 16:30:19,10
110851,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_154.java,,,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { try { for (com.google.gerrit.reviewdb.client.Account account : scanAccounts(db)) { updateAccountInNoteDb(account); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(""Migrating accounts to NoteDb failed"", e); } }",4b6b666510dfe784025d31c9fc0d192bb6aede96,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { try { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { for (com.google.gerrit.reviewdb.client.Account account : scanAccounts(db)) { updateAccountInNoteDb(repo, account); } } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(""Migrating accounts to NoteDb failed"", e); } }",b44fb22786c392cdeef0d9a98bd824c1af592995,2017-06-29 08:26:26,8
110851,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_154.java,,,"private void updateAccountInNoteDb(com.google.gerrit.reviewdb.client.Account account) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, repo); org.eclipse.jgit.lib.PersonIdent ident = serverIdent.get(); md.getCommitBuilder().setAuthor(ident); md.getCommitBuilder().setCommitter(ident); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(null, account.getId()); accountConfig.load(repo); accountConfig.setAccount(account); accountConfig.commit(md); } }",547e169a8bd6836a3f640401c1aa70edc8e2cd9f,"private void updateAccountInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepo, com.google.gerrit.reviewdb.client.Account account) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, allUsersRepo); org.eclipse.jgit.lib.PersonIdent ident = serverIdent.get(); md.getCommitBuilder().setAuthor(ident); md.getCommitBuilder().setCommitter(ident); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(null, account.getId()); accountConfig.load(allUsersRepo); accountConfig.setAccount(account); accountConfig.commit(md); }",86a50ab009c5c90a4dc47a7b52e08ce7338d6276,2017-06-29 08:26:26,8
110994,gerrit-server_src_main_java_com_google_gerrit_server_git_validators_CommitValidators.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private byte[] getAccountConfig(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit) throws java.io.IOException { rw.parseCommit(commit); try (org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(rw.getObjectReader(), AccountConfig.ACCOUNT_CONFIG, commit.getTree())) { return tw != null ? rw.getObjectReader().open(tw.getObjectId(0), com.google.gerrit.server.git.validators.OBJ_BLOB).getBytes() : null; } }",8501fc5236911af4b7a7cd98a1427c886791cc83,"private org.eclipse.jgit.lib.ObjectId getAccountConfigBlobId(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId id) throws java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(id); try (org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(rw.getObjectReader(), AccountConfig.ACCOUNT_CONFIG, commit.getTree())) { return tw != null ? tw.getObjectId(0) : null; } }",479e229ba05db107bc0f2ee66c087e51e4f9918d,2017-06-29 08:26:26,4
110851,gerrit-server_src_main_java_com_google_gerrit_server_account_Accounts.java,"public com.google.gerrit.reviewdb.client.Account get(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { return db.accounts().get(accountId); }",7cd16853ed051d9cf0cd1f2b0498a8e97f829ed6,"public com.google.gerrit.reviewdb.client.Account get(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (readFromGit) { return read(accountId); } return db.accounts().get(accountId); }",81d03d54928dfb5f17cda55c3e099eee2bc18c3d,"public com.google.gerrit.reviewdb.client.Account get(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (readFromGit) { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return read(repo, accountId); } } return db.accounts().get(accountId); }",5e2c7610efe7fe4cb7671fc978269d231f4ba149,2017-06-29 08:26:26,8
110851,gerrit-server_src_main_java_com_google_gerrit_server_account_Accounts.java,public java.util.List<com.google.gerrit.reviewdb.client.Account> all(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { return db.accounts().all().toList(); },1185b6b66a6bf248ea6d925a85322f201844adf8,"public java.util.List<com.google.gerrit.reviewdb.client.Account> all(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (readFromGit) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds = allIds(); java.util.List<com.google.gerrit.reviewdb.client.Account> accounts = new java.util.ArrayList(accountIds.size()); for (com.google.gerrit.reviewdb.client.Account.Id accountId : accountIds) { try { accounts.add(get(db, accountId)); } catch (java.lang.Exception e) { com.google.gerrit.server.account.Accounts.log.error(java.lang.String.format(""Ignoring invalid account %s"", accountId.get()), e); } } return accounts; } return db.accounts().all().toList(); }",d6974252f40468cbe1b544153cb1bd8a6293f647,"public java.util.List<com.google.gerrit.reviewdb.client.Account> all(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (readFromGit) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds = allIds(); java.util.List<com.google.gerrit.reviewdb.client.Account> accounts = new java.util.ArrayList(accountIds.size()); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { for (com.google.gerrit.reviewdb.client.Account.Id accountId : accountIds) { try { accounts.add(read(repo, accountId)); } catch (java.lang.Exception e) { com.google.gerrit.server.account.Accounts.log.error(java.lang.String.format(""Ignoring invalid account %s"", accountId.get()), e); } } } return accounts; } return db.accounts().all().toList(); }",e186a2748083c91f2d09799c9063c4f2d8ecf947,2017-06-29 08:26:26,8
110851,gerrit-server_src_main_java_com_google_gerrit_server_account_Accounts.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.reviewdb.client.Account read(com.google.gerrit.reviewdb.client.Account.Id accountId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(emailValidator, accountId); accountConfig.load(repo); return accountConfig.getAccount(); } }",181d604e7574650ac8ab8369ec141f0f552a90fe,"private com.google.gerrit.reviewdb.client.Account read(org.eclipse.jgit.lib.Repository allUsersRepository, com.google.gerrit.reviewdb.client.Account.Id accountId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(emailValidator, accountId); accountConfig.load(allUsersRepository); return accountConfig.getAccount(); }",4e06009f3b2e68de7884bbd2904c5c996987c3a5,2017-06-29 08:26:26,8
110851,gerrit-server_src_main_java_com_google_gerrit_server_account_Accounts.java,"public java.util.List<com.google.gerrit.reviewdb.client.Account> get(com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> accountIds) throws com.google.gwtorm.server.OrmException { return db.accounts().get(accountIds).toList(); }",98360a4097ef7dd6246937a43014318c8074e867,"public java.util.List<com.google.gerrit.reviewdb.client.Account> get(com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> accountIds) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (readFromGit) { java.util.List<com.google.gerrit.reviewdb.client.Account> accounts = new java.util.ArrayList(accountIds.size()); for (com.google.gerrit.reviewdb.client.Account.Id accountId : accountIds) { accounts.add(read(accountId)); } return accounts; } return db.accounts().get(accountIds).toList(); }",29768ac213bec8ea82905e68c7e08b5dad437053,"public java.util.List<com.google.gerrit.reviewdb.client.Account> get(com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> accountIds) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (readFromGit) { java.util.List<com.google.gerrit.reviewdb.client.Account> accounts = new java.util.ArrayList(accountIds.size()); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { for (com.google.gerrit.reviewdb.client.Account.Id accountId : accountIds) { accounts.add(read(repo, accountId)); } } return accounts; } return db.accounts().get(accountIds).toList(); }",e53fbac953b3b7423d86c997fc2f8954b9a890a4,2017-06-29 08:26:26,8
110994,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushAccountConfigToUserBranchIsRejected() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, ((com.google.gerrit.reviewdb.client.RefNames.refsUsers(admin.id)) + "":userRef"")); allUsersRepo.reset(""userRef""); org.eclipse.jgit.lib.Config ac = new org.eclipse.jgit.lib.Config(); try (org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(allUsersRepo.getRepository(), AccountConfig.ACCOUNT_CONFIG, getHead(allUsersRepo.getRepository()).getTree())) { assertThat(tw).isNotNull(); ac.fromText(new java.lang.String(allUsersRepo.getRevWalk().getObjectReader().open(tw.getObjectId(0), com.google.gerrit.acceptance.api.accounts.OBJ_BLOB).getBytes(), java.nio.charset.StandardCharsets.UTF_8)); } ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_STATUS, ""OOO""); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Update account config"", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(RefNames.REFS_USERS_SELF); r.assertErrorStatus(""account update not allowed""); }",b3331cdd848a4e42ddb9d908a15976393ca85105,"@org.junit.Test public void pushAccountConfigToUserBranchIsRejected() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, ((com.google.gerrit.reviewdb.client.RefNames.refsUsers(admin.id)) + "":userRef"")); allUsersRepo.reset(""userRef""); org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_STATUS, ""OOO""); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Update account config"", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(RefNames.REFS_USERS_SELF); r.assertErrorStatus(""account update not allowed""); }",9a71c4e4d0591c08d889ba27418227645d4cc6fe,2017-06-29 08:26:26,4
110850,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountConfig.java,,,"@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); if ((revision) != null) { commit.setMessage(""Update account\n""); } else if ((account) != null) { commit.setMessage(""Create account\n""); commit.setAuthor(new org.eclipse.jgit.lib.PersonIdent(commit.getAuthor(), registeredOn)); commit.setAuthor(new org.eclipse.jgit.lib.PersonIdent(commit.getCommitter(), registeredOn)); } org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); com.google.gerrit.server.account.AccountConfig.setActive(cfg, account.isActive()); com.google.gerrit.server.account.AccountConfig.set(cfg, com.google.gerrit.server.account.AccountConfig.KEY_FULL_NAME, account.getFullName()); com.google.gerrit.server.account.AccountConfig.set(cfg, com.google.gerrit.server.account.AccountConfig.KEY_PREFERRED_EMAIL, account.getPreferredEmail()); com.google.gerrit.server.account.AccountConfig.set(cfg, com.google.gerrit.server.account.AccountConfig.KEY_STATUS, account.getStatus()); saveConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG, cfg); return true; }",e1b3cd554612d8e3ea216379cf6ec9ff622f5cf8,"@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); if ((revision) != null) { commit.setMessage(""Update account\n""); } else if ((account) != null) { commit.setMessage(""Create account\n""); commit.setAuthor(new org.eclipse.jgit.lib.PersonIdent(commit.getAuthor(), registeredOn)); commit.setCommitter(new org.eclipse.jgit.lib.PersonIdent(commit.getCommitter(), registeredOn)); } org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); com.google.gerrit.server.account.AccountConfig.setActive(cfg, account.isActive()); com.google.gerrit.server.account.AccountConfig.set(cfg, com.google.gerrit.server.account.AccountConfig.KEY_FULL_NAME, account.getFullName()); com.google.gerrit.server.account.AccountConfig.set(cfg, com.google.gerrit.server.account.AccountConfig.KEY_PREFERRED_EMAIL, account.getPreferredEmail()); com.google.gerrit.server.account.AccountConfig.set(cfg, com.google.gerrit.server.account.AccountConfig.KEY_STATUS, account.getStatus()); saveConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG, cfg); return true; }",abeb7f1cb267cf7a8158e86d32b8973422af6ba9,2017-06-29 08:26:26,7
110994,gerrit-server_src_main_java_com_google_gerrit_server_git_validators_CommitValidators.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } com.google.gerrit.reviewdb.client.Account.Id accountId = Account.Id.fromRef(receiveEvent.refName); if (accountId == null) { return java.util.Collections.emptyList(); } if ((receiveEvent.commit.getParentCount()) > 1) { throw new com.google.gerrit.server.git.validators.CommitValidationException(java.lang.String.format((""Merge commits not allowed on user branches:"" + "" Commit %s for user branch of account %s is a merge commit""), receiveEvent.commit.name(), accountId.get())); } try { byte[] newContent = getAccountConfig(receiveEvent.revWalk, receiveEvent.commit); byte[] oldContent = ((receiveEvent.commit.getParentCount()) == 1) ? getAccountConfig(receiveEvent.revWalk, receiveEvent.commit.getParent(0)) : null; if (!(java.util.Arrays.equals(oldContent, newContent))) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""account update not allowed""); } } catch (java.io.IOException e) { java.lang.String m = java.lang.String.format(""Validating update for account %s failed"", accountId.get()); com.google.gerrit.server.git.validators.CommitValidators.log.error(m, e); throw new com.google.gerrit.server.git.validators.CommitValidationException(m, e); } return java.util.Collections.emptyList(); }",cedf5c87686dd4fd351933733b5633259e70b186,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } com.google.gerrit.reviewdb.client.Account.Id accountId = Account.Id.fromRef(receiveEvent.refName); if (accountId == null) { return java.util.Collections.emptyList(); } try { org.eclipse.jgit.lib.ObjectId newBlobId = getAccountConfigBlobId(receiveEvent.revWalk, receiveEvent.commit); org.eclipse.jgit.lib.ObjectId oldId = receiveEvent.command.getOldId(); org.eclipse.jgit.lib.ObjectId oldBlobId = (!(org.eclipse.jgit.lib.ObjectId.zeroId().equals(oldId))) ? getAccountConfigBlobId(receiveEvent.revWalk, oldId) : null; if (!(java.util.Objects.equals(oldBlobId, newBlobId))) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""account update not allowed""); } } catch (java.io.IOException e) { java.lang.String m = java.lang.String.format(""Validating update for account %s failed"", accountId.get()); com.google.gerrit.server.git.validators.CommitValidators.log.error(m, e); throw new com.google.gerrit.server.git.validators.CommitValidationException(m, e); } return java.util.Collections.emptyList(); }",93b96599cb09655737a60ef536ef49a78896384d,2017-06-29 08:26:26,4
110850,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountConfig.java,,,"private com.google.gerrit.reviewdb.client.Account parse(org.eclipse.jgit.lib.Config cfg) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, registeredOn); account.setActive(cfg.getBoolean(com.google.gerrit.server.account.AccountConfig.ACCOUNT, null, com.google.gerrit.server.account.AccountConfig.KEY_ACTIVE, true)); account.setFullName(cfg.getString(com.google.gerrit.server.account.AccountConfig.ACCOUNT, null, com.google.gerrit.server.account.AccountConfig.KEY_FULL_NAME)); java.lang.String preferredEmail = cfg.getString(com.google.gerrit.server.account.AccountConfig.ACCOUNT, null, com.google.gerrit.server.account.AccountConfig.KEY_PREFERRED_EMAIL); account.setPreferredEmail(preferredEmail); if (((emailValidator) != null) && (!(emailValidator.isValid(preferredEmail)))) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG, java.lang.String.format(""Invalid preferred email: %s"", preferredEmail))); } account.setStatus(cfg.getString(com.google.gerrit.server.account.AccountConfig.ACCOUNT, null, com.google.gerrit.server.account.AccountConfig.KEY_STATUS)); return account; }",4712ee566cc20fbb278e051e48d999836a0af89b,"private com.google.gerrit.reviewdb.client.Account parse(org.eclipse.jgit.lib.Config cfg) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, registeredOn); account.setActive(cfg.getBoolean(com.google.gerrit.server.account.AccountConfig.ACCOUNT, null, com.google.gerrit.server.account.AccountConfig.KEY_ACTIVE, true)); account.setFullName(com.google.gerrit.server.account.AccountConfig.get(cfg, com.google.gerrit.server.account.AccountConfig.KEY_FULL_NAME)); java.lang.String preferredEmail = com.google.gerrit.server.account.AccountConfig.get(cfg, com.google.gerrit.server.account.AccountConfig.KEY_PREFERRED_EMAIL); account.setPreferredEmail(preferredEmail); if (((emailValidator) != null) && (!(emailValidator.isValid(preferredEmail)))) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG, java.lang.String.format(""Invalid preferred email: %s"", preferredEmail))); } account.setStatus(com.google.gerrit.server.account.AccountConfig.get(cfg, com.google.gerrit.server.account.AccountConfig.KEY_STATUS)); return account; }",f9799e575b1c575dfe4e5f49377ef1ef5bc51005,2017-06-29 08:26:26,7
111997,gitiles-servlet_src_main_java_com_google_gitiles_doc_MarkdownToHtml.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void renderToHtml(com.google.gitiles.doc.html.HtmlBuilder out, org.commonmark.node.Node node) { if (node != null) { html = out; toc = new com.google.gitiles.doc.TocFormatter(html, 3); toc.setRoot(node); node.accept(this); html.finish(); } }",d5857b394645b994de7cdddf654582ab0522a6b5,"public void renderToHtml(com.google.gitiles.doc.html.HtmlBuilder out, org.commonmark.node.Node node) { if (node != null) { html = out; toc = new com.google.gitiles.doc.TocFormatter(html, 3); toc.setRoot(node); node.accept(this); html.finish(); html = null; toc = null; } }",8e9575aa728118624eef8d32b27fbf8faa877fb3,2017-06-30 22:14:29,3
105200,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveConfig.java,public int getEffectiveMaxBatchChangesLimit(com.google.gerrit.server.CurrentUser user) { com.google.gerrit.server.account.CapabilityControl cap = capabilityFactory.create(user); if (cap.hasExplicitRange(com.google.gerrit.server.git.BATCH_CHANGES_LIMIT)) { return cap.getRange(com.google.gerrit.server.git.BATCH_CHANGES_LIMIT).getMax(); } return systemMaxBatchChanges; },e1057c91976ae8c2b359ee50b7853060cf16bd77,public int getEffectiveMaxBatchChangesLimit(com.google.gerrit.server.CurrentUser user) { com.google.gerrit.server.account.AccountLimits cap = capabilityFactory.create(user); if (cap.hasExplicitRange(com.google.gerrit.server.git.BATCH_CHANGES_LIMIT)) { return cap.getRange(com.google.gerrit.server.git.BATCH_CHANGES_LIMIT).getMax(); } return systemMaxBatchChanges; },36ff0e848cce51c5567e946ad463c08b54692eb1,public int getEffectiveMaxBatchChangesLimit(com.google.gerrit.server.CurrentUser user) { com.google.gerrit.server.account.AccountLimits limits = limitsFactory.create(user); if (limits.hasExplicitRange(com.google.gerrit.server.git.BATCH_CHANGES_LIMIT)) { return limits.getRange(com.google.gerrit.server.git.BATCH_CHANGES_LIMIT).getMax(); } return systemMaxBatchChanges; },540e7dd965bdef116eb0b1eebc4e0e33ccf7e30e,2017-07-02 09:46:38,5
105200,gerrit-server_src_main_java_com_google_gerrit_server_account_GetCapabilities.java,"private void addRanges(java.util.Map<java.lang.String, java.lang.Object> have, com.google.gerrit.server.account.CapabilityControl cc) { for (java.lang.String name : com.google.gerrit.common.data.GlobalCapability.getRangeNames()) { if ((want(name)) && (cc.hasExplicitRange(name))) { have.put(name, new com.google.gerrit.server.account.GetCapabilities.Range(cc.getRange(name))); } } }",582eacf6f55cf288bbda1e9fa73ea6560ce757ec,"private void addRanges(java.util.Map<java.lang.String, java.lang.Object> have, com.google.gerrit.server.account.AccountLimits cc) { for (java.lang.String name : com.google.gerrit.common.data.GlobalCapability.getRangeNames()) { if ((want(name)) && (cc.hasExplicitRange(name))) { have.put(name, new com.google.gerrit.server.account.GetCapabilities.Range(cc.getRange(name))); } } }",3d4bb130da6bca76da217e482a9361a988eb6bce,"private void addRanges(java.util.Map<java.lang.String, java.lang.Object> have, com.google.gerrit.server.account.AccountLimits limits) { for (java.lang.String name : com.google.gerrit.common.data.GlobalCapability.getRangeNames()) { if ((want(name)) && (limits.hasExplicitRange(name))) { have.put(name, new com.google.gerrit.server.account.GetCapabilities.Range(limits.getRange(name))); } } }",1341c56a9e24204b3eecc7c9f1ece3a95945e263,2017-07-02 09:46:38,5
105200,gerrit-server_src_main_java_com_google_gerrit_server_account_GetCapabilities.java,"private void addPriority(java.util.Map<java.lang.String, java.lang.Object> have, com.google.gerrit.server.account.CapabilityControl cc) { com.google.gerrit.server.git.QueueProvider.QueueType queue = cc.getQueueType(); if ((queue != (QueueProvider.QueueType.INTERACTIVE)) || (((query) != null) && (query.contains(com.google.gerrit.server.account.PRIORITY)))) { have.put(com.google.gerrit.server.account.PRIORITY, queue); } }",66f3199fc1a0b48c4fd8726aff4b515e430c2208,"private void addPriority(java.util.Map<java.lang.String, java.lang.Object> have, com.google.gerrit.server.account.AccountLimits cc) { com.google.gerrit.server.git.QueueProvider.QueueType queue = cc.getQueueType(); if ((queue != (QueueProvider.QueueType.INTERACTIVE)) || (((query) != null) && (query.contains(com.google.gerrit.server.account.PRIORITY)))) { have.put(com.google.gerrit.server.account.PRIORITY, queue); } }",2231abdec0f768a537f543f2addd4ae39b51757b,"private void addPriority(java.util.Map<java.lang.String, java.lang.Object> have, com.google.gerrit.server.account.AccountLimits limits) { com.google.gerrit.server.git.QueueProvider.QueueType queue = limits.getQueueType(); if ((queue != (QueueProvider.QueueType.INTERACTIVE)) || (((query) != null) && (query.contains(com.google.gerrit.server.account.PRIORITY)))) { have.put(com.google.gerrit.server.account.PRIORITY, queue); } }",e4fe9b3ddc6d5d8fa5c27b1e8c7e9b9c7384fe4c,2017-07-02 09:46:38,5
105200,gerrit-server_src_main_java_com_google_gerrit_server_account_GetCapabilities.java,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(self); if ((self.get()) != (rsrc.getUser())) { perm.check(GlobalPermission.ADMINISTRATE_SERVER); perm = permissionBackend.user(rsrc.getUser()); } java.util.Map<java.lang.String, java.lang.Object> have = new java.util.LinkedHashMap<>(); for (com.google.gerrit.extensions.api.access.GlobalOrPluginPermission p : perm.test(permissionsToTest())) { have.put(p.permissionName(), true); } com.google.gerrit.server.account.CapabilityControl cc = capabilityFactory.create(rsrc.getUser()); addRanges(have, cc); addPriority(have, cc); return OutputFormat.JSON.newGson().toJsonTree(have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.Object>>() {}.getType()); }",1a653f61a83bad23f674e8fab3ecb05003936fe0,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(self); if ((self.get()) != (rsrc.getUser())) { perm.check(GlobalPermission.ADMINISTRATE_SERVER); perm = permissionBackend.user(rsrc.getUser()); } java.util.Map<java.lang.String, java.lang.Object> have = new java.util.LinkedHashMap<>(); for (com.google.gerrit.extensions.api.access.GlobalOrPluginPermission p : perm.test(permissionsToTest())) { have.put(p.permissionName(), true); } com.google.gerrit.server.account.AccountLimits cc = capabilityFactory.create(rsrc.getUser()); addRanges(have, cc); addPriority(have, cc); return OutputFormat.JSON.newGson().toJsonTree(have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.Object>>() {}.getType()); }",c6e641f8d69e79be788048d2e8935f73f8b813df,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(self); if ((self.get()) != (rsrc.getUser())) { perm.check(GlobalPermission.ADMINISTRATE_SERVER); perm = permissionBackend.user(rsrc.getUser()); } java.util.Map<java.lang.String, java.lang.Object> have = new java.util.LinkedHashMap<>(); for (com.google.gerrit.extensions.api.access.GlobalOrPluginPermission p : perm.test(permissionsToTest())) { have.put(p.permissionName(), true); } com.google.gerrit.server.account.AccountLimits limits = limitsFactory.create(rsrc.getUser()); addRanges(have, limits); addPriority(have, limits); return OutputFormat.JSON.newGson().toJsonTree(have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.Object>>() {}.getType()); }",c789e41693fc0b59aaf03b1a8c1905f846debe13,2017-07-02 09:46:38,5
112220,gerrit-server_src_main_java_com_google_gerrit_server_project_BranchesCollection.java,"@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.lang.String branchName = id.get(); if (!(branchName.equals(Constants.HEAD))) { branchName = com.google.gerrit.reviewdb.client.RefNames.fullName(branchName); } java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> branches = list.get().apply(parent); for (com.google.gerrit.extensions.api.projects.BranchInfo b : branches) { if (branchName.equals(b.ref)) { return new com.google.gerrit.server.project.BranchResource(parent.getControl(), b); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }",be688e1c25d78b10346799287642ee2a78799348,"@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); java.lang.String name = com.google.gerrit.reviewdb.client.RefNames.fullName(id.get()); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref refName = repo.exactRef(name); if (refName != null) { name = (refName.isSymbolic()) ? refName.getTarget().getName() : refName.getName(); } permissionBackend.user(user).project(project).ref(name).check(RefPermission.READ); if (refName == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.project.BranchResource(parent.getControl(), refName); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",c0f00cfa920343486f37f3b3daae303ffd7507c0,"@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic() ? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getControl(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",ca3f531e095bac03ff29f9f345655368e92d644a,2017-07-02 17:19:38,2
112078,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_ChangeOwnerIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void grantApprove(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, boolean exclusive) throws java.lang.Exception { grantLabel(((com.google.gerrit.common.data.Permission.LABEL) + ""Code-Review""), (-2), 2, project, ""refs/heads/*"", false, groupUUID, exclusive); }",6ce3aebe31e0b5a32b5a252ed6863d616db2026d,"private void grantApprove(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, boolean exclusive) throws java.lang.Exception { grantLabel(""Code-Review"", (-2), 2, project, ""refs/heads/*"", false, groupUUID, exclusive); }",3e2f0dce3eacc674423f23963cff3a7b1a9a976f,2017-07-03 02:20:58,3
112078,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_ChangeOwnerIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testChangeOwner_BlockedOnParentProject() throws java.lang.Exception { setApiUser(admin); blockLabel(((com.google.gerrit.common.data.Permission.LABEL) + ""Code-Review""), (-2), 2, SystemGroupBackend.CHANGE_OWNER, ""refs/heads/*"", project); com.google.gerrit.reviewdb.client.Project.NameKey child = createProject(""child"", project); setApiUser(user); grantApproveToAll(child); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> childRepo = cloneProject(child, user); java.lang.String changeId = createMyChange(childRepo); assertApproveFails(user, changeId); approve(user2, changeId); }",0c249791e1a3b7a5a9a50d2152f0c2df3ca09911,"@org.junit.Test public void testChangeOwner_BlockedOnParentProject() throws java.lang.Exception { setApiUser(admin); blockApproveForChangeOwner(project); com.google.gerrit.reviewdb.client.Project.NameKey child = createProject(""child"", project); setApiUser(user); grantApproveToAll(child); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> childRepo = cloneProject(child, user); java.lang.String changeId = createMyChange(childRepo); assertApproveFails(user, changeId); approve(user2, changeId); }",301a75b5818f40b398a4762b20963d3ca93213a7,2017-07-03 02:20:58,3
112078,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_AbstractDaemonTest.java,"protected void grantLabel(java.lang.String permission, int min, int max, com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, boolean force, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(project)) { md.setMessage(java.lang.String.format(""Grant %s on %s"", permission, ref)); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection s = config.getAccessSection(ref, true); com.google.gerrit.common.data.Permission p = s.getPermission(permission, true); com.google.gerrit.common.data.PermissionRule rule = com.google.gerrit.server.project.Util.newRule(config, groupUUID); rule.setForce(force); rule.setMin(min); rule.setMax(max); p.add(rule); config.commit(md); projectCache.evict(config.getProject()); } }",3a5e95f07c8c4033e4d1a7e6d2493416858e29d4,"protected void grantLabel(java.lang.String permission, int min, int max, com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, boolean force, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, boolean exclusive) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(project)) { md.setMessage(java.lang.String.format(""Grant %s on %s"", permission, ref)); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection s = config.getAccessSection(ref, true); com.google.gerrit.common.data.Permission p = s.getPermission(permission, true); p.setExclusiveGroup(exclusive); com.google.gerrit.common.data.PermissionRule rule = com.google.gerrit.server.project.Util.newRule(config, groupUUID); rule.setForce(force); rule.setMin(min); rule.setMax(max); p.add(rule); config.commit(md); projectCache.evict(config.getProject()); } }",41f7549a2b270a8a3bef7cac0bf3dbfb551f9d84,"protected void grantLabel(java.lang.String label, int min, int max, com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, boolean force, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, boolean exclusive) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { java.lang.String permission = (com.google.gerrit.common.data.Permission.LABEL) + label; try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(project)) { md.setMessage(java.lang.String.format(""Grant %s on %s"", permission, ref)); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection s = config.getAccessSection(ref, true); com.google.gerrit.common.data.Permission p = s.getPermission(permission, true); p.setExclusiveGroup(exclusive); com.google.gerrit.common.data.PermissionRule rule = com.google.gerrit.server.project.Util.newRule(config, groupUUID); rule.setForce(force); rule.setMin(min); rule.setMax(max); p.add(rule); config.commit(md); projectCache.evict(config.getProject()); } }",01403be1ccb27a8c575d6c1efcca784bcdedd260,2017-07-03 02:20:58,3
112078,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_AbstractDaemonTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected void blockLabel(java.lang.String permission, int min, int max, com.google.gerrit.reviewdb.client.AccountGroup.UUID id, java.lang.String ref, com.google.gerrit.reviewdb.client.Project.NameKey project) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(project).getConfig(); com.google.gerrit.common.data.PermissionRule rule = com.google.gerrit.server.project.Util.block(cfg, permission, id, ref); rule.setMin(min); rule.setMax(max); saveProjectConfig(project, cfg); }",fe35c32e1a1fdb1262070015d46d7997ef6fdf32,"protected void blockLabel(java.lang.String label, int min, int max, com.google.gerrit.reviewdb.client.AccountGroup.UUID id, java.lang.String ref, com.google.gerrit.reviewdb.client.Project.NameKey project) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(project).getConfig(); com.google.gerrit.server.project.Util.block(cfg, ((com.google.gerrit.common.data.Permission.LABEL) + label), min, max, id, ref); saveProjectConfig(project, cfg); }",f840e91f41c1938627466acdd7f1cd8af4a0d707,2017-07-03 02:20:58,3
112078,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_ChangeOwnerIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testChangeOwner_BlockedOnParentProjectAndExclusiveAllowOnChild() throws java.lang.Exception { setApiUser(admin); blockLabel(((com.google.gerrit.common.data.Permission.LABEL) + ""Code-Review""), (-2), 2, SystemGroupBackend.CHANGE_OWNER, ""refs/heads/*"", project); com.google.gerrit.reviewdb.client.Project.NameKey child = createProject(""child"", project); setApiUser(user); grantExclusiveApproveToAll(child); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> childRepo = cloneProject(child, user); java.lang.String changeId = createMyChange(childRepo); assertApproveFails(user, changeId); approve(user2, changeId); }",edb4a595b73c7888c43c46bc1f311826e97f0031,"@org.junit.Test public void testChangeOwner_BlockedOnParentProjectAndExclusiveAllowOnChild() throws java.lang.Exception { setApiUser(admin); blockApproveForChangeOwner(project); com.google.gerrit.reviewdb.client.Project.NameKey child = createProject(""child"", project); setApiUser(user); grantExclusiveApproveToAll(child); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> childRepo = cloneProject(child, user); java.lang.String changeId = createMyChange(childRepo); assertApproveFails(user, changeId); approve(user2, changeId); }",37e54bf47df1e42318a3eec95afeef126c493629,2017-07-03 02:20:58,3
112238,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectTagsScreen.java,"void populate(int row, com.google.gerrit.client.projects.TagInfo k) { if (k.canDelete()) { com.google.gwt.user.client.ui.CheckBox sel = new com.google.gwt.user.client.ui.CheckBox(); sel.addValueChangeHandler(updateDeleteHandler); table.setWidget(row, 1, sel); canDelete = true; } else { table.setText(row, 1, """"); } table.setWidget(row, 2, new com.google.gwt.user.client.ui.InlineHTML(highlight(k.getShortName(), match))); if ((k.revision()) != null) { table.setText(row, 3, k.revision()); } else { table.setText(row, 3, """"); } com.google.gwt.user.client.ui.FlexTable.FlexCellFormatter fmt = table.getFlexCellFormatter(); java.lang.String iconCellStyle = Gerrit.RESOURCES.css().iconCell(); java.lang.String dataCellStyle = Gerrit.RESOURCES.css().dataCell(); fmt.addStyleName(row, 1, iconCellStyle); fmt.addStyleName(row, 2, dataCellStyle); fmt.addStyleName(row, 3, dataCellStyle); setRowItem(row, k); }",fb5ab4255ce79a21a5d63e825100f13ce9eacf8c,"void populate(int row, com.google.gerrit.client.projects.TagInfo k) { if (k.canDelete()) { com.google.gwt.user.client.ui.CheckBox sel = new com.google.gwt.user.client.ui.CheckBox(); sel.addValueChangeHandler(updateDeleteHandler); table.setWidget(row, 1, sel); canDelete = true; } else { table.setText(row, 1, """"); } table.setWidget(row, 2, new com.google.gwt.user.client.ui.InlineHTML(highlight(k.getShortName(), match))); if ((k.revision()) != null) { table.setText(row, 3, k.revision()); } else { table.setText(row, 3, """"); } com.google.gwt.user.client.ui.FlowPanel actionsPanel = new com.google.gwt.user.client.ui.FlowPanel(); if ((k.webLinks()) != null) { for (com.google.gerrit.client.info.WebLinkInfo webLink : com.google.gerrit.client.rpc.Natives.asList(k.webLinks())) { actionsPanel.add(webLink.toAnchor()); } } table.setWidget(row, 4, actionsPanel); com.google.gwt.user.client.ui.FlexTable.FlexCellFormatter fmt = table.getFlexCellFormatter(); java.lang.String iconCellStyle = Gerrit.RESOURCES.css().iconCell(); java.lang.String dataCellStyle = Gerrit.RESOURCES.css().dataCell(); fmt.addStyleName(row, 1, iconCellStyle); fmt.addStyleName(row, 2, dataCellStyle); fmt.addStyleName(row, 3, dataCellStyle); setRowItem(row, k); }",c4eb7991b960ee92830688630bf2a7268fe0fcd5,"void populate(int row, com.google.gerrit.client.projects.TagInfo k) { if (k.canDelete()) { com.google.gwt.user.client.ui.CheckBox sel = new com.google.gwt.user.client.ui.CheckBox(); sel.addValueChangeHandler(updateDeleteHandler); table.setWidget(row, 1, sel); canDelete = true; } else { table.setText(row, 1, """"); } table.setWidget(row, 2, new com.google.gwt.user.client.ui.InlineHTML(highlight(k.getShortName(), match))); if ((k.revision()) != null) { table.setText(row, 3, k.revision()); } else { table.setText(row, 3, """"); } com.google.gwt.user.client.ui.FlowPanel actionsPanel = new com.google.gwt.user.client.ui.FlowPanel(); if ((k.webLinks()) != null) { for (com.google.gerrit.client.info.WebLinkInfo webLink : com.google.gerrit.client.rpc.Natives.asList(k.webLinks())) { actionsPanel.add(webLink.toAnchor()); } } table.setWidget(row, 4, actionsPanel); com.google.gwt.user.client.ui.FlexTable.FlexCellFormatter fmt = table.getFlexCellFormatter(); java.lang.String iconCellStyle = Gerrit.RESOURCES.css().iconCell(); java.lang.String dataCellStyle = Gerrit.RESOURCES.css().dataCell(); fmt.addStyleName(row, 1, iconCellStyle); fmt.addStyleName(row, 2, dataCellStyle); fmt.addStyleName(row, 3, dataCellStyle); fmt.addStyleName(row, 4, dataCellStyle); setRowItem(row, k); }",b78ae163ebb8738686387fda85074540e7531887,2017-07-03 04:50:26,11
112238,gerrit-server_src_main_java_com_google_gerrit_server_project_ListTags.java,"public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.server.project.RefControl control) throws java.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), tag.getName(), tag.getObject().getName(), tag.getFullMessage().trim(), (tagger != null ? com.google.gerrit.server.CommonConverters.toGitPerson(tag.getTaggerIdent()) : null), control.canDelete()); } return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), ref.getObjectId().getName(), control.canDelete()); }",30ed7a29db49ca2608d4cc8686b99462918ef259,"private java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> visibleTags() { com.google.gerrit.server.project.ProjectControl control; com.google.gerrit.server.project.ProjectControl Repository; }",1cfa568bcdaf83dcabc0d4ecc593fd50072059da,"private java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> visibleTags(com.google.gerrit.server.project.ProjectControl pctl, org.eclipse.jgit.lib.Repository repo, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> tags) { return new com.google.gerrit.server.git.VisibleRefFilter(tagCache, changeNotesFactory, changeCache, repo, pctl, dbProvider.get(), false).filter(tags, true); }",b23657a8cf454568bb20aa8064cd06eb5a8df6a2,2017-07-03 04:50:26,11
112238,gerrit-server_src_main_java_com_google_gerrit_server_project_ListTags.java,"private java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> visibleTags(com.google.gerrit.server.project.ProjectControl control, org.eclipse.jgit.lib.Repository repo, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> tags) { return new com.google.gerrit.server.git.VisibleRefFilter(tagCache, changeNotesFactory, changeCache, repo, control, dbProvider.get(), false).filter(tags, true); }",632583671c8f1599a6cc4c614a3f3007c495518c,"public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.server.project.RefControl control, com.google.gerrit.server.project.ProjectControl pcntl, com.google.gerrit.server.WebLinks links) throws java.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(pctl.getProject().getName(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), tag.getName(), tag.getObject().getName(), tag.getFullMessage().trim(), (tagger != null ? com.google.gerrit.server.CommonConverters.toGitPerson(tag.getTaggerIdent()) : null), control.canDelete(), (webLinks.isEmpty() ? null : webLinks)); } return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), ref.getObjectId().getName(), control.canDelete(), (webLinks.isEmpty() ? null : webLinks)); }",1e342cc4e10a24c71740fdfd46667f23b0bbe267,"public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.server.project.RefControl control, com.google.gerrit.server.project.ProjectControl pctl, com.google.gerrit.server.WebLinks links) throws java.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(pctl.getProject().getName(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), tag.getName(), tag.getObject().getName(), tag.getFullMessage().trim(), (tagger != null ? com.google.gerrit.server.CommonConverters.toGitPerson(tag.getTaggerIdent()) : null), control.canDelete(), (webLinks.isEmpty() ? null : webLinks)); } return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), ref.getObjectId().getName(), control.canDelete(), (webLinks.isEmpty() ? null : webLinks)); }",e863938104585f76be6a8d5b8cca6e61e27c9968,2017-07-03 04:50:26,11
112238,gerrit-server_src_main_java_com_google_gerrit_server_project_ListTags.java,"public com.google.gerrit.extensions.api.projects.TagInfo get(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.lang.String tagName = id.get(); if (!(tagName.startsWith(Constants.R_TAGS))) { tagName = (org.eclipse.jgit.lib.Constants.R_TAGS) + tagName; } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(tagName); com.google.gerrit.server.project.ProjectControl control = resource.getControl(); if ((ref != null) && (!(visibleTags(control, repo, com.google.common.collect.ImmutableMap.of(ref.getName(), ref)).isEmpty()))) { return com.google.gerrit.server.project.ListTags.createTagInfo(ref, rw, control.controlForRef(ref.getName())); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",2104a55bd96fc92505a05ecb09694bba6dd9743d,"public com.google.gerrit.extensions.api.projects.TagInfo get(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.lang.String tagName = id.get(); if (!(tagName.startsWith(Constants.R_TAGS))) { tagName = (org.eclipse.jgit.lib.Constants.R_TAGS) + tagName; } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(tagName); com.google.gerrit.server.project.ProjectControl pctl = resource.getControl(); if ((ref != null) && (!(visibleTags(control, repo, com.google.common.collect.ImmutableMap.of(ref.getName(), ref)).isEmpty()))) { return com.google.gerrit.server.project.ListTags.createTagInfo(ref, rw, control.controlForRef(ref.getName()), pctl, links); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",030cd5a031e5124272632f8ed157f25d8c81151e,"public com.google.gerrit.extensions.api.projects.TagInfo get(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.lang.String tagName = id.get(); if (!(tagName.startsWith(Constants.R_TAGS))) { tagName = (org.eclipse.jgit.lib.Constants.R_TAGS) + tagName; } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(tagName); com.google.gerrit.server.project.ProjectControl pctl = resource.getControl(); if ((ref != null) && (!(visibleTags(pctl, repo, com.google.common.collect.ImmutableMap.of(ref.getName(), ref)).isEmpty()))) { return com.google.gerrit.server.project.ListTags.createTagInfo(ref, rw, pctl.controlForRef(ref.getName()), pctl, links); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",ac6b113912c0cceda4ba7618f77fe4265de62734,2017-07-03 04:50:26,11
112238,gerrit-server_src_main_java_com_google_gerrit_server_project_ListTags.java,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> apply(com.google.gerrit.server.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> tags = new java.util.ArrayList<>(); try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { com.google.gerrit.server.project.ProjectControl control = resource.getControl(); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = visibleTags(control, repo, repo.getRefDatabase().getRefs(Constants.R_TAGS)); for (org.eclipse.jgit.lib.Ref ref : all.values()) { tags.add(com.google.gerrit.server.project.ListTags.createTagInfo(ref, rw, control.controlForRef(ref.getName()))); } } java.util.Collections.sort(tags, new java.util.Comparator<com.google.gerrit.extensions.api.projects.TagInfo>() { @java.lang.Override public int compare(com.google.gerrit.extensions.api.projects.TagInfo a, com.google.gerrit.extensions.api.projects.TagInfo b) { return a.ref.compareTo(b.ref); } }); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.TagInfo>(org.eclipse.jgit.lib.Constants.R_TAGS).start(start).limit(limit).subString(matchSubstring).regex(matchRegex).filter(tags); }",57d9b5eaa709313df63a4a3c054a9a38a841e9ec,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> apply(com.google.gerrit.server.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> tags = new java.util.ArrayList<>(); try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { com.google.gerrit.server.project.ProjectControl control = resource.getControl(); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = visibleTags(control, repo, repo.getRefDatabase().getRefs(Constants.R_TAGS)); for (org.eclipse.jgit.lib.Ref ref : all.values()) { tags.add(com.google.gerrit.server.project.ListTags.createTagInfo(ref, rw, control.controlForRef(ref.getName()), control, links)); } } java.util.Collections.sort(tags, new java.util.Comparator<com.google.gerrit.extensions.api.projects.TagInfo>() { @java.lang.Override public int compare(com.google.gerrit.extensions.api.projects.TagInfo a, com.google.gerrit.extensions.api.projects.TagInfo b) { return a.ref.compareTo(b.ref); } }); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.TagInfo>(org.eclipse.jgit.lib.Constants.R_TAGS).start(start).limit(limit).subString(matchSubstring).regex(matchRegex).filter(tags); }",350a31367c6d60ca6fdbf539dffc985e76225d89,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> apply(com.google.gerrit.server.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> tags = new java.util.ArrayList<>(); try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { com.google.gerrit.server.project.ProjectControl pctl = resource.getControl(); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = visibleTags(pctl, repo, repo.getRefDatabase().getRefs(Constants.R_TAGS)); for (org.eclipse.jgit.lib.Ref ref : all.values()) { tags.add(com.google.gerrit.server.project.ListTags.createTagInfo(ref, rw, pctl.controlForRef(ref.getName()), pctl, links)); } } java.util.Collections.sort(tags, new java.util.Comparator<com.google.gerrit.extensions.api.projects.TagInfo>() { @java.lang.Override public int compare(com.google.gerrit.extensions.api.projects.TagInfo a, com.google.gerrit.extensions.api.projects.TagInfo b) { return a.ref.compareTo(b.ref); } }); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.TagInfo>(org.eclipse.jgit.lib.Constants.R_TAGS).start(start).limit(limit).subString(matchSubstring).regex(matchRegex).filter(tags); }",690f31ba41cff7c2a63a1b4da3f25849b4dbbd22,2017-07-03 04:50:26,11
112273,gerrit-pgm_src_main_java_com_google_gerrit_pgm_LocalUsernamesToLowerCase.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private int reindexAccounts() throws java.lang.Exception { monitor.beginTask(""Reindex accounts"", ProgressMonitor.UNKNOWN); java.util.List<java.lang.String> reindexArgs = com.google.common.collect.ImmutableList.of(""--site-path"", getSitePath().toString(), ""--index"", AccountSchemaDefinitions.NAME); java.lang.System.out.println(""Migration complete, reindexing accounts with:""); java.lang.System.out.println(("" reindex "" + (reindexArgs.stream().collect(java.util.stream.Collectors.joining("" ""))))); com.google.gerrit.pgm.Reindex reindexPgm = new com.google.gerrit.pgm.Reindex(); int exitCode = reindexPgm.main(reindexArgs.stream().toArray(java.lang.String[]::new)); monitor.endTask(); return exitCode; }",2ba65da5e6315d99ae9b6e88b7ca53569d0de4e2,"private int reindexAccounts() throws java.lang.Exception { monitor.beginTask(""Reindex accounts"", ProgressMonitor.UNKNOWN); java.lang.String[] reindexArgs = new java.lang.String[]{ ""--site-path"", getSitePath().toString(), ""--index"", com.google.gerrit.server.index.account.AccountSchemaDefinitions.NAME }; java.lang.System.out.println(""Migration complete, reindexing accounts with:""); java.lang.System.out.println(("" reindex "" + (java.lang.String.join("" "", reindexArgs)))); com.google.gerrit.pgm.Reindex reindexPgm = new com.google.gerrit.pgm.Reindex(); int exitCode = reindexPgm.main(reindexArgs); monitor.endTask(); return exitCode; }",48ebde045358d0bdbd05a1fa705767568e83e7ba,2017-07-05 00:40:33,4
112272,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_AbstractDaemonTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected void allow(java.lang.String permission, com.google.gerrit.reviewdb.client.AccountGroup.UUID id, com.google.gerrit.reviewdb.client.Project.NameKey p, java.lang.String ref) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(p).getConfig(); com.google.gerrit.server.project.Util.allow(cfg, permission, id, ref); saveProjectConfig(p, cfg); }",a99cabfdc88ec5d6cf0d5eb876ccbdf9a7751b62,"protected void allow(com.google.gerrit.reviewdb.client.Project.NameKey p, java.lang.String ref, java.lang.String permission, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(p).getConfig(); com.google.gerrit.server.project.Util.allow(cfg, permission, id, ref); saveProjectConfig(p, cfg); }",33e6905093fdfdd0a808c17ceafc94d3d94e145e,2017-07-06 06:54:49,6
112272,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_RefAdvertisementIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.List<java.lang.String> lsRemote(com.google.gerrit.reviewdb.client.Project.NameKey p, com.google.gerrit.acceptance.TestAccount a) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<?> adminTestRepository = cloneProject(p, a); try (org.eclipse.jgit.api.Git git = adminTestRepository.git()) { org.eclipse.jgit.api.LsRemoteCommand lsRemoteCommand = git.lsRemote(); java.util.List<java.lang.String> refNames = lsRemoteCommand.call().stream().map(Ref::getName).collect(java.util.stream.Collectors.toList()); return refNames; } }",aa2a47cbeeaf4b1dc087a5e6e94783bb2862eeaf,"private java.util.List<java.lang.String> lsRemote(com.google.gerrit.reviewdb.client.Project.NameKey p, com.google.gerrit.acceptance.TestAccount a) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<?> testRepository = cloneProject(p, a); try (org.eclipse.jgit.api.Git git = testRepository.git()) { return git.lsRemote().call().stream().map(Ref::getName).collect(java.util.stream.Collectors.toList()); } }",acaa5c2b626c17105c63fc6aeccac0193135e459,2017-07-06 06:54:49,6
112272,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_client_RefNames.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static java.lang.String skipShardedRefPart(java.lang.String name) { if (name == null) { return null; } java.lang.String[] parts = name.split(""/""); int n = parts.length; if (n < 2) { return null; } int le; for (le = 0; le < (parts[0].length()); le++) { if (!(java.lang.Character.isDigit(parts[0].charAt(le)))) { return null; } } if (le != 2) { return null; } int ie; for (ie = 0; ie < (parts[1].length()); ie++) { if (!(java.lang.Character.isDigit(parts[1].charAt(ie)))) { if (ie == 0) { return null; } break; } } int shard = java.lang.Integer.parseInt(parts[0]); int id = java.lang.Integer.parseInt(parts[1].substring(0, ie)); if ((id % 100) != shard) { return null; } return name.substring((((parts[0].length()) + 1) + ie)); }",c8759f5b5e308de57d8c24f4c2708e499e85f9cb,"static java.lang.String skipShardedRefPart(java.lang.String name) { if (name == null) { return null; } java.lang.String[] parts = name.split(""/""); int n = parts.length; if (n < 2) { return null; } int le; for (le = 0; le < (parts[0].length()); le++) { if (!(java.lang.Character.isDigit(parts[0].charAt(le)))) { return null; } } if (le != 2) { return null; } int ie; for (ie = 0; ie < (parts[1].length()); ie++) { if (!(java.lang.Character.isDigit(parts[1].charAt(ie)))) { if (ie == 0) { return null; } break; } } int shard = java.lang.Integer.parseInt(parts[0]); int id = java.lang.Integer.parseInt(parts[1].substring(0, ie)); if ((id % 100) != shard) { return null; } return name.substring(((2 + 1) + ie)); }",c767064b2e3076d6cd87f1f2342fe17b4f2578b7,2017-07-06 06:54:49,6
112272,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_client_RefNames.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static java.lang.Integer parseAfterShardedRefPart(java.lang.String name) { java.lang.String rest = com.google.gerrit.reviewdb.client.RefNames.skipShardedRefPart(name); if ((rest == null) || (!(rest.startsWith(""/"")))) { return null; } rest = rest.substring(1); if (rest.isEmpty()) { return null; } int ie; for (ie = 0; ie < (rest.length()); ie++) { if (!(java.lang.Character.isDigit(rest.charAt(ie)))) { if (ie == 0) { return null; } break; } } return java.lang.Integer.parseInt(rest.substring(0, ie)); }",8c27c2057ab9ab944de9e008ebae1d5b4deac77d,"static java.lang.Integer parseAfterShardedRefPart(java.lang.String name) { java.lang.String rest = com.google.gerrit.reviewdb.client.RefNames.skipShardedRefPart(name); if ((rest == null) || (!(rest.startsWith(""/"")))) { return null; } rest = rest.substring(1); int ie; for (ie = 0; ie < (rest.length()); ie++) { if (!(java.lang.Character.isDigit(rest.charAt(ie)))) { break; } } if (ie == 0) { return null; } return java.lang.Integer.parseInt(rest.substring(0, ie)); }",f26e37b5d0a27d946fc45efefe3dd49a297d1207,2017-07-06 06:54:49,6
112272,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_AbstractDaemonTest.java,"protected void allow(java.lang.String permission, com.google.gerrit.reviewdb.client.AccountGroup.UUID id, java.lang.String ref) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(project).getConfig(); com.google.gerrit.server.project.Util.allow(cfg, permission, id, ref); saveProjectConfig(project, cfg); }",8c0e3bfd159b00b16ed653985bfb859692745de0,"protected void allow(java.lang.String permission, com.google.gerrit.reviewdb.client.AccountGroup.UUID id, java.lang.String ref) throws java.lang.Exception { allow(permission, id, project, ref); }",2cfe1bdfeae51e6b84774d2d6e2f0a9472155c9b,"protected void allow(java.lang.String ref, java.lang.String permission, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws java.lang.Exception { allow(project, ref, permission, id); }",e7a0f0482739326432837e864b381756a44529b5,2017-07-06 06:54:49,6
112272,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_RefAdvertisementIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void advertisedReferencesOmitStarredChangesRefsOfOtherUsers() throws java.lang.Exception { assume().that(notesMigration.commitChangeWrites()).isTrue(); allow(Permission.READ, com.google.gerrit.acceptance.git.REGISTERED_USERS, allUsersName, ""refs/*""); gApi.accounts().self().starChange(c3.getId().toString()); java.lang.String starredChangesRef = com.google.gerrit.reviewdb.client.RefNames.refsStarredChanges(c3.getId(), admin.id); assertThat(lsRemote(allUsersName, admin)).contains(starredChangesRef); assertThat(lsRemote(allUsersName, user)).doesNotContain(starredChangesRef); }",c51c0f373ec1919f36b697185c3d51bb5d5f416d,"@org.junit.Test public void advertisedReferencesOmitStarredChangesRefsOfOtherUsers() throws java.lang.Exception { assume().that(notesMigration.commitChangeWrites()).isTrue(); allow(project, ""refs/*"", Permission.READ, com.google.gerrit.acceptance.git.REGISTERED_USERS); allow(allUsersName, ""refs/*"", Permission.READ, com.google.gerrit.acceptance.git.REGISTERED_USERS); setApiUser(user); gApi.accounts().self().starChange(c3.getId().toString()); java.lang.String starredChangesRef = com.google.gerrit.reviewdb.client.RefNames.refsStarredChanges(c3.getId(), user.id); assertThat(lsRemote(allUsersName, user)).contains(starredChangesRef); assertThat(lsRemote(allUsersName, accountCreator.user2())).doesNotContain(starredChangesRef); }",5b7f520db0afb233cd36921eeb0af38a170d2eeb,2017-07-06 06:54:49,6
112272,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_RefAdvertisementIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void advertisedReferencesOmitDraftCommentRefsOfOtherUsers() throws java.lang.Exception { assume().that(notesMigration.commitChangeWrites()).isTrue(); allow(Permission.READ, com.google.gerrit.acceptance.git.REGISTERED_USERS, allUsersName, ""refs/*""); com.google.gerrit.extensions.api.changes.DraftInput draftInput = new com.google.gerrit.extensions.api.changes.DraftInput(); draftInput.line = 1; draftInput.message = ""nit: trailing whitespace""; draftInput.path = com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG; gApi.changes().id(c3.getId().get()).current().createDraft(draftInput); java.lang.String draftCommentRef = com.google.gerrit.reviewdb.client.RefNames.refsDraftComments(c3.getId(), admin.id); assertThat(lsRemote(allUsersName, admin)).contains(draftCommentRef); assertThat(lsRemote(allUsersName, user)).doesNotContain(draftCommentRef); }",b9d137e6dbb6e8105a21c0798cf10e5244841157,"@org.junit.Test public void advertisedReferencesOmitDraftCommentRefsOfOtherUsers() throws java.lang.Exception { assume().that(notesMigration.commitChangeWrites()).isTrue(); allow(project, ""refs/*"", Permission.READ, com.google.gerrit.acceptance.git.REGISTERED_USERS); allow(allUsersName, ""refs/*"", Permission.READ, com.google.gerrit.acceptance.git.REGISTERED_USERS); setApiUser(user); com.google.gerrit.extensions.api.changes.DraftInput draftInput = new com.google.gerrit.extensions.api.changes.DraftInput(); draftInput.line = 1; draftInput.message = ""nit: trailing whitespace""; draftInput.path = com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG; gApi.changes().id(c3.getId().get()).current().createDraft(draftInput); java.lang.String draftCommentRef = com.google.gerrit.reviewdb.client.RefNames.refsDraftComments(c3.getId(), user.id); assertThat(lsRemote(allUsersName, user)).contains(draftCommentRef); assertThat(lsRemote(allUsersName, accountCreator.user2())).doesNotContain(draftCommentRef); }",8e1c6105c783a9146470ec25d0bd19d722c0a3e8,2017-07-06 06:54:49,6
112530,gerrit-server_src_main_java_com_google_gerrit_server_git_VersionedMetaData.java,"public void load(org.eclipse.jgit.revwalk.RevWalk walk, org.eclipse.jgit.lib.ObjectId id) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { this.rw = walk; this.reader = walk.getObjectReader(); try { revision = (id != null) ? walk.parseCommit(id) : null; onLoad(); } finally { walk = null; reader = null; } }",c1b4087d8d2b741def5d3a2396d620dace601454,"public void load(org.eclipse.jgit.revwalk.RevWalk walk, org.eclipse.jgit.lib.ObjectId id) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { this.rw = walk; this.reader = walk.getObjectReader(); try { revision = (id != null) ? walk.parseCommit(id) : null; onLoad(); } finally { rw = null; reader = null; } }",37ffdc972c3bda930e090933bed907afe74b6f51,"public void load(org.eclipse.jgit.revwalk.RevWalk walk, org.eclipse.jgit.lib.ObjectId id) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { this.rw = walk; this.reader = walk.getObjectReader(); try { revision = (id != null) ? walk.parseCommit(id) : null; onLoad(); } finally { this.rw = null; this.reader = null; } }",dcfff7fb016c27198add6e72558b3d2972b166bf,2017-07-06 12:12:22,3
107280,gitiles-servlet_src_main_java_com_google_gitiles_doc_MarkdownToHtml.java,"@java.lang.Override public void visit(org.commonmark.node.Heading node) { outputNamedAnchor = false; java.lang.String tag = ""h"" + (node.getLevel()); html.open(tag); java.lang.String id = toc.idFromHeader(node); if (id != null) { html.open(""a"").attribute(""class"", ""h"").attribute(""name"", id).attribute(""href"", (""#"" + id)).open(""span"").close(""span"").close(""a""); } visitChildren(node); html.close(tag); outputNamedAnchor = true; }",f786978b8d1cc01905305880d2353aac64d313e7,"@java.lang.Override public void visit(org.commonmark.node.Heading node) { outputNamedAnchor = false; java.lang.String tag = ""h"" + (node.getLevel()); html.open(tag); java.lang.String id = toc.idFromHeader(node); if (id != null) { html.open(""a"").attribute(""class"", ""h"").attribute(""name"", id.toLowerCase()).attribute(""href"", (""#"" + (id.toLowerCase()))).open(""span"").close(""span"").close(""a""); } visitChildren(node); html.close(tag); outputNamedAnchor = true; }",2a7c7a9e957905b2cb4af1927da91230abfbe245,"@java.lang.Override public void visit(org.commonmark.node.Heading node) { outputNamedAnchor = false; java.lang.String tag = ""h"" + (node.getLevel()); html.open(tag); java.lang.String id = toc.idFromHeader(node); if (id != null) { html.open(""a"").attribute(""class"", ""h"").attribute(""name"", id).attribute(""href"", (""#"" + id)).open(""span"").close(""span"").close(""a""); html.open(""a"").attribute(""class"", ""h"").attribute(""name"", id.toLowerCase()).attribute(""href"", (""#"" + (id.toLowerCase()))).open(""span"").close(""span"").close(""a""); } visitChildren(node); html.close(tag); outputNamedAnchor = true; }",803f40e62c594555714590c2b73fcc90ef35014a,2017-07-06 13:55:05,4
112223,gerrit-server_src_main_java_com_google_gerrit_server_CommentsUtil.java,"public java.util.Optional<com.google.gerrit.reviewdb.client.Comment> get(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.Comment.Key key) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { return java.util.Optional.ofNullable(db.patchComments().get(PatchLineComment.Key.from(notes.getChangeId(), key))).map(( plc) -> plc.asComment(serverId)); } java.util.function.Predicate<com.google.gerrit.reviewdb.client.Comment> p = ( c) -> key.equals(c.key); java.util.Optional<com.google.gerrit.reviewdb.client.Comment> c = publishedByChange(db, notes).stream().filter(p).findFirst(); if (c.isPresent()) { return c; } return draftByChange(db, notes).stream().filter(p).findFirst(); }",6d0b218eaeba24a74c32512fdb59fc255759e245,"public java.util.Optional<com.google.gerrit.reviewdb.client.Comment> getDraft(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.reviewdb.client.Comment.Key key) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { return java.util.Optional.ofNullable(db.patchComments().get(PatchLineComment.Key.from(notes.getChangeId(), key))).map(( plc) -> plc.asComment(serverId)); } return draftByChangeAuthor(db, notes, user.getAccountId()).stream().filter(( c) -> key.equals(c.key)).findFirst(); }",51f325af1fc0bf32f6d5726c865a97b6466e14d7,"public java.util.Optional<com.google.gerrit.reviewdb.client.Comment> getDraft(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.reviewdb.client.Comment.Key key) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { java.util.Optional<com.google.gerrit.reviewdb.client.Comment> c = getReviewDb(db, notes, key); if ((c.isPresent()) && (!(c.get().author.getId().equals(user.getAccountId())))) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format(""Expected draft %s to belong to account %s, but it belongs to %s"", key, user.getAccountId(), c.get().author.getId())); } return c; } return draftByChangeAuthor(db, notes, user.getAccountId()).stream().filter(( c) -> key.equals(c.key)).findFirst(); }",d3d85d7090b24c68cb9207480dadd4fa4a1a39e3,2017-07-06 14:12:07,2
112223,gerrit-server_src_main_java_com_google_gerrit_server_CommentsUtil.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.Optional<com.google.gerrit.reviewdb.client.Comment> getPublished(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.Comment.Key key) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { return java.util.Optional.ofNullable(db.patchComments().get(PatchLineComment.Key.from(notes.getChangeId(), key))).map(( plc) -> plc.asComment(serverId)); } return publishedByChange(db, notes).stream().filter(( c) -> key.equals(c.key)).findFirst(); }",799103fca7096f28ec6ea37a27dda080291a3e6a,"public java.util.Optional<com.google.gerrit.reviewdb.client.Comment> getPublished(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.Comment.Key key) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { return getReviewDb(db, notes, key); } return publishedByChange(db, notes).stream().filter(( c) -> key.equals(c.key)).findFirst(); }",e74021413939f654ca86e481b3487ca3ec615ae6,2017-07-06 14:12:07,2
112223,gerrit-server_src_main_java_com_google_gerrit_server_change_PutDraftComment.java,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.util.Optional<com.google.gerrit.reviewdb.client.Comment> maybeComment = commentsUtil.get(ctx.getDb(), ctx.getNotes(), key); if (!(maybeComment.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""comment not found: "" + (key))); } com.google.gerrit.reviewdb.client.Comment origComment = maybeComment.get(); comment = new com.google.gerrit.reviewdb.client.Comment(origComment); ctx.getUser().updateRealAccountId(comment::setRealAuthor); com.google.gerrit.reviewdb.client.PatchSet.Id psId = new com.google.gerrit.reviewdb.client.PatchSet.Id(ctx.getChange().getId(), origComment.key.patchSetId); com.google.gerrit.server.notedb.ChangeUpdate update = ctx.getUpdate(psId); com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.get(ctx.getDb(), ctx.getNotes(), psId); if (ps == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""patch set not found: "" + psId)); } if (((in.path) != null) && (!(in.path.equals(origComment.key.filename)))) { commentsUtil.deleteComments(ctx.getDb(), update, java.util.Collections.singleton(origComment)); comment.key.filename = in.path; } com.google.gerrit.server.CommentsUtil.setCommentRevId(comment, patchListCache, ctx.getChange(), ps); commentsUtil.putComments(ctx.getDb(), update, Status.DRAFT, java.util.Collections.singleton(com.google.gerrit.server.change.PutDraftComment.update(comment, in, ctx.getWhen()))); ctx.dontBumpLastUpdatedOn(); return true; }",bbbcc0de02a493bb8cd3d27ab179e88382397a6f,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.util.Optional<com.google.gerrit.reviewdb.client.Comment> maybeComment = commentsUtil.getDraft(ctx.getDb(), ctx.getNotes(), ctx.getIdentifiedUser(), key); if (!(maybeComment.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""comment not found: "" + (key))); } com.google.gerrit.reviewdb.client.Comment origComment = maybeComment.get(); comment = new com.google.gerrit.reviewdb.client.Comment(origComment); com.google.gerrit.reviewdb.client.PatchSet.Id psId = new com.google.gerrit.reviewdb.client.PatchSet.Id(ctx.getChange().getId(), origComment.key.patchSetId); com.google.gerrit.server.notedb.ChangeUpdate update = ctx.getUpdate(psId); com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.get(ctx.getDb(), ctx.getNotes(), psId); if (ps == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""patch set not found: "" + psId)); } if (((in.path) != null) && (!(in.path.equals(origComment.key.filename)))) { commentsUtil.deleteComments(ctx.getDb(), update, java.util.Collections.singleton(origComment)); comment.key.filename = in.path; } com.google.gerrit.server.CommentsUtil.setCommentRevId(comment, patchListCache, ctx.getChange(), ps); commentsUtil.putComments(ctx.getDb(), update, Status.DRAFT, java.util.Collections.singleton(com.google.gerrit.server.change.PutDraftComment.update(comment, in, ctx.getWhen()))); ctx.dontBumpLastUpdatedOn(); return true; }",6f2af69904174a18bdabf628561e1105b94e6e00,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.util.Optional<com.google.gerrit.reviewdb.client.Comment> maybeComment = commentsUtil.getDraft(ctx.getDb(), ctx.getNotes(), ctx.getIdentifiedUser(), key); if (!(maybeComment.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""comment not found: "" + (key))); } com.google.gerrit.reviewdb.client.Comment origComment = maybeComment.get(); comment = new com.google.gerrit.reviewdb.client.Comment(origComment); ctx.getUser().updateRealAccountId(comment::setRealAuthor); com.google.gerrit.reviewdb.client.PatchSet.Id psId = new com.google.gerrit.reviewdb.client.PatchSet.Id(ctx.getChange().getId(), origComment.key.patchSetId); com.google.gerrit.server.notedb.ChangeUpdate update = ctx.getUpdate(psId); com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.get(ctx.getDb(), ctx.getNotes(), psId); if (ps == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""patch set not found: "" + psId)); } if (((in.path) != null) && (!(in.path.equals(origComment.key.filename)))) { commentsUtil.deleteComments(ctx.getDb(), update, java.util.Collections.singleton(origComment)); comment.key.filename = in.path; } com.google.gerrit.server.CommentsUtil.setCommentRevId(comment, patchListCache, ctx.getChange(), ps); commentsUtil.putComments(ctx.getDb(), update, Status.DRAFT, java.util.Collections.singleton(com.google.gerrit.server.change.PutDraftComment.update(comment, in, ctx.getWhen()))); ctx.dontBumpLastUpdatedOn(); return true; }",79265807271dfbc05a7cef54e6e5ce7402f2b3be,2017-07-06 14:12:07,2
112730,gitiles-servlet_src_test_java_com_google_gitiles_doc_DocServletTest.java,"@org.junit.Test public void includesNavbar() throws java.lang.Exception { java.lang.String navbar = ""# Site Title\n"" + ((""\n"" + ""* [Home](index.md)\n"") + ""* [README](README.md)\n""); repo.branch(""master"").commit().add(""README.md"", ""# page\n\nof information."").add(""navbar.md"", navbar).create(); java.lang.String html = buildHtml(""/repo/+doc/master/README.md""); assertThat(html).contains(""<title>Site Title - page</title>""); assertThat(html).contains(""<span class=\""Header-anchorTitle\"">Site Title</span>""); assertThat(html).contains(""<li><a href=\""/b/repo/+/master/index.md\"">Home</a></li>""); assertThat(html).contains(""<li><a href=\""/b/repo/+/master/README.md\"">README</a></li>""); assertThat(html).contains((""<h1>"" + ((""<a class=\""h\"" name=\""page\"" href=\""#page\""><span></span></a>"" + ""<a class=\""h\"" name=\""page\"" href=\""#page\""><span></span></a>"") + ""page</h1>""))); }",3f34ef96cf012fc5d7c4969d341a6cbd72c8eaf2,"@org.junit.Test public void includesNavbar() throws java.lang.Exception { java.lang.String navbar = ""# Site Title\n"" + ((""\n"" + ""* [Home](index.md)\n"") + ""* [README](README.md)\n""); repo.branch(""master"").commit().add(""README.md"", ""# page\n\nof information."").add(""navbar.md"", navbar).create(); java.lang.String html = buildHtml(""/repo/+doc/master/README.md""); assertThat(html).contains(""<title>Site Title - page</title>""); assertThat(html).contains(""<span class=\""Header-anchorTitle\"">Site Title</span>""); assertThat(html).contains(""<li><a href=\""/b/repo/+/master/index.md\"">Home</a></li>""); assertThat(html).contains(""<li><a href=\""/b/repo/+/master/README.md\"">README</a></li>""); assertThat(html).contains((""<h1>"" + (""<a class=\""h\"" name=\""page\"" href=\""#page\""><span></span></a>"" + ""page</h1>""))); }",1a367976337bd9a86f0f6cd5c512a781e8e39ed1,"@org.junit.Test public void includesNavbar() throws java.lang.Exception { java.lang.String navbar = ""# Site Title\n"" + ((""\n"" + ""* [Home](index.md)\n"") + ""* [README](README.md)\n""); repo.branch(""master"").commit().add(""README.md"", ""# page\n\nof information."").add(""navbar.md"", navbar).create(); java.lang.String html = buildHtml(""/repo/+doc/master/README.md""); assertThat(html).contains(""<title>Site Title - page</title>""); assertThat(html).contains(""<span class=\""Header-anchorTitle\"">Site Title</span>""); assertThat(html).contains(""<li><a href=\""/b/repo/+/master/index.md\"">Home</a></li>""); assertThat(html).contains(""<li><a href=\""/b/repo/+/master/README.md\"">README</a></li>""); assertThat(html).contains(""<h1><a class=\""h\"" name=\""page\"" href=\""#page\""><span></span></a>page</h1>""); }",feb2235f073c21c13dfb519d4d1281c5c48be474,2017-07-07 11:23:40,3
112015,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_api_changes_ChangeApi.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,void setMessage(com.google.gerrit.extensions.common.MessageInput in) throws com.google.gerrit.extensions.restapi.RestApiException;,2b144663849524ba225bd0cf1f8f7f34bc95355e,void setMessage(com.google.gerrit.extensions.common.CommitMessageInput in) throws com.google.gerrit.extensions.restapi.RestApiException;,d574efff0999480bd68b139d9043c3834a68fd1e,2017-07-07 16:52:17,4
112015,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_ChangeNotificationsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void editCommitMessage(com.google.gerrit.acceptance.server.mail.StagedChange sc, com.google.gerrit.acceptance.TestAccount by, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.NotifyHandling notify, com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy emailStrategy) throws java.lang.Exception { setEmailStrategy(by, emailStrategy); com.google.gerrit.extensions.common.CommitInfo commit = gApi.changes().id(sc.changeId).revision(""current"").commit(false); com.google.gerrit.extensions.common.MessageInput in = new com.google.gerrit.extensions.common.MessageInput(); in.message = ""update\n"" + (commit.message); in.notify = notify; gApi.changes().id(sc.changeId).setMessage(in); }",a835875e82cad0b5ed5c05eca0b456c8885a1468,"private void editCommitMessage(com.google.gerrit.acceptance.server.mail.StagedChange sc, com.google.gerrit.acceptance.TestAccount by, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.NotifyHandling notify, com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy emailStrategy) throws java.lang.Exception { setEmailStrategy(by, emailStrategy); com.google.gerrit.extensions.common.CommitInfo commit = gApi.changes().id(sc.changeId).revision(""current"").commit(false); com.google.gerrit.extensions.common.CommitMessageInput in = new com.google.gerrit.extensions.common.CommitMessageInput(); in.message = ""update\n"" + (commit.message); in.notify = notify; gApi.changes().id(sc.changeId).setMessage(in); }",5b5cb54280592d531a58882f05a2b1b0ef925077,2017-07-07 16:52:17,4
112015,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangeApiImpl.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void setMessage(com.google.gerrit.extensions.common.MessageInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { putMessage.apply(change, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot edit commit message"", e); } }",7e702930cffe066ad1dec4cc566d864baf76c61b,"@java.lang.Override public void setMessage(com.google.gerrit.extensions.common.CommitMessageInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { putMessage.apply(change, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot edit commit message"", e); } }",70b44e850bd6d9825601d9001cbd1566090052e5,2017-07-07 16:52:17,4
112015,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_api_changes_ChangeApi.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void setMessage(com.google.gerrit.extensions.common.MessageInput in) { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); },9a1b241a85abfc13ff64fc0aaa57940abc351841,@java.lang.Override public void setMessage(com.google.gerrit.extensions.common.CommitMessageInput in) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); },283c93c349ceb9cd3f7ead8cb464a29e82677637,2017-07-07 16:52:17,4
112015,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangeApiImpl.java,"@java.lang.Override public void setMessage(java.lang.String in) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.change.PutMessage.Input input = new com.google.gerrit.server.change.PutMessage.Input(); input.message = in; putMessage.apply(change, input); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot edit commit message"", e); } }",3ddefa5bcb9a646d85b618c12e6a6e2ac0bad922,@java.lang.Override public void setMessage(java.lang.String msg) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.MessageInput in = new com.google.gerrit.extensions.common.MessageInput(); in.message = msg; setMessage(in); },20e8f0b319c03e6e03342654b31cd3ac2e52c838,@java.lang.Override public void setMessage(java.lang.String msg) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.CommitMessageInput in = new com.google.gerrit.extensions.common.CommitMessageInput(); in.message = msg; setMessage(in); },4908da9b7f13a229c7666d7dad7e8c0c13db1147,2017-07-07 16:52:17,4
112152,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_AbstractPushForReview.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void assertUploadTag(com.google.gerrit.server.query.change.ChangeData cd, java.lang.String expectedTag) throws java.lang.Exception { java.util.List<com.google.gerrit.reviewdb.client.ChangeMessage> msgs = cd.messages(); assertThat(msgs).isNotEmpty(); com.google.gerrit.reviewdb.client.ChangeMessage msg = msgs.get(((msgs.size()) - 1)); assertThat(msg.getTag()).isEqualTo(expectedTag); }",33528a91da0a630447345102b7cc519c29cdafaf,"private void assertUploadTag(com.google.gerrit.server.query.change.ChangeData cd, java.lang.String expectedTag) throws java.lang.Exception { java.util.List<com.google.gerrit.reviewdb.client.ChangeMessage> msgs = cd.messages(); assertThat(msgs).isNotEmpty(); assertThat(com.google.common.collect.Iterables.getLast(msgs).getTag()).isEqualTo(expectedTag); }",a6c16b00f3991847c4e5773f1bdd291ddd04e10a,2017-07-07 16:52:31,4
112152,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_AbstractPushForReview.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void tagForCreateWipChange() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createWorkInProgressChange(); r.assertOkStatus(); assertUploadTag(r.getChange(), ChangeMessagesUtil.TAG_UPLOADED_WIP_PATCH_SET); }",a352558d134ea26a1cea14727dd867a61c794800,"@org.junit.Test public void pushWorkInProgressChangeWhenNotOwner() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<?> userRepo = cloneProject(project, user); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, user.getIdent(), userRepo).to(""refs/for/master%wip""); r.assertOkStatus(); assertThat(r.getChange().change().getOwner()).isEqualTo(user.id); assertThat(r.getChange().change().isWorkInProgress()).isTrue(); com.google.gerrit.acceptance.GitUtil.fetch(testRepo, ((r.getPatchSet().getRefName()) + "":ps"")); testRepo.reset(""ps""); r = amendChange(r.getChangeId(), ""refs/for/master%ready"", admin, testRepo); r.assertErrorStatus(ReceiveCommits.ONLY_OWNER_CAN_MODIFY_WIP); r = amendChange(r.getChangeId(), ""refs/for/master%wip"", admin, testRepo); r.assertOkStatus(); assertThat(r.getChange().change().isWorkInProgress()).isTrue(); r = pushFactory.create(db, user.getIdent(), userRepo).to(""refs/for/master%ready""); r.assertOkStatus(); assertThat(r.getChange().change().isWorkInProgress()).isFalse(); com.google.gerrit.acceptance.GitUtil.fetch(testRepo, ((r.getPatchSet().getRefName()) + "":ps"")); testRepo.reset(""ps""); r = amendChange(r.getChangeId(), ""refs/for/master%wip"", admin, testRepo); r.assertErrorStatus(ReceiveCommits.ONLY_OWNER_CAN_MODIFY_WIP); r = amendChange(r.getChangeId(), ""refs/for/master%ready"", admin, testRepo); r.assertOkStatus(); }",e781176a1fb41f3029b6a80c81aec470520771dd,2017-07-07 16:52:31,4
112154,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void reviewAndStartReview() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createWorkInProgressChange(); r.assertOkStatus(); assertThat(r.getChange().change().isWorkInProgress()).isTrue(); com.google.gerrit.extensions.api.changes.ReviewInput in = com.google.gerrit.extensions.api.changes.ReviewInput.noScore().setWorkInProgress(false); in.ready = true; gApi.changes().id(r.getChangeId()).revision(""current"").review(in); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(r.getChangeId()).get(); assertThat(info.workInProgress).isNull(); }",2f177f64a097244a207c01ce060b3197d85852dc,"@org.junit.Test public void reviewAndStartReview() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createWorkInProgressChange(); r.assertOkStatus(); assertThat(r.getChange().change().isWorkInProgress()).isTrue(); com.google.gerrit.extensions.api.changes.ReviewInput in = com.google.gerrit.extensions.api.changes.ReviewInput.noScore().setWorkInProgress(false); gApi.changes().id(r.getChangeId()).revision(""current"").review(in); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(r.getChangeId()).get(); assertThat(info.workInProgress).isNull(); }",6e66e0acea03ef94330a187c5911be4d91cfae04,2017-07-07 16:52:47,4
111430,src_main_java_com_googlesource_gerrit_plugins_automerger_DownstreamCreator.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.List<java.lang.String> getChangeParents(com.google.gerrit.extensions.api.changes.ChangeApi change, java.lang.String currentRevision) throws com.google.gerrit.extensions.restapi.RestApiException { java.util.List<java.lang.String> parents = new java.util.ArrayList<>(); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> revisionMap = change.get(java.util.EnumSet.of(ListChangesOption.ALL_REVISIONS, ListChangesOption.CURRENT_COMMIT)).revisions; java.util.List<com.google.gerrit.extensions.common.CommitInfo> changeParents = revisionMap.get(currentRevision).commit.parents; for (com.google.gerrit.extensions.common.CommitInfo commit : changeParents) { parents.add(commit.commit); } return parents; }",9a6938f11e7fe817a012b2ab8b4efc2972734c43,"private java.util.List<java.lang.String> getChangeParents(int changeNumber, java.lang.String currentRevision) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.changes.ChangeApi change = gApi.changes().id(changeNumber); java.util.List<java.lang.String> parents = new java.util.ArrayList<>(); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> revisionMap = change.get(java.util.EnumSet.of(ListChangesOption.ALL_REVISIONS, ListChangesOption.CURRENT_COMMIT)).revisions; java.util.List<com.google.gerrit.extensions.common.CommitInfo> changeParents = revisionMap.get(currentRevision).commit.parents; for (com.google.gerrit.extensions.common.CommitInfo commit : changeParents) { parents.add(commit.commit); } return parents; }",be4074819cad41e3fdef26e0f50b112ca147dfd4,2017-07-07 19:18:24,7
111430,src_main_java_com_googlesource_gerrit_plugins_automerger_DownstreamCreator.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String getBaseChangeId(java.util.List<java.lang.String> parents, java.lang.String topic) throws com.google.gerrit.extensions.restapi.RestApiException, com.googlesource.gerrit.plugins.automerger.InvalidQueryParameterException { if ((parents.size()) == 0) { com.googlesource.gerrit.plugins.automerger.DownstreamCreator.log.info(""No base change id for change with no parents.""); return null; } java.util.List<ChangeInfo> changesInTopic = getChangesInTopic(topic); java.lang.String firstParent = parents.get(0); for (ChangeInfo change : changesInTopic) { java.util.List<com.google.gerrit.extensions.common.CommitInfo> topicChangeParents = change.revisions.get(change.currentRevision).commit.parents; if ((topicChangeParents.size()) > 1) { if (topicChangeParents.get(1).commit.equals(firstParent)) { return java.lang.String.valueOf(change._number); } } } return null; }",e5b0cce0a81d543b7488a2b2c4421dfe265432f1,"private java.lang.String getBaseChangeId(java.util.List<java.lang.String> parents, java.lang.String branch) throws com.google.gerrit.extensions.restapi.RestApiException, com.googlesource.gerrit.plugins.automerger.InvalidQueryParameterException { if ((parents.size()) == 0) { com.googlesource.gerrit.plugins.automerger.DownstreamCreator.log.info(""No base change id for change with no parents.""); return null; } java.lang.String firstParentTopic = getTopic(parents.get(0)); if (firstParentTopic == null) { return null; } java.util.List<ChangeInfo> changesInTopic = getChangesInTopicAndBranch(firstParentTopic, branch); java.lang.String firstParent = parents.get(0); for (ChangeInfo change : changesInTopic) { java.util.List<com.google.gerrit.extensions.common.CommitInfo> topicChangeParents = change.revisions.get(change.currentRevision).commit.parents; if (((topicChangeParents.size()) > 1) && (topicChangeParents.get(1).commit.equals(firstParent))) { return java.lang.String.valueOf(change._number); } } return null; }",f4ee4b1d0d665391ad2dd19cce637123ed48874f,2017-07-07 19:18:24,7
111430,src_main_java_com_googlesource_gerrit_plugins_automerger_DownstreamCreator.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.List<com.google.gerrit.extensions.common.ChangeInfo> getChangesInTopic(java.lang.String topic) throws com.google.gerrit.extensions.restapi.RestApiException, com.googlesource.gerrit.plugins.automerger.InvalidQueryParameterException { com.googlesource.gerrit.plugins.automerger.QueryBuilder queryBuilder = new com.googlesource.gerrit.plugins.automerger.QueryBuilder(); queryBuilder.addParameter(""topic"", topic); queryBuilder.addParameter(""status"", ""open""); return gApi.changes().query(queryBuilder.get()).withOptions(ListChangesOption.ALL_REVISIONS, ListChangesOption.CURRENT_COMMIT).get(); }",7da402851996e90065d1c39205f2b1043e401e78,"private java.lang.String getTopic(java.lang.String revision) throws com.google.gerrit.extensions.restapi.RestApiException, com.googlesource.gerrit.plugins.automerger.InvalidQueryParameterException { com.googlesource.gerrit.plugins.automerger.QueryBuilder queryBuilder = new com.googlesource.gerrit.plugins.automerger.QueryBuilder(); queryBuilder.addParameter(""commit"", revision); java.util.List<ChangeInfo> changes = gApi.changes().query(queryBuilder.get()).withOption(ListChangesOption.CURRENT_REVISION).get(); if ((changes.size()) > 0) { for (ChangeInfo change : changes) { if ((change.currentRevision.equals(revision)) && ((change.topic) != """")) { return change.topic; } } } return null; }",505c0d4a7de9b17b13fe65d8a9cfea46b9859feb,2017-07-07 19:18:24,7
112772,src_main_java_com_googlesource_gerrit_plugins_oauth_GoogleOAuthService.java,"@java.lang.Override public java.lang.String getAuthorizationUrl() { java.lang.String url = service.getAuthorizationUrl(null); try { if (!(com.google.common.base.Strings.isNullOrEmpty(domain))) { url += ""&hd="" + (java.net.URLEncoder.encode(domain, java.nio.charset.StandardCharsets.UTF_8.name())); } } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.IllegalArgumentException(e); } if (com.googlesource.gerrit.plugins.oauth.GoogleOAuthService.log.isDebugEnabled()) { com.googlesource.gerrit.plugins.oauth.GoogleOAuthService.log.debug(""OAuth2: authorization URL={}"", url); } return url; }",77268d6fcc0cd49ae2c919572429ec0acae456bb,"@java.lang.Override public java.lang.String getAuthorizationUrl() { java.lang.String url = service.getAuthorizationUrl(null); try { if ((domains.length) == 1) { url += ""&hd="" + (java.net.URLEncoder.encode(domains[0], java.nio.charset.StandardCharsets.UTF_8.name())); } else if ((domains.length) > 1) { url += ""&hd=*""; } } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.IllegalArgumentException(e); } if (com.googlesource.gerrit.plugins.oauth.GoogleOAuthService.log.isDebugEnabled()) { com.googlesource.gerrit.plugins.oauth.GoogleOAuthService.log.debug(""OAuth2: authorization URL={}"", url); } return url; }",af4d800ea97785710571227ef6b680f061178721,"@java.lang.Override public java.lang.String getAuthorizationUrl() { java.lang.String url = service.getAuthorizationUrl(null); try { if ((domains.size()) == 1) { url += ""&hd="" + (java.net.URLEncoder.encode(domains.get(0), java.nio.charset.StandardCharsets.UTF_8.name())); } else if ((domains.size()) > 1) { url += ""&hd=*""; } } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.IllegalArgumentException(e); } if (com.googlesource.gerrit.plugins.oauth.GoogleOAuthService.log.isDebugEnabled()) { com.googlesource.gerrit.plugins.oauth.GoogleOAuthService.log.debug(""OAuth2: authorization URL={}"", url); } return url; }",0f04d28e5cf420aa3d4af368d057b4e560bf375d,2017-07-09 05:48:14,3
112817,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_AbstractSubmit.java,"protected void assertRebase(org.eclipse.jgit.junit.TestRepository<?> testRepo, boolean contentMerge) throws java.lang.Exception { org.eclipse.jgit.lib.Repository repo = testRepo.getRepository(); org.eclipse.jgit.revwalk.RevCommit localHead = getHead(repo); org.eclipse.jgit.revwalk.RevCommit remoteHead = getRemoteHead(); assert_().withMessage(java.lang.String.format(""%s not equal %s"", localHead.name(), remoteHead.name())).that(localHead.getId()).isNotEqualTo(remoteHead.getId()); assertThat(remoteHead.getParentCount()).isEqualTo(1); if (!contentMerge) { assertThat(getLatestRemoteDiff()).isEqualTo(getLatestDiff(repo)); } assertThat(remoteHead.getShortMessage()).isEqualTo(localHead.getShortMessage()); }",de594345004192d9ea2272f24519dc2cb91bf435,"protected void assertRebase(org.eclipse.jgit.junit.TestRepository<?> testRepo, boolean contentMerge) throws java.lang.Exception { org.eclipse.jgit.lib.Repository repo = testRepo.getRepository(); org.eclipse.jgit.revwalk.RevCommit localHead = getHead(repo); org.eclipse.jgit.revwalk.RevCommit remoteHead = getRemoteHead(); assertWithMessage(java.lang.String.format(""%s not equal %s"", localHead.name(), remoteHead.name())).that(localHead.getId()).isNotEqualTo(remoteHead.getId()); assertThat(remoteHead.getParentCount()).isEqualTo(1); if (!contentMerge) { assertThat(getLatestRemoteDiff()).isEqualTo(getLatestDiff(repo)); } assertThat(remoteHead.getShortMessage()).isEqualTo(localHead.getShortMessage()); }",afc1010017ff12df3d981e8618c938393c88be9f,"protected void assertRebase(org.eclipse.jgit.junit.TestRepository<?> testRepo, boolean contentMerge) throws java.lang.Exception { org.eclipse.jgit.lib.Repository repo = testRepo.getRepository(); org.eclipse.jgit.revwalk.RevCommit localHead = getHead(repo); org.eclipse.jgit.revwalk.RevCommit remoteHead = getRemoteHead(); assertThat(localHead.getId()).isNotEqualTo(remoteHead.getId()); assertThat(remoteHead.getParentCount()).isEqualTo(1); if (!contentMerge) { assertThat(getLatestRemoteDiff()).isEqualTo(getLatestDiff(repo)); } assertThat(remoteHead.getShortMessage()).isEqualTo(localHead.getShortMessage()); }",4af031314ab4500a5bf54ca8213bbfb5f0ec8269,2017-07-10 10:58:21,2
112877,src_main_java_com_googlesource_gerrit_plugins_serverconfig_ServerConfigServlet.java,"private java.io.File resolveFile(javax.servlet.http.HttpServletRequest req) { return new java.io.File(site_path, ((req.getServletPath()) + (req.getPathInfo()))); }",a1123d542c6b602628927e3e265912dcf60abb26,private java.nio.file.Path resolvePath(javax.servlet.http.HttpServletRequest req) { return sitePaths.resolve(((req.getServletPath()) + (req.getPathInfo()))); },829742a9fa6cf17d9c7884e031038041c94ce8c6,private java.nio.file.Path resolvePath(javax.servlet.http.HttpServletRequest req) { return sitePaths.resolve(com.google.common.base.CharMatcher.is('/').trimLeadingFrom(((req.getServletPath()) + (req.getPathInfo())))); },f5c642965d613d8be54c115873d7d8f86558f4d5,2017-07-10 23:13:16,5
112225,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_SmtpEmailSender.java,"private void setMissingHeader(final java.util.Map<java.lang.String, com.google.gerrit.server.mail.send.EmailHeader> hdrs, java.lang.String name, java.lang.String value) { if ((!(hdrs.containsKey(name))) || (hdrs.get(name).isEmpty())) { hdrs.put(name, new com.google.gerrit.server.mail.send.EmailHeader.String(value)); } }",86f4ee9d4888836330c6b9d2bd076405ed832cc7,"private static void setMissingHeader(final java.util.Map<java.lang.String, com.google.gerrit.server.mail.send.EmailHeader> hdrs, java.lang.String name, java.lang.String value) { if ((!(hdrs.containsKey(name))) || (hdrs.get(name).isEmpty())) { hdrs.put(name, new com.google.gerrit.server.mail.send.EmailHeader.String(value)); } }",9edceeb71f515e6c4987f6038e51fd72c5aa61a7,"private static void setMissingHeader(java.util.Map<java.lang.String, com.google.gerrit.server.mail.send.EmailHeader> hdrs, java.lang.String name, java.lang.String value) { if ((!(hdrs.containsKey(name))) || (hdrs.get(name).isEmpty())) { hdrs.put(name, new com.google.gerrit.server.mail.send.EmailHeader.String(value)); } }",b2190cab62d9b22d1db10660c64910aa580a25cb,2017-07-11 06:41:05,3
112160,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_SmtpEmailSender.java,"protected java.lang.String buildMultipartBody(java.lang.String boundary, java.lang.String textPart, java.lang.String htmlPart) { return (((((((((((((((((""--"" + boundary) + ""\r\n"") + ""Content-Type: text/plain; charset=UTF-8\r\n"") + ""Content-Transfer-Encoding: 8bit\r\n"") + ""\r\n"") + textPart) + ""\r\n"") + ""--"") + boundary) + ""\r\n"") + ""Content-Type: text/html; charset=UTF-8\r\n"") + ""Content-Transfer-Encoding: 8bit\r\n"") + ""\r\n"") + htmlPart) + ""\r\n"") + ""--"") + boundary) + ""--\r\n""; }",ebc8bced1059d5c6c6f08fa0c06a66aa0e0c49f1,"protected java.lang.String buildMultipartBody(java.lang.String boundary, java.lang.String textPart, java.lang.String htmlPart) throws java.io.IOException { return (((((((((((((((((""--"" + boundary) + ""\r\n"") + ""Content-Type: text/plain; charset=UTF-8\r\n"") + ""Content-Transfer-Encoding: quoted-printable\r\n"") + ""\r\n"") + (quotedPrintableEncode(textPart))) + ""\r\n"") + ""--"") + boundary) + ""\r\n"") + ""Content-Type: text/html; charset=UTF-8\r\n"") + ""Content-Transfer-Encoding: quoted-printable\r\n"") + ""\r\n"") + (quotedPrintableEncode(htmlPart))) + ""\r\n"") + ""--"") + boundary) + ""--\r\n""; }",81106dfcd5b73cd406e901e58ee932ebb5901cc2,"protected java.lang.String buildMultipartBody(java.lang.String boundary, java.lang.String textPart, java.lang.String htmlPart) throws java.io.IOException { java.lang.String encodedTextPart = quotedPrintableEncode(textPart); java.lang.String encodedHtmlPart = quotedPrintableEncode(htmlPart); java.lang.String textTransferEncoding = (textPart.equals(encodedTextPart)) ? ""7bit"" : ""quoted-printable""; java.lang.String htmlTransferEncoding = (htmlPart.equals(encodedHtmlPart)) ? ""7bit"" : ""quoted-printable""; return (((((((((((((((((((((""--"" + boundary) + ""\r\n"") + ""Content-Type: text/plain; charset=UTF-8\r\n"") + ""Content-Transfer-Encoding: "") + textTransferEncoding) + ""\r\n"") + ""\r\n"") + encodedTextPart) + ""\r\n"") + ""--"") + boundary) + ""\r\n"") + ""Content-Type: text/html; charset=UTF-8\r\n"") + ""Content-Transfer-Encoding: "") + htmlTransferEncoding) + ""\r\n"") + ""\r\n"") + encodedHtmlPart) + ""\r\n"") + ""--"") + boundary) + ""--\r\n""; }",1a6e62fabef3d82f89c27bc83b178683595411d1,2017-07-11 06:41:05,6
112160,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_SmtpEmailSender.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected java.lang.String quotedPrintableEncode(java.lang.String input) throws java.io.IOException { java.io.ByteArrayOutputStream s = new java.io.ByteArrayOutputStream(); org.apache.james.mime4j.codec.QuotedPrintableOutputStream qp = new org.apache.james.mime4j.codec.QuotedPrintableOutputStream(s, false); qp.write(input.getBytes(java.nio.charset.StandardCharsets.UTF_8)); qp.close(); return s.toString(); }",be98eb27f8600b34135dcacfe8362d4cea5b51d2,"protected java.lang.String quotedPrintableEncode(java.lang.String input) throws java.io.IOException { java.io.ByteArrayOutputStream s = new java.io.ByteArrayOutputStream(); try (org.apache.james.mime4j.codec.QuotedPrintableOutputStream qp = new org.apache.james.mime4j.codec.QuotedPrintableOutputStream(s, false)) { qp.write(input.getBytes(java.nio.charset.StandardCharsets.UTF_8)); } return s.toString(); }",c355794b7a10f148b85b453d2dd82314b79cc0df,2017-07-11 06:41:05,6
111530,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectJson.java,public com.google.gerrit.extensions.common.ProjectInfo format(com.google.gerrit.reviewdb.client.Project p) { com.google.gerrit.extensions.common.ProjectInfo info = new com.google.gerrit.extensions.common.ProjectInfo(); info.name = p.getName(); com.google.gerrit.reviewdb.client.Project.NameKey parentName = p.getParent(allProjects); info.parent = (parentName != null) ? parentName.get() : null; info.description = com.google.common.base.Strings.emptyToNull(p.getDescription()); info.state = p.getState(); info.id = com.google.gerrit.extensions.restapi.Url.encode(info.name); java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getProjectLinks(p.getName()); info.webLinks = (links.isEmpty()) ? null : links; return info; },bdf0ae2e58dabf4e2b2c69e3f2c6a607353b656a,"public com.google.gerrit.extensions.common.ProjectInfo format(com.google.gerrit.reviewdb.client.Project p) { java.lang.System.err.println(""fmt""); com.google.gerrit.extensions.common.ProjectInfo info = new com.google.gerrit.extensions.common.ProjectInfo(); info.name = p.getName(); com.google.gerrit.reviewdb.client.Project.NameKey parentName = p.getParent(allProjects); info.parent = (parentName != null) ? parentName.get() : null; info.description = com.google.common.base.Strings.emptyToNull(p.getDescription()); info.state = p.getState(); info.id = com.google.gerrit.extensions.restapi.Url.encode(info.name); java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getProjectLinks(p.getName()); info.webLinks = (links.isEmpty()) ? null : links; return info; }",b579b69062e04233e09d16c135e4eedd61ce2651,public com.google.gerrit.extensions.common.ProjectInfo format(com.google.gerrit.reviewdb.client.Project p) { com.google.gerrit.extensions.common.ProjectInfo info = new com.google.gerrit.extensions.common.ProjectInfo(); info.name = p.getName(); com.google.gerrit.reviewdb.client.Project.NameKey parentName = p.getParent(allProjects); info.parent = (parentName != null) ? parentName.get() : null; info.description = com.google.common.base.Strings.emptyToNull(p.getDescription()); info.state = p.getState(); info.id = com.google.gerrit.extensions.restapi.Url.encode(info.name); java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getProjectLinks(p.getName()); info.webLinks = (links.isEmpty()) ? null : links; return info; },bdf0ae2e58dabf4e2b2c69e3f2c6a607353b656a,2017-07-11 15:31:04,11
111530,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectJson.java,public com.google.gerrit.extensions.common.ProjectInfo format(com.google.gerrit.server.project.ProjectResource rsrc) { return format(rsrc.getControl().getProject()); },14e11e660a59a49d05f2966445bc80830bd6c032,"public com.google.gerrit.extensions.common.ProjectInfo format(com.google.gerrit.server.project.ProjectResource rsrc) { java.lang.System.err.println(""fmt prsrc""); com.google.gerrit.server.project.ProjectControl ctl = rsrc.getControl(); com.google.gerrit.extensions.common.ProjectInfo info = format(ctl.getProject()); info.labels = new java.util.TreeMap(); for (com.google.gerrit.common.data.LabelType t : ctl.getLabelTypes().getLabelTypes()) { com.google.gerrit.extensions.common.ProjectInfo.LabelInfo labelInfo = new com.google.gerrit.extensions.common.ProjectInfo.LabelInfo(); for (com.google.gerrit.common.data.LabelValue value : t.getValues()) { labelInfo.values.put(new java.lang.Integer(value.getValue()), value.getText()); } info.labels.put(t.getName(), labelInfo); } return info; }",468e4056ffe2ee995a80532642ed4052f44b1bc0,"public com.google.gerrit.extensions.common.ProjectInfo format(com.google.gerrit.server.project.ProjectControl ctl) { com.google.gerrit.extensions.common.ProjectInfo info = format(ctl.getProject()); info.labels = new java.util.HashMap(); for (com.google.gerrit.common.data.LabelType t : ctl.getLabelTypes().getLabelTypes()) { com.google.gerrit.extensions.common.LabelTypeInfo labelInfo = new com.google.gerrit.extensions.common.LabelTypeInfo(); labelInfo.values = t.getValues().stream().collect(java.util.stream.Collectors.toMap(LabelValue::formatValue, LabelValue::getText)); labelInfo.defaultValue = t.getDefaultValue(); info.labels.put(t.getName(), labelInfo); } return info; }",66594e8a8940e8e46e264cb32045c919f05e9aea,2017-07-11 15:31:04,11
113216,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_GerritServer.java,"public static com.google.gerrit.acceptance.GerritServer initAndStart(com.google.gerrit.acceptance.GerritServer.Description desc, org.eclipse.jgit.lib.Config baseConfig) throws java.lang.Exception { if (!(desc.memory())) { assume().withMessage(""FUSED mode not yet supported for on-disk sites"").that(com.google.gerrit.testutil.NoteDbMode.get()).isNotEqualTo(NoteDbMode.FUSED); } java.nio.file.Path site = java.nio.file.Paths.get(baseConfig.getString(""gerrit"", null, ""tempSiteDir"")); if (!(desc.memory())) { com.google.gerrit.acceptance.GerritServer.init(desc, baseConfig, site); } return com.google.gerrit.acceptance.GerritServer.start(desc, baseConfig, site, null); }",54bc23702dafaa0382555fa7cd8676cbb45ffbfd,"public static com.google.gerrit.acceptance.GerritServer initAndStart(com.google.gerrit.acceptance.GerritServer.Description desc, org.eclipse.jgit.lib.Config baseConfig) throws java.lang.Exception { if (!(desc.memory())) { assume().withMessage(""FUSED mode not yet supported for on-disk sites"").that(com.google.gerrit.testutil.NoteDbMode.get()).isNotEqualTo(NoteDbMode.FUSED); } java.nio.file.Path site = com.google.gerrit.testutil.TempFileUtil.createTempDirectory().toPath(); baseConfig = new org.eclipse.jgit.lib.Config(baseConfig); baseConfig.setString(""gerrit"", null, ""tempSiteDir"", site.toString()); try { if (!(desc.memory())) { com.google.gerrit.acceptance.GerritServer.init(desc, baseConfig, site); } return com.google.gerrit.acceptance.GerritServer.start(desc, baseConfig, site, null); } catch (java.lang.Exception e) { com.google.gerrit.testutil.TempFileUtil.recursivelyDelete(site.toFile()); throw e; } }",0155683d13297180af49c062a6b17cb33a25698d,"public static com.google.gerrit.acceptance.GerritServer initAndStart(com.google.gerrit.acceptance.GerritServer.Description desc, org.eclipse.jgit.lib.Config baseConfig) throws java.lang.Exception { java.nio.file.Path site = com.google.gerrit.testutil.TempFileUtil.createTempDirectory().toPath(); baseConfig = new org.eclipse.jgit.lib.Config(baseConfig); baseConfig.setString(""gerrit"", null, ""tempSiteDir"", site.toString()); try { if (!(desc.memory())) { com.google.gerrit.acceptance.GerritServer.init(desc, baseConfig, site); } return com.google.gerrit.acceptance.GerritServer.start(desc, baseConfig, site, null); } catch (java.lang.Exception e) { com.google.gerrit.testutil.TempFileUtil.recursivelyDelete(site.toFile()); throw e; } }",cc024c993065c9515b4e59afe7a091a298c8303a,2017-07-13 14:34:50,2
113471,gerrit-server_src_main_java_com_google_gerrit_server_notedb_AbstractChangeNotes.java,public org.eclipse.jgit.lib.ObjectId loadRevision() throws com.google.gwtorm.server.OrmException { if (loaded) { return getRevision(); } else if (!(args.migration.enabled())) { return null; } try (org.eclipse.jgit.lib.Repository repo = args.repoManager.openRepository(getProjectName())) { org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(getRefName()); return ref != null ? ref.getObjectId() : null; } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } },867dad255d3026d51216849c1c78368aa2ebde71,public org.eclipse.jgit.lib.ObjectId loadRevision() throws com.google.gwtorm.server.OrmException { if (loaded) { return getRevision(); } else if (!(args.migration.commitChangeWrites())) { return null; } try (org.eclipse.jgit.lib.Repository repo = args.repoManager.openRepository(getProjectName())) { org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(getRefName()); return ref != null ? ref.getObjectId() : null; } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } },a2f9ec55c83b52eb1b022cb918c8cecf64b982c0,public org.eclipse.jgit.lib.ObjectId loadRevision() throws com.google.gwtorm.server.OrmException { if (loaded) { return getRevision(); } else if (!(args.migration.readChanges())) { return null; } try (org.eclipse.jgit.lib.Repository repo = args.repoManager.openRepository(getProjectName())) { org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(getRefName()); return ref != null ? ref.getObjectId() : null; } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } },01cd5387da57eb5f1a612cb5820b2590fc232d41,2017-07-17 07:34:54,2
112711,gerrit-server_src_main_java_com_google_gerrit_server_Sequences.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.common.collect.ImmutableList<java.lang.Integer> nextAccountIds(int count) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.metrics.Timer2.Context timer = nextIdLatency.start(com.google.gerrit.server.Sequences.SequenceType.ACCOUNTS, (count > 1))) { return accountSeq.next(count); } }",9e3bcc1a58e58a8acfe83a08ebe03d50a731e1b2,"@java.lang.SuppressWarnings(""deprecation"") private static int nextAccountId(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { return db.nextAccountId(); }",f31e1dab16e7e24666789cf0f14d3b5e591e9fe1,2017-07-17 08:56:54,10
112711,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_server_ReviewDb.java,@com.google.gwtorm.server.Sequence(startWith = 1000000) int nextAccountId() throws com.google.gwtorm.server.OrmException;,303c6579b78923dd5ad1c11e4544410929624f65,@com.google.gwtorm.server.Sequence(startWith = com.google.gerrit.reviewdb.server.ReviewDb.FIRST_ACCOUNT_ID) int nextAccountId() throws com.google.gwtorm.server.OrmException;,860bc757da59a254b051fcc8bb6ce93b369f3af6,@com.google.gwtorm.server.Sequence(startWith = com.google.gerrit.reviewdb.server.ReviewDb.FIRST_ACCOUNT_ID) @java.lang.Deprecated int nextAccountId() throws com.google.gwtorm.server.OrmException;,ea4ce117dbf135c99ea614821dd6cbf44f05d45e,2017-07-17 08:56:54,10
112711,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_api_SequencesOnInit.java,,,"public int nextAccountId() throws com.google.gwtorm.server.OrmException { if ((accountSeq) == null) { accountSeq = new com.google.gerrit.server.notedb.RepoSequence(repoManager, new com.google.gerrit.reviewdb.client.Project.NameKey(allUsersName.get()), com.google.gerrit.server.Sequences.NAME_ACCOUNTS, () -> ReviewDb.FIRST_ACCOUNT_ID, 1); } return accountSeq.next(); }",a46a86d3985f70db5ad7562f2ecbf0d585764cb6,"public int nextAccountId(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { @java.lang.SuppressWarnings(""deprecation"") com.google.gerrit.server.notedb.RepoSequence.Seed accountSeed = () -> db.nextAccountId(); com.google.gerrit.server.notedb.RepoSequence accountSeq = new com.google.gerrit.server.notedb.RepoSequence(repoManager, new com.google.gerrit.reviewdb.client.Project.NameKey(allUsersName.get()), com.google.gerrit.server.Sequences.NAME_ACCOUNTS, accountSeed, 1); return accountSeq.next(); }",d48297703ee8755f459cfaf3461bba4f1969baad,2017-07-17 08:56:54,10
114110,gerrit-server_src_main_java_com_google_gerrit_server_patch_PatchListCacheImpl.java,"@java.lang.Override public com.google.gerrit.server.patch.PatchList get(com.google.gerrit.server.patch.PatchListKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.patch.PatchListNotAvailableException { try { com.google.gerrit.server.patch.PatchList pl = fileCache.get(key, fileLoaderFactory.create(key, project)); if ((key.getAlgorithm()) == (PatchListKey.Algorithm.OPTIMIZED_DIFF)) { diffSummaryCache.put(com.google.gerrit.server.patch.DiffSummaryKey.fromPatchListKey(key), com.google.gerrit.server.patch.DiffSummaryLoader.toDiffSummary(pl)); } return pl; } catch (java.util.concurrent.ExecutionException e) { PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.patch.PatchListNotAvailableException(e); } catch (com.google.common.util.concurrent.UncheckedExecutionException e) { if ((e.getCause()) instanceof org.eclipse.jgit.errors.LargeObjectException) { PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.patch.PatchListNotAvailableException(e); } throw e; } }",10b57d92b3ee39d22145c43a44bc9d3b29ca0e14,"@java.lang.Override public com.google.gerrit.server.patch.PatchList get(com.google.gerrit.server.patch.PatchListKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.patch.PatchListNotAvailableException { try { com.google.gerrit.server.patch.PatchList pl = fileCache.get(key, fileLoaderFactory.create(key, project)); if (pl instanceof com.google.gerrit.server.patch.PatchListCacheImpl.PatchListTombstone) { throw new com.google.gerrit.server.patch.PatchListNotAvailableException(((""Error computing "" + key) + "". Previous attempt failed with LargeObjectException"")); } if ((key.getAlgorithm()) == (PatchListKey.Algorithm.OPTIMIZED_DIFF)) { diffSummaryCache.put(com.google.gerrit.server.patch.DiffSummaryKey.fromPatchListKey(key), com.google.gerrit.server.patch.DiffSummaryLoader.toDiffSummary(pl)); } return pl; } catch (java.util.concurrent.ExecutionException e) { PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.patch.PatchListNotAvailableException(e); } catch (com.google.common.util.concurrent.UncheckedExecutionException e) { if ((e.getCause()) instanceof org.eclipse.jgit.errors.LargeObjectException) { fileCache.put(key, new com.google.gerrit.server.patch.PatchListCacheImpl.PatchListTombstone()); PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.patch.PatchListNotAvailableException(e); } throw e; } }",5760aa598d070c275f473fb491f68eb9bc320b49,"@java.lang.Override public com.google.gerrit.server.patch.PatchList get(com.google.gerrit.server.patch.PatchListKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.patch.PatchListNotAvailableException { try { com.google.gerrit.server.patch.PatchList pl = fileCache.get(key, fileLoaderFactory.create(key, project)); if (pl instanceof com.google.gerrit.server.patch.PatchListCacheImpl.LargeObjectTombstone) { throw new com.google.gerrit.server.patch.PatchListNotAvailableException(((""Error computing "" + key) + "". Previous attempt failed with LargeObjectException"")); } if ((key.getAlgorithm()) == (PatchListKey.Algorithm.OPTIMIZED_DIFF)) { diffSummaryCache.put(com.google.gerrit.server.patch.DiffSummaryKey.fromPatchListKey(key), com.google.gerrit.server.patch.DiffSummaryLoader.toDiffSummary(pl)); } return pl; } catch (java.util.concurrent.ExecutionException e) { PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.patch.PatchListNotAvailableException(e); } catch (com.google.common.util.concurrent.UncheckedExecutionException e) { if ((e.getCause()) instanceof org.eclipse.jgit.errors.LargeObjectException) { fileCache.put(key, new com.google.gerrit.server.patch.PatchListCacheImpl.LargeObjectTombstone()); PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.patch.PatchListNotAvailableException(e); } throw e; } }",cd57072625430c23da967ecfdb079b40cad26081,2017-07-19 08:00:17,4
113930,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeSuperSet.java,"private com.google.gerrit.extensions.client.SubmitType submitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet ps, boolean visible) throws com.google.gwtorm.server.OrmException { if (!visible) { return cd.changeControl().getProject().getSubmitType(); } com.google.gerrit.common.data.SubmitTypeRecord str = (ps == (cd.currentPatchSet())) ? cd.submitTypeRecord() : new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, cd).setPatchSet(ps).getSubmitType(); if (!(str.isOk())) { logErrorAndThrow((((""Failed to get submit type for "" + (cd.getId())) + "": "") + (str.errorMessage))); } return str.type; }",1f01deaf400ed6ce9ef3674932cf9ee82b4459a0,"private com.google.gerrit.extensions.client.SubmitType submitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet ps, boolean visible) throws com.google.gwtorm.server.OrmException { if (!visible) { return cd.changeControl().getProject().getSubmitType(); } com.google.gerrit.common.data.SubmitTypeRecord str = (ps == (cd.currentPatchSet())) ? cd.submitTypeRecord() : new com.google.gerrit.server.project.SubmitRuleEvaluator(accountByEmailCache, accountCache, cd).setPatchSet(ps).getSubmitType(); if (!(str.isOk())) { logErrorAndThrow((((""Failed to get submit type for "" + (cd.getId())) + "": "") + (str.errorMessage))); } return str.type; }",f04a0d68be54e6a3df490b6372ac5789cc80225f,"private com.google.gerrit.extensions.client.SubmitType submitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet ps, boolean visible) throws com.google.gwtorm.server.OrmException { if (!visible) { return cd.changeControl().getProject().getSubmitType(); } com.google.gerrit.common.data.SubmitTypeRecord str = (ps == (cd.currentPatchSet())) ? cd.submitTypeRecord() : new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, cd).setPatchSet(ps).getSubmitType(); if (!(str.isOk())) { logErrorAndThrow((((""Failed to get submit type for "" + (cd.getId())) + "": "") + (str.errorMessage))); } return str.type; }",23eac4efd239d1b00f4afd9240b386a336be9ab7,2017-07-19 12:49:36,3
113930,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public java.util.List<com.google.gerrit.common.data.SubmitRecord> submitRecords(com.google.gerrit.server.project.SubmitRuleOptions options) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.common.data.SubmitRecord> records = submitRecords.get(options); if (records == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } records = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, this).setOptions(options).evaluate(); submitRecords.put(options, records); } return records; }",f0d9a517cc01367c9d2787c6445e69e01bce921f,"public java.util.List<com.google.gerrit.common.data.SubmitRecord> submitRecords(com.google.gerrit.server.project.SubmitRuleOptions options) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.common.data.SubmitRecord> records = submitRecords.get(options); if (records == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } records = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountByEmailCache, accountCache, this).setOptions(options).evaluate(); submitRecords.put(options, records); } return records; }",cc58307f5dc9c290dd7dae7e77c175510f525130,"public java.util.List<com.google.gerrit.common.data.SubmitRecord> submitRecords(com.google.gerrit.server.project.SubmitRuleOptions options) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.common.data.SubmitRecord> records = submitRecords.get(options); if (records == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } records = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, this).setOptions(options).evaluate(); submitRecords.put(options, records); } return records; }",1d1f7b8ba6b8ba33ee236fa7774c34adc5256ded,2017-07-19 12:49:36,3
113930,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord() throws com.google.gwtorm.server.OrmException { if ((submitTypeRecord) == null) { submitTypeRecord = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, this).getSubmitType(); } return submitTypeRecord; }",58254c35460e9fbc89576832c0c6cc5038c18129,"public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord() throws com.google.gwtorm.server.OrmException { if ((submitTypeRecord) == null) { submitTypeRecord = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountByEmailCache, accountCache, this).getSubmitType(); } return submitTypeRecord; }",1eb931ea04ee2a8ebd7a56ebc4a0d6575f02844b,"public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord() throws com.google.gwtorm.server.OrmException { if ((submitTypeRecord) == null) { submitTypeRecord = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, this).getSubmitType(); } return submitTypeRecord; }",e4b7353ed5e260ed2427631b748f3ba78deb1dfb,2017-07-19 12:49:36,3
113930,gerrit-server_src_main_java_com_google_gerrit_server_change_ReviewerJson.java,"public ReviewerInfo format(ReviewerInfo out, com.google.gerrit.server.permissions.PermissionBackend.ForChange perm, com.google.gerrit.server.query.change.ChangeData cd, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = cd.getLabelTypes(); out.approvals = new java.util.TreeMap(labelTypes.nameComparator()); for (com.google.gerrit.reviewdb.client.PatchSetApproval ca : approvals) { for (com.google.gerrit.common.data.PermissionRange pr : cd.changeControl().getLabelRanges()) { if (!(pr.isEmpty())) { com.google.gerrit.common.data.LabelType at = labelTypes.byLabel(ca.getLabelId()); if (at != null) { out.approvals.put(at.getName(), formatValue(ca.getValue())); } } } } com.google.gerrit.reviewdb.client.PatchSet ps = cd.currentPatchSet(); if (ps != null) { for (com.google.gerrit.common.data.SubmitRecord rec : new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, cd).setFastEvalLabels(true).setAllowDraft(true).evaluate()) { if ((rec.labels) == null) { continue; } for (com.google.gerrit.common.data.SubmitRecord.Label label : rec.labels) { java.lang.String name = label.label; com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(name); if (((!(out.approvals.containsKey(name))) && (type != null)) && (perm.test(new com.google.gerrit.server.permissions.LabelPermission(type)))) { out.approvals.put(name, formatValue(((short) (0)))); } } } } if (out.approvals.isEmpty()) { out.approvals = null; } return out; }",3a547469f584547ccc9375ef50d5272cf1a7fd6b,"public ReviewerInfo format(ReviewerInfo out, com.google.gerrit.server.permissions.PermissionBackend.ForChange perm, com.google.gerrit.server.query.change.ChangeData cd, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = cd.getLabelTypes(); out.approvals = new java.util.TreeMap(labelTypes.nameComparator()); for (com.google.gerrit.reviewdb.client.PatchSetApproval ca : approvals) { for (com.google.gerrit.common.data.PermissionRange pr : cd.changeControl().getLabelRanges()) { if (!(pr.isEmpty())) { com.google.gerrit.common.data.LabelType at = labelTypes.byLabel(ca.getLabelId()); if (at != null) { out.approvals.put(at.getName(), formatValue(ca.getValue())); } } } } com.google.gerrit.reviewdb.client.PatchSet ps = cd.currentPatchSet(); if (ps != null) { for (com.google.gerrit.common.data.SubmitRecord rec : new com.google.gerrit.server.project.SubmitRuleEvaluator(accountByEmailCache, accountCache, cd).setFastEvalLabels(true).setAllowDraft(true).evaluate()) { if ((rec.labels) == null) { continue; } for (com.google.gerrit.common.data.SubmitRecord.Label label : rec.labels) { java.lang.String name = label.label; com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(name); if (((!(out.approvals.containsKey(name))) && (type != null)) && (perm.test(new com.google.gerrit.server.permissions.LabelPermission(type)))) { out.approvals.put(name, formatValue(((short) (0)))); } } } } if (out.approvals.isEmpty()) { out.approvals = null; } return out; }",931c1bdd2951f2da41a21170b7a6f4ff5b77c0eb,"public ReviewerInfo format(ReviewerInfo out, com.google.gerrit.server.permissions.PermissionBackend.ForChange perm, com.google.gerrit.server.query.change.ChangeData cd, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = cd.getLabelTypes(); out.approvals = new java.util.TreeMap(labelTypes.nameComparator()); for (com.google.gerrit.reviewdb.client.PatchSetApproval ca : approvals) { for (com.google.gerrit.common.data.PermissionRange pr : cd.changeControl().getLabelRanges()) { if (!(pr.isEmpty())) { com.google.gerrit.common.data.LabelType at = labelTypes.byLabel(ca.getLabelId()); if (at != null) { out.approvals.put(at.getName(), formatValue(ca.getValue())); } } } } com.google.gerrit.reviewdb.client.PatchSet ps = cd.currentPatchSet(); if (ps != null) { for (com.google.gerrit.common.data.SubmitRecord rec : new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, cd).setFastEvalLabels(true).setAllowDraft(true).evaluate()) { if ((rec.labels) == null) { continue; } for (com.google.gerrit.common.data.SubmitRecord.Label label : rec.labels) { java.lang.String name = label.label; com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(name); if (((!(out.approvals.containsKey(name))) && (type != null)) && (perm.test(new com.google.gerrit.server.permissions.LabelPermission(type)))) { out.approvals.put(name, formatValue(((short) (0)))); } } } } if (out.approvals.isEmpty()) { out.approvals = null; } return out; }",2135a38f9a6cb1043a72124ae427e4bb92daddc8,2017-07-19 12:49:36,3
113930,gerrit-server_src_main_java_com_google_gerrit_server_change_TestSubmitType.java,"@java.lang.Override public com.google.gerrit.extensions.client.SubmitType apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.common.TestSubmitRuleInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.extensions.common.TestSubmitRuleInput(); } if (((input.rule) != null) && (!(rules.isProjectRulesEnabled()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""project rules are disabled""); } input.filters = com.google.common.base.MoreObjects.firstNonNull(input.filters, filters); com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, changeDataFactory.create(db.get(), rsrc.getControl())); com.google.gerrit.common.data.SubmitTypeRecord rec = evaluator.setPatchSet(rsrc.getPatchSet()).setLogErrors(false).setSkipSubmitFilters(((input.filters) == (com.google.gerrit.extensions.common.TestSubmitRuleInput.Filters.SKIP))).setRule(input.rule).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""rule %s produced invalid result: %s"", evaluator.getSubmitRuleName(), rec)); } return rec.type; }",8789702a7580dd4d572cd105b805b70a12dc5c2d,"@java.lang.Override public com.google.gerrit.extensions.client.SubmitType apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.common.TestSubmitRuleInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.extensions.common.TestSubmitRuleInput(); } if (((input.rule) != null) && (!(rules.isProjectRulesEnabled()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""project rules are disabled""); } input.filters = com.google.common.base.MoreObjects.firstNonNull(input.filters, filters); com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountByEmailCache, accountCache, changeDataFactory.create(db.get(), rsrc.getControl())); com.google.gerrit.common.data.SubmitTypeRecord rec = evaluator.setPatchSet(rsrc.getPatchSet()).setLogErrors(false).setSkipSubmitFilters(((input.filters) == (com.google.gerrit.extensions.common.TestSubmitRuleInput.Filters.SKIP))).setRule(input.rule).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""rule %s produced invalid result: %s"", evaluator.getSubmitRuleName(), rec)); } return rec.type; }",dad09cb8c2a9bdb3096d0a2b505aee4b833776ed,"@java.lang.Override public com.google.gerrit.extensions.client.SubmitType apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.common.TestSubmitRuleInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.extensions.common.TestSubmitRuleInput(); } if (((input.rule) != null) && (!(rules.isProjectRulesEnabled()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""project rules are disabled""); } input.filters = com.google.common.base.MoreObjects.firstNonNull(input.filters, filters); com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, changeDataFactory.create(db.get(), rsrc.getControl())); com.google.gerrit.common.data.SubmitTypeRecord rec = evaluator.setPatchSet(rsrc.getPatchSet()).setLogErrors(false).setSkipSubmitFilters(((input.filters) == (com.google.gerrit.extensions.common.TestSubmitRuleInput.Filters.SKIP))).setRule(input.rule).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""rule %s produced invalid result: %s"", evaluator.getSubmitRuleName(), rec)); } return rec.type; }",b34481c505864bce4112f1d722a14ff53ce99682,2017-07-19 12:49:36,3
113930,gerrit-server_src_main_java_com_google_gerrit_server_change_TestSubmitRule.java,"@java.lang.Override public java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.common.TestSubmitRuleInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.extensions.common.TestSubmitRuleInput(); } if (((input.rule) != null) && (!(rules.isProjectRulesEnabled()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""project rules are disabled""); } input.filters = com.google.common.base.MoreObjects.firstNonNull(input.filters, filters); com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, changeDataFactory.create(db.get(), rsrc.getControl())); java.util.List<com.google.gerrit.common.data.SubmitRecord> records = evaluator.setPatchSet(rsrc.getPatchSet()).setLogErrors(false).setSkipSubmitFilters(((input.filters) == (com.google.gerrit.extensions.common.TestSubmitRuleInput.Filters.SKIP))).setRule(input.rule).evaluate(); java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> out = com.google.common.collect.Lists.newArrayListWithCapacity(records.size()); com.google.gerrit.server.account.AccountLoader accounts = accountInfoFactory.create(true); for (com.google.gerrit.common.data.SubmitRecord r : records) { out.add(new com.google.gerrit.server.change.TestSubmitRule.Record(r, accounts)); } if (!(out.isEmpty())) { out.get(0).prologReductionCount = evaluator.getReductionsConsumed(); } accounts.fill(); return out; }",3c07c0ceab8d028ce53cd4f1bd0e507de464696a,"@java.lang.Override public java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.common.TestSubmitRuleInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.extensions.common.TestSubmitRuleInput(); } if (((input.rule) != null) && (!(rules.isProjectRulesEnabled()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""project rules are disabled""); } input.filters = com.google.common.base.MoreObjects.firstNonNull(input.filters, filters); com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountByEmailCache, accountCache, changeDataFactory.create(db.get(), rsrc.getControl())); java.util.List<com.google.gerrit.common.data.SubmitRecord> records = evaluator.setPatchSet(rsrc.getPatchSet()).setLogErrors(false).setSkipSubmitFilters(((input.filters) == (com.google.gerrit.extensions.common.TestSubmitRuleInput.Filters.SKIP))).setRule(input.rule).evaluate(); java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> out = com.google.common.collect.Lists.newArrayListWithCapacity(records.size()); com.google.gerrit.server.account.AccountLoader accounts = accountInfoFactory.create(true); for (com.google.gerrit.common.data.SubmitRecord r : records) { out.add(new com.google.gerrit.server.change.TestSubmitRule.Record(r, accounts)); } if (!(out.isEmpty())) { out.get(0).prologReductionCount = evaluator.getReductionsConsumed(); } accounts.fill(); return out; }",76af47e3c9b066c15f5083034b03982e5e6f3d0c,"@java.lang.Override public java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.common.TestSubmitRuleInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.extensions.common.TestSubmitRuleInput(); } if (((input.rule) != null) && (!(rules.isProjectRulesEnabled()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""project rules are disabled""); } input.filters = com.google.common.base.MoreObjects.firstNonNull(input.filters, filters); com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, changeDataFactory.create(db.get(), rsrc.getControl())); java.util.List<com.google.gerrit.common.data.SubmitRecord> records = evaluator.setPatchSet(rsrc.getPatchSet()).setLogErrors(false).setSkipSubmitFilters(((input.filters) == (com.google.gerrit.extensions.common.TestSubmitRuleInput.Filters.SKIP))).setRule(input.rule).evaluate(); java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> out = com.google.common.collect.Lists.newArrayListWithCapacity(records.size()); com.google.gerrit.server.account.AccountLoader accounts = accountInfoFactory.create(true); for (com.google.gerrit.common.data.SubmitRecord r : records) { out.add(new com.google.gerrit.server.change.TestSubmitRule.Record(r, accounts)); } if (!(out.isEmpty())) { out.get(0).prologReductionCount = evaluator.getReductionsConsumed(); } accounts.fill(); return out; }",bb876a756fee42a4ea345f0355e3d978232f39b0,2017-07-19 12:49:36,3
113930,gerrit-server_src_main_java_com_google_gerrit_server_project_SubmitRuleEvaluator.java,"private com.google.gerrit.rules.PrologEnvironment getPrologEnvironment(com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.server.project.RuleEvalException { com.google.gerrit.server.project.ProjectState projectState = control.getProjectControl().getProjectState(); com.google.gerrit.rules.PrologEnvironment env; try { if ((opts.rule()) == null) { env = projectState.newPrologEnvironment(); } else { env = projectState.newPrologEnvironment(""stdin"", new java.io.StringReader(opts.rule())); } } catch (com.googlecode.prolog_cafe.exceptions.CompileException err) { java.lang.String msg; if (((opts.rule()) == null) && (control.getProjectControl().isOwner())) { msg = java.lang.String.format(""Cannot load rules.pl for %s: %s"", getProjectName(), err.getMessage()); } else if ((opts.rule()) != null) { msg = err.getMessage(); } else { msg = java.lang.String.format(""Cannot load rules.pl for %s"", getProjectName()); } throw new com.google.gerrit.server.project.RuleEvalException(msg, err); } env.set(StoredValues.ACCOUNT_CACHE, accountCache); env.set(StoredValues.REVIEW_DB, cd.db()); env.set(StoredValues.CHANGE_DATA, cd); env.set(StoredValues.CHANGE_CONTROL, control); if (user != null) { env.set(StoredValues.CURRENT_USER, user); } return env; }",789a973b86f869f6ce7d01da7079626493d74529,"private com.google.gerrit.rules.PrologEnvironment getPrologEnvironment(com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.server.project.RuleEvalException { com.google.gerrit.server.project.ProjectState projectState = control.getProjectControl().getProjectState(); com.google.gerrit.rules.PrologEnvironment env; try { if ((opts.rule()) == null) { env = projectState.newPrologEnvironment(); } else { env = projectState.newPrologEnvironment(""stdin"", new java.io.StringReader(opts.rule())); } } catch (com.googlecode.prolog_cafe.exceptions.CompileException err) { java.lang.String msg; if (((opts.rule()) == null) && (control.getProjectControl().isOwner())) { msg = java.lang.String.format(""Cannot load rules.pl for %s: %s"", getProjectName(), err.getMessage()); } else if ((opts.rule()) != null) { msg = err.getMessage(); } else { msg = java.lang.String.format(""Cannot load rules.pl for %s"", getProjectName()); } throw new com.google.gerrit.server.project.RuleEvalException(msg, err); } env.set(StoredValues.ACCOUNT_BY_EMAIL_CACHE, accountByEmailCache); env.set(StoredValues.ACCOUNT_CACHE, accountCache); env.set(StoredValues.REVIEW_DB, cd.db()); env.set(StoredValues.CHANGE_DATA, cd); env.set(StoredValues.CHANGE_CONTROL, control); if (user != null) { env.set(StoredValues.CURRENT_USER, user); } return env; }",6a967738304558a0bde4547633bb940eabe5d554,"private com.google.gerrit.rules.PrologEnvironment getPrologEnvironment(com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.server.project.RuleEvalException { com.google.gerrit.server.project.ProjectState projectState = control.getProjectControl().getProjectState(); com.google.gerrit.rules.PrologEnvironment env; try { if ((opts.rule()) == null) { env = projectState.newPrologEnvironment(); } else { env = projectState.newPrologEnvironment(""stdin"", new java.io.StringReader(opts.rule())); } } catch (com.googlecode.prolog_cafe.exceptions.CompileException err) { java.lang.String msg; if (((opts.rule()) == null) && (control.getProjectControl().isOwner())) { msg = java.lang.String.format(""Cannot load rules.pl for %s: %s"", getProjectName(), err.getMessage()); } else if ((opts.rule()) != null) { msg = err.getMessage(); } else { msg = java.lang.String.format(""Cannot load rules.pl for %s"", getProjectName()); } throw new com.google.gerrit.server.project.RuleEvalException(msg, err); } env.set(StoredValues.ACCOUNTS, accounts); env.set(StoredValues.ACCOUNT_CACHE, accountCache); env.set(StoredValues.REVIEW_DB, cd.db()); env.set(StoredValues.CHANGE_DATA, cd); env.set(StoredValues.CHANGE_CONTROL, control); if (user != null) { env.set(StoredValues.CURRENT_USER, user); } return env; }",9a787b605e586e3eff380ccf229ae8de624f9d95,2017-07-19 12:49:36,3
113930,gerrit-server_src_main_java_com_google_gerrit_server_change_Mergeable.java,"private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, cd).setPatchSet(patchSet).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException((""Submit type rule failed: "" + rec)); } return rec.type; }",69b03b3dab29405f3c2f183ce4064bf80ab5d174,"private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountByEmailCache, accountCache, cd).setPatchSet(patchSet).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException((""Submit type rule failed: "" + rec)); } return rec.type; }",32e26b5d5f4dd769a2761ad652fa4e86315aa17e,"private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, cd).setPatchSet(patchSet).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException((""Submit type rule failed: "" + rec)); } return rec.type; }",42187783706c53bb935cf9c7a52553b13149ec8a,2017-07-19 12:49:36,3
114910,gerrit-server_src_main_java_com_google_gerrit_server_config_GetServerInfo.java,"@java.lang.Override public com.google.gerrit.extensions.common.ServerInfo apply(com.google.gerrit.server.config.ConfigResource rsrc) throws java.net.MalformedURLException { com.google.gerrit.extensions.common.ServerInfo info = new com.google.gerrit.extensions.common.ServerInfo(); info.auth = getAuthInfo(authConfig, realm); info.change = getChangeInfo(config); info.download = getDownloadInfo(downloadSchemes, downloadCommands, cloneCommands, archiveFormats); info.gerrit = getGerritInfo(config, allProjectsName, allUsersName); info.noteDbEnabled = com.google.gerrit.server.config.GetServerInfo.toBoolean(isNoteDbEnabled()); info.plugin = getPluginInfo(); info.sshd = getSshdInfo(config); info.suggest = getSuggestInfo(config); java.util.Map<java.lang.String, java.lang.String> urlAliases = getUrlAliasesInfo(config); info.urlAliases = (!(urlAliases.isEmpty())) ? urlAliases : null; info.user = getUserInfo(anonymousCowardName); info.receive = getReceiveInfo(); return info; }",3b4f6a301d641c614e7519c6667844db70dcacfc,"@java.lang.Override public com.google.gerrit.extensions.common.ServerInfo apply(com.google.gerrit.server.config.ConfigResource rsrc) throws java.net.MalformedURLException { com.google.gerrit.extensions.common.ServerInfo info = new com.google.gerrit.extensions.common.ServerInfo(); info.auth = getAuthInfo(authConfig, realm); info.change = getChangeInfo(config); info.download = getDownloadInfo(downloadSchemes, downloadCommands, cloneCommands, archiveFormats); info.gerrit = getGerritInfo(config, allProjectsName, allUsersName); info.noteDbEnabled = com.google.gerrit.server.config.GetServerInfo.toBoolean(isNoteDbEnabled()); info.plugin = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.defaultTheme = ""/static/"" + (com.google.gerrit.server.config.SitePaths.THEME_FILENAME); } info.sshd = getSshdInfo(config); info.suggest = getSuggestInfo(config); java.util.Map<java.lang.String, java.lang.String> urlAliases = getUrlAliasesInfo(config); info.urlAliases = (!(urlAliases.isEmpty())) ? urlAliases : null; info.user = getUserInfo(anonymousCowardName); info.receive = getReceiveInfo(); return info; }",ad365b6eac045432275a8d1ddc7d6a01a02e4edc,"@java.lang.Override public com.google.gerrit.extensions.common.ServerInfo apply(com.google.gerrit.server.config.ConfigResource rsrc) throws java.net.MalformedURLException { com.google.gerrit.extensions.common.ServerInfo info = new com.google.gerrit.extensions.common.ServerInfo(); info.auth = getAuthInfo(authConfig, realm); info.change = getChangeInfo(config); info.download = getDownloadInfo(downloadSchemes, downloadCommands, cloneCommands, archiveFormats); info.gerrit = getGerritInfo(config, allProjectsName, allUsersName); info.noteDbEnabled = com.google.gerrit.server.config.GetServerInfo.toBoolean(isNoteDbEnabled()); info.plugin = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.defaultTheme = ""/static/"" + (SitePaths.THEME_FILENAME); } info.sshd = getSshdInfo(config); info.suggest = getSuggestInfo(config); java.util.Map<java.lang.String, java.lang.String> urlAliases = getUrlAliasesInfo(config); info.urlAliases = (!(urlAliases.isEmpty())) ? urlAliases : null; info.user = getUserInfo(anonymousCowardName); info.receive = getReceiveInfo(); return info; }",1f9db1c2ce48c8d9fd9fc3c2397018ba59a51f13,2017-07-25 06:10:48,4
115330,gerrit-server_src_main_java_com_google_gerrit_server_plugins_ListPlugins.java,"public com.google.gson.JsonElement display(java.io.PrintWriter stdout) { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> output = new java.util.TreeMap<>(); java.util.List<com.google.gerrit.server.plugins.Plugin> plugins = com.google.common.collect.Lists.newArrayList(pluginLoader.getPlugins(all)); java.util.Collections.sort(plugins, new java.util.Comparator<com.google.gerrit.server.plugins.Plugin>() { @java.lang.Override public int compare(com.google.gerrit.server.plugins.Plugin a, com.google.gerrit.server.plugins.Plugin b) { return a.getName().compareTo(b.getName()); } }); if (!(format.isJson())) { stdout.format(""%-30s %-10s %-8s %s\n"", ""Name"", ""Version"", ""Status"", ""File""); stdout.print(""-------------------------------------------------------------------------------\n""); } for (com.google.gerrit.server.plugins.Plugin p : plugins) { com.google.gerrit.extensions.common.PluginInfo info = com.google.gerrit.server.plugins.ListPlugins.toPluginInfo(p); if (format.isJson()) { output.put(p.getName(), info); } else { stdout.format(""%-30s %-10s %-8s %s\n"", p.getName(), com.google.common.base.Strings.nullToEmpty(info.version), (p.isDisabled() ? ""DISABLED"" : ""ENABLED""), p.getSrcFile().getFileName()); } } if (stdout == null) { return OutputFormat.JSON.newGson().toJsonTree(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.Object>>() {}.getType()); } else if (format.isJson()) { format.newGson().toJson(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo>>() {}.getType(), stdout); stdout.print('\n'); } stdout.flush(); return null; }",0b0b14d735700692c1d9baeea3db9255905cccfd,"public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> display(@com.google.gerrit.common.Nullable java.io.PrintWriter stdout) { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> output = new java.util.TreeMap<>(); java.util.List<com.google.gerrit.server.plugins.Plugin> plugins = com.google.common.collect.Lists.newArrayList(pluginLoader.getPlugins(all)); java.util.Collections.sort(plugins, new java.util.Comparator<com.google.gerrit.server.plugins.Plugin>() { @java.lang.Override public int compare(com.google.gerrit.server.plugins.Plugin a, com.google.gerrit.server.plugins.Plugin b) { return a.getName().compareTo(b.getName()); } }); if (!(format.isJson())) { stdout.format(""%-30s %-10s %-8s %s\n"", ""Name"", ""Version"", ""Status"", ""File""); stdout.print(""-------------------------------------------------------------------------------\n""); } for (com.google.gerrit.server.plugins.Plugin p : plugins) { com.google.gerrit.extensions.common.PluginInfo info = com.google.gerrit.server.plugins.ListPlugins.toPluginInfo(p); if (format.isJson()) { output.put(p.getName(), info); } else { stdout.format(""%-30s %-10s %-8s %s\n"", p.getName(), com.google.common.base.Strings.nullToEmpty(info.version), (p.isDisabled() ? ""DISABLED"" : ""ENABLED""), p.getSrcFile().getFileName()); } } if (stdout == null) { return output; } else if (format.isJson()) { format.newGson().toJson(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo>>() {}.getType(), stdout); stdout.print('\n'); } stdout.flush(); return null; }",e8c920fd1789627cc6ed30bba898ff83bef82c3f,"public java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> display(@com.google.gerrit.common.Nullable java.io.PrintWriter stdout) { java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> output = new java.util.TreeMap<>(); java.util.List<com.google.gerrit.server.plugins.Plugin> plugins = com.google.common.collect.Lists.newArrayList(pluginLoader.getPlugins(all)); java.util.Collections.sort(plugins, new java.util.Comparator<com.google.gerrit.server.plugins.Plugin>() { @java.lang.Override public int compare(com.google.gerrit.server.plugins.Plugin a, com.google.gerrit.server.plugins.Plugin b) { return a.getName().compareTo(b.getName()); } }); if (!(format.isJson())) { stdout.format(""%-30s %-10s %-8s %s\n"", ""Name"", ""Version"", ""Status"", ""File""); stdout.print(""-------------------------------------------------------------------------------\n""); } for (com.google.gerrit.server.plugins.Plugin p : plugins) { com.google.gerrit.extensions.common.PluginInfo info = com.google.gerrit.server.plugins.ListPlugins.toPluginInfo(p); if (format.isJson()) { output.put(p.getName(), info); } else { stdout.format(""%-30s %-10s %-8s %s\n"", p.getName(), com.google.common.base.Strings.nullToEmpty(info.version), (p.isDisabled() ? ""DISABLED"" : ""ENABLED""), p.getSrcFile().getFileName()); } } if (stdout == null) { return output; } else if (format.isJson()) { format.newGson().toJson(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo>>() {}.getType(), stdout); stdout.print('\n'); } stdout.flush(); return null; }",4b7acbc4dc7e3b6c16900c4f38c4fb35f0623c21,2017-07-25 15:00:34,2
114273,gerrit-server_src_main_java_com_google_gerrit_server_account_externalids_ExternalIdCache.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"java.util.Map<java.lang.String, java.util.Set<com.google.gerrit.server.account.externalids.ExternalId>> byEmails(java.lang.String... emails) throws java.io.IOException;",bd7fa192f6b7f24a717ea965cfde6604a531d6fb,"com.google.common.collect.ImmutableSetMultimap<java.lang.String, com.google.gerrit.server.account.externalids.ExternalId> byEmails(java.lang.String... emails) throws java.io.IOException;",10963232a7638c99849b026baaeb70707f984566,2017-07-25 15:20:10,3
114273,gerrit-server_src_main_java_com_google_gerrit_server_account_externalids_ExternalIds.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.Map<java.lang.String, java.util.Set<com.google.gerrit.server.account.externalids.ExternalId>> byEmails(java.lang.String... emails) throws java.io.IOException { return externalIdCache.byEmails(emails); }",eeaff93342d5fbc9d52063a303baddffe3897067,"public com.google.common.collect.ImmutableSetMultimap<java.lang.String, com.google.gerrit.server.account.externalids.ExternalId> byEmails(java.lang.String... emails) throws java.io.IOException { return externalIdCache.byEmails(emails); }",8f27416be88e922239fd1ed5101e0c2a79d45b1c,2017-07-25 15:20:10,3
114273,gerrit-server_src_main_java_com_google_gerrit_server_account_externalids_DisabledExternalIdCache.java,@java.lang.Override public java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> byEmail(java.lang.String email) throws java.io.IOException { throw new java.lang.UnsupportedOperationException(); },3e1424177099c385515cf87e72bd3fd0407f9413,"@java.lang.Override public java.util.Map<java.lang.String, java.util.Set<com.google.gerrit.server.account.externalids.ExternalId>> byEmails(java.lang.String... emails) throws java.io.IOException { throw new java.lang.UnsupportedOperationException(); }",b63aa82da69c31f652722f75577f70c67d63b327,"@java.lang.Override public com.google.common.collect.ImmutableSetMultimap<java.lang.String, com.google.gerrit.server.account.externalids.ExternalId> byEmails(java.lang.String... emails) throws java.io.IOException { throw new java.lang.UnsupportedOperationException(); }",1af8781922fb1632fbc88d3a8d30e3838947d60d,2017-07-25 15:20:10,3
114273,gerrit-server_src_main_java_com_google_gerrit_server_account_Accounts.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.Map<java.lang.String, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id>> byEmails(java.lang.String... emails) throws java.io.IOException { return externalIds.byEmails(emails).entrySet().stream().collect(toImmutableMap(java.util.Map.Entry::getKey, ( e) -> e.getValue().stream().map(( extId) -> extId.accountId()).collect(toImmutableSet()))); }",ce1048ee1619f1cd9592c9701181fbc3c0c9c46c,"public com.google.common.collect.ImmutableSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id> byEmails(java.lang.String... emails) throws java.io.IOException { return externalIds.byEmails(emails).entries().stream().collect(toImmutableSetMultimap(java.util.Map.Entry::getKey, ( e) -> e.getValue().accountId())); }",20f8b849146863a1cad8682d8aef732db89c0a0f,2017-07-25 15:20:10,3
114273,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void lookUpByEmail() throws java.lang.Exception { assertEmail(accounts.byEmail(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(ExternalId.Key.parse(""foo:bar""), admin.id, email)); assertEmail(accounts.byEmail(email), admin); assertThat(accounts.byEmail(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(accounts.byEmail(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(accounts.byEmail(""non-existing@example.com"")).isEmpty(); java.util.Map<java.lang.String, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id>> byEmails = accounts.byEmails(admin.email, user.email); assertEmail(byEmails.get(admin.email), admin); assertEmail(byEmails.get(user.email), user); }",ab71544c7fa48c3f52c2fa152d368d4623e2ea05,"@org.junit.Test public void lookUpByEmail() throws java.lang.Exception { assertEmail(accounts.byEmail(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(ExternalId.Key.parse(""foo:bar""), admin.id, email)); assertEmail(accounts.byEmail(email), admin); assertThat(accounts.byEmail(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(accounts.byEmail(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(accounts.byEmail(""non-existing@example.com"")).isEmpty(); com.google.common.collect.ImmutableSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id> byEmails = accounts.byEmails(admin.email, user.email); assertEmail(byEmails.get(admin.email), admin); assertEmail(byEmails.get(user.email), user); }",d7be2e8da8e12c9e70d5a86139f82ca7447fecca,2017-07-25 15:20:10,3
114273,gerrit-server_src_main_java_com_google_gerrit_server_account_externalids_ExternalIdCache.java,java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> byEmail(java.lang.String email) throws java.io.IOException;,ccc304255695c380da6ee5b8cfabc8ca9698beca,default java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> byEmail(java.lang.String email) throws java.io.IOException { return byEmails(email).get(email); },ff4062330621222052cdc9e376e5bd43c65aab30,default com.google.common.collect.ImmutableSet<com.google.gerrit.server.account.externalids.ExternalId> byEmail(java.lang.String email) throws java.io.IOException { return byEmails(email).get(email); },c373e5ae327d99eabacaa99bcccd291001b3ecf3,2017-07-25 15:20:10,3
114273,gerrit-server_src_main_java_com_google_gerrit_server_account_externalids_ExternalIdCacheImpl.java,"@java.lang.Override public java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> byEmail(java.lang.String email) throws java.io.IOException { try { return extIdsByAccount.get(externalIdReader.readRevision()).byEmail().get(email); } catch (java.util.concurrent.ExecutionException e) { throw new java.io.IOException(""Cannot list external ids by email"", e); } }",305cd71e2f8ab5f4273c4ac18bbbd57c57742f48,"@java.lang.Override public java.util.Map<java.lang.String, java.util.Set<com.google.gerrit.server.account.externalids.ExternalId>> byEmails(java.lang.String... emails) throws java.io.IOException { try { com.google.gerrit.server.account.externalids.ExternalIdCacheImpl.AllExternalIds allExternalIds = extIdsByAccount.get(externalIdReader.readRevision()); java.util.Map<java.lang.String, java.util.Set<com.google.gerrit.server.account.externalids.ExternalId>> byEmails = new java.util.HashMap<>(); for (java.lang.String email : emails) { byEmails.put(email, allExternalIds.byEmail().get(email)); } return byEmails; } catch (java.util.concurrent.ExecutionException e) { throw new java.io.IOException(""Cannot list external ids by email"", e); } }",e1b1f61126f69c72d79d51a45c449b47db5cbabf,"@java.lang.Override public com.google.common.collect.ImmutableSetMultimap<java.lang.String, com.google.gerrit.server.account.externalids.ExternalId> byEmails(java.lang.String... emails) throws java.io.IOException { try { com.google.gerrit.server.account.externalids.ExternalIdCacheImpl.AllExternalIds allExternalIds = extIdsByAccount.get(externalIdReader.readRevision()); ImmutableSetMultimap.Builder<java.lang.String, com.google.gerrit.server.account.externalids.ExternalId> byEmails = com.google.common.collect.ImmutableSetMultimap.builder(); for (java.lang.String email : emails) { byEmails.putAll(email, allExternalIds.byEmail().get(email)); } return byEmails.build(); } catch (java.util.concurrent.ExecutionException e) { throw new java.io.IOException(""Cannot list external ids by email"", e); } }",f1b223799e93007f5eebb1182ca566353d3cad9f,2017-07-25 15:20:10,3
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"void loadChangeInfo(boolean fg, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo> cb) { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeApi.detail(changeId.get()); java.util.EnumSet<com.google.gerrit.extensions.client.ListChangesOption> opts = java.util.EnumSet.of(ListChangesOption.ALL_REVISIONS, ListChangesOption.CHANGE_ACTIONS); if (enableSignedPush()) { opts.add(ListChangesOption.PUSH_CERTIFICATES); } com.google.gerrit.client.changes.ChangeList.addOptions(call, opts); if (!fg) { call.background(); } call.get(cb); }",1504499e04a0bfe873119b8db0a8eaeb685e2173,"void loadChangeInfo(boolean fg, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo> cb) { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeApi.detail(changeId.get(), Project.NameKey.asStringOrNull(project)); java.util.EnumSet<com.google.gerrit.extensions.client.ListChangesOption> opts = java.util.EnumSet.of(ListChangesOption.ALL_REVISIONS, ListChangesOption.CHANGE_ACTIONS); if (enableSignedPush()) { opts.add(ListChangesOption.PUSH_CERTIFICATES); } com.google.gerrit.client.changes.ChangeList.addOptions(call, opts); if (!fg) { call.background(); } call.get(cb); }",b1f7bf9b25590fdb32d92e3db4dfc6f12ff91dc7,"void loadChangeInfo(boolean fg, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo> cb) { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeApi.detail(Project.NameKey.asStringOrNull(project), changeId.get()); java.util.EnumSet<com.google.gerrit.extensions.client.ListChangesOption> opts = java.util.EnumSet.of(ListChangesOption.ALL_REVISIONS, ListChangesOption.CHANGE_ACTIONS); if (enableSignedPush()) { opts.add(ListChangesOption.PUSH_CERTIFICATES); } com.google.gerrit.client.changes.ChangeList.addOptions(call, opts); if (!fg) { call.background(); } call.get(cb); }",e52ccadb4e2266c4cd34a99b92721d05c160aae0,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void editWithFiles(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.EditInfo> cb) { com.google.gerrit.client.changes.ChangeApi.edit(id).addParameterTrue(""list"").get(cb); }",c123d1bfca4a0ded4fc2530d0eda5679e61f7d47,"public static void editWithFiles(int id, @com.google.gerrit.common.Nullable java.lang.String project, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.EditInfo> cb) { com.google.gerrit.client.changes.ChangeApi.edit(id, project).addParameterTrue(""list"").get(cb); }",afa08f4c0ae2a3ab90cf88a02971a854c63de0bc,"public static void editWithFiles(@com.google.gerrit.common.Nullable java.lang.String project, int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.EditInfo> cb) { com.google.gerrit.client.changes.ChangeApi.edit(project, id).addParameterTrue(""list"").get(cb); }",cc6e44f0eaca82b4d6e08bed3fa26f832b7ee07f,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_CommentApi.java,"public static void comment(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String commentId, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.CommentInfo> cb) { CommentApi.revision(id, ""comments"").id(commentId).get(cb); }",e6962ea56d9c17c18813ba52c89ad2a85da3b121,"public static void comment(com.google.gerrit.reviewdb.client.PatchSet.Id id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String commentId, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.CommentInfo> cb) { CommentApi.revision(id, project, ""comments"").id(commentId).get(cb); }",91653159d2e462f9f1de328bb82fb42eb90c4bc8,"public static void comment(@com.google.gerrit.common.Nullable java.lang.String project, com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String commentId, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.CommentInfo> cb) { CommentApi.revision(project, id, ""comments"").id(commentId).get(cb); }",9bbfa9d71107c5ff12d1ad8e96ac67c595a542f1,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void detail(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.detail(id).get(cb); }",2e4f59b5e9b766fcbd476f3267d2d369355836d5,"public static void detail(int id, @com.google.gerrit.common.Nullable java.lang.String project, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.detail(id, project).get(cb); }",d8c80fc7637cc9366432856942c569e307b62c4b,"public static void detail(@com.google.gerrit.common.Nullable java.lang.String project, int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.detail(project, id).get(cb); }",8c1ad23e7de0fd0529fa0db0829775ecf985c930,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_CommentApi.java,"public static void updateDraft(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String draftId, com.google.gerrit.client.changes.CommentInfo content, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.CommentInfo> cb) { CommentApi.revision(id, ""drafts"").id(draftId).put(content, cb); }",0a3952ac7078df3d4353be183ba3ba8c6c671f4f,"public static void updateDraft(com.google.gerrit.reviewdb.client.PatchSet.Id id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String draftId, com.google.gerrit.client.changes.CommentInfo content, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.CommentInfo> cb) { CommentApi.revision(id, project, ""drafts"").id(draftId).put(content, cb); }",2ca93e5b891ccbca4aa51235212518b6a957551b,"public static void updateDraft(@com.google.gerrit.common.Nullable java.lang.String project, com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String draftId, com.google.gerrit.client.changes.CommentInfo content, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.CommentInfo> cb) { CommentApi.revision(project, id, ""drafts"").id(draftId).put(content, cb); }",9e353d460aede85c70d234710c9a49ebcb4d4a7b,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_CommentApi.java,"public static void deleteDraft(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String draftId, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { CommentApi.revision(id, ""drafts"").id(draftId).delete(cb); }",49b38a4def3c3408d79207f382d9334d26ecff1b,"public static void deleteDraft(com.google.gerrit.reviewdb.client.PatchSet.Id id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String draftId, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { CommentApi.revision(id, project, ""drafts"").id(draftId).delete(cb); }",8e60b893d206a2ba2e40c33863f9ebac40d27092,"public static void deleteDraft(@com.google.gerrit.common.Nullable java.lang.String project, com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String draftId, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { CommentApi.revision(project, id, ""drafts"").id(draftId).delete(cb); }",df9abbc3be30c85bb6adeb98679557bf3a6b673c,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_CommentApi.java,"public static void comments(com.google.gerrit.reviewdb.client.PatchSet.Id id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> cb) { com.google.gerrit.client.changes.CommentApi.revision(id, ""comments"").get(cb); }",e9834a417b78fe9b1aecb69617107f36bae6716c,"public static void comments(com.google.gerrit.reviewdb.client.PatchSet.Id id, @com.google.gerrit.common.Nullable java.lang.String project, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> cb) { com.google.gerrit.client.changes.CommentApi.revision(id, project, ""comments"").get(cb); }",4cba4d0735bc3fbe4a5c316f4b2bc2e583402fe3,"public static void comments(@com.google.gerrit.common.Nullable java.lang.String project, com.google.gerrit.reviewdb.client.PatchSet.Id id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> cb) { com.google.gerrit.client.changes.CommentApi.revision(project, id, ""comments"").get(cb); }",171fdc8a2538c892bf8eace384581d0bb1285a99,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_CommentApi.java,"public static void createDraft(com.google.gerrit.reviewdb.client.PatchSet.Id id, com.google.gerrit.client.changes.CommentInfo content, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.CommentInfo> cb) { com.google.gerrit.client.changes.CommentApi.revision(id, ""drafts"").put(content, cb); }",ea85a8ea8b712340146596bd0a506de5a217bbef,"public static void createDraft(com.google.gerrit.reviewdb.client.PatchSet.Id id, @com.google.gerrit.common.Nullable java.lang.String project, com.google.gerrit.client.changes.CommentInfo content, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.CommentInfo> cb) { com.google.gerrit.client.changes.CommentApi.revision(id, project, ""drafts"").put(content, cb); }",a709964f3607d8075fd74de1cb7f1c8e5dcdf8f7,"public static void createDraft(@com.google.gerrit.common.Nullable java.lang.String project, com.google.gerrit.reviewdb.client.PatchSet.Id id, com.google.gerrit.client.changes.CommentInfo content, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.CommentInfo> cb) { com.google.gerrit.client.changes.CommentApi.revision(project, id, ""drafts"").put(content, cb); }",73e22fff8f65d6b356bdf1bc12c7801386fd810a,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static com.google.gerrit.client.rpc.RestApi revision(int id, java.lang.String revision) { return ChangeApi.change(id).view(""revisions"").id(revision); }",e076ccfa4fc862536b6250ce3da7bfb9713ecab1,"public static com.google.gerrit.client.rpc.RestApi revision(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String revision) { return ChangeApi.change(id, project).view(""revisions"").id(revision); }",251eb3d9cfbe44848e939872851a135d5da06be3,"public static com.google.gerrit.client.rpc.RestApi revision(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String revision) { return ChangeApi.change(project, id).view(""revisions"").id(revision); }",548a37b9364898f7b3702ac7fed0d2badd469f23,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static com.google.gerrit.client.rpc.RestApi hashtag(int changeId, java.lang.String hashtag) { return com.google.gerrit.client.changes.ChangeApi.change(changeId).view(""hashtags"").id(hashtag); }",8cafcf2f441f824ea933b347be0d8d4357aa8df1,"public static com.google.gerrit.client.rpc.RestApi hashtag(int changeId, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String hashtag) { return com.google.gerrit.client.changes.ChangeApi.change(changeId, project).view(""hashtags"").id(hashtag); }",04d97f55f769a6b304c2def8b8c345a024a13b2c,"public static com.google.gerrit.client.rpc.RestApi hashtag(@com.google.gerrit.common.Nullable java.lang.String project, int changeId, java.lang.String hashtag) { return com.google.gerrit.client.changes.ChangeApi.change(project, changeId).view(""hashtags"").id(hashtag); }",ec8b50410d72ed771ce4d1964a4a0de9bfe03d38,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_Unified.java,"private java.util.List<com.google.gerrit.client.ui.InlineHyperlink> getSideBySideDiffLink() { com.google.gerrit.client.ui.InlineHyperlink toSideBySideDiffLink = new com.google.gerrit.client.ui.InlineHyperlink(); toSideBySideDiffLink.setHTML(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.sideBySideDiff())); toSideBySideDiffLink.setTargetHistoryToken(com.google.gerrit.client.Dispatcher.toSideBySide(base, revision, path)); toSideBySideDiffLink.setTitle(PatchUtil.C.sideBySideDiff()); return java.util.Collections.singletonList(toSideBySideDiffLink); }",43bb2c16c637f363ab9b34ef9d128e76316fe8cd,"private java.util.List<com.google.gerrit.client.ui.InlineHyperlink> getSideBySideDiffLink() { com.google.gerrit.client.ui.InlineHyperlink toSideBySideDiffLink = new com.google.gerrit.client.ui.InlineHyperlink(); toSideBySideDiffLink.setHTML(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.sideBySideDiff())); toSideBySideDiffLink.setTargetHistoryToken(com.google.gerrit.client.Dispatcher.toSideBySide(base, revision, getProject(), path)); toSideBySideDiffLink.setTitle(PatchUtil.C.sideBySideDiff()); return java.util.Collections.singletonList(toSideBySideDiffLink); }",97eeaa955e6da68c30fc7b5f249a5fdc4a1c5593,"private java.util.List<com.google.gerrit.client.ui.InlineHyperlink> getSideBySideDiffLink() { com.google.gerrit.client.ui.InlineHyperlink toSideBySideDiffLink = new com.google.gerrit.client.ui.InlineHyperlink(); toSideBySideDiffLink.setHTML(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.sideBySideDiff())); toSideBySideDiffLink.setTargetHistoryToken(com.google.gerrit.client.Dispatcher.toSideBySide(getProject(), base, revision, path)); toSideBySideDiffLink.setTitle(PatchUtil.C.sideBySideDiff()); return java.util.Collections.singletonList(toSideBySideDiffLink); }",709eadc04018452dc7d5387b9bf0c207892d5097,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Hashtags.java,"private static void onRemove(com.google.gwt.dom.client.NativeEvent event) { java.lang.String hashtags = com.google.gerrit.client.change.Hashtags.getDataId(event); if (hashtags != null) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); final com.google.gerrit.reviewdb.client.PatchSet.Id psId = screen.getPatchSetId(); com.google.gerrit.client.changes.ChangeApi.hashtags(psId.getParentKey().get()).post(com.google.gerrit.client.change.Hashtags.PostInput.create(null, hashtags), new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(psId)); } } }); } }",e867c5ce301e20c59e32e8d862ad0525c6dd0a77,"private static void onRemove(com.google.gwt.dom.client.NativeEvent event) { java.lang.String hashtags = com.google.gerrit.client.change.Hashtags.getDataId(event); if (hashtags != null) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); final com.google.gerrit.reviewdb.client.PatchSet.Id psId = screen.getPatchSetId(); final com.google.gerrit.reviewdb.client.Project.NameKey project = null; com.google.gerrit.client.changes.ChangeApi.hashtags(psId.getParentKey().get(), Project.NameKey.asStringOrNull(project)).post(com.google.gerrit.client.change.Hashtags.PostInput.create(null, hashtags), new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(psId)); } } }); } }",1f09c26b2946484955dd4402cb8b3c936fd10e4e,"private static void onRemove(com.google.gwt.dom.client.NativeEvent event) { java.lang.String hashtags = com.google.gerrit.client.change.Hashtags.getDataId(event); if (hashtags != null) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); final com.google.gerrit.reviewdb.client.PatchSet.Id psId = screen.getPatchSetId(); com.google.gerrit.client.changes.ChangeApi.hashtags(screen.getProject().get(), psId.getParentKey().get()).post(com.google.gerrit.client.change.Hashtags.PostInput.create(null, hashtags), new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(screen.getProject(), psId)); } } }); } }",8617e3c9e56175a869b094ade07be42ec771208a,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Hashtags.java,"private void addHashtag(final java.lang.String hashtags) { com.google.gerrit.client.changes.ChangeApi.hashtags(changeId.get()).post(com.google.gerrit.client.change.Hashtags.PostInput.create(hashtags, null), new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(psId.getParentKey(), java.lang.String.valueOf(psId.get()))); } @java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); hashtagTextBox.setEnabled(true); } }); }",2cf91bde46b1a20eec49b7a7974abda36de19c8d,"private void addHashtag(final java.lang.String hashtags) { com.google.gerrit.client.changes.ChangeApi.hashtags(changeId.get(), Project.NameKey.asStringOrNull(project)).post(com.google.gerrit.client.change.Hashtags.PostInput.create(hashtags, null), new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(psId.getParentKey(), project, java.lang.String.valueOf(psId.get()))); } @java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); hashtagTextBox.setEnabled(true); } }); }",1fafc092c45871d54abd8b98fca28344334cfcbc,"private void addHashtag(java.lang.String hashtags) { com.google.gerrit.client.changes.ChangeApi.hashtags(project.get(), changeId.get()).post(com.google.gerrit.client.change.Hashtags.PostInput.create(hashtags, null), new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, psId.getParentKey(), java.lang.String.valueOf(psId.get()))); } @java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); hashtagTextBox.setEnabled(true); } }); }",6ed714934aed155973bd48f24d0ae3472524e919,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_PatchSetsBox.java,"@java.lang.Override protected void onLoad() { if (!(loaded)) { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeApi.detail(changeId.get()); com.google.gerrit.client.changes.ChangeList.addOptions(call, java.util.EnumSet.of(ListChangesOption.ALL_COMMITS, ListChangesOption.ALL_REVISIONS)); call.get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { if ((edit) != null) { edit.setName(edit.commit().commit()); result.revisions().put(edit.name(), com.google.gerrit.client.info.ChangeInfo.RevisionInfo.fromEdit(edit)); } render(result.revisions()); loaded = true; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }",1bd43ca1adc7449303b17de751758bb424f7dddd,"@java.lang.Override protected void onLoad() { if (!(loaded)) { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeApi.detail(changeId.get(), Project.NameKey.asStringOrNull(project)); com.google.gerrit.client.changes.ChangeList.addOptions(call, java.util.EnumSet.of(ListChangesOption.ALL_COMMITS, ListChangesOption.ALL_REVISIONS)); call.get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { if ((edit) != null) { edit.setName(edit.commit().commit()); result.revisions().put(edit.name(), com.google.gerrit.client.info.ChangeInfo.RevisionInfo.fromEdit(edit)); } render(result.revisions()); loaded = true; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }",f5889d931281aa8655771870ddbd784ad6e7d9e6,"@java.lang.Override protected void onLoad() { if (!(loaded)) { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeApi.detail(project.get(), changeId.get()); com.google.gerrit.client.changes.ChangeList.addOptions(call, java.util.EnumSet.of(ListChangesOption.ALL_COMMITS, ListChangesOption.ALL_REVISIONS)); call.get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { if ((edit) != null) { edit.setName(edit.commit().commit()); result.revisions().put(edit.name(), com.google.gerrit.client.info.ChangeInfo.RevisionInfo.fromEdit(edit)); } render(result.revisions()); loaded = true; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }",dc10bc7d49e9011cfb7bfcc540ae03d859ec9c28,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_CherryPickAction.java,"static void call(final com.google.gwt.user.client.ui.Button b, final com.google.gerrit.client.info.ChangeInfo info, final java.lang.String revision, java.lang.String project, final java.lang.String commitMessage) { b.setEnabled(false); new com.google.gerrit.client.ui.CherryPickDialog(new com.google.gerrit.reviewdb.client.Project.NameKey(project)) { { sendButton.setText(Util.C.buttonCherryPickChangeSend()); if ((info.status()) == (Change.Status.MERGED)) { message.setText(Util.M.cherryPickedChangeDefaultMessage(commitMessage.trim(), revision)); } else { message.setText(commitMessage.trim()); } } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.cherrypick(info.legacyId().get(), revision, getDestinationBranch(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { super.onClose(event); b.setEnabled(true); } }.center(); }",a82a5d7623fe44585d59fb6e6f1f0aacb4cbd392,"static void call(final com.google.gwt.user.client.ui.Button b, final com.google.gerrit.client.info.ChangeInfo info, final java.lang.String revision, final com.google.gerrit.reviewdb.client.Project.NameKey project, final java.lang.String commitMessage) { b.setEnabled(false); new com.google.gerrit.client.ui.CherryPickDialog(project) { { sendButton.setText(Util.C.buttonCherryPickChangeSend()); if ((info.status()) == (Change.Status.MERGED)) { message.setText(Util.M.cherryPickedChangeDefaultMessage(commitMessage.trim(), revision)); } else { message.setText(commitMessage.trim()); } } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.cherrypick(info.legacyId().get(), revision, getDestinationBranch(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId(), project)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { super.onClose(event); b.setEnabled(true); } }.center(); }",4eb0d06f7adffed874256a02b36fbe1f3f701228,"static void call(final com.google.gwt.user.client.ui.Button b, final com.google.gerrit.client.info.ChangeInfo info, final java.lang.String revision, final com.google.gerrit.reviewdb.client.Project.NameKey project, final java.lang.String commitMessage) { b.setEnabled(false); new com.google.gerrit.client.ui.CherryPickDialog(project) { { sendButton.setText(Util.C.buttonCherryPickChangeSend()); if ((info.status()) == (Change.Status.MERGED)) { message.setText(Util.M.cherryPickedChangeDefaultMessage(commitMessage.trim(), revision)); } else { message.setText(commitMessage.trim()); } } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.cherrypick(info.project(), info.legacyId().get(), revision, getDestinationBranch(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, result.legacyId())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { super.onClose(event); b.setEnabled(true); } }.center(); }",4cffa251bc8b0bd0b86ab3ea640de7c6867773b2,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_CommentApi.java,"private static com.google.gerrit.client.rpc.RestApi revision(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String type) { return com.google.gerrit.client.changes.ChangeApi.revision(id).view(type); }",8adcc6e307558b0841d1840b730b2098c1655f10,"private static com.google.gerrit.client.rpc.RestApi revision(com.google.gerrit.reviewdb.client.PatchSet.Id id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String type) { return com.google.gerrit.client.changes.ChangeApi.revision(id, project).view(type); }",2c7c2aeed88022ea342f1c777c23ba6820d2404a,"private static com.google.gerrit.client.rpc.RestApi revision(@com.google.gerrit.common.Nullable java.lang.String project, com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String type) { return com.google.gerrit.client.changes.ChangeApi.revision(project, id).view(type); }",1f2594a3a8e87c2c341306301a663f4449be2269,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_CommentApi.java,"public static void draft(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String draftId, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.CommentInfo> cb) { CommentApi.revision(id, ""drafts"").id(draftId).get(cb); }",83b086cddf3028cfc76b527f774de382b639a296,"public static void draft(com.google.gerrit.reviewdb.client.PatchSet.Id id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String draftId, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.CommentInfo> cb) { CommentApi.revision(id, project, ""drafts"").id(draftId).get(cb); }",94cc32e2ac50049ba6b9b4f2f19226a002e796c9,"public static void draft(@com.google.gerrit.common.Nullable java.lang.String project, com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String draftId, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.CommentInfo> cb) { CommentApi.revision(project, id, ""drafts"").id(draftId).get(cb); }",2f7249f168cd61c76513f4140a92127dd1c519a1,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_CommentApi.java,"public static void drafts(com.google.gerrit.reviewdb.client.PatchSet.Id id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> cb) { com.google.gerrit.client.changes.CommentApi.revision(id, ""drafts"").get(cb); }",c256cfeff7d7a67fe7b047e6ff345a2d17eddba6,"public static void drafts(com.google.gerrit.reviewdb.client.PatchSet.Id id, @com.google.gerrit.common.Nullable java.lang.String project, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> cb) { com.google.gerrit.client.changes.CommentApi.revision(id, project, ""drafts"").get(cb); }",80d83edfb28d9cdccc996f5cd804dc69b80d3e7a,"public static void drafts(@com.google.gerrit.common.Nullable java.lang.String project, com.google.gerrit.reviewdb.client.PatchSet.Id id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> cb) { com.google.gerrit.client.changes.CommentApi.revision(project, id, ""drafts"").get(cb); }",ea6e0d57d660abbea4049c26d51e6f1276d86c0a,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_DownloadBox.java,"@java.lang.Override protected void onLoad() { if ((fetch) == null) { if ((psId.get()) == 0) { com.google.gerrit.client.changes.ChangeApi.editWithCommands(change.legacyId().get()).get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.EditInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo.EditInfo result) { fetch = result.fetch(); renderScheme(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } else { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeApi.detail(change.legacyId().get()); com.google.gerrit.client.changes.ChangeList.addOptions(call, java.util.EnumSet.of((revision.equals(change.currentRevision()) ? com.google.gerrit.extensions.client.ListChangesOption.CURRENT_REVISION : com.google.gerrit.extensions.client.ListChangesOption.ALL_REVISIONS), ListChangesOption.DOWNLOAD_COMMANDS)); call.get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { fetch = result.revision(revision).fetch(); renderScheme(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } } }",9b3e437a3ebc3de258395f2faa90ab34dfe99b54,"@java.lang.Override protected void onLoad() { if ((fetch) == null) { if ((psId.get()) == 0) { com.google.gerrit.client.changes.ChangeApi.editWithCommands(change.legacyId().get(), change.project()).get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.EditInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo.EditInfo result) { fetch = result.fetch(); renderScheme(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } else { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeApi.detail(change.legacyId().get(), change.project()); com.google.gerrit.client.changes.ChangeList.addOptions(call, java.util.EnumSet.of((revision.equals(change.currentRevision()) ? com.google.gerrit.extensions.client.ListChangesOption.CURRENT_REVISION : com.google.gerrit.extensions.client.ListChangesOption.ALL_REVISIONS), ListChangesOption.DOWNLOAD_COMMANDS)); call.get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { fetch = result.revision(revision).fetch(); renderScheme(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } } }",5805ce03768bdcb20dea045eff04594759300c86,"@java.lang.Override protected void onLoad() { if ((fetch) == null) { if ((psId.get()) == 0) { com.google.gerrit.client.changes.ChangeApi.editWithCommands(change.project(), change.legacyId().get()).get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.EditInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo.EditInfo result) { fetch = result.fetch(); renderScheme(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } else { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeApi.detail(change.project(), change.legacyId().get()); com.google.gerrit.client.changes.ChangeList.addOptions(call, java.util.EnumSet.of((revision.equals(change.currentRevision()) ? com.google.gerrit.extensions.client.ListChangesOption.CURRENT_REVISION : com.google.gerrit.extensions.client.ListChangesOption.ALL_REVISIONS), ListChangesOption.DOWNLOAD_COMMANDS)); call.get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { fetch = result.revision(revision).fetch(); renderScheme(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } } }",8d91ba56dc66c8fa55f4ca5d4b499c6a3c6b31c8,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_CherryPickAction.java,@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId())); },71c15f774d4f4ed37ec019d6da222fb355c77ab2,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId(), project)); }",7abdaaa83eb9082fc3d405c219ff259317b685b8,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, result.legacyId())); }",9c0b91fd70109bbabab2ac67d2f98654e5a1873f,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static com.google.gerrit.client.rpc.RestApi vote(int id, int reviewer, java.lang.String vote) { return ChangeApi.reviewer(id, reviewer).view(""votes"").id(vote); }",5559925e8d2b50d8a6577fe5c6cf03b811bcf51a,"public static com.google.gerrit.client.rpc.RestApi vote(int id, @com.google.gerrit.common.Nullable java.lang.String project, int reviewer, java.lang.String vote) { return ChangeApi.reviewer(id, project, reviewer).view(""votes"").id(vote); }",ae40c96486f9ead9b16571fcbfb950bb5758af4d,"public static com.google.gerrit.client.rpc.RestApi vote(@com.google.gerrit.common.Nullable java.lang.String project, int id, int reviewer, java.lang.String vote) { return ChangeApi.reviewer(project, id, reviewer).view(""votes"").id(vote); }",0e1296475a6004f617c8e8d2d6e73c563836f44e,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void deleteChange(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.change(id).delete(cb); }",b9afe20ea2d1ad64f854422b57e7a37c7702c050,"public static void deleteChange(int id, @com.google.gerrit.common.Nullable java.lang.String project, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.change(id, project).delete(cb); }",6d0110bc969ecf5fd05af504fc70a3b943c5a6e4,"public static void deleteChange(@com.google.gerrit.common.Nullable java.lang.String project, int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.change(project, id).delete(cb); }",ad5ce4c74df464cc21dbe4b37a355fdb5d2321e9,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeEditApi.java,"public static void delete(int id, java.lang.String path, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult> cb) { com.google.gerrit.client.changes.ChangeEditApi.editFile(id, path).delete(cb); }",337c1cf013921fdcbafb2f020a694ea359e5afdf,"public static void delete(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String path, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult> cb) { com.google.gerrit.client.changes.ChangeEditApi.editFile(id, project, path).delete(cb); }",788d6ced65bd1e69829bd546ce4c74365a7772ac,"public static void delete(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String path, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult> cb) { com.google.gerrit.client.changes.ChangeEditApi.editFile(project, id, path).delete(cb); }",716c1748e8e04833d849caaec39a4fa48885b66d,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"private void scrollToPath(java.lang.String token) { int s = token.indexOf('/'); try { java.lang.String c = token.substring(0, s); int editIndex = c.indexOf("",edit""); if (editIndex > 0) { c = c.substring(0, editIndex); } if ((s < 0) || (!(changeId.equals(Change.Id.parse(c))))) { return; } } catch (java.lang.IllegalArgumentException e) { return; } s = token.indexOf('/', (s + 1)); if (s < 0) { return; } int c = token.lastIndexOf(','); if (0 <= c) { token = token.substring((s + 1), c); } else { token = token.substring((s + 1)); } if (!(token.isEmpty())) { files.scrollToPath(com.google.gwtorm.client.KeyUtil.decode(token)); } }",8859e8f5e1916214cb991513d28dc285304b0f1b,"private void scrollToPath(java.lang.String token) { com.google.gerrit.client.change.ChangeIdParser.Result result = com.google.gerrit.client.change.ChangeIdParser.parse(token); if (!(changeId.equals(result.changeId))) { return; } int s = token.indexOf('/', ((result.identifierLength()) + 1)); if (s < 0) { return; } int c = token.lastIndexOf(','); if (0 <= c) { token = token.substring((s + 1), c); } else { token = token.substring((s + 1)); } if (!(token.isEmpty())) { files.scrollToPath(com.google.gwtorm.client.KeyUtil.decode(token)); } }",5beff81789e8e8332a7f1394aca0e01a572a2db7,"private void scrollToPath(java.lang.String token) { com.google.gerrit.client.change.ProjectChangeId cId; try { cId = com.google.gerrit.client.change.ProjectChangeId.create(token); } catch (java.lang.IllegalArgumentException e) { return; } if (!(changeId.equals(cId.getChangeId()))) { return; } int s = token.indexOf('/', ((cId.identifierLength()) + 1)); if (s < 0) { return; } int c = token.lastIndexOf(','); if (0 <= c) { token = token.substring((s + 1), c); } else { token = token.substring((s + 1)); } if (!(token.isEmpty())) { files.scrollToPath(com.google.gwtorm.client.KeyUtil.decode(token)); } }",cbc4528fe61c2754fa0b2267e9dba2b294bfa004,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_Unified.java,"@java.lang.Override com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry> getScreenLoadCallback(final com.google.gerrit.client.diff.CommentsCollections comments) { return new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry>(this) { @java.lang.Override protected void preDisplay(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { commentManager = new com.google.gerrit.client.diff.UnifiedCommentManager(com.google.gerrit.client.diff.Unified.this, base, revision, path, result.getCommentLinkProcessor(), getChangeStatus().isOpen()); setTheme(result.getTheme()); display(comments); header.setupPrevNextFiles(comments); } }; }",70884da1c5b79c92af84445adc86d71550f01415,"@java.lang.Override com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry> getScreenLoadCallback(final com.google.gerrit.client.diff.CommentsCollections comments) { return new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry>(this) { @java.lang.Override protected void preDisplay(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { commentManager = new com.google.gerrit.client.diff.UnifiedCommentManager(com.google.gerrit.client.diff.Unified.this, base, revision, getProject(), path, result.getCommentLinkProcessor(), getChangeStatus().isOpen()); setTheme(result.getTheme()); display(comments); header.setupPrevNextFiles(comments); } }; }",05bfbf30588cf64f7fa0d8023df6ece98e532ce5,"@java.lang.Override com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry> getScreenLoadCallback(final com.google.gerrit.client.diff.CommentsCollections comments) { return new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry>(this) { @java.lang.Override protected void preDisplay(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { commentManager = new com.google.gerrit.client.diff.UnifiedCommentManager(com.google.gerrit.client.diff.Unified.this, getProject(), base, revision, path, result.getCommentLinkProcessor(), getChangeStatus().isOpen()); setTheme(result.getTheme()); display(comments); header.setupPrevNextFiles(comments); } }; }",63dec1df9296e24bac268d7dca1b53ae3a21ed1d,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeEditApi.java,"public static void put(int id, java.lang.String path, java.lang.String content, com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.VoidResult> cb) { if (Patch.COMMIT_MSG.equals(path)) { com.google.gerrit.client.changes.ChangeEditApi.putMessage(id, content, cb); } else { com.google.gerrit.client.changes.ChangeEditApi.editFile(id, path).put(content, cb); } }",fb820b01a5af6d6ba232da227cc9753fc4107d37,"public static void put(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String path, java.lang.String content, com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.VoidResult> cb) { if (Patch.COMMIT_MSG.equals(path)) { com.google.gerrit.client.changes.ChangeEditApi.putMessage(id, project, content, cb); } else { com.google.gerrit.client.changes.ChangeEditApi.editFile(id, project, path).put(content, cb); } }",c479f72096f6b51a3c566b2e461880e0c759e2d0,"public static void put(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String path, java.lang.String content, com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.VoidResult> cb) { if (Patch.COMMIT_MSG.equals(path)) { com.google.gerrit.client.changes.ChangeEditApi.putMessage(project, id, content, cb); } else { com.google.gerrit.client.changes.ChangeEditApi.editFile(project, id, path).put(content, cb); } }",bfbd814812c196363acf748b90c0345ea9f56a37,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeEditApi.java,"public static void rename(int id, java.lang.String path, java.lang.String newPath, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult> cb) { com.google.gerrit.client.changes.ChangeEditApi.Input in = com.google.gerrit.client.changes.ChangeEditApi.Input.create(); in.oldPath(path); in.newPath(newPath); com.google.gerrit.client.changes.ChangeApi.edit(id).post(in, cb); }",322a6b8102d9fe3bcfed7f28e0982667032d1114,"public static void rename(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String path, java.lang.String newPath, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult> cb) { com.google.gerrit.client.changes.ChangeEditApi.Input in = com.google.gerrit.client.changes.ChangeEditApi.Input.create(); in.oldPath(path); in.newPath(newPath); com.google.gerrit.client.changes.ChangeApi.edit(id, project).post(in, cb); }",47db1ad173bae54eedb03d8510e6f830055a4f96,"public static void rename(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String path, java.lang.String newPath, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult> cb) { com.google.gerrit.client.changes.ChangeEditApi.Input in = com.google.gerrit.client.changes.ChangeEditApi.Input.create(); in.oldPath(path); in.newPath(newPath); com.google.gerrit.client.changes.ChangeApi.edit(project, id).post(in, cb); }",3579f5f5c6876791f5410f166c307f28b602bb9d,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CommentManager.java,"void renderPublished(com.google.gerrit.client.diff.DisplaySide forSide, com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo> in) { for (com.google.gerrit.client.changes.CommentInfo info : com.google.gerrit.client.rpc.Natives.asList(in)) { com.google.gerrit.client.diff.DisplaySide side = displaySide(info, forSide); if (side != null) { int cmLinePlusOne = (host.getCmLine(((info.line()) - 1), side)) + 1; com.google.gerrit.client.diff.CommentGroup group = group(side, cmLinePlusOne); com.google.gerrit.client.diff.PublishedBox box = new com.google.gerrit.client.diff.PublishedBox(group, getCommentLinkProcessor(), getPatchSetIdFromSide(side), info, side, isOpen()); group.add(box); box.setAnnotation(host.getDiffTable().scrollbar.comment(host.getCmFromSide(side), (cmLinePlusOne - 1))); getPublished().put(info.id(), box); } } }",a2fb25310aa8c5714988fd6069c3c6694dcc7eaa,"void renderPublished(com.google.gerrit.client.diff.DisplaySide forSide, com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo> in) { for (com.google.gerrit.client.changes.CommentInfo info : com.google.gerrit.client.rpc.Natives.asList(in)) { com.google.gerrit.client.diff.DisplaySide side = displaySide(info, forSide); if (side != null) { int cmLinePlusOne = (host.getCmLine(((info.line()) - 1), side)) + 1; com.google.gerrit.client.diff.CommentGroup group = group(side, cmLinePlusOne); com.google.gerrit.client.diff.PublishedBox box = new com.google.gerrit.client.diff.PublishedBox(group, getCommentLinkProcessor(), getPatchSetIdFromSide(side), project, info, side, isOpen()); group.add(box); box.setAnnotation(host.getDiffTable().scrollbar.comment(host.getCmFromSide(side), (cmLinePlusOne - 1))); getPublished().put(info.id(), box); } } }",eb065f025556010e9d41a13190d440276fa5bff0,"void renderPublished(com.google.gerrit.client.diff.DisplaySide forSide, com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo> in) { for (com.google.gerrit.client.changes.CommentInfo info : com.google.gerrit.client.rpc.Natives.asList(in)) { com.google.gerrit.client.diff.DisplaySide side = displaySide(info, forSide); if (side != null) { int cmLinePlusOne = (host.getCmLine(((info.line()) - 1), side)) + 1; com.google.gerrit.client.diff.CommentGroup group = group(side, cmLinePlusOne); com.google.gerrit.client.diff.PublishedBox box = new com.google.gerrit.client.diff.PublishedBox(group, getCommentLinkProcessor(), project, getPatchSetIdFromSide(side), info, side, isOpen()); group.add(box); box.setAnnotation(host.getDiffTable().scrollbar.comment(host.getCmFromSide(side), (cmLinePlusOne - 1))); getPublished().put(info.id(), box); } } }",d09ffd523f9ff05e783295324392538eecc2353c,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CommentManager.java,"com.google.gerrit.client.diff.DraftBox addDraftBox(com.google.gerrit.client.diff.DisplaySide side, com.google.gerrit.client.changes.CommentInfo info) { int cmLinePlusOne = (host.getCmLine(((info.line()) - 1), side)) + 1; com.google.gerrit.client.diff.CommentGroup group = group(side, cmLinePlusOne); com.google.gerrit.client.diff.DraftBox box = new com.google.gerrit.client.diff.DraftBox(group, getCommentLinkProcessor(), getPatchSetIdFromSide(side), info, isExpandAll()); if ((info.inReplyTo()) != null) { com.google.gerrit.client.diff.PublishedBox r = getPublished().get(info.inReplyTo()); if (r != null) { r.setReplyBox(box); } } group.add(box); box.setAnnotation(host.getDiffTable().scrollbar.draft(host.getCmFromSide(side), java.lang.Math.max(0, (cmLinePlusOne - 1)))); return box; }",79c47eb153c2bbcb8a72b0e3a659fba80655a424,"com.google.gerrit.client.diff.DraftBox addDraftBox(com.google.gerrit.client.diff.DisplaySide side, com.google.gerrit.client.changes.CommentInfo info) { int cmLinePlusOne = (host.getCmLine(((info.line()) - 1), side)) + 1; com.google.gerrit.client.diff.CommentGroup group = group(side, cmLinePlusOne); com.google.gerrit.client.diff.DraftBox box = new com.google.gerrit.client.diff.DraftBox(group, getCommentLinkProcessor(), getPatchSetIdFromSide(side), project, info, isExpandAll()); if ((info.inReplyTo()) != null) { com.google.gerrit.client.diff.PublishedBox r = getPublished().get(info.inReplyTo()); if (r != null) { r.setReplyBox(box); } } group.add(box); box.setAnnotation(host.getDiffTable().scrollbar.draft(host.getCmFromSide(side), java.lang.Math.max(0, (cmLinePlusOne - 1)))); return box; }",e5d025fdb90774fda2b2bad476269984f78dd031,"com.google.gerrit.client.diff.DraftBox addDraftBox(com.google.gerrit.client.diff.DisplaySide side, com.google.gerrit.client.changes.CommentInfo info) { int cmLinePlusOne = (host.getCmLine(((info.line()) - 1), side)) + 1; com.google.gerrit.client.diff.CommentGroup group = group(side, cmLinePlusOne); com.google.gerrit.client.diff.DraftBox box = new com.google.gerrit.client.diff.DraftBox(group, getCommentLinkProcessor(), project, getPatchSetIdFromSide(side), info, isExpandAll()); if ((info.inReplyTo()) != null) { com.google.gerrit.client.diff.PublishedBox r = getPublished().get(info.inReplyTo()); if (r != null) { r.setReplyBox(box); } } group.add(box); box.setAnnotation(host.getDiffTable().scrollbar.draft(host.getCmFromSide(side), java.lang.Math.max(0, (cmLinePlusOne - 1)))); return box; }",4cc54117b104f3fbab5d91a0cb9b81ae52e4d14f,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Message.java,"private void renderComments(java.util.List<com.google.gerrit.client.changes.CommentInfo> list) { com.google.gerrit.client.ui.CommentLinkProcessor clp = history.getCommentLinkProcessor(); com.google.gerrit.reviewdb.client.PatchSet.Id ps = new com.google.gerrit.reviewdb.client.PatchSet.Id(history.getChangeId(), info._revisionNumber()); java.util.TreeMap<java.lang.String, java.util.List<com.google.gerrit.client.changes.CommentInfo>> m = com.google.gerrit.client.change.Message.byPath(list); java.util.List<com.google.gerrit.client.changes.CommentInfo> l = m.remove(Patch.COMMIT_MSG); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, ps, Util.C.commitMessage(), l)); } l = m.remove(Patch.MERGE_LIST); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, ps, Util.C.mergeList(), l)); } for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.client.changes.CommentInfo>> e : m.entrySet()) { comments.add(new com.google.gerrit.client.change.FileComments(clp, ps, e.getKey(), e.getValue())); } }",abd6214cdbc0c9f7a214e39b93dcd72b2a6ad22f,"private void renderComments(java.util.List<com.google.gerrit.client.changes.CommentInfo> list) { com.google.gerrit.client.ui.CommentLinkProcessor clp = history.getCommentLinkProcessor(); com.google.gerrit.reviewdb.client.PatchSet.Id ps = new com.google.gerrit.reviewdb.client.PatchSet.Id(history.getChangeId(), info._revisionNumber()); java.util.TreeMap<java.lang.String, java.util.List<com.google.gerrit.client.changes.CommentInfo>> m = com.google.gerrit.client.change.Message.byPath(list); java.util.List<com.google.gerrit.client.changes.CommentInfo> l = m.remove(Patch.COMMIT_MSG); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, ps, history.getProject(), Util.C.commitMessage(), l)); } l = m.remove(Patch.MERGE_LIST); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, ps, history.getProject(), Util.C.mergeList(), l)); } for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.client.changes.CommentInfo>> e : m.entrySet()) { comments.add(new com.google.gerrit.client.change.FileComments(clp, ps, history.getProject(), e.getKey(), e.getValue())); } }",1518baeb2831ce8fe5bb7ef593ba4a22622c632b,"private void renderComments(java.util.List<com.google.gerrit.client.changes.CommentInfo> list) { com.google.gerrit.client.ui.CommentLinkProcessor clp = history.getCommentLinkProcessor(); com.google.gerrit.reviewdb.client.PatchSet.Id ps = new com.google.gerrit.reviewdb.client.PatchSet.Id(history.getChangeId(), info._revisionNumber()); java.util.TreeMap<java.lang.String, java.util.List<com.google.gerrit.client.changes.CommentInfo>> m = com.google.gerrit.client.change.Message.byPath(list); java.util.List<com.google.gerrit.client.changes.CommentInfo> l = m.remove(Patch.COMMIT_MSG); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, history.getProject(), ps, Util.C.commitMessage(), l)); } l = m.remove(Patch.MERGE_LIST); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, history.getProject(), ps, Util.C.mergeList(), l)); } for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.client.changes.CommentInfo>> e : m.entrySet()) { comments.add(new com.google.gerrit.client.change.FileComments(clp, history.getProject(), ps, e.getKey(), e.getValue())); } }",ca60f1bbb2c125570f9680a77695f47aec10fd1f,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeEditApi.java,"public static void getMeta(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String path, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.editor.EditFileInfo> cb) { if ((id.get()) != 0) { throw new java.lang.IllegalStateException(""only supported for edits""); } com.google.gerrit.client.changes.ChangeEditApi.editFile(id.getParentKey().get(), path).view(""meta"").get(cb); }",61861789dc1cb324833216c56f74552bcd700bf5,"public static void getMeta(com.google.gerrit.reviewdb.client.PatchSet.Id id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String path, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.editor.EditFileInfo> cb) { if ((id.get()) != 0) { throw new java.lang.IllegalStateException(""only supported for edits""); } com.google.gerrit.client.changes.ChangeEditApi.editFile(id.getParentKey().get(), project, path).view(""meta"").get(cb); }",fe9343924b22129f3296f85fccfbf3542a2af983,"public static void getMeta(@com.google.gerrit.common.Nullable java.lang.String project, com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String path, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.editor.EditFileInfo> cb) { if ((id.get()) != 0) { throw new java.lang.IllegalStateException(""only supported for edits""); } com.google.gerrit.client.changes.ChangeEditApi.editFile(project, id.getParentKey().get(), path).view(""meta"").get(cb); }",2ac637443db6aa77ff7a25ff2ed8f20fc76265b3,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"private void loadCommit(final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev, com.google.gerrit.client.rpc.CallbackGroup group) { if ((rev.isEdit()) || ((rev.commit()) != null)) { return; } com.google.gerrit.client.changes.ChangeApi.commitWithLinks(changeId.get(), rev.name(), group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.CommitInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo.CommitInfo info) { rev.setCommit(info); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); }",efe35cd090a43abd93a8a572a0f7fded04643b1a,"private void loadCommit(final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev, com.google.gerrit.client.rpc.CallbackGroup group) { if ((rev.isEdit()) || ((rev.commit()) != null)) { return; } com.google.gerrit.client.changes.ChangeApi.commitWithLinks(changeId.get(), Project.NameKey.asStringOrNull(project), rev.name(), group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.CommitInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo.CommitInfo info) { rev.setCommit(info); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); }",cc6b387ea58823ae415a5b106d356a5041f0c2a0,"private void loadCommit(com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev, com.google.gerrit.client.rpc.CallbackGroup group) { if ((rev.isEdit()) || ((rev.commit()) != null)) { return; } com.google.gerrit.client.changes.ChangeApi.commitWithLinks(getProject().get(), changeId.get(), rev.name(), group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.CommitInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo.CommitInfo info) { rev.setCommit(info); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); }",e67c8ce178151d8724b5cab4a92987a3aa1fc2ef,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_LineComment.java,"private static java.lang.String url(com.google.gerrit.reviewdb.client.PatchSet.Id ps, com.google.gerrit.client.changes.CommentInfo info) { return com.google.gerrit.client.Dispatcher.toPatch(null, ps, info.path(), ((info.side()) == (com.google.gerrit.extensions.client.Side.PARENT) ? com.google.gerrit.client.diff.DisplaySide.A : com.google.gerrit.client.diff.DisplaySide.B), info.line()); }",0cdc2c460c93febcdd9c295b5b724c44736b6fd2,"private static java.lang.String url(com.google.gerrit.reviewdb.client.PatchSet.Id ps, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.client.changes.CommentInfo info) { return com.google.gerrit.client.Dispatcher.toPatch(null, ps, project, info.path(), ((info.side()) == (com.google.gerrit.extensions.client.Side.PARENT) ? com.google.gerrit.client.diff.DisplaySide.A : com.google.gerrit.client.diff.DisplaySide.B), info.line()); }",cf8a79b42dd77a2003f1d096b31e3614ba8c695c,"private static java.lang.String url(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.PatchSet.Id ps, com.google.gerrit.client.changes.CommentInfo info) { return com.google.gerrit.client.Dispatcher.toPatch(project, null, ps, info.path(), ((info.side()) == (com.google.gerrit.extensions.client.Side.PARENT) ? com.google.gerrit.client.diff.DisplaySide.A : com.google.gerrit.client.diff.DisplaySide.B), info.line()); }",cc72eb7e20cca877882e5bd07e00f02fdad6de3f,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"private java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> loadDrafts(com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev, com.google.gerrit.client.rpc.CallbackGroup group) { final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> r = new java.util.ArrayList<>(1); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.changes.ChangeApi.revision(changeId.get(), rev.name()).view(""drafts"").get(group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>> result) { r.add(result); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); } else { r.add(com.google.gerrit.client.rpc.NativeMap.<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>create()); } return r; }",d7a7c0134322e8b2582852b30d5aff8ea99b865e,"private java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> loadDrafts(com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev, com.google.gerrit.client.rpc.CallbackGroup group) { final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> r = new java.util.ArrayList<>(1); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.changes.ChangeApi.revision(changeId.get(), Project.NameKey.asStringOrNull(project), rev.name()).view(""drafts"").get(group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>> result) { r.add(result); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); } else { r.add(com.google.gerrit.client.rpc.NativeMap.<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>create()); } return r; }",7046651f043591c85f9f2baf8a90fabf78b9fc64,"private java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> loadDrafts(com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev, com.google.gerrit.client.rpc.CallbackGroup group) { final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> r = new java.util.ArrayList<>(1); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.changes.ChangeApi.revision(getProject().get(), changeId.get(), rev.name()).view(""drafts"").get(group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>> result) { r.add(result); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); } else { r.add(com.google.gerrit.client.rpc.NativeMap.<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>create()); } return r; }",08ce736c3765fefdcb9eee903862a9a0b2099b67,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeEditApi.java,"private static com.google.gerrit.client.rpc.RestApi editMessage(int id) { return com.google.gerrit.client.changes.ChangeApi.change(id).view(""edit:message""); }",921b02526c741fc71399ed8ac621c2ec95f3668c,"private static com.google.gerrit.client.rpc.RestApi editMessage(int id, @com.google.gerrit.common.Nullable java.lang.String project) { return com.google.gerrit.client.changes.ChangeApi.change(id, project).view(""edit:message""); }",d224dcc5a0bd318a71f4486ab856957c7c6e92f0,"private static com.google.gerrit.client.rpc.RestApi editMessage(@com.google.gerrit.common.Nullable java.lang.String project, int id) { return com.google.gerrit.client.changes.ChangeApi.change(project, id).view(""edit:message""); }",784947bb854c4516f6d37b31c5b4341fa2faab5b,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_EditActions.java,"@java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.EditActions.setEnabled(true, editButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } else { super.onFailure(err); } }",1aaeadc8b92fad07b6bb337448778aebedfb81ea,"@java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.EditActions.setEnabled(true, editButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, project)); } else { super.onFailure(err); } }",80d660977c2f8872e4a2cff9ca2a32b4e8208ebd,"@java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.EditActions.setEnabled(true, editButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); } else { super.onFailure(err); } }",f2da8a7cd70de18aa81a097d02ddd6b30331a67a,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_EditActions.java,"static void publishEdit(com.google.gerrit.reviewdb.client.Change.Id id, com.google.gwt.user.client.ui.Button... editButtons) { com.google.gerrit.client.changes.ChangeApi.publishEdit(id.get(), com.google.gerrit.client.change.EditActions.cs(id, editButtons)); }",8980ff9a809da6e584a8a403d627dfdf5e1cbc96,"static void publishEdit(com.google.gerrit.reviewdb.client.Change.Id id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gwt.user.client.ui.Button... editButtons) { com.google.gerrit.client.changes.ChangeApi.publishEdit(id.get(), Project.NameKey.asStringOrNull(project), com.google.gerrit.client.change.EditActions.cs(id, project, editButtons)); }",9d6ad31124e9aac3af815ff0514b4a04ad46ebcb,"static void publishEdit(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id id, com.google.gwt.user.client.ui.Button... editButtons) { com.google.gerrit.client.changes.ChangeApi.publishEdit(project.get(), id.get(), com.google.gerrit.client.change.EditActions.cs(project, id, editButtons)); }",4864004baa87e2ae47e495d2af91ec35500df9e1,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_EditActions.java,"static void rebaseEdit(com.google.gerrit.reviewdb.client.Change.Id id, com.google.gwt.user.client.ui.Button... editButtons) { com.google.gerrit.client.changes.ChangeApi.rebaseEdit(id.get(), com.google.gerrit.client.change.EditActions.cs(id, editButtons)); }",4f5ec7a813b8f2113d607bc3e047f221d0a40a6a,"static void rebaseEdit(com.google.gerrit.reviewdb.client.Change.Id id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gwt.user.client.ui.Button... editButtons) { com.google.gerrit.client.changes.ChangeApi.rebaseEdit(id.get(), Project.NameKey.asStringOrNull(project), com.google.gerrit.client.change.EditActions.cs(id, project, editButtons)); }",81cb552b0ab5666bb919b76eeb726a5af6a0092d,"static void rebaseEdit(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id id, com.google.gwt.user.client.ui.Button... editButtons) { com.google.gerrit.client.changes.ChangeApi.rebaseEdit(project.get(), id.get(), com.google.gerrit.client.change.EditActions.cs(project, id, editButtons)); }",010a37093b89a19523e67c004a3613ccd782cc06,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_EditActions.java,"static void deleteEdit(com.google.gerrit.reviewdb.client.Change.Id id, com.google.gwt.user.client.ui.Button... editButtons) { com.google.gerrit.client.changes.ChangeApi.deleteEdit(id.get(), com.google.gerrit.client.change.EditActions.cs(id, editButtons)); }",5baab66c0edd2b4fd4f8747a6acbd12c46afafc2,"static void deleteEdit(com.google.gerrit.reviewdb.client.Change.Id id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gwt.user.client.ui.Button... editButtons) { com.google.gerrit.client.changes.ChangeApi.deleteEdit(id.get(), Project.NameKey.asStringOrNull(project), com.google.gerrit.client.change.EditActions.cs(id, project, editButtons)); }",600cd1e4401c125e0c39f9b0f3a9f31def530465,"static void deleteEdit(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id id, com.google.gwt.user.client.ui.Button... editButtons) { com.google.gerrit.client.changes.ChangeApi.deleteEdit(project.get(), id.get(), com.google.gerrit.client.change.EditActions.cs(project, id, editButtons)); }",2b8e932c2e8d04bc2a34a082101367a8f8e4812e,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_DeleteFileBox.java,"private void delete(java.lang.String path) { hide(); com.google.gerrit.client.changes.ChangeEditApi.delete(changeId.get(), path, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(changeId)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }",7e15642dbd5e0bbfc5dae6a6de63f82d6571d7c8,"private void delete(java.lang.String path) { hide(); com.google.gerrit.client.changes.ChangeEditApi.delete(changeId.get(), Project.NameKey.asStringOrNull(project), path, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(changeId, project)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }",07f15ccf725f87037cc3c20eaa5743f66df3e961,"private void delete(java.lang.String path) { hide(); com.google.gerrit.client.changes.ChangeEditApi.delete(project.get(), changeId.get(), path, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(project, changeId)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }",78c08921d9558f4b22bc88e0d9a5755c8c4287e3,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static com.google.gerrit.client.rpc.RestApi suggestReviewers(int id, java.lang.String q, int n, boolean e) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.change(id).view(""suggest_reviewers"").addParameter(""n"", n).addParameter(""e"", e); if (q != null) { api.addParameter(""q"", q); } return api; }",67dbafd14ce9b4a247e76f76e8bf4f5dec4ef9c2,"public static com.google.gerrit.client.rpc.RestApi suggestReviewers(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String q, int n, boolean e) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.change(id, project).view(""suggest_reviewers"").addParameter(""n"", n).addParameter(""e"", e); if (q != null) { api.addParameter(""q"", q); } return api; }",39bd645d86929f9a5e8b94e445ff70f018b6e10d,"public static com.google.gerrit.client.rpc.RestApi suggestReviewers(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String q, int n, boolean e) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.change(project, id).view(""suggest_reviewers"").addParameter(""n"", n).addParameter(""e"", e); if (q != null) { api.addParameter(""q"", q); } return api; }",6fbe6a9d5a49c0bb3564256f52713b23b8171c90,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void includedIn(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.IncludedInInfo> cb) { com.google.gerrit.client.changes.ChangeApi.call(id, ""in"").get(cb); }",dd0afad7695b58bbb549d6ae95fbbe862bc8bcd5,"public static void includedIn(int id, @com.google.gerrit.common.Nullable java.lang.String project, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.IncludedInInfo> cb) { com.google.gerrit.client.changes.ChangeApi.call(id, project, ""in"").get(cb); }",61fe5248ba74b94e0b0b1a982503e356a60704eb,"public static void includedIn(@com.google.gerrit.common.Nullable java.lang.String project, int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.IncludedInInfo> cb) { com.google.gerrit.client.changes.ChangeApi.call(project, id, ""in"").get(cb); }",0ee8c593e21d277e6ee6ab03d5444b11096ca69b,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"@com.google.gwt.uibinder.client.UiHandler(""deleteEdit"") void onDeleteEdit(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteChangeEdit())) { com.google.gerrit.client.change.EditActions.deleteEdit(changeId, publishEdit, rebaseEdit, deleteEdit); } }",33caab242f5dc49836fd28becfb02b6a50785e47,"@com.google.gwt.uibinder.client.UiHandler(""deleteEdit"") void onDeleteEdit(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteChangeEdit())) { com.google.gerrit.client.change.EditActions.deleteEdit(changeId, project, publishEdit, rebaseEdit, deleteEdit); } }",df0c9e17812d9695d213e612868f3818eaeb26d8,"@com.google.gwt.uibinder.client.UiHandler(""deleteEdit"") void onDeleteEdit(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteChangeEdit())) { com.google.gerrit.client.change.EditActions.deleteEdit(getProject(), changeId, publishEdit, rebaseEdit, deleteEdit); } }",712718cc437f7cd56d7de4e377882fed28791df5,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_EditActions.java,"public static com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject> cs(final com.google.gerrit.reviewdb.client.Change.Id id, final com.google.gwt.user.client.ui.Button... editButtons) { com.google.gerrit.client.change.EditActions.setEnabled(false, editButtons); return new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } @java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.EditActions.setEnabled(true, editButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } else { super.onFailure(err); } } }; }",61059f53072a1467a88614aa6696ab834c6cd9bd,"public static com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject> cs(final com.google.gerrit.reviewdb.client.Change.Id id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gwt.user.client.ui.Button... editButtons) { com.google.gerrit.client.change.EditActions.setEnabled(false, editButtons); return new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, project)); } @java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.EditActions.setEnabled(true, editButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, project)); } else { super.onFailure(err); } } }; }",531f255ab9f5b75fb288aa998e07ab4e5d8b9810,"public static com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject> cs(com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gerrit.reviewdb.client.Change.Id id, com.google.gwt.user.client.ui.Button... editButtons) { com.google.gerrit.client.change.EditActions.setEnabled(false, editButtons); return new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); } @java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.EditActions.setEnabled(true, editButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); } else { super.onFailure(err); } } }; }",620c0622718f9280711007bb96c2d004030a9686,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_Unified.java,"@java.lang.Override protected void preDisplay(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { commentManager = new com.google.gerrit.client.diff.UnifiedCommentManager(this, base, revision, path, result.getCommentLinkProcessor(), getChangeStatus().isOpen()); setTheme(result.getTheme()); display(comments); header.setupPrevNextFiles(comments); }",53778624df849ce47f4a1ea20c361ed951ef3367,"@java.lang.Override protected void preDisplay(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { commentManager = new com.google.gerrit.client.diff.UnifiedCommentManager(this, base, revision, getProject(), path, result.getCommentLinkProcessor(), getChangeStatus().isOpen()); setTheme(result.getTheme()); display(comments); header.setupPrevNextFiles(comments); }",0d1e7d5863b9d9ca0c87983c96bf5c6dc27fa246,"@java.lang.Override protected void preDisplay(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { commentManager = new com.google.gerrit.client.diff.UnifiedCommentManager(this, getProject(), base, revision, path, result.getCommentLinkProcessor(), getChangeStatus().isOpen()); setTheme(result.getTheme()); display(comments); header.setupPrevNextFiles(comments); }",b2fc16d4398960dc540c20c5ae7c358b3a7dd003,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_UpToChangeCommand.java,"@java.lang.Override public void onKeyPress(final com.google.gwt.event.dom.client.KeyPressEvent event) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(revision.getParentKey(), revision.getId())); }",01849fc73ac1f8c8880a3b9de58141885d2e0888,"@java.lang.Override public void onKeyPress(final com.google.gwt.event.dom.client.KeyPressEvent event) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(revision.getParentKey(), project, revision.getId())); }",06e83a76c407d19e328b0645cecb1ef34e30af23,"@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, revision.getParentKey(), revision.getId())); }",df560350e18ad01e0269880ec0098a62f24baf0b,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> m) { files.set(base, new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, rev._number()), style, reply, fileTableMode, ((edit) != null)); files.setValue(m, myLastReply, (comments != null ? comments.get(0) : null), (drafts != null ? drafts.get(0) : null)); }",3f4284fe683efbc30f3344c328588a0871485cb5,"@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> m) { files.set(base, new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, rev._number()), project, style, reply, fileTableMode, ((edit) != null)); files.setValue(m, myLastReply, (comments != null ? comments.get(0) : null), (drafts != null ? drafts.get(0) : null)); }",5aa89305c4809f0a573714d5e737aa096813250d,"@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> m) { files.set(base, new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, rev._number()), getProject(), style, reply, fileTableMode, ((edit) != null)); files.setValue(m, myLastReply, (comments != null ? comments.get(0) : null), (drafts != null ? drafts.get(0) : null)); }",9936f131e86bfc720c2a44056878bcf3c5492afe,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_AddFileBox.java,"private void open(java.lang.String path) { hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, revision._number()), path)); }",49a7c6138b7cdf3c9b455c5e1a16c8e577b986d1,"private void open(java.lang.String path) { hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, revision._number()), project, path)); }",9c90347b878168d5fb8fdd5e152d221d6544c07f,"private void open(java.lang.String path) { hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(project, new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, revision._number()), path)); }",7e309e069c55ce43595941e293a0a23e787113eb,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_DeleteFileAction.java,"void onDelete() { if ((popup) != null) { popup.hide(); return; } if ((deleteBox) == null) { deleteBox = new com.google.gerrit.client.change.DeleteFileBox(changeId, revision); } deleteBox.clearPath(); final com.google.gwt.user.client.ui.PopupPanel p = new com.google.gwt.user.client.ui.PopupPanel(true); p.setStyleName(style.replyBox()); p.addAutoHidePartner(deleteButton.getElement()); p.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { if ((popup) == p) { popup = null; } } }); p.add(deleteBox); p.showRelativeTo(deleteButton); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(p); deleteBox.setFocus(true); popup = p; }",52b785cb3b1146e26711670c1edeca2eeb9b6381,"void onDelete() { if ((popup) != null) { popup.hide(); return; } if ((deleteBox) == null) { deleteBox = new com.google.gerrit.client.change.DeleteFileBox(changeId, project, revision); } deleteBox.clearPath(); final com.google.gwt.user.client.ui.PopupPanel p = new com.google.gwt.user.client.ui.PopupPanel(true); p.setStyleName(style.replyBox()); p.addAutoHidePartner(deleteButton.getElement()); p.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { if ((popup) == p) { popup = null; } } }); p.add(deleteBox); p.showRelativeTo(deleteButton); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(p); deleteBox.setFocus(true); popup = p; }",f0881f06fa9fe8a919505fe9308e47d440c2a4e7,"void onDelete() { if ((popup) != null) { popup.hide(); return; } if ((deleteBox) == null) { deleteBox = new com.google.gerrit.client.change.DeleteFileBox(project, changeId, revision); } deleteBox.clearPath(); final com.google.gwt.user.client.ui.PopupPanel p = new com.google.gwt.user.client.ui.PopupPanel(true); p.setStyleName(style.replyBox()); p.addAutoHidePartner(deleteButton.getElement()); p.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { if ((popup) == p) { popup = null; } } }); p.add(deleteBox); p.showRelativeTo(deleteButton); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(p); deleteBox.setFocus(true); popup = p; }",27bf39e3e0d2290ff479e0d5b5491d5293711157,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_projects_ConfigInfoCache.java,"private void getImpl(final java.lang.Integer id, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry> cb) { java.lang.String name = changeToProject.get(id); if (name != null) { getImpl(name, cb); return; } com.google.gerrit.client.changes.ChangeApi.change(id).get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { changeToProject.put(id, result.project()); getImpl(result.project(), cb); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { cb.onFailure(caught); } }); }",7fa4088062565e862a702a332ab73926c5615773,"private void getImpl(final java.lang.Integer id, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry> cb) { java.lang.String name = changeToProject.get(id); if (name != null) { getImpl(name, cb); return; } com.google.gerrit.client.changes.ChangeApi.change(id, null).get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { changeToProject.put(id, result.project()); getImpl(result.project(), cb); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { cb.onFailure(caught); } }); }",1c987e34a0aa17e1a6e12e310c3ca51f78572da5,"private void getImpl(java.lang.Integer id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry> cb) { java.lang.String name = changeToProject.get(id); if (name != null) { getImpl(name, cb); return; } com.google.gerrit.client.changes.ChangeApi.change(null, id).get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { changeToProject.put(id, result.project()); getImpl(result.project(), cb); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { cb.onFailure(caught); } }); }",03713c53d7edb1d20d6d53b814de1e3b9792187c,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_rpc_RestApi.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.gerrit.client.rpc.RestApi id(int id, java.lang.String project) { return idRaw((((com.google.gwt.http.client.URL.encodePathSegment(project)) + ""~"") + id)); }",7b61663f6063212a0cd16708ba18062917f51913,"public com.google.gerrit.client.rpc.RestApi id(java.lang.String project, int id) { return idRaw((((com.google.gwt.http.client.URL.encodePathSegment(project)) + ""~"") + id)); }",5d6bf40f5a6dc5c19be0e7731824975c7ec4906f,2017-07-26 07:42:44,7
108592,gerrit-httpd_src_main_java_com_google_gerrit_httpd_UrlModule.java,"private com.google.inject.Key<javax.servlet.http.HttpServlet> directChangeById() { return key(new javax.servlet.http.HttpServlet() { private static final long serialVersionUID = 1L; @java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { java.lang.String idString = req.getPathInfo(); if (idString.endsWith(""/"")) { idString = idString.substring(0, ((idString.length()) - 1)); } com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(idString); com.google.gerrit.httpd.UrlModule.toGerrit(com.google.gerrit.common.PageLinks.toChange(id), req, rsp); } catch (java.lang.IllegalArgumentException err) { rsp.sendError(HttpServletResponse.SC_NOT_FOUND); } } }); }",3156c1d84252b84670a98f37bb940d7a50faefa6,"private com.google.inject.Key<javax.servlet.http.HttpServlet> directChangeById() { return key(new javax.servlet.http.HttpServlet() { private static final long serialVersionUID = 1L; @java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { java.lang.String idString = req.getPathInfo(); if (idString.endsWith(""/"")) { idString = idString.substring(0, ((idString.length()) - 1)); } com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(idString); com.google.gerrit.httpd.UrlModule.toGerrit(com.google.gerrit.common.PageLinks.toChange(id, null), req, rsp); } catch (java.lang.IllegalArgumentException err) { rsp.sendError(HttpServletResponse.SC_NOT_FOUND); } } }); }",f65433d36dad0606f1cd71d712c194c2fce7e9c2,"private com.google.inject.Key<javax.servlet.http.HttpServlet> directChangeById() { return key(new javax.servlet.http.HttpServlet() { private static final long serialVersionUID = 1L; @java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { java.lang.String idString = req.getPathInfo(); if (idString.endsWith(""/"")) { idString = idString.substring(0, ((idString.length()) - 1)); } com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(idString); com.google.gerrit.httpd.UrlModule.toGerrit(com.google.gerrit.common.PageLinks.toChange(null, id), req, rsp); } catch (java.lang.IllegalArgumentException err) { rsp.sendError(HttpServletResponse.SC_NOT_FOUND); } } }); }",f79c37503317d07cf66714cff59792fd166cf467,2017-07-26 07:42:44,7
108592,gerrit-httpd_src_main_java_com_google_gerrit_httpd_UrlModule.java,"@java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { java.lang.String idString = req.getPathInfo(); if (idString.endsWith(""/"")) { idString = idString.substring(0, ((idString.length()) - 1)); } com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(idString); com.google.gerrit.httpd.UrlModule.toGerrit(com.google.gerrit.common.PageLinks.toChange(id), req, rsp); } catch (java.lang.IllegalArgumentException err) { rsp.sendError(HttpServletResponse.SC_NOT_FOUND); } }",78f6784e670d245cbc4629c83839c2ecb4e7f3ca,"@java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { java.lang.String idString = req.getPathInfo(); if (idString.endsWith(""/"")) { idString = idString.substring(0, ((idString.length()) - 1)); } com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(idString); com.google.gerrit.httpd.UrlModule.toGerrit(com.google.gerrit.common.PageLinks.toChange(id, null), req, rsp); } catch (java.lang.IllegalArgumentException err) { rsp.sendError(HttpServletResponse.SC_NOT_FOUND); } }",40a2a1ed1380f7849e6c639bd0fc49b65bfb36a6,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { java.lang.String idString = req.getPathInfo(); if (idString.endsWith(""/"")) { idString = idString.substring(0, ((idString.length()) - 1)); } com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(idString); com.google.gerrit.httpd.UrlModule.toGerrit(com.google.gerrit.common.PageLinks.toChange(null, id), req, rsp); } catch (java.lang.IllegalArgumentException err) { rsp.sendError(HttpServletResponse.SC_NOT_FOUND); } }",e4fbbd056a88b1f32a376af68c6d90a149790778,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_SubmitAction.java,"static void call(com.google.gerrit.client.info.ChangeInfo changeInfo, com.google.gerrit.client.info.ChangeInfo.RevisionInfo revisionInfo) { if (com.google.gerrit.client.api.ChangeGlue.onSubmitChange(changeInfo, revisionInfo)) { final com.google.gerrit.reviewdb.client.Change.Id changeId = changeInfo.legacyId(); com.google.gerrit.client.changes.ChangeApi.submit(changeId.get(), revisionInfo.name(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.SubmitInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.SubmitInfo result) { redisplay(); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); } else { super.onFailure(err); } redisplay(); } private void redisplay() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); } }); } }",80c6b70f4cced8a829e0abb625c7f53aff89d327,"static void call(com.google.gerrit.client.info.ChangeInfo changeInfo, com.google.gerrit.client.info.ChangeInfo.RevisionInfo revisionInfo) { if (com.google.gerrit.client.api.ChangeGlue.onSubmitChange(changeInfo, revisionInfo)) { final com.google.gerrit.reviewdb.client.Change.Id changeId = changeInfo.legacyId(); com.google.gerrit.client.changes.ChangeApi.submit(changeId.get(), changeInfo.project(), revisionInfo.name(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.SubmitInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.SubmitInfo result) { redisplay(); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); } else { super.onFailure(err); } redisplay(); } private void redisplay() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, changeInfo.projectNameKey())); } }); } }",c202362dbad3e6014436661b1ea068efd52df064,"static void call(com.google.gerrit.client.info.ChangeInfo changeInfo, com.google.gerrit.client.info.ChangeInfo.RevisionInfo revisionInfo) { if (com.google.gerrit.client.api.ChangeGlue.onSubmitChange(changeInfo, revisionInfo)) { final com.google.gerrit.reviewdb.client.Change.Id changeId = changeInfo.legacyId(); com.google.gerrit.client.changes.ChangeApi.submit(changeInfo.project(), changeId.get(), revisionInfo.name(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.SubmitInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.SubmitInfo result) { redisplay(); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); } else { super.onFailure(err); } redisplay(); } private void redisplay() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeInfo.projectNameKey(), changeId)); } }); } }",f11f4a6ff2d5c0a260420e30f0b60ee9ee13c8dd,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_SubmitAction.java,private void redisplay() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); },164c10c10e4370e8cc9098d1f2d5725c38ecd786,"private void redisplay() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, changeInfo.projectNameKey())); }",0f5fb55e89fd3a4b15757924ca64fa84918406dd,"private void redisplay() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeInfo.projectNameKey(), changeId)); }",16b2d5866ced41ccd0004fdcb795d6e5899f1073,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_FileTable.java,"void onRestore(int idx) { java.lang.String path = list.get(idx).path(); com.google.gerrit.client.changes.ChangeEditApi.restore(curr.getParentKey().get(), path, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(curr.getParentKey())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }",3fbe538f08c1bb4c5515d175c43681f135a7e166,"void onRestore(int idx) { java.lang.String path = list.get(idx).path(); com.google.gerrit.client.changes.ChangeEditApi.restore(curr.getParentKey().get(), Project.NameKey.asStringOrNull(project), path, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(curr.getParentKey(), project)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }",a5cc733f6698fa9530b3f07fb5a02696e3f61527,"void onRestore(int idx) { java.lang.String path = list.get(idx).path(); com.google.gerrit.client.changes.ChangeEditApi.restore(project.get(), curr.getParentKey().get(), path, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(project, curr.getParentKey())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }",45a5810314bdbe0f0b906ab74c369762b3f6590a,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide.java,"private java.util.List<com.google.gerrit.client.ui.InlineHyperlink> getUnifiedDiffLink() { com.google.gerrit.client.ui.InlineHyperlink toUnifiedDiffLink = new com.google.gerrit.client.ui.InlineHyperlink(); toUnifiedDiffLink.setHTML(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.unifiedDiff())); toUnifiedDiffLink.setTargetHistoryToken(com.google.gerrit.client.Dispatcher.toUnified(base, revision, path)); toUnifiedDiffLink.setTitle(PatchUtil.C.unifiedDiff()); return java.util.Collections.singletonList(toUnifiedDiffLink); }",429416673a47ce6a5e6ab45b0e275fcec185d9b0,"private java.util.List<com.google.gerrit.client.ui.InlineHyperlink> getUnifiedDiffLink() { com.google.gerrit.client.ui.InlineHyperlink toUnifiedDiffLink = new com.google.gerrit.client.ui.InlineHyperlink(); toUnifiedDiffLink.setHTML(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.unifiedDiff())); toUnifiedDiffLink.setTargetHistoryToken(com.google.gerrit.client.Dispatcher.toUnified(base, revision, getProject(), path)); toUnifiedDiffLink.setTitle(PatchUtil.C.unifiedDiff()); return java.util.Collections.singletonList(toUnifiedDiffLink); }",8f7e17eb7b9cb52851f772c6e4a5b499bd32314b,"private java.util.List<com.google.gerrit.client.ui.InlineHyperlink> getUnifiedDiffLink() { com.google.gerrit.client.ui.InlineHyperlink toUnifiedDiffLink = new com.google.gerrit.client.ui.InlineHyperlink(); toUnifiedDiffLink.setHTML(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.unifiedDiff())); toUnifiedDiffLink.setTargetHistoryToken(com.google.gerrit.client.Dispatcher.toUnified(getProject(), base, revision, path)); toUnifiedDiffLink.setTitle(PatchUtil.C.unifiedDiff()); return java.util.Collections.singletonList(toUnifiedDiffLink); }",3769f95d29d1072b6280ddbb0eb07677768664f4,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_FileTable.java,"private java.lang.String url(com.google.gerrit.client.info.FileInfo info) { return info.binary() ? com.google.gerrit.client.Dispatcher.toUnified(base, curr, info.path()) : (mode) == (com.google.gerrit.client.change.FileTable.Mode.REVIEW) ? com.google.gerrit.client.Dispatcher.toPatch(base, curr, info.path()) : com.google.gerrit.client.Dispatcher.toEditScreen(curr, info.path()); }",a58084c859004c409da8f220a6c819f650736465,"private java.lang.String url(com.google.gerrit.client.info.FileInfo info) { return info.binary() ? com.google.gerrit.client.Dispatcher.toUnified(base, curr, project, info.path()) : (mode) == (com.google.gerrit.client.change.FileTable.Mode.REVIEW) ? com.google.gerrit.client.Dispatcher.toPatch(base, curr, project, info.path()) : com.google.gerrit.client.Dispatcher.toEditScreen(curr, project, info.path()); }",29ce22983a92a2f12f87e10dc061396ae43899bd,"private java.lang.String url(com.google.gerrit.client.info.FileInfo info) { return info.binary() ? com.google.gerrit.client.Dispatcher.toUnified(project, base, curr, info.path()) : (mode) == (com.google.gerrit.client.change.FileTable.Mode.REVIEW) ? com.google.gerrit.client.Dispatcher.toPatch(project, base, curr, info.path()) : com.google.gerrit.client.Dispatcher.toEditScreen(project, curr, info.path()); }",1ab06853f10193fa1fda00547c1425313df55679,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_FileTable.java,"void onDelete(int idx) { java.lang.String path = list.get(idx).path(); com.google.gerrit.client.changes.ChangeEditApi.delete(curr.getParentKey().get(), path, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(curr.getParentKey())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }",302b4ec4ec0f39b4b7aac59f0d0a83e841812a54,"void onDelete(int idx) { java.lang.String path = list.get(idx).path(); com.google.gerrit.client.changes.ChangeEditApi.delete(curr.getParentKey().get(), Project.NameKey.asStringOrNull(project), path, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(curr.getParentKey(), project)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }",0c903ba9bbc4e5daee24f6d3823050580562ffe2,"void onDelete(int idx) { java.lang.String path = list.get(idx).path(); com.google.gerrit.client.changes.ChangeEditApi.delete(project.get(), curr.getParentKey().get(), path, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(project, curr.getParentKey())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }",744d001dc5a2e3c38ec9e483a5a931845460affe,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_FileTable.java,@java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(curr.getParentKey())); },b2d32b8ec14c3ff5b9fd09499cba00e36ab32172,"@java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(curr.getParentKey(), project)); }",8995d1cbbd6221cba4e216d011b84cc3fe9a3ddb,"@java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(project, curr.getParentKey())); }",011b33e92bfd8e3d0b3f8fdd8ee24059445aba7d,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_FileTable.java,"private void setReviewed(com.google.gerrit.client.info.FileInfo info, boolean r) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(curr).view(""files"").id(info.path()).view(""reviewed""); if (r) { api.put(com.google.gerrit.client.rpc.CallbackGroup.<com.google.gerrit.client.changes.ReviewInfo>emptyCallback()); } else { api.delete(com.google.gerrit.client.rpc.CallbackGroup.<com.google.gerrit.client.changes.ReviewInfo>emptyCallback()); } }",faca792dfa0f7b9048df68da88c4a4f2103a1f23,"private void setReviewed(com.google.gerrit.client.info.FileInfo info, boolean r) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(curr, Project.NameKey.asStringOrNull(project)).view(""files"").id(info.path()).view(""reviewed""); if (r) { api.put(com.google.gerrit.client.rpc.CallbackGroup.<com.google.gerrit.client.changes.ReviewInfo>emptyCallback()); } else { api.delete(com.google.gerrit.client.rpc.CallbackGroup.<com.google.gerrit.client.changes.ReviewInfo>emptyCallback()); } }",cdd9197fcbb17724bf905657d842ce0e63286fbf,"private void setReviewed(com.google.gerrit.client.info.FileInfo info, boolean r) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(project.get(), curr).view(""files"").id(info.path()).view(""reviewed""); if (r) { api.put(com.google.gerrit.client.rpc.CallbackGroup.<com.google.gerrit.client.changes.ReviewInfo>emptyCallback()); } else { api.delete(com.google.gerrit.client.rpc.CallbackGroup.<com.google.gerrit.client.changes.ReviewInfo>emptyCallback()); } }",1fef43147053ff9f6270859291b70279bddcfafd,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DiffScreen.java,"@java.lang.Override public void onSuccess(java.lang.Void result) { java.lang.String rev = java.lang.String.valueOf(revision.get()); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, base.asString(), rev), new com.google.gerrit.client.change.ChangeScreen(changeId, base, rev, openReplyBox, FileTable.Mode.REVIEW)); }",f3bde33950cbde1a4ff95535dc36077345ad9fbc,"@java.lang.Override public void onSuccess(java.lang.Void result) { java.lang.String rev = java.lang.String.valueOf(revision.get()); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, project, base.asString(), rev), new com.google.gerrit.client.change.ChangeScreen(changeId, null, base, rev, openReplyBox, FileTable.Mode.REVIEW)); }",b8159e4d7c302280620b18a3b8bb7d077acccaeb,"@java.lang.Override public void onSuccess(java.lang.Void result) { java.lang.String rev = java.lang.String.valueOf(revision.get()); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, changeId, base.asString(), rev), new com.google.gerrit.client.change.ChangeScreen(project, changeId, base, rev, openReplyBox, FileTable.Mode.REVIEW)); }",36e56bc74ec603e3cb51737b9010c6cec27fe6d0,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DiffScreen.java,"private void countParents(com.google.gerrit.client.rpc.CallbackGroup cbg) { com.google.gerrit.client.changes.ChangeApi.revision(changeId.get(), revision.getId()).view(""commit"").get(cbg.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.CommitInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo.CommitInfo info) { parents = info.parents().length(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { parents = 0; } })); }",679d104edc76ab50a671c429ae1591df2a913b2a,"private void countParents(com.google.gerrit.client.rpc.CallbackGroup cbg) { com.google.gerrit.client.changes.ChangeApi.revision(changeId.get(), ((project) == null ? null : project.get()), revision.getId()).view(""commit"").get(cbg.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.CommitInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo.CommitInfo info) { parents = info.parents().length(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { parents = 0; } })); }",b268ba70029c0501f6b5617a1a54372a81420493,"private void countParents(com.google.gerrit.client.rpc.CallbackGroup cbg) { com.google.gerrit.client.changes.ChangeApi.revision(Project.NameKey.asStringOrNull(project), changeId.get(), revision.getId()).view(""commit"").get(cbg.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.CommitInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo.CommitInfo info) { parents = info.parents().length(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { parents = 0; } })); }",75b647c7de171fdb4c354c0cb0fb8ed5b9cb76ea,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DiffScreen.java,"void reloadDiffInfo() { int id = ++(reloadVersionId); com.google.gerrit.client.diff.DiffApi.diff(revision, path).base(base.asPatchSetId()).wholeFile().intraline(prefs.intralineDifference()).ignoreWhitespace(prefs.ignoreWhitespace()).get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.diff.DiffInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.diff.DiffInfo diffInfo) { if ((id == (reloadVersionId)) && (isAttached())) { diff = diffInfo; operation(() -> { skipManager.removeAll(); getChunkManager().reset(); getDiffTable().scrollbar.removeDiffAnnotations(); setShowIntraline(prefs.intralineDifference()); render(diff); skipManager.render(prefs.context(), diff); }); } } }); }",ea2dbb30af84b3a5129eba651474ae5edc0e2584,"void reloadDiffInfo() { int id = ++(reloadVersionId); com.google.gerrit.client.diff.DiffApi.diff(revision, Project.NameKey.asStringOrNull(project), path).base(base.asPatchSetId()).wholeFile().intraline(prefs.intralineDifference()).ignoreWhitespace(prefs.ignoreWhitespace()).get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.diff.DiffInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.diff.DiffInfo diffInfo) { if ((id == (reloadVersionId)) && (isAttached())) { diff = diffInfo; operation(() -> { skipManager.removeAll(); getChunkManager().reset(); getDiffTable().scrollbar.removeDiffAnnotations(); setShowIntraline(prefs.intralineDifference()); render(diff); skipManager.render(prefs.context(), diff); }); } } }); }",5c536f0f7c6c1fbcb2aba606fa4ba79a49f4c14b,"void reloadDiffInfo() { int id = ++(reloadVersionId); com.google.gerrit.client.diff.DiffApi.diff(Project.NameKey.asStringOrNull(project), revision, path).base(base.asPatchSetId()).wholeFile().intraline(prefs.intralineDifference()).ignoreWhitespace(prefs.ignoreWhitespace()).get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.diff.DiffInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.diff.DiffInfo diffInfo) { if ((id == (reloadVersionId)) && (isAttached())) { diff = diffInfo; operation(() -> { skipManager.removeAll(); getChunkManager().reset(); getDiffTable().scrollbar.removeDiffAnnotations(); setShowIntraline(prefs.intralineDifference()); render(diff); skipManager.render(prefs.context(), diff); }); } } }); }",aa134fee9546b06caa46bbc1f07aa4bde6a002bd,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DiffScreen.java,"private java.lang.Runnable openEditScreen(net.codemirror.lib.CodeMirror cm) { return () -> { net.codemirror.lib.CodeMirror.LineHandle handle = cm.extras().activeLine(); int line = (cm.getLineNumber(handle)) + 1; if (Patch.COMMIT_MSG.equals(path)) { line = adjustCommitMessageLine(line); } java.lang.String token = com.google.gerrit.client.Dispatcher.toEditScreen(revision, path, line); if (!(com.google.gerrit.client.Gerrit.isSignedIn())) { com.google.gerrit.client.Gerrit.doSignIn(token); } else { com.google.gerrit.client.Gerrit.display(token); } }; }",c0b83ef24e8323c1fa9e84796859df63e62c8fb9,"private java.lang.Runnable openEditScreen(net.codemirror.lib.CodeMirror cm) { return () -> { net.codemirror.lib.CodeMirror.LineHandle handle = cm.extras().activeLine(); int line = (cm.getLineNumber(handle)) + 1; if (Patch.COMMIT_MSG.equals(path)) { line = adjustCommitMessageLine(line); } java.lang.String token = com.google.gerrit.client.Dispatcher.toEditScreen(revision, project, path, line); if (!(com.google.gerrit.client.Gerrit.isSignedIn())) { com.google.gerrit.client.Gerrit.doSignIn(token); } else { com.google.gerrit.client.Gerrit.display(token); } }; }",fa34ae98a1ad01aa8972bc50e4cb2838d0e4617e,"private java.lang.Runnable openEditScreen(net.codemirror.lib.CodeMirror cm) { return () -> { net.codemirror.lib.CodeMirror.LineHandle handle = cm.extras().activeLine(); int line = (cm.getLineNumber(handle)) + 1; if (Patch.COMMIT_MSG.equals(path)) { line = adjustCommitMessageLine(line); } java.lang.String token = com.google.gerrit.client.Dispatcher.toEditScreen(project, revision, path, line); if (!(com.google.gerrit.client.Gerrit.isSignedIn())) { com.google.gerrit.client.Gerrit.doSignIn(token); } else { com.google.gerrit.client.Gerrit.display(token); } }; }",fc1f2a015d9a92d8584458592d1e416b067a75bd,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DiffScreen.java,"void prefetchNextFile() { java.lang.String nextPath = header.getNextPath(); if (nextPath != null) { com.google.gerrit.client.diff.DiffApi.diff(revision, nextPath).base(base.asPatchSetId()).wholeFile().intraline(prefs.intralineDifference()).ignoreWhitespace(prefs.ignoreWhitespace()).get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.diff.DiffInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.diff.DiffInfo info) { new net.codemirror.mode.ModeInjector().add(getContentType(info.metaA())).add(getContentType(info.metaB())).inject(com.google.gerrit.client.rpc.CallbackGroup.<java.lang.Void>emptyCallback()); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }",e11b8545eec19b1e0981396a339308bff0fe6fc2,"void prefetchNextFile() { java.lang.String nextPath = header.getNextPath(); if (nextPath != null) { com.google.gerrit.client.diff.DiffApi.diff(revision, Project.NameKey.asStringOrNull(project), nextPath).base(base.asPatchSetId()).wholeFile().intraline(prefs.intralineDifference()).ignoreWhitespace(prefs.ignoreWhitespace()).get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.diff.DiffInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.diff.DiffInfo info) { new net.codemirror.mode.ModeInjector().add(getContentType(info.metaA())).add(getContentType(info.metaB())).inject(com.google.gerrit.client.rpc.CallbackGroup.<java.lang.Void>emptyCallback()); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }",adf9cad80fac92e265cab958797662530b2e58fe,"void prefetchNextFile() { java.lang.String nextPath = header.getNextPath(); if (nextPath != null) { com.google.gerrit.client.diff.DiffApi.diff(Project.NameKey.asStringOrNull(project), revision, nextPath).base(base.asPatchSetId()).wholeFile().intraline(prefs.intralineDifference()).ignoreWhitespace(prefs.ignoreWhitespace()).get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.diff.DiffInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.diff.DiffInfo info) { new net.codemirror.mode.ModeInjector().add(getContentType(info.metaA())).add(getContentType(info.metaB())).inject(com.google.gerrit.client.rpc.CallbackGroup.<java.lang.Void>emptyCallback()); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }",bb31382c01b8ac2ba97fe720008dee45568c3b02,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DiffScreen.java,"private java.lang.Runnable upToChange(boolean openReplyBox) { return () -> { com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); getCommentManager().saveAllDrafts(group); group.done(); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { java.lang.String rev = java.lang.String.valueOf(revision.get()); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, base.asString(), rev), new com.google.gerrit.client.change.ChangeScreen(changeId, base, rev, openReplyBox, FileTable.Mode.REVIEW)); } }); }; }",d89cc79f8a7e22c475bb9d56b7fe6b1b7752155e,"private java.lang.Runnable upToChange(boolean openReplyBox) { return () -> { com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); getCommentManager().saveAllDrafts(group); group.done(); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { java.lang.String rev = java.lang.String.valueOf(revision.get()); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, project, base.asString(), rev), new com.google.gerrit.client.change.ChangeScreen(changeId, null, base, rev, openReplyBox, FileTable.Mode.REVIEW)); } }); }; }",8ea0d0ea5c954c5296c3c5e818cc469ca405db58,"private java.lang.Runnable upToChange(boolean openReplyBox) { return () -> { com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); getCommentManager().saveAllDrafts(group); group.done(); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { java.lang.String rev = java.lang.String.valueOf(revision.get()); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, changeId, base.asString(), rev), new com.google.gerrit.client.change.ChangeScreen(project, changeId, base, rev, openReplyBox, FileTable.Mode.REVIEW)); } }); }; }",12cd148d27a962778c47266525d86f3bfca01f9f,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RenameFileBox.java,"private void rename(java.lang.String path, java.lang.String newPath) { hide(); com.google.gerrit.client.changes.ChangeEditApi.rename(changeId.get(), path, newPath, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(changeId)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }",2b2d2e39368e0a79ec9d556cb56580ff643c767a,"private void rename(java.lang.String path, java.lang.String newPath) { hide(); com.google.gerrit.client.changes.ChangeEditApi.rename(changeId.get(), Project.NameKey.asStringOrNull(project), path, newPath, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(changeId, project)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }",dc69a0dc22da4759ccb0e322a1a7859ba40a6065,"private void rename(java.lang.String path, java.lang.String newPath) { hide(); com.google.gerrit.client.changes.ChangeEditApi.rename(project.get(), changeId.get(), path, newPath, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(project, changeId)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }",0d737000b3e244d206b2900f4977162a7a9c8e93,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_api_DefaultActions.java,"static void invoke(com.google.gerrit.client.info.ChangeInfo change, com.google.gerrit.client.info.ActionInfo action, com.google.gerrit.client.rpc.RestApi api) { com.google.gerrit.client.api.DefaultActions.invoke(action, api, com.google.gerrit.client.api.DefaultActions.callback(com.google.gerrit.common.PageLinks.toChange(change.legacyId()))); }",915f290a969d32a6a7c17f48547b6695860f11df,"static void invoke(com.google.gerrit.client.info.ChangeInfo change, com.google.gerrit.client.info.ActionInfo action, com.google.gerrit.client.rpc.RestApi api) { com.google.gerrit.client.api.DefaultActions.invoke(action, api, com.google.gerrit.client.api.DefaultActions.callback(com.google.gerrit.common.PageLinks.toChange(change.legacyId(), change.projectNameKey()))); }",3b4fe5a85fc55789c73f464fd111b08bab18faf8,"static void invoke(com.google.gerrit.client.info.ChangeInfo change, com.google.gerrit.client.info.ActionInfo action, com.google.gerrit.client.rpc.RestApi api) { com.google.gerrit.client.api.DefaultActions.invoke(action, api, com.google.gerrit.client.api.DefaultActions.callback(com.google.gerrit.common.PageLinks.toChange(change.projectNameKey(), change.legacyId()))); }",7d41871f08fd0ba1a6ed9568c3bc5657744a6caa,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,"private static void codemirror(final java.lang.String token, final com.google.gerrit.client.DiffObject base, final com.google.gerrit.reviewdb.client.Patch.Key id, final com.google.gerrit.client.diff.DisplaySide side, final int line) { com.google.gwt.core.client.GWT.runAsync(new com.google.gerrit.client.Dispatcher.AsyncSplit(token) { @java.lang.Override public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.diff.SideBySide(base, com.google.gerrit.client.DiffObject.patchSet(id.getParentKey()), id.get(), side, line)); } }); }",d6e2ff7401e54a299e1d13190faf02da9ae9d552,"private static void codemirror(final java.lang.String token, final com.google.gerrit.client.DiffObject base, final com.google.gerrit.reviewdb.client.Patch.Key id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gerrit.client.diff.DisplaySide side, final int line) { com.google.gwt.core.client.GWT.runAsync(new com.google.gerrit.client.Dispatcher.AsyncSplit(token) { @java.lang.Override public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.diff.SideBySide(base, com.google.gerrit.client.DiffObject.patchSet(id.getParentKey()), project, id.get(), side, line)); } }); }",1bedb93f3ac33871f234567b4fea4f37fd5a1351,"private static void codemirror(final java.lang.String token, final com.google.gerrit.client.DiffObject base, @com.google.gerrit.common.Nullable final com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gerrit.reviewdb.client.Patch.Key id, final com.google.gerrit.client.diff.DisplaySide side, final int line) { com.google.gwt.core.client.GWT.runAsync(new com.google.gerrit.client.Dispatcher.AsyncSplit(token) { @java.lang.Override public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.diff.SideBySide(project, base, com.google.gerrit.client.DiffObject.patchSet(id.getParentKey()), id.get(), side, line)); } }); }",b20f50090e22ed29d10ac761dec4e1f29839eef7,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"@com.google.gwt.uibinder.client.UiHandler(""permalink"") void onReload(com.google.gwt.event.dom.client.ClickEvent e) { e.preventDefault(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); }",a3f752d885bcb69be8acd66871fb5db58a6320c0,"@com.google.gwt.uibinder.client.UiHandler(""permalink"") void onReload(com.google.gwt.event.dom.client.ClickEvent e) { e.preventDefault(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, project)); }",70fe94baf194a50145529d546e016d7ac6f73a04,"@com.google.gwt.uibinder.client.UiHandler(""permalink"") void onReload(com.google.gwt.event.dom.client.ClickEvent e) { e.preventDefault(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, changeId)); }",05ab80da5c70d5210579e3bd3b502619b92b30d5,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide.java,"@java.lang.Override com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry> getScreenLoadCallback(final com.google.gerrit.client.diff.CommentsCollections comments) { return new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry>(this) { @java.lang.Override protected void preDisplay(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { commentManager = new com.google.gerrit.client.diff.SideBySideCommentManager(com.google.gerrit.client.diff.SideBySide.this, base, revision, path, result.getCommentLinkProcessor(), getChangeStatus().isOpen()); setTheme(result.getTheme()); display(comments); header.setupPrevNextFiles(comments); } }; }",4e54d52b83209de35044b8b313e841f4f528ea8e,"@java.lang.Override com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry> getScreenLoadCallback(final com.google.gerrit.client.diff.CommentsCollections comments) { return new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry>(this) { @java.lang.Override protected void preDisplay(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { commentManager = new com.google.gerrit.client.diff.SideBySideCommentManager(com.google.gerrit.client.diff.SideBySide.this, base, revision, getProject(), path, result.getCommentLinkProcessor(), getChangeStatus().isOpen()); setTheme(result.getTheme()); display(comments); header.setupPrevNextFiles(comments); } }; }",8541f389a19ecd6a11e3346e3a64861bcb3f1fbe,"@java.lang.Override com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry> getScreenLoadCallback(final com.google.gerrit.client.diff.CommentsCollections comments) { return new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry>(this) { @java.lang.Override protected void preDisplay(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { commentManager = new com.google.gerrit.client.diff.SideBySideCommentManager(com.google.gerrit.client.diff.SideBySide.this, getProject(), base, revision, path, result.getCommentLinkProcessor(), getChangeStatus().isOpen()); setTheme(result.getTheme()); display(comments); header.setupPrevNextFiles(comments); } }; }",cfcf1a4edb221b057cee2f39a555793bad3ca8e6,2017-07-26 07:42:44,7
108592,gerrit-common_src_main_java_com_google_gerrit_common_PageLinks.java,"public static java.lang.String toChange(com.google.gerrit.reviewdb.client.Change.Id c, java.lang.String b, java.lang.String p) { java.lang.String u = (""/c/"" + c) + ""/""; if (b != null) { u += b + ""..""; } u += p; return u; }",fe6f2b1594d910d67aae3ff1c9803737400a2221,"public static java.lang.String toChange(com.google.gerrit.reviewdb.client.Change.Id c, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String b, java.lang.String p) { java.lang.String u = com.google.gerrit.common.PageLinks.toChange(c, project); if (b != null) { u += b + ""..""; } u += p; return u; }",4f7a34d497f7425232723b046aec9c85c0e02a07,"public static java.lang.String toChangeId(@com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id c) { if (project == null) { return java.lang.String.valueOf(c.get()); } return ((project.get()) + (com.google.gerrit.common.PageLinks.PROJECT_CHANGE_DELIMITER)) + (c.get()); }",bebb425ffccfab4d0008a6a50ce9a8e1961fed41,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_CherryPickAction.java,"@java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.cherrypick(info.legacyId().get(), revision, getDestinationBranch(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); }",7d94d90a7cee492919985c63aef98842e807e1c1,"@java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.cherrypick(info.legacyId().get(), revision, getDestinationBranch(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId(), project)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); }",0377a7643a1a15460db1b04a22dd1a3f88797357,"@java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.cherrypick(info.project(), info.legacyId().get(), revision, getDestinationBranch(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, result.legacyId())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); }",b122ff8a345844c3b17496d2b9b3382bafb861d4,2017-07-26 07:42:44,7
108592,gerrit-common_src_main_java_com_google_gerrit_common_PageLinks.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.lang.String toChangeNoSlash(com.google.gerrit.reviewdb.client.Change.Id c, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project) { if (project != null) { return ((""/c/"" + (project.get())) + (com.google.gerrit.common.PageLinks.PROJECT_CHANGE_DELIMITER)) + c; } return ""/c/"" + c; }",899d54412f06c850ac6e0f836fa796220ba70e6f,"private static java.lang.String toChangeNoSlash(@com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id c) { if (project != null) { return ((""/c/"" + (project.get())) + (com.google.gerrit.common.PageLinks.PROJECT_CHANGE_DELIMITER)) + c; } return ""/c/"" + c; }",f180c1433a5e5de28f65b2a4927ca2af7b39ff78,2017-07-26 07:42:44,7
108592,gerrit-common_src_main_java_com_google_gerrit_common_PageLinks.java,"public static java.lang.String toChangeInEditMode(com.google.gerrit.reviewdb.client.Change.Id c) { return (""/c/"" + c) + "",edit/""; }",a81f6c169383770015e93a19a134d096d8d4e719,"public static java.lang.String toChangeInEditMode(com.google.gerrit.reviewdb.client.Change.Id c, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project) { return (com.google.gerrit.common.PageLinks.toChangeNoSlash(c, project)) + "",edit/""; }",7e69e1865f2800b8332d3adb21a15fe61d64fe74,"public static java.lang.String toChangeInEditMode(@com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id c) { return (com.google.gerrit.common.PageLinks.toChangeNoSlash(project, c)) + "",edit/""; }",45c7d825c7c51df3e2d5762feed825b3c614ee69,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"private void loadDiff(com.google.gerrit.client.DiffObject base, com.google.gerrit.client.info.ChangeInfo.RevisionInfo baseRev, com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev, java.sql.Timestamp myLastReply, com.google.gerrit.client.rpc.CallbackGroup group) { java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> comments = loadComments(rev, group); java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> drafts = loadDrafts(rev, group); loadFileList(base, baseRev, rev, myLastReply, group, comments, drafts); if ((com.google.gerrit.client.Gerrit.isSignedIn()) && ((fileTableMode) == (FileTable.Mode.REVIEW))) { com.google.gerrit.client.changes.ChangeApi.revision(changeId.get(), rev.name()).view(""files"").addParameterTrue(""reviewed"").get(group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { files.markReviewed(result); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); } }",915a907de41306adcd301b8ad8763305617a8ad7,"private void loadDiff(com.google.gerrit.client.DiffObject base, com.google.gerrit.client.info.ChangeInfo.RevisionInfo baseRev, com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev, java.sql.Timestamp myLastReply, com.google.gerrit.client.rpc.CallbackGroup group) { java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> comments = loadComments(rev, group); java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> drafts = loadDrafts(rev, group); loadFileList(base, baseRev, rev, myLastReply, group, comments, drafts); if ((com.google.gerrit.client.Gerrit.isSignedIn()) && ((fileTableMode) == (FileTable.Mode.REVIEW))) { com.google.gerrit.client.changes.ChangeApi.revision(changeId.get(), Project.NameKey.asStringOrNull(project), rev.name()).view(""files"").addParameterTrue(""reviewed"").get(group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { files.markReviewed(result); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); } }",acfe1583eb1c50d8415db24ef82bd1c7ea77e149,"private void loadDiff(com.google.gerrit.client.DiffObject base, com.google.gerrit.client.info.ChangeInfo.RevisionInfo baseRev, com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev, java.sql.Timestamp myLastReply, com.google.gerrit.client.rpc.CallbackGroup group) { java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> comments = loadComments(rev, group); java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> drafts = loadDrafts(rev, group); loadFileList(base, baseRev, rev, myLastReply, group, comments, drafts); if ((com.google.gerrit.client.Gerrit.isSignedIn()) && ((fileTableMode) == (FileTable.Mode.REVIEW))) { com.google.gerrit.client.changes.ChangeApi.revision(getProject().get(), changeId.get(), rev.name()).view(""files"").addParameterTrue(""reviewed"").get(group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { files.markReviewed(result); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); } }",0f6b63869b0a45921151dc13078ff71279ed5cff,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"@com.google.gwt.uibinder.client.UiHandler(""rebaseEdit"") void onRebaseEdit(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.change.EditActions.rebaseEdit(changeId, publishEdit, rebaseEdit, deleteEdit); }",2a4fd9c7f22d6b5e8c5f6928153089c081dbb6de,"@com.google.gwt.uibinder.client.UiHandler(""rebaseEdit"") void onRebaseEdit(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.change.EditActions.rebaseEdit(changeId, project, publishEdit, rebaseEdit, deleteEdit); }",577cc565676d48715b2b4c6683dcdcb7b4005724,"@com.google.gwt.uibinder.client.UiHandler(""rebaseEdit"") void onRebaseEdit(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.change.EditActions.rebaseEdit(getProject(), changeId, publishEdit, rebaseEdit, deleteEdit); }",f475f76d758d68f4668b97cacd62a8c57114a1f0,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"private void updateToken(com.google.gerrit.client.info.ChangeInfo info, com.google.gerrit.client.DiffObject base, com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev) { java.lang.StringBuilder token = new java.lang.StringBuilder(""/c/"").append(info._number()).append(""/""); if ((base.asString()) != null) { token.append(base.asString()).append(""..""); } if (((base.asString()) != null) || (!(rev.name().equals(info.currentRevision())))) { token.append(rev._number()); } setToken(token.toString()); }",a7f05c20a9916315f66bcc14687179de877b4882,"private void updateToken(com.google.gerrit.client.info.ChangeInfo info, com.google.gerrit.client.DiffObject base, com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev) { java.lang.StringBuilder token = new java.lang.StringBuilder(""/c/""); if ((project) != null) { token.append(project.get()); token.append(PageLinks.PROJECT_CHANGE_DELIMITER); } token.append(info._number()).append(""/""); if ((base.asString()) != null) { token.append(base.asString()).append(""..""); } if (((base.asString()) != null) || (!(rev.name().equals(info.currentRevision())))) { token.append(rev._number()); } setToken(token.toString()); }",488f74ed407881a6336fdb4e6acdbb4dde1586e4,"private void updateToken(com.google.gerrit.client.info.ChangeInfo info, com.google.gerrit.client.DiffObject base, com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev) { java.lang.StringBuilder token = new java.lang.StringBuilder(""/c/"").append(com.google.gerrit.common.PageLinks.toChangeId(info.projectNameKey(), info.legacyId())).append(""/""); if ((base.asString()) != null) { token.append(base.asString()).append(""..""); } if (((base.asString()) != null) || (!(rev.name().equals(info.currentRevision())))) { token.append(rev._number()); } setToken(token.toString()); }",bdbff8411e5f19074ef3b3a1975f39e5f2faa570,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"@com.google.gwt.uibinder.client.UiHandler(""publishEdit"") void onPublishEdit(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.change.EditActions.publishEdit(changeId, publishEdit, rebaseEdit, deleteEdit); }",f1b604fbd0141386f3c83504842f77f455034da4,"@com.google.gwt.uibinder.client.UiHandler(""publishEdit"") void onPublishEdit(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.change.EditActions.publishEdit(changeId, project, publishEdit, rebaseEdit, deleteEdit); }",51ed9d2f23950b71d752645c4369c97c94b3eb4c,"@com.google.gwt.uibinder.client.UiHandler(""publishEdit"") void onPublishEdit(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.change.EditActions.publishEdit(getProject(), changeId, publishEdit, rebaseEdit, deleteEdit); }",91e1c44a07e38db14b875dc306fa95023d7d9a59,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"void showUpdates(com.google.gerrit.client.info.ChangeInfo newInfo) { if ((!(isAttached())) || (newInfo.updated().equals(lastDisplayedUpdate))) { return; } com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> om = changeInfo.messages(); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> nm = newInfo.messages(); if (om == null) { om = com.google.gwt.core.client.JsArray.createArray().cast(); } if (nm == null) { nm = com.google.gwt.core.client.JsArray.createArray().cast(); } if ((om.length()) == (nm.length())) { return; } if ((updateAvailable) == null) { updateAvailable = new com.google.gerrit.client.change.UpdateAvailableBar() { @java.lang.Override void onShow() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); } @java.lang.Override void onIgnore(java.sql.Timestamp newTime) { lastDisplayedUpdate = newTime; } }; } updateAvailable.set(com.google.gerrit.client.rpc.Natives.asList(nm).subList(om.length(), nm.length()), newInfo.updated()); if (!(updateAvailable.isAttached())) { add(updateAvailable); } }",5414016ca634aa94516809738bea76a68c67e19d,"void showUpdates(com.google.gerrit.client.info.ChangeInfo newInfo) { if ((!(isAttached())) || (newInfo.updated().equals(lastDisplayedUpdate))) { return; } com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> om = changeInfo.messages(); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> nm = newInfo.messages(); if (om == null) { om = com.google.gwt.core.client.JsArray.createArray().cast(); } if (nm == null) { nm = com.google.gwt.core.client.JsArray.createArray().cast(); } if ((om.length()) == (nm.length())) { return; } if ((updateAvailable) == null) { updateAvailable = new com.google.gerrit.client.change.UpdateAvailableBar() { @java.lang.Override void onShow() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, project)); } @java.lang.Override void onIgnore(java.sql.Timestamp newTime) { lastDisplayedUpdate = newTime; } }; } updateAvailable.set(com.google.gerrit.client.rpc.Natives.asList(nm).subList(om.length(), nm.length()), newInfo.updated()); if (!(updateAvailable.isAttached())) { add(updateAvailable); } }",64a4bddd6718149588f0307630ac8a514ae110ff,"void showUpdates(com.google.gerrit.client.info.ChangeInfo newInfo) { if ((!(isAttached())) || (newInfo.updated().equals(lastDisplayedUpdate))) { return; } com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> om = changeInfo.messages(); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> nm = newInfo.messages(); if (om == null) { om = com.google.gwt.core.client.JsArray.createArray().cast(); } if (nm == null) { nm = com.google.gwt.core.client.JsArray.createArray().cast(); } if ((om.length()) == (nm.length())) { return; } if ((updateAvailable) == null) { updateAvailable = new com.google.gerrit.client.change.UpdateAvailableBar() { @java.lang.Override void onShow() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, changeId)); } @java.lang.Override void onIgnore(java.sql.Timestamp newTime) { lastDisplayedUpdate = newTime; } }; } updateAvailable.set(com.google.gerrit.client.rpc.Natives.asList(nm).subList(om.length(), nm.length()), newInfo.updated()); if (!(updateAvailable.isAttached())) { add(updateAvailable); } }",13b3d6c77ed820dbf175e07678df0d4a64133b6a,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Hashtags.java,"@java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(psId.getParentKey(), java.lang.String.valueOf(psId.get()))); }",d5bc1aa1b8ff61ac670efc973532d5fca944c79e,"@java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(psId.getParentKey(), project, java.lang.String.valueOf(psId.get()))); }",d0ec2e2ac576fdfb3614ef2cfb8553d259948ce0,"@java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, psId.getParentKey(), java.lang.String.valueOf(psId.get()))); }",dfd2bc418708ce119ddf2605066c85c5081057d0,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_PatchSetSelectBox.java,"private com.google.gerrit.client.ui.InlineHyperlink createLink(java.lang.String label, com.google.gerrit.client.DiffObject id) { assert (other) != null; if (sideA) { assert !(other.idActive.isBaseOrAutoMerge()); } com.google.gerrit.client.DiffObject diffBase = (sideA) ? id : other.idActive; com.google.gerrit.client.DiffObject revision = (sideA) ? other.idActive : id; return new com.google.gerrit.client.ui.InlineHyperlink(label, (parent.isSideBySide() ? com.google.gerrit.client.Dispatcher.toSideBySide(diffBase, revision.asPatchSetId(), path) : com.google.gerrit.client.Dispatcher.toUnified(diffBase, revision.asPatchSetId(), path))); }",b4994a83f952655bd01c311c962efdcd8424df15,"private com.google.gerrit.client.ui.InlineHyperlink createLink(java.lang.String label, com.google.gerrit.client.DiffObject id) { assert (other) != null; if (sideA) { assert !(other.idActive.isBaseOrAutoMerge()); } com.google.gerrit.client.DiffObject diffBase = (sideA) ? id : other.idActive; com.google.gerrit.client.DiffObject revision = (sideA) ? other.idActive : id; return new com.google.gerrit.client.ui.InlineHyperlink(label, (parent.isSideBySide() ? com.google.gerrit.client.Dispatcher.toSideBySide(diffBase, revision.asPatchSetId(), project, path) : com.google.gerrit.client.Dispatcher.toUnified(diffBase, revision.asPatchSetId(), project, path))); }",3cec761ede7dd699131e852de7f8d4b93e6f4c40,"private com.google.gerrit.client.ui.InlineHyperlink createLink(java.lang.String label, com.google.gerrit.client.DiffObject id) { assert (other) != null; if (sideA) { assert !(other.idActive.isBaseOrAutoMerge()); } com.google.gerrit.client.DiffObject diffBase = (sideA) ? id : other.idActive; com.google.gerrit.client.DiffObject revision = (sideA) ? other.idActive : id; return new com.google.gerrit.client.ui.InlineHyperlink(label, (parent.isSideBySide() ? com.google.gerrit.client.Dispatcher.toSideBySide(project, diffBase, revision.asPatchSetId(), path) : com.google.gerrit.client.Dispatcher.toUnified(project, diffBase, revision.asPatchSetId(), path))); }",9431a431eaa47f132a1aa2f5e55269aa7899d1ea,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_FollowUpAction.java,"@java.lang.Override void send(java.lang.String message) { com.google.gerrit.client.changes.ChangeApi.createChange(project, branch, topic, message, base, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId())); hide(); } }); }",5bc5864245b89f47c9df9da719fa706de4b36acd,"@java.lang.Override void send(java.lang.String message) { com.google.gerrit.client.changes.ChangeApi.createChange(project, branch, topic, message, base, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId(), result.projectNameKey())); hide(); } }); }",0dc0f74d04954e19cb2624effdda12201d81c0e8,"@java.lang.Override void send(java.lang.String message) { com.google.gerrit.client.changes.ChangeApi.createChange(project, branch, topic, message, base, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.projectNameKey(), result.legacyId())); hide(); } }); }",5fd962ab7a7921d5f15c5b013225df0bb596d7bb,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_FollowUpAction.java,@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId())); hide(); },6e24699bb1c4dd9f2eb5669592d5bac9755c01e1,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId(), result.projectNameKey())); hide(); }",a39f8f734dcf366d7d2e3d2b1266a7f7fd4b1b6e,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.projectNameKey(), result.legacyId())); hide(); }",96b4e8409d8a4b6440a88731c3c571981c578ae1,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_api_EditGlue.java,"public static void onAction(com.google.gerrit.client.info.ChangeInfo change, com.google.gerrit.client.info.ChangeInfo.EditInfo edit, com.google.gerrit.client.info.ActionInfo action, com.google.gerrit.client.actions.ActionButton button) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.edit(change.legacyId().get()).view(action.id()); com.google.gwt.core.client.JavaScriptObject f = com.google.gerrit.client.api.EditGlue.get(action.id()); if (f != null) { com.google.gerrit.client.api.ActionContext c = com.google.gerrit.client.api.ActionContext.create(api); c.set(action); c.set(change); c.set(edit); c.button(button); com.google.gerrit.client.api.ApiGlue.invoke(f, c); } else { com.google.gerrit.client.api.DefaultActions.invoke(change, action, api); } }",ff185c57cb1ee11cd91075bd71f0ea1b271aa540,"public static void onAction(com.google.gerrit.client.info.ChangeInfo change, com.google.gerrit.client.info.ChangeInfo.EditInfo edit, com.google.gerrit.client.info.ActionInfo action, com.google.gerrit.client.actions.ActionButton button) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.edit(change.legacyId().get(), change.project()).view(action.id()); com.google.gwt.core.client.JavaScriptObject f = com.google.gerrit.client.api.EditGlue.get(action.id()); if (f != null) { com.google.gerrit.client.api.ActionContext c = com.google.gerrit.client.api.ActionContext.create(api); c.set(action); c.set(change); c.set(edit); c.button(button); com.google.gerrit.client.api.ApiGlue.invoke(f, c); } else { com.google.gerrit.client.api.DefaultActions.invoke(change, action, api); } }",e9a4aa2bb25b8cef2f6ea394f534951449b94cb9,"public static void onAction(com.google.gerrit.client.info.ChangeInfo change, com.google.gerrit.client.info.ChangeInfo.EditInfo edit, com.google.gerrit.client.info.ActionInfo action, com.google.gerrit.client.actions.ActionButton button) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.edit(change.project(), change.legacyId().get()).view(action.id()); com.google.gwt.core.client.JavaScriptObject f = com.google.gerrit.client.api.EditGlue.get(action.id()); if (f != null) { com.google.gerrit.client.api.ActionContext c = com.google.gerrit.client.api.ActionContext.create(api); c.set(action); c.set(change); c.set(edit); c.button(button); com.google.gerrit.client.api.ApiGlue.invoke(f, c); } else { com.google.gerrit.client.api.DefaultActions.invoke(change, action, api); } }",73d7bc118dc30eb43295e3a4b1803e84ae16307b,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeEditApi.java,"public static void get(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String path, boolean base, com.google.gerrit.client.rpc.HttpCallback<com.google.gerrit.client.rpc.NativeString> cb) { com.google.gerrit.client.rpc.RestApi api; if ((id.get()) != 0) { api = com.google.gerrit.client.changes.ChangeApi.revision(id).view(""files"").id(path).view(""content""); } else if (Patch.COMMIT_MSG.equals(path)) { api = com.google.gerrit.client.changes.ChangeEditApi.editMessage(id.getParentKey().get()).addParameter(""base"", base); } else { api = com.google.gerrit.client.changes.ChangeEditApi.editFile(id.getParentKey().get(), path).addParameter(""base"", base); } api.get(cb); }",0bf4c14f876bdc9fbda0e090dd5d0b06cf210c1e,"public static void get(com.google.gerrit.reviewdb.client.PatchSet.Id id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String path, boolean base, com.google.gerrit.client.rpc.HttpCallback<com.google.gerrit.client.rpc.NativeString> cb) { com.google.gerrit.client.rpc.RestApi api; java.lang.String projectStr = (project == null) ? null : project.get(); if ((id.get()) != 0) { api = com.google.gerrit.client.changes.ChangeApi.revision(id, projectStr).view(""files"").id(path).view(""content""); } else if (Patch.COMMIT_MSG.equals(path)) { api = com.google.gerrit.client.changes.ChangeEditApi.editMessage(id.getParentKey().get(), projectStr).addParameter(""base"", base); } else { api = com.google.gerrit.client.changes.ChangeEditApi.editFile(id.getParentKey().get(), projectStr, path).addParameter(""base"", base); } api.get(cb); }",737aa183faf40007b1441a17c1ab5117142cd9db,"public static void get(@com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String path, boolean base, com.google.gerrit.client.rpc.HttpCallback<com.google.gerrit.client.rpc.NativeString> cb) { com.google.gerrit.client.rpc.RestApi api; if ((id.get()) != 0) { api = com.google.gerrit.client.changes.ChangeApi.revision(Project.NameKey.asStringOrNull(project), id).view(""files"").id(path).view(""content""); } else if (Patch.COMMIT_MSG.equals(path)) { api = com.google.gerrit.client.changes.ChangeEditApi.editMessage(Project.NameKey.asStringOrNull(project), id.getParentKey().get()).addParameter(""base"", base); } else { api = com.google.gerrit.client.changes.ChangeEditApi.editFile(Project.NameKey.asStringOrNull(project), id.getParentKey().get(), path).addParameter(""base"", base); } api.get(cb); }",6edb4bd8eed6562a3b3cdfd200a71aeb3d54709f,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeEditApi.java,"public static void putMessage(int id, java.lang.String m, com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.VoidResult> cb) { com.google.gerrit.client.changes.ChangeEditApi.editMessage(id).put(m, cb); }",a5c37dd604f6f081c275bdeb9624353099819884,"public static void putMessage(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String m, com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.VoidResult> cb) { com.google.gerrit.client.changes.ChangeEditApi.editMessage(id, project).put(m, cb); }",25d48d45e35f995f7b3882cbe2998c5054758626,"public static void putMessage(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String m, com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.VoidResult> cb) { com.google.gerrit.client.changes.ChangeEditApi.editMessage(project, id).put(m, cb); }",77d0ad3b8e1c45bf7daf0ef2e4edd528ded83eb8,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeEditApi.java,"public static void restore(int id, java.lang.String path, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult> cb) { com.google.gerrit.client.changes.ChangeEditApi.Input in = com.google.gerrit.client.changes.ChangeEditApi.Input.create(); in.restorePath(path); com.google.gerrit.client.changes.ChangeApi.edit(id).post(in, cb); }",fbe7d60f90c699c4e2b8fedff6df029fc96138ca,"public static void restore(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String path, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult> cb) { com.google.gerrit.client.changes.ChangeEditApi.Input in = com.google.gerrit.client.changes.ChangeEditApi.Input.create(); in.restorePath(path); com.google.gerrit.client.changes.ChangeApi.edit(id, project).post(in, cb); }",34ed85b870f0a5bbb2be06048bdae567d6339446,"public static void restore(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String path, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult> cb) { com.google.gerrit.client.changes.ChangeEditApi.Input in = com.google.gerrit.client.changes.ChangeEditApi.Input.create(); in.restorePath(path); com.google.gerrit.client.changes.ChangeApi.edit(project, id).post(in, cb); }",1006f765daf97fa32a67ac20d7db585671561719,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeEditApi.java,"private static com.google.gerrit.client.rpc.RestApi editFile(int id, java.lang.String path) { return com.google.gerrit.client.changes.ChangeApi.edit(id).id(path); }",f20069a9af7ed0565ee601ac97faf937f4898099,"private static com.google.gerrit.client.rpc.RestApi editFile(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String path) { return com.google.gerrit.client.changes.ChangeApi.edit(id, project).id(path); }",226229b18ffe8ef146d486425f8cb092e11fdfa6,"private static com.google.gerrit.client.rpc.RestApi editFile(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String path) { return com.google.gerrit.client.changes.ChangeApi.edit(project, id).id(path); }",e5acacf1c3fa248bccf2ffd7a61c6789a5c32602,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_PatchSetSelectBox.java,"void setUpBlame(final net.codemirror.lib.CodeMirror cm, final boolean isBase, final com.google.gerrit.reviewdb.client.PatchSet.Id rev, final java.lang.String path) { if (((!(com.google.gerrit.reviewdb.client.Patch.isMagic(path))) && (com.google.gerrit.client.Gerrit.isSignedIn())) && (com.google.gerrit.client.Gerrit.info().change().allowBlame())) { com.google.gwt.user.client.ui.Anchor blameIcon = createBlameIcon(); blameIcon.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent clickEvent) { if ((cm.extras().getBlameInfo()) != null) { cm.extras().toggleAnnotation(); } else { com.google.gerrit.client.changes.ChangeApi.blame(rev, path, isBase).get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.blame.BlameInfo>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.blame.BlameInfo> lines) { cm.extras().toggleAnnotation(lines); } }); } } }); linkPanel.add(blameIcon); } }",a390423afb426f7b2bb24fbac7a14bb374c3dbe3,"void setUpBlame(final net.codemirror.lib.CodeMirror cm, final boolean isBase, final com.google.gerrit.reviewdb.client.PatchSet.Id rev, final java.lang.String path) { if (((!(com.google.gerrit.reviewdb.client.Patch.isMagic(path))) && (com.google.gerrit.client.Gerrit.isSignedIn())) && (com.google.gerrit.client.Gerrit.info().change().allowBlame())) { com.google.gwt.user.client.ui.Anchor blameIcon = createBlameIcon(); blameIcon.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent clickEvent) { if ((cm.extras().getBlameInfo()) != null) { cm.extras().toggleAnnotation(); } else { com.google.gerrit.client.changes.ChangeApi.blame(rev, ((project) == null ? null : project.get()), path, isBase).get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.blame.BlameInfo>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.blame.BlameInfo> lines) { cm.extras().toggleAnnotation(lines); } }); } } }); linkPanel.add(blameIcon); } }",776f5eece464d9d536a9c98120cfb1d15e36aef1,"void setUpBlame(final net.codemirror.lib.CodeMirror cm, boolean isBase, com.google.gerrit.reviewdb.client.PatchSet.Id rev, java.lang.String path) { if (((!(com.google.gerrit.reviewdb.client.Patch.isMagic(path))) && (com.google.gerrit.client.Gerrit.isSignedIn())) && (com.google.gerrit.client.Gerrit.info().change().allowBlame())) { com.google.gwt.user.client.ui.Anchor blameIcon = createBlameIcon(); blameIcon.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent clickEvent) { if ((cm.extras().getBlameInfo()) != null) { cm.extras().toggleAnnotation(); } else { com.google.gerrit.client.changes.ChangeApi.blame(Project.NameKey.asStringOrNull(project), rev, path, isBase).get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.blame.BlameInfo>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.blame.BlameInfo> lines) { cm.extras().toggleAnnotation(lines); } }); } } }); linkPanel.add(blameIcon); } }",96df161e3b941af1fb82d423c09f84d23cc72651,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_PatchSetSelectBox.java,"@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent clickEvent) { if ((cm.extras().getBlameInfo()) != null) { cm.extras().toggleAnnotation(); } else { com.google.gerrit.client.changes.ChangeApi.blame(rev, path, isBase).get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.blame.BlameInfo>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.blame.BlameInfo> lines) { cm.extras().toggleAnnotation(lines); } }); } }",67e2f3f6e3f1963fe1b26171b35c37dffea3436e,"@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent clickEvent) { if ((cm.extras().getBlameInfo()) != null) { cm.extras().toggleAnnotation(); } else { com.google.gerrit.client.changes.ChangeApi.blame(rev, ((project) == null ? null : project.get()), path, isBase).get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.blame.BlameInfo>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.blame.BlameInfo> lines) { cm.extras().toggleAnnotation(lines); } }); } }",49ab1fb0a3cddde8e552f5eb2559882ecfa6e37a,"@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent clickEvent) { if ((cm.extras().getBlameInfo()) != null) { cm.extras().toggleAnnotation(); } else { com.google.gerrit.client.changes.ChangeApi.blame(Project.NameKey.asStringOrNull(project), rev, path, isBase).get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.blame.BlameInfo>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.blame.BlameInfo> lines) { cm.extras().toggleAnnotation(lines); } }); } }",890aa69ed8517c9e3e3baf30bbf89d9b9a656fd2,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_PatchSetSelectBox.java,"private com.google.gwt.user.client.ui.Widget createEditIcon() { com.google.gerrit.reviewdb.client.PatchSet.Id id = (idActive.isBaseOrAutoMerge()) ? other.idActive.asPatchSetId() : idActive.asPatchSetId(); com.google.gwt.user.client.ui.Anchor anchor = new com.google.gwt.user.client.ui.Anchor(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.edit()), (""#"" + (com.google.gerrit.client.Dispatcher.toEditScreen(id, path)))); anchor.setTitle(PatchUtil.C.edit()); return anchor; }",1ee0b57316d532dfe9e809638f8dfd9f221fcac9,"private com.google.gwt.user.client.ui.Widget createEditIcon() { com.google.gerrit.reviewdb.client.PatchSet.Id id = (idActive.isBaseOrAutoMerge()) ? other.idActive.asPatchSetId() : idActive.asPatchSetId(); com.google.gwt.user.client.ui.Anchor anchor = new com.google.gwt.user.client.ui.Anchor(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.edit()), (""#"" + (com.google.gerrit.client.Dispatcher.toEditScreen(id, project, path)))); anchor.setTitle(PatchUtil.C.edit()); return anchor; }",613e171c31abf0320bc1be320e67c7355ed01f30,"private com.google.gwt.user.client.ui.Widget createEditIcon() { com.google.gerrit.reviewdb.client.PatchSet.Id id = (idActive.isBaseOrAutoMerge()) ? other.idActive.asPatchSetId() : idActive.asPatchSetId(); com.google.gwt.user.client.ui.Anchor anchor = new com.google.gwt.user.client.ui.Anchor(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.edit()), (""#"" + (com.google.gerrit.client.Dispatcher.toEditScreen(project, id, path)))); anchor.setTitle(PatchUtil.C.edit()); return anchor; }",34f997c3ed6fdfc69f6fb741c409e927daead972,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeEditApi.java,"public static void get(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String path, com.google.gerrit.client.rpc.HttpCallback<com.google.gerrit.client.rpc.NativeString> cb) { com.google.gerrit.client.changes.ChangeEditApi.get(id, path, false, cb); }",df90704b80a659dd5f2ab876c1bf5bee0ca0785f,"public static void get(com.google.gerrit.reviewdb.client.PatchSet.Id id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String path, com.google.gerrit.client.rpc.HttpCallback<com.google.gerrit.client.rpc.NativeString> cb) { com.google.gerrit.client.changes.ChangeEditApi.get(id, project, path, false, cb); }",8ebb88451709d3a8c900efd43db9c87a5db1d4ec,"public static void get(@com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String path, com.google.gerrit.client.rpc.HttpCallback<com.google.gerrit.client.rpc.NativeString> cb) { com.google.gerrit.client.changes.ChangeEditApi.get(project, id, path, false, cb); }",40596559584cdc64b6039e34de4b3b52c76ff5be,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_LocalComments.java,"private java.lang.String getReplyCommentName() { return ""savedReplyComment-"" + (changeId.toString()); }",aec95311bdc5a5855049416e5f7bf15fd3835349,"private java.lang.String getReplyCommentName() { if ((project) != null) { return ((""savedReplyComment-"" + (project.get())) + (com.google.gerrit.common.PageLinks.PROJECT_CHANGE_DELIMITER)) + (changeId.toString()); } return ""savedReplyComment-"" + (changeId.toString()); }",dc4a7ffe8a3f6daa80475d04933db86f2f92f989,"private java.lang.String getReplyCommentName() { return ""savedReplyComment-"" + (com.google.gerrit.common.PageLinks.toChangeId(project, changeId)); }",8d9c61c44a2fafb5f24e9eb5bf17fba5dfa34a70,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_PublishedBox.java,"@com.google.gwt.uibinder.client.UiHandler(""fix"") void onFix(com.google.gwt.event.dom.client.ClickEvent e) { e.stopPropagation(); java.lang.String t = com.google.gerrit.client.Dispatcher.toEditScreen(psId, comment.path(), comment.line()); if (!(com.google.gerrit.client.Gerrit.isSignedIn())) { com.google.gerrit.client.Gerrit.doSignIn(t); } else { com.google.gerrit.client.Gerrit.display(t); } }",19f59f59a67ce739d76a4e91460de6b45c80b3b1,"@com.google.gwt.uibinder.client.UiHandler(""fix"") void onFix(com.google.gwt.event.dom.client.ClickEvent e) { e.stopPropagation(); java.lang.String t = com.google.gerrit.client.Dispatcher.toEditScreen(psId, project, comment.path(), comment.line()); if (!(com.google.gerrit.client.Gerrit.isSignedIn())) { com.google.gerrit.client.Gerrit.doSignIn(t); } else { com.google.gerrit.client.Gerrit.display(t); } }",020cd82c5af8d09a113933edf075b0375f2e00dc,"@com.google.gwt.uibinder.client.UiHandler(""fix"") void onFix(com.google.gwt.event.dom.client.ClickEvent e) { e.stopPropagation(); java.lang.String t = com.google.gerrit.client.Dispatcher.toEditScreen(project, psId, comment.path(), comment.line()); if (!(com.google.gerrit.client.Gerrit.isSignedIn())) { com.google.gerrit.client.Gerrit.doSignIn(t); } else { com.google.gerrit.client.Gerrit.display(t); } }",28b3c4d72995acfb974c58912d9e3045dcf70535,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RestoreAction.java,"@java.lang.Override void send(java.lang.String message) { com.google.gerrit.client.changes.ChangeApi.restore(id.get(), message, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); hide(); } }); }",0027189411386d167fca96eb9ba89a050473ae4f,"@java.lang.Override void send(java.lang.String message) { com.google.gerrit.client.changes.ChangeApi.restore(id.get(), ((project) == null ? null : project.get()), message, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, project)); hide(); } }); }",d36b8a84b3c670e72136e1ebb0846a4f247f33dc,"@java.lang.Override void send(java.lang.String message) { com.google.gerrit.client.changes.ChangeApi.restore(project.get(), id.get(), message, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); hide(); } }); }",dcf9817f25c77afb96f178fa212dc2153b55b678,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeTable.java,@java.lang.Override protected void onOpenRow(final int row) { final com.google.gerrit.client.info.ChangeInfo c = getRowItem(row); final com.google.gerrit.reviewdb.client.Change.Id id = c.legacyId(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); },26036ee7d76df84d9cada3ac38c50cb1a3d8df08,"@java.lang.Override protected void onOpenRow(final int row) { final com.google.gerrit.client.info.ChangeInfo c = getRowItem(row); final com.google.gerrit.reviewdb.client.Change.Id id = c.legacyId(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, c.projectNameKey())); }",1349215471fb24c4a79602fa8f19ba6043ee0ccb,"@java.lang.Override protected void onOpenRow(int row) { final com.google.gerrit.client.info.ChangeInfo c = getRowItem(row); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(c.projectNameKey(), c.legacyId())); }",86e00de4684148ccd79cf28d7f445495b1265819,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_PublishedBox.java,"@com.google.gwt.uibinder.client.UiHandler(""done"") void onReplyDone(com.google.gwt.event.dom.client.ClickEvent e) { e.stopPropagation(); if (!(com.google.gerrit.client.Gerrit.isSignedIn())) { com.google.gerrit.client.Gerrit.doSignIn(getCommentManager().host.getToken()); } else if ((replyBox) == null) { done.setEnabled(false); com.google.gerrit.client.changes.CommentInfo input = com.google.gerrit.client.changes.CommentInfo.createReply(comment); input.message(PatchUtil.C.cannedReplyDone()); com.google.gerrit.client.changes.CommentApi.createDraft(psId, input, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { done.setEnabled(true); setOpen(false); getCommentManager().addDraftBox(displaySide, result); } }); } else { openReplyBox(); setOpen(false); } }",9fe634bfb131f8ce1f969aafa9ef0f4592e08d9f,"@com.google.gwt.uibinder.client.UiHandler(""done"") void onReplyDone(com.google.gwt.event.dom.client.ClickEvent e) { e.stopPropagation(); if (!(com.google.gerrit.client.Gerrit.isSignedIn())) { com.google.gerrit.client.Gerrit.doSignIn(getCommentManager().host.getToken()); } else if ((replyBox) == null) { done.setEnabled(false); com.google.gerrit.client.changes.CommentInfo input = com.google.gerrit.client.changes.CommentInfo.createReply(comment); input.message(PatchUtil.C.cannedReplyDone()); com.google.gerrit.client.changes.CommentApi.createDraft(psId, Project.NameKey.asStringOrNull(project), input, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { done.setEnabled(true); setOpen(false); getCommentManager().addDraftBox(displaySide, result); } }); } else { openReplyBox(); setOpen(false); } }",0f2dbd6ecbeb57d87f231d4179ab6fa7ca8d99dd,"@com.google.gwt.uibinder.client.UiHandler(""done"") void onReplyDone(com.google.gwt.event.dom.client.ClickEvent e) { e.stopPropagation(); if (!(com.google.gerrit.client.Gerrit.isSignedIn())) { com.google.gerrit.client.Gerrit.doSignIn(getCommentManager().host.getToken()); } else if ((replyBox) == null) { done.setEnabled(false); com.google.gerrit.client.changes.CommentInfo input = com.google.gerrit.client.changes.CommentInfo.createReply(comment); input.message(PatchUtil.C.cannedReplyDone()); com.google.gerrit.client.changes.CommentApi.createDraft(Project.NameKey.asStringOrNull(project), psId, input, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { done.setEnabled(true); setOpen(false); getCommentManager().addDraftBox(displaySide, result); } }); } else { openReplyBox(); setOpen(false); } }",0eebf386607d3f075dd04e1aa69fab07d09d45dd,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_LocalComments.java,"private java.lang.String getInlineCommentName(com.google.gerrit.client.changes.CommentInfo comment) { if ((psId) == null) { return null; } java.lang.String result = ""patchComment-""; if ((comment.id()) != null) { result = (""patchCommentEdit-"" + (comment.id())) + ""-""; } else if ((comment.inReplyTo()) != null) { result = (""patchReply-"" + (comment.inReplyTo())) + ""-""; } result += (((((((changeId) + ""-"") + (psId.getId())) + ""-"") + (com.google.gerrit.client.change.LocalComments.btoa(comment.path()))) + ""-"") + (comment.side())) + ""-""; if (comment.hasRange()) { result += ((((((""R"" + (comment.range().startLine())) + "","") + (comment.range().startCharacter())) + ""-"") + (comment.range().endLine())) + "","") + (comment.range().endCharacter()); } else { result += comment.line(); } return result; }",43b249521da8a046181b34ae22ed46538c26b41f,"private java.lang.String getInlineCommentName(com.google.gerrit.client.changes.CommentInfo comment) { if ((psId) == null) { return null; } java.lang.String result = ""patchComment-""; if ((comment.id()) != null) { result = (""patchCommentEdit-"" + (comment.id())) + ""-""; } else if ((comment.inReplyTo()) != null) { result = (""patchReply-"" + (comment.inReplyTo())) + ""-""; } if ((project) != null) { result += (project.get()) + (com.google.gerrit.common.PageLinks.PROJECT_CHANGE_DELIMITER); } result += (((((((changeId) + ""-"") + (psId.getId())) + ""-"") + (com.google.gerrit.client.change.LocalComments.btoa(comment.path()))) + ""-"") + (comment.side())) + ""-""; if (comment.hasRange()) { result += ((((((""R"" + (comment.range().startLine())) + "","") + (comment.range().startCharacter())) + ""-"") + (comment.range().endLine())) + "","") + (comment.range().endCharacter()); } else { result += comment.line(); } return result; }",13178bf68ab3e6c7ee5214c6b59d5611074c2c83,"private java.lang.String getInlineCommentName(com.google.gerrit.client.changes.CommentInfo comment) { if ((psId) == null) { return null; } java.lang.String result = ""patchComment-""; if ((comment.id()) != null) { result = (""patchCommentEdit-"" + (comment.id())) + ""-""; } else if ((comment.inReplyTo()) != null) { result = (""patchReply-"" + (comment.inReplyTo())) + ""-""; } result += com.google.gerrit.common.PageLinks.toChangeId(project, changeId); result += (((((""-"" + (psId.getId())) + ""-"") + (com.google.gerrit.client.change.LocalComments.btoa(comment.path()))) + ""-"") + (comment.side())) + ""-""; if (comment.hasRange()) { result += ((((((""R"" + (comment.range().startLine())) + "","") + (comment.range().startCharacter())) + ""-"") + (comment.range().endLine())) + "","") + (comment.range().endCharacter()); } else { result += comment.line(); } return result; }",2407c59f89077eea7c230a5c0639d6310b5bbdea,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_LocalComments.java,"public static void saveInlineComments() { final com.google.gerrit.client.change.LocalComments.StorageBackend storage = new com.google.gerrit.client.change.LocalComments.StorageBackend(); for (final java.lang.String cookie : storage.getKeys()) { if (com.google.gerrit.client.change.LocalComments.isInlineComment(cookie)) { com.google.gerrit.client.change.LocalComments.InlineComment input = com.google.gerrit.client.change.LocalComments.getInlineComment(cookie); if ((input.commentInfo.id()) == null) { com.google.gerrit.client.changes.CommentApi.createDraft(input.psId, input.commentInfo, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { storage.removeItem(cookie); } }); } else { com.google.gerrit.client.changes.CommentApi.updateDraft(input.psId, input.commentInfo.id(), input.commentInfo, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { storage.removeItem(cookie); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if (com.google.gerrit.client.rpc.RestApi.isNotFound(caught)) { storage.removeItem(cookie); } else { super.onFailure(caught); } } }); } } } }",ec04c937418e4b7bacda187d923c73ac761ab2d6,"public static void saveInlineComments() { final com.google.gerrit.client.change.LocalComments.StorageBackend storage = new com.google.gerrit.client.change.LocalComments.StorageBackend(); for (final java.lang.String cookie : storage.getKeys()) { if (com.google.gerrit.client.change.LocalComments.isInlineComment(cookie)) { com.google.gerrit.client.change.LocalComments.InlineComment input = com.google.gerrit.client.change.LocalComments.getInlineComment(cookie); if ((input.commentInfo.id()) == null) { com.google.gerrit.client.changes.CommentApi.createDraft(input.psId, Project.NameKey.asStringOrNull(input.project), input.commentInfo, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { storage.removeItem(cookie); } }); } else { com.google.gerrit.client.changes.CommentApi.updateDraft(input.psId, Project.NameKey.asStringOrNull(input.project), input.commentInfo.id(), input.commentInfo, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { storage.removeItem(cookie); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if (com.google.gerrit.client.rpc.RestApi.isNotFound(caught)) { storage.removeItem(cookie); } else { super.onFailure(caught); } } }); } } } }",247c5aeea1aafcb51eb710bed67ca6c571b67350,"public static void saveInlineComments() { final com.google.gerrit.client.change.LocalComments.StorageBackend storage = new com.google.gerrit.client.change.LocalComments.StorageBackend(); for (java.lang.String cookie : storage.getKeys()) { if (com.google.gerrit.client.change.LocalComments.isInlineComment(cookie)) { com.google.gerrit.client.change.LocalComments.InlineComment input = com.google.gerrit.client.change.LocalComments.getInlineComment(cookie); if ((input.commentInfo.id()) == null) { com.google.gerrit.client.changes.CommentApi.createDraft(Project.NameKey.asStringOrNull(input.project), input.psId, input.commentInfo, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { storage.removeItem(cookie); } }); } else { com.google.gerrit.client.changes.CommentApi.updateDraft(Project.NameKey.asStringOrNull(input.project), input.psId, input.commentInfo.id(), input.commentInfo, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { storage.removeItem(cookie); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if (com.google.gerrit.client.rpc.RestApi.isNotFound(caught)) { storage.removeItem(cookie); } else { super.onFailure(caught); } } }); } } } }",506fce0f0fb0d3fcfa13578fc4a96e8a644d3cb9,2017-07-26 07:42:44,7
108592,gerrit-common_src_main_java_com_google_gerrit_common_PageLinks.java,"public static java.lang.String toChange(com.google.gerrit.reviewdb.client.Change.Id c, java.lang.String p) { return ((""/c/"" + c) + ""/"") + p; }",a5821d2c45df104b8cf10ecaf12f2e16e1185d4b,"public static java.lang.String toChange(com.google.gerrit.reviewdb.client.Change.Id c, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project) { return (com.google.gerrit.common.PageLinks.toChangeNoSlash(c, project)) + ""/""; }",04f5b91f32ee83bb93b5512d0e2d3e251614601a,"public static java.lang.String toChange(@com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id c, java.lang.String b, java.lang.String p) { java.lang.String u = com.google.gerrit.common.PageLinks.toChange(project, c); if (b != null) { u += b + ""..""; } u += p; return u; }",ad759bceba3a9a1b4ef4dedd336ee1f2a1ce6221,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_PatchSetsBox.java,"private java.lang.String url(com.google.gerrit.client.info.ChangeInfo.RevisionInfo r) { return com.google.gerrit.common.PageLinks.toChange(changeId, r.id()); }",214c20b14d76aad350ae9c960fde6ed0e550cf9f,"private java.lang.String url(com.google.gerrit.client.info.ChangeInfo.RevisionInfo r) { return com.google.gerrit.common.PageLinks.toChange(changeId, project, r.id()); }",89e9f9f9fe581975f44af9d5d3f560862e2ce73c,"private java.lang.String url(com.google.gerrit.client.info.ChangeInfo.RevisionInfo r) { return com.google.gerrit.common.PageLinks.toChange(project, changeId, r.id()); }",095c1e133d914322c95414761eb4ef4ed6002883,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeActions.java,"@java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.ChangeActions.setEnabled(true, draftButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } else { super.onFailure(err); } }",5af75b66e488e8305065877e63fc98627b6d57b8,"@java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.ChangeActions.setEnabled(true, draftButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, project)); } else { super.onFailure(err); } }",ecc269f9e667bd4fd3b64b61e63afac608385ee0,"@java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.ChangeActions.setEnabled(true, draftButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); } else { super.onFailure(err); } }",3bb6e2040a506ec4e8877f626cf233b701683547,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_CreateChangeAction.java,"static void call(final com.google.gwt.user.client.ui.Button b, final java.lang.String project) { b.setEnabled(false); new com.google.gerrit.client.ui.CreateChangeDialog(new com.google.gerrit.reviewdb.client.Project.NameKey(project)) { { sendButton.setText(AdminConstants.I.buttonCreate()); message.setText(AdminConstants.I.buttonCreateDescription()); } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.createChange(project, getDestinationBranch(), getDestinationTopic(), message.getText(), null, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { super.onClose(event); b.setEnabled(true); } }.center(); }",da8d00836c52ebf9b4d34b423ab78792114dfb40,"static void call(final com.google.gwt.user.client.ui.Button b, final java.lang.String project) { b.setEnabled(false); new com.google.gerrit.client.ui.CreateChangeDialog(new com.google.gerrit.reviewdb.client.Project.NameKey(project)) { { sendButton.setText(AdminConstants.I.buttonCreate()); message.setText(AdminConstants.I.buttonCreateDescription()); } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.createChange(project, getDestinationBranch(), getDestinationTopic(), message.getText(), null, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId(), result.projectNameKey())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { super.onClose(event); b.setEnabled(true); } }.center(); }",fe2f01b28a52da6ad5c79cdac7d3678e5356ff17,"static void call(com.google.gwt.user.client.ui.Button b, java.lang.String project) { b.setEnabled(false); new com.google.gerrit.client.ui.CreateChangeDialog(new com.google.gerrit.reviewdb.client.Project.NameKey(project)) { { sendButton.setText(AdminConstants.I.buttonCreate()); message.setText(AdminConstants.I.buttonCreateDescription()); } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.createChange(project, getDestinationBranch(), getDestinationTopic(), message.getText(), null, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.projectNameKey(), result.legacyId())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { super.onClose(event); b.setEnabled(true); } }.center(); }",66ffc73abf2a832176f4e943e8b291c4bd975603,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_Header.java,"private com.google.gwtexpui.globalkey.client.KeyCommand setupNav(com.google.gerrit.client.ui.InlineHyperlink link, char key, java.lang.String help, com.google.gerrit.client.info.FileInfo info) { if (info != null) { final java.lang.String url = url(info); link.setTargetHistoryToken(url); link.setTitle(PatchUtil.M.fileNameWithShortcutKey(com.google.gerrit.client.info.FileInfo.getFileName(info.path()), java.lang.Character.toString(key))); com.google.gwtexpui.globalkey.client.KeyCommand k = new com.google.gwtexpui.globalkey.client.KeyCommand(0, key, help) { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { com.google.gerrit.client.Gerrit.display(url); } }; keys.add(k); if (link == (prev)) { hasPrev = true; } else { hasNext = true; } return k; } link.getElement().getStyle().setVisibility(Visibility.HIDDEN); keys.add(new com.google.gerrit.client.diff.UpToChangeCommand(patchSetId, 0, key)); return null; }",ee95214de36916ed9fa354a03827fda6d7208c41,"private com.google.gwtexpui.globalkey.client.KeyCommand setupNav(com.google.gerrit.client.ui.InlineHyperlink link, char key, java.lang.String help, com.google.gerrit.client.info.FileInfo info) { if (info != null) { final java.lang.String url = url(info); link.setTargetHistoryToken(url); link.setTitle(PatchUtil.M.fileNameWithShortcutKey(com.google.gerrit.client.info.FileInfo.getFileName(info.path()), java.lang.Character.toString(key))); com.google.gwtexpui.globalkey.client.KeyCommand k = new com.google.gwtexpui.globalkey.client.KeyCommand(0, key, help) { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { com.google.gerrit.client.Gerrit.display(url); } }; keys.add(k); if (link == (prev)) { hasPrev = true; } else { hasNext = true; } return k; } link.getElement().getStyle().setVisibility(Visibility.HIDDEN); keys.add(new com.google.gerrit.client.diff.UpToChangeCommand(patchSetId, projectKey, 0, key)); return null; }",816facb93456bfb5fd21e496c0077f48345e0fe3,"private com.google.gwtexpui.globalkey.client.KeyCommand setupNav(com.google.gerrit.client.ui.InlineHyperlink link, char key, java.lang.String help, com.google.gerrit.client.info.FileInfo info) { if (info != null) { final java.lang.String url = url(info); link.setTargetHistoryToken(url); link.setTitle(PatchUtil.M.fileNameWithShortcutKey(com.google.gerrit.client.info.FileInfo.getFileName(info.path()), java.lang.Character.toString(key))); com.google.gwtexpui.globalkey.client.KeyCommand k = new com.google.gwtexpui.globalkey.client.KeyCommand(0, key, help) { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { com.google.gerrit.client.Gerrit.display(url); } }; keys.add(k); if (link == (prev)) { hasPrev = true; } else { hasNext = true; } return k; } link.getElement().getStyle().setVisibility(Visibility.HIDDEN); keys.add(new com.google.gerrit.client.diff.UpToChangeCommand(projectKey, patchSetId, 0, key)); return null; }",14b86d4a87aeeea6123cd7c650070318328f0f6d,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeActions.java,"public static com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject> cs(final com.google.gerrit.reviewdb.client.Change.Id id, final com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.change.ChangeActions.setEnabled(false, draftButtons); return new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } @java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.ChangeActions.setEnabled(true, draftButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } else { super.onFailure(err); } } }; }",896578826f153813a88e2d60a9a6d2cb2a4efad5,"public static com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject> cs(final com.google.gerrit.reviewdb.client.Change.Id id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.change.ChangeActions.setEnabled(false, draftButtons); return new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, project)); } @java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.ChangeActions.setEnabled(true, draftButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, project)); } else { super.onFailure(err); } } }; }",f6b4331ed8f4154c6e320e1a415fb61f39c47d16,"public static com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject> cs(com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gerrit.reviewdb.client.Change.Id id, com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.change.ChangeActions.setEnabled(false, draftButtons); return new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); } @java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.ChangeActions.setEnabled(true, draftButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); } else { super.onFailure(err); } } }; }",e8ce006eb12774d4fff11d6ccb875c7896c029a3,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeActions.java,"static void delete(com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String revision, com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.changes.ChangeApi.deleteRevision(id.get(), revision, com.google.gerrit.client.change.ChangeActions.cs(id, draftButtons)); }",fca5b8832186416fcc9169622b222a386a0833a7,"static void delete(com.google.gerrit.reviewdb.client.Change.Id id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String revision, com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.changes.ChangeApi.deleteRevision(id.get(), Project.NameKey.asStringOrNull(project), revision, com.google.gerrit.client.change.ChangeActions.cs(id, project, draftButtons)); }",3b2c444da6164b0a16ab1ee7e519a0a20bc056e5,"static void delete(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String revision, com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.changes.ChangeApi.deleteRevision(project.get(), id.get(), revision, com.google.gerrit.client.change.ChangeActions.cs(project, id, draftButtons)); }",471a90be43a6b082c449d5b09a294d6a8ff33f6a,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeActions.java,"static void unmarkPrivate(com.google.gerrit.reviewdb.client.Change.Id id, com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.changes.ChangeApi.unmarkPrivate(id.get(), com.google.gerrit.client.change.ChangeActions.cs(id, draftButtons)); }",f09e1870322d105dc1c759bf9131b666ee006947,"static void unmarkPrivate(com.google.gerrit.reviewdb.client.Change.Id id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.changes.ChangeApi.unmarkPrivate(id.get(), Project.NameKey.asStringOrNull(project), com.google.gerrit.client.change.ChangeActions.cs(id, project, draftButtons)); }",9beac5c0d911fe1a1c8f9e80591d3656520fd742,"static void unmarkPrivate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id id, com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.changes.ChangeApi.unmarkPrivate(project.get(), id.get(), com.google.gerrit.client.change.ChangeActions.cs(project, id, draftButtons)); }",fdd4a28e46a25c113daed3cfe766884433202f87,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RebaseAction.java,@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); },f000ef9686a414f07944510299e301bf374252c9,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, project)); }",58691e7bd0f6327878a08e2e3e2a42e3f672d223,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); }",a2eec20a3c7043dbdc6393507bdfe6ebb93cae53,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void restore(int id, java.lang.String msg, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.MessageInput input = com.google.gerrit.client.changes.ChangeApi.MessageInput.create(); input.message(com.google.gerrit.client.changes.ChangeApi.emptyToNull(msg)); com.google.gerrit.client.changes.ChangeApi.call(id, ""restore"").post(input, cb); }",e4e01bcd42e2a1b64dfbbcdaaf40930e3087b833,"public static void restore(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String msg, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.MessageInput input = com.google.gerrit.client.changes.ChangeApi.MessageInput.create(); input.message(com.google.gerrit.client.changes.ChangeApi.emptyToNull(msg)); com.google.gerrit.client.changes.ChangeApi.call(id, project, ""restore"").post(input, cb); }",dac46150e5f80446cdd9084ae045ea25008a4a01,"public static void restore(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String msg, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.MessageInput input = com.google.gerrit.client.changes.ChangeApi.MessageInput.create(); input.message(com.google.gerrit.client.changes.ChangeApi.emptyToNull(msg)); com.google.gerrit.client.changes.ChangeApi.call(project, id, ""restore"").post(input, cb); }",204dcc8189b78153ca4643f2542183221c27b4ac,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeActions.java,"static void publish(com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String revision, com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.changes.ChangeApi.publish(id.get(), revision, com.google.gerrit.client.change.ChangeActions.cs(id, draftButtons)); }",5fbaa5686e3cf604549c03e07a27f35a5b9f6e1a,"static void publish(com.google.gerrit.reviewdb.client.Change.Id id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String revision, com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.changes.ChangeApi.publish(id.get(), Project.NameKey.asStringOrNull(project), revision, com.google.gerrit.client.change.ChangeActions.cs(id, project, draftButtons)); }",6b76082bea4ba7c7a7cd92098df021b1c1e0dbf3,"static void publish(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String revision, com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.changes.ChangeApi.publish(project.get(), id.get(), revision, com.google.gerrit.client.change.ChangeActions.cs(project, id, draftButtons)); }",4c50a6f91751dd0744495773b598c45d8ec9780d,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeActions.java,"static void markPrivate(com.google.gerrit.reviewdb.client.Change.Id id, com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.changes.ChangeApi.markPrivate(id.get(), com.google.gerrit.client.change.ChangeActions.cs(id, draftButtons)); }",2b523017647548e606fbdb9214427cf570d60177,"static void markPrivate(com.google.gerrit.reviewdb.client.Change.Id id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.changes.ChangeApi.markPrivate(id.get(), Project.NameKey.asStringOrNull(project), com.google.gerrit.client.change.ChangeActions.cs(id, project, draftButtons)); }",93295496779b6d744dd39aa4b210708458404c83,"static void markPrivate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id id, com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.changes.ChangeApi.markPrivate(project.get(), id.get(), com.google.gerrit.client.change.ChangeActions.cs(project, id, draftButtons)); }",d4972d9d9dd99edf3d242598f6698bcf8309da90,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RenameFileAction.java,"void onRename() { if ((popup) != null) { popup.hide(); return; } if ((renameBox) == null) { renameBox = new com.google.gerrit.client.change.RenameFileBox(changeId, revision); } renameBox.clearPath(); final com.google.gwt.user.client.ui.PopupPanel p = new com.google.gwt.user.client.ui.PopupPanel(true); p.setStyleName(style.replyBox()); p.addAutoHidePartner(renameButton.getElement()); p.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { if ((popup) == p) { popup = null; } } }); p.add(renameBox); p.showRelativeTo(renameButton); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(p); renameBox.setFocus(true); popup = p; }",9962f255cfcd9624b81091ff884276cd91004617,"void onRename() { if ((popup) != null) { popup.hide(); return; } if ((renameBox) == null) { renameBox = new com.google.gerrit.client.change.RenameFileBox(changeId, project, revision); } renameBox.clearPath(); final com.google.gwt.user.client.ui.PopupPanel p = new com.google.gwt.user.client.ui.PopupPanel(true); p.setStyleName(style.replyBox()); p.addAutoHidePartner(renameButton.getElement()); p.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { if ((popup) == p) { popup = null; } } }); p.add(renameBox); p.showRelativeTo(renameButton); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(p); renameBox.setFocus(true); popup = p; }",9473eb8c14ebaef41b87f81e6eb069b19177dc29,"void onRename() { if ((popup) != null) { popup.hide(); return; } if ((renameBox) == null) { renameBox = new com.google.gerrit.client.change.RenameFileBox(project, changeId, revision); } renameBox.clearPath(); final com.google.gwt.user.client.ui.PopupPanel p = new com.google.gwt.user.client.ui.PopupPanel(true); p.setStyleName(style.replyBox()); p.addAutoHidePartner(renameButton.getElement()); p.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { if ((popup) == p) { popup = null; } } }); p.add(renameBox); p.showRelativeTo(renameButton); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(p); renameBox.setFocus(true); popup = p; }",6e59baba93761ab149202f35c5c14cb051f56913,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_AddFileAction.java,"public void onEdit() { if ((popup) != null) { popup.hide(); return; } files.unregisterKeys(); if ((addBox) == null) { addBox = new com.google.gerrit.client.change.AddFileBox(changeId, revision, files); } addBox.clearPath(); final com.google.gwt.user.client.ui.PopupPanel p = new com.google.gwt.user.client.ui.PopupPanel(true); p.setStyleName(style.replyBox()); p.addAutoHidePartner(addButton.getElement()); p.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { if ((popup) == p) { popup = null; } } }); p.add(addBox); p.showRelativeTo(addButton); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(p); addBox.setFocus(true); popup = p; }",3bbba69f68f46633c9bc61315d8fef77ed25e815,"public void onEdit() { if ((popup) != null) { popup.hide(); return; } files.unregisterKeys(); if ((addBox) == null) { addBox = new com.google.gerrit.client.change.AddFileBox(changeId, project, revision, files); } addBox.clearPath(); final com.google.gwt.user.client.ui.PopupPanel p = new com.google.gwt.user.client.ui.PopupPanel(true); p.setStyleName(style.replyBox()); p.addAutoHidePartner(addButton.getElement()); p.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { if ((popup) == p) { popup = null; } } }); p.add(addBox); p.showRelativeTo(addButton); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(p); addBox.setFocus(true); popup = p; }",68e5d8adb3b2652fbb28991cdc059204df3b62e1,"public void onEdit() { if ((popup) != null) { popup.hide(); return; } files.unregisterKeys(); if ((addBox) == null) { addBox = new com.google.gerrit.client.change.AddFileBox(project, changeId, revision, files); } addBox.clearPath(); final com.google.gwt.user.client.ui.PopupPanel p = new com.google.gwt.user.client.ui.PopupPanel(true); p.setStyleName(style.replyBox()); p.addAutoHidePartner(addButton.getElement()); p.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { if ((popup) == p) { popup = null; } } }); p.add(addBox); p.showRelativeTo(addButton); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(p); addBox.setFocus(true); popup = p; }",85a4a51b0c6f820421fd4ea58d939c4566378f14,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_SearchPanel.java,"private void doSearch() { final java.lang.String query = searchBox.getText().trim(); if ("""".equals(query)) { return; } searchBox.setFocus(false); if (((dropdown) != null) && (dropdown.getSelectedValue().equals(Gerrit.C.searchDropdownDoc()))) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toDocumentationQuery(query)); } else { if (query.matches(""^[1-9][0-9]*$"")) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(Change.Id.parse(query))); } else { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeQuery(query), com.google.gerrit.client.changes.QueryScreen.forQuery(query)); } } }",e0dd4c01f498d0b96734b0707125f7dbe42aa809,"private void doSearch() { final java.lang.String query = searchBox.getText().trim(); if ("""".equals(query)) { return; } searchBox.setFocus(false); if (((dropdown) != null) && (dropdown.getSelectedValue().equals(Gerrit.C.searchDropdownDoc()))) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toDocumentationQuery(query)); } else { if (query.matches(""^[1-9][0-9]*$"")) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(Change.Id.parse(query), null)); } else { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeQuery(query), com.google.gerrit.client.changes.QueryScreen.forQuery(query)); } } }",4fbe8bf774e5902affe859dfc4125846fadf0063,"private void doSearch() { final java.lang.String query = searchBox.getText().trim(); if ("""".equals(query)) { return; } searchBox.setFocus(false); if (((dropdown) != null) && (dropdown.getSelectedValue().equals(Gerrit.C.searchDropdownDoc()))) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toDocumentationQuery(query)); } else { if (query.matches(""^[1-9][0-9]*$"")) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(null, Change.Id.parse(query))); } else { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeQuery(query), com.google.gerrit.client.changes.QueryScreen.forQuery(query)); } } }",3de3f67ed973d6d2e55c83db826f8baa1c22aa2d,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ReplyBox.java,"@java.lang.Override protected void onLoad() { commentsPanel.setVisible(false); post.setEnabled(false); if (lc.hasReplyComment()) { message.setText(lc.getReplyComment()); lc.removeReplyComment(); } com.google.gerrit.client.changes.ChangeApi.drafts(psId.getParentKey().get()).get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>> result) { displayComments(result); post.setEnabled(true); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { post.setEnabled(true); } }); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { message.setFocus(true); } }); com.google.gwt.core.client.Scheduler.get().scheduleFixedDelay(new com.google.gwt.core.client.Scheduler.RepeatingCommand() { @java.lang.Override public boolean execute() { java.lang.String t = message.getText(); if (t != null) { message.setCursorPos(t.length()); } return false; } }, 0); }",ef6ab77344f43f5142739f13093f7830cbbf4dc1,"@java.lang.Override protected void onLoad() { commentsPanel.setVisible(false); post.setEnabled(false); if (lc.hasReplyComment()) { message.setText(lc.getReplyComment()); lc.removeReplyComment(); } com.google.gerrit.client.changes.ChangeApi.drafts(psId.getParentKey().get(), Project.NameKey.asStringOrNull(project)).get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>> result) { displayComments(result); post.setEnabled(true); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { post.setEnabled(true); } }); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { message.setFocus(true); } }); com.google.gwt.core.client.Scheduler.get().scheduleFixedDelay(new com.google.gwt.core.client.Scheduler.RepeatingCommand() { @java.lang.Override public boolean execute() { java.lang.String t = message.getText(); if (t != null) { message.setCursorPos(t.length()); } return false; } }, 0); }",07e8ff94d591a73413c45325c6694a2d3b802c7e,"@java.lang.Override protected void onLoad() { commentsPanel.setVisible(false); post.setEnabled(false); if (lc.hasReplyComment()) { message.setText(lc.getReplyComment()); lc.removeReplyComment(); } com.google.gerrit.client.changes.ChangeApi.drafts(project.get(), psId.getParentKey().get()).get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>> result) { displayComments(result); post.setEnabled(true); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { post.setEnabled(true); } }); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { message.setFocus(true); } }); com.google.gwt.core.client.Scheduler.get().scheduleFixedDelay(new com.google.gwt.core.client.Scheduler.RepeatingCommand() { @java.lang.Override public boolean execute() { java.lang.String t = message.getText(); if (t != null) { message.setCursorPos(t.length()); } return false; } }, 0); }",cc44fc9e3914c1100215382f7fbb4c75d080f852,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"private static com.google.gerrit.client.rpc.RestApi call(int id, java.lang.String action) { return com.google.gerrit.client.changes.ChangeApi.change(id).view(action); }",c319a0c373b3c1b492ef5ccad1f87ea2dc882a19,"private static com.google.gerrit.client.rpc.RestApi call(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String action) { return com.google.gerrit.client.changes.ChangeApi.change(id, project).view(action); }",98e710365e9be1071338a314e540301c897f47c5,"private static com.google.gerrit.client.rpc.RestApi call(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String action) { return com.google.gerrit.client.changes.ChangeApi.change(project, id).view(action); }",5938cc9637b7cb9e0ee1c40d0d4888adb082e579,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ReplyBox.java,"private void displayComments(com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>> m) { comments.clear(); com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo> l = m.get(Patch.COMMIT_MSG); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, psId, Util.C.commitMessage(), com.google.gerrit.client.change.ReplyBox.copyPath(Patch.COMMIT_MSG, l))); } l = m.get(Patch.MERGE_LIST); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, psId, Util.C.commitMessage(), com.google.gerrit.client.change.ReplyBox.copyPath(Patch.MERGE_LIST, l))); } java.util.List<java.lang.String> paths = new java.util.ArrayList(m.keySet()); java.util.Collections.sort(paths); for (java.lang.String path : paths) { if (!(com.google.gerrit.reviewdb.client.Patch.isMagic(path))) { comments.add(new com.google.gerrit.client.change.FileComments(clp, psId, path, com.google.gerrit.client.change.ReplyBox.copyPath(path, m.get(path)))); } } commentsPanel.setVisible(((comments.getWidgetCount()) > 0)); }",be388d54814ec907cd7a82a5632c0e4dd443a604,"private void displayComments(com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>> m) { comments.clear(); com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo> l = m.get(Patch.COMMIT_MSG); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, psId, project, Util.C.commitMessage(), com.google.gerrit.client.change.ReplyBox.copyPath(Patch.COMMIT_MSG, l))); } l = m.get(Patch.MERGE_LIST); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, psId, project, Util.C.commitMessage(), com.google.gerrit.client.change.ReplyBox.copyPath(Patch.MERGE_LIST, l))); } java.util.List<java.lang.String> paths = new java.util.ArrayList(m.keySet()); java.util.Collections.sort(paths); for (java.lang.String path : paths) { if (!(com.google.gerrit.reviewdb.client.Patch.isMagic(path))) { comments.add(new com.google.gerrit.client.change.FileComments(clp, psId, project, path, com.google.gerrit.client.change.ReplyBox.copyPath(path, m.get(path)))); } } commentsPanel.setVisible(((comments.getWidgetCount()) > 0)); }",3d634ec73daa7ac4b41448b6b71e4c8892dfd2d2,"private void displayComments(com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>> m) { comments.clear(); com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo> l = m.get(Patch.COMMIT_MSG); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, project, psId, Util.C.commitMessage(), com.google.gerrit.client.change.ReplyBox.copyPath(Patch.COMMIT_MSG, l))); } l = m.get(Patch.MERGE_LIST); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, project, psId, Util.C.commitMessage(), com.google.gerrit.client.change.ReplyBox.copyPath(Patch.MERGE_LIST, l))); } java.util.List<java.lang.String> paths = new java.util.ArrayList(m.keySet()); java.util.Collections.sort(paths); for (java.lang.String path : paths) { if (!(com.google.gerrit.reviewdb.client.Patch.isMagic(path))) { comments.add(new com.google.gerrit.client.change.FileComments(clp, project, psId, path, com.google.gerrit.client.change.ReplyBox.copyPath(path, m.get(path)))); } } commentsPanel.setVisible(((comments.getWidgetCount()) > 0)); }",9a2eec5232d17a12951da80a949fcb9504a18201,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_History.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.google.gerrit.common.Nullable Project.NameKey getProject() { return project; },abc5931fe881e49cbf0882f1335cfc5df9ea7abe,Project.NameKey getProject() { return project; },587bd72c3549aae2c2ee6062386095fb456c49c2,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DraftBox.java,"@com.google.gwt.uibinder.client.UiHandler({ ""discard1"", ""discard2"" }) void onDiscard(com.google.gwt.event.dom.client.ClickEvent e) { e.stopPropagation(); if (isNew()) { removeUI(); restoreSelection(); } else { setEdit(false); pendingGroup = new com.google.gerrit.client.rpc.CallbackGroup(); com.google.gerrit.client.changes.CommentApi.deleteDraft(psId, comment.id(), pendingGroup.addFinal(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { pendingGroup = null; removeUI(); } })); } }",41ade0932a5353d4456e115f853d9ebd54bb6fa8,"@com.google.gwt.uibinder.client.UiHandler({ ""discard1"", ""discard2"" }) void onDiscard(com.google.gwt.event.dom.client.ClickEvent e) { e.stopPropagation(); if (isNew()) { removeUI(); restoreSelection(); } else { setEdit(false); pendingGroup = new com.google.gerrit.client.rpc.CallbackGroup(); com.google.gerrit.client.changes.CommentApi.deleteDraft(psId, Project.NameKey.asStringOrNull(project), comment.id(), pendingGroup.addFinal(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { pendingGroup = null; removeUI(); } })); } }",0f87bdc7859a56a8d23db6eb1edb3d7a81c8f636,"@com.google.gwt.uibinder.client.UiHandler({ ""discard1"", ""discard2"" }) void onDiscard(com.google.gwt.event.dom.client.ClickEvent e) { e.stopPropagation(); if (isNew()) { removeUI(); restoreSelection(); } else { setEdit(false); pendingGroup = new com.google.gerrit.client.rpc.CallbackGroup(); com.google.gerrit.client.changes.CommentApi.deleteDraft(Project.NameKey.asStringOrNull(project), psId, comment.id(), pendingGroup.addFinal(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { pendingGroup = null; removeUI(); } })); } }",15aa7b14a5fe7607aa15330fd2b2580ab268ce09,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RebaseAction.java,"@java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.rebase(id.get(), revision, getBase(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); }",0af3f02f63f2275fef8acab988ff578388b45586,"@java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.rebase(id.get(), project.get(), revision, getBase(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, project)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); }",47d5bc6770e0e293175954012752a28472b6193c,"@java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.rebase(project.get(), id.get(), revision, getBase(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); }",4023d595c3afbab2aa71492aaa2f6f6971aab006,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,"public static java.lang.String toEditScreen(com.google.gerrit.reviewdb.client.PatchSet.Id revision, java.lang.String fileName, int line) { return com.google.gerrit.client.Dispatcher.toPatch(""edit"", com.google.gerrit.client.DiffObject.base(), revision, fileName, null, line); }",900020e1d1c25ada7675b39b3cb9e6e45c4e64e2,"public static java.lang.String toEditScreen(com.google.gerrit.reviewdb.client.PatchSet.Id revision, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String fileName, int line) { return com.google.gerrit.client.Dispatcher.toPatch(""edit"", com.google.gerrit.client.DiffObject.base(), revision, project, fileName, null, line); }",5c6c94fe8b53138e90ebd0ed53273a2ff0195fd4,"public static java.lang.String toEditScreen(@com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.PatchSet.Id revision, java.lang.String fileName, int line) { return com.google.gerrit.client.Dispatcher.toPatch(""edit"", project, com.google.gerrit.client.DiffObject.base(), revision, fileName, null, line); }",9603382d8231ff3d1d096fcca47606e013622d1f,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RebaseAction.java,"static void call(final com.google.gwt.user.client.ui.Button b, final java.lang.String project, final java.lang.String branch, final com.google.gerrit.reviewdb.client.Change.Id id, final java.lang.String revision, final boolean enabled) { b.setEnabled(false); new com.google.gerrit.client.ui.RebaseDialog(project, branch, id, enabled) { @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.rebase(id.get(), revision, getBase(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { super.onClose(event); b.setEnabled(true); } }.center(); }",ee4b768a58f5ee99ae63afe8ccf8cf00bc78b787,"static void call(final com.google.gwt.user.client.ui.Button b, final com.google.gerrit.reviewdb.client.Project.NameKey project, final java.lang.String branch, final com.google.gerrit.reviewdb.client.Change.Id id, final java.lang.String revision, final boolean enabled) { b.setEnabled(false); new com.google.gerrit.client.ui.RebaseDialog(project, branch, id, enabled) { @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.rebase(id.get(), project.get(), revision, getBase(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, project)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { super.onClose(event); b.setEnabled(true); } }.center(); }",607f6bc47789d2e5d269ae6da795564f6f32c3de,"static void call(final com.google.gwt.user.client.ui.Button b, final com.google.gerrit.reviewdb.client.Project.NameKey project, final java.lang.String branch, final com.google.gerrit.reviewdb.client.Change.Id id, final java.lang.String revision, final boolean enabled) { b.setEnabled(false); new com.google.gerrit.client.ui.RebaseDialog(project, branch, id, enabled) { @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.rebase(project.get(), id.get(), revision, getBase(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { super.onClose(event); b.setEnabled(true); } }.center(); }",22d4882f411af9be8d8d24af8263fcd4a3ca5b1d,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_PathSuggestOracle.java,"@java.lang.Override protected void onRequestSuggestions(final com.google.gerrit.client.change.Request req, final com.google.gerrit.client.change.Callback cb) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(changeId.get(), revision.name()).view(""files""); if ((req.getQuery()) != null) { api.addParameter(""q"", ((req.getQuery()) == null ? """" : req.getQuery())); } api.background().get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { java.util.List<com.google.gerrit.client.change.Suggestion> r = new java.util.ArrayList<>(); for (java.lang.String path : com.google.gerrit.client.rpc.Natives.asList(result)) { r.add(new com.google.gerrit.client.change.PathSuggestOracle.PathSuggestion(path)); } cb.onSuggestionsReady(req, new com.google.gerrit.client.change.Response(r)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { java.util.List<com.google.gerrit.client.change.Suggestion> none = java.util.Collections.emptyList(); cb.onSuggestionsReady(req, new com.google.gerrit.client.change.Response(none)); } }); }",b4a3f5ff8a565d3a2598a040cd1d08af585befdf,"@java.lang.Override protected void onRequestSuggestions(final com.google.gerrit.client.change.Request req, final com.google.gerrit.client.change.Callback cb) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(changeId.get(), Project.NameKey.asStringOrNull(project), revision.name()).view(""files""); if ((req.getQuery()) != null) { api.addParameter(""q"", ((req.getQuery()) == null ? """" : req.getQuery())); } api.background().get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { java.util.List<com.google.gerrit.client.change.Suggestion> r = new java.util.ArrayList<>(); for (java.lang.String path : com.google.gerrit.client.rpc.Natives.asList(result)) { r.add(new com.google.gerrit.client.change.PathSuggestOracle.PathSuggestion(path)); } cb.onSuggestionsReady(req, new com.google.gerrit.client.change.Response(r)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { java.util.List<com.google.gerrit.client.change.Suggestion> none = java.util.Collections.emptyList(); cb.onSuggestionsReady(req, new com.google.gerrit.client.change.Response(none)); } }); }",0bd89ca65fc70480e6e0cfc3b4a04aa76e963d06,"@java.lang.Override protected void onRequestSuggestions(com.google.gerrit.client.change.Request req, com.google.gerrit.client.change.Callback cb) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(project.get(), changeId.get(), revision.name()).view(""files""); if ((req.getQuery()) != null) { api.addParameter(""q"", ((req.getQuery()) == null ? """" : req.getQuery())); } api.background().get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { java.util.List<com.google.gerrit.client.change.Suggestion> r = new java.util.ArrayList<>(); for (java.lang.String path : com.google.gerrit.client.rpc.Natives.asList(result)) { r.add(new com.google.gerrit.client.change.PathSuggestOracle.PathSuggestion(path)); } cb.onSuggestionsReady(req, new com.google.gerrit.client.change.Response(r)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { java.util.List<com.google.gerrit.client.change.Suggestion> none = java.util.Collections.emptyList(); cb.onSuggestionsReady(req, new com.google.gerrit.client.change.Response(none)); } }); }",825cd77de6d8626d0c4ee1e9774134ef173f83fd,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void unmarkPrivate(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.change(id).view(""private.delete"").post(com.google.gerrit.client.changes.ChangeApi.PrivateInput.create(), cb); }",e399b7b3f09b7019683061912b0f75d967521f8a,"public static void unmarkPrivate(int id, @com.google.gerrit.common.Nullable java.lang.String project, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.change(id, project).view(""private.delete"").post(com.google.gerrit.client.changes.ChangeApi.PrivateInput.create(), cb); }",96d3ec64aa1863f673148d0973c1e51097703997,"public static void unmarkPrivate(@com.google.gerrit.common.Nullable java.lang.String project, int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.change(project, id).view(""private.delete"").post(com.google.gerrit.client.changes.ChangeApi.PrivateInput.create(), cb); }",296304df6f02bc5453517d5be59e8dac54d57b51,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_FileComments.java,"private static java.lang.String url(com.google.gerrit.reviewdb.client.PatchSet.Id ps, com.google.gerrit.client.changes.CommentInfo info) { return com.google.gerrit.client.Dispatcher.toPatch(null, ps, info.path()); }",977307334af18066bc222d22aa8cea78e51b7662,"private static java.lang.String url(com.google.gerrit.reviewdb.client.PatchSet.Id ps, com.google.gerrit.client.changes.CommentInfo info, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project) { return com.google.gerrit.client.Dispatcher.toPatch(null, ps, project, info.path()); }",efb5821e3de2cb5dfc04f73856f1b32fcf2b547f,"private static java.lang.String url(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.PatchSet.Id ps, com.google.gerrit.client.changes.CommentInfo info) { return com.google.gerrit.client.Dispatcher.toPatch(project, null, ps, info.path()); }",fd77a74c0c646263ecd323be2766007d980c7540,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,@java.lang.Override void onShow() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); },037730d807bbe7fbb118a9496481d382d1c3e20d,"@java.lang.Override void onShow() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, project)); }",fd61ef957630fb9748813b0b14a5dd2b831a4efe,"@java.lang.Override void onShow() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, changeId)); }",b5fdca440c9322a0e1b8a3991fcdd2bdf8e18adf,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"@com.google.gwt.uibinder.client.UiHandler(""deleteRevision"") void onDeleteRevision(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteDraftRevision())) { com.google.gerrit.client.change.ChangeActions.delete(changeId, revision, publish, deleteRevision); } }",a0fff05a4cde975828ab008f1b54e874e37cb91b,"@com.google.gwt.uibinder.client.UiHandler(""deleteRevision"") void onDeleteRevision(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteDraftRevision())) { com.google.gerrit.client.change.ChangeActions.delete(changeId, project, revision, publish, deleteRevision); } }",c7339ba220f29604c7453640e7971a07094ebed7,"@com.google.gwt.uibinder.client.UiHandler(""deleteRevision"") void onDeleteRevision(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteDraftRevision())) { com.google.gerrit.client.change.ChangeActions.delete(getProject(), changeId, revision, publish, deleteRevision); } }",414f23eee5a8b3ecd619186226c75e58196df9d7,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_QuickApprove.java,"@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if (((replyAction) != null) && (replyAction.isVisible())) { replyAction.quickApprove(input); } else { com.google.gerrit.client.changes.ChangeApi.revision(changeId.get(), revision).view(""review"").post(input, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ReviewInput>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ReviewInput result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); } }); } }",1a8d36dc64ff8838629b5ab6053fd6347ba68ba9,"@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if (((replyAction) != null) && (replyAction.isVisible())) { replyAction.quickApprove(input); } else { com.google.gerrit.client.changes.ChangeApi.revision(changeId.get(), project.get(), revision).view(""review"").post(input, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ReviewInput>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ReviewInput result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, project)); } }); } }",a491820cac92109009799a02f70ad1835f632bf1,"@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if (((replyAction) != null) && (replyAction.isVisible())) { replyAction.quickApprove(input); } else { com.google.gerrit.client.changes.ChangeApi.revision(project.get(), changeId.get(), revision).view(""review"").post(input, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ReviewInput>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ReviewInput result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, changeId)); } }); } }",60135d1abc24d88681d10934bcbfbf7f687368b9,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_QuickApprove.java,@java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ReviewInput result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); },79db0dbeb0cff80192e069a4c383b251b4275455,"@java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ReviewInput result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, project)); }",25419505219186d6e58709b53693c57b61d51dd1,"@java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ReviewInput result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, changeId)); }",4110b5faeaaf70ab261f08669d52d7a0bf260bc5,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ReplyBox.java,"private void postReview() { in.message(message.getText().trim()); in.drafts(DraftHandling.PUBLISH_ALL_REVISIONS); in.prePost(); com.google.gerrit.client.changes.ChangeApi.revision(psId.getParentKey().get(), revision).view(""review"").post(in, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ReviewInput>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ReviewInput result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(psId)); } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { if (com.google.gerrit.client.rpc.RestApi.isNotSignedIn(caught)) { lc.setReplyComment(message.getText()); } super.onFailure(caught); } }); hide(); }",c4a3eadc3557d55c8383864ac70bfc1bcd26c384,"private void postReview() { in.message(message.getText().trim()); in.drafts(DraftHandling.PUBLISH_ALL_REVISIONS); in.prePost(); com.google.gerrit.client.changes.ChangeApi.revision(psId.getParentKey().get(), Project.NameKey.asStringOrNull(project), revision).view(""review"").post(in, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ReviewInput>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ReviewInput result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(psId)); } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { if (com.google.gerrit.client.rpc.RestApi.isNotSignedIn(caught)) { lc.setReplyComment(message.getText()); } super.onFailure(caught); } }); hide(); }",56ad246644da6c894e1f4af4ddeed03a13eaf19e,"private void postReview() { in.message(message.getText().trim()); in.drafts(DraftHandling.PUBLISH_ALL_REVISIONS); in.prePost(); com.google.gerrit.client.changes.ChangeApi.revision(project.get(), psId.getParentKey().get(), revision).view(""review"").post(in, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ReviewInput>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ReviewInput result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, psId)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if (com.google.gerrit.client.rpc.RestApi.isNotSignedIn(caught)) { lc.setReplyComment(message.getText()); } super.onFailure(caught); } }); hide(); }",f55a94c224a52955926104797aabd209c3f02bc2,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static com.google.gerrit.client.rpc.RestApi reviewer(int id, int reviewer) { return ChangeApi.change(id).view(""reviewers"").id(reviewer); }",1ce00b748f2c4ef1e30bd6fc42d7d13e30dc2750,"public static com.google.gerrit.client.rpc.RestApi reviewer(int id, @com.google.gerrit.common.Nullable java.lang.String project, int reviewer) { return ChangeApi.change(id, project).view(""reviewers"").id(reviewer); }",9f3da923492b0bca1d6b60b900647de7c8223004,"public static com.google.gerrit.client.rpc.RestApi reviewer(@com.google.gerrit.common.Nullable java.lang.String project, int id, int reviewer) { return ChangeApi.change(project, id).view(""reviewers"").id(reviewer); }",2187cb25a7e8bf636d47dc4fec0859e0bf5e67ff,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void markPrivate(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.change(id).view(""private"").post(com.google.gerrit.client.changes.ChangeApi.PrivateInput.create(), cb); }",71e1f6bdf850784890a6a16556997673227b7d0a,"public static void markPrivate(int id, @com.google.gerrit.common.Nullable java.lang.String project, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.change(id, project).view(""private"").post(com.google.gerrit.client.changes.ChangeApi.PrivateInput.create(), cb); }",2c2a1bccc8bdd59282ae38c1c7d71210f342e2f1,"public static void markPrivate(@com.google.gerrit.common.Nullable java.lang.String project, int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.change(project, id).view(""private"").post(com.google.gerrit.client.changes.ChangeApi.PrivateInput.create(), cb); }",27760d381ee790f8eced2a6f20945f80087a2903,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static com.google.gerrit.client.rpc.RestApi actions(int id, java.lang.String revision) { if ((revision == null) || (revision.equals(""""))) { revision = ""current""; } return com.google.gerrit.client.changes.ChangeApi.call(id, revision, ""actions""); }",f098bdf0c07c3bb7ed666f251bd3870523da3c31,"public static com.google.gerrit.client.rpc.RestApi actions(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String revision) { if ((revision == null) || (revision.equals(""""))) { revision = ""current""; } return com.google.gerrit.client.changes.ChangeApi.call(id, project, revision, ""actions""); }",9bb6d2941c1e2a7581538a892e1d55487b389bf9,"public static com.google.gerrit.client.rpc.RestApi actions(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String revision) { if ((revision == null) || (revision.equals(""""))) { revision = ""current""; } return com.google.gerrit.client.changes.ChangeApi.call(project, id, revision, ""actions""); }",e32da5e8db14a6a181bc26951d3a038d86c40e96,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RevertAction.java,"static void call(final com.google.gwt.user.client.ui.Button b, final com.google.gerrit.reviewdb.client.Change.Id id, final java.lang.String revision, final java.lang.String commitSubject) { b.setEnabled(false); new com.google.gerrit.client.ui.TextAreaActionDialog(Util.C.revertChangeTitle(), Util.C.headingRevertMessage()) { { sendButton.setText(Util.C.buttonRevertChangeSend()); message.setText(Util.M.revertChangeDefaultMessage(commitSubject, revision)); } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.revert(id.get(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { super.onClose(event); b.setEnabled(true); } }.center(); }",9997f40ffbc6474f755d8b058054a27d3bbf1c4a,"static void call(final com.google.gwt.user.client.ui.Button b, final com.google.gerrit.reviewdb.client.Change.Id id, @com.google.gerrit.common.Nullable final com.google.gerrit.reviewdb.client.Project.NameKey project, final java.lang.String revision, final java.lang.String commitSubject) { b.setEnabled(false); new com.google.gerrit.client.ui.TextAreaActionDialog(Util.C.revertChangeTitle(), Util.C.headingRevertMessage()) { { sendButton.setText(Util.C.buttonRevertChangeSend()); message.setText(Util.M.revertChangeDefaultMessage(commitSubject, revision)); } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.revert(id.get(), Project.NameKey.asStringOrNull(project), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId(), result.projectNameKey())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { super.onClose(event); b.setEnabled(true); } }.center(); }",f45c2426877fc7cfdd65fb842ff3980945549891,"static void call(final com.google.gwt.user.client.ui.Button b, com.google.gerrit.reviewdb.client.Change.Id id, com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String revision, java.lang.String commitSubject) { b.setEnabled(false); new com.google.gerrit.client.ui.TextAreaActionDialog(Util.C.revertChangeTitle(), Util.C.headingRevertMessage()) { { sendButton.setText(Util.C.buttonRevertChangeSend()); message.setText(Util.M.revertChangeDefaultMessage(commitSubject, revision)); } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.revert(project.get(), id.get(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.projectNameKey(), result.legacyId())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { super.onClose(event); b.setEnabled(true); } }.center(); }",ca2c20a5dd8a4692e7790a3802ec3429f607f0e4,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RevertAction.java,"@java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.revert(id.get(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); }",c4a7beeab4e40e9f56506e3e14741c4d0f3dafa4,"@java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.revert(id.get(), Project.NameKey.asStringOrNull(project), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId(), result.projectNameKey())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); }",59111b25b296b871a0e48a8ec57d25bb006aae76,"@java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.revert(project.get(), id.get(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.projectNameKey(), result.legacyId())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); }",39b6d095e40b6847d319eb7fa8b325e2db266e6d,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_Header.java,"private com.google.gerrit.client.rpc.RestApi reviewed() { return com.google.gerrit.client.changes.ChangeApi.revision(patchSetId).view(""files"").id(path).view(""reviewed""); }",0b1951da5c253ecb94d47e047db03c202d775ac4,"private com.google.gerrit.client.rpc.RestApi reviewed() { return com.google.gerrit.client.changes.ChangeApi.revision(patchSetId, Project.NameKey.asStringOrNull(projectKey)).view(""files"").id(path).view(""reviewed""); }",54666649a645a1f9c66103df361ac18310f93b1e,"private com.google.gerrit.client.rpc.RestApi reviewed() { return com.google.gerrit.client.changes.ChangeApi.revision(Project.NameKey.asStringOrNull(projectKey), patchSetId).view(""files"").id(path).view(""reviewed""); }",5eb2ddb7ce6df51d1f039fbe631895defd7199bd,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_Header.java,"private java.lang.String url(com.google.gerrit.client.info.FileInfo info) { return (diffScreenType) == (com.google.gerrit.extensions.client.GeneralPreferencesInfo.DiffView.UNIFIED_DIFF) ? com.google.gerrit.client.Dispatcher.toUnified(base, patchSetId, info.path()) : com.google.gerrit.client.Dispatcher.toSideBySide(base, patchSetId, info.path()); }",24257c66cbddd862f09a28e0059bd339ed258e85,"private java.lang.String url(com.google.gerrit.client.info.FileInfo info) { return (diffScreenType) == (com.google.gerrit.extensions.client.GeneralPreferencesInfo.DiffView.UNIFIED_DIFF) ? com.google.gerrit.client.Dispatcher.toUnified(base, patchSetId, projectKey, info.path()) : com.google.gerrit.client.Dispatcher.toSideBySide(base, patchSetId, projectKey, info.path()); }",66dc64d4cc91effb49317a86de447c4ea7847570,"private java.lang.String url(com.google.gerrit.client.info.FileInfo info) { return (diffScreenType) == (com.google.gerrit.extensions.client.GeneralPreferencesInfo.DiffView.UNIFIED_DIFF) ? com.google.gerrit.client.Dispatcher.toUnified(projectKey, base, patchSetId, info.path()) : com.google.gerrit.client.Dispatcher.toSideBySide(projectKey, base, patchSetId, info.path()); }",7e2d52b542538e99e8bf7b0c2f3982e3e66a53df,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_Header.java,"@java.lang.Override protected void onLoad() { com.google.gerrit.client.diff.DiffApi.list(patchSetId, base.asPatchSetId(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> result) { files = result.values(); com.google.gerrit.client.info.FileInfo.sortFileInfoByPath(files); fileNumber.setInnerText(java.lang.Integer.toString(((com.google.gerrit.client.rpc.Natives.asList(files).indexOf(result.get(path))) + 1))); fileCount.setInnerText(java.lang.Integer.toString(files.length())); } }); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.changes.ChangeApi.revision(patchSetId).view(""files"").addParameterTrue(""reviewed"").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { boolean b = com.google.gerrit.client.rpc.Natives.asList(result).contains(path); reviewed.setValue(b, false); if ((!b) && ((reviewedState) == (com.google.gerrit.client.diff.Header.ReviewedState.AUTO_REVIEW))) { postAutoReviewed(); } reviewedState = com.google.gerrit.client.diff.Header.ReviewedState.LOADED; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }",bac7b2947805b44534a7404ff1e5d4db7e6833cd,"@java.lang.Override protected void onLoad() { com.google.gerrit.client.diff.DiffApi.list(patchSetId, base.asPatchSetId(), Project.NameKey.asStringOrNull(projectKey), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> result) { files = result.values(); com.google.gerrit.client.info.FileInfo.sortFileInfoByPath(files); fileNumber.setInnerText(java.lang.Integer.toString(((com.google.gerrit.client.rpc.Natives.asList(files).indexOf(result.get(path))) + 1))); fileCount.setInnerText(java.lang.Integer.toString(files.length())); } }); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.changes.ChangeApi.revision(patchSetId, Project.NameKey.asStringOrNull(projectKey)).view(""files"").addParameterTrue(""reviewed"").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { boolean b = com.google.gerrit.client.rpc.Natives.asList(result).contains(path); reviewed.setValue(b, false); if ((!b) && ((reviewedState) == (com.google.gerrit.client.diff.Header.ReviewedState.AUTO_REVIEW))) { postAutoReviewed(); } reviewedState = com.google.gerrit.client.diff.Header.ReviewedState.LOADED; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }",e40e564fc3430846aeeeebbc68720bdfff8eff32,"@java.lang.Override protected void onLoad() { com.google.gerrit.client.diff.DiffApi.list(Project.NameKey.asStringOrNull(projectKey), patchSetId, base.asPatchSetId(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> result) { files = result.values(); com.google.gerrit.client.info.FileInfo.sortFileInfoByPath(files); fileNumber.setInnerText(java.lang.Integer.toString(((com.google.gerrit.client.rpc.Natives.asList(files).indexOf(result.get(path))) + 1))); fileCount.setInnerText(java.lang.Integer.toString(files.length())); } }); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.changes.ChangeApi.revision(Project.NameKey.asStringOrNull(projectKey), patchSetId).view(""files"").addParameterTrue(""reviewed"").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { boolean b = com.google.gerrit.client.rpc.Natives.asList(result).contains(path); reviewed.setValue(b, false); if ((!b) && ((reviewedState) == (com.google.gerrit.client.diff.Header.ReviewedState.AUTO_REVIEW))) { postAutoReviewed(); } reviewedState = com.google.gerrit.client.diff.Header.ReviewedState.LOADED; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }",3e93bd09a59d30830be0047b44f29452620e52dc,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Labels.java,"private static void onRemoveReviewer(com.google.gwt.dom.client.NativeEvent event) { java.lang.Integer user = com.google.gerrit.client.change.Labels.getDataId(event); if (user != null) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); final com.google.gerrit.reviewdb.client.Change.Id changeId = screen.getPatchSetId().getParentKey(); com.google.gerrit.client.changes.ChangeApi.reviewer(changeId.get(), user).delete(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); } } }); } }",4bd8054af7aa15aff0df700be75e449578810210,"private static void onRemoveReviewer(com.google.gwt.dom.client.NativeEvent event) { java.lang.Integer user = com.google.gerrit.client.change.Labels.getDataId(event); if (user != null) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); final com.google.gerrit.reviewdb.client.Change.Id changeId = screen.getPatchSetId().getParentKey(); com.google.gerrit.client.changes.ChangeApi.reviewer(changeId.get(), Project.NameKey.asStringOrNull(screen.getProject()), user).delete(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, screen.getProject())); } } }); } }",31213b17fe1eb5bd8a5551a8afac466ae003e241,"private static void onRemoveReviewer(com.google.gwt.dom.client.NativeEvent event) { java.lang.Integer user = com.google.gerrit.client.change.Labels.getDataId(event); if (user != null) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); final com.google.gerrit.reviewdb.client.Change.Id changeId = screen.getPatchSetId().getParentKey(); com.google.gerrit.client.changes.ChangeApi.reviewer(screen.getProject().get(), changeId.get(), user).delete(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(screen.getProject(), changeId)); } } }); } }",51a02c78e128b3ef91deb6ae5d86d4761d22489c,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Labels.java,"private static void onRemoveVote(com.google.gwt.dom.client.NativeEvent event) { java.lang.Integer user = com.google.gerrit.client.change.Labels.getDataId(event); java.lang.String vote = com.google.gerrit.client.change.Labels.getVoteId(event); if ((user != null) && (vote != null)) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); final com.google.gerrit.reviewdb.client.Change.Id changeId = screen.getPatchSetId().getParentKey(); com.google.gerrit.client.changes.ChangeApi.vote(changeId.get(), user, vote).delete(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); } } }); } }",8ab6fa897c3ca14a1560dde4a24f01c22e5b5334,"private static void onRemoveVote(com.google.gwt.dom.client.NativeEvent event) { java.lang.Integer user = com.google.gerrit.client.change.Labels.getDataId(event); java.lang.String vote = com.google.gerrit.client.change.Labels.getVoteId(event); if ((user != null) && (vote != null)) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); final com.google.gerrit.reviewdb.client.Change.Id changeId = screen.getPatchSetId().getParentKey(); com.google.gerrit.client.changes.ChangeApi.vote(changeId.get(), Project.NameKey.asStringOrNull(screen.getProject()), user, vote).delete(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, screen.getProject())); } } }); } }",7ae66a881bd468a167e26920ec9f753a7a29b32d,"private static void onRemoveVote(com.google.gwt.dom.client.NativeEvent event) { java.lang.Integer user = com.google.gerrit.client.change.Labels.getDataId(event); java.lang.String vote = com.google.gerrit.client.change.Labels.getVoteId(event); if ((user != null) && (vote != null)) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); final com.google.gerrit.reviewdb.client.Change.Id changeId = screen.getPatchSetId().getParentKey(); com.google.gerrit.client.changes.ChangeApi.vote(screen.getProject().get(), changeId.get(), user, vote).delete(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(screen.getProject(), changeId)); } } }); } }",cdf9be70d3897d9ed9c9b26020036d81d4da74fe,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Labels.java,@java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); } },613bfc6f9e38a704ea275dbf9699516ee274a65e,"@java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, screen.getProject())); } }",691e912bd5a4500122eeb5f51b0f35908c4dc6de,"@java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(screen.getProject(), changeId)); } }",abc73918e072d87b26e62c9b879d6d90690a2cc8,2017-07-26 07:42:44,7
108592,gerrit-httpd_src_main_java_com_google_gerrit_httpd_DirectChangeByCommit.java,"@java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { java.lang.String query = com.google.common.base.CharMatcher.is('/').trimTrailingFrom(req.getPathInfo()); java.util.List<com.google.gerrit.extensions.common.ChangeInfo> results; try { results = changes.query(query).withLimit(2).get(); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { com.google.gerrit.httpd.DirectChangeByCommit.log.warn((""Cannot process query by URL: /r/"" + query), e); results = com.google.common.collect.ImmutableList.of(); } java.lang.String token; if ((results.size()) == 1) { token = com.google.gerrit.common.PageLinks.toChange(new com.google.gerrit.reviewdb.client.Change.Id(results.iterator().next()._number)); } else { token = com.google.gerrit.common.PageLinks.toChangeQuery(query); } com.google.gerrit.httpd.UrlModule.toGerrit(token, req, rsp); }",339a0e628671608d1c9e90198eecbba46dbedbe9,"@java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { java.lang.String query = com.google.common.base.CharMatcher.is('/').trimTrailingFrom(req.getPathInfo()); java.util.List<com.google.gerrit.extensions.common.ChangeInfo> results; try { results = changes.query(query).withLimit(2).get(); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { com.google.gerrit.httpd.DirectChangeByCommit.log.warn((""Cannot process query by URL: /r/"" + query), e); results = com.google.common.collect.ImmutableList.of(); } java.lang.String token; if ((results.size()) == 1) { com.google.gerrit.extensions.common.ChangeInfo ci = results.iterator().next(); token = com.google.gerrit.common.PageLinks.toChange(new com.google.gerrit.reviewdb.client.Change.Id(ci._number), new com.google.gerrit.reviewdb.client.Project.NameKey(ci.project)); } else { token = com.google.gerrit.common.PageLinks.toChangeQuery(query); } com.google.gerrit.httpd.UrlModule.toGerrit(token, req, rsp); }",3d13236087b05f12dff0836cc6313a9aae9ca453,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { java.lang.String query = com.google.common.base.CharMatcher.is('/').trimTrailingFrom(req.getPathInfo()); java.util.List<com.google.gerrit.extensions.common.ChangeInfo> results; try { results = changes.query(query).withLimit(2).get(); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { com.google.gerrit.httpd.DirectChangeByCommit.log.warn((""Cannot process query by URL: /r/"" + query), e); results = com.google.common.collect.ImmutableList.of(); } java.lang.String token; if ((results.size()) == 1) { com.google.gerrit.extensions.common.ChangeInfo ci = results.iterator().next(); token = com.google.gerrit.common.PageLinks.toChange(new com.google.gerrit.reviewdb.client.Project.NameKey(ci.project), new com.google.gerrit.reviewdb.client.Change.Id(ci._number)); } else { token = com.google.gerrit.common.PageLinks.toChangeQuery(query); } com.google.gerrit.httpd.UrlModule.toGerrit(token, req, rsp); }",552e29f8a516da4bfbc951da8ba2389fb8f9c429,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static com.google.gerrit.client.rpc.RestApi reviewers(int id) { return com.google.gerrit.client.changes.ChangeApi.change(id).view(""reviewers""); }",610c203edc5b20593c98f51c2b7b31ec83b9a65a,"public static com.google.gerrit.client.rpc.RestApi reviewers(int id, @com.google.gerrit.common.Nullable java.lang.String project) { return com.google.gerrit.client.changes.ChangeApi.change(id, project).view(""reviewers""); }",bc20449c2edaf666f0057d603b027df7c91b0964,"public static com.google.gerrit.client.rpc.RestApi reviewers(@com.google.gerrit.common.Nullable java.lang.String project, int id) { return com.google.gerrit.client.changes.ChangeApi.change(project, id).view(""reviewers""); }",3c87caa260ed015f839d0fde6746838c98385ab0,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"private static com.google.gerrit.client.rpc.RestApi call(int id, java.lang.String commit, java.lang.String action) { return ChangeApi.change(id).view(""revisions"").id(commit).view(action); }",0094fd680747d75c89e0a3c73131b0d508b7528c,"private static com.google.gerrit.client.rpc.RestApi call(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String commit, java.lang.String action) { return ChangeApi.change(id, project).view(""revisions"").id(commit).view(action); }",76a505be46ebc37a2428e8103fb36bb34efc51bf,"private static com.google.gerrit.client.rpc.RestApi call(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String commit, java.lang.String action) { return ChangeApi.change(project, id).view(""revisions"").id(commit).view(action); }",3abb9f87a559cc0485db624c971a62b839c750bb,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void setAssignee(int id, java.lang.String user, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.AccountInfo> cb) { com.google.gerrit.client.changes.ChangeApi.AssigneeInput input = com.google.gerrit.client.changes.ChangeApi.AssigneeInput.create(); input.assignee(user); com.google.gerrit.client.changes.ChangeApi.change(id).view(""assignee"").put(input, cb); }",71197b13ccabbe9d47b404232cd63b01ea02a8d3,"public static void setAssignee(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String user, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.AccountInfo> cb) { com.google.gerrit.client.changes.ChangeApi.AssigneeInput input = com.google.gerrit.client.changes.ChangeApi.AssigneeInput.create(); input.assignee(user); com.google.gerrit.client.changes.ChangeApi.change(id, project).view(""assignee"").put(input, cb); }",018c8207006ad88cb6ad083e3375622d60ca92a3,"public static void setAssignee(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String user, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.AccountInfo> cb) { com.google.gerrit.client.changes.ChangeApi.AssigneeInput input = com.google.gerrit.client.changes.ChangeApi.AssigneeInput.create(); input.assignee(user); com.google.gerrit.client.changes.ChangeApi.change(project, id).view(""assignee"").put(input, cb); }",0ff1c7f7ff60bda3c8f79a1c859fc30af35f9d02,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void edit(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.EditInfo> cb) { com.google.gerrit.client.changes.ChangeApi.edit(id).get(cb); }",605f0cb6165ec61c82ff00027b657269bcbf9442,"public static void edit(int id, @com.google.gerrit.common.Nullable java.lang.String project, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.EditInfo> cb) { com.google.gerrit.client.changes.ChangeApi.edit(id, project).get(cb); }",5aa5ac81da89b470adec08d265fff654cda4afa1,"public static void edit(@com.google.gerrit.common.Nullable java.lang.String project, int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.EditInfo> cb) { com.google.gerrit.client.changes.ChangeApi.edit(project, id).get(cb); }",febad80a772353b0272ea74901f42f5385d3a085,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_QueryScreen.java,@java.lang.Override protected com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.ChangeList> loadCallback() { return new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeList>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { if (isAttached()) { if (((result.length()) == 1) && (com.google.gerrit.client.changes.QueryScreen.isSingleQuery(query))) { com.google.gerrit.client.info.ChangeInfo c = result.get(0); com.google.gerrit.reviewdb.client.Change.Id id = c.legacyId(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } else { display(result); com.google.gerrit.client.changes.QueryScreen.this.display(); } } } }; },07b9dc1e05b0ea0e1893357ae28dbac7582f2521,"@java.lang.Override protected com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.ChangeList> loadCallback() { return new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeList>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { if (isAttached()) { if (((result.length()) == 1) && (com.google.gerrit.client.changes.QueryScreen.isSingleQuery(query))) { com.google.gerrit.client.info.ChangeInfo c = result.get(0); com.google.gerrit.reviewdb.client.Change.Id id = c.legacyId(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, c.projectNameKey())); } else { display(result); com.google.gerrit.client.changes.QueryScreen.this.display(); } } } }; }",cd4597080c7c5c366696142787dc6db9470bc120,"@java.lang.Override protected com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.ChangeList> loadCallback() { return new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeList>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { if (isAttached()) { if (((result.length()) == 1) && (com.google.gerrit.client.changes.QueryScreen.isSingleQuery(query))) { com.google.gerrit.client.info.ChangeInfo c = result.get(0); com.google.gerrit.reviewdb.client.Change.Id id = c.legacyId(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(c.projectNameKey(), id)); } else { display(result); com.google.gerrit.client.changes.QueryScreen.this.display(); } } } }; }",25a9e8db9828fb2bfbfacc63f4e02fd4bc520bea,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_QueryScreen.java,@java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { if (isAttached()) { if (((result.length()) == 1) && (com.google.gerrit.client.changes.QueryScreen.isSingleQuery(query))) { com.google.gerrit.client.info.ChangeInfo c = result.get(0); com.google.gerrit.reviewdb.client.Change.Id id = c.legacyId(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } else { display(result); this.display(); } } },a2d7d0a46fbcc28d5c27912ee13d7610408db540,"@java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { if (isAttached()) { if (((result.length()) == 1) && (com.google.gerrit.client.changes.QueryScreen.isSingleQuery(query))) { com.google.gerrit.client.info.ChangeInfo c = result.get(0); com.google.gerrit.reviewdb.client.Change.Id id = c.legacyId(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, c.projectNameKey())); } else { display(result); this.display(); } } }",b7087cb9e44bde2c49c0b05a712e189f5f147fa4,"@java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { if (isAttached()) { if (((result.length()) == 1) && (com.google.gerrit.client.changes.QueryScreen.isSingleQuery(query))) { com.google.gerrit.client.info.ChangeInfo c = result.get(0); com.google.gerrit.reviewdb.client.Change.Id id = c.legacyId(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(c.projectNameKey(), id)); } else { display(result); this.display(); } } }",4822fd39a37ccc98e94601d71a0a49ce3718ab08,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectAccessScreen.java,"@java.lang.Override public void onSuccess(com.google.gerrit.reviewdb.client.Change.Id changeId) { enable(true); commitMessage.setText(""""); error.clear(); if (changeId != null) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); } else { displayReadOnly(access); } }",9da076ed3db64b804802aa2c2a1c563167b27758,"@java.lang.Override public void onSuccess(com.google.gerrit.reviewdb.client.Change.Id changeId) { enable(true); commitMessage.setText(""""); error.clear(); if (changeId != null) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, getProjectKey())); } else { displayReadOnly(access); } }",d5c198124bb52b8ee782ab1f85b3a059a46fe433,"@java.lang.Override public void onSuccess(com.google.gerrit.reviewdb.client.Change.Id changeId) { enable(true); commitMessage.setText(""""); error.clear(); if (changeId != null) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(getProjectKey(), changeId)); } else { displayReadOnly(access); } }",6b855a87762a1d69bd1098ebb00f2544b4b3bbc5,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void submit(int id, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.SubmitInfo> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.call(id, commit, ""submit"").post(in, cb); }",2da58fc0ff65727f2f803c4b5d1f165526309335,"public static void submit(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.SubmitInfo> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.call(id, project, commit, ""submit"").post(in, cb); }",52a0bbc5348fcc609f49cc0c9cf2a9814d0c6e9a,"public static void submit(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.SubmitInfo> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.call(project, id, commit, ""submit"").post(in, cb); }",793f61d03dc71cbf989c4905ecc88e9143afb8b4,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void deleteRevision(int id, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.revision(id, commit).delete(cb); }",b565c418d4048adc4cc6e8ed4075c29a2d87fe65,"public static void deleteRevision(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.revision(id, project, commit).delete(cb); }",864c1612a36d392347de71b4302f9450a687a905,"public static void deleteRevision(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.revision(project, id, commit).delete(cb); }",2d86275aeef9687c496acb8f5a46eb740a568d71,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static com.google.gerrit.client.rpc.RestApi reviewer(int id, java.lang.String reviewer) { return ChangeApi.change(id).view(""reviewers"").id(reviewer); }",15137d2786b540e2367ac38c271adc4a8c08e631,"public static com.google.gerrit.client.rpc.RestApi reviewer(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String reviewer) { return ChangeApi.change(id, project).view(""reviewers"").id(reviewer); }",dcc2083a26e1990592889cb18e76198e03c5f50f,"public static com.google.gerrit.client.rpc.RestApi reviewer(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String reviewer) { return ChangeApi.change(project, id).view(""reviewers"").id(reviewer); }",a1d863ea525174f4cc5ec36344b8cd589f7338b1,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void commitWithLinks(int changeId, java.lang.String revision, com.google.gerrit.client.rpc.CallbackGroup.Callback<com.google.gerrit.client.info.ChangeInfo.CommitInfo> callback) { com.google.gerrit.client.changes.ChangeApi.revision(changeId, revision).view(""commit"").addParameterTrue(""links"").get(callback); }",02b01395a28c9b71f8d949e8c3fe3ba3252a0021,"public static void commitWithLinks(int changeId, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String revision, com.google.gerrit.client.rpc.CallbackGroup.Callback<com.google.gerrit.client.info.ChangeInfo.CommitInfo> callback) { com.google.gerrit.client.changes.ChangeApi.revision(changeId, project, revision).view(""commit"").addParameterTrue(""links"").get(callback); }",8393a3c764e379d61360fa087cbb099f6ddc23b4,"public static void commitWithLinks(@com.google.gerrit.common.Nullable java.lang.String project, int changeId, java.lang.String revision, com.google.gerrit.client.rpc.CallbackGroup.Callback<com.google.gerrit.client.info.ChangeInfo.CommitInfo> callback) { com.google.gerrit.client.changes.ChangeApi.revision(project, changeId, revision).view(""commit"").addParameterTrue(""links"").get(callback); }",a5bdc5fc0032185fc68c8e22251d2c2021b3ad46,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"@com.google.gwt.uibinder.client.UiHandler(""publish"") void onPublish(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.change.ChangeActions.publish(changeId, revision, publish, deleteRevision); }",200e9a87b769da16a7b3a9fefdbc9a1c3f9a91af,"@com.google.gwt.uibinder.client.UiHandler(""publish"") void onPublish(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.change.ChangeActions.publish(changeId, project, revision, publish, deleteRevision); }",d2f1af8886747fd086b2458e396ccc057c112833,"@com.google.gwt.uibinder.client.UiHandler(""publish"") void onPublish(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.change.ChangeActions.publish(getProject(), changeId, revision, publish, deleteRevision); }",93dbc8fa3ec1368ef59526e6252a0ba1281f74ee,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void deleteEdit(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.edit(id).delete(cb); }",285516f9301defe8abb4ca1df728f9e6f3011e22,"public static void deleteEdit(int id, @com.google.gerrit.common.Nullable java.lang.String project, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.edit(id, project).delete(cb); }",835ab7779fc3fda29b49bdab31073b1f35caac6e,"public static void deleteEdit(@com.google.gerrit.common.Nullable java.lang.String project, int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.edit(project, id).delete(cb); }",371058be8083fb2d732569d1f5a461b069ea6a25,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void revert(int id, java.lang.String msg, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.MessageInput input = com.google.gerrit.client.changes.ChangeApi.MessageInput.create(); input.message(com.google.gerrit.client.changes.ChangeApi.emptyToNull(msg)); com.google.gerrit.client.changes.ChangeApi.call(id, ""revert"").post(input, cb); }",50fec19eb5dca4276efd26486667dcd79cde8e81,"public static void revert(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String msg, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.MessageInput input = com.google.gerrit.client.changes.ChangeApi.MessageInput.create(); input.message(com.google.gerrit.client.changes.ChangeApi.emptyToNull(msg)); com.google.gerrit.client.changes.ChangeApi.call(id, project, ""revert"").post(input, cb); }",b248b4206ffbd02f80a244220736a70edc6675f3,"public static void revert(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String msg, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.MessageInput input = com.google.gerrit.client.changes.ChangeApi.MessageInput.create(); input.message(com.google.gerrit.client.changes.ChangeApi.emptyToNull(msg)); com.google.gerrit.client.changes.ChangeApi.call(project, id, ""revert"").post(input, cb); }",0dc50bf7262324b0a334fdb2b1734081b94cf42d,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static com.google.gerrit.client.rpc.RestApi drafts(int id) { return com.google.gerrit.client.changes.ChangeApi.call(id, ""drafts""); }",5d6fbb96636af1721848d4703c8e7fa0d5c86714,"public static com.google.gerrit.client.rpc.RestApi drafts(int id, @com.google.gerrit.common.Nullable java.lang.String project) { return com.google.gerrit.client.changes.ChangeApi.call(id, project, ""drafts""); }",3dc31c2db8110f13a4abbd1157cafcfa87e76eb4,"public static com.google.gerrit.client.rpc.RestApi drafts(@com.google.gerrit.common.Nullable java.lang.String project, int id) { return com.google.gerrit.client.changes.ChangeApi.call(project, id, ""drafts""); }",d9a651213008cd306f97fa96a464ee2fda25d4ff,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectAccessScreen.java,"@com.google.gwt.uibinder.client.UiHandler(""review"") void onReview(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent event) { final com.google.gerrit.common.data.ProjectAccess access = driver.flush(); if (driver.hasErrors()) { com.google.gwt.user.client.Window.alert(AdminConstants.I.errorsMustBeFixed()); return; } java.lang.String message = commitMessage.getText().trim(); if ("""".equals(message)) { message = null; } enable(false); Util.PROJECT_SVC.reviewProjectAccess(getProjectKey(), access.getRevision(), message, access.getLocal(), access.getInheritsFrom(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.reviewdb.client.Change.Id>() { @java.lang.Override public void onSuccess(com.google.gerrit.reviewdb.client.Change.Id changeId) { enable(true); commitMessage.setText(""""); error.clear(); if (changeId != null) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); } else { displayReadOnly(access); } } @java.lang.Override public void onFailure(java.lang.Throwable caught) { error.clear(); enable(true); super.onFailure(caught); } }); }",43a5bc3d228a01c1b66db0fca18313849bf587ad,"@com.google.gwt.uibinder.client.UiHandler(""review"") void onReview(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent event) { final com.google.gerrit.common.data.ProjectAccess access = driver.flush(); if (driver.hasErrors()) { com.google.gwt.user.client.Window.alert(AdminConstants.I.errorsMustBeFixed()); return; } java.lang.String message = commitMessage.getText().trim(); if ("""".equals(message)) { message = null; } enable(false); Util.PROJECT_SVC.reviewProjectAccess(getProjectKey(), access.getRevision(), message, access.getLocal(), access.getInheritsFrom(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.reviewdb.client.Change.Id>() { @java.lang.Override public void onSuccess(com.google.gerrit.reviewdb.client.Change.Id changeId) { enable(true); commitMessage.setText(""""); error.clear(); if (changeId != null) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, getProjectKey())); } else { displayReadOnly(access); } } @java.lang.Override public void onFailure(java.lang.Throwable caught) { error.clear(); enable(true); super.onFailure(caught); } }); }",f46366d30c84b0ae9c49e7d69a6d7d89bc4c54ac,"@com.google.gwt.uibinder.client.UiHandler(""review"") void onReview(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent event) { final com.google.gerrit.common.data.ProjectAccess access = driver.flush(); if (driver.hasErrors()) { com.google.gwt.user.client.Window.alert(AdminConstants.I.errorsMustBeFixed()); return; } java.lang.String message = commitMessage.getText().trim(); if ("""".equals(message)) { message = null; } enable(false); Util.PROJECT_SVC.reviewProjectAccess(getProjectKey(), access.getRevision(), message, access.getLocal(), access.getInheritsFrom(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.reviewdb.client.Change.Id>() { @java.lang.Override public void onSuccess(com.google.gerrit.reviewdb.client.Change.Id changeId) { enable(true); commitMessage.setText(""""); error.clear(); if (changeId != null) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(getProjectKey(), changeId)); } else { displayReadOnly(access); } } @java.lang.Override public void onFailure(java.lang.Throwable caught) { error.clear(); enable(true); super.onFailure(caught); } }); }",5f3a239b94e61e9656a1951e0d1f1a2dd44f2568,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void deleteAssignee(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.AccountInfo> cb) { com.google.gerrit.client.changes.ChangeApi.change(id).view(""assignee"").delete(cb); }",f501e01486da7997ba9072bb83293fbd6c8557cb,"public static void deleteAssignee(int id, @com.google.gerrit.common.Nullable java.lang.String project, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.AccountInfo> cb) { com.google.gerrit.client.changes.ChangeApi.change(id, project).view(""assignee"").delete(cb); }",052ea5092541ceb4e1800e905c3bb8d91f4d6107,"public static void deleteAssignee(@com.google.gerrit.common.Nullable java.lang.String project, int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.AccountInfo> cb) { com.google.gerrit.client.changes.ChangeApi.change(project, id).view(""assignee"").delete(cb); }",a23d4c28586e5ff16a70477b92ab3a425bfbe3d7,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void rebaseEdit(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.change(id).view(""edit:rebase"").post(in, cb); }",747bfc2d15320fcd630bc1740cdcd4f38b9d192d,"public static void rebaseEdit(int id, @com.google.gerrit.common.Nullable java.lang.String project, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.change(id, project).view(""edit:rebase"").post(in, cb); }",4f294bb30aad1a048a4c18b393915347df365c06,"public static void rebaseEdit(@com.google.gerrit.common.Nullable java.lang.String project, int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.change(project, id).view(""edit:rebase"").post(in, cb); }",eb1bbca89ebcb0dd81aec4a860f88b674770bca7,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_AbandonAction.java,"@java.lang.Override void send(java.lang.String message) { com.google.gerrit.client.changes.ChangeApi.abandon(id.get(), message, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); hide(); } }); }",c2e1a16d909f79f521157c9a0be4a3e38f77fad2,"@java.lang.Override void send(java.lang.String message) { com.google.gerrit.client.changes.ChangeApi.abandon(id.get(), ((project) == null ? null : project.get()), message, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, project)); hide(); } }); }",1a23020d8a59b24e5a24f040f4ca531e550805fd,"@java.lang.Override void send(java.lang.String message) { com.google.gerrit.client.changes.ChangeApi.abandon(project.get(), id.get(), message, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); hide(); } }); }",afd29399a67a9befc53747fe6406ce77c798a54d,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Reviewers.java,"void updateReviewerList() { com.google.gerrit.client.changes.ChangeApi.detail(changeId.get(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { display(result); } }); }",373fabb224347f42b1a0e595ef6b7564ce3149b4,"void updateReviewerList() { com.google.gerrit.client.changes.ChangeApi.detail(changeId.get(), Project.NameKey.asStringOrNull(project), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { display(result); } }); }",9d35001c4f21f0aeef0c5e176492a1040cfb325f,"void updateReviewerList() { com.google.gerrit.client.changes.ChangeApi.detail(project.get(), changeId.get(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { display(result); } }); }",46b928f0008182ab08da8e53f12599fae9dda711,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static com.google.gerrit.client.rpc.RestApi blame(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String path, boolean base) { return ChangeApi.revision(id).view(""files"").id(path).view(""blame"").addParameter(""base"", base); }",5292f1314d7313e40865f4fee7c1ace362d2d9b3,"public static com.google.gerrit.client.rpc.RestApi blame(com.google.gerrit.reviewdb.client.PatchSet.Id id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String path, boolean base) { return ChangeApi.revision(id, project).view(""files"").id(path).view(""blame"").addParameter(""base"", base); }",fc1f143393b43835cc1b214895d6eb00fec6c9d5,"public static com.google.gerrit.client.rpc.RestApi blame(@com.google.gerrit.common.Nullable java.lang.String project, com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String path, boolean base) { return ChangeApi.revision(project, id).view(""files"").id(path).view(""blame"").addParameter(""base"", base); }",98fbbea0434b944757fe9d03309be72ab278f6c4,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"private void initRevisionsAction(com.google.gerrit.client.info.ChangeInfo info, java.lang.String revision, com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.ActionInfo> actions) { int currentPatchSet; if (((info.currentRevision()) != null) && (info.revisions().containsKey(info.currentRevision()))) { currentPatchSet = info.revision(info.currentRevision())._number(); } else { com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.RevisionInfo> revList = info.revisions().values(); com.google.gerrit.client.info.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(revList); currentPatchSet = revList.get(((revList.length()) - 1))._number(); } java.lang.String currentlyViewedPatchSet; boolean isPatchSetCurrent = true; java.lang.String revisionId = info.revision(revision).id(); if (revisionId.equals(""edit"")) { currentlyViewedPatchSet = Resources.M.editPatchSet(com.google.gerrit.client.info.ChangeInfo.RevisionInfo.findEditParent(info.revisions().values())); currentPatchSet = (info.revisions().values().length()) - 1; } else { currentlyViewedPatchSet = revisionId; if (!(currentlyViewedPatchSet.equals(java.lang.Integer.toString(currentPatchSet)))) { isPatchSetCurrent = false; } } patchSetsText.setInnerText(Resources.M.patchSets(currentlyViewedPatchSet, currentPatchSet)); updatePatchSetsTextStyle(isPatchSetCurrent); patchSetsAction = new com.google.gerrit.client.change.PatchSetsAction(info.legacyId(), revision, edit, style, headerLine, patchSets); com.google.gerrit.client.info.ChangeInfo.RevisionInfo revInfo = info.revision(revision); if (revInfo.draft()) { if (actions.containsKey(""publish"")) { publish.setVisible(true); publish.setTitle(actions.get(""publish"").title()); } if (actions.containsKey(""/"")) { deleteRevision.setVisible(true); deleteRevision.setTitle(actions.get(""/"").title()); } } }",4e93beabc59fa2a0d2ddc1e1b97dc190947f2d2c,"private void initRevisionsAction(com.google.gerrit.client.info.ChangeInfo info, java.lang.String revision, com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.ActionInfo> actions) { int currentPatchSet; if (((info.currentRevision()) != null) && (info.revisions().containsKey(info.currentRevision()))) { currentPatchSet = info.revision(info.currentRevision())._number(); } else { com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.RevisionInfo> revList = info.revisions().values(); com.google.gerrit.client.info.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(revList); currentPatchSet = revList.get(((revList.length()) - 1))._number(); } java.lang.String currentlyViewedPatchSet; boolean isPatchSetCurrent = true; java.lang.String revisionId = info.revision(revision).id(); if (revisionId.equals(""edit"")) { currentlyViewedPatchSet = Resources.M.editPatchSet(com.google.gerrit.client.info.ChangeInfo.RevisionInfo.findEditParent(info.revisions().values())); currentPatchSet = (info.revisions().values().length()) - 1; } else { currentlyViewedPatchSet = revisionId; if (!(currentlyViewedPatchSet.equals(java.lang.Integer.toString(currentPatchSet)))) { isPatchSetCurrent = false; } } patchSetsText.setInnerText(Resources.M.patchSets(currentlyViewedPatchSet, currentPatchSet)); updatePatchSetsTextStyle(isPatchSetCurrent); patchSetsAction = new com.google.gerrit.client.change.PatchSetsAction(info.legacyId(), info.projectNameKey(), revision, edit, style, headerLine, patchSets); com.google.gerrit.client.info.ChangeInfo.RevisionInfo revInfo = info.revision(revision); if (revInfo.draft()) { if (actions.containsKey(""publish"")) { publish.setVisible(true); publish.setTitle(actions.get(""publish"").title()); } if (actions.containsKey(""/"")) { deleteRevision.setVisible(true); deleteRevision.setTitle(actions.get(""/"").title()); } } }",0a274cd7bc4a436b00277719058f8a296adbe349,"private void initRevisionsAction(com.google.gerrit.client.info.ChangeInfo info, java.lang.String revision, com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.ActionInfo> actions) { int currentPatchSet; if (((info.currentRevision()) != null) && (info.revisions().containsKey(info.currentRevision()))) { currentPatchSet = info.revision(info.currentRevision())._number(); } else { com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.RevisionInfo> revList = info.revisions().values(); com.google.gerrit.client.info.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(revList); currentPatchSet = revList.get(((revList.length()) - 1))._number(); } java.lang.String currentlyViewedPatchSet; boolean isPatchSetCurrent = true; java.lang.String revisionId = info.revision(revision).id(); if (revisionId.equals(""edit"")) { currentlyViewedPatchSet = Resources.M.editPatchSet(com.google.gerrit.client.info.ChangeInfo.RevisionInfo.findEditParent(info.revisions().values())); currentPatchSet = (info.revisions().values().length()) - 1; } else { currentlyViewedPatchSet = revisionId; if (!(currentlyViewedPatchSet.equals(java.lang.Integer.toString(currentPatchSet)))) { isPatchSetCurrent = false; } } patchSetsText.setInnerText(Resources.M.patchSets(currentlyViewedPatchSet, currentPatchSet)); updatePatchSetsTextStyle(isPatchSetCurrent); patchSetsAction = new com.google.gerrit.client.change.PatchSetsAction(info.projectNameKey(), info.legacyId(), revision, edit, style, headerLine, patchSets); com.google.gerrit.client.info.ChangeInfo.RevisionInfo revInfo = info.revision(revision); if (revInfo.draft()) { if (actions.containsKey(""publish"")) { publish.setVisible(true); publish.setTitle(actions.get(""publish"").title()); } if (actions.containsKey(""/"")) { deleteRevision.setVisible(true); deleteRevision.setTitle(actions.get(""/"").title()); } } }",824d339fd8da23a210ba134b1b6197db652333aa,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,"public static java.lang.String toPatch(com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.PatchSet.Id revision, java.lang.String fileName, com.google.gerrit.client.diff.DisplaySide side, int line) { return com.google.gerrit.client.Dispatcher.toPatch("""", diffBase, revision, fileName, side, line); }",0f362a4ae362af1449012ed604fdc54a5882bcc7,"public static java.lang.String toPatch(com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.PatchSet.Id revision, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String fileName, com.google.gerrit.client.diff.DisplaySide side, int line) { return com.google.gerrit.client.Dispatcher.toPatch("""", diffBase, revision, project, fileName, side, line); }",f9d70332d64d7c05d459bd72c0989bb5a824a417,"public static java.lang.String toPatch(@com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.PatchSet.Id revision, java.lang.String fileName, com.google.gerrit.client.diff.DisplaySide side, int line) { return com.google.gerrit.client.Dispatcher.toPatch("""", project, diffBase, revision, fileName, side, line); }",db51dd9d76171f1e6021826fd94223725dfdbc82,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,"@java.lang.Override public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.editor.EditScreen(id, line)); }",afa99322fb0282d028d1035fd3d78ad35d8ca177,"@java.lang.Override public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.editor.EditScreen(id, project, line)); }",43ee37f5e57bce0ef7c9d54c22f51f9b672e0561,"@java.lang.Override public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.editor.EditScreen(project, id, line)); }",2e2e47e7779d84d301b9c4747de2edad01fd5233,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"private void initIncludedInAction(com.google.gerrit.client.info.ChangeInfo info) { if ((info.status()) == (com.google.gerrit.reviewdb.client.Change.Status.MERGED)) { includedInAction = new com.google.gerrit.client.change.IncludedInAction(info.legacyId(), style, headerLine, includedIn); includedIn.setVisible(true); } }",89fa70a90d73b498060f2bcbea19707859d8e39a,"private void initIncludedInAction(com.google.gerrit.client.info.ChangeInfo info) { if ((info.status()) == (com.google.gerrit.reviewdb.client.Change.Status.MERGED)) { includedInAction = new com.google.gerrit.client.change.IncludedInAction(info.legacyId(), project, style, headerLine, includedIn); includedIn.setVisible(true); } }",545fd958a31eb81fdf8376cc65be8f87aa0afb1c,"private void initIncludedInAction(com.google.gerrit.client.info.ChangeInfo info) { if ((info.status()) == (com.google.gerrit.reviewdb.client.Change.Status.MERGED)) { includedInAction = new com.google.gerrit.client.change.IncludedInAction(info.projectNameKey(), info.legacyId(), style, headerLine, includedIn); includedIn.setVisible(true); } }",7cef6018cb5d9e01e03821a49c7e39fbc9e2e343,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,"public static java.lang.String toPatch(com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.PatchSet.Id revision, java.lang.String fileName) { return com.google.gerrit.client.Dispatcher.toPatch("""", diffBase, revision, fileName, null, 0); }",0a79b0d975346159bf08e125ea6e2a986f3e4d26,"public static java.lang.String toPatch(com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.PatchSet.Id revision, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String fileName) { return com.google.gerrit.client.Dispatcher.toPatch("""", diffBase, revision, project, fileName, null, 0); }",076b908cfa83813262e1e64f13c7b37100c4a97c,"public static java.lang.String toPatch(@com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.PatchSet.Id revision, java.lang.String fileName) { return com.google.gerrit.client.Dispatcher.toPatch("""", project, diffBase, revision, fileName, null, 0); }",c31ab56ac0aaf06b4088b682f4d93f829c5ce77e,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,"public static java.lang.String toUnified(com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.PatchSet.Id revision, java.lang.String fileName) { return com.google.gerrit.client.Dispatcher.toPatch(""unified"", diffBase, revision, fileName, null, 0); }",de7f354fef9a956f737704cec5cb66038d4c54bc,"public static java.lang.String toUnified(com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.PatchSet.Id revision, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String fileName) { return com.google.gerrit.client.Dispatcher.toPatch(""unified"", diffBase, revision, project, fileName, null, 0); }",dab74b8d0f5384174f0941e273ae685ac37252ed,"public static java.lang.String toUnified(@com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.PatchSet.Id revision, java.lang.String fileName) { return com.google.gerrit.client.Dispatcher.toPatch(""unified"", project, diffBase, revision, fileName, null, 0); }",20f7894008fb36e3fb59a02b6cfbecda86217923,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide.java,"@java.lang.Override protected void preDisplay(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { commentManager = new com.google.gerrit.client.diff.SideBySideCommentManager(this, base, revision, path, result.getCommentLinkProcessor(), getChangeStatus().isOpen()); setTheme(result.getTheme()); display(comments); header.setupPrevNextFiles(comments); }",3f434ec3530f7cb04df9e6ac87d7e4b7143b863a,"@java.lang.Override protected void preDisplay(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { commentManager = new com.google.gerrit.client.diff.SideBySideCommentManager(this, base, revision, getProject(), path, result.getCommentLinkProcessor(), getChangeStatus().isOpen()); setTheme(result.getTheme()); display(comments); header.setupPrevNextFiles(comments); }",842051751efd29d8ba0ce7aab50586db265df5b8,"@java.lang.Override protected void preDisplay(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { commentManager = new com.google.gerrit.client.diff.SideBySideCommentManager(this, getProject(), base, revision, path, result.getCommentLinkProcessor(), getChangeStatus().isOpen()); setTheme(result.getTheme()); display(comments); header.setupPrevNextFiles(comments); }",7555eabf2ca74d6f4f7ae042688499127c588d86,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,"private static java.lang.String toPatch(java.lang.String type, com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.PatchSet.Id revision, java.lang.String fileName, com.google.gerrit.client.diff.DisplaySide side, int line) { com.google.gerrit.reviewdb.client.Change.Id c = revision.getParentKey(); java.lang.StringBuilder p = new java.lang.StringBuilder(); p.append(""/c/"").append(c).append(""/""); if ((diffBase != null) && ((diffBase.asString()) != null)) { p.append(diffBase.asString()).append(""..""); } p.append(revision.getId()).append(""/"").append(com.google.gwtorm.client.KeyUtil.encode(fileName)); if (((type != null) && (!(type.isEmpty()))) && ((!(""sidebyside"".equals(type))) || (com.google.gerrit.client.Dispatcher.preferUnified()))) { p.append("","").append(type); } if ((side == (com.google.gerrit.client.diff.DisplaySide.A)) && (line > 0)) { p.append(""@a"").append(line); } else if (line > 0) { p.append(""@"").append(line); } return p.toString(); }",f16510b69ea5ce75dc24f17bf03666318ec1ca4e,"private static java.lang.String toPatch(java.lang.String type, com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.PatchSet.Id revision, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String fileName, com.google.gerrit.client.diff.DisplaySide side, int line) { com.google.gerrit.reviewdb.client.Change.Id c = revision.getParentKey(); java.lang.StringBuilder p = new java.lang.StringBuilder(toChange(c, project)); if ((diffBase != null) && ((diffBase.asString()) != null)) { p.append(diffBase.asString()).append(""..""); } p.append(revision.getId()).append(""/"").append(com.google.gwtorm.client.KeyUtil.encode(fileName)); if (((type != null) && (!(type.isEmpty()))) && ((!(""sidebyside"".equals(type))) || (com.google.gerrit.client.Dispatcher.preferUnified()))) { p.append("","").append(type); } if ((side == (com.google.gerrit.client.diff.DisplaySide.A)) && (line > 0)) { p.append(""@a"").append(line); } else if (line > 0) { p.append(""@"").append(line); } return p.toString(); }",ec2ce5625dc99d363ad2fb0cdb8d34cb0d3ce5f8,"private static java.lang.String toPatch(java.lang.String type, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.PatchSet.Id revision, java.lang.String fileName, com.google.gerrit.client.diff.DisplaySide side, int line) { com.google.gerrit.reviewdb.client.Change.Id c = revision.getParentKey(); java.lang.StringBuilder p = new java.lang.StringBuilder(com.google.gerrit.common.PageLinks.toChange(project, c)); if ((diffBase != null) && ((diffBase.asString()) != null)) { p.append(diffBase.asString()).append(""..""); } p.append(revision.getId()).append(""/"").append(com.google.gwtorm.client.KeyUtil.encode(fileName)); if (((type != null) && (!(type.isEmpty()))) && ((!(""sidebyside"".equals(type))) || (com.google.gerrit.client.Dispatcher.preferUnified()))) { p.append("","").append(type); } if ((side == (com.google.gerrit.client.diff.DisplaySide.A)) && (line > 0)) { p.append(""@a"").append(line); } else if (line > 0) { p.append(""@"").append(line); } return p.toString(); }",661a9dc6eb15636d8961e603b5de6120c3deedd3,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_api_ChangeGlue.java,"public static void onAction(com.google.gerrit.client.info.ChangeInfo change, com.google.gerrit.client.info.ActionInfo action, com.google.gerrit.client.actions.ActionButton button) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.change(change.legacyId().get()).view(action.id()); com.google.gwt.core.client.JavaScriptObject f = com.google.gerrit.client.api.ChangeGlue.get(action.id()); if (f != null) { com.google.gerrit.client.api.ActionContext c = com.google.gerrit.client.api.ActionContext.create(api); c.set(action); c.set(change); c.button(button); com.google.gerrit.client.api.ApiGlue.invoke(f, c); } else { com.google.gerrit.client.api.DefaultActions.invoke(change, action, api); } }",33fad75611cc79af59bb726c4700883d8ab394ce,"public static void onAction(com.google.gerrit.client.info.ChangeInfo change, com.google.gerrit.client.info.ActionInfo action, com.google.gerrit.client.actions.ActionButton button) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.change(change.legacyId().get(), change.project()).view(action.id()); com.google.gwt.core.client.JavaScriptObject f = com.google.gerrit.client.api.ChangeGlue.get(action.id()); if (f != null) { com.google.gerrit.client.api.ActionContext c = com.google.gerrit.client.api.ActionContext.create(api); c.set(action); c.set(change); c.button(button); com.google.gerrit.client.api.ApiGlue.invoke(f, c); } else { com.google.gerrit.client.api.DefaultActions.invoke(change, action, api); } }",d2cbae62a487abe44a8fd99ff3251eb3410fb609,"public static void onAction(com.google.gerrit.client.info.ChangeInfo change, com.google.gerrit.client.info.ActionInfo action, com.google.gerrit.client.actions.ActionButton button) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.change(change.project(), change.legacyId().get()).view(action.id()); com.google.gwt.core.client.JavaScriptObject f = com.google.gerrit.client.api.ChangeGlue.get(action.id()); if (f != null) { com.google.gerrit.client.api.ActionContext c = com.google.gerrit.client.api.ActionContext.create(api); c.set(action); c.set(change); c.button(button); com.google.gerrit.client.api.ApiGlue.invoke(f, c); } else { com.google.gerrit.client.api.DefaultActions.invoke(change, action, api); } }",45c6180edf25ddeb880fd750c6e091155b179961,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_IncludedInBox.java,"@java.lang.Override protected void onLoad() { if (!(loaded)) { com.google.gerrit.client.changes.ChangeApi.includedIn(changeId.get(), new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.IncludedInInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo.IncludedInInfo r) { branches.setInnerSafeHtml(formatList(r.branches())); tags.setInnerSafeHtml(formatList(r.tags())); for (java.lang.String n : r.externalNames()) { com.google.gwt.core.client.JsArrayString external = r.external(n); if ((external.length()) > 0) { appendRow(n, external); } } loaded = true; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }",0fd0a49ee9823e71fa65641760af48d4bcdf5588,"@java.lang.Override protected void onLoad() { if (!(loaded)) { com.google.gerrit.client.changes.ChangeApi.includedIn(changeId.get(), ((project) == null ? null : project.get()), new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.IncludedInInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo.IncludedInInfo r) { branches.setInnerSafeHtml(formatList(r.branches())); tags.setInnerSafeHtml(formatList(r.tags())); for (java.lang.String n : r.externalNames()) { com.google.gwt.core.client.JsArrayString external = r.external(n); if ((external.length()) > 0) { appendRow(n, external); } } loaded = true; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }",57bb70d4486ef15b0cac0b6cec81f71c58e80af5,"@java.lang.Override protected void onLoad() { if (!(loaded)) { com.google.gerrit.client.changes.ChangeApi.includedIn(project.get(), changeId.get(), new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo.IncludedInInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo.IncludedInInfo r) { branches.setInnerSafeHtml(formatList(r.branches())); tags.setInnerSafeHtml(formatList(r.tags())); for (java.lang.String n : r.externalNames()) { com.google.gwt.core.client.JsArrayString external = r.external(n); if ((external.length()) > 0) { appendRow(n, external); } } loaded = true; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }",e14a89248b7c306a1b62e363c057142b707d89cd,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,"private void renderLinksToDiff() { com.google.gerrit.client.ui.InlineHyperlink sbs = new com.google.gerrit.client.ui.InlineHyperlink(); sbs.setHTML(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.sideBySideDiff())); sbs.setTargetHistoryToken(com.google.gerrit.client.Dispatcher.toPatch(""sidebyside"", null, new com.google.gerrit.reviewdb.client.Patch.Key(revision, path))); sbs.setTitle(PatchUtil.C.sideBySideDiff()); linkPanel.add(sbs); com.google.gerrit.client.ui.InlineHyperlink unified = new com.google.gerrit.client.ui.InlineHyperlink(); unified.setHTML(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.unifiedDiff())); unified.setTargetHistoryToken(com.google.gerrit.client.Dispatcher.toPatch(""unified"", null, new com.google.gerrit.reviewdb.client.Patch.Key(revision, path))); unified.setTitle(PatchUtil.C.unifiedDiff()); linkPanel.add(unified); }",3a3492b6c649f229da37c23830d9a60e756d282d,"private void renderLinksToDiff() { com.google.gerrit.client.ui.InlineHyperlink sbs = new com.google.gerrit.client.ui.InlineHyperlink(); sbs.setHTML(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.sideBySideDiff())); sbs.setTargetHistoryToken(com.google.gerrit.client.Dispatcher.toPatch(""sidebyside"", null, new com.google.gerrit.reviewdb.client.Patch.Key(revision, path), projectKey)); sbs.setTitle(PatchUtil.C.sideBySideDiff()); linkPanel.add(sbs); com.google.gerrit.client.ui.InlineHyperlink unified = new com.google.gerrit.client.ui.InlineHyperlink(); unified.setHTML(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.unifiedDiff())); unified.setTargetHistoryToken(com.google.gerrit.client.Dispatcher.toPatch(""unified"", null, new com.google.gerrit.reviewdb.client.Patch.Key(revision, path), projectKey)); unified.setTitle(PatchUtil.C.unifiedDiff()); linkPanel.add(unified); }",317877077894a7897578b7aa2f22b680c428b847,"private void renderLinksToDiff() { com.google.gerrit.client.ui.InlineHyperlink sbs = new com.google.gerrit.client.ui.InlineHyperlink(); sbs.setHTML(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.sideBySideDiff())); sbs.setTargetHistoryToken(com.google.gerrit.client.Dispatcher.toPatch(projectKey, ""sidebyside"", null, new com.google.gerrit.reviewdb.client.Patch.Key(revision, path))); sbs.setTitle(PatchUtil.C.sideBySideDiff()); linkPanel.add(sbs); com.google.gerrit.client.ui.InlineHyperlink unified = new com.google.gerrit.client.ui.InlineHyperlink(); unified.setHTML(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.unifiedDiff())); unified.setTargetHistoryToken(com.google.gerrit.client.Dispatcher.toPatch(projectKey, ""unified"", null, new com.google.gerrit.reviewdb.client.Patch.Key(revision, path))); unified.setTitle(PatchUtil.C.unifiedDiff()); linkPanel.add(unified); }",98015bfd5544f35b95eeeaf7c05548b1eed65499,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Actions.java,"@com.google.gwt.uibinder.client.UiHandler(""abandon"") void onAbandon(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if ((abandonAction) == null) { abandonAction = new com.google.gerrit.client.change.AbandonAction(abandon, changeId); } abandonAction.show(); }",25c9e80994479c50d08930e181e430e4af5d7bd9,"@com.google.gwt.uibinder.client.UiHandler(""abandon"") void onAbandon(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if ((abandonAction) == null) { abandonAction = new com.google.gerrit.client.change.AbandonAction(abandon, changeId, project); } abandonAction.show(); }",dff801445c77591216930a43565735fbe753b4fe,"@com.google.gwt.uibinder.client.UiHandler(""abandon"") void onAbandon(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if ((abandonAction) == null) { abandonAction = new com.google.gerrit.client.change.AbandonAction(abandon, project, changeId); } abandonAction.show(); }",861165e8a1516dfd4da252122216ed9af7228758,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,"private java.lang.Runnable save() { return () -> { if (!(cmEdit.isClean(generation))) { close.setEnabled(false); java.lang.String text = cmEdit.getValue(); if (Patch.COMMIT_MSG.equals(path)) { java.lang.String trimmed = (text.trim()) + ""\r""; if (!(trimmed.equals(text))) { text = trimmed; cmEdit.setValue(text); } } final int g = cmEdit.changeGeneration(false); com.google.gerrit.client.changes.ChangeEditApi.put(revision.getParentKey().get(), path, text, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { generation = g; setClean(cmEdit.isClean(g)); } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { close.setEnabled(true); } }); } }; }",44f57ed7b197b8662238ad214f060160f4ac21ca,"private java.lang.Runnable save() { return () -> { if (!(cmEdit.isClean(generation))) { close.setEnabled(false); java.lang.String text = cmEdit.getValue(); if (Patch.COMMIT_MSG.equals(path)) { java.lang.String trimmed = (text.trim()) + ""\r""; if (!(trimmed.equals(text))) { text = trimmed; cmEdit.setValue(text); } } final int g = cmEdit.changeGeneration(false); com.google.gerrit.client.changes.ChangeEditApi.put(revision.getParentKey().get(), Project.NameKey.asStringOrNull(projectKey), path, text, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { generation = g; setClean(cmEdit.isClean(g)); } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { close.setEnabled(true); } }); } }; }",e6f380c0c913468674f437020c67c79a9bfd974f,"private java.lang.Runnable save() { return () -> { if (!(cmEdit.isClean(generation))) { close.setEnabled(false); java.lang.String text = cmEdit.getValue(); if (Patch.COMMIT_MSG.equals(path)) { java.lang.String trimmed = (text.trim()) + ""\r""; if (!(trimmed.equals(text))) { text = trimmed; cmEdit.setValue(text); } } final int g = cmEdit.changeGeneration(false); com.google.gerrit.client.changes.ChangeEditApi.put(Project.NameKey.asStringOrNull(projectKey), revision.getParentKey().get(), path, text, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { generation = g; setClean(cmEdit.isClean(g)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { close.setEnabled(true); } }); } }; }",a8eb27bab11ac19893e377f18fa7a17cc6380a46,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,"@java.lang.Override public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.diff.SideBySide(base, com.google.gerrit.client.DiffObject.patchSet(id.getParentKey()), id.get(), side, line)); }",f0d0da3bcc366be646994dc684263622e1348f86,"@java.lang.Override public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.diff.SideBySide(base, com.google.gerrit.client.DiffObject.patchSet(id.getParentKey()), project, id.get(), side, line)); }",74488352ed9afe61ee6dae1d24738171ab3989aa,"@java.lang.Override public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.diff.SideBySide(project, base, com.google.gerrit.client.DiffObject.patchSet(id.getParentKey()), id.get(), side, line)); }",dd1c0eb0fcbda0158d9e72e63d5b4bc656684dc3,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeActions.java,"static void delete(com.google.gerrit.reviewdb.client.Change.Id id, com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.changes.ChangeApi.deleteChange(id.get(), com.google.gerrit.client.change.ChangeActions.mine(draftButtons)); }",37bbd7a5e56edaff4ddbe9ac6b8b6038112dc75a,"static void delete(com.google.gerrit.reviewdb.client.Change.Id id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.changes.ChangeApi.deleteChange(id.get(), Project.NameKey.asStringOrNull(project), com.google.gerrit.client.change.ChangeActions.mine(draftButtons)); }",2a514e5743bb5fb32f999b4060fe047523784465,"static void delete(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id id, com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.changes.ChangeApi.deleteChange(project.get(), id.get(), com.google.gerrit.client.change.ChangeActions.mine(draftButtons)); }",4981bb08b522e983d2dc1ef95d294ca447ecbb99,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); },b6a5a671607abf3e0d24a61f26d123d45fba0b0b,"@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, project)); }",6239d8e70884d6b81d1a3f2f5001193fac05e7a5,"@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, changeId)); }",e8be4981d12b1161a10fba45d3c5787a6492fb15,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Actions.java,"@com.google.gwt.uibinder.client.UiHandler(""followUp"") void onFollowUp(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if ((followUpAction) == null) { followUpAction = new com.google.gerrit.client.change.FollowUpAction(followUp, project, branch, topic, key); } followUpAction.show(); }",af960a77fa4085c468a88ff43dc764205c5ed13d,"@com.google.gwt.uibinder.client.UiHandler(""followUp"") void onFollowUp(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if ((followUpAction) == null) { followUpAction = new com.google.gerrit.client.change.FollowUpAction(followUp, Project.NameKey.asStringOrNull(project), branch, topic, key); } followUpAction.show(); }",5f8f191e4f7138df295d222ab4f867d764eb3e3a,"@com.google.gwt.uibinder.client.UiHandler(""followUp"") void onFollowUp(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if ((followUpAction) == null) { followUpAction = new com.google.gerrit.client.change.FollowUpAction(followUp, project.get(), branch, topic, key); } followUpAction.show(); }",45ad3805f77b8a449ba45e5216f02f78999eed43,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,"@com.google.gwt.uibinder.client.UiHandler(""showBase"") void onShowBase(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> e) { boolean shouldShow = e.getValue(); if (shouldShow) { if ((baseContent) == null) { com.google.gerrit.client.changes.ChangeEditApi.get(revision, path, true, new com.google.gerrit.client.rpc.HttpCallback<com.google.gerrit.client.rpc.NativeString>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.HttpResponse<com.google.gerrit.client.rpc.NativeString> fc) { baseContent = fc; displayBase(); } @java.lang.Override public void onFailure(java.lang.Throwable e) { } }); } else { displayBase(); } } else { cmBase.getWrapperElement().getParentElement().addClassName(style.hideBase()); cmEdit.getWrapperElement().getParentElement().addClassName(style.fullWidth()); mv.getGapElement().addClassName(style.hideBase()); } mv.setShowDifferences(shouldShow); }",ee94e56a63412e2cd93c4d2788cc4b52274a8238,"@com.google.gwt.uibinder.client.UiHandler(""showBase"") void onShowBase(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> e) { boolean shouldShow = e.getValue(); if (shouldShow) { if ((baseContent) == null) { com.google.gerrit.client.changes.ChangeEditApi.get(revision, projectKey, path, true, new com.google.gerrit.client.rpc.HttpCallback<com.google.gerrit.client.rpc.NativeString>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.HttpResponse<com.google.gerrit.client.rpc.NativeString> fc) { baseContent = fc; displayBase(); } @java.lang.Override public void onFailure(java.lang.Throwable e) { } }); } else { displayBase(); } } else { cmBase.getWrapperElement().getParentElement().addClassName(style.hideBase()); cmEdit.getWrapperElement().getParentElement().addClassName(style.fullWidth()); mv.getGapElement().addClassName(style.hideBase()); } mv.setShowDifferences(shouldShow); }",cc39e98e43f21ff16c099959665b5c8737153cfb,"@com.google.gwt.uibinder.client.UiHandler(""showBase"") void onShowBase(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> e) { boolean shouldShow = e.getValue(); if (shouldShow) { if ((baseContent) == null) { com.google.gerrit.client.changes.ChangeEditApi.get(projectKey, revision, path, true, new com.google.gerrit.client.rpc.HttpCallback<com.google.gerrit.client.rpc.NativeString>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.HttpResponse<com.google.gerrit.client.rpc.NativeString> fc) { baseContent = fc; displayBase(); } @java.lang.Override public void onFailure(java.lang.Throwable e) { } }); } else { displayBase(); } } else { cmBase.getWrapperElement().getParentElement().addClassName(style.hideBase()); cmEdit.getWrapperElement().getParentElement().addClassName(style.fullWidth()); mv.getGapElement().addClassName(style.hideBase()); } mv.setShowDifferences(shouldShow); }",0521a458153e72a80aa88cc646d03b582060c667,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void publishEdit(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.change(id).view(""edit:publish"").post(in, cb); }",f15c4a18edd59f7ab70c2884cdff96a8e883c8f9,"public static void publishEdit(int id, @com.google.gerrit.common.Nullable java.lang.String project, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.change(id, project).view(""edit:publish"").post(in, cb); }",44c06393abdb5f93c37154d5dd18bb0e168ec61b,"public static void publishEdit(@com.google.gerrit.common.Nullable java.lang.String project, int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.change(project, id).view(""edit:publish"").post(in, cb); }",f4a27226d825da640c09ae542bcae8f7c1911b1c,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static com.google.gerrit.client.rpc.RestApi edit(int id) { return com.google.gerrit.client.changes.ChangeApi.change(id).view(""edit""); }",6d5911ba8dfa925239e329b5f46a5b598bf010ff,"public static com.google.gerrit.client.rpc.RestApi edit(int id, @com.google.gerrit.common.Nullable java.lang.String project) { return com.google.gerrit.client.changes.ChangeApi.change(id, project).view(""edit""); }",5a28bbce270a0bfc4962e4aa09869bf331f8bd31,"public static com.google.gerrit.client.rpc.RestApi edit(@com.google.gerrit.common.Nullable java.lang.String project, int id) { return com.google.gerrit.client.changes.ChangeApi.change(project, id).view(""edit""); }",f03c8dd76705dacea8aeff16dc0a905011757778,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DiffApi.java,"public static void list(com.google.gerrit.reviewdb.client.PatchSet.Id id, com.google.gerrit.reviewdb.client.PatchSet.Id base, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>> cb) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(id).view(""files""); if (base != null) { if ((base.get()) < 0) { api.addParameter(""parent"", (-(base.get()))); } else { api.addParameter(""base"", base.get()); } } api.get(com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren(""path"", cb)); }",753309cc8547bfd43b22836292aa8cbf28ef4a60,"public static void list(com.google.gerrit.reviewdb.client.PatchSet.Id id, com.google.gerrit.reviewdb.client.PatchSet.Id base, java.lang.String project, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>> cb) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(id, project).view(""files""); if (base != null) { if ((base.get()) < 0) { api.addParameter(""parent"", (-(base.get()))); } else { api.addParameter(""base"", base.get()); } } api.get(com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren(""path"", cb)); }",25797424395e9108375781f23ba548cc83531a9e,"public static void list(@com.google.gerrit.common.Nullable java.lang.String project, com.google.gerrit.reviewdb.client.PatchSet.Id id, com.google.gerrit.reviewdb.client.PatchSet.Id base, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>> cb) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(project, id).view(""files""); if (base != null) { if ((base.get()) < 0) { api.addParameter(""parent"", (-(base.get()))); } else { api.addParameter(""base"", base.get()); } } api.get(com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren(""path"", cb)); }",73017880ba72a0f863fbba4b866871b6161a4db9,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_CreateChangeAction.java,"@java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.createChange(project, getDestinationBranch(), getDestinationTopic(), message.getText(), null, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); }",005fb8893d8e07ac7cc6d04449111e3d27dbd73e,"@java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.createChange(project, getDestinationBranch(), getDestinationTopic(), message.getText(), null, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId(), result.projectNameKey())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); }",f05807cd6aa2ba53305aa70bef7e85fce02229f3,"@java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.createChange(project, getDestinationBranch(), getDestinationTopic(), message.getText(), null, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.projectNameKey(), result.legacyId())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); }",52cb9e99cc2155c0617aaf1f2c39dbf32eaf16a7,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void abandon(int id, java.lang.String msg, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.MessageInput input = com.google.gerrit.client.changes.ChangeApi.MessageInput.create(); input.message(com.google.gerrit.client.changes.ChangeApi.emptyToNull(msg)); com.google.gerrit.client.changes.ChangeApi.call(id, ""abandon"").post(input, cb); }",2aace49def62f073f4afa9389170402bef93dfe1,"public static void abandon(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String msg, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.MessageInput input = com.google.gerrit.client.changes.ChangeApi.MessageInput.create(); input.message(com.google.gerrit.client.changes.ChangeApi.emptyToNull(msg)); com.google.gerrit.client.changes.ChangeApi.call(id, project, ""abandon"").post(input, cb); }",1edafb53215eadcfd470c329c51514fdcc000a40,"public static void abandon(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String msg, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.MessageInput input = com.google.gerrit.client.changes.ChangeApi.MessageInput.create(); input.message(com.google.gerrit.client.changes.ChangeApi.emptyToNull(msg)); com.google.gerrit.client.changes.ChangeApi.call(project, id, ""abandon"").post(input, cb); }",8f36de2d345d544b8fe38abb1472e3445bbe0802,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"void loadRevisionInfo() { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeApi.actions(changeId.get(), revision); call.background(); call.get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.ActionInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.ActionInfo> actionMap) { actionMap.copyKeysIntoChildren(""id""); renderRevisionInfo(changeInfo, actionMap); } }); }",af631b419e4dc97fa2d778903076699ec36ea1af,"void loadRevisionInfo() { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeApi.actions(changeId.get(), Project.NameKey.asStringOrNull(project), revision); call.background(); call.get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.ActionInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.ActionInfo> actionMap) { actionMap.copyKeysIntoChildren(""id""); renderRevisionInfo(changeInfo, actionMap); } }); }",f13eee1e21c3da4cdf6a3770dda2f6ec0bc1d171,"void loadRevisionInfo() { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeApi.actions(getProject().get(), changeId.get(), revision); call.background(); call.get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.ActionInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.ActionInfo> actionMap) { actionMap.copyKeysIntoChildren(""id""); renderRevisionInfo(changeInfo, actionMap); } }); }",9998a65a621c5966ddf87609ebf56fe337adecbf,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"private void initEditMode(com.google.gerrit.client.info.ChangeInfo info, java.lang.String revision) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); if (info.status().isOpen()) { if (isEditModeEnabled(info, rev)) { editMode.setVisible(((fileTableMode) == (FileTable.Mode.REVIEW))); addFile.setVisible((!(editMode.isVisible()))); deleteFile.setVisible((!(editMode.isVisible()))); renameFile.setVisible((!(editMode.isVisible()))); reviewMode.setVisible((!(editMode.isVisible()))); addFileAction = new com.google.gerrit.client.change.AddFileAction(changeId, info.revision(revision), style, addFile, files); deleteFileAction = new com.google.gerrit.client.change.DeleteFileAction(changeId, info.revision(revision), style, addFile); renameFileAction = new com.google.gerrit.client.change.RenameFileAction(changeId, info.revision(revision), style, addFile); } else { editMode.setVisible(false); addFile.setVisible(false); reviewMode.setVisible(false); } if (rev.isEdit()) { if (info.hasEditBasedOnCurrentPatchSet()) { publishEdit.setVisible(true); } else { rebaseEdit.setVisible(true); } deleteEdit.setVisible(true); } } else if (rev.isEdit()) { deleteEdit.setStyleName(style.highlight()); deleteEdit.setVisible(true); } } }",ba015ed155fe773669ef566b2af756f4dfad1cc9,"private void initEditMode(com.google.gerrit.client.info.ChangeInfo info, java.lang.String revision) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); if (info.status().isOpen()) { if (isEditModeEnabled(info, rev)) { editMode.setVisible(((fileTableMode) == (FileTable.Mode.REVIEW))); addFile.setVisible((!(editMode.isVisible()))); deleteFile.setVisible((!(editMode.isVisible()))); renameFile.setVisible((!(editMode.isVisible()))); reviewMode.setVisible((!(editMode.isVisible()))); addFileAction = new com.google.gerrit.client.change.AddFileAction(changeId, project, info.revision(revision), style, addFile, files); deleteFileAction = new com.google.gerrit.client.change.DeleteFileAction(changeId, project, info.revision(revision), style, addFile); renameFileAction = new com.google.gerrit.client.change.RenameFileAction(changeId, project, info.revision(revision), style, addFile); } else { editMode.setVisible(false); addFile.setVisible(false); reviewMode.setVisible(false); } if (rev.isEdit()) { if (info.hasEditBasedOnCurrentPatchSet()) { publishEdit.setVisible(true); } else { rebaseEdit.setVisible(true); } deleteEdit.setVisible(true); } } else if (rev.isEdit()) { deleteEdit.setStyleName(style.highlight()); deleteEdit.setVisible(true); } } }",f2bbdcb415b016125758441a7da058c2a5a288d6,"private void initEditMode(com.google.gerrit.client.info.ChangeInfo info, java.lang.String revision) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); if (info.status().isOpen()) { if (isEditModeEnabled(info, rev)) { editMode.setVisible(((fileTableMode) == (FileTable.Mode.REVIEW))); addFile.setVisible((!(editMode.isVisible()))); deleteFile.setVisible((!(editMode.isVisible()))); renameFile.setVisible((!(editMode.isVisible()))); reviewMode.setVisible((!(editMode.isVisible()))); addFileAction = new com.google.gerrit.client.change.AddFileAction(info.projectNameKey(), changeId, info.revision(revision), style, addFile, files); deleteFileAction = new com.google.gerrit.client.change.DeleteFileAction(info.projectNameKey(), changeId, info.revision(revision), style, addFile); renameFileAction = new com.google.gerrit.client.change.RenameFileAction(info.projectNameKey(), changeId, info.revision(revision), style, addFile); } else { editMode.setVisible(false); addFile.setVisible(false); reviewMode.setVisible(false); } if (rev.isEdit()) { if (info.hasEditBasedOnCurrentPatchSet()) { publishEdit.setVisible(true); } else { rebaseEdit.setVisible(true); } deleteEdit.setVisible(true); } } else if (rev.isEdit()) { deleteEdit.setStyleName(style.highlight()); deleteEdit.setVisible(true); } } }",d865854d1c6ddc10e1f3d66b9b55318ea2c0509a,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static com.google.gerrit.client.rpc.RestApi revision(com.google.gerrit.reviewdb.client.PatchSet.Id id) { int cn = id.getParentKey().get(); java.lang.String revision = com.google.gerrit.client.changes.RevisionInfoCache.get(id); if (revision != null) { return ChangeApi.revision(cn, revision); } return ChangeApi.change(cn).view(""revisions"").id(id.get()); }",b2ae2448f4f93602fcf54d96d019c4030dbbec75,"public static com.google.gerrit.client.rpc.RestApi revision(com.google.gerrit.reviewdb.client.PatchSet.Id id, @com.google.gerrit.common.Nullable java.lang.String project) { int cn = id.getParentKey().get(); java.lang.String revision = com.google.gerrit.client.changes.RevisionInfoCache.get(id); if (revision != null) { return ChangeApi.revision(cn, project, revision); } return ChangeApi.change(cn, project).view(""revisions"").id(id.get()); }",1117f915b82f2a2a457c400ac9022b4156bfd18c,"public static com.google.gerrit.client.rpc.RestApi revision(@com.google.gerrit.common.Nullable java.lang.String project, com.google.gerrit.reviewdb.client.PatchSet.Id id) { int cn = id.getParentKey().get(); java.lang.String revision = com.google.gerrit.client.changes.RevisionInfoCache.get(id); if (revision != null) { return ChangeApi.revision(project, cn, revision); } return ChangeApi.change(project, cn).view(""revisions"").id(id.get()); }",827db4b693442b582d0ded0230bd6c11949a26d6,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Reviewers.java,void set(com.google.gerrit.client.info.ChangeInfo info) { this.changeId = info.legacyId(); display(info); reviewerSuggestOracle.setChange(changeId); addReviewerIcon.setVisible(com.google.gerrit.client.Gerrit.isSignedIn()); },c5a7edb2eb4d8a1ac60a2c0af9d1317e178e3266,"void set(com.google.gerrit.client.info.ChangeInfo info) { this.changeId = info.legacyId(); this.project = info.projectNameKey(); display(info); reviewerSuggestOracle.setChange(changeId, project); addReviewerIcon.setVisible(com.google.gerrit.client.Gerrit.isSignedIn()); }",8c3306ff68084122ef89ff1dcf5899b56e59988d,"void set(com.google.gerrit.client.info.ChangeInfo info) { this.changeId = info.legacyId(); this.project = info.projectNameKey(); display(info); reviewerSuggestOracle.setChange(project, changeId); addReviewerIcon.setVisible(com.google.gerrit.client.Gerrit.isSignedIn()); }",00e97e200fa3c41d88c7ef0233c0a71ee2523c89,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Actions.java,"@com.google.gwt.uibinder.client.UiHandler(""restore"") void onRestore(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if ((restoreAction) == null) { restoreAction = new com.google.gerrit.client.change.RestoreAction(restore, changeId); } restoreAction.show(); }",a3f4cfe6d27f48277094f58ca3fb464c1cda4ac4,"@com.google.gwt.uibinder.client.UiHandler(""restore"") void onRestore(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if ((restoreAction) == null) { restoreAction = new com.google.gerrit.client.change.RestoreAction(restore, changeId, project); } restoreAction.show(); }",65efa375b09d66a1d80fb3ba26df37ed78448502,"@com.google.gwt.uibinder.client.UiHandler(""restore"") void onRestore(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if ((restoreAction) == null) { restoreAction = new com.google.gerrit.client.change.RestoreAction(restore, project, changeId); } restoreAction.show(); }",b806eee28eab2159ed3b036f16c6d0afde17f248,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static com.google.gerrit.client.rpc.RestApi change(int id) { return new com.google.gerrit.client.rpc.RestApi(""/changes/"").id(java.lang.String.valueOf(id)); }",7e6a831947498c3ebb30c8d720b919c127f87b62,"public static com.google.gerrit.client.rpc.RestApi change(int id, @com.google.gerrit.common.Nullable java.lang.String project) { if (project == null) { return new com.google.gerrit.client.rpc.RestApi(""/changes/"").id(java.lang.String.valueOf(id)); } else { return new com.google.gerrit.client.rpc.RestApi(""/changes/"").id(id, project); } }",2f191599ac994692a431cf7214d98e67cb11f6d4,"public static com.google.gerrit.client.rpc.RestApi change(@com.google.gerrit.common.Nullable java.lang.String project, int id) { if (project == null) { return new com.google.gerrit.client.rpc.RestApi(""/changes/"").id(java.lang.String.valueOf(id)); } else { return new com.google.gerrit.client.rpc.RestApi(""/changes/"").id(project, id); } }",f3d2a5bc3497f49d33cedc8c986ccb931bbed019,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,"private static void patch(java.lang.String token, com.google.gerrit.client.DiffObject base, com.google.gerrit.reviewdb.client.Patch.Key id, com.google.gerrit.client.diff.DisplaySide side, int line, java.lang.String panelType) { java.lang.String panel = panelType; if (panel == null) { int c = token.lastIndexOf(','); panel = (0 <= c) ? token.substring((c + 1)) : """"; } if (("""".equals(panel)) || (""cm"".equals(panel))) { if (com.google.gerrit.client.Dispatcher.preferUnified()) { com.google.gerrit.client.Dispatcher.unified(token, base, id, side, line); } else { com.google.gerrit.client.Dispatcher.codemirror(token, base, id, side, line); } } else if (""sidebyside"".equals(panel)) { com.google.gerrit.client.Dispatcher.codemirror(token, base, id, side, line); } else if (""unified"".equals(panel)) { com.google.gerrit.client.Dispatcher.unified(token, base, id, side, line); } else if (""edit"".equals(panel)) { if ((!(com.google.gerrit.reviewdb.client.Patch.isMagic(id.get()))) || (Patch.COMMIT_MSG.equals(id.get()))) { com.google.gerrit.client.Dispatcher.codemirrorForEdit(token, id, line); } else { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } } else { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } }",0a7fef654c7f6403b931d739df34619e9c53128a,"private static void patch(java.lang.String token, com.google.gerrit.client.DiffObject base, com.google.gerrit.reviewdb.client.Patch.Key id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.client.diff.DisplaySide side, int line, java.lang.String panelType) { java.lang.String panel = panelType; if (panel == null) { int c = token.lastIndexOf(','); panel = (0 <= c) ? token.substring((c + 1)) : """"; } if (("""".equals(panel)) || (""cm"".equals(panel))) { if (com.google.gerrit.client.Dispatcher.preferUnified()) { com.google.gerrit.client.Dispatcher.unified(token, base, id, project, side, line); } else { com.google.gerrit.client.Dispatcher.codemirror(token, base, id, project, side, line); } } else if (""sidebyside"".equals(panel)) { com.google.gerrit.client.Dispatcher.codemirror(token, base, id, project, side, line); } else if (""unified"".equals(panel)) { com.google.gerrit.client.Dispatcher.unified(token, base, id, project, side, line); } else if (""edit"".equals(panel)) { if ((!(com.google.gerrit.reviewdb.client.Patch.isMagic(id.get()))) || (Patch.COMMIT_MSG.equals(id.get()))) { com.google.gerrit.client.Dispatcher.codemirrorForEdit(token, id, project, line); } else { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } } else { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } }",988aa6f9e89753c7f5fc67232bd661fd0ba00825,"private static void patch(java.lang.String token, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.client.DiffObject base, com.google.gerrit.reviewdb.client.Patch.Key id, com.google.gerrit.client.diff.DisplaySide side, int line, java.lang.String panelType) { java.lang.String panel = panelType; if (panel == null) { int c = token.lastIndexOf(','); panel = (0 <= c) ? token.substring((c + 1)) : """"; } if (("""".equals(panel)) || (""cm"".equals(panel))) { if (com.google.gerrit.client.Dispatcher.preferUnified()) { com.google.gerrit.client.Dispatcher.unified(token, project, base, id, side, line); } else { com.google.gerrit.client.Dispatcher.codemirror(token, base, project, id, side, line); } } else if (""sidebyside"".equals(panel)) { com.google.gerrit.client.Dispatcher.codemirror(token, base, project, id, side, line); } else if (""unified"".equals(panel)) { com.google.gerrit.client.Dispatcher.unified(token, project, base, id, side, line); } else if (""edit"".equals(panel)) { if ((!(com.google.gerrit.reviewdb.client.Patch.isMagic(id.get()))) || (Patch.COMMIT_MSG.equals(id.get()))) { com.google.gerrit.client.Dispatcher.codemirrorForEdit(token, project, id, line); } else { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } } else { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } }",5edb2ee57993a137d2e5a5398c7a41ee8d67b9ab,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,"private static void unified(final java.lang.String token, final com.google.gerrit.client.DiffObject base, final com.google.gerrit.reviewdb.client.Patch.Key id, final com.google.gerrit.client.diff.DisplaySide side, final int line) { com.google.gwt.core.client.GWT.runAsync(new com.google.gerrit.client.Dispatcher.AsyncSplit(token) { @java.lang.Override public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.diff.Unified(base, com.google.gerrit.client.DiffObject.patchSet(id.getParentKey()), id.get(), side, line)); } }); }",5d25c7d7266fa927bafb6f36121517b19ccf3c5c,"private static void unified(final java.lang.String token, final com.google.gerrit.client.DiffObject base, final com.google.gerrit.reviewdb.client.Patch.Key id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gerrit.client.diff.DisplaySide side, final int line) { com.google.gwt.core.client.GWT.runAsync(new com.google.gerrit.client.Dispatcher.AsyncSplit(token) { @java.lang.Override public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.diff.Unified(base, com.google.gerrit.client.DiffObject.patchSet(id.getParentKey()), project, id.get(), side, line)); } }); }",2f580b809b12254162d98bcec6dff7c916bf48b6,"private static void unified(final java.lang.String token, final com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gerrit.client.DiffObject base, final com.google.gerrit.reviewdb.client.Patch.Key id, final com.google.gerrit.client.diff.DisplaySide side, final int line) { com.google.gwt.core.client.GWT.runAsync(new com.google.gerrit.client.Dispatcher.AsyncSplit(token) { @java.lang.Override public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.diff.Unified(project, base, com.google.gerrit.client.DiffObject.patchSet(id.getParentKey()), id.get(), side, line)); } }); }",b1a70a39cf0107e795364d2a4063e397d123ec8d,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"private java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> loadComments(final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev, com.google.gerrit.client.rpc.CallbackGroup group) { final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> r = new java.util.ArrayList<>(1); com.google.gerrit.client.changes.ChangeApi.comments(changeId.get()).get(group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>> result) { r.add(com.google.gerrit.client.change.ChangeScreen.filterForRevision(result, rev._number())); history.addComments(result); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); return r; }",0619a7fda6995f46cc60b304cd6c8ee7e01bba08,"private java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> loadComments(final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev, com.google.gerrit.client.rpc.CallbackGroup group) { final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> r = new java.util.ArrayList<>(1); com.google.gerrit.client.changes.ChangeApi.comments(changeId.get(), Project.NameKey.asStringOrNull(project)).get(group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>> result) { r.add(com.google.gerrit.client.change.ChangeScreen.filterForRevision(result, rev._number())); history.addComments(result); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); return r; }",856a45ab8301cc950ca67a974e2d1263cf5bcbc7,"private java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> loadComments(final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev, com.google.gerrit.client.rpc.CallbackGroup group) { final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> r = new java.util.ArrayList<>(1); com.google.gerrit.client.changes.ChangeApi.comments(getProject().get(), changeId.get()).get(group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>> result) { r.add(com.google.gerrit.client.change.ChangeScreen.filterForRevision(result, rev._number())); history.addComments(result); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); return r; }",1807c90ba6c8e177b586df2f3345c103022127ef,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CommentsCollections.java,"void load(com.google.gerrit.client.rpc.CallbackGroup group) { if (base.isPatchSet()) { com.google.gerrit.client.changes.CommentApi.comments(base.asPatchSetId(), group.add(publishedBase())); } com.google.gerrit.client.changes.CommentApi.comments(revision, group.add(publishedRevision())); if (com.google.gerrit.client.Gerrit.isSignedIn()) { if (base.isPatchSet()) { com.google.gerrit.client.changes.CommentApi.drafts(base.asPatchSetId(), group.add(draftsBase())); } com.google.gerrit.client.changes.CommentApi.drafts(revision, group.add(draftsRevision())); } }",c503bf8b22852766c98999f6da574c158f721386,"void load(com.google.gerrit.client.rpc.CallbackGroup group) { if (base.isPatchSet()) { com.google.gerrit.client.changes.CommentApi.comments(base.asPatchSetId(), Project.NameKey.asStringOrNull(project), group.add(publishedBase())); } com.google.gerrit.client.changes.CommentApi.comments(revision, Project.NameKey.asStringOrNull(project), group.add(publishedRevision())); if (com.google.gerrit.client.Gerrit.isSignedIn()) { if (base.isPatchSet()) { com.google.gerrit.client.changes.CommentApi.drafts(base.asPatchSetId(), Project.NameKey.asStringOrNull(project), group.add(draftsBase())); } com.google.gerrit.client.changes.CommentApi.drafts(revision, Project.NameKey.asStringOrNull(project), group.add(draftsRevision())); } }",388bbf08d0ab6e95cb4f69faf260b188bb02b5fd,"void load(com.google.gerrit.client.rpc.CallbackGroup group) { if (base.isPatchSet()) { com.google.gerrit.client.changes.CommentApi.comments(Project.NameKey.asStringOrNull(project), base.asPatchSetId(), group.add(publishedBase())); } com.google.gerrit.client.changes.CommentApi.comments(Project.NameKey.asStringOrNull(project), revision, group.add(publishedRevision())); if (com.google.gerrit.client.Gerrit.isSignedIn()) { if (base.isPatchSet()) { com.google.gerrit.client.changes.CommentApi.drafts(Project.NameKey.asStringOrNull(project), base.asPatchSetId(), group.add(draftsBase())); } com.google.gerrit.client.changes.CommentApi.drafts(Project.NameKey.asStringOrNull(project), revision, group.add(draftsRevision())); } }",6c77549bc14ce923de1a0ad5129b0896ffbbcb19,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_EditConfigAction.java,"static void call(final com.google.gwt.user.client.ui.Button b, final java.lang.String project) { b.setEnabled(false); com.google.gerrit.client.changes.ChangeApi.createChange(project, RefNames.REFS_CONFIG, null, AdminConstants.I.editConfigMessage(), null, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(new com.google.gerrit.reviewdb.client.PatchSet.Id(result.legacyId(), 1), ""project.config"")); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { b.setEnabled(true); super.onFailure(caught); } }); }",10845302bf0e7ea852631afce5ecd58460d83dc1,"static void call(final com.google.gwt.user.client.ui.Button b, final com.google.gerrit.reviewdb.client.Project.NameKey project) { b.setEnabled(false); com.google.gerrit.client.changes.ChangeApi.createChange(project.get(), RefNames.REFS_CONFIG, null, AdminConstants.I.editConfigMessage(), null, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(new com.google.gerrit.reviewdb.client.PatchSet.Id(result.legacyId(), 1), project, ""project.config"")); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { b.setEnabled(true); super.onFailure(caught); } }); }",4a57d9c3b7059be62de2daa3086b755408c6bef3,"static void call(com.google.gwt.user.client.ui.Button b, com.google.gerrit.reviewdb.client.Project.NameKey project) { b.setEnabled(false); com.google.gerrit.client.changes.ChangeApi.createChange(project.get(), RefNames.REFS_CONFIG, null, AdminConstants.I.editConfigMessage(), null, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(project, new com.google.gerrit.reviewdb.client.PatchSet.Id(result.legacyId(), 1), ""project.config"")); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { b.setEnabled(true); super.onFailure(caught); } }); }",6731cd2b96ea8847c2c320860a63c929bf784c61,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void message(int id, java.lang.String commit, java.lang.String message, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.CherryPickInput input = com.google.gerrit.client.changes.ChangeApi.CherryPickInput.create(); input.setMessage(message); com.google.gerrit.client.changes.ChangeApi.call(id, commit, ""message"").post(input, cb); }",9ebfb9efa876939f3e6bdefcd0eed9e4795a646e,"public static void message(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String commit, java.lang.String message, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.CherryPickInput input = com.google.gerrit.client.changes.ChangeApi.CherryPickInput.create(); input.setMessage(message); com.google.gerrit.client.changes.ChangeApi.call(id, project, commit, ""message"").post(input, cb); }",327da8b38ac89fc989ef1749fc49f06913ecc69c,"public static void message(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String commit, java.lang.String message, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.CherryPickInput input = com.google.gerrit.client.changes.ChangeApi.CherryPickInput.create(); input.setMessage(message); com.google.gerrit.client.changes.ChangeApi.call(project, id, commit, ""message"").post(input, cb); }",30df73b8e19acf9247751b189da9db34933ad1f3,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ReviewerSuggestOracle.java,"@java.lang.Override protected void onRequestSuggestions(final com.google.gerrit.client.change.Request req, final com.google.gerrit.client.change.Callback cb) { com.google.gerrit.client.changes.ChangeApi.suggestReviewers(changeId.get(), req.getQuery(), req.getLimit(), false).get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.change.ReviewerSuggestOracle.SuggestReviewerInfo>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.change.ReviewerSuggestOracle.SuggestReviewerInfo> result) { java.util.List<com.google.gerrit.client.change.ReviewerSuggestOracle.RestReviewerSuggestion> r = new java.util.ArrayList(result.length()); for (com.google.gerrit.client.change.ReviewerSuggestOracle.SuggestReviewerInfo reviewer : com.google.gerrit.client.rpc.Natives.asList(result)) { r.add(new com.google.gerrit.client.change.ReviewerSuggestOracle.RestReviewerSuggestion(reviewer, req.getQuery())); } cb.onSuggestionsReady(req, new com.google.gerrit.client.change.Response(r)); } @java.lang.Override public void onFailure(java.lang.Throwable err) { java.util.List<com.google.gerrit.client.change.Suggestion> r = java.util.Collections.emptyList(); cb.onSuggestionsReady(req, new com.google.gerrit.client.change.Response(r)); } }); }",f65cbc53c43a047112f150c970df0b5e8b0b8d80,"@java.lang.Override protected void onRequestSuggestions(final com.google.gerrit.client.change.Request req, final com.google.gerrit.client.change.Callback cb) { com.google.gerrit.client.changes.ChangeApi.suggestReviewers(changeId.get(), ((project) == null ? null : project.get()), req.getQuery(), req.getLimit(), false).get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.change.ReviewerSuggestOracle.SuggestReviewerInfo>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.change.ReviewerSuggestOracle.SuggestReviewerInfo> result) { java.util.List<com.google.gerrit.client.change.ReviewerSuggestOracle.RestReviewerSuggestion> r = new java.util.ArrayList(result.length()); for (com.google.gerrit.client.change.ReviewerSuggestOracle.SuggestReviewerInfo reviewer : com.google.gerrit.client.rpc.Natives.asList(result)) { r.add(new com.google.gerrit.client.change.ReviewerSuggestOracle.RestReviewerSuggestion(reviewer, req.getQuery())); } cb.onSuggestionsReady(req, new com.google.gerrit.client.change.Response(r)); } @java.lang.Override public void onFailure(java.lang.Throwable err) { java.util.List<com.google.gerrit.client.change.Suggestion> r = java.util.Collections.emptyList(); cb.onSuggestionsReady(req, new com.google.gerrit.client.change.Response(r)); } }); }",1c33bb3d27b58157eda9486c833c4911a85cdc63,"@java.lang.Override protected void onRequestSuggestions(com.google.gerrit.client.change.Request req, com.google.gerrit.client.change.Callback cb) { com.google.gerrit.client.changes.ChangeApi.suggestReviewers(project.get(), changeId.get(), req.getQuery(), req.getLimit(), false).get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.change.ReviewerSuggestOracle.SuggestReviewerInfo>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.change.ReviewerSuggestOracle.SuggestReviewerInfo> result) { java.util.List<com.google.gerrit.client.change.ReviewerSuggestOracle.RestReviewerSuggestion> r = new java.util.ArrayList(result.length()); for (com.google.gerrit.client.change.ReviewerSuggestOracle.SuggestReviewerInfo reviewer : com.google.gerrit.client.rpc.Natives.asList(result)) { r.add(new com.google.gerrit.client.change.ReviewerSuggestOracle.RestReviewerSuggestion(reviewer, req.getQuery())); } cb.onSuggestionsReady(req, new com.google.gerrit.client.change.Response(r)); } @java.lang.Override public void onFailure(java.lang.Throwable err) { java.util.List<com.google.gerrit.client.change.Suggestion> r = java.util.Collections.emptyList(); cb.onSuggestionsReady(req, new com.google.gerrit.client.change.Response(r)); } }); }",f3f4078bf428b9137ae87d21837cbe7b79bc6159,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_EditConfigAction.java,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(new com.google.gerrit.reviewdb.client.PatchSet.Id(result.legacyId(), 1), ""project.config"")); }",47337125b902caa507906905d694aaeaffed6a7e,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(new com.google.gerrit.reviewdb.client.PatchSet.Id(result.legacyId(), 1), project, ""project.config"")); }",df4693a2f021258cfdaf7412ea722fd9966bcd91,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(project, new com.google.gerrit.reviewdb.client.PatchSet.Id(result.legacyId(), 1), ""project.config"")); }",c00502490d894440042d37f739080cd365950612,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void topic(int id, java.lang.String topic, com.google.gwt.user.client.rpc.AsyncCallback<java.lang.String> cb) { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeApi.call(id, ""topic""); topic = com.google.gerrit.client.changes.ChangeApi.emptyToNull(topic); if (topic != null) { com.google.gerrit.client.changes.ChangeApi.TopicInput input = com.google.gerrit.client.changes.ChangeApi.TopicInput.create(); input.topic(topic); call.put(input, com.google.gerrit.client.rpc.NativeString.unwrap(cb)); } else { call.delete(com.google.gerrit.client.rpc.NativeString.unwrap(cb)); } }",a2dd293e32b23e7af6b801810dae4a58432e71e5,"public static void topic(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String topic, com.google.gwt.user.client.rpc.AsyncCallback<java.lang.String> cb) { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeApi.call(id, project, ""topic""); topic = com.google.gerrit.client.changes.ChangeApi.emptyToNull(topic); if (topic != null) { com.google.gerrit.client.changes.ChangeApi.TopicInput input = com.google.gerrit.client.changes.ChangeApi.TopicInput.create(); input.topic(topic); call.put(input, com.google.gerrit.client.rpc.NativeString.unwrap(cb)); } else { call.delete(com.google.gerrit.client.rpc.NativeString.unwrap(cb)); } }",e466bdda2828295f188ea7ba57605a4ac70bf289,"public static void topic(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String topic, com.google.gwt.user.client.rpc.AsyncCallback<java.lang.String> cb) { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeApi.call(project, id, ""topic""); topic = com.google.gerrit.client.changes.ChangeApi.emptyToNull(topic); if (topic != null) { com.google.gerrit.client.changes.ChangeApi.TopicInput input = com.google.gerrit.client.changes.ChangeApi.TopicInput.create(); input.topic(topic); call.put(input, com.google.gerrit.client.rpc.NativeString.unwrap(cb)); } else { call.delete(com.google.gerrit.client.rpc.NativeString.unwrap(cb)); } }",9cec01ae881a66d1e14d91e256b083e6d2ca8b9f,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void rebase(int id, java.lang.String commit, java.lang.String base, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.RebaseInput rebaseInput = com.google.gerrit.client.changes.ChangeApi.RebaseInput.create(); rebaseInput.setBase(base); com.google.gerrit.client.changes.ChangeApi.call(id, commit, ""rebase"").post(rebaseInput, cb); }",f5915b668aa4a0b1c7d764ab2c83f3dd28da3601,"public static void rebase(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String commit, java.lang.String base, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.RebaseInput rebaseInput = com.google.gerrit.client.changes.ChangeApi.RebaseInput.create(); rebaseInput.setBase(base); com.google.gerrit.client.changes.ChangeApi.call(id, project, commit, ""rebase"").post(rebaseInput, cb); }",f806d285053fe505653e2b18073868dcab2cdba9,"public static void rebase(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String commit, java.lang.String base, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.RebaseInput rebaseInput = com.google.gerrit.client.changes.ChangeApi.RebaseInput.create(); rebaseInput.setBase(base); com.google.gerrit.client.changes.ChangeApi.call(project, id, commit, ""rebase"").post(rebaseInput, cb); }",3758be3244d3a741bc84f568887e66576bd19897,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static com.google.gerrit.client.rpc.RestApi hashtags(int changeId) { return com.google.gerrit.client.changes.ChangeApi.change(changeId).view(""hashtags""); }",7e2675f4f7dba385ac81de0834f96750bd3d56a3,"public static com.google.gerrit.client.rpc.RestApi hashtags(int changeId, @com.google.gerrit.common.Nullable java.lang.String project) { return com.google.gerrit.client.changes.ChangeApi.change(changeId, project).view(""hashtags""); }",0f0cb313b94ee80b8ecb6ee9f5ce0b8bd078ede9,"public static com.google.gerrit.client.rpc.RestApi hashtags(@com.google.gerrit.common.Nullable java.lang.String project, int changeId) { return com.google.gerrit.client.changes.ChangeApi.change(project, changeId).view(""hashtags""); }",f79e93e83630b4e7e7976ebb9ebd5b7f8744f74d,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Topic.java,"@com.google.gwt.uibinder.client.UiHandler(""save"") void onSave(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.changes.ChangeApi.topic(psId.getParentKey().get(), input.getValue().trim(), new com.google.gerrit.client.rpc.GerritCallback<java.lang.String>() { @java.lang.Override public void onSuccess(java.lang.String result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(psId)); } }); onCancel(null); }",d7b6e6bfea63f41f84e24e516c323e4f18d8d482,"@com.google.gwt.uibinder.client.UiHandler(""save"") void onSave(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.changes.ChangeApi.topic(psId.getParentKey().get(), Project.NameKey.asStringOrNull(project), input.getValue().trim(), new com.google.gerrit.client.rpc.GerritCallback<java.lang.String>() { @java.lang.Override public void onSuccess(java.lang.String result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(psId)); } }); onCancel(null); }",b77cb631f7ee61b31a9408d93b2de448f460c433,"@com.google.gwt.uibinder.client.UiHandler(""save"") void onSave(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.changes.ChangeApi.topic(project.get(), psId.getParentKey().get(), input.getValue().trim(), new com.google.gerrit.client.rpc.GerritCallback<java.lang.String>() { @java.lang.Override public void onSuccess(java.lang.String result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, psId)); } }); onCancel(null); }",bf5993768adec7e6a5afd3b585473b0facc5781c,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ReplyAction.java,"void onReply(com.google.gerrit.client.info.ChangeInfo.MessageInfo msg) { if ((popup) != null) { popup.hide(); return; } if ((replyBox) == null) { replyBox = new com.google.gerrit.client.change.ReplyBox(clp, psId, revision, allLabels, permittedLabels); allLabels = null; permittedLabels = null; } if (msg != null) { replyBox.replyTo(msg); } final com.google.gwt.user.client.ui.PopupPanel p = new com.google.gwt.user.client.ui.PopupPanel(true, false); p.setStyleName(style.replyBox()); p.addAutoHidePartner(replyButton.getElement()); p.addAutoHidePartner(quickApproveButton.getElement()); p.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { if ((popup) == p) { popup = null; if ((hasDraftComments) || (replyBox.hasMessage())) { replyButton.setStyleName(style.highlight()); } } } }); p.add(replyBox); com.google.gwt.user.client.Window.scrollTo(0, 0); replyButton.removeStyleName(style.highlight()); p.showRelativeTo(replyButton); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(p); popup = p; }",e9ea9ab6f3c4ad32ee36f42091ed15ab01673c21,"void onReply(com.google.gerrit.client.info.ChangeInfo.MessageInfo msg) { if ((popup) != null) { popup.hide(); return; } if ((replyBox) == null) { replyBox = new com.google.gerrit.client.change.ReplyBox(clp, psId, project, revision, allLabels, permittedLabels); allLabels = null; permittedLabels = null; } if (msg != null) { replyBox.replyTo(msg); } final com.google.gwt.user.client.ui.PopupPanel p = new com.google.gwt.user.client.ui.PopupPanel(true, false); p.setStyleName(style.replyBox()); p.addAutoHidePartner(replyButton.getElement()); p.addAutoHidePartner(quickApproveButton.getElement()); p.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { if ((popup) == p) { popup = null; if ((hasDraftComments) || (replyBox.hasMessage())) { replyButton.setStyleName(style.highlight()); } } } }); p.add(replyBox); com.google.gwt.user.client.Window.scrollTo(0, 0); replyButton.removeStyleName(style.highlight()); p.showRelativeTo(replyButton); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(p); popup = p; }",e4c36226a7e9b7e5bda6d36a53627e8eb045ab07,"void onReply(com.google.gerrit.client.info.ChangeInfo.MessageInfo msg) { if ((popup) != null) { popup.hide(); return; } if ((replyBox) == null) { replyBox = new com.google.gerrit.client.change.ReplyBox(clp, project, psId, revision, allLabels, permittedLabels); allLabels = null; permittedLabels = null; } if (msg != null) { replyBox.replyTo(msg); } final com.google.gwt.user.client.ui.PopupPanel p = new com.google.gwt.user.client.ui.PopupPanel(true, false); p.setStyleName(style.replyBox()); p.addAutoHidePartner(replyButton.getElement()); p.addAutoHidePartner(quickApproveButton.getElement()); p.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { if ((popup) == p) { popup = null; if ((hasDraftComments) || (replyBox.hasMessage())) { replyButton.setStyleName(style.highlight()); } } } }); p.add(replyBox); com.google.gwt.user.client.Window.scrollTo(0, 0); replyButton.removeStyleName(style.highlight()); p.showRelativeTo(replyButton); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(p); popup = p; }",2a450bf7199577745f6d3c34f2172dc652aa48ec,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_api_RevisionGlue.java,"public static void onAction(com.google.gerrit.client.info.ChangeInfo change, com.google.gerrit.client.info.ChangeInfo.RevisionInfo revision, com.google.gerrit.client.info.ActionInfo action, com.google.gerrit.client.actions.ActionButton button) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(change.legacyId().get(), revision.name()).view(action.id()); com.google.gwt.core.client.JavaScriptObject f = com.google.gerrit.client.api.RevisionGlue.get(action.id()); if (f != null) { com.google.gerrit.client.api.ActionContext c = com.google.gerrit.client.api.ActionContext.create(api); c.set(action); c.set(change); c.set(revision); c.button(button); com.google.gerrit.client.api.ApiGlue.invoke(f, c); } else { com.google.gerrit.client.api.DefaultActions.invoke(change, action, api); } }",76681fd48ad52a71e4fcf6d23b6576ab7315f76e,"public static void onAction(com.google.gerrit.client.info.ChangeInfo change, com.google.gerrit.client.info.ChangeInfo.RevisionInfo revision, com.google.gerrit.client.info.ActionInfo action, com.google.gerrit.client.actions.ActionButton button) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(change.legacyId().get(), change.project(), revision.name()).view(action.id()); com.google.gwt.core.client.JavaScriptObject f = com.google.gerrit.client.api.RevisionGlue.get(action.id()); if (f != null) { com.google.gerrit.client.api.ActionContext c = com.google.gerrit.client.api.ActionContext.create(api); c.set(action); c.set(change); c.set(revision); c.button(button); com.google.gerrit.client.api.ApiGlue.invoke(f, c); } else { com.google.gerrit.client.api.DefaultActions.invoke(change, action, api); } }",8dc939b4312ad743914c76604ea94f0c0a38cdae,"public static void onAction(com.google.gerrit.client.info.ChangeInfo change, com.google.gerrit.client.info.ChangeInfo.RevisionInfo revision, com.google.gerrit.client.info.ActionInfo action, com.google.gerrit.client.actions.ActionButton button) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(change.project(), change.legacyId().get(), revision.name()).view(action.id()); com.google.gwt.core.client.JavaScriptObject f = com.google.gerrit.client.api.RevisionGlue.get(action.id()); if (f != null) { com.google.gerrit.client.api.ActionContext c = com.google.gerrit.client.api.ActionContext.create(api); c.set(action); c.set(change); c.set(revision); c.button(button); com.google.gerrit.client.api.ApiGlue.invoke(f, c); } else { com.google.gerrit.client.api.DefaultActions.invoke(change, action, api); } }",bdabf4d733990ac09cd4c62da61c13b8532c19ae,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,"@java.lang.Override public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.diff.Unified(base, com.google.gerrit.client.DiffObject.patchSet(id.getParentKey()), id.get(), side, line)); }",e28ef2aa5624ae691709e358989fbfadd3883da7,"@java.lang.Override public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.diff.Unified(base, com.google.gerrit.client.DiffObject.patchSet(id.getParentKey()), project, id.get(), side, line)); }",e8e6034814201f49f62260edb8b06e68576261cc,"@java.lang.Override public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.diff.Unified(project, base, com.google.gerrit.client.DiffObject.patchSet(id.getParentKey()), id.get(), side, line)); }",818f24710df6402dd01bae8f30bf71778c8c3c1a,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DiffApi.java,"public static com.google.gerrit.client.diff.DiffApi diff(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String path) { return new com.google.gerrit.client.diff.DiffApi(com.google.gerrit.client.changes.ChangeApi.revision(id).view(""files"").id(path).view(""diff"")); }",b4a9c1de2d5e71827f05e2a69de550bdfae54251,"public static com.google.gerrit.client.diff.DiffApi diff(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String project, java.lang.String path) { return new com.google.gerrit.client.diff.DiffApi(com.google.gerrit.client.changes.ChangeApi.revision(id, project).view(""files"").id(path).view(""diff"")); }",cef67a7d5146c7d8a648e7a23b70817639d96e39,"public static com.google.gerrit.client.diff.DiffApi diff(@com.google.gerrit.common.Nullable java.lang.String project, com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String path) { return new com.google.gerrit.client.diff.DiffApi(com.google.gerrit.client.changes.ChangeApi.revision(project, id).view(""files"").id(path).view(""diff"")); }",10f2805570e65bfb878163c33f0dc2092f2ee11f,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static com.google.gerrit.client.rpc.RestApi detail(int id) { return com.google.gerrit.client.changes.ChangeApi.call(id, ""detail""); }",d9299f14aead7b930f0dc9c681635c9864c50f96,"public static com.google.gerrit.client.rpc.RestApi detail(int id, @com.google.gerrit.common.Nullable java.lang.String project) { return com.google.gerrit.client.changes.ChangeApi.call(id, project, ""detail""); }",0d24822c3e6e2a8cc9c5010a0e195aa4e05c5fd9,"public static com.google.gerrit.client.rpc.RestApi detail(@com.google.gerrit.common.Nullable java.lang.String project, int id) { return com.google.gerrit.client.changes.ChangeApi.call(project, id, ""detail""); }",c8346622c36a93df191497a3e15c83ba86bf5000,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static void publish(int id, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.call(id, commit, ""publish"").post(in, cb); }",4d662ed7fbf9a16007765da58a1f9284c9afd8f1,"public static void publish(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.call(id, project, commit, ""publish"").post(in, cb); }",42531f98b7f36368462530b0b4afd9dbc7b953cc,"public static void publish(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.call(project, id, commit, ""publish"").post(in, cb); }",bd2ae17a3e3d563682004760af9bc37f0921fdf7,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static com.google.gerrit.client.rpc.RestApi comments(int id) { return com.google.gerrit.client.changes.ChangeApi.call(id, ""comments""); }",ba69b4a6a5d0febf5a988121e1a41c7419037e6a,"public static com.google.gerrit.client.rpc.RestApi comments(int id, @com.google.gerrit.common.Nullable java.lang.String project) { return com.google.gerrit.client.changes.ChangeApi.call(id, project, ""comments""); }",abdaa6926424e9d27c578e7ba67dc2a21164e64c,"public static com.google.gerrit.client.rpc.RestApi comments(@com.google.gerrit.common.Nullable java.lang.String project, int id) { return com.google.gerrit.client.changes.ChangeApi.call(project, id, ""comments""); }",e1b318781e57a17fa0c5da20a7cd1c3a465e1f93,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"private void loadFileList(final com.google.gerrit.client.DiffObject base, final com.google.gerrit.client.info.ChangeInfo.RevisionInfo baseRev, final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev, final java.sql.Timestamp myLastReply, com.google.gerrit.client.rpc.CallbackGroup group, final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> comments, final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> drafts) { com.google.gerrit.client.diff.DiffApi.list(changeId.get(), rev.name(), baseRev, group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> m) { files.set(base, new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, rev._number()), style, reply, fileTableMode, ((edit) != null)); files.setValue(m, myLastReply, (comments != null ? comments.get(0) : null), (drafts != null ? drafts.get(0) : null)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { files.showError(caught); } })); }",07617837e5c1ca039581a4675fea4e34be8198fd,"private void loadFileList(final com.google.gerrit.client.DiffObject base, final com.google.gerrit.client.info.ChangeInfo.RevisionInfo baseRev, final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev, final java.sql.Timestamp myLastReply, com.google.gerrit.client.rpc.CallbackGroup group, final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> comments, final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> drafts) { com.google.gerrit.client.diff.DiffApi.list(changeId.get(), Project.NameKey.asStringOrNull(project), rev.name(), baseRev, group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> m) { files.set(base, new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, rev._number()), project, style, reply, fileTableMode, ((edit) != null)); files.setValue(m, myLastReply, (comments != null ? comments.get(0) : null), (drafts != null ? drafts.get(0) : null)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { files.showError(caught); } })); }",f6d5da9109b5d61cf1120ecea6d468760e86f492,"private void loadFileList(final com.google.gerrit.client.DiffObject base, final com.google.gerrit.client.info.ChangeInfo.RevisionInfo baseRev, final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev, final java.sql.Timestamp myLastReply, com.google.gerrit.client.rpc.CallbackGroup group, final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> comments, final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> drafts) { com.google.gerrit.client.diff.DiffApi.list(getProject().get(), changeId.get(), rev.name(), baseRev, group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> m) { files.set(base, new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, rev._number()), getProject(), style, reply, fileTableMode, ((edit) != null)); files.setValue(m, myLastReply, (comments != null ? comments.get(0) : null), (drafts != null ? drafts.get(0) : null)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { files.showError(caught); } })); }",82fa8420fb078ed06153eab024b658a75a335154,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ReviewerSuggestOracle.java,public void setChange(com.google.gerrit.reviewdb.client.Change.Id changeId) { this.changeId = changeId; },e01c6f1f0be5e5653e6dbb868467d74e7079b8c3,"public void setChange(com.google.gerrit.reviewdb.client.Change.Id changeId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project) { this.changeId = changeId; this.project = project; }",a181b0eca50a287175d7c794f1b174312bbc3929,"public void setChange(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id changeId) { this.project = project; this.changeId = changeId; }",e744bae5cc31b59faaec3af17b8367a05ab28ff7,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Actions.java,"@com.google.gwt.uibinder.client.UiHandler(""unmarkPrivate"") void onUnmarkPrivate(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.change.ChangeActions.unmarkPrivate(changeId, unmarkPrivate); }",abb6bef361980b296fac74fecaf450c474fd7d71,"@com.google.gwt.uibinder.client.UiHandler(""unmarkPrivate"") void onUnmarkPrivate(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.change.ChangeActions.unmarkPrivate(changeId, project, unmarkPrivate); }",9a2610dd3365dd340515a099f860a8eb3125086f,"@com.google.gwt.uibinder.client.UiHandler(""unmarkPrivate"") void onUnmarkPrivate(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.change.ChangeActions.unmarkPrivate(project, changeId, unmarkPrivate); }",37825bd56b651b03e2b262dd5eab6b8d04df1de0,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Actions.java,"@com.google.gwt.uibinder.client.UiHandler(""deleteChange"") void onDeleteChange(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteChange())) { com.google.gerrit.client.change.ChangeActions.delete(changeId, deleteChange); } }",5f5ae8f6fec2dcdb3e4a0f57c54736c67cb17bfa,"@com.google.gwt.uibinder.client.UiHandler(""deleteChange"") void onDeleteChange(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteChange())) { com.google.gerrit.client.change.ChangeActions.delete(changeId, project, deleteChange); } }",77bf230cb0a7b3984ab5f24255235d00f54fd289,"@com.google.gwt.uibinder.client.UiHandler(""deleteChange"") void onDeleteChange(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteChange())) { com.google.gerrit.client.change.ChangeActions.delete(project, changeId, deleteChange); } }",0d3d584e78ab20afcf8063f0e577db2fcc81da8d,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Actions.java,"@com.google.gwt.uibinder.client.UiHandler(""markPrivate"") void onMarkPrivate(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.change.ChangeActions.markPrivate(changeId, markPrivate); }",48a04f78462e902c69e63f65a125623b93219f09,"@com.google.gwt.uibinder.client.UiHandler(""markPrivate"") void onMarkPrivate(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.change.ChangeActions.markPrivate(changeId, project, markPrivate); }",bd6041e9900d7f1cb65bca166e51364ce18aec92,"@com.google.gwt.uibinder.client.UiHandler(""markPrivate"") void onMarkPrivate(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.change.ChangeActions.markPrivate(project, changeId, markPrivate); }",5f032ca6f2e04f9df40f7d70574523eb3164319d,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DiffApi.java,"public static void list(int id, java.lang.String revision, com.google.gerrit.client.info.ChangeInfo.RevisionInfo base, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>> cb) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(id, revision).view(""files""); if (base != null) { if ((base._number()) < 0) { api.addParameter(""parent"", (-(base._number()))); } else { api.addParameter(""base"", base.name()); } } api.get(com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren(""path"", cb)); }",105a0e00e780b3c1a6ce3e8ec1fbc6ac1cbd6fd7,"public static void list(int id, java.lang.String project, java.lang.String revision, com.google.gerrit.client.info.ChangeInfo.RevisionInfo base, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>> cb) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(id, project, revision).view(""files""); if (base != null) { if ((base._number()) < 0) { api.addParameter(""parent"", (-(base._number()))); } else { api.addParameter(""base"", base.name()); } } api.get(com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren(""path"", cb)); }",b7d483dfe2aa3deb55d4be5df152d24e9aec8b95,"public static void list(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String revision, com.google.gerrit.client.info.ChangeInfo.RevisionInfo base, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>> cb) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(project, id, revision).view(""files""); if (base != null) { if ((base._number()) < 0) { api.addParameter(""parent"", (-(base._number()))); } else { api.addParameter(""base"", base.name()); } } api.get(com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren(""path"", cb)); }",a9b44a38c53af997573ca750a934be1ebd762bb7,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,"@java.lang.Override public void onSuccess(final com.google.gerrit.client.info.ChangeInfo info) { info.init(); initCurrentRevision(info); final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); loadCommit(rev, group); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { if ((base.isBase()) && (rev.isMerge())) { base = com.google.gerrit.client.DiffObject.parse(info.legacyId(), com.google.gerrit.client.Gerrit.getUserPreferences().defaultBaseForMerges().getBase()); } loadConfigInfo(info, base); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> mAr = info.messages(); for (int i = 0; i < (mAr.length()); i++) { if ((mAr.get(i).tag()) != null) { hideTaggedComments.setVisible(true); break; } } } }); group.done(); }",393ab8ca20a9663071bcf85d6863dd2a6c82dae8,"@java.lang.Override public void onSuccess(final com.google.gerrit.client.info.ChangeInfo info) { info.init(); if ((project) == null) { project = info.projectNameKey(); } initCurrentRevision(info); final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); loadCommit(rev, group); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { if ((base.isBase()) && (rev.isMerge())) { base = com.google.gerrit.client.DiffObject.parse(info.legacyId(), com.google.gerrit.client.Gerrit.getUserPreferences().defaultBaseForMerges().getBase()); } loadConfigInfo(info, base); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> mAr = info.messages(); for (int i = 0; i < (mAr.length()); i++) { if ((mAr.get(i).tag()) != null) { hideTaggedComments.setVisible(true); break; } } } }); group.done(); }",dc4efc193f0a0a66544f21ad8c105e3bc42c5396,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo info) { info.init(); if ((project) == null) { project = info.projectNameKey(); } initCurrentRevision(info); final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); loadCommit(rev, group); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { if ((base.isBase()) && (rev.isMerge())) { base = com.google.gerrit.client.DiffObject.parse(info.legacyId(), com.google.gerrit.client.Gerrit.getUserPreferences().defaultBaseForMerges().getBase()); } loadConfigInfo(info, base); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> mAr = info.messages(); for (int i = 0; i < (mAr.length()); i++) { if ((mAr.get(i).tag()) != null) { hideTaggedComments.setVisible(true); break; } } } }); group.done(); }",41b199707b603339542ec8a68e4bff2255cb8d02,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,"public static java.lang.String toPatch(java.lang.String type, com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.Patch.Key id) { return com.google.gerrit.client.Dispatcher.toPatch(type, diffBase, id.getParentKey(), id.get(), null, 0); }",e86a8dd779131cc94a81bd4f2e1ef2c904a2def7,"public static java.lang.String toPatch(java.lang.String type, com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.Patch.Key id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project) { return com.google.gerrit.client.Dispatcher.toPatch(type, diffBase, id.getParentKey(), project, id.get(), null, 0); }",9a5b1262a2942004fab60ca28bd016a044bd97e3,"public static java.lang.String toPatch(@com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String type, com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.Patch.Key id) { return com.google.gerrit.client.Dispatcher.toPatch(type, project, diffBase, id.getParentKey(), id.get(), null, 0); }",0fb558cc4b409ee51d974d91f6853bf0f91702d2,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,"private static void codemirrorForEdit(final java.lang.String token, final com.google.gerrit.reviewdb.client.Patch.Key id, final int line) { com.google.gwt.core.client.GWT.runAsync(new com.google.gerrit.client.Dispatcher.AsyncSplit(token) { @java.lang.Override public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.editor.EditScreen(id, line)); } }); }",a586168c4590b692df6245cb8b2e6abf056adead,"private static void codemirrorForEdit(final java.lang.String token, final com.google.gerrit.reviewdb.client.Patch.Key id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, final int line) { com.google.gwt.core.client.GWT.runAsync(new com.google.gerrit.client.Dispatcher.AsyncSplit(token) { @java.lang.Override public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.editor.EditScreen(id, project, line)); } }); }",ad1701ee337cafd391de173b5125d2c217e9da08,"private static void codemirrorForEdit(final java.lang.String token, @com.google.gerrit.common.Nullable final com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gerrit.reviewdb.client.Patch.Key id, final int line) { com.google.gwt.core.client.GWT.runAsync(new com.google.gerrit.client.Dispatcher.AsyncSplit(token) { @java.lang.Override public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.editor.EditScreen(project, id, line)); } }); }",e9167845bde6d1201fc73ffbbf1199c3b07a3ff1,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,"public static com.google.gerrit.client.rpc.RestApi editWithCommands(int id) { return com.google.gerrit.client.changes.ChangeApi.edit(id).addParameterTrue(""download-commands""); }",01f2420b0ba74337eb263ded4875631a5f96ebd6,"public static com.google.gerrit.client.rpc.RestApi editWithCommands(int id, @com.google.gerrit.common.Nullable java.lang.String project) { return com.google.gerrit.client.changes.ChangeApi.edit(id, project).addParameterTrue(""download-commands""); }",f2d760ff4caddf3c2b491231b4a6fb0757a5de1f,"public static com.google.gerrit.client.rpc.RestApi editWithCommands(@com.google.gerrit.common.Nullable java.lang.String project, int id) { return com.google.gerrit.client.changes.ChangeApi.edit(project, id).addParameterTrue(""download-commands""); }",ff44c2eeef79d3d5e942954bae8bbbde3616f128,2017-07-26 07:42:44,7
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,private void upToChange() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(revision.getParentKey())); },cfe8327208799a2c51378ff4a740a8fe12130c74,"private void upToChange() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(revision.getParentKey(), projectKey)); }",3de06f27e05673e1d9226c7a3a9b0633f1d9a86e,"private void upToChange() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(projectKey, revision.getParentKey())); }",8463033e673fd5881990125d29b47e41f6952635,2017-07-26 07:42:44,7
115690,gerrit-httpd_src_main_java_com_google_gerrit_httpd_raw_StaticModule.java,"private boolean handlePolyGerritParam(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { if (!(options.enableGwtUi())) { return false; } boolean redirect = false; java.lang.String param = req.getParameter(""polygerrit""); if (""1"".equals(param)) { setPolyGerritCookie(req, res, UiType.POLYGERRIT); redirect = true; } else if (""0"".equals(param)) { setPolyGerritCookie(req, res, UiType.GWT); redirect = true; } if (redirect) { res.sendRedirect(req.getRequestURL().toString()); } return redirect; }",a6e7efe71f58d505bbc4ac0024cbb41c95bec4cb,"private boolean handlePolyGerritParam(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { if (!(options.enableGwtUi())) { return false; } boolean redirect = false; if (req.getMethod().equals(""GET"")) { java.lang.String param = req.getParameter(""polygerrit""); if (""1"".equals(param)) { setPolyGerritCookie(req, res, UiType.POLYGERRIT); redirect = true; } else if (""0"".equals(param)) { setPolyGerritCookie(req, res, UiType.GWT); redirect = true; } } if (redirect) { res.sendRedirect(req.getRequestURL().toString()); } return redirect; }",7136f150a376deebba6c5521fc9be6e3b70fce11,"private boolean handlePolyGerritParam(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { if ((!(options.enableGwtUi())) || (!(""GET"".equals(req.getMethod())))) { return false; } boolean redirect = false; java.lang.String param = req.getParameter(""polygerrit""); if (""1"".equals(param)) { setPolyGerritCookie(req, res, UiType.POLYGERRIT); redirect = true; } else if (""0"".equals(param)) { setPolyGerritCookie(req, res, UiType.GWT); redirect = true; } if (redirect) { res.sendRedirect(req.getRequestURL().toString()); } return redirect; }",56144ae4cd359d307a45c7139cf860e461f2980d,2017-07-26 19:32:23,2
113893,src_main_java_com_googlesource_gerrit_plugins_findowners_OwnersDb.java,"void addFile(java.lang.String dirPath, java.lang.String filePath, java.lang.String[] lines) { com.googlesource.gerrit.plugins.findowners.Parser.Result result = com.googlesource.gerrit.plugins.findowners.Parser.parseFile(dirPath, filePath, lines); if (result.stopLooking) { stopLooking.add(dirPath); } for (java.lang.String owner : result.owner2paths.keySet()) { for (java.lang.String path : result.owner2paths.get(owner)) { addOwnerPathPair(owner, path); } } if (com.googlesource.gerrit.plugins.findowners.Config.getReportSyntaxError()) { result.warnings.forEach(( w) -> com.googlesource.gerrit.plugins.findowners.OwnersDb.log.warn(w)); result.errors.forEach(( w) -> com.googlesource.gerrit.plugins.findowners.OwnersDb.log.error(w)); } }",e67cbecf5b7067fd8c2f41dc39f6bb6a27e19310,"void addFile(java.lang.String dirPath, java.lang.String filePath, java.lang.String[] lines) { com.googlesource.gerrit.plugins.findowners.Parser.Result result = com.googlesource.gerrit.plugins.findowners.Parser.parseFile(dirPath, filePath, lines); if (result.stopLooking) { stopLooking.add(dirPath); } for (java.lang.String owner : result.owner2paths.keySet()) { java.lang.String email = getPreferredEmail(owner); for (java.lang.String path : result.owner2paths.get(owner)) { addOwnerPathPair(email, path); } } if (com.googlesource.gerrit.plugins.findowners.Config.getReportSyntaxError()) { result.warnings.forEach(( w) -> com.googlesource.gerrit.plugins.findowners.OwnersDb.log.warn(w)); result.errors.forEach(( w) -> com.googlesource.gerrit.plugins.findowners.OwnersDb.log.error(w)); } }",27b42bd9982bcc675ccf536ec63f049a85aed38a,"void addFile(java.lang.String dirPath, java.lang.String filePath, java.lang.String[] lines) { com.googlesource.gerrit.plugins.findowners.Parser.Result result = com.googlesource.gerrit.plugins.findowners.Parser.parseFile(dirPath, filePath, lines); if (result.stopLooking) { stopLooking.add(dirPath); } addPreferredEmails(result.owner2paths.keySet()); for (java.lang.String owner : result.owner2paths.keySet()) { java.lang.String email = preferredEmails.get(owner); for (java.lang.String path : result.owner2paths.get(owner)) { addOwnerPathPair(email, path); } } if (com.googlesource.gerrit.plugins.findowners.Config.getReportSyntaxError()) { result.warnings.forEach(( w) -> com.googlesource.gerrit.plugins.findowners.OwnersDb.log.warn(w)); result.errors.forEach(( w) -> com.googlesource.gerrit.plugins.findowners.OwnersDb.log.error(w)); } }",4b0eb2a653edaed0e8915f411311040f2ce16aff,2017-07-27 00:43:29,4
113893,src_main_java_com_googlesource_gerrit_plugins_findowners_Cache.java,"com.googlesource.gerrit.plugins.findowners.OwnersDb get(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.query.change.ChangeData changeData) throws com.google.gwtorm.server.OrmException { return get(repo, changeData, changeData.currentPatchSet().getId().get()); }",d1f158fd5d3566274f33da08ec38c9ae70a51e7a,"com.googlesource.gerrit.plugins.findowners.OwnersDb get(com.google.gerrit.server.account.AccountByEmailCache accountByEmailCache, com.google.gerrit.server.account.AccountCache accountCache, org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.query.change.ChangeData changeData) throws com.google.gwtorm.server.OrmException { return get(accountByEmailCache, accountCache, repo, changeData, changeData.currentPatchSet().getId().get()); }",49bc538abef0b0b729c8bcbcf50e7e3cc959b361,"com.googlesource.gerrit.plugins.findowners.OwnersDb get(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Accounts accounts, org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.query.change.ChangeData changeData) throws com.google.gwtorm.server.OrmException { return get(accountCache, accounts, repo, changeData, changeData.currentPatchSet().getId().get()); }",9560f39460f3d45b134a5633404ebe5f3ebbdc6d,2017-07-27 00:43:29,4
113893,src_main_java_com_googlesource_gerrit_plugins_findowners_Cache.java,"@java.lang.Override public com.googlesource.gerrit.plugins.findowners.OwnersDb call() { com.googlesource.gerrit.plugins.findowners.Cache.log.trace((""Create new OwnersDb, key="" + key)); return new com.googlesource.gerrit.plugins.findowners.OwnersDb(key, repository, project, branch, files); }",b2b6109b6a77b4391f8428105bd42cf52ef30aa4,"@java.lang.Override public com.googlesource.gerrit.plugins.findowners.OwnersDb call() { com.googlesource.gerrit.plugins.findowners.Cache.log.trace((""Create new OwnersDb, key="" + key)); return new com.googlesource.gerrit.plugins.findowners.OwnersDb(accountByEmailCache, accountCache, key, repository, project, branch, files); }",59eb0691159b55dfc9cc7f6b283c68165d81f036,"@java.lang.Override public com.googlesource.gerrit.plugins.findowners.OwnersDb call() { com.googlesource.gerrit.plugins.findowners.Cache.log.trace((""Create new OwnersDb, key="" + key)); return new com.googlesource.gerrit.plugins.findowners.OwnersDb(accountCache, accounts, key, repository, project, branch, files); }",286553e8dc5276b24ec48ad662c45bfe919823a7,2017-07-27 00:43:29,4
113893,src_main_java_com_googlesource_gerrit_plugins_findowners_Cache.java,"com.googlesource.gerrit.plugins.findowners.OwnersDb get(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.query.change.ChangeData changeData, int patchset) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Project.NameKey project = changeData.change().getProject(); java.lang.String branch = changeData.change().getDest().get(); java.lang.String dbKey = com.googlesource.gerrit.plugins.findowners.Cache.makeKey(changeData.getId().get(), patchset, branch); return get(dbKey, repository, project, branch, changeData.currentFilePaths()); }",d68dd83715bd5ff2ea4705a54a0d0054ebea46b1,"com.googlesource.gerrit.plugins.findowners.OwnersDb get(com.google.gerrit.server.account.AccountByEmailCache accountByEmailCache, com.google.gerrit.server.account.AccountCache accountCache, org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.query.change.ChangeData changeData, int patchset) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Project.NameKey project = changeData.change().getProject(); java.lang.String branch = changeData.change().getDest().get(); java.lang.String dbKey = com.googlesource.gerrit.plugins.findowners.Cache.makeKey(changeData.getId().get(), patchset, branch); return get(accountByEmailCache, accountCache, dbKey, repository, project, branch, changeData.currentFilePaths()); }",0d2c4ad8df003e300d072da6108e269f03dbeaa3,"com.googlesource.gerrit.plugins.findowners.OwnersDb get(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Accounts accounts, org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.query.change.ChangeData changeData, int patchset) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Project.NameKey project = changeData.change().getProject(); java.lang.String branch = changeData.change().getDest().get(); java.lang.String dbKey = com.googlesource.gerrit.plugins.findowners.Cache.makeKey(changeData.getId().get(), patchset, branch); return get(accountCache, accounts, dbKey, repository, project, branch, changeData.currentFilePaths()); }",bb6bd788b05299699822ed62f136e587f171629c,2017-07-27 00:43:29,4
113893,src_main_java_com_googlesource_gerrit_plugins_findowners_Cache.java,"com.googlesource.gerrit.plugins.findowners.OwnersDb get(java.lang.String key, org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String branch, java.util.Collection<java.lang.String> files) { if ((dbCache) == null) { com.googlesource.gerrit.plugins.findowners.Cache.log.trace((""Create new OwnersDb, key="" + key)); return new com.googlesource.gerrit.plugins.findowners.OwnersDb(key, repository, project, branch, files); } try { com.googlesource.gerrit.plugins.findowners.Cache.log.trace((((((""Get from cash "" + (dbCache)) + "", key="") + key) + "", cache size="") + (dbCache.size()))); return dbCache.get(key, new java.util.concurrent.Callable<com.googlesource.gerrit.plugins.findowners.OwnersDb>() { @java.lang.Override public com.googlesource.gerrit.plugins.findowners.OwnersDb call() { com.googlesource.gerrit.plugins.findowners.Cache.log.trace((""Create new OwnersDb, key="" + key)); return new com.googlesource.gerrit.plugins.findowners.OwnersDb(key, repository, project, branch, files); } }); } catch (java.util.concurrent.ExecutionException e) { com.googlesource.gerrit.plugins.findowners.Cache.log.error((""Cache.get has exception: "" + e)); return new com.googlesource.gerrit.plugins.findowners.OwnersDb(key, repository, project, branch, files); } }",1cbad3ff24fbd704d4f9e6cc62a8e771137949fe,"com.googlesource.gerrit.plugins.findowners.OwnersDb get(com.google.gerrit.server.account.AccountByEmailCache accountByEmailCache, com.google.gerrit.server.account.AccountCache accountCache, java.lang.String key, org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String branch, java.util.Collection<java.lang.String> files) { if ((dbCache) == null) { com.googlesource.gerrit.plugins.findowners.Cache.log.trace((""Create new OwnersDb, key="" + key)); return new com.googlesource.gerrit.plugins.findowners.OwnersDb(accountByEmailCache, accountCache, key, repository, project, branch, files); } try { com.googlesource.gerrit.plugins.findowners.Cache.log.trace((((((""Get from cash "" + (dbCache)) + "", key="") + key) + "", cache size="") + (dbCache.size()))); return dbCache.get(key, new java.util.concurrent.Callable<com.googlesource.gerrit.plugins.findowners.OwnersDb>() { @java.lang.Override public com.googlesource.gerrit.plugins.findowners.OwnersDb call() { com.googlesource.gerrit.plugins.findowners.Cache.log.trace((""Create new OwnersDb, key="" + key)); return new com.googlesource.gerrit.plugins.findowners.OwnersDb(accountByEmailCache, accountCache, key, repository, project, branch, files); } }); } catch (java.util.concurrent.ExecutionException e) { com.googlesource.gerrit.plugins.findowners.Cache.log.error((""Cache.get has exception: "" + e)); return new com.googlesource.gerrit.plugins.findowners.OwnersDb(accountByEmailCache, accountCache, key, repository, project, branch, files); } }",1e76ced2049b5a98cdd7cd0736d12174b179bf05,"com.googlesource.gerrit.plugins.findowners.OwnersDb get(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Accounts accounts, java.lang.String key, org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String branch, java.util.Collection<java.lang.String> files) { if ((dbCache) == null) { com.googlesource.gerrit.plugins.findowners.Cache.log.trace((""Create new OwnersDb, key="" + key)); return new com.googlesource.gerrit.plugins.findowners.OwnersDb(accountCache, accounts, key, repository, project, branch, files); } try { com.googlesource.gerrit.plugins.findowners.Cache.log.trace((((((""Get from cash "" + (dbCache)) + "", key="") + key) + "", cache size="") + (dbCache.size()))); return dbCache.get(key, new java.util.concurrent.Callable<com.googlesource.gerrit.plugins.findowners.OwnersDb>() { @java.lang.Override public com.googlesource.gerrit.plugins.findowners.OwnersDb call() { com.googlesource.gerrit.plugins.findowners.Cache.log.trace((""Create new OwnersDb, key="" + key)); return new com.googlesource.gerrit.plugins.findowners.OwnersDb(accountCache, accounts, key, repository, project, branch, files); } }); } catch (java.util.concurrent.ExecutionException e) { com.googlesource.gerrit.plugins.findowners.Cache.log.error((""Cache.get has exception: "" + e)); return new com.googlesource.gerrit.plugins.findowners.OwnersDb(accountCache, accounts, key, repository, project, branch, files); } }",6858960873f67c80df6891efc9346a73dd3ef68f,2017-07-27 00:43:29,4
113893,src_test_java_com_googlesource_gerrit_plugins_findowners_FindOwnersIT.java,"@org.junit.Test public void actionApplyTest() throws java.lang.Exception { com.googlesource.gerrit.plugins.findowners.Cache cache = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().init(0, 10); assertThat(cache.size()).isEqualTo(0); com.google.gerrit.extensions.common.ChangeInfo changeInfo = newChangeInfo(""test Action.apply""); com.google.gerrit.server.change.ChangeResource cr = parseChangeResource(changeInfo.changeId); com.googlesource.gerrit.plugins.findowners.Action.Parameters param = new com.googlesource.gerrit.plugins.findowners.Action.Parameters(); com.googlesource.gerrit.plugins.findowners.Action action = new com.googlesource.gerrit.plugins.findowners.Action(""find-owners"", null, null, null, changeDataFactory, accountCache, repoManager); com.google.gerrit.extensions.restapi.Response<com.googlesource.gerrit.plugins.findowners.RestResult> response = action.apply(db, cr, param); com.googlesource.gerrit.plugins.findowners.RestResult result = response.value(); com.googlesource.gerrit.plugins.findowners.FindOwnersIT.verifyRestResult(result, 1, 1, changeInfo._number, false); param.debug = true; response = action.apply(db, cr, param); result = response.value(); com.googlesource.gerrit.plugins.findowners.FindOwnersIT.verifyRestResult(result, 1, 1, changeInfo._number, true); assertThat(result.dbgmsgs.user).isEqualTo(""?""); assertThat(result.dbgmsgs.project).isEqualTo(changeInfo.project); assertThat(result.dbgmsgs.branch).contains(changeInfo.branch); assertThat(result.dbgmsgs.path2owners).isEmpty(); assertThat(result.dbgmsgs.owner2paths).isEmpty(); assertThat(result.file2owners).isEmpty(); assertThat(result.reviewers).isEmpty(); assertThat(result.owners).isEmpty(); assertThat(result.files).isEmpty(); assertThat(cache.size()).isEqualTo(0); }",c90b2e52beba2363546a12aea11e60a1696ebf2f,"@org.junit.Test public void actionApplyTest() throws java.lang.Exception { com.googlesource.gerrit.plugins.findowners.Cache cache = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().init(0, 10); assertThat(cache.size()).isEqualTo(0); com.google.gerrit.extensions.common.ChangeInfo changeInfo = newChangeInfo(""test Action.apply""); com.google.gerrit.server.change.ChangeResource cr = parseChangeResource(changeInfo.changeId); com.googlesource.gerrit.plugins.findowners.Action.Parameters param = new com.googlesource.gerrit.plugins.findowners.Action.Parameters(); com.googlesource.gerrit.plugins.findowners.Action action = new com.googlesource.gerrit.plugins.findowners.Action(""find-owners"", null, null, null, changeDataFactory, accountByEmailCache, accountCache, repoManager); com.google.gerrit.extensions.restapi.Response<com.googlesource.gerrit.plugins.findowners.RestResult> response = action.apply(db, cr, param); com.googlesource.gerrit.plugins.findowners.RestResult result = response.value(); com.googlesource.gerrit.plugins.findowners.FindOwnersIT.verifyRestResult(result, 1, 1, changeInfo._number, false); param.debug = true; response = action.apply(db, cr, param); result = response.value(); com.googlesource.gerrit.plugins.findowners.FindOwnersIT.verifyRestResult(result, 1, 1, changeInfo._number, true); assertThat(result.dbgmsgs.user).isEqualTo(""?""); assertThat(result.dbgmsgs.project).isEqualTo(changeInfo.project); assertThat(result.dbgmsgs.branch).contains(changeInfo.branch); assertThat(result.dbgmsgs.path2owners).isEmpty(); assertThat(result.dbgmsgs.owner2paths).isEmpty(); assertThat(result.file2owners).isEmpty(); assertThat(result.reviewers).isEmpty(); assertThat(result.owners).isEmpty(); assertThat(result.files).isEmpty(); assertThat(cache.size()).isEqualTo(0); }",fdef46080b56edb86fdf6126833ad607c0435011,"@org.junit.Test public void actionApplyTest() throws java.lang.Exception { com.googlesource.gerrit.plugins.findowners.Cache cache = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().init(0, 10); assertThat(cache.size()).isEqualTo(0); com.google.gerrit.extensions.common.ChangeInfo changeInfo = newChangeInfo(""test Action.apply""); com.google.gerrit.server.change.ChangeResource cr = parseChangeResource(changeInfo.changeId); com.googlesource.gerrit.plugins.findowners.Action.Parameters param = new com.googlesource.gerrit.plugins.findowners.Action.Parameters(); com.googlesource.gerrit.plugins.findowners.Action action = new com.googlesource.gerrit.plugins.findowners.Action(""find-owners"", null, null, null, changeDataFactory, accountCache, accounts, repoManager); com.google.gerrit.extensions.restapi.Response<com.googlesource.gerrit.plugins.findowners.RestResult> response = action.apply(db, cr, param); com.googlesource.gerrit.plugins.findowners.RestResult result = response.value(); com.googlesource.gerrit.plugins.findowners.FindOwnersIT.verifyRestResult(result, 1, 1, changeInfo._number, false); param.debug = true; response = action.apply(db, cr, param); result = response.value(); com.googlesource.gerrit.plugins.findowners.FindOwnersIT.verifyRestResult(result, 1, 1, changeInfo._number, true); assertThat(result.dbgmsgs.user).isEqualTo(""?""); assertThat(result.dbgmsgs.project).isEqualTo(changeInfo.project); assertThat(result.dbgmsgs.branch).contains(changeInfo.branch); assertThat(result.dbgmsgs.path2owners).isEmpty(); assertThat(result.dbgmsgs.owner2paths).isEmpty(); assertThat(result.file2owners).isEmpty(); assertThat(result.reviewers).isEmpty(); assertThat(result.owners).isEmpty(); assertThat(result.files).isEmpty(); assertThat(cache.size()).isEqualTo(0); }",045a2809101da3b44ad83a5cd7b9a8f21209779c,2017-07-27 00:43:29,4
113893,src_main_java_com_googlesource_gerrit_plugins_findowners_Checker.java,"int findApproval(com.google.gerrit.server.account.AccountCache accountCache) throws com.google.gwtorm.server.OrmException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExemptFromOwnerApproval(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.OwnersDb db = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().get(repository, changeData); if ((db.getNumOwners()) <= 0) { return 0; } if ((minVoteLevel) <= 0) { minVoteLevel = com.googlesource.gerrit.plugins.findowners.Config.getMinOwnerVoteLevel(changeData); } com.googlesource.gerrit.plugins.findowners.Checker.log.trace((""findApproval db key = "" + (db.key))); return findApproval(accountCache, db); }",6c08282655d6450c6c618fb0ab867070c8bee901,"int findApproval(com.google.gerrit.server.account.AccountByEmailCache accountByEmailCache, com.google.gerrit.server.account.AccountCache accountCache) throws com.google.gwtorm.server.OrmException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExemptFromOwnerApproval(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.OwnersDb db = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().get(accountByEmailCache, accountCache, repository, changeData); if ((db.getNumOwners()) <= 0) { return 0; } if ((minVoteLevel) <= 0) { minVoteLevel = com.googlesource.gerrit.plugins.findowners.Config.getMinOwnerVoteLevel(changeData); } com.googlesource.gerrit.plugins.findowners.Checker.log.trace((""findApproval db key = "" + (db.key))); return findApproval(accountCache, db); }",cdd098ac0673cba690590ae898e62eb7d87030dc,"int findApproval(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Accounts accounts) throws com.google.gwtorm.server.OrmException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExemptFromOwnerApproval(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.OwnersDb db = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().get(accountCache, accounts, repository, changeData); if ((db.getNumOwners()) <= 0) { return 0; } if ((minVoteLevel) <= 0) { minVoteLevel = com.googlesource.gerrit.plugins.findowners.Config.getMinOwnerVoteLevel(changeData); } com.googlesource.gerrit.plugins.findowners.Checker.log.trace((""findApproval db key = "" + (db.key))); return findApproval(accountCache, db); }",b49608ff92cf09801a22f80f372e2e96ebea5e69,2017-07-27 00:43:29,4
113893,src_main_java_com_googlesource_gerrit_plugins_findowners_Checker.java,"public static int findApproval(com.googlecode.prolog_cafe.lang.Prolog engine, int minVoteLevel) { try { com.google.gerrit.server.account.AccountCache accountCache = StoredValues.ACCOUNT_CACHE.get(engine); com.google.gerrit.server.query.change.ChangeData changeData = StoredValues.CHANGE_DATA.get(engine); org.eclipse.jgit.lib.Repository repository = StoredValues.REPOSITORY.get(engine); return new com.googlesource.gerrit.plugins.findowners.Checker(repository, changeData, minVoteLevel).findApproval(accountCache); } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.findowners.Checker.log.error(""Exception"", e); return 0; } }",c7c6a4d5a089c03ae5886a61e094e6917fb6792d,"public static int findApproval(com.googlecode.prolog_cafe.lang.Prolog engine, int minVoteLevel) { try { com.google.gerrit.server.account.AccountByEmailCache accountByEmailCache = StoredValues.ACCOUNT_BY_EMAIL_CACHE.get(engine); com.google.gerrit.server.account.AccountCache accountCache = StoredValues.ACCOUNT_CACHE.get(engine); com.google.gerrit.server.query.change.ChangeData changeData = StoredValues.CHANGE_DATA.get(engine); org.eclipse.jgit.lib.Repository repository = StoredValues.REPOSITORY.get(engine); return new com.googlesource.gerrit.plugins.findowners.Checker(repository, changeData, minVoteLevel).findApproval(accountByEmailCache, accountCache); } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.findowners.Checker.log.error(""Exception"", e); return 0; } }",dcfdc566c2195dbf56c36e6a68c1d937fad822bc,"public static int findApproval(com.googlecode.prolog_cafe.lang.Prolog engine, int minVoteLevel) { try { com.google.gerrit.server.account.AccountCache accountCache = StoredValues.ACCOUNT_CACHE.get(engine); com.google.gerrit.server.account.Accounts accounts = StoredValues.ACCOUNTS.get(engine); com.google.gerrit.server.query.change.ChangeData changeData = StoredValues.CHANGE_DATA.get(engine); org.eclipse.jgit.lib.Repository repository = StoredValues.REPOSITORY.get(engine); return new com.googlesource.gerrit.plugins.findowners.Checker(repository, changeData, minVoteLevel).findApproval(accountCache, accounts); } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.findowners.Checker.log.error(""Exception"", e); return 0; } }",81b2f19e508a8d782e5fa821ce0b4b758813c9f0,2017-07-27 00:43:29,4
113893,src_main_java_com_googlesource_gerrit_plugins_findowners_OwnersDb.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"java.lang.String getPreferredEmail(java.lang.String owner) { java.lang.String email = preferredEmails.get(owner); if (email == null) { email = owner; if (!(owner.equals(""*""))) { try { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ids = accountByEmailCache.get(owner); if ((ids == null) || ((ids.size()) != 1)) { errors.add(owner); } else { email = accountCache.get(ids.iterator().next()).getAccount().getPreferredEmail(); } } catch (java.lang.Exception e) { com.googlesource.gerrit.plugins.findowners.OwnersDb.log.error((""Fail to find preferred email of "" + owner), e); errors.add(owner); } } preferredEmails.put(owner, email); } return email; }",fc4835f2324e21a118d8a67e7644d1dd5b882750,"void addPreferredEmails(java.util.Set<java.lang.String> ownerEmails) { java.util.List<java.lang.String> owners = new java.util.ArrayList<java.lang.String>(ownerEmails); owners.removeIf(( o) -> (preferredEmails.get(o)) != null); if ((owners.size()) > 0) { java.lang.String[] emails = new java.lang.String[owners.size()]; owners.toArray(emails); com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id> email2ids = null; try { email2ids = accounts.byEmails(emails); } catch (java.lang.Exception e) { com.googlesource.gerrit.plugins.findowners.OwnersDb.log.error(""accounts.byEmails failed with exception: "", e); } for (java.lang.String owner : emails) { java.lang.String email = owner; try { if (email2ids == null) { errors.add(owner); } else { java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> ids = email2ids.get(owner); if ((ids == null) || ((ids.size()) != 1)) { errors.add(owner); } else { email = accountCache.get(ids.iterator().next()).getAccount().getPreferredEmail(); } } } catch (java.lang.Exception e) { com.googlesource.gerrit.plugins.findowners.OwnersDb.log.error((""Fail to find preferred email of "" + owner), e); errors.add(owner); } preferredEmails.put(owner, email); } } }",2345cca84dcf38a491794d72246e11948045b1e0,2017-07-27 00:43:29,4
116050,gerrit-server_src_main_java_com_google_gerrit_server_plugins_PluginUtil.java,,,"public static java.lang.String nameOf(java.lang.String name) { if (name.endsWith("".disabled"")) { name = name.substring(0, name.lastIndexOf('.')); } int ext = name.lastIndexOf('.'); return 0 < ext ? name.substring(0, ext) : name; }",679b7b6d61260cd436b96808f40d71de4b311b30,"static java.lang.String nameOf(java.lang.String name) { if (name.endsWith("".disabled"")) { name = name.substring(0, name.lastIndexOf('.')); } int ext = name.lastIndexOf('.'); return 0 < ext ? name.substring(0, ext) : name; }",41fc38d42b2e1dd81799ec939edc30a09017d666,2017-07-27 09:30:57,2
116050,gerrit-server_src_main_java_com_google_gerrit_server_plugins_PluginUtil.java,,,"public static java.util.List<java.nio.file.Path> listPlugins(java.nio.file.Path pluginsDir) throws java.io.IOException { return com.google.gerrit.server.plugins.PluginUtil.listPlugins(pluginsDir, null); }",a2759d5143cf45566b218ef4dfae42442befef62,"static java.util.List<java.nio.file.Path> listPlugins(java.nio.file.Path pluginsDir) throws java.io.IOException { return com.google.gerrit.server.plugins.PluginUtil.listPlugins(pluginsDir, null); }",d5a10c8b520855319d2120775c1f011bce1db657,2017-07-27 09:30:57,2
113410,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotesParser.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.Integer parseRevertOf(com.google.gerrit.server.notedb.ChangeNotesCommit commit) throws org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String footer = parseOneFooter(commit, com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_REVERT_OF); if (footer == null) { return null; } return com.google.common.primitives.Ints.tryParse(footer); }",9186c4886c188f11af7f843591188a2a56978a84,"private Change.Id parseRevertOf(com.google.gerrit.server.notedb.ChangeNotesCommit commit) throws org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String footer = parseOneFooter(commit, com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_REVERT_OF); if (footer == null) { return null; } java.lang.Integer revertOf = com.google.common.primitives.Ints.tryParse(footer); if (revertOf == null) { throw invalidFooter(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_REVERT_OF, footer); } return new com.google.gerrit.reviewdb.client.Change.Id(revertOf); }",dad4e356ccbac03464d5a7e7fb7c6680a1a84f67,2017-07-27 16:44:20,3
113410,gerrit-server_src_test_java_com_google_gerrit_server_notedb_ChangeNotesTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void setRevertOfPersistsValue() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.reviewdb.client.Change changeToRevert = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.setRevertOf(changeToRevert.getChangeId()); update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); assertThat(notes.getRevertOf()).isEqualTo(changeToRevert.getId()); }",ec5bf368b9a24967f0825c07a18c32009e3a61a1,"@org.junit.Test public void setRevertOfPersistsValue() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change changeToRevert = newChange(); com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.testutil.TestChanges.newChange(project, changeOwner.getAccountId()); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.setChangeId(c.getKey().get()); update.setRevertOf(changeToRevert.getId().get()); update.commit(); assertThat(newNotes(c).getRevertOf()).isEqualTo(changeToRevert.getId()); }",e8f06b4cb7eb77ca5079dde538fffbcba62969a1,2017-07-27 16:44:20,3
113410,gerrit-server_src_test_java_com_google_gerrit_server_notedb_ChangeNotesTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void setRevertOfToCurrentChangeFails() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); exception.expect(java.lang.IllegalArgumentException.class); exception.expectMessage(""A change cannot revert itself.""); update.setRevertOf(c.getId().get()); }",123f0474d280772d611a6abe70b47b2bbb01be94,"@org.junit.Test public void setRevertOfToCurrentChangeFails() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); exception.expect(java.lang.IllegalArgumentException.class); exception.expectMessage(""A change cannot revert itself""); update.setRevertOf(c.getId().get()); }",b430229d9eed2d56d52215da92552e883c111e33,2017-07-27 16:44:20,3
113410,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeUpdate.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void setRevertOf(int revertOf) { int ownId = getChange().getId().get(); checkArgument((ownId != revertOf), ""A change cannot revert itself.""); this.revertOf = revertOf; }",6710ae509e934c1bc8149a7284dca71dd4cc5dff,"public void setRevertOf(int revertOf) { int ownId = getChange().getId().get(); checkArgument((ownId != revertOf), ""A change cannot revert itself""); this.revertOf = revertOf; rootOnly = true; }",f41a7d0a2329b6e5775be123633379685ba6bf5b,2017-07-27 16:44:20,3
113410,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotesParser.java,"private com.google.gerrit.server.notedb.ChangeNotesState buildState() { return com.google.gerrit.server.notedb.ChangeNotesState.create(tip.copy(), id, new com.google.gerrit.reviewdb.client.Change.Key(changeId), createdOn, lastUpdatedOn, ownerId, branch, buildCurrentPatchSetId(), subject, topic, originalSubject, submissionId, ((assignee) != null ? assignee.orElse(null) : null), status, com.google.common.collect.Sets.newLinkedHashSet(com.google.common.collect.Lists.reverse(pastAssignees)), hashtags, patchSets, buildApprovals(), com.google.gerrit.server.ReviewerSet.fromTable(com.google.common.collect.Tables.transpose(reviewers)), com.google.gerrit.server.ReviewerByEmailSet.fromTable(com.google.common.collect.Tables.transpose(reviewersByEmail)), pendingReviewers, pendingReviewersByEmail, allPastReviewers, buildReviewerUpdates(), submitRecords, buildAllMessages(), buildMessagesByPatchSet(), comments, readOnlyUntil, isPrivate, workInProgress, hasReviewStarted); }",e73e858a0c9138751f0220246409a9990a7fd7f5,"private com.google.gerrit.server.notedb.ChangeNotesState buildState() { return com.google.gerrit.server.notedb.ChangeNotesState.create(tip.copy(), id, new com.google.gerrit.reviewdb.client.Change.Key(changeId), createdOn, lastUpdatedOn, ownerId, branch, buildCurrentPatchSetId(), subject, topic, originalSubject, submissionId, ((assignee) != null ? assignee.orElse(null) : null), status, com.google.common.collect.Sets.newLinkedHashSet(com.google.common.collect.Lists.reverse(pastAssignees)), hashtags, patchSets, buildApprovals(), com.google.gerrit.server.ReviewerSet.fromTable(com.google.common.collect.Tables.transpose(reviewers)), com.google.gerrit.server.ReviewerByEmailSet.fromTable(com.google.common.collect.Tables.transpose(reviewersByEmail)), pendingReviewers, pendingReviewersByEmail, allPastReviewers, buildReviewerUpdates(), submitRecords, buildAllMessages(), buildMessagesByPatchSet(), comments, readOnlyUntil, isPrivate, workInProgress, hasReviewStarted, ((revertOf) != null ? new com.google.gerrit.reviewdb.client.Change.Id(revertOf) : null)); }",c8d040952b2436c6e724043bbf49ed2432348284,"private com.google.gerrit.server.notedb.ChangeNotesState buildState() { return com.google.gerrit.server.notedb.ChangeNotesState.create(tip.copy(), id, new com.google.gerrit.reviewdb.client.Change.Key(changeId), createdOn, lastUpdatedOn, ownerId, branch, buildCurrentPatchSetId(), subject, topic, originalSubject, submissionId, ((assignee) != null ? assignee.orElse(null) : null), status, com.google.common.collect.Sets.newLinkedHashSet(com.google.common.collect.Lists.reverse(pastAssignees)), hashtags, patchSets, buildApprovals(), com.google.gerrit.server.ReviewerSet.fromTable(com.google.common.collect.Tables.transpose(reviewers)), com.google.gerrit.server.ReviewerByEmailSet.fromTable(com.google.common.collect.Tables.transpose(reviewersByEmail)), pendingReviewers, pendingReviewersByEmail, allPastReviewers, buildReviewerUpdates(), submitRecords, buildAllMessages(), buildMessagesByPatchSet(), comments, readOnlyUntil, isPrivate, workInProgress, hasReviewStarted, revertOf); }",77d40e4bb95f85862f18e1a1469f8fa727d98ca4,2017-07-27 16:44:20,3
113411,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,"@org.junit.Test public void revert() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).submit(); ChangeInfo revertChange = gApi.changes().id(r.getChangeId()).revert().get(); java.util.List<com.google.gerrit.extensions.common.ChangeMessageInfo> sourceMessages = new java.util.ArrayList(gApi.changes().id(r.getChangeId()).get().messages); assertThat(sourceMessages).hasSize(4); java.lang.String expectedMessage = java.lang.String.format(""Created a revert of this change as %s"", revertChange.changeId); assertThat(sourceMessages.get(3).message).isEqualTo(expectedMessage); assertThat(revertChange.messages).hasSize(1); assertThat(revertChange.messages.iterator().next().message).isEqualTo(""Uploaded patch set 1.""); }",6adff95ffdd2dc09ab3b0fc8128bd2bd5c220417,"@org.junit.Test public void revert() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).submit(); ChangeInfo revertChange = gApi.changes().id(r.getChangeId()).revert().get(); java.util.List<com.google.gerrit.extensions.common.ChangeMessageInfo> sourceMessages = new java.util.ArrayList(gApi.changes().id(r.getChangeId()).get().messages); assertThat(sourceMessages).hasSize(4); java.lang.String expectedMessage = java.lang.String.format(""Created a revert of this change as %s"", revertChange.changeId); assertThat(sourceMessages.get(3).message).isEqualTo(expectedMessage); assertThat(revertChange.messages).hasSize(1); assertThat(revertChange.messages.iterator().next().message).isEqualTo(""Uploaded patch set 1.""); assertThat(revertChange.revertOf).isEqualTo(r.getChange().getId().get()); }",b713852fcaa0ae5f1b211e1c20063209be885674,"@org.junit.Test public void revert() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).submit(); ChangeInfo revertChange = gApi.changes().id(r.getChangeId()).revert().get(); java.util.List<com.google.gerrit.extensions.common.ChangeMessageInfo> sourceMessages = new java.util.ArrayList(gApi.changes().id(r.getChangeId()).get().messages); assertThat(sourceMessages).hasSize(4); java.lang.String expectedMessage = java.lang.String.format(""Created a revert of this change as %s"", revertChange.changeId); assertThat(sourceMessages.get(3).message).isEqualTo(expectedMessage); assertThat(revertChange.messages).hasSize(1); assertThat(revertChange.messages.iterator().next().message).isEqualTo(""Uploaded patch set 1.""); assertThat(revertChange.revertOf).isEqualTo(gApi.changes().id(r.getChangeId()).get()._number); }",6c481425a72c5bfc9999773d970358f7d59c1aef,2017-07-27 16:44:20,5
116190,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_plugin_PluginIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""plugins.allowRemoteAdmin"", value = ""true"") public void pluginManagement() throws java.lang.Exception { assertThat(list().get()).isEmpty(); assertThat(list().all().get()).isEmpty(); com.google.gerrit.extensions.api.plugins.PluginApi test; com.google.gerrit.extensions.common.PluginInfo info; com.google.gerrit.extensions.common.InstallPluginInput input = new com.google.gerrit.extensions.common.InstallPluginInput(); input.raw = com.google.gerrit.common.RawInputUtil.create(com.google.gerrit.acceptance.api.plugin.PluginIT.JS_PLUGIN_CONTENT); for (java.lang.String plugin : com.google.gerrit.acceptance.api.plugin.PluginIT.PLUGINS) { test = gApi.plugins().install((plugin + "".js""), input); assertThat(test).isNotNull(); info = test.get(); assertThat(info.id).isEqualTo(plugin); assertThat(info.disabled).isNull(); } assertThat(list().get()).hasSize(com.google.gerrit.acceptance.api.plugin.PluginIT.PLUGINS.size()); test = gApi.plugins().name(""plugin-a""); test.disable(); test = gApi.plugins().name(""plugin-a""); info = test.get(); assertThat(info.disabled).isTrue(); assertThat(list().get()).hasSize(((com.google.gerrit.acceptance.api.plugin.PluginIT.PLUGINS.size()) - 1)); assertThat(list().all().get()).hasSize(com.google.gerrit.acceptance.api.plugin.PluginIT.PLUGINS.size()); test.enable(); test = gApi.plugins().name(""plugin-a""); info = test.get(); assertThat(info.disabled).isNull(); assertThat(list().get()).hasSize(com.google.gerrit.acceptance.api.plugin.PluginIT.PLUGINS.size()); }",8ad7a32450e724f8089428c7d1f1014502d5eef8,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""plugins.allowRemoteAdmin"", value = ""true"") public void pluginManagement() throws java.lang.Exception { assertThat(list().get()).isEmpty(); assertThat(list().all().get()).isEmpty(); com.google.gerrit.extensions.api.plugins.PluginApi test; com.google.gerrit.extensions.common.PluginInfo info; com.google.gerrit.extensions.common.InstallPluginInput input = new com.google.gerrit.extensions.common.InstallPluginInput(); input.raw = com.google.gerrit.common.RawInputUtil.create(com.google.gerrit.acceptance.api.plugin.PluginIT.JS_PLUGIN_CONTENT); for (java.lang.String plugin : com.google.gerrit.acceptance.api.plugin.PluginIT.PLUGINS) { test = gApi.plugins().install((plugin + "".js""), input); assertThat(test).isNotNull(); info = test.get(); assertThat(info.id).isEqualTo(plugin); assertThat(info.disabled).isNull(); } assertPlugins(list().get(), com.google.gerrit.acceptance.api.plugin.PluginIT.PLUGINS); test = gApi.plugins().name(""plugin-a""); test.disable(); test = gApi.plugins().name(""plugin-a""); info = test.get(); assertThat(info.disabled).isTrue(); assertPlugins(list().get(), com.google.gerrit.acceptance.api.plugin.PluginIT.PLUGINS.subList(1, com.google.gerrit.acceptance.api.plugin.PluginIT.PLUGINS.size())); assertPlugins(list().all().get(), com.google.gerrit.acceptance.api.plugin.PluginIT.PLUGINS); test.enable(); test = gApi.plugins().name(""plugin-a""); info = test.get(); assertThat(info.disabled).isNull(); assertPlugins(list().get(), com.google.gerrit.acceptance.api.plugin.PluginIT.PLUGINS); }",58071e06acba334aaa282172fda83ecfc7dc95b4,2017-07-28 07:36:10,2
116250,gerrit-server_src_main_java_com_google_gerrit_server_plugins_ListPlugins.java,"public java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> display(@com.google.gerrit.common.Nullable java.io.PrintWriter stdout) { java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> output = new java.util.TreeMap<>(); java.util.List<com.google.gerrit.server.plugins.Plugin> plugins = com.google.common.collect.Lists.newArrayList(pluginLoader.getPlugins(all)); java.util.Collections.sort(plugins, new java.util.Comparator<com.google.gerrit.server.plugins.Plugin>() { @java.lang.Override public int compare(com.google.gerrit.server.plugins.Plugin a, com.google.gerrit.server.plugins.Plugin b) { return a.getName().compareTo(b.getName()); } }); if (!(format.isJson())) { stdout.format(""%-30s %-10s %-8s %s\n"", ""Name"", ""Version"", ""Status"", ""File""); stdout.print(""-------------------------------------------------------------------------------\n""); } for (com.google.gerrit.server.plugins.Plugin p : plugins) { com.google.gerrit.extensions.common.PluginInfo info = com.google.gerrit.server.plugins.ListPlugins.toPluginInfo(p); if (format.isJson()) { output.put(p.getName(), info); } else { stdout.format(""%-30s %-10s %-8s %s\n"", p.getName(), com.google.common.base.Strings.nullToEmpty(info.version), (p.isDisabled() ? ""DISABLED"" : ""ENABLED""), p.getSrcFile().getFileName()); } } if (stdout == null) { return output; } else if (format.isJson()) { format.newGson().toJson(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo>>() {}.getType(), stdout); stdout.print('\n'); } stdout.flush(); return null; }",4b7acbc4dc7e3b6c16900c4f38c4fb35f0623c21,"public java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> display(@com.google.gerrit.common.Nullable java.io.PrintWriter stdout) { java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> output = new java.util.TreeMap<>(); com.google.common.collect.FluentIterable<com.google.gerrit.server.plugins.Plugin> iterable = com.google.common.collect.FluentIterable.from(pluginLoader.getPlugins(all)); java.util.List<com.google.gerrit.server.plugins.Plugin> plugins = iterable.toSortedList(com.google.gerrit.server.plugins.ListPlugins.COMPARATOR); if (!(format.isJson())) { stdout.format(""%-30s %-10s %-8s %s\n"", ""Name"", ""Version"", ""Status"", ""File""); stdout.print(""-------------------------------------------------------------------------------\n""); } for (com.google.gerrit.server.plugins.Plugin p : plugins) { com.google.gerrit.extensions.common.PluginInfo info = com.google.gerrit.server.plugins.ListPlugins.toPluginInfo(p); if (format.isJson()) { output.put(p.getName(), info); } else { stdout.format(""%-30s %-10s %-8s %s\n"", p.getName(), com.google.common.base.Strings.nullToEmpty(info.version), (p.isDisabled() ? ""DISABLED"" : ""ENABLED""), p.getSrcFile().getFileName()); } } if (stdout == null) { return output; } else if (format.isJson()) { format.newGson().toJson(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo>>() {}.getType(), stdout); stdout.print('\n'); } stdout.flush(); return null; }",31a661d1d538b5b2e5b98be61c0725337d9861c8,"public java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> display(@com.google.gerrit.common.Nullable java.io.PrintWriter stdout) { java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> output = new java.util.TreeMap<>(); java.util.stream.Stream<com.google.gerrit.server.plugins.Plugin> s = com.google.common.collect.Streams.stream(pluginLoader.getPlugins(all)).sorted(java.util.Comparator.comparing(Plugin::getName)); if ((start) > 0) { s = s.skip(start); } if ((limit) > 0) { s = s.limit(limit); } java.util.List<com.google.gerrit.server.plugins.Plugin> plugins = s.collect(java.util.stream.Collectors.toList()); if (!(format.isJson())) { stdout.format(""%-30s %-10s %-8s %s\n"", ""Name"", ""Version"", ""Status"", ""File""); stdout.print(""-------------------------------------------------------------------------------\n""); } for (com.google.gerrit.server.plugins.Plugin p : plugins) { com.google.gerrit.extensions.common.PluginInfo info = com.google.gerrit.server.plugins.ListPlugins.toPluginInfo(p); if (format.isJson()) { output.put(p.getName(), info); } else { stdout.format(""%-30s %-10s %-8s %s\n"", p.getName(), com.google.common.base.Strings.nullToEmpty(info.version), (p.isDisabled() ? ""DISABLED"" : ""ENABLED""), p.getSrcFile().getFileName()); } } if (stdout == null) { return output; } else if (format.isJson()) { format.newGson().toJson(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo>>() {}.getType(), stdout); stdout.print('\n'); } stdout.flush(); return null; }",56068130f37830fd3e0a900faa71f32dc84dca0f,2017-07-28 14:07:40,5
116730,gerrit-server_src_main_java_com_google_gerrit_server_update_BatchUpdate.java,"public com.google.gerrit.server.update.BatchUpdate create(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.CurrentUser user, java.sql.Timestamp when) { if (migration.disableChangeReviewDb()) { if (migration.fuseUpdates()) { return fusedNoteDbBatchUpdateFactory.create(db, project, user, when); } return unfusedNoteDbBatchUpdateFactory.create(db, project, user, when); } return reviewDbBatchUpdateFactory.create(db, project, user, when); }",1fc050ca20a792813e12be07f34effb45fa646e5,"public com.google.gerrit.server.update.BatchUpdate create(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.CurrentUser user, java.sql.Timestamp when) { if (migration.disableChangeReviewDb()) { return fusedNoteDbBatchUpdateFactory.create(db, project, user, when); } return reviewDbBatchUpdateFactory.create(db, project, user, when); }",4d3fc3f85debf541f1772b5dd8ae92f141bd51a1,"public com.google.gerrit.server.update.BatchUpdate create(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.CurrentUser user, java.sql.Timestamp when) { if (migration.disableChangeReviewDb()) { return noteDbBatchUpdateFactory.create(db, project, user, when); } return reviewDbBatchUpdateFactory.create(db, project, user, when); }",0e996d55cde1b6a09965febf4bac8a6ddace2caf,2017-07-31 13:00:20,2
116853,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,"private void setChangeId(int id) { changeId = new com.google.gerrit.reviewdb.client.Change.Id(id); ins = changeInserterFactory.create(changeId, commit, refName).setTopic(magicBranch.topic).setPrivate(magicBranch.isPrivate).setWorkInProgress(magicBranch.workInProgress).setValidate(false); if (magicBranch.draft) { ins.setDraft(magicBranch.draft); } else if (magicBranch.merged) { ins.setStatus(Change.Status.MERGED); } cmd = new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commit, ins.getPatchSetId().toRefName()); if ((rp.getPushCertificate()) != null) { ins.setPushCertificate(rp.getPushCertificate().toTextWithSignature()); } }",ca03afe979f0ff5ff29b27a34b6619028d9bb7a9,"private void setChangeId(int id) { changeId = new com.google.gerrit.reviewdb.client.Change.Id(id); ins = changeInserterFactory.create(changeId, commit, refName).setTopic(magicBranch.topic).setPrivate(((receiveConfig.privateByDefault) || (magicBranch.isPrivate))).setWorkInProgress(magicBranch.workInProgress).setValidate(false); if (magicBranch.draft) { ins.setDraft(magicBranch.draft); } else if (magicBranch.merged) { ins.setStatus(Change.Status.MERGED); } cmd = new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commit, ins.getPatchSetId().toRefName()); if ((rp.getPushCertificate()) != null) { ins.setPushCertificate(rp.getPushCertificate().toTextWithSignature()); } }",64699cb912f82e8a9b2411aeb0a93c628815aa01,"private void setChangeId(int id) { changeId = new com.google.gerrit.reviewdb.client.Change.Id(id); ins = changeInserterFactory.create(changeId, commit, refName).setTopic(magicBranch.topic).setPrivate(((magicBranch.isPrivate) || ((receiveConfig.privateByDefault) && (!(magicBranch.removePrivate))))).setWorkInProgress(magicBranch.workInProgress).setValidate(false); if (magicBranch.draft) { ins.setDraft(magicBranch.draft); } else if (magicBranch.merged) { ins.setStatus(Change.Status.MERGED); } cmd = new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commit, ins.getPatchSetId().toRefName()); if ((rp.getPushCertificate()) != null) { ins.setPushCertificate(rp.getPushCertificate().toTextWithSignature()); } }",b0c5525aebd6858b96eecf9a7fed571170b280f0,2017-08-01 08:39:29,2
116853,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_PrivateByDefaultIT.java,,,@org.junit.Test public void pushWithPrivateByDefaultEnabled() throws java.lang.Exception { assume().that(isPrivateByDefault()).isTrue(); assertThat(createChange().getChange().change().isPrivate()).isEqualTo(true); },029d212721c990bdbe5ecd9cbc89f747368c7b12,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""change.privateByDefault"", value = ""true"") public void pushWithPrivateByDefaultEnabled() throws java.lang.Exception { assertThat(createChange().getChange().change().isPrivate()).isEqualTo(true); }",97d2692f453bf35f0df7dbd0ab2fc426f7596837,2017-08-01 08:39:29,2
116853,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_PrivateByDefaultIT.java,,,@com.google.gerrit.testutil.ConfigSuite.Config public static org.eclipse.jgit.lib.Config privateByDefaultEnabled() { return privateByDefaultEnabledConfig(); },ab0968a28f25096dac64f190c47a451abdf9bd46,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""change.privateByDefault"", value = ""true"") public void createChangeWithPrivateByDefaultEnabled() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), ""master"", ""empty change""); assertThat(gApi.changes().create(input).get().isPrivate).isEqualTo(true); }",5990c2e6e8fa6ca6d5d16c4cb8ae3678201f9195,2017-08-01 08:39:29,2
116853,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_PrivateByDefaultIT.java,,,"@org.junit.Test public void createChangeWithPrivateByDefaultDisabled() throws java.lang.Exception { assume().that(isPrivateByDefault()).isFalse(); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().create(new com.google.gerrit.extensions.common.ChangeInput(project.get(), ""master"", ""empty change"")).get(); assertThat(info.isPrivate).isNull(); }",36145395ef8a55fecd8da0a7741b0dee899c4f1b,"@org.junit.Test public void createChangeWithPrivateByDefaultDisabled() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().create(new com.google.gerrit.extensions.common.ChangeInput(project.get(), ""master"", ""empty change"")).get(); assertThat(info.isPrivate).isNull(); }",8ee051c1ecb59319dca432382e2f1e8afa76c0c4,2017-08-01 08:39:29,2
116853,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_PrivateByDefaultIT.java,,,"@org.junit.Test public void createChangeWithPrivateByDefaultEnabled() throws java.lang.Exception { assume().that(isPrivateByDefault()).isTrue(); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().create(new com.google.gerrit.extensions.common.ChangeInput(project.get(), ""master"", ""empty change"")).get(); assertThat(info.isPrivate).isEqualTo(true); }",cd5f271f1b59adeb847c41a498177a0bb46f4d39,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""change.privateByDefault"", value = ""true"") public void createChangeBypassPrivateByDefaultEnabled() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), ""master"", ""empty change""); input.isPrivate = false; assertThat(gApi.changes().create(input).get().isPrivate).isNull(); }",0a2c730cf1f49277314f03d75daeda16b889cc19,2017-08-01 08:39:29,2
116853,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_PrivateByDefaultIT.java,,,@org.junit.Test public void pushWithPrivateByDefaultDisabled() throws java.lang.Exception { assume().that(isPrivateByDefault()).isFalse(); assertThat(createChange().getChange().change().isPrivate()).isEqualTo(false); },b0c84534421157a21cc0dcd3a992a1415e8cd418,@org.junit.Test public void pushWithPrivateByDefaultDisabled() throws java.lang.Exception { assertThat(createChange().getChange().change().isPrivate()).isEqualTo(false); },2e81717728076c70c6bf77a4c2a782567ba2b427,2017-08-01 08:39:29,2
112159,gerrit-server_src_main_java_com_google_gerrit_server_ChangeFinder.java,"public java.util.List<com.google.gerrit.server.project.ChangeControl> find(java.lang.String id, com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { if (id.isEmpty()) { return java.util.Collections.emptyList(); } int z = id.lastIndexOf('~'); int y = id.lastIndexOf('~', (z - 1)); if ((y < 0) && (z > 0)) { java.lang.Integer n = com.google.common.primitives.Ints.tryParse(id.substring((z + 1))); if (n != null) { return fromProjectNumber(user, id.substring(0, z), n.intValue()); } } com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().noFields(); if ((y > 0) && (z > 0)) { java.util.Optional<com.google.gerrit.server.change.ChangeTriplet> triplet = com.google.gerrit.server.change.ChangeTriplet.parse(id, y, z); if (triplet.isPresent()) { com.google.gerrit.server.change.ChangeTriplet t = triplet.get(); return asChangeControls(query.byBranchKey(t.branch(), t.id()), user); } } java.lang.Integer n = com.google.common.primitives.Ints.tryParse(id, 10); if (n != null) { return asChangeControls(query.byLegacyChangeId(new com.google.gerrit.reviewdb.client.Change.Id(n)), user); } return asChangeControls(query.byKeyPrefix(id), user); }",d77fb9a382a679ac97a31e6f0da0c9b03b959b23,"public java.util.List<com.google.gerrit.server.project.ChangeControl> find(java.lang.String id, com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { if (id.isEmpty()) { return java.util.Collections.emptyList(); } int z = id.lastIndexOf('~'); int y = id.lastIndexOf('~', (z - 1)); if ((y < 0) && (z > 0)) { java.lang.Integer n = com.google.common.primitives.Ints.tryParse(id.substring((z + 1))); if (n != null) { return fromProjectNumber(user, id.substring(0, z), n.intValue()); } } if ((y < 0) && (z < 0)) { java.lang.Integer n = com.google.common.primitives.Ints.tryParse(id, 10); if (n != null) { return find(new com.google.gerrit.reviewdb.client.Change.Id(n), user); } } com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().noFields(); if ((y > 0) && (z > 0)) { java.util.Optional<com.google.gerrit.server.change.ChangeTriplet> triplet = com.google.gerrit.server.change.ChangeTriplet.parse(id, y, z); if (triplet.isPresent()) { com.google.gerrit.server.change.ChangeTriplet t = triplet.get(); return asChangeControls(query.byBranchKey(t.branch(), t.id()), user); } } return asChangeControls(query.byKeyPrefix(id), user); }",c2b243eb38f372a2dcec4150b6dfcf8e78223868,"public java.util.List<com.google.gerrit.server.project.ChangeControl> find(java.lang.String id, com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { if (id.isEmpty()) { return java.util.Collections.emptyList(); } int z = id.lastIndexOf('~'); int y = id.lastIndexOf('~', (z - 1)); if ((y < 0) && (z > 0)) { java.lang.Integer n = com.google.common.primitives.Ints.tryParse(id.substring((z + 1))); if (n != null) { return fromProjectNumber(user, id.substring(0, z), n.intValue()); } } if ((y < 0) && (z < 0)) { java.lang.Integer n = com.google.common.primitives.Ints.tryParse(id); if (n != null) { return find(new com.google.gerrit.reviewdb.client.Change.Id(n), user); } } com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().noFields(); if ((y > 0) && (z > 0)) { java.util.Optional<com.google.gerrit.server.change.ChangeTriplet> triplet = com.google.gerrit.server.change.ChangeTriplet.parse(id, y, z); if (triplet.isPresent()) { com.google.gerrit.server.change.ChangeTriplet t = triplet.get(); return asChangeControls(query.byBranchKey(t.branch(), t.id()), user); } } return asChangeControls(query.byKeyPrefix(id), user); }",943739cb571cc07cd5bd96447b97dc7eb07560ad,2017-08-01 12:15:34,4
117351,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectControl.java,"boolean isMergedIntoVisibleRef(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Collection<org.eclipse.jgit.lib.Ref> unfilteredRefs) throws java.io.IOException { com.google.gerrit.server.git.VisibleRefFilter filter = refFilter.create(state, repo); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> m = com.google.common.collect.Maps.newHashMapWithExpectedSize(unfilteredRefs.size()); for (org.eclipse.jgit.lib.Ref r : unfilteredRefs) { m.put(r.getName(), r); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = filter.filter(m, true); return (!(refs.isEmpty())) && (com.google.gerrit.server.change.IncludedInResolver.includedInOne(repo, rw, commit, refs.values())); }",805a6c12daa91b468c7be0e9a76776639986d5b8,"boolean isMergedIntoVisibleRef(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Collection<org.eclipse.jgit.lib.Ref> unfilteredRefs) throws java.io.IOException { com.google.gerrit.server.git.VisibleRefFilter filter = refFilter.create(state, repo); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> m = com.google.common.collect.Maps.newHashMapWithExpectedSize(unfilteredRefs.size()); for (org.eclipse.jgit.lib.Ref r : unfilteredRefs) { m.put(r.getName(), r); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = filter.filter(m, true); return (!(refs.isEmpty())) && (com.google.gerrit.server.change.IncludedInResolver.includedInAny(repo, rw, commit, refs.values())); }",e93c643526cdaf06c294159be9f2c5cdc136e460,"boolean isMergedIntoVisibleRef(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Collection<org.eclipse.jgit.lib.Ref> unfilteredRefs) throws java.io.IOException { com.google.gerrit.server.git.VisibleRefFilter filter = refFilter.create(state, repo); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> m = com.google.common.collect.Maps.newHashMapWithExpectedSize(unfilteredRefs.size()); for (org.eclipse.jgit.lib.Ref r : unfilteredRefs) { m.put(r.getName(), r); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = filter.filter(m, true); return com.google.gerrit.server.change.IncludedInResolver.includedInAny(repo, rw, commit, refs.values()); }",108c8a3c70a1a93f6753ab220ef049e91c3d9d57,2017-08-03 05:15:59,2
117710,src_main_java_com_googlesource_gerrit_plugins_rabbitmq_message_Publisher.java,public com.google.gerrit.common.EventListener getEventListener() { },f5d5f16443d533032330ebe1d8a7215319813221,public com.google.gerrit.common.EventListener getEventListener();,f844f126fb265f507f6a290320f1560888336f2b,com.google.gerrit.common.EventListener getEventListener();,14aa552053b087bf5a7e48b5dc983543d875537d,2017-08-03 12:44:15,2
115643,gerrit-server_src_main_java_com_google_gerrit_server_group_GroupsUpdate.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void removeGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> foundGroup = groups.get(db, groupUuid); if (!(foundGroup.isPresent())) { return; } com.google.gerrit.reviewdb.client.AccountGroup group = foundGroup.get(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> existingMembers = groups.getMembers(db, group.getId()).collect(toImmutableSet()); com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = accountIds.stream().distinct().filter(existingMembers::contains).map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(toImmutableList()); if ((currentUser) != null) { auditService.dispatchDeleteAccountsFromGroup(currentUser.getAccountId(), membersToRemove); } db.accountGroupMembers().delete(membersToRemove); for (com.google.gerrit.reviewdb.client.AccountGroupMember member : membersToRemove) { accountCache.evict(member.getAccountId()); } }",d57223a4d4d74864c744598d39f348ff1b3e9645,"public void removeGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> foundGroup = groups.get(db, groupUuid); if (!(foundGroup.isPresent())) { return; } com.google.gerrit.reviewdb.client.AccountGroup group = foundGroup.get(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Account.Id accountId : accountIds) { boolean isMember = groups.isMember(db, group, accountId); if (isMember) { com.google.gerrit.reviewdb.client.AccountGroupMember.Key key = new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId); membersToRemove.add(new com.google.gerrit.reviewdb.client.AccountGroupMember(key)); } } if (membersToRemove.isEmpty()) { return; } if ((currentUser) != null) { auditService.dispatchDeleteAccountsFromGroup(currentUser.getAccountId(), membersToRemove); } db.accountGroupMembers().delete(membersToRemove); for (com.google.gerrit.reviewdb.client.AccountGroupMember member : membersToRemove) { accountCache.evict(member.getAccountId()); } }",4d6411c2148abade3bf6d96265caa58298b800a1,2017-08-04 08:25:11,8
116713,gerrit-server_src_main_java_com_google_gerrit_server_account_CreateAccount.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.extensions.restapi.TopLevelResource rsrc, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.accounts.AccountInput input) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return apply((input != null ? input : new com.google.gerrit.extensions.api.accounts.AccountInput())); }",51498c829e39593e571c5c17c86ffffe1ed15787,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.extensions.restapi.TopLevelResource rsrc, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.accounts.AccountInput input) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return apply((input != null ? input : new com.google.gerrit.extensions.api.accounts.AccountInput())); }",68fb7670a108b132be83260f727f1c6d20333134,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.extensions.restapi.TopLevelResource rsrc, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.accounts.AccountInput input) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return apply((input != null ? input : new com.google.gerrit.extensions.api.accounts.AccountInput())); }",51498c829e39593e571c5c17c86ffffe1ed15787,2017-08-04 08:25:11,5
116092,gerrit-server_src_main_java_com_google_gerrit_server_group_Groups.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.stream.Stream<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getParentGroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID childGroupUuid) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> accountGroupByIds = db.accountGroupById().byIncludeUUID(childGroupUuid); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.Id> foundParentGroupIds = com.google.common.collect.Streams.stream(accountGroupByIds).map(AccountGroupById::getGroupId).collect(toImmutableSet()); com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> existingParentGroups = db.accountGroups().get(foundParentGroupIds); return com.google.common.collect.Streams.stream(existingParentGroups).map(AccountGroup::getGroupUUID); }",e49eade34349a39269a4ea76de8f65cc0e389304,"public java.util.stream.Stream<com.google.gerrit.reviewdb.client.AccountGroup.Id> getParentGroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> accountGroupByIds = db.accountGroupById().byIncludeUUID(includedGroupUuid); return com.google.common.collect.Streams.stream(accountGroupByIds).map(AccountGroupById::getGroupId); }",256896ad5f09a0d341a91648cfaa53c25cbe9f7d,2017-08-04 08:25:11,7
116091,gerrit-server_src_main_java_com_google_gerrit_server_group_IncludedGroupsCollection.java,"private boolean isMember(com.google.gerrit.reviewdb.client.AccountGroup parent, com.google.gerrit.common.data.GroupDescription.Basic member) throws com.google.gwtorm.server.OrmException { return (dbProvider.get().accountGroupById().get(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parent.getId(), member.getGroupUUID()))) != null; }",841cc6ac95f98961c34eacb84e7edc42c4da3e60,"private boolean isMember(com.google.gerrit.reviewdb.client.AccountGroup parent, com.google.gerrit.common.data.GroupDescription.Basic member) throws com.google.gwtorm.server.OrmException { return groups.isMember(dbProvider.get(), parent.getId(), member.getGroupUUID()); }",ca72bcf299a520631ae5aadfddfd1a85e2406581,"private boolean isMember(com.google.gerrit.reviewdb.client.AccountGroup parent, com.google.gerrit.common.data.GroupDescription.Basic member) throws com.google.gwtorm.server.OrmException { return groups.isIncluded(dbProvider.get(), parent.getId(), member.getGroupUUID()); }",6f4636dd413da2b8570d2c0525880bd02cf98db7,2017-08-04 08:25:11,7
116091,gerrit-server_src_main_java_com_google_gerrit_server_group_Groups.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean isMember(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentId, com.google.gerrit.reviewdb.client.AccountGroup.UUID childGroupUuid) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroupById.Key key = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentId, childGroupUuid); return (db.accountGroupById().get(key)) != null; }",3bc1c02e88b3687c78218728c6fd095cfda1246d,"public boolean isIncluded(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentId, com.google.gerrit.reviewdb.client.AccountGroup.UUID childGroupUuid) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroupById.Key key = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentId, childGroupUuid); return (db.accountGroupById().get(key)) != null; }",c0bca3989778ccc6620bf0ff5194fe17a3d096f1,2017-08-04 08:25:11,7
115636,gerrit-common_src_main_java_com_google_gerrit_common_data_GroupDetail.java,public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> getIncludes() { return includes; },10a1a93be283257a289c2f9590df2aff286dfba8,public com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getIncludes() { return includes; },88d79a8963a4959a62d94152fa08ea604e01f4a0,public java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getIncludes() { return includes; },08acddfbb347669eb41e680e0a493ec24470c2c9,2017-08-04 08:25:11,5
116713,gerrit-server_src_main_java_com_google_gerrit_server_group_PutOwner.java,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.PutOwner.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((resource.toAccountGroup()) == null) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); } else if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not group owner""); } if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.owner))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""owner is required""); } com.google.gerrit.common.data.GroupDescription.Basic owner = groupsCollection.parse(input.owner); java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> updatedGroup = groupsUpdateProvider.get().updateGroup(db.get(), resource.getGroupUUID(), ( group) -> group.setOwnerGroupUUID(owner.getGroupUUID())); if (!(updatedGroup.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return json.format(owner); }",e2e0d7690e74f97f5ede449b52a41c9e8f06aeea,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.PutOwner.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((resource.toAccountGroup()) == null) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); } else if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not group owner""); } if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.owner))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""owner is required""); } com.google.gerrit.common.data.GroupDescription.Basic owner = groupsCollection.parse(input.owner); com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = resource.getGroupUUID(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, ( group) -> group.setOwnerGroupUUID(owner.getGroupUUID())); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } return json.format(owner); }",0240892b26ba24e1b188ba7d9a87b090a718ae39,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.PutOwner.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.AccountGroup accountGroup = resource.toAccountGroup(); if (accountGroup == null) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); } else if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not group owner""); } if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.owner))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""owner is required""); } com.google.gerrit.common.data.GroupDescription.Basic owner = groupsCollection.parse(input.owner); if (!(accountGroup.getOwnerGroupUUID().equals(owner.getGroupUUID()))) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = resource.getGroupUUID(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, ( group) -> group.setOwnerGroupUUID(owner.getGroupUUID())); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } } return json.format(owner); }",9d701f968382510211231f9b57d869b7d6fdcc5b,2017-08-04 08:25:11,5
116713,gerrit-server_src_main_java_com_google_gerrit_server_group_PutDescription.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.PutDescription.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (input == null) { input = new com.google.gerrit.server.group.PutDescription.Input(); } if ((resource.toAccountGroup()) == null) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); } else if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not group owner""); } java.lang.String newDescription = com.google.common.base.Strings.emptyToNull(input.description); java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> updatedGroup = groupsUpdateProvider.get().updateGroup(db.get(), resource.getGroupUUID(), ( group) -> group.setDescription(newDescription)); if (!(updatedGroup.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return com.google.common.base.Strings.isNullOrEmpty(input.description) ? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(input.description); }",917f26614d2a791953f01a89aa3f3e374e435c27,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.PutDescription.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (input == null) { input = new com.google.gerrit.server.group.PutDescription.Input(); } if ((resource.toAccountGroup()) == null) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); } else if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not group owner""); } java.lang.String newDescription = com.google.common.base.Strings.emptyToNull(input.description); com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = resource.getGroupUUID(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, ( group) -> group.setDescription(newDescription)); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } return com.google.common.base.Strings.isNullOrEmpty(input.description) ? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(input.description); }",3e3032a3e8de97f5c5134128135869c85f0dd1ca,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.PutDescription.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (input == null) { input = new com.google.gerrit.server.group.PutDescription.Input(); } com.google.gerrit.reviewdb.client.AccountGroup accountGroup = resource.toAccountGroup(); if (accountGroup == null) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); } else if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not group owner""); } java.lang.String newDescription = com.google.common.base.Strings.emptyToNull(input.description); if (!(java.util.Objects.equals(accountGroup.getDescription(), newDescription))) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = resource.getGroupUUID(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, ( group) -> group.setDescription(newDescription)); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } } return com.google.common.base.Strings.isNullOrEmpty(input.description) ? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(input.description); }",0f6065cc15632d0ded107c1f95bf6f4543a68f53,2017-08-04 08:25:11,5
115636,gerrit-common_src_main_java_com_google_gerrit_common_data_GroupDetail.java,public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> getMembers() { return members; },240baee4bd7728b8d11cdd5f4c2e50010505177b,public com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> getMembers() { return members; },a1e29ca56dc0179f1097a63579b4d21098219b0e,public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> getMembers() { return members; },9471fb27d15a6f1cb3fa2d56955fc0c245a800be,2017-08-04 08:25:11,5
116711,gerrit-server_src_main_java_com_google_gerrit_server_group_Groups.java,"public java.util.stream.Stream<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getParentGroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID childGroupUuid) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> accountGroupByIds = db.accountGroupById().byIncludeUUID(childGroupUuid); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.Id> foundParentGroupIds = com.google.common.collect.Streams.stream(accountGroupByIds).map(AccountGroupById::getGroupId).collect(toImmutableSet()); com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> existingParentGroups = db.accountGroups().get(foundParentGroupIds); return com.google.common.collect.Streams.stream(existingParentGroups).map(AccountGroup::getGroupUUID); }",e49eade34349a39269a4ea76de8f65cc0e389304,"public java.util.stream.Stream<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getParentGroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> accountGroupByIds = db.accountGroupById().byIncludeUUID(includedGroupUuid); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.Id> foundParentGroupIds = com.google.common.collect.Streams.stream(accountGroupByIds).map(AccountGroupById::getGroupId).collect(toImmutableSet()); com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> existingParentGroups = db.accountGroups().get(foundParentGroupIds); return com.google.common.collect.Streams.stream(existingParentGroups).map(AccountGroup::getGroupUUID); }",9a44c501cc2a210d3db6e65d952b741c1e912672,"public java.util.stream.Stream<com.google.gerrit.reviewdb.client.AccountGroup.Id> getParentGroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> accountGroupByIds = db.accountGroupById().byIncludeUUID(includedGroupUuid); return com.google.common.collect.Streams.stream(accountGroupByIds).map(AccountGroupById::getGroupId); }",256896ad5f09a0d341a91648cfaa53c25cbe9f7d,2017-08-04 08:25:11,5
116092,gerrit-server_src_main_java_com_google_gerrit_server_account_GroupIncludeCacheImpl.java,@java.lang.Override public com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID> load(com.google.gerrit.reviewdb.client.AccountGroup.UUID key) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.Id> ids = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById agi : db.accountGroupById().byIncludeUUID(key)) { ids.add(agi.getGroupId()); } java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupArray = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroup g : db.accountGroups().get(ids)) { groupArray.add(g.getGroupUUID()); } return com.google.common.collect.ImmutableList.copyOf(groupArray); } },832293cdf594fd952f161f29f0ac009024c48038,"@java.lang.Override public com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID> load(com.google.gerrit.reviewdb.client.AccountGroup.UUID key) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { return groups.getParentGroups(db, key).collect(toImmutableList()); } }",5e2c96c298400221eaf787bcd21f11f016407eca,"@java.lang.Override public com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID> load(com.google.gerrit.reviewdb.client.AccountGroup.UUID key) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { return groups.getParentGroups(db, key).map(groupCache::get).map(AccountGroup::getGroupUUID).filter(java.util.Objects::nonNull).collect(toImmutableList()); } }",65466a3144ee6a104e77e57d10842db3008cb2e5,2017-08-04 08:25:11,7
115643,gerrit-server_src_main_java_com_google_gerrit_server_group_DeleteMembers.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.AccountGroup internalGroup = resource.toAccountGroup(); if (internalGroup == null) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); } input = com.google.gerrit.server.group.AddMembers.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); final java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.reviewdb.client.AccountGroupMember> members = getMembers(internalGroup.getId()); final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> toRemove = new java.util.ArrayList<>(); for (java.lang.String nameOrEmail : input.members) { com.google.gerrit.reviewdb.client.Account a = accounts.parse(nameOrEmail).getAccount(); if (!(control.canRemoveMember())) { throw new com.google.gerrit.extensions.restapi.AuthException((""Cannot delete member: "" + (a.getFullName()))); } final com.google.gerrit.reviewdb.client.AccountGroupMember m = members.remove(a.getId()); if (m != null) { toRemove.add(m); } } writeAudits(toRemove); db.get().accountGroupMembers().delete(toRemove); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : toRemove) { accountCache.evict(m.getAccountId()); } return com.google.gerrit.extensions.restapi.Response.none(); }",bf8690ae2f5198046d14e5d0874a68130c24be2b,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.AccountGroup internalGroup = resource.toAccountGroup(); if (internalGroup == null) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); } input = com.google.gerrit.server.group.AddMembers.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveMember())) { throw new com.google.gerrit.extensions.restapi.AuthException((""Cannot delete any members from group "" + (resource.getName()))); } com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Account.Id> membersToRemove = com.google.common.collect.ImmutableSet.builder(); for (java.lang.String nameOrEmail : input.members) { com.google.gerrit.reviewdb.client.Account a = accounts.parse(nameOrEmail).getAccount(); membersToRemove.add(a.getId()); } groupsUpdateProvider.get().removeGroupMembers(db.get(), internalGroup.getGroupUUID(), membersToRemove.build()); return com.google.gerrit.extensions.restapi.Response.none(); }",fdb3ba44b99fde6cc62330c61a22cadc1839ecba,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.AccountGroup internalGroup = resource.toAccountGroup(); if (internalGroup == null) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); } input = com.google.gerrit.server.group.AddMembers.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveMember())) { throw new com.google.gerrit.extensions.restapi.AuthException((""Cannot delete members from group "" + (internalGroup.getName()))); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> membersToRemove = new java.util.HashSet<>(); for (java.lang.String nameOrEmail : input.members) { com.google.gerrit.reviewdb.client.Account a = accounts.parse(nameOrEmail).getAccount(); membersToRemove.add(a.getId()); } groupsUpdateProvider.get().removeGroupMembers(db.get(), internalGroup.getGroupUUID(), membersToRemove); return com.google.gerrit.extensions.restapi.Response.none(); }",dfbd0c7f79c9e90211b2b170dadbbf70b8b23a7a,2017-08-04 08:25:11,8
116711,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_ProjectWatch.java,"private void deliverToMembers(com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List matching, com.google.gerrit.reviewdb.client.AccountGroup.UUID startUUID) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = args.db.get(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen = new java.util.HashSet<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> q = new java.util.ArrayList<>(); seen.add(startUUID); q.add(startUUID); while (!(q.isEmpty())) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = q.remove(((q.size()) - 1)); com.google.gerrit.common.data.GroupDescription.Basic group = args.groupBackend.get(uuid); if (!(com.google.common.base.Strings.isNullOrEmpty(group.getEmailAddress()))) { matching.emails.add(new com.google.gerrit.server.mail.Address(group.getEmailAddress())); continue; } com.google.gerrit.reviewdb.client.AccountGroup ig = com.google.gerrit.common.data.GroupDescriptions.toAccountGroup(group); if (ig == null) { continue; } args.groups.getMembers(db, ig.getId()).forEachOrdered(matching.accounts::add); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID m : args.groupIncludes.subgroupsOf(uuid)) { if (seen.add(m)) { q.add(m); } } } }",c7e8a824acf59f91f4742a44a0921017e8a18d7f,"private void deliverToMembers(com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List matching, com.google.gerrit.reviewdb.client.AccountGroup.UUID startUUID) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = args.db.get(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen = new java.util.HashSet<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> q = new java.util.ArrayList<>(); seen.add(startUUID); q.add(startUUID); while (!(q.isEmpty())) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = q.remove(((q.size()) - 1)); com.google.gerrit.common.data.GroupDescription.Basic group = args.groupBackend.get(uuid); if (!(com.google.common.base.Strings.isNullOrEmpty(group.getEmailAddress()))) { matching.emails.add(new com.google.gerrit.server.mail.Address(group.getEmailAddress())); continue; } com.google.gerrit.reviewdb.client.AccountGroup ig = com.google.gerrit.common.data.GroupDescriptions.toAccountGroup(group); if (ig == null) { continue; } args.groups.getMembers(db, ig.getGroupUUID()).forEachOrdered(matching.accounts::add); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID m : args.groupIncludes.subgroupsOf(uuid)) { if (seen.add(m)) { q.add(m); } } } }",edf7a0ccd9842295e927100232c5eaf6f5ceb8cc,"private void deliverToMembers(com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List matching, com.google.gerrit.reviewdb.client.AccountGroup.UUID startUUID) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = args.db.get(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen = new java.util.HashSet<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> q = new java.util.ArrayList<>(); seen.add(startUUID); q.add(startUUID); while (!(q.isEmpty())) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = q.remove(((q.size()) - 1)); com.google.gerrit.common.data.GroupDescription.Basic group = args.groupBackend.get(uuid); if (!(com.google.common.base.Strings.isNullOrEmpty(group.getEmailAddress()))) { matching.emails.add(new com.google.gerrit.server.mail.Address(group.getEmailAddress())); continue; } com.google.gerrit.reviewdb.client.AccountGroup ig = com.google.gerrit.common.data.GroupDescriptions.toAccountGroup(group); if (ig == null) { continue; } args.groups.getMembers(db, ig.getGroupUUID()).forEach(matching.accounts::add); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID m : args.groupIncludes.subgroupsOf(uuid)) { if (seen.add(m)) { q.add(m); } } } }",f69dfa252c20648437caacfda2c380cf8b39a52d,2017-08-04 08:25:11,5
115646,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_GroupsOnInit.java,,,"public com.google.gerrit.reviewdb.client.AccountGroup getGroup(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroupName accountGroupName = db.accountGroupNames().get(groupName); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = accountGroupName.getId(); return db.accountGroups().get(groupId); }",f22ba86918cb4ea44746df553273470995679b4c,"public com.google.gerrit.reviewdb.client.AccountGroup getExistingGroup(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroupName accountGroupName = db.accountGroupNames().get(groupName); if (accountGroupName == null) { throw new com.google.gerrit.common.errors.NoSuchGroupException(groupName.toString()); } com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = accountGroupName.getId(); com.google.gerrit.reviewdb.client.AccountGroup group = db.accountGroups().get(groupId); if (group == null) { throw new com.google.gerrit.common.errors.NoSuchGroupException(groupName.toString()); } return group; }",f04d25303141a17b5ba85841354a1a255daa761b,2017-08-04 08:25:11,8
115646,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_GroupsOnInit.java,,,"public void addGroupMember(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { db.accountGroupMembers().insert(com.google.common.collect.ImmutableList.of(new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)))); }",9b4e752ecc01e15aa5685ecd0a7ee814a310475b,"public void addGroupMember(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = getExistingGroup(db, groupUuid); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); if (com.google.gerrit.pgm.init.GroupsOnInit.isMember(db, groupId, accountId)) { return; } db.accountGroupMembers().insert(com.google.common.collect.ImmutableList.of(new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)))); }",96990ce30ed35853efa9b80db5333068049b25ec,2017-08-04 08:25:11,8
115637,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_ProjectWatch.java,"private void deliverToMembers(com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List matching, com.google.gerrit.reviewdb.client.AccountGroup.UUID startUUID) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = args.db.get(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen = new java.util.HashSet<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> q = new java.util.ArrayList<>(); seen.add(startUUID); q.add(startUUID); while (!(q.isEmpty())) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = q.remove(((q.size()) - 1)); com.google.gerrit.common.data.GroupDescription.Basic group = args.groupBackend.get(uuid); if (!(com.google.common.base.Strings.isNullOrEmpty(group.getEmailAddress()))) { matching.emails.add(new com.google.gerrit.server.mail.Address(group.getEmailAddress())); continue; } com.google.gerrit.reviewdb.client.AccountGroup ig = com.google.gerrit.common.data.GroupDescriptions.toAccountGroup(group); if (ig == null) { continue; } for (com.google.gerrit.reviewdb.client.AccountGroupMember m : db.accountGroupMembers().byGroup(ig.getId())) { matching.accounts.add(m.getAccountId()); } for (com.google.gerrit.reviewdb.client.AccountGroup.UUID m : args.groupIncludes.subgroupsOf(uuid)) { if (seen.add(m)) { q.add(m); } } } }",6d19a121db1e02da21975f312e982288ba327060,"private void deliverToMembers(com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List matching, com.google.gerrit.reviewdb.client.AccountGroup.UUID startUUID) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = args.db.get(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen = new java.util.HashSet<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> q = new java.util.ArrayList<>(); seen.add(startUUID); q.add(startUUID); while (!(q.isEmpty())) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = q.remove(((q.size()) - 1)); com.google.gerrit.common.data.GroupDescription.Basic group = args.groupBackend.get(uuid); if (!(com.google.common.base.Strings.isNullOrEmpty(group.getEmailAddress()))) { matching.emails.add(new com.google.gerrit.server.mail.Address(group.getEmailAddress())); continue; } com.google.gerrit.reviewdb.client.AccountGroup ig = com.google.gerrit.common.data.GroupDescriptions.toAccountGroup(group); if (ig == null) { continue; } args.groups.getMembers(db, ig.getId()).forEachOrdered(matching.accounts::add); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID m : args.groupIncludes.subgroupsOf(uuid)) { if (seen.add(m)) { q.add(m); } } } }",c7e8a824acf59f91f4742a44a0921017e8a18d7f,"private void deliverToMembers(com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List matching, com.google.gerrit.reviewdb.client.AccountGroup.UUID startUUID) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = args.db.get(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen = new java.util.HashSet<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> q = new java.util.ArrayList<>(); seen.add(startUUID); q.add(startUUID); while (!(q.isEmpty())) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = q.remove(((q.size()) - 1)); com.google.gerrit.common.data.GroupDescription.Basic group = args.groupBackend.get(uuid); if (!(com.google.common.base.Strings.isNullOrEmpty(group.getEmailAddress()))) { matching.emails.add(new com.google.gerrit.server.mail.Address(group.getEmailAddress())); continue; } com.google.gerrit.reviewdb.client.AccountGroup ig = com.google.gerrit.common.data.GroupDescriptions.toAccountGroup(group); if (ig == null) { continue; } args.groups.getMembers(db, ig.getId()).forEach(matching.accounts::add); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID m : args.groupIncludes.subgroupsOf(uuid)) { if (seen.add(m)) { q.add(m); } } } }",0b5c19cead7ef8d51e1a8b62d63e393ab5fa1146,2017-08-04 08:25:11,6
115639,gerrit-server_src_main_java_com_google_gerrit_server_group_GroupsUpdate.java,,,"private void addGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup group, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> existingMembers = groups.getMembers(db, group.getId()).collect(toImmutableSet()); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroupMember> newMembers = accountIds.stream().distinct().filter(( id) -> !(existingMembers.contains(id))).map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(toImmutableList()); if ((currentUser) != null) { auditService.dispatchAddAccountsToGroup(currentUser.getAccountId(), newMembers); } db.accountGroupMembers().insert(newMembers); for (com.google.gerrit.reviewdb.client.AccountGroupMember newMember : newMembers) { accountCache.evict(newMember.getAccountId()); } }",b2ca0284824cc53ae20ac03767518745d4e4904d,"private void addGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup group, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> newMembers = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Account.Id accountId : accountIds) { boolean isMember = groups.isMember(db, group, accountId); if (!isMember) { com.google.gerrit.reviewdb.client.AccountGroupMember.Key key = new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId); newMembers.add(new com.google.gerrit.reviewdb.client.AccountGroupMember(key)); } } if (newMembers.isEmpty()) { return; } if ((currentUser) != null) { auditService.dispatchAddAccountsToGroup(currentUser.getAccountId(), newMembers); } db.accountGroupMembers().insert(newMembers); for (com.google.gerrit.reviewdb.client.AccountGroupMember newMember : newMembers) { accountCache.evict(newMember.getAccountId()); } }",201fc31f43456e8fdaa8c8901f8e7ea4210d750b,2017-08-04 08:25:11,7
115644,gerrit-server_src_main_java_com_google_gerrit_server_group_GroupsUpdate.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void addGroup(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup group) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroupName gn = new com.google.gerrit.reviewdb.client.AccountGroupName(group); db.accountGroupNames().insert(java.util.Collections.singleton(gn)); db.accountGroups().insert(java.util.Collections.singleton(group)); }",ff32a4c820852d63c659b0fac8621b44b4910252,"public void addGroup(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup group) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroupName gn = new com.google.gerrit.reviewdb.client.AccountGroupName(group); db.accountGroupNames().insert(com.google.common.collect.ImmutableList.of(gn)); db.accountGroups().insert(com.google.common.collect.ImmutableList.of(group)); }",f4f60291e2dc230ef25a0f1d01f2f782bb7379a9,2017-08-04 08:25:11,8
112222,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeQueryBuilder.java,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> conflicts(java.lang.String value) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.query.change.ConflictsPredicate(args, value, parseChange(value)); }",8ebe84109f073b0b078182afa80edae073f595b7,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> conflicts(java.lang.String value) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.Change> changes = parseChange(value); if ((changes.size()) == 1) { return com.google.gerrit.server.query.change.ConflictsPredicate.create(args, value, changes.get(0)); } java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> or = new java.util.ArrayList(changes.size()); for (com.google.gerrit.reviewdb.client.Change c : changes) { or.add(com.google.gerrit.server.query.change.ConflictsPredicate.create(args, value, c)); } return com.google.gerrit.server.query.Predicate.or(or); }",04c72be92e6f97766945e8250967f2993828835a,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> conflicts(java.lang.String value) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.Change> changes = parseChange(value); java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> or = new java.util.ArrayList(changes.size()); for (com.google.gerrit.reviewdb.client.Change c : changes) { or.add(com.google.gerrit.server.query.change.ConflictsPredicate.create(args, value, c)); } return com.google.gerrit.server.query.Predicate.or(or); }",93804486745fa02f50250e93b9fce49f52a1960f,2017-08-07 16:44:15,7
118175,gerrit-server_src_main_java_com_google_gerrit_server_account_StarredChanges.java,"@java.lang.SuppressWarnings(""unchecked"") @java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""change %s not found"", id.get())); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.account.StarredChanges.log.error(""cannot resolve change"", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""internal server error""); } }",575b0a9eb88f3eaeed539433dd64663b46aa4005,"@java.lang.SuppressWarnings(""unchecked"") @java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""change %s not found"", id.get())); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.account.StarredChanges.log.error(""cannot resolve change"", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""internal server error""); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.account.StarredChanges.log.error(""cannot test permissions for change"", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""internal server error""); } }",239bcf26c42c12307e8332735d99f272bae54e75,"@java.lang.SuppressWarnings(""unchecked"") @java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""change %s not found"", id.get())); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.account.StarredChanges.log.error(""cannot resolve change"", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""internal server error""); } }",26f2fd909e1a550aacc33103c72e50e2560b7085,2017-08-07 16:57:40,2
118175,gerrit-sshd_src_main_java_com_google_gerrit_sshd_ChangeArgumentParser.java,"public void addChange(java.lang.String id, java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.change.ChangeResource> changes, com.google.gerrit.server.project.ProjectControl projectControl, boolean useIndex) throws com.google.gerrit.sshd.BaseCommand.UnloggedFailure, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> matched = (useIndex) ? changeFinder.find(id, currentUser) : changeFromNotesFactory(id, currentUser); java.util.List<com.google.gerrit.server.project.ChangeControl> toAdd = new java.util.ArrayList(changes.size()); boolean canMaintainServer; try { permissionBackend.user(currentUser).check(GlobalPermission.MAINTAIN_SERVER); canMaintainServer = true; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { canMaintainServer = false; } for (com.google.gerrit.server.project.ChangeControl ctl : matched) { if (((!(changes.containsKey(ctl.getId()))) && (inProject(projectControl, ctl.getProject()))) && (canMaintainServer || (ctl.isVisible(db)))) { toAdd.add(ctl); } } if (toAdd.isEmpty()) { throw new com.google.gerrit.sshd.BaseCommand.UnloggedFailure(1, ((""\"""" + id) + ""\"" no such change"")); } else if ((toAdd.size()) > 1) { throw new com.google.gerrit.sshd.BaseCommand.UnloggedFailure(1, ((""\"""" + id) + ""\"" matches multiple changes"")); } com.google.gerrit.server.project.ChangeControl ctl = toAdd.get(0); changes.put(ctl.getId(), changesCollection.parse(ctl)); }",67d85df5851ec95a8908f5acbbd808fa27b6f1eb,"public void addChange(java.lang.String id, java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.change.ChangeResource> changes, com.google.gerrit.server.project.ProjectControl projectControl, boolean useIndex) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.sshd.BaseCommand.UnloggedFailure, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> matched = (useIndex) ? changeFinder.find(id, currentUser) : changeFromNotesFactory(id, currentUser); java.util.List<com.google.gerrit.server.project.ChangeControl> toAdd = new java.util.ArrayList(changes.size()); boolean canMaintainServer; try { permissionBackend.user(currentUser).check(GlobalPermission.MAINTAIN_SERVER); canMaintainServer = true; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { canMaintainServer = false; } for (com.google.gerrit.server.project.ChangeControl ctl : matched) { if (((!(changes.containsKey(ctl.getId()))) && (inProject(projectControl, ctl.getProject()))) && (canMaintainServer || (permissionBackend.user(currentUser).change(ctl.getNotes()).test(ChangePermission.READ)))) { toAdd.add(ctl); } } if (toAdd.isEmpty()) { throw new com.google.gerrit.sshd.BaseCommand.UnloggedFailure(1, ((""\"""" + id) + ""\"" no such change"")); } else if ((toAdd.size()) > 1) { throw new com.google.gerrit.sshd.BaseCommand.UnloggedFailure(1, ((""\"""" + id) + ""\"" matches multiple changes"")); } com.google.gerrit.server.project.ChangeControl ctl = toAdd.get(0); changes.put(ctl.getId(), changesCollection.parse(ctl)); }",7d40dac92cd32c9838cf695ea3ff1c0352a3c412,"public void addChange(java.lang.String id, java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.change.ChangeResource> changes, com.google.gerrit.server.project.ProjectControl projectControl, boolean useIndex) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.sshd.BaseCommand.UnloggedFailure, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> matched = (useIndex) ? changeFinder.find(id, currentUser) : changeFromNotesFactory(id, currentUser); java.util.List<com.google.gerrit.server.project.ChangeControl> toAdd = new java.util.ArrayList(changes.size()); boolean canMaintainServer; try { permissionBackend.user(currentUser).check(GlobalPermission.MAINTAIN_SERVER); canMaintainServer = true; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { canMaintainServer = false; } for (com.google.gerrit.server.project.ChangeControl ctl : matched) { if (((!(changes.containsKey(ctl.getId()))) && (inProject(projectControl, ctl.getProject()))) && (canMaintainServer || (permissionBackend.user(currentUser).change(ctl.getNotes()).database(db).test(ChangePermission.READ)))) { toAdd.add(ctl); } } if (toAdd.isEmpty()) { throw new com.google.gerrit.sshd.BaseCommand.UnloggedFailure(1, ((""\"""" + id) + ""\"" no such change"")); } else if ((toAdd.size()) > 1) { throw new com.google.gerrit.sshd.BaseCommand.UnloggedFailure(1, ((""\"""" + id) + ""\"" matches multiple changes"")); } com.google.gerrit.server.project.ChangeControl ctl = toAdd.get(0); changes.put(ctl.getId(), changesCollection.parse(ctl)); }",d95c1e81226249858ababaf92fad4287f317c65f,2017-08-07 16:57:40,2
118175,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeIsVisibleToPredicate.java,"@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (cd.fastIsVisibleTo(user)) { return true; } try { com.google.gerrit.reviewdb.client.Change c = cd.change(); if (c == null) { return false; } com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.createFromIndexedChange(c); com.google.gerrit.server.project.ChangeControl cc = changeControl.controlFor(notes, user); if (cc.isVisible(db.get(), cd)) { cd.cacheVisibleTo(cc); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { } return false; }",4221e3a9650ef484d7feafaa8b09a8b19e32a116,"@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (cd.fastIsVisibleTo(user)) { return true; } com.google.gerrit.reviewdb.client.Change change; try { change = cd.change(); if (change == null) { return false; } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return false; } com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.createFromIndexedChange(change); com.google.gerrit.server.project.ChangeControl cc = changeControl.controlFor(notes, user); boolean visible; try { visible = permissionBackend.user(user).indexedChange(cd, notes).database(db).test(ChangePermission.READ); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { for (java.lang.Throwable t : com.google.common.base.Throwables.getCausalChain(e)) { if (t instanceof com.google.gwtorm.server.OrmException) { throw ((com.google.gwtorm.server.OrmException) (t)); } } throw new com.google.gwtorm.server.OrmException(""unable to check permissions"", e); } if (visible) { cd.cacheVisibleTo(cc); return true; } return false; }",83f5376b3c5ce9cb1363c97506b1f352b195d35a,"@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (cd.fastIsVisibleTo(user)) { return true; } com.google.gerrit.reviewdb.client.Change change; try { change = cd.change(); if (change == null) { return false; } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return false; } com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.createFromIndexedChange(change); com.google.gerrit.server.project.ChangeControl cc = changeControl.controlFor(notes, user); boolean visible; try { visible = permissionBackend.user(user).indexedChange(cd, notes).database(db).test(ChangePermission.READ); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gwtorm.server.OrmException(""unable to check permissions"", e); } if (visible) { cd.cacheVisibleTo(cc); return true; } return false; }",69d363704a9bb6f0bf33d70c74843faa8b3068ad,2017-08-07 16:57:40,2
105201,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,"private boolean canCreateCommit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { if (canUpdate()) { return true; } else if (isMergedIntoBranchOrTag(repo, commit)) { return true; } return false; }",a5594c97b25048157ed27e71f2076626eb339539,"private boolean canCreateCommit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { if (canUpdate()) { return true; } else if (projectControl.isReachableFromHeadsOrTags(repo, commit)) { return true; } return false; }",8fbf2c053dba7b96717ac72ca200e1c23f628d70,"@com.google.gerrit.common.Nullable private java.lang.String canCreateCommit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit, java.lang.String userId) { if (canUpdate()) { return null; } else if (projectControl.isReachableFromHeadsOrTags(repo, commit)) { return null; } return ((userId + "" lacks permission "") + (com.google.gerrit.common.data.Permission.PUSH)) + "" for creating new commit object""; }",b0173372bf4597e5200ebb1a2312692cdeb6c3e7,2017-08-07 16:57:40,8
105201,gerrit-server_src_main_java_com_google_gerrit_server_project_CommitsCollection.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean isReachableFrom(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { refs = refFilter.create(state, repo).filter(refs, true); return (!(refs.isEmpty())) && (com.google.gerrit.server.change.IncludedInResolver.includedInOne(repo, rw, commit, refs.values())); } catch (java.io.IOException e) { com.google.gerrit.server.project.CommitsCollection.log.error(java.lang.String.format(""Cannot verify permissions to commit object %s in repository %s"", commit.name(), state.getProject().getNameKey()), e); return false; } }",252e3eb8ba020316cb47909c020a8fa16ff94e37,"public boolean isReachableFrom(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { refs = refFilter.create(state, repo).filter(refs, true); return com.google.gerrit.server.change.IncludedInResolver.includedInAny(repo, rw, commit, refs.values()); } catch (java.io.IOException e) { com.google.gerrit.server.project.CommitsCollection.log.error(java.lang.String.format(""Cannot verify permissions to commit object %s in repository %s"", commit.name(), state.getProject().getNameKey()), e); return false; } }",d7c2cafb3e51b355fac8174d3c8200b610870f89,2017-08-07 16:57:40,8
118175,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangesCollection.java,"@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeFinder.find(id.encoded(), user.get()); if (ctls.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((ctls.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.project.ChangeControl ctl = ctls.get(0); if (!(ctl.isVisible(db.get()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(ctl); }",1570bd02dba77a53998e08871a036d1b50bed8f3,"@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeFinder.find(id.encoded(), user.get()); if (ctls.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((ctls.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.project.ChangeControl ctl = ctls.get(0); if (!(permissionBackend.user(user).change(ctl.getNotes()).database(db).test(ChangePermission.READ))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(ctl); }",491d42534fa301b4e78ccb724ecec5141eba6d85,"@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeFinder.find(id.encoded(), user.get()); if (ctls.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((ctls.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.project.ChangeControl ctl = ctls.get(0); if (!(canRead(ctl))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(ctl); }",eef5278a191bf2a9378b35dfe88c0275c1ab4972,2017-08-07 16:57:40,2
105201,gerrit-server_src_main_java_com_google_gerrit_server_project_CommitsCollection.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getProject().getNameKey(); try { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(user).database(db); java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().byProjectCommit(project, commit); if (!(perm.filterChangeData(ChangePermission.READ, changes).isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.project.CommitsCollection.log.error((((""Cannot look up change for commit "" + (commit.name())) + "" in "") + project), e); } return isReachableFrom(state, repo, commit, repo.getAllRefs()); }",af71d3c2f73762130951acc3ceb1e8aad99c62cf,"public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getProject().getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error((((""Cannot look up change for commit "" + (commit.name())) + "" in "") + project), e); } return isReachableFrom(state, repo, commit, repo.getAllRefs()); }",c8dda9dee25c4c3b1991ebb970860b7d106b9137,2017-08-07 16:57:40,8
118175,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangesCollection.java,"public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeFinder.find(id, user.get()); if (ctls.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } else if ((ctls.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.project.ChangeControl ctl = ctls.get(0); if (!(ctl.isVisible(db.get()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } return changeResourceFactory.create(ctl); }",9435969768739a57c8a7575fcc4909bb15860021,"public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeFinder.find(id, user.get()); if (ctls.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } else if ((ctls.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.project.ChangeControl ctl = ctls.get(0); if (!(permissionBackend.user(user).change(ctl.getNotes()).database(db).test(ChangePermission.READ))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } return changeResourceFactory.create(ctl); }",1e811fef52de1fccec74a6270e17a77a2c681500,"public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeFinder.find(id, user.get()); if (ctls.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } else if ((ctls.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.project.ChangeControl ctl = ctls.get(0); if (!(canRead(ctl))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } return changeResourceFactory.create(ctl); }",f83dab6c5f04c8f41193762273a14ca5c7cc3e1a,2017-08-07 16:57:40,2
108573,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountManager.java,"public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.externalids.ExternalId extId = findExternalId(who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (who.getExternalIdKey().get())) + ""' in use by another account"")); } externalIdsUpdateFactory.create().delete(extId); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = accounts.get(db, from); if (((a.getPreferredEmail()) != null) && (a.getPreferredEmail().equals(who.getEmailAddress()))) { a.setPreferredEmail(null); accountsUpdateFactory.create().update(db, a); } byEmailCache.evict(who.getEmailAddress()); byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (who.getExternalIdKey().get())) + ""' not found"")); } return new com.google.gerrit.server.account.AuthResult(from, who.getExternalIdKey(), false); } }",35f4c040eabe8c3ab735579163795a3631b37063,"public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.externalids.ExternalId extId = findExternalId(who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (who.getExternalIdKey().get())) + ""' in use by another account"")); } externalIdsUpdateFactory.create().delete(extId); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = accounts.get(db, from); if (((a.getPreferredEmail()) != null) && (a.getPreferredEmail().equals(who.getEmailAddress()))) { a.setPreferredEmail(null); accountsUpdateFactory.create().update(db, a); } byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (who.getExternalIdKey().get())) + ""' not found"")); } return new com.google.gerrit.server.account.AuthResult(from, who.getExternalIdKey(), false); } }",35bba344da79e4099278ae0ae233fafecf9d2ce6,"public void unlink(com.google.gerrit.reviewdb.client.Account.Id from, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (extIdKeys.isEmpty()) { return; } try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { java.util.List<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.ArrayList(extIdKeys.size()); for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(extIdKey); if (extId != null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (extIdKey.get())) + ""' in use by another account"")); } extIds.add(extId); } else { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (extIdKey.get())) + ""' not found"")); } } externalIdsUpdateFactory.create().delete(extIds); if (extIds.stream().anyMatch(( e) -> (e.email()) != null)) { accountsUpdateFactory.create().update(db, from, ( a) -> { if ((a.getPreferredEmail()) != null) { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if (a.getPreferredEmail().equals(extId.email())) { a.setPreferredEmail(null); break; } } } }); } } }",73aa37f08216afe8b01783a24dc96081067337e0,2017-08-08 13:55:17,13
108573,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,"@org.junit.Test public void lookUpFromCacheByEmail() throws java.lang.Exception { assertEmail(byEmailCache.get(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(ExternalId.Key.parse(""foo:bar""), admin.id, email)); accountCache.evict(admin.id); assertEmail(byEmailCache.get(email), admin); assertThat(byEmailCache.get(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(byEmailCache.get(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get(""non-existing@example.com"")).isEmpty(); }",1ac33dd29f9400cbf834437fda5d0ab3f81f2d06,"@org.junit.Test public void lookUpByEmail() throws java.lang.Exception { assertEmail(accounts.byEmail(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(ExternalId.Key.parse(""foo:bar""), admin.id, email)); accountCache.evict(admin.id); assertEmail(accounts.byEmail(email), admin); assertThat(accounts.byEmail(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(accounts.byEmail(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(accounts.byEmail(""non-existing@example.com"")).isEmpty(); }",a02ec7996e8a22dd00ae349a3f034b6cce61d7f0,"@org.junit.Test public void lookUpByEmail() throws java.lang.Exception { assertEmail(emails.getAccountFor(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(ExternalId.Key.parse(""foo:bar""), admin.id, email)); assertEmail(emails.getAccountFor(email), admin); assertThat(emails.getAccountFor(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(emails.getAccountFor(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(emails.getAccountFor(""non-existing@example.com"")).isEmpty(); com.google.common.collect.ImmutableSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id> byEmails = emails.getAccountsFor(admin.email, user.email); assertEmail(byEmails.get(admin.email), admin); assertEmail(byEmails.get(user.email), user); }",c4309f0f1ef788c12b576fd6a61ddc730fbe261c,2017-08-08 13:55:17,13
108573,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountManager.java,"public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.externalids.ExternalId extId = findExternalId(who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException(""Identity in use by another account""); } update(db, who, extId); } else { externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = accounts.get(db, to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); accountsUpdateFactory.create().update(db, a); } } if ((who.getEmailAddress()) != null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); } }",3a1720ad1f43c9f662299ccae9ab4b0d2959e4e6,"public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.externalids.ExternalId extId = findExternalId(who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException(""Identity in use by another account""); } update(db, who, extId); } else { externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = accounts.get(db, to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); accountsUpdateFactory.create().update(db, a); } } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); } }",14022f0943c99fa77c334c6d4116b2f7d6ebff66,"public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException(""Identity in use by another account""); } update(db, who, extId); } else { externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress()) != null) { accountsUpdateFactory.create().update(db, to, ( a) -> { if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); } }); } } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); } }",e849bb4e55eb8a840a4b8a7115139b3459ba1a0f,2017-08-08 13:55:17,13
109601,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,"@org.junit.Test public void lookUpFromCacheByEmail() throws java.lang.Exception { assertEmail(byEmailCache.get(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(ExternalId.Key.parse(""foo:bar""), admin.id, email)); assertEmail(byEmailCache.get(email), admin); assertThat(byEmailCache.get(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(byEmailCache.get(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get(""non-existing@example.com"")).isEmpty(); }",5fd524f275a883956431d248d39d432bd9f7b9bf,"@org.junit.Test public void lookUpByEmail() throws java.lang.Exception { assertEmail(accounts.byEmail(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(ExternalId.Key.parse(""foo:bar""), admin.id, email)); assertEmail(accounts.byEmail(email), admin); assertThat(accounts.byEmail(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(accounts.byEmail(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(accounts.byEmail(""non-existing@example.com"")).isEmpty(); }",4ed5a1a994a74e86b45415fa035bad16dc9cf186,"@org.junit.Test public void lookUpByEmail() throws java.lang.Exception { assertEmail(emails.getAccountFor(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(ExternalId.Key.parse(""foo:bar""), admin.id, email)); assertEmail(emails.getAccountFor(email), admin); assertThat(emails.getAccountFor(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(emails.getAccountFor(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(emails.getAccountFor(""non-existing@example.com"")).isEmpty(); com.google.common.collect.ImmutableSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id> byEmails = emails.getAccountsFor(admin.email, user.email); assertEmail(byEmails.get(admin.email), admin); assertEmail(byEmails.get(user.email), user); }",c4309f0f1ef788c12b576fd6a61ddc730fbe261c,2017-08-08 13:55:17,9
117873,gerrit-server_src_main_java_com_google_gerrit_server_git_receive_ReceiveCommitsAdvertiseRefsHook.java,"@java.lang.Override public void advertiseRefs(org.eclipse.jgit.transport.BaseReceivePack rp) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> oldRefs = rp.getAdvertisedRefs(); if (oldRefs == null) { try { oldRefs = rp.getRepository().getRefDatabase().getRefs(com.google.gerrit.server.git.receive.ALL); } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException e) { throw e; } catch (java.io.IOException e) { org.eclipse.jgit.transport.ServiceMayNotContinueException ex = new org.eclipse.jgit.transport.ServiceMayNotContinueException(); ex.initCause(e); throw ex; } } com.google.gerrit.server.git.receive.ReceiveCommitsAdvertiseRefsHook.Result r = advertiseRefs(oldRefs); rp.setAdvertisedRefs(r.allRefs(), r.additionalHaves()); }",4326dd75a4f63ad19d09a2994448661b8ea3327f,"@java.lang.Override public void advertiseRefs(org.eclipse.jgit.transport.BaseReceivePack rp) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> oldRefs = rp.getAdvertisedRefs(); checkState((oldRefs != null), ""expected refs to previously be advertised; %s assumes it is not the first %s in the chain"", getClass().getSimpleName(), org.eclipse.jgit.transport.AdvertiseRefsHook.class.getSimpleName()); com.google.gerrit.server.git.receive.ReceiveCommitsAdvertiseRefsHook.Result r = advertiseRefs(oldRefs); rp.setAdvertisedRefs(r.allRefs(), r.additionalHaves()); }",1b3ba3f16600ca8dddee35c369a8c6a6b61c9a7b,"@java.lang.Override public void advertiseRefs(org.eclipse.jgit.transport.BaseReceivePack rp) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { com.google.gerrit.server.git.receive.ReceiveCommitsAdvertiseRefsHook.Result r = advertiseRefs(com.google.gerrit.server.git.receive.HookUtil.ensureAllRefsAdvertised(rp)); rp.setAdvertisedRefs(r.allRefs(), r.additionalHaves()); }",dbda7e51544881e3ebf761d20271df7afab661d5,2017-08-08 15:03:52,6
112216,gitiles-servlet_src_main_java_com_google_gitiles_doc_DocServlet.java,"private void showDoc(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, com.google.gitiles.GitilesView view, com.google.gitiles.doc.MarkdownConfig cfg, com.google.gitiles.doc.MarkdownToHtml.Builder fmt, com.google.gitiles.doc.DocServlet.MarkdownFile navFile, com.google.gitiles.doc.DocServlet.MarkdownFile srcFile) throws java.io.IOException { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); data.putAll(buildNavbar(cfg, fmt, navFile)); org.commonmark.node.Node doc = com.google.gitiles.doc.GitilesMarkdown.parse(cfg, srcFile.consumeContent()); data.put(""pageTitle"", com.google.gitiles.doc.DocServlet.pageTitle(doc, srcFile)); if ((view.getType()) != (GitilesView.Type.ROOTED_DOC)) { data.put(""sourceUrl"", com.google.gitiles.GitilesView.show().copyFrom(view).toUrl()); data.put(""logUrl"", com.google.gitiles.GitilesView.log().copyFrom(view).toUrl()); data.put(""blameUrl"", com.google.gitiles.GitilesView.blame().copyFrom(view).toUrl()); } if ((cfg.analyticsId) != null) { data.put(""analyticsId"", cfg.analyticsId); } try (java.io.OutputStream out = startRenderCompressedStreamingHtml(req, res, com.google.gitiles.doc.DocServlet.SOY_TEMPLATE, data)) { java.io.Writer w = newWriter(out, res); fmt.setFilePath(srcFile.path).build().renderToHtml(new com.google.gitiles.doc.html.StreamHtmlBuilder(w), doc); w.flush(); } catch (com.google.gitiles.doc.RuntimeIOException e) { com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), java.io.IOException.class); throw e; } }",8c21fc50d512647a6e56a18e976bd93c08508464,"private void showDoc(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, com.google.gitiles.GitilesView view, com.google.gitiles.doc.MarkdownConfig cfg, com.google.gitiles.doc.MarkdownToHtml.Builder fmt, com.google.gitiles.doc.DocServlet.MarkdownFile navFile, com.google.gitiles.doc.DocServlet.MarkdownFile srcFile) throws java.io.IOException { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); data.putAll(buildNavbar(cfg, fmt, navFile)); org.commonmark.node.Node doc = com.google.gitiles.doc.GitilesMarkdown.parse(cfg, srcFile.consumeContent()); data.put(""pageTitle"", com.google.gitiles.doc.DocServlet.pageTitle(doc, srcFile)); if ((view.getType()) != (GitilesView.Type.ROOTED_DOC)) { data.put(""sourceUrl"", com.google.gitiles.GitilesView.show().copyFrom(view).toUrl()); data.put(""logUrl"", com.google.gitiles.GitilesView.log().copyFrom(view).toUrl()); data.put(""blameUrl"", com.google.gitiles.GitilesView.blame().copyFrom(view).toUrl()); } if ((cfg.analyticsId) != null) { data.put(""analyticsId"", cfg.analyticsId); } fmt.setFilePath(srcFile.path); try (java.io.OutputStream out = startRenderCompressedStreamingHtml(req, res, com.google.gitiles.doc.DocServlet.SOY_TEMPLATE, data)) { java.io.Writer w = newWriter(out, res); createMarkdownToHtml(fmt).renderToHtml(new com.google.gitiles.doc.html.StreamHtmlBuilder(w), doc); w.flush(); } catch (com.google.gitiles.doc.RuntimeIOException e) { com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), java.io.IOException.class); throw e; } }",f6551d5706a9b02896f2d412c73fd78c43ce6223,"private void showDoc(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, com.google.gitiles.GitilesView view, com.google.gitiles.doc.MarkdownToHtml.Builder fmt, com.google.gitiles.doc.Navbar navbar, com.google.gitiles.doc.DocServlet.MarkdownFile srcFile) throws java.io.IOException { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); data.putAll(navbar.toSoyData()); com.google.gitiles.doc.MarkdownConfig cfg = navbar.getConfig(); org.commonmark.node.Node doc = com.google.gitiles.doc.GitilesMarkdown.parse(cfg, srcFile.consumeContent()); data.put(""pageTitle"", com.google.gitiles.doc.DocServlet.pageTitle(doc, srcFile)); if ((view.getType()) != (GitilesView.Type.ROOTED_DOC)) { data.put(""sourceUrl"", com.google.gitiles.GitilesView.show().copyFrom(view).toUrl()); data.put(""logUrl"", com.google.gitiles.GitilesView.log().copyFrom(view).toUrl()); data.put(""blameUrl"", com.google.gitiles.GitilesView.blame().copyFrom(view).toUrl()); } if ((cfg.analyticsId) != null) { data.put(""analyticsId"", cfg.analyticsId); } try (java.io.OutputStream out = startRenderCompressedStreamingHtml(req, res, com.google.gitiles.doc.DocServlet.SOY_TEMPLATE, data)) { java.io.Writer w = newWriter(out, res); fmt.setConfig(cfg).setFilePath(srcFile.path).build().renderToHtml(new com.google.gitiles.doc.html.StreamHtmlBuilder(w), doc); w.flush(); } catch (com.google.gitiles.doc.RuntimeIOException e) { com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), java.io.IOException.class); throw e; } }",8947fc6d2bc075ed482f7b5b43cdfe009ae2cb7a,2017-08-08 15:07:21,7
115850,src_main_java_com_googlesource_gerrit_plugins_supermanifest_repo_RepoUpdater.java,,,"@java.lang.Override public void update(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader, com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c, java.lang.String srcRef) throws java.lang.Exception { org.eclipse.jgit.lib.Repository destRepo = reader.openRepository(c.getDestRepoKey().toString()); org.eclipse.jgit.lib.Repository srcRepo = reader.openRepository(c.getSrcRepoKey().toString()); org.eclipse.jgit.gitrepo.RepoCommand cmd = new org.eclipse.jgit.gitrepo.RepoCommand(destRepo); if (c.getDestBranch().equals(""*"")) { cmd.setTargetBranch(srcRef.substring(com.googlesource.gerrit.plugins.supermanifest.repo.REFS_HEADS.length())); } else { cmd.setTargetBranch(c.getDestBranch()); } java.io.InputStream manifestStream = new java.io.ByteArrayInputStream(com.googlesource.gerrit.plugins.supermanifest.Utils.readBlob(srcRepo, ((srcRef + "":"") + (c.getXmlPath())))); cmd.setAuthor(serverIdent).setRecordRemoteBranch(true).setRecordSubmoduleLabels(c.isRecordSubmoduleLabels()).setInputStream(manifestStream).setRecommendShallow(true).setRemoteReader(reader).setTargetURI(c.getDestRepoKey().toString()).setURI(c.getBaseUri().toString()); cmd.setIncludedFileReader(new com.googlesource.gerrit.plugins.supermanifest.repo.RepoUpdater.GerritIncludeReader(srcRepo, srcRef)); cmd.call(); }",c93b5bc32cabeddd736784d558d4598eb2b5857c,"@java.lang.Override public void update(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader, com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c, java.lang.String srcRef) throws java.lang.Exception { org.eclipse.jgit.lib.Repository destRepo = reader.openRepository(c.getDestRepoKey().toString()); org.eclipse.jgit.lib.Repository srcRepo = reader.openRepository(c.getSrcRepoKey().toString()); org.eclipse.jgit.gitrepo.RepoCommand cmd = new org.eclipse.jgit.gitrepo.RepoCommand(destRepo); if (c.getDestBranch().equals(""*"")) { cmd.setTargetBranch(srcRef.substring(com.googlesource.gerrit.plugins.supermanifest.REFS_HEADS.length())); } else { cmd.setTargetBranch(c.getDestBranch()); } java.io.InputStream manifestStream = new java.io.ByteArrayInputStream(com.googlesource.gerrit.plugins.supermanifest.Utils.readBlob(srcRepo, ((srcRef + "":"") + (c.getXmlPath())))); cmd.setAuthor(serverIdent).setRecordRemoteBranch(true).setRecordSubmoduleLabels(c.isRecordSubmoduleLabels()).setInputStream(manifestStream).setRecommendShallow(true).setRemoteReader(reader).setTargetURI(c.getDestRepoKey().toString()).setURI(c.getBaseUri().toString()); cmd.setIncludedFileReader(new com.googlesource.gerrit.plugins.supermanifest.RepoUpdater.GerritIncludeReader(srcRepo, srcRef)); cmd.call(); }",cc813dd2b3bde49596cdc769263786774d34eaae,2017-08-08 21:22:27,6
115850,src_main_java_com_googlesource_gerrit_plugins_supermanifest_SuperManifestRefUpdatedListener.java,"@java.lang.Override public synchronized void onGitReferenceUpdated(com.googlesource.gerrit.plugins.supermanifest.Event event) { if (event.getProjectName().equals(allProjectsName.get())) { if (event.getRefName().equals(""refs/meta/config"")) { updateConfiguration(); } return; } for (com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.ConfigEntry c : config) { if (!(c.srcRepoKey.get().equals(event.getProjectName()))) { continue; } if (!((c.destBranch.equals(""*"")) || (c.srcRef.equals(event.getRefName())))) { continue; } if ((c.destBranch.equals(""*"")) && (!(event.getRefName().startsWith(com.googlesource.gerrit.plugins.supermanifest.REFS_HEADS)))) { continue; } try { update(c, event.getRefName()); } catch (java.io.IOException | org.eclipse.jgit.api.errors.GitAPIException e) { java.lang.StackTraceElement here = java.lang.Thread.currentThread().getStackTrace()[1]; e.setStackTrace(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.trimStack(e.getStackTrace(), here)); error(""update for %s (ref %s) failed: %s"", c.toString(), event.getRefName(), e); } } }",ee007aa4f9ba6a73cad77ed08839beed22fef777,"@java.lang.Override public synchronized void onGitReferenceUpdated(com.googlesource.gerrit.plugins.supermanifest.Event event) { if (event.getProjectName().equals(allProjectsName.get())) { if (event.getRefName().equals(""refs/meta/config"")) { updateConfiguration(); } return; } for (com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c : config) { if (!(c.srcRepoKey.get().equals(event.getProjectName()))) { continue; } if (!((c.destBranch.equals(""*"")) || (c.srcRef.equals(event.getRefName())))) { continue; } if ((c.destBranch.equals(""*"")) && (!(event.getRefName().startsWith(com.googlesource.gerrit.plugins.supermanifest.REFS_HEADS)))) { continue; } try { com.googlesource.gerrit.plugins.supermanifest.SubModuleUpdater subModuleUpdater = c.getSubModuleUpdater(serverIdent, canonicalWebUrl); try (com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader = new com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader()) { subModuleUpdater.update(reader, c, event.getRefName()); } } catch (java.lang.Exception e) { java.lang.StackTraceElement here = java.lang.Thread.currentThread().getStackTrace()[1]; e.setStackTrace(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.trimStack(e.getStackTrace(), here)); java.io.StringWriter sw = new java.io.StringWriter(); java.io.PrintWriter pw = new java.io.PrintWriter(sw); e.printStackTrace(pw); error(""update for %s (ref %s) failed: %s"", c.toString(), event.getRefName(), sw); } } }",42373cfee628d5d354ff319060e6e512e9056f55,"@java.lang.Override public synchronized void onGitReferenceUpdated(com.googlesource.gerrit.plugins.supermanifest.Event event) { if (event.getProjectName().equals(allProjectsName.get())) { if (event.getRefName().equals(""refs/meta/config"")) { updateConfiguration(); } return; } for (com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c : config) { if (!(c.srcRepoKey.get().equals(event.getProjectName()))) { continue; } if (!((c.destBranch.equals(""*"")) || (c.srcRef.equals(event.getRefName())))) { continue; } if ((c.destBranch.equals(""*"")) && (!(event.getRefName().startsWith(com.googlesource.gerrit.plugins.supermanifest.REFS_HEADS)))) { continue; } try { com.googlesource.gerrit.plugins.supermanifest.SubModuleUpdater subModuleUpdater; switch (c.getToolType()) { case Repo : subModuleUpdater = new com.googlesource.gerrit.plugins.supermanifest.RepoUpdater(serverIdent, canonicalWebUrl); break; default : throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""invalid toolType: %s"", c.getToolType().name())); } try (com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader = new com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader()) { subModuleUpdater.update(reader, c, event.getRefName()); } } catch (java.lang.Exception e) { java.lang.StackTraceElement here = java.lang.Thread.currentThread().getStackTrace()[1]; e.setStackTrace(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.trimStack(e.getStackTrace(), here)); java.io.StringWriter sw = new java.io.StringWriter(); java.io.PrintWriter pw = new java.io.PrintWriter(sw); e.printStackTrace(pw); error(""update for %s (ref %s) failed: %s"", c.toString(), event.getRefName(), sw); } } }",68c4506be357e5a4660d8b24234d64e5e39a6cd9,2017-08-08 21:22:27,6
115850,src_main_java_com_googlesource_gerrit_plugins_supermanifest_ConfigEntry.java,,,public java.lang.String getToolType() { return toolType; },c14d578609bbb94b13e2b157b7782e8fdabdf32d,public com.googlesource.gerrit.plugins.supermanifest.ToolType getToolType() { return toolType; },1fb493d28deb023346591b34d67563c897f7a622,2017-08-08 21:22:27,6
118330,gerrit-server_src_test_java_com_google_gerrit_server_schema_Schema_150_to_151_Test.java,"@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(""Ancient group for schema migration""); setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.server.schema.Schema_150_to_151_Test.TestUpdateUI()); com.google.gerrit.reviewdb.client.AccountGroup group = db.accountGroups().get(groupId); assertThat(group.getCreatedOn()).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }",3966e90f17d7635ca7fb09f7c7175c3faf6bc43d,"@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(""Ancient group for schema migration""); setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.server.schema.TestUpdateUI()); com.google.gerrit.reviewdb.client.AccountGroup group = db.accountGroups().get(groupId); assertThat(group.getCreatedOn()).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }",7350c37d0b17629b3673b2460870fe2dcef4f989,"@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(""Ancient group for schema migration""); setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.testutil.TestUpdateUI()); com.google.gerrit.reviewdb.client.AccountGroup group = db.accountGroups().get(groupId); assertThat(group.getCreatedOn()).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }",2ba4f5326278c0cff71948e3f6c98842917da15b,2017-08-09 07:37:13,9
118330,gerrit-server_src_test_java_com_google_gerrit_server_schema_AbstractSchemaUpgradeTest.java,,,"@java.lang.Override public void pruneSchema(com.google.gwtorm.server.StatementExecutor e, java.util.List<java.lang.String> pruneList) throws com.google.gwtorm.server.OrmException { }",8cce9eb8bf7638df3a2c755e29ac90b3919c3734,public com.google.inject.Injector getInjector() { return injector; },d6f7c0e943724f59e388b04f357f0ffc4c1f9883,2017-08-09 07:37:13,9
118330,gerrit-server_src_test_java_com_google_gerrit_server_schema_Schema_150_to_151_Test.java,"@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedAfterAudit() throws java.lang.Exception { java.sql.Timestamp testStartTime = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(""Group for schema migration""); setCreatedOnToVeryOldTimestamp(groupId); schema151.migrateData(db, new com.google.gerrit.server.schema.Schema_150_to_151_Test.TestUpdateUI()); com.google.gerrit.reviewdb.client.AccountGroup group = db.accountGroups().get(groupId); assertThat(group.getCreatedOn()).isAtLeast(testStartTime); }",d9bc5271bc2fd201ede1660bced0f0de3e8a85ea,"@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedAfterAudit() throws java.lang.Exception { java.sql.Timestamp testStartTime = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(""Group for schema migration""); setCreatedOnToVeryOldTimestamp(groupId); schema151.migrateData(db, new com.google.gerrit.server.schema.TestUpdateUI()); com.google.gerrit.reviewdb.client.AccountGroup group = db.accountGroups().get(groupId); assertThat(group.getCreatedOn()).isAtLeast(testStartTime); }",802588bc7e1011bc00aacd146bbb025e6f35c9bd,"@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedAfterAudit() throws java.lang.Exception { java.sql.Timestamp testStartTime = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(""Group for schema migration""); setCreatedOnToVeryOldTimestamp(groupId); schema151.migrateData(db, new com.google.gerrit.testutil.TestUpdateUI()); com.google.gerrit.reviewdb.client.AccountGroup group = db.accountGroups().get(groupId); assertThat(group.getCreatedOn()).isAtLeast(testStartTime); }",0c2ac88e507f90d7851c72d28aa0c699957afbfb,2017-08-09 07:37:13,9
118330,gerrit-server_src_test_java_com_google_gerrit_server_schema_AbstractSchemaUpgradeTest.java,,,@java.lang.Override public boolean isBatch() { return false; },5ff6c6ed835103c29f8c90a98b3ac8ddb7f04861,public com.google.gerrit.reviewdb.server.ReviewDb getDb() { return db; },fe56e6e8df7ad13e44e15e424a0168c547009ec3,2017-08-09 07:37:13,9
118330,gerrit-server_src_test_java_com_google_gerrit_server_schema_AbstractSchemaUpgradeTest.java,,,"@org.junit.Before public void setUp() throws java.lang.Exception { com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testutil.InMemoryModule()); injector.injectMembers(this); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); com.google.gerrit.reviewdb.client.Account.Id userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId(); com.google.gerrit.server.IdentifiedUser user = userFactory.create(userId); requestContext.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.gerrit.server.CurrentUser getUser() { return user; } @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDbProvider() { return com.google.inject.util.Providers.of(db); } }); }",f1010e81d44b0a39252b88c6833f4c710e71d067,"private void setUp() throws java.lang.Exception { injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testutil.InMemoryModule()); injector.injectMembers(this); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); com.google.gerrit.reviewdb.client.Account.Id userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId(); com.google.gerrit.server.IdentifiedUser user = userFactory.create(userId); requestContext.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.gerrit.server.CurrentUser getUser() { return user; } @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDbProvider() { return com.google.inject.util.Providers.of(db); } }); }",b974d38c98a36978c8c7e6f7dbc29c93a096349c,2017-08-09 07:37:13,9
118330,gerrit-server_src_test_java_com_google_gerrit_server_schema_AbstractSchemaUpgradeTest.java,,,"@java.lang.Override public boolean yesno(boolean def, java.lang.String msg) { return false; }",9ee9b673fcaabdda17b84312454e9f633f8f0fb8,@java.lang.Override public void evaluate() throws java.lang.Throwable { try { setUp(); statement.evaluate(); } finally { tearDown(); } },8ea9ec861bca1304e3135d9f99abd07af3824e48,2017-08-09 07:37:13,9
118330,gerrit-server_src_test_java_com_google_gerrit_server_schema_AbstractSchemaUpgradeTest.java,,,@org.junit.After public void tearDown() { if ((lifecycle) != null) { lifecycle.stop(); } requestContext.setContext(null); if ((db) != null) { db.close(); } com.google.gerrit.testutil.InMemoryDatabase.drop(inMemoryDatabase); },5df500e4e010a5a1b50dca9c6f543c4a8abee6a2,private void tearDown() { if ((lifecycle) != null) { lifecycle.stop(); } if ((requestContext) != null) { requestContext.setContext(null); } if ((db) != null) { db.close(); } com.google.gerrit.testutil.InMemoryDatabase.drop(inMemoryDatabase); },25cacd366d314563fd384ff0b026d6104d89778e,2017-08-09 07:37:13,9
118371,gerrit-server_src_main_java_com_google_gerrit_server_update_RetryHelper.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.gerrit.server.update.RetryHelper.Options.Builder timeout(long timeout, java.util.concurrent.TimeUnit unit) { return timeoutMs(unit.toMillis(timeout)); }",93da80ec637e9847daad3fdc4d2c59c2d0558f6e,public abstract com.google.gerrit.server.update.RetryHelper.Options.Builder timeout(java.time.Duration timeout);,e63293d804271d990ff6c181bec3869d122f732f,2017-08-09 12:52:59,3
118371,gerrit-server_src_main_java_com_google_gerrit_server_update_RetryHelper.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.google.gerrit.common.Nullable abstract java.lang.Long timeoutMs();,320f4b73b2d6bb8ef3c7a72e82ef248c71bb9a9f,@com.google.gerrit.common.Nullable abstract java.time.Duration timeout();,a75642e2e05120ced361e8dcc56b824372961cb0,2017-08-09 12:52:59,3
118371,gerrit-server_src_main_java_com_google_gerrit_server_update_RetryHelper.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.gerrit.server.update.RetryHelper.Options build() { com.google.gerrit.server.update.RetryHelper.Options opts = autoBuild(); if ((opts.timeoutMs()) != null) { checkArgument(((opts.timeoutMs()) > 0), ""timeout must be positive: %sms"", opts.timeoutMs()); } return opts; }",43e6de39fc2212bc006cd452e8ea74ed9f3c7d3d,public abstract com.google.gerrit.server.update.RetryHelper.Options build();,cff8c1e3b0dd95405d065ca2036318970cc5a21a,2017-08-09 12:52:59,3
118371,gerrit-server_src_main_java_com_google_gerrit_server_update_RetryHelper.java,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { com.github.rholder.retry.RetryerBuilder<T> builder = com.github.rholder.retry.RetryerBuilder.newBuilder(); if (migration.disableChangeReviewDb()) { builder.withStopStrategy(stopStrategy).withWaitStrategy(waitStrategy).retryIfException(com.google.gerrit.server.update.RetryHelper::isLockFailure); if ((opts.listener()) != null) { builder.withRetryListener(opts.listener()); } } else { } return builder.build().call(() -> action.call(updateFactory)); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { if ((e.getCause()) != null) { com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), com.google.gerrit.extensions.restapi.RestApiException.class); } throw new com.google.gerrit.server.update.UpdateException(e); } }",134284968c491f5ea56abf116441e5e33000f912,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { com.github.rholder.retry.RetryerBuilder<T> builder = com.github.rholder.retry.RetryerBuilder.newBuilder(); if (migration.disableChangeReviewDb()) { builder.withStopStrategy(com.github.rholder.retry.StopStrategies.stopAfterDelay(firstNonNull(opts.timeoutMs(), defaultTimeoutMs), java.util.concurrent.TimeUnit.MILLISECONDS)).withWaitStrategy(waitStrategy).retryIfException(com.google.gerrit.server.update.RetryHelper::isLockFailure); if ((opts.listener()) != null) { builder.withRetryListener(opts.listener()); } } else { } return builder.build().call(() -> action.call(updateFactory)); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { if ((e.getCause()) != null) { com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), com.google.gerrit.extensions.restapi.RestApiException.class); } throw new com.google.gerrit.server.update.UpdateException(e); } }",f5004d2135687588df93313c63333bfdff15ae7c,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { com.github.rholder.retry.RetryerBuilder<T> builder = com.github.rholder.retry.RetryerBuilder.newBuilder(); if (migration.disableChangeReviewDb()) { builder.withStopStrategy(com.github.rholder.retry.StopStrategies.stopAfterDelay(firstNonNull(opts.timeout(), defaultTimeout).toMillis(), java.util.concurrent.TimeUnit.MILLISECONDS)).withWaitStrategy(waitStrategy).retryIfException(com.google.gerrit.server.update.RetryHelper::isLockFailure); if ((opts.listener()) != null) { builder.withRetryListener(opts.listener()); } } else { } return builder.build().call(() -> action.call(updateFactory)); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { if ((e.getCause()) != null) { com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), com.google.gerrit.extensions.restapi.RestApiException.class); } throw new com.google.gerrit.server.update.UpdateException(e); } }",abc50f897bd41db87fcd666d66ecf10b383e49b7,2017-08-09 12:52:59,3
118372,gerrit-server_src_main_java_com_google_gerrit_server_update_RetryHelper.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static long getRetryTimeoutMs(org.eclipse.jgit.lib.Config cfg) { return cfg.getTimeUnit(""noteDb"", null, ""retryTimeout"", java.util.concurrent.TimeUnit.SECONDS.toMillis(5), java.util.concurrent.TimeUnit.MILLISECONDS); }",6d85b1ab1daaa0105c943688b7af2592668a6e43,public java.time.Duration getDefaultTimeout() { return defaultTimeout; },caed7beda2027ae799901b1bc070e79a05ae4b9a,2017-08-09 12:52:59,4
113572,gerrit-server_src_main_java_com_google_gerrit_server_plugins_PluginLoader.java,"private java.lang.String getPluginCanonicalWebUrl(java.lang.String name) { java.lang.String url = java.lang.String.format(""%s/plugins/%s/"", com.google.common.base.CharMatcher.is('/').trimTrailingFrom(urlProvider.get()), name); return url; }",112e9c0f5b04f21e3506d25ce6f029ef8615a3cf,"private java.lang.String getPluginCanonicalWebUrl(java.lang.String name) { java.lang.String canonicalWebUrl = urlProvider.get(); if (canonicalWebUrl == null) { canonicalWebUrl = """"; } java.lang.String url = java.lang.String.format(""%s/plugins/%s/"", com.google.common.base.CharMatcher.is('/').trimTrailingFrom(canonicalWebUrl), name); return url; }",cc79e3ca62286d4b716e43b8ba0be59566100c7d,"private java.lang.String getPluginCanonicalWebUrl(java.lang.String name) { java.lang.String canonicalWebUrl = urlProvider.get(); if (com.google.common.base.Strings.isNullOrEmpty(canonicalWebUrl)) { return ""/plugins/"" + name; } java.lang.String url = java.lang.String.format(""%s/plugins/%s/"", com.google.common.base.CharMatcher.is('/').trimTrailingFrom(canonicalWebUrl), name); return url; }",e8449d74d684f38d085b041aa1e3d2c28c3b3af6,2017-08-10 08:26:23,8
113572,gerrit-httpd_src_main_java_com_google_gerrit_httpd_raw_IndexServlet.java,"static java.lang.String computeCanonicalPath(java.lang.String canonicalURL) throws java.net.URISyntaxException { java.net.URI uri = new java.net.URI(canonicalURL); return uri.getPath().replaceAll(""/$"", """"); }",16cd8f59ecbb6f55819f91ee5089e695544e3436,"static java.lang.String computeCanonicalPath(java.lang.String canonicalURL) throws java.net.URISyntaxException { if (canonicalURL == null) { return """"; } java.net.URI uri = new java.net.URI(canonicalURL); return uri.getPath().replaceAll(""/$"", """"); }",1988d343ba15cbd951dd778c597cc9ccbc1f367c,"static java.lang.String computeCanonicalPath(java.lang.String canonicalURL) throws java.net.URISyntaxException { if (com.google.common.base.Strings.isNullOrEmpty(canonicalURL)) { return """"; } java.net.URI uri = new java.net.URI(canonicalURL); return uri.getPath().replaceAll(""/$"", """"); }",9b4af7c0cf09d6b861ae99896c2a74a657b8efbf,2017-08-10 08:26:23,8
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public Project.NameKey project() throws com.google.gwtorm.server.OrmException { if ((project) == null) { checkState((!(notesMigration.readChanges())), ""should not have created ChangeData without a project when NoteDb is enabled""); project = change().getProject(); } return project; }",a0233763b881dae4dbbc484e8f59af9302ae6d59,"public Project.NameKey project() throws com.google.gwtorm.server.OrmException { if ((project) == null) { checkState((!(a.notesMigration.readChanges())), ""should not have created ChangeData without a project when NoteDb is enabled""); project = change().getProject(); } return project; }",c57346941ab16e865e7ba5ba37aab198e12f0c5c,public Project.NameKey project() { return project; },98735b53ed56b0af158d55a2dccd2aee3e6bcabf,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"private java.util.Optional<com.google.gerrit.server.patch.DiffSummary> getDiffSummary(com.google.gerrit.reviewdb.client.Change c, com.google.gerrit.reviewdb.client.PatchSet ps) { java.lang.Integer psId = ps.getId().get(); if ((diffSummaries) == null) { diffSummaries = new java.util.HashMap(); } java.util.Optional<com.google.gerrit.server.patch.DiffSummary> r = diffSummaries.get(psId); if (r == null) { if (!(lazyLoad)) { return java.util.Optional.empty(); } try { r = java.util.Optional.of(patchListCache.getDiffSummary(c, ps)); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { r = java.util.Optional.empty(); } diffSummaries.put(psId, r); } return r; }",f07bc5835eccf9226c3e94278cb20886d54203cf,"private java.util.Optional<com.google.gerrit.server.patch.DiffSummary> getDiffSummary(com.google.gerrit.reviewdb.client.Change c, com.google.gerrit.reviewdb.client.PatchSet ps) { java.lang.Integer psId = ps.getId().get(); if ((diffSummaries) == null) { diffSummaries = new java.util.HashMap(); } java.util.Optional<com.google.gerrit.server.patch.DiffSummary> r = diffSummaries.get(psId); if (r == null) { if (!(lazyLoad)) { return java.util.Optional.empty(); } try { r = java.util.Optional.of(a.patchListCache.getDiffSummary(c, ps)); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { r = java.util.Optional.empty(); } diffSummaries.put(psId, r); } return r; }",1874e4e1be0c4ff38758a1f7386bf821a7f094de,"private java.util.Optional<com.google.gerrit.server.patch.DiffSummary> getDiffSummary(com.google.gerrit.reviewdb.client.Change c, com.google.gerrit.reviewdb.client.PatchSet ps) { java.lang.Integer psId = ps.getId().get(); if ((diffSummaries) == null) { diffSummaries = new java.util.HashMap(); } java.util.Optional<com.google.gerrit.server.patch.DiffSummary> r = diffSummaries.get(psId); if (r == null) { if (!(lazyLoad)) { return java.util.Optional.empty(); } try { r = java.util.Optional.of(patchListCache.getDiffSummary(c, ps)); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { r = java.util.Optional.empty(); } diffSummaries.put(psId, r); } return r; }",f07bc5835eccf9226c3e94278cb20886d54203cf,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public java.util.Set<java.lang.String> stars(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { if ((starsOf) != null) { if (!(starsOf.accountId().equals(accountId))) { starsOf = null; } } if ((starsOf) == null) { if ((stars) != null) { starsOf = com.google.gerrit.server.query.change.ChangeData.StarsOf.create(accountId, stars.get(accountId)); } else { if (!(lazyLoad)) { return com.google.common.collect.ImmutableSet.of(); } starsOf = com.google.gerrit.server.query.change.ChangeData.StarsOf.create(accountId, starredChangesUtil.getLabels(accountId, legacyId)); } } return starsOf.stars(); }",587c961eefdc4e60cbaee6ffd95d21eef12f4474,"public java.util.Set<java.lang.String> stars(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { if ((starsOf) != null) { if (!(starsOf.accountId().equals(accountId))) { starsOf = null; } } if ((starsOf) == null) { if ((stars) != null) { starsOf = com.google.gerrit.server.query.change.ChangeData.StarsOf.create(accountId, stars.get(accountId)); } else { if (!(lazyLoad)) { return com.google.common.collect.ImmutableSet.of(); } starsOf = com.google.gerrit.server.query.change.ChangeData.StarsOf.create(accountId, a.starredChangesUtil.getLabels(accountId, legacyId)); } } return starsOf.stars(); }",b5e3b949bdfb3a2a45d71b6179f1af7809169366,"public java.util.Set<java.lang.String> stars(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { if ((starsOf) != null) { if (!(starsOf.accountId().equals(accountId))) { starsOf = null; } } if ((starsOf) == null) { if ((stars) != null) { starsOf = com.google.gerrit.server.query.change.ChangeData.StarsOf.create(accountId, stars.get(accountId)); } else { if (!(lazyLoad)) { return com.google.common.collect.ImmutableSet.of(); } starsOf = com.google.gerrit.server.query.change.ChangeData.StarsOf.create(accountId, starredChangesUtil.getLabels(accountId, legacyId)); } } return starsOf.stars(); }",587c961eefdc4e60cbaee6ffd95d21eef12f4474,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public java.lang.Boolean isMergeable() throws com.google.gwtorm.server.OrmException { if ((mergeable) == null) { com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { return null; } if ((c.getStatus()) == (Change.Status.MERGED)) { mergeable = true; } else if ((c.getStatus()) == (Change.Status.ABANDONED)) { return null; } else if (c.isWorkInProgress()) { return null; } else { if (!(lazyLoad)) { return null; } com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); try { if ((ps == null) || (!(changeControl().isPatchVisible(ps, db)))) { return null; } } catch (com.google.gwtorm.server.OrmException e) { if ((e.getCause()) instanceof com.google.gerrit.server.project.NoSuchChangeException) { return null; } throw e; } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project())) { org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(c.getDest().get()); com.google.gerrit.common.data.SubmitTypeRecord str = submitTypeRecord(); if (!(str.isOk())) { return false; } java.lang.String mergeStrategy = mergeUtilFactory.create(projectCache.get(project())).mergeStrategyName(); mergeable = mergeabilityCache.get(org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()), ref, str.type, mergeStrategy, c.getDest(), repo); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } } } return mergeable; }",b899d2197379efdfe679501346f66d9f66f30a23,"public java.lang.Boolean isMergeable() throws com.google.gwtorm.server.OrmException { if ((mergeable) == null) { com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { return null; } if ((c.getStatus()) == (Change.Status.MERGED)) { mergeable = true; } else if ((c.getStatus()) == (Change.Status.ABANDONED)) { return null; } else if (c.isWorkInProgress()) { return null; } else { if (!(lazyLoad)) { return null; } com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); try { if ((ps == null) || (!(changeControl().isPatchVisible(ps, db)))) { return null; } } catch (com.google.gwtorm.server.OrmException e) { if ((e.getCause()) instanceof com.google.gerrit.server.project.NoSuchChangeException) { return null; } throw e; } try (org.eclipse.jgit.lib.Repository repo = a.repoManager.openRepository(project())) { org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(c.getDest().get()); com.google.gerrit.common.data.SubmitTypeRecord str = submitTypeRecord(); if (!(str.isOk())) { return false; } java.lang.String mergeStrategy = a.mergeUtilFactory.create(a.projectCache.get(project())).mergeStrategyName(); mergeable = a.mergeabilityCache.get(org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()), ref, str.type, mergeStrategy, c.getDest(), repo); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } } } return mergeable; }",f95bf393c371d35b6152996184d6b9b2d818c6f7,"public java.lang.Boolean isMergeable() throws com.google.gwtorm.server.OrmException { if ((mergeable) == null) { com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { return null; } if ((c.getStatus()) == (Change.Status.MERGED)) { mergeable = true; } else if ((c.getStatus()) == (Change.Status.ABANDONED)) { return null; } else if (c.isWorkInProgress()) { return null; } else { if (!(lazyLoad)) { return null; } com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); try { if ((ps == null) || (!(changeControl().isPatchVisible(ps, db)))) { return null; } } catch (com.google.gwtorm.server.OrmException e) { if ((e.getCause()) instanceof com.google.gerrit.server.project.NoSuchChangeException) { return null; } throw e; } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project())) { org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(c.getDest().get()); com.google.gerrit.common.data.SubmitTypeRecord str = submitTypeRecord(); if (!(str.isOk())) { return false; } java.lang.String mergeStrategy = mergeUtilFactory.create(projectCache.get(project())).mergeStrategyName(); mergeable = mergeabilityCache.get(org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()), ref, str.type, mergeStrategy, c.getDest(), repo); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } } } return mergeable; }",b899d2197379efdfe679501346f66d9f66f30a23,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSetApproval> approvals() throws com.google.gwtorm.server.OrmException { if ((allApprovals) == null) { if (!(lazyLoad)) { return com.google.common.collect.ImmutableListMultimap.of(); } allApprovals = approvalsUtil.byChange(db, notes()); } return allApprovals; }",c6f5d266d023d40a72653e332f03851ec011f15d,"public com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSetApproval> approvals() throws com.google.gwtorm.server.OrmException { if ((allApprovals) == null) { if (!(lazyLoad)) { return com.google.common.collect.ImmutableListMultimap.of(); } allApprovals = a.approvalsUtil.byChange(db, notes()); } return allApprovals; }",01808a813c4531a553f443d29051abc02082898f,"public com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSetApproval> approvals() throws com.google.gwtorm.server.OrmException { if ((allApprovals) == null) { if (!(lazyLoad)) { return com.google.common.collect.ImmutableListMultimap.of(); } allApprovals = approvalsUtil.byChange(db, notes()); } return allApprovals; }",c6f5d266d023d40a72653e332f03851ec011f15d,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord() throws com.google.gwtorm.server.OrmException { if ((submitTypeRecord) == null) { submitTypeRecord = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, emails, this).getSubmitType(); } return submitTypeRecord; }",3b3999f78d0c0b4bbec7ec230897eda1de51551b,"public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord() throws com.google.gwtorm.server.OrmException { if ((submitTypeRecord) == null) { submitTypeRecord = new com.google.gerrit.server.project.SubmitRuleEvaluator(a.accountCache, a.accounts, a.emails, this).getSubmitType(); } return submitTypeRecord; }",2d06ef2109e8de6237e1379118cc4593b1d9023b,"public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord() throws com.google.gwtorm.server.OrmException { if ((submitTypeRecord) == null) { submitTypeRecord = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, emails, this).getSubmitType(); } return submitTypeRecord; }",3b3999f78d0c0b4bbec7ec230897eda1de51551b,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public java.util.List<com.google.gerrit.common.data.SubmitRecord> submitRecords(com.google.gerrit.server.project.SubmitRuleOptions options) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.common.data.SubmitRecord> records = submitRecords.get(options); if (records == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } records = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, emails, this).setOptions(options).evaluate(); submitRecords.put(options, records); } return records; }",c57c9854266f761c32fbbbc17e54c76c314b231a,"public java.util.List<com.google.gerrit.common.data.SubmitRecord> submitRecords(com.google.gerrit.server.project.SubmitRuleOptions options) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.common.data.SubmitRecord> records = submitRecords.get(options); if (records == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } records = new com.google.gerrit.server.project.SubmitRuleEvaluator(a.accountCache, a.accounts, a.emails, this).setOptions(options).evaluate(); submitRecords.put(options, records); } return records; }",672e8fe7e3d67db694d93805faba767e656ab19b,"public java.util.List<com.google.gerrit.common.data.SubmitRecord> submitRecords(com.google.gerrit.server.project.SubmitRuleOptions options) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.common.data.SubmitRecord> records = submitRecords.get(options); if (records == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } records = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, emails, this).setOptions(options).evaluate(); submitRecords.put(options, records); } return records; }",c57c9854266f761c32fbbbc17e54c76c314b231a,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public static void ensureCurrentPatchSetLoaded(java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> changes) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData first = com.google.common.collect.Iterables.getFirst(changes, null); if (first == null) { return; } else if (first.notesMigration.readChanges()) { for (com.google.gerrit.server.query.change.ChangeData cd : changes) { cd.currentPatchSet(); } return; } java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.server.query.change.ChangeData> missing = new java.util.HashMap<>(); for (com.google.gerrit.server.query.change.ChangeData cd : changes) { if (((cd.currentPatchSet) == null) && ((cd.patchSets) == null)) { missing.put(cd.change().currentPatchSetId(), cd); } } if (missing.isEmpty()) { return; } for (com.google.gerrit.reviewdb.client.PatchSet ps : first.db.patchSets().get(missing.keySet())) { missing.get(ps.getId()).currentPatchSet = ps; } }",7feb3741fd5c2552e528dde2cd59cd8f50f7a9f6,"public static void ensureCurrentPatchSetLoaded(java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> changes) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData first = com.google.common.collect.Iterables.getFirst(changes, null); if (first == null) { return; } else if (first.a.notesMigration.readChanges()) { for (com.google.gerrit.server.query.change.ChangeData cd : changes) { cd.currentPatchSet(); } return; } java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.server.query.change.ChangeData> missing = new java.util.HashMap<>(); for (com.google.gerrit.server.query.change.ChangeData cd : changes) { if (((cd.currentPatchSet) == null) && ((cd.patchSets) == null)) { missing.put(cd.change().currentPatchSetId(), cd); } } if (missing.isEmpty()) { return; } for (com.google.gerrit.reviewdb.client.PatchSet ps : first.db.patchSets().get(missing.keySet())) { missing.get(ps.getId()).currentPatchSet = ps; } }",06903963f64954032e14d372149dde73a23649f3,"public static void ensureCurrentPatchSetLoaded(java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> changes) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData first = com.google.common.collect.Iterables.getFirst(changes, null); if (first == null) { return; } else if (first.notesMigration.readChanges()) { for (com.google.gerrit.server.query.change.ChangeData cd : changes) { cd.currentPatchSet(); } return; } java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.server.query.change.ChangeData> missing = new java.util.HashMap<>(); for (com.google.gerrit.server.query.change.ChangeData cd : changes) { if (((cd.currentPatchSet) == null) && ((cd.patchSets) == null)) { missing.put(cd.change().currentPatchSetId(), cd); } } if (missing.isEmpty()) { return; } for (com.google.gerrit.reviewdb.client.PatchSet ps : first.db.patchSets().get(missing.keySet())) { missing.get(ps.getId()).currentPatchSet = ps; } }",7feb3741fd5c2552e528dde2cd59cd8f50f7a9f6,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public java.util.Collection<com.google.gerrit.reviewdb.client.PatchSet> patchSets() throws com.google.gwtorm.server.OrmException { if ((patchSets) == null) { patchSets = psUtil.byChange(db, notes()); } return patchSets; }",906d690798ed6492beb47efcac356e6534bca9cc,"public java.util.Collection<com.google.gerrit.reviewdb.client.PatchSet> patchSets() throws com.google.gwtorm.server.OrmException { if ((patchSets) == null) { patchSets = a.psUtil.byChange(db, notes()); } return patchSets; }",f2d981bc63bf3ababff0644aa12ca59f2df9806b,"public java.util.Collection<com.google.gerrit.reviewdb.client.PatchSet> patchSets() throws com.google.gwtorm.server.OrmException { if ((patchSets) == null) { patchSets = psUtil.byChange(db, notes()); } return patchSets; }",906d690798ed6492beb47efcac356e6534bca9cc,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public static void ensureMessagesLoaded(java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> changes) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData first = com.google.common.collect.Iterables.getFirst(changes, null); if (first == null) { return; } else if (first.notesMigration.readChanges()) { for (com.google.gerrit.server.query.change.ChangeData cd : changes) { cd.messages(); } return; } java.util.List<com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.ChangeMessage>> results = new java.util.ArrayList<>(com.google.gerrit.server.query.change.ChangeData.BATCH_SIZE); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> batch : com.google.common.collect.Iterables.partition(changes, com.google.gerrit.server.query.change.ChangeData.BATCH_SIZE)) { results.clear(); for (com.google.gerrit.server.query.change.ChangeData cd : batch) { if ((cd.messages) == null) { com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd.change().currentPatchSetId(); results.add(cd.db.changeMessages().byPatchSet(psId)); } else { results.add(null); } } for (int i = 0; i < (batch.size()); i++) { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.ChangeMessage> result = results.get(i); if (result != null) { batch.get(i).messages = result.toList(); } } } }",a6fdf51cf19df43289191c765353294dfd755053,"public static void ensureMessagesLoaded(java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> changes) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData first = com.google.common.collect.Iterables.getFirst(changes, null); if (first == null) { return; } else if (first.a.notesMigration.readChanges()) { for (com.google.gerrit.server.query.change.ChangeData cd : changes) { cd.messages(); } return; } java.util.List<com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.ChangeMessage>> results = new java.util.ArrayList<>(com.google.gerrit.server.query.change.ChangeData.BATCH_SIZE); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> batch : com.google.common.collect.Iterables.partition(changes, com.google.gerrit.server.query.change.ChangeData.BATCH_SIZE)) { results.clear(); for (com.google.gerrit.server.query.change.ChangeData cd : batch) { if ((cd.messages) == null) { com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd.change().currentPatchSetId(); results.add(cd.db.changeMessages().byPatchSet(psId)); } else { results.add(null); } } for (int i = 0; i < (batch.size()); i++) { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.ChangeMessage> result = results.get(i); if (result != null) { batch.get(i).messages = result.toList(); } } } }",ab0ec7d3a79a26ee863d806f2d6ada14227e9c04,"public static void ensureMessagesLoaded(java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> changes) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData first = com.google.common.collect.Iterables.getFirst(changes, null); if (first == null) { return; } else if (first.notesMigration.readChanges()) { for (com.google.gerrit.server.query.change.ChangeData cd : changes) { cd.messages(); } return; } java.util.List<com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.ChangeMessage>> results = new java.util.ArrayList<>(com.google.gerrit.server.query.change.ChangeData.BATCH_SIZE); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> batch : com.google.common.collect.Iterables.partition(changes, com.google.gerrit.server.query.change.ChangeData.BATCH_SIZE)) { results.clear(); for (com.google.gerrit.server.query.change.ChangeData cd : batch) { if ((cd.messages) == null) { com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd.change().currentPatchSetId(); results.add(cd.db.changeMessages().byPatchSet(psId)); } else { results.add(null); } } for (int i = 0; i < (batch.size()); i++) { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.ChangeMessage> result = results.get(i); if (result != null) { batch.get(i).messages = result.toList(); } } } }",a6fdf51cf19df43289191c765353294dfd755053,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,public java.util.Collection<com.google.gerrit.reviewdb.client.RobotComment> robotComments() throws com.google.gwtorm.server.OrmException { if ((robotComments) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } robotComments = commentsUtil.robotCommentsByChange(notes()); } return robotComments; },5af7177c7593d324e5b2c53d887bb28b1fda17ff,public java.util.Collection<com.google.gerrit.reviewdb.client.RobotComment> robotComments() throws com.google.gwtorm.server.OrmException { if ((robotComments) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } robotComments = a.commentsUtil.robotCommentsByChange(notes()); } return robotComments; },b4e3a98f05d59fabc00ad8e9260342c150a64b4b,public java.util.Collection<com.google.gerrit.reviewdb.client.RobotComment> robotComments() throws com.google.gwtorm.server.OrmException { if ((robotComments) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } robotComments = commentsUtil.robotCommentsByChange(notes()); } return robotComments; },5af7177c7593d324e5b2c53d887bb28b1fda17ff,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public java.util.List<com.google.gerrit.reviewdb.client.ChangeMessage> messages() throws com.google.gwtorm.server.OrmException { if ((messages) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } messages = cmUtil.byChange(db, notes()); } return messages; }",7de0a66c30913b09a14bb3e3863c5ec8b406cbd0,"public java.util.List<com.google.gerrit.reviewdb.client.ChangeMessage> messages() throws com.google.gwtorm.server.OrmException { if ((messages) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } messages = a.cmUtil.byChange(db, notes()); } return messages; }",7ad0c5707ffbcac3df4a795c8a15f92c97b693bc,"public java.util.List<com.google.gerrit.reviewdb.client.ChangeMessage> messages() throws com.google.gwtorm.server.OrmException { if ((messages) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } messages = cmUtil.byChange(db, notes()); } return messages; }",7de0a66c30913b09a14bb3e3863c5ec8b406cbd0,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public static com.google.gerrit.server.query.change.ChangeData createForTest(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id id, int currentPatchSetId) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, project, id); cd.currentPatchSet = new com.google.gerrit.reviewdb.client.PatchSet(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, currentPatchSetId)); return cd; }",d62288a7017342f0d3e1e4194e38e37509606ee4,"public static com.google.gerrit.server.query.change.ChangeData createForTest(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id id, int currentPatchSetId) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData(null, null, project, id); cd.currentPatchSet = new com.google.gerrit.reviewdb.client.PatchSet(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, currentPatchSetId)); return cd; }",0df746a07a9e8d0e628820903552a896b4feaad3,"public static com.google.gerrit.server.query.change.ChangeData createForTest(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id id, int currentPatchSetId) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, project, id, null, null, null); cd.currentPatchSet = new com.google.gerrit.reviewdb.client.PatchSet(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, currentPatchSetId)); return cd; }",ddfa44424e992ca2ff33bdd813f020cc6cf307b8,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public com.google.gerrit.server.ReviewerSet reviewers() throws com.google.gwtorm.server.OrmException { if ((reviewers) == null) { if (!(lazyLoad)) { return com.google.gerrit.server.ReviewerSet.empty(); } reviewers = approvalsUtil.getReviewers(notes(), approvals().values()); } return reviewers; }",02320dd31be4e37af8d2a09ce0d12bbb344034cb,"public com.google.gerrit.server.ReviewerSet reviewers() throws com.google.gwtorm.server.OrmException { if ((reviewers) == null) { if (!(lazyLoad)) { return com.google.gerrit.server.ReviewerSet.empty(); } reviewers = a.approvalsUtil.getReviewers(notes(), approvals().values()); } return reviewers; }",2c21fa684f59c5ae2583d1b5d90d59cfbb48e42e,"public com.google.gerrit.server.ReviewerSet reviewers() throws com.google.gwtorm.server.OrmException { if ((reviewers) == null) { if (!(lazyLoad)) { return com.google.gerrit.server.ReviewerSet.empty(); } reviewers = approvalsUtil.getReviewers(notes(), approvals().values()); } return reviewers; }",02320dd31be4e37af8d2a09ce0d12bbb344034cb,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,public java.util.List<com.google.gerrit.server.ReviewerStatusUpdate> reviewerUpdates() throws com.google.gwtorm.server.OrmException { if ((reviewerUpdates) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } reviewerUpdates = approvalsUtil.getReviewerUpdates(notes()); } return reviewerUpdates; },480573d66a030c300b939755506c7ada1303f123,public java.util.List<com.google.gerrit.server.ReviewerStatusUpdate> reviewerUpdates() throws com.google.gwtorm.server.OrmException { if ((reviewerUpdates) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } reviewerUpdates = a.approvalsUtil.getReviewerUpdates(notes()); } return reviewerUpdates; },347245b704f785ae1af238bc39f87c7ccdd597d9,public java.util.List<com.google.gerrit.server.ReviewerStatusUpdate> reviewerUpdates() throws com.google.gwtorm.server.OrmException { if ((reviewerUpdates) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } reviewerUpdates = approvalsUtil.getReviewerUpdates(notes()); } return reviewerUpdates; },480573d66a030c300b939755506c7ada1303f123,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.Ref> editRefs() throws com.google.gwtorm.server.OrmException { if ((editsByUser) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyMap(); } com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { return java.util.Collections.emptyMap(); } editsByUser = new java.util.HashMap(); com.google.gerrit.reviewdb.client.Change.Id id = checkNotNull(change.getId()); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project())) { for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> e : repo.getRefDatabase().getRefs(RefNames.REFS_USERS).entrySet()) { if (id.equals(Change.Id.fromEditRefPart(e.getKey()))) { editsByUser.put(Account.Id.fromRefPart(e.getKey()), e.getValue()); } } } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } } return editsByUser; }",edc7f5e0f65bd23051271a206986707c78272bd5,"public java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.Ref> editRefs() throws com.google.gwtorm.server.OrmException { if ((editsByUser) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyMap(); } com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { return java.util.Collections.emptyMap(); } editsByUser = new java.util.HashMap(); com.google.gerrit.reviewdb.client.Change.Id id = checkNotNull(change.getId()); try (org.eclipse.jgit.lib.Repository repo = a.repoManager.openRepository(project())) { for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> e : repo.getRefDatabase().getRefs(RefNames.REFS_USERS).entrySet()) { if (id.equals(Change.Id.fromEditRefPart(e.getKey()))) { editsByUser.put(Account.Id.fromRefPart(e.getKey()), e.getValue()); } } } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } } return editsByUser; }",96fe7f3e24c2b59a63cee552102dfe593264b679,"public java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.Ref> editRefs() throws com.google.gwtorm.server.OrmException { if ((editsByUser) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyMap(); } com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { return java.util.Collections.emptyMap(); } editsByUser = new java.util.HashMap(); com.google.gerrit.reviewdb.client.Change.Id id = checkNotNull(change.getId()); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project())) { for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> e : repo.getRefDatabase().getRefs(RefNames.REFS_USERS).entrySet()) { if (id.equals(Change.Id.fromEditRefPart(e.getKey()))) { editsByUser.put(Account.Id.fromRefPart(e.getKey()), e.getValue()); } } } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } } return editsByUser; }",edc7f5e0f65bd23051271a206986707c78272bd5,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"private boolean loadCommitData() throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException, org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); if (ps == null) { return false; } java.lang.String sha1 = ps.getRevision().get(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project());org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit c = walk.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(sha1)); commitMessage = c.getFullMessage(); commitFooters = c.getFooterLines(); author = c.getAuthorIdent(); committer = c.getCommitterIdent(); } return true; }",593f3fc87568181887ed17fbe29e5cb43c3a3f23,"private boolean loadCommitData() throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException, org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); if (ps == null) { return false; } java.lang.String sha1 = ps.getRevision().get(); try (org.eclipse.jgit.lib.Repository repo = a.repoManager.openRepository(project());org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit c = walk.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(sha1)); commitMessage = c.getFullMessage(); commitFooters = c.getFooterLines(); author = c.getAuthorIdent(); committer = c.getCommitterIdent(); } return true; }",ff83f1a15aa27bfe9d4bbd0d9c4a6d6261bd2596,"private boolean loadCommitData() throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException, org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); if (ps == null) { return false; } java.lang.String sha1 = ps.getRevision().get(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project());org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit c = walk.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(sha1)); commitMessage = c.getFullMessage(); commitFooters = c.getFooterLines(); author = c.getAuthorIdent(); committer = c.getCommitterIdent(); } return true; }",593f3fc87568181887ed17fbe29e5cb43c3a3f23,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public static void ensureCurrentApprovalsLoaded(java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> changes) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData first = com.google.common.collect.Iterables.getFirst(changes, null); if (first == null) { return; } else if (first.notesMigration.readChanges()) { for (com.google.gerrit.server.query.change.ChangeData cd : changes) { cd.currentApprovals(); } return; } java.util.List<com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSetApproval>> results = new java.util.ArrayList<>(com.google.gerrit.server.query.change.ChangeData.BATCH_SIZE); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> batch : com.google.common.collect.Iterables.partition(changes, com.google.gerrit.server.query.change.ChangeData.BATCH_SIZE)) { results.clear(); for (com.google.gerrit.server.query.change.ChangeData cd : batch) { if ((cd.currentApprovals) == null) { com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd.change().currentPatchSetId(); results.add(cd.db.patchSetApprovals().byPatchSet(psId)); } else { results.add(null); } } for (int i = 0; i < (batch.size()); i++) { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSetApproval> result = results.get(i); if (result != null) { batch.get(i).currentApprovals = com.google.gerrit.server.ApprovalsUtil.sortApprovals(result); } } } }",54697bb164ea381185be901b25e77f1178fe5b55,"public static void ensureCurrentApprovalsLoaded(java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> changes) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData first = com.google.common.collect.Iterables.getFirst(changes, null); if (first == null) { return; } else if (first.a.notesMigration.readChanges()) { for (com.google.gerrit.server.query.change.ChangeData cd : changes) { cd.currentApprovals(); } return; } java.util.List<com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSetApproval>> results = new java.util.ArrayList<>(com.google.gerrit.server.query.change.ChangeData.BATCH_SIZE); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> batch : com.google.common.collect.Iterables.partition(changes, com.google.gerrit.server.query.change.ChangeData.BATCH_SIZE)) { results.clear(); for (com.google.gerrit.server.query.change.ChangeData cd : batch) { if ((cd.currentApprovals) == null) { com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd.change().currentPatchSetId(); results.add(cd.db.patchSetApprovals().byPatchSet(psId)); } else { results.add(null); } } for (int i = 0; i < (batch.size()); i++) { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSetApproval> result = results.get(i); if (result != null) { batch.get(i).currentApprovals = com.google.gerrit.server.ApprovalsUtil.sortApprovals(result); } } } }",784937da0a0d38204842b7913008953a0b6511ad,"public static void ensureCurrentApprovalsLoaded(java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> changes) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData first = com.google.common.collect.Iterables.getFirst(changes, null); if (first == null) { return; } else if (first.notesMigration.readChanges()) { for (com.google.gerrit.server.query.change.ChangeData cd : changes) { cd.currentApprovals(); } return; } java.util.List<com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSetApproval>> results = new java.util.ArrayList<>(com.google.gerrit.server.query.change.ChangeData.BATCH_SIZE); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> batch : com.google.common.collect.Iterables.partition(changes, com.google.gerrit.server.query.change.ChangeData.BATCH_SIZE)) { results.clear(); for (com.google.gerrit.server.query.change.ChangeData cd : batch) { if ((cd.currentApprovals) == null) { com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd.change().currentPatchSetId(); results.add(cd.db.patchSetApprovals().byPatchSet(psId)); } else { results.add(null); } } for (int i = 0; i < (batch.size()); i++) { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSetApproval> result = results.get(i); if (result != null) { batch.get(i).currentApprovals = com.google.gerrit.server.ApprovalsUtil.sortApprovals(result); } } } }",54697bb164ea381185be901b25e77f1178fe5b55,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public java.util.Collection<com.google.gerrit.reviewdb.client.Comment> publishedComments() throws com.google.gwtorm.server.OrmException { if ((publishedComments) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } publishedComments = commentsUtil.publishedByChange(db, notes()); } return publishedComments; }",4d4b029cbcedbf47ec2a6f7477d5496dfd4bde10,"public java.util.Collection<com.google.gerrit.reviewdb.client.Comment> publishedComments() throws com.google.gwtorm.server.OrmException { if ((publishedComments) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } publishedComments = a.commentsUtil.publishedByChange(db, notes()); } return publishedComments; }",0a5751abfd4b30f4d993867fb57f0a56d85ac6b4,"public java.util.Collection<com.google.gerrit.reviewdb.client.Comment> publishedComments() throws com.google.gwtorm.server.OrmException { if ((publishedComments) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } publishedComments = commentsUtil.publishedByChange(db, notes()); } return publishedComments; }",4d4b029cbcedbf47ec2a6f7477d5496dfd4bde10,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> currentApprovals() throws com.google.gwtorm.server.OrmException { if ((currentApprovals) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { currentApprovals = java.util.Collections.emptyList(); } else { try { currentApprovals = com.google.common.collect.ImmutableList.copyOf(approvalsUtil.byPatchSet(db, changeControl(), c.currentPatchSetId(), null, null)); } catch (com.google.gwtorm.server.OrmException e) { if ((e.getCause()) instanceof com.google.gerrit.server.project.NoSuchChangeException) { currentApprovals = java.util.Collections.emptyList(); } else { throw e; } } } } return currentApprovals; }",3198111ff4d8b10d5e20a7ad7cf8620ecc0326b9,"public java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> currentApprovals() throws com.google.gwtorm.server.OrmException { if ((currentApprovals) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { currentApprovals = java.util.Collections.emptyList(); } else { try { currentApprovals = com.google.common.collect.ImmutableList.copyOf(a.approvalsUtil.byPatchSet(db, changeControl(), c.currentPatchSetId(), null, null)); } catch (com.google.gwtorm.server.OrmException e) { if ((e.getCause()) instanceof com.google.gerrit.server.project.NoSuchChangeException) { currentApprovals = java.util.Collections.emptyList(); } else { throw e; } } } } return currentApprovals; }",e9136bd7da44483546c27cd52a525e63fdfed863,"public java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> currentApprovals() throws com.google.gwtorm.server.OrmException { if ((currentApprovals) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { currentApprovals = java.util.Collections.emptyList(); } else { try { currentApprovals = com.google.common.collect.ImmutableList.copyOf(approvalsUtil.byPatchSet(db, changeControl(), c.currentPatchSetId(), null, null)); } catch (com.google.gwtorm.server.OrmException e) { if ((e.getCause()) instanceof com.google.gerrit.server.project.NoSuchChangeException) { currentApprovals = java.util.Collections.emptyList(); } else { throw e; } } } } return currentApprovals; }",3198111ff4d8b10d5e20a7ad7cf8620ecc0326b9,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public com.google.gerrit.server.notedb.ChangeNotes notes() throws com.google.gwtorm.server.OrmException { if ((notes) == null) { if (!(lazyLoad)) { throw new com.google.gwtorm.server.OrmException(""ChangeNotes not available, lazyLoad = false""); } notes = notesFactory.create(db, project(), legacyId); } return notes; }",07ccaa973ed06ab608987beac159ff248d1cd298,"public com.google.gerrit.server.notedb.ChangeNotes notes() throws com.google.gwtorm.server.OrmException { if ((notes) == null) { if (!(lazyLoad)) { throw new com.google.gwtorm.server.OrmException(""ChangeNotes not available, lazyLoad = false""); } notes = a.notesFactory.create(db, project(), legacyId); } return notes; }",3de02cc711d74d6636a2e6f60ee524cfb16b48a6,"public com.google.gerrit.server.notedb.ChangeNotes notes() throws com.google.gwtorm.server.OrmException { if ((notes) == null) { if (!(lazyLoad)) { throw new com.google.gwtorm.server.OrmException(""ChangeNotes not available, lazyLoad = false""); } notes = notesFactory.create(db, project(), legacyId); } return notes; }",07ccaa973ed06ab608987beac159ff248d1cd298,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public com.google.common.collect.ImmutableMap<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.StarredChangesUtil.StarRef> starRefs() throws com.google.gwtorm.server.OrmException { if ((starRefs) == null) { if (!(lazyLoad)) { return com.google.common.collect.ImmutableMap.of(); } starRefs = checkNotNull(starredChangesUtil).byChange(legacyId); } return starRefs; }",c3d1f3a5d4a6dc8d81b4b7913922f4197bb42962,"public com.google.common.collect.ImmutableMap<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.StarredChangesUtil.StarRef> starRefs() throws com.google.gwtorm.server.OrmException { if ((starRefs) == null) { if (!(lazyLoad)) { return com.google.common.collect.ImmutableMap.of(); } starRefs = checkNotNull(a.starredChangesUtil).byChange(legacyId); } return starRefs; }",2d616291ffc09411334e6077d499b153a150786b,"public com.google.common.collect.ImmutableMap<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.StarredChangesUtil.StarRef> starRefs() throws com.google.gwtorm.server.OrmException { if ((starRefs) == null) { if (!(lazyLoad)) { return com.google.common.collect.ImmutableMap.of(); } starRefs = checkNotNull(starredChangesUtil).byChange(legacyId); } return starRefs; }",c3d1f3a5d4a6dc8d81b4b7913922f4197bb42962,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public com.google.gerrit.server.project.ChangeControl changeControl(com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { if ((changeControl) != null) { com.google.gerrit.server.CurrentUser oldUser = user; if (com.google.gerrit.server.query.change.ChangeData.sameUser(user, oldUser)) { return changeControl; } throw new java.lang.IllegalStateException((""user already specified: "" + (changeControl.getUser()))); } try { if ((change) != null) { changeControl = changeControlFactory.controlFor(db, change, user); } else { changeControl = changeControlFactory.controlFor(db, project(), legacyId, user); } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } return changeControl; }",e370e5adeb8fa4d93320cd1e9fe02b1f8903a7b0,"public com.google.gerrit.server.project.ChangeControl changeControl(com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { if ((changeControl) != null) { com.google.gerrit.server.CurrentUser oldUser = user; if (com.google.gerrit.server.query.change.ChangeData.sameUser(user, oldUser)) { return changeControl; } throw new java.lang.IllegalStateException((""user already specified: "" + (changeControl.getUser()))); } try { if ((change) != null) { changeControl = a.changeControlFactory.controlFor(db, change, user); } else { changeControl = a.changeControlFactory.controlFor(db, project(), legacyId, user); } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } return changeControl; }",ea75a6b7a3ca9443f88b991143a77baadec0881d,"public com.google.gerrit.server.project.ChangeControl changeControl(com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { if ((changeControl) != null) { com.google.gerrit.server.CurrentUser oldUser = user; if (com.google.gerrit.server.query.change.ChangeData.sameUser(user, oldUser)) { return changeControl; } throw new java.lang.IllegalStateException((""user already specified: "" + (changeControl.getUser()))); } try { if ((change) != null) { changeControl = changeControlFactory.controlFor(db, change, user); } else { changeControl = changeControlFactory.controlFor(db, project(), legacyId, user); } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } return changeControl; }",e370e5adeb8fa4d93320cd1e9fe02b1f8903a7b0,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public com.google.gerrit.server.project.ChangeControl changeControl() throws com.google.gwtorm.server.OrmException { if ((changeControl) == null) { com.google.gerrit.reviewdb.client.Change c = change(); try { changeControl = changeControlFactory.controlFor(db, c, userFactory.create(c.getOwner())); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } } return changeControl; }",ab3c2a897ab30413d8d612c3b926ef9373e6200d,"public com.google.gerrit.server.project.ChangeControl changeControl() throws com.google.gwtorm.server.OrmException { if ((changeControl) == null) { com.google.gerrit.reviewdb.client.Change c = change(); try { changeControl = a.changeControlFactory.controlFor(db, c, a.userFactory.create(c.getOwner())); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } } return changeControl; }",13f452e900d395c62c596591c5bd2ab5a6230b08,"public com.google.gerrit.server.project.ChangeControl changeControl() throws com.google.gwtorm.server.OrmException { if ((changeControl) == null) { com.google.gerrit.reviewdb.client.Change c = change(); try { changeControl = changeControlFactory.controlFor(db, c, userFactory.create(c.getOwner())); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } } return changeControl; }",ab3c2a897ab30413d8d612c3b926ef9373e6200d,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public static void ensureAllPatchSetsLoaded(java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> changes) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData first = com.google.common.collect.Iterables.getFirst(changes, null); if (first == null) { return; } else if (first.notesMigration.readChanges()) { for (com.google.gerrit.server.query.change.ChangeData cd : changes) { cd.patchSets(); } return; } java.util.List<com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSet>> results = new java.util.ArrayList<>(com.google.gerrit.server.query.change.ChangeData.BATCH_SIZE); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> batch : com.google.common.collect.Iterables.partition(changes, com.google.gerrit.server.query.change.ChangeData.BATCH_SIZE)) { results.clear(); for (com.google.gerrit.server.query.change.ChangeData cd : batch) { if ((cd.patchSets) == null) { results.add(cd.db.patchSets().byChange(cd.getId())); } else { results.add(null); } } for (int i = 0; i < (batch.size()); i++) { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSet> result = results.get(i); if (result != null) { batch.get(i).patchSets = result.toList(); } } } }",f57c6a2161c5af0e7cf703d35b852d180e7c44f0,"public static void ensureAllPatchSetsLoaded(java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> changes) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData first = com.google.common.collect.Iterables.getFirst(changes, null); if (first == null) { return; } else if (first.a.notesMigration.readChanges()) { for (com.google.gerrit.server.query.change.ChangeData cd : changes) { cd.patchSets(); } return; } java.util.List<com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSet>> results = new java.util.ArrayList<>(com.google.gerrit.server.query.change.ChangeData.BATCH_SIZE); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> batch : com.google.common.collect.Iterables.partition(changes, com.google.gerrit.server.query.change.ChangeData.BATCH_SIZE)) { results.clear(); for (com.google.gerrit.server.query.change.ChangeData cd : batch) { if ((cd.patchSets) == null) { results.add(cd.db.patchSets().byChange(cd.getId())); } else { results.add(null); } } for (int i = 0; i < (batch.size()); i++) { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSet> result = results.get(i); if (result != null) { batch.get(i).patchSets = result.toList(); } } } }",5c1e45137bf6bcd17da77088461889b52fd7aa07,"public static void ensureAllPatchSetsLoaded(java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> changes) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData first = com.google.common.collect.Iterables.getFirst(changes, null); if (first == null) { return; } else if (first.notesMigration.readChanges()) { for (com.google.gerrit.server.query.change.ChangeData cd : changes) { cd.patchSets(); } return; } java.util.List<com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSet>> results = new java.util.ArrayList<>(com.google.gerrit.server.query.change.ChangeData.BATCH_SIZE); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> batch : com.google.common.collect.Iterables.partition(changes, com.google.gerrit.server.query.change.ChangeData.BATCH_SIZE)) { results.clear(); for (com.google.gerrit.server.query.change.ChangeData cd : batch) { if ((cd.patchSets) == null) { results.add(cd.db.patchSets().byChange(cd.getId())); } else { results.add(null); } } for (int i = 0; i < (batch.size()); i++) { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSet> result = results.get(i); if (result != null) { batch.get(i).patchSets = result.toList(); } } } }",f57c6a2161c5af0e7cf703d35b852d180e7c44f0,2017-08-10 14:43:20,5
118972,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> trackingFooters() throws com.google.gwtorm.server.OrmException, java.io.IOException { return a.trackingFooters.extract(commitFooters()); }",56333a617e2deb43633c987443678a9eaf4ccfe3,"public com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> trackingFooters() throws com.google.gwtorm.server.OrmException, java.io.IOException { return trackingFooters.extract(commitFooters()); }",dcb015b36da700fd06129325d4c0e13d4be97361,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public com.google.gerrit.reviewdb.client.Change reloadChange() throws com.google.gwtorm.server.OrmException { try { notes = notesFactory.createChecked(db, project, legacyId); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException((""Unable to load change "" + (legacyId)), e); } change = notes.getChange(); setPatchSets(null); return change; }",967fbe405d725414566674277f050c0978c46389,"public com.google.gerrit.reviewdb.client.Change reloadChange() throws com.google.gwtorm.server.OrmException { try { notes = a.notesFactory.createChecked(db, project, legacyId); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException((""Unable to load change "" + (legacyId)), e); } change = notes.getChange(); setPatchSets(null); return change; }",3ddba3ac9e7b7dcdc4ff5c3a388a52c2327d48b7,"public com.google.gerrit.reviewdb.client.Change reloadChange() throws com.google.gwtorm.server.OrmException { try { notes = notesFactory.createChecked(db, project, legacyId); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException((""Unable to load change "" + (legacyId)), e); } change = notes.getChange(); setPatchSets(null); return change; }",967fbe405d725414566674277f050c0978c46389,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.Ref> draftRefs() throws com.google.gwtorm.server.OrmException { if ((draftsByUser) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyMap(); } com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { return java.util.Collections.emptyMap(); } draftsByUser = new java.util.HashMap(); if (notesMigration.readChanges()) { for (org.eclipse.jgit.lib.Ref ref : commentsUtil.getDraftRefs(notes.getChangeId())) { com.google.gerrit.reviewdb.client.Account.Id account = Account.Id.fromRefSuffix(ref.getName()); if ((account != null) && (!(notes().getDraftComments(account, ref).isEmpty()))) { draftsByUser.put(account, ref); } } } else { for (Comment sc : commentsUtil.draftByChange(db, notes())) { draftsByUser.put(sc.author.getId(), null); } } } return draftsByUser; }",e4bb0c5389101290e2fe45fc06a24ce1af4e59f9,"public java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.Ref> draftRefs() throws com.google.gwtorm.server.OrmException { if ((draftsByUser) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyMap(); } com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { return java.util.Collections.emptyMap(); } draftsByUser = new java.util.HashMap(); if (a.notesMigration.readChanges()) { for (org.eclipse.jgit.lib.Ref ref : a.commentsUtil.getDraftRefs(notes.getChangeId())) { com.google.gerrit.reviewdb.client.Account.Id account = Account.Id.fromRefSuffix(ref.getName()); if ((account != null) && (!(notes().getDraftComments(account, ref).isEmpty()))) { draftsByUser.put(account, ref); } } } else { for (Comment sc : a.commentsUtil.draftByChange(db, notes())) { draftsByUser.put(sc.author.getId(), null); } } } return draftsByUser; }",a1839a1ab040466380e2acac965a24b71c425c6b,"public java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.Ref> draftRefs() throws com.google.gwtorm.server.OrmException { if ((draftsByUser) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyMap(); } com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { return java.util.Collections.emptyMap(); } draftsByUser = new java.util.HashMap(); if (notesMigration.readChanges()) { for (org.eclipse.jgit.lib.Ref ref : commentsUtil.getDraftRefs(notes.getChangeId())) { com.google.gerrit.reviewdb.client.Account.Id account = Account.Id.fromRefSuffix(ref.getName()); if ((account != null) && (!(notes().getDraftComments(account, ref).isEmpty()))) { draftsByUser.put(account, ref); } } } else { for (Comment sc : commentsUtil.draftByChange(db, notes())) { draftsByUser.put(sc.author.getId(), null); } } } return draftsByUser; }",e4bb0c5389101290e2fe45fc06a24ce1af4e59f9,2017-08-10 14:43:20,5
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public static void ensureChangeLoaded(java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> changes) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData first = com.google.common.collect.Iterables.getFirst(changes, null); if (first == null) { return; } else if (first.notesMigration.readChanges()) { for (com.google.gerrit.server.query.change.ChangeData cd : changes) { cd.change(); } return; } java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.query.change.ChangeData> missing = new java.util.HashMap<>(); for (com.google.gerrit.server.query.change.ChangeData cd : changes) { if ((cd.change) == null) { missing.put(cd.getId(), cd); } } if (missing.isEmpty()) { return; } for (com.google.gerrit.server.notedb.ChangeNotes notes : first.notesFactory.create(first.db, missing.keySet())) { missing.get(notes.getChangeId()).change = notes.getChange(); } }",47c6314aaa29593d78f17464594f01548a59d2b6,"public static void ensureChangeLoaded(java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> changes) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData first = com.google.common.collect.Iterables.getFirst(changes, null); if (first == null) { return; } else if (first.a.notesMigration.readChanges()) { for (com.google.gerrit.server.query.change.ChangeData cd : changes) { cd.change(); } return; } java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.query.change.ChangeData> missing = new java.util.HashMap<>(); for (com.google.gerrit.server.query.change.ChangeData cd : changes) { if ((cd.change) == null) { missing.put(cd.getId(), cd); } } if (missing.isEmpty()) { return; } for (com.google.gerrit.server.notedb.ChangeNotes notes : first.a.notesFactory.create(first.db, missing.keySet())) { missing.get(notes.getChangeId()).change = notes.getChange(); } }",13bc2dc3d598c7a25380831e7fe020b05d8ac4ea,"public static void ensureChangeLoaded(java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> changes) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData first = com.google.common.collect.Iterables.getFirst(changes, null); if (first == null) { return; } else if (first.notesMigration.readChanges()) { for (com.google.gerrit.server.query.change.ChangeData cd : changes) { cd.change(); } return; } java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.query.change.ChangeData> missing = new java.util.HashMap<>(); for (com.google.gerrit.server.query.change.ChangeData cd : changes) { if ((cd.change) == null) { missing.put(cd.getId(), cd); } } if (missing.isEmpty()) { return; } for (com.google.gerrit.server.notedb.ChangeNotes notes : first.notesFactory.create(first.db, missing.keySet())) { missing.get(notes.getChangeId()).change = notes.getChange(); } }",47c6314aaa29593d78f17464594f01548a59d2b6,2017-08-10 14:43:20,5
119170,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeIsVisibleToPredicate.java,"@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (cd.fastIsVisibleTo(user)) { return true; } com.google.gerrit.reviewdb.client.Change change; try { change = cd.change(); if (change == null) { return false; } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return false; } com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.createFromIndexedChange(change); com.google.gerrit.server.project.ChangeControl cc = changeControl.controlFor(notes, user); boolean visible; try { visible = permissionBackend.user(user).indexedChange(cd, notes).database(db).test(ChangePermission.READ); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gwtorm.server.OrmException(""unable to check permissions"", e); } if (visible) { cd.cacheVisibleTo(cc); return true; } return false; }",69d363704a9bb6f0bf33d70c74843faa8b3068ad,"@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (cd.fastIsVisibleTo(user)) { return true; } com.google.gerrit.reviewdb.client.Change change; try { change = cd.change(); if (change == null) { return false; } com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.createFromIndexedChange(change); com.google.gerrit.server.project.ChangeControl cc = changeControl.controlFor(notes, user); boolean visible; try { visible = permissionBackend.user(user).indexedChange(cd, notes).database(db).test(ChangePermission.READ); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gwtorm.server.OrmException(""unable to check permissions"", e); } if (visible) { cd.cacheVisibleTo(cc); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return false; } return false; }",67d8b8b9026b58e476f0adc87e81b2e5485a7d8c,"@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (cd.fastIsVisibleTo(user)) { return true; } com.google.gerrit.reviewdb.client.Change change = cd.change(); if (change == null) { return false; } com.google.gerrit.server.project.ChangeControl changeControl; com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.createFromIndexedChange(change); try { changeControl = changeControlFactory.controlFor(notes, user); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return false; } boolean visible; try { visible = permissionBackend.user(user).indexedChange(cd, notes).database(db).test(ChangePermission.READ); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gwtorm.server.OrmException(""unable to check permissions"", e); } if (visible) { cd.cacheVisibleTo(changeControl); return true; } return false; }",497b809b0aa10557e74e88119a5a9895968402c1,2017-08-11 13:17:59,4
118310,gerrit-server_src_main_java_com_google_gerrit_server_schema_UpdateUI.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"java.lang.String readString(java.lang.String def, java.lang.String fmt, java.lang.Object... args);",02576005ea003d4394b3aabdf5aa307a497777bb,"java.lang.String readString(java.lang.String defaultValue, java.util.Set<java.lang.String> allowedValues, java.lang.String message);",58d7c528ae5d6b553b591f16329e5748aaf399d4,2017-08-11 13:27:27,7
118310,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_BaseInit.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.lang.String readString(java.lang.String def, java.util.Set<java.lang.String> allowedValues, java.lang.String fmt, java.lang.Object... args) { return ui.readString(def, allowedValues, fmt, args); }",872d0faa32f88a297e2d9f05f681bd42c5f3dabc,"@java.lang.Override public java.lang.String readString(java.lang.String defaultValue, java.util.Set<java.lang.String> allowedValues, java.lang.String message) { return ui.readString(defaultValue, allowedValues, message); }",317e2301eb8233c4dd8710dcf9e884ac56d5bbf2,2017-08-11 13:27:27,7
118170,gerrit-server_src_main_java_com_google_gerrit_server_plugins_ListPlugins.java,@java.lang.Override public java.lang.Object apply(com.google.gerrit.extensions.restapi.TopLevelResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException { format = com.google.gerrit.server.OutputFormat.JSON; return display(null); },a5c54fc0f66f0d95f27d7b87153d349ce86e80f4,"@java.lang.Override public java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> apply(com.google.gerrit.extensions.restapi.TopLevelResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException { return apply(); }",d60f8fda5f24ddf8f2b4aa81b6948669de9921cc,"@java.lang.Override public java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> apply(com.google.gerrit.extensions.restapi.TopLevelResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException { java.util.stream.Stream<com.google.gerrit.server.plugins.Plugin> s = com.google.common.collect.Streams.stream(pluginLoader.getPlugins(all)); if ((matchPrefix) != null) { checkMatchOptions((((matchSubstring) == null) && ((matchRegex) == null))); s = s.filter(( p) -> p.getName().startsWith(matchPrefix)); } else if ((matchSubstring) != null) { checkMatchOptions((((matchPrefix) == null) && ((matchRegex) == null))); java.lang.String substring = matchSubstring.toLowerCase(java.util.Locale.US); s = s.filter(( p) -> p.getName().toLowerCase(Locale.US).contains(substring)); } else if ((matchRegex) != null) { checkMatchOptions((((matchPrefix) == null) && ((matchSubstring) == null))); java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(matchRegex); s = s.filter(( p) -> pattern.matcher(p.getName()).matches()); } s = s.sorted(java.util.Comparator.comparing(Plugin::getName)); if ((start) > 0) { s = s.skip(start); } if ((limit) > 0) { s = s.limit(limit); } return new java.util.TreeMap(s.collect(java.util.stream.Collectors.toMap(( p) -> p.getName(), ( p) -> toPluginInfo(p)))); }",a32403dec32ea62ae6cd175b1409d62a2d0492f0,2017-08-14 08:29:41,4
118170,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_PluginLsCommand.java,@java.lang.Override public void run() throws java.lang.Exception { impl.display(stdout); },1c97f49120fdf2f6ef20a3f28ba469de3afd4ae6,"@java.lang.Override public void run() throws java.lang.Exception { list.setAll(all); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> output = list.apply(); if (format.isJson()) { format.newGson().toJson(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo>>() {}.getType(), stdout); stdout.print('\n'); } else { stdout.format(""%-30s %-10s %-8s %s\n"", ""Name"", ""Version"", ""Status"", ""File""); stdout.print(""-------------------------------------------------------------------------------\n""); for (java.util.Map.Entry<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> p : output.entrySet()) { com.google.gerrit.extensions.common.PluginInfo info = p.getValue(); stdout.format(""%-30s %-10s %-8s %s\n"", p.getKey(), com.google.common.base.Strings.nullToEmpty(info.version), status(info.disabled), com.google.common.base.Strings.nullToEmpty(info.filename)); } } stdout.flush(); }",1c5e499a04088da3fdccca2ab0c5746ad95dc738,"@java.lang.Override public void run() throws java.lang.Exception { list.setAll(all); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> output = list.apply(TopLevelResource.INSTANCE); if (format.isJson()) { format.newGson().toJson(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo>>() {}.getType(), stdout); stdout.print('\n'); } else { stdout.format(""%-30s %-10s %-8s %s\n"", ""Name"", ""Version"", ""Status"", ""File""); stdout.print(""-------------------------------------------------------------------------------\n""); for (java.util.Map.Entry<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> p : output.entrySet()) { com.google.gerrit.extensions.common.PluginInfo info = p.getValue(); stdout.format(""%-30s %-10s %-8s %s\n"", p.getKey(), com.google.common.base.Strings.nullToEmpty(info.version), status(info.disabled), com.google.common.base.Strings.nullToEmpty(info.filename)); } } stdout.flush(); }",0a8316859da07b98c4022ff949d9874bda32e818,2017-08-14 08:29:41,4
119031,gerrit-server_src_main_java_com_google_gerrit_server_query_QueryProcessor.java,public boolean isDisabled() { return (getPermittedLimit()) <= 0; },dbfa1bd93acaa893f764e28737eeea86cc4550d5,public boolean isDisabled() { return (enforceVisibility) && ((permittedLimit) <= 0); },393eee7fbbc4aa4b6260e3e88367763de0ca9891,public boolean isDisabled() { return (enforceVisibility) && ((getPermittedLimit()) <= 0); },ed2d8e9d63566b82960d38da3b9ea97ef63d0702,2017-08-16 13:07:05,11
119031,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountLimits.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public <T> void updateQueryLimit(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.query.QueryProcessor<T> qp) { qp.setPermittedLimit(create(user).getRange(GlobalCapability.QUERY_LIMIT).getMax()); }",81b073de321a116889864ca0489fa0d05f0bd185,public int getQueryLimit() { return getRange(GlobalCapability.QUERY_LIMIT).getMax(); },dcdb87031cbfdbf4df310859b94f572c86bf9a9c,2017-08-16 13:07:05,11
119031,gerrit-server_src_main_java_com_google_gerrit_server_query_QueryProcessor.java,"private int getEffectiveLimit(com.google.gerrit.index.query.Predicate<T> p) { java.util.List<java.lang.Integer> possibleLimits = new java.util.ArrayList<>(4); possibleLimits.add(getBackendSupportedLimit()); int permittedLimit = getPermittedLimit(); com.google.gerrit.server.query.QueryProcessor.checkState((permittedLimit > 0), ""permitted limit should have been positive""); possibleLimits.add(permittedLimit); if ((limitFromCaller) > 0) { possibleLimits.add(limitFromCaller); } if ((limitField) != null) { java.lang.Integer limitFromPredicate = com.google.gerrit.index.query.LimitPredicate.getLimit(limitField, p); if (limitFromPredicate != null) { possibleLimits.add(limitFromPredicate); } } return com.google.common.collect.Ordering.natural().min(possibleLimits); }",cd3c259ac0acddf2fedab6373713119ca258c4eb,"private int getEffectiveLimit(com.google.gerrit.index.query.Predicate<T> p) { java.util.List<java.lang.Integer> possibleLimits = new java.util.ArrayList<>(4); possibleLimits.add(getBackendSupportedLimit()); com.google.gerrit.server.query.QueryProcessor.checkState(((permittedLimit) > 0), ""user limit should have been positive""); possibleLimits.add(permittedLimit); if ((userProvidedLimit) > 0) { possibleLimits.add(userProvidedLimit); } if ((limitField) != null) { java.lang.Integer limitFromPredicate = com.google.gerrit.index.query.LimitPredicate.getLimit(limitField, p); if (limitFromPredicate != null) { possibleLimits.add(limitFromPredicate); } } return com.google.common.collect.Ordering.natural().min(possibleLimits); }",6e1a5fc6e30368b9a42c4d36ef504908fe571c55,"private int getEffectiveLimit(com.google.gerrit.index.query.Predicate<T> p) { java.util.List<java.lang.Integer> possibleLimits = new java.util.ArrayList<>(4); possibleLimits.add(getBackendSupportedLimit()); possibleLimits.add(getPermittedLimit()); if ((userProvidedLimit) > 0) { possibleLimits.add(userProvidedLimit); } if ((limitField) != null) { java.lang.Integer limitFromPredicate = com.google.gerrit.index.query.LimitPredicate.getLimit(limitField, p); if (limitFromPredicate != null) { possibleLimits.add(limitFromPredicate); } } int result = com.google.common.collect.Ordering.natural().min(possibleLimits); com.google.gerrit.server.query.QueryProcessor.checkState((result > 0), ""effective limit should be positive""); return result; }",7ccc2861aee7b501de54b5605fb7925b9b881133,2017-08-16 13:07:05,11
119410,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_conditions_BooleanCondition.java,,,"@java.lang.Override public java.lang.String toString() { return (((""("" + (a)) + "" || "") + (b)) + "")""; }",5fbcd6758a7e3e4e45b7f10520f172bf8ae07af5,"@java.lang.Override public java.lang.String toString() { return (((""("" + (com.google.gerrit.extensions.conditions.BooleanCondition.maybeTrim(a, getClass()))) + "" || "") + (com.google.gerrit.extensions.conditions.BooleanCondition.maybeTrim(a, getClass()))) + "")""; }",9e3e22c6d9b79ff714885cb72ead841662fff08a,2017-08-16 15:48:09,4
119410,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_conditions_BooleanCondition.java,,,"@java.lang.Override public java.lang.String toString() { return (((""("" + (a)) + "" && "") + (b)) + "")""; }",85a912e747bf155515edd0c82089534c2eaae629,"@java.lang.Override public java.lang.String toString() { return (((""("" + (com.google.gerrit.extensions.conditions.BooleanCondition.maybeTrim(a, getClass()))) + "" && "") + (com.google.gerrit.extensions.conditions.BooleanCondition.maybeTrim(a, getClass()))) + "")""; }",9b88029394d9cfa091f486678fe75fdaef814739,2017-08-16 15:48:09,4
119490,gerrit-server_src_main_java_com_google_gerrit_server_extensions_webui_UiActions.java,"public <R extends com.google.gerrit.extensions.restapi.RestResource> com.google.common.collect.FluentIterable<com.google.gerrit.extensions.webui.UiAction.Description> from(com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<R>> views, R resource) { return com.google.common.collect.FluentIterable.from(views).transform(( e) -> describe(e, resource)).filter(java.util.Objects::nonNull); }",298cbcc88b5e47605522bd90939dff478b5a9423,"public <R extends com.google.gerrit.extensions.restapi.RestResource> java.lang.Iterable<com.google.gerrit.extensions.webui.UiAction.Description> from(com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<R>> views, R resource) { java.util.List<com.google.gerrit.extensions.webui.UiAction.Description> descs = com.google.common.collect.Streams.stream(views).map(( e) -> describe(e, resource)).filter(java.util.Objects::nonNull).collect(java.util.stream.Collectors.toList()); java.util.List<com.google.gerrit.server.permissions.PermissionBackendCondition> visible = descs.stream().flatMap(( u) -> com.google.common.collect.Streams.stream(visibleCondition(u))).collect(java.util.stream.Collectors.toList()); java.util.List<com.google.gerrit.server.permissions.PermissionBackendCondition> enabled = descs.stream().flatMap(( u) -> com.google.common.collect.Streams.stream(enabledCondition(u))).collect(java.util.stream.Collectors.toList()); permissionBackend.user(userProvider).bulkEvaluateTest(com.google.common.collect.Iterables.concat(visible, enabled)); return descs.stream().filter(( u) -> u.isVisible()).collect(java.util.stream.Collectors.toList()); }",1bfad8daba2875a292b7e66096cdd4335a738e74,"public <R extends com.google.gerrit.extensions.restapi.RestResource> java.lang.Iterable<com.google.gerrit.extensions.webui.UiAction.Description> from(com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<R>> views, R resource) { java.util.List<com.google.gerrit.extensions.webui.UiAction.Description> descs = com.google.common.collect.Streams.stream(views).map(( e) -> describe(e, resource)).filter(java.util.Objects::nonNull).collect(java.util.stream.Collectors.toList()); java.util.List<com.google.gerrit.server.permissions.PermissionBackendCondition> conds = com.google.common.collect.Streams.concat(descs.stream().flatMap(( u) -> com.google.common.collect.Streams.stream(visibleCondition(u))), descs.stream().flatMap(( u) -> com.google.common.collect.Streams.stream(enabledCondition(u)))).collect(java.util.stream.Collectors.toList()); permissionBackend.bulkEvaluateTest(conds); return descs.stream().filter(( u) -> u.isVisible()).collect(java.util.stream.Collectors.toList()); }",f77874b711fe518cd70729a1d33751612924e21a,2017-08-16 15:48:09,4
119392,gerrit-httpd_src_main_java_com_google_gerrit_httpd_CanonicalWebUrl.java,static java.lang.String computeFromRequest(javax.servlet.http.HttpServletRequest req) { java.lang.StringBuffer url = req.getRequestURL(); url.setLength(((url.length()) - (req.getServletPath().length()))); if ((url.charAt(((url.length()) - 1))) != '/') { url.append('/'); } return url.toString(); },fb36e9ea49bb15377cc7d4194d6149dfcf911ceb,"static java.lang.String computeFromRequest(javax.servlet.http.HttpServletRequest req) { java.lang.StringBuffer url = req.getRequestURL(); try { url = new java.lang.StringBuffer(java.net.URLDecoder.decode(url.toString(), ""UTF-8"")); url.setLength(((url.length()) - (req.getServletPath().length()))); if ((url.charAt(((url.length()) - 1))) != '/') { url.append('/'); } return url.toString(); } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.IllegalStateException((""Unsupported encoding for request URL "" + url), e); } }",0ed75aebda6c96888d52232e293ae5ff34f165f9,"static java.lang.String computeFromRequest(javax.servlet.http.HttpServletRequest req) { java.lang.StringBuffer url = req.getRequestURL(); try { url = new java.lang.StringBuffer(java.net.URLDecoder.decode(url.toString(), java.nio.charset.StandardCharsets.UTF_8.name())); url.setLength(((url.length()) - (req.getServletPath().length()))); if ((url.charAt(((url.length()) - 1))) != '/') { url.append('/'); } return url.toString(); } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.IllegalStateException((""Unsupported encoding for request URL "" + url), e); } }",6c75b1a142c89a733f12e01c63cf9bbe2bc60f5f,2017-08-16 16:31:32,3
118893,gerrit-server_src_main_java_com_google_gerrit_server_git_VisibleRefFilter.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean canReadRef(java.lang.String ref) { try { return permissionBackend.user(user).project(projectCtl.getProject().getNameKey()).ref(ref).test(RefPermission.READ); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.VisibleRefFilter.log.error(""unable to check permissions"", e); return false; } }",695154a18c9c651ca3f05afc5a319c33b948fa6d,"private boolean canReadRef(java.lang.String ref) { try { permissionBackend.user(user).project(projectCtl.getProject().getNameKey()).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.VisibleRefFilter.log.error(""unable to check permissions"", e); return false; } return true; }",9d444bcf04774da94cb4d0a76808eee1c1ddca7b,2017-08-18 13:03:36,3
118892,src_main_java_com_googlesource_gerrit_plugins_replication_Destination.java,"private boolean shouldReplicate(final com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { return threadScoper.scope(new java.util.concurrent.Callable<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectControl projectControl = controlFor(project); return (shouldReplicate(projectControl)) && ((PushOne.ALL_REFS.equals(ref)) || (projectControl.controlForRef(ref).isVisible())); } }).call(); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format(""source project %s not available"", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw new java.lang.RuntimeException(e); } return false; }",f4d4a214c227afd2027a278a68957b3066c4b2d7,"private boolean shouldReplicate(final com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { return threadScoper.scope(new java.util.concurrent.Callable<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectControl projectControl = controlFor(project); return (shouldReplicate(projectControl)) && ((PushOne.ALL_REFS.equals(ref)) || (permissionBackend.user(projectControl.getUser()).project(project).ref(ref).test(RefPermission.READ))); } }).call(); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format(""source project %s not available"", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw new java.lang.RuntimeException(e); } return false; }",4cffe613a397370a4a7710d9b9034a4f76925bcb,"private boolean shouldReplicate(final com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { return threadScoper.scope(new java.util.concurrent.Callable<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectControl projectControl = controlFor(project); if (!(shouldReplicate(projectControl))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.user(projectControl.getUser()).project(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; } }).call(); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format(""source project %s not available"", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw new java.lang.RuntimeException(e); } return false; }",92940407e6af703c0fdcf031a38fb67175f544a6,2017-08-18 13:03:36,2
118893,gerrit-server_src_main_java_com_google_gerrit_server_project_ListProjects.java,"private java.util.List<org.eclipse.jgit.lib.Ref> getBranchRefs(com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.project.ProjectControl projectControl) { org.eclipse.jgit.lib.Ref[] result = new org.eclipse.jgit.lib.Ref[showBranch.size()]; try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(projectName)) { for (int i = 0; i < (showBranch.size()); i++) { org.eclipse.jgit.lib.Ref ref = git.findRef(showBranch.get(i)); if ((((ref != null) && ((ref.getObjectId()) != null)) && (projectControl.controlForRef(ref.getLeaf().getName()).isVisible())) || ((all) && (projectControl.isOwner()))) { result[i] = ref; } } } catch (java.io.IOException ioe) { } return java.util.Arrays.asList(result); }",b9f56d0b41cac38134a3bb60b881b2377266828b,"private java.util.List<org.eclipse.jgit.lib.Ref> getBranchRefs(com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.project.ProjectControl projectControl) { org.eclipse.jgit.lib.Ref[] result = new org.eclipse.jgit.lib.Ref[showBranch.size()]; try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(projectName)) { com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(currentUser).project(projectName); for (int i = 0; i < (showBranch.size()); i++) { org.eclipse.jgit.lib.Ref ref = git.findRef(showBranch.get(i)); if ((((ref != null) && ((ref.getObjectId()) != null)) && (perm.ref(ref.getLeaf().getName()).test(RefPermission.READ))) || ((all) && (projectControl.isOwner()))) { result[i] = ref; } } } catch (java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException e) { } return java.util.Arrays.asList(result); }",d5400aa65d96f0aaeec782c3431d47405c03ec8a,"private java.util.List<org.eclipse.jgit.lib.Ref> getBranchRefs(com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.project.ProjectControl projectControl) { org.eclipse.jgit.lib.Ref[] result = new org.eclipse.jgit.lib.Ref[showBranch.size()]; try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(projectName)) { com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(currentUser).project(projectName); for (int i = 0; i < (showBranch.size()); i++) { org.eclipse.jgit.lib.Ref ref = git.findRef(showBranch.get(i)); if ((all) && (projectControl.isOwner())) { result[i] = ref; } else if ((ref != null) && ((ref.getObjectId()) != null)) { try { perm.ref(ref.getLeaf().getName()).check(RefPermission.READ); result[i] = ref; } catch (com.google.gerrit.extensions.restapi.AuthException e) { continue; } } } } catch (java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException e) { } return java.util.Arrays.asList(result); }",44bd3b496e82daf91152dc19c7a3298ecd6ddc08,2017-08-18 13:03:36,3
118673,gerrit-server_src_main_java_com_google_gerrit_server_schema_JdbcAccountPatchReviewStore.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String getDriverFromUrl(java.lang.String url) { if (url.contains(com.google.gerrit.server.schema.JdbcAccountPatchReviewStore.POSTGRESQL)) { return ""org.postgresql.Driver""; } if (url.contains(com.google.gerrit.server.schema.JdbcAccountPatchReviewStore.MYSQL)) { return ""com.mysql.jdbc.Driver""; } if (url.contains(com.google.gerrit.server.schema.JdbcAccountPatchReviewStore.MARIADB)) { return ""org.mariadb.jdbc.Driver""; } return ""org.h2.Driver""; }",a2d87111d2c628aa2edd0aa5309144203b9f1947,"private static java.lang.String getDriverFromUrl(java.lang.String url) { if (url.contains(com.google.gerrit.server.schema.JdbcAccountPatchReviewStore.POSTGRESQL)) { return ""org.postgresql.Driver""; } if (url.contains(com.google.gerrit.server.schema.JdbcAccountPatchReviewStore.MYSQL)) { return ""com.mysql.jdbc.Driver""; } if (url.contains(com.google.gerrit.server.schema.JdbcAccountPatchReviewStore.MARIADB)) { return ""org.mariadb.jdbc.Driver""; } return ""org.h2.Driver""; }",def79aba08b45b6034d6a3209112ea36dd4a43f7,2017-08-22 23:11:34,7
120130,gerrit-server_src_main_java_com_google_gerrit_server_account_externalids_ExternalId.java,"public static com.google.gerrit.server.account.externalids.ExternalId createWithEmail(com.google.gerrit.server.account.externalids.ExternalId.Key key, com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable java.lang.String email) { return new com.google.gerrit.server.account.externalids.AutoValue_ExternalId(key, accountId, com.google.common.base.Strings.emptyToNull(email), null); }",d4b2885e9b48e43812f06dc04b725bb28ca52815,"public static com.google.gerrit.server.account.externalids.ExternalId createWithEmail(com.google.gerrit.server.account.externalids.ExternalId.Key key, com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable java.lang.String email) { return new com.google.gerrit.server.account.externalids.AutoValue_ExternalId(key, accountId, com.google.common.base.Strings.emptyToNull(email), null, null); }",983ce91a8b5361ebb37a5fc5a052c44e0287a2ba,"public static com.google.gerrit.server.account.externalids.ExternalId createWithEmail(com.google.gerrit.server.account.externalids.ExternalId.Key key, com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable java.lang.String email) { return com.google.gerrit.server.account.externalids.ExternalId.create(key, accountId, com.google.common.base.Strings.emptyToNull(email), null); }",dac7b55e259c203383d818239e9cce3b768b5b66,2017-08-23 00:32:00,3
120130,gerrit-server_src_main_java_com_google_gerrit_server_account_externalids_ExternalId.java,"public static com.google.gerrit.server.account.externalids.ExternalId create(java.lang.String scheme, java.lang.String id, com.google.gerrit.reviewdb.client.Account.Id accountId) { return new com.google.gerrit.server.account.externalids.AutoValue_ExternalId(com.google.gerrit.server.account.externalids.ExternalId.Key.create(scheme, id), accountId, null, null); }",5f6c7e3d9e0306b6c0cd7ce008efab05ba8ddc66,"public static com.google.gerrit.server.account.externalids.ExternalId create(java.lang.String scheme, java.lang.String id, com.google.gerrit.reviewdb.client.Account.Id accountId) { return new com.google.gerrit.server.account.externalids.AutoValue_ExternalId(com.google.gerrit.server.account.externalids.ExternalId.Key.create(scheme, id), accountId, null, null, null); }",230e240965cc514da906842c8fbeb87efabc58e2,"public static com.google.gerrit.server.account.externalids.ExternalId create(java.lang.String scheme, java.lang.String id, com.google.gerrit.reviewdb.client.Account.Id accountId) { return com.google.gerrit.server.account.externalids.ExternalId.create(com.google.gerrit.server.account.externalids.ExternalId.Key.create(scheme, id), accountId, null, null); }",ed04938386683830b26640a4c51d718a96ca2e62,2017-08-23 00:32:00,3
120130,gerrit-server_src_main_java_com_google_gerrit_server_account_externalids_ExternalIdReader.java,"private static com.google.gerrit.server.account.externalids.ExternalId parse(com.google.gerrit.server.account.externalids.ExternalId.Key key, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId rev) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.notes.NoteMap noteMap = com.google.gerrit.server.account.externalids.ExternalIdReader.readNoteMap(rw, rev); org.eclipse.jgit.lib.ObjectId noteId = key.sha1(); if (!(noteMap.contains(noteId))) { return null; } byte[] raw = rw.getObjectReader().open(noteMap.get(noteId), com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdReader.MAX_NOTE_SZ); return com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw); }",5188681b02db22316a0d352e4cbce455b7e545f0,"private static com.google.gerrit.server.account.externalids.ExternalId parse(com.google.gerrit.server.account.externalids.ExternalId.Key key, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId rev) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.notes.NoteMap noteMap = com.google.gerrit.server.account.externalids.ExternalIdReader.readNoteMap(rw, rev); org.eclipse.jgit.lib.ObjectId noteId = key.sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdReader.MAX_NOTE_SZ); return com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), noteData, raw); }",9432bb13bf656d651983adb1ee1a5ba8d231f624,"private static com.google.gerrit.server.account.externalids.ExternalId parse(com.google.gerrit.server.account.externalids.ExternalId.Key key, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId rev) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.notes.NoteMap noteMap = com.google.gerrit.server.account.externalids.ExternalIdReader.readNoteMap(rw, rev); org.eclipse.jgit.lib.ObjectId noteId = key.sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdReader.MAX_NOTE_SZ); return com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); }",054c7e38b7508f272f1f3470103b707c87df631a,2017-08-23 00:32:00,3
120130,gerrit-server_src_main_java_com_google_gerrit_server_account_externalids_ExternalIdsUpdate.java,"public static void remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); if (!(noteMap.contains(noteId))) { return; } byte[] raw = rw.getObjectReader().open(noteMap.get(noteId), com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdReader.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId actualExtId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw); checkState(extId.equals(actualExtId), ""external id %s should be removed, but it's not matching the actual external id %s"", extId.toString(), actualExtId.toString()); noteMap.remove(noteId); }",3e5a5a51e73d0a7a3203b4cd6ff5f923a1075f30,"public static void remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); if (!(noteMap.contains(noteId))) { return; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdReader.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId actualExtId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), noteData, raw); checkState(extId.equals(actualExtId), ""external id %s should be removed, but it's not matching the actual external id %s"", extId.toString(), actualExtId.toString()); noteMap.remove(noteId); }",2df54f07593a4d1d69de6ba35bd09742ccb2c8b5,"public static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdReader.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId actualExtId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); checkState(extId.equals(actualExtId), ""external id %s should be removed, but it's not matching the actual external id %s"", extId.toString(), actualExtId.toString()); noteMap.remove(noteId); return actualExtId; }",e95c8f8fc840d89613f5d8ac3190a55b0e7f532d,2017-08-23 00:32:00,3
120130,gerrit-server_src_main_java_com_google_gerrit_server_account_externalids_ExternalId.java,"public static com.google.gerrit.server.account.externalids.ExternalId create(com.google.gerrit.server.account.externalids.ExternalId.Key key, com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable java.lang.String email, @com.google.gerrit.common.Nullable java.lang.String hashedPassword) { return new com.google.gerrit.server.account.externalids.AutoValue_ExternalId(key, accountId, com.google.common.base.Strings.emptyToNull(email), com.google.common.base.Strings.emptyToNull(hashedPassword)); }",7a07f6154127e5b9f6218467beb8cfbb23ae86cc,"public static com.google.gerrit.server.account.externalids.ExternalId create(com.google.gerrit.server.account.externalids.ExternalId.Key key, com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable java.lang.String email, @com.google.gerrit.common.Nullable java.lang.String hashedPassword) { return new com.google.gerrit.server.account.externalids.AutoValue_ExternalId(key, accountId, com.google.common.base.Strings.emptyToNull(email), com.google.common.base.Strings.emptyToNull(hashedPassword), null); }",9e4288f79a7a4bc83b7e4bd00c1f998ec2572c90,"public static com.google.gerrit.server.account.externalids.ExternalId create(com.google.gerrit.server.account.externalids.ExternalId.Key key, com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable java.lang.String email, @com.google.gerrit.common.Nullable java.lang.String hashedPassword) { return com.google.gerrit.server.account.externalids.ExternalId.create(key, accountId, com.google.common.base.Strings.emptyToNull(email), com.google.common.base.Strings.emptyToNull(hashedPassword), null); }",be86276aa3828256aeae6726b1ee566484955db2,2017-08-23 00:32:00,3
120130,gerrit-server_src_main_java_com_google_gerrit_server_account_externalids_ExternalIdsUpdate.java,"private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extIdKey.sha1(); if (!(noteMap.contains(noteId))) { return null; } byte[] raw = rw.getObjectReader().open(noteMap.get(noteId), com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdReader.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw); if (expectedAccountId != null) { checkState(expectedAccountId.equals(extId.accountId()), (""external id %s should be removed for account %s,"" + "" but external id belongs to account %s""), extIdKey.get(), expectedAccountId.get(), extId.accountId().get()); } noteMap.remove(noteId); return extId; }",f610784beada83965bbaf95c57c734a679dcd6d4,"private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extIdKey.sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdReader.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), noteData, raw); if (expectedAccountId != null) { checkState(expectedAccountId.equals(extId.accountId()), (""external id %s should be removed for account %s,"" + "" but external id belongs to account %s""), extIdKey.get(), expectedAccountId.get(), extId.accountId().get()); } noteMap.remove(noteId); return extId; }",b63a7197dd1e0cc86d759ffcfabae6f2ef5028b7,"private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extIdKey.sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdReader.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); if (expectedAccountId != null) { checkState(expectedAccountId.equals(extId.accountId()), (""external id %s should be removed for account %s,"" + "" but external id belongs to account %s""), extIdKey.get(), expectedAccountId.get(), extId.accountId().get()); } noteMap.remove(noteId); return extId; }",abf9bb98e6df547c4551a5bf7054d643e2860774,2017-08-23 00:32:00,3
120130,gerrit-server_src_main_java_com_google_gerrit_server_account_externalids_ExternalIdReader.java,"private java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> all(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectId rev) throws java.io.IOException { if (rev.equals(org.eclipse.jgit.lib.ObjectId.zeroId())) { return com.google.common.collect.ImmutableSet.of(); } try (com.google.gerrit.metrics.Timer0.Context ctx = readAllLatency.start();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap noteMap = com.google.gerrit.server.account.externalids.ExternalIdReader.readNoteMap(rw, rev); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.HashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { byte[] raw = rw.getObjectReader().open(note.getData(), com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdReader.MAX_NOTE_SZ); try { extIds.add(com.google.gerrit.server.account.externalids.ExternalId.parse(note.getName(), raw)); } catch (java.lang.Exception e) { com.google.gerrit.server.account.externalids.ExternalIdReader.log.error(java.lang.String.format(""Ignoring invalid external ID note %s"", note.getName()), e); } } return extIds; } }",81278294859281f8430046de31d777b6fa9a5405,"private java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> all(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectId rev) throws java.io.IOException { if (rev.equals(org.eclipse.jgit.lib.ObjectId.zeroId())) { return com.google.common.collect.ImmutableSet.of(); } try (com.google.gerrit.metrics.Timer0.Context ctx = readAllLatency.start();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap noteMap = com.google.gerrit.server.account.externalids.ExternalIdReader.readNoteMap(rw, rev); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.HashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { byte[] raw = rw.getObjectReader().open(note.getData(), com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdReader.MAX_NOTE_SZ); try { extIds.add(com.google.gerrit.server.account.externalids.ExternalId.parse(note.getName(), note.getData(), raw)); } catch (java.lang.Exception e) { com.google.gerrit.server.account.externalids.ExternalIdReader.log.error(java.lang.String.format(""Ignoring invalid external ID note %s"", note.getName()), e); } } return extIds; } }",85dec4505ac530c4599b8ce925ec98b3e6683b6b,"private java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> all(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectId rev) throws java.io.IOException { if (rev.equals(org.eclipse.jgit.lib.ObjectId.zeroId())) { return com.google.common.collect.ImmutableSet.of(); } try (com.google.gerrit.metrics.Timer0.Context ctx = readAllLatency.start();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap noteMap = com.google.gerrit.server.account.externalids.ExternalIdReader.readNoteMap(rw, rev); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.HashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { byte[] raw = rw.getObjectReader().open(note.getData(), com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdReader.MAX_NOTE_SZ); try { extIds.add(com.google.gerrit.server.account.externalids.ExternalId.parse(note.getName(), raw, note.getData())); } catch (java.lang.Exception e) { com.google.gerrit.server.account.externalids.ExternalIdReader.log.error(java.lang.String.format(""Ignoring invalid external ID note %s"", note.getName()), e); } } return extIds; } }",f0a1ae8905657d701feeb6e580200f354d8c38b6,2017-08-23 00:32:00,3
119050,src_main_java_com_googlesource_gerrit_plugins_supermanifest_JiriProjects.java,,,"public java.lang.String toSubmodules() { java.lang.StringBuffer buf = new java.lang.StringBuffer(); sortByPath(); for (com.googlesource.gerrit.plugins.supermanifest.Project p : projects) { buf.append(p.toSubmodules()); buf.append(""\n""); } return buf.toString(); }",ebee2dfec5bd0155a53613ebab73380f4521cd69,"public java.lang.String toSubmodules() { java.lang.StringBuffer buf = new java.lang.StringBuffer(); sortByPath(); for (com.googlesource.gerrit.plugins.supermanifest.JiriProjects.Project p : projects) { buf.append(p.toSubmodules()); buf.append(""\n""); } return buf.toString(); }",72d4bb5b22589a4da07a2107e28b5d2643928063,2017-08-23 02:20:26,7
119050,src_main_java_com_googlesource_gerrit_plugins_supermanifest_JiriProjects.java,,,"public void sortByPath() { java.util.Arrays.sort(projects, new com.googlesource.gerrit.plugins.supermanifest.SortbyPath()); }",873ca282f2202a66141deaf425cdeb31d76b5388,"public void sortByPath() { java.util.Arrays.sort(projects, new com.googlesource.gerrit.plugins.supermanifest.JiriProjects.SortbyPath()); }",464c8ba91977f445100b06c66da78d462e7ed1f1,2017-08-23 02:20:26,7
119050,src_main_java_com_googlesource_gerrit_plugins_supermanifest_JiriProjects.java,,,public com.googlesource.gerrit.plugins.supermanifest.Project[] getProjects() { return projects; },02ed865dac039f21baa34f7a529b26e3cae470de,public com.googlesource.gerrit.plugins.supermanifest.JiriProjects.Project[] getProjects() { return projects; },fe1ce2fb629e125263fedab680a863142c030eb4,2017-08-23 02:20:26,7
119050,src_main_java_com_googlesource_gerrit_plugins_supermanifest_JiriProjects.java,,,"@java.lang.Override public int compare(com.googlesource.gerrit.plugins.supermanifest.Project a, com.googlesource.gerrit.plugins.supermanifest.Project b) { java.lang.String p1 = com.googlesource.gerrit.plugins.supermanifest.StringUtil.stripAndaddCharsAtEnd(a.getPath(), ""/""); java.lang.String p2 = com.googlesource.gerrit.plugins.supermanifest.StringUtil.stripAndaddCharsAtEnd(b.getPath(), ""/""); return p1.compareTo(p2); }",1c3b7383d3beb46336fca8574728f95d39c1ec20,"@java.lang.Override public int compare(com.googlesource.gerrit.plugins.supermanifest.JiriProjects.Project a, com.googlesource.gerrit.plugins.supermanifest.JiriProjects.Project b) { java.lang.String p1 = com.googlesource.gerrit.plugins.supermanifest.StringUtil.stripAndaddCharsAtEnd(a.getPath(), ""/""); java.lang.String p2 = com.googlesource.gerrit.plugins.supermanifest.StringUtil.stripAndaddCharsAtEnd(b.getPath(), ""/""); return p1.compareTo(p2); }",229b531fcbb4aab51c9c98ad8de41d986fb1fc86,2017-08-23 02:20:26,7
119050,src_main_java_com_googlesource_gerrit_plugins_supermanifest_JiriProjects.java,,,"@java.lang.Override public boolean equals(java.lang.Object obj) { com.googlesource.gerrit.plugins.supermanifest.Project p = ((com.googlesource.gerrit.plugins.supermanifest.Project) (obj)); if (!(name.equals(p.name))) { return false; } if (!(path.equals(p.path))) { return false; } if (!(remote.equals(p.remote))) { return false; } if (!(remotebranch.equals(p.remotebranch))) { if (!(((remotebranch.equals(""master"")) && (p.remotebranch.equals(""""))) || ((p.remotebranch.equals(""master"")) && (remotebranch.equals(""""))))) { return false; } } if (!(revision.equals(p.revision))) { return false; } return true; }",a2b106a92881dc432958cab0877737b6266939fe,@java.lang.Override public boolean equals(java.lang.Object obj) { com.googlesource.gerrit.plugins.supermanifest.JiriProjects.Project p = ((com.googlesource.gerrit.plugins.supermanifest.JiriProjects.Project) (obj)); if (!(name.equals(p.name))) { return false; } if (!(path.equals(p.path))) { return false; } if (!(remote.equals(p.remote))) { return false; } if (!(remotebranch.equals(p.remotebranch))) { return false; } if (!(revision.equals(p.revision))) { return false; } return true; },c6c76efc560d0f02d6e5ff5445d193e28ea3680f,2017-08-23 02:20:26,7
119050,src_main_java_com_googlesource_gerrit_plugins_supermanifest_ConfigEntry.java,"@java.lang.Override public java.lang.String toString() { return java.lang.String.format(""%s => %s"", src(), dest()); }",abadcdf2de7791f82c59f0093dff700b611391d3,"@java.lang.Override public java.lang.String toString() { return java.lang.String.format(""%s -> %s => %s"", toolType, src(), dest()); }",25b0a4dc57b04b6472119b55e5889b8de8acee50,"@java.lang.Override public java.lang.String toString() { return java.lang.String.format(""%s (%s) => %s"", src(), toolType, dest()); }",0a3e2548c53a9db5d3d47a1d44dd4efb40746cc7,2017-08-23 02:20:26,7
119050,src_main_java_com_googlesource_gerrit_plugins_supermanifest_JiriProjects.java,,,"@java.lang.Override public java.lang.String toString() { java.lang.StringBuffer buf = new java.lang.StringBuffer(); if ((projects.length) > 0) { buf.append(""projects:\n""); for (com.googlesource.gerrit.plugins.supermanifest.Project p : projects) { buf.append(com.googlesource.gerrit.plugins.supermanifest.StringUtil.addTab(p.toString())); } } return buf.toString(); }",6b2edd087bef5c010e598dfbcef75acb9eea928a,"@java.lang.Override public java.lang.String toString() { java.lang.StringBuffer buf = new java.lang.StringBuffer(); if ((projects.length) > 0) { buf.append(""projects:\n""); for (com.googlesource.gerrit.plugins.supermanifest.JiriProjects.Project p : projects) { buf.append(com.googlesource.gerrit.plugins.supermanifest.StringUtil.addTab(p.toString())); } } return buf.toString(); }",5a1230f36b7cf0dd7e898a0b075f56e6cca3f060,2017-08-23 02:20:26,7
119050,src_main_java_com_googlesource_gerrit_plugins_supermanifest_JiriManifest.java,,,public com.googlesource.gerrit.plugins.supermanifest.LocalImport[] getLocalImports() { return localImports; },05bb34f177edd595338e6fe18c7664d61cac3d7f,public com.googlesource.gerrit.plugins.supermanifest.JiriManifest.LocalImport[] getLocalImports() { return localImports; },da442d5638ee7f907e10e21a9f89165dd7364a3f,2017-08-23 02:20:26,7
119050,src_main_java_com_googlesource_gerrit_plugins_supermanifest_JiriManifest.java,,,"@java.lang.Override public java.lang.String toString() { java.lang.StringBuffer buf = new java.lang.StringBuffer(""""); if ((imports.length) > 0) { buf.append(((""import: "" + (imports.length)) + ""\n"")); } if ((localImports.length) > 0) { buf.append(""localImports:\n""); for (com.googlesource.gerrit.plugins.supermanifest.LocalImport l : localImports) { buf.append(com.googlesource.gerrit.plugins.supermanifest.StringUtil.addTab(l.toString())); } } return buf.toString(); }",17967fed06a0a8481f83dfcba64b5b96ada94ccd,"@java.lang.Override public java.lang.String toString() { java.lang.StringBuffer buf = new java.lang.StringBuffer(""""); if ((imports.length) > 0) { buf.append(((""import: "" + (imports.length)) + ""\n"")); } if ((localImports.length) > 0) { buf.append(""localImports:\n""); for (com.googlesource.gerrit.plugins.supermanifest.JiriManifest.LocalImport l : localImports) { buf.append(com.googlesource.gerrit.plugins.supermanifest.StringUtil.addTab(l.toString())); } } return buf.toString(); }",213f9b3041d60d3a6f007188ba4b08cb07141f76,2017-08-23 02:20:26,7
119050,src_main_java_com_googlesource_gerrit_plugins_supermanifest_JiriManifest.java,,,public com.googlesource.gerrit.plugins.supermanifest.Import[] getImports() { return imports; },dbd8ef16988fdd579e2991488126b1c1e95c13f9,public com.googlesource.gerrit.plugins.supermanifest.JiriManifest.Import[] getImports() { return imports; },d6ef09fbb23c2689e5631aa4d31ce6bae13c079c,2017-08-23 02:20:26,7
121210,gerrit-server_src_main_java_com_google_gerrit_server_query_group_GroupPredicates.java,"public static com.google.gerrit.index.query.Predicate<com.google.gerrit.server.group.InternalGroup> name(java.lang.String name) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate(com.google.gerrit.server.index.group.GroupField.NAME, GroupQueryBuilder.FIELD_NAME, name.toLowerCase(java.util.Locale.US)); }",875c339df2e49a09b2401e3fb983802dd74b39b4,"public static com.google.gerrit.index.query.Predicate<com.google.gerrit.server.group.InternalGroup> name(java.lang.String name) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate(com.google.gerrit.server.index.group.GroupField.NAME, GroupQueryBuilder.FIELD_NAME, name); }",4029ba52c6feca6e13148592c58c28f4d8f3bf25,"public static com.google.gerrit.index.query.Predicate<com.google.gerrit.reviewdb.client.AccountGroup> name(java.lang.String name) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate(com.google.gerrit.server.index.group.GroupField.NAME, GroupQueryBuilder.FIELD_NAME, name); }",628a53b28b13017643c069aaf2f048b9a952c2f7,2017-08-24 00:33:58,2
121210,gerrit-server_src_test_java_com_google_gerrit_server_query_group_AbstractQueryGroupsTest.java,"@org.junit.Test public void byName() throws java.lang.Exception { assertQuery(""name:non-existing""); GroupInfo group = createGroup(name(""group"")); assertQuery((""name:"" + (group.name)), group); assertQuery((""name:"" + (group.name.toUpperCase(Locale.US))), group); GroupInfo groupWithHyphen = createGroup(name(""group-with-hyphen"")); createGroup(name(""group-no-match-with-hyphen"")); assertQuery((""name:"" + (groupWithHyphen.name)), groupWithHyphen); }",16cf3e44795667f80b8b769fe1e5508268b05df3,"@org.junit.Test public void byName() throws java.lang.Exception { assertQuery(""name:non-existing""); com.google.gerrit.extensions.common.GroupInfo group = createGroup(name(""Group"")); assertQuery((""name:"" + (group.name)), group); com.google.gerrit.extensions.common.GroupInfo groupWithHyphen = createGroup(name(""group-with-hyphen"")); createGroup(name(""group-no-match-with-hyphen"")); assertQuery((""name:"" + (groupWithHyphen.name)), groupWithHyphen); }",df1d882a4780a12a296d13b682cf74d820f0bbd5,"@org.junit.Test public void byName() throws java.lang.Exception { assertQuery(""name:non-existing""); GroupInfo group = createGroup(name(""Group"")); assertQuery((""name:"" + (group.name)), group); assertQuery((""name:"" + (group.name.toLowerCase(Locale.US)))); GroupInfo groupWithHyphen = createGroup(name(""group-with-hyphen"")); createGroup(name(""group-no-match-with-hyphen"")); assertQuery((""name:"" + (groupWithHyphen.name)), groupWithHyphen); }",7ecc119f6246309cc67354cdd3951714bc977875,2017-08-24 00:33:58,2
120291,gerrit-server_src_main_java_com_google_gerrit_server_account_externalids_ExternalId.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public byte[] toByteArray() { checkState(((blobId()) != null), ""Missing blobId in external ID %s"", key().get()); byte[] b = new byte[(2 * (org.eclipse.jgit.lib.Constants.OBJECT_ID_STRING_LENGTH)) + 1]; key().sha1().copyTo(b, 0); java.lang.System.arraycopy("":"".getBytes(java.nio.charset.StandardCharsets.UTF_8), 0, b, Constants.OBJECT_ID_STRING_LENGTH, 1); blobId().copyTo(b, ((org.eclipse.jgit.lib.Constants.OBJECT_ID_STRING_LENGTH) + 1)); return b; }",96994c8c22251cf2195beff548fc253349faebe7,"public byte[] toByteArray() { checkState(((blobId()) != null), ""Missing blobId in external ID %s"", key().get()); byte[] b = new byte[(2 * (org.eclipse.jgit.lib.Constants.OBJECT_ID_STRING_LENGTH)) + 1]; key().sha1().copyTo(b, 0); b[org.eclipse.jgit.lib.Constants.OBJECT_ID_STRING_LENGTH] = ':'; blobId().copyTo(b, ((org.eclipse.jgit.lib.Constants.OBJECT_ID_STRING_LENGTH) + 1)); return b; }",fdcd6e467dbc61d507e97575496c9815377eccbf,2017-08-24 14:38:04,6
119094,gerrit-server_src_main_java_com_google_gerrit_server_project_CreateRefControl.java,,,"@com.google.gerrit.common.Nullable private java.lang.String canCreateCommit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit, java.lang.String userId) throws com.google.gerrit.server.permissions.PermissionBackendException { if (refControl.getProjectControl().isReachableFromHeadsOrTags(repo, commit)) { return null; } else if (testAuditLogged(RefPermission.UPDATE)) { return null; } return ((userId + "" lacks permission "") + (com.google.gerrit.common.data.Permission.PUSH)) + "" for creating new commit object""; }",133390ff265180cadf4b607271934153d2fc9621,"@com.google.gerrit.common.Nullable private java.lang.String canCreateCommit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.server.permissions.PermissionBackend.ForRef forRef) throws com.google.gerrit.server.permissions.PermissionBackendException { if (projectState.controlFor(user).isReachableFromHeadsOrTags(repo, commit)) { return null; } else if (testAuditLogged(forRef, RefPermission.UPDATE)) { return null; } return (((user.getAccountId()) + "" lacks permission "") + (com.google.gerrit.common.data.Permission.PUSH)) + "" for creating new commit object""; }",620ee0f0d31d5f1f1322d1049dc3a39cdb112e6c,2017-08-24 15:55:03,2
119094,gerrit-server_src_main_java_com_google_gerrit_server_project_CreateRefControl.java,,,private boolean testAuditLogged(com.google.gerrit.server.permissions.RefPermission p) throws com.google.gerrit.server.permissions.PermissionBackendException { try { permForRef.check(p); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } return true; },8b212bd3c056df6aa7bde3387d64e06db5ffe2a7,"private boolean testAuditLogged(com.google.gerrit.server.permissions.PermissionBackend.ForRef forRef, com.google.gerrit.server.permissions.RefPermission p) throws com.google.gerrit.server.permissions.PermissionBackendException { try { forRef.check(p); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } return true; }",02cfa5659e1f7574791d82a76627ef18ee0d974f,2017-08-24 15:55:03,2
119094,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,private boolean isProjectStatePermittingWrite() { return getProjectControl().getProject().getState().equals(ProjectState.ACTIVE); },2fa1669e87b8648fd173dd18898819cc746537c4,boolean isProjectStatePermittingWrite() { return getProjectControl().getProject().getState().equals(ProjectState.ACTIVE); },af3232522566a8ceec415cb4635b1bc6e64a7b2b,private boolean isProjectStatePermittingWrite() { return getProjectControl().getProject().getState().equals(ProjectState.ACTIVE); },2fa1669e87b8648fd173dd18898819cc746537c4,2017-08-24 15:55:03,2
119094,gerrit-server_src_main_java_com_google_gerrit_server_git_receive_ReceiveCommits.java,"private void parseCreate(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException { org.eclipse.jgit.revwalk.RevObject obj; try { obj = rp.getRevWalk().parseAny(cmd.getNewId()); } catch (java.io.IOException err) { logError(((((""Invalid object "" + (cmd.getNewId().name())) + "" for "") + (cmd.getRefName())) + "" creation""), err); reject(cmd, ""invalid object""); return; } logDebug(""Creating {}"", cmd); if ((com.google.gerrit.server.git.receive.ReceiveCommits.isHead(cmd)) && (!(isCommit(cmd)))) { return; } com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); java.lang.String rejectReason = ctl.canCreate(rp.getRepository(), obj); if (rejectReason != null) { reject(cmd, (""prohibited by Gerrit: "" + rejectReason)); return; } if (!(validRefOperation(cmd))) { return; } validateNewCommits(ctl, cmd); actualCommands.add(cmd); }",38ba4c000da54b01577747e7bc09be085b58b601,"private void parseCreate(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException { org.eclipse.jgit.revwalk.RevObject obj; try { obj = rp.getRevWalk().parseAny(cmd.getNewId()); } catch (java.io.IOException err) { logError(((((""Invalid object "" + (cmd.getNewId().name())) + "" for "") + (cmd.getRefName())) + "" creation""), err); reject(cmd, ""invalid object""); return; } logDebug(""Creating {}"", cmd); if ((com.google.gerrit.server.git.receive.ReceiveCommits.isHead(cmd)) && (!(isCommit(cmd)))) { return; } com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); java.lang.String rejectReason = createRefControlFactory.create(ctl).canCreateRef(rp.getRepository(), obj); if (rejectReason != null) { reject(cmd, (""prohibited by Gerrit: "" + rejectReason)); return; } if (!(validRefOperation(cmd))) { return; } validateNewCommits(ctl, cmd); actualCommands.add(cmd); }",4987181014ab97ec3309bb616cb482a98d62c388,"private void parseCreate(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { org.eclipse.jgit.revwalk.RevObject obj; try { obj = rp.getRevWalk().parseAny(cmd.getNewId()); } catch (java.io.IOException err) { logError(((((""Invalid object "" + (cmd.getNewId().name())) + "" for "") + (cmd.getRefName())) + "" creation""), err); reject(cmd, ""invalid object""); return; } logDebug(""Creating {}"", cmd); if ((com.google.gerrit.server.git.receive.ReceiveCommits.isHead(cmd)) && (!(isCommit(cmd)))) { return; } com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project.getName(), cmd.getRefName()); java.lang.String rejectReason = createRefControl.canCreateRef(rp.getRepository(), obj, user, branch); if (rejectReason != null) { reject(cmd, (""prohibited by Gerrit: "" + rejectReason)); return; } if (!(validRefOperation(cmd))) { return; } com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); validateNewCommits(ctl, cmd); actualCommands.add(cmd); }",3e693474400bc58a34cc3143815de3712f302aba,2017-08-24 15:55:03,2
121890,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_client_ProjectState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean permitsRead() { return (this) != (com.google.gerrit.extensions.client.ProjectState.HIDDEN); },e3bd95da47f1543057999396bce324f4b88b7729,public boolean permitsRead() { return permitsRead; },b1554ecb9f6fe161ce670f9a96b191b27c0674a5,2017-08-25 07:40:30,2
121890,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_client_ProjectState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean permitsWrite() { return (this) == (com.google.gerrit.extensions.client.ProjectState.ACTIVE); },70c92d86ce5bb448dd1b4b4a36e5f04cd0c68d05,public boolean permitsWrite() { return permitsWrite; },f295172bd267f8e92f4d89adfaa29bd23fb3a5c8,2017-08-25 07:40:30,2
118611,gerrit-server_src_main_java_com_google_gerrit_server_project_ChangeControl.java,"private boolean can(com.google.gerrit.server.permissions.ChangePermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { try { switch (perm) { case READ : return isVisible(db(), changeData()); case ABANDON : return canAbandon(db()); case DELETE : return canDelete(db(), getChange().getStatus()); case ADD_PATCH_SET : return canAddPatchSet(db()); case EDIT_ASSIGNEE : return canEditAssignee(); case EDIT_DESCRIPTION : return canEditDescription(); case EDIT_HASHTAGS : return canEditHashtags(); case EDIT_TOPIC_NAME : return canEditTopicName(); case REBASE : return canRebase(db()); case RESTORE : return canRestore(db()); case SUBMIT : return getRefControl().canSubmit(isOwner()); case REMOVE_REVIEWER : case SUBMIT_AS : return getRefControl().canPerform(perm.permissionName().get()); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.permissions.PermissionBackendException(""unavailable"", e); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",2a68399f897541996202e4d43dedb486ef45bd15,"private boolean can(com.google.gerrit.server.permissions.ChangePermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { try { switch (perm) { case READ : return isVisible(db(), changeData()); case ABANDON : return canAbandon(db()); case DELETE : return canDelete(db(), getChange().getStatus()); case ADD_PATCH_SET : return canAddPatchSet(db()); case EDIT_ASSIGNEE : return canEditAssignee(); case EDIT_DESCRIPTION : return canEditDescription(); case EDIT_HASHTAGS : return canEditHashtags(); case EDIT_TOPIC_NAME : return canEditTopicName(); case REMOVE_REVIEWER : return canRemoveReviewer(); case REBASE : return canRebase(db()); case RESTORE : return canRestore(db()); case SUBMIT : return getRefControl().canSubmit(isOwner()); case SUBMIT_AS : return getRefControl().canPerform(perm.permissionName().get()); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.permissions.PermissionBackendException(""unavailable"", e); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",58f772fafb029970d32c2ea4f23e1c23e35c48f2,"private boolean can(com.google.gerrit.server.permissions.ChangePermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { try { switch (perm) { case READ : return isVisible(db(), changeData()); case ABANDON : return canAbandon(db()); case DELETE : return canDelete(db(), getChange().getStatus()); case ADD_PATCH_SET : return canAddPatchSet(db()); case EDIT_ASSIGNEE : return canEditAssignee(); case EDIT_DESCRIPTION : return canEditDescription(); case EDIT_HASHTAGS : return canEditHashtags(); case EDIT_TOPIC_NAME : return canEditTopicName(); case REBASE : return canRebase(db()); case RESTORE : return canRestore(db()); case SUBMIT : return getRefControl().canSubmit(isOwner()); case REMOVE_REVIEWER : case SUBMIT_AS : return getRefControl().canPerform(perm.permissionName().get()); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.permissions.PermissionBackendException(""unavailable"", e); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",2a68399f897541996202e4d43dedb486ef45bd15,2017-08-28 07:35:32,4
121671,gerrit-server_src_main_java_com_google_gerrit_server_update_RetryHelper.java,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { com.github.rholder.retry.RetryerBuilder<T> builder = com.github.rholder.retry.RetryerBuilder.newBuilder(); if (migration.disableChangeReviewDb()) { builder.withStopStrategy(com.github.rholder.retry.StopStrategies.stopAfterDelay(firstNonNull(opts.timeout(), defaultTimeout).toMillis(), java.util.concurrent.TimeUnit.MILLISECONDS)).withWaitStrategy(waitStrategy).retryIfException(com.google.gerrit.server.update.RetryHelper::isLockFailure); if ((opts.listener()) != null) { builder.withRetryListener(opts.listener()); } } else { } return builder.build().call(() -> action.call(updateFactory)); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { if ((e.getCause()) != null) { com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), com.google.gerrit.extensions.restapi.RestApiException.class); } throw new com.google.gerrit.server.update.UpdateException(e); } }",abc50f897bd41db87fcd666d66ecf10b383e49b7,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(opts.listener()); try { com.github.rholder.retry.RetryerBuilder<T> builder = com.github.rholder.retry.RetryerBuilder.newBuilder(); builder.withRetryListener(listener); if (migration.disableChangeReviewDb()) { builder.withStopStrategy(com.github.rholder.retry.StopStrategies.stopAfterDelay(firstNonNull(opts.timeout(), defaultTimeout).toMillis(), java.util.concurrent.TimeUnit.MILLISECONDS)).withWaitStrategy(waitStrategy).retryIfException(com.google.gerrit.server.update.RetryHelper::isLockFailure); } else { } return builder.build().call(() -> action.call(updateFactory)); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { if (e instanceof com.github.rholder.retry.RetryException) { metrics.timeoutCount.increment(); } if ((e.getCause()) != null) { com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), com.google.gerrit.extensions.restapi.RestApiException.class); } throw new com.google.gerrit.server.update.UpdateException(e); } finally { if ((listener.getAttemptCount()) > 0) { metrics.attemptCounts.record(listener.getAttemptCount()); } } }",95d8f3dd4a081f24eb142eb1df692b73188ea8c5,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.server.update.RetryHelper.MetricListener listener = null; try { com.github.rholder.retry.RetryerBuilder<T> builder = com.github.rholder.retry.RetryerBuilder.newBuilder(); if (migration.disableChangeReviewDb()) { listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(opts.listener()); builder.withRetryListener(listener).withStopStrategy(com.github.rholder.retry.StopStrategies.stopAfterDelay(firstNonNull(opts.timeout(), defaultTimeout).toMillis(), java.util.concurrent.TimeUnit.MILLISECONDS)).withWaitStrategy(waitStrategy).retryIfException(com.google.gerrit.server.update.RetryHelper::isLockFailure); } else { } return builder.build().call(() -> action.call(updateFactory)); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { if (e instanceof com.github.rholder.retry.RetryException) { metrics.timeoutCount.increment(); } if ((e.getCause()) != null) { com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), com.google.gerrit.extensions.restapi.RestApiException.class); } throw new com.google.gerrit.server.update.UpdateException(e); } finally { if (listener != null) { metrics.attemptCounts.record(listener.getAttemptCount()); } } }",c463e54341fc865ce1d3beb449b7fd8371015b02,2017-08-28 15:12:03,2
122251,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeInserter.java,"private void validate(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { if (!(validate)) { return; } com.google.gerrit.server.permissions.PermissionBackend.ForRef perm = permissionBackend.user(ctx.getUser()).project(ctx.getProject()).ref(refName); try { com.google.gerrit.server.project.RefControl refControl = projectControlFactory.controlFor(ctx.getProject(), ctx.getUser()).controlForRef(refName); try (com.google.gerrit.server.events.CommitReceivedEvent event = new com.google.gerrit.server.events.CommitReceivedEvent(cmd, refControl.getProjectControl().getProject(), change.getDest().get(), ctx.getRevWalk().getObjectReader(), commitId, ctx.getIdentifiedUser())) { commitValidatorsFactory.forGerritCommits(perm, refControl, new com.google.gerrit.server.ssh.NoSshInfo(), ctx.getRevWalk()).validate(event); } } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getFullMessage()); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }",3022f30a7c2ab2057785e07b23dbe5307794dfcf,"private void validate(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { if (!(validate)) { return; } com.google.gerrit.server.permissions.PermissionBackend.ForRef perm = permissionBackend.user(ctx.getUser()).project(ctx.getProject()).ref(refName); try { try (com.google.gerrit.server.events.CommitReceivedEvent event = new com.google.gerrit.server.events.CommitReceivedEvent(cmd, projectControlFactory.controlFor(ctx.getProject(), ctx.getUser()).getProject(), change.getDest().get(), ctx.getRevWalk().getObjectReader(), commitId, ctx.getIdentifiedUser())) { commitValidatorsFactory.forGerritCommits(perm, new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getIdentifiedUser(), new com.google.gerrit.server.ssh.NoSshInfo(), ctx.getRevWalk()).validate(event); } } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getFullMessage()); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }",9135047796766735ed06e9b5dd9492fd6d9f3e01,"private void validate(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { if (!(validate)) { return; } com.google.gerrit.server.permissions.PermissionBackend.ForRef perm = permissionBackend.user(ctx.getUser()).project(ctx.getProject()).ref(refName); try { try (com.google.gerrit.server.events.CommitReceivedEvent event = new com.google.gerrit.server.events.CommitReceivedEvent(cmd, projectCache.checkedGet(ctx.getProject()).getProject(), change.getDest().get(), ctx.getRevWalk().getObjectReader(), commitId, ctx.getIdentifiedUser())) { commitValidatorsFactory.forGerritCommits(perm, new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getIdentifiedUser(), new com.google.gerrit.server.ssh.NoSshInfo(), ctx.getRevWalk()).validate(event); } } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getFullMessage()); } }",b0d62a6e94969806758fdedd8aa00d8bf1b80244,2017-08-28 15:50:07,2
122310,gerrit-server_src_main_java_com_google_gerrit_server_change_Revisions.java,"private java.util.List<com.google.gerrit.server.change.RevisionResource> loadEdit(com.google.gerrit.server.change.ChangeResource change, com.google.gerrit.reviewdb.client.RevId revid) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change.getChange()); if (edit.isPresent()) { com.google.gerrit.reviewdb.client.PatchSet ps = new com.google.gerrit.reviewdb.client.PatchSet(new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), 0)); com.google.gerrit.reviewdb.client.RevId editRevId = new com.google.gerrit.reviewdb.client.RevId(org.eclipse.jgit.lib.ObjectId.toString(edit.get().getEditCommit())); ps.setRevision(editRevId); if ((revid == null) || (editRevId.equals(revid))) { return java.util.Collections.singletonList(new com.google.gerrit.server.change.RevisionResource(change, ps, edit)); } } return java.util.Collections.emptyList(); }",2a95f916699abb680e336faf102429d359bac1d8,"private java.util.List<com.google.gerrit.server.change.RevisionResource> loadEdit(com.google.gerrit.server.change.ChangeResource change, com.google.gerrit.reviewdb.client.RevId revid) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change.getNotes(), change.getUser()); if (edit.isPresent()) { com.google.gerrit.reviewdb.client.PatchSet ps = new com.google.gerrit.reviewdb.client.PatchSet(new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), 0)); com.google.gerrit.reviewdb.client.RevId editRevId = new com.google.gerrit.reviewdb.client.RevId(org.eclipse.jgit.lib.ObjectId.toString(edit.get().getEditCommit())); ps.setRevision(editRevId); if ((revid == null) || (editRevId.equals(revid))) { return java.util.Collections.singletonList(new com.google.gerrit.server.change.RevisionResource(change, ps, edit)); } } return java.util.Collections.emptyList(); }",4127f684d1ccf7ddfcdf8826b2c3ed09192f2e78,"private java.util.List<com.google.gerrit.server.change.RevisionResource> loadEdit(com.google.gerrit.server.change.ChangeResource change, com.google.gerrit.reviewdb.client.RevId revid) throws com.google.gerrit.extensions.restapi.AuthException, java.io.IOException { java.util.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change.getNotes(), change.getUser()); if (edit.isPresent()) { com.google.gerrit.reviewdb.client.PatchSet ps = new com.google.gerrit.reviewdb.client.PatchSet(new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), 0)); com.google.gerrit.reviewdb.client.RevId editRevId = new com.google.gerrit.reviewdb.client.RevId(org.eclipse.jgit.lib.ObjectId.toString(edit.get().getEditCommit())); ps.setRevision(editRevId); if ((revid == null) || (editRevId.equals(revid))) { return java.util.Collections.singletonList(new com.google.gerrit.server.change.RevisionResource(change, ps, edit)); } } return java.util.Collections.emptyList(); }",f19fc76574cc3afbf386f5c150e21df68bffcaa6,2017-08-29 13:28:50,4
122310,gerrit-server_src_main_java_com_google_gerrit_server_patch_PatchScriptFactory.java,"private org.eclipse.jgit.lib.ObjectId getEditRev() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException, java.io.IOException { edit = editReader.byChange(change); if (edit.isPresent()) { return edit.get().getEditCommit(); } throw new com.google.gerrit.server.project.NoSuchChangeException(change.getId()); }",b66172d0703c1c42c43e693d9f0cd17b07339754,"private org.eclipse.jgit.lib.ObjectId getEditRev() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException, java.io.IOException { edit = editReader.byChange(control.getNotes(), control.getUser()); if (edit.isPresent()) { return edit.get().getEditCommit(); } throw new com.google.gerrit.server.project.NoSuchChangeException(change.getId()); }",3f585feeb6bbcdb269d71ee32392bcc8b07a6240,"private org.eclipse.jgit.lib.ObjectId getEditRev() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException, java.io.IOException { edit = editReader.byChange(control.getNotes()); if (edit.isPresent()) { return edit.get().getEditCommit(); } throw new com.google.gerrit.server.project.NoSuchChangeException(change.getId()); }",35f523cfa2cfe5eeca305a06f5384607b60c0a31,2017-08-29 13:28:50,4
122310,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeIncludedIn.java,"@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.project.ChangeControl ctl = rsrc.getControl(); com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.current(db.get(), rsrc.getNotes()); com.google.gerrit.reviewdb.client.Project.NameKey project = ctl.getProject().getNameKey(); return includedIn.apply(project, ps.getRevision().get()); }",b39b21f0c1973fd6379dce3636e1b0f3991bd5b8,"@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.current(db.get(), rsrc.getNotes()); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProject(); return includedIn.apply(project, ps.getRevision().get()); }",42ecba23eab03b6c876c66e80abf951a11f0794c,"@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.current(db.get(), rsrc.getNotes()); return includedIn.apply(rsrc.getProject(), ps.getRevision().get()); }",c69ea5dd910af71ee2dad7839028657b0122626f,2017-08-29 13:28:50,4
122310,gerrit-server_src_main_java_com_google_gerrit_server_change_Abandon.java,"@java.lang.Override protected com.google.gerrit.extensions.common.ChangeInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, com.google.gerrit.extensions.api.changes.AbandonInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { req.permissions().database(dbProvider).check(ChangePermission.ABANDON); com.google.gerrit.extensions.api.changes.NotifyHandling notify = ((input.notify) == null) ? defaultNotify(req.getControl()) : input.notify; com.google.gerrit.reviewdb.client.Change change = abandon(updateFactory, req.getControl(), input.message, notify, notifyUtil.resolveAccounts(input.notifyDetails)); return json.noOptions().format(change); }",c85887b85a7dc5055b1ce9ffc75a88e494c6e091,"@java.lang.Override protected com.google.gerrit.extensions.common.ChangeInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, com.google.gerrit.extensions.api.changes.AbandonInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { req.permissions().database(dbProvider).check(ChangePermission.ABANDON); com.google.gerrit.extensions.api.changes.NotifyHandling notify = ((input.notify) == null) ? defaultNotify(req.getChange()) : input.notify; com.google.gerrit.reviewdb.client.Change change = abandon(updateFactory, req.getControl(), input.message, notify, notifyUtil.resolveAccounts(input.notifyDetails)); return json.noOptions().format(change); }",7a5bd8f5ab5177228d8d2efdb6c5b180d97f01a4,"@java.lang.Override protected com.google.gerrit.extensions.common.ChangeInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, com.google.gerrit.extensions.api.changes.AbandonInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { req.permissions().database(dbProvider).check(ChangePermission.ABANDON); com.google.gerrit.extensions.api.changes.NotifyHandling notify = ((input.notify) == null) ? defaultNotify(req.getChange()) : input.notify; com.google.gerrit.reviewdb.client.Change change = abandon(updateFactory, req.getNotes(), req.getUser(), input.message, notify, notifyUtil.resolveAccounts(input.notifyDetails)); return json.noOptions().format(change); }",759035c28e92a4f1c961f42fb5bef91506ea77eb,2017-08-29 13:28:50,4
122310,gerrit-server_src_main_java_com_google_gerrit_server_change_Abandon.java,"public com.google.gerrit.reviewdb.client.Change abandon(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.project.ChangeControl control) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { return abandon(updateFactory, control, """", defaultNotify(control), com.google.common.collect.ImmutableListMultimap.of()); }",965bef3aa7cef7d5793287b2b0b64c066347ca5b,"public com.google.gerrit.reviewdb.client.Change abandon(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.project.ChangeControl control) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { return abandon(updateFactory, control, """", defaultNotify(control.getChange()), com.google.common.collect.ImmutableListMultimap.of()); }",a4f6964bc8fde5b6673f69b931394835016631bd,"public com.google.gerrit.reviewdb.client.Change abandon(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { return abandon(updateFactory, notes, user, """", defaultNotify(notes.getChange()), com.google.common.collect.ImmutableListMultimap.of()); }",ffdea8831de0c2fad1826b45733ad41b0c4148c5,2017-08-29 13:28:50,4
122310,gerrit-server_src_main_java_com_google_gerrit_server_change_Abandon.java,"public com.google.gerrit.reviewdb.client.Change abandon(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.project.ChangeControl control, java.lang.String msgTxt) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { return abandon(updateFactory, control, msgTxt, defaultNotify(control), com.google.common.collect.ImmutableListMultimap.of()); }",d3c553883979b1069089feef5ef716f6c03c8590,"public com.google.gerrit.reviewdb.client.Change abandon(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.project.ChangeControl control, java.lang.String msgTxt) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { return abandon(updateFactory, control, msgTxt, defaultNotify(control.getChange()), com.google.common.collect.ImmutableListMultimap.of()); }",646a46334db72c0a8fc565a8658fd41bf552e109,"public com.google.gerrit.reviewdb.client.Change abandon(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser user, java.lang.String msgTxt) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { return abandon(updateFactory, notes, user, msgTxt, defaultNotify(notes.getChange()), com.google.common.collect.ImmutableListMultimap.of()); }",e21ef1e06ee0de4702a35a999c32bce4986b2737,2017-08-29 13:28:50,4
122310,gerrit-server_src_main_java_com_google_gerrit_server_edit_ChangeEditModifier.java,"private java.util.Optional<com.google.gerrit.server.edit.ChangeEdit> lookupChangeEdit(com.google.gerrit.server.project.ChangeControl changeControl) throws com.google.gerrit.extensions.restapi.AuthException, java.io.IOException { return changeEditUtil.byChange(changeControl); }",f57ff488dd773966a087cfb8400147b5e271a360,"private java.util.Optional<com.google.gerrit.server.edit.ChangeEdit> lookupChangeEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, java.io.IOException { return changeEditUtil.byChange(notes, currentUser.get()); }",3da37ead32f2d0a7c45ad6644b78e3a17d92e407,"private java.util.Optional<com.google.gerrit.server.edit.ChangeEdit> lookupChangeEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, java.io.IOException { return changeEditUtil.byChange(notes); }",06a65aa9e0f7f8e4a81184b721547ff711c40adb,2017-08-29 13:28:50,4
123250,gerrit-server_src_main_java_com_google_gerrit_server_ChangeFinder.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void checkedAdd(com.google.gerrit.server.query.change.ChangeData cd, java.util.List<com.google.gerrit.server.project.ChangeControl> ctls, com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { try { ctls.add(cd.changeControl(user)); } catch (com.google.gwtorm.server.OrmException e) { if (!(e instanceof com.google.gerrit.server.project.NoSuchChangeException)) { throw e; } } }",362ca7c7bb67404a49eafacda5fa5bed57201431,"private static void checkedAdd(com.google.gerrit.server.query.change.ChangeData cd, java.util.List<com.google.gerrit.server.project.ChangeControl> ctls, com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { try { ctls.add(cd.changeControl(user)); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { } }",354809b85ffb931d8176ba8c493a1ee463c1ff7e,2017-08-29 15:00:02,2
115151,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushAccountConfigToUserBranchForReviewIsRejectedOnSubmitIfPreferredEmailIsInvalid() throws java.lang.Exception { java.lang.String userRef = com.google.gerrit.reviewdb.client.RefNames.refsUsers(admin.id); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, (userRef + "":userRef"")); allUsersRepo.reset(""userRef""); java.lang.String noEmail = ""no.email""; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_PREFERRED_EMAIL, noEmail); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Update account config"", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + userRef)); r.assertOkStatus(); accountIndexedCounter.assertNoReindex(); assertThat(r.getChange().change().getDest().get()).isEqualTo(userRef); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format((""invalid account configuration: invalid preferred email '%s' for account '%s';"" + "" account '%s' has no external ID for its preferred email '%s'""), noEmail, admin.id, admin.id, noEmail)); gApi.changes().id(r.getChangeId()).current().submit(); }",cd6645a3e7f5f3c9aacfb79aab1817afc4fbd397,"@org.junit.Test public void lookUpByPreferredEmail() throws java.lang.Exception { java.lang.String prefix = ""foo.preferred""; java.lang.String prefEmail = prefix + ""@example.com""; com.google.gerrit.acceptance.TestAccount foo = accountCreator.create(name(""foo"")); accountsUpdate.create().update(foo.id, ( a) -> a.setPreferredEmail(prefEmail)); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> accountsByPrefEmail = emails.getAccountFor(prefEmail); assertThat(accountsByPrefEmail).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(accountsByPrefEmail)).isEqualTo(foo.id); accountsByPrefEmail = emails.getAccountFor(prefix); assertThat(accountsByPrefEmail).isEmpty(); accountsByPrefEmail = emails.getAccountFor(prefEmail.toUpperCase(java.util.Locale.US)); assertThat(accountsByPrefEmail).isEmpty(); }",a0f89dd4c472a3effadeb4def8ce52f7555aeb89,2017-08-29 16:16:01,14
115150,gerrit-server_src_main_java_com_google_gerrit_server_account_PutActive.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutActive.Input input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicBoolean alreadyActive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(dbProvider.get(), rsrc.getUser().getAccountId(), ( a) -> { if (a.isActive()) { alreadyActive.set(true); } else { a.setActive(true); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return alreadyActive.get() ? com.google.gerrit.extensions.restapi.Response.ok("""") : com.google.gerrit.extensions.restapi.Response.created(""""); }",27d2df9c70e2fc5693e7bece3f3c18aba395528c,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutActive.Input input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicBoolean alreadyActive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(rsrc.getUser().getAccountId(), ( a) -> { if (a.isActive()) { alreadyActive.set(true); } else { a.setActive(true); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return alreadyActive.get() ? com.google.gerrit.extensions.restapi.Response.ok("""") : com.google.gerrit.extensions.restapi.Response.created(""""); }",c3ef0b98141d3738a47d190570c4cabb7960fd8e,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutActive.Input input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return setInactiveFlag.activate(rsrc.getUser()); }",447b67a988b6b8b6c2363e83bc5689421f8773c7,2017-08-29 16:16:01,12
115150,gerrit-server_src_main_java_com_google_gerrit_server_account_DeleteActive.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.DeleteActive.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) == (rsrc.getUser())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""cannot deactivate own account""); } java.util.concurrent.atomic.AtomicBoolean alreadyInactive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(dbProvider.get(), rsrc.getUser().getAccountId(), ( a) -> { if (!(a.isActive())) { alreadyInactive.set(true); } else { a.setActive(false); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } if (alreadyInactive.get()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""account not active""); } return com.google.gerrit.extensions.restapi.Response.none(); }",8ec42783381c2698a15381bcb694e58490361dd5,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.DeleteActive.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) == (rsrc.getUser())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""cannot deactivate own account""); } java.util.concurrent.atomic.AtomicBoolean alreadyInactive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(rsrc.getUser().getAccountId(), ( a) -> { if (!(a.isActive())) { alreadyInactive.set(true); } else { a.setActive(false); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } if (alreadyInactive.get()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""account not active""); } return com.google.gerrit.extensions.restapi.Response.none(); }",326e31284c00b0c09eea5d37c0d391d9a44f9e2f,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.DeleteActive.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) == (rsrc.getUser())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""cannot deactivate own account""); } return setInactiveFlag.deactivate(rsrc.getUser()); }",e2128ac7a02296b880fa313fd7322511788c4fe5,2017-08-29 16:16:01,12
115151,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushAccountConfigToUserBranchIsRejectedIfPreferredEmailIsInvalid() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, ((com.google.gerrit.reviewdb.client.RefNames.refsUsers(admin.id)) + "":userRef"")); allUsersRepo.reset(""userRef""); java.lang.String noEmail = ""no.email""; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_PREFERRED_EMAIL, noEmail); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Update account config"", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(RefNames.REFS_USERS_SELF); r.assertErrorStatus(""invalid account configuration""); r.assertMessage(java.lang.String.format(""invalid preferred email '%s' for account '%s'"", noEmail, admin.id)); r.assertMessage(java.lang.String.format(""account '%s' has no external ID for its preferred email '%s'"", admin.id, noEmail)); accountIndexedCounter.assertNoReindex(); }",367ad32ff19d8494419b418e6e44b30b5b8b2069,"@org.junit.Test public void pushAccountConfigToUserBranchForReviewIsRejectedOnSubmitIfPreferredEmailIsInvalid() throws java.lang.Exception { java.lang.String userRef = com.google.gerrit.reviewdb.client.RefNames.refsUsers(admin.id); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, (userRef + "":userRef"")); allUsersRepo.reset(""userRef""); java.lang.String noEmail = ""no.email""; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_PREFERRED_EMAIL, noEmail); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Update account config"", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + userRef)); r.assertOkStatus(); accountIndexedCounter.assertNoReindex(); assertThat(r.getChange().change().getDest().get()).isEqualTo(userRef); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format(""invalid account configuration: invalid preferred email '%s' for account '%s'"", noEmail, admin.id)); gApi.changes().id(r.getChangeId()).current().submit(); }",25ed7e8ce31fb69624239652c2d4ed5cf418fd72,2017-08-29 16:16:01,14
115151,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushAccountConfigToUserBranchForReviewIsRejOnSubmitIfPrefEmailDoesNotExistAsExtId() throws java.lang.Exception { java.lang.String userRef = com.google.gerrit.reviewdb.client.RefNames.refsUsers(admin.id); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, (userRef + "":userRef"")); allUsersRepo.reset(""userRef""); java.lang.String email = ""some.email@example.com""; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_PREFERRED_EMAIL, email); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Update account config"", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + userRef)); r.assertOkStatus(); accountIndexedCounter.assertNoReindex(); assertThat(r.getChange().change().getDest().get()).isEqualTo(userRef); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format((""invalid account configuration:"" + "" account '%s' has no external ID for its preferred email '%s'""), admin.id, email)); gApi.changes().id(r.getChangeId()).current().submit(); }",04621810d4130ebe550e0b8b895ca118aaf31385,"@org.junit.Test public void pushAccountConfigWithPrefEmailThatDoesNotExistAsExtIdToUserBranchForReviewAndSubmit() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount foo = accountCreator.create(name(""foo"")); java.lang.String userRef = com.google.gerrit.reviewdb.client.RefNames.refsUsers(foo.id); accountIndexedCounter.clear(); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, (userRef + "":userRef"")); allUsersRepo.reset(""userRef""); java.lang.String email = ""some.email@example.com""; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_PREFERRED_EMAIL, email); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Update account config"", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + userRef)); r.assertOkStatus(); accountIndexedCounter.assertNoReindex(); assertThat(r.getChange().change().getDest().get()).isEqualTo(userRef); setApiUser(foo); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(r.getChangeId()).current().submit(); accountIndexedCounter.assertReindexOf(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().self().get(); assertThat(info.email).isEqualTo(email); assertThat(info.name).isEqualTo(foo.fullName); }",dcf913e72b14d6ab9aa009bb7ff1b5251c285eb2,2017-08-29 16:16:01,14
115151,gerrit-server_src_main_java_com_google_gerrit_server_git_validators_CommitValidators.java,"public com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, com.google.gerrit.server.project.RefControl refctl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.revwalk.RevWalk rw) { com.google.gerrit.server.IdentifiedUser user = refctl.getUser().asIdentifiedUser(); return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(perm), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(perm, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(user, perm, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(user, perm, refctl.getProjectControl().getProjectState()), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refctl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refctl, rw, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators), new com.google.gerrit.server.git.validators.CommitValidators.ExternalIdUpdateListener(allUsers, externalIdsConsistencyChecker), new com.google.gerrit.server.git.validators.CommitValidators.AccountValidator(allUsers))); }",7311970a0ddb9471126563f3b424e3e0febedb39,"public com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, com.google.gerrit.server.project.RefControl refctl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.revwalk.RevWalk rw) { com.google.gerrit.server.IdentifiedUser user = refctl.getUser().asIdentifiedUser(); return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(perm), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(perm, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(user, perm, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(user, perm, refctl.getProjectControl().getProjectState()), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refctl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refctl, rw, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators), new com.google.gerrit.server.git.validators.CommitValidators.ExternalIdUpdateListener(allUsers, externalIdsConsistencyChecker), new com.google.gerrit.server.git.validators.CommitValidators.AccountCommitValidator(allUsers, accountValidator))); }",9d2c4e975bcded141a1de9a3164e36ad5a4cb3e3,"public com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, com.google.gerrit.reviewdb.client.Branch.NameKey branch, com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.revwalk.RevWalk rw) throws java.io.IOException { return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(perm), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(perm, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(user, perm, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(user, perm, projectCache.checkedGet(branch.getParentKey())), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(projectCache.checkedGet(branch.getParentKey()), user, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(branch, user, rw, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators), new com.google.gerrit.server.git.validators.CommitValidators.ExternalIdUpdateListener(allUsers, externalIdsConsistencyChecker), new com.google.gerrit.server.git.validators.CommitValidators.AccountCommitValidator(allUsers, accountValidator))); }",ce574e427430bdd884c2c3d57d028da896ab3ee4,2017-08-29 16:16:01,14
115151,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushAccountConfigToUserBranchPreferredEmailDoesNotExistAsExtIdButNotChanged() throws java.lang.Exception { TestAccount foo = accountCreator.create(name(""foo"")); java.lang.String userRef = com.google.gerrit.reviewdb.client.RefNames.refsUsers(foo.id); java.lang.String email = ""some.email@example.com""; accountsUpdate.create().update(foo.id, ( a) -> a.setPreferredEmail(email)); accountIndexedCounter.clear(); com.google.gerrit.reviewdb.client.AccountGroup adminGroup = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""Administrators"")); grant(allUsers, userRef, Permission.PUSH, false, adminGroup.getGroupUUID()); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, (userRef + "":userRef"")); allUsersRepo.reset(""userRef""); java.lang.String status = ""in vacation""; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_STATUS, status); pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Update account config"", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(userRef).assertOkStatus(); accountIndexedCounter.assertReindexOf(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.id.get()).get(); assertThat(info.email).isEqualTo(email); assertThat(info.name).isEqualTo(foo.fullName); assertThat(info.status).isEqualTo(status); }",ab59f702d2ccc60f50304f74fcb2984591195717,"@org.junit.Test public void pushAccountConfigToUserBranchIfPreferredEmailDoesNotExistAsExtId() throws java.lang.Exception { TestAccount foo = accountCreator.create(name(""foo"")); java.lang.String userRef = com.google.gerrit.reviewdb.client.RefNames.refsUsers(foo.id); accountIndexedCounter.clear(); com.google.gerrit.reviewdb.client.AccountGroup adminGroup = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""Administrators"")); grant(allUsers, userRef, Permission.PUSH, false, adminGroup.getGroupUUID()); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, (userRef + "":userRef"")); allUsersRepo.reset(""userRef""); java.lang.String email = ""some.email@example.com""; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_PREFERRED_EMAIL, email); pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Update account config"", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(userRef).assertOkStatus(); accountIndexedCounter.assertReindexOf(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.id.get()).get(); assertThat(info.email).isEqualTo(email); assertThat(info.name).isEqualTo(foo.fullName); }",90c9940a446b49295fcf1641ba94cf32fa74f87e,2017-08-29 16:16:01,14
115151,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushAccountConfigToUserBranchIsRejectedIfPreferredEmailDoesNotExistAsExtId() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, ((com.google.gerrit.reviewdb.client.RefNames.refsUsers(admin.id)) + "":userRef"")); allUsersRepo.reset(""userRef""); java.lang.String email = ""some.email@example.com""; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_PREFERRED_EMAIL, email); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Update account config"", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(RefNames.REFS_USERS_SELF); r.assertErrorStatus(""invalid account configuration""); r.assertMessage(java.lang.String.format(""account '%s' has no external ID for its preferred email '%s'"", admin.id, email)); accountIndexedCounter.assertNoReindex(); }",1a13f35056f442a778e39ee67056e813eea23d3c,"@org.junit.Test public void pushAccountConfigToUserBranchIsRejectedIfPreferredEmailIsInvalid() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, ((com.google.gerrit.reviewdb.client.RefNames.refsUsers(admin.id)) + "":userRef"")); allUsersRepo.reset(""userRef""); java.lang.String noEmail = ""no.email""; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_PREFERRED_EMAIL, noEmail); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Update account config"", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(RefNames.REFS_USERS_SELF); r.assertErrorStatus(""invalid account configuration""); r.assertMessage(java.lang.String.format(""invalid preferred email '%s' for account '%s'"", noEmail, admin.id)); accountIndexedCounter.assertNoReindex(); }",9f34d1d926c9b0c819d1336f1cb1f29c48759efd,2017-08-29 16:16:01,14
123190,gerrit-server_src_main_java_com_google_gerrit_server_group_ListGroups.java,"private java.util.List<com.google.gerrit.extensions.common.GroupInfo> suggestGroups() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (conflictingSuggestParameters()) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""You should only have no more than one --project and -n with --suggest""); } java.util.List<com.google.gerrit.common.data.GroupReference> groupRefs = com.google.common.collect.Lists.newArrayList(com.google.common.collect.Iterables.limit(groupBackend.suggest(suggest, com.google.common.collect.Iterables.getFirst(projects, null)), ((limit) <= 0 ? 10 : java.lang.Math.min(limit, 10)))); java.util.List<com.google.gerrit.extensions.common.GroupInfo> groupInfos = com.google.common.collect.Lists.newArrayListWithCapacity(groupRefs.size()); for (com.google.gerrit.common.data.GroupReference ref : groupRefs) { com.google.gerrit.common.data.GroupDescription.Basic desc = groupBackend.get(ref.getUUID()); if (desc != null) { groupInfos.add(json.addOptions(options).format(desc)); } } return groupInfos; }",7edbdd87be8358f39a188e8f3323a0b095136858,"private java.util.List<com.google.gerrit.extensions.common.GroupInfo> suggestGroups() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (conflictingSuggestParameters()) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""You should only have no more than one --project and -n with --suggest""); } java.util.List<com.google.gerrit.common.data.GroupReference> groupRefs = com.google.common.collect.Lists.newArrayList(com.google.common.collect.Iterables.limit(groupBackend.suggest(suggest, (!(projects.isEmpty()) ? com.google.common.collect.Iterables.getFirst(projects, null).getProjectState() : null)), ((limit) <= 0 ? 10 : java.lang.Math.min(limit, 10)))); java.util.List<com.google.gerrit.extensions.common.GroupInfo> groupInfos = com.google.common.collect.Lists.newArrayListWithCapacity(groupRefs.size()); for (com.google.gerrit.common.data.GroupReference ref : groupRefs) { com.google.gerrit.common.data.GroupDescription.Basic desc = groupBackend.get(ref.getUUID()); if (desc != null) { groupInfos.add(json.addOptions(options).format(desc)); } } return groupInfos; }",41c72e17c3fc19f720795bc3e4f15cdc2b46bc36,"private java.util.List<com.google.gerrit.extensions.common.GroupInfo> suggestGroups() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (conflictingSuggestParameters()) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""You should only have no more than one --project and -n with --suggest""); } java.util.List<com.google.gerrit.common.data.GroupReference> groupRefs = com.google.common.collect.Lists.newArrayList(com.google.common.collect.Iterables.limit(groupBackend.suggest(suggest, projects.stream().findFirst().map(( pc) -> pc.getProjectState()).orElse(null)), ((limit) <= 0 ? 10 : java.lang.Math.min(limit, 10)))); java.util.List<com.google.gerrit.extensions.common.GroupInfo> groupInfos = com.google.common.collect.Lists.newArrayListWithCapacity(groupRefs.size()); for (com.google.gerrit.common.data.GroupReference ref : groupRefs) { com.google.gerrit.common.data.GroupDescription.Basic desc = groupBackend.get(ref.getUUID()); if (desc != null) { groupInfos.add(json.addOptions(options).format(desc)); } } return groupInfos; }",34d9f96d0313ae7ad1094ea090f845effd1c4b58,2017-08-30 09:41:03,3
123190,gerrit-server_src_main_java_com_google_gerrit_server_change_CreateChange.java,"private org.eclipse.jgit.revwalk.RevCommit newMergeCommit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectInserter oi, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.server.project.ProjectControl projectControl, org.eclipse.jgit.revwalk.RevCommit mergeTip, com.google.gerrit.extensions.common.MergeInput merge, org.eclipse.jgit.lib.PersonIdent authorIdent, java.lang.String commitMessage) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException { if (com.google.common.base.Strings.isNullOrEmpty(merge.source)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""merge.source must be non-empty""); } com.google.gerrit.server.project.ProjectState state = projectControl.getProjectState(); org.eclipse.jgit.revwalk.RevCommit sourceCommit = com.google.gerrit.server.git.MergeUtil.resolveCommit(repo, rw, merge.source); if (!(commits.canRead(state, repo, sourceCommit))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""do not have read permission for: "" + (merge.source))); } com.google.gerrit.server.git.MergeUtil mergeUtil = mergeUtilFactory.create(state); java.lang.String mergeStrategy = com.google.common.base.MoreObjects.firstNonNull(com.google.common.base.Strings.emptyToNull(merge.strategy), mergeUtil.mergeStrategyName()); return com.google.gerrit.server.git.MergeUtil.createMergeCommit(oi, repo.getConfig(), mergeTip, sourceCommit, mergeStrategy, authorIdent, commitMessage, rw); }",ce29c52be2d1ecc858c08db262c45f43a30c225f,"private org.eclipse.jgit.revwalk.RevCommit newMergeCommit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectInserter oi, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.server.project.ProjectState projectState, org.eclipse.jgit.revwalk.RevCommit mergeTip, com.google.gerrit.extensions.common.MergeInput merge, org.eclipse.jgit.lib.PersonIdent authorIdent, java.lang.String commitMessage) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException { if (com.google.common.base.Strings.isNullOrEmpty(merge.source)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""merge.source must be non-empty""); } com.google.gerrit.server.project.ProjectState state = projectState; org.eclipse.jgit.revwalk.RevCommit sourceCommit = com.google.gerrit.server.git.MergeUtil.resolveCommit(repo, rw, merge.source); if (!(commits.canRead(state, repo, sourceCommit))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""do not have read permission for: "" + (merge.source))); } com.google.gerrit.server.git.MergeUtil mergeUtil = mergeUtilFactory.create(state); java.lang.String mergeStrategy = com.google.common.base.MoreObjects.firstNonNull(com.google.common.base.Strings.emptyToNull(merge.strategy), mergeUtil.mergeStrategyName()); return com.google.gerrit.server.git.MergeUtil.createMergeCommit(oi, repo.getConfig(), mergeTip, sourceCommit, mergeStrategy, authorIdent, commitMessage, rw); }",bf47515b6c2e48d6fdf2b434695a121f0c8c49e4,"private org.eclipse.jgit.revwalk.RevCommit newMergeCommit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectInserter oi, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.server.project.ProjectState projectState, org.eclipse.jgit.revwalk.RevCommit mergeTip, com.google.gerrit.extensions.common.MergeInput merge, org.eclipse.jgit.lib.PersonIdent authorIdent, java.lang.String commitMessage) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException { if (com.google.common.base.Strings.isNullOrEmpty(merge.source)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""merge.source must be non-empty""); } org.eclipse.jgit.revwalk.RevCommit sourceCommit = com.google.gerrit.server.git.MergeUtil.resolveCommit(repo, rw, merge.source); if (!(commits.canRead(projectState, repo, sourceCommit))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""do not have read permission for: "" + (merge.source))); } com.google.gerrit.server.git.MergeUtil mergeUtil = mergeUtilFactory.create(projectState); java.lang.String mergeStrategy = com.google.common.base.MoreObjects.firstNonNull(com.google.common.base.Strings.emptyToNull(merge.strategy), mergeUtil.mergeStrategyName()); return com.google.gerrit.server.git.MergeUtil.createMergeCommit(oi, repo.getConfig(), mergeTip, sourceCommit, mergeStrategy, authorIdent, commitMessage, rw); }",b3e645bf04fea9469b5da9f2afde56f87e4b4a5a,2017-08-30 09:41:03,3
120591,gerrit-server_src_main_java_com_google_gerrit_server_index_change_AllChangesIndexer.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.lang.Void call() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { for (com.google.gerrit.server.notedb.ChangeNotes notes : notesFactory.scan(repo, db, project)) { try { indexer.index(changeDataFactory.create(db, notes)); done.update(1); verboseWriter.println((""Reindexed change "" + (notes.getChangeId()))); } catch (java.util.concurrent.RejectedExecutionException e) { failSilently(); } catch (java.lang.Exception e) { fail((""Failed to index change "" + (notes.getChangeId())), true, e); } } } return null; }",c666666e67a5807b0b6b1933ff5a4943aa59edcd,"@java.lang.Override public java.lang.Void call() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { for (com.google.gerrit.server.notedb.ChangeNotes notes : notesFactory.scan(repo, db, project)) { try { indexer.index(changeDataFactory.create(db, notes)); done.update(1); verboseWriter.println((""Reindexed change "" + (notes.getChangeId()))); } catch (java.util.concurrent.RejectedExecutionException e) { failSilently(); } catch (java.lang.Exception e) { fail((""Failed to index change "" + (notes.getChangeId())), true, e); } } } catch (org.eclipse.jgit.errors.RepositoryNotFoundException rnfe) { com.google.gerrit.server.index.change.AllChangesIndexer.log.error(rnfe.getMessage()); } return null; }",aa8b7ab4b4affece0e9950387edc61b27eab9dc0,2017-08-30 10:17:18,3
120592,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,"private com.google.gerrit.server.notedb.ChangeNotes createFromChangeOnlyWhenNoteDbDisabled(com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException { checkState((!(args.migration.readChanges())), ""do not call createFromChangeWhenNoteDbDisabled when NoteDb is enabled""); return new com.google.gerrit.server.notedb.ChangeNotes(args, change).load(); }",92537241dd4414e922ad4ebf7141e52da5fc4f6f,"com.google.gerrit.server.notedb.ChangeNotes createFromChangeOnlyWhenNoteDbDisabled(com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException { checkState((!(args.migration.readChanges())), ""do not call createFromChangeWhenNoteDbDisabled when NoteDb is enabled""); return new com.google.gerrit.server.notedb.ChangeNotes(args, change).load(); }",021a019917165161b9bc2cd0bcaac43cd1d8062c,"private com.google.gerrit.server.notedb.ChangeNotes createFromChangeOnlyWhenNoteDbDisabled(com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException { checkState((!(args.migration.readChanges())), ""do not call createFromChangeWhenNoteDbDisabled when NoteDb is enabled""); return new com.google.gerrit.server.notedb.ChangeNotes(args, change).load(); }",92537241dd4414e922ad4ebf7141e52da5fc4f6f,2017-08-30 10:17:18,4
120592,gerrit-server_src_main_java_com_google_gerrit_server_git_VisibleRefFilter.java,"private java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Branch.NameKey> visibleChangesByScan() { com.google.gerrit.reviewdb.client.Project.NameKey project = projectCtl.getProject().getNameKey(); try { java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Branch.NameKey> visibleChanges = new java.util.HashMap<>(); for (com.google.gerrit.server.notedb.ChangeNotes cn : changeNotesFactory.scan(git, db.get(), project)) { if (permissionBackend.user(user).change(cn).database(db).test(ChangePermission.READ)) { visibleChanges.put(cn.getChangeId(), cn.getChange().getDest()); } } return visibleChanges; } catch (java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.VisibleRefFilter.log.error(((""Cannot load changes for project "" + project) + "", assuming no changes are visible""), e); return java.util.Collections.emptyMap(); } }",5c484fdf98763f0bd78b7934f04fb5b108ce15b2,"private java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Branch.NameKey> visibleChangesByScan() { com.google.gerrit.reviewdb.client.Project.NameKey project = projectCtl.getProject().getNameKey(); try { java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Branch.NameKey> visibleChanges = new java.util.HashMap<>(); com.google.gerrit.server.notedb.ChangeNotesIterator it = changeNotesFactory.scan(git, db.get(), project); while (it.hasNext()) { com.google.gerrit.server.notedb.ChangeNotes cn = it.next(); if (permissionBackend.user(user).change(cn).database(db).test(ChangePermission.READ)) { visibleChanges.put(cn.getChangeId(), cn.getChange().getDest()); } } return visibleChanges; } catch (java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.VisibleRefFilter.log.error(((""Cannot load changes for project "" + project) + "", assuming no changes are visible""), e); return java.util.Collections.emptyMap(); } }",465f94c7a462665721fb6e1e501baec97e24cf41,"private java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Branch.NameKey> visibleChangesByScan() { com.google.gerrit.reviewdb.client.Project.NameKey project = projectCtl.getProject().getNameKey(); try { java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Branch.NameKey> visibleChanges = new java.util.HashMap<>(); for (com.google.gerrit.server.notedb.ChangeNotes.Factory.ChangeNotesResult r : ((java.lang.Iterable<com.google.gerrit.server.notedb.ChangeNotes.Factory.ChangeNotesResult>) (changeNotesFactory.scan(git, db.get(), project)::iterator))) { if (r.error().isPresent()) { throw new com.google.gwtorm.server.OrmException(r.error().get()); } com.google.gerrit.server.notedb.ChangeNotes cn = r.notes(); if (permissionBackend.user(user).change(cn).database(db).test(ChangePermission.READ)) { visibleChanges.put(cn.getChangeId(), cn.getChange().getDest()); } } return visibleChanges; } catch (java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.VisibleRefFilter.log.error(((""Cannot load changes for project "" + project) + "", assuming no changes are visible""), e); return java.util.Collections.emptyMap(); } }",7a9bdc383bd7e457542f2683241396e58e9fb5e6,2017-08-30 10:17:18,4
120592,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,"private java.util.List<com.google.gerrit.server.notedb.ChangeNotes> scanNoteDb(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.ChangeNotes.Factory.ScanResult sr = com.google.gerrit.server.notedb.ChangeNotes.Factory.scanChangeIds(repo); java.util.List<com.google.gerrit.server.notedb.ChangeNotes> changeNotes = new java.util.ArrayList(sr.fromPatchSetRefs().size()); com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage defaultStorage = args.migration.changePrimaryStorage(); for (com.google.gerrit.reviewdb.client.Change.Id id : sr.all()) { com.google.gerrit.reviewdb.client.Change change = com.google.gerrit.server.notedb.ChangeNotes.readOneReviewDbChange(db, id); if (change == null) { if (!(sr.fromMetaRefs().contains(id))) { continue; } if (defaultStorage == (com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage.REVIEW_DB)) { com.google.gerrit.server.notedb.ChangeNotes.log.warn(""skipping change {} found in project {} but not in ReviewDb"", id, project); continue; } change = com.google.gerrit.server.notedb.ChangeNotes.Factory.newNoteDbOnlyChange(project, id); } else if (!(change.getProject().equals(project))) { com.google.gerrit.server.notedb.ChangeNotes.log.error(""skipping change {} found in project {} because ReviewDb change has project {}"", id, project, change.getProject()); continue; } com.google.gerrit.server.notedb.ChangeNotes.log.debug(""adding change {} found in project {}"", id, project); changeNotes.add(new com.google.gerrit.server.notedb.ChangeNotes(args, change).load()); } return changeNotes; }",eeaf515c4a3942e9699da7e0b6b19883f031dc58,"private com.google.gerrit.server.notedb.NoteDbChangeNotesIterator scanNoteDb(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey project) { return new com.google.gerrit.server.notedb.NoteDbChangeNotesIterator(this, repo, db, project, args.migration.changePrimaryStorage()); }",940a8ffbcd29140564e30bb1924296a910eb995b,"private java.util.stream.Stream<com.google.gerrit.server.notedb.ChangeNotes.Factory.ChangeNotesResult> scanNoteDb(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey project) throws java.io.IOException { com.google.gerrit.server.notedb.ChangeNotes.Factory.ScanResult sr = com.google.gerrit.server.notedb.ChangeNotes.Factory.scanChangeIds(repo); com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage defaultStorage = args.migration.changePrimaryStorage(); return sr.all().stream().map(( id) -> scanOneNoteDbChange(db, project, sr, defaultStorage, id)).filter(java.util.Objects::nonNull); }",1f4e9dcc92832d27b574bc93bce0bd8e9d33e627,2017-08-30 10:17:18,4
120592,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.gerrit.server.notedb.ChangeNotesIterator scan(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey project) { return args.migration.readChanges() ? scanNoteDb(repo, db, project) : new com.google.gerrit.server.notedb.ReviewDbChangeNotesIterator(this, repo, db); }",9435fb14396e85b61d618fc5dfda85039773fed6,"public java.util.stream.Stream<com.google.gerrit.server.notedb.ChangeNotes.Factory.ChangeNotesResult> scan(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey project) throws java.io.IOException { return args.migration.readChanges() ? scanNoteDb(repo, db, project) : scanReviewDb(repo, db); }",a3441a6f9e2b473f7c397d6aba619011f8b38be4,2017-08-30 10:17:18,4
120592,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,"public com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.notedb.ChangeNotes> create(com.google.gerrit.reviewdb.server.ReviewDb db, java.util.function.Predicate<com.google.gerrit.server.notedb.ChangeNotes> predicate) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.notedb.ChangeNotes> m = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); if (args.migration.readChanges()) { for (com.google.gerrit.reviewdb.client.Project.NameKey project : projectCache.all()) { try (org.eclipse.jgit.lib.Repository repo = args.repoManager.openRepository(project)) { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> changes = scanNoteDb(repo, db, project); for (com.google.gerrit.server.notedb.ChangeNotes cn : changes) { if (predicate.test(cn)) { m.put(project, cn); } } } } } else { for (com.google.gerrit.reviewdb.client.Change change : com.google.gerrit.reviewdb.server.ReviewDbUtil.unwrapDb(db).changes().all()) { com.google.gerrit.server.notedb.ChangeNotes notes = createFromChangeOnlyWhenNoteDbDisabled(change); if (predicate.test(notes)) { m.put(change.getProject(), notes); } } } return com.google.common.collect.ImmutableListMultimap.copyOf(m); }",d64074d325718ec5734cf482c0399fbe8ea575fe,"public com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.notedb.ChangeNotes> create(com.google.gerrit.reviewdb.server.ReviewDb db, java.util.function.Predicate<com.google.gerrit.server.notedb.ChangeNotes> predicate) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.notedb.ChangeNotes> m = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); if (args.migration.readChanges()) { for (com.google.gerrit.reviewdb.client.Project.NameKey project : projectCache.all()) { try (org.eclipse.jgit.lib.Repository repo = args.repoManager.openRepository(project)) { com.google.gerrit.server.notedb.ChangeNotesIterator it = scanNoteDb(repo, db, project); while (it.hasNext()) { com.google.gerrit.server.notedb.ChangeNotes cn = it.next(); if (predicate.test(cn)) { m.put(project, cn); } } } } } else { for (com.google.gerrit.reviewdb.client.Change change : com.google.gerrit.reviewdb.server.ReviewDbUtil.unwrapDb(db).changes().all()) { com.google.gerrit.server.notedb.ChangeNotes notes = createFromChangeOnlyWhenNoteDbDisabled(change); if (predicate.test(notes)) { m.put(change.getProject(), notes); } } } return com.google.common.collect.ImmutableListMultimap.copyOf(m); }",ba93ddf4986ce0c870198b1dea9ac6bb1a2082aa,"public com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.notedb.ChangeNotes> create(com.google.gerrit.reviewdb.server.ReviewDb db, java.util.function.Predicate<com.google.gerrit.server.notedb.ChangeNotes> predicate) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.notedb.ChangeNotes> m = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); if (args.migration.readChanges()) { for (com.google.gerrit.reviewdb.client.Project.NameKey project : projectCache.all()) { try (org.eclipse.jgit.lib.Repository repo = args.repoManager.openRepository(project)) { scanNoteDb(repo, db, project).filter(( r) -> !(r.error().isPresent())).map(com.google.gerrit.server.notedb.ChangeNotes.Factory.ChangeNotesResult::notes).filter(predicate).forEach(( n) -> m.put(n.getProjectName(), n)); } } } else { for (com.google.gerrit.reviewdb.client.Change change : com.google.gerrit.reviewdb.server.ReviewDbUtil.unwrapDb(db).changes().all()) { com.google.gerrit.server.notedb.ChangeNotes notes = createFromChangeOnlyWhenNoteDbDisabled(change); if (predicate.test(notes)) { m.put(change.getProject(), notes); } } } return com.google.common.collect.ImmutableListMultimap.copyOf(m); }",0870da86657e6f2a08233eda4e573581b123ac78,2017-08-30 10:17:18,4
120592,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,"private static com.google.gerrit.server.notedb.ChangeNotes.Factory.ScanResult scanChangeIds(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Change.Id> fromPs = com.google.common.collect.ImmutableSet.builder(); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Change.Id> fromMeta = com.google.common.collect.ImmutableSet.builder(); for (org.eclipse.jgit.lib.Ref r : repo.getRefDatabase().getRefs(RefNames.REFS_CHANGES).values()) { com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.fromRef(r.getName()); if (id != null) { (r.getName().endsWith(RefNames.META_SUFFIX) ? fromMeta : fromPs).add(id); } } return new com.google.gerrit.server.notedb.AutoValue_ChangeNotes_Factory_ScanResult(fromPs.build(), fromMeta.build()); }",8f5310c66969b9d4aaf86e907e09d01b1ba9b4fb,"static com.google.gerrit.server.notedb.ChangeNotes.Factory.ScanResult scanChangeIds(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Change.Id> fromPs = com.google.common.collect.ImmutableSet.builder(); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Change.Id> fromMeta = com.google.common.collect.ImmutableSet.builder(); for (org.eclipse.jgit.lib.Ref r : repo.getRefDatabase().getRefs(RefNames.REFS_CHANGES).values()) { com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.fromRef(r.getName()); if (id != null) { (r.getName().endsWith(RefNames.META_SUFFIX) ? fromMeta : fromPs).add(id); } } return new com.google.gerrit.server.notedb.AutoValue_ChangeNotes_Factory_ScanResult(fromPs.build(), fromMeta.build()); }",d897180393f068c924737a8f05700d56b18137bd,"private static com.google.gerrit.server.notedb.ChangeNotes.Factory.ScanResult scanChangeIds(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Change.Id> fromPs = com.google.common.collect.ImmutableSet.builder(); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Change.Id> fromMeta = com.google.common.collect.ImmutableSet.builder(); for (org.eclipse.jgit.lib.Ref r : repo.getRefDatabase().getRefs(RefNames.REFS_CHANGES).values()) { com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.fromRef(r.getName()); if (id != null) { (r.getName().endsWith(RefNames.META_SUFFIX) ? fromMeta : fromPs).add(id); } } return new com.google.gerrit.server.notedb.AutoValue_ChangeNotes_Factory_ScanResult(fromPs.build(), fromMeta.build()); }",8f5310c66969b9d4aaf86e907e09d01b1ba9b4fb,2017-08-30 10:17:18,4
109873,src_main_java_com_googlesource_gerrit_plugins_repositoryuse_ScanningQueue.java,@java.lang.Override public void stop() { if ((threadPool) != null) { threadPool.unregisterWorkQueue(); threadPool = null; } },709d13badd2c277428e0fc8b906c9313a27e3dfe,@java.lang.Override public void stop() { if ((threadPool) != null) { threadPool = null; } },f5b05aea8a9bf034e3a40724d302ff5cf4d243f8,@java.lang.Override public void stop() { threadPool = null; },94c216b3796583753b4c9323e9db2910c2aa0079,2017-08-30 15:41:00,4
117212,gerrit-server_src_main_java_com_google_gerrit_server_project_GetAccess.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) { com.google.gerrit.extensions.common.GroupInfo canSeeGroup = visibleGroups.get(id); if (canSeeGroup == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); canSeeGroup = (control.isVisible()) ? groupJson.format(control.getGroup()) : com.google.gerrit.server.project.GetAccess.invisibleSentinel; } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gwtorm.server.OrmException e) { canSeeGroup = com.google.gerrit.server.project.GetAccess.invisibleSentinel; } visibleGroups.put(id, canSeeGroup); } return canSeeGroup; }",dc77b6df611ab351e075bf2e58fe27cee41784f4,"private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.project.GetAccess.INVISIBLE_SENTINEL; if (control.isVisible()) { group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.project.GetAccess.LOG.warn((""NoSuchGroupException; ignoring group "" + id), e); group = com.google.gerrit.server.project.GetAccess.INVISIBLE_SENTINEL; } visibleGroups.put(id, group); } return group; }",00dd0d2db4db6e818f088ef87fac92213bd0b973,2017-08-30 16:04:53,18
117212,gerrit-server_src_main_java_com_google_gerrit_server_project_GetAccess.java,"private com.google.gerrit.extensions.api.access.AccessSectionInfo createAccessSection(com.google.gerrit.common.data.AccessSection section) { com.google.gerrit.extensions.api.access.AccessSectionInfo accessSectionInfo = new com.google.gerrit.extensions.api.access.AccessSectionInfo(); accessSectionInfo.permissions = new java.util.HashMap(); for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { com.google.gerrit.extensions.api.access.PermissionInfo pInfo = new com.google.gerrit.extensions.api.access.PermissionInfo(p.getLabel(), (p.getExclusiveGroup() ? true : null)); pInfo.rules = new java.util.HashMap(); for (com.google.gerrit.common.data.PermissionRule r : p.getRules()) { com.google.gerrit.extensions.api.access.PermissionRuleInfo info = new com.google.gerrit.extensions.api.access.PermissionRuleInfo(com.google.gerrit.server.project.GetAccess.ACTION_TYPE.get(r.getAction()), r.getForce()); if (r.hasRange()) { info.max = r.getMax(); info.min = r.getMin(); } com.google.gerrit.reviewdb.client.AccountGroup.UUID group = r.getGroup().getUUID(); if (group != null) { pInfo.rules.put(group.get(), info); } } accessSectionInfo.permissions.put(p.getName(), pInfo); } return accessSectionInfo; }",ee670bdd4feb5cc016147eac3746579939354fb1,"private com.google.gerrit.extensions.api.access.AccessSectionInfo createAccessSection(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> groups, com.google.gerrit.common.data.AccessSection section) { com.google.gerrit.extensions.api.access.AccessSectionInfo accessSectionInfo = new com.google.gerrit.extensions.api.access.AccessSectionInfo(); accessSectionInfo.permissions = new java.util.HashMap(); for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { com.google.gerrit.extensions.api.access.PermissionInfo pInfo = new com.google.gerrit.extensions.api.access.PermissionInfo(p.getLabel(), (p.getExclusiveGroup() ? true : null)); pInfo.rules = new java.util.HashMap(); for (com.google.gerrit.common.data.PermissionRule r : p.getRules()) { com.google.gerrit.extensions.api.access.PermissionRuleInfo info = new com.google.gerrit.extensions.api.access.PermissionRuleInfo(com.google.gerrit.server.project.GetAccess.ACTION_TYPE.get(r.getAction()), r.getForce()); if (r.hasRange()) { info.max = r.getMax(); info.min = r.getMin(); } com.google.gerrit.reviewdb.client.AccountGroup.UUID group = r.getGroup().getUUID(); if (group != null) { pInfo.rules.put(group.get(), info); loadGroup(groups, group); } } accessSectionInfo.permissions.put(p.getName(), pInfo); } return accessSectionInfo; }",1ebfea549519524b8ef2a3a236610440683d73a2,"private com.google.gerrit.extensions.api.access.AccessSectionInfo createAccessSection(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> groups, com.google.gerrit.common.data.AccessSection section) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.api.access.AccessSectionInfo accessSectionInfo = new com.google.gerrit.extensions.api.access.AccessSectionInfo(); accessSectionInfo.permissions = new java.util.HashMap(); for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { com.google.gerrit.extensions.api.access.PermissionInfo pInfo = new com.google.gerrit.extensions.api.access.PermissionInfo(p.getLabel(), (p.getExclusiveGroup() ? true : null)); pInfo.rules = new java.util.HashMap(); for (com.google.gerrit.common.data.PermissionRule r : p.getRules()) { com.google.gerrit.extensions.api.access.PermissionRuleInfo info = new com.google.gerrit.extensions.api.access.PermissionRuleInfo(com.google.gerrit.server.project.GetAccess.ACTION_TYPE.get(r.getAction()), r.getForce()); if (r.hasRange()) { info.max = r.getMax(); info.min = r.getMin(); } com.google.gerrit.reviewdb.client.AccountGroup.UUID group = r.getGroup().getUUID(); if (group != null) { pInfo.rules.put(group.get(), info); loadGroup(groups, group); } } accessSectionInfo.permissions.put(p.getName(), pInfo); } return accessSectionInfo; }",fa788567886215a722b8aaf5297438aa0f472a46,2017-08-30 16:04:53,18
123651,gerrit-server_src_main_java_com_google_gerrit_server_project_ChangeControl.java,"boolean isPatchSetLocked(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { if ((getChange().getStatus()) == (Change.Status.MERGED)) { return false; } for (com.google.gerrit.reviewdb.client.PatchSetApproval ap : approvalsUtil.byPatchSet(db, this, getChange().currentPatchSetId(), null, null)) { com.google.gerrit.common.data.LabelType type = getLabelTypes().byLabel(ap.getLabel()); if (((type != null) && ((ap.getValue()) == 1)) && (type.getFunctionName().equalsIgnoreCase(""PatchSetLock""))) { return true; } } return false; }",2f8f02c0580e5a8143158f7a7d7e6e9b641acda3,"boolean isPatchSetLocked(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { if ((getChange().getStatus()) == (Change.Status.MERGED)) { return false; } for (com.google.gerrit.reviewdb.client.PatchSetApproval ap : approvalsUtil.byPatchSet(db, this, getChange().currentPatchSetId(), null, null)) { com.google.gerrit.common.data.LabelType type = getProjectControl().getProjectState().getLabelTypes().byLabel(ap.getLabel()); if (((type != null) && ((ap.getValue()) == 1)) && (type.getFunctionName().equalsIgnoreCase(""PatchSetLock""))) { return true; } } return false; }",2cc232ccc4f7a8ca4c733c1eecf68d9baae0e67b,"boolean isPatchSetLocked(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { if ((getChange().getStatus()) == (Change.Status.MERGED)) { return false; } for (com.google.gerrit.reviewdb.client.PatchSetApproval ap : approvalsUtil.byPatchSet(db, this, getChange().currentPatchSetId(), null, null)) { com.google.gerrit.common.data.LabelType type = getProjectControl().getProjectState().getLabelTypes(getNotes(), getUser()).byLabel(ap.getLabel()); if (((type != null) && ((ap.getValue()) == 1)) && (type.getFunctionName().equalsIgnoreCase(""PatchSetLock""))) { return true; } } return false; }",c3ff0ff5cfa92c5297c210688f20a9ac57f23be4,2017-08-30 23:14:34,3
123651,gerrit-server_src_main_java_com_google_gerrit_server_change_PostReview.java,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { user = ctx.getIdentifiedUser(); notes = ctx.getNotes(); ps = psUtil.get(ctx.getDb(), ctx.getNotes(), psId); boolean dirty = false; dirty |= insertComments(ctx); dirty |= insertRobotComments(ctx); dirty |= updateLabels(ctx); dirty |= insertMessage(ctx); return dirty; }",6fc2e0bb750ea7fd5ef0fca8beea66ac05184617,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { user = ctx.getIdentifiedUser(); notes = ctx.getNotes(); ps = psUtil.get(ctx.getDb(), ctx.getNotes(), psId); boolean dirty = false; dirty |= insertComments(ctx); dirty |= insertRobotComments(ctx); dirty |= updateLabels(projectCache.checkedGet(ctx.getProject()), ctx); dirty |= insertMessage(ctx); return dirty; }",b206b3131a902c28a927e7ff492f6faf9d838014,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { user = ctx.getIdentifiedUser(); notes = ctx.getNotes(); ps = psUtil.get(ctx.getDb(), ctx.getNotes(), psId); boolean dirty = false; dirty |= insertComments(ctx); dirty |= insertRobotComments(ctx); dirty |= updateLabels(projectState, ctx); dirty |= insertMessage(ctx); return dirty; }",ae950432ad543ef2f97014d3c0b0d90e967d00ea,2017-08-30 23:14:34,3
123651,gerrit-server_src_main_java_com_google_gerrit_server_git_receive_ReplaceOp.java,"private void fireCommentAddedEvent(com.google.gerrit.server.update.Context ctx) throws com.google.gwtorm.server.OrmException { if (approvals.isEmpty()) { return; } com.google.gerrit.server.project.ChangeControl changeControl = changeControlFactory.controlFor(ctx.getDb(), notes.getChange(), ctx.getUser()); java.util.List<com.google.gerrit.common.data.LabelType> labels = changeControl.getLabelTypes().getLabelTypes(); java.util.Map<java.lang.String, java.lang.Short> allApprovals = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Short> oldApprovals = new java.util.HashMap<>(); for (com.google.gerrit.common.data.LabelType lt : labels) { allApprovals.put(lt.getName(), ((short) (0))); oldApprovals.put(lt.getName(), null); } for (java.util.Map.Entry<java.lang.String, java.lang.Short> entry : approvals.entrySet()) { if ((entry.getValue()) != 0) { allApprovals.put(entry.getKey(), entry.getValue()); oldApprovals.put(entry.getKey(), ((short) (0))); } } commentAdded.fire(notes.getChange(), newPatchSet, ctx.getAccount(), null, allApprovals, oldApprovals, ctx.getWhen()); }",223305ef4a7ab0158360ca6e406d7c64abce3adc,"private void fireCommentAddedEvent(com.google.gerrit.server.update.Context ctx) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (approvals.isEmpty()) { return; } java.util.List<com.google.gerrit.common.data.LabelType> labels = projectCache.checkedGet(ctx.getProject()).getLabelTypes(notes, ctx.getUser()).getLabelTypes(); java.util.Map<java.lang.String, java.lang.Short> allApprovals = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Short> oldApprovals = new java.util.HashMap<>(); for (com.google.gerrit.common.data.LabelType lt : labels) { allApprovals.put(lt.getName(), ((short) (0))); oldApprovals.put(lt.getName(), null); } for (java.util.Map.Entry<java.lang.String, java.lang.Short> entry : approvals.entrySet()) { if ((entry.getValue()) != 0) { allApprovals.put(entry.getKey(), entry.getValue()); oldApprovals.put(entry.getKey(), ((short) (0))); } } commentAdded.fire(notes.getChange(), newPatchSet, ctx.getAccount(), null, allApprovals, oldApprovals, ctx.getWhen()); }",23d73893d7648c7a2b38f313c4d5587ee85352c0,"private void fireCommentAddedEvent(com.google.gerrit.server.update.Context ctx) throws java.io.IOException { if (approvals.isEmpty()) { return; } java.util.List<com.google.gerrit.common.data.LabelType> labels = projectCache.checkedGet(ctx.getProject()).getLabelTypes(notes, ctx.getUser()).getLabelTypes(); java.util.Map<java.lang.String, java.lang.Short> allApprovals = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Short> oldApprovals = new java.util.HashMap<>(); for (com.google.gerrit.common.data.LabelType lt : labels) { allApprovals.put(lt.getName(), ((short) (0))); oldApprovals.put(lt.getName(), null); } for (java.util.Map.Entry<java.lang.String, java.lang.Short> entry : approvals.entrySet()) { if ((entry.getValue()) != 0) { allApprovals.put(entry.getKey(), entry.getValue()); oldApprovals.put(entry.getKey(), ((short) (0))); } } commentAdded.fire(notes.getChange(), newPatchSet, ctx.getAccount(), null, allApprovals, oldApprovals, ctx.getWhen()); }",f689be0b3bed64e7b97dea58e2049ed028254dce,2017-08-30 23:14:34,3
123651,gerrit-server_src_main_java_com_google_gerrit_server_git_LabelNormalizer.java,"public com.google.gerrit.server.git.LabelNormalizer.Result normalize(com.google.gerrit.server.project.ChangeControl ctl, java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) { java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> unchanged = com.google.common.collect.Lists.newArrayListWithCapacity(approvals.size()); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> updated = com.google.common.collect.Lists.newArrayListWithCapacity(approvals.size()); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> deleted = com.google.common.collect.Lists.newArrayListWithCapacity(approvals.size()); com.google.gerrit.common.data.LabelTypes labelTypes = ctl.getLabelTypes(); for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : approvals) { com.google.gerrit.reviewdb.client.Change.Id changeId = psa.getKey().getParentKey().getParentKey(); checkArgument(changeId.equals(ctl.getId()), ""Approval %s does not match change %s"", psa.getKey(), ctl.getChange().getKey()); if (psa.isLegacySubmit()) { unchanged.add(psa); continue; } com.google.gerrit.common.data.LabelType label = labelTypes.byLabel(psa.getLabelId()); if (label == null) { deleted.add(psa); continue; } com.google.gerrit.reviewdb.client.PatchSetApproval copy = copy(psa); applyTypeFloor(label, copy); if (!(applyRightFloor(ctl, label, copy))) { deleted.add(psa); } else if ((copy.getValue()) != (psa.getValue())) { updated.add(copy); } else { unchanged.add(psa); } } return com.google.gerrit.server.git.LabelNormalizer.Result.create(unchanged, updated, deleted); }",90d2aea0ce0541a6a5a91d400b70ded4b45f07cd,"public com.google.gerrit.server.git.LabelNormalizer.Result normalize(com.google.gerrit.server.project.ChangeControl ctl, java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) { java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> unchanged = com.google.common.collect.Lists.newArrayListWithCapacity(approvals.size()); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> updated = com.google.common.collect.Lists.newArrayListWithCapacity(approvals.size()); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> deleted = com.google.common.collect.Lists.newArrayListWithCapacity(approvals.size()); com.google.gerrit.common.data.LabelTypes labelTypes = ctl.getProjectControl().getProjectState().getLabelTypes(); for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : approvals) { com.google.gerrit.reviewdb.client.Change.Id changeId = psa.getKey().getParentKey().getParentKey(); checkArgument(changeId.equals(ctl.getId()), ""Approval %s does not match change %s"", psa.getKey(), ctl.getChange().getKey()); if (psa.isLegacySubmit()) { unchanged.add(psa); continue; } com.google.gerrit.common.data.LabelType label = labelTypes.byLabel(psa.getLabelId()); if (label == null) { deleted.add(psa); continue; } com.google.gerrit.reviewdb.client.PatchSetApproval copy = copy(psa); applyTypeFloor(label, copy); if (!(applyRightFloor(ctl, label, copy))) { deleted.add(psa); } else if ((copy.getValue()) != (psa.getValue())) { updated.add(copy); } else { unchanged.add(psa); } } return com.google.gerrit.server.git.LabelNormalizer.Result.create(unchanged, updated, deleted); }",625b754b9a85946d4904e8f772afc28f0e96c708,"public com.google.gerrit.server.git.LabelNormalizer.Result normalize(com.google.gerrit.server.project.ChangeControl ctl, java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) { java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> unchanged = com.google.common.collect.Lists.newArrayListWithCapacity(approvals.size()); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> updated = com.google.common.collect.Lists.newArrayListWithCapacity(approvals.size()); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> deleted = com.google.common.collect.Lists.newArrayListWithCapacity(approvals.size()); com.google.gerrit.common.data.LabelTypes labelTypes = ctl.getProjectControl().getProjectState().getLabelTypes(ctl.getNotes(), ctl.getUser()); for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : approvals) { com.google.gerrit.reviewdb.client.Change.Id changeId = psa.getKey().getParentKey().getParentKey(); checkArgument(changeId.equals(ctl.getId()), ""Approval %s does not match change %s"", psa.getKey(), ctl.getChange().getKey()); if (psa.isLegacySubmit()) { unchanged.add(psa); continue; } com.google.gerrit.common.data.LabelType label = labelTypes.byLabel(psa.getLabelId()); if (label == null) { deleted.add(psa); continue; } com.google.gerrit.reviewdb.client.PatchSetApproval copy = copy(psa); applyTypeFloor(label, copy); if (!(applyRightFloor(ctl, label, copy))) { deleted.add(psa); } else if ((copy.getValue()) != (psa.getValue())) { updated.add(copy); } else { unchanged.add(psa); } } return com.google.gerrit.server.git.LabelNormalizer.Result.create(unchanged, updated, deleted); }",acd3c74530b5e109ee1ee0cdc685fe8f0052894a,2017-08-30 23:14:34,3
121572,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountResolver.java,"public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(com.google.gerrit.reviewdb.server.ReviewDb db, java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile(""^.* \\(([1-9][0-9]*)\\)$"").matcher(nameOrEmail); if (m.matches()) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(m.group(1)); if (exists(db, id)) { return java.util.Collections.singleton(id); } return java.util.Collections.emptySet(); } if (nameOrEmail.matches(""^[1-9][0-9]*$"")) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(nameOrEmail); if (exists(db, id)) { return java.util.Collections.singleton(id); } return java.util.Collections.emptySet(); } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) { com.google.gerrit.server.account.AccountState who = byId.getByUsername(nameOrEmail); if (who != null) { return java.util.Collections.singleton(who.getAccount().getId()); } } return findAllByNameOrEmail(db, nameOrEmail); }",da96e54f96ff71dbdad18af4f1015897d7bb4351,"public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(com.google.gerrit.reviewdb.server.ReviewDb db, java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile(""^.* \\(([1-9][0-9]*)\\)$"").matcher(nameOrEmail); if (m.matches()) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(m.group(1)); if (exists(db, id)) { return java.util.Collections.singleton(id); } return java.util.Collections.emptySet(); } if (nameOrEmail.matches(""^[1-9][0-9]*$"")) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(nameOrEmail); if (exists(db, id)) { return java.util.Collections.singleton(id); } return java.util.Collections.emptySet(); } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.account.SCHEME_USERNAME, nameOrEmail)); if (extId != null) { com.google.gerrit.server.account.AccountState who = byId.get(extId.accountId()); if (who != null) { return java.util.Collections.singleton(who.getAccount().getId()); } } } return findAllByNameOrEmail(db, nameOrEmail); }",937f7db10ead8ffe73665fbf58e0006df2377470,"public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(com.google.gerrit.reviewdb.server.ReviewDb db, java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile(""^.* \\(([1-9][0-9]*)\\)$"").matcher(nameOrEmail); if (m.matches()) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(m.group(1)); if (exists(db, id)) { return java.util.Collections.singleton(id); } return java.util.Collections.emptySet(); } if (nameOrEmail.matches(""^[1-9][0-9]*$"")) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(nameOrEmail); if (exists(db, id)) { return java.util.Collections.singleton(id); } return java.util.Collections.emptySet(); } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) { com.google.gerrit.server.account.AccountState who = byId.getByUsername(nameOrEmail); if (who != null) { return java.util.Collections.singleton(who.getAccount().getId()); } } return findAllByNameOrEmail(db, nameOrEmail); }",da96e54f96ff71dbdad18af4f1015897d7bb4351,2017-08-31 14:55:40,4
121572,gerrit-httpd_src_main_java_com_google_gerrit_httpd_ContainerAuthFilter.java,"private boolean verify(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { java.lang.String username = com.google.gerrit.httpd.RemoteUserUtil.getRemoteUser(req, loginHttpHeader); if (username == null) { rsp.sendError(com.google.gerrit.httpd.SC_FORBIDDEN); return false; } if (config.getBoolean(""auth"", ""userNameToLowerCase"", false)) { username = username.toLowerCase(java.util.Locale.US); } final com.google.gerrit.server.account.AccountState who = accountCache.getByUsername(username); if ((who == null) || (!(who.getAccount().isActive()))) { rsp.sendError(com.google.gerrit.httpd.SC_UNAUTHORIZED); return false; } com.google.gerrit.httpd.WebSession ws = session.get(); ws.setUserAccountId(who.getAccount().getId()); ws.setAccessPathOk(AccessPath.GIT, true); ws.setAccessPathOk(AccessPath.REST_API, true); return true; }",086a185755eab48678abc1218ffbf072ed8857ad,"private boolean verify(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { java.lang.String username = com.google.gerrit.httpd.RemoteUserUtil.getRemoteUser(req, loginHttpHeader); if (username == null) { rsp.sendError(com.google.gerrit.httpd.SC_FORBIDDEN); return false; } if (config.getBoolean(""auth"", ""userNameToLowerCase"", false)) { username = username.toLowerCase(java.util.Locale.US); } try { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(ExternalId.Key.create(com.google.gerrit.httpd.SCHEME_USERNAME, username)); if (extId == null) { rsp.sendError(com.google.gerrit.httpd.SC_UNAUTHORIZED); return false; } com.google.gerrit.server.account.AccountState who = accountCache.get(extId.accountId()); if ((who == null) || (!(who.getAccount().isActive()))) { rsp.sendError(com.google.gerrit.httpd.SC_UNAUTHORIZED); return false; } com.google.gerrit.httpd.WebSession ws = session.get(); ws.setUserAccountId(who.getAccount().getId()); ws.setAccessPathOk(AccessPath.GIT, true); ws.setAccessPathOk(AccessPath.REST_API, true); return true; } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(""Invalid external ID config"", e); } }",1dc1a120730eb6843b83820e9cb8d7f2ab72a57e,"private boolean verify(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { java.lang.String username = com.google.gerrit.httpd.RemoteUserUtil.getRemoteUser(req, loginHttpHeader); if (username == null) { rsp.sendError(com.google.gerrit.httpd.SC_FORBIDDEN); return false; } if (config.getBoolean(""auth"", ""userNameToLowerCase"", false)) { username = username.toLowerCase(java.util.Locale.US); } final com.google.gerrit.server.account.AccountState who = accountCache.getByUsername(username); if ((who == null) || (!(who.getAccount().isActive()))) { rsp.sendError(com.google.gerrit.httpd.SC_UNAUTHORIZED); return false; } com.google.gerrit.httpd.WebSession ws = session.get(); ws.setUserAccountId(who.getAccount().getId()); ws.setAccessPathOk(AccessPath.GIT, true); ws.setAccessPathOk(AccessPath.REST_API, true); return true; }",086a185755eab48678abc1218ffbf072ed8857ad,2017-08-31 14:55:40,4
121572,gerrit-sshd_src_main_java_com_google_gerrit_sshd_GerritGSSAuthenticator.java,"@java.lang.Override public boolean validateIdentity(org.apache.sshd.server.session.ServerSession session, java.lang.String identity) { final com.google.gerrit.sshd.SshSession sd = session.getAttribute(SshSession.KEY); int at = identity.indexOf('@'); java.lang.String username; if (at == (-1)) { username = identity; } else { username = identity.substring(0, at); } if (config.getBoolean(""auth"", ""userNameToLowerCase"", false)) { username = username.toLowerCase(java.util.Locale.US); } com.google.gerrit.server.account.AccountState state = accounts.getByUsername(username); com.google.gerrit.reviewdb.client.Account account = (state == null) ? null : state.getAccount(); boolean active = (account != null) && (account.isActive()); if (active) { return com.google.gerrit.sshd.SshUtil.success(username, session, sshScope, sshLog, sd, com.google.gerrit.sshd.SshUtil.createUser(sd, userFactory, account.getId())); } return false; }",1f73e1ab37121189251eb74ab48119444b52e4fc,"@java.lang.Override public boolean validateIdentity(org.apache.sshd.server.session.ServerSession session, java.lang.String identity) { final com.google.gerrit.sshd.SshSession sd = session.getAttribute(SshSession.KEY); int at = identity.indexOf('@'); java.lang.String username; if (at == (-1)) { username = identity; } else { username = identity.substring(0, at); } if (config.getBoolean(""auth"", ""userNameToLowerCase"", false)) { username = username.toLowerCase(java.util.Locale.US); } com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey = ExternalId.Key.create(com.google.gerrit.sshd.SCHEME_USERNAME, username); try { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(extIdKey); if (extId != null) { com.google.gerrit.server.account.AccountState state = accounts.get(extId.accountId()); com.google.gerrit.reviewdb.client.Account account = (state == null) ? null : state.getAccount(); boolean active = (account != null) && (account.isActive()); if (active) { return com.google.gerrit.sshd.SshUtil.success(username, session, sshScope, sshLog, sd, com.google.gerrit.sshd.SshUtil.createUser(sd, userFactory, account.getId())); } } return false; } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.sshd.GerritGSSAuthenticator.log.error(java.lang.String.format(""Failed to read external ID %s"", extIdKey.get()), e); return false; } }",fa8ea69d22210ac431622245b032f02d3483fb79,"@java.lang.Override public boolean validateIdentity(org.apache.sshd.server.session.ServerSession session, java.lang.String identity) { final com.google.gerrit.sshd.SshSession sd = session.getAttribute(SshSession.KEY); int at = identity.indexOf('@'); java.lang.String username; if (at == (-1)) { username = identity; } else { username = identity.substring(0, at); } if (config.getBoolean(""auth"", ""userNameToLowerCase"", false)) { username = username.toLowerCase(java.util.Locale.US); } com.google.gerrit.server.account.AccountState state = accounts.getByUsername(username); com.google.gerrit.reviewdb.client.Account account = (state == null) ? null : state.getAccount(); boolean active = (account != null) && (account.isActive()); if (active) { return com.google.gerrit.sshd.SshUtil.success(username, session, sshScope, sshLog, sd, com.google.gerrit.sshd.SshUtil.createUser(sd, userFactory, account.getId())); } return false; }",1f73e1ab37121189251eb74ab48119444b52e4fc,2017-08-31 14:55:40,4
117694,src_main_java_com_ericsson_gerrit_plugins_highavailability_Configuration.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.util.List<java.lang.String> getPatterns() { return java.util.Collections.unmodifiableList(patterns); },2d8aa5044947bf110ae6e4cbf6e288c67e6df446,public java.util.List<java.lang.String> patterns() { return java.util.Collections.unmodifiableList(patterns); },0078363a65d9844b1ba378aef0034de24f0d4996,2017-09-05 05:18:01,17
118872,src_main_java_com_googlesource_gerrit_plugins_supermanifest_SubModuleUpdater.java,"void update(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader, com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c, java.lang.String srcRef) throws java.lang.Exception;",45ffba9072db87564ca23d4e04a506dc875d6f13,"void update(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader, com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c, java.lang.String srcRef) throws java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException;",5c23e95d7f1337d8e13b77567bef010e5fcffc1c,"void update(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader, com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c, java.lang.String srcRef) throws java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException;",5784384af6809993267fe45c7edd0eb5398ea95f,2017-09-05 11:35:54,3
118872,src_main_java_com_googlesource_gerrit_plugins_supermanifest_repo_RepoUpdater.java,"@java.lang.Override public void update(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader, com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c, java.lang.String srcRef) throws java.lang.Exception { org.eclipse.jgit.lib.Repository destRepo = reader.openRepository(c.getDestRepoKey().toString()); org.eclipse.jgit.lib.Repository srcRepo = reader.openRepository(c.getSrcRepoKey().toString()); org.eclipse.jgit.gitrepo.RepoCommand cmd = new org.eclipse.jgit.gitrepo.RepoCommand(destRepo); if (c.getDestBranch().equals(""*"")) { cmd.setTargetBranch(srcRef.substring(com.googlesource.gerrit.plugins.supermanifest.repo.REFS_HEADS.length())); } else { cmd.setTargetBranch(c.getDestBranch()); } java.io.InputStream manifestStream = new java.io.ByteArrayInputStream(com.googlesource.gerrit.plugins.supermanifest.Utils.readBlob(srcRepo, ((srcRef + "":"") + (c.getXmlPath())))); cmd.setAuthor(serverIdent).setRecordRemoteBranch(true).setRecordSubmoduleLabels(c.isRecordSubmoduleLabels()).setInputStream(manifestStream).setRecommendShallow(true).setRemoteReader(reader).setTargetURI(c.getDestRepoKey().toString()).setURI(c.getBaseUri().toString()); cmd.setIncludedFileReader(new com.googlesource.gerrit.plugins.supermanifest.repo.RepoUpdater.GerritIncludeReader(srcRepo, srcRef)); cmd.call(); }",c93b5bc32cabeddd736784d558d4598eb2b5857c,"@java.lang.Override public void update(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader, com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c, java.lang.String srcRef) throws java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { org.eclipse.jgit.lib.Repository destRepo = reader.openRepository(c.getDestRepoKey().toString()); org.eclipse.jgit.lib.Repository srcRepo = reader.openRepository(c.getSrcRepoKey().toString()); org.eclipse.jgit.gitrepo.RepoCommand cmd = new org.eclipse.jgit.gitrepo.RepoCommand(destRepo); if (c.getDestBranch().equals(""*"")) { cmd.setTargetBranch(srcRef.substring(com.googlesource.gerrit.plugins.supermanifest.repo.REFS_HEADS.length())); } else { cmd.setTargetBranch(c.getDestBranch()); } java.io.InputStream manifestStream = new java.io.ByteArrayInputStream(com.googlesource.gerrit.plugins.supermanifest.Utils.readBlob(srcRepo, ((srcRef + "":"") + (c.getXmlPath())))); cmd.setAuthor(serverIdent).setRecordRemoteBranch(true).setRecordSubmoduleLabels(c.isRecordSubmoduleLabels()).setInputStream(manifestStream).setRecommendShallow(true).setRemoteReader(reader).setTargetURI(c.getDestRepoKey().toString()).setURI(c.getBaseUri().toString()); cmd.setIncludedFileReader(new com.googlesource.gerrit.plugins.supermanifest.repo.RepoUpdater.GerritIncludeReader(srcRepo, srcRef)); cmd.call(); }",3a8eb9944a2df23a277e8dd86cef5ceede45ec98,"@java.lang.Override public void update(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader, com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c, java.lang.String srcRef) throws java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { org.eclipse.jgit.lib.Repository destRepo = reader.openRepository(c.getDestRepoKey().toString()); org.eclipse.jgit.lib.Repository srcRepo = reader.openRepository(c.getSrcRepoKey().toString()); org.eclipse.jgit.gitrepo.RepoCommand cmd = new org.eclipse.jgit.gitrepo.RepoCommand(destRepo); if (c.getDestBranch().equals(""*"")) { cmd.setTargetBranch(srcRef.substring(com.googlesource.gerrit.plugins.supermanifest.REFS_HEADS.length())); } else { cmd.setTargetBranch(c.getDestBranch()); } java.io.InputStream manifestStream = new java.io.ByteArrayInputStream(com.googlesource.gerrit.plugins.supermanifest.Utils.readBlob(srcRepo, ((srcRef + "":"") + (c.getXmlPath())))); cmd.setAuthor(serverIdent).setRecordRemoteBranch(true).setRecordSubmoduleLabels(c.isRecordSubmoduleLabels()).setInputStream(manifestStream).setRecommendShallow(true).setRemoteReader(reader).setTargetURI(c.getDestRepoKey().toString()).setURI(c.getBaseUri().toString()); cmd.setIncludedFileReader(new com.googlesource.gerrit.plugins.supermanifest.RepoUpdater.GerritIncludeReader(srcRepo, srcRef)); cmd.call(); }",e5b7abe653198874fb84d8df26ca5f57664be0ac,2017-09-05 11:35:54,3
118872,src_main_java_com_googlesource_gerrit_plugins_supermanifest_SuperManifestRefUpdatedListener.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public synchronized void update(java.lang.String projectName, java.lang.String refName) throws java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { if (projectName.equals(allProjectsName.get())) { if (refName.equals(""refs/meta/config"")) { updateConfiguration(); } return; } for (com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c : config) { if (!(c.srcRepoKey.get().equals(projectName))) { continue; } if (!((c.destBranch.equals(""*"")) || (c.srcRef.equals(refName)))) { continue; } if ((c.destBranch.equals(""*"")) && (!(refName.startsWith(com.googlesource.gerrit.plugins.supermanifest.REFS_HEADS)))) { continue; } com.googlesource.gerrit.plugins.supermanifest.SubModuleUpdater subModuleUpdater; switch (c.getToolType()) { case Repo : subModuleUpdater = new com.googlesource.gerrit.plugins.supermanifest.repo.RepoUpdater(serverIdent, canonicalWebUrl); break; default : throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""invalid toolType: %s"", c.getToolType().name())); } try (com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader = new com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader()) { subModuleUpdater.update(reader, c, refName); } } }",5e2bdfa7dfb0c7992c64964f6b9cb76930034889,"private void updateForConfig(com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c, com.googlesource.gerrit.plugins.supermanifest.Event event) throws java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { com.googlesource.gerrit.plugins.supermanifest.SubModuleUpdater subModuleUpdater; switch (c.getToolType()) { case Repo : subModuleUpdater = new com.googlesource.gerrit.plugins.supermanifest.RepoUpdater(serverIdent, canonicalWebUrl); break; case Jiri : subModuleUpdater = new com.googlesource.gerrit.plugins.supermanifest.JiriUpdater(serverIdent, canonicalWebUrl); break; default : throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""invalid toolType: %s"", c.getToolType().name())); } try (com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader = new com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader()) { subModuleUpdater.update(reader, c, event.getRefName()); } }",af1f038ebb570645b9172ab6bc3fcd859c342f71,2017-09-05 11:35:54,3
118872,src_main_java_com_googlesource_gerrit_plugins_supermanifest_SuperManifestRefUpdatedListener.java,"@java.lang.Override public synchronized void onGitReferenceUpdated(com.googlesource.gerrit.plugins.supermanifest.Event event) { if (event.getProjectName().equals(allProjectsName.get())) { if (event.getRefName().equals(""refs/meta/config"")) { updateConfiguration(); } return; } for (com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c : config) { if (!(c.srcRepoKey.get().equals(event.getProjectName()))) { continue; } if (!((c.destBranch.equals(""*"")) || (c.srcRef.equals(event.getRefName())))) { continue; } if ((c.destBranch.equals(""*"")) && (!(event.getRefName().startsWith(com.googlesource.gerrit.plugins.supermanifest.REFS_HEADS)))) { continue; } try { com.googlesource.gerrit.plugins.supermanifest.SubModuleUpdater subModuleUpdater; switch (c.getToolType()) { case Repo : subModuleUpdater = new com.googlesource.gerrit.plugins.supermanifest.repo.RepoUpdater(serverIdent, canonicalWebUrl); break; default : throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""invalid toolType: %s"", c.getToolType().name())); } try (com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader = new com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader()) { subModuleUpdater.update(reader, c, event.getRefName()); } } catch (java.lang.Exception e) { java.lang.StackTraceElement here = java.lang.Thread.currentThread().getStackTrace()[1]; e.setStackTrace(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.trimStack(e.getStackTrace(), here)); java.io.StringWriter sw = new java.io.StringWriter(); java.io.PrintWriter pw = new java.io.PrintWriter(sw); e.printStackTrace(pw); error(""update for %s (ref %s) failed: %s"", c.toString(), event.getRefName(), sw); } } }",1a4bb1bf7d0767b6c5fce81d76048be9e423f176,"@java.lang.Override public void onGitReferenceUpdated(com.googlesource.gerrit.plugins.supermanifest.Event event) { try { update(event.getProjectName(), event.getRefName()); } catch (java.lang.Exception e) { java.lang.StackTraceElement here = java.lang.Thread.currentThread().getStackTrace()[1]; e.setStackTrace(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.trimStack(e.getStackTrace(), here)); java.io.StringWriter sw = new java.io.StringWriter(); java.io.PrintWriter pw = new java.io.PrintWriter(sw); e.printStackTrace(pw); error(""update for %s (ref %s) failed: %s"", event.getProjectName(), event.getRefName(), sw); } }",e0705da6985056335f9864a59d896255faa5bed0,"@java.lang.Override public synchronized void onGitReferenceUpdated(com.googlesource.gerrit.plugins.supermanifest.Event event) { if (event.getProjectName().equals(allProjectsName.get())) { if (event.getRefName().equals(""refs/meta/config"")) { updateConfiguration(); } return; } for (com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c : config) { if (!(c.srcRepoKey.get().equals(event.getProjectName()))) { continue; } if (!((c.destBranch.equals(""*"")) || (c.srcRef.equals(event.getRefName())))) { continue; } if ((c.destBranch.equals(""*"")) && (!(event.getRefName().startsWith(com.googlesource.gerrit.plugins.supermanifest.REFS_HEADS)))) { continue; } try { updateForConfig(c, event); } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException | org.eclipse.jgit.api.errors.GitAPIException e) { java.lang.StackTraceElement here = java.lang.Thread.currentThread().getStackTrace()[1]; e.setStackTrace(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.trimStack(e.getStackTrace(), here)); java.io.StringWriter sw = new java.io.StringWriter(); java.io.PrintWriter pw = new java.io.PrintWriter(sw); e.printStackTrace(pw); error(""update for %s (ref %s) failed: %s"", c.toString(), event.getRefName(), sw); } } }",3900bd2b6afd75ef857b39ec26588a6325f14b4c,2017-09-05 11:35:54,3
106139,src_main_java_com_ericsson_gerrit_plugins_highavailability_Configuration.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean getPreferIPv4() { return preferIPv4; },0dd80ac98dfcc7a557629c59c00145d760dd7fab,"private static java.lang.String getString(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String subSection, java.lang.String name, java.lang.String defaultValue) { java.lang.String value = cfg.getString(section, subSection, name); return value == null ? defaultValue : value; }",b79c25a5c728dc56971aaad6385c057ee9719e54,2017-09-05 14:14:51,25
106139,src_main_java_com_ericsson_gerrit_plugins_highavailability_Configuration.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.lang.String getJGroupsChannelName() { return jgroupsChannelName; },02c385498423edb33c913ee6add960e9a0bc87e9,"private static boolean getBoolean(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String name, boolean defaultValue) { try { return cfg.getBoolean(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error(java.lang.String.format(""invalid value for %s; using default value %s"", name, defaultValue)); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug((""Failed to retrieve boolean value: "" + (e.getMessage())), e); return defaultValue; } }",3b039bca7f18f21feed217945ab5a5062847b781,2017-09-05 14:14:51,25
106139,src_main_java_com_ericsson_gerrit_plugins_highavailability_peers_PeerInfoModule.java,@java.lang.Override protected void configure() { bind(new com.google.inject.TypeLiteral<com.google.common.base.Optional<com.ericsson.gerrit.plugins.highavailability.peers.PeerInfo>>() {}).toProvider(com.ericsson.gerrit.plugins.highavailability.peers.PluginConfigPeerInfoProvider.class); },aea730ac7e5fe6ff11cfe9435b1e932b480862a6,@java.lang.Override protected void configure() { bind(new com.google.inject.TypeLiteral<com.google.common.base.Optional<com.ericsson.gerrit.plugins.highavailability.peers.PeerInfo>>() {}).toProvider(com.ericsson.gerrit.plugins.highavailability.peers.JGroupsPeerInfoProvider.class); listener().to(com.ericsson.gerrit.plugins.highavailability.peers.JGroupsPeerInfoProvider.class); },a8378bc34f172caf79e772b5a964546778a86751,@java.lang.Override protected void configure() { bind(new com.google.inject.TypeLiteral<com.google.common.base.Optional<com.ericsson.gerrit.plugins.highavailability.peers.PeerInfo>>() {}).toProvider(com.ericsson.gerrit.plugins.highavailability.peers.PeerInfoProvider.class); if ((strategy) == (Configuration.PeerInfoStrategy.JGROUPS)) { listener().to(com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.class); } },3edf6433525305ebae10170ffe7022f62145f5b9,2017-09-05 14:14:51,25
118873,src_main_java_com_googlesource_gerrit_plugins_supermanifest_SuperManifestRefUpdatedListener.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { update(resource.getProjectState().getProject().getName(), resource.getRef()); return com.google.gerrit.extensions.restapi.Response.none(); }",d102d3c0cda5cd14054620a1a14f5c63d4fca0d4,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); update(resource.getProjectState().getProject().getName(), resource.getRef(), false); return com.google.gerrit.extensions.restapi.Response.none(); }",924915d60104b9800b8395dbdd1c9f6e1d2c4ab9,2017-09-05 14:29:42,5
110997,src_main_java_com_ericsson_gerrit_plugins_highavailability_SetupLocalHAReplica.java,,,"void run() throws java.lang.Exception { com.google.gerrit.common.FileUtil.mkdirsOrDie(replica.site_path, (""cannot create "" + (replica.site_path))); for (java.nio.file.Path dir : listDirsForCopy()) { copyFiles(dir); } com.ericsson.gerrit.plugins.highavailability.SetupLocalHAReplica.mkdir(replica.logs_dir); com.ericsson.gerrit.plugins.highavailability.SetupLocalHAReplica.mkdir(replica.tmp_dir); symlink(java.nio.file.Paths.get(masterConfig.getString(""gerrit"", null, ""basePath""))); symlink(sharedDir); org.eclipse.jgit.storage.file.FileBasedConfig replicaConfig = new org.eclipse.jgit.storage.file.FileBasedConfig(replica.gerrit_config.toFile(), org.eclipse.jgit.util.FS.DETECTED); replicaConfig.load(); if (masterConfig.getString(""database"", null, ""type"").equals(""h2"")) { masterConfig.setBoolean(""database"", ""h2"", ""autoServer"", true); replicaConfig.setBoolean(""database"", ""h2"", ""autoServer"", true); symlinkH2ReviewDbDir(); } masterConfig.setString(""httpd"", null, ""listenUrl"", ""http://localhost:8081""); replicaConfig.setString(""httpd"", null, ""listenUrl"", ""http://localhost:8082""); masterConfig.setString(""sshd"", null, ""listenAddress"", ""*:29419""); replicaConfig.setString(""sshd"", null, ""listenAddress"", ""*:29420""); replicaConfig.save(); setPeerInfoUrl(master, ""http://localhost:8082""); setPeerInfoUrl(replica, ""http://localhost:8081""); writeHAProxyConfigFile(); }",95141e97eef5f0fa1418ccf1a664c50040abdf28,"void run(SitePaths replica, org.eclipse.jgit.storage.file.FileBasedConfig pluginConfig) throws java.lang.Exception { this.replica = replica; com.google.gerrit.common.FileUtil.mkdirsOrDie(replica.site_path, (""cannot create "" + (replica.site_path))); configureMainSection(pluginConfig); configurePeerInfo(pluginConfig); for (java.nio.file.Path dir : listDirsForCopy()) { copyFiles(dir); } com.ericsson.gerrit.plugins.highavailability.SetupLocalHAReplica.mkdir(replica.logs_dir); com.ericsson.gerrit.plugins.highavailability.SetupLocalHAReplica.mkdir(replica.tmp_dir); symlink(java.nio.file.Paths.get(masterConfig.getString(""gerrit"", null, ""basePath""))); symlink(sharedDir); org.eclipse.jgit.storage.file.FileBasedConfig replicaConfig = new org.eclipse.jgit.storage.file.FileBasedConfig(replica.gerrit_config.toFile(), org.eclipse.jgit.util.FS.DETECTED); replicaConfig.load(); if (""h2"".equals(masterConfig.getString(""database"", null, ""type""))) { masterConfig.setBoolean(""database"", ""h2"", ""autoServer"", true); replicaConfig.setBoolean(""database"", ""h2"", ""autoServer"", true); symlinkH2ReviewDbDir(); } }",db299e18166db1b92ad16fc20883b2e499346ea5,2017-09-06 12:49:51,5
110997,src_main_java_com_ericsson_gerrit_plugins_highavailability_Setup.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void createHAReplicaSite() throws java.lang.Exception { if (ui.yesno(true, ""Create a local HA replica site"")) { if ((sharedDir) == null) { ui.message(((SHARED_DIRECTORY_KEY) + "" not set. Cannot setup HA replica"")); return; } java.lang.String replicaPath = ui.readString(""ha/1"", ""Location of the HA replica""); java.nio.file.Path replica = site.site_path.resolve(java.nio.file.Paths.get(replicaPath)); if (java.nio.file.Files.exists(replica)) { ui.message(""%s already exists, exiting"", replica); return; } new com.ericsson.gerrit.plugins.highavailability.SetupLocalHAReplica(pluginName, site, flags, sharedDir, new com.google.gerrit.server.config.SitePaths(replica)).run(); } }",9cb056becdcc1650b19628d4f8044fd0a5065f88,"private boolean createHAReplicaSite(org.eclipse.jgit.storage.file.FileBasedConfig pluginConfig) throws java.lang.Exception { ui.header(""HA replica site setup""); ui.message((""It is possible to create a copy of the master site and configure both sites to run\n"" + (((((""in HA mode as peers. This is possible when the directory where the copy will be\n"" + ""created is accessible from this machine\n"") + ""\n"") + ""NOTE: This step is optional. If you want to create the other site manually, or\n"") + ""if the other site needs to be created in a directory not accessible from this\n"") + ""machine then please skip this step.\n""))); if (ui.yesno(true, ""Create a HA replica site"")) { java.lang.String replicaPath = ui.readString(""ha/1"", ""Location of the HA replica""); java.nio.file.Path replica = site.site_path.resolve(java.nio.file.Paths.get(replicaPath)); if (java.nio.file.Files.exists(replica)) { ui.message(""%s already exists, exiting"", replica); return true; } config.save(); setupLocalHAReplica.run(new com.google.gerrit.server.config.SitePaths(replica), pluginConfig); return true; } return false; }",fad1f1b12f8256ea032892733cd908591c06cf06,2017-09-06 12:49:51,5
110997,src_main_java_com_ericsson_gerrit_plugins_highavailability_Setup.java,"@java.lang.Override public void run() throws java.lang.Exception { ui.message(""\n""); ui.header(""%s Plugin"", pluginName); if (ui.yesno(true, ""Configure %s"", pluginName)) { ui.header(""Configuring %s"", pluginName); java.nio.file.Path pluginConfigFile = site.etc_dir.resolve(((pluginName) + "".config"")); config = new org.eclipse.jgit.storage.file.FileBasedConfig(pluginConfigFile.toFile(), org.eclipse.jgit.util.FS.DETECTED); config.load(); configureMainSection(); configurePeerInfoSection(); configureHttp(); configureCacheSection(); configureIndexSection(); configureWebsessiosSection(); config.save(); } }",7fdb96619e1e12de111a17d90a1b3a02a6451c90,"@java.lang.Override public void run() throws java.lang.Exception { ui.message(""\n""); ui.header(""%s Plugin"", pluginName); if (ui.yesno(true, ""Configure %s"", pluginName)) { ui.header(""Configuring %s"", pluginName); java.nio.file.Path pluginConfigFile = site.etc_dir.resolve(((pluginName) + "".config"")); config = new org.eclipse.jgit.storage.file.FileBasedConfig(pluginConfigFile.toFile(), org.eclipse.jgit.util.FS.DETECTED); config.load(); configureMainSection(); configurePeerInfoSection(); configureHttp(); configureCacheSection(); configureIndexSection(); configureWebsessiosSection(); config.save(); flags.cfg.setBoolean(""database"", ""h2"", ""autoServer"", true); createHAReplicaSite(); } }",a8a6270e2db19c04ed829ad3591710f119b58768,"@java.lang.Override public void run() throws java.lang.Exception { ui.message(""\n""); ui.header(""%s Plugin"", pluginName); if (ui.yesno(true, ""Configure %s"", pluginName)) { ui.header(""Configuring %s"", pluginName); java.nio.file.Path pluginConfigFile = site.etc_dir.resolve(((pluginName) + "".config"")); config = new org.eclipse.jgit.storage.file.FileBasedConfig(pluginConfigFile.toFile(), org.eclipse.jgit.util.FS.DETECTED); config.load(); configureHttp(); configureCacheSection(); configureIndexSection(); configureWebsessiosSection(); if (!(createHAReplicaSite(config))) { configureMainSection(); configurePeerInfoSection(); config.save(); } flags.cfg.setBoolean(""database"", ""h2"", ""autoServer"", true); } }",ea8fa79899cf69106dac1cbfabffa212bd6e4515,2017-09-06 12:49:51,5
110997,src_main_java_com_ericsson_gerrit_plugins_highavailability_SetupLocalHAReplica.java,,,"private void setPeerInfoUrl(SitePaths site, java.lang.String url) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.storage.file.FileBasedConfig cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(site.etc_dir.resolve(((pluginName) + "".config"")).toFile(), org.eclipse.jgit.util.FS.DETECTED); cfg.load(); cfg.setString(""peerInfo"", null, ""url"", url); cfg.save(); }",e4456036da5ca9fac7310e103b70f483e65f9273,"private void configureMainSection(org.eclipse.jgit.storage.file.FileBasedConfig pluginConfig) throws java.io.IOException { pluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.MAIN_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SHARED_DIRECTORY_KEY, master.site_path.relativize(sharedDir).toString()); pluginConfig.save(); }",b70c7298efe09a613923d108cec0b47a6c6d5a5c,2017-09-06 12:49:51,5
110997,src_main_java_com_ericsson_gerrit_plugins_highavailability_SetupLocalHAReplica.java,,,private static final void mkdir(java.nio.file.Path dir) throws java.io.IOException { java.nio.file.Files.createDirectories(dir); },1e8a1321440dfe075af695d3f641c80056afb750,private static void mkdir(java.nio.file.Path dir) throws java.io.IOException { java.nio.file.Files.createDirectories(dir); },e0e48090c340327e5542fca2a5c7acd83a6ef31d,2017-09-06 12:49:51,5
110997,src_main_java_com_ericsson_gerrit_plugins_highavailability_SetupLocalHAReplica.java,,,"private boolean shouldSkip(java.nio.file.Path p) throws java.io.IOException { java.nio.file.Path resolved = master.site_path.resolve(p); for (java.nio.file.Path skip : toSkip) { if (java.nio.file.Files.isSameFile(resolved, skip)) { return true; } } return false; }",618965809b8ed82d4ead8c1e2569ec63fb994039,"private boolean shouldSkip(java.nio.file.Path p) throws java.io.IOException { java.nio.file.Path resolved = master.site_path.resolve(p); for (java.nio.file.Path skip : toSkip) { if ((java.nio.file.Files.exists(skip)) && (java.nio.file.Files.isSameFile(resolved, skip))) { return true; } } return false; }",e0a17d253c0c08618ffdd34b305a815d3352a35b,2017-09-06 12:49:51,5
110997,src_main_java_com_ericsson_gerrit_plugins_highavailability_SetupLocalHAReplica.java,,,"private void writeHAProxyConfigFile() throws java.io.IOException { try (java.io.FileWriter out = new java.io.FileWriter(master.etc_dir.resolve(""haproxy.config"").toFile());java.io.PrintWriter w = new java.io.PrintWriter(out)) { w.println(""global""); w.println("" daemon""); w.println(); w.println(""defaults""); w.println("" timeout connect 5s""); w.println("" timeout client 50s""); w.println("" timeout server 50s""); w.println(); w.println(""frontend http-in""); w.println("" bind localhost:8080""); w.println("" default_backend servers""); w.println(); w.println(""backend servers""); w.println("" server gerrit1 localhost:8081""); w.println("" # server gerrit2 localhost:8082""); w.println(); w.println(""listen ssh-in""); w.println("" bind localhost:29418""); w.println("" server gerrit1 localhost:29419""); w.println("" # server gerrit2 localhost:29420""); } }",719f383cce40dedc13be46dd5209ee562d7f29e9,"private void configurePeerInfo(org.eclipse.jgit.storage.file.FileBasedConfig pluginConfig) throws java.io.IOException { pluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.PEER_INFO_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.STRATEGY_KEY, ""jgroups""); pluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.PEER_INFO_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SUBSECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUSTER_NAME_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_CLUSTER_NAME); pluginConfig.save(); }",d60c30e069de40eea74bc9b20665182c63d0d4d7,2017-09-06 12:49:51,5
110997,src_main_java_com_ericsson_gerrit_plugins_highavailability_Setup.java,"private void configureMainSection() { ui.header(""Main section""); java.lang.String sharedDir = promptAndSetString(""Shared directory"", com.ericsson.gerrit.plugins.highavailability.MAIN_SECTION, com.ericsson.gerrit.plugins.highavailability.SHARED_DIRECTORY_KEY, null); if (!(com.google.common.base.Strings.isNullOrEmpty(sharedDir))) { java.nio.file.Path shared = site.site_path.resolve(sharedDir); com.google.gerrit.common.FileUtil.mkdirsOrDie(shared, (""cannot create "" + shared)); } }",066e88db772d59171ccb333c07d175890861f883,"private void configureMainSection() { ui.header(""Main section""); java.lang.String sharedDirDefault = (ui.isBatch()) ? ""shared"" : null; java.lang.String shared = promptAndSetString(""Shared directory"", com.ericsson.gerrit.plugins.highavailability.MAIN_SECTION, com.ericsson.gerrit.plugins.highavailability.SHARED_DIRECTORY_KEY, sharedDirDefault); if (!(com.google.common.base.Strings.isNullOrEmpty(shared))) { sharedDir = java.nio.file.Paths.get(shared); java.nio.file.Path resolved = site.site_path.resolve(sharedDir); com.google.gerrit.common.FileUtil.mkdirsOrDie(resolved, (""cannot create "" + resolved)); } }",a05183b3b6bd9686941f67c3db13b8f1d9393541,"private void configureMainSection() { ui.header(""Main section""); java.lang.String sharedDirDefault = (ui.isBatch()) ? com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SHARED_DIRECTORY : null; java.lang.String shared = promptAndSetString(""Shared directory"", com.ericsson.gerrit.plugins.highavailability.Configuration.MAIN_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SHARED_DIRECTORY_KEY, sharedDirDefault); if (!(com.google.common.base.Strings.isNullOrEmpty(shared))) { java.nio.file.Path resolved = site.site_path.resolve(java.nio.file.Paths.get(shared)); com.google.gerrit.common.FileUtil.mkdirsOrDie(resolved, (""cannot create "" + resolved)); } }",5f2a1c7738114ee3afa2d398b26168795a96cecb,2017-09-06 12:49:51,5
125410,gerrit-server_src_main_java_com_google_gerrit_server_git_LabelNormalizer.java,"private boolean applyRightFloor(com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.common.data.LabelType lt, com.google.gerrit.reviewdb.client.PatchSetApproval a) { com.google.gerrit.common.data.PermissionRange range = getRange(ctl, lt, a.getAccountId()); if (range.isEmpty()) { return false; } a.setValue(((short) (range.squash(a.getValue())))); return true; }",caa2e559428b6b73663cd624eef29890faae467e,"private boolean applyRightFloor(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.common.data.LabelType lt, com.google.gerrit.reviewdb.client.PatchSetApproval a) throws com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.permissions.PermissionBackend.ForChange forChange = permissionBackend.user(userFactory.create(a.getAccountId())).database(db).change(notes); try { forChange.check(new com.google.gerrit.server.permissions.LabelPermission(lt.getName())); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } short value = a.getValue(); while (value != 0) { try { forChange.check(new com.google.gerrit.server.permissions.LabelPermission.WithValue(lt.getName(), value)); break; } catch (com.google.gerrit.extensions.restapi.AuthException e) { if (value > 0) { value--; } else if (value < 0) { value++; } } } a.setValue(value); return true; }",e26131ad13c0ee27b7e9a1c57b81d7a6c154dcd3,"private boolean applyRightFloor(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.common.data.LabelType lt, com.google.gerrit.reviewdb.client.PatchSetApproval a) throws com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.permissions.PermissionBackend.ForChange forChange = permissionBackend.user(userFactory.create(a.getAccountId())).database(db).change(notes); try { forChange.check(new com.google.gerrit.server.permissions.LabelPermission(lt.getName())); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } try { forChange.check(new com.google.gerrit.server.permissions.LabelPermission.WithValue(lt.getName(), a.getValue())); return true; } catch (com.google.gerrit.extensions.restapi.AuthException e) { a.setValue(forChange.squashThenCheck(lt, a.getValue())); return true; } }",5ba6a23851c6676124bb61cc3a9fe3b5f9d83893,2017-09-07 12:12:21,3
124630,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangeApiImpl.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public boolean isPureRevert(@com.google.gerrit.common.Nullable java.lang.String claimedOriginal) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getPureRevert.setClaimedOriginal(claimedOriginal).apply(change); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot rebase change"", e); } }",c728a0b5d5d709cd04501f1d2f6da8b120702ccb,"@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo pureRevert(@com.google.gerrit.common.Nullable java.lang.String claimedOriginal) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getPureRevert.setClaimedOriginal(claimedOriginal).apply(change); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot compute pure revert"", e); } }",8640ffdad118163c8cd6e992173e5b6e3193dccf,2017-09-07 15:15:29,5
124630,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@org.junit.Test public void isPureRevertReturnsTrueForPureRevert() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); approve(r.getChangeId()); gApi.changes().id(r.getChangeId()).current().submit(); java.lang.String revertId = gApi.changes().id(r.getChangeId()).revert().get().id; assertThat(gApi.changes().id(revertId).isPureRevert()).isTrue(); },a1daffa1695df6f587eb9ab7554a3da80bfb5ab3,@org.junit.Test public void pureRevertReturnsTrueForPureRevert() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); merge(r); java.lang.String revertId = gApi.changes().id(r.getChangeId()).revert().get().id; assertThat(gApi.changes().id(revertId).pureRevert().isPureRevert).isTrue(); assertThat(gApi.changes().id(revertId).pureRevert(getRemoteHead().toObjectId().name()).isPureRevert).isTrue(); },3cb18afe6af071445bec2f24ce749fa843ce9ad0,2017-09-07 15:15:29,5
124630,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangeApiImpl.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean isPureRevert() throws com.google.gerrit.extensions.restapi.RestApiException { return isPureRevert(null); },72637ea7108152692273f9f0656a2e21deec8895,@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo pureRevert() throws com.google.gerrit.extensions.restapi.RestApiException { return pureRevert(null); },384cd282e5f2bec257de8ef474b00719484807aa,2017-09-07 15:15:29,5
124630,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_api_changes_ChangeApi.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean isPureRevert(java.lang.String claimedOriginal) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); },b20bb482327c644b7a9c55e1e14cf2782edd4460,@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo pureRevert(java.lang.String claimedOriginal) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); },30fe97eaaa28683effd4bab150c25f5066c6a243,2017-09-07 15:15:29,5
124630,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_api_changes_ChangeApi.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,boolean isPureRevert() throws com.google.gerrit.extensions.restapi.RestApiException;,ce16c1c31980c8e7ba55915f35abdbf05e928b4e,com.google.gerrit.extensions.common.PureRevertInfo pureRevert() throws com.google.gerrit.extensions.restapi.RestApiException;,cb5577a982f633f660420bd32805a972fe06e915,2017-09-07 15:15:29,5
124630,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_api_changes_ChangeApi.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean isPureRevert() throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); },ec268e0980f3ec51e47e21600f5941e289e757c9,@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo pureRevert() throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); },5e62004b9b1c8467ba4bb950997f4380ee90e2db,2017-09-07 15:15:29,5
124630,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_api_changes_ChangeApi.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,boolean isPureRevert(java.lang.String claimedOriginal) throws com.google.gerrit.extensions.restapi.RestApiException;,3139739071874718263b5e5d6a93c5faa1e4b450,com.google.gerrit.extensions.common.PureRevertInfo pureRevert(java.lang.String claimedOriginal) throws com.google.gerrit.extensions.restapi.RestApiException;,1f391b33a8245f076d4f50a753fa1db10e32c725,2017-09-07 15:15:29,5
125670,gerrit-server_src_main_java_com_google_gerrit_server_project_SuggestParentCandidates.java,private java.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> parents() { java.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> parents = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Project.NameKey p : projectCache.all()) { com.google.gerrit.server.project.ProjectState ps = projectCache.get(p); if (ps != null) { com.google.gerrit.reviewdb.client.Project.NameKey parent = ps.getProject().getParent(); if (parent != null) { parents.add(parent); } } } parents.add(allProjects); return parents; },0d0469bd10e1458583b5e77412bbe02b01520491,private java.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> parents() { java.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> parents = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Project.NameKey p : projectCache.all()) { com.google.gerrit.server.project.ProjectState ps = projectCache.get(p); if (ps != null) { com.google.gerrit.reviewdb.client.Project.NameKey parent = ps.getParent(); if (parent != null) { parents.add(parent); } } } parents.add(allProjects); return parents; },ebf3f0724d6e0f8584a1d15aca4015d71a659cfe,private java.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> parents() { java.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> parents = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Project.NameKey p : projectCache.all()) { com.google.gerrit.server.project.ProjectState ps = projectCache.get(p); if (ps != null) { com.google.gerrit.reviewdb.client.Project.NameKey parent = ps.getProject().getParent(); if (parent != null) { parents.add(parent); } } } parents.add(allProjects); return parents; },0d0469bd10e1458583b5e77412bbe02b01520491,2017-09-07 23:49:26,3
125670,gerrit-sshd_src_main_java_com_google_gerrit_sshd_AbstractGitCommand.java,"private void service() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.sshd.Failure, java.io.IOException { state = projectControl.getProjectState(); project = state.getProject(); projectName = project.getNameKey(); try { repo = repoManager.openRepository(projectName); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.sshd.Failure(1, ((""fatal: '"" + (project.getName())) + ""': not a git archive""), e); } try { runImpl(); } finally { repo.close(); } }",2ada341b25922b2243d95074b53e4b1511ae0408,"private void service() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.sshd.Failure, java.io.IOException { state = projectControl.getProjectState(); projectName = state.getProject().getNameKey(); try { repo = repoManager.openRepository(projectName); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.sshd.Failure(1, ((""fatal: '"" + (projectName.get())) + ""': not a git archive""), e); } try { runImpl(); } finally { repo.close(); } }",c8c8e923d5fe6805e52009b7119c4d32472140dc,"private void service() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.sshd.Failure, java.io.IOException { state = projectControl.getProjectState(); project = state.getProject(); projectName = project.getNameKey(); try { repo = repoManager.openRepository(projectName); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.sshd.Failure(1, ((""fatal: '"" + (project.getName())) + ""': not a git archive""), e); } try { runImpl(); } finally { repo.close(); } }",2ada341b25922b2243d95074b53e4b1511ae0408,2017-09-07 23:49:26,3
125451,gerrit-server_src_main_java_com_google_gerrit_server_git_receive_ReceiveCommits.java,"private boolean validCommit(org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, com.google.gerrit.reviewdb.client.Branch.NameKey branch, org.eclipse.jgit.transport.ReceiveCommand cmd, org.eclipse.jgit.lib.ObjectId id) throws java.io.IOException { if (validCommits.contains(id)) { return true; } org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(id); rw.parseBody(c); try (com.google.gerrit.server.events.CommitReceivedEvent receiveEvent = new com.google.gerrit.server.events.CommitReceivedEvent(cmd, project, branch.get(), rw.getObjectReader(), c, user)) { boolean isMerged = (((magicBranch) != null) && (cmd.getRefName().equals(magicBranch.cmd.getRefName()))) && (magicBranch.merged); com.google.gerrit.server.git.validators.CommitValidators validators = (isMerged) ? commitValidatorsFactory.forMergedCommits(perm, user.asIdentifiedUser()) : commitValidatorsFactory.forReceiveCommits(perm, branch, user.asIdentifiedUser(), sshInfo, repo, rw); messages.addAll(validators.validate(receiveEvent)); } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { logDebug(""Commit validation failed on {}"", c.name()); messages.addAll(e.getMessages()); reject(cmd, e.getMessage()); return false; } validCommits.add(c.copy()); return true; }",0f6f1fe365861a803b3f168bda33afc0effa3044,"private boolean validCommit(org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, com.google.gerrit.reviewdb.client.Branch.NameKey branch, org.eclipse.jgit.transport.ReceiveCommand cmd, org.eclipse.jgit.lib.ObjectId id) throws java.io.IOException { if (validCommits.contains(id)) { return true; } org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(id); rw.parseBody(c); try (com.google.gerrit.server.events.CommitReceivedEvent receiveEvent = new com.google.gerrit.server.events.CommitReceivedEvent(cmd, project.getNameKey(), branch.get(), rw.getObjectReader(), c, user)) { boolean isMerged = (((magicBranch) != null) && (cmd.getRefName().equals(magicBranch.cmd.getRefName()))) && (magicBranch.merged); com.google.gerrit.server.git.validators.CommitValidators validators = (isMerged) ? commitValidatorsFactory.forMergedCommits(perm, user.asIdentifiedUser()) : commitValidatorsFactory.forReceiveCommits(perm, branch, user.asIdentifiedUser(), sshInfo, repo, rw); messages.addAll(validators.validate(receiveEvent)); } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { logDebug(""Commit validation failed on {}"", c.name()); messages.addAll(e.getMessages()); reject(cmd, e.getMessage()); return false; } validCommits.add(c.copy()); return true; }",67719acc0e6faeb52afad4a28e80e8ec7731f63d,"private boolean validCommit(org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, com.google.gerrit.reviewdb.client.Branch.NameKey branch, org.eclipse.jgit.transport.ReceiveCommand cmd, org.eclipse.jgit.lib.ObjectId id) throws java.io.IOException { if (validCommits.contains(id)) { return true; } org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(id); rw.parseBody(c); try (com.google.gerrit.server.events.CommitReceivedEvent receiveEvent = new com.google.gerrit.server.events.CommitReceivedEvent(cmd, project, branch.get(), rw.getObjectReader(), c, user)) { boolean isMerged = (((magicBranch) != null) && (cmd.getRefName().equals(magicBranch.cmd.getRefName()))) && (magicBranch.merged); com.google.gerrit.server.git.validators.CommitValidators validators = (isMerged) ? commitValidatorsFactory.forMergedCommits(perm, user.asIdentifiedUser()) : commitValidatorsFactory.forReceiveCommits(perm, branch, user.asIdentifiedUser(), sshInfo, repo, rw); messages.addAll(validators.validate(receiveEvent)); } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { logDebug(""Commit validation failed on {}"", c.name()); messages.addAll(e.getMessages()); reject(cmd, e.getMessage()); return false; } validCommits.add(c.copy()); return true; }",0f6f1fe365861a803b3f168bda33afc0effa3044,2017-09-08 00:49:27,3
125451,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeInserter.java,"private void validate(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { if (!(validate)) { return; } com.google.gerrit.server.permissions.PermissionBackend.ForRef perm = permissionBackend.user(ctx.getUser()).project(ctx.getProject()).ref(refName); try { try (com.google.gerrit.server.events.CommitReceivedEvent event = new com.google.gerrit.server.events.CommitReceivedEvent(cmd, projectCache.checkedGet(ctx.getProject()).getProject(), change.getDest().get(), ctx.getRevWalk().getObjectReader(), commitId, ctx.getIdentifiedUser())) { commitValidatorsFactory.forGerritCommits(perm, new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getIdentifiedUser(), new com.google.gerrit.server.ssh.NoSshInfo(), ctx.getRevWalk()).validate(event); } } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getFullMessage()); } }",b0d62a6e94969806758fdedd8aa00d8bf1b80244,"private void validate(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { if (!(validate)) { return; } com.google.gerrit.server.permissions.PermissionBackend.ForRef perm = permissionBackend.user(ctx.getUser()).project(ctx.getProject()).ref(refName); try { try (com.google.gerrit.server.events.CommitReceivedEvent event = new com.google.gerrit.server.events.CommitReceivedEvent(cmd, ctx.getProject(), change.getDest().get(), ctx.getRevWalk().getObjectReader(), commitId, ctx.getIdentifiedUser())) { commitValidatorsFactory.forGerritCommits(perm, new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getIdentifiedUser(), new com.google.gerrit.server.ssh.NoSshInfo(), ctx.getRevWalk()).validate(event); } } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getFullMessage()); } }",40a3af7a20d7d50088f00268febf940dd3287b74,"private void validate(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { if (!(validate)) { return; } com.google.gerrit.server.permissions.PermissionBackend.ForRef perm = permissionBackend.user(ctx.getUser()).project(ctx.getProject()).ref(refName); try { try (com.google.gerrit.server.events.CommitReceivedEvent event = new com.google.gerrit.server.events.CommitReceivedEvent(cmd, projectCache.checkedGet(ctx.getProject()).getProject(), change.getDest().get(), ctx.getRevWalk().getObjectReader(), commitId, ctx.getIdentifiedUser())) { commitValidatorsFactory.forGerritCommits(perm, new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getIdentifiedUser(), new com.google.gerrit.server.ssh.NoSshInfo(), ctx.getRevWalk()).validate(event); } } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getFullMessage()); } }",b0d62a6e94969806758fdedd8aa00d8bf1b80244,2017-09-08 00:49:27,3
125451,gerrit-server_src_main_java_com_google_gerrit_server_change_PatchSetInserter.java,"private void validate(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (checkAddPatchSetPermission) { permissionBackend.user(ctx.getUser()).database(ctx.getDb()).change(origCtl.getNotes()).check(ChangePermission.ADD_PATCH_SET); } if (!(validate)) { return; } com.google.gerrit.server.permissions.PermissionBackend.ForRef perm = permissionBackend.user(ctx.getUser()).ref(origCtl.getChange().getDest()); java.lang.String refName = getPatchSetId().toRefName(); try (com.google.gerrit.server.events.CommitReceivedEvent event = new com.google.gerrit.server.events.CommitReceivedEvent(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commitId, ((refName.substring(0, ((refName.lastIndexOf('/')) + 1))) + ""new"")), origCtl.getProjectControl().getProject(), origCtl.getRefControl().getRefName(), ctx.getRevWalk().getObjectReader(), commitId, ctx.getIdentifiedUser())) { commitValidatorsFactory.forGerritCommits(perm, new com.google.gerrit.reviewdb.client.Branch.NameKey(origCtl.getProject().getNameKey(), origCtl.getRefControl().getRefName()), ctx.getIdentifiedUser(), new com.google.gerrit.server.ssh.NoSshInfo(), ctx.getRevWalk()).validate(event); } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getFullMessage()); } }",a0c070acfd5df924326640e65818a07f52c9c797,"private void validate(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (checkAddPatchSetPermission) { permissionBackend.user(ctx.getUser()).database(ctx.getDb()).change(origNotes).check(ChangePermission.ADD_PATCH_SET); } if (!(validate)) { return; } com.google.gerrit.server.permissions.PermissionBackend.ForRef perm = permissionBackend.user(ctx.getUser()).ref(origNotes.getChange().getDest()); java.lang.String refName = getPatchSetId().toRefName(); try (com.google.gerrit.server.events.CommitReceivedEvent event = new com.google.gerrit.server.events.CommitReceivedEvent(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commitId, ((refName.substring(0, ((refName.lastIndexOf('/')) + 1))) + ""new"")), origNotes.getProjectName(), origNotes.getChange().getDest().get(), ctx.getRevWalk().getObjectReader(), commitId, ctx.getIdentifiedUser())) { commitValidatorsFactory.forGerritCommits(perm, origNotes.getChange().getDest(), ctx.getIdentifiedUser(), new com.google.gerrit.server.ssh.NoSshInfo(), ctx.getRevWalk()).validate(event); } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getFullMessage()); } }",8188cd9f49c7fbb676a5d1b59d79667ff5e3812f,"private void validate(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (checkAddPatchSetPermission) { permissionBackend.user(ctx.getUser()).database(ctx.getDb()).change(origNotes).check(ChangePermission.ADD_PATCH_SET); } if (!(validate)) { return; } com.google.gerrit.server.permissions.PermissionBackend.ForRef perm = permissionBackend.user(ctx.getUser()).ref(origNotes.getChange().getDest()); java.lang.String refName = getPatchSetId().toRefName(); try (com.google.gerrit.server.events.CommitReceivedEvent event = new com.google.gerrit.server.events.CommitReceivedEvent(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commitId, ((refName.substring(0, ((refName.lastIndexOf('/')) + 1))) + ""new"")), projectCache.checkedGet(origNotes.getProjectName()).getProject(), origNotes.getChange().getDest().get(), ctx.getRevWalk().getObjectReader(), commitId, ctx.getIdentifiedUser())) { commitValidatorsFactory.forGerritCommits(perm, origNotes.getChange().getDest(), ctx.getIdentifiedUser(), new com.google.gerrit.server.ssh.NoSshInfo(), ctx.getRevWalk()).validate(event); } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getFullMessage()); } }",e71509a2f29edb6d1deed3501ae5302a1bc4f575,2017-09-08 00:49:27,3
125451,gerrit-server_src_main_java_com_google_gerrit_server_git_validators_CommitValidators.java,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } com.google.gerrit.reviewdb.client.Account.Id accountId = Account.Id.fromRef(receiveEvent.refName); if (accountId == null) { return java.util.Collections.emptyList(); } try { java.util.List<java.lang.String> errorMessages = accountValidator.validate(accountId, receiveEvent.revWalk, receiveEvent.command.getOldId(), receiveEvent.commit); if (!(errorMessages.isEmpty())) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""invalid account configuration"", errorMessages.stream().map(( m) -> new com.google.gerrit.server.git.validators.CommitValidationMessage(m, true)).collect(java.util.stream.Collectors.toList())); } } catch (java.io.IOException e) { java.lang.String m = java.lang.String.format(""Validating update for account %s failed"", accountId.get()); com.google.gerrit.server.git.validators.CommitValidators.log.error(m, e); throw new com.google.gerrit.server.git.validators.CommitValidationException(m, e); } return java.util.Collections.emptyList(); }",5197c12840424003003d3d6e6f33c9fc9854a951,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } com.google.gerrit.reviewdb.client.Account.Id accountId = Account.Id.fromRef(receiveEvent.refName); if (accountId == null) { return java.util.Collections.emptyList(); } try { java.util.List<java.lang.String> errorMessages = accountValidator.validate(accountId, receiveEvent.revWalk, receiveEvent.command.getOldId(), receiveEvent.commit); if (!(errorMessages.isEmpty())) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""invalid account configuration"", errorMessages.stream().map(( m) -> new com.google.gerrit.server.git.validators.CommitValidationMessage(m, true)).collect(java.util.stream.Collectors.toList())); } } catch (java.io.IOException e) { java.lang.String m = java.lang.String.format(""Validating update for account %s failed"", accountId.get()); com.google.gerrit.server.git.validators.CommitValidators.log.error(m, e); throw new com.google.gerrit.server.git.validators.CommitValidationException(m, e); } return java.util.Collections.emptyList(); }",e2da9f85de411dc96fc2486f92118f0b09281cf0,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } com.google.gerrit.reviewdb.client.Account.Id accountId = Account.Id.fromRef(receiveEvent.refName); if (accountId == null) { return java.util.Collections.emptyList(); } try { java.util.List<java.lang.String> errorMessages = accountValidator.validate(accountId, receiveEvent.revWalk, receiveEvent.command.getOldId(), receiveEvent.commit); if (!(errorMessages.isEmpty())) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""invalid account configuration"", errorMessages.stream().map(( m) -> new com.google.gerrit.server.git.validators.CommitValidationMessage(m, true)).collect(java.util.stream.Collectors.toList())); } } catch (java.io.IOException e) { java.lang.String m = java.lang.String.format(""Validating update for account %s failed"", accountId.get()); com.google.gerrit.server.git.validators.CommitValidators.log.error(m, e); throw new com.google.gerrit.server.git.validators.CommitValidationException(m, e); } return java.util.Collections.emptyList(); }",5197c12840424003003d3d6e6f33c9fc9854a951,2017-09-08 00:49:27,3
125451,gerrit-server_src_main_java_com_google_gerrit_server_events_CommitReceivedEvent.java,@java.lang.Override public Project.NameKey getProjectNameKey() { return project.getNameKey(); },2d1fcaf39572d71df4b350f004665d570f35816e,@java.lang.Override public Project.NameKey getProjectNameKey() { return project; },90290a6821883b339fdc1757142a5dc1462cf7dd,@java.lang.Override public Project.NameKey getProjectNameKey() { return project.getNameKey(); },2d1fcaf39572d71df4b350f004665d570f35816e,2017-09-08 00:49:27,3
125451,gerrit-server_src_main_java_com_google_gerrit_server_git_validators_CommitValidators.java,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if ((allUsers.equals(receiveEvent.project.getNameKey())) && (RefNames.REFS_EXTERNAL_IDS.equals(receiveEvent.refName))) { try { java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = externalIdsConsistencyChecker.check(receiveEvent.commit); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> msgs = problems.stream().map(( p) -> new com.google.gerrit.server.git.validators.CommitValidationMessage(p.message, (p.status == ConsistencyProblemInfo.Status.ERROR))).collect(java.util.stream.Collectors.toList()); if (msgs.stream().anyMatch(( m) -> m.isError())) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""invalid external IDs"", msgs); } return msgs; } catch (java.io.IOException e) { java.lang.String m = ""error validating external IDs""; com.google.gerrit.server.git.validators.CommitValidators.log.warn(m, e); throw new com.google.gerrit.server.git.validators.CommitValidationException(m, e); } } return java.util.Collections.emptyList(); }",1eed8d8e587a8123648296b48b7548c24ff33c7b,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if ((allUsers.equals(receiveEvent.project)) && (RefNames.REFS_EXTERNAL_IDS.equals(receiveEvent.refName))) { try { java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = externalIdsConsistencyChecker.check(receiveEvent.commit); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> msgs = problems.stream().map(( p) -> new com.google.gerrit.server.git.validators.CommitValidationMessage(p.message, (p.status == ConsistencyProblemInfo.Status.ERROR))).collect(java.util.stream.Collectors.toList()); if (msgs.stream().anyMatch(( m) -> m.isError())) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""invalid external IDs"", msgs); } return msgs; } catch (java.io.IOException e) { java.lang.String m = ""error validating external IDs""; com.google.gerrit.server.git.validators.CommitValidators.log.warn(m, e); throw new com.google.gerrit.server.git.validators.CommitValidationException(m, e); } } return java.util.Collections.emptyList(); }",c73a0cac3aa44a5c8ce321aed41132cb10c1554a,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if ((allUsers.equals(receiveEvent.project.getNameKey())) && (RefNames.REFS_EXTERNAL_IDS.equals(receiveEvent.refName))) { try { java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = externalIdsConsistencyChecker.check(receiveEvent.commit); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> msgs = problems.stream().map(( p) -> new com.google.gerrit.server.git.validators.CommitValidationMessage(p.message, (p.status == ConsistencyProblemInfo.Status.ERROR))).collect(java.util.stream.Collectors.toList()); if (msgs.stream().anyMatch(( m) -> m.isError())) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""invalid external IDs"", msgs); } return msgs; } catch (java.io.IOException e) { java.lang.String m = ""error validating external IDs""; com.google.gerrit.server.git.validators.CommitValidators.log.warn(m, e); throw new com.google.gerrit.server.git.validators.CommitValidationException(m, e); } } return java.util.Collections.emptyList(); }",1eed8d8e587a8123648296b48b7548c24ff33c7b,2017-09-08 00:49:27,3
125430,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_change_ConsistencyCheckerIT.java,"private void assertNoProblems(com.google.gerrit.server.project.ChangeControl ctl, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.FixInput fix) { assertThat(checker.check(ctl, fix).problems()).isEmpty(); }",96c2e080f76edba173ce9ab86fb9b8a7cab140f1,"private void assertNoProblems(com.google.gerrit.server.notedb.ChangeNotes notes, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.FixInput fix) throws com.google.gerrit.server.project.NoSuchChangeException { assertThat(checker.check(controlForNotes(notes), fix).problems()).isEmpty(); }",c25643457ffe149c5e0c7179d5179bd38860b1bc,"private void assertNoProblems(com.google.gerrit.server.notedb.ChangeNotes notes, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.FixInput fix) throws java.lang.Exception { assertThat(checker.check(controlForNotes(notes), fix).problems()).isEmpty(); }",1f55b1723ac4234c97ba4f30897bed171e71df5d,2017-09-11 23:36:22,6
125430,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_change_ConsistencyCheckerIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.server.project.ChangeControl controlForNotes(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.server.project.NoSuchChangeException { return changeControlFactory.controlFor(notes, userFactory.create(admin.id)); }",a3cc0b465766cfc8e64679a73c513bcda770a172,"private com.google.gerrit.server.project.ChangeControl controlForNotes(com.google.gerrit.server.notedb.ChangeNotes notes) throws java.lang.Exception { return changeControlFactory.controlFor(notes, userFactory.create(admin.id)); }",201623f430c2eb58f15aa52dccc8e69685168e47,2017-09-11 23:36:22,6
125430,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_change_ConsistencyCheckerIT.java,"private com.google.gerrit.server.project.ChangeControl incrementPatchSet(com.google.gerrit.server.project.ChangeControl ctl, org.eclipse.jgit.revwalk.RevCommit commit) throws java.lang.Exception { com.google.gerrit.server.change.PatchSetInserter ins; try (com.google.gerrit.server.update.BatchUpdate bu = newUpdate(ctl.getChange().getOwner())) { ins = patchSetInserterFactory.create(ctl, nextPatchSetId(ctl), commit).setValidate(false).setFireRevisionCreated(false).setNotify(NotifyHandling.NONE); bu.addOp(ctl.getId(), ins).execute(); } return reload(ctl); }",572702425c3ec554ac15f228be1c1ffeb9376622,"private com.google.gerrit.server.notedb.ChangeNotes incrementPatchSet(com.google.gerrit.server.notedb.ChangeNotes notes, org.eclipse.jgit.revwalk.RevCommit commit) throws java.lang.Exception { com.google.gerrit.server.change.PatchSetInserter ins; try (com.google.gerrit.server.update.BatchUpdate bu = newUpdate(notes.getChange().getOwner())) { ins = patchSetInserterFactory.create(controlForNotes(notes), nextPatchSetId(notes), commit).setValidate(false).setFireRevisionCreated(false).setNotify(NotifyHandling.NONE); bu.addOp(notes.getChangeId(), ins).execute(); } return reload(notes); }",4b0c68d253a4c3e810b6e4a4c948965c78688c13,"private com.google.gerrit.server.notedb.ChangeNotes incrementPatchSet(com.google.gerrit.server.notedb.ChangeNotes notes, org.eclipse.jgit.revwalk.RevCommit commit) throws java.lang.Exception { com.google.gerrit.server.change.PatchSetInserter ins; try (com.google.gerrit.server.update.BatchUpdate bu = newUpdate(notes.getChange().getOwner())) { ins = patchSetInserterFactory.create(notes, nextPatchSetId(notes), commit).setValidate(false).setFireRevisionCreated(false).setNotify(NotifyHandling.NONE); bu.addOp(notes.getChangeId(), ins).execute(); } return reload(notes); }",42074695ecaf2992c5202a7bc9802023d555e107,2017-09-11 23:36:22,6
125430,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_change_ConsistencyCheckerIT.java,"private void assertProblems(com.google.gerrit.server.project.ChangeControl ctl, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.FixInput fix, com.google.gerrit.extensions.common.ProblemInfo first, com.google.gerrit.extensions.common.ProblemInfo... rest) { java.util.List<com.google.gerrit.extensions.common.ProblemInfo> expected = new java.util.ArrayList((1 + (rest.length))); expected.add(first); expected.addAll(java.util.Arrays.asList(rest)); assertThat(checker.check(ctl, fix).problems()).containsExactlyElementsIn(expected).inOrder(); }",739c19619e81e63600c09aad63bc34098540b303,"private void assertProblems(com.google.gerrit.server.notedb.ChangeNotes notes, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.FixInput fix, com.google.gerrit.extensions.common.ProblemInfo first, com.google.gerrit.extensions.common.ProblemInfo... rest) throws com.google.gerrit.server.project.NoSuchChangeException { java.util.List<com.google.gerrit.extensions.common.ProblemInfo> expected = new java.util.ArrayList((1 + (rest.length))); expected.add(first); expected.addAll(java.util.Arrays.asList(rest)); assertThat(checker.check(controlForNotes(notes), fix).problems()).containsExactlyElementsIn(expected).inOrder(); }",41682eb09243ef9385b122cba18a96946b67f92b,"private void assertProblems(com.google.gerrit.server.notedb.ChangeNotes notes, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.FixInput fix, com.google.gerrit.extensions.common.ProblemInfo first, com.google.gerrit.extensions.common.ProblemInfo... rest) throws java.lang.Exception { java.util.List<com.google.gerrit.extensions.common.ProblemInfo> expected = new java.util.ArrayList((1 + (rest.length))); expected.add(first); expected.addAll(java.util.Arrays.asList(rest)); assertThat(checker.check(controlForNotes(notes), fix).problems()).containsExactlyElementsIn(expected).inOrder(); }",895c8b0271212d9b6ca02b051eab72c119f510f5,2017-09-11 23:36:22,6
125430,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_change_ConsistencyCheckerIT.java,"@org.junit.Test public void missingRepo() throws java.lang.Exception { assumeNoteDbDisabled(); com.google.gerrit.server.project.ChangeControl ctl = insertChange(); com.google.gerrit.reviewdb.client.Project.NameKey name = ctl.getProject().getNameKey(); ((com.google.gerrit.testutil.InMemoryRepositoryManager) (repoManager)).deleteRepository(name); assertProblems(ctl, null, com.google.gerrit.acceptance.server.change.ConsistencyCheckerIT.problem((""Destination repository not found: "" + name))); }",a6e970ffc6c56fba7a4a22ec086924e7fff9af7b,"@org.junit.Test public void missingRepo() throws java.lang.Exception { assumeNoteDbDisabled(); com.google.gerrit.server.notedb.ChangeNotes notes = insertChange(); com.google.gerrit.reviewdb.client.Project.NameKey name = notes.getProjectName(); ((com.google.gerrit.testutil.InMemoryRepositoryManager) (repoManager)).deleteRepository(name); assertProblems(notes, null, com.google.gerrit.acceptance.server.change.ConsistencyCheckerIT.problem((""Destination repository not found: "" + name))); }",3c921228206ff3948491b38bc3ba19c641c4f2a7,"@org.junit.Test public void missingRepo() throws java.lang.Exception { assumeNoteDbDisabled(); com.google.gerrit.server.notedb.ChangeNotes notes = insertChange(); com.google.gerrit.reviewdb.client.Project.NameKey name = notes.getProjectName(); com.google.gerrit.server.project.ChangeControl ctl = controlForNotes(notes); ((com.google.gerrit.testutil.InMemoryRepositoryManager) (repoManager)).deleteRepository(name); assertThat(checker.check(ctl, null).problems()).containsExactly(com.google.gerrit.acceptance.server.change.ConsistencyCheckerIT.problem((""Destination repository not found: "" + name))); }",ba31c8df3ebc4d7ae7f9dc64b09d2eb8c28cec93,2017-09-11 23:36:22,6
126091,gerrit-server_src_test_java_com_google_gerrit_server_git_LabelNormalizerTest.java,"private void setUpChange() throws java.lang.Exception { change = new com.google.gerrit.reviewdb.client.Change(new com.google.gerrit.reviewdb.client.Change.Key(""Iabcd1234abcd1234abcd1234abcd1234abcd1234""), new com.google.gerrit.reviewdb.client.Change.Id(1), userId, new com.google.gerrit.reviewdb.client.Branch.NameKey(allProjects, ""refs/heads/master""), com.google.gerrit.common.TimeUtil.nowTs()); com.google.gerrit.reviewdb.client.PatchSetInfo ps = new com.google.gerrit.reviewdb.client.PatchSetInfo(new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), 1)); ps.setSubject(""Test change""); change.setCurrentPatchSet(ps); db.changes().insert(com.google.common.collect.ImmutableList.of(change)); }",f7a65c6ab04151907326d7cee77441eebde06f29,"private void setUpChange() throws java.lang.Exception { change = new com.google.gerrit.reviewdb.client.Change(new com.google.gerrit.reviewdb.client.Change.Key(""Iabcd1234abcd1234abcd1234abcd1234abcd1234""), new com.google.gerrit.reviewdb.client.Change.Id(1), userId, new com.google.gerrit.reviewdb.client.Branch.NameKey(allProjects, ""refs/heads/master""), com.google.gerrit.common.TimeUtil.nowTs()); notes = changeNotesFactory.createFromIndexedChange(change); com.google.gerrit.reviewdb.client.PatchSetInfo ps = new com.google.gerrit.reviewdb.client.PatchSetInfo(new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), 1)); ps.setSubject(""Test change""); change.setCurrentPatchSet(ps); db.changes().insert(com.google.common.collect.ImmutableList.of(change)); }",700f9e50f4c5f0600584ee5d2bbf9487c253b27a,"private void setUpChange() throws java.lang.Exception { change = new com.google.gerrit.reviewdb.client.Change(new com.google.gerrit.reviewdb.client.Change.Key(""Iabcd1234abcd1234abcd1234abcd1234abcd1234""), new com.google.gerrit.reviewdb.client.Change.Id(1), userId, new com.google.gerrit.reviewdb.client.Branch.NameKey(allProjects, ""refs/heads/master""), com.google.gerrit.common.TimeUtil.nowTs()); com.google.gerrit.reviewdb.client.PatchSetInfo ps = new com.google.gerrit.reviewdb.client.PatchSetInfo(new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), 1)); ps.setSubject(""Test change""); change.setCurrentPatchSet(ps); db.changes().insert(com.google.common.collect.ImmutableList.of(change)); notes = changeNotesFactory.createChecked(db, change); }",e9c497c08e3e2e5ea887d248d763d6351cde8304,2017-09-12 09:19:13,3
126430,gerrit-server_src_main_java_com_google_gerrit_server_ChangeFinder.java,"private java.util.List<com.google.gerrit.server.project.ChangeControl> asChangeControls(java.util.List<com.google.gerrit.server.query.change.ChangeData> cds, com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = new java.util.ArrayList(cds.size()); if (!(indexConfig.separateChangeSubIndexes())) { for (com.google.gerrit.server.query.change.ChangeData cd : cds) { com.google.gerrit.server.ChangeFinder.checkedAdd(cd, ctls, user); } return ctls; } java.util.Set<com.google.gerrit.reviewdb.client.Change.Id> seen = com.google.common.collect.Sets.newHashSetWithExpectedSize(cds.size()); for (com.google.gerrit.server.query.change.ChangeData cd : cds) { if (seen.add(cd.getId())) { com.google.gerrit.server.ChangeFinder.checkedAdd(cd, ctls, user); } } return ctls; }",7f61592c5024246909b2b491d31af8477861e218,private java.util.List<com.google.gerrit.server.notedb.ChangeNotes> asChangeControls(java.util.List<com.google.gerrit.server.query.change.ChangeData> cds) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = new java.util.ArrayList(cds.size()); if (!(indexConfig.separateChangeSubIndexes())) { for (com.google.gerrit.server.query.change.ChangeData cd : cds) { notes.add(cd.notes()); } return notes; } java.util.Set<com.google.gerrit.reviewdb.client.Change.Id> seen = com.google.common.collect.Sets.newHashSetWithExpectedSize(cds.size()); for (com.google.gerrit.server.query.change.ChangeData cd : cds) { if (seen.add(cd.getId())) { notes.add(cd.notes()); } } return notes; },5a68bc9a15b9981b6a7b085dd24c13a8224a0ef4,private java.util.List<com.google.gerrit.server.notedb.ChangeNotes> asChangeNotes(java.util.List<com.google.gerrit.server.query.change.ChangeData> cds) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = new java.util.ArrayList(cds.size()); if (!(indexConfig.separateChangeSubIndexes())) { for (com.google.gerrit.server.query.change.ChangeData cd : cds) { notes.add(cd.notes()); } return notes; } java.util.Set<com.google.gerrit.reviewdb.client.Change.Id> seen = com.google.common.collect.Sets.newHashSetWithExpectedSize(cds.size()); for (com.google.gerrit.server.query.change.ChangeData cd : cds) { if (seen.add(cd.getId())) { notes.add(cd.notes()); } } return notes; },a5e91d84f3736ec5ff8d0e6b4074b4806bb86f09,2017-09-12 12:56:16,5
126430,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,"private com.google.gerrit.server.change.ChangeResource parseResource(com.google.gerrit.acceptance.PushOneCommit.Result r) throws java.lang.Exception { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeFinder.find(r.getChangeId(), atrScope.get().getUser()); assertThat(ctls).hasSize(1); return changeResourceFactory.create(ctls.get(0)); }",711be0a2f3ceb51a2cfe4c6815c5d5f3ffaa1f27,"private com.google.gerrit.server.change.ChangeResource parseResource(com.google.gerrit.acceptance.PushOneCommit.Result r) throws java.lang.Exception { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(r.getChangeId()); assertThat(notes).hasSize(1); return changeResourceFactory.create(changeControlFactory.controlFor(notes.get(0), atrScope.get().getUser())); }",dfd36e70cb2d3679e7401f5591f867295bee86b5,private com.google.gerrit.server.change.ChangeResource parseResource(com.google.gerrit.acceptance.PushOneCommit.Result r) throws java.lang.Exception { return parseChangeResource(r.getChangeId()); },c408acc3785237eb1217cfc9de808c6522a3f0d4,2017-09-12 12:56:16,5
126430,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangesCollection.java,"@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeFinder.find(id.encoded(), user.get()); if (ctls.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((ctls.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.project.ChangeControl ctl = ctls.get(0); if (!(canRead(ctl))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(ctl); }",eef5278a191bf2a9378b35dfe88c0275c1ab4972,"@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded()); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(changeControlFactory.controlFor(change, user.get())); }",f0f5e913b5ca6678327004d4bed4ed03bd5cff45,"@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded()); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(controlFor(change)); }",acea518d611e12c7b5de3756f96a49374b6ade59,2017-09-12 12:56:16,5
126430,gerrit-sshd_src_main_java_com_google_gerrit_sshd_ChangeArgumentParser.java,"private java.util.List<com.google.gerrit.server.project.ChangeControl> changeFromNotesFactory(java.lang.String id, com.google.gerrit.server.CurrentUser currentUser) throws com.google.gerrit.sshd.BaseCommand.UnloggedFailure, com.google.gwtorm.server.OrmException { return changeNotesFactory.create(db, parseId(id)).stream().map(( changeNote) -> controlForChange(changeNote, currentUser)).filter(( changeControl) -> changeControl.isPresent()).map(( changeControl) -> changeControl.get()).collect(java.util.stream.Collectors.toList()); }",2b14c2a89e2daf0d440e2efef130682bbdf877f0,"private java.util.List<com.google.gerrit.server.notedb.ChangeNotes> changeFromNotesFactory(java.lang.String id) throws com.google.gerrit.sshd.BaseCommand.UnloggedFailure, com.google.gwtorm.server.OrmException { return changeNotesFactory.create(db, parseId(id)).stream().collect(java.util.stream.Collectors.toList()); }",67df59efda4dd698f0425d8966d327c9cde6ee8b,"private java.util.List<com.google.gerrit.server.notedb.ChangeNotes> changeFromNotesFactory(java.lang.String id) throws com.google.gerrit.sshd.BaseCommand.UnloggedFailure, com.google.gwtorm.server.OrmException { return changeNotesFactory.create(db, parseId(id)); }",51d8a6cef032259944535eac432f821a17ac58c0,2017-09-12 12:56:16,5
126430,gerrit-server_src_main_java_com_google_gerrit_server_ChangeFinder.java,"public java.util.List<com.google.gerrit.server.project.ChangeControl> find(java.lang.String id, com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { if (id.isEmpty()) { return java.util.Collections.emptyList(); } int z = id.lastIndexOf('~'); int y = id.lastIndexOf('~', (z - 1)); if ((y < 0) && (z > 0)) { java.lang.Integer n = com.google.common.primitives.Ints.tryParse(id.substring((z + 1))); if (n != null) { return fromProjectNumber(user, id.substring(0, z), n.intValue()); } } if ((y < 0) && (z < 0)) { java.lang.Integer n = com.google.common.primitives.Ints.tryParse(id); if (n != null) { return find(new com.google.gerrit.reviewdb.client.Change.Id(n), user); } } com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().noFields(); if ((y > 0) && (z > 0)) { java.util.Optional<com.google.gerrit.server.change.ChangeTriplet> triplet = com.google.gerrit.server.change.ChangeTriplet.parse(id, y, z); if (triplet.isPresent()) { com.google.gerrit.server.change.ChangeTriplet t = triplet.get(); return asChangeControls(query.byBranchKey(t.branch(), t.id()), user); } } return asChangeControls(query.byKeyPrefix(id), user); }",943739cb571cc07cd5bd96447b97dc7eb07560ad,"public java.util.List<com.google.gerrit.server.notedb.ChangeNotes> find(java.lang.String id) throws com.google.gwtorm.server.OrmException { if (id.isEmpty()) { return java.util.Collections.emptyList(); } int z = id.lastIndexOf('~'); int y = id.lastIndexOf('~', (z - 1)); if ((y < 0) && (z > 0)) { java.lang.Integer n = com.google.common.primitives.Ints.tryParse(id.substring((z + 1))); if (n != null) { return fromProjectNumber(id.substring(0, z), n.intValue()); } } if ((y < 0) && (z < 0)) { java.lang.Integer n = com.google.common.primitives.Ints.tryParse(id); if (n != null) { return find(new com.google.gerrit.reviewdb.client.Change.Id(n)); } } com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().noFields(); if ((y > 0) && (z > 0)) { java.util.Optional<com.google.gerrit.server.change.ChangeTriplet> triplet = com.google.gerrit.server.change.ChangeTriplet.parse(id, y, z); if (triplet.isPresent()) { com.google.gerrit.server.change.ChangeTriplet t = triplet.get(); return asChangeControls(query.byBranchKey(t.branch(), t.id())); } } return asChangeControls(query.byKeyPrefix(id)); }",4153b7cdf965172b9ee6140f6de462916e14c1b5,"public java.util.List<com.google.gerrit.server.notedb.ChangeNotes> find(java.lang.String id) throws com.google.gwtorm.server.OrmException { if (id.isEmpty()) { return java.util.Collections.emptyList(); } int z = id.lastIndexOf('~'); int y = id.lastIndexOf('~', (z - 1)); if ((y < 0) && (z > 0)) { java.lang.Integer n = com.google.common.primitives.Ints.tryParse(id.substring((z + 1))); if (n != null) { return fromProjectNumber(id.substring(0, z), n.intValue()); } } if ((y < 0) && (z < 0)) { java.lang.Integer n = com.google.common.primitives.Ints.tryParse(id); if (n != null) { return find(new com.google.gerrit.reviewdb.client.Change.Id(n)); } } com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().noFields(); if ((y > 0) && (z > 0)) { java.util.Optional<com.google.gerrit.server.change.ChangeTriplet> triplet = com.google.gerrit.server.change.ChangeTriplet.parse(id, y, z); if (triplet.isPresent()) { com.google.gerrit.server.change.ChangeTriplet t = triplet.get(); return asChangeNotes(query.byBranchKey(t.branch(), t.id())); } } return asChangeNotes(query.byKeyPrefix(id)); }",78d0f9aa3e26c69e9063c167d7a3b4bece0d2a24,2017-09-12 12:56:16,5
126430,gerrit-server_src_main_java_com_google_gerrit_server_ChangeFinder.java,"private java.util.List<com.google.gerrit.server.project.ChangeControl> fromProjectNumber(com.google.gerrit.server.CurrentUser user, java.lang.String project, int changeNumber) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change.Id cId = new com.google.gerrit.reviewdb.client.Change.Id(changeNumber); try { return com.google.common.collect.ImmutableList.of(changeControlFactory.controlFor(reviewDb.get(), Project.NameKey.parse(project), cId, user)); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return java.util.Collections.emptyList(); } catch (java.lang.IllegalArgumentException e) { java.lang.String changeNotFound = java.lang.String.format(""change %s not found in ReviewDb"", cId); java.lang.String projectNotFound = java.lang.String.format(""passed project %s when creating ChangeNotes for %s, but actual project is"", project, cId); if ((e.getMessage().equals(changeNotFound)) || (e.getMessage().startsWith(projectNotFound))) { return java.util.Collections.emptyList(); } throw e; } catch (com.google.gwtorm.server.OrmException e) { if ((com.google.common.base.Throwables.getRootCause(e)) instanceof org.eclipse.jgit.errors.RepositoryNotFoundException) { return java.util.Collections.emptyList(); } throw e; } }",55a00894585f58dc927ba303b3b9a08804af2e6d,"private java.util.List<com.google.gerrit.server.notedb.ChangeNotes> fromProjectNumber(java.lang.String project, int changeNumber) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change.Id cId = new com.google.gerrit.reviewdb.client.Change.Id(changeNumber); try { return com.google.common.collect.ImmutableList.of(changeNotesFactory.createChecked(reviewDb.get(), Project.NameKey.parse(project), cId)); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return java.util.Collections.emptyList(); } catch (java.lang.IllegalArgumentException e) { java.lang.String changeNotFound = java.lang.String.format(""change %s not found in ReviewDb"", cId); java.lang.String projectNotFound = java.lang.String.format(""passed project %s when creating ChangeNotes for %s, but actual project is"", project, cId); if ((e.getMessage().equals(changeNotFound)) || (e.getMessage().startsWith(projectNotFound))) { return java.util.Collections.emptyList(); } throw e; } catch (com.google.gwtorm.server.OrmException e) { if ((com.google.common.base.Throwables.getRootCause(e)) instanceof org.eclipse.jgit.errors.RepositoryNotFoundException) { return java.util.Collections.emptyList(); } throw e; } }",26f70653c93abf3267a1e9fc77b1a3f711004476,"private java.util.List<com.google.gerrit.server.notedb.ChangeNotes> fromProjectNumber(java.lang.String project, int changeNumber) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change.Id cId = new com.google.gerrit.reviewdb.client.Change.Id(changeNumber); try { return com.google.common.collect.ImmutableList.of(changeNotesFactory.createChecked(reviewDb.get(), Project.NameKey.parse(project), cId)); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return java.util.Collections.emptyList(); } catch (com.google.gwtorm.server.OrmException e) { if ((com.google.common.base.Throwables.getRootCause(e)) instanceof org.eclipse.jgit.errors.RepositoryNotFoundException) { return java.util.Collections.emptyList(); } throw e; } }",7cb2262b2dc97e81bdeae4b349d5262b665768c1,2017-09-12 12:56:16,5
126430,gerrit-server_src_main_java_com_google_gerrit_server_ChangeFinder.java,"public java.util.List<com.google.gerrit.server.project.ChangeControl> find(com.google.gerrit.reviewdb.client.Change.Id id, com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { java.lang.String project = changeIdProjectCache.getIfPresent(id); if (project != null) { return fromProjectNumber(user, project, id.get()); } com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().noFields(); java.util.List<com.google.gerrit.server.query.change.ChangeData> r = query.byLegacyChangeId(id); if ((r.size()) == 1) { changeIdProjectCache.put(id, r.get(0).project().get()); } return asChangeControls(r, user); }",4e3726f8bb237a78b58ad942a821800c69658fca,"public java.util.List<com.google.gerrit.server.notedb.ChangeNotes> find(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gwtorm.server.OrmException { java.lang.String project = changeIdProjectCache.getIfPresent(id); if (project != null) { return fromProjectNumber(project, id.get()); } com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().noFields(); java.util.List<com.google.gerrit.server.query.change.ChangeData> r = query.byLegacyChangeId(id); if ((r.size()) == 1) { changeIdProjectCache.put(id, r.get(0).project().get()); } return asChangeControls(r); }",4fdde4b5b1b07a51167d30a53ddd449b648917cd,"public java.util.List<com.google.gerrit.server.notedb.ChangeNotes> find(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gwtorm.server.OrmException { java.lang.String project = changeIdProjectCache.getIfPresent(id); if (project != null) { return fromProjectNumber(project, id.get()); } com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().noFields(); java.util.List<com.google.gerrit.server.query.change.ChangeData> r = query.byLegacyChangeId(id); if ((r.size()) == 1) { changeIdProjectCache.put(id, r.get(0).project().get()); } return asChangeNotes(r); }",b49cc03ecb6999fcbf64479c83d09974664e6d92,2017-09-12 12:56:16,5
126430,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangesCollection.java,"public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeFinder.find(id, user.get()); if (ctls.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } else if ((ctls.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.project.ChangeControl ctl = ctls.get(0); if (!(canRead(ctl))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } return changeResourceFactory.create(ctl); }",f83dab6c5f04c8f41193762273a14ca5c7cc3e1a,"public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } else if ((notes.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } return changeResourceFactory.create(changeControlFactory.controlFor(change, user.get())); }",55906a60d8c8d289a07801d13f25fd2c1dc01366,"public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } else if ((notes.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } return changeResourceFactory.create(controlFor(change)); }",4762e74923f2174692ffad9bad5303ee32596742,2017-09-12 12:56:16,5
126334,gerrit-server_src_main_java_com_google_gerrit_server_git_DefaultChangeReportFormatter.java,,,"private java.lang.String formatChangeUrl(java.lang.String url, com.google.gerrit.server.git.Input input) { com.google.gerrit.reviewdb.client.Change change = input.getChange(); java.lang.StringBuilder m = new java.lang.StringBuilder().append("" "").append(com.google.gerrit.server.ChangeUtil.formatChangeUrl(url, change)).append("" "").append(com.google.gerrit.server.ChangeUtil.cropSubject(input.getSubject())); if (input.isDraft()) { m.append("" [DRAFT]""); } if (input.isEdit()) { m.append("" [EDIT]""); } if (change.isPrivate()) { m.append("" [PRIVATE]""); } if (change.isWorkInProgress()) { m.append("" [WIP]""); } return m.toString(); }",1d1aea2f95adff64da76189123038c6ea06c5f43,"private java.lang.String formatChangeUrl(java.lang.String url, com.google.gerrit.server.git.Input input) { java.lang.StringBuilder m = new java.lang.StringBuilder().append("" "").append(com.google.gerrit.server.ChangeUtil.formatChangeUrl(url, input.getChange())).append("" "").append(com.google.gerrit.server.ChangeUtil.cropSubject(input.getSubject())); if (input.isDraft()) { m.append("" [DRAFT]""); } if (input.isEdit()) { m.append("" [EDIT]""); } if (input.isPrivate()) { m.append("" [PRIVATE]""); } if (input.isWorkInProgress()) { m.append("" [WIP]""); } return m.toString(); }",26067fe4c72cef87f1d8f669649c4370d8f32196,2017-09-12 17:10:29,5
126072,gerrit-server_src_main_java_com_google_gerrit_server_config_GerritServerConfigProvider.java,"@java.lang.Override public org.eclipse.jgit.lib.Config get() { org.eclipse.jgit.storage.file.FileBasedConfig cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(site.gerrit_config.toFile(), org.eclipse.jgit.util.FS.DETECTED); if (!(cfg.getFile().exists())) { com.google.gerrit.server.config.GerritServerConfigProvider.log.info(((""No "" + (site.gerrit_config.toAbsolutePath())) + ""; assuming defaults"")); return new com.google.gerrit.server.config.GerritConfig(cfg, secureStore); } try { cfg.load(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.inject.ProvisionException(e.getMessage(), e); } return new com.google.gerrit.server.config.GerritConfig(cfg, secureStore); }",03ac1f68956e1c946c1324d76b7de69096755afc,"@java.lang.Override public org.eclipse.jgit.lib.Config get() { org.eclipse.jgit.storage.file.FileBasedConfig baseConfig = new org.eclipse.jgit.storage.file.FileBasedConfig(site.gerrit_config.toFile(), org.eclipse.jgit.util.FS.DETECTED); org.eclipse.jgit.storage.file.FileBasedConfig noteDbConfigOverBaseConfig = new org.eclipse.jgit.storage.file.FileBasedConfig(baseConfig, site.notedb_config.toFile(), org.eclipse.jgit.util.FS.DETECTED); if (!(baseConfig.getFile().exists())) { com.google.gerrit.server.config.GerritServerConfigProvider.log.info(((""No "" + (site.gerrit_config.toAbsolutePath())) + ""; assuming defaults"")); } else { com.google.gerrit.server.config.GerritServerConfigProvider.load(baseConfig); } if (noteDbConfigOverBaseConfig.getFile().exists()) { com.google.gerrit.server.config.GerritServerConfigProvider.load(noteDbConfigOverBaseConfig); com.google.gerrit.server.config.GerritServerConfigProvider.checkNoteDbConfig(noteDbConfigOverBaseConfig); } return new com.google.gerrit.server.config.GerritConfig(noteDbConfigOverBaseConfig, baseConfig, secureStore); }",fd003529e497ce07401010f970c1b6019e07c1f4,"@java.lang.Override public org.eclipse.jgit.lib.Config get() { org.eclipse.jgit.storage.file.FileBasedConfig baseConfig = com.google.gerrit.server.config.GerritServerConfigProvider.loadConfig(null, site.gerrit_config); if (!(baseConfig.getFile().exists())) { com.google.gerrit.server.config.GerritServerConfigProvider.log.info(((""No "" + (site.gerrit_config.toAbsolutePath())) + ""; assuming defaults"")); } org.eclipse.jgit.storage.file.FileBasedConfig noteDbConfigOverBaseConfig = com.google.gerrit.server.config.GerritServerConfigProvider.loadConfig(baseConfig, site.notedb_config); com.google.gerrit.server.config.GerritServerConfigProvider.checkNoteDbConfig(noteDbConfigOverBaseConfig); return new com.google.gerrit.server.config.GerritConfig(noteDbConfigOverBaseConfig, baseConfig, secureStore); }",18cabb7b6ee253e71b562f68d03e1392cb96aabf,2017-09-12 17:30:31,6
126070,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_MergeableFileBasedConfigTest.java,,,"private com.google.gerrit.acceptance.MergeableFileBasedConfig newConfig() { return new com.google.gerrit.acceptance.MergeableFileBasedConfig(new java.io.File(com.google.gerrit.acceptance.MergeableFileBasedConfigTest.tempDir, ((com.google.gerrit.acceptance.MergeableFileBasedConfigTest.counter.incrementAndGet()) + "".config"")), org.eclipse.jgit.util.FS.detect()); }",5c4b54f0eb5386e82607e034fe46a3031acf5166,"private com.google.gerrit.acceptance.MergeableFileBasedConfig newConfig() throws java.lang.Exception { java.io.File f = java.io.File.createTempFile(getClass().getSimpleName(), "".config""); f.deleteOnExit(); return new com.google.gerrit.acceptance.MergeableFileBasedConfig(f, org.eclipse.jgit.util.FS.detect()); }",194848b7c933f5c09646ad224f89d4c25a853571,2017-09-12 17:30:31,5
126072,gerrit-server_src_main_java_com_google_gerrit_server_config_GerritServerConfigProvider.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void load(org.eclipse.jgit.storage.file.FileBasedConfig cfg) { try { cfg.load(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.inject.ProvisionException(e.getMessage(), e); } }",8f8d7b61ee401b583169e2bf7088506662ba56e9,"private static org.eclipse.jgit.storage.file.FileBasedConfig loadConfig(@com.google.gerrit.common.Nullable org.eclipse.jgit.lib.Config base, java.nio.file.Path path) { org.eclipse.jgit.storage.file.FileBasedConfig cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(base, path.toFile(), org.eclipse.jgit.util.FS.DETECTED); try { cfg.load(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.inject.ProvisionException(e.getMessage(), e); } return cfg; }",17719f5069f28d84443241f9c302673aecee639a,2017-09-12 17:30:31,6
126731,gerrit-server_src_main_java_com_google_gerrit_server_git_ChangeReportFormatter.java,public com.google.gerrit.server.git.ChangeReportFormatter.Input setSubject(java.lang.String subject) { this.subject = subject; return this; },33b9a70667f72b66b847592a006c9f27325ec36b,@com.google.gerrit.common.Nullable public abstract java.lang.Boolean wip();,38d3dc5b7bf3a921d0256d7d8d21fb00dc9d63bc,@com.google.gerrit.common.Nullable public abstract java.lang.Boolean isWorkInProgress();,6ffcf317709f164c1016302177004e1237805e13,2017-09-13 11:18:45,6
126731,gerrit-server_src_main_java_com_google_gerrit_server_git_ChangeReportFormatter.java,public com.google.gerrit.server.git.ChangeReportFormatter.Input setEdit(boolean edit) { this.edit = edit; return this; },d9fffb9608020f5c058a8f027662d7bb6c4362e0,@com.google.gerrit.common.Nullable public abstract java.lang.Boolean edit();,187dd66586bcbf946b361dab865bed0aef533242,@com.google.gerrit.common.Nullable public abstract java.lang.Boolean isEdit();,30d4d1b8d28f833f23a8931a6bb0a5374c3e6240,2017-09-13 11:18:45,6
126731,gerrit-server_src_main_java_com_google_gerrit_server_git_ChangeReportFormatter.java,public com.google.gerrit.server.git.ChangeReportFormatter.Input setDraft(boolean draft) { this.draft = draft; return this; },9e1cf76ca4d14158b51ecca89ad897d2ed6dd1d6,@com.google.gerrit.common.Nullable public abstract java.lang.Boolean draft();,b687984425239a931d81ad03cce559a5fd8a1dfd,@com.google.gerrit.common.Nullable public abstract java.lang.Boolean isDraft();,683429b9ca1e72ca895db4d69b1941985570d12f,2017-09-13 11:18:45,6
126731,gerrit-server_src_main_java_com_google_gerrit_server_git_ChangeReportFormatter.java,public com.google.gerrit.reviewdb.client.Change getChange() { return change; },0a2f91cf78211b1766d95fff200d78428906d151,public com.google.gerrit.reviewdb.client.Change getChange() { return change(); },e0302bbadeadf288b6a2218b497b6028bfed701b,abstract com.google.gerrit.reviewdb.client.Change change();,205c36aead3f39424303aa7ae9b1f7d51a9c5cb2,2017-09-13 11:18:45,6
126731,gerrit-server_src_main_java_com_google_gerrit_server_git_receive_ReceiveCommits.java,"private boolean requestReplace(org.eclipse.jgit.transport.ReceiveCommand cmd, boolean checkMergedInto, com.google.gerrit.reviewdb.client.Change change, org.eclipse.jgit.revwalk.RevCommit newCommit) { if (change.getStatus().isClosed()) { reject(cmd, changeFormatter.changeClosed(new com.google.gerrit.server.git.ChangeReportFormatter.Input(change))); return false; } com.google.gerrit.server.git.receive.ReceiveCommits.ReplaceRequest req = new com.google.gerrit.server.git.receive.ReceiveCommits.ReplaceRequest(change.getId(), newCommit, cmd, checkMergedInto); if (replaceByChange.containsKey(req.ontoChange)) { reject(cmd, ""duplicate request""); return false; } replaceByChange.put(req.ontoChange, req); return true; }",8f0fbcca5929efdd06527f5343a0d57b2c629b45,"private boolean requestReplace(org.eclipse.jgit.transport.ReceiveCommand cmd, boolean checkMergedInto, com.google.gerrit.reviewdb.client.Change change, org.eclipse.jgit.revwalk.RevCommit newCommit) { if (change.getStatus().isClosed()) { reject(cmd, changeFormatter.changeClosed(ChangeReportFormatter.Input.builder().change(change).build())); return false; } com.google.gerrit.server.git.receive.ReceiveCommits.ReplaceRequest req = new com.google.gerrit.server.git.receive.ReceiveCommits.ReplaceRequest(change.getId(), newCommit, cmd, checkMergedInto); if (replaceByChange.containsKey(req.ontoChange)) { reject(cmd, ""duplicate request""); return false; } replaceByChange.put(req.ontoChange, req); return true; }",87f3f89bcc046a7c651ea448ee0fc6445c5da9c5,"private boolean requestReplace(org.eclipse.jgit.transport.ReceiveCommand cmd, boolean checkMergedInto, com.google.gerrit.reviewdb.client.Change change, org.eclipse.jgit.revwalk.RevCommit newCommit) { if (change.getStatus().isClosed()) { reject(cmd, changeFormatter.changeClosed(ChangeReportFormatter.Input.builder().setChange(change).build())); return false; } com.google.gerrit.server.git.receive.ReceiveCommits.ReplaceRequest req = new com.google.gerrit.server.git.receive.ReceiveCommits.ReplaceRequest(change.getId(), newCommit, cmd, checkMergedInto); if (replaceByChange.containsKey(req.ontoChange)) { reject(cmd, ""duplicate request""); return false; } replaceByChange.put(req.ontoChange, req); return true; }",171070400e1f9483763ec299995e665191de482e,2017-09-13 11:18:45,6
126731,gerrit-server_src_main_java_com_google_gerrit_server_git_ChangeReportFormatter.java,public com.google.gerrit.server.git.ChangeReportFormatter.Input setWorkInProgress(boolean wip) { this.wip = wip; return this; },5624e2571f6b384aab934723fbe1881fa76c3094,@com.google.gerrit.common.Nullable public abstract java.lang.Boolean _private();,25a18860ef958876e7a4c0816943bf790f04d4c0,@com.google.gerrit.common.Nullable public abstract java.lang.Boolean isPrivate();,fcebd0796c9e872eb6a0e4f9dcfc4f954a942264,2017-09-13 11:18:45,6
126770,gerrit-server_src_main_java_com_google_gerrit_server_change_PostReview.java,"private java.util.Set<java.lang.String> getAffectedFilePaths(com.google.gerrit.server.change.RevisionResource revision) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData changeData = changeDataFactory.create(db.get(), revision.getControl()); return new java.util.HashSet(changeData.filePaths(revision.getPatchSet())); }",43dafcd4d956da510178b2496aaa3bb1e8fc1c39,"private java.util.Set<java.lang.String> getAffectedFilePaths(com.google.gerrit.server.change.RevisionResource revision) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData changeData = changeDataFactory.create(db.get(), revision.getNotes(), revision.getUser()); return new java.util.HashSet(changeData.filePaths(revision.getPatchSet())); }",c18cf503754426cbdd4c355c7586026d6c347299,"private java.util.Set<java.lang.String> getAffectedFilePaths(com.google.gerrit.server.change.RevisionResource revision) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData changeData = changeDataFactory.create(db.get(), revision.getChangeResource()); return new java.util.HashSet(changeData.filePaths(revision.getPatchSet())); }",8031168973d302d792ccebf0935c17e34515e07c,2017-09-13 14:05:46,2
126771,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeResource.java,public Change.Id getId() { return control.getId(); },8af98c0123da1ab27df23a592dd9e48d5f7df4e7,public Change.Id getId() { return getNotes().getChangeId(); },975c8baf9f1b8ae34c58a947fb2ee4dc457d2ffe,public Change.Id getId() { return notes.getChangeId(); },f176bf2d8e879bd2810da07aa546a7e49738d091,2017-09-13 14:05:46,2
126771,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeResource.java,public boolean isUserOwner() { com.google.gerrit.server.CurrentUser user = control.getUser(); com.google.gerrit.reviewdb.client.Account.Id owner = getChange().getOwner(); return (user.isIdentifiedUser()) && (user.asIdentifiedUser().getAccountId().equals(owner)); },887df118175a36a2721e9fa4268c3db40d0a10c7,public boolean isUserOwner() { com.google.gerrit.reviewdb.client.Account.Id owner = getChange().getOwner(); return (getUser().isIdentifiedUser()) && (getUser().asIdentifiedUser().getAccountId().equals(owner)); },3e0eaed49077c72776367d50087ec20ce687fdc9,public boolean isUserOwner() { com.google.gerrit.reviewdb.client.Account.Id owner = getChange().getOwner(); return (user.isIdentifiedUser()) && (user.asIdentifiedUser().getAccountId().equals(owner)); },146c2dc7b5ae5fa2525677d080a74dfb00a7ae56,2017-09-13 14:05:46,2
126771,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeResource.java,"@java.lang.Override public java.lang.String getETag() { com.google.gerrit.server.CurrentUser user = control.getUser(); com.google.common.hash.Hasher h = com.google.common.hash.Hashing.murmur3_128().newHasher(); if (user.isIdentifiedUser()) { h.putString(starredChangesUtil.getObjectId(user.getAccountId(), getId()).name(), java.nio.charset.StandardCharsets.UTF_8); } prepareETag(h, user); return h.hash().toString(); }",7220c169d5c064d7413706cdd2961f6494c9a5b1,"@java.lang.Override public java.lang.String getETag() { com.google.common.hash.Hasher h = com.google.common.hash.Hashing.murmur3_128().newHasher(); if (user.isIdentifiedUser()) { h.putString(starredChangesUtil.getObjectId(getUser().getAccountId(), getId()).name(), java.nio.charset.StandardCharsets.UTF_8); } prepareETag(h, getUser()); return h.hash().toString(); }",af29c5fbffc191e5ac18cf7ec633f7cf466a9e7b,"@java.lang.Override public java.lang.String getETag() { com.google.common.hash.Hasher h = com.google.common.hash.Hashing.murmur3_128().newHasher(); if (user.isIdentifiedUser()) { h.putString(starredChangesUtil.getObjectId(user.getAccountId(), getId()).name(), java.nio.charset.StandardCharsets.UTF_8); } prepareETag(h, user); return h.hash().toString(); }",299635071a282579ee05701843db9c434781b623,2017-09-13 14:05:46,2
126770,gerrit-server_src_main_java_com_google_gerrit_server_change_TestSubmitType.java,"@java.lang.Override public com.google.gerrit.extensions.client.SubmitType apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.common.TestSubmitRuleInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.extensions.common.TestSubmitRuleInput(); } if (((input.rule) != null) && (!(rules.isProjectRulesEnabled()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""project rules are disabled""); } input.filters = com.google.common.base.MoreObjects.firstNonNull(input.filters, filters); com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, emails, changeDataFactory.create(db.get(), rsrc.getControl())); com.google.gerrit.common.data.SubmitTypeRecord rec = evaluator.setPatchSet(rsrc.getPatchSet()).setLogErrors(false).setSkipSubmitFilters(((input.filters) == (com.google.gerrit.extensions.common.TestSubmitRuleInput.Filters.SKIP))).setRule(input.rule).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""rule %s produced invalid result: %s"", evaluator.getSubmitRuleName(), rec)); } return rec.type; }",7f8ccfe9b9f1b62037b0c8d718d0b0f9062484a6,"@java.lang.Override public com.google.gerrit.extensions.client.SubmitType apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.common.TestSubmitRuleInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.extensions.common.TestSubmitRuleInput(); } if (((input.rule) != null) && (!(rules.isProjectRulesEnabled()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""project rules are disabled""); } input.filters = com.google.common.base.MoreObjects.firstNonNull(input.filters, filters); com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, emails, changeDataFactory.create(db.get(), rsrc.getNotes(), rsrc.getUser())); com.google.gerrit.common.data.SubmitTypeRecord rec = evaluator.setPatchSet(rsrc.getPatchSet()).setLogErrors(false).setSkipSubmitFilters(((input.filters) == (com.google.gerrit.extensions.common.TestSubmitRuleInput.Filters.SKIP))).setRule(input.rule).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""rule %s produced invalid result: %s"", evaluator.getSubmitRuleName(), rec)); } return rec.type; }",b6d16bcd299775261b3b6593ac90078c1e0cf4c0,"@java.lang.Override public com.google.gerrit.extensions.client.SubmitType apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.common.TestSubmitRuleInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.extensions.common.TestSubmitRuleInput(); } if (((input.rule) != null) && (!(rules.isProjectRulesEnabled()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""project rules are disabled""); } input.filters = com.google.common.base.MoreObjects.firstNonNull(input.filters, filters); com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, emails, changeDataFactory.create(db.get(), rsrc.getChangeResource())); com.google.gerrit.common.data.SubmitTypeRecord rec = evaluator.setPatchSet(rsrc.getPatchSet()).setLogErrors(false).setSkipSubmitFilters(((input.filters) == (com.google.gerrit.extensions.common.TestSubmitRuleInput.Filters.SKIP))).setRule(input.rule).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""rule %s produced invalid result: %s"", evaluator.getSubmitRuleName(), rec)); } return rec.type; }",a93e33ad6042f8fbfcef122686089e06f4e9a9f0,2017-09-13 14:05:46,2
126770,gerrit-server_src_main_java_com_google_gerrit_server_change_PostReview.java,"private boolean isReviewer(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { if (ctx.getAccountId().equals(ctx.getChange().getOwner())) { return true; } com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), ctx.getControl()); com.google.gerrit.server.ReviewerSet reviewers = cd.reviewers(); if (reviewers.byState(com.google.gerrit.server.change.REVIEWER).contains(ctx.getAccountId())) { return true; } return false; }",581de6248a53f60af8f4de9cd9e54d90b063fe31,"private boolean isReviewer(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { if (ctx.getAccountId().equals(ctx.getChange().getOwner())) { return true; } com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), ctx.getNotes(), ctx.getUser()); com.google.gerrit.server.ReviewerSet reviewers = cd.reviewers(); if (reviewers.byState(com.google.gerrit.server.change.REVIEWER).contains(ctx.getAccountId())) { return true; } return false; }",9a24a3288d0424892da235fb950d05999b1956c0,"private boolean isReviewer(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { if (ctx.getAccountId().equals(ctx.getChange().getOwner())) { return true; } com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), ctx); com.google.gerrit.server.ReviewerSet reviewers = cd.reviewers(); if (reviewers.byState(com.google.gerrit.server.change.REVIEWER).contains(ctx.getAccountId())) { return true; } return false; }",c5bd86da4101bd8502bd2313d97b0893697a4d5f,2017-09-13 14:05:46,2
126770,gerrit-server_src_main_java_com_google_gerrit_server_change_TestSubmitRule.java,"@java.lang.Override public java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.common.TestSubmitRuleInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.extensions.common.TestSubmitRuleInput(); } if (((input.rule) != null) && (!(rules.isProjectRulesEnabled()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""project rules are disabled""); } input.filters = com.google.common.base.MoreObjects.firstNonNull(input.filters, filters); com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, emails, changeDataFactory.create(db.get(), rsrc.getControl())); java.util.List<com.google.gerrit.common.data.SubmitRecord> records = evaluator.setPatchSet(rsrc.getPatchSet()).setLogErrors(false).setSkipSubmitFilters(((input.filters) == (com.google.gerrit.extensions.common.TestSubmitRuleInput.Filters.SKIP))).setRule(input.rule).evaluate(); java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> out = com.google.common.collect.Lists.newArrayListWithCapacity(records.size()); com.google.gerrit.server.account.AccountLoader accounts = accountInfoFactory.create(true); for (com.google.gerrit.common.data.SubmitRecord r : records) { out.add(new com.google.gerrit.server.change.TestSubmitRule.Record(r, accounts)); } if (!(out.isEmpty())) { out.get(0).prologReductionCount = evaluator.getReductionsConsumed(); } accounts.fill(); return out; }",b00c4d56831a3adaa6361fdff4470f14e3c15f55,"@java.lang.Override public java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.common.TestSubmitRuleInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.extensions.common.TestSubmitRuleInput(); } if (((input.rule) != null) && (!(rules.isProjectRulesEnabled()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""project rules are disabled""); } input.filters = com.google.common.base.MoreObjects.firstNonNull(input.filters, filters); com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, emails, changeDataFactory.create(db.get(), rsrc.getNotes(), rsrc.getUser())); java.util.List<com.google.gerrit.common.data.SubmitRecord> records = evaluator.setPatchSet(rsrc.getPatchSet()).setLogErrors(false).setSkipSubmitFilters(((input.filters) == (com.google.gerrit.extensions.common.TestSubmitRuleInput.Filters.SKIP))).setRule(input.rule).evaluate(); java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> out = com.google.common.collect.Lists.newArrayListWithCapacity(records.size()); com.google.gerrit.server.account.AccountLoader accounts = accountInfoFactory.create(true); for (com.google.gerrit.common.data.SubmitRecord r : records) { out.add(new com.google.gerrit.server.change.TestSubmitRule.Record(r, accounts)); } if (!(out.isEmpty())) { out.get(0).prologReductionCount = evaluator.getReductionsConsumed(); } accounts.fill(); return out; }",1d9dc3c2324d6cabc24ee62c4ea8eade0963d271,"@java.lang.Override public java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.common.TestSubmitRuleInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.extensions.common.TestSubmitRuleInput(); } if (((input.rule) != null) && (!(rules.isProjectRulesEnabled()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""project rules are disabled""); } input.filters = com.google.common.base.MoreObjects.firstNonNull(input.filters, filters); com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, emails, changeDataFactory.create(db.get(), rsrc.getChangeResource())); java.util.List<com.google.gerrit.common.data.SubmitRecord> records = evaluator.setPatchSet(rsrc.getPatchSet()).setLogErrors(false).setSkipSubmitFilters(((input.filters) == (com.google.gerrit.extensions.common.TestSubmitRuleInput.Filters.SKIP))).setRule(input.rule).evaluate(); java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> out = com.google.common.collect.Lists.newArrayListWithCapacity(records.size()); com.google.gerrit.server.account.AccountLoader accounts = accountInfoFactory.create(true); for (com.google.gerrit.common.data.SubmitRecord r : records) { out.add(new com.google.gerrit.server.change.TestSubmitRule.Record(r, accounts)); } if (!(out.isEmpty())) { out.get(0).prologReductionCount = evaluator.getReductionsConsumed(); } accounts.fill(); return out; }",f30bda630dbf7ec466551e52e5f8ef7547f46886,2017-09-13 14:05:46,2
126770,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeJson.java,"public com.google.gerrit.extensions.common.RevisionInfo getRevisionInfo(com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.reviewdb.client.PatchSet in) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(ctl);org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { com.google.gerrit.extensions.common.RevisionInfo rev = toRevisionInfo(ctl, changeDataFactory.create(db.get(), ctl), in, repo, rw, true, null); accountLoader.fill(); return rev; } }",9efa9970f2fa61cfa821d3cbb24a7d26e4418bda,"public com.google.gerrit.extensions.common.RevisionInfo getRevisionInfo(com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.reviewdb.client.PatchSet in) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(ctl);org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { com.google.gerrit.extensions.common.RevisionInfo rev = toRevisionInfo(ctl, changeDataFactory.create(db.get(), ctl.getNotes(), ctl.getUser()), in, repo, rw, true, null); accountLoader.fill(); return rev; } }",78f246c5f00a055958b44c7245f989204441dfcd,"public com.google.gerrit.extensions.common.RevisionInfo getRevisionInfo(com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.reviewdb.client.PatchSet in) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(ctl);org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { com.google.gerrit.extensions.common.RevisionInfo rev = toRevisionInfo(ctl, changeDataFactory.create(db.get(), ctl), in, repo, rw, true, null); accountLoader.fill(); return rev; } }",9efa9970f2fa61cfa821d3cbb24a7d26e4418bda,2017-09-13 14:05:46,2
126770,gerrit-server_src_main_java_com_google_gerrit_server_change_DownloadContent.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); com.google.gerrit.server.project.ProjectState projectState = rsrc.getRevision().getControl().getProjectControl().getProjectState(); org.eclipse.jgit.lib.ObjectId revstr = org.eclipse.jgit.lib.ObjectId.fromString(rsrc.getRevision().getPatchSet().getRevision().get()); return fileContentUtil.downloadContent(projectState, revstr, path, parent); }",5b38cb84c4b58b8307f9715aa0d828ac177f3370,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getRevision().getProject(); org.eclipse.jgit.lib.ObjectId revstr = org.eclipse.jgit.lib.ObjectId.fromString(rsrc.getRevision().getPatchSet().getRevision().get()); return fileContentUtil.downloadContent(projectCache.checkedGet(project), revstr, path, parent); }",36d1a72a3587177fcd27a037c1a4d4384630bfc7,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); com.google.gerrit.server.change.RevisionResource rev = rsrc.getRevision(); org.eclipse.jgit.lib.ObjectId revstr = org.eclipse.jgit.lib.ObjectId.fromString(rev.getPatchSet().getRevision().get()); return fileContentUtil.downloadContent(projectCache.checkedGet(rev.getProject()), revstr, path, parent); }",5f3ab52591557914b934468d85853e49d8706781,2017-09-13 14:05:46,2
126770,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeJson.java,"public com.google.gerrit.extensions.common.ChangeInfo format(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), rsrc.getControl()); return format(cd, java.util.Optional.of(rsrc.getPatchSet().getId()), true); }",7d63f9559175d64db8db75291d8c420c3de4d7c7,"public com.google.gerrit.extensions.common.ChangeInfo format(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), rsrc.getNotes(), rsrc.getUser()); return format(cd, java.util.Optional.of(rsrc.getPatchSet().getId()), true); }",b061d9361ef49d3fdd52bde1b0802ba2bd893964,"public com.google.gerrit.extensions.common.ChangeInfo format(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), rsrc.getChangeResource()); return format(cd, java.util.Optional.of(rsrc.getPatchSet().getId()), true); }",407829333c4ad0784da917c23481938598107c4b,2017-09-13 14:05:46,2
126771,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeResource.java,public PermissionBackend.ForChange permissions() { return permissionBackend.user(control.getUser()).change(getNotes()); },36b056afc2bab8623172e87e4994bd1d937bfc50,public PermissionBackend.ForChange permissions() { return permissionBackend.user(getUser()).change(getNotes()); },02bd1ad29ce585fc5d61ec72d9a4adfef847cee2,public PermissionBackend.ForChange permissions() { return permissionBackend.user(user).change(notes); },c8c81c0d9575d811fcdb6819c7dfb19d352250c0,2017-09-13 14:05:46,2
126771,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeResource.java,public com.google.gerrit.reviewdb.client.Change getChange() { return control.getChange(); },3f0e443f4c9081a357c35d3f12f1ce2b418e3ff4,public com.google.gerrit.reviewdb.client.Change getChange() { return getNotes().getChange(); },abc37aed9ace3b7902579481070b65789b4eb696,public com.google.gerrit.reviewdb.client.Change getChange() { return notes.getChange(); },977b54144e42c4cfbc2f0091ca87fd17c7b4187a,2017-09-13 14:05:46,2
126990,gerrit-server_src_main_java_com_google_gerrit_server_change_GetPureRevert.java,"@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet currentPatchSet = psUtil.current(dbProvider.get(), rsrc.getNotes()); if (currentPatchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""current revision is missing""); } else if (!(rsrc.getControl().isPatchVisible(currentPatchSet, dbProvider.get()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""current revision not accessible""); } if ((claimedOriginal) == null) { if ((rsrc.getChange().getRevertOf()) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""no ID was provided and change isn't a revert""); } com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.current(dbProvider.get(), notesFactory.createChecked(dbProvider.get(), rsrc.getProject(), rsrc.getChange().getRevertOf())); claimedOriginal = ps.getRevision().get(); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(rsrc.getProject());org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit claimedOriginalCommit; try { claimedOriginalCommit = rw.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(claimedOriginal)); } catch (org.eclipse.jgit.errors.InvalidObjectIdException | org.eclipse.jgit.errors.MissingObjectException e) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""invalid object ID""); } if ((claimedOriginalCommit.getParentCount()) == 0) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""can't check against initial commit""); } org.eclipse.jgit.revwalk.RevCommit claimedRevertCommit = rw.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(currentPatchSet.getRevision().get())); if ((claimedRevertCommit.getParentCount()) == 0) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""claimed revert has no parents""); } org.eclipse.jgit.merge.ThreeWayMerger merger = mergeUtilFactory.create(projectCache.checkedGet(rsrc.getProject())).newThreeWayMerger(oi, repo.getConfig()); merger.setBase(claimedRevertCommit.getParent(0)); merger.merge(claimedRevertCommit, claimedOriginalCommit); if ((merger.getResultTreeId()) == null) { return new com.google.gerrit.extensions.common.PureRevertInfo(false); } try (org.eclipse.jgit.diff.DiffFormatter df = new org.eclipse.jgit.diff.DiffFormatter(new java.io.ByteArrayOutputStream())) { df.setRepository(repo); java.util.List<org.eclipse.jgit.diff.DiffEntry> entries = df.scan(claimedOriginalCommit.getParent(0), merger.getResultTreeId()); return new com.google.gerrit.extensions.common.PureRevertInfo(entries.isEmpty()); } } }",8fe765fafc15e6c1ae0456d430c205358569f5a4,"@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException, java.io.IOException { return getPureRevert(rsrc.getNotes(), rsrc.getUser()); }",9f5a79de94e1e93e362ce78da1a8df0ff7189ab3,"@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet currentPatchSet = psUtil.current(dbProvider.get(), rsrc.getNotes()); if (currentPatchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""current revision is missing""); } else if (!(changeControlFactory.controlFor(rsrc.getNotes(), rsrc.getUser()).isPatchVisible(currentPatchSet, dbProvider.get()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""current revision not accessible""); } return getPureRevert(rsrc.getNotes()); }",f5c3239ac45413a2cb36a581d2918a0cfde70b32,2017-09-13 18:30:47,4
126990,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void pushPureRevertSubmitRule() throws java.lang.Exception { java.lang.String oldHead = getRemoteHead().name(); com.google.gerrit.acceptance.GitUtil.fetch(testRepo, ((com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG) + "":config"")); testRepo.reset(""config""); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, ""Configure"", ""rules.pl"", (""submit_rule(submit(R)) :- \n"" + (((((((""gerrit:pure_revert(1), \n"" + ""!,"") + ""gerrit:commit_author(A), \n"") + ""R = label(\'Is-Pure-Revert\', ok(A)).\n"") + ""submit_rule(submit(R)) :- \n"") + ""gerrit:pure_revert(U), \n"") + ""U \\= 1,"") + ""R = label(\'Is-Pure-Revert\', need(_)). \n\n""))); push.to(RefNames.REFS_CONFIG); testRepo.reset(oldHead); }",a425d9ecb6576b98cca2c869cae0a6f1a30b34b9,"private void addPureRevertSubmitRule() throws java.lang.Exception { modifySubmitRules((""submit_rule(submit(R)) :- \n"" + (((((((""gerrit:pure_revert(1), \n"" + ""!,"") + ""gerrit:commit_author(A), \n"") + ""R = label(\'Is-Pure-Revert\', ok(A)).\n"") + ""submit_rule(submit(R)) :- \n"") + ""gerrit:pure_revert(U), \n"") + ""U \\= 1,"") + ""R = label(\'Is-Pure-Revert\', need(_)). \n\n""))); }",ed60d7462cf20fcce288347e5db2aecbc980784f,2017-09-13 18:30:47,4
126990,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.google.gerrit.common.Nullable public java.lang.Boolean isPureRevert() throws com.google.gwtorm.server.OrmException { if ((change().getRevertOf()) == null) { return null; } try { return pureRevert.getPureRevert(notes(), userFactory.create(change().getOwner())).isPureRevert; } catch (java.io.IOException | com.google.gerrit.extensions.restapi.BadRequestException | com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new com.google.gwtorm.server.OrmException(""could not compute pure revert"", e); } }",8c7b80ed0bb06d871d158f5eae59325c0dc47344,"@com.google.gerrit.common.Nullable public java.lang.Boolean isPureRevert() throws com.google.gwtorm.server.OrmException { if ((change().getRevertOf()) == null) { return null; } try { return pureRevert.getPureRevert(notes()).isPureRevert; } catch (java.io.IOException | com.google.gerrit.extensions.restapi.BadRequestException | com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new com.google.gwtorm.server.OrmException(""could not compute pure revert"", e); } }",38432ceb32e622c5cc48bebc5b4713a310e61b38,2017-09-13 18:30:47,4
126990,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.google.gerrit.acceptance.Sandboxed @org.junit.Test public void pureRevertFactAllowsSubmissionOfPureReverts() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r1 = pushFactory.create(db, user.getIdent(), testRepo).to(""refs/for/master""); merge(r1); pushPureRevertSubmitRule(); java.lang.String revertId = gApi.changes().id(r1.getChangeId()).revert().get().changeId; approve(revertId); gApi.changes().id(revertId).current().submit(); }",38efadf6e064baafc0780059546289227976b8da,"@org.junit.Test public void pureRevertFactAllowsSubmissionOfPureReverts() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r1 = pushFactory.create(db, user.getIdent(), testRepo).to(""refs/for/master""); merge(r1); addPureRevertSubmitRule(); java.lang.String revertId = gApi.changes().id(r1.getChangeId()).revert().get().changeId; approve(revertId); gApi.changes().id(revertId).current().submit(); }",598986afa557d0901c89c5327c2d1207b5f66787,2017-09-13 18:30:47,4
126990,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.google.gerrit.acceptance.Sandboxed @org.junit.Test public void pureRevertFactBlocksSubmissionOfNonPureReverts() throws java.lang.Exception { pushPureRevertSubmitRule(); com.google.gerrit.acceptance.PushOneCommit.Result r1 = pushFactory.create(db, user.getIdent(), testRepo).to(""refs/for/master""); approve(r1.getChangeId()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage((""Failed to submit 1 change due to the following problems:\n"" + ""Change 1: needs Is-Pure-Revert"")); gApi.changes().id(r1.getChangeId()).current().submit(); }",e7751c1ceb1bdc75eb9ffba2a606e92745891fb9,"@org.junit.Test public void pureRevertFactBlocksSubmissionOfNonPureReverts() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r1 = pushFactory.create(db, user.getIdent(), testRepo).to(""refs/for/master""); merge(r1); addPureRevertSubmitRule(); java.lang.String revertId = gApi.changes().id(r1.getChangeId()).revert().get().changeId; amendChange(revertId); approve(revertId); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""Failed to submit 1 change due to the following problems""); exception.expectMessage(""needs Is-Pure-Revert""); gApi.changes().id(revertId).current().submit(); }",1bf72ea6f99acd5122d8a7a81ac7586dd942d769,2017-09-13 18:30:47,4
121630,gerrit-server_src_main_java_com_google_gerrit_server_group_ListMembers.java,"private java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.extensions.common.AccountInfo> getMembers(final com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seenGroups) throws com.google.gwtorm.server.OrmException { seenGroups.add(groupUUID); final java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.extensions.common.AccountInfo> members = new java.util.HashMap<>(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupUUID); if (group == null) { return java.util.Collections.emptyMap(); } final com.google.gerrit.common.data.GroupDetail groupDetail; try { groupDetail = groupDetailFactory.create(group.getGroupUUID()).call(); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { return java.util.Collections.emptyMap(); } for (com.google.gerrit.reviewdb.client.Account.Id member : groupDetail.getMembers()) { if (!(members.containsKey(member))) { members.put(member, accountLoader.get(member)); } } if (recursive) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid : groupDetail.getIncludes()) { if (!(seenGroups.contains(includedGroupUuid))) { members.putAll(getMembers(includedGroupUuid, seenGroups)); } } } accountLoader.fill(); return members; }",a27f99fa5587743042c0dac132f601e13851873d,"private java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.extensions.common.AccountInfo> getMembers(final com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seenGroups) throws com.google.gwtorm.server.OrmException { seenGroups.add(groupUUID); final java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.extensions.common.AccountInfo> members = new java.util.HashMap<>(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupUUID); if (group == null) { return java.util.Collections.emptyMap(); } final com.google.gerrit.common.data.GroupDetail groupDetail; try { groupDetail = groupDetailFactory.create(group.getGroupUUID()).call(); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { return java.util.Collections.emptyMap(); } for (com.google.gerrit.reviewdb.client.Account.Id member : groupDetail.getMembers()) { if (!(members.containsKey(member))) { members.put(member, accountLoader.get(member)); } } if (recursive) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : groupDetail.getSubgroups()) { if (!(seenGroups.contains(subgroupUuid))) { members.putAll(getMembers(subgroupUuid, seenGroups)); } } } accountLoader.fill(); return members; }",e44dfd7c81c22861fe6efebbb6a4c3467092cfad,"private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> getMembers(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seenGroups) { seenGroups.add(groupUUID); java.util.Optional<com.google.gerrit.server.group.InternalGroup> internalGroup = groupCache.get(groupUUID); if (!(internalGroup.isPresent())) { return com.google.common.collect.ImmutableSet.of(); } com.google.gerrit.server.group.InternalGroup group = internalGroup.get(); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group)); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).collect(toImmutableSet()); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> indirectMembers = new java.util.HashSet<>(); if ((recursive) && (groupControl.canSeeGroup())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seenGroups.contains(subgroupUuid))) { indirectMembers.addAll(getMembers(subgroupUuid, seenGroups)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); }",9722a2b84ee94563c1f5e386ce27ff86c7ae9b70,2017-09-14 08:48:43,7
121630,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_CreateGroupCommand.java,"private void addIncludedGroups(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.AddIncludedGroups.Input input = AddIncludedGroups.Input.fromGroups(initialGroups.stream().map(com.google.gerrit.reviewdb.client.AccountGroup.UUID::get).collect(java.util.stream.Collectors.toList())); addIncludedGroups.apply(rsrc, input); }",f1824be10af9a0faaf7885f2e78397f5e3826f15,"private void addSubgroups(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.AddSubgroups.Input input = AddSubgroups.Input.fromGroups(initialGroups.stream().map(com.google.gerrit.reviewdb.client.AccountGroup.UUID::get).collect(java.util.stream.Collectors.toList())); addSubgroups.apply(rsrc, input); }",4414210ae635794f5f5f29df6a44da48b97f2571,"private void addSubgroups(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddSubgroups.Input input = AddSubgroups.Input.fromGroups(initialGroups.stream().map(com.google.gerrit.reviewdb.client.AccountGroup.UUID::get).collect(java.util.stream.Collectors.toList())); addSubgroups.apply(rsrc, input); }",7d12b857fa6204731b8d3fde1de59ccc9cd67d13,2017-09-14 08:48:43,7
121630,gerrit-server_src_main_java_com_google_gerrit_server_account_GroupMembers.java,"private java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(final com.google.gerrit.reviewdb.client.AccountGroup group, com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.server.OrmException, java.io.IOException { seen.add(group.getGroupUUID()); final com.google.gerrit.common.data.GroupDetail groupDetail = groupDetailFactory.create(group.getGroupUUID()).call(); final java.util.Set<com.google.gerrit.reviewdb.client.Account> members = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Account.Id memberId : groupDetail.getMembers()) { members.add(accountCache.get(memberId).getAccount()); } for (com.google.gerrit.reviewdb.client.AccountGroup.UUID groupIncludeUuid : groupDetail.getIncludes()) { com.google.gerrit.reviewdb.client.AccountGroup includedGroup = groupCache.get(groupIncludeUuid); if ((includedGroup != null) && (!(seen.contains(includedGroup.getGroupUUID())))) { members.addAll(listAccounts(includedGroup.getGroupUUID(), project, seen)); } } return members; }",ae72a0ba9bee21176a431a58aa745ac42542cd2a,"private java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(final com.google.gerrit.reviewdb.client.AccountGroup group, com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.server.OrmException, java.io.IOException { seen.add(group.getGroupUUID()); final com.google.gerrit.common.data.GroupDetail groupDetail = groupDetailFactory.create(group.getGroupUUID()).call(); final java.util.Set<com.google.gerrit.reviewdb.client.Account> members = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Account.Id memberId : groupDetail.getMembers()) { members.add(accountCache.get(memberId).getAccount()); } for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : groupDetail.getSubgroups()) { com.google.gerrit.reviewdb.client.AccountGroup subgroup = groupCache.get(subgroupUuid); if ((subgroup != null) && (!(seen.contains(subgroup.getGroupUUID())))) { members.addAll(listAccounts(subgroup.getGroupUUID(), project, seen)); } } return members; }",fc97a92a3a6a62a37b30879afef7ec84864b7ea3,"private java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.server.OrmException, java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group)); java.util.Set<com.google.gerrit.reviewdb.client.Account> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).map(accountCache::get).map(AccountState::getAccount).collect(toImmutableSet()); java.util.Set<com.google.gerrit.reviewdb.client.Account> indirectMembers = new java.util.HashSet<>(); if (groupControl.canSeeGroup()) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seen.contains(subgroupUuid))) { indirectMembers.addAll(listAccounts(subgroupUuid, project, seen)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); }",d91085fb127def0c270e6f61295767bd12ebfa86,2017-09-14 08:48:43,7
121630,gerrit-server_src_main_java_com_google_gerrit_server_group_GroupsUpdate.java,"public void deleteIncludedGroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID parentGroupUuid, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> includedGroupUuids) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup parentGroup = groups.getExistingGroup(db, parentGroupUuid); com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId = parentGroup.getId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> includedGroupsToRemove = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid : includedGroupUuids) { boolean isIncluded = groups.isIncluded(db, parentGroupUuid, includedGroupUuid); if (isIncluded) { com.google.gerrit.reviewdb.client.AccountGroupById.Key key = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, includedGroupUuid); includedGroupsToRemove.add(new com.google.gerrit.reviewdb.client.AccountGroupById(key)); } } if (includedGroupsToRemove.isEmpty()) { return; } if ((currentUser) != null) { auditService.dispatchDeleteGroupsFromGroup(currentUser.getAccountId(), includedGroupsToRemove); } db.accountGroupById().delete(includedGroupsToRemove); for (com.google.gerrit.reviewdb.client.AccountGroupById groupToRemove : includedGroupsToRemove) { groupIncludeCache.evictParentGroupsOf(groupToRemove.getIncludeUUID()); } groupIncludeCache.evictSubgroupsOf(parentGroupUuid); }",6f1dfd840cf9f364db0b9a07f008b1bff6913720,"public void removeSubgroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID parentGroupUuid, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup parentGroup = groups.getExistingGroup(db, parentGroupUuid); com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId = parentGroup.getId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> subgroupsToRemove = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : subgroupUuids) { boolean isSubgroup = groups.isSubgroup(db, parentGroupUuid, subgroupUuid); if (isSubgroup) { com.google.gerrit.reviewdb.client.AccountGroupById.Key key = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, subgroupUuid); subgroupsToRemove.add(new com.google.gerrit.reviewdb.client.AccountGroupById(key)); } } if (subgroupsToRemove.isEmpty()) { return; } if ((currentUser) != null) { auditService.dispatchDeleteGroupsFromGroup(currentUser.getAccountId(), subgroupsToRemove); } db.accountGroupById().delete(subgroupsToRemove); for (com.google.gerrit.reviewdb.client.AccountGroupById groupToRemove : subgroupsToRemove) { groupIncludeCache.evictParentGroupsOf(groupToRemove.getIncludeUUID()); } groupIncludeCache.evictSubgroupsOf(parentGroupUuid); }",9e3ab2f7b4b59a0e20ec302197d09a87c14b6d78,"public void removeSubgroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID parentGroupUuid, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.AccountGroup parentGroup = groups.getExistingGroup(db, parentGroupUuid); com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId = parentGroup.getId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> subgroupsToRemove = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : subgroupUuids) { boolean isSubgroup = groups.isSubgroup(db, parentGroupUuid, subgroupUuid); if (isSubgroup) { com.google.gerrit.reviewdb.client.AccountGroupById.Key key = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, subgroupUuid); subgroupsToRemove.add(new com.google.gerrit.reviewdb.client.AccountGroupById(key)); } } if (subgroupsToRemove.isEmpty()) { return; } if ((currentUser) != null) { auditService.dispatchDeleteGroupsFromGroup(currentUser.getAccountId(), subgroupsToRemove); } db.accountGroupById().delete(subgroupsToRemove); groupCache.evict(parentGroup.getGroupUUID(), parentGroup.getId(), parentGroup.getNameKey()); for (com.google.gerrit.reviewdb.client.AccountGroupById groupToRemove : subgroupsToRemove) { groupIncludeCache.evictParentGroupsOf(groupToRemove.getIncludeUUID()); } groupIncludeCache.evictSubgroupsOf(parentGroupUuid); }",69a24e28f27dfac5351f745d2df1da2ee962bfc4,2017-09-14 08:48:43,7
121630,gerrit-server_src_main_java_com_google_gerrit_server_group_GroupsUpdate.java,"public void addIncludedGroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID parentGroupUuid, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> includedGroupUuids) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup parentGroup = groups.getExistingGroup(db, parentGroupUuid); com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId = parentGroup.getId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> newIncludedGroups = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid : includedGroupUuids) { boolean isIncluded = groups.isIncluded(db, parentGroupUuid, includedGroupUuid); if (!isIncluded) { com.google.gerrit.reviewdb.client.AccountGroupById.Key key = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, includedGroupUuid); newIncludedGroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(key)); } } if (newIncludedGroups.isEmpty()) { return; } if ((currentUser) != null) { auditService.dispatchAddGroupsToGroup(currentUser.getAccountId(), newIncludedGroups); } db.accountGroupById().insert(newIncludedGroups); for (com.google.gerrit.reviewdb.client.AccountGroupById newIncludedGroup : newIncludedGroups) { groupIncludeCache.evictParentGroupsOf(newIncludedGroup.getIncludeUUID()); } groupIncludeCache.evictSubgroupsOf(parentGroupUuid); }",1c1ee7c12242bed71a10dcb1b4526b686cfc578c,"public void addSubgroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID parentGroupUuid, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup parentGroup = groups.getExistingGroup(db, parentGroupUuid); com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId = parentGroup.getId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> newSubgroups = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid : subgroupUuids) { boolean isSubgroup = groups.isSubgroup(db, parentGroupUuid, includedGroupUuid); if (!isSubgroup) { com.google.gerrit.reviewdb.client.AccountGroupById.Key key = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, includedGroupUuid); newSubgroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(key)); } } if (newSubgroups.isEmpty()) { return; } if ((currentUser) != null) { auditService.dispatchAddGroupsToGroup(currentUser.getAccountId(), newSubgroups); } db.accountGroupById().insert(newSubgroups); for (com.google.gerrit.reviewdb.client.AccountGroupById newIncludedGroup : newSubgroups) { groupIncludeCache.evictParentGroupsOf(newIncludedGroup.getIncludeUUID()); } groupIncludeCache.evictSubgroupsOf(parentGroupUuid); }",2a4fadbe8a2adc00454444760d889875dc213ed9,"public void addSubgroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID parentGroupUuid, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.AccountGroup parentGroup = groups.getExistingGroup(db, parentGroupUuid); com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId = parentGroup.getId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> newSubgroups = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid : subgroupUuids) { boolean isSubgroup = groups.isSubgroup(db, parentGroupUuid, includedGroupUuid); if (!isSubgroup) { com.google.gerrit.reviewdb.client.AccountGroupById.Key key = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, includedGroupUuid); newSubgroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(key)); } } if (newSubgroups.isEmpty()) { return; } if ((currentUser) != null) { auditService.dispatchAddGroupsToGroup(currentUser.getAccountId(), newSubgroups); } db.accountGroupById().insert(newSubgroups); groupCache.evict(parentGroup.getGroupUUID(), parentGroup.getId(), parentGroup.getNameKey()); for (com.google.gerrit.reviewdb.client.AccountGroupById newIncludedGroup : newSubgroups) { groupIncludeCache.evictParentGroupsOf(newIncludedGroup.getIncludeUUID()); } groupIncludeCache.evictSubgroupsOf(parentGroupUuid); }",02cb280ad915f4de4730c4532e2e2bd26c94c5e3,2017-09-14 08:48:43,7
127150,src_main_java_com_googlesource_gerrit_plugins_oauth_DexApi.java,,,@java.lang.Override public com.googlesource.gerrit.plugins.oauth.Verb getAccessTokenVerb() { return Verb.POST; },28876671060765e085983c6d9ba3239495f13d82,@java.lang.Override public org.scribe.model.Verb getAccessTokenVerb() { return org.scribe.model.Verb.POST; },696890522a5ce5f46f58a52f8ed82caa0d0e7fe5,2017-09-14 18:20:42,7
127150,src_main_java_com_googlesource_gerrit_plugins_oauth_DexApi.java,,,"@java.lang.Override public com.googlesource.gerrit.plugins.oauth.Token getAccessToken(com.googlesource.gerrit.plugins.oauth.Token requestToken, com.googlesource.gerrit.plugins.oauth.Verifier verifier) { com.googlesource.gerrit.plugins.oauth.OAuthRequest request = new com.googlesource.gerrit.plugins.oauth.OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint()); request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey()); request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret()); request.addBodyParameter(OAuthConstants.CODE, verifier.getValue()); request.addBodyParameter(OAuthConstants.REDIRECT_URI, config.getCallback()); if (config.hasScope()) { request.addBodyParameter(OAuthConstants.SCOPE, config.getScope()); } request.addBodyParameter(com.googlesource.gerrit.plugins.oauth.DexApi.DexOAuthService.GRANT_TYPE, com.googlesource.gerrit.plugins.oauth.DexApi.DexOAuthService.GRANT_TYPE_VALUE); com.googlesource.gerrit.plugins.oauth.Response response = request.send(); return api.getAccessTokenExtractor().extract(response.getBody()); }",f3503506654229b7a2a2294a19863c3bd111e9ef,"@java.lang.Override public org.scribe.model.Token getAccessToken(org.scribe.model.Token requestToken, org.scribe.model.Verifier verifier) { org.scribe.model.OAuthRequest request = new org.scribe.model.OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint()); request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey()); request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret()); request.addBodyParameter(OAuthConstants.CODE, verifier.getValue()); request.addBodyParameter(OAuthConstants.REDIRECT_URI, config.getCallback()); if (config.hasScope()) { request.addBodyParameter(OAuthConstants.SCOPE, config.getScope()); } request.addBodyParameter(com.googlesource.gerrit.plugins.oauth.DexApi.DexOAuthService.GRANT_TYPE, com.googlesource.gerrit.plugins.oauth.DexApi.DexOAuthService.GRANT_TYPE_VALUE); org.scribe.model.Response response = request.send(); return api.getAccessTokenExtractor().extract(response.getBody()); }",ebe571b709b07160d2dbf391d46e4bf207f01d8a,2017-09-14 18:20:42,7
127150,src_main_java_com_googlesource_gerrit_plugins_oauth_DexApi.java,,,@java.lang.Override public java.lang.String getAuthorizationUrl(com.googlesource.gerrit.plugins.oauth.Token requestToken) { return api.getAuthorizationUrl(config); },2522c5b3436a22c38b5f377403add6d928beed65,@java.lang.Override public java.lang.String getAuthorizationUrl(org.scribe.model.Token requestToken) { return api.getAuthorizationUrl(config); },5418fbb0959470bd003844c5736162d9150461b7,2017-09-14 18:20:42,7
127150,src_main_java_com_googlesource_gerrit_plugins_oauth_DexApi.java,,,"@java.lang.Override public void signRequest(com.googlesource.gerrit.plugins.oauth.Token accessToken, com.googlesource.gerrit.plugins.oauth.OAuthRequest request) { request.addQuerystringParameter(OAuthConstants.ACCESS_TOKEN, accessToken.getToken()); }",3018fa3faff0995fff8ba30206f868cb8a84189e,"@java.lang.Override public void signRequest(org.scribe.model.Token accessToken, org.scribe.model.OAuthRequest request) { request.addQuerystringParameter(OAuthConstants.ACCESS_TOKEN, accessToken.getToken()); }",f6141cb5de14eced733ff3cf0469d506811b22e1,2017-09-14 18:20:42,7
127150,src_main_java_com_googlesource_gerrit_plugins_oauth_DexApi.java,,,"@java.lang.Override public com.googlesource.gerrit.plugins.oauth.Token getRequestToken() { throw new java.lang.UnsupportedOperationException(""Unsupported operation, please use 'getAuthorizationUrl' and redirect your users there""); }",8e95a3d1b094d2e8f5fa540868029d489b4b315e,"@java.lang.Override public org.scribe.model.Token getRequestToken() { throw new java.lang.UnsupportedOperationException(""Unsupported operation, please use 'getAuthorizationUrl' and redirect your users there""); }",d7f38430b9c250229809d8d3700da54f430c7254,2017-09-14 18:20:42,7
127150,src_main_java_com_googlesource_gerrit_plugins_oauth_DexApi.java,,,"@java.lang.Override public org.scribe.oauth.OAuthService createService(com.googlesource.gerrit.plugins.oauth.OAuthConfig config) { return new com.googlesource.gerrit.plugins.oauth.DexApi.DexOAuthService(this, config); }",585ae95b5c35bcffcda23f2a72ce00c48f207251,"@java.lang.Override public org.scribe.oauth.OAuthService createService(org.scribe.model.OAuthConfig config) { return new com.googlesource.gerrit.plugins.oauth.DexApi.DexOAuthService(this, config); }",285d815fb18d0c0a46a006b6eb65af0d6b134430,2017-09-14 18:20:42,7
127150,src_main_java_com_googlesource_gerrit_plugins_oauth_DexApi.java,,,"@java.lang.Override public java.lang.String getAuthorizationUrl(com.googlesource.gerrit.plugins.oauth.OAuthConfig config) { return java.lang.String.format(com.googlesource.gerrit.plugins.oauth.DexApi.AUTHORIZE_URL, rootUrl, config.getApiKey(), org.scribe.utils.OAuthEncoder.encode(config.getCallback()), config.getScope().replaceAll("" "", ""+"")); }",2b1751a4512d9f446a296c03003c760a64b731a4,"@java.lang.Override public java.lang.String getAuthorizationUrl(org.scribe.model.OAuthConfig config) { return java.lang.String.format(com.googlesource.gerrit.plugins.oauth.DexApi.AUTHORIZE_URL, rootUrl, config.getApiKey(), org.scribe.utils.OAuthEncoder.encode(config.getCallback()), config.getScope().replaceAll("" "", ""+"")); }",b5c7ba5467225df5b99075ec8e28014a5a693f74,2017-09-14 18:20:42,7
127013,gerrit-server_src_main_java_com_google_gerrit_server_patch_PatchScriptFactory.java,"private void loadPublished(java.util.Map<com.google.gerrit.reviewdb.client.Patch.Key, com.google.gerrit.reviewdb.client.Patch> byKey, java.lang.String file) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.notedb.ChangeNotes notes = control.getNotes(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.publishedByChangeFile(db, notes, changeId, file)) { comments.include(change.getId(), c); com.google.gerrit.reviewdb.client.PatchSet.Id psId = new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), c.key.patchSetId); com.google.gerrit.reviewdb.client.Patch.Key pKey = new com.google.gerrit.reviewdb.client.Patch.Key(psId, c.key.filename); com.google.gerrit.reviewdb.client.Patch p = byKey.get(pKey); if (p != null) { p.setCommentCount(((p.getCommentCount()) + 1)); } } }",64078316983b0f044735ecfd4e4a86a5421c8b5a,"private void loadPublished(java.util.Map<com.google.gerrit.reviewdb.client.Patch.Key, com.google.gerrit.reviewdb.client.Patch> byKey, java.lang.String file) throws com.google.gwtorm.server.OrmException { for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.publishedByChangeFile(db, notes, changeId, file)) { comments.include(change.getId(), c); com.google.gerrit.reviewdb.client.PatchSet.Id psId = new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), c.key.patchSetId); com.google.gerrit.reviewdb.client.Patch.Key pKey = new com.google.gerrit.reviewdb.client.Patch.Key(psId, c.key.filename); com.google.gerrit.reviewdb.client.Patch p = byKey.get(pKey); if (p != null) { p.setCommentCount(((p.getCommentCount()) + 1)); } } }",cc2e584170c1ad6eed197381225291cc28ea28af,"private void loadPublished(java.util.Map<com.google.gerrit.reviewdb.client.Patch.Key, com.google.gerrit.reviewdb.client.Patch> byKey, java.lang.String file) throws com.google.gwtorm.server.OrmException { for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.publishedByChangeFile(db, notes, changeId, file)) { comments.include(notes.getChangeId(), c); com.google.gerrit.reviewdb.client.PatchSet.Id psId = new com.google.gerrit.reviewdb.client.PatchSet.Id(notes.getChangeId(), c.key.patchSetId); com.google.gerrit.reviewdb.client.Patch.Key pKey = new com.google.gerrit.reviewdb.client.Patch.Key(psId, c.key.filename); com.google.gerrit.reviewdb.client.Patch p = byKey.get(pKey); if (p != null) { p.setCommentCount(((p.getCommentCount()) + 1)); } } }",58246611358270aa81667fa8a691c7b2900367b8,2017-09-14 23:39:06,2
127013,gerrit-server_src_main_java_com_google_gerrit_server_patch_PatchScriptFactory.java,"private org.eclipse.jgit.lib.ObjectId getEditRev() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException, java.io.IOException { edit = editReader.byChange(control.getNotes()); if (edit.isPresent()) { return edit.get().getEditCommit(); } throw new com.google.gerrit.server.project.NoSuchChangeException(change.getId()); }",35f523cfa2cfe5eeca305a06f5384607b60c0a31,"private org.eclipse.jgit.lib.ObjectId getEditRev() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException, java.io.IOException { edit = editReader.byChange(notes); if (edit.isPresent()) { return edit.get().getEditCommit(); } throw new com.google.gerrit.server.project.NoSuchChangeException(change.getId()); }",1c8559602667d29bc27f5dfc057470bba119c854,"private org.eclipse.jgit.lib.ObjectId getEditRev() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException, java.io.IOException { edit = editReader.byChange(notes); if (edit.isPresent()) { return edit.get().getEditCommit(); } throw new com.google.gerrit.server.project.NoSuchChangeException(notes.getChangeId()); }",943ab440266406d36633be3cf067b950185d8962,2017-09-14 23:39:06,2
127013,gerrit-server_src_main_java_com_google_gerrit_server_patch_PatchScriptFactory.java,"private void loadDrafts(java.util.Map<com.google.gerrit.reviewdb.client.Patch.Key, com.google.gerrit.reviewdb.client.Patch> byKey, com.google.gerrit.reviewdb.client.Account.Id me, java.lang.String file) throws com.google.gwtorm.server.OrmException { for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.draftByChangeFileAuthor(db, control.getNotes(), file, me)) { comments.include(change.getId(), c); com.google.gerrit.reviewdb.client.PatchSet.Id psId = new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), c.key.patchSetId); com.google.gerrit.reviewdb.client.Patch.Key pKey = new com.google.gerrit.reviewdb.client.Patch.Key(psId, c.key.filename); com.google.gerrit.reviewdb.client.Patch p = byKey.get(pKey); if (p != null) { p.setDraftCount(((p.getDraftCount()) + 1)); } } }",24e1e613f07e1ef71554f14a61d75fb0d17ba750,"private void loadDrafts(java.util.Map<com.google.gerrit.reviewdb.client.Patch.Key, com.google.gerrit.reviewdb.client.Patch> byKey, com.google.gerrit.reviewdb.client.Account.Id me, java.lang.String file) throws com.google.gwtorm.server.OrmException { for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.draftByChangeFileAuthor(db, notes, file, me)) { comments.include(change.getId(), c); com.google.gerrit.reviewdb.client.PatchSet.Id psId = new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), c.key.patchSetId); com.google.gerrit.reviewdb.client.Patch.Key pKey = new com.google.gerrit.reviewdb.client.Patch.Key(psId, c.key.filename); com.google.gerrit.reviewdb.client.Patch p = byKey.get(pKey); if (p != null) { p.setDraftCount(((p.getDraftCount()) + 1)); } } }",6e592dedc6b5e0f536af2dbf59901dc9b5afe43c,"private void loadDrafts(java.util.Map<com.google.gerrit.reviewdb.client.Patch.Key, com.google.gerrit.reviewdb.client.Patch> byKey, com.google.gerrit.reviewdb.client.Account.Id me, java.lang.String file) throws com.google.gwtorm.server.OrmException { for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.draftByChangeFileAuthor(db, notes, file, me)) { comments.include(notes.getChangeId(), c); com.google.gerrit.reviewdb.client.PatchSet.Id psId = new com.google.gerrit.reviewdb.client.PatchSet.Id(notes.getChangeId(), c.key.patchSetId); com.google.gerrit.reviewdb.client.Patch.Key pKey = new com.google.gerrit.reviewdb.client.Patch.Key(psId, c.key.filename); com.google.gerrit.reviewdb.client.Patch p = byKey.get(pKey); if (p != null) { p.setDraftCount(((p.getDraftCount()) + 1)); } } }",9953f25569711cfe1914658d47f8656dac86ad02,2017-09-14 23:39:06,2
126991,gerrit-server_src_main_java_com_google_gerrit_server_change_PutTopic.java,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { change = ctx.getChange(); com.google.gerrit.server.notedb.ChangeUpdate update = ctx.getUpdate(change.currentPatchSetId()); newTopicName = com.google.common.base.Strings.nullToEmpty(input.topic); oldTopicName = com.google.common.base.Strings.nullToEmpty(change.getTopic()); if (oldTopicName.equals(newTopicName)) { return false; } java.lang.String summary; if (oldTopicName.isEmpty()) { summary = ""Topic set to "" + (newTopicName); } else if (newTopicName.isEmpty()) { summary = (""Topic "" + (oldTopicName)) + "" removed""; } else { summary = java.lang.String.format(""Topic changed from %s to %s"", oldTopicName, newTopicName); } change.setTopic(com.google.common.base.Strings.emptyToNull(newTopicName)); update.setTopic(change.getTopic()); com.google.gerrit.reviewdb.client.ChangeMessage cmsg = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx, summary, ChangeMessagesUtil.TAG_SET_TOPIC); cmUtil.addChangeMessage(ctx.getDb(), update, cmsg); return true; }",0b500bb527b8e62c2050776e7811229a13ebf7c2,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { change = ctx.getChange(); oldTopicName = com.google.common.base.Strings.nullToEmpty(change.getTopic()); if (oldTopicName.equals(newTopicName)) { return false; } java.lang.String summary; if (oldTopicName.isEmpty()) { summary = ""Topic set to "" + (newTopicName); } else if (newTopicName.isEmpty()) { summary = (""Topic "" + (oldTopicName)) + "" removed""; } else { summary = java.lang.String.format(""Topic changed from %s to %s"", oldTopicName, newTopicName); } change.setTopic(com.google.common.base.Strings.emptyToNull(newTopicName)); com.google.gerrit.server.notedb.ChangeUpdate update = ctx.getUpdate(change.currentPatchSetId()); update.setTopic(change.getTopic()); com.google.gerrit.reviewdb.client.ChangeMessage cmsg = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx, summary, ChangeMessagesUtil.TAG_SET_TOPIC); cmUtil.addChangeMessage(ctx.getDb(), update, cmsg); return true; }",e6b5fc6bf81f03d34f00c16b560c76873ac99847,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { change = ctx.getChange(); com.google.gerrit.server.notedb.ChangeUpdate update = ctx.getUpdate(change.currentPatchSetId()); newTopicName = com.google.common.base.Strings.nullToEmpty(input.topic); oldTopicName = com.google.common.base.Strings.nullToEmpty(change.getTopic()); if (oldTopicName.equals(newTopicName)) { return false; } java.lang.String summary; if (oldTopicName.isEmpty()) { summary = ""Topic set to "" + (newTopicName); } else if (newTopicName.isEmpty()) { summary = (""Topic "" + (oldTopicName)) + "" removed""; } else { summary = java.lang.String.format(""Topic changed from %s to %s"", oldTopicName, newTopicName); } change.setTopic(com.google.common.base.Strings.emptyToNull(newTopicName)); update.setTopic(change.getTopic()); com.google.gerrit.reviewdb.client.ChangeMessage cmsg = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx, summary, ChangeMessagesUtil.TAG_SET_TOPIC); cmUtil.addChangeMessage(ctx.getDb(), update, cmsg); return true; }",0b500bb527b8e62c2050776e7811229a13ebf7c2,2017-09-15 12:01:33,7
126991,gerrit-server_src_main_java_com_google_gerrit_server_change_PutTopic.java,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, com.google.gerrit.server.change.PutTopic.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { req.permissions().check(ChangePermission.EDIT_TOPIC_NAME); com.google.gerrit.server.change.PutTopic.Op op = new com.google.gerrit.server.change.PutTopic.Op((input != null ? input : new com.google.gerrit.server.change.PutTopic.Input())); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(req.getId(), op); u.execute(); } return com.google.common.base.Strings.isNullOrEmpty(op.newTopicName) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(op.newTopicName); }",053ee6b2f99f33f2922256e0162b5e4a3cfb1593,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, com.google.gerrit.server.change.PutTopic.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { req.permissions().check(ChangePermission.EDIT_TOPIC_NAME); java.lang.String newTopicName = (input == null) ? """" : com.google.common.base.Strings.nullToEmpty(input.topic); if ((newTopicName.length()) > (com.google.gerrit.server.change.PutTopic.MAX_TOPIC_LENGTH)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""topic length exceeds the limit (%s)"", com.google.gerrit.server.change.PutTopic.MAX_TOPIC_LENGTH)); } com.google.gerrit.server.change.PutTopic.Op op = new com.google.gerrit.server.change.PutTopic.Op(newTopicName); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(req.getId(), op); u.execute(); } return com.google.common.base.Strings.isNullOrEmpty(op.newTopicName) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(op.newTopicName); }",5a4160fd581e7b74db3d0fdc2fe2f5154868619f,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, com.google.gerrit.server.change.PutTopic.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { req.permissions().check(ChangePermission.EDIT_TOPIC_NAME); if (((input != null) && ((input.topic) != null)) && ((input.topic.length()) > (com.google.gerrit.server.ChangeUtil.TOPIC_MAX_LENGTH))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""topic length exceeds the limit (%s)"", ChangeUtil.TOPIC_MAX_LENGTH)); } com.google.gerrit.server.change.PutTopic.Op op = new com.google.gerrit.server.change.PutTopic.Op((input != null ? input : new com.google.gerrit.server.change.PutTopic.Input())); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(req.getId(), op); u.execute(); } return com.google.common.base.Strings.isNullOrEmpty(op.newTopicName) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(op.newTopicName); }",50f9f8e427a0b7ed33e97dcd3f6a8f256f99b4ba,2017-09-15 12:01:33,7
127232,gerrit-server_src_main_java_com_google_gerrit_server_project_DashboardsCollection.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static boolean isDefaultDashboard(com.google.gerrit.extensions.restapi.IdString id) { return (id != null) && (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id.toString())); },8682d44a91d98fb76ad8993d3d8e15e9db73c467,public static boolean isDefaultDashboard(@com.google.gerrit.common.Nullable com.google.gerrit.extensions.restapi.IdString id) { return (id != null) && (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id.toString())); },c9d49e75346450231cbda6869aa3f2e18a3c73bb,2017-09-15 13:54:40,4
127232,gerrit-server_src_main_java_com_google_gerrit_server_project_DashboardsCollection.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static boolean isDefaultDashboard(java.lang.String id) { return (id != null) && (id.equals(com.google.gerrit.server.project.DashboardsCollection.DEFAULT_DASHBOARD_NAME)); },c6f30a37d79663ae11addf481a395e55d5182aa6,public static boolean isDefaultDashboard(@com.google.gerrit.common.Nullable java.lang.String id) { return com.google.gerrit.server.project.DashboardsCollection.DEFAULT_DASHBOARD_NAME.equals(id); },9917ffa31692df08b1fad0f1e18cf358149f6dd0,2017-09-15 13:54:40,4
127174,gerrit-server_src_main_java_com_google_gerrit_server_api_projects_DashboardApiImpl.java,,,"@java.lang.Override public com.google.gerrit.extensions.api.projects.DashboardInfo get(boolean inherited) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.project.GetDashboard impl = getDashboard.get(); impl.setInherited(inherited); return impl.apply(resource()); } catch (java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot read dashboard"", e); } }",de5b6fa3a99e91ef3d6a0e20c9469cd0807ea458,"@java.lang.Override public com.google.gerrit.extensions.api.projects.DashboardInfo get(boolean inherited) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDashboard.get().setInherited(inherited).apply(resource()); } catch (java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot read dashboard"", e); } }",91d8bce868b915ad8a45d461b5b3076374c38d89,2017-09-15 14:03:23,6
127210,gerrit-server_src_main_java_com_google_gerrit_server_project_GetDashboard.java,"private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectControl ctl) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = ctl.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = ctl.getProject().getDefaultDashboard(); } if (""default"".equals(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(ctl, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : ctl.getProjectState().tree()) { id = ps.getProject().getDefaultDashboard(); if (""default"".equals(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { ctl = ps.controlFor(ctl.getUser()); return parse(ctl, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }",832c4a620e663646be718d63d19d7a8844256b89,"private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectControl ctl) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = ctl.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = ctl.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.project.DashboardsCollection.DEFAULT_DASHBOARD_NAME.equals(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(ctl, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : ctl.getProjectState().tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.project.DashboardsCollection.DEFAULT_DASHBOARD_NAME.equals(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { ctl = ps.controlFor(ctl.getUser()); return parse(ctl, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }",8dea405243c0dbe7a8fab60015b4d24bd66b09c6,"private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectControl ctl) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = ctl.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = ctl.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(ctl, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : ctl.getProjectState().tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { ctl = ps.controlFor(ctl.getUser()); return parse(ctl, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }",f77997514f0e5576cce3c27067eb08bb029b2c6f,2017-09-15 14:03:23,4
127210,gerrit-server_src_main_java_com_google_gerrit_server_project_DashboardsCollection.java,"@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.project.ProjectControl myCtl = parent.getControl(); if (id.toString().equals(""default"")) { return com.google.gerrit.server.project.DashboardResource.projectDefault(myCtl); } java.util.List<java.lang.String> parts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id.get())); if ((parts.size()) != 2) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.server.CurrentUser user = myCtl.getUser(); java.lang.String ref = parts.get(0); java.lang.String path = parts.get(1); for (com.google.gerrit.server.project.ProjectState ps : myCtl.getProjectState().tree()) { try { return parse(ps.controlFor(user), ref, path, myCtl); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",acc6ea4ce76f5af6136070d4fca5450979ac42c8,"@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.project.ProjectControl myCtl = parent.getControl(); if (id.toString().equals(com.google.gerrit.server.project.DashboardsCollection.DEFAULT_DASHBOARD_NAME)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(myCtl); } java.util.List<java.lang.String> parts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id.get())); if ((parts.size()) != 2) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.server.CurrentUser user = myCtl.getUser(); java.lang.String ref = parts.get(0); java.lang.String path = parts.get(1); for (com.google.gerrit.server.project.ProjectState ps : myCtl.getProjectState().tree()) { try { return parse(ps.controlFor(user), ref, path, myCtl); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",bd2842e5f28220b2a30695e29b90d3f1eb1c601c,"@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.project.ProjectControl myCtl = parent.getControl(); if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(myCtl); } java.util.List<java.lang.String> parts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id.get())); if ((parts.size()) != 2) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.server.CurrentUser user = myCtl.getUser(); java.lang.String ref = parts.get(0); java.lang.String path = parts.get(1); for (com.google.gerrit.server.project.ProjectState ps : myCtl.getProjectState().tree()) { try { return parse(ps.controlFor(user), ref, path, myCtl); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",2972cf44b13bc76353cec15d4e6f7aa87c144df8,2017-09-15 14:03:23,4
127210,gerrit-server_src_main_java_com_google_gerrit_server_project_DashboardsCollection.java,"@java.lang.SuppressWarnings(""unchecked"") @java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource, ?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { if (id.toString().equals(""default"")) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",bb7293dd52b2b09020c4269ec93668da1c57a7ab,"@java.lang.SuppressWarnings(""unchecked"") @java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource, ?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { if (id.toString().equals(com.google.gerrit.server.project.DashboardsCollection.DEFAULT_DASHBOARD_NAME)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",27c4ec3bd26d83640ff4df295a4db0d9f0e516dd,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource, ?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",2e7622a77fef766a8a742afcd13e6a8b74924169,2017-09-15 14:03:23,4
127174,gerrit-server_src_main_java_com_google_gerrit_server_project_GetDashboard.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.kohsuke.args4j.Option(name = ""--inherited"", usage = ""include inherited dashboards"") public void setInherited(boolean inherited) { this.inherited = inherited; }",825da74568a5884ae36e729650ffc000bb1ffb19,public com.google.gerrit.server.project.GetDashboard setInherited(boolean inherited) { this.inherited = inherited; return this; },19deef3a0734b80ca64b861dfc3a8f60b17411e5,2017-09-15 14:03:23,6
124775,src_main_java_com_criteo_gerrit_plugins_automerge_AutomaticMerger.java,"private void attemptToMergeAtomic(com.criteo.gerrit.plugins.automerge.Change change) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { final java.util.List<com.google.gerrit.extensions.common.ChangeInfo> related = com.google.common.collect.Lists.newArrayList(); related.addAll(api.changes().query((""status: open AND topic: "" + (change.topic))).withOption(ListChangesOption.CURRENT_REVISION).get()); for (final com.google.gerrit.extensions.common.ChangeInfo info : related) { if (!(atomicityHelper.isSubmittable(info.project, info._number))) { com.criteo.gerrit.plugins.automerge.AutomaticMerger.log.info(""Change {} is not submittable because same topic change {} has not all approvals."", change.number, info._number); return; } } for (final com.google.gerrit.extensions.common.ChangeInfo info : related) { boolean dependsOnNonMergedCommit = atomicityHelper.hasDependentReview(info.project, info._number); if ((!(info.mergeable)) || dependsOnNonMergedCommit) { com.criteo.gerrit.plugins.automerge.AutomaticMerger.log.info(""Change {} is not mergeable because same topic change {} {}"", change.number, info._number, (!(info.mergeable) ? ""is non mergeable"" : ""depends on a non merged commit."")); if (!(info.mergeable)) { reviewUpdater.commentOnReview(change.project, change.number, AutomergeConfig.CANT_MERGE_COMMENT_FILE); } return; } } com.criteo.gerrit.plugins.automerge.AutomaticMerger.log.info(""Submitting atomic change {}..."", change.number); for (final com.google.gerrit.extensions.common.ChangeInfo info : related) { atomicityHelper.mergeReview(info.project, info._number); } }",cb312b53fc40e766d91e1eaa72ec504f326a19d8,"private void attemptToMergeAtomic(com.criteo.gerrit.plugins.automerge.Change change) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { final java.util.List<com.google.gerrit.extensions.common.ChangeInfo> related = com.google.common.collect.Lists.newArrayList(); related.addAll(api.changes().query((""status: open AND topic: "" + (change.topic))).withOption(ListChangesOption.CURRENT_REVISION).get()); for (final com.google.gerrit.extensions.common.ChangeInfo info : related) { if (!(atomicityHelper.isSubmittable(info.project, info._number))) { com.criteo.gerrit.plugins.automerge.AutomaticMerger.log.info(""Change {} is not submittable because same topic change {} has not all approvals."", change.number, info._number); return; } } for (final com.google.gerrit.extensions.common.ChangeInfo info : related) { boolean dependsOnNonMergedCommit = atomicityHelper.hasDependentReview(info.project, info._number); if ((!(info.mergeable)) || dependsOnNonMergedCommit) { com.criteo.gerrit.plugins.automerge.AutomaticMerger.log.info(""Change {} is not mergeable because same topic change {} {}"", change.number, info._number, (!(info.mergeable) ? ""is non mergeable"" : ""depends on a non merged commit."")); if (!(info.mergeable)) { reviewUpdater.commentOnReview(change.project, change.number, config.cantMergeGitConflict); } return; } } com.criteo.gerrit.plugins.automerge.AutomaticMerger.log.info(""Submitting atomic change {}..."", change.number); for (final com.google.gerrit.extensions.common.ChangeInfo info : related) { atomicityHelper.mergeReview(info.project, info._number); } }",9db069322f86172390ee9a9581c64299ffde1898,"private void attemptToMergeAtomic(com.criteo.gerrit.plugins.automerge.Change change) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { final java.util.List<com.google.gerrit.extensions.common.ChangeInfo> related = com.google.common.collect.Lists.newArrayList(); related.addAll(api.changes().query((""status: open AND topic: "" + (change.topic))).withOption(ListChangesOption.CURRENT_REVISION).get()); for (final com.google.gerrit.extensions.common.ChangeInfo info : related) { if (!(atomicityHelper.isSubmittable(info.project, info._number))) { com.criteo.gerrit.plugins.automerge.AutomaticMerger.log.info(""Change {} is not submittable because same topic change {} has not all approvals."", change.number, info._number); return; } } for (final com.google.gerrit.extensions.common.ChangeInfo info : related) { boolean dependsOnNonMergedCommit = atomicityHelper.hasDependentReview(info.project, info._number); if ((!(info.mergeable)) || dependsOnNonMergedCommit) { com.criteo.gerrit.plugins.automerge.AutomaticMerger.log.info(""Change {} is not mergeable because same topic change {} {}"", change.number, info._number, (!(info.mergeable) ? ""is non mergeable"" : ""depends on a non merged commit."")); if (!(info.mergeable)) { reviewUpdater.commentOnReview(change.project, change.number, java.lang.String.format(config.cantMergeGitConflict.getContent(), info._number)); } return; } } com.criteo.gerrit.plugins.automerge.AutomaticMerger.log.info(""Submitting atomic change {}..."", change.number); for (final com.google.gerrit.extensions.common.ChangeInfo info : related) { atomicityHelper.mergeReview(info.project, info._number); } }",17d0ed02d0b8b67567c2014d819d23c90eb82acd,2017-09-15 15:52:23,3
124775,src_main_java_com_criteo_gerrit_plugins_automerge_ReviewUpdater.java,"public void commentOnReview(java.lang.String project, int number, java.lang.String commentTemplate) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.extensions.api.changes.ReviewInput comment = createComment(commentTemplate); applyComment(project, number, comment); }",3feb20890ef56eacd567bbfb21eb30745aeddb7c,"public void commentOnReview(java.lang.String project, int number, com.criteo.gerrit.plugins.automerge.PluginComment pluginComment) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.extensions.api.changes.ReviewInput comment = createComment(pluginComment); applyComment(project, number, comment); }",36229c3a6a0dcdd587233bfce9b3a0030e1daac0,"public void commentOnReview(java.lang.String project, int number, java.lang.String comment) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.extensions.api.changes.ReviewInput reviewInput = createComment(comment); applyComment(project, number, reviewInput); }",680118cb446ac2c850d345ef49f269508de745a8,2017-09-15 15:52:23,3
124775,src_main_java_com_criteo_gerrit_plugins_automerge_ReviewUpdater.java,private com.google.gerrit.extensions.api.changes.ReviewInput createComment(final java.lang.String commentTemplate) { return new com.google.gerrit.extensions.api.changes.ReviewInput().message(((com.criteo.gerrit.plugins.automerge.ReviewUpdater.commentsPrefix) + (getCommentFromFile(commentTemplate)))); },1b505833a3c14f53d535f0a08b106cfa2bc16e5b,private com.google.gerrit.extensions.api.changes.ReviewInput createComment(com.criteo.gerrit.plugins.automerge.PluginComment pluginComment) { return new com.google.gerrit.extensions.api.changes.ReviewInput().message(((com.criteo.gerrit.plugins.automerge.ReviewUpdater.commentsPrefix) + (pluginComment.getCommentContent()))); },7877af04f2a722420e9a57267b3d8bd467cde331,private com.google.gerrit.extensions.api.changes.ReviewInput createComment(java.lang.String comment) { return new com.google.gerrit.extensions.api.changes.ReviewInput().message(((com.criteo.gerrit.plugins.automerge.ReviewUpdater.commentsPrefix) + comment)); },2fca46c5c5307d8e9664b07a21234cdfbcfb3f0f,2017-09-15 15:52:23,3
124775,src_main_java_com_criteo_gerrit_plugins_automerge_PluginComment.java,,,"java.lang.String getCommentContent() { if (templatePath.exists()) { try { return com.google.common.io.Files.toString(templatePath, Charsets.UTF_8); } catch (final java.io.IOException exc) { com.criteo.gerrit.plugins.automerge.PluginComment.log.error((""Not able to read "" + (templatePath)), exc); } } return defaultMessage; }",45c492ef42d51b7f3c698e822cc3581b0c51a018,"java.lang.String getContent() { if (templatePath.exists()) { try { return com.google.common.io.Files.toString(templatePath, Charsets.UTF_8); } catch (final java.io.IOException exc) { com.criteo.gerrit.plugins.automerge.PluginComment.log.error((""Not able to read "" + (templatePath)), exc); } } return defaultMessage; }",9c3cfae996d748b6c8890be7681be5d104714664,2017-09-15 15:52:23,3
124775,src_main_java_com_criteo_gerrit_plugins_automerge_ReviewUpdater.java,"public void setMinusOne(java.lang.String project, int number, java.lang.String commentTemplate) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.extensions.api.changes.ReviewInput message = createComment(commentTemplate).label(""Code-Review"", (-1)); applyComment(project, number, message); }",d09d590037b399f4b70f86efbf2e8fda4123567d,"public void setMinusOne(java.lang.String project, int number, com.criteo.gerrit.plugins.automerge.PluginComment pluginComment) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.extensions.api.changes.ReviewInput message = createComment(pluginComment).label(""Code-Review"", (-1)); applyComment(project, number, message); }",00cfef1c89bba3840ecd595a3c492545e6fe8c6c,"public void setMinusOne(java.lang.String project, int number, java.lang.String comment) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.extensions.api.changes.ReviewInput message = createComment(comment).label(""Code-Review"", (-1)); applyComment(project, number, message); }",7d0b9f91cd1f00602d360b23395f453afd5910aa,2017-09-15 15:52:23,3
124775,src_main_java_com_criteo_gerrit_plugins_automerge_AutomaticMerger.java,"private void processNewAtomicPatchSet(com.criteo.gerrit.plugins.automerge.Change change) { try { checkReviewExists(change.number); if (atomicityHelper.hasDependentReview(change.project, change.number)) { com.criteo.gerrit.plugins.automerge.AutomaticMerger.log.info(java.lang.String.format(""Warn the user by setting -1 on change %d, as other atomic changes exists on the same repository."", change.number)); reviewUpdater.setMinusOne(change.project, change.number, AutomergeConfig.ATOMIC_REVIEWS_SAME_REPO_FILE); } else { com.criteo.gerrit.plugins.automerge.AutomaticMerger.log.info(java.lang.String.format(""Detected atomic review on change %d."", change.number)); reviewUpdater.commentOnReview(change.project, change.number, AutomergeConfig.ATOMIC_REVIEW_DETECTED_FILE); } } catch (com.google.gerrit.extensions.restapi.RestApiException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.update.UpdateException e) { throw new java.lang.RuntimeException(e); } }",d4e141be71cb7014713fe766fafa30e260388fb1,"private void processNewAtomicPatchSet(com.criteo.gerrit.plugins.automerge.Change change) { try { checkReviewExists(change.number); if (atomicityHelper.hasDependentReview(change.project, change.number)) { com.criteo.gerrit.plugins.automerge.AutomaticMerger.log.info(java.lang.String.format(""Warn the user by setting -1 on change %d, as other atomic changes exists on the same repository."", change.number)); reviewUpdater.setMinusOne(change.project, change.number, config.atomicReviewsSameRepo); } else { com.criteo.gerrit.plugins.automerge.AutomaticMerger.log.info(java.lang.String.format(""Detected atomic review on change %d."", change.number)); reviewUpdater.commentOnReview(change.project, change.number, config.atomicReviewDetected); } } catch (com.google.gerrit.extensions.restapi.RestApiException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.update.UpdateException e) { throw new java.lang.RuntimeException(e); } }",143413de60bb2baaa6f15ec93253ecb820a42c43,"private void processNewAtomicPatchSet(com.criteo.gerrit.plugins.automerge.Change change) { try { checkReviewExists(change.number); if (atomicityHelper.hasDependentReview(change.project, change.number)) { com.criteo.gerrit.plugins.automerge.AutomaticMerger.log.info(java.lang.String.format(""Warn the user by setting -1 on change %d, as other atomic changes exists on the same repository."", change.number)); reviewUpdater.setMinusOne(change.project, change.number, config.atomicReviewsSameRepo.getContent()); } else { com.criteo.gerrit.plugins.automerge.AutomaticMerger.log.info(java.lang.String.format(""Detected atomic review on change %d."", change.number)); reviewUpdater.commentOnReview(change.project, change.number, config.atomicReviewDetected.getContent()); } } catch (com.google.gerrit.extensions.restapi.RestApiException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.update.UpdateException e) { throw new java.lang.RuntimeException(e); } }",668bc39a38e606f032b8922331e32476eb59685f,2017-09-15 15:52:23,3
127453,gerrit-server_src_main_java_com_google_gerrit_server_StarredChangesUtil.java,"public void ignore(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { star(accountId, project, changeId, com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL), com.google.common.collect.ImmutableSet.of()); }",faeef61105a38f564bc71426e8a6fea3dd324ded,"public void ignore(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { star(rsrc.getUser().getAccountId(), rsrc.getProject(), rsrc.getChange().getId(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL), com.google.common.collect.ImmutableSet.of()); }",f705b89c6b919a237a95fb2c70eed58f083a5322,"public void ignore(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { star(rsrc.getUser().asIdentifiedUser().getAccountId(), rsrc.getProject(), rsrc.getChange().getId(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL), com.google.common.collect.ImmutableSet.of()); }",150c0752a746b5938a88a83e7de1790e2d957aca,2017-09-18 09:44:05,3
127453,gerrit-server_src_main_java_com_google_gerrit_server_StarredChangesUtil.java,"public void unignore(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { star(accountId, project, changeId, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL)); }",bdc6ede45326114c396805c422c2f70ce9863c00,"public void unignore(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { star(rsrc.getUser().getAccountId(), rsrc.getProject(), rsrc.getChange().getId(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL)); }",92d51f074ac987b0ab31f947690f182461003d36,"public void unignore(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { star(rsrc.getUser().asIdentifiedUser().getAccountId(), rsrc.getProject(), rsrc.getChange().getId(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL)); }",d530459ceb78c334ab37f79c42ed4a4ad4bbb184,2017-09-18 09:44:05,3
127571,gerrit-server_src_main_java_com_google_gerrit_server_change_Mute.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.Mute.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.StarredChangesUtil.IllegalLabelException, com.google.gwtorm.server.OrmException { if ((rsrc.isUserOwner()) || (isMuted(rsrc.getChange()))) { return com.google.gerrit.extensions.restapi.Response.ok(""""); } stars.mute(self.get().getAccountId(), rsrc.getProject(), rsrc.getChange()); return com.google.gerrit.extensions.restapi.Response.ok(""""); }",20e3d009d6dff1dfe388d5c8d60629ae66e8abc7,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.Mute.Input input) throws com.google.gerrit.server.StarredChangesUtil.IllegalLabelException, com.google.gwtorm.server.OrmException { if ((rsrc.isUserOwner()) || (isMuted(rsrc.getChange()))) { return com.google.gerrit.extensions.restapi.Response.ok(""""); } stars.mute(self.get().getAccountId(), rsrc.getProject(), rsrc.getChange()); return com.google.gerrit.extensions.restapi.Response.ok(""""); }",82e8fd7118d44e9c0c2a7721d1a543fb70479dd7,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.Mute.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.StarredChangesUtil.IllegalLabelException, com.google.gwtorm.server.OrmException { if (rsrc.isUserOwner()) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""cannot mute own change""); } if (!(isMuted(rsrc))) { stars.mute(rsrc); } return com.google.gerrit.extensions.restapi.Response.ok(""""); }",957f2d5d8cc68c28cc7f286730e95360c99855fb,2017-09-19 07:52:10,2
127572,gerrit-server_src_main_java_com_google_gerrit_server_change_HashtagsUtil.java,"static java.util.Set<java.lang.String> extractTags(java.util.Set<java.lang.String> input) throws java.lang.IllegalArgumentException { if (input == null) { return java.util.Collections.emptySet(); } java.util.HashSet<java.lang.String> result = new java.util.HashSet<>(); for (java.lang.String hashtag : input) { if (hashtag.contains("","")) { throw new java.lang.IllegalArgumentException(""Hashtags may not contain commas""); } hashtag = com.google.gerrit.server.change.HashtagsUtil.cleanupHashtag(hashtag); if (!(hashtag.isEmpty())) { result.add(hashtag); } } return result; }",2162287790059567b51a8a2b7ca4363097e87b74,"static java.util.Set<java.lang.String> extractTags(java.util.Set<java.lang.String> input) throws com.google.gerrit.server.change.HashtagsUtil.InvalidHashtagsException { if (input == null) { return java.util.Collections.emptySet(); } java.util.HashSet<java.lang.String> result = new java.util.HashSet<>(); for (java.lang.String hashtag : input) { if (hashtag.contains("","")) { throw com.google.gerrit.server.change.HashtagsUtil.InvalidHashtagsException.hashtagsMayNotContainCommas(); } hashtag = com.google.gerrit.server.change.HashtagsUtil.cleanupHashtag(hashtag); if (!(hashtag.isEmpty())) { result.add(hashtag); } } return result; }",e9035781a76f9bb7d7dad420e10843190cc7b5e0,"static java.util.Set<java.lang.String> extractTags(java.util.Set<java.lang.String> input) throws com.google.gerrit.server.change.HashtagsUtil.InvalidHashtagException { if (input == null) { return java.util.Collections.emptySet(); } java.util.HashSet<java.lang.String> result = new java.util.HashSet<>(); for (java.lang.String hashtag : input) { if (hashtag.contains("","")) { throw com.google.gerrit.server.change.HashtagsUtil.InvalidHashtagException.hashtagsMayNotContainCommas(); } hashtag = com.google.gerrit.server.change.HashtagsUtil.cleanupHashtag(hashtag); if (!(hashtag.isEmpty())) { result.add(hashtag); } } return result; }",d7ba9bcbc737011c17879ff55b96080f9f86e65f,2017-09-19 09:10:55,2
127572,gerrit-server_src_main_java_com_google_gerrit_server_change_HashtagsUtil.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static com.google.gerrit.server.change.HashtagsUtil.InvalidHashtagsException hashtagsMayNotContainCommas() { return new com.google.gerrit.server.change.HashtagsUtil.InvalidHashtagsException(""hashtags may not contain commas""); }",8dd1470b3ee06f5dce106a50ec19e488ffc6e182,"static com.google.gerrit.server.change.HashtagsUtil.InvalidHashtagException hashtagsMayNotContainCommas() { return new com.google.gerrit.server.change.HashtagsUtil.InvalidHashtagException(""hashtags may not contain commas""); }",2b9bad4f1221862460cbef6200022195857400cb,2017-09-19 09:10:55,2
127730,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_project_DashboardIT.java,"@org.junit.Test public void dashboardDoesNotExist() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.projects().name(project.get()).dashboard(""dashboard"").get(); }",cbe520ac08557b6d2a5c72a4154c30599f0bdd9c,"@org.junit.Test public void dashboardDoesNotExist() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.projects().name(project.get()).dashboard(""default:dashboard"").get(); }",a84f3ef81b25a48610dd6f62061a5db83d5aaba0,"@org.junit.Test public void dashboardDoesNotExist() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.projects().name(project.get()).dashboard(""my:dashboard"").get(); }",82c830edac81328122a8413c3de0389ac818f812,2017-09-19 11:23:37,2
124690,gerrit-server_src_main_java_com_google_gerrit_server_api_projects_ProjectApiImpl.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public com.google.gerrit.extensions.api.config.AccessCheckInfo checkAccess(com.google.gerrit.extensions.api.config.AccessCheckInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { return checkAccess.apply(checkExists(), in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot post check access"", e); } }",5078c8af7b654b730042160585c69b65dee9025d,"@java.lang.Override public com.google.gerrit.extensions.api.config.AccessCheckInfo checkAccess(com.google.gerrit.extensions.api.config.AccessCheckInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { return checkAccess.apply(checkExists(), in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot check access rights"", e); } }",93bdf1a9d2a095f9f22db34cad53f6a67d396d78,2017-09-19 12:22:21,21
124690,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_CheckAccessIT.java,"@org.junit.Test public void invalidInputs() { java.util.List<com.google.gerrit.extensions.api.config.AccessCheckInput> inputs = com.google.common.collect.ImmutableList.of(new com.google.gerrit.extensions.api.config.AccessCheckInput(), new com.google.gerrit.extensions.api.config.AccessCheckInput(user.email, null, null), new com.google.gerrit.extensions.api.config.AccessCheckInput(null, normalProject.toString(), null), new com.google.gerrit.extensions.api.config.AccessCheckInput(""doesnotexist@invalid.com"", normalProject.toString(), null)); for (com.google.gerrit.extensions.api.config.AccessCheckInput input : inputs) { try { gApi.config().server().checkAccess(input); fail(java.lang.String.format(""want RestApiException for %s"", newGson().toJson(input))); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { } } }",6373e2ce4a76318014e0f62329ef04951dbb6fc9,"@org.junit.Test public void invalidInputs() { java.util.List<com.google.gerrit.extensions.api.config.AccessCheckInput> inputs = com.google.common.collect.ImmutableList.of(new com.google.gerrit.extensions.api.config.AccessCheckInput(), new com.google.gerrit.extensions.api.config.AccessCheckInput(user.email, null), new com.google.gerrit.extensions.api.config.AccessCheckInput(null, null), new com.google.gerrit.extensions.api.config.AccessCheckInput(""doesnotexist@invalid.com"", null)); for (com.google.gerrit.extensions.api.config.AccessCheckInput input : inputs) { try { gApi.config().server().checkAccess(input); fail(java.lang.String.format(""want RestApiException for %s"", newGson().toJson(input))); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { } } }",62205e7325436e0be7eb09d44b7846c954992b6f,"@org.junit.Test public void emptyInput() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""input requires 'account'""); gApi.projects().name(normalProject.get()).checkAccess(new com.google.gerrit.extensions.api.config.AccessCheckInput()); }",29ff3d0032ae04bd18083c4de60723550a5e7213,2017-09-19 12:22:21,21
124690,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_CheckAccessIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static com.google.gerrit.acceptance.rest.project.CheckAccessIT.TestCase newTestInput(java.lang.String mail, java.lang.String project, java.lang.String ref, int want) { com.google.gerrit.acceptance.rest.project.CheckAccessIT.TestCase tc = new com.google.gerrit.acceptance.rest.project.CheckAccessIT.TestCase(); tc.input = new com.google.gerrit.extensions.api.config.AccessCheckInput(mail, ref); tc.project = project; tc.want = want; return tc; }",c1af4b844b51d52f5c1e8729cec74de3fd4902ed,"@org.junit.Test public void nonexistentEmail() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); exception.expectMessage(""cannot find account doesnotexist@invalid.com""); gApi.projects().name(normalProject.get()).checkAccess(new com.google.gerrit.extensions.api.config.AccessCheckInput(""doesnotexist@invalid.com"", null)); }",4a2a72162d400f0ab8f37221ad8850a8b37e7731,2017-09-19 12:22:21,21
127511,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeSuperSet.java,"private com.google.gerrit.extensions.client.SubmitType submitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet ps, boolean visible) throws com.google.gwtorm.server.OrmException { if (!visible) { return cd.changeControl().getProject().getSubmitType(); } com.google.gerrit.common.data.SubmitTypeRecord str = (ps == (cd.currentPatchSet())) ? cd.submitTypeRecord() : new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, emails, cd).setPatchSet(ps).getSubmitType(); if (!(str.isOk())) { logErrorAndThrow((((""Failed to get submit type for "" + (cd.getId())) + "": "") + (str.errorMessage))); } return str.type; }",a8f853067f7bb17a6acd34ba16a8f9b6633c15e0,"private com.google.gerrit.extensions.client.SubmitType submitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet ps, boolean visible) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (!visible) { return projectCache.checkedGet(cd.project()).getProject().getSubmitType(); } com.google.gerrit.common.data.SubmitTypeRecord str = (ps == (cd.currentPatchSet())) ? cd.submitTypeRecord() : new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, emails, cd).setPatchSet(ps).getSubmitType(); if (!(str.isOk())) { logErrorAndThrow((((""Failed to get submit type for "" + (cd.getId())) + "": "") + (str.errorMessage))); } return str.type; }",899470afdcb1b71bdbe2ec35d9deb97f9dda973d,"private com.google.gerrit.extensions.client.SubmitType submitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet ps, boolean visible) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (!visible) { return projectCache.checkedGet(cd.project()).getProject().getSubmitType(); } com.google.gerrit.common.data.SubmitTypeRecord str = (ps == (cd.currentPatchSet())) ? cd.submitTypeRecord() : submitRuleEvaluatorFactory.create(cd).setPatchSet(ps).getSubmitType(); if (!(str.isOk())) { logErrorAndThrow((((""Failed to get submit type for "" + (cd.getId())) + "": "") + (str.errorMessage))); } return str.type; }",cfc1609704a4a38fd2597e5a70ebb758c506fb2e,2017-09-20 09:00:19,4
128092,gerrit-server_src_main_java_com_google_gerrit_server_project_DashboardsCollection.java,"private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectControl ctl, java.lang.String ref, java.lang.String path, com.google.gerrit.server.project.ProjectControl myCtl) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.AmbiguousObjectException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.IncorrectObjectTypeException { java.lang.String id = (ref + "":"") + path; if (!(ref.startsWith(com.google.gerrit.server.project.REFS_DASHBOARDS))) { ref = (REFS_DASHBOARDS) + ref; } try { permissionBackend.user(ctl.getUser()).project(ctl.getProject().getNameKey()).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } if (!(org.eclipse.jgit.lib.Repository.isValidRefName(ref))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(ctl.getProject().getNameKey())) { org.eclipse.jgit.lib.ObjectId objId = git.resolve(((ref + "":"") + path)); if (objId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } org.eclipse.jgit.lib.BlobBasedConfig cfg = new org.eclipse.jgit.lib.BlobBasedConfig(null, git, objId); return new com.google.gerrit.server.project.DashboardResource(myCtl, ref, path, cfg, false); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }",202f8c10ef92f22253a14f306021161867f4eb7c,public java.lang.String normalizeDashboardRef(java.lang.String ref) { if (!(ref.startsWith(com.google.gerrit.server.project.REFS_DASHBOARDS))) { return (REFS_DASHBOARDS) + ref; } return ref; },46a43fc819b0641ffebb555404f8f5538d8434bd,public static java.lang.String normalizeDashboardRef(java.lang.String ref) { if (!(ref.startsWith(com.google.gerrit.server.project.REFS_DASHBOARDS))) { return (REFS_DASHBOARDS) + ref; } return ref; },e17d2493888ff1aab9f945103b3aa3321bd34027,2017-09-20 14:05:46,2
128092,gerrit-server_src_main_java_com_google_gerrit_server_project_DashboardsCollection.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectControl ctl, com.google.gerrit.extensions.api.projects.DashboardInfo info, com.google.gerrit.server.project.ProjectControl myCtl) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.AmbiguousObjectException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.IncorrectObjectTypeException { java.lang.String ref = normalizeDashboardRef(info.ref); try { permissionBackend.user(ctl.getUser()).project(ctl.getProject().getNameKey()).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } if (!(org.eclipse.jgit.lib.Repository.isValidRefName(ref))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(ctl.getProject().getNameKey())) { org.eclipse.jgit.lib.ObjectId objId = git.resolve(((ref + "":"") + (info.path))); if (objId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } org.eclipse.jgit.lib.BlobBasedConfig cfg = new org.eclipse.jgit.lib.BlobBasedConfig(null, git, objId); return new com.google.gerrit.server.project.DashboardResource(myCtl, ref, info.path, cfg, false); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } }",17c8c69d7c73d1ff276f39e2081118b5f0e42a45,"private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectControl ctl, com.google.gerrit.extensions.api.projects.DashboardInfo info, com.google.gerrit.server.project.ProjectControl myCtl) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.AmbiguousObjectException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.IncorrectObjectTypeException { java.lang.String ref = com.google.gerrit.server.project.DashboardsCollection.normalizeDashboardRef(info.ref); try { permissionBackend.user(ctl.getUser()).project(ctl.getProject().getNameKey()).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } if (!(org.eclipse.jgit.lib.Repository.isValidRefName(ref))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(ctl.getProject().getNameKey())) { org.eclipse.jgit.lib.ObjectId objId = git.resolve(((ref + "":"") + (info.path))); if (objId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } org.eclipse.jgit.lib.BlobBasedConfig cfg = new org.eclipse.jgit.lib.BlobBasedConfig(null, git, objId); return new com.google.gerrit.server.project.DashboardResource(myCtl, ref, info.path, cfg, false); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } }",a51a6e22d75ee1797341e318ac7556ad37231519,2017-09-20 14:05:46,2
128170,src_main_java_com_googlesource_gerrit_plugins_importer_ImportMenu.java,"private boolean canImport() { com.google.gerrit.server.account.CapabilityControl ctl = userProvider.get().getCapabilities(); return (ctl.canAdministrateServer()) || (ctl.canPerform((((pluginName) + ""-"") + (ImportCapability.ID)))); }",6f91778b0b90849e16ee91e9ff294ecd85734ab2,"private boolean canImport() { com.google.gerrit.server.permissions.PermissionBackend.WithUser withUser = permissionBackend.user(userProvider.get()); return (withUser.testOrFalse(GlobalPermission.ADMINISTRATE_SERVER)) || (withUser.testOrFalse(new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, ImportCapability.ID))); }",d4e5c3d4f89f5ac0b8f6db0f087991447906ee03,"private boolean canImport() { return (permissionBackend.user(userProvider).testOrFalse(new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, ImportCapability.ID))) || (permissionBackend.user(userProvider).testOrFalse(com.googlesource.gerrit.plugins.importer.ADMINISTRATE_SERVER)); }",8c8b49eda781e0b971470d7b8a336187f35dc8f6,2017-09-21 18:36:50,2
128170,src_main_java_com_googlesource_gerrit_plugins_importer_CompleteProjectImport.java,"private boolean canCompleteImport(com.google.gerrit.server.project.ProjectResource rsrc) { com.google.gerrit.server.account.CapabilityControl ctl = currentUserProvider.get().getCapabilities(); return (ctl.canAdministrateServer()) || ((ctl.canPerform((((pluginName) + ""-"") + (ImportCapability.ID)))) && (rsrc.getControl().isOwner())); }",e28e78669328235bc6d21cee7c8677a9b74eec72,"private boolean canCompleteImport(com.google.gerrit.server.project.ProjectResource rsrc) { com.google.gerrit.server.permissions.PermissionBackend.WithUser withUser = permissionBackend.user(currentUserProvider.get()); return (withUser.testOrFalse(GlobalPermission.ADMINISTRATE_SERVER)) || ((withUser.testOrFalse(new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, ImportCapability.ID))) && (rsrc.getControl().isOwner())); }",e9afae2ea4f094a971aec3f71b4cc2471cf10271,"private boolean canCompleteImport(com.google.gerrit.server.project.ProjectResource rsrc) { return (permissionBackend.user(currentUserProvider).testOrFalse(com.googlesource.gerrit.plugins.importer.ADMINISTRATE_SERVER)) || ((permissionBackend.user(currentUserProvider).testOrFalse(new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, ImportCapability.ID))) && (rsrc.getControl().isOwner())); }",99ac6da0ebf5efa2055bc03bff1071395d20fbb0,2017-09-21 18:36:50,2
128170,src_main_java_com_googlesource_gerrit_plugins_importer_CopyProject.java,"private boolean canCopy() { com.google.gerrit.server.account.CapabilityControl ctl = currentUserProvider.get().getCapabilities(); return (ctl.canAdministrateServer()) || (ctl.canPerform((((pluginName) + ""-"") + (CopyProjectCapability.ID)))); }",e452935f2fd5c7ba468f0f5b3c1b348be5afb069,"private boolean canCopy(com.google.gerrit.server.project.ProjectResource rsrc) { com.google.gerrit.server.permissions.PermissionBackend.WithUser withUser = permissionBackend.user(currentUserProvider.get()); return (withUser.testOrFalse(GlobalPermission.ADMINISTRATE_SERVER)) || ((withUser.testOrFalse(new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, CopyProjectCapability.ID))) && (rsrc.getControl().isOwner())); }",74e76677c872eb15a515c248b9b2294823d855cf,"private boolean canCopy() { return (permissionBackend.user(currentUserProvider).testOrFalse(com.googlesource.gerrit.plugins.importer.ADMINISTRATE_SERVER)) || (permissionBackend.user(currentUserProvider).testOrFalse(new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, CopyProjectCapability.ID))); }",6a51158068d35cd9e2def82dfaea024b25127fa3,2017-09-21 18:36:50,2
128170,src_main_java_com_googlesource_gerrit_plugins_importer_CopyProject.java,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.project.ProjectResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Copy..."").setTitle(java.lang.String.format(""Copy project %s"", rsrc.getName())).setVisible(canCopy()); }",0731fd7d0b10df94c164acfd7c9f9dd2d9140f23,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.project.ProjectResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Copy..."").setTitle(java.lang.String.format(""Copy project %s"", rsrc.getName())).setVisible(canCopy(rsrc)); }",26fda64545a684ecbab48de87acbcbf13cdbd01b,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.project.ProjectResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Copy..."").setTitle(java.lang.String.format(""Copy project %s"", rsrc.getName())).setVisible(canCopy()); }",0731fd7d0b10df94c164acfd7c9f9dd2d9140f23,2017-09-21 18:36:50,2
128170,src_main_java_com_googlesource_gerrit_plugins_importer_ResumeCopyProject.java,"private boolean canResumeCopy(com.google.gerrit.server.project.ProjectResource rsrc) { com.google.gerrit.server.account.CapabilityControl ctl = currentUserProvider.get().getCapabilities(); return (ctl.canAdministrateServer()) || ((ctl.canPerform((((pluginName) + ""-"") + (CopyProjectCapability.ID)))) && (rsrc.getControl().isOwner())); }",ca3d6ae8ed6bc1ece427bb089896b9808371440f,"private boolean canResumeCopy(com.google.gerrit.server.project.ProjectResource rsrc) { com.google.gerrit.server.permissions.PermissionBackend.WithUser withUser = permissionBackend.user(currentUserProvider.get()); return (withUser.testOrFalse(GlobalPermission.ADMINISTRATE_SERVER)) || ((withUser.testOrFalse(new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, CopyProjectCapability.ID))) && (rsrc.getControl().isOwner())); }",ae3b4ff7e5e30973fe803e4fabe59d24e71825c2,"private boolean canResumeCopy(com.google.gerrit.server.project.ProjectResource rsrc) { return (permissionBackend.user(currentUserProvider).testOrFalse(com.googlesource.gerrit.plugins.importer.ADMINISTRATE_SERVER)) || ((permissionBackend.user(currentUserProvider).testOrFalse(new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, CopyProjectCapability.ID))) && (rsrc.getControl().isOwner())); }",cd6dcffcc470765bd290ec68d847671aeafb48fd,2017-09-21 18:36:50,2
128170,src_main_java_com_googlesource_gerrit_plugins_importer_ResumeProjectImport.java,"private boolean canResumeImport(com.google.gerrit.server.project.ProjectResource rsrc) { com.google.gerrit.server.account.CapabilityControl ctl = currentUserProvider.get().getCapabilities(); return (ctl.canAdministrateServer()) || ((ctl.canPerform((((pluginName) + ""-"") + (ImportCapability.ID)))) && (rsrc.getControl().isOwner())); }",94fdd98b83e7e372bac750ba9ca6b8334a483933,"private boolean canResumeImport(com.google.gerrit.server.project.ProjectResource rsrc) { com.google.gerrit.server.permissions.PermissionBackend.WithUser withUser = permissionBackend.user(currentUserProvider.get()); return (withUser.testOrFalse(GlobalPermission.ADMINISTRATE_SERVER)) || ((withUser.testOrFalse(new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, ImportCapability.ID))) && (rsrc.getControl().isOwner())); }",cbc7bb4829a7659bd09199aeac383494e05b9866,"private boolean canResumeImport(com.google.gerrit.server.project.ProjectResource rsrc) { return (permissionBackend.user(currentUserProvider).testOrFalse(com.googlesource.gerrit.plugins.importer.ADMINISTRATE_SERVER)) || ((permissionBackend.user(currentUserProvider).testOrFalse(new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, ImportCapability.ID))) && (rsrc.getControl().isOwner())); }",f9ef5356c9251cd7ebea01cc9cbed1941508116a,2017-09-21 18:36:50,2
128170,src_main_java_com_googlesource_gerrit_plugins_importer_ProjectCommand.java,"@java.lang.Override protected void run() throws com.google.gerrit.common.errors.NoSuchAccountException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gerrit.server.update.UpdateException, com.google.gerrit.server.validators.ValidationException, com.google.gwtorm.server.OrmException, com.googlesource.gerrit.plugins.importer.UnloggedFailure, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { com.googlesource.gerrit.plugins.importer.ImportProject.Input input = new com.googlesource.gerrit.plugins.importer.ImportProject.Input(); input.from = url; input.name = name; input.user = user; input.pass = com.googlesource.gerrit.plugins.importer.PasswordUtil.readPassword(in, pass); if (!(com.google.common.base.Strings.isNullOrEmpty(parent))) { input.parent = parent; } try { com.googlesource.gerrit.plugins.importer.ImportProject importer = importProjectFactory.create(new com.google.gerrit.reviewdb.client.Project.NameKey(project)); if (!(quiet)) { importer.setErr(stderr); } com.googlesource.gerrit.plugins.importer.ImportStatistic stats = importer.apply(new com.google.gerrit.server.config.ConfigResource(), input); stdout.print(((""Created Changes: "" + (stats.numChangesCreated)) + ""\n"")); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }",7aa11e2915e6a5c0e528b555225fbb1029bb734a,"@java.lang.Override protected void run() throws com.google.gerrit.common.errors.NoSuchAccountException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gerrit.server.update.UpdateException, com.google.gerrit.server.validators.ValidationException, com.google.gwtorm.server.OrmException, com.googlesource.gerrit.plugins.importer.UnloggedFailure, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { com.googlesource.gerrit.plugins.importer.ImportProject.Input input = new com.googlesource.gerrit.plugins.importer.ImportProject.Input(); input.from = url; input.name = name; input.user = user; input.pass = com.googlesource.gerrit.plugins.importer.PasswordUtil.readPassword(in, pass); if (!(com.google.common.base.Strings.isNullOrEmpty(parent))) { input.parent = parent; } try { com.googlesource.gerrit.plugins.importer.ImportProject importer = importProjectFactory.create(new com.google.gerrit.reviewdb.client.Project.NameKey(project)); if (!(quiet)) { importer.setErr(stderr); } com.googlesource.gerrit.plugins.importer.ImportStatistic stats = importer.apply(new com.google.gerrit.server.config.ConfigResource(), input); stdout.print(((""Created Changes: "" + (stats.numChangesCreated)) + ""\n"")); } catch (com.google.gerrit.server.permissions.PermissionBackendException | com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }",7a749c5f8ecea6aa9225c9b0f315f35d11fa1d8e,"@java.lang.Override protected void run() throws com.google.gerrit.common.errors.NoSuchAccountException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gerrit.server.update.UpdateException, com.google.gerrit.server.validators.ValidationException, com.google.gwtorm.server.OrmException, com.googlesource.gerrit.plugins.importer.UnloggedFailure, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { com.googlesource.gerrit.plugins.importer.ImportProject.Input input = new com.googlesource.gerrit.plugins.importer.ImportProject.Input(); input.from = url; input.name = name; input.user = user; input.pass = com.googlesource.gerrit.plugins.importer.PasswordUtil.readPassword(in, pass); if (!(com.google.common.base.Strings.isNullOrEmpty(parent))) { input.parent = parent; } try { com.googlesource.gerrit.plugins.importer.ImportProject importer = importProjectFactory.create(new com.google.gerrit.reviewdb.client.Project.NameKey(project)); if (!(quiet)) { importer.setErr(stderr); } com.googlesource.gerrit.plugins.importer.ImportStatistic stats = importer.apply(new com.google.gerrit.server.config.ConfigResource(), input); stdout.print(((""Created Changes: "" + (stats.numChangesCreated)) + ""\n"")); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }",67bedb1a87555d2c8166d262e891aebeeb66a683,2017-09-21 18:36:50,2
127018,java_com_google_gitiles_doc_html_HtmlBuilder.java,"public static boolean isValidHttpUri(java.lang.String val) { return (((val.startsWith(""https://"")) || (val.startsWith(""http://""))) || (val.startsWith(""//""))) && (com.google.gitiles.doc.html.HtmlBuilder.URI.getValueFilter().matcher(val).find()); }",bc8b810eea302ac6b4da29be59d3561808719626,"public static boolean isValidHttpUri(java.lang.String val) { return ((((val.startsWith(""https://"")) || (val.startsWith(""http://""))) || (val.startsWith(""mailto:""))) || (val.startsWith(""//""))) && (com.google.gitiles.doc.html.HtmlBuilder.URI.getValueFilter().matcher(val).find()); }",882d09a825b0d5c58de1559bf07a1d95345bda60,"public static boolean isValidHttpUri(java.lang.String val) { return (((val.startsWith(""https://"")) || (val.startsWith(""http://""))) || (val.startsWith(""//""))) && (com.google.gitiles.doc.html.HtmlBuilder.URI.getValueFilter().matcher(val).find()); }",bc8b810eea302ac6b4da29be59d3561808719626,2017-09-21 23:57:57,2
122271,gerrit-server_src_main_java_com_google_gerrit_server_account_GroupIncludeCacheImpl.java,"@java.lang.Override public com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID> load(com.google.gerrit.reviewdb.client.AccountGroup.UUID key) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { return groups.getParentGroups(db, key).map(groupCache::get).flatMap(Streams::stream).map(InternalGroup::getGroupUUID).collect(toImmutableList()); } }",8c2f51969d0139d40ae5f756d3aa8f4288a44751,"@java.lang.Override public com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID> load(com.google.gerrit.reviewdb.client.AccountGroup.UUID key) throws com.google.gwtorm.server.OrmException { java.util.stream.Stream<com.google.gerrit.server.group.InternalGroup> internalGroupStream; if (groupIndexProvider.get().getSchema().hasField(GroupField.SUBGROUPS)) { internalGroupStream = groupQueryProvider.get().bySubgroup(key).stream(); } else { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { internalGroupStream = com.google.gerrit.server.group.Groups.getParentGroupsFromReviewDb(db, key).map(groupCache::get).flatMap(Streams::stream); } } return internalGroupStream.map(InternalGroup::getGroupUUID).collect(toImmutableList()); }",38fe38a74501d3afe0085efd7492fb7ba3fe0209,"@java.lang.Override public com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID> load(com.google.gerrit.reviewdb.client.AccountGroup.UUID key) throws com.google.gwtorm.server.OrmException { java.util.stream.Stream<com.google.gerrit.server.group.InternalGroup> internalGroupStream; if (groupIndexProvider.get().getSchema().hasField(GroupField.SUBGROUP)) { internalGroupStream = groupQueryProvider.get().bySubgroup(key).stream(); } else { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { internalGroupStream = com.google.gerrit.server.group.Groups.getParentGroupsFromReviewDb(db, key).map(groupCache::get).flatMap(Streams::stream); } } return internalGroupStream.map(InternalGroup::getGroupUUID).collect(toImmutableList()); }",a12c880626b849343dccacee8b76ed00b15b8ff8,2017-09-22 08:48:54,10
121014,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test public void getGroup() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup adminGroup = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""Administrators"")); testGetGroup(adminGroup.getGroupUUID().get(), adminGroup); testGetGroup(adminGroup.getName(), adminGroup); testGetGroup(adminGroup.getId().get(), adminGroup); }",1d4f3e9ebcd1abc3c52b8704299cb66af8987cc5,"@org.junit.Test public void getGroup() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup adminGroup = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""Administrators"")).orElse(null); testGetGroup(adminGroup.getGroupUUID().get(), adminGroup); testGetGroup(adminGroup.getName(), adminGroup); testGetGroup(adminGroup.getId().get(), adminGroup); }",fa29009b470ec738e815bd75200d2e88aa25646c,"@org.junit.Test public void getGroup() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup adminGroup = getFromCache(""Administrators""); testGetGroup(adminGroup.getGroupUUID().get(), adminGroup); testGetGroup(adminGroup.getName(), adminGroup); testGetGroup(adminGroup.getId().get(), adminGroup); }",e3b7c862a0a4d6c8e0658fc54994982296c46203,2017-09-22 08:48:54,13
128631,gerrit-server_src_test_java_com_google_gerrit_server_project_RefControlTest.java,"@org.junit.Test public void branchDelegation2() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, ""refs/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, ""refs/heads/x/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, fixers, ""refs/heads/x/y/*""); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.OWNER, ""refs/heads/x/y/*""); com.google.gerrit.server.project.ProjectControl uDev = user(local, com.google.gerrit.server.project.Util.DEVS); assertNotOwner(uDev); assertOwnerAnyRef(uDev); assertOwner(""refs/heads/x/*"", uDev); assertOwner(""refs/heads/x/y"", uDev); assertOwner(""refs/heads/x/y/*"", uDev); assertNotOwner(""refs/*"", uDev); assertNotOwner(""refs/heads/master"", uDev); com.google.gerrit.server.project.ProjectControl uFix = user(local, fixers); assertNotOwner(uFix); assertOwnerAnyRef(uFix); assertOwner(""refs/heads/x/y/*"", uFix); assertOwner(""refs/heads/x/y/bar"", uFix); assertNotOwner(""refs/heads/x/*"", uFix); assertNotOwner(""refs/heads/x/y"", uFix); assertNotOwner(""refs/*"", uFix); assertNotOwner(""refs/heads/master"", uFix); }",055d618655f852e00ea647ea8f751712f457df7f,"@org.junit.Test public void branchDelegation2() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, ""refs/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, ""refs/heads/x/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, fixers, ""refs/heads/x/y/*""); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.OWNER, ""refs/heads/x/y/*""); com.google.gerrit.server.project.ProjectControl uDev = user(local, com.google.gerrit.server.project.Util.DEVS); assertNotOwner(uDev); assertOwner(""refs/heads/x/*"", uDev); assertOwner(""refs/heads/x/y"", uDev); assertOwner(""refs/heads/x/y/*"", uDev); assertNotOwner(""refs/*"", uDev); assertNotOwner(""refs/heads/master"", uDev); com.google.gerrit.server.project.ProjectControl uFix = user(local, fixers); assertNotOwner(uFix); assertOwner(""refs/heads/x/y/*"", uFix); assertOwner(""refs/heads/x/y/bar"", uFix); assertNotOwner(""refs/heads/x/*"", uFix); assertNotOwner(""refs/heads/x/y"", uFix); assertNotOwner(""refs/*"", uFix); assertNotOwner(""refs/heads/master"", uFix); }",32874ae6a689dd0ef497d60145aeb032f5c5cab5,"@org.junit.Test public void branchDelegation2() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, ""refs/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, ""refs/heads/x/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, fixers, ""refs/heads/x/y/*""); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.OWNER, ""refs/heads/x/y/*""); com.google.gerrit.server.project.ProjectControl uDev = user(local, com.google.gerrit.server.project.Util.DEVS); assertNotOwner(uDev); assertOwnerAnyRef(uDev); assertOwner(""refs/heads/x/*"", uDev); assertOwner(""refs/heads/x/y"", uDev); assertOwner(""refs/heads/x/y/*"", uDev); assertNotOwner(""refs/*"", uDev); assertNotOwner(""refs/heads/master"", uDev); com.google.gerrit.server.project.ProjectControl uFix = user(local, fixers); assertNotOwner(uFix); assertOwnerAnyRef(uFix); assertOwner(""refs/heads/x/y/*"", uFix); assertOwner(""refs/heads/x/y/bar"", uFix); assertNotOwner(""refs/heads/x/*"", uFix); assertNotOwner(""refs/heads/x/y"", uFix); assertNotOwner(""refs/*"", uFix); assertNotOwner(""refs/heads/master"", uFix); }",055d618655f852e00ea647ea8f751712f457df7f,2017-09-25 12:24:45,5
128631,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectControl.java,private boolean canAddRefs() { return (canPerformOnAnyRef(Permission.CREATE)) || (isOwnerAnyRef()); },19cd5096c4285ae30f812df10759a9173a12b394,private boolean canAddRefs() { return (canPerformOnAnyRef(Permission.CREATE)) || (isOwner()); },2dc3351a841673ba33b4f2a6593e2c11ae6b1bf4,private boolean canAddRefs() { return (canPerformOnAnyRef(Permission.CREATE)) || (isOwnerAnyRef()); },19cd5096c4285ae30f812df10759a9173a12b394,2017-09-25 12:24:45,5
128631,gerrit-server_src_test_java_com_google_gerrit_server_project_RefControlTest.java,"@org.junit.Test public void branchDelegation1() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, ""refs/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, ""refs/heads/x/*""); com.google.gerrit.server.project.ProjectControl uDev = user(local, com.google.gerrit.server.project.Util.DEVS); assertNotOwner(uDev); assertOwnerAnyRef(uDev); assertOwner(""refs/heads/x/*"", uDev); assertOwner(""refs/heads/x/y"", uDev); assertOwner(""refs/heads/x/y/*"", uDev); assertNotOwner(""refs/*"", uDev); assertNotOwner(""refs/heads/master"", uDev); }",90c7aee1d9f2bcc0d5cc0e69bd68ee6efd9f853e,"@org.junit.Test public void branchDelegation1() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, ""refs/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, ""refs/heads/x/*""); com.google.gerrit.server.project.ProjectControl uDev = user(local, com.google.gerrit.server.project.Util.DEVS); assertNotOwner(uDev); assertOwner(""refs/heads/x/*"", uDev); assertOwner(""refs/heads/x/y"", uDev); assertOwner(""refs/heads/x/y/*"", uDev); assertNotOwner(""refs/*"", uDev); assertNotOwner(""refs/heads/master"", uDev); }",1592426d5c4669c5ffc1755f5c0f2443ef161ca5,"@org.junit.Test public void branchDelegation1() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, ""refs/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, ""refs/heads/x/*""); com.google.gerrit.server.project.ProjectControl uDev = user(local, com.google.gerrit.server.project.Util.DEVS); assertNotOwner(uDev); assertOwnerAnyRef(uDev); assertOwner(""refs/heads/x/*"", uDev); assertOwner(""refs/heads/x/y"", uDev); assertOwner(""refs/heads/x/y/*"", uDev); assertNotOwner(""refs/*"", uDev); assertNotOwner(""refs/heads/master"", uDev); }",90c7aee1d9f2bcc0d5cc0e69bd68ee6efd9f853e,2017-09-25 12:24:45,5
128112,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,void cacheVisibleTo(com.google.gerrit.server.project.ChangeControl ctl) { visibleTo = ctl.getUser(); changeControl = ctl; },561ebc63ee0786013df7c5f41f2deb41fee93e15,void cacheVisibleTo(com.google.gerrit.server.project.ChangeControl ctl) { visibleTo = ctl.getUser(); },606dcbb7a8fc22bfa223cdb62062d6201c5e8bb1,void cacheVisibleTo(com.google.gerrit.server.project.ChangeControl ctl) { visibleTo = ctl.getUser(); changeControl = ctl; },561ebc63ee0786013df7c5f41f2deb41fee93e15,2017-09-25 12:28:46,5
128112,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,"public java.lang.Boolean isMergeable() throws com.google.gwtorm.server.OrmException { if ((mergeable) == null) { com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { return null; } if ((c.getStatus()) == (Change.Status.MERGED)) { mergeable = true; } else if ((c.getStatus()) == (Change.Status.ABANDONED)) { return null; } else if (c.isWorkInProgress()) { return null; } else { if (!(lazyLoad)) { return null; } com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); try { if ((ps == null) || (!(changeControl().isPatchVisible(ps, db)))) { return null; } } catch (com.google.gwtorm.server.OrmException e) { if ((e.getCause()) instanceof com.google.gerrit.server.project.NoSuchChangeException) { return null; } throw e; } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project())) { org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(c.getDest().get()); com.google.gerrit.common.data.SubmitTypeRecord str = submitTypeRecord(); if (!(str.isOk())) { return false; } java.lang.String mergeStrategy = mergeUtilFactory.create(projectCache.get(project())).mergeStrategyName(); mergeable = mergeabilityCache.get(org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()), ref, str.type, mergeStrategy, c.getDest(), repo); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } } } return mergeable; }",b899d2197379efdfe679501346f66d9f66f30a23,"public java.lang.Boolean isMergeable() throws com.google.gwtorm.server.OrmException { if ((mergeable) == null) { com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { return null; } if ((c.getStatus()) == (Change.Status.MERGED)) { mergeable = true; } else if ((c.getStatus()) == (Change.Status.ABANDONED)) { return null; } else if (c.isWorkInProgress()) { return null; } else { if (!(lazyLoad)) { return null; } com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); try { if ((ps == null) || (!(changeControlFactory.controlFor(db, change(), userFactory.create(c.getOwner())).isPatchVisible(ps, db)))) { return null; } } catch (com.google.gwtorm.server.OrmException e) { if ((e.getCause()) instanceof com.google.gerrit.server.project.NoSuchChangeException) { return null; } throw e; } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project())) { org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(c.getDest().get()); com.google.gerrit.common.data.SubmitTypeRecord str = submitTypeRecord(); if (!(str.isOk())) { return false; } java.lang.String mergeStrategy = mergeUtilFactory.create(projectCache.get(project())).mergeStrategyName(); mergeable = mergeabilityCache.get(org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()), ref, str.type, mergeStrategy, c.getDest(), repo); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } } } return mergeable; }",466104d1f157b42dd2ac91f7295c7c4f4e327847,"public java.lang.Boolean isMergeable() throws com.google.gwtorm.server.OrmException { if ((mergeable) == null) { com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { return null; } if ((c.getStatus()) == (Change.Status.MERGED)) { mergeable = true; } else if ((c.getStatus()) == (Change.Status.ABANDONED)) { return null; } else if (c.isWorkInProgress()) { return null; } else { if (!(lazyLoad)) { return null; } com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); try { if ((ps == null) || (!(changeControl().isPatchVisible(ps, db)))) { return null; } } catch (com.google.gwtorm.server.OrmException e) { if ((e.getCause()) instanceof com.google.gerrit.server.project.NoSuchChangeException) { return null; } throw e; } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project())) { org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(c.getDest().get()); com.google.gerrit.common.data.SubmitTypeRecord str = submitTypeRecord(); if (!(str.isOk())) { return false; } java.lang.String mergeStrategy = mergeUtilFactory.create(projectCache.get(project())).mergeStrategyName(); mergeable = mergeabilityCache.get(org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()), ref, str.type, mergeStrategy, c.getDest(), repo); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } } } return mergeable; }",b899d2197379efdfe679501346f66d9f66f30a23,2017-09-25 12:28:46,5
128112,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeJson.java,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> revisions(com.google.gerrit.server.query.change.ChangeData cd, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> map, java.util.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId, com.google.gerrit.extensions.common.ChangeInfo changeInfo) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> res = new java.util.LinkedHashMap<>(); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { for (com.google.gerrit.reviewdb.client.PatchSet in : map.values()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = in.getId(); boolean want = false; if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { want = true; } else if (limitToPsId.isPresent()) { want = id.equals(limitToPsId.get()); } else { want = id.equals(cd.change().currentPatchSetId()); } if (want && (cd.changeControl().isPatchVisible(in, db.get()))) { res.put(in.getRevision().get(), toRevisionInfo(cd, in, repo, rw, false, changeInfo)); } } return res; } }",fb6d1eeab419a5fcfcf3212c98e1c906618fc7f9,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> revisions(com.google.gerrit.server.query.change.ChangeData cd, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> map, java.util.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId, com.google.gerrit.extensions.common.ChangeInfo changeInfo) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> res = new java.util.LinkedHashMap<>(); com.google.gerrit.server.project.ChangeControl ctl = changeControlFactory.controlFor(db.get(), cd.change(), userProvider.get()); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { for (com.google.gerrit.reviewdb.client.PatchSet in : map.values()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = in.getId(); boolean want = false; if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { want = true; } else if (limitToPsId.isPresent()) { want = id.equals(limitToPsId.get()); } else { want = id.equals(cd.change().currentPatchSetId()); } if (want && (ctl.isPatchVisible(in, db.get()))) { res.put(in.getRevision().get(), toRevisionInfo(cd, in, repo, rw, false, changeInfo)); } } return res; } }",680cec8f73effb42aacd4c3e32acdd889b2af681,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> revisions(com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.server.query.change.ChangeData cd, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> map, java.util.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId, com.google.gerrit.extensions.common.ChangeInfo changeInfo) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> res = new java.util.LinkedHashMap<>(); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { for (com.google.gerrit.reviewdb.client.PatchSet in : map.values()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = in.getId(); boolean want = false; if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { want = true; } else if (limitToPsId.isPresent()) { want = id.equals(limitToPsId.get()); } else { want = id.equals(cd.change().currentPatchSetId()); } if (want && (ctl.isPatchVisible(in, db.get()))) { res.put(in.getRevision().get(), toRevisionInfo(cd, in, repo, rw, false, changeInfo)); } } return res; } }",24f975f6ace41fd7420ddef6111fa67ab6787355,2017-09-25 12:28:46,5
128112,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeJson.java,"private java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages(com.google.gerrit.server.query.change.ChangeData cd, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> map) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.ChangeMessage> messages = cmUtil.byChange(db.get(), cd.notes()); if (messages.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.extensions.common.ChangeMessageInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(messages.size()); for (com.google.gerrit.reviewdb.client.ChangeMessage message : messages) { com.google.gerrit.reviewdb.client.PatchSet.Id patchNum = message.getPatchSetId(); com.google.gerrit.reviewdb.client.PatchSet ps = (patchNum != null) ? map.get(patchNum) : null; if ((patchNum == null) || (cd.changeControl().isPatchVisible(ps, db.get()))) { com.google.gerrit.extensions.common.ChangeMessageInfo cmi = new com.google.gerrit.extensions.common.ChangeMessageInfo(); cmi.id = message.getKey().get(); cmi.author = accountLoader.get(message.getAuthor()); cmi.date = message.getWrittenOn(); cmi.message = message.getMessage(); cmi.tag = message.getTag(); cmi._revisionNumber = (patchNum != null) ? patchNum.get() : null; com.google.gerrit.reviewdb.client.Account.Id realAuthor = message.getRealAuthor(); if (realAuthor != null) { cmi.realAuthor = accountLoader.get(realAuthor); } result.add(cmi); } } return result; }",3e71b33a936508272828928727d455fee6115920,"private java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages(com.google.gerrit.server.query.change.ChangeData cd, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> map) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.ChangeMessage> messages = cmUtil.byChange(db.get(), cd.notes()); if (messages.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.extensions.common.ChangeMessageInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(messages.size()); com.google.gerrit.server.project.ChangeControl ctl = changeControlFactory.controlFor(db.get(), cd.change(), userProvider.get()); for (com.google.gerrit.reviewdb.client.ChangeMessage message : messages) { com.google.gerrit.reviewdb.client.PatchSet.Id patchNum = message.getPatchSetId(); com.google.gerrit.reviewdb.client.PatchSet ps = (patchNum != null) ? map.get(patchNum) : null; if ((patchNum == null) || (ctl.isPatchVisible(ps, db.get()))) { com.google.gerrit.extensions.common.ChangeMessageInfo cmi = new com.google.gerrit.extensions.common.ChangeMessageInfo(); cmi.id = message.getKey().get(); cmi.author = accountLoader.get(message.getAuthor()); cmi.date = message.getWrittenOn(); cmi.message = message.getMessage(); cmi.tag = message.getTag(); cmi._revisionNumber = (patchNum != null) ? patchNum.get() : null; com.google.gerrit.reviewdb.client.Account.Id realAuthor = message.getRealAuthor(); if (realAuthor != null) { cmi.realAuthor = accountLoader.get(realAuthor); } result.add(cmi); } } return result; }",3ad00d6bcb4032072b1db28c6b9842a8f3e31309,"private java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages(com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.server.query.change.ChangeData cd, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> map) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.ChangeMessage> messages = cmUtil.byChange(db.get(), cd.notes()); if (messages.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.extensions.common.ChangeMessageInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(messages.size()); for (com.google.gerrit.reviewdb.client.ChangeMessage message : messages) { com.google.gerrit.reviewdb.client.PatchSet.Id patchNum = message.getPatchSetId(); com.google.gerrit.reviewdb.client.PatchSet ps = (patchNum != null) ? map.get(patchNum) : null; if ((patchNum == null) || (ctl.isPatchVisible(ps, db.get()))) { com.google.gerrit.extensions.common.ChangeMessageInfo cmi = new com.google.gerrit.extensions.common.ChangeMessageInfo(); cmi.id = message.getKey().get(); cmi.author = accountLoader.get(message.getAuthor()); cmi.date = message.getWrittenOn(); cmi.message = message.getMessage(); cmi.tag = message.getTag(); cmi._revisionNumber = (patchNum != null) ? patchNum.get() : null; com.google.gerrit.reviewdb.client.Account.Id realAuthor = message.getRealAuthor(); if (realAuthor != null) { cmi.realAuthor = accountLoader.get(realAuthor); } result.add(cmi); } } return result; }",d8027a008468d5031b5d6ad169b9957859d81c21,2017-09-25 12:28:46,5
129150,gerrit-server_src_main_java_com_google_gerrit_server_query_change_QueryChanges.java,"private java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> query() throws com.google.gerrit.index.query.QueryParseException, com.google.gwtorm.server.OrmException { if (imp.isDisabled()) { throw new com.google.gerrit.index.query.QueryParseException(""query disabled""); } if (((queries) == null) || (queries.isEmpty())) { queries = java.util.Collections.singletonList(""status:open""); } else if ((queries.size()) > 10) { throw new com.google.gerrit.index.query.QueryParseException(""limit of 10 queries""); } int cnt = queries.size(); java.util.List<com.google.gerrit.index.query.QueryResult<com.google.gerrit.server.query.change.ChangeData>> results = imp.query(qb.parse(queries)); com.google.gerrit.server.change.ChangeJson cjson = json.create(options); cjson.setPluginDefinedAttributesFactory(this.imp); java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> res = cjson.lazyLoad(com.google.gerrit.server.query.change.QueryChanges.containsAnyOf(options, ChangeJson.REQUIRE_LAZY_LOAD)).formatQueryResults(results); for (int n = 0; n < cnt; n++) { java.util.List<com.google.gerrit.extensions.common.ChangeInfo> info = res.get(n); if (results.get(n).more()) { info.get(((info.size()) - 1))._moreChanges = true; } } return res; }",c613c68105de534f1186ded7dd48aeadf7075022,"private java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> query() throws com.google.gerrit.index.query.QueryParseException, com.google.gwtorm.server.OrmException { if (imp.isDisabled()) { throw new com.google.gerrit.index.query.QueryParseException(""query disabled""); } if (((queries) == null) || (queries.isEmpty())) { queries = java.util.Collections.singletonList(""status:open""); } else if ((queries.size()) > 10) { throw new com.google.gerrit.index.query.QueryParseException(""limit of 10 queries""); } int cnt = queries.size(); java.util.List<com.google.gerrit.index.query.QueryResult<com.google.gerrit.server.query.change.ChangeData>> results = imp.query(qb.parse(queries)); com.google.gerrit.server.change.ChangeJson cjson = json.create(options); cjson.setPluginDefinedAttributesFactory(this.imp); java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> res = cjson.lazyLoad(com.google.gerrit.server.query.change.QueryChanges.containsAnyOf(options, ChangeJson.REQUIRE_LAZY_LOAD)).formatQueryResults(results); for (int n = 0; n < cnt; n++) { java.util.List<com.google.gerrit.extensions.common.ChangeInfo> info = res.get(n); if ((results.get(n).more()) && (!(info.isEmpty()))) { info.get(((info.size()) - 1))._moreChanges = true; } } return res; }",2281017c89aa1aebfdbcb4027a769dcc652a7f72,"private java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> query() throws com.google.gerrit.index.query.QueryParseException, com.google.gwtorm.server.OrmException { if (imp.isDisabled()) { throw new com.google.gerrit.index.query.QueryParseException(""query disabled""); } if (((queries) == null) || (queries.isEmpty())) { queries = java.util.Collections.singletonList(""status:open""); } else if ((queries.size()) > 10) { throw new com.google.gerrit.index.query.QueryParseException(""limit of 10 queries""); } int cnt = queries.size(); java.util.List<com.google.gerrit.index.query.QueryResult<com.google.gerrit.server.query.change.ChangeData>> results = imp.query(qb.parse(queries)); com.google.gerrit.server.change.ChangeJson cjson = json.create(options); cjson.setPluginDefinedAttributesFactory(this.imp); java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> res = cjson.lazyLoad(com.google.gerrit.server.query.change.QueryChanges.containsAnyOf(options, ChangeJson.REQUIRE_LAZY_LOAD)).formatQueryResults(results); for (int n = 0; n < cnt; n++) { java.util.List<com.google.gerrit.extensions.common.ChangeInfo> info = res.get(n); if ((results.get(n).more()) && (!(info.isEmpty()))) { com.google.common.collect.Iterables.getLast(info)._moreChanges = true; } } return res; }",fbd4bc49c539c36108ce8c0a12b0e7fa9938df35,2017-09-26 08:43:35,2
129530,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_160.java,,,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { try { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { org.eclipse.jgit.lib.ProgressMonitor pm = new org.eclipse.jgit.lib.TextProgressMonitor(); pm.beginTask(""Removing \""My Drafts\"" menu items"", ProgressMonitor.UNKNOWN); for (com.google.gerrit.reviewdb.client.Account.Id id : com.google.gerrit.server.account.Accounts.allIds(repo)) { if (removeMyDrafts(repo, id)) { pm.update(1); } } pm.endTask(); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(""Removing \""My Drafts\"" menu items failed"", e); } }",a45c8163f2dd4109ad7f427416b9a61f4072ec80,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { try { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { org.eclipse.jgit.lib.ProgressMonitor pm = new org.eclipse.jgit.lib.TextProgressMonitor(); pm.beginTask(""Removing \""My Drafts\"" menu items"", ProgressMonitor.UNKNOWN); for (com.google.gerrit.reviewdb.client.Account.Id id : ((java.lang.Iterable<com.google.gerrit.reviewdb.client.Account.Id>) (com.google.gerrit.server.account.Accounts.readUserRefs(repo)::iterator))) { if (removeMyDrafts(repo, id)) { pm.update(1); } } pm.endTask(); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(""Removing \""My Drafts\"" menu items failed"", e); } }",0e7322093388cfce6b5ce18696e38f44ba6a1676,2017-09-30 14:29:48,6
121593,src_main_java_com_googlesource_gerrit_plugins_events_fsstore_Nfs.java,,,public static void throwIfNotStaleFileHandle(java.io.IOException e) throws java.io.IOException { if (!(com.googlesource.gerrit.plugins.events.fsstore.Nfs.isStaleFileHandle(e))) { throw e; } },16ac275ecd22c5e7d1e853b470b1a1c712da2b0f,public static <T extends java.lang.Throwable> void throwIfNotStaleFileHandle(T e) throws T { if (!(com.googlesource.gerrit.plugins.events.fsstore.Nfs.isStaleFileHandleInCausalChain(e))) { throw e; } },c8b2cd1c71fbe8dbb2b3a3675bd758fd1cf85ff2,2017-09-30 15:18:10,3
121594,src_main_java_com_googlesource_gerrit_plugins_events_fsstore_Nfs.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static void throwIfNotStaleFileHandle(java.nio.file.DirectoryIteratorException e) { if (!(com.googlesource.gerrit.plugins.events.fsstore.Nfs.isStaleFileHandle(e.getCause()))) { throw e; } },9baff6a8988439e5a68eb11d80608319259eeead,public static boolean isStaleFileHandleInCausalChain(java.lang.Throwable throwable) { while (throwable != null) { if ((throwable instanceof java.io.IOException) && (com.googlesource.gerrit.plugins.events.fsstore.Nfs.isStaleFileHandle(((java.io.IOException) (throwable))))) { return true; } throwable = throwable.getCause(); } return false; },a84d81d79128426c5af783f50342a9d6af110159,2017-09-30 15:20:55,3
127230,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_project_DashboardIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @org.junit.Ignore public void cannotUseInheritedWithNonDefault() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""inherited flag can only be used with default""); gApi.projects().name(project.get()).dashboard(""dashboard"").get(true); }",8f554d6064985d34bc5745c9b68568eb10110513,"@org.junit.Test public void cannotGetDashboardWithInheritedForNonDefault() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DashboardInfo info = createDashboard(DashboardsCollection.DEFAULT_DASHBOARD_NAME, ""test""); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""inherited flag can only be used with default""); gApi.projects().name(project.get()).dashboard(info.id).get(true); }",9d3899458007cc5e14f91753e85e1b466ffb8e47,2017-10-01 12:16:53,4
127230,gerrit-server_src_main_java_com_google_gerrit_server_project_SetDashboard.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.DashboardResource resource, com.google.gerrit.server.project.SetDashboard.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { return defaultSetter.get().apply(resource, input); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }",9d27ea01644c84f1b4952b235a26e25825e33cde,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.DashboardResource resource, com.google.gerrit.server.project.SetDashboard.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { return defaultSetter.get().apply(resource, input); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }",a7773f50f2750c7d8aac9474c83b494eb8f379ef,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.DashboardResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { return defaultSetter.get().apply(resource, input); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }",a88571bd4c1598004c1ca9097f89903f1a73c9ec,2017-10-01 12:16:53,4
111551,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountManager.java,"public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, java.io.IOException { who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.externalids.ExternalId id = externalIds.get(who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException(""Authentication error, account inactive""); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.server.account.AccountException(""Authentication error"", e); } }",fe17b426d3868c656b748bf3f3c97b502e2e06b3,"public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, java.io.IOException { com.google.gerrit.server.IdentifiedUser user; who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.externalids.ExternalId id = externalIds.get(who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (supportAutomaticAccountActivityUpdate.get()) { user = genericUserFactory.create(act.getId()); if ((who.isActive()) && (!(act.isActive()))) { try { setInactiveFlag.activate(user); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.server.account.AccountException(""Unable to activate account."", e); } } else if ((!(who.isActive())) && (act.isActive())) { try { setInactiveFlag.deactivate(user); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw new com.google.gerrit.server.account.AccountException(""Unable to deactivate account."", e); } } } act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException(""Authentication error, account inactive""); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.server.account.AccountException(""Authentication error"", e); } }",d9f0491fbd9fd4f0a0de246bad63409493f68663,"public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, java.io.IOException { who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.externalids.ExternalId id = externalIds.get(who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if ((autoUpdateAccountActiveStatus) && (who.authProvidesAccountActiveStatus())) { if ((who.isActive()) && (!(act.isActive()))) { try { setInactiveFlag.activate(act.getId()); act = byIdCache.get(id.accountId()).getAccount(); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.server.account.AccountException((""Unable to activate account "" + (act.getId())), e); } } else if ((!(who.isActive())) && (act.isActive())) { try { setInactiveFlag.deactivate(act.getId()); act = byIdCache.get(id.accountId()).getAccount(); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw new com.google.gerrit.server.account.AccountException((""Unable to deactivate account "" + (act.getId())), e); } } } if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException(""Authentication error, account inactive""); } update(who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.server.account.AccountException(""Authentication error"", e); } }",5fea4cad8658e198d37ce8dc84d7b3bbdf8846dc,2017-10-01 13:31:04,20
114470,gerrit-server_src_main_java_com_google_gerrit_server_account_Realm.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"default java.lang.Boolean isActive(java.lang.String username) throws com.google.gerrit.server.account.AccountException, javax.naming.NamingException, javax.security.auth.login.LoginException { return true; }",2bea15ae6b5d37434a2daacd43db10dc35e24f1e,"default boolean isActive(@java.lang.SuppressWarnings(""unused"") java.lang.String username) throws com.google.gerrit.server.account.AccountException, javax.naming.NamingException, javax.security.auth.login.LoginException { return true; }",1b2843beed2ce75215c2cecef66ac176e0d175eb,2017-10-01 13:31:04,21
114470,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountDeactivator.java,,,"@java.lang.Override public void start() { if (!(supportAutomaticAccountActivityUpdate)) { return; } com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig(); long interval = scheduleConfig.getInterval(); long delay = scheduleConfig.getInitialDelay(); if ((delay == (MISSING_CONFIG)) && (interval == (MISSING_CONFIG))) { com.google.gerrit.server.account.AccountDeactivator.log.info(""Ignoring missing accountDeactivator schedule configuration""); } else if ((delay < 0) || (interval <= 0)) { com.google.gerrit.server.account.AccountDeactivator.log.warn(java.lang.String.format(""Ignoring invalid accountDeactivator schedule configuration: %s"", scheduleConfig)); } else { @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(deactivator, delay, interval, java.util.concurrent.TimeUnit.MILLISECONDS); } }",8870db4a7f8985d0a9a5a51cf67833772b617d1c,"@java.lang.Override public void start() { if (!(supportAutomaticAccountActivityUpdate)) { return; } long interval = scheduleConfig.getInterval(); long delay = scheduleConfig.getInitialDelay(); if ((delay == (MISSING_CONFIG)) && (interval == (MISSING_CONFIG))) { com.google.gerrit.server.account.AccountDeactivator.log.info(""Ignoring missing accountDeactivator schedule configuration""); } else if ((delay < 0) || (interval <= 0)) { com.google.gerrit.server.account.AccountDeactivator.log.warn(java.lang.String.format(""Ignoring invalid accountDeactivator schedule configuration: %s"", scheduleConfig)); } else { queue.getDefaultQueue().scheduleAtFixedRate(deactivator, delay, interval, java.util.concurrent.TimeUnit.MILLISECONDS); } }",0a2a637139af4a56732f9a4d5a9323fea72a8d97,2017-10-01 13:31:04,21
111551,gerrit-server_src_main_java_com_google_gerrit_server_account_AuthRequest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.lang.Boolean isActive() { return active; },5cf6e62800192840f30c5f03dbbcf7213d41c0ab,public boolean isActive() { return active; },2eee6781b2cae64e0f95dcbecc9d3a352cd5f8c1,2017-10-01 13:31:04,20
114470,gerrit-server_src_main_java_com_google_gerrit_server_auth_ldap_LdapRealm.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.lang.Boolean isActive(java.lang.String username) throws com.google.gerrit.server.account.AccountException, javax.naming.NamingException, javax.security.auth.login.LoginException { try { final javax.naming.directory.DirContext ctx = helper.open(); final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema = helper.getSchema(ctx); helper.findAccount(schema, ctx, username, false); } catch (com.google.gerrit.server.auth.NoSuchUserException e) { return false; } return true; }",c88ef7af07440a46375200d8a55b09b481f6dea9,"@java.lang.Override public boolean isActive(java.lang.String username) throws com.google.gerrit.server.account.AccountException, javax.naming.NamingException, javax.security.auth.login.LoginException { try { javax.naming.directory.DirContext ctx = helper.open(); com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema = helper.getSchema(ctx); helper.findAccount(schema, ctx, username, false); } catch (com.google.gerrit.server.auth.NoSuchUserException e) { return false; } return true; }",040c157f045b0c08263b292b29de3701179f1002,2017-10-01 13:31:04,21
111551,gerrit-server_src_main_java_com_google_gerrit_server_account_SetInactiveFlag.java,,,"public com.google.gerrit.extensions.restapi.Response<?> deactivate(com.google.gerrit.server.IdentifiedUser user) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.concurrent.atomic.AtomicBoolean alreadyInactive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().atomicUpdate(dbProvider.get(), user.getAccountId(), ( a) -> { if (!(a.isActive())) { alreadyInactive.set(true); } else { a.setActive(false); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } if (alreadyInactive.get()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""account not active""); } return com.google.gerrit.extensions.restapi.Response.none(); }",826172308329e2fe73c8cc1f03c595b5569e777f,"public com.google.gerrit.extensions.restapi.Response<?> deactivate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicBoolean alreadyInactive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, ( a) -> { if (!(a.isActive())) { alreadyInactive.set(true); } else { a.setActive(false); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } if (alreadyInactive.get()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""account not active""); } return com.google.gerrit.extensions.restapi.Response.none(); }",f282b3f6fdda9673ef823bbf1028d3e5ac7f9b28,2017-10-01 13:31:04,20
111551,gerrit-server_src_main_java_com_google_gerrit_server_account_SetInactiveFlag.java,,,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> activate(com.google.gerrit.server.IdentifiedUser user) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.concurrent.atomic.AtomicBoolean alreadyActive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().atomicUpdate(dbProvider.get(), user.getAccountId(), ( a) -> { if (a.isActive()) { alreadyActive.set(true); } else { a.setActive(true); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return alreadyActive.get() ? com.google.gerrit.extensions.restapi.Response.ok("""") : com.google.gerrit.extensions.restapi.Response.created(""""); }",d8714241ae46c90145723b2b30fcdcabac71e32b,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> activate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicBoolean alreadyActive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, ( a) -> { if (a.isActive()) { alreadyActive.set(true); } else { a.setActive(true); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return alreadyActive.get() ? com.google.gerrit.extensions.restapi.Response.ok("""") : com.google.gerrit.extensions.restapi.Response.created(""""); }",2f1fac69ea3bf3e8032e393f17514be5ec9f9e04,2017-10-01 13:31:04,20
111551,gerrit-server_src_main_java_com_google_gerrit_server_account_DeleteActive.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.DeleteActive.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((self.get()) == (rsrc.getUser())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""cannot deactivate own account""); } java.util.concurrent.atomic.AtomicBoolean alreadyInactive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().atomicUpdate(dbProvider.get(), rsrc.getUser().getAccountId(), ( a) -> { if (!(a.isActive())) { alreadyInactive.set(true); } else { a.setActive(false); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } if (alreadyInactive.get()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""account not active""); } return com.google.gerrit.extensions.restapi.Response.none(); }",bfaa59f98836aab826f8d20cd59059b214d29f24,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.DeleteActive.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((self.get()) == (rsrc.getUser())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""cannot deactivate own account""); } com.google.gerrit.server.account.SetInactiveFlag sif = new com.google.gerrit.server.account.SetInactiveFlag(dbProvider, accountsUpdate); return sif.deactivate(rsrc.getUser()); }",ff8049757f75f3a24bbe92d9641e3888e8135472,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.DeleteActive.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) == (rsrc.getUser())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""cannot deactivate own account""); } return setInactiveFlag.deactivate(rsrc.getUser().getAccountId()); }",754f025c0b742c372570728377e686a95d552f92,2017-10-01 13:31:04,20
111551,gerrit-server_src_main_java_com_google_gerrit_server_account_PutActive.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutActive.Input input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.concurrent.atomic.AtomicBoolean alreadyActive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().atomicUpdate(dbProvider.get(), rsrc.getUser().getAccountId(), ( a) -> { if (a.isActive()) { alreadyActive.set(true); } else { a.setActive(true); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return alreadyActive.get() ? com.google.gerrit.extensions.restapi.Response.ok("""") : com.google.gerrit.extensions.restapi.Response.created(""""); }",a47667fa5b9b0c92d8dbc1136b0b01241d5a3dfa,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutActive.Input input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.account.SetInactiveFlag sif = new com.google.gerrit.server.account.SetInactiveFlag(dbProvider, accountsUpdate); return sif.activate(rsrc.getUser()); }",a26c426ca838f8f35897114ce4b8f8d6904eae63,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutActive.Input input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return setInactiveFlag.activate(rsrc.getUser().getAccountId()); }",857f4a7e2933bd846c8bb4e7ec5ea9056145fd52,2017-10-01 13:31:04,20
114470,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountDeactivator.java,,,"@java.lang.Override public void run() { com.google.gerrit.server.account.AccountDeactivator.log.info(""Running account deactivations.""); try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { deactivationUtil.deactivateInactiveAccounts(); } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountDeactivator.log.error(""Failed to deactivate inactive accounts."", e); } }",ddc12da04847e99eebba5bc8df7dae9be1343caa,"@java.lang.Override public void run() { com.google.gerrit.server.account.AccountDeactivator.log.debug(""Running account deactivations""); try { int numberOfAccountsDeactivated = 0; for (com.google.gerrit.server.account.AccountState acc : accountQueryProvider.get().query(com.google.gerrit.server.query.account.AccountPredicates.isActive())) { com.google.gerrit.server.account.AccountDeactivator.log.debug((""processing account "" + (acc.getUserName()))); if (((acc.getUserName()) != null) && (!(realm.isActive(acc.getUserName())))) { sif.deactivate(acc.getAccount().getId()); com.google.gerrit.server.account.AccountDeactivator.log.debug((""deactivated accout "" + (acc.getUserName()))); numberOfAccountsDeactivated++; } } com.google.gerrit.server.account.AccountDeactivator.log.info(""Deactivations complete, {} account(s) were deactivated"", numberOfAccountsDeactivated); } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountDeactivator.log.error((""Failed to deactivate inactive accounts "" + (e.getMessage())), e); } }",ba4315295ed615a0d112f7ccf1f79575ef5ba438,2017-10-01 13:31:04,21
111551,gerrit-server_src_main_java_com_google_gerrit_server_account_AuthRequest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void isActive(java.lang.Boolean isActive) { this.active = isActive; },2cd2a2bb167549ea565837b9fa364fd4be139cc6,public void setActive(java.lang.Boolean isActive) { this.active = isActive; },97ca4efcf638f1db614c8b3c46c6dff80b61a5eb,2017-10-01 13:31:04,20
129873,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void cannotMarkChangeThatWasMarkedAsUnreviewedAsReviewed() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); setApiUser(user); gApi.changes().id(changeId).markAsReviewed(false); assertThat(gApi.changes().id(changeId).get().reviewed).isNull(); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(((((""The labels "" + (com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL)) + "" and "") + (com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL)) + "" are mutually exclusive. Only one of them can be set."")); gApi.accounts().self().setStars(changeId, new com.google.gerrit.extensions.api.changes.StarsInput(com.google.common.collect.ImmutableSet.of(((com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL) + ""/1"")))); }",f473752ea0c47e5889a8f9f3976b42da1f1dd1c4,"@org.junit.Test public void setReviewedAndUnreviewedLabelsForDifferentPatchSets() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); setApiUser(user); gApi.changes().id(changeId).markAsReviewed(true); assertThat(gApi.changes().id(changeId).get().reviewed).isTrue(); amendChange(changeId); assertThat(gApi.changes().id(changeId).get().reviewed).isNull(); gApi.changes().id(changeId).markAsReviewed(false); assertThat(gApi.changes().id(changeId).get().reviewed).isNull(); assertThat(gApi.accounts().self().getStars(changeId)).containsExactly((((com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL) + ""/"") + 1), (((com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL) + ""/"") + 2)); }",f1c78180a0aae98ae323bb27ba8f6cc244a8ba6e,2017-10-01 13:31:30,6
129873,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,"@org.junit.Test public void cannotMuteOwnChange() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""cannot mute own change""); gApi.changes().id(changeId).mute(true); }",04777a1d64af73db63778c8f8c0bf95ad30c9593,"@org.junit.Test public void cannotMarkChangeThatWasMarkedAsReviewedAsUnreviewed() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); setApiUser(user); gApi.changes().id(changeId).markAsReviewed(true); assertThat(gApi.changes().id(changeId).get().reviewed).isTrue(); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(((((""The labels "" + (com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL)) + "" and "") + (com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL)) + "" are mutually exclusive. Only one of them can be set."")); gApi.accounts().self().setStars(changeId, new com.google.gerrit.extensions.api.changes.StarsInput(com.google.common.collect.ImmutableSet.of(((com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL) + ""/1"")))); }",1cfdec4988ca9a7a1ab1286a4f42e493caa267cf,"@org.junit.Test public void cannotSetReviewedLabelForPatchSetThatAlreadyHasUnreviewedLabel() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); setApiUser(user); gApi.changes().id(changeId).markAsReviewed(false); assertThat(gApi.changes().id(changeId).get().reviewed).isNull(); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(((((((((""The labels "" + (com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL)) + ""/"") + 1) + "" and "") + (com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL)) + ""/"") + 1) + "" are mutually exclusive. Only one of them can be set."")); gApi.accounts().self().setStars(changeId, new com.google.gerrit.extensions.api.changes.StarsInput(com.google.common.collect.ImmutableSet.of(((com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL) + ""/1"")))); }",4ded5f285fa186896a7091e137b10a125e348f60,2017-10-01 13:31:30,6
129873,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangeApiImpl.java,"@java.lang.Override public void mute(boolean mute) throws com.google.gerrit.extensions.restapi.RestApiException { try { if (mute) { this.mute.apply(change, new com.google.gerrit.server.change.Mute.Input()); } else { unmute.apply(change, new com.google.gerrit.server.change.Unmute.Input()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.StarredChangesUtil.IllegalLabelException e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot mute change"", e); } }",0e016f523efb42ae4759765f110139a77230a809,"@java.lang.Override public void markAsReviewed(boolean reviewed) throws com.google.gerrit.extensions.restapi.RestApiException { try { if (reviewed) { this.markAsReviewed.apply(change, new com.google.gerrit.server.change.MarkAsReviewed.Input()); } else { markAsUnreviewed.apply(change, new com.google.gerrit.server.change.MarkAsUnreviewed.Input()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.StarredChangesUtil.IllegalLabelException e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException((""Cannot mark change as "" + (reviewed ? ""reviewed"" : ""unreviewed"")), e); } }",b9b0df8bee60f2c04ca11864b298f363c881cf0f,"@java.lang.Override public void markAsReviewed(boolean reviewed) throws com.google.gerrit.extensions.restapi.RestApiException { try { if (reviewed) { markAsReviewed.apply(change, new com.google.gerrit.server.change.MarkAsReviewed.Input()); } else { markAsUnreviewed.apply(change, new com.google.gerrit.server.change.MarkAsUnreviewed.Input()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.StarredChangesUtil.IllegalLabelException e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException((""Cannot mark change as "" + (reviewed ? ""reviewed"" : ""unreviewed"")), e); } }",f23070f484965315bb479ecf2438b72478d6ca80,2017-10-01 13:31:30,6
129873,gerrit-server_src_main_java_com_google_gerrit_server_StarredChangesUtil.java,"private static java.lang.String getMuteLabel(com.google.gerrit.reviewdb.client.Change change) { return ((com.google.gerrit.server.StarredChangesUtil.MUTE_LABEL) + ""/"") + (change.currentPatchSetId().get()); }",be1dd84bbd8a9b4a944331fd81937792af394528,"private static java.lang.String getReviewedLabel(com.google.gerrit.reviewdb.client.Change change) { return ((com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL) + ""/"") + (change.currentPatchSetId().get()); }",75f430859cbfba4b87308510ab962aa174d88e5f,private static java.lang.String getReviewedLabel(com.google.gerrit.reviewdb.client.Change change) { return com.google.gerrit.server.StarredChangesUtil.getReviewedLabel(change.currentPatchSetId().get()); },962ecf0768ed879abb7308f678355bbe1933a631,2017-10-01 13:31:30,6
129873,gerrit-server_src_main_java_com_google_gerrit_server_StarredChangesUtil.java,"public void mute(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.server.StarredChangesUtil.IllegalLabelException, com.google.gwtorm.server.OrmException { star(rsrc.getUser().asIdentifiedUser().getAccountId(), rsrc.getProject(), rsrc.getChange().getId(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.StarredChangesUtil.getMuteLabel(rsrc.getChange())), com.google.common.collect.ImmutableSet.of()); }",7d3fcf7bb89bfebad878fe6fe133f919c29b8c38,"private static java.lang.String getUnreviewedLabel(com.google.gerrit.reviewdb.client.Change change) { return ((com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL) + ""/"") + (change.currentPatchSetId().get()); }",7bd090841c7ab24e32f00efd8d728aa86eab6f19,private static java.lang.String getUnreviewedLabel(com.google.gerrit.reviewdb.client.Change change) { return com.google.gerrit.server.StarredChangesUtil.getUnreviewedLabel(change.currentPatchSetId().get()); },f488850269e1f09a2d36b0354a8c8b3ee6c00dac,2017-10-01 13:31:30,6
129873,gerrit-server_src_main_java_com_google_gerrit_server_StarredChangesUtil.java,"private static void checkMutuallyExclusiveLabels(java.util.Set<java.lang.String> labels) throws com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException { if (labels.containsAll(com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.StarredChangesUtil.DEFAULT_LABEL, com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL))) { throw new com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException(com.google.gerrit.server.StarredChangesUtil.DEFAULT_LABEL, com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL); } }",4156da0f1d78339adb0c0e91dc922ed7cd79e975,"private static void checkMutuallyExclusiveLabels(java.util.Set<java.lang.String> labels) throws com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException { if (labels.containsAll(com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.StarredChangesUtil.DEFAULT_LABEL, com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL))) { throw new com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException(com.google.gerrit.server.StarredChangesUtil.DEFAULT_LABEL, com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL); } if ((labels.stream().filter(( l) -> l.startsWith(com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL)).findAny().isPresent()) && (labels.stream().filter(( l) -> l.startsWith(com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL)).findAny().isPresent())) { throw new com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException(com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL, com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL); } }",72ad1b1a162643f9773eda304dd3d415e1d156c0,"private static void checkMutuallyExclusiveLabels(java.util.Set<java.lang.String> labels) throws com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException { if (labels.containsAll(com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.StarredChangesUtil.DEFAULT_LABEL, com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL))) { throw new com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException(com.google.gerrit.server.StarredChangesUtil.DEFAULT_LABEL, com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL); } java.util.Set<java.lang.Integer> reviewedPatchSets = labels.stream().filter(( l) -> l.startsWith(com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL)).map(( l) -> java.lang.Integer.valueOf(l.substring(((com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL.length()) + 1)))).collect(java.util.stream.Collectors.toSet()); java.util.Set<java.lang.Integer> unreviewedPatchSets = labels.stream().filter(( l) -> l.startsWith(com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL)).map(( l) -> java.lang.Integer.valueOf(l.substring(((com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL.length()) + 1)))).collect(java.util.stream.Collectors.toSet()); java.util.Optional<java.lang.Integer> ps = com.google.common.collect.Sets.intersection(reviewedPatchSets, unreviewedPatchSets).stream().findFirst(); if (ps.isPresent()) { throw new com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException(com.google.gerrit.server.StarredChangesUtil.getReviewedLabel(ps.get()), com.google.gerrit.server.StarredChangesUtil.getUnreviewedLabel(ps.get())); } }",47188357d680c0047a0619934a814694edb768b0,2017-10-01 13:31:30,6
129873,gerrit-server_src_main_java_com_google_gerrit_server_StarredChangesUtil.java,"private static com.google.gerrit.server.StarredChangesUtil.StarRef readLabels(org.eclipse.jgit.lib.Repository repo, java.lang.String refName) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); if (ref == null) { return com.google.gerrit.server.StarredChangesUtil.StarRef.MISSING; } try (org.eclipse.jgit.lib.ObjectReader reader = repo.newObjectReader()) { org.eclipse.jgit.lib.ObjectLoader obj = reader.open(ref.getObjectId(), Constants.OBJ_BLOB); return com.google.gerrit.server.StarredChangesUtil.StarRef.create(ref, com.google.common.base.Splitter.on(com.google.common.base.CharMatcher.whitespace()).omitEmptyStrings().split(new java.lang.String(obj.getCachedBytes(java.lang.Integer.MAX_VALUE), java.nio.charset.StandardCharsets.UTF_8))); } }",7ee2a0ef21c0af26abe0c6792b28e5d95edf6cc7,"public static com.google.gerrit.server.StarredChangesUtil.StarRef readLabels(org.eclipse.jgit.lib.Repository repo, java.lang.String refName) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); if (ref == null) { return com.google.gerrit.server.StarredChangesUtil.StarRef.MISSING; } try (org.eclipse.jgit.lib.ObjectReader reader = repo.newObjectReader()) { org.eclipse.jgit.lib.ObjectLoader obj = reader.open(ref.getObjectId(), Constants.OBJ_BLOB); return com.google.gerrit.server.StarredChangesUtil.StarRef.create(ref, com.google.common.base.Splitter.on(com.google.common.base.CharMatcher.whitespace()).omitEmptyStrings().split(new java.lang.String(obj.getCachedBytes(java.lang.Integer.MAX_VALUE), java.nio.charset.StandardCharsets.UTF_8))); } }",597c9b09566a1b89a3abcbf7f108dda6b8fed71d,"private static com.google.gerrit.server.StarredChangesUtil.StarRef readLabels(org.eclipse.jgit.lib.Repository repo, java.lang.String refName) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); if (ref == null) { return com.google.gerrit.server.StarredChangesUtil.StarRef.MISSING; } try (org.eclipse.jgit.lib.ObjectReader reader = repo.newObjectReader()) { org.eclipse.jgit.lib.ObjectLoader obj = reader.open(ref.getObjectId(), Constants.OBJ_BLOB); return com.google.gerrit.server.StarredChangesUtil.StarRef.create(ref, com.google.common.base.Splitter.on(com.google.common.base.CharMatcher.whitespace()).omitEmptyStrings().split(new java.lang.String(obj.getCachedBytes(java.lang.Integer.MAX_VALUE), java.nio.charset.StandardCharsets.UTF_8))); } }",7ee2a0ef21c0af26abe0c6792b28e5d95edf6cc7,2017-10-01 13:31:30,6
129873,gerrit-server_src_main_java_com_google_gerrit_server_change_MarkAsUnreviewed.java,,,"@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Mark as Unreviewed"").setTitle(""Mark the change as unreviewed to highlight it in the dashboard"").setVisible(isReviewed(rsrc)); }",4260abaf7f74f7503ebb61604ba2884deabcf28d,"@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Mark Unreviewed"").setTitle(""Mark the change as unreviewed to highlight it in the dashboard"").setVisible(isReviewed(rsrc)); }",76d5e688d3204b2e992d91e96657576eb2aeed9b,2017-10-01 13:31:30,6
129873,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_159.java,,,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(git)) { org.eclipse.jgit.lib.BatchRefUpdate bru = git.getRefDatabase().newBatchUpdate(); for (org.eclipse.jgit.lib.Ref ref : git.getRefDatabase().getRefs(RefNames.REFS_STARRED_CHANGES).values()) { com.google.gerrit.server.StarredChangesUtil.StarRef starRef = com.google.gerrit.server.StarredChangesUtil.readLabels(git, ref.getName()); if (starRef.labels().contains(com.google.gerrit.server.schema.Schema_159.MUTE_LABEL)) { org.eclipse.jgit.lib.ObjectId id = com.google.gerrit.server.StarredChangesUtil.writeLabels(git, starRef.labels().stream().map(( l) -> l.equals(com.google.gerrit.server.schema.Schema_159.MUTE_LABEL) ? StarredChangesUtil.REVIEWED_LABEL : l).collect(java.util.stream.Collectors.toSet())); bru.addCommand(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), id, ref.getName())); } } bru.execute(rw, new org.eclipse.jgit.lib.TextProgressMonitor()); } catch (java.io.IOException | com.google.gerrit.server.StarredChangesUtil.IllegalLabelException ex) { throw new com.google.gwtorm.server.OrmException(ex); } }",150171db07dce09573d63c02c876c32dcd43c3d4,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; if (ui.yesno(false, ""Migrate draft changes to work-in-progress changes (default is private)?"")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; } ui.message(java.lang.String.format(""Replace draft changes with %s changes ..."", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE)) ? ""is_private"" : ""work_in_progress""; e.execute(java.lang.String.format((""UPDATE changes SET %s = 'Y' WHERE status = 'd' OR "" + (""EXISTS (SELECT * FROM patch_sets WHERE "" + ""patch_sets.change_id = changes.change_id AND patch_sets.draft = 'Y')"")), column)); e.execute(""UPDATE changes SET status = 'n' WHERE status = 'd'""); } ui.message(""done""); }",e47e7b10d45a9313ade6b110148438937499b7e8,2017-10-01 13:31:30,6
129873,gerrit-server_src_main_java_com_google_gerrit_server_change_MarkAsReviewed.java,,,"@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Mark as Reviewed"").setTitle(""Mark the change as reviewed to unhighlight it in the dashboard"").setVisible((!(isReviewed(rsrc)))); }",561d32dc734298a32612eeaf7d1ac21db5b32168,"@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Mark Reviewed"").setTitle(""Mark the change as reviewed to unhighlight it in the dashboard"").setVisible((!(isReviewed(rsrc)))); }",7dd2f3af2f77c0351e7d206f21e2254bc079a289,2017-10-01 13:31:30,6
129920,gerrit-server_src_main_java_com_google_gerrit_server_DynamicOptions.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected java.lang.ClassLoader getMergedClassLoader(java.lang.ClassLoader beanCl, java.lang.ClassLoader dynamicBeanCl) { java.util.Map<java.lang.ClassLoader, java.lang.ref.WeakReference<java.lang.ClassLoader>> mergedClByCl = com.google.gerrit.server.DynamicOptions.mergedClByCls.get(beanCl); if (mergedClByCl == null) { mergedClByCl = java.util.Collections.synchronizedMap(new java.util.WeakHashMap<java.lang.ClassLoader, java.lang.ref.WeakReference<java.lang.ClassLoader>>()); com.google.gerrit.server.DynamicOptions.mergedClByCls.put(beanCl, mergedClByCl); } java.lang.ref.WeakReference<java.lang.ClassLoader> mergedClRef = mergedClByCl.get(dynamicBeanCl); java.lang.ClassLoader mergedCl = null; if (mergedClRef != null) { mergedCl = mergedClRef.get(); } if (mergedCl == null) { mergedCl = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); mergedClByCl.put(dynamicBeanCl, new java.lang.ref.WeakReference(mergedCl)); } return mergedCl; }",e72bf422d76321cc9eb847c4c2fcb618351e6cdf,"protected java.lang.ClassLoader getMergedClassLoader(java.lang.ClassLoader beanCl, java.lang.ClassLoader dynamicBeanCl) { java.util.Map<java.lang.ClassLoader, java.lang.ref.WeakReference<java.lang.ClassLoader>> mergedClByCl = com.google.gerrit.server.DynamicOptions.mergedClByCls.get(beanCl); if (mergedClByCl == null) { mergedClByCl = java.util.Collections.synchronizedMap(new java.util.WeakHashMap<>()); com.google.gerrit.server.DynamicOptions.mergedClByCls.put(beanCl, mergedClByCl); } java.lang.ref.WeakReference<java.lang.ClassLoader> mergedClRef = mergedClByCl.get(dynamicBeanCl); java.lang.ClassLoader mergedCl = null; if (mergedClRef != null) { mergedCl = mergedClRef.get(); } if (mergedCl == null) { mergedCl = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); mergedClByCl.put(dynamicBeanCl, new java.lang.ref.WeakReference(mergedCl)); } return mergedCl; }",1229d4b2b8d7b9b29bd668d6e754ca294f28ccbe,2017-10-01 15:45:29,2
129920,gerrit-server_src_main_java_com_google_gerrit_server_DynamicOptions.java,"@java.lang.SuppressWarnings(""unchecked"") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { try { com.google.gerrit.server.List<java.lang.Module> modules = new java.util.ArrayList(); com.google.inject.Injector modulesInjector = injector; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) { modulesInjector = injector.createChildInjector(); for (java.lang.String moduleName : ((com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) (dynamicBean)).getModulesClassNames()) { java.lang.Class<java.lang.Module> mClass = ((java.lang.Class<java.lang.Module>) (loader.loadClass(moduleName))); modules.add(modulesInjector.getInstance(mClass)); } } return modulesInjector.createChildInjector(modules).getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }",2f25ef782860bf47600f0d10b4e15d6ea603af9f,"@java.lang.SuppressWarnings(""unchecked"") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = getMergedClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { try { com.google.gerrit.server.List<java.lang.Module> modules = new java.util.ArrayList(); com.google.inject.Injector modulesInjector = injector; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) { modulesInjector = injector.createChildInjector(); for (java.lang.String moduleName : ((com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) (dynamicBean)).getModulesClassNames()) { java.lang.Class<java.lang.Module> mClass = ((java.lang.Class<java.lang.Module>) (loader.loadClass(moduleName))); modules.add(modulesInjector.getInstance(mClass)); } } return modulesInjector.createChildInjector(modules).getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }",c864469a946bc88dc02c6f745dc4fe1044171dcd,"@java.lang.SuppressWarnings(""unchecked"") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = getMergedClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { try { java.util.List<java.lang.Module> modules = new java.util.ArrayList<>(); com.google.inject.Injector modulesInjector = injector; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) { modulesInjector = injector.createChildInjector(); for (java.lang.String moduleName : ((com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) (dynamicBean)).getModulesClassNames()) { java.lang.Class<java.lang.Module> mClass = ((java.lang.Class<java.lang.Module>) (loader.loadClass(moduleName))); modules.add(modulesInjector.getInstance(mClass)); } } return modulesInjector.createChildInjector(modules).getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }",7d85182f874a06c7bf5a920ef717b676b72be9cf,2017-10-01 15:45:29,2
129918,gerrit-server_src_main_java_com_google_gerrit_server_DynamicOptions.java,"@java.lang.SuppressWarnings(""unchecked"") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { try { return injector.createChildInjector().getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }",8766c081355e2791e70ba9b986450cf92a53f7b0,"@java.lang.SuppressWarnings(""unchecked"") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { com.google.gerrit.server.List<java.lang.Module> modules = new java.util.ArrayList(); try { if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) { for (java.lang.String moduleName : ((com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) (dynamicBean)).getModulesClassNames()) { try { java.lang.Class<?> moduleClass = loader.loadClass(moduleName); modules.add(((java.lang.Module) (moduleClass.getConstructor().newInstance()))); } catch (java.lang.NoSuchMethodException | java.lang.InstantiationException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException e) { } } } return injector.createChildInjector(modules).getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }",dd92ca6b387d8b45902134bec0f465c581a64dff,"@java.lang.SuppressWarnings(""unchecked"") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { java.util.List<java.lang.Module> modules = new java.util.ArrayList<>(); try { if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) { for (java.lang.String moduleName : ((com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) (dynamicBean)).getModulesClassNames()) { try { java.lang.Class<?> moduleClass = loader.loadClass(moduleName); modules.add(((java.lang.Module) (moduleClass.getConstructor().newInstance()))); } catch (java.lang.NoSuchMethodException | java.lang.InstantiationException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException e) { com.google.gerrit.server.DynamicOptions.log.error((""ERROR loading/instantiating module "" + moduleName), e); } } } return injector.createChildInjector(modules).getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }",eacfb1e7f69d6f68daad1d3b636999cac2bdf7ff,2017-10-01 15:45:29,2
129919,gerrit-server_src_main_java_com_google_gerrit_server_DynamicOptions.java,"@java.lang.SuppressWarnings(""unchecked"") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { com.google.gerrit.server.List<java.lang.Module> modules = new java.util.ArrayList(); try { if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) { for (java.lang.String moduleName : ((com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) (dynamicBean)).getModulesClassNames()) { try { java.lang.Class<?> moduleClass = loader.loadClass(moduleName); modules.add(((java.lang.Module) (moduleClass.getConstructor().newInstance()))); } catch (java.lang.NoSuchMethodException | java.lang.InstantiationException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException e) { } } } return injector.createChildInjector(modules).getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }",dd92ca6b387d8b45902134bec0f465c581a64dff,"@java.lang.SuppressWarnings(""unchecked"") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { try { com.google.gerrit.server.List<java.lang.Module> modules = new java.util.ArrayList(); com.google.inject.Injector modulesInjector = injector; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) { modulesInjector = injector.createChildInjector(); for (java.lang.String moduleName : ((com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) (dynamicBean)).getModulesClassNames()) { java.lang.Class<java.lang.Module> mClass = ((java.lang.Class<java.lang.Module>) (loader.loadClass(moduleName))); modules.add(modulesInjector.getInstance(mClass)); } } return modulesInjector.createChildInjector(modules).getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }",2f25ef782860bf47600f0d10b4e15d6ea603af9f,"@java.lang.SuppressWarnings(""unchecked"") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { try { java.util.List<java.lang.Module> modules = new java.util.ArrayList<>(); com.google.inject.Injector modulesInjector = injector; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) { modulesInjector = injector.createChildInjector(); for (java.lang.String moduleName : ((com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) (dynamicBean)).getModulesClassNames()) { java.lang.Class<java.lang.Module> mClass = ((java.lang.Class<java.lang.Module>) (loader.loadClass(moduleName))); modules.add(modulesInjector.getInstance(mClass)); } } return modulesInjector.createChildInjector(modules).getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }",b9e061c597106db80f31e2c62305bc32c6a5ac80,2017-10-01 15:45:29,2
130450,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_Upload.java,"@java.lang.Override protected void runImpl() throws com.google.gerrit.sshd.commands.Failure, java.io.IOException { try { permissionBackend.user(projectControl.getUser()).project(projectControl.getProject().getNameKey()).check(ProjectPermission.RUN_UPLOAD_PACK); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.sshd.commands.Failure(1, ""fatal: upload-pack not permitted on this server""); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.sshd.commands.Failure(1, (""fatal: unable to check permissions "" + e)); } final org.eclipse.jgit.transport.UploadPack up = new org.eclipse.jgit.transport.UploadPack(repo); up.setAdvertiseRefsHook(refFilterFactory.create(projectControl.getProjectState(), repo)); up.setPackConfig(config.getPackConfig()); up.setTimeout(config.getTimeout()); up.setPostUploadHook(org.eclipse.jgit.transport.PostUploadHookChain.newChain(com.google.common.collect.Lists.newArrayList(postUploadHooks))); java.util.List<org.eclipse.jgit.transport.PreUploadHook> allPreUploadHooks = com.google.common.collect.Lists.newArrayList(preUploadHooks); allPreUploadHooks.add(uploadValidatorsFactory.create(project, repo, session.getRemoteAddressAsString())); up.setPreUploadHook(org.eclipse.jgit.transport.PreUploadHookChain.newChain(allPreUploadHooks)); try { up.upload(in, out, err); session.setPeerAgent(up.getPeerUserAgent()); } catch (com.google.gerrit.server.git.validators.UploadValidationException e) { if (!(e.isOutput())) { up.sendMessage(e.getMessage()); } } }",d9b881b8ed13a507a7801731764de40c4055b978,"@java.lang.Override protected void runImpl() throws com.google.gerrit.sshd.commands.Failure, java.io.IOException { try { permissionBackend.user(projectControl.getUser()).project(projectControl.getProject().getNameKey()).check(ProjectPermission.RUN_UPLOAD_PACK); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.sshd.commands.Failure(1, ""fatal: upload-pack not permitted on this server""); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.sshd.commands.Failure(1, (""fatal: unable to check permissions "" + e)); } final org.eclipse.jgit.transport.UploadPack up = new org.eclipse.jgit.transport.UploadPack(repo); up.setAdvertiseRefsHook(refFilterFactory.create(projectControl.getProjectState(), repo)); up.setPackConfig(config.getPackConfig()); up.setTimeout(config.getTimeout()); up.setPostUploadHook(org.eclipse.jgit.transport.PostUploadHookChain.newChain(com.google.common.collect.Lists.newArrayList(postUploadHooks))); java.util.List<org.eclipse.jgit.transport.PreUploadHook> allPreUploadHooks = com.google.common.collect.Lists.newArrayList(preUploadHooks); allPreUploadHooks.add(uploadValidatorsFactory.create(project, repo, session.getRemoteAddressAsString())); up.setPreUploadHook(org.eclipse.jgit.transport.PreUploadHookChain.newChain(allPreUploadHooks)); for (com.google.gerrit.server.git.UploadPackInitializer initializer : uploadPackInitializers) { initializer.init(ctl.getProject().getNameKey(), rp); } try { up.upload(in, out, err); session.setPeerAgent(up.getPeerUserAgent()); } catch (com.google.gerrit.server.git.validators.UploadValidationException e) { if (!(e.isOutput())) { up.sendMessage(e.getMessage()); } } }",23968b77ce41dc68b2f3aaf26930ec336f14c827,"@java.lang.Override protected void runImpl() throws com.google.gerrit.sshd.commands.Failure, java.io.IOException { try { permissionBackend.user(projectControl.getUser()).project(projectControl.getProject().getNameKey()).check(ProjectPermission.RUN_UPLOAD_PACK); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.sshd.commands.Failure(1, ""fatal: upload-pack not permitted on this server""); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.sshd.commands.Failure(1, (""fatal: unable to check permissions "" + e)); } final org.eclipse.jgit.transport.UploadPack up = new org.eclipse.jgit.transport.UploadPack(repo); up.setAdvertiseRefsHook(refFilterFactory.create(projectControl.getProjectState(), repo)); up.setPackConfig(config.getPackConfig()); up.setTimeout(config.getTimeout()); up.setPostUploadHook(org.eclipse.jgit.transport.PostUploadHookChain.newChain(com.google.common.collect.Lists.newArrayList(postUploadHooks))); java.util.List<org.eclipse.jgit.transport.PreUploadHook> allPreUploadHooks = com.google.common.collect.Lists.newArrayList(preUploadHooks); allPreUploadHooks.add(uploadValidatorsFactory.create(project, repo, session.getRemoteAddressAsString())); up.setPreUploadHook(org.eclipse.jgit.transport.PreUploadHookChain.newChain(allPreUploadHooks)); for (com.google.gerrit.server.git.UploadPackInitializer initializer : uploadPackInitializers) { initializer.init(projectControl.getProject().getNameKey(), up); } try { up.upload(in, out, err); session.setPeerAgent(up.getPeerUserAgent()); } catch (com.google.gerrit.server.git.validators.UploadValidationException e) { if (!(e.isOutput())) { up.sendMessage(e.getMessage()); } } }",a3c4372735211864513134314e2608515bb2ba25,2017-10-03 10:19:39,6
130450,gerrit-httpd_src_main_java_com_google_gerrit_httpd_GitOverHttpServlet.java,"@java.lang.Override public org.eclipse.jgit.transport.UploadPack create(javax.servlet.http.HttpServletRequest req, org.eclipse.jgit.lib.Repository repo) { org.eclipse.jgit.transport.UploadPack up = new org.eclipse.jgit.transport.UploadPack(repo); up.setPackConfig(config.getPackConfig()); up.setTimeout(config.getTimeout()); up.setPreUploadHook(org.eclipse.jgit.transport.PreUploadHookChain.newChain(com.google.common.collect.Lists.newArrayList(preUploadHooks))); up.setPostUploadHook(org.eclipse.jgit.transport.PostUploadHookChain.newChain(com.google.common.collect.Lists.newArrayList(postUploadHooks))); return up; }",47d7177f841debb0224c53f0f50e8bcacc23155f,"@java.lang.Override public org.eclipse.jgit.transport.UploadPack create(javax.servlet.http.HttpServletRequest req, org.eclipse.jgit.lib.Repository repo) { org.eclipse.jgit.transport.UploadPack up = new org.eclipse.jgit.transport.UploadPack(repo); up.setPackConfig(config.getPackConfig()); up.setTimeout(config.getTimeout()); up.setPreUploadHook(org.eclipse.jgit.transport.PreUploadHookChain.newChain(com.google.common.collect.Lists.newArrayList(preUploadHooks))); up.setPostUploadHook(org.eclipse.jgit.transport.PostUploadHookChain.newChain(com.google.common.collect.Lists.newArrayList(postUploadHooks))); for (com.google.gerrit.server.git.UploadPackInitializer initializer : uploadPackInitializers) { initializer.init(ctl.getProject().getNameKey(), rp); } return up; }",049d0bde31ddda724dbce406024aa7668517766b,"@java.lang.Override public org.eclipse.jgit.transport.UploadPack create(javax.servlet.http.HttpServletRequest req, org.eclipse.jgit.lib.Repository repo) { org.eclipse.jgit.transport.UploadPack up = new org.eclipse.jgit.transport.UploadPack(repo); up.setPackConfig(config.getPackConfig()); up.setTimeout(config.getTimeout()); up.setPreUploadHook(org.eclipse.jgit.transport.PreUploadHookChain.newChain(com.google.common.collect.Lists.newArrayList(preUploadHooks))); up.setPostUploadHook(org.eclipse.jgit.transport.PostUploadHookChain.newChain(com.google.common.collect.Lists.newArrayList(postUploadHooks))); com.google.gerrit.server.project.ProjectControl pc = ((com.google.gerrit.server.project.ProjectControl) (req.getAttribute(com.google.gerrit.httpd.GitOverHttpServlet.ATT_CONTROL))); for (com.google.gerrit.server.git.UploadPackInitializer initializer : uploadPackInitializers) { initializer.init(pc.getProject().getNameKey(), up); } return up; }",6da7dac3a73166d7d6c5a8d42114f552ea4f3dc1,2017-10-03 10:19:39,6
130450,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_InProcessProtocol.java,"@java.lang.Override public org.eclipse.jgit.transport.UploadPack create(com.google.gerrit.acceptance.InProcessProtocol.Context req, org.eclipse.jgit.lib.Repository repo) throws org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException { threadContext.setContext(req); com.google.gerrit.acceptance.InProcessProtocol.current.set(req); try { permissionBackend.user(userProvider).project(req.project).check(ProjectPermission.RUN_UPLOAD_PACK); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException(); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.lang.RuntimeException(e); } com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(req.project); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } if (projectState == null) { throw new java.lang.RuntimeException((""can't load project state for "" + (req.project.get()))); } org.eclipse.jgit.transport.UploadPack up = new org.eclipse.jgit.transport.UploadPack(repo); up.setPackConfig(transferConfig.getPackConfig()); up.setTimeout(transferConfig.getTimeout()); up.setAdvertiseRefsHook(refFilterFactory.create(projectState, repo)); java.util.List<org.eclipse.jgit.transport.PreUploadHook> hooks = com.google.common.collect.Lists.newArrayList(preUploadHooks); hooks.add(uploadValidatorsFactory.create(projectState.getProject(), repo, ""localhost-test"")); up.setPreUploadHook(org.eclipse.jgit.transport.PreUploadHookChain.newChain(hooks)); return up; }",2568831ce2dc647dd1c518ca7c1b3f6023467a73,"@java.lang.Override public org.eclipse.jgit.transport.UploadPack create(com.google.gerrit.acceptance.InProcessProtocol.Context req, org.eclipse.jgit.lib.Repository repo) throws org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException { threadContext.setContext(req); com.google.gerrit.acceptance.InProcessProtocol.current.set(req); try { permissionBackend.user(userProvider).project(req.project).check(ProjectPermission.RUN_UPLOAD_PACK); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException(); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.lang.RuntimeException(e); } com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(req.project); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } if (projectState == null) { throw new java.lang.RuntimeException((""can't load project state for "" + (req.project.get()))); } org.eclipse.jgit.transport.UploadPack up = new org.eclipse.jgit.transport.UploadPack(repo); up.setPackConfig(transferConfig.getPackConfig()); up.setTimeout(transferConfig.getTimeout()); up.setAdvertiseRefsHook(refFilterFactory.create(projectState, repo)); java.util.List<org.eclipse.jgit.transport.PreUploadHook> hooks = com.google.common.collect.Lists.newArrayList(preUploadHooks); hooks.add(uploadValidatorsFactory.create(projectState.getProject(), repo, ""localhost-test"")); up.setPreUploadHook(org.eclipse.jgit.transport.PreUploadHookChain.newChain(hooks)); for (com.google.gerrit.server.git.UploadPackInitializer initializer : uploadPackInitializers) { initializer.init(ctl.getProject().getNameKey(), rp); } return up; }",410ef40cb459012cdaf30d57aace7f6532c4a6de,"@java.lang.Override public org.eclipse.jgit.transport.UploadPack create(com.google.gerrit.acceptance.InProcessProtocol.Context req, org.eclipse.jgit.lib.Repository repo) throws org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException { threadContext.setContext(req); com.google.gerrit.acceptance.InProcessProtocol.current.set(req); try { permissionBackend.user(userProvider).project(req.project).check(ProjectPermission.RUN_UPLOAD_PACK); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException(); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.lang.RuntimeException(e); } com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(req.project); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } if (projectState == null) { throw new java.lang.RuntimeException((""can't load project state for "" + (req.project.get()))); } org.eclipse.jgit.transport.UploadPack up = new org.eclipse.jgit.transport.UploadPack(repo); up.setPackConfig(transferConfig.getPackConfig()); up.setTimeout(transferConfig.getTimeout()); up.setAdvertiseRefsHook(refFilterFactory.create(projectState, repo)); java.util.List<org.eclipse.jgit.transport.PreUploadHook> hooks = com.google.common.collect.Lists.newArrayList(preUploadHooks); hooks.add(uploadValidatorsFactory.create(projectState.getProject(), repo, ""localhost-test"")); up.setPreUploadHook(org.eclipse.jgit.transport.PreUploadHookChain.newChain(hooks)); for (com.google.gerrit.server.git.UploadPackInitializer initializer : uploadPackInitializers) { initializer.init(req.project, up); } return up; }",f54f2c7bae3383870242f54538a4b2d58d7921d5,2017-10-03 10:19:39,6
130250,gerrit-server_src_main_java_com_google_gerrit_server_query_change_QueryChanges.java,"@java.lang.Override public java.util.List<?> apply(com.google.gerrit.extensions.restapi.TopLevelResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> out; try { out = query(); } catch (com.google.gerrit.server.query.QueryParseException e) { java.util.regex.Pattern p = java.util.regex.Pattern.compile(""^Error in operator (.*:self|is:watched|is:owner|is:reviewer|has:.*)$""); java.util.regex.Matcher m = p.matcher(e.getMessage()); if (m.matches()) { java.lang.String op = m.group(1); throw new com.google.gerrit.extensions.restapi.AuthException((""Must be signed-in to use "" + op)); } throw new com.google.gerrit.extensions.restapi.BadRequestException(e.getMessage(), e); } return (out.size()) == 1 ? out.get(0) : out; }",71bcedb4f96d7784988a8623d84dd14219c967ed,"@java.lang.Override public java.util.List<?> apply(com.google.gerrit.extensions.restapi.TopLevelResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> out; try { out = query(); } catch (com.google.gerrit.server.query.QueryParseException e) { java.util.regex.Pattern p = java.util.regex.Pattern.compile(""^Error in operator (.*:self|is:watched|is:owner|is:reviewer)$""); java.util.regex.Matcher m = p.matcher(e.getMessage()); if (m.matches()) { java.lang.String op = m.group(1); throw new com.google.gerrit.extensions.restapi.AuthException((""Must be signed-in to use "" + op)); } throw new com.google.gerrit.extensions.restapi.BadRequestException(e.getMessage(), e); } return (out.size()) == 1 ? out.get(0) : out; }",ba32e5813da3bf13e3494279cfeb71ebef54e8f4,"@java.lang.Override public java.util.List<?> apply(com.google.gerrit.extensions.restapi.TopLevelResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> out; try { out = query(); } catch (com.google.gerrit.server.query.QueryRequiresAuthException e) { throw new com.google.gerrit.extensions.restapi.AuthException(""Must be signed-in to use this operator""); } catch (com.google.gerrit.server.query.QueryParseException e) { throw new com.google.gerrit.extensions.restapi.BadRequestException(e.getMessage(), e); } return (out.size()) == 1 ? out.get(0) : out; }",e67b79d7c122e6e433ed25cee1897d82732ab42a,2017-10-04 09:39:09,9
130851,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void assertRefUpdateFor(java.util.Map<java.lang.String, java.lang.Integer> expectedRefUpdateCounts) { for (java.util.Map.Entry<java.lang.String, java.lang.Integer> e : expectedRefUpdateCounts.entrySet()) { assertThat(getCount(e.getKey())).isEqualTo(e.getValue()); } assertThat(countsByRef).hasSize(expectedRefUpdateCounts.size()); clear(); }",42cc98ed3a448db510d806e68ada969348e38ca8,"void assertRefUpdateFor(java.util.Map<java.lang.String, java.lang.Integer> expectedProjectRefUpdateCounts) { for (java.util.Map.Entry<java.lang.String, java.lang.Integer> e : expectedProjectRefUpdateCounts.entrySet()) { assertThat(getCount(e.getKey())).isEqualTo(e.getValue()); } assertThat(countsByProjectRefs).hasSize(expectedProjectRefUpdateCounts.size()); clear(); }",3a1c33b3c093c846b945fb240cb490d9f0a2b890,2017-10-05 13:22:06,2
130851,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,@org.junit.Test public void create() throws java.lang.Exception { create(2); },cb1845c9f5773a5d752bdea3e218e9b4259d6d1f,"@org.junit.Test public void create() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = create(2); refUpdateCounter.assertRefUpdateFor(com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId), RefNames.REFS_EXTERNAL_IDS); }",34be33ee93c545973332fa18a59fbe026c29665d,"@org.junit.Test public void create() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = create(2); refUpdateCounter.assertRefUpdateFor(com.google.gerrit.acceptance.api.accounts.AccountIT.RefUpdateCounter.projectRef(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)), com.google.gerrit.acceptance.api.accounts.AccountIT.RefUpdateCounter.projectRef(allUsers, RefNames.REFS_EXTERNAL_IDS)); }",2a85bb52571f0d7f1c6164ad083975c19b0de6d1,2017-10-05 13:22:06,2
130851,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onGitReferenceUpdated(com.google.gerrit.acceptance.api.accounts.Event event) { countsByRef.incrementAndGet(event.getRefName()); },4401bb3b24ef9865ff9f0b05e1ac20fbfe53a671,"@java.lang.Override public void onGitReferenceUpdated(com.google.gerrit.acceptance.api.accounts.Event event) { countsByProjectRefs.incrementAndGet(com.google.gerrit.acceptance.api.accounts.AccountIT.RefUpdateCounter.projectRef(event.getProjectName(), event.getRefName())); }",386061a2f8dcb5dba9abebfbc52ad6223de151db,2017-10-05 13:22:06,2
130851,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void assertRefUpdateFor(java.lang.String... refs) { java.util.Map<java.lang.String, java.lang.Integer> expectedRefUpdateCounts = new java.util.HashMap<>(); for (java.lang.String ref : refs) { expectedRefUpdateCounts.put(ref, 1); } assertRefUpdateFor(expectedRefUpdateCounts); }",8222f716b1718d3ad78d6108b09ab1d6cdf39a2f,"void assertRefUpdateFor(java.lang.String... projectRefs) { java.util.Map<java.lang.String, java.lang.Integer> expectedRefUpdateCounts = new java.util.HashMap<>(); for (java.lang.String projectRef : projectRefs) { expectedRefUpdateCounts.put(projectRef, 1); } assertRefUpdateFor(expectedRefUpdateCounts); }",aad7bafd7872bd54dbcb8069af931515581caeaa,2017-10-05 13:22:06,2
130851,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,void clear() { countsByRef.clear(); },c390f3ff642b346f2a98d4f1504e0f3cd14e21c2,void clear() { countsByProjectRefs.clear(); },261a51786a7162383cc135fd48c954b909ff1f5c,2017-10-05 13:22:06,2
130851,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,@org.junit.Test @com.google.gerrit.acceptance.UseSsh public void createWithSshKeys() throws java.lang.Exception { create(3); },9e23302592287f71a9d92811d89e9bf033c0f8d9,"@org.junit.Test @com.google.gerrit.acceptance.UseSsh public void createWithSshKeys() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = create(3); refUpdateCounter.assertRefUpdateFor(com.google.common.collect.ImmutableMap.of(com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId), 2, RefNames.REFS_EXTERNAL_IDS, 1)); }",789d6d5facb3b3186dd405ea5a66fb73f025c3c2,"@org.junit.Test @com.google.gerrit.acceptance.UseSsh public void createWithSshKeys() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = create(3); refUpdateCounter.assertRefUpdateFor(com.google.common.collect.ImmutableMap.of(com.google.gerrit.acceptance.api.accounts.AccountIT.RefUpdateCounter.projectRef(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)), 2, com.google.gerrit.acceptance.api.accounts.AccountIT.RefUpdateCounter.projectRef(allUsers, RefNames.REFS_EXTERNAL_IDS), 1)); }",bc7bb52c5bf87b5c6f5e4a65d4aa15f49b64b78a,2017-10-05 13:22:06,2
130851,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,long getCount(java.lang.String ref) { return countsByRef.get(ref); },caeece0b582cc37f9b38ea580d2611684c2406fd,long getCount(java.lang.String projectRef) { return countsByProjectRefs.get(projectRef); },85eaa96092f7203e4e6dc66ccc504d99402875d0,2017-10-05 13:22:06,2
113690,gerrit-lucene_src_main_java_com_google_gerrit_lucene_LuceneProjectIndex.java,,,"@java.lang.Override public com.google.gerrit.server.query.DataSource<com.google.gerrit.server.project.ProjectState> getSource(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.project.ProjectState> p, com.google.gerrit.server.index.QueryOptions opts) throws com.google.gerrit.server.query.QueryParseException { return new com.google.gerrit.lucene.LuceneProjectIndex.QuerySource(opts, queryBuilder.toQuery(p), new org.apache.lucene.search.Sort(new org.apache.lucene.search.SortField(com.google.gerrit.lucene.LuceneProjectIndex.NAME_SORT_FIELD, SortField.Type.STRING, false))); }",a2cb418349017399aad3e892867f6747dc7c552c,"@java.lang.Override public com.google.gerrit.index.query.DataSource<com.google.gerrit.server.project.ProjectState> getSource(com.google.gerrit.index.query.Predicate<com.google.gerrit.server.project.ProjectState> p, com.google.gerrit.index.QueryOptions opts) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.lucene.LuceneProjectIndex.QuerySource(opts, queryBuilder.toQuery(p), new org.apache.lucene.search.Sort(new org.apache.lucene.search.SortField(com.google.gerrit.lucene.LuceneProjectIndex.NAME_SORT_FIELD, SortField.Type.STRING, false))); }",406b4ed87b4c7e9c9a006f806fa184979c66dc29,2017-10-05 18:18:54,8
113690,gerrit-server_src_main_java_com_google_gerrit_server_index_IndexModule.java,"@com.google.inject.Provides java.util.Collection<com.google.gerrit.server.index.IndexDefinition<?, ?, ?>> getIndexDefinitions(com.google.gerrit.server.index.account.AccountIndexDefinition accounts, com.google.gerrit.server.index.change.ChangeIndexDefinition changes, com.google.gerrit.server.index.group.GroupIndexDefinition groups) { java.util.Collection<com.google.gerrit.server.index.IndexDefinition<?, ?, ?>> result = com.google.common.collect.ImmutableList.<com.google.gerrit.server.index.IndexDefinition<?, ?, ?>>of(accounts, groups, changes); java.util.Set<java.lang.String> expected = com.google.common.collect.FluentIterable.from(com.google.gerrit.server.index.IndexModule.ALL_SCHEMA_DEFS).transform(SchemaDefinitions::getName).toSet(); java.util.Set<java.lang.String> actual = com.google.common.collect.FluentIterable.from(result).transform(IndexDefinition::getName).toSet(); if (!(expected.equals(actual))) { throw new com.google.inject.ProvisionException((((""need index definitions for all schemas: "" + expected) + "" != "") + actual)); } return result; }",1e066b2bbf8ea26be21e381dbc295f10afdc801f,"@com.google.inject.Provides java.util.Collection<com.google.gerrit.server.index.IndexDefinition<?, ?, ?>> getIndexDefinitions(com.google.gerrit.server.index.account.AccountIndexDefinition accounts, com.google.gerrit.server.index.change.ChangeIndexDefinition changes, com.google.gerrit.server.index.group.GroupIndexDefinition groups, com.google.gerrit.server.index.project.ProjectIndexDefinition projects) { java.util.Collection<com.google.gerrit.server.index.IndexDefinition<?, ?, ?>> result = com.google.common.collect.ImmutableList.<com.google.gerrit.server.index.IndexDefinition<?, ?, ?>>of(accounts, groups, changes, projects); java.util.Set<java.lang.String> expected = com.google.common.collect.FluentIterable.from(com.google.gerrit.server.index.IndexModule.ALL_SCHEMA_DEFS).transform(SchemaDefinitions::getName).toSet(); java.util.Set<java.lang.String> actual = com.google.common.collect.FluentIterable.from(result).transform(IndexDefinition::getName).toSet(); if (!(expected.equals(actual))) { throw new com.google.inject.ProvisionException((((""need index definitions for all schemas: "" + expected) + "" != "") + actual)); } return result; }",02c5c103b044efb3519293160c945102a6efbf8c,"@com.google.inject.Provides java.util.Collection<com.google.gerrit.index.IndexDefinition<?, ?, ?>> getIndexDefinitions(com.google.gerrit.server.index.account.AccountIndexDefinition accounts, com.google.gerrit.server.index.change.ChangeIndexDefinition changes, com.google.gerrit.server.index.group.GroupIndexDefinition groups) { java.util.Collection<com.google.gerrit.index.IndexDefinition<?, ?, ?>> result = com.google.common.collect.ImmutableList.<com.google.gerrit.index.IndexDefinition<?, ?, ?>>of(accounts, groups, changes); java.util.Set<java.lang.String> expected = com.google.common.collect.FluentIterable.from(com.google.gerrit.server.index.IndexModule.ALL_SCHEMA_DEFS).transform(SchemaDefinitions::getName).toSet(); java.util.Set<java.lang.String> actual = com.google.common.collect.FluentIterable.from(result).transform(IndexDefinition::getName).toSet(); if (!(expected.equals(actual))) { throw new com.google.inject.ProvisionException((((""need index definitions for all schemas: "" + expected) + "" != "") + actual)); } return result; }",caacfd8fc09b2ecdfc0c97c428549fdcfce9ec79,2017-10-05 18:18:54,8
113690,gerrit-server_src_main_java_com_google_gerrit_server_index_IndexUtils.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static java.util.Set<java.lang.String> projectFields(com.google.gerrit.server.index.QueryOptions opts) { java.util.Set<java.lang.String> fs = opts.fields(); return fs.contains(ProjectField.NAME.getName()) ? fs : com.google.common.collect.Sets.union(fs, com.google.common.collect.ImmutableSet.of(ProjectField.NAME.getName())); }",beae610bb18b64a0f7b5c788659b33bbccc18d77,"public static java.util.Set<java.lang.String> projectFields(com.google.gerrit.index.QueryOptions opts) { java.util.Set<java.lang.String> fs = opts.fields(); return fs.contains(ProjectField.NAME.getName()) ? fs : com.google.common.collect.Sets.union(fs, com.google.common.collect.ImmutableSet.of(ProjectField.NAME.getName())); }",cd5211173a16bb8ce7607f99a6b1743317a1e161,2017-10-05 18:18:54,8
114734,gerrit-server_src_main_java_com_google_gerrit_server_project_QueryProjects.java,,,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.extensions.restapi.TopLevelResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { if (com.google.common.base.Strings.isNullOrEmpty(query)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""missing query field""); } com.google.gerrit.server.index.project.ProjectIndex searchIndex = indexes.getSearchIndex(); if (searchIndex == null) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""no project index""); } if ((start) != 0) { queryProcessor.setStart(start); } if ((limit) != 0) { queryProcessor.setLimit(limit); } try { com.google.gerrit.server.query.QueryResult<com.google.gerrit.server.project.ProjectState> result = queryProcessor.query(queryBuilder.parse(query)); java.util.List<com.google.gerrit.server.project.ProjectState> projects = result.entities(); java.util.ArrayList<com.google.gerrit.extensions.common.ProjectInfo> projectInfos = com.google.common.collect.Lists.newArrayListWithCapacity(projects.size()); for (com.google.gerrit.server.project.ProjectState projectState : projects) { projectInfos.add(json.format(projectState.getProject())); } return projectInfos; } catch (com.google.gerrit.server.query.QueryParseException e) { throw new com.google.gerrit.extensions.restapi.BadRequestException(e.getMessage()); } }",afeaa13ec804ebb02c5803041ee7a1e8bf546a17,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.extensions.restapi.TopLevelResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { if (com.google.common.base.Strings.isNullOrEmpty(query)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""missing query field""); } com.google.gerrit.server.index.project.ProjectIndex searchIndex = indexes.getSearchIndex(); if (searchIndex == null) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""no project index""); } if ((start) != 0) { queryProcessor.setStart(start); } if ((limit) != 0) { queryProcessor.setUserProvidedLimit(limit); } try { com.google.gerrit.index.query.QueryResult<com.google.gerrit.server.project.ProjectState> result = queryProcessor.query(queryBuilder.parse(query)); java.util.List<com.google.gerrit.server.project.ProjectState> projects = result.entities(); java.util.ArrayList<com.google.gerrit.extensions.common.ProjectInfo> projectInfos = com.google.common.collect.Lists.newArrayListWithCapacity(projects.size()); for (com.google.gerrit.server.project.ProjectState projectState : projects) { projectInfos.add(json.format(projectState.getProject())); } return projectInfos; } catch (com.google.gerrit.index.query.QueryParseException e) { throw new com.google.gerrit.extensions.restapi.BadRequestException(e.getMessage()); } }",40242a0ad2d32eb4bf42eeb4f1f513ca19e317fb,2017-10-05 18:18:54,7
113690,gerrit-lucene_src_main_java_com_google_gerrit_lucene_LuceneProjectIndex.java,,,"private static org.apache.lucene.store.Directory dir(com.google.gerrit.server.index.Schema<com.google.gerrit.server.project.ProjectState> schema, org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.config.SitePaths sitePaths) throws java.io.IOException { if (com.google.gerrit.lucene.LuceneIndexModule.isInMemoryTest(cfg)) { return new org.apache.lucene.store.RAMDirectory(); } java.nio.file.Path indexDir = com.google.gerrit.lucene.LuceneVersionManager.getDir(sitePaths, com.google.gerrit.lucene.LuceneProjectIndex.PROJECTS, schema); return org.apache.lucene.store.FSDirectory.open(indexDir); }",75ca1ea14b10cf7f311b91d6d75fb3dca7c4a17c,"private static org.apache.lucene.store.Directory dir(com.google.gerrit.index.Schema<com.google.gerrit.server.project.ProjectState> schema, org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.config.SitePaths sitePaths) throws java.io.IOException { if (com.google.gerrit.lucene.LuceneIndexModule.isInMemoryTest(cfg)) { return new org.apache.lucene.store.RAMDirectory(); } java.nio.file.Path indexDir = com.google.gerrit.lucene.LuceneVersionManager.getDir(sitePaths, com.google.gerrit.lucene.LuceneProjectIndex.PROJECTS, schema); return org.apache.lucene.store.FSDirectory.open(indexDir); }",04fe49f83415aa6edf28e97df1c551dc2b8d7ca5,2017-10-05 18:18:54,8
116370,gerrit-server_src_test_java_com_google_gerrit_server_query_project_AbstractQueryProjectsTest.java,,,"private Account.Id createAccount(java.lang.String username, java.lang.String fullName, java.lang.String email, boolean active) throws java.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email != null) { accountManager.link(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(db, id, ( a) -> { a.setFullName(fullName); a.setPreferredEmail(email); a.setActive(active); }); return id; } }",705f75f34ef87e4673d7c5ab40568915819e6195,"private Account.Id createAccount(java.lang.String username, java.lang.String fullName, java.lang.String email, boolean active) throws java.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email != null) { accountManager.link(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(id, ( a) -> { a.setFullName(fullName); a.setPreferredEmail(email); a.setActive(active); }); return id; } }",3bb99ce49bcb8ed859b56ba15d48cf6fa7f8be52,2017-10-05 18:18:54,7
113651,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug(""Updating tag cache on fast-forward of {}"", cmd.getRefName()); tagCache.updateFastForward(project.getNameKey(), refName, cmd.getOldId(), cmd.getNewId()); } if (com.google.gerrit.server.git.ReceiveCommits.isConfig(cmd)) { logDebug(""Reloading project in cache""); projectCache.evict(project); com.google.gerrit.server.project.ProjectState ps = projectCache.get(project.getNameKey()); try { logDebug(""Updating project description""); repo.setGitwebDescription(ps.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.ReceiveCommits.log.warn((""cannot update description of "" + (project.getName())), e); } } }",16a70476fd46f0b47eccefd21b9dcbd4c0a56b14,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug(""Updating tag cache on fast-forward of {}"", cmd.getRefName()); tagCache.updateFastForward(project.getNameKey(), refName, cmd.getOldId(), cmd.getNewId()); } if (com.google.gerrit.server.git.ReceiveCommits.isConfig(cmd)) { logDebug(""Reloading project in cache""); try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.ReceiveCommits.log.warn((""Cannot evict from project cache, name key: "" + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project.getNameKey()); try { logDebug(""Updating project description""); repo.setGitwebDescription(ps.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.ReceiveCommits.log.warn((""cannot update description of "" + (project.getName())), e); } } }",c224dc8178c6a3e5d80b718740602f10cd3d52e6,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug(""Updating tag cache on fast-forward of {}"", cmd.getRefName()); tagCache.updateFastForward(project.getNameKey(), refName, cmd.getOldId(), cmd.getNewId()); } if (com.google.gerrit.server.git.receive.ReceiveCommits.isConfig(cmd)) { logDebug(""Reloading project in cache""); try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn((""Cannot evict from project cache, name key: "" + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project.getNameKey()); try { logDebug(""Updating project description""); repo.setGitwebDescription(ps.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn((""cannot update description of "" + (project.getName())), e); } } }",323ec609d16537cceba3d6329ca72d39ac03b5ba,2017-10-05 18:18:54,10
113651,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectCacheImpl.java,@java.lang.Override public void evict(com.google.gerrit.reviewdb.client.Project p) { if (p != null) { byName.invalidate(p.getNameKey().get()); } },4bfdd17ab9c98974f7595c30bf7ce54bc1b0e38b,@java.lang.Override public void evict(com.google.gerrit.reviewdb.client.Project p) throws java.io.IOException { if (p != null) { byName.invalidate(p.getNameKey().get()); } indexer.get().index(p.getNameKey()); },12ea0d72a7e32f751c0f1ac5be337efc6351e7d4,@java.lang.Override public void evict(com.google.gerrit.reviewdb.client.Project p) throws java.io.IOException { evict(p.getNameKey()); },a633a24df9db86f0e805a9c9f3c9b5f054bedd6b,2017-10-05 18:18:54,10
113651,gerrit-server_src_main_java_com_google_gerrit_server_index_project_ProjectIndexerImpl.java,,,"@java.lang.Override public void index(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws java.io.IOException { for (com.google.gerrit.server.index.Index<?, com.google.gerrit.server.project.ProjectState> i : getWriteIndexes()) { i.replace(projectCache.get(nameKey)); } fireProjectIndexedEvent(nameKey.get()); }",6cf0d076280fca2cb176afd8fb8c68bab444466e,"@java.lang.Override public void index(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws java.io.IOException { for (com.google.gerrit.index.Index<?, com.google.gerrit.server.project.ProjectState> i : getWriteIndexes()) { i.replace(projectCache.get(nameKey)); } fireProjectIndexedEvent(nameKey.get()); }",d5c2b0bb79eaa5f1749b12d7d04e9f51a77d8be3,2017-10-05 18:18:54,10
113690,gerrit-lucene_src_main_java_com_google_gerrit_lucene_LuceneProjectIndex.java,,,"@java.lang.Override public void replace(com.google.gerrit.server.project.ProjectState projectState) throws java.io.IOException { try { replace(com.google.gerrit.lucene.LuceneProjectIndex.idTerm(projectState), toDocument(projectState, null)).get(); } catch (java.util.concurrent.ExecutionException | java.lang.InterruptedException e) { throw new java.io.IOException(e); } }",42513da1fc9dc414ca9cbfcf81dc4dbda7353e86,"@java.lang.Override public void replace(com.google.gerrit.server.project.ProjectState projectState) throws java.io.IOException { try { replace(com.google.gerrit.lucene.LuceneProjectIndex.idTerm(projectState), toDocument(projectState)).get(); } catch (java.util.concurrent.ExecutionException | java.lang.InterruptedException e) { throw new java.io.IOException(e); } }",bc35698d402f3b3db14cd996893844243933fcd5,2017-10-05 18:18:54,8
113910,gerrit-elasticsearch_src_main_java_com_google_gerrit_elasticsearch_ElasticProjectIndex.java,,,"@java.lang.Override public com.google.gerrit.server.query.DataSource<com.google.gerrit.server.project.ProjectState> getSource(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.project.ProjectState> p, com.google.gerrit.server.index.QueryOptions opts) throws com.google.gerrit.server.query.QueryParseException { return new com.google.gerrit.elasticsearch.ElasticProjectIndex.QuerySource(p, opts); }",aee5313748576e324d4d69db32d0d01cb95bde88,"@java.lang.Override public com.google.gerrit.index.query.DataSource<com.google.gerrit.server.project.ProjectState> getSource(com.google.gerrit.index.query.Predicate<com.google.gerrit.server.project.ProjectState> p, com.google.gerrit.index.QueryOptions opts) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.elasticsearch.ElasticProjectIndex.QuerySource(p, opts); }",d38ea9da871df3014df656e67f43946ba2f33399,2017-10-05 18:18:54,7
130893,gerrit-server_src_main_java_com_google_gerrit_server_git_LocalDiskRepositoryManager.java,"private org.eclipse.jgit.lib.Repository openRepository(java.nio.file.Path path, com.google.gerrit.reviewdb.client.Project.NameKey name) throws org.eclipse.jgit.errors.RepositoryNotFoundException { if (isUnreasonableName(name)) { throw new org.eclipse.jgit.errors.RepositoryNotFoundException((""Invalid name: "" + name)); } java.io.File gitDir = path.resolve(name.get()).toFile(); if (!(names.contains(name))) { if (!(name.get().endsWith(Constants.DOT_GIT_EXT))) { if ((org.eclipse.jgit.lib.RepositoryCache.FileKey.resolve(gitDir, FS.DETECTED)) != null) { onCreateProject(name); } else { throw new org.eclipse.jgit.errors.RepositoryNotFoundException(gitDir); } } else { final java.io.File directory = gitDir; if (org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository(new java.io.File(directory, org.eclipse.jgit.lib.Constants.DOT_GIT), FS.DETECTED)) { onCreateProject(name); } else if (org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository(new java.io.File(directory.getParentFile(), ((directory.getName()) + (org.eclipse.jgit.lib.Constants.DOT_GIT_EXT))), FS.DETECTED)) { onCreateProject(name); } else { throw new org.eclipse.jgit.errors.RepositoryNotFoundException(gitDir); } } } final org.eclipse.jgit.lib.RepositoryCache.FileKey loc = org.eclipse.jgit.lib.RepositoryCache.FileKey.lenient(gitDir, FS.DETECTED); try { return org.eclipse.jgit.lib.RepositoryCache.open(loc); } catch (java.io.IOException e1) { final org.eclipse.jgit.errors.RepositoryNotFoundException e2; e2 = new org.eclipse.jgit.errors.RepositoryNotFoundException((""Cannot open repository "" + name)); e2.initCause(e1); throw e2; } }",78d7c4ecca8b0d6af68aeb3262fedbd918995ac1,"private org.eclipse.jgit.lib.Repository openRepository(java.nio.file.Path path, com.google.gerrit.reviewdb.client.Project.NameKey name) throws org.eclipse.jgit.errors.RepositoryNotFoundException { if (isUnreasonableName(name)) { throw new org.eclipse.jgit.errors.RepositoryNotFoundException((""Invalid name: "" + name)); } final org.eclipse.jgit.lib.RepositoryCache.FileKey loc = org.eclipse.jgit.lib.RepositoryCache.FileKey.lenient(path.resolve(name.get()).toFile(), FS.DETECTED); try { return org.eclipse.jgit.lib.RepositoryCache.open(loc); } catch (java.io.IOException e1) { final org.eclipse.jgit.errors.RepositoryNotFoundException e2; e2 = new org.eclipse.jgit.errors.RepositoryNotFoundException((""Cannot open repository "" + name)); e2.initCause(e1); throw e2; } }",64de2bc9089f78edfe2f04c5bdc041d1de8bd29e,"private org.eclipse.jgit.lib.Repository openRepository(java.nio.file.Path path, com.google.gerrit.reviewdb.client.Project.NameKey name) throws org.eclipse.jgit.errors.RepositoryNotFoundException { if (isUnreasonableName(name)) { throw new org.eclipse.jgit.errors.RepositoryNotFoundException((""Invalid name: "" + name)); } org.eclipse.jgit.lib.RepositoryCache.FileKey loc = org.eclipse.jgit.lib.RepositoryCache.FileKey.lenient(path.resolve(name.get()).toFile(), FS.DETECTED); try { return org.eclipse.jgit.lib.RepositoryCache.open(loc); } catch (java.io.IOException e1) { final org.eclipse.jgit.errors.RepositoryNotFoundException e2; e2 = new org.eclipse.jgit.errors.RepositoryNotFoundException((""Cannot open repository "" + name)); e2.initCause(e1); throw e2; } }",c7a0f7a760277dbe55be81d24ea77761343f2210,2017-10-06 10:53:12,2
130732,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_SetAccountCommand.java,"private void setAccount() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { user = genericUserFactory.create(id); rsrc = new com.google.gerrit.server.account.AccountResource(user); try { for (java.lang.String email : addEmails) { addEmail(email); } for (java.lang.String email : deleteEmails) { deleteEmail(email); } if ((preferredEmail) != null) { putPreferred(preferredEmail); } if ((fullName) != null) { com.google.gerrit.server.account.PutName.Input in = new com.google.gerrit.server.account.PutName.Input(); in.name = fullName; putName.apply(rsrc, in); } if (((httpPassword) != null) || (clearHttpPassword)) { com.google.gerrit.server.account.PutHttpPassword.Input in = new com.google.gerrit.server.account.PutHttpPassword.Input(); in.httpPassword = httpPassword; putHttpPassword.apply(rsrc, in); } if (active) { putActive.apply(rsrc, null); } else if (inactive) { try { deleteActive.apply(rsrc, null); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } } addSshKeys = readSshKey(addSshKeys); if (!(addSshKeys.isEmpty())) { addSshKeys(addSshKeys); } deleteSshKeys = readSshKey(deleteSshKeys); if (!(deleteSshKeys.isEmpty())) { deleteSshKeys(deleteSshKeys); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }",23a4584244501c19cc7c8c4c8f8a931ed620e027,"private void setAccount() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { user = genericUserFactory.create(id); rsrc = new com.google.gerrit.server.account.AccountResource(user); try { for (java.lang.String email : addEmails) { addEmail(email); } for (java.lang.String email : deleteEmails) { deleteEmail(email); } if ((preferredEmail) != null) { putPreferred(preferredEmail); } if ((fullName) != null) { com.google.gerrit.server.account.PutName.Input in = new com.google.gerrit.server.account.PutName.Input(); in.name = fullName; putName.apply(rsrc, in); } if (((httpPassword) != null) || (clearHttpPassword)) { com.google.gerrit.server.account.HttpPasswordInput in = new com.google.gerrit.server.account.HttpPasswordInput(); in.httpPassword = httpPassword; putHttpPassword.apply(rsrc, in); } if (active) { putActive.apply(rsrc, null); } else if (inactive) { try { deleteActive.apply(rsrc, null); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } } addSshKeys = readSshKey(addSshKeys); if (!(addSshKeys.isEmpty())) { addSshKeys(addSshKeys); } deleteSshKeys = readSshKey(deleteSshKeys); if (!(deleteSshKeys.isEmpty())) { deleteSshKeys(deleteSshKeys); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }",7a30b5365807586e2356834f0239f71a8fd59a48,"private void setAccount() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { user = genericUserFactory.create(id); rsrc = new com.google.gerrit.server.account.AccountResource(user); try { for (java.lang.String email : addEmails) { addEmail(email); } for (java.lang.String email : deleteEmails) { deleteEmail(email); } if ((preferredEmail) != null) { putPreferred(preferredEmail); } if ((fullName) != null) { com.google.gerrit.server.account.PutName.Input in = new com.google.gerrit.server.account.PutName.Input(); in.name = fullName; putName.apply(rsrc, in); } if (((httpPassword) != null) || (clearHttpPassword)) { com.google.gerrit.extensions.common.HttpPasswordInput in = new com.google.gerrit.extensions.common.HttpPasswordInput(); in.httpPassword = httpPassword; putHttpPassword.apply(rsrc, in); } if (active) { putActive.apply(rsrc, null); } else if (inactive) { try { deleteActive.apply(rsrc, null); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } } addSshKeys = readSshKey(addSshKeys); if (!(addSshKeys.isEmpty())) { addSshKeys(addSshKeys); } deleteSshKeys = readSshKey(deleteSshKeys); if (!(deleteSshKeys.isEmpty())) { deleteSshKeys(deleteSshKeys); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }",4e795d1bdeab052fdce670c22485777a097ca2e0,2017-10-06 13:16:31,2
130732,gerrit-server_src_main_java_com_google_gerrit_server_account_PutHttpPassword.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { newPassword = null; } else { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }",bbf9b82885613d22683fc1b66ef17dba34ec8827,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.HttpPasswordInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } if (input == null) { input = new com.google.gerrit.server.account.HttpPasswordInput(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { newPassword = null; } else { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }",1b9f73f8af565d297fa334d56bffcd580c591da4,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.common.HttpPasswordInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } if (input == null) { input = new com.google.gerrit.extensions.common.HttpPasswordInput(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { newPassword = null; } else { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }",18bc57975eaa4c0e652131177bff7a5e4f4aa0b9,2017-10-06 13:16:31,2
130850,gerrit-server_src_main_java_com_google_gerrit_server_account_GroupCacheImpl.java,@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> load(com.google.gerrit.reviewdb.client.AccountGroup.Id key) throws java.lang.Exception { return groupQueryProvider.get().byId(key); },b198a405d38ed12f5b9b7ac030c062e09c1fc60d,"@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> load(com.google.gerrit.reviewdb.client.AccountGroup.Id key) throws java.lang.Exception { if ((groupIndexProvider.get()) != null) { return groupQueryProvider.get().byId(key); } try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { return groups.getGroup(db, key); } }",fd53e8190089bb37e8a5c44ed60a69593e4f5a7c,"@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> load(com.google.gerrit.reviewdb.client.AccountGroup.Id key) throws java.lang.Exception { if (hasGroupIndex) { return groupQueryProvider.get().byId(key); } try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { return groups.getGroup(db, key); } }",063b7294c5f43967ac8cf63dc61fbbb46d2bcbb3,2017-10-09 13:15:41,2
131570,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_AbstractPushForReview.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushToPublishMagicBranchIsAllowed() throws java.lang.Exception { createChange(""refs/publish/master""); com.google.gerrit.acceptance.PushOneCommit.Result result = pushTo(""refs/publish/master""); result.assertOkStatus(); assertThat(result.getMessage()).endsWith(""Pushing to refs/publish/* will be deprecated, use refs/for/* instead.\n""); }",a58cedf487db8e726e646da036fd7fa353070fef,"@org.junit.Test public void pushToPublishMagicBranchIsAllowed() throws java.lang.Exception { createChange(""refs/publish/master""); com.google.gerrit.acceptance.PushOneCommit.Result result = pushTo(""refs/publish/master""); result.assertOkStatus(); assertThat(result.getMessage()).endsWith(""Pushing to refs/publish/* is deprecated, use refs/for/* instead.\n""); }",bbf84a397164971b0f6102dcdce65a777da0c368,2017-10-09 15:08:04,6
131474,src_main_java_com_ericsson_gerrit_plugins_eventslog_sql_SQLQueryMaker.java,"@java.lang.Override public java.lang.String formQueryFromRequestParameters(java.util.Map<java.lang.String, java.lang.String> params) throws com.ericsson.gerrit.plugins.eventslog.MalformedQueryException { if (params == null) { return getDefaultQuery(); } java.util.Date[] dates; try { dates = parseDates(params.get(com.ericsson.gerrit.plugins.eventslog.sql.SQLQueryMaker.TIME_ONE), params.get(com.ericsson.gerrit.plugins.eventslog.sql.SQLQueryMaker.TIME_TWO)); } catch (java.text.ParseException e) { throw new com.ericsson.gerrit.plugins.eventslog.MalformedQueryException(e); } return java.lang.String.format(""SELECT * FROM %s WHERE %s BETWEEN '%s' and '%s' LIMIT %d"", com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME, com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.DATE_ENTRY, com.ericsson.gerrit.plugins.eventslog.sql.SQLQueryMaker.DATE_TIME_FORMAT.get().format(dates[0]), com.ericsson.gerrit.plugins.eventslog.sql.SQLQueryMaker.DATE_TIME_FORMAT.get().format(dates[1]), returnLimit); }",d50f0796af04339e1aa8a8ad2da66bb9d709dd4b,"@java.lang.Override public java.lang.String formQueryFromRequestParameters(java.util.Map<java.lang.String, java.lang.String> params) throws com.ericsson.gerrit.plugins.eventslog.MalformedQueryException { if (params == null) { return getDefaultQuery(); } java.lang.String[] dates; try { dates = parseDates(params.get(com.ericsson.gerrit.plugins.eventslog.sql.SQLQueryMaker.TIME_ONE), params.get(com.ericsson.gerrit.plugins.eventslog.sql.SQLQueryMaker.TIME_TWO)); } catch (java.time.format.DateTimeParseException e) { throw new com.ericsson.gerrit.plugins.eventslog.MalformedQueryException(e); } return java.lang.String.format(""SELECT * FROM %s WHERE %s BETWEEN '%s' and '%s' LIMIT %d"", com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME, com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.DATE_ENTRY, dates[0], dates[1], java.lang.Integer.valueOf(returnLimit)); }",c532d31079ac07d40effc9f9ee113e0d7fc5d794,"@java.lang.Override public java.lang.String formQueryFromRequestParameters(java.util.Map<java.lang.String, java.lang.String> params) throws com.ericsson.gerrit.plugins.eventslog.MalformedQueryException { if (params == null) { return getDefaultQuery(); } java.lang.String[] dates; try { dates = parseDates(params.get(com.ericsson.gerrit.plugins.eventslog.sql.SQLQueryMaker.TIME_ONE), params.get(com.ericsson.gerrit.plugins.eventslog.sql.SQLQueryMaker.TIME_TWO)); } catch (java.time.format.DateTimeParseException e) { throw new com.ericsson.gerrit.plugins.eventslog.MalformedQueryException(e); } return java.lang.String.format(""SELECT * FROM %s WHERE %s BETWEEN '%s' and '%s' LIMIT %d"", com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME, com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.DATE_ENTRY, dates[0], dates[1], returnLimit); }",7dee4306d73e40811386a8a51754f68b3b0a7549,2017-10-09 22:35:33,3
129966,gerrit-server_src_main_java_com_google_gerrit_server_extensions_events_ChangeRestored.java,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account restorer, java.lang.String reason, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeRestored.Event event = new com.google.gerrit.server.extensions.events.ChangeRestored.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(restorer), reason, when); for (com.google.gerrit.extensions.events.ChangeRestoredListener l : listeners) { try { l.onChangeRestored(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ChangeRestored.log.error(""Couldn't fire event"", e); } }",f2240941c3e051fb410df907b5acb17cae447527,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account restorer, java.lang.String reason, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeRestored.Event event = new com.google.gerrit.server.extensions.events.ChangeRestored.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(restorer), reason, when); for (com.google.gerrit.extensions.events.ChangeRestoredListener l : listeners) { try { l.onChangeRestored(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeRestored.log.error(""Couldn't fire event"", e); } }",b8c8604ed1faf2726320039ddf2871844b86673a,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account restorer, java.lang.String reason, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeRestored.Event event = new com.google.gerrit.server.extensions.events.ChangeRestored.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(restorer), reason, when); for (com.google.gerrit.extensions.events.ChangeRestoredListener l : listeners) { try { l.onChangeRestored(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ChangeRestored.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeRestored.log.error(""Couldn't fire event"", e); } }",e8009de7255092a4a5ec7f7904254ffc83a87109,2017-10-10 11:34:05,5
129966,gerrit-server_src_main_java_com_google_gerrit_server_extensions_events_ReviewerAdded.java,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.util.List<com.google.gerrit.reviewdb.client.Account> reviewers, com.google.gerrit.reviewdb.client.Account adder, java.sql.Timestamp when) { if ((!(listeners.iterator().hasNext())) || (reviewers.isEmpty())) { return; } try { com.google.gerrit.server.extensions.events.ReviewerAdded.Event event = new com.google.gerrit.server.extensions.events.ReviewerAdded.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), com.google.common.collect.Lists.transform(reviewers, util::accountInfo), util.accountInfo(adder), when); for (com.google.gerrit.extensions.events.ReviewerAddedListener l : listeners) { try { l.onReviewersAdded(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ReviewerAdded.log.error(""Couldn't fire event"", e); } }",d23852fadd651b4a89f4cbb240f956a50fe32386,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.util.List<com.google.gerrit.reviewdb.client.Account> reviewers, com.google.gerrit.reviewdb.client.Account adder, java.sql.Timestamp when) { if ((!(listeners.iterator().hasNext())) || (reviewers.isEmpty())) { return; } try { com.google.gerrit.server.extensions.events.ReviewerAdded.Event event = new com.google.gerrit.server.extensions.events.ReviewerAdded.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), com.google.common.collect.Lists.transform(reviewers, util::accountInfo), util.accountInfo(adder), when); for (com.google.gerrit.extensions.events.ReviewerAddedListener l : listeners) { try { l.onReviewersAdded(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ReviewerAdded.log.error(""Couldn't fire event"", e); } }",ddb7cf163db36cb6d8fd0f3c1780be8f14716849,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.util.List<com.google.gerrit.reviewdb.client.Account> reviewers, com.google.gerrit.reviewdb.client.Account adder, java.sql.Timestamp when) { if ((!(listeners.iterator().hasNext())) || (reviewers.isEmpty())) { return; } try { com.google.gerrit.server.extensions.events.ReviewerAdded.Event event = new com.google.gerrit.server.extensions.events.ReviewerAdded.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), com.google.common.collect.Lists.transform(reviewers, util::accountInfo), util.accountInfo(adder), when); for (com.google.gerrit.extensions.events.ReviewerAddedListener l : listeners) { try { l.onReviewersAdded(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ReviewerAdded.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ReviewerAdded.log.error(""Couldn't fire event"", e); } }",d5e66215f0f40c127067c448c5a1bc7bc3c2e55f,2017-10-10 11:34:05,5
129966,gerrit-server_src_main_java_com_google_gerrit_server_extensions_events_ReviewerDeleted.java,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.reviewdb.client.Account reviewer, com.google.gerrit.reviewdb.client.Account remover, java.lang.String message, java.util.Map<java.lang.String, java.lang.Short> newApprovals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, com.google.gerrit.extensions.api.changes.NotifyHandling notify, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ReviewerDeleted.Event event = new com.google.gerrit.server.extensions.events.ReviewerDeleted.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), util.accountInfo(reviewer), util.accountInfo(remover), message, util.approvals(reviewer, newApprovals, when), util.approvals(reviewer, oldApprovals, when), notify, when); for (com.google.gerrit.extensions.events.ReviewerDeletedListener listener : listeners) { try { listener.onReviewerDeleted(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, listener, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ReviewerDeleted.log.error(""Couldn't fire event"", e); } }",0df5692a7c83a4b32000847d4a6f4073a4cc3152,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.reviewdb.client.Account reviewer, com.google.gerrit.reviewdb.client.Account remover, java.lang.String message, java.util.Map<java.lang.String, java.lang.Short> newApprovals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, com.google.gerrit.extensions.api.changes.NotifyHandling notify, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ReviewerDeleted.Event event = new com.google.gerrit.server.extensions.events.ReviewerDeleted.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), util.accountInfo(reviewer), util.accountInfo(remover), message, util.approvals(reviewer, newApprovals, when), util.approvals(reviewer, oldApprovals, when), notify, when); for (com.google.gerrit.extensions.events.ReviewerDeletedListener listener : listeners) { try { listener.onReviewerDeleted(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, listener, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ReviewerDeleted.log.error(""Couldn't fire event"", e); } }",a268fa360e68fb93eebc6b8ef2d66391d4bd362d,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.reviewdb.client.Account reviewer, com.google.gerrit.reviewdb.client.Account remover, java.lang.String message, java.util.Map<java.lang.String, java.lang.Short> newApprovals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, com.google.gerrit.extensions.api.changes.NotifyHandling notify, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ReviewerDeleted.Event event = new com.google.gerrit.server.extensions.events.ReviewerDeleted.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), util.accountInfo(reviewer), util.accountInfo(remover), message, util.approvals(reviewer, newApprovals, when), util.approvals(reviewer, oldApprovals, when), notify, when); for (com.google.gerrit.extensions.events.ReviewerDeletedListener listener : listeners) { try { listener.onReviewerDeleted(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, listener, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ReviewerDeleted.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ReviewerDeleted.log.error(""Couldn't fire event"", e); } }",926f1be50c1dc391a26d3b69a44e9fe7344c0af4,2017-10-10 11:34:05,5
129966,gerrit-server_src_main_java_com_google_gerrit_server_extensions_events_CommentAdded.java,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account author, java.lang.String comment, java.util.Map<java.lang.String, java.lang.Short> approvals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.CommentAdded.Event event = new com.google.gerrit.server.extensions.events.CommentAdded.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(author), comment, util.approvals(author, approvals, when), util.approvals(author, oldApprovals, when), when); for (com.google.gerrit.extensions.events.CommentAddedListener l : listeners) { try { l.onCommentAdded(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.CommentAdded.log.error(""Couldn't fire event"", e); } }",37f86d6c13f4c0e7c6c96ef72114de46dbfa57b2,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account author, java.lang.String comment, java.util.Map<java.lang.String, java.lang.Short> approvals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.CommentAdded.Event event = new com.google.gerrit.server.extensions.events.CommentAdded.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(author), comment, util.approvals(author, approvals, when), util.approvals(author, oldApprovals, when), when); for (com.google.gerrit.extensions.events.CommentAddedListener l : listeners) { try { l.onCommentAdded(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.CommentAdded.log.error(""Couldn't fire event"", e); } }",df6c3c591132c05adf49dd4ef7bd45269a5537d9,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account author, java.lang.String comment, java.util.Map<java.lang.String, java.lang.Short> approvals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.CommentAdded.Event event = new com.google.gerrit.server.extensions.events.CommentAdded.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(author), comment, util.approvals(author, approvals, when), util.approvals(author, oldApprovals, when), when); for (com.google.gerrit.extensions.events.CommentAddedListener l : listeners) { try { l.onCommentAdded(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.CommentAdded.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.CommentAdded.log.error(""Couldn't fire event"", e); } }",0ac0c90baeac3abee6d4f2d04e1aa675c85f587f,2017-10-10 11:34:05,5
129966,gerrit-server_src_main_java_com_google_gerrit_server_extensions_events_ChangeAbandoned.java,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account abandoner, java.lang.String reason, java.sql.Timestamp when, com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeAbandoned.Event event = new com.google.gerrit.server.extensions.events.ChangeAbandoned.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(abandoner), reason, when, notifyHandling); for (com.google.gerrit.extensions.events.ChangeAbandonedListener l : listeners) { try { l.onChangeAbandoned(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ChangeAbandoned.log.error(""Couldn't fire event"", e); } }",b917bde724e8362083651c79653d44c591e83ab7,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account abandoner, java.lang.String reason, java.sql.Timestamp when, com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeAbandoned.Event event = new com.google.gerrit.server.extensions.events.ChangeAbandoned.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(abandoner), reason, when, notifyHandling); for (com.google.gerrit.extensions.events.ChangeAbandonedListener l : listeners) { try { l.onChangeAbandoned(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeAbandoned.log.error(""Couldn't fire event"", e); } }",f67a61b2c3532533878adb42e136d80dc9f2cc7d,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account abandoner, java.lang.String reason, java.sql.Timestamp when, com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeAbandoned.Event event = new com.google.gerrit.server.extensions.events.ChangeAbandoned.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(abandoner), reason, when, notifyHandling); for (com.google.gerrit.extensions.events.ChangeAbandonedListener l : listeners) { try { l.onChangeAbandoned(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ChangeAbandoned.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeAbandoned.log.error(""Couldn't fire event"", e); } }",c88d88f5d1da9fd6bb888de00dd27ee0bd316380,2017-10-10 11:34:05,5
129966,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeJson.java,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> revisions(com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.server.query.change.ChangeData cd, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> map, java.util.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId, com.google.gerrit.extensions.common.ChangeInfo changeInfo) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> res = new java.util.LinkedHashMap<>(); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { for (com.google.gerrit.reviewdb.client.PatchSet in : map.values()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = in.getId(); boolean want = false; if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { want = true; } else if (limitToPsId.isPresent()) { want = id.equals(limitToPsId.get()); } else { want = id.equals(cd.change().currentPatchSetId()); } if (want && (ctl.isVisible(db.get()))) { res.put(in.getRevision().get(), toRevisionInfo(cd, in, repo, rw, false, changeInfo)); } } return res; } }",2546058793d99c99b59f1d682ebc5734b5bbbbaa,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> revisions(com.google.gerrit.server.query.change.ChangeData cd, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> map, java.util.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId, com.google.gerrit.extensions.common.ChangeInfo changeInfo) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> res = new java.util.LinkedHashMap<>(); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { for (com.google.gerrit.reviewdb.client.PatchSet in : map.values()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = in.getId(); boolean want = false; if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { want = true; } else if (limitToPsId.isPresent()) { want = id.equals(limitToPsId.get()); } else { want = id.equals(cd.change().currentPatchSetId()); } if (want) { res.put(in.getRevision().get(), toRevisionInfo(cd, in, repo, rw, false, changeInfo)); } } return res; } }",72fc5c2b0149ea718cdc83dd735eafb12ac229fc,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> revisions(com.google.gerrit.server.query.change.ChangeData cd, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> map, java.util.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId, com.google.gerrit.extensions.common.ChangeInfo changeInfo) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> res = new java.util.LinkedHashMap<>(); java.lang.Boolean isWorldReadable = null; try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { for (com.google.gerrit.reviewdb.client.PatchSet in : map.values()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = in.getId(); boolean want = false; if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { want = true; } else if (limitToPsId.isPresent()) { want = id.equals(limitToPsId.get()); } else { want = id.equals(cd.change().currentPatchSetId()); } if (want) { if (isWorldReadable == null) { isWorldReadable = isWorldReadable(cd); } res.put(in.getRevision().get(), toRevisionInfo(cd, in, repo, rw, false, changeInfo, isWorldReadable)); } } return res; } }",e60389f7c32e0d889ae43c4bd3a1758dd134e490,2017-10-10 11:34:05,5
129966,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeJson.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean isWorldReadable(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(anonymous).database(db); com.google.gerrit.server.permissions.PermissionBackend.ForChange forChange = (lazyLoad) ? perm.change(cd) : perm.indexedChange(cd, notesFactory.createFromIndexedChange(cd.change())); try { forChange.check(ChangePermission.READ); return true; } catch (com.google.gerrit.extensions.restapi.AuthException ae) { return false; } }",156b99832edc885aadf4407f9d950300264acf96,"private boolean isWorldReadable(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { try { permissionBackendForChange(anonymous, cd).check(ChangePermission.READ); return true; } catch (com.google.gerrit.extensions.restapi.AuthException ae) { return false; } }",fe16334dce192da75ccd18f6b08de495073b767a,2017-10-10 11:34:05,5
129966,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeJson.java,"public com.google.gerrit.extensions.common.RevisionInfo getRevisionInfo(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet in) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { com.google.gerrit.extensions.common.RevisionInfo rev = toRevisionInfo(cd, in, repo, rw, true, null); accountLoader.fill(); return rev; } }",447ccb31afd564bd441ed2b90ba5e22cf5825670,"public com.google.gerrit.extensions.common.RevisionInfo getRevisionInfo(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet in) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { com.google.gerrit.extensions.common.RevisionInfo rev = toRevisionInfo(cd, in, repo, rw, true, null); accountLoader.fill(); return rev; } }",02b0b305e4b19312578a778c8a4d8776a2b58c1d,"public com.google.gerrit.extensions.common.RevisionInfo getRevisionInfo(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet in) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { com.google.gerrit.extensions.common.RevisionInfo rev = toRevisionInfo(cd, in, repo, rw, true, null, isWorldReadable(cd)); accountLoader.fill(); return rev; } }",04af92609cab2ec8819692bf007493c0664fa5b0,2017-10-10 11:34:05,5
129966,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeJson.java,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FetchInfo> makeFetchMap(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet in) throws com.google.gwtorm.server.OrmException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FetchInfo> r = new java.util.LinkedHashMap<>(); com.google.gerrit.server.project.ChangeControl ctl = changeControlFactory.controlFor(db.get(), cd.change(), anonymous); for (com.google.gerrit.extensions.registration.DynamicMap.Entry<com.google.gerrit.extensions.config.DownloadScheme> e : downloadSchemes) { java.lang.String schemeName = e.getExportName(); com.google.gerrit.extensions.config.DownloadScheme scheme = e.getProvider().get(); if ((!(scheme.isEnabled())) || ((scheme.isAuthRequired()) && (!(userProvider.get().isIdentifiedUser())))) { continue; } if ((!(scheme.isAuthSupported())) && (!(ctl.isVisible(db.get())))) { continue; } java.lang.String projectName = cd.project().get(); java.lang.String url = scheme.getUrl(projectName); java.lang.String refName = in.getRefName(); com.google.gerrit.extensions.common.FetchInfo fetchInfo = new com.google.gerrit.extensions.common.FetchInfo(url, refName); r.put(schemeName, fetchInfo); if (has(com.google.gerrit.server.change.DOWNLOAD_COMMANDS)) { com.google.gerrit.server.change.ChangeJson.populateFetchMap(scheme, downloadCommands, projectName, refName, fetchInfo); } } return r; }",877cc804f17fbb938081da871eaca7d1d55a63bb,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FetchInfo> makeFetchMap(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet in) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FetchInfo> r = new java.util.LinkedHashMap<>(); for (com.google.gerrit.extensions.registration.DynamicMap.Entry<com.google.gerrit.extensions.config.DownloadScheme> e : downloadSchemes) { java.lang.String schemeName = e.getExportName(); com.google.gerrit.extensions.config.DownloadScheme scheme = e.getProvider().get(); if ((!(scheme.isEnabled())) || ((scheme.isAuthRequired()) && (!(userProvider.get().isIdentifiedUser())))) { continue; } if ((!(scheme.isAuthSupported())) && (!(isWorldReadable(cd)))) { continue; } java.lang.String projectName = cd.project().get(); java.lang.String url = scheme.getUrl(projectName); java.lang.String refName = in.getRefName(); com.google.gerrit.extensions.common.FetchInfo fetchInfo = new com.google.gerrit.extensions.common.FetchInfo(url, refName); r.put(schemeName, fetchInfo); if (has(com.google.gerrit.server.change.DOWNLOAD_COMMANDS)) { com.google.gerrit.server.change.ChangeJson.populateFetchMap(scheme, downloadCommands, projectName, refName, fetchInfo); } } return r; }",88fa91ffa877604e7526730a5c3c11004cd23839,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FetchInfo> makeFetchMap(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet in, boolean isWorldReadable) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FetchInfo> r = new java.util.LinkedHashMap<>(); for (com.google.gerrit.extensions.registration.DynamicMap.Entry<com.google.gerrit.extensions.config.DownloadScheme> e : downloadSchemes) { java.lang.String schemeName = e.getExportName(); com.google.gerrit.extensions.config.DownloadScheme scheme = e.getProvider().get(); if ((!(scheme.isEnabled())) || ((scheme.isAuthRequired()) && (!(userProvider.get().isIdentifiedUser())))) { continue; } if ((!(scheme.isAuthSupported())) && (!isWorldReadable)) { continue; } java.lang.String projectName = cd.project().get(); java.lang.String url = scheme.getUrl(projectName); java.lang.String refName = in.getRefName(); com.google.gerrit.extensions.common.FetchInfo fetchInfo = new com.google.gerrit.extensions.common.FetchInfo(url, refName); r.put(schemeName, fetchInfo); if (has(com.google.gerrit.server.change.DOWNLOAD_COMMANDS)) { com.google.gerrit.server.change.ChangeJson.populateFetchMap(scheme, downloadCommands, projectName, refName, fetchInfo); } } return r; }",1f813d41ff1ad20c2cf8c584bf929113372c8d24,2017-10-10 11:34:05,5
129966,gerrit-server_src_main_java_com_google_gerrit_server_extensions_events_ChangeMerged.java,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account merger, java.lang.String newRevisionId, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeMerged.Event event = new com.google.gerrit.server.extensions.events.ChangeMerged.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(merger), newRevisionId, when); for (com.google.gerrit.extensions.events.ChangeMergedListener l : listeners) { try { l.onChangeMerged(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ChangeMerged.log.error(""Couldn't fire event"", e); } }",9ff5197638806d24054f34447f08a8e931ada135,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account merger, java.lang.String newRevisionId, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeMerged.Event event = new com.google.gerrit.server.extensions.events.ChangeMerged.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(merger), newRevisionId, when); for (com.google.gerrit.extensions.events.ChangeMergedListener l : listeners) { try { l.onChangeMerged(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeMerged.log.error(""Couldn't fire event"", e); } }",8497588dc4360d605f913526da26a4905420d00a,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account merger, java.lang.String newRevisionId, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeMerged.Event event = new com.google.gerrit.server.extensions.events.ChangeMerged.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(merger), newRevisionId, when); for (com.google.gerrit.extensions.events.ChangeMergedListener l : listeners) { try { l.onChangeMerged(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ChangeMerged.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeMerged.log.error(""Couldn't fire event"", e); } }",2c378f980611b2f3bb966c309c0be9a08a31fda8,2017-10-10 11:34:05,5
129966,gerrit-server_src_main_java_com_google_gerrit_server_extensions_events_RevisionCreated.java,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.reviewdb.client.Account uploader, java.sql.Timestamp when, com.google.gerrit.extensions.api.changes.NotifyHandling notify) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.RevisionCreated.Event event = new com.google.gerrit.server.extensions.events.RevisionCreated.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), util.accountInfo(uploader), when, notify); for (com.google.gerrit.extensions.events.RevisionCreatedListener l : listeners) { try { l.onRevisionCreated(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.RevisionCreated.log.error(""Couldn't fire event"", e); } }",b45072c6ef05ea149629b321fed26751575bc22a,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.reviewdb.client.Account uploader, java.sql.Timestamp when, com.google.gerrit.extensions.api.changes.NotifyHandling notify) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.RevisionCreated.Event event = new com.google.gerrit.server.extensions.events.RevisionCreated.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), util.accountInfo(uploader), when, notify); for (com.google.gerrit.extensions.events.RevisionCreatedListener l : listeners) { try { l.onRevisionCreated(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.RevisionCreated.log.error(""Couldn't fire event"", e); } }",b31fdd7dd1dec5601b1ff0cd8a55d364aae4611b,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.reviewdb.client.Account uploader, java.sql.Timestamp when, com.google.gerrit.extensions.api.changes.NotifyHandling notify) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.RevisionCreated.Event event = new com.google.gerrit.server.extensions.events.RevisionCreated.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), util.accountInfo(uploader), when, notify); for (com.google.gerrit.extensions.events.RevisionCreatedListener l : listeners) { try { l.onRevisionCreated(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.RevisionCreated.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.RevisionCreated.log.error(""Couldn't fire event"", e); } }",8c7f41bbd102cbcafb024992309972567bbe1202,2017-10-10 11:34:05,5
129966,gerrit-server_src_main_java_com_google_gerrit_server_extensions_events_VoteDeleted.java,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account reviewer, java.util.Map<java.lang.String, java.lang.Short> approvals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, com.google.gerrit.extensions.api.changes.NotifyHandling notify, java.lang.String message, com.google.gerrit.reviewdb.client.Account remover, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.VoteDeleted.Event event = new com.google.gerrit.server.extensions.events.VoteDeleted.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(reviewer), util.approvals(remover, approvals, when), util.approvals(remover, oldApprovals, when), notify, message, util.accountInfo(remover), when); for (com.google.gerrit.extensions.events.VoteDeletedListener l : listeners) { try { l.onVoteDeleted(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.VoteDeleted.log.error(""Couldn't fire event"", e); } }",06a9576ec2a3f60a462d0170345a9a6577d0b02e,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account reviewer, java.util.Map<java.lang.String, java.lang.Short> approvals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, com.google.gerrit.extensions.api.changes.NotifyHandling notify, java.lang.String message, com.google.gerrit.reviewdb.client.Account remover, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.VoteDeleted.Event event = new com.google.gerrit.server.extensions.events.VoteDeleted.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(reviewer), util.approvals(remover, approvals, when), util.approvals(remover, oldApprovals, when), notify, message, util.accountInfo(remover), when); for (com.google.gerrit.extensions.events.VoteDeletedListener l : listeners) { try { l.onVoteDeleted(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.VoteDeleted.log.error(""Couldn't fire event"", e); } }",41473142b49d430d8566e8471e3b29f0cc7e5352,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account reviewer, java.util.Map<java.lang.String, java.lang.Short> approvals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, com.google.gerrit.extensions.api.changes.NotifyHandling notify, java.lang.String message, com.google.gerrit.reviewdb.client.Account remover, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.VoteDeleted.Event event = new com.google.gerrit.server.extensions.events.VoteDeleted.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(reviewer), util.approvals(remover, approvals, when), util.approvals(remover, oldApprovals, when), notify, message, util.accountInfo(remover), when); for (com.google.gerrit.extensions.events.VoteDeletedListener l : listeners) { try { l.onVoteDeleted(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.VoteDeleted.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.VoteDeleted.log.error(""Couldn't fire event"", e); } }",89b38e781915d7a2d59212a58a7a67371cafa5aa,2017-10-10 11:34:05,5
131551,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_ProjectWatch.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List all() { return to.union(cc, bcc); }",cadd4e59245f18b886faa766af88da84eea3e43f,"com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List all() { return com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List.union(to, cc, bcc); }",e8cc76070b388009942982425beca590f31da7fa,2017-10-10 12:00:14,4
131551,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_ProjectWatch.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List union(com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List... others) { com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List union = new com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List(); for (com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List other : com.google.common.collect.Lists.asList(this, others)) { union.accounts.addAll(other.accounts); union.emails.addAll(other.emails); } return union; }",0433dd59fefb555a7512f858edf1b76c25762e74,private static com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List union(com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List... others) { com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List union = new com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List(); for (com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List other : others) { union.accounts.addAll(other.accounts); union.emails.addAll(other.emails); } return union; },d51abf881e8d45931dcdb8e31e0e419a18072e45,2017-10-10 12:00:14,4
131551,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,"private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case UPDATE_BY_SUBMIT : return projectControl.controlForRef((""refs/for/"" + (getRefName()))).canSubmit(true); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().isUseSignedOffBy())); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",2ec6f87789359b21e3b9e041951c8e93ebba540f,"private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case UPDATE_BY_SUBMIT : return projectControl.controlForRef((""refs/for/"" + (getRefName()))).canSubmit(true); case READ_PRIVATE_CHANGES : return canViewPrivateChanges(); case READ_ACCESS : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_ACCESS : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().isUseSignedOffBy())); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",244fe81611fe981ee0ecff5cd0cd1920d24bd713,"private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case UPDATE_BY_SUBMIT : return projectControl.controlForRef((""refs/for/"" + (getRefName()))).canSubmit(true); case READ_PRIVATE_CHANGES : return canViewPrivateChanges(); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().isUseSignedOffBy())); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",46e38c78be766eccb2df16b85ab387e2dd559f7d,2017-10-10 12:00:14,4
131551,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_CreateChangeSender.java,private boolean isOwnerOfProjectOrBranch(com.google.gerrit.reviewdb.client.Account.Id user) { return ((projectState) != null) && (projectState.controlFor(args.identifiedUserFactory.create(user)).controlForRef(change.getDest()).isOwner()); },9e55b9a25a397acd5ff75ab7ff76ad8aa831d210,private boolean isOwnerOfProjectOrBranch(com.google.gerrit.reviewdb.client.Account.Id userId) { return permissionBackend.user(identifiedUserFactory.create(userId)).ref(change.getDest()).testOrFalse(RefPermission.WRITE_ACCESS); },0315827524f5ebbb1b33edf474ba56f9c1c96b17,private boolean isOwnerOfProjectOrBranch(com.google.gerrit.reviewdb.client.Account.Id userId) { return permissionBackend.user(identifiedUserFactory.create(userId)).ref(change.getDest()).testOrFalse(RefPermission.WRITE_CONFIG); },7d9a000d2ed4ac65247cc6d710ff69f108d37db9,2017-10-10 12:00:14,4
131811,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_project_ProjectAccessHandler.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean canWriteConfig() throws com.google.gerrit.server.permissions.PermissionBackendException { checkNotNull(user); if ((canWriteConfig) != null) { return canWriteConfig; } try { permissionBackend.user(user).project(projectName).check(ProjectPermission.WRITE_ACCESS); canWriteConfig = true; } catch (com.google.gerrit.extensions.restapi.AuthException e) { canWriteConfig = false; } return canWriteConfig; },28f1c4ef20fc52442e6b1ee05ef20914d32d4e54,private boolean canWriteConfig() throws com.google.gerrit.server.permissions.PermissionBackendException { checkNotNull(user); if ((canWriteConfig) != null) { return canWriteConfig; } try { permissionBackend.user(user).project(projectName).check(ProjectPermission.WRITE_CONFIG); canWriteConfig = true; } catch (com.google.gerrit.extensions.restapi.AuthException e) { canWriteConfig = false; } return canWriteConfig; },0b06373f1d333e6adf079033450ecc86aa5912f1,2017-10-11 04:43:32,9
131811,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectControl.java,"private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return ((!(isHidden())) && ((user.isInternalUser()) || (canPerformOnAnyRef(Permission.READ)))) || (isOwner()); case READ : return (!(isHidden())) && (allRefsAreVisible(java.util.Collections.emptySet())); case READ_NO_CONFIG : return (!(isHidden())) && (allRefsAreVisible(com.google.common.collect.ImmutableSet.of(RefNames.REFS_CONFIG))); case CREATE_REF : return canAddRefs(); case CREATE_CHANGE : return canCreateChanges(); case RUN_RECEIVE_PACK : return canRunReceivePack(); case RUN_UPLOAD_PACK : return canRunUploadPack(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",63410519d04623acdeec40307332c20e97f8fb2d,"private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return ((!(isHidden())) && ((user.isInternalUser()) || (canPerformOnAnyRef(Permission.READ)))) || (isOwner()); case READ : return (!(isHidden())) && (allRefsAreVisible(java.util.Collections.emptySet())); case READ_NO_CONFIG : return (!(isHidden())) && (allRefsAreVisible(com.google.common.collect.ImmutableSet.of(RefNames.REFS_CONFIG))); case CREATE_REF : return canAddRefs(); case CREATE_CHANGE : return canCreateChanges(); case RUN_RECEIVE_PACK : return canRunReceivePack(); case RUN_UPLOAD_PACK : return canRunUploadPack(); case BAN_COMMIT : case READ_REF_LOG : case SET_DEFAULT_DASHBOARD : case READ_ACCESS : case WRITE_ACCESS : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",24cf17001f9090bdc411a4b9b5e23e3bf4f50128,"private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return ((!(isHidden())) && ((user.isInternalUser()) || (canPerformOnAnyRef(Permission.READ)))) || (isOwner()); case READ : return (!(isHidden())) && (allRefsAreVisible(java.util.Collections.emptySet())); case READ_NO_CONFIG : return (!(isHidden())) && (allRefsAreVisible(com.google.common.collect.ImmutableSet.of(RefNames.REFS_CONFIG))); case CREATE_REF : return canAddRefs(); case CREATE_CHANGE : return canCreateChanges(); case RUN_RECEIVE_PACK : return canRunReceivePack(); case RUN_UPLOAD_PACK : return canRunUploadPack(); case BAN_COMMIT : case READ_REFLOG : case READ_CONFIG : case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",e42bd6291a36b0a18a58978a11c9dda54b78a6eb,2017-10-11 04:43:32,9
131811,gerrit-server_src_main_java_com_google_gerrit_server_project_BanCommit.java,"@java.lang.Override protected com.google.gerrit.server.project.BanCommit.BanResultInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.server.project.BanCommit.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, java.io.IOException { com.google.gerrit.server.project.BanCommit.BanResultInfo r = new com.google.gerrit.server.project.BanCommit.BanResultInfo(); if (((input != null) && ((input.commits) != null)) && (!(input.commits.isEmpty()))) { java.util.List<org.eclipse.jgit.lib.ObjectId> commitsToBan = new java.util.ArrayList<>(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } } try { com.google.gerrit.server.git.BanCommitResult result = banCommit.ban(rsrc.getControl(), commitsToBan, input.reason); r.newlyBanned = com.google.gerrit.server.project.BanCommit.transformCommits(result.getNewlyBannedCommits()); r.alreadyBanned = com.google.gerrit.server.project.BanCommit.transformCommits(result.getAlreadyBannedCommits()); r.ignored = com.google.gerrit.server.project.BanCommit.transformCommits(result.getIgnoredObjectIds()); } catch (com.google.gerrit.common.errors.PermissionDeniedException e) { throw new com.google.gerrit.extensions.restapi.AuthException(e.getMessage()); } } return r; }",2a15222eefdca0c6f555f8bd37faf787c95bd808,"@java.lang.Override protected com.google.gerrit.server.project.BanCommit.BanResultInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.server.project.BanCommit.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, java.io.IOException { com.google.gerrit.server.project.BanCommit.BanResultInfo r = new com.google.gerrit.server.project.BanCommit.BanResultInfo(); if (((input != null) && ((input.commits) != null)) && (!(input.commits.isEmpty()))) { java.util.List<org.eclipse.jgit.lib.ObjectId> commitsToBan = new java.util.ArrayList<>(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } } try { com.google.gerrit.server.git.BanCommitResult result = banCommit.ban(rsrc.getControl(), commitsToBan, input.reason); r.newlyBanned = com.google.gerrit.server.project.BanCommit.transformCommits(result.getNewlyBannedCommits()); r.alreadyBanned = com.google.gerrit.server.project.BanCommit.transformCommits(result.getAlreadyBannedCommits()); r.ignored = com.google.gerrit.server.project.BanCommit.transformCommits(result.getIgnoredObjectIds()); } catch (com.google.gerrit.common.errors.PermissionDeniedException e) { throw new com.google.gerrit.extensions.restapi.AuthException(e.getMessage()); } } return r; }",de5c0cddccf4fc9099e7f121cd29eb67a9cc5938,"@java.lang.Override protected com.google.gerrit.server.project.BanCommit.BanResultInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.server.project.BanCommit.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, java.io.IOException { com.google.gerrit.server.project.BanCommit.BanResultInfo r = new com.google.gerrit.server.project.BanCommit.BanResultInfo(); if (((input != null) && ((input.commits) != null)) && (!(input.commits.isEmpty()))) { java.util.List<org.eclipse.jgit.lib.ObjectId> commitsToBan = new java.util.ArrayList<>(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } } com.google.gerrit.server.git.BanCommitResult result = banCommit.ban(rsrc.getControl(), commitsToBan, input.reason); r.newlyBanned = com.google.gerrit.server.project.BanCommit.transformCommits(result.getNewlyBannedCommits()); r.alreadyBanned = com.google.gerrit.server.project.BanCommit.transformCommits(result.getAlreadyBannedCommits()); r.ignored = com.google.gerrit.server.project.BanCommit.transformCommits(result.getIgnoredObjectIds()); } return r; }",21d4808b0020566bc6bd8e64099589b2219d71c2,2017-10-11 04:43:32,9
131811,gerrit-server_src_main_java_com_google_gerrit_server_change_Check.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.ChangeInfo> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.FixInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((!(rsrc.isUserOwner())) && (!(projectControlFactory.controlFor(rsrc.getProject(), rsrc.getUser()).isOwner()))) { permissionBackend.user(user).check(GlobalPermission.MAINTAIN_SERVER); } return com.google.gerrit.extensions.restapi.Response.withMustRevalidate(newChangeJson().fix(input).format(rsrc)); }",51a457b6768653dd1f34bef792047f510f593a4a,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.ChangeInfo> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.FixInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(user); if (!(rsrc.isUserOwner())) { perm.project(rsrc.getProject()).check(ProjectPermission.READ_ACCESS); } return com.google.gerrit.extensions.restapi.Response.withMustRevalidate(newChangeJson().fix(input).format(rsrc)); }",5f23fdda7041eff21d8028153421c7665411a00c,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.ChangeInfo> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.FixInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(user); if (!(rsrc.isUserOwner())) { perm.project(rsrc.getProject()).check(ProjectPermission.READ_CONFIG); } return com.google.gerrit.extensions.restapi.Response.withMustRevalidate(newChangeJson().fix(input).format(rsrc)); }",58a949a378b792c5e142e9da6e6189200f30002d,2017-10-11 04:43:32,9
131811,gerrit-server_src_main_java_com_google_gerrit_server_project_PutConfig.java,"@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException { if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""restricted to project owner""); } return apply(rsrc.getProjectState(), input); }",b80c98af3d32de65d2812cd29e9161cb5be57b07,"@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.user(user).project(rsrc.getNameKey()).check(ProjectPermission.WRITE_ACCESS); return apply(rsrc.getProjectState(), input); }",99c171c5c144951003171b546f50d4db7b97ad0b,"@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.user(user).project(rsrc.getNameKey()).check(ProjectPermission.WRITE_CONFIG); return apply(rsrc.getProjectState(), input); }",e708b61a8a06964713517871c8baedcec53c231d,2017-10-11 04:43:32,9
131811,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_project_ProjectIT.java,"@org.junit.Test public void nonOwnerCannotSetConfig() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ConfigInput input = createTestConfigInput(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage(""restricted to project owner""); gApi.projects().name(project.get()).config(input); }",ef62517fd0cdc02257db696ba995de03257e3303,"@org.junit.Test public void nonOwnerCannotSetConfig() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ConfigInput input = createTestConfigInput(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage(""write access not permitted""); gApi.projects().name(project.get()).config(input); }",5c47404d6d27df5e3dece76b07ea41ad20e7c6b6,"@org.junit.Test public void nonOwnerCannotSetConfig() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ConfigInput input = createTestConfigInput(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage(""write config not permitted""); gApi.projects().name(project.get()).config(input); }",f6e8d79a29759e9c69eeb29567594c47cfcfef86,2017-10-11 04:43:32,9
131412,src_main_java_com_googlesource_gerrit_plugins_deleteproject_DeleteLogLayout.java,"@java.lang.Override public java.lang.String format(org.apache.log4j.spi.LoggingEvent event) { final java.lang.StringBuffer buf = new java.lang.StringBuffer(128); buf.append('['); formatDate(event.getTimeStamp(), buf); buf.append(' '); buf.append(timeZone); buf.append(']'); buf.append(' '); buf.append(event.getLevel().toString()); req(DeleteLog.ACCOUNT_ID, buf, event); req(DeleteLog.USER_NAME, buf, event); buf.append(' '); buf.append(event.getMessage()); req(DeleteLog.PROJECT_NAME, buf, event); opt(DeleteLog.OPTIONS, buf, event); opt(DeleteLog.ERROR, buf, event); buf.append('\n'); return buf.toString(); }",667787a8bbc35bcbff32c0b4edbd3e171ec10cb0,"@java.lang.Override public java.lang.String format(org.apache.log4j.spi.LoggingEvent event) { final java.lang.StringBuffer buf = new java.lang.StringBuffer(128); buf.append('['); buf.append(formatDate(event.getTimeStamp())); buf.append(']'); buf.append(' '); buf.append(event.getLevel().toString()); req(DeleteLog.ACCOUNT_ID, buf, event); req(DeleteLog.USER_NAME, buf, event); buf.append(' '); buf.append(event.getMessage()); req(DeleteLog.PROJECT_NAME, buf, event); opt(DeleteLog.OPTIONS, buf, event); opt(DeleteLog.ERROR, buf, event); buf.append('\n'); return buf.toString(); }",e3df290e741e73a2f8d34d8db33cdc95dcab0b81,"@java.lang.Override public java.lang.String format(org.apache.log4j.spi.LoggingEvent event) { final java.lang.StringBuffer buf = new java.lang.StringBuffer(128); buf.append(formatDate(event.getTimeStamp())); buf.append(' '); buf.append(event.getLevel().toString()); req(DeleteLog.ACCOUNT_ID, buf, event); req(DeleteLog.USER_NAME, buf, event); buf.append(' '); buf.append(event.getMessage()); req(DeleteLog.PROJECT_NAME, buf, event); opt(DeleteLog.OPTIONS, buf, event); opt(DeleteLog.ERROR, buf, event); buf.append('\n'); return buf.toString(); }",e18ce0d1b1f75ae02404963632696c9d2d495e64,2017-10-11 12:29:05,2
131412,src_main_java_com_googlesource_gerrit_plugins_deleteproject_DeleteLogLayout.java,"private void formatDate(final long now, final java.lang.StringBuffer sbuf) { final int millis = ((int) (now % 1000)); final long rounded = now - millis; if (rounded != (lastTimeMillis)) { synchronized(calendar) { final int start = sbuf.length(); calendar.setTimeInMillis(rounded); sbuf.append(calendar.get(java.util.Calendar.YEAR)); sbuf.append('-'); sbuf.append(toTwoDigits(((calendar.get(java.util.Calendar.MONTH)) + 1))); sbuf.append('-'); sbuf.append(toTwoDigits(calendar.get(java.util.Calendar.DAY_OF_MONTH))); sbuf.append(' '); sbuf.append(toTwoDigits(calendar.get(java.util.Calendar.HOUR_OF_DAY))); sbuf.append(':'); sbuf.append(toTwoDigits(calendar.get(java.util.Calendar.MINUTE))); sbuf.append(':'); sbuf.append(toTwoDigits(calendar.get(java.util.Calendar.SECOND))); sbuf.append(','); sbuf.getChars(start, sbuf.length(), lastTimeString, 0); lastTimeMillis = rounded; } } else { sbuf.append(lastTimeString); } sbuf.append(java.lang.String.format(""%03d"", millis)); }",adeea6ae8db4e2da15add24ea87f152291d21293,"private java.lang.String formatDate(long now) { java.time.Instant when = java.time.Instant.ofEpochMilli(now); java.time.ZonedDateTime zdt = java.time.ZonedDateTime.ofInstant(when, java.time.ZoneId.systemDefault()); return zdt.format(java.time.format.DateTimeFormatter.ofPattern(""yyyy-MM-dd HH:mm:ss,SSS xxxx"")); }",385b8adab3e976546945e414182a3aae5d9d8143,"private java.lang.String formatDate(long now) { java.time.ZonedDateTime zdt = java.time.ZonedDateTime.ofInstant(java.time.Instant.ofEpochMilli(now), java.time.ZoneId.systemDefault()); return zdt.format(com.googlesource.gerrit.plugins.deleteproject.DeleteLogLayout.DATE_FORMATTER); }",e0823fb272f8d92fcbb2ac718574640dbbfae038,2017-10-11 12:29:05,2
132331,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeIsVisibleToPredicate.java,"@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (cd.fastIsVisibleTo(user)) { return true; } com.google.gerrit.reviewdb.client.Change change = cd.change(); if (change == null) { return false; } com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.createFromIndexedChange(change); boolean visible; try { visible = permissionBackend.user(user).indexedChange(cd, notes).database(db).test(ChangePermission.READ); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gwtorm.server.OrmException(""unable to check permissions"", e); } if (visible) { cd.cacheVisibleTo(user); return true; } return false; }",8ed28530cb4278727ff384333ef2eec906234010,"@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (cd.fastIsVisibleTo(user)) { return true; } com.google.gerrit.reviewdb.client.Change change = cd.change(); if (change == null) { return false; } com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.createFromIndexedChange(change); boolean visible; try { visible = permissionBackend.user(user).indexedChange(cd, notes).database(db).test(ChangePermission.READ); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { if ((e.getCause()) instanceof com.google.gerrit.server.project.NoSuchProjectException) { com.google.gerrit.server.query.change.ChangeIsVisibleToPredicate.logger.info(java.lang.String.format(""No such project: %s. Index data might be stale."", cd.project())); return false; } throw new com.google.gwtorm.server.OrmException(""unable to check permissions"", e); } if (visible) { cd.cacheVisibleTo(user); return true; } return false; }",4ece1deec8ec42f9111b85203d1820e38ef124ef,"@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (cd.fastIsVisibleTo(user)) { return true; } com.google.gerrit.reviewdb.client.Change change = cd.change(); if (change == null) { return false; } com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.createFromIndexedChange(change); boolean visible; try { visible = permissionBackend.user(user).indexedChange(cd, notes).database(db).test(ChangePermission.READ); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { if ((e.getCause()) instanceof com.google.gerrit.server.project.NoSuchProjectException) { com.google.gerrit.server.query.change.ChangeIsVisibleToPredicate.logger.info(""No such project: {}"", cd.project()); return false; } throw new com.google.gwtorm.server.OrmException(""unable to check permissions"", e); } if (visible) { cd.cacheVisibleTo(user); return true; } return false; }",a85b550cfcb735285e0ca344b8804f5b0a3e5f81,2017-10-11 13:20:29,2
132371,src_main_java_com_googlesource_gerrit_plugins_reviewers_ChangeEventListener.java,"private java.util.Set<com.google.gerrit.reviewdb.client.Account> toAccounts(java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p, com.google.gerrit.extensions.common.AccountInfo uploader) { java.util.Set<com.google.gerrit.reviewdb.client.Account> reviewers = com.google.common.collect.Sets.newHashSetWithExpectedSize(in.size()); com.google.gerrit.server.account.GroupMembers groupMembers = null; for (java.lang.String r : in) { try { com.google.gerrit.reviewdb.client.Account account = accountResolver.find(r); if (account != null) { reviewers.add(account); continue; } } catch (com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.googlesource.gerrit.plugins.reviewers.ChangeEventListener.log.error((""Failed to resolve account "" + r), e); continue; } if (groupMembers == null) { java.lang.String uploaderNameEmail = java.lang.String.format(""%s <%s>"", uploader.name, uploader.email); try { com.google.gerrit.reviewdb.client.Account uploaderAccount = accountResolver.findByNameOrEmail(uploaderNameEmail); if (uploaderAccount != null) { groupMembers = groupMembersFactory.create(identifiedUserFactory.create(uploaderAccount.getId())); } } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { com.googlesource.gerrit.plugins.reviewers.ChangeEventListener.log.warn(java.lang.String.format(""Failed to list accounts for group %s, cannot retrieve uploader account %s"", r, uploaderNameEmail), e); } try { if (groupMembers != null) { reviewers.addAll(groupMembers.listAccounts(groupsCollection.get().parse(r).getGroupUUID(), p)); } else { com.googlesource.gerrit.plugins.reviewers.ChangeEventListener.log.warn(java.lang.String.format(""Failed to list accounts for group %s; cannot retrieve uploader account for %s"", r, uploader.email)); } } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ChangeEventListener.log.warn(java.lang.String.format(""Reviewer %s is neither an account nor a group"", r)); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.ChangeEventListener.log.warn(java.lang.String.format(""Failed to list accounts for group %s and project %s"", r, p)); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ChangeEventListener.log.warn(java.lang.String.format(""Failed to list accounts for group %s"", r), e); } } } return reviewers; }",0ead54ca6a369a27b4c4790d446015815d10ff62,"private java.util.Set<com.google.gerrit.reviewdb.client.Account> toAccounts(java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p, com.google.gerrit.extensions.common.AccountInfo uploader) { java.util.Set<com.google.gerrit.reviewdb.client.Account> reviewers = com.google.common.collect.Sets.newHashSetWithExpectedSize(in.size()); for (java.lang.String r : in) { try { com.google.gerrit.reviewdb.client.Account account = accountResolver.find(r); if (account != null) { reviewers.add(account); continue; } } catch (com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.googlesource.gerrit.plugins.reviewers.ChangeEventListener.log.error((""Failed to resolve account "" + r), e); continue; } if ((groupMembers) == null) { try { reviewers.addAll(groupMembers.listAccounts(groupsCollection.get().parse(r).getGroupUUID(), p)); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ChangeEventListener.log.warn(java.lang.String.format(""Reviewer %s is neither an account nor a group"", r)); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.ChangeEventListener.log.warn(java.lang.String.format(""Failed to list accounts for group %s and project %s"", r, p)); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ChangeEventListener.log.warn(java.lang.String.format(""Failed to list accounts for group %s"", r), e); } } } return reviewers; }",9a3645fe7665c952af885a55412830e923953af0,"private java.util.Set<com.google.gerrit.reviewdb.client.Account> toAccounts(java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p) { java.util.Set<com.google.gerrit.reviewdb.client.Account> reviewers = com.google.common.collect.Sets.newHashSetWithExpectedSize(in.size()); for (java.lang.String r : in) { try { com.google.gerrit.reviewdb.client.Account account = accountResolver.find(r); if (account != null) { reviewers.add(account); continue; } } catch (com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.googlesource.gerrit.plugins.reviewers.ChangeEventListener.log.error((""Failed to resolve account "" + r), e); continue; } try { reviewers.addAll(groupMembers.listAccounts(groupsCollection.get().parse(r).getGroupUUID(), p)); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ChangeEventListener.log.warn(java.lang.String.format(""Reviewer %s is neither an account nor a group"", r)); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.ChangeEventListener.log.warn(java.lang.String.format(""Failed to list accounts for group %s and project %s"", r, p)); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ChangeEventListener.log.warn(java.lang.String.format(""Failed to list accounts for group %s"", r), e); } } return reviewers; }",8b1eaa0f9385e3d97ce4d96ecd148144ece77fa7,2017-10-11 16:18:53,3
132113,gerrit-server_src_main_java_com_google_gerrit_server_git_receive_ReplaceOp.java,"com.google.gerrit.server.git.receive.ReplaceOp create(com.google.gerrit.server.project.ProjectControl projectControl, com.google.gerrit.reviewdb.client.Branch.NameKey dest, boolean checkMergedInto, @com.google.inject.assistedinject.Assisted(""priorPatchSetId"") com.google.gerrit.reviewdb.client.PatchSet.Id priorPatchSetId, @com.google.inject.assistedinject.Assisted(""priorCommitId"") org.eclipse.jgit.lib.ObjectId priorCommit, @com.google.inject.assistedinject.Assisted(""patchSetId"") com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, @com.google.inject.assistedinject.Assisted(""commitId"") org.eclipse.jgit.lib.ObjectId commitId, com.google.gerrit.reviewdb.client.PatchSetInfo info, java.util.List<java.lang.String> groups, @com.google.gerrit.common.Nullable com.google.gerrit.server.git.receive.ReceiveCommits.MagicBranchInput magicBranch, @com.google.gerrit.common.Nullable org.eclipse.jgit.transport.PushCertificate pushCertificate);",9243201643095ecb55e308e1fa7cf91d7486d6ba,"com.google.gerrit.server.git.receive.ReplaceOp create(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, com.google.gerrit.reviewdb.client.Branch.NameKey dest, boolean checkMergedInto, @com.google.inject.assistedinject.Assisted(""priorPatchSetId"") com.google.gerrit.reviewdb.client.PatchSet.Id priorPatchSetId, @com.google.inject.assistedinject.Assisted(""priorCommitId"") org.eclipse.jgit.lib.ObjectId priorCommit, @com.google.inject.assistedinject.Assisted(""patchSetId"") com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, @com.google.inject.assistedinject.Assisted(""commitId"") org.eclipse.jgit.lib.ObjectId commitId, com.google.gerrit.reviewdb.client.PatchSetInfo info, java.util.List<java.lang.String> groups, @com.google.gerrit.common.Nullable com.google.gerrit.server.git.receive.ReceiveCommits.MagicBranchInput magicBranch, @com.google.gerrit.common.Nullable org.eclipse.jgit.transport.PushCertificate pushCertificate);",7edf028e9b2f6f13693ffbbaf62d2197c4a3882d,"com.google.gerrit.server.git.receive.ReplaceOp create(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.reviewdb.client.Branch.NameKey dest, boolean checkMergedInto, @com.google.inject.assistedinject.Assisted(""priorPatchSetId"") com.google.gerrit.reviewdb.client.PatchSet.Id priorPatchSetId, @com.google.inject.assistedinject.Assisted(""priorCommitId"") org.eclipse.jgit.lib.ObjectId priorCommit, @com.google.inject.assistedinject.Assisted(""patchSetId"") com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, @com.google.inject.assistedinject.Assisted(""commitId"") org.eclipse.jgit.lib.ObjectId commitId, com.google.gerrit.reviewdb.client.PatchSetInfo info, java.util.List<java.lang.String> groups, @com.google.gerrit.common.Nullable com.google.gerrit.server.git.receive.ReceiveCommits.MagicBranchInput magicBranch, @com.google.gerrit.common.Nullable org.eclipse.jgit.transport.PushCertificate pushCertificate);",53c3f46ff0b5f967b1f8c8e035f9408ba199ab73,2017-10-12 08:31:14,2
132113,gerrit-server_src_main_java_com_google_gerrit_server_git_receive_ReceiveCommits.java,"void addOps(com.google.gerrit.server.update.BatchUpdate bu, @com.google.gerrit.common.Nullable com.google.gerrit.server.git.MultiProgressMonitor.Task progress) throws java.io.IOException { if (((magicBranch) != null) && ((magicBranch.edit) || (magicBranch.draft))) { bu.addOp(notes.getChangeId(), new com.google.gerrit.server.git.receive.ReceiveCommits.ReindexOnlyOp()); if ((prev) != null) { bu.addRepoOnlyOp(new com.google.gerrit.server.git.receive.ReceiveCommits.UpdateOneRefOp(prev)); } bu.addRepoOnlyOp(new com.google.gerrit.server.git.receive.ReceiveCommits.UpdateOneRefOp(cmd)); return; } org.eclipse.jgit.revwalk.RevWalk rw = rp.getRevWalk(); org.eclipse.jgit.revwalk.RevCommit newCommit = rw.parseCommit(newCommitId); rw.parseBody(newCommit); org.eclipse.jgit.revwalk.RevCommit priorCommit = revisions.inverse().get(priorPatchSet); replaceOp = replaceOpFactory.create(projectControl, notes.getChange().getDest(), checkMergedInto, priorPatchSet, priorCommit, psId, newCommit, info, groups, magicBranch, rp.getPushCertificate()).setRequestScopePropagator(requestScopePropagator); bu.addOp(notes.getChangeId(), replaceOp); if (progress != null) { bu.addOp(notes.getChangeId(), new com.google.gerrit.server.git.receive.ChangeProgressOp(progress)); } }",576f55eb36879fd01e46e070d046ce43302d7bda,"void addOps(com.google.gerrit.server.update.BatchUpdate bu, @com.google.gerrit.common.Nullable com.google.gerrit.server.git.MultiProgressMonitor.Task progress) throws java.io.IOException { if (((magicBranch) != null) && ((magicBranch.edit) || (magicBranch.draft))) { bu.addOp(notes.getChangeId(), new com.google.gerrit.server.git.receive.ReceiveCommits.ReindexOnlyOp()); if ((prev) != null) { bu.addRepoOnlyOp(new com.google.gerrit.server.git.receive.ReceiveCommits.UpdateOneRefOp(prev)); } bu.addRepoOnlyOp(new com.google.gerrit.server.git.receive.ReceiveCommits.UpdateOneRefOp(cmd)); return; } org.eclipse.jgit.revwalk.RevWalk rw = rp.getRevWalk(); org.eclipse.jgit.revwalk.RevCommit newCommit = rw.parseCommit(newCommitId); rw.parseBody(newCommit); org.eclipse.jgit.revwalk.RevCommit priorCommit = revisions.inverse().get(priorPatchSet); replaceOp = replaceOpFactory.create(projectState, user, notes.getChange().getDest(), checkMergedInto, priorPatchSet, priorCommit, psId, newCommit, info, groups, magicBranch, rp.getPushCertificate()).setRequestScopePropagator(requestScopePropagator); bu.addOp(notes.getChangeId(), replaceOp); if (progress != null) { bu.addOp(notes.getChangeId(), new com.google.gerrit.server.git.receive.ChangeProgressOp(progress)); } }",f564a0a3ac4a158ac4875925d1a691ac52487806,"void addOps(com.google.gerrit.server.update.BatchUpdate bu, @com.google.gerrit.common.Nullable com.google.gerrit.server.git.MultiProgressMonitor.Task progress) throws java.io.IOException { if (((magicBranch) != null) && ((magicBranch.edit) || (magicBranch.draft))) { bu.addOp(notes.getChangeId(), new com.google.gerrit.server.git.receive.ReceiveCommits.ReindexOnlyOp()); if ((prev) != null) { bu.addRepoOnlyOp(new com.google.gerrit.server.git.receive.ReceiveCommits.UpdateOneRefOp(prev)); } bu.addRepoOnlyOp(new com.google.gerrit.server.git.receive.ReceiveCommits.UpdateOneRefOp(cmd)); return; } org.eclipse.jgit.revwalk.RevWalk rw = rp.getRevWalk(); org.eclipse.jgit.revwalk.RevCommit newCommit = rw.parseCommit(newCommitId); rw.parseBody(newCommit); org.eclipse.jgit.revwalk.RevCommit priorCommit = revisions.inverse().get(priorPatchSet); replaceOp = replaceOpFactory.create(projectState, notes.getChange().getDest(), checkMergedInto, priorPatchSet, priorCommit, psId, newCommit, info, groups, magicBranch, rp.getPushCertificate()).setRequestScopePropagator(requestScopePropagator); bu.addOp(notes.getChangeId(), replaceOp); if (progress != null) { bu.addOp(notes.getChangeId(), new com.google.gerrit.server.git.receive.ChangeProgressOp(progress)); } }",76f4e8e73dcb57811b3758d68025738d1f376bbc,2017-10-12 08:31:14,2
132230,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_Upload.java,"@java.lang.Override protected void runImpl() throws com.google.gerrit.sshd.commands.Failure, java.io.IOException { try { permissionBackend.user(projectControl.getUser()).project(projectControl.getProject().getNameKey()).check(ProjectPermission.RUN_UPLOAD_PACK); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.sshd.commands.Failure(1, ""fatal: upload-pack not permitted on this server""); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.sshd.commands.Failure(1, (""fatal: unable to check permissions "" + e)); } final org.eclipse.jgit.transport.UploadPack up = new org.eclipse.jgit.transport.UploadPack(repo); up.setAdvertiseRefsHook(refFilterFactory.create(projectControl.getProjectState(), repo)); up.setPackConfig(config.getPackConfig()); up.setTimeout(config.getTimeout()); up.setPostUploadHook(org.eclipse.jgit.transport.PostUploadHookChain.newChain(com.google.common.collect.Lists.newArrayList(postUploadHooks))); java.util.List<org.eclipse.jgit.transport.PreUploadHook> allPreUploadHooks = com.google.common.collect.Lists.newArrayList(preUploadHooks); allPreUploadHooks.add(uploadValidatorsFactory.create(project, repo, session.getRemoteAddressAsString())); up.setPreUploadHook(org.eclipse.jgit.transport.PreUploadHookChain.newChain(allPreUploadHooks)); for (com.google.gerrit.server.git.UploadPackInitializer initializer : uploadPackInitializers) { initializer.init(projectControl.getProject().getNameKey(), up); } try { up.upload(in, out, err); session.setPeerAgent(up.getPeerUserAgent()); } catch (com.google.gerrit.server.git.validators.UploadValidationException e) { if (!(e.isOutput())) { up.sendMessage(e.getMessage()); } } }",a3c4372735211864513134314e2608515bb2ba25,"@java.lang.Override protected void runImpl() throws com.google.gerrit.sshd.commands.Failure, java.io.IOException { try { permissionBackend.user(userProvider.get()).project(projectState.getNameKey()).check(ProjectPermission.RUN_UPLOAD_PACK); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.sshd.commands.Failure(1, ""fatal: upload-pack not permitted on this server""); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.sshd.commands.Failure(1, (""fatal: unable to check permissions "" + e)); } final org.eclipse.jgit.transport.UploadPack up = new org.eclipse.jgit.transport.UploadPack(repo); up.setAdvertiseRefsHook(refFilterFactory.create(projectState, repo)); up.setPackConfig(config.getPackConfig()); up.setTimeout(config.getTimeout()); up.setPostUploadHook(org.eclipse.jgit.transport.PostUploadHookChain.newChain(com.google.common.collect.Lists.newArrayList(postUploadHooks))); java.util.List<org.eclipse.jgit.transport.PreUploadHook> allPreUploadHooks = com.google.common.collect.Lists.newArrayList(preUploadHooks); allPreUploadHooks.add(uploadValidatorsFactory.create(project, repo, session.getRemoteAddressAsString())); up.setPreUploadHook(org.eclipse.jgit.transport.PreUploadHookChain.newChain(allPreUploadHooks)); for (com.google.gerrit.server.git.UploadPackInitializer initializer : uploadPackInitializers) { initializer.init(projectState.getNameKey(), up); } try { up.upload(in, out, err); session.setPeerAgent(up.getPeerUserAgent()); } catch (com.google.gerrit.server.git.validators.UploadValidationException e) { if (!(e.isOutput())) { up.sendMessage(e.getMessage()); } } }",b02ff72d795ccf758d8ec93a42a4ff52c2cfd1bf,"@java.lang.Override protected void runImpl() throws com.google.gerrit.sshd.commands.Failure, java.io.IOException { try { permissionBackend.user(user).project(projectState.getNameKey()).check(ProjectPermission.RUN_UPLOAD_PACK); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.sshd.commands.Failure(1, ""fatal: upload-pack not permitted on this server""); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.sshd.commands.Failure(1, (""fatal: unable to check permissions "" + e)); } final org.eclipse.jgit.transport.UploadPack up = new org.eclipse.jgit.transport.UploadPack(repo); up.setAdvertiseRefsHook(refFilterFactory.create(projectState, repo)); up.setPackConfig(config.getPackConfig()); up.setTimeout(config.getTimeout()); up.setPostUploadHook(org.eclipse.jgit.transport.PostUploadHookChain.newChain(com.google.common.collect.Lists.newArrayList(postUploadHooks))); java.util.List<org.eclipse.jgit.transport.PreUploadHook> allPreUploadHooks = com.google.common.collect.Lists.newArrayList(preUploadHooks); allPreUploadHooks.add(uploadValidatorsFactory.create(project, repo, session.getRemoteAddressAsString())); up.setPreUploadHook(org.eclipse.jgit.transport.PreUploadHookChain.newChain(allPreUploadHooks)); for (com.google.gerrit.server.git.UploadPackInitializer initializer : uploadPackInitializers) { initializer.init(projectState.getNameKey(), up); } try { up.upload(in, out, err); session.setPeerAgent(up.getPeerUserAgent()); } catch (com.google.gerrit.server.git.validators.UploadValidationException e) { if (!(e.isOutput())) { up.sendMessage(e.getMessage()); } } }",50bc005ed0901a67584f731163e818cf7995ffe4,2017-10-12 08:56:10,3
132230,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_IndexProjectCommand.java,"private void index(com.google.gerrit.server.project.ProjectControl projectControl) { try { index.apply(new com.google.gerrit.server.project.ProjectResource(projectControl.getProjectState(), projectControl.getUser()), null); } catch (java.lang.Exception e) { writeError(""error"", java.lang.String.format(""Unable to index %s: %s"", projectControl.getProject().getName(), e.getMessage())); } }",5578e809cf92e62e73d5b1a5e89f0d111539b0d1,"private void index(com.google.gerrit.server.project.ProjectState projectState) { try { index.apply(new com.google.gerrit.server.project.ProjectResource(projectState, userProvider.get()), null); } catch (java.lang.Exception e) { writeError(""error"", java.lang.String.format(""Unable to index %s: %s"", projectState.getName(), e.getMessage())); } }",ccd6d0adf1fa75b187678f99d7989522b729d97d,"private void index(com.google.gerrit.server.project.ProjectState projectState) { try { index.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), null); } catch (java.lang.Exception e) { writeError(""error"", java.lang.String.format(""Unable to index %s: %s"", projectState.getName(), e.getMessage())); } }",48d322c0d4e205a3ad5f90f6ab632b6da18832e1,2017-10-12 08:56:10,3
132230,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_BanCommitCommand.java,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.project.BanCommit.Input input = BanCommit.Input.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, ObjectId::getName)); input.reason = reason; com.google.gerrit.server.project.BanCommit.BanResultInfo r = banCommit.apply(new com.google.gerrit.server.project.ProjectResource(projectControl.getProjectState(), projectControl.getUser()), input); printCommits(r.newlyBanned, ""The following commits were banned""); printCommits(r.alreadyBanned, ""The following commits were already banned""); printCommits(r.ignored, ""The following ids do not represent commits and were ignored""); } catch (java.lang.Exception e) { throw die(e); } }",790823a6c320d2a0c01b49c73dc1aa38f4d6afc4,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.project.BanCommit.Input input = BanCommit.Input.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, ObjectId::getName)); input.reason = reason; com.google.gerrit.server.project.BanCommit.BanResultInfo r = banCommit.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user.get()), input); printCommits(r.newlyBanned, ""The following commits were banned""); printCommits(r.alreadyBanned, ""The following commits were already banned""); printCommits(r.ignored, ""The following ids do not represent commits and were ignored""); } catch (java.lang.Exception e) { throw die(e); } }",8b0a2d7ced58684aebf06e26b4b7cc527de6a3e7,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.project.BanCommit.Input input = BanCommit.Input.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, ObjectId::getName)); input.reason = reason; com.google.gerrit.server.project.BanCommit.BanResultInfo r = banCommit.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), input); printCommits(r.newlyBanned, ""The following commits were banned""); printCommits(r.alreadyBanned, ""The following commits were already banned""); printCommits(r.ignored, ""The following ids do not represent commits and were ignored""); } catch (java.lang.Exception e) { throw die(e); } }",c70e07ca2c9ddf3028a0f911c3d27346edc1d711,2017-10-12 08:56:10,3
128571,gerrit-server_src_main_java_com_google_gerrit_server_group_ListGroups.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private java.util.List<com.google.gerrit.extensions.common.GroupInfo> getGroupsOwnedBy(com.google.gerrit.reviewdb.client.AccountGroup.UUID owner) { return groupCache.ownedBy(owner).stream().map(( g) -> toGroupInfo(g)).collect(java.util.stream.Collectors.toList()); },999fb80d722d9eaea994d217c5bf7ee68a212c8a,"private java.util.List<com.google.gerrit.extensions.common.GroupInfo> filterGroupsOwnedBy(java.util.function.Predicate<com.google.gerrit.common.data.GroupDescription.Internal> filter) throws com.google.gwtorm.server.OrmException { java.util.regex.Pattern pattern = getRegexPattern(); java.util.stream.Stream<com.google.gerrit.common.data.GroupDescription.Internal> foundGroups = groups.getAll(db.get()).map(GroupDescriptions::forAccountGroup).filter(( group) -> !(isNotRelevant(pattern, group))).filter(filter).sorted(com.google.gerrit.server.group.ListGroups.GROUP_COMPARATOR).skip(start); if ((limit) > 0) { foundGroups = foundGroups.limit(limit); } java.util.List<com.google.gerrit.common.data.GroupDescription.Internal> ownedGroups = foundGroups.collect(toImmutableList()); java.util.List<com.google.gerrit.extensions.common.GroupInfo> groupInfos = new java.util.ArrayList(ownedGroups.size()); for (com.google.gerrit.common.data.GroupDescription.Internal group : ownedGroups) { groupInfos.add(json.addOptions(options).format(group)); } return groupInfos; }",f41c17e4741f2d8e868d0371c1fb02801fb963f1,2017-10-12 12:26:13,10
128571,gerrit-server_src_main_java_com_google_gerrit_server_group_ListGroups.java,"public java.util.List<com.google.gerrit.extensions.common.GroupInfo> get() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (!(com.google.common.base.Strings.isNullOrEmpty(suggest))) { return suggestGroups(); } if ((!(com.google.common.base.Strings.isNullOrEmpty(matchSubstring))) && (!(com.google.common.base.Strings.isNullOrEmpty(matchRegex)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""Specify one of m/r""); } if (owned) { return getGroupsOwnedBy(((user) != null ? userFactory.create(user) : identifiedUser.get())); } if ((user) != null) { return accountGetGroups.apply(new com.google.gerrit.server.account.AccountResource(userFactory.create(user))); } return getAllGroups(); }",39b718995f9c1f00dfa8c18d4f4e5abf3967e917,"public java.util.List<com.google.gerrit.extensions.common.GroupInfo> get() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (!(com.google.common.base.Strings.isNullOrEmpty(suggest))) { return suggestGroups(); } if ((!(com.google.common.base.Strings.isNullOrEmpty(matchSubstring))) && (!(com.google.common.base.Strings.isNullOrEmpty(matchRegex)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""Specify one of m/r""); } if ((ownedBy) != null) { return getGroupsOwnedBy(ownedBy); } if (owned) { return getGroupsOwnedBy(((user) != null ? userFactory.create(user) : identifiedUser.get())); } if ((user) != null) { return accountGetGroups.apply(new com.google.gerrit.server.account.AccountResource(userFactory.create(user))); } return getAllGroups(); }",ee2e6262f8406028479cefe3091da91beccd33ea,"public java.util.List<com.google.gerrit.extensions.common.GroupInfo> get() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { if (!(com.google.common.base.Strings.isNullOrEmpty(suggest))) { return suggestGroups(); } if ((!(com.google.common.base.Strings.isNullOrEmpty(matchSubstring))) && (!(com.google.common.base.Strings.isNullOrEmpty(matchRegex)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""Specify one of m/r""); } if ((ownedBy) != null) { return getGroupsOwnedBy(ownedBy); } if (owned) { return getGroupsOwnedBy(((user) != null ? userFactory.create(user) : identifiedUser.get())); } if ((user) != null) { return accountGetGroups.apply(new com.google.gerrit.server.account.AccountResource(userFactory.create(user))); } return getAllGroups(); }",399d6bb169c4cfbb4a6bd4ff73f29154c3f783e6,2017-10-12 12:26:13,10
128571,gerrit-server_src_main_java_com_google_gerrit_server_group_ListGroups.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private com.google.gerrit.extensions.common.GroupInfo toGroupInfo(com.google.gerrit.reviewdb.client.AccountGroup group) { com.google.gerrit.extensions.common.GroupInfo info = new com.google.gerrit.extensions.common.GroupInfo(); info.description = group.getDescription(); info.name = group.getName(); info.id = group.getId().toString(); return info; },22b05735aca4643f6434ccf307db1477bc25095d,"private java.util.List<com.google.gerrit.extensions.common.GroupInfo> getGroupsOwnedBy(java.lang.String id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { java.lang.String uuid = groupsCollection.parse(id).getGroupUUID().get(); return filterGroupsOwnedBy(( group) -> group.getOwnerGroupUUID().get().equals(uuid)); }",1bdc4ebc87403ad6eac08d9185a4c06ee9bba596,2017-10-12 12:26:13,10
128571,gerrit-server_src_main_java_com_google_gerrit_server_group_ListGroups.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.kohsuke.args4j.Option(name = ""--owned-by"", usage = ""list groups owned by the given group"") public void setOwnedBy(com.google.gerrit.reviewdb.client.AccountGroup.UUID ownedBy) { this.ownedBy = ownedBy; }",1d8008f16a7777e5200b90364a04dd48eab200aa,"@org.kohsuke.args4j.Option(name = ""--owned-by"", usage = ""list groups owned by the given group uuid"") public void setOwnedBy(java.lang.String ownedBy) { this.ownedBy = ownedBy; }",4d6bb13e026ac4db277600e36d0ccb4a4f6ea6c8,2017-10-12 12:26:13,10
128571,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_api_groups_Groups.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public AccountGroup.UUID getOwnedBy() { return ownedBy; },6ed202dec601c3357ddc70ec20500ca88f05c57d,public java.lang.String getOwnedBy() { return ownedBy; },007aa1e649667134750fae8cfef8ec77c86e9c92,2017-10-12 12:26:13,10
128571,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_api_groups_Groups.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.google.gerrit.extensions.api.groups.Groups.ListRequest withOwnedBy(com.google.gerrit.reviewdb.client.AccountGroup.UUID ownedBy) { this.ownedBy = ownedBy; return this; },02657738411212ef40d86c17ec0a3712b501a0e4,public com.google.gerrit.extensions.api.groups.Groups.ListRequest withOwnedBy(java.lang.String ownedBy) { this.ownedBy = ownedBy; return this; },319a6305dd9752a10620b8237aebb1eec0f8154d,2017-10-12 12:26:13,10
128571,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void getGroupsByOwner() throws java.lang.Exception { java.lang.String parent = createGroup(""test-parent""); java.util.List<java.lang.String> children = java.util.Arrays.asList(createGroup(""test-child1"", parent), createGroup(""test-child2"", parent)); for (java.lang.String c : children) { assertThat(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(c)).isPresent()).isTrue(); assertThat(gApi.groups().id(c).owner().name).isEqualTo(parent); } java.util.List<com.google.gerrit.extensions.common.GroupInfo> owned = gApi.groups().list().withOwnedBy(getFromCache(parent).getGroupUUID()).get(); assertThat(owned).hasSize(2); assertThat(owned.stream().map(( g) -> g.name).collect(java.util.stream.Collectors.toList())).containsExactlyElementsIn(children); }",bb947aa90d9d5c9bb0944be0a71b6f61e71be0f7,"@org.junit.Test public void getGroupsByOwner() throws java.lang.Exception { java.lang.String parent = createGroup(""test-parent""); java.util.List<java.lang.String> children = java.util.Arrays.asList(createGroup(""test-child1"", parent), createGroup(""test-child2"", parent)); java.util.List<com.google.gerrit.extensions.common.GroupInfo> owned = gApi.groups().list().withOwnedBy(getFromCache(parent).getGroupUUID().get()).get(); assertThat(owned.stream().map(( g) -> g.name).collect(java.util.stream.Collectors.toList())).containsExactlyElementsIn(children); owned = gApi.groups().list().withOwnedBy(parent).get(); assertThat(owned.stream().map(( g) -> g.name).collect(java.util.stream.Collectors.toList())).containsExactlyElementsIn(children); owned = gApi.groups().list().withOwnedBy(owned.get(0).id).get(); assertThat(owned).isEmpty(); exception.expect(com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); exception.expectMessage(""Group Not Found: does-not-exist""); gApi.groups().list().withOwnedBy(""does-not-exist"").get(); }",546628048e910862c34f9402bbdb76d6c4a60bef,2017-10-12 12:26:13,10
115070,gerrit-server_src_main_java_com_google_gerrit_server_change_PostReview.java,"private void checkLabels(com.google.gerrit.server.change.RevisionResource rsrc, boolean strict, java.util.Map<java.lang.String, java.lang.Short> labels) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.common.data.LabelTypes types = rsrc.getControl().getLabelTypes(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions(); java.util.Iterator<java.util.Map.Entry<java.lang.String, java.lang.Short>> itr = labels.entrySet().iterator(); while (itr.hasNext()) { java.util.Map.Entry<java.lang.String, java.lang.Short> ent = itr.next(); com.google.gerrit.common.data.LabelType lt = types.byLabel(ent.getKey()); if (lt == null) { if (strict) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""label \""%s\"" is not a configured label"", ent.getKey())); } itr.remove(); continue; } if (((ent.getValue()) == null) || ((ent.getValue()) == 0)) { continue; } if ((lt.getValue(ent.getValue())) == null) { if (strict) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""label \""%s\"": %d is not a valid value"", ent.getKey(), ent.getValue())); } itr.remove(); continue; } short val = ent.getValue(); try { perm.check(new com.google.gerrit.server.permissions.LabelPermission.WithValue(lt, val)); } catch (com.google.gerrit.extensions.restapi.AuthException e) { if (strict) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format(""Applying label \""%s\"": %d is restricted"", lt.getName(), val)); } ent.setValue(perm.squashThenCheck(lt, val)); } } }",151429828a38bbcf9915f4f6f89749f81df2bff3,"private void checkLabels(com.google.gerrit.server.change.RevisionResource rsrc, java.util.Map<java.lang.String, java.lang.Short> labels) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.common.data.LabelTypes types = rsrc.getControl().getLabelTypes(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions(); java.util.Iterator<java.util.Map.Entry<java.lang.String, java.lang.Short>> itr = labels.entrySet().iterator(); while (itr.hasNext()) { java.util.Map.Entry<java.lang.String, java.lang.Short> ent = itr.next(); com.google.gerrit.common.data.LabelType lt = types.byLabel(ent.getKey()); if (lt == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""label \""%s\"" is not a configured label"", ent.getKey())); } if (((ent.getValue()) == null) || ((ent.getValue()) == 0)) { continue; } if ((lt.getValue(ent.getValue())) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""label \""%s\"": %d is not a valid value"", ent.getKey(), ent.getValue())); } short val = ent.getValue(); try { perm.check(new com.google.gerrit.server.permissions.LabelPermission.WithValue(lt, val)); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format(""Applying label \""%s\"": %d is restricted"", lt.getName(), val)); } } }",c425b1143b490c00e7aa1cff5e2f537f3409430c,"private void checkLabels(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.common.data.LabelTypes labelTypes, java.util.Map<java.lang.String, java.lang.Short> labels) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions(); java.util.Iterator<java.util.Map.Entry<java.lang.String, java.lang.Short>> itr = labels.entrySet().iterator(); while (itr.hasNext()) { java.util.Map.Entry<java.lang.String, java.lang.Short> ent = itr.next(); com.google.gerrit.common.data.LabelType lt = labelTypes.byLabel(ent.getKey()); if (lt == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""label \""%s\"" is not a configured label"", ent.getKey())); } if (((ent.getValue()) == null) || ((ent.getValue()) == 0)) { continue; } if ((lt.getValue(ent.getValue())) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""label \""%s\"": %d is not a valid value"", ent.getKey(), ent.getValue())); } short val = ent.getValue(); try { perm.check(new com.google.gerrit.server.permissions.LabelPermission.WithValue(lt, val)); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format(""Applying label \""%s\"": %d is restricted"", lt.getName(), val)); } } }",f85072d90fe3f2273b43c96dabf5f199f9019756,2017-10-12 12:50:46,6
133072,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_AbstractNotificationTest.java,protected static com.google.gerrit.acceptance.AbstractNotificationTest.FakeEmailSenderSubject assertThat(com.google.gerrit.testutil.FakeEmailSender sender) { return assertAbout(com.google.gerrit.acceptance.AbstractNotificationTest.FAKE_EMAIL_SENDER_SUBJECT_FACTORY).that(sender); },8e5d1be8c66ab9be6b02242c05554da33c06a408,protected static com.google.gerrit.acceptance.AbstractNotificationTest.FakeEmailSenderSubject assertThat(com.google.gerrit.testutil.FakeEmailSender sender) { return assertAbout(com.google.gerrit.acceptance.FAKE_EMAIL_SENDER_SUBJECT_FACTORY).that(sender); },eced6edb955a60a317c42387d7aa1aba4ec430dc,protected static com.google.gerrit.acceptance.AbstractNotificationTest.FakeEmailSenderSubject assertThat(com.google.gerrit.testutil.FakeEmailSender sender) { return assertAbout(com.google.gerrit.acceptance.AbstractNotificationTest.FakeEmailSenderSubject::new).that(sender); },822b92a4922dddfca4292e97f4f774c186a65d15,2017-10-13 13:41:32,2
133072,gerrit-test-util_src_main_java_com_google_gerrit_extensions_common_EditInfoSubject.java,public static com.google.gerrit.extensions.common.EditInfoSubject assertThat(com.google.gerrit.extensions.common.EditInfo editInfo) { return assertAbout(com.google.gerrit.extensions.common.EditInfoSubject.EDIT_INFO_SUBJECT_FACTORY).that(editInfo); },2d634bdbe425ca733c014db70c3664b08dab9135,public static com.google.gerrit.extensions.common.EditInfoSubject assertThat(com.google.gerrit.extensions.common.EditInfo editInfo) { return assertAbout(com.google.gerrit.extensions.common.EDIT_INFO_SUBJECT_FACTORY).that(editInfo); },9d34853e16aeb2c68c43563a4f90d9dff8674ce4,public static com.google.gerrit.extensions.common.EditInfoSubject assertThat(com.google.gerrit.extensions.common.EditInfo editInfo) { return assertAbout(com.google.gerrit.extensions.common.EditInfoSubject::new).that(editInfo); },94f34cf21f65179c15f3280c19240441a754babc,2017-10-13 13:41:32,2
133072,gerrit-test-util_src_main_java_com_google_gerrit_extensions_common_FixReplacementInfoSubject.java,public static com.google.gerrit.extensions.common.FixReplacementInfoSubject assertThat(com.google.gerrit.extensions.common.FixReplacementInfo fixReplacementInfo) { return assertAbout(com.google.gerrit.extensions.common.FixReplacementInfoSubject.FIX_REPLACEMENT_INFO_SUBJECT_FACTORY).that(fixReplacementInfo); },a92b633d732f35515bf90777c5585f196d18317f,public static com.google.gerrit.extensions.common.FixReplacementInfoSubject assertThat(com.google.gerrit.extensions.common.FixReplacementInfo fixReplacementInfo) { return assertAbout(com.google.gerrit.extensions.common.FIX_REPLACEMENT_INFO_SUBJECT_FACTORY).that(fixReplacementInfo); },b6658b5e77f826671de4046db2ed547bc1eb6634,public static com.google.gerrit.extensions.common.FixReplacementInfoSubject assertThat(com.google.gerrit.extensions.common.FixReplacementInfo fixReplacementInfo) { return assertAbout(com.google.gerrit.extensions.common.FixReplacementInfoSubject::new).that(fixReplacementInfo); },644b7fb2dbcf43c3420f77af6ff8b5c5b5f9e43e,2017-10-13 13:41:32,2
133072,gerrit-test-util_src_main_java_com_google_gerrit_extensions_common_FixSuggestionInfoSubject.java,public static com.google.gerrit.extensions.common.FixSuggestionInfoSubject assertThat(com.google.gerrit.extensions.common.FixSuggestionInfo fixSuggestionInfo) { return assertAbout(com.google.gerrit.extensions.common.FixSuggestionInfoSubject.FIX_SUGGESTION_INFO_SUBJECT_FACTORY).that(fixSuggestionInfo); },60d28990daac205e725891bc820b7c354ded1593,public static com.google.gerrit.extensions.common.FixSuggestionInfoSubject assertThat(com.google.gerrit.extensions.common.FixSuggestionInfo fixSuggestionInfo) { return assertAbout(com.google.gerrit.extensions.common.FIX_SUGGESTION_INFO_SUBJECT_FACTORY).that(fixSuggestionInfo); },6cf984c2a324da6efd518e817d39b28cd563debd,public static com.google.gerrit.extensions.common.FixSuggestionInfoSubject assertThat(com.google.gerrit.extensions.common.FixSuggestionInfo fixSuggestionInfo) { return assertAbout(com.google.gerrit.extensions.common.FixSuggestionInfoSubject::new).that(fixSuggestionInfo); },33293818ea2aabc6cd85c6e895b7888449d9bc43,2017-10-13 13:41:32,2
133072,gerrit-test-util_src_main_java_com_google_gerrit_extensions_common_GitPersonSubject.java,public static com.google.gerrit.extensions.common.GitPersonSubject assertThat(com.google.gerrit.extensions.common.GitPerson gitPerson) { return assertAbout(com.google.gerrit.extensions.common.GitPersonSubject.GIT_PERSON_SUBJECT_FACTORY).that(gitPerson); },364c7e03cffa48d0f043cf1dd72d31f84d668ac0,public static com.google.gerrit.extensions.common.GitPersonSubject assertThat(com.google.gerrit.extensions.common.GitPerson gitPerson) { return assertAbout(com.google.gerrit.extensions.common.GIT_PERSON_SUBJECT_FACTORY).that(gitPerson); },bf21c66d43919df6ee3816e25a69441a87ef5e6a,public static com.google.gerrit.extensions.common.GitPersonSubject assertThat(com.google.gerrit.extensions.common.GitPerson gitPerson) { return assertAbout(com.google.gerrit.extensions.common.GitPersonSubject::new).that(gitPerson); },556c7e831516007023b9ccc70f97718d5b54f7e9,2017-10-13 13:41:32,2
133072,gerrit-test-util_src_main_java_com_google_gerrit_extensions_common_RobotCommentInfoSubject.java,public static com.google.gerrit.extensions.common.RobotCommentInfoSubject assertThat(com.google.gerrit.extensions.common.RobotCommentInfo robotCommentInfo) { return assertAbout(com.google.gerrit.extensions.common.RobotCommentInfoSubject.ROBOT_COMMENT_INFO_SUBJECT_FACTORY).that(robotCommentInfo); },c6e4986186c2e70c9292f75d508b61035ced507a,public static com.google.gerrit.extensions.common.RobotCommentInfoSubject assertThat(com.google.gerrit.extensions.common.RobotCommentInfo robotCommentInfo) { return assertAbout(com.google.gerrit.extensions.common.ROBOT_COMMENT_INFO_SUBJECT_FACTORY).that(robotCommentInfo); },ae93067ef3a9f2f901ebd2ac937c31fca0617580,public static com.google.gerrit.extensions.common.RobotCommentInfoSubject assertThat(com.google.gerrit.extensions.common.RobotCommentInfo robotCommentInfo) { return assertAbout(com.google.gerrit.extensions.common.RobotCommentInfoSubject::new).that(robotCommentInfo); },75d1bd9b34f5294d38db48a5f1b400195faa4a4e,2017-10-13 13:41:32,2
133072,gerrit-test-util_src_main_java_com_google_gerrit_extensions_restapi_BinaryResultSubject.java,public static com.google.gerrit.extensions.restapi.BinaryResultSubject assertThat(com.google.gerrit.extensions.restapi.BinaryResult binaryResult) { return assertAbout(com.google.gerrit.extensions.restapi.BinaryResultSubject.BINARY_RESULT_SUBJECT_FACTORY).that(binaryResult); },0feb306d76f4bb5779fe5388863ab62bc1f9bd61,public static com.google.gerrit.extensions.restapi.BinaryResultSubject assertThat(com.google.gerrit.extensions.restapi.BinaryResult binaryResult) { return assertAbout(com.google.gerrit.extensions.restapi.BINARY_RESULT_SUBJECT_FACTORY).that(binaryResult); },91b1368f9027dda21aae1c8096497b446937eebf,public static com.google.gerrit.extensions.restapi.BinaryResultSubject assertThat(com.google.gerrit.extensions.restapi.BinaryResult binaryResult) { return assertAbout(com.google.gerrit.extensions.restapi.BinaryResultSubject::new).that(binaryResult); },36bfff31a5cf048e476146e4c84dc9c9cc493e02,2017-10-13 13:41:32,2
133072,gerrit-server_src_test_java_com_google_gerrit_server_edit_tree_ChangeFileContentModificationSubject.java,public static com.google.gerrit.server.edit.tree.ChangeFileContentModificationSubject assertThat(com.google.gerrit.server.edit.tree.ChangeFileContentModification modification) { return assertAbout(com.google.gerrit.server.edit.tree.ChangeFileContentModificationSubject.MODIFICATION_SUBJECT_FACTORY).that(modification); },78457eb2a2458409a0ffec174e006826e551b38b,public static com.google.gerrit.server.edit.tree.ChangeFileContentModificationSubject assertThat(com.google.gerrit.server.edit.tree.ChangeFileContentModification modification) { return assertAbout(com.google.gerrit.server.edit.tree.MODIFICATION_SUBJECT_FACTORY).that(modification); },a0faf7ecb947d0466b434e7c147e3ed2220e81ff,public static com.google.gerrit.server.edit.tree.ChangeFileContentModificationSubject assertThat(com.google.gerrit.server.edit.tree.ChangeFileContentModification modification) { return assertAbout(com.google.gerrit.server.edit.tree.ChangeFileContentModificationSubject::new).that(modification); },55767c3f59fe412e567bb8c48d42f29818f333be,2017-10-13 13:41:32,2
133072,gerrit-test-util_src_main_java_com_google_gerrit_extensions_common_ContentEntrySubject.java,public static com.google.gerrit.extensions.common.ContentEntrySubject assertThat(com.google.gerrit.extensions.common.DiffInfo.ContentEntry contentEntry) { return assertAbout(com.google.gerrit.extensions.common.ContentEntrySubject.DIFF_INFO_SUBJECT_FACTORY).that(contentEntry); },e9acec7a7d7641db9d1acfd205783b1a9b2a3777,public static com.google.gerrit.extensions.common.ContentEntrySubject assertThat(com.google.gerrit.extensions.common.DiffInfo.ContentEntry contentEntry) { return assertAbout(com.google.gerrit.extensions.common.DIFF_INFO_SUBJECT_FACTORY).that(contentEntry); },e6e211165c7bfa56440a33eaa1c784b4c71b0898,public static com.google.gerrit.extensions.common.ContentEntrySubject assertThat(com.google.gerrit.extensions.common.DiffInfo.ContentEntry contentEntry) { return assertAbout(com.google.gerrit.extensions.common.ContentEntrySubject::new).that(contentEntry); },2cdfe34cfc52f9cae02b3a42664af3fd635ff6b9,2017-10-13 13:41:32,2
133072,gerrit-server_src_test_java_com_google_gerrit_server_edit_tree_TreeModificationSubject.java,public static com.google.gerrit.server.edit.tree.TreeModificationSubject assertThat(com.google.gerrit.server.edit.tree.TreeModification treeModification) { return assertAbout(com.google.gerrit.server.edit.tree.TreeModificationSubject.TREE_MODIFICATION_SUBJECT_FACTORY).that(treeModification); },383a3a303da872b844c1ccc5419bf7442236f079,public static com.google.gerrit.server.edit.tree.TreeModificationSubject assertThat(com.google.gerrit.server.edit.tree.TreeModification treeModification) { return assertAbout(com.google.gerrit.server.edit.tree.TREE_MODIFICATION_SUBJECT_FACTORY).that(treeModification); },15b1abfd54792e1376e88705d88062629f58e9e3,public static com.google.gerrit.server.edit.tree.TreeModificationSubject assertThat(com.google.gerrit.server.edit.tree.TreeModification treeModification) { return assertAbout(com.google.gerrit.server.edit.tree.TreeModificationSubject::new).that(treeModification); },cdfa2943d4ca2c21d343edb1e4112eff7a6fb496,2017-10-13 13:41:32,2
133072,gerrit-test-util_src_main_java_com_google_gerrit_extensions_common_CommitInfoSubject.java,public static com.google.gerrit.extensions.common.CommitInfoSubject assertThat(com.google.gerrit.extensions.common.CommitInfo commitInfo) { return assertAbout(com.google.gerrit.extensions.common.CommitInfoSubject.COMMIT_INFO_SUBJECT_FACTORY).that(commitInfo); },5aa87f475a8e4a97a7b7ea05b649094224def379,public static com.google.gerrit.extensions.common.CommitInfoSubject assertThat(com.google.gerrit.extensions.common.CommitInfo commitInfo) { return assertAbout(com.google.gerrit.extensions.common.COMMIT_INFO_SUBJECT_FACTORY).that(commitInfo); },89492e527b2015a41ff8d3d0495e3f8499ce6fc1,public static com.google.gerrit.extensions.common.CommitInfoSubject assertThat(com.google.gerrit.extensions.common.CommitInfo commitInfo) { return assertAbout(com.google.gerrit.extensions.common.CommitInfoSubject::new).that(commitInfo); },460e08ac6a59ccc1b6758b356abdef2d1c03354b,2017-10-13 13:41:32,2
133072,gerrit-test-util_src_main_java_com_google_gerrit_extensions_client_RangeSubject.java,public static com.google.gerrit.extensions.client.RangeSubject assertThat(com.google.gerrit.extensions.client.Comment.Range range) { return assertAbout(com.google.gerrit.extensions.client.RangeSubject.RANGE_SUBJECT_FACTORY).that(range); },efc7f775a9c04d444fff107f5fa3a4b5406976d8,public static com.google.gerrit.extensions.client.RangeSubject assertThat(com.google.gerrit.extensions.client.Comment.Range range) { return assertAbout(com.google.gerrit.extensions.client.RANGE_SUBJECT_FACTORY).that(range); },088de5f032408f69bc5e7ec1147456ecd993d8a4,public static com.google.gerrit.extensions.client.RangeSubject assertThat(com.google.gerrit.extensions.client.Comment.Range range) { return assertAbout(com.google.gerrit.extensions.client.RangeSubject::new).that(range); },9e8130e5fa06b62d86d037c99ec04e81b2b58f00,2017-10-13 13:41:32,2
133072,gerrit-test-util_src_main_java_com_google_gerrit_extensions_common_FileInfoSubject.java,public static com.google.gerrit.extensions.common.FileInfoSubject assertThat(com.google.gerrit.extensions.common.FileInfo fileInfo) { return assertAbout(com.google.gerrit.extensions.common.FileInfoSubject.FILE_INFO_SUBJECT_FACTORY).that(fileInfo); },72967f32028114acffcad1873b09139b60987af8,public static com.google.gerrit.extensions.common.FileInfoSubject assertThat(com.google.gerrit.extensions.common.FileInfo fileInfo) { return assertAbout(com.google.gerrit.extensions.common.FILE_INFO_SUBJECT_FACTORY).that(fileInfo); },dce0020e8c0d9425f2891555e9c8f22d6044684e,public static com.google.gerrit.extensions.common.FileInfoSubject assertThat(com.google.gerrit.extensions.common.FileInfo fileInfo) { return assertAbout(com.google.gerrit.extensions.common.FileInfoSubject::new).that(fileInfo); },b65b9ec360506dd6ddca203c5001b48a0a7ab1f3,2017-10-13 13:41:32,2
133072,gerrit-test-util_src_main_java_com_google_gerrit_extensions_common_PathSubject.java,public static com.google.gerrit.extensions.common.PathSubject assertThat(java.nio.file.Path path) { return assertAbout(com.google.gerrit.extensions.common.PathSubject.PATH_SUBJECT_FACTORY).that(path); },51894b127248fe9ed5cad93638acd5c838e8d2b6,public static com.google.gerrit.extensions.common.PathSubject assertThat(java.nio.file.Path path) { return assertAbout(com.google.gerrit.extensions.common.PATH_SUBJECT_FACTORY).that(path); },cfe74dc818952a228f4ea8ade61b5d322146c591,public static com.google.gerrit.extensions.common.PathSubject assertThat(java.nio.file.Path path) { return assertAbout(com.google.gerrit.extensions.common.PathSubject::new).that(path); },18c07cdabd164f680cc80eeb64eb7332d7b24343,2017-10-13 13:41:32,2
133072,gerrit-test-util_src_main_java_com_google_gerrit_extensions_common_DiffInfoSubject.java,public static com.google.gerrit.extensions.common.DiffInfoSubject assertThat(com.google.gerrit.extensions.common.DiffInfo diffInfo) { return assertAbout(com.google.gerrit.extensions.common.DiffInfoSubject.DIFF_INFO_SUBJECT_FACTORY).that(diffInfo); },e62bd712afda70b8676fb34ed1bb75a764143c65,public static com.google.gerrit.extensions.common.DiffInfoSubject assertThat(com.google.gerrit.extensions.common.DiffInfo diffInfo) { return assertAbout(com.google.gerrit.extensions.common.DIFF_INFO_SUBJECT_FACTORY).that(diffInfo); },50073acb776b84ccbf9696de108ced55b2359ae9,public static com.google.gerrit.extensions.common.DiffInfoSubject assertThat(com.google.gerrit.extensions.common.DiffInfo diffInfo) { return assertAbout(com.google.gerrit.extensions.common.DiffInfoSubject::new).that(diffInfo); },fb74b826e45d33ff9218dd3a8760eb944edfd84e,2017-10-13 13:41:32,2
133213,src_main_java_com_googlesource_gerrit_plugins_findowners_Config.java,"static java.lang.String getOwnersFileName(com.google.gerrit.reviewdb.client.Project.NameKey project) { if (((com.googlesource.gerrit.plugins.findowners.Config.config) != null) && (project != null)) { try { java.lang.String name = com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(project, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getString(com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS); if (name.trim().equals("""")) { com.googlesource.gerrit.plugins.findowners.Config.log.error(((((((""Project "" + (project.get())) + "" has wrong "") + (com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME)) + "": \"""") + name) + ""\"""")); return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; } return name; } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.findowners.Config.log.error((""Cannot find project: "" + project), e); } } return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; }",0d1e2380879d00bbf505e0104c73ef492c16c058,"static java.lang.String getOwnersFileName(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id id) { if (((com.googlesource.gerrit.plugins.findowners.Config.config) != null) && (project != null)) { try { java.lang.String name = com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(project, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getString(com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS); if (name.trim().equals("""")) { com.googlesource.gerrit.plugins.findowners.Config.log.error(((((((""Project "" + (project.get())) + "" has wrong "") + (com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME)) + "": \"""") + name) + ""\"""")); return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; } return name; } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.findowners.Config.log.error(java.lang.String.format(""Cannot find project %s for change "", project, id.get()), e); } } return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; }",7648688a2a45e7fe56c92a1692f2172082ee8016,"static java.lang.String getOwnersFileName(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.query.change.ChangeData c) { if (((com.googlesource.gerrit.plugins.findowners.Config.config) != null) && (project != null)) { try { java.lang.String name = com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(project, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getString(com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS); if (name.trim().equals("""")) { com.googlesource.gerrit.plugins.findowners.Config.log.error((((((((""Project "" + project) + "" has wrong "") + (com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME)) + "": \"""") + name) + ""\"" for "") + (com.googlesource.gerrit.plugins.findowners.Config.getChangeId(c)))); return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; } return name; } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.findowners.Config.log.error((((""Cannot find project "" + project) + "" for "") + (com.googlesource.gerrit.plugins.findowners.Config.getChangeId(c))), e); } } return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; }",e8c965d930ba6bdda16ad70136caf4ba469c1692,2017-10-16 20:47:34,4
122330,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_87.java,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { for (com.google.gerrit.reviewdb.client.AccountGroup.Id id : scanSystemGroups(db)) { com.google.gerrit.reviewdb.client.AccountGroup group = db.accountGroups().get(id); if ((group != null) && (com.google.gerrit.server.group.SystemGroupBackend.isSystemGroup(group.getGroupUUID()))) { db.accountGroups().delete(java.util.Collections.singleton(group)); db.accountGroupNames().deleteKeys(java.util.Collections.singleton(group.getNameKey())); } } }",5077988403adca54ab3aa05b87cd2725d945042a,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { java.sql.Connection connection = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection(); try (java.sql.PreparedStatement uuidRetrieval = connection.prepareStatement(""SELECT group_uuid FROM account_groups WHERE group_id = ?"");java.sql.PreparedStatement groupDeletion = connection.prepareStatement(""DELETE account_groups WHERE group_id = ?"");java.sql.PreparedStatement groupNameDeletion = connection.prepareStatement(""DELETE account_group_names WHERE group_id = ?"")) { for (com.google.gerrit.reviewdb.client.AccountGroup.Id id : com.google.gerrit.server.schema.Schema_87.scanSystemGroups(db)) { java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupUuid = com.google.gerrit.server.schema.Schema_87.getUuid(uuidRetrieval, id); if (groupUuid.filter(SystemGroupBackend::isSystemGroup).isPresent()) { groupDeletion.setInt(1, id.get()); groupDeletion.executeUpdate(); groupNameDeletion.setInt(1, id.get()); groupNameDeletion.executeUpdate(); } } } }",b66cbd0342e185d050dae3b76edb3e4cde363380,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { try (java.sql.PreparedStatement uuidRetrieval = prepareStatement(db, ""SELECT group_uuid FROM account_groups WHERE group_id = ?"");java.sql.PreparedStatement groupDeletion = prepareStatement(db, ""DELETE FROM account_groups WHERE group_id = ?"");java.sql.PreparedStatement groupNameDeletion = prepareStatement(db, ""DELETE FROM account_group_names WHERE group_id = ?"")) { for (com.google.gerrit.reviewdb.client.AccountGroup.Id id : com.google.gerrit.server.schema.Schema_87.scanSystemGroups(db)) { java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupUuid = com.google.gerrit.server.schema.Schema_87.getUuid(uuidRetrieval, id); if (groupUuid.filter(SystemGroupBackend::isSystemGroup).isPresent()) { groupDeletion.setInt(1, id.get()); groupDeletion.executeUpdate(); groupNameDeletion.setInt(1, id.get()); groupNameDeletion.executeUpdate(); } } } }",b2014aaa643e4a4350614f52a9868060a324e8d3,2017-10-17 17:20:02,5
122331,gerrit-server_src_test_java_com_google_gerrit_server_schema_Schema_150_to_151_Test.java,@org.junit.Before public void setUp() throws java.lang.Exception { testEnv.getInjector().injectMembers(this); db = testEnv.getDb(); },5e62d5eca22d34983de961f668a53cfd33362dec,"@org.junit.Before public void setUp() throws java.lang.Exception { testEnv.getInjector().injectMembers(this); db = testEnv.getDb(); connection = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection(); createdOnRetrieval = connection.prepareStatement(""SELECT created_on FROM account_groups WHERE group_id = ?""); createdOnUpdate = connection.prepareStatement(""UPDATE account_groups SET created_on = ? WHERE group_id = ?""); auditEntryDeletion = connection.prepareStatement(""DELETE account_group_members_audit WHERE group_id = ?""); }",3694e603f0c9a75c768f76aabb58166bbf74c339,"@org.junit.Before public void setUp() throws java.lang.Exception { testEnv.getInjector().injectMembers(this); db = testEnv.getDb(); assume().that(((db) instanceof com.google.gwtorm.jdbc.JdbcSchema)).isTrue(); connection = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection(); createdOnRetrieval = connection.prepareStatement(""SELECT created_on FROM account_groups WHERE group_id = ?""); createdOnUpdate = connection.prepareStatement(""UPDATE account_groups SET created_on = ? WHERE group_id = ?""); auditEntryDeletion = connection.prepareStatement(""DELETE FROM account_group_members_audit WHERE group_id = ?""); }",ed6afece227e76eb04ac0f3fc2b7848a51727a28,2017-10-17 17:20:02,6
122330,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_151.java,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().all().toList(); for (com.google.gerrit.reviewdb.client.AccountGroup accountGroup : accountGroups) { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> groupMemberAudits = db.accountGroupMembersAudit().byGroup(accountGroup.getId()); java.util.Optional<java.sql.Timestamp> firstTimeMentioned = com.google.common.collect.Streams.stream(groupMemberAudits).map(AccountGroupMemberAudit::getKey).map(Key::getAddedOn).min(java.util.Comparator.naturalOrder()); java.sql.Timestamp createdOn = firstTimeMentioned.orElseGet(() -> com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); accountGroup.setCreatedOn(createdOn); } db.accountGroups().update(accountGroups); }",272c2d8173caee88c833b5edcd2f0e50c7157264,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { java.sql.Connection connection = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection(); try (java.sql.PreparedStatement groupUpdate = connection.prepareStatement(""UPDATE account_groups SET created_on = ? WHERE group_id = ?"");java.sql.PreparedStatement addedOnRetrieval = connection.prepareStatement((""SELECT added_on FROM account_group_members_audit WHERE group_id = ?"" + "" ORDER BY added_on ASC""))) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.Id> accountGroups = com.google.gerrit.server.schema.Schema_151.getAllGroupIds(db); for (com.google.gerrit.reviewdb.client.AccountGroup.Id groupId : accountGroups) { java.util.Optional<java.sql.Timestamp> firstTimeMentioned = com.google.gerrit.server.schema.Schema_151.getFirstTimeMentioned(addedOnRetrieval, groupId); java.sql.Timestamp createdOn = firstTimeMentioned.orElseGet(AccountGroup::auditCreationInstantTs); groupUpdate.setTimestamp(1, createdOn); groupUpdate.setInt(2, groupId.get()); groupUpdate.executeUpdate(); } } }",b6766a6f6e0281d7ed7f03bdef40c7e08f5c233a,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { try (java.sql.PreparedStatement groupUpdate = prepareStatement(db, ""UPDATE account_groups SET created_on = ? WHERE group_id = ?"");java.sql.PreparedStatement addedOnRetrieval = prepareStatement(db, (""SELECT added_on FROM account_group_members_audit WHERE group_id = ?"" + "" ORDER BY added_on ASC""))) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.Id> accountGroups = com.google.gerrit.server.schema.Schema_151.getAllGroupIds(db); for (com.google.gerrit.reviewdb.client.AccountGroup.Id groupId : accountGroups) { java.util.Optional<java.sql.Timestamp> firstTimeMentioned = com.google.gerrit.server.schema.Schema_151.getFirstTimeMentioned(addedOnRetrieval, groupId); java.sql.Timestamp createdOn = firstTimeMentioned.orElseGet(AccountGroup::auditCreationInstantTs); groupUpdate.setTimestamp(1, createdOn); groupUpdate.setInt(2, groupId.get()); groupUpdate.executeUpdate(); } } }",9dadc67146c457b2d398975a65589251bbc3b107,2017-10-17 17:20:02,5
130479,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_ChangeEmail.java,"public java.lang.String getChangeMessageThreadId() throws com.google.gerrit.common.errors.EmailException { return velocify(""<gerrit.${change.createdOn.time}.$change.key.get()@$email.gerritHost>""); }",a4c8cdd02406c1704945753c3c4c29eb9617c63c,"public java.lang.String getChangeMessageThreadId() { return """"; }",ccdab9922c9c8e7eb859def399dee2dd9ba21dd9,"public java.lang.String getChangeMessageThreadId() { return (((((""<gerrit."" + (change.getCreatedOn().getTime())) + ""."") + (change.getKey().get())) + ""@"") + (this.getGerritHost())) + "">""; }",3df45b62b990ca137c94d4dacaac162c816f0270,2017-10-18 00:52:05,7
130479,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_NotificationEmail.java,@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { super.init(); setListIdHeader(); },d0abaa91d22f3bde14c74cd01c544386e4062f24,@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { super.init(); },68736d72961c01009d14c365cb37eb637d0982c3,@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { super.init(); setListIdHeader(); },d0abaa91d22f3bde14c74cd01c544386e4062f24,2017-10-18 00:52:05,7
134011,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_ssh_SetReviewersIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void setReviewer(boolean add, java.lang.String id) throws java.lang.Exception { adminSshSession.exec(java.lang.String.format(""gerrit set-reviewers -%s %s %s"", (add ? ""a"" : ""r""), user.email, id)); assert_().withFailureMessage(adminSshSession.getError()).that(adminSshSession.hasError()).isFalse(); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> reviewers = change.getChange().getReviewers().all(); if (add) { assertThat(reviewers).contains(user.id); } else { assertThat(reviewers).isEmpty(); } }",2650d0c4939b581d17be00fdf41c2280af0c633c,"private void setReviewer(boolean add, java.lang.String id) throws java.lang.Exception { adminSshSession.exec(java.lang.String.format(""gerrit set-reviewers -%s %s %s"", (add ? ""a"" : ""r""), user.email, id)); assert_().withFailureMessage(adminSshSession.getError()).that(adminSshSession.hasError()).isFalse(); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> reviewers = change.getChange().getReviewers().all(); if (add) { assertThat(reviewers).contains(user.id); } else { assertThat(reviewers).doesNotContain(user.id); } }",05ab3d82c01ab4a9c04d52141a39240f2942a5ba,2017-10-18 06:56:21,2
127030,src_main_java_com_googlesource_gerrit_plugins_webhooks_EventHandler.java,"@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.ProjectEvent)) { return; } com.google.gerrit.server.events.ProjectEvent projectEvent = ((com.google.gerrit.server.events.ProjectEvent) (event)); org.eclipse.jgit.lib.Config cfg; try { cfg = configFactory.getProjectPluginConfigWithInheritance(projectEvent.getProjectNameKey(), pluginName); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""Ignoring event for a non-existing project {}, {}"", projectEvent.getProjectNameKey().get(), projectEvent); return; } for (java.lang.String name : cfg.getSubsections(""remote"")) { java.lang.String url = cfg.getString(""remote"", name, ""url""); if (com.google.common.base.Strings.isNullOrEmpty(url)) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""remote.{}.url not defined, skipping this remote"", name); continue; } if (shouldPost(projectEvent, cfg.getStringList(""remote"", name, ""event""))) { post(url, projectEvent); } } }",60656687b543ebea56af531d9f24bdec313d123f,"@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.ProjectEvent)) { return; } com.google.gerrit.server.events.ProjectEvent projectEvent = ((com.google.gerrit.server.events.ProjectEvent) (event)); org.eclipse.jgit.lib.Config cfg; try { cfg = configFactory.getProjectPluginConfigWithInheritance(projectEvent.getProjectNameKey(), pluginName); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""Ignoring event for a non-existing project {}, {}"", projectEvent.getProjectNameKey().get(), projectEvent); return; } for (java.lang.String name : cfg.getSubsections(com.googlesource.gerrit.plugins.webhooks.SECTION)) { java.lang.String url = cfg.getString(com.googlesource.gerrit.plugins.webhooks.SECTION, name, ""url""); if (com.google.common.base.Strings.isNullOrEmpty(url)) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""remote.{}.url not defined, skipping this remote"", name); continue; } java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Factory> factory = provider.getFactory(cfg, name); if (!(factory.isPresent())) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""remote.{}.type not recognized, skipping this remote"", name); continue; } com.googlesource.gerrit.plugins.webhooks.EventProcessor processor = factory.get().create(projectEvent); if (processor.shouldPost(cfg.getStringList(com.googlesource.gerrit.plugins.webhooks.SECTION, name, ""event""))) { post(url, processor); } } }",ba4381adfc5138ae24ce69854108953838053233,"@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.ProjectEvent)) { return; } com.google.gerrit.server.events.ProjectEvent projectEvent = ((com.google.gerrit.server.events.ProjectEvent) (event)); org.eclipse.jgit.lib.Config cfg; try { cfg = configFactory.getProjectPluginConfigWithInheritance(projectEvent.getProjectNameKey(), pluginName); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""Ignoring event for a non-existing project {}, {}"", projectEvent.getProjectNameKey().get(), projectEvent); return; } for (java.lang.String name : cfg.getSubsections(com.googlesource.gerrit.plugins.webhooks.RemoteConfig.REMOTE)) { com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote = remoteFactory.create(cfg, name); if (com.google.common.base.Strings.isNullOrEmpty(remote.getUrl())) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""remote.{}.url not defined, skipping this remote"", name); continue; } taskFactory.create(projectEvent, remote).schedule(); } }",89d66c0f2ca847dd8904ac8c56f0851bda66c7ec,2017-10-18 15:16:26,8
127030,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,"@org.junit.Before public void setup() { when(cfg.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(cfg.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, cfg, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY); }",d26d73533f1e65a8fd21b1463f895bf788ab8d86,"@org.junit.Before public void setup() { when(cfg.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(cfg.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(processor.process()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, cfg, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, processor); }",bce3249927e4dd9709447abe5e2d1a9d7b75e379,"@org.junit.Before public void setup() { when(cfg.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(cfg.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(remote.getUrl()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL); when(processor.process(eq(projectCreated), eq(remote))).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, cfg, processor, projectCreated, remote); }",f4b9824c514416cf4961d8a307c74838c9fd51e2,2017-10-18 15:16:26,8
127030,src_test_java_com_googlesource_gerrit_plugins_webhooks_EventHandlerTest.java,"@org.junit.Test public void nonProjectEventNotPosted() { config.setString(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.REMOTE, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.URL, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO_URL); com.google.gerrit.server.events.Event nonProjectEvent = new com.google.gerrit.server.events.Event(""non-project-event"") {}; eventHandler.onEvent(nonProjectEvent); verifyZeroInteractions(postTask); }",0c83875c533d576ca219d8fedb99fb6fcc56324d,"@org.junit.Test public void nonProjectEventNotPosted() { com.google.gerrit.server.events.Event nonProjectEvent = new com.google.gerrit.server.events.Event(""non-project-event"") {}; eventHandler.onEvent(nonProjectEvent); verifyZeroInteractions(processor); verifyZeroInteractions(postTask); }",9cc941db79aae29a3205977cbe9c419f8b3131ef,"@org.junit.Test public void nonProjectEventNotProcessed() { com.google.gerrit.server.events.Event nonProjectEvent = new com.google.gerrit.server.events.Event(""non-project-event"") {}; eventHandler.onEvent(nonProjectEvent); verifyZeroInteractions(remoteFactory); verifyZeroInteractions(taskFactory); verifyZeroInteractions(postTask); }",86aee33e56d021816009682edd5cd7ab5b2a3915,2017-10-18 15:16:26,8
127030,src_main_java_com_googlesource_gerrit_plugins_webhooks_PostTask.java,"com.googlesource.gerrit.plugins.webhooks.PostTask create(@com.google.inject.assistedinject.Assisted(""url"") java.lang.String url, @com.google.inject.assistedinject.Assisted(""body"") java.lang.String body);",d6cd67ff5ce6ceae52d46a7400cf65d0425324e9,"com.googlesource.gerrit.plugins.webhooks.PostTask create(@com.google.inject.assistedinject.Assisted(""url"") java.lang.String url, com.googlesource.gerrit.plugins.webhooks.EventProcessor processor);",3a8c100903633391a2ac3fc2d285a61d1f165943,"com.googlesource.gerrit.plugins.webhooks.PostTask create(com.google.gerrit.server.events.ProjectEvent event, com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote);",086045192d55671a4fa63a7e9d42a885fb3323b1,2017-10-18 15:16:26,8
127030,src_test_java_com_googlesource_gerrit_plugins_webhooks_EventHandlerTest.java,@org.junit.Test public void remoteUrlUndefinedEventsNotPosted() { eventHandler.onEvent(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_CREATED); verifyZeroInteractions(postTask); },9b080cd13be1c5bc99cb01de26a251a9aad884e3,@org.junit.Test public void remoteUrlUndefinedEventsNotPosted() { eventHandler.onEvent(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_CREATED); verifyZeroInteractions(processor); verifyZeroInteractions(postTask); },cd43db92ead06685354f0b10368f01b6c653dc08,@org.junit.Test public void remoteUrlUndefinedTaskNotScheduled() { when(config.getSubsections(eq(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.REMOTE))).thenReturn(com.google.common.collect.ImmutableSet.of(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO)); eventHandler.onEvent(projectCreated); verifyZeroInteractions(taskFactory); verifyZeroInteractions(postTask); },dc3af0cc2983dbf2c3d7d2de5656f79ed8bda7d5,2017-10-18 15:16:26,8
127030,src_test_java_com_googlesource_gerrit_plugins_webhooks_EventHandlerTest.java,"@org.junit.Test public void specifiedEventTypesPosted() { config.setString(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.REMOTE, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.URL, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO_URL); config.setString(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.REMOTE, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.EVENT, ""project-created""); eventHandler.onEvent(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_CREATED); verify(postTask, times(1)).schedule(); }",d836515097ccdef4ec4ae15c05a0a4d0d2a1b4a7,"@org.junit.Test public void shouldNotCallProcessWhenWebhookTypeIsMisconfigured() { mockConfig(); when(provider.getFactory(eq(config), eq(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO))).thenReturn(java.util.Optional.empty()); eventHandler.onEvent(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_CREATED); verifyZeroInteractions(processor); verifyZeroInteractions(postTask); }",9a06ede592c7e8d82107b3b0de444995fa5d7024,"@org.junit.Test public void remoteUrlDefinedTaskScheduled() { when(config.getSubsections(eq(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.REMOTE))).thenReturn(com.google.common.collect.ImmutableSet.of(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO)); when(remote.getUrl()).thenReturn(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO_URL); eventHandler.onEvent(projectCreated); verify(taskFactory, times(1)).create(eq(projectCreated), eq(remote)); verify(postTask, times(1)).schedule(); }",ae855d3f74937c8957a66157dfb2b0c17962d653,2017-10-18 15:16:26,8
127030,src_test_java_com_googlesource_gerrit_plugins_webhooks_EventHandlerTest.java,"@org.junit.Before public void setup() throws com.google.gerrit.server.project.NoSuchProjectException { when(configFactory.getProjectPluginConfigWithInheritance(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_NAME, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN)).thenReturn(config); when(taskFactory.create(anyString(), anyString())).thenReturn(postTask); eventHandler = new com.googlesource.gerrit.plugins.webhooks.EventHandler(configFactory, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN, taskFactory); }",db5283232576312ff2e13bf556387d63ac2988b7,"@org.junit.Before public void setup() throws com.google.gerrit.server.project.NoSuchProjectException { when(configFactory.getProjectPluginConfigWithInheritance(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_NAME, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN)).thenReturn(config); when(provider.getFactory(eq(config), eq(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO))).thenReturn(java.util.Optional.of(factory)); when(factory.create(any(com.google.gerrit.server.events.ProjectEvent.class))).thenReturn(processor); when(taskFactory.create(anyString(), eq(processor))).thenReturn(postTask); eventHandler = new com.googlesource.gerrit.plugins.webhooks.EventHandler(configFactory, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN, taskFactory, provider); }",0e72ffc77e86e0b5ae014567197ff87814fadb04,"@org.junit.Before public void setup() throws com.google.gerrit.server.project.NoSuchProjectException { when(projectCreated.getProjectNameKey()).thenReturn(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_NAME); when(configFactory.getProjectPluginConfigWithInheritance(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_NAME, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN)).thenReturn(config); when(remoteFactory.create(eq(config), eq(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO))).thenReturn(remote); when(taskFactory.create(eq(projectCreated), eq(remote))).thenReturn(postTask); eventHandler = new com.googlesource.gerrit.plugins.webhooks.EventHandler(configFactory, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN, remoteFactory, taskFactory); }",0bb00f01621508ddfbeecce14d268c716e5bb145,2017-10-18 15:16:26,8
127030,src_main_java_com_googlesource_gerrit_plugins_webhooks_EventProcessor.java,,,boolean shouldPost(java.lang.String[] wantedEvents);,e1067b79bf9cc15cc05cf75468ed5ed3d1a6f4e7,"java.lang.String process(com.google.gerrit.server.events.ProjectEvent event, com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote);",eb36d166389aa1fdc8e28a7db73707217e5b9450,2017-10-18 15:16:26,8
127030,src_main_java_com_googlesource_gerrit_plugins_webhooks_processors_JenkinsEventProcessor.java,,,@java.lang.Override public java.lang.String process() { return com.googlesource.gerrit.plugins.webhooks.processors.JenkinsEventProcessor.GSON.toJson(event); },9d1d9a01f52c674596f8f5e94cc1d8edc3546a3e,"@java.lang.Override public java.lang.String doProcess(com.google.gerrit.server.events.ProjectEvent event, com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote) { return com.googlesource.gerrit.plugins.webhooks.processors.GerritEventProcessor.GSON.toJson(event); }",225b9e4e2144da17e9a942f846d078d1f64f31d1,2017-10-18 15:16:26,8
127030,src_main_java_com_googlesource_gerrit_plugins_webhooks_processors_AbstractEventProcessor.java,,,@java.lang.Override public boolean shouldPost(java.lang.String[] wantedEvents) { if ((wantedEvents.length) == 0) { return true; } for (java.lang.String type : wantedEvents) { if ((!(com.google.common.base.Strings.isNullOrEmpty(type))) && (type.equals(event.getType()))) { return true; } } return false; },1a88cfdfe5e6245ff4348f00b90a0a7646e9669d,"protected boolean shouldProcess(com.google.gerrit.server.events.ProjectEvent event, com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote) { java.lang.String[] wantedEvents = remote.getEvents(); if ((wantedEvents.length) == 0) { return true; } for (java.lang.String type : wantedEvents) { if ((!(com.google.common.base.Strings.isNullOrEmpty(type))) && (type.equals(event.getType()))) { return true; } } return false; }",24a547893db1ed4d157c46e72c83f71f550f7439,2017-10-18 15:16:26,8
127030,src_main_java_com_googlesource_gerrit_plugins_webhooks_Module.java,"@java.lang.Override protected void configure() { bind(java.util.concurrent.ScheduledExecutorService.class).annotatedWith(com.googlesource.gerrit.plugins.webhooks.WebHooksExecutor.class).toProvider(com.googlesource.gerrit.plugins.webhooks.ExecutorProvider.class); bind(com.googlesource.gerrit.plugins.webhooks.Configuration.class).in(Scopes.SINGLETON); bind(org.apache.http.impl.client.CloseableHttpClient.class).toProvider(com.googlesource.gerrit.plugins.webhooks.HttpClientProvider.class).in(Scopes.SINGLETON); factory(PostTask.Factory.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.common.EventListener.class).to(com.googlesource.gerrit.plugins.webhooks.EventHandler.class); }",aa96542a200088520e72aa24ed8def96abb6efe9,"@java.lang.Override protected void configure() { bind(java.util.concurrent.ScheduledExecutorService.class).annotatedWith(com.googlesource.gerrit.plugins.webhooks.WebHooksExecutor.class).toProvider(com.googlesource.gerrit.plugins.webhooks.ExecutorProvider.class); bind(com.googlesource.gerrit.plugins.webhooks.Configuration.class).in(Scopes.SINGLETON); bind(org.apache.http.impl.client.CloseableHttpClient.class).toProvider(com.googlesource.gerrit.plugins.webhooks.HttpClientProvider.class).in(Scopes.SINGLETON); factory(PostTask.Factory.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.common.EventListener.class).to(com.googlesource.gerrit.plugins.webhooks.EventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.setOf(binder(), EventProcessor.Factory.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), EventProcessor.Factory.class).to(JenkinsEventProcessor.Factory.class); }",0285263dda3b4568541ec1bb4c4596fad2f5296f,"@java.lang.Override protected void configure() { bind(java.util.concurrent.ScheduledExecutorService.class).annotatedWith(com.googlesource.gerrit.plugins.webhooks.WebHooksExecutor.class).toProvider(com.googlesource.gerrit.plugins.webhooks.ExecutorProvider.class); bind(org.apache.http.impl.client.CloseableHttpClient.class).toProvider(com.googlesource.gerrit.plugins.webhooks.HttpClientProvider.class).in(Scopes.SINGLETON); factory(PostTask.Factory.class); factory(RemoteConfig.Factory.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.common.EventListener.class).to(com.googlesource.gerrit.plugins.webhooks.EventHandler.class); install(processors); }",0e13847f0e9ae6ea03415f4f17f85cff2ef8bf4e,2017-10-18 15:16:26,8
134610,gerrit-server_src_main_java_com_google_gerrit_server_ChangeFinder.java,"public java.util.List<com.google.gerrit.server.project.ChangeControl> find(java.lang.String id, com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().noFields(); if (id.matches(((""^([0-9a-fA-F]{4,"" + (com.google.gerrit.reviewdb.client.RevId.LEN)) + ""})$""))) { return asChangeControls(query.byCommit(id), user); } if ((!(id.isEmpty())) && ((id.charAt(0)) != '0')) { java.lang.Integer n = com.google.common.primitives.Ints.tryParse(id); if (n != null) { return asChangeControls(query.byLegacyChangeId(new com.google.gerrit.reviewdb.client.Change.Id(n)), user); } } if (!(id.contains(""~""))) { return asChangeControls(query.byKeyPrefix(id), user); } java.util.Optional<com.google.gerrit.server.change.ChangeTriplet> triplet = com.google.gerrit.server.change.ChangeTriplet.parse(id); if (triplet.isPresent()) { return asChangeControls(query.byBranchKey(triplet.get().branch(), triplet.get().id()), user); } return java.util.Collections.emptyList(); }",4ba96da480faa96c327e2ec26ad54e60cb8091b6,"public java.util.List<com.google.gerrit.server.project.ChangeControl> find(java.lang.String id, com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().noFields(); if ((!(id.isEmpty())) && ((id.charAt(0)) != '0')) { java.lang.Integer n = com.google.common.primitives.Ints.tryParse(id); if (n != null) { return asChangeControls(query.byLegacyChangeId(new com.google.gerrit.reviewdb.client.Change.Id(n)), user); } } if (id.matches(((""^([0-9a-fA-F]{4,"" + (com.google.gerrit.reviewdb.client.RevId.LEN)) + ""})$""))) { return asChangeControls(query.byCommit(id), user); } if (!(id.contains(""~""))) { return asChangeControls(query.byKeyPrefix(id), user); } java.util.Optional<com.google.gerrit.server.change.ChangeTriplet> triplet = com.google.gerrit.server.change.ChangeTriplet.parse(id); if (triplet.isPresent()) { return asChangeControls(query.byBranchKey(triplet.get().branch(), triplet.get().id()), user); } return java.util.Collections.emptyList(); }",ad35a17ec23e5e510ddf5b7e78b5f5f70b1d1236,"public java.util.List<com.google.gerrit.server.project.ChangeControl> find(java.lang.String id, com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().noFields(); if (id.matches(((((""^([0-9a-fA-F]{"" + (com.google.gerrit.reviewdb.client.RevId.ABBREV_LEN)) + "","") + (com.google.gerrit.reviewdb.client.RevId.LEN)) + ""})$""))) { return asChangeControls(query.byCommit(id), user); } if ((!(id.isEmpty())) && ((id.charAt(0)) != '0')) { java.lang.Integer n = com.google.common.primitives.Ints.tryParse(id); if (n != null) { return asChangeControls(query.byLegacyChangeId(new com.google.gerrit.reviewdb.client.Change.Id(n)), user); } } if (!(id.contains(""~""))) { return asChangeControls(query.byKeyPrefix(id), user); } java.util.Optional<com.google.gerrit.server.change.ChangeTriplet> triplet = com.google.gerrit.server.change.ChangeTriplet.parse(id); if (triplet.isPresent()) { return asChangeControls(query.byBranchKey(triplet.get().branch(), triplet.get().id()), user); } return java.util.Collections.emptyList(); }",002722a981a82b6c3219201fe00d2ff8878b0607,2017-10-19 02:13:06,3
134791,gerrit-server_src_main_java_com_google_gerrit_server_api_accounts_AccountApiImpl.java,"@java.lang.Override public void setStatus(java.lang.String status) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.PutStatus.Input in = new com.google.gerrit.server.account.PutStatus.Input(status); try { putStatus.apply(account, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot set status"", e); } }",4e8b1b7bcd9441a9be5a61e4e093e3f2c2210a16,"@java.lang.Override public void setStatus(java.lang.String status) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.StatusInput in = new com.google.gerrit.extensions.common.StatusInput(status); try { putStatus.apply(account, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot set status"", e); } }",89167355c96b0cc3999cbd14609cdb9eced6259e,"@java.lang.Override public void setStatus(java.lang.String status) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.accounts.StatusInput in = new com.google.gerrit.extensions.api.accounts.StatusInput(status); try { putStatus.apply(account, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot set status"", e); } }",c32fe47a1e232a59d8012840e6a98ea94ef5d6d5,2017-10-20 02:09:19,3
134791,gerrit-server_src_main_java_com_google_gerrit_server_account_PutStatus.java,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.server.account.PutStatus.Input input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.server.account.PutStatus.Input(); } java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( a) -> a.setStatus(com.google.common.base.Strings.nullToEmpty(newStatus))); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return com.google.common.base.Strings.isNullOrEmpty(account.getStatus()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getStatus()); }",78c158faa36e2487bb1aa99d63e3cecde455d98c,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.StatusInput(); } java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( a) -> a.setStatus(com.google.common.base.Strings.nullToEmpty(newStatus))); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return com.google.common.base.Strings.isNullOrEmpty(account.getStatus()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getStatus()); }",045a1667c04bad9b5e559a499fbcc640bcf7f2e0,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.accounts.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); } java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( a) -> a.setStatus(com.google.common.base.Strings.nullToEmpty(newStatus))); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return com.google.common.base.Strings.isNullOrEmpty(account.getStatus()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getStatus()); }",37041609a9a4a08850fd980102df5e99927feab1,2017-10-20 02:09:19,3
134791,gerrit-server_src_main_java_com_google_gerrit_server_account_PutStatus.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutStatus.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } return apply(rsrc.getUser(), input); }",c04e7eadf8b4b5f824a6cad612fc74f1e38a4fe3,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.common.StatusInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } return apply(rsrc.getUser(), input); }",70193fc848fd3fe481000060d0d56880c468534e,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.StatusInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } return apply(rsrc.getUser(), input); }",a787da242848444d80ce856c6f1d358d7037138e,2017-10-20 02:09:19,3
115090,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_AbstractDaemonTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected void configLabel(java.lang.String label, com.google.gerrit.common.data.LabelValue... value) throws java.lang.Exception { configLabel(project, label, value); }",330296e488d47e89d59ccf45d619d77fcb479cc3,"protected void configLabel(java.lang.String label, java.lang.String func) throws java.lang.Exception { configLabel(project, label, func, value(1, ""Passes""), value(0, ""No score""), value((-1), ""Failed"")); }",9b4fa4768aaf49537e8eafc0bd720a101fd22627,2017-10-20 16:13:18,14
115090,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_AbstractDaemonTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected void configLabel(java.lang.String label) throws java.lang.Exception { configLabel(project, label, value(1, ""Passes""), value(0, ""No score""), value((-1), ""Failed"")); }",3021aeac4cc3f65cb1da2d2ccf1a22fc7d84ebee,"protected java.lang.String createAccount(java.lang.String name, java.lang.String group) throws java.lang.Exception { name = name(name); accountCreator.create(name, group); return name; }",9676af8517d3938e032b1da5f6147253462e96de,2017-10-20 16:13:18,14
125671,gerrit-server_src_test_java_com_google_gerrit_server_git_LabelNormalizerTest.java,"@org.junit.Test public void normalizeByPermission() throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig pc = loadAllProjects(); allow(pc, forLabel(""Code-Review""), (-1), 1, com.google.gerrit.server.git.REGISTERED_USERS, ""refs/heads/*""); allow(pc, forLabel(""Verified""), (-1), 1, com.google.gerrit.server.git.REGISTERED_USERS, ""refs/heads/*""); save(pc); com.google.gerrit.reviewdb.client.PatchSetApproval cr = psa(userId, ""Code-Review"", 2); com.google.gerrit.reviewdb.client.PatchSetApproval v = psa(userId, ""Verified"", 1); assertEquals(com.google.gerrit.server.git.LabelNormalizer.Result.create(com.google.gerrit.server.git.LabelNormalizerTest.list(v), com.google.gerrit.server.git.LabelNormalizerTest.list(copy(cr, 1)), com.google.gerrit.server.git.LabelNormalizerTest.list()), norm.normalize(change, com.google.gerrit.server.git.LabelNormalizerTest.list(cr, v))); }",3196525361a3084412b69061770b877b63790618,"@org.junit.Test public void noNormalizeByPermission() throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig pc = loadAllProjects(); allow(pc, forLabel(""Code-Review""), (-1), 1, com.google.gerrit.server.git.REGISTERED_USERS, ""refs/heads/*""); allow(pc, forLabel(""Verified""), (-1), 1, com.google.gerrit.server.git.REGISTERED_USERS, ""refs/heads/*""); save(pc); com.google.gerrit.reviewdb.client.PatchSetApproval cr = psa(userId, ""Code-Review"", 2); com.google.gerrit.reviewdb.client.PatchSetApproval v = psa(userId, ""Verified"", 1); assertEquals(com.google.gerrit.server.git.LabelNormalizer.Result.create(com.google.gerrit.server.git.LabelNormalizerTest.list(cr, v), com.google.gerrit.server.git.LabelNormalizerTest.list(), com.google.gerrit.server.git.LabelNormalizerTest.list()), norm.normalize(change, com.google.gerrit.server.git.LabelNormalizerTest.list(cr, v))); }",232be1438823373173bfa073073740a032f319d2,"@org.junit.Test public void noNormalizeByPermission() throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig pc = loadAllProjects(); allow(pc, forLabel(""Code-Review""), (-1), 1, com.google.gerrit.server.git.REGISTERED_USERS, ""refs/heads/*""); allow(pc, forLabel(""Verified""), (-1), 1, com.google.gerrit.server.git.REGISTERED_USERS, ""refs/heads/*""); save(pc); com.google.gerrit.reviewdb.client.PatchSetApproval cr = psa(userId, ""Code-Review"", 2); com.google.gerrit.reviewdb.client.PatchSetApproval v = psa(userId, ""Verified"", 1); assertEquals(com.google.gerrit.server.git.LabelNormalizer.Result.create(com.google.gerrit.server.git.LabelNormalizerTest.list(cr, v), com.google.gerrit.server.git.LabelNormalizerTest.list(), com.google.gerrit.server.git.LabelNormalizerTest.list()), norm.normalize(notes, com.google.gerrit.server.git.LabelNormalizerTest.list(cr, v))); }",9a0fdad5b52eeadc703a11b6039710dc5bf261c4,2017-10-20 16:13:18,5
125671,gerrit-server_src_test_java_com_google_gerrit_server_git_LabelNormalizerTest.java,"@org.junit.Test public void explicitZeroVoteOnNonEmptyRangeIsPresent() throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig pc = loadAllProjects(); allow(pc, forLabel(""Code-Review""), (-1), 1, com.google.gerrit.server.git.REGISTERED_USERS, ""refs/heads/*""); save(pc); com.google.gerrit.reviewdb.client.PatchSetApproval cr = psa(userId, ""Code-Review"", 0); com.google.gerrit.reviewdb.client.PatchSetApproval v = psa(userId, ""Verified"", 0); assertEquals(com.google.gerrit.server.git.LabelNormalizer.Result.create(com.google.gerrit.server.git.LabelNormalizerTest.list(cr), com.google.gerrit.server.git.LabelNormalizerTest.list(), com.google.gerrit.server.git.LabelNormalizerTest.list(v)), norm.normalize(change, com.google.gerrit.server.git.LabelNormalizerTest.list(cr, v))); }",30486357788eb984df284c79b75f4c12e4e50f85,"@org.junit.Test public void explicitZeroVoteOnNonEmptyRangeIsPresent() throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig pc = loadAllProjects(); allow(pc, forLabel(""Code-Review""), (-1), 1, com.google.gerrit.server.git.REGISTERED_USERS, ""refs/heads/*""); save(pc); com.google.gerrit.reviewdb.client.PatchSetApproval cr = psa(userId, ""Code-Review"", 0); com.google.gerrit.reviewdb.client.PatchSetApproval v = psa(userId, ""Verified"", 0); assertEquals(com.google.gerrit.server.git.LabelNormalizer.Result.create(com.google.gerrit.server.git.LabelNormalizerTest.list(cr, v), com.google.gerrit.server.git.LabelNormalizerTest.list(), com.google.gerrit.server.git.LabelNormalizerTest.list()), norm.normalize(change, com.google.gerrit.server.git.LabelNormalizerTest.list(cr, v))); }",2c2cc6d5995280b88f64ddad71747951435c32a4,"@org.junit.Test public void explicitZeroVoteOnNonEmptyRangeIsPresent() throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig pc = loadAllProjects(); allow(pc, forLabel(""Code-Review""), (-1), 1, com.google.gerrit.server.git.REGISTERED_USERS, ""refs/heads/*""); save(pc); com.google.gerrit.reviewdb.client.PatchSetApproval cr = psa(userId, ""Code-Review"", 0); com.google.gerrit.reviewdb.client.PatchSetApproval v = psa(userId, ""Verified"", 0); assertEquals(com.google.gerrit.server.git.LabelNormalizer.Result.create(com.google.gerrit.server.git.LabelNormalizerTest.list(cr, v), com.google.gerrit.server.git.LabelNormalizerTest.list(), com.google.gerrit.server.git.LabelNormalizerTest.list()), norm.normalize(notes, com.google.gerrit.server.git.LabelNormalizerTest.list(cr, v))); }",2b97b3433b1a72248f749c0fc3481d933a63fea6,2017-10-20 16:13:18,5
115090,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_AbstractDaemonTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected void configLabel(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String label, com.google.gerrit.common.data.LabelValue... value) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(project).getConfig(); com.google.gerrit.common.data.LabelType verified = category(label, value); cfg.getLabelSections().put(verified.getName(), verified); saveProjectConfig(project, cfg); }",0171ce08142eabb507cc398cb3ec2371681c94c7,"protected void configLabel(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String label, java.lang.String func, com.google.gerrit.common.data.LabelValue... value) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(project).getConfig(); com.google.gerrit.common.data.LabelType labelType = category(label, value); labelType.setFunctionName(func); cfg.getLabelSections().put(labelType.getName(), labelType); saveProjectConfig(project, cfg); }",9a74c920d6dd22193da4bb17aee8d27f8bc2adf8,2017-10-20 16:13:18,14
125671,gerrit-server_src_test_java_com_google_gerrit_server_git_LabelNormalizerTest.java,"@org.junit.Test public void emptyPermissionRangeOmitsResult() throws java.lang.Exception { com.google.gerrit.reviewdb.client.PatchSetApproval cr = psa(userId, ""Code-Review"", 1); com.google.gerrit.reviewdb.client.PatchSetApproval v = psa(userId, ""Verified"", 1); assertEquals(com.google.gerrit.server.git.LabelNormalizer.Result.create(com.google.gerrit.server.git.LabelNormalizerTest.list(), com.google.gerrit.server.git.LabelNormalizerTest.list(), com.google.gerrit.server.git.LabelNormalizerTest.list(cr, v)), norm.normalize(change, com.google.gerrit.server.git.LabelNormalizerTest.list(cr, v))); }",b21a7b40b90ba6b94c4bfe8fa6568206594f84d8,"@org.junit.Test public void emptyPermissionRangeKeepsResult() throws java.lang.Exception { com.google.gerrit.reviewdb.client.PatchSetApproval cr = psa(userId, ""Code-Review"", 1); com.google.gerrit.reviewdb.client.PatchSetApproval v = psa(userId, ""Verified"", 1); assertEquals(com.google.gerrit.server.git.LabelNormalizer.Result.create(com.google.gerrit.server.git.LabelNormalizerTest.list(cr, v), com.google.gerrit.server.git.LabelNormalizerTest.list(), com.google.gerrit.server.git.LabelNormalizerTest.list()), norm.normalize(change, com.google.gerrit.server.git.LabelNormalizerTest.list(cr, v))); }",cc853e60265952d4c96a8d59c15c6a1f173f937f,"@org.junit.Test public void emptyPermissionRangeKeepsResult() throws java.lang.Exception { com.google.gerrit.reviewdb.client.PatchSetApproval cr = psa(userId, ""Code-Review"", 1); com.google.gerrit.reviewdb.client.PatchSetApproval v = psa(userId, ""Verified"", 1); assertEquals(com.google.gerrit.server.git.LabelNormalizer.Result.create(com.google.gerrit.server.git.LabelNormalizerTest.list(cr, v), com.google.gerrit.server.git.LabelNormalizerTest.list(), com.google.gerrit.server.git.LabelNormalizerTest.list()), norm.normalize(notes, com.google.gerrit.server.git.LabelNormalizerTest.list(cr, v))); }",3060121cf5a4e234384e8208796c2f81528aad2d,2017-10-20 16:13:18,5
135331,gerrit-common_src_main_java_com_google_gerrit_common_data_LabelType.java,public java.lang.String getFunctionName() { return functionName; },28e05a6bbcea79222e655c7d98111d768ef59fcf,public com.google.gerrit.common.data.LabelFunction getFunction() { return function; },fc8b174caed380ddd9e8d82c5f472b9a500d94fe,"public com.google.gerrit.common.data.LabelFunction getFunction() { if ((functionName) == null) { return null; } java.util.Optional<com.google.gerrit.common.data.LabelFunction> f = com.google.gerrit.common.data.LabelFunction.parse(functionName); if (!(f.isPresent())) { throw new java.lang.IllegalStateException((""Unsupported functionName: "" + (functionName))); } return f.get(); }",b6723f4e7e6229bf0b260cdc9959e3ec660a8da6,2017-10-20 22:58:29,3
135331,gerrit-common_src_main_java_com_google_gerrit_common_data_LabelType.java,public void setFunctionName(java.lang.String functionName) { this.functionName = functionName; },6c59ce1d384098aab6044196bd2ffe0a50e1bdd5,public void setFunction(@com.google.gerrit.common.Nullable com.google.gerrit.common.data.LabelFunction function) { this.function = function; },b37285023b13ef0fbb3d2b8a75a8dc0fa532a8b4,public void setFunction(@com.google.gerrit.common.Nullable com.google.gerrit.common.data.LabelFunction function) { this.functionName = (function != null) ? function.getFunctionName() : null; },b3181fc1897e2af28e8bcb60db828ad8b4ca603b,2017-10-20 22:58:29,3
135371,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_AbstractPushForReview.java,"@org.junit.Test public void pushForMasterWithApprovalsForgeCommitterButNoForgeVote() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = commitBuilder().author(user.getIdent()).committer(user.getIdent()).add(PushOneCommit.FILE_NAME, PushOneCommit.FILE_CONTENT).message(PushOneCommit.SUBJECT).create(); com.google.gerrit.acceptance.GitUtil.pushHead(testRepo, ""refs/for/master/%l=Code-Review+1"", false); ChangeInfo ci = get(com.google.gerrit.acceptance.GitUtil.getChangeId(testRepo, c).get()); LabelInfo cr = ci.labels.get(""Code-Review""); assertThat(cr.all).hasSize(2); int indexAdmin = (admin.fullName.equals(cr.all.get(0).name)) ? 0 : 1; int indexUser = (indexAdmin == 0) ? 1 : 0; assertThat(cr.all.get(indexAdmin).name).isEqualTo(admin.fullName); assertThat(cr.all.get(indexAdmin).value.intValue()).isEqualTo(1); assertThat(cr.all.get(indexUser).name).isEqualTo(user.fullName); assertThat(cr.all.get(indexUser).value.intValue()).isEqualTo(0); assertThat(com.google.common.collect.Iterables.getLast(ci.messages).message).isEqualTo(""Uploaded patch set 1: Code-Review+1.""); assertThatUserIsOnlyReviewer(ci, admin); }",a50536146c09551d04df2c2879d7b5c142546cba,"@org.junit.Test public void pushForMasterWithApprovalsForgeCommitterButNoForgeVote() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = commitBuilder().author(user.getIdent()).committer(user.getIdent()).add(PushOneCommit.FILE_NAME, PushOneCommit.FILE_CONTENT).message(PushOneCommit.SUBJECT).create(); com.google.gerrit.acceptance.GitUtil.pushHead(testRepo, ""refs/for/master/%l=Code-Review+1"", false); ChangeInfo ci = get(com.google.gerrit.acceptance.GitUtil.getChangeId(testRepo, c).get(), com.google.gerrit.acceptance.git.DETAILED_LABELS, com.google.gerrit.acceptance.git.MESSAGES); LabelInfo cr = ci.labels.get(""Code-Review""); assertThat(cr.all).hasSize(2); int indexAdmin = (admin.fullName.equals(cr.all.get(0).name)) ? 0 : 1; int indexUser = (indexAdmin == 0) ? 1 : 0; assertThat(cr.all.get(indexAdmin).name).isEqualTo(admin.fullName); assertThat(cr.all.get(indexAdmin).value.intValue()).isEqualTo(1); assertThat(cr.all.get(indexUser).name).isEqualTo(user.fullName); assertThat(cr.all.get(indexUser).value.intValue()).isEqualTo(0); assertThat(com.google.common.collect.Iterables.getLast(ci.messages).message).isEqualTo(""Uploaded patch set 1: Code-Review+1.""); assertThatUserIsOnlyReviewer(ci, admin); }",e7cd3dca516d927eef0ebdf10342eb7d406c327d,"@org.junit.Test public void pushForMasterWithApprovalsForgeCommitterButNoForgeVote() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = commitBuilder().author(user.getIdent()).committer(user.getIdent()).add(PushOneCommit.FILE_NAME, PushOneCommit.FILE_CONTENT).message(PushOneCommit.SUBJECT).create(); com.google.gerrit.acceptance.GitUtil.pushHead(testRepo, ""refs/for/master/%l=Code-Review+1"", false); ChangeInfo ci = get(com.google.gerrit.acceptance.GitUtil.getChangeId(testRepo, c).get(), com.google.gerrit.acceptance.git.DETAILED_LABELS, com.google.gerrit.acceptance.git.MESSAGES, com.google.gerrit.acceptance.git.DETAILED_ACCOUNTS); LabelInfo cr = ci.labels.get(""Code-Review""); assertThat(cr.all).hasSize(2); int indexAdmin = (admin.fullName.equals(cr.all.get(0).name)) ? 0 : 1; int indexUser = (indexAdmin == 0) ? 1 : 0; assertThat(cr.all.get(indexAdmin).name).isEqualTo(admin.fullName); assertThat(cr.all.get(indexAdmin).value.intValue()).isEqualTo(1); assertThat(cr.all.get(indexUser).name).isEqualTo(user.fullName); assertThat(cr.all.get(indexUser).value.intValue()).isEqualTo(0); assertThat(com.google.common.collect.Iterables.getLast(ci.messages).message).isEqualTo(""Uploaded patch set 1: Code-Review+1.""); assertThatUserIsOnlyReviewer(ci, admin); }",c299c5384585969b6b81f8cfd82a4c0d12bdfb78,2017-10-25 07:08:10,2
135371,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_AbstractPushForReview.java,"@org.junit.Test public void pushNewPatchSetForMasterWithApprovals() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo(""refs/for/master""); r.assertOkStatus(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, ""b.txt"", ""anotherContent"", r.getChangeId()); r = push.to(""refs/for/master/%l=Code-Review+2""); ChangeInfo ci = get(r.getChangeId()); LabelInfo cr = ci.labels.get(""Code-Review""); assertThat(com.google.common.collect.Iterables.getLast(ci.messages).message).isEqualTo(""Uploaded patch set 2: Code-Review+2.""); assertThatUserIsOnlyReviewer(ci, admin); assertThat(cr.all).hasSize(1); assertThat(cr.all.get(0).name).isEqualTo(""Administrator""); assertThat(cr.all.get(0).value).isEqualTo(2); }",f3f0ddc8c6e6c7a4fb8960b3c2b26533632566e7,"@org.junit.Test public void pushNewPatchSetForMasterWithApprovals() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo(""refs/for/master""); r.assertOkStatus(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, ""b.txt"", ""anotherContent"", r.getChangeId()); r = push.to(""refs/for/master/%l=Code-Review+2""); ChangeInfo ci = get(r.getChangeId(), com.google.gerrit.acceptance.git.DETAILED_LABELS, com.google.gerrit.acceptance.git.MESSAGES); LabelInfo cr = ci.labels.get(""Code-Review""); assertThat(com.google.common.collect.Iterables.getLast(ci.messages).message).isEqualTo(""Uploaded patch set 2: Code-Review+2.""); assertThatUserIsOnlyReviewer(ci, admin); assertThat(cr.all).hasSize(1); assertThat(cr.all.get(0).name).isEqualTo(""Administrator""); assertThat(cr.all.get(0).value).isEqualTo(2); }",5a2fcc2432de9ca15ce38b630d49b8c84da78d58,"@org.junit.Test public void pushNewPatchSetForMasterWithApprovals() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo(""refs/for/master""); r.assertOkStatus(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, ""b.txt"", ""anotherContent"", r.getChangeId()); r = push.to(""refs/for/master/%l=Code-Review+2""); ChangeInfo ci = get(r.getChangeId(), com.google.gerrit.acceptance.git.DETAILED_LABELS, com.google.gerrit.acceptance.git.MESSAGES, com.google.gerrit.acceptance.git.DETAILED_ACCOUNTS); LabelInfo cr = ci.labels.get(""Code-Review""); assertThat(com.google.common.collect.Iterables.getLast(ci.messages).message).isEqualTo(""Uploaded patch set 2: Code-Review+2.""); assertThatUserIsOnlyReviewer(ci, admin); assertThat(cr.all).hasSize(1); assertThat(cr.all.get(0).name).isEqualTo(""Administrator""); assertThat(cr.all.get(0).value).isEqualTo(2); }",a753a4c66b2d8c6a59b175a3c62025ae8cd64d2f,2017-10-25 07:08:10,2
135371,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_AbstractPushForReview.java,"@org.junit.Test public void pushWithMultipleApprovals() throws java.lang.Exception { com.google.gerrit.common.data.LabelType Q = category(""Custom-Label"", value(1, ""Positive""), value(0, ""No score""), value((-1), ""Negative"")); com.google.gerrit.server.git.ProjectConfig config = projectCache.checkedGet(project).getConfig(); com.google.gerrit.reviewdb.client.AccountGroup.UUID anon = systemGroupBackend.getGroup(com.google.gerrit.acceptance.git.ANONYMOUS_USERS).getUUID(); java.lang.String heads = ""refs/heads/*""; com.google.gerrit.server.project.Util.allow(config, com.google.gerrit.common.data.Permission.forLabel(""Custom-Label""), (-1), 1, anon, heads); config.getLabelSections().put(Q.getName(), Q); saveProjectConfig(project, config); org.eclipse.jgit.revwalk.RevCommit c = commitBuilder().author(admin.getIdent()).committer(admin.getIdent()).add(PushOneCommit.FILE_NAME, PushOneCommit.FILE_CONTENT).message(PushOneCommit.SUBJECT).create(); com.google.gerrit.acceptance.GitUtil.pushHead(testRepo, ""refs/for/master/%l=Code-Review+1,l=Custom-Label-1"", false); ChangeInfo ci = get(com.google.gerrit.acceptance.GitUtil.getChangeId(testRepo, c).get()); com.google.gerrit.extensions.common.LabelInfo cr = ci.labels.get(""Code-Review""); assertThat(cr.all).hasSize(1); cr = ci.labels.get(""Custom-Label""); assertThat(cr.all).hasSize(1); assertThatUserIsOnlyReviewer(ci, admin); }",efd7c37366dcc3116fd1eca68bc498e4caa5305c,"@org.junit.Test public void pushWithMultipleApprovals() throws java.lang.Exception { com.google.gerrit.common.data.LabelType Q = category(""Custom-Label"", value(1, ""Positive""), value(0, ""No score""), value((-1), ""Negative"")); com.google.gerrit.server.git.ProjectConfig config = projectCache.checkedGet(project).getConfig(); com.google.gerrit.reviewdb.client.AccountGroup.UUID anon = systemGroupBackend.getGroup(com.google.gerrit.acceptance.git.ANONYMOUS_USERS).getUUID(); java.lang.String heads = ""refs/heads/*""; com.google.gerrit.server.project.Util.allow(config, com.google.gerrit.common.data.Permission.forLabel(""Custom-Label""), (-1), 1, anon, heads); config.getLabelSections().put(Q.getName(), Q); saveProjectConfig(project, config); org.eclipse.jgit.revwalk.RevCommit c = commitBuilder().author(admin.getIdent()).committer(admin.getIdent()).add(PushOneCommit.FILE_NAME, PushOneCommit.FILE_CONTENT).message(PushOneCommit.SUBJECT).create(); com.google.gerrit.acceptance.GitUtil.pushHead(testRepo, ""refs/for/master/%l=Code-Review+1,l=Custom-Label-1"", false); ChangeInfo ci = get(com.google.gerrit.acceptance.GitUtil.getChangeId(testRepo, c).get(), com.google.gerrit.acceptance.git.DETAILED_LABELS); com.google.gerrit.extensions.common.LabelInfo cr = ci.labels.get(""Code-Review""); assertThat(cr.all).hasSize(1); cr = ci.labels.get(""Custom-Label""); assertThat(cr.all).hasSize(1); assertThatUserIsOnlyReviewer(ci, admin); }",cee6efaa0838df178c79f82b327728f367be9f87,"@org.junit.Test public void pushWithMultipleApprovals() throws java.lang.Exception { com.google.gerrit.common.data.LabelType Q = category(""Custom-Label"", value(1, ""Positive""), value(0, ""No score""), value((-1), ""Negative"")); com.google.gerrit.server.git.ProjectConfig config = projectCache.checkedGet(project).getConfig(); com.google.gerrit.reviewdb.client.AccountGroup.UUID anon = systemGroupBackend.getGroup(com.google.gerrit.acceptance.git.ANONYMOUS_USERS).getUUID(); java.lang.String heads = ""refs/heads/*""; com.google.gerrit.server.project.Util.allow(config, com.google.gerrit.common.data.Permission.forLabel(""Custom-Label""), (-1), 1, anon, heads); config.getLabelSections().put(Q.getName(), Q); saveProjectConfig(project, config); org.eclipse.jgit.revwalk.RevCommit c = commitBuilder().author(admin.getIdent()).committer(admin.getIdent()).add(PushOneCommit.FILE_NAME, PushOneCommit.FILE_CONTENT).message(PushOneCommit.SUBJECT).create(); com.google.gerrit.acceptance.GitUtil.pushHead(testRepo, ""refs/for/master/%l=Code-Review+1,l=Custom-Label-1"", false); ChangeInfo ci = get(com.google.gerrit.acceptance.GitUtil.getChangeId(testRepo, c).get(), com.google.gerrit.acceptance.git.DETAILED_LABELS, com.google.gerrit.acceptance.git.DETAILED_ACCOUNTS); com.google.gerrit.extensions.common.LabelInfo cr = ci.labels.get(""Code-Review""); assertThat(cr.all).hasSize(1); cr = ci.labels.get(""Custom-Label""); assertThat(cr.all).hasSize(1); assertThatUserIsOnlyReviewer(ci, admin); }",55111c64c96f5afb355789c4457f0727b8022a30,2017-10-25 07:08:10,2
136330,src_main_java_com_googlesource_gerrit_plugins_its_base_util_PropertyAttributeExtractor.java,"public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create(""revision"", patchSetAttribute.revision)); properties.add(propertyFactory.create(""patch-set-number"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""ref"", patchSetAttribute.ref)); properties.add(propertyFactory.create(""created-on"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""parents"", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create(""deletions"", java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create(""insertions"", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.add(propertyFactory.create(""is-draft"", java.lang.Boolean.toString(patchSetAttribute.isDraft))); properties.addAll(extractFrom(patchSetAttribute.uploader, ""uploader"")); properties.addAll(extractFrom(patchSetAttribute.author, ""author"")); return properties; }",228f8ea5a2bb3bb0786d051ba7fc38f9bf333d97,"public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create(""revision"", patchSetAttribute.revision)); properties.add(propertyFactory.create(""patch-set-number"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""patchSetNumber"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""ref"", patchSetAttribute.ref)); properties.add(propertyFactory.create(""created-on"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""createdOn"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""parents"", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create(""deletions"", java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create(""insertions"", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.add(propertyFactory.create(""is-draft"", java.lang.Boolean.toString(patchSetAttribute.isDraft))); properties.addAll(extractFrom(patchSetAttribute.uploader, ""uploader"")); properties.addAll(extractFrom(patchSetAttribute.author, ""author"")); return properties; }",4dc91484705783e79c9f6437b29e9f72ba1311d8,"public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create(""revision"", patchSetAttribute.revision)); properties.add(propertyFactory.create(""patch-set-number"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""patchSetNumber"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""ref"", patchSetAttribute.ref)); properties.add(propertyFactory.create(""created-on"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""createdOn"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""parents"", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create(""deletions"", java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create(""insertions"", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.add(propertyFactory.create(""is-draft"", java.lang.Boolean.toString(patchSetAttribute.isDraft))); properties.add(propertyFactory.create(""isDraft"", java.lang.Boolean.toString(patchSetAttribute.isDraft))); properties.addAll(extractFrom(patchSetAttribute.uploader, ""uploader"")); properties.addAll(extractFrom(patchSetAttribute.author, ""author"")); return properties; }",542d8e5141b1514d445c68650d055f4127a8999a,2017-10-25 13:06:10,5
129411,gerrit-server_src_main_java_com_google_gerrit_server_account_IncludingGroupMembership.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getGroupsWithMember(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id memberId) throws com.google.gwtorm.server.OrmException { java.util.stream.Stream<com.google.gerrit.server.group.InternalGroup> internalGroupStream; if (groupIndexProvider.get().getSchema().hasField(GroupField.MEMBER)) { internalGroupStream = groupQueryProvider.get().byMember(memberId).stream(); } else { internalGroupStream = com.google.gerrit.server.group.Groups.getGroupsWithMemberFromReviewDb(db, memberId).map(groupCache::get).flatMap(Streams::stream); } return internalGroupStream.map(InternalGroup::getGroupUUID).collect(toImmutableSet()); }",e29cf57edf23e8000b5c0838654533d1589279e6,"private com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getGroupsWithMember(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id memberId) throws com.google.gwtorm.server.OrmException { java.util.stream.Stream<com.google.gerrit.server.group.InternalGroup> internalGroupStream; com.google.gerrit.server.index.group.GroupIndex groupIndex = groupIndexProvider.get(); if ((groupIndex != null) && (groupIndex.getSchema().hasField(GroupField.MEMBER))) { internalGroupStream = groupQueryProvider.get().byMember(memberId).stream(); } else { internalGroupStream = com.google.gerrit.server.group.Groups.getGroupsWithMemberFromReviewDb(db, memberId).map(groupCache::get).flatMap(Streams::stream); } return internalGroupStream.map(InternalGroup::getGroupUUID).collect(toImmutableSet()); }",01d50543789c03bf9040eb375bc343e75809975f,2017-10-25 13:20:09,3
136010,gerrit-server_src_main_java_com_google_gerrit_server_change_CreateMergePatchSet.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.reviewdb.client.PatchSet findBasePatchSet(java.lang.String baseChange) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(baseChange); if ((notes.size()) != 1) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException((""Base change not found: "" + baseChange)); } com.google.gerrit.server.notedb.ChangeNotes change = com.google.common.collect.Iterables.getOnlyElement(notes); if (!(permissionBackend.user(user).change(change).database(db).test(ChangePermission.READ))) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException((""Base change not found: "" + baseChange)); } return psUtil.current(db.get(), change); }",6a6bab6f275148ae32f9601f6731fa2ffe21a77d,"private com.google.gerrit.reviewdb.client.PatchSet findBasePatchSet(java.lang.String baseChange) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(baseChange); if ((notes.size()) != 1) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException((""Base change not found: "" + baseChange)); } com.google.gerrit.server.notedb.ChangeNotes change = com.google.common.collect.Iterables.getOnlyElement(notes); try { permissionBackend.user(user).change(change).database(db).check(ChangePermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException((""Read not permitted for "" + baseChange)); } return psUtil.current(db.get(), change); }",501ab7f322130bf5ad8d3aa7fe8dee95c40c49fc,2017-10-25 13:41:31,2
136010,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void createMergePatchSetCannotBaseOnInvisibleChange() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit initialHead = getRemoteHead(); createBranch(""foo""); createBranch(""bar""); merge(createChange(""refs/for/foo"")); testRepo.reset(initialHead); java.lang.String baseChange = createChange(""refs/for/bar"").getChangeId(); gApi.changes().id(baseChange).setPrivate(true, ""set private""); setApiUser(user); testRepo.reset(initialHead); java.lang.String changeId = createChange().getChangeId(); exception.expect(com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); exception.expectMessage(""Base change not found""); gApi.changes().id(changeId).createMergePatchSet(createMergePatchSetInput(baseChange)); }",c5d5596ec92ee25478dee309499b2af0aecf8cc4,"@org.junit.Test public void createMergePatchSetCannotBaseOnInvisibleChange() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit initialHead = getRemoteHead(); createBranch(""foo""); createBranch(""bar""); merge(createChange(""refs/for/foo"")); testRepo.reset(initialHead); java.lang.String baseChange = createChange(""refs/for/bar"").getChangeId(); gApi.changes().id(baseChange).setPrivate(true, ""set private""); setApiUser(user); testRepo.reset(initialHead); java.lang.String changeId = createChange().getChangeId(); exception.expect(com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); exception.expectMessage((""Read not permitted for "" + baseChange)); gApi.changes().id(changeId).createMergePatchSet(createMergePatchSetInput(baseChange)); }",2dc78c07636e105bf14b50c7f8ac6630eaa1a33a,2017-10-25 13:41:31,2
114490,src_main_java_com_googlesource_gerrit_plugins_its_base_util_IssueExtractor.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String getPreviousRevision(com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gerrit.extensions.restapi.RestApiException { ChangeInfo info = gApi.changes().id(psId.getParentKey().get()).get(java.util.EnumSet.of(ListChangesOption.ALL_REVISIONS)); for (java.util.Map.Entry<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> e : info.revisions.entrySet()) { if ((e.getValue()._number) == ((psId.get()) - 1)) { return e.getKey(); } } return null; }",97cd2f01039ad0c896eac344d930744b65eb570a,"@java.lang.Override public java.lang.String getRevision(com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId) { try { com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(patchSetId.getParentKey().get()).get(java.util.EnumSet.of(ListChangesOption.ALL_REVISIONS)); for (java.util.Map.Entry<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> e : info.revisions.entrySet()) { if ((e.getValue()._number) == (patchSetId.get())) { return e.getKey(); } } return null; } catch (com.google.gerrit.extensions.restapi.RestApiException e) { } return null; }",16a87f54b4c828bc5a064f9f92ddc92c9726f506,2017-10-26 09:13:00,5
114490,src_main_java_com_googlesource_gerrit_plugins_its_base_util_IssueExtractor.java,"public java.util.Map<java.lang.String, java.util.Set<java.lang.String>> getIssueIds(java.lang.String projectName, java.lang.String commitId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> current = getIssueIds(projectName, commitId); if (patchSetId != null) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> previous = com.google.common.collect.Maps.newHashMap(); if ((patchSetId.get()) != 1) { com.google.gerrit.reviewdb.client.PatchSet.Id previousPatchSetId = new com.google.gerrit.reviewdb.client.PatchSet.Id(patchSetId.getParentKey(), ((patchSetId.get()) - 1)); try { com.google.gerrit.reviewdb.client.PatchSet previousPatchSet = db.patchSets().get(previousPatchSetId); if (previousPatchSet != null) { previous = getIssueIds(projectName, previousPatchSet.getRevision().get()); } } catch (com.google.gwtorm.server.OrmException e) { } } for (java.lang.String issue : current.keySet()) { java.util.Set<java.lang.String> currentOccurrences = current.get(issue); java.util.Set<java.lang.String> previousOccurrences = previous.get(issue); java.util.Set<java.lang.String> newOccurrences; if ((previousOccurrences == null) || (previousOccurrences.isEmpty())) { newOccurrences = com.google.common.collect.Sets.newHashSet(currentOccurrences); } else { newOccurrences = com.google.common.collect.Sets.newHashSet(currentOccurrences); newOccurrences.removeAll(previousOccurrences); } for (java.lang.String occurrence : newOccurrences) { currentOccurrences.add((""added@"" + occurrence)); } } } return current; }",da59b8782a89816225801bb5e4928b56bf6934f8,"public java.util.Map<java.lang.String, java.util.Set<java.lang.String>> getIssueIds(java.lang.String projectName, java.lang.String commitId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> current = getIssueIds(projectName, commitId); if (patchSetId != null) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> previous = com.google.common.collect.Maps.newHashMap(); if ((patchSetId.get()) != 1) { try { java.lang.String previousRevision = getPreviousRevision(patchSetId); if (previousRevision != null) { previous = getIssueIds(projectName, previousRevision); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { } } for (java.lang.String issue : current.keySet()) { java.util.Set<java.lang.String> currentOccurrences = current.get(issue); java.util.Set<java.lang.String> previousOccurrences = previous.get(issue); java.util.Set<java.lang.String> newOccurrences; if ((previousOccurrences == null) || (previousOccurrences.isEmpty())) { newOccurrences = com.google.common.collect.Sets.newHashSet(currentOccurrences); } else { newOccurrences = com.google.common.collect.Sets.newHashSet(currentOccurrences); newOccurrences.removeAll(previousOccurrences); } for (java.lang.String occurrence : newOccurrences) { currentOccurrences.add((""added@"" + occurrence)); } } } return current; }",ee9c8b16fe6ac8810addbe0e55b3e364c8f7ec25,"public java.util.Map<java.lang.String, java.util.Set<java.lang.String>> getIssueIds(java.lang.String projectName, java.lang.String commitId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> current = getIssueIds(projectName, commitId); if (patchSetId != null) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> previous = com.google.common.collect.Maps.newHashMap(); if ((patchSetId.get()) != 1) { com.google.gerrit.reviewdb.client.PatchSet.Id previousPatchSetId = new com.google.gerrit.reviewdb.client.PatchSet.Id(patchSetId.getParentKey(), ((patchSetId.get()) - 1)); java.lang.String previousPatchSet = db.getRevision(previousPatchSetId); if (previousPatchSet != null) { previous = getIssueIds(projectName, previousPatchSet); } } for (java.lang.String issue : current.keySet()) { java.util.Set<java.lang.String> currentOccurrences = current.get(issue); java.util.Set<java.lang.String> previousOccurrences = previous.get(issue); java.util.Set<java.lang.String> newOccurrences; if ((previousOccurrences == null) || (previousOccurrences.isEmpty())) { newOccurrences = com.google.common.collect.Sets.newHashSet(currentOccurrences); } else { newOccurrences = com.google.common.collect.Sets.newHashSet(currentOccurrences); newOccurrences.removeAll(previousOccurrences); } for (java.lang.String occurrence : newOccurrences) { currentOccurrences.add((""added@"" + occurrence)); } } } return current; }",ebd55ea9a345ed51b55223b7352977d64233a1e0,2017-10-26 09:13:00,5
114490,src_test_java_com_googlesource_gerrit_plugins_its_base_util_IssueExtractorTest.java,@java.lang.Override protected void configure() { itsConfig = createMock(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class); bind(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class).toInstance(itsConfig); commitMessageFetcher = createMock(com.googlesource.gerrit.plugins.its.base.util.CommitMessageFetcher.class); bind(com.googlesource.gerrit.plugins.its.base.util.CommitMessageFetcher.class).toInstance(commitMessageFetcher); db = createMock(com.google.gerrit.reviewdb.server.ReviewDb.class); bind(com.google.gerrit.reviewdb.server.ReviewDb.class).toInstance(db); },0c5e18469dba9f35d4940e36c43d7b10922271d3,@java.lang.Override protected void configure() { itsConfig = createMock(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class); bind(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class).toInstance(itsConfig); commitMessageFetcher = createMock(com.googlesource.gerrit.plugins.its.base.util.CommitMessageFetcher.class); bind(com.googlesource.gerrit.plugins.its.base.util.CommitMessageFetcher.class).toInstance(commitMessageFetcher); com.google.gerrit.extensions.api.GerritApi gApi = createMock(com.google.gerrit.extensions.api.GerritApi.class); expect(gApi.changes()).andReturn(new com.google.gerrit.extensions.api.changes.Changes.NotImplemented() { @java.lang.Override public com.google.gerrit.extensions.api.changes.ChangeApi id(int id) { com.google.gerrit.extensions.api.changes.ChangeApi cApi = changeApis.get(new com.google.gerrit.reviewdb.client.Change.Id(id)); assertNotNull(cApi); return cApi; } }).anyTimes(); bind(com.google.gerrit.extensions.api.GerritApi.class).toInstance(gApi); },a06ca0a952eaaa76588504fe8d8df04ed70322c6,@java.lang.Override protected void configure() { itsConfig = createMock(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class); bind(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class).toInstance(itsConfig); commitMessageFetcher = createMock(com.googlesource.gerrit.plugins.its.base.util.CommitMessageFetcher.class); bind(com.googlesource.gerrit.plugins.its.base.util.CommitMessageFetcher.class).toInstance(commitMessageFetcher); db = createMock(com.googlesource.gerrit.plugins.its.base.util.IssueExtractor.PatchSetDb.class); bind(com.googlesource.gerrit.plugins.its.base.util.IssueExtractor.PatchSetDb.class).toInstance(db); },e356cc03500a5dfffbb488d1bd5b3b20f066d9c4,2017-10-26 09:13:00,5
114490,src_test_java_com_googlesource_gerrit_plugins_its_base_util_IssueExtractorTest.java,@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); injector = com.google.inject.Guice.createInjector(new com.googlesource.gerrit.plugins.its.base.util.IssueExtractorTest.TestModule()); },60b6940cc8325d7cfda79a182c3ca26847be650e,@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); changeApis = new java.util.HashMap(); changeInfos = new java.util.HashMap(); injector = com.google.inject.Guice.createInjector(new com.googlesource.gerrit.plugins.its.base.util.IssueExtractorTest.TestModule()); },67ac495fa08f7629cb7cceee291045ff69211e90,@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); injector = com.google.inject.Guice.createInjector(new com.googlesource.gerrit.plugins.its.base.util.IssueExtractorTest.TestModule()); },60b6940cc8325d7cfda79a182c3ca26847be650e,2017-10-26 09:13:00,5
136252,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_notedb_OnlineNoteDbMigrationIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void notesMigrationStateListener() throws java.lang.Exception { com.google.gerrit.server.notedb.rebuild.NotesMigrationStateListener listener = createStrictMock(com.google.gerrit.server.notedb.rebuild.NotesMigrationStateListener.class); listener.preStateChange(com.google.gerrit.acceptance.server.notedb.REVIEW_DB, NotesMigrationState.WRITE); expectLastCall(); listener.preStateChange(NotesMigrationState.WRITE, com.google.gerrit.acceptance.server.notedb.READ_WRITE_NO_SEQUENCE); expectLastCall(); listener.preStateChange(com.google.gerrit.acceptance.server.notedb.READ_WRITE_NO_SEQUENCE, com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY); expectLastCall(); listener.preStateChange(com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY, com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY); listener.preStateChange(com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY, com.google.gerrit.acceptance.server.notedb.NOTE_DB); expectLastCall(); replay(listener); addListener(listener); createChange(); migrate(( b) -> b); assertNotesMigrationState(com.google.gerrit.acceptance.server.notedb.NOTE_DB, false, false); verify(listener); }",57c3d51d53f4c4051f617f344cfd9427bb845ae3,"@org.junit.Test public void notesMigrationStateListener() throws java.lang.Exception { com.google.gerrit.server.notedb.rebuild.NotesMigrationStateListener listener = createStrictMock(com.google.gerrit.server.notedb.rebuild.NotesMigrationStateListener.class); listener.preStateChange(com.google.gerrit.acceptance.server.notedb.REVIEW_DB, com.google.gerrit.acceptance.server.notedb.WRITE); expectLastCall(); listener.preStateChange(com.google.gerrit.acceptance.server.notedb.WRITE, com.google.gerrit.acceptance.server.notedb.READ_WRITE_NO_SEQUENCE); expectLastCall(); listener.preStateChange(com.google.gerrit.acceptance.server.notedb.READ_WRITE_NO_SEQUENCE, com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY); expectLastCall(); listener.preStateChange(com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY, com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY); listener.preStateChange(com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY, com.google.gerrit.acceptance.server.notedb.NOTE_DB); expectLastCall(); replay(listener); addListener(listener); createChange(); migrate(( b) -> b); assertNotesMigrationState(com.google.gerrit.acceptance.server.notedb.NOTE_DB, false, false); verify(listener); }",9a9c6232dc08b6498381efd82550236ba3b2d729,2017-10-26 10:25:17,2
127031,src_main_java_com_googlesource_gerrit_plugins_webhooks_HttpSession.java,"com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult post(java.lang.String endpoint, java.lang.String content) throws java.io.IOException { org.apache.http.client.methods.HttpPost post = new org.apache.http.client.methods.HttpPost(endpoint); post.addHeader(""Content-Type"", MediaType.JSON_UTF_8.toString()); post.setEntity(new org.apache.http.entity.StringEntity(content, java.nio.charset.StandardCharsets.UTF_8)); return httpClient.execute(post, new com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler()); }",62f625f12797a9cd1b4b51b27b7107a836f7cfca,"com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult post(java.lang.String endpoint, java.util.Map<java.lang.String, java.lang.String> headers, java.lang.String content) throws java.io.IOException { org.apache.http.client.methods.HttpPost post = new org.apache.http.client.methods.HttpPost(endpoint); post.addHeader(""Content-Type"", MediaType.JSON_UTF_8.toString()); headers.entrySet().stream().forEach(( e) -> { post.addHeader(e.getKey(), e.getValue()); }); post.setEntity(new org.apache.http.entity.StringEntity(content, java.nio.charset.StandardCharsets.UTF_8)); return httpClient.execute(post, new com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler()); }",00fb1d8c471d31d7e03aecd3ea939a8142bc0fdc,"com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult post(java.lang.String endpoint, com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request request) throws java.io.IOException { org.apache.http.client.methods.HttpPost post = new org.apache.http.client.methods.HttpPost(endpoint); post.addHeader(""Content-Type"", MediaType.JSON_UTF_8.toString()); request.headers.entrySet().stream().forEach(( e) -> { post.addHeader(e.getKey(), e.getValue()); }); post.setEntity(new org.apache.http.entity.StringEntity(request.body, java.nio.charset.StandardCharsets.UTF_8)); return httpClient.execute(post, new com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler()); }",67bd58288e479581b44b25ecf66d22055ffa931f,2017-10-26 15:39:13,11
127031,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,"@org.junit.Test public void rescheduleOnError() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.ERR_RESULT); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",13dfcd7fc46aaa19015f936467b3b0cc28a0e4b1,"@org.junit.Test public void rescheduleOnError() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.ERR_RESULT); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",b89104f95b2109bb5772848dc66692a06217b515,"@org.junit.Test public void rescheduleOnError() throws java.io.IOException { when(session.post(eq(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL), eq(content))).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.ERR_RESULT); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",63c5ea2d96bdd6f481bf9c0d11c5afaa003bd00a,2017-10-26 15:39:13,11
127031,src_main_java_com_googlesource_gerrit_plugins_webhooks_PostTask.java,"@java.lang.Override public void run() { try { java.lang.String content = body.get(); if (com.google.common.base.Strings.isNullOrEmpty(content)) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug(""No content. Webhook [{}] skipped."", url); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.post(url, content); if ((!(result.successful)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error(""Failed to post: {}"", toString(), e); } } }",4cc01a01916671fb2397f8197a3ef016969ae535,"@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Output> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug(""No content. Webhook [{}] skipped."", url); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.post(url, content.get().headers, content.get().body); if ((!(result.successful)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error(""Failed to post: {}"", toString(), e); } } }",414303006e8282a9129dbfe3e7b5ac6a31f7c28d,"@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug(""No content. Webhook [{}] skipped."", url); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.post(url, content.get()); if ((!(result.successful)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error(""Failed to post: {}"", toString(), e); } } }",3c2320c4132c21114eeaf3e866dc26755e4c04ab,2017-10-26 15:39:13,11
127031,src_main_java_com_googlesource_gerrit_plugins_webhooks_PostTask.java,@java.lang.Override public java.lang.String toString() { return body.get(); },e6ddf0a0f71dbf9522a4590d47dacb975fec9d60,"@java.lang.Override public java.lang.String toString() { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Output> content = processor.get(); return content.isPresent() ? content.get().toString() : ""no content""; }",e6bbc2e14025cdf23cbfe9bb53d6e1b25e59e047,"@java.lang.Override public java.lang.String toString() { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request> content = processor.get(); return content.isPresent() ? content.get().toString() : ""no content""; }",129decfbdd5b020300c5047812801af974016e3c,2017-10-26 15:39:13,11
127031,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,"@org.junit.Test public void noRescheduleOnSuccess() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.OK_RESULT); task.run(); verifyZeroInteractions(executor); }",dfb9eedaf39f5cb88dcd4e185a67d5e6b8305f59,"@org.junit.Test public void noRescheduleOnSuccess() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.OK_RESULT); task.run(); verifyZeroInteractions(executor); }",688447b8f951f5a61dc3bbb97e8abb9d959264d0,"@org.junit.Test public void noRescheduleOnSuccess() throws java.io.IOException { when(session.post(eq(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL), eq(content))).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.OK_RESULT); task.run(); verifyZeroInteractions(executor); }",6fa6432651f376fabd1171d88381d3a3b0d25bef,2017-10-26 15:39:13,11
127031,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,"@org.junit.Test public void rescheduleOnRecoverableException() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenThrow(java.io.IOException.class); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",e1590546610f5eacd1a8ae350f7a2438047d8098,"@org.junit.Test public void rescheduleOnRecoverableException() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenThrow(java.io.IOException.class); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",c253b880c195f5f89bcb8de712c279047f388450,"@org.junit.Test public void rescheduleOnRecoverableException() throws java.io.IOException { when(session.post(eq(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL), eq(content))).thenThrow(java.io.IOException.class); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",d6f2a6dfb3def9dbddd010c4cfb6a13c4db00db7,2017-10-26 15:39:13,11
127031,src_main_java_com_googlesource_gerrit_plugins_webhooks_processors_JenkinsEventProcessor.java,@java.lang.Override public java.lang.String process() { return com.googlesource.gerrit.plugins.webhooks.processors.JenkinsEventProcessor.GSON.toJson(event); },9d1d9a01f52c674596f8f5e94cc1d8edc3546a3e,@java.lang.Override public java.util.Optional<com.googlesource.gerrit.plugins.webhooks.processors.Output> process() { return java.util.Optional.of(new com.googlesource.gerrit.plugins.webhooks.EventProcessor.Output(com.googlesource.gerrit.plugins.webhooks.processors.JenkinsEventProcessor.GSON.toJson(event))); },e98d521237cde247618919181b55ac9e9f425560,"@java.lang.Override public java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request> doProcess(com.google.gerrit.server.events.ProjectEvent event, com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request(com.googlesource.gerrit.plugins.webhooks.processors.GerritEventProcessor.GSON.toJson(event))); }",27feff7cf1e1f3d4edc83e79666fa9c35ab7a2e1,2017-10-26 15:39:13,11
127031,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,"@org.junit.Test public void noRescheduleOnNonRecoverableException() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenThrow(javax.net.ssl.SSLException.class); task.run(); verifyZeroInteractions(executor); }",d3587c0723ed76ec9ddbc92a42b8019ac3055bd6,"@org.junit.Test public void noRescheduleOnNonRecoverableException() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenThrow(javax.net.ssl.SSLException.class); task.run(); verifyZeroInteractions(executor); }",1ccce8b21312422ce253e4f4db285957cabec625,"@org.junit.Test public void noRescheduleOnNonRecoverableException() throws java.io.IOException { when(session.post(eq(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL), eq(content))).thenThrow(javax.net.ssl.SSLException.class); task.run(); verifyZeroInteractions(executor); }",cfca057feb454e9821f81e30ba067cb5b10ed36a,2017-10-26 15:39:13,11
127031,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,"@org.junit.Test public void keepReschedulingMaxTriesTimes() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenThrow(java.io.IOException.class); when(executor.schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS)).then(new org.mockito.stubbing.Answer<java.lang.Void>() { @java.lang.Override public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable { task.run(); return null; } }); task.run(); verify(executor, times(((com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES) - 1))).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",ce15662e6e69a77e7026f295c51506d811f59b51,"@org.junit.Test public void keepReschedulingMaxTriesTimes() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenThrow(java.io.IOException.class); when(executor.schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS)).then(new org.mockito.stubbing.Answer<java.lang.Void>() { @java.lang.Override public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable { task.run(); return null; } }); task.run(); verify(executor, times(((com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES) - 1))).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",05e1f072a63e0bb31a376d81df9f1bbb8e8900be,"@org.junit.Test public void keepReschedulingMaxTriesTimes() throws java.io.IOException { when(session.post(eq(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL), eq(content))).thenThrow(java.io.IOException.class); when(executor.schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS)).then(new org.mockito.stubbing.Answer<java.lang.Void>() { @java.lang.Override public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable { task.run(); return null; } }); task.run(); verify(executor, times(((com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES) - 1))).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",29582faf0856d595b452dd1e0bfb51b86b6d3ee3,2017-10-26 15:39:13,11
127031,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,"@org.junit.Before public void setup() { when(cfg.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(cfg.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(processor.process()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, cfg, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, processor); }",bce3249927e4dd9709447abe5e2d1a9d7b75e379,"@org.junit.Before public void setup() { when(cfg.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(cfg.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(processor.process()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.CONTENT); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, cfg, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, processor); }",538147e92e0d7ada834c2dd6568c208a30668b98,"@org.junit.Before public void setup() { when(cfg.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(cfg.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(remote.getUrl()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL); when(processor.process(eq(projectCreated), eq(remote))).thenReturn(java.util.Optional.of(content)); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, cfg, processor, projectCreated, remote); }",e5ca46d8d1fab560ddcc71d30a00fdc13c6a1064,2017-10-26 15:39:13,11
135611,gerrit-server_src_main_java_com_google_gerrit_server_index_project_ProjectIndexerImpl.java,"@java.lang.Override public void index(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws java.io.IOException { for (com.google.gerrit.index.Index<?, com.google.gerrit.server.project.ProjectData> i : getWriteIndexes()) { i.replace(projectCache.get(nameKey).toProjectData()); } fireProjectIndexedEvent(nameKey.get()); }",9b510049bf9faf11add0e491ed3ef960e8acacf0,"@java.lang.Override public void index(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(nameKey); if (projectState != null) { com.google.gerrit.server.project.ProjectData projectData = projectState.toProjectData(); for (com.google.gerrit.index.Index<?, com.google.gerrit.server.project.ProjectData> i : getWriteIndexes()) { i.replace(projectData); } fireProjectIndexedEvent(nameKey.get()); } }",a86f0e7d3c11a33d26f82a4c513ea2d28b1c7834,@java.lang.Override public void index(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(nameKey); if (projectState != null) { com.google.gerrit.server.project.ProjectData projectData = projectState.toProjectData(); for (com.google.gerrit.server.index.project.ProjectIndex i : getWriteIndexes()) { i.replace(projectData); } fireProjectIndexedEvent(nameKey.get()); } else { for (com.google.gerrit.server.index.project.ProjectIndex i : getWriteIndexes()) { i.delete(nameKey); } } },7968637221149d135136c73bd25a22e4547b3723,2017-10-30 11:23:47,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,"@org.junit.Test public void addReviewerThatCannotSeeChange() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p = createProject(""p""); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(p).getConfig(); com.google.gerrit.server.project.Util.allow(cfg, Permission.READ, groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""Administrators"")).orElse(null).getGroupUUID(), ""refs/*""); com.google.gerrit.server.project.Util.block(cfg, Permission.READ, com.google.gerrit.acceptance.api.change.REGISTERED_USERS, ""refs/*""); saveProjectConfig(p, cfg); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(p, admin); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), repo); com.google.gerrit.acceptance.PushOneCommit.Result result = push.to(""refs/for/master""); result.assertOkStatus(); setApiUser(user); try { gApi.changes().id(result.getChangeId()).get(); fail(""Expected ResourceNotFoundException""); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } setApiUser(admin); com.google.gerrit.extensions.api.changes.AddReviewerInput in = new com.google.gerrit.extensions.api.changes.AddReviewerInput(); in.reviewer = user.email; com.google.gerrit.extensions.api.changes.AddReviewerResult r = gApi.changes().id(result.getChangeId()).addReviewer(in); assertThat(r.input).isEqualTo(user.email); assertThat(r.error).contains(""does not have permission to see this change""); assertThat(r.reviewers).isNull(); }",492d07e19f10ceacb33ec26fe8a59bb2db5f094f,"@org.junit.Test public void addReviewerThatCannotSeeChange() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p = createProject(""p""); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(p).getConfig(); com.google.gerrit.server.project.Util.allow(cfg, Permission.READ, groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""Administrators"")).orElse(null).getGroupUUID(), ""refs/*""); com.google.gerrit.server.project.Util.block(cfg, Permission.READ, com.google.gerrit.acceptance.api.change.REGISTERED_USERS, ""refs/*""); saveProjectConfig(p, cfg); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(p, admin); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), repo); com.google.gerrit.acceptance.PushOneCommit.Result result = push.to(""refs/for/master""); result.assertOkStatus(); setApiUser(user); try { gApi.changes().id(result.getChangeId()).get(); assert_().fail(""Expected ResourceNotFoundException""); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } setApiUser(admin); com.google.gerrit.extensions.api.changes.AddReviewerInput in = new com.google.gerrit.extensions.api.changes.AddReviewerInput(); in.reviewer = user.email; com.google.gerrit.extensions.api.changes.AddReviewerResult r = gApi.changes().id(result.getChangeId()).addReviewer(in); assertThat(r.input).isEqualTo(user.email); assertThat(r.error).contains(""does not have permission to see this change""); assertThat(r.reviewers).isNull(); }",7bd7151b7b42d7a352d43b179ba694a70874b588,"@org.junit.Test public void addReviewerThatCannotSeeChange() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p = createProject(""p""); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(p).getConfig(); com.google.gerrit.server.project.Util.allow(cfg, Permission.READ, groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""Administrators"")).orElse(null).getGroupUUID(), ""refs/*""); com.google.gerrit.server.project.Util.block(cfg, Permission.READ, com.google.gerrit.acceptance.api.change.REGISTERED_USERS, ""refs/*""); saveProjectConfig(p, cfg); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(p, admin); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), repo); com.google.gerrit.acceptance.PushOneCommit.Result result = push.to(""refs/for/master""); result.assertOkStatus(); setApiUser(user); try { gApi.changes().id(result.getChangeId()).get(); fail(""Expected ResourceNotFoundException""); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } setApiUser(admin); com.google.gerrit.extensions.api.changes.AddReviewerInput in = new com.google.gerrit.extensions.api.changes.AddReviewerInput(); in.reviewer = user.email; com.google.gerrit.extensions.api.changes.AddReviewerResult r = gApi.changes().id(result.getChangeId()).addReviewer(in); assertThat(r.input).isEqualTo(user.email); assertThat(r.error).contains(""does not have permission to see this change""); assertThat(r.reviewers).isNull(); }",492d07e19f10ceacb33ec26fe8a59bb2db5f094f,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_account_ExternalIdIT.java,"@org.junit.Test public void fetchExternalIdsBranch() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers, user); try { com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, RefNames.REFS_EXTERNAL_IDS); fail(""expected TransportException""); } catch (org.eclipse.jgit.api.errors.TransportException e) { assertThat(e.getMessage()).isEqualTo(((""Remote does not have "" + (com.google.gerrit.reviewdb.client.RefNames.REFS_EXTERNAL_IDS)) + "" available for fetch."")); } allowGlobalCapabilities(com.google.gerrit.acceptance.rest.account.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); allUsersRepo = cloneProject(allUsers, user); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, RefNames.REFS_EXTERNAL_IDS); }",b5cf72d0f6319381f9a31b1395419cb3e0b43149,"@org.junit.Test public void fetchExternalIdsBranch() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers, user); try { com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, RefNames.REFS_EXTERNAL_IDS); assert_().fail(""expected TransportException""); } catch (org.eclipse.jgit.api.errors.TransportException e) { assertThat(e.getMessage()).isEqualTo(((""Remote does not have "" + (com.google.gerrit.reviewdb.client.RefNames.REFS_EXTERNAL_IDS)) + "" available for fetch."")); } allowGlobalCapabilities(com.google.gerrit.acceptance.rest.account.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); allUsersRepo = cloneProject(allUsers, user); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, RefNames.REFS_EXTERNAL_IDS); }",5be8579a78d710c60101cdbc9763f9301d588a63,"@org.junit.Test public void fetchExternalIdsBranch() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers, user); try { com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, RefNames.REFS_EXTERNAL_IDS); fail(""expected TransportException""); } catch (org.eclipse.jgit.api.errors.TransportException e) { assertThat(e.getMessage()).isEqualTo(((""Remote does not have "" + (com.google.gerrit.reviewdb.client.RefNames.REFS_EXTERNAL_IDS)) + "" available for fetch."")); } allowGlobalCapabilities(com.google.gerrit.acceptance.rest.account.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); allUsersRepo = cloneProject(allUsers, user); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, RefNames.REFS_EXTERNAL_IDS); }",b5cf72d0f6319381f9a31b1395419cb3e0b43149,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,"@org.junit.Test public void addInvalidEmail() throws java.lang.Exception { java.util.List<java.lang.String> emails = com.google.common.collect.ImmutableList.of(""new.email"", ""new.email@"", ""@example.com"", ""new.email@example.africa""); for (java.lang.String email : emails) { com.google.gerrit.extensions.api.accounts.EmailInput input = newEmailInput(email); try { gApi.accounts().self().addEmail(input); fail((""Expected BadRequestException for invalid email address: "" + email)); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { assertThat(e).hasMessageThat().isEqualTo(""invalid email address""); } } accountIndexedCounter.assertNoReindex(); }",f8c4df8e003bd7eee8a1c1dd1dc71f1f485c44f3,"@org.junit.Test public void addInvalidEmail() throws java.lang.Exception { java.util.List<java.lang.String> emails = com.google.common.collect.ImmutableList.of(""new.email"", ""new.email@"", ""@example.com"", ""new.email@example.africa""); for (java.lang.String email : emails) { com.google.gerrit.extensions.api.accounts.EmailInput input = newEmailInput(email); try { gApi.accounts().self().addEmail(input); assert_().fail((""Expected BadRequestException for invalid email address: "" + email)); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { assertThat(e).hasMessageThat().isEqualTo(""invalid email address""); } } accountIndexedCounter.assertNoReindex(); }",0cba08eec4a9f751d93d929a32846c80b7456fbe,"@org.junit.Test public void addInvalidEmail() throws java.lang.Exception { java.util.List<java.lang.String> emails = com.google.common.collect.ImmutableList.of(""new.email"", ""new.email@"", ""@example.com"", ""new.email@example.africa""); for (java.lang.String email : emails) { com.google.gerrit.extensions.api.accounts.EmailInput input = newEmailInput(email); try { gApi.accounts().self().addEmail(input); fail((""Expected BadRequestException for invalid email address: "" + email)); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { assertThat(e).hasMessageThat().isEqualTo(""invalid email address""); } } accountIndexedCounter.assertNoReindex(); }",f8c4df8e003bd7eee8a1c1dd1dc71f1f485c44f3,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,"@org.junit.Test public void deactivateNotActive() throws java.lang.Exception { assertThat(gApi.accounts().id(""user"").getActive()).isTrue(); gApi.accounts().id(""user"").setActive(false); assertThat(gApi.accounts().id(""user"").getActive()).isFalse(); try { gApi.accounts().id(""user"").setActive(false); fail(""Expected exception""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e.getMessage()).isEqualTo(""account not active""); } gApi.accounts().id(""user"").setActive(true); }",31c3b97875ca636d0db50d54b91b9598d8bfe85f,"@org.junit.Test public void deactivateNotActive() throws java.lang.Exception { assertThat(gApi.accounts().id(""user"").getActive()).isTrue(); gApi.accounts().id(""user"").setActive(false); assertThat(gApi.accounts().id(""user"").getActive()).isFalse(); try { gApi.accounts().id(""user"").setActive(false); assert_().fail(""Expected exception""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e.getMessage()).isEqualTo(""account not active""); } gApi.accounts().id(""user"").setActive(true); }",7eba565221865b273388cc913445be69bd041669,"@org.junit.Test public void deactivateNotActive() throws java.lang.Exception { assertThat(gApi.accounts().id(""user"").getActive()).isTrue(); gApi.accounts().id(""user"").setActive(false); assertThat(gApi.accounts().id(""user"").getActive()).isFalse(); try { gApi.accounts().id(""user"").setActive(false); fail(""Expected exception""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e.getMessage()).isEqualTo(""account not active""); } gApi.accounts().id(""user"").setActive(true); }",31c3b97875ca636d0db50d54b91b9598d8bfe85f,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_notedb_ChangeRebuilderIT.java,"@org.junit.Test public void failWhenWritesDisabled() throws java.lang.Exception { setNotesMigration(true, true); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getPatchSetId().getParentKey(); assertChangeUpToDate(true, id); assertThat(gApi.changes().id(id.get()).info().topic).isNull(); setNotesMigration(false, true); try { gApi.changes().id(id.get()).topic(name(""a-topic"")); fail(""Expected write to fail""); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { assertChangesReadOnly(e); } assertThat(gApi.changes().id(id.get()).info().topic).isNull(); assertChangeUpToDate(true, id); }",93e01c31b6fc2b23cb4fb863da8b5cec8c3b0de7,"@org.junit.Test public void failWhenWritesDisabled() throws java.lang.Exception { setNotesMigration(true, true); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getPatchSetId().getParentKey(); assertChangeUpToDate(true, id); assertThat(gApi.changes().id(id.get()).info().topic).isNull(); setNotesMigration(false, true); try { gApi.changes().id(id.get()).topic(name(""a-topic"")); assert_().fail(""Expected write to fail""); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { assertChangesReadOnly(e); } assertThat(gApi.changes().id(id.get()).info().topic).isNull(); assertChangeUpToDate(true, id); }",f7cdb899262146c2cf5839385d561f3b4ea5a0e1,"@org.junit.Test public void failWhenWritesDisabled() throws java.lang.Exception { setNotesMigration(true, true); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getPatchSetId().getParentKey(); assertChangeUpToDate(true, id); assertThat(gApi.changes().id(id.get()).info().topic).isNull(); setNotesMigration(false, true); try { gApi.changes().id(id.get()).topic(name(""a-topic"")); fail(""Expected write to fail""); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { assertChangesReadOnly(e); } assertThat(gApi.changes().id(id.get()).info().topic).isNull(); assertChangeUpToDate(true, id); }",93e01c31b6fc2b23cb4fb863da8b5cec8c3b0de7,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_notedb_ChangeRebuilderIT.java,"@org.junit.Test public void rebuildWhenWritesDisabledWorksButDoesNotWrite() throws java.lang.Exception { setNotesMigration(true, true); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getPatchSetId().getParentKey(); assertChangeUpToDate(true, id); setNotesMigration(false, false); gApi.changes().id(id.get()).topic(name(""a-topic"")); setInvalidNoteDbState(id); assertChangeUpToDate(false, id); setNotesMigration(false, true); assertThat(gApi.changes().id(id.get()).info().topic).isEqualTo(name(""a-topic"")); assertChangeUpToDate(false, id); try { gApi.changes().id(id.get()).topic(name(""other-topic"")); fail(""Expected write to fail""); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { assertChangesReadOnly(e); } assertThat(gApi.changes().id(id.get()).info().topic).isEqualTo(name(""a-topic"")); assertChangeUpToDate(false, id); }",9572acffe450f3039dbf18822c40192305f03074,"@org.junit.Test public void rebuildWhenWritesDisabledWorksButDoesNotWrite() throws java.lang.Exception { setNotesMigration(true, true); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getPatchSetId().getParentKey(); assertChangeUpToDate(true, id); setNotesMigration(false, false); gApi.changes().id(id.get()).topic(name(""a-topic"")); setInvalidNoteDbState(id); assertChangeUpToDate(false, id); setNotesMigration(false, true); assertThat(gApi.changes().id(id.get()).info().topic).isEqualTo(name(""a-topic"")); assertChangeUpToDate(false, id); try { gApi.changes().id(id.get()).topic(name(""other-topic"")); assert_().fail(""Expected write to fail""); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { assertChangesReadOnly(e); } assertThat(gApi.changes().id(id.get()).info().topic).isEqualTo(name(""a-topic"")); assertChangeUpToDate(false, id); }",b60554d77b6c67bad1134f36557f52f56af6c275,"@org.junit.Test public void rebuildWhenWritesDisabledWorksButDoesNotWrite() throws java.lang.Exception { setNotesMigration(true, true); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getPatchSetId().getParentKey(); assertChangeUpToDate(true, id); setNotesMigration(false, false); gApi.changes().id(id.get()).topic(name(""a-topic"")); setInvalidNoteDbState(id); assertChangeUpToDate(false, id); setNotesMigration(false, true); assertThat(gApi.changes().id(id.get()).info().topic).isEqualTo(name(""a-topic"")); assertChangeUpToDate(false, id); try { gApi.changes().id(id.get()).topic(name(""other-topic"")); fail(""Expected write to fail""); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { assertChangesReadOnly(e); } assertThat(gApi.changes().id(id.get()).info().topic).isEqualTo(name(""a-topic"")); assertChangeUpToDate(false, id); }",9572acffe450f3039dbf18822c40192305f03074,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_plugin_PluginIT.java,"private void assertBadRequest(com.google.gerrit.extensions.api.plugins.Plugins.ListRequest req) throws java.lang.Exception { try { req.get(); fail(""Expected BadRequestException""); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }",1031eb77a15a03fb152ae15cfad304a5e419c60c,"private void assertBadRequest(com.google.gerrit.extensions.api.plugins.Plugins.ListRequest req) throws java.lang.Exception { try { req.get(); assert_().fail(""Expected BadRequestException""); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }",5ea496254c3d0116319160de4d027b9e97069aed,"private void assertBadRequest(com.google.gerrit.extensions.api.plugins.Plugins.ListRequest req) throws java.lang.Exception { try { req.get(); fail(""Expected BadRequestException""); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }",1031eb77a15a03fb152ae15cfad304a5e419c60c,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_TagsIT.java,"private void assertBadRequest(com.google.gerrit.extensions.api.projects.ProjectApi.ListRefsRequest<com.google.gerrit.extensions.api.projects.TagInfo> req) throws java.lang.Exception { try { req.get(); fail(""Expected BadRequestException""); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }",bbae98fed15d8dba6b587aab73554b6e89e0b457,"private void assertBadRequest(com.google.gerrit.extensions.api.projects.ProjectApi.ListRefsRequest<com.google.gerrit.extensions.api.projects.TagInfo> req) throws java.lang.Exception { try { req.get(); assert_().fail(""Expected BadRequestException""); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }",7c0ade8dc779f928a184d9cf526d93fabaf20e90,"private void assertBadRequest(com.google.gerrit.extensions.api.projects.ProjectApi.ListRefsRequest<com.google.gerrit.extensions.api.projects.TagInfo> req) throws java.lang.Exception { try { req.get(); fail(""Expected BadRequestException""); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }",bbae98fed15d8dba6b587aab73554b6e89e0b457,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_ListBranchesIT.java,"private void assertBadRequest(com.google.gerrit.extensions.api.projects.ProjectApi.ListRefsRequest<com.google.gerrit.extensions.api.projects.BranchInfo> req) throws java.lang.Exception { try { req.get(); fail(""Expected BadRequestException""); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }",f0be99c73183bb95012d8ab1979dd769babf32d3,"private void assertBadRequest(com.google.gerrit.extensions.api.projects.ProjectApi.ListRefsRequest<com.google.gerrit.extensions.api.projects.BranchInfo> req) throws java.lang.Exception { try { req.get(); assert_().fail(""Expected BadRequestException""); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }",b2f7c4bd8ea14bd81f9fc5b8c00475559ff478ca,"private void assertBadRequest(com.google.gerrit.extensions.api.projects.ProjectApi.ListRefsRequest<com.google.gerrit.extensions.api.projects.BranchInfo> req) throws java.lang.Exception { try { req.get(); fail(""Expected BadRequestException""); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }",f0be99c73183bb95012d8ab1979dd769babf32d3,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_DeleteBranchesIT.java,"@org.junit.Test public void deleteBranchesNotFound() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput(); java.util.List<java.lang.String> branches = com.google.common.collect.Lists.newArrayList(com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES); branches.add(""refs/heads/does-not-exist""); input.branches = branches; try { project().deleteBranches(input); fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForBranches(com.google.common.collect.ImmutableList.of(""refs/heads/does-not-exist""))); } assertBranchesDeleted(); }",8f308d2ef330396d9a57bf91e65f2d3f3fb8a802,"@org.junit.Test public void deleteBranchesNotFound() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput(); java.util.List<java.lang.String> branches = com.google.common.collect.Lists.newArrayList(com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES); branches.add(""refs/heads/does-not-exist""); input.branches = branches; try { project().deleteBranches(input); assert_().fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForBranches(com.google.common.collect.ImmutableList.of(""refs/heads/does-not-exist""))); } assertBranchesDeleted(); }",e6ac157083f8829b9232bf8a9d43931700abe151,"@org.junit.Test public void deleteBranchesNotFound() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput(); java.util.List<java.lang.String> branches = com.google.common.collect.Lists.newArrayList(com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES); branches.add(""refs/heads/does-not-exist""); input.branches = branches; try { project().deleteBranches(input); fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForBranches(com.google.common.collect.ImmutableList.of(""refs/heads/does-not-exist""))); } assertBranchesDeleted(); }",8f308d2ef330396d9a57bf91e65f2d3f3fb8a802,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,"@org.junit.Test public void pushCommitOfOtherUserThatCannotSeeChange() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p = createProject(""p""); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(p).getConfig(); com.google.gerrit.server.project.Util.allow(cfg, Permission.READ, groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""Administrators"")).orElse(null).getGroupUUID(), ""refs/*""); com.google.gerrit.server.project.Util.block(cfg, Permission.READ, com.google.gerrit.acceptance.api.change.REGISTERED_USERS, ""refs/*""); saveProjectConfig(p, cfg); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(p, admin); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), repo); com.google.gerrit.acceptance.PushOneCommit.Result result = push.to(""refs/for/master""); result.assertOkStatus(); ChangeInfo change = gApi.changes().id(result.getChangeId()).get(); assertThat(change.owner._accountId).isEqualTo(admin.id.get()); com.google.gerrit.extensions.common.CommitInfo commit = change.revisions.get(change.currentRevision).commit; assertThat(commit.author.email).isEqualTo(user.email); assertThat(commit.committer.email).isEqualTo(user.email); setApiUser(user); try { gApi.changes().id(result.getChangeId()).get(); fail(""Expected ResourceNotFoundException""); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } assertThat(change.reviewers.get(com.google.gerrit.acceptance.api.change.REVIEWER)).isNull(); assertThat(change.reviewers.get(com.google.gerrit.acceptance.api.change.CC)).isNull(); assertThat(sender.getMessages()).isEmpty(); }",8f6ad691fdec077fab9e9ceda9bacebc719d8f0e,"@org.junit.Test public void pushCommitOfOtherUserThatCannotSeeChange() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p = createProject(""p""); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(p).getConfig(); com.google.gerrit.server.project.Util.allow(cfg, Permission.READ, groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""Administrators"")).orElse(null).getGroupUUID(), ""refs/*""); com.google.gerrit.server.project.Util.block(cfg, Permission.READ, com.google.gerrit.acceptance.api.change.REGISTERED_USERS, ""refs/*""); saveProjectConfig(p, cfg); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(p, admin); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), repo); com.google.gerrit.acceptance.PushOneCommit.Result result = push.to(""refs/for/master""); result.assertOkStatus(); ChangeInfo change = gApi.changes().id(result.getChangeId()).get(); assertThat(change.owner._accountId).isEqualTo(admin.id.get()); com.google.gerrit.extensions.common.CommitInfo commit = change.revisions.get(change.currentRevision).commit; assertThat(commit.author.email).isEqualTo(user.email); assertThat(commit.committer.email).isEqualTo(user.email); setApiUser(user); try { gApi.changes().id(result.getChangeId()).get(); assert_().fail(""Expected ResourceNotFoundException""); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } assertThat(change.reviewers.get(com.google.gerrit.acceptance.api.change.REVIEWER)).isNull(); assertThat(change.reviewers.get(com.google.gerrit.acceptance.api.change.CC)).isNull(); assertThat(sender.getMessages()).isEmpty(); }",f280b447a31d5e9fb1b3f2fdb7c6e7c6467d35e4,"@org.junit.Test public void pushCommitOfOtherUserThatCannotSeeChange() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p = createProject(""p""); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(p).getConfig(); com.google.gerrit.server.project.Util.allow(cfg, Permission.READ, groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""Administrators"")).orElse(null).getGroupUUID(), ""refs/*""); com.google.gerrit.server.project.Util.block(cfg, Permission.READ, com.google.gerrit.acceptance.api.change.REGISTERED_USERS, ""refs/*""); saveProjectConfig(p, cfg); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(p, admin); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), repo); com.google.gerrit.acceptance.PushOneCommit.Result result = push.to(""refs/for/master""); result.assertOkStatus(); ChangeInfo change = gApi.changes().id(result.getChangeId()).get(); assertThat(change.owner._accountId).isEqualTo(admin.id.get()); com.google.gerrit.extensions.common.CommitInfo commit = change.revisions.get(change.currentRevision).commit; assertThat(commit.author.email).isEqualTo(user.email); assertThat(commit.committer.email).isEqualTo(user.email); setApiUser(user); try { gApi.changes().id(result.getChangeId()).get(); fail(""Expected ResourceNotFoundException""); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } assertThat(change.reviewers.get(com.google.gerrit.acceptance.api.change.REVIEWER)).isNull(); assertThat(change.reviewers.get(com.google.gerrit.acceptance.api.change.CC)).isNull(); assertThat(sender.getMessages()).isEmpty(); }",8f6ad691fdec077fab9e9ceda9bacebc719d8f0e,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_DeleteBranchesIT.java,"@org.junit.Test public void deleteBranchesNotFoundContinue() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput(); java.util.List<java.lang.String> branches = com.google.common.collect.Lists.newArrayList(""refs/heads/does-not-exist""); branches.addAll(com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES); input.branches = branches; try { project().deleteBranches(input); fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForBranches(com.google.common.collect.ImmutableList.of(""refs/heads/does-not-exist""))); } assertBranchesDeleted(); }",d9d41a7a578e56081425f881ef8d03c6038d7a82,"@org.junit.Test public void deleteBranchesNotFoundContinue() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput(); java.util.List<java.lang.String> branches = com.google.common.collect.Lists.newArrayList(""refs/heads/does-not-exist""); branches.addAll(com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES); input.branches = branches; try { project().deleteBranches(input); assert_().fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForBranches(com.google.common.collect.ImmutableList.of(""refs/heads/does-not-exist""))); } assertBranchesDeleted(); }",17884b8143b1c84b273a58fbb409cf60fd0a3841,"@org.junit.Test public void deleteBranchesNotFoundContinue() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput(); java.util.List<java.lang.String> branches = com.google.common.collect.Lists.newArrayList(""refs/heads/does-not-exist""); branches.addAll(com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES); input.branches = branches; try { project().deleteBranches(input); fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForBranches(com.google.common.collect.ImmutableList.of(""refs/heads/does-not-exist""))); } assertBranchesDeleted(); }",d9d41a7a578e56081425f881ef8d03c6038d7a82,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_SubmitTypeRuleIT.java,"@org.junit.Test public void mixingSubmitTypesOnOneBranchFails() throws java.lang.Exception { setRulesPl(com.google.gerrit.acceptance.api.change.SubmitTypeRuleIT.SUBMIT_TYPE_FROM_SUBJECT); com.google.gerrit.acceptance.PushOneCommit.Result r1 = createChange(""master"", ""CHERRY_PICK 1""); com.google.gerrit.acceptance.PushOneCommit.Result r2 = createChange(""master"", ""MERGE_IF_NECESSARY 2""); gApi.changes().id(r1.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(r2.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); try { gApi.changes().id(r2.getChangeId()).current().submit(); fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo((((((((""Failed to submit 2 changes due to the following problems:\n"" + ""Change "") + (r1.getChange().getId())) + "": Change has submit type "") + ""CHERRY_PICK, but previously chose submit type MERGE_IF_NECESSARY "") + ""from change "") + (r2.getChange().getId())) + "" in the same batch"")); } }",1d0e8ef3db97a814ad53784c805e9454c05c3c65,"@org.junit.Test public void mixingSubmitTypesOnOneBranchFails() throws java.lang.Exception { setRulesPl(com.google.gerrit.acceptance.api.change.SubmitTypeRuleIT.SUBMIT_TYPE_FROM_SUBJECT); com.google.gerrit.acceptance.PushOneCommit.Result r1 = createChange(""master"", ""CHERRY_PICK 1""); com.google.gerrit.acceptance.PushOneCommit.Result r2 = createChange(""master"", ""MERGE_IF_NECESSARY 2""); gApi.changes().id(r1.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(r2.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); try { gApi.changes().id(r2.getChangeId()).current().submit(); assert_().fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo((((((((""Failed to submit 2 changes due to the following problems:\n"" + ""Change "") + (r1.getChange().getId())) + "": Change has submit type "") + ""CHERRY_PICK, but previously chose submit type MERGE_IF_NECESSARY "") + ""from change "") + (r2.getChange().getId())) + "" in the same batch"")); } }",26bde9282c30cd882bae7bf388e8e25e012dcec9,"@org.junit.Test public void mixingSubmitTypesOnOneBranchFails() throws java.lang.Exception { setRulesPl(com.google.gerrit.acceptance.api.change.SubmitTypeRuleIT.SUBMIT_TYPE_FROM_SUBJECT); com.google.gerrit.acceptance.PushOneCommit.Result r1 = createChange(""master"", ""CHERRY_PICK 1""); com.google.gerrit.acceptance.PushOneCommit.Result r2 = createChange(""master"", ""MERGE_IF_NECESSARY 2""); gApi.changes().id(r1.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(r2.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); try { gApi.changes().id(r2.getChangeId()).current().submit(); fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo((((((((""Failed to submit 2 changes due to the following problems:\n"" + ""Change "") + (r1.getChange().getId())) + "": Change has submit type "") + ""CHERRY_PICK, but previously chose submit type MERGE_IF_NECESSARY "") + ""from change "") + (r2.getChange().getId())) + "" in the same batch"")); } }",1d0e8ef3db97a814ad53784c805e9454c05c3c65,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_DeleteTagsIT.java,"@org.junit.Test public void deleteTagsNotFoundContinue() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteTagsInput input = new com.google.gerrit.extensions.api.projects.DeleteTagsInput(); java.util.List<java.lang.String> tags = com.google.common.collect.Lists.newArrayList(""refs/tags/does-not-exist""); tags.addAll(com.google.gerrit.acceptance.rest.project.DeleteTagsIT.TAGS); input.tags = tags; try { project().deleteTags(input); fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForTags(com.google.common.collect.ImmutableList.of(""refs/tags/does-not-exist""))); } assertTagsDeleted(); }",f40f19f9989744bc2508a7fa77919c67b3ba77e2,"@org.junit.Test public void deleteTagsNotFoundContinue() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteTagsInput input = new com.google.gerrit.extensions.api.projects.DeleteTagsInput(); java.util.List<java.lang.String> tags = com.google.common.collect.Lists.newArrayList(""refs/tags/does-not-exist""); tags.addAll(com.google.gerrit.acceptance.rest.project.DeleteTagsIT.TAGS); input.tags = tags; try { project().deleteTags(input); assert_().fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForTags(com.google.common.collect.ImmutableList.of(""refs/tags/does-not-exist""))); } assertTagsDeleted(); }",e15652e055c84a81d726c4b34a25cb2da6f2e967,"@org.junit.Test public void deleteTagsNotFoundContinue() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteTagsInput input = new com.google.gerrit.extensions.api.projects.DeleteTagsInput(); java.util.List<java.lang.String> tags = com.google.common.collect.Lists.newArrayList(""refs/tags/does-not-exist""); tags.addAll(com.google.gerrit.acceptance.rest.project.DeleteTagsIT.TAGS); input.tags = tags; try { project().deleteTags(input); fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForTags(com.google.common.collect.ImmutableList.of(""refs/tags/does-not-exist""))); } assertTagsDeleted(); }",f40f19f9989744bc2508a7fa77919c67b3ba77e2,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_DeleteTagsIT.java,"@org.junit.Test public void deleteTagsNotFound() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteTagsInput input = new com.google.gerrit.extensions.api.projects.DeleteTagsInput(); java.util.List<java.lang.String> tags = com.google.common.collect.Lists.newArrayList(com.google.gerrit.acceptance.rest.project.DeleteTagsIT.TAGS); tags.add(""refs/tags/does-not-exist""); input.tags = tags; try { project().deleteTags(input); fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForTags(com.google.common.collect.ImmutableList.of(""refs/tags/does-not-exist""))); } assertTagsDeleted(); }",97b5666f538659449519c0ed9333e26a2ffa481c,"@org.junit.Test public void deleteTagsNotFound() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteTagsInput input = new com.google.gerrit.extensions.api.projects.DeleteTagsInput(); java.util.List<java.lang.String> tags = com.google.common.collect.Lists.newArrayList(com.google.gerrit.acceptance.rest.project.DeleteTagsIT.TAGS); tags.add(""refs/tags/does-not-exist""); input.tags = tags; try { project().deleteTags(input); assert_().fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForTags(com.google.common.collect.ImmutableList.of(""refs/tags/does-not-exist""))); } assertTagsDeleted(); }",1df0324d61a09bc0b9bc46c0f817b224738492d7,"@org.junit.Test public void deleteTagsNotFound() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteTagsInput input = new com.google.gerrit.extensions.api.projects.DeleteTagsInput(); java.util.List<java.lang.String> tags = com.google.common.collect.Lists.newArrayList(com.google.gerrit.acceptance.rest.project.DeleteTagsIT.TAGS); tags.add(""refs/tags/does-not-exist""); input.tags = tags; try { project().deleteTags(input); fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForTags(com.google.common.collect.ImmutableList.of(""refs/tags/does-not-exist""))); } assertTagsDeleted(); }",97b5666f538659449519c0ed9333e26a2ffa481c,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_DeleteTagsIT.java,"@org.junit.Test public void deleteTagsForbidden() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteTagsInput input = new com.google.gerrit.extensions.api.projects.DeleteTagsInput(); input.tags = com.google.gerrit.acceptance.rest.project.DeleteTagsIT.TAGS; setApiUser(user); try { project().deleteTags(input); fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForTags(com.google.gerrit.acceptance.rest.project.DeleteTagsIT.TAGS)); } setApiUser(admin); assertTags(com.google.gerrit.acceptance.rest.project.DeleteTagsIT.TAGS); }",d72bb6971546a37af13600ffbe63dd43e0c9e7f2,"@org.junit.Test public void deleteTagsForbidden() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteTagsInput input = new com.google.gerrit.extensions.api.projects.DeleteTagsInput(); input.tags = com.google.gerrit.acceptance.rest.project.DeleteTagsIT.TAGS; setApiUser(user); try { project().deleteTags(input); assert_().fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForTags(com.google.gerrit.acceptance.rest.project.DeleteTagsIT.TAGS)); } setApiUser(admin); assertTags(com.google.gerrit.acceptance.rest.project.DeleteTagsIT.TAGS); }",8bf2588d8d3883204ea6f768753edc298e2d961a,"@org.junit.Test public void deleteTagsForbidden() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteTagsInput input = new com.google.gerrit.extensions.api.projects.DeleteTagsInput(); input.tags = com.google.gerrit.acceptance.rest.project.DeleteTagsIT.TAGS; setApiUser(user); try { project().deleteTags(input); fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForTags(com.google.gerrit.acceptance.rest.project.DeleteTagsIT.TAGS)); } setApiUser(admin); assertTags(com.google.gerrit.acceptance.rest.project.DeleteTagsIT.TAGS); }",d72bb6971546a37af13600ffbe63dd43e0c9e7f2,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_StickyApprovalsIT.java,"private java.lang.String cherryPick(java.lang.String changeId, com.google.gerrit.extensions.client.ChangeKind changeKind) throws java.lang.Exception { switch (changeKind) { case REWORK : case TRIVIAL_REBASE : break; case NO_CODE_CHANGE : case NO_CHANGE : case MERGE_FIRST_PARENT_UPDATE : default : fail((""unexpected change kind: "" + changeKind)); } testRepo.reset(getRemoteHead()); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, ""other.txt"", (""new content "" + (java.lang.System.nanoTime()))).to(""refs/for/master""); r.assertOkStatus(); vote(admin, r.getChangeId(), 2, 1); merge(r); java.lang.String subject = (com.google.gerrit.acceptance.api.change.TRIVIAL_REBASE.equals(changeKind)) ? com.google.gerrit.acceptance.PushOneCommit.SUBJECT : ""Reworked change "" + (java.lang.System.nanoTime()); com.google.gerrit.extensions.api.changes.CherryPickInput in = new com.google.gerrit.extensions.api.changes.CherryPickInput(); in.destination = ""master""; in.message = java.lang.String.format(""%s\n\nChange-Id: %s"", subject, changeId); com.google.gerrit.extensions.common.ChangeInfo c = gApi.changes().id(changeId).revision(""current"").cherryPick(in).get(); return c.changeId; }",fab1553535c0948d868cb648a6305b46042ebea9,"private java.lang.String cherryPick(java.lang.String changeId, com.google.gerrit.extensions.client.ChangeKind changeKind) throws java.lang.Exception { switch (changeKind) { case REWORK : case TRIVIAL_REBASE : break; case NO_CODE_CHANGE : case NO_CHANGE : case MERGE_FIRST_PARENT_UPDATE : default : assert_().fail((""unexpected change kind: "" + changeKind)); } testRepo.reset(getRemoteHead()); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, ""other.txt"", (""new content "" + (java.lang.System.nanoTime()))).to(""refs/for/master""); r.assertOkStatus(); vote(admin, r.getChangeId(), 2, 1); merge(r); java.lang.String subject = (com.google.gerrit.acceptance.api.change.TRIVIAL_REBASE.equals(changeKind)) ? com.google.gerrit.acceptance.PushOneCommit.SUBJECT : ""Reworked change "" + (java.lang.System.nanoTime()); com.google.gerrit.extensions.api.changes.CherryPickInput in = new com.google.gerrit.extensions.api.changes.CherryPickInput(); in.destination = ""master""; in.message = java.lang.String.format(""%s\n\nChange-Id: %s"", subject, changeId); com.google.gerrit.extensions.common.ChangeInfo c = gApi.changes().id(changeId).revision(""current"").cherryPick(in).get(); return c.changeId; }",d10fb7b3f431eed6578bf65da214975e2e3ccda1,"private java.lang.String cherryPick(java.lang.String changeId, com.google.gerrit.extensions.client.ChangeKind changeKind) throws java.lang.Exception { switch (changeKind) { case REWORK : case TRIVIAL_REBASE : break; case NO_CODE_CHANGE : case NO_CHANGE : case MERGE_FIRST_PARENT_UPDATE : default : fail((""unexpected change kind: "" + changeKind)); } testRepo.reset(getRemoteHead()); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, ""other.txt"", (""new content "" + (java.lang.System.nanoTime()))).to(""refs/for/master""); r.assertOkStatus(); vote(admin, r.getChangeId(), 2, 1); merge(r); java.lang.String subject = (com.google.gerrit.acceptance.api.change.TRIVIAL_REBASE.equals(changeKind)) ? com.google.gerrit.acceptance.PushOneCommit.SUBJECT : ""Reworked change "" + (java.lang.System.nanoTime()); com.google.gerrit.extensions.api.changes.CherryPickInput in = new com.google.gerrit.extensions.api.changes.CherryPickInput(); in.destination = ""master""; in.message = java.lang.String.format(""%s\n\nChange-Id: %s"", subject, changeId); com.google.gerrit.extensions.common.ChangeInfo c = gApi.changes().id(changeId).revision(""current"").cherryPick(in).get(); return c.changeId; }",fab1553535c0948d868cb648a6305b46042ebea9,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_StickyApprovalsIT.java,"private void updateChange(java.lang.String changeId, com.google.gerrit.extensions.client.ChangeKind changeKind) throws java.lang.Exception { switch (changeKind) { case NO_CODE_CHANGE : noCodeChange(changeId); return; case REWORK : rework(changeId); return; case TRIVIAL_REBASE : trivialRebase(changeId); return; case MERGE_FIRST_PARENT_UPDATE : updateFirstParent(changeId); return; case NO_CHANGE : noChange(changeId); return; default : fail((""unexpected change kind: "" + changeKind)); } }",e44cd6607817c2f4a820e816281113646f2c2a17,"private void updateChange(java.lang.String changeId, com.google.gerrit.extensions.client.ChangeKind changeKind) throws java.lang.Exception { switch (changeKind) { case NO_CODE_CHANGE : noCodeChange(changeId); return; case REWORK : rework(changeId); return; case TRIVIAL_REBASE : trivialRebase(changeId); return; case MERGE_FIRST_PARENT_UPDATE : updateFirstParent(changeId); return; case NO_CHANGE : noChange(changeId); return; default : assert_().fail((""unexpected change kind: "" + changeKind)); } }",a75025f2c60974112049cd78672205a287363528,"private void updateChange(java.lang.String changeId, com.google.gerrit.extensions.client.ChangeKind changeKind) throws java.lang.Exception { switch (changeKind) { case NO_CODE_CHANGE : noCodeChange(changeId); return; case REWORK : rework(changeId); return; case TRIVIAL_REBASE : trivialRebase(changeId); return; case MERGE_FIRST_PARENT_UPDATE : updateFirstParent(changeId); return; case NO_CHANGE : noChange(changeId); return; default : fail((""unexpected change kind: "" + changeKind)); } }",e44cd6607817c2f4a820e816281113646f2c2a17,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_group_GroupsIT.java,"private void assertBadRequest(com.google.gerrit.extensions.api.groups.Groups.ListRequest req) throws java.lang.Exception { try { req.get(); fail(""Expected BadRequestException""); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }",145d87f4d96c91c66450aa44dba832dfd8a1332e,"private void assertBadRequest(com.google.gerrit.extensions.api.groups.Groups.ListRequest req) throws java.lang.Exception { try { req.get(); assert_().fail(""Expected BadRequestException""); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }",76e0e9eb1d3980a76ff1912f70fa1b08b259bac8,"private void assertBadRequest(com.google.gerrit.extensions.api.groups.Groups.ListRequest req) throws java.lang.Exception { try { req.get(); fail(""Expected BadRequestException""); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }",145d87f4d96c91c66450aa44dba832dfd8a1332e,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_AbstractSubmit.java,"protected void submit(java.lang.String changeId, com.google.gerrit.extensions.api.changes.SubmitInput input, java.lang.Class<? extends com.google.gerrit.extensions.restapi.RestApiException> expectedExceptionType, java.lang.String expectedExceptionMsg) throws java.lang.Exception { approve(changeId); if (expectedExceptionType == null) { assertSubmittable(changeId); } try { gApi.changes().id(changeId).current().submit(input); if (expectedExceptionType != null) { fail((""Expected exception of type "" + (expectedExceptionType.getSimpleName()))); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { if (expectedExceptionType == null) { throw e; } if ((!(expectedExceptionType.isAssignableFrom(e.getClass()))) || (!(e.getMessage().equals(expectedExceptionMsg)))) { throw new java.lang.AssertionError(((((((((""Expected exception of type "" + (expectedExceptionType.getSimpleName())) + "" with message: \"""") + expectedExceptionMsg) + ""\"" but got exception of type "") + (e.getClass().getSimpleName())) + "" with message \"""") + (e.getMessage())) + ""\""""), e); } return; } com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).info(); assertMerged(change.changeId); }",92079cd93100fd53850656aa1c92f6462e360bb7,"protected void submit(java.lang.String changeId, com.google.gerrit.extensions.api.changes.SubmitInput input, java.lang.Class<? extends com.google.gerrit.extensions.restapi.RestApiException> expectedExceptionType, java.lang.String expectedExceptionMsg) throws java.lang.Exception { approve(changeId); if (expectedExceptionType == null) { assertSubmittable(changeId); } try { gApi.changes().id(changeId).current().submit(input); if (expectedExceptionType != null) { assert_().fail((""Expected exception of type "" + (expectedExceptionType.getSimpleName()))); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { if (expectedExceptionType == null) { throw e; } if ((!(expectedExceptionType.isAssignableFrom(e.getClass()))) || (!(e.getMessage().equals(expectedExceptionMsg)))) { throw new java.lang.AssertionError(((((((((""Expected exception of type "" + (expectedExceptionType.getSimpleName())) + "" with message: \"""") + expectedExceptionMsg) + ""\"" but got exception of type "") + (e.getClass().getSimpleName())) + "" with message \"""") + (e.getMessage())) + ""\""""), e); } return; } com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).info(); assertMerged(change.changeId); }",3c20779462ad54c7a8547b6b410781b261acf0fe,"protected void submit(java.lang.String changeId, com.google.gerrit.extensions.api.changes.SubmitInput input, java.lang.Class<? extends com.google.gerrit.extensions.restapi.RestApiException> expectedExceptionType, java.lang.String expectedExceptionMsg) throws java.lang.Exception { approve(changeId); if (expectedExceptionType == null) { assertSubmittable(changeId); } try { gApi.changes().id(changeId).current().submit(input); if (expectedExceptionType != null) { fail((""Expected exception of type "" + (expectedExceptionType.getSimpleName()))); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { if (expectedExceptionType == null) { throw e; } if ((!(expectedExceptionType.isAssignableFrom(e.getClass()))) || (!(e.getMessage().equals(expectedExceptionMsg)))) { throw new java.lang.AssertionError(((((((((""Expected exception of type "" + (expectedExceptionType.getSimpleName())) + "" with message: \"""") + expectedExceptionMsg) + ""\"" but got exception of type "") + (e.getClass().getSimpleName())) + "" with message \"""") + (e.getMessage())) + ""\""""), e); } return; } com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).info(); assertMerged(change.changeId); }",92079cd93100fd53850656aa1c92f6462e360bb7,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_ListProjectsIT.java,"private void assertBadRequest(com.google.gerrit.extensions.api.projects.Projects.ListRequest req) throws java.lang.Exception { try { req.get(); fail(""Expected BadRequestException""); } catch (com.google.gerrit.extensions.restapi.BadRequestException expected) { } }",e3500f9a6149743b0b82995ffbe4d4230c640746,"private void assertBadRequest(com.google.gerrit.extensions.api.projects.Projects.ListRequest req) throws java.lang.Exception { try { req.get(); assert_().fail(""Expected BadRequestException""); } catch (com.google.gerrit.extensions.restapi.BadRequestException expected) { } }",f154f2b7aa8034aa1da3c48efaf6cc8c68d3ffbf,"private void assertBadRequest(com.google.gerrit.extensions.api.projects.Projects.ListRequest req) throws java.lang.Exception { try { req.get(); fail(""Expected BadRequestException""); } catch (com.google.gerrit.extensions.restapi.BadRequestException expected) { } }",e3500f9a6149743b0b82995ffbe4d4230c640746,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_DeleteBranchesIT.java,"@org.junit.Test public void deleteBranchesForbidden() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput(); input.branches = com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES; setApiUser(user); try { project().deleteBranches(input); fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForBranches(com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES)); } setApiUser(admin); assertBranches(com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES); }",aec2e083a8a799715bc072a0730bbfe228c327e1,"@org.junit.Test public void deleteBranchesForbidden() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput(); input.branches = com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES; setApiUser(user); try { project().deleteBranches(input); assert_().fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForBranches(com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES)); } setApiUser(admin); assertBranches(com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES); }",f10cb0a1e988d4f1bb966d98fc3e9d810b4b8268,"@org.junit.Test public void deleteBranchesForbidden() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput(); input.branches = com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES; setApiUser(user); try { project().deleteBranches(input); fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForBranches(com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES)); } setApiUser(admin); assertBranches(com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES); }",aec2e083a8a799715bc072a0730bbfe228c327e1,2017-10-30 12:36:27,3
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AgreementsIT.java,"@org.junit.Test public void createChangeRespectsCLA() throws java.lang.Exception { assume().that(isContributorAgreementsEnabled()).isTrue(); setUseContributorAgreements(InheritableBoolean.FALSE); gApi.changes().create(newChangeInput()); setUseContributorAgreements(InheritableBoolean.TRUE); try { gApi.changes().create(newChangeInput()); fail(""Expected AuthException""); } catch (com.google.gerrit.extensions.restapi.AuthException e) { assertThat(e.getMessage()).contains(""A Contributor Agreement must be completed""); } gApi.accounts().self().signAgreement(caAutoVerify.getName()); setApiUser(user); gApi.changes().create(newChangeInput()); }",af97bb3b7355b2984fb5f6e682bb65bba0bb0dd8,"@org.junit.Test public void createChangeRespectsCLA() throws java.lang.Exception { assume().that(isContributorAgreementsEnabled()).isTrue(); setUseContributorAgreements(InheritableBoolean.FALSE); gApi.changes().create(newChangeInput()); setUseContributorAgreements(InheritableBoolean.TRUE); try { gApi.changes().create(newChangeInput()); assert_().fail(""Expected AuthException""); } catch (com.google.gerrit.extensions.restapi.AuthException e) { assertThat(e.getMessage()).contains(""A Contributor Agreement must be completed""); } gApi.accounts().self().signAgreement(caAutoVerify.getName()); setApiUser(user); gApi.changes().create(newChangeInput()); }",709c628e6731dda96bc2b1ed26d82c5b9d0205b5,"@org.junit.Test public void createChangeRespectsCLA() throws java.lang.Exception { assume().that(isContributorAgreementsEnabled()).isTrue(); setUseContributorAgreements(InheritableBoolean.FALSE); gApi.changes().create(newChangeInput()); setUseContributorAgreements(InheritableBoolean.TRUE); try { gApi.changes().create(newChangeInput()); fail(""Expected AuthException""); } catch (com.google.gerrit.extensions.restapi.AuthException e) { assertThat(e.getMessage()).contains(""A Contributor Agreement must be completed""); } gApi.accounts().self().signAgreement(caAutoVerify.getName()); setApiUser(user); gApi.changes().create(newChangeInput()); }",af97bb3b7355b2984fb5f6e682bb65bba0bb0dd8,2017-10-30 12:36:27,3
134334,gerrit-server_src_main_java_com_google_gerrit_server_group_ListMembers.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.List<com.google.gerrit.extensions.common.AccountInfo> getTransitiveMembers(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> members = getTransitiveMemberIds(group, groupControl, new java.util.HashSet(com.google.common.collect.ImmutableSet.of(group.getGroupUUID()))); return toAccountInfos(members); }",7dd40bb111dedb0367361e215406ccee92f9d66f,"private java.util.List<com.google.gerrit.extensions.common.AccountInfo> getTransitiveMembers(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.ListMembers.checkSameGroup(group, groupControl); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> members = getTransitiveMemberIds(group, groupControl, new java.util.HashSet(com.google.common.collect.ImmutableSet.of(group.getGroupUUID()))); return toAccountInfos(members); }",7e9210dbaede7e1b4c0f3ea54654a847548d8a44,2017-10-30 15:44:47,7
134334,gerrit-server_src_main_java_com_google_gerrit_server_group_ListMembers.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.List<com.google.gerrit.extensions.common.AccountInfo> getDirectMembers(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> directMembers = com.google.gerrit.server.group.ListMembers.getDirectMemberIds(group, groupControl); return toAccountInfos(directMembers); }",b88c69b9502316cf7f74bf796bba5ba724dcbdc1,"public java.util.List<com.google.gerrit.extensions.common.AccountInfo> getDirectMembers(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.ListMembers.checkSameGroup(group, groupControl); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> directMembers = com.google.gerrit.server.group.ListMembers.getDirectMemberIds(group, groupControl); return toAccountInfos(directMembers); }",eb14f59a154cfe3b299f4a67c349f0cc5c6e8f8d,2017-10-30 15:44:47,7
134333,gerrit-server_src_main_java_com_google_gerrit_server_account_GroupIncludeCacheImpl.java,"public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.GroupIncludeCacheImpl.PARENT_GROUPS_NAME, AccountGroup.UUID.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).loader(com.google.gerrit.server.account.GroupIncludeCacheImpl.ParentGroupsLoader.class); cache(com.google.gerrit.server.account.GroupIncludeCacheImpl.SUBGROUPS_NAME, AccountGroup.UUID.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).loader(com.google.gerrit.server.account.GroupIncludeCacheImpl.SubgroupsLoader.class); cache(com.google.gerrit.server.account.GroupIncludeCacheImpl.EXTERNAL_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).loader(com.google.gerrit.server.account.GroupIncludeCacheImpl.AllExternalLoader.class); bind(com.google.gerrit.server.account.GroupIncludeCacheImpl.class); bind(com.google.gerrit.server.account.GroupIncludeCache.class).to(com.google.gerrit.server.account.GroupIncludeCacheImpl.class); } }; }",c41df9a799cbd77cf616ac222de584319d3df19f,"public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.GroupIncludeCacheImpl.PARENT_GROUPS_NAME, AccountGroup.UUID.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).loader(com.google.gerrit.server.account.GroupIncludeCacheImpl.ParentGroupsLoader.class); cache(com.google.gerrit.server.account.GroupIncludeCacheImpl.EXTERNAL_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).loader(com.google.gerrit.server.account.GroupIncludeCacheImpl.AllExternalLoader.class); bind(com.google.gerrit.server.account.GroupIncludeCacheImpl.class); bind(com.google.gerrit.server.account.GroupIncludeCache.class).to(com.google.gerrit.server.account.GroupIncludeCacheImpl.class); } }; }",37763aab980359bb16152894f114e133cbd13d31,"public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.GroupIncludeCacheImpl.GROUPS_WITH_MEMBER_NAME, Account.Id.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).loader(com.google.gerrit.server.account.GroupIncludeCacheImpl.GroupsWithMemberLoader.class); cache(com.google.gerrit.server.account.GroupIncludeCacheImpl.PARENT_GROUPS_NAME, AccountGroup.UUID.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).loader(com.google.gerrit.server.account.GroupIncludeCacheImpl.ParentGroupsLoader.class); cache(com.google.gerrit.server.account.GroupIncludeCacheImpl.EXTERNAL_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).loader(com.google.gerrit.server.account.GroupIncludeCacheImpl.AllExternalLoader.class); bind(com.google.gerrit.server.account.GroupIncludeCacheImpl.class); bind(com.google.gerrit.server.account.GroupIncludeCache.class).to(com.google.gerrit.server.account.GroupIncludeCacheImpl.class); } }; }",f2125362c47c6a2f6263818da0218cb04489a749,2017-10-30 15:44:47,5
134332,gerrit-common_src_main_java_com_google_gerrit_common_data_GroupDescription.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getSubgroups();,1d3f0e37c2b3352fb260635f25010b6f2e2dcc65,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getSubgroups();,c440525af96c96cd700ae356fc1a918b6e8b29b6,2017-10-30 15:44:47,4
134333,gerrit-server_src_main_java_com_google_gerrit_server_account_GroupIncludeCacheImpl.java,"@java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.GroupIncludeCacheImpl.PARENT_GROUPS_NAME, AccountGroup.UUID.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).loader(com.google.gerrit.server.account.GroupIncludeCacheImpl.ParentGroupsLoader.class); cache(com.google.gerrit.server.account.GroupIncludeCacheImpl.SUBGROUPS_NAME, AccountGroup.UUID.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).loader(com.google.gerrit.server.account.GroupIncludeCacheImpl.SubgroupsLoader.class); cache(com.google.gerrit.server.account.GroupIncludeCacheImpl.EXTERNAL_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).loader(com.google.gerrit.server.account.GroupIncludeCacheImpl.AllExternalLoader.class); bind(com.google.gerrit.server.account.GroupIncludeCacheImpl.class); bind(com.google.gerrit.server.account.GroupIncludeCache.class).to(com.google.gerrit.server.account.GroupIncludeCacheImpl.class); }",d7d3891f120cfaad1f5f8b591a3a70d055f66125,"@java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.GroupIncludeCacheImpl.PARENT_GROUPS_NAME, AccountGroup.UUID.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).loader(com.google.gerrit.server.account.GroupIncludeCacheImpl.ParentGroupsLoader.class); cache(com.google.gerrit.server.account.GroupIncludeCacheImpl.EXTERNAL_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).loader(com.google.gerrit.server.account.GroupIncludeCacheImpl.AllExternalLoader.class); bind(com.google.gerrit.server.account.GroupIncludeCacheImpl.class); bind(com.google.gerrit.server.account.GroupIncludeCache.class).to(com.google.gerrit.server.account.GroupIncludeCacheImpl.class); }",08c81450f88a76f0c1a382b0d6b713b3e7821ddc,"@java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.GroupIncludeCacheImpl.GROUPS_WITH_MEMBER_NAME, Account.Id.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).loader(com.google.gerrit.server.account.GroupIncludeCacheImpl.GroupsWithMemberLoader.class); cache(com.google.gerrit.server.account.GroupIncludeCacheImpl.PARENT_GROUPS_NAME, AccountGroup.UUID.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).loader(com.google.gerrit.server.account.GroupIncludeCacheImpl.ParentGroupsLoader.class); cache(com.google.gerrit.server.account.GroupIncludeCacheImpl.EXTERNAL_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).loader(com.google.gerrit.server.account.GroupIncludeCacheImpl.AllExternalLoader.class); bind(com.google.gerrit.server.account.GroupIncludeCacheImpl.class); bind(com.google.gerrit.server.account.GroupIncludeCache.class).to(com.google.gerrit.server.account.GroupIncludeCacheImpl.class); }",00f8854f0aee2c7c81269b506a5f014d1c5c988d,2017-10-30 15:44:47,5
134332,gerrit-common_src_main_java_com_google_gerrit_common_data_GroupDescription.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> getMembers();,21ac3eebe29d48ba11c33306631c0ae923f39667,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> getMembers();,594d8c17ce117f8b20fcdb67b27271220782f56a,2017-10-30 15:44:47,4
137630,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_ChangeEmail.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String shortenSubject(java.lang.String subject) { if ((subject.length()) < 73) { return subject; } else { return (subject.substring(0, 69)) + ""...""; } }",22d271bfe25c56e35a589523ac20de205e4ee180,"private static java.lang.String shortenSubject(java.lang.String subject) { if ((subject.length()) < 73) { return subject; } else { return (subject.substring(0, 69)) + ""...""; } }",ac2ee9e3b9cee284fcf697b779da537a0965657f,2017-10-31 13:31:28,5
127371,java_com_google_gerrit_extensions_common_testing_RobotCommentInfoSubject.java,public static com.google.gerrit.extensions.common.RobotCommentInfoSubject assertThat(com.google.gerrit.extensions.common.RobotCommentInfo robotCommentInfo) { return assertAbout(com.google.gerrit.extensions.common.RobotCommentInfoSubject.ROBOT_COMMENT_INFO_SUBJECT_FACTORY).that(robotCommentInfo); },c6e4986186c2e70c9292f75d508b61035ced507a,public static com.google.gerrit.extensions.common.testing.RobotCommentInfoSubject assertThat(com.google.gerrit.extensions.common.RobotCommentInfo robotCommentInfo) { return assertAbout(com.google.gerrit.extensions.common.testing.RobotCommentInfoSubject.ROBOT_COMMENT_INFO_SUBJECT_FACTORY).that(robotCommentInfo); },26c22a2c7ba7cc62c9e1a3919a8955ee096a844b,public static com.google.gerrit.extensions.common.testing.RobotCommentInfoSubject assertThat(com.google.gerrit.extensions.common.RobotCommentInfo robotCommentInfo) { return assertAbout(com.google.gerrit.extensions.common.testing.RobotCommentInfoSubject::new).that(robotCommentInfo); },3fb67599700d1ae22f0061bce9700ad0cdf5b182,2017-10-31 15:12:58,12
128031,gerrit-server_src_test_java_com_google_gerrit_server_schema_Schema_150_to_151_Test.java,"@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(""Ancient group for schema migration""); setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.testutil.TestUpdateUI()); com.google.gerrit.reviewdb.client.AccountGroup group = db.accountGroups().get(groupId); assertThat(group.getCreatedOn()).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }",2ba4f5326278c0cff71948e3f6c98842917da15b,"@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(""Ancient group for schema migration""); setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.testing.TestUpdateUI()); com.google.gerrit.reviewdb.client.AccountGroup group = db.accountGroups().get(groupId); assertThat(group.getCreatedOn()).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }",3597c950e80b9e7a9b11838512211214311c32ed,"@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(""Ancient group for schema migration""); setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.testing.TestUpdateUI()); java.sql.Timestamp createdOn = getCreatedOn(groupId); assertThat(createdOn).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }",ccb7f53c8b9df380d317522aad0254d828e9a078,2017-10-31 15:12:58,11
128031,gerrit-server_src_test_java_com_google_gerrit_server_schema_Schema_150_to_151_Test.java,"@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedAfterAudit() throws java.lang.Exception { java.sql.Timestamp testStartTime = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(""Group for schema migration""); setCreatedOnToVeryOldTimestamp(groupId); schema151.migrateData(db, new com.google.gerrit.testutil.TestUpdateUI()); com.google.gerrit.reviewdb.client.AccountGroup group = db.accountGroups().get(groupId); assertThat(group.getCreatedOn()).isAtLeast(testStartTime); }",0c2ac88e507f90d7851c72d28aa0c699957afbfb,"@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedAfterAudit() throws java.lang.Exception { java.sql.Timestamp testStartTime = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(""Group for schema migration""); setCreatedOnToVeryOldTimestamp(groupId); schema151.migrateData(db, new com.google.gerrit.testing.TestUpdateUI()); com.google.gerrit.reviewdb.client.AccountGroup group = db.accountGroups().get(groupId); assertThat(group.getCreatedOn()).isAtLeast(testStartTime); }",ea11855f7406b865dd3df246557564887603a89d,"@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedAfterAudit() throws java.lang.Exception { java.sql.Timestamp testStartTime = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(""Group for schema migration""); setCreatedOnToVeryOldTimestamp(groupId); schema151.migrateData(db, new com.google.gerrit.testing.TestUpdateUI()); java.sql.Timestamp createdOn = getCreatedOn(groupId); assertThat(createdOn).isAtLeast(testStartTime); }",072b1d497b55114b709d15ea6920491fc395d4c9,2017-10-31 15:12:58,11
127371,java_com_google_gerrit_extensions_common_testing_FixReplacementInfoSubject.java,public static com.google.gerrit.extensions.common.FixReplacementInfoSubject assertThat(com.google.gerrit.extensions.common.FixReplacementInfo fixReplacementInfo) { return assertAbout(com.google.gerrit.extensions.common.FixReplacementInfoSubject.FIX_REPLACEMENT_INFO_SUBJECT_FACTORY).that(fixReplacementInfo); },a92b633d732f35515bf90777c5585f196d18317f,public static com.google.gerrit.extensions.common.testing.FixReplacementInfoSubject assertThat(com.google.gerrit.extensions.common.FixReplacementInfo fixReplacementInfo) { return assertAbout(com.google.gerrit.extensions.common.testing.FixReplacementInfoSubject.FIX_REPLACEMENT_INFO_SUBJECT_FACTORY).that(fixReplacementInfo); },ce2537d977f0b101e65a1c19ec4126709bf6fbd8,public static com.google.gerrit.extensions.common.testing.FixReplacementInfoSubject assertThat(com.google.gerrit.extensions.common.FixReplacementInfo fixReplacementInfo) { return assertAbout(com.google.gerrit.extensions.common.testing.FixReplacementInfoSubject::new).that(fixReplacementInfo); },93a6e1207b13447ab27caae9be4a74f7382d49ed,2017-10-31 15:12:58,12
127371,java_com_google_gerrit_extensions_common_testing_CommitInfoSubject.java,public static com.google.gerrit.extensions.common.CommitInfoSubject assertThat(com.google.gerrit.extensions.common.CommitInfo commitInfo) { return assertAbout(com.google.gerrit.extensions.common.CommitInfoSubject.COMMIT_INFO_SUBJECT_FACTORY).that(commitInfo); },5aa87f475a8e4a97a7b7ea05b649094224def379,public static com.google.gerrit.extensions.common.testing.CommitInfoSubject assertThat(com.google.gerrit.extensions.common.CommitInfo commitInfo) { return assertAbout(com.google.gerrit.extensions.common.testing.CommitInfoSubject.COMMIT_INFO_SUBJECT_FACTORY).that(commitInfo); },ac706aab23a69899e15d9a37ac43bcf0fcb723cb,public static com.google.gerrit.extensions.common.testing.CommitInfoSubject assertThat(com.google.gerrit.extensions.common.CommitInfo commitInfo) { return assertAbout(com.google.gerrit.extensions.common.testing.CommitInfoSubject::new).that(commitInfo); },bf1c2a14891ae5559f17a7471444b7b24f75ae4c,2017-10-31 15:12:58,12
127371,java_com_google_gerrit_extensions_restapi_testing_BinaryResultSubject.java,public static com.google.gerrit.extensions.restapi.BinaryResultSubject assertThat(com.google.gerrit.extensions.restapi.BinaryResult binaryResult) { return assertAbout(com.google.gerrit.extensions.restapi.BinaryResultSubject.BINARY_RESULT_SUBJECT_FACTORY).that(binaryResult); },0feb306d76f4bb5779fe5388863ab62bc1f9bd61,public static com.google.gerrit.extensions.restapi.testing.BinaryResultSubject assertThat(com.google.gerrit.extensions.restapi.BinaryResult binaryResult) { return assertAbout(com.google.gerrit.extensions.restapi.testing.BinaryResultSubject.BINARY_RESULT_SUBJECT_FACTORY).that(binaryResult); },458936132de299d6dabb636f5cdca64c88d209cc,public static com.google.gerrit.extensions.restapi.testing.BinaryResultSubject assertThat(com.google.gerrit.extensions.restapi.BinaryResult binaryResult) { return assertAbout(com.google.gerrit.extensions.restapi.testing.BinaryResultSubject::new).that(binaryResult); },c5fe6effecf9b2b2b45453e44938876726cd1345,2017-10-31 15:12:58,12
137890,gerrit-server_src_main_java_com_google_gerrit_server_git_SubmoduleOp.java,"private void createSubmoduleCommitMsg(java.lang.StringBuilder msgbuf, com.google.gerrit.reviewdb.client.SubmoduleSubscription s, com.google.gerrit.server.git.MergeOpRepoManager.OpenRepo subOr, org.eclipse.jgit.revwalk.RevCommit newCommit, org.eclipse.jgit.revwalk.RevCommit oldCommit) throws com.google.gerrit.server.git.SubmoduleException { msgbuf.append((""* Update "" + (s.getPath()))); msgbuf.append((("" from branch '"" + (s.getSubmodule().getShortName())) + ""'"")); if (oldCommit == null) { return; } try { subOr.rw.resetRetain(subOr.canMergeFlag); subOr.rw.markStart(newCommit); subOr.rw.markUninteresting(oldCommit); for (org.eclipse.jgit.revwalk.RevCommit c : subOr.rw) { subOr.rw.parseBody(c); if ((verboseSuperProject) == (com.google.gerrit.server.config.VerboseSuperprojectUpdate.SUBJECT_ONLY)) { msgbuf.append((""\n - "" + (c.getShortMessage()))); } else if ((verboseSuperProject) == (com.google.gerrit.server.config.VerboseSuperprojectUpdate.TRUE)) { msgbuf.append((""\n - "" + (c.getFullMessage().replace(""\n"", ""\n "")))); } } } catch (java.io.IOException e) { throw new com.google.gerrit.server.git.SubmoduleException(""Could not perform a revwalk to create superproject commit message"", e); } }",c77bf5f069c76c5bd1028789139e0c0620e2948e,"private void createSubmoduleCommitMsg(java.lang.StringBuilder msgbuf, com.google.gerrit.reviewdb.client.SubmoduleSubscription s, com.google.gerrit.server.git.MergeOpRepoManager.OpenRepo subOr, org.eclipse.jgit.revwalk.RevCommit newCommit, org.eclipse.jgit.revwalk.RevCommit oldCommit) throws com.google.gerrit.server.git.SubmoduleException { msgbuf.append((""* Update "" + (s.getPath()))); msgbuf.append((("" from branch '"" + (s.getSubmodule().getShortName())) + ""'"")); msgbuf.append(("" to "" + (newCommit.getName()))); if (oldCommit == null) { return; } try { subOr.rw.resetRetain(subOr.canMergeFlag); subOr.rw.markStart(newCommit); subOr.rw.markUninteresting(oldCommit); for (org.eclipse.jgit.revwalk.RevCommit c : subOr.rw) { subOr.rw.parseBody(c); if ((verboseSuperProject) == (com.google.gerrit.server.config.VerboseSuperprojectUpdate.SUBJECT_ONLY)) { msgbuf.append((""\n - "" + (c.getShortMessage()))); } else if ((verboseSuperProject) == (com.google.gerrit.server.config.VerboseSuperprojectUpdate.TRUE)) { msgbuf.append((""\n - "" + (c.getFullMessage().replace(""\n"", ""\n "")))); } } } catch (java.io.IOException e) { throw new com.google.gerrit.server.git.SubmoduleException(""Could not perform a revwalk to create superproject commit message"", e); } }",b8a1d9399beb304a35100992757746ab2b43d998,"private void createSubmoduleCommitMsg(java.lang.StringBuilder msgbuf, com.google.gerrit.reviewdb.client.SubmoduleSubscription s, com.google.gerrit.server.git.MergeOpRepoManager.OpenRepo subOr, org.eclipse.jgit.revwalk.RevCommit newCommit, org.eclipse.jgit.revwalk.RevCommit oldCommit) throws com.google.gerrit.server.git.SubmoduleException { msgbuf.append((""* Update "" + (s.getPath()))); msgbuf.append((("" from branch '"" + (s.getSubmodule().getShortName())) + ""'"")); msgbuf.append((""\n to "" + (newCommit.getName()))); if (oldCommit == null) { return; } try { subOr.rw.resetRetain(subOr.canMergeFlag); subOr.rw.markStart(newCommit); subOr.rw.markUninteresting(oldCommit); for (org.eclipse.jgit.revwalk.RevCommit c : subOr.rw) { subOr.rw.parseBody(c); if ((verboseSuperProject) == (com.google.gerrit.server.config.VerboseSuperprojectUpdate.SUBJECT_ONLY)) { msgbuf.append((""\n - "" + (c.getShortMessage()))); } else if ((verboseSuperProject) == (com.google.gerrit.server.config.VerboseSuperprojectUpdate.TRUE)) { msgbuf.append((""\n - "" + (c.getFullMessage().replace(""\n"", ""\n "")))); } } } catch (java.io.IOException e) { throw new com.google.gerrit.server.git.SubmoduleException(""Could not perform a revwalk to create superproject commit message"", e); } }",52ef7f61390b49cb6b2bb68ea7c4fa7617686fb0,2017-11-01 06:36:54,6
131290,src_main_java_com_googlesource_gerrit_plugins_webhooks_EventHandler.java,"@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.ProjectEvent)) { return; } com.google.gerrit.server.events.ProjectEvent projectEvent = ((com.google.gerrit.server.events.ProjectEvent) (event)); org.eclipse.jgit.lib.Config cfg; try { cfg = configFactory.getProjectPluginConfigWithInheritance(projectEvent.getProjectNameKey(), pluginName); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""Ignoring event for a non-existing project {}, {}"", projectEvent.getProjectNameKey().get(), projectEvent); return; } for (java.lang.String name : cfg.getSubsections(com.googlesource.gerrit.plugins.webhooks.Configuration.REMOTE)) { java.lang.String url = cfg.getString(com.googlesource.gerrit.plugins.webhooks.Configuration.REMOTE, name, ""url""); if (com.google.common.base.Strings.isNullOrEmpty(url)) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""remote.{}.url not defined, skipping this remote"", name); continue; } com.googlesource.gerrit.plugins.webhooks.EventProcessor processor = processorFactory.create(projectEvent, cfg, name); if (processor.shouldProcess()) { post(url, processor); } } }",d5f8ec49d202636fb632037764be65ba82dcc3d1,"@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.ProjectEvent)) { return; } com.google.gerrit.server.events.ProjectEvent projectEvent = ((com.google.gerrit.server.events.ProjectEvent) (event)); org.eclipse.jgit.lib.Config cfg; try { cfg = configFactory.getProjectPluginConfigWithInheritance(projectEvent.getProjectNameKey(), pluginName); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""Ignoring event for a non-existing project {}, {}"", projectEvent.getProjectNameKey().get(), projectEvent); return; } for (java.lang.String name : cfg.getSubsections(com.googlesource.gerrit.plugins.webhooks.RemoteConfig.REMOTE)) { com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote = remoteFactory.create(cfg, name); if (com.google.common.base.Strings.isNullOrEmpty(remote.getUrl())) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""remote.{}.url not defined, skipping this remote"", name); continue; } com.googlesource.gerrit.plugins.webhooks.EventProcessor processor = processorFactory.create(projectEvent, remote); if (processor.shouldProcess()) { post(remote, processor); } } }",2debb9f6f244c4d2e40b6ae77231007b386d05bd,"@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.ProjectEvent)) { return; } com.google.gerrit.server.events.ProjectEvent projectEvent = ((com.google.gerrit.server.events.ProjectEvent) (event)); org.eclipse.jgit.lib.Config cfg; try { cfg = configFactory.getProjectPluginConfigWithInheritance(projectEvent.getProjectNameKey(), pluginName); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""Ignoring event for a non-existing project {}, {}"", projectEvent.getProjectNameKey().get(), projectEvent); return; } for (java.lang.String name : cfg.getSubsections(com.googlesource.gerrit.plugins.webhooks.RemoteConfig.REMOTE)) { com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote = remoteFactory.create(cfg, name); if (com.google.common.base.Strings.isNullOrEmpty(remote.getUrl())) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""remote.{}.url not defined, skipping this remote"", name); continue; } taskFactory.create(projectEvent, remote).schedule(); } }",89d66c0f2ca847dd8904ac8c56f0851bda66c7ec,2017-11-02 08:21:59,10
131290,src_test_java_com_googlesource_gerrit_plugins_webhooks_processors_AbstractEventProcessorTest.java,"@org.junit.Test public void eventsNotSpecifiedAllEventsShouldPost() throws java.lang.Exception { when(config.getStringList(eq(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.REMOTE), eq(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.FOO), eq(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.EVENT))).thenReturn(new java.lang.String[]{ }); com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessor objectUnderTest = new com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.TestEventProcessor(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.PROJECT_CREATED, config, com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.FOO); boolean actual = objectUnderTest.shouldProcess(); assertThat(actual).isTrue(); objectUnderTest = new com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.TestEventProcessor(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.REF_UPDATED, config, com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.FOO); actual = objectUnderTest.shouldProcess(); assertThat(actual).isTrue(); }",fef1b7b231048dbefd9f8326342b4f9915c3704e,"@org.junit.Test public void eventsNotSpecifiedAllEventsShouldPost() throws java.lang.Exception { when(remote.getEvents()).thenReturn(new java.lang.String[]{ }); com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessor objectUnderTest = new com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.TestEventProcessor(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.PROJECT_CREATED, remote); boolean actual = objectUnderTest.shouldProcess(); assertThat(actual).isTrue(); objectUnderTest = new com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.TestEventProcessor(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.REF_UPDATED, remote); actual = objectUnderTest.shouldProcess(); assertThat(actual).isTrue(); }",c98c3db9475ee7b318fc6dedd3b00c70fd3a31c1,"@org.junit.Test public void eventsNotSpecifiedAllEventsShouldProcess() throws java.lang.Exception { when(remote.getEvents()).thenReturn(new java.lang.String[]{ }); boolean actual = processor.shouldProcess(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.PROJECT_CREATED, remote); assertThat(actual).isTrue(); actual = processor.shouldProcess(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.REF_UPDATED, remote); assertThat(actual).isTrue(); }",d73b68dfb016b74910db6ab682008b67b697bca0,2017-11-02 08:21:59,10
131290,src_main_java_com_googlesource_gerrit_plugins_webhooks_PostTask.java,"com.googlesource.gerrit.plugins.webhooks.PostTask create(@com.google.inject.assistedinject.Assisted(""url"") java.lang.String url, com.googlesource.gerrit.plugins.webhooks.EventProcessor processor);",3a8c100903633391a2ac3fc2d285a61d1f165943,"com.googlesource.gerrit.plugins.webhooks.PostTask create(com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote, com.googlesource.gerrit.plugins.webhooks.EventProcessor processor);",b1a97aee4b59dd46fae819fcc763e8e40e0e4d85,"com.googlesource.gerrit.plugins.webhooks.PostTask create(com.google.gerrit.server.events.ProjectEvent event, com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote);",086045192d55671a4fa63a7e9d42a885fb3323b1,2017-11-02 08:21:59,10
131290,src_main_java_com_googlesource_gerrit_plugins_webhooks_PostTask.java,"@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Result> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug(""No content. Webhook [{}] skipped."", url); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.post(url, content.get().headers, content.get().body); if ((!(result.successful)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error(""Failed to post: {}"", toString(), e); } } }",9f0ba066d4eb910acaa1970545bed6870681de43,"@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Result> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug(""No content. Webhook [{}] skipped."", remote.getUrl()); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.post(remote.getUrl(), content.get().headers, remote, content.get().body); if ((!(result.successful)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error(""Failed to post: {}"", toString(), e); } } }",68d43b4a4ce50e269b525f2b6e052211624b9948,"@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug(""No content. Webhook [{}] skipped."", remote.getUrl()); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.post(remote, content.get()); if ((!(result.successful)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error(""Failed to post: {}"", toString(), e); } } }",cf792ba2db978be4b5a9e0aecc27961fad40b686,2017-11-02 08:21:59,10
131290,src_main_java_com_googlesource_gerrit_plugins_webhooks_RemoteConfig.java,,,public org.eclipse.jgit.lib.Config getConfig() { return config; },462dba915400569bdaa45d48f3df3551dc89eebd,public org.eclipse.jgit.lib.Config getEffective() { return config; },8c9eafd04cf4ab755285ea25f8b6020b6399a685,2017-11-02 08:21:59,10
131290,src_main_java_com_googlesource_gerrit_plugins_webhooks_RemoteConfig.java,,,public java.lang.String getUrl() { return url.get(); },f960812487a75b32eef67f295cdd5776992c1b47,public java.lang.String getUrl() { return url; },179229a9ddbceacbb9d8913ced1fc9de1406b007,2017-11-02 08:21:59,10
131290,src_main_java_com_googlesource_gerrit_plugins_webhooks_processors_AbstractEventProcessor.java,"@java.lang.Override public boolean shouldProcess() { java.lang.String[] wantedEvents = cfg.getStringList(Configuration.REMOTE, name, ""event""); if ((wantedEvents.length) == 0) { return true; } for (java.lang.String type : wantedEvents) { if ((!(com.google.common.base.Strings.isNullOrEmpty(type))) && (type.equals(event.getType()))) { return true; } } return false; }",e6b1e09fddfcc3f065565ae1e0874e2fbb3c86d5,@java.lang.Override public boolean shouldProcess() { java.lang.String[] wantedEvents = remote.getEvents(); if ((wantedEvents.length) == 0) { return true; } for (java.lang.String type : wantedEvents) { if ((!(com.google.common.base.Strings.isNullOrEmpty(type))) && (type.equals(event.getType()))) { return true; } } return false; },554562ae10b7356cdeda46a5fa328bb24be6c739,"protected boolean shouldProcess(com.google.gerrit.server.events.ProjectEvent event, com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote) { java.lang.String[] wantedEvents = remote.getEvents(); if ((wantedEvents.length) == 0) { return true; } for (java.lang.String type : wantedEvents) { if ((!(com.google.common.base.Strings.isNullOrEmpty(type))) && (type.equals(event.getType()))) { return true; } } return false; }",24a547893db1ed4d157c46e72c83f71f550f7439,2017-11-02 08:21:59,10
131290,src_test_java_com_googlesource_gerrit_plugins_webhooks_processors_AbstractEventProcessorTest.java,"@org.junit.Test public void specifiedEventTypesShouldPost() throws java.lang.Exception { when(config.getStringList(eq(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.REMOTE), eq(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.FOO), eq(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.EVENT))).thenReturn(new java.lang.String[]{ ""project-created"" }); com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessor objectUnderTest = new com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.TestEventProcessor(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.PROJECT_CREATED, config, com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.FOO); boolean actual = objectUnderTest.shouldProcess(); assertThat(actual).isTrue(); }",8aa0617e34e7f8702f3344a18927718a04c16535,"@org.junit.Test public void specifiedEventTypesShouldPost() throws java.lang.Exception { when(remote.getEvents()).thenReturn(new java.lang.String[]{ ""project-created"" }); com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessor objectUnderTest = new com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.TestEventProcessor(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.PROJECT_CREATED, remote); boolean actual = objectUnderTest.shouldProcess(); assertThat(actual).isTrue(); }",8ef0741b6481b88c3a5eb71fcd9ce4e6bff74e2e,"@org.junit.Test public void specifiedEventTypesShouldProcess() throws java.lang.Exception { when(remote.getEvents()).thenReturn(new java.lang.String[]{ ""project-created"" }); boolean actual = processor.shouldProcess(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.PROJECT_CREATED, remote); assertThat(actual).isTrue(); }",d920b2e8eed8109e13452b3f237a84e11c5ffd78,2017-11-02 08:21:59,10
131290,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,"@org.junit.Test public void rescheduleOnRecoverableException() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenThrow(java.io.IOException.class); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",c253b880c195f5f89bcb8de712c279047f388450,"@org.junit.Test public void rescheduleOnRecoverableException() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, remote, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenThrow(java.io.IOException.class); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",8816043ca9698bd95a843a115b188505dd07c5db,"@org.junit.Test public void rescheduleOnRecoverableException() throws java.io.IOException { when(session.post(eq(remote), eq(content))).thenThrow(java.io.IOException.class); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",06862bbf62b43930c06611abef5f899c7f906942,2017-11-02 08:21:59,10
131290,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,"@org.junit.Test public void keepReschedulingMaxTriesTimes() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenThrow(java.io.IOException.class); when(executor.schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS)).then(new org.mockito.stubbing.Answer<java.lang.Void>() { @java.lang.Override public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable { task.run(); return null; } }); task.run(); verify(executor, times(((com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES) - 1))).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",05e1f072a63e0bb31a376d81df9f1bbb8e8900be,"@org.junit.Test public void keepReschedulingMaxTriesTimes() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, remote, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenThrow(java.io.IOException.class); when(executor.schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS)).then(new org.mockito.stubbing.Answer<java.lang.Void>() { @java.lang.Override public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable { task.run(); return null; } }); task.run(); verify(executor, times(((com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES) - 1))).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",b18c471e83396846c08132760e762390d49e0829,"@org.junit.Test public void keepReschedulingMaxTriesTimes() throws java.io.IOException { when(session.post(eq(remote), eq(content))).thenThrow(java.io.IOException.class); when(executor.schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS)).then(new org.mockito.stubbing.Answer<java.lang.Void>() { @java.lang.Override public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable { task.run(); return null; } }); task.run(); verify(executor, times(((com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES) - 1))).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",8777b75eb9108ffacc93f85f4eaa763cd18326fc,2017-11-02 08:21:59,10
131290,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,"@org.junit.Test public void rescheduleOnError() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.ERR_RESULT); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",b89104f95b2109bb5772848dc66692a06217b515,"@org.junit.Test public void rescheduleOnError() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, remote, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.ERR_RESULT); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",b7917034cbe37d5aae4b352618286c5f0f6ec49f,"@org.junit.Test public void rescheduleOnError() throws java.io.IOException { when(session.post(eq(remote), eq(content))).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.ERR_RESULT); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",0a1516336d23f897605653123a5be452866a20a3,2017-11-02 08:21:59,10
131290,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,"@org.junit.Before public void setup() { when(cfg.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(cfg.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(processor.process()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.CONTENT); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, cfg, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, processor); }",538147e92e0d7ada834c2dd6568c208a30668b98,"@org.junit.Before public void setup() { when(remote.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(remote.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(remote.getUrl()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL); when(processor.process()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.CONTENT); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, remote, processor); }",a3abe485048b76a319ef02b64562858d1fb2ad19,"@org.junit.Before public void setup() { when(remote.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(remote.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(remote.getUrl()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL); when(processor.process(eq(projectCreated), eq(remote))).thenReturn(java.util.Optional.of(content)); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, processor, projectCreated, remote); }",964b8ce5017823aaf33343de1710520b6a982f4a,2017-11-02 08:21:59,10
131290,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,"@org.junit.Test public void noRescheduleOnNonRecoverableException() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenThrow(javax.net.ssl.SSLException.class); task.run(); verifyZeroInteractions(executor); }",1ccce8b21312422ce253e4f4db285957cabec625,"@org.junit.Test public void noRescheduleOnNonRecoverableException() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, remote, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenThrow(javax.net.ssl.SSLException.class); task.run(); verifyZeroInteractions(executor); }",6d8099e91c06deee5cdf8f38ddd9c9d9624f83c3,"@org.junit.Test public void noRescheduleOnNonRecoverableException() throws java.io.IOException { when(session.post(eq(remote), eq(content))).thenThrow(javax.net.ssl.SSLException.class); task.run(); verifyZeroInteractions(executor); }",c184d3d3d890b7ce138a0789569ee5b38250ffea,2017-11-02 08:21:59,10
131290,src_main_java_com_googlesource_gerrit_plugins_webhooks_HttpSession.java,"com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult post(java.lang.String endpoint, java.util.Map<java.lang.String, java.lang.String> headers, java.lang.String content) throws java.io.IOException { org.apache.http.client.methods.HttpPost post = new org.apache.http.client.methods.HttpPost(endpoint); post.addHeader(""Content-Type"", MediaType.JSON_UTF_8.toString()); headers.entrySet().stream().forEach(( e) -> { post.addHeader(e.getKey(), e.getValue()); }); post.setEntity(new org.apache.http.entity.StringEntity(content, java.nio.charset.StandardCharsets.UTF_8)); return httpClient.execute(post, new com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler()); }",00fb1d8c471d31d7e03aecd3ea939a8142bc0fdc,"com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult post(java.lang.String endpoint, java.util.Map<java.lang.String, java.lang.String> headers, com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote, java.lang.String content) throws java.io.IOException { org.apache.http.client.methods.HttpPost post = new org.apache.http.client.methods.HttpPost(endpoint); post.addHeader(""Content-Type"", MediaType.JSON_UTF_8.toString()); post.setConfig(getConfig(remote)); headers.entrySet().stream().forEach(( e) -> { post.addHeader(e.getKey(), e.getValue()); }); post.setEntity(new org.apache.http.entity.StringEntity(content, java.nio.charset.StandardCharsets.UTF_8)); return httpClient.execute(post, new com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler()); }",e385a49a27865586a0c4c8711dc6b10a5c450eac,"com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult post(com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote, com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request request) throws java.io.IOException { org.apache.http.client.methods.HttpPost post = new org.apache.http.client.methods.HttpPost(remote.getUrl()); post.addHeader(""Content-Type"", MediaType.JSON_UTF_8.toString()); post.setConfig(getConfig(remote)); request.headers.entrySet().stream().forEach(( e) -> { post.addHeader(e.getKey(), e.getValue()); }); post.setEntity(new org.apache.http.entity.StringEntity(request.body, java.nio.charset.StandardCharsets.UTF_8)); return httpClient.execute(post, new com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler()); }",c7a76df41783bc6e8f2c85caa439334d813e5922,2017-11-02 08:21:59,10
131290,src_test_java_com_googlesource_gerrit_plugins_webhooks_EventHandlerTest.java,"@org.junit.Before public void setup() throws com.google.gerrit.server.project.NoSuchProjectException { when(configFactory.getProjectPluginConfigWithInheritance(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_NAME, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN)).thenReturn(config); when(factory.create(any(com.google.gerrit.server.events.ProjectEvent.class), eq(config), eq(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO))).thenReturn(processor); when(taskFactory.create(anyString(), eq(processor))).thenReturn(postTask); eventHandler = new com.googlesource.gerrit.plugins.webhooks.EventHandler(configFactory, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN, taskFactory, factory); }",37889702f5afc5087b67387643ebf1f3cf552ee9,"@org.junit.Before public void setup() throws com.google.gerrit.server.project.NoSuchProjectException { when(configFactory.getProjectPluginConfigWithInheritance(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_NAME, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN)).thenReturn(config); when(factory.create(any(com.google.gerrit.server.events.ProjectEvent.class), eq(remote))).thenReturn(processor); when(taskFactory.create(eq(remote), eq(processor))).thenReturn(postTask); when(remoteFactory.create(any(org.eclipse.jgit.lib.Config.class), eq(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO))).thenReturn(remote); eventHandler = new com.googlesource.gerrit.plugins.webhooks.EventHandler(configFactory, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN, taskFactory, factory, remoteFactory); }",636befd87c0f5adcfa98517981065a5cf7a13c81,"@org.junit.Before public void setup() throws com.google.gerrit.server.project.NoSuchProjectException { when(projectCreated.getProjectNameKey()).thenReturn(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_NAME); when(configFactory.getProjectPluginConfigWithInheritance(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_NAME, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN)).thenReturn(config); when(remoteFactory.create(eq(config), eq(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO))).thenReturn(remote); when(taskFactory.create(eq(projectCreated), eq(remote))).thenReturn(postTask); eventHandler = new com.googlesource.gerrit.plugins.webhooks.EventHandler(configFactory, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN, remoteFactory, taskFactory); }",0bb00f01621508ddfbeecce14d268c716e5bb145,2017-11-02 08:21:59,10
131290,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,"@org.junit.Test public void noRescheduleOnSuccess() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.OK_RESULT); task.run(); verifyZeroInteractions(executor); }",688447b8f951f5a61dc3bbb97e8abb9d959264d0,"@org.junit.Test public void noRescheduleOnSuccess() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, remote, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.OK_RESULT); task.run(); verifyZeroInteractions(executor); }",17e4d81ee9cc6995f5e6904e0374291e67b8b9b2,"@org.junit.Test public void noRescheduleOnSuccess() throws java.io.IOException { when(session.post(eq(remote), eq(content))).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.OK_RESULT); task.run(); verifyZeroInteractions(executor); }",01cb890012092fa0010cb1444c49981654b7384a,2017-11-02 08:21:59,10
131290,src_test_java_com_googlesource_gerrit_plugins_webhooks_processors_AbstractEventProcessorTest.java,"@org.junit.Test public void nonSpecifiedProjectEventTypesNotPosted() throws java.lang.Exception { when(config.getStringList(eq(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.REMOTE), eq(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.FOO), eq(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.EVENT))).thenReturn(new java.lang.String[]{ ""project-created"" }); com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessor objectUnderTest = new com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.TestEventProcessor(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.REF_UPDATED, config, com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.FOO); boolean actual = objectUnderTest.shouldProcess(); assertThat(actual).isFalse(); }",0a746952172b675058950548ca2dacc742eafbef,"@org.junit.Test public void nonSpecifiedProjectEventTypesNotPosted() throws java.lang.Exception { when(remote.getEvents()).thenReturn(new java.lang.String[]{ ""project-created"" }); com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessor objectUnderTest = new com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.TestEventProcessor(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.REF_UPDATED, remote); boolean actual = objectUnderTest.shouldProcess(); assertThat(actual).isFalse(); }",491d0bce2db95bb0cd7849b4bf22de936000c2f2,"@org.junit.Test public void nonSpecifiedProjectEventTypesNotProcess() throws java.lang.Exception { when(remote.getEvents()).thenReturn(new java.lang.String[]{ ""project-created"" }); boolean actual = processor.shouldProcess(com.googlesource.gerrit.plugins.webhooks.processors.AbstractEventProcessorTest.REF_UPDATED, remote); assertThat(actual).isFalse(); }",c32d563fbb90b502a772bcb55e9004a0898a68ed,2017-11-02 08:21:59,10
133792,src_main_java_com_googlesource_gerrit_plugins_webhooks_PostTask.java,"@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Result> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug(""No content. Webhook [{}] skipped."", remote.getUrl()); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.post(remote.getUrl(), content.get().headers, remote, content.get().body); if ((!(result.successful)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error(""Failed to post: {}"", toString(), e); } } }",68d43b4a4ce50e269b525f2b6e052211624b9948,"@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Result> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug(""No content. Webhook [{}] skipped."", remote.getUrl()); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.get().post(remote.getUrl(), content.get().headers, remote, content.get().body); if ((!(result.successful)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error(""Failed to post: {}"", toString(), e); } } }",deb441641f6dea5e7fc22c57c2bf52657daf3383,"@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug(""No content. Webhook [{}] skipped."", remote.getUrl()); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.get().post(remote, content.get()); if ((!(result.successful)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error(""Failed to post: {}"", toString(), e); } } }",579b044e922b606207ed42fe30ed219d4484a8e2,2017-11-02 09:52:19,12
133792,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,"@org.junit.Before public void setup() { when(remote.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(remote.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(remote.getUrl()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL); when(processor.process(eq(projectCreated), eq(remote))).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.CONTENT); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, processor, projectCreated, remote); }",4fb27f1c12987392e047d346d4b22431377cecc4,"@org.junit.Before public void setup() { when(remote.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(remote.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(remote.getUrl()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL); when(processor.process(eq(projectCreated), eq(remote))).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.CONTENT); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, com.google.inject.util.Providers.of(session), processor, projectCreated, remote); }",266195fd11ba02857ab9faaee16e2b3555448e0d,"@org.junit.Before public void setup() { when(remote.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(remote.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(remote.getUrl()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL); when(processor.process(eq(projectCreated), eq(remote))).thenReturn(java.util.Optional.of(content)); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, com.google.inject.util.Providers.of(session), processor, projectCreated, remote); }",58ee96949d94c8cfa48f2db6ac973556eb2b449e,2017-11-02 09:52:19,12
138791,javatests_com_google_gerrit_common_VersionTest.java,,,"@org.junit.Test public void version() { boolean eclipse = java.util.Arrays.stream(java.lang.Thread.currentThread().getStackTrace()).anyMatch(( e) -> e.getClassName().startsWith(""org.eclipse.jdt."")); java.util.regex.Pattern expected = (eclipse) ? com.google.gerrit.common.VersionTest.DEV_PATTERN : com.google.gerrit.common.VersionTest.GIT_DESCRIBE_PATTERN; assertThat(com.google.gerrit.common.Version.getVersion()).matches(expected); assertThat(com.google.gerrit.common.Version.getVersion()).matches(expected); }",8b7865604889dcdc00da909c4dcff4240d66645a,@org.junit.Test public void version() { java.util.regex.Pattern expected = (com.google.gerrit.launcher.GerritLauncher.isRunningInEclipse()) ? com.google.gerrit.common.VersionTest.DEV_PATTERN : com.google.gerrit.common.VersionTest.GIT_DESCRIBE_PATTERN; assertThat(com.google.gerrit.common.Version.getVersion()).matches(expected); assertThat(com.google.gerrit.common.Version.getVersion()).matches(expected); },d458389a8ae026e00538f07b6f1c7dc0392de51a,2017-11-03 14:31:09,5
138777,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushToGroupBranchIsRejected() throws java.lang.Exception { grant(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); java.lang.String groupRefName = (com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name(""foo"")); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Update group config"", ""group.config"", ""some content"").setParents(com.google.common.collect.ImmutableList.of()).to(groupRefName); r.assertErrorStatus(""group update not allowed""); createGroupBranch(groupRefName); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, (groupRefName + "":groupRef"")); allUsersRepo.reset(""groupRef""); r = pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Update group config"", ""group.config"", ""some content"").to(groupRefName); r.assertErrorStatus(""group update not allowed""); }",0721e28547839efc15e83650d521b52f358b99a1,"@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { pushToGroupBranch(allUsers, ""group update not allowed""); }",1290651f7be19cad049fe93bb570b8addf2711e6,2017-11-07 05:32:34,2
138777,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void createGroupBranch(java.lang.String ref) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(allUsers);org.eclipse.jgit.lib.ObjectInserter oi = r.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { org.eclipse.jgit.lib.ObjectId emptyTree = oi.insert(Constants.OBJ_TREE, new byte[]{ }); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(emptyTree); cb.setCommitter(ident); cb.setAuthor(ident); cb.setMessage(""Create group""); org.eclipse.jgit.lib.ObjectId emptyCommit = oi.insert(cb); oi.flush(); org.eclipse.jgit.lib.RefUpdate updateRef = r.updateRef(ref); updateRef.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRef.update(rw)).isEqualTo(RefUpdate.Result.NEW); } }",f61af29dc98d869295b92bcde3f9a62855dc35d4,"private void createGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(project);org.eclipse.jgit.lib.ObjectInserter oi = r.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { org.eclipse.jgit.lib.ObjectId emptyTree = oi.insert(Constants.OBJ_TREE, new byte[]{ }); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(emptyTree); cb.setCommitter(ident); cb.setAuthor(ident); cb.setMessage(""Create group""); org.eclipse.jgit.lib.ObjectId emptyCommit = oi.insert(cb); oi.flush(); org.eclipse.jgit.lib.RefUpdate updateRef = r.updateRef(ref); updateRef.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRef.update(rw)).isEqualTo(RefUpdate.Result.NEW); } }",74ff1695e895ad9b5c06a02ce6dfec6cfa08b00e,2017-11-07 05:32:34,2
138777,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushToGroupBranchForReviewIsRejectedOnSubmit() throws java.lang.Exception { grantLabel(""Code-Review"", (-2), 2, allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS, false); grant(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.SUBMIT, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); java.lang.String groupRefName = (com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name(""foo"")); createGroupBranch(groupRefName); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, (groupRefName + "":groupRef"")); allUsersRepo.reset(""groupRef""); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Update group config"", ""group.config"", ""some content"").to(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + groupRefName)); r.assertOkStatus(); assertThat(r.getChange().change().getDest().get()).isEqualTo(groupRefName); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""group update not allowed""); gApi.changes().id(r.getChangeId()).current().submit(); }",bf68023c0c2550351bbf49a2e75dc97ce201eac7,"@org.junit.Test public void pushToGroupBranchForReviewForAllUsersRepoIsRejectedOnSubmit() throws java.lang.Exception { pushToGroupBranchForReviewAndSubmit(allUsers, ""group update not allowed""); }",d24942ece5c35e953c49a85f066bc58945b2552a,2017-11-07 05:32:34,2
138992,java_com_google_gerrit_server_project_SetAccessUtil.java,"void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> removals, java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""Cannot edit global capabilities for projects other than "" + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : additions) { java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""invalid section name""); } com.google.gerrit.server.project.RefPattern.validate(name); } else { for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(((""Cannot add non-global capability "" + (p.getName())) + "" to global capabilities"")); } } } } }",01f184e58493845745346a2529ccebb06e1247ec,"void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> removals, java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""Cannot edit global capabilities for projects other than "" + (allProjects.get()))); } } if (section.getName().startsWith(RefNames.REFS_GROUPS)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""Permissions on %s is managed by Gerrit and cannot be modified"", RefNames.REFS_GROUPS)); } } for (com.google.gerrit.common.data.AccessSection section : additions) { java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""invalid section name""); } com.google.gerrit.server.project.RefPattern.validate(name); } else { for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(((""Cannot add non-global capability "" + (p.getName())) + "" to global capabilities"")); } } } } }",11f0b6c825caa58495524fb7fc146fabaff68d2c,"void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> removals, java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""Cannot edit global capabilities for projects other than "" + (allProjects.get()))); } } if ((isGroupsMutationDisallowed(config.getName())) && (section.getName().startsWith(RefNames.REFS_GROUPS))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""Permissions on %s is managed by Gerrit and cannot be modified"", RefNames.REFS_GROUPS)); } } for (com.google.gerrit.common.data.AccessSection section : additions) { java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""invalid section name""); } com.google.gerrit.server.project.RefPattern.validate(name); } else { for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(((""Cannot add non-global capability "" + (p.getName())) + "" to global capabilities"")); } } } } }",3f25f8412037cab51455726623ef9d63a7cece7a,2017-11-07 10:28:18,2
138992,javatests_com_google_gerrit_acceptance_rest_project_AccessIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void updateGroupRefPermissions() throws java.lang.Exception { ProjectAccessInput accessInput = newProjectAccessInput(); accessInput.add.put(((RefNames.REFS_GROUPS) + ""*""), createDefaultAccessSectionInfo()); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""Permissions on refs/groups/ is managed by Gerrit and cannot be modified""); gApi.projects().name(project.get()).access(accessInput); }",9d1559b15e01a29ec55261027d5f0950110074c2,"@org.junit.Test public void updateGroupRefPermissions() throws java.lang.Exception { ProjectAccessInput accessInput = newProjectAccessInput(); accessInput.add.put(((RefNames.REFS_GROUPS) + ""*""), createDefaultAccessSectionInfo()); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""Permissions on refs/groups/ is managed by Gerrit and cannot be modified""); gApi.projects().name(allProjects.get()).access(accessInput); }",49d058882a50fff54476cd28ed97ced9f5e54458,2017-11-07 10:28:18,2
138861,java_com_google_gerrit_server_notedb_RepoSequence.java,"@java.lang.Override public RefUpdate.Result call() throws java.lang.Exception { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); afterReadRef.run(); org.eclipse.jgit.lib.ObjectId oldId; if (ref == null) { oldId = org.eclipse.jgit.lib.ObjectId.zeroId(); next = seed.get(); } else { oldId = ref.getObjectId(); next = parse(oldId); } return store(repo, rw, oldId, ((next) + (count))); }",b2b72a3b069d75d7f3bc6e0c4fe3ac50546d3768,"@java.lang.Override public RefUpdate.Result call() throws java.lang.Exception { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); afterReadRef.run(); org.eclipse.jgit.lib.ObjectId oldId; if (ref == null) { oldId = org.eclipse.jgit.lib.ObjectId.zeroId(); next = seed.get(); } else { oldId = ref.getObjectId(); next = parse(rw, oldId); } return store(repo, rw, oldId, ((next) + (count))); }",8db862bd0a6374b10311040b520d8a9e5c74dea8,"@java.lang.Override public org.eclipse.jgit.lib.RefUpdate.Result call() throws java.lang.Exception { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); afterReadRef.run(); org.eclipse.jgit.lib.ObjectId oldId; if (ref == null) { oldId = org.eclipse.jgit.lib.ObjectId.zeroId(); next = seed.get(); } else { oldId = ref.getObjectId(); next = parse(rw, oldId); } return store(repo, rw, oldId, ((next) + (count))); }",4d18ec5aeb5585bc30673d3d2345bbc0e62937df,2017-11-07 12:49:30,4
138861,java_com_google_gerrit_server_notedb_RepoSequence.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public RefUpdate.Result call() throws java.lang.Exception { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); afterReadRef.run(); org.eclipse.jgit.lib.ObjectId oldId; if (ref == null) { oldId = org.eclipse.jgit.lib.ObjectId.zeroId(); } else { oldId = ref.getObjectId(); int next = parse(rw, oldId); if (next >= (value)) { return RefUpdate.Result.NO_CHANGE; } } return store(repo, rw, oldId, value); }",195a55933bdb0aaa25df665bceaab5e1bf957aaf,"@java.lang.Override public org.eclipse.jgit.lib.RefUpdate.Result call() throws java.lang.Exception { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); afterReadRef.run(); org.eclipse.jgit.lib.ObjectId oldId; if (ref == null) { oldId = org.eclipse.jgit.lib.ObjectId.zeroId(); } else { oldId = ref.getObjectId(); int next = parse(rw, oldId); if (next >= (value)) { return org.eclipse.jgit.lib.RefUpdate.Result.NO_CHANGE; } } return store(repo, rw, oldId, value); }",81cb56fdcab92126559dfff06b70f201609ba375,2017-11-07 12:49:30,4
138996,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushGroupsAccessSectionChangeToCustomProjectSucceeds() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project, RefNames.REFS_CONFIG); java.lang.String config = gApi.projects().name(project.get()).branch(RefNames.REFS_CONFIG).file(""project.config"").asString(); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(config); cfg.setString(""access"", ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""foo""), ""push"", ""group Registered Users""); config = cfg.toText(); com.google.gerrit.acceptance.PushOneCommit.Result r1 = pushFactory.create(db, admin.getIdent(), repo, ""Subject"", ""groups"", ""global:Registered-Users\tRegistered Users"").to(RefNames.REFS_CONFIG); r1.assertOkStatus(); com.google.gerrit.acceptance.PushOneCommit.Result r2 = pushFactory.create(db, admin.getIdent(), repo, ""Subject"", ""project.config"", config).to(RefNames.REFS_CONFIG); r2.assertOkStatus(); }",43823eb91718e365143e5f30ec9bdfe8f8434f34,"@org.junit.Test public void pushGroupsAccessSectionChangeToCustomProjectSucceeds() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project, RefNames.REFS_CONFIG); java.lang.String config = gApi.projects().name(project.get()).branch(RefNames.REFS_CONFIG).file(ProjectConfig.PROJECT_CONFIG).asString(); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(config); cfg.setString(""access"", ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""foo""), ""push"", ""group Registered Users""); config = cfg.toText(); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Subject"", com.google.common.collect.ImmutableMap.of(""groups"", ""global:Registered-Users\tRegistered Users"", ProjectConfig.PROJECT_CONFIG, config)).to(RefNames.REFS_CONFIG); r.assertOkStatus(); }",a660c2ec7087aa1939f74786285534e95c69bb7f,2017-11-08 09:56:13,4
138996,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushGroupsAccessSectionChangeToAllUsersFails() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(allUsers, RefNames.REFS_CONFIG); java.lang.String config = gApi.projects().name(allUsers.get()).branch(RefNames.REFS_CONFIG).file(""project.config"").asString(); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(config); cfg.setString(""access"", ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""foo""), ""push"", ""group Registered Users""); config = cfg.toText(); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Subject"", ""project.config"", config).to(RefNames.REFS_CONFIG); r.assertErrorStatus(""invalid project configuration""); r.assertMessage(""permissions on refs/groups/ is managed by gerrit and cannot be modified""); }",8d6109b6cc3542433a0095425b88b72d4d519a0d,"@org.junit.Test public void pushGroupsAccessSectionChangeToAllUsersFails() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(allUsers, RefNames.REFS_CONFIG); java.lang.String config = gApi.projects().name(allUsers.get()).branch(RefNames.REFS_CONFIG).file(ProjectConfig.PROJECT_CONFIG).asString(); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(config); cfg.setString(""access"", ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""foo""), ""push"", ""group Registered Users""); config = cfg.toText(); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Subject"", ProjectConfig.PROJECT_CONFIG, config).to(RefNames.REFS_CONFIG); r.assertErrorStatus(""invalid project configuration""); r.assertMessage(""permissions on refs/groups/ are managed by gerrit and cannot be modified""); }",7c0ad103f6a3b2c0c3e31a874a31835a675b7ae2,2017-11-08 09:56:13,4
138996,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushNonGroupsAccessSectionChangeToAllUsersSucceeds() throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig projectConfig = projectCache.checkedGet(allUsers).getConfig(); com.google.gerrit.common.data.AccessSection as = new com.google.gerrit.common.data.AccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""foo"")); com.google.gerrit.common.data.Permission perm = new com.google.gerrit.common.data.Permission(""push""); perm.add(new com.google.gerrit.common.data.PermissionRule(systemGroupBackend.getGroup(com.google.gerrit.acceptance.api.group.ANONYMOUS_USERS))); as.addPermission(perm); projectConfig.replace(as); saveProjectConfig(allUsers, projectConfig); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(allUsers, RefNames.REFS_CONFIG); java.lang.String config = gApi.projects().name(allUsers.get()).branch(RefNames.REFS_CONFIG).file(""project.config"").asString(); assertThat(config).contains(""[access \""refs/groups/foo\""]""); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(config); cfg.setString(""access"", ((com.google.gerrit.reviewdb.client.RefNames.REFS_CHANGES) + ""foo""), ""push"", ""group Registered Users""); config = cfg.toText(); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Subject"", ""project.config"", config).to(RefNames.REFS_CONFIG); r.assertOkStatus(); }",3029dc50597d2ad8d0b4311ce555ba361858f8bd,"@org.junit.Test public void pushNonGroupsAccessSectionChangeToAllUsersSucceeds() throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig projectConfig = projectCache.checkedGet(allUsers).getConfig(); com.google.gerrit.common.data.AccessSection as = new com.google.gerrit.common.data.AccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""foo"")); com.google.gerrit.common.data.Permission perm = new com.google.gerrit.common.data.Permission(""push""); perm.add(new com.google.gerrit.common.data.PermissionRule(systemGroupBackend.getGroup(com.google.gerrit.acceptance.api.group.ANONYMOUS_USERS))); as.addPermission(perm); projectConfig.replace(as); saveProjectConfig(allUsers, projectConfig); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(allUsers, RefNames.REFS_CONFIG); java.lang.String config = gApi.projects().name(allUsers.get()).branch(RefNames.REFS_CONFIG).file(ProjectConfig.PROJECT_CONFIG).asString(); assertThat(config).contains(""[access \""refs/groups/foo\""]""); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(config); cfg.setString(""access"", ((com.google.gerrit.reviewdb.client.RefNames.REFS_CHANGES) + ""foo""), ""push"", ""group Registered Users""); config = cfg.toText(); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Subject"", ProjectConfig.PROJECT_CONFIG, config).to(RefNames.REFS_CONFIG); r.assertOkStatus(); }",578822aa76045b6352279fa69743921e13fc4625,2017-11-08 09:56:13,4
138863,javatests_com_google_gerrit_acceptance_rest_project_AccessIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void allUsersCanOnlyInheritFromAllProjects() throws java.lang.Exception { com.google.gerrit.extensions.api.access.ProjectAccessInput accessInput = newProjectAccessInput(); accessInput.parent = project.get(); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""All-Users must inherit from All-Projects""); gApi.projects().name(""All-Users"").access(accessInput); }",cd9e1bad4bc5e2604071008903b103764d920034,"@org.junit.Test public void allUsersCanOnlyInheritFromAllProjects() throws java.lang.Exception { com.google.gerrit.extensions.api.access.ProjectAccessInput accessInput = newProjectAccessInput(); accessInput.parent = project.get(); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage((((allUsers.get()) + "" must inherit from "") + (allProjects.get()))); gApi.projects().name(allUsers.get()).access(accessInput); }",e62d62208bf9e3d3de52e190d3cf7f5fadf0fdac,2017-11-09 04:31:12,3
138780,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""user.writeGroupsToNoteDb"", value = ""true"") public void createGroupWithPropertiesWithWriteToNoteDb() throws java.lang.Exception { testCreateGroupWithProperties(true); }",9bc42821069ef95c7a8ad845ba7058efb95e37de,"@org.junit.Test public void pushToGroupBranchForNonAllUsersRepo() throws java.lang.Exception { pushToGroupBranch(project, null); }",eaeb386b0c652d254352a31af248a42b455b3dd8,2017-11-09 09:16:38,6
138780,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void assertGroupOwnerPermissions(java.lang.String groupUuid, java.lang.String expectedOwnerUuid) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.access.PermissionInfo newPermissionInfo = new com.google.gerrit.extensions.api.access.PermissionInfo(null, null); newPermissionInfo.rules = com.google.common.collect.ImmutableMap.of(expectedOwnerUuid, new com.google.gerrit.extensions.api.access.PermissionRuleInfo(com.google.gerrit.extensions.api.access.PermissionRuleInfo.Action.ALLOW, false)); ProjectAccessInfo access = gApi.projects().name(allUsersName.get()).access(); java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsGroups(AccountGroup.UUID.parse(groupUuid)); assertThat(access.local).containsKey(groupRef); assertThat(access.local.get(groupRef).permissions).containsExactly(Permission.PUSH, newPermissionInfo, Permission.READ, newPermissionInfo); }",387d6bea7df6a5293c47e57c977ae1d33e79a9a2,"private void assertGroupOwnerPermissions(java.lang.String groupUuid, java.lang.String expectedOwnerUuid) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.access.PermissionInfo newPermissionInfo = new com.google.gerrit.extensions.api.access.PermissionInfo(null, null); newPermissionInfo.rules = com.google.common.collect.ImmutableMap.of(expectedOwnerUuid, new com.google.gerrit.extensions.api.access.PermissionRuleInfo(com.google.gerrit.extensions.api.access.PermissionRuleInfo.Action.ALLOW, false)); ProjectAccessInfo access = gApi.projects().name(allUsers.get()).access(); java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsGroups(AccountGroup.UUID.parse(groupUuid)); assertThat(access.local).containsKey(groupRef); assertThat(access.local.get(groupRef).permissions).containsExactly(Permission.PUSH, newPermissionInfo, Permission.READ, newPermissionInfo); }",9a3f558b4cca81230935d916bd1e8287ef6db929,2017-11-09 09:16:38,6
138780,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void testCreateGroup(boolean writeGroupsToNoteDb) throws java.lang.Exception { java.lang.String newGroupName = name(""newGroup""); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(newGroupName).get(); com.google.gerrit.acceptance.api.group.GroupAssert.assertGroupInfo(getFromCache(newGroupName), g); if (writeGroupsToNoteDb) { assertGroupOwnerPermissions(g.id, g.id); } }",18651fc065902e1382e5db3ce372b2d57e2d3562,"@org.junit.Test public void groupOwner() throws java.lang.Exception { java.lang.String adminUUID = getFromCache(""Administrators"").getGroupUUID().get(); java.lang.String registeredUUID = SystemGroupBackend.REGISTERED_USERS.get(); assertThat(com.google.gerrit.extensions.restapi.Url.decode(gApi.groups().id(adminUUID).owner().id)).isEqualTo(adminUUID); java.lang.String name = name(""group""); com.google.gerrit.extensions.common.GroupInfo info = gApi.groups().create(name).get(); assertThat(com.google.gerrit.extensions.restapi.Url.decode(gApi.groups().id(name).owner().id)).isEqualTo(info.id); gApi.groups().id(name).owner(""Registered Users""); assertThat(com.google.gerrit.extensions.restapi.Url.decode(gApi.groups().id(name).owner().id)).isEqualTo(registeredUUID); if (groupsInNoteDb()) { assertGroupOwnerPermissions(info.id, registeredUUID); } gApi.groups().id(name).owner(adminUUID); assertThat(com.google.gerrit.extensions.restapi.Url.decode(gApi.groups().id(name).owner().id)).isEqualTo(adminUUID); if (groupsInNoteDb()) { assertGroupOwnerPermissions(info.id, adminUUID); } exception.expect(com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); gApi.groups().id(name).owner(""Non-Existing Group""); }",09870984c7ff040fd1d6521d662d4f1b0070b2c2,2017-11-09 09:16:38,6
138780,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""user.writeGroupsToNoteDb"", value = ""true"") public void groupOwnerWithWriteToNoteDb() throws java.lang.Exception { testGroupOwner(true); }",2d2df5a4cc3ddf72b83c21b2c07641dc91c08364,"@org.junit.Test public void pushNonGroupsAccessSectionChangeToAllUsersSucceeds() throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig projectConfig = projectCache.checkedGet(allUsers).getConfig(); com.google.gerrit.common.data.AccessSection as = new com.google.gerrit.common.data.AccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""foo"")); com.google.gerrit.common.data.Permission perm = new com.google.gerrit.common.data.Permission(""push""); perm.add(new com.google.gerrit.common.data.PermissionRule(systemGroupBackend.getGroup(com.google.gerrit.acceptance.api.group.ANONYMOUS_USERS))); as.addPermission(perm); projectConfig.replace(as); saveProjectConfig(allUsers, projectConfig); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(allUsers, RefNames.REFS_CONFIG); java.lang.String config = gApi.projects().name(allUsers.get()).branch(RefNames.REFS_CONFIG).file(ProjectConfig.PROJECT_CONFIG).asString(); assertThat(config).contains(""[access \""refs/groups/foo\""]""); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(config); cfg.setString(""access"", ((com.google.gerrit.reviewdb.client.RefNames.REFS_CHANGES) + ""foo""), ""push"", ""group Registered Users""); config = cfg.toText(); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Subject"", ProjectConfig.PROJECT_CONFIG, config).to(RefNames.REFS_CONFIG); r.assertOkStatus(); }",578822aa76045b6352279fa69743921e13fc4625,2017-11-09 09:16:38,6
138780,java_com_google_gerrit_server_group_db_GroupsUpdate.java,"private java.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDb(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = loadFor(groupUuid); if (!(groupConfig.getLoadedGroup().isPresent())) { return java.util.Optional.empty(); } return updateGroupInNoteDb(groupConfig, groupUpdate); }",b95120caa30759b2007320d71fd469ad6cfabaff,"private java.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDb(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = loadFor(groupUuid); if (!(groupConfig.getLoadedGroup().isPresent())) { return java.util.Optional.empty(); } return updateGroupInNoteDb(groupConfig, groupUpdate); }",bc790071650037f8ce1fe94153ef0e2f33cb8040,"private java.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDb(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = loadFor(groupUuid); if (!(groupConfig.getLoadedGroup().isPresent())) { return java.util.Optional.empty(); } return updateGroupInNoteDb(groupConfig, groupUpdate); }",b95120caa30759b2007320d71fd469ad6cfabaff,2017-11-09 09:16:38,6
138780,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void testGroupOwner(boolean writeGroupsToNoteDb) throws java.lang.Exception { java.lang.String name = name(""group""); com.google.gerrit.extensions.common.GroupInfo info = gApi.groups().create(name).get(); java.lang.String adminUUID = getFromCache(""Administrators"").getGroupUUID().get(); java.lang.String registeredUUID = SystemGroupBackend.REGISTERED_USERS.get(); assertThat(com.google.gerrit.extensions.restapi.Url.decode(gApi.groups().id(name).owner().id)).isEqualTo(info.id); gApi.groups().id(name).owner(""Registered Users""); assertThat(com.google.gerrit.extensions.restapi.Url.decode(gApi.groups().id(name).owner().id)).isEqualTo(registeredUUID); if (writeGroupsToNoteDb) { assertGroupOwnerPermissions(info.id, registeredUUID); } gApi.groups().id(name).owner(adminUUID); assertThat(com.google.gerrit.extensions.restapi.Url.decode(gApi.groups().id(name).owner().id)).isEqualTo(adminUUID); if (writeGroupsToNoteDb) { assertGroupOwnerPermissions(info.id, adminUUID); } exception.expect(com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); gApi.groups().id(name).owner(""Non-Existing Group""); }",c8999f0d1358ad5fae847458a02895d98bf8a3b8,"private void createGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(project);org.eclipse.jgit.lib.ObjectInserter oi = r.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { org.eclipse.jgit.lib.ObjectId emptyTree = oi.insert(Constants.OBJ_TREE, new byte[]{ }); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(emptyTree); cb.setCommitter(ident); cb.setAuthor(ident); cb.setMessage(""Create group""); org.eclipse.jgit.lib.ObjectId emptyCommit = oi.insert(cb); oi.flush(); org.eclipse.jgit.lib.RefUpdate updateRef = r.updateRef(ref); updateRef.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRef.update(rw)).isEqualTo(RefUpdate.Result.NEW); } }",74ff1695e895ad9b5c06a02ce6dfec6cfa08b00e,2017-11-09 09:16:38,6
138780,java_com_google_gerrit_server_group_db_GroupsUpdate.java,"private java.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDb(com.google.gerrit.server.group.db.GroupConfig groupConfig, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws java.io.IOException { java.util.Optional<com.google.gerrit.server.group.InternalGroup> originalGroup = groupConfig.getLoadedGroup(); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(groupConfig); com.google.gerrit.server.group.InternalGroup updatedGroup = groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""Updated group wasn't automatically loaded"")); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> modifiedMembers = com.google.gerrit.server.group.db.GroupsUpdate.getModifiedMembers(originalGroup, updatedGroup); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> modifiedSubgroups = com.google.gerrit.server.group.db.GroupsUpdate.getModifiedSubgroups(originalGroup, updatedGroup); java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup.NameKey> previousName = com.google.gerrit.server.group.db.GroupsUpdate.getPreviousNameIfModified(originalGroup, updatedGroup); com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult.Builder resultBuilder = com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult.builder().setGroupUuid(updatedGroup.getGroupUUID()).setGroupId(updatedGroup.getId()).setGroupName(updatedGroup.getNameKey()).setModifiedMembers(modifiedMembers).setModifiedSubgroups(modifiedSubgroups); previousName.ifPresent(resultBuilder::setPreviousGroupName); return java.util.Optional.of(resultBuilder.build()); }",0e7c545f5c9b511ce8167e3ab6c62324de48c560,"private java.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDb(com.google.gerrit.server.group.db.GroupConfig groupConfig, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.server.group.InternalGroup> originalGroup = groupConfig.getLoadedGroup(); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(groupConfig); com.google.gerrit.server.group.InternalGroup updatedGroup = groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""Updated group wasn't automatically loaded"")); updateOwnerPermissions(updatedGroup, (originalGroup.isPresent() ? originalGroup.get().getOwnerGroupUUID() : null)); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> modifiedMembers = com.google.gerrit.server.group.db.GroupsUpdate.getModifiedMembers(originalGroup, updatedGroup); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> modifiedSubgroups = com.google.gerrit.server.group.db.GroupsUpdate.getModifiedSubgroups(originalGroup, updatedGroup); java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup.NameKey> previousName = com.google.gerrit.server.group.db.GroupsUpdate.getPreviousNameIfModified(originalGroup, updatedGroup); com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult.Builder resultBuilder = com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult.builder().setGroupUuid(updatedGroup.getGroupUUID()).setGroupId(updatedGroup.getId()).setGroupName(updatedGroup.getNameKey()).setModifiedMembers(modifiedMembers).setModifiedSubgroups(modifiedSubgroups); previousName.ifPresent(resultBuilder::setPreviousGroupName); return java.util.Optional.of(resultBuilder.build()); }",f3467ae3229079ee0d039c89c12a5d055a124ccd,"private java.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDb(com.google.gerrit.server.group.db.GroupConfig groupConfig, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws java.io.IOException { java.util.Optional<com.google.gerrit.server.group.InternalGroup> originalGroup = groupConfig.getLoadedGroup(); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(groupConfig); com.google.gerrit.server.group.InternalGroup updatedGroup = groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""Updated group wasn't automatically loaded"")); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> modifiedMembers = com.google.gerrit.server.group.db.GroupsUpdate.getModifiedMembers(originalGroup, updatedGroup); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> modifiedSubgroups = com.google.gerrit.server.group.db.GroupsUpdate.getModifiedSubgroups(originalGroup, updatedGroup); java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup.NameKey> previousName = com.google.gerrit.server.group.db.GroupsUpdate.getPreviousNameIfModified(originalGroup, updatedGroup); projectCache.evict(allUsersName); com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult.Builder resultBuilder = com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult.builder().setGroupUuid(updatedGroup.getGroupUUID()).setGroupId(updatedGroup.getId()).setGroupName(updatedGroup.getNameKey()).setModifiedMembers(modifiedMembers).setModifiedSubgroups(modifiedSubgroups); previousName.ifPresent(resultBuilder::setPreviousGroupName); return java.util.Optional.of(resultBuilder.build()); }",8f37a1100ac9cec2bf97cf34e0aa1d509f24c15e,2017-11-09 09:16:38,6
138780,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void testCreateGroupWithProperties(boolean writeGroupsToNoteDb) throws java.lang.Exception { com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name(""newGroup""); in.description = ""Test description""; in.visibleToAll = true; in.ownerId = getFromCache(""Administrators"").getGroupUUID().get(); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(in).detail(); assertThat(g.description).isEqualTo(in.description); assertThat(g.options.visibleToAll).isEqualTo(in.visibleToAll); assertThat(g.ownerId).isEqualTo(in.ownerId); if (writeGroupsToNoteDb) { assertGroupOwnerPermissions(g.id, in.ownerId); } }",33b3ad80fd9f65aa2c45d9517bf185d9a06e4ed3,"private void pushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedError) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", ""group.config"", ""some content"").setParents(com.google.common.collect.ImmutableList.of()).to(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name(""foo"")))); if (expectedError != null) { r.assertErrorStatus(expectedError); } else { r.assertOkStatus(); } java.lang.String groupRefName = (com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name(""bar"")); createGroupBranch(project, groupRefName); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + "":groupRef"")); repo.reset(""groupRef""); r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", ""group.config"", ""some content"").to(groupRefName); if (expectedError != null) { r.assertErrorStatus(expectedError); } else { r.assertOkStatus(); } }",58ef34fb0beb95ec1dac151171b98592f48e9723,2017-11-09 09:16:38,6
138780,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test public void createGroup() throws java.lang.Exception { java.lang.String newGroupName = name(""newGroup""); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(newGroupName).get(); com.google.gerrit.acceptance.api.group.GroupAssert.assertGroupInfo(getFromCache(newGroupName), g); }",2010e80fd86c8cb22c1b984454ae9b3c0ebe6aac,@org.junit.Test public void createGroup() throws java.lang.Exception { testCreateGroup(false); },e3c56140b8246c8b0dc8af532d02b2b896fd7855,"@org.junit.Test public void createGroup() throws java.lang.Exception { java.lang.String newGroupName = name(""newGroup""); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(newGroupName).get(); com.google.gerrit.acceptance.api.group.GroupAssert.assertGroupInfo(getFromCache(newGroupName), g); if (groupsInNoteDb()) { assertGroupOwnerPermissions(g.id, g.id); } }",40da6291819442cb1f79bb66f35c26b62aa0c131,2017-11-09 09:16:38,6
138780,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test public void createGroupWithProperties() throws java.lang.Exception { com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name(""newGroup""); in.description = ""Test description""; in.visibleToAll = true; in.ownerId = getFromCache(""Administrators"").getGroupUUID().get(); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(in).detail(); assertThat(g.description).isEqualTo(in.description); assertThat(g.options.visibleToAll).isEqualTo(in.visibleToAll); assertThat(g.ownerId).isEqualTo(in.ownerId); }",ee6c0b82a2c65dcc93a331a78a87657831565864,@org.junit.Test public void createGroupWithProperties() throws java.lang.Exception { testCreateGroupWithProperties(false); },2054fa5357a7e81a334d4ccc5ad5dfb606c3a266,"@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { pushToGroupBranch(allUsers, ""group update not allowed""); }",1290651f7be19cad049fe93bb570b8addf2711e6,2017-11-09 09:16:38,6
138780,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""user.writeGroupsToNoteDb"", value = ""true"") public void createGroupWithWriteToNoteDb() throws java.lang.Exception { testCreateGroup(true); }",6e116476a64d2c37a220af87b811dd2d7f0a7b2a,"@java.lang.SuppressWarnings(""deprecation"") @org.junit.Test public void createGroupWithProperties() throws java.lang.Exception { com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name(""newGroup""); in.description = ""Test description""; in.visibleToAll = true; in.ownerId = getFromCache(""Administrators"").getGroupUUID().get(); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(in).detail(); assertThat(g.description).isEqualTo(in.description); assertThat(g.options.visibleToAll).isEqualTo(in.visibleToAll); assertThat(g.ownerId).isEqualTo(in.ownerId); if (groupsInNoteDb()) { assertGroupOwnerPermissions(g.id, in.ownerId); } }",1ddc1669790fd02973a10513eff1b1541e46c4a0,2017-11-09 09:16:38,6
138780,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test public void groupOwner() throws java.lang.Exception { java.lang.String name = name(""group""); com.google.gerrit.extensions.common.GroupInfo info = gApi.groups().create(name).get(); java.lang.String adminUUID = getFromCache(""Administrators"").getGroupUUID().get(); java.lang.String registeredUUID = SystemGroupBackend.REGISTERED_USERS.get(); assertThat(com.google.gerrit.extensions.restapi.Url.decode(gApi.groups().id(name).owner().id)).isEqualTo(info.id); gApi.groups().id(name).owner(""Registered Users""); assertThat(com.google.gerrit.extensions.restapi.Url.decode(gApi.groups().id(name).owner().id)).isEqualTo(registeredUUID); gApi.groups().id(name).owner(adminUUID); assertThat(com.google.gerrit.extensions.restapi.Url.decode(gApi.groups().id(name).owner().id)).isEqualTo(adminUUID); exception.expect(com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); gApi.groups().id(name).owner(""Non-Existing Group""); }",4f9097d6647be832d6c83eddc7bf9841b1c36cf3,@org.junit.Test public void groupOwner() throws java.lang.Exception { testGroupOwner(false); },c16071f4ea9586b778abfe310e0ddc5b3bb98c6a,"@org.junit.Test public void pushGroupsAccessSectionChangeToAllUsersFails() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(allUsers, RefNames.REFS_CONFIG); java.lang.String config = gApi.projects().name(allUsers.get()).branch(RefNames.REFS_CONFIG).file(ProjectConfig.PROJECT_CONFIG).asString(); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(config); cfg.setString(""access"", ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""foo""), ""push"", ""group Registered Users""); config = cfg.toText(); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Subject"", ProjectConfig.PROJECT_CONFIG, config).to(RefNames.REFS_CONFIG); r.assertErrorStatus(""invalid project configuration""); r.assertMessage(""permissions on refs/groups/ are managed by gerrit and cannot be modified""); }",7c0ad103f6a3b2c0c3e31a874a31835a675b7ae2,2017-11-09 09:16:38,6
139770,javatests_com_google_gerrit_server_git_VersionedMetaDataTest.java,private com.google.gerrit.server.git.VersionedMetaDataTest.MyMetaData load(int expectedValue) throws java.lang.Exception { com.google.gerrit.server.git.VersionedMetaDataTest.MyMetaData d = new com.google.gerrit.server.git.VersionedMetaDataTest.MyMetaData(); d.load(repo); assertThat(d.getValue()).isEqualTo(expectedValue); return d; },acaf464b7de75ed2e51a845e2610a5f4e7ede0f7,"private com.google.gerrit.server.git.VersionedMetaDataTest.MyMetaData load(int expectedValue) throws java.lang.Exception { return load(""refs/meta/config"", expectedValue); }",7a5e29452ec3954a17b055d8561d527ab715b25d,"private com.google.gerrit.server.git.VersionedMetaDataTest.MyMetaData load(int expectedValue) throws java.lang.Exception { return load(com.google.gerrit.server.git.VersionedMetaDataTest.DEFAULT_REF, expectedValue); }",f302b493753cb2ccf70b229453a65faa2af60888,2017-11-09 18:04:17,3
139770,javatests_com_google_gerrit_server_git_VersionedMetaDataTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void sharedBatchRefUpdate() throws java.lang.Exception { com.google.gerrit.server.git.VersionedMetaDataTest.MyMetaData d1 = load(""refs/meta/1"", 0); com.google.gerrit.server.git.VersionedMetaDataTest.MyMetaData d2 = load(""refs/meta/2"", 0); org.eclipse.jgit.lib.BatchRefUpdate bru = repo.getRefDatabase().newBatchUpdate(); try (com.google.gerrit.server.git.VersionedMetaData.BatchMetaDataUpdate batch1 = d1.openUpdate(newMetaDataUpdate(bru));com.google.gerrit.server.git.VersionedMetaData.BatchMetaDataUpdate batch2 = d2.openUpdate(newMetaDataUpdate(bru))) { d1.setIncrement(1); batch1.write(d1, newCommitBuilder()); d2.setIncrement(2); batch2.write(d2, newCommitBuilder()); d1.setIncrement(2); batch1.write(d1, newCommitBuilder()); d2.setIncrement(1); batch2.write(d2, newCommitBuilder()); batch1.commit(); batch2.commit(); } assertMyMetaData(d1.getRefName(), 0); assertMyMetaData(d2.getRefName(), 0); assertThat(bru.getCommands().stream().map(ReceiveCommand::getRefName)).containsExactly(""refs/meta/1"", ""refs/meta/2""); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { com.google.gerrit.server.update.RefUpdateUtil.executeChecked(bru, rw); } assertMyMetaData(d1.getRefName(), 3, ""Increment conf.value by 1"", ""Increment conf.value by 2""); assertMyMetaData(d2.getRefName(), 3, ""Increment conf.value by 2"", ""Increment conf.value by 1""); }",c9cc5e0e080ec59e6366ef095c654b0a9d5f842b,"@org.junit.Test public void sharedBatchRefUpdate() throws java.lang.Exception { com.google.gerrit.server.git.VersionedMetaDataTest.MyMetaData d1 = load(""refs/meta/1"", 0); com.google.gerrit.server.git.VersionedMetaDataTest.MyMetaData d2 = load(""refs/meta/2"", 0); org.eclipse.jgit.lib.BatchRefUpdate bru = repo.getRefDatabase().newBatchUpdate(); try (com.google.gerrit.server.git.VersionedMetaData.BatchMetaDataUpdate batch1 = d1.openUpdate(newMetaDataUpdate(bru));com.google.gerrit.server.git.VersionedMetaData.BatchMetaDataUpdate batch2 = d2.openUpdate(newMetaDataUpdate(bru))) { d1.setIncrement(1); batch1.write(d1, newCommitBuilder()); d2.setIncrement(2000); batch2.write(d2, newCommitBuilder()); d1.setIncrement(3); batch1.write(d1, newCommitBuilder()); d2.setIncrement(4000); batch2.write(d2, newCommitBuilder()); batch1.commit(); batch2.commit(); } assertMyMetaData(d1.getRefName(), 0); assertMyMetaData(d2.getRefName(), 0); assertThat(bru.getCommands().stream().map(ReceiveCommand::getRefName)).containsExactly(""refs/meta/1"", ""refs/meta/2""); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { com.google.gerrit.server.update.RefUpdateUtil.executeChecked(bru, rw); } assertMyMetaData(d1.getRefName(), 4, ""Increment conf.value by 1"", ""Increment conf.value by 3""); assertMyMetaData(d2.getRefName(), 6000, ""Increment conf.value by 2000"", ""Increment conf.value by 4000""); }",33efe17341bb6cc10bfe8b80cfa897fe77dca8d3,2017-11-09 18:04:17,3
134550,src_main_java_com_googlesource_gerrit_plugins_supermanifest_JiriUpdater.java,"@java.lang.Override public void update(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader, com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c, java.lang.String srcRef) throws java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Repository srcRepo = reader.openRepository(c.getSrcRepoKey().toString()); org.eclipse.jgit.lib.Repository destRepo = reader.openRepository(c.getDestRepoKey().toString()); com.googlesource.gerrit.plugins.supermanifest.JiriProjects projects = com.googlesource.gerrit.plugins.supermanifest.JiriManifestParser.getProjects(srcRepo, srcRef, c.getXmlPath()); java.lang.String targetRef = (c.getDestBranch().equals(""*"")) ? srcRef : (REFS_HEADS) + (c.getDestBranch()); updateSubmodules(destRepo, targetRef, java.net.URI.create(((c.getDestRepoKey().toString()) + ""/"")), projects, reader); }",01467bd6dbac7e0b19f750210d9bc9ed0a9edca7,"@java.lang.Override public void update(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader, com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c, java.lang.String srcRef) throws java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Repository destRepo = reader.openRepository(c.getDestRepoKey().toString()); com.googlesource.gerrit.plugins.supermanifest.JiriProjects projects = com.googlesource.gerrit.plugins.supermanifest.JiriManifestParser.getProjects(reader, c.getSrcRepoKey().toString(), srcRef, c.getXmlPath()); java.lang.String targetRef = (c.getDestBranch().equals(""*"")) ? srcRef : (REFS_HEADS) + (c.getDestBranch()); updateSubmodules(destRepo, targetRef, java.net.URI.create(((c.getDestRepoKey().toString()) + ""/"")), projects, reader); }",c9be93334cf552b8dbaf9ac99be6a1c66ce29fb1,"@java.lang.Override public void update(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader, com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c, java.lang.String srcRef) throws java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository destRepo = reader.openRepository(c.getDestRepoKey().toString())) { com.googlesource.gerrit.plugins.supermanifest.JiriProjects projects = com.googlesource.gerrit.plugins.supermanifest.JiriManifestParser.getProjects(reader, c.getSrcRepoKey().toString(), srcRef, c.getXmlPath()); java.lang.String targetRef = (c.getDestBranch().equals(""*"")) ? srcRef : (REFS_HEADS) + (c.getDestBranch()); updateSubmodules(destRepo, targetRef, java.net.URI.create(((c.getDestRepoKey().toString()) + ""/"")), projects, reader); } }",438e7a6dbb7ce775112cebbbb0e032021b908c90,2017-11-09 23:39:17,8
139750,src_main_java_com_googlesource_gerrit_plugins_gitiles_FilteredRepository.java,"com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectControl ctl = projectControlFactory.controlFor(name, userProvider.get()); if (ctl.getProject().getState().equals(ProjectState.HIDDEN)) { throw new com.google.gerrit.server.project.NoSuchProjectException(name); } return new com.googlesource.gerrit.plugins.gitiles.FilteredRepository(ctl, repoManager.openRepository(name), visibleRefFilterFactory, permissionBackend); }",7dfff7addd6818a1ce9bb16c3437e5bf8cc0e345,"com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(name); if ((projectState.getProject().getState()) == (com.google.gerrit.server.project.ProjectState.HIDDEN)) { throw new com.google.gerrit.server.project.NoSuchProjectException(name); } return new com.googlesource.gerrit.plugins.gitiles.FilteredRepository(projectState, userProvider.get(), repoManager.openRepository(name), visibleRefFilterFactory, permissionBackend); }",51a6ec5f5fe4013109c255ae53b6f44290f55a52,"com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(name); if (!(projectState.getProject().getState().permitsRead())) { throw new com.google.gerrit.server.project.NoSuchProjectException(name); } return new com.googlesource.gerrit.plugins.gitiles.FilteredRepository(projectState, userProvider.get(), repoManager.openRepository(name), visibleRefFilterFactory, permissionBackend); }",f6a91a4c4cce60dd55596f5c6a733bdcb7695ab4,2017-11-10 07:07:13,4
139730,javatests_com_google_gerrit_acceptance_rest_project_CreateBranchIT.java,@org.junit.Test public void createBranchByAdmin() throws java.lang.Exception { assertCreateSucceeds(); },cdba120278bbac61ac9cd3c848435c2bdbe969c9,@org.junit.Test public void createBranchByAdmin() throws java.lang.Exception { assertCreateSucceeds(branch); },183306f7b28f5ee1fb3205148d34afe7c0f6687b,@org.junit.Test public void createBranchByAdmin() throws java.lang.Exception { assertCreateSucceeds(testBranch); },acac053917f50806e454397d52e1a73d71ca79af,2017-11-10 09:13:32,3
139730,javatests_com_google_gerrit_acceptance_rest_project_CreateBranchIT.java,"@org.junit.Test public void createBranchByAdminCreateReferenceBlocked_Forbidden() throws java.lang.Exception { blockCreateReference(); assertCreateFails(com.google.gerrit.extensions.restapi.AuthException.class, ""create not permitted for refs/heads/test""); }",ebed65f673e6a97a9267e1c46af2c14966e8865f,"@org.junit.Test public void createBranchByAdminCreateReferenceBlocked_Forbidden() throws java.lang.Exception { blockCreateReference(); assertCreateFails(branch, com.google.gerrit.extensions.restapi.AuthException.class, ""create not permitted for refs/heads/test""); }",a975707dd7e8b44c1893fb8d650ad473fb07cb82,"@org.junit.Test public void createBranchByAdminCreateReferenceBlocked_Forbidden() throws java.lang.Exception { blockCreateReference(); assertCreateFails(testBranch, com.google.gerrit.extensions.restapi.AuthException.class, ""create not permitted for refs/heads/test""); }",8f79ee652ee2b921e160da527d19adf88114a716,2017-11-10 09:13:32,3
139730,javatests_com_google_gerrit_acceptance_rest_project_CreateBranchIT.java,"@org.junit.Test public void createBranchByProjectOwnerCreateReferenceBlocked_Forbidden() throws java.lang.Exception { grantOwner(); blockCreateReference(); setApiUser(user); assertCreateFails(com.google.gerrit.extensions.restapi.AuthException.class, ""create not permitted for refs/heads/test""); }",f2c508376b4059c4054efd3e8e3679520c7e684a,"@org.junit.Test public void createBranchByProjectOwnerCreateReferenceBlocked_Forbidden() throws java.lang.Exception { grantOwner(); blockCreateReference(); setApiUser(user); assertCreateFails(branch, com.google.gerrit.extensions.restapi.AuthException.class, ""create not permitted for refs/heads/test""); }",e11ca3358151a9d138589edbedab3a75f0092ec4,"@org.junit.Test public void createBranchByProjectOwnerCreateReferenceBlocked_Forbidden() throws java.lang.Exception { grantOwner(); blockCreateReference(); setApiUser(user); assertCreateFails(testBranch, com.google.gerrit.extensions.restapi.AuthException.class, ""create not permitted for refs/heads/test""); }",27acf988c40667e4439d3449516bbdc0836fb5b0,2017-11-10 09:13:32,3
139730,javatests_com_google_gerrit_acceptance_rest_project_CreateBranchIT.java,@org.junit.Test public void createBranchByProjectOwner() throws java.lang.Exception { grantOwner(); setApiUser(user); assertCreateSucceeds(); },38745ff7d6ce58b83f50f086aead267523f23af1,@org.junit.Test public void createBranchByProjectOwner() throws java.lang.Exception { grantOwner(); setApiUser(user); assertCreateSucceeds(branch); },a118c5a18d4293c5fd4394e30dc4491f954d0378,@org.junit.Test public void createBranchByProjectOwner() throws java.lang.Exception { grantOwner(); setApiUser(user); assertCreateSucceeds(testBranch); },dfe9d49bc731bc7968e58341a254272b726b9dbf,2017-11-10 09:13:32,3
139730,javatests_com_google_gerrit_acceptance_rest_project_CreateBranchIT.java,"@org.junit.Test public void createBranch_Forbidden() throws java.lang.Exception { setApiUser(user); assertCreateFails(com.google.gerrit.extensions.restapi.AuthException.class, ""create not permitted for refs/heads/test""); }",89d9203c1feabcec9662db1e3a76e3a7b7aaa979,"@org.junit.Test public void createBranch_Forbidden() throws java.lang.Exception { setApiUser(user); assertCreateFails(branch, com.google.gerrit.extensions.restapi.AuthException.class, ""create not permitted for refs/heads/test""); }",bc926070131c5e838315d58073477c47af1892e0,"@org.junit.Test public void createBranch_Forbidden() throws java.lang.Exception { setApiUser(user); assertCreateFails(testBranch, com.google.gerrit.extensions.restapi.AuthException.class, ""create not permitted for refs/heads/test""); }",5f90db8add4f588461c984572251925f9e102240,2017-11-10 09:13:32,3
139730,javatests_com_google_gerrit_acceptance_rest_project_CreateBranchIT.java,@org.junit.Test public void branchAlreadyExists_Conflict() throws java.lang.Exception { assertCreateSucceeds(); assertCreateFails(com.google.gerrit.extensions.restapi.ResourceConflictException.class); },385d9cd71e0fac8120de96a1193ba340787d3bc7,"@org.junit.Test public void branchAlreadyExists_Conflict() throws java.lang.Exception { assertCreateSucceeds(branch); assertCreateFails(branch, com.google.gerrit.extensions.restapi.ResourceConflictException.class); }",139874d23bafa7b96b8e2356ac8b2749f82814ee,"@org.junit.Test public void branchAlreadyExists_Conflict() throws java.lang.Exception { assertCreateSucceeds(testBranch); assertCreateFails(testBranch, com.google.gerrit.extensions.restapi.ResourceConflictException.class); }",57785f4cc3f04e138c8b463aef774f65caa0f251,2017-11-10 09:13:32,3
139733,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @com.google.gerrit.acceptance.Sandboxed public void cannotDeleteGroupBranch() throws java.lang.Exception { assume().that(cfg.getBoolean(""user"", ""writeGroupsToNoteDb"", false)).isTrue(); grant(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.DELETE, true, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); com.google.gerrit.server.group.InternalGroup adminGroup = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""Administrators"")).orElse(null); assertThat(adminGroup).isNotNull(); java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroup.getGroupUUID()); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); org.eclipse.jgit.transport.PushResult r = com.google.gerrit.acceptance.GitUtil.deleteRef(allUsersRepo, groupRef); org.eclipse.jgit.transport.RemoteRefUpdate refUpdate = r.getRemoteUpdate(groupRef); assertThat(refUpdate.getStatus()).isEqualTo(RemoteRefUpdate.Status.REJECTED_OTHER_REASON); assertThat(refUpdate.getMessage()).contains(""Not allowed to delete group branch.""); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNotNull(); } }",b832052289c5661def740fe1c62f181145a38560,"@org.junit.Test @com.google.gerrit.acceptance.Sandboxed public void cannotDeleteGroupBranch() throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); grant(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.DELETE, true, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); com.google.gerrit.server.group.InternalGroup adminGroup = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""Administrators"")).orElse(null); assertThat(adminGroup).isNotNull(); java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroup.getGroupUUID()); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); org.eclipse.jgit.transport.PushResult r = com.google.gerrit.acceptance.GitUtil.deleteRef(allUsersRepo, groupRef); org.eclipse.jgit.transport.RemoteRefUpdate refUpdate = r.getRemoteUpdate(groupRef); assertThat(refUpdate.getStatus()).isEqualTo(RemoteRefUpdate.Status.REJECTED_OTHER_REASON); assertThat(refUpdate.getMessage()).contains(""Not allowed to delete group branch.""); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNotNull(); } }",bffbd87000f56663cccf43cb92d2625dc3e7c9bf,2017-11-10 10:50:53,4
140711,java_com_google_gerrit_server_account_GroupCacheImpl.java,"@java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.GroupCacheImpl.BYID_NAME, AccountGroup.Id.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.server.group.InternalGroup>>() {}).loader(com.google.gerrit.server.account.GroupCacheImpl.ByIdLoader.class); cache(com.google.gerrit.server.account.GroupCacheImpl.BYNAME_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.server.group.InternalGroup>>() {}).loader(com.google.gerrit.server.account.GroupCacheImpl.ByNameLoader.class); cache(com.google.gerrit.server.account.GroupCacheImpl.BYUUID_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.server.group.InternalGroup>>() {}).loader(com.google.gerrit.server.account.GroupCacheImpl.ByUUIDLoader.class); bind(com.google.gerrit.server.account.GroupCacheImpl.class); bind(com.google.gerrit.server.account.GroupCache.class).to(com.google.gerrit.server.account.GroupCacheImpl.class); }",b36f156921369db6fc019565e82f0423824a2e5d,"@java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.GroupCacheImpl.BYID_NAME, AccountGroup.Id.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.server.group.InternalGroup>>() {}).maximumWeight(4096).loader(com.google.gerrit.server.account.GroupCacheImpl.ByIdLoader.class); cache(com.google.gerrit.server.account.GroupCacheImpl.BYNAME_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.server.group.InternalGroup>>() {}).maximumWeight(4096).loader(com.google.gerrit.server.account.GroupCacheImpl.ByNameLoader.class); cache(com.google.gerrit.server.account.GroupCacheImpl.BYUUID_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.server.group.InternalGroup>>() {}).maximumWeight(4096).loader(com.google.gerrit.server.account.GroupCacheImpl.ByUUIDLoader.class); bind(com.google.gerrit.server.account.GroupCacheImpl.class); bind(com.google.gerrit.server.account.GroupCache.class).to(com.google.gerrit.server.account.GroupCacheImpl.class); }",f6bd442f3c15c9e6c79c32caaba99b3bbdc27419,"@java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.GroupCacheImpl.BYID_NAME, AccountGroup.Id.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.server.group.InternalGroup>>() {}).maximumWeight(java.lang.Long.MAX_VALUE).loader(com.google.gerrit.server.account.GroupCacheImpl.ByIdLoader.class); cache(com.google.gerrit.server.account.GroupCacheImpl.BYNAME_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.server.group.InternalGroup>>() {}).maximumWeight(java.lang.Long.MAX_VALUE).loader(com.google.gerrit.server.account.GroupCacheImpl.ByNameLoader.class); cache(com.google.gerrit.server.account.GroupCacheImpl.BYUUID_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.server.group.InternalGroup>>() {}).maximumWeight(java.lang.Long.MAX_VALUE).loader(com.google.gerrit.server.account.GroupCacheImpl.ByUUIDLoader.class); bind(com.google.gerrit.server.account.GroupCacheImpl.class); bind(com.google.gerrit.server.account.GroupCache.class).to(com.google.gerrit.server.account.GroupCacheImpl.class); }",ebadc280915aadbac8092fbcf8b6ca091c1503e2,2017-11-13 23:54:20,3
140711,java_com_google_gerrit_server_account_GroupCacheImpl.java,"public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.GroupCacheImpl.BYID_NAME, AccountGroup.Id.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.server.group.InternalGroup>>() {}).loader(com.google.gerrit.server.account.GroupCacheImpl.ByIdLoader.class); cache(com.google.gerrit.server.account.GroupCacheImpl.BYNAME_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.server.group.InternalGroup>>() {}).loader(com.google.gerrit.server.account.GroupCacheImpl.ByNameLoader.class); cache(com.google.gerrit.server.account.GroupCacheImpl.BYUUID_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.server.group.InternalGroup>>() {}).loader(com.google.gerrit.server.account.GroupCacheImpl.ByUUIDLoader.class); bind(com.google.gerrit.server.account.GroupCacheImpl.class); bind(com.google.gerrit.server.account.GroupCache.class).to(com.google.gerrit.server.account.GroupCacheImpl.class); } }; }",64a822c0f7c761f64d0be63b5603845896ebeaba,"public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.GroupCacheImpl.BYID_NAME, AccountGroup.Id.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.server.group.InternalGroup>>() {}).maximumWeight(4096).loader(com.google.gerrit.server.account.GroupCacheImpl.ByIdLoader.class); cache(com.google.gerrit.server.account.GroupCacheImpl.BYNAME_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.server.group.InternalGroup>>() {}).maximumWeight(4096).loader(com.google.gerrit.server.account.GroupCacheImpl.ByNameLoader.class); cache(com.google.gerrit.server.account.GroupCacheImpl.BYUUID_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.server.group.InternalGroup>>() {}).maximumWeight(4096).loader(com.google.gerrit.server.account.GroupCacheImpl.ByUUIDLoader.class); bind(com.google.gerrit.server.account.GroupCacheImpl.class); bind(com.google.gerrit.server.account.GroupCache.class).to(com.google.gerrit.server.account.GroupCacheImpl.class); } }; }",330432cdb342c06ef40cf31a8603bd3d47115b4c,"public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.GroupCacheImpl.BYID_NAME, AccountGroup.Id.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.server.group.InternalGroup>>() {}).maximumWeight(java.lang.Long.MAX_VALUE).loader(com.google.gerrit.server.account.GroupCacheImpl.ByIdLoader.class); cache(com.google.gerrit.server.account.GroupCacheImpl.BYNAME_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.server.group.InternalGroup>>() {}).maximumWeight(java.lang.Long.MAX_VALUE).loader(com.google.gerrit.server.account.GroupCacheImpl.ByNameLoader.class); cache(com.google.gerrit.server.account.GroupCacheImpl.BYUUID_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.server.group.InternalGroup>>() {}).maximumWeight(java.lang.Long.MAX_VALUE).loader(com.google.gerrit.server.account.GroupCacheImpl.ByUUIDLoader.class); bind(com.google.gerrit.server.account.GroupCacheImpl.class); bind(com.google.gerrit.server.account.GroupCache.class).to(com.google.gerrit.server.account.GroupCacheImpl.class); } }; }",daa4b8b86b6d7b93fdab38f643e4d02eab53f77a,2017-11-13 23:54:20,3
140950,src_main_java_com_ericsson_gerrit_plugins_highavailability_peers_jgroups_JGroupsPeerInfoProvider.java,"@java.lang.Override public void viewAccepted(org.jgroups.View view) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info(""viewAccepted(view: {}) called"", view); synchronized(this) { if ((view.getMembers().size()) > 2) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.warn(""{} members joined the jgroups channel {}. Only two members are supported. Members: {}"", view.getMembers().size(), channel.getName(), view.getMembers()); } if (((peerAddress) != null) && (!(view.getMembers().contains(peerAddress)))) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info(""viewAccepted(): removed peerInfo""); peerAddress = null; peerInfo = java.util.Optional.empty(); } } if ((view.size()) > 1) { try { channel.send(new org.jgroups.Message(null, myUrl)); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error(""Sending a message over jgroups channel {} failed"", jgroupsConfig.clusterName(), e); } } }",be94549432f3b1da689841668b7bd87761fc67b6,"@java.lang.Override public void viewAccepted(org.jgroups.View view) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info(""viewAccepted(view: {}) called"", view); synchronized(this) { if ((view.getMembers().size()) > 2) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.warn(""{} members joined the jgroups cluster {}. Only two members are supported. Members: {}"", view.getMembers().size(), jgroupsConfig.clusterName(), view.getMembers()); } if (((peerAddress) != null) && (!(view.getMembers().contains(peerAddress)))) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info(""viewAccepted(): removed peerInfo""); peerAddress = null; peerInfo = java.util.Optional.empty(); } } if ((view.size()) > 1) { try { channel.send(new org.jgroups.Message(null, myUrl)); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error(""Sending a message over channel {} to cluster {} failed"", channel.getName(), jgroupsConfig.clusterName(), e); } } }",a32742cb02c2dbc830e5118395eed88bad426147,"@java.lang.Override public void viewAccepted(org.jgroups.View view) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info(""viewAccepted(view: {}) called"", view); synchronized(this) { if ((view.getMembers().size()) > 2) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.warn((""{} members joined the jgroups cluster {} ({}). "" + "" Only two members are supported. Members: {}""), view.getMembers().size(), jgroupsConfig.clusterName(), channel.getName(), view.getMembers()); } if (((peerAddress) != null) && (!(view.getMembers().contains(peerAddress)))) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info(""viewAccepted(): removed peerInfo""); peerAddress = null; peerInfo = java.util.Optional.empty(); } } if ((view.size()) > 1) { try { channel.send(new org.jgroups.Message(null, myUrl)); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error(""Sending a message over channel {} to cluster {} failed"", channel.getName(), jgroupsConfig.clusterName(), e); } } }",1b7a197c637e690a6a1bf63a9fcab42feefaceb3,2017-11-14 13:12:43,4
140950,src_main_java_com_ericsson_gerrit_plugins_highavailability_peers_jgroups_JGroupsPeerInfoProvider.java,"public void connect() { try { channel = new org.jgroups.JChannel(); java.util.Optional<java.net.InetAddress> address = finder.findAddress(); if (address.isPresent()) { channel.getProtocolStack().getTransport().setBindAddress(address.get()); } channel.setReceiver(this); channel.setDiscardOwnMessages(true); channel.connect(jgroupsConfig.clusterName()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info(""Succesfully joined jgroups channel {}"", channel); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error(""joining jgroups channel {} failed"", e); } }",90bf2486f5441fad8e9dd24b422237490ba3ae7e,"public void connect() { try { channel = new org.jgroups.JChannel(); java.util.Optional<java.net.InetAddress> address = finder.findAddress(); if (address.isPresent()) { channel.getProtocolStack().getTransport().setBindAddress(address.get()); } channel.setReceiver(this); channel.setDiscardOwnMessages(true); channel.connect(jgroupsConfig.clusterName()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info(""Channel {} succesfully joined jgroups cluster {}"", channel.getName(), jgroupsConfig.clusterName()); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error(""joining cluster {} for channel {} failed"", jgroupsConfig.clusterName(), channel.getName(), e); } }",1265808eb9e9cf8bed1e0ca90e54c124b2c241dd,"public void connect() { try { channel = new org.jgroups.JChannel(); java.util.Optional<java.net.InetAddress> address = finder.findAddress(); if (address.isPresent()) { channel.getProtocolStack().getTransport().setBindAddress(address.get()); } channel.setReceiver(this); channel.setDiscardOwnMessages(true); channel.connect(jgroupsConfig.clusterName()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info(""Channel {} successfully joined jgroups cluster {}"", channel.getName(), jgroupsConfig.clusterName()); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error(""joining cluster {} for channel {} failed"", jgroupsConfig.clusterName(), channel.getName(), e); } }",a0c5c615186fb0e461e53577fea0ed38fadd334c,2017-11-14 13:12:43,4
141130,src_main_java_com_ericsson_gerrit_plugins_highavailability_websession_file_FileBasedWebsessionCache.java,@java.lang.Override public void cleanUp() { for (java.nio.file.Path path : listFiles()) { com.google.gerrit.httpd.WebSessionManager.Val val = readFile(path); if (val != null) { org.joda.time.DateTime expires = new org.joda.time.DateTime(val.getExpiresAt()); if (expires.isBefore(new org.joda.time.DateTime())) { deleteFile(path); } } } },7c30943432b9ef80d72afaea77ec3e3a39e0664a,@java.lang.Override public void cleanUp() { for (java.nio.file.Path path : listFiles()) { com.google.gerrit.httpd.WebSessionManager.Val val = readFile(path); if (val != null) { java.time.Instant expires = java.time.Instant.ofEpochMilli(val.getExpiresAt()); if (expires.isBefore(java.time.Instant.now())) { deleteFile(path); } } } },eb3650dc29766910bb7ee35af5481e41f2319e59,@java.lang.Override public void cleanUp() { for (java.nio.file.Path path : listFiles()) { com.google.gerrit.httpd.WebSessionManager.Val val = readFile(path); if (val != null) { java.time.Instant expires = java.time.Instant.ofEpochMilli(val.getExpiresAt()); if (expires.isBefore(java.time.Instant.ofEpochMilli(com.google.gerrit.common.TimeUtil.nowMs()))) { deleteFile(path); } } } },c888ac5cd67d1aaaa3911b55528e7951f84a65db,2017-11-14 15:03:58,2
140193,javatests_com_google_gerrit_server_index_change_FakeChangeIndex.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public <V> java.util.Collection<V> readField(com.google.gerrit.index.FieldDef<com.google.gerrit.server.query.change.ChangeData, V> field) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(); }",c00b6b4093e3e712d5619ccb2a62b03ae238d708,"@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.index.query.FieldBundle> readRaw() throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(""not implemented""); }",4da288593b03754b0b560d92f3ae78b191e5c198,2017-11-14 15:57:23,5
140193,java_com_google_gerrit_index_Index.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"default <T> java.util.Collection<T> getField(K key, com.google.gerrit.index.QueryOptions opts, com.google.gerrit.index.FieldDef<V, T> fieldDef) throws java.io.IOException { opts = opts.withStart(0).withLimit(2); try { return getSource(keyPredicate(key), opts).readField(fieldDef); } catch (com.google.gerrit.index.query.QueryParseException e) { throw new java.io.IOException(""Unexpected QueryParseException during get()"", e); } catch (com.google.gwtorm.server.OrmException e) { throw new java.io.IOException(e); } }",1463b1d3949da386a7929ec04d79e5b9aaf0e3ec,"default java.util.Optional<com.google.gerrit.index.query.FieldBundle> getRaw(K key, com.google.gerrit.index.QueryOptions opts) throws java.io.IOException { opts = opts.withStart(0).withLimit(2); java.util.List<com.google.gerrit.index.query.FieldBundle> results; try { results = getSource(keyPredicate(key), opts).readRaw().toList(); } catch (com.google.gerrit.index.query.QueryParseException e) { throw new java.io.IOException(""Unexpected QueryParseException during get()"", e); } catch (com.google.gwtorm.server.OrmException e) { throw new java.io.IOException(e); } if ((results.size()) > 1) { throw new java.io.IOException((((""Multiple results found in index for key "" + key) + "": "") + results)); } return results.stream().findFirst(); }",a9cbc2aaf65bb3e8bc32d4019ab0488d82f15c93,2017-11-14 15:57:23,5
140193,java_com_google_gerrit_index_query_AndSource.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public <V> java.util.Collection<V> readField(com.google.gerrit.index.FieldDef<T, V> field) throws com.google.gwtorm.server.OrmException { return null; }",7f89af9817529c27d133f9622ba5454909bce696,"@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.index.query.FieldBundle> readRaw() throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(""not implemented""); }",4da288593b03754b0b560d92f3ae78b191e5c198,2017-11-14 15:57:23,5
140193,java_com_google_gerrit_elasticsearch_ElasticProjectIndex.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public <V> java.util.Collection<V> readField(com.google.gerrit.index.FieldDef<com.google.gerrit.server.project.ProjectData, V> field) throws com.google.gwtorm.server.OrmException { return null; }",e98e8082bd948a646fa730915b883548f09ba394,"@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.index.query.FieldBundle> readRaw() throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(""not implemented""); }",4da288593b03754b0b560d92f3ae78b191e5c198,2017-11-14 15:57:23,5
140193,java_com_google_gerrit_index_query_DataSource.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"<V> java.util.Collection<V> readField(com.google.gerrit.index.FieldDef<T, V> field) throws com.google.gwtorm.server.OrmException;",8a70d79e8c583cf6f8d338432c43d5ede1d045bd,com.google.gwtorm.server.ResultSet<com.google.gerrit.index.query.FieldBundle> readRaw() throws com.google.gwtorm.server.OrmException;,64c500ffa70444d0164bc7988e1232a8729786e9,2017-11-14 15:57:23,5
140193,java_com_google_gerrit_index_IndexedQuery.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public <V> java.util.Collection<V> readField(com.google.gerrit.index.FieldDef<T, V> field) throws com.google.gwtorm.server.OrmException { return source.readField(field); }",260b463a3cdc638ac6b324fa234a6686f09b213f,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.index.query.FieldBundle> readRaw() throws com.google.gwtorm.server.OrmException { return source.readRaw(); },6e14f848562f0fe059a5bbc6b4af77c0b79eec24,2017-11-14 15:57:23,5
140712,javatests_com_google_gerrit_acceptance_git_RefAdvertisementIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void advertisedReferencesOmitUserBranchedOfOtherUsers() throws java.lang.Exception { allow(allUsersName, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + ""*""), Permission.READ, com.google.gerrit.acceptance.git.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<?> userTestRepository = cloneProject(allUsers, user); try (org.eclipse.jgit.api.Git git = userTestRepository.git()) { java.util.List<java.lang.String> refs = git.lsRemote().call().stream().map(Ref::getName).collect(java.util.stream.Collectors.toList()); java.util.List<java.lang.String> userRefs = refs.stream().filter(RefNames::isRefsUsers).collect(java.util.stream.Collectors.toList()); assertThat(userRefs).containsExactly(RefNames.REFS_USERS_SELF, com.google.gerrit.reviewdb.client.RefNames.refsUsers(user.id)); } }",24163836fcffbfb0783be5158d3c67cd362b08ca,"@org.junit.Test public void advertisedReferencesOmitUserBranchesOfOtherUsers() throws java.lang.Exception { allow(allUsersName, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + ""*""), Permission.READ, com.google.gerrit.acceptance.git.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<?> userTestRepository = cloneProject(allUsers, user); try (org.eclipse.jgit.api.Git git = userTestRepository.git()) { assertThat(getUserRefs(git)).containsExactly(RefNames.REFS_USERS_SELF, com.google.gerrit.reviewdb.client.RefNames.refsUsers(user.id)); } }",05048f7de38c20d0bd474126899489cdc484c26d,2017-11-15 09:00:29,7
140712,javatests_com_google_gerrit_acceptance_git_RefAdvertisementIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void advertisedReferencesIncludeAllUserBranchesWithAccessDatabase() throws java.lang.Exception { allow(allUsersName, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + ""*""), Permission.READ, com.google.gerrit.acceptance.git.REGISTERED_USERS); allowGlobalCapabilities(com.google.gerrit.acceptance.git.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); try { org.eclipse.jgit.junit.TestRepository<?> userTestRepository = cloneProject(allUsers, user); try (org.eclipse.jgit.api.Git git = userTestRepository.git()) { java.util.List<java.lang.String> refs = git.lsRemote().call().stream().map(Ref::getName).collect(java.util.stream.Collectors.toList()); java.util.List<java.lang.String> userRefs = refs.stream().filter(RefNames::isRefsUsers).collect(java.util.stream.Collectors.toList()); assertThat(userRefs).containsExactly(RefNames.REFS_USERS_SELF, com.google.gerrit.reviewdb.client.RefNames.refsUsers(user.id), com.google.gerrit.reviewdb.client.RefNames.refsUsers(admin.id)); } } finally { removeGlobalCapabilities(com.google.gerrit.acceptance.git.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); } }",55dda14b6bbaf38a5e66c013b63bd215a745f351,"@org.junit.Test public void advertisedReferencesIncludeAllUserBranchesWithAccessDatabase() throws java.lang.Exception { allowGlobalCapabilities(com.google.gerrit.acceptance.git.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); try { org.eclipse.jgit.junit.TestRepository<?> userTestRepository = cloneProject(allUsers, user); try (org.eclipse.jgit.api.Git git = userTestRepository.git()) { assertThat(getUserRefs(git)).containsExactly(com.google.gerrit.reviewdb.client.RefNames.refsUsers(user.id), com.google.gerrit.reviewdb.client.RefNames.refsUsers(admin.id)); } } finally { removeGlobalCapabilities(com.google.gerrit.acceptance.git.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); } }",a4ae5ec8252dfccbcc7a79fd9a9379911f064361,2017-11-15 09:00:29,7
140553,java_com_google_gerrit_gpg_api_GpgApiModule.java,"@java.lang.Override protected void configure() { if (!(enabled)) { bind(com.google.gerrit.server.api.accounts.GpgApiAdapter.class).to(com.google.gerrit.gpg.api.GpgApiModule.NoGpgApi.class); return; } bind(com.google.gerrit.server.api.accounts.GpgApiAdapter.class).to(com.google.gerrit.gpg.api.GpgApiAdapterImpl.class); factory(GpgKeyApiImpl.Factory.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.gpg.api.GPG_KEY_KIND); child(com.google.gerrit.gpg.api.ACCOUNT_KIND, ""gpgkeys"").to(com.google.gerrit.gpg.server.GpgKeys.class); post(com.google.gerrit.gpg.api.ACCOUNT_KIND, ""gpgkeys"").to(com.google.gerrit.gpg.server.PostGpgKeys.class); get(com.google.gerrit.gpg.api.GPG_KEY_KIND).to(GpgKeys.Get.class); delete(com.google.gerrit.gpg.api.GPG_KEY_KIND).to(com.google.gerrit.gpg.server.DeleteGpgKey.class); }",331d4da174caa81d0ddbd6a013d9442778b763c3,"@java.lang.Override protected void configure() { if (!(enabled)) { bind(com.google.gerrit.server.GpgApiAdapter.class).to(com.google.gerrit.gpg.api.GpgApiModule.NoGpgApi.class); return; } bind(com.google.gerrit.server.GpgApiAdapter.class).to(com.google.gerrit.gpg.api.GpgApiAdapterImpl.class); factory(GpgKeyApiImpl.Factory.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.gpg.api.GPG_KEY_KIND); child(com.google.gerrit.gpg.api.ACCOUNT_KIND, ""gpgkeys"").to(com.google.gerrit.gpg.server.GpgKeys.class); post(com.google.gerrit.gpg.api.ACCOUNT_KIND, ""gpgkeys"").to(com.google.gerrit.gpg.server.PostGpgKeys.class); get(com.google.gerrit.gpg.api.GPG_KEY_KIND).to(GpgKeys.Get.class); delete(com.google.gerrit.gpg.api.GPG_KEY_KIND).to(com.google.gerrit.gpg.server.DeleteGpgKey.class); }",5f3232e486d7df62dc2ea908a725ee066eb6139a,"@java.lang.Override protected void configure() { if (!(enabled)) { bind(com.google.gerrit.server.account.GpgApiAdapter.class).to(com.google.gerrit.gpg.api.GpgApiModule.NoGpgApi.class); return; } bind(com.google.gerrit.server.account.GpgApiAdapter.class).to(com.google.gerrit.gpg.api.GpgApiAdapterImpl.class); factory(GpgKeyApiImpl.Factory.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.gpg.api.GPG_KEY_KIND); child(com.google.gerrit.gpg.api.ACCOUNT_KIND, ""gpgkeys"").to(com.google.gerrit.gpg.server.GpgKeys.class); post(com.google.gerrit.gpg.api.ACCOUNT_KIND, ""gpgkeys"").to(com.google.gerrit.gpg.server.PostGpgKeys.class); get(com.google.gerrit.gpg.api.GPG_KEY_KIND).to(GpgKeys.Get.class); delete(com.google.gerrit.gpg.api.GPG_KEY_KIND).to(com.google.gerrit.gpg.server.DeleteGpgKey.class); }",276a3c4ba53815476153a96824829aa4fdcbdcb0,2017-11-15 10:20:04,6
139731,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void stalenessChecker() throws java.lang.Exception { assume().that(isNoteDbConfig()).isTrue(); com.google.gerrit.extensions.common.GroupInfo groupInfo = gApi.groups().create(name(""foo"")).get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupInfo.id); assertThat(stalenessChecker.isStale(groupUuid)).isFalse(); java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsGroups(groupUuid); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(repo.exactRef(groupRef).getObjectId()); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(commit.getTree()); cb.setCommitter(ident); cb.setAuthor(ident); cb.setMessage(commit.getFullMessage()); org.eclipse.jgit.lib.ObjectId emptyCommit = oi.insert(cb); oi.flush(); org.eclipse.jgit.lib.RefUpdate updateRef = repo.updateRef(groupRef); updateRef.setExpectedOldObjectId(commit.toObjectId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRef.forceUpdate()).isEqualTo(RefUpdate.Result.FORCED); } assertThat(stalenessChecker.isStale(groupUuid)).isTrue(); gApi.groups().id(groupInfo.id).index(); assertThat(stalenessChecker.isStale(groupUuid)).isFalse(); }",27ca1d9ad02d2cda8b1ef5d94f218627719ad2d5,"@org.junit.Test public void stalenessChecker() throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); com.google.gerrit.extensions.common.GroupInfo groupInfo = gApi.groups().create(name(""foo"")).get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupInfo.id); assertThat(stalenessChecker.isStale(groupUuid)).isFalse(); java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsGroups(groupUuid); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(repo.exactRef(groupRef).getObjectId()); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(commit.getTree()); cb.setCommitter(ident); cb.setAuthor(ident); cb.setMessage(commit.getFullMessage()); org.eclipse.jgit.lib.ObjectId emptyCommit = oi.insert(cb); oi.flush(); org.eclipse.jgit.lib.RefUpdate updateRef = repo.updateRef(groupRef); updateRef.setExpectedOldObjectId(commit.toObjectId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRef.forceUpdate()).isEqualTo(RefUpdate.Result.FORCED); } groupsByUUIDCache.invalidate(groupUuid); assertThat(stalenessChecker.isStale(groupUuid)).isTrue(); gApi.groups().id(groupInfo.id).index(); assertThat(stalenessChecker.isStale(groupUuid)).isFalse(); }",dcc93ca5b3a1c15894fd7c3b7b9607bc16b51f3a,2017-11-15 11:15:48,10
139731,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean isNoteDbConfig() { return baseConfig.getBoolean(""user"", ""writeGroupsToNoteDb"", false); }",ace1ffb6a1e9a4da4ee9610081168b4a5d6295f1,"private boolean groupsInNoteDb() { return (cfg.getBoolean(""user"", ""writeGroupsToNoteDb"", false)) && (cfg.getBoolean(""user"", ""readGroupsFromNoteDb"", false)); }",b010216ce1091827b4096b6fac2d326730693bc3,2017-11-15 11:15:48,10
139731,java_com_google_gerrit_server_index_group_StalenessChecker.java,,,"public boolean isStale(com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (!(config.getBoolean(""user"", ""readGroupsFromNoteDb"", false))) { return false; } com.google.gerrit.server.index.group.GroupIndex i = indexes.getSearchIndex(); if (i == null) { return false; } if (!(i.getSchema().hasField(GroupField.REF_STATE))) { return false; } java.util.Optional<com.google.gerrit.server.group.InternalGroup> result = i.get(id, com.google.gerrit.server.index.group.IndexedGroupQuery.createOptions(indexConfig, 0, 1, com.google.gerrit.server.index.group.StalenessChecker.FIELDS)); if (!(result.isPresent())) { return true; } com.google.gerrit.server.group.InternalGroup group = result.get(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.findRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(id)); org.eclipse.jgit.lib.ObjectId head = (ref == null) ? org.eclipse.jgit.lib.ObjectId.zeroId() : ref.getObjectId(); return !(head.equals(group.getRefState())); } }",b6c40a5b139646f87e05ce1a3b2922655539dab0,"public boolean isStale(com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (!(config.getBoolean(""user"", ""readGroupsFromNoteDb"", false))) { return false; } com.google.gerrit.server.index.group.GroupIndex i = indexes.getSearchIndex(); if (i == null) { return false; } if (!(i.getSchema().hasField(GroupField.REF_STATE))) { return false; } java.util.Optional<com.google.gerrit.index.query.FieldBundle> result = i.getRaw(id, com.google.gerrit.server.index.group.IndexedGroupQuery.createOptions(indexConfig, 0, 1, com.google.gerrit.server.index.group.StalenessChecker.FIELDS)); if (!(result.isPresent())) { return true; } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(id)); org.eclipse.jgit.lib.ObjectId head = (ref == null) ? org.eclipse.jgit.lib.ObjectId.zeroId() : ref.getObjectId(); return !(head.equals(org.eclipse.jgit.lib.ObjectId.fromString(result.get().getValue(GroupField.REF_STATE), 0))); } }",1adcf2e560e2f58b529835653c6f80684ab2ff56,2017-11-15 11:15:48,10
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,@java.lang.Override public java.lang.String getFilePath(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit) { return edit.getOldFilePath(); },67af2b9e4bf49f40003530f4c18a27345d521986,@java.lang.Override public java.lang.String getFilePath(com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit edit) { return edit.getOldFilePath(); },585a67b3b4ca9a14cb1f7eec0cbb6cb42a9c6406,@java.lang.Override public java.lang.String getFilePath(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit) { return edit.getOldFilePath(); },67af2b9e4bf49f40003530f4c18a27345d521986,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,"@java.lang.Override public com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit create(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit, int shiftedAmount, java.lang.String adjustedFilePath) { return com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit.create(edit.getOldFilePath(), adjustedFilePath, edit.getBeginA(), edit.getEndA(), ((edit.getBeginB()) + shiftedAmount), ((edit.getEndB()) + shiftedAmount), (!(java.util.Objects.equals(edit.getNewFilePath(), adjustedFilePath)))); }",6a7d41e8cdebfb8c15fa1cc0ac352ca1307ce1be,"@java.lang.Override public com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit create(com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit edit, int shiftedAmount, java.lang.String adjustedFilePath) { return com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit.create(edit.getOldFilePath(), adjustedFilePath, edit.getBeginA(), edit.getEndA(), ((edit.getBeginB()) + shiftedAmount), ((edit.getEndB()) + shiftedAmount), (!(java.util.Objects.equals(edit.getNewFilePath(), adjustedFilePath)))); }",b2364e2db74145a48a719a0f10eedd8783d52c7f,"@java.lang.Override public com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit create(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit, int shiftedAmount, java.lang.String adjustedFilePath) { return com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit.create(edit.getOldFilePath(), adjustedFilePath, edit.getBeginA(), edit.getEndA(), ((edit.getBeginB()) + shiftedAmount), ((edit.getEndB()) + shiftedAmount), (!(java.util.Objects.equals(edit.getNewFilePath(), adjustedFilePath)))); }",6a7d41e8cdebfb8c15fa1cc0ac352ca1307ce1be,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchScriptFactory.java,"private com.google.gerrit.server.patch.PatchList listFor(com.google.gerrit.server.patch.PatchListKey key) throws com.google.gerrit.server.patch.PatchListNotAvailableException { return patchListCache.get(key, notes.getProjectName()); }",9b95773d10a50b32027d011eac597a41eac4ec47,"private com.google.gerrit.server.patchlib.PatchList listFor(com.google.gerrit.server.patchlib.PatchListKey key) throws com.google.gerrit.server.patchlib.PatchListNotAvailableException { return patchListCache.get(key, notes.getProjectName()); }",4d613c32f16d9b1db051a50dc7b5e5db7d805b02,"private com.google.gerrit.server.diff.PatchList listFor(com.google.gerrit.server.diff.PatchListKey key) throws com.google.gerrit.server.diff.PatchListNotAvailableException { return patchListCache.get(key, notes.getProjectName()); }",4be81f3a7958959e497aec002f10ef2af3632296,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchScriptFactory.java,"private com.google.gerrit.server.patch.PatchScriptBuilder newBuilder(com.google.gerrit.server.patch.PatchList list, org.eclipse.jgit.lib.Repository git) { final com.google.gerrit.server.patch.PatchScriptBuilder b = builderFactory.get(); b.setRepository(git, notes.getProjectName()); b.setChange(notes.getChange()); b.setDiffPrefs(diffPrefs); b.setTrees(list.getComparisonType(), list.getOldId(), list.getNewId()); return b; }",4d22abf6ccd826b8fdb758514566e4729fc34223,"private com.google.gerrit.server.patch.PatchScriptBuilder newBuilder(com.google.gerrit.server.patchlib.PatchList list, org.eclipse.jgit.lib.Repository git) { final com.google.gerrit.server.patch.PatchScriptBuilder b = builderFactory.get(); b.setRepository(git, notes.getProjectName()); b.setChange(notes.getChange()); b.setDiffPrefs(diffPrefs); b.setTrees(list.getComparisonType(), list.getOldId(), list.getNewId()); return b; }",43a31ee5b469a7581923ca8f9d337478243ef779,"private com.google.gerrit.server.patch.PatchScriptBuilder newBuilder(com.google.gerrit.server.diff.PatchList list, org.eclipse.jgit.lib.Repository git) { final com.google.gerrit.server.patch.PatchScriptBuilder b = builderFactory.get(); b.setRepository(git, notes.getProjectName()); b.setChange(notes.getChange()); b.setDiffPrefs(diffPrefs); b.setTrees(list.getComparisonType(), list.getOldId(), list.getNewId()); return b; }",25c544becc1b16736d5e876b5a105a94b37031f7,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_query_change_ChangeData.java,"public java.util.Optional<com.google.gerrit.server.query.change.ChangeData.ChangedLines> changedLines() throws com.google.gwtorm.server.OrmException, java.io.IOException { if ((changedLines) == null) { if (!(lazyLoad)) { return java.util.Optional.empty(); } changedLines = computeChangedLines(); } return changedLines; }",efa6f593774e156d5012ec228afa44a89e42e97a,"public java.util.Optional<com.google.gerrit.server.patchlib.DiffSummary.ChangedLines> changedLines() throws com.google.gwtorm.server.OrmException, java.io.IOException { if ((changedLines) == null) { if (!(lazyLoad)) { return java.util.Optional.empty(); } changedLines = computeChangedLines(); } return changedLines; }",545b88f90eda5c249410ff74eec67c6dcad36ee2,"public java.util.Optional<com.google.gerrit.server.diff.DiffSummary.ChangedLines> changedLines() throws com.google.gwtorm.server.OrmException, java.io.IOException { if ((changedLines) == null) { if (!(lazyLoad)) { return java.util.Optional.empty(); } changedLines = computeChangedLines(); } return changedLines; }",d83d8f037783eaeb3f94b92ee58b187271ae04eb,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchScriptFactory.java,"private com.google.gerrit.server.patch.PatchListKey keyFor(com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { if ((parentNum) < 0) { return com.google.gerrit.server.patch.PatchListKey.againstCommit(aId, bId, whitespace); } return com.google.gerrit.server.patch.PatchListKey.againstParentNum(((parentNum) + 1), bId, whitespace); }",d82fd53b7889f55b95ceaa102184a9b60eae373b,"private com.google.gerrit.server.patchlib.PatchListKey keyFor(com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { if ((parentNum) < 0) { return com.google.gerrit.server.patchlib.PatchListKey.againstCommit(aId, bId, whitespace); } return com.google.gerrit.server.patchlib.PatchListKey.againstParentNum(((parentNum) + 1), bId, whitespace); }",7d8702919051a9346b0b9ceb45956a59c0c90217,"private com.google.gerrit.server.diff.PatchListKey keyFor(com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { if ((parentNum) < 0) { return com.google.gerrit.server.diff.PatchListKey.againstCommit(aId, bId, whitespace); } return com.google.gerrit.server.diff.PatchListKey.againstParentNum(((parentNum) + 1), bId, whitespace); }",f16de6901a751e40cb0867072a7aafccb8bc3dcd,2017-11-15 12:52:05,11
140535,javatests_com_google_gerrit_server_patchlib_PatchListEntryTest.java,"@org.junit.Test public void empty1() { final java.lang.String name = ""empty-file""; final com.google.gerrit.server.patch.PatchListEntry e = com.google.gerrit.server.patch.PatchListEntry.empty(name); assertNull(e.getOldName()); assertEquals(name, e.getNewName()); assertSame(Patch.PatchType.UNIFIED, e.getPatchType()); assertSame(Patch.ChangeType.MODIFIED, e.getChangeType()); assertTrue(e.getEdits().isEmpty()); }",5b0acc86853fb1e36d3e9ee4edef70861da3e045,"@org.junit.Test public void empty1() { final java.lang.String name = ""empty-file""; final com.google.gerrit.server.patchlib.PatchListEntry e = com.google.gerrit.server.patchlib.PatchListEntry.empty(name); assertNull(e.getOldName()); assertEquals(name, e.getNewName()); assertSame(PatchType.UNIFIED, e.getPatchType()); assertSame(Patch.ChangeType.MODIFIED, e.getChangeType()); assertTrue(e.getEdits().isEmpty()); }",72131189a16ff111a891f858e4da7004a2ea9be0,"@org.junit.Test public void empty1() { final java.lang.String name = ""empty-file""; final com.google.gerrit.server.diff.PatchListEntry e = com.google.gerrit.server.diff.PatchListEntry.empty(name); assertNull(e.getOldName()); assertEquals(name, e.getNewName()); assertSame(Patch.PatchType.UNIFIED, e.getPatchType()); assertSame(Patch.ChangeType.MODIFIED, e.getChangeType()); assertTrue(e.getEdits().isEmpty()); }",369c62006a142551be889b1a99d13955599f186c,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchFile.java,"private com.google.gerrit.server.patch.Text load(org.eclipse.jgit.lib.ObjectId tree, java.lang.String path) throws java.io.IOException, org.eclipse.jgit.errors.CorruptObjectException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { if (path == null) { return Text.EMPTY; } final org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(repo, path, tree); if (tw == null) { return Text.EMPTY; } if ((tw.getFileMode(0).getObjectType()) == (org.eclipse.jgit.lib.Constants.OBJ_BLOB)) { return new com.google.gerrit.server.patch.Text(repo.open(tw.getObjectId(0), Constants.OBJ_BLOB)); } else if ((tw.getFileMode(0).getObjectType()) == (org.eclipse.jgit.lib.Constants.OBJ_COMMIT)) { java.lang.String str = ""Subproject commit "" + (org.eclipse.jgit.lib.ObjectId.toString(tw.getObjectId(0))); return new com.google.gerrit.server.patch.Text(str.getBytes(java.nio.charset.StandardCharsets.UTF_8)); } else { return Text.EMPTY; } }",13e968bdc45d9ebca10603d90ab384d347e4e1dd,"private com.google.gerrit.server.patchlib.Text load(org.eclipse.jgit.lib.ObjectId tree, java.lang.String path) throws java.io.IOException, org.eclipse.jgit.errors.CorruptObjectException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { if (path == null) { return Text.EMPTY; } final org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(repo, path, tree); if (tw == null) { return Text.EMPTY; } if ((tw.getFileMode(0).getObjectType()) == (org.eclipse.jgit.lib.Constants.OBJ_BLOB)) { return new com.google.gerrit.server.patchlib.Text(repo.open(tw.getObjectId(0), Constants.OBJ_BLOB)); } else if ((tw.getFileMode(0).getObjectType()) == (org.eclipse.jgit.lib.Constants.OBJ_COMMIT)) { java.lang.String str = ""Subproject commit "" + (org.eclipse.jgit.lib.ObjectId.toString(tw.getObjectId(0))); return new com.google.gerrit.server.patchlib.Text(str.getBytes(java.nio.charset.StandardCharsets.UTF_8)); } else { return Text.EMPTY; } }",8343d388cc7a864b108c0adfcf015bf6d1fdefe8,"private com.google.gerrit.server.diff.Text load(org.eclipse.jgit.lib.ObjectId tree, java.lang.String path) throws java.io.IOException, org.eclipse.jgit.errors.CorruptObjectException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { if (path == null) { return Text.EMPTY; } final org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(repo, path, tree); if (tw == null) { return Text.EMPTY; } if ((tw.getFileMode(0).getObjectType()) == (org.eclipse.jgit.lib.Constants.OBJ_BLOB)) { return new com.google.gerrit.server.diff.Text(repo.open(tw.getObjectId(0), Constants.OBJ_BLOB)); } else if ((tw.getFileMode(0).getObjectType()) == (org.eclipse.jgit.lib.Constants.OBJ_COMMIT)) { java.lang.String str = ""Subproject commit "" + (org.eclipse.jgit.lib.ObjectId.toString(tw.getObjectId(0))); return new com.google.gerrit.server.diff.Text(str.getBytes(java.nio.charset.StandardCharsets.UTF_8)); } else { return Text.EMPTY; } }",1b3d057c1cbad2f3bc31345085c455e08fec0f9c,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_IntraLineLoader.java,"private static boolean isBlankLineGap(com.google.gerrit.server.patch.Text a, int b, int e) { for (; b < e; b++) { if (!(com.google.gerrit.server.patch.IntraLineLoader.BLANK_LINE_RE.matcher(a.getString(b)).matches())) { return false; } } return true; }",10f35e6a4f7a73c430921285d0f20ca3280897d9,"private static boolean isBlankLineGap(com.google.gerrit.server.patchlib.Text a, int b, int e) { for (; b < e; b++) { if (!(com.google.gerrit.server.patch.IntraLineLoader.BLANK_LINE_RE.matcher(a.getString(b)).matches())) { return false; } } return true; }",235e9c110ad8600746219564069cc471814b20a5,"private static boolean isBlankLineGap(com.google.gerrit.server.diff.Text a, int b, int e) { for (; b < e; b++) { if (!(com.google.gerrit.server.patch.IntraLineLoader.BLANK_LINE_RE.matcher(a.getString(b)).matches())) { return false; } } return true; }",f8e897401bcefe8006efb2062271279d7114d22d,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_IntraLineLoader.java,"private static boolean isControlBlockStart(com.google.gerrit.server.patch.Text a, int idx) { return com.google.gerrit.server.patch.IntraLineLoader.CONTROL_BLOCK_START_RE.matcher(a.getString(idx)).find(); }",63f4b52a82f54cfcb43fad4ea517cac66d87adba,"private static boolean isControlBlockStart(com.google.gerrit.server.patchlib.Text a, int idx) { return com.google.gerrit.server.patch.IntraLineLoader.CONTROL_BLOCK_START_RE.matcher(a.getString(idx)).find(); }",a893100ac13b6e3fdf82c04897acd0534adce9ab,"private static boolean isControlBlockStart(com.google.gerrit.server.diff.Text a, int idx) { return com.google.gerrit.server.patch.IntraLineLoader.CONTROL_BLOCK_START_RE.matcher(a.getString(idx)).find(); }",9dbadd706510185a9762b18526d8b1c49d6d9fd2,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_IntraLineLoader.java,"com.google.gerrit.server.patch.IntraLineLoader create(com.google.gerrit.server.patch.IntraLineDiffKey key, com.google.gerrit.server.patch.IntraLineDiffArgs args);",5ecaab621d3e4a68903c1cfbac6ef69f3ed524d1,"com.google.gerrit.server.patch.IntraLineLoader create(com.google.gerrit.server.patchlib.IntraLineDiffKey key, com.google.gerrit.server.patchlib.IntraLineDiffArgs args);",6bc227cb5e8686e977b500b417f60f4b47cde6ec,"com.google.gerrit.server.patch.IntraLineLoader create(com.google.gerrit.server.diff.IntraLineDiffKey key, com.google.gerrit.server.diff.IntraLineDiffArgs args);",9b729e4966f21a65c764a712c7679c7c2e1f65a1,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_IntraLineLoader.java,"private static void combineLineEdits(java.util.List<org.eclipse.jgit.diff.Edit> edits, com.google.gerrit.server.patch.Text a, com.google.gerrit.server.patch.Text b) { for (int j = 0; j < ((edits.size()) - 1);) { org.eclipse.jgit.diff.Edit c = edits.get(j); org.eclipse.jgit.diff.Edit n = edits.get((j + 1)); final int ad = (n.getBeginA()) - (c.getEndA()); final int bd = (n.getBeginB()) - (c.getEndB()); if ((((1 <= ad) && (com.google.gerrit.server.patch.IntraLineLoader.isBlankLineGap(a, c.getEndA(), n.getBeginA()))) || ((1 <= bd) && (com.google.gerrit.server.patch.IntraLineLoader.isBlankLineGap(b, c.getEndB(), n.getBeginB())))) || (((ad == 1) && (bd == 1)) && (com.google.gerrit.server.patch.IntraLineLoader.isControlBlockStart(a, c.getEndA())))) { int ab = c.getBeginA(); int ae = n.getEndA(); int bb = c.getBeginB(); int be = n.getEndB(); edits.set(j, new org.eclipse.jgit.diff.Edit(ab, ae, bb, be)); edits.remove((j + 1)); continue; } j++; } }",fcf664148815298d791e4163b83ab6258af9b20e,"private static void combineLineEdits(java.util.List<org.eclipse.jgit.diff.Edit> edits, com.google.gerrit.server.patchlib.Text a, com.google.gerrit.server.patchlib.Text b) { for (int j = 0; j < ((edits.size()) - 1);) { org.eclipse.jgit.diff.Edit c = edits.get(j); org.eclipse.jgit.diff.Edit n = edits.get((j + 1)); final int ad = (n.getBeginA()) - (c.getEndA()); final int bd = (n.getBeginB()) - (c.getEndB()); if ((((1 <= ad) && (com.google.gerrit.server.patch.IntraLineLoader.isBlankLineGap(a, c.getEndA(), n.getBeginA()))) || ((1 <= bd) && (com.google.gerrit.server.patch.IntraLineLoader.isBlankLineGap(b, c.getEndB(), n.getBeginB())))) || (((ad == 1) && (bd == 1)) && (com.google.gerrit.server.patch.IntraLineLoader.isControlBlockStart(a, c.getEndA())))) { int ab = c.getBeginA(); int ae = n.getEndA(); int bb = c.getBeginB(); int be = n.getEndB(); edits.set(j, new org.eclipse.jgit.diff.Edit(ab, ae, bb, be)); edits.remove((j + 1)); continue; } j++; } }",52176d3646a0aa952b8271540f285ec5d16694de,"private static void combineLineEdits(java.util.List<org.eclipse.jgit.diff.Edit> edits, com.google.gerrit.server.diff.Text a, com.google.gerrit.server.diff.Text b) { for (int j = 0; j < ((edits.size()) - 1);) { org.eclipse.jgit.diff.Edit c = edits.get(j); org.eclipse.jgit.diff.Edit n = edits.get((j + 1)); final int ad = (n.getBeginA()) - (c.getEndA()); final int bd = (n.getBeginB()) - (c.getEndB()); if ((((1 <= ad) && (com.google.gerrit.server.patch.IntraLineLoader.isBlankLineGap(a, c.getEndA(), n.getBeginA()))) || ((1 <= bd) && (com.google.gerrit.server.patch.IntraLineLoader.isBlankLineGap(b, c.getEndB(), n.getBeginB())))) || (((ad == 1) && (bd == 1)) && (com.google.gerrit.server.patch.IntraLineLoader.isControlBlockStart(a, c.getEndA())))) { int ab = c.getBeginA(); int ae = n.getEndA(); int bb = c.getBeginB(); int be = n.getEndB(); edits.set(j, new org.eclipse.jgit.diff.Edit(ab, ae, bb, be)); edits.remove((j + 1)); continue; } j++; } }",a34bafbcd97deda049e9e9f4aee4ddaa7b73f8a3,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_DiffSummaryLoader.java,"@java.lang.Override public com.google.gerrit.server.patch.DiffSummary call() throws java.lang.Exception { com.google.gerrit.server.patch.PatchList patchList = patchListCache.get(key.toPatchListKey(), project); return com.google.gerrit.server.patch.DiffSummaryLoader.toDiffSummary(patchList); }",e59b6650a9eef2d1fc5f5ef61e17ea9846b95495,"@java.lang.Override public com.google.gerrit.server.patchlib.DiffSummary call() throws java.lang.Exception { com.google.gerrit.server.patchlib.PatchList patchList = patchListCache.get(key.toPatchListKey(), project); return com.google.gerrit.server.patch.DiffSummaryLoader.toDiffSummary(patchList); }",8316630d6b2be2d39f29dbd579a71e804655ade7,"@java.lang.Override public com.google.gerrit.server.diff.DiffSummary call() throws java.lang.Exception { com.google.gerrit.server.diff.PatchList patchList = patchListCache.get(key.toPatchListKey(), project); return com.google.gerrit.server.patch.DiffSummaryLoader.toDiffSummary(patchList); }",247a3300dfa5bbf493e25596b34fe99467483de1,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchScriptBuilder.java,"void setTrees(com.google.gerrit.server.patch.ComparisonType ct, org.eclipse.jgit.lib.ObjectId a, org.eclipse.jgit.lib.ObjectId b) { comparisonType = ct; aId = a; bId = b; }",32f664ab6c5daadcc0712322fb9c68cfafbbbdee,"void setTrees(com.google.gerrit.server.patchlib.ComparisonType ct, org.eclipse.jgit.lib.ObjectId a, org.eclipse.jgit.lib.ObjectId b) { comparisonType = ct; aId = a; bId = b; }",66561478beb0a9fb39047f78be79ddf6aa270fcc,"void setTrees(com.google.gerrit.server.diff.ComparisonType ct, org.eclipse.jgit.lib.ObjectId a, org.eclipse.jgit.lib.ObjectId b) { comparisonType = ct; aId = a; bId = b; }",ffb91dc7ff96c3de0be6be8a7dd11ec101261e6d,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_IntraLineDiff.java,private static com.google.common.collect.ImmutableList<org.eclipse.jgit.diff.Edit> deepCopyEdits(java.util.List<org.eclipse.jgit.diff.Edit> edits) { return edits.stream().map(com.google.gerrit.server.patch.IntraLineDiff::copy).collect(com.google.common.collect.ImmutableList.toImmutableList()); },f0b30803e6f0ced3b73d607d561c6131bc6b33a6,private static com.google.common.collect.ImmutableList<org.eclipse.jgit.diff.Edit> deepCopyEdits(java.util.List<org.eclipse.jgit.diff.Edit> edits) { return edits.stream().map(com.google.gerrit.server.patchlib.IntraLineDiff::copy).collect(com.google.common.collect.ImmutableList.toImmutableList()); },5d8e7a10bffa6ca10326f6697c692e3460e9678b,private static com.google.common.collect.ImmutableList<org.eclipse.jgit.diff.Edit> deepCopyEdits(java.util.List<org.eclipse.jgit.diff.Edit> edits) { return edits.stream().map(com.google.gerrit.server.diff.IntraLineDiff::copy).collect(com.google.common.collect.ImmutableList.toImmutableList()); },76638ab930afd4899d394ab396fb45b67044a789,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,"public static java.util.stream.Stream<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> toEdits(com.google.gerrit.server.patch.PatchListEntry patchListEntry) { com.google.common.collect.ImmutableList<org.eclipse.jgit.diff.Edit> edits = patchListEntry.getEdits(); if (edits.isEmpty()) { return java.util.stream.Stream.of(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit.createForNoContentEdit(patchListEntry)); } return edits.stream().map(( edit) -> com.google.gerrit.server.patch.ContextAwareEdit.create(patchListEntry, edit)); }",0d3d18d32f4b8e148c8cf83cddef0a87e2109d6d,"public static java.util.stream.Stream<com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit> toEdits(com.google.gerrit.server.patchlib.PatchListEntry patchListEntry) { com.google.common.collect.ImmutableList<org.eclipse.jgit.diff.Edit> edits = patchListEntry.getEdits(); if (edits.isEmpty()) { return java.util.stream.Stream.of(com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit.createForNoContentEdit(patchListEntry)); } return edits.stream().map(( edit) -> com.google.gerrit.server.patchlib.ContextAwareEdit.create(patchListEntry, edit)); }",e027c5fe9248308012d61579f550d5e7a472080e,"public static java.util.stream.Stream<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> toEdits(com.google.gerrit.server.diff.PatchListEntry patchListEntry) { com.google.common.collect.ImmutableList<org.eclipse.jgit.diff.Edit> edits = patchListEntry.getEdits(); if (edits.isEmpty()) { return java.util.stream.Stream.of(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit.createForNoContentEdit(patchListEntry)); } return edits.stream().map(( edit) -> com.google.gerrit.server.patch.ContextAwareEdit.create(patchListEntry, edit)); }",982ff4cd90d0e1acd213c9e0e2a18cd249bdfee0,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_IntraLineDiff.java,"private static org.eclipse.jgit.diff.Edit copy(org.eclipse.jgit.diff.Edit edit) { if (edit instanceof org.eclipse.jgit.diff.ReplaceEdit) { return com.google.gerrit.server.patch.IntraLineDiff.copy(((org.eclipse.jgit.diff.ReplaceEdit) (edit))); } return new org.eclipse.jgit.diff.Edit(edit.getBeginA(), edit.getEndA(), edit.getBeginB(), edit.getEndB()); }",82531ee41f1eab19579e34db8089b62a8fbf1558,"private static org.eclipse.jgit.diff.Edit copy(org.eclipse.jgit.diff.Edit edit) { if (edit instanceof org.eclipse.jgit.diff.ReplaceEdit) { return com.google.gerrit.server.patchlib.IntraLineDiff.copy(((org.eclipse.jgit.diff.ReplaceEdit) (edit))); } return new org.eclipse.jgit.diff.Edit(edit.getBeginA(), edit.getEndA(), edit.getBeginB(), edit.getEndB()); }",4009413280da231fab84dd0741006c3cb801e79c,"private static org.eclipse.jgit.diff.Edit copy(org.eclipse.jgit.diff.Edit edit) { if (edit instanceof org.eclipse.jgit.diff.ReplaceEdit) { return com.google.gerrit.server.diff.IntraLineDiff.copy(((org.eclipse.jgit.diff.ReplaceEdit) (edit))); } return new org.eclipse.jgit.diff.Edit(edit.getBeginA(), edit.getEndA(), edit.getBeginB(), edit.getEndB()); }",efee5b740b477ce843405065f71e0604414c9156,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_IntraLineDiff.java,"private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException { writeEnum(out, status); writeVarInt32(out, edits.size()); for (org.eclipse.jgit.diff.Edit e : edits) { com.google.gerrit.server.patch.IntraLineDiff.writeEdit(out, e); if (e instanceof org.eclipse.jgit.diff.ReplaceEdit) { org.eclipse.jgit.diff.ReplaceEdit r = ((org.eclipse.jgit.diff.ReplaceEdit) (e)); writeVarInt32(out, r.getInternalEdits().size()); for (org.eclipse.jgit.diff.Edit i : r.getInternalEdits()) { com.google.gerrit.server.patch.IntraLineDiff.writeEdit(out, i); } } else { writeVarInt32(out, 0); } } }",cb2880f87a796fa026ea69f15bba977f46c53782,"private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException { writeEnum(out, status); writeVarInt32(out, edits.size()); for (org.eclipse.jgit.diff.Edit e : edits) { com.google.gerrit.server.patchlib.IntraLineDiff.writeEdit(out, e); if (e instanceof org.eclipse.jgit.diff.ReplaceEdit) { org.eclipse.jgit.diff.ReplaceEdit r = ((org.eclipse.jgit.diff.ReplaceEdit) (e)); writeVarInt32(out, r.getInternalEdits().size()); for (org.eclipse.jgit.diff.Edit i : r.getInternalEdits()) { com.google.gerrit.server.patchlib.IntraLineDiff.writeEdit(out, i); } } else { writeVarInt32(out, 0); } } }",326fee50250f2cb7f3ee3e364c3854a908783326,"private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException { writeEnum(out, status); writeVarInt32(out, edits.size()); for (org.eclipse.jgit.diff.Edit e : edits) { com.google.gerrit.server.diff.IntraLineDiff.writeEdit(out, e); if (e instanceof org.eclipse.jgit.diff.ReplaceEdit) { org.eclipse.jgit.diff.ReplaceEdit r = ((org.eclipse.jgit.diff.ReplaceEdit) (e)); writeVarInt32(out, r.getInternalEdits().size()); for (org.eclipse.jgit.diff.Edit i : r.getInternalEdits()) { com.google.gerrit.server.diff.IntraLineDiff.writeEdit(out, i); } } else { writeVarInt32(out, 0); } } }",33db52ae2598684925f23a5fe818c9f3eda492b6,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_IntraLineDiffKey.java,"public static com.google.gerrit.server.patch.IntraLineDiffKey create(org.eclipse.jgit.lib.ObjectId aId, org.eclipse.jgit.lib.ObjectId bId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { return new com.google.gerrit.server.patch.AutoValue_IntraLineDiffKey(aId, bId, whitespace); }",a5a67e1a09b0365672626f11fbb4c86ce126ead9,"public static com.google.gerrit.server.patchlib.IntraLineDiffKey create(org.eclipse.jgit.lib.ObjectId aId, org.eclipse.jgit.lib.ObjectId bId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { return new com.google.gerrit.server.patchlib.AutoValue_IntraLineDiffKey(aId, bId, whitespace); }",a5c1b10f4044b62545239513e7d6e2df94f71c67,"public static com.google.gerrit.server.diff.IntraLineDiffKey create(org.eclipse.jgit.lib.ObjectId aId, org.eclipse.jgit.lib.ObjectId bId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { return new com.google.gerrit.server.diff.AutoValue_IntraLineDiffKey(aId, bId, whitespace); }",5d91678cc157a740ece3d7fc13fb6d4fe10a6a11,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_query_change_ChangeData.java,"public java.util.List<java.lang.String> currentFilePaths() throws com.google.gwtorm.server.OrmException, java.io.IOException { if ((currentFiles) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } java.util.Optional<com.google.gerrit.server.patch.DiffSummary> p = getDiffSummary(); currentFiles = p.map(DiffSummary::getPaths).orElse(java.util.Collections.emptyList()); } return currentFiles; }",1ac5f65674c71be3763a949462f851853889a4fe,"public java.util.List<java.lang.String> currentFilePaths() throws com.google.gwtorm.server.OrmException, java.io.IOException { if ((currentFiles) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } java.util.Optional<com.google.gerrit.server.patchlib.DiffSummary> p = getDiffSummary(); currentFiles = p.map(DiffSummary::getPaths).orElse(java.util.Collections.emptyList()); } return currentFiles; }",95a94ce9f7ae507caa2ce288f9854e8ddd4fe816,"public java.util.List<java.lang.String> currentFilePaths() throws com.google.gwtorm.server.OrmException, java.io.IOException { if ((currentFiles) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } java.util.Optional<com.google.gerrit.server.diff.DiffSummary> p = getDiffSummary(); currentFiles = p.map(DiffSummary::getPaths).orElse(java.util.Collections.emptyList()); } return currentFiles; }",c602329f925fa0b13a321b10088e1891718990ef,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_query_change_ChangeData.java,"private java.util.Optional<com.google.gerrit.server.query.change.ChangeData.ChangedLines> computeChangedLines() throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.server.patch.DiffSummary> ds = getDiffSummary(); if (ds.isPresent()) { return java.util.Optional.of(ds.get().getChangedLines()); } return java.util.Optional.empty(); }",4c98c219e13b2a1f76b043e78112f4370ff2b80a,"private java.util.Optional<com.google.gerrit.server.patchlib.DiffSummary.ChangedLines> computeChangedLines() throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.server.patchlib.DiffSummary> ds = getDiffSummary(); if (ds.isPresent()) { return java.util.Optional.of(ds.get().getChangedLines()); } return java.util.Optional.empty(); }",b0b589ebc190496d49e97aa94434d545ee9027fa,"private java.util.Optional<com.google.gerrit.server.diff.DiffSummary.ChangedLines> computeChangedLines() throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.server.diff.DiffSummary> ds = getDiffSummary(); if (ds.isPresent()) { return java.util.Optional.of(ds.get().getChangedLines()); } return java.util.Optional.empty(); }",60873ce4d42cbea58d91e1dcf00539a761eb75ad,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_CharTextComparator.java,"@java.lang.Override public int hash(com.google.gerrit.server.patch.CharText seq, int ptr) { return seq.charAt(ptr); }",4553c1c0bbb07e77757fc508efe319d16e323b06,"@java.lang.Override public int hash(com.google.gerrit.server.patchlib.CharText seq, int ptr) { return seq.charAt(ptr); }",39fb6f2a33526d8ef31522250a83e2f0a6709b52,"@java.lang.Override public int hash(com.google.gerrit.server.diff.CharText seq, int ptr) { return seq.charAt(ptr); }",ee1571b11109dbd4f28629eab15f3f5aa8932922,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_query_change_ChangeData.java,"public void setChangedLines(int insertions, int deletions) { changedLines = java.util.Optional.of(new com.google.gerrit.server.query.change.ChangeData.ChangedLines(insertions, deletions)); }",0026d9e098f00c99fcca18a5c2f49a7ace47e59a,"public void setChangedLines(int insertions, int deletions) { changedLines = java.util.Optional.of(new com.google.gerrit.server.patchlib.DiffSummary.ChangedLines(insertions, deletions)); }",8859f7fdae5155f7d85babea7cf6ff70d54f5c34,"public void setChangedLines(int insertions, int deletions) { changedLines = java.util.Optional.of(new com.google.gerrit.server.diff.DiffSummary.ChangedLines(insertions, deletions)); }",7519ea9c23a786c690b0474a4fe2930b7cce5dd5,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_query_change_ChangeData.java,"private java.util.Optional<com.google.gerrit.server.patch.DiffSummary> getDiffSummary() throws com.google.gwtorm.server.OrmException, java.io.IOException { if ((diffSummary) == null) { if (!(lazyLoad)) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Change c = change(); com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); if (((c == null) || (ps == null)) || (!(loadCommitData()))) { return java.util.Optional.empty(); } org.eclipse.jgit.lib.ObjectId id = org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()); com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws = com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace.IGNORE_NONE; com.google.gerrit.server.patch.PatchListKey pk = ((parentCount) > 1) ? com.google.gerrit.server.patch.PatchListKey.againstParentNum(1, id, ws) : com.google.gerrit.server.patch.PatchListKey.againstDefaultBase(id, ws); com.google.gerrit.server.patch.DiffSummaryKey key = com.google.gerrit.server.patch.DiffSummaryKey.fromPatchListKey(pk); try { diffSummary = java.util.Optional.of(patchListCache.getDiffSummary(key, c.getProject())); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { diffSummary = java.util.Optional.empty(); } } return diffSummary; }",d22fed04d8dc5bd5db39ccd49d5cf03e225b202f,"private java.util.Optional<com.google.gerrit.server.patchlib.DiffSummary> getDiffSummary() throws com.google.gwtorm.server.OrmException, java.io.IOException { if ((diffSummary) == null) { if (!(lazyLoad)) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Change c = change(); com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); if (((c == null) || (ps == null)) || (!(loadCommitData()))) { return java.util.Optional.empty(); } org.eclipse.jgit.lib.ObjectId id = org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()); com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws = com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace.IGNORE_NONE; com.google.gerrit.server.patchlib.PatchListKey pk = ((parentCount) > 1) ? com.google.gerrit.server.patchlib.PatchListKey.againstParentNum(1, id, ws) : com.google.gerrit.server.patchlib.PatchListKey.againstDefaultBase(id, ws); com.google.gerrit.server.patchlib.DiffSummaryKey key = com.google.gerrit.server.patchlib.DiffSummaryKey.fromPatchListKey(pk); try { diffSummary = java.util.Optional.of(patchListCache.getDiffSummary(key, c.getProject())); } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException e) { diffSummary = java.util.Optional.empty(); } } return diffSummary; }",7186130ccd59e574ab2edc2fd6487f913cd054ff,"private java.util.Optional<com.google.gerrit.server.diff.DiffSummary> getDiffSummary() throws com.google.gwtorm.server.OrmException, java.io.IOException { if ((diffSummary) == null) { if (!(lazyLoad)) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Change c = change(); com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); if (((c == null) || (ps == null)) || (!(loadCommitData()))) { return java.util.Optional.empty(); } org.eclipse.jgit.lib.ObjectId id = org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()); com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws = com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace.IGNORE_NONE; com.google.gerrit.server.diff.PatchListKey pk = ((parentCount) > 1) ? com.google.gerrit.server.diff.PatchListKey.againstParentNum(1, id, ws) : com.google.gerrit.server.diff.PatchListKey.againstDefaultBase(id, ws); com.google.gerrit.server.diff.DiffSummaryKey key = com.google.gerrit.server.diff.DiffSummaryKey.fromPatchListKey(pk); try { diffSummary = java.util.Optional.of(patchListCache.getDiffSummary(key, c.getProject())); } catch (com.google.gerrit.server.diff.PatchListNotAvailableException e) { diffSummary = java.util.Optional.empty(); } } return diffSummary; }",c17a43ac5d18cd020b3d381a560fc95d15e5596d,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_IntraLineDiff.java,"private static org.eclipse.jgit.diff.ReplaceEdit copy(org.eclipse.jgit.diff.ReplaceEdit edit) { java.util.List<org.eclipse.jgit.diff.Edit> internalEdits = edit.getInternalEdits().stream().map(com.google.gerrit.server.patch.IntraLineDiff::copy).collect(java.util.stream.Collectors.toList()); return new org.eclipse.jgit.diff.ReplaceEdit(edit.getBeginA(), edit.getEndA(), edit.getBeginB(), edit.getEndB(), internalEdits); }",d0453fc379cf007ee85203e708557b5b81a82072,"private static org.eclipse.jgit.diff.ReplaceEdit copy(org.eclipse.jgit.diff.ReplaceEdit edit) { java.util.List<org.eclipse.jgit.diff.Edit> internalEdits = edit.getInternalEdits().stream().map(com.google.gerrit.server.patchlib.IntraLineDiff::copy).collect(java.util.stream.Collectors.toList()); return new org.eclipse.jgit.diff.ReplaceEdit(edit.getBeginA(), edit.getEndA(), edit.getBeginB(), edit.getEndB(), internalEdits); }",8578f48380ae574a7c245aa13ba8c6840a65350d,"private static org.eclipse.jgit.diff.ReplaceEdit copy(org.eclipse.jgit.diff.ReplaceEdit edit) { java.util.List<org.eclipse.jgit.diff.Edit> internalEdits = edit.getInternalEdits().stream().map(com.google.gerrit.server.diff.IntraLineDiff::copy).collect(java.util.stream.Collectors.toList()); return new org.eclipse.jgit.diff.ReplaceEdit(edit.getBeginA(), edit.getEndA(), edit.getBeginB(), edit.getEndB(), internalEdits); }",ae6d762cd6f625b46c7ca398eb4c7ef366574981,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_IntraLineDiff.java,public com.google.gerrit.server.patch.IntraLineDiff.Status getStatus() { return status; },c76a4cccb9c875a346f09bb397a8f990b95a4400,public com.google.gerrit.server.patchlib.IntraLineDiff.Status getStatus() { return status; },8f2208001dc243507dd3ff18bc235edc23cfd728,public com.google.gerrit.server.diff.IntraLineDiff.Status getStatus() { return status; },7ed5d8f58856a591ac123b02ceaa56c27cd10c1a,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,"public void transformReferencesOfSideA(java.util.List<com.google.gerrit.server.patch.PatchListEntry> transformationEntries) { transformEdits(transformationEntries, com.google.gerrit.server.patch.EditTransformer.SideAStrategy.INSTANCE); }",ddfcb374e8d3773f6af3d282929e4482f016c808,"public void transformReferencesOfSideA(java.util.List<com.google.gerrit.server.patchlib.PatchListEntry> transformationEntries) { transformEdits(transformationEntries, com.google.gerrit.server.patchlib.EditTransformer.SideAStrategy.INSTANCE); }",4a64e27f1f85b728f85eac1cd21723136c2ed941,"public void transformReferencesOfSideA(java.util.List<com.google.gerrit.server.diff.PatchListEntry> transformationEntries) { transformEdits(transformationEntries, com.google.gerrit.server.patch.EditTransformer.SideAStrategy.INSTANCE); }",de97468ccba52fa856d7c71673d558d19b702cc7,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,@java.lang.Override public int getEnd(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit) { return edit.getEndB(); },5953890763e2fe8b304c568332d865ee7c15f012,@java.lang.Override public int getEnd(com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit edit) { return edit.getEndB(); },41c5858690f3e1f4369f64f193d741d2b17e83be,@java.lang.Override public int getEnd(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit) { return edit.getEndB(); },5953890763e2fe8b304c568332d865ee7c15f012,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,"static com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit create(java.lang.String oldFilePath, java.lang.String newFilePath, int beginA, int endA, int beginB, int endB, boolean filePathAdjusted) { java.lang.String adjustedOldFilePath = com.google.common.base.MoreObjects.firstNonNull(oldFilePath, newFilePath); boolean implicitRename = (!(java.util.Objects.equals(oldFilePath, newFilePath))) && filePathAdjusted; return new com.google.gerrit.server.patch.AutoValue_EditTransformer_ContextAwareEdit(adjustedOldFilePath, newFilePath, beginA, endA, beginB, endB, implicitRename); }",0271ff6520b3f9b87d0c239152edea79f7202176,"static com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit create(java.lang.String oldFilePath, java.lang.String newFilePath, int beginA, int endA, int beginB, int endB, boolean filePathAdjusted) { java.lang.String adjustedOldFilePath = com.google.common.base.MoreObjects.firstNonNull(oldFilePath, newFilePath); boolean implicitRename = (!(java.util.Objects.equals(oldFilePath, newFilePath))) && filePathAdjusted; return new com.google.gerrit.server.patchlib.AutoValue_EditTransformer_ContextAwareEdit(adjustedOldFilePath, newFilePath, beginA, endA, beginB, endB, implicitRename); }",930d04e9b52c276d00235dcbc21bdd1945b60ab4,"static com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit create(java.lang.String oldFilePath, java.lang.String newFilePath, int beginA, int endA, int beginB, int endB, boolean filePathAdjusted) { java.lang.String adjustedOldFilePath = com.google.common.base.MoreObjects.firstNonNull(oldFilePath, newFilePath); boolean implicitRename = (!(java.util.Objects.equals(oldFilePath, newFilePath))) && filePathAdjusted; return new com.google.gerrit.server.patch.AutoValue_EditTransformer_ContextAwareEdit(adjustedOldFilePath, newFilePath, beginA, endA, beginB, endB, implicitRename); }",0271ff6520b3f9b87d0c239152edea79f7202176,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchScriptBuilder.java,private static java.lang.String newName(com.google.gerrit.server.patch.PatchListEntry entry) { switch (entry.getChangeType()) { case DELETED : return null; case ADDED : case MODIFIED : case COPIED : case RENAMED : case REWRITE : default : return entry.getNewName(); } },f16a2d10ea90e24ca4a774a1e140357964fc0eb6,private static java.lang.String newName(com.google.gerrit.server.patchlib.PatchListEntry entry) { switch (entry.getChangeType()) { case DELETED : return null; case ADDED : case MODIFIED : case COPIED : case RENAMED : case REWRITE : default : return entry.getNewName(); } },521a4b58aed6c0c39cd9950ddbfcb5e706c08a83,private static java.lang.String newName(com.google.gerrit.server.diff.PatchListEntry entry) { switch (entry.getChangeType()) { case DELETED : return null; case ADDED : case MODIFIED : case COPIED : case RENAMED : case REWRITE : default : return entry.getNewName(); } },145e5195e712f2b5beaaba799e6add60ffa00d00,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,"@java.lang.Override public com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit create(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit, int shiftedAmount, java.lang.String adjustedFilePath) { return com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit.create(adjustedFilePath, edit.getNewFilePath(), ((edit.getBeginA()) + shiftedAmount), ((edit.getEndA()) + shiftedAmount), edit.getBeginB(), edit.getEndB(), (!(java.util.Objects.equals(edit.getOldFilePath(), adjustedFilePath)))); }",3f64ddd89bb2c54367b1520831b26103c5dd7ef2,"@java.lang.Override public com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit create(com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit edit, int shiftedAmount, java.lang.String adjustedFilePath) { return com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit.create(adjustedFilePath, edit.getNewFilePath(), ((edit.getBeginA()) + shiftedAmount), ((edit.getEndA()) + shiftedAmount), edit.getBeginB(), edit.getEndB(), (!(java.util.Objects.equals(edit.getOldFilePath(), adjustedFilePath)))); }",b451de174870b17b7fa1925fe055a1a0572ba958,"@java.lang.Override public com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit create(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit, int shiftedAmount, java.lang.String adjustedFilePath) { return com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit.create(adjustedFilePath, edit.getNewFilePath(), ((edit.getBeginA()) + shiftedAmount), ((edit.getEndA()) + shiftedAmount), edit.getBeginB(), edit.getEndB(), (!(java.util.Objects.equals(edit.getOldFilePath(), adjustedFilePath)))); }",3f64ddd89bb2c54367b1520831b26103c5dd7ef2,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,@java.lang.Override public int getBegin(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit) { return edit.getBeginA(); },8a602f9811d3eeb23a987cf24b810aece3259675,@java.lang.Override public int getBegin(com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit edit) { return edit.getBeginA(); },34ff2da0b00368a80bc1c0e057e82b5876600316,@java.lang.Override public int getBegin(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit) { return edit.getBeginA(); },8a602f9811d3eeb23a987cf24b810aece3259675,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListCacheImpl.java,"public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { factory(PatchListLoader.Factory.class); persist(com.google.gerrit.server.patch.PatchListCacheImpl.FILE_NAME, com.google.gerrit.server.patch.PatchListKey.class, com.google.gerrit.server.patch.PatchList.class).maximumWeight((10 << 20)).weigher(com.google.gerrit.server.patch.PatchListWeigher.class); factory(IntraLineLoader.Factory.class); persist(com.google.gerrit.server.patch.PatchListCacheImpl.INTRA_NAME, com.google.gerrit.server.patch.IntraLineDiffKey.class, com.google.gerrit.server.patch.IntraLineDiff.class).maximumWeight((10 << 20)).weigher(com.google.gerrit.server.patch.IntraLineWeigher.class); factory(DiffSummaryLoader.Factory.class); persist(com.google.gerrit.server.patch.PatchListCacheImpl.DIFF_SUMMARY, com.google.gerrit.server.patch.DiffSummaryKey.class, com.google.gerrit.server.patch.DiffSummary.class).maximumWeight((10 << 20)).weigher(com.google.gerrit.server.patch.DiffSummaryWeigher.class).diskLimit((1 << 30)); bind(com.google.gerrit.server.patch.PatchListCacheImpl.class); bind(com.google.gerrit.server.patch.PatchListCache.class).to(com.google.gerrit.server.patch.PatchListCacheImpl.class); } }; }",4fb8ffedcc88fd22f681fa2d95e10d1f74bba4ae,"public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { factory(PatchListLoader.Factory.class); persist(com.google.gerrit.server.patch.PatchListCacheImpl.FILE_NAME, com.google.gerrit.server.patchlib.PatchListKey.class, com.google.gerrit.server.patchlib.PatchList.class).maximumWeight((10 << 20)).weigher(com.google.gerrit.server.patchlib.PatchListWeigher.class); factory(IntraLineLoader.Factory.class); persist(com.google.gerrit.server.patch.PatchListCacheImpl.INTRA_NAME, com.google.gerrit.server.patchlib.IntraLineDiffKey.class, com.google.gerrit.server.patchlib.IntraLineDiff.class).maximumWeight((10 << 20)).weigher(com.google.gerrit.server.patchlib.IntraLineWeigher.class); factory(DiffSummaryLoader.Factory.class); persist(com.google.gerrit.server.patch.PatchListCacheImpl.DIFF_SUMMARY, com.google.gerrit.server.patchlib.DiffSummaryKey.class, com.google.gerrit.server.patchlib.DiffSummary.class).maximumWeight((10 << 20)).weigher(com.google.gerrit.server.patchlib.DiffSummaryWeigher.class).diskLimit((1 << 30)); bind(com.google.gerrit.server.patch.PatchListCacheImpl.class); bind(com.google.gerrit.server.patchlib.PatchListCache.class).to(com.google.gerrit.server.patch.PatchListCacheImpl.class); } }; }",7756f96c178780d6fcb217fab87f2b176bd4a1d7,"public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { factory(PatchListLoader.Factory.class); persist(com.google.gerrit.server.patch.PatchListCacheImpl.FILE_NAME, com.google.gerrit.server.diff.PatchListKey.class, com.google.gerrit.server.diff.PatchList.class).maximumWeight((10 << 20)).weigher(com.google.gerrit.server.diff.PatchListWeigher.class); factory(IntraLineLoader.Factory.class); persist(com.google.gerrit.server.patch.PatchListCacheImpl.INTRA_NAME, com.google.gerrit.server.diff.IntraLineDiffKey.class, com.google.gerrit.server.diff.IntraLineDiff.class).maximumWeight((10 << 20)).weigher(com.google.gerrit.server.patch.IntraLineWeigher.class); factory(DiffSummaryLoader.Factory.class); persist(com.google.gerrit.server.patch.PatchListCacheImpl.DIFF_SUMMARY, com.google.gerrit.server.diff.DiffSummaryKey.class, com.google.gerrit.server.diff.DiffSummary.class).maximumWeight((10 << 20)).weigher(com.google.gerrit.server.patch.DiffSummaryWeigher.class).diskLimit((1 << 30)); bind(com.google.gerrit.server.patch.PatchListCacheImpl.class); bind(com.google.gerrit.server.diff.PatchListCache.class).to(com.google.gerrit.server.patch.PatchListCacheImpl.class); } }; }",00291094c15cb7b6b8a673cd2c35001b5441b991,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListCacheImpl.java,"@java.lang.Override public com.google.gerrit.server.patch.DiffSummary getDiffSummary(com.google.gerrit.server.patch.DiffSummaryKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.patch.PatchListNotAvailableException { try { return diffSummaryCache.get(key, diffSummaryLoaderFactory.create(key, project)); } catch (java.util.concurrent.ExecutionException e) { PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.patch.PatchListNotAvailableException(e); } catch (com.google.common.util.concurrent.UncheckedExecutionException e) { if ((e.getCause()) instanceof org.eclipse.jgit.errors.LargeObjectException) { PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.patch.PatchListNotAvailableException(e); } throw e; } }",e809aa8444d409669cfacd2274eef7bbab42282b,"@java.lang.Override public com.google.gerrit.server.patchlib.DiffSummary getDiffSummary(com.google.gerrit.server.patchlib.DiffSummaryKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.patchlib.PatchListNotAvailableException { try { return diffSummaryCache.get(key, diffSummaryLoaderFactory.create(key, project)); } catch (java.util.concurrent.ExecutionException e) { PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.patchlib.PatchListNotAvailableException(e); } catch (com.google.common.util.concurrent.UncheckedExecutionException e) { if ((e.getCause()) instanceof org.eclipse.jgit.errors.LargeObjectException) { PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.patchlib.PatchListNotAvailableException(e); } throw e; } }",c4b66b5bdf6389243deb055260e2fbd2a6cdb53b,"@java.lang.Override public com.google.gerrit.server.diff.DiffSummary getDiffSummary(com.google.gerrit.server.diff.DiffSummaryKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.diff.PatchListNotAvailableException { try { return diffSummaryCache.get(key, diffSummaryLoaderFactory.create(key, project)); } catch (java.util.concurrent.ExecutionException e) { PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.diff.PatchListNotAvailableException(e); } catch (com.google.common.util.concurrent.UncheckedExecutionException e) { if ((e.getCause()) instanceof org.eclipse.jgit.errors.LargeObjectException) { PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.diff.PatchListNotAvailableException(e); } throw e; } }",c4fc753a2d309eb435f939dccba46f8f8b95b24e,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,@java.lang.Override public int getBegin(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit) { return edit.getBeginB(); },67142ec771924cc7ddf6982e8ca428a88e72ed20,@java.lang.Override public int getBegin(com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit edit) { return edit.getBeginB(); },7ad911f7062392ef39336be3b999c20fed4ce4f4,@java.lang.Override public int getBegin(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit) { return edit.getBeginB(); },67142ec771924cc7ddf6982e8ca428a88e72ed20,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchScriptBuilder.java,private static boolean isModify(com.google.gerrit.server.patch.PatchListEntry content) { switch (content.getChangeType()) { case MODIFIED : case COPIED : case RENAMED : case REWRITE : return true; case ADDED : case DELETED : default : return false; } },58ed9f5c07e86867ae54ba491783c5859005d00b,private static boolean isModify(com.google.gerrit.server.patchlib.PatchListEntry content) { switch (content.getChangeType()) { case MODIFIED : case COPIED : case RENAMED : case REWRITE : return true; case ADDED : case DELETED : default : return false; } },638cb23f29078eca77b3a7afaa2b5ea1b791ba02,private static boolean isModify(com.google.gerrit.server.diff.PatchListEntry content) { switch (content.getChangeType()) { case MODIFIED : case COPIED : case RENAMED : case REWRITE : return true; case ADDED : case DELETED : default : return false; } },631b524fb6d6393f8f45c69cf24f31bc168b0c00,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_mail_send_CommentSender.java,"private java.lang.String getLine(com.google.gerrit.server.patch.PatchFile fileInfo, short side, int lineNbr) { try { return fileInfo.getLine(side, lineNbr); } catch (java.io.IOException err) { com.google.gerrit.server.mail.send.CommentSender.log.warn(java.lang.String.format(""Failed to read file on side %d"", side), err); return """"; } catch (java.lang.IndexOutOfBoundsException err) { com.google.gerrit.server.mail.send.CommentSender.log.debug(java.lang.String.format(""Failed to get line number of file on side %d"", side), err); return """"; } catch (com.google.gerrit.common.errors.NoSuchEntityException err) { com.google.gerrit.server.mail.send.CommentSender.log.warn(java.lang.String.format(""Side %d of file didn't exist"", side), err); return """"; } }",9119e7dd0041fcce28d977794a7abeb7f596c0e9,"private java.lang.String getLine(com.google.gerrit.server.patchlib.PatchFile fileInfo, short side, int lineNbr) { try { return fileInfo.getLine(side, lineNbr); } catch (java.io.IOException err) { com.google.gerrit.server.mail.send.CommentSender.log.warn(java.lang.String.format(""Failed to read file on side %d"", side), err); return """"; } catch (java.lang.IndexOutOfBoundsException err) { com.google.gerrit.server.mail.send.CommentSender.log.debug(java.lang.String.format(""Failed to get line number of file on side %d"", side), err); return """"; } catch (com.google.gerrit.common.errors.NoSuchEntityException err) { com.google.gerrit.server.mail.send.CommentSender.log.warn(java.lang.String.format(""Side %d of file didn't exist"", side), err); return """"; } }",0a473c2a484440856c341b68d9a70b86a1396943,"private java.lang.String getLine(com.google.gerrit.server.diff.PatchFile fileInfo, short side, int lineNbr) { try { return fileInfo.getLine(side, lineNbr); } catch (java.io.IOException err) { com.google.gerrit.server.mail.send.CommentSender.log.warn(java.lang.String.format(""Failed to read file on side %d"", side), err); return """"; } catch (java.lang.IndexOutOfBoundsException err) { com.google.gerrit.server.mail.send.CommentSender.log.debug(java.lang.String.format(""Failed to get line number of file on side %d"", side), err); return """"; } catch (com.google.gerrit.common.errors.NoSuchEntityException err) { com.google.gerrit.server.mail.send.CommentSender.log.warn(java.lang.String.format(""Side %d of file didn't exist"", side), err); return """"; } }",bd0a8891789ce1f015ec74eb7196be0168a49c0a,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_mail_send_CommentSender.java,"private java.util.List<java.lang.String> getLinesByRange(com.google.gerrit.reviewdb.client.Comment.Range range, com.google.gerrit.server.patch.PatchFile fileData, short side) { java.util.List<java.lang.String> lines = new java.util.ArrayList<>(); for (int n = range.startLine; n <= (range.endLine); n++) { java.lang.String s = getLine(fileData, side, n); if (((n == (range.startLine)) && (n == (range.endLine))) && ((range.startChar) < (range.endChar))) { s = s.substring(java.lang.Math.min(range.startChar, s.length()), java.lang.Math.min(range.endChar, s.length())); } else if (n == (range.startLine)) { s = s.substring(java.lang.Math.min(range.startChar, s.length())); } else if (n == (range.endLine)) { s = s.substring(0, java.lang.Math.min(range.endChar, s.length())); } lines.add(s); } return lines; }",34111daae23c9a852240233b829e946a64553699,"private java.util.List<java.lang.String> getLinesByRange(com.google.gerrit.reviewdb.client.Comment.Range range, com.google.gerrit.server.patchlib.PatchFile fileData, short side) { java.util.List<java.lang.String> lines = new java.util.ArrayList<>(); for (int n = range.startLine; n <= (range.endLine); n++) { java.lang.String s = getLine(fileData, side, n); if (((n == (range.startLine)) && (n == (range.endLine))) && ((range.startChar) < (range.endChar))) { s = s.substring(java.lang.Math.min(range.startChar, s.length()), java.lang.Math.min(range.endChar, s.length())); } else if (n == (range.startLine)) { s = s.substring(java.lang.Math.min(range.startChar, s.length())); } else if (n == (range.endLine)) { s = s.substring(0, java.lang.Math.min(range.endChar, s.length())); } lines.add(s); } return lines; }",042b2daabaa026cb34f0eb0847402053808bba27,"private java.util.List<java.lang.String> getLinesByRange(com.google.gerrit.reviewdb.client.Comment.Range range, com.google.gerrit.server.diff.PatchFile fileData, short side) { java.util.List<java.lang.String> lines = new java.util.ArrayList<>(); for (int n = range.startLine; n <= (range.endLine); n++) { java.lang.String s = getLine(fileData, side, n); if (((n == (range.startLine)) && (n == (range.endLine))) && ((range.startChar) < (range.endChar))) { s = s.substring(java.lang.Math.min(range.startChar, s.length()), java.lang.Math.min(range.endChar, s.length())); } else if (n == (range.startLine)) { s = s.substring(java.lang.Math.min(range.startChar, s.length())); } else if (n == (range.endLine)) { s = s.substring(0, java.lang.Math.min(range.endChar, s.length())); } lines.add(s); } return lines; }",b2cb6a3aacbeaea3ae3d715b2d8c0f275455d5d3,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,"private static java.util.stream.Stream<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> transformEdits(com.google.gerrit.server.patch.EditTransformer.SideStrategy sideStrategy, java.util.List<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> originalEdits, java.util.List<com.google.gerrit.server.patch.PatchListEntry> transformingEntries) { if (transformingEntries.isEmpty()) { return originalEdits.stream(); } return transformingEntries.stream().flatMap(( transEntry) -> transformEdits(sideStrategy, originalEdits, transEntry.getEdits(), transEntry.getNewName()).stream()); }",d691da364741ce2c2aeacc99eaad0d74c5729d41,"private static java.util.stream.Stream<com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit> transformEdits(com.google.gerrit.server.patchlib.EditTransformer.SideStrategy sideStrategy, java.util.List<com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit> originalEdits, java.util.List<com.google.gerrit.server.patchlib.PatchListEntry> transformingEntries) { if (transformingEntries.isEmpty()) { return originalEdits.stream(); } return transformingEntries.stream().flatMap(( transEntry) -> transformEdits(sideStrategy, originalEdits, transEntry.getEdits(), transEntry.getNewName()).stream()); }",d67194e5ed65bc09ad188516f675b4265c589c3e,"private static java.util.stream.Stream<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> transformEdits(com.google.gerrit.server.patch.EditTransformer.SideStrategy sideStrategy, java.util.List<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> originalEdits, java.util.List<com.google.gerrit.server.diff.PatchListEntry> transformingEntries) { if (transformingEntries.isEmpty()) { return originalEdits.stream(); } return transformingEntries.stream().flatMap(( transEntry) -> transformEdits(sideStrategy, originalEdits, transEntry.getEdits(), transEntry.getNewName()).stream()); }",2d5bef46443f8980f74f06fc1dd8b75a1db9cf0a,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,int getBegin(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit);,b4a4324fbcfedb3b97a12b8440a2ea8aa8071f02,int getBegin(com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit edit);,c3515b1811778de8145560e1519c7cfd29972f4d,int getBegin(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit);,b4a4324fbcfedb3b97a12b8440a2ea8aa8071f02,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListCacheImpl.java,"@java.lang.Override public com.google.gerrit.server.patch.PatchList get(com.google.gerrit.server.patch.PatchListKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.patch.PatchListNotAvailableException { try { com.google.gerrit.server.patch.PatchList pl = fileCache.get(key, fileLoaderFactory.create(key, project)); if (pl instanceof com.google.gerrit.server.patch.PatchListCacheImpl.LargeObjectTombstone) { throw new com.google.gerrit.server.patch.PatchListObjectTooLargeException(((""Error computing "" + key) + "". Previous attempt failed with LargeObjectException"")); } if ((key.getAlgorithm()) == (PatchListKey.Algorithm.OPTIMIZED_DIFF)) { diffSummaryCache.put(com.google.gerrit.server.patch.DiffSummaryKey.fromPatchListKey(key), com.google.gerrit.server.patch.DiffSummaryLoader.toDiffSummary(pl)); } return pl; } catch (java.util.concurrent.ExecutionException e) { PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.patch.PatchListNotAvailableException(e); } catch (com.google.common.util.concurrent.UncheckedExecutionException e) { if ((e.getCause()) instanceof org.eclipse.jgit.errors.LargeObjectException) { fileCache.put(key, new com.google.gerrit.server.patch.PatchListCacheImpl.LargeObjectTombstone()); PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.patch.PatchListNotAvailableException(e); } throw e; } }",b8501afb49681d2b7c01ceb9e9ac1ca5ca1eb4ad,"@java.lang.Override public com.google.gerrit.server.patchlib.PatchList get(com.google.gerrit.server.patchlib.PatchListKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.patchlib.PatchListNotAvailableException { try { com.google.gerrit.server.patchlib.PatchList pl = fileCache.get(key, fileLoaderFactory.create(key, project)); if (pl instanceof com.google.gerrit.server.patch.PatchListCacheImpl.LargeObjectTombstone) { throw new com.google.gerrit.server.patch.PatchListObjectTooLargeException(((""Error computing "" + key) + "". Previous attempt failed with LargeObjectException"")); } if ((key.getAlgorithm()) == (PatchListKey.Algorithm.OPTIMIZED_DIFF)) { diffSummaryCache.put(com.google.gerrit.server.patchlib.DiffSummaryKey.fromPatchListKey(key), com.google.gerrit.server.patch.DiffSummaryLoader.toDiffSummary(pl)); } return pl; } catch (java.util.concurrent.ExecutionException e) { PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.patchlib.PatchListNotAvailableException(e); } catch (com.google.common.util.concurrent.UncheckedExecutionException e) { if ((e.getCause()) instanceof org.eclipse.jgit.errors.LargeObjectException) { fileCache.put(key, new com.google.gerrit.server.patch.PatchListCacheImpl.LargeObjectTombstone()); PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.patchlib.PatchListNotAvailableException(e); } throw e; } }",9b11351635be3a3ae906e55a23a211c3a1614f6f,"@java.lang.Override public com.google.gerrit.server.diff.PatchList get(com.google.gerrit.server.diff.PatchListKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.diff.PatchListNotAvailableException { try { com.google.gerrit.server.diff.PatchList pl = fileCache.get(key, fileLoaderFactory.create(key, project)); if (pl instanceof com.google.gerrit.server.patch.PatchListCacheImpl.LargeObjectTombstone) { throw new com.google.gerrit.server.patch.PatchListObjectTooLargeException(((""Error computing "" + key) + "". Previous attempt failed with LargeObjectException"")); } if ((key.getAlgorithm()) == (PatchListKey.Algorithm.OPTIMIZED_DIFF)) { diffSummaryCache.put(com.google.gerrit.server.diff.DiffSummaryKey.fromPatchListKey(key), com.google.gerrit.server.patch.DiffSummaryLoader.toDiffSummary(pl)); } return pl; } catch (java.util.concurrent.ExecutionException e) { PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.diff.PatchListNotAvailableException(e); } catch (com.google.common.util.concurrent.UncheckedExecutionException e) { if ((e.getCause()) instanceof org.eclipse.jgit.errors.LargeObjectException) { fileCache.put(key, new com.google.gerrit.server.patch.PatchListCacheImpl.LargeObjectTombstone()); PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.diff.PatchListNotAvailableException(e); } throw e; } }",799880ee3550a82948d44777b09158da457a5f90,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,@java.lang.Override public java.lang.String getFilePath(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit) { return edit.getNewFilePath(); },a1fae008010f2cc8d5911b2928e316e26ceec7af,@java.lang.Override public java.lang.String getFilePath(com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit edit) { return edit.getNewFilePath(); },13daa17b2f3d59af4ec35d3a1d65a042f8bf2d61,@java.lang.Override public java.lang.String getFilePath(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit) { return edit.getNewFilePath(); },a1fae008010f2cc8d5911b2928e316e26ceec7af,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_mail_send_CommentSender.java,"private java.util.List<java.lang.String> getLinesOfComment(com.google.gerrit.reviewdb.client.Comment comment, com.google.gerrit.server.patch.PatchFile fileData) { java.util.List<java.lang.String> lines = new java.util.ArrayList<>(); if ((comment.lineNbr) == 0) { return lines; } if ((comment.range) == null) { lines.add(getLine(fileData, comment.side, comment.lineNbr)); } else { lines.addAll(getLinesByRange(comment.range, fileData, comment.side)); } return lines; }",e02fcaf879de0769896056d2a516c07a9ff34c66,"private java.util.List<java.lang.String> getLinesOfComment(com.google.gerrit.reviewdb.client.Comment comment, com.google.gerrit.server.patchlib.PatchFile fileData) { java.util.List<java.lang.String> lines = new java.util.ArrayList<>(); if ((comment.lineNbr) == 0) { return lines; } if ((comment.range) == null) { lines.add(getLine(fileData, comment.side, comment.lineNbr)); } else { lines.addAll(getLinesByRange(comment.range, fileData, comment.side)); } return lines; }",4e2f805cd56b280f695c77593e9ed663dcc3da60,"private java.util.List<java.lang.String> getLinesOfComment(com.google.gerrit.reviewdb.client.Comment comment, com.google.gerrit.server.diff.PatchFile fileData) { java.util.List<java.lang.String> lines = new java.util.ArrayList<>(); if ((comment.lineNbr) == 0) { return lines; } if ((comment.range) == null) { lines.add(getLine(fileData, comment.side, comment.lineNbr)); } else { lines.addAll(getLinesByRange(comment.range, fileData, comment.side)); } return lines; }",5f953949372b07186c86ffc1f44d698dd07e4ad5,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListCacheImpl.java,"@java.lang.Override protected void configure() { factory(PatchListLoader.Factory.class); persist(com.google.gerrit.server.patch.PatchListCacheImpl.FILE_NAME, com.google.gerrit.server.patch.PatchListKey.class, com.google.gerrit.server.patch.PatchList.class).maximumWeight((10 << 20)).weigher(com.google.gerrit.server.patch.PatchListWeigher.class); factory(IntraLineLoader.Factory.class); persist(com.google.gerrit.server.patch.PatchListCacheImpl.INTRA_NAME, com.google.gerrit.server.patch.IntraLineDiffKey.class, com.google.gerrit.server.patch.IntraLineDiff.class).maximumWeight((10 << 20)).weigher(com.google.gerrit.server.patch.IntraLineWeigher.class); factory(DiffSummaryLoader.Factory.class); persist(com.google.gerrit.server.patch.PatchListCacheImpl.DIFF_SUMMARY, com.google.gerrit.server.patch.DiffSummaryKey.class, com.google.gerrit.server.patch.DiffSummary.class).maximumWeight((10 << 20)).weigher(com.google.gerrit.server.patch.DiffSummaryWeigher.class).diskLimit((1 << 30)); bind(com.google.gerrit.server.patch.PatchListCacheImpl.class); bind(com.google.gerrit.server.patch.PatchListCache.class).to(com.google.gerrit.server.patch.PatchListCacheImpl.class); }",50c44ba15738e46ce886d1c71f164d768ed731fa,"@java.lang.Override protected void configure() { factory(PatchListLoader.Factory.class); persist(com.google.gerrit.server.patch.PatchListCacheImpl.FILE_NAME, com.google.gerrit.server.patchlib.PatchListKey.class, com.google.gerrit.server.patchlib.PatchList.class).maximumWeight((10 << 20)).weigher(com.google.gerrit.server.patchlib.PatchListWeigher.class); factory(IntraLineLoader.Factory.class); persist(com.google.gerrit.server.patch.PatchListCacheImpl.INTRA_NAME, com.google.gerrit.server.patchlib.IntraLineDiffKey.class, com.google.gerrit.server.patchlib.IntraLineDiff.class).maximumWeight((10 << 20)).weigher(com.google.gerrit.server.patchlib.IntraLineWeigher.class); factory(DiffSummaryLoader.Factory.class); persist(com.google.gerrit.server.patch.PatchListCacheImpl.DIFF_SUMMARY, com.google.gerrit.server.patchlib.DiffSummaryKey.class, com.google.gerrit.server.patchlib.DiffSummary.class).maximumWeight((10 << 20)).weigher(com.google.gerrit.server.patchlib.DiffSummaryWeigher.class).diskLimit((1 << 30)); bind(com.google.gerrit.server.patch.PatchListCacheImpl.class); bind(com.google.gerrit.server.patchlib.PatchListCache.class).to(com.google.gerrit.server.patch.PatchListCacheImpl.class); }",a74892674cf240643d9d9c03e2f83885e6968522,"@java.lang.Override protected void configure() { factory(PatchListLoader.Factory.class); persist(com.google.gerrit.server.patch.PatchListCacheImpl.FILE_NAME, com.google.gerrit.server.diff.PatchListKey.class, com.google.gerrit.server.diff.PatchList.class).maximumWeight((10 << 20)).weigher(com.google.gerrit.server.diff.PatchListWeigher.class); factory(IntraLineLoader.Factory.class); persist(com.google.gerrit.server.patch.PatchListCacheImpl.INTRA_NAME, com.google.gerrit.server.diff.IntraLineDiffKey.class, com.google.gerrit.server.diff.IntraLineDiff.class).maximumWeight((10 << 20)).weigher(com.google.gerrit.server.patch.IntraLineWeigher.class); factory(DiffSummaryLoader.Factory.class); persist(com.google.gerrit.server.patch.PatchListCacheImpl.DIFF_SUMMARY, com.google.gerrit.server.diff.DiffSummaryKey.class, com.google.gerrit.server.diff.DiffSummary.class).maximumWeight((10 << 20)).weigher(com.google.gerrit.server.patch.DiffSummaryWeigher.class).diskLimit((1 << 30)); bind(com.google.gerrit.server.patch.PatchListCacheImpl.class); bind(com.google.gerrit.server.diff.PatchListCache.class).to(com.google.gerrit.server.patch.PatchListCacheImpl.class); }",c99a8e09015392ef1944c1ffc1d551188f93d79d,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,"static com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit create(com.google.gerrit.server.patch.PatchListEntry patchListEntry, org.eclipse.jgit.diff.Edit edit) { return com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit.create(patchListEntry.getOldName(), patchListEntry.getNewName(), edit.getBeginA(), edit.getEndA(), edit.getBeginB(), edit.getEndB(), false); }",334bd3621a411abbe37ef10488ded28c4ec027e0,"static com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit create(com.google.gerrit.server.patchlib.PatchListEntry patchListEntry, org.eclipse.jgit.diff.Edit edit) { return com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit.create(patchListEntry.getOldName(), patchListEntry.getNewName(), edit.getBeginA(), edit.getEndA(), edit.getBeginB(), edit.getEndB(), false); }",788a0587f75db294ffa944cab629f287655b2e49,"static com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit create(com.google.gerrit.server.diff.PatchListEntry patchListEntry, org.eclipse.jgit.diff.Edit edit) { return com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit.create(patchListEntry.getOldName(), patchListEntry.getNewName(), edit.getBeginA(), edit.getEndA(), edit.getBeginB(), edit.getEndB(), false); }",848fc39e30839c498243a0aa6ad5622ce0f38119,2017-11-15 12:52:05,11
140535,java_gerrit_PRED_commit_edits_2.java,"private com.google.gerrit.server.patch.Text load(org.eclipse.jgit.lib.ObjectId tree, java.lang.String path, org.eclipse.jgit.lib.ObjectReader reader) throws java.io.IOException, org.eclipse.jgit.errors.CorruptObjectException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { if (path == null) { return com.google.gerrit.server.patch.Text.EMPTY; } final org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(reader, path, tree); if (tw == null) { return com.google.gerrit.server.patch.Text.EMPTY; } if ((tw.getFileMode(0).getObjectType()) != (org.eclipse.jgit.lib.Constants.OBJ_BLOB)) { return com.google.gerrit.server.patch.Text.EMPTY; } return new com.google.gerrit.server.patch.Text(reader.open(tw.getObjectId(0), Constants.OBJ_BLOB)); }",f138ee29602046a8a6735a7e562ff3eb1c02df3e,"private com.google.gerrit.server.patchlib.Text load(org.eclipse.jgit.lib.ObjectId tree, java.lang.String path, org.eclipse.jgit.lib.ObjectReader reader) throws java.io.IOException, org.eclipse.jgit.errors.CorruptObjectException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { if (path == null) { return com.google.gerrit.server.patchlib.Text.EMPTY; } final org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(reader, path, tree); if (tw == null) { return com.google.gerrit.server.patchlib.Text.EMPTY; } if ((tw.getFileMode(0).getObjectType()) != (org.eclipse.jgit.lib.Constants.OBJ_BLOB)) { return com.google.gerrit.server.patchlib.Text.EMPTY; } return new com.google.gerrit.server.patchlib.Text(reader.open(tw.getObjectId(0), Constants.OBJ_BLOB)); }",59e74b1a1d27364524670459c294451656e03c47,"private com.google.gerrit.server.diff.Text load(org.eclipse.jgit.lib.ObjectId tree, java.lang.String path, org.eclipse.jgit.lib.ObjectReader reader) throws java.io.IOException, org.eclipse.jgit.errors.CorruptObjectException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { if (path == null) { return com.google.gerrit.server.diff.Text.EMPTY; } final org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(reader, path, tree); if (tw == null) { return com.google.gerrit.server.diff.Text.EMPTY; } if ((tw.getFileMode(0).getObjectType()) != (org.eclipse.jgit.lib.Constants.OBJ_BLOB)) { return com.google.gerrit.server.diff.Text.EMPTY; } return new com.google.gerrit.server.diff.Text(reader.open(tw.getObjectId(0), Constants.OBJ_BLOB)); }",66234356b4267fe335b924a79aca11a491ac5440,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_IntraLineDiff.java,"private void readObject(java.io.ObjectInputStream in) throws java.io.IOException { status = readEnum(in, com.google.gerrit.server.patch.IntraLineDiff.Status.values()); int editCount = readVarInt32(in); org.eclipse.jgit.diff.Edit[] editArray = new org.eclipse.jgit.diff.Edit[editCount]; for (int i = 0; i < editCount; i++) { editArray[i] = com.google.gerrit.server.patch.IntraLineDiff.readEdit(in); int innerCount = readVarInt32(in); if (0 < innerCount) { org.eclipse.jgit.diff.Edit[] inner = new org.eclipse.jgit.diff.Edit[innerCount]; for (int j = 0; j < innerCount; j++) { inner[j] = com.google.gerrit.server.patch.IntraLineDiff.readEdit(in); } editArray[i] = new org.eclipse.jgit.diff.ReplaceEdit(editArray[i], com.google.gerrit.server.patch.IntraLineDiff.toList(inner)); } } edits = com.google.common.collect.ImmutableList.copyOf(editArray); }",29c560bbc8e24a4ce576a067060b30b41879be4d,"private void readObject(java.io.ObjectInputStream in) throws java.io.IOException { status = readEnum(in, com.google.gerrit.server.patchlib.IntraLineDiff.Status.values()); int editCount = readVarInt32(in); org.eclipse.jgit.diff.Edit[] editArray = new org.eclipse.jgit.diff.Edit[editCount]; for (int i = 0; i < editCount; i++) { editArray[i] = com.google.gerrit.server.patchlib.IntraLineDiff.readEdit(in); int innerCount = readVarInt32(in); if (0 < innerCount) { org.eclipse.jgit.diff.Edit[] inner = new org.eclipse.jgit.diff.Edit[innerCount]; for (int j = 0; j < innerCount; j++) { inner[j] = com.google.gerrit.server.patchlib.IntraLineDiff.readEdit(in); } editArray[i] = new org.eclipse.jgit.diff.ReplaceEdit(editArray[i], com.google.gerrit.server.patchlib.IntraLineDiff.toList(inner)); } } edits = com.google.common.collect.ImmutableList.copyOf(editArray); }",5860f01eea5649112cf5814f1953585626005ea2,"private void readObject(java.io.ObjectInputStream in) throws java.io.IOException { status = readEnum(in, com.google.gerrit.server.diff.IntraLineDiff.Status.values()); int editCount = readVarInt32(in); org.eclipse.jgit.diff.Edit[] editArray = new org.eclipse.jgit.diff.Edit[editCount]; for (int i = 0; i < editCount; i++) { editArray[i] = com.google.gerrit.server.diff.IntraLineDiff.readEdit(in); int innerCount = readVarInt32(in); if (0 < innerCount) { org.eclipse.jgit.diff.Edit[] inner = new org.eclipse.jgit.diff.Edit[innerCount]; for (int j = 0; j < innerCount; j++) { inner[j] = com.google.gerrit.server.diff.IntraLineDiff.readEdit(in); } editArray[i] = new org.eclipse.jgit.diff.ReplaceEdit(editArray[i], com.google.gerrit.server.diff.IntraLineDiff.toList(inner)); } } edits = com.google.common.collect.ImmutableList.copyOf(editArray); }",aa41e2ceb838fc3aaf3075217450bf758295bf00,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,"com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit create(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit, int shiftedAmount, java.lang.String adjustedFilePath);",2e0cc43efb4a91a6f08e31787d1f0ab9926c5610,"com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit create(com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit edit, int shiftedAmount, java.lang.String adjustedFilePath);",9b5611d954e54cabfeab2e8fc4819366855f4b3b,"com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit create(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit, int shiftedAmount, java.lang.String adjustedFilePath);",2e0cc43efb4a91a6f08e31787d1f0ab9926c5610,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_rules_PrologEnvironment.java,public com.google.gerrit.server.patch.PatchListCache getPatchListCache() { return patchListCache; },86307d2286e1b88c905ac042177b8c0c1e313006,public com.google.gerrit.server.patchlib.PatchListCache getPatchListCache() { return patchListCache; },3145030d8fe9286bf96990d156a4ee99bb8346d9,public com.google.gerrit.server.diff.PatchListCache getPatchListCache() { return patchListCache; },24bdf3d224a3e84fd70b393ee8129e7e5b585601,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchScriptBuilder.java,private static java.lang.String oldName(com.google.gerrit.server.patch.PatchListEntry entry) { switch (entry.getChangeType()) { case ADDED : return null; case DELETED : case MODIFIED : case REWRITE : return entry.getNewName(); case COPIED : case RENAMED : default : return entry.getOldName(); } },935931657a772865718a659e869c53b7a558c444,private static java.lang.String oldName(com.google.gerrit.server.patchlib.PatchListEntry entry) { switch (entry.getChangeType()) { case ADDED : return null; case DELETED : case MODIFIED : case REWRITE : return entry.getNewName(); case COPIED : case RENAMED : default : return entry.getOldName(); } },dfbafd331be6b5c6db339b7a4333da99153b7c29,private static java.lang.String oldName(com.google.gerrit.server.diff.PatchListEntry entry) { switch (entry.getChangeType()) { case ADDED : return null; case DELETED : case MODIFIED : case REWRITE : return entry.getNewName(); case COPIED : case RENAMED : default : return entry.getOldName(); } },1ff4335cae2ccd2f3ae05adfb82749c930e9d53b,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListCacheImpl.java,"@java.lang.Override public org.eclipse.jgit.lib.ObjectId getOldId(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.lang.Integer parentNum) throws com.google.gerrit.server.patch.PatchListNotAvailableException { return get(change, patchSet, parentNum).getOldId(); }",32b4d753efdf9662fba54caa008fe4d68c0736de,"@java.lang.Override public org.eclipse.jgit.lib.ObjectId getOldId(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.lang.Integer parentNum) throws com.google.gerrit.server.patchlib.PatchListNotAvailableException { return get(change, patchSet, parentNum).getOldId(); }",52be42045b18d29c334c48263465bec3b943f92c,"@java.lang.Override public org.eclipse.jgit.lib.ObjectId getOldId(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.lang.Integer parentNum) throws com.google.gerrit.server.diff.PatchListNotAvailableException { return get(change, patchSet, parentNum).getOldId(); }",67d0c09c253997edbff921efc3f43033d7fd963b,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListCacheImpl.java,"@java.lang.Override public com.google.gerrit.server.patch.PatchList get(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gerrit.server.patch.PatchListNotAvailableException { return get(change, patchSet, null); }",77d1a89d9ec3ec8b254f6f5a340dff07b20bbee2,"@java.lang.Override public com.google.gerrit.server.patchlib.PatchList get(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gerrit.server.patchlib.PatchListNotAvailableException { return get(change, patchSet, null); }",3230faef1c30b10c51f5b45e124ecb8e88af5cb0,"@java.lang.Override public com.google.gerrit.server.diff.PatchList get(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gerrit.server.diff.PatchListNotAvailableException { return get(change, patchSet, null); }",5ab122a6d704e685321fd21ed3b6c3efbbf1891a,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,"private void transformEdits(java.util.List<com.google.gerrit.server.patch.PatchListEntry> transformingEntries, com.google.gerrit.server.patch.EditTransformer.SideStrategy sideStrategy) { java.util.Map<java.lang.String, java.util.List<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit>> editsPerFilePath = edits.stream().collect(java.util.stream.Collectors.groupingBy(sideStrategy::getFilePath)); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.server.patch.PatchListEntry>> transEntriesPerPath = transformingEntries.stream().collect(java.util.stream.Collectors.groupingBy(com.google.gerrit.server.patch.EditTransformer::getOldFilePath)); edits = editsPerFilePath.entrySet().stream().flatMap(( pathAndEdits) -> { java.util.List<com.google.gerrit.server.patch.PatchListEntry> transEntries = transEntriesPerPath.getOrDefault(pathAndEdits.getKey(), com.google.common.collect.ImmutableList.of()); return com.google.gerrit.server.patch.EditTransformer.transformEdits(sideStrategy, pathAndEdits.getValue(), transEntries); }).collect(java.util.stream.Collectors.toList()); }",10d6292dc0c415ada55c5f9d0bc8a61a89ca3e72,"private void transformEdits(java.util.List<com.google.gerrit.server.patchlib.PatchListEntry> transformingEntries, com.google.gerrit.server.patchlib.EditTransformer.SideStrategy sideStrategy) { java.util.Map<java.lang.String, java.util.List<com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit>> editsPerFilePath = edits.stream().collect(java.util.stream.Collectors.groupingBy(sideStrategy::getFilePath)); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.server.patchlib.PatchListEntry>> transEntriesPerPath = transformingEntries.stream().collect(java.util.stream.Collectors.groupingBy(com.google.gerrit.server.patchlib.EditTransformer::getOldFilePath)); edits = editsPerFilePath.entrySet().stream().flatMap(( pathAndEdits) -> { java.util.List<com.google.gerrit.server.patchlib.PatchListEntry> transEntries = transEntriesPerPath.getOrDefault(pathAndEdits.getKey(), com.google.common.collect.ImmutableList.of()); return com.google.gerrit.server.patchlib.EditTransformer.transformEdits(sideStrategy, pathAndEdits.getValue(), transEntries); }).collect(java.util.stream.Collectors.toList()); }",feb3063a3c3ea942ce3da77691310dc17365af66,"private void transformEdits(java.util.List<com.google.gerrit.server.diff.PatchListEntry> transformingEntries, com.google.gerrit.server.patch.EditTransformer.SideStrategy sideStrategy) { java.util.Map<java.lang.String, java.util.List<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit>> editsPerFilePath = edits.stream().collect(java.util.stream.Collectors.groupingBy(sideStrategy::getFilePath)); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.server.diff.PatchListEntry>> transEntriesPerPath = transformingEntries.stream().collect(java.util.stream.Collectors.groupingBy(com.google.gerrit.server.patch.EditTransformer::getOldFilePath)); edits = editsPerFilePath.entrySet().stream().flatMap(( pathAndEdits) -> { java.util.List<com.google.gerrit.server.diff.PatchListEntry> transEntries = transEntriesPerPath.getOrDefault(pathAndEdits.getKey(), com.google.common.collect.ImmutableList.of()); return com.google.gerrit.server.patch.EditTransformer.transformEdits(sideStrategy, pathAndEdits.getValue(), transEntries); }).collect(java.util.stream.Collectors.toList()); }",cadb74ad35101e2626f5cb67acbcfc4114f95e49,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchScriptBuilder.java,"com.google.gerrit.common.data.PatchScript toPatchScript(com.google.gerrit.server.patch.PatchListEntry content, com.google.gerrit.common.data.CommentDetail comments, java.util.List<com.google.gerrit.reviewdb.client.Patch> history) throws java.io.IOException { reader = db.newObjectReader(); try { return build(content, comments, history); } finally { reader.close(); } }",32aec799e2a6f4666a17c8a9236d6eeb98b8087b,"com.google.gerrit.common.data.PatchScript toPatchScript(com.google.gerrit.server.patchlib.PatchListEntry content, com.google.gerrit.common.data.CommentDetail comments, java.util.List<com.google.gerrit.reviewdb.client.Patch> history) throws java.io.IOException { reader = db.newObjectReader(); try { return build(content, comments, history); } finally { reader.close(); } }",55b439228c764142d16738ba2c1e6efba69ce072,"com.google.gerrit.common.data.PatchScript toPatchScript(com.google.gerrit.server.diff.PatchListEntry content, com.google.gerrit.common.data.CommentDetail comments, java.util.List<com.google.gerrit.reviewdb.client.Patch> history) throws java.io.IOException { reader = db.newObjectReader(); try { return build(content, comments, history); } finally { reader.close(); } }",3c9bad86adb42dfb345104461e4e15e2e60689ae,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_reviewdb_client_Patch.java,public com.google.gerrit.reviewdb.client.Patch.PatchType getPatchType() { return com.google.gerrit.reviewdb.client.Patch.PatchType.forCode(patchType); },b86ffd8dae421f2698ad4581aebdb15e3da46809,public com.google.gerrit.reviewdb.client.PatchType getPatchType() { return com.google.gerrit.reviewdb.client.PatchType.forCode(patchType); },4654952b3808daa68327ddeab6559e129b587914,public com.google.gerrit.reviewdb.client.Patch.PatchType getPatchType() { return com.google.gerrit.reviewdb.client.Patch.PatchType.forCode(patchType); },b86ffd8dae421f2698ad4581aebdb15e3da46809,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_reviewdb_client_Patch.java,public void setPatchType(com.google.gerrit.reviewdb.client.Patch.PatchType type) { patchType = type.getCode(); },88b724c93a33909f1bd8edfa1ccb17cc740d93ca,public void setPatchType(com.google.gerrit.reviewdb.client.PatchType type) { patchType = type.getCode(); },13e32bd88231c5faa99d1ea3d332285d8b072e8a,public void setPatchType(com.google.gerrit.reviewdb.client.Patch.PatchType type) { patchType = type.getCode(); },88b724c93a33909f1bd8edfa1ccb17cc740d93ca,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,int getEnd(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit);,afbab64d55d31af300d5b532f2235c01b9ffd061,int getEnd(com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit edit);,522199ca3677ec00b5382bdfc4aae1313c982b9b,int getEnd(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit);,afbab64d55d31af300d5b532f2235c01b9ffd061,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,"static com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit createForNoContentEdit(com.google.gerrit.server.patch.PatchListEntry patchListEntry) { return com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit.create(patchListEntry.getOldName(), patchListEntry.getNewName(), (-1), (-1), (-1), (-1), false); }",d44cf37459decb991fd347404ffa695f660663a6,"static com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit createForNoContentEdit(com.google.gerrit.server.patchlib.PatchListEntry patchListEntry) { return com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit.create(patchListEntry.getOldName(), patchListEntry.getNewName(), (-1), (-1), (-1), (-1), false); }",8e308dd5ab8ebfa1167cdf7c6b686b833bf89099,"static com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit createForNoContentEdit(com.google.gerrit.server.diff.PatchListEntry patchListEntry) { return com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit.create(patchListEntry.getOldName(), patchListEntry.getNewName(), (-1), (-1), (-1), (-1), false); }",6d9acaf1c8f44be47073324263695c7c5e43c129,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListCacheImpl.java,"@java.lang.Override public com.google.gerrit.server.patch.IntraLineDiff getIntraLineDiff(com.google.gerrit.server.patch.IntraLineDiffKey key, com.google.gerrit.server.patch.IntraLineDiffArgs args) { if (computeIntraline) { try { return intraCache.get(key, intraLoaderFactory.create(key, args)); } catch (java.util.concurrent.ExecutionException | org.eclipse.jgit.errors.LargeObjectException e) { IntraLineLoader.log.warn((""Error computing "" + key), e); return new com.google.gerrit.server.patch.IntraLineDiff(IntraLineDiff.Status.ERROR); } } return new com.google.gerrit.server.patch.IntraLineDiff(IntraLineDiff.Status.DISABLED); }",6508f51b69c5455b77ec6ac4a207c921d596d918,"@java.lang.Override public com.google.gerrit.server.patchlib.IntraLineDiff getIntraLineDiff(com.google.gerrit.server.patchlib.IntraLineDiffKey key, com.google.gerrit.server.patchlib.IntraLineDiffArgs args) { if (computeIntraline) { try { return intraCache.get(key, intraLoaderFactory.create(key, args)); } catch (java.util.concurrent.ExecutionException | org.eclipse.jgit.errors.LargeObjectException e) { IntraLineLoader.log.warn((""Error computing "" + key), e); return new com.google.gerrit.server.patchlib.IntraLineDiff(IntraLineDiff.Status.ERROR); } } return new com.google.gerrit.server.patchlib.IntraLineDiff(IntraLineDiff.Status.DISABLED); }",8cd81286d9d1a23464849082259428442350acc3,"@java.lang.Override public com.google.gerrit.server.diff.IntraLineDiff getIntraLineDiff(com.google.gerrit.server.diff.IntraLineDiffKey key, com.google.gerrit.server.diff.IntraLineDiffArgs args) { if (computeIntraline) { try { return intraCache.get(key, intraLoaderFactory.create(key, args)); } catch (java.util.concurrent.ExecutionException | org.eclipse.jgit.errors.LargeObjectException e) { IntraLineLoader.log.warn((""Error computing "" + key), e); return new com.google.gerrit.server.diff.IntraLineDiff(IntraLineDiff.Status.ERROR); } } return new com.google.gerrit.server.diff.IntraLineDiff(IntraLineDiff.Status.DISABLED); }",31f6c47f912eb9d50745c7ec1f97be75158501e4,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,"public void transformReferencesOfSideB(java.util.List<com.google.gerrit.server.patch.PatchListEntry> transformationEntries) { transformEdits(transformationEntries, com.google.gerrit.server.patch.EditTransformer.SideBStrategy.INSTANCE); }",0c4bb311a0d8f722506712906d9f0a799bc880ab,"public void transformReferencesOfSideB(java.util.List<com.google.gerrit.server.patchlib.PatchListEntry> transformationEntries) { transformEdits(transformationEntries, com.google.gerrit.server.patchlib.EditTransformer.SideBStrategy.INSTANCE); }",03232d36fe0af15a8d52756c1f53b70fd4b178bd,"public void transformReferencesOfSideB(java.util.List<com.google.gerrit.server.diff.PatchListEntry> transformationEntries) { transformEdits(transformationEntries, com.google.gerrit.server.patch.EditTransformer.SideBStrategy.INSTANCE); }",e43f507e8d765222f9895973af48eb98050678ee,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_IntraLineLoader.java,"private static boolean canCoalesce(com.google.gerrit.server.patch.CharText a, int b, int e) { while (b < e) { if ((a.charAt((b++))) == '\n') { return false; } } return true; }",d4e7876341225d230d19bea006ad9fc5318f5c7b,"private static boolean canCoalesce(com.google.gerrit.server.patchlib.CharText a, int b, int e) { while (b < e) { if ((a.charAt((b++))) == '\n') { return false; } } return true; }",5c100d71a1d00c4d779da227796fa362de0d8abb,"private static boolean canCoalesce(com.google.gerrit.server.diff.CharText a, int b, int e) { while (b < e) { if ((a.charAt((b++))) == '\n') { return false; } } return true; }",458ee2489937eba007008d450be2b2a43846af0a,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,java.lang.String getFilePath(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit);,be08101756a972a416243ba43079ea0104b99822,java.lang.String getFilePath(com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit edit);,fb9fa2281f458a3a4448fd387c73b1c2fefd9880,java.lang.String getFilePath(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit);,be08101756a972a416243ba43079ea0104b99822,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_IntraLineLoader.java,"@java.lang.Override public com.google.gerrit.server.patch.IntraLineDiff call() throws java.lang.Exception { java.util.concurrent.Future<com.google.gerrit.server.patch.IntraLineDiff> result = diffExecutor.submit(() -> com.google.gerrit.server.patch.IntraLineLoader.compute(args.aText(), args.bText(), args.edits())); try { return result.get(timeoutMillis, java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.InterruptedException | java.util.concurrent.TimeoutException e) { com.google.gerrit.server.patch.IntraLineLoader.log.warn(((((((((((((timeoutMillis) + "" ms timeout reached for IntraLineDiff"") + "" in project "") + (args.project())) + "" on commit "") + (args.commit().name())) + "" for path "") + (args.path())) + "" comparing "") + (key.getBlobA().name())) + "".."") + (key.getBlobB().name()))); result.cancel(true); return new com.google.gerrit.server.patch.IntraLineDiff(IntraLineDiff.Status.TIMEOUT); } catch (java.util.concurrent.ExecutionException e) { com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), java.lang.Exception.class); throw new java.lang.Exception(e.getMessage(), e.getCause()); } }",526ad303a145fbb7f94e01531402499a394f324e,"@java.lang.Override public com.google.gerrit.server.patchlib.IntraLineDiff call() throws java.lang.Exception { java.util.concurrent.Future<com.google.gerrit.server.patchlib.IntraLineDiff> result = diffExecutor.submit(() -> com.google.gerrit.server.patch.IntraLineLoader.compute(args.aText(), args.bText(), args.edits())); try { return result.get(timeoutMillis, java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.InterruptedException | java.util.concurrent.TimeoutException e) { com.google.gerrit.server.patch.IntraLineLoader.log.warn(((((((((((((timeoutMillis) + "" ms timeout reached for IntraLineDiff"") + "" in project "") + (args.project())) + "" on commit "") + (args.commit().name())) + "" for path "") + (args.path())) + "" comparing "") + (key.getBlobA().name())) + "".."") + (key.getBlobB().name()))); result.cancel(true); return new com.google.gerrit.server.patchlib.IntraLineDiff(IntraLineDiff.Status.TIMEOUT); } catch (java.util.concurrent.ExecutionException e) { com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), java.lang.Exception.class); throw new java.lang.Exception(e.getMessage(), e.getCause()); } }",27b3589af64add33f940ae137dc80ae4e26294ea,"@java.lang.Override public com.google.gerrit.server.diff.IntraLineDiff call() throws java.lang.Exception { java.util.concurrent.Future<com.google.gerrit.server.diff.IntraLineDiff> result = diffExecutor.submit(() -> com.google.gerrit.server.patch.IntraLineLoader.compute(args.aText(), args.bText(), args.edits())); try { return result.get(timeoutMillis, java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.InterruptedException | java.util.concurrent.TimeoutException e) { com.google.gerrit.server.patch.IntraLineLoader.log.warn(((((((((((((timeoutMillis) + "" ms timeout reached for IntraLineDiff"") + "" in project "") + (args.project())) + "" on commit "") + (args.commit().name())) + "" for path "") + (args.path())) + "" comparing "") + (key.getBlobA().name())) + "".."") + (key.getBlobB().name()))); result.cancel(true); return new com.google.gerrit.server.diff.IntraLineDiff(IntraLineDiff.Status.TIMEOUT); } catch (java.util.concurrent.ExecutionException e) { com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), java.lang.Exception.class); throw new java.lang.Exception(e.getMessage(), e.getCause()); } }",ad8cd8039b8829418445318ad24f35bb0d3d21da,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_extensions_events_ChangeRestored.java,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account restorer, java.lang.String reason, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeRestored.Event event = new com.google.gerrit.server.extensions.events.ChangeRestored.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(restorer), reason, when); for (com.google.gerrit.extensions.events.ChangeRestoredListener l : listeners) { try { l.onChangeRestored(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ChangeRestored.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeRestored.log.error(""Couldn't fire event"", e); } }",e8009de7255092a4a5ec7f7904254ffc83a87109,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account restorer, java.lang.String reason, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeRestored.Event event = new com.google.gerrit.server.extensions.events.ChangeRestored.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(restorer), reason, when); for (com.google.gerrit.extensions.events.ChangeRestoredListener l : listeners) { try { l.onChangeRestored(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ChangeRestored.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeRestored.log.error(""Couldn't fire event"", e); } }",77d0ddfc2036ee08725ff0a2c34d79bc1dfb10de,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account restorer, java.lang.String reason, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeRestored.Event event = new com.google.gerrit.server.extensions.events.ChangeRestored.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(restorer), reason, when); for (com.google.gerrit.extensions.events.ChangeRestoredListener l : listeners) { try { l.onChangeRestored(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ChangeRestored.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.diff.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeRestored.log.error(""Couldn't fire event"", e); } }",a727cd077f2b593629e525b0f350535b61d025a4,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_extensions_events_RevisionCreated.java,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.reviewdb.client.Account uploader, java.sql.Timestamp when, com.google.gerrit.extensions.api.changes.NotifyHandling notify) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.RevisionCreated.Event event = new com.google.gerrit.server.extensions.events.RevisionCreated.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), util.accountInfo(uploader), when, notify); for (com.google.gerrit.extensions.events.RevisionCreatedListener l : listeners) { try { l.onRevisionCreated(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.RevisionCreated.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.RevisionCreated.log.error(""Couldn't fire event"", e); } }",8c7f41bbd102cbcafb024992309972567bbe1202,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.reviewdb.client.Account uploader, java.sql.Timestamp when, com.google.gerrit.extensions.api.changes.NotifyHandling notify) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.RevisionCreated.Event event = new com.google.gerrit.server.extensions.events.RevisionCreated.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), util.accountInfo(uploader), when, notify); for (com.google.gerrit.extensions.events.RevisionCreatedListener l : listeners) { try { l.onRevisionCreated(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.RevisionCreated.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.RevisionCreated.log.error(""Couldn't fire event"", e); } }",df37ed3d09517398a94d088bbe147215e13543a9,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.reviewdb.client.Account uploader, java.sql.Timestamp when, com.google.gerrit.extensions.api.changes.NotifyHandling notify) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.RevisionCreated.Event event = new com.google.gerrit.server.extensions.events.RevisionCreated.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), util.accountInfo(uploader), when, notify); for (com.google.gerrit.extensions.events.RevisionCreatedListener l : listeners) { try { l.onRevisionCreated(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.RevisionCreated.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.diff.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.RevisionCreated.log.error(""Couldn't fire event"", e); } }",2fcb544407b80b3c930357f0d0bdfea55a60df1c,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListCacheImpl.java,"private com.google.gerrit.server.patch.PatchList get(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.lang.Integer parentNum) throws com.google.gerrit.server.patch.PatchListNotAvailableException { com.google.gerrit.reviewdb.client.Project.NameKey project = change.getProject(); if ((patchSet.getRevision()) == null) { throw new com.google.gerrit.server.patch.PatchListNotAvailableException((""revision is null for "" + (patchSet.getId()))); } org.eclipse.jgit.lib.ObjectId b = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws = com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace.IGNORE_NONE; if (parentNum != null) { return get(com.google.gerrit.server.patch.PatchListKey.againstParentNum(parentNum, b, ws), project); } return get(com.google.gerrit.server.patch.PatchListKey.againstDefaultBase(b, ws), project); }",4f43dbf0fd0313fe01dd748c6c95a6fe9f29b85c,"private com.google.gerrit.server.patchlib.PatchList get(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.lang.Integer parentNum) throws com.google.gerrit.server.patchlib.PatchListNotAvailableException { com.google.gerrit.reviewdb.client.Project.NameKey project = change.getProject(); if ((patchSet.getRevision()) == null) { throw new com.google.gerrit.server.patchlib.PatchListNotAvailableException((""revision is null for "" + (patchSet.getId()))); } org.eclipse.jgit.lib.ObjectId b = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws = com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace.IGNORE_NONE; if (parentNum != null) { return get(com.google.gerrit.server.patchlib.PatchListKey.againstParentNum(parentNum, b, ws), project); } return get(com.google.gerrit.server.patchlib.PatchListKey.againstDefaultBase(b, ws), project); }",4166291c8b4b69b7211e77fbd2143f84040c7d92,"private com.google.gerrit.server.diff.PatchList get(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.lang.Integer parentNum) throws com.google.gerrit.server.diff.PatchListNotAvailableException { com.google.gerrit.reviewdb.client.Project.NameKey project = change.getProject(); if ((patchSet.getRevision()) == null) { throw new com.google.gerrit.server.diff.PatchListNotAvailableException((""revision is null for "" + (patchSet.getId()))); } org.eclipse.jgit.lib.ObjectId b = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws = com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace.IGNORE_NONE; if (parentNum != null) { return get(com.google.gerrit.server.diff.PatchListKey.againstParentNum(parentNum, b, ws), project); } return get(com.google.gerrit.server.diff.PatchListKey.againstDefaultBase(b, ws), project); }",ec4aa8515757b41b5c554d7fbb8b9e0f4605d0b5,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,"public com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> getEditsPerFilePath() { return edits.stream().collect(toMultimap(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit::getNewFilePath, java.util.function.Function.identity(), ArrayListMultimap::create)); }",f60abc01bd5a08b07179676df1ceb92f642da79d,"public com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit> getEditsPerFilePath() { return edits.stream().collect(toMultimap(com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit::getNewFilePath, java.util.function.Function.identity(), ArrayListMultimap::create)); }",dec4f40583e7e93b2e1d463d6277533cec8a36d1,"public com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> getEditsPerFilePath() { return edits.stream().collect(toMultimap(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit::getNewFilePath, java.util.function.Function.identity(), ArrayListMultimap::create)); }",f60abc01bd5a08b07179676df1ceb92f642da79d,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_IntraLineDiff.java,public com.google.common.collect.ImmutableList<org.eclipse.jgit.diff.Edit> getEdits() { return com.google.gerrit.server.patch.IntraLineDiff.deepCopyEdits(edits); },eb4079293aa89554a902d8256b52151a602a0d75,public com.google.common.collect.ImmutableList<org.eclipse.jgit.diff.Edit> getEdits() { return com.google.gerrit.server.patchlib.IntraLineDiff.deepCopyEdits(edits); },14b83e8e0916343353e022d5592448e4a9d54aa1,public com.google.common.collect.ImmutableList<org.eclipse.jgit.diff.Edit> getEdits() { return com.google.gerrit.server.diff.IntraLineDiff.deepCopyEdits(edits); },a794224ca8f3547c28d4f57e691465001813f7e9,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_CharTextComparator.java,"@java.lang.Override public boolean equals(com.google.gerrit.server.patch.CharText a, int ai, com.google.gerrit.server.patch.CharText b, int bi) { return (a.charAt(ai)) == (b.charAt(bi)); }",02f716449823257ee2f76e60f5aa57704087ba9e,"@java.lang.Override public boolean equals(com.google.gerrit.server.patchlib.CharText a, int ai, com.google.gerrit.server.patchlib.CharText b, int bi) { return (a.charAt(ai)) == (b.charAt(bi)); }",490ca5f10b7dcd1ecdb1926a4ee5d611111209d6,"@java.lang.Override public boolean equals(com.google.gerrit.server.diff.CharText a, int ai, com.google.gerrit.server.diff.CharText b, int bi) { return (a.charAt(ai)) == (b.charAt(bi)); }",4704aa95b6b67a6482349b56a256275a506c7ad4,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_DiffSummaryLoader.java,"static com.google.gerrit.server.patch.DiffSummary toDiffSummary(com.google.gerrit.server.patch.PatchList patchList) { java.util.List<java.lang.String> r = new java.util.ArrayList(patchList.getPatches().size()); for (com.google.gerrit.server.patch.PatchListEntry e : patchList.getPatches()) { if (com.google.gerrit.reviewdb.client.Patch.isMagic(e.getNewName())) { continue; } switch (e.getChangeType()) { case ADDED : case MODIFIED : case DELETED : case COPIED : case REWRITE : r.add(e.getNewName()); break; case RENAMED : r.add(e.getOldName()); r.add(e.getNewName()); break; } } java.util.Collections.sort(r); return new com.google.gerrit.server.patch.DiffSummary(r.toArray(new java.lang.String[r.size()]), patchList.getInsertions(), patchList.getDeletions()); }",d906d44a6e205d2240a52f85474ba0d1b3431e47,"static com.google.gerrit.server.patchlib.DiffSummary toDiffSummary(com.google.gerrit.server.patchlib.PatchList patchList) { java.util.List<java.lang.String> r = new java.util.ArrayList(patchList.getPatches().size()); for (com.google.gerrit.server.patchlib.PatchListEntry e : patchList.getPatches()) { if (com.google.gerrit.reviewdb.client.Patch.isMagic(e.getNewName())) { continue; } switch (e.getChangeType()) { case ADDED : case MODIFIED : case DELETED : case COPIED : case REWRITE : r.add(e.getNewName()); break; case RENAMED : r.add(e.getOldName()); r.add(e.getNewName()); break; } } java.util.Collections.sort(r); return new com.google.gerrit.server.patchlib.DiffSummary(r.toArray(new java.lang.String[r.size()]), patchList.getInsertions(), patchList.getDeletions()); }",5d51098688ee4895455e5f3d99342cd93143c8c3,"static com.google.gerrit.server.diff.DiffSummary toDiffSummary(com.google.gerrit.server.diff.PatchList patchList) { java.util.List<java.lang.String> r = new java.util.ArrayList(patchList.getPatches().size()); for (com.google.gerrit.server.diff.PatchListEntry e : patchList.getPatches()) { if (com.google.gerrit.reviewdb.client.Patch.isMagic(e.getNewName())) { continue; } switch (e.getChangeType()) { case ADDED : case MODIFIED : case DELETED : case COPIED : case REWRITE : r.add(e.getNewName()); break; case RENAMED : r.add(e.getOldName()); r.add(e.getNewName()); break; } } java.util.Collections.sort(r); return new com.google.gerrit.server.diff.DiffSummary(r.toArray(new java.lang.String[r.size()]), patchList.getInsertions(), patchList.getDeletions()); }",950ca448629f73409d7eeb68b1626f651416309b,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListKey.java,"public static com.google.gerrit.server.patch.PatchListKey againstCommit(org.eclipse.jgit.lib.AnyObjectId otherCommitId, org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { return new com.google.gerrit.server.patch.PatchListKey(otherCommitId, newId, whitespace, com.google.gerrit.server.patch.PatchListKey.Algorithm.OPTIMIZED_DIFF); }",3b142ea0a8be1a7525d66f778094bb08f2950b8c,"public static com.google.gerrit.server.patchlib.PatchListKey againstCommit(org.eclipse.jgit.lib.AnyObjectId otherCommitId, org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { return new com.google.gerrit.server.patchlib.PatchListKey(otherCommitId, newId, whitespace, com.google.gerrit.server.patchlib.PatchListKey.Algorithm.OPTIMIZED_DIFF); }",16aa34346d9941c9f0a23b76d8ff078aa405b6ea,"public static com.google.gerrit.server.diff.PatchListKey againstCommit(org.eclipse.jgit.lib.AnyObjectId otherCommitId, org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { return new com.google.gerrit.server.diff.PatchListKey(otherCommitId, newId, whitespace, com.google.gerrit.server.diff.PatchListKey.Algorithm.OPTIMIZED_DIFF); }",3c8e75dbcd605380b6bd7da9f91b76b6629c6c3f,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_mail_send_ChangeEmail.java,"protected com.google.gerrit.server.patch.PatchList getPatchList() throws com.google.gerrit.server.patch.PatchListNotAvailableException { if ((patchSet) != null) { return args.patchListCache.get(change, patchSet); } throw new com.google.gerrit.server.patch.PatchListNotAvailableException(""no patchSet specified""); }",6f1e70412c6f959f81f79367e540193195bbe83b,"protected com.google.gerrit.server.patchlib.PatchList getPatchList() throws com.google.gerrit.server.patchlib.PatchListNotAvailableException { if ((patchSet) != null) { return args.patchListCache.get(change, patchSet); } throw new com.google.gerrit.server.patchlib.PatchListNotAvailableException(""no patchSet specified""); }",519d9a2c0f80334963a5dea061d9b3ac8725bb79,"protected com.google.gerrit.server.diff.PatchList getPatchList() throws com.google.gerrit.server.diff.PatchListNotAvailableException { if ((patchSet) != null) { return args.patchListCache.get(change, patchSet); } throw new com.google.gerrit.server.diff.PatchListNotAvailableException(""no patchSet specified""); }",fc4dc121d5121a229f99ecc1c9467c2f3b86a7d4,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_mail_send_ChangeEmail.java,"public java.lang.String getUnifiedDiff() { com.google.gerrit.server.patch.PatchList patchList; try { patchList = getPatchList(); if ((patchList.getOldId()) == null) { return ""[Octopus merge; cannot be formatted as a diff.]\n""; } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.mail.send.ChangeEmail.log.warn((""Cannot format patch "" + (e.getMessage()))); return """"; } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { com.google.gerrit.server.mail.send.ChangeEmail.log.error(""Cannot format patch"", e); return """"; } int maxSize = args.settings.maximumDiffSize; org.eclipse.jgit.util.TemporaryBuffer.Heap buf = new org.eclipse.jgit.util.TemporaryBuffer.Heap(java.lang.Math.min(com.google.gerrit.server.mail.send.ChangeEmail.HEAP_EST_SIZE, maxSize), maxSize); try (org.eclipse.jgit.diff.DiffFormatter fmt = new org.eclipse.jgit.diff.DiffFormatter(buf)) { try (org.eclipse.jgit.lib.Repository git = args.server.openRepository(change.getProject())) { try { fmt.setRepository(git); fmt.setDetectRenames(true); fmt.format(patchList.getOldId(), patchList.getNewId()); return org.eclipse.jgit.util.RawParseUtils.decode(buf.toByteArray()); } catch (java.io.IOException e) { if (org.eclipse.jgit.internal.JGitText.get().inMemoryBufferLimitExceeded.equals(e.getMessage())) { return """"; } com.google.gerrit.server.mail.send.ChangeEmail.log.error(""Cannot format patch"", e); return """"; } } catch (java.io.IOException e) { com.google.gerrit.server.mail.send.ChangeEmail.log.error(""Cannot open repository to format patch"", e); return """"; } } }",29e46fa5a990f47a5de38622d02c9b46c3f7b813,"public java.lang.String getUnifiedDiff() { com.google.gerrit.server.patchlib.PatchList patchList; try { patchList = getPatchList(); if ((patchList.getOldId()) == null) { return ""[Octopus merge; cannot be formatted as a diff.]\n""; } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.mail.send.ChangeEmail.log.warn((""Cannot format patch "" + (e.getMessage()))); return """"; } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException e) { com.google.gerrit.server.mail.send.ChangeEmail.log.error(""Cannot format patch"", e); return """"; } int maxSize = args.settings.maximumDiffSize; org.eclipse.jgit.util.TemporaryBuffer.Heap buf = new org.eclipse.jgit.util.TemporaryBuffer.Heap(java.lang.Math.min(com.google.gerrit.server.mail.send.ChangeEmail.HEAP_EST_SIZE, maxSize), maxSize); try (org.eclipse.jgit.diff.DiffFormatter fmt = new org.eclipse.jgit.diff.DiffFormatter(buf)) { try (org.eclipse.jgit.lib.Repository git = args.server.openRepository(change.getProject())) { try { fmt.setRepository(git); fmt.setDetectRenames(true); fmt.format(patchList.getOldId(), patchList.getNewId()); return org.eclipse.jgit.util.RawParseUtils.decode(buf.toByteArray()); } catch (java.io.IOException e) { if (org.eclipse.jgit.internal.JGitText.get().inMemoryBufferLimitExceeded.equals(e.getMessage())) { return """"; } com.google.gerrit.server.mail.send.ChangeEmail.log.error(""Cannot format patch"", e); return """"; } } catch (java.io.IOException e) { com.google.gerrit.server.mail.send.ChangeEmail.log.error(""Cannot open repository to format patch"", e); return """"; } } }",803d5d3b485a86026c83ce707085130738c87c0a,"public java.lang.String getUnifiedDiff() { com.google.gerrit.server.diff.PatchList patchList; try { patchList = getPatchList(); if ((patchList.getOldId()) == null) { return ""[Octopus merge; cannot be formatted as a diff.]\n""; } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.mail.send.ChangeEmail.log.warn((""Cannot format patch "" + (e.getMessage()))); return """"; } catch (com.google.gerrit.server.diff.PatchListNotAvailableException e) { com.google.gerrit.server.mail.send.ChangeEmail.log.error(""Cannot format patch"", e); return """"; } int maxSize = args.settings.maximumDiffSize; org.eclipse.jgit.util.TemporaryBuffer.Heap buf = new org.eclipse.jgit.util.TemporaryBuffer.Heap(java.lang.Math.min(com.google.gerrit.server.mail.send.ChangeEmail.HEAP_EST_SIZE, maxSize), maxSize); try (org.eclipse.jgit.diff.DiffFormatter fmt = new org.eclipse.jgit.diff.DiffFormatter(buf)) { try (org.eclipse.jgit.lib.Repository git = args.server.openRepository(change.getProject())) { try { fmt.setRepository(git); fmt.setDetectRenames(true); fmt.format(patchList.getOldId(), patchList.getNewId()); return org.eclipse.jgit.util.RawParseUtils.decode(buf.toByteArray()); } catch (java.io.IOException e) { if (org.eclipse.jgit.internal.JGitText.get().inMemoryBufferLimitExceeded.equals(e.getMessage())) { return """"; } com.google.gerrit.server.mail.send.ChangeEmail.log.error(""Cannot format patch"", e); return """"; } } catch (java.io.IOException e) { com.google.gerrit.server.mail.send.ChangeEmail.log.error(""Cannot open repository to format patch"", e); return """"; } } }",f854a9172d98c3f682f85f3ad6813fa51cb2db79,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_mail_send_ChangeEmail.java,"public java.lang.String getChangeDetail() { try { java.lang.StringBuilder detail = new java.lang.StringBuilder(); if ((patchSetInfo) != null) { detail.append(patchSetInfo.getMessage().trim()).append(""\n""); } else { detail.append(change.getSubject().trim()).append(""\n""); } if ((patchSet) != null) { detail.append(""---\n""); com.google.gerrit.server.patch.PatchList patchList = getPatchList(); for (com.google.gerrit.server.patch.PatchListEntry p : patchList.getPatches()) { if (com.google.gerrit.reviewdb.client.Patch.isMagic(p.getNewName())) { continue; } detail.append(p.getChangeType().getCode()).append("" "").append(p.getNewName()).append(""\n""); } detail.append(java.text.MessageFormat.format(("""" + (((""{0,choice,0#0 files|1#1 file|1<{0} files} changed, "" + ""{1,choice,0#0 insertions|1#1 insertion|1<{1} insertions}(+), "") + ""{2,choice,0#0 deletions|1#1 deletion|1<{2} deletions}(-)"") + ""\n"")), ((patchList.getPatches().size()) - 1), patchList.getInsertions(), patchList.getDeletions())); detail.append(""\n""); } return detail.toString(); } catch (java.lang.Exception err) { com.google.gerrit.server.mail.send.ChangeEmail.log.warn(""Cannot format change detail"", err); return """"; } }",43e4c56feda30215fdafb26b8cd9f7a9491fabc0,"public java.lang.String getChangeDetail() { try { java.lang.StringBuilder detail = new java.lang.StringBuilder(); if ((patchSetInfo) != null) { detail.append(patchSetInfo.getMessage().trim()).append(""\n""); } else { detail.append(change.getSubject().trim()).append(""\n""); } if ((patchSet) != null) { detail.append(""---\n""); com.google.gerrit.server.patchlib.PatchList patchList = getPatchList(); for (com.google.gerrit.server.patchlib.PatchListEntry p : patchList.getPatches()) { if (com.google.gerrit.reviewdb.client.Patch.isMagic(p.getNewName())) { continue; } detail.append(p.getChangeType().getCode()).append("" "").append(p.getNewName()).append(""\n""); } detail.append(java.text.MessageFormat.format(("""" + (((""{0,choice,0#0 files|1#1 file|1<{0} files} changed, "" + ""{1,choice,0#0 insertions|1#1 insertion|1<{1} insertions}(+), "") + ""{2,choice,0#0 deletions|1#1 deletion|1<{2} deletions}(-)"") + ""\n"")), ((patchList.getPatches().size()) - 1), patchList.getInsertions(), patchList.getDeletions())); detail.append(""\n""); } return detail.toString(); } catch (java.lang.Exception err) { com.google.gerrit.server.mail.send.ChangeEmail.log.warn(""Cannot format change detail"", err); return """"; } }",b83d1e89d2343e2f14ae483f16f2cb23fa0b281c,"public java.lang.String getChangeDetail() { try { java.lang.StringBuilder detail = new java.lang.StringBuilder(); if ((patchSetInfo) != null) { detail.append(patchSetInfo.getMessage().trim()).append(""\n""); } else { detail.append(change.getSubject().trim()).append(""\n""); } if ((patchSet) != null) { detail.append(""---\n""); com.google.gerrit.server.diff.PatchList patchList = getPatchList(); for (com.google.gerrit.server.diff.PatchListEntry p : patchList.getPatches()) { if (com.google.gerrit.reviewdb.client.Patch.isMagic(p.getNewName())) { continue; } detail.append(p.getChangeType().getCode()).append("" "").append(p.getNewName()).append(""\n""); } detail.append(java.text.MessageFormat.format(("""" + (((""{0,choice,0#0 files|1#1 file|1<{0} files} changed, "" + ""{1,choice,0#0 insertions|1#1 insertion|1<{1} insertions}(+), "") + ""{2,choice,0#0 deletions|1#1 deletion|1<{2} deletions}(-)"") + ""\n"")), ((patchList.getPatches().size()) - 1), patchList.getInsertions(), patchList.getDeletions())); detail.append(""\n""); } return detail.toString(); } catch (java.lang.Exception err) { com.google.gerrit.server.mail.send.ChangeEmail.log.warn(""Cannot format change detail"", err); return """"; } }",07fff27e07de01e2a7e3cfe33425d7bb17a6498a,2017-11-15 12:52:05,11
140535,java_gerrit_PRED_commit_delta_4.java,"@java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec(com.googlecode.prolog_cafe.lang.Prolog engine) { com.googlecode.prolog_cafe.lang.Term a5 = engine.r5; @java.lang.SuppressWarnings(""unchecked"") java.util.Iterator<com.google.gerrit.server.patch.PatchListEntry> iter = ((java.util.Iterator<com.google.gerrit.server.patch.PatchListEntry>) (((com.googlecode.prolog_cafe.lang.JavaObjectTerm) (a5)).object())); if (!(iter.hasNext())) { return engine.fail(); } return engine.jtry5(gerrit.PRED_commit_delta_4.commit_delta_check, gerrit.PRED_commit_delta_4.commit_delta_next); }",8fab95ccaa39be7c5c43eb0703ddbee63e197c50,"@java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec(com.googlecode.prolog_cafe.lang.Prolog engine) { com.googlecode.prolog_cafe.lang.Term a5 = engine.r5; @java.lang.SuppressWarnings(""unchecked"") java.util.Iterator<com.google.gerrit.server.patchlib.PatchListEntry> iter = ((java.util.Iterator<com.google.gerrit.server.patchlib.PatchListEntry>) (((com.googlecode.prolog_cafe.lang.JavaObjectTerm) (a5)).object())); if (!(iter.hasNext())) { return engine.fail(); } return engine.jtry5(gerrit.PRED_commit_delta_4.commit_delta_check, gerrit.PRED_commit_delta_4.commit_delta_next); }",3f509d9c3ca83052cb7ef5fe16946d4e1311b190,"@java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec(com.googlecode.prolog_cafe.lang.Prolog engine) { com.googlecode.prolog_cafe.lang.Term a5 = engine.r5; @java.lang.SuppressWarnings(""unchecked"") java.util.Iterator<com.google.gerrit.server.diff.PatchListEntry> iter = ((java.util.Iterator<com.google.gerrit.server.diff.PatchListEntry>) (((com.googlecode.prolog_cafe.lang.JavaObjectTerm) (a5)).object())); if (!(iter.hasNext())) { return engine.fail(); } return engine.jtry5(gerrit.PRED_commit_delta_4.commit_delta_check, gerrit.PRED_commit_delta_4.commit_delta_next); }",f317dbb740f2e05d5517a7652c3c836ced28b5c7,2017-11-15 12:52:05,11
140535,java_gerrit_PRED_commit_delta_4.java,"@java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec(com.googlecode.prolog_cafe.lang.Prolog engine) throws com.googlecode.prolog_cafe.exceptions.PrologException { engine.cont = cont; engine.setB0(); com.googlecode.prolog_cafe.lang.Term a1 = arg1.dereference(); if (a1 instanceof com.googlecode.prolog_cafe.lang.VariableTerm) { throw new com.googlecode.prolog_cafe.exceptions.PInstantiationException(this, 1); } if (!(a1 instanceof com.googlecode.prolog_cafe.lang.SymbolTerm)) { throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException(this, 1, ""symbol"", a1); } java.util.regex.Pattern regex = java.util.regex.Pattern.compile(a1.name()); engine.r1 = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(regex); engine.r2 = arg2; engine.r3 = arg3; engine.r4 = arg4; com.google.gerrit.server.patch.PatchList pl = StoredValues.PATCH_LIST.get(engine); java.util.Iterator<com.google.gerrit.server.patch.PatchListEntry> iter = pl.getPatches().iterator(); engine.r5 = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(iter); return engine.jtry5(gerrit.PRED_commit_delta_4.commit_delta_check, gerrit.PRED_commit_delta_4.commit_delta_next); }",51d048493ae1a987f6f33370787a50b1bdcea1e3,"@java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec(com.googlecode.prolog_cafe.lang.Prolog engine) throws com.googlecode.prolog_cafe.exceptions.PrologException { engine.cont = cont; engine.setB0(); com.googlecode.prolog_cafe.lang.Term a1 = arg1.dereference(); if (a1 instanceof com.googlecode.prolog_cafe.lang.VariableTerm) { throw new com.googlecode.prolog_cafe.exceptions.PInstantiationException(this, 1); } if (!(a1 instanceof com.googlecode.prolog_cafe.lang.SymbolTerm)) { throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException(this, 1, ""symbol"", a1); } java.util.regex.Pattern regex = java.util.regex.Pattern.compile(a1.name()); engine.r1 = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(regex); engine.r2 = arg2; engine.r3 = arg3; engine.r4 = arg4; com.google.gerrit.server.patchlib.PatchList pl = StoredValues.PATCH_LIST.get(engine); java.util.Iterator<com.google.gerrit.server.patchlib.PatchListEntry> iter = pl.getPatches().iterator(); engine.r5 = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(iter); return engine.jtry5(gerrit.PRED_commit_delta_4.commit_delta_check, gerrit.PRED_commit_delta_4.commit_delta_next); }",64cf307e452f2b0858f7a8714928f48f2e24982d,"@java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec(com.googlecode.prolog_cafe.lang.Prolog engine) throws com.googlecode.prolog_cafe.exceptions.PrologException { engine.cont = cont; engine.setB0(); com.googlecode.prolog_cafe.lang.Term a1 = arg1.dereference(); if (a1 instanceof com.googlecode.prolog_cafe.lang.VariableTerm) { throw new com.googlecode.prolog_cafe.exceptions.PInstantiationException(this, 1); } if (!(a1 instanceof com.googlecode.prolog_cafe.lang.SymbolTerm)) { throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException(this, 1, ""symbol"", a1); } java.util.regex.Pattern regex = java.util.regex.Pattern.compile(a1.name()); engine.r1 = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(regex); engine.r2 = arg2; engine.r3 = arg3; engine.r4 = arg4; com.google.gerrit.server.diff.PatchList pl = StoredValues.PATCH_LIST.get(engine); java.util.Iterator<com.google.gerrit.server.diff.PatchListEntry> iter = pl.getPatches().iterator(); engine.r5 = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(iter); return engine.jtry5(gerrit.PRED_commit_delta_4.commit_delta_check, gerrit.PRED_commit_delta_4.commit_delta_next); }",5596b52c3bac65072a652f4322c9b734dcf4932d,2017-11-15 12:52:05,11
140535,javatests_com_google_gerrit_acceptance_server_change_PatchListCacheIT.java,"@org.junit.Test public void largeObjectTombstoneGetsCached() { com.google.gerrit.server.patch.PatchListKey key = com.google.gerrit.server.patch.PatchListKey.againstDefaultBase(org.eclipse.jgit.lib.ObjectId.zeroId(), Whitespace.IGNORE_ALL); com.google.gerrit.server.patch.PatchListCacheImpl.LargeObjectTombstone tombstone = new com.google.gerrit.server.patch.PatchListCacheImpl.LargeObjectTombstone(); abstractPatchListCache.put(key, tombstone); assertThat(abstractPatchListCache.getIfPresent(key)).isSameAs(tombstone); }",f2225e98e33b357a1261fada08fe8ba5e9178304,"@org.junit.Test public void largeObjectTombstoneGetsCached() { com.google.gerrit.server.patchlib.PatchListKey key = com.google.gerrit.server.patchlib.PatchListKey.againstDefaultBase(org.eclipse.jgit.lib.ObjectId.zeroId(), Whitespace.IGNORE_ALL); com.google.gerrit.server.patch.PatchListCacheImpl.LargeObjectTombstone tombstone = new com.google.gerrit.server.patch.PatchListCacheImpl.LargeObjectTombstone(); abstractPatchListCache.put(key, tombstone); assertThat(abstractPatchListCache.getIfPresent(key)).isSameAs(tombstone); }",b9631bb8c237010254e08be8268b60b1cda706e9,"@org.junit.Test public void largeObjectTombstoneGetsCached() { com.google.gerrit.server.diff.PatchListKey key = com.google.gerrit.server.diff.PatchListKey.againstDefaultBase(org.eclipse.jgit.lib.ObjectId.zeroId(), Whitespace.IGNORE_ALL); com.google.gerrit.server.patch.PatchListCacheImpl.LargeObjectTombstone tombstone = new com.google.gerrit.server.patch.PatchListCacheImpl.LargeObjectTombstone(); abstractPatchListCache.put(key, tombstone); assertThat(abstractPatchListCache.getIfPresent(key)).isSameAs(tombstone); }",6d10782c05033fcaecc63a3f0fed1e9cd16b3c15,2017-11-15 12:52:05,11
140535,javatests_com_google_gerrit_acceptance_server_change_PatchListCacheIT.java,"private static void assertAdded(java.lang.String expectedNewName, com.google.gerrit.server.patch.PatchListEntry e) { com.google.gerrit.acceptance.server.change.PatchListCacheIT.assertName(expectedNewName, e); assertThat(e.getChangeType()).isEqualTo(ChangeType.ADDED); }",189d1b1c4de60a4b89e76229cffc65938f53ae69,"private static void assertAdded(java.lang.String expectedNewName, com.google.gerrit.server.patchlib.PatchListEntry e) { com.google.gerrit.acceptance.server.change.PatchListCacheIT.assertName(expectedNewName, e); assertThat(e.getChangeType()).isEqualTo(ChangeType.ADDED); }",5345ec88871f2cdda486cceae4ac5273639530f4,"private static void assertAdded(java.lang.String expectedNewName, com.google.gerrit.server.diff.PatchListEntry e) { com.google.gerrit.acceptance.server.change.PatchListCacheIT.assertName(expectedNewName, e); assertThat(e.getChangeType()).isEqualTo(ChangeType.ADDED); }",1e04eba43ca540efdf16c88a4e81aa59842a6a8f,2017-11-15 12:52:05,11
140535,javatests_com_google_gerrit_acceptance_server_change_PatchListCacheIT.java,"private com.google.gerrit.server.patch.PatchListKey getKey(org.eclipse.jgit.lib.ObjectId revisionIdA, org.eclipse.jgit.lib.ObjectId revisionIdB) { return com.google.gerrit.server.patch.PatchListKey.againstCommit(revisionIdA, revisionIdB, Whitespace.IGNORE_NONE); }",a3dc7a688fb5e3ebc2614915c7273abc7ea7c706,"private com.google.gerrit.server.patchlib.PatchListKey getKey(org.eclipse.jgit.lib.ObjectId revisionIdA, org.eclipse.jgit.lib.ObjectId revisionIdB) { return com.google.gerrit.server.patchlib.PatchListKey.againstCommit(revisionIdA, revisionIdB, Whitespace.IGNORE_NONE); }",2b2759f82bfad53adcb5968fd8b65582a16d1dae,"private com.google.gerrit.server.diff.PatchListKey getKey(org.eclipse.jgit.lib.ObjectId revisionIdA, org.eclipse.jgit.lib.ObjectId revisionIdB) { return com.google.gerrit.server.diff.PatchListKey.againstCommit(revisionIdA, revisionIdB, Whitespace.IGNORE_NONE); }",857d7c14d98257ff7cd13b3aafecf4223480e13a,2017-11-15 12:52:05,11
140535,javatests_com_google_gerrit_acceptance_server_change_PatchListCacheIT.java,"private static void assertDeleted(java.lang.String expectedNewName, com.google.gerrit.server.patch.PatchListEntry e) { com.google.gerrit.acceptance.server.change.PatchListCacheIT.assertName(expectedNewName, e); assertThat(e.getChangeType()).isEqualTo(ChangeType.DELETED); }",7576de64e38b420626cd91c070c620c91599f532,"private static void assertDeleted(java.lang.String expectedNewName, com.google.gerrit.server.patchlib.PatchListEntry e) { com.google.gerrit.acceptance.server.change.PatchListCacheIT.assertName(expectedNewName, e); assertThat(e.getChangeType()).isEqualTo(ChangeType.DELETED); }",e74e9006b177858d5af56fdce838427797a94c1a,"private static void assertDeleted(java.lang.String expectedNewName, com.google.gerrit.server.diff.PatchListEntry e) { com.google.gerrit.acceptance.server.change.PatchListCacheIT.assertName(expectedNewName, e); assertThat(e.getChangeType()).isEqualTo(ChangeType.DELETED); }",d837b1c7a5675aee331a1dd05ef23f406f5879c2,2017-11-15 12:52:05,11
140535,javatests_com_google_gerrit_acceptance_server_change_PatchListCacheIT.java,"private static void assertName(java.lang.String expectedNewName, com.google.gerrit.server.patch.PatchListEntry e) { assertThat(e.getNewName()).isEqualTo(expectedNewName); assertThat(e.getOldName()).isNull(); }",1a1359b3e09483a8fc1836698fbbb239dfe983fb,"private static void assertName(java.lang.String expectedNewName, com.google.gerrit.server.patchlib.PatchListEntry e) { assertThat(e.getNewName()).isEqualTo(expectedNewName); assertThat(e.getOldName()).isNull(); }",720787c220ed579284b1ac2cae01bc7a33243470,"private static void assertName(java.lang.String expectedNewName, com.google.gerrit.server.diff.PatchListEntry e) { assertThat(e.getNewName()).isEqualTo(expectedNewName); assertThat(e.getOldName()).isNull(); }",c6fc2ef8faa0ab4128537897af0cb3daf05ddd05,2017-11-15 12:52:05,11
140535,javatests_com_google_gerrit_acceptance_server_change_PatchListCacheIT.java,"private java.util.List<com.google.gerrit.server.patch.PatchListEntry> getCurrentPatches(java.lang.String changeId) throws java.lang.Exception { return patchListCache.get(getKey(null, getCurrentRevisionId(changeId)), project).getPatches(); }",7846cc6efb58a211a5c9b59c54e41532a0258287,"private java.util.List<com.google.gerrit.server.patchlib.PatchListEntry> getCurrentPatches(java.lang.String changeId) throws java.lang.Exception { return patchListCache.get(getKey(null, getCurrentRevisionId(changeId)), project).getPatches(); }",6e0069d40c13898f036bb19c37fe8aa84940ff45,"private java.util.List<com.google.gerrit.server.diff.PatchListEntry> getCurrentPatches(java.lang.String changeId) throws java.lang.Exception { return patchListCache.get(getKey(null, getCurrentRevisionId(changeId)), project).getPatches(); }",d8dbba711b62d2d55acf7da80df97c8427f3930c,2017-11-15 12:52:05,11
140535,javatests_com_google_gerrit_acceptance_server_change_PatchListCacheIT.java,"private java.util.List<com.google.gerrit.server.patch.PatchListEntry> getPatches(org.eclipse.jgit.lib.ObjectId revisionIdA, org.eclipse.jgit.lib.ObjectId revisionIdB) throws java.lang.Exception { return patchListCache.get(getKey(revisionIdA, revisionIdB), project).getPatches(); }",9398fbc560a6f9a5879ac1150858480538f3f98e,"private java.util.List<com.google.gerrit.server.patchlib.PatchListEntry> getPatches(org.eclipse.jgit.lib.ObjectId revisionIdA, org.eclipse.jgit.lib.ObjectId revisionIdB) throws java.lang.Exception { return patchListCache.get(getKey(revisionIdA, revisionIdB), project).getPatches(); }",0aef74b296ea13801d4fddbc881c8923362c9197,"private java.util.List<com.google.gerrit.server.diff.PatchListEntry> getPatches(org.eclipse.jgit.lib.ObjectId revisionIdA, org.eclipse.jgit.lib.ObjectId revisionIdB) throws java.lang.Exception { return patchListCache.get(getKey(revisionIdA, revisionIdB), project).getPatches(); }",f58c9a924e626c000bfc6779fb254ffe44ccc1df,2017-11-15 12:52:05,11
140535,javatests_com_google_gerrit_acceptance_server_change_PatchListCacheIT.java,"private static void assertModified(java.lang.String expectedNewName, com.google.gerrit.server.patch.PatchListEntry e) { com.google.gerrit.acceptance.server.change.PatchListCacheIT.assertName(expectedNewName, e); assertThat(e.getChangeType()).isEqualTo(ChangeType.MODIFIED); }",adca1d4be745a3b3298b2fd0e12557161c380ef8,"private static void assertModified(java.lang.String expectedNewName, com.google.gerrit.server.patchlib.PatchListEntry e) { com.google.gerrit.acceptance.server.change.PatchListCacheIT.assertName(expectedNewName, e); assertThat(e.getChangeType()).isEqualTo(ChangeType.MODIFIED); }",d2c7bd964a70579090fc0be769d7e1a6c3628282,"private static void assertModified(java.lang.String expectedNewName, com.google.gerrit.server.diff.PatchListEntry e) { com.google.gerrit.acceptance.server.change.PatchListCacheIT.assertName(expectedNewName, e); assertThat(e.getChangeType()).isEqualTo(ChangeType.MODIFIED); }",f5e87813ae3f09b9a7e696c2ed14fe3b6cdf66bc,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_events_EventFactory.java,"public void addPatchSetFileNames(com.google.gerrit.server.data.PatchSetAttribute patchSetAttribute, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) { try { com.google.gerrit.server.patch.PatchList patchList = patchListCache.get(change, patchSet); for (com.google.gerrit.server.patch.PatchListEntry patch : patchList.getPatches()) { if ((patchSetAttribute.files) == null) { patchSetAttribute.files = new java.util.ArrayList(); } com.google.gerrit.server.data.PatchAttribute p = new com.google.gerrit.server.data.PatchAttribute(); p.file = patch.getNewName(); p.fileOld = patch.getOldName(); p.type = patch.getChangeType(); p.deletions -= patch.getDeletions(); p.insertions = patch.getInsertions(); patchSetAttribute.files.add(p); } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.events.EventFactory.log.warn((""Cannot get patch list: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { com.google.gerrit.server.events.EventFactory.log.warn(""Cannot get patch list"", e); } }",184c02b3331902ce14988b36c509ce6bddf8f036,"public void addPatchSetFileNames(com.google.gerrit.server.data.PatchSetAttribute patchSetAttribute, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) { try { com.google.gerrit.server.patchlib.PatchList patchList = patchListCache.get(change, patchSet); for (com.google.gerrit.server.patchlib.PatchListEntry patch : patchList.getPatches()) { if ((patchSetAttribute.files) == null) { patchSetAttribute.files = new java.util.ArrayList(); } com.google.gerrit.server.data.PatchAttribute p = new com.google.gerrit.server.data.PatchAttribute(); p.file = patch.getNewName(); p.fileOld = patch.getOldName(); p.type = patch.getChangeType(); p.deletions -= patch.getDeletions(); p.insertions = patch.getInsertions(); patchSetAttribute.files.add(p); } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.events.EventFactory.log.warn((""Cannot get patch list: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException e) { com.google.gerrit.server.events.EventFactory.log.warn(""Cannot get patch list"", e); } }",d24dbdf470f6c3f86cf4e22616cfa5ce7dc2b9e5,"public void addPatchSetFileNames(com.google.gerrit.server.data.PatchSetAttribute patchSetAttribute, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) { try { com.google.gerrit.server.diff.PatchList patchList = patchListCache.get(change, patchSet); for (com.google.gerrit.server.diff.PatchListEntry patch : patchList.getPatches()) { if ((patchSetAttribute.files) == null) { patchSetAttribute.files = new java.util.ArrayList(); } com.google.gerrit.server.data.PatchAttribute p = new com.google.gerrit.server.data.PatchAttribute(); p.file = patch.getNewName(); p.fileOld = patch.getOldName(); p.type = patch.getChangeType(); p.deletions -= patch.getDeletions(); p.insertions = patch.getInsertions(); patchSetAttribute.files.add(p); } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.events.EventFactory.log.warn((""Cannot get patch list: "" + (e.getMessage()))); } catch (com.google.gerrit.server.diff.PatchListNotAvailableException e) { com.google.gerrit.server.events.EventFactory.log.warn(""Cannot get patch list"", e); } }",f105a9729b751a2bad67fd3c465573059317e24e,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_change_FileInfoJson.java,"java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo> toFileInfoMap(com.google.gerrit.reviewdb.client.Change change, org.eclipse.jgit.lib.ObjectId objectId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.PatchSet base) throws com.google.gerrit.server.patch.PatchListNotAvailableException { org.eclipse.jgit.lib.ObjectId a = (base == null) ? null : org.eclipse.jgit.lib.ObjectId.fromString(base.getRevision().get()); return toFileInfoMap(change, com.google.gerrit.server.patch.PatchListKey.againstCommit(a, objectId, Whitespace.IGNORE_NONE)); }",ca8829bdae4b6767669071fab63f31c9f1a53f1b,"java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo> toFileInfoMap(com.google.gerrit.reviewdb.client.Change change, org.eclipse.jgit.lib.ObjectId objectId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.PatchSet base) throws com.google.gerrit.server.patchlib.PatchListNotAvailableException { org.eclipse.jgit.lib.ObjectId a = (base == null) ? null : org.eclipse.jgit.lib.ObjectId.fromString(base.getRevision().get()); return toFileInfoMap(change, com.google.gerrit.server.patchlib.PatchListKey.againstCommit(a, objectId, Whitespace.IGNORE_NONE)); }",ef081bb33a41487225fb15820cb05c03f4f30804,"java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo> toFileInfoMap(com.google.gerrit.reviewdb.client.Change change, org.eclipse.jgit.lib.ObjectId objectId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.PatchSet base) throws com.google.gerrit.server.diff.PatchListNotAvailableException { org.eclipse.jgit.lib.ObjectId a = (base == null) ? null : org.eclipse.jgit.lib.ObjectId.fromString(base.getRevision().get()); return toFileInfoMap(change, com.google.gerrit.server.diff.PatchListKey.againstCommit(a, objectId, Whitespace.IGNORE_NONE)); }",cf55d6da3c7ba49603174e47d19947c118556043,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_change_FileInfoJson.java,"java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo> toFileInfoMap(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gerrit.server.patch.PatchListNotAvailableException { return toFileInfoMap(change, patchSet.getRevision(), null); }",ff6348647d007900c56fdde83a3e669325d4676f,"java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo> toFileInfoMap(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gerrit.server.patchlib.PatchListNotAvailableException { return toFileInfoMap(change, patchSet.getRevision(), null); }",b89da9d40609802219dfff43ff49c9b2ad6fd0f4,"java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo> toFileInfoMap(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gerrit.server.diff.PatchListNotAvailableException { return toFileInfoMap(change, patchSet.getRevision(), null); }",6da69b9fa55d45ea685957e0f357696ae9e2a969,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_change_FileInfoJson.java,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo> toFileInfoMap(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.patch.PatchListKey key) throws com.google.gerrit.server.patch.PatchListNotAvailableException { com.google.gerrit.server.patch.PatchList list = patchListCache.get(key, change.getProject()); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo> files = new java.util.TreeMap<>(); for (com.google.gerrit.server.patch.PatchListEntry e : list.getPatches()) { com.google.gerrit.extensions.common.FileInfo d = new com.google.gerrit.extensions.common.FileInfo(); d.status = ((e.getChangeType()) != (Patch.ChangeType.MODIFIED)) ? e.getChangeType().getCode() : null; d.oldPath = e.getOldName(); d.sizeDelta = e.getSizeDelta(); d.size = e.getSize(); if ((e.getPatchType()) == (Patch.PatchType.BINARY)) { d.binary = true; } else { d.linesInserted = ((e.getInsertions()) > 0) ? e.getInsertions() : null; d.linesDeleted = ((e.getDeletions()) > 0) ? e.getDeletions() : null; } com.google.gerrit.extensions.common.FileInfo o = files.put(e.getNewName(), d); if (o != null) { d.status = Patch.ChangeType.REWRITE.getCode(); d.sizeDelta = o.sizeDelta; d.size = o.size; if (((o.binary) != null) && (o.binary)) { d.binary = true; } if ((o.linesInserted) != null) { d.linesInserted = o.linesInserted; } if ((o.linesDeleted) != null) { d.linesDeleted = o.linesDeleted; } } } return files; }",fbb8640ea8540a64aa0964896160c3a9806064ba,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo> toFileInfoMap(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.patchlib.PatchListKey key) throws com.google.gerrit.server.patchlib.PatchListNotAvailableException { com.google.gerrit.server.patchlib.PatchList list = patchListCache.get(key, change.getProject()); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo> files = new java.util.TreeMap<>(); for (com.google.gerrit.server.patchlib.PatchListEntry e : list.getPatches()) { com.google.gerrit.extensions.common.FileInfo d = new com.google.gerrit.extensions.common.FileInfo(); d.status = ((e.getChangeType()) != (Patch.ChangeType.MODIFIED)) ? e.getChangeType().getCode() : null; d.oldPath = e.getOldName(); d.sizeDelta = e.getSizeDelta(); d.size = e.getSize(); if ((e.getPatchType()) == (com.google.gerrit.reviewdb.client.PatchType.BINARY)) { d.binary = true; } else { d.linesInserted = ((e.getInsertions()) > 0) ? e.getInsertions() : null; d.linesDeleted = ((e.getDeletions()) > 0) ? e.getDeletions() : null; } com.google.gerrit.extensions.common.FileInfo o = files.put(e.getNewName(), d); if (o != null) { d.status = Patch.ChangeType.REWRITE.getCode(); d.sizeDelta = o.sizeDelta; d.size = o.size; if (((o.binary) != null) && (o.binary)) { d.binary = true; } if ((o.linesInserted) != null) { d.linesInserted = o.linesInserted; } if ((o.linesDeleted) != null) { d.linesDeleted = o.linesDeleted; } } } return files; }",d67be6ab641feeeb5ea168fdd939386a202f1d79,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo> toFileInfoMap(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.diff.PatchListKey key) throws com.google.gerrit.server.diff.PatchListNotAvailableException { com.google.gerrit.server.diff.PatchList list = patchListCache.get(key, change.getProject()); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo> files = new java.util.TreeMap<>(); for (com.google.gerrit.server.diff.PatchListEntry e : list.getPatches()) { com.google.gerrit.extensions.common.FileInfo d = new com.google.gerrit.extensions.common.FileInfo(); d.status = ((e.getChangeType()) != (Patch.ChangeType.MODIFIED)) ? e.getChangeType().getCode() : null; d.oldPath = e.getOldName(); d.sizeDelta = e.getSizeDelta(); d.size = e.getSize(); if ((e.getPatchType()) == (Patch.PatchType.BINARY)) { d.binary = true; } else { d.linesInserted = ((e.getInsertions()) > 0) ? e.getInsertions() : null; d.linesDeleted = ((e.getDeletions()) > 0) ? e.getDeletions() : null; } com.google.gerrit.extensions.common.FileInfo o = files.put(e.getNewName(), d); if (o != null) { d.status = Patch.ChangeType.REWRITE.getCode(); d.sizeDelta = o.sizeDelta; d.size = o.size; if (((o.binary) != null) && (o.binary)) { d.binary = true; } if ((o.linesInserted) != null) { d.linesInserted = o.linesInserted; } if ((o.linesDeleted) != null) { d.linesDeleted = o.linesDeleted; } } } return files; }",754a799322c406aa36d606d44e1a6ce6efd42f16,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_change_FileInfoJson.java,"java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo> toFileInfoMap(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.RevId revision, int parent) throws com.google.gerrit.server.patch.PatchListNotAvailableException { org.eclipse.jgit.lib.ObjectId b = org.eclipse.jgit.lib.ObjectId.fromString(revision.get()); return toFileInfoMap(change, com.google.gerrit.server.patch.PatchListKey.againstParentNum((parent + 1), b, Whitespace.IGNORE_NONE)); }",cdcb98ee4f175bef0aee804c42740efde865edcd,"java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo> toFileInfoMap(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.RevId revision, int parent) throws com.google.gerrit.server.patchlib.PatchListNotAvailableException { org.eclipse.jgit.lib.ObjectId b = org.eclipse.jgit.lib.ObjectId.fromString(revision.get()); return toFileInfoMap(change, com.google.gerrit.server.patchlib.PatchListKey.againstParentNum((parent + 1), b, Whitespace.IGNORE_NONE)); }",45f51af68fb6500151ade110979704bde9a27a49,"java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo> toFileInfoMap(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.RevId revision, int parent) throws com.google.gerrit.server.diff.PatchListNotAvailableException { org.eclipse.jgit.lib.ObjectId b = org.eclipse.jgit.lib.ObjectId.fromString(revision.get()); return toFileInfoMap(change, com.google.gerrit.server.diff.PatchListKey.againstParentNum((parent + 1), b, Whitespace.IGNORE_NONE)); }",cdd9a4468a962238ff5a1ff0b71deab6afa4df72,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_change_FileInfoJson.java,"java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo> toFileInfoMap(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.RevId revision, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.PatchSet base) throws com.google.gerrit.server.patch.PatchListNotAvailableException { org.eclipse.jgit.lib.ObjectId objectId = org.eclipse.jgit.lib.ObjectId.fromString(revision.get()); return toFileInfoMap(change, objectId, base); }",4fb40e1ba8261b444ce1dd2cd187bc2117889529,"java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo> toFileInfoMap(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.RevId revision, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.PatchSet base) throws com.google.gerrit.server.patchlib.PatchListNotAvailableException { org.eclipse.jgit.lib.ObjectId objectId = org.eclipse.jgit.lib.ObjectId.fromString(revision.get()); return toFileInfoMap(change, objectId, base); }",dc6cbfe82ab03fac51bdf4cff9a3672cfd33b765,"java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo> toFileInfoMap(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.RevId revision, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.PatchSet base) throws com.google.gerrit.server.diff.PatchListNotAvailableException { org.eclipse.jgit.lib.ObjectId objectId = org.eclipse.jgit.lib.ObjectId.fromString(revision.get()); return toFileInfoMap(change, objectId, base); }",cd261bec574fb7c82d818ef10d2eed3a7e34213f,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_DiffSummary.java,"public com.google.gerrit.server.query.change.ChangeData.ChangedLines getChangedLines() { return new com.google.gerrit.server.query.change.ChangeData.ChangedLines(insertions, deletions); }",602693f2238a25791533d007d3029104337a5d88,"public com.google.gerrit.server.patchlib.DiffSummary.ChangedLines getChangedLines() { return new com.google.gerrit.server.patchlib.DiffSummary.ChangedLines(insertions, deletions); }",bd8641bde4ad09e34b3b5fd188a1b724e4a3833f,"public com.google.gerrit.server.diff.DiffSummary.ChangedLines getChangedLines() { return new com.google.gerrit.server.diff.DiffSummary.ChangedLines(insertions, deletions); }",0070f52012a9bf36e0f2f576e326b58e526af316,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_change_ChangeJson.java,"public com.google.gerrit.extensions.common.RevisionInfo getRevisionInfo(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet in) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { com.google.gerrit.extensions.common.RevisionInfo rev = toRevisionInfo(cd, in, repo, rw, true, null, isWorldReadable(cd)); accountLoader.fill(); return rev; } }",04af92609cab2ec8819692bf007493c0664fa5b0,"public com.google.gerrit.extensions.common.RevisionInfo getRevisionInfo(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet in) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patchlib.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { com.google.gerrit.extensions.common.RevisionInfo rev = toRevisionInfo(cd, in, repo, rw, true, null, isWorldReadable(cd)); accountLoader.fill(); return rev; } }",fa7f7531a5fe97737c4503b28b2920fdb93a4c3c,"public com.google.gerrit.extensions.common.RevisionInfo getRevisionInfo(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet in) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.diff.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { com.google.gerrit.extensions.common.RevisionInfo rev = toRevisionInfo(cd, in, repo, rw, true, null, isWorldReadable(cd)); accountLoader.fill(); return rev; } }",961dff8735090025a9e0305a4d7e6e8409e16a3f,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_ComparisonType.java,"static com.google.gerrit.server.patch.ComparisonType readFrom(java.io.InputStream in) throws java.io.IOException { int p = readVarInt32(in); java.lang.Integer parentNum = (p > 0) ? p : null; boolean autoMerge = (readVarInt32(in)) != 0; return new com.google.gerrit.server.patch.ComparisonType(parentNum, autoMerge); }",69339aea6bf209e7603fa63bc9d51400f5b0be80,"static com.google.gerrit.server.patchlib.ComparisonType readFrom(java.io.InputStream in) throws java.io.IOException { int p = readVarInt32(in); java.lang.Integer parentNum = (p > 0) ? p : null; boolean autoMerge = (readVarInt32(in)) != 0; return new com.google.gerrit.server.patchlib.ComparisonType(parentNum, autoMerge); }",2f4f8baed4001691f2ab415ac5f68386b1a63cab,"static com.google.gerrit.server.diff.ComparisonType readFrom(java.io.InputStream in) throws java.io.IOException { int p = readVarInt32(in); java.lang.Integer parentNum = (p > 0) ? p : null; boolean autoMerge = (readVarInt32(in)) != 0; return new com.google.gerrit.server.diff.ComparisonType(parentNum, autoMerge); }",4224a0fc57e1c014d0d25f4960152a77a3638b12,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_change_ChangeJson.java,"private com.google.gerrit.extensions.common.ChangeInfo format(com.google.gerrit.server.query.change.ChangeData cd, java.util.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId, boolean fillAccountLoader) throws com.google.gwtorm.server.OrmException { try { if (fillAccountLoader) { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); com.google.gerrit.extensions.common.ChangeInfo res = toChangeInfo(cd, limitToPsId); accountLoader.fill(); return res; } return toChangeInfo(cd, limitToPsId); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException | com.google.gerrit.server.project.NoSuchProjectException | java.lang.RuntimeException e) { if (!(has(com.google.gerrit.server.change.CHECK))) { com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(e); } return checkOnly(cd); } }",b081184f16c8e97a263c1a380c11cdcc92639656,"private com.google.gerrit.extensions.common.ChangeInfo format(com.google.gerrit.server.query.change.ChangeData cd, java.util.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId, boolean fillAccountLoader) throws com.google.gwtorm.server.OrmException { try { if (fillAccountLoader) { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); com.google.gerrit.extensions.common.ChangeInfo res = toChangeInfo(cd, limitToPsId); accountLoader.fill(); return res; } return toChangeInfo(cd, limitToPsId); } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException | com.google.gerrit.server.GpgException | com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException | com.google.gerrit.server.project.NoSuchProjectException | java.lang.RuntimeException e) { if (!(has(com.google.gerrit.server.change.CHECK))) { com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(e); } return checkOnly(cd); } }",e6b5ab1ea12b30a07ddcab3ce237278ba62fd85d,"private com.google.gerrit.extensions.common.ChangeInfo format(com.google.gerrit.server.query.change.ChangeData cd, java.util.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId, boolean fillAccountLoader) throws com.google.gwtorm.server.OrmException { try { if (fillAccountLoader) { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); com.google.gerrit.extensions.common.ChangeInfo res = toChangeInfo(cd, limitToPsId); accountLoader.fill(); return res; } return toChangeInfo(cd, limitToPsId); } catch (com.google.gerrit.server.diff.PatchListNotAvailableException | com.google.gerrit.server.GpgException | com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException | com.google.gerrit.server.project.NoSuchProjectException | java.lang.RuntimeException e) { if (!(has(com.google.gerrit.server.change.CHECK))) { com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(e); } return checkOnly(cd); } }",068115b38ff24afd489a07769bbe923bd2243408,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_change_ChangeJson.java,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> revisions(com.google.gerrit.server.query.change.ChangeData cd, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> map, java.util.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId, com.google.gerrit.extensions.common.ChangeInfo changeInfo) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> res = new java.util.LinkedHashMap<>(); java.lang.Boolean isWorldReadable = null; try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { for (com.google.gerrit.reviewdb.client.PatchSet in : map.values()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = in.getId(); boolean want = false; if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { want = true; } else if (limitToPsId.isPresent()) { want = id.equals(limitToPsId.get()); } else { want = id.equals(cd.change().currentPatchSetId()); } if (want) { if (isWorldReadable == null) { isWorldReadable = isWorldReadable(cd); } res.put(in.getRevision().get(), toRevisionInfo(cd, in, repo, rw, false, changeInfo, isWorldReadable)); } } return res; } }",e60389f7c32e0d889ae43c4bd3a1758dd134e490,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> revisions(com.google.gerrit.server.query.change.ChangeData cd, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> map, java.util.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId, com.google.gerrit.extensions.common.ChangeInfo changeInfo) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patchlib.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> res = new java.util.LinkedHashMap<>(); java.lang.Boolean isWorldReadable = null; try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { for (com.google.gerrit.reviewdb.client.PatchSet in : map.values()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = in.getId(); boolean want = false; if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { want = true; } else if (limitToPsId.isPresent()) { want = id.equals(limitToPsId.get()); } else { want = id.equals(cd.change().currentPatchSetId()); } if (want) { if (isWorldReadable == null) { isWorldReadable = isWorldReadable(cd); } res.put(in.getRevision().get(), toRevisionInfo(cd, in, repo, rw, false, changeInfo, isWorldReadable)); } } return res; } }",ed536e0886b525bc99961ead466fe562aebe76f7,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> revisions(com.google.gerrit.server.query.change.ChangeData cd, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> map, java.util.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId, com.google.gerrit.extensions.common.ChangeInfo changeInfo) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.diff.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> res = new java.util.LinkedHashMap<>(); java.lang.Boolean isWorldReadable = null; try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { for (com.google.gerrit.reviewdb.client.PatchSet in : map.values()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = in.getId(); boolean want = false; if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { want = true; } else if (limitToPsId.isPresent()) { want = id.equals(limitToPsId.get()); } else { want = id.equals(cd.change().currentPatchSetId()); } if (want) { if (isWorldReadable == null) { isWorldReadable = isWorldReadable(cd); } res.put(in.getRevision().get(), toRevisionInfo(cd, in, repo, rw, false, changeInfo, isWorldReadable)); } } return res; } }",7d03b7ffc7bed5028e9df9957adc42d014fc6ca2,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_change_ChangeJson.java,"private java.util.List<com.google.gerrit.extensions.common.ChangeInfo> toChangeInfo(java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.extensions.common.ChangeInfo> out, java.util.List<com.google.gerrit.server.query.change.ChangeData> changes) { java.util.List<com.google.gerrit.extensions.common.ChangeInfo> info = com.google.common.collect.Lists.newArrayListWithCapacity(changes.size()); for (com.google.gerrit.server.query.change.ChangeData cd : changes) { com.google.gerrit.extensions.common.ChangeInfo i = out.get(cd.getId()); if (i == null) { try { i = toChangeInfo(cd, java.util.Optional.empty()); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException | com.google.gerrit.server.project.NoSuchProjectException | java.lang.RuntimeException e) { if (has(com.google.gerrit.server.change.CHECK)) { i = checkOnly(cd); } else if (e instanceof com.google.gerrit.server.project.NoSuchChangeException) { com.google.gerrit.server.change.ChangeJson.log.info(((""NoSuchChangeException: Omitting corrupt change "" + (cd.getId())) + "" from results. Seems to be stale in the index."")); continue; } else { com.google.gerrit.server.change.ChangeJson.log.warn(((""Omitting corrupt change "" + (cd.getId())) + "" from results""), e); continue; } } out.put(cd.getId(), i); } info.add(i); } return info; }",3dfb8f5929adcd5cdcbc1e901a4c4629d733c0db,"private java.util.List<com.google.gerrit.extensions.common.ChangeInfo> toChangeInfo(java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.extensions.common.ChangeInfo> out, java.util.List<com.google.gerrit.server.query.change.ChangeData> changes) { java.util.List<com.google.gerrit.extensions.common.ChangeInfo> info = com.google.common.collect.Lists.newArrayListWithCapacity(changes.size()); for (com.google.gerrit.server.query.change.ChangeData cd : changes) { com.google.gerrit.extensions.common.ChangeInfo i = out.get(cd.getId()); if (i == null) { try { i = toChangeInfo(cd, java.util.Optional.empty()); } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException | com.google.gerrit.server.GpgException | com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException | com.google.gerrit.server.project.NoSuchProjectException | java.lang.RuntimeException e) { if (has(com.google.gerrit.server.change.CHECK)) { i = checkOnly(cd); } else if (e instanceof com.google.gerrit.server.project.NoSuchChangeException) { com.google.gerrit.server.change.ChangeJson.log.info(((""NoSuchChangeException: Omitting corrupt change "" + (cd.getId())) + "" from results. Seems to be stale in the index."")); continue; } else { com.google.gerrit.server.change.ChangeJson.log.warn(((""Omitting corrupt change "" + (cd.getId())) + "" from results""), e); continue; } } out.put(cd.getId(), i); } info.add(i); } return info; }",141b2e41e92200e1c80bf2e39620fe1066eac1ad,"private java.util.List<com.google.gerrit.extensions.common.ChangeInfo> toChangeInfo(java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.extensions.common.ChangeInfo> out, java.util.List<com.google.gerrit.server.query.change.ChangeData> changes) { java.util.List<com.google.gerrit.extensions.common.ChangeInfo> info = com.google.common.collect.Lists.newArrayListWithCapacity(changes.size()); for (com.google.gerrit.server.query.change.ChangeData cd : changes) { com.google.gerrit.extensions.common.ChangeInfo i = out.get(cd.getId()); if (i == null) { try { i = toChangeInfo(cd, java.util.Optional.empty()); } catch (com.google.gerrit.server.diff.PatchListNotAvailableException | com.google.gerrit.server.GpgException | com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException | com.google.gerrit.server.project.NoSuchProjectException | java.lang.RuntimeException e) { if (has(com.google.gerrit.server.change.CHECK)) { i = checkOnly(cd); } else if (e instanceof com.google.gerrit.server.project.NoSuchChangeException) { com.google.gerrit.server.change.ChangeJson.log.info(((""NoSuchChangeException: Omitting corrupt change "" + (cd.getId())) + "" from results. Seems to be stale in the index."")); continue; } else { com.google.gerrit.server.change.ChangeJson.log.warn(((""Omitting corrupt change "" + (cd.getId())) + "" from results""), e); continue; } } out.put(cd.getId(), i); } info.add(i); } return info; }",7cde641f23b09687e4a2d84bb9c27aa15ae389be,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_DiffSummaryWeigher.java,"@java.lang.Override public int weigh(com.google.gerrit.server.patch.DiffSummaryKey key, com.google.gerrit.server.patch.DiffSummary value) { int size = ((((((16 + (4 * 8)) + (2 * 36)) + 16) + 8) + (2 * 4)) + 16) + 8; for (java.lang.String p : value.getPaths()) { size += ((((16 + 8) + (4 * 4)) + 16) + 8) + ((p.length()) * 2); } return size; }",36fb4e961d758943b1c7245147a2d801822491c5,"@java.lang.Override public int weigh(com.google.gerrit.server.patchlib.DiffSummaryKey key, com.google.gerrit.server.patchlib.DiffSummary value) { int size = ((((((16 + (4 * 8)) + (2 * 36)) + 16) + 8) + (2 * 4)) + 16) + 8; for (java.lang.String p : value.getPaths()) { size += ((((16 + 8) + (4 * 4)) + 16) + 8) + ((p.length()) * 2); } return size; }",83852795e2d41abc6ea096565b4abf47c6555c99,"@java.lang.Override public int weigh(com.google.gerrit.server.diff.DiffSummaryKey key, com.google.gerrit.server.diff.DiffSummary value) { int size = ((((((16 + (4 * 8)) + (2 * 36)) + 16) + 8) + (2 * 4)) + 16) + 8; for (java.lang.String p : value.getPaths()) { size += ((((16 + 8) + (4 * 4)) + 16) + 8) + ((p.length()) * 2); } return size; }",3c2392bc8204bec50737a8490bb3f3e405107f4f,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_ComparisonType.java,"public static com.google.gerrit.server.patch.ComparisonType againstAutoMerge() { return new com.google.gerrit.server.patch.ComparisonType(null, true); }",e4469052158e80e79059b1741b3f95ddf2ba0486,"public static com.google.gerrit.server.patchlib.ComparisonType againstAutoMerge() { return new com.google.gerrit.server.patchlib.ComparisonType(null, true); }",8d5449c6c8e8b603ac62215b45d5ae5792142779,"public static com.google.gerrit.server.diff.ComparisonType againstAutoMerge() { return new com.google.gerrit.server.diff.ComparisonType(null, true); }",3ee5809818f52c7683c85379836c84ee9ec37c0e,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListKey.java,"private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException { writeCanBeNull(out, oldId); out.writeInt(((parentNum) == null ? 0 : parentNum)); writeNotNull(out, newId); java.lang.Character c = com.google.gerrit.server.patch.PatchListKey.WHITESPACE_TYPES.get(whitespace); if (c == null) { throw new java.io.IOException((""Invalid whitespace type: "" + (whitespace))); } out.writeChar(c); out.writeChar(com.google.gerrit.server.patch.PatchListKey.ALGORITHM_TYPES.get(algorithm)); }",febde7b585168cae5e9c62749622e608101c09bf,"private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException { writeCanBeNull(out, oldId); out.writeInt(((parentNum) == null ? 0 : parentNum)); writeNotNull(out, newId); java.lang.Character c = com.google.gerrit.server.patchlib.PatchListKey.WHITESPACE_TYPES.get(whitespace); if (c == null) { throw new java.io.IOException((""Invalid whitespace type: "" + (whitespace))); } out.writeChar(c); out.writeChar(com.google.gerrit.server.patchlib.PatchListKey.ALGORITHM_TYPES.get(algorithm)); }",38595d1bbf6076221d891a399fa3a0dcadf3757a,"private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException { writeCanBeNull(out, oldId); out.writeInt(((parentNum) == null ? 0 : parentNum)); writeNotNull(out, newId); java.lang.Character c = com.google.gerrit.server.diff.PatchListKey.WHITESPACE_TYPES.get(whitespace); if (c == null) { throw new java.io.IOException((""Invalid whitespace type: "" + (whitespace))); } out.writeChar(c); out.writeChar(com.google.gerrit.server.diff.PatchListKey.ALGORITHM_TYPES.get(algorithm)); }",6642d13c7d14f2e6c42a4e4b53e466caab23033a,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_ComparisonType.java,"public static com.google.gerrit.server.patch.ComparisonType againstParent(int parentNum) { return new com.google.gerrit.server.patch.ComparisonType(parentNum, false); }",fbc48ad6d2d6b81cd0e71e8adb16c0ab20267c73,"public static com.google.gerrit.server.patchlib.ComparisonType againstParent(int parentNum) { return new com.google.gerrit.server.patchlib.ComparisonType(parentNum, false); }",9f3139923002be2908708eb6502247a312f90dfb,"public static com.google.gerrit.server.diff.ComparisonType againstParent(int parentNum) { return new com.google.gerrit.server.diff.ComparisonType(parentNum, false); }",bc53d1f75d0327e06dd84b547c155274ada67079,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListKey.java,"@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof com.google.gerrit.server.patch.PatchListKey) { com.google.gerrit.server.patch.PatchListKey k = ((com.google.gerrit.server.patch.PatchListKey) (o)); return ((((java.util.Objects.equals(oldId, k.oldId)) && (java.util.Objects.equals(parentNum, k.parentNum))) && (java.util.Objects.equals(newId, k.newId))) && ((whitespace) == (k.whitespace))) && ((algorithm) == (k.algorithm)); } return false; }",e015ac17ac9bc2110fd7fde4b7e2d66c958c60f7,"@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof com.google.gerrit.server.patchlib.PatchListKey) { com.google.gerrit.server.patchlib.PatchListKey k = ((com.google.gerrit.server.patchlib.PatchListKey) (o)); return ((((java.util.Objects.equals(oldId, k.oldId)) && (java.util.Objects.equals(parentNum, k.parentNum))) && (java.util.Objects.equals(newId, k.newId))) && ((whitespace) == (k.whitespace))) && ((algorithm) == (k.algorithm)); } return false; }",4593d7eba2e130bc320e82ae1a3cea8d33f8c41d,"@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof com.google.gerrit.server.diff.PatchListKey) { com.google.gerrit.server.diff.PatchListKey k = ((com.google.gerrit.server.diff.PatchListKey) (o)); return ((((java.util.Objects.equals(oldId, k.oldId)) && (java.util.Objects.equals(parentNum, k.parentNum))) && (java.util.Objects.equals(newId, k.newId))) && ((whitespace) == (k.whitespace))) && ((algorithm) == (k.algorithm)); } return false; }",e93195c1609b9c179fc5aaa3b035cabf604ed5af,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_CommentsUtil.java,"public static void setCommentRevId(com.google.gerrit.reviewdb.client.Comment c, com.google.gerrit.server.patch.PatchListCache cache, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { checkArgument(((c.key.patchSetId) == (ps.getId().get())), ""cannot set RevId for patch set %s on comment %s"", ps.getId(), c); if ((c.revId) == null) { try { if ((com.google.gerrit.extensions.client.Side.fromShort(c.side)) == (com.google.gerrit.extensions.client.Side.PARENT)) { if ((c.side) < 0) { c.revId = org.eclipse.jgit.lib.ObjectId.toString(cache.getOldId(change, ps, (-(c.side)))); } else { c.revId = org.eclipse.jgit.lib.ObjectId.toString(cache.getOldId(change, ps, null)); } } else { c.revId = ps.getRevision().get(); } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { throw new com.google.gwtorm.server.OrmException(e); } } }",0560591ec75ff7ea1a941a4da48d144c49b84464,"public static void setCommentRevId(com.google.gerrit.reviewdb.client.Comment c, com.google.gerrit.server.patchlib.PatchListCache cache, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { checkArgument(((c.key.patchSetId) == (ps.getId().get())), ""cannot set RevId for patch set %s on comment %s"", ps.getId(), c); if ((c.revId) == null) { try { if ((com.google.gerrit.extensions.client.Side.fromShort(c.side)) == (com.google.gerrit.extensions.client.Side.PARENT)) { if ((c.side) < 0) { c.revId = org.eclipse.jgit.lib.ObjectId.toString(cache.getOldId(change, ps, (-(c.side)))); } else { c.revId = org.eclipse.jgit.lib.ObjectId.toString(cache.getOldId(change, ps, null)); } } else { c.revId = ps.getRevision().get(); } } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException e) { throw new com.google.gwtorm.server.OrmException(e); } } }",bd82ee3a69b0993b8bd7dddb4738d267c56f968a,"public static void setCommentRevId(com.google.gerrit.reviewdb.client.Comment c, com.google.gerrit.server.diff.PatchListCache cache, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { checkArgument(((c.key.patchSetId) == (ps.getId().get())), ""cannot set RevId for patch set %s on comment %s"", ps.getId(), c); if ((c.revId) == null) { try { if ((com.google.gerrit.extensions.client.Side.fromShort(c.side)) == (com.google.gerrit.extensions.client.Side.PARENT)) { if ((c.side) < 0) { c.revId = org.eclipse.jgit.lib.ObjectId.toString(cache.getOldId(change, ps, (-(c.side)))); } else { c.revId = org.eclipse.jgit.lib.ObjectId.toString(cache.getOldId(change, ps, null)); } } else { c.revId = ps.getRevision().get(); } } catch (com.google.gerrit.server.diff.PatchListNotAvailableException e) { throw new com.google.gwtorm.server.OrmException(e); } } }",5a70cc4a7228777fe5b6b12cd411b6a04d019b42,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_change_PostReview.java,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.changes.ReviewResult> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.RevisionResource revision, com.google.gerrit.extensions.api.changes.ReviewInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return apply(updateFactory, revision, input, com.google.gerrit.common.TimeUtil.nowTs()); }",7cf28b3f42e4418824b9f221b6b82dd4c23ae0ae,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.changes.ReviewResult> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.RevisionResource revision, com.google.gerrit.extensions.api.changes.ReviewInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.patchlib.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return apply(updateFactory, revision, input, com.google.gerrit.common.TimeUtil.nowTs()); }",d557bb434154dad4ec1d4af0ae1587b0ab58cfaa,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.changes.ReviewResult> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.RevisionResource revision, com.google.gerrit.extensions.api.changes.ReviewInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.diff.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return apply(updateFactory, revision, input, com.google.gerrit.common.TimeUtil.nowTs()); }",80de9ebae198d02c42d82a07d435551fa5c507c3,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_change_PostReview.java,"private java.util.Set<java.lang.String> getAffectedFilePaths(com.google.gerrit.server.change.RevisionResource revision) throws com.google.gerrit.server.patch.PatchListNotAvailableException { org.eclipse.jgit.lib.ObjectId newId = org.eclipse.jgit.lib.ObjectId.fromString(revision.getPatchSet().getRevision().get()); com.google.gerrit.server.patch.DiffSummaryKey key = com.google.gerrit.server.patch.DiffSummaryKey.fromPatchListKey(com.google.gerrit.server.patch.PatchListKey.againstDefaultBase(newId, Whitespace.IGNORE_NONE)); com.google.gerrit.server.patch.DiffSummary ds = patchListCache.getDiffSummary(key, revision.getProject()); return new java.util.HashSet(ds.getPaths()); }",0194bda98085bdd0c9452c1016c6587c52341f8f,"private java.util.Set<java.lang.String> getAffectedFilePaths(com.google.gerrit.server.change.RevisionResource revision) throws com.google.gerrit.server.patchlib.PatchListNotAvailableException { org.eclipse.jgit.lib.ObjectId newId = org.eclipse.jgit.lib.ObjectId.fromString(revision.getPatchSet().getRevision().get()); com.google.gerrit.server.patchlib.DiffSummaryKey key = com.google.gerrit.server.patchlib.DiffSummaryKey.fromPatchListKey(com.google.gerrit.server.patchlib.PatchListKey.againstDefaultBase(newId, Whitespace.IGNORE_NONE)); com.google.gerrit.server.patchlib.DiffSummary ds = patchListCache.getDiffSummary(key, revision.getProject()); return new java.util.HashSet(ds.getPaths()); }",a9aa20d8f5db090902437743d77e8927e3db965e,"private java.util.Set<java.lang.String> getAffectedFilePaths(com.google.gerrit.server.change.RevisionResource revision) throws com.google.gerrit.server.diff.PatchListNotAvailableException { org.eclipse.jgit.lib.ObjectId newId = org.eclipse.jgit.lib.ObjectId.fromString(revision.getPatchSet().getRevision().get()); com.google.gerrit.server.diff.DiffSummaryKey key = com.google.gerrit.server.diff.DiffSummaryKey.fromPatchListKey(com.google.gerrit.server.diff.PatchListKey.againstDefaultBase(newId, Whitespace.IGNORE_NONE)); com.google.gerrit.server.diff.DiffSummary ds = patchListCache.getDiffSummary(key, revision.getProject()); return new java.util.HashSet(ds.getPaths()); }",ff6537d7a50defb9821e73be3f27133ca78d8a55,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_change_PostReview.java,"private <T extends com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput> void checkComments(com.google.gerrit.server.change.RevisionResource revision, java.util.Map<java.lang.String, java.util.List<T>> commentsPerPath) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.patch.PatchListNotAvailableException { java.util.Set<java.lang.String> revisionFilePaths = getAffectedFilePaths(revision); for (java.util.Map.Entry<java.lang.String, java.util.List<T>> entry : commentsPerPath.entrySet()) { java.lang.String path = entry.getKey(); com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId = revision.getChange().currentPatchSetId(); com.google.gerrit.server.change.PostReview.ensurePathRefersToAvailableOrMagicFile(path, revisionFilePaths, patchSetId); java.util.List<T> comments = entry.getValue(); for (T comment : comments) { com.google.gerrit.server.change.PostReview.ensureLineIsNonNegative(comment.line, path); com.google.gerrit.server.change.PostReview.ensureCommentNotOnMagicFilesOfAutoMerge(path, comment); com.google.gerrit.server.change.PostReview.ensureRangeIsValid(path, comment.range); } } }",f5138fcf827c709c9bbaba89f59114ce8c1996d2,"private <T extends com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput> void checkComments(com.google.gerrit.server.change.RevisionResource revision, java.util.Map<java.lang.String, java.util.List<T>> commentsPerPath) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.patchlib.PatchListNotAvailableException { java.util.Set<java.lang.String> revisionFilePaths = getAffectedFilePaths(revision); for (java.util.Map.Entry<java.lang.String, java.util.List<T>> entry : commentsPerPath.entrySet()) { java.lang.String path = entry.getKey(); com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId = revision.getChange().currentPatchSetId(); com.google.gerrit.server.change.PostReview.ensurePathRefersToAvailableOrMagicFile(path, revisionFilePaths, patchSetId); java.util.List<T> comments = entry.getValue(); for (T comment : comments) { com.google.gerrit.server.change.PostReview.ensureLineIsNonNegative(comment.line, path); com.google.gerrit.server.change.PostReview.ensureCommentNotOnMagicFilesOfAutoMerge(path, comment); com.google.gerrit.server.change.PostReview.ensureRangeIsValid(path, comment.range); } } }",b8e8ac0fc2dd1409146a43efa2c76e758cdd4955,"private <T extends com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput> void checkComments(com.google.gerrit.server.change.RevisionResource revision, java.util.Map<java.lang.String, java.util.List<T>> commentsPerPath) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.diff.PatchListNotAvailableException { java.util.Set<java.lang.String> revisionFilePaths = getAffectedFilePaths(revision); for (java.util.Map.Entry<java.lang.String, java.util.List<T>> entry : commentsPerPath.entrySet()) { java.lang.String path = entry.getKey(); com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId = revision.getChange().currentPatchSetId(); com.google.gerrit.server.change.PostReview.ensurePathRefersToAvailableOrMagicFile(path, revisionFilePaths, patchSetId); java.util.List<T> comments = entry.getValue(); for (T comment : comments) { com.google.gerrit.server.change.PostReview.ensureLineIsNonNegative(comment.line, path); com.google.gerrit.server.change.PostReview.ensureCommentNotOnMagicFilesOfAutoMerge(path, comment); com.google.gerrit.server.change.PostReview.ensureRangeIsValid(path, comment.range); } } }",568239634f4fdfdd0d8cdc7c5d54a7e3987340f0,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_change_PostReview.java,"private void checkRobotComments(com.google.gerrit.server.change.RevisionResource revision, java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput>> in) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.patch.PatchListNotAvailableException { com.google.gerrit.server.change.PostReview.cleanUpComments(in); for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput>> e : in.entrySet()) { java.lang.String commentPath = e.getKey(); for (com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput c : e.getValue()) { ensureSizeOfJsonInputIsWithinBounds(c); com.google.gerrit.server.change.PostReview.ensureRobotIdIsSet(c.robotId, commentPath); com.google.gerrit.server.change.PostReview.ensureRobotRunIdIsSet(c.robotRunId, commentPath); com.google.gerrit.server.change.PostReview.ensureFixSuggestionsAreAddable(c.fixSuggestions, commentPath); } } checkComments(revision, in); }",2a7f33d2ea7ab5215425ab6c043d9804f6dc0bf9,"private void checkRobotComments(com.google.gerrit.server.change.RevisionResource revision, java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput>> in) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.patchlib.PatchListNotAvailableException { com.google.gerrit.server.change.PostReview.cleanUpComments(in); for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput>> e : in.entrySet()) { java.lang.String commentPath = e.getKey(); for (com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput c : e.getValue()) { ensureSizeOfJsonInputIsWithinBounds(c); com.google.gerrit.server.change.PostReview.ensureRobotIdIsSet(c.robotId, commentPath); com.google.gerrit.server.change.PostReview.ensureRobotRunIdIsSet(c.robotRunId, commentPath); com.google.gerrit.server.change.PostReview.ensureFixSuggestionsAreAddable(c.fixSuggestions, commentPath); } } checkComments(revision, in); }",b48cf1d7e4db97747d85435fa4fe27ffdf2637ad,"private void checkRobotComments(com.google.gerrit.server.change.RevisionResource revision, java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput>> in) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.diff.PatchListNotAvailableException { com.google.gerrit.server.change.PostReview.cleanUpComments(in); for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput>> e : in.entrySet()) { java.lang.String commentPath = e.getKey(); for (com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput c : e.getValue()) { ensureSizeOfJsonInputIsWithinBounds(c); com.google.gerrit.server.change.PostReview.ensureRobotIdIsSet(c.robotId, commentPath); com.google.gerrit.server.change.PostReview.ensureRobotRunIdIsSet(c.robotRunId, commentPath); com.google.gerrit.server.change.PostReview.ensureFixSuggestionsAreAddable(c.fixSuggestions, commentPath); } } checkComments(revision, in); }",1e9aeef2b83ec2ff1a1acc3fba7187ea4d5ba4fc,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListCache.java,"com.google.gerrit.server.patch.PatchList get(com.google.gerrit.server.patch.PatchListKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.patch.PatchListNotAvailableException;",c7e037ad29d94effe54061a69dcf61437ef0b28b,"com.google.gerrit.server.patchlib.PatchList get(com.google.gerrit.server.patchlib.PatchListKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.patchlib.PatchListNotAvailableException;",2797a7689517d46cf02f0fe6733b8fc743b3cc94,"com.google.gerrit.server.diff.PatchList get(com.google.gerrit.server.diff.PatchListKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.diff.PatchListNotAvailableException;",fc67596876459d3b4b19580b822da4dd4a875c73,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListCache.java,"com.google.gerrit.server.patch.IntraLineDiff getIntraLineDiff(com.google.gerrit.server.patch.IntraLineDiffKey key, com.google.gerrit.server.patch.IntraLineDiffArgs args);",c98c8e11d5bc72a8f89494aecdedeb034733e3da,"com.google.gerrit.server.patchlib.IntraLineDiff getIntraLineDiff(com.google.gerrit.server.patchlib.IntraLineDiffKey key, com.google.gerrit.server.patchlib.IntraLineDiffArgs args);",34d06f2c4bc96c6de87bd864d0c6a4072f65d7d4,"com.google.gerrit.server.diff.IntraLineDiff getIntraLineDiff(com.google.gerrit.server.diff.IntraLineDiffKey key, com.google.gerrit.server.diff.IntraLineDiffArgs args);",e049c1d910a729b32337cee38105f496cce851c7,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListCache.java,"org.eclipse.jgit.lib.ObjectId getOldId(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.lang.Integer parentNum) throws com.google.gerrit.server.patch.PatchListNotAvailableException;",465bdce33c5b6cec0712f5b763f101e9c043d561,"org.eclipse.jgit.lib.ObjectId getOldId(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.lang.Integer parentNum) throws com.google.gerrit.server.patchlib.PatchListNotAvailableException;",bef5398758ec69f7adb7134b97f15b52560ebeda,"org.eclipse.jgit.lib.ObjectId getOldId(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.lang.Integer parentNum) throws com.google.gerrit.server.diff.PatchListNotAvailableException;",0f6d65bff0c8e2eda058894eb7e2565860bde0d3,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListCache.java,"com.google.gerrit.server.patch.DiffSummary getDiffSummary(com.google.gerrit.server.patch.DiffSummaryKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.patch.PatchListNotAvailableException;",983828b3989f51e628d2e36152d760ce5a5815bf,"com.google.gerrit.server.patchlib.DiffSummary getDiffSummary(com.google.gerrit.server.patchlib.DiffSummaryKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.patchlib.PatchListNotAvailableException;",c02941ce3aa138a9189337494fb4a3023cc3cd94,"com.google.gerrit.server.diff.DiffSummary getDiffSummary(com.google.gerrit.server.diff.DiffSummaryKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.diff.PatchListNotAvailableException;",b14dfab53bf7b0f31e843b9648c666dffcb585eb,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListCache.java,"com.google.gerrit.server.patch.PatchList get(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gerrit.server.patch.PatchListNotAvailableException;",6152af02e333f2d196bf9d5469a7415ba94b7b28,"com.google.gerrit.server.patchlib.PatchList get(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gerrit.server.patchlib.PatchListNotAvailableException;",0913417a3c0cef79190d2d6ecf1ec1e49d6b10bc,"com.google.gerrit.server.diff.PatchList get(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gerrit.server.diff.PatchListNotAvailableException;",7189043b8862a11b74512f415108f9795a2bfbd0,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_change_Files.java,"private java.util.Collection<java.lang.String> reviewed(com.google.gerrit.server.change.RevisionResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.CurrentUser user = self.get(); if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } com.google.gerrit.reviewdb.client.Account.Id userId = user.getAccountId(); com.google.gerrit.reviewdb.client.PatchSet patchSetId = resource.getPatchSet(); java.util.Optional<com.google.gerrit.server.change.AccountPatchReviewStore.PatchSetWithReviewedFiles> o = accountPatchReviewStore.get().findReviewed(patchSetId.getId(), userId); if (o.isPresent()) { com.google.gerrit.server.change.AccountPatchReviewStore.PatchSetWithReviewedFiles res = o.get(); if (res.patchSetId().equals(patchSetId.getId())) { return res.files(); } try { return copy(res.files(), res.patchSetId(), resource, userId); } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.change.Files.ListFiles.log.warn((""Cannot copy patch review flags: "" + (e.getMessage()))); } catch (java.io.IOException | com.google.gerrit.server.patch.PatchListNotAvailableException e) { com.google.gerrit.server.change.Files.ListFiles.log.warn(""Cannot copy patch review flags"", e); } } return java.util.Collections.emptyList(); }",5f82078d94891f88ea8c06d3e0c4c085129261a6,"private java.util.Collection<java.lang.String> reviewed(com.google.gerrit.server.change.RevisionResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.CurrentUser user = self.get(); if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } com.google.gerrit.reviewdb.client.Account.Id userId = user.getAccountId(); com.google.gerrit.reviewdb.client.PatchSet patchSetId = resource.getPatchSet(); java.util.Optional<com.google.gerrit.server.change.AccountPatchReviewStore.PatchSetWithReviewedFiles> o = accountPatchReviewStore.get().findReviewed(patchSetId.getId(), userId); if (o.isPresent()) { com.google.gerrit.server.change.AccountPatchReviewStore.PatchSetWithReviewedFiles res = o.get(); if (res.patchSetId().equals(patchSetId.getId())) { return res.files(); } try { return copy(res.files(), res.patchSetId(), resource, userId); } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.change.Files.ListFiles.log.warn((""Cannot copy patch review flags: "" + (e.getMessage()))); } catch (java.io.IOException | com.google.gerrit.server.patchlib.PatchListNotAvailableException e) { com.google.gerrit.server.change.Files.ListFiles.log.warn(""Cannot copy patch review flags"", e); } } return java.util.Collections.emptyList(); }",c59561556c8135bf96ab30a0435f66a6a6c7ae05,"private java.util.Collection<java.lang.String> reviewed(com.google.gerrit.server.change.RevisionResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.CurrentUser user = self.get(); if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } com.google.gerrit.reviewdb.client.Account.Id userId = user.getAccountId(); com.google.gerrit.reviewdb.client.PatchSet patchSetId = resource.getPatchSet(); java.util.Optional<com.google.gerrit.server.change.AccountPatchReviewStore.PatchSetWithReviewedFiles> o = accountPatchReviewStore.get().findReviewed(patchSetId.getId(), userId); if (o.isPresent()) { com.google.gerrit.server.change.AccountPatchReviewStore.PatchSetWithReviewedFiles res = o.get(); if (res.patchSetId().equals(patchSetId.getId())) { return res.files(); } try { return copy(res.files(), res.patchSetId(), resource, userId); } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.change.Files.ListFiles.log.warn((""Cannot copy patch review flags: "" + (e.getMessage()))); } catch (java.io.IOException | com.google.gerrit.server.diff.PatchListNotAvailableException e) { com.google.gerrit.server.change.Files.ListFiles.log.warn(""Cannot copy patch review flags"", e); } } return java.util.Collections.emptyList(); }",a1f3945f7ca475255fbb02192a688382cf4d681b,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_change_Files.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.RevisionResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { checkOptions(); if (reviewed) { return com.google.gerrit.extensions.restapi.Response.ok(reviewed(resource)); } else if ((query) != null) { return com.google.gerrit.extensions.restapi.Response.ok(query(resource)); } com.google.gerrit.extensions.restapi.Response<java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo>> r; if ((base) != null) { com.google.gerrit.server.change.RevisionResource baseResource = revisions.parse(resource.getChangeResource(), com.google.gerrit.extensions.restapi.IdString.fromDecoded(base)); r = com.google.gerrit.extensions.restapi.Response.ok(fileInfoJson.toFileInfoMap(resource.getChange(), resource.getPatchSet().getRevision(), baseResource.getPatchSet())); } else if ((parentNum) > 0) { r = com.google.gerrit.extensions.restapi.Response.ok(fileInfoJson.toFileInfoMap(resource.getChange(), resource.getPatchSet().getRevision(), ((parentNum) - 1))); } else { r = com.google.gerrit.extensions.restapi.Response.ok(fileInfoJson.toFileInfoMap(resource.getChange(), resource.getPatchSet())); } if (resource.isCacheable()) { r.caching(com.google.gerrit.extensions.restapi.CacheControl.PRIVATE(7, java.util.concurrent.TimeUnit.DAYS)); } return r; }",8a34d8d93cac7f933401469bef9b97b20e117c61,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.RevisionResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.patchlib.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { checkOptions(); if (reviewed) { return com.google.gerrit.extensions.restapi.Response.ok(reviewed(resource)); } else if ((query) != null) { return com.google.gerrit.extensions.restapi.Response.ok(query(resource)); } com.google.gerrit.extensions.restapi.Response<java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo>> r; if ((base) != null) { com.google.gerrit.server.change.RevisionResource baseResource = revisions.parse(resource.getChangeResource(), com.google.gerrit.extensions.restapi.IdString.fromDecoded(base)); r = com.google.gerrit.extensions.restapi.Response.ok(fileInfoJson.toFileInfoMap(resource.getChange(), resource.getPatchSet().getRevision(), baseResource.getPatchSet())); } else if ((parentNum) > 0) { r = com.google.gerrit.extensions.restapi.Response.ok(fileInfoJson.toFileInfoMap(resource.getChange(), resource.getPatchSet().getRevision(), ((parentNum) - 1))); } else { r = com.google.gerrit.extensions.restapi.Response.ok(fileInfoJson.toFileInfoMap(resource.getChange(), resource.getPatchSet())); } if (resource.isCacheable()) { r.caching(com.google.gerrit.extensions.restapi.CacheControl.PRIVATE(7, java.util.concurrent.TimeUnit.DAYS)); } return r; }",18a1b504053bca6c4552bda8beaed8a2cfb0bac3,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.RevisionResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.diff.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { checkOptions(); if (reviewed) { return com.google.gerrit.extensions.restapi.Response.ok(reviewed(resource)); } else if ((query) != null) { return com.google.gerrit.extensions.restapi.Response.ok(query(resource)); } com.google.gerrit.extensions.restapi.Response<java.util.Map<java.lang.String, com.google.gerrit.extensions.common.FileInfo>> r; if ((base) != null) { com.google.gerrit.server.change.RevisionResource baseResource = revisions.parse(resource.getChangeResource(), com.google.gerrit.extensions.restapi.IdString.fromDecoded(base)); r = com.google.gerrit.extensions.restapi.Response.ok(fileInfoJson.toFileInfoMap(resource.getChange(), resource.getPatchSet().getRevision(), baseResource.getPatchSet())); } else if ((parentNum) > 0) { r = com.google.gerrit.extensions.restapi.Response.ok(fileInfoJson.toFileInfoMap(resource.getChange(), resource.getPatchSet().getRevision(), ((parentNum) - 1))); } else { r = com.google.gerrit.extensions.restapi.Response.ok(fileInfoJson.toFileInfoMap(resource.getChange(), resource.getPatchSet())); } if (resource.isCacheable()) { r.caching(com.google.gerrit.extensions.restapi.CacheControl.PRIVATE(7, java.util.concurrent.TimeUnit.DAYS)); } return r; }",51456da257466c8337e0b273a641793896d1c181,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_Text.java,"private static java.nio.charset.Charset charset(byte[] content, java.lang.String encoding) { if (encoding == null) { org.mozilla.universalchardet.UniversalDetector d = new org.mozilla.universalchardet.UniversalDetector(null); d.handleData(content, 0, content.length); d.dataEnd(); encoding = d.getDetectedCharset(); } if (encoding == null) { return java.nio.charset.StandardCharsets.ISO_8859_1; } try { return java.nio.charset.Charset.forName(encoding); } catch (java.nio.charset.IllegalCharsetNameException err) { com.google.gerrit.server.patch.Text.log.error((((""Invalid detected charset name '"" + encoding) + ""': "") + err)); return java.nio.charset.StandardCharsets.ISO_8859_1; } catch (java.nio.charset.UnsupportedCharsetException err) { com.google.gerrit.server.patch.Text.log.error((((""Detected charset '"" + encoding) + ""' not supported: "") + err)); return java.nio.charset.StandardCharsets.ISO_8859_1; } }",700f2e7fd688514b4148b6d8e14b687f325f05da,"private static java.nio.charset.Charset charset(byte[] content, java.lang.String encoding) { if (encoding == null) { org.mozilla.universalchardet.UniversalDetector d = new org.mozilla.universalchardet.UniversalDetector(null); d.handleData(content, 0, content.length); d.dataEnd(); encoding = d.getDetectedCharset(); } if (encoding == null) { return java.nio.charset.StandardCharsets.ISO_8859_1; } try { return java.nio.charset.Charset.forName(encoding); } catch (java.nio.charset.IllegalCharsetNameException err) { com.google.gerrit.server.patchlib.Text.log.error((((""Invalid detected charset name '"" + encoding) + ""': "") + err)); return java.nio.charset.StandardCharsets.ISO_8859_1; } catch (java.nio.charset.UnsupportedCharsetException err) { com.google.gerrit.server.patchlib.Text.log.error((((""Detected charset '"" + encoding) + ""' not supported: "") + err)); return java.nio.charset.StandardCharsets.ISO_8859_1; } }",28f4b78dca5db4173eab50848bc87f9b036c3dea,"private static java.nio.charset.Charset charset(byte[] content, java.lang.String encoding) { if (encoding == null) { org.mozilla.universalchardet.UniversalDetector d = new org.mozilla.universalchardet.UniversalDetector(null); d.handleData(content, 0, content.length); d.dataEnd(); encoding = d.getDetectedCharset(); } if (encoding == null) { return java.nio.charset.StandardCharsets.ISO_8859_1; } try { return java.nio.charset.Charset.forName(encoding); } catch (java.nio.charset.IllegalCharsetNameException err) { com.google.gerrit.server.diff.Text.log.error((((""Invalid detected charset name '"" + encoding) + ""': "") + err)); return java.nio.charset.StandardCharsets.ISO_8859_1; } catch (java.nio.charset.UnsupportedCharsetException err) { com.google.gerrit.server.diff.Text.log.error((((""Detected charset '"" + encoding) + ""' not supported: "") + err)); return java.nio.charset.StandardCharsets.ISO_8859_1; } }",9b42bc76ec3da1b303edcdbf7ce0ba35019b5201,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_extensions_events_CommentAdded.java,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account author, java.lang.String comment, java.util.Map<java.lang.String, java.lang.Short> approvals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.CommentAdded.Event event = new com.google.gerrit.server.extensions.events.CommentAdded.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(author), comment, util.approvals(author, approvals, when), util.approvals(author, oldApprovals, when), when); for (com.google.gerrit.extensions.events.CommentAddedListener l : listeners) { try { l.onCommentAdded(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.CommentAdded.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.CommentAdded.log.error(""Couldn't fire event"", e); } }",0ac0c90baeac3abee6d4f2d04e1aa675c85f587f,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account author, java.lang.String comment, java.util.Map<java.lang.String, java.lang.Short> approvals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.CommentAdded.Event event = new com.google.gerrit.server.extensions.events.CommentAdded.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(author), comment, util.approvals(author, approvals, when), util.approvals(author, oldApprovals, when), when); for (com.google.gerrit.extensions.events.CommentAddedListener l : listeners) { try { l.onCommentAdded(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.CommentAdded.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.CommentAdded.log.error(""Couldn't fire event"", e); } }",2914b2fd12e401ac27551988be6bdb5715b8c633,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account author, java.lang.String comment, java.util.Map<java.lang.String, java.lang.Short> approvals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.CommentAdded.Event event = new com.google.gerrit.server.extensions.events.CommentAdded.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(author), comment, util.approvals(author, approvals, when), util.approvals(author, oldApprovals, when), when); for (com.google.gerrit.extensions.events.CommentAddedListener l : listeners) { try { l.onCommentAdded(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.CommentAdded.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.diff.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.CommentAdded.log.error(""Couldn't fire event"", e); } }",e2fc9cd9d57db61a7f63765a7deb7fe57ca266c6,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_Text.java,"public static byte[] asByteArray(org.eclipse.jgit.lib.ObjectLoader ldr) throws java.io.IOException, org.eclipse.jgit.errors.LargeObjectException, org.eclipse.jgit.errors.MissingObjectException { return ldr.getCachedBytes(com.google.gerrit.server.patch.Text.bigFileThreshold); }",0db11b871b924efed2f0b1754d21648ea2d0aafc,"public static byte[] asByteArray(org.eclipse.jgit.lib.ObjectLoader ldr) throws java.io.IOException, org.eclipse.jgit.errors.LargeObjectException, org.eclipse.jgit.errors.MissingObjectException { return ldr.getCachedBytes(com.google.gerrit.server.patchlib.Text.bigFileThreshold); }",38ad131276ad87cbffa53b43915b777c1a29ba43,"public static byte[] asByteArray(org.eclipse.jgit.lib.ObjectLoader ldr) throws java.io.IOException, org.eclipse.jgit.errors.LargeObjectException, org.eclipse.jgit.errors.MissingObjectException { return ldr.getCachedBytes(com.google.gerrit.server.diff.Text.bigFileThreshold); }",03a3a06b1378863ca7b271bde4e1f822ea2e622a,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_Text.java,"@java.lang.Override protected java.lang.String decode(int s, int e) { if ((charset) == null) { charset = com.google.gerrit.server.patch.Text.charset(content, null); } return org.eclipse.jgit.util.RawParseUtils.decode(charset, content, s, e); }",7bb1d1388bb7ec699731ed0c28b1f51ea452e7d1,"@java.lang.Override protected java.lang.String decode(int s, int e) { if ((charset) == null) { charset = com.google.gerrit.server.patchlib.Text.charset(content, null); } return org.eclipse.jgit.util.RawParseUtils.decode(charset, content, s, e); }",368b9b2a4cf0879c576b7cd4b3254d9906ea3251,"@java.lang.Override protected java.lang.String decode(int s, int e) { if ((charset) == null) { charset = com.google.gerrit.server.diff.Text.charset(content, null); } return org.eclipse.jgit.util.RawParseUtils.decode(charset, content, s, e); }",e571c6c4d6ce5dbb091d4557a61453c12ce45768,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_Text.java,"public static com.google.gerrit.server.patch.Text forMergeList(com.google.gerrit.server.patch.ComparisonType comparisonType, org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.lib.AnyObjectId commitId) throws java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(reader)) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(commitId); java.lang.StringBuilder b = new java.lang.StringBuilder(); switch (c.getParentCount()) { case 0 : break; case 1 : { break; } default : int uniterestingParent = (comparisonType.isAgainstParent()) ? comparisonType.getParentNum() : 1; b.append(""Merge List:\n\n""); for (org.eclipse.jgit.revwalk.RevCommit commit : com.google.gerrit.server.patch.MergeListBuilder.build(rw, c, uniterestingParent)) { b.append(""* ""); b.append(reader.abbreviate(commit, 8).name()); b.append("" ""); b.append(commit.getShortMessage()); b.append(""\n""); } } return new com.google.gerrit.server.patch.Text(b.toString().getBytes(java.nio.charset.StandardCharsets.UTF_8)); } }",a179f8266124a87ff3b61179b08dce9f8a0ee696,"public static com.google.gerrit.server.patchlib.Text forMergeList(com.google.gerrit.server.patchlib.ComparisonType comparisonType, org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.lib.AnyObjectId commitId) throws java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(reader)) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(commitId); java.lang.StringBuilder b = new java.lang.StringBuilder(); switch (c.getParentCount()) { case 0 : break; case 1 : { break; } default : int uniterestingParent = (comparisonType.isAgainstParent()) ? comparisonType.getParentNum() : 1; b.append(""Merge List:\n\n""); for (org.eclipse.jgit.revwalk.RevCommit commit : com.google.gerrit.server.patchlib.MergeListBuilder.build(rw, c, uniterestingParent)) { b.append(""* ""); b.append(reader.abbreviate(commit, 8).name()); b.append("" ""); b.append(commit.getShortMessage()); b.append(""\n""); } } return new com.google.gerrit.server.patchlib.Text(b.toString().getBytes(java.nio.charset.StandardCharsets.UTF_8)); } }",b83f49dd114f2d5ccc2acd6b644d652485d691d4,"public static com.google.gerrit.server.diff.Text forMergeList(com.google.gerrit.server.diff.ComparisonType comparisonType, org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.lib.AnyObjectId commitId) throws java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(reader)) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(commitId); java.lang.StringBuilder b = new java.lang.StringBuilder(); switch (c.getParentCount()) { case 0 : break; case 1 : { break; } default : int uniterestingParent = (comparisonType.isAgainstParent()) ? comparisonType.getParentNum() : 1; b.append(""Merge List:\n\n""); for (org.eclipse.jgit.revwalk.RevCommit commit : com.google.gerrit.server.diff.MergeListBuilder.build(rw, c, uniterestingParent)) { b.append(""* ""); b.append(reader.abbreviate(commit, 8).name()); b.append("" ""); b.append(commit.getShortMessage()); b.append(""\n""); } } return new com.google.gerrit.server.diff.Text(b.toString().getBytes(java.nio.charset.StandardCharsets.UTF_8)); } }",d809ccd63e9861e724375e7172359370202ed932,2017-11-15 12:52:05,11
140535,javatests_com_google_gerrit_server_patchlib_PatchListTest.java,"@org.junit.Test public void fileOrder() { java.lang.String[] names = new java.lang.String[]{ ""zzz"", ""def/g"", ""/!xxx"", ""abc"", com.google.gerrit.reviewdb.client.Patch.MERGE_LIST, ""qrx"", com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG }; java.lang.String[] want = new java.lang.String[]{ com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG, com.google.gerrit.reviewdb.client.Patch.MERGE_LIST, ""/!xxx"", ""abc"", ""def/g"", ""qrx"", ""zzz"" }; java.util.Arrays.sort(names, 0, names.length, new java.util.Comparator<java.lang.String>() { @java.lang.Override public int compare(java.lang.String o1, java.lang.String o2) { return com.google.gerrit.server.patch.PatchList.comparePaths(o1, o2); } }); assertThat(names).isEqualTo(want); }",46c486f5d6305c744214acf370b212718fc8e294,"@org.junit.Test public void fileOrder() { java.lang.String[] names = new java.lang.String[]{ ""zzz"", ""def/g"", ""/!xxx"", ""abc"", com.google.gerrit.reviewdb.client.Patch.MERGE_LIST, ""qrx"", com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG }; java.lang.String[] want = new java.lang.String[]{ com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG, com.google.gerrit.reviewdb.client.Patch.MERGE_LIST, ""/!xxx"", ""abc"", ""def/g"", ""qrx"", ""zzz"" }; java.util.Arrays.sort(names, 0, names.length, new java.util.Comparator<java.lang.String>() { @java.lang.Override public int compare(java.lang.String o1, java.lang.String o2) { return com.google.gerrit.server.patchlib.PatchList.comparePaths(o1, o2); } }); assertThat(names).isEqualTo(want); }",75549381f1732a79da6095070e7c2c57ee93bda2,"@org.junit.Test public void fileOrder() { java.lang.String[] names = new java.lang.String[]{ ""zzz"", ""def/g"", ""/!xxx"", ""abc"", com.google.gerrit.reviewdb.client.Patch.MERGE_LIST, ""qrx"", com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG }; java.lang.String[] want = new java.lang.String[]{ com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG, com.google.gerrit.reviewdb.client.Patch.MERGE_LIST, ""/!xxx"", ""abc"", ""def/g"", ""qrx"", ""zzz"" }; java.util.Arrays.sort(names, 0, names.length, new java.util.Comparator<java.lang.String>() { @java.lang.Override public int compare(java.lang.String o1, java.lang.String o2) { return com.google.gerrit.server.diff.PatchList.comparePaths(o1, o2); } }); assertThat(names).isEqualTo(want); }",e6ee6a795553effa63a3c2993b110cf9dbd76a25,2017-11-15 12:52:05,11
140535,javatests_com_google_gerrit_server_patchlib_PatchListTest.java,"@org.junit.Test public void fileOrderNoMerge() { java.lang.String[] names = new java.lang.String[]{ ""zzz"", ""def/g"", ""/!xxx"", ""abc"", ""qrx"", com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG }; java.lang.String[] want = new java.lang.String[]{ com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG, ""/!xxx"", ""abc"", ""def/g"", ""qrx"", ""zzz"" }; java.util.Arrays.sort(names, 0, names.length, new java.util.Comparator<java.lang.String>() { @java.lang.Override public int compare(java.lang.String o1, java.lang.String o2) { return com.google.gerrit.server.patch.PatchList.comparePaths(o1, o2); } }); assertThat(names).isEqualTo(want); }",1816cc4df16a2b86d7e3e57bea0cd264191850dd,"@org.junit.Test public void fileOrderNoMerge() { java.lang.String[] names = new java.lang.String[]{ ""zzz"", ""def/g"", ""/!xxx"", ""abc"", ""qrx"", com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG }; java.lang.String[] want = new java.lang.String[]{ com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG, ""/!xxx"", ""abc"", ""def/g"", ""qrx"", ""zzz"" }; java.util.Arrays.sort(names, 0, names.length, new java.util.Comparator<java.lang.String>() { @java.lang.Override public int compare(java.lang.String o1, java.lang.String o2) { return com.google.gerrit.server.patchlib.PatchList.comparePaths(o1, o2); } }); assertThat(names).isEqualTo(want); }",483ce9963702b1a2d8eff843ccf0fd0c1a68d374,"@org.junit.Test public void fileOrderNoMerge() { java.lang.String[] names = new java.lang.String[]{ ""zzz"", ""def/g"", ""/!xxx"", ""abc"", ""qrx"", com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG }; java.lang.String[] want = new java.lang.String[]{ com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG, ""/!xxx"", ""abc"", ""def/g"", ""qrx"", ""zzz"" }; java.util.Arrays.sort(names, 0, names.length, new java.util.Comparator<java.lang.String>() { @java.lang.Override public int compare(java.lang.String o1, java.lang.String o2) { return com.google.gerrit.server.diff.PatchList.comparePaths(o1, o2); } }); assertThat(names).isEqualTo(want); }",5dc1280191f222f5f5c7f1484698cf105ecb9f24,2017-11-15 12:52:05,11
140535,javatests_com_google_gerrit_server_patchlib_PatchListTest.java,"@java.lang.Override public int compare(java.lang.String o1, java.lang.String o2) { return com.google.gerrit.server.patch.PatchList.comparePaths(o1, o2); }",92b7725ef770a3b00bb4a8ec09e0df978f7b0557,"@java.lang.Override public int compare(java.lang.String o1, java.lang.String o2) { return com.google.gerrit.server.patchlib.PatchList.comparePaths(o1, o2); }",b0565f573fc9d98dd864332bb1a4dcc0dcacc32d,"@java.lang.Override public int compare(java.lang.String o1, java.lang.String o2) { return com.google.gerrit.server.diff.PatchList.comparePaths(o1, o2); }",b6802f0da3d36fa89c7258c74881336715ce5972,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_extensions_events_EventUtil.java,"public com.google.gerrit.extensions.common.RevisionInfo revisionInfo(com.google.gerrit.reviewdb.client.Project project, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { return revisionInfo(project.getNameKey(), ps); }",bfcb03aec86f896a34080002205bd9cb53f6d2ce,"public com.google.gerrit.extensions.common.RevisionInfo revisionInfo(com.google.gerrit.reviewdb.client.Project project, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patchlib.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { return revisionInfo(project.getNameKey(), ps); }",f9588d979a1cf807cdbb61db55a9485eb867581c,"public com.google.gerrit.extensions.common.RevisionInfo revisionInfo(com.google.gerrit.reviewdb.client.Project project, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.diff.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { return revisionInfo(project.getNameKey(), ps); }",ff16ae208f9c9edc241a7f207d0d3404f8bde28a,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_extensions_events_ReviewerDeleted.java,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.reviewdb.client.Account reviewer, com.google.gerrit.reviewdb.client.Account remover, java.lang.String message, java.util.Map<java.lang.String, java.lang.Short> newApprovals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, com.google.gerrit.extensions.api.changes.NotifyHandling notify, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ReviewerDeleted.Event event = new com.google.gerrit.server.extensions.events.ReviewerDeleted.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), util.accountInfo(reviewer), util.accountInfo(remover), message, util.approvals(reviewer, newApprovals, when), util.approvals(reviewer, oldApprovals, when), notify, when); for (com.google.gerrit.extensions.events.ReviewerDeletedListener listener : listeners) { try { listener.onReviewerDeleted(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, listener, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ReviewerDeleted.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ReviewerDeleted.log.error(""Couldn't fire event"", e); } }",926f1be50c1dc391a26d3b69a44e9fe7344c0af4,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.reviewdb.client.Account reviewer, com.google.gerrit.reviewdb.client.Account remover, java.lang.String message, java.util.Map<java.lang.String, java.lang.Short> newApprovals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, com.google.gerrit.extensions.api.changes.NotifyHandling notify, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ReviewerDeleted.Event event = new com.google.gerrit.server.extensions.events.ReviewerDeleted.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), util.accountInfo(reviewer), util.accountInfo(remover), message, util.approvals(reviewer, newApprovals, when), util.approvals(reviewer, oldApprovals, when), notify, when); for (com.google.gerrit.extensions.events.ReviewerDeletedListener listener : listeners) { try { listener.onReviewerDeleted(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, listener, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ReviewerDeleted.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ReviewerDeleted.log.error(""Couldn't fire event"", e); } }",c6730aadbf7e8cef6f7b7847518a28cf71d64a7f,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.reviewdb.client.Account reviewer, com.google.gerrit.reviewdb.client.Account remover, java.lang.String message, java.util.Map<java.lang.String, java.lang.Short> newApprovals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, com.google.gerrit.extensions.api.changes.NotifyHandling notify, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ReviewerDeleted.Event event = new com.google.gerrit.server.extensions.events.ReviewerDeleted.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), util.accountInfo(reviewer), util.accountInfo(remover), message, util.approvals(reviewer, newApprovals, when), util.approvals(reviewer, oldApprovals, when), notify, when); for (com.google.gerrit.extensions.events.ReviewerDeletedListener listener : listeners) { try { listener.onReviewerDeleted(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, listener, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ReviewerDeleted.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.diff.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ReviewerDeleted.log.error(""Couldn't fire event"", e); } }",a858a0744f2b64f258db807f19966891e4d317f6,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListWeigher.java,"@java.lang.Override public int weigh(com.google.gerrit.server.patch.PatchListKey key, com.google.gerrit.server.patch.PatchList value) { int size = ((((((16 + (4 * 8)) + (2 * 36)) + 8) + 16) + (3 * 8)) + (3 * 4)) + 20; for (com.google.gerrit.server.patch.PatchListEntry e : value.getPatches()) { size += e.weigh(); } return size; }",b03a00c0fda18c2c1273d335790c0cba11b64b35,"@java.lang.Override public int weigh(com.google.gerrit.server.patchlib.PatchListKey key, com.google.gerrit.server.patchlib.PatchList value) { int size = ((((((16 + (4 * 8)) + (2 * 36)) + 8) + 16) + (3 * 8)) + (3 * 4)) + 20; for (com.google.gerrit.server.patchlib.PatchListEntry e : value.getPatches()) { size += e.weigh(); } return size; }",fa364f56d0693e14fc083e376f9bddf9fc3da8a7,"@java.lang.Override public int weigh(com.google.gerrit.server.diff.PatchListKey key, com.google.gerrit.server.diff.PatchList value) { int size = ((((((16 + (4 * 8)) + (2 * 36)) + 8) + 16) + (3 * 8)) + (3 * 4)) + 20; for (com.google.gerrit.server.diff.PatchListEntry e : value.getPatches()) { size += e.weigh(); } return size; }",2724ab56899f1c3f0c147b43500f9a5d13bc37da,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListKey.java,"private void readObject(java.io.ObjectInputStream in) throws java.io.IOException { oldId = readCanBeNull(in); int n = in.readInt(); parentNum = (n == 0) ? null : java.lang.Integer.valueOf(n); newId = readNotNull(in); char t = in.readChar(); whitespace = com.google.gerrit.server.patch.PatchListKey.WHITESPACE_TYPES.inverse().get(t); if ((whitespace) == null) { throw new java.io.IOException((""Invalid whitespace type code: "" + t)); } char algorithmCharacter = in.readChar(); algorithm = com.google.gerrit.server.patch.PatchListKey.ALGORITHM_TYPES.inverse().get(algorithmCharacter); }",40f8a3985b81c468fb69958758123134bab78223,"private void readObject(java.io.ObjectInputStream in) throws java.io.IOException { oldId = readCanBeNull(in); int n = in.readInt(); parentNum = (n == 0) ? null : java.lang.Integer.valueOf(n); newId = readNotNull(in); char t = in.readChar(); whitespace = com.google.gerrit.server.patchlib.PatchListKey.WHITESPACE_TYPES.inverse().get(t); if ((whitespace) == null) { throw new java.io.IOException((""Invalid whitespace type code: "" + t)); } char algorithmCharacter = in.readChar(); algorithm = com.google.gerrit.server.patchlib.PatchListKey.ALGORITHM_TYPES.inverse().get(algorithmCharacter); }",67938860d9704fb126a3f19e4e5e88c58a4ca39f,"private void readObject(java.io.ObjectInputStream in) throws java.io.IOException { oldId = readCanBeNull(in); int n = in.readInt(); parentNum = (n == 0) ? null : java.lang.Integer.valueOf(n); newId = readNotNull(in); char t = in.readChar(); whitespace = com.google.gerrit.server.diff.PatchListKey.WHITESPACE_TYPES.inverse().get(t); if ((whitespace) == null) { throw new java.io.IOException((""Invalid whitespace type code: "" + t)); } char algorithmCharacter = in.readChar(); algorithm = com.google.gerrit.server.diff.PatchListKey.ALGORITHM_TYPES.inverse().get(algorithmCharacter); }",eab4a8a32193850a4e6e1eb57449b89a067aa7fe,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListKey.java,"public static com.google.gerrit.server.patch.PatchListKey againstParentNum(int parentNum, org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws) { return new com.google.gerrit.server.patch.PatchListKey(parentNum, newId, ws, com.google.gerrit.server.patch.PatchListKey.Algorithm.OPTIMIZED_DIFF); }",2006dae220a03705547802de72e0af22cad19a61,"public static com.google.gerrit.server.patchlib.PatchListKey againstParentNum(int parentNum, org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws) { return new com.google.gerrit.server.patchlib.PatchListKey(parentNum, newId, ws, com.google.gerrit.server.patchlib.PatchListKey.Algorithm.OPTIMIZED_DIFF); }",53d3b825187a53f35abaa6824ca56a918b9cef23,"public static com.google.gerrit.server.diff.PatchListKey againstParentNum(int parentNum, org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws) { return new com.google.gerrit.server.diff.PatchListKey(parentNum, newId, ws, com.google.gerrit.server.diff.PatchListKey.Algorithm.OPTIMIZED_DIFF); }",490dffc2960f8ca8976bd2afbced17a6c089cfee,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListKey.java,public com.google.gerrit.server.patch.PatchListKey.Algorithm getAlgorithm() { return algorithm; },22842c3fb37aec8745a605ac78fecf5f181a6d54,public com.google.gerrit.server.patchlib.PatchListKey.Algorithm getAlgorithm() { return algorithm; },8d596334c6824f27c9fa11bbeb0be170fb567c93,public com.google.gerrit.server.diff.PatchListKey.Algorithm getAlgorithm() { return algorithm; },e66707cffdd1bdf5d75426d3c480c05534441eb8,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_extensions_events_EventUtil.java,"public com.google.gerrit.extensions.common.RevisionInfo revisionInfo(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), project, ps.getId().getParentKey()); return changeJson.getRevisionInfo(cd, ps); }",70525402905f4627ec5f6e825b47c511d889eaf4,"public com.google.gerrit.extensions.common.RevisionInfo revisionInfo(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patchlib.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), project, ps.getId().getParentKey()); return changeJson.getRevisionInfo(cd, ps); }",57234a736a8f5c293a3a68106192c5f340e263b0,"public com.google.gerrit.extensions.common.RevisionInfo revisionInfo(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.diff.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), project, ps.getId().getParentKey()); return changeJson.getRevisionInfo(cd, ps); }",42f57ffd4978094333d40232cc2e548dd3c31670,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListKey.java,"public static com.google.gerrit.server.patch.PatchListKey againstDefaultBase(org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws) { return new com.google.gerrit.server.patch.PatchListKey(null, newId, ws, com.google.gerrit.server.patch.PatchListKey.Algorithm.OPTIMIZED_DIFF); }",77784b4043c1652600fad778df6b0bb5d9fbb99f,"public static com.google.gerrit.server.patchlib.PatchListKey againstDefaultBase(org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws) { return new com.google.gerrit.server.patchlib.PatchListKey(null, newId, ws, com.google.gerrit.server.patchlib.PatchListKey.Algorithm.OPTIMIZED_DIFF); }",24627fa7b88598f2a7eb713b42e405e6a79af29b,"public static com.google.gerrit.server.diff.PatchListKey againstDefaultBase(org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws) { return new com.google.gerrit.server.diff.PatchListKey(null, newId, ws, com.google.gerrit.server.diff.PatchListKey.Algorithm.OPTIMIZED_DIFF); }",b5a4f1116755e93f6d2cc082aaac5c8fbd39a900,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_Text.java,"public static com.google.gerrit.server.patch.Text forCommit(org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.lib.AnyObjectId commitId) throws java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(reader)) { org.eclipse.jgit.revwalk.RevCommit c; if (commitId instanceof org.eclipse.jgit.revwalk.RevCommit) { c = ((org.eclipse.jgit.revwalk.RevCommit) (commitId)); } else { c = rw.parseCommit(commitId); } java.lang.StringBuilder b = new java.lang.StringBuilder(); switch (c.getParentCount()) { case 0 : break; case 1 : { org.eclipse.jgit.revwalk.RevCommit p = c.getParent(0); rw.parseBody(p); b.append(""Parent: ""); b.append(reader.abbreviate(p, 8).name()); b.append("" (""); b.append(p.getShortMessage()); b.append("")\n""); break; } default : for (int i = 0; i < (c.getParentCount()); i++) { org.eclipse.jgit.revwalk.RevCommit p = c.getParent(i); rw.parseBody(p); b.append((i == 0 ? ""Merge Of: "" : "" "")); b.append(reader.abbreviate(p, 8).name()); b.append("" (""); b.append(p.getShortMessage()); b.append("")\n""); } } com.google.gerrit.server.patch.Text.appendPersonIdent(b, ""Author"", c.getAuthorIdent()); com.google.gerrit.server.patch.Text.appendPersonIdent(b, ""Commit"", c.getCommitterIdent()); b.append(""\n""); b.append(c.getFullMessage()); return new com.google.gerrit.server.patch.Text(b.toString().getBytes(java.nio.charset.StandardCharsets.UTF_8)); } }",e1a4c3c37b25d8a3c14607fba309bc3029cdd3bc,"public static com.google.gerrit.server.patchlib.Text forCommit(org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.lib.AnyObjectId commitId) throws java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(reader)) { org.eclipse.jgit.revwalk.RevCommit c; if (commitId instanceof org.eclipse.jgit.revwalk.RevCommit) { c = ((org.eclipse.jgit.revwalk.RevCommit) (commitId)); } else { c = rw.parseCommit(commitId); } java.lang.StringBuilder b = new java.lang.StringBuilder(); switch (c.getParentCount()) { case 0 : break; case 1 : { org.eclipse.jgit.revwalk.RevCommit p = c.getParent(0); rw.parseBody(p); b.append(""Parent: ""); b.append(reader.abbreviate(p, 8).name()); b.append("" (""); b.append(p.getShortMessage()); b.append("")\n""); break; } default : for (int i = 0; i < (c.getParentCount()); i++) { org.eclipse.jgit.revwalk.RevCommit p = c.getParent(i); rw.parseBody(p); b.append((i == 0 ? ""Merge Of: "" : "" "")); b.append(reader.abbreviate(p, 8).name()); b.append("" (""); b.append(p.getShortMessage()); b.append("")\n""); } } com.google.gerrit.server.patchlib.Text.appendPersonIdent(b, ""Author"", c.getAuthorIdent()); com.google.gerrit.server.patchlib.Text.appendPersonIdent(b, ""Commit"", c.getCommitterIdent()); b.append(""\n""); b.append(c.getFullMessage()); return new com.google.gerrit.server.patchlib.Text(b.toString().getBytes(java.nio.charset.StandardCharsets.UTF_8)); } }",f11f8992f2b030d7556b8b2bfa928250ff9ef4de,"public static com.google.gerrit.server.diff.Text forCommit(org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.lib.AnyObjectId commitId) throws java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(reader)) { org.eclipse.jgit.revwalk.RevCommit c; if (commitId instanceof org.eclipse.jgit.revwalk.RevCommit) { c = ((org.eclipse.jgit.revwalk.RevCommit) (commitId)); } else { c = rw.parseCommit(commitId); } java.lang.StringBuilder b = new java.lang.StringBuilder(); switch (c.getParentCount()) { case 0 : break; case 1 : { org.eclipse.jgit.revwalk.RevCommit p = c.getParent(0); rw.parseBody(p); b.append(""Parent: ""); b.append(reader.abbreviate(p, 8).name()); b.append("" (""); b.append(p.getShortMessage()); b.append("")\n""); break; } default : for (int i = 0; i < (c.getParentCount()); i++) { org.eclipse.jgit.revwalk.RevCommit p = c.getParent(i); rw.parseBody(p); b.append((i == 0 ? ""Merge Of: "" : "" "")); b.append(reader.abbreviate(p, 8).name()); b.append("" (""); b.append(p.getShortMessage()); b.append("")\n""); } } com.google.gerrit.server.diff.Text.appendPersonIdent(b, ""Author"", c.getAuthorIdent()); com.google.gerrit.server.diff.Text.appendPersonIdent(b, ""Commit"", c.getCommitterIdent()); b.append(""\n""); b.append(c.getFullMessage()); return new com.google.gerrit.server.diff.Text(b.toString().getBytes(java.nio.charset.StandardCharsets.UTF_8)); } }",dd1580339b558d9797f372dc5ffae21d5f346650,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_DiffSummaryLoader.java,"com.google.gerrit.server.patch.DiffSummaryLoader create(com.google.gerrit.server.patch.DiffSummaryKey key, com.google.gerrit.reviewdb.client.Project.NameKey project);",da0f4b35fe0418eb1d4ba4d8d272969288e384e0,"com.google.gerrit.server.patch.DiffSummaryLoader create(com.google.gerrit.server.patchlib.DiffSummaryKey key, com.google.gerrit.reviewdb.client.Project.NameKey project);",6dd045249ef698ab60ca8069647aea4d1a306caf,"com.google.gerrit.server.patch.DiffSummaryLoader create(com.google.gerrit.server.diff.DiffSummaryKey key, com.google.gerrit.reviewdb.client.Project.NameKey project);",9ac1acaecd266015307a1b01d2fa7a78759fbb5d,2017-11-15 12:52:05,11
140535,java_gerrit_PRED_commit_stats_3.java,"@java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec(com.googlecode.prolog_cafe.lang.Prolog engine) throws com.googlecode.prolog_cafe.exceptions.PrologException { engine.setB0(); com.googlecode.prolog_cafe.lang.Term a1 = arg1.dereference(); com.googlecode.prolog_cafe.lang.Term a2 = arg2.dereference(); com.googlecode.prolog_cafe.lang.Term a3 = arg3.dereference(); com.google.gerrit.server.patch.PatchList pl = StoredValues.PATCH_LIST.get(engine); if (!(a1.unify(new com.googlecode.prolog_cafe.lang.IntegerTerm(((pl.getPatches().size()) - (countMagicFiles(pl.getPatches())))), engine.trail))) { return engine.fail(); } if (!(a2.unify(new com.googlecode.prolog_cafe.lang.IntegerTerm(pl.getInsertions()), engine.trail))) { return engine.fail(); } if (!(a3.unify(new com.googlecode.prolog_cafe.lang.IntegerTerm(pl.getDeletions()), engine.trail))) { return engine.fail(); } return cont; }",c6ea8c727157d278544002aaed2200ac711b3ac5,"@java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec(com.googlecode.prolog_cafe.lang.Prolog engine) throws com.googlecode.prolog_cafe.exceptions.PrologException { engine.setB0(); com.googlecode.prolog_cafe.lang.Term a1 = arg1.dereference(); com.googlecode.prolog_cafe.lang.Term a2 = arg2.dereference(); com.googlecode.prolog_cafe.lang.Term a3 = arg3.dereference(); com.google.gerrit.server.patchlib.PatchList pl = StoredValues.PATCH_LIST.get(engine); if (!(a1.unify(new com.googlecode.prolog_cafe.lang.IntegerTerm(((pl.getPatches().size()) - (countMagicFiles(pl.getPatches())))), engine.trail))) { return engine.fail(); } if (!(a2.unify(new com.googlecode.prolog_cafe.lang.IntegerTerm(pl.getInsertions()), engine.trail))) { return engine.fail(); } if (!(a3.unify(new com.googlecode.prolog_cafe.lang.IntegerTerm(pl.getDeletions()), engine.trail))) { return engine.fail(); } return cont; }",265d9f2448a723b2bc87b6edd4091fd5d8851ca0,"@java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec(com.googlecode.prolog_cafe.lang.Prolog engine) throws com.googlecode.prolog_cafe.exceptions.PrologException { engine.setB0(); com.googlecode.prolog_cafe.lang.Term a1 = arg1.dereference(); com.googlecode.prolog_cafe.lang.Term a2 = arg2.dereference(); com.googlecode.prolog_cafe.lang.Term a3 = arg3.dereference(); com.google.gerrit.server.diff.PatchList pl = StoredValues.PATCH_LIST.get(engine); if (!(a1.unify(new com.googlecode.prolog_cafe.lang.IntegerTerm(((pl.getPatches().size()) - (countMagicFiles(pl.getPatches())))), engine.trail))) { return engine.fail(); } if (!(a2.unify(new com.googlecode.prolog_cafe.lang.IntegerTerm(pl.getInsertions()), engine.trail))) { return engine.fail(); } if (!(a3.unify(new com.googlecode.prolog_cafe.lang.IntegerTerm(pl.getDeletions()), engine.trail))) { return engine.fail(); } return cont; }",0513207356582d295b0016e4d6f00644340dc7ce,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_change_ChangeEdits.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getNotes(), rsrc.getUser()); if (!(edit.isPresent())) { return com.google.gerrit.extensions.restapi.Response.none(); } com.google.gerrit.extensions.common.EditInfo editInfo = editJson.toEditInfo(edit.get(), downloadCommands); if (list) { com.google.gerrit.reviewdb.client.PatchSet basePatchSet = null; if ((base) != null) { com.google.gerrit.server.change.RevisionResource baseResource = revisions.parse(rsrc, com.google.gerrit.extensions.restapi.IdString.fromDecoded(base)); basePatchSet = baseResource.getPatchSet(); } try { editInfo.files = fileInfoJson.toFileInfoMap(rsrc.getChange(), edit.get().getEditCommit(), basePatchSet); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(e.getMessage()); } } return com.google.gerrit.extensions.restapi.Response.ok(editInfo); }",b63026a6dc1701b17bbb10b9fca05cfd48b574aa,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getNotes(), rsrc.getUser()); if (!(edit.isPresent())) { return com.google.gerrit.extensions.restapi.Response.none(); } com.google.gerrit.extensions.common.EditInfo editInfo = editJson.toEditInfo(edit.get(), downloadCommands); if (list) { com.google.gerrit.reviewdb.client.PatchSet basePatchSet = null; if ((base) != null) { com.google.gerrit.server.change.RevisionResource baseResource = revisions.parse(rsrc, com.google.gerrit.extensions.restapi.IdString.fromDecoded(base)); basePatchSet = baseResource.getPatchSet(); } try { editInfo.files = fileInfoJson.toFileInfoMap(rsrc.getChange(), edit.get().getEditCommit(), basePatchSet); } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(e.getMessage()); } } return com.google.gerrit.extensions.restapi.Response.ok(editInfo); }",676a7f65051816ffe5677b3dfbf9cf3f41e921b5,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getNotes(), rsrc.getUser()); if (!(edit.isPresent())) { return com.google.gerrit.extensions.restapi.Response.none(); } com.google.gerrit.extensions.common.EditInfo editInfo = editJson.toEditInfo(edit.get(), downloadCommands); if (list) { com.google.gerrit.reviewdb.client.PatchSet basePatchSet = null; if ((base) != null) { com.google.gerrit.server.change.RevisionResource baseResource = revisions.parse(rsrc, com.google.gerrit.extensions.restapi.IdString.fromDecoded(base)); basePatchSet = baseResource.getPatchSet(); } try { editInfo.files = fileInfoJson.toFileInfoMap(rsrc.getChange(), edit.get().getEditCommit(), basePatchSet); } catch (com.google.gerrit.server.diff.PatchListNotAvailableException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(e.getMessage()); } } return com.google.gerrit.extensions.restapi.Response.ok(editInfo); }",c88a68cad28a53adb3a6f6d75434573bfb1be42e,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_extensions_events_VoteDeleted.java,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account reviewer, java.util.Map<java.lang.String, java.lang.Short> approvals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, com.google.gerrit.extensions.api.changes.NotifyHandling notify, java.lang.String message, com.google.gerrit.reviewdb.client.Account remover, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.VoteDeleted.Event event = new com.google.gerrit.server.extensions.events.VoteDeleted.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(reviewer), util.approvals(remover, approvals, when), util.approvals(remover, oldApprovals, when), notify, message, util.accountInfo(remover), when); for (com.google.gerrit.extensions.events.VoteDeletedListener l : listeners) { try { l.onVoteDeleted(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.VoteDeleted.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.VoteDeleted.log.error(""Couldn't fire event"", e); } }",89b38e781915d7a2d59212a58a7a67371cafa5aa,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account reviewer, java.util.Map<java.lang.String, java.lang.Short> approvals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, com.google.gerrit.extensions.api.changes.NotifyHandling notify, java.lang.String message, com.google.gerrit.reviewdb.client.Account remover, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.VoteDeleted.Event event = new com.google.gerrit.server.extensions.events.VoteDeleted.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(reviewer), util.approvals(remover, approvals, when), util.approvals(remover, oldApprovals, when), notify, message, util.accountInfo(remover), when); for (com.google.gerrit.extensions.events.VoteDeletedListener l : listeners) { try { l.onVoteDeleted(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.VoteDeleted.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.VoteDeleted.log.error(""Couldn't fire event"", e); } }",ba68b90e318bbf5c7a77a62d6b772150c8acc218,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account reviewer, java.util.Map<java.lang.String, java.lang.Short> approvals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, com.google.gerrit.extensions.api.changes.NotifyHandling notify, java.lang.String message, com.google.gerrit.reviewdb.client.Account remover, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.VoteDeleted.Event event = new com.google.gerrit.server.extensions.events.VoteDeleted.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(reviewer), util.approvals(remover, approvals, when), util.approvals(remover, oldApprovals, when), notify, message, util.accountInfo(remover), when); for (com.google.gerrit.extensions.events.VoteDeletedListener l : listeners) { try { l.onVoteDeleted(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.VoteDeleted.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.diff.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.VoteDeleted.log.error(""Couldn't fire event"", e); } }",bb072ba8f7427de36738ebed13257c171f03a364,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_IntraLineDiffArgs.java,private static com.google.common.collect.ImmutableList<org.eclipse.jgit.diff.Edit> deepCopyEdits(java.util.List<org.eclipse.jgit.diff.Edit> edits) { return edits.stream().map(com.google.gerrit.server.patch.IntraLineDiffArgs::copy).collect(com.google.common.collect.ImmutableList.toImmutableList()); },2b0f271fae01585b4e1491a103e768e7de26b759,private static com.google.common.collect.ImmutableList<org.eclipse.jgit.diff.Edit> deepCopyEdits(java.util.List<org.eclipse.jgit.diff.Edit> edits) { return edits.stream().map(com.google.gerrit.server.patchlib.IntraLineDiffArgs::copy).collect(com.google.common.collect.ImmutableList.toImmutableList()); },02db31e78b57aa77fa0025d6817feeda372b6439,private static com.google.common.collect.ImmutableList<org.eclipse.jgit.diff.Edit> deepCopyEdits(java.util.List<org.eclipse.jgit.diff.Edit> edits) { return edits.stream().map(com.google.gerrit.server.diff.IntraLineDiffArgs::copy).collect(com.google.common.collect.ImmutableList.toImmutableList()); },ecac0c0ea63349b22dcd94db1f22d760498d13bb,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_IntraLineDiffArgs.java,public abstract com.google.gerrit.server.patch.Text aText();,8a6bfbf4e4eaecb95e7ce1a7af1bf6b5483e57fb,public abstract com.google.gerrit.server.patchlib.Text aText();,e2344e29faa6d43df3b408213c8d592ffdb6d3f9,public abstract com.google.gerrit.server.diff.Text aText();,28918853edcf0df87409f891bbcacddea365a718,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_IntraLineDiffArgs.java,public abstract com.google.gerrit.server.patch.Text bText();,ab827bf893a9852ab5c6b1022a03be85511c2b79,public abstract com.google.gerrit.server.patchlib.Text bText();,dd8eb9f7d67fa6ef0e99cb1d4cc7dbfd5a273e29,public abstract com.google.gerrit.server.diff.Text bText();,df88c5c83a48703e810c016a55c804c574fb3944,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_IntraLineDiffArgs.java,"public static com.google.gerrit.server.patch.IntraLineDiffArgs create(com.google.gerrit.server.patch.Text aText, com.google.gerrit.server.patch.Text bText, java.util.List<org.eclipse.jgit.diff.Edit> edits, com.google.gerrit.reviewdb.client.Project.NameKey project, org.eclipse.jgit.lib.ObjectId commit, java.lang.String path) { return new com.google.gerrit.server.patch.AutoValue_IntraLineDiffArgs(aText, bText, com.google.gerrit.server.patch.IntraLineDiffArgs.deepCopyEdits(edits), project, commit, path); }",cb020a36452b73628112006b518fe9fcf1b16a8f,"public static com.google.gerrit.server.patchlib.IntraLineDiffArgs create(com.google.gerrit.server.patchlib.Text aText, com.google.gerrit.server.patchlib.Text bText, java.util.List<org.eclipse.jgit.diff.Edit> edits, com.google.gerrit.reviewdb.client.Project.NameKey project, org.eclipse.jgit.lib.ObjectId commit, java.lang.String path) { return new com.google.gerrit.server.patchlib.AutoValue_IntraLineDiffArgs(aText, bText, com.google.gerrit.server.patchlib.IntraLineDiffArgs.deepCopyEdits(edits), project, commit, path); }",20de806f68c35b4c776d61e43031957378e90384,"public static com.google.gerrit.server.diff.IntraLineDiffArgs create(com.google.gerrit.server.diff.Text aText, com.google.gerrit.server.diff.Text bText, java.util.List<org.eclipse.jgit.diff.Edit> edits, com.google.gerrit.reviewdb.client.Project.NameKey project, org.eclipse.jgit.lib.ObjectId commit, java.lang.String path) { return new com.google.gerrit.server.diff.AutoValue_IntraLineDiffArgs(aText, bText, com.google.gerrit.server.diff.IntraLineDiffArgs.deepCopyEdits(edits), project, commit, path); }",f314cd2231d83a0c9f23b969d84bad8262f96553,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_DiffSummaryKey.java,"@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof com.google.gerrit.server.patch.DiffSummaryKey) { com.google.gerrit.server.patch.DiffSummaryKey k = ((com.google.gerrit.server.patch.DiffSummaryKey) (o)); return (((java.util.Objects.equals(oldId, k.oldId)) && (java.util.Objects.equals(parentNum, k.parentNum))) && (java.util.Objects.equals(newId, k.newId))) && ((whitespace) == (k.whitespace)); } return false; }",0dea306d226f31b51440535deb12c6d252bf0027,"@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof com.google.gerrit.server.patchlib.DiffSummaryKey) { com.google.gerrit.server.patchlib.DiffSummaryKey k = ((com.google.gerrit.server.patchlib.DiffSummaryKey) (o)); return (((java.util.Objects.equals(oldId, k.oldId)) && (java.util.Objects.equals(parentNum, k.parentNum))) && (java.util.Objects.equals(newId, k.newId))) && ((whitespace) == (k.whitespace)); } return false; }",30700be3509e4c2a0813e8abf2110a7dc99ffc3b,"@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof com.google.gerrit.server.diff.DiffSummaryKey) { com.google.gerrit.server.diff.DiffSummaryKey k = ((com.google.gerrit.server.diff.DiffSummaryKey) (o)); return (((java.util.Objects.equals(oldId, k.oldId)) && (java.util.Objects.equals(parentNum, k.parentNum))) && (java.util.Objects.equals(newId, k.newId))) && ((whitespace) == (k.whitespace)); } return false; }",bca0cbf3683377d79ff62d8e0fe7e7aeb6ef3953,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_DiffSummaryKey.java,"public static com.google.gerrit.server.patch.DiffSummaryKey fromPatchListKey(com.google.gerrit.server.patch.PatchListKey plk) { com.google.common.base.Preconditions.checkArgument(((plk.getAlgorithm()) == (PatchListKey.Algorithm.OPTIMIZED_DIFF))); return new com.google.gerrit.server.patch.DiffSummaryKey(plk.getOldId(), plk.getParentNum(), plk.getNewId(), plk.getWhitespace()); }",a6831ec8034982fb88497800b3541e60864b4f21,"public static com.google.gerrit.server.patchlib.DiffSummaryKey fromPatchListKey(com.google.gerrit.server.patchlib.PatchListKey plk) { com.google.common.base.Preconditions.checkArgument(((plk.getAlgorithm()) == (PatchListKey.Algorithm.OPTIMIZED_DIFF))); return new com.google.gerrit.server.patchlib.DiffSummaryKey(plk.getOldId(), plk.getParentNum(), plk.getNewId(), plk.getWhitespace()); }",ea28161ba724b313c61ec1b9e7aaa547db208ce9,"public static com.google.gerrit.server.diff.DiffSummaryKey fromPatchListKey(com.google.gerrit.server.diff.PatchListKey plk) { com.google.common.base.Preconditions.checkArgument(((plk.getAlgorithm()) == (PatchListKey.Algorithm.OPTIMIZED_DIFF))); return new com.google.gerrit.server.diff.DiffSummaryKey(plk.getOldId(), plk.getParentNum(), plk.getNewId(), plk.getWhitespace()); }",88303ad344c5b524aa72bfaf2eac9c11877dc625,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_DiffSummaryKey.java,"com.google.gerrit.server.patch.PatchListKey toPatchListKey() { return new com.google.gerrit.server.patch.PatchListKey(oldId, parentNum, newId, whitespace, PatchListKey.Algorithm.OPTIMIZED_DIFF); }",938de41394a8052bff097c4cb0ac73c6594c523e,"public com.google.gerrit.server.patchlib.PatchListKey toPatchListKey() { return new com.google.gerrit.server.patchlib.PatchListKey(oldId, parentNum, newId, whitespace, PatchListKey.Algorithm.OPTIMIZED_DIFF); }",2ede4523c95ee84eb088f1cd52a15049ad767b36,"public com.google.gerrit.server.diff.PatchListKey toPatchListKey() { return new com.google.gerrit.server.diff.PatchListKey(oldId, parentNum, newId, whitespace, PatchListKey.Algorithm.OPTIMIZED_DIFF); }",93cf7d4ff10c280867b3c01ce57a97fbe693cf9b,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,"private com.google.gerrit.server.patch.PatchListEntry newCommitMessage(org.eclipse.jgit.diff.RawTextComparator cmp, org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.revwalk.RevCommit aCommit, org.eclipse.jgit.revwalk.RevCommit bCommit) throws java.io.IOException { com.google.gerrit.server.patch.Text aText = (aCommit != null) ? com.google.gerrit.server.patch.Text.forCommit(reader, aCommit) : Text.EMPTY; com.google.gerrit.server.patch.Text bText = com.google.gerrit.server.patch.Text.forCommit(reader, bCommit); return com.google.gerrit.server.patch.PatchListLoader.createPatchListEntry(cmp, aCommit, aText, bText, Patch.COMMIT_MSG); }",38939a002265045179c213017db7c2c62967eaa1,"private com.google.gerrit.server.patchlib.PatchListEntry newCommitMessage(org.eclipse.jgit.diff.RawTextComparator cmp, org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.revwalk.RevCommit aCommit, org.eclipse.jgit.revwalk.RevCommit bCommit) throws java.io.IOException { com.google.gerrit.server.patchlib.Text aText = (aCommit != null) ? com.google.gerrit.server.patchlib.Text.forCommit(reader, aCommit) : com.google.gerrit.server.patchlib.Text.EMPTY; com.google.gerrit.server.patchlib.Text bText = com.google.gerrit.server.patchlib.Text.forCommit(reader, bCommit); return com.google.gerrit.server.patch.PatchListLoader.createPatchListEntry(cmp, aCommit, aText, bText, Patch.COMMIT_MSG); }",5bf16617329dbbcadc52dae46699b200f4e72f5f,"private com.google.gerrit.server.diff.PatchListEntry newCommitMessage(org.eclipse.jgit.diff.RawTextComparator cmp, org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.revwalk.RevCommit aCommit, org.eclipse.jgit.revwalk.RevCommit bCommit) throws java.io.IOException { com.google.gerrit.server.diff.Text aText = (aCommit != null) ? com.google.gerrit.server.diff.Text.forCommit(reader, aCommit) : com.google.gerrit.server.diff.Text.EMPTY; com.google.gerrit.server.diff.Text bText = com.google.gerrit.server.diff.Text.forCommit(reader, bCommit); return com.google.gerrit.server.patch.PatchListLoader.createPatchListEntry(cmp, aCommit, aText, bText, Patch.COMMIT_MSG); }",b84773a9e7728b6f3222bf58022a784a142a464d,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,"@java.lang.Override public com.google.gerrit.server.patch.PatchList call() throws com.google.gerrit.server.patch.PatchListNotAvailableException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.lib.ObjectInserter ins = newInserter(repo);org.eclipse.jgit.lib.ObjectReader reader = ins.newReader();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(reader)) { return readPatchList(repo, rw, ins); } }",a35955d8ac47eb6a8e7458a1cf8cf39c8074df58,"@java.lang.Override public com.google.gerrit.server.patchlib.PatchList call() throws com.google.gerrit.server.patchlib.PatchListNotAvailableException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.lib.ObjectInserter ins = newInserter(repo);org.eclipse.jgit.lib.ObjectReader reader = ins.newReader();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(reader)) { return readPatchList(repo, rw, ins); } }",18a160888ec4e4ffe0d1217d94f92b9ff91a6524,"@java.lang.Override public com.google.gerrit.server.diff.PatchList call() throws com.google.gerrit.server.diff.PatchListNotAvailableException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.lib.ObjectInserter ins = newInserter(repo);org.eclipse.jgit.lib.ObjectReader reader = ins.newReader();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(reader)) { return readPatchList(repo, rw, ins); } }",d27cbb7454e2872eb71109d961d5309cd2b5fec1,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,"private java.util.Optional<com.google.gerrit.server.patch.PatchListEntry> getPatchListEntry(org.eclipse.jgit.lib.ObjectReader objectReader, org.eclipse.jgit.diff.DiffFormatter diffFormatter, org.eclipse.jgit.diff.DiffEntry diffEntry, org.eclipse.jgit.revwalk.RevTree treeA, org.eclipse.jgit.revwalk.RevTree treeB, java.util.Set<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebase) throws java.io.IOException { org.eclipse.jgit.patch.FileHeader fileHeader = toFileHeader(key.getNewId(), diffFormatter, diffEntry); long oldSize = com.google.gerrit.server.patch.PatchListLoader.getFileSize(objectReader, diffEntry.getOldMode(), diffEntry.getOldPath(), treeA); long newSize = com.google.gerrit.server.patch.PatchListLoader.getFileSize(objectReader, diffEntry.getNewMode(), diffEntry.getNewPath(), treeB); java.util.Set<org.eclipse.jgit.diff.Edit> contentEditsDueToRebase = com.google.gerrit.server.patch.PatchListLoader.getContentEdits(editsDueToRebase); com.google.gerrit.server.patch.PatchListEntry patchListEntry = com.google.gerrit.server.patch.PatchListLoader.newEntry(treeA, fileHeader, contentEditsDueToRebase, newSize, (newSize - oldSize)); if (com.google.gerrit.server.patch.EditTransformer.toEdits(patchListEntry).allMatch(editsDueToRebase::contains)) { return java.util.Optional.empty(); } return java.util.Optional.of(patchListEntry); }",71e4898b3c9f63c2609baecc150094fd12b0c969,"private java.util.Optional<com.google.gerrit.server.patchlib.PatchListEntry> getPatchListEntry(org.eclipse.jgit.lib.ObjectReader objectReader, org.eclipse.jgit.diff.DiffFormatter diffFormatter, org.eclipse.jgit.diff.DiffEntry diffEntry, org.eclipse.jgit.revwalk.RevTree treeA, org.eclipse.jgit.revwalk.RevTree treeB, java.util.Set<com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit> editsDueToRebase) throws java.io.IOException { org.eclipse.jgit.patch.FileHeader fileHeader = toFileHeader(key.getNewId(), diffFormatter, diffEntry); long oldSize = com.google.gerrit.server.patch.PatchListLoader.getFileSize(objectReader, diffEntry.getOldMode(), diffEntry.getOldPath(), treeA); long newSize = com.google.gerrit.server.patch.PatchListLoader.getFileSize(objectReader, diffEntry.getNewMode(), diffEntry.getNewPath(), treeB); java.util.Set<org.eclipse.jgit.diff.Edit> contentEditsDueToRebase = com.google.gerrit.server.patch.PatchListLoader.getContentEdits(editsDueToRebase); com.google.gerrit.server.patchlib.PatchListEntry patchListEntry = com.google.gerrit.server.patch.PatchListLoader.newEntry(treeA, fileHeader, contentEditsDueToRebase, newSize, (newSize - oldSize)); if (com.google.gerrit.server.patchlib.EditTransformer.toEdits(patchListEntry).allMatch(editsDueToRebase::contains)) { return java.util.Optional.empty(); } return java.util.Optional.of(patchListEntry); }",d8ca5b41345b416a1448a860c0d586f3e982b48d,"private java.util.Optional<com.google.gerrit.server.diff.PatchListEntry> getPatchListEntry(org.eclipse.jgit.lib.ObjectReader objectReader, org.eclipse.jgit.diff.DiffFormatter diffFormatter, org.eclipse.jgit.diff.DiffEntry diffEntry, org.eclipse.jgit.revwalk.RevTree treeA, org.eclipse.jgit.revwalk.RevTree treeB, java.util.Set<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebase) throws java.io.IOException { org.eclipse.jgit.patch.FileHeader fileHeader = toFileHeader(key.getNewId(), diffFormatter, diffEntry); long oldSize = com.google.gerrit.server.patch.PatchListLoader.getFileSize(objectReader, diffEntry.getOldMode(), diffEntry.getOldPath(), treeA); long newSize = com.google.gerrit.server.patch.PatchListLoader.getFileSize(objectReader, diffEntry.getNewMode(), diffEntry.getNewPath(), treeB); java.util.Set<org.eclipse.jgit.diff.Edit> contentEditsDueToRebase = com.google.gerrit.server.patch.PatchListLoader.getContentEdits(editsDueToRebase); com.google.gerrit.server.diff.PatchListEntry patchListEntry = com.google.gerrit.server.patch.PatchListLoader.newEntry(treeA, fileHeader, contentEditsDueToRebase, newSize, (newSize - oldSize)); if (com.google.gerrit.server.patch.EditTransformer.toEdits(patchListEntry).allMatch(editsDueToRebase::contains)) { return java.util.Optional.empty(); } return java.util.Optional.of(patchListEntry); }",fe5be84872b97684ad4df05da9fb335beace8f40,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,"private com.google.gerrit.server.patch.ComparisonType getComparisonType(org.eclipse.jgit.revwalk.RevObject a, org.eclipse.jgit.revwalk.RevCommit b) { for (int i = 0; i < (b.getParentCount()); i++) { if (b.getParent(i).equals(a)) { return com.google.gerrit.server.patch.ComparisonType.againstParent((i + 1)); } } if (((key.getOldId()) == null) && ((b.getParentCount()) > 0)) { return com.google.gerrit.server.patch.ComparisonType.againstAutoMerge(); } return com.google.gerrit.server.patch.ComparisonType.againstOtherPatchSet(); }",b09b8c324037a2af057efe628e50aeaf9da38f87,"private com.google.gerrit.server.patchlib.ComparisonType getComparisonType(org.eclipse.jgit.revwalk.RevObject a, org.eclipse.jgit.revwalk.RevCommit b) { for (int i = 0; i < (b.getParentCount()); i++) { if (b.getParent(i).equals(a)) { return com.google.gerrit.server.patchlib.ComparisonType.againstParent((i + 1)); } } if (((key.getOldId()) == null) && ((b.getParentCount()) > 0)) { return com.google.gerrit.server.patchlib.ComparisonType.againstAutoMerge(); } return com.google.gerrit.server.patchlib.ComparisonType.againstOtherPatchSet(); }",7ac924598d65f52a0c8f30843d354ab9eb4922d1,"private com.google.gerrit.server.diff.ComparisonType getComparisonType(org.eclipse.jgit.revwalk.RevObject a, org.eclipse.jgit.revwalk.RevCommit b) { for (int i = 0; i < (b.getParentCount()); i++) { if (b.getParent(i).equals(a)) { return com.google.gerrit.server.diff.ComparisonType.againstParent((i + 1)); } } if (((key.getOldId()) == null) && ((b.getParentCount()) > 0)) { return com.google.gerrit.server.diff.ComparisonType.againstAutoMerge(); } return com.google.gerrit.server.diff.ComparisonType.againstOtherPatchSet(); }",a8da1fa702a313dff1cab2a21018feb87fe1f2e7,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,"private com.google.gerrit.server.patch.PatchListEntry newMergeList(org.eclipse.jgit.diff.RawTextComparator cmp, org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.revwalk.RevCommit aCommit, org.eclipse.jgit.revwalk.RevCommit bCommit, com.google.gerrit.server.patch.ComparisonType comparisonType) throws java.io.IOException { com.google.gerrit.server.patch.Text aText = (aCommit != null) ? com.google.gerrit.server.patch.Text.forMergeList(comparisonType, reader, aCommit) : Text.EMPTY; com.google.gerrit.server.patch.Text bText = com.google.gerrit.server.patch.Text.forMergeList(comparisonType, reader, bCommit); return com.google.gerrit.server.patch.PatchListLoader.createPatchListEntry(cmp, aCommit, aText, bText, Patch.MERGE_LIST); }",3907cd562b0e797cca11c7b9b3761b0055014ca6,"private com.google.gerrit.server.patchlib.PatchListEntry newMergeList(org.eclipse.jgit.diff.RawTextComparator cmp, org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.revwalk.RevCommit aCommit, org.eclipse.jgit.revwalk.RevCommit bCommit, com.google.gerrit.server.patchlib.ComparisonType comparisonType) throws java.io.IOException { com.google.gerrit.server.patchlib.Text aText = (aCommit != null) ? com.google.gerrit.server.patchlib.Text.forMergeList(comparisonType, reader, aCommit) : com.google.gerrit.server.patchlib.Text.EMPTY; com.google.gerrit.server.patchlib.Text bText = com.google.gerrit.server.patchlib.Text.forMergeList(comparisonType, reader, bCommit); return com.google.gerrit.server.patch.PatchListLoader.createPatchListEntry(cmp, aCommit, aText, bText, Patch.MERGE_LIST); }",4c38630b4014e879ee1010fa37b7a7938a75bc73,"private com.google.gerrit.server.diff.PatchListEntry newMergeList(org.eclipse.jgit.diff.RawTextComparator cmp, org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.revwalk.RevCommit aCommit, org.eclipse.jgit.revwalk.RevCommit bCommit, com.google.gerrit.server.diff.ComparisonType comparisonType) throws java.io.IOException { com.google.gerrit.server.diff.Text aText = (aCommit != null) ? com.google.gerrit.server.diff.Text.forMergeList(comparisonType, reader, aCommit) : com.google.gerrit.server.diff.Text.EMPTY; com.google.gerrit.server.diff.Text bText = com.google.gerrit.server.diff.Text.forMergeList(comparisonType, reader, bCommit); return com.google.gerrit.server.patch.PatchListLoader.createPatchListEntry(cmp, aCommit, aText, bText, Patch.MERGE_LIST); }",898ea75ff46705dcb4e5cb77820cc5a902f03703,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,private static java.util.Set<org.eclipse.jgit.diff.Edit> getContentEdits(java.util.Set<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebase) { return editsDueToRebase.stream().map(ContextAwareEdit::toEdit).filter(java.util.Optional::isPresent).map(java.util.Optional::get).collect(java.util.stream.Collectors.toSet()); },8e0d2d24a436875387a4af06078da4eb239df085,private static java.util.Set<org.eclipse.jgit.diff.Edit> getContentEdits(java.util.Set<com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit> editsDueToRebase) { return editsDueToRebase.stream().map(ContextAwareEdit::toEdit).filter(java.util.Optional::isPresent).map(java.util.Optional::get).collect(java.util.stream.Collectors.toSet()); },0d26a8f13598bea6c51abfbfce82be852b503889,private static java.util.Set<org.eclipse.jgit.diff.Edit> getContentEdits(java.util.Set<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebase) { return editsDueToRebase.stream().map(ContextAwareEdit::toEdit).filter(java.util.Optional::isPresent).map(java.util.Optional::get).collect(java.util.stream.Collectors.toSet()); },8e0d2d24a436875387a4af06078da4eb239df085,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,"private static com.google.gerrit.server.patch.PatchListEntry newEntry(org.eclipse.jgit.revwalk.RevTree aTree, org.eclipse.jgit.patch.FileHeader fileHeader, java.util.Set<org.eclipse.jgit.diff.Edit> editsDueToRebase, long size, long sizeDelta) { if (((aTree == null) || ((fileHeader.getPatchType()) != (org.eclipse.jgit.patch.FileHeader.PatchType.UNIFIED))) || (fileHeader.getHunks().isEmpty())) { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, com.google.common.collect.ImmutableList.of(), com.google.common.collect.ImmutableSet.of(), size, sizeDelta); } java.util.List<org.eclipse.jgit.diff.Edit> edits = fileHeader.toEditList(); if (edits.isEmpty()) { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, com.google.common.collect.ImmutableList.of(), com.google.common.collect.ImmutableSet.of(), size, sizeDelta); } return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, edits, editsDueToRebase, size, sizeDelta); }",e397190c8783a9efb142ed39ef8f030f82e10677,"private static com.google.gerrit.server.patchlib.PatchListEntry newEntry(org.eclipse.jgit.revwalk.RevTree aTree, org.eclipse.jgit.patch.FileHeader fileHeader, java.util.Set<org.eclipse.jgit.diff.Edit> editsDueToRebase, long size, long sizeDelta) { if (((aTree == null) || ((fileHeader.getPatchType()) != (org.eclipse.jgit.patch.FileHeader.PatchType.UNIFIED))) || (fileHeader.getHunks().isEmpty())) { return new com.google.gerrit.server.patchlib.PatchListEntry(fileHeader, com.google.common.collect.ImmutableList.of(), com.google.common.collect.ImmutableSet.of(), size, sizeDelta); } java.util.List<org.eclipse.jgit.diff.Edit> edits = fileHeader.toEditList(); if (edits.isEmpty()) { return new com.google.gerrit.server.patchlib.PatchListEntry(fileHeader, com.google.common.collect.ImmutableList.of(), com.google.common.collect.ImmutableSet.of(), size, sizeDelta); } return new com.google.gerrit.server.patchlib.PatchListEntry(fileHeader, edits, editsDueToRebase, size, sizeDelta); }",73b2b4a13e242582aa7b88af4c8824e84e6c193f,"private static com.google.gerrit.server.diff.PatchListEntry newEntry(org.eclipse.jgit.revwalk.RevTree aTree, org.eclipse.jgit.patch.FileHeader fileHeader, java.util.Set<org.eclipse.jgit.diff.Edit> editsDueToRebase, long size, long sizeDelta) { if (((aTree == null) || ((fileHeader.getPatchType()) != (org.eclipse.jgit.patch.FileHeader.PatchType.UNIFIED))) || (fileHeader.getHunks().isEmpty())) { return new com.google.gerrit.server.diff.PatchListEntry(fileHeader, com.google.common.collect.ImmutableList.of(), com.google.common.collect.ImmutableSet.of(), size, sizeDelta); } java.util.List<org.eclipse.jgit.diff.Edit> edits = fileHeader.toEditList(); if (edits.isEmpty()) { return new com.google.gerrit.server.diff.PatchListEntry(fileHeader, com.google.common.collect.ImmutableList.of(), com.google.common.collect.ImmutableSet.of(), size, sizeDelta); } return new com.google.gerrit.server.diff.PatchListEntry(fileHeader, edits, editsDueToRebase, size, sizeDelta); }",6c4c4f36d3bc760b804d4136dcf09bf8b2f89066,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,"private org.eclipse.jgit.revwalk.RevObject aFor(com.google.gerrit.server.patch.PatchListKey key, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.revwalk.RevCommit b) throws java.io.IOException { if ((key.getOldId()) != null) { return rw.parseAny(key.getOldId()); } switch (b.getParentCount()) { case 0 : return rw.parseAny(com.google.gerrit.server.patch.PatchListLoader.emptyTree(ins)); case 1 : { org.eclipse.jgit.revwalk.RevCommit r = b.getParent(0); rw.parseBody(r); return r; } case 2 : if ((key.getParentNum()) != null) { org.eclipse.jgit.revwalk.RevCommit r = b.getParent(((key.getParentNum()) - 1)); rw.parseBody(r); return r; } return autoMerger.merge(repo, rw, ins, b, mergeStrategy); default : return null; } }",8e355c42685ec6669e5e5dc6ce6b14a8539aee55,"private org.eclipse.jgit.revwalk.RevObject aFor(com.google.gerrit.server.patchlib.PatchListKey key, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.revwalk.RevCommit b) throws java.io.IOException { if ((key.getOldId()) != null) { return rw.parseAny(key.getOldId()); } switch (b.getParentCount()) { case 0 : return rw.parseAny(com.google.gerrit.server.patch.PatchListLoader.emptyTree(ins)); case 1 : { org.eclipse.jgit.revwalk.RevCommit r = b.getParent(0); rw.parseBody(r); return r; } case 2 : if ((key.getParentNum()) != null) { org.eclipse.jgit.revwalk.RevCommit r = b.getParent(((key.getParentNum()) - 1)); rw.parseBody(r); return r; } return autoMerger.merge(repo, rw, ins, b, mergeStrategy); default : return null; } }",dcc5ee8da3626b8205a0bae0d7a09a519818ed92,"private org.eclipse.jgit.revwalk.RevObject aFor(com.google.gerrit.server.diff.PatchListKey key, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.revwalk.RevCommit b) throws java.io.IOException { if ((key.getOldId()) != null) { return rw.parseAny(key.getOldId()); } switch (b.getParentCount()) { case 0 : return rw.parseAny(com.google.gerrit.server.patch.PatchListLoader.emptyTree(ins)); case 1 : { org.eclipse.jgit.revwalk.RevCommit r = b.getParent(0); rw.parseBody(r); return r; } case 2 : if ((key.getParentNum()) != null) { org.eclipse.jgit.revwalk.RevCommit r = b.getParent(((key.getParentNum()) - 1)); rw.parseBody(r); return r; } return autoMerger.merge(repo, rw, ins, b, mergeStrategy); default : return null; } }",fa885d15c63e152f81d16b807eac22a14ded7664,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,"private java.util.List<com.google.gerrit.server.patch.PatchListEntry> getRelevantPatchListEntries(java.util.List<org.eclipse.jgit.diff.DiffEntry> parentDiffEntries, org.eclipse.jgit.revwalk.RevCommit parentCommitA, org.eclipse.jgit.revwalk.RevCommit parentCommitB, java.util.Set<java.lang.String> touchedFilePaths, org.eclipse.jgit.diff.DiffFormatter diffFormatter) throws java.io.IOException { java.util.List<com.google.gerrit.server.patch.PatchListEntry> parentPatchListEntries = new java.util.ArrayList(parentDiffEntries.size()); for (org.eclipse.jgit.diff.DiffEntry parentDiffEntry : parentDiffEntries) { if (!(com.google.gerrit.server.patch.PatchListLoader.isTouched(touchedFilePaths, parentDiffEntry))) { continue; } org.eclipse.jgit.patch.FileHeader fileHeader = toFileHeader(parentCommitB, diffFormatter, parentDiffEntry); com.google.gerrit.server.patch.PatchListEntry patchListEntry = com.google.gerrit.server.patch.PatchListLoader.newEntry(parentCommitA.getTree(), fileHeader, com.google.common.collect.ImmutableSet.of(), 0, 0); parentPatchListEntries.add(patchListEntry); } return parentPatchListEntries; }",10c6a1054a3d0368033abc1ba64b1270d58b5127,"private java.util.List<com.google.gerrit.server.patchlib.PatchListEntry> getRelevantPatchListEntries(java.util.List<org.eclipse.jgit.diff.DiffEntry> parentDiffEntries, org.eclipse.jgit.revwalk.RevCommit parentCommitA, org.eclipse.jgit.revwalk.RevCommit parentCommitB, java.util.Set<java.lang.String> touchedFilePaths, org.eclipse.jgit.diff.DiffFormatter diffFormatter) throws java.io.IOException { java.util.List<com.google.gerrit.server.patchlib.PatchListEntry> parentPatchListEntries = new java.util.ArrayList(parentDiffEntries.size()); for (org.eclipse.jgit.diff.DiffEntry parentDiffEntry : parentDiffEntries) { if (!(com.google.gerrit.server.patch.PatchListLoader.isTouched(touchedFilePaths, parentDiffEntry))) { continue; } org.eclipse.jgit.patch.FileHeader fileHeader = toFileHeader(parentCommitB, diffFormatter, parentDiffEntry); com.google.gerrit.server.patchlib.PatchListEntry patchListEntry = com.google.gerrit.server.patch.PatchListLoader.newEntry(parentCommitA.getTree(), fileHeader, com.google.common.collect.ImmutableSet.of(), 0, 0); parentPatchListEntries.add(patchListEntry); } return parentPatchListEntries; }",cdf43a61e76e62a35718d1f37af09fff5e812b8c,"private java.util.List<com.google.gerrit.server.diff.PatchListEntry> getRelevantPatchListEntries(java.util.List<org.eclipse.jgit.diff.DiffEntry> parentDiffEntries, org.eclipse.jgit.revwalk.RevCommit parentCommitA, org.eclipse.jgit.revwalk.RevCommit parentCommitB, java.util.Set<java.lang.String> touchedFilePaths, org.eclipse.jgit.diff.DiffFormatter diffFormatter) throws java.io.IOException { java.util.List<com.google.gerrit.server.diff.PatchListEntry> parentPatchListEntries = new java.util.ArrayList(parentDiffEntries.size()); for (org.eclipse.jgit.diff.DiffEntry parentDiffEntry : parentDiffEntries) { if (!(com.google.gerrit.server.patch.PatchListLoader.isTouched(touchedFilePaths, parentDiffEntry))) { continue; } org.eclipse.jgit.patch.FileHeader fileHeader = toFileHeader(parentCommitB, diffFormatter, parentDiffEntry); com.google.gerrit.server.diff.PatchListEntry patchListEntry = com.google.gerrit.server.patch.PatchListLoader.newEntry(parentCommitA.getTree(), fileHeader, com.google.common.collect.ImmutableSet.of(), 0, 0); parentPatchListEntries.add(patchListEntry); } return parentPatchListEntries; }",9730359b945566adde7566f342e06c2c58b1bcba,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,"private static com.google.gerrit.server.patch.PatchListEntry createPatchListEntry(org.eclipse.jgit.diff.RawTextComparator cmp, org.eclipse.jgit.revwalk.RevCommit aCommit, com.google.gerrit.server.patch.Text aText, com.google.gerrit.server.patch.Text bText, java.lang.String fileName) { byte[] rawHdr = com.google.gerrit.server.patch.PatchListLoader.getRawHeader((aCommit != null), fileName); byte[] aContent = aText.getContent(); byte[] bContent = bText.getContent(); long size = bContent.length; long sizeDelta = (bContent.length) - (aContent.length); org.eclipse.jgit.diff.RawText aRawText = new org.eclipse.jgit.diff.RawText(aContent); org.eclipse.jgit.diff.RawText bRawText = new org.eclipse.jgit.diff.RawText(bContent); org.eclipse.jgit.diff.EditList edits = new org.eclipse.jgit.diff.HistogramDiff().diff(cmp, aRawText, bRawText); org.eclipse.jgit.patch.FileHeader fh = new org.eclipse.jgit.patch.FileHeader(rawHdr, edits, org.eclipse.jgit.patch.FileHeader.PatchType.UNIFIED); return new com.google.gerrit.server.patch.PatchListEntry(fh, edits, com.google.common.collect.ImmutableSet.of(), size, sizeDelta); }",6ffaf4b5d14d3a6b74b126408ab5696141d26c90,"private static com.google.gerrit.server.patchlib.PatchListEntry createPatchListEntry(org.eclipse.jgit.diff.RawTextComparator cmp, org.eclipse.jgit.revwalk.RevCommit aCommit, com.google.gerrit.server.patchlib.Text aText, com.google.gerrit.server.patchlib.Text bText, java.lang.String fileName) { byte[] rawHdr = com.google.gerrit.server.patch.PatchListLoader.getRawHeader((aCommit != null), fileName); byte[] aContent = aText.getContent(); byte[] bContent = bText.getContent(); long size = bContent.length; long sizeDelta = (bContent.length) - (aContent.length); org.eclipse.jgit.diff.RawText aRawText = new org.eclipse.jgit.diff.RawText(aContent); org.eclipse.jgit.diff.RawText bRawText = new org.eclipse.jgit.diff.RawText(bContent); org.eclipse.jgit.diff.EditList edits = new org.eclipse.jgit.diff.HistogramDiff().diff(cmp, aRawText, bRawText); org.eclipse.jgit.patch.FileHeader fh = new org.eclipse.jgit.patch.FileHeader(rawHdr, edits, org.eclipse.jgit.patch.FileHeader.PatchType.UNIFIED); return new com.google.gerrit.server.patchlib.PatchListEntry(fh, edits, com.google.common.collect.ImmutableSet.of(), size, sizeDelta); }",5a430897d78fbf48868ed38624192b8b1e02a93d,"private static com.google.gerrit.server.diff.PatchListEntry createPatchListEntry(org.eclipse.jgit.diff.RawTextComparator cmp, org.eclipse.jgit.revwalk.RevCommit aCommit, com.google.gerrit.server.diff.Text aText, com.google.gerrit.server.diff.Text bText, java.lang.String fileName) { byte[] rawHdr = com.google.gerrit.server.patch.PatchListLoader.getRawHeader((aCommit != null), fileName); byte[] aContent = aText.getContent(); byte[] bContent = bText.getContent(); long size = bContent.length; long sizeDelta = (bContent.length) - (aContent.length); org.eclipse.jgit.diff.RawText aRawText = new org.eclipse.jgit.diff.RawText(aContent); org.eclipse.jgit.diff.RawText bRawText = new org.eclipse.jgit.diff.RawText(bContent); org.eclipse.jgit.diff.EditList edits = new org.eclipse.jgit.diff.HistogramDiff().diff(cmp, aRawText, bRawText); org.eclipse.jgit.patch.FileHeader fh = new org.eclipse.jgit.patch.FileHeader(rawHdr, edits, org.eclipse.jgit.patch.FileHeader.PatchType.UNIFIED); return new com.google.gerrit.server.diff.PatchListEntry(fh, edits, com.google.common.collect.ImmutableSet.of(), size, sizeDelta); }",60c19cd168cb5606ecd70bc7dccb053853ffc5f3,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,"private static java.util.Set<java.lang.String> getTouchedFilePaths(com.google.gerrit.server.patch.PatchListEntry patchListEntry) { java.lang.String oldFilePath = patchListEntry.getOldName(); java.lang.String newFilePath = patchListEntry.getNewName(); return oldFilePath == null ? com.google.common.collect.ImmutableSet.of(newFilePath) : com.google.common.collect.ImmutableSet.of(oldFilePath, newFilePath); }",d4fe0f8b5d039b2073994c3c794591ba71a2035f,"private static java.util.Set<java.lang.String> getTouchedFilePaths(com.google.gerrit.server.patchlib.PatchListEntry patchListEntry) { java.lang.String oldFilePath = patchListEntry.getOldName(); java.lang.String newFilePath = patchListEntry.getNewName(); return oldFilePath == null ? com.google.common.collect.ImmutableSet.of(newFilePath) : com.google.common.collect.ImmutableSet.of(oldFilePath, newFilePath); }",9d28176bd1365b3d980b1ccea0af6e6798147b70,"private static java.util.Set<java.lang.String> getTouchedFilePaths(com.google.gerrit.server.diff.PatchListEntry patchListEntry) { java.lang.String oldFilePath = patchListEntry.getOldName(); java.lang.String newFilePath = patchListEntry.getNewName(); return oldFilePath == null ? com.google.common.collect.ImmutableSet.of(newFilePath) : com.google.common.collect.ImmutableSet.of(oldFilePath, newFilePath); }",7406366556b54d0b1458095d11c42850722fa31f,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,"public abstract com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> getEditsDueToRebasePerFilePath();",d4b6eb43eef613a89b644cf248f42abd84873c8e,"public abstract com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit> getEditsDueToRebasePerFilePath();",67413da5fd671960f2b54f2e0a538b8c20059463,"public abstract com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> getEditsDueToRebasePerFilePath();",d4b6eb43eef613a89b644cf248f42abd84873c8e,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,"com.google.gerrit.server.patch.PatchListLoader create(com.google.gerrit.server.patch.PatchListKey key, com.google.gerrit.reviewdb.client.Project.NameKey project);",ee8e700f213e184a30f9b1ccd23cf63a67a7aba0,"com.google.gerrit.server.patch.PatchListLoader create(com.google.gerrit.server.patchlib.PatchListKey key, com.google.gerrit.reviewdb.client.Project.NameKey project);",7c49b6c3d0688ff329187090a32ef203137f7cb8,"com.google.gerrit.server.patch.PatchListLoader create(com.google.gerrit.server.diff.PatchListKey key, com.google.gerrit.reviewdb.client.Project.NameKey project);",4f5a8c81a2e418539bfa9aff20894be6cbff6478,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,"private static java.util.Set<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> getEditsDueToRebase(com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebasePerFilePath, org.eclipse.jgit.diff.DiffEntry diffEntry) { if (editsDueToRebasePerFilePath.isEmpty()) { return com.google.common.collect.ImmutableSet.of(); } java.lang.String filePath = diffEntry.getNewPath(); if ((diffEntry.getChangeType()) == (org.eclipse.jgit.diff.DiffEntry.ChangeType.DELETE)) { filePath = diffEntry.getOldPath(); } return com.google.common.collect.ImmutableSet.copyOf(editsDueToRebasePerFilePath.get(filePath)); }",afaf1f9fc7f52ab236c8d7455d930c4a188148d0,"private static java.util.Set<com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit> getEditsDueToRebase(com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit> editsDueToRebasePerFilePath, org.eclipse.jgit.diff.DiffEntry diffEntry) { if (editsDueToRebasePerFilePath.isEmpty()) { return com.google.common.collect.ImmutableSet.of(); } java.lang.String filePath = diffEntry.getNewPath(); if ((diffEntry.getChangeType()) == (org.eclipse.jgit.diff.DiffEntry.ChangeType.DELETE)) { filePath = diffEntry.getOldPath(); } return com.google.common.collect.ImmutableSet.copyOf(editsDueToRebasePerFilePath.get(filePath)); }",c3208e5c24f89e812b631b3ad9ff40d501dde0cd,"private static java.util.Set<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> getEditsDueToRebase(com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebasePerFilePath, org.eclipse.jgit.diff.DiffEntry diffEntry) { if (editsDueToRebasePerFilePath.isEmpty()) { return com.google.common.collect.ImmutableSet.of(); } java.lang.String filePath = diffEntry.getNewPath(); if ((diffEntry.getChangeType()) == (org.eclipse.jgit.diff.DiffEntry.ChangeType.DELETE)) { filePath = diffEntry.getOldPath(); } return com.google.common.collect.ImmutableSet.copyOf(editsDueToRebasePerFilePath.get(filePath)); }",afaf1f9fc7f52ab236c8d7455d930c4a188148d0,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,"public static com.google.gerrit.server.patch.PatchListLoader.EditsDueToRebaseResult create(java.util.List<org.eclipse.jgit.diff.DiffEntry> relevantDiffEntries, com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebasePerFilePath) { return new com.google.gerrit.server.patch.AutoValue_PatchListLoader_EditsDueToRebaseResult(relevantDiffEntries, editsDueToRebasePerFilePath); }",c70b5cc6a40ee9719ffc60c3169e901855939858,"public static com.google.gerrit.server.patch.PatchListLoader.EditsDueToRebaseResult create(java.util.List<org.eclipse.jgit.diff.DiffEntry> relevantDiffEntries, com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit> editsDueToRebasePerFilePath) { return new com.google.gerrit.server.patch.AutoValue_PatchListLoader_EditsDueToRebaseResult(relevantDiffEntries, editsDueToRebasePerFilePath); }",87073c65f5009af03038cb5960ebc23d63dc4380,"public static com.google.gerrit.server.patch.PatchListLoader.EditsDueToRebaseResult create(java.util.List<org.eclipse.jgit.diff.DiffEntry> relevantDiffEntries, com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebasePerFilePath) { return new com.google.gerrit.server.patch.AutoValue_PatchListLoader_EditsDueToRebaseResult(relevantDiffEntries, editsDueToRebasePerFilePath); }",c70b5cc6a40ee9719ffc60c3169e901855939858,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_extensions_events_ChangeAbandoned.java,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account abandoner, java.lang.String reason, java.sql.Timestamp when, com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeAbandoned.Event event = new com.google.gerrit.server.extensions.events.ChangeAbandoned.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(abandoner), reason, when, notifyHandling); for (com.google.gerrit.extensions.events.ChangeAbandonedListener l : listeners) { try { l.onChangeAbandoned(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ChangeAbandoned.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeAbandoned.log.error(""Couldn't fire event"", e); } }",c88d88f5d1da9fd6bb888de00dd27ee0bd316380,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account abandoner, java.lang.String reason, java.sql.Timestamp when, com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeAbandoned.Event event = new com.google.gerrit.server.extensions.events.ChangeAbandoned.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(abandoner), reason, when, notifyHandling); for (com.google.gerrit.extensions.events.ChangeAbandonedListener l : listeners) { try { l.onChangeAbandoned(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ChangeAbandoned.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeAbandoned.log.error(""Couldn't fire event"", e); } }",bab3c87262d49373b1f4d9818550d4cea0cadf7a,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account abandoner, java.lang.String reason, java.sql.Timestamp when, com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeAbandoned.Event event = new com.google.gerrit.server.extensions.events.ChangeAbandoned.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(abandoner), reason, when, notifyHandling); for (com.google.gerrit.extensions.events.ChangeAbandonedListener l : listeners) { try { l.onChangeAbandoned(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ChangeAbandoned.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.diff.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeAbandoned.log.error(""Couldn't fire event"", e); } }",aa60cef82e0ed9e0b02e7a48644ebe8776667221,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_IntraLineWeigher.java,"@java.lang.Override public int weigh(com.google.gerrit.server.patch.IntraLineDiffKey key, com.google.gerrit.server.patch.IntraLineDiff value) { return ((((((((16 + (8 * 8)) + (2 * 36)) + 16) + (2 * 8)) + 16) + 8) + 4) + 20) + (((8 + 16) + (4 * 4)) * (value.getEdits().size())); }",f1acf8d324de8ba1403d523a30f1070e0900c280,"@java.lang.Override public int weigh(com.google.gerrit.server.patchlib.IntraLineDiffKey key, com.google.gerrit.server.patchlib.IntraLineDiff value) { return ((((((((16 + (8 * 8)) + (2 * 36)) + 16) + (2 * 8)) + 16) + 8) + 4) + 20) + (((8 + 16) + (4 * 4)) * (value.getEdits().size())); }",c88805effb7f81c232b68aded10918653843cc44,"@java.lang.Override public int weigh(com.google.gerrit.server.diff.IntraLineDiffKey key, com.google.gerrit.server.diff.IntraLineDiff value) { return ((((((((16 + (8 * 8)) + (2 * 36)) + 16) + (2 * 8)) + 16) + 8) + 4) + 20) + (((8 + 16) + (4 * 4)) * (value.getEdits().size())); }",1fcc55948235fc8a3cc1ab382822f79c665101ef,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchList.java,"private int search(java.lang.String fileName) { com.google.gerrit.server.patch.PatchListEntry want = com.google.gerrit.server.patch.PatchListEntry.empty(fileName); return java.util.Arrays.binarySearch(patches, 0, patches.length, want, com.google.gerrit.server.patch.PatchList.PATCH_CMP); }",05ca7a99b9b64e8057c4c7ca7172871674b8f945,"private int search(java.lang.String fileName) { com.google.gerrit.server.patchlib.PatchListEntry want = com.google.gerrit.server.patchlib.PatchListEntry.empty(fileName); return java.util.Arrays.binarySearch(patches, 0, patches.length, want, com.google.gerrit.server.patchlib.PatchList.PATCH_CMP); }",a5c95c916e8fef7b4a16927fa64ffa1d5ae35072,"private int search(java.lang.String fileName) { com.google.gerrit.server.diff.PatchListEntry want = com.google.gerrit.server.diff.PatchListEntry.empty(fileName); return java.util.Arrays.binarySearch(patches, 0, patches.length, want, com.google.gerrit.server.diff.PatchList.PATCH_CMP); }",36a36b26c6ae925a47e32eb4d9bfc02eb9b5745b,2017-11-15 12:52:05,11
140535,java_gerrit_PRED_commit_stats_3.java,private int countMagicFiles(java.util.List<com.google.gerrit.server.patch.PatchListEntry> entries) { int count = 0; for (com.google.gerrit.server.patch.PatchListEntry e : entries) { if (com.google.gerrit.reviewdb.client.Patch.isMagic(e.getNewName())) { count++; } } return count; },f9f58750205e7ce748ac601d9a96360bdd56418b,private int countMagicFiles(java.util.List<com.google.gerrit.server.patchlib.PatchListEntry> entries) { int count = 0; for (com.google.gerrit.server.patchlib.PatchListEntry e : entries) { if (com.google.gerrit.reviewdb.client.Patch.isMagic(e.getNewName())) { count++; } } return count; },8b2b9b54d34b31cf1c94949fdfb978786fb5a390,private int countMagicFiles(java.util.List<com.google.gerrit.server.diff.PatchListEntry> entries) { int count = 0; for (com.google.gerrit.server.diff.PatchListEntry e : entries) { if (com.google.gerrit.reviewdb.client.Patch.isMagic(e.getNewName())) { count++; } } return count; },ab18d5ddfda092372abbd4a7a9ef071ee25722dc,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,"private static java.lang.String getOldFilePath(com.google.gerrit.server.patch.PatchListEntry patchListEntry) { return com.google.common.base.MoreObjects.firstNonNull(patchListEntry.getOldName(), patchListEntry.getNewName()); }",779eee30aede73478ab6d2e5e7ab449075d35643,"private static java.lang.String getOldFilePath(com.google.gerrit.server.patchlib.PatchListEntry patchListEntry) { return com.google.common.base.MoreObjects.firstNonNull(patchListEntry.getOldName(), patchListEntry.getNewName()); }",8b1dcb97de5f784992c49c1f082aedbcef9fc964,"private static java.lang.String getOldFilePath(com.google.gerrit.server.diff.PatchListEntry patchListEntry) { return com.google.common.base.MoreObjects.firstNonNull(patchListEntry.getOldName(), patchListEntry.getNewName()); }",04f16a224d700d8c145e2fb968dbd123548c3793,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListEntry.java,"static com.google.gerrit.server.patch.PatchListEntry readFrom(java.io.InputStream in) throws java.io.IOException { com.google.gerrit.reviewdb.client.Patch.ChangeType changeType = readEnum(in, com.google.gerrit.reviewdb.client.Patch.ChangeType.values()); com.google.gerrit.reviewdb.client.Patch.PatchType patchType = readEnum(in, com.google.gerrit.reviewdb.client.Patch.PatchType.values()); java.lang.String oldName = readString(in); java.lang.String newName = readString(in); byte[] hdr = readBytes(in); int ins = readVarInt32(in); int del = readVarInt32(in); long size = readFixInt64(in); long sizeDelta = readFixInt64(in); org.eclipse.jgit.diff.Edit[] editArray = com.google.gerrit.server.patch.PatchListEntry.readEditArray(in); org.eclipse.jgit.diff.Edit[] editsDueToRebase = com.google.gerrit.server.patch.PatchListEntry.readEditArray(in); return new com.google.gerrit.server.patch.PatchListEntry(changeType, patchType, oldName, newName, hdr, com.google.common.collect.ImmutableList.copyOf(editArray), com.google.common.collect.ImmutableSet.copyOf(editsDueToRebase), ins, del, size, sizeDelta); }",0d8f8fee001e14d9e0ff6c07b8c69e29610d82d2,"static com.google.gerrit.server.patchlib.PatchListEntry readFrom(java.io.InputStream in) throws java.io.IOException { com.google.gerrit.reviewdb.client.Patch.ChangeType changeType = readEnum(in, com.google.gerrit.reviewdb.client.Patch.ChangeType.values()); com.google.gerrit.reviewdb.client.PatchType patchType = readEnum(in, com.google.gerrit.reviewdb.client.PatchType.values()); java.lang.String oldName = readString(in); java.lang.String newName = readString(in); byte[] hdr = readBytes(in); int ins = readVarInt32(in); int del = readVarInt32(in); long size = readFixInt64(in); long sizeDelta = readFixInt64(in); org.eclipse.jgit.diff.Edit[] editArray = com.google.gerrit.server.patchlib.PatchListEntry.readEditArray(in); org.eclipse.jgit.diff.Edit[] editsDueToRebase = com.google.gerrit.server.patchlib.PatchListEntry.readEditArray(in); return new com.google.gerrit.server.patchlib.PatchListEntry(changeType, patchType, oldName, newName, hdr, com.google.common.collect.ImmutableList.copyOf(editArray), com.google.common.collect.ImmutableSet.copyOf(editsDueToRebase), ins, del, size, sizeDelta); }",360d40514074ed15db10104e1520f7e0699618e9,"static com.google.gerrit.server.diff.PatchListEntry readFrom(java.io.InputStream in) throws java.io.IOException { com.google.gerrit.reviewdb.client.Patch.ChangeType changeType = readEnum(in, com.google.gerrit.reviewdb.client.Patch.ChangeType.values()); com.google.gerrit.reviewdb.client.Patch.PatchType patchType = readEnum(in, com.google.gerrit.reviewdb.client.Patch.PatchType.values()); java.lang.String oldName = readString(in); java.lang.String newName = readString(in); byte[] hdr = readBytes(in); int ins = readVarInt32(in); int del = readVarInt32(in); long size = readFixInt64(in); long sizeDelta = readFixInt64(in); org.eclipse.jgit.diff.Edit[] editArray = com.google.gerrit.server.diff.PatchListEntry.readEditArray(in); org.eclipse.jgit.diff.Edit[] editsDueToRebase = com.google.gerrit.server.diff.PatchListEntry.readEditArray(in); return new com.google.gerrit.server.diff.PatchListEntry(changeType, patchType, oldName, newName, hdr, com.google.common.collect.ImmutableList.copyOf(editArray), com.google.common.collect.ImmutableSet.copyOf(editsDueToRebase), ins, del, size, sizeDelta); }",0fbd19b9685f06bf1638fc399d1c42709920d7be,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,@java.lang.Override public int getEnd(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit) { return edit.getEndA(); },91e6ad96648d2a5ba646ab013e943d9d5e75dfba,@java.lang.Override public int getEnd(com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit edit) { return edit.getEndA(); },80b6e3ec574af5b46a23c16d81336951d4993210,@java.lang.Override public int getEnd(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit) { return edit.getEndA(); },91e6ad96648d2a5ba646ab013e943d9d5e75dfba,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_rules_StoredValues.java,"@java.lang.Override public com.google.gerrit.server.patch.PatchList createValue(com.googlecode.prolog_cafe.lang.Prolog engine) { com.google.gerrit.server.rules.PrologEnvironment env = ((com.google.gerrit.server.rules.PrologEnvironment) (engine.control)); com.google.gerrit.reviewdb.client.PatchSet ps = com.google.gerrit.server.rules.StoredValues.getPatchSet(engine); com.google.gerrit.server.patch.PatchListCache plCache = env.getArgs().getPatchListCache(); com.google.gerrit.reviewdb.client.Change change = com.google.gerrit.server.rules.StoredValues.getChange(engine); com.google.gerrit.reviewdb.client.Project.NameKey project = change.getProject(); org.eclipse.jgit.lib.ObjectId b = org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()); com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws = com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace.IGNORE_NONE; com.google.gerrit.server.patch.PatchListKey plKey = com.google.gerrit.server.patch.PatchListKey.againstDefaultBase(b, ws); com.google.gerrit.server.patch.PatchList patchList; try { patchList = plCache.get(plKey, project); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { throw new com.googlecode.prolog_cafe.exceptions.SystemException((""Cannot create "" + plKey)); } return patchList; }",c19ad687d1cd96b4d1dcdd4009ffeb65bc925a49,"@java.lang.Override public com.google.gerrit.server.patchlib.PatchList createValue(com.googlecode.prolog_cafe.lang.Prolog engine) { com.google.gerrit.server.rules.PrologEnvironment env = ((com.google.gerrit.server.rules.PrologEnvironment) (engine.control)); com.google.gerrit.reviewdb.client.PatchSet ps = com.google.gerrit.server.rules.StoredValues.getPatchSet(engine); com.google.gerrit.server.patchlib.PatchListCache plCache = env.getArgs().getPatchListCache(); com.google.gerrit.reviewdb.client.Change change = com.google.gerrit.server.rules.StoredValues.getChange(engine); com.google.gerrit.reviewdb.client.Project.NameKey project = change.getProject(); org.eclipse.jgit.lib.ObjectId b = org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()); com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws = com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace.IGNORE_NONE; com.google.gerrit.server.patchlib.PatchListKey plKey = com.google.gerrit.server.patchlib.PatchListKey.againstDefaultBase(b, ws); com.google.gerrit.server.patchlib.PatchList patchList; try { patchList = plCache.get(plKey, project); } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException e) { throw new com.googlecode.prolog_cafe.exceptions.SystemException((""Cannot create "" + plKey)); } return patchList; }",3fb3079fe6e285f7f131ecc5d077355e21259631,"@java.lang.Override public com.google.gerrit.server.diff.PatchList createValue(com.googlecode.prolog_cafe.lang.Prolog engine) { com.google.gerrit.server.rules.PrologEnvironment env = ((com.google.gerrit.server.rules.PrologEnvironment) (engine.control)); com.google.gerrit.reviewdb.client.PatchSet ps = com.google.gerrit.server.rules.StoredValues.getPatchSet(engine); com.google.gerrit.server.diff.PatchListCache plCache = env.getArgs().getPatchListCache(); com.google.gerrit.reviewdb.client.Change change = com.google.gerrit.server.rules.StoredValues.getChange(engine); com.google.gerrit.reviewdb.client.Project.NameKey project = change.getProject(); org.eclipse.jgit.lib.ObjectId b = org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()); com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws = com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace.IGNORE_NONE; com.google.gerrit.server.diff.PatchListKey plKey = com.google.gerrit.server.diff.PatchListKey.againstDefaultBase(b, ws); com.google.gerrit.server.diff.PatchList patchList; try { patchList = plCache.get(plKey, project); } catch (com.google.gerrit.server.diff.PatchListNotAvailableException e) { throw new com.googlecode.prolog_cafe.exceptions.SystemException((""Cannot create "" + plKey)); } return patchList; }",60dba6d2979a7229c42f747f43192948834be0bc,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchList.java,"private void writeObject(java.io.ObjectOutputStream output) throws java.io.IOException { final java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); try (java.util.zip.DeflaterOutputStream out = new java.util.zip.DeflaterOutputStream(buf)) { writeCanBeNull(out, oldId); writeNotNull(out, newId); writeVarInt32(out, (isMerge ? 1 : 0)); comparisonType.writeTo(out); writeVarInt32(out, insertions); writeVarInt32(out, deletions); writeVarInt32(out, patches.length); for (com.google.gerrit.server.patch.PatchListEntry p : patches) { p.writeTo(out); } } writeBytes(output, buf.toByteArray()); }",295df37ec3edabc6dc0df39fc0e0b69ab670f8f4,"private void writeObject(java.io.ObjectOutputStream output) throws java.io.IOException { final java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); try (java.util.zip.DeflaterOutputStream out = new java.util.zip.DeflaterOutputStream(buf)) { writeCanBeNull(out, oldId); writeNotNull(out, newId); writeVarInt32(out, (isMerge ? 1 : 0)); comparisonType.writeTo(out); writeVarInt32(out, insertions); writeVarInt32(out, deletions); writeVarInt32(out, patches.length); for (com.google.gerrit.server.patchlib.PatchListEntry p : patches) { p.writeTo(out); } } writeBytes(output, buf.toByteArray()); }",84880bdc15d723e23fc5b93627a417e8822005bb,"private void writeObject(java.io.ObjectOutputStream output) throws java.io.IOException { final java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); try (java.util.zip.DeflaterOutputStream out = new java.util.zip.DeflaterOutputStream(buf)) { writeCanBeNull(out, oldId); writeNotNull(out, newId); writeVarInt32(out, (isMerge ? 1 : 0)); comparisonType.writeTo(out); writeVarInt32(out, insertions); writeVarInt32(out, deletions); writeVarInt32(out, patches.length); for (com.google.gerrit.server.diff.PatchListEntry p : patches) { p.writeTo(out); } } writeBytes(output, buf.toByteArray()); }",c30ff5a04e0d4cc3394fd4d71bb6ee834ede1d06,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_ComparisonType.java,"public static com.google.gerrit.server.patch.ComparisonType againstOtherPatchSet() { return new com.google.gerrit.server.patch.ComparisonType(null, false); }",fbdbcb02d264ae4866a0ed608290e93760d53b54,"public static com.google.gerrit.server.patchlib.ComparisonType againstOtherPatchSet() { return new com.google.gerrit.server.patchlib.ComparisonType(null, false); }",d0d6b31099453923f2a4b8e6cf61e3170f27f0fc,"public static com.google.gerrit.server.diff.ComparisonType againstOtherPatchSet() { return new com.google.gerrit.server.diff.ComparisonType(null, false); }",a7e3ff6ddd07baac391f68bb74c25f0fdf561c92,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListEntry.java,"private static com.google.gerrit.reviewdb.client.Patch.PatchType toPatchType(org.eclipse.jgit.patch.FileHeader hdr) { com.google.gerrit.reviewdb.client.Patch.PatchType pt; switch (hdr.getPatchType()) { case UNIFIED : pt = com.google.gerrit.reviewdb.client.Patch.PatchType.UNIFIED; break; case GIT_BINARY : case BINARY : pt = com.google.gerrit.reviewdb.client.Patch.PatchType.BINARY; break; default : throw new java.lang.IllegalArgumentException((""Unsupported type "" + (hdr.getPatchType()))); } if (pt != (com.google.gerrit.reviewdb.client.Patch.PatchType.BINARY)) { final byte[] buf = hdr.getBuffer(); for (int ptr = hdr.getStartOffset(); ptr < (hdr.getEndOffset()); ptr++) { if ((buf[ptr]) == '\u0000') { pt = com.google.gerrit.reviewdb.client.Patch.PatchType.BINARY; break; } } } return pt; }",a2f070494392581080b52e1ff3713d0891a98875,"private static com.google.gerrit.reviewdb.client.PatchType toPatchType(org.eclipse.jgit.patch.FileHeader hdr) { com.google.gerrit.reviewdb.client.PatchType pt; switch (hdr.getPatchType()) { case UNIFIED : pt = com.google.gerrit.reviewdb.client.PatchType.UNIFIED; break; case GIT_BINARY : case BINARY : pt = com.google.gerrit.reviewdb.client.PatchType.BINARY; break; default : throw new java.lang.IllegalArgumentException((""Unsupported type "" + (hdr.getPatchType()))); } if (pt != (com.google.gerrit.reviewdb.client.PatchType.BINARY)) { final byte[] buf = hdr.getBuffer(); for (int ptr = hdr.getStartOffset(); ptr < (hdr.getEndOffset()); ptr++) { if ((buf[ptr]) == '\u0000') { pt = com.google.gerrit.reviewdb.client.PatchType.BINARY; break; } } } return pt; }",f29c0e18e83d354112c8ba121372c1fbd2e9b9e0,"private static com.google.gerrit.reviewdb.client.Patch.PatchType toPatchType(org.eclipse.jgit.patch.FileHeader hdr) { com.google.gerrit.reviewdb.client.Patch.PatchType pt; switch (hdr.getPatchType()) { case UNIFIED : pt = com.google.gerrit.reviewdb.client.Patch.PatchType.UNIFIED; break; case GIT_BINARY : case BINARY : pt = com.google.gerrit.reviewdb.client.Patch.PatchType.BINARY; break; default : throw new java.lang.IllegalArgumentException((""Unsupported type "" + (hdr.getPatchType()))); } if (pt != (com.google.gerrit.reviewdb.client.Patch.PatchType.BINARY)) { final byte[] buf = hdr.getBuffer(); for (int ptr = hdr.getStartOffset(); ptr < (hdr.getEndOffset()); ptr++) { if ((buf[ptr]) == '\u0000') { pt = com.google.gerrit.reviewdb.client.Patch.PatchType.BINARY; break; } } } return pt; }",a2f070494392581080b52e1ff3713d0891a98875,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListEntry.java,"void writeTo(java.io.OutputStream out) throws java.io.IOException { writeEnum(out, changeType); writeEnum(out, patchType); writeString(out, oldName); writeString(out, newName); writeBytes(out, header); writeVarInt32(out, insertions); writeVarInt32(out, deletions); writeFixInt64(out, size); writeFixInt64(out, sizeDelta); com.google.gerrit.server.patch.PatchListEntry.writeEditArray(out, edits); com.google.gerrit.server.patch.PatchListEntry.writeEditArray(out, editsDueToRebase); }",af3d7fef5cf4a18ff18979fbe110ef8c00257260,"void writeTo(java.io.OutputStream out) throws java.io.IOException { writeEnum(out, changeType); writeEnum(out, patchType); writeString(out, oldName); writeString(out, newName); writeBytes(out, header); writeVarInt32(out, insertions); writeVarInt32(out, deletions); writeFixInt64(out, size); writeFixInt64(out, sizeDelta); com.google.gerrit.server.patchlib.PatchListEntry.writeEditArray(out, edits); com.google.gerrit.server.patchlib.PatchListEntry.writeEditArray(out, editsDueToRebase); }",4af092a09c44754ef9fa427f39d92afcb2d89e8e,"void writeTo(java.io.OutputStream out) throws java.io.IOException { writeEnum(out, changeType); writeEnum(out, patchType); writeString(out, oldName); writeString(out, newName); writeBytes(out, header); writeVarInt32(out, insertions); writeVarInt32(out, deletions); writeFixInt64(out, size); writeFixInt64(out, sizeDelta); com.google.gerrit.server.diff.PatchListEntry.writeEditArray(out, edits); com.google.gerrit.server.diff.PatchListEntry.writeEditArray(out, editsDueToRebase); }",c1caf88db3d69b03ec06ff1464f6c77b05434439,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_extensions_events_ReviewerAdded.java,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.util.List<com.google.gerrit.reviewdb.client.Account> reviewers, com.google.gerrit.reviewdb.client.Account adder, java.sql.Timestamp when) { if ((!(listeners.iterator().hasNext())) || (reviewers.isEmpty())) { return; } try { com.google.gerrit.server.extensions.events.ReviewerAdded.Event event = new com.google.gerrit.server.extensions.events.ReviewerAdded.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), com.google.common.collect.Lists.transform(reviewers, util::accountInfo), util.accountInfo(adder), when); for (com.google.gerrit.extensions.events.ReviewerAddedListener l : listeners) { try { l.onReviewersAdded(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ReviewerAdded.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ReviewerAdded.log.error(""Couldn't fire event"", e); } }",d5e66215f0f40c127067c448c5a1bc7bc3c2e55f,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.util.List<com.google.gerrit.reviewdb.client.Account> reviewers, com.google.gerrit.reviewdb.client.Account adder, java.sql.Timestamp when) { if ((!(listeners.iterator().hasNext())) || (reviewers.isEmpty())) { return; } try { com.google.gerrit.server.extensions.events.ReviewerAdded.Event event = new com.google.gerrit.server.extensions.events.ReviewerAdded.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), com.google.common.collect.Lists.transform(reviewers, util::accountInfo), util.accountInfo(adder), when); for (com.google.gerrit.extensions.events.ReviewerAddedListener l : listeners) { try { l.onReviewersAdded(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ReviewerAdded.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ReviewerAdded.log.error(""Couldn't fire event"", e); } }",75a98ff3f8802c15af1fc1dcc43766275fb80c7e,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.util.List<com.google.gerrit.reviewdb.client.Account> reviewers, com.google.gerrit.reviewdb.client.Account adder, java.sql.Timestamp when) { if ((!(listeners.iterator().hasNext())) || (reviewers.isEmpty())) { return; } try { com.google.gerrit.server.extensions.events.ReviewerAdded.Event event = new com.google.gerrit.server.extensions.events.ReviewerAdded.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), com.google.common.collect.Lists.transform(reviewers, util::accountInfo), util.accountInfo(adder), when); for (com.google.gerrit.extensions.events.ReviewerAddedListener l : listeners) { try { l.onReviewersAdded(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ReviewerAdded.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.diff.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ReviewerAdded.log.error(""Couldn't fire event"", e); } }",a800a9b6243b335353da72817aec4548781cc609,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchList.java,public java.util.List<com.google.gerrit.server.patch.PatchListEntry> getPatches() { return java.util.Collections.unmodifiableList(java.util.Arrays.asList(patches)); },81f5da8a91e27a0f1028c5c3979f1d67222de505,public java.util.List<com.google.gerrit.server.patchlib.PatchListEntry> getPatches() { return java.util.Collections.unmodifiableList(java.util.Arrays.asList(patches)); },cbd9d894cd84d0ffc4b034718c86e41d0a1237fa,public java.util.List<com.google.gerrit.server.diff.PatchListEntry> getPatches() { return java.util.Collections.unmodifiableList(java.util.Arrays.asList(patches)); },91ae4df256d08963510f0d029710a8183749da67,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_extensions_events_ChangeMerged.java,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account merger, java.lang.String newRevisionId, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeMerged.Event event = new com.google.gerrit.server.extensions.events.ChangeMerged.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(merger), newRevisionId, when); for (com.google.gerrit.extensions.events.ChangeMergedListener l : listeners) { try { l.onChangeMerged(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ChangeMerged.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeMerged.log.error(""Couldn't fire event"", e); } }",2c378f980611b2f3bb966c309c0be9a08a31fda8,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account merger, java.lang.String newRevisionId, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeMerged.Event event = new com.google.gerrit.server.extensions.events.ChangeMerged.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(merger), newRevisionId, when); for (com.google.gerrit.extensions.events.ChangeMergedListener l : listeners) { try { l.onChangeMerged(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ChangeMerged.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeMerged.log.error(""Couldn't fire event"", e); } }",0e8e238dda223f54cff0cb95d40258be2650c0f0,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account merger, java.lang.String newRevisionId, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeMerged.Event event = new com.google.gerrit.server.extensions.events.ChangeMerged.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(merger), newRevisionId, when); for (com.google.gerrit.extensions.events.ChangeMergedListener l : listeners) { try { l.onChangeMerged(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ChangeMerged.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.diff.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeMerged.log.error(""Couldn't fire event"", e); } }",a19b81e4f99d4724b1e9171d88b38587ae47dd3a,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchList.java,"@java.lang.Override public int compare(com.google.gerrit.server.patch.PatchListEntry a, com.google.gerrit.server.patch.PatchListEntry b) { return com.google.gerrit.server.patch.PatchList.comparePaths(a.getNewName(), b.getNewName()); }",d4ebd1463d3e6b8c642f99de571b1ac6676af9d1,"@java.lang.Override public int compare(com.google.gerrit.server.patchlib.PatchListEntry a, com.google.gerrit.server.patchlib.PatchListEntry b) { return com.google.gerrit.server.patchlib.PatchList.comparePaths(a.getNewName(), b.getNewName()); }",fd84692ab378c6985958728744156b40d9551135,"@java.lang.Override public int compare(com.google.gerrit.server.diff.PatchListEntry a, com.google.gerrit.server.diff.PatchListEntry b) { return com.google.gerrit.server.diff.PatchList.comparePaths(a.getNewName(), b.getNewName()); }",7277248801a761e492e7fe3e4974a7ab0d51b9d4,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListEntry.java,public com.google.gerrit.reviewdb.client.Patch.PatchType getPatchType() { return patchType; },c3594a1ba613754ffaa041a99b101f92034fa222,public com.google.gerrit.reviewdb.client.PatchType getPatchType() { return patchType; },e4fb5aa3b53aab784cc04db0eed2d8edd6fa4da5,public com.google.gerrit.reviewdb.client.Patch.PatchType getPatchType() { return patchType; },c3594a1ba613754ffaa041a99b101f92034fa222,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListEntry.java,"private static byte[] compact(org.eclipse.jgit.patch.FileHeader h) { final int end = com.google.gerrit.server.patch.PatchListEntry.end(h); if (((h.getStartOffset()) == 0) && (end == (h.getBuffer().length))) { return h.getBuffer(); } final byte[] buf = new byte[end - (h.getStartOffset())]; java.lang.System.arraycopy(h.getBuffer(), h.getStartOffset(), buf, 0, buf.length); return buf; }",1b2586c9b9274550caaf4a93803840b70681e779,"private static byte[] compact(org.eclipse.jgit.patch.FileHeader h) { final int end = com.google.gerrit.server.patchlib.PatchListEntry.end(h); if (((h.getStartOffset()) == 0) && (end == (h.getBuffer().length))) { return h.getBuffer(); } final byte[] buf = new byte[end - (h.getStartOffset())]; java.lang.System.arraycopy(h.getBuffer(), h.getStartOffset(), buf, 0, buf.length); return buf; }",cb33990fc12ef3e4d22ec3905f1929d6678ab909,"private static byte[] compact(org.eclipse.jgit.patch.FileHeader h) { final int end = com.google.gerrit.server.diff.PatchListEntry.end(h); if (((h.getStartOffset()) == 0) && (end == (h.getBuffer().length))) { return h.getBuffer(); } final byte[] buf = new byte[end - (h.getStartOffset())]; java.lang.System.arraycopy(h.getBuffer(), h.getStartOffset(), buf, 0, buf.length); return buf; }",045602827ab63d25785c9104fac7404400922e5d,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchList.java,public java.util.List<com.google.gerrit.reviewdb.client.Patch> toPatchList(com.google.gerrit.reviewdb.client.PatchSet.Id setId) { final java.util.ArrayList<com.google.gerrit.reviewdb.client.Patch> r = new java.util.ArrayList(patches.length); for (com.google.gerrit.server.patch.PatchListEntry e : patches) { r.add(e.toPatch(setId)); } return r; },89fc0a541600016469fd12d5e9c262c9c010ea0c,public java.util.List<com.google.gerrit.reviewdb.client.Patch> toPatchList(com.google.gerrit.reviewdb.client.PatchSet.Id setId) { final java.util.ArrayList<com.google.gerrit.reviewdb.client.Patch> r = new java.util.ArrayList(patches.length); for (com.google.gerrit.server.patchlib.PatchListEntry e : patches) { r.add(e.toPatch(setId)); } return r; },2f9c1fd21bccc30290cfe19b9ca4647b8e5fce2e,public java.util.List<com.google.gerrit.reviewdb.client.Patch> toPatchList(com.google.gerrit.reviewdb.client.PatchSet.Id setId) { final java.util.ArrayList<com.google.gerrit.reviewdb.client.Patch> r = new java.util.ArrayList(patches.length); for (com.google.gerrit.server.diff.PatchListEntry e : patches) { r.add(e.toPatch(setId)); } return r; },3ef2afae2a8653f6996bbe27bd51dc157cff7ae2,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListEntry.java,int weigh() { int size = ((((((16 + (6 * 8)) + (2 * 4)) + 20) + 16) + 8) + 4) + 20; size += com.google.gerrit.server.patch.PatchListEntry.stringSize(oldName); size += com.google.gerrit.server.patch.PatchListEntry.stringSize(newName); size += header.length; size += ((8 + 16) + (4 * 4)) * (edits.size()); size += ((8 + 16) + (4 * 4)) * (editsDueToRebase.size()); return size; },4ebf82b54fc56e65382209ea5e39bf19b03584c4,int weigh() { int size = ((((((16 + (6 * 8)) + (2 * 4)) + 20) + 16) + 8) + 4) + 20; size += com.google.gerrit.server.patchlib.PatchListEntry.stringSize(oldName); size += com.google.gerrit.server.patchlib.PatchListEntry.stringSize(newName); size += header.length; size += ((8 + 16) + (4 * 4)) * (edits.size()); size += ((8 + 16) + (4 * 4)) * (editsDueToRebase.size()); return size; },dcf4a7fc8b5a20fdbead11a5d8dfeafe88a36ebe,public int weigh() { int size = ((((((16 + (6 * 8)) + (2 * 4)) + 20) + 16) + 8) + 4) + 20; size += com.google.gerrit.server.diff.PatchListEntry.stringSize(oldName); size += com.google.gerrit.server.diff.PatchListEntry.stringSize(newName); size += header.length; size += ((8 + 16) + (4 * 4)) * (edits.size()); size += ((8 + 16) + (4 * 4)) * (editsDueToRebase.size()); return size; },b9f639470bc94dca8a67c8d7ff2eeb22d63b666d,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchList.java,public com.google.gerrit.server.patch.PatchListEntry get(java.lang.String fileName) { final int index = search(fileName); return 0 <= index ? patches[index] : com.google.gerrit.server.patch.PatchListEntry.empty(fileName); },995dc9933e886952b746edd27a8543a0b8c9377d,public com.google.gerrit.server.patchlib.PatchListEntry get(java.lang.String fileName) { final int index = search(fileName); return 0 <= index ? patches[index] : com.google.gerrit.server.patchlib.PatchListEntry.empty(fileName); },05c4d4189735e204ace21b40c0786d6c5ecbef66,public com.google.gerrit.server.diff.PatchListEntry get(java.lang.String fileName) { final int index = search(fileName); return 0 <= index ? patches[index] : com.google.gerrit.server.diff.PatchListEntry.empty(fileName); },9bc6bb37c7edfe6263e28b68962d91a0aaf51503,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchListEntry.java,"static com.google.gerrit.server.patch.PatchListEntry empty(java.lang.String fileName) { return new com.google.gerrit.server.patch.PatchListEntry(com.google.gerrit.reviewdb.client.Patch.ChangeType.MODIFIED, com.google.gerrit.reviewdb.client.Patch.PatchType.UNIFIED, null, fileName, com.google.gerrit.server.patch.PatchListEntry.EMPTY_HEADER, com.google.common.collect.ImmutableList.of(), com.google.common.collect.ImmutableSet.of(), 0, 0, 0, 0); }",1578b1bd8bf6394e298e2e5d097ccb8cd606cff6,"public static com.google.gerrit.server.patchlib.PatchListEntry empty(java.lang.String fileName) { return new com.google.gerrit.server.patchlib.PatchListEntry(com.google.gerrit.reviewdb.client.Patch.ChangeType.MODIFIED, com.google.gerrit.reviewdb.client.PatchType.UNIFIED, null, fileName, com.google.gerrit.server.patchlib.PatchListEntry.EMPTY_HEADER, com.google.common.collect.ImmutableList.of(), com.google.common.collect.ImmutableSet.of(), 0, 0, 0, 0); }",58f91b08608b8df8e7d37a008fb0ad63b5d58cd4,"public static com.google.gerrit.server.diff.PatchListEntry empty(java.lang.String fileName) { return new com.google.gerrit.server.diff.PatchListEntry(com.google.gerrit.reviewdb.client.Patch.ChangeType.MODIFIED, com.google.gerrit.reviewdb.client.Patch.PatchType.UNIFIED, null, fileName, com.google.gerrit.server.diff.PatchListEntry.EMPTY_HEADER, com.google.common.collect.ImmutableList.of(), com.google.common.collect.ImmutableSet.of(), 0, 0, 0, 0); }",fdce48fc4408eca09ed7a946b84dea45af4dca31,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_change_GetContent.java,"private byte[] getMergeList(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.Change.Id changeId = notes.getChangeId(); com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.current(db.get(), notes); if (ps == null) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(notes.getProjectName());org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(git)) { return com.google.gerrit.server.patch.Text.forMergeList(com.google.gerrit.server.patch.ComparisonType.againstAutoMerge(), revWalk.getObjectReader(), org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get())).getContent(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId, e); } }",de5c50474952b17f530668fca0d86f8b9d4a5507,"private byte[] getMergeList(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.Change.Id changeId = notes.getChangeId(); com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.current(db.get(), notes); if (ps == null) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(notes.getProjectName());org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(git)) { return com.google.gerrit.server.patchlib.Text.forMergeList(com.google.gerrit.server.patchlib.ComparisonType.againstAutoMerge(), revWalk.getObjectReader(), org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get())).getContent(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId, e); } }",d5f26c4861a2cd962684d60acbf7fd2865018542,"private byte[] getMergeList(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.Change.Id changeId = notes.getChangeId(); com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.current(db.get(), notes); if (ps == null) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(notes.getProjectName());org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(git)) { return com.google.gerrit.server.diff.Text.forMergeList(com.google.gerrit.server.diff.ComparisonType.againstAutoMerge(), revWalk.getObjectReader(), org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get())).getContent(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId, e); } }",4c9cb93efdcd9cc7c24649711f8fa046b265679d,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchList.java,public com.google.gerrit.server.patch.ComparisonType getComparisonType() { return comparisonType; },3023b7ddfcd328bf65a7ae995616e454f98dc369,public com.google.gerrit.server.patchlib.ComparisonType getComparisonType() { return comparisonType; },e160e190655e5ed8403776ebf6dd24fe12f72adb,public com.google.gerrit.server.diff.ComparisonType getComparisonType() { return comparisonType; },6dbdd22d6ab9412bfdb2914f3d7dfac32010b94d,2017-11-15 12:52:05,11
140535,java_com_google_gerrit_server_patchlib_PatchList.java,private void readObject(java.io.ObjectInputStream input) throws java.io.IOException { final java.io.ByteArrayInputStream buf = new java.io.ByteArrayInputStream(readBytes(input)); try (java.util.zip.InflaterInputStream in = new java.util.zip.InflaterInputStream(buf)) { oldId = readCanBeNull(in); newId = readNotNull(in); isMerge = (readVarInt32(in)) != 0; comparisonType = com.google.gerrit.server.patch.ComparisonType.readFrom(in); insertions = readVarInt32(in); deletions = readVarInt32(in); final int cnt = readVarInt32(in); final com.google.gerrit.server.patch.PatchListEntry[] all = new com.google.gerrit.server.patch.PatchListEntry[cnt]; for (int i = 0; i < (all.length); i++) { all[i] = com.google.gerrit.server.patch.PatchListEntry.readFrom(in); } patches = all; } },3a7c7635ba25de9285f5165e33ac82e00ad58721,private void readObject(java.io.ObjectInputStream input) throws java.io.IOException { final java.io.ByteArrayInputStream buf = new java.io.ByteArrayInputStream(readBytes(input)); try (java.util.zip.InflaterInputStream in = new java.util.zip.InflaterInputStream(buf)) { oldId = readCanBeNull(in); newId = readNotNull(in); isMerge = (readVarInt32(in)) != 0; comparisonType = com.google.gerrit.server.patchlib.ComparisonType.readFrom(in); insertions = readVarInt32(in); deletions = readVarInt32(in); final int cnt = readVarInt32(in); final com.google.gerrit.server.patchlib.PatchListEntry[] all = new com.google.gerrit.server.patchlib.PatchListEntry[cnt]; for (int i = 0; i < (all.length); i++) { all[i] = com.google.gerrit.server.patchlib.PatchListEntry.readFrom(in); } patches = all; } },9ebfc28587bd36be5b272eb72ed2800ae086edf9,private void readObject(java.io.ObjectInputStream input) throws java.io.IOException { final java.io.ByteArrayInputStream buf = new java.io.ByteArrayInputStream(readBytes(input)); try (java.util.zip.InflaterInputStream in = new java.util.zip.InflaterInputStream(buf)) { oldId = readCanBeNull(in); newId = readNotNull(in); isMerge = (readVarInt32(in)) != 0; comparisonType = com.google.gerrit.server.diff.ComparisonType.readFrom(in); insertions = readVarInt32(in); deletions = readVarInt32(in); final int cnt = readVarInt32(in); final com.google.gerrit.server.diff.PatchListEntry[] all = new com.google.gerrit.server.diff.PatchListEntry[cnt]; for (int i = 0; i < (all.length); i++) { all[i] = com.google.gerrit.server.diff.PatchListEntry.readFrom(in); } patches = all; } },57189b276c07c4ac2d157e14d3c631ddd9dca1d5,2017-11-15 12:52:05,11
140535,javatests_com_google_gerrit_server_patch_IntraLineLoaderTest.java,"private static java.util.List<org.eclipse.jgit.diff.Edit> intraline(java.lang.String a, java.lang.String b, org.eclipse.jgit.diff.Edit lines) throws java.lang.Exception { com.google.gerrit.server.patch.Text aText = new com.google.gerrit.server.patch.Text(a.getBytes(java.nio.charset.StandardCharsets.UTF_8)); com.google.gerrit.server.patch.Text bText = new com.google.gerrit.server.patch.Text(b.getBytes(java.nio.charset.StandardCharsets.UTF_8)); com.google.gerrit.server.patch.IntraLineDiff diff = com.google.gerrit.server.patch.IntraLineLoader.compute(aText, bText, com.google.common.collect.ImmutableList.of(lines)); assertThat(diff.getStatus()).isEqualTo(IntraLineDiff.Status.EDIT_LIST); java.util.List<org.eclipse.jgit.diff.Edit> actualEdits = diff.getEdits(); assertThat(actualEdits).hasSize(1); org.eclipse.jgit.diff.Edit actualEdit = actualEdits.get(0); assertThat(actualEdit.getBeginA()).isEqualTo(lines.getBeginA()); assertThat(actualEdit.getEndA()).isEqualTo(lines.getEndA()); assertThat(actualEdit.getBeginB()).isEqualTo(lines.getBeginB()); assertThat(actualEdit.getEndB()).isEqualTo(lines.getEndB()); assertThat(actualEdit).isInstanceOf(org.eclipse.jgit.diff.ReplaceEdit.class); return ((org.eclipse.jgit.diff.ReplaceEdit) (actualEdit)).getInternalEdits(); }",ae26f7997d4d5f7cc22a7e12596e5720afee9966,"private static java.util.List<org.eclipse.jgit.diff.Edit> intraline(java.lang.String a, java.lang.String b, org.eclipse.jgit.diff.Edit lines) throws java.lang.Exception { com.google.gerrit.server.patchlib.Text aText = new com.google.gerrit.server.patchlib.Text(a.getBytes(java.nio.charset.StandardCharsets.UTF_8)); com.google.gerrit.server.patchlib.Text bText = new com.google.gerrit.server.patchlib.Text(b.getBytes(java.nio.charset.StandardCharsets.UTF_8)); com.google.gerrit.server.patchlib.IntraLineDiff diff = com.google.gerrit.server.patch.IntraLineLoader.compute(aText, bText, com.google.common.collect.ImmutableList.of(lines)); assertThat(diff.getStatus()).isEqualTo(IntraLineDiff.Status.EDIT_LIST); java.util.List<org.eclipse.jgit.diff.Edit> actualEdits = diff.getEdits(); assertThat(actualEdits).hasSize(1); org.eclipse.jgit.diff.Edit actualEdit = actualEdits.get(0); assertThat(actualEdit.getBeginA()).isEqualTo(lines.getBeginA()); assertThat(actualEdit.getEndA()).isEqualTo(lines.getEndA()); assertThat(actualEdit.getBeginB()).isEqualTo(lines.getBeginB()); assertThat(actualEdit.getEndB()).isEqualTo(lines.getEndB()); assertThat(actualEdit).isInstanceOf(org.eclipse.jgit.diff.ReplaceEdit.class); return ((org.eclipse.jgit.diff.ReplaceEdit) (actualEdit)).getInternalEdits(); }",2ba7bef6a12a87eca8bf98a10308565e400553a6,"private static java.util.List<org.eclipse.jgit.diff.Edit> intraline(java.lang.String a, java.lang.String b, org.eclipse.jgit.diff.Edit lines) throws java.lang.Exception { com.google.gerrit.server.diff.Text aText = new com.google.gerrit.server.diff.Text(a.getBytes(java.nio.charset.StandardCharsets.UTF_8)); com.google.gerrit.server.diff.Text bText = new com.google.gerrit.server.diff.Text(b.getBytes(java.nio.charset.StandardCharsets.UTF_8)); com.google.gerrit.server.diff.IntraLineDiff diff = com.google.gerrit.server.patch.IntraLineLoader.compute(aText, bText, com.google.common.collect.ImmutableList.of(lines)); assertThat(diff.getStatus()).isEqualTo(IntraLineDiff.Status.EDIT_LIST); java.util.List<org.eclipse.jgit.diff.Edit> actualEdits = diff.getEdits(); assertThat(actualEdits).hasSize(1); org.eclipse.jgit.diff.Edit actualEdit = actualEdits.get(0); assertThat(actualEdit.getBeginA()).isEqualTo(lines.getBeginA()); assertThat(actualEdit.getEndA()).isEqualTo(lines.getEndA()); assertThat(actualEdit.getBeginB()).isEqualTo(lines.getBeginB()); assertThat(actualEdit.getEndB()).isEqualTo(lines.getEndB()); assertThat(actualEdit).isInstanceOf(org.eclipse.jgit.diff.ReplaceEdit.class); return ((org.eclipse.jgit.diff.ReplaceEdit) (actualEdit)).getInternalEdits(); }",c69d6c154e7ba60b38c919de7c63fd1d21d382af,2017-11-15 12:52:05,11
141434,java_com_google_gerrit_server_group_db_GroupNameNotes.java,"@java.lang.SuppressWarnings(""deprecation"") private static org.eclipse.jgit.lib.ObjectId getNoteKey(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) { return org.eclipse.jgit.lib.ObjectId.fromRaw(com.google.common.hash.Hashing.sha1().hashString(groupName.get(), java.nio.charset.StandardCharsets.UTF_8).asBytes()); }",d239c501636eef747f5e95d2a3f5138399412f64,"@java.lang.SuppressWarnings(""deprecation"") static org.eclipse.jgit.lib.ObjectId getNoteKey(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) { return org.eclipse.jgit.lib.ObjectId.fromRaw(com.google.common.hash.Hashing.sha1().hashString(groupName.get(), java.nio.charset.StandardCharsets.UTF_8).asBytes()); }",731618740a8259df9a12889ee4960d760b39c018,"@java.lang.SuppressWarnings(""deprecation"") @com.google.common.annotations.VisibleForTesting static org.eclipse.jgit.lib.ObjectId getNoteKey(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) { return org.eclipse.jgit.lib.ObjectId.fromRaw(com.google.common.hash.Hashing.sha1().hashString(groupName.get(), java.nio.charset.StandardCharsets.UTF_8).asBytes()); }",a801629f362251ae13bfe084b49a99d16f22d565,2017-11-15 16:20:09,5
141434,javatests_com_google_gerrit_server_group_db_GroupRebuilderTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log(java.lang.String refName) throws java.lang.Exception { com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> result = com.google.common.collect.ImmutableList.of(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); if (ref != null) { rw.sort(RevSort.REVERSE); rw.setRetainBody(true); rw.markStart(rw.parseCommit(ref.getObjectId())); result = com.google.common.collect.Streams.stream(rw).map(CommitUtil::toCommitInfo).collect(toImmutableList()); } } return result; },4d02c60ae6295be8b5fe715445e5b1ef002350fd,private static com.google.gerrit.server.group.InternalGroup removeRefState(com.google.gerrit.server.group.InternalGroup group) throws java.lang.Exception { return group.toBuilder().setRefState(null).build(); },d562f99f14e00d2802c3a22570403568549bcd98,2017-11-15 16:20:09,5
141434,javatests_com_google_gerrit_server_group_db_GroupRebuilderTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> logGroupNames() throws java.lang.Exception { return log(RefNames.REFS_GROUPNAMES); },6caced0c44cec36501ecf269aab3af479ab187b9,"private com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> logGroupNames() throws java.lang.Exception { return com.google.gerrit.server.group.db.testing.GroupTestUtil.log(repo, com.google.gerrit.server.group.db.REFS_GROUPNAMES); }",d6cac4a03883f35abaebb5236b88d2ca29018d04,2017-11-15 16:20:09,5
141434,javatests_com_google_gerrit_server_group_db_GroupRebuilderTest.java,private com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log(com.google.gerrit.reviewdb.client.AccountGroup g) throws java.lang.Exception { com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> result = com.google.common.collect.ImmutableList.of(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(g.getGroupUUID())); if (ref != null) { rw.sort(RevSort.REVERSE); rw.setRetainBody(true); rw.markStart(rw.parseCommit(ref.getObjectId())); result = com.google.common.collect.Streams.stream(rw).map(CommitUtil::toCommitInfo).collect(toImmutableList()); } } return result; },bc3b400c7daa64e90316386b77c9791237c7194d,private com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log(com.google.gerrit.reviewdb.client.AccountGroup g) throws java.lang.Exception { return log(com.google.gerrit.reviewdb.client.RefNames.refsGroups(g.getGroupUUID())); },9162813474e254a8aa862945ad4d9099ee9e1462,"private com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log(com.google.gerrit.reviewdb.client.AccountGroup g) throws java.lang.Exception { return com.google.gerrit.server.group.db.testing.GroupTestUtil.log(repo, com.google.gerrit.reviewdb.client.RefNames.refsGroups(g.getGroupUUID())); }",8dc6768a2fa92c477300aebf4187f0b27b2442af,2017-11-15 16:20:09,5
141434,java_com_google_gerrit_server_group_db_GroupNameNotes.java,"private static java.lang.String getAsNoteData(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM, uuid.get()); config.setString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM, groupName.get()); return config.toText(); }",4960b85a19ca9b9772a1881a893779c5562002c2,"static java.lang.String getAsNoteData(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM, uuid.get()); config.setString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM, groupName.get()); return config.toText(); }",ada8cd57f5768abeb3da25c52ccc5ee99fc3393f,"private static java.lang.String getAsNoteData(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM, uuid.get()); config.setString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM, groupName.get()); return config.toText(); }",4960b85a19ca9b9772a1881a893779c5562002c2,2017-11-15 16:20:09,5
141434,java_com_google_gerrit_server_group_db_GroupNameNotes.java,"private static com.google.gerrit.common.data.GroupReference getGroupReference(org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.lib.ObjectId noteDataBlobId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { byte[] noteData = reader.open(noteDataBlobId, com.google.gerrit.server.group.db.OBJ_BLOB).getCachedBytes(); return com.google.gerrit.server.group.db.GroupNameNotes.getFromNoteData(noteData); }",9facee10aeb6e1d9f6cb8dc3cb4730753ff0624d,"static com.google.gerrit.common.data.GroupReference getGroupReference(org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.lib.ObjectId noteDataBlobId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { byte[] noteData = reader.open(noteDataBlobId, com.google.gerrit.server.group.db.OBJ_BLOB).getCachedBytes(); return com.google.gerrit.server.group.db.GroupNameNotes.getFromNoteData(noteData); }",e5fd934ba7573f8e6b716b5753e7bc346adae8ad,"@com.google.common.annotations.VisibleForTesting public static com.google.gerrit.common.data.GroupReference getGroupReference(org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.lib.ObjectId noteDataBlobId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { byte[] noteData = reader.open(noteDataBlobId, com.google.gerrit.server.group.db.OBJ_BLOB).getCachedBytes(); return com.google.gerrit.server.group.db.GroupNameNotes.getFromNoteData(noteData); }",1bc6e6b2961af06c9d2a1ebbce57a149ee1ba0a1,2017-11-15 16:20:09,5
141930,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountDeactivator.java,"@java.lang.Override public void run() { com.google.gerrit.server.account.AccountDeactivator.log.debug(""Running account deactivations""); try { int numberOfAccountsDeactivated = 0; for (com.google.gerrit.server.account.AccountState acc : accountQueryProvider.get().query(com.google.gerrit.server.query.account.AccountPredicates.isActive())) { com.google.gerrit.server.account.AccountDeactivator.log.debug((""processing account "" + (acc.getUserName()))); if (((acc.getUserName()) != null) && (!(realm.isActive(acc.getUserName())))) { sif.deactivate(acc.getAccount().getId()); com.google.gerrit.server.account.AccountDeactivator.log.debug((""deactivated accout "" + (acc.getUserName()))); numberOfAccountsDeactivated++; } } com.google.gerrit.server.account.AccountDeactivator.log.info(""Deactivations complete, {} account(s) were deactivated"", numberOfAccountsDeactivated); } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountDeactivator.log.error((""Failed to deactivate inactive accounts "" + (e.getMessage())), e); } }",ba4315295ed615a0d112f7ccf1f79575ef5ba438,"@java.lang.Override public void run() { com.google.gerrit.server.account.AccountDeactivator.log.info(""Running account deactivations""); try { int numberOfAccountsDeactivated = 0; for (com.google.gerrit.server.account.AccountState acc : accountQueryProvider.get().query(com.google.gerrit.server.query.account.AccountPredicates.isActive())) { com.google.gerrit.server.account.AccountDeactivator.log.debug((""processing account "" + (acc.getUserName()))); if (((acc.getUserName()) != null) && (!(realm.isActive(acc.getUserName())))) { try { sif.deactivate(acc.getAccount().getId()); } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountDeactivator.log.error(""Error deactivating account: {} ({}) {}"", acc.getUserName(), acc.getAccount().getId(), e.getMessage(), e); } com.google.gerrit.server.account.AccountDeactivator.log.info((""deactivated account "" + (acc.getUserName()))); numberOfAccountsDeactivated++; } } com.google.gerrit.server.account.AccountDeactivator.log.info(""Deactivations complete, {} account(s) were deactivated"", numberOfAccountsDeactivated); } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountDeactivator.log.error((""Failed to deactivate inactive accounts "" + (e.getMessage())), e); } }",fe4a0296eaa04b5f7bc414c66bb7b73204f557e7,"@java.lang.Override public void run() { com.google.gerrit.server.account.AccountDeactivator.log.info(""Running account deactivations""); try { int numberOfAccountsDeactivated = 0; for (com.google.gerrit.server.account.AccountState acc : accountQueryProvider.get().query(com.google.gerrit.server.query.account.AccountPredicates.isActive())) { if (processAccount(acc)) { numberOfAccountsDeactivated++; } } com.google.gerrit.server.account.AccountDeactivator.log.info(""Deactivations complete, {} account(s) were deactivated"", numberOfAccountsDeactivated); } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountDeactivator.log.error((""Failed to complete deactivation of accounts: "" + (e.getMessage())), e); } }",7aee640c3f924f3223083e1752eef181073f09a1,2017-11-16 00:00:36,3
141971,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_ValidatorConfig.java,"private boolean matchCriteria(com.google.gerrit.server.config.PluginConfig config, java.lang.String criteria, java.lang.String value, boolean allowRegex, boolean refMatcher) { boolean match = true; for (java.lang.String s : config.getStringList(criteria)) { if ((allowRegex && (com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig.match(value, s, refMatcher))) || ((!allowRegex) && (s.equals(value)))) { return true; } match = false; } return match; }",a06dbb7771049bf24084363d2b02d905b75c0b28,"private boolean matchCriteria(com.google.gerrit.server.config.PluginConfig config, java.lang.String criteria, @com.google.gerrit.common.Nullable java.lang.String value, boolean allowRegex, boolean refMatcher) { boolean match = true; for (java.lang.String s : config.getStringList(criteria)) { if (value == null) { return false; } if ((allowRegex && (com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig.match(value, s, refMatcher))) || ((!allowRegex) && (s.equals(value)))) { return true; } match = false; } return match; }",cd97caa9b941a40fce5ced70b05c0e0f87c64bb3,"private boolean matchCriteria(com.google.gerrit.server.config.PluginConfig config, java.lang.String criteria, @com.google.gerrit.common.Nullable java.lang.String value, boolean allowRegex, boolean refMatcher) { java.lang.String[] c = config.getStringList(criteria); if ((c.length) == 0) { return true; } if (value == null) { return false; } if (allowRegex) { return java.util.Arrays.stream(c).anyMatch(( s) -> com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig.match(value, s, refMatcher)); } return java.util.Arrays.asList(c).contains(value); }",5704e7d98f1919b757cdc3c313330d343b44b8eb,2017-11-16 04:48:26,2
134450,src_main_java_com_googlesource_gerrit_plugins_webhooks_HttpClientProvider.java,@java.lang.Override public org.apache.http.impl.client.CloseableHttpClient get() { return org.apache.http.impl.client.HttpClients.custom().setConnectionManager(customConnectionManager()).setDefaultRequestConfig(customRequestConfig()).setServiceUnavailableRetryStrategy(customServiceUnavailRetryStrategy()).build(); },efe0091e970fe38c2b722cb2ea000dd04ad1531e,@java.lang.Override public org.apache.http.impl.client.CloseableHttpClient get() { return org.apache.http.impl.client.HttpClients.custom().setConnectionManager(mgr.get()).setDefaultRequestConfig(customRequestConfig()).setServiceUnavailableRetryStrategy(customServiceUnavailRetryStrategy()).build(); },11e153a6198a44e81c7ac12fd77d391f9a3256e7,@java.lang.Override public org.apache.http.impl.client.CloseableHttpClient get() { return org.apache.http.impl.client.HttpClients.custom().setConnectionManager(create(socketMgr.get())).setDefaultRequestConfig(customRequestConfig()).setServiceUnavailableRetryStrategy(customServiceUnavailRetryStrategy()).build(); },78cc6e7b222556a4883fe56ad4c49ca2ff542e34,2017-11-16 09:14:12,9
134450,src_main_java_com_googlesource_gerrit_plugins_webhooks_Configuration.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean getDisableSslVerification() { return disableSslVerification; },3eb3b03f17077bf5f9a2264905a24215f8d0600d,public boolean getSslVerify() { return sslVerify; },769b2a38b9d0da60e614aef77e867ef140d572f7,2017-11-16 09:14:12,9
134450,src_main_java_com_googlesource_gerrit_plugins_webhooks_RemoteConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean getDisableSslVerification() { return config.getBoolean(com.googlesource.gerrit.plugins.webhooks.RemoteConfig.REMOTE, name, com.googlesource.gerrit.plugins.webhooks.RemoteConfig.DISABLE_SSL_VERIFICATION, global.getDisableSslVerification()); }",13c4fb48e4281635e8fad73946648a874ef41a92,"public boolean getSslVerify() { return config.getBoolean(com.googlesource.gerrit.plugins.webhooks.RemoteConfig.REMOTE, name, com.googlesource.gerrit.plugins.webhooks.RemoteConfig.SSL_VERIFY, global.getSslVerify()); }",c36ebf3bb9ebaf75a87e1a6ea0dffc4db400dea8,2017-11-16 09:14:12,9
134450,src_main_java_com_googlesource_gerrit_plugins_webhooks_Module.java,"@java.lang.Override protected void configure() { bind(java.util.concurrent.ScheduledExecutorService.class).annotatedWith(com.googlesource.gerrit.plugins.webhooks.WebHooksExecutor.class).toProvider(com.googlesource.gerrit.plugins.webhooks.ExecutorProvider.class); bind(org.apache.http.impl.client.CloseableHttpClient.class).toProvider(com.googlesource.gerrit.plugins.webhooks.HttpClientProvider.class).in(Scopes.SINGLETON); factory(PostTask.Factory.class); factory(RemoteConfig.Factory.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.common.EventListener.class).to(com.googlesource.gerrit.plugins.webhooks.EventHandler.class); install(processors); }",0e13847f0e9ae6ea03415f4f17f85cff2ef8bf4e,"@java.lang.Override protected void configure() { bind(java.util.concurrent.ScheduledExecutorService.class).annotatedWith(com.googlesource.gerrit.plugins.webhooks.WebHooksExecutor.class).toProvider(com.googlesource.gerrit.plugins.webhooks.ExecutorProvider.class); factory(PostTask.Factory.class); factory(RemoteConfig.Factory.class); factory(HttpClientConnectionManagerProvider.Factory.class); factory(HttpSession.Factory.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.common.EventListener.class).to(com.googlesource.gerrit.plugins.webhooks.EventHandler.class); bind(org.apache.http.impl.client.CloseableHttpClient.class).annotatedWith(com.google.inject.name.Names.named(com.googlesource.gerrit.plugins.webhooks.DefaultHttpClientProvider.DEFAULT)).toProvider(com.googlesource.gerrit.plugins.webhooks.DefaultHttpClientProvider.class).in(Scopes.SINGLETON); bind(org.apache.http.impl.client.CloseableHttpClient.class).annotatedWith(com.google.inject.name.Names.named(com.googlesource.gerrit.plugins.webhooks.SslVerifyingHttpClientProvider.SSL_VERIFY)).toProvider(com.googlesource.gerrit.plugins.webhooks.SslVerifyingHttpClientProvider.class).in(Scopes.SINGLETON); bind(com.googlesource.gerrit.plugins.webhooks.HttpClientConfigurator.class).in(Scopes.SINGLETON); install(processors); }",45ef50fac12050d2665a69226c653ebc897b4ac9,"@java.lang.Override protected void configure() { bind(java.util.concurrent.ScheduledExecutorService.class).annotatedWith(com.googlesource.gerrit.plugins.webhooks.WebHooksExecutor.class).toProvider(com.googlesource.gerrit.plugins.webhooks.ExecutorProvider.class).in(Scopes.SINGLETON); factory(PostTask.Factory.class); factory(RemoteConfig.Factory.class); factory(HttpSession.Factory.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.common.EventListener.class).to(com.googlesource.gerrit.plugins.webhooks.EventHandler.class); bind(org.apache.http.impl.client.CloseableHttpClient.class).annotatedWith(com.google.inject.name.Names.named(com.googlesource.gerrit.plugins.webhooks.DefaultHttpClientProvider.DEFAULT)).toProvider(com.googlesource.gerrit.plugins.webhooks.DefaultHttpClientProvider.class).in(Scopes.SINGLETON); bind(org.apache.http.impl.client.CloseableHttpClient.class).annotatedWith(com.google.inject.name.Names.named(com.googlesource.gerrit.plugins.webhooks.SslVerifyingHttpClientProvider.SSL_VERIFY)).toProvider(com.googlesource.gerrit.plugins.webhooks.SslVerifyingHttpClientProvider.class).in(Scopes.SINGLETON); install(processors); }",439227df322eec7daa29be2405085ddcb9936fe7,2017-11-16 09:14:12,9
141594,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test public void pushToGroupBranchForNonAllUsersRepo() throws java.lang.Exception { pushToGroupBranch(project, null, null); }",68c3b4183bd446d3f8890722602191158957918d,"@org.junit.Test public void pushToGroupsBranchForNonAllUsersRepo() throws java.lang.Exception { assertCreateGroupBranch(project, null); assertPushToGroupBranch(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name(""foo""))), null); }",978db9dbe51866535cf72f4b0f434da31fab236e,"@org.junit.Test public void pushToGroupsBranchForNonAllUsersRepo() throws java.lang.Exception { assertCreateGroupBranch(project, null); java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name(""fo"")).get().id)); assertPushToGroupBranch(project, groupRef, true, null); }",5a1de7bc73d27f1cbe05a7bf8e8d64cee150042d,2017-11-16 09:38:07,4
141594,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"private void pushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnCreate, java.lang.String expectedErrorOnUpdate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", ""group.config"", ""some content"").setParents(com.google.common.collect.ImmutableList.of()).to(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name(""foo"")))); if (expectedErrorOnCreate != null) { r.assertErrorStatus(expectedErrorOnCreate); } else { r.assertOkStatus(); } java.lang.String groupRefName = (com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name(""bar"")); createGroupBranch(project, groupRefName); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + "":groupRef"")); repo.reset(""groupRef""); r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", ""group.config"", ""some content"").to(groupRefName); if (expectedErrorOnUpdate != null) { r.assertErrorStatus(expectedErrorOnUpdate); } else { r.assertOkStatus(); } }",b91d3f81b927a06a589c0009152a09072e14408a,"private void assertPushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String groupRefName, java.lang.String expectedErrorOnUpdate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, RefNames.REFS_GROUPNAMES, Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, RefNames.REFS_GROUPNAMES, Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); if (((!(groupRefName.equals(RefNames.REFS_GROUPNAMES))) || (!(groupsInNoteDb()))) || (!(allUsers.equals(project)))) { createGroupBranch(project, groupRefName); } com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + "":groupRef"")); repo.reset(""groupRef""); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", ""group.config"", ""some content"").to(groupRefName); if (expectedErrorOnUpdate != null) { r.assertErrorStatus(expectedErrorOnUpdate); } else { r.assertOkStatus(); } }",7b53d9c47123345eeae9b51acae6707126e2eb2a,"private void assertPushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String groupRefName, boolean createRef, java.lang.String expectedErrorOnUpdate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, RefNames.REFS_GROUPNAMES, Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); if (createRef) { createGroupBranch(project, groupRefName); } com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + "":groupRef"")); repo.reset(""groupRef""); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", GroupConfig.GROUP_CONFIG_FILE, ""some content"").to(groupRefName); if (expectedErrorOnUpdate != null) { r.assertErrorStatus(expectedErrorOnUpdate); } else { r.assertOkStatus(); } }",aa3717d3e91661df47308760d0d60fdcf2241371,2017-11-16 09:38:07,4
141594,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushToGroupNamesBranchForNonAllUsersRepo() throws java.lang.Exception { assertPushToGroupBranch(project, RefNames.REFS_GROUPNAMES, null); }",104047a8d38ade07cd063c8124cdc23c3357eb8a,"@org.junit.Test public void pushToGroupNamesBranchForNonAllUsersRepo() throws java.lang.Exception { assertPushToGroupBranch(project, RefNames.REFS_GROUPNAMES, true, null); }",dca088e3dde991a46510f3e315f92a90a2c7bd39,2017-11-16 09:38:07,4
141594,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushToGroupNamesBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); assertPushToGroupBranch(allUsers, RefNames.REFS_GROUPNAMES, ""group update not allowed""); }",b7d3dec22b34ec20db0627d480c98652adf1acd7,"@org.junit.Test public void pushToGroupNamesBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); allowGlobalCapabilities(com.google.gerrit.acceptance.api.group.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); assertPushToGroupBranch(allUsers, RefNames.REFS_GROUPNAMES, false, ""group update not allowed""); }",916373ec01be0ab84adbf1cecdcea0860e3e0caa,2017-11-16 09:38:07,4
141594,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void assertCreateGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnCreate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", ""group.config"", ""some content"").setParents(com.google.common.collect.ImmutableList.of()).to(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name(""bar"")))); if (expectedErrorOnCreate != null) { r.assertErrorStatus(expectedErrorOnCreate); } else { r.assertOkStatus(); } }",8729805181a024cc4b42f966b827633e8c35d3ee,"private void assertCreateGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnCreate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", GroupConfig.GROUP_CONFIG_FILE, ""some content"").setParents(com.google.common.collect.ImmutableList.of()).to(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name(""bar"")))); if (expectedErrorOnCreate != null) { r.assertErrorStatus(expectedErrorOnCreate); } else { r.assertOkStatus(); } }",fd41fdfa27c88af76d9c7f54c71a4ceaa0bcc8ab,2017-11-16 09:38:07,4
141594,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { pushToGroupBranch(allUsers, ""Not allowed to create group branch."", ""group update not allowed""); }",5158240e3496b1e229427c58bea48b76fee7bfa0,"@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { assertCreateGroupBranch(allUsers, ""Not allowed to create group branch.""); assertPushToGroupBranch(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name(""foo""))), ""group update not allowed""); }",537663853961297213b7b14410bf07fe8b1bb07f,"@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name(""fo"")).get().id)); assertPushToGroupBranch(allUsers, groupRef, (!(groupsInNoteDb())), ""group update not allowed""); }",6a8965f8484d438c3ab566b371167faeb0030d6c,2017-11-16 09:38:07,4
142190,java_com_google_gerrit_server_index_account_AccountIndexerImpl.java,"@java.lang.Override public void index(com.google.gerrit.reviewdb.client.Account.Id id) throws java.io.IOException { for (com.google.gerrit.index.Index<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.account.AccountState> i : getWriteIndexes()) { com.google.gerrit.server.account.AccountState accountState = byIdCache.getOrNull(id); if (accountState != null) { i.replace(accountState); } else { i.delete(id); } } fireAccountIndexedEvent(id.get()); }",1bc07c14866ea3d2e4d3cbba68ae18f8dbade7d3,"@java.lang.Override public void index(com.google.gerrit.reviewdb.client.Account.Id id) throws java.io.IOException { for (com.google.gerrit.index.Index<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.account.AccountState> i : getWriteIndexes()) { com.google.gerrit.server.account.AccountState accountState = byIdCache.getOrNull(id); if (accountState != null) { i.replace(accountState); autoReindexIfStale(id, false); } else { i.delete(id); autoReindexIfStale(id, true); } } fireAccountIndexedEvent(id.get()); }",0e16c34718ee3d62384ca933b01d18e1f91db3a2,"@java.lang.Override public void index(com.google.gerrit.reviewdb.client.Account.Id id) throws java.io.IOException { for (com.google.gerrit.index.Index<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.account.AccountState> i : getWriteIndexes()) { com.google.gerrit.server.account.AccountState accountState = byIdCache.getOrNull(id); if (accountState != null) { i.replace(accountState); } else { i.delete(id); } } fireAccountIndexedEvent(id.get()); com.google.gerrit.server.index.account.AccountIndexerImpl.autoReindexIfStale(id); }",315574405a3a5b8992bc06c0914dfba8ba0c088a,2017-11-16 12:17:31,3
142190,java_com_google_gerrit_server_index_account_AccountIndexerImpl.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void autoReindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id, boolean deleted) { if (autoReindexIfStale) { @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<?> possiblyIgnoredError = reindexIfStale(id, deleted); } }",130a03048c3367653e57f2adb420fbc656cbeda2,"private void autoReindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) { if (autoReindexIfStale) { @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<?> possiblyIgnoredError = reindexIfStale(id); } }",96a40355a1cf287355674693b2a1a7bbe2e97726,2017-11-16 12:17:31,3
142190,java_com_google_gerrit_server_index_account_AccountIndexerImpl.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.SuppressWarnings(""deprecation"") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id, boolean deleted) { java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(id, deleted)) { index(id); return true; } return false; }; return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task)), IndexUtils.MAPPER); }",485505e87ca9a83b76e345f18e252633029c6fd9,"@java.lang.SuppressWarnings(""deprecation"") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) { java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(id)) { index(id); return true; } return false; }; return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task)), IndexUtils.MAPPER); }",1302a4b8ee8b0449638df75ad5fde70323eba784,2017-11-16 12:17:31,3
142190,javatests_com_google_gerrit_acceptance_api_accounts_AccountIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void assertStaleAccountAndReindex(com.google.gerrit.reviewdb.client.Account.Id accountId, boolean deleted) throws java.io.IOException { accountsCache.invalidate(accountId); assertThat(stalenessChecker.isStale(accountId, deleted)).isTrue(); accountIndexer.index(accountId); assertThat(stalenessChecker.isStale(accountId, deleted)).isFalse(); }",2ebb51602465abba3e635ae7c332f0736fb416be,private void assertStaleAccountAndReindex(com.google.gerrit.reviewdb.client.Account.Id accountId) throws java.io.IOException { accountsCache.invalidate(accountId); assertThat(stalenessChecker.isStale(accountId)).isTrue(); accountIndexer.index(accountId); assertThat(stalenessChecker.isStale(accountId)).isFalse(); },2add7089aec9b52723572f58c61750f6e5794e95,2017-11-16 12:17:31,3
141732,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void expectWriteGroupToReviewDbBlockedException() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.RestApiException.class); exception.expectCause(new org.hamcrest.BaseMatcher<java.lang.Throwable>() { @java.lang.Override public boolean matches(java.lang.Object item) { return (item instanceof com.google.gwtorm.server.OrmException) && (""Updates to groups in ReviewDb are blocked"".equals(((com.google.gwtorm.server.OrmException) (item)).getMessage())); } @java.lang.Override public void describeTo(org.hamcrest.Description description) { description.appendText(""OrmException: Updates to groups in ReviewDb are blocked""); } }); }",4c4aff25611e0fdfe0b22b5cc6f87f1970515d4c,"private void assertWriteGroupToReviewDbBlockedException(java.lang.Exception e) throws java.lang.Exception { java.lang.Throwable t = com.google.common.base.Throwables.getRootCause(e); assertThat(t).isInstanceOf(com.google.gwtorm.server.OrmException.class); assertThat(t.getMessage()).isEqualTo(""Updates to groups in ReviewDb are blocked""); }",54b6df98024588e713c4924c64d536753fd402a0,2017-11-16 14:02:38,2
141732,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @com.google.gerrit.acceptance.Sandboxed public void blockReviewDbUpdatesOnGroupUpdate() throws java.lang.Exception { assume().that(groupsInNoteDb()).isFalse(); java.lang.String group1 = gApi.groups().create(name(""foo"")).get().id; java.lang.String group2 = gApi.groups().create(name(""bar"")).get().id; cfg.setBoolean(""user"", null, ""blockReviewDbGroupUpdates"", true); expectWriteGroupToReviewDbBlockedException(); gApi.groups().id(group1).addGroups(group2); }",b39c52c7f3573f5a2ce62841fea0cf23c1ea3362,"@org.junit.Test @com.google.gerrit.acceptance.Sandboxed public void blockReviewDbUpdatesOnGroupUpdate() throws java.lang.Exception { assume().that(groupsInNoteDb()).isFalse(); java.lang.String group1 = gApi.groups().create(name(""foo"")).get().id; java.lang.String group2 = gApi.groups().create(name(""bar"")).get().id; cfg.setBoolean(""user"", null, ""blockReviewDbGroupUpdates"", true); try { gApi.groups().id(group1).addGroups(group2); fail(""Expected RestApiException: Updates to groups in ReviewDb are blocked""); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { assertWriteGroupToReviewDbBlockedException(e); } }",ead9317fbc3d25f986c26b1679be74d09b4f90dc,2017-11-16 14:02:38,2
141732,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @com.google.gerrit.acceptance.Sandboxed public void blockReviewDbUpdatesOnGroupCreation() throws java.lang.Exception { assume().that(groupsInNoteDb()).isFalse(); cfg.setBoolean(""user"", null, ""blockReviewDbGroupUpdates"", true); expectWriteGroupToReviewDbBlockedException(); gApi.groups().create(name(""foo"")); }",d5d9c85845b566ea5735c2c302d39f9d5f92a17a,"@org.junit.Test @com.google.gerrit.acceptance.Sandboxed public void blockReviewDbUpdatesOnGroupCreation() throws java.lang.Exception { assume().that(groupsInNoteDb()).isFalse(); cfg.setBoolean(""user"", null, ""blockReviewDbGroupUpdates"", true); try { gApi.groups().create(name(""foo"")); fail(""Expected RestApiException: Updates to groups in ReviewDb are blocked""); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { assertWriteGroupToReviewDbBlockedException(e); } }",1651df5ae4ece88968079f9357c197fc1f7115d1,2017-11-16 14:02:38,2
142151,java_com_google_gerrit_lucene_LuceneProjectIndex.java,"@java.lang.Override public com.google.gerrit.index.query.DataSource<com.google.gerrit.server.project.ProjectData> getSource(com.google.gerrit.index.query.Predicate<com.google.gerrit.server.project.ProjectData> p, com.google.gerrit.index.QueryOptions opts) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.lucene.LuceneProjectIndex.QuerySource(opts, queryBuilder.toQuery(p), new org.apache.lucene.search.Sort(new org.apache.lucene.search.SortField(com.google.gerrit.lucene.LuceneProjectIndex.NAME_SORT_FIELD, SortField.Type.STRING, false))); }",b7af2f586f40b400e3ed792c1e4f2633e8b92099,"@java.lang.Override public com.google.gerrit.index.query.DataSource<com.google.gerrit.server.project.ProjectData> getSource(com.google.gerrit.index.query.Predicate<com.google.gerrit.server.project.ProjectData> p, com.google.gerrit.index.QueryOptions opts) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.lucene.LuceneQuerySource(opts.filterFields(IndexUtils::projectFields), queryBuilder.toQuery(p), new org.apache.lucene.search.Sort(new org.apache.lucene.search.SortField(com.google.gerrit.lucene.LuceneProjectIndex.NAME_SORT_FIELD, SortField.Type.STRING, false)), this::toProjectData); }",47f1687c822c3bb34d2d1bddc63fc535721d8322,"@java.lang.Override public com.google.gerrit.index.query.DataSource<com.google.gerrit.server.project.ProjectData> getSource(com.google.gerrit.index.query.Predicate<com.google.gerrit.server.project.ProjectData> p, com.google.gerrit.index.QueryOptions opts) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.lucene.LuceneQuerySource(opts.filterFields(IndexUtils::projectFields), queryBuilder.toQuery(p), new org.apache.lucene.search.Sort(new org.apache.lucene.search.SortField(com.google.gerrit.lucene.LuceneProjectIndex.NAME_SORT_FIELD, SortField.Type.STRING, false))); }",a3ed28ec483f67b3b664661cc4e7a5c0d6b01192,2017-11-16 14:51:09,2
142151,java_com_google_gerrit_lucene_AbstractLuceneIndex.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public com.google.gwtorm.server.ResultSet<V> read() throws com.google.gwtorm.server.OrmException { return readImpl(fromDocumentMapper); },419cf1190c207f2198f760be7517913a912fde84,@java.lang.Override public com.google.gwtorm.server.ResultSet<V> read() throws com.google.gwtorm.server.OrmException { return readImpl(( doc) -> fromDocument(doc)); },849c72cd0b6faa3d74f4068b530d19889cba5538,2017-11-16 14:51:09,2
142151,java_com_google_gerrit_lucene_LuceneGroupIndex.java,"@java.lang.Override public com.google.gerrit.index.query.DataSource<com.google.gerrit.server.group.InternalGroup> getSource(com.google.gerrit.index.query.Predicate<com.google.gerrit.server.group.InternalGroup> p, com.google.gerrit.index.QueryOptions opts) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.lucene.LuceneGroupIndex.QuerySource(opts, queryBuilder.toQuery(p), new org.apache.lucene.search.Sort(new org.apache.lucene.search.SortField(com.google.gerrit.lucene.LuceneGroupIndex.UUID_SORT_FIELD, SortField.Type.STRING, false))); }",492bc53deb4cfc18429042124f70c40dc87bcdab,"@java.lang.Override public com.google.gerrit.index.query.DataSource<com.google.gerrit.server.group.InternalGroup> getSource(com.google.gerrit.index.query.Predicate<com.google.gerrit.server.group.InternalGroup> p, com.google.gerrit.index.QueryOptions opts) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.lucene.LuceneQuerySource(opts.filterFields(IndexUtils::groupFields), queryBuilder.toQuery(p), new org.apache.lucene.search.Sort(new org.apache.lucene.search.SortField(com.google.gerrit.lucene.LuceneGroupIndex.UUID_SORT_FIELD, SortField.Type.STRING, false)), this::toInternalGroup); }",382259ff7c38684d16ce095a7cbdf684ef9f2f8b,"@java.lang.Override public com.google.gerrit.index.query.DataSource<com.google.gerrit.server.group.InternalGroup> getSource(com.google.gerrit.index.query.Predicate<com.google.gerrit.server.group.InternalGroup> p, com.google.gerrit.index.QueryOptions opts) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.lucene.LuceneQuerySource(opts.filterFields(IndexUtils::groupFields), queryBuilder.toQuery(p), new org.apache.lucene.search.Sort(new org.apache.lucene.search.SortField(com.google.gerrit.lucene.LuceneGroupIndex.UUID_SORT_FIELD, SortField.Type.STRING, false))); }",801730bc1f002da5046d221d9d1a566952f7d684,2017-11-16 14:51:09,2
142151,java_com_google_gerrit_lucene_LuceneAccountIndex.java,"@java.lang.Override public com.google.gerrit.index.query.DataSource<com.google.gerrit.server.account.AccountState> getSource(com.google.gerrit.index.query.Predicate<com.google.gerrit.server.account.AccountState> p, com.google.gerrit.index.QueryOptions opts) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.lucene.LuceneAccountIndex.QuerySource(opts, queryBuilder.toQuery(p), new org.apache.lucene.search.Sort(new org.apache.lucene.search.SortField(com.google.gerrit.lucene.LuceneAccountIndex.ID_SORT_FIELD, SortField.Type.LONG, true))); }",b67e672fb9a3306fc5cfb4b3bdbc21a85c4f757d,"@java.lang.Override public com.google.gerrit.index.query.DataSource<com.google.gerrit.server.account.AccountState> getSource(com.google.gerrit.index.query.Predicate<com.google.gerrit.server.account.AccountState> p, com.google.gerrit.index.QueryOptions opts) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.lucene.LuceneQuerySource(opts.filterFields(IndexUtils::accountFields), queryBuilder.toQuery(p), new org.apache.lucene.search.Sort(new org.apache.lucene.search.SortField(com.google.gerrit.lucene.LuceneAccountIndex.ID_SORT_FIELD, SortField.Type.STRING, false)), this::toAccountState); }",a73c6f75fb1c193aaf43f72ec102cff163a114b1,"@java.lang.Override public com.google.gerrit.index.query.DataSource<com.google.gerrit.server.account.AccountState> getSource(com.google.gerrit.index.query.Predicate<com.google.gerrit.server.account.AccountState> p, com.google.gerrit.index.QueryOptions opts) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.lucene.LuceneQuerySource(opts.filterFields(IndexUtils::accountFields), queryBuilder.toQuery(p), new org.apache.lucene.search.Sort(new org.apache.lucene.search.SortField(com.google.gerrit.lucene.LuceneAccountIndex.ID_SORT_FIELD, SortField.Type.LONG, true))); }",7b7482c1c243f17572d77846ae01bdfb0c4084b4,2017-11-16 14:51:09,2
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupById get(com.google.gerrit.reviewdb.client.AccountGroupById.Key key) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },6889d093c30401dfe00351479013563d8ca68704,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupById get(com.google.gerrit.reviewdb.client.AccountGroupById.Key key) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },43d93600e916f5f5deda202017e4fe6b072be580,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> iterateAllEntities() throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },d0de2202d2edb7cc695e80a40734f8e2f06abc1a,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> iterateAllEntities() { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },27db5340cbe2d08f3bd8f1a8230d2ff0709c296e,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> all() throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },859d8b6851e1a16474eba2aebea3040ea807587c,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> all() { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },04d5105d8b8494a8a99a863380c2c426a319e740,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> byGroup(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },e2ac013f328ebef3dc7dd6c6122a7dcd8e82d8e5,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> byGroup(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },ec643a310a76efcaa57383aba0537ac9d92dbcf9,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMember> byGroup(com.google.gerrit.reviewdb.client.AccountGroup.Id id) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },17fb2432be0a217bc498e14878b2e9e8becfad9c,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMember> byGroup(com.google.gerrit.reviewdb.client.AccountGroup.Id id) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },4f4658f04a45bf57cb07a41bf500ecf03bda8054,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroupById.Key> keys) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },7dfb03ee1597e7a439748b65352e9cf2d69a1cf9,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroupById.Key> keys) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },fcc44387233335a6f73ffdd2c90c50572279c30b,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroup.Id> keys) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },c613c546199fe8b1611a9584c42a77534d3c0cd8,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroup.Id> keys) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },9e30ea42565ffbe3a5a8eedb32d0cfdea9ced77c,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> byUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },2a4c6dfb775b16a886f12d5323fb6109ea349c91,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> byUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },601209404d28758d340fa98d727f1ca96b673f7f,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> iterateAllEntities() throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },078b8389c4dbeca99c3796c51be7062a1c2640f4,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> iterateAllEntities() { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },e5c973a69a0fe98826038c6dd2950d63bb4d3ef8,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMember> byAccount(com.google.gerrit.reviewdb.client.Account.Id id) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },56d114e7d3ff9445951906554b306dcda6876e39,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMember> byAccount(com.google.gerrit.reviewdb.client.Account.Id id) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },a0a7f8d5be632e624f3ec94e78c05be796de5899,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupName get(com.google.gerrit.reviewdb.client.AccountGroup.NameKey name) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },0b14c801641e979d1e5eead47b9089e581037395,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupName get(com.google.gerrit.reviewdb.client.AccountGroup.NameKey name) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },6c831831484fd29eb660cd935f1620bdc10d5c3b,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,"@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> byGroupInclude(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gerrit.reviewdb.client.AccountGroup.UUID incGroupUUID) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); }",9c91c4d22bc5b45a8d338cc8c8a69f7de360895b,"@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> byGroupInclude(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gerrit.reviewdb.client.AccountGroup.UUID incGroupUUID) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); }",c5b4741974775a79bd7aec5c41276b7e76a620e6,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupMember get(com.google.gerrit.reviewdb.client.AccountGroupMember.Key key) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },53ec5d4cadf4b4dbe0da8c70ed1cff142bbf168a,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupMember get(com.google.gerrit.reviewdb.client.AccountGroupMember.Key key) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },3ba8f72edb55160619cc347d6c72a69e849e68c0,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupName> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroup.NameKey> keys) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },a8f41c819a537ebb0794dddfb5ee3ea2d4fc4527,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupName> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroup.NameKey> keys) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },6f7e75ae91cb505bd3e3c4f219eb7ddbdcdaaf4b,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> byGroup(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },d93a335e78fb841ee2f1e77c8b54c18f7e3f0790,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> byGroup(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },b7e916f9915a9d886ab8bdae98b25226dcc5d2ea,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupByIdAud get(com.google.gerrit.reviewdb.client.AccountGroupByIdAud.Key key) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },0fb4361f9035ed10e8d96d9bee19c9771584a939,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupByIdAud get(com.google.gerrit.reviewdb.client.AccountGroupByIdAud.Key key) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },9ab4648654c179be859b90dba1e1413277d82d50,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key> keys) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },1cfd52786f29615b85388ae1069347dd3cc62782,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key> keys) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },cdb9dafe55081a6afb904da26e472be9f1bce52f,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupMemberAudit get(com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key key) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },3316e49d201543eb3794d60d4583f4216024fd6b,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupMemberAudit get(com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key key) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },300d77ba172485a2cbd73528133dcad70020433b,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupName> all() throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },2db11d359dec67952ac4d80aff3cc7a876fda67e,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupName> all() { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },74e4fdda81b5ef6e9c73dfca2ab0777f39ab208b,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMember> iterateAllEntities() throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },110ff84b00000e751cc3656bbf05a1cbe23cb51d,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMember> iterateAllEntities() { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },5d6189bfe4e919ce2976ab9ba7da8464c6c7fa42,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroupByIdAud.Key> keys) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },f31ecd6724c0e660b4c1f91b77e17473bfded80b,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroupByIdAud.Key> keys) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },b4f210e28bd8e4cbc6d8d306672c6deaef906ffc,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> all() throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },673e81b9c4dbba9dcc428045e16d43b48da1c093,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> all() { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },2ee12a1d6105b6a31867d1d7639b38155d1cd995,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroup get(com.google.gerrit.reviewdb.client.AccountGroup.Id id) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },2d549deda6e0b111f6e4ec815bda909c400f9603,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroup get(com.google.gerrit.reviewdb.client.AccountGroup.Id id) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },88eb37f75f1f3d85b5e512e20a6e295d64f3ddb9,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> iterateAllEntities() throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },c325cc44ba35f6a5c21285fb00a8075e7e94a030,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> iterateAllEntities() { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },072507321d07688e1566cd4b1241ecaeedeeea19,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> iterateAllEntities() throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },f0e8b913e268bb733d9d7cf7eb304d9230260e05,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> iterateAllEntities() { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },ca9f5ecd8a2f09f3dc4b29dfaac2f3736a49c034,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> byGroup(com.google.gerrit.reviewdb.client.AccountGroup.Id id) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },1e5672eb7e95ccf17915cf7db51472ac717f62a3,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> byGroup(com.google.gerrit.reviewdb.client.AccountGroup.Id id) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },82359cd862cc1083ad21d8448b4555099deb06da,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMember> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroupMember.Key> keys) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },a61ecd274eb3c82f0f754737d79de97a98cdc537,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMember> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroupMember.Key> keys) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },f791f787d31d7941257e190e7ad2b6dda1b732ac,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupName> iterateAllEntities() throws com.google.gwtorm.server.OrmException { return delegate.iterateAllEntities(); },194b42dbb8db69a316b334ef488dca53159f41d2,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupName> iterateAllEntities() { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },7f33f88a052344ac9b19b9ed4f8b8f086f9de527,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> byIncludeUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },0b275d7757334e67440fb86a27710c1f0886a2e4,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> byIncludeUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },3a89560861542fd7411eb9d60dd5dc17278b7909,2017-11-17 16:36:58,3
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,"@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> byGroupAccount(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); }",c9a4de26a96d2b13428897d813fed89f5611238f,"@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> byGroupAccount(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gerrit.reviewdb.client.Account.Id accountId) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); }",39e62783daa63295e390f7885b1b9efebe51118c,2017-11-17 16:36:58,3
139471,java_com_google_gerrit_server_group_db_GroupConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static com.google.gerrit.server.group.db.GroupConfig loadforGroup(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId id, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupUuid); groupConfig.load(rw, id); return groupConfig; }",7e5ba821f829a5c98c3c07a65c7f4e058f7e2092,@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commit(com.google.gerrit.server.git.MetaDataUpdate update) throws java.io.IOException { org.eclipse.jgit.revwalk.RevCommit c = super.commit(update); loadedGroup = java.util.Optional.of(loadedGroup.get().toBuilder().setRefState(c.toObjectId()).build()); return c; },834f581e360e28b0ff862f2101261812b64ca538,2017-11-17 17:12:29,10
139471,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test public void getAuditLog() throws java.lang.Exception { assume().that(cfg.getBoolean(""user"", null, ""readGroupsFromNoteDb"", false)).isFalse(); com.google.gerrit.extensions.api.groups.GroupApi g = gApi.groups().create(name(""group"")); java.util.List<? extends com.google.gerrit.extensions.common.GroupAuditEventInfo> auditEvents = g.auditLog(); assertThat(auditEvents).hasSize(1); assertAuditEvent(auditEvents.get(0), Type.ADD_USER, admin.id, admin.id); g.addMembers(user.username); auditEvents = g.auditLog(); assertThat(auditEvents).hasSize(2); assertAuditEvent(auditEvents.get(0), Type.ADD_USER, admin.id, user.id); g.removeMembers(user.username); auditEvents = g.auditLog(); assertThat(auditEvents).hasSize(3); assertAuditEvent(auditEvents.get(0), Type.REMOVE_USER, admin.id, user.id); java.lang.String otherGroup = name(""otherGroup""); gApi.groups().create(otherGroup); g.addGroups(otherGroup); auditEvents = g.auditLog(); assertThat(auditEvents).hasSize(4); assertAuditEvent(auditEvents.get(0), Type.ADD_GROUP, admin.id, otherGroup); g.removeGroups(otherGroup); auditEvents = g.auditLog(); assertThat(auditEvents).hasSize(5); assertAuditEvent(auditEvents.get(0), Type.REMOVE_GROUP, admin.id, otherGroup); java.sql.Timestamp lastDate = null; for (com.google.gerrit.extensions.common.GroupAuditEventInfo auditEvent : auditEvents) { if (lastDate != null) { assertThat(lastDate).isGreaterThan(auditEvent.date); } lastDate = auditEvent.date; } }",235c1588c469801b390f71de9faad4e9806df1a6,"@org.junit.Test public void getAuditLog() throws java.lang.Exception { com.google.gerrit.extensions.api.groups.GroupApi g = gApi.groups().create(name(""group"")); java.util.List<? extends com.google.gerrit.extensions.common.GroupAuditEventInfo> auditEvents = g.auditLog(); assertThat(auditEvents).hasSize(1); assertAuditEvent(auditEvents.get(0), Type.ADD_USER, admin.id, admin.id); g.addMembers(user.username); auditEvents = g.auditLog(); assertThat(auditEvents).hasSize(2); assertAuditEvent(auditEvents.get(0), Type.ADD_USER, admin.id, user.id); g.removeMembers(user.username); auditEvents = g.auditLog(); assertThat(auditEvents).hasSize(3); assertAuditEvent(auditEvents.get(0), Type.REMOVE_USER, admin.id, user.id); java.lang.String otherGroup = name(""otherGroup""); gApi.groups().create(otherGroup); g.addGroups(otherGroup); auditEvents = g.auditLog(); assertThat(auditEvents).hasSize(4); assertAuditEvent(auditEvents.get(0), Type.ADD_GROUP, admin.id, otherGroup); g.removeGroups(otherGroup); auditEvents = g.auditLog(); assertThat(auditEvents).hasSize(5); assertAuditEvent(auditEvents.get(0), Type.REMOVE_GROUP, admin.id, otherGroup); java.sql.Timestamp lastDate = null; for (com.google.gerrit.extensions.common.GroupAuditEventInfo auditEvent : auditEvents) { if (lastDate != null) { assertThat(lastDate).isGreaterThan(auditEvent.date); } lastDate = auditEvent.date; } }",e81cf8bf6d1d939678893e2d6ecca990efdf0d2d,"@org.junit.Test public void getAuditLog() throws java.lang.Exception { com.google.gerrit.extensions.api.groups.GroupApi g = gApi.groups().create(name(""group"")); java.util.List<? extends com.google.gerrit.extensions.common.GroupAuditEventInfo> auditEvents = g.auditLog(); assertThat(auditEvents).hasSize(1); assertAuditEvent(auditEvents.get(0), Type.ADD_USER, admin.id, admin.id); g.addMembers(user.username); auditEvents = g.auditLog(); assertThat(auditEvents).hasSize(2); assertAuditEvent(auditEvents.get(0), Type.ADD_USER, admin.id, user.id); g.removeMembers(user.username); auditEvents = g.auditLog(); assertThat(auditEvents).hasSize(3); assertAuditEvent(auditEvents.get(0), Type.REMOVE_USER, admin.id, user.id); java.lang.String otherGroup = name(""otherGroup""); gApi.groups().create(otherGroup); g.addGroups(otherGroup); auditEvents = g.auditLog(); assertThat(auditEvents).hasSize(4); assertAuditEvent(auditEvents.get(0), Type.ADD_GROUP, admin.id, otherGroup); g.removeGroups(otherGroup); auditEvents = g.auditLog(); assertThat(auditEvents).hasSize(5); assertAuditEvent(auditEvents.get(0), Type.REMOVE_GROUP, admin.id, otherGroup); java.lang.Thread.sleep(1000); g.addMembers(user.username); auditEvents = g.auditLog(); assertThat(auditEvents).hasSize(6); assertAuditEvent(auditEvents.get(0), Type.ADD_USER, admin.id, user.id); g.addGroups(otherGroup); auditEvents = g.auditLog(); assertThat(auditEvents).hasSize(7); assertAuditEvent(auditEvents.get(0), Type.ADD_GROUP, admin.id, otherGroup); java.sql.Timestamp lastDate = null; for (com.google.gerrit.extensions.common.GroupAuditEventInfo auditEvent : auditEvents) { if (lastDate != null) { assertThat(lastDate).isAtLeast(auditEvent.date); } lastDate = auditEvent.date; } }",7576b18a0dc0a7195e2f75d6cd45bce27f369fc0,2017-11-17 17:12:29,10
139471,java_com_google_gerrit_server_group_db_Groups.java,"public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> getMembersAudit(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { if (readFromNoteDb) { throw new com.google.gwtorm.server.OrmException(""Audit logs not yet implemented in NoteDb""); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = com.google.gerrit.server.group.db.Groups.getGroupFromReviewDb(db, groupUuid); if (!(group.isPresent())) { return com.google.common.collect.ImmutableList.of(); } return db.accountGroupMembersAudit().byGroup(group.get().getId()).toList(); }",44b3f14d3b428ce18c622dcfa62c4f01e6f86bd7,"public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> getMembersAudit(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (readFromNoteDb) { return auditLogReader.getMembersAudit(groupUuid); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = com.google.gerrit.server.group.db.Groups.getGroupFromReviewDb(db, groupUuid); if (!(group.isPresent())) { return com.google.common.collect.ImmutableList.of(); } return db.accountGroupMembersAudit().byGroup(group.get().getId()).toList(); }",c25e86b46e1b6248befe2aace1cdffdb6017d502,"public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> getMembersAudit(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (groupsMigration.readFromNoteDb()) { return auditLogReader.getMembersAudit(groupUuid); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = com.google.gerrit.server.group.db.Groups.getGroupFromReviewDb(db, groupUuid); if (!(group.isPresent())) { return com.google.common.collect.ImmutableList.of(); } java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> audits = db.accountGroupMembersAudit().byGroup(group.get().getId()).toList(); java.util.Collections.sort(audits, java.util.Comparator.comparing((com.google.gerrit.reviewdb.client.AccountGroupMemberAudit a) -> a.getAddedOn())); return audits; }",a66e8f99ebed4e0acbb3c868b214a0195b530c00,2017-11-17 17:12:29,10
139471,java_com_google_gerrit_server_group_db_Groups.java,"public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> getSubgroupsAudit(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { if (readFromNoteDb) { throw new com.google.gwtorm.server.OrmException(""Audit logs not yet implemented in NoteDb""); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = com.google.gerrit.server.group.db.Groups.getGroupFromReviewDb(db, groupUuid); if (!(group.isPresent())) { return com.google.common.collect.ImmutableList.of(); } return db.accountGroupByIdAud().byGroup(group.get().getId()).toList(); }",2cb17e8c31e8b81aaa2a4a081792834b8b789f80,"public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> getSubgroupsAudit(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (readFromNoteDb) { return auditLogReader.getSubgroupsAudit(groupUuid); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = com.google.gerrit.server.group.db.Groups.getGroupFromReviewDb(db, groupUuid); if (!(group.isPresent())) { return com.google.common.collect.ImmutableList.of(); } return db.accountGroupByIdAud().byGroup(group.get().getId()).toList(); }",6e40eda1727f610a097373fcefb00e604d08e901,"public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> getSubgroupsAudit(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (groupsMigration.readFromNoteDb()) { return auditLogReader.getSubgroupsAudit(groupUuid); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = com.google.gerrit.server.group.db.Groups.getGroupFromReviewDb(db, groupUuid); if (!(group.isPresent())) { return com.google.common.collect.ImmutableList.of(); } java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> audits = db.accountGroupByIdAud().byGroup(group.get().getId()).toList(); java.util.Collections.sort(audits, java.util.Comparator.comparing((com.google.gerrit.reviewdb.client.AccountGroupByIdAud a) -> a.getAddedOn())); return audits; }",2efa006de7c88615d27bffcaac84edbce5505bde,2017-11-17 17:12:29,10
139471,java_com_google_gerrit_server_group_db_AuditLogReader.java,,,"final com.google.common.collect.ImmutableList<T> parseAuditLog(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)); if (ref == null) { return com.google.common.collect.ImmutableList.of(); } com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = com.google.gerrit.server.group.db.GroupConfig.loadforGroup(rw, ref.getObjectId(), uuid).getLoadedGroup().get().getId(); rw.reset(); rw.markStart(rw.parseCommit(ref.getObjectId())); rw.setRetainBody(true); rw.sort(RevSort.REVERSE); com.google.common.collect.ImmutableList.Builder<T> result = com.google.common.collect.ImmutableList.builder(); org.eclipse.jgit.revwalk.RevCommit c; while ((c = rw.next()) != null) { parse(uuid, c).ifPresent(( pc) -> visit(groupId, pc, result)); } return result.build(); } }",62ac4b87a4acdd54d447554bdfe49664351e0f7b,"final com.google.common.collect.ImmutableList<T> parseAuditLog(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)); if (ref == null) { return com.google.common.collect.ImmutableList.of(); } com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repo, uuid).getLoadedGroup().get().getId(); rw.reset(); rw.markStart(rw.parseCommit(ref.getObjectId())); rw.setRetainBody(true); rw.sort(RevSort.COMMIT_TIME_DESC, true); rw.sort(RevSort.REVERSE, true); com.google.common.collect.ImmutableList.Builder<T> result = com.google.common.collect.ImmutableList.builder(); org.eclipse.jgit.revwalk.RevCommit c; while ((c = rw.next()) != null) { parse(uuid, c).ifPresent(( pc) -> visit(groupId, pc, result)); } return result.build(); } }",2f6a0e03992452341289b0079f1b42194c1554d1,2017-11-17 17:12:29,10
142852,java_com_google_gerrit_server_group_db_Groups.java,"public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> getSubgroupsAudit(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (groupsMigration.readFromNoteDb()) { return auditLogReader.getSubgroupsAudit(groupUuid); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = com.google.gerrit.server.group.db.Groups.getGroupFromReviewDb(db, groupUuid); if (!(group.isPresent())) { return com.google.common.collect.ImmutableList.of(); } java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> audits = db.accountGroupByIdAud().byGroup(group.get().getId()).toList(); java.util.Collections.sort(audits, java.util.Comparator.comparing((com.google.gerrit.reviewdb.client.AccountGroupByIdAud a) -> a.getAddedOn())); return audits; }",2efa006de7c88615d27bffcaac84edbce5505bde,"public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> getSubgroupsAudit(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (groupsMigration.readFromNoteDb()) { return auditLogReader.getSubgroupsAudit(groupUuid); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = com.google.gerrit.server.group.db.Groups.getGroupFromReviewDb(db, groupUuid); if (!(group.isPresent())) { return com.google.common.collect.ImmutableList.of(); } java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> audits = db.accountGroupByIdAud().byGroup(group.get().getId()).toList(); return audits; }",7bcf5ecbfe2d07d7cfb0b0de902e46db2731ce50,"public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> getSubgroupsAudit(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (groupsMigration.readFromNoteDb()) { return auditLogReader.getSubgroupsAudit(groupUuid); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = com.google.gerrit.server.group.db.Groups.getGroupFromReviewDb(db, groupUuid); if (!(group.isPresent())) { return com.google.common.collect.ImmutableList.of(); } return db.accountGroupByIdAud().byGroup(group.get().getId()).toList(); }",32fad3e91fbe923fd662f2de3458ca556d6e98be,2017-11-20 08:27:02,2
142852,java_com_google_gerrit_server_group_db_Groups.java,"public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> getMembersAudit(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (groupsMigration.readFromNoteDb()) { return auditLogReader.getMembersAudit(groupUuid); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = com.google.gerrit.server.group.db.Groups.getGroupFromReviewDb(db, groupUuid); if (!(group.isPresent())) { return com.google.common.collect.ImmutableList.of(); } java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> audits = db.accountGroupMembersAudit().byGroup(group.get().getId()).toList(); java.util.Collections.sort(audits, java.util.Comparator.comparing((com.google.gerrit.reviewdb.client.AccountGroupMemberAudit a) -> a.getAddedOn())); return audits; }",a66e8f99ebed4e0acbb3c868b214a0195b530c00,"public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> getMembersAudit(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (groupsMigration.readFromNoteDb()) { return auditLogReader.getMembersAudit(groupUuid); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = com.google.gerrit.server.group.db.Groups.getGroupFromReviewDb(db, groupUuid); if (!(group.isPresent())) { return com.google.common.collect.ImmutableList.of(); } java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> audits = db.accountGroupMembersAudit().byGroup(group.get().getId()).toList(); return audits; }",2e98ae65cc66647df991f61eb99a1ff0764201dc,"public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> getMembersAudit(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (groupsMigration.readFromNoteDb()) { return auditLogReader.getMembersAudit(groupUuid); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = com.google.gerrit.server.group.db.Groups.getGroupFromReviewDb(db, groupUuid); if (!(group.isPresent())) { return com.google.common.collect.ImmutableList.of(); } return db.accountGroupMembersAudit().byGroup(group.get().getId()).toList(); }",9eaf0fc381173850651884e1f6f058a295878693,2017-11-20 08:27:02,2
