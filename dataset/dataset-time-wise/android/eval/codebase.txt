public void sendEnvelopeWithStatus(java.lang.String contents, android.os.Message response) { mCi.sendEnvelopeWithStatus(contents, response); }
public void iccTransmitApduBasicChannel(int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { mCi.iccTransmitApduBasicChannel(cla, command, p1, p2, p3, data, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_TRANSMIT_APDU_BASIC_CHANNEL_DONE, response)); }
public boolean areCarrierPriviligeRulesLoaded() { return ((mCarrierPrivilegeRules) == null) || (mCarrierPrivilegeRules.areCarrierPriviligeRulesLoaded()); }
public int getCarrierPrivilegeStatus(android.content.pm.PackageInfo packageInfo) { return (mCarrierPrivilegeRules) == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : mCarrierPrivilegeRules.getCarrierPrivilegeStatus(packageInfo); }
public void iccOpenLogicalChannel(java.lang.String AID, int p2, android.os.Message response) { loglocal(((((((("Open Logical Channel: " + AID) + " , ") + p2) + " by pid:") + (android.os.Binder.getCallingPid())) + " uid:") + (android.os.Binder.getCallingUid()))); mCi.iccOpenLogicalChannel(AID, p2, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_OPEN_LOGICAL_CHANNEL_DONE, response)); }
public boolean resetAppWithAid(java.lang.String aid) { synchronized(mLock) { boolean changed = false; for (int i = 0; i < (mUiccApplications.length); i++) { if (((mUiccApplications[i]) != null) && ((aid == null) || (aid.equals(mUiccApplications[i].getAid())))) { mUiccApplications[i].dispose(); mUiccApplications[i] = null; changed = true; } } return changed; } }
public void iccCloseLogicalChannel(int channel, android.os.Message response) { loglocal(("Close Logical Channel: " + channel)); mCi.iccCloseLogicalChannel(channel, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_CLOSE_LOGICAL_CHANNEL_DONE, response)); }
public int getCarrierPrivilegeStatus(android.content.pm.PackageManager packageManager, java.lang.String packageName) { return (mCarrierPrivilegeRules) == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : mCarrierPrivilegeRules.getCarrierPrivilegeStatus(packageManager, packageName); }
public void iccTransmitApduLogicalChannel(int channel, int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { mCi.iccTransmitApduLogicalChannel(channel, cla, command, p1, p2, p3, data, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_TRANSMIT_APDU_LOGICAL_CHANNEL_DONE, response)); }
public java.util.List<java.lang.String> getCarrierPackageNamesForIntent(android.content.pm.PackageManager packageManager, android.content.Intent intent) { return (mCarrierPrivilegeRules) == null ? null : mCarrierPrivilegeRules.getCarrierPackageNamesForIntent(packageManager, intent); }
public int getNumApplications() { int count = 0; for (com.android.internal.telephony.uicc.UiccCardApplication a : mUiccApplications) { if (a != null) { count++; } } return count; }
public com.android.internal.telephony.cat.CatService getCatService() { return mCatService; }
public boolean hasCarrierPrivilegeRules() { return ((mCarrierPrivilegeRules) != null) && (mCarrierPrivilegeRules.hasCarrierPrivilegeRules()); }
public java.lang.String getIccId() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir != null) && ((ir.getIccId()) != null)) { return ir.getIccId(); } } } return null; }
public void iccExchangeSimIO(int fileID, int command, int p1, int p2, int p3, java.lang.String pathID, android.os.Message response) { mCi.iccIO(command, fileID, pathID, p1, p2, p3, null, null, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_SIM_IO_DONE, response)); }
public int getCarrierPrivilegeStatusForCurrentTransaction(android.content.pm.PackageManager packageManager) { return (mCarrierPrivilegeRules) == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : mCarrierPrivilegeRules.getCarrierPrivilegeStatusForCurrentTransaction(packageManager); }
public int getCarrierPrivilegeStatus(android.content.pm.Signature signature, java.lang.String packageName) { return (mCarrierPrivilegeRules) == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : mCarrierPrivilegeRules.getCarrierPrivilegeStatus(signature, packageName); }


public void test_addAttributesLjava_util_MapII() { java.text.AttributedString as = new java.text.AttributedString("test"); java.util.Map<java.text.AttributedCharacterIterator.Attribute, java.lang.String> whm = new java.util.WeakHashMap<java.text.AttributedCharacterIterator.Attribute, java.lang.String>(); try { whm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute("test1"), "value1"); whm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute("test2"), "value2"); whm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute("test3"), "value3"); as.addAttributes(whm, 0, 3); } catch (java.lang.Exception e) { fail(("Unexpected exception " + (e.toString()))); } try { as.addAttributes(null, 0, 3); fail("Expected NullPointerException was not thrown"); } catch (java.lang.NullPointerException e) { } try { as.addAttributes(whm, 0, 0); fail("Expected IllegalArgumentException was not thrown"); } catch (java.lang.IllegalArgumentException e) { } }
private boolean notifyIfInactive(com.android.vts.entity.TestEntity test, java.lang.String link, java.util.List<java.lang.String> emails, java.util.List<javax.mail.Message> messages) { long now = java.util.concurrent.TimeUnit.MILLISECONDS.toMicros(java.lang.System.currentTimeMillis()); long diff = now - (test.timestamp); if (((diff > (java.util.concurrent.TimeUnit.DAYS.toMicros(1))) && (diff < (java.util.concurrent.TimeUnit.DAYS.toMicros(8)))) && ((diff % (java.util.concurrent.TimeUnit.DAYS.toMicros(1))) < (java.util.concurrent.TimeUnit.MINUTES.toMicros(3)))) { java.util.Date lastUpload = new java.util.Date(java.util.concurrent.TimeUnit.MICROSECONDS.toMillis(test.timestamp)); java.lang.String uploadTimeString = new java.text.SimpleDateFormat("MM/dd/yyyy HH:mm:ss").format(lastUpload); java.lang.String subject = "Warning! Inactive test: " + test; java.lang.String body = ((((("Hello,<br><br>Test \"" + test) + "\" is inactive. ") + "No new data has been uploaded since ") + uploadTimeString) + ".") + (getFooter(link)); try { messages.add(com.android.vts.util.EmailHelper.composeEmail(emails, subject, body)); return true; } catch (javax.mail.MessagingException | java.io.UnsupportedEncodingException e) { logger.log(java.util.logging.Level.WARNING, "Error composing email : ", e); } } return false; }
private void disableWifiIpServingLocked(int apState) { if (com.android.server.connectivity.Tethering.DBG) android.util.Log.d(com.android.server.connectivity.Tethering.TAG, ("Canceling WiFi tethering request - AP_STATE=" + apState)); for (int i = 0; i < (mTetherStates.size()); i++) { com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism = mTetherStates.valueAt(i).stateMachine; if ((tism.interfaceType()) == (android.net.ConnectivityManager.TETHERING_WIFI)) { tism.sendMessage(TetherInterfaceStateMachine.CMD_TETHER_UNREQUESTED); break; } } mWifiTetherRequested = false; }
protected void setUpstreamByType(int upType) { final android.net.ConnectivityManager cm = getConnectivityManager(); android.net.Network network = null; java.lang.String iface = null; if (upType != (android.net.ConnectivityManager.TYPE_NONE)) { android.net.LinkProperties linkProperties = cm.getLinkProperties(upType); if (linkProperties != null) { android.util.Log.i(com.android.server.connectivity.Tethering.TAG, ("Finding IPv4 upstream interface on: " + linkProperties)); android.net.RouteInfo ipv4Default = android.net.RouteInfo.selectBestRoute(linkProperties.getAllRoutes(), ANY); if (ipv4Default != null) { iface = ipv4Default.getInterface(); android.util.Log.i(com.android.server.connectivity.Tethering.TAG, ("Found interface " + (ipv4Default.getInterface()))); } else { android.util.Log.i(com.android.server.connectivity.Tethering.TAG, "No IPv4 upstream interface, giving up."); } } if (iface != null) { network = cm.getNetworkForType(upType); if (network == null) { android.util.Log.e(com.android.server.connectivity.Tethering.TAG, (("No Network for upstream type " + upType) + "!")); } setDnsForwarders(network, linkProperties); } } notifyTetheredOfNewUpstreamIface(iface); android.net.NetworkState ns = mUpstreamNetworkMonitor.lookup(network); if ((ns != null) && (pertainsToCurrentUpstream(ns))) { handleNewUpstreamNetworkState(ns); } else if ((mCurrentUpstreamIface) == null) { handleNewUpstreamNetworkState(null); } }
@java.lang.Override public java.util.Set<vogar.tasks.Task> installTasks() { java.util.Set<vogar.tasks.Task> result = new java.util.HashSet<vogar.tasks.Task>(); for (java.io.File classpathElement : run.classpath.getElements()) { java.lang.String name = run.basenameOfJar(classpathElement); java.io.File localDex = run.localDexFile(name); result.add(createCreateDexJarTask(run.classpath, classpathElement, name, null, localDex)); } result.add(new vogar.tasks.MkdirTask(run.mkdir, dalvikCache())); return result; }
@java.lang.Override protected vogar.Result execute() throws java.lang.Exception { vogar.Classpath cp = vogar.Classpath.of(jar); if ((benchmark) && ((action) != null)) { cp.addAll(classpath); } androidSdk.dex(multidex, localDex, cp); return vogar.Result.SUCCESS; }
@java.lang.Override public java.util.Set<vogar.tasks.Task> installActionTasks(vogar.Action action, java.io.File jar) { java.io.File localDexFile = run.localDexFile(action.getName()); vogar.tasks.Task createDexJarTask = createCreateDexJarTask(vogar.Classpath.of(jar), jar, action.getName(), action, localDexFile); return java.util.Collections.singleton(createDexJarTask); }
private vogar.tasks.Task newCreateDexJarTask(vogar.Classpath classpath, java.io.File classpathElement, java.lang.String name, vogar.Action action, java.io.File localDex) { vogar.tasks.Task dex; if (run.useJack) { dex = new vogar.android.JackDexTask(run, classpath, run.benchmark, name, classpathElement, action, localDex); } else { dex = new vogar.android.DexTask(run.androidSdk, classpath, run.benchmark, name, classpathElement, action, localDex, run.multidex); } return dex; }
private void addCreateDexJarAndPushTasks(java.util.Set<vogar.tasks.Task> tasks, java.lang.String name, java.io.File jar, vogar.Action action) { java.io.File localDex = run.localDexFile(name); java.io.File deviceDex = run.targetDexFile(name); vogar.tasks.Task createDexJarTask = newCreateDexJarTask(run.classpath, jar, name, action, localDex); tasks.add(createDexJarTask); tasks.add(run.target.pushTask(localDex, deviceDex).afterSuccess(createDexJarTask)); }
private vogar.tasks.Task createCreateDexJarTask(vogar.Classpath classpath, java.io.File classpathElement, java.lang.String name, vogar.Action action, java.io.File localDex) { vogar.tasks.Task dex; if (run.useJack) { dex = new vogar.android.JackDexTask(run, classpath, run.benchmark, name, classpathElement, action, localDex); } else { dex = new vogar.android.DexTask(run.androidSdk, classpath, run.benchmark, name, classpathElement, action, localDex, run.multidex); } return dex; }
private java.io.File createDex(vogar.Action action, java.io.File actionJar) { java.io.File dex = run.localFile(action, "classes.dex"); vogar.Classpath classesToDex = vogar.Classpath.of(actionJar); classesToDex.addAll(run.classpath); if (run.useJack) { throw new java.lang.UnsupportedOperationException("Jack support for --mode=activity not yet implemented"); } run.androidSdk.dex(run.multidex, dex, classesToDex); return dex; }
public void startStreaming(java.lang.String serviceId, android.telephony.mbms.IStreamingServiceCallback callback) { mStreamStates.put(serviceId, new com.android.phone.testapps.embmsmw.AppActiveStreams.StreamCallbackWithState(callback, android.telephony.mbms.StreamingService.STATE_STARTED)); try { callback.streamStateChanged(StreamingService.STATE_STARTED); } catch (android.os.RemoteException e) { dispose(serviceId); } }








@java.lang.Override public int requestNetworkScan(int subId, android.telephony.NetworkScanRequest request, android.os.Messenger messenger, android.os.IBinder binder) { throw new java.lang.UnsupportedOperationException("To be implemented..."); }






@java.lang.Override public int hashCode() { return (((scanStatus) * 31) + ((scanError) * 23)) + ((networkInfos.hashCode()) * 37); }
void onClientPhyRead(int connId, int txPhy, int rxPhy, int status) throws android.os.RemoteException { if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ((("onClientPhyRead() - connId=" + connId) + ", status=") + status)); java.lang.String address = mClientMap.addressByConnId(connId); if (address == null) return; com.android.bluetooth.gatt.ClientMap.App app = mClientMap.getByConnId(connId); if (app == null) return; app.callback.onPhyRead(address, txPhy, rxPhy, status); }
void onClientPhyUpdate(int connId, int txPhy, int rxPhy, int status) throws android.os.RemoteException { if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ((("onClientPhyUpdate() - connId=" + connId) + ", status=") + status)); java.lang.String address = mClientMap.addressByConnId(connId); if (address == null) return; com.android.bluetooth.gatt.ClientMap.App app = mClientMap.getByConnId(connId); if (app == null) return; app.callback.onPhyUpdate(address, txPhy, rxPhy, status); }
void onServerPhyUpdate(int connId, int txPhy, int rxPhy, int status) throws android.os.RemoteException { if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ((("onServerPhyUpdate() - connId=" + connId) + ", status=") + status)); java.lang.String address = mServerMap.addressByConnId(connId); if (address == null) return; com.android.bluetooth.gatt.ServerMap.App app = mServerMap.getByConnId(connId); if (app == null) return; app.callback.onPhyUpdate(address, txPhy, rxPhy, status); }
public static void main(java.lang.String[] args) throws java.lang.Exception { int alloc1 = 1; final java.lang.Class<?> vm_runtime = java.lang.Class.forName("dalvik.system.VMRuntime"); final java.lang.reflect.Method get_runtime = vm_runtime.getDeclaredMethod("getRuntime"); final java.lang.Object runtime = get_runtime.invoke(null); final java.lang.reflect.Method clear_growth_limit = vm_runtime.getDeclaredMethod("clearGrowthLimit"); java.util.List<byte[]> l = new java.util.ArrayList<byte[]>(); try { while (true) { l.add(new byte[1048576]); alloc1++; } } catch (java.lang.OutOfMemoryError e) { l = null; } clear_growth_limit.invoke(runtime); int alloc2 = 1; l = new java.util.ArrayList<byte[]>(); try { while (true) { l.add(new byte[1048576]); alloc2++; } } catch (java.lang.OutOfMemoryError e2) { l = null; if (alloc1 > alloc2) { java.lang.System.out.println(((((("ERROR: Allocated less memory after growth" + "limit cleared (") + alloc1) + " MBs > ") + alloc2) + " MBs")); java.lang.System.exit(1); } } java.lang.System.out.println("Test complete"); }
private boolean pushUpstreamParameters() { if ((mUpstreamLinkProperties) == null) { return mHwInterface.setUpstreamParameters(null, null, null, null); } final java.lang.String iface = mUpstreamLinkProperties.getInterfaceName(); final java.util.ArrayList<java.lang.String> v6gateways = new java.util.ArrayList<>(); java.lang.String v4addr = null; java.lang.String v4gateway = null; for (java.net.InetAddress ip : mUpstreamLinkProperties.getAddresses()) { if (ip instanceof java.net.Inet4Address) { v4addr = ip.getHostAddress(); break; } } for (android.net.RouteInfo ri : mUpstreamLinkProperties.getRoutes()) { if (!(ri.hasGateway())) continue; final java.lang.String gateway = ri.getGateway().getHostAddress(); if (ri.isIPv4Default()) { v4gateway = gateway; } else if (ri.isIPv6Default()) { v6gateways.add(gateway); } } return mHwInterface.setUpstreamParameters(iface, v4addr, v4gateway, v6gateways); }
@java.lang.Override public void updateTimeout(android.hardware.tetheroffload.control.V1_0.NatTimeoutUpdate params) { handler.post(() -> { controlCb.onNatTimeoutUpdate(params.proto, params.src.addr, params.src.port, params.dst.addr, params.dst.port); }); }






@java.lang.Override public void enter() { if (!(configureIfaceIp(true))) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_IFACE_CFG_ERROR; return; } try { mNMService.tetherInterface(mIfaceName); } catch (java.lang.Exception e) { mLog.e(("Error Tethering: " + e)); mLastError = android.net.ConnectivityManager.TETHER_ERROR_TETHER_IFACE_ERROR; return; } if (!(mIPv6TetherSvc.start())) { mLog.e("Failed to start IPv6TetheringInterfaceServices"); return; } }
private void notifyLinkPropertiesChanged(java.lang.String iface, com.android.server.connectivity.tethering.TetherInterfaceStateMachine who, android.net.LinkProperties newLp) { final int state; synchronized(mPublicSync) { final com.android.server.connectivity.Tethering.TetherState tetherState = mTetherStates.get(iface); if ((tetherState != null) && (tetherState.stateMachine.equals(who))) { state = tetherState.lastState; } else { mLog.log(("got notification from stale iface " + iface)); return; } } mLog.log(java.lang.String.format("OBSERVED LinkProperties update iface=%s state=%s", iface, state)); final int which = com.android.server.connectivity.Tethering.TetherMasterSM.EVENT_IFACE_UPDATE_LINKPROPERTIES; mTetherMasterSM.sendMessage(which, state, 0, newLp); }
public void stop() { mUpstreamLinkProperties = null; mHwInterface.stopOffloadControl(); mControlInitialized = false; mConfigInitialized = false; }
@java.lang.Override public boolean processMessage(android.os.Message message) { maybeLogMessage(this, message.what); switch (message.what) { case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_TETHER_REQUESTED : mLastError = android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR; switch (message.arg1) { case IControlsTethering.STATE_LOCAL_ONLY : transitionTo(mLocalHotspotState); break; case IControlsTethering.STATE_TETHERED : transitionTo(mTetheredState); break; default : mLog.e("Invalid tethering interface serving state specified."); } break; case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_INTERFACE_DOWN : transitionTo(mUnavailableState); break; case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_IPV6_TETHER_UPDATE : mIPv6TetherSvc.updateUpstreamIPv6LinkProperties(((android.net.LinkProperties) (message.obj))); break; default : return NOT_HANDLED; } return HANDLED; }
@java.lang.Override public void exit() { mIPv6TetherSvc.stop(); try { mNMService.untetherInterface(mIfaceName); } catch (java.lang.Exception e) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_UNTETHER_IFACE_ERROR; mLog.e(("Failed to untether interface: " + e)); } configureIfaceIp(false); }
private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { android.net.ConnectivityManager.checkCallbackNotNull(callback); com.android.internal.util.Preconditions.checkArgument(((action == (android.net.ConnectivityManager.REQUEST)) || (need != null)), "null NetworkCapabilities"); final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { if (callback.isRegistered()) { android.util.Log.e(android.net.ConnectivityManager.TAG, "NetworkCallback was already registered"); } android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throw android.net.ConnectivityManager.convertServiceException(e); } return request; }
public void unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback networkCallback) { android.net.ConnectivityManager.checkCallbackNotNull(networkCallback); final java.util.List<android.net.NetworkRequest> reqs = new java.util.ArrayList<>(); synchronized(android.net.ConnectivityManager.sCallbacks) { com.android.internal.util.Preconditions.checkArgument(networkCallback.isRegistered(), "NetworkCallback was not registered"); for (java.util.Map.Entry<android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback> e : android.net.ConnectivityManager.sCallbacks.entrySet()) { if ((e.getValue()) == networkCallback) { reqs.add(e.getKey()); } } for (android.net.NetworkRequest r : reqs) { try { mService.releaseNetworkRequest(r); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } android.net.ConnectivityManager.sCallbacks.remove(r); } networkCallback.networkRequest = null; } }
private void done(com.android.captiveportallogin.CaptivePortalLoginActivity.Result result) { if (com.android.captiveportallogin.CaptivePortalLoginActivity.DBG) { android.util.Log.d(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, java.lang.String.format("Result %s for %s", result.name(), mUrl.toString())); } if ((mNetworkCallback) != null) { mCm.unregisterNetworkCallback(mNetworkCallback); mNetworkCallback = null; } logMetricsEvent(result.metricsEvent); switch (result) { case DISMISSED : mCaptivePortal.reportCaptivePortalDismissed(); break; case UNWANTED : mCaptivePortal.ignoreNetwork(); break; case WANTED_AS_IS : mCaptivePortal.useNetwork(); break; } finishAndRemoveTask(); }
@java.lang.Override public void onDestroy() { super.onDestroy(); if ((mNetworkCallback) != null) { mCm.unregisterNetworkCallback(mNetworkCallback); mNetworkCallback = null; } if (mLaunchBrowser) { for (int i = 0; i < 5; i++) { if (mNetwork.equals(mCm.getActiveNetwork())) break; try { java.lang.Thread.sleep(100); } catch (java.lang.InterruptedException e) { } } final java.lang.String url = mUrl.toString(); if (com.android.captiveportallogin.CaptivePortalLoginActivity.DBG) { android.util.Log.d(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, ("starting activity with intent ACTION_VIEW for " + url)); } startActivity(new android.content.Intent(android.content.Intent.ACTION_VIEW, android.net.Uri.parse(url))); } }
private static void printUsage() { java.lang.System.out.println("Usage:"); java.lang.System.out.println((("\t" + (com.android.timezone.distro.tools.CreateTimeZoneDistro.class.getName())) + " <tzupdate.properties file> <output file>")); }




@java.lang.SuppressWarnings("unchecked") private java.util.List<java.lang.Class<? extends junit.framework.TestCase>> selectTestClasses(java.util.Set<java.lang.Class<?>> allClasses) { java.util.List<java.lang.Class<? extends junit.framework.TestCase>> testClasses = new java.util.ArrayList<java.lang.Class<? extends junit.framework.TestCase>>(); for (java.lang.Class<?> testClass : select(allClasses, new android.test.suitebuilder.TestGrouping.TestCasePredicate())) { testClasses.add(((java.lang.Class<? extends junit.framework.TestCase>) (testClass))); } return testClasses; }
private void responseScanStatus(android.hardware.radio.V1_0.RadioResponseInfo responseInfo) { com.android.internal.telephony.RILRequest rr = mRil.processResponse(responseInfo); if (rr != null) { com.android.internal.telephony.NetworkScanResult nsr = new com.android.internal.telephony.NetworkScanResult(0, responseInfo.error, null); com.android.internal.telephony.RadioResponse.sendMessageResponse(rr.mResult, nsr); mRil.processResponseDone(rr, responseInfo, nsr); } }
private void stopScanDone(android.os.AsyncResult ar) { com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo nsri = ((com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo) (ar.userObj)); if (nsri == null) { android.util.Log.e(com.android.internal.telephony.NetworkScanRequestTracker.TAG, "EVENT_STOP_NETWORK_SCAN_DONE: nsri is null"); return; } if (((ar.exception) == null) && ((ar.result) != null)) { com.android.internal.telephony.NetworkScanResult nsr = ((com.android.internal.telephony.NetworkScanResult) (ar.result)); deleteScanAndMayNotify(nsri, rilErrorToScanError(nsr.scanError), true); } else { logEmptyResultOrException(ar); deleteScanAndMayNotify(nsri, NetworkScan.ERROR_RIL_ERROR, true); } nsri.mPhone.mCi.unregisterForNetworkScanResult(mHandler); }
private synchronized void startScanDone(android.os.AsyncResult ar) { com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo nsri = ((com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo) (ar.userObj)); if (nsri == null) { android.util.Log.e(com.android.internal.telephony.NetworkScanRequestTracker.TAG, "EVENT_START_NETWORK_SCAN_DONE: nsri is null"); return; } if (((mLiveRequestInfo) == null) || ((nsri.mScanId) != (mLiveRequestInfo.mScanId))) { android.util.Log.e(com.android.internal.telephony.NetworkScanRequestTracker.TAG, "EVENT_START_NETWORK_SCAN_DONE: nsri does not match mLiveRequestInfo"); return; } if (((ar.exception) == null) && ((ar.result) != null)) { com.android.internal.telephony.NetworkScanResult nsr = ((com.android.internal.telephony.NetworkScanResult) (ar.result)); if ((nsr.scanError) == (android.telephony.NetworkScan.SUCCESS)) { nsri.mPhone.mCi.registerForNetworkScanResult(mHandler, com.android.internal.telephony.NetworkScanRequestTracker.EVENT_RECEIVE_NETWORK_SCAN_RESULT, nsri); } else { deleteScanAndMayNotify(nsri, rilErrorToScanError(nsr.scanError), true); } } else { logEmptyResultOrException(ar); deleteScanAndMayNotify(nsri, NetworkScan.ERROR_RIL_ERROR, true); } }

private boolean startIPv6() { try { mNwService.setInterfaceIpv6PrivacyExtensions(mInterfaceName, true); mNwService.enableIpv6(mInterfaceName); } catch (android.os.RemoteException re) { logError("Unable to change interface settings: %s", re); return false; } catch (java.lang.IllegalStateException ie) { logError("Unable to change interface settings: %s", ie); return false; } return true; }

public void cleanup() { mRemoteDevices = null; if ((mProfileConnectionState) != null) { mProfileConnectionState.clear(); mProfileConnectionState = null; } mService.unregisterReceiver(mReceiver); mService = null; mBondedDevices.clear(); }









com.android.dx.dex.file.IndexedItem findItemOrNull(com.android.dx.rop.cst.Constant cst) { com.android.dx.dex.file.IndexedItem item; if (cst instanceof com.android.dx.rop.cst.CstString) { return stringIds.get(cst); } else if (cst instanceof com.android.dx.rop.cst.CstType) { return typeIds.get(cst); } else if (cst instanceof com.android.dx.rop.cst.CstBaseMethodRef) { return methodIds.get(cst); } else if (cst instanceof com.android.dx.rop.cst.CstFieldRef) { return fieldIds.get(cst); } else if (cst instanceof com.android.dx.rop.cst.CstProtoRef) { return protoIds.get(cst); } else { return null; } }

@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.CstInsn)) { return false; } com.android.dx.dex.code.CstInsn ci = ((com.android.dx.dex.code.CstInsn) (insn)); int cpi = ci.getIndex(); if (!(unsignedFitsInShort(cpi))) { return false; } com.android.dx.rop.cst.Constant cst = ci.getConstant(); if (!((cst instanceof com.android.dx.rop.cst.CstMethodRef) || (cst instanceof com.android.dx.rop.cst.CstType))) { return false; } com.android.dx.rop.code.RegisterSpecList regs = ci.getRegisters(); return (com.android.dx.dex.code.form.Form35c.wordCount(regs)) >= 0; }


@java.lang.Override public java.lang.String toHuman() { return toString(); }


public static com.android.dx.rop.cst.CstMethodHandle make(int kind, com.android.dx.rop.cst.Constant ref) { return new com.android.dx.rop.cst.CstMethodHandle(kind, ref); }

@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.CstInsn)) { return false; } com.android.dx.dex.code.CstInsn ci = ((com.android.dx.dex.code.CstInsn) (insn)); int cpi = ci.getIndex(); com.android.dx.rop.cst.Constant cst = ci.getConstant(); if (!(unsignedFitsInShort(cpi))) { return false; } if (!((cst instanceof com.android.dx.rop.cst.CstMethodRef) || (cst instanceof com.android.dx.rop.cst.CstType))) { return false; } com.android.dx.rop.code.RegisterSpecList regs = ci.getRegisters(); int sz = regs.size(); return ((regs.size()) == 0) || (((isRegListSequential(regs)) && (unsignedFitsInShort(regs.get(0).getReg()))) && (unsignedFitsInByte(regs.getWordCount()))); }

private void updateCurrentMediaState(boolean registering) { com.android.bluetooth.avrcp.Avrcp.MediaAttributes currentAttributes; android.media.session.PlaybackState newState = null; synchronized(this) { if ((mMediaController) == null) { boolean isPlaying = ((mA2dpState) == (android.bluetooth.BluetoothA2dp.STATE_PLAYING)) && (mAudioManager.isMusicActive()); android.media.session.PlaybackState.Builder builder = new android.media.session.PlaybackState.Builder(); if (isPlaying) { builder.setState(PlaybackState.STATE_PLAYING, PlaybackState.PLAYBACK_POSITION_UNKNOWN, 1.0F); } else { builder.setState(PlaybackState.STATE_PAUSED, PlaybackState.PLAYBACK_POSITION_UNKNOWN, 0.0F); } newState = builder.build(); currentAttributes = new com.android.bluetooth.avrcp.Avrcp.MediaAttributes(null); } else { newState = mMediaController.getPlaybackState(); currentAttributes = new com.android.bluetooth.avrcp.Avrcp.MediaAttributes(mMediaController.getMetadata()); } } long newQueueId = android.media.session.MediaSession.QueueItem.UNKNOWN_ID; if (newState != null) newQueueId = newState.getActiveQueueItemId(); android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ((((("Media update: id " + (mLastQueueId)) + "➡") + newQueueId) + "? ") + (currentAttributes.toString()))); if (registering || (((newQueueId == (-1)) || (newQueueId != (mLastQueueId))) && (!(currentAttributes.equals(mMediaAttributes))))) { sendTrackChangedRsp(registering); mMediaAttributes = currentAttributes; mLastQueueId = newQueueId; } updatePlaybackState(newState); }













private void deleteTestFiles(@javax.annotation.Nonnegative com.android.ddmlib.IDevice device, @javax.annotation.Nonnull java.io.File testDir) throws com.android.jack.test.runner.RuntimeRunnerException { java.lang.String testDirName = testDir.getName(); try { executeShellCommand(("rm -rf " + (testDir.getAbsolutePath())), device); executeShellCommand((("find dalvik-cache -name '*" + testDirName) + "*' -exec rm -rf {} +"), device); } catch (com.android.ddmlib.TimeoutException | com.android.ddmlib.AdbCommandRejectedException | com.android.ddmlib.ShellCommandUnresponsiveException | java.io.IOException e) { throw new com.android.jack.test.runner.RuntimeRunnerException(e); } }
@org.junit.Test public void requestInstall_asyncSuccess() throws java.lang.Exception { configureCallerHasPermission(); android.os.ParcelFileDescriptor parcelFileDescriptor = createFakeParcelFileDescriptor(); byte[] expectedContent = com.android.server.timezone.RulesManagerServiceTest.createArbitraryBytes(1000); configureParcelFileDescriptorReadSuccess(parcelFileDescriptor, expectedContent); com.android.server.timezone.CheckToken token = createArbitraryToken(); byte[] tokenBytes = token.toByteArray(); com.android.server.timezone.RulesManagerServiceTest.TestCallback callback = new com.android.server.timezone.RulesManagerServiceTest.TestCallback(); assertEquals(RulesManager.SUCCESS, mRulesManagerService.requestInstall(parcelFileDescriptor, tokenBytes, callback)); callback.assertNoResultReceived(); verifyNoInstallerCallsMade(); verifyNoPackageTrackerCallsMade(); com.android.timezone.distro.TimeZoneDistro expectedDistro = new com.android.timezone.distro.TimeZoneDistro(expectedContent); configureStageInstallExpectation(expectedDistro, TimeZoneDistroInstaller.INSTALL_SUCCESS); mFakeExecutor.simulateAsyncExecutionOfLastCommand(); verifyStageInstallCalled(expectedDistro); verifyPackageTrackerCalled(token, true); callback.assertResultReceived(Callback.SUCCESS); }
@org.junit.Test public void getRulesState_operationInProgress() throws java.lang.Exception { configureCallerHasPermission(); java.lang.String systemRulesVersion = "2016a"; java.lang.String installedRulesVersion = "2016b"; int revision = 3; configureDeviceSystemRulesVersion(systemRulesVersion); com.android.timezone.distro.DistroVersion installedDistroVersion = new com.android.timezone.distro.DistroVersion(com.android.timezone.distro.DistroVersion.CURRENT_FORMAT_MAJOR_VERSION, ((com.android.timezone.distro.DistroVersion.CURRENT_FORMAT_MINOR_VERSION) - 1), installedRulesVersion, revision); configureInstalledDistroVersion(installedDistroVersion); byte[] expectedContent = com.android.server.timezone.RulesManagerServiceTest.createArbitraryBytes(1000); android.os.ParcelFileDescriptor parcelFileDescriptor = createFakeParcelFileDescriptor(); configureParcelFileDescriptorReadSuccess(parcelFileDescriptor, expectedContent); byte[] tokenBytes = createArbitraryTokenBytes(); android.app.timezone.ICallback callback = new com.android.server.timezone.RulesManagerServiceTest.StubbedCallback(); mRulesManagerService.requestInstall(parcelFileDescriptor, tokenBytes, callback); android.app.timezone.RulesState expectedRuleState = new android.app.timezone.RulesState(systemRulesVersion, RulesManagerService.DISTRO_FORMAT_VERSION_SUPPORTED, true, android.app.timezone.RulesState.STAGED_OPERATION_UNKNOWN, null, android.app.timezone.RulesState.DISTRO_STATUS_UNKNOWN, null); assertEquals(expectedRuleState, mRulesManagerService.getRulesState()); }
@java.lang.Override public int requestInstall(android.os.ParcelFileDescriptor timeZoneDistro, byte[] checkTokenBytes, android.app.timezone.ICallback callback) { mPermissionHelper.enforceCallerHasPermission(com.android.server.timezone.RulesManagerService.REQUIRED_UPDATER_PERMISSION); com.android.server.timezone.CheckToken checkToken = null; if (checkTokenBytes != null) { checkToken = com.android.server.timezone.RulesManagerService.createCheckTokenOrThrow(checkTokenBytes); } synchronized(this) { if (timeZoneDistro == null) { throw new java.lang.NullPointerException("timeZoneDistro == null"); } if (callback == null) { throw new java.lang.NullPointerException("observer == null"); } if (mOperationInProgress.get()) { return android.app.timezone.RulesManager.ERROR_OPERATION_IN_PROGRESS; } mOperationInProgress.set(true); mExecutor.execute(new com.android.server.timezone.RulesManagerService.InstallRunnable(timeZoneDistro, checkToken, callback)); return android.app.timezone.RulesManager.SUCCESS; } }
@java.lang.Override public void run() { boolean success = false; try { byte[] distroBytes = this.mFileDescriptorHelper.readFully(mTimeZoneDistro); com.android.timezone.distro.TimeZoneDistro distro = new com.android.timezone.distro.TimeZoneDistro(distroBytes); int installerResult = mInstaller.stageInstallWithErrorCode(distro); int resultCode = mapInstallerResultToApiCode(installerResult); sendFinishedStatus(mCallback, resultCode); success = true; } catch (java.lang.Exception e) { android.util.Slog.w(com.android.server.timezone.RulesManagerService.TAG, "Failed to install distro.", e); sendFinishedStatus(mCallback, Callback.ERROR_UNKNOWN_FAILURE); } finally { mPackageTracker.recordCheckResult(mCheckToken, success); mOperationInProgress.set(false); } }
@org.junit.Test public void requestInstall_operationInProgress() throws java.lang.Exception { configureCallerHasPermission(); byte[] expectedContent = com.android.server.timezone.RulesManagerServiceTest.createArbitraryBytes(1000); android.os.ParcelFileDescriptor parcelFileDescriptor = createFakeParcelFileDescriptor(); configureParcelFileDescriptorReadSuccess(parcelFileDescriptor, expectedContent); byte[] tokenBytes = createArbitraryTokenBytes(); android.app.timezone.ICallback callback = new com.android.server.timezone.RulesManagerServiceTest.StubbedCallback(); assertEquals(RulesManager.SUCCESS, mRulesManagerService.requestInstall(parcelFileDescriptor, tokenBytes, callback)); mFakeExecutor.getAndResetLastCommand(); assertEquals(RulesManager.ERROR_OPERATION_IN_PROGRESS, mRulesManagerService.requestInstall(parcelFileDescriptor, tokenBytes, callback)); mFakeExecutor.assertNothingQueued(); verifyNoInstallerCallsMade(); verifyNoPackageTrackerCallsMade(); }
@org.junit.Test public void requestInstall_nullTokenBytes() throws java.lang.Exception { configureCallerHasPermission(); android.os.ParcelFileDescriptor parcelFileDescriptor = createFakeParcelFileDescriptor(); byte[] expectedContent = com.android.server.timezone.RulesManagerServiceTest.createArbitraryBytes(1000); configureParcelFileDescriptorReadSuccess(parcelFileDescriptor, expectedContent); com.android.server.timezone.RulesManagerServiceTest.TestCallback callback = new com.android.server.timezone.RulesManagerServiceTest.TestCallback(); assertEquals(RulesManager.SUCCESS, mRulesManagerService.requestInstall(parcelFileDescriptor, null, callback)); verifyNoInstallerCallsMade(); callback.assertNoResultReceived(); com.android.timezone.distro.TimeZoneDistro expectedDistro = new com.android.timezone.distro.TimeZoneDistro(expectedContent); configureStageInstallExpectation(expectedDistro, TimeZoneDistroInstaller.INSTALL_SUCCESS); mFakeExecutor.simulateAsyncExecutionOfLastCommand(); verifyStageInstallCalled(expectedDistro); verifyPackageTrackerCalled(null, true); callback.assertResultReceived(Callback.SUCCESS); }
@org.junit.Test public void requestInstall_asyncInstallFail() throws java.lang.Exception { configureCallerHasPermission(); byte[] expectedContent = com.android.server.timezone.RulesManagerServiceTest.createArbitraryBytes(1000); android.os.ParcelFileDescriptor parcelFileDescriptor = createFakeParcelFileDescriptor(); configureParcelFileDescriptorReadSuccess(parcelFileDescriptor, expectedContent); com.android.server.timezone.CheckToken token = createArbitraryToken(); byte[] tokenBytes = token.toByteArray(); com.android.server.timezone.RulesManagerServiceTest.TestCallback callback = new com.android.server.timezone.RulesManagerServiceTest.TestCallback(); assertEquals(RulesManager.SUCCESS, mRulesManagerService.requestInstall(parcelFileDescriptor, tokenBytes, callback)); verifyNoInstallerCallsMade(); callback.assertNoResultReceived(); com.android.timezone.distro.TimeZoneDistro expectedDistro = new com.android.timezone.distro.TimeZoneDistro(expectedContent); configureStageInstallExpectation(expectedDistro, TimeZoneDistroInstaller.INSTALL_FAIL_VALIDATION_ERROR); mFakeExecutor.simulateAsyncExecutionOfLastCommand(); verifyStageInstallCalled(expectedDistro); boolean expectedSuccess = true; verifyPackageTrackerCalled(token, expectedSuccess); callback.assertResultReceived(Callback.ERROR_INSTALL_VALIDATION_ERROR); }
@java.lang.Override public void endSession(int sessionId) throws android.os.RemoteException { synchronized(mLock) { checkServiceIsReady(); getServiceInterface(mBinder).endSession(mSlotId, mSupportedFeature, sessionId); } }


static com.android.server.timezone.PackageTracker create(android.content.Context context) { com.android.server.timezone.PackageTrackerHelperImpl helperImpl = new com.android.server.timezone.PackageTrackerHelperImpl(context); return new com.android.server.timezone.PackageTracker(helperImpl, helperImpl, helperImpl, new com.android.server.timezone.PackageStatusStorage(context), new com.android.server.timezone.IntentHelperImpl(context)); }
private void handleInstall(final byte[] checkToken, final java.io.File contentFile) { final android.os.ParcelFileDescriptor distroFileDescriptor; try { distroFileDescriptor = android.os.ParcelFileDescriptor.open(contentFile, ParcelFileDescriptor.MODE_READ_ONLY); } catch (java.io.FileNotFoundException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ("Unable to create ParcelFileDescriptor from " + contentFile)); handleCheckComplete(checkToken, false); return; } android.app.timezone.Callback callback = new android.app.timezone.Callback() { @java.lang.Override public void onFinished(int status) { android.util.Log.i(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ("onFinished: Finished install: " + status)); try { distroFileDescriptor.close(); } catch (java.io.IOException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ("Unable to close ParcelFileDescriptor for " + contentFile), e); } finally { contentFile.delete(); } } }; try { int requestStatus = mRulesManager.requestInstall(distroFileDescriptor, checkToken, callback); android.util.Log.i(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ("handleInstall: Request sent:" + requestStatus)); } catch (java.lang.Exception e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, "handleInstall: Error", e); } }
@java.lang.Override public void onFinished(int status) { android.util.Log.i(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ("onFinished: Finished install: " + status)); try { distroFileDescriptor.close(); } catch (java.io.IOException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ("Unable to close ParcelFileDescriptor for " + contentFile), e); } finally { contentFile.delete(); } }
private static java.io.File copyDataToLocalFile(android.content.Context context) { java.io.File extractedFile = new java.io.File(context.getFilesDir(), "temp.zip"); android.os.ParcelFileDescriptor fileDescriptor; try { fileDescriptor = context.getContentResolver().openFileDescriptor(TimeZoneRulesDataContract.DATA_URI, "r"); if (fileDescriptor == null) { throw new java.io.FileNotFoundException("ContentProvider returned null"); } } catch (java.io.FileNotFoundException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ("copyDataToLocalFile: Unable to open file descriptor" + (android.provider.TimeZoneRulesDataContract.DATA_URI)), e); return null; } try (android.os.ParcelFileDescriptor pfd = fileDescriptor;java.io.InputStream fis = new java.io.FileInputStream(pfd.getFileDescriptor());java.io.FileOutputStream fos = new java.io.FileOutputStream(extractedFile, false)) { libcore.io.Streams.copy(fis, fos); } catch (java.io.IOException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ("Unable to create asset storage file: " + extractedFile), e); return null; } return extractedFile; }
public static void main(java.lang.String[] args) { java.lang.System.out.println(Main.$opt$noinline$foo(new Main())); java.lang.System.out.println(Main.$opt$noinline$foo(new SubMain())); java.lang.System.out.println(Main.$opt$noinline$foo(new SubSubMain())); }


@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.util.Log.d(com.android.bluetooth.btservice.RemoteDevices.TAG, ("received intent: " + intent)); java.lang.String action = intent.getAction(); switch (action) { case android.bluetooth.BluetoothHeadset.ACTION_HF_INDICATORS_VALUE_CHANGED : onHfIndicatorValueChanged(intent); break; default : android.util.Log.w(com.android.bluetooth.btservice.RemoteDevices.TAG, ("unhandled intent: " + intent)); break; } }

private boolean processVendorSpecificAt(java.lang.String atString) { log(("processVendorSpecificAt - atString = " + atString)); int indexOfEqual = atString.indexOf("="); if (indexOfEqual == (-1)) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ("processVendorSpecificAt: command type error in " + atString)); return false; } java.lang.String command = atString.substring(0, indexOfEqual); java.lang.Integer companyId = com.android.bluetooth.hfp.HeadsetStateMachine.VENDOR_SPECIFIC_AT_COMMAND_COMPANY_ID.get(command); if (companyId == null) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ("processVendorSpecificAt: unsupported command: " + atString)); return false; } java.lang.String arg = atString.substring((indexOfEqual + 1)); if (arg.startsWith("?")) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ("processVendorSpecificAt: command type error in " + atString)); return false; } java.lang.Object[] args = com.android.bluetooth.hfp.HeadsetStateMachine.generateArgs(arg); broadcastVendorSpecificEventIntent(command, companyId, BluetoothHeadset.AT_CMD_TYPE_SET, args, mCurrentDevice); atResponseCodeNative(HeadsetHalConstants.AT_RESPONSE_OK, 0, getByteAddress(mCurrentDevice)); return true; }

private void onHfIndicatorValueChanged(android.content.Intent intent) { android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); if (device == null) { android.util.Log.e(com.android.bluetooth.btservice.RemoteDevices.TAG, "onHfIndicatorValueChanged() remote device is null"); return; } int indicatorId = intent.getIntExtra(BluetoothHeadset.EXTRA_HF_INDICATORS_IND_ID, (-1)); int indicatorValue = intent.getIntExtra(BluetoothHeadset.EXTRA_HF_INDICATORS_IND_VALUE, (-1)); if (indicatorId == (HeadsetHalConstants.HF_INDICATOR_BATTERY_LEVEL_STATUS)) { updateBatteryLevel(device, indicatorValue); } }
@java.lang.Override public void encode(com.android.dx.io.instructions.DecodedInstruction insn, com.android.dx.io.instructions.CodeOutput out) { com.android.dx.io.instructions.InstructionCodec.encodeRegisterList(insn, out); }





@java.lang.Override public com.android.dx.io.instructions.DecodedInstruction decode(int opcodeUnit, com.android.dx.io.instructions.CodeInput in) throws java.io.EOFException { return com.android.dx.io.instructions.InstructionCodec.decodeRegisterList(this, opcodeUnit, in); }





@java.lang.Override public void encode(com.android.dx.io.instructions.DecodedInstruction insn, com.android.dx.io.instructions.CodeOutput out) { com.android.dx.io.instructions.InstructionCodec.encodeRegisterList(insn, out); }
@java.lang.Override public com.android.dx.io.instructions.DecodedInstruction decode(int opcodeUnit, com.android.dx.io.instructions.CodeInput in) throws java.io.EOFException { return com.android.dx.io.instructions.InstructionCodec.decodeRegisterList(this, opcodeUnit, in); }




@java.lang.Override boolean build() { if (super.build()) { java.io.File tempFile = new java.io.File(inputFile.folder, destFileName); try { if (!(inputFile.fileName.equals(tempFile))) { copyFile(inputFile.fileName, tempFile); } else { tempFile = null; } } catch (java.io.IOException e) { java.lang.System.err.println(("io exception:" + (e.getMessage()))); e.printStackTrace(); return false; } java.io.File outDir = outputFile.fileName.getParentFile(); if ((!(outDir.exists())) && (!(outDir.mkdirs()))) { java.lang.System.err.println(("failed to create output dir: " + (outDir.getAbsolutePath()))); return false; } java.lang.String[] arguments = new java.lang.String[]{ "-cMf", outputFile.fileName.getAbsolutePath(), "-C", inputFile.folder.getAbsolutePath(), destFileName }; sun.tools.jar.Main main = new sun.tools.jar.Main(java.lang.System.out, java.lang.System.err, "jar"); boolean success = main.run(arguments); if (success) { if (tempFile != null) { tempFile.delete(); } if (deleteInputFileAfterBuild) { inputFile.fileName.delete(); } } else { java.lang.System.err.println((((((("exception in JarBuildStep while calling jar with args:" + " \"-cMf\", ") + (outputFile.fileName.getAbsolutePath())) + ", \"-C\",") + (inputFile.folder.getAbsolutePath())) + ", ") + (destFileName))); } return success; } return false; }
private static java.lang.String getDeviceSummary(com.google.appengine.api.datastore.Entity testRun, java.lang.String selectedDevice) { com.google.appengine.api.datastore.DatastoreService datastore = com.google.appengine.api.datastore.DatastoreServiceFactory.getDatastoreService(); java.util.List<java.lang.String> buildInfos = new java.util.ArrayList<>(); com.google.appengine.api.datastore.Query deviceQuery = new com.google.appengine.api.datastore.Query(com.android.vts.entity.DeviceInfoEntity.KIND).setAncestor(testRun.getKey()); boolean isSelectedDevice = selectedDevice == null; for (com.google.appengine.api.datastore.Entity device : datastore.prepare(deviceQuery).asIterable()) { java.lang.String product = ((java.lang.String) (device.getProperty(DeviceInfoEntity.PRODUCT))); if ((selectedDevice != null) && (product.equals(selectedDevice))) { isSelectedDevice = true; } java.lang.String buildId = ((java.lang.String) (device.getProperty(DeviceInfoEntity.BUILD_ID))); buildInfos.add((((product + " (") + buildId) + ")")); } return isSelectedDevice ? org.apache.commons.lang.StringUtils.join(buildInfos, ", ") : null; }

@java.lang.Override public boolean processMessage(android.os.Message message) { switch (message.what) { case com.android.server.connectivity.NetworkMonitor.CMD_LAUNCH_CAPTIVE_PORTAL_APP : final android.content.Intent intent = new android.content.Intent(android.net.ConnectivityManager.ACTION_CAPTIVE_PORTAL_SIGN_IN); intent.putExtra(ConnectivityManager.EXTRA_NETWORK, mNetworkAgentInfo.network); intent.putExtra(ConnectivityManager.EXTRA_CAPTIVE_PORTAL, new android.net.CaptivePortal(new android.net.ICaptivePortal.Stub() { @java.lang.Override public void appResponse(int response) { if (response == (android.net.CaptivePortal.APP_RETURN_WANTED_AS_IS)) { mContext.enforceCallingPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, "CaptivePortal"); } sendMessage(com.android.server.connectivity.NetworkMonitor.CMD_CAPTIVE_PORTAL_APP_FINISHED, response); } })); intent.putExtra(ConnectivityManager.EXTRA_CAPTIVE_PORTAL_URL, mLastPortalProbeResult.detectUrl); intent.putExtra(ConnectivityManager.EXTRA_CAPTIVE_PORTAL_USER_AGENT, mCaptivePortalUserAgent); intent.setFlags(((android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) | (android.content.Intent.FLAG_ACTIVITY_NEW_TASK))); mContext.startActivityAsUser(intent, UserHandle.CURRENT); return HANDLED; default : return NOT_HANDLED; } }
public void probeAll() { java.util.Set<java.net.InetAddress> ipProbeList = new java.util.HashSet<java.net.InetAddress>(); synchronized(mLock) { ipProbeList.addAll(mIpWatchList.keySet()); } if ((!(ipProbeList.isEmpty())) && (stillRunning())) { mWakeLock.acquire(android.net.ip.IpReachabilityMonitor.getProbeWakeLockDuration()); } for (java.net.InetAddress target : ipProbeList) { if (!(stillRunning())) { break; } final int returnValue = android.net.ip.IpReachabilityMonitor.probeNeighbor(mInterfaceIndex, target); logEvent(IpReachabilityEvent.PROBE, returnValue); } mLastProbeTimeMs = android.os.SystemClock.elapsedRealtime(); }

@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); reset(mContext); reset(mCS); reset(mLog); when(mLog.forSubComponent(anyString())).thenReturn(mLog); mCM = spy(new com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.TestConnectivityManager(mContext, mCS)); mSM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.TestStateMachine(); mUNM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitor(mSM, com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.EVENT_UNM_UPDATE, ((android.net.ConnectivityManager) (mCM)), mLog); }



private void notifyTarget(int which, android.net.NetworkState netstate) { mTarget.sendMessage(mWhat, which, 0, netstate); }
@android.test.suitebuilder.annotation.SmallTest public void testNetworkInfoOfTypeNone() { android.os.ConditionVariable broadcastCV = waitForConnectivityBroadcasts(1); verifyNoNetwork(); com.android.server.ConnectivityServiceTest.MockNetworkAgent lowpanNetwork = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_LOWPAN); assertNull(mCm.getActiveNetworkInfo()); lowpanNetwork.connect(true); waitForIdle(); verifyActiveNetwork(com.android.server.TRANSPORT_LOWPAN); assertEquals(1, mCm.getAllNetworks().length); android.net.NetworkInfo info = mCm.getActiveNetworkInfo(); android.net.Network network = mCm.getActiveNetwork(); com.android.server.NetworkCapabilities capabilities = mCm.getNetworkCapabilities(network); assertNotNull(info); assertNotNull(network); assertNotNull(capabilities); assertEquals(com.android.server.TYPE_NONE, info.getType()); assertTrue(capabilities.hasTransport(com.android.server.TRANSPORT_LOWPAN)); lowpanNetwork.disconnect(); waitForIdle(); verifyNoNetwork(); if (broadcastCV.block(10)) { fail("expected no broadcast, but got CONNECTIVITY_ACTION broadcast"); } }
@android.test.suitebuilder.annotation.SmallTest public void testTimedoutAfterUnregisteredNetworkRequest() { android.net.NetworkRequest nr = new android.net.NetworkRequest.Builder().addTransportType(NetworkCapabilities.TRANSPORT_WIFI).build(); final com.android.server.ConnectivityServiceTest.TestNetworkCallback networkCallback = new com.android.server.ConnectivityServiceTest.TestNetworkCallback(); final int timeoutMs = 10; mCm.requestNetwork(nr, networkCallback, timeoutMs); mCm.unregisterNetworkCallback(networkCallback); com.android.server.ConnectivityServiceTest.sleepFor(15); networkCallback.assertNoCallback(); mWiFiNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_WIFI); mWiFiNetworkAgent.connect(false); networkCallback.assertNoCallback(); }
public static void main(java.lang.String[] args) throws java.lang.Throwable { java.util.Random random = new java.util.Random(); for (int pass = 0; pass < 2; pass++) { for (int i = 0; i < (com.android.dx.merge.MergeTest.NUMBER_OF_TRIES); i++) { int numDex = (pass == 0) ? 2 : (random.nextInt(8)) + 3; java.lang.String[] fileNames = new java.lang.String[numDex]; try { com.android.dex.Dex[] dexesToMerge = new com.android.dex.Dex[numDex]; for (int j = 0; j < numDex; j++) { java.lang.String fileName = args[random.nextInt(args.length)]; fileNames[j] = fileName; dexesToMerge[j] = new com.android.dex.Dex(new java.io.File(fileName)); } new com.android.dx.merge.DexMerger(dexesToMerge, CollisionPolicy.KEEP_FIRST, new com.android.dx.command.dexer.DxContext()).merge(); } catch (com.android.dex.DexIndexOverflowException e) { } catch (java.lang.Throwable t) { java.lang.System.err.println(("Problem merging those dexes: " + (java.util.Arrays.toString(fileNames)))); throw t; } } } }

private boolean isNameMatchTarget(java.lang.String name, java.lang.String target) { java.lang.String contentTypeName = name; if (contentTypeName.endsWith(".vcf")) { contentTypeName = contentTypeName.substring(0, ((contentTypeName.length()) - (".vcf".length()))); } java.lang.String[] nameList = contentTypeName.split("/"); for (java.lang.String subName : nameList) { if (subName.equals(target)) { return true; } } return false; }
@java.lang.Override public void run() { this.onChange(mSelfChange, mUri, mUserId); }
private void dispatchChange(boolean selfChange, android.net.Uri uri, int userId) { if ((mHandler) == null) { onChange(selfChange, uri, userId); } else { mHandler.post(new android.database.ContentObserver.NotificationRunnable(selfChange, uri, userId)); } }
void generateForegroundT3tIdentifiersCacheLocked() { if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, "generateForegroundT3tIdentifiersCacheLocked"); mForegroundT3tIdentifiersCache.clear(); if ((mEnabledForegroundService) != null) { for (android.nfc.cardemulation.NfcFServiceInfo service : mServices) { if (mEnabledForegroundService.equals(service.getComponent())) { if ((!(service.getSystemCode().equalsIgnoreCase("NULL"))) && (!(service.getNfcid2().equalsIgnoreCase("NULL")))) { mForegroundT3tIdentifiersCache.put(service.getNfcid2(), service); } break; } } } if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, ("mForegroundT3tIdentifiersCache: size=" + (mForegroundT3tIdentifiersCache.size()))); for (java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo> entry : mForegroundT3tIdentifiersCache.entrySet()) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, (((" " + (entry.getKey())) + "/") + (entry.getValue().getComponent().toString()))); } } updateRoutingLocked(); }
public static boolean isValidAid(java.lang.String aid) { if (aid == null) return false; if ((aid.endsWith("*")) && (((aid.length()) % 2) == 0)) { android.util.Log.e(android.nfc.cardemulation.CardEmulation.TAG, (("AID " + aid) + " is not a valid AID.")); return false; } if ((!(aid.endsWith("*"))) && (((aid.length()) % 2) != 0)) { android.util.Log.e(android.nfc.cardemulation.CardEmulation.TAG, (("AID " + aid) + " is not a valid AID.")); return false; } if (!(aid.matches("[0-9A-Fa-f]{10,32}\\*?"))) { android.util.Log.e(android.nfc.cardemulation.CardEmulation.TAG, (("AID " + aid) + " is not a valid AID.")); return false; } return true; }




@java.lang.Override public void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException { com.google.appengine.api.datastore.DatastoreService datastore = com.google.appengine.api.datastore.DatastoreServiceFactory.getDatastoreService(); java.util.Set<com.google.appengine.api.datastore.Key> allTestKeys = new java.util.HashSet<>(); com.google.appengine.api.datastore.Query q = new com.google.appengine.api.datastore.Query(com.android.vts.entity.TestEntity.KIND).setKeysOnly(); for (com.google.appengine.api.datastore.Entity test : datastore.prepare(q).asIterable()) { if ((test.getKey().getName()) == null) { continue; } allTestKeys.add(test.getKey()); } java.util.List<com.android.vts.util.PerformanceUtil.TimeInterval> timeIntervals = new java.util.ArrayList<>(); long nowMilli = java.lang.System.currentTimeMillis(); long nowMicro = java.util.concurrent.TimeUnit.MILLISECONDS.toMicros(nowMilli); java.lang.String dateString = new java.text.SimpleDateFormat("MM-dd-yyyy").format(new java.util.Date(nowMilli)); com.android.vts.util.PerformanceUtil.TimeInterval today = new com.android.vts.util.PerformanceUtil.TimeInterval((nowMicro - (java.util.concurrent.TimeUnit.DAYS.toMicros(1))), nowMicro, dateString); timeIntervals.add(today); long oneDayAgo = nowMicro - (java.util.concurrent.TimeUnit.DAYS.toMicros(1)); java.lang.String dateStringYesterday = new java.text.SimpleDateFormat("MM-dd-yyyy").format(new java.util.Date(java.util.concurrent.TimeUnit.MICROSECONDS.toMillis(oneDayAgo))); com.android.vts.util.PerformanceUtil.TimeInterval yesterday = new com.android.vts.util.PerformanceUtil.TimeInterval((oneDayAgo - (java.util.concurrent.TimeUnit.DAYS.toMicros(1))), oneDayAgo, dateStringYesterday); timeIntervals.add(yesterday); long oneWeek = java.util.concurrent.TimeUnit.DAYS.toMicros(7); long oneWeekAgo = nowMicro - oneWeek; com.android.vts.util.PerformanceUtil.TimeInterval lastWeek = new com.android.vts.util.PerformanceUtil.TimeInterval((oneWeekAgo - oneWeek), oneWeekAgo, com.android.vts.servlet.VtsPerformanceJobServlet.LAST_WEEK); timeIntervals.add(lastWeek); for (com.google.appengine.api.datastore.Key testKey : allTestKeys) { java.util.List<com.android.vts.util.PerformanceSummary> perfSummaries = new java.util.ArrayList<>(); java.util.List<java.lang.String> labels = new java.util.ArrayList<>(); labels.add(""); for (com.android.vts.util.PerformanceUtil.TimeInterval interval : timeIntervals) { com.android.vts.util.PerformanceSummary perfSummary = new com.android.vts.util.PerformanceSummary(); com.android.vts.util.PerformanceUtil.updatePerformanceSummary(testKey.getName(), interval.start, interval.end, null, perfSummary); if ((perfSummary.size()) == 0) { continue; } perfSummaries.add(perfSummary); labels.add(interval.label); } java.lang.String body = com.android.vts.servlet.VtsPerformanceJobServlet.getPeformanceSummary(testKey.getName(), perfSummaries, labels); if ((body == null) || (body.equals(""))) { continue; } java.util.List<java.lang.String> emails = com.android.vts.util.EmailHelper.getSubscriberEmails(testKey); if ((emails.size()) == 0) { continue; } java.lang.String subject = (com.android.vts.servlet.VtsPerformanceJobServlet.SUBJECT_PREFIX) + (testKey.getName()); com.android.vts.util.EmailHelper.send(emails, subject, body); } }
public static void run() throws java.lang.Exception { art.Test988.loadAllClasses(); art.Trace.disableTracing(java.lang.Thread.currentThread()); art.Trace.enableMethodTracing(art.Test988.class, art.Test988.class.getDeclaredMethod("notifyMethodEntry", java.lang.Object.class), art.Test988.class.getDeclaredMethod("notifyMethodExit", java.lang.Object.class, java.lang.Boolean.TYPE, java.lang.Object.class), java.lang.Thread.currentThread()); art.Test988.doFibTest(30, new art.Test988.IterOp()); art.Test988.doFibTest(5, new art.Test988.RecurOp()); art.Test988.doFibTest((-19), new art.Test988.IterOp()); art.Test988.doFibTest((-19), new art.Test988.RecurOp()); art.Trace.disableTracing(java.lang.Thread.currentThread()); art.Test988.printResults(); }
void increment(int imp) { imp = (imp < 0) ? 0 : imp > (com.android.server.notification.NotificationUsageStats.ImportanceHistogram.NUM_IMPORTANCES) ? com.android.server.notification.NotificationUsageStats.ImportanceHistogram.NUM_IMPORTANCES : imp; (mCount[imp])++; }
@java.lang.Override public void onReceivedSslError(android.webkit.WebView view, android.webkit.SslErrorHandler handler, android.net.http.SslError error) { logMetricsEvent(MetricsEvent.CAPTIVE_PORTAL_LOGIN_ACTIVITY_SSL_ERROR); android.util.Log.w(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, (((((("SSL error (error: " + (error.getPrimaryError())) + " host: ") + (android.net.Uri.parse(error.getUrl()).getHost())) + " certificate: ") + (error.getCertificate())) + "); displaying SSL warning.")); final java.lang.String sslErrorPage = makeSslErrorPage(); if (com.android.captiveportallogin.CaptivePortalLoginActivity.VDBG) { android.util.Log.d(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, sslErrorPage); } view.loadDataWithBaseURL(com.android.captiveportallogin.CaptivePortalLoginActivity.MyWebViewClient.INTERNAL_ASSETS, sslErrorPage, "text/HTML", "UTF-8", null); }
@java.lang.Override public void onPageStarted(android.webkit.WebView view, java.lang.String url, android.graphics.Bitmap favicon) { if (url.contains(mBrowserBailOutToken)) { mLaunchBrowser = true; done(com.android.captiveportallogin.CaptivePortalLoginActivity.Result.WANTED_AS_IS); return; } if ((mPagesLoaded) == 0) return; if (!(url.startsWith(com.android.captiveportallogin.CaptivePortalLoginActivity.MyWebViewClient.INTERNAL_ASSETS))) { getActionBar().setSubtitle(getHeaderSubtitle(url)); } getProgressBar().setVisibility(View.VISIBLE); testForCaptivePortal(); }
@java.lang.Override public void onActiveSessionsChanged(java.util.List<android.media.session.MediaController> newControllers) { for (android.media.session.MediaController controller : newControllers) { addMediaPlayerController(controller); } if (((newControllers.size()) > 0) && ((getAddressedPlayerInfo()) == null)) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, "No addressed player but active sessions, taking first."); setAddressedMediaSessionPackage(newControllers.get(0).getPackageName()); } scheduleMediaUpdate(); }
private int getTextWidth(java.lang.String str, android.text.TextPaint paint) { float totalWidth = 0.0F; float[] widths = new float[str.length()]; paint.getTextWidths(str, widths); for (float f : widths) { totalWidth += f; } return ((int) (totalWidth)); }
public void run() { tv.setText(android.text.method.cts.TouchTest.LONG_TEXT); }
public void testScrollTo() throws java.lang.Throwable { final android.widget.TextView tv = new android.text.method.cts.TextViewNoIme(mActivity); tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10); runTestOnUiThread(new java.lang.Runnable() { public void run() { mActivity.setContentView(tv); tv.setSingleLine(true); tv.setLines(2); } }); getInstrumentation().waitForIdleSync(); android.text.TextPaint paint = tv.getPaint(); final android.text.Layout layout = tv.getLayout(); runTestOnUiThread(new java.lang.Runnable() { public void run() { tv.setText(android.text.method.cts.TouchTest.LONG_TEXT); } }); getInstrumentation().waitForIdleSync(); final int width = getTextWidth(android.text.method.cts.TouchTest.LONG_TEXT, paint); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, ((width - (tv.getWidth())) - 1), 0); } }); getInstrumentation().waitForIdleSync(); assertEquals(((width - (tv.getWidth())) - 1), tv.getScrollX()); assertEquals(0, tv.getScrollY()); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, (width + 100), 5); } }); getInstrumentation().waitForIdleSync(); assertEquals((width - (tv.getWidth())), tv.getScrollX(), 1.0F); assertEquals(5, tv.getScrollY()); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, (width - 10), 5); } }); getInstrumentation().waitForIdleSync(); assertEquals((width - (tv.getWidth())), tv.getScrollX(), 1.0F); assertEquals(5, tv.getScrollY()); }
public void test_SSLSocket_setSoWriteTimeout() throws java.lang.Exception { if (libcore.java.security.StandardNames.IS_RI) { return; } final libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create(); SSLSocket client = ((SSLSocket) (c.clientContext.getSocketFactory().createSocket())); int sendBufferSize = 1024; client.setSendBufferSize(sendBufferSize); sendBufferSize = client.getSendBufferSize(); final int recvBufferSize = 128; c.serverSocket.setReceiveBufferSize(recvBufferSize); client.connect(new java.net.InetSocketAddress(c.host, c.port)); final SSLSocket server = ((SSLSocket) (c.serverSocket.accept())); java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newSingleThreadExecutor(); java.util.concurrent.Future<java.lang.Void> future = executor.submit(new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { server.startHandshake(); return null; } }); executor.shutdown(); client.startHandshake(); java.lang.String expectedClassName = "com.android.org.conscrypt.OpenSSLSocketImpl"; java.lang.Class<?> actualClass = client.getClass(); assertEquals(expectedClassName, actualClass.getName()); java.lang.reflect.Method setSoWriteTimeout = actualClass.getMethod("setSoWriteTimeout", new java.lang.Class<?>[]{ java.lang.Integer.TYPE }); setSoWriteTimeout.invoke(client, 1); try { final int extra = 1; client.getOutputStream().write(new byte[sendBufferSize + extra]); fail(); } catch (java.net.SocketTimeoutException expected) { } future.get(); client.close(); server.close(); c.close(); }
private com.android.timezone.updater.RulesCheckReceiver.DistroOperation getOperation(android.content.Context context) { android.database.Cursor c = context.getContentResolver().query(TimeZoneRulesDataContract.OPERATION_URI, new java.lang.String[]{ android.provider.TimeZoneRulesDataContract.COLUMN_OPERATION, android.provider.TimeZoneRulesDataContract.COLUMN_DISTRO_MAJOR_VERSION, android.provider.TimeZoneRulesDataContract.COLUMN_DISTRO_MINOR_VERSION, android.provider.TimeZoneRulesDataContract.COLUMN_RULES_VERSION, android.provider.TimeZoneRulesDataContract.COLUMN_REVISION }, null, null, null); try (android.database.Cursor cursor = c) { if (cursor == null) { android.util.Log.e(com.android.timezone.updater.RulesCheckReceiver.TAG, "Query returned null"); return null; } if (!(cursor.moveToFirst())) { android.util.Log.e(com.android.timezone.updater.RulesCheckReceiver.TAG, "Query returned empty results"); return null; } try { java.lang.String operation = cursor.getString(0); android.app.timezone.DistroFormatVersion distroFormatVersion = null; android.app.timezone.DistroRulesVersion distroRulesVersion = null; if (TimeZoneRulesDataContract.OPERATION_INSTALL.equals(operation)) { distroFormatVersion = new android.app.timezone.DistroFormatVersion(cursor.getInt(1), cursor.getInt(2)); distroRulesVersion = new android.app.timezone.DistroRulesVersion(cursor.getString(3), cursor.getInt(4)); } return new com.android.timezone.updater.RulesCheckReceiver.DistroOperation(operation, distroFormatVersion, distroRulesVersion); } catch (java.lang.Exception e) { android.util.Log.e(com.android.timezone.updater.RulesCheckReceiver.TAG, "Error looking up distro operation / version", e); return null; } } }

public void testMaxLengthExtra() throws java.lang.Exception { byte[] maxLengthExtra = new byte[65535]; java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setExtra(maxLengthExtra); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(maxLengthExtra.length, zipFile.getEntry("x").getExtra().length); zipFile.close(); }

public void testCommentAndExtraInSameOrder() throws java.lang.Exception { java.lang.String comment = libcore.java.util.zip.ZipEntryTest.makeString(17, "z"); byte[] extra = libcore.java.util.zip.ZipEntryTest.makeString(11, "a").getBytes(); java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); ze = new java.util.zip.ZipEntry("y"); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); try { assertEquals(comment, zipFile.getEntry("x").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry("x").getExtra())); assertEquals(comment, zipFile.getEntry("y").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry("y").getExtra())); } finally { zipFile.close(); } }
public static java.lang.invoke.CallSite bsmLookupTest9(java.lang.invoke.MethodHandles.Lookup caller, java.lang.String name, java.lang.invoke.MethodType type, java.lang.invoke.MethodHandle staticGetter, java.lang.invoke.MethodHandle staticSetter, java.lang.invoke.MethodHandle fieldGetter, java.lang.invoke.MethodHandle fieldSetter, java.lang.invoke.MethodHandle instanceInvoke, java.lang.invoke.MethodHandle constructor, java.lang.invoke.MethodHandle interfaceInvoke) throws java.lang.Throwable { java.lang.System.out.println((((((((("bsmLookupTest9 [" + staticGetter) + ", ") + staticSetter) + ", ") + fieldGetter) + ", ") + fieldSetter) + "]")); java.lang.System.out.println(((name + " ") + type)); invokecustom.InvokeCustom.checkStaticFieldTest9(staticGetter, staticSetter); invokecustom.InvokeCustom instance = new invokecustom.InvokeCustom(); instance.checkFieldTest9(fieldGetter, fieldSetter); instanceInvoke.invokeExact(instance); invokecustom.InvokeCustom instance2 = ((invokecustom.InvokeCustom) (constructor.invokeExact(3))); interfaceInvoke.invoke(instance2); final java.lang.invoke.MethodHandles.Lookup lookup = java.lang.invoke.MethodHandles.lookup(); final java.lang.invoke.MethodHandle targetMH = lookup.findStatic(lookup.lookupClass(), name, type); return new java.lang.invoke.ConstantCallSite(targetMH.asType(type)); }
public void testMaxLengthComment() throws java.lang.Exception { java.lang.String maxLengthComment = libcore.java.util.zip.ZipEntryTest.makeString(65535, "z"); java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setComment(maxLengthComment); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(maxLengthComment, zipFile.getEntry("x").getComment()); zipFile.close(); }
public void testCommentAndExtraInSameOrder() throws java.lang.Exception { java.lang.String comment = libcore.java.util.zip.ZipEntryTest.makeString(17, "z"); byte[] extra = libcore.java.util.zip.ZipEntryTest.makeString(11, "a").getBytes(); java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); ze = new java.util.zip.ZipEntry("y"); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); try { assertEquals(comment, zipFile.getEntry("x").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry("x").getExtra())); assertEquals(comment, zipFile.getEntry("y").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry("y").getExtra())); } finally { zipFile.close(); } }

public void testMaxLengthExtra() throws java.lang.Exception { byte[] maxLengthExtra = new byte[65535]; java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(maxLengthExtra); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(maxLengthExtra.length, zipFile.getEntry("x").getExtra().length); zipFile.close(); }
private static java.io.File createTemporaryZipFile() throws java.io.IOException { java.io.File result = java.io.File.createTempFile("ZipFileTest", "zip"); result.deleteOnExit(); return result; }
private static void checkSetTime(long time) throws java.io.IOException { java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setTime(time); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(time, zipFile.getEntry("x").getTime()); zipFile.close(); }
public void testMaxLengthName() throws java.lang.Exception { java.lang.String maxLengthName = libcore.java.util.zip.ZipEntryTest.makeString(65535, "z"); java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); out.putNextEntry(new java.util.zip.ZipEntry(maxLengthName)); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertNotNull(zipFile.getEntry(maxLengthName)); zipFile.close(); }
public void test_utf8FileNames() throws java.lang.Exception { java.io.File f = java.io.File.createTempFile("your", "mum"); java.util.List<java.lang.String> filenames = java.util.Arrays.asList("us-ascii", "\u043c\u0430\u0440\u0442\u0430", "\u1f00\u03c0\u1f78", "\u30b3\u30f3\u30cb\u30c1\u30cf"); java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream(new java.io.FileOutputStream(f)); for (java.lang.String filename : filenames) { out.putNextEntry(new java.util.zip.ZipEntry(filename)); out.closeEntry(); } out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); for (java.lang.String filename : filenames) { assertNotNull(filename, zipFile.getEntry(filename)); } java.util.zip.ZipInputStream in = new java.util.zip.ZipInputStream(new java.io.FileInputStream(f)); java.util.zip.ZipEntry entry; int entryCount = 0; while ((entry = in.getNextEntry()) != null) { assertTrue(entry.getName(), filenames.contains(entry.getName())); ++entryCount; } assertEquals(filenames.size(), entryCount); in.close(); }
private boolean isNetworkSelectionNeeded(java.util.List<com.android.server.wifi.ScanDetail> scanDetails, android.net.wifi.WifiInfo wifiInfo, boolean connected, boolean disconnected) { if ((scanDetails.size()) == 0) { localLog("Empty connectivity scan results. Skip network selection."); return false; } if (connected) { if (!(mEnableAutoJoinWhenAssociated)) { localLog(("Switching networks in connected state is not allowed." + " Skip network selection.")); return false; } if ((mLastNetworkSelectionTimeStamp) != (com.android.server.wifi.WifiNetworkSelector.INVALID_TIME_STAMP)) { long gap = (mClock.getElapsedSinceBootMillis()) - (mLastNetworkSelectionTimeStamp); if (gap < (com.android.server.wifi.WifiNetworkSelector.MINIMUM_NETWORK_SELECTION_INTERVAL_MS)) { localLog(((("Too short since last network selection: " + gap) + " ms.") + " Skip network selection.")); return false; } } if (isCurrentNetworkSufficient(wifiInfo)) { localLog("Current connected network already sufficient. Skip network selection."); return false; } else { localLog("Current connected network is not sufficient."); return true; } } else if (disconnected) { return true; } else { localLog(("WifiStateMachine is in neither CONNECTED nor DISCONNECTED state." + " Skip network selection.")); return false; } }
private boolean isCurrentNetworkSufficient(android.net.wifi.WifiInfo wifiInfo) { android.net.wifi.WifiConfiguration network = mWifiConfigManager.getConfiguredNetwork(wifiInfo.getNetworkId()); if (network == null) { localLog("No current connected network."); return false; } else { localLog(((("Current connected network: " + (network.SSID)) + " , ID: ") + (network.networkId))); } if (network.ephemeral) { localLog("Current network is an ephemeral one."); return false; } if (com.android.server.wifi.WifiConfigurationUtil.isConfigForOpenNetwork(network)) { localLog("Current network is a open one."); return false; } if (wifiInfo.is24GHz()) { localLog("Current network is 2.4GHz."); return false; } int currentRssi = wifiInfo.getRssi(); if ((wifiInfo.is5GHz()) && (currentRssi < (mThresholdQualifiedRssi5))) { localLog((((("Current network band=" + (wifiInfo.is5GHz() ? "5GHz" : "2.4GHz")) + ", RSSI[") + currentRssi) + "]-acceptable but not qualified.")); return false; } return true; }
void clientConnect(int clientIf, java.lang.String address, boolean isDirect, int transport, int phy) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ((((("clientConnect() - address=" + address) + ", isDirect=") + isDirect) + ", phy= ") + phy)); gattClientConnectNative(clientIf, address, isDirect, transport, phy); }


@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); when(mContext.getApplicationInfo()).thenReturn(mApplicationInfo); when(mContext.getPackageName()).thenReturn("OffloadControllerTest"); mContentResolver = new android.test.mock.MockContentResolver(mContext); mContentResolver.addProvider(Settings.AUTHORITY, new com.android.internal.util.test.FakeSettingsProvider()); when(mContext.getContentResolver()).thenReturn(mContentResolver); }
@org.junit.Test public void testNoSettingsValueAllowsStart() { setupFunctioningHardwareInterface(); try { Settings.Global.getInt(mContentResolver, android.provider.Settings.Global.TETHER_OFFLOAD_DISABLED); fail(); } catch (android.provider.Settings.SettingNotFoundException expected) { } final com.android.server.connectivity.tethering.OffloadController offload = new com.android.server.connectivity.tethering.OffloadController(null, mHardware, mContentResolver, new android.net.util.SharedLog("test")); offload.start(); final org.mockito.InOrder inOrder = inOrder(mHardware); inOrder.verify(mHardware, times(1)).initOffloadConfig(); inOrder.verify(mHardware, times(1)).initOffloadControl(any(OffloadHardwareInterface.ControlCallback.class)); inOrder.verifyNoMoreInteractions(); }

public void run() { createBitmaps(); java.lang.Runtime.getRuntime().gc(); Main.sleep(250); mBitmap2.drawAt(0, 0); java.lang.System.out.println("nulling 1"); mBitmap1 = null; java.lang.Runtime.getRuntime().gc(); Main.sleep(500); java.lang.System.out.println("nulling 2"); mBitmap2 = null; java.lang.Runtime.getRuntime().gc(); Main.sleep(500); java.lang.System.out.println("nulling 3"); mBitmap3 = null; java.lang.Runtime.getRuntime().gc(); Main.sleep(500); java.lang.System.out.println("nulling 4"); mBitmap4 = null; java.lang.Runtime.getRuntime().gc(); Main.sleep(500); Bitmap.shutDown(); }
static void freeNativeStorage(int nativeDataPtr) { java.lang.System.out.println(("freeNativeStorage: " + nativeDataPtr)); }
protected boolean isBreak(int thisType, int prevType, int nextType) { switch (thisType) { case java.lang.Character.UPPERCASE_LETTER : if (nextType == (java.lang.Character.UPPERCASE_LETTER)) { return true; } case java.lang.Character.TITLECASE_LETTER : return prevType != (java.lang.Character.UPPERCASE_LETTER); case java.lang.Character.LOWERCASE_LETTER : return (prevType > (java.lang.Character.OTHER_LETTER)) || (prevType <= (java.lang.Character.UNASSIGNED)); case java.lang.Character.DECIMAL_DIGIT_NUMBER : case java.lang.Character.LETTER_NUMBER : case java.lang.Character.OTHER_NUMBER : return !(((prevType == (java.lang.Character.DECIMAL_DIGIT_NUMBER)) || (prevType == (java.lang.Character.LETTER_NUMBER))) || (prevType == (java.lang.Character.OTHER_NUMBER))); case java.lang.Character.MATH_SYMBOL : case java.lang.Character.CURRENCY_SYMBOL : case java.lang.Character.OTHER_PUNCTUATION : case java.lang.Character.DASH_PUNCTUATION : return true; default : return false; } }


public void run() { android.widget.ImageView imageView = ((android.widget.ImageView) (activity.findViewById(R.id.imageview))); imageView.setBackgroundResource(R.drawable.animationdrawable); mAnimationDrawable = ((android.graphics.drawable.AnimationDrawable) (imageView.getBackground())); }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); final android.app.Activity activity = getActivity(); mResources = activity.getResources(); try { runTestOnUiThread(new java.lang.Runnable() { public void run() { android.widget.ImageView imageView = ((android.widget.ImageView) (activity.findViewById(R.id.imageview))); imageView.setBackgroundResource(R.drawable.animationdrawable); mAnimationDrawable = ((android.graphics.drawable.AnimationDrawable) (imageView.getBackground())); } }); } catch (java.lang.Throwable t) { throw new java.lang.Exception(t); } }
@org.junit.Test @android.support.test.filters.MediumTest public void testRSUnitTest() throws java.lang.Exception { java.lang.String thisDeviceName = android.os.Build.DEVICE; int thisApiVersion = android.os.Build.VERSION.SDK_INT; android.util.Log.i(com.android.rs.test.RSTest.TAG, java.lang.String.format(("RenderScript testing (%s) " + "on device %s, API version %d"), mTest.toString(), thisDeviceName, thisApiVersion)); mTest.runTest(); org.junit.Assert.assertTrue(mTest.getSuccess()); }

private void trace(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodIdWide mid, @javax.annotation.Nonnull com.android.jack.ir.ast.JClassOrInterface receiverType, @javax.annotation.Nonnull com.android.jack.ir.ast.JType returnType, boolean mustTraceOverridingMethods) { com.android.jack.ir.ast.JMethod foundMethod = findMethod(mid, receiverType, returnType); if (foundMethod != null) { trace(foundMethod); if (mustTraceOverridingMethods) { brush.setMustTraceOverridingMethods(foundMethod); } } if ((receiverType instanceof com.android.jack.ir.ast.JDefinedClassOrInterface) && mustTraceOverridingMethods) { com.android.jack.shrob.obfuscation.SubClassOrInterfaceMarker marker = ((com.android.sched.marker.LocalMarkerManager) (receiverType)).getMarker(com.android.jack.shrob.obfuscation.SubClassOrInterfaceMarker.class); if (marker != null) { for (com.android.jack.ir.ast.JDefinedClass subClass : marker.getSubClasses()) { if (brush.traceMarked(subClass)) { com.android.jack.ir.ast.JMethod implementation = findImplementation(mid, returnType, subClass); if (implementation != null) { trace(implementation); brush.setMustTraceOverridingMethods(implementation); } brush.endTraceMarked(subClass); } } } } }
private java.io.File getTimeZoneDataApkFile(java.lang.String testId) throws java.lang.Exception { java.lang.String resourceName = getTimeZoneDataApkResourceName(testId); return extractResourceToFile(resourceName); }
private void connectNativeNetdService() { java.lang.Thread t = new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { synchronized(com.android.server.IpSecService.this) { android.net.util.NetdService.get(com.android.server.IpSecService.NETD_FETCH_TIMEOUT); } } }); t.run(); }
@org.junit.Test public void testDefaultProvisioningConfiguration() throws java.lang.Exception { final java.lang.String iface = "test_wlan0"; final android.net.ip.IpManager ipm = new android.net.ip.IpManager(mContext, iface, mCb, mNMService); android.net.ip.IpManager.ProvisioningConfiguration config = new android.net.ip.IpManager.ProvisioningConfiguration.Builder().withoutIPv4().withoutIpReachabilityMonitor().build(); ipm.startProvisioning(config); verify(mCb, times(1)).setNeighborDiscoveryOffload(true); verify(mCb, timeout(100).times(1)).setFallbackMulticastFilter(false); verify(mCb, never()).onProvisioningFailure(any()); ipm.stop(); verify(mNMService, timeout(100).times(1)).disableIpv6(iface); verify(mNMService, timeout(100).times(1)).clearInterfaceAddresses(iface); }
@android.test.suitebuilder.annotation.SmallTest public void testNetworkInfoOfTypeNone() { android.os.ConditionVariable broadcastCV = waitForConnectivityBroadcasts(1); verifyNoNetwork(); com.android.server.ConnectivityServiceTest.MockNetworkAgent lowpanNetwork = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_WIFI_AWARE); assertNull(mCm.getActiveNetworkInfo()); android.net.Network[] allNetworks = mCm.getAllNetworks(); com.android.server.ConnectivityServiceTest.assertLength(1, allNetworks); android.net.Network network = allNetworks[0]; com.android.server.NetworkCapabilities capabilities = mCm.getNetworkCapabilities(network); assertTrue(capabilities.hasTransport(com.android.server.TRANSPORT_WIFI_AWARE)); final android.net.NetworkRequest request = new android.net.NetworkRequest.Builder().addTransportType(com.android.server.TRANSPORT_WIFI_AWARE).build(); final com.android.server.ConnectivityServiceTest.TestNetworkCallback callback = new com.android.server.ConnectivityServiceTest.TestNetworkCallback(); mCm.registerNetworkCallback(request, callback); lowpanNetwork.connect(false, false); callback.expectAvailableCallbacks(lowpanNetwork); assertNull(mCm.getActiveNetworkInfo()); assertNull(mCm.getActiveNetwork()); lowpanNetwork.disconnect(); callback.expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.LOST, lowpanNetwork); mCm.unregisterNetworkCallback(callback); verifyNoNetwork(); if (broadcastCV.block(10)) { fail("expected no broadcast, but got CONNECTIVITY_ACTION broadcast"); } }
public void tearDown() throws java.lang.Exception { setMobileDataAlwaysOn(false); if ((mCellNetworkAgent) != null) { mCellNetworkAgent.disconnect(); mCellNetworkAgent = null; } if ((mWiFiNetworkAgent) != null) { mWiFiNetworkAgent.disconnect(); mWiFiNetworkAgent = null; } if ((mEthernetNetworkAgent) != null) { mEthernetNetworkAgent.disconnect(); mEthernetNetworkAgent = null; } super.tearDown(); }
















private android.net.IIpSecService getIpSecService() { android.os.IBinder b = android.os.ServiceManager.getService(android.content.Context.IPSEC_SERVICE); if (b == null) { throw new android.os.RemoteException("Failed to connect to IpSecService").rethrowAsRuntimeException(); } return IIpSecService.Stub.asInterface(b); }



@java.lang.Override public void requestNothing(byte[] checkTokenBytes, boolean success) { mPermissionHelper.enforceCallerHasPermission(com.android.server.timezone.RulesManagerService.REQUIRED_UPDATER_PERMISSION); com.android.server.timezone.CheckToken checkToken = null; if (checkTokenBytes != null) { checkToken = com.android.server.timezone.RulesManagerService.createCheckTokenOrThrow(checkTokenBytes); } mPackageTracker.recordCheckResult(checkToken, success); }
@java.lang.Override public void sendTriggerUpdateCheck(com.android.server.timezone.CheckToken checkToken) { android.app.timezone.RulesUpdaterContract.sendBroadcast(mContext, mUpdaterAppPackageName, checkToken.toByteArray()); }
@java.lang.Override public void run() { boolean success = false; try { success = mInstaller.stageUninstall(); int resultCode = (success) ? android.app.timezone.Callback.SUCCESS : android.app.timezone.Callback.ERROR_UNKNOWN_FAILURE; sendFinishedStatus(mCallback, resultCode); } catch (java.lang.Exception e) { android.util.Slog.w(com.android.server.timezone.RulesManagerService.TAG, "Failed to uninstall distro.", e); sendFinishedStatus(mCallback, Callback.ERROR_UNKNOWN_FAILURE); } finally { mPackageTracker.recordCheckResult(mCheckToken, success); mOperationInProgress.set(false); } }
@java.lang.Override public int requestInstall(android.os.ParcelFileDescriptor distroParcelFileDescriptor, byte[] checkTokenBytes, android.app.timezone.ICallback callback) { boolean closeParcelFileDescriptorOnExit = true; try { mPermissionHelper.enforceCallerHasPermission(com.android.server.timezone.RulesManagerService.REQUIRED_UPDATER_PERMISSION); com.android.server.timezone.CheckToken checkToken = null; if (checkTokenBytes != null) { checkToken = com.android.server.timezone.RulesManagerService.createCheckTokenOrThrow(checkTokenBytes); } synchronized(this) { if (distroParcelFileDescriptor == null) { throw new java.lang.NullPointerException("distroParcelFileDescriptor == null"); } if (callback == null) { throw new java.lang.NullPointerException("observer == null"); } if (mOperationInProgress.get()) { return android.app.timezone.RulesManager.ERROR_OPERATION_IN_PROGRESS; } mOperationInProgress.set(true); mExecutor.execute(new com.android.server.timezone.RulesManagerService.InstallRunnable(distroParcelFileDescriptor, checkToken, callback)); closeParcelFileDescriptorOnExit = false; return android.app.timezone.RulesManager.SUCCESS; } } finally { if ((distroParcelFileDescriptor != null) && closeParcelFileDescriptorOnExit) { try { distroParcelFileDescriptor.close(); } catch (java.io.IOException e) { android.util.Slog.w(com.android.server.timezone.RulesManagerService.TAG, "Failed to close distroParcelFileDescriptor", e); } } } }
@java.lang.Override public int requestUninstall(byte[] checkTokenBytes, android.app.timezone.ICallback callback) { mPermissionHelper.enforceCallerHasPermission(com.android.server.timezone.RulesManagerService.REQUIRED_UPDATER_PERMISSION); com.android.server.timezone.CheckToken checkToken = null; if (checkTokenBytes != null) { checkToken = com.android.server.timezone.RulesManagerService.createCheckTokenOrThrow(checkTokenBytes); } synchronized(this) { if (callback == null) { throw new java.lang.NullPointerException("callback == null"); } if (mOperationInProgress.get()) { return android.app.timezone.RulesManager.ERROR_OPERATION_IN_PROGRESS; } mOperationInProgress.set(true); mExecutor.execute(new com.android.server.timezone.RulesManagerService.UninstallRunnable(checkToken, callback)); return android.app.timezone.RulesManager.SUCCESS; } }
@java.lang.Override public void run() { boolean success = false; try (android.os.ParcelFileDescriptor pfd = mDistroParcelFileDescriptor) { final boolean isFdOwner = false; java.io.InputStream is = new java.io.FileInputStream(pfd.getFileDescriptor(), isFdOwner); com.android.timezone.distro.TimeZoneDistro distro = new com.android.timezone.distro.TimeZoneDistro(is); int installerResult = mInstaller.stageInstallWithErrorCode(distro); int resultCode = mapInstallerResultToApiCode(installerResult); sendFinishedStatus(mCallback, resultCode); success = true; } catch (java.lang.Exception e) { android.util.Slog.w(com.android.server.timezone.RulesManagerService.TAG, "Failed to install distro.", e); sendFinishedStatus(mCallback, Callback.ERROR_UNKNOWN_FAILURE); } finally { mPackageTracker.recordCheckResult(mCheckToken, success); mOperationInProgress.set(false); } }
private boolean addMediaPlayerInfo(com.android.bluetooth.avrcp.MediaPlayerInfo info) { int updateId = -1; boolean updated = false; boolean currentRemoved = false; synchronized(mMediaPlayerInfoList) { for (java.util.Map.Entry<java.lang.Integer, com.android.bluetooth.avrcp.MediaPlayerInfo> entry : mMediaPlayerInfoList.entrySet()) { com.android.bluetooth.avrcp.MediaPlayerInfo current = entry.getValue(); int id = entry.getKey(); if (info.getPackageName().equals(current.getPackageName())) { if (!(current.equalView(info))) { mMediaPlayerInfoList.remove(id); currentRemoved = (mCurrAddrPlayerID) == id; break; } updateId = id; updated = true; break; } } if (updateId == (-1)) { (mLastUsedPlayerID)++; updateId = mLastUsedPlayerID; mAvailablePlayerViewChanged = true; } mMediaPlayerInfoList.put(updateId, info); if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, ((((updated ? "update #" : "add #") + updateId) + ":") + (info.toString()))); if (currentRemoved || (updateId == (mCurrAddrPlayerID))) { updateCurrentController(updateId, mCurrBrowsePlayerID); } } return updated; }




public java.util.List<com.android.ahat.heapdump.AhatInstance> getHardReverseReferences() { return java.util.Arrays.asList(mHardReverseReferences); }








public java.util.List<com.android.ahat.heapdump.AhatInstance> getSoftReverseReferences() { return java.util.Arrays.asList(mSoftReverseReferences); }

public void applyPattern(java.lang.String pattern) { icuDecimalFormat.applyPattern(pattern); updateFieldsFromIcu(); }







@java.lang.Override public com.android.nfc.snep.SnepMessage doGet(int acceptableLength, android.nfc.NdefMessage msg) { android.nfc.NdefMessage response = mHandoverDataParser.getIncomingHandoverData(msg).handoverSelect; if (response != null) { onReceiveHandover(); return com.android.nfc.snep.SnepMessage.getSuccessResponse(response); } else { return com.android.nfc.snep.SnepMessage.getMessage(SnepMessage.RESPONSE_NOT_IMPLEMENTED); } }



public static void main(java.lang.String[] args) { try { Indirect.main(); java.lang.System.out.println("Succeeded unexpectedly"); } catch (java.lang.IncompatibleClassChangeError icce) { java.lang.System.out.println("Got expected ICCE"); } }
private synchronized java.util.List<java.lang.String> generatePackageDexopts(android.content.pm.PackageParser.Package pkg, int compilationReason) { final java.util.List<java.lang.String> commands = new java.util.ArrayList<java.lang.String>(); final com.android.server.pm.Installer collectingInstaller = new com.android.server.pm.Installer(mContext, true) { @java.lang.Override public void dexopt(java.lang.String apkPath, int uid, @android.annotation.Nullable java.lang.String pkgName, java.lang.String instructionSet, int dexoptNeeded, @android.annotation.Nullable java.lang.String outputPath, int dexFlags, java.lang.String compilerFilter, @android.annotation.Nullable java.lang.String volumeUuid, @android.annotation.Nullable java.lang.String sharedLibraries) throws com.android.server.pm.Installer.InstallerException { commands.add(com.android.server.pm.OtaDexoptService.buildCommand("dexopt", apkPath, uid, pkgName, instructionSet, dexoptNeeded, outputPath, dexFlags, compilerFilter, volumeUuid, sharedLibraries)); } }; com.android.server.pm.PackageDexOptimizer optimizer = new com.android.server.pm.OtaDexoptService.OTADexoptPackageDexOptimizer(collectingInstaller, mPackageManagerService.mInstallLock, mContext); java.lang.String[] libraryDependencies = pkg.usesLibraryFiles; if (pkg.isSystemApp()) { libraryDependencies = com.android.server.pm.OtaDexoptService.NO_LIBRARIES; } optimizer.performDexOpt(pkg, libraryDependencies, null, false, com.android.server.pm.PackageManagerServiceCompilerMapping.getCompilerFilterForReason(compilationReason), null, mPackageManagerService.getDexManager().isUsedByOtherApps(pkg.packageName), true); return commands; }
int performDexOpt(android.content.pm.PackageParser.Package pkg, java.lang.String[] sharedLibraries, java.lang.String[] instructionSets, boolean checkProfiles, java.lang.String targetCompilationFilter, com.android.server.pm.CompilerStats.PackageStats packageStats, boolean isUsedByOtherApps, boolean bootComplete) { if (!(com.android.server.pm.PackageDexOptimizer.canOptimizePackage(pkg))) { return com.android.server.pm.PackageDexOptimizer.DEX_OPT_SKIPPED; } synchronized(mInstallLock) { final boolean useLock = mSystemReady; if (useLock) { mDexoptWakeLock.setWorkSource(new android.os.WorkSource(pkg.applicationInfo.uid)); mDexoptWakeLock.acquire(); } try { return performDexOptLI(pkg, sharedLibraries, instructionSets, checkProfiles, targetCompilationFilter, packageStats, isUsedByOtherApps, bootComplete); } finally { if (useLock) { mDexoptWakeLock.release(); } } } }
private int performDexOptInternalWithDependenciesLI(android.content.pm.PackageParser.Package p, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete) { com.android.server.pm.PackageDexOptimizer pdo = (force) ? new com.android.server.pm.PackageDexOptimizer.ForcedUpdatePackageDexOptimizer(mPackageDexOptimizer) : mPackageDexOptimizer; java.util.Collection<android.content.pm.PackageParser.Package> deps = findSharedNonSystemLibraries(p); final java.lang.String[] instructionSets = com.android.server.pm.InstructionSets.getAppDexInstructionSets(p.applicationInfo); if (!(deps.isEmpty())) { for (android.content.pm.PackageParser.Package depPackage : deps) { pdo.performDexOpt(depPackage, null, instructionSets, false, com.android.server.pm.PackageManagerServiceCompilerMapping.getCompilerFilterForReason(com.android.server.pm.PackageManagerService.REASON_NON_SYSTEM_LIBRARY), getOrCreateCompilerPackageStats(depPackage), mDexManager.isUsedByOtherApps(p.packageName), bootComplete); } } return pdo.performDexOpt(p, p.usesLibraryFiles, instructionSets, checkProfiles, targetCompilerFilter, getOrCreateCompilerPackageStats(p), mDexManager.isUsedByOtherApps(p.packageName), bootComplete); }
@java.lang.Override public void forceDexOpt(java.lang.String packageName) { com.android.server.pm.PackageManagerService.enforceSystemOrRoot("forceDexOpt"); android.content.pm.PackageParser.Package pkg; synchronized(mPackages) { pkg = mPackages.get(packageName); if (pkg == null) { throw new java.lang.IllegalArgumentException(("Unknown package: " + packageName)); } } synchronized(mInstallLock) { android.os.Trace.traceBegin(com.android.server.pm.TRACE_TAG_PACKAGE_MANAGER, "dexopt"); final int res = performDexOptInternalWithDependenciesLI(pkg, false, com.android.server.pm.PackageManagerServiceCompilerMapping.getCompilerFilterForReason(com.android.server.pm.PackageManagerService.REASON_FORCED_DEXOPT), true, true); android.os.Trace.traceEnd(com.android.server.pm.TRACE_TAG_PACKAGE_MANAGER); if (res != (PackageDexOptimizer.DEX_OPT_PERFORMED)) { throw new java.lang.IllegalStateException(("Failed to dexopt: " + res)); } } }
private int performDexOptInternal(java.lang.String packageName, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete) { android.content.pm.PackageParser.Package p; synchronized(mPackages) { p = mPackages.get(packageName); if (p == null) { return PackageDexOptimizer.DEX_OPT_FAILED; } mPackageUsage.maybeWriteAsync(mPackages); mCompilerStats.maybeWriteAsync(); } long callingId = android.os.Binder.clearCallingIdentity(); try { synchronized(mInstallLock) { return performDexOptInternalWithDependenciesLI(p, checkProfiles, targetCompilerFilter, force, bootComplete); } } finally { android.os.Binder.restoreCallingIdentity(callingId); } }
private int performDexOptTraced(java.lang.String packageName, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete) { android.os.Trace.traceBegin(com.android.server.pm.TRACE_TAG_PACKAGE_MANAGER, "dexopt"); try { return performDexOptInternal(packageName, checkProfiles, targetCompilerFilter, force, bootComplete); } finally { android.os.Trace.traceEnd(com.android.server.pm.TRACE_TAG_PACKAGE_MANAGER); } }
private int getDexoptNeeded(java.lang.String path, java.lang.String isa, java.lang.String compilerFilter, boolean newProfile) { int dexoptNeeded; try { dexoptNeeded = dalvik.system.DexFile.getDexOptNeeded(path, isa, compilerFilter, newProfile); } catch (java.io.IOException ioe) { android.util.Slog.w(com.android.server.pm.PackageDexOptimizer.TAG, ("IOException reading apk: " + path), ioe); return com.android.server.pm.PackageDexOptimizer.DEX_OPT_FAILED; } return adjustDexoptNeeded(dexoptNeeded); }
@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter pw, java.lang.String[] args) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.server.IpSecService.TAG); pw.println("IpSecService Log:"); pw.println(("NetdNativeService Connection: " + (isNetdAlive() ? "alive" : "dead"))); pw.println(); }



public void probeAll() { java.util.Set<java.net.InetAddress> ipProbeList = new java.util.HashSet<java.net.InetAddress>(); synchronized(mLock) { ipProbeList.addAll(mIpWatchList.keySet()); } if ((!(ipProbeList.isEmpty())) && (stillRunning())) { mWakeLock.acquire(android.net.ip.IpReachabilityMonitor.getProbeWakeLockDuration()); } for (java.net.InetAddress target : ipProbeList) { if (!(stillRunning())) { break; } final int returnValue = android.net.ip.IpReachabilityMonitor.probeNeighbor(mInterfaceIndex, target); mLog.log(java.lang.String.format("put neighbor %s into NUD_PROBE state (rval=%d)", target.getHostAddress(), returnValue)); logEvent(IpReachabilityEvent.PROBE, returnValue); } mLastProbeTimeMs = android.os.SystemClock.elapsedRealtime(); }



@java.lang.Override protected void applyMutation(dexfuzz.program.Mutation uncastMutation) { dexfuzz.program.mutators.NewArrayLengthChanger.AssociatedMutation mutation = ((dexfuzz.program.mutators.NewArrayLengthChanger.AssociatedMutation) (uncastMutation)); dexfuzz.program.MutatableCode mutatableCode = mutation.mutatableCode; dexfuzz.program.MInsn newArrayInsn = newArrayLengthInsns.get(mutation.newArrayToChangeIdx); int newArrayInsnIdx = mutatableCode.getInstructionIndex(newArrayInsn); dexfuzz.program.MInsn newInsn = new dexfuzz.program.MInsn(); newInsn.insn = new dexfuzz.rawdex.Instruction(); newInsn.insn.info = dexfuzz.rawdex.Instruction.getOpcodeInfo(Opcode.CONST_16); newInsn.insn.vregA = ((int) (newArrayInsn.insn.vregB)); newInsn.insn.vregB = rng.nextInt(100); mutatableCode.insertInstructionAt(newInsn, newArrayInsnIdx); dexfuzz.Log.info(("Changed the length of the array to " + (newInsn.insn.vregB))); stats.incrementStat("Changed length of new array"); }
boolean isScoAvailable() { for (android.bluetooth.BluetoothDevice bd : mStateMachineMap.keySet()) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = mStateMachineMap.get(bd); int audioState = sm.getAudioState(bd); if (audioState != (android.bluetooth.BluetoothHeadsetClient.STATE_AUDIO_DISCONNECTED)) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, (((("Device " + bd) + " audio state ") + audioState) + " not disconnected")); return false; } } return true; }
boolean acceptCall(android.bluetooth.BluetoothDevice device, int flag) { enforceCallingOrSelfPermission(com.android.bluetooth.hfpclient.BLUETOOTH_PERM, "Need BLUETOOTH permission"); com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = getStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ("Cannot allocate SM for device " + device)); return false; } int connectionState = sm.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } android.os.Message msg = sm.obtainMessage(HeadsetClientStateMachine.ACCEPT_CALL); msg.arg1 = flag; sm.sendMessage(msg); return true; }
@org.junit.Ignore("Testing play store requires google login that may trigger 2-auth factor. Test to be initiated manually by tester.") @org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578827") public void testAppInstallation() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); final java.lang.String application = "Google Translate"; if (((testFramework.getApi()) >= 24) && (testFramework.isGoogleApiAndPlayImage())) { device.pressHome(); device.findObject(new android.support.test.uiautomator.UiSelector().description("Apps")).clickAndWaitForNewWindow(); boolean playStoreInstalled = com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.isPlayStoreInstalled(instrumentation); if (playStoreInstalled) { com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.searchGooglePlay(instrumentation, application); com.android.devtools.systemimage.uitest.smoke.PlayStoreTest.selectFromGooglePlay(device, ("App: " + application)); new com.android.devtools.systemimage.uitest.watchers.PlayStoreConfirmationWatcher(device).checkForCondition(); assertTrue("Unable to install the application from Google Play", com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.installApplication(instrumentation)); assertTrue("Unable to uninstall the application from Google Play", com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.uninstallApplication(instrumentation)); com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.resetPlayStore(instrumentation); device.pressHome(); } } }
@org.junit.Ignore("Testing play store requires google login that may trigger 2-auth factor. Test to be initiated manually by tester.") @org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14605490") public void testPlaySearch() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); final java.lang.String application = "Facebook"; if (((testFramework.getApi()) >= 24) && (testFramework.isGoogleApiImage())) { device.pressHome(); device.findObject(new android.support.test.uiautomator.UiSelector().description("Apps")).clickAndWaitForNewWindow(); boolean playStoreInstalled = com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.isPlayStoreInstalled(instrumentation); if (playStoreInstalled) { com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.searchGooglePlay(instrumentation, application); assertTrue("Target application not found in search.", new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws java.lang.Exception { return com.android.devtools.systemimage.uitest.smoke.PlayStoreTest.findInGooglePlay(device, ("App: " + application)); } })); com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.resetPlayStore(instrumentation); device.pressHome(); } } }
@org.junit.Ignore("Testing play store requires google login that may trigger 2-auth factor. Test to be initiated manually by tester.") @org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "1460343") public void testPayAppVerification() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); final java.lang.String application = "Weather Live"; if (((testFramework.getApi()) >= 24) && (testFramework.isGoogleApiImage())) { device.pressHome(); device.findObject(new android.support.test.uiautomator.UiSelector().description("Apps")).clickAndWaitForNewWindow(); boolean playStoreInstalled = com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.isPlayStoreInstalled(instrumentation); if (playStoreInstalled) { com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.searchGooglePlay(instrumentation, application); com.android.devtools.systemimage.uitest.smoke.PlayStoreTest.selectFromGooglePlay(device, ("App: " + application)); new com.android.devtools.systemimage.uitest.watchers.PlayStoreConfirmationWatcher(device).checkForCondition(); assertTrue("Target application is not a pay app", new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws android.support.test.uiautomator.UiObjectNotFoundException { return device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.GOOGLE_PLAY_BUY_BUTTON_RES).textContains("$")).exists(); } })); com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.resetPlayStore(instrumentation); device.pressHome(); } } }

private void doTest(boolean isGoog, java.lang.String mimeType, int w, int h) throws java.lang.Exception { java.lang.String[] encoderNames = getEncoderName(mimeType, isGoog); if ((encoderNames.length) == 0) { android.util.Log.i(com.android.cts.videoperf.VideoEncoderDecoderTest.TAG, (isGoog ? "Google " : (("Non-google " + "encoder for ") + mimeType) + " not found")); return; } java.lang.String[] decoderNames = getDecoderName(mimeType, isGoog); if ((decoderNames.length) == 0) { android.util.Log.i(com.android.cts.videoperf.VideoEncoderDecoderTest.TAG, (isGoog ? "Google " : (("Non-google " + "decoder for ") + mimeType) + " not found")); return; } for (java.lang.String encoderName : encoderNames) { for (java.lang.String decoderName : decoderNames) { doTestByName(encoderName, decoderName, mimeType, w, h); } } }

public java.lang.String getHostnameOrIP() { if ((peerHostname) != null) { return peerHostname; } java.net.InetAddress peerAddress = getInetAddress(); if (peerAddress != null) { return peerAddress.getHostAddress(); } return null; }
private boolean isIpAddress(java.lang.String address) { if (address == null) return false; return Patterns.IP_ADDRESS.matcher(address).matches(); }
public void testEncryption() throws java.lang.Exception { if ((!(isRequired())) || (android.security.cts.EncryptionTest.deviceIsEncrypted())) { return; } assertFalse("Device encryption is required", android.security.cts.EncryptionTest.aesIsFast()); }
public static void insertMethodCallAfter(org.objectweb.asm.tree.MethodNode mn, java.util.List<org.objectweb.asm.tree.analysis.Frame> frameMap, java.util.List<java.util.List<org.objectweb.asm.tree.TryCatchBlockNode>> handlersMap, org.objectweb.asm.tree.AbstractInsnNode node, int index, org.objectweb.asm.tree.MethodInsnNode call) { java.util.List<org.objectweb.asm.tree.TryCatchBlockNode> handlers = handlersMap.get((index + 1)); org.objectweb.asm.tree.InsnList instructions = mn.instructions; org.objectweb.asm.tree.LabelNode end = new org.objectweb.asm.tree.LabelNode(); instructions.insert(node, end); frameMap.add((index + 1), null); handlersMap.add((index + 1), null); instructions.insert(node, call); frameMap.add((index + 1), null); handlersMap.add((index + 1), null); org.objectweb.asm.tree.LabelNode start = new org.objectweb.asm.tree.LabelNode(); instructions.insert(node, start); frameMap.add((index + 1), null); handlersMap.add((index + 1), null); lockedregioncodeinjection.LockFindingClassVisitor.updateCatchHandler(mn, handlers, start, end, handlersMap); }



@org.junit.Test public void testV1SignedAttrs() throws java.lang.Exception { com.android.apksig.ApkVerifierTest.assertVerified(verify("v1-only-with-signed-attrs.apk")); }
private void notifyPackageManager(java.util.List<java.lang.String> dexPaths) { java.lang.String packageName = android.app.ActivityThread.currentPackageName(); try { android.app.ActivityThread.getPackageManager().notifyDexLoad(packageName, dexPaths, dalvik.system.VMRuntime.getRuntime().vmInstructionSet()); } catch (android.os.RemoteException re) { android.util.Slog.e(android.app.DexLoadReporter.TAG, ("Failed to notify PM about dex load for package " + packageName), re); } }
public void run(java.lang.String[] args) { boolean validCommand = false; if ((args.length) >= 2) { boolean flag = false; if ("enable".equals(args[1])) { flag = true; validCommand = true; } else if ("disable".equals(args[1])) { flag = false; validCommand = true; } if (validCommand) { android.net.wifi.IWifiManager wifiMgr = IWifiManager.Stub.asInterface(android.os.ServiceManager.getService(Context.WIFI_SERVICE)); try { wifiMgr.setWifiEnabled("com.android.shell", flag); } catch (android.os.RemoteException e) { java.lang.System.err.println(("Wi-Fi operation failed: " + e)); } return; } } java.lang.System.err.println(longHelp()); }
public void setDataRoamingEnabled(boolean enabled) { final int phoneSubId = mPhone.getSubId(); if ((getDataRoamingEnabled()) != enabled) { int roaming = (enabled) ? 1 : 0; if ((android.telephony.TelephonyManager.getDefault().getSimCount()) == 1) { Settings.Global.putInt(mResolver, Settings.Global.DATA_ROAMING, roaming); } else { Settings.Global.putInt(mResolver, ((Settings.Global.DATA_ROAMING) + phoneSubId), roaming); } mSubscriptionManager.setDataRoaming(roaming, phoneSubId); if (com.android.internal.telephony.dataconnection.DcTracker.DBG) { log(((("setDataRoamingEnabled: set phoneSubId=" + phoneSubId) + " isRoaming=") + enabled)); } } else { if (com.android.internal.telephony.dataconnection.DcTracker.DBG) { log(((("setDataRoamingEnabled: unchanged phoneSubId=" + phoneSubId) + " isRoaming=") + enabled)); } } }

private void connectNativeNetdService() { boolean nativeServiceAvailable = false; try { mNetdService = INetd.Stub.asInterface(android.os.ServiceManager.getService(com.android.server.NetworkManagementService.NETD_SERVICE_NAME)); nativeServiceAvailable = mNetdService.isAlive(); } catch (android.os.RemoteException e) { } if (!nativeServiceAvailable) { android.util.Slog.wtf(com.android.server.NetworkManagementService.TAG, ("Can't connect to NativeNetdService " + (com.android.server.NetworkManagementService.NETD_SERVICE_NAME))); } }


@java.lang.Override public android.net.IpSecSpiResponse reserveSecurityParameterIndex(int direction, java.lang.String remoteAddress, int requestedSpi, android.os.IBinder binder) throws android.os.RemoteException { int resourceId = com.android.server.IpSecService.mNextResourceId.getAndIncrement(); int spi = android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX; java.lang.String localAddress = ""; try { synchronized(mLock) { spi = getNetdInstance().ipSecAllocateSpi(resourceId, direction, localAddress, remoteAddress, requestedSpi); android.util.Log.d(com.android.server.IpSecService.TAG, ("Allocated SPI " + spi)); mSpiRecords.put(resourceId, new com.android.server.IpSecService.SpiRecord(resourceId, binder, direction, localAddress, remoteAddress, spi)); } } catch (android.os.ServiceSpecificException e) { return new android.net.IpSecSpiResponse(IpSecManager.Status.SPI_UNAVAILABLE, android.net.IpSecManager.INVALID_RESOURCE_ID, spi); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return new android.net.IpSecSpiResponse(IpSecManager.Status.OK, resourceId, spi); }

public void testRecorderVideo() throws java.lang.Exception { if (!(hasCamera())) { return; } mCamera = android.hardware.Camera.open(0); setSupportedResolution(mCamera); mCamera.unlock(); mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA); mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT); mMediaRecorder.setOutputFile(OUTPUT_PATH2); mMediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.DEFAULT); mMediaRecorder.setPreviewDisplay(mActivity.getSurfaceHolder().getSurface()); mMediaRecorder.setVideoSize(android.media.cts.MediaRecorderTest.mVideoWidth, android.media.cts.MediaRecorderTest.mVideoHeight); java.io.FileOutputStream fos = new java.io.FileOutputStream(OUTPUT_PATH2); java.io.FileDescriptor fd = fos.getFD(); mMediaRecorder.setOutputFile(fd); long maxFileSize = (android.media.cts.MediaRecorderTest.MAX_FILE_SIZE) * 10; recordMedia(maxFileSize, mOutFile2); assertFalse(checkLocationInFile(OUTPUT_PATH2)); fos.close(); }


synchronized void recordScanStop() { if (!(isScanning)) return; (this.scansStopped)++; isScanning = false; stopTime = android.os.SystemClock.elapsedRealtime(); long scanDuration = (stopTime) - (startTime); minScanTime = java.lang.Math.min(scanDuration, minScanTime); maxScanTime = java.lang.Math.max(scanDuration, maxScanTime); totalScanTime += scanDuration; com.android.bluetooth.gatt.AppScanStats.LastScan curr = lastScans.get(((lastScans.size()) - 1)); curr.duration = scanDuration; if ((lastScans.size()) > (com.android.bluetooth.gatt.AppScanStats.NUM_SCAN_DURATIONS_KEPT)) { lastScans.remove(0); } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_STOP); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); gattService.addScanEvent(scanEvent); try { batteryStats.noteBleScanStopped(workSource); } catch (android.os.RemoteException e) { } }
synchronized void recordScanStart(android.bluetooth.le.ScanSettings settings, boolean filtered) { if (isScanning) return; (this.scansStarted)++; isScanning = true; startTime = android.os.SystemClock.elapsedRealtime(); com.android.bluetooth.gatt.AppScanStats.LastScan scan = new com.android.bluetooth.gatt.AppScanStats.LastScan(startTime, 0, false, false, filtered); if (settings != null) { scan.opportunistic = (settings.getScanMode()) == (android.bluetooth.le.ScanSettings.SCAN_MODE_OPPORTUNISTIC); scan.background = ((settings.getCallbackType()) & (android.bluetooth.le.ScanSettings.CALLBACK_TYPE_FIRST_MATCH)) != 0; } lastScans.add(scan); com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_START); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); gattService.addScanEvent(scanEvent); try { batteryStats.noteBleScanStarted(workSource); } catch (android.os.RemoteException e) { } }
synchronized void addResult() { if (!(lastScans.isEmpty())) (lastScans.get(((lastScans.size()) - 1)).results)++; (results)++; }
public boolean refreshNeeded() { return (this.softTtl) < (java.lang.System.currentTimeMillis()); }
public boolean isExpired() { return (this.ttl) < (java.lang.System.currentTimeMillis()); }
public java.lang.String getIsimIst() throws android.os.RemoteException { com.android.internal.telephony.Phone phone = getPhone(getDefaultSubscription()); mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, "Requires READ_PRIVILEGED_PHONE_STATE"); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimIst(); } else { return null; } }
public java.lang.String getIsimDomain() { com.android.internal.telephony.Phone phone = getPhone(getDefaultSubscription()); mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, "Requires READ_PRIVILEGED_PHONE_STATE"); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimDomain(); } else { return null; } }
public java.lang.String getIsimImpi() { com.android.internal.telephony.Phone phone = getPhone(getDefaultSubscription()); mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, "Requires READ_PRIVILEGED_PHONE_STATE"); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimImpi(); } else { return null; } }
public java.lang.String[] getIsimPcscf() throws android.os.RemoteException { com.android.internal.telephony.Phone phone = getPhone(getDefaultSubscription()); mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, "Requires READ_PRIVILEGED_PHONE_STATE"); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimPcscf(); } else { return null; } }
public java.lang.String[] getIsimImpu() { com.android.internal.telephony.Phone phone = getPhone(getDefaultSubscription()); mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, "Requires READ_PRIVILEGED_PHONE_STATE"); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimImpu(); } else { return null; } }
public java.lang.String getIsimIst() { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) return null; return info.getIsimIst(); } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } }
public java.lang.String[] getIsimImpu() { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) return null; return info.getIsimImpu(); } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } }
public java.lang.String getIsimImpi() { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) return null; return info.getIsimImpi(); } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } }
public java.lang.String getIsimDomain() { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) return null; return info.getIsimDomain(); } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } }
public java.lang.String[] getIsimPcscf() { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) return null; return info.getIsimPcscf(); } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { final java.lang.String action = intent.getAction(); final java.lang.String iccState = intent.getStringExtra(IccCardConstants.INTENT_KEY_ICC_STATE); if (TelephonyIntents.ACTION_SIM_STATE_CHANGED.equals(action)) { if ((IccCardConstants.INTENT_VALUE_ICC_LOADED.equals(iccState)) || (IccCardConstants.INTENT_VALUE_ICC_ABSENT.equals(iccState))) { sendEmptyMessage(com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_RESET); } } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCarrierActionResetOnAPM() { Settings.Global.putInt(mFakeContentResolver, Settings.Global.AIRPLANE_MODE_ON, 1); mFakeContentProvider.simulateChange(Settings.Global.getUriFor(Settings.Global.AIRPLANE_MODE_ON)); com.android.internal.telephony.TelephonyTestUtils.waitForMs(200); org.mockito.ArgumentCaptor<android.os.Message> message = org.mockito.ArgumentCaptor.forClass(android.os.Message.class); verify(mDataActionHandler).sendMessageAtTime(message.capture(), anyLong()); assertEquals(com.android.internal.telephony.CarrierActionAgentTest.DATA_CARRIER_ACTION_EVENT, message.getValue().what); verify(mRadioActionHandler).sendMessageAtTime(message.capture(), anyLong()); assertEquals(com.android.internal.telephony.CarrierActionAgentTest.RADIO_CARRIER_ACTION_EVENT, message.getValue().what); }
void registerImsConnectionStateListener() { try { com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(this, android.telephony.SubscriptionManager.getDefaultVoicePhoneId()); if (imsManager != null) { imsManager.addRegistrationListener(ImsServiceClass.MMTEL, mImsConnectionStateListener); } } catch (com.android.ims.ImsException e) { logger.error("addRegistrationListener exception=", e); } }



public void testSetZeroDigitForPattern() { java.text.DecimalFormatSymbols decimalFormatSymbols = new java.text.DecimalFormatSymbols(); decimalFormatSymbols.setZeroDigit('a'); java.text.DecimalFormat formatter = new java.text.DecimalFormat(); formatter.setDecimalFormatSymbols(decimalFormatSymbols); formatter.applyLocalizedPattern("#.aa"); assertEquals("e.fa", formatter.format(4.5)); }
public void test_equals() { java.text.NumberFormat nf1 = java.text.NumberFormat.getInstance(); java.text.NumberFormat nf2 = java.text.NumberFormat.getInstance(); assertTrue("Objects are not equal", nf1.equals(nf2)); assertTrue("THe same Objects are not equal", nf1.equals(nf1)); nf2.setMaximumIntegerDigits(100); assertFalse("Different NumberFormat are equal", nf1.equals(nf2)); nf2.setMaximumIntegerDigits(nf1.getMaximumIntegerDigits()); assertTrue("THe same Objects are not equal", nf1.equals(nf2)); nf1 = java.text.NumberFormat.getIntegerInstance(); nf2 = java.text.NumberFormat.getIntegerInstance(java.util.Locale.CHINA); assertFalse("Different NumberFormat are equal", nf1.equals(nf2)); assertFalse("Object is equal null", nf1.equals(null)); }
public void testBug15081434() throws java.lang.Exception { java.text.DecimalFormat df = ((java.text.DecimalFormat) (java.text.NumberFormat.getCurrencyInstance(java.util.Locale.US))); try { df.parse(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.applyLocalizedPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.applyPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.applyPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.format(null, new java.lang.StringBuffer(), new java.text.FieldPosition(0)); fail(); } catch (java.lang.IllegalArgumentException expected) { } try { df.parse(null, new java.text.ParsePosition(0)); fail(); } catch (java.lang.NullPointerException expected) { } df.setDecimalFormatSymbols(null); try { df.setCurrency(null); fail(); } catch (java.lang.NullPointerException expected) { } df.setNegativePrefix(null); df.setNegativeSuffix(null); df.setPositivePrefix(null); df.setPositiveSuffix(null); try { df.setRoundingMode(null); fail(); } catch (java.lang.NullPointerException expected) { } }
public void test_setMaximumIntegerDigits() { java.text.NumberFormat format = java.text.NumberFormat.getInstance(); format.setMaximumIntegerDigits(2); assertEquals("Wrong result: case 1", "23", format.format(123)); format.setMaximumIntegerDigits(java.lang.Integer.MIN_VALUE); assertEquals("Wrong result: case 2", "0", format.format(123)); }
public void test_formatDouble_minimumFractionDigits() { java.text.DecimalFormat df = new java.text.DecimalFormat("###0.##", new java.text.DecimalFormatSymbols(java.util.Locale.US)); df.setMinimumFractionDigits(4); assertEquals(4, df.getMinimumFractionDigits()); assertEquals("1.2300", df.format(1.23)); df.setMaximumFractionDigits(2); assertEquals(2, df.getMinimumFractionDigits()); assertEquals("456.00", df.format(456)); df = new java.text.DecimalFormat("##0.#", new java.text.DecimalFormatSymbols(java.util.Locale.US)); df.setMinimumFractionDigits(30); assertEquals("0.000000000000000000000000000000", df.format(0.0)); assertEquals("-0.000000000000000000000000000000", df.format((-0.0))); assertEquals("1.000000000000000000000000000000", df.format(1.0)); assertEquals("-1.000000000000000000000000000000", df.format((-1.0))); }
public void test_applyLocalizedPattern() throws java.lang.Exception { java.text.DecimalFormat format = new java.text.DecimalFormat(); format.applyLocalizedPattern("#.#"); assertEquals("Wrong pattern 1", "#0.#", format.toLocalizedPattern()); format.applyLocalizedPattern("#."); assertEquals("Wrong pattern 2", "#0.", format.toLocalizedPattern()); format.applyLocalizedPattern("#"); assertEquals("Wrong pattern 3", "#", format.toLocalizedPattern()); format.applyLocalizedPattern(".#"); assertEquals("Wrong pattern 4", "#.0", format.toLocalizedPattern()); try { format.applyLocalizedPattern("'#,#:#0.0#;(#)"); fail(); } catch (java.lang.IllegalArgumentException expected) { } try { format.applyLocalizedPattern(((java.lang.String) (null))); fail(); } catch (java.lang.NullPointerException expected) { } }
public void test_setPositiveSuffix() throws java.lang.Exception { java.text.DecimalFormat format = new java.text.DecimalFormat(); assertEquals("", format.getPositiveSuffix()); format.setPositiveSuffix("PosSfx"); assertEquals("PosSfx", format.getPositiveSuffix()); assertTrue(((format.parse("123.45PosSfx").doubleValue()) == 123.45)); format.setPositiveSuffix(""); assertEquals("", format.getPositiveSuffix()); format.setPositiveSuffix(null); assertNull(format.getPositiveSuffix()); }
public void test_setCurrency() throws java.lang.Exception { java.text.NumberFormat nf = java.text.NumberFormat.getCurrencyInstance(java.util.Locale.US); java.util.Currency amd = java.util.Currency.getInstance("AMD"); assertEquals(0, amd.getDefaultFractionDigits()); nf.setCurrency(amd); assertEquals(2, nf.getMinimumFractionDigits()); assertEquals(2, nf.getMaximumFractionDigits()); assertEquals("AMD50.00", nf.format(50.0)); nf.setMaximumFractionDigits(amd.getDefaultFractionDigits()); assertEquals("AMD50", nf.format(50.0)); nf = java.text.NumberFormat.getCurrencyInstance(java.util.Locale.US); nf.setCurrency(java.util.Currency.getInstance("EUR")); assertEquals("€50.00", nf.format(50.0)); nf.setCurrency(java.util.Currency.getInstance("JPY")); assertEquals("¥50.00", nf.format(50.0)); nf.setCurrency(java.util.Currency.getInstance("CHF")); assertEquals("CHF50.00", nf.format(50.0)); }
public void testConstructor_stringAndSymbols() { java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(java.util.Locale.CANADA); java.text.DecimalFormat format1 = new java.text.DecimalFormat("'$'1000.0000", dfs); java.text.DecimalFormat format2 = new java.text.DecimalFormat(); format2.applyPattern("'$'1000.0000"); format2.setDecimalFormatSymbols(dfs); assertTrue("Constructed format did not match applied format object", format2.equals(format1)); assertTrue("Constructed format did not match applied format object", (!(format1.equals(new java.text.DecimalFormat("'$'1000.0000", new java.text.DecimalFormatSymbols(java.util.Locale.CHINA)))))); try { new java.text.DecimalFormat("'$'1000.0000", ((java.text.DecimalFormatSymbols) (null))); fail(); } catch (java.lang.NullPointerException expected) { } try { new java.text.DecimalFormat(null, new java.text.DecimalFormatSymbols()); fail(); } catch (java.lang.NullPointerException expected) { } try { new java.text.DecimalFormat(null, ((java.text.DecimalFormatSymbols) (null))); fail(); } catch (java.lang.NullPointerException expected) { } try { new java.text.DecimalFormat("$'", new java.text.DecimalFormatSymbols()); fail(); } catch (java.lang.IllegalArgumentException expected) { } }
public void test_setNegativeSuffix() throws java.lang.Exception { java.text.DecimalFormat format = new java.text.DecimalFormat(); assertEquals("", format.getNegativeSuffix()); format.setNegativeSuffix("NegSfx"); assertEquals("NegSfx", format.getNegativeSuffix()); assertTrue(((format.parse("123.45NegPfx").doubleValue()) == 123.45)); format.setNegativeSuffix(""); assertEquals("", format.getNegativeSuffix()); format.setNegativeSuffix(null); assertNull(format.getNegativeSuffix()); }
public void test_positiveExponentSign() throws java.lang.Exception { format.applyPattern("0.###E+0"); assertEquals("1E+2", format.format(100)); assertEquals("1E-2", format.format(0.01)); assertEquals(100, format.parse("1E+2").intValue()); assertEquals(0.01F, format.parse("1E-2").floatValue()); format.applyPattern("0.###E0 m/s"); assertEquals("1E2 m/s", format.format(100)); assertEquals(100, format.parse("1E2 m/s").intValue()); format.applyPattern("00.###E0"); assertEquals("12.3E-4", format.format(0.00123)); assertEquals(0.00123F, format.parse("12.3E-4").floatValue()); format.applyPattern("##0.####E0"); assertEquals("12.345E3", format.format(12345)); assertEquals(12345, format.parse("12.345E3").intValue()); try { format.applyPattern("#,##0.##E0"); fail(("expected IllegalArgumentException was not thrown for " + "pattern \"#,##0.##E0\".")); } catch (java.lang.IllegalArgumentException e) { } }
public void test_parse_withMultiplier() { java.text.DecimalFormat format = ((java.text.DecimalFormat) (java.text.NumberFormat.getNumberInstance(java.util.Locale.ENGLISH))); java.lang.Number result; format.setMultiplier(100); result = format.parse("9223372036854775807", new java.text.ParsePosition(0)); assertEquals(("Wrong result type multiplier 100: " + result), java.lang.Double.class, result.getClass()); assertEquals(("Wrong result for multiplier 100: " + result), 9.223372036854776E16, result.doubleValue()); format.setMultiplier(1000); result = format.parse("9223372036854775807", new java.text.ParsePosition(0)); assertEquals(("Wrong result type multiplier 1000: " + result), java.lang.Double.class, result.getClass()); assertEquals(("Wrong result for multiplier 1000: " + result), 9.223372036854776E15, result.doubleValue()); format.setMultiplier(10000); result = format.parse("9223372036854775807", new java.text.ParsePosition(0)); assertEquals(("Wrong result type multiplier 10000: " + result), java.lang.Double.class, result.getClass()); assertEquals(("Wrong result for multiplier 10000: " + result), 9.223372036854776E14, result.doubleValue()); }
public void test_sigDigitPatterns() throws java.lang.Exception { java.text.DecimalFormat format = ((java.text.DecimalFormat) (java.text.NumberFormat.getInstance(java.util.Locale.US))); format.applyPattern("@@@"); assertEquals("sigDigit doesn't work", "12300", format.format(12345)); assertEquals("sigDigit doesn't work", "0.123", format.format(0.12345)); format.applyPattern("@@##"); assertEquals("sigDigit doesn't work", "3.142", format.format(3.14159)); assertEquals("sigDigit doesn't work", "1.23", format.format(1.23004)); format.applyPattern("@@###E0"); assertEquals("1.23E1", format.format(12.3)); format.applyPattern("0.0###E0"); assertEquals("1.23E1", format.format(12.3)); try { format.applyPattern("@00"); fail(("expected IllegalArgumentException was not thrown for " + "pattern \"@00\".")); } catch (java.lang.IllegalArgumentException e) { } try { format.applyPattern("@.###"); fail(("expected IllegalArgumentException was not thrown for " + "pattern \"@.###\".")); } catch (java.lang.IllegalArgumentException e) { } }
public void test_setNegativePrefix() throws java.lang.Exception { java.text.DecimalFormat format = new java.text.DecimalFormat(); assertEquals("-", format.getNegativePrefix()); format.setNegativePrefix("NegPrf"); assertEquals("NegPrf", format.getNegativePrefix()); assertTrue(((format.parse("NegPrf123.45").doubleValue()) == (-123.45))); format.setNegativePrefix(""); assertEquals("", format.getNegativePrefix()); format.setNegativePrefix(null); assertNull(format.getNegativePrefix()); }
public void testConstructor_string() { java.text.DecimalFormat format = new java.text.DecimalFormat("'$'0000.0000"); java.text.DecimalFormat format1 = new java.text.DecimalFormat(); format1.applyPattern("'$'0000.0000"); assertTrue("Constructed format did not match applied format object", format.equals(format1)); new java.text.DecimalFormat("####.##"); new java.text.DecimalFormat("######.######"); new java.text.DecimalFormat("000000.000000"); new java.text.DecimalFormat("######.000000"); new java.text.DecimalFormat("000000.######"); new java.text.DecimalFormat(" ###.###"); new java.text.DecimalFormat("$#####.######"); new java.text.DecimalFormat("$$####.######"); new java.text.DecimalFormat("%#,##,###,####"); new java.text.DecimalFormat("#,##0.00;(#,##0.00)"); try { new java.text.DecimalFormat(null); fail(); } catch (java.lang.NullPointerException expected) { } try { new java.text.DecimalFormat("%#,##,###,####'"); fail(); } catch (java.lang.IllegalArgumentException expected) { } try { new java.text.DecimalFormat("#.##0.00"); fail(); } catch (java.lang.IllegalArgumentException expected) { } }
public void test_applyPattern() { java.text.DecimalFormat format = new java.text.DecimalFormat("#.#"); assertEquals("Wrong pattern 1", "#0.#", format.toPattern()); format = new java.text.DecimalFormat("#."); assertEquals("Wrong pattern 2", "#0.", format.toPattern()); format = new java.text.DecimalFormat("#"); assertEquals("Wrong pattern 3", "#", format.toPattern()); format = new java.text.DecimalFormat(".#"); assertEquals("Wrong pattern 4", "#.0", format.toPattern()); format = new java.text.DecimalFormat(); format.setMinimumIntegerDigits(0); format.setMinimumFractionDigits(0); format.setMaximumFractionDigits(0); format.applyPattern("00.0#"); assertEquals("Minimum integer digits not set", 2, format.getMinimumIntegerDigits()); assertEquals("Minimum fraction digits not set", 1, format.getMinimumFractionDigits()); assertEquals("Maximum fraction digits not set", 2, format.getMaximumFractionDigits()); try { format.applyPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { format.applyPattern("%#,##,###,####'"); fail(); } catch (java.lang.IllegalArgumentException expected) { } try { format.applyPattern("#.##0.00"); fail(); } catch (java.lang.IllegalArgumentException expected) { } }
public void test_formatLong_minimumIntegerDigits() { java.text.DecimalFormat df = new java.text.DecimalFormat("###0.##", new java.text.DecimalFormatSymbols(java.util.Locale.US)); df.setMinimumIntegerDigits(3); assertEquals(3, df.getMinimumIntegerDigits()); assertEquals("012", df.format(12)); df.setMaximumIntegerDigits(2); assertEquals(2, df.getMinimumIntegerDigits()); assertEquals("00.7", df.format(0.7)); }
public void test_setPositivePrefix() throws java.lang.Exception { java.text.DecimalFormat format = new java.text.DecimalFormat(); assertEquals("", format.getPositivePrefix()); format.setPositivePrefix("PosPrf"); assertEquals("PosPrf", format.getPositivePrefix()); assertTrue(((format.parse("PosPrf123.45").doubleValue()) == 123.45)); format.setPositivePrefix(""); assertEquals("", format.getPositivePrefix()); format.setPositivePrefix(null); assertNull(format.getPositivePrefix()); }
public void testRunNormalInputOnWindows() throws com.android.tradefed.device.DeviceNotAvailableException, java.lang.IllegalArgumentException { java.lang.String originalName = java.lang.System.getProperty(VtsMultiDeviceTest.OS_NAME); java.lang.System.setProperty(VtsMultiDeviceTest.OS_NAME, VtsMultiDeviceTest.WINDOWS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice()); mTest.setRunUtil(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockRunUtil("where", "python.exe", CommandStatus.SUCCESS)); try { mTest.run(mMockInvocationListener); } finally { java.lang.System.setProperty(VtsMultiDeviceTest.OS_NAME, originalName); } }
public boolean LoadVendorConfig(com.android.tradefed.build.IBuildInfo buildInfo) throws java.lang.RuntimeException { java.util.Map<java.lang.String, java.lang.String> attrs = buildInfo.getBuildAttributes(); mDefaultType = attrs.get(com.android.tradefed.util.VtsVendorConfigFileUtil.KEY_VENDOR_TEST_CONFIG_DEFAULT_TYPE); mVendorConfigFilePath = attrs.get(com.android.tradefed.util.VtsVendorConfigFileUtil.KEY_VENDOR_TEST_CONFIG_FILE_PATH); return LoadVendorConfig(mDefaultType, mVendorConfigFilePath); }
private boolean dirExistsAndHaveReadAccess(java.lang.String path) { java.io.File pathDir = new java.io.File(path); if ((!(pathDir.exists())) || (!(pathDir.isDirectory()))) { com.android.tradefed.log.LogUtil.CLog.i("Directory %s does not exist.", pathDir); return false; } if (!(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.isOnWindows())) { com.android.tradefed.util.CommandResult c = mRunUtil.runTimedCmd(((com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.BASE_TIMEOUT) * 5), "ls", path); if ((c.getStatus()) != (com.android.tradefed.util.CommandStatus.SUCCESS)) { com.android.tradefed.log.LogUtil.CLog.i(java.lang.String.format("Failed to read dir: %s. Result %s. stdout: %s, stderr: %s", path, c.getStatus(), c.getStdout(), c.getStderr())); return false; } return true; } else { try { java.lang.String[] pathDirList = pathDir.list(); if (pathDirList == null) { com.android.tradefed.log.LogUtil.CLog.i("Failed to read dir: %s. Please check access permission.", pathDir); return false; } } catch (java.lang.SecurityException e) { com.android.tradefed.log.LogUtil.CLog.i(java.lang.String.format("Failed to read dir %s with SecurityException %s", pathDir, e)); return false; } return true; } }
private void activate() { java.io.File binDir = new java.io.File(mVenvDir, (com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.isOnWindows() ? "Scripts" : "bin")); mRunUtil.setWorkingDir(binDir); java.lang.String path = java.lang.System.getenv(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PATH); mRunUtil.setEnvVariable(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PATH, ((binDir + (java.io.File.pathSeparator)) + path)); java.io.File pipFile = new java.io.File(binDir, com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PIP); pipFile.setExecutable(true); mPip = pipFile.getAbsolutePath(); }


@java.lang.Override public int hashCode() { return (((address.hashCode()) + (11 * (prefixLength))) + (19 * (flags))) + (43 * (scope)); }
@android.test.suitebuilder.annotation.SmallTest public void testHashCode() { android.net.IpPrefix p; int oldCode = -1; java.util.Random random = new java.util.Random(); for (int i = 0; i < 100; i++) { if (random.nextBoolean()) { byte[] b = new byte[4]; random.nextBytes(b); p = new android.net.IpPrefix(b, random.nextInt(33)); assertNotEqual(oldCode, p.hashCode()); oldCode = p.hashCode(); } else { byte[] b = new byte[16]; random.nextBytes(b); p = new android.net.IpPrefix(b, random.nextInt(129)); assertNotEqual(oldCode, p.hashCode()); oldCode = p.hashCode(); } } }
private static java.lang.String connectDetail(java.io.FileDescriptor fd, java.net.InetAddress inetAddress, int port, int timeoutMs, java.lang.Exception cause) { java.net.InetSocketAddress localAddress = null; try { localAddress = libcore.io.IoBridge.getLocalInetSocketAddress(fd); } catch (java.net.SocketException ignored) { } java.lang.StringBuilder sb = new java.lang.StringBuilder("failed to connect").append(" to ").append(inetAddress).append(" (port ").append(port).append(")"); if (localAddress != null) { sb.append(" from ").append(localAddress.getAddress()).append(" (port ").append(localAddress.getPort()).append(")"); } if (timeoutMs > 0) { sb.append(" after ").append(timeoutMs).append("ms"); } if (cause != null) { sb.append(": ").append(cause.getMessage()); } return sb.toString(); }
public static boolean isConnected(java.io.FileDescriptor fd, java.net.InetAddress inetAddress, int port, int timeoutMs, int remainingTimeoutMs) throws java.io.IOException { android.system.ErrnoException cause; try { android.system.StructPollfd[] pollFds = new android.system.StructPollfd[]{ new android.system.StructPollfd() }; pollFds[0].fd = fd; pollFds[0].events = ((short) (POLLOUT)); int rc = Libcore.os.poll(pollFds, remainingTimeoutMs); if (rc == 0) { return false; } int connectError = Libcore.os.getsockoptInt(fd, libcore.io.SOL_SOCKET, libcore.io.SO_ERROR); if (connectError == 0) { return true; } throw new android.system.ErrnoException("isConnected", connectError); } catch (android.system.ErrnoException errnoException) { if (!(fd.valid())) { throw new java.net.SocketException("Socket closed"); } cause = errnoException; } java.lang.String detail = libcore.io.IoBridge.connectDetail(fd, inetAddress, port, timeoutMs, cause); if ((cause.errno) == (ETIMEDOUT)) { throw new java.net.SocketTimeoutException(detail, cause); } throw new java.net.ConnectException(detail, cause); }
private static void connectErrno(java.io.FileDescriptor fd, java.net.InetAddress inetAddress, int port, int timeoutMs) throws android.system.ErrnoException, java.io.IOException { if (timeoutMs == 0) { Libcore.os.connect(fd, inetAddress, port); return; } libcore.io.IoUtils.setBlocking(fd, false); long finishTimeNanos = (java.lang.System.nanoTime()) + (java.util.concurrent.TimeUnit.MILLISECONDS.toNanos(timeoutMs)); try { Libcore.os.connect(fd, inetAddress, port); libcore.io.IoUtils.setBlocking(fd, true); return; } catch (android.system.ErrnoException errnoException) { if ((errnoException.errno) != (EINPROGRESS)) { throw errnoException; } } int remainingTimeoutMs; do { remainingTimeoutMs = ((int) (java.util.concurrent.TimeUnit.NANOSECONDS.toMillis((finishTimeNanos - (java.lang.System.nanoTime()))))); if (remainingTimeoutMs <= 0) { throw new java.net.SocketTimeoutException(libcore.io.IoBridge.connectDetail(fd, inetAddress, port, timeoutMs, null)); } } while (!(libcore.io.IoBridge.isConnected(fd, inetAddress, port, timeoutMs, remainingTimeoutMs)) ); libcore.io.IoUtils.setBlocking(fd, true); }

public static java.net.InetSocketAddress getLocalInetSocketAddress(java.io.FileDescriptor fd) throws java.net.SocketException { try { return ((java.net.InetSocketAddress) (Libcore.os.getsockname(fd))); } catch (android.system.ErrnoException errnoException) { throw errnoException.rethrowAsSocketException(); } }
public static void connect(java.io.FileDescriptor fd, java.net.InetAddress inetAddress, int port, int timeoutMs) throws java.net.SocketException, java.net.SocketTimeoutException { try { libcore.io.IoBridge.connectErrno(fd, inetAddress, port, timeoutMs); } catch (android.system.ErrnoException errnoException) { throw new java.net.ConnectException(libcore.io.IoBridge.connectDetail(fd, inetAddress, port, timeoutMs, errnoException), errnoException); } catch (java.net.SocketException ex) { throw ex; } catch (java.net.SocketTimeoutException ex) { throw ex; } catch (java.io.IOException ex) { throw new java.net.SocketException(ex); } }
private boolean doTestDragAndDrop(java.lang.String sourceMode, java.lang.String targetMode, java.lang.String expectedDropResult) throws java.lang.Exception { if (!(supportsDragAndDrop())) { return false; } if (supportsSplitScreenMultiWindow()) { launchDockedActivity(mSourcePackageName, android.wm.cts.CrossAppDragAndDropTests.SOURCE_ACTIVITY_NAME, sourceMode); launchFullscreenActivity(mTargetPackageName, android.wm.cts.CrossAppDragAndDropTests.TARGET_ACTIVITY_NAME, targetMode); } else if (supportsFreeformMultiWindow()) { android.wm.cts.CrossAppDragAndDropTests.Point displaySize = getDisplaySize(); launchFreeformActivity(mSourcePackageName, android.wm.cts.CrossAppDragAndDropTests.SOURCE_ACTIVITY_NAME, sourceMode, displaySize, true); launchFreeformActivity(mTargetPackageName, android.wm.cts.CrossAppDragAndDropTests.TARGET_ACTIVITY_NAME, targetMode, displaySize, false); } else { return false; } clearLogs(); injectInput(getWindowCenter(getComponentName(mSourcePackageName, android.wm.cts.CrossAppDragAndDropTests.SOURCE_ACTIVITY_NAME)), getWindowCenter(getComponentName(mTargetPackageName, android.wm.cts.CrossAppDragAndDropTests.TARGET_ACTIVITY_NAME)), android.wm.cts.CrossAppDragAndDropTests.SWIPE_DURATION_MS); mResults = getLogResults(android.wm.cts.CrossAppDragAndDropTests.TARGET_LOG_TAG); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DROP_RESULT, expectedDropResult); return true; }
protected boolean supportsMultiWindowMode() throws com.android.tradefed.device.DeviceNotAvailableException { return (!(hasDeviceFeature("android.hardware.type.watch"))) || (android.server.cts.ActivityManagerTestBase.PRETEND_DEVICE_SUPPORTS_DOCKING); }
protected boolean supportsMultiWindowMode() throws com.android.tradefed.device.DeviceNotAvailableException { return (!(hasDeviceFeature("android.hardware.type.watch"))) || (android.server.cts.ActivityManagerTestBase.PRETEND_DEVICE_SUPPORTS_DOCKING); }

private static java.util.Map<Main.Operation, java.lang.Double> updateFrequencyMap(java.util.Map<Main.Operation, java.lang.Double> in, java.lang.Object lock, java.lang.String arg) { java.lang.String[] split = arg.split(":"); if ((split.length) != 2) { throw new java.lang.IllegalArgumentException(("Can't split argument " + arg)); } double d; try { d = java.lang.Double.parseDouble(split[1]); } catch (java.lang.Exception e) { throw new java.lang.IllegalArgumentException(e); } if (d < 0) { throw new java.lang.IllegalArgumentException((arg + ": value must be >= 0.")); } Main.Operation op = null; if (split[0].equals("-oom")) { op = new Main.OOM(); } else if (split[0].equals("-sigquit")) { op = new Main.SigQuit(); } else if (split[0].equals("-alloc")) { op = new Main.Alloc(); } else if (split[0].equals("-largealloc")) { op = new Main.LargeAlloc(); } else if (split[0].equals("-stacktrace")) { op = new Main.StackTrace(); } else if (split[0].equals("-exit")) { op = new Main.Exit(); } else if (split[0].equals("-sleep")) { op = new Main.Sleep(); } else if (split[0].equals("-wait")) { op = new Main.Wait(lock); } else if (split[0].equals("-timedwait")) { op = new Main.TimedWait(lock); } else { throw new java.lang.IllegalArgumentException(("Unknown arg " + arg)); } if (in == null) { in = new java.util.HashMap<Main.Operation, java.lang.Double>(); } in.put(op, d); return in; }
private static final java.util.Map<Main.Operation, java.lang.Double> createDefaultFrequencyMap(java.lang.Object lock) { java.util.Map<Main.Operation, java.lang.Double> frequencyMap = new java.util.HashMap<Main.Operation, java.lang.Double>(); frequencyMap.put(new Main.OOM(), 0.005); frequencyMap.put(new Main.SigQuit(), 0.095); frequencyMap.put(new Main.Alloc(), 0.25); frequencyMap.put(new Main.LargeAlloc(), 0.05); frequencyMap.put(new Main.StackTrace(), 0.1); frequencyMap.put(new Main.Exit(), 0.25); frequencyMap.put(new Main.Sleep(), 0.125); frequencyMap.put(new Main.TimedWait(lock), 0.05); frequencyMap.put(new Main.Wait(lock), 0.075); return frequencyMap; }
@java.lang.Override public void setUidCleartextNetworkPolicy(int uid, int policy) { if ((android.os.Binder.getCallingUid()) != uid) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, com.android.server.NetworkManagementService.TAG); } synchronized(mQuotaLock) { final int oldPolicy = mUidCleartextPolicy.get(uid, StrictMode.NETWORK_POLICY_ACCEPT); if (oldPolicy == policy) { return; } if (!(mStrictEnabled)) { mUidCleartextPolicy.put(uid, policy); return; } if ((oldPolicy != (android.os.StrictMode.NETWORK_POLICY_ACCEPT)) && (policy != (android.os.StrictMode.NETWORK_POLICY_ACCEPT))) { applyUidCleartextNetworkPolicy(uid, policy); } } applyUidCleartextNetworkPolicy(uid, policy); }


@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); setUpResources(mResources); WifiConfiguration config = new WifiConfiguration(); config.SSID = "nooooooooooo"; config.allowedKeyManagement.set(NONE); config.hiddenSSID = false; when(mWifiConfigManager.getSavedNetworks()).thenReturn(java.util.Arrays.asList(config)); when(mWifiConfigManager.getConfiguredNetwork(anyInt())).thenReturn(config); mWifiConfiguration = config; int maxSize = 10; int trimSize = 5; mScanDetailCache = new com.android.server.wifi.ScanDetailCache(config, maxSize, trimSize); when(mWifiConfigManager.getScanDetailCacheForNetwork(anyInt())).thenReturn(mScanDetailCache); when(mContext.getResources()).thenReturn(mResources); mWifiScoreReport = new com.android.server.wifi.WifiScoreReport(mContext, mWifiConfigManager); }
@org.junit.Test public void badLinkspeedCounter() throws java.lang.Exception { when(mWifiInfo.getRssi()).thenReturn((-123)); when(mWifiInfo.getLinkSpeed()).thenReturn(1); when(mWifiInfo.is24GHz()).thenReturn(true); assertFalse(mWifiScoreReport.isLastReportValid()); mWifiScoreReport.enableVerboseLogging(true); assertEquals(0, mWifiScoreReport.getLastBadLinkspeedcount()); mWifiScoreReport.calculateAndReportScore(mWifiInfo, null, 0, mWifiMetrics); assertEquals(1, mWifiScoreReport.getLastBadLinkspeedcount()); mWifiScoreReport.calculateAndReportScore(mWifiInfo, null, 0, mWifiMetrics); assertEquals(2, mWifiScoreReport.getLastBadLinkspeedcount()); mWifiScoreReport.calculateAndReportScore(mWifiInfo, null, 0, mWifiMetrics); assertEquals(3, mWifiScoreReport.getLastBadLinkspeedcount()); mWifiScoreReport.calculateAndReportScore(mWifiInfo, null, 1, mWifiMetrics); mWifiScoreReport.calculateAndReportScore(mWifiInfo, null, 0, mWifiMetrics); mWifiScoreReport.calculateAndReportScore(mWifiInfo, null, 1, mWifiMetrics); mWifiScoreReport.calculateAndReportScore(mWifiInfo, null, 0, mWifiMetrics); mWifiScoreReport.calculateAndReportScore(mWifiInfo, null, 0, mWifiMetrics); mWifiScoreReport.calculateAndReportScore(mWifiInfo, null, 0, mWifiMetrics); assertEquals(6, mWifiScoreReport.getLastBadLinkspeedcount()); verify(mWifiMetrics, times(9)).incrementWifiScoreCount(anyInt()); verify(mWifiInfo, atLeast(9)).is24GHz(); assertTrue(mWifiScoreReport.isLastReportValid()); mWifiScoreReport.reset(); assertEquals(0, mWifiScoreReport.getLastBadLinkspeedcount()); }
@org.junit.Test public void giveUpOnBadRssiWhenDataIsNotMoving() throws java.lang.Exception { when(mWifiInfo.getRssi()).thenReturn((-100)); when(mWifiInfo.getLinkSpeed()).thenReturn(6); when(mWifiInfo.is24GHz()).thenReturn(true); mWifiScoreReport.enableVerboseLogging(true); mWifiInfo.txSuccessRate = 0.1; mWifiInfo.rxSuccessRate = 0.1; for (int i = 0; i < 10; i++) { mWifiScoreReport.calculateAndReportScore(mWifiInfo, mNetworkAgent, 0, mWifiMetrics); java.lang.String report = mWifiScoreReport.getLastReport(); assertTrue(report.contains(" br ")); } assertTrue(mWifiScoreReport.isLastReportValid()); int score = fishScoreFromReportString(mWifiScoreReport.getLastReport()); assertTrue((score < (com.android.server.wifi.WifiScoreReportTest.CELLULAR_THRESHOLD_SCORE))); verify(mNetworkAgent, atLeast(1)).sendNetworkScore(score); }
@org.junit.Test public void allowLowRssiIfDataIsMoving() throws java.lang.Exception { when(mWifiInfo.getRssi()).thenReturn((-80)); when(mWifiInfo.getLinkSpeed()).thenReturn(6); when(mWifiInfo.is24GHz()).thenReturn(true); mWifiInfo.txSuccessRate = 5.1; mWifiInfo.rxSuccessRate = 5.1; for (int i = 0; i < 10; i++) { mWifiScoreReport.calculateAndReportScore(mWifiInfo, mNetworkAgent, 0, mWifiMetrics); } assertTrue(mWifiScoreReport.isLastReportValid()); int score = fishScoreFromReportString(mWifiScoreReport.getLastReport()); assertTrue((score > (com.android.server.wifi.WifiScoreReportTest.CELLULAR_THRESHOLD_SCORE))); }
@org.junit.Before public void setUp() throws java.lang.Exception { logd("SmsNumberUtilsTest +Setup!"); super.setUp(getClass().getSimpleName()); mHbpcdContentProvider = new com.android.internal.telephony.SmsNumberUtilsTest.HbpcdContentProvider(); doReturn(com.android.internal.telephony.SmsNumberUtilsTest.TMO_MCC_MNC).when(mTelephonyManager).getNetworkOperator(anyInt()); ((android.test.mock.MockContentResolver) (mContextFixture.getTestDouble().getContentResolver())).addProvider(HbpcdLookup.MccIdd.CONTENT_URI.getAuthority(), mHbpcdContentProvider); mContextFixture.putStringArrayResource(com.android.internal.R.array.config_sms_convert_destination_number_support, new java.lang.String[]{ "true" }); logd("SmsNumberUtilsTest -Setup!"); }
private static boolean needToConvert(com.android.internal.telephony.Phone phone) { boolean bNeedToConvert = false; java.lang.String[] listArray = phone.getContext().getResources().getStringArray(com.android.internal.R.array.config_sms_convert_destination_number_support); if ((listArray != null) && ((listArray.length) > 0)) { for (int i = 0; i < (listArray.length); i++) { if (!(android.text.TextUtils.isEmpty(listArray[i]))) { java.lang.String[] needToConvertArray = listArray[i].split(";"); if ((needToConvertArray != null) && ((needToConvertArray.length) > 0)) { if ((needToConvertArray.length) == 1) { bNeedToConvert = "true".equalsIgnoreCase(needToConvertArray[0]); } else if ((((needToConvertArray.length) == 2) && (!(android.text.TextUtils.isEmpty(needToConvertArray[1])))) && (com.android.internal.telephony.SmsNumberUtils.compareGid1(phone, needToConvertArray[1]))) { bNeedToConvert = "true".equalsIgnoreCase(needToConvertArray[0]); break; } } } } } return bNeedToConvert; }
private void doAdbReboot(final java.lang.String into) throws com.android.tradefed.device.DeviceNotAvailableException { if (getIDevice().isEmulator()) { com.android.tradefed.log.LogUtil.CLog.i("since emulator, performing shell stop & start instead of reboot"); executeShellCommand("stop"); executeShellCommand(java.lang.String.format("setprop %s 0", DeviceStateMonitor.BOOTCOMPLETE_PROP)); executeShellCommand("start"); return; } if (!(doAdbFrameworkReboot(into))) { com.android.tradefed.device.AndroidNativeDevice.DeviceAction rebootAction = new com.android.tradefed.device.AndroidNativeDevice.DeviceAction() { @java.lang.Override public boolean run() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException { getIDevice().reboot(into); return true; } }; performDeviceAction("reboot", rebootAction, com.android.tradefed.device.AndroidNativeDevice.MAX_RETRY_ATTEMPTS); } }
@java.lang.Override public boolean processMessage(android.os.Message msg) { if ((super.processMessage(msg)) == (HANDLED)) { return HANDLED; } switch (msg.what) { case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_WIRED_HEADSET : android.telecom.Log.e(this, new java.lang.IllegalStateException(), "Wired headset should already be connected."); mAvailableRoutes |= com.android.server.telecom.CallAudioRouteStateMachine.ROUTE_WIRED_HEADSET; updateSystemAudioState(); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_BLUETOOTH : if (!(mHasUserExplicitlyLeftBluetooth)) { sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_BLUETOOTH); } else { android.telecom.Log.i(this, ("Not switching to BT route from headset because user has " + "explicitly disconnected.")); updateSystemAudioState(); } return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH : updateSystemAudioState(); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_WIRED_HEADSET : if (mWasOnSpeaker) { sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_SPEAKER); } else { sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_BASELINE_ROUTE); } return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.BT_AUDIO_DISCONNECT : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_DOCK : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_DOCK : return HANDLED; default : return NOT_HANDLED; } }
@java.lang.Override public boolean processMessage(android.os.Message msg) { if ((super.processMessage(msg)) == (HANDLED)) { return HANDLED; } switch (msg.what) { case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_WIRED_HEADSET : sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_HEADSET); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_BLUETOOTH : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH : sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_BASELINE_ROUTE); mWasOnSpeaker = false; return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_WIRED_HEADSET : updateSystemAudioState(); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_DOCK : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_DOCK : return HANDLED; default : return NOT_HANDLED; } }
@java.lang.Override public boolean processMessage(android.os.Message msg) { if ((super.processMessage(msg)) == (HANDLED)) { return HANDLED; } switch (msg.what) { case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_WIRED_HEADSET : sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_HEADSET); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_BLUETOOTH : if (!(mHasUserExplicitlyLeftBluetooth)) { sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_BLUETOOTH); } else { android.telecom.Log.i(this, ("Not switching to BT route from speaker because user has " + "explicitly disconnected.")); updateSystemAudioState(); } return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH : updateSystemAudioState(); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_WIRED_HEADSET : updateSystemAudioState(); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.BT_AUDIO_DISCONNECT : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_DOCK : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_DOCK : sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_BASELINE_ROUTE); return HANDLED; default : return NOT_HANDLED; } }
void setAudioRoute(int route) { android.telecom.Log.v(this, "setAudioRoute, route: %s", android.telecom.CallAudioState.audioRouteToString(route)); switch (route) { case android.telecom.CallAudioState.ROUTE_BLUETOOTH : mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.USER_SWITCH_BLUETOOTH); return; case android.telecom.CallAudioState.ROUTE_SPEAKER : mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.USER_SWITCH_SPEAKER); return; case android.telecom.CallAudioState.ROUTE_WIRED_HEADSET : mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.USER_SWITCH_HEADSET); return; case android.telecom.CallAudioState.ROUTE_EARPIECE : mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.USER_SWITCH_EARPIECE); return; case android.telecom.CallAudioState.ROUTE_WIRED_OR_EARPIECE : mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.USER_SWITCH_BASELINE_ROUTE); return; default : android.telecom.Log.wtf(this, "Invalid route specified: %d", route); } }
public static java.net.InetSocketAddress getLocalInetSocketAddress(java.io.FileDescriptor fd) throws java.net.SocketException { try { java.net.SocketAddress socketAddress = Libcore.os.getsockname(fd); if ((socketAddress != null) && (!(socketAddress instanceof java.net.InetSocketAddress))) { throw new java.net.SocketException(("Unsupported address type: " + (socketAddress.getClass()))); } return ((java.net.InetSocketAddress) (socketAddress)); } catch (android.system.ErrnoException errnoException) { throw errnoException.rethrowAsSocketException(); } }
private void bindAndInitialize() throws android.telephony.mbms.MbmsException { android.telephony.mbms.MbmsUtils.startBinding(mContext, android.telephony.MbmsStreamingManager.MBMS_STREAMING_SERVICE_ACTION, new android.content.ServiceConnection() { @java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsStreamingService streamingService = IMbmsStreamingService.Stub.asInterface(service); int result; try { result = streamingService.initialize(mCallbackToApp, mSubscriptionId); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG, "Service died before initialization"); return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG, "Runtime exception during initialization"); try { mCallbackToApp.error(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); } catch (android.os.RemoteException e1) { } return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { try { mCallbackToApp.error(result, "Error returned during initialization"); } catch (android.os.RemoteException e) { } return; } mService.set(streamingService); } @java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { mService.set(null); } }); }
public void dispose() { try { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { android.util.Log.i(android.telephony.MbmsDownloadManager.LOG_TAG, "Service already dead"); return; } downloadService.dispose(mSubscriptionId); mService.set(null); } catch (android.os.RemoteException e) { android.util.Log.i(android.telephony.MbmsDownloadManager.LOG_TAG, "Remote exception while disposing of service"); } }
@java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = IMbmsDownloadService.Stub.asInterface(service); int result; try { result = downloadService.initialize(mSubscriptionId, mCallback); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG, "Service died before initialization"); return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG, "Runtime exception during initialization"); mCallback.error(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { mCallback.error(result, "Error returned during initialization"); return; } mService.set(downloadService); }
@java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { mService.set(null); }
private void bindAndInitialize() throws android.telephony.mbms.MbmsException { android.telephony.mbms.MbmsUtils.startBinding(mContext, android.telephony.MbmsDownloadManager.MBMS_DOWNLOAD_SERVICE_ACTION, new android.content.ServiceConnection() { @java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = IMbmsDownloadService.Stub.asInterface(service); int result; try { result = downloadService.initialize(mSubscriptionId, mCallback); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG, "Service died before initialization"); return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG, "Runtime exception during initialization"); mCallback.error(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { mCallback.error(result, "Error returned during initialization"); return; } mService.set(downloadService); } @java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { mService.set(null); } }); }
public static android.telephony.MbmsDownloadManager create(android.content.Context context, android.telephony.mbms.MbmsDownloadManagerCallback listener, int subscriptionId) throws android.telephony.mbms.MbmsException { android.telephony.MbmsDownloadManager mdm = new android.telephony.MbmsDownloadManager(context, listener, subscriptionId); mdm.bindAndInitialize(); return mdm; }
public static android.telephony.MbmsStreamingManager create(android.content.Context context, android.telephony.mbms.MbmsStreamingManagerCallback callback, int subscriptionId) throws android.telephony.mbms.MbmsException { android.telephony.MbmsStreamingManager manager = new android.telephony.MbmsStreamingManager(context, callback, subscriptionId); manager.bindAndInitialize(); return manager; }
public void dispose() { android.telephony.mbms.vendor.IMbmsStreamingService streamingService = mService.get(); if (streamingService == null) { return; } try { streamingService.dispose(mSubscriptionId); } catch (android.os.RemoteException e) { } mService.set(null); }
@java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsStreamingService streamingService = IMbmsStreamingService.Stub.asInterface(service); int result; try { result = streamingService.initialize(mCallbackToApp, mSubscriptionId); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG, "Service died before initialization"); return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG, "Runtime exception during initialization"); try { mCallbackToApp.error(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); } catch (android.os.RemoteException e1) { } return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { try { mCallbackToApp.error(result, "Error returned during initialization"); } catch (android.os.RemoteException e) { } return; } mService.set(streamingService); }

@java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { mService.set(null); }
@java.lang.Override boolean build() { if (super.build()) { if (sourceFiles.isEmpty()) { return true; } java.io.File destFile = new java.io.File(destPath); if ((!(destFile.exists())) && (!(destFile.mkdirs()))) { java.lang.System.err.println("failed to create destination dir"); return false; } int args = 8; java.lang.String[] commandLine = new java.lang.String[(sourceFiles.size()) + args]; commandLine[0] = "-classpath"; commandLine[1] = classPath; commandLine[2] = "-d"; commandLine[3] = destPath; commandLine[4] = "-source"; commandLine[5] = "1.7"; commandLine[6] = "-target"; commandLine[7] = "1.7"; java.lang.String[] files = new java.lang.String[sourceFiles.size()]; sourceFiles.toArray(files); java.lang.System.arraycopy(files, 0, commandLine, args, files.length); return (com.sun.tools.javac.Main.compile(commandLine, new java.io.PrintWriter(java.lang.System.err))) == 0; } return false; }
public void setLeBluetoothDeviceAddress(byte[] leBluetoothDeviceAddress) { this.leBluetoothDeviceAddress = leBluetoothDeviceAddress; }
public void setAdvertisingData(android.bluetooth.le.AdvertiseData advertiseData) { try { gatt.setAdvertisingData(this.advertiserId, advertiseData); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
void setAdvertiserId(int advertiserId) { this.advertiserId = advertiserId; }
public android.bluetooth.le.AdvertisingSetParameters.Builder setLegacyMode(boolean isLegacy) { this.isLegacy = isLegacy; return this; }
public void setPeriodicAdvertisingData(android.bluetooth.le.AdvertiseData periodicData) { try { gatt.setPeriodicAdvertisingData(this.advertiserId, periodicData); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
public android.bluetooth.le.AdvertisingSetParameters.Builder setIncludeTxPower(boolean includeTxPower) { this.includeTxPower = includeTxPower; return this; }
public android.bluetooth.le.AdvertisingSetParameters.Builder setConnectable(boolean connectable) { this.connectable = connectable; return this; }
public android.bluetooth.le.AdvertisingSetParameters.Builder setAnonymous(boolean isAnonymous) { this.isAnonymous = isAnonymous; return this; }
public void enableAdvertising(boolean enable, int duration, int maxExtendedAdvertisingEvents) { try { gatt.enableAdvertisingSet(this.advertiserId, enable, duration, maxExtendedAdvertisingEvents); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
public android.bluetooth.le.AdvertisingSetParameters.Builder setSecondaryPhy(int secondaryPhy) { if (((secondaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_1M)) && (secondaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_2M))) && (secondaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_CODED))) { throw new java.lang.IllegalArgumentException(("bad secondaryPhy " + secondaryPhy)); } this.secondaryPhy = secondaryPhy; return this; }
public void setLeSecureConnectionsConfirmation(byte[] leSecureConnectionsConfirmation) { this.leSecureConnectionsConfirmation = leSecureConnectionsConfirmation; }
public android.bluetooth.le.AdvertisingSetParameters.Builder setInterval(int interval) { if ((interval < (android.bluetooth.le.AdvertisingSetParameters.INTERVAL_MIN)) || (interval > (android.bluetooth.le.AdvertisingSetParameters.INTERVAL_MAX))) { throw new java.lang.IllegalArgumentException(("unknown interval " + interval)); } this.interval = interval; return this; }
public void setLeSecureConnectionsRandom(byte[] leSecureConnectionsRandom) { this.leSecureConnectionsRandom = leSecureConnectionsRandom; }
public android.bluetooth.le.PeriodicAdvertisingParameters.Builder setIncludeTxPower(boolean includeTxPower) { this.includeTxPower = includeTxPower; return this; }
public void onLeScan(android.bluetooth.BluetoothDevice device, int rssi, byte[] scanRecord);
public android.bluetooth.le.AdvertisingSetParameters.Builder setTxPowerLevel(int txPowerLevel) { if ((txPowerLevel < (android.bluetooth.le.AdvertisingSetParameters.TX_POWER_MIN)) || (txPowerLevel > (android.bluetooth.le.AdvertisingSetParameters.TX_POWER_MAX))) { throw new java.lang.IllegalArgumentException(("unknown txPowerLevel " + txPowerLevel)); } this.txPowerLevel = txPowerLevel; return this; }
public void onBluetoothStateChange(boolean on);
public void getOwnAddress() { try { gatt.getOwnAddress(this.advertiserId); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
public android.bluetooth.le.AdvertisingSetParameters.Builder setScannable(boolean scannable) { this.scannable = scannable; return this; }
public android.bluetooth.le.AdvertisingSetParameters.Builder setPrimaryPhy(int primaryPhy) { if ((primaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_1M)) && (primaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_CODED))) { throw new java.lang.IllegalArgumentException(("bad primaryPhy " + primaryPhy)); } this.primaryPhy = primaryPhy; return this; }
public void setAdvertisingParameters(android.bluetooth.le.AdvertisingSetParameters parameters) { try { gatt.setAdvertisingParameters(this.advertiserId, parameters); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
public void setPeriodicAdvertisingParameters(android.bluetooth.le.PeriodicAdvertisingParameters parameters) { try { gatt.setPeriodicAdvertisingParameters(this.advertiserId, parameters); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
public void setPeriodicAdvertisingEnabled(boolean enable) { try { gatt.setPeriodicAdvertisingEnable(this.advertiserId, enable); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
public void setSecurityManagerTk(byte[] securityManagerTk) { this.securityManagerTk = securityManagerTk; }
public android.bluetooth.le.PeriodicAdvertisingParameters.Builder setInterval(int interval) { if ((interval < (android.bluetooth.le.PeriodicAdvertisingParameters.INTERVAL_MIN)) || (interval > (android.bluetooth.le.PeriodicAdvertisingParameters.INTERVAL_MAX))) { throw new java.lang.IllegalArgumentException((((("Invalid interval (must be " + (android.bluetooth.le.PeriodicAdvertisingParameters.INTERVAL_MIN)) + "-") + (android.bluetooth.le.PeriodicAdvertisingParameters.INTERVAL_MAX)) + ")")); } this.interval = interval; return this; }
public void setScanResponseData(android.bluetooth.le.AdvertiseData scanResponse) { try { gatt.setScanResponseData(this.advertiserId, scanResponse); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
@com.android.internal.annotations.VisibleForTesting public long getAgeMillis() { if (((mState) == (CallState.DISCONNECTED)) && (((mDisconnectCause.getCode()) == (android.telecom.DisconnectCause.REJECTED)) || ((mDisconnectCause.getCode()) == (android.telecom.DisconnectCause.MISSED)))) { return 0; } else if ((mConnectTimeMillis) == 0) { return 0; } else if ((mDisconnectTimeMillis) == 0) { return (java.lang.System.currentTimeMillis()) - (mConnectTimeMillis); } return (mDisconnectTimeMillis) - (mConnectTimeMillis); }
@java.lang.Override public void writeToParcel(android.os.Parcel destination, int flags) { destination.writeParcelable(mPhoneAccount, 0); destination.writeInt(mState); destination.writeInt(mConnectionCapabilities); destination.writeParcelable(mAddress, 0); destination.writeInt(mAddressPresentation); destination.writeString(mCallerDisplayName); destination.writeInt(mCallerDisplayNamePresentation); destination.writeStrongBinder(((mVideoProvider) != null ? mVideoProvider.asBinder() : null)); destination.writeInt(mVideoState); destination.writeByte(((byte) (mRingbackRequested ? 1 : 0))); destination.writeByte(((byte) (mIsVoipAudioMode ? 1 : 0))); destination.writeLong(mConnectTimeMillis); destination.writeParcelable(mStatusHints, 0); destination.writeParcelable(mDisconnectCause, 0); destination.writeStringList(mConferenceableConnectionIds); destination.writeBundle(mExtras); destination.writeInt(mConnectionProperties); destination.writeInt(mSupportedAudioRoutes); }
@java.lang.Override public android.telecom.ParcelableConnection createFromParcel(android.os.Parcel source) { java.lang.ClassLoader classLoader = .class.getClassLoader(); android.telecom.PhoneAccountHandle phoneAccount = source.readParcelable(classLoader); int state = source.readInt(); int capabilities = source.readInt(); android.net.Uri address = source.readParcelable(classLoader); int addressPresentation = source.readInt(); java.lang.String callerDisplayName = source.readString(); int callerDisplayNamePresentation = source.readInt(); com.android.internal.telecom.IVideoProvider videoCallProvider = IVideoProvider.Stub.asInterface(source.readStrongBinder()); int videoState = source.readInt(); boolean ringbackRequested = (source.readByte()) == 1; boolean audioModeIsVoip = (source.readByte()) == 1; long connectTimeMillis = source.readLong(); android.telecom.StatusHints statusHints = source.readParcelable(classLoader); android.telecom.DisconnectCause disconnectCause = source.readParcelable(classLoader); List<java.lang.String> conferenceableConnectionIds = new android.telecom.ArrayList<>(); source.readStringList(conferenceableConnectionIds); android.os.Bundle extras = android.os.Bundle.setDefusable(source.readBundle(classLoader), true); int properties = source.readInt(); int supportedAudioRoutes = source.readInt(); return new android.telecom.ParcelableConnection(phoneAccount, state, capabilities, properties, supportedAudioRoutes, address, addressPresentation, callerDisplayName, callerDisplayNamePresentation, videoCallProvider, videoState, ringbackRequested, audioModeIsVoip, connectTimeMillis, statusHints, disconnectCause, conferenceableConnectionIds, extras); }
private android.util.Pair<java.lang.ref.WeakReference<com.android.services.telephony.TelephonyConnection>, java.util.List<com.android.internal.telephony.Phone>> makeCachedConnectionPhonePair(com.android.services.telephony.TelephonyConnection c) { java.util.List<com.android.internal.telephony.Phone> phones = new java.util.ArrayList(java.util.Arrays.asList(com.android.internal.telephony.PhoneFactory.getPhones())); return new android.util.Pair(new java.lang.ref.WeakReference(c), phones); }
void updateStateInternal() { if ((mOriginalConnection) == null) { return; } com.android.internal.telephony.Call.State newState; if ((mIsStateOverridden) && ((mOriginalConnectionState) == (mOriginalConnection.getState()))) { newState = mConnectionOverriddenState; } else { newState = mOriginalConnection.getState(); } com.android.services.telephony.Log.v(this, "Update state from %s to %s for %s", mConnectionState, newState, this); if ((mConnectionState) != newState) { mConnectionState = newState; switch (newState) { case IDLE : break; case ACTIVE : setActiveInternal(); break; case HOLDING : setOnHold(); break; case DIALING : case ALERTING : if (((mOriginalConnection) != null) && (mOriginalConnection.isPulledCall())) { setPulling(); } else { setDialing(); } break; case INCOMING : case WAITING : setRinging(); break; case DISCONNECTED : if ((mOriginalConnection.getDisconnectCause()) == (android.telephony.DisconnectCause.DIALED_ON_WRONG_SLOT)) { fireOnOriginalConnectionRetryDial(); } else { setDisconnected(com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCause(mOriginalConnection.getDisconnectCause(), mOriginalConnection.getVendorDisconnectCause())); close(); } break; case DISCONNECTING : break; } } }
protected void hangup(int telephonyDisconnectCode) { if ((mOriginalConnection) != null) { try { if (isValidRingingCall()) { com.android.internal.telephony.Call call = getCall(); if (call != null) { call.hangup(); } else { com.android.services.telephony.Log.w(this, "Attempting to hangup a connection without backing call."); } } else { mOriginalConnection.hangup(); } } catch (com.android.internal.telephony.CallStateException e) { com.android.services.telephony.Log.e(this, e, "Call to Connection.hangup failed with exception"); } } else { if ((getState()) == (STATE_DISCONNECTED)) { com.android.services.telephony.Log.i(this, "hangup called on an already disconnected call!"); close(); } else { setDisconnected(com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCause(android.telephony.DisconnectCause.LOCAL, "Local Disconnect before connection established.")); close(); } } }
private void updateCachedConnectionPhonePair(com.android.services.telephony.TelephonyConnection c) { if ((mEmergencyRetryCache) == null) { com.android.services.telephony.Log.i(this, "updateCachedConnectionPhonePair, cache is null. Generating new cache"); mEmergencyRetryCache = makeCachedConnectionPhonePair(c); } else { java.lang.ref.WeakReference<com.android.services.telephony.TelephonyConnection> cachedConnection = mEmergencyRetryCache.first; if ((cachedConnection.get()) != c) { com.android.services.telephony.Log.i(this, "updateCachedConnectionPhonePair, cache is stale. Regenerating."); mEmergencyRetryCache = makeCachedConnectionPhonePair(c); } } }
private com.android.internal.telephony.Phone getPhoneForRedial(com.android.internal.telephony.Phone phoneToExclude) { java.util.List<com.android.internal.telephony.Phone> cachedPhones = mEmergencyRetryCache.second; if (cachedPhones.contains(phoneToExclude)) { com.android.services.telephony.Log.i(this, (("getPhoneForRedial, removing Phone[" + (phoneToExclude.getPhoneId())) + "] from the available Phone cache.")); cachedPhones.remove(phoneToExclude); } return cachedPhones.isEmpty() ? null : cachedPhones.get(0); }
private void retryOutgoingOriginalConnection(com.android.services.telephony.TelephonyConnection c) { updateCachedConnectionPhonePair(c); com.android.internal.telephony.Phone newPhoneToUse = getPhoneForRedial(c.getPhone()); if (newPhoneToUse != null) { int videoState = c.getVideoState(); android.os.Bundle connExtras = c.getExtras(); com.android.services.telephony.Log.i(this, ("retryOutgoingOriginalConnection, redialing on Phone Id: " + newPhoneToUse)); c.clearOriginalConnection(); placeOutgoingConnection(c, newPhoneToUse, videoState, connExtras); } else { com.android.services.telephony.Log.i(this, "retryOutgoingOriginalConnection, no more Phones to use. Disconnecting."); c.setDisconnected(new android.telecom.DisconnectCause(android.telecom.DisconnectCause.ERROR)); c.clearOriginalConnection(); c.destroy(); } }
private boolean isRequired() { return ((com.android.compatibility.common.util.PropertyUtil.getFirstApiLevel()) >= (android.security.cts.EncryptionTest.MIN_API_LEVEL)) && (!(hasLowRAM())); }
private void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo networkAgent, android.net.LinkProperties oldLp) { android.net.LinkProperties newLp = networkAgent.linkProperties; int netId = networkAgent.network.netId; if ((networkAgent.clatd) != null) { networkAgent.clatd.fixupLinkProperties(oldLp); } updateInterfaces(newLp, oldLp, netId, networkAgent.networkCapabilities); updateMtu(newLp, oldLp); updateTcpBufferSizes(networkAgent); updateRoutes(newLp, oldLp, netId); updateDnses(newLp, oldLp, netId); updateClat(newLp, oldLp, networkAgent); if (isDefaultNetwork(networkAgent)) { handleApplyDefaultProxy(newLp.getHttpProxy()); } else { updateProxy(newLp, oldLp, networkAgent); } if (!(java.util.Objects.equals(newLp, oldLp))) { notifyIfacesChangedForNetworkStats(); notifyNetworkCallbacks(networkAgent, ConnectivityManager.CALLBACK_IP_CHANGED); } mKeepaliveTracker.handleCheckKeepalivesStillValid(networkAgent); }
private void updateConnectivityService(android.net.LinkProperties lp) { android.os.Message msg = mHandler.obtainMessage(NetworkAgent.EVENT_NETWORK_PROPERTIES_CHANGED, lp); msg.replyTo = mNetwork.messenger; android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, ("sending message to ConnectivityService: " + msg)); msg.sendToTarget(); }
public void start() { if (isStarted()) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, "startClat: already started"); return; } if ((mNetwork.linkProperties) == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, "startClat: Can't start clat with null LinkProperties"); return; } try { mNMService.registerObserver(this); } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ("startClat: Can't register interface observer for clat on " + (mNetwork))); return; } mBaseIface = mNetwork.linkProperties.getInterfaceName(); if ((mBaseIface) == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, "startClat: Can't start clat on null interface"); return; } mIface = (com.android.server.connectivity.Nat464Xlat.CLAT_PREFIX) + (mBaseIface); android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, ("Starting clatd on " + (mBaseIface))); try { mNMService.startClatd(mBaseIface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ("Error starting clatd: " + e)); } }
@java.lang.Override public void interfaceLinkStateChanged(java.lang.String iface, boolean up) { if (((isStarted()) && up) && (mIface.equals(iface))) { android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, (((("interface " + iface) + " is up, mIsRunning ") + (mIsRunning)) + "->true")); if (!(mIsRunning)) { android.net.LinkAddress clatAddress = getLinkAddress(iface); if (clatAddress == null) { return; } mIsRunning = true; maybeSetIpv6NdOffload(mBaseIface, false); android.net.LinkProperties lp = new android.net.LinkProperties(mNetwork.linkProperties); lp.addStackedLink(makeLinkProperties(clatAddress)); android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, ((("Adding stacked link " + (mIface)) + " on top of ") + (mBaseIface))); updateConnectivityService(lp); } } }
public void fixupLinkProperties(android.net.LinkProperties oldLp) { if (((((mNetwork.clatd) != null) && (mIsRunning)) && ((mNetwork.linkProperties) != null)) && (!(mNetwork.linkProperties.getAllInterfaceNames().contains(mIface)))) { android.util.Slog.d(com.android.server.connectivity.Nat464Xlat.TAG, ("clatd running, updating NAI for " + (mIface))); for (android.net.LinkProperties stacked : oldLp.getStackedLinks()) { if (mIface.equals(stacked.getInterfaceName())) { mNetwork.linkProperties.addStackedLink(stacked); break; } } } }
@java.lang.Override public void interfaceRemoved(java.lang.String iface) { if ((isStarted()) && (mIface.equals(iface))) { android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, (((("interface " + iface) + " removed, mIsRunning ") + (mIsRunning)) + "->false")); if (mIsRunning) { try { mNMService.unregisterObserver(this); mNMService.stopClatd(mBaseIface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { } maybeSetIpv6NdOffload(mBaseIface, true); android.net.LinkProperties lp = new android.net.LinkProperties(mNetwork.linkProperties); lp.removeStackedLink(mIface); clear(); updateConnectivityService(lp); } } }
public boolean isStarted() { return (mIface) != null; }

public void start() { if (mState.isStarted()) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, "startClat: already started"); return; } if ((mNetwork.linkProperties) == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, "startClat: Can't start clat with null LinkProperties"); return; } mBaseIface = mNetwork.linkProperties.getInterfaceName(); if ((mBaseIface) == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, "startClat: Can't start clat on null interface"); return; } mIface = (com.android.server.connectivity.Nat464Xlat.CLAT_PREFIX) + (mBaseIface); mState = com.android.server.connectivity.Nat464Xlat.State.STARTING; android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, ("Starting clatd on " + (mBaseIface))); try { mNMService.registerObserver(this); mNMService.startClatd(mBaseIface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ("Error starting clatd on " + (mBaseIface)), e); } }

@java.lang.Override public void interfaceLinkStateChanged(java.lang.String iface, boolean up) { if (((!up) || (!(mState.isStarted()))) || (!(mIface.equals(iface)))) { return; } if (mState.isRunning()) { return; } android.net.LinkAddress clatAddress = getLinkAddress(iface); if (clatAddress == null) { return; } mState = com.android.server.connectivity.Nat464Xlat.State.RUNNING; android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, java.lang.String.format("interface %s is up, adding stacked link %s on top of %s", mIface, mIface, mBaseIface)); maybeSetIpv6NdOffload(mBaseIface, false); android.net.LinkProperties lp = new android.net.LinkProperties(mNetwork.linkProperties); lp.addStackedLink(makeLinkProperties(clatAddress)); updateConnectivityService(lp); }
@java.lang.Override public void interfaceRemoved(java.lang.String iface) { if ((!(mState.isStarted())) || (!(mIface.equals(iface)))) { return; } if (!(mState.isRunning())) { return; } java.lang.String baseIface = mBaseIface; mState = com.android.server.connectivity.Nat464Xlat.State.IDLE; mBaseIface = null; mIface = null; android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, (("interface " + iface) + " removed")); try { mNMService.unregisterObserver(this); mNMService.stopClatd(baseIface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { } maybeSetIpv6NdOffload(baseIface, true); android.net.LinkProperties lp = new android.net.LinkProperties(mNetwork.linkProperties); lp.removeStackedLink(iface); updateConnectivityService(lp); }
public void startRegistration() { synchronized(this) { if ((mScannerId) == (-1)) return; try { mBluetoothGatt.registerScanner(this, mWorkSource); wait(android.bluetooth.le.BluetoothLeScanner.BleScanCallbackWrapper.REGISTRATION_CALLBACK_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException | android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.BluetoothLeScanner.TAG, "application registeration exception", e); postCallbackError(mScanCallback, ScanCallback.SCAN_FAILED_INTERNAL_ERROR); } if ((mScannerId) > 0) { mLeScanClients.put(mScanCallback, this); } else { if ((mScannerId) == 0) mScannerId = -1; postCallbackError(mScanCallback, ScanCallback.SCAN_FAILED_APPLICATION_REGISTRATION_FAILED); } } }
void registerScanner(android.bluetooth.le.IScannerCallback callback, android.os.WorkSource workSource) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM, "Need BLUETOOTH permission"); java.util.UUID uuid = java.util.UUID.randomUUID(); if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ("registerScanner() - UUID=" + uuid)); if (workSource != null) { enforceImpersonatationPermission(); } mScannerMap.add(uuid, workSource, callback, null, this); mScanManager.registerScanner(uuid); }
public void testNoSettingsValueDefaultDisabledDoesNotStart() throws java.lang.Exception { setupFunctioningHardwareInterface(); when(mHardware.getDefaultTetherOffloadDisabled()).thenReturn(1); try { Settings.Global.getInt(mContentResolver, android.provider.Settings.Global.TETHER_OFFLOAD_DISABLED); fail(); } catch (android.provider.Settings.SettingNotFoundException expected) { } final com.android.server.connectivity.tethering.OffloadController offload = makeOffloadController(); offload.start(); final org.mockito.InOrder inOrder = inOrder(mHardware); inOrder.verify(mHardware, times(1)).getDefaultTetherOffloadDisabled(); inOrder.verify(mHardware, never()).initOffloadConfig(); inOrder.verify(mHardware, never()).initOffloadControl(any(OffloadHardwareInterface.ControlCallback.class)); inOrder.verifyNoMoreInteractions(); }
public void testNoSettingsValueDefaultEnabledDoesStart() throws java.lang.Exception { setupFunctioningHardwareInterface(); when(mHardware.getDefaultTetherOffloadDisabled()).thenReturn(0); try { Settings.Global.getInt(mContentResolver, android.provider.Settings.Global.TETHER_OFFLOAD_DISABLED); fail(); } catch (android.provider.Settings.SettingNotFoundException expected) { } final com.android.server.connectivity.tethering.OffloadController offload = makeOffloadController(); offload.start(); final org.mockito.InOrder inOrder = inOrder(mHardware); inOrder.verify(mHardware, times(1)).getDefaultTetherOffloadDisabled(); inOrder.verify(mHardware, times(1)).initOffloadConfig(); inOrder.verify(mHardware, times(1)).initOffloadControl(any(OffloadHardwareInterface.ControlCallback.class)); inOrder.verifyNoMoreInteractions(); }
@org.junit.Test @android.test.suitebuilder.annotation.MediumTest public void testNewSms() { transitionFromStartupToIdle(); mGsmInboundSmsHandler.sendMessage(InboundSmsHandler.EVENT_NEW_SMS, new android.os.AsyncResult(null, mSmsMessage, null)); com.android.internal.telephony.TelephonyTestUtils.waitForMs(100); verifySmsIntentBroadcasts(0); mGsmInboundSmsHandler.sendMessage(InboundSmsHandler.EVENT_NEW_SMS, new android.os.AsyncResult(null, mSmsMessage, null)); com.android.internal.telephony.TelephonyTestUtils.waitForMs(100); verify(mContext, times(2)).sendBroadcast(any(android.content.Intent.class)); assertEquals("IdleState", getCurrentState().getName()); }

private void handleInterfaceLinkStateChanged(java.lang.String iface, boolean up) { if (((!(isStarting())) || (!up)) || (!(java.util.Objects.equals(mIface, iface)))) { return; } android.net.LinkAddress clatAddress = getLinkAddress(iface); if (clatAddress == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ("cladAddress was null for stacked iface " + iface)); return; } mState = com.android.server.connectivity.Nat464Xlat.State.RUNNING; android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, java.lang.String.format("interface %s is up, adding stacked link %s on top of %s", mIface, mIface, mBaseIface)); maybeSetIpv6NdOffload(mBaseIface, false); android.net.LinkProperties lp = new android.net.LinkProperties(mNetwork.linkProperties); lp.addStackedLink(makeLinkProperties(clatAddress)); mNetwork.connService.handleUpdateLinkProperties(mNetwork, lp); }
private void handleInterfaceRemoved(java.lang.String iface) { if ((!(isRunning())) || (!(java.util.Objects.equals(mIface, iface)))) { return; } android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, (("interface " + iface) + " removed")); try { mNMService.unregisterObserver(this); mNMService.stopClatd(mBaseIface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ("Error stopping clatd on " + (mBaseIface)), e); } maybeSetIpv6NdOffload(mBaseIface, true); android.net.LinkProperties lp = new android.net.LinkProperties(mNetwork.linkProperties); lp.removeStackedLink(mIface); enterIdleState(); mNetwork.connService.handleUpdateLinkProperties(mNetwork, lp); }

public void stop() { if (!(isStarted())) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, "stopClat: already stopped or not started"); return; } android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, ("Stopping clatd on " + (mBaseIface))); try { mNMService.stopClatd(mBaseIface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ("Error stopping clatd on " + (mBaseIface)), e); } }

public boolean isAudioConnected(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.VDBG) android.bluetooth.BluetoothHeadset.log("isAudioConnected()"); if ((((mService) != null) && (isEnabled())) && (isValidDevice(device))) { try { return mService.isAudioConnected(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } if ((mService) == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return false; }
public int getConnectionState(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.VDBG) android.bluetooth.BluetoothHeadset.log((("getConnectionState(" + device) + ")")); if ((((mService) != null) && (isEnabled())) && (isValidDevice(device))) { try { return mService.getConnectionState(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return BluetoothProfile.STATE_DISCONNECTED; } } if ((mService) == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return BluetoothProfile.STATE_DISCONNECTED; }
public boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log("startScoUsingVirtualVoiceCall()"); if ((((mService) != null) && (isEnabled())) && (isValidDevice(device))) { try { return mService.startScoUsingVirtualVoiceCall(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); if (android.bluetooth.BluetoothHeadset.DBG) android.util.Log.d(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } return false; }
public boolean disconnect(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log((("disconnect(" + device) + ")")); if ((((mService) != null) && (isEnabled())) && (isValidDevice(device))) { try { return mService.disconnect(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return false; } } if ((mService) == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return false; }
public boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice device, java.lang.String command, java.lang.String arg) { if (android.bluetooth.BluetoothHeadset.DBG) { android.bluetooth.BluetoothHeadset.log("sendVendorSpecificResultCode()"); } if (command == null) { throw new java.lang.IllegalArgumentException("command is null"); } if ((((mService) != null) && (isEnabled())) && (isValidDevice(device))) { try { return mService.sendVendorSpecificResultCode(device, command, arg); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } if ((mService) == null) { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); } return false; }
public boolean setPriority(android.bluetooth.BluetoothDevice device, int priority) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log((((("setPriority(" + device) + ", ") + priority) + ")")); if ((((mService) != null) && (isEnabled())) && (isValidDevice(device))) { if ((priority != (BluetoothProfile.PRIORITY_OFF)) && (priority != (BluetoothProfile.PRIORITY_ON))) { return false; } try { return mService.setPriority(device, priority); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return false; } } if ((mService) == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return false; }
public boolean connect(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log((("connect(" + device) + ")")); if ((((mService) != null) && (isEnabled())) && (isValidDevice(device))) { try { return mService.connect(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return false; } } if ((mService) == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return false; }
public int getBatteryUsageHint(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.VDBG) android.bluetooth.BluetoothHeadset.log("getBatteryUsageHint()"); if ((((mService) != null) && (isEnabled())) && (isValidDevice(device))) { try { return mService.getBatteryUsageHint(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } if ((mService) == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return -1; }
public boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log("stopScoUsingVirtualVoiceCall()"); if ((((mService) != null) && (isEnabled())) && (isValidDevice(device))) { try { return mService.stopScoUsingVirtualVoiceCall(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); if (android.bluetooth.BluetoothHeadset.DBG) android.util.Log.d(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } return false; }
public java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { if (android.bluetooth.BluetoothHeadset.VDBG) android.bluetooth.BluetoothHeadset.log("getDevicesMatchingStates()"); if (((mService) != null) && (isEnabled())) { try { return mService.getDevicesMatchingConnectionStates(states); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); } } if ((mService) == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); }
public int getPriority(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.VDBG) android.bluetooth.BluetoothHeadset.log((("getPriority(" + device) + ")")); if ((((mService) != null) && (isEnabled())) && (isValidDevice(device))) { try { return mService.getPriority(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return PRIORITY_OFF; } } if ((mService) == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return PRIORITY_OFF; }
public boolean startVoiceRecognition(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log("startVoiceRecognition()"); if ((((mService) != null) && (isEnabled())) && (isValidDevice(device))) { try { return mService.startVoiceRecognition(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } if ((mService) == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return false; }
public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { if (android.bluetooth.BluetoothHeadset.VDBG) android.bluetooth.BluetoothHeadset.log("getConnectedDevices()"); if (((mService) != null) && (isEnabled())) { try { return mService.getConnectedDevices(); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); } } if ((mService) == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); }
public boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log("stopVoiceRecognition()"); if ((((mService) != null) && (isEnabled())) && (isValidDevice(device))) { try { return mService.stopVoiceRecognition(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } if ((mService) == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return false; }
public void bindResponse(int ind_id, boolean ind_status) { if (((mService) != null) && (isEnabled())) { try { mService.bindResponse(ind_id, ind_status); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); if (android.bluetooth.BluetoothHeadset.DBG) android.util.Log.d(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } }

private boolean updateWfcFeatureAndProvisionedValues() throws com.android.ims.ImsException { boolean isNetworkRoaming = android.telephony.TelephonyManager.getDefault().isNetworkRoaming(); boolean available = isWfcEnabledByPlatformForSlot(); boolean enabled = isWfcEnabledByUserForSlot(); int mode = getWfcModeForSlot(isNetworkRoaming); boolean roaming = isWfcRoamingEnabledByUserForSlot(); boolean isFeatureOn = available && enabled; com.android.ims.ImsManager.log(((((((("updateWfcFeatureAndProvisionedValues: available = " + available) + ", enabled = ") + enabled) + ", mode = ") + mode) + ", roaming = ") + roaming)); getConfigInterface().setFeatureValue(ImsConfig.FeatureConstants.FEATURE_TYPE_VOICE_OVER_WIFI, TelephonyManager.NETWORK_TYPE_IWLAN, (isFeatureOn ? ImsConfig.FeatureValueConstants.ON : ImsConfig.FeatureValueConstants.OFF), mImsConfigListener); if (!isFeatureOn) { mode = ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED; roaming = false; } com.android.ims.ImsManager.setWfcModeInternal(mContext, mode); setWfcRoamingSettingInternal(roaming); return isFeatureOn; }
public static java.lang.String formatProgressText(long totalBytes, long currentBytes) { if (totalBytes <= 0) { return "0%"; } long progress = (currentBytes * 100) / totalBytes; java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(progress); sb.append('%'); return sb.toString(); }
private static boolean notifyIfInactive(com.android.vts.entity.TestStatusEntity test, long lastRunTime, java.lang.String link, java.util.List<java.lang.String> emails, java.util.List<javax.mail.Message> messages) { long now = java.util.concurrent.TimeUnit.MILLISECONDS.toMicros(java.lang.System.currentTimeMillis()); long diff = now - lastRunTime; if ((diff >= (java.util.concurrent.TimeUnit.DAYS.toMicros(1))) && (diff < (java.util.concurrent.TimeUnit.DAYS.toMicros(8)))) { java.util.Date lastUpload = new java.util.Date(java.util.concurrent.TimeUnit.MICROSECONDS.toMillis(lastRunTime)); java.lang.String uploadTimeString = new java.text.SimpleDateFormat("MM/dd/yyyy HH:mm:ss").format(lastUpload); java.lang.String subject = "Warning! Inactive test: " + (test.testName); java.lang.String body = ((((("Hello,<br><br>Test \"" + (test.testName)) + "\" is inactive. ") + "No new data has been uploaded since ") + uploadTimeString) + ".") + (com.android.vts.job.VtsInactivityJobServlet.getFooter(link)); try { messages.add(com.android.vts.util.EmailHelper.composeEmail(emails, subject, body)); return true; } catch (javax.mail.MessagingException | java.io.UnsupportedEncodingException e) { com.android.vts.job.VtsInactivityJobServlet.logger.log(java.util.logging.Level.WARNING, "Error composing email : ", e); } } return false; }

@java.lang.Override public void enter() { removeDeferredMessages(com.android.bluetooth.a2dp.A2dpStateMachine.CONNECT); log(("Enter Connected: " + (getCurrentMessage().what))); broadcastAudioState(mCurrentDevice, BluetoothA2dp.STATE_NOT_PLAYING, BluetoothA2dp.STATE_PLAYING); }

private static int probeNeighbor(int ifIndex, java.net.InetAddress ip) { final java.lang.String msgSnippet = (("probing ip=" + (ip.getHostAddress())) + "%") + ifIndex; if (android.net.ip.IpReachabilityMonitor.DBG) { android.util.Log.d(android.net.ip.IpReachabilityMonitor.TAG, msgSnippet); } final byte[] msg = android.net.netlink.RtNetlinkNeighborMessage.newNewNeighborMessage(1, ip, StructNdMsg.NUD_PROBE, ifIndex, null); int errno = -(android.system.OsConstants.EPROTO); try (android.net.netlink.NetlinkSocket nlSocket = new android.net.netlink.NetlinkSocket(android.system.OsConstants.NETLINK_ROUTE)) { final long IO_TIMEOUT = 300L; nlSocket.connectToKernel(); nlSocket.sendMessage(msg, 0, msg.length, IO_TIMEOUT); final java.nio.ByteBuffer bytes = nlSocket.recvMessage(IO_TIMEOUT); final android.net.netlink.NetlinkMessage response = android.net.netlink.NetlinkMessage.parse(bytes); if (((response != null) && (response instanceof android.net.netlink.NetlinkErrorMessage)) && ((((android.net.netlink.NetlinkErrorMessage) (response)).getNlMsgError()) != null)) { errno = ((android.net.netlink.NetlinkErrorMessage) (response)).getNlMsgError().error; if (errno != 0) { android.util.Log.e(android.net.ip.IpReachabilityMonitor.TAG, ((("Error " + msgSnippet) + ", errmsg=") + (response.toString()))); } } else { java.lang.String errmsg; if (response == null) { bytes.position(0); errmsg = "raw bytes: " + (android.net.netlink.NetlinkConstants.hexify(bytes)); } else { errmsg = response.toString(); } android.util.Log.e(android.net.ip.IpReachabilityMonitor.TAG, ((("Error " + msgSnippet) + ", errmsg=") + errmsg)); } } catch (android.system.ErrnoException e) { android.util.Log.e(android.net.ip.IpReachabilityMonitor.TAG, ("Error " + msgSnippet), e); errno = -(e.errno); } catch (java.io.InterruptedIOException e) { android.util.Log.e(android.net.ip.IpReachabilityMonitor.TAG, ("Error " + msgSnippet), e); errno = -(android.system.OsConstants.ETIMEDOUT); } catch (java.net.SocketException e) { android.util.Log.e(android.net.ip.IpReachabilityMonitor.TAG, ("Error " + msgSnippet), e); errno = -(android.system.OsConstants.EIO); } return errno; }
private void closeKeyChainConnections() { final int n = mKeyChainConnectionByProfileId.size(); for (int i = 0; i < n; ++i) { mKeyChainConnectionByProfileId.valueAt(i).close(); } mKeyChainConnectionByProfileId.clear(); }
@java.lang.Override protected java.lang.Boolean doInBackground(java.lang.Void... params) { try { android.security.KeyChain.KeyChainConnection keyChainConnection = mKeyChainConnectionByProfileId.get(mCertHolder.mProfileId); android.security.IKeyChainService service = keyChainConnection.getService(); if (mCertHolder.mDeleted) { byte[] bytes = mCertHolder.mX509Cert.getEncoded(); service.installCaCertificate(bytes); return true; } else { return service.deleteCaCertificate(mCertHolder.mAlias); } } catch (java.security.cert.CertificateEncodingException | java.lang.SecurityException | java.lang.IllegalStateException | android.os.RemoteException e) { android.util.Log.w(com.android.settings.TrustedCredentialsSettings.TAG, ("Error while toggling alias " + (mCertHolder.mAlias)), e); return false; } }
@java.lang.Override public java.util.List<java.security.cert.X509Certificate> getX509CertsFromCertHolder(com.android.settings.TrustedCredentialsSettings.CertHolder certHolder) { java.util.List<java.security.cert.X509Certificate> certificates = null; try { android.security.KeyChain.KeyChainConnection keyChainConnection = mKeyChainConnectionByProfileId.get(certHolder.mProfileId); android.security.IKeyChainService service = keyChainConnection.getService(); java.util.List<java.lang.String> chain = service.getCaCertificateChainAliases(certHolder.mAlias, true); final int n = chain.size(); certificates = new java.util.ArrayList<java.security.cert.X509Certificate>(n); for (int i = 0; i < n; ++i) { byte[] encodedCertificate = service.getEncodedCaCertificate(chain.get(i), true); java.security.cert.X509Certificate certificate = android.security.KeyChain.toCertificate(encodedCertificate); certificates.add(certificate); } } catch (android.os.RemoteException ex) { android.util.Log.e(com.android.settings.TrustedCredentialsSettings.TAG, ("RemoteException while retrieving certificate chain for root " + (certHolder.mAlias)), ex); } return certificates; }
public int getProfileConnectionState(com.android.settingslib.bluetooth.LocalBluetoothProfile profile) { if (((mProfileConnectionState) == null) || ((mProfileConnectionState.get(profile)) == null)) { int state = profile.getConnectionStatus(mDevice); mProfileConnectionState.put(profile, state); } return mProfileConnectionState.get(profile); }

void cleanup() { mRegularScanClients.clear(); mBatchClients.clear(); mSuspendedScanClients.clear(); mScanNative.cleanup(); if ((mDm) != null) { mDm.unregisterDisplayListener(mDisplayListener); } if ((mHandler) != null) { mHandler.removeCallbacksAndMessages(null); android.os.Looper looper = mHandler.getLooper(); if (looper != null) { looper.quit(); } mHandler = null; } }


@java.lang.Override public final android.app.WaitResult startActivityAndWait(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int startFlags, android.app.ProfilerInfo profilerInfo, android.os.Bundle bOptions, int userId) { enforceNotIsolatedCaller("startActivityAndWait"); userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, "startActivityAndWait", null); android.app.WaitResult res = new android.app.WaitResult(); mActivityStarter.startActivityMayWait(caller, (-1), callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, startFlags, profilerInfo, res, null, bOptions, false, userId, null, null, "startActivityAndWait"); return res; }
@java.lang.Override public final int startActivityWithConfig(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int startFlags, android.content.res.Configuration config, android.os.Bundle bOptions, int userId) { enforceNotIsolatedCaller("startActivityWithConfig"); userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, "startActivityWithConfig", null); int ret = mActivityStarter.startActivityMayWait(caller, (-1), callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, startFlags, null, null, config, bOptions, false, userId, null, null, "startActivityWithConfig"); return ret; }
@java.lang.Override public final int startActivity(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int startFlags, android.app.ProfilerInfo profilerInfo, android.os.Bundle bOptions) { return startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions, android.os.UserHandle.getCallingUserId()); }
final int startActivityInPackage(int uid, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int startFlags, android.os.Bundle bOptions, int userId, android.app.IActivityContainer container, com.android.server.am.TaskRecord inTask, java.lang.String reason) { userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, "startActivityInPackage", null); int ret = mActivityStarter.startActivityMayWait(null, uid, callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, startFlags, null, null, null, bOptions, false, userId, container, inTask, reason); return ret; }
@java.lang.Override public final int startActivityAsUser(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int startFlags, android.app.ProfilerInfo profilerInfo, android.os.Bundle bOptions, int userId) { enforceNotIsolatedCaller("startActivity"); userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, "startActivity", null); return mActivityStarter.startActivityMayWait(caller, (-1), callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, startFlags, profilerInfo, null, null, bOptions, false, userId, null, null, "startActivityAsUser"); }
@java.lang.Override public int startVoiceActivity(java.lang.String callingPackage, int callingPid, int callingUid, android.content.Intent intent, java.lang.String resolvedType, android.service.voice.IVoiceInteractionSession session, com.android.internal.app.IVoiceInteractor interactor, int startFlags, android.app.ProfilerInfo profilerInfo, android.os.Bundle bOptions, int userId) { if ((checkCallingPermission(Manifest.permission.BIND_VOICE_INTERACTION)) != (android.content.pm.PackageManager.PERMISSION_GRANTED)) { java.lang.String msg = (((("Permission Denial: startVoiceActivity() from pid=" + (android.os.Binder.getCallingPid())) + ", uid=") + (android.os.Binder.getCallingUid())) + " requires ") + (android.Manifest.permission.BIND_VOICE_INTERACTION); android.util.Slog.w(com.android.server.am.ActivityManagerService.TAG, msg); throw new java.lang.SecurityException(msg); } if ((session == null) || (interactor == null)) { throw new java.lang.NullPointerException("null session or interactor"); } userId = mUserController.handleIncomingUser(callingPid, callingUid, userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, "startVoiceActivity", null); return mActivityStarter.startActivityMayWait(null, callingUid, callingPackage, intent, resolvedType, session, interactor, null, null, 0, startFlags, profilerInfo, null, null, bOptions, false, userId, null, null, "startVoiceActivity"); }
public static final android.os.Process.ProcessStartResult start(final java.lang.String processClass, final java.lang.String niceName, int uid, int gid, int[] gids, int debugFlags, int mountExternal, int targetSdkVersion, java.lang.String seInfo, java.lang.String abi, java.lang.String instructionSet, java.lang.String appDataDir, java.lang.String invokeWith, java.lang.String[] zygoteArgs) { return android.os.Process.zygoteProcess.start(processClass, niceName, uid, gid, gids, debugFlags, mountExternal, targetSdkVersion, seInfo, abi, instructionSet, appDataDir, invokeWith, zygoteArgs); }
public static final android.os.Process.ProcessStartResult startWebView(final java.lang.String processClass, final java.lang.String niceName, int uid, int gid, int[] gids, int debugFlags, int mountExternal, int targetSdkVersion, java.lang.String seInfo, java.lang.String abi, java.lang.String instructionSet, java.lang.String appDataDir, java.lang.String invokeWith, java.lang.String[] zygoteArgs) { return android.webkit.WebViewZygote.getProcess().start(processClass, niceName, uid, gid, gids, debugFlags, mountExternal, targetSdkVersion, seInfo, abi, instructionSet, appDataDir, invokeWith, zygoteArgs); }
private void testPreloadDensityInner(android.content.res.Resources res, int densityDpi) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { final android.content.res.XmlResourceParser parser = android.graphics.drawable.cts.DrawableTestUtils.getResourceParser(res, R.drawable.vector_density); final android.graphics.drawable.VectorDrawable preloadedDrawable = new android.graphics.drawable.VectorDrawable(); preloadedDrawable.inflate(mResources, parser, android.util.Xml.asAttributeSet(parser)); final android.graphics.drawable.Drawable.ConstantState preloadedConstantState = preloadedDrawable.getConstantState(); final int origWidth = preloadedDrawable.getIntrinsicWidth(); android.graphics.drawable.cts.DrawableTestUtils.setResourcesDensity(res, (densityDpi / 2)); final android.graphics.drawable.VectorDrawable halfDrawable = ((android.graphics.drawable.VectorDrawable) (preloadedConstantState.newDrawable(res))); assertEquals(java.lang.Math.round((origWidth / 2.0F)), halfDrawable.getIntrinsicWidth()); android.graphics.drawable.cts.DrawableTestUtils.setResourcesDensity(res, (densityDpi * 2)); final android.graphics.drawable.VectorDrawable doubleDrawable = ((android.graphics.drawable.VectorDrawable) (preloadedConstantState.newDrawable(res))); assertEquals((origWidth * 2), doubleDrawable.getIntrinsicWidth()); android.graphics.drawable.cts.DrawableTestUtils.setResourcesDensity(res, densityDpi); final android.graphics.drawable.VectorDrawable origDrawable = ((android.graphics.drawable.VectorDrawable) (preloadedConstantState.newDrawable())); assertEquals(origWidth, origDrawable.getIntrinsicWidth()); final android.content.res.Resources.Theme t = res.newTheme(); halfDrawable.applyTheme(t); assertEquals(origWidth, halfDrawable.getIntrinsicWidth()); doubleDrawable.applyTheme(t); assertEquals(origWidth, doubleDrawable.getIntrinsicWidth()); }
@android.test.suitebuilder.annotation.SmallTest public void testPreloadDensity() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { final android.content.res.Resources res = getContext().getResources(); final int densityDpi = res.getConfiguration().densityDpi; try { testPreloadDensityInner(res, densityDpi); } finally { android.graphics.drawable.cts.DrawableTestUtils.setResourcesDensity(res, densityDpi); } }
@android.test.suitebuilder.annotation.SmallTest public void testGetOpacity() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { android.graphics.drawable.VectorDrawable vectorDrawable = new android.graphics.drawable.VectorDrawable(); assertEquals("Default alpha should be 255", 255, vectorDrawable.getAlpha()); assertEquals("Default opacity should be TRANSLUCENT", PixelFormat.TRANSLUCENT, vectorDrawable.getOpacity()); vectorDrawable.setAlpha(0); assertEquals("Alpha should be 0 now", 0, vectorDrawable.getAlpha()); assertEquals("Opacity should be TRANSPARENT now", PixelFormat.TRANSPARENT, vectorDrawable.getOpacity()); }

public java.util.List<com.android.ahat.heapdump.Site> getChildren() { return mChildren; }
public com.android.dx.util.ByteArray slice(int start, int end) { checkOffsets(start, end); return new com.android.dx.util.ByteArray(bytes, (start + (this.start)), (end + (this.start))); }
public void writeTo(java.io.OutputStream out, java.io.Writer humanOut, boolean verbose) throws java.io.IOException { boolean annotate = humanOut != null; com.android.dx.util.ByteArrayAnnotatedOutput result = toDex0(annotate, verbose); if (out != null) { out.write(result.getArray()); } if (annotate) { result.writeAnnotationsTo(humanOut); } }
@java.lang.Override public int read() throws java.io.IOException { if ((cursor) >= (size)) { return -1; } int result = getUnsignedByte0(cursor); (cursor)++; return result; }
@java.lang.Override public void mark(int reserve) { mark = cursor; }
@java.lang.Override public int available() { return (size) - (cursor); }
@java.lang.Override public void reset() { cursor = mark; }
@java.lang.Override public boolean markSupported() { return true; }
@java.lang.Override public int read(byte[] arr, int offset, int length) { if ((offset + length) > (arr.length)) { length = (arr.length) - offset; } int maxLength = (size) - (cursor); if (length > maxLength) { length = maxLength; } java.lang.System.arraycopy(bytes, ((cursor) + (start)), arr, offset, length); cursor += length; return length; }






@org.junit.After public void tearDown() throws java.lang.Exception { waitForIdleHandler(mServiceHandler, mTimeoutMs); mServiceHandler.chan.disconnect(); mServiceHandler.stop(); if ((mManager) != null) { mManager.disconnect(); } }
private static java.lang.String getCaptivePortalUserAgent(android.content.Context context) { return com.android.server.connectivity.NetworkMonitor.getSetting(context, Settings.Global.CAPTIVE_PORTAL_USER_AGENT, com.android.server.connectivity.NetworkMonitor.DEFAULT_USER_AGENT); }
private java.net.URL[] makeCaptivePortalFallbackUrls(android.content.Context context) { java.lang.String separator = ","; java.lang.String firstUrl = com.android.server.connectivity.NetworkMonitor.getSetting(context, Settings.Global.CAPTIVE_PORTAL_FALLBACK_URL, com.android.server.connectivity.NetworkMonitor.DEFAULT_FALLBACK_URL); java.lang.String joinedUrls = (firstUrl + separator) + (com.android.server.connectivity.NetworkMonitor.getSetting(context, Settings.Global.CAPTIVE_PORTAL_OTHER_FALLBACK_URLS, com.android.server.connectivity.NetworkMonitor.DEFAULT_OTHER_FALLBACK_URLS)); java.util.List<java.net.URL> urls = new java.util.ArrayList<>(); for (java.lang.String s : joinedUrls.split(separator)) { java.net.URL u = makeURL(s); if (u == null) { continue; } urls.add(u); } if (urls.isEmpty()) { android.util.Log.e(com.android.server.connectivity.NetworkMonitor.TAG, java.lang.String.format("could not create any url from %s", joinedUrls)); } return urls.toArray(new java.net.URL[urls.size()]); }
private static java.lang.String getCaptivePortalServerHttpsUrl(android.content.Context context) { return com.android.server.connectivity.NetworkMonitor.getSetting(context, Settings.Global.CAPTIVE_PORTAL_HTTPS_URL, com.android.server.connectivity.NetworkMonitor.DEFAULT_HTTPS_URL); }


int verifyRequest(int expectedMessageType) { verify(mServiceHandler, timeout(mTimeoutMs)).handleMessage(any()); reset(mServiceHandler); android.os.Message received = mServiceHandler.lastMessage; assertEquals(android.net.nsd.NsdManager.nameOf(expectedMessageType), android.net.nsd.NsdManager.nameOf(received.what)); return received.arg2; }
public static android.net.nsd.NsdManagerTest.MockServiceHandler create(android.content.Context context) { android.os.HandlerThread t = new android.os.HandlerThread("mock-service-handler"); t.start(); return new android.net.nsd.NsdManagerTest.MockServiceHandler(t.getLooper(), context); }

@java.lang.Override public final int initialize(final android.telephony.mbms.IMbmsStreamingManagerCallback callback, final int subscriptionId) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); callback.asBinder().linkToDeath(new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, subscriptionId); } }, 0); return initialize(new android.telephony.mbms.MbmsStreamingManagerCallback() { @java.lang.Override public void onError(int errorCode, java.lang.String message) { try { callback.error(errorCode, message); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } @java.lang.Override public void onStreamingServicesUpdated(java.util.List<android.telephony.mbms.StreamingServiceInfo> services) { try { callback.streamingServicesUpdated(services); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } @java.lang.Override public void onMiddlewareReady() { try { callback.middlewareReady(); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } }, subscriptionId); }
private final void closeService() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Pbap Service closeService in"); com.android.bluetooth.pbap.BluetoothPbapUtils.savePbapParams(this, BluetoothPbapUtils.primaryVersionCounter, BluetoothPbapUtils.secondaryVersionCounter, BluetoothPbapUtils.mDbIdentifier.get(), BluetoothPbapUtils.contactsLastUpdated, BluetoothPbapUtils.totalFields, BluetoothPbapUtils.totalSvcFields, BluetoothPbapUtils.totalContacts); mInterrupted = true; if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); closeServerSocket(); if ((mSessionStatusHandler) != null) mSessionStatusHandler.removeCallbacksAndMessages(null); if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Pbap Service closeService out"); }
void discoveryStateChangeCallback(int state) { infoLog(("Callback:discoveryStateChangeCallback with state:" + state)); synchronized(mObject) { android.content.Intent intent; if (state == (AbstractionLayer.BT_DISCOVERY_STOPPED)) { mDiscovering = false; mDiscoveryEndMs = java.lang.System.currentTimeMillis(); intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_FINISHED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } else if (state == (AbstractionLayer.BT_DISCOVERY_STARTED)) { mDiscovering = true; mDiscoveryEndMs = (java.lang.System.currentTimeMillis()) + (com.android.bluetooth.btservice.AdapterProperties.DEFAULT_DISCOVERY_TIMEOUT_MS); intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_STARTED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } } }

public static java.lang.String calledPartyBCDToString(byte[] bytes, int offset, int length) { boolean prependPlus = false; java.lang.StringBuilder ret = new java.lang.StringBuilder((1 + (length * 2))); if (length < 2) { return ""; } if (((bytes[offset]) & 240) == ((android.telephony.PhoneNumberUtils.TOA_International) & 240)) { prependPlus = true; } android.telephony.PhoneNumberUtils.internalCalledPartyBCDFragmentToString(ret, bytes, (offset + 1), (length - 1)); if (prependPlus && ((ret.length()) == 0)) { return ""; } if (prependPlus) { java.lang.String retString = ret.toString(); java.util.regex.Pattern p = java.util.regex.Pattern.compile("(^[#*])(.*)([#*])(.*)(#)$"); java.util.regex.Matcher m = p.matcher(retString); if (m.matches()) { if ("".equals(m.group(2))) { ret = new java.lang.StringBuilder(); ret.append(m.group(1)); ret.append(m.group(3)); ret.append(m.group(4)); ret.append(m.group(5)); ret.append("+"); } else { ret = new java.lang.StringBuilder(); ret.append(m.group(1)); ret.append(m.group(2)); ret.append(m.group(3)); ret.append("+"); ret.append(m.group(4)); ret.append(m.group(5)); } } else { p = java.util.regex.Pattern.compile("(^[#*])(.*)([#*])(.*)"); m = p.matcher(retString); if (m.matches()) { ret = new java.lang.StringBuilder(); ret.append(m.group(1)); ret.append(m.group(2)); ret.append(m.group(3)); ret.append("+"); ret.append(m.group(4)); } else { ret = new java.lang.StringBuilder(); ret.append('+'); ret.append(retString); } } } return ret.toString(); }

@org.junit.Test public void testWakeupStatsSerialization() { android.net.metrics.WakeupStats stats = new android.net.metrics.WakeupStats("wlan0"); stats.totalWakeups = 14; stats.applicationWakeups = 5; stats.nonApplicationWakeups = 1; stats.rootWakeups = 2; stats.systemWakeups = 3; stats.unroutedWakeups = 3; com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent got = com.android.server.connectivity.IpConnectivityEventBuilder.toProto(stats); java.lang.String want = java.lang.String.join("\n", "dropped_events: 0", "events <", " if_name: \"\"", " link_layer: 4", " network_id: 0", " time_ms: 0", " transports: 0", " wakeup_stats <", " application_wakeups: 5", " duration_sec: 0", " non_application_wakeups: 1", " root_wakeups: 2", " system_wakeups: 3", " total_wakeups: 14", " unrouted_wakeups: 3", " >", ">", "version: 2\n"); com.android.server.connectivity.IpConnectivityEventBuilderTest.verifySerialization(want, got); }
@org.junit.Test public void testWakeupStatsLogging() throws java.lang.Exception { wakeupEvent("wlan0", 1000); wakeupEvent("rmnet0", 10123); wakeupEvent("wlan0", 1000); wakeupEvent("rmnet0", 10008); wakeupEvent("wlan0", (-1)); wakeupEvent("wlan0", 10008); wakeupEvent("rmnet0", 1000); wakeupEvent("wlan0", 10004); wakeupEvent("wlan0", 1000); wakeupEvent("wlan0", 0); wakeupEvent("wlan0", (-1)); wakeupEvent("rmnet0", 10052); wakeupEvent("wlan0", 0); wakeupEvent("rmnet0", 1000); wakeupEvent("wlan0", 1010); java.lang.String got = flushStatistics(); java.lang.String want = java.lang.String.join("\n", "dropped_events: 0", "events <", " if_name: \"\"", " link_layer: 2", " network_id: 0", " time_ms: 0", " transports: 0", " wakeup_stats <", " application_wakeups: 3", " duration_sec: 0", " non_application_wakeups: 0", " root_wakeups: 0", " system_wakeups: 2", " total_wakeups: 5", " unrouted_wakeups: 0", " >", ">", "events <", " if_name: \"\"", " link_layer: 4", " network_id: 0", " time_ms: 0", " transports: 0", " wakeup_stats <", " application_wakeups: 2", " duration_sec: 0", " non_application_wakeups: 1", " root_wakeups: 2", " system_wakeups: 3", " total_wakeups: 10", " unrouted_wakeups: 2", " >", ">", "version: 2\n"); assertEquals(want, got); }
private static int compareBooleans(boolean x, boolean y) { return java.lang.Integer.compare((x ? 1 : 0), (y ? 1 : 0)); }

private void openChannel() { int p2 = 0; mUiccCard.iccOpenLogicalChannel(com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.AID, p2, obtainMessage(com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.EVENT_OPEN_LOGICAL_CHANNEL_DONE, null)); }
@java.lang.Override public void addAccount(android.accounts.IAccountAuthenticatorResponse response, java.lang.String accountType, java.lang.String authTokenType, java.lang.String[] features, android.os.Bundle options) throws android.os.RemoteException { if (android.util.Log.isLoggable(android.accounts.AbstractAccountAuthenticator.TAG, Log.VERBOSE)) { android.util.Log.v(android.accounts.AbstractAccountAuthenticator.TAG, ((((("addAccount: accountType " + accountType) + ", authTokenType ") + authTokenType) + ", features ") + (features == null ? "[]" : java.util.Arrays.toString(features)))); } checkBinderPermission(); try { final android.os.Bundle result = this.addAccount(new android.accounts.AccountAuthenticatorResponse(response), accountType, authTokenType, features, options); if (android.util.Log.isLoggable(android.accounts.AbstractAccountAuthenticator.TAG, Log.VERBOSE)) { if (result != null) { result.keySet(); } android.util.Log.v(android.accounts.AbstractAccountAuthenticator.TAG, ("addAccount: result " + (android.accounts.AccountManager.sanitizeResult(result)))); } if (result != null) { response.onResult(result); } } catch (java.lang.Exception e) { handleException(response, "addAccount", accountType, e); } }
void sendConnectionStateChange(android.bluetooth.BluetoothDevice device, int profile, int state, int prevState) { if ((!(validateProfileConnectionState(state))) || (!(validateProfileConnectionState(prevState)))) { com.android.bluetooth.btservice.AdapterProperties.errorLog(((("sendConnectionStateChange: invalid state transition " + prevState) + " -> ") + state)); return; } synchronized(mObject) { updateProfileConnectionState(profile, state, prevState); if (updateCountersAndCheckForConnectionStateChange(state, prevState)) { int newAdapterState = com.android.bluetooth.btservice.AdapterProperties.convertToAdapterState(state); int prevAdapterState = com.android.bluetooth.btservice.AdapterProperties.convertToAdapterState(prevState); setConnectionState(newAdapterState); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.putExtra(BluetoothAdapter.EXTRA_CONNECTION_STATE, newAdapterState); intent.putExtra(BluetoothAdapter.EXTRA_PREVIOUS_CONNECTION_STATE, prevAdapterState); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); android.util.Log.d(com.android.bluetooth.btservice.AdapterProperties.TAG, ((((("ADAPTER_CONNECTION_STATE_CHANGE: " + device) + ": ") + prevAdapterState) + " -> ") + newAdapterState)); if (!(com.android.bluetooth.btservice.AdapterProperties.isNormalStateTransition(prevState, state))) { android.util.Log.e(com.android.bluetooth.btservice.AdapterProperties.TAG, ((((((("ADAPTER_CONNECTION_STATE_CHANGE: invalid transition for profile=" + profile) + ", device=") + device) + ", ") + prevState) + " -> ") + state)); } mService.sendBroadcastAsUser(intent, UserHandle.ALL, AdapterService.BLUETOOTH_PERM); } } }
private void sendConnectionStateChange(int profile, android.content.Intent connIntent) { android.bluetooth.BluetoothDevice device = connIntent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); int prevState = connIntent.getIntExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, (-1)); int state = connIntent.getIntExtra(BluetoothProfile.EXTRA_STATE, (-1)); android.util.Log.d(com.android.bluetooth.btservice.AdapterProperties.TAG, ((((((("PROFILE_CONNECTION_STATE_CHANGE: profile=" + profile) + ", device=") + device) + ", ") + prevState) + " -> ") + state)); if (!(com.android.bluetooth.btservice.AdapterProperties.isNormalStateTransition(prevState, state))) { android.util.Log.e(com.android.bluetooth.btservice.AdapterProperties.TAG, ((((((("PROFILE_CONNECTION_STATE_CHANGE: invalid transition for profile=" + profile) + ", device=") + device) + ", ") + prevState) + " -> ") + state)); } sendConnectionStateChange(device, profile, state, prevState); }
@org.junit.Test public void testJobDuration() throws java.lang.Exception { android.app.job.JobScheduler js = mContext.getSystemService(android.app.job.JobScheduler.class); assertTrue("JobScheduler service not available", (js != null)); final android.app.job.JobInfo job = createJobInfo(1); for (int i = 0; i < 3; i++) { java.util.concurrent.CountDownLatch latch = com.android.server.cts.device.batterystats.SimpleJobService.resetCountDownLatch(); android.util.Log.i(com.android.server.cts.device.batterystats.BatteryStatsJobDurationTests.TAG, "Scheduling job."); js.schedule(job); android.util.Log.i(com.android.server.cts.device.batterystats.BatteryStatsJobDurationTests.TAG, "Waiting for job to finish."); if (!(latch.await(5, java.util.concurrent.TimeUnit.SECONDS))) { android.util.Log.e(com.android.server.cts.device.batterystats.BatteryStatsJobDurationTests.TAG, "Job didn't finish in 5 seconds"); fail("Job didn't finish in 5 seconds"); } } }
@java.lang.Override protected boolean refreshUi() { mUsageState = mUsageBridge.getUsageInfo(mPackageName, mPackageInfo.applicationInfo.uid); boolean hasAccess = mUsageState.isPermissible(); mSwitchPref.setChecked(hasAccess); mSwitchPref.setEnabled(mUsageState.permissionDeclared); mUsagePrefs.setEnabled(hasAccess); android.content.pm.ResolveInfo resolveInfo = mPm.resolveActivityAsUser(mSettingsIntent, PackageManager.GET_META_DATA, mUserId); if (resolveInfo != null) { if ((findPreference(com.android.settings.applications.UsageAccessDetails.KEY_APP_OPS_SETTINGS_PREFS)) == null) { getPreferenceScreen().addPreference(mUsagePrefs); } android.os.Bundle metaData = resolveInfo.activityInfo.metaData; mSettingsIntent.setComponent(new android.content.ComponentName(resolveInfo.activityInfo.packageName, resolveInfo.activityInfo.name)); if ((metaData != null) && (metaData.containsKey(Settings.METADATA_USAGE_ACCESS_REASON))) { mSwitchPref.setSummary(metaData.getString(Settings.METADATA_USAGE_ACCESS_REASON)); } } else { if ((findPreference(com.android.settings.applications.UsageAccessDetails.KEY_APP_OPS_SETTINGS_PREFS)) != null) { getPreferenceScreen().removePreference(mUsagePrefs); } } return true; }
private static int $noinline$bar() { Main.assertIsInterpreted(); Main.sEntered = true; while (!(Main.sExitFlag)) { } Main.assertIsInterpreted(); return 4660; }
public void run() { if ((threadIndex) == 0) { while (!(Main.sEntered)) { java.lang.Thread.yield(); } Main.deoptimizeAll(); Main.sExitFlag = true; } else { Main.ensureJitCompiled(Main.class, "$noinline$foo"); $noinline$foo(); } }
@java.lang.Override public void handleMessage(android.os.Message msg) { try { java.lang.Thread.sleep(2000); } catch (java.lang.InterruptedException e) { java.lang.Thread.currentThread().interrupt(); } stopSelf(msg.arg1); }
public static synchronized com.android.ahat.TestDump getTestDump() throws java.io.IOException { if (com.android.ahat.TestDump.mTestDumpFailed) { throw new java.lang.RuntimeException("Test dump failed before, assuming it will again"); } if ((com.android.ahat.TestDump.mCachedTestDump) == null) { com.android.ahat.TestDump.mTestDumpFailed = true; com.android.ahat.TestDump.mCachedTestDump = new com.android.ahat.TestDump(); com.android.ahat.TestDump.mTestDumpFailed = false; } return com.android.ahat.TestDump.mCachedTestDump; }


@java.lang.Override public void handle(com.sun.net.httpserver.HttpExchange exchange) throws java.io.IOException { java.lang.ClassLoader loader = com.android.ahat.StaticHandler.class.getClassLoader(); java.io.InputStream is = loader.getResourceAsStream(mResourceName); if (is == null) { exchange.getResponseHeaders().add("Content-Type", "text/html"); exchange.sendResponseHeaders(404, 0); java.io.PrintStream ps = new java.io.PrintStream(exchange.getResponseBody()); com.android.ahat.HtmlDoc doc = new com.android.ahat.HtmlDoc(ps, com.android.ahat.DocString.text("ahat"), com.android.ahat.DocString.uri("style.css")); doc.big(com.android.ahat.DocString.text("Resource not found.")); doc.close(); } else { exchange.getResponseHeaders().add("Content-Type", mContentType); exchange.sendResponseHeaders(200, 0); java.io.OutputStream os = exchange.getResponseBody(); com.google.common.io.ByteStreams.copy(is, os); os.close(); } }
public org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket getMethods(long classReferenceTypeID) { org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket commandPacket = new org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket(); commandPacket.setCommand(JDWPCommands.ReferenceTypeCommandSet.MethodsCommand); commandPacket.setCommandSet(JDWPCommands.ReferenceTypeCommandSet.CommandSetID); commandPacket.setNextValueAsObjectID(classReferenceTypeID); return checkReply(performCommand(commandPacket)); }
public void testBytecodesTest001() { logWriter.println("testBytecodesTest001 started"); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); long classID = getClassIDBySignature((("L" + (getDebuggeeClassName().replace('.', '/'))) + ";")); org.apache.harmony.jpda.tests.jdwp.Method.MethodInfo[] methodsInfo = jdwpGetMethodsInfo(classID); assertFalse("Invalid number of methods", ((methodsInfo.length) == 0)); for (int i = 0; i < (methodsInfo.length); i++) { logWriter.println(methodsInfo[i].toString()); org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket packet = new org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket(JDWPCommands.MethodCommandSet.CommandSetID, JDWPCommands.MethodCommandSet.BytecodesCommand); packet.setNextValueAsClassID(classID); packet.setNextValueAsMethodID(methodsInfo[i].getMethodID()); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.performCommand(packet); checkReplyPacket(reply, "Method::Bytecodes command"); int bytes = reply.getNextValueAsInt(); logWriter.println(("bytes = " + bytes)); byte[] bytecode = new byte[bytes]; for (int j = 0; j < bytes; j++) { bytecode[j] = reply.getNextValueAsByte(); } logWriter.println(("Bytecode=" + (java.util.Arrays.toString(bytecode)))); } synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); }
public final java.lang.String getMethodSignature(long classID, long methodID) { org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket command = new org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket(JDWPCommands.ReferenceTypeCommandSet.CommandSetID, JDWPCommands.ReferenceTypeCommandSet.MethodsCommand); command.setNextValueAsReferenceTypeID(classID); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = checkReply(performCommand(command)); int methods = reply.getNextValueAsInt(); java.lang.String value = null; for (int i = 0; i < methods; i++) { long mID = reply.getNextValueAsMethodID(); reply.getNextValueAsString(); java.lang.String methodSign = reply.getNextValueAsString(); reply.getNextValueAsInt(); if (mID == methodID) { value = methodSign; value = value.replaceAll("/", "."); int lastRoundBracketIndex = value.lastIndexOf(")"); value = value.substring(0, (lastRoundBracketIndex + 1)); break; } } return value; }
public void testIsObsoleteTest001() { logWriter.println("testObsoleteTest001 started"); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); long classID = getClassIDBySignature((("L" + (getDebuggeeClassName().replace('.', '/'))) + ";")); org.apache.harmony.jpda.tests.jdwp.Method.MethodInfo[] methodsInfo = jdwpGetMethodsInfo(classID); assertFalse("Invalid number of methods", ((methodsInfo.length) == 0)); for (org.apache.harmony.jpda.tests.jdwp.Method.MethodInfo methodInfo : methodsInfo) { logWriter.println(methodInfo.toString()); org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket packet = new org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket(JDWPCommands.MethodCommandSet.CommandSetID, JDWPCommands.MethodCommandSet.IsObsoleteCommand); packet.setNextValueAsClassID(classID); packet.setNextValueAsMethodID(methodInfo.getMethodID()); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.performCommand(packet); checkReplyPacket(reply, "Method::IsObsolete command"); boolean isObsolete = reply.getNextValueAsBoolean(); logWriter.println(("isObsolete=" + isObsolete)); assertAllDataRead(reply); } synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); }

public java.lang.String getMethodName(long classID, long methodID) { org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket packet = new org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket(JDWPCommands.ReferenceTypeCommandSet.CommandSetID, JDWPCommands.ReferenceTypeCommandSet.MethodsCommand); packet.setNextValueAsReferenceTypeID(classID); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = performCommand(packet); int declared = reply.getNextValueAsInt(); long mID; java.lang.String value = null; java.lang.String methodName = ""; for (int i = 0; i < declared; i++) { mID = reply.getNextValueAsMethodID(); methodName = reply.getNextValueAsString(); reply.getNextValueAsString(); reply.getNextValueAsInt(); if (mID == methodID) { value = methodName; break; } } return value; }
public void testLineTableTest001() { logWriter.println("testLineTableTest001 started"); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); long classID = getClassIDBySignature((("L" + (getDebuggeeClassName().replace('.', '/'))) + ";")); org.apache.harmony.jpda.tests.jdwp.Method.MethodInfo[] methodsInfo = jdwpGetMethodsInfo(classID); assertFalse("Invalid number of methods: 0", ((methodsInfo.length) == 0)); for (int i = 0; i < (methodsInfo.length); i++) { logWriter.println(methodsInfo[i].toString()); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = getLineTable(classID, methodsInfo[i].getMethodID()); long start = reply.getNextValueAsLong(); logWriter.println(("start = " + start)); long end = reply.getNextValueAsLong(); logWriter.println(("end = " + end)); int lines = reply.getNextValueAsInt(); logWriter.println(("lines = " + lines)); for (int j = 0; j < lines; j++) { long lineCodeIndex = reply.getNextValueAsLong(); logWriter.println(("lineCodeIndex = " + lineCodeIndex)); int lineNumber = reply.getNextValueAsInt(); logWriter.println(("lineNumber = " + lineNumber)); } } synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); }
public final java.util.List<org.apache.harmony.jpda.tests.framework.jdwp.Frame.Variable> getVariableTable(long classID, long methodID) { org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket command = new org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket(JDWPCommands.MethodCommandSet.CommandSetID, JDWPCommands.MethodCommandSet.VariableTableCommand); command.setNextValueAsReferenceTypeID(classID); command.setNextValueAsMethodID(methodID); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = performCommand(command); if (((reply.getErrorCode()) == (JDWPConstants.Error.ABSENT_INFORMATION)) || ((reply.getErrorCode()) == (JDWPConstants.Error.NATIVE_METHOD))) { return null; } checkReply(reply); reply.getNextValueAsInt(); int slots = reply.getNextValueAsInt(); if (slots == 0) { return null; } java.util.ArrayList<org.apache.harmony.jpda.tests.framework.jdwp.Frame.Variable> vars = new java.util.ArrayList<org.apache.harmony.jpda.tests.framework.jdwp.Frame.Variable>(slots); for (int i = 0; i < slots; i++) { org.apache.harmony.jpda.tests.framework.jdwp.Frame.Variable var = new org.apache.harmony.jpda.tests.framework.jdwp.Frame().new org.apache.harmony.jpda.tests.framework.jdwp.Frame.Variable(); var.setCodeIndex(reply.getNextValueAsLong()); var.setName(reply.getNextValueAsString()); var.setSignature(reply.getNextValueAsString()); var.setLength(reply.getNextValueAsInt()); var.setSlot(reply.getNextValueAsInt()); vars.add(var); } return vars; }
protected org.apache.harmony.jpda.tests.jdwp.StackFrame.JDWPStackFrameTestCase.VarInfo[] jdwpGetVariableTable(long classID, long methodID) { org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket packet = new org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket(JDWPCommands.MethodCommandSet.CommandSetID, JDWPCommands.MethodCommandSet.VariableTableCommand); packet.setNextValueAsClassID(classID); packet.setNextValueAsMethodID(methodID); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.performCommand(packet); checkReplyPacket(reply, "Method::VariableTable command"); reply.getNextValueAsInt(); int varNumber = reply.getNextValueAsInt(); org.apache.harmony.jpda.tests.jdwp.StackFrame.JDWPStackFrameTestCase.VarInfo[] varInfos = new org.apache.harmony.jpda.tests.jdwp.StackFrame.JDWPStackFrameTestCase.VarInfo[varNumber]; for (int i = 0; i < varNumber; i++) { reply.getNextValueAsLong(); java.lang.String name = reply.getNextValueAsString(); java.lang.String sign = reply.getNextValueAsString(); reply.getNextValueAsInt(); int slot = reply.getNextValueAsInt(); varInfos[i] = new org.apache.harmony.jpda.tests.jdwp.StackFrame.JDWPStackFrameTestCase.VarInfo(name, slot, sign); } return varInfos; }
@org.junit.Test public void parseCaseInsensitive() { long now = java.lang.System.currentTimeMillis(); org.apache.http.Header[] headersArray = new org.apache.http.Header[5]; headersArray[0] = new org.apache.http.message.BasicHeader("eTAG", "Yow!"); headersArray[1] = new org.apache.http.message.BasicHeader("DATE", com.android.volley.toolbox.HttpHeaderParserTest.rfc1123Date(now)); headersArray[2] = new org.apache.http.message.BasicHeader("expires", com.android.volley.toolbox.HttpHeaderParserTest.rfc1123Date((now + (com.android.volley.toolbox.HttpHeaderParserTest.ONE_HOUR_MILLIS)))); headersArray[3] = new org.apache.http.message.BasicHeader("cache-control", "public, max-age=86400"); headersArray[4] = new org.apache.http.message.BasicHeader("content-type", "text/plain"); java.util.Map<java.lang.String, java.lang.String> headers = com.android.volley.toolbox.BasicNetwork.convertHeaders(headersArray); com.android.volley.NetworkResponse response = new com.android.volley.NetworkResponse(0, null, headers, false); com.android.volley.Cache.Entry entry = com.android.volley.toolbox.HttpHeaderParser.parseCacheHeaders(response); assertNotNull(entry); assertEquals("Yow!", entry.etag); assertEqualsWithin((now + (com.android.volley.toolbox.HttpHeaderParserTest.ONE_DAY_MILLIS)), entry.ttl, com.android.volley.toolbox.HttpHeaderParserTest.ONE_MINUTE_MILLIS); assertEquals(entry.softTtl, entry.ttl); assertEquals("ISO-8859-1", com.android.volley.toolbox.HttpHeaderParser.parseCharset(headers)); }




private static void assertSizesRotate(android.server.cts.ReportedSizes rotationA, android.server.cts.ReportedSizes rotationB) throws java.lang.Exception { assertEquals(rotationA.displayWidth, rotationA.metricsWidth); assertEquals(rotationA.displayHeight, rotationA.metricsHeight); assertEquals(rotationB.displayWidth, rotationB.metricsWidth); assertEquals(rotationB.displayHeight, rotationB.metricsHeight); final boolean beforePortrait = (rotationA.displayWidth) < (rotationA.displayHeight); final boolean afterPortrait = (rotationB.displayWidth) < (rotationB.displayHeight); assertFalse((beforePortrait == afterPortrait)); final boolean beforeConfigPortrait = (rotationA.widthDp) < (rotationA.heightDp); final boolean afterConfigPortrait = (rotationB.widthDp) < (rotationB.heightDp); assertEquals(beforePortrait, beforeConfigPortrait); assertEquals(afterPortrait, afterConfigPortrait); }
public void testNetworkTypes() { assertTrue(mCm.isNetworkSupported(com.android.server.TYPE_WIFI)); assertTrue(mCm.isNetworkSupported(com.android.server.TYPE_MOBILE)); }




void handleStopScan(com.android.bluetooth.gatt.ScanClient client) { com.android.bluetooth.Utils.enforceAdminPermission(mService); if (client == null) return; if (mRegularScanClients.contains(client)) { mScanNative.stopRegularScan(client); if ((mScanNative.numRegularScanClients()) == 0) { mHandler.removeMessages(com.android.bluetooth.gatt.ScanManager.MSG_SCAN_TIMEOUT); } if (!(mScanNative.isOpportunisticScanClient(client))) { mScanNative.configureRegularScanParams(); } } else { mScanNative.stopBatchScan(client); } if (client.appDied) { if (com.android.bluetooth.gatt.ScanManager.DBG) android.util.Log.d(com.android.bluetooth.gatt.ScanManager.TAG, ("app died, unregister scanner - " + (client.scannerId))); mService.unregisterScanner(client.scannerId); } }
void cleanup() { mRegularScanClients.clear(); mBatchClients.clear(); mScanNative.cleanup(); if ((mHandler) != null) { mHandler.removeCallbacksAndMessages(null); android.os.Looper looper = mHandler.getLooper(); if (looper != null) { looper.quit(); } mHandler = null; } }
void handleStartScan(com.android.bluetooth.gatt.ScanClient client) { com.android.bluetooth.Utils.enforceAdminPermission(mService); if (com.android.bluetooth.gatt.ScanManager.DBG) android.util.Log.d(com.android.bluetooth.gatt.ScanManager.TAG, "handling starting scan"); if (!(isScanSupported(client))) { android.util.Log.e(com.android.bluetooth.gatt.ScanManager.TAG, "Scan settings not supported"); return; } if ((mRegularScanClients.contains(client)) || (mBatchClients.contains(client))) { android.util.Log.e(com.android.bluetooth.gatt.ScanManager.TAG, "Scan already started"); return; } if (isBatchClient(client)) { mBatchClients.add(client); mScanNative.startBatchScan(client); } else { mRegularScanClients.add(client); mScanNative.startRegularScan(client); if (!(mScanNative.isOpportunisticScanClient(client))) { mScanNative.configureRegularScanParams(); if (!(mScanNative.isExemptFromScanDowngrade(client))) { android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.gatt.ScanManager.MSG_SCAN_TIMEOUT); msg.obj = client; mHandler.sendMessageDelayed(msg, AppScanStats.SCAN_TIMEOUT_MS); } } } }

private final void mainLoop() { while (isRunning()) { final int bytesRead; try { bytesRead = android.system.Os.read(mSocket, mPacket, 0, mPacket.length); if (bytesRead < 1) { if (isRunning()) logError("Socket closed, exiting", null); break; } (mPacketsReceived)++; } catch (android.system.ErrnoException e) { if ((e.errno) != (android.system.OsConstants.EINTR)) { if (isRunning()) logError("read error: ", e); break; } continue; } catch (java.io.IOException ioe) { if (isRunning()) logError("read error: ", ioe); continue; } try { handlePacket(mPacket, bytesRead); } catch (java.lang.Exception e) { logError("Unexpected exception: ", e); break; } } stop(); onExit(); }


public static final void closeSocket(@android.annotation.Nullable java.io.FileDescriptor fd) { try { libcore.io.IoBridge.closeAndSignalBlockedThreads(fd); } catch (java.io.IOException ignored) { } }
void waitForActivity() throws java.lang.Exception { assertTrue(mLatch.await(500, java.util.concurrent.TimeUnit.MILLISECONDS)); resetLatch(); }
@java.lang.Override public void tearDown(com.android.tradefed.device.ITestDevice device, com.android.tradefed.build.IBuildInfo buildInfo, java.lang.Throwable e) throws com.android.tradefed.device.DeviceNotAvailableException { if ((mVenvDir) != null) { com.android.tradefed.util.FileUtil.recursiveDelete(mVenvDir); com.android.tradefed.log.LogUtil.CLog.i("Deleted the virtual env's temp working dir, %s.", mVenvDir); mVenvDir = null; } }
private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException { internalZoneStrings(); stream.defaultWriteObject(); }
private final java.lang.String[][] getZoneStringsImpl(boolean needsCopy) { java.lang.String[][] zoneStrings = internalZoneStrings(); if (!needsCopy) { return zoneStrings; } int len = zoneStrings.length; java.lang.String[][] aCopy = new java.lang.String[len][]; for (int i = 0; i < len; i++) { aCopy[i] = java.util.Arrays.copyOf(zoneStrings[i], zoneStrings[i].length); } return aCopy; }







public void updatePreferenceIntents(android.support.v7.preference.PreferenceGroup prefs, final java.lang.String acccountType, android.accounts.Account account) { final android.content.pm.PackageManager pm = mFragment.getActivity().getPackageManager(); for (int i = 0; i < (prefs.getPreferenceCount());) { android.support.v7.preference.Preference pref = prefs.getPreference(i); if (pref instanceof android.support.v7.preference.PreferenceGroup) { updatePreferenceIntents(((android.support.v7.preference.PreferenceGroup) (pref)), acccountType, account); } android.content.Intent intent = pref.getIntent(); if (intent != null) { if (intent.getAction().equals(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS)) { pref.setOnPreferenceClickListener(new com.android.settings.accounts.AccountTypePreferenceLoader.FragmentStarter(com.android.settings.location.LocationSettings.class.getName(), R.string.location_settings_title)); } else { android.content.pm.ResolveInfo ri = pm.resolveActivityAsUser(intent, PackageManager.MATCH_DEFAULT_ONLY, mUserHandle.getIdentifier()); if (ri == null) { prefs.removePreference(pref); continue; } intent.putExtra(com.android.settings.accounts.AccountTypePreferenceLoader.ACCOUNT_KEY, account); intent.setFlags(((intent.getFlags()) | (android.content.Intent.FLAG_ACTIVITY_NEW_TASK))); pref.setOnPreferenceClickListener(new android.support.v7.preference.Preference.OnPreferenceClickListener() { @java.lang.Override public boolean onPreferenceClick(android.support.v7.preference.Preference preference) { android.content.Intent prefIntent = preference.getIntent(); if (isSafeIntent(pm, prefIntent, acccountType)) { mFragment.getActivity().startActivityAsUser(prefIntent, mUserHandle); } else { android.util.Log.e(com.android.settings.accounts.AccountTypePreferenceLoader.TAG, (("Refusing to launch authenticator intent because" + "it exploits Settings permissions: ") + prefIntent)); } return true; } }); } } i++; } }
@java.lang.Override public void onRestoreInstanceState(android.os.Bundle savedInstanceState) { super.onRestoreInstanceState(savedInstanceState); mTextMsg = savedInstanceState.getParcelable(com.android.stk.StkDialogActivity.TEXT); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkDialogActivity.LOG_TAG, (("onRestoreInstanceState - [" + (mTextMsg)) + "]")); }
@java.lang.Override public void onSaveInstanceState(android.os.Bundle outState) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkDialogActivity.LOG_TAG, "onSaveInstanceState"); super.onSaveInstanceState(outState); outState.putParcelable(com.android.stk.StkDialogActivity.TEXT, mTextMsg); }
@java.lang.Override public void onDestroy() { super.onDestroy(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkDialogActivity.LOG_TAG, ((("onDestroy - mIsResponseSent[" + (mIsResponseSent)) + "], sim id: ") + (mSlotId))); if ((!(mIsResponseSent)) && (!(appService.isDialogPending(mSlotId)))) { sendResponse(StkAppService.RES_ID_CONFIRM, false); } cancelTimeOut(); if ((mBroadcastReceiver) != null) { unregisterReceiver(mBroadcastReceiver); } }


public static int magicToApi(byte[] magic) { if ((magic.length) != 8) { return -1; } if ((((((magic[0]) != 'd') || ((magic[1]) != 'e')) || ((magic[2]) != 'x')) || ((magic[3]) != '\n')) || ((magic[7]) != '\u0000')) { return -1; } java.lang.String version = (("" + ((char) (magic[4]))) + ((char) (magic[5]))) + ((char) (magic[6])); if (version.equals(com.android.dex.DexFormat.VERSION_FOR_API_13)) { return com.android.dex.DexFormat.API_NO_EXTENDED_OPCODES; } else if (version.equals(com.android.dex.DexFormat.VERSION_FOR_API_24)) { return com.android.dex.DexFormat.API_DEFAULT_INTERFACE_METHODS; } else if (version.equals(com.android.dex.DexFormat.VERSION_FOR_API_26)) { return com.android.dex.DexFormat.API_INVOKE_POLYMORPHIC; } else if (version.equals(com.android.dex.DexFormat.VERSION_CURRENT)) { return com.android.dex.DexFormat.API_CURRENT; } return -1; }

private void stopObexServerSession() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Pbap Service stopObexServerSession"); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_ACQUIRE_WAKE_LOCK); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_RELEASE_WAKE_LOCK); if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if (((mAdapter) != null) && (mAdapter.isEnabled())) { startSocketListeners(); } setState(BluetoothPbap.STATE_DISCONNECTED); }

android.net.IpSecConfig buildIpSecConfig() throws java.lang.Exception { android.net.IpSecManager ipSecManager = new android.net.IpSecManager(mIpSecService); when(mMockNetd.ipSecAllocateSpi(anyInt(), anyInt(), anyString(), anyString(), anyInt())).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI2); android.net.IpSecAlgorithm encryptAlgo = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, com.android.server.IpSecServiceTest.CRYPT_KEY); android.net.IpSecAlgorithm authAlgo = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, com.android.server.IpSecServiceTest.AUTH_KEY, ((com.android.server.IpSecServiceTest.AUTH_KEY.length) * 8)); java.net.InetAddress localAddr = java.net.InetAddress.getByAddress(new byte[]{ 127, 0, 0, 1 }); android.net.IpSecManager.SecurityParameterIndex outSpi = ipSecManager.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, localAddr); android.net.IpSecManager.SecurityParameterIndex inSpi = ipSecManager.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_IN, localAddr); android.net.IpSecConfig ipSecConfig = new android.net.IpSecTransform.Builder(mMockContext).setSpi(IpSecTransform.DIRECTION_OUT, outSpi).setSpi(IpSecTransform.DIRECTION_IN, inSpi).setEncryption(IpSecTransform.DIRECTION_OUT, encryptAlgo).setAuthentication(IpSecTransform.DIRECTION_OUT, authAlgo).setEncryption(IpSecTransform.DIRECTION_IN, encryptAlgo).setAuthentication(IpSecTransform.DIRECTION_IN, authAlgo).getIpSecConfig(); return ipSecConfig; }
public android.net.IpSecTransform buildTransportModeTransform(java.net.InetAddress remoteAddress) throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { mConfig.mode = android.net.IpSecTransform.MODE_TRANSPORT; mConfig.remoteAddress = remoteAddress; return new android.net.IpSecTransform(mContext, mConfig).activate(); }
int getResourceId() { return mResourceId; }
public java.net.InetAddress getLocalAddress() { return localAddress; }

public android.net.IpSecTransform buildTunnelModeTransform(java.net.InetAddress localAddress, java.net.InetAddress remoteAddress) { mConfig.localAddress = localAddress; mConfig.remoteAddress = remoteAddress; mConfig.mode = android.net.IpSecTransform.MODE_TUNNEL; return new android.net.IpSecTransform(mContext, mConfig); }

@java.lang.Override public synchronized android.net.IpSecSpiResponse reserveSecurityParameterIndex(int direction, java.lang.String remoteAddress, int requestedSpi, android.os.IBinder binder) throws android.os.RemoteException { int resourceId = com.android.server.IpSecService.mNextResourceId.getAndIncrement(); int spi = android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX; java.lang.String localAddress = ""; try { if (!(mUserQuotaTracker.getUserRecord(android.os.Binder.getCallingUid()).spi.isAvailable())) { return new android.net.IpSecSpiResponse(IpSecManager.Status.RESOURCE_UNAVAILABLE, android.net.IpSecManager.INVALID_RESOURCE_ID, spi); } spi = mSrvConfig.getNetdInstance().ipSecAllocateSpi(resourceId, direction, localAddress, remoteAddress, requestedSpi); android.util.Log.d(com.android.server.IpSecService.TAG, ("Allocated SPI " + spi)); mSpiRecords.put(resourceId, new com.android.server.IpSecService.SpiRecord(resourceId, binder, direction, localAddress, remoteAddress, spi)); } catch (android.os.ServiceSpecificException e) { return new android.net.IpSecSpiResponse(IpSecManager.Status.SPI_UNAVAILABLE, android.net.IpSecManager.INVALID_RESOURCE_ID, spi); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return new android.net.IpSecSpiResponse(IpSecManager.Status.OK, resourceId, spi); }
@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeString(((localAddress) != null ? localAddress.getHostAddress() : null)); out.writeString(((remoteAddress) != null ? remoteAddress.getHostAddress() : null)); out.writeParcelable(network, flags); out.writeInt(flow[IpSecTransform.DIRECTION_IN].spiResourceId); out.writeParcelable(flow[IpSecTransform.DIRECTION_IN].encryption, flags); out.writeParcelable(flow[IpSecTransform.DIRECTION_IN].authentication, flags); out.writeInt(flow[IpSecTransform.DIRECTION_OUT].spiResourceId); out.writeParcelable(flow[IpSecTransform.DIRECTION_OUT].encryption, flags); out.writeParcelable(flow[IpSecTransform.DIRECTION_OUT].authentication, flags); out.writeInt(encapType); out.writeInt(encapLocalPortResourceId); out.writeInt(encapRemotePort); }






public java.net.InetAddress getRemoteAddress() { return remoteAddress; }

private void onQueryComplete(android.os.AsyncResult ar) { java.lang.StringBuilder sb = new java.lang.StringBuilder(getScString()); sb.append("\n"); if ((ar.exception) != null) { mState = State.FAILED; if ((ar.exception) instanceof com.android.ims.ImsException) { com.android.ims.ImsException error = ((com.android.ims.ImsException) (ar.exception)); if ((error.getMessage()) != null) { sb.append(error.getMessage()); } else { sb.append(getErrorMessage(ar)); } } else { sb.append(getErrorMessage(ar)); } } else { int[] ints = ((int[]) (ar.result)); if ((ints.length) != 0) { if ((ints[0]) == 0) { sb.append(mContext.getText(com.android.internal.R.string.serviceDisabled)); } else if (mSc.equals(com.android.internal.telephony.imsphone.ImsPhoneMmiCode.SC_WAIT)) { sb.append(createQueryCallWaitingResultMessage(ints[1])); } else if ((ints[0]) == 1) { sb.append(mContext.getText(com.android.internal.R.string.serviceEnabled)); } else { sb.append(mContext.getText(com.android.internal.R.string.mmiError)); } } else { sb.append(mContext.getText(com.android.internal.R.string.mmiError)); } mState = State.COMPLETE; } mMessage = sb; mPhone.onMMIDone(this); }
private java.lang.CharSequence getErrorMessage(android.os.AsyncResult ar) { return mContext.getText(com.android.internal.R.string.mmiError); }
private void onIcbQueryComplete(android.os.AsyncResult ar) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhoneMmiCode.LOG_TAG, "onIcbQueryComplete "); java.lang.StringBuilder sb = new java.lang.StringBuilder(getScString()); sb.append("\n"); if ((ar.exception) != null) { mState = State.FAILED; if ((ar.exception) instanceof com.android.ims.ImsException) { com.android.ims.ImsException error = ((com.android.ims.ImsException) (ar.exception)); if ((error.getMessage()) != null) { sb.append(error.getMessage()); } else { sb.append(getErrorMessage(ar)); } } else { sb.append(getErrorMessage(ar)); } } else { com.android.ims.ImsSsInfo[] infos = ((com.android.ims.ImsSsInfo[]) (ar.result)); if ((infos.length) == 0) { sb.append(mContext.getText(com.android.internal.R.string.serviceDisabled)); } else { for (int i = 0, s = infos.length; i < s; i++) { if ((infos[i].mIcbNum) != null) { sb.append((((("Num: " + (infos[i].mIcbNum)) + " status: ") + (infos[i].mStatus)) + "\n")); } else if ((infos[i].mStatus) == 1) { sb.append(mContext.getText(com.android.internal.R.string.serviceEnabled)); } else { sb.append(mContext.getText(com.android.internal.R.string.serviceDisabled)); } } } mState = State.COMPLETE; } mMessage = sb; mPhone.onMMIDone(this); }
private void onQueryCfComplete(android.os.AsyncResult ar) { java.lang.StringBuilder sb = new java.lang.StringBuilder(getScString()); sb.append("\n"); if ((ar.exception) != null) { mState = State.FAILED; if ((ar.exception) instanceof com.android.ims.ImsException) { com.android.ims.ImsException error = ((com.android.ims.ImsException) (ar.exception)); if ((error.getMessage()) != null) { sb.append(error.getMessage()); } else { sb.append(getErrorMessage(ar)); } } else { sb.append(getErrorMessage(ar)); } } else { com.android.internal.telephony.CallForwardInfo[] infos; infos = ((com.android.internal.telephony.CallForwardInfo[]) (ar.result)); if ((infos.length) == 0) { sb.append(mContext.getText(com.android.internal.R.string.serviceDisabled)); if ((mIccRecords) != null) { mPhone.setVoiceCallForwardingFlag(1, false, null); } } else { android.text.SpannableStringBuilder tb = new android.text.SpannableStringBuilder(); for (int serviceClassMask = 1; serviceClassMask <= (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_MAX); serviceClassMask <<= 1) { for (int i = 0, s = infos.length; i < s; i++) { if ((serviceClassMask & (infos[i].serviceClass)) != 0) { tb.append(makeCFQueryResultMessage(infos[i], serviceClassMask)); tb.append("\n"); } } } sb.append(tb); } mState = State.COMPLETE; } mMessage = sb; mPhone.onMMIDone(this); }
void onBluetoothReady() { android.util.Log.d(com.android.bluetooth.btservice.AdapterProperties.TAG, ("ScanMode = " + (mScanMode))); android.util.Log.d(com.android.bluetooth.btservice.AdapterProperties.TAG, ("State = " + (getState()))); synchronized(mObject) { if (((getState()) == (android.bluetooth.BluetoothAdapter.STATE_TURNING_ON)) && ((mScanMode) == (android.bluetooth.BluetoothAdapter.SCAN_MODE_NONE))) { if ((mDiscoverableTimeout) != 0) setScanMode(AbstractionLayer.BT_SCAN_MODE_CONNECTABLE); else setScanMode(AbstractionLayer.BT_SCAN_MODE_CONNECTABLE_DISCOVERABLE); setDiscoverableTimeout(mDiscoverableTimeout); } } }
void onBluetoothDisable() { com.android.bluetooth.btservice.AdapterProperties.debugLog("onBluetoothDisable()"); mBluetoothDisabling = true; if ((getState()) == (android.bluetooth.BluetoothAdapter.STATE_TURNING_OFF)) { mService.cancelDiscovery(); setScanMode(AbstractionLayer.BT_SCAN_MODE_NONE); } }
private synchronized void startSocketListeners() { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "startsocketListener"); if ((mServerSession) != null) { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "mServerSession exists - shutting it down..."); mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if ((mServerSockets) != null) { mServerSockets.prepareForNewConnect(); } else { mServerSockets = com.android.bluetooth.ObexServerSockets.create(this); if ((mServerSockets) == null) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Failed to start the listeners"); return; } com.android.bluetooth.sdp.SdpManager sdpManager = com.android.bluetooth.sdp.SdpManager.getDefaultManager(); if (sdpManager == null) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Failed to start the listeners sdp null "); return; } if (((mAdapter) != null) && ((mSdpHandle) >= 0)) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("Removing SDP record for PBAP with SDP handle:" + (mSdpHandle))); boolean status = sdpManager.removeSdpRecord(mSdpHandle); android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("RemoveSDPrecord returns " + status)); mSdpHandle = -1; } mSdpHandle = com.android.bluetooth.sdp.SdpManager.getDefaultManager().createPbapPseRecord("OBEX Phonebook Access Server", mServerSockets.getRfcommChannel(), mServerSockets.getL2capPsm(), com.android.bluetooth.pbap.BluetoothPbapService.SDP_PBAP_SERVER_VERSION, com.android.bluetooth.pbap.BluetoothPbapService.SDP_PBAP_SUPPORTED_REPOSITORIES, com.android.bluetooth.pbap.BluetoothPbapService.SDP_PBAP_SUPPORTED_FEATURES); com.android.bluetooth.pbap.BluetoothPbapUtils.fetchPbapParams(mContext); if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("PBAP server with handle:" + (mSdpHandle))); } }



public boolean connectToNetwork(@android.annotation.NonNull android.net.wifi.WifiConfiguration config) { logd(("connectToNetwork " + (config.configKey()))); if (com.android.server.wifi.WifiConfigurationUtil.isSameNetwork(config, mCurrentNetworkLocalConfig)) { logd("Network is already saved, will not trigger remove and add operation."); } else { mCurrentNetworkRemoteHandle = null; mCurrentNetworkLocalConfig = null; if (!(removeAllNetworks())) { loge("Failed to remove existing networks"); return false; } android.util.Pair<com.android.server.wifi.SupplicantStaNetworkHal, android.net.wifi.WifiConfiguration> pair = addNetworkAndSaveConfig(config); if (pair == null) { loge(("Failed to add/save network configuration: " + (config.configKey()))); return false; } mCurrentNetworkRemoteHandle = pair.first; mCurrentNetworkLocalConfig = pair.second; } if (!(mCurrentNetworkRemoteHandle.select())) { loge(("Failed to select network configuration: " + (config.configKey()))); return false; } return true; }
public static boolean isSameNetwork(android.net.wifi.WifiConfiguration config, android.net.wifi.WifiConfiguration config1) { if ((config == null) && (config1 == null)) { return true; } if ((config == null) || (config1 == null)) { return false; } if ((config.networkId) != (config1.networkId)) { return false; } if (!(java.util.Objects.equals(config.SSID, config1.SSID))) { return false; } java.lang.String networkSelectionBSSID = config.getNetworkSelectionStatus().getNetworkSelectionBSSID(); java.lang.String networkSelectionBSSID1 = config1.getNetworkSelectionStatus().getNetworkSelectionBSSID(); if (!(java.util.Objects.equals(networkSelectionBSSID, networkSelectionBSSID1))) { return false; } if (com.android.server.wifi.WifiConfigurationUtil.hasCredentialChanged(config, config1)) { return false; } return true; }

protected void onUpdateIccAvailability() { if ((mUiccController) == null) { return; } com.android.internal.telephony.uicc.UiccCardApplication newUiccApplication = getUiccCardApplication(); if ((mUiccApplcation) != newUiccApplication) { if ((mUiccApplcation) != null) { log("Removing stale icc objects."); mUiccApplcation.unregisterForReady(this); if ((mIccRecords) != null) { mIccRecords.unregisterForRecordsLoaded(this); } mIccRecords = null; mUiccApplcation = null; } if (newUiccApplication != null) { log("New card found"); mUiccApplcation = newUiccApplication; mIccRecords = mUiccApplcation.getIccRecords(); if (mPhone.isPhoneTypeGsm()) { mUiccApplcation.registerForReady(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_READY, null); if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_RECORDS_LOADED, null); } } else if (mIsSubscriptionFromRuim) { mUiccApplcation.registerForReady(this, com.android.internal.telephony.ServiceStateTracker.EVENT_RUIM_READY, null); if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.ServiceStateTracker.EVENT_RUIM_RECORDS_LOADED, null); } } } } }
@java.lang.Override public void enter() { boolean filter802_3Frames = mContext.getResources().getBoolean(R.bool.config_apfDrop802_3Frames); int[] ethTypeBlackList = mContext.getResources().getIntArray(R.array.config_apfEthTypeBlackList); mApfFilter = android.net.apf.ApfFilter.maybeCreate(mConfiguration.mApfCapabilities, mNetworkInterface, mCallback, mMulticastFiltering, filter802_3Frames, ethTypeBlackList); if ((mApfFilter) == null) { mCallback.setFallbackMulticastFilter(mMulticastFiltering); } mPacketTracker = createPacketTracker(); if ((mPacketTracker) != null) mPacketTracker.start(); if ((mConfiguration.mEnableIPv6) && (!(startIPv6()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPV6); transitionTo(mStoppingState); return; } if ((mConfiguration.mEnableIPv4) && (!(startIPv4()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPV4); transitionTo(mStoppingState); return; } android.net.ip.IpManager.InitialConfiguration config = mConfiguration.mInitialConfig; if ((config != null) && (!(applyInitialConfig(config)))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_INVALID_PROVISIONING); transitionTo(mStoppingState); return; } if ((mConfiguration.mUsingIpReachabilityMonitor) && (!(startIpReachabilityMonitor()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPREACHABILITYMONITOR); transitionTo(mStoppingState); return; } }
@java.lang.Override public void exit() { stopDhcpAction(); if ((mIpReachabilityMonitor) != null) { mIpReachabilityMonitor.stop(); mIpReachabilityMonitor = null; } if ((mDhcpClient) != null) { mDhcpClient.sendMessage(DhcpClient.CMD_STOP_DHCP); mDhcpClient.doQuit(); } if ((mPacketTracker) != null) { mPacketTracker.stop(); mPacketTracker = null; } if ((mApfFilter) != null) { mApfFilter.shutdown(); mApfFilter = null; } resetLinkProperties(); }

public void testBasicWorking() throws java.lang.Exception { assertTrue(mReceiver.start()); assertTrue(((mLocalSockName) != null)); assertEquals(android.net.util.BlockingSocketReaderTest.LOOPBACK6, mLocalSockName.getAddress()); assertTrue((0 < (mLocalSockName.getPort()))); assertTrue(((mLocalSocket) != null)); assertFalse(mExited); final byte[] one = "one 1".getBytes("UTF-8"); sendPacket(one); waitForActivity(); assertEquals(1, mReceiver.numPacketsReceived()); assertTrue(java.util.Arrays.equals(one, mLastRecvBuf)); assertFalse(mExited); final byte[] two = "two 2".getBytes("UTF-8"); sendPacket(two); waitForActivity(); assertEquals(2, mReceiver.numPacketsReceived()); assertTrue(java.util.Arrays.equals(two, mLastRecvBuf)); assertFalse(mExited); mReceiver.stop(); waitForActivity(); assertEquals(2, mReceiver.numPacketsReceived()); assertTrue(java.util.Arrays.equals(two, mLastRecvBuf)); assertTrue(mExited); }
public void testRecordTouchingBuckets() throws java.lang.Exception { final long BUCKET_SIZE = 15 * (MINUTE_IN_MILLIS); stats = new android.net.NetworkStatsHistory(BUCKET_SIZE); final long recordStart = ((android.net.NetworkStatsHistoryTest.TEST_START) + BUCKET_SIZE) - (MINUTE_IN_MILLIS); final long recordEnd = ((android.net.NetworkStatsHistoryTest.TEST_START) + (BUCKET_SIZE * 2)) + ((MINUTE_IN_MILLIS) * 4); stats.recordData(recordStart, recordEnd, new android.net.NetworkStats.Entry(1000L, 2000L, 5000L, 10000L, 100L)); assertEquals(3, stats.size()); android.net.NetworkStatsHistoryTest.assertValues(stats, 0, android.net.MINUTE_IN_MILLIS, 50L, 100L, 250L, 500L, 5L); android.net.NetworkStatsHistoryTest.assertValues(stats, 1, (15 * (MINUTE_IN_MILLIS)), 750L, 1500L, 3750L, 7500L, 75L); android.net.NetworkStatsHistoryTest.assertValues(stats, 2, (4 * (MINUTE_IN_MILLIS)), 200L, 400L, 1000L, 2000L, 20L); }
private void stageFile(int rawId, java.io.File file) throws java.lang.Exception { new java.io.File(file.getParent()).mkdirs(); java.io.InputStream in = null; java.io.OutputStream out = null; try { in = getContext().getResources().openRawResource(rawId); out = new java.io.FileOutputStream(file); libcore.io.Streams.copy(in, out); } finally { libcore.io.IoUtils.closeQuietly(in); libcore.io.IoUtils.closeQuietly(out); } }
public void testReadLegacyUidTags() throws java.lang.Exception { final java.io.File testFile = new java.io.File(getContext().getFilesDir(), com.android.server.net.NetworkStatsCollectionTest.TEST_FILE); stageFile(R.raw.netstats_uid_v4, testFile); final com.android.server.net.NetworkStatsCollection collection = new com.android.server.net.NetworkStatsCollection((30 * (android.text.format.DateUtils.MINUTE_IN_MILLIS))); collection.readLegacyUid(testFile, true); com.android.server.net.NetworkStatsCollectionTest.assertSummaryTotalIncludingTags(collection, buildTemplateMobileAll(com.android.server.net.NetworkStatsCollectionTest.TEST_IMSI), 77017831L, 100995L, 35436758L, 92344L); final java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream(); collection.write(new java.io.DataOutputStream(bos)); collection.reset(); com.android.server.net.NetworkStatsCollectionTest.assertSummaryTotalIncludingTags(collection, buildTemplateMobileAll(com.android.server.net.NetworkStatsCollectionTest.TEST_IMSI), 0L, 0L, 0L, 0L); collection.read(new java.io.ByteArrayInputStream(bos.toByteArray())); com.android.server.net.NetworkStatsCollectionTest.assertSummaryTotalIncludingTags(collection, buildTemplateMobileAll(com.android.server.net.NetworkStatsCollectionTest.TEST_IMSI), 77017831L, 100995L, 35436758L, 92344L); }
public void testSerialize() throws java.lang.Exception { final android.net.NetworkStatsHistory before = new android.net.NetworkStatsHistory(MINUTE_IN_MILLIS, 40, android.net.NetworkStatsHistory.FIELD_ALL); before.recordData(0, (4 * (MINUTE_IN_MILLIS)), new android.net.NetworkStats.Entry(1024L, 10L, 2048L, 20L, 4L)); before.recordData(android.net.DAY_IN_MILLIS, ((DAY_IN_MILLIS) + (MINUTE_IN_MILLIS)), new android.net.NetworkStats.Entry(10L, 20L, 30L, 40L, 50L)); final java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(); before.writeToStream(new java.io.DataOutputStream(out)); out.close(); final java.io.ByteArrayInputStream in = new java.io.ByteArrayInputStream(out.toByteArray()); final android.net.NetworkStatsHistory after = new android.net.NetworkStatsHistory(new java.io.DataInputStream(in)); android.net.NetworkStatsHistoryTest.assertFullValues(before, (5 * (MINUTE_IN_MILLIS)), 1034L, 30L, 2078L, 60L, 54L); android.net.NetworkStatsHistoryTest.assertFullValues(after, (5 * (MINUTE_IN_MILLIS)), 1034L, 30L, 2078L, 60L, 54L); }
public void testIgnoreFields() throws java.lang.Exception { final android.net.NetworkStatsHistory history = new android.net.NetworkStatsHistory(MINUTE_IN_MILLIS, 0, ((android.net.NetworkStatsHistory.FIELD_RX_BYTES) | (android.net.NetworkStatsHistory.FIELD_TX_BYTES))); history.recordData(0, android.net.MINUTE_IN_MILLIS, new android.net.NetworkStats.Entry(1024L, 10L, 2048L, 20L, 4L)); history.recordData(0, (2 * (MINUTE_IN_MILLIS)), new android.net.NetworkStats.Entry(2L, 2L, 2L, 2L, 2L)); android.net.NetworkStatsHistoryTest.assertFullValues(history, Entry.UNKNOWN, 1026L, Entry.UNKNOWN, 2050L, Entry.UNKNOWN, Entry.UNKNOWN); }
public void testRecordEntireGapIdentical() throws java.lang.Exception { final android.net.NetworkStatsHistory stats1 = new android.net.NetworkStatsHistory(HOUR_IN_MILLIS); stats1.recordData(android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + (2 * (HOUR_IN_MILLIS))), 2000L, 1000L); final long TEST_START_2 = (android.net.NetworkStatsHistoryTest.TEST_START) + (DAY_IN_MILLIS); final android.net.NetworkStatsHistory stats2 = new android.net.NetworkStatsHistory(HOUR_IN_MILLIS); stats2.recordData(TEST_START_2, (TEST_START_2 + (2 * (HOUR_IN_MILLIS))), 1000L, 500L); stats = new android.net.NetworkStatsHistory(HOUR_IN_MILLIS); stats.recordEntireHistory(stats1); stats.recordEntireHistory(stats2); android.net.NetworkStatsHistoryTest.assertValues(stats, ((android.net.NetworkStatsHistoryTest.TEST_START) - (WEEK_IN_MILLIS)), ((android.net.NetworkStatsHistoryTest.TEST_START) + (WEEK_IN_MILLIS)), 3000L, 1500L); android.net.NetworkStatsHistoryTest.assertValues(stats, 0, 1000L, 500L); android.net.NetworkStatsHistoryTest.assertValues(stats, 1, 1000L, 500L); android.net.NetworkStatsHistoryTest.assertValues(stats, 2, 500L, 250L); android.net.NetworkStatsHistoryTest.assertValues(stats, 3, 500L, 250L); }
public void testReadLegacyNetwork() throws java.lang.Exception { final java.io.File testFile = new java.io.File(getContext().getFilesDir(), com.android.server.net.NetworkStatsCollectionTest.TEST_FILE); stageFile(R.raw.netstats_v1, testFile); final com.android.server.net.NetworkStatsCollection collection = new com.android.server.net.NetworkStatsCollection((30 * (android.text.format.DateUtils.MINUTE_IN_MILLIS))); collection.readLegacyNetwork(testFile); com.android.server.net.NetworkStatsCollectionTest.assertSummaryTotal(collection, buildTemplateMobileAll(com.android.server.net.NetworkStatsCollectionTest.TEST_IMSI), 636016770L, 709306L, 88038768L, 518836L, NetworkStatsAccess.Level.DEVICE); final java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream(); collection.write(new java.io.DataOutputStream(bos)); collection.reset(); com.android.server.net.NetworkStatsCollectionTest.assertSummaryTotal(collection, buildTemplateMobileAll(com.android.server.net.NetworkStatsCollectionTest.TEST_IMSI), 0L, 0L, 0L, 0L, NetworkStatsAccess.Level.DEVICE); collection.read(new java.io.ByteArrayInputStream(bos.toByteArray())); com.android.server.net.NetworkStatsCollectionTest.assertSummaryTotal(collection, buildTemplateMobileAll(com.android.server.net.NetworkStatsCollectionTest.TEST_IMSI), 636016770L, 709306L, 88038768L, 518836L, NetworkStatsAccess.Level.DEVICE); }
public void testReadLegacyUid() throws java.lang.Exception { final java.io.File testFile = new java.io.File(getContext().getFilesDir(), com.android.server.net.NetworkStatsCollectionTest.TEST_FILE); stageFile(R.raw.netstats_uid_v4, testFile); final com.android.server.net.NetworkStatsCollection collection = new com.android.server.net.NetworkStatsCollection((30 * (android.text.format.DateUtils.MINUTE_IN_MILLIS))); collection.readLegacyUid(testFile, false); com.android.server.net.NetworkStatsCollectionTest.assertSummaryTotal(collection, buildTemplateMobileAll(com.android.server.net.NetworkStatsCollectionTest.TEST_IMSI), 637076152L, 711413L, 88343717L, 521022L, NetworkStatsAccess.Level.DEVICE); final java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream(); collection.write(new java.io.DataOutputStream(bos)); collection.reset(); com.android.server.net.NetworkStatsCollectionTest.assertSummaryTotal(collection, buildTemplateMobileAll(com.android.server.net.NetworkStatsCollectionTest.TEST_IMSI), 0L, 0L, 0L, 0L, NetworkStatsAccess.Level.DEVICE); collection.read(new java.io.ByteArrayInputStream(bos.toByteArray())); com.android.server.net.NetworkStatsCollectionTest.assertSummaryTotal(collection, buildTemplateMobileAll(com.android.server.net.NetworkStatsCollectionTest.TEST_IMSI), 637076152L, 711413L, 88343717L, 521022L, NetworkStatsAccess.Level.DEVICE); }
public void testRecordSingleBucket() throws java.lang.Exception { final long BUCKET_SIZE = HOUR_IN_MILLIS; stats = new android.net.NetworkStatsHistory(BUCKET_SIZE); stats.recordData(android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + (SECOND_IN_MILLIS)), new android.net.NetworkStats.Entry(1024L, 10L, 2048L, 20L, 2L)); assertEquals(1, stats.size()); android.net.NetworkStatsHistoryTest.assertValues(stats, 0, android.net.SECOND_IN_MILLIS, 1024L, 10L, 2048L, 20L, 2L); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); android.net.NetworkTemplate.forceAllNetworkTypes(); }
public void testRecordEqualBuckets() throws java.lang.Exception { final long bucketDuration = HOUR_IN_MILLIS; stats = new android.net.NetworkStatsHistory(bucketDuration); final long recordStart = (android.net.NetworkStatsHistoryTest.TEST_START) + (bucketDuration / 2); stats.recordData(recordStart, (recordStart + bucketDuration), new android.net.NetworkStats.Entry(1024L, 10L, 128L, 2L, 2L)); assertEquals(2, stats.size()); android.net.NetworkStatsHistoryTest.assertValues(stats, 0, ((HOUR_IN_MILLIS) / 2), 512L, 5L, 64L, 1L, 1L); android.net.NetworkStatsHistoryTest.assertValues(stats, 1, ((HOUR_IN_MILLIS) / 2), 512L, 5L, 64L, 1L, 1L); }
public void testTotalData() throws java.lang.Exception { final long BUCKET_SIZE = HOUR_IN_MILLIS; stats = new android.net.NetworkStatsHistory(BUCKET_SIZE); stats.recordData(android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + (DAY_IN_MILLIS)), 2400L, 4800L); android.net.NetworkStatsHistoryTest.assertValues(stats, ((android.net.NetworkStatsHistoryTest.TEST_START) - (WEEK_IN_MILLIS)), ((android.net.NetworkStatsHistoryTest.TEST_START) - (DAY_IN_MILLIS)), 0L, 0L); android.net.NetworkStatsHistoryTest.assertValues(stats, android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + (HOUR_IN_MILLIS)), 100L, 200L); android.net.NetworkStatsHistoryTest.assertValues(stats, android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + ((long) (1.5 * (HOUR_IN_MILLIS)))), 150L, 300L); android.net.NetworkStatsHistoryTest.assertValues(stats, ((android.net.NetworkStatsHistoryTest.TEST_START) + (23 * (HOUR_IN_MILLIS))), ((android.net.NetworkStatsHistoryTest.TEST_START) + (WEEK_IN_MILLIS)), 100L, 200L); android.net.NetworkStatsHistoryTest.assertValues(stats, ((android.net.NetworkStatsHistoryTest.TEST_START) - (WEEK_IN_MILLIS)), ((android.net.NetworkStatsHistoryTest.TEST_START) + (WEEK_IN_MILLIS)), 2400L, 4800L); }
public void testRemove() throws java.lang.Exception { stats = new android.net.NetworkStatsHistory(HOUR_IN_MILLIS); stats.recordData(android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + (DAY_IN_MILLIS)), 24L, 24L); assertEquals(24, stats.size()); stats.removeBucketsBefore((0 - (DAY_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) - (YEAR_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (SECOND_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (HOUR_IN_MILLIS))); assertEquals(23, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (4 * (HOUR_IN_MILLIS)))); assertEquals(20, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (YEAR_IN_MILLIS))); assertEquals(0, stats.size()); }
public void testReadOriginalVersion() throws java.lang.Exception { final java.io.DataInputStream in = new java.io.DataInputStream(getContext().getResources().openRawResource(R.raw.history_v1)); android.net.NetworkStatsHistory.Entry entry = null; try { final android.net.NetworkStatsHistory history = new android.net.NetworkStatsHistory(in); assertEquals((15 * (SECOND_IN_MILLIS)), history.getBucketDuration()); entry = history.getValues(0, entry); assertEquals(29143L, entry.rxBytes); assertEquals(6223L, entry.txBytes); entry = history.getValues(((history.size()) - 1), entry); assertEquals(1476L, entry.rxBytes); assertEquals(838L, entry.txBytes); entry = history.getValues(java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, entry); assertEquals(332401L, entry.rxBytes); assertEquals(64314L, entry.txBytes); } finally { in.close(); } }
public void testIgnoreFieldsRecordOut() throws java.lang.Exception { final android.net.NetworkStatsHistory full = new android.net.NetworkStatsHistory(MINUTE_IN_MILLIS, 0, android.net.NetworkStatsHistory.FIELD_ALL); final android.net.NetworkStatsHistory partial = new android.net.NetworkStatsHistory(MINUTE_IN_MILLIS, 0, ((android.net.NetworkStatsHistory.FIELD_RX_PACKETS) | (android.net.NetworkStatsHistory.FIELD_OPERATIONS))); partial.recordData(0, android.net.MINUTE_IN_MILLIS, new android.net.NetworkStats.Entry(1024L, 10L, 2048L, 20L, 4L)); full.recordEntireHistory(partial); android.net.NetworkStatsHistoryTest.assertFullValues(full, android.net.MINUTE_IN_MILLIS, 0L, 10L, 0L, 0L, 4L); }
public void testRecordOverlapBuckets() throws java.lang.Exception { final long BUCKET_SIZE = HOUR_IN_MILLIS; stats = new android.net.NetworkStatsHistory(BUCKET_SIZE); stats.recordData(android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + (SECOND_IN_MILLIS)), new android.net.NetworkStats.Entry(256L, 2L, 256L, 2L, 1L)); final long midStart = (android.net.NetworkStatsHistoryTest.TEST_START) + ((HOUR_IN_MILLIS) / 2); stats.recordData(midStart, (midStart + (HOUR_IN_MILLIS)), new android.net.NetworkStats.Entry(1024L, 10L, 1024L, 10L, 10L)); assertEquals(2, stats.size()); android.net.NetworkStatsHistoryTest.assertValues(stats, 0, ((SECOND_IN_MILLIS) + ((HOUR_IN_MILLIS) / 2)), 768L, 7L, 768L, 7L, 6L); android.net.NetworkStatsHistoryTest.assertValues(stats, 1, ((HOUR_IN_MILLIS) / 2), 512L, 5L, 512L, 5L, 5L); }
public void testVarLong() throws java.lang.Exception { assertEquals(0L, android.net.NetworkStatsHistoryTest.performVarLong(0L)); assertEquals((-1L), android.net.NetworkStatsHistoryTest.performVarLong((-1L))); assertEquals(1024L, android.net.NetworkStatsHistoryTest.performVarLong(1024L)); assertEquals((-1024L), android.net.NetworkStatsHistoryTest.performVarLong((-1024L))); assertEquals((40 * (android.net.TrafficStats.MB_IN_BYTES)), android.net.NetworkStatsHistoryTest.performVarLong((40 * (android.net.TrafficStats.MB_IN_BYTES)))); assertEquals((512 * (android.net.TrafficStats.GB_IN_BYTES)), android.net.NetworkStatsHistoryTest.performVarLong((512 * (android.net.TrafficStats.GB_IN_BYTES)))); assertEquals(java.lang.Long.MIN_VALUE, android.net.NetworkStatsHistoryTest.performVarLong(java.lang.Long.MIN_VALUE)); assertEquals(java.lang.Long.MAX_VALUE, android.net.NetworkStatsHistoryTest.performVarLong(java.lang.Long.MAX_VALUE)); assertEquals(((java.lang.Long.MIN_VALUE) + 40), android.net.NetworkStatsHistoryTest.performVarLong(((java.lang.Long.MIN_VALUE) + 40))); assertEquals(((java.lang.Long.MAX_VALUE) - 40), android.net.NetworkStatsHistoryTest.performVarLong(((java.lang.Long.MAX_VALUE) - 40))); }
public void testIgnoreFieldsRecordIn() throws java.lang.Exception { final android.net.NetworkStatsHistory full = new android.net.NetworkStatsHistory(MINUTE_IN_MILLIS, 0, android.net.NetworkStatsHistory.FIELD_ALL); final android.net.NetworkStatsHistory partial = new android.net.NetworkStatsHistory(MINUTE_IN_MILLIS, 0, ((android.net.NetworkStatsHistory.FIELD_RX_PACKETS) | (android.net.NetworkStatsHistory.FIELD_OPERATIONS))); full.recordData(0, android.net.MINUTE_IN_MILLIS, new android.net.NetworkStats.Entry(1024L, 10L, 2048L, 20L, 4L)); partial.recordEntireHistory(full); android.net.NetworkStatsHistoryTest.assertFullValues(partial, Entry.UNKNOWN, Entry.UNKNOWN, 10L, Entry.UNKNOWN, Entry.UNKNOWN, 4L); }
public void testStartEndAtomicBuckets() throws java.lang.Exception { final com.android.server.net.NetworkStatsCollection collection = new com.android.server.net.NetworkStatsCollection(android.text.format.DateUtils.HOUR_IN_MILLIS); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); entry.rxBytes = 32; collection.recordData(null, com.android.server.net.UID_ALL, com.android.server.net.SET_DEFAULT, com.android.server.net.TAG_NONE, (30 * (android.text.format.DateUtils.MINUTE_IN_MILLIS)), (90 * (android.text.format.DateUtils.MINUTE_IN_MILLIS)), entry); assertEquals(0, collection.getStartMillis()); assertEquals((2 * (android.text.format.DateUtils.HOUR_IN_MILLIS)), collection.getEndMillis()); }
@java.lang.Override protected void tearDown() throws java.lang.Exception { super.tearDown(); if ((stats) != null) { android.net.NetworkStatsHistoryTest.assertConsistent(stats); } }
@java.lang.Override public void setUp() { resetLatch(); mLocalSocket = null; mLocalSockName = null; mLastRecvBuf = null; mExited = false; mReceiver = new android.net.util.BlockingSocketReader() { @java.lang.Override protected java.io.FileDescriptor createSocket() { java.io.FileDescriptor s = null; try { s = android.system.Os.socket(android.net.util.AF_INET6, android.net.util.SOCK_DGRAM, android.net.util.IPPROTO_UDP); android.system.Os.bind(s, android.net.util.BlockingSocketReaderTest.LOOPBACK6, 0); mLocalSockName = ((java.net.InetSocketAddress) (android.system.Os.getsockname(s))); android.system.Os.setsockoptTimeval(s, android.net.util.SOL_SOCKET, android.net.util.SO_SNDTIMEO, android.net.util.BlockingSocketReaderTest.TIMEO); } catch (android.system.ErrnoException | java.net.SocketException e) { closeSocket(s); fail(); return null; } mLocalSocket = s; return s; } @java.lang.Override protected void handlePacket(byte[] recvbuf, int length) { mLastRecvBuf = java.util.Arrays.copyOf(recvbuf, length); mLatch.countDown(); } @java.lang.Override protected void onExit() { mExited = true; mLatch.countDown(); } }; }
@java.lang.Override public void tearDown() { if ((mReceiver) != null) mReceiver.stop(); mReceiver = null; }
private boolean updateCurrentController(int addrId, int browseId) { boolean registerRsp = true; updateNewIds(addrId, browseId); com.android.bluetooth.avrcp.MediaController newController = null; com.android.bluetooth.avrcp.MediaPlayerInfo info = getAddressedPlayerInfo(); if (info != null) newController = info.getMediaController(); if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, ((("updateCurrentController: " + (mMediaController)) + " to ") + newController)); synchronized(this) { if (((mMediaController) == null) || (!(mMediaController.equals(newController)))) { if ((mMediaController) != null) { mMediaController.unregisterCallback(mMediaControllerCb); } mMediaController = newController; if ((mMediaController) != null) { mMediaController.registerCallback(mMediaControllerCb, mHandler); mAddressedMediaPlayer.updateNowPlayingList(mMediaController); } else { mAddressedMediaPlayer.updateNowPlayingList(null); registerRsp = false; } } } updateCurrentMediaState(); return registerRsp; }
@java.lang.Override public void onQueueChanged(java.util.List<android.media.session.MediaSession.QueueItem> queue) { if (queue == null) { android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, "onQueueChanged: received null queue"); return; } android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ("onQueueChanged: NowPlaying list changed, Queue Size = " + (queue.size()))); mHandler.sendEmptyMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NOW_PLAYING_CHANGED_RSP); }
public java.lang.String StripTelephoneNumber(java.lang.String vCard) { java.lang.String[] attr = vCard.split(java.lang.System.getProperty("line.separator")); java.lang.String Vcard = ""; for (int i = 0; i < (attr.length); i++) { if (attr[i].startsWith("TEL")) { attr[i] = attr[i].replace("(", ""); attr[i] = attr[i].replace(")", ""); attr[i] = attr[i].replace("-", ""); attr[i] = attr[i].replace(" ", ""); } } for (int i = 0; i < (attr.length); i++) { if (!(attr[i].equals(""))) { Vcard = Vcard.concat(((attr[i]) + "\n")); } } if (com.android.bluetooth.pbap.BluetoothPbapVcardManager.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("Vcard with stripped telephone no.: " + Vcard)); return Vcard; }
public static void testStopRecur() throws java.lang.Exception { final java.lang.Throwable[] out_err = new java.lang.Throwable[]{ null }; final java.util.concurrent.Semaphore sem = new java.util.concurrent.Semaphore(0); java.lang.Thread target = new java.lang.Thread(() -> { sem.release(); while (true) { try { art.Test1934.doRecur(null); } catch (java.lang.StackOverflowError e) { } } }, "recuring thread!"); target.setUncaughtExceptionHandler(( t, e) -> { out_err[0] = e; }); target.start(); sem.acquire(); java.lang.System.out.println("stopping other thread recurring"); art.Threads.stopThread(target, new java.lang.Error("AWESOME!")); target.join(); java.lang.System.out.println(("Other thread Stopped by: " + (out_err[0]))); if ((art.Test1934.PRINT_STACK_TRACE) && ((out_err[0]) != null)) { out_err[0].printStackTrace(); } }
void stop() { if (com.android.bluetooth.mapclient.MnsService.VDBG) android.util.Log.v(com.android.bluetooth.mapclient.MnsService.TAG, "stop()"); mShutdown = true; if ((com.android.bluetooth.mapclient.MnsService.mServerSockets) != null) { com.android.bluetooth.mapclient.MnsService.mServerSockets.shutdown(false); com.android.bluetooth.mapclient.MnsService.mServerSockets = null; } }
static void getLong(java.lang.invoke.MethodHandle m, Main.ValueHolder v, long value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final long got = (v == null) ? ((long) (m.invokeExact())) : ((long) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
static void getFloat(java.lang.invoke.MethodHandle m, Main.ValueHolder v, float value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final float got = (v == null) ? ((float) (m.invokeExact())) : ((float) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
static void getDouble(java.lang.invoke.MethodHandle m, Main.ValueHolder v, double value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final double got = (v == null) ? ((double) (m.invokeExact())) : ((double) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
public static void assertActualAndExpectedMatch(boolean actual, boolean expected) throws java.lang.AssertionError { if (actual != expected) { throw new java.lang.AssertionError((((("Actual != Expected (" + actual) + " != ") + expected) + ")")); } }
static void setByte(java.lang.invoke.MethodHandle m, Main.ValueHolder v, byte value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
private java.lang.invoke.MethodHandle findAccessor(java.lang.reflect.Field field, java.lang.Class<?> refc, java.lang.Class<?> fieldType, int kind, boolean performAccessChecks) throws java.lang.IllegalAccessException { if (!performAccessChecks) { checkAccess(refc, field.getDeclaringClass(), field.getModifiers(), field.getName()); } final boolean isStaticKind = (kind == (SGET)) || (kind == (SPUT)); final int modifiers = field.getModifiers(); if ((java.lang.reflect.Modifier.isStatic(modifiers)) != isStaticKind) { java.lang.String reason = ((("Field " + field) + " is ") + (isStaticKind ? "not " : "")) + "static"; throw new java.lang.IllegalAccessException(reason); } final boolean isSetterKind = (kind == (IPUT)) || (kind == (SPUT)); if ((java.lang.reflect.Modifier.isFinal(modifiers)) && isSetterKind) { throw new java.lang.IllegalAccessException((("Field " + field) + " is final")); } final java.lang.invoke.MethodType methodType; switch (kind) { case SGET : methodType = java.lang.invoke.MethodType.methodType(fieldType); break; case SPUT : methodType = java.lang.invoke.MethodType.methodType(void.class, fieldType); break; case IGET : methodType = java.lang.invoke.MethodType.methodType(fieldType, refc); break; case IPUT : methodType = java.lang.invoke.MethodType.methodType(void.class, refc, fieldType); break; default : throw new java.lang.IllegalArgumentException(("Invalid kind " + kind)); } return new java.lang.invoke.MethodHandleImpl(field.getArtField(), kind, methodType); }
static void getBoolean(java.lang.invoke.MethodHandle m, Main.ValueHolder v, boolean value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final boolean got = (v == null) ? ((boolean) (m.invokeExact())) : ((boolean) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
static void setLong(java.lang.invoke.MethodHandle m, Main.ValueHolder v, long value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
static void setChar(java.lang.invoke.MethodHandle m, Main.ValueHolder v, char value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
static void getShort(java.lang.invoke.MethodHandle m, Main.ValueHolder v, short value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final short got = (v == null) ? ((short) (m.invokeExact())) : ((short) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
static void setString(java.lang.invoke.MethodHandle m, Main.ValueHolder v, java.lang.String value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
static void setDouble(java.lang.invoke.MethodHandle m, Main.ValueHolder v, double value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
static void getInt(java.lang.invoke.MethodHandle m, Main.ValueHolder v, int value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final int got = (v == null) ? ((int) (m.invokeExact())) : ((int) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }

static void getChar(java.lang.invoke.MethodHandle m, Main.ValueHolder v, char value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final char got; if (v == null) { got = ((char) (m.invokeExact())); } else { got = ((char) (m.invokeExact(v))); } Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
static void setInt(java.lang.invoke.MethodHandle m, Main.ValueHolder v, int value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
static void setShort(java.lang.invoke.MethodHandle m, Main.ValueHolder v, short value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
static void setFloat(java.lang.invoke.MethodHandle m, Main.ValueHolder v, float value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
static void getString(java.lang.invoke.MethodHandle m, Main.ValueHolder v, java.lang.String value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final java.lang.String got = (v == null) ? ((java.lang.String) (m.invokeExact())) : ((java.lang.String) (m.invokeExact(v))); Main.Tester.assertTrue(got.equals(value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
static void setBoolean(java.lang.invoke.MethodHandle m, Main.ValueHolder v, boolean value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }
static void getByte(java.lang.invoke.MethodHandle m, Main.ValueHolder v, byte value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final byte got; if (v == null) { got = ((byte) (m.invokeExact())); } else { got = ((byte) (m.invokeExact(v))); } Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }

public final java.util.List<java.lang.Class<?>> coordinateTypes() { java.lang.invoke.MethodType typeGet = accessModeType(java.lang.invoke.VarHandle.AccessMode.GET); return typeGet.parameterList(); }
public final java.lang.Class<?> varType() { java.lang.invoke.MethodType typeSet = accessModeType(java.lang.invoke.VarHandle.AccessMode.SET); return typeSet.parameterType(((typeSet.parameterCount()) - 1)); }
public final boolean isAccessModeSupported(java.lang.invoke.VarHandle.AccessMode accessMode) { unsupported(); return false; }
public final java.lang.invoke.MethodType accessModeType(java.lang.invoke.VarHandle.AccessMode accessMode) { unsupported(); return null; }

public java.lang.invoke.VarHandle findVarHandle(java.lang.Class<?> recv, java.lang.String name, java.lang.Class<?> type) throws java.lang.IllegalAccessException, java.lang.NoSuchFieldException { java.lang.invoke.MethodHandles.unsupported("MethodHandles.Lookup.findVarHandle()"); return null; }

private java.lang.invoke.MethodHandle findAccessor(java.lang.reflect.Field field, java.lang.Class<?> refc, java.lang.Class<?> fieldType, int kind, boolean performAccessChecks) throws java.lang.IllegalAccessException { if (!performAccessChecks) { checkAccess(refc, field.getDeclaringClass(), field.getModifiers(), field.getName()); } final boolean isStaticKind = (kind == (SGET)) || (kind == (SPUT)); final int modifiers = field.getModifiers(); if ((java.lang.reflect.Modifier.isStatic(modifiers)) != isStaticKind) { java.lang.String reason = ((("Field " + field) + " is ") + (isStaticKind ? "not " : "")) + "static"; throw new java.lang.IllegalAccessException(reason); } final boolean isSetterKind = (kind == (IPUT)) || (kind == (SPUT)); if ((java.lang.reflect.Modifier.isFinal(modifiers)) && isSetterKind) { throw new java.lang.IllegalAccessException((("Field " + field) + " is final")); } final java.lang.invoke.MethodType methodType; switch (kind) { case SGET : methodType = java.lang.invoke.MethodType.methodType(fieldType); break; case SPUT : methodType = java.lang.invoke.MethodType.methodType(void.class, fieldType); break; case IGET : methodType = java.lang.invoke.MethodType.methodType(fieldType, refc); break; case IPUT : methodType = java.lang.invoke.MethodType.methodType(void.class, refc, fieldType); break; default : throw new java.lang.IllegalArgumentException(("Invalid kind " + kind)); } return new java.lang.invoke.MethodHandleImpl(field.getArtField(), kind, methodType); }
public java.lang.invoke.VarHandle unreflectVarHandle(java.lang.reflect.Field f) throws java.lang.IllegalAccessException { java.lang.invoke.MethodHandles.unsupported("MethodHandles.Lookup.unreflectVarHandle()"); return null; }
public java.lang.invoke.VarHandle findStaticVarHandle(java.lang.Class<?> decl, java.lang.String name, java.lang.Class<?> type) throws java.lang.IllegalAccessException, java.lang.NoSuchFieldException { java.lang.invoke.MethodHandles.unsupported("MethodHandles.Lookup.findStaticVarHandle()"); return null; }





public java.lang.String StripTelephoneNumber(java.lang.String vCard) { java.lang.String[] attr = vCard.split(java.lang.System.getProperty("line.separator")); java.lang.String stripedVCard = ""; for (int i = 0; i < (attr.length); i++) { if (attr[i].startsWith("TEL")) { attr[i] = attr[i].replace("(", ""); attr[i] = attr[i].replace(")", ""); attr[i] = attr[i].replace("-", ""); attr[i] = attr[i].replace(" ", ""); } } for (int i = 0; i < (attr.length); i++) { if (!(attr[i].isEmpty())) { vCard = vCard.concat(((attr[i]) + "\n")); } } if (com.android.bluetooth.pbap.BluetoothPbapVcardManager.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("vCard with stripped telephone no.: " + stripedVCard)); return stripedVCard; }
private boolean CheckVcardSelector(java.lang.String vcard, java.lang.String vcardselectorop) { boolean selectedIn = true; for (com.android.bluetooth.pbap.BluetoothPbapVcardManager.PropertySelector.PropertyMask bit : com.android.bluetooth.pbap.BluetoothPbapVcardManager.PropertySelector.PropertyMask.values()) { if (checkbit(bit.pos, mSelector)) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("checking for prop :" + (bit.prop))); if (vcardselectorop.equals("0")) { if (checkprop(vcard, bit.prop)) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("bit.prop.equals current prop :" + (bit.prop))); selectedIn = true; break; } else { selectedIn = false; } } else if (vcardselectorop.equals("1")) { if (!(checkprop(vcard, bit.prop))) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("bit.prop.notequals current prop" + (bit.prop))); selectedIn = false; return selectedIn; } else { selectedIn = true; } } } } return selectedIn; }

private static java.util.concurrent.Semaphore getSemaphore(int permits) { if (permits == (-1)) { permits = 3; } return new java.util.concurrent.Semaphore(permits, true); }
public static void testStopRecur() throws java.lang.Exception { final java.lang.Throwable[] out_err = new java.lang.Throwable[]{ null }; final java.util.concurrent.Semaphore sem = new java.util.concurrent.Semaphore(0); java.lang.Thread target = new java.lang.Thread(() -> { sem.release(); while (true) { try { art.Test1934.doRecur(null); } catch (java.lang.StackOverflowError e) { } } }, "recuring thread!"); target.setUncaughtExceptionHandler(( t, e) -> { out_err[0] = e; }); target.start(); sem.acquire(); java.lang.System.out.println("stopping other thread recurring"); do { try { art.Threads.stopThread(target, new java.lang.Error("AWESOME!")); } catch (java.lang.Exception e) { } target.join(1000); } while (target.isAlive() ); java.lang.System.out.println(("Other thread Stopped by: " + (out_err[0]))); if ((art.Test1934.PRINT_STACK_TRACE) && ((out_err[0]) != null)) { out_err[0].printStackTrace(); } }

@java.lang.Override public void run() { android.util.Log.i(com.android.server.cts.device.batterystats.SimpleJobService.TAG, "Running job"); try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } jobFinished(mRunningParams, false); if ((com.android.server.cts.device.batterystats.SimpleJobService.sLatch) != null) { com.android.server.cts.device.batterystats.SimpleJobService.sLatch.countDown(); } android.util.Log.i(com.android.server.cts.device.batterystats.SimpleJobService.TAG, "Finished job."); }
@org.junit.Test public void testJobDuration() throws java.lang.Exception { android.app.job.JobScheduler js = mContext.getSystemService(android.app.job.JobScheduler.class); assertTrue("JobScheduler service not available", (js != null)); final android.app.job.JobInfo job = createJobInfo(1); for (int i = 0; i < 3; i++) { java.util.concurrent.CountDownLatch latch = com.android.server.cts.device.batterystats.SimpleJobService.resetCountDownLatch(); android.util.Log.i(com.android.server.cts.device.batterystats.BatteryStatsJobDurationTests.TAG, "Scheduling job"); js.schedule(job); android.util.Log.i(com.android.server.cts.device.batterystats.BatteryStatsJobDurationTests.TAG, "Waiting for job to finish"); if (!(latch.await(30, java.util.concurrent.TimeUnit.SECONDS))) { android.util.Log.e(com.android.server.cts.device.batterystats.BatteryStatsJobDurationTests.TAG, "Job didn't finish in 30 seconds"); fail("Job didn't finish in 30 seconds"); } } }
void cleanup() { mRegularScanClients.clear(); mBatchClients.clear(); mSuspendedScanClients.clear(); mScanNative.cleanup(); if ((mActivityManager) != null) { mActivityManager.removeOnUidImportanceListener(mUidImportanceListener); } if ((mDm) != null) { mDm.unregisterDisplayListener(mDisplayListener); } if ((mHandler) != null) { mHandler.removeCallbacksAndMessages(null); android.os.Looper looper = mHandler.getLooper(); if (looper != null) { looper.quitSafely(); } mHandler = null; } }
public java.lang.String StripTelephoneNumber(java.lang.String vCard) { java.lang.String[] attr = vCard.split(java.lang.System.getProperty("line.separator")); java.lang.String Vcard = ""; for (int i = 0; i < (attr.length); i++) { if (attr[i].startsWith("TEL")) { attr[i] = attr[i].replace("(", ""); attr[i] = attr[i].replace(")", ""); attr[i] = attr[i].replace("-", ""); attr[i] = attr[i].replace(" ", ""); } } for (int i = 0; i < (attr.length); i++) { if (!(attr[i].isEmpty())) { vCard = vCard.concat(((attr[i]) + "\n")); } } if (com.android.bluetooth.pbap.BluetoothPbapVcardManager.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("Vcard with stripped telephone no.: " + Vcard)); return Vcard; }
@java.lang.Override public void onClick(android.view.View view) { mServer = new com.android.bluetooth.opp.TestTcpServer(); java.lang.Thread server_thread = new java.lang.Thread(mServer); server_thread.start(); }
private boolean isFilteredIn(com.android.bluetooth.pbap.BluetoothPbapVcardManager.VCardFilter.FilterBit bit, boolean vCardType21) { final int offset = ((bit.pos) / 8) + 1; final int bit_pos = (bit.pos) % 8; if ((!vCardType21) && (bit.onlyCheckV21)) return true; if (vCardType21 && (bit.excludeForV21)) return false; if (((mFilter) == null) || (offset >= (mFilter.length))) return true; return (((mFilter[((mFilter.length) - offset)]) >> bit_pos) & 1) != 0; }

@java.lang.Override public android.view.View getView(int position, android.view.View convertView, android.view.ViewGroup parent) { final android.view.View result = (convertView != null) ? convertView : dialogInflater.inflate(R.layout.select_dialog_item, parent, false); final android.widget.TextView primaryText = ((android.widget.TextView) (result.findViewById(R.id.primary_text))); final android.widget.TextView secondaryText = ((android.widget.TextView) (result.findViewById(R.id.secondary_text))); final com.android.contacts.interactions.ImportDialogFragment.AdapterEntry entry = getItem(position); secondaryText.setVisibility(View.GONE); if ((entry.mChoiceResourceId) == (R.string.import_from_sim)) { final java.lang.CharSequence secondary = getSimSecondaryText(entry.mSim); if (android.text.TextUtils.isEmpty(secondary)) { secondaryText.setVisibility(View.GONE); } else { secondaryText.setText(secondary); secondaryText.setVisibility(View.VISIBLE); } } primaryText.setText(entry.mLabel); return result; }

public void supplyIccPinForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int remainingAttempts) { responseInts(responseInfo, remainingAttempts); }
public void changeIccPin2ForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int remainingAttempts) { responseInts(responseInfo, remainingAttempts); }
public void supplyIccPukForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int remainingAttempts) { responseInts(responseInfo, remainingAttempts); }
public void setFacilityLockForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int retry) { responseInts(responseInfo, retry); }
public void supplyIccPuk2ForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int remainingAttempts) { responseInts(responseInfo, remainingAttempts); }
private int parsePinPukErrorResult(android.os.AsyncResult ar) { int[] result = ((int[]) (ar.result)); if (result == null) { return -1; } else { int length = result.length; int attemptsRemaining = -1; if (length > 0) { attemptsRemaining = result[0]; } log(("parsePinPukErrorResult: attemptsRemaining=" + attemptsRemaining)); return attemptsRemaining; } }
public void supplyIccPin2ForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int remainingAttempts) { responseInts(responseInfo, remainingAttempts); }
public void changeIccPinForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int remainingAttempts) { responseInts(responseInfo, remainingAttempts); }
void stop() { if (com.android.bluetooth.mapclient.MnsService.VDBG) android.util.Log.v(com.android.bluetooth.mapclient.MnsService.TAG, "stop()"); mShutdown = true; if ((com.android.bluetooth.mapclient.MnsService.mServerSockets) != null) { com.android.bluetooth.mapclient.MnsService.mServerSockets.shutdown(false); com.android.bluetooth.mapclient.MnsService.mServerSockets = null; } }
protected static void setContactFields(java.lang.String fieldType, java.lang.String contactId, java.lang.String data) { com.android.bluetooth.pbap.BluetoothPbapUtils.ContactData cData = null; if (com.android.bluetooth.pbap.BluetoothPbapUtils.contactDataset.containsKey(contactId)) cData = com.android.bluetooth.pbap.BluetoothPbapUtils.contactDataset.get(contactId); else cData = new com.android.bluetooth.pbap.BluetoothPbapUtils.ContactData(); switch (fieldType) { case com.android.bluetooth.pbap.BluetoothPbapUtils.TYPE_NAME : cData.mName = data; break; case com.android.bluetooth.pbap.BluetoothPbapUtils.TYPE_PHONE : cData.mPhone.add(data); break; case com.android.bluetooth.pbap.BluetoothPbapUtils.TYPE_EMAIL : cData.mEmail.add(data); break; case com.android.bluetooth.pbap.BluetoothPbapUtils.TYPE_ADDRESS : cData.mAddress.add(data); break; } com.android.bluetooth.pbap.BluetoothPbapUtils.contactDataset.put(contactId, cData); }
private boolean isFilteredIn(com.android.bluetooth.pbap.BluetoothPbapVcardManager.VCardFilter.FilterBit bit, boolean vCardType21) { final int offset = ((bit.pos) / 8) + 1; final int bit_pos = (bit.pos) % 8; if ((!vCardType21) && (bit.onlyCheckV21)) return true; if (vCardType21 && (bit.excludeForV21)) return false; if (((filter) == null) || (offset >= (filter.length))) return true; return (((filter[((filter.length) - offset)]) >> bit_pos) & 1) != 0; }
@java.lang.Override public void onClick(android.view.View view) { server = new com.android.bluetooth.opp.TestTcpServer(); java.lang.Thread server_thread = new java.lang.Thread(server); server_thread.start(); }
synchronized void recordScanStop(int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan scan = getScanFromScannerId(scannerId); if (scan == null) { return; } (this.scansStopped)++; stopTime = android.os.SystemClock.elapsedRealtime(); long scanDuration = (stopTime) - (scan.timestamp); scan.duration = scanDuration; if (scan.isSuspended) { long suspendDuration = (stopTime) - (scan.suspendStartTime); scan.suspendDuration += suspendDuration; mTotalSuspendTime += suspendDuration; } ongoingScans.remove(scannerId); if ((lastScans.size()) >= (com.android.bluetooth.gatt.AppScanStats.NUM_SCAN_DURATIONS_KEPT)) { lastScans.remove(0); } lastScans.add(scan); com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_STOP); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); gattService.addScanEvent(scanEvent); if (!(isScanning())) { try { long totalDuration = (stopTime) - (mScanStartTime); mTotalScanTime += totalDuration; minScanTime = java.lang.Math.min(totalDuration, minScanTime); maxScanTime = java.lang.Math.max(totalDuration, maxScanTime); batteryStats.noteBleScanResults(workSource, ((scan.results) % 100)); batteryStats.noteBleScanStopped(workSource); } catch (android.os.RemoteException e) { } } }
protected static void setContactFields(java.lang.String fieldType, java.lang.String contactId, java.lang.String data) { com.android.bluetooth.pbap.BluetoothPbapUtils.ContactData cData = null; if (com.android.bluetooth.pbap.BluetoothPbapUtils.contactDataset.containsKey(contactId)) cData = com.android.bluetooth.pbap.BluetoothPbapUtils.contactDataset.get(contactId); else cData = new com.android.bluetooth.pbap.BluetoothPbapUtils.ContactData(); switch (fieldType) { case com.android.bluetooth.pbap.BluetoothPbapUtils.TYPE_NAME : cData.name = data; break; case com.android.bluetooth.pbap.BluetoothPbapUtils.TYPE_PHONE : cData.phone.add(data); break; case com.android.bluetooth.pbap.BluetoothPbapUtils.TYPE_EMAIL : cData.email.add(data); break; case com.android.bluetooth.pbap.BluetoothPbapUtils.TYPE_ADDRESS : cData.address.add(data); break; } com.android.bluetooth.pbap.BluetoothPbapUtils.contactDataset.put(contactId, cData); }
@java.lang.Override protected com.android.bluetooth.btservice.ProfileService.IProfileServiceBinder initBinder() { return null; }
synchronized void recordScanStart(android.bluetooth.le.ScanSettings settings, boolean filtered, int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan existingScan = getScanFromScannerId(scannerId); if (existingScan != null) { return; } (this.scansStarted)++; startTime = android.os.SystemClock.elapsedRealtime(); com.android.bluetooth.gatt.AppScanStats.LastScan scan = new com.android.bluetooth.gatt.AppScanStats.LastScan(startTime, 0, false, false, filtered, scannerId); if (settings != null) { scan.opportunistic = (settings.getScanMode()) == (android.bluetooth.le.ScanSettings.SCAN_MODE_OPPORTUNISTIC); scan.background = ((settings.getCallbackType()) & (android.bluetooth.le.ScanSettings.CALLBACK_TYPE_FIRST_MATCH)) != 0; } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_START); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); gattService.addScanEvent(scanEvent); if (!(isScanning())) { try { boolean isUnoptimized = !(((scan.filtered) || (scan.background)) || (scan.opportunistic)); mScanStartTime = startTime; batteryStats.noteBleScanStarted(workSource, isUnoptimized); } catch (android.os.RemoteException e) { } } ongoingScans.put(scannerId, scan); }
@java.lang.Override public void feedIntoMessageDigests(java.security.MessageDigest[] mds, long offset, int size) throws java.io.IOException { long filePosition = (mFilePosition) + offset; long mmapFilePosition = (filePosition / (android.util.apk.ApkSignatureSchemeV2Verifier.MemoryMappedFileDataSource.MEMORY_PAGE_SIZE_BYTES)) * (android.util.apk.ApkSignatureSchemeV2Verifier.MemoryMappedFileDataSource.MEMORY_PAGE_SIZE_BYTES); int dataStartOffsetInMmapRegion = ((int) (filePosition - mmapFilePosition)); long mmapRegionSize = size + dataStartOffsetInMmapRegion; long mmapPtr = 0; try { mmapPtr = android.util.apk.ApkSignatureSchemeV2Verifier.MemoryMappedFileDataSource.OS.mmap(0, mmapRegionSize, OsConstants.PROT_READ, ((android.system.OsConstants.MAP_SHARED) | (android.system.OsConstants.MAP_POPULATE)), mFd, mmapFilePosition); java.nio.ByteBuffer buf = new java.nio.DirectByteBuffer(size, (mmapPtr + dataStartOffsetInMmapRegion), mFd, null, true); for (java.security.MessageDigest md : mds) { buf.position(0); md.update(buf); } } catch (android.system.ErrnoException e) { throw new java.io.IOException((("Failed to mmap " + mmapRegionSize) + " bytes"), e); } finally { if (mmapPtr != 0) { try { android.util.apk.ApkSignatureSchemeV2Verifier.MemoryMappedFileDataSource.OS.munmap(mmapPtr, mmapRegionSize); } catch (android.system.ErrnoException ignored) { } } } }
private void showPinDialog() { if ((mDialogState) == (com.android.settings.IccLockSettings.OFF_MODE)) { return; } setDialogValues(); mPinDialog.showPinDialog(); }
@java.lang.Override public boolean onPrepareOptionsMenu(android.view.Menu menu) { super.onPrepareOptionsMenu(menu); boolean helpVisible = false; boolean mainVisible = false; if ((mState) == (com.android.stk.StkMenuActivity.STATE_SECONDARY)) { mainVisible = true; } if ((mStkMenu) != null) { helpVisible = mStkMenu.helpAvailable; } menu.findItem(StkApp.MENU_ID_END_SESSION).setVisible(mainVisible); menu.findItem(StkApp.MENU_ID_HELP).setVisible(helpVisible); return true; }
@java.lang.Override public boolean connect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ("connect(): device=" + device)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { return false; } return service.connect(device); }
@java.lang.Override public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "getConnectedDevices()"); return getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTED }); }
@java.lang.Override public boolean registerApp(android.bluetooth.BluetoothHidDeviceAppConfiguration config, android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "registerApp()"); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { return false; } return service.registerApp(config, sdp, inQos, outQos, callback); }
@java.lang.Override public boolean replyReport(android.bluetooth.BluetoothDevice device, byte type, byte id, byte[] data) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ((((("replyReport(): device=" + device) + " type=") + type) + " id=") + id)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { return false; } return service.replyReport(device, type, id, data); }
synchronized boolean replyReport(android.bluetooth.BluetoothDevice device, byte type, byte id, byte[] data) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.TAG, ((((("replyReport(): device=" + device) + " type=") + type) + " id=") + id)); if (!(checkDevice(device))) { return false; } return replyReportNative(type, id, data); }
synchronized boolean reportError(android.bluetooth.BluetoothDevice device, byte error) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.TAG, ((("reportError(): device=" + device) + " error=") + error)); if (!(checkDevice(device))) { return false; } return reportErrorNative(error); }
private com.android.bluetooth.hid.HidDevService getService() { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "HidDevice call not allowed for non-active user"); return null; } if (((mService) != null) && (mService.isAvailable())) { return mService; } return null; }
synchronized boolean disconnect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.TAG, ("disconnect(): device=" + device)); if (!(checkDevice(device))) { return false; } return disconnectNative(); }
@java.lang.Override public int getConnectionState(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ("getConnectionState(): device=" + device)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { return android.bluetooth.BluetoothInputHost.STATE_DISCONNECTED; } return service.getConnectionState(device); }
@java.lang.Override public boolean reportError(android.bluetooth.BluetoothDevice device, byte error) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ((("reportError(): device=" + device) + " error=") + error)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { return false; } return service.reportError(device, error); }
@java.lang.Override public java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ("getDevicesMatchingConnectionStates(): states=" + (java.util.Arrays.toString(states)))); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(0); } return service.getDevicesMatchingConnectionStates(states); }
@java.lang.Override public boolean disconnect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ("disconnect(): device=" + device)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { return false; } return service.disconnect(device); }
synchronized boolean connect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.TAG, ("connect(): device=" + device)); return connectNative(com.android.bluetooth.Utils.getByteAddress(device)); }
@java.lang.Override public boolean sendReport(android.bluetooth.BluetoothDevice device, int id, byte[] data) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ((("sendReport(): device=" + device) + " id=") + id)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { return false; } return service.sendReport(device, id, data); }
@java.lang.Override public boolean unplug(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ("unplug(): device=" + device)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { return false; } return service.unplug(device); }
synchronized boolean unregisterApp(android.bluetooth.BluetoothHidDeviceAppConfiguration config) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.TAG, "unregisterApp()"); if ((((mAppConfig) == null) || (config == null)) || (!(config.equals(mAppConfig)))) { return false; } return unregisterAppNative(); }
synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppConfiguration config, android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.TAG, "registerApp()"); if ((mAppConfig) != null) { return false; } mAppConfig = config; mCallback = callback; return registerAppNative(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null ? null : inQos.toArray()), (outQos == null ? null : outQos.toArray())); }
synchronized boolean sendReport(android.bluetooth.BluetoothDevice device, int id, byte[] data) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.TAG, ((("sendReport(): device=" + device) + " id=") + id)); if (!(checkDevice(device))) { return false; } return sendReportNative(id, data); }
@java.lang.Override public boolean unregisterApp(android.bluetooth.BluetoothHidDeviceAppConfiguration config) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "unregisterApp()"); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { return false; } return service.unregisterApp(config); }
synchronized boolean unplug(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.TAG, ("unplug(): device=" + device)); if (!(checkDevice(device))) { return false; } return unplugNative(); }



private static byte[] generateApkSigningBlock(byte[] apkSignatureSchemeV2Block) { int resultSize = ((((8 + 8) + 4) + (apkSignatureSchemeV2Block.length)) + 8) + 16; java.nio.ByteBuffer result = java.nio.ByteBuffer.allocate(resultSize); result.order(java.nio.ByteOrder.LITTLE_ENDIAN); long blockSizeFieldValue = resultSize - 8; result.putLong(blockSizeFieldValue); long pairSizeFieldValue = 4 + (apkSignatureSchemeV2Block.length); result.putLong(pairSizeFieldValue); result.putInt(com.android.apksig.internal.apk.v2.V2SchemeSigner.APK_SIGNATURE_SCHEME_V2_BLOCK_ID); result.put(apkSignatureSchemeV2Block); result.putLong(blockSizeFieldValue); result.put(com.android.apksig.internal.apk.v2.V2SchemeSigner.APK_SIGNING_BLOCK_MAGIC); return result.array(); }
private static int getInputJarEntryDataAlignmentMultiple(com.android.apksig.internal.zip.LocalFileRecord entry) { if (entry.isDataCompressed()) { return 1; } java.nio.ByteBuffer extra = entry.getExtra(); if (extra.hasRemaining()) { extra.order(java.nio.ByteOrder.LITTLE_ENDIAN); while ((extra.remaining()) >= 4) { short headerId = extra.getShort(); int dataSize = com.android.apksig.internal.zip.ZipUtils.getUnsignedInt16(extra); if (dataSize > (extra.remaining())) { break; } if (headerId != (com.android.apksig.ApkSigner.ALIGNMENT_ZIP_EXTRA_DATA_FIELD_HEADER_ID)) { extra.position(((extra.position()) + dataSize)); continue; } if (dataSize < 2) { break; } return com.android.apksig.internal.zip.ZipUtils.getUnsignedInt16(extra); } } return entry.getName().endsWith(".so") ? 4096 : 4; }
private static void verify(com.android.apksig.util.DataSource beforeApkSigningBlock, java.nio.ByteBuffer apkSignatureSchemeV2Block, com.android.apksig.util.DataSource centralDir, java.nio.ByteBuffer eocd, com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result result) throws java.io.IOException, java.security.NoSuchAlgorithmException { java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> contentDigestsToVerify = new java.util.HashSet<>(1); com.android.apksig.internal.apk.v2.V2SchemeVerifier.parseSigners(apkSignatureSchemeV2Block, contentDigestsToVerify, result); if (result.containsErrors()) { return; } com.android.apksig.internal.apk.v2.V2SchemeVerifier.verifyIntegrity(beforeApkSigningBlock, centralDir, eocd, contentDigestsToVerify, result); if (!(result.containsErrors())) { result.verified = true; } }
public static com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections) throws com.android.apksig.apk.ApkFormatException, com.android.apksig.internal.apk.v2.V2SchemeVerifier.SignatureNotFoundException, java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result result = new com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result(); com.android.apksig.internal.apk.v2.V2SchemeVerifier.SignatureInfo signatureInfo = com.android.apksig.internal.apk.v2.V2SchemeVerifier.findSignature(apk, zipSections, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.internal.apk.v2.V2SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, result); return result; }
private static void parseSigners(java.nio.ByteBuffer apkSignatureSchemeV2Block, java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> contentDigestsToVerify, com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result result) throws java.security.NoSuchAlgorithmException { java.nio.ByteBuffer signers; try { signers = com.android.apksig.internal.apk.v2.V2SchemeVerifier.getLengthPrefixedSlice(apkSignatureSchemeV2Block); } catch (com.android.apksig.apk.ApkFormatException e) { result.addError(Issue.V2_SIG_MALFORMED_SIGNERS); return; } if (!(signers.hasRemaining())) { result.addError(Issue.V2_SIG_NO_SIGNERS); return; } java.security.cert.CertificateFactory certFactory; try { certFactory = java.security.cert.CertificateFactory.getInstance("X.509"); } catch (java.security.cert.CertificateException e) { throw new java.lang.RuntimeException("Failed to obtain X.509 CertificateFactory", e); } int signerCount = 0; while (signers.hasRemaining()) { int signerIndex = signerCount; signerCount++; com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result.SignerInfo signerInfo = new com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result.SignerInfo(); signerInfo.index = signerIndex; result.signers.add(signerInfo); try { java.nio.ByteBuffer signer = com.android.apksig.internal.apk.v2.V2SchemeVerifier.getLengthPrefixedSlice(signers); com.android.apksig.internal.apk.v2.V2SchemeVerifier.parseSigner(signer, certFactory, signerInfo, contentDigestsToVerify); } catch (com.android.apksig.apk.ApkFormatException | java.nio.BufferUnderflowException e) { signerInfo.addError(Issue.V2_SIG_MALFORMED_SIGNER); return; } } }
void handleCallForwardResult(com.android.internal.telephony.CallForwardInfo cf) { callForwardInfo = cf; if (com.android.phone.CallForwardEditPreference.DBG) android.util.Log.d(com.android.phone.CallForwardEditPreference.LOG_TAG, ("handleGetCFResponse done, callForwardInfo=" + (callForwardInfo))); setToggled(((callForwardInfo.status) == 1)); setPhoneNumber(callForwardInfo.number); }
public synchronized void listAsProtos(java.io.PrintWriter pw) { com.android.server.connectivity.NetdEventListenerService.listEvents(pw, mConnectEvents, IpConnectivityEventBuilder::toProto, ""); com.android.server.connectivity.NetdEventListenerService.listEvents(pw, mDnsEvents, IpConnectivityEventBuilder::toProto, ""); for (int i = 0; i < (mWakeupStats.size()); i++) { pw.print(com.android.server.connectivity.IpConnectivityEventBuilder.toProto(mWakeupStats.valueAt(i))); } }
private static <T> void flushProtos(java.util.List<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent> out, android.util.SparseArray<T> in, java.util.function.Function<T, com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent> mapper) { for (int i = 0; i < (in.size()); i++) { out.add(mapper.apply(in.valueAt(i))); } in.clear(); }
public synchronized void list(java.io.PrintWriter pw) { com.android.server.connectivity.NetdEventListenerService.listEvents(pw, mConnectEvents, ( x) -> x, "\n"); com.android.server.connectivity.NetdEventListenerService.listEvents(pw, mDnsEvents, ( x) -> x, "\n"); for (int i = 0; i < (mWakeupStats.size()); i++) { pw.println(mWakeupStats.valueAt(i)); } for (android.net.metrics.WakeupEvent wakeup : mWakeupEvents.toArray()) { pw.println(wakeup); } }








private static <T> void listEvents(java.io.PrintWriter pw, android.util.SparseArray<T> events, java.util.function.Function<T, java.lang.Object> mapper, java.lang.String separator) { for (int i = 0; i < (events.size()); i++) { pw.print(mapper.apply(events.valueAt(i))); pw.print(separator); } }
private android.net.metrics.DnsEvent makeDnsEvent(int netId) { long transports = getTransports(netId); return new android.net.metrics.DnsEvent(netId, transports, com.android.server.connectivity.NetdEventListenerService.INITIAL_DNS_BATCH_SIZE); }










boolean verifyCallLog(java.lang.String number, java.lang.String date, java.lang.String type) { java.lang.String[] query = new java.lang.String[]{ android.provider.CallLog.Calls.NUMBER, android.provider.CallLog.Calls.DATE, android.provider.CallLog.Calls.TYPE }; android.database.Cursor cursor = mContext.getContentResolver().query(Calls.CONTENT_URI, query, (((android.provider.CallLog.Calls.TYPE) + "= ") + type), null, (((android.provider.CallLog.Calls.DATE) + ", ") + (android.provider.CallLog.Calls.NUMBER))); if (date != null) { date = adjDate(date); } if (cursor != null) { while (cursor.moveToNext()) { java.lang.String foundNumber = cursor.getString(cursor.getColumnIndex(Calls.NUMBER)); java.lang.String foundDate = cursor.getString(cursor.getColumnIndex(Calls.DATE)); if (((number == null) || (number.equals(foundNumber))) && ((date == null) || (date.equals(foundDate)))) { return true; } } cursor.close(); } return false; }


@java.lang.Override public void setUp(com.android.tradefed.device.ITestDevice device, com.android.tradefed.build.IBuildInfo buildInfo) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.TargetSetupError { for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : com.android.tradefed.targetprep.VtsDeviceInfoCollector.BUILD_KEYS.entrySet()) { buildInfo.addBuildAttribute(entry.getKey(), com.android.tradefed.util.ArrayUtil.join(",", device.getProperty(entry.getValue()))); } }
public static synchronized com.android.bluetooth.hfpclient.HeadsetClientService getHeadsetClientService() { if (((com.android.bluetooth.hfpclient.HeadsetClientService.sHeadsetClientService) != null) && (com.android.bluetooth.hfpclient.HeadsetClientService.sHeadsetClientService.isAvailable())) { if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ("getHeadsetClientService(): returning " + (com.android.bluetooth.hfpclient.HeadsetClientService.sHeadsetClientService))); } return com.android.bluetooth.hfpclient.HeadsetClientService.sHeadsetClientService; } if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { if ((com.android.bluetooth.hfpclient.HeadsetClientService.sHeadsetClientService) == null) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "getHeadsetClientService(): service is NULL"); } else if (!(com.android.bluetooth.hfpclient.HeadsetClientService.sHeadsetClientService.isAvailable())) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "getHeadsetClientService(): service is not available"); } } return null; }
public void reset() { mReport = ""; mReportValid = false; }

public void calculateAndReportScore(android.net.wifi.WifiInfo wifiInfo, android.net.NetworkAgent networkAgent, int aggressiveHandover, com.android.server.wifi.WifiMetrics wifiMetrics) { int score; updateScoringState(wifiInfo, aggressiveHandover); score = calculateScore(wifiInfo, aggressiveHandover); if (score > (android.net.NetworkAgent.WIFI_BASE_SCORE)) { score = android.net.NetworkAgent.WIFI_BASE_SCORE; } if (score < 0) { score = 0; } if (score != (wifiInfo.score)) { if (mVerboseLoggingEnabled) { android.util.Log.d(com.android.server.wifi.WifiScoreReport.TAG, (" report new wifi score " + score)); } wifiInfo.score = score; if (networkAgent != null) { networkAgent.sendNetworkScore(score); } } mReport = java.lang.String.format(" score=%d", score); mReportValid = true; wifiMetrics.incrementWifiScoreCount(score); }
public boolean getIsVoipAudioMode() { return mIsVoipAudioMode; }




public byte[] generateVerityTreeRootHash(com.android.apksig.util.DataSource fileSource) throws java.io.IOException { int digestSize = mMd.getDigestLength(); int[] levelOffset = com.android.apksig.internal.util.VerityTreeBuilder.calculateLevelOffset(fileSource.size(), digestSize); java.nio.ByteBuffer verityBuffer = java.nio.ByteBuffer.allocate(levelOffset[((levelOffset.length) - 1)]); for (int i = (levelOffset.length) - 2; i >= 0; i--) { com.android.apksig.util.DataSource src; if (i == ((levelOffset.length) - 2)) { src = fileSource; } else { src = com.android.apksig.util.DataSources.asDataSource(com.android.apksig.internal.util.VerityTreeBuilder.slice(verityBuffer.asReadOnlyBuffer(), levelOffset[(i + 1)], levelOffset[(i + 2)])); } com.android.apksig.util.DataSink middleBufferSink = new com.android.apksig.internal.util.ByteBufferSink(com.android.apksig.internal.util.VerityTreeBuilder.slice(verityBuffer, levelOffset[i], levelOffset[(i + 1)])); digestDataByChunks(src, middleBufferSink); long totalOutput = (com.android.apksig.internal.util.VerityTreeBuilder.divideRoundup(src.size(), com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE)) * digestSize; int incomplete = ((int) (totalOutput % (com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE))); if (incomplete > 0) { byte[] padding = new byte[(com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE) - incomplete]; middleBufferSink.consume(padding, 0, padding.length); } } java.nio.ByteBuffer firstPage = com.android.apksig.internal.util.VerityTreeBuilder.slice(verityBuffer.asReadOnlyBuffer(), 0, com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE); return saltedDigest(firstPage); }



private void volumeChangeRequestFromNative(byte[] address, int volume, int ctype) { android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_VOLUME_CHANGE, volume, ctype); android.os.Bundle data = new android.os.Bundle(); data.putByteArray("BdAddress", address); msg.setData(data); mHandler.sendMessage(msg); }
private void getPlayStatusRequestFromNative(byte[] address) { android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_GET_PLAY_STATUS); msg.obj = address; mHandler.sendMessage(msg); }
private void playItemRequestFromNative(byte[] address, byte scope, int uidCounter, byte[] uid) { android.os.Bundle data = new android.os.Bundle(); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_PLAY_ITEM); data.putByteArray("BdAddress", address); data.putByteArray("uid", uid); data.putInt("uidCounter", uidCounter); data.putByte("scope", scope); msg.setData(data); mHandler.sendMessage(msg); }
private void setAddressedPlayerRequestFromNative(byte[] address, int playerId) { android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_SET_ADDR_PLAYER, playerId, 0); msg.obj = address; mHandler.sendMessage(msg); }
private void handlePassthroughCmdRequestFromNative(byte[] address, int id, int keyState) { android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_PASS_THROUGH, id, keyState); mHandler.sendMessage(msg); }
@java.lang.Override public void onQueueChanged(java.util.List<android.media.session.MediaSession.QueueItem> queue) { if (queue == null) { android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, "onQueueChanged: received null queue"); return; } android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ("onQueueChanged: NowPlaying list changed, Queue Size = " + (queue.size()))); mHandler.sendEmptyMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NOW_PLAYING_CHANGED_RSP); }
public void adjustVolume(int direction) { android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_ADJUST_VOLUME, direction, 0); mHandler.sendMessage(msg); }
public void setA2dpAudioState(int state) { android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_SET_A2DP_AUDIO_STATE, state, 0); mHandler.sendMessage(msg); }
private void registerNotificationRequestFromNative(byte[] address, int eventId, int param) { android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_REGISTER_NOTIFICATION, eventId, param); msg.obj = address; mHandler.sendMessage(msg); }
private void getTotalNumOfItemsRequestFromNative(byte[] address, byte scope) { android.os.Bundle data = new android.os.Bundle(); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_GET_TOTAL_NUM_OF_ITEMS); msg.arg1 = scope; msg.obj = address; mHandler.sendMessage(msg); }
private void getElementAttrRequestFromNative(byte[] address, byte numAttr, int[] attrs) { com.android.bluetooth.avrcp.AvrcpCmd avrcpCmdobj = new com.android.bluetooth.avrcp.AvrcpCmd(); com.android.bluetooth.avrcp.AvrcpCmd.ElementAttrCmd elemAttr = avrcpCmdobj.new com.android.bluetooth.avrcp.ElementAttrCmd(address, numAttr, attrs); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_GET_ELEM_ATTRS); msg.obj = elemAttr; mHandler.sendMessage(msg); }
private void setBrowsedPlayerRequestFromNative(byte[] address, int playerId) { android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_SET_BR_PLAYER, playerId, 0); msg.obj = address; mHandler.sendMessage(msg); }
private void changePathRequestFromNative(byte[] address, byte direction, byte[] folderUid) { android.os.Bundle data = new android.os.Bundle(); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_CHANGE_PATH); data.putByteArray("BdAddress", address); data.putByteArray("folderUid", folderUid); data.putByte("direction", direction); msg.setData(data); mHandler.sendMessage(msg); }
private void getRcFeaturesRequestFromNative(byte[] address, int features) { android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_GET_RC_FEATURES, features, 0, com.android.bluetooth.Utils.getAddressStringFromByte(address)); mHandler.sendMessage(msg); }
private void getItemAttrRequestFromNative(byte[] address, byte scope, byte[] itemUid, int uidCounter, byte numAttr, int[] attrs) { com.android.bluetooth.avrcp.AvrcpCmd avrcpCmdobj = new com.android.bluetooth.avrcp.AvrcpCmd(); com.android.bluetooth.avrcp.AvrcpCmd.ItemAttrCmd itemAttr = avrcpCmdobj.new com.android.bluetooth.avrcp.ItemAttrCmd(address, scope, itemUid, uidCounter, numAttr, attrs); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_GET_ITEM_ATTR); msg.obj = itemAttr; mHandler.sendMessage(msg); }
public void setAbsoluteVolume(int volume) { if (volume == (mLocalVolume)) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ("setAbsoluteVolume is setting same index, ignore " + volume)); return; } mHandler.removeMessages(com.android.bluetooth.avrcp.Avrcp.MSG_ADJUST_VOLUME); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_SET_ABSOLUTE_VOLUME, volume, 0); mHandler.sendMessage(msg); }
private void getFolderItemsRequestFromNative(byte[] address, byte scope, long startItem, long endItem, byte numAttr, int[] attrIds) { com.android.bluetooth.avrcp.AvrcpCmd avrcpCmdobj = new com.android.bluetooth.avrcp.AvrcpCmd(); com.android.bluetooth.avrcp.AvrcpCmd.FolderItemsCmd folderObj = avrcpCmdobj.new com.android.bluetooth.avrcp.FolderItemsCmd(address, scope, startItem, endItem, numAttr, attrIds); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_GET_FOLDER_ITEMS, 0, 0); msg.obj = folderObj; mHandler.sendMessage(msg); }







private int modifyRcFeatureFromBlacklist(int feature, java.lang.String address) { android.content.SharedPreferences pref = mContext.getSharedPreferences(com.android.bluetooth.avrcp.Avrcp.ABSOLUTE_VOLUME_BLACKLIST, Context.MODE_PRIVATE); if (!(pref.contains(address))) { return feature; } if (pref.getBoolean(address, false)) { feature &= ~(com.android.bluetooth.avrcp.Avrcp.BTRC_FEAT_ABSOLUTE_VOLUME); } return feature; }
@org.junit.Before public void setUp() throws java.lang.Exception { mContext = android.support.test.InstrumentationRegistry.getContext(); if ((android.os.Looper.myLooper()) == null) { android.os.Looper.prepare(); } mServiceContext = new com.android.server.ConnectivityServiceTest.MockContext(android.support.test.InstrumentationRegistry.getContext()); com.android.server.LocalServices.removeServiceForTest(com.android.server.net.NetworkPolicyManagerInternal.class); com.android.server.LocalServices.addService(com.android.server.net.NetworkPolicyManagerInternal.class, mock(com.android.server.net.NetworkPolicyManagerInternal.class)); mService = new com.android.server.ConnectivityServiceTest.WrappedConnectivityService(mServiceContext, mock(android.os.INetworkManagementService.class), mock(android.net.INetworkStatsService.class), mock(android.net.INetworkPolicyManager.class), mock(android.net.metrics.IpConnectivityLog.class)); mService.systemReady(); mCm = new com.android.server.ConnectivityServiceTest.WrappedConnectivityManager(android.support.test.InstrumentationRegistry.getContext(), mService); mCm.bindProcessToNetwork(null); setCaptivePortalMode(Settings.Global.CAPTIVE_PORTAL_MODE_PROMPT); setMobileDataAlwaysOn(false); }
private void cmdList(java.io.FileDescriptor fd, java.io.PrintWriter pw, java.lang.String[] args) { final java.util.ArrayList<android.net.ConnectivityMetricsEvent> events; synchronized(mLock) { events = new java.util.ArrayList(mBuffer); } if (((args.length) > 1) && (args[1].equals("proto"))) { for (com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent ev : com.android.server.connectivity.IpConnectivityEventBuilder.toProto(events)) { pw.print(ev.toString()); } if ((mNetdListener) != null) { mNetdListener.listAsProtos(pw); } return; } for (android.net.ConnectivityMetricsEvent ev : events) { pw.println(ev.toString()); } if ((mNetdListener) != null) { mNetdListener.list(pw); } }
private java.lang.String ipSupport() { if ((prevIPv4) && (prevIPv6)) { return "DUAL"; } if (prevIPv6) { return "IPv6"; } if (prevIPv4) { return "IPv4"; } return "NONE"; }
@org.junit.Test public void testDhcpFailure() throws java.lang.Exception { initializeAndAddNetworkAndVerifySuccess(); mWsm.setOperationalMode(WifiStateMachine.CONNECT_MODE); mLooper.dispatchAll(); mLooper.startAutoDispatch(); mWsm.syncEnableNetwork(mWsmAsyncChannel, 0, true); mLooper.stopAutoDispatch(); verify(mWifiConfigManager).enableNetwork(eq(0), eq(true), anyInt()); mWsm.sendMessage(WifiMonitor.NETWORK_CONNECTION_EVENT, 0, 0, com.android.server.wifi.WifiStateMachineTest.sBSSID); mLooper.dispatchAll(); mWsm.sendMessage(WifiMonitor.SUPPLICANT_STATE_CHANGE_EVENT, 0, 0, new com.android.server.wifi.StateChangeResult(0, com.android.server.wifi.WifiStateMachineTest.sWifiSsid, com.android.server.wifi.WifiStateMachineTest.sBSSID, android.net.wifi.SupplicantState.COMPLETED)); mLooper.dispatchAll(); assertEquals("ObtainingIpState", getCurrentState().getName()); mTestIpManager.injectDhcpFailure(); mLooper.dispatchAll(); assertEquals("DisconnectingState", getCurrentState().getName()); }
@org.junit.Test public void connectWithNoEnablePermission() throws java.lang.Exception { initializeAndAddNetworkAndVerifySuccess(); when(mWifiConfigManager.enableNetwork(eq(0), eq(true), anyInt())).thenReturn(false); when(mWifiConfigManager.checkAndUpdateLastConnectUid(eq(0), anyInt())).thenReturn(false); mWsm.setOperationalMode(WifiStateMachine.CONNECT_MODE); mLooper.dispatchAll(); verify(mWifiNative).removeAllNetworks(); mLooper.startAutoDispatch(); assertTrue(mWsm.syncEnableNetwork(mWsmAsyncChannel, 0, true)); mLooper.stopAutoDispatch(); verify(mWifiConfigManager).enableNetwork(eq(0), eq(true), anyInt()); verify(mWifiConnectivityManager, never()).setUserConnectChoice(eq(0)); mWsm.sendMessage(WifiMonitor.NETWORK_CONNECTION_EVENT, 0, 0, com.android.server.wifi.WifiStateMachineTest.sBSSID); mLooper.dispatchAll(); mWsm.sendMessage(WifiMonitor.SUPPLICANT_STATE_CHANGE_EVENT, 0, 0, new com.android.server.wifi.StateChangeResult(0, com.android.server.wifi.WifiStateMachineTest.sWifiSsid, com.android.server.wifi.WifiStateMachineTest.sBSSID, android.net.wifi.SupplicantState.COMPLETED)); mLooper.dispatchAll(); assertEquals("ObtainingIpState", getCurrentState().getName()); android.net.DhcpResults dhcpResults = new android.net.DhcpResults(); dhcpResults.setGateway("1.2.3.4"); dhcpResults.setIpAddress("192.168.1.100", 0); dhcpResults.addDns("8.8.8.8"); dhcpResults.setLeaseDuration(3600); mTestIpManager.injectDhcpSuccess(dhcpResults); mLooper.dispatchAll(); assertEquals("ConnectedState", getCurrentState().getName()); }
@java.lang.Override public void startProvisioning(android.net.ip.IpManager.ProvisioningConfiguration config) { }
public android.net.ip.IpManager answer(android.content.Context context, java.lang.String ifname, android.net.ip.IpManager.Callback callback) { mTestIpManager = new com.android.server.wifi.WifiStateMachineTest.TestIpManager(context, ifname, callback); return mTestIpManager; }


@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { if (android.telephony.CellIdentityGsm.DBG) android.telephony.CellIdentityGsm.log(("writeToParcel(Parcel, int): " + (toString()))); dest.writeInt(mMcc); dest.writeInt(mMnc); dest.writeInt(mLac); dest.writeInt(mCid); dest.writeInt(mArfcn); dest.writeInt(mBsic); }
@java.lang.Override public boolean equals(java.lang.Object other) { if ((this) == other) { return true; } if (!(other instanceof android.telephony.CellIdentityGsm)) { return false; } android.telephony.CellIdentityGsm o = ((android.telephony.CellIdentityGsm) (other)); return ((((((mMcc) == (o.mMcc)) && ((mMnc) == (o.mMnc))) && ((mLac) == (o.mLac))) && ((mCid) == (o.mCid))) && ((mArfcn) == (o.mArfcn))) && ((mBsic) == (o.mBsic)); }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { if (android.telephony.CellIdentityLte.DBG) android.telephony.CellIdentityLte.log(("writeToParcel(Parcel, int): " + (toString()))); dest.writeInt(mMcc); dest.writeInt(mMnc); dest.writeInt(mCi); dest.writeInt(mPci); dest.writeInt(mTac); dest.writeInt(mEarfcn); }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder sb = new java.lang.StringBuilder("CellIdentityWcdma:{"); sb.append(" mMcc=").append(mMcc); sb.append(" mMnc=").append(mMnc); sb.append(" mLac=").append(mLac); sb.append(" mCid=").append(mCid); sb.append(" mPsc=").append(mPsc); sb.append(" mUarfcn=").append(mUarfcn); sb.append("}"); return sb.toString(); }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { if (android.telephony.CellIdentityWcdma.DBG) android.telephony.CellIdentityWcdma.log(("writeToParcel(Parcel, int): " + (toString()))); dest.writeInt(mMcc); dest.writeInt(mMnc); dest.writeInt(mLac); dest.writeInt(mCid); dest.writeInt(mPsc); dest.writeInt(mUarfcn); }
@java.lang.Override public boolean equals(java.lang.Object other) { if ((this) == other) { return true; } if (!(other instanceof android.telephony.CellIdentityCdma)) { return false; } android.telephony.CellIdentityCdma o = ((android.telephony.CellIdentityCdma) (other)); return (((((mNetworkId) == (o.mNetworkId)) && ((mSystemId) == (o.mSystemId))) && ((mBasestationId) == (o.mBasestationId))) && ((mLatitude) == (o.mLatitude))) && ((mLongitude) == (o.mLongitude)); }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder sb = new java.lang.StringBuilder("CellIdentityGsm:{"); sb.append(" mMcc=").append(mMcc); sb.append(" mMnc=").append(mMnc); sb.append(" mLac=").append(mLac); sb.append(" mCid=").append(mCid); sb.append(" mArfcn=").append(mArfcn); sb.append(" mBsic=").append("0x").append(java.lang.Integer.toHexString(mBsic)); sb.append("}"); return sb.toString(); }
@java.lang.Override public boolean equals(java.lang.Object other) { if ((this) == other) { return true; } if (!(other instanceof android.telephony.CellIdentityWcdma)) { return false; } android.telephony.CellIdentityWcdma o = ((android.telephony.CellIdentityWcdma) (other)); return ((((((mMcc) == (o.mMcc)) && ((mMnc) == (o.mMnc))) && ((mLac) == (o.mLac))) && ((mCid) == (o.mCid))) && ((mPsc) == (o.mPsc))) && ((mUarfcn) == (o.mUarfcn)); }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder sb = new java.lang.StringBuilder("CellIdentityLte:{"); sb.append(" mMcc="); sb.append(mMcc); sb.append(" mMnc="); sb.append(mMnc); sb.append(" mCi="); sb.append(mCi); sb.append(" mPci="); sb.append(mPci); sb.append(" mTac="); sb.append(mTac); sb.append(" mEarfcn="); sb.append(mEarfcn); sb.append("}"); return sb.toString(); }
@java.lang.Override public boolean equals(java.lang.Object other) { if ((this) == other) { return true; } if (!(other instanceof android.telephony.CellIdentityLte)) { return false; } android.telephony.CellIdentityLte o = ((android.telephony.CellIdentityLte) (other)); return ((((((mMcc) == (o.mMcc)) && ((mMnc) == (o.mMnc))) && ((mCi) == (o.mCi))) && ((mPci) == (o.mPci))) && ((mTac) == (o.mTac))) && ((mEarfcn) == (o.mEarfcn)); }

private void setSubject(com.android.bluetooth.map.BluetoothMapMessageListingElement e, android.database.Cursor c, com.android.bluetooth.map.BluetoothMapContent.FilterInfo fi, com.android.bluetooth.map.BluetoothMapAppParams ap) { java.lang.String subject = ""; int subLength = ap.getSubjectLength(); if (subLength == (BluetoothMapAppParams.INVALID_VALUE_PARAMETER)) subLength = 256; if (((ap.getParameterMask()) & (com.android.bluetooth.map.BluetoothMapContent.MASK_SUBJECT)) != 0) { if ((fi.mMsgType) == (com.android.bluetooth.map.BluetoothMapContent.FilterInfo.TYPE_SMS)) { subject = c.getString(fi.mSmsColSubject); } else if ((fi.mMsgType) == (com.android.bluetooth.map.BluetoothMapContent.FilterInfo.TYPE_MMS)) { subject = c.getString(fi.mMmsColSubject); if ((subject == null) || ((subject.length()) == 0)) { long id = c.getLong(fi.mMmsColId); subject = com.android.bluetooth.map.BluetoothMapContent.getTextPartsMms(mResolver, id); } } else if (((fi.mMsgType) == (com.android.bluetooth.map.BluetoothMapContent.FilterInfo.TYPE_EMAIL)) || ((fi.mMsgType) == (com.android.bluetooth.map.BluetoothMapContent.FilterInfo.TYPE_IM))) { subject = c.getString(fi.mMessageColSubject); } if ((subject != null) && ((subject.length()) > subLength)) { subject = subject.substring(0, subLength); } else if (subject == null) { subject = ""; } if (com.android.bluetooth.map.BluetoothMapContent.V) android.util.Log.d(com.android.bluetooth.map.BluetoothMapContent.TAG, ("setSubject: " + subject)); e.setSubject(subject); } }
public byte[] encode() throws java.io.UnsupportedEncodingException { java.util.ArrayList<byte[]> bodyFragments = new java.util.ArrayList<byte[]>(); if ((mSmsBody) != null) { java.lang.String tmpBody = mSmsBody.replaceAll("END:MSG", "/END\\:MSG"); bodyFragments.add(tmpBody.getBytes("UTF-8")); } else if (((mSmsBodyPdus) != null) && ((mSmsBodyPdus.size()) > 0)) { for (com.android.bluetooth.map.BluetoothMapSmsPdu.SmsPdu pdu : mSmsBodyPdus) { bodyFragments.add(encodeBinary(pdu.getData(), pdu.getScAddress()).getBytes("UTF-8")); } } else { bodyFragments.add(new byte[0]); } return encodeGeneric(bodyFragments); }

@java.lang.Override public boolean bindBluetoothProfileService(int bluetoothProfile, android.bluetooth.IBluetoothProfileServiceConnection proxy) { if (!(mEnable)) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (("Trying to bind to profile: " + bluetoothProfile) + ", while Bluetooth was disabled")); } return false; } synchronized(mProfileServices) { com.android.server.BluetoothManagerService.ProfileServiceConnections psc = mProfileServices.get(new java.lang.Integer(bluetoothProfile)); if (psc == null) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (("Creating new ProfileServiceConnections object for" + " profile: ") + bluetoothProfile)); } if (bluetoothProfile != (android.bluetooth.BluetoothProfile.HEADSET)) return false; android.content.Intent intent = new android.content.Intent(android.bluetooth.IBluetoothHeadset.class.getName()); psc = new com.android.server.BluetoothManagerService.ProfileServiceConnections(intent); if (!(psc.bindService())) return false; mProfileServices.put(new java.lang.Integer(bluetoothProfile), psc); } } android.os.Message addProxyMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_ADD_PROXY_DELAYED); addProxyMsg.arg1 = bluetoothProfile; addProxyMsg.obj = proxy; mHandler.sendMessageDelayed(addProxyMsg, com.android.server.BluetoothManagerService.ADD_PROXY_DELAY_MS); return true; }



@java.lang.Override protected com.android.internal.telephony.cdma.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int encoding, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean lastPart, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, java.lang.String fullMessageText) { com.android.internal.telephony.cdma.sms.UserData uData = new com.android.internal.telephony.cdma.sms.UserData(); uData.payloadStr = message; uData.userDataHeader = smsHeader; if (encoding == (com.android.internal.telephony.SmsConstants.ENCODING_7BIT)) { uData.msgEncoding = com.android.internal.telephony.cdma.sms.UserData.ENCODING_GSM_7BIT_ALPHABET; } else { uData.msgEncoding = com.android.internal.telephony.cdma.sms.UserData.ENCODING_UNICODE_16; } uData.msgEncodingSet = true; com.android.internal.telephony.cdma.SmsMessage.SubmitPdu submitPdu = com.android.internal.telephony.cdma.SmsMessage.getSubmitPdu(destinationAddress, uData, ((deliveryIntent != null) && lastPart)); java.util.HashMap map = getSmsTrackerMap(destinationAddress, scAddress, message, submitPdu); return getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), unsentPartCount, anyPartFailed, messageUri, smsHeader, false, fullMessageText, true, true); }
@com.android.internal.annotations.VisibleForTesting @java.lang.Override public void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String callingPkg, boolean persistMessage) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddr, destAddr, text, (deliveryIntent != null)); if (pdu != null) { java.util.HashMap map = getSmsTrackerMap(destAddr, scAddr, text, pdu); com.android.internal.telephony.gsm.SmsTracker tracker = getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), messageUri, false, text, true, persistMessage); java.lang.String carrierPackage = getCarrierAppPackageName(); if (carrierPackage != null) { android.telephony.Rlog.d(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "Found carrier package."); com.android.internal.telephony.gsm.TextSmsSender smsSender = new com.android.internal.telephony.gsm.TextSmsSender(tracker); smsSender.sendSmsByCarrierApp(carrierPackage, new com.android.internal.telephony.gsm.SmsSenderCallback(smsSender)); } else { android.telephony.Rlog.v(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "No carrier package."); sendRawPdu(tracker); } } else { android.telephony.Rlog.e(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "GsmSMSDispatcher.sendText(): getSubmitPdu() returned null"); } }
@java.lang.Override protected com.android.internal.telephony.gsm.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int encoding, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean lastPart, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, java.lang.String fullMessageText) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddress, destinationAddress, message, (deliveryIntent != null), com.android.internal.telephony.SmsHeader.toByteArray(smsHeader), encoding, smsHeader.languageTable, smsHeader.languageShiftTable); if (pdu != null) { java.util.HashMap map = getSmsTrackerMap(destinationAddress, scAddress, message, pdu); return getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), unsentPartCount, anyPartFailed, messageUri, smsHeader, (!lastPart), fullMessageText, true, false); } else { android.telephony.Rlog.e(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "GsmSMSDispatcher.sendNewSubmitPdu(): getSubmitPdu() returned null"); return null; } }
@java.lang.Override public void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String callingPkg, boolean persistMessage) { android.telephony.Rlog.d(com.android.internal.telephony.ImsSMSDispatcher.TAG, "sendText"); if (isCdmaMo()) { mCdmaDispatcher.sendText(destAddr, scAddr, text, sentIntent, deliveryIntent, messageUri, callingPkg, persistMessage); } else { mGsmDispatcher.sendText(destAddr, scAddr, text, sentIntent, deliveryIntent, messageUri, callingPkg, persistMessage); } }
public void sendStoredText(java.lang.String callingPkg, android.net.Uri messageUri, java.lang.String scAddress, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent) { mPhone.getContext().enforceCallingPermission(Manifest.permission.SEND_SMS, "Sending SMS message"); if (android.telephony.Rlog.isLoggable("SMS", Log.VERBOSE)) { log(((((((("sendStoredText: scAddr=" + scAddress) + " messageUri=") + messageUri) + " sentIntent=") + sentIntent) + " deliveryIntent=") + deliveryIntent)); } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMS, android.os.Binder.getCallingUid(), callingPkg)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return; } final android.content.ContentResolver resolver = mPhone.getContext().getContentResolver(); if (!(isFailedOrDraft(resolver, messageUri))) { android.util.Log.e(com.android.internal.telephony.IccSmsInterfaceManager.LOG_TAG, "[IccSmsInterfaceManager]sendStoredText: not FAILED or DRAFT message"); returnUnspecifiedFailure(sentIntent); return; } final java.lang.String[] textAndAddress = loadTextAndAddress(resolver, messageUri); if (textAndAddress == null) { android.util.Log.e(com.android.internal.telephony.IccSmsInterfaceManager.LOG_TAG, "[IccSmsInterfaceManager]sendStoredText: can not load text"); returnUnspecifiedFailure(sentIntent); return; } textAndAddress[1] = filterDestAddress(textAndAddress[1]); mDispatcher.sendText(textAndAddress[1], scAddress, textAndAddress[0], sentIntent, deliveryIntent, messageUri, callingPkg, true); }


private void sendMultipartSms(com.android.internal.telephony.SMSDispatcher.SmsTracker tracker) { java.util.ArrayList<java.lang.String> parts; java.util.ArrayList<android.app.PendingIntent> sentIntents; java.util.ArrayList<android.app.PendingIntent> deliveryIntents; java.util.HashMap<java.lang.String, java.lang.Object> map = tracker.getData(); java.lang.String destinationAddress = ((java.lang.String) (map.get("destination"))); java.lang.String scAddress = ((java.lang.String) (map.get("scaddress"))); parts = ((java.util.ArrayList<java.lang.String>) (map.get("parts"))); sentIntents = ((java.util.ArrayList<android.app.PendingIntent>) (map.get("sentIntents"))); deliveryIntents = ((java.util.ArrayList<android.app.PendingIntent>) (map.get("deliveryIntents"))); int ss = mPhone.getServiceState().getState(); if ((!(isIms())) && (ss != (android.telephony.ServiceState.STATE_IN_SERVICE))) { for (int i = 0, count = parts.size(); i < count; i++) { android.app.PendingIntent sentIntent = null; if ((sentIntents != null) && ((sentIntents.size()) > i)) { sentIntent = sentIntents.get(i); } com.android.internal.telephony.SMSDispatcher.handleNotInService(ss, sentIntent); } return; } sendMultipartText(destinationAddress, scAddress, parts, sentIntents, deliveryIntents, null, null, tracker.mPersistMessage); }
protected com.android.internal.telephony.SMSDispatcher.SmsTracker getSmsTracker(java.util.HashMap<java.lang.String, java.lang.Object> data, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, java.lang.String format, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, com.android.internal.telephony.SmsHeader smsHeader, boolean isExpectMore, java.lang.String fullMessageText, boolean isText, boolean persistMessage) { android.content.pm.PackageManager pm = mContext.getPackageManager(); java.lang.String[] packageNames = pm.getPackagesForUid(android.os.Binder.getCallingUid()); final int userId = android.os.UserHandle.getCallingUserId(); android.content.pm.PackageInfo appInfo = null; if ((packageNames != null) && ((packageNames.length) > 0)) { try { appInfo = pm.getPackageInfoAsUser(packageNames[0], PackageManager.GET_SIGNATURES, userId); } catch (android.content.pm.PackageManager e) { } } java.lang.String destAddr = android.telephony.PhoneNumberUtils.extractNetworkPortion(((java.lang.String) (data.get("destAddr")))); return new com.android.internal.telephony.SMSDispatcher.SmsTracker(data, sentIntent, deliveryIntent, appInfo, destAddr, format, unsentPartCount, anyPartFailed, messageUri, smsHeader, isExpectMore, fullMessageText, getSubId(), isText, persistMessage, userId); }




protected abstract com.android.internal.telephony.SMSDispatcher.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int encoding, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean lastPart, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, java.lang.String fullMessageText);
protected com.android.internal.telephony.SMSDispatcher.SmsTracker getSmsTracker(java.util.HashMap<java.lang.String, java.lang.Object> data, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, java.lang.String format, android.net.Uri messageUri, boolean isExpectMore, java.lang.String fullMessageText, boolean isText, boolean persistMessage) { return getSmsTracker(data, sentIntent, deliveryIntent, format, null, null, messageUri, null, isExpectMore, fullMessageText, isText, persistMessage); }
protected abstract void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String callingPkg, boolean persistMessage);
@java.lang.Override public void sendMultipartText(java.lang.String destAddr, java.lang.String scAddr, java.util.ArrayList<java.lang.String> parts, java.util.ArrayList<android.app.PendingIntent> sentIntents, java.util.ArrayList<android.app.PendingIntent> deliveryIntents, android.net.Uri messageUri, java.lang.String callingPkg, boolean persistMessage) { if (isCdmaMo()) { mCdmaDispatcher.sendMultipartText(destAddr, scAddr, parts, sentIntents, deliveryIntents, messageUri, callingPkg, persistMessage); } else { mGsmDispatcher.sendMultipartText(destAddr, scAddr, parts, sentIntents, deliveryIntents, messageUri, callingPkg, persistMessage); } }

private void sendTextInternal(java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean persistMessageForNonDefaultSmsApp) { if (android.telephony.Rlog.isLoggable("SMS", Log.VERBOSE)) { log(((((((((("sendText: destAddr=" + destAddr) + " scAddr=") + scAddr) + " text='") + text) + "' sentIntent=") + sentIntent) + " deliveryIntent=") + deliveryIntent)); } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMS, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return; } if (!persistMessageForNonDefaultSmsApp) { enforcePrivilegedAppPermissions(); } destAddr = filterDestAddress(destAddr); mDispatcher.sendText(destAddr, scAddr, text, sentIntent, deliveryIntent, null, callingPackage, persistMessageForNonDefaultSmsApp); }
@java.lang.Override protected com.android.internal.telephony.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int format, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean lastPart, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, java.lang.String fullMessageText) { android.telephony.Rlog.e(com.android.internal.telephony.ImsSMSDispatcher.TAG, "Error! Not implemented for IMS."); return null; }
private static com.android.timezone.distro.tools.TimeZoneDistroBuilder createValidTimeZoneDistroBuilder(java.lang.String rulesVersion, int revision) throws java.lang.Exception { byte[] tzData = com.android.timezone.distro.installer.TimeZoneDistroInstallerTest.createTzData(rulesVersion); byte[] icuData = new byte[]{ 'a' }; java.lang.String tzlookupXml = "<timezones>\n" + (((((((((" <countryzones>\n" + " <country code=\"us\">\n") + " <id>America/New_York\"</id>\n") + " <id>America/Los_Angeles</id>\n") + " </country>\n") + " <country code=\"gb\">\n") + " <id>Europe/London</id>\n") + " </country>\n") + " </countryzones>\n") + "</timezones>\n"); com.android.timezone.distro.DistroVersion distroVersion = new com.android.timezone.distro.DistroVersion(com.android.timezone.distro.DistroVersion.CURRENT_FORMAT_MAJOR_VERSION, com.android.timezone.distro.DistroVersion.CURRENT_FORMAT_MINOR_VERSION, rulesVersion, revision); return new com.android.timezone.distro.tools.TimeZoneDistroBuilder().setDistroVersion(distroVersion).setTzDataFile(tzData).setIcuDataFile(icuData).setTzLookupXml(tzlookupXml); }

public void openCameraDevice(int cameraId) throws com.android.cts.verifier.camera.its.ItsException { com.android.cts.verifier.camera.its.Logt.i(com.android.cts.verifier.camera.its.ItsService.TAG, java.lang.String.format("Opening camera %d", cameraId)); java.lang.String[] devices; try { devices = mCameraManager.getCameraIdList(); if ((devices == null) || ((devices.length) == 0)) { throw new com.android.cts.verifier.camera.its.ItsException("No camera devices"); } } catch (android.hardware.camera2.CameraAccessException e) { throw new com.android.cts.verifier.camera.its.ItsException("Failed to get device ID list", e); } try { mCamera = mBlockingCameraManager.openCamera(devices[cameraId], mCameraListener, mCameraHandler); mCameraCharacteristics = mCameraManager.getCameraCharacteristics(devices[cameraId]); android.util.Size maxYuvSize = com.android.cts.verifier.camera.its.ItsUtils.getYuvOutputSizes(mCameraCharacteristics)[0]; int quota = (((maxYuvSize.getWidth()) * (maxYuvSize.getHeight())) * 2) * 3; mSocketQueueQuota = new java.util.concurrent.Semaphore(quota, true); } catch (android.hardware.camera2.CameraAccessException e) { throw new com.android.cts.verifier.camera.its.ItsException("Failed to open camera", e); } catch (com.android.ex.camera2.blocking.BlockingCameraManager.BlockingOpenException e) { throw new com.android.cts.verifier.camera.its.ItsException("Failed to open camera (after blocking)", e); } mSocketRunnableObj.sendResponse("cameraOpened", ""); }
com.android.internal.telephony.cat.Menu getMainMenu(int slotId) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("StkAppService, getMainMenu, sim id: " + slotId)); if (((slotId >= 0) && (slotId < (mSimCount))) && ((mStkContext[slotId].mMainCmd) != null)) { return mStkContext[slotId].mMainCmd.getMenu(); } else { return null; } }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (intent.getAction().equals(BluetoothDevice.ACTION_BOND_STATE_CHANGED)) { android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); int state = intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.BOND_NONE); switch (state) { case android.bluetooth.BluetoothDevice.BOND_BONDED : mBluetoothGatt = com.android.cts.verifier.bluetooth.BleClientService.connectGatt(device, mContext, false, mSecure, mGattCallbacks); break; case android.bluetooth.BluetoothDevice.BOND_NONE : notifyError("Failed to create bond."); break; case android.bluetooth.BluetoothDevice.BOND_BONDING : default : break; } } }



private static void addOtacert(java.util.jar.JarOutputStream outputJar, java.io.File publicKeyFile, long timestamp) throws java.io.IOException { java.util.jar.JarEntry je = new java.util.jar.JarEntry(com.android.signapk.SignApk.OTACERT_NAME); je.setTime(timestamp); outputJar.putNextEntry(je); java.io.FileInputStream input = new java.io.FileInputStream(publicKeyFile); byte[] b = new byte[4096]; int read; while ((read = input.read(b)) != (-1)) { outputJar.write(b, 0, read); } input.close(); }
private static int getStoredEntryDataAlignment(java.lang.String entryName, int defaultAlignment) { if (defaultAlignment <= 0) { return 0; } if (entryName.endsWith(".so")) { return 4096; } else { return defaultAlignment; } }
public static final native android.os.IHwBinder getService(java.lang.String iface, java.lang.String serviceName) throws android.os.RemoteException, java.util.NoSuchElementException;




private android.content.pm.ApplicationInfo createMockApplicationInfo(java.lang.String baseClassLoader, boolean addSplits, boolean addSplitDependencies) { android.content.pm.ApplicationInfo ai = new android.content.pm.ApplicationInfo(); java.lang.String codeDir = "/data/app/mock.android.com"; ai.setBaseCodePath((codeDir + "/base.dex")); ai.classLoaderName = baseClassLoader; if (addSplits) { ai.setSplitCodePaths(new java.lang.String[]{ codeDir + "/base-1.dex", codeDir + "/base-2.dex", codeDir + "/base-3.dex", codeDir + "/base-4.dex", codeDir + "/base-5.dex", codeDir + "/base-6.dex" }); ai.splitClassLoaderNames = new java.lang.String[]{ com.android.server.pm.dex.DexoptUtilsTest.DELEGATE_LAST_CLASS_LOADER_NAME, com.android.server.pm.dex.DexoptUtilsTest.DELEGATE_LAST_CLASS_LOADER_NAME, com.android.server.pm.dex.DexoptUtilsTest.PATH_CLASS_LOADER_NAME, com.android.server.pm.dex.DexoptUtilsTest.PATH_CLASS_LOADER_NAME, com.android.server.pm.dex.DexoptUtilsTest.PATH_CLASS_LOADER_NAME, null }; if (addSplitDependencies) { ai.splitDependencies = new android.util.SparseArray(((ai.splitClassLoaderNames.length) + 1)); ai.splitDependencies.put(0, new int[]{ -1 }); ai.splitDependencies.put(1, new int[]{ 2 }); ai.splitDependencies.put(2, new int[]{ 4 }); ai.splitDependencies.put(3, new int[]{ 4 }); ai.splitDependencies.put(4, new int[]{ 0 }); ai.splitDependencies.put(5, new int[]{ 0 }); ai.splitDependencies.put(6, new int[]{ 5 }); } } return ai; }





@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((((((((((("SignalStrength:" + " ") + (mGsmSignalStrength)) + " ") + (mGsmBitErrorRate)) + " ") + (mCdmaDbm)) + " ") + (mCdmaEcio)) + " ") + (mEvdoDbm)) + " ") + (mEvdoEcio)) + " ") + (mEvdoSnr)) + " ") + (mLteSignalStrength)) + " ") + (mLteRsrp)) + " ") + (mLteRsrq)) + " ") + (mLteRssnr)) + " ") + (mLteCqi)) + " ") + (mLteRsrpBoost)) + " ") + (mTdScdmaRscp)) + " ") + (isGsm ? "gsm|lte" : "cdma"); }
@java.lang.Override public void onNewIntent(android.content.Intent intent) { setIntent(intent); }
@java.lang.Override public boolean onCreateOptionsMenu(android.view.Menu menu) { super.onCreateOptionsMenu(menu); if ((com.android.music.MusicUtils.getCurrentAudioId()) >= 0) { menu.add(0, com.android.music.GOTO_START, 0, R.string.goto_start).setIcon(R.drawable.ic_menu_music_library); menu.add(0, com.android.music.PARTY_SHUFFLE, 0, R.string.party_shuffle); android.view.SubMenu sub = menu.addSubMenu(0, com.android.music.ADD_TO_PLAYLIST, 0, R.string.add_to_playlist).setIcon(android.R.drawable.ic_menu_add); menu.add(1, com.android.music.MediaPlaybackActivity.USE_AS_RINGTONE, 0, R.string.ringtone_menu_short).setIcon(R.drawable.ic_menu_set_as_ringtone); menu.add(1, com.android.music.DELETE_ITEM, 0, R.string.delete_item).setIcon(R.drawable.ic_menu_delete); android.content.Intent i = new android.content.Intent(android.media.audiofx.AudioEffect.ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL); if ((getPackageManager().resolveActivity(i, 0)) != null) { menu.add(0, com.android.music.EFFECTS_PANEL, 0, R.string.effectspanel).setIcon(R.drawable.ic_menu_eq); } return true; } return false; }
@java.lang.Override public android.view.View newChildView(android.content.Context context, android.database.Cursor cursor, boolean isLastChild, android.view.ViewGroup parent) { android.view.View v = super.newChildView(context, cursor, isLastChild, parent); com.android.music.ArtistAlbumBrowserActivity.ArtistAlbumListAdapter.ViewHolder vh = new com.android.music.ArtistAlbumBrowserActivity.ArtistAlbumListAdapter.ViewHolder(); vh.line1 = ((android.widget.TextView) (v.findViewById(R.id.line1))); vh.line2 = ((android.widget.TextView) (v.findViewById(R.id.line2))); vh.play_indicator = ((android.widget.ImageView) (v.findViewById(R.id.play_indicator))); vh.icon = ((android.widget.ImageView) (v.findViewById(R.id.icon))); vh.icon.setBackgroundDrawable(mDefaultAlbumIcon); vh.icon.setPadding(0, 0, 1, 0); v.setTag(vh); return v; }
void doSearch() { java.lang.CharSequence title = null; java.lang.String query = null; android.content.Intent i = new android.content.Intent(); i.setAction(MediaStore.INTENT_ACTION_MEDIA_SEARCH); i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); if ((mCurrentArtistId) != null) { title = mCurrentArtistName; query = mCurrentArtistName; i.putExtra(MediaStore.EXTRA_MEDIA_ARTIST, mCurrentArtistName); i.putExtra(MediaStore.EXTRA_MEDIA_FOCUS, MediaStore.Audio.Artists.ENTRY_CONTENT_TYPE); } else { if (mIsUnknownAlbum) { title = query = mCurrentArtistNameForAlbum; } else { title = query = mCurrentAlbumName; if (!(mIsUnknownArtist)) { query = (query + " ") + (mCurrentArtistNameForAlbum); } } i.putExtra(MediaStore.EXTRA_MEDIA_ARTIST, mCurrentArtistNameForAlbum); i.putExtra(MediaStore.EXTRA_MEDIA_ALBUM, mCurrentAlbumName); i.putExtra(MediaStore.EXTRA_MEDIA_FOCUS, MediaStore.Audio.Albums.ENTRY_CONTENT_TYPE); } title = getString(R.string.mediasearch, title); i.putExtra(SearchManager.QUERY, query); startActivity(android.content.Intent.createChooser(i, title)); }

@java.lang.Override public boolean onChildClick(android.widget.ExpandableListView parent, android.view.View v, int groupPosition, int childPosition, long id) { mCurrentAlbumId = java.lang.Long.valueOf(id).toString(); android.content.Intent intent = new android.content.Intent(android.content.Intent.ACTION_PICK); intent.setDataAndType(Uri.EMPTY, "vnd.android.cursor.dir/track"); intent.putExtra("album", mCurrentAlbumId); android.database.Cursor c = ((android.database.Cursor) (getExpandableListAdapter().getChild(groupPosition, childPosition))); java.lang.String album = c.getString(c.getColumnIndex(MediaStore.Audio.Albums.ALBUM)); if ((album == null) || (album.equals(MediaStore.UNKNOWN_STRING))) { mArtistCursor.moveToPosition(groupPosition); mCurrentArtistId = mArtistCursor.getString(mArtistCursor.getColumnIndex(MediaStore.Audio.Artists._ID)); intent.putExtra("artist", mCurrentArtistId); } startActivity(intent); return true; }
@java.lang.Override public android.view.View newGroupView(android.content.Context context, android.database.Cursor cursor, boolean isExpanded, android.view.ViewGroup parent) { android.view.View v = super.newGroupView(context, cursor, isExpanded, parent); android.widget.ImageView iv = ((android.widget.ImageView) (v.findViewById(R.id.icon))); android.view.ViewGroup.LayoutParams p = iv.getLayoutParams(); p.width = ViewGroup.LayoutParams.WRAP_CONTENT; p.height = ViewGroup.LayoutParams.WRAP_CONTENT; com.android.music.ArtistAlbumBrowserActivity.ArtistAlbumListAdapter.ViewHolder vh = new com.android.music.ArtistAlbumBrowserActivity.ArtistAlbumListAdapter.ViewHolder(); vh.line1 = ((android.widget.TextView) (v.findViewById(R.id.line1))); vh.line2 = ((android.widget.TextView) (v.findViewById(R.id.line2))); vh.play_indicator = ((android.widget.ImageView) (v.findViewById(R.id.play_indicator))); vh.icon = ((android.widget.ImageView) (v.findViewById(R.id.icon))); vh.icon.setPadding(0, 0, 1, 0); v.setTag(vh); return v; }
public void moveQueueItem(int index1, int index2) { synchronized(this) { if (index1 >= (mPlayListLen)) { index1 = (mPlayListLen) - 1; } if (index2 >= (mPlayListLen)) { index2 = (mPlayListLen) - 1; } if (index1 < index2) { long tmp = mPlayList[index1]; for (int i = index1; i < index2; i++) { mPlayList[i] = mPlayList[(i + 1)]; } mPlayList[index2] = tmp; if ((mPlayPos) == index1) { mPlayPos = index2; } else if (((mPlayPos) >= index1) && ((mPlayPos) <= index2)) { (mPlayPos)--; } } else if (index2 < index1) { long tmp = mPlayList[index1]; for (int i = index1; i > index2; i--) { mPlayList[i] = mPlayList[(i - 1)]; } mPlayList[index2] = tmp; if ((mPlayPos) == index1) { mPlayPos = index2; } else if (((mPlayPos) >= index2) && ((mPlayPos) <= index1)) { (mPlayPos)++; } } notifyChange(com.android.music.MediaPlaybackService.QUEUE_CHANGED); } }

public int removeTracks(int first, int last) { int numremoved = removeTracksInternal(first, last); if (numremoved > 0) { notifyChange(com.android.music.MediaPlaybackService.QUEUE_CHANGED); } return numremoved; }
private void updateTrackInfo() { if ((mService) == null) { return; } try { java.lang.String path = mService.getPath(); if (path == null) { finish(); return; } long songid = mService.getAudioId(); if ((songid < 0) && (path.toLowerCase().startsWith("http://"))) { ((android.view.View) (mArtistName.getParent())).setVisibility(View.INVISIBLE); ((android.view.View) (mAlbumName.getParent())).setVisibility(View.INVISIBLE); mAlbum.setVisibility(View.GONE); mTrackName.setText(path); mAlbumArtHandler.removeMessages(com.android.music.MediaPlaybackActivity.GET_ALBUM_ART); mAlbumArtHandler.obtainMessage(com.android.music.MediaPlaybackActivity.GET_ALBUM_ART, new com.android.music.MediaPlaybackActivity.AlbumSongIdWrapper((-1), (-1))).sendToTarget(); } else { ((android.view.View) (mArtistName.getParent())).setVisibility(View.VISIBLE); ((android.view.View) (mAlbumName.getParent())).setVisibility(View.VISIBLE); java.lang.String artistName = mService.getArtistName(); if (MediaStore.UNKNOWN_STRING.equals(artistName)) { artistName = getString(R.string.unknown_artist_name); } mArtistName.setText(artistName); java.lang.String albumName = mService.getAlbumName(); long albumid = mService.getAlbumId(); if (MediaStore.UNKNOWN_STRING.equals(albumName)) { albumName = getString(R.string.unknown_album_name); albumid = -1; } mAlbumName.setText(albumName); mTrackName.setText(mService.getTrackName()); mAlbumArtHandler.removeMessages(com.android.music.MediaPlaybackActivity.GET_ALBUM_ART); mAlbumArtHandler.obtainMessage(com.android.music.MediaPlaybackActivity.GET_ALBUM_ART, new com.android.music.MediaPlaybackActivity.AlbumSongIdWrapper(albumid, songid)).sendToTarget(); mAlbum.setVisibility(View.VISIBLE); } mDuration = mService.duration(); mTotalTime.setText(com.android.music.MusicUtils.makeTimeString(this, ((mDuration) / 1000))); } catch (android.os.RemoteException ex) { finish(); } }

private com.android.apksig.DefaultApkSignerEngine.OutputApkSigningBlockRequestImpl outputZipSectionsInternal(com.android.apksig.util.DataSource zipEntries, com.android.apksig.util.DataSource zipCentralDirectory, com.android.apksig.util.DataSource zipEocd, boolean apkSigningBlockPaddingSupported) throws java.io.IOException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException { checkNotClosed(); checkV1SigningDoneIfEnabled(); if (!(mV2SigningEnabled)) { return null; } invalidateV2Signature(); com.android.apksig.internal.util.Pair<byte[], java.lang.Integer> result = com.android.apksig.internal.apk.v2.V2SchemeSigner.generateApkSigningBlock(zipEntries, zipCentralDirectory, zipEocd, mV2SignerConfigs, apkSigningBlockPaddingSupported); byte[] apkSigningBlock = result.getFirst(); int padSizeBeforeApkSigningBlock = result.getSecond(); mAddV2SignatureRequest = new com.android.apksig.DefaultApkSignerEngine.OutputApkSigningBlockRequestImpl(apkSigningBlock, padSizeBeforeApkSigningBlock); return mAddV2SignatureRequest; }
public static java.util.List<com.android.apksig.internal.apk.v2.SignatureAlgorithm> getSuggestedSignatureAlgorithms(java.security.PublicKey signingKey, int minSdkVersion) throws java.security.InvalidKeyException { java.lang.String keyAlgorithm = signingKey.getAlgorithm(); if ("RSA".equalsIgnoreCase(keyAlgorithm)) { int modulusLengthBits = ((java.security.interfaces.RSAKey) (signingKey)).getModulus().bitLength(); if (modulusLengthBits <= 3072) { return java.util.Collections.singletonList(SignatureAlgorithm.RSA_PKCS1_V1_5_WITH_SHA256); } else { return java.util.Collections.singletonList(SignatureAlgorithm.RSA_PKCS1_V1_5_WITH_SHA512); } } else if ("DSA".equalsIgnoreCase(keyAlgorithm)) { return java.util.Collections.singletonList(SignatureAlgorithm.DSA_WITH_SHA256); } else if ("EC".equalsIgnoreCase(keyAlgorithm)) { int keySizeBits = ((java.security.interfaces.ECKey) (signingKey)).getParams().getOrder().bitLength(); if (keySizeBits <= 256) { return java.util.Collections.singletonList(SignatureAlgorithm.ECDSA_WITH_SHA256); } else { return java.util.Collections.singletonList(SignatureAlgorithm.ECDSA_WITH_SHA512); } } else { throw new java.security.InvalidKeyException(("Unsupported key algorithm: " + keyAlgorithm)); } }








@java.lang.Override public void enter() { if (com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, ("Enter Connecting: " + (getCurrentMessage().what))); } sendMessageDelayed(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.CONNECTING_TIMEOUT, com.android.bluetooth.hfpclient.HeadsetClientStateMachine.CONNECTING_TIMEOUT_MS); }
@org.junit.Test public void testIncomingPriorityReject() { mHeadsetClientStateMachine.start(); when(mHeadsetClientService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_OFF); com.android.bluetooth.hfpclient.StackEvent connStCh = new com.android.bluetooth.hfpclient.StackEvent(StackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED); connStCh.valueInt = HeadsetClientHalConstants.CONNECTION_STATE_CONNECTED; connStCh.device = mTestDevice; mHeadsetClientStateMachine.sendMessage(StackEvent.STACK_EVENT, connStCh); verify(mHeadsetClientService, never()).sendBroadcast(any(android.content.Intent.class), anyString()); org.junit.Assert.assertThat(mHeadsetClientStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(HeadsetClientStateMachine.Disconnected.class)); }
@java.lang.Override public void enter() { if (com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, ("Enter Connected: " + (getCurrentMessage().what))); } mAudioWbs = false; mCommandedSpeakerVolume = -1; }
@java.lang.Override public void enter() { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, ("Enter Disconnected: " + (getCurrentMessage().what))); mIndicatorNetworkState = HeadsetClientHalConstants.NETWORK_STATE_NOT_AVAILABLE; mIndicatorNetworkType = HeadsetClientHalConstants.SERVICE_TYPE_HOME; mIndicatorNetworkSignal = 0; mIndicatorBatteryLevel = 0; mAudioWbs = false; mOperatorName = null; mSubscriberInfo = null; mQueuedActions = new java.util.LinkedList<android.util.Pair<java.lang.Integer, java.lang.Object>>(); clearPendingAction(); mCurrentDevice = null; mCalls.clear(); mCallsUpdate.clear(); mPeerFeatures = 0; mChldFeatures = 0; removeMessages(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.QUERY_CURRENT_CALLS); }

public com.android.apksig.ApkSigner build() { return new com.android.apksig.ApkSigner(mSignerConfigs, mMinSdkVersion, mV1SigningEnabled, mV2SigningEnabled, mOtherSignersSignaturesPreserved, mCreatedBy, mSignerEngine, mInputApkFile, mInputApkDataSource, mOutputApkFile, mOutputApkDataSink, mOutputApkDataSource); }
public com.android.apksig.DefaultApkSignerEngine build() throws java.security.InvalidKeyException { return new com.android.apksig.DefaultApkSignerEngine(mSignerConfigs, mMinSdkVersion, mV1SigningEnabled, mV2SigningEnabled, mOtherSignersSignaturesPreserved, mCreatedBy); }

static java.util.Map<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm, byte[]> computeContentDigests(java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> digestAlgorithms, com.android.apksig.util.DataSource[] contents) throws java.io.IOException, java.security.DigestException, java.security.NoSuchAlgorithmException { long chunkCountLong = 0; for (com.android.apksig.util.DataSource input : contents) { chunkCountLong += com.android.apksig.internal.apk.v2.V2SchemeSigner.getChunkCount(input.size(), com.android.apksig.internal.apk.v2.V2SchemeSigner.CONTENT_DIGESTED_CHUNK_MAX_SIZE_BYTES); } if (chunkCountLong > (java.lang.Integer.MAX_VALUE)) { throw new java.security.DigestException((("Input too long: " + chunkCountLong) + " chunks")); } int chunkCount = ((int) (chunkCountLong)); com.android.apksig.internal.apk.v2.ContentDigestAlgorithm[] digestAlgorithmsArray = digestAlgorithms.toArray(new com.android.apksig.internal.apk.v2.ContentDigestAlgorithm[digestAlgorithms.size()]); java.security.MessageDigest[] mds = new java.security.MessageDigest[digestAlgorithmsArray.length]; byte[][] digestsOfChunks = new byte[digestAlgorithmsArray.length][]; int[] digestOutputSizes = new int[digestAlgorithmsArray.length]; for (int i = 0; i < (digestAlgorithmsArray.length); i++) { com.android.apksig.internal.apk.v2.ContentDigestAlgorithm digestAlgorithm = digestAlgorithmsArray[i]; int digestOutputSizeBytes = digestAlgorithm.getChunkDigestOutputSizeBytes(); digestOutputSizes[i] = digestOutputSizeBytes; byte[] concatenationOfChunkCountAndChunkDigests = new byte[5 + (chunkCount * digestOutputSizeBytes)]; concatenationOfChunkCountAndChunkDigests[0] = 90; com.android.apksig.internal.apk.v2.V2SchemeSigner.setUnsignedInt32LittleEndian(chunkCount, concatenationOfChunkCountAndChunkDigests, 1); digestsOfChunks[i] = concatenationOfChunkCountAndChunkDigests; java.lang.String jcaAlgorithm = digestAlgorithm.getJcaMessageDigestAlgorithm(); mds[i] = java.security.MessageDigest.getInstance(jcaAlgorithm); } com.android.apksig.internal.util.MessageDigestSink mdSink = new com.android.apksig.internal.util.MessageDigestSink(mds); byte[] chunkContentPrefix = new byte[5]; chunkContentPrefix[0] = ((byte) (165)); int chunkIndex = 0; for (com.android.apksig.util.DataSource input : contents) { long inputOffset = 0; long inputRemaining = input.size(); while (inputRemaining > 0) { int chunkSize = ((int) (java.lang.Math.min(inputRemaining, com.android.apksig.internal.apk.v2.V2SchemeSigner.CONTENT_DIGESTED_CHUNK_MAX_SIZE_BYTES))); com.android.apksig.internal.apk.v2.V2SchemeSigner.setUnsignedInt32LittleEndian(chunkSize, chunkContentPrefix, 1); for (int i = 0; i < (mds.length); i++) { mds[i].update(chunkContentPrefix); } try { input.feed(inputOffset, chunkSize, mdSink); } catch (java.io.IOException e) { throw new java.io.IOException(("Failed to read chunk #" + chunkIndex), e); } for (int i = 0; i < (digestAlgorithmsArray.length); i++) { java.security.MessageDigest md = mds[i]; byte[] concatenationOfChunkCountAndChunkDigests = digestsOfChunks[i]; int expectedDigestSizeBytes = digestOutputSizes[i]; int actualDigestSizeBytes = md.digest(concatenationOfChunkCountAndChunkDigests, (5 + (chunkIndex * expectedDigestSizeBytes)), expectedDigestSizeBytes); if (actualDigestSizeBytes != expectedDigestSizeBytes) { throw new java.lang.RuntimeException(((("Unexpected output size of " + (md.getAlgorithm())) + " digest: ") + actualDigestSizeBytes)); } } inputOffset += chunkSize; inputRemaining -= chunkSize; chunkIndex++; } } java.util.Map<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm, byte[]> result = new java.util.HashMap(digestAlgorithmsArray.length); for (int i = 0; i < (digestAlgorithmsArray.length); i++) { com.android.apksig.internal.apk.v2.ContentDigestAlgorithm digestAlgorithm = digestAlgorithmsArray[i]; byte[] concatenationOfChunkCountAndChunkDigests = digestsOfChunks[i]; java.security.MessageDigest md = mds[i]; byte[] digest = md.digest(concatenationOfChunkCountAndChunkDigests); result.put(digestAlgorithm, digest); } return result; }
private static int compareContentDigestAlgorithm(com.android.apksig.internal.apk.v2.ContentDigestAlgorithm alg1, com.android.apksig.internal.apk.v2.ContentDigestAlgorithm alg2) { switch (alg1) { case CHUNKED_SHA256 : switch (alg2) { case CHUNKED_SHA256 : return 0; case CHUNKED_SHA512 : return -1; default : throw new java.lang.IllegalArgumentException(("Unknown alg2: " + alg2)); } case CHUNKED_SHA512 : switch (alg2) { case CHUNKED_SHA256 : return 1; case CHUNKED_SHA512 : return 0; default : throw new java.lang.IllegalArgumentException(("Unknown alg2: " + alg2)); } default : throw new java.lang.IllegalArgumentException(("Unknown alg1: " + alg1)); } }
@org.junit.Test public void testReconnectOnPartialConnect() { android.bluetooth.BluetoothAdapter inst = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); android.bluetooth.BluetoothDevice device = inst.getRemoteDevice("00:01:02:03:04:05"); com.android.bluetooth.btservice.AdapterService mockAdapterService = mock(com.android.bluetooth.btservice.AdapterService.class); com.android.bluetooth.btservice.ServiceFactory mockServiceFactory = mock(com.android.bluetooth.btservice.ServiceFactory.class); com.android.bluetooth.hfp.HeadsetService mockHeadsetService = mock(com.android.bluetooth.hfp.HeadsetService.class); com.android.bluetooth.a2dp.A2dpService mockA2dpService = mock(com.android.bluetooth.a2dp.A2dpService.class); when(mockServiceFactory.getHeadsetService()).thenReturn(mockHeadsetService); when(mockServiceFactory.getA2dpService()).thenReturn(mockA2dpService); android.bluetooth.BluetoothDevice[] bondedDevices = new android.bluetooth.BluetoothDevice[1]; bondedDevices[0] = device; when(mockAdapterService.getBondedDevices()).thenReturn(bondedDevices); when(mockHeadsetService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mockA2dpService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mockAdapterService.getState()).thenReturn(BluetoothAdapter.STATE_ON); when(mockAdapterService.getMainLooper()).thenReturn(mHandlerThread.getLooper()); when(mockAdapterService.isMock()).thenReturn(true); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mockAdapterService, mockServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, BluetoothProfile.STATE_DISCONNECTED); intent.putExtra(BluetoothProfile.EXTRA_STATE, BluetoothProfile.STATE_CONNECTED); intent.addFlags(Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND); injector.onReceive(null, intent); java.util.ArrayList<android.bluetooth.BluetoothDevice> hsConnectedDevices = new java.util.ArrayList<>(); hsConnectedDevices.add(device); when(mockHeadsetService.getConnectedDevices()).thenReturn(hsConnectedDevices); when(mockA2dpService.getConnectionState(device)).thenReturn(BluetoothProfile.STATE_DISCONNECTED); verify(mockA2dpService, timeout(com.android.bluetooth.btservice.PhonePolicyTest.RETRY_TIMEOUT).times(1)).connect(eq(device)); }
@org.junit.Test public void testProcessInitProfilePriorities() { android.bluetooth.BluetoothAdapter inst = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); android.bluetooth.BluetoothDevice device = inst.getRemoteDevice("00:01:02:03:04:05"); com.android.bluetooth.btservice.AdapterService mockAdapterService = mock(com.android.bluetooth.btservice.AdapterService.class); com.android.bluetooth.btservice.ServiceFactory mockServiceFactory = mock(com.android.bluetooth.btservice.ServiceFactory.class); com.android.bluetooth.hfp.HeadsetService mockHeadsetService = mock(com.android.bluetooth.hfp.HeadsetService.class); com.android.bluetooth.a2dp.A2dpService mockA2dpService = mock(com.android.bluetooth.a2dp.A2dpService.class); when(mockServiceFactory.getHeadsetService()).thenReturn(mockHeadsetService); when(mockHeadsetService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_UNDEFINED); when(mockServiceFactory.getA2dpService()).thenReturn(mockA2dpService); when(mockA2dpService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_UNDEFINED); when(mockAdapterService.getMainLooper()).thenReturn(mHandlerThread.getLooper()); when(mockAdapterService.isMock()).thenReturn(true); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mockAdapterService, mockServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_UUID); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); android.os.ParcelUuid[] uuids = new android.os.ParcelUuid[2]; uuids[0] = android.bluetooth.BluetoothUuid.Handsfree; uuids[1] = android.bluetooth.BluetoothUuid.AudioSink; intent.putExtra(BluetoothDevice.EXTRA_UUID, uuids); injector.onReceive(null, intent); verify(mockHeadsetService, timeout(com.android.bluetooth.btservice.PhonePolicyTest.ASYNC_CALL_TIMEOUT).times(1)).setPriority(eq(device), eq(BluetoothProfile.PRIORITY_ON)); verify(mockA2dpService, timeout(com.android.bluetooth.btservice.PhonePolicyTest.ASYNC_CALL_TIMEOUT).times(1)).setPriority(eq(device), eq(BluetoothProfile.PRIORITY_ON)); }
@org.junit.Test public void testAdapterOnAutoConnect() { android.bluetooth.BluetoothAdapter inst = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); android.bluetooth.BluetoothDevice device = inst.getRemoteDevice("00:01:02:03:04:05"); com.android.bluetooth.btservice.AdapterService mockAdapterService = mock(com.android.bluetooth.btservice.AdapterService.class); com.android.bluetooth.btservice.ServiceFactory mockServiceFactory = mock(com.android.bluetooth.btservice.ServiceFactory.class); com.android.bluetooth.hfp.HeadsetService mockHeadsetService = mock(com.android.bluetooth.hfp.HeadsetService.class); com.android.bluetooth.a2dp.A2dpService mockA2dpService = mock(com.android.bluetooth.a2dp.A2dpService.class); when(mockAdapterService.getState()).thenReturn(BluetoothAdapter.STATE_ON); when(mockAdapterService.isQuietModeEnabled()).thenReturn(false); when(mockServiceFactory.getHeadsetService()).thenReturn(mockHeadsetService); when(mockServiceFactory.getA2dpService()).thenReturn(mockA2dpService); android.bluetooth.BluetoothDevice[] bondedDevices = new android.bluetooth.BluetoothDevice[1]; bondedDevices[0] = device; when(mockAdapterService.getBondedDevices()).thenReturn(bondedDevices); when(mockHeadsetService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mockA2dpService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mockAdapterService.getMainLooper()).thenReturn(mHandlerThread.getLooper()); when(mockAdapterService.isMock()).thenReturn(true); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mockAdapterService, mockServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_STATE_CHANGED); intent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_ON); injector.onReceive(null, intent); verify(mockHeadsetService, timeout(com.android.bluetooth.btservice.PhonePolicyTest.ASYNC_CALL_TIMEOUT).times(1)).connect(eq(device)); verify(mockA2dpService, timeout(com.android.bluetooth.btservice.PhonePolicyTest.ASYNC_CALL_TIMEOUT).times(1)).connect(eq(device)); }

@org.junit.Test public void testNoSupportedUuids() { android.bluetooth.BluetoothAdapter inst = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); android.bluetooth.BluetoothDevice device = inst.getRemoteDevice("00:01:02:03:04:05"); com.android.bluetooth.btservice.AdapterService mockAdapterService = mock(com.android.bluetooth.btservice.AdapterService.class); com.android.bluetooth.btservice.ServiceFactory mockServiceFactory = mock(com.android.bluetooth.btservice.ServiceFactory.class); com.android.bluetooth.hfp.HeadsetService mockHeadsetService = mock(com.android.bluetooth.hfp.HeadsetService.class); com.android.bluetooth.a2dp.A2dpService mockA2dpService = mock(com.android.bluetooth.a2dp.A2dpService.class); when(mockServiceFactory.getHeadsetService()).thenReturn(mockHeadsetService); when(mockHeadsetService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_UNDEFINED); when(mockServiceFactory.getA2dpService()).thenReturn(mockA2dpService); when(mockA2dpService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_UNDEFINED); when(mockAdapterService.getMainLooper()).thenReturn(mHandlerThread.getLooper()); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mockAdapterService, mockServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_UUID); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); injector.onReceive(null, intent); try { java.lang.Thread.sleep(com.android.bluetooth.btservice.PhonePolicyTest.RETRY_TIMEOUT); } catch (java.lang.Exception ex) { } verify(mockHeadsetService, never()).setPriority(eq(device), eq(BluetoothProfile.PRIORITY_ON)); verify(mockA2dpService, never()).setPriority(eq(device), eq(BluetoothProfile.PRIORITY_ON)); }
@org.junit.Test public void testNoReconnectOnNoConnect() { android.bluetooth.BluetoothAdapter inst = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); android.bluetooth.BluetoothDevice device = inst.getRemoteDevice("00:01:02:03:04:05"); com.android.bluetooth.btservice.AdapterService mockAdapterService = mock(com.android.bluetooth.btservice.AdapterService.class); com.android.bluetooth.btservice.ServiceFactory mockServiceFactory = mock(com.android.bluetooth.btservice.ServiceFactory.class); com.android.bluetooth.hfp.HeadsetService mockHeadsetService = mock(com.android.bluetooth.hfp.HeadsetService.class); com.android.bluetooth.a2dp.A2dpService mockA2dpService = mock(com.android.bluetooth.a2dp.A2dpService.class); when(mockServiceFactory.getHeadsetService()).thenReturn(mockHeadsetService); when(mockServiceFactory.getA2dpService()).thenReturn(mockA2dpService); android.bluetooth.BluetoothDevice[] bondedDevices = new android.bluetooth.BluetoothDevice[1]; bondedDevices[0] = device; when(mockAdapterService.getBondedDevices()).thenReturn(bondedDevices); when(mockHeadsetService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mockA2dpService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mockAdapterService.getState()).thenReturn(BluetoothAdapter.STATE_ON); when(mockAdapterService.getMainLooper()).thenReturn(mHandlerThread.getLooper()); when(mockAdapterService.isMock()).thenReturn(true); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mockAdapterService, mockServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, BluetoothProfile.STATE_DISCONNECTED); intent.putExtra(BluetoothProfile.EXTRA_STATE, BluetoothProfile.STATE_CONNECTED); intent.addFlags(Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND); injector.onReceive(null, intent); java.util.ArrayList<android.bluetooth.BluetoothDevice> hsConnectedDevices = new java.util.ArrayList<>(); when(mockHeadsetService.getConnectedDevices()).thenReturn(hsConnectedDevices); when(mockA2dpService.getConnectionState(device)).thenReturn(BluetoothProfile.STATE_DISCONNECTED); try { java.lang.Thread.sleep(com.android.bluetooth.btservice.PhonePolicyTest.RETRY_TIMEOUT); } catch (java.lang.Exception ex) { } verify(mockA2dpService, never()).connect(eq(device)); verify(mockHeadsetService, never()).connect(eq(device)); }

private static android.net.NetworkState buildMobile3gState(java.lang.String subscriberId, boolean isRoaming) { final android.net.NetworkInfo info = new android.net.NetworkInfo(TYPE_MOBILE, android.telephony.TelephonyManager.NETWORK_TYPE_UMTS, null, null); info.setDetailedState(DetailedState.CONNECTED, null, null); info.setRoaming(isRoaming); final android.net.LinkProperties prop = new android.net.LinkProperties(); prop.setInterfaceName(com.android.server.net.NetworkStatsServiceTest.TEST_IFACE); final android.net.NetworkCapabilities capabilities = new android.net.NetworkCapabilities(); return new android.net.NetworkState(info, prop, capabilities, null, subscriberId, null); }

private static android.net.NetworkState buildMobile4gState(java.lang.String iface) { final android.net.NetworkInfo info = new android.net.NetworkInfo(TYPE_WIMAX, 0, null, null); info.setDetailedState(DetailedState.CONNECTED, null, null); final android.net.LinkProperties prop = new android.net.LinkProperties(); prop.setInterfaceName(iface); final android.net.NetworkCapabilities capabilities = new android.net.NetworkCapabilities(); return new android.net.NetworkState(info, prop, capabilities, null, null, null); }
private static android.net.NetworkState buildWifiState(boolean isMetered) { final android.net.NetworkInfo info = new android.net.NetworkInfo(TYPE_WIFI, 0, null, null); info.setDetailedState(DetailedState.CONNECTED, null, null); final android.net.LinkProperties prop = new android.net.LinkProperties(); prop.setInterfaceName(com.android.server.net.NetworkStatsServiceTest.TEST_IFACE); final android.net.NetworkCapabilities capabilities = new android.net.NetworkCapabilities(); if (!isMetered) { capabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_METERED); } return new android.net.NetworkState(info, prop, capabilities, null, null, com.android.server.net.NetworkStatsServiceTest.TEST_SSID); }
public void resetSapProxy() { synchronized(mSapProxyLock) { mSapProxy = null; } }

private static void setDefaultNetworkEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent out, android.net.metrics.DefaultNetworkEvent in) { com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.DefaultNetworkEvent defaultNetworkEvent = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.DefaultNetworkEvent(); defaultNetworkEvent.networkId = com.android.server.connectivity.IpConnectivityEventBuilder.netIdOf(in.netId); defaultNetworkEvent.previousNetworkId = com.android.server.connectivity.IpConnectivityEventBuilder.netIdOf(in.prevNetId); defaultNetworkEvent.transportTypes = in.transportTypes; defaultNetworkEvent.previousNetworkIpSupport = com.android.server.connectivity.IpConnectivityEventBuilder.ipSupportOf(in); out.setDefaultNetworkEvent(defaultNetworkEvent); }
private void logDefaultNetworkEvent(com.android.server.connectivity.NetworkAgentInfo newNai, com.android.server.connectivity.NetworkAgentInfo prevNai) { int newNetid = NETID_UNSET; int prevNetid = NETID_UNSET; int[] transports = new int[0]; boolean hadIPv4 = false; boolean hadIPv6 = false; if (newNai != null) { newNetid = newNai.network.netId; transports = newNai.networkCapabilities.getTransportTypes(); } if (prevNai != null) { prevNetid = prevNai.network.netId; final android.net.LinkProperties lp = prevNai.linkProperties; hadIPv4 = (lp.hasIPv4Address()) && (lp.hasIPv4DefaultRoute()); hadIPv6 = (lp.hasGlobalIPv6Address()) && (lp.hasIPv6DefaultRoute()); } mMetricsLog.log(new android.net.metrics.DefaultNetworkEvent(newNetid, transports, prevNetid, hadIPv4, hadIPv6)); }
private java.lang.String ipSupport() { if ((prevIPv4) && (prevIPv6)) { return "DUAL"; } if (prevIPv6) { return "IPv6"; } if (prevIPv4) { return "IPv4"; } return "NONE"; }
private void cmdList(java.io.FileDescriptor fd, java.io.PrintWriter pw, java.lang.String[] args) { final java.util.ArrayList<android.net.ConnectivityMetricsEvent> events; synchronized(mLock) { events = new java.util.ArrayList(mBuffer); } if (((args.length) > 1) && (args[1].equals("proto"))) { for (com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent ev : com.android.server.connectivity.IpConnectivityEventBuilder.toProto(events)) { pw.print(ev.toString()); } if ((mNetdListener) != null) { mNetdListener.listAsProtos(pw); } return; } for (android.net.ConnectivityMetricsEvent ev : events) { pw.println(ev.toString()); } if ((mNetdListener) != null) { mNetdListener.list(pw); } }

public com.android.server.telecom.tests.BluetoothRouteManagerTest.BluetoothRouteTestParametersBuilder setExpectedListenerUpdate(android.util.Pair<java.lang.Integer, java.lang.Integer> expectedListenerUpdate) { this.expectedListenerUpdate = expectedListenerUpdate; return this; }

@java.lang.Override public void enter() { android.bluetooth.BluetoothDevice erroneouslyConnectedDevice = getBluetoothAudioConnectedDevice(); if (erroneouslyConnectedDevice != null) { android.telecom.Log.w(com.android.server.telecom.bluetooth.BluetoothRouteManager.LOG_TAG, ("Entering AudioOff state but device %s appears to be connected. " + "Disconnecting."), erroneouslyConnectedDevice); disconnectAudio(); } cleanupStatesForDisconnectedDevices(); }


public boolean isBluetoothAudioConnectedOrPending() { com.android.internal.util.IState[] state = new com.android.internal.util.IState[]{ null }; java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1); java.lang.Runnable r = () -> { state[0] = getCurrentState(); latch.countDown(); }; sendMessage(com.android.server.telecom.bluetooth.BluetoothRouteManager.RUN_RUNNABLE, r); try { latch.await(1000, java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.InterruptedException e) { android.telecom.Log.w(com.android.server.telecom.bluetooth.BluetoothRouteManager.LOG_TAG, "isBluetoothAudioConnectedOrPending -- interrupted getting state"); return false; } return ((state[0]) != null) && ((state[0]) != (mAudioOffState)); }
public void test_Apia_jumpForwardOverInternationalDateLine_P12_to_M12() { java.time.zone.ZoneRules test = pacificApia(); java.time.Instant instantBefore = java.time.LocalDate.of(1879, 7, 2).atStartOfDay(java.time.ZoneOffset.UTC).toInstant(); java.time.zone.ZoneOffsetTransition trans = test.nextTransition(instantBefore); assertEquals(trans.getDateTimeBefore(), java.time.LocalDateTime.of(1879, 7, 5, 0, 0)); assertEquals(trans.getDateTimeAfter(), java.time.LocalDateTime.of(1879, 7, 4, 0, 0)); assertEquals(trans.isGap(), false); assertEquals(trans.isOverlap(), true); assertEquals(trans.isValidOffset(java.time.ZoneOffset.ofHoursMinutesSeconds((+12), 33, 4)), true); assertEquals(trans.isValidOffset(java.time.ZoneOffset.ofHoursMinutesSeconds((-11), (-26), (-56))), true); assertEquals(trans.getDuration(), java.time.Duration.ofHours((-24))); assertEquals(trans.getInstant(), java.time.LocalDateTime.of(1879, 7, 4, 0, 0).toInstant(java.time.ZoneOffset.ofHoursMinutesSeconds((-11), (-26), (-56)))); java.time.ZonedDateTime zdt = java.time.ZonedDateTime.of(1879, 7, 4, 23, 0, 0, 0, java.time.ZoneId.of("Pacific/Apia")); assertEquals(zdt.plusHours(2).toLocalDateTime(), java.time.LocalDateTime.of(1879, 7, 4, 1, 0, 0)); }
public static android.net.apf.ApfFilter maybeCreate(android.net.apf.ApfCapabilities apfCapabilities, java.net.NetworkInterface networkInterface, android.net.ip.IpClient.Callback ipClientCallback, boolean multicastFilter, boolean ieee802_3Filter, int[] ethTypeBlackList) { if ((apfCapabilities == null) || (networkInterface == null)) return null; if ((apfCapabilities.apfVersionSupported) == 0) return null; if ((apfCapabilities.maximumApfProgramSize) < 512) { android.util.Log.e(android.net.apf.ApfFilter.TAG, ("Unacceptably small APF limit: " + (apfCapabilities.maximumApfProgramSize))); return null; } if ((apfCapabilities.apfPacketFormat) != (ARPHRD_ETHER)) return null; if (!(new android.net.apf.ApfGenerator().setApfVersion(apfCapabilities.apfVersionSupported))) { android.util.Log.e(android.net.apf.ApfFilter.TAG, ("Unsupported APF version: " + (apfCapabilities.apfVersionSupported))); return null; } return new android.net.apf.ApfFilter(apfCapabilities, networkInterface, ipClientCallback, multicastFilter, ieee802_3Filter, ethTypeBlackList, new android.net.metrics.IpConnectivityLog()); }
public java.lang.String toString() { java.lang.StringBuilder result = new java.lang.StringBuilder(); result.append("{"); boolean first = true; for (java.lang.String fieldName : android.icu.dev.test.format.NumberFormatTestData.fieldOrdering) { try { java.lang.reflect.Field field = getClass().getField(fieldName); java.lang.Object optionalValue = field.get(this); if (optionalValue == null) { continue; } if (!first) { result.append(", "); } first = false; result.append(fieldName); result.append(": "); result.append(optionalValue); } catch (java.lang.NoSuchFieldException e) { throw new java.lang.RuntimeException(e); } catch (java.lang.SecurityException e) { throw new java.lang.RuntimeException(e); } catch (java.lang.IllegalAccessException e) { throw new java.lang.RuntimeException(e); } } result.append("}"); return result.toString(); }
public void setStyle(java.lang.String value) { style = android.icu.dev.test.format.NumberFormatTestData.fromString(android.icu.dev.test.format.NumberFormatTestData.formatStyleMap, value); }
public void setCurrencyUsage(java.lang.String value) { currencyUsage = android.icu.dev.test.format.NumberFormatTestData.fromString(android.icu.dev.test.format.NumberFormatTestData.currencyUsageMap, value); }
public void setField(java.lang.String fieldName, java.lang.String valueString) throws java.lang.NoSuchMethodException { java.lang.reflect.Method m = getClass().getMethod(android.icu.dev.test.format.NumberFormatTestData.fieldToSetter(fieldName), java.lang.String.class); try { m.invoke(this, valueString); } catch (java.lang.IllegalAccessException e) { throw new java.lang.RuntimeException(e); } catch (java.lang.reflect.InvocationTargetException e) { throw new java.lang.RuntimeException(e); } }
public void setPadPosition(java.lang.String value) { padPosition = android.icu.dev.test.format.NumberFormatTestData.fromString(android.icu.dev.test.format.NumberFormatTestData.padPositionMap, value); }
public void clearField(java.lang.String fieldName) throws java.lang.NoSuchMethodException { java.lang.reflect.Method m = getClass().getMethod(android.icu.dev.test.format.NumberFormatTestData.fieldToClearer(fieldName)); try { m.invoke(this); } catch (java.lang.IllegalAccessException e) { throw new java.lang.RuntimeException(e); } catch (java.lang.reflect.InvocationTargetException e) { throw new java.lang.RuntimeException(e); } }
public void setRoundingMode(java.lang.String value) { roundingMode = android.icu.dev.test.format.NumberFormatTestData.fromString(android.icu.dev.test.format.NumberFormatTestData.roundingModeMap, value); }




public static int ioctlInt(java.io.FileDescriptor fd, int cmd, android.util.MutableInt arg) throws android.system.ErrnoException { libcore.util.MutableInt internalArg = new libcore.util.MutableInt(arg.value); try { return Libcore.os.ioctlInt(fd, cmd, internalArg); } finally { arg.value = internalArg.value; } }
@java.lang.Override public void flush() throws java.io.IOException { java.io.FileDescriptor myFd = fd; if (myFd == null) throw new java.io.IOException("socket closed"); android.util.MutableInt pending = new android.util.MutableInt(0); while (true) { try { android.system.Os.ioctlInt(myFd, OsConstants.TIOCOUTQ, pending); } catch (android.system.ErrnoException e) { throw e.rethrowAsIOException(); } if ((pending.value) <= 0) { break; } try { java.lang.Thread.sleep(10); } catch (java.lang.InterruptedException ie) { break; } } }
@java.lang.Override public int available() throws java.io.IOException { java.io.FileDescriptor myFd = fd; if (myFd == null) throw new java.io.IOException("socket closed"); android.util.MutableInt avail = new android.util.MutableInt(0); try { android.system.Os.ioctlInt(myFd, OsConstants.FIONREAD, avail); } catch (android.system.ErrnoException e) { throw e.rethrowAsIOException(); } return avail.value; }

public static long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException { libcore.util.MutableLong internalInOffset = new libcore.util.MutableLong(inOffset.value); try { return Libcore.os.sendfile(outFd, inFd, internalInOffset, byteCount); } finally { inOffset.value = internalInOffset.value; } }
public static int waitpid(int pid, android.util.MutableInt status, int options) throws android.system.ErrnoException { libcore.util.MutableInt internalStatus = new libcore.util.MutableInt(status.value); try { return Libcore.os.waitpid(pid, internalStatus, options); } finally { status.value = internalStatus.value; } }


public java.lang.String getOperatorBrandOverride() { java.lang.String iccId = getIccId(); if (android.text.TextUtils.isEmpty(iccId)) { return null; } android.content.SharedPreferences sp = android.preference.PreferenceManager.getDefaultSharedPreferences(mContext); return sp.getString(((com.android.internal.telephony.uicc.UiccCard.OPERATOR_BRAND_OVERRIDE_PREFIX) + iccId), null); }



public void testNetworkLoggingAndRetrieval() throws java.lang.Exception { mCountDownLatch = new java.util.concurrent.CountDownLatch(1); mCurrentBatchToken = com.android.cts.deviceowner.NetworkLoggingTest.FAKE_BATCH_TOKEN; mGenerateNetworkTraffic = true; final android.content.IntentFilter filterNetworkLogsAvailable = new android.content.IntentFilter(BaseDeviceOwnerTest.ACTION_NETWORK_LOGS_AVAILABLE); android.support.v4.content.LocalBroadcastManager.getInstance(mContext).registerReceiver(mNetworkLogsReceiver, filterNetworkLogsAvailable); for (final java.lang.String url : com.android.cts.deviceowner.NetworkLoggingTest.NOT_LOGGED_URLS_LIST) { connectToWebsite(url); } mDevicePolicyManager.setNetworkLoggingEnabled(getWho(), true); assertTrue(mDevicePolicyManager.isNetworkLoggingEnabled(getWho())); int iterationsDone = 0; while ((mGenerateNetworkTraffic) && (iterationsDone < (com.android.cts.deviceowner.NetworkLoggingTest.MAX_VISITING_WEBPAGES_ITERATIONS))) { for (final java.lang.String url : com.android.cts.deviceowner.NetworkLoggingTest.LOGGED_URLS_LIST) { connectToWebsite(url); } iterationsDone++; } mCountDownLatch.await(3, java.util.concurrent.TimeUnit.MINUTES); android.support.v4.content.LocalBroadcastManager.getInstance(mContext).unregisterReceiver(mNetworkLogsReceiver); if (mGenerateNetworkTraffic) { fail(("Carried out 100 iterations and waited for 3 minutes, but still didn't get" + " DeviceAdminReceiver#onNetworkLogsAvailable() callback")); } final java.util.List<android.app.admin.NetworkEvent> networkEvents = mDevicePolicyManager.retrieveNetworkLogs(getWho(), mCurrentBatchToken); if (networkEvents == null) { fail(("Failed to retrieve batch of network logs with batch token " + (mCurrentBatchToken))); return; } verifyNetworkLogs(networkEvents, iterationsDone); }
private void connectToWebsite(java.lang.String urlString) { java.net.HttpURLConnection urlConnection = null; try { final java.net.URL url = new java.net.URL(("http://" + urlString)); urlConnection = ((java.net.HttpURLConnection) (url.openConnection())); urlConnection.setConnectTimeout(2000); urlConnection.setReadTimeout(2000); urlConnection.getResponseCode(); } catch (java.io.IOException e) { android.util.Log.w(com.android.cts.deviceowner.NetworkLoggingTest.TAG, ("Failed to connect to " + urlString), e); } finally { if (urlConnection != null) { urlConnection.disconnect(); } } }





@java.lang.Override public int getDisplayRule(java.lang.String plmn) { int rule; if ((((mParentApp) != null) && ((mParentApp.getUiccCard()) != null)) && ((mParentApp.getUiccCard().getOperatorBrandOverride()) != null)) { rule = SPN_RULE_SHOW_PLMN; } else if ((android.text.TextUtils.isEmpty(getServiceProviderName())) || ((mSpnDisplayCondition) == (-1))) { rule = SPN_RULE_SHOW_PLMN; } else if (isOnMatchingPlmn(plmn)) { rule = SPN_RULE_SHOW_SPN; if (((mSpnDisplayCondition) & 1) == 1) { rule |= SPN_RULE_SHOW_PLMN; } } else { rule = SPN_RULE_SHOW_PLMN; if (((mSpnDisplayCondition) & 2) == 0) { rule |= SPN_RULE_SHOW_SPN; } } return rule; }




private void handleRilInd(com.android.bluetooth.sap.SapMessage sapMsg) { if (sapMsg == null) return; switch (sapMsg.getMsgType()) { case SapMessage.ID_DISCONNECT_IND : { if (((mState) != (com.android.bluetooth.sap.SapServer.SAP_STATE.DISCONNECTED)) && ((mState) != (com.android.bluetooth.sap.SapServer.SAP_STATE.DISCONNECTING))) { com.android.bluetooth.sap.SapMessage reply = new com.android.bluetooth.sap.SapMessage(SapMessage.ID_DISCONNECT_IND); reply.setDisconnectionType(sapMsg.getDisconnectionType()); sendClientMessage(reply); } else { sendDisconnectInd(sapMsg.getDisconnectionType()); } break; } default : if (com.android.bluetooth.sap.SapServer.DEBUG) android.util.Log.w(com.android.bluetooth.sap.SapServer.TAG_HANDLER, ("Unhandled message - type: " + (com.android.bluetooth.sap.SapMessage.getMsgTypeName(sapMsg.getMsgType())))); } }
public void testOcclude() throws java.lang.Exception { if (!(isHandheld())) { return; } gotoKeyguard(); launchActivity("ShowWhenLockedActivity"); mAmWmState.computeState(mDevice, new java.lang.String[]{ "ShowWhenLockedActivity" }); assertEquals("Picked wrong transition", android.server.cts.WindowManagerState.TRANSIT_KEYGUARD_OCCLUDE, mAmWmState.getWmState().getLastTransition()); }
public void testKeyguardHidesActivity() throws java.lang.Exception { if (!(isHandheld())) { return; } launchActivity("TestActivity"); mAmWmState.computeState(mDevice, new java.lang.String[]{ "TestActivity" }); mAmWmState.assertVisibility("TestActivity", true); gotoKeyguard(); mAmWmState.computeState(mDevice, null); assertShowingAndNotOccluded(); mAmWmState.assertVisibility("TestActivity", false); unlockDevice(); }
public void testUnocclude() throws java.lang.Exception { if (!(isHandheld())) { return; } launchActivity("ShowWhenLockedActivity"); gotoKeyguard(); launchActivity("TestActivity"); mAmWmState.waitForKeyguardShowingAndNotOccluded(mDevice); mAmWmState.computeState(mDevice, null); assertEquals("Picked wrong transition", android.server.cts.WindowManagerState.TRANSIT_KEYGUARD_UNOCCLUDE, mAmWmState.getWmState().getLastTransition()); }
protected void wakeUpDevice() throws com.android.tradefed.device.DeviceNotAvailableException { runCommandAndPrintOutput("input keyevent 224"); }
protected void sleepDevice() throws com.android.tradefed.device.DeviceNotAvailableException { int retriesLeft = 5; runCommandAndPrintOutput("input keyevent 26"); do { if (isDisplayOn()) { android.server.cts.StateLogger.log("***Waiting for display to turn off..."); try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { android.server.cts.StateLogger.log(e.toString()); } } else { break; } } while ((retriesLeft--) > 0 ); }

@java.lang.Override public boolean equals(java.lang.Object obj) { if (obj == null) { return false; } if (!(obj instanceof android.telecom.CallAudioState)) { return false; } android.telecom.CallAudioState state = ((android.telecom.CallAudioState) (obj)); return (((isMuted()) == (state.isMuted())) && ((getRoute()) == (state.getRoute()))) && ((getSupportedRouteMask()) == (state.getSupportedRouteMask())); }
@java.lang.Override public android.telecom.CallAudioState createFromParcel(android.os.Parcel source) { boolean isMuted = ((source.readByte()) == 0) ? false : true; int route = source.readInt(); int supportedRouteMask = source.readInt(); return new android.telecom.CallAudioState(isMuted, route, supportedRouteMask); }


@java.lang.Override public java.lang.String toString() { return java.lang.String.format(java.util.Locale.US, "[AudioState isMuted: %b, route: %s, supportedRouteMask: %s]", isMuted, android.telecom.CallAudioState.audioRouteToString(route), android.telecom.CallAudioState.audioRouteToString(supportedRouteMask)); }
void wakeupEvent(java.lang.String iface, int uid) throws java.lang.Exception { java.lang.String prefix = (NetdEventListenerService.WAKEUP_EVENT_IFACE_PREFIX) + iface; mNetdEventListenerService.onWakeupEvent(prefix, uid, uid, 0); }
@java.lang.Override public java.lang.String toString() { updateDuration(); return new java.lang.StringBuilder().append("WakeupStats(").append(iface).append(", total: ").append(totalWakeups).append(", root: ").append(rootWakeups).append(", system: ").append(systemWakeups).append(", apps: ").append(applicationWakeups).append(", non-apps: ").append(nonApplicationWakeups).append(", no uid: ").append(noUidWakeups).append(", ").append(durationSec).append("s)").toString(); }
void asyncDump(long durationMs) throws java.lang.Exception { final long stop = (java.lang.System.currentTimeMillis()) + durationMs; final java.io.PrintWriter pw = new java.io.PrintWriter(new java.io.FileOutputStream("/dev/null")); new java.lang.Thread(() -> { while ((java.lang.System.currentTimeMillis()) < stop) { mNetdEventListenerService.dump(pw); } }).start(); }
@java.lang.Override public synchronized void onWakeupEvent(java.lang.String prefix, int uid, int gid, long timestampNs) { com.android.server.connectivity.NetdEventListenerService.maybeVerboseLog("onWakeupEvent(%s, %d, %d, %sns)", prefix, uid, gid, timestampNs); java.lang.String iface = prefix.replaceFirst(com.android.server.connectivity.NetdEventListenerService.WAKEUP_EVENT_IFACE_PREFIX, ""); final long timestampMs; if (timestampNs > 0) { timestampMs = timestampNs / (NANOS_PER_MS); } else { timestampMs = java.lang.System.currentTimeMillis(); } addWakeupEvent(iface, timestampMs, uid); }
public static com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent toProto(android.net.metrics.WakeupStats in) { com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.WakeupStats wakeupStats = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.WakeupStats(); in.updateDuration(); wakeupStats.durationSec = in.durationSec; wakeupStats.totalWakeups = in.totalWakeups; wakeupStats.rootWakeups = in.rootWakeups; wakeupStats.systemWakeups = in.systemWakeups; wakeupStats.nonApplicationWakeups = in.nonApplicationWakeups; wakeupStats.applicationWakeups = in.applicationWakeups; wakeupStats.noUidWakeups = in.noUidWakeups; final com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent out = com.android.server.connectivity.IpConnectivityEventBuilder.buildEvent(0, 0, in.iface); out.setWakeupStats(wakeupStats); return out; }
public void countEvent(android.net.metrics.WakeupEvent ev) { (totalWakeups)++; switch (ev.uid) { case ROOT_UID : (rootWakeups)++; break; case SYSTEM_UID : (systemWakeups)++; break; case android.net.metrics.WakeupStats.NO_UID : (noUidWakeups)++; break; default : if ((ev.uid) >= (FIRST_APPLICATION_UID)) { (applicationWakeups)++; } else { (nonApplicationWakeups)++; } break; } }
void wakeupEvent(java.lang.String iface, int uid) throws java.lang.Exception { java.lang.String prefix = (NetdEventListenerService.WAKEUP_EVENT_IFACE_PREFIX) + iface; mNetdListener.onWakeupEvent(prefix, uid, uid, 0); }
@java.lang.Override public java.lang.String toString() { return java.lang.String.format("WakeupEvent(%tT.%tL, %s, uid: %d)", timestampMs, timestampMs, iface, uid); }
private java.io.File createDex(vogar.Action action, java.io.File actionJar) { java.io.File dex = run.localFile(action, "classes.dex"); vogar.Classpath classesToDex = vogar.Classpath.of(actionJar); classesToDex.addAll(run.classpath); if ((run.toolchain) == (vogar.Toolchain.JACK)) { throw new java.lang.UnsupportedOperationException("Jack support for --mode=activity not yet implemented"); } java.io.File localTempDir = run.localDir(action.getName()); vogar.Classpath dependentCp = new vogar.Classpath(); run.androidSdk.dex(run.multidex, dex, localTempDir, classesToDex, dependentCp); return dex; }
private vogar.tasks.Task newCreateDexJarTask(vogar.Classpath classpath, java.io.File classpathElement, java.lang.String name, vogar.Action action, java.io.File localDex, java.io.File localTempDir) { vogar.tasks.Task dex; if ((run.toolchain) == (vogar.Toolchain.JACK)) { dex = new vogar.android.JackDexTask(run, classpath, run.benchmark, name, classpathElement, action, localDex); } else { dex = new vogar.android.DexTask(run.androidSdk, classpath, run.benchmark, name, classpathElement, action, localDex, localTempDir, run.multidex); } return dex; }
@java.lang.Override protected vogar.Result execute() throws java.lang.Exception { vogar.Classpath cp = vogar.Classpath.of(jar); vogar.Classpath dependentCp = classpath; if ((benchmark) && ((action) != null)) { cp.addAll(classpath); dependentCp = new vogar.Classpath(); } androidSdk.dex(multidex, localDex, localTempDir, cp, dependentCp); return vogar.Result.SUCCESS; }
private vogar.tasks.Task createCreateDexJarTask(vogar.Classpath classpath, java.io.File classpathElement, java.lang.String name, vogar.Action action, java.io.File localDex, java.io.File localTempDir) { vogar.tasks.Task dex; if ((run.toolchain) == (vogar.Toolchain.JACK)) { dex = new vogar.android.JackDexTask(run, classpath, run.benchmark, name, classpathElement, action, localDex); } else { dex = new vogar.android.DexTask(run.androidSdk, classpath, run.benchmark, name, classpathElement, action, localDex, localTempDir, run.multidex); } return dex; }
public void dex(boolean multidex, java.io.File output, java.io.File outputTempDir, vogar.Classpath classpath, vogar.Classpath dependentCp) { mkdir.mkdirs(output.getParentFile()); java.lang.String classpathSubKey = dexCache.makeKey(classpath); java.lang.String cacheKey = null; if (classpathSubKey != null) { java.lang.String multidexSubKey = "mdex=" + multidex; cacheKey = dexCache.makeKey(classpathSubKey, multidexSubKey); boolean cacheHit = dexCache.getFromCache(output, cacheKey); if (cacheHit) { log.verbose(("dex cache hit for " + classpath)); return; } } java.util.List<java.lang.String> desugarOutputFilePaths = desugar(outputTempDir, classpath, dependentCp); vogar.commands.Command.Builder builder = new vogar.commands.Command.Builder(log).args("dx").args("-JXms16M").args("-JXmx1536M").args(("--min-sdk-version=" + (language.getMinApiLevel()))); if (multidex) { builder.args("--multi-dex"); } builder.args("--dex").args(("--output=" + output)).args("--core-library").args(desugarOutputFilePaths); builder.execute(); dexCache.insert(cacheKey, output); }

private boolean compareIcuRoundingIncrement(android.icu.text.DecimalFormat other) { java.math.BigDecimal increment = this.icuDecimalFormat.getRoundingIncrement(); if (increment != null) { return ((other.getRoundingIncrement()) != null) && (increment.equals(other.getRoundingIncrement())); } return (other.getRoundingIncrement()) == null; }
@java.lang.Override public java.lang.Object clone() { try { java.text.DecimalFormat other = ((java.text.DecimalFormat) (super.clone())); other.icuDecimalFormat = ((android.icu.text.DecimalFormat) (icuDecimalFormat.clone())); other.symbols = ((java.text.DecimalFormatSymbols) (symbols.clone())); return other; } catch (java.lang.Exception e) { throw new java.lang.InternalError(); } }
private void initPattern(java.lang.String pattern) { this.icuDecimalFormat = new android.icu.text.DecimalFormat(pattern, symbols.getIcuDecimalFormatSymbols()); updateFieldsFromIcu(); }
public com.android.ahat.proguard.ProguardMap.Frame getFrame(java.lang.String clearClassName, java.lang.String obfuscatedMethodName, java.lang.String clearSignature, java.lang.String obfuscatedFilename, int obfuscatedLine) { java.lang.String key = obfuscatedMethodName + clearSignature; com.android.ahat.proguard.ProguardMap.FrameData frame = mFrames.get(key); if (frame == null) { return new com.android.ahat.proguard.ProguardMap.Frame(obfuscatedMethodName, clearSignature, obfuscatedFilename, obfuscatedLine); } return new com.android.ahat.proguard.ProguardMap.Frame(frame.clearMethodName, clearSignature, com.android.ahat.proguard.ProguardMap.getFileName(clearClassName, frame.clearMethodName), (obfuscatedLine - (frame.lineDelta))); }
public java.lang.String getDeviceName(android.bluetooth.BluetoothDevice device) { java.lang.String deviceName; deviceName = com.android.bluetooth.opp.BluetoothOppPreference.getInstance(mContext).getName(device); if ((deviceName == null) && ((mAdapter) != null)) { deviceName = device.getName(); } if (deviceName == null) { deviceName = mContext.getString(R.string.unknown_device); } return deviceName; }

@java.lang.Override protected boolean cleanup() { if ((mConnectionStateChangedReceiver) != null) { unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; } if ((mStateMachine) != null) { mStateMachine.cleanup(); mStateMachine = null; } if ((mAvrcp) != null) { mAvrcp.cleanup(); mAvrcp = null; } com.android.bluetooth.a2dp.A2dpService.clearA2dpService(); return true; }







void destroyLocked() { if (com.android.server.autofill.Helper.sVerbose) android.util.Slog.v(com.android.server.autofill.AutofillManagerServiceImpl.TAG, "destroyLocked()"); final int numSessions = mSessions.size(); final android.util.ArraySet<com.android.server.autofill.RemoteFillService> remoteFillServices = new android.util.ArraySet(numSessions); for (int i = 0; i < numSessions; i++) { final com.android.server.autofill.RemoteFillService remoteFillService = mSessions.valueAt(i).destroyLocked(); if (remoteFillService != null) { remoteFillServices.add(remoteFillService); } } mSessions.clear(); for (int i = 0; i < (remoteFillServices.size()); i++) { remoteFillServices.valueAt(i).destroy(); } sendStateToClients(true); }


@org.junit.Test public void testCreateTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = buildIpSecConfig(); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceTest.DROID_SPI), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceTest.CRYPT_KEY), anyInt(), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceTest.DROID_SPI2), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceTest.CRYPT_KEY), anyInt(), anyInt(), anyInt(), anyInt()); }

private void createNotification(android.content.Context context) { final android.content.res.Resources resources = context.getResources(); android.support.v4.app.NotificationCompat.Builder builder = new android.support.v4.app.NotificationCompat.Builder(context).setSmallIcon(R.drawable.ic_sim_card_alert_white_48dp).setColor(context.getColor(R.color.sim_noitification)).setContentTitle(resources.getString(R.string.sim_notification_title)).setContentText(resources.getString(R.string.sim_notification_summary)); android.content.Intent resultIntent = new android.content.Intent(context, com.android.settings.Settings.SimSettingsActivity.class); resultIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); android.app.PendingIntent resultPendingIntent = android.app.PendingIntent.getActivity(context, 0, resultIntent, PendingIntent.FLAG_CANCEL_CURRENT); builder.setContentIntent(resultPendingIntent); android.app.NotificationManager notificationManager = ((android.app.NotificationManager) (context.getSystemService(Context.NOTIFICATION_SERVICE))); notificationManager.notify(com.android.settings.sim.SimSelectNotification.NOTIFICATION_ID, builder.build()); }




private static java.util.List<com.google.currysrc.api.process.Rule> createTransformRules() { java.util.List<com.google.currysrc.api.process.Rule> rules = com.google.common.collect.Lists.newArrayList(Icu4jTransform.Icu4jRules.getRepackagingRules()); rules.add(com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule(new com.google.currysrc.processors.ReplaceTextCommentScanner(Icu4jTransform.ORIGINAL_ICU_PACKAGE, Icu4jTransform.ANDROID_ICU_PACKAGE))); rules.add(com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule(new com.android.icu4j.srcgen.TranslateJcite.BeginEndTagsHandler())); rules.add(com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule(new com.android.icu4j.srcgen.ShardingAnnotator())); return rules; }
private android.icu.text.DecimalFormat_ICU58 createDecimalFormat(android.icu.dev.test.format.DataDrivenNumberFormatTestData tuple) { android.icu.text.DecimalFormat_ICU58 fmt = new android.icu.text.DecimalFormat_ICU58(((tuple.pattern) == null ? "0" : tuple.pattern), new android.icu.text.DecimalFormatSymbols(((tuple.locale) == null ? android.icu.dev.test.format.NumberFormatDataDrivenTest.EN : tuple.locale))); adjustDecimalFormat(tuple, fmt); return fmt; }
@java.lang.Override public java.lang.String format(android.icu.dev.test.format.DataDrivenNumberFormatTestData tuple) { android.icu.text.DecimalFormat_ICU58 fmt = createDecimalFormat(tuple); java.lang.String actual = fmt.format(android.icu.dev.test.format.NumberFormatDataDrivenTest.toNumber(tuple.format)); java.lang.String expected = tuple.output; if (!(expected.equals(actual))) { return (("Expected " + expected) + ", got ") + actual; } return null; }
@java.lang.Override public java.lang.String parse(android.icu.dev.test.format.DataDrivenNumberFormatTestData tuple) { android.icu.text.DecimalFormat_ICU58 fmt = createDecimalFormat(tuple); java.text.ParsePosition ppos = new java.text.ParsePosition(0); java.lang.Number actual = fmt.parse(tuple.parse, ppos); if ((ppos.getIndex()) == 0) { return (("Parse failed; got " + actual) + ", but expected ") + (tuple.output); } if (tuple.output.equals("fail")) { return null; } java.lang.Number expected = android.icu.dev.test.format.NumberFormatDataDrivenTest.toNumber(tuple.output); if ((((expected.doubleValue()) != (actual.doubleValue())) && (!(java.lang.Double.isNaN(expected.doubleValue())))) && (!(java.lang.Double.isNaN(expected.doubleValue())))) { return (("Expected: " + expected) + ", got: ") + actual; } return null; }
@java.lang.Override public java.lang.String parseCurrency(android.icu.dev.test.format.DataDrivenNumberFormatTestData tuple) { android.icu.text.DecimalFormat_ICU58 fmt = createDecimalFormat(tuple); java.text.ParsePosition ppos = new java.text.ParsePosition(0); CurrencyAmount currAmt = fmt.parseCurrency(tuple.parse, ppos); if ((ppos.getIndex()) == 0) { return (("Parse failed; got " + currAmt) + ", but expected ") + (tuple.output); } if (tuple.output.equals("fail")) { return null; } java.lang.Number expected = android.icu.dev.test.format.NumberFormatDataDrivenTest.toNumber(tuple.output); java.lang.Number actual = currAmt.getNumber(); if ((((expected.doubleValue()) != (actual.doubleValue())) && (!(java.lang.Double.isNaN(expected.doubleValue())))) && (!(java.lang.Double.isNaN(expected.doubleValue())))) { return (("Expected: " + expected) + ", got: ") + actual; } if (!(tuple.outputCurrency.equals(currAmt.getCurrency().toString()))) { return (("Expected currency: " + (tuple.outputCurrency)) + ", got: ") + (currAmt.getCurrency()); } return null; }
@java.lang.Override public java.lang.String toPattern(android.icu.dev.test.format.DataDrivenNumberFormatTestData tuple) { android.icu.text.DecimalFormat_ICU58 fmt = createDecimalFormat(tuple); java.lang.StringBuilder result = new java.lang.StringBuilder(); if ((tuple.toPattern) != null) { java.lang.String expected = tuple.toPattern; java.lang.String actual = fmt.toPattern(); if (!(expected.equals(actual))) { result.append(((("Expected toPattern=" + expected) + ", got ") + actual)); } } if ((tuple.toLocalizedPattern) != null) { java.lang.String expected = tuple.toLocalizedPattern; java.lang.String actual = fmt.toLocalizedPattern(); if (!(expected.equals(actual))) { result.append(((("Expected toLocalizedPattern=" + expected) + ", got ") + actual)); } } return (result.length()) == 0 ? null : result.toString(); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testHexIccId() throws java.lang.Exception { android.telephony.SubscriptionInfo subInfo = new android.telephony.SubscriptionInfo(1, "898600910916", 0, "China Mobile", "CMCC", 0, 255, null, 0, null, 460, 0, "cn"); doReturn(java.util.Arrays.asList(subInfo)).when(mSubscriptionController).getSubInfoUsingSlotIndexWithCheck(eq(com.android.internal.telephony.SubscriptionInfoUpdaterTest.FAKE_SUB_ID_1), anyBoolean(), anyString()); doReturn("898600910916f4078561").when(mIccRecord).getFullIccId(); doReturn(com.android.internal.telephony.SubscriptionInfoUpdaterTest.FAKE_MCC_MNC_1).when(mTelephonyManager).getSimOperatorNumeric(eq(com.android.internal.telephony.SubscriptionInfoUpdaterTest.FAKE_SUB_ID_1)); android.content.Intent intentInternalSimStateChanged = new android.content.Intent(com.android.internal.telephony.uicc.IccCardProxy.ACTION_INTERNAL_SIM_STATE_CHANGED); intentInternalSimStateChanged.putExtra(IccCardConstants.INTENT_KEY_ICC_STATE, IccCardConstants.INTENT_VALUE_ICC_LOADED); intentInternalSimStateChanged.putExtra(PhoneConstants.PHONE_KEY, com.android.internal.telephony.SubscriptionInfoUpdaterTest.FAKE_SUB_ID_1); com.android.internal.telephony.TelephonyTestUtils.waitForMs(100); java.lang.reflect.Field field = com.android.internal.telephony.SubscriptionInfoUpdater.class.getDeclaredField("mInsertSimState"); field.setAccessible(true); int[] mState = ((int[]) (field.get(mUpdater))); assertEquals(SubscriptionInfoUpdater.SIM_NOT_CHANGE, mState[com.android.internal.telephony.SubscriptionInfoUpdaterTest.FAKE_SUB_ID_1]); }
























public void setAudioRouteAllowed(boolean allowed) { mAudioRouteAllowed = allowed; setScoAllowedNative(allowed); }
static com.android.bluetooth.hfp.HeadsetStateMachine make(com.android.bluetooth.hfp.HeadsetService context) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "make"); com.android.bluetooth.hfp.HeadsetStateMachine hssm = new com.android.bluetooth.hfp.HeadsetStateMachine(context); hssm.start(); return hssm; }

















void playDtmfTone(char digit) { if ((mConnectionService) == null) { android.telecom.Log.w(this, "playDtmfTone() request on a call without a connection service."); } else { android.telecom.Log.i(this, "Send playDtmfTone to connection service for call %s", this); mConnectionService.playDtmfTone(this, digit); android.telecom.Log.addEvent(this, LogUtils.Events.START_DTMF, android.telecom.Log.pii(digit)); } }
@java.lang.Override protected android.app.Dialog onCreateDialog(int id, android.os.Bundle bundle) { if (id == (R.id.dialog_cancel_confirmation)) { final java.lang.String message; if ((mType) == (VCardService.TYPE_IMPORT)) { message = getString(R.string.cancel_import_confirmation_message, mDisplayName); } else { message = getString(R.string.cancel_export_confirmation_message, mDisplayName); } final android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(this).setMessage(message).setPositiveButton(android.R.string.ok, new com.android.contacts.vcard.CancelActivity.RequestCancelListener()).setOnCancelListener(mCancelListener).setNegativeButton(android.R.string.cancel, mCancelListener); return builder.create(); } else if (id == (R.id.dialog_cancel_failed)) { final android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(this).setTitle(R.string.cancel_vcard_import_or_export_failed).setIconAttribute(android.R.attr.alertDialogIcon).setMessage(getString(R.string.fail_reason_unknown)).setOnCancelListener(mCancelListener).setPositiveButton(android.R.string.ok, mCancelListener); return builder.create(); } else { android.util.Log.w(LOG_TAG, ("Unknown dialog id: " + id)); return super.onCreateDialog(id, bundle); } }
@com.googlecode.android_scripting.rpc.Rpc(description = "Returns the service state for specified subscription ID") public java.lang.String telephonyGetServiceStateForSubscription(@com.googlecode.android_scripting.rpc.RpcParameter(name = "subId") java.lang.Integer subId) { return null; }
public static void HandlePublish(int type, byte[] data) { java.lang.System.out.println(("Chunk published: " + (art.Test1940.printChunk(new art.Chunk(type, data, 0, data.length))))); }
public com.android.ims.internal.IImsServiceController getImsServiceControllerAndListen(int slotId, int feature, com.android.ims.internal.IImsServiceFeatureListener callback) { if ((((slotId < 0) || (slotId >= (mNumSlots))) || (feature <= (android.telephony.ims.feature.ImsFeature.INVALID))) || (feature >= (android.telephony.ims.feature.ImsFeature.MAX))) { return null; } com.android.internal.telephony.ims.ImsServiceController controller; synchronized(mBoundServicesLock) { android.util.SparseArray<com.android.internal.telephony.ims.ImsServiceController> services = mBoundImsServicesByFeature.get(slotId); if (services == null) { return null; } controller = services.get(feature); } if (controller != null) { controller.addImsServiceFeatureListener(callback); return controller.getImsServiceController(); } return null; }










public java.lang.String StripTelephoneNumber(java.lang.String vCard) { java.lang.String[] attr = vCard.split(java.lang.System.getProperty("line.separator")); java.lang.String Vcard = ""; for (int i = 0; i < (attr.length); i++) { if (attr[i].startsWith("TEL")) { attr[i] = attr[i].replace("(", ""); attr[i] = attr[i].replace(")", ""); attr[i] = attr[i].replace("-", ""); attr[i] = attr[i].replace(" ", ""); } } for (int i = 0; i < (attr.length); i++) { if (!(attr[i].equals(""))) { Vcard = Vcard.concat(((attr[i]) + "\n")); } } if (com.android.bluetooth.pbap.BluetoothPbapVcardManager.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("Vcard with stripped telephone no.: " + Vcard)); return Vcard; }
public static boolean mvnoMatches(com.android.internal.telephony.uicc.IccRecords r, java.lang.String mvnoType, java.lang.String mvnoMatchData) { if (mvnoType.equalsIgnoreCase("spn")) { if (((r.getServiceProviderName()) != null) && (r.getServiceProviderName().equalsIgnoreCase(mvnoMatchData))) { return true; } } else if (mvnoType.equalsIgnoreCase("imsi")) { java.lang.String imsiSIM = r.getIMSI(); if ((imsiSIM != null) && (com.android.internal.telephony.dataconnection.ApnSetting.imsiMatches(mvnoMatchData, imsiSIM))) { return true; } } else if (mvnoType.equalsIgnoreCase("gid")) { java.lang.String gid1 = r.getGid1(); int mvno_match_data_length = mvnoMatchData.length(); if (((gid1 != null) && ((gid1.length()) >= mvno_match_data_length)) && (gid1.substring(0, mvno_match_data_length).equalsIgnoreCase(mvnoMatchData))) { return true; } } return false; }





@java.lang.Override public void onCreate() { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, "onCreate()+"); int i = 0; mContext = getBaseContext(); mSimCount = android.telephony.TelephonyManager.from(mContext).getSimCount(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("simCount: " + (mSimCount))); mStkService = new com.android.internal.telephony.cat.AppInterface[mSimCount]; mStkContext = new com.android.stk.StkAppService.StkContext[mSimCount]; mPowerManager = ((android.os.PowerManager) (getSystemService(Context.POWER_SERVICE))); mStkCmdReceiver = new com.android.stk.StkCmdReceiver(); registerReceiver(mStkCmdReceiver, new android.content.IntentFilter(android.content.Intent.ACTION_SCREEN_OFF)); for (i = 0; i < (mSimCount); i++) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("slotId: " + i)); mStkService[i] = com.android.internal.telephony.cat.CatService.getInstance(i); mStkContext[i] = new com.android.stk.StkAppService.StkContext(); mStkContext[i].mSlotId = i; mStkContext[i].mCmdsQ = new java.util.LinkedList<com.android.stk.StkAppService.DelayedCmd>(); } java.lang.Thread serviceThread = new java.lang.Thread(null, this, "Stk App Service"); serviceThread.start(); mNotificationManager = ((android.app.NotificationManager) (mContext.getSystemService(Context.NOTIFICATION_SERVICE))); com.android.stk.StkAppService.sInstance = this; }
@java.lang.Override public void onDestroy() { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, "onDestroy()"); if ((mStkCmdReceiver) != null) { unregisterReceiver(mStkCmdReceiver); mStkCmdReceiver = null; } mPowerManager = null; waitForLooper(); mServiceLooper.quit(); }



public android.net.NetworkRequest createFromParcel(android.os.Parcel in) { android.net.NetworkCapabilities nc = ((android.net.NetworkCapabilities) (in.readParcelable(null))); int legacyType = in.readInt(); int requestId = in.readInt(); android.net.NetworkRequest.Type type = android.net.NetworkRequest.Type.valueOf(in.readString()); android.net.NetworkRequest result = new android.net.NetworkRequest(nc, legacyType, requestId, type); return result; }
public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeParcelable(networkCapabilities, flags); dest.writeInt(legacyType); dest.writeInt(requestId); dest.writeString(type.name()); }
private com.android.services.telephony.TelephonyConnection createConnectionFor(com.android.internal.telephony.Phone phone, com.android.internal.telephony.Connection originalConnection, boolean isOutgoing, android.telecom.PhoneAccountHandle phoneAccountHandle) { com.android.services.telephony.TelephonyConnection returnConnection = null; int phoneType = phone.getPhoneType(); if (phoneType == (android.telephony.TelephonyManager.PHONE_TYPE_GSM)) { returnConnection = new com.android.services.telephony.GsmConnection(originalConnection); } else if (phoneType == (android.telephony.TelephonyManager.PHONE_TYPE_CDMA)) { boolean allowMute = allowMute(phone); returnConnection = new com.android.services.telephony.CdmaConnection(originalConnection, mEmergencyTonePlayer, allowMute, isOutgoing); } if (returnConnection != null) { returnConnection.addTelephonyConnectionListener(mTelephonyConnectionListener); returnConnection.setVideoPauseSupported(com.android.services.telephony.TelecomAccountRegistry.getInstance(this).isVideoPauseSupported(phoneAccountHandle)); returnConnection.setConferenceSupported(com.android.services.telephony.TelecomAccountRegistry.getInstance(this).isMergeCallSupported(phoneAccountHandle)); } return returnConnection; }

private void updateManageConference() { boolean couldManageConference = can(Connection.CAPABILITY_MANAGE_CONFERENCE); boolean canManageConference = !(mConferenceParticipantConnections.isEmpty()); android.telecom.Log.v(this, "updateManageConference was :%s is:%s", (couldManageConference ? "Y" : "N"), (canManageConference ? "Y" : "N")); if (couldManageConference != canManageConference) { int capabilities = getConnectionCapabilities(); if (canManageConference) { capabilities |= android.telecom.Connection.CAPABILITY_MANAGE_CONFERENCE; capabilities &= ~(android.telecom.Connection.CAPABILITY_CONFERENCE_HAS_NO_CHILDREN); } else { capabilities &= ~(android.telecom.Connection.CAPABILITY_MANAGE_CONFERENCE); capabilities |= android.telecom.Connection.CAPABILITY_CONFERENCE_HAS_NO_CHILDREN; } setConnectionCapabilities(capabilities); } }


private void startConference(com.android.services.telephony.TelephonyConnection connection) { if (Log.VERBOSE) { com.android.services.telephony.Log.v(this, "Start new ImsConference - connection: %s", connection); } com.android.services.telephony.TelephonyConnection conferenceHostConnection = connection.cloneConnection(); com.android.services.telephony.ImsConference conference = new com.android.services.telephony.ImsConference(mConnectionService, conferenceHostConnection); conference.setState(conferenceHostConnection.getState()); conference.addListener(mConferenceListener); conference.updateConferenceParticipantsAfterCreation(); mConnectionService.addConference(conference); connection.removeConnectionListener(mConnectionListener); connection.clearOriginalConnection(); connection.setDisconnected(new android.telecom.DisconnectCause(android.telecom.DisconnectCause.OTHER)); connection.destroy(); mImsConferences.add(conference); }


private void insertMultipleShare() { int count = mUris.size(); java.lang.Long ts = java.lang.System.currentTimeMillis(); for (int i = 0; i < count; i++) { android.net.Uri fileUri = mUris.get(i); android.content.ContentResolver contentResolver = mContext.getContentResolver(); java.lang.String contentType = contentResolver.getType(fileUri); if (com.android.bluetooth.opp.BluetoothOppManager.V) android.util.Log.v(com.android.bluetooth.opp.BluetoothOppManager.TAG, ((("Got mimetype: " + contentType) + " Got uri: ") + fileUri)); if (android.text.TextUtils.isEmpty(contentType)) { contentType = mTypeOfMultipleFiles; } android.content.ContentValues values = new android.content.ContentValues(); values.put(BluetoothShare.URI, fileUri.toString()); values.put(BluetoothShare.MIMETYPE, contentType); values.put(BluetoothShare.DESTINATION, mRemoteDevice.getAddress()); values.put(BluetoothShare.TIMESTAMP, ts); if (mIsHandoverInitiated) { values.put(BluetoothShare.USER_CONFIRMATION, BluetoothShare.USER_CONFIRMATION_HANDOVER_CONFIRMED); } final android.net.Uri contentUri = mContext.getContentResolver().insert(BluetoothShare.CONTENT_URI, values); if (com.android.bluetooth.opp.BluetoothOppManager.V) android.util.Log.v(com.android.bluetooth.opp.BluetoothOppManager.TAG, ((("Insert contentUri: " + contentUri) + " to device: ") + (getDeviceName(mRemoteDevice)))); } }
public void saveSendingFileInfo(java.lang.String mimeType, java.util.ArrayList<android.net.Uri> uris, boolean isHandover) throws java.lang.IllegalArgumentException { synchronized(this) { mMultipleFlag = true; mMimeTypeOfSendingFiles = mimeType; mUrisOfSendingFiles = uris; mIsHandoverInitiated = isHandover; for (android.net.Uri uri : uris) { com.android.bluetooth.opp.BluetoothOppUtility.putSendFileInfo(uri, com.android.bluetooth.opp.BluetoothOppSendFileInfo.generateFileInfo(mContext, uri, mimeType)); } storeApplicationData(); } }
public void saveSendingFileInfo(java.lang.String mimeType, java.lang.String uriString, boolean isHandover) throws java.lang.IllegalArgumentException { synchronized(this) { mMultipleFlag = false; mMimeTypeOfSendingFile = mimeType; mUriOfSendingFile = uriString; mIsHandoverInitiated = isHandover; android.net.Uri uri = android.net.Uri.parse(uriString); com.android.bluetooth.opp.BluetoothOppUtility.putSendFileInfo(uri, com.android.bluetooth.opp.BluetoothOppSendFileInfo.generateFileInfo(mContext, uri, mimeType)); storeApplicationData(); } }
public static int getLength(java.lang.Object array) { if (array instanceof java.lang.Object[]) { return ((java.lang.Object[]) (array)).length; } else if (array instanceof boolean[]) { return ((boolean[]) (array)).length; } else if (array instanceof byte[]) { return ((byte[]) (array)).length; } else if (array instanceof char[]) { return ((char[]) (array)).length; } else if (array instanceof double[]) { return ((double[]) (array)).length; } else if (array instanceof float[]) { return ((float[]) (array)).length; } else if (array instanceof int[]) { return ((int[]) (array)).length; } else if (array instanceof long[]) { return ((long[]) (array)).length; } else if (array instanceof short[]) { return ((short[]) (array)).length; } throw java.lang.reflect.Array.badArray(array); }
public static void setBoolean(java.lang.Object array, int index, boolean value) { if (array instanceof boolean[]) { ((boolean[]) (array))[index] = value; } else { throw java.lang.reflect.Array.badArray(array); } }
private com.android.contacts.list.CustomContactListFilterActivity.AccountSet createAccountSet(java.util.List<com.android.contacts.model.account.AccountInfo> sourceAccounts) { final android.content.Context context = getContext(); final android.content.ContentResolver resolver = context.getContentResolver(); final com.android.contacts.list.CustomContactListFilterActivity.AccountSet accounts = new com.android.contacts.list.CustomContactListFilterActivity.AccountSet(); for (com.android.contacts.model.account.AccountInfo info : sourceAccounts) { final com.android.contacts.model.account.AccountWithDataSet account = info.getAccount(); final com.android.contacts.list.CustomContactListFilterActivity.AccountDisplay accountDisplay = new com.android.contacts.list.CustomContactListFilterActivity.AccountDisplay(resolver, info); final android.net.Uri.Builder groupsUri = Groups.CONTENT_URI.buildUpon().appendQueryParameter(Groups.ACCOUNT_NAME, account.name).appendQueryParameter(Groups.ACCOUNT_TYPE, account.type); if ((account.dataSet) != null) { groupsUri.appendQueryParameter(Groups.DATA_SET, account.dataSet).build(); } final android.database.Cursor cursor = resolver.query(groupsUri.build(), null, null, null, null); if (cursor == null) { continue; } android.content.EntityIterator iterator = ContactsContract.Groups.newEntityIterator(cursor); try { boolean hasGroups = false; while (iterator.hasNext()) { final android.content.ContentValues values = iterator.next().getEntityValues(); final com.android.contacts.list.CustomContactListFilterActivity.GroupDelta group = com.android.contacts.list.CustomContactListFilterActivity.GroupDelta.fromBefore(values); accountDisplay.addGroup(group); hasGroups = true; } accountDisplay.mUngrouped = com.android.contacts.list.CustomContactListFilterActivity.GroupDelta.fromSettings(resolver, account.name, account.type, account.dataSet, hasGroups); accountDisplay.addGroup(accountDisplay.mUngrouped); } finally { iterator.close(); } accounts.add(accountDisplay); } return accounts; }

private void handleCarrierNameOverride() { android.telephony.CarrierConfigManager configLoader = ((android.telephony.CarrierConfigManager) (mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE))); if ((configLoader != null) && (configLoader.getConfig().getBoolean(CarrierConfigManager.KEY_CARRIER_NAME_OVERRIDE_BOOL))) { java.lang.String carrierName = configLoader.getConfig().getString(CarrierConfigManager.KEY_CARRIER_NAME_STRING); setServiceProviderName(carrierName); mTelephonyManager.setSimOperatorNameForPhone(mParentApp.getPhoneId(), carrierName); } else { setSpnFromConfig(getOperatorNumeric()); } }
private void broadcastConnectionState(android.bluetooth.BluetoothDevice device, int newState) { java.lang.Integer prevStateInteger = mInputDevices.get(device); int prevState = (prevStateInteger == null) ? android.bluetooth.BluetoothInputDevice.STATE_DISCONNECTED : prevStateInteger; if (prevState == newState) { android.util.Log.w(com.android.bluetooth.hid.HidService.TAG, ("no state change: " + newState)); return; } mInputDevices.put(device, newState); log(((((("Connection state " + device) + ": ") + prevState) + "->") + newState)); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothInputDevice.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); sendBroadcast(intent, com.android.bluetooth.hid.BLUETOOTH_PERM); }



@java.lang.Override public void onMessageWaitingIndicatorChanged(boolean visible) { if (com.android.phone.CallNotifier.VDBG) log(((("onMessageWaitingIndicatorChanged(): " + (this.mSubId)) + " ") + visible)); mMWIStatus.put(this.mSubId, visible); updatePhoneStateListeners(false); }
public void updatePhoneStateListeners(boolean isRefresh) { java.util.List<android.telephony.SubscriptionInfo> subInfos = mSubscriptionManager.getActiveSubscriptionInfoList(); java.util.List<java.lang.Integer> subIdList = new java.util.ArrayList<java.lang.Integer>(mPhoneStateListeners.keySet()); java.util.Collections.sort(subIdList, new java.util.Comparator<java.lang.Integer>() { public int compare(java.lang.Integer sub1, java.lang.Integer sub2) { int slotId1 = com.android.internal.telephony.SubscriptionController.getInstance().getSlotIndex(sub1); int slotId2 = com.android.internal.telephony.SubscriptionController.getInstance().getSlotIndex(sub2); return slotId1 > slotId2 ? 0 : -1; } }); for (int subIdCounter = (subIdList.size()) - 1; subIdCounter >= 0; subIdCounter--) { int subId = subIdList.get(subIdCounter); if ((subInfos == null) || (!(containsSubId(subInfos, subId)))) { android.util.Log.d(com.android.phone.CallNotifier.LOG_TAG, "updatePhoneStateListeners: Hide the outstanding notifications."); mApplication.notificationMgr.updateMwi(subId, false); mApplication.notificationMgr.updateCfi(subId, false); mTelephonyManager.listen(mPhoneStateListeners.get(subId), PhoneStateListener.LISTEN_NONE); mPhoneStateListeners.remove(subId); } else { android.util.Log.d(com.android.phone.CallNotifier.LOG_TAG, "updatePhoneStateListeners: update CF notifications."); if (mCFIStatus.containsKey(subId)) { mApplication.notificationMgr.updateCfi(subId, mCFIStatus.get(subId)); } if (mMWIStatus.containsKey(subId)) { mApplication.notificationMgr.updateMwi(subId, mMWIStatus.get(subId), isRefresh); } } } if (subInfos == null) { return; } for (int i = 0; i < (subInfos.size()); i++) { int subId = subInfos.get(i).getSubscriptionId(); if (!(mPhoneStateListeners.containsKey(subId))) { com.android.phone.CallNotifier.CallNotifierPhoneStateListener listener = new com.android.phone.CallNotifier.CallNotifierPhoneStateListener(subId); mTelephonyManager.listen(listener, ((android.telephony.PhoneStateListener.LISTEN_MESSAGE_WAITING_INDICATOR) | (android.telephony.PhoneStateListener.LISTEN_CALL_FORWARDING_INDICATOR))); mPhoneStateListeners.put(subId, listener); } } }

private static native void classInitNative();

private synchronized void onApplicationStateChanged(byte[] address, boolean registered) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("onApplicationStateChanged(): registered=" + registered)); } android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.hid.HidDeviceService.MESSAGE_APPLICATION_STATE_CHANGED); msg.obj = address; msg.arg1 = (registered) ? 1 : 0; mHandler.sendMessage(msg); }

synchronized boolean connect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("connect(): device=" + device)); } return connectNative(com.android.bluetooth.Utils.getByteAddress(device)); }
private synchronized void onConnectStateChanged(byte[] address, int state) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ((("onConnectStateChanged(): address=" + (java.util.Arrays.toString(address))) + " state=") + state)); } android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.hid.HidDeviceService.MESSAGE_CONNECT_STATE_CHANGED); msg.obj = address; msg.arg1 = state; mHandler.sendMessage(msg); }
@java.lang.Override protected boolean start() { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "start()"); } initNative(); mNativeAvailable = true; return true; }





private void attemptCleanup() { if (isReadyForTearDown()) { com.android.dialer.common.LogUtil.i("InCallPresenter.attemptCleanup", "Cleaning up"); cleanupSurfaces(); mIsChangingConfigurations = false; if ((mContactInfoCache) != null) { mContactInfoCache.clearCache(); } mContactInfoCache = null; if ((mProximitySensor) != null) { removeListener(mProximitySensor); mProximitySensor.tearDown(); } mProximitySensor = null; if ((mStatusBarNotifier) != null) { removeListener(mStatusBarNotifier); com.android.dialer.enrichedcall.EnrichedCallComponent.get(mContext).getEnrichedCallManager().unregisterStateChangedListener(mStatusBarNotifier); } if (((mExternalCallNotifier) != null) && ((mExternalCallList) != null)) { mExternalCallList.removeExternalCallListener(mExternalCallNotifier); } mStatusBarNotifier = null; if ((mCallList) != null) { mCallList.removeListener(this); mCallList.removeListener(mSpamCallListListener); } mCallList = null; mContext = null; mInCallActivity = null; mManageConferenceActivity = null; mListeners.clear(); mIncomingCallListeners.clear(); mDetailsListeners.clear(); mCanAddCallListeners.clear(); mOrientationListeners.clear(); mInCallEventListeners.clear(); mInCallUiListeners.clear(); if (!(mInCallUiLocks.isEmpty())) { com.android.dialer.common.LogUtil.e("InCallPresenter.attemptCleanup", ("held in call locks: " + (mInCallUiLocks))); mInCallUiLocks.clear(); } com.android.dialer.common.LogUtil.d("InCallPresenter.attemptCleanup", "finished"); } }
@java.lang.Override public void updateCallBarring(int cbType, int action, android.os.Message result, java.lang.String[] barrList) { if (com.android.ims.ImsUt.DBG) { if (barrList != null) { java.lang.String bList = new java.lang.String(); for (int i = 0; i < (barrList.length); i++) { bList.concat(((barrList[i]) + " ")); } log(((((((("updateCallBarring :: Ut=" + (miUt)) + ", cbType=") + cbType) + ", action=") + action) + ", barrList=") + bList)); } else { log(((((("updateCallBarring :: Ut=" + (miUt)) + ", cbType=") + cbType) + ", action=") + action)); } } synchronized(mLockObj) { try { int id = miUt.updateCallBarring(cbType, action, barrList); if (id < 0) { sendFailureReport(result, new com.android.ims.ImsReasonInfo(ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, 0)); return; } mPendingCmds.put(java.lang.Integer.valueOf(id), result); } catch (android.os.RemoteException e) { sendFailureReport(result, new com.android.ims.ImsReasonInfo(ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, 0)); } } }

@java.lang.Override public void queryCallBarring(int cbType, android.os.Message result) { if (com.android.ims.ImsUt.DBG) { log(((("queryCallBarring :: Ut=" + (miUt)) + ", cbType=") + cbType)); } synchronized(mLockObj) { try { int id = miUt.queryCallBarring(cbType); if (id < 0) { sendFailureReport(result, new com.android.ims.ImsReasonInfo(ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, 0)); return; } mPendingCmds.put(java.lang.Integer.valueOf(id), result); } catch (android.os.RemoteException e) { sendFailureReport(result, new com.android.ims.ImsReasonInfo(ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, 0)); } } }








synchronized boolean replyReport(android.bluetooth.BluetoothDevice device, byte type, byte id, byte[] data) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ((((("replyReport(): device=" + device) + " type=") + type) + " id=") + id)); } if (!(checkDevice(device))) { return false; } return replyReportNative(type, id, data); }
synchronized boolean reportError(android.bluetooth.BluetoothDevice device, byte error) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ((("reportError(): device=" + device) + " error=") + error)); } if (!(checkDevice(device))) { return false; } return reportErrorNative(error); }
synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppConfiguration config, android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "registerApp()"); } if ((mAppConfig) != null) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "registerApp: failed because app configuration already exists. "); return false; } mAppConfig = config; mCallback = callback; return registerAppNative(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null ? null : inQos.toArray()), (outQos == null ? null : outQos.toArray())); }
synchronized boolean unregisterApp(android.bluetooth.BluetoothHidDeviceAppConfiguration config) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "unregisterApp()"); } if (config == null) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "unregisterApp: failed. The config in parameter should not be null"); return false; } if (((mAppConfig) == null) || (!(config.equals(mAppConfig)))) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "unregisterApp: failed. The app configuration does not match the record"); return false; } return unregisterAppNative(); }

synchronized boolean connect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("connect(): device=" + device)); } return connectNative(com.android.bluetooth.Utils.getByteAddress(device)); }
synchronized boolean unplug(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("unplug(): device=" + device)); } if (!(checkDevice(device))) { return false; } return unplugNative(); }
synchronized boolean disconnect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("disconnect(): device=" + device)); } if (!(checkDevice(device))) { return false; } return disconnectNative(); }
synchronized boolean sendReport(android.bluetooth.BluetoothDevice device, int id, byte[] data) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ((("sendReport(): device=" + device) + " id=") + id)); } if (!(checkDevice(device))) { return false; } return sendReportNative(id, data); }
public static android.net.MacAddress getRandomAddress() { return android.net.MacAddress.getRandomAddress(android.net.MacAddress.BASE_ANDROID_MAC, new java.util.Random()); }
public static java.lang.String stringAddrFromLongAddr(long addr) { addr = (java.lang.Long.reverseBytes(addr)) >> 16; java.util.StringJoiner j = new java.util.StringJoiner(":"); for (int i = 0; i < (android.net.MacAddress.ETHER_ADDR_LEN); i++) { j.add(java.lang.Integer.toHexString(((byte) (addr)))); addr = addr >> 8; } return j.toString(); }
public static long longAddrFromStringAddr(java.lang.String addr) { if (addr == null) { throw new java.lang.IllegalArgumentException("cannot convert the null String"); } java.lang.String[] parts = addr.split(":"); if ((parts.length) != (android.net.MacAddress.ETHER_ADDR_LEN)) { throw new java.lang.IllegalArgumentException((addr + " was not a valid MAC address")); } long longAddr = 0; int index = android.net.MacAddress.ETHER_ADDR_LEN; while ((index--) > 0) { int x = java.lang.Integer.valueOf(parts[index], 16); if ((x < 0) || (255 < x)) { throw new java.lang.IllegalArgumentException((addr + "was not a valid MAC address")); } longAddr = x + (longAddr << 8); } return longAddr; }
public static android.net.MacAddress.MacAddressType macAddressType(byte[] addr) { if (!(android.net.MacAddress.isMacAddress(addr))) { return null; } return new android.net.MacAddress(addr).addressType(); }
public static long longAddrFromByteAddr(byte[] addr) { if (!(android.net.MacAddress.isMacAddress(addr))) { throw new java.lang.IllegalArgumentException(((java.util.Arrays.toString(addr)) + " was not a valid MAC address")); } long longAddr = 0; for (byte b : addr) { longAddr = (longAddr << 8) + (com.android.internal.util.BitUtils.uint8(b)); } return longAddr; }
@org.junit.Test public void testMacAddrTypes() { android.net.MacAddressTest.AddrTypeTestCase[] testcases = new android.net.MacAddressTest.AddrTypeTestCase[]{ android.net.MacAddressTest.AddrTypeTestCase.of(null), android.net.MacAddressTest.AddrTypeTestCase.of(null, 0), android.net.MacAddressTest.AddrTypeTestCase.of(null, 1, 2, 3, 4, 5), android.net.MacAddressTest.AddrTypeTestCase.of(null, 1, 2, 3, 4, 5, 6, 7), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddressType.UNICAST, 160, 176, 192, 208, 224, 240), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddressType.BROADCAST, 255, 255, 255, 255, 255, 255), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddressType.MULTICAST, 1, 2, 3, 4, 5, 6), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddressType.MULTICAST, 11, 22, 33, 44, 55, 66), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddressType.MULTICAST, 33, 33, 170, 187, 204, 221) }; for (android.net.MacAddressTest.AddrTypeTestCase t : testcases) { android.net.MacAddress.MacAddressType got = android.net.MacAddress.macAddressType(t.addr); java.lang.String msg = java.lang.String.format("expected type of %s to be %s, but got %s", java.util.Arrays.toString(t.addr), t.expected, got); assertEquals(msg, t.expected, got); if (got != null) { assertEquals(got, new android.net.MacAddress(t.addr).addressType()); } } }
public static android.net.MacAddress getRandomAddress(android.net.MacAddress base, java.util.Random r) { long longAddr = (((base.mAddr) & (android.net.MacAddress.OUI_MASK)) | ((android.net.MacAddress.NIC_MASK) & (r.nextLong()))) | (android.net.MacAddress.LOCALLY_ASSIGNED_MASK); return new android.net.MacAddress(longAddr); }
@org.junit.Test public void testMacAddressRandomGeneration() { final int iterations = 1000; final java.lang.String expectedAndroidOui = "da:a1:19"; for (int i = 0; i < iterations; i++) { android.net.MacAddress mac = android.net.MacAddress.getRandomAddress(); java.lang.String stringRepr = mac.toString(); assertTrue((stringRepr + " expected to be a locally assigned address"), mac.isLocallyAssigned()); assertTrue(((stringRepr + " expected to begin with ") + expectedAndroidOui), stringRepr.startsWith(expectedAndroidOui)); } final java.util.Random r = new java.util.Random(); final java.lang.String anotherOui = "24:5f:78"; final java.lang.String expectedLocalOui = "26:5f:78"; final android.net.MacAddress base = new android.net.MacAddress((anotherOui + ":0:0:0")); for (int i = 0; i < iterations; i++) { android.net.MacAddress mac = android.net.MacAddress.getRandomAddress(base, r); java.lang.String stringRepr = mac.toString(); assertTrue((stringRepr + " expected to be a locally assigned address"), mac.isLocallyAssigned()); assertTrue(((stringRepr + " expected to begin with ") + expectedLocalOui), stringRepr.startsWith(expectedLocalOui)); } }
@org.junit.Test public void testConstructorInputValidation() { java.lang.String[] invalidStringAddresses = new java.lang.String[]{ null, "", "abcd", "1:2:3:4:5", "1:2:3:4:5:6:7", "10000:2:3:4:5:6" }; for (java.lang.String s : invalidStringAddresses) { try { android.net.MacAddress mac = new android.net.MacAddress(s); fail(((("new MacAddress(" + s) + ") should have failed, but returned ") + mac)); } catch (java.lang.IllegalArgumentException excepted) { } } byte[][] invalidBytesAddresses = new byte[][]{ null, new byte[]{ }, new byte[]{ 1, 2, 3, 4, 5 }, new byte[]{ 1, 2, 3, 4, 5, 6, 7 } }; for (byte[] b : invalidBytesAddresses) { try { android.net.MacAddress mac = new android.net.MacAddress(b); fail(((("new MacAddress(" + (java.util.Arrays.toString(b))) + ") should have failed, but returned ") + mac)); } catch (java.lang.IllegalArgumentException excepted) { } } }
@org.junit.Test public void testMacAddressConversions() { final int iterations = 10000; for (int i = 0; i < iterations; i++) { android.net.MacAddress mac = android.net.MacAddress.getRandomAddress(); java.lang.String stringRepr = mac.toString(); byte[] bytesRepr = mac.toByteArray(); assertEquals(mac, new android.net.MacAddress(stringRepr)); assertEquals(mac, new android.net.MacAddress(bytesRepr)); } }

int getStackPosition(int stackId) { int wmStackIndex = mWmState.getStackPosition(stackId); int amStackIndex = mAmState.getStackPosition(stackId); assertEquals("Window and activity manager must have the same stack position index", amStackIndex, wmStackIndex); return wmStackIndex; }
int getStackPosition(int stackId) { for (int i = 0; i < (mStacks.size()); i++) { if (stackId == (mStacks.get(i).mStackId)) { return i; } } return -1; }
int getStackPosition(int stackId) { for (int i = 0; i < (mStacks.size()); i++) { if (stackId == (mStacks.get(i).mStackId)) { return i; } } return -1; }
public void testStackListOrderLaunchDockedActivity() throws java.lang.Exception { if (!(supportsSplitScreenMultiWindow())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, "Skipping test: no split multi-window support"); return; } launchActivityInDockStack(android.server.cts.ActivityManagerDockedStackTests.TEST_ACTIVITY_NAME); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDockedStackTests.TEST_ACTIVITY_NAME }); final int homeStackIndex = mAmWmState.getStackPosition(android.server.cts.HOME_STACK_ID); final int recentsStackIndex = mAmWmState.getStackPosition(android.server.cts.RECENTS_STACK_ID); assertTrue("Recents stack should be on top of home stack", (recentsStackIndex < homeStackIndex)); }
@java.lang.Override public void onResume() { super.onResume(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkDialogActivity.LOG_TAG, ((("onResume - mIsResponseSent[" + (mIsResponseSent)) + "], sim id: ") + (mSlotId))); initFromIntent(getIntent()); if ((mTextMsg) == null) { finish(); return; } alertDialogBuilder.setTitle(mTextMsg.title); if (!((mTextMsg.iconSelfExplanatory) && ((mTextMsg.icon) != null))) { alertDialogBuilder.setMessage(mTextMsg.text); } alertDialogBuilder.show(); if ((((com.android.stk.StkApp.calculateDurationInMilis(mTextMsg.duration)) == 0) && (!(mTextMsg.responseNeeded))) && (mTextMsg.userClear)) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkDialogActivity.LOG_TAG, "User should clear text..showing message forever"); return; } appService.setDisplayTextDlgVisibility(true, mSlotId); if ((mTimeoutIntent) != null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkDialogActivity.LOG_TAG, "Pending Alarm! Let it finish counting down..."); } else { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkDialogActivity.LOG_TAG, "No Pending Alarm! OK to start timer..."); startTimeOut(mTextMsg.userClear); } }

@java.lang.Override public void accept(int result) { if (result == (com.android.cts.verifier.notifications.MockListener.MockListener.HINT_HOST_DISABLE_CALL_EFFECTS)) { status = PASS; } else { logFail(); status = FAIL; } next(); }
@java.lang.Override void test() { if ((status) == (READY)) { com.android.cts.verifier.notifications.MockListener.MockListener.setHints(mContext, MockListener.HINT_HOST_DISABLE_CALL_EFFECTS); status = RETEST; } else { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerHints(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.IntegerResultCatcher() { @java.lang.Override public void accept(int result) { if (result == (com.android.cts.verifier.notifications.MockListener.MockListener.HINT_HOST_DISABLE_CALL_EFFECTS)) { status = PASS; } else { logFail(); status = FAIL; } next(); } }); } delay(); }
public void testOptionsMenuKey() { if (!(mActivity.getWindow().hasFeature(Window.FEATURE_OPTIONS_PANEL))) { return; } final boolean[] menuIsVisible = new boolean[]{ false }; mActivity.getActionBar().addOnMenuVisibilityListener(( isVisible) -> menuIsVisible[0] = isVisible); getInstrumentation().sendKeyDownUpSync(KeyEvent.KEYCODE_MENU); getInstrumentation().waitForIdleSync(); assertTrue(menuIsVisible[0]); getInstrumentation().sendKeyDownUpSync(KeyEvent.KEYCODE_MENU); getInstrumentation().waitForIdleSync(); assertFalse(menuIsVisible[0]); }
protected static void savePbapParams(android.content.Context ctx, long primaryCounter, long secondaryCounter, long dbIdentifier, long lastUpdatedTimestamp, long totalFields, long totalSvcFields, long totalContacts) { android.content.SharedPreferences pref = android.preference.PreferenceManager.getDefaultSharedPreferences(ctx); android.content.SharedPreferences.Editor edit = pref.edit(); edit.putLong("primary", primaryCounter); edit.putLong("secondary", secondaryCounter); edit.putLong("dbIdentifier", dbIdentifier); edit.putLong("totalContacts", totalContacts); edit.putLong("lastUpdatedTimestamp", lastUpdatedTimestamp); edit.putLong("totalFields", totalFields); edit.putLong("totalSvcFields", totalSvcFields); edit.apply(); if (com.android.bluetooth.pbap.BluetoothPbapUtils.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG, ((((("Saved Primary:" + primaryCounter) + ", Secondary:") + secondaryCounter) + ", Database Identifier: ") + dbIdentifier)); }
protected static void loadAllContacts(android.content.Context mContext, android.os.Handler mHandler) { if (com.android.bluetooth.pbap.BluetoothPbapUtils.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG, "Loading Contacts ..."); try { java.lang.String[] projection = new java.lang.String[]{ android.provider.ContactsContract.Data.CONTACT_ID, android.provider.ContactsContract.Data.DATA1, android.provider.ContactsContract.Data.MIMETYPE }; int contactCount = 0; if ((contactCount = com.android.bluetooth.pbap.BluetoothPbapUtils.fetchAndSetContacts(mContext, mHandler, projection, null, null, true)) < 0) return; com.android.bluetooth.pbap.BluetoothPbapUtils.totalContacts = contactCount; com.android.bluetooth.pbap.BluetoothPbapUtils.contactsLoaded = true; } catch (java.lang.Exception e) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG, ("Exception occurred in load contacts: " + e)); } }
private void stopObexServerSession() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Pbap Service stopObexServerSession"); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_ACQUIRE_WAKE_LOCK); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_RELEASE_WAKE_LOCK); if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if (((mAdapter) != null) && (mAdapter.isEnabled())) { startSocketListeners(); } setState(BluetoothPbap.STATE_DISCONNECTED); }
@java.lang.Override public void onClose() { if ((mCallback) != null) { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothPbapService.MSG_SERVERSESSION_CLOSE; msg.sendToTarget(); if (com.android.bluetooth.pbap.BluetoothPbapObexServer.D) android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapObexServer.TAG, "onClose(): msg MSG_SERVERSESSION_CLOSE sent out."); } }
@java.lang.Override public void onDisconnect(final javax.obex.HeaderSet req, final javax.obex.HeaderSet resp) { if (com.android.bluetooth.pbap.BluetoothPbapObexServer.D) android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapObexServer.TAG, "onDisconnect(): enter"); if (com.android.bluetooth.pbap.BluetoothPbapObexServer.V) com.android.bluetooth.pbap.BluetoothPbapObexServer.logHeader(req); notifyUpdateWakeLock(); resp.responseCode = javax.obex.ResponseCodes.OBEX_HTTP_OK; if ((mCallback) != null) { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothPbapService.MSG_SESSION_DISCONNECTED; msg.sendToTarget(); if (com.android.bluetooth.pbap.BluetoothPbapObexServer.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapObexServer.TAG, "onDisconnect(): msg MSG_SESSION_DISCONNECTED sent out."); } }
@org.junit.Before public void setup() throws java.lang.Exception { mInstrumentation = android.support.test.InstrumentationRegistry.getInstrumentation(); mContext = mInstrumentation.getTargetContext(); final android.app.Activity activity = mActivityRule.getActivity(); com.android.compatibility.common.util.PollingCheck.waitFor(activity::hasWindowFocus); org.xmlpull.v1.XmlPullParser parser = mContext.getResources().getXml(R.layout.listview_layout); com.android.compatibility.common.util.WidgetTestUtils.beginDocument(parser, "FrameLayout"); mAttributeSet = android.util.Xml.asAttributeSet(parser); mShortAdapter = new android.widget.ArrayAdapter(mContext, android.R.layout.simple_list_item_1, android.widget.cts.AbsListViewTest.SHORT_LIST); mCountriesAdapter = new android.widget.ArrayAdapter(mContext, android.R.layout.simple_list_item_1, android.widget.cts.AbsListViewTest.COUNTRY_LIST); mListView = ((android.widget.ListView) (activity.findViewById(R.id.listview_default))); }
static boolean equals(android.net.IpSecAlgorithm lhs, android.net.IpSecAlgorithm rhs) { if ((lhs == null) || (rhs == null)) return lhs == rhs; return ((lhs.mName.equals(rhs.mName)) && (java.util.Arrays.equals(lhs.mKey, rhs.mKey))) && ((lhs.mTruncLenBits) == (rhs.mTruncLenBits)); }

private static boolean isTruncationLengthValid(java.lang.String algo, int truncLenBits) { switch (algo) { case android.net.IpSecAlgorithm.CRYPT_AES_CBC : return ((truncLenBits == 128) || (truncLenBits == 192)) || (truncLenBits == 256); case android.net.IpSecAlgorithm.AUTH_HMAC_MD5 : return (truncLenBits >= 96) && (truncLenBits <= 128); case android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 : return (truncLenBits >= 96) && (truncLenBits <= 160); case android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 : return (truncLenBits >= 96) && (truncLenBits <= 256); case android.net.IpSecAlgorithm.AUTH_HMAC_SHA384 : return (truncLenBits >= 192) && (truncLenBits <= 384); case android.net.IpSecAlgorithm.AUTH_HMAC_SHA512 : return (truncLenBits >= 256) && (truncLenBits <= 512); case android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM : return ((truncLenBits == 64) || (truncLenBits == 96)) || (truncLenBits == 128); default : return false; } }
@java.lang.Override public void run() { mLogScrollView.fullScroll(View.FOCUS_DOWN); }
@java.lang.Override public void run() { mLogLayout.addView(mView); mLogScrollView.post(new java.lang.Runnable() { @java.lang.Override public void run() { mLogScrollView.fullScroll(View.FOCUS_DOWN); } }); }
public void append() { runOnUiThread(new java.lang.Runnable() { @java.lang.Override public void run() { mLogLayout.addView(mView); mLogScrollView.post(new java.lang.Runnable() { @java.lang.Override public void run() { mLogScrollView.fullScroll(View.FOCUS_DOWN); } }); } }); }
private void calibrateMagnetometer() throws java.lang.InterruptedException { android.hardware.cts.helpers.TestSensorEnvironment environment = new android.hardware.cts.helpers.TestSensorEnvironment(getApplicationContext(), android.hardware.Sensor.TYPE_MAGNETIC_FIELD, android.hardware.SensorManager.SENSOR_DELAY_NORMAL); android.hardware.cts.helpers.TestSensorEventListener listener = new android.hardware.cts.helpers.TestSensorEventListener(environment) { @java.lang.Override public void onSensorChanged(android.hardware.SensorEvent event) { clearText(); float[] values = event.values; com.android.cts.verifier.sensors.SensorTestLogger logger = getTestLogger(); logger.logInstructions(R.string.snsr_mag_calibration_description); logger.logMessage(R.string.snsr_mag_measurement, values[0], values[1], values[2], android.hardware.cts.helpers.SensorCtsHelper.getMagnitude(values)); logger.logInstructions(R.string.snsr_mag_calibration_complete); } }; android.hardware.cts.helpers.TestSensorManager magnetometer = new android.hardware.cts.helpers.TestSensorManager(environment); try { magnetometer.registerListener(listener); waitForUserToContinue(); } finally { magnetometer.unregisterListener(); } }
public void addMoveToEnd(com.android.dx.rop.code.RegisterSpec result, com.android.dx.rop.code.RegisterSpec source) { if ((result.getReg()) == (source.getReg())) { return; } com.android.dx.ssa.NormalSsaInsn lastInsn; lastInsn = ((com.android.dx.ssa.NormalSsaInsn) (insns.get(((insns.size()) - 1)))); if (((lastInsn.getResult()) != null) || ((lastInsn.getSources().size()) > 0)) { for (int i = successors.nextSetBit(0); i >= 0; i = successors.nextSetBit((i + 1))) { com.android.dx.ssa.SsaBasicBlock succ; succ = parent.getBlocks().get(i); succ.addMoveToBeginning(result, source); } } else { com.android.dx.rop.code.RegisterSpecList sources = com.android.dx.rop.code.RegisterSpecList.make(source); com.android.dx.ssa.NormalSsaInsn toAdd = new com.android.dx.ssa.NormalSsaInsn(new com.android.dx.rop.code.PlainInsn(com.android.dx.rop.code.Rops.opMove(result.getType()), com.android.dx.rop.code.SourcePosition.NO_INFO, result, sources), this); insns.add(((insns.size()) - 1), toAdd); (movesFromPhisAtEnd)++; } }



public void testSetStreamVolumeInAlarmsOnlyMode() throws java.lang.Exception { if ((mUseFixedVolume) || (mIsTelevision)) { return; } try { android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_RING, 1, 0); mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 1, 0); setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALARMS); mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 3, 0); assertEquals(3, mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); mAudioManager.setStreamVolume(AudioManager.STREAM_RING, 7, 0); assertEquals(7, mAudioManager.getStreamVolume(AudioManager.STREAM_RING)); } finally { setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL); } }
public void testAccessRingMode() throws java.lang.Exception { android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setRingerMode(android.media.AudioManager.RINGER_MODE_NORMAL); assertEquals(android.media.AudioManager.RINGER_MODE_NORMAL, mAudioManager.getRingerMode()); mAudioManager.setRingerMode(android.media.AudioManager.RINGER_MODE_SILENT); if ((mUseFixedVolume) || (mIsTelevision)) { assertEquals(android.media.AudioManager.RINGER_MODE_NORMAL, mAudioManager.getRingerMode()); } else { assertEquals(android.media.AudioManager.RINGER_MODE_SILENT, mAudioManager.getRingerMode()); } mAudioManager.setRingerMode(android.media.AudioManager.RINGER_MODE_VIBRATE); if ((mUseFixedVolume) || (mIsTelevision)) { assertEquals(android.media.AudioManager.RINGER_MODE_NORMAL, mAudioManager.getRingerMode()); } else { assertEquals((mHasVibrator ? android.media.AudioManager.RINGER_MODE_VIBRATE : android.media.AudioManager.RINGER_MODE_SILENT), mAudioManager.getRingerMode()); } }
public void testSetStreamVolumeInTotalSilenceMode() throws java.lang.Exception { if ((mUseFixedVolume) || (mIsTelevision)) { return; } try { android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_RING, 1, 0); mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 1, 0); setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_NONE); int musicVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC); mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 7, 0); assertEquals(musicVolume, mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); mAudioManager.setStreamVolume(AudioManager.STREAM_RING, 7, 0); assertEquals(7, mAudioManager.getStreamVolume(AudioManager.STREAM_RING)); } finally { setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL); } }
public void testAdjustVolumeInAlarmsOnlyMode() throws java.lang.Exception { if ((mUseFixedVolume) || (mIsTelevision)) { return; } try { android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 1, 0); setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALARMS); int musicVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC); mAudioManager.adjustStreamVolume(AudioManager.STREAM_MUSIC, AudioManager.ADJUST_RAISE, 0); int volumeDelta = getVolumeDelta(mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); assertEquals((musicVolume + volumeDelta), mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); } finally { setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL); } }
public void testAdjustVolumeInTotalSilenceMode() throws java.lang.Exception { if ((mUseFixedVolume) || (mIsTelevision)) { return; } try { android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 1, 0); setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_NONE); int musicVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC); mAudioManager.adjustStreamVolume(AudioManager.STREAM_MUSIC, AudioManager.ADJUST_RAISE, 0); assertEquals(musicVolume, mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); } finally { setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL); } }
public void testMuteDndUnaffectedStreams() throws java.lang.Exception { if ((mUseFixedVolume) || (mIsTelevision)) { return; } int[] streams = new int[]{ android.media.AudioManager.STREAM_VOICE_CALL, android.media.AudioManager.STREAM_MUSIC, android.media.AudioManager.STREAM_ALARM }; int muteAffectedStreams = java.lang.System.getInt(mContext.getContentResolver(), MUTE_STREAMS_AFFECTED, ((((1 << (android.media.AudioManager.STREAM_MUSIC)) | (1 << (android.media.AudioManager.STREAM_RING))) | (1 << (android.media.AudioManager.STREAM_NOTIFICATION))) | (1 << (android.media.AudioManager.STREAM_SYSTEM)))); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setRingerMode(android.media.AudioManager.RINGER_MODE_NORMAL); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), false); for (int stream : streams) { mAudioManager.setStreamVolume(stream, mAudioManager.getStreamMaxVolume(stream), 0); if (((1 << stream) & muteAffectedStreams) == 0) { mAudioManager.adjustStreamVolume(stream, AudioManager.ADJUST_MUTE, 0); assertFalse((("Stream " + stream) + " should not be affected by mute."), mAudioManager.isStreamMute(stream)); mAudioManager.setStreamMute(stream, true); assertFalse((("Stream " + stream) + " should not be affected by mute."), mAudioManager.isStreamMute(stream)); mAudioManager.adjustStreamVolume(stream, AudioManager.ADJUST_TOGGLE_MUTE, 0); assertFalse((("Stream " + stream) + " should not be affected by mute."), mAudioManager.isStreamMute(stream)); continue; } testStreamMuting(stream); } }
public void testVolumeDndAffectedStream() throws java.lang.Exception { if (((mUseFixedVolume) || (mHasVibrator)) || (mIsTelevision)) { return; } android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 7, AudioManager.FLAG_ALLOW_RINGER_MODES); mAudioManager.setRingerMode(AudioManager.RINGER_MODE_NORMAL); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), false); try { mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 0, AudioManager.FLAG_ALLOW_RINGER_MODES); fail("Apps without notification policy access cannot change ringer mode"); } catch (java.lang.SecurityException e) { } mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 1, AudioManager.FLAG_ALLOW_RINGER_MODES); assertEquals("setStreamVolume did not change volume", 1, mAudioManager.getStreamVolume(AudioManager.STREAM_SYSTEM)); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setRingerMode(AudioManager.RINGER_MODE_SILENT); mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 0, AudioManager.FLAG_ALLOW_RINGER_MODES); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), false); try { mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 6, AudioManager.FLAG_ALLOW_RINGER_MODES); fail("Apps without notification policy access cannot change ringer mode"); } catch (java.lang.SecurityException e) { } }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getContext(); android.media.cts.Utils.enableAppOps(mContext.getPackageName(), android.media.cts.AudioManagerTest.APPOPS_OP_STR, getInstrumentation()); mAudioManager = ((android.media.AudioManager) (mContext.getSystemService(Context.AUDIO_SERVICE))); android.os.Vibrator vibrator = ((android.os.Vibrator) (mContext.getSystemService(Context.VIBRATOR_SERVICE))); mNm = ((android.app.NotificationManager) (mContext.getSystemService(Context.NOTIFICATION_SERVICE))); mHasVibrator = (vibrator != null) && (vibrator.hasVibrator()); mUseFixedVolume = mContext.getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier("config_useFixedVolume", "bool", "android")); android.content.pm.PackageManager packageManager = mContext.getPackageManager(); mIsTelevision = (packageManager != null) && ((packageManager.hasSystemFeature(PackageManager.FEATURE_LEANBACK)) || (packageManager.hasSystemFeature(PackageManager.FEATURE_TELEVISION))); }
void doParentChildTest(java.lang.String testCase, android.server.cts.ParentChildTestBase.ParentChildTest t) throws java.lang.Exception { doFullscreenTest(testCase, t); doDockedTest(testCase, t); }
private void playUri(final android.net.Uri uri, long timeToPlayMs, int usage, int contentType) throws java.lang.Exception { android.media.MediaPlayer mp = new android.media.MediaPlayer(); assertNotNull(mp); mp.setDataSource(mContext, uri); mp.setAudioAttributes(new android.media.AudioAttributes.Builder().setUsage(usage).setContentType(contentType).build()); mp.prepare(); mp.start(); java.lang.Thread.sleep(timeToPlayMs); mp.stop(); mp.release(); java.lang.Thread.sleep(timeToPlayMs); assertFalse(mAudioManager.isMusicActive()); }
private void handleSimLocked(int slotId, java.lang.String reason) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM))) { logd((("SIM" + (slotId + 1)) + " hot plug in")); com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = null; } com.android.internal.telephony.uicc.IccFileHandler fileHandler = ((com.android.internal.telephony.SubscriptionInfoUpdater.mPhone[slotId].getIccCard()) == null) ? null : com.android.internal.telephony.SubscriptionInfoUpdater.mPhone[slotId].getIccCard().getIccFileHandler(); if (fileHandler != null) { java.lang.String iccId = com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]; if (iccId == null) { logd("Querying IccId"); fileHandler.loadEFTransparent(IccConstants.EF_ICCID, obtainMessage(com.android.internal.telephony.SubscriptionInfoUpdater.EVENT_SIM_LOCKED_QUERY_ICCID_DONE, new com.android.internal.telephony.SubscriptionInfoUpdater.QueryIccIdUserObj(reason, slotId))); } else { logd(((("NOT Querying IccId its already set sIccid[" + slotId) + "]=") + iccId)); updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED, reason); } } else { logd((("sFh[" + slotId) + "] is null, ignore")); } }

public void testStackFocusSwitchOnTouchEvent() throws java.lang.Exception { if (!(supportsMultiDisplay())) { return; } final android.server.cts.DisplayState newDisplay = new android.server.cts.VirtualDisplayBuilder(this).build(); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY }); mAmWmState.assertFocusedActivity("Focus must be switched back to primary display", android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY); launchActivityOnDisplay(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, newDisplay.mDisplayId); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME }); mAmWmState.assertFocusedActivity("Activity launched on secondary display must be focused", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); final android.server.cts.ActivityManagerDisplayTests.ReportedDisplayMetrics displayMetrics = getDisplayMetrics(); final int width = displayMetrics.getWidth(); final int height = displayMetrics.getHeight(); executeShellCommand(((("input tap " + (width / 2)) + " ") + (height / 2))); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY }); mAmWmState.assertFocusedActivity("Focus must be switched back to primary display", android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY); }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mInitialDisplayMetrics = getDisplayMetrics(); }
@android.platform.test.annotations.Presubmit public void testConsequentLaunchActivity() throws java.lang.Exception { if (!(supportsMultiDisplay())) { return; } final android.server.cts.DisplayState newDisplay = new android.server.cts.VirtualDisplayBuilder(this).build(); launchActivityOnDisplay(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, newDisplay.mDisplayId); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME }); mAmWmState.assertFocusedActivity("Activity launched on secondary display must be focused", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); launchActivity(android.server.cts.LAUNCHING_ACTIVITY); mAmWmState.computeState(mDevice, new java.lang.String[]{ LAUNCHING_ACTIVITY }); mAmWmState.assertFocusedActivity("Launched activity must be focused", android.server.cts.LAUNCHING_ACTIVITY); final int frontStackId = mAmWmState.getAmState().getFrontStackId(android.server.cts.ActivityAndWindowManagersState.DEFAULT_DISPLAY_ID); final android.server.cts.ActivityManagerState.ActivityStack frontStack = mAmWmState.getAmState().getStackById(frontStackId); assertEquals("Launched activity must be resumed in front stack", getActivityComponentName(android.server.cts.LAUNCHING_ACTIVITY), frontStack.mResumedActivity); assertEquals("Front stack must be on primary display", android.server.cts.ActivityAndWindowManagersState.DEFAULT_DISPLAY_ID, frontStack.mDisplayId); }
@android.platform.test.annotations.Presubmit public void testMoveTaskBetweenDisplays() throws java.lang.Exception { if (!(supportsMultiDisplay())) { return; } final android.server.cts.DisplayState newDisplay = new android.server.cts.VirtualDisplayBuilder(this).build(); mAmWmState.assertVisibility(android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY, true); mAmWmState.assertFocusedActivity("Virtual display activity must be focused", android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY); final int defaultDisplayStackId = mAmWmState.getAmState().getFocusedStackId(); android.server.cts.ActivityManagerState.ActivityStack focusedStack = mAmWmState.getAmState().getStackById(defaultDisplayStackId); assertEquals("Focus must remain on primary display", android.server.cts.ActivityAndWindowManagersState.DEFAULT_DISPLAY_ID, focusedStack.mDisplayId); launchActivityOnDisplay(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, newDisplay.mDisplayId); mAmWmState.assertFocusedActivity("Focus must be on secondary display", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); int focusedStackId = mAmWmState.getAmState().getFocusedStackId(); focusedStack = mAmWmState.getAmState().getStackById(focusedStackId); assertEquals("Focused stack must be on secondary display", newDisplay.mDisplayId, focusedStack.mDisplayId); moveActivityToStack(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, defaultDisplayStackId); mAmWmState.waitForFocusedStack(mDevice, defaultDisplayStackId); mAmWmState.assertFocusedActivity("Focus must be on moved activity", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); focusedStackId = mAmWmState.getAmState().getFocusedStackId(); focusedStack = mAmWmState.getAmState().getStackById(focusedStackId); assertEquals("Focus must return to primary display", android.server.cts.ActivityAndWindowManagersState.DEFAULT_DISPLAY_ID, focusedStack.mDisplayId); }

@org.junit.Test public void testSocketResourceTrackerLimitation() throws java.lang.Exception { java.util.List<IpSecUdpEncapResponse> openUdpEncapSockets = new java.util.ArrayList<IpSecUdpEncapResponse>(); for (int i = 0; i < (com.android.server.IpSecServiceTest.MAX_NUM_ENCAP_SOCKETS); i++) { IpSecUdpEncapResponse newUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(newUdpEncapSocket); if ((IpSecManager.Status.OK) != (newUdpEncapSocket.status)) { break; } openUdpEncapSockets.add(newUdpEncapSocket); } assertTrue((((openUdpEncapSockets.size()) > 0) && ((openUdpEncapSockets.size()) < (com.android.server.IpSecServiceTest.MAX_NUM_ENCAP_SOCKETS)))); IpSecUdpEncapResponse extraUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(extraUdpEncapSocket); assertEquals(IpSecManager.Status.RESOURCE_UNAVAILABLE, extraUdpEncapSocket.status); mIpSecService.closeUdpEncapsulationSocket(openUdpEncapSockets.get(0).resourceId); openUdpEncapSockets.get(0).fileDescriptor.close(); openUdpEncapSockets.remove(0); extraUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(extraUdpEncapSocket); assertEquals(IpSecManager.Status.OK, extraUdpEncapSocket.status); openUdpEncapSockets.add(extraUdpEncapSocket); for (IpSecUdpEncapResponse openSocket : openUdpEncapSockets) { mIpSecService.closeUdpEncapsulationSocket(openSocket.resourceId); openSocket.fileDescriptor.close(); } }
private void check_joinSourceSpecific(java.net.InetAddress senderBindAddress, java.net.InetAddress receiverBindAddress, java.net.InetAddress groupAddress, java.net.InetAddress badSenderAddress, java.net.NetworkInterface networkInterface) throws java.lang.Exception { java.nio.channels.DatagramChannel sendingChannel = java.nio.channels.DatagramChannel.open(); sendingChannel.bind(new java.net.InetSocketAddress(senderBindAddress, 0)); java.net.InetSocketAddress sendingAddress = ((java.net.InetSocketAddress) (sendingChannel.getLocalAddress())); java.nio.channels.DatagramChannel receivingChannel = java.nio.channels.DatagramChannel.open(); receivingChannel.bind(new java.net.InetSocketAddress(receiverBindAddress, 0)); libcore.java.nio.channels.DatagramChannelMulticastTest.configureChannelForReceiving(receivingChannel); java.net.InetSocketAddress localReceivingAddress = ((java.net.InetSocketAddress) (receivingChannel.getLocalAddress())); java.net.InetSocketAddress groupSocketAddress = new java.net.InetSocketAddress(groupAddress, localReceivingAddress.getPort()); java.nio.channels.MembershipKey membershipKey1 = receivingChannel.join(groupSocketAddress.getAddress(), networkInterface, senderBindAddress); java.nio.ByteBuffer receiveBuffer = java.nio.ByteBuffer.allocate(10); java.lang.String msg1 = "Hello1"; libcore.java.nio.channels.DatagramChannelMulticastTest.sendMessage(sendingChannel, msg1, groupSocketAddress); java.net.InetSocketAddress sourceAddress1 = ((java.net.InetSocketAddress) (receivingChannel.receive(receiveBuffer))); assertEquals(sourceAddress1, sendingAddress); assertEquals(msg1, new java.lang.String(receiveBuffer.array(), 0, receiveBuffer.position())); membershipKey1.drop(); receivingChannel.join(groupSocketAddress.getAddress(), networkInterface, badSenderAddress); java.lang.String msg2 = "Hello2"; libcore.java.nio.channels.DatagramChannelMulticastTest.sendMessage(sendingChannel, msg2, groupSocketAddress); java.net.InetSocketAddress sourceAddress2 = ((java.net.InetSocketAddress) (receivingChannel.receive(receiveBuffer))); assertNull(sourceAddress2); receivingChannel.close(); sendingChannel.close(); }
private static void sendMulticastMessage(java.net.InetAddress group, int port, java.lang.String msg, java.net.NetworkInterface sendingInterface) throws java.io.IOException { java.nio.channels.DatagramChannel dc = java.nio.channels.DatagramChannel.open(); if (sendingInterface != null) { dc.setOption(java.net.StandardSocketOptions.IP_MULTICAST_IF, sendingInterface); } libcore.java.nio.channels.DatagramChannelMulticastTest.sendMessage(dc, msg, new java.net.InetSocketAddress(group, port)); dc.close(); }




@java.lang.Override public void onResume() { super.onResume(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ((("onResume, slot id: " + (mSlotId)) + ",") + (mState))); appService.indicateMenuVisibility(true, mSlotId); if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { mStkMenu = appService.getMainMenu(mSlotId); } else { mStkMenu = appService.getMenu(mSlotId); } if ((mStkMenu) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "menu is null"); cancelTimeOut(); finish(); return; } if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "set main menu instance."); appService.getStkContext(mSlotId).setMainActivityInstance(this); } displayMenu(); startTimeOut(); if (!(mAcceptUsersInput)) { mAcceptUsersInput = true; } invalidateOptionsMenu(); mProgressView.setIndeterminate(false); mProgressView.setVisibility(View.GONE); }
@java.lang.Override public void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "onCreate"); requestWindowFeature(Window.FEATURE_NO_TITLE); setContentView(R.layout.stk_menu_list); mInstance = this; mTitleTextView = ((android.widget.TextView) (findViewById(R.id.title_text))); mTitleIconView = ((android.widget.ImageView) (findViewById(R.id.title_icon))); mProgressView = ((android.widget.ProgressBar) (findViewById(R.id.progress_bar))); mContext = getBaseContext(); mAcceptUsersInput = true; getListView().setOnCreateContextMenuListener(this); initFromIntent(getIntent()); }
@java.lang.Override public boolean onOptionsItemSelected(android.view.MenuItem item) { if (!(mAcceptUsersInput)) { return true; } switch (item.getItemId()) { case StkApp.MENU_ID_END_SESSION : cancelTimeOut(); mAcceptUsersInput = false; sendResponse(StkAppService.RES_ID_END_SESSION); cancelTimeOut(); finish(); return true; case StkApp.MENU_ID_HELP : cancelTimeOut(); mAcceptUsersInput = false; int position = getSelectedItemPosition(); com.android.internal.telephony.cat.Item stkItem = getSelectedItem(position); if (stkItem == null) { break; } sendResponse(StkAppService.RES_ID_MENU_SELECTION, stkItem.id, true); return true; } return super.onOptionsItemSelected(item); }
@java.lang.Override protected void onListItemClick(android.widget.ListView l, android.view.View v, int position, long id) { super.onListItemClick(l, v, position, id); if (!(mAcceptUsersInput)) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "mAcceptUsersInput:false"); return; } com.android.internal.telephony.cat.Item item = getSelectedItem(position); if (item == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "Item is null"); return; } com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ((("onListItemClick Id: " + (item.id)) + ", mState: ") + (mState))); if ((mState) == (com.android.stk.StkMenuActivity.STATE_SECONDARY)) { appService.getStkContext(mSlotId).setPendingActivityInstance(this); } cancelTimeOut(); sendResponse(StkAppService.RES_ID_MENU_SELECTION, item.id, false); mAcceptUsersInput = false; mProgressView.setVisibility(View.VISIBLE); mProgressView.setIndeterminate(true); }
@java.lang.Override public void onPause() { super.onPause(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ((("onPause, slot id: " + (mSlotId)) + ",") + (mState))); if ((appService) != null) { appService.indicateMenuVisibility(false, mSlotId); } else { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "onPause: null appService."); } }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getContext(); android.media.cts.Utils.enableAppOps(mContext.getPackageName(), android.media.cts.AudioManagerTest.APPOPS_OP_STR, getInstrumentation()); mAudioManager = ((android.media.AudioManager) (mContext.getSystemService(Context.AUDIO_SERVICE))); android.os.Vibrator vibrator = ((android.os.Vibrator) (mContext.getSystemService(Context.VIBRATOR_SERVICE))); mNm = ((android.app.NotificationManager) (mContext.getSystemService(Context.NOTIFICATION_SERVICE))); mHasVibrator = (vibrator != null) && (vibrator.hasVibrator()); mUseFixedVolume = mContext.getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier("config_useFixedVolume", "bool", "android")); android.content.pm.PackageManager packageManager = mContext.getPackageManager(); mIsTelevision = (packageManager != null) && ((packageManager.hasSystemFeature(PackageManager.FEATURE_LEANBACK)) || (packageManager.hasSystemFeature(PackageManager.FEATURE_TELEVISION))); }






public void dispose() { if (com.android.internal.telephony.imsphone.ImsPhoneCallTracker.DBG) log("dispose"); mRingingCall.dispose(); mBackgroundCall.dispose(); mForegroundCall.dispose(); mHandoverCall.dispose(); clearDisconnected(); mPhone.getContext().unregisterReceiver(mReceiver); mPhone.getDefaultPhone().unregisterForDataEnabledChanged(this); removeMessages(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.EVENT_GET_IMS_SERVICE); }
private void startListeningForCalls() throws com.android.ims.ImsException { mImsServiceRetryCount = 0; mServiceId = mImsManager.open(ImsServiceClass.MMTEL, createIncomingCallPendingIntent(), mImsConnectionStateListener); mImsManager.setImsConfigListener(mImsConfigListener); getEcbmInterface().setEcbmStateListener(mPhone.getImsEcbmStateListener()); if (mPhone.isInEcm()) { mPhone.exitEmergencyCallbackMode(); } int mPreferredTtyMode = Settings.Secure.getInt(mPhone.getContext().getContentResolver(), Settings.Secure.PREFERRED_TTY_MODE, Phone.TTY_MODE_OFF); mImsManager.setUiTTYMode(mPhone.getContext(), mPreferredTtyMode, null); com.android.ims.ImsMultiEndpoint multiEndpoint = getMultiEndpointInterface(); if (multiEndpoint != null) { multiEndpoint.setExternalCallStateListener(mPhone.getExternalCallTracker().getExternalCallStateListener()); } if (mCarrierConfigLoaded) { com.android.ims.ImsManager.updateImsServiceConfig(mPhone.getContext(), mPhone.getPhoneId(), true); } }














@org.junit.After public void tearDown() { mHidDeviceService.stop(); mHidDeviceService.cleanup(); mHidDeviceService = null; reset(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface); }
@org.junit.Test public void testRegisterApp() throws java.lang.Exception { doReturn(true).when(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).registerApp(anyString(), anyString(), anyString(), anyByte(), any(byte[].class), isNull(), isNull()); verify(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface, never()).registerApp(anyString(), anyString(), anyString(), anyByte(), any(byte[].class), isNull(), isNull()); org.junit.Assert.assertTrue(mHidDeviceService.registerApp(mSettings, null, null, null)); verify(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).registerApp(anyString(), anyString(), anyString(), anyByte(), any(byte[].class), isNull(), isNull()); }
@org.junit.Test public void testSendReport() throws java.lang.Exception { doReturn(true).when(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).sendReport(anyInt(), any(byte[].class)); org.junit.Assert.assertEquals(false, mHidDeviceService.sendReport(mTestDevice, 0, com.android.bluetooth.hid.HidDeviceTest.SAMPLE_OUTGOING_HID_REPORT)); doReturn(true).when(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).registerApp(anyString(), anyString(), anyString(), anyByte(), any(byte[].class), isNull(), isNull()); mHidDeviceService.registerApp(mSettings, null, null, null); mHidDeviceService.onApplicationStateChangedFromNative(mTestDevice, true); java.lang.Thread.sleep(com.android.bluetooth.hid.HidDeviceTest.TIMEOUT_MS); org.junit.Assert.assertEquals(true, mHidDeviceService.sendReport(mTestDevice, 0, com.android.bluetooth.hid.HidDeviceTest.SAMPLE_OUTGOING_HID_REPORT)); verify(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).sendReport(anyInt(), eq(com.android.bluetooth.hid.HidDeviceTest.SAMPLE_OUTGOING_HID_REPORT)); }
private static void addFileWithFootersToDropBox(android.os.DropBoxManager db, java.util.HashMap<java.lang.String, java.lang.Long> timestamps, java.lang.String headers, java.lang.String footers, java.lang.String filename, int maxSize, java.lang.String tag) throws java.io.IOException { if ((db == null) || (!(db.isTagEnabled(tag)))) return; java.io.File file = new java.io.File(filename); long fileTime = file.lastModified(); if (fileTime <= 0) return; if ((timestamps.containsKey(filename)) && ((timestamps.get(filename)) == fileTime)) { return; } timestamps.put(filename, fileTime); android.util.Slog.i(com.android.server.BootReceiver.TAG, (((("Copying " + filename) + " to DropBox (") + tag) + ")")); db.addText(tag, ((headers + (android.os.FileUtils.readTextFile(file, maxSize, "[[TRUNCATED]]\n"))) + footers)); }
public void test_23831() throws java.lang.Exception { byte[] bytes = new byte[]{ ((byte) (245)), ((byte) (169)), ((byte) (234)), ((byte) (33)) }; java.lang.String expected = "\ufffd\ufffd!"; java.nio.charset.CharsetDecoder decoder = java.nio.charset.Charset.forName("UTF-8").newDecoder(); decoder.onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE); assertEquals(expected, decoder.decode(java.nio.ByteBuffer.wrap(bytes)).toString()); assertEquals(expected, new java.lang.String(bytes, "UTF-8")); }
@java.lang.Override public void onResume() { super.onResume(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ((("onResume, slot id: " + (mSlotId)) + ",") + (mState))); appService.indicateMenuVisibility(true, mSlotId); if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { mStkMenu = appService.getMainMenu(mSlotId); } else { mStkMenu = appService.getMenu(mSlotId); } if ((mStkMenu) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "menu is null"); cancelTimeOut(); finish(); return; } if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "set main menu instance."); appService.getStkContext(mSlotId).setMainActivityInstance(this); } displayMenu(); startTimeOut(); if (!(mAcceptUsersInput)) { mAcceptUsersInput = true; } invalidateOptionsMenu(); mProgressView.setIndeterminate(false); mProgressView.setVisibility(View.GONE); }
@java.lang.Override public boolean onKeyDown(int keyCode, android.view.KeyEvent event) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ("mAcceptUsersInput: " + (mAcceptUsersInput))); if (!(mAcceptUsersInput)) { return true; } switch (keyCode) { case android.view.KeyEvent.KEYCODE_BACK : com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, (("KEYCODE_BACK - mState[" + (mState)) + "]")); switch (mState) { case com.android.stk.StkMenuActivity.STATE_SECONDARY : com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "STATE_SECONDARY"); cancelTimeOut(); mAcceptUsersInput = false; appService.getStkContext(mSlotId).setPendingActivityInstance(this); sendResponse(StkAppService.RES_ID_BACKWARD); return true; case com.android.stk.StkMenuActivity.STATE_MAIN : com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "STATE_MAIN"); appService.getStkContext(mSlotId).setMainActivityInstance(null); cancelTimeOut(); finish(); return true; } break; } return super.onKeyDown(keyCode, event); }
@java.lang.Override public void onDestroy() { getListView().setOnCreateContextMenuListener(null); super.onDestroy(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, (("onDestroy" + ",") + (mState))); if ((((mState) == (com.android.stk.StkMenuActivity.STATE_SECONDARY)) && (!(mIsResponseSent))) && (!(appService.isMenuPending(mSlotId)))) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "handleDestroy - Send End Session"); sendResponse(StkAppService.RES_ID_END_SESSION); } if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { if ((appService) != null) { appService.getStkContext(mSlotId).setMainActivityInstance(null); } else { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "onDestroy: null appService."); } } }
public void setActionBarTitle(android.app.ActionBar actionBar, android.content.res.Resources res, int resId) { if ((actionBar == null) || (android.text.TextUtils.isEmpty(com.android.phone.SubscriptionInfoHelper.mSubLabel))) { return; } if (!(android.telephony.TelephonyManager.from(com.android.phone.SubscriptionInfoHelper.mContext).isMultiSimEnabled())) { return; } java.lang.String title = java.lang.String.format(res.getString(resId), com.android.phone.SubscriptionInfoHelper.mSubLabel); actionBar.setTitle(title); }
public com.android.internal.telephony.Phone getPhone() { return hasSubId() ? com.android.internal.telephony.PhoneFactory.getPhone(android.telephony.SubscriptionManager.getPhoneId(com.android.phone.SubscriptionInfoHelper.mSubId)) : com.android.phone.PhoneGlobals.getPhone(); }
public android.content.Intent getIntent(java.lang.Class newActivityClass) { android.content.Intent intent = new android.content.Intent(com.android.phone.SubscriptionInfoHelper.mContext, newActivityClass); if (hasSubId()) { intent.putExtra(com.android.phone.SubscriptionInfoHelper.SUB_ID_EXTRA, com.android.phone.SubscriptionInfoHelper.mSubId); } if (!(android.text.TextUtils.isEmpty(com.android.phone.SubscriptionInfoHelper.mSubLabel))) { intent.putExtra(com.android.phone.SubscriptionInfoHelper.SUB_LABEL_EXTRA, com.android.phone.SubscriptionInfoHelper.mSubLabel); } return intent; }
public boolean hasSubId() { return (com.android.phone.SubscriptionInfoHelper.mSubId) != (com.android.phone.SubscriptionInfoHelper.NO_SUB_ID); }
public int getSubId() { return com.android.phone.SubscriptionInfoHelper.mSubId; }
@java.lang.Override public boolean processMessage(android.os.Message msg) { android.util.Log.d(com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.SetBrowsedPlayer.STATE_TAG, ("processMessage " + msg)); switch (msg.what) { case com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.MESSAGE_PROCESS_SET_BROWSED_PLAYER : android.util.Log.d(com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.SetBrowsedPlayer.STATE_TAG, ("player depth " + (msg.arg2))); mBrowseDepth = msg.arg2; if (((mBrowseDepth) == 0) && ((msg.arg1) == 0)) { broadcastFolderList(mID, com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.EMPTY_MEDIA_ITEM_LIST); transitionTo(mConnected); } else { mMoveToRoot.setFolder(mID); transitionTo(mMoveToRoot); } mBrowseTree.setCurrentBrowsedFolder(mID); mBrowseTree.setCurrentBrowsedPlayer(mID); break; case com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.MESSAGE_INTERNAL_CMD_TIMEOUT : broadcastFolderList(mID, com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.EMPTY_MEDIA_ITEM_LIST); transitionTo(mConnected); break; default : android.util.Log.d(com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.SetBrowsedPlayer.STATE_TAG, (("deferring message " + msg) + " to connected!")); deferMessage(msg); } return true; }

public static void ensureCompiledCallThroughEntrypoint(boolean call) { int count = 0; while (!(Main.hasJitCompiledEntrypoint(Main.class, "callThrough"))) { int limit = (call) ? 1 << (java.lang.Math.min(count, 12)) : 0; for (int i = 0; i < limit; ++i) { Main.callThrough(Main.class, "doNothing"); } try { java.lang.Thread.sleep(100); } catch (java.lang.Exception e) { } if ((++count) == 50) { throw new java.lang.Error("TIMEOUT"); } } }
public int getState() { if (android.bluetooth.BluetoothPbap.VDBG) android.bluetooth.BluetoothPbap.log("getState()"); final android.bluetooth.IBluetoothPbap service = mService; if (service != null) { try { return service.getState(); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothPbap.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothPbap.TAG, "Proxy not attached to service"); if (android.bluetooth.BluetoothPbap.DBG) android.bluetooth.BluetoothPbap.log(android.util.Log.getStackTraceString(new java.lang.Throwable())); } return BluetoothProfile.STATE_DISCONNECTED; }
protected void disconnect() { synchronized(this) { if ((mState) == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); setState(BluetoothProfile.STATE_DISCONNECTED, BluetoothPbap.RESULT_CANCELED); } } }
protected android.bluetooth.BluetoothDevice getRemoteDevice() { return mRemoteDevice; }
public boolean disconnect() { if (android.bluetooth.BluetoothPbap.DBG) android.bluetooth.BluetoothPbap.log("disconnect()"); final android.bluetooth.IBluetoothPbap service = mService; if (service != null) { try { service.disconnect(); return true; } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothPbap.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothPbap.TAG, "Proxy not attached to service"); if (android.bluetooth.BluetoothPbap.DBG) android.bluetooth.BluetoothPbap.log(android.util.Log.getStackTraceString(new java.lang.Throwable())); } return false; }
@java.lang.Override public int getState() { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("getState = " + (mService.getState()))); } com.android.bluetooth.pbap.BluetoothPbapService service = getService(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM); if (service == null) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } return service.getState(); }
@java.lang.Override public boolean isConnected(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("isConnected " + device)); } com.android.bluetooth.pbap.BluetoothPbapService service = getService(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM); if (service == null) { return false; } return ((service.getState()) == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (service.getRemoteDevice().equals(device)); }
public android.bluetooth.BluetoothDevice getClient() { if (android.bluetooth.BluetoothPbap.VDBG) android.bluetooth.BluetoothPbap.log("getClient()"); final android.bluetooth.IBluetoothPbap service = mService; if (service != null) { try { return service.getClient(); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothPbap.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothPbap.TAG, "Proxy not attached to service"); if (android.bluetooth.BluetoothPbap.DBG) android.bluetooth.BluetoothPbap.log(android.util.Log.getStackTraceString(new java.lang.Throwable())); } return null; }
public void onServiceConnected(android.content.ComponentName className, android.os.IBinder service) { if (android.bluetooth.BluetoothPbap.DBG) android.bluetooth.BluetoothPbap.log("Proxy object connected"); mService = IBluetoothPbap.Stub.asInterface(service); if ((mServiceListener) != null) { mServiceListener.onServiceConnected(this); } }

@java.lang.Override public android.bluetooth.BluetoothDevice getClient() { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("getClient = " + (mService.getRemoteDevice()))); } com.android.bluetooth.pbap.BluetoothPbapService service = getService(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM); if (service == null) { return null; } return service.getRemoteDevice(); }

protected int getState() { return mState; }
public void onServiceDisconnected(android.content.ComponentName className) { if (android.bluetooth.BluetoothPbap.DBG) android.bluetooth.BluetoothPbap.log("Proxy object disconnected"); mService = null; if ((mServiceListener) != null) { mServiceListener.onServiceDisconnected(); } }
public static boolean doesClassMatchSink(android.bluetooth.BluetoothClass btClass) { switch (btClass.getDeviceClass()) { case BluetoothClass.Device.COMPUTER_DESKTOP : case BluetoothClass.Device.COMPUTER_LAPTOP : case BluetoothClass.Device.COMPUTER_SERVER : case BluetoothClass.Device.COMPUTER_UNCATEGORIZED : return true; default : return false; } }



























boolean connectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (!(mStateMachine.isConnected())) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: profile not connected"); return false; } if (mStateMachine.isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: audio is already ON"); return false; } mStateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO); return true; }

boolean disconnectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (!(mStateMachine.isAudioOn())) { return false; } mStateMachine.sendMessage(HeadsetStateMachine.DISCONNECT_AUDIO); return true; }




java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); synchronized(this) { devices.addAll(mConnectedDevicesList); } return devices; }
public void dump(java.lang.StringBuilder sb) { com.android.bluetooth.btservice.ProfileService.println(sb, ("mCurrentDevice: " + (mCurrentDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mTargetDevice: " + (mTargetDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mIncomingDevice: " + (mIncomingDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mActiveScoDevice: " + (mActiveScoDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mMultiDisconnectDevice: " + (mMultiDisconnectDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mVirtualCallStarted: " + (mVirtualCallStarted))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mVoiceRecognitionStarted: " + (mVoiceRecognitionStarted))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mWaitingForVoiceRecognition: " + (mWaitingForVoiceRecognition))); com.android.bluetooth.btservice.ProfileService.println(sb, ("StateMachine: " + (this.toString()))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mPhoneState: " + (mPhoneState))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mAudioState: " + (mAudioState))); }
int getAudioState(android.bluetooth.BluetoothDevice device) { synchronized(this) { if ((mConnectedDevicesList.size()) == 0) { return android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED; } } return mAudioState; }

private void processNoiceReductionEvent(int enable, android.bluetooth.BluetoothDevice device) { java.util.HashMap<java.lang.String, java.lang.Integer> audioParamNrec = mHeadsetAudioParam.get(device); if ((audioParamNrec != null) && (!(audioParamNrec.isEmpty()))) { if (enable == 1) { audioParamNrec.put("NREC", 1); } else { audioParamNrec.put("NREC", 0); } log(((("NREC value for device :" + device) + " is: ") + (audioParamNrec.get("NREC")))); } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "processNoiceReductionEvent: audioParamNrec is null "); } if ((((mActiveScoDevice) != null) && (mActiveScoDevice.equals(device))) && ((mAudioState) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED))) { setAudioParameters(device); } }
private void processKeyPressed(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "processKeyPressed device is null"); return; } if ((mPhoneState.getCallState()) == (HeadsetHalConstants.CALL_STATE_INCOMING)) { if ((mPhoneProxy) != null) { try { mPhoneProxy.answerCall(); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "Handsfree phone proxy null for answering call"); } } else if ((mPhoneState.getNumActiveCall()) > 0) { if (!(isAudioOn())) { mNativeInterface.connectAudio(mCurrentDevice); } else { if ((mPhoneProxy) != null) { try { mPhoneProxy.hangupCall(); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "Handsfree phone proxy null for hangup call"); } } } else { java.lang.String dialNumber = mPhonebook.getLastDialledNumber(); if (dialNumber == null) { log("processKeyPressed, last dial number null"); return; } android.content.Intent intent = new android.content.Intent(android.content.Intent.ACTION_CALL_PRIVILEGED, android.net.Uri.fromParts(com.android.bluetooth.hfp.HeadsetStateMachine.SCHEME_TEL, dialNumber, null)); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); mService.startActivity(intent); } }
int getConnectionState(android.bluetooth.BluetoothDevice device) { if ((getCurrentState()) == (mDisconnected)) { if (com.android.bluetooth.hfp.HeadsetStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "currentState is Disconnected"); } return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } synchronized(this) { com.android.internal.util.IState currentState = getCurrentState(); if (com.android.bluetooth.hfp.HeadsetStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ("currentState = " + currentState)); } if (currentState == (mPending)) { if (((mTargetDevice) != null) && (mTargetDevice.equals(device))) { return android.bluetooth.BluetoothProfile.STATE_CONNECTING; } if (mConnectedDevicesList.contains(device)) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTING; } if (((mIncomingDevice) != null) && (mIncomingDevice.equals(device))) { return android.bluetooth.BluetoothProfile.STATE_CONNECTING; } return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } if (currentState == (mMultiHFPending)) { if (((mTargetDevice) != null) && (mTargetDevice.equals(device))) { return android.bluetooth.BluetoothProfile.STATE_CONNECTING; } if (((mIncomingDevice) != null) && (mIncomingDevice.equals(device))) { return android.bluetooth.BluetoothProfile.STATE_CONNECTING; } if (mConnectedDevicesList.contains(device)) { if (((mMultiDisconnectDevice) != null) && (!(mMultiDisconnectDevice.equals(device)))) { return android.bluetooth.BluetoothProfile.STATE_CONNECTED; } return android.bluetooth.BluetoothProfile.STATE_DISCONNECTING; } return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } if ((currentState == (mConnected)) || (currentState == (mAudioOn))) { if (mConnectedDevicesList.contains(device)) { return android.bluetooth.BluetoothProfile.STATE_CONNECTED; } return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ("Bad currentState: " + currentState)); return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } } }
boolean okToConnect(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.btservice.AdapterService adapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); int priority = mService.getPriority(device); if ((adapterService == null) || ((adapterService.isQuietModeEnabled()) && ((mTargetDevice) == null))) { return false; } if (((android.bluetooth.BluetoothProfile.PRIORITY_OFF) < priority) || (((android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED) == priority) && ((device.getBondState()) != (android.bluetooth.BluetoothDevice.BOND_NONE)))) { return true; } return false; }
private void processWBSEvent(int enable, android.bluetooth.BluetoothDevice device) { if (enable == 2) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, (((("AudioManager.setParameters: bt_wbs=on, device=" + (device.getName())) + "[") + (device.getAddress())) + "]")); mAudioManager.setParameters(((com.android.bluetooth.hfp.HeadsetStateMachine.HEADSET_WBS) + "=on")); } else { android.util.Log.d(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, (((((("AudioManager.setParameters: bt_wbs=off, enable=" + enable) + ", device=") + (device.getName())) + "[") + (device.getAddress())) + "]")); mAudioManager.setParameters(((com.android.bluetooth.hfp.HeadsetStateMachine.HEADSET_WBS) + "=off")); } }

void onProfileStateChanged(com.android.settingslib.bluetooth.LocalBluetoothProfile profile, int newProfileState) { if (Utils.D) { android.util.Log.d(com.android.settingslib.bluetooth.CachedBluetoothDevice.TAG, ((("onProfileStateChanged: profile " + profile) + " newProfileState ") + newProfileState)); } if ((mLocalAdapter.getBluetoothState()) == (android.bluetooth.BluetoothAdapter.STATE_TURNING_OFF)) { if (Utils.D) android.util.Log.d(com.android.settingslib.bluetooth.CachedBluetoothDevice.TAG, " BT Turninig Off...Profile conn state change ignored..."); return; } mProfileConnectionState.put(profile, newProfileState); if (newProfileState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { if (profile instanceof com.android.settingslib.bluetooth.MapProfile) { profile.setPreferred(mDevice, true); } else if (!(mProfiles.contains(profile))) { mRemovedProfiles.remove(profile); mProfiles.add(profile); if ((profile instanceof com.android.settingslib.bluetooth.PanProfile) && (((com.android.settingslib.bluetooth.PanProfile) (profile)).isLocalRoleNap(mDevice))) { mLocalNapRoleConnected = true; } } } else if ((profile instanceof com.android.settingslib.bluetooth.MapProfile) && (newProfileState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED))) { profile.setPreferred(mDevice, false); } else if ((((mLocalNapRoleConnected) && (profile instanceof com.android.settingslib.bluetooth.PanProfile)) && (((com.android.settingslib.bluetooth.PanProfile) (profile)).isLocalRoleNap(mDevice))) && (newProfileState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED))) { android.util.Log.d(com.android.settingslib.bluetooth.CachedBluetoothDevice.TAG, "Removing PanProfile from device after NAP disconnect"); mProfiles.remove(profile); mRemovedProfiles.add(profile); mLocalNapRoleConnected = false; } }
private int getClearableCount() { int count = 0; if (mTransferCursor.moveToFirst()) { while (!(mTransferCursor.isAfterLast())) { int statusColumnId = mTransferCursor.getColumnIndexOrThrow(BluetoothShare.STATUS); int status = mTransferCursor.getInt(statusColumnId); if (com.android.bluetooth.opp.BluetoothShare.isStatusCompleted(status)) { count++; } mTransferCursor.moveToNext(); } } return count; }
private static synchronized void setAdapterService(com.android.bluetooth.btservice.AdapterService instance) { if ((instance != null) && (!(instance.mCleaningUp))) { if (com.android.bluetooth.btservice.AdapterService.DBG) { android.util.Log.d(com.android.bluetooth.btservice.AdapterService.TAG, ("setAdapterService() - set to: " + (com.android.bluetooth.btservice.AdapterService.sAdapterService))); } com.android.bluetooth.btservice.AdapterService.sAdapterService = instance; } else { if (com.android.bluetooth.btservice.AdapterService.DBG) { if ((com.android.bluetooth.btservice.AdapterService.sAdapterService) == null) { android.util.Log.d(com.android.bluetooth.btservice.AdapterService.TAG, "setAdapterService() - Service not available"); } else if (com.android.bluetooth.btservice.AdapterService.sAdapterService.mCleaningUp) { android.util.Log.d(com.android.bluetooth.btservice.AdapterService.TAG, "setAdapterService() - Service is cleaning up"); } } } }
public static void main(java.lang.String[] args) { Main m = new Main(); java.lang.Iterable it = new java.lang.Iterable() { public java.util.Iterator iterator() { return null; } }; m.testInlinedForFalseInlined(it); m.testInlinedForFalseNotInlined(it); m.testInlinedForNullInlined(it); m.testInlinedForNullNotInlined(it); }





















private final void startRfcommSocketListeners(int masId) { if (masId == (-1)) { for (int i = 0, c = mMasInstances.size(); i < c; i++) { mMasInstances.valueAt(i).startRfcommSocketListener(); } } else { com.android.bluetooth.map.BluetoothMapMasInstance masInst = mMasInstances.get(masId); if (masInst != null) { masInst.startRfcommSocketListener(); } else { android.util.Log.w(com.android.bluetooth.map.BluetoothMapService.TAG, ("startRfcommSocketListeners(): Invalid MasId: " + masId)); } } }
@java.lang.Override public synchronized void onAcceptFailed() { mServerSockets = null; if (mShutdown) { android.util.Log.e(TAG, ("Failed to accept incomming connection - " + "shutdown")); } else { android.util.Log.e(TAG, ("Failed to accept incomming connection - " + "restarting")); startRfcommSocketListener(); } }
public synchronized void startRfcommSocketListener() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) android.util.Log.d(TAG, "Map Service startRfcommSocketListener"); if ((mServerSession) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) android.util.Log.d(TAG, "mServerSession exists - shutting it down..."); mServerSession.close(); mServerSession = null; } if ((mObserver) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) android.util.Log.d(TAG, "mObserver exists - shutting it down..."); mObserver.deinit(); mObserver = null; } closeConnectionSocket(); if ((mServerSockets) != null) { mServerSockets.prepareForNewConnect(); } else { mServerSockets = com.android.bluetooth.ObexServerSockets.create(this); if ((mServerSockets) == null) { android.util.Log.e(TAG, "Failed to start the listeners"); return; } removeSdpRecord(); mSdpHandle = createMasSdpRecord(mServerSockets.getRfcommChannel(), mServerSockets.getL2capPsm()); if (com.android.bluetooth.map.BluetoothMapMasInstance.V) android.util.Log.d(TAG, ((((("Creating new SDP record for MAS instance: " + (mMasInstanceId)) + " Object reference: ") + (this)) + "SDP handle: ") + (mSdpHandle))); updateDbIdentifier(); } }
public void restartObexServerSession() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) android.util.Log.d(TAG, "MAP Service restartObexServerSession()"); startRfcommSocketListener(); }

@java.lang.Override protected void releaseResources() { if (mOwnedByTransform) { android.util.Log.d(com.android.server.IpSecService.TAG, (("Cannot release Spi " + (mSpi)) + ": Currently locked by a Transform")); return; } try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, mDirection, mLocalAddress, mRemoteAddress, mSpi); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ("Failed to delete SPI reservation with ID: " + (mResourceId))); } mSpi = android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX; }
@java.lang.Override public synchronized android.net.IpSecSpiResponse reserveSecurityParameterIndex(int direction, java.lang.String remoteAddress, int requestedSpi, android.os.IBinder binder) throws android.os.RemoteException { com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.checkInetAddress(remoteAddress); checkNotNull(binder, "Null Binder passed to reserveSecurityParameterIndex"); int resourceId = com.android.server.IpSecService.mNextResourceId.getAndIncrement(); int spi = android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX; java.lang.String localAddress = ""; try { if (!(mUserQuotaTracker.getUserRecord(android.os.Binder.getCallingUid()).spi.isAvailable())) { return new android.net.IpSecSpiResponse(IpSecManager.Status.RESOURCE_UNAVAILABLE, android.net.IpSecManager.INVALID_RESOURCE_ID, spi); } spi = mSrvConfig.getNetdInstance().ipSecAllocateSpi(resourceId, direction, localAddress, remoteAddress, requestedSpi); android.util.Log.d(com.android.server.IpSecService.TAG, ("Allocated SPI " + spi)); mSpiRecords.put(resourceId, new com.android.server.IpSecService.SpiRecord(resourceId, binder, direction, localAddress, remoteAddress, spi)); } catch (android.os.ServiceSpecificException e) { return new android.net.IpSecSpiResponse(IpSecManager.Status.SPI_UNAVAILABLE, android.net.IpSecManager.INVALID_RESOURCE_ID, spi); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return new android.net.IpSecSpiResponse(IpSecManager.Status.OK, resourceId, spi); }
@java.lang.Override protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return mUserQuotaTracker.getUserRecord(this.uid).socket; }

private synchronized <T extends com.android.server.IpSecService.KernelResource> void releaseKernelResource(com.android.server.IpSecService.KernelResourceArray<T> resArray, int resourceId, java.lang.String typeName) throws android.os.RemoteException { T record = resArray.getAndCheckOwner(resourceId); if (record == null) { throw new java.lang.IllegalArgumentException((((typeName + " ") + resourceId) + " is not available to be deleted")); } record.release(); resArray.remove(resourceId); }
protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return mUserQuotaTracker.getUserRecord(this.uid).transform; }
protected abstract void releaseResources() throws android.os.RemoteException;
public final void release() throws android.os.RemoteException { synchronized(this) { if (isReferenced()) { throw new java.lang.IllegalStateException("Cannot release a resource that has active references!"); } if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { return; } releaseResources(); getResourceTracker().give(); if ((mBinder) != null) { mBinder.unlinkToDeath(this, 0); } mBinder = null; mResourceId = android.net.IpSecManager.INVALID_RESOURCE_ID; } }


@org.junit.Test public void testOpenAndCloseUdpEncapsulationSocket() throws java.lang.Exception { int localport = findUnusedPort(); IpSecUdpEncapResponse udpEncapResp = mIpSecService.openUdpEncapsulationSocket(localport, new android.os.Binder()); assertNotNull(udpEncapResp); assertEquals(IpSecManager.Status.OK, udpEncapResp.status); assertEquals(localport, udpEncapResp.port); mIpSecService.closeUdpEncapsulationSocket(udpEncapResp.resourceId); udpEncapResp.fileDescriptor.close(); }

@org.junit.Test public void testReleaseSecurityParameterIndex() throws java.lang.Exception { when(mMockNetd.ipSecAllocateSpi(anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), eq(mRemoteAddr), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT))).thenReturn(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT); android.net.IpSecSpiResponse spiResp = mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, mRemoteAddr, com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT, new android.os.Binder()); mIpSecService.releaseSecurityParameterIndex(spiResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(spiResp.resourceId), anyInt(), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT)); }
@org.junit.Test public void testDeleteTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); mIpSecService.deleteTransportModeTransform(createTransformResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT)); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN)); }
@java.lang.Override protected void releaseResources() { android.util.Log.d(com.android.server.IpSecService.TAG, ("Closing port " + (mPort))); libcore.io.IoUtils.closeQuietly(mSocket); mSocket = null; }


@java.lang.Override protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return mUserQuotaTracker.getUserRecord(this.uid).spi; }
@java.lang.Override public java.lang.String toString() { return new java.lang.StringBuilder().append("{socket=").append(socket).append(", transform=").append(transform).append(", spi=").append(spi).append("}").toString(); }
public void testIke() throws java.lang.Exception { java.net.InetAddress local = android.net.cts.IpSecManagerTest.LOOPBACK_4; try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex outSpi = mISM.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, local);android.net.IpSecManager.SecurityParameterIndex inSpi = mISM.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_IN, local);android.net.IpSecTransform transform = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, inSpi, outSpi, encapSocket, local)) { java.io.FileDescriptor sock = null; try { sock = android.net.cts.IpSecManagerTest.getTestV4UdpSocket(local); int port = android.net.cts.IpSecManagerTest.getPort(sock); mISM.applyTransportModeTransform(sock, transform); byte[] header = new byte[]{ 1, 1, 1, 1 }; java.lang.String message = "Sample ESP Packet"; byte[] data = ((new java.lang.String(header)) + message).getBytes("UTF-8"); android.system.Os.sendto(sock, data, 0, data.length, 0, local, encapSocket.getPort()); header = new byte[]{ 0, 0, 0, 0 }; message = "Sample IKE Packet"; data = ((new java.lang.String(header)) + message).getBytes("UTF-8"); android.system.Os.sendto(encapSocket.getSocket(), data, 0, data.length, 0, local, encapSocket.getPort()); byte[] in = new byte[4]; in[0] = 1; android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertTrue("Encap socket received UDP-encap-ESP data despite invalid SPIs", java.util.Arrays.equals(header, in)); mISM.removeTransportModeTransform(sock, transform); } finally { if (sock != null) { android.system.Os.close(sock); } } } }


public void cleanup() { if ((mPhoneProxy) != null) { if (com.android.bluetooth.hfp.HeadsetStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "Unbinding service..."); } synchronized(mConnection) { try { mPhoneProxy = null; mService.unbindService(mConnection); } catch (java.lang.Exception re) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "Error unbinding from IBluetoothHeadsetPhone", re); } } } if ((mPhoneState) != null) { mPhoneState.listenForPhoneState(false); mPhoneState.cleanup(); } if ((mPhonebook) != null) { mPhonebook.cleanup(); } mAudioParams.clear(); if ((mNativeInterface) != null) { mNativeInterface.cleanup(); } }






@java.lang.Override protected synchronized boolean start() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, "start()"); mStateMachinesThread = new android.os.HandlerThread("HeadsetService.StateMachines"); mStateMachinesThread.start(); mStateMachine = com.android.bluetooth.hfp.HeadsetStateMachine.make(this, mStateMachinesThread.getLooper(), com.android.bluetooth.hfp.HeadsetNativeInterface.getInstance()); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(Intent.ACTION_BATTERY_CHANGED); filter.addAction(AudioManager.VOLUME_CHANGED_ACTION); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); registerReceiver(mHeadsetReceiver, filter); com.android.bluetooth.hfp.HeadsetService.setHeadsetService(this); mStarted = true; return true; }
@java.lang.Override protected synchronized boolean stop() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, "stop()"); if (!(mStarted)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "stop() called before start()"); return true; } mStarted = false; unregisterReceiver(mHeadsetReceiver); com.android.bluetooth.hfp.HeadsetStateMachine.destroy(mStateMachine); mStateMachine = null; mStateMachinesThread.quitSafely(); mStateMachinesThread = null; com.android.bluetooth.hfp.HeadsetService.setHeadsetService(null); return true; }
static com.android.bluetooth.hfp.HeadsetStateMachine make(com.android.bluetooth.hfp.HeadsetService service, android.os.Looper looper, com.android.bluetooth.hfp.HeadsetNativeInterface nativeInterface) { android.util.Log.i(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "make"); com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = new com.android.bluetooth.hfp.HeadsetStateMachine(service, looper, nativeInterface); stateMachine.start(); return stateMachine; }


@java.lang.Override @android.annotation.NonNull public android.os.PersistableBundle getConfigForSubId(int subId) { try { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, null); } catch (java.lang.SecurityException e) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_STATE, null); } int phoneId = android.telephony.SubscriptionManager.getPhoneId(subId); android.os.PersistableBundle retConfig = android.telephony.CarrierConfigManager.getDefaultConfig(); if (android.telephony.SubscriptionManager.isValidPhoneId(phoneId)) { android.os.PersistableBundle config = mConfigFromDefaultApp[phoneId]; if (config != null) retConfig.putAll(config); config = mConfigFromCarrierApp[phoneId]; if (config != null) retConfig.putAll(config); } return retConfig; }
public void testAesCbcHmacSha256Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth); }
public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth); }


public void testAesCbcHmacSha1Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth); }

public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth); }
public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth); }



public void testAesCbcHmacSha512Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth); }

public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth); }
public void testAesCbcHmacSha256Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth); }
public void testAesCbcHmacMd5Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth); }

public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth); }
public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth); }
public void testAesCbcHmacMd5Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth); }
public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth); }
public void testAesCbcHmacSha256Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth); }


public void testAesCbcHmacSha384Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth); }
public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth); }
public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth); }
private void checkUnconnectedUdp(android.net.IpSecTransform transform, java.net.InetAddress local) throws java.lang.Exception { java.io.FileDescriptor udpSocket = android.net.cts.IpSecManagerTest.getBoundUdpSocket(local); int localPort = android.net.cts.IpSecManagerTest.getPort(udpSocket); mISM.applyTransportModeTransform(udpSocket, transform); byte[] data = new java.lang.String(("Best test data ever! Port: " + localPort)).getBytes("UTF-8"); byte[] in = new byte[data.length]; android.system.Os.sendto(udpSocket, data, 0, data.length, 0, local, localPort); android.system.Os.read(udpSocket, in, 0, in.length); assertTrue("Encapsulated data did not match.", java.util.Arrays.equals(data, in)); mISM.removeTransportModeTransform(udpSocket, transform); android.system.Os.close(udpSocket); }


public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth); }



public void testAesCbcHmacSha1Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth); }
public void testAesCbcHmacSha512Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth); }

public void ratchetRat(android.telephony.ServiceState oldSS, android.telephony.ServiceState newSS) { int newVoiceRat = ratchetRat(oldSS.getRilVoiceRadioTechnology(), newSS.getRilVoiceRadioTechnology()); int newDataRat = ratchetRat(oldSS.getRilDataRadioTechnology(), newSS.getRilDataRadioTechnology()); boolean newUsingCA = (oldSS.isUsingCarrierAggregation()) || (newSS.isUsingCarrierAggregation()); newSS.setRilVoiceRadioTechnology(newVoiceRat); newSS.setRilDataRadioTechnology(newDataRat); newSS.setIsUsingCarrierAggregation(newUsingCA); }
public void deleteSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { mController.deleteSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void getDownloadableSubscriptionMetadata(android.telephony.euicc.DownloadableSubscription subscription, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { mController.getDownloadableSubscriptionMetadata(subscription, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void updateSubscriptionNickname(int subscriptionId, java.lang.String nickname, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { mController.updateSubscriptionNickname(subscriptionId, nickname, callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }

public void switchToSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { mController.switchToSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void getDefaultDownloadableSubscriptionList(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { mController.getDefaultDownloadableSubscriptionList(mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@android.annotation.Nullable public java.lang.String getEid() { if (!(isEnabled())) { return null; } try { return mController.getEid(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void downloadSubscription(android.telephony.euicc.DownloadableSubscription subscription, boolean switchAfterDownload, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { mController.downloadSubscription(subscription, switchAfterDownload, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@android.annotation.Nullable public android.telephony.euicc.EuiccInfo getEuiccInfo() { if (!(isEnabled())) { return null; } try { return mController.getEuiccInfo(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void eraseSubscriptions(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { mController.eraseSubscriptions(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void continueOperation(android.content.Intent resolutionIntent, android.os.Bundle resolutionExtras) { if (!(isEnabled())) { android.app.PendingIntent callbackIntent = resolutionIntent.getParcelableExtra(android.telephony.euicc.EuiccManager.EXTRA_EMBEDDED_SUBSCRIPTION_RESOLUTION_CALLBACK_INTENT); if (callbackIntent != null) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); } return; } try { mController.continueOperation(resolutionIntent, resolutionExtras); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void retainSubscriptionsForFactoryReset(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { mController.retainSubscriptionsForFactoryReset(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }

@java.lang.Override protected boolean start() { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "start()"); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED); filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED); filter.addAction(com.android.bluetooth.pbap.BluetoothPbapService.AUTH_RESPONSE_ACTION); filter.addAction(com.android.bluetooth.pbap.BluetoothPbapService.AUTH_CANCELLED_ACTION); mInterrupted = false; com.android.bluetooth.pbap.BluetoothPbapConfig.init(this); mSessionStatusHandler.sendMessage(mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.START_LISTENER)); if ((mContactChangeObserver) == null) { registerReceiver(mPbapReceiver, filter); try { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Registering observer"); } mContactChangeObserver = new com.android.bluetooth.pbap.BluetoothPbapService.BluetoothPbapContentObserver(); getContentResolver().registerContentObserver(com.android.bluetooth.util.DevicePolicyUtils.getEnterprisePhoneUri(this), false, mContactChangeObserver); } catch (android.database.sqlite.SQLiteException e) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("SQLite exception: " + e)); } catch (java.lang.IllegalStateException e) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Illegal state exception, content observer is already registered"); } } return true; }
@java.lang.Override public synchronized void onAcceptFailed() { cleanUpSdpRecord(); if ((mServerSockets) != null) { mServerSockets.shutdown(false); mServerSockets = null; } if (((!(mInterrupted)) && ((mAdapter) != null)) && (mAdapter.isEnabled())) { startSocketListeners(); } }














@java.lang.Override public synchronized void onAcceptFailed() { android.util.Log.w(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "PBAP server socket accept thread failed. Restarting the server socket"); if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } clearServerSocket(); if ((mSessionStatusHandler) != null) { mSessionStatusHandler.removeCallbacksAndMessages(null); } startSocketListeners(); }
private synchronized void startSocketListeners() { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "startsocketListener"); } if ((mServerSession) != null) { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "mServerSession exists - shutting it down..."); } mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if ((mServerSockets) != null) { mServerSockets.prepareForNewConnect(); } else { mServerSockets = com.android.bluetooth.ObexServerSockets.create(this); if ((mServerSockets) == null) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Failed to start the listeners"); return; } if ((mSdpHandle) >= 0) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("SDP handle was not cleaned up, mSdpHandle=" + (mSdpHandle))); return; } mSdpHandle = com.android.bluetooth.sdp.SdpManager.getDefaultManager().createPbapPseRecord("OBEX Phonebook Access Server", mServerSockets.getRfcommChannel(), mServerSockets.getL2capPsm(), com.android.bluetooth.pbap.BluetoothPbapService.SDP_PBAP_SERVER_VERSION, com.android.bluetooth.pbap.BluetoothPbapService.SDP_PBAP_SUPPORTED_REPOSITORIES, com.android.bluetooth.pbap.BluetoothPbapService.SDP_PBAP_SUPPORTED_FEATURES); com.android.bluetooth.pbap.BluetoothPbapUtils.fetchPbapParams(mContext); if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("PBAP server with handle:" + (mSdpHandle))); } } }
public final java.lang.String getOwnerPhoneNumberVcard(final boolean vcardType21, final byte[] filter) { if (com.android.bluetooth.pbap.BluetoothPbapConfig.useProfileForOwnerVcard()) { java.lang.String vcard = getOwnerPhoneNumberVcardFromProfile(vcardType21, filter); if ((vcard != null) && ((vcard.length()) != 0)) { return vcard; } } com.android.bluetooth.pbap.BluetoothPbapCallLogComposer composer = new com.android.bluetooth.pbap.BluetoothPbapCallLogComposer(mContext); java.lang.String name = com.android.bluetooth.pbap.BluetoothPbapService.getLocalPhoneName(); java.lang.String number = com.android.bluetooth.pbap.BluetoothPbapService.getLocalPhoneNum(); java.lang.String vcard = composer.composeVCardForPhoneOwnNumber(Phone.TYPE_MOBILE, name, number, vcardType21); return vcard; }
private final java.lang.String getOwnerPhoneNumberVcardFromProfile(final boolean vcardType21, final byte[] filter) { int vcardType; if (vcardType21) { vcardType = com.android.vcard.VCardConfig.VCARD_TYPE_V21_GENERIC; } else { vcardType = com.android.vcard.VCardConfig.VCARD_TYPE_V30_GENERIC; } if (!(com.android.bluetooth.pbap.BluetoothPbapConfig.includePhotosInVcard())) { vcardType |= com.android.vcard.VCardConfig.FLAG_REFRAIN_IMAGE_EXPORT; } return com.android.bluetooth.pbap.BluetoothPbapUtils.createProfileVCard(mContext, vcardType, filter); }
private static int getCallFeatures(int videoState, boolean isPulledCall, boolean isStoreHd) { int features = 0; if (android.telecom.VideoProfile.isVideo(videoState)) { features |= android.provider.CallLog.Calls.FEATURES_VIDEO; } if (isPulledCall) { features |= android.provider.CallLog.Calls.FEATURES_PULLED_EXTERNALLY; } if (isStoreHd) { features |= android.provider.CallLog.Calls.FEATURES_HD_CALL; } return features; }
void logCall(com.android.server.telecom.Call call, int callLogType, @android.annotation.Nullable com.android.server.telecom.CallLogManager.LogCallCompletedListener logCallCompletedListener) { final long creationTime = call.getCreationTimeMillis(); final long age = call.getAgeMillis(); final java.lang.String logNumber = getLogNumber(call); android.telecom.Log.d(com.android.server.telecom.CallLogManager.TAG, "logNumber set to: %s", android.telecom.Log.pii(logNumber)); final android.telecom.PhoneAccountHandle emergencyAccountHandle = com.android.server.telecom.TelephonyUtil.getDefaultEmergencyPhoneAccount().getAccountHandle(); java.lang.String formattedViaNumber = android.telephony.PhoneNumberUtils.formatNumber(call.getViaNumber(), getCountryIso()); formattedViaNumber = (formattedViaNumber != null) ? formattedViaNumber : call.getViaNumber(); android.telecom.PhoneAccountHandle accountHandle = call.getTargetPhoneAccount(); if (emergencyAccountHandle.equals(accountHandle)) { accountHandle = null; } java.lang.Long callDataUsage = ((call.getCallDataUsage()) == (Call.DATA_USAGE_NOT_SET)) ? null : call.getCallDataUsage(); int callFeatures = com.android.server.telecom.CallLogManager.getCallFeatures(call.getVideoStateHistory(), ((call.getDisconnectCause().getCode()) == (android.telecom.DisconnectCause.CALL_PULLED)), shouldSaveHdInfo(call, accountHandle)); logCall(call.getCallerInfo(), logNumber, call.getPostDialDigits(), formattedViaNumber, call.getHandlePresentation(), callLogType, callFeatures, accountHandle, creationTime, age, callDataUsage, call.isEmergencyCall(), call.getInitiatingUser(), logCallCompletedListener); }
public boolean setNetworkSelectionModeManual(int subId, com.android.internal.telephony.OperatorInfo operator, boolean persistSelection) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony != null) return telephony.setNetworkSelectionModeManual(subId, operator, persistSelection); } catch (android.os.RemoteException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, "setNetworkSelectionModeManual RemoteException", ex); } catch (java.lang.NullPointerException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, "setNetworkSelectionModeManual NPE", ex); } return false; }
@org.junit.Before public void setUp() { mDevice = android.support.test.uiautomator.UiDevice.getInstance(getInstrumentation()); }
@org.junit.Test public void testNavigationBarDivider() throws java.lang.Exception { mDevice.waitForIdle(); final int dividerColor = getInstrumentation().getContext().getColor(R.color.navigationBarDividerColor); final android.graphics.Bitmap bitmap = takeNavigationBarScreenshot(mActivityRule.getActivity()); int[] pixels = new int[(bitmap.getHeight()) * (bitmap.getWidth())]; bitmap.getPixels(pixels, 0, bitmap.getWidth(), 0, 0, bitmap.getWidth(), bitmap.getHeight()); for (int col = 0; col < (bitmap.getWidth()); col++) { if (dividerColor != (pixels[col])) { dumpBitmap(bitmap); fail(((("Invalid color exptected=" + dividerColor) + " actual=") + (pixels[col]))); } } }
@java.lang.Override public void run() { char[] charBuffer = new char[com.android.tradefed.util.ProcessHelper.ReaderThread.BUF_SIZE]; try { while (true) { int readCount = mReader.read(charBuffer, 0, charBuffer.length); if (readCount < 0) { break; } mBuffer.append(charBuffer, 0, readCount); } } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e("%s: %s", getName(), e.toString()); } }




public static void run() throws java.lang.Exception { java.lang.Thread thr = new java.lang.Thread(art.Test1941::LoopAllocFreeEnv, "LoopNative"); thr.start(); art.Trace.enableSingleStepTracing(art.Test1941.class, art.Test1941.class.getDeclaredMethod("notifySingleStep", java.lang.Thread.class, java.lang.reflect.Executable.class, java.lang.Long.TYPE), null); java.lang.System.out.println(("fib(20) is " + (art.Test1941.fib(20)))); thr.interrupt(); thr.join(); art.Trace.disableTracing(null); if (art.Test1941.PRINT_CNT) { java.lang.System.out.println(("Number of envs created/destroyed: " + (art.Test1941.CNT))); } }


@java.lang.Override public boolean cleanup() { if (com.android.bluetooth.mapclient.MapClientService.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MapClientService.TAG, "cleanup()"); } return true; }
public void dump(java.io.FileDescriptor fd, java.io.PrintWriter pw, java.lang.String[] args) { pw.println(("UiccController: " + (this))); pw.println((" mContext=" + (mContext))); pw.println((" mInstance=" + (com.android.internal.telephony.uicc.UiccController.mInstance))); pw.println((" mIccChangedRegistrants: size=" + (mIccChangedRegistrants.size()))); for (int i = 0; i < (mIccChangedRegistrants.size()); i++) { pw.println((((" mIccChangedRegistrants[" + i) + "]=") + (((android.os.Registrant) (mIccChangedRegistrants.get(i))).getHandler()))); } pw.println(); pw.flush(); pw.println((" mUiccCards: size=" + (mUiccCards.length))); for (int i = 0; i < (mUiccCards.length); i++) { if ((mUiccCards[i]) == null) { pw.println(((" mUiccCards[" + i) + "]=null")); } else { pw.println((((" mUiccCards[" + i) + "]=") + (mUiccCards[i]))); mUiccCards[i].dump(fd, pw, args); } } pw.println("mCardLogs: "); for (int i = 0; i < (mCardLogs.size()); ++i) { pw.println((" " + (mCardLogs.get(i)))); } }


protected void onIccRefreshInit() { mAdnCache.reset(); com.android.internal.telephony.uicc.UiccCardApplication parentApp = mParentApp; if ((parentApp != null) && ((parentApp.getState()) == (com.android.internal.telephony.uicc.IccCardApplicationStatus.AppState.APPSTATE_READY))) { sendMessage(obtainMessage(com.android.internal.telephony.uicc.IccRecords.EVENT_APP_READY)); } }
public void handleMessage(android.os.Message msg) { android.os.AsyncResult ar; if (mDestroyed.get()) { android.telephony.Rlog.e(com.android.internal.telephony.uicc.IsimUiccRecords.LOG_TAG, (((("Received message " + msg) + "[") + (msg.what)) + "] while being destroyed. Ignoring.")); return; } loge((((("IsimUiccRecords: handleMessage " + msg) + "[") + (msg.what)) + "] ")); try { switch (msg.what) { case com.android.internal.telephony.uicc.IsimUiccRecords.EVENT_APP_READY : onReady(); break; case com.android.internal.telephony.uicc.IsimUiccRecords.EVENT_ISIM_REFRESH : ar = ((android.os.AsyncResult) (msg.obj)); loge(("ISim REFRESH(EVENT_ISIM_REFRESH) with exception: " + (ar.exception))); if ((ar.exception) == null) { android.content.Intent intent = new android.content.Intent(com.android.internal.telephony.uicc.IsimUiccRecords.INTENT_ISIM_REFRESH); loge(("send ISim REFRESH: " + (com.android.internal.telephony.uicc.IsimUiccRecords.INTENT_ISIM_REFRESH))); mContext.sendBroadcast(intent); handleIsimRefresh(((com.android.internal.telephony.uicc.IccRefreshResponse) (ar.result))); } break; case com.android.internal.telephony.uicc.IsimUiccRecords.EVENT_ISIM_AUTHENTICATE_DONE : ar = ((android.os.AsyncResult) (msg.obj)); log("EVENT_ISIM_AUTHENTICATE_DONE"); if ((ar.exception) != null) { log(("Exception ISIM AKA: " + (ar.exception))); } else { try { auth_rsp = ((java.lang.String) (ar.result)); log(("ISIM AKA: auth_rsp = " + (auth_rsp))); } catch (java.lang.Exception e) { log(("Failed to parse ISIM AKA contents: " + e)); } } synchronized(mLock) { mLock.notifyAll(); } break; default : super.handleMessage(msg); } } catch (java.lang.RuntimeException exc) { android.telephony.Rlog.w(com.android.internal.telephony.uicc.IsimUiccRecords.LOG_TAG, "Exception parsing SIM record", exc); } }







public int getNumApplications() { int count = 0; for (com.android.internal.telephony.uicc.UiccCardApplication a : mUiccApplications) { if (a != null) { count++; } } return count; }
public com.android.internal.telephony.uicc.IccCardStatus.PinState getUniversalPinState() { synchronized(mLock) { return mUniversalPinState; } }
public boolean isApplicationOnIcc(com.android.internal.telephony.uicc.IccCardApplicationStatus.AppType type) { synchronized(mLock) { for (int i = 0; i < (mUiccApplications.length); i++) { if (((mUiccApplications[i]) != null) && ((mUiccApplications[i].getType()) == type)) { return true; } } return false; } }
public int getCarrierPrivilegeStatus(android.content.pm.Signature signature, java.lang.String packageName) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : carrierPrivilegeRules.getCarrierPrivilegeStatus(signature, packageName); }
public boolean setOperatorBrandOverride(java.lang.String brand) { log(("setOperatorBrandOverride: " + brand)); log(("current iccId: " + (getIccId()))); java.lang.String iccId = getIccId(); if (android.text.TextUtils.isEmpty(iccId)) { return false; } android.content.SharedPreferences.Editor spEditor = android.preference.PreferenceManager.getDefaultSharedPreferences(mContext).edit(); java.lang.String key = (com.android.internal.telephony.uicc.UiccCard.OPERATOR_BRAND_OVERRIDE_PREFIX) + iccId; if (brand == null) { spEditor.remove(key).commit(); } else { spEditor.putString(key, brand).commit(); } return true; }
public int getCarrierPrivilegeStatusForCurrentTransaction(android.content.pm.PackageManager packageManager) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : carrierPrivilegeRules.getCarrierPrivilegeStatusForCurrentTransaction(packageManager); }
public void iccTransmitApduLogicalChannel(int channel, int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { mCi.iccTransmitApduLogicalChannel(channel, cla, command, p1, p2, p3, data, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_TRANSMIT_APDU_LOGICAL_CHANNEL_DONE, response)); }
public void iccCloseLogicalChannel(int channel, android.os.Message response) { loglocal(("Close Logical Channel: " + channel)); mCi.iccCloseLogicalChannel(channel, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_CLOSE_LOGICAL_CHANNEL_DONE, response)); }
public java.util.List<java.lang.String> getCarrierPackageNamesForIntent(android.content.pm.PackageManager packageManager, android.content.Intent intent) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? null : carrierPrivilegeRules.getCarrierPackageNamesForIntent(packageManager, intent); }
public com.android.internal.telephony.uicc.UiccCardApplication getApplicationIndex(int index) { synchronized(mLock) { if ((index >= 0) && (index < (mUiccApplications.length))) { return mUiccApplications[index]; } return null; } }
public java.lang.String getOperatorBrandOverride() { java.lang.String iccId = getIccId(); if (android.text.TextUtils.isEmpty(iccId)) { return null; } android.content.SharedPreferences sp = android.preference.PreferenceManager.getDefaultSharedPreferences(mContext); java.lang.String brandName = sp.getString(((com.android.internal.telephony.uicc.UiccCard.OPERATOR_BRAND_OVERRIDE_PREFIX) + iccId), null); if (brandName == null) { android.telephony.CarrierConfigManager manager = ((android.telephony.CarrierConfigManager) (mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE))); int subId = com.android.internal.telephony.SubscriptionController.getInstance().getSubIdUsingPhoneId(mPhoneId); if (manager != null) { android.os.PersistableBundle bundle = manager.getConfigForSubId(subId); if ((bundle != null) && (bundle.getBoolean(CarrierConfigManager.KEY_CARRIER_NAME_OVERRIDE_BOOL))) { brandName = bundle.getString(CarrierConfigManager.KEY_CARRIER_NAME_STRING); } } } return brandName; }
public com.android.internal.telephony.uicc.UiccCardApplication getApplicationByType(int type) { synchronized(mLock) { for (int i = 0; i < (mUiccApplications.length); i++) { if (((mUiccApplications[i]) != null) && ((mUiccApplications[i].getType().ordinal()) == type)) { return mUiccApplications[i]; } } return null; } }
public boolean areCarrierPriviligeRulesLoaded() { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return (carrierPrivilegeRules == null) || (carrierPrivilegeRules.areCarrierPriviligeRulesLoaded()); }
public void unregisterForCarrierPrivilegeRulesLoaded(android.os.Handler h) { synchronized(mLock) { mCarrierPrivilegeRegistrants.remove(h); } }
public int getCarrierPrivilegeStatus(android.content.pm.PackageManager packageManager, java.lang.String packageName) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : carrierPrivilegeRules.getCarrierPrivilegeStatus(packageManager, packageName); }
public void iccExchangeSimIO(int fileID, int command, int p1, int p2, int p3, java.lang.String pathID, android.os.Message response) { mCi.iccIO(command, fileID, pathID, p1, p2, p3, null, null, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_SIM_IO_DONE, response)); }
public boolean hasCarrierPrivilegeRules() { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return (carrierPrivilegeRules != null) && (carrierPrivilegeRules.hasCarrierPrivilegeRules()); }
public void registerForCarrierPrivilegeRulesLoaded(android.os.Handler h, int what, java.lang.Object obj) { synchronized(mLock) { android.os.Registrant r = new android.os.Registrant(h, what, obj); mCarrierPrivilegeRegistrants.add(r); if (areCarrierPriviligeRulesLoaded()) { r.notifyRegistrant(); } } }
public void dispose() { synchronized(mLock) { if (com.android.internal.telephony.uicc.UiccCard.DBG) log("Disposing card"); if ((mCatService) != null) mCatService.dispose(); for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { app.dispose(); } } mCatService = null; mUiccApplications = null; mCarrierPrivilegeRules = null; } }
public com.android.internal.telephony.uicc.UiccCardApplication getApplication(int family) { synchronized(mLock) { int index = IccCardStatus.CARD_MAX_APPS; switch (family) { case UiccController.APP_FAM_3GPP : index = mGsmUmtsSubscriptionAppIndex; break; case UiccController.APP_FAM_3GPP2 : index = mCdmaSubscriptionAppIndex; break; case UiccController.APP_FAM_IMS : index = mImsSubscriptionAppIndex; break; } if ((index >= 0) && (index < (mUiccApplications.length))) { return mUiccApplications[index]; } return null; } }
public boolean resetAppWithAid(java.lang.String aid) { synchronized(mLock) { boolean changed = false; for (int i = 0; i < (mUiccApplications.length); i++) { if (((mUiccApplications[i]) != null) && ((android.text.TextUtils.isEmpty(aid)) || (aid.equals(mUiccApplications[i].getAid())))) { mUiccApplications[i].dispose(); mUiccApplications[i] = null; changed = true; } } if (android.text.TextUtils.isEmpty(aid)) { if ((mCarrierPrivilegeRules) != null) { mCarrierPrivilegeRules = null; changed = true; } if ((mCatService) != null) { mCatService.dispose(); mCatService = null; changed = true; } } return changed; } }
public int getCarrierPrivilegeStatus(android.content.pm.PackageInfo packageInfo) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : carrierPrivilegeRules.getCarrierPrivilegeStatus(packageInfo); }
public boolean areCarrierPriviligeRulesLoaded() { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return (carrierPrivilegeRules == null) || (carrierPrivilegeRules.areCarrierPriviligeRulesLoaded()); }
public void sendEnvelopeWithStatus(java.lang.String contents, android.os.Message response) { mCi.sendEnvelopeWithStatus(contents, response); }
public void iccOpenLogicalChannel(java.lang.String AID, int p2, android.os.Message response) { loglocal(((((((("Open Logical Channel: " + AID) + " , ") + p2) + " by pid:") + (android.os.Binder.getCallingPid())) + " uid:") + (android.os.Binder.getCallingUid()))); mCi.iccOpenLogicalChannel(AID, p2, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_OPEN_LOGICAL_CHANNEL_DONE, response)); }
public void iccTransmitApduBasicChannel(int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { mCi.iccTransmitApduBasicChannel(cla, command, p1, p2, p3, data, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_TRANSMIT_APDU_BASIC_CHANNEL_DONE, response)); }
public java.lang.String getIccId() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir != null) && ((ir.getIccId()) != null)) { return ir.getIccId(); } } } return null; }
private native void gattClientScanFilterAddNative(int client_if, int filter_type, int filter_index, int company_id, int company_id_mask, long uuid_lsb, long uuid_msb, long uuid_mask_lsb, long uuid_mask_msb, java.lang.String name, java.lang.String address, byte addr_type, byte[] data, byte[] mask);
public static long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.system.SendfileOffset inOffset, long byteCount) throws android.system.ErrnoException { libcore.util.MutableLong internalInOffset = new libcore.util.MutableLong(inOffset.value); try { return Libcore.os.sendfile(outFd, inFd, internalInOffset, byteCount); } finally { inOffset.value = internalInOffset.value; } }
public native int ioctlInt(java.io.FileDescriptor fd, int cmd, libcore.util.MutableInt arg) throws android.system.ErrnoException;
public native int waitpid(int pid, libcore.util.MutableInt status, int options) throws android.system.ErrnoException;
public int waitpid(int pid, libcore.util.MutableInt status, int options) throws android.system.ErrnoException { return os.waitpid(pid, status, options); }
public int ioctlInt(java.io.FileDescriptor fd, int cmd, libcore.util.MutableInt arg) throws android.system.ErrnoException { return os.ioctlInt(fd, cmd, arg); }
public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException { return os.sendfile(outFd, inFd, inOffset, byteCount); }
@java.lang.Override public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); return os.sendfile(outFd, inFd, inOffset, byteCount); }
public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException;
public int ioctlInt(java.io.FileDescriptor fd, int cmd, libcore.util.MutableInt arg) throws android.system.ErrnoException;
public int waitpid(int pid, libcore.util.MutableInt status, int options) throws android.system.ErrnoException;
@java.lang.Deprecated public static int waitpid(int pid, android.util.MutableInt status, int options) throws android.system.ErrnoException { if (status == null) { return Libcore.os.waitpid(pid, null, options); } else { libcore.util.MutableInt internalStatus = new libcore.util.MutableInt(status.value); try { return Libcore.os.waitpid(pid, internalStatus, options); } finally { status.value = internalStatus.value; } } }
public static int ioctlInt(java.io.FileDescriptor fd, int cmd, android.system.IoctlIntArg arg) throws android.system.ErrnoException { libcore.util.MutableInt internalArg = new libcore.util.MutableInt(arg.value); try { return Libcore.os.ioctlInt(fd, cmd, internalArg); } finally { arg.value = internalArg.value; } }
public static int waitpid(int pid, android.system.WaitpidStatus status, int options) throws android.system.ErrnoException { if (status == null) { return Libcore.os.waitpid(pid, null, options); } else { libcore.util.MutableInt internalStatus = new libcore.util.MutableInt(status.value); try { return Libcore.os.waitpid(pid, internalStatus, options); } finally { status.value = internalStatus.value; } } }
public native long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException;
public static int available(java.io.FileDescriptor fd) throws java.io.IOException { try { libcore.util.MutableInt available = new libcore.util.MutableInt(0); Libcore.os.ioctlInt(fd, libcore.io.FIONREAD, available); if ((available.value) < 0) { available.value = 0; } return available.value; } catch (android.system.ErrnoException errnoException) { if ((errnoException.errno) == (ENOTTY)) { return 0; } throw errnoException.rethrowAsIOException(); } }
@java.lang.Deprecated public static long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException { libcore.util.MutableLong internalInOffset = new libcore.util.MutableLong(inOffset.value); try { return Libcore.os.sendfile(outFd, inFd, internalInOffset, byteCount); } finally { inOffset.value = internalInOffset.value; } }
boolean hasOnlyDisconnectedCalls() { for (com.android.server.telecom.Call call : mCalls) { if (!(call.isDisconnected())) { return false; } } return true; }
public native long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException;
public static long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.system.Int64Ref inOffset, long byteCount) throws android.system.ErrnoException { if (inOffset == null) { return Libcore.os.sendfile(outFd, inFd, null, byteCount); } else { libcore.util.MutableLong internalInOffset = new libcore.util.MutableLong(inOffset.value); try { return Libcore.os.sendfile(outFd, inFd, internalInOffset, byteCount); } finally { inOffset.value = internalInOffset.value; } } }
@java.lang.Override public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); return os.sendfile(outFd, inFd, inOffset, byteCount); }
public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException { return os.sendfile(outFd, inFd, inOffset, byteCount); }
public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException;
public android.net.IpSecTransform buildTunnelModeTransform(java.net.InetAddress localAddress, java.net.InetAddress remoteAddress) { mConfig.setLocalAddress(localAddress.getHostAddress()); mConfig.setRemoteAddress(remoteAddress.getHostAddress()); mConfig.setMode(android.net.IpSecTransform.MODE_TUNNEL); return new android.net.IpSecTransform(mContext, mConfig); }
public android.net.IpSecTransform buildTransportModeTransform(java.net.InetAddress remoteAddress) throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { mConfig.setMode(android.net.IpSecTransform.MODE_TRANSPORT); mConfig.setRemoteAddress(remoteAddress.getHostAddress()); return new android.net.IpSecTransform(mContext, mConfig).activate(); }






@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice remoteDevice, android.bluetooth.BluetoothSocket socket) { mRemoteDevice = remoteDevice; if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ((("onConnect(): mRemoteDevice=" + (mRemoteDevice)) + " socket=") + socket)); } if (((mRemoteDevice) == null) || (socket == null)) { return false; } mConnSocket = socket; com.android.bluetooth.pbap.BluetoothPbapService.sRemoteDeviceName = mRemoteDevice.getName(); if (android.text.TextUtils.isEmpty(com.android.bluetooth.pbap.BluetoothPbapService.sRemoteDeviceName)) { com.android.bluetooth.pbap.BluetoothPbapService.sRemoteDeviceName = getString(R.string.defaultname); } int permission = mRemoteDevice.getPhonebookAccessPermission(); if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("getPhonebookAccessPermission() = " + permission)); } if (permission == (android.bluetooth.BluetoothDevice.ACCESS_ALLOWED)) { try { startObexServerSession(); } catch (java.io.IOException ex) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("Caught exception starting obex server session" + (ex.toString()))); } if (!(BluetoothPbapUtils.contactsLoaded)) { mSessionStatusHandler.sendMessage(mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.LOAD_CONTACTS)); } } else if (permission == (android.bluetooth.BluetoothDevice.ACCESS_REJECTED)) { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (("incoming connection rejected from: " + (com.android.bluetooth.pbap.BluetoothPbapService.sRemoteDeviceName)) + " automatically as already rejected device")); } return false; } else { android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_CONNECTION_ACCESS_REQUEST); intent.setClassName(com.android.bluetooth.pbap.BluetoothPbapService.ACCESS_AUTHORITY_PACKAGE, com.android.bluetooth.pbap.BluetoothPbapService.ACCESS_AUTHORITY_CLASS); intent.putExtra(BluetoothDevice.EXTRA_ACCESS_REQUEST_TYPE, BluetoothDevice.REQUEST_TYPE_PHONEBOOK_ACCESS); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mRemoteDevice); intent.putExtra(BluetoothDevice.EXTRA_PACKAGE_NAME, getPackageName()); mIsWaitingAuthorization = true; sendOrderedBroadcast(intent, com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM); if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("waiting for authorization for connection from: " + (com.android.bluetooth.pbap.BluetoothPbapService.sRemoteDeviceName))); } mSessionStatusHandler.sendMessageDelayed(mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.USER_TIMEOUT), com.android.bluetooth.pbap.BluetoothPbapService.USER_CONFIRM_TIMEOUT_VALUE); } return true; }
private void clearServerSocket() { if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); cleanUpSdpRecord(); if ((mServerSockets) != null) { mServerSockets.shutdown(false); mServerSockets = null; } }

@java.lang.Override protected boolean stop() { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "stop()"); if ((mContactChangeObserver) == null) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Avoid unregister when receiver it is not registered"); return true; } try { unregisterReceiver(mPbapReceiver); getContentResolver().unregisterContentObserver(mContactChangeObserver); mContactChangeObserver = null; } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Unable to unregister pbap receiver", e); } mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.SHUTDOWN).sendToTarget(); setState(BluetoothProfile.STATE_DISCONNECTED, BluetoothPbap.RESULT_CANCELED); return true; }
void disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH_ADMIN permission"); synchronized(this) { if ((mState) == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); setState(BluetoothProfile.STATE_DISCONNECTED, BluetoothPbap.RESULT_CANCELED); } } }
private void phoneStateChanged(int numActive, int numHeld, int callState, java.lang.String number, int type) { if (((numActive == 0) && (numHeld == 0)) && (callState == (HeadsetHalConstants.CALL_STATE_IDLE))) { setAnsweringDevice(null); } enforceCallingOrSelfPermission(android.Manifest.permission.MODIFY_PHONE_STATE, null); broadCastMessageToStateMachines(HeadsetStateMachine.CALL_STATE_CHANGED, new com.android.bluetooth.hfp.HeadsetCallState(numActive, numHeld, callState, number, type)); }
android.bluetooth.BluetoothDevice getAnsweringDevice() { return mAnsweringDevice; }
void connectionStateChanged(android.bluetooth.BluetoothDevice device, int newState, int prevState) { if ((prevState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (newState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.AUDIO_CONNECTABLE_STATES).size()) > 1) { mNativeInterface.configureInbandRingingEnabledUsingBsir(false); } } if ((prevState != (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) && (newState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED))) { if ((getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.AUDIO_CONNECTABLE_STATES).size()) <= 1) { mNativeInterface.configureInbandRingingEnabledUsingBsir(true); } } }
boolean connectAudio(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ("connectAudio, device=" + device)); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: device is null"); return false; } synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("connectAudio: device " + device) + " was never connected/connecting")); return false; } if ((stateMachine.getConnectionState()) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: profile not connected"); return false; } if (isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ("connectAudio: audio is not idle, current audio device is " + (getCurrentAudioDevice()))); return false; } stateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, device); } return true; }
void setAnsweringDevice(android.bluetooth.BluetoothDevice device) { mAnsweringDevice = device; }
public void dump(java.lang.StringBuilder sb) { com.android.bluetooth.btservice.ProfileService.println(sb, ("mCurrentDevice: " + (mCurrentDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mVirtualCallStarted: " + (mVirtualCallStarted))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mVoiceRecognitionStarted: " + (mVoiceRecognitionStarted))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mWaitingForVoiceRecognition: " + (mWaitingForVoiceRecognition))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mDialingOut: " + (mDialingOut))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mAudioRouteAllowed: " + (mAudioRouteAllowed))); com.android.bluetooth.btservice.ProfileService.println(sb, ("StateMachine: " + (this))); com.android.bluetooth.btservice.ProfileService.println(sb, ("PreviousState: " + (mPrevState))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mAudioState: " + (getAudioState()))); java.io.StringWriter stringWriter = new java.io.StringWriter(); java.io.PrintWriter printWriter = new java.io.PrintWriter(stringWriter); super.dump(new java.io.FileDescriptor(), printWriter, new java.lang.String[]{ }); printWriter.flush(); stringWriter.flush(); com.android.bluetooth.btservice.ProfileService.println(sb, ("StateMachineLog: " + (stringWriter.toString()))); }
private boolean isScoAcceptable() { if (mService.getForceScoAudio()) { return true; } return (mAudioRouteAllowed) && (((mVoiceRecognitionStarted) || (isInCall())) || ((android.bluetooth.BluetoothHeadset.isInbandRingingSupported(mService)) && (isRinging()))); }
@com.android.internal.annotations.VisibleForTesting public void answerCall(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "answerCall device is null"); return; } if ((mPhoneProxy) != null) { try { mPhoneProxy.answerCall(); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "Handsfree phone proxy null for answering call"); } }

private static void finalizerTimedOut(java.lang.Object object) { java.lang.String message = (((object.getClass().getName()) + ".finalize() timed out after ") + ((java.lang.Daemons.MAX_FINALIZE_NANOS) / (java.lang.Daemons.NANOS_PER_SECOND))) + " seconds"; java.lang.Exception syntheticException = new java.util.concurrent.TimeoutException(message); syntheticException.setStackTrace(java.lang.Daemons.FinalizerDaemon.INSTANCE.getStackTrace()); java.lang.Thread.UncaughtExceptionHandler h = java.lang.Thread.getDefaultUncaughtExceptionHandler(); try { android.system.Os.kill(android.system.Os.getpid(), OsConstants.SIGQUIT); java.lang.Thread.sleep(5000); } catch (java.lang.Exception e) { java.lang.System.logE("failed to send SIGQUIT", e); } catch (java.lang.OutOfMemoryError ignored) { } if (h == null) { java.lang.System.logE(message, syntheticException); java.lang.System.exit(2); } h.uncaughtException(java.lang.Thread.currentThread(), syntheticException); }




@org.junit.Test public void explicitDefaultZone() throws java.lang.Exception { com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country validCountryGb = createValidCountryGb(); java.lang.String gbTimeZoneId = validCountryGb.getTimeZones(0).getId(); com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country gbWithExplicitDefaultTimeZone = validCountryGb.toBuilder().setDefaultTimeZoneId(gbTimeZoneId).build(); com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.CountryZones gbCountryZones = createValidCountryZones(gbWithExplicitDefaultTimeZone); java.lang.String countryZonesFile = createCountryZonesFile(gbCountryZones); java.util.List<com.android.libcore.timezone.tzlookup.ZoneTabFile.CountryEntry> gbZoneTabEntries = createValidZoneTabEntriesGb(); java.lang.String zoneTabFile = createZoneTabFile(gbZoneTabEntries); java.lang.String outputFile = java.nio.file.Files.createTempFile(tempDir, "out", null).toString(); com.android.libcore.timezone.tzlookup.TzLookupGenerator tzLookupGenerator = new com.android.libcore.timezone.tzlookup.TzLookupGenerator(countryZonesFile, zoneTabFile, outputFile); assertTrue(tzLookupGenerator.execute()); java.nio.file.Path outputFilePath = java.nio.file.Paths.get(outputFile); assertTrue(java.nio.file.Files.exists(outputFilePath)); java.lang.String tzLookupXml = com.android.libcore.timezone.tzlookup.TzLookupGeneratorTest.readFileToString(outputFilePath); com.android.libcore.timezone.tzlookup.TestUtils.assertContains(tzLookupXml, (("code=\"gb\" default=\"" + gbTimeZoneId) + "\"")); }

@org.junit.Test public void calculatedDefaultZone() throws java.lang.Exception { com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country validCountryGb = createValidCountryGb(); junit.framework.TestCase.assertEquals(1, validCountryGb.getTimeZonesCount()); java.lang.String gbTimeZoneId = validCountryGb.getTimeZones(0).getId(); com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country gbWithoutDefault = validCountryGb.toBuilder().clearDefaultTimeZoneId().build(); com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.CountryZones gbCountryZones = createValidCountryZones(gbWithoutDefault); java.lang.String countryZonesFile = createCountryZonesFile(gbCountryZones); java.util.List<com.android.libcore.timezone.tzlookup.ZoneTabFile.CountryEntry> gbZoneTabEntries = createValidZoneTabEntriesGb(); java.lang.String zoneTabFile = createZoneTabFile(gbZoneTabEntries); java.lang.String outputFile = java.nio.file.Files.createTempFile(tempDir, "out", null).toString(); com.android.libcore.timezone.tzlookup.TzLookupGenerator tzLookupGenerator = new com.android.libcore.timezone.tzlookup.TzLookupGenerator(countryZonesFile, zoneTabFile, outputFile); assertTrue(tzLookupGenerator.execute()); java.nio.file.Path outputFilePath = java.nio.file.Paths.get(outputFile); assertTrue(java.nio.file.Files.exists(outputFilePath)); java.lang.String tzLookupXml = com.android.libcore.timezone.tzlookup.TzLookupGeneratorTest.readFileToString(outputFilePath); com.android.libcore.timezone.tzlookup.TestUtils.assertContains(tzLookupXml, (("code=\"gb\" default=\"" + gbTimeZoneId) + "\"")); }
private static long getSampleTimeMillisForData(java.lang.String inputIanaVersion) { java.lang.String yearString = inputIanaVersion.substring(0, ((inputIanaVersion.length()) - 1)); int year = (java.lang.Integer.parseInt(yearString)) + 1; com.ibm.icu.util.Calendar calendar = new com.ibm.icu.util.GregorianCalendar(com.ibm.icu.util.TimeZone.GMT_ZONE); calendar.clear(); calendar.set(year, Calendar.JULY, 2, 12, 0, 0); return calendar.getTimeInMillis(); }
@java.lang.Override public void startDtmf(char c, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_DTMF_START, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.startDtmf(rr.mSerial, (c + "")); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "startDtmf", e); } } }
@java.lang.Override public void getDeviceIdentity(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_DEVICE_IDENTITY, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getDeviceIdentity(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getDeviceIdentity", e); } } }
@java.lang.Override public void acknowledgeIncomingGsmSmsWithPdu(boolean success, java.lang.String ackPdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_ACKNOWLEDGE_INCOMING_GSM_SMS_WITH_PDU, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " success = ") + success)); } try { radioProxy.acknowledgeIncomingGsmSmsWithPdu(rr.mSerial, success, convertNullToEmptyString(ackPdu)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "acknowledgeIncomingGsmSmsWithPdu", e); } } }
@java.lang.Override public void setCallWaiting(boolean enable, int serviceClass, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_CALL_WAITING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " enable = ") + enable) + " serviceClass = ") + serviceClass)); } try { radioProxy.setCallWaiting(rr.mSerial, enable, serviceClass); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCallWaiting", e); } } }
@java.lang.Override public void queryCallForwardStatus(int cfReason, int serviceClass, java.lang.String number, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_QUERY_CALL_FORWARD_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " cfreason = ") + cfReason) + " serviceClass = ") + serviceClass)); } android.hardware.radio.V1_0.CallForwardInfo cfInfo = new android.hardware.radio.V1_0.CallForwardInfo(); cfInfo.reason = cfReason; cfInfo.serviceClass = serviceClass; cfInfo.toa = android.telephony.PhoneNumberUtils.toaFromString(number); cfInfo.number = convertNullToEmptyString(number); cfInfo.timeSeconds = 0; try { radioProxy.getCallForwardStatus(rr.mSerial, cfInfo); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "queryCallForwardStatus", e); } } }
@java.lang.Override public void changeBarringPassword(java.lang.String facility, java.lang.String oldPwd, java.lang.String newPwd, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CHANGE_BARRING_PASSWORD, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "facility = ") + facility)); } try { radioProxy.setBarringPassword(rr.mSerial, convertNullToEmptyString(facility), convertNullToEmptyString(oldPwd), convertNullToEmptyString(newPwd)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "changeBarringPassword", e); } } }
@java.lang.Override public void supplyIccPukForApp(java.lang.String puk, java.lang.String newPin, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_ENTER_SIM_PUK, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " aid = ") + aid)); } try { radioProxy.supplyIccPukForApp(rr.mSerial, convertNullToEmptyString(puk), convertNullToEmptyString(newPin), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "supplyIccPukForApp", e); } } }
@java.lang.Override public void setPreferredNetworkType(int networkType, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_PREFERRED_NETWORK_TYPE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " networkType = ") + networkType)); } mPreferredNetworkType = networkType; mMetrics.writeSetPreferredNetworkType(mPhoneId, networkType); try { radioProxy.setPreferredNetworkType(rr.mSerial, networkType); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setPreferredNetworkType", e); } } }
@java.lang.Override public void getSignalStrength(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SIGNAL_STRENGTH, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getSignalStrength(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getSignalStrength", e); } } }
@java.lang.Override public void getHardwareConfig(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_HARDWARE_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getHardwareConfig(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getHardwareConfig", e); } } }
@java.lang.Override public void getCellInfoList(android.os.Message result, android.os.WorkSource workSource) { workSource = getDeafultWorkSourceIfInvalid(workSource); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_CELL_INFO_LIST, result, workSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getCellInfoList(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getCellInfoList", e); } } }
@java.lang.Override public void sendUSSD(java.lang.String ussd, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SEND_USSD, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { java.lang.String logUssd = "*******"; if (com.android.internal.telephony.RIL.RILJ_LOGV) logUssd = ussd; riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " ussd = ") + logUssd)); } try { radioProxy.sendUssd(rr.mSerial, convertNullToEmptyString(ussd)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendUSSD", e); } } }
@java.lang.Override public void rejectCall(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_UDUB, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.rejectCall(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "rejectCall", e); } } }
@java.lang.Override public void startLceService(int reportIntervalMs, boolean pullMode, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_START_LCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " reportIntervalMs = ") + reportIntervalMs) + " pullMode = ") + pullMode)); } try { radioProxy.startLceService(rr.mSerial, reportIntervalMs, pullMode); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "startLceService", e); } } }
@java.lang.Override public void getBasebandVersion(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_BASEBAND_VERSION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getBasebandVersion(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getBasebandVersion", e); } } }
@java.lang.Override public void separateConnection(int gsmIndex, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SEPARATE_CONNECTION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " gsmIndex = ") + gsmIndex)); } try { radioProxy.separateConnection(rr.mSerial, gsmIndex); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "separateConnection", e); } } }
@java.lang.Override public void nvWriteCdmaPrl(byte[] preferredRoamingList, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_NV_WRITE_CDMA_PRL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " PreferredRoamingList = 0x") + (com.android.internal.telephony.uicc.IccUtils.bytesToHexString(preferredRoamingList)))); } java.util.ArrayList<java.lang.Byte> arrList = new java.util.ArrayList<>(); for (int i = 0; i < (preferredRoamingList.length); i++) { arrList.add(preferredRoamingList[i]); } try { radioProxy.nvWriteCdmaPrl(rr.mSerial, arrList); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "nvWriteCdmaPrl", e); } } }
@java.lang.Override public void supplyIccPuk2ForApp(java.lang.String puk, java.lang.String newPin2, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_ENTER_SIM_PUK2, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " aid = ") + aid)); } try { radioProxy.supplyIccPuk2ForApp(rr.mSerial, convertNullToEmptyString(puk), convertNullToEmptyString(newPin2), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "supplyIccPuk2ForApp", e); } } }
@java.lang.Override public void getPreferredVoicePrivacy(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getPreferredVoicePrivacy(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getPreferredVoicePrivacy", e); } } }
@java.lang.Override public void sendCDMAFeatureCode(java.lang.String featureCode, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_FLASH, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " featureCode = ") + featureCode)); } try { radioProxy.sendCDMAFeatureCode(rr.mSerial, convertNullToEmptyString(featureCode)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendCDMAFeatureCode", e); } } }
@java.lang.Override public void conference(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CONFERENCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.conference(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "conference", e); } } }
@java.lang.Override public void getOperator(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_OPERATOR, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getOperator(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getOperator", e); } } }
@java.lang.Override public void setFacilityLockForApp(java.lang.String facility, boolean lockState, java.lang.String password, int serviceClass, java.lang.String appId, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_FACILITY_LOCK, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " facility = ") + facility) + " lockstate = ") + lockState) + " serviceClass = ") + serviceClass) + " appId = ") + appId)); } try { radioProxy.setFacilityLockForApp(rr.mSerial, convertNullToEmptyString(facility), lockState, convertNullToEmptyString(password), serviceClass, convertNullToEmptyString(appId)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setFacilityLockForApp", e); } } }
@java.lang.Override public void exitEmergencyCallbackMode(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_EXIT_EMERGENCY_CALLBACK_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.exitEmergencyCallbackMode(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "exitEmergencyCallbackMode", e); } } }
@java.lang.Override public void getCdmaSubscriptionSource(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_GET_SUBSCRIPTION_SOURCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getCdmaSubscriptionSource(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getCdmaSubscriptionSource", e); } } }
@java.lang.Override public void setUiccSubscription(int slotId, int appIndex, int subId, int subStatus, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_UICC_SUBSCRIPTION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " slot = ") + slotId) + " appIndex = ") + appIndex) + " subId = ") + subId) + " subStatus = ") + subStatus)); } android.hardware.radio.V1_0.SelectUiccSub info = new android.hardware.radio.V1_0.SelectUiccSub(); info.slot = slotId; info.appIndex = appIndex; info.subType = subId; info.actStatus = subStatus; try { radioProxy.setUiccSubscription(rr.mSerial, info); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setUiccSubscription", e); } } }
@java.lang.Override public void setInitialAttachApn(android.telephony.data.DataProfile dataProfile, boolean isRoaming, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_INITIAL_ATTACH_APN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + dataProfile)); } try { radioProxy.setInitialAttachApn(rr.mSerial, com.android.internal.telephony.RIL.convertToHalDataProfile(dataProfile), dataProfile.isModemCognitive(), isRoaming); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setInitialAttachApn", e); } } }
@java.lang.Override public void reportSmsMemoryStatus(boolean available, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_REPORT_SMS_MEMORY_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " available = ") + available)); } try { radioProxy.reportSmsMemoryStatus(rr.mSerial, available); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "reportSmsMemoryStatus", e); } } }
@java.lang.Override public void getIccCardStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SIM_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getIccCardStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getIccCardStatus", e); } } }
@java.lang.Override public void deleteSmsOnSim(int index, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_DELETE_SMS_ON_SIM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGV) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " index = ") + index)); } try { radioProxy.deleteSmsOnSim(rr.mSerial, index); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "deleteSmsOnSim", e); } } }
@java.lang.Override public void writeSmsToSim(int status, java.lang.String smsc, java.lang.String pdu, android.os.Message result) { status = translateStatus(status); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_WRITE_SMS_TO_SIM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGV) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " ") + status)); } android.hardware.radio.V1_0.SmsWriteArgs args = new android.hardware.radio.V1_0.SmsWriteArgs(); args.status = status; args.smsc = convertNullToEmptyString(smsc); args.pdu = convertNullToEmptyString(pdu); try { radioProxy.writeSmsToSim(rr.mSerial, args); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "writeSmsToSim", e); } } }
@java.lang.Override public void setCdmaBroadcastActivation(boolean activate, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_BROADCAST_ACTIVATION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " activate = ") + activate)); } try { radioProxy.setCdmaBroadcastActivation(rr.mSerial, activate); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCdmaBroadcastActivation", e); } } }
@java.lang.Override public void sendDeviceState(int stateType, boolean state, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SEND_DEVICE_STATE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " ") + stateType) + ":") + state)); } try { radioProxy.sendDeviceState(rr.mSerial, stateType, state); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendDeviceState", e); } } }
@java.lang.Override public void setRadioPower(boolean on, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_RADIO_POWER, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " on = ") + on)); } try { radioProxy.setRadioPower(rr.mSerial, on); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setRadioPower", e); } } }
@java.lang.Override public void setSimCardPower(int state, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_SIM_CARD_POWER, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " ") + state)); } android.hardware.radio.V1_1.IRadio radioProxy11 = android.hardware.radio.V1_1.IRadio.castFrom(radioProxy); if (radioProxy11 == null) { try { switch (state) { case android.telephony.TelephonyManager.CARD_POWER_DOWN : { radioProxy.setSimCardPower(rr.mSerial, false); break; } case android.telephony.TelephonyManager.CARD_POWER_UP : { radioProxy.setSimCardPower(rr.mSerial, true); break; } default : { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } } } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setSimCardPower", e); } } else { try { radioProxy11.setSimCardPower_1_1(rr.mSerial, state); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setSimCardPower", e); } } } }
@java.lang.Override public void setGsmBroadcastActivation(boolean activate, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GSM_BROADCAST_ACTIVATION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " activate = ") + activate)); } try { radioProxy.setGsmBroadcastActivation(rr.mSerial, activate); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setGsmBroadcastActivation", e); } } }
@java.lang.Override public void sendDtmf(char c, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_DTMF, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.sendDtmf(rr.mSerial, (c + "")); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendDtmf", e); } } }
@java.lang.Override public void getImsRegistrationState(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_IMS_REGISTRATION_STATE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getImsRegistrationState(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getImsRegistrationState", e); } } }
@java.lang.Override public void explicitCallTransfer(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_EXPLICIT_CALL_TRANSFER, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.explicitCallTransfer(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "explicitCallTransfer", e); } } }
@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SLOT_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.getSimSlotsStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getIccSlotStatus", e); } } } }
@java.lang.Override public void sendBurstDtmf(java.lang.String dtmfString, int on, int off, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_BURST_DTMF, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " dtmfString = ") + dtmfString) + " on = ") + on) + " off = ") + off)); } try { radioProxy.sendBurstDtmf(rr.mSerial, convertNullToEmptyString(dtmfString), on, off); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendBurstDtmf", e); } } }
@java.lang.Override public void getRadioCapability(android.os.Message response) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(response); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_RADIO_CAPABILITY, response, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getRadioCapability(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getRadioCapability", e); } } }
@java.lang.Override public void setDataProfile(android.telephony.data.DataProfile[] dps, boolean isRoaming, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_DATA_PROFILE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " with data profiles : ")); for (android.telephony.data.DataProfile profile : dps) { riljLog(profile.toString()); } } java.util.ArrayList<android.hardware.radio.V1_0.DataProfileInfo> dpis = new java.util.ArrayList<>(); for (android.telephony.data.DataProfile dp : dps) { dpis.add(com.android.internal.telephony.RIL.convertToHalDataProfile(dp)); } try { radioProxy.setDataProfile(rr.mSerial, dpis, isRoaming); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setDataProfile", e); } } }
@java.lang.Override public void iccTransmitApduLogicalChannel(int channel, int cla, int instruction, int p1, int p2, int p3, java.lang.String data, android.os.Message result) { if (channel <= 0) { throw new java.lang.RuntimeException(("Invalid channel in iccTransmitApduLogicalChannel: " + channel)); } android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SIM_TRANSMIT_APDU_CHANNEL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { if (android.os.Build.IS_DEBUGGABLE) { riljLog(((((((((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " channel = ") + channel) + " cla = ") + cla) + " instruction = ") + instruction) + " p1 = ") + p1) + " p2 = ") + " p3 = ") + p3) + " data = ") + data)); } else { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } } android.hardware.radio.V1_0.SimApdu msg = createSimApdu(channel, cla, instruction, p1, p2, p3, data); try { radioProxy.iccTransmitApduLogicalChannel(rr.mSerial, msg); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "iccTransmitApduLogicalChannel", e); } } }
@java.lang.Override public void getVoiceRegistrationState(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_VOICE_REGISTRATION_STATE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getVoiceRegistrationState(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getVoiceRegistrationState", e); } } }
@java.lang.Override public void getDataCallList(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_DATA_CALL_LIST, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getDataCallList(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getDataCallList", e); } } }
@java.lang.Override public void handleCallSetupRequestFromSim(boolean accept, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_STK_HANDLE_CALL_SETUP_REQUESTED_FROM_SIM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.handleStkCallSetupRequestFromSim(rr.mSerial, accept); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getAllowedCarriers", e); } } }
@java.lang.Override public void acknowledgeLastIncomingCdmaSms(boolean success, int cause, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_SMS_ACKNOWLEDGE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " success = ") + success) + " cause = ") + cause)); } android.hardware.radio.V1_0.CdmaSmsAck msg = new android.hardware.radio.V1_0.CdmaSmsAck(); msg.errorClass = (success) ? 0 : 1; msg.smsCauseCode = cause; try { radioProxy.acknowledgeLastIncomingCdmaSms(rr.mSerial, msg); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "acknowledgeLastIncomingCdmaSms", e); } } }
@java.lang.Override public void getPreferredNetworkType(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_PREFERRED_NETWORK_TYPE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getPreferredNetworkType(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getPreferredNetworkType", e); } } }
@java.lang.Override public void sendEnvelope(java.lang.String contents, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_STK_SEND_ENVELOPE_COMMAND, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " contents = ") + contents)); } try { radioProxy.sendEnvelope(rr.mSerial, convertNullToEmptyString(contents)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendEnvelope", e); } } }
@java.lang.Override public void getGsmBroadcastConfig(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GSM_GET_BROADCAST_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getGsmBroadcastConfig(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getGsmBroadcastConfig", e); } } }
@java.lang.Override public void setCellInfoListRate(int rateInMillis, android.os.Message result, android.os.WorkSource workSource) { workSource = getDeafultWorkSourceIfInvalid(workSource); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_UNSOL_CELL_INFO_LIST_RATE, result, workSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " rateInMillis = ") + rateInMillis)); } try { radioProxy.setCellInfoListRate(rr.mSerial, rateInMillis); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCellInfoListRate", e); } } }
@java.lang.Override public void getVoiceRadioTechnology(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_VOICE_RADIO_TECH, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getVoiceRadioTechnology(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getVoiceRadioTechnology", e); } } }
@java.lang.Override public void getNeighboringCids(android.os.Message result, android.os.WorkSource workSource) { workSource = getDeafultWorkSourceIfInvalid(workSource); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_NEIGHBORING_CELL_IDS, result, workSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getNeighboringCids(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getNeighboringCids", e); } } }
@java.lang.Override public void nvResetConfig(int resetType, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_NV_RESET_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " resetType = ") + resetType)); } try { radioProxy.nvResetConfig(rr.mSerial, com.android.internal.telephony.RIL.convertToHalResetNvType(resetType)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "nvResetConfig", e); } } }
@java.lang.Override public void changeIccPin2ForApp(java.lang.String oldPin2, java.lang.String newPin2, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CHANGE_SIM_PIN2, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " oldPin = ") + oldPin2) + " newPin = ") + newPin2) + " aid = ") + aid)); } try { radioProxy.changeIccPin2ForApp(rr.mSerial, convertNullToEmptyString(oldPin2), convertNullToEmptyString(newPin2), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "changeIccPin2ForApp", e); } } }
@java.lang.Override public void requestShutdown(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SHUTDOWN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.requestShutdown(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "requestShutdown", e); } } }
@org.junit.Test @android.support.test.filters.SmallTest public void testParcel() { int ranGsm = android.telephony.RadioNetworkConstants.RadioAccessNetworks.GERAN; int[] gsmBands = new int[]{ android.telephony.RadioNetworkConstants.GeranBands.BAND_T380, android.telephony.RadioNetworkConstants.GeranBands.BAND_T410 }; int[] gsmChannels = new int[]{ 1, 2, 3, 4 }; android.telephony.RadioAccessSpecifier ras = new android.telephony.RadioAccessSpecifier(ranGsm, gsmBands, gsmChannels); android.os.Parcel p = android.os.Parcel.obtain(); ras.writeToParcel(p, 0); p.setDataPosition(0); android.telephony.RadioAccessSpecifier newRas = RadioAccessSpecifier.CREATOR.createFromParcel(p); assertEquals(ras, newRas); }
@org.junit.Test @android.support.test.filters.SmallTest public void testParcel() { int ranGsm = android.telephony.RadioNetworkConstants.RadioAccessNetworks.GERAN; int[] gsmBands = new int[]{ android.telephony.RadioNetworkConstants.GeranBands.BAND_T380, android.telephony.RadioNetworkConstants.GeranBands.BAND_T410 }; int[] gsmChannels = new int[]{ 1, 2, 3, 4 }; android.telephony.RadioAccessSpecifier gsm = new android.telephony.RadioAccessSpecifier(ranGsm, gsmBands, gsmChannels); int ranLte = android.telephony.RadioNetworkConstants.RadioAccessNetworks.EUTRAN; int[] lteBands = new int[]{ android.telephony.RadioNetworkConstants.EutranBands.BAND_10, android.telephony.RadioNetworkConstants.EutranBands.BAND_11 }; int[] lteChannels = new int[]{ 5, 6, 7, 8 }; android.telephony.RadioAccessSpecifier lte = new android.telephony.RadioAccessSpecifier(ranLte, lteBands, lteChannels); android.telephony.RadioAccessSpecifier[] ras = new android.telephony.RadioAccessSpecifier[]{ gsm, lte }; int searchPeriodicity = 70; int maxSearchTime = 200; boolean incrementalResults = true; int incrementalResultsPeriodicity = 7; java.util.ArrayList<java.lang.String> mccmncs = new java.util.ArrayList<java.lang.String>(); mccmncs.add("310480"); mccmncs.add("21002"); android.telephony.NetworkScanRequest nsq = new android.telephony.NetworkScanRequest(android.telephony.NetworkScanRequest.SCAN_TYPE_ONE_SHOT, ras, searchPeriodicity, maxSearchTime, incrementalResults, incrementalResultsPeriodicity, mccmncs); android.os.Parcel p = android.os.Parcel.obtain(); nsq.writeToParcel(p, 0); p.setDataPosition(0); android.telephony.NetworkScanRequest newNsq = NetworkScanRequest.CREATOR.createFromParcel(p); assertEquals(nsq, newNsq); }
@java.lang.Override public void queryAvailableBandMode(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_QUERY_AVAILABLE_BAND_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getAvailableBandModes(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "queryAvailableBandMode", e); } } }
@java.lang.Override public void iccTransmitApduBasicChannel(int cla, int instruction, int p1, int p2, int p3, java.lang.String data, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SIM_TRANSMIT_APDU_BASIC, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { if (android.os.Build.IS_DEBUGGABLE) { riljLog(((((((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " cla = ") + cla) + " instruction = ") + instruction) + " p1 = ") + p1) + " p2 = ") + " p3 = ") + p3) + " data = ") + data)); } else { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } } android.hardware.radio.V1_0.SimApdu msg = createSimApdu(0, cla, instruction, p1, p2, p3, data); try { radioProxy.iccTransmitApduBasicChannel(rr.mSerial, msg); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "iccTransmitApduBasicChannel", e); } } }
@java.lang.Override public void changeIccPinForApp(java.lang.String oldPin, java.lang.String newPin, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CHANGE_SIM_PIN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " oldPin = ") + oldPin) + " newPin = ") + newPin) + " aid = ") + aid)); } try { radioProxy.changeIccPinForApp(rr.mSerial, convertNullToEmptyString(oldPin), convertNullToEmptyString(newPin), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "changeIccPinForApp", e); } } }
@java.lang.Override public void setSmscAddress(java.lang.String address, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_SMSC_ADDRESS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " address = ") + address)); } try { radioProxy.setSmscAddress(rr.mSerial, convertNullToEmptyString(address)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setSmscAddress", e); } } }
@java.lang.Override public void getModemActivityInfo(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_ACTIVITY_INFO, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getModemActivityInfo(rr.mSerial); android.os.Message msg = mRilHandler.obtainMessage(com.android.internal.telephony.RIL.EVENT_BLOCKING_RESPONSE_TIMEOUT); msg.obj = null; msg.arg1 = rr.mSerial; mRilHandler.sendMessageDelayed(msg, com.android.internal.telephony.RIL.DEFAULT_BLOCKING_MESSAGE_RESPONSE_TIMEOUT_MS); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getModemActivityInfo", e); } } }
@java.lang.Override public void getAvailableNetworks(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_QUERY_AVAILABLE_NETWORKS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getAvailableNetworks(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getAvailableNetworks", e); } } }
@java.lang.Override public void stopNetworkScan(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_1.IRadio radioProxy11 = android.hardware.radio.V1_1.IRadio.castFrom(radioProxy); if (radioProxy11 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_STOP_NETWORK_SCAN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy11.stopNetworkScan(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "stopNetworkScan", e); } } } }
@java.lang.Override public void iccOpenLogicalChannel(java.lang.String aid, int p2, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SIM_OPEN_CHANNEL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { if (android.os.Build.IS_DEBUGGABLE) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " aid = ") + aid) + " p2 = ") + p2)); } else { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } } try { radioProxy.iccOpenLogicalChannel(rr.mSerial, convertNullToEmptyString(aid), p2); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "iccOpenLogicalChannel", e); } } }
@java.lang.Override public void getIMSIForApp(java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_IMSI, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " aid = ") + aid)); } try { radioProxy.getImsiForApp(rr.mSerial, convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getIMSIForApp", e); } } }
@java.lang.Override public void hangupForegroundResumeBackground(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.hangupForegroundResumeBackground(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "hangupForegroundResumeBackground", e); } } }
@java.lang.Override public void stopDtmf(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_DTMF_STOP, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.stopDtmf(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "stopDtmf", e); } } }
@java.lang.Override public void queryCallWaiting(int serviceClass, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_QUERY_CALL_WAITING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " serviceClass = ") + serviceClass)); } try { radioProxy.getCallWaiting(rr.mSerial, serviceClass); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "queryCallWaiting", e); } } }
@java.lang.Override public void setCdmaBroadcastConfig(com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[] configs, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_SET_BROADCAST_CONFIG, result, mRILDefaultWorkSource); java.util.ArrayList<android.hardware.radio.V1_0.CdmaBroadcastSmsConfigInfo> halConfigs = new java.util.ArrayList<>(); for (com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo config : configs) { for (int i = config.getFromServiceCategory(); i <= (config.getToServiceCategory()); i++) { android.hardware.radio.V1_0.CdmaBroadcastSmsConfigInfo info = new android.hardware.radio.V1_0.CdmaBroadcastSmsConfigInfo(); info.serviceCategory = i; info.language = config.getLanguage(); info.selected = config.isSelected(); halConfigs.add(info); } } if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " with ") + (halConfigs.size())) + " configs : ")); for (android.hardware.radio.V1_0.CdmaBroadcastSmsConfigInfo config : halConfigs) { riljLog(config.toString()); } } try { radioProxy.setCdmaBroadcastConfig(rr.mSerial, halConfigs); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCdmaBroadcastConfig", e); } } }
@java.lang.Override public void setLocationUpdates(boolean enable, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_LOCATION_UPDATES, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " enable = ") + enable)); } try { radioProxy.setLocationUpdates(rr.mSerial, enable); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setLocationUpdates", e); } } }
@java.lang.Override public void setCdmaRoamingPreference(int cdmaRoamingType, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_SET_ROAMING_PREFERENCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " cdmaRoamingType = ") + cdmaRoamingType)); } try { radioProxy.setCdmaRoamingPreference(rr.mSerial, cdmaRoamingType); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCdmaRoamingPreference", e); } } }
@java.lang.Override public void getAllowedCarriers(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_ALLOWED_CARRIERS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getAllowedCarriers(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getAllowedCarriers", e); } } }
@java.lang.Override public void sendImsCdmaSms(byte[] pdu, int retry, int messageRef, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_IMS_SEND_SMS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.ImsSmsMessage msg = new android.hardware.radio.V1_0.ImsSmsMessage(); msg.tech = com.android.internal.telephony.RILConstants.RILConstants.CDMA_PHONE; msg.retry = (((byte) (retry)) == 1) ? true : false; msg.messageRef = messageRef; android.hardware.radio.V1_0.CdmaSmsMessage cdmaMsg = new android.hardware.radio.V1_0.CdmaSmsMessage(); constructCdmaSendSmsRilRequest(cdmaMsg, pdu); msg.cdmaMessage.add(cdmaMsg); try { radioProxy.sendImsSms(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_IMS, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendImsCdmaSms", e); } } }
@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SETUP_DATA_CALL, result, mRILDefaultWorkSource); android.hardware.radio.V1_0.DataProfileInfo dpi = com.android.internal.telephony.RIL.convertToHalDataProfile(dataProfile); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + ",radioTechnology=") + radioTechnology) + ",isRoaming=") + isRoaming) + ",allowRoaming=") + allowRoaming) + ",") + dataProfile)); } try { radioProxy.setupDataCall(rr.mSerial, radioTechnology, dpi, dataProfile.isModemCognitive(), allowRoaming, isRoaming); mMetrics.writeRilSetupDataCall(mPhoneId, rr.mSerial, radioTechnology, dpi.profileId, dpi.apn, dpi.authType, dpi.protocol); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setupDataCall", e); } } }
@java.lang.Override public void requestIccSimAuthentication(int authContext, java.lang.String data, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SIM_AUTHENTICATION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.requestIccSimAuthentication(rr.mSerial, authContext, convertNullToEmptyString(data), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "requestIccSimAuthentication", e); } } }
@java.lang.Override public void queryTTYMode(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_QUERY_TTY_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getTTYMode(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "queryTTYMode", e); } } }
@java.lang.Override public void setUnsolResponseFilter(int filter, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_UNSOLICITED_RESPONSE_FILTER, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " ") + filter)); } try { radioProxy.setIndicationFilter(rr.mSerial, filter); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setIndicationFilter", e); } } }
@java.lang.Override public void setDataAllowed(boolean allowed, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_ALLOW_DATA, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " allowed = ") + allowed)); } try { radioProxy.setDataAllowed(rr.mSerial, allowed); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setDataAllowed", e); } } }
@java.lang.Override public void sendTerminalResponse(java.lang.String contents, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_STK_SEND_TERMINAL_RESPONSE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " contents = ") + (android.os.Build.IS_DEBUGGABLE ? contents : censoredTerminalResponse(contents)))); } try { radioProxy.sendTerminalResponseToSim(rr.mSerial, convertNullToEmptyString(contents)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendTerminalResponse", e); } } }
@java.lang.Override public void setBandMode(int bandMode, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_BAND_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " bandMode = ") + bandMode)); } try { radioProxy.setBandMode(rr.mSerial, bandMode); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setBandMode", e); } } }
private android.telephony.RadioAccessSpecifier convertRadioAccessSpecifierToRadioHAL(android.telephony.RadioAccessSpecifier ras) { android.hardware.radio.V1_1.RadioAccessSpecifier rasInHalFormat = new android.hardware.radio.V1_1.RadioAccessSpecifier(); rasInHalFormat.radioAccessNetwork = ras.getRadioAccessNetwork(); java.util.List<java.lang.Integer> bands = null; switch (ras.getRadioAccessNetwork()) { case android.telephony.RadioNetworkConstants.RadioAccessNetworks.GERAN : bands = rasInHalFormat.geranBands; break; case android.telephony.RadioNetworkConstants.RadioAccessNetworks.UTRAN : bands = rasInHalFormat.utranBands; break; case android.telephony.RadioNetworkConstants.RadioAccessNetworks.EUTRAN : bands = rasInHalFormat.eutranBands; break; default : android.util.Log.wtf(com.android.internal.telephony.RIL.RILJ_LOG_TAG, (("radioAccessNetwork " + (ras.getRadioAccessNetwork())) + " not supported!")); return null; } if ((ras.getBands()) != null) { for (int band : ras.getBands()) { bands.add(band); } } if ((ras.getChannels()) != null) { for (int channel : ras.getChannels()) { rasInHalFormat.channels.add(channel); } } return rasInHalFormat; }
@java.lang.Override public void getCdmaBroadcastConfig(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_GET_BROADCAST_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getCdmaBroadcastConfig(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getCdmaBroadcastConfig", e); } } }
@java.lang.Override public void iccCloseLogicalChannel(int channel, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SIM_CLOSE_CHANNEL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " channel = ") + channel)); } try { radioProxy.iccCloseLogicalChannel(rr.mSerial, channel); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "iccCloseLogicalChannel", e); } } }
@java.lang.Override public void setLogicalToPhysicalSlotMapping(int[] physicalSlots, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { java.util.ArrayList<java.lang.Integer> mapping = new java.util.ArrayList<>(); for (int slot : physicalSlots) { mapping.add(new java.lang.Integer(slot)); } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_LOGICAL_TO_PHYSICAL_SLOT_MAPPING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setSimSlotsMapping(rr.mSerial, mapping); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setLogicalToPhysicalSlotMapping", e); } } } }
private static java.lang.Object getResponseForTimedOutRILRequest(com.android.internal.telephony.RILRequest rr) { if (rr == null) return null; java.lang.Object timeoutResponse = null; switch (rr.mRequest) { case RIL_REQUEST_GET_ACTIVITY_INFO : timeoutResponse = new android.telephony.ModemActivityInfo(0, 0, 0, new int[android.telephony.ModemActivityInfo.TX_POWER_LEVELS], 0, 0); break; } return timeoutResponse; }
@com.android.internal.annotations.VisibleForTesting public android.hardware.radio.V1_0.IRadio getRadioProxy(android.os.Message result) { if (!(mIsMobileNetworkSupported)) { if (com.android.internal.telephony.RIL.RILJ_LOGV) riljLog("getRadioProxy: Not calling getService(): wifi-only"); if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.RADIO_NOT_AVAILABLE)); result.sendToTarget(); } return null; } if ((mRadioProxy) != null) { return mRadioProxy; } try { mRadioProxy = android.hardware.radio.V1_0.IRadio.getService(com.android.internal.telephony.RIL.HIDL_SERVICE_NAME[((mPhoneId) == null ? 0 : mPhoneId)]); if ((mRadioProxy) != null) { mRadioProxy.linkToDeath(mRadioProxyDeathRecipient, mRadioProxyCookie.incrementAndGet()); mRadioProxy.setResponseFunctions(mRadioResponse, mRadioIndication); } else { riljLoge("getRadioProxy: mRadioProxy == null"); } } catch (android.os.RemoteException | java.lang.RuntimeException e) { mRadioProxy = null; riljLoge(("RadioProxy getService/setResponseFunctions: " + e)); } if ((mRadioProxy) == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.RADIO_NOT_AVAILABLE)); result.sendToTarget(); } mRilHandler.sendMessageDelayed(mRilHandler.obtainMessage(com.android.internal.telephony.RIL.EVENT_RADIO_PROXY_DEAD, mRadioProxyCookie.incrementAndGet()), com.android.internal.telephony.RIL.IRADIO_GET_SERVICE_DELAY_MILLIS); } return mRadioProxy; }
private void resetProxyAndRequestList() { mRadioProxy = null; mRadioProxyCookie.incrementAndGet(); setRadioState(RadioState.RADIO_UNAVAILABLE); com.android.internal.telephony.RILRequest.resetSerial(); clearRequestList(com.android.internal.telephony.RADIO_NOT_AVAILABLE, false); }
@java.lang.Override public void getNetworkSelectionMode(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_QUERY_NETWORK_SELECTION_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getNetworkSelectionMode(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getNetworkSelectionMode", e); } } }
@java.lang.Override public void getLastCallFailCause(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_LAST_CALL_FAIL_CAUSE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getLastCallFailCause(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getLastCallFailCause", e); } } }
@java.lang.Override public void supplyNetworkDepersonalization(java.lang.String netpin, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_ENTER_NETWORK_DEPERSONALIZATION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " netpin = ") + netpin)); } try { radioProxy.supplyNetworkDepersonalization(rr.mSerial, convertNullToEmptyString(netpin)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "supplyNetworkDepersonalization", e); } } }
@java.lang.Override public void supplyIccPin2ForApp(java.lang.String pin, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_ENTER_SIM_PIN2, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " aid = ") + aid)); } try { radioProxy.supplyIccPin2ForApp(rr.mSerial, convertNullToEmptyString(pin), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "supplyIccPin2ForApp", e); } } }
@java.lang.Override public void cancelPendingUssd(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CANCEL_USSD, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.cancelPendingUssd(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "cancelPendingUssd", e); } } }
@java.lang.Override public void writeSmsToRuim(int status, java.lang.String pdu, android.os.Message result) { status = translateStatus(status); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_WRITE_SMS_TO_RUIM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGV) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " status = ") + status)); } android.hardware.radio.V1_0.CdmaSmsWriteArgs args = new android.hardware.radio.V1_0.CdmaSmsWriteArgs(); args.status = status; constructCdmaSendSmsRilRequest(args.message, pdu.getBytes()); try { radioProxy.writeSmsToRuim(rr.mSerial, args); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "writeSmsToRuim", e); } } }
@java.lang.Override public void setMute(boolean enableMute, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_MUTE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " enableMute = ") + enableMute)); } try { radioProxy.setMute(rr.mSerial, enableMute); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setMute", e); } } }
@java.lang.Override public void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[] config, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GSM_SET_BROADCAST_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " with ") + (config.length)) + " configs : ")); for (int i = 0; i < (config.length); i++) { riljLog(config[i].toString()); } } java.util.ArrayList<android.hardware.radio.V1_0.GsmBroadcastSmsConfigInfo> configs = new java.util.ArrayList<>(); int numOfConfig = config.length; android.hardware.radio.V1_0.GsmBroadcastSmsConfigInfo info; for (int i = 0; i < numOfConfig; i++) { info = new android.hardware.radio.V1_0.GsmBroadcastSmsConfigInfo(); info.fromServiceId = config[i].getFromServiceId(); info.toServiceId = config[i].getToServiceId(); info.fromCodeScheme = config[i].getFromCodeScheme(); info.toCodeScheme = config[i].getToCodeScheme(); info.selected = config[i].isSelected(); configs.add(info); } try { radioProxy.setGsmBroadcastConfig(rr.mSerial, configs); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setGsmBroadcastConfig", e); } } }
@java.lang.Override public void nvReadItem(int itemID, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_NV_READ_ITEM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " itemId = ") + itemID)); } try { radioProxy.nvReadItem(rr.mSerial, itemID); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "nvReadItem", e); } } }
@java.lang.Override public void acceptCall(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_ANSWER, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.acceptCall(rr.mSerial); mMetrics.writeRilAnswer(mPhoneId, rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "acceptCall", e); } } }
@java.lang.Override public void nvWriteItem(int itemId, java.lang.String itemValue, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_NV_WRITE_ITEM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " itemId = ") + itemId) + " itemValue = ") + itemValue)); } android.hardware.radio.V1_0.NvWriteItem item = new android.hardware.radio.V1_0.NvWriteItem(); item.itemId = itemId; item.value = convertNullToEmptyString(itemValue); try { radioProxy.nvWriteItem(rr.mSerial, item); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "nvWriteItem", e); } } }
@java.lang.Override public void setCLIR(int clirMode, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_CLIR, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " clirMode = ") + clirMode)); } try { radioProxy.setClir(rr.mSerial, clirMode); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCLIR", e); } } }
@java.lang.Override public void queryFacilityLockForApp(java.lang.String facility, java.lang.String password, int serviceClass, java.lang.String appId, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_QUERY_FACILITY_LOCK, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " facility = ") + facility) + " serviceClass = ") + serviceClass) + " appId = ") + appId)); } try { radioProxy.getFacilityLockForApp(rr.mSerial, convertNullToEmptyString(facility), convertNullToEmptyString(password), serviceClass, convertNullToEmptyString(appId)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getFacilityLockForApp", e); } } }
@java.lang.Override public void getSmscAddress(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SMSC_ADDRESS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getSmscAddress(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getSmscAddress", e); } } }
@java.lang.Override public void queryCLIP(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_QUERY_CLIP, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getClip(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "queryCLIP", e); } } }
@java.lang.Override public void hangupWaitingOrBackground(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.hangupWaitingOrBackground(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "hangupWaitingOrBackground", e); } } }
@java.lang.Override public void getMute(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_MUTE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getMute(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getMute", e); } } }
@java.lang.Override public void requestIsimAuthentication(java.lang.String nonce, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_ISIM_AUTHENTICATION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " nonce = ") + nonce)); } try { radioProxy.requestIsimAuthentication(rr.mSerial, convertNullToEmptyString(nonce)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "requestIsimAuthentication", e); } } }
@java.lang.Override public void reportStkServiceIsRunning(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_REPORT_STK_SERVICE_IS_RUNNING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.reportStkServiceIsRunning(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "reportStkServiceIsRunning", e); } } }
@java.lang.Override public void queryCdmaRoamingPreference(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_QUERY_ROAMING_PREFERENCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getCdmaRoamingPreference(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "queryCdmaRoamingPreference", e); } } }
@java.lang.Override public void setCallForward(int action, int cfReason, int serviceClass, java.lang.String number, int timeSeconds, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_CALL_FORWARD, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " action = ") + action) + " cfReason = ") + cfReason) + " serviceClass = ") + serviceClass) + " timeSeconds = ") + timeSeconds)); } android.hardware.radio.V1_0.CallForwardInfo cfInfo = new android.hardware.radio.V1_0.CallForwardInfo(); cfInfo.status = action; cfInfo.reason = cfReason; cfInfo.serviceClass = serviceClass; cfInfo.toa = android.telephony.PhoneNumberUtils.toaFromString(number); cfInfo.number = convertNullToEmptyString(number); cfInfo.timeSeconds = timeSeconds; try { radioProxy.setCallForward(rr.mSerial, cfInfo); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCallForward", e); } } }
@java.lang.Override public void sendCdmaSms(byte[] pdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_SEND_SMS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.CdmaSmsMessage msg = new android.hardware.radio.V1_0.CdmaSmsMessage(); constructCdmaSendSmsRilRequest(msg, pdu); try { radioProxy.sendCdmaSms(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_CDMA, SmsSession.Event.Format.SMS_FORMAT_3GPP2); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendCdmaSms", e); } } }
@java.lang.Override public void getCDMASubscription(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_SUBSCRIPTION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getCDMASubscription(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getCDMASubscription", e); } } }
@java.lang.Override public void sendSMSExpectMore(java.lang.String smscPdu, java.lang.String pdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SEND_SMS_EXPECT_MORE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.GsmSmsMessage msg = constructGsmSendSmsRilRequest(smscPdu, pdu); try { radioProxy.sendSMSExpectMore(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_GSM, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendSMSExpectMore", e); } } }
@java.lang.Override public void dial(java.lang.String address, int clirMode, com.android.internal.telephony.UUSInfo uusInfo, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_DIAL, result, mRILDefaultWorkSource); android.hardware.radio.V1_0.Dial dialInfo = new android.hardware.radio.V1_0.Dial(); dialInfo.address = convertNullToEmptyString(address); dialInfo.clir = clirMode; if (uusInfo != null) { android.hardware.radio.V1_0.UusInfo info = new android.hardware.radio.V1_0.UusInfo(); info.uusType = uusInfo.getType(); info.uusDcs = uusInfo.getDcs(); info.uusData = new java.lang.String(uusInfo.getUserData()); dialInfo.uusInfo.add(info); } if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.dial(rr.mSerial, dialInfo); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "dial", e); } } }
private void sendAck() { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_RESPONSE_ACKNOWLEDGEMENT, null, mRILDefaultWorkSource); acquireWakeLock(rr, com.android.internal.telephony.RIL.FOR_ACK_WAKELOCK); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(null); if (radioProxy != null) { try { radioProxy.responseAcknowledgement(); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendAck", e); riljLoge(("sendAck: " + e)); } } else { android.telephony.Rlog.e(com.android.internal.telephony.RIL.RILJ_LOG_TAG, "Error trying to send ack, radioProxy = null"); } rr.release(); }
@java.lang.Override public void stopLceService(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_STOP_LCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.stopLceService(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "stopLceService", e); } } }
@java.lang.Override public void setPreferredVoicePrivacy(boolean enable, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_SET_PREFERRED_VOICE_PRIVACY_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " enable = ") + enable)); } try { radioProxy.setPreferredVoicePrivacy(rr.mSerial, enable); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setPreferredVoicePrivacy", e); } } }
@java.lang.Override public void sendImsGsmSms(java.lang.String smscPdu, java.lang.String pdu, int retry, int messageRef, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_IMS_SEND_SMS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.ImsSmsMessage msg = new android.hardware.radio.V1_0.ImsSmsMessage(); msg.tech = com.android.internal.telephony.RILConstants.RILConstants.GSM_PHONE; msg.retry = (((byte) (retry)) == 1) ? true : false; msg.messageRef = messageRef; android.hardware.radio.V1_0.GsmSmsMessage gsmMsg = constructGsmSendSmsRilRequest(smscPdu, pdu); msg.gsmMessage.add(gsmMsg); try { radioProxy.sendImsSms(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_IMS, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendImsGsmSms", e); } } }
@java.lang.Override public void acknowledgeLastIncomingGsmSms(boolean success, int cause, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SMS_ACKNOWLEDGE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " success = ") + success) + " cause = ") + cause)); } try { radioProxy.acknowledgeLastIncomingGsmSms(rr.mSerial, success, cause); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "acknowledgeLastIncomingGsmSms", e); } } }
@java.lang.Override public void setSuppServiceNotifications(boolean enable, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_SUPP_SVC_NOTIFICATION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " enable = ") + enable)); } try { radioProxy.setSuppServiceNotifications(rr.mSerial, enable); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setSuppServiceNotifications", e); } } }
@java.lang.Override public void sendSMS(java.lang.String smscPdu, java.lang.String pdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SEND_SMS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.GsmSmsMessage msg = constructGsmSendSmsRilRequest(smscPdu, pdu); try { radioProxy.sendSms(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_GSM, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendSMS", e); } } }
@java.lang.Override public void pullLceData(android.os.Message response) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(response); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_PULL_LCEDATA, response, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.pullLceData(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "pullLceData", e); } } }
@java.lang.Override public void sendEnvelopeWithStatus(java.lang.String contents, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_STK_SEND_ENVELOPE_WITH_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " contents = ") + contents)); } try { radioProxy.sendEnvelopeWithStatus(rr.mSerial, convertNullToEmptyString(contents)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendEnvelopeWithStatus", e); } } }
@java.lang.Override public void getCLIR(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_CLIR, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getClir(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getCLIR", e); } } }
@java.lang.Override public void hangupConnection(int gsmIndex, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_HANGUP, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " gsmIndex = ") + gsmIndex)); } try { radioProxy.hangup(rr.mSerial, gsmIndex); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "hangupConnection", e); } } }
@java.lang.Override public void setNetworkSelectionModeManual(java.lang.String operatorNumeric, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_NETWORK_SELECTION_MANUAL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " operatorNumeric = ") + operatorNumeric)); } try { radioProxy.setNetworkSelectionModeManual(rr.mSerial, convertNullToEmptyString(operatorNumeric)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setNetworkSelectionModeManual", e); } } }
@java.lang.Override public void getDataRegistrationState(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_DATA_REGISTRATION_STATE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getDataRegistrationState(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getDataRegistrationState", e); } } }
@java.lang.Override public void setTTYMode(int ttyMode, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_TTY_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " ttyMode = ") + ttyMode)); } try { radioProxy.setTTYMode(rr.mSerial, ttyMode); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setTTYMode", e); } } }
@java.lang.Override public void setRadioCapability(com.android.internal.telephony.RadioCapability rc, android.os.Message response) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(response); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_RADIO_CAPABILITY, response, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " RadioCapability = ") + (rc.toString()))); } android.hardware.radio.V1_0.RadioCapability halRc = new android.hardware.radio.V1_0.RadioCapability(); halRc.session = rc.getSession(); halRc.phase = rc.getPhase(); halRc.raf = rc.getRadioAccessFamily(); halRc.logicalModemUuid = convertNullToEmptyString(rc.getLogicalModemUuid()); halRc.status = rc.getStatus(); try { radioProxy.setRadioCapability(rr.mSerial, halRc); } catch (java.lang.Exception e) { handleRadioProxyExceptionForRR(rr, "setRadioCapability", e); } } }
@java.lang.Override public void setNetworkSelectionModeAutomatic(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_NETWORK_SELECTION_AUTOMATIC, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.setNetworkSelectionModeAutomatic(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setNetworkSelectionModeAutomatic", e); } } }
@java.lang.Override public void deactivateDataCall(int cid, int reason, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_DEACTIVATE_DATA_CALL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " cid = ") + cid) + " reason = ") + reason)); } try { radioProxy.deactivateDataCall(rr.mSerial, cid, (reason == 0 ? false : true)); mMetrics.writeRilDeactivateDataCall(mPhoneId, rr.mSerial, cid, reason); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "deactivateDataCall", e); } } }
@java.lang.Override public void setCdmaSubscriptionSource(int cdmaSubscription, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_SET_SUBSCRIPTION_SOURCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " cdmaSubscription = ") + cdmaSubscription)); } try { radioProxy.setCdmaSubscriptionSource(rr.mSerial, cdmaSubscription); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCdmaSubscriptionSource", e); } } }
@java.lang.Override public void switchWaitingOrHoldingAndActive(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.switchWaitingOrHoldingAndActive(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "switchWaitingOrHoldingAndActive", e); } } }
@java.lang.Override public void deleteSmsOnRuim(int index, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_DELETE_SMS_ON_RUIM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGV) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " index = ") + index)); } try { radioProxy.deleteSmsOnRuim(rr.mSerial, index); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "deleteSmsOnRuim", e); } } }
@java.lang.Override public void getCurrentCalls(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_CURRENT_CALLS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getCurrentCalls(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getCurrentCalls", e); } } }
@java.lang.Override public void supplyIccPinForApp(java.lang.String pin, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_ENTER_SIM_PIN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " aid = ") + aid)); } try { radioProxy.supplyIccPinForApp(rr.mSerial, convertNullToEmptyString(pin), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "supplyIccPinForApp", e); } } }
public void setAuthentication(int direction, android.net.IpSecAlgorithm authentication) { mFlow[direction].mAuthentication = authentication; }
public void setAuthenticatedEncryption(int direction, android.net.IpSecAlgorithm authenticatedEncryption) { mFlow[direction].mAuthenticatedEncryption = authenticatedEncryption; }



public void setEncryption(int direction, android.net.IpSecAlgorithm encryption) { mFlow[direction].mEncryption = encryption; }
private void createSdpRecord() { if ((mSdpHandle) > (-1)) { android.util.Log.w(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "createSdpRecord, SDP record already created"); } mSdpHandle = com.android.bluetooth.sdp.SdpManager.getDefaultManager().createPbapPseRecord("OBEX Phonebook Access Server", mServerSockets.getRfcommChannel(), mServerSockets.getL2capPsm(), com.android.bluetooth.pbap.BluetoothPbapService.SDP_PBAP_SERVER_VERSION, com.android.bluetooth.pbap.BluetoothPbapService.SDP_PBAP_SUPPORTED_REPOSITORIES, com.android.bluetooth.pbap.BluetoothPbapService.SDP_PBAP_SUPPORTED_FEATURES); if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("created Sdp record, mSdpHandle=" + (mSdpHandle))); } }
private native void initializeNative(int maxHfClients, boolean inbandRingEnable);

@com.android.internal.annotations.VisibleForTesting public static android.telephony.data.DataProfile createDataProfile(com.android.internal.telephony.dataconnection.ApnSetting apn, int profileId) { int profileType; if ((apn.bearerBitmask) == 0) { profileType = android.telephony.data.DataProfile.TYPE_COMMON; } else if (android.telephony.ServiceState.bearerBitmapHasCdma(apn.bearerBitmask)) { profileType = android.telephony.data.DataProfile.TYPE_3GPP2; } else { profileType = android.telephony.data.DataProfile.TYPE_3GPP; } return new android.telephony.data.DataProfile(profileId, apn.apn, apn.protocol, apn.authType, apn.user, apn.password, profileType, apn.maxConnsTime, apn.maxConns, apn.waitTime, apn.carrierEnabled, apn.typesBitmap, apn.roamingProtocol, apn.bearerBitmask, apn.mtu, apn.mvnoType, apn.mvnoMatchData, apn.modemCognitive); }

@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append("[ApnSettingV3] ").append(carrier).append(", ").append(id).append(", ").append(numeric).append(", ").append(apn).append(", ").append(proxy).append(", ").append(mmsc).append(", ").append(mmsProxy).append(", ").append(mmsPort).append(", ").append(port).append(", ").append(authType).append(", "); for (int i = 0; i < (types.length); i++) { sb.append(types[i]); if (i < ((types.length) - 1)) { sb.append(" | "); } } sb.append(", ").append(protocol); sb.append(", ").append(roamingProtocol); sb.append(", ").append(carrierEnabled); sb.append(", ").append(bearer); sb.append(", ").append(bearerBitmask); sb.append(", ").append(profileId); sb.append(", ").append(modemCognitive); sb.append(", ").append(maxConns); sb.append(", ").append(waitTime); sb.append(", ").append(maxConnsTime); sb.append(", ").append(mtu); sb.append(", ").append(mvnoType); sb.append(", ").append(mvnoMatchData); sb.append(", ").append(permanentFailed); return sb.toString(); }



@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testToString() throws java.lang.Exception { java.lang.String[] types = new java.lang.String[]{ "default", "*" }; com.android.internal.telephony.dataconnection.ApnSetting apn = new com.android.internal.telephony.dataconnection.ApnSetting(99, "12345", "Name", "apn", "proxy", "port", "mmsc", "mmsproxy", "mmsport", "user", "password", 0, types, "IPV6", "IP", true, 14, 0, 0, false, 0, 0, 0, 0, "", ""); java.lang.String expected = "[ApnSettingV3] Name, 99, 12345, apn, proxy, " + ("mmsc, mmsproxy, mmsport, port, 0, default | *, " + "IPV6, IP, true, 14, 8192, 0, false, 0, 0, 0, 0, , , false"); assertEquals(expected, apn.toString()); }











@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof android.telecom.DisconnectCause) { android.telecom.DisconnectCause d = ((android.telecom.DisconnectCause) (o)); return ((((java.util.Objects.equals(mDisconnectCode, d.getCode())) && (java.util.Objects.equals(mDisconnectLabel, d.getLabel()))) && (java.util.Objects.equals(mDisconnectDescription, d.getDescription()))) && (java.util.Objects.equals(mDisconnectReason, d.getReason()))) && (java.util.Objects.equals(mToneToPlay, d.getTone())); } return false; }
@java.lang.Override public android.telecom.DisconnectCause createFromParcel(android.os.Parcel source) { int code = source.readInt(); java.lang.CharSequence label = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(source); java.lang.CharSequence description = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(source); java.lang.String reason = source.readString(); int tone = source.readInt(); return new android.telecom.DisconnectCause(code, label, description, reason, tone); }
@java.lang.Override public int hashCode() { return ((((java.util.Objects.hashCode(mDisconnectCode)) + (java.util.Objects.hashCode(mDisconnectLabel))) + (java.util.Objects.hashCode(mDisconnectDescription))) + (java.util.Objects.hashCode(mDisconnectReason))) + (java.util.Objects.hashCode(mToneToPlay)); }

void updateStateInternal() { if ((mOriginalConnection) == null) { return; } com.android.internal.telephony.Call.State newState; if ((mIsStateOverridden) && ((mOriginalConnectionState) == (mOriginalConnection.getState()))) { newState = mConnectionOverriddenState; } else { newState = mOriginalConnection.getState(); } com.android.services.telephony.Log.v(this, "Update state from %s to %s for %s", mConnectionState, newState, this); if ((mConnectionState) != newState) { mConnectionState = newState; switch (newState) { case IDLE : break; case ACTIVE : setActiveInternal(); break; case HOLDING : setOnHold(); break; case DIALING : case ALERTING : setDialing(); break; case INCOMING : case WAITING : setRinging(); break; case DISCONNECTED : setDisconnected(com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCause(mOriginalConnection.getDisconnectCause(), mOriginalConnection.getVendorDisconnectCause())); close(); break; case DISCONNECTING : break; } } }




private com.android.services.telephony.TelephonyConnection createConnectionFor(com.android.internal.telephony.Phone phone, com.android.internal.telephony.Connection originalConnection, boolean isOutgoing, android.telecom.PhoneAccountHandle phoneAccountHandle, java.lang.String telecomCallId, android.net.Uri address) { com.android.services.telephony.TelephonyConnection returnConnection = null; int phoneType = phone.getPhoneType(); if (phoneType == (android.telephony.TelephonyManager.PHONE_TYPE_GSM)) { returnConnection = new com.android.services.telephony.GsmConnection(originalConnection, telecomCallId); } else if (phoneType == (android.telephony.TelephonyManager.PHONE_TYPE_CDMA)) { boolean allowsMute = allowsMute(phone); returnConnection = new com.android.services.telephony.CdmaConnection(originalConnection, mEmergencyTonePlayer, allowsMute, isOutgoing, telecomCallId); } if (returnConnection != null) { returnConnection.addTelephonyConnectionListener(mTelephonyConnectionListener); returnConnection.setVideoPauseSupported(com.android.services.telephony.TelecomAccountRegistry.getInstance(this).isVideoPauseSupported(phoneAccountHandle)); boolean isEmergencyCall = (address != null) && (android.telephony.PhoneNumberUtils.isEmergencyNumber(address.getSchemeSpecificPart())); returnConnection.setConferenceSupported(((!isEmergencyCall) && (com.android.services.telephony.TelecomAccountRegistry.getInstance(this).isMergeCallSupported(phoneAccountHandle)))); } return returnConnection; }
@java.lang.Override public void writeToParcel(android.os.Parcel destination, int flags) { destination.writeInt(mDisconnectCode); android.text.TextUtils.writeToParcel(mDisconnectLabel, destination, flags); android.text.TextUtils.writeToParcel(mDisconnectDescription, destination, flags); destination.writeString(mDisconnectReason); destination.writeInt(mToneToPlay); }







private static void writeToParcelForGsm(android.os.Parcel p, int lac, int cid, int arfcn, int bsic, java.lang.String mcc, java.lang.String mnc, java.lang.String al, java.lang.String as, int ss, int ber, int ta) { p.writeInt(lac); p.writeInt(cid); p.writeInt(arfcn); p.writeInt(bsic); p.writeString(mcc); p.writeString(mnc); p.writeString(al); p.writeString(as); p.writeInt(ss); p.writeInt(ber); p.writeInt(ta); }

private static void writeToParcelForCdma(android.os.Parcel p, int ni, int si, int bsi, int lon, int lat, java.lang.String al, java.lang.String as, int dbm, int ecio, int eDbm, int eEcio, int eSnr) { p.writeInt(ni); p.writeInt(si); p.writeInt(bsi); p.writeInt(lon); p.writeInt(lat); p.writeString(al); p.writeString(as); p.writeInt(dbm); p.writeInt(ecio); p.writeInt(eDbm); p.writeInt(eEcio); p.writeInt(eSnr); }

@java.lang.Override public int describeContents() { return 0; }
@java.lang.Override public int describeContents() { return 0; }
@java.lang.Override public int describeContents() { return 0; }
@java.lang.Override public int describeContents() { return 0; }
private static void writeToParcelForWcdma(android.os.Parcel p, int lac, int cid, int psc, int uarfcn, java.lang.String mcc, java.lang.String mnc, java.lang.String al, java.lang.String as, int ss, int ber) { p.writeInt(lac); p.writeInt(cid); p.writeInt(psc); p.writeInt(uarfcn); p.writeString(mcc); p.writeString(mnc); p.writeString(al); p.writeString(as); p.writeInt(ss); p.writeInt(ber); }
@android.test.suitebuilder.annotation.SmallTest public void testParcelWithUnknowMccMnc() { android.telephony.CellIdentityGsm ci = new android.telephony.CellIdentityGsm(com.android.internal.telephony.CellIdentityGsmTest.LAC, com.android.internal.telephony.CellIdentityGsmTest.CID, com.android.internal.telephony.CellIdentityGsmTest.ARFCN, com.android.internal.telephony.CellIdentityGsmTest.BSIC, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(com.android.internal.telephony.CellIdentityGsmTest.LAC); p.writeInt(com.android.internal.telephony.CellIdentityGsmTest.CID); p.writeInt(com.android.internal.telephony.CellIdentityGsmTest.ARFCN); p.writeInt(com.android.internal.telephony.CellIdentityGsmTest.BSIC); p.writeString(java.lang.String.valueOf(java.lang.Integer.MAX_VALUE)); p.writeString(java.lang.String.valueOf(java.lang.Integer.MAX_VALUE)); p.setDataPosition(0); android.telephony.CellIdentityGsm newCi = CellIdentityGsm.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }
@android.test.suitebuilder.annotation.SmallTest public void testParcelWithInvalidMccMnc() { final java.lang.String invalidMcc = "randomStuff"; final java.lang.String invalidMnc = "randomStuff"; android.telephony.CellIdentityGsm ci = new android.telephony.CellIdentityGsm(com.android.internal.telephony.CellIdentityGsmTest.LAC, com.android.internal.telephony.CellIdentityGsmTest.CID, com.android.internal.telephony.CellIdentityGsmTest.ARFCN, com.android.internal.telephony.CellIdentityGsmTest.BSIC, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(com.android.internal.telephony.CellIdentityGsmTest.LAC); p.writeInt(com.android.internal.telephony.CellIdentityGsmTest.CID); p.writeInt(com.android.internal.telephony.CellIdentityGsmTest.ARFCN); p.writeInt(com.android.internal.telephony.CellIdentityGsmTest.BSIC); p.writeString(invalidMcc); p.writeString(invalidMnc); p.setDataPosition(0); android.telephony.CellIdentityGsm newCi = CellIdentityGsm.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }
@android.test.suitebuilder.annotation.SmallTest public void testParcelWithInvalidMccMnc() { final java.lang.String invalidMcc = "randomStuff"; final java.lang.String invalidMnc = "randomStuff"; android.telephony.CellIdentityWcdma ci = new android.telephony.CellIdentityWcdma(com.android.internal.telephony.CellIdentityWcdmaTest.LAC, com.android.internal.telephony.CellIdentityWcdmaTest.CID, com.android.internal.telephony.CellIdentityWcdmaTest.PSC, com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.LAC); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.CID); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.PSC); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN); p.writeString(invalidMcc); p.writeString(invalidMnc); p.setDataPosition(0); android.telephony.CellIdentityWcdma newCi = CellIdentityWcdma.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }
@android.test.suitebuilder.annotation.SmallTest public void testParcelWithUnknowMccMnc() { android.telephony.CellIdentityWcdma ci = new android.telephony.CellIdentityWcdma(com.android.internal.telephony.CellIdentityWcdmaTest.LAC, com.android.internal.telephony.CellIdentityWcdmaTest.CID, com.android.internal.telephony.CellIdentityWcdmaTest.PSC, com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.LAC); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.CID); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.PSC); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN); p.writeString(java.lang.String.valueOf(java.lang.Integer.MAX_VALUE)); p.writeString(java.lang.String.valueOf(java.lang.Integer.MAX_VALUE)); p.setDataPosition(0); android.telephony.CellIdentityWcdma newCi = CellIdentityWcdma.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }
@android.test.suitebuilder.annotation.SmallTest public void testParcelWithInvalidMccMnc() { final java.lang.String invalidMcc = "randomStuff"; final java.lang.String invalidMnc = "randomStuff"; android.telephony.CellIdentityLte ci = new android.telephony.CellIdentityLte(com.android.internal.telephony.CellIdentityLteTest.CI, com.android.internal.telephony.CellIdentityLteTest.PCI, com.android.internal.telephony.CellIdentityLteTest.TAC, com.android.internal.telephony.CellIdentityLteTest.EARFCN, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.CI); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.PCI); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.TAC); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.EARFCN); p.writeString(invalidMcc); p.writeString(invalidMnc); p.setDataPosition(0); android.telephony.CellIdentityLte newCi = CellIdentityLte.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }
@android.test.suitebuilder.annotation.SmallTest public void testParcelWithUnknowMccMnc() { android.telephony.CellIdentityLte ci = new android.telephony.CellIdentityLte(com.android.internal.telephony.CellIdentityLteTest.CI, com.android.internal.telephony.CellIdentityLteTest.PCI, com.android.internal.telephony.CellIdentityLteTest.TAC, com.android.internal.telephony.CellIdentityLteTest.EARFCN, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.CI); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.PCI); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.TAC); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.EARFCN); p.writeString(java.lang.String.valueOf(java.lang.Integer.MAX_VALUE)); p.writeString(java.lang.String.valueOf(java.lang.Integer.MAX_VALUE)); p.setDataPosition(0); android.telephony.CellIdentityLte newCi = CellIdentityLte.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }

private static void writeToParcelForLte(android.os.Parcel p, int ci, int pci, int tac, int earfcn, java.lang.String mcc, java.lang.String mnc, java.lang.String al, java.lang.String as, int ss, int rsrp, int rsrq, int rssnr, int cqi, int ta) { p.writeInt(ci); p.writeInt(pci); p.writeInt(tac); p.writeInt(earfcn); p.writeString(mcc); p.writeString(mnc); p.writeString(al); p.writeString(as); p.writeInt(ss); p.writeInt(rsrp); p.writeInt(rsrq); p.writeInt(rssnr); p.writeInt(cqi); p.writeInt(ta); }
@android.test.suitebuilder.annotation.SmallTest public void testInitializationWithEarpieceAndHeadsetNoBluetooth() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_WIRED_HEADSET, ((android.telecom.CallAudioState.ROUTE_WIRED_HEADSET) | (android.telecom.CallAudioState.ROUTE_SPEAKER))); initializationTestHelper(expectedState, true); }
@android.test.suitebuilder.annotation.SmallTest public void testInitializationWithBluetoothNoHeadsetNoEarpiece() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, ((android.telecom.CallAudioState.ROUTE_SPEAKER) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); initializationTestHelper(expectedState, false); }
@android.test.suitebuilder.annotation.SmallTest public void testInitializationWithHeadsetNoBluetoothNoEarpiece() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_WIRED_HEADSET, ((android.telecom.CallAudioState.ROUTE_WIRED_HEADSET) | (android.telecom.CallAudioState.ROUTE_SPEAKER))); initializationTestHelper(expectedState, false); }
@android.test.suitebuilder.annotation.SmallTest public void testInitializationWithHeadsetAndBluetoothNoEarpiece() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, (((android.telecom.CallAudioState.ROUTE_WIRED_HEADSET) | (android.telecom.CallAudioState.ROUTE_SPEAKER)) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); initializationTestHelper(expectedState, false); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); org.mockito.MockitoAnnotations.initMocks(this); mContext = mComponentContextFixture.getTestDouble().getApplicationContext(); doNothing().when(mMockCallsManager).addListener(any(CallsManager.CallsManagerListener.class)); doReturn(null).when(mMockCallsManager).getActiveCall(); doReturn(null).when(mMockCallsManager).getRingingCall(); doReturn(null).when(mMockCallsManager).getHeldCall(); doReturn(null).when(mMockCallsManager).getOutgoingCall(); doReturn(0).when(mMockCallsManager).getNumHeldCalls(); mBluetoothPhoneService = new com.android.server.telecom.BluetoothPhoneServiceImpl(mContext, mLock, mMockCallsManager, mock(com.android.server.telecom.BluetoothAdapterProxy.class), mMockPhoneAccountRegistrar); mBluetoothPhoneService.setBluetoothHeadset(mMockBluetoothHeadset); }
@android.test.suitebuilder.annotation.SmallTest public void testInitializationWithEarpieceNoHeadsetNoBluetooth() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_EARPIECE, ((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_SPEAKER))); initializationTestHelper(expectedState, true); }
@android.test.suitebuilder.annotation.SmallTest public void testInitializationWithNoEarpieceNoHeadsetNoBluetooth() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_SPEAKER, android.telecom.CallAudioState.ROUTE_SPEAKER); initializationTestHelper(expectedState, false); }
@android.test.suitebuilder.annotation.SmallTest public void testInitializationWithEarpieceAndHeadsetAndBluetooth() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, (((android.telecom.CallAudioState.ROUTE_WIRED_HEADSET) | (android.telecom.CallAudioState.ROUTE_SPEAKER)) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); initializationTestHelper(expectedState, true); }
@android.test.suitebuilder.annotation.MediumTest public void testBluetoothRinging() { com.android.server.telecom.CallAudioRouteStateMachine stateMachine = new com.android.server.telecom.CallAudioRouteStateMachine(mContext, mockCallsManager, mockBluetoothRouteManager, mockWiredHeadsetManager, mockStatusBarNotifier, mAudioServiceFactory, true); when(mockBluetoothRouteManager.isBluetoothAudioConnectedOrPending()).thenReturn(false); when(mockBluetoothRouteManager.isBluetoothAvailable()).thenReturn(true); when(mockBluetoothRouteManager.getConnectedDevices()).thenReturn(java.util.Collections.singletonList(com.android.server.telecom.tests.CallAudioRouteStateMachineTest.bluetoothDevice1)); when(mockAudioManager.isSpeakerphoneOn()).thenReturn(false); android.telecom.CallAudioState initState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, ((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); stateMachine.initialize(initState); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.SWITCH_FOCUS, CallAudioRouteStateMachine.RINGING_FOCUS); waitForStateMachineActionCompletion(stateMachine, CallAudioRouteStateMachine.RUN_RUNNABLE); verify(mockBluetoothRouteManager, never()).connectBluetoothAudio(nullable(java.lang.String.class)); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.SWITCH_FOCUS, CallAudioRouteStateMachine.ACTIVE_FOCUS); waitForStateMachineActionCompletion(stateMachine, CallAudioRouteStateMachine.RUN_RUNNABLE); verify(mockBluetoothRouteManager, times(1)).connectBluetoothAudio(nullable(java.lang.String.class)); }
@android.test.suitebuilder.annotation.SmallTest public void testInitializationWithEarpieceAndBluetoothNoHeadset() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, (((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_SPEAKER)) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); initializationTestHelper(expectedState, true); }




static com.android.apksig.internal.apk.v2.SignatureAlgorithm findById(int id) { for (com.android.apksig.internal.apk.v2.SignatureAlgorithm alg : com.android.apksig.internal.apk.v2.SignatureAlgorithm.values()) { if ((alg.getId()) == id) { return alg; } } return null; }

private void mergeFrom(com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result source) { mVerifiedUsingV2Scheme = source.verified; mErrors.addAll(source.getErrors()); mWarnings.addAll(source.getWarnings()); for (com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result.SignerInfo signer : source.signers) { mV2SchemeSigners.add(new com.android.apksig.ApkVerifier.Result.V2SchemeSignerInfo(signer)); } }


private java.util.List<com.android.apksig.internal.apk.v2.V2SchemeSigner.SignerConfig> createV2SignerConfigs(boolean apkSigningBlockPaddingSupported) throws java.security.InvalidKeyException { java.util.List<com.android.apksig.internal.apk.v2.V2SchemeSigner.SignerConfig> v2SignerConfigs = new java.util.ArrayList<>(mSignerConfigs.size()); for (int i = 0; i < (mSignerConfigs.size()); i++) { com.android.apksig.DefaultApkSignerEngine.SignerConfig signerConfig = mSignerConfigs.get(i); java.util.List<java.security.cert.X509Certificate> certificates = signerConfig.getCertificates(); java.security.PublicKey publicKey = certificates.get(0).getPublicKey(); com.android.apksig.internal.apk.v2.V2SchemeSigner.SignerConfig v2SignerConfig = new com.android.apksig.internal.apk.v2.V2SchemeSigner.SignerConfig(); v2SignerConfig.privateKey = signerConfig.getPrivateKey(); v2SignerConfig.certificates = certificates; v2SignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v2.V2SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); v2SignerConfigs.add(v2SignerConfig); } return v2SignerConfigs; }


com.android.apksig.internal.apk.v2.ContentDigestAlgorithm getContentDigestAlgorithm() { return mContentDigestAlgorithm; }













@java.lang.Override public java.lang.String toString() { final java.util.StringJoiner j = new java.util.StringJoiner(",", "NeighborEvent{", "}"); return j.add(("@" + (elapsedMs))).add(android.net.netlink.NetlinkConstants.stringForNlMsgType(msgType)).add(("if=" + (ifindex))).add(ip.getHostAddress()).add(android.net.netlink.StructNdMsg.stringForNudState(nudState)).add((("[" + (android.net.netlink.NetlinkConstants.hexify(linkLayerAddr))) + "]")).toString(); }
private void evaluateRtNetlinkNeighborMessage(android.net.netlink.RtNetlinkNeighborMessage neighMsg, long whenMs) { final short msgType = neighMsg.getHeader().nlmsg_type; final android.net.netlink.StructNdMsg ndMsg = neighMsg.getNdHeader(); if (ndMsg == null) { mLog.e("RtNetlinkNeighborMessage without ND message header!"); return; } final int ifindex = ndMsg.ndm_ifindex; final java.net.InetAddress destination = neighMsg.getDestination(); final short nudState = (msgType == (android.net.netlink.NetlinkConstants.RTM_DELNEIGH)) ? android.net.netlink.StructNdMsg.NUD_NONE : ndMsg.ndm_state; final android.net.ip.IpNeighborMonitor.NeighborEvent event = new android.net.ip.IpNeighborMonitor.NeighborEvent(whenMs, msgType, ifindex, destination, nudState, neighMsg.getLinkLayerAddress()); if (android.net.ip.IpNeighborMonitor.VDBG) { android.util.Log.d(android.net.ip.IpNeighborMonitor.TAG, neighMsg.toString()); } if (android.net.ip.IpNeighborMonitor.DBG) { android.util.Log.d(android.net.ip.IpNeighborMonitor.TAG, event.toString()); } mConsumer.accept(event); }


@java.lang.Override public boolean setDataSaverModeEnabled(boolean enable) { if (com.android.server.NetworkManagementService.DBG) android.util.Log.d(com.android.server.NetworkManagementService.TAG, ("setDataSaverMode: " + enable)); synchronized(mQuotaLock) { if ((mDataSaverMode) == enable) { android.util.Log.w(com.android.server.NetworkManagementService.TAG, ("setDataSaverMode(): already " + (mDataSaverMode))); return true; } android.os.Trace.traceBegin(Trace.TRACE_TAG_NETWORK, "bandwidthEnableDataSaver"); try { final boolean changed = mNetdService.bandwidthEnableDataSaver(enable); if (changed) { mDataSaverMode = enable; } else { android.util.Log.w(com.android.server.NetworkManagementService.TAG, (("setDataSaverMode(" + enable) + "): netd command silently failed")); } return changed; } catch (android.os.RemoteException e) { android.util.Log.w(com.android.server.NetworkManagementService.TAG, (("setDataSaverMode(" + enable) + "): netd command failed"), e); return false; } finally { android.os.Trace.traceEnd(Trace.TRACE_TAG_NETWORK); } } }



private void updateDnses(android.net.LinkProperties newLp, android.net.LinkProperties oldLp, int netId) { if ((oldLp != null) && (newLp.isIdenticalDnses(oldLp))) { return; } java.util.Collection<java.net.InetAddress> dnses = newLp.getDnsServers(); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(((("Setting DNS servers for network " + netId) + " to ") + dnses)); try { mNetd.setDnsConfigurationForNetwork(netId, android.net.NetworkUtils.makeStrings(dnses), newLp.getDomains()); } catch (java.lang.Exception e) { com.android.server.ConnectivityService.loge(("Exception in setDnsConfigurationForNetwork: " + e)); } final com.android.server.connectivity.NetworkAgentInfo defaultNai = getDefaultNetwork(); if ((defaultNai != null) && ((defaultNai.network.netId) == netId)) { setDefaultDnsSystemProperties(dnses); } flushVmDnsCache(); }

