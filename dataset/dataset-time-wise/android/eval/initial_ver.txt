public void sendEnvelopeWithStatus(java.lang.String contents, android.os.Message response) { getCommandsInterface().sendEnvelopeWithStatus(contents, response); }
public void iccTransmitApduBasicChannel(int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { getCommandsInterface().iccTransmitApduBasicChannel(cla, command, p1, p2, p3, data, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_TRANSMIT_APDU_BASIC_CHANNEL_DONE, response)); }
public boolean areCarrierPriviligeRulesLoaded() { synchronized(mLock) { return ((mCarrierPrivilegeRules) == null) || (mCarrierPrivilegeRules.areCarrierPriviligeRulesLoaded()); } }
public int getCarrierPrivilegeStatus(android.content.pm.PackageInfo packageInfo) { synchronized(mLock) { return (mCarrierPrivilegeRules) == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : mCarrierPrivilegeRules.getCarrierPrivilegeStatus(packageInfo); } }
public void iccOpenLogicalChannel(java.lang.String AID, int p2, android.os.Message response) { loglocal(((((((("Open Logical Channel: " + AID) + " , ") + p2) + " by pid:") + (android.os.Binder.getCallingPid())) + " uid:") + (android.os.Binder.getCallingUid()))); getCommandsInterface().iccOpenLogicalChannel(AID, p2, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_OPEN_LOGICAL_CHANNEL_DONE, response)); }
public boolean resetAppWithAid(java.lang.String aid) { synchronized(mLock) { boolean changed = false; for (int i = 0; i < (mUiccApplications.length); i++) { if (((mUiccApplications[i]) != null) && ((aid == null) || (aid.equals(mUiccApplications[i].getAid())))) { mUiccApplications[i].dispose(); mUiccApplications[i] = null; changed = true; } } if ((mCarrierPrivilegeRules) != null) { mCarrierPrivilegeRules = null; changed = true; } if ((mCatService) != null) { mCatService.dispose(); mCatService = null; changed = true; } return changed; } }
public void iccCloseLogicalChannel(int channel, android.os.Message response) { loglocal(("Close Logical Channel: " + channel)); getCommandsInterface().iccCloseLogicalChannel(channel, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_CLOSE_LOGICAL_CHANNEL_DONE, response)); }
public int getCarrierPrivilegeStatus(android.content.pm.PackageManager packageManager, java.lang.String packageName) { synchronized(mLock) { return (mCarrierPrivilegeRules) == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : mCarrierPrivilegeRules.getCarrierPrivilegeStatus(packageManager, packageName); } }
public void iccTransmitApduLogicalChannel(int channel, int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { getCommandsInterface().iccTransmitApduLogicalChannel(channel, cla, command, p1, p2, p3, data, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_TRANSMIT_APDU_LOGICAL_CHANNEL_DONE, response)); }
public java.util.List<java.lang.String> getCarrierPackageNamesForIntent(android.content.pm.PackageManager packageManager, android.content.Intent intent) { synchronized(mLock) { return (mCarrierPrivilegeRules) == null ? null : mCarrierPrivilegeRules.getCarrierPackageNamesForIntent(packageManager, intent); } }
public int getNumApplications() { int count = 0; synchronized(mLock) { for (com.android.internal.telephony.uicc.UiccCardApplication a : mUiccApplications) { if (a != null) { count++; } } } return count; }
private com.android.internal.telephony.CommandsInterface getCommandsInterface() { synchronized(mLock) { return mCi; } }
public boolean hasCarrierPrivilegeRules() { synchronized(mLock) { return ((mCarrierPrivilegeRules) != null) && (mCarrierPrivilegeRules.hasCarrierPrivilegeRules()); } }
public java.lang.String getIccId() { synchronized(mLock) { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir != null) && ((ir.getIccId()) != null)) { return ir.getIccId(); } } } } return null; }
public void iccExchangeSimIO(int fileID, int command, int p1, int p2, int p3, java.lang.String pathID, android.os.Message response) { getCommandsInterface().iccIO(command, fileID, pathID, p1, p2, p3, null, null, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_SIM_IO_DONE, response)); }
public int getCarrierPrivilegeStatusForCurrentTransaction(android.content.pm.PackageManager packageManager) { synchronized(mLock) { return (mCarrierPrivilegeRules) == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : mCarrierPrivilegeRules.getCarrierPrivilegeStatusForCurrentTransaction(packageManager); } }
public int getCarrierPrivilegeStatus(android.content.pm.Signature signature, java.lang.String packageName) { synchronized(mLock) { return (mCarrierPrivilegeRules) == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : mCarrierPrivilegeRules.getCarrierPrivilegeStatus(signature, packageName); } }
public void testVerify_NONEwithECDSA_Key_SingleByte_Failure() throws java.lang.Exception { java.security.PublicKey pub = libcore.java.security.SignatureTest.getNamedCurveEcPublicKey(); java.security.MessageDigest sha1 = java.security.MessageDigest.getInstance("SHA1"); java.security.Signature sig = java.security.Signature.getInstance("NONEwithECDSA"); byte[] corrupted = new byte[libcore.java.security.SignatureTest.NAMED_CURVE_SIGNATURE.length]; corrupted[0] ^= 1; sig.initVerify(pub); sig.update(sha1.digest(libcore.java.security.SignatureTest.NAMED_CURVE_VECTOR)); assertFalse(sig.verify(corrupted)); }
private void deleteTestFiles(@javax.annotation.Nonnegative com.android.ddmlib.IDevice device, @javax.annotation.Nonnull java.lang.String uuid) throws com.android.jack.test.runner.RuntimeRunnerException { if (isVerbose) { java.lang.System.out.println((((("adb shell -s " + (device.getSerialNumber())) + " find data -name '*jack-tests-") + uuid) + "*' -exec rm -rf {} +")); } try { device.executeShellCommand((("find data -name '*jack-tests-" + uuid) + "*' -exec rm -rf {} +"), hostOutput); } catch (com.android.ddmlib.TimeoutException | com.android.ddmlib.AdbCommandRejectedException | com.android.ddmlib.ShellCommandUnresponsiveException | java.io.IOException e) { throw new com.android.jack.test.runner.RuntimeRunnerException(e); } }
public void test_addAttributesLjava_util_MapII() { java.text.AttributedString as = new java.text.AttributedString("test"); java.util.Map<java.text.AttributedCharacterIterator.Attribute, java.lang.String> whm = new java.util.HashMap<java.text.AttributedCharacterIterator.Attribute, java.lang.String>(); try { whm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute("test1"), "value1"); whm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute("test2"), "value2"); whm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute("test3"), "value3"); as.addAttributes(whm, 0, 3); } catch (java.lang.Exception e) { fail(("Unexpected exception " + (e.toString()))); } try { as.addAttributes(null, 0, 3); fail("Expected NullPointerException was not thrown"); } catch (java.lang.NullPointerException e) { } try { as.addAttributes(whm, 0, 0); fail("Expected IllegalArgumentException was not thrown"); } catch (java.lang.IllegalArgumentException e) { } }
private boolean notifyIfInactive(com.android.vts.entity.TestEntity test, java.lang.String link, java.util.List<java.lang.String> emails, java.util.List<javax.mail.Message> messages) { long now = java.util.concurrent.TimeUnit.MILLISECONDS.toMicros(java.lang.System.currentTimeMillis()); long diff = now - (test.timestamp); if (((diff > (java.util.concurrent.TimeUnit.DAYS.toMicros(1))) && (diff < (java.util.concurrent.TimeUnit.DAYS.toMicros(8)))) && ((diff % (java.util.concurrent.TimeUnit.DAYS.toMicros(1))) < (java.util.concurrent.TimeUnit.MINUTES.toMicros(3)))) { java.util.Date lastUpload = new java.util.Date(java.util.concurrent.TimeUnit.MICROSECONDS.toMillis(test.timestamp)); java.lang.String uploadTimeString = new java.text.SimpleDateFormat("MM/dd/yyyy HH:mm:ss").format(lastUpload); java.lang.String subject = "Warning! Inactive test: " + (test.testName); java.lang.String body = ((((("Hello,<br><br>Test \"" + test) + "\" is inactive. ") + "No new data has been uploaded since ") + uploadTimeString) + ".") + (getFooter(link)); try { messages.add(com.android.vts.util.EmailHelper.composeEmail(emails, subject, body)); return true; } catch (javax.mail.MessagingException | java.io.UnsupportedEncodingException e) { logger.log(java.util.logging.Level.WARNING, "Error composing email : ", e); } } return false; }
private void disableWifiIpServingLocked(java.lang.String ifname, int apState) { if (com.android.server.connectivity.Tethering.DBG) android.util.Log.d(com.android.server.connectivity.Tethering.TAG, ("Canceling WiFi tethering request - AP_STATE=" + apState)); boolean found = false; if (!(android.text.TextUtils.isEmpty(ifname))) { final com.android.server.connectivity.Tethering.TetherState ts = mTetherStates.get(ifname); if (ts != null) { ts.stateMachine.unwanted(); found = true; } } else { for (int i = 0; i < (mTetherStates.size()); i++) { com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism = mTetherStates.valueAt(i).stateMachine; if ((tism.interfaceType()) == (android.net.ConnectivityManager.TETHERING_WIFI)) { tism.unwanted(); found = true; break; } } } if (!found) { mLog.log(("Error disabling Wi-Fi IP serving; referenced interface: " + ifname)); } mWifiTetherRequested = false; }
protected void setUpstreamByType(android.net.NetworkState ns) { java.lang.String iface = null; if (ns != null) { if ((ns.linkProperties) != null) { android.util.Log.i(com.android.server.connectivity.Tethering.TAG, ("Finding IPv4 upstream interface on: " + (ns.linkProperties))); android.net.RouteInfo ipv4Default = android.net.RouteInfo.selectBestRoute(ns.linkProperties.getAllRoutes(), ANY); if (ipv4Default != null) { iface = ipv4Default.getInterface(); android.util.Log.i(com.android.server.connectivity.Tethering.TAG, ("Found interface " + (ipv4Default.getInterface()))); } else { android.util.Log.i(com.android.server.connectivity.Tethering.TAG, "No IPv4 upstream interface, giving up."); } } } if (iface != null) { setDnsForwarders(ns.network, ns.linkProperties); } notifyTetheredOfNewUpstreamIface(iface); if ((ns != null) && (pertainsToCurrentUpstream(ns))) { handleNewUpstreamNetworkState(ns); } else if ((mCurrentUpstreamIface) == null) { handleNewUpstreamNetworkState(null); } }
@java.lang.Override public java.util.Set<vogar.tasks.Task> installTasks() { java.util.Set<vogar.tasks.Task> result = new java.util.HashSet<vogar.tasks.Task>(); for (java.io.File classpathElement : run.classpath.getElements()) { java.lang.String name = run.basenameOfJar(classpathElement); java.io.File localDex = run.localDexFile(name); java.io.File localDesugarTempDir = run.localDesugarTempDir(name); result.add(createCreateDexJarTask(run.classpath, classpathElement, name, null, localDex, localDesugarTempDir)); } result.add(new vogar.tasks.MkdirTask(run.mkdir, dalvikCache())); return result; }
@java.lang.Override protected vogar.Result execute() throws java.lang.Exception { vogar.Classpath cp = vogar.Classpath.of(jar); vogar.Classpath dependentCp = classpath; if ((benchmark) && ((action) != null)) { cp.addAll(classpath); dependentCp = null; } androidSdk.dex(multidex, localDex, localDesugarTempDir, cp, dependentCp); return vogar.Result.SUCCESS; }
@java.lang.Override public java.util.Set<vogar.tasks.Task> installActionTasks(vogar.Action action, java.io.File jar) { java.io.File localDexFile = run.localDexFile(action.getName()); java.io.File localDesugarTempDir = run.localDesugarTempDir(action.getName()); vogar.tasks.Task createDexJarTask = createCreateDexJarTask(vogar.Classpath.of(jar), jar, action.getName(), action, localDexFile, localDesugarTempDir); return java.util.Collections.singleton(createDexJarTask); }
private vogar.tasks.Task newCreateDexJarTask(vogar.Classpath classpath, java.io.File classpathElement, java.lang.String name, vogar.Action action, java.io.File localDex, java.io.File localDesugarTempDir) { vogar.tasks.Task dex; if (run.useJack) { dex = new vogar.android.JackDexTask(run, classpath, run.benchmark, name, classpathElement, action, localDex); } else { dex = new vogar.android.DexTask(run.androidSdk, classpath, run.benchmark, name, classpathElement, action, localDex, localDesugarTempDir, run.multidex); } return dex; }
private void addCreateDexJarAndPushTasks(java.util.Set<vogar.tasks.Task> tasks, java.lang.String name, java.io.File jar, vogar.Action action) { java.io.File localDex = run.localDexFile(name); java.io.File localDesugarTempDir = run.localDesugarTempDir(name); java.io.File deviceDex = run.targetDexFile(name); vogar.tasks.Task createDexJarTask = newCreateDexJarTask(run.classpath, jar, name, action, localDex, localDesugarTempDir); tasks.add(createDexJarTask); tasks.add(run.target.pushTask(localDex, deviceDex).afterSuccess(createDexJarTask)); }
private vogar.tasks.Task createCreateDexJarTask(vogar.Classpath classpath, java.io.File classpathElement, java.lang.String name, vogar.Action action, java.io.File localDex, java.io.File localDesugarTempDir) { vogar.tasks.Task dex; if (run.useJack) { dex = new vogar.android.JackDexTask(run, classpath, run.benchmark, name, classpathElement, action, localDex); } else { dex = new vogar.android.DexTask(run.androidSdk, classpath, run.benchmark, name, classpathElement, action, localDex, localDesugarTempDir, run.multidex); } return dex; }
private java.io.File createDex(vogar.Action action, java.io.File actionJar) { java.io.File dex = run.localFile(action, "classes.dex"); vogar.Classpath classesToDex = vogar.Classpath.of(actionJar); classesToDex.addAll(run.classpath); if (run.useJack) { throw new java.lang.UnsupportedOperationException("Jack support for --mode=activity not yet implemented"); } java.io.File localDesugarTempDir = run.localDesugarTempDir(action.getName()); vogar.Classpath dependentCp = null; run.androidSdk.dex(run.multidex, dex, localDesugarTempDir, classesToDex, dependentCp); return dex; }
public void startStreaming(java.lang.String serviceId, android.telephony.mbms.IStreamingServiceCallback callback) { mStreamStates.put(serviceId, new com.android.phone.testapps.embmsmw.AppActiveStreams.StreamCallbackWithState(callback, android.telephony.mbms.StreamingService.STATE_STARTED, android.telephony.mbms.StreamingService.UNICAST_METHOD)); try { callback.streamStateUpdated(StreamingService.STATE_STARTED); updateStreamingMethod(serviceId); } catch (android.os.RemoteException e) { dispose(serviceId); } }
public void setMethod(int method) { mMethod = method; }
private void updateStreamingMethod(java.lang.String serviceId) { com.android.phone.testapps.embmsmw.AppActiveStreams.StreamCallbackWithState callbackWithState = mStreamStates.get(serviceId); if (callbackWithState != null) { int oldMethod = callbackWithState.getMethod(); int newMethod = oldMethod; if ((mRand.nextInt(99)) < 50) { newMethod = android.telephony.mbms.StreamingService.UNICAST_METHOD; } else { newMethod = android.telephony.mbms.StreamingService.BROADCAST_METHOD; } if (newMethod != oldMethod) { callbackWithState.setMethod(newMethod); try { callbackWithState.getCallback().streamMethodUpdated(newMethod); } catch (android.os.RemoteException e) { dispose(serviceId); } } } }
private void doStartScan(com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo nsri) { if (nsri == null) { android.util.Log.e(com.android.internal.telephony.NetworkScanRequestTracker.TAG, "CMD_START_NETWORK_SCAN: nsri is null"); return; } if (!(isValidScan(nsri))) { notifyMessenger(nsri, TelephonyScanManager.CALLBACK_SCAN_ERROR, NetworkScan.ERROR_INVALID_SCAN, null); return; } if (!(startNewScan(nsri))) { if (!(interruptLiveScan(nsri))) { if (!(cacheScan(nsri))) { notifyMessenger(nsri, TelephonyScanManager.CALLBACK_SCAN_ERROR, NetworkScan.ERROR_DEVICE_BUSY, null); } } } }
private synchronized void doInterruptScan(int scanId) { if (scanId == (mLiveRequestInfo.mScanId)) { mLiveRequestInfo.mPhone.stopNetworkScan(mHandler.obtainMessage(com.android.internal.telephony.NetworkScanRequestTracker.EVENT_INTERRUPT_NETWORK_SCAN_DONE, mLiveRequestInfo)); } else { android.util.Log.e(com.android.internal.telephony.NetworkScanRequestTracker.TAG, (("doInterruptScan: scan " + scanId) + " does not exist!")); } }
private synchronized boolean startNewScan(com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo nsri) { if ((mLiveRequestInfo) == null) { mLiveRequestInfo = nsri; nsri.mPhone.startNetworkScan(mHandler.obtainMessage(com.android.internal.telephony.NetworkScanRequestTracker.EVENT_START_NETWORK_SCAN_DONE, nsri)); return true; } return false; }
private void stopScanDone(android.os.AsyncResult ar) { com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo nsri = ((com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo) (ar.userObj)); if (nsri == null) { android.util.Log.e(com.android.internal.telephony.NetworkScanRequestTracker.TAG, "EVENT_STOP_NETWORK_SCAN_DONE: nsri is null"); return; } if (((ar.exception) == null) && ((ar.result) != null)) { com.android.internal.telephony.NetworkScanResult nsr = ((com.android.internal.telephony.NetworkScanResult) (ar.result)); deleteScanAndNotify(nsri, nsr.scanError); } else { logEmptyResultOrException(ar); deleteScanAndNotify(nsri, NetworkScan.ERROR_RIL_ERROR); } nsri.mPhone.mCi.unregisterForNetworkScanResult(mHandler); }
private void startScanDone(android.os.AsyncResult ar) { com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo nsri = ((com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo) (ar.userObj)); if (nsri == null) { android.util.Log.e(com.android.internal.telephony.NetworkScanRequestTracker.TAG, "EVENT_START_NETWORK_SCAN_DONE: nsri is null"); return; } if (((ar.exception) == null) && ((ar.result) != null)) { com.android.internal.telephony.NetworkScanResult nsr = ((com.android.internal.telephony.NetworkScanResult) (ar.result)); if ((nsr.scanError) == (android.telephony.NetworkScan.SUCCESS)) { nsri.mPhone.mCi.registerForNetworkScanResult(mHandler, com.android.internal.telephony.NetworkScanRequestTracker.EVENT_RECEIVE_NETWORK_SCAN_RESULT, nsr); } else { deleteScanAndNotify(nsri, nsr.scanError); } } else { logEmptyResultOrException(ar); deleteScanAndNotify(nsri, NetworkScan.ERROR_RIL_ERROR); } }
private void interruptScanDone(android.os.AsyncResult ar) { com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo nsri = ((com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo) (ar.userObj)); if (nsri == null) { android.util.Log.e(com.android.internal.telephony.NetworkScanRequestTracker.TAG, "EVENT_INTERRUPT_NETWORK_SCAN_DONE: nsri is null"); return; } nsri.mPhone.mCi.unregisterForNetworkScanResult(mHandler); deleteScan(nsri); }
@java.lang.Override public int requestNetworkScan(int subId, android.telephony.NetworkScanRequest request, android.os.Messenger messenger, android.os.IBinder binder) { enforceModifyPermissionOrCarrierPrivilege(subId); return mNetworkScanRequestTracker.startNetworkScan(request, messenger, binder); }
private void receiveResult(android.os.AsyncResult ar) { com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo nsri = ((com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo) (ar.userObj)); if (nsri == null) { android.util.Log.e(com.android.internal.telephony.NetworkScanRequestTracker.TAG, "EVENT_RECEIVE_NETWORK_SCAN_RESULT: nsri is null"); return; } if (((ar.exception) == null) && ((ar.result) != null)) { com.android.internal.telephony.NetworkScanResult nsr = ((com.android.internal.telephony.NetworkScanResult) (ar.result)); if ((nsr.scanError) == (android.telephony.NetworkScan.SUCCESS)) { notifyMessenger(nsri, TelephonyScanManager.CALLBACK_SCAN_RESULTS, NetworkScan.SUCCESS, nsr.networkInfos); if ((nsr.scanStatus) == (NetworkScanResult.SCAN_STATUS_COMPLETE)) { deleteScanAndNotify(nsri, NetworkScan.SUCCESS); nsri.mPhone.mCi.unregisterForNetworkScanResult(mHandler); } } else { if ((nsr.networkInfos) != null) { notifyMessenger(nsri, TelephonyScanManager.CALLBACK_SCAN_RESULTS, NetworkScan.SUCCESS, nsr.networkInfos); } deleteScanAndNotify(nsri, nsr.scanError); nsri.mPhone.mCi.unregisterForNetworkScanResult(mHandler); } } else { logEmptyResultOrException(ar); deleteScanAndNotify(nsri, NetworkScan.ERROR_RIL_ERROR); nsri.mPhone.mCi.unregisterForNetworkScanResult(mHandler); } }
public void binderDied() { android.util.Log.e(com.android.internal.telephony.NetworkScanRequestTracker.TAG, (((("PhoneInterfaceManager NetworkScanRequestInfo binderDied(" + (mRequest)) + ", ") + (mBinder)) + ")")); interruptNetworkScan(mScanId); }
private void interruptNetworkScan(int scanId) { mHandler.obtainMessage(com.android.internal.telephony.NetworkScanRequestTracker.CMD_INTERRUPT_NETWORK_SCAN, scanId).sendToTarget(); }
private synchronized void doStopScan(int scanId) { if (scanId == (mLiveRequestInfo.mScanId)) { mLiveRequestInfo.mPhone.stopNetworkScan(mHandler.obtainMessage(com.android.internal.telephony.NetworkScanRequestTracker.EVENT_STOP_NETWORK_SCAN_DONE, mLiveRequestInfo)); } else if (scanId == (mPendingRequestInfo.mScanId)) { notifyMessenger(mPendingRequestInfo, TelephonyScanManager.CALLBACK_SCAN_COMPLETE, NetworkScan.SUCCESS, null); mPendingRequestInfo = null; } else { android.util.Log.e(com.android.internal.telephony.NetworkScanRequestTracker.TAG, (("stopScan: scan " + scanId) + " does not exist!")); } }
public void stopNetworkScan(int scanId) { synchronized(mScheduler) { if (((scanId == (mScheduler.mLiveRequestInfo.mScanId)) && ((android.os.Binder.getCallingUid()) == (mScheduler.mLiveRequestInfo.mUid))) || ((scanId == (mScheduler.mPendingRequestInfo.mScanId)) && ((android.os.Binder.getCallingUid()) == (mScheduler.mPendingRequestInfo.mUid)))) { mHandler.obtainMessage(com.android.internal.telephony.NetworkScanRequestTracker.CMD_STOP_NETWORK_SCAN, scanId).sendToTarget(); } else { throw new java.lang.IllegalArgumentException((("Scan with id: " + scanId) + " does not exist!")); } } }
private boolean startIPv6() { try { mNetworkInterface = java.net.NetworkInterface.getByName(mIfaceName); } catch (java.net.SocketException e) { mLog.e(("Error looking up NetworkInterfaces: " + e)); stop(); return false; } if ((mNetworkInterface) == null) { mLog.e("Failed to find NetworkInterface"); stop(); return false; } try { mHwAddr = mNetworkInterface.getHardwareAddress(); } catch (java.net.SocketException e) { mLog.e(("Failed to find hardware address: " + e)); stop(); return false; } final int ifindex = mNetworkInterface.getIndex(); mRaDaemon = new android.net.ip.RouterAdvertisementDaemon(mIfaceName, ifindex, mHwAddr); if (!(mRaDaemon.start())) { stop(); return false; } return true; }
@java.lang.Override public int hashCode() { return (((scanStatus) * 31) + ((scanError) * 23)) + ((networkInfos) == null ? 0 : (networkInfos.hashCode()) * 37); }
void onClientPhyRead(int clientIf, java.lang.String address, int txPhy, int rxPhy, int status) throws android.os.RemoteException { if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ((("onClientPhyRead() - address=" + address) + ", status=") + status)); java.lang.Integer connId = mClientMap.connIdByAddress(clientIf, address); if (connId == null) { android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ("onClientPhyRead() - no connection to " + address)); return; } com.android.bluetooth.gatt.ClientMap.App app = mClientMap.getByConnId(connId); if (app == null) return; app.callback.onPhyRead(address, txPhy, rxPhy, status); }
void onClientPhyUpdate(int clientIf, java.lang.String address, int txPhy, int rxPhy, int status) throws android.os.RemoteException { if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ((("onClientPhyUpdate() - address=" + address) + ", status=") + status)); java.lang.Integer connId = mClientMap.connIdByAddress(clientIf, address); if (connId == null) { android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ("onClientPhyUpdate() - no connection to " + address)); return; } com.android.bluetooth.gatt.ClientMap.App app = mClientMap.getByConnId(connId); if (app == null) return; app.callback.onPhyUpdate(address, txPhy, rxPhy, status); }
void onServerPhyUpdate(int serverIf, java.lang.String address, int txPhy, int rxPhy, int status) throws android.os.RemoteException { if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ((("onServerPhyUpdate() - address=" + address) + ", status=") + status)); java.lang.Integer connId = mServerMap.connIdByAddress(serverIf, address); if (connId == null) { android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ("onServerPhyUpdate() - no connection to " + address)); return; } com.android.bluetooth.gatt.ServerMap.App app = mServerMap.getByConnId(connId); if (app == null) return; app.callback.onPhyUpdate(address, txPhy, rxPhy, status); }
public static void main(java.lang.String[] args) throws java.lang.Exception { int alloc1 = 1; final java.lang.Class<?> vm_runtime = java.lang.Class.forName("dalvik.system.VMRuntime"); final java.lang.reflect.Method get_runtime = vm_runtime.getDeclaredMethod("getRuntime"); final java.lang.Object runtime = get_runtime.invoke(null); final java.lang.reflect.Method clear_growth_limit = vm_runtime.getDeclaredMethod("clearGrowthLimit"); int alloc1 = Main.allocateTillOOME(); java.lang.Runtime.getRuntime().gc(); clear_growth_limit.invoke(runtime); int alloc2 = Main.allocateTillOOME(); if (alloc1 > alloc2) { java.lang.System.out.println(((((("ERROR: Allocated less memory after growth" + "limit cleared (") + alloc1) + " MBs > ") + alloc2) + " MBs")); } else { java.lang.System.out.println("Test complete"); } }
private boolean pushUpstreamParameters() { final java.util.ArrayList<java.lang.String> v6gateways = new java.util.ArrayList<>(); if ((mUpstreamLinkProperties) == null) { return mHwInterface.setUpstreamParameters("", "", "", v6gateways); } final java.lang.String iface = mUpstreamLinkProperties.getInterfaceName(); java.lang.String v4addr = ""; java.lang.String v4gateway = ""; for (java.net.InetAddress ip : mUpstreamLinkProperties.getAddresses()) { if (ip instanceof java.net.Inet4Address) { v4addr = ip.getHostAddress(); break; } } for (android.net.RouteInfo ri : mUpstreamLinkProperties.getRoutes()) { if (!(ri.hasGateway())) continue; final java.lang.String gateway = ri.getGateway().getHostAddress(); if (ri.isIPv4Default()) { v4gateway = gateway; } else if (ri.isIPv6Default()) { v6gateways.add(gateway); } } return mHwInterface.setUpstreamParameters(iface, v4addr, v4gateway, v6gateways); }
@java.lang.Override public void updateTimeout(android.hardware.tetheroffload.control.V1_0.NatTimeoutUpdate params) { handler.post(() -> { controlCb.onNatTimeoutUpdate(params.proto, params.src.addr, asUint(params.src.port), params.dst.addr, asUint(params.dst.port)); }); }
public org.jacoco.core.matcher.IncludeExcludeMatcher Exclude(org.jacoco.core.matcher.Matcher<T> exclusion) { exclusions.add(exclusion); return this; }
public org.jacoco.core.matcher.ClassnameMatcher Include(java.lang.String pattern) { matcher.Include(new org.jacoco.core.matcher.WildcardMatcher(pattern)); return this; }
public org.jacoco.core.matcher.IncludeExcludeMatcher Include(org.jacoco.core.matcher.Matcher<T> inclusion) { inclusions.add(inclusion); return this; }
public boolean matches(org.objectweb.asm.ClassReader classReader) { return this.matcher.matches(classReader.getClassName().replaceAll("/", ".")); }
public org.jacoco.core.matcher.ClassnameMatcher Exclude(java.lang.String pattern) { matcher.Exclude(new org.jacoco.core.matcher.WildcardMatcher(pattern)); return this; }
public boolean matches(T input) { for (org.jacoco.core.matcher.Matcher<T> exclusion : exclusions) { if (exclusion.matches(input)) { return false; } } for (org.jacoco.core.matcher.Matcher<T> inclusion : inclusions) { if (inclusion.matches(input)) { return true; } } return (inclusions.size()) == 0; }
@java.lang.Override public void enter() { if (!(configureIPv4(true))) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_IFACE_CFG_ERROR; return; } try { mNMService.tetherInterface(mIfaceName); } catch (java.lang.Exception e) { mLog.e(("Error Tethering: " + e)); mLastError = android.net.ConnectivityManager.TETHER_ERROR_TETHER_IFACE_ERROR; return; } if (!(mIPv6TetherSvc.start())) { mLog.e("Failed to start IPv6TetheringInterfaceServices"); return; } }
private void notifyLinkPropertiesChanged(java.lang.String iface, com.android.server.connectivity.tethering.TetherInterfaceStateMachine who, android.net.LinkProperties newLp) { final int state; synchronized(mPublicSync) { final com.android.server.connectivity.Tethering.TetherState tetherState = mTetherStates.get(iface); if ((tetherState != null) && (tetherState.stateMachine.equals(who))) { state = tetherState.lastState; } else { mLog.log(("got notification from stale iface " + iface)); return; } } mLog.log(java.lang.String.format("OBSERVED LinkProperties update iface=%s state=%s lp=%s", iface, state, newLp)); final int which = com.android.server.connectivity.Tethering.TetherMasterSM.EVENT_IFACE_UPDATE_LINKPROPERTIES; mTetherMasterSM.sendMessage(which, state, 0, newLp); }
public void stop() { final boolean hadBeenStarted = started(); mUpstreamLinkProperties = null; mHwInterface.stopOffloadControl(); mControlInitialized = false; mConfigInitialized = false; if (hadBeenStarted) mLog.log("tethering offload stopped"); }
@java.lang.Override public boolean processMessage(android.os.Message message) { maybeLogMessage(this, message.what); switch (message.what) { case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_TETHER_REQUESTED : mLastError = android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR; switch (message.arg1) { case IControlsTethering.STATE_LOCAL_ONLY : transitionTo(mLocalHotspotState); break; case IControlsTethering.STATE_TETHERED : transitionTo(mTetheredState); break; default : mLog.e("Invalid tethering interface serving state specified."); } break; case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_INTERFACE_DOWN : transitionTo(mUnavailableState); break; case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_IPV6_TETHER_UPDATE : mIPv6TetherSvc.updateUpstreamIPv6LinkProperties(((android.net.LinkProperties) (message.obj))); sendLinkProperties(); break; default : return NOT_HANDLED; } return HANDLED; }
@java.lang.Override public void exit() { mIPv6TetherSvc.stop(); try { mNMService.untetherInterface(mIfaceName); } catch (java.lang.Exception e) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_UNTETHER_IFACE_ERROR; mLog.e(("Failed to untether interface: " + e)); } configureIPv4(false); resetLinkProperties(); }
private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { android.net.ConnectivityManager.checkCallbackNotNull(callback); com.android.internal.util.Preconditions.checkArgument(((action == (android.net.ConnectivityManager.REQUEST)) || (need != null)), "null NetworkCapabilities"); final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { if (((callback.networkRequest) != null) && ((callback.networkRequest) != (android.net.ConnectivityManager.NOT_IN_USE))) { android.util.Log.e(android.net.ConnectivityManager.TAG, "NetworkCallback was already registered"); } android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throw android.net.ConnectivityManager.convertServiceException(e); } return request; }
public void unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback networkCallback) { android.net.ConnectivityManager.checkCallbackNotNull(networkCallback); final java.util.List<android.net.NetworkRequest> reqs = new java.util.ArrayList<>(); synchronized(android.net.ConnectivityManager.sCallbacks) { com.android.internal.util.Preconditions.checkArgument(((networkCallback.networkRequest) != null), "NetworkCallback was not registered"); com.android.internal.util.Preconditions.checkArgument(((networkCallback.networkRequest) != (android.net.ConnectivityManager.NOT_IN_USE)), "NetworkCallback was already unregistered"); for (java.util.Map.Entry<android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback> e : android.net.ConnectivityManager.sCallbacks.entrySet()) { if ((e.getValue()) == networkCallback) { reqs.add(e.getKey()); } } for (android.net.NetworkRequest r : reqs) { try { mService.releaseNetworkRequest(r); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } android.net.ConnectivityManager.sCallbacks.remove(r); } networkCallback.networkRequest = android.net.ConnectivityManager.NOT_IN_USE; } }
private void done(com.android.captiveportallogin.CaptivePortalLoginActivity.Result result) { if (com.android.captiveportallogin.CaptivePortalLoginActivity.DBG) { android.util.Log.d(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, java.lang.String.format("Result %s for %s", result.name(), mUrl.toString())); } ensureNetworkCallbackUnregistered(); logMetricsEvent(result.metricsEvent); switch (result) { case DISMISSED : mCaptivePortal.reportCaptivePortalDismissed(); break; case UNWANTED : mCaptivePortal.ignoreNetwork(); break; case WANTED_AS_IS : mCaptivePortal.useNetwork(); break; } finishAndRemoveTask(); }
@java.lang.Override public void onDestroy() { super.onDestroy(); ensureNetworkCallbackUnregistered(); if (mLaunchBrowser) { for (int i = 0; i < 5; i++) { if (mNetwork.equals(mCm.getActiveNetwork())) break; try { java.lang.Thread.sleep(100); } catch (java.lang.InterruptedException e) { } } final java.lang.String url = mUrl.toString(); if (com.android.captiveportallogin.CaptivePortalLoginActivity.DBG) { android.util.Log.d(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, ("starting activity with intent ACTION_VIEW for " + url)); } startActivity(new android.content.Intent(android.content.Intent.ACTION_VIEW, android.net.Uri.parse(url))); } }
private static void printUsage() { java.lang.System.out.println("Usage:"); java.lang.System.out.println((("\t" + (com.android.timezone.distro.tools.CreateTimeZoneDistro.class.getName())) + " <tzupdate.properties file> <output dir>")); }
private static void assertFileCount(int expectedFiles, java.io.File rootDir) throws java.lang.Exception { final java.util.ArrayList<java.nio.file.Path> paths = new java.util.ArrayList<>(); java.nio.file.SimpleFileVisitor<java.nio.file.Path> visitor = new java.nio.file.SimpleFileVisitor<java.nio.file.Path>() { @java.lang.Override public java.nio.file.FileVisitResult visitFile(java.nio.file.Path filePath, java.nio.file.attribute.BasicFileAttributes attrs) throws java.io.IOException { paths.add(filePath); return java.nio.file.FileVisitResult.CONTINUE; } }; java.nio.file.Files.walkFileTree(rootDir.toPath(), visitor); assertEquals(("Found :" + paths), expectedFiles, paths.size()); }
@org.junit.Test public void testDefinedUpstreamTypesSansEthernetAddsEthernet() { when(mResources.getIntArray(com.android.internal.R.array.config_tether_upstream_types)).thenReturn(new int[]{ TYPE_WIFI, TYPE_MOBILE_HIPRI }); mHasTelephonyManager = false; when(mTelephonyManager.getTetherApnRequired()).thenReturn(com.android.server.connectivity.tethering.TetheringConfiguration.DUN_UNSPECIFIED); final com.android.server.connectivity.tethering.TetheringConfiguration cfg = new com.android.server.connectivity.tethering.TetheringConfiguration(mMockContext, mLog); assertEquals(3, cfg.preferredUpstreamIfaceTypes.size()); final java.util.Iterator<java.lang.Integer> upstreamIterator = cfg.preferredUpstreamIfaceTypes.iterator(); assertTrue(upstreamIterator.hasNext()); assertEquals(com.android.server.connectivity.tethering.TYPE_ETHERNET, upstreamIterator.next().intValue()); assertTrue(upstreamIterator.hasNext()); assertEquals(com.android.server.connectivity.tethering.TYPE_WIFI, upstreamIterator.next()).intValue(); assertTrue(upstreamIterator.hasNext()); assertEquals(com.android.server.connectivity.tethering.TYPE_MOBILE_HIPRI, upstreamIterator.next().intValue()); assertFalse(upstreamIterator.hasNext()); }
@org.junit.Test public void testNoDefinedUpstreamTypesDoesNotAddEthernet() { when(mResources.getIntArray(com.android.internal.R.array.config_tether_upstream_types)).thenReturn(new int[]{ }); mHasTelephonyManager = false; when(mTelephonyManager.getTetherApnRequired()).thenReturn(com.android.server.connectivity.tethering.TetheringConfiguration.DUN_UNSPECIFIED); final com.android.server.connectivity.tethering.TetheringConfiguration cfg = new com.android.server.connectivity.tethering.TetheringConfiguration(mMockContext, mLog); assertTrue(cfg.preferredUpstreamIfaceTypes.isEmpty()); }
@org.junit.Test public void testDefinedUpstreamTypesWithEthernetDoesNotAddEthernet() { when(mResources.getIntArray(com.android.internal.R.array.config_tether_upstream_types)).thenReturn(new int[]{ TYPE_WIFI, TYPE_ETHERNET, TYPE_MOBILE_HIPRI }); mHasTelephonyManager = false; when(mTelephonyManager.getTetherApnRequired()).thenReturn(com.android.server.connectivity.tethering.TetheringConfiguration.DUN_UNSPECIFIED); final com.android.server.connectivity.tethering.TetheringConfiguration cfg = new com.android.server.connectivity.tethering.TetheringConfiguration(mMockContext, mLog); assertEquals(3, cfg.preferredUpstreamIfaceTypes.size()); final java.util.Iterator<java.lang.Integer> upstreamIterator = cfg.preferredUpstreamIfaceTypes.iterator(); assertTrue(upstreamIterator.hasNext()); assertEquals(com.android.server.connectivity.tethering.TYPE_WIFI, upstreamIterator.next().intValue()); assertTrue(upstreamIterator.hasNext()); assertEquals(com.android.server.connectivity.tethering.TYPE_ETHERNET, upstreamIterator.next().intValue()); assertTrue(upstreamIterator.hasNext()); assertEquals(com.android.server.connectivity.tethering.TYPE_MOBILE_HIPRI, upstreamIterator.next().intValue()); assertFalse(upstreamIterator.hasNext()); }
@java.lang.SuppressWarnings("unchecked") private java.util.List<java.lang.Class<? extends junit.framework.TestCase>> selectTestClasses(java.util.Set<java.lang.Class<?>> allClasses) { java.util.List<java.lang.Class<? extends junit.framework.TestCase>> testClasses = new java.util.ArrayList<>(); for (java.lang.Class<?> testClass : select(allClasses, new android.test.suitebuilder.TestGrouping.TestCasePredicate())) { testClasses.add(((java.lang.Class<? extends junit.framework.TestCase>) (testClass))); } return testClasses; }
private void responseScanStatus(android.hardware.radio.V1_0.RadioResponseInfo responseInfo) { com.android.internal.telephony.RILRequest rr = mRil.processResponse(responseInfo); if (rr != null) { com.android.internal.telephony.NetworkScanResult nsr = null; if ((responseInfo.error) == (android.hardware.radio.V1_0.RadioError.NONE)) { nsr = new com.android.internal.telephony.NetworkScanResult(0, 0, null); com.android.internal.telephony.RadioResponse.sendMessageResponse(rr.mResult, nsr); } mRil.processResponseDone(rr, responseInfo, nsr); } }
private void stopScanDone(android.os.AsyncResult ar) { com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo nsri = ((com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo) (ar.userObj)); if (nsri == null) { android.util.Log.e(com.android.internal.telephony.NetworkScanRequestTracker.TAG, "EVENT_STOP_NETWORK_SCAN_DONE: nsri is null"); return; } if (((ar.exception) == null) && ((ar.result) != null)) { deleteScanAndMayNotify(nsri, NetworkScan.SUCCESS, true); } else { logEmptyResultOrException(ar); com.android.internal.telephony.CommandException.Error error = ((com.android.internal.telephony.CommandException) (ar.exception)).getCommandError(); deleteScanAndMayNotify(nsri, commandExceptionErrorToScanError(error), true); } nsri.mPhone.mCi.unregisterForNetworkScanResult(mHandler); }
private synchronized void startScanDone(android.os.AsyncResult ar) { com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo nsri = ((com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo) (ar.userObj)); if (nsri == null) { android.util.Log.e(com.android.internal.telephony.NetworkScanRequestTracker.TAG, "EVENT_START_NETWORK_SCAN_DONE: nsri is null"); return; } if (((mLiveRequestInfo) == null) || ((nsri.mScanId) != (mLiveRequestInfo.mScanId))) { android.util.Log.e(com.android.internal.telephony.NetworkScanRequestTracker.TAG, "EVENT_START_NETWORK_SCAN_DONE: nsri does not match mLiveRequestInfo"); return; } if (((ar.exception) == null) && ((ar.result) != null)) { nsri.mPhone.mCi.registerForNetworkScanResult(mHandler, com.android.internal.telephony.NetworkScanRequestTracker.EVENT_RECEIVE_NETWORK_SCAN_RESULT, nsri); } else { logEmptyResultOrException(ar); com.android.internal.telephony.CommandException.Error error = ((com.android.internal.telephony.CommandException) (ar.exception)).getCommandError(); deleteScanAndMayNotify(nsri, commandExceptionErrorToScanError(error), true); } }
public static java.lang.String ellipsize(java.lang.String s) { if (!(Build.TYPE.equals("user"))) return s; if (s == null) return null; if ((s.length()) == 1) return s; return ((s.charAt(0)) + "⋯") + (s.charAt(((s.length()) - 1))); }
private boolean startIPv6() { try { mNwService.setInterfaceIpv6PrivacyExtensions(mInterfaceName, true); enableStablePrivacyIfSupported(); mNwService.enableIpv6(mInterfaceName); } catch (android.os.RemoteException re) { logError("Unable to change interface settings: %s", re); return false; } catch (java.lang.IllegalStateException ie) { logError("Unable to change interface settings: %s", ie); return false; } return true; }
private void enableStablePrivacyIfSupported() throws android.os.RemoteException { try { mNwService.setIPv6AddrGenMode(mInterfaceName, mConfiguration.mIPv6AddrGenMode); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) != (android.system.OsConstants.EOPNOTSUPP)) { throw e; } } }
public void cleanup() { mRemoteDevices = null; if ((mProfileConnectionState) != null) { mProfileConnectionState.clear(); mProfileConnectionState = null; } if ((mReceiver) != null) { mService.unregisterReceiver(mReceiver); mReceiver = null; } mService = null; mBondedDevices.clear(); }
private int getTargetIndex(com.android.dx.dex.file.DexFile file) { com.android.dx.rop.cst.Constant ref = methodHandle.getRef(); if (methodHandle.isAccessor()) { com.android.dx.dex.file.FieldIdsSection fieldIds = file.getFieldIds(); return fieldIds.indexOf(((com.android.dx.rop.cst.CstFieldRef) (ref))); } else if (methodHandle.isInvocation()) { com.android.dx.dex.file.MethodIdsSection methodIds = file.getMethodIds(); return methodIds.indexOf(((com.android.dx.rop.cst.CstBaseMethodRef) (ref))); } else { throw new java.lang.IllegalStateException("Unhandled invocation type"); } }
@java.lang.Override public void writeTo(com.android.dx.dex.file.DexFile file, com.android.dx.util.AnnotatedOutput out) { int offset = data.getAbsoluteOffset(); if (out.annotates()) { out.annotate(0, (((indexString()) + ' ') + (callSite.toString()))); out.annotate(4, ("call_site_off: " + (com.android.dx.util.Hex.u4(offset)))); } out.writeInt(offset); }
@java.lang.Override public void addContents(com.android.dx.dex.file.DexFile file) { if ((data) == null) { com.android.dx.dex.file.MixedItemSection byteData = file.getByteData(); data = new com.android.dx.dex.file.CallSiteItem(callSite); byteData.add(data); } }
@java.lang.Override public int compareTo(java.lang.Object o) { com.android.dx.dex.file.CallSiteIdItem other = ((com.android.dx.dex.file.CallSiteIdItem) (o)); return callSite.compareTo(other.callSite); }
@java.lang.Override public com.android.dx.dex.file.IndexedItem get(com.android.dx.rop.cst.Constant cst) { throw new java.lang.UnsupportedOperationException("Not supported yet."); }
@java.lang.Override protected void orderItems() { int index = 0; for (com.android.dx.dex.file.CallSiteIdItem callSiteId : callSites.values()) { callSiteId.setIndex((index++)); } }
@java.lang.Override public com.android.dx.dex.file.IndexedItem get(com.android.dx.rop.cst.Constant cst) { if (cst == null) { throw new java.lang.NullPointerException("cst == null"); } throwIfNotPrepared(); com.android.dx.dex.file.IndexedItem result = callSites.get(((com.android.dx.rop.cst.CstCallSite) (cst))); if (result == null) { throw new java.lang.IllegalArgumentException("not found"); } return result; }
public void intern(com.android.dx.rop.cst.CstCallSite callSite) { if (callSite == null) { throw new java.lang.NullPointerException("callSite == null"); } throwIfPrepared(); com.android.dx.dex.file.CallSiteIdItem result = callSites.get(callSite); if (result == null) { result = new com.android.dx.dex.file.CallSiteIdItem(callSite); callSites.put(callSite, result); } }
@java.lang.Override protected void writeTo0(com.android.dx.dex.file.DexFile file, com.android.dx.util.AnnotatedOutput out) { if (out.annotates()) { out.annotate(0, ((offsetString()) + " call-site")); com.android.dx.dex.file.ValueEncoder encoder = new com.android.dx.dex.file.ValueEncoder(file, out); encoder.writeArray(value, true); } else { out.write(encodedForm); } }
com.android.dx.dex.file.IndexedItem findItemOrNull(com.android.dx.rop.cst.Constant cst) { com.android.dx.dex.file.IndexedItem item; if (cst instanceof com.android.dx.rop.cst.CstString) { return stringIds.get(cst); } else if (cst instanceof com.android.dx.rop.cst.CstType) { return typeIds.get(cst); } else if (cst instanceof com.android.dx.rop.cst.CstBaseMethodRef) { return methodIds.get(cst); } else if (cst instanceof com.android.dx.rop.cst.CstFieldRef) { return fieldIds.get(cst); } else if (cst instanceof com.android.dx.rop.cst.CstProtoRef) { return protoIds.get(cst); } else if (cst instanceof com.android.dx.rop.cst.CstInvokeDynamic) { com.android.dx.rop.cst.CstInvokeDynamic cstInvokeDynamic = ((com.android.dx.rop.cst.CstInvokeDynamic) (cst)); return callSiteIds.get(((com.android.dx.rop.cst.CstInvokeDynamic) (cst)).getCallSite()); } else { return null; } }
@java.lang.Override public java.util.Collection<? extends com.android.dx.dex.file.Item> items() { return callSites.values(); }
@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.CstInsn)) { return false; } com.android.dx.dex.code.CstInsn ci = ((com.android.dx.dex.code.CstInsn) (insn)); int cpi = ci.getIndex(); if (!(unsignedFitsInShort(cpi))) { return false; } com.android.dx.rop.cst.Constant cst = ci.getConstant(); if (!(((cst instanceof com.android.dx.rop.cst.CstMethodRef) || (cst instanceof com.android.dx.rop.cst.CstType)) || (cst instanceof com.android.dx.rop.cst.CstInvokeDynamic))) { return false; } com.android.dx.rop.code.RegisterSpecList regs = ci.getRegisters(); return (com.android.dx.dex.code.form.Form35c.wordCount(regs)) >= 0; }
@java.lang.Override public void writeTo(com.android.dx.dex.file.DexFile file, com.android.dx.util.AnnotatedOutput out) { int targetIndex = getTargetIndex(file); if (out.annotates()) { out.annotate(0, ("kind: " + (com.android.dx.util.Hex.u2(methodHandle.getKind())))); out.annotate(2, ("reserved:" + (com.android.dx.util.Hex.u2(0)))); if (methodHandle.isAccessor()) { out.annotate(2, ("fieldId: " + targetIndex)); } else { out.annotate(2, ("methodId: " + targetIndex)); } out.annotate(2, ("reserved:" + (com.android.dx.util.Hex.u2(0)))); } out.writeShort(methodHandle.getKind()); out.writeShort(0); out.writeShort(getTargetIndex(file)); out.writeShort(0); }
public boolean isAccessor() { return com.android.dx.rop.cst.CstMethodHandle.isAccessor(kind); }
@java.lang.Override public java.lang.String toHuman() { return ((com.android.dx.rop.cst.CstMethodHandle.getKindName(kind)) + ",") + (ref.toString()); }
public static java.lang.String getKindName(final int kind) { final int index = kind - (com.android.dx.rop.cst.CstMethodHandle.KIND_GETFIELD); return com.android.dx.rop.cst.CstMethodHandle.KIND_NAMES[index]; }
public static boolean isInvocation(int kind) { switch (kind) { case com.android.dx.rop.cst.CstMethodHandle.KIND_INVOKEVIRTUAL : case com.android.dx.rop.cst.CstMethodHandle.KIND_INVOKESTATIC : case com.android.dx.rop.cst.CstMethodHandle.KIND_INVOKESPECIAL : case com.android.dx.rop.cst.CstMethodHandle.KIND_NEWINVOKESPECIAL : case com.android.dx.rop.cst.CstMethodHandle.KIND_INVOKEINTERFACE : return true; default : return false; } }
public static com.android.dx.rop.cst.CstMethodHandle make(int kind, com.android.dx.rop.cst.Constant ref) { if (com.android.dx.rop.cst.CstMethodHandle.isAccessor(kind)) { if (!(ref instanceof com.android.dx.rop.cst.CstFieldRef)) { throw new java.lang.IllegalArgumentException(("ref has wrong type: " + (ref.getClass()))); } } else if (com.android.dx.rop.cst.CstMethodHandle.isInvocation(kind)) { if (!(ref instanceof com.android.dx.rop.cst.CstBaseMethodRef)) { throw new java.lang.IllegalArgumentException(("ref has wrong type: " + (ref.getClass()))); } } else { throw new java.lang.IllegalArgumentException(("kind is out of range: " + kind)); } return new com.android.dx.rop.cst.CstMethodHandle(kind, ref); }
public boolean isInvocation() { return com.android.dx.rop.cst.CstMethodHandle.isInvocation(kind); }
@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.CstInsn)) { return false; } com.android.dx.dex.code.CstInsn ci = ((com.android.dx.dex.code.CstInsn) (insn)); int cpi = ci.getIndex(); com.android.dx.rop.cst.Constant cst = ci.getConstant(); if (!(unsignedFitsInShort(cpi))) { return false; } if (!(((cst instanceof com.android.dx.rop.cst.CstMethodRef) || (cst instanceof com.android.dx.rop.cst.CstType)) || (cst instanceof com.android.dx.rop.cst.CstInvokeDynamic))) { return false; } com.android.dx.rop.code.RegisterSpecList regs = ci.getRegisters(); int sz = regs.size(); return ((regs.size()) == 0) || (((isRegListSequential(regs)) && (unsignedFitsInShort(regs.get(0).getReg()))) && (unsignedFitsInByte(regs.getWordCount()))); }
public static boolean isAccessor(int kind) { switch (kind) { case com.android.dx.rop.cst.CstMethodHandle.KIND_GETFIELD : case com.android.dx.rop.cst.CstMethodHandle.KIND_GETSTATIC : case com.android.dx.rop.cst.CstMethodHandle.KIND_PUTFIELD : case com.android.dx.rop.cst.CstMethodHandle.KIND_PUTSTATIC : return true; default : return false; } }
private void updateCurrentMediaState(boolean registering) { if (((!registering) && ((mAddrPlayerChangedNT) == (AvrcpConstants.NOTIFICATION_TYPE_INTERIM))) && ((mReportedPlayerID) != (mCurrAddrPlayerID))) { registerNotificationRspAddrPlayerChangedNative(AvrcpConstants.NOTIFICATION_TYPE_CHANGED, mCurrAddrPlayerID, com.android.bluetooth.avrcp.Avrcp.sUIDCounter); mAddrPlayerChangedNT = AvrcpConstants.NOTIFICATION_TYPE_CHANGED; mReportedPlayerID = mCurrAddrPlayerID; mPlayStatusChangedNT = AvrcpConstants.NOTIFICATION_TYPE_CHANGED; mTrackChangedNT = AvrcpConstants.NOTIFICATION_TYPE_CHANGED; mPlayPosChangedNT = AvrcpConstants.NOTIFICATION_TYPE_CHANGED; return; } com.android.bluetooth.avrcp.Avrcp.MediaAttributes currentAttributes; android.media.session.PlaybackState newState = updatePlaybackState(); synchronized(this) { if ((mMediaController) == null) { currentAttributes = new com.android.bluetooth.avrcp.Avrcp.MediaAttributes(null); } else { newState = mMediaController.getPlaybackState(); currentAttributes = new com.android.bluetooth.avrcp.Avrcp.MediaAttributes(mMediaController.getMetadata()); } } long newQueueId = android.media.session.MediaSession.QueueItem.UNKNOWN_ID; if (newState != null) newQueueId = newState.getActiveQueueItemId(); android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ((((("Media update: id " + (mLastQueueId)) + "➡") + newQueueId) + "? ") + (currentAttributes.toString()))); if (registering || (((newQueueId == (-1)) || (newQueueId != (mLastQueueId))) && (!(currentAttributes.equals(mMediaAttributes))))) { sendTrackChangedRsp(registering); mMediaAttributes = currentAttributes; mLastQueueId = newQueueId; } sendPlayPosNotificationRsp(false); }
private android.media.session.PlaybackState updatePlaybackState() { android.media.session.PlaybackState newState = new android.media.session.PlaybackState.Builder().setState(PlaybackState.STATE_NONE, PlaybackState.PLAYBACK_POSITION_UNKNOWN, 0.0F).build(); synchronized(this) { if ((mMediaController) == null) { boolean isPlaying = ((mA2dpState) == (android.bluetooth.BluetoothA2dp.STATE_PLAYING)) && (mAudioManager.isMusicActive()); android.media.session.PlaybackState.Builder builder = new android.media.session.PlaybackState.Builder(); if (isPlaying) { builder.setState(PlaybackState.STATE_PLAYING, PlaybackState.PLAYBACK_POSITION_UNKNOWN, 1.0F); } else { builder.setState(PlaybackState.STATE_PAUSED, PlaybackState.PLAYBACK_POSITION_UNKNOWN, 0.0F); } newState = builder.build(); } else { newState = mMediaController.getPlaybackState(); } } byte newPlayStatus = getBluetoothPlayState(newState); com.android.bluetooth.avrcp.MediaPlayerInfo player = getAddressedPlayerInfo(); if (player != null) { player.setPlayStatus(newPlayStatus); } if (com.android.bluetooth.avrcp.Avrcp.DEBUG) { android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, (((((((("updatePlaybackState (" + (mPlayStatusChangedNT)) + "): ") + (mReportedPlayStatus)) + "➡") + newPlayStatus) + "(") + newState) + ")")); } mCurrentPlayState = newState; if (((mPlayStatusChangedNT) == (AvrcpConstants.NOTIFICATION_TYPE_INTERIM)) && ((mReportedPlayStatus) != newPlayStatus)) { sendPlaybackStatus(AvrcpConstants.NOTIFICATION_TYPE_CHANGED, newPlayStatus); } return mCurrentPlayState; }
public void testSupplierConstructor() throws java.lang.Exception { com.android.timezone.distro.DistroVersion distroVersion = new com.android.timezone.distro.DistroVersion(DistroVersion.CURRENT_FORMAT_MAJOR_VERSION, DistroVersion.CURRENT_FORMAT_MINOR_VERSION, "2016c", 1); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); try (java.util.zip.ZipOutputStream zipOutputStream = new java.util.zip.ZipOutputStream(baos)) { com.android.timezone.distro.TimeZoneDistroTest.addZipEntry(zipOutputStream, TimeZoneDistro.DISTRO_VERSION_FILE_NAME, distroVersion.toBytes()); } byte[] bytes = baos.toByteArray(); com.android.timezone.distro.TimeZoneDistro distro = new com.android.timezone.distro.TimeZoneDistro(() -> new java.io.ByteArrayInputStream(bytes)); assertEquals(distroVersion, distro.getDistroVersion()); }
@org.junit.Test public void nulledMatchedDiffedFieldValues() { com.android.ahat.heapdump.FieldValue normal = new com.android.ahat.heapdump.FieldValue("name", "type", new com.android.ahat.heapdump.Value(1)); com.android.ahat.heapdump.FieldValue nulled = new com.android.ahat.heapdump.FieldValue("name", "type", null); com.android.ahat.heapdump.DiffedFieldValue x = com.android.ahat.heapdump.DiffedFieldValue.matched(normal, nulled); assertEquals("name", x.name); assertEquals("type", x.type); assertEquals(new com.android.ahat.heapdump.Value(1), x.current); assertNull(x.baseline); assertFalse(x.added); assertFalse(x.deleted); com.android.ahat.heapdump.DiffedFieldValue y = com.android.ahat.heapdump.DiffedFieldValue.matched(nulled, normal); assertEquals("name", y.name); assertEquals("type", y.type); assertNull(y.current); assertEquals(new com.android.ahat.heapdump.Value(1), y.baseline); assertFalse(y.added); assertFalse(y.deleted); }
public static com.android.ahat.heapdump.DiffedFieldValue matched(com.android.ahat.heapdump.FieldValue current, com.android.ahat.heapdump.FieldValue baseline) { return new com.android.ahat.heapdump.DiffedFieldValue(current.name, current.type, current.value, baseline.value, false, false); }
@java.lang.Override public java.lang.String toString() { if (added) { return ((((("(" + (name)) + " ") + (type)) + " +") + (current)) + ")"; } else if (deleted) { return ((((("(" + (name)) + " ") + (type)) + " -") + (baseline)) + ")"; } else { return ((((((("(" + (name)) + " ") + (type)) + " ") + (current)) + " ") + (baseline)) + ")"; } }
@org.junit.Test public void normalDeletedDiffedFieldValues() { com.android.ahat.heapdump.FieldValue normal = new com.android.ahat.heapdump.FieldValue("name", "type", new com.android.ahat.heapdump.Value(1)); com.android.ahat.heapdump.DiffedFieldValue x = com.android.ahat.heapdump.DiffedFieldValue.deleted(normal); assertEquals("name", x.name); assertEquals("type", x.type); assertEquals(new com.android.ahat.heapdump.Value(1), x.baseline); assertFalse(x.added); assertTrue(x.deleted); }
public static com.android.ahat.heapdump.DiffedFieldValue added(com.android.ahat.heapdump.FieldValue current) { return new com.android.ahat.heapdump.DiffedFieldValue(current.name, current.type, current.value, null, true, false); }
public static com.android.ahat.heapdump.DiffedFieldValue deleted(com.android.ahat.heapdump.FieldValue baseline) { return new com.android.ahat.heapdump.DiffedFieldValue(baseline.name, baseline.type, null, baseline.value, false, true); }
@org.junit.Test public void normalAddedDiffedFieldValues() { com.android.ahat.heapdump.FieldValue normal = new com.android.ahat.heapdump.FieldValue("name", "type", new com.android.ahat.heapdump.Value(1)); com.android.ahat.heapdump.DiffedFieldValue x = com.android.ahat.heapdump.DiffedFieldValue.added(normal); assertEquals("name", x.name); assertEquals("type", x.type); assertEquals(new com.android.ahat.heapdump.Value(1), x.current); assertTrue(x.added); assertFalse(x.deleted); }
@org.junit.Test public void nulledDeletedDiffedFieldValues() { com.android.ahat.heapdump.FieldValue nulled = new com.android.ahat.heapdump.FieldValue("name", "type", null); com.android.ahat.heapdump.DiffedFieldValue x = com.android.ahat.heapdump.DiffedFieldValue.deleted(nulled); assertEquals("name", x.name); assertEquals("type", x.type); assertNull(x.baseline); assertFalse(x.added); assertTrue(x.deleted); }
@org.junit.Test public void nulledAddedDiffedFieldValues() { com.android.ahat.heapdump.FieldValue nulled = new com.android.ahat.heapdump.FieldValue("name", "type", null); com.android.ahat.heapdump.DiffedFieldValue x = com.android.ahat.heapdump.DiffedFieldValue.added(nulled); assertEquals("name", x.name); assertEquals("type", x.type); assertNull(x.current); assertTrue(x.added); assertFalse(x.deleted); }
@java.lang.Override public boolean equals(java.lang.Object otherObject) { if (otherObject instanceof com.android.ahat.heapdump.DiffedFieldValue) { com.android.ahat.heapdump.DiffedFieldValue other = ((com.android.ahat.heapdump.DiffedFieldValue) (otherObject)); return (((((name.equals(other.name)) && (type.equals(other.type))) && (java.util.Objects.equals(current, other.current))) && (java.util.Objects.equals(baseline, other.baseline))) && (java.util.Objects.equals(added, other.added))) && (java.util.Objects.equals(deleted, other.deleted)); } return false; }
@org.junit.Test public void normalMatchedDiffedFieldValues() { com.android.ahat.heapdump.FieldValue normal1 = new com.android.ahat.heapdump.FieldValue("name", "type", new com.android.ahat.heapdump.Value(1)); com.android.ahat.heapdump.FieldValue normal2 = new com.android.ahat.heapdump.FieldValue("name", "type", new com.android.ahat.heapdump.Value(2)); com.android.ahat.heapdump.DiffedFieldValue x = com.android.ahat.heapdump.DiffedFieldValue.matched(normal1, normal2); assertEquals("name", x.name); assertEquals("type", x.type); assertEquals(new com.android.ahat.heapdump.Value(1), x.current); assertEquals(new com.android.ahat.heapdump.Value(2), x.baseline); assertFalse(x.added); assertFalse(x.deleted); }
private void deleteTestFiles(@javax.annotation.Nonnegative com.android.ddmlib.IDevice device, @javax.annotation.Nonnull java.io.File testDir) throws com.android.jack.test.runner.RuntimeRunnerException { java.lang.String testDirName = testDir.getName(); try { executeShellCommand(("rm -rf " + (testDir.getAbsolutePath())), device); executeShellCommand((("find /data/dalvik-cache -name '*" + testDirName) + "*' -exec rm -rf {} +"), device); } catch (com.android.ddmlib.TimeoutException | com.android.ddmlib.AdbCommandRejectedException | com.android.ddmlib.ShellCommandUnresponsiveException | java.io.IOException e) { throw new com.android.jack.test.runner.RuntimeRunnerException(e); } }
@org.junit.Test public void requestInstall_asyncSuccess() throws java.lang.Exception { configureCallerHasPermission(); android.os.ParcelFileDescriptor parcelFileDescriptor = com.android.server.timezone.RulesManagerServiceTest.createParcelFileDescriptor(com.android.server.timezone.RulesManagerServiceTest.createArbitraryBytes(1000)); com.android.server.timezone.CheckToken token = createArbitraryToken(); byte[] tokenBytes = token.toByteArray(); com.android.server.timezone.RulesManagerServiceTest.TestCallback callback = new com.android.server.timezone.RulesManagerServiceTest.TestCallback(); assertEquals(RulesManager.SUCCESS, mRulesManagerService.requestInstall(parcelFileDescriptor, tokenBytes, callback)); com.android.server.timezone.RulesManagerServiceTest.assertClosed(parcelFileDescriptor); callback.assertNoResultReceived(); verifyNoInstallerCallsMade(); verifyNoPackageTrackerCallsMade(); configureStageInstallExpectation(TimeZoneDistroInstaller.INSTALL_SUCCESS); mFakeExecutor.simulateAsyncExecutionOfLastCommand(); verifyStageInstallCalled(); verifyPackageTrackerCalled(token, true); callback.assertResultReceived(Callback.SUCCESS); }
@org.junit.Test public void getRulesState_operationInProgress() throws java.lang.Exception { configureCallerHasPermission(); java.lang.String systemRulesVersion = "2016a"; java.lang.String installedRulesVersion = "2016b"; int revision = 3; configureDeviceSystemRulesVersion(systemRulesVersion); com.android.timezone.distro.DistroVersion installedDistroVersion = new com.android.timezone.distro.DistroVersion(com.android.timezone.distro.DistroVersion.CURRENT_FORMAT_MAJOR_VERSION, ((com.android.timezone.distro.DistroVersion.CURRENT_FORMAT_MINOR_VERSION) - 1), installedRulesVersion, revision); configureInstalledDistroVersion(installedDistroVersion); android.os.ParcelFileDescriptor parcelFileDescriptor = com.android.server.timezone.RulesManagerServiceTest.createParcelFileDescriptor(com.android.server.timezone.RulesManagerServiceTest.createArbitraryBytes(1000)); byte[] tokenBytes = createArbitraryTokenBytes(); android.app.timezone.ICallback callback = new com.android.server.timezone.RulesManagerServiceTest.StubbedCallback(); mRulesManagerService.requestInstall(parcelFileDescriptor, tokenBytes, callback); com.android.server.timezone.RulesManagerServiceTest.assertClosed(parcelFileDescriptor); android.app.timezone.RulesState expectedRuleState = new android.app.timezone.RulesState(systemRulesVersion, RulesManagerService.DISTRO_FORMAT_VERSION_SUPPORTED, true, android.app.timezone.RulesState.STAGED_OPERATION_UNKNOWN, null, android.app.timezone.RulesState.DISTRO_STATUS_UNKNOWN, null); assertEquals(expectedRuleState, mRulesManagerService.getRulesState()); }
@java.lang.Override public int requestInstall(android.os.ParcelFileDescriptor distroParcelFileDescriptor, byte[] checkTokenBytes, android.app.timezone.ICallback callback) { try { mPermissionHelper.enforceCallerHasPermission(com.android.server.timezone.RulesManagerService.REQUIRED_UPDATER_PERMISSION); com.android.server.timezone.CheckToken checkToken = null; if (checkTokenBytes != null) { checkToken = com.android.server.timezone.RulesManagerService.createCheckTokenOrThrow(checkTokenBytes); } synchronized(this) { if (distroParcelFileDescriptor == null) { throw new java.lang.NullPointerException("distroParcelFileDescriptor == null"); } if (callback == null) { throw new java.lang.NullPointerException("observer == null"); } if (mOperationInProgress.get()) { return android.app.timezone.RulesManager.ERROR_OPERATION_IN_PROGRESS; } mOperationInProgress.set(true); android.os.ParcelFileDescriptor dupe; try { dupe = distroParcelFileDescriptor.dup(); } catch (java.io.IOException e) { return android.app.timezone.RulesManager.ERROR_UNKNOWN_FAILURE; } mExecutor.execute(new com.android.server.timezone.RulesManagerService.InstallRunnable(dupe, checkToken, callback)); return android.app.timezone.RulesManager.SUCCESS; } } finally { if (distroParcelFileDescriptor != null) { try { distroParcelFileDescriptor.close(); } catch (java.io.IOException e) { } } } }
@java.lang.Override public void run() { boolean success = false; try (android.os.ParcelFileDescriptor pfd = mDistroParcelFileDescriptor) { com.android.timezone.distro.TimeZoneDistro distro = new com.android.timezone.distro.TimeZoneDistro(new com.android.server.timezone.RulesManagerService.ParcelFileDescriptorSupplier(pfd)); int installerResult = mInstaller.stageInstallWithErrorCode(distro); int resultCode = mapInstallerResultToApiCode(installerResult); sendFinishedStatus(mCallback, resultCode); success = true; } catch (java.lang.Exception e) { android.util.Slog.w(com.android.server.timezone.RulesManagerService.TAG, "Failed to install distro.", e); sendFinishedStatus(mCallback, Callback.ERROR_UNKNOWN_FAILURE); } finally { mPackageTracker.recordCheckResult(mCheckToken, success); mOperationInProgress.set(false); } }
@org.junit.Test public void requestInstall_operationInProgress() throws java.lang.Exception { configureCallerHasPermission(); byte[] expectedContent = com.android.server.timezone.RulesManagerServiceTest.createArbitraryBytes(1000); android.os.ParcelFileDescriptor parcelFileDescriptor = com.android.server.timezone.RulesManagerServiceTest.createParcelFileDescriptor(expectedContent); byte[] tokenBytes = createArbitraryTokenBytes(); android.app.timezone.ICallback callback = new com.android.server.timezone.RulesManagerServiceTest.StubbedCallback(); assertEquals(RulesManager.SUCCESS, mRulesManagerService.requestInstall(parcelFileDescriptor, tokenBytes, callback)); com.android.server.timezone.RulesManagerServiceTest.assertClosed(parcelFileDescriptor); mFakeExecutor.getAndResetLastCommand(); assertEquals(RulesManager.ERROR_OPERATION_IN_PROGRESS, mRulesManagerService.requestInstall(parcelFileDescriptor, tokenBytes, callback)); mFakeExecutor.assertNothingQueued(); verifyNoInstallerCallsMade(); verifyNoPackageTrackerCallsMade(); }
@org.junit.Test public void requestInstall_nullTokenBytes() throws java.lang.Exception { configureCallerHasPermission(); byte[] expectedContent = com.android.server.timezone.RulesManagerServiceTest.createArbitraryBytes(1000); android.os.ParcelFileDescriptor parcelFileDescriptor = com.android.server.timezone.RulesManagerServiceTest.createParcelFileDescriptor(expectedContent); com.android.server.timezone.RulesManagerServiceTest.TestCallback callback = new com.android.server.timezone.RulesManagerServiceTest.TestCallback(); assertEquals(RulesManager.SUCCESS, mRulesManagerService.requestInstall(parcelFileDescriptor, null, callback)); verifyNoInstallerCallsMade(); callback.assertNoResultReceived(); configureStageInstallExpectation(TimeZoneDistroInstaller.INSTALL_SUCCESS); mFakeExecutor.simulateAsyncExecutionOfLastCommand(); verifyStageInstallCalled(); verifyPackageTrackerCalled(null, true); callback.assertResultReceived(Callback.SUCCESS); }
@org.junit.Test public void requestInstall_asyncInstallFail() throws java.lang.Exception { configureCallerHasPermission(); byte[] expectedContent = com.android.server.timezone.RulesManagerServiceTest.createArbitraryBytes(1000); android.os.ParcelFileDescriptor parcelFileDescriptor = com.android.server.timezone.RulesManagerServiceTest.createParcelFileDescriptor(expectedContent); com.android.server.timezone.CheckToken token = createArbitraryToken(); byte[] tokenBytes = token.toByteArray(); com.android.server.timezone.RulesManagerServiceTest.TestCallback callback = new com.android.server.timezone.RulesManagerServiceTest.TestCallback(); assertEquals(RulesManager.SUCCESS, mRulesManagerService.requestInstall(parcelFileDescriptor, tokenBytes, callback)); verifyNoInstallerCallsMade(); callback.assertNoResultReceived(); configureStageInstallExpectation(TimeZoneDistroInstaller.INSTALL_FAIL_VALIDATION_ERROR); mFakeExecutor.simulateAsyncExecutionOfLastCommand(); verifyStageInstallCalled(); boolean expectedSuccess = true; verifyPackageTrackerCalled(token, expectedSuccess); callback.assertResultReceived(Callback.ERROR_INSTALL_VALIDATION_ERROR); }
@java.lang.Override public void endSession(int sessionId) throws android.os.RemoteException { synchronized(mLock) { isBinderAlive(); getServiceInterface(mBinder).endSession(mSlotId, mSupportedFeature, sessionId); } }
private java.lang.String getFooter(java.lang.String link) { return ((("<br><br>For details, visit the" + " <a href='") + link) + "'>") + "VTS dashboard.</a>"; }
private static boolean notifyIfInactive(com.android.vts.entity.TestStatusEntity test, long lastRunTime, java.lang.String link, java.util.List<java.lang.String> emails, java.util.List<javax.mail.Message> messages) { long now = java.util.concurrent.TimeUnit.MILLISECONDS.toMicros(java.lang.System.currentTimeMillis()); long diff = now - (test.timestamp); if ((diff >= (java.util.concurrent.TimeUnit.DAYS.toMicros(1))) && (diff < (java.util.concurrent.TimeUnit.DAYS.toMicros(8)))) { java.util.Date lastUpload = new java.util.Date(java.util.concurrent.TimeUnit.MICROSECONDS.toMillis(lastRunTime)); java.lang.String uploadTimeString = new java.text.SimpleDateFormat("MM/dd/yyyy HH:mm:ss").format(lastUpload); java.lang.String subject = "Warning! Inactive test: " + (test.testName); java.lang.String body = ((((("Hello,<br><br>Test \"" + (test.testName)) + "\" is inactive. ") + "No new data has been uploaded since ") + uploadTimeString) + ".") + (com.android.vts.servlet.VtsInactivityJobServlet.getFooter(link)); try { messages.add(com.android.vts.util.EmailHelper.composeEmail(emails, subject, body)); return true; } catch (javax.mail.MessagingException | java.io.UnsupportedEncodingException e) { com.android.vts.servlet.VtsInactivityJobServlet.logger.log(java.util.logging.Level.WARNING, "Error composing email : ", e); } } return false; }
static com.android.server.timezone.PackageTracker create(android.content.Context context) { com.android.server.timezone.PackageTrackerHelperImpl helperImpl = new com.android.server.timezone.PackageTrackerHelperImpl(context); return new com.android.server.timezone.PackageTracker(helperImpl, helperImpl, helperImpl, new com.android.server.timezone.PackageStatusStorage(android.os.Environment.getDataDirectory()), new com.android.server.timezone.IntentHelperImpl(context)); }
private void handleInstall(final byte[] checkToken, final java.io.File contentFile) { final android.os.ParcelFileDescriptor distroFileDescriptor; try { distroFileDescriptor = android.os.ParcelFileDescriptor.open(contentFile, ParcelFileDescriptor.MODE_READ_ONLY); } catch (java.io.FileNotFoundException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ("Unable to create ParcelFileDescriptor from " + contentFile)); handleCheckComplete(checkToken, false); return; } finally { contentFile.delete(); } android.app.timezone.Callback callback = new android.app.timezone.Callback() { @java.lang.Override public void onFinished(int status) { android.util.Log.i(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ("onFinished: Finished install: " + status)); } }; try (android.os.ParcelFileDescriptor pfd = distroFileDescriptor) { int requestStatus = mRulesManager.requestInstall(pfd, checkToken, callback); android.util.Log.i(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ("handleInstall: Request sent:" + requestStatus)); } catch (java.lang.Exception e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, "handleInstall: Error", e); } }
@java.lang.Override public void onFinished(int status) { android.util.Log.i(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ("onFinished: Finished install: " + status)); }
private static java.io.File copyDataToLocalFile(android.content.Context context) { java.io.File localFile; try { localFile = java.io.File.createTempFile("temp", ".zip", context.getFilesDir()); } catch (java.io.IOException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, "Unable to create local storage file", e); return null; } android.os.ParcelFileDescriptor inputFileDescriptor; try { inputFileDescriptor = context.getContentResolver().openFileDescriptor(TimeZoneRulesDataContract.DATA_URI, "r"); if (inputFileDescriptor == null) { throw new java.io.FileNotFoundException("ContentProvider returned null"); } } catch (java.io.FileNotFoundException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ("copyDataToLocalFile: Unable to open file descriptor" + (android.provider.TimeZoneRulesDataContract.DATA_URI)), e); return null; } try (android.os.ParcelFileDescriptor pfd = inputFileDescriptor;java.io.InputStream fis = new java.io.FileInputStream(pfd.getFileDescriptor(), false);java.io.FileOutputStream fos = new java.io.FileOutputStream(localFile, false)) { libcore.io.Streams.copy(fis, fos); } catch (java.io.IOException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ("Unable to create asset storage file: " + localFile), e); return null; } return localFile; }
public static void main(java.lang.String[] args) { java.lang.System.out.println(Main.$opt$noinline$foo(new Main())); java.lang.System.out.println(Main.$noinline$runSmaliTest("$opt$noinline$foo", new Main())); java.lang.System.out.println(Main.$opt$noinline$foo(new SubMain())); java.lang.System.out.println(Main.$noinline$runSmaliTest("$opt$noinline$foo", new SubMain())); java.lang.System.out.println(Main.$opt$noinline$foo(new SubSubMain())); java.lang.System.out.println(Main.$noinline$runSmaliTest("$opt$noinline$foo", new SubSubMain())); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.util.Log.d(com.android.bluetooth.btservice.RemoteDevices.TAG, ("received intent: " + intent)); java.lang.String action = intent.getAction(); switch (action) { case android.bluetooth.BluetoothHeadset.ACTION_HF_INDICATORS_VALUE_CHANGED : onHfIndicatorValueChanged(intent); break; default : android.util.Log.w(com.android.bluetooth.btservice.RemoteDevices.TAG, ("unhandled intent: " + intent)); break; } }
private void onHfIndicatorValueChanged(android.content.Intent intent) { android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); if (device == null) { android.util.Log.e(com.android.bluetooth.btservice.RemoteDevices.TAG, "onHfIndicatorValueChanged() remote device is null"); return; } int indicatorId = intent.getIntExtra(BluetoothHeadset.EXTRA_HF_INDICATORS_IND_ID, (-1)); int indicatorValue = intent.getIntExtra(BluetoothHeadset.EXTRA_HF_INDICATORS_IND_VALUE, (-1)); if (indicatorId == (HeadsetHalConstants.HF_INDICATOR_BATTERY_LEVEL_STATUS)) { updateBatteryLevel(device, indicatorValue); } }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.util.Log.d(com.android.bluetooth.btservice.RemoteDevices.TAG, ("received intent: " + intent)); java.lang.String action = intent.getAction(); switch (action) { case android.bluetooth.BluetoothHeadset.ACTION_HF_INDICATORS_VALUE_CHANGED : onHfIndicatorValueChanged(intent); break; case android.bluetooth.BluetoothHeadset.ACTION_VENDOR_SPECIFIC_HEADSET_EVENT : onVendorSpecificHeadsetEvent(intent); break; default : android.util.Log.w(com.android.bluetooth.btservice.RemoteDevices.TAG, ("unhandled intent: " + intent)); break; } }
private void onVendorSpecificHeadsetEvent(android.content.Intent intent) { android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); if (device == null) { android.util.Log.e(com.android.bluetooth.btservice.RemoteDevices.TAG, "onVendorSpecificHeadsetEvent() remote device is null"); return; } java.lang.String cmd = intent.getStringExtra(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD); if (cmd == null) { android.util.Log.e(com.android.bluetooth.btservice.RemoteDevices.TAG, "onVendorSpecificHeadsetEvent() command is null"); return; } int cmdType = intent.getIntExtra(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE, (-1)); if (cmdType != (android.bluetooth.BluetoothHeadset.AT_CMD_TYPE_SET)) { return; } java.lang.Object[] args = ((java.lang.Object[]) (intent.getExtras().get(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS))); if (args == null) { android.util.Log.e(com.android.bluetooth.btservice.RemoteDevices.TAG, "onVendorSpecificHeadsetEvent() arguments are null"); return; } int batteryPercent = -1; switch (cmd) { case android.bluetooth.BluetoothHeadset.VENDOR_SPECIFIC_HEADSET_EVENT_CMD_XEVENT : batteryPercent = com.android.bluetooth.btservice.RemoteDevices.getBatteryLevelFromXEventVsc(args); break; } if (batteryPercent >= 0) { updateBatteryLevel(device, batteryPercent); com.android.bluetooth.btservice.RemoteDevices.infoLog((((("Updated device " + device) + " battery level to ") + (java.lang.String.valueOf(batteryPercent))) + "%")); } }
private void processVendorSpecificAt(java.lang.String atString, android.bluetooth.BluetoothDevice device) { log(("processVendorSpecificAt - atString = " + atString)); int indexOfEqual = atString.indexOf("="); if (indexOfEqual == (-1)) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ("processVendorSpecificAt: command type error in " + atString)); atResponseCodeNative(HeadsetHalConstants.AT_RESPONSE_ERROR, 0, getByteAddress(device)); return; } java.lang.String command = atString.substring(0, indexOfEqual); java.lang.Integer companyId = com.android.bluetooth.hfp.HeadsetStateMachine.VENDOR_SPECIFIC_AT_COMMAND_COMPANY_ID.get(command); if (companyId == null) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ("processVendorSpecificAt: unsupported command: " + atString)); atResponseCodeNative(HeadsetHalConstants.AT_RESPONSE_ERROR, 0, getByteAddress(device)); return; } java.lang.String arg = atString.substring((indexOfEqual + 1)); if (arg.startsWith("?")) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ("processVendorSpecificAt: command type error in " + atString)); atResponseCodeNative(HeadsetHalConstants.AT_RESPONSE_ERROR, 0, getByteAddress(device)); return; } java.lang.Object[] args = com.android.bluetooth.hfp.HeadsetStateMachine.generateArgs(arg); if (command.equals(BluetoothHeadset.VENDOR_SPECIFIC_HEADSET_EVENT_CMD_XAPL)) { processXaplAt(args, device); } broadcastVendorSpecificEventIntent(command, companyId, BluetoothHeadset.AT_CMD_TYPE_SET, args, device); atResponseCodeNative(HeadsetHalConstants.AT_RESPONSE_OK, 0, getByteAddress(device)); }
private void processXaplAt(java.lang.Object[] args, android.bluetooth.BluetoothDevice device) { if ((args.length) != 2) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ("processXaplAt() args length must be 2: " + (java.lang.String.valueOf(args.length)))); return; } if ((!((args[0]) instanceof java.lang.String)) || (!((args[1]) instanceof java.lang.Integer))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "processXaplAt() argument types not match"); return; } int features = ((java.lang.Integer) (args[1])); atResponseStringNative(("+XAPL=iPhone," + (java.lang.String.valueOf(features))), getByteAddress(device)); }
private void onHfIndicatorValueChanged(android.content.Intent intent) { android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); if (device == null) { android.util.Log.e(com.android.bluetooth.btservice.RemoteDevices.TAG, "onHfIndicatorValueChanged() remote device is null"); return; } int indicatorId = intent.getIntExtra(BluetoothHeadset.EXTRA_HF_INDICATORS_IND_ID, (-1)); int indicatorValue = intent.getIntExtra(BluetoothHeadset.EXTRA_HF_INDICATORS_IND_VALUE, (-1)); if (indicatorId == (com.android.bluetooth.hfp.HeadsetHalConstants.HF_INDICATOR_BATTERY_LEVEL_STATUS)) { updateBatteryLevel(device, indicatorValue); } }
@java.lang.Override public void encode(com.android.dx.io.instructions.DecodedInstruction insn, com.android.dx.io.instructions.CodeOutput out) { out.write(com.android.dx.io.instructions.InstructionCodec.codeUnit(insn.getOpcode(), insn.getRegisterCount()), insn.getIndexUnit(), insn.getAUnit(), insn.getProtoIndex()); }
@java.lang.Override public int getRegisterCount() { return registers.size(); }
public com.android.dex.MethodHandle readMethodHandle() { com.android.dex.MethodHandle.MethodHandleType methodHandleType = com.android.dex.MethodHandle.MethodHandleType.fromValue(readUnsignedShort()); readUnsignedShort(); int fieldOrMethodId = readUnsignedShort(); readUnsignedShort(); return new com.android.dex.MethodHandle(this, methodHandleType, fieldOrMethodId); }
@java.lang.Override public int getA() { return (registers.size()) > 0 ? registers.get(0) : 0; }
@java.lang.Override public int getC() { return (registers.size()) > 2 ? registers.get(2) : 2; }
public void writeTo(com.android.dex.Dex.Section out) { out.writeUnsignedShort(methodHandleType.value); out.writeUnsignedShort(0); out.writeUnsignedShort(fieldOrMethodId); out.writeUnsignedShort(0); }
@java.lang.Override public com.android.dx.io.instructions.DecodedInstruction decode(int opcodeUnit, com.android.dx.io.instructions.CodeInput in) throws java.io.EOFException { int opcode = com.android.dx.io.instructions.InstructionCodec.byte0(opcodeUnit); if (opcode != (com.android.dx.io.Opcodes.INVOKE_POLYMORPHIC_RANGE)) { throw new java.lang.UnsupportedOperationException(java.lang.String.valueOf(opcode)); } int registerCount = com.android.dx.io.instructions.InstructionCodec.byte1(opcodeUnit); int index = in.read(); int a = in.read(); int proto = in.read(); com.android.dx.io.IndexType indexType = com.android.dx.io.OpcodeInfo.getIndexType(opcode); return new com.android.dx.io.instructions.InvokePolymorphicRangeDecodedInstruction(this, opcode, index, indexType, a, registerCount, proto); }
public int adjustMethodHandle(int methodHandleIndex) { return methodHandleIds[methodHandleIndex]; }
@java.lang.Override public int getA() { return a; }
@java.lang.Override public int getD() { return (registers.size()) > 3 ? registers.get(3) : 3; }
@java.lang.Override public com.android.dx.io.instructions.DecodedInstruction withProtoIndex(int newIndex, int newProtoIndex) { return new com.android.dx.io.instructions.InvokePolymorphicRangeDecodedInstruction(getFormat(), getOpcode(), newIndex, getIndexType(), a, registerCount, newProtoIndex); }
@java.lang.Override public int getE() { return (registers.size()) > 4 ? registers.get(4) : 4; }
@java.lang.Override public void encode(com.android.dx.io.instructions.DecodedInstruction insn, com.android.dx.io.instructions.CodeOutput out) { out.write(com.android.dx.io.instructions.InstructionCodec.codeUnit(insn.getOpcode(), com.android.dx.io.instructions.InstructionCodec.makeByte(insn.getE(), insn.getRegisterCount())), insn.getIndexUnit(), com.android.dx.io.instructions.InstructionCodec.codeUnit(insn.getA(), insn.getB(), insn.getC(), insn.getD()), insn.getProtoIndex()); }
@java.lang.Override public com.android.dx.io.instructions.DecodedInstruction decode(int opcodeUnit, com.android.dx.io.instructions.CodeInput in) throws java.io.EOFException { int opcode = com.android.dx.io.instructions.InstructionCodec.byte0(opcodeUnit); if (opcode != (com.android.dx.io.Opcodes.INVOKE_POLYMORPHIC)) { throw new java.lang.UnsupportedOperationException(java.lang.String.valueOf(opcode)); } int g = com.android.dx.io.instructions.InstructionCodec.nibble2(opcodeUnit); int registerCount = com.android.dx.io.instructions.InstructionCodec.nibble3(opcodeUnit); int index = in.read(); int abcd = in.read(); int c = com.android.dx.io.instructions.InstructionCodec.nibble0(abcd); int d = com.android.dx.io.instructions.InstructionCodec.nibble1(abcd); int e = com.android.dx.io.instructions.InstructionCodec.nibble2(abcd); int f = com.android.dx.io.instructions.InstructionCodec.nibble3(abcd); int proto = in.read(); com.android.dx.io.IndexType indexType = com.android.dx.io.OpcodeInfo.getIndexType(opcode); java.util.Deque<java.lang.Integer> registers = new java.util.ArrayDeque<>(registerCount); switch (registerCount) { case 5 : registers.addLast(g); case 4 : registers.addLast(f); case 3 : registers.addLast(e); case 2 : registers.addLast(d); case 1 : registers.addLast(c); break; default : throw new com.android.dex.DexException(("bogus registerCount: " + (com.android.dx.util.Hex.uNibble(registerCount)))); } return new com.android.dx.io.instructions.InvokePolymorphicDecodedInstruction(this, opcode, index, indexType, proto, new java.util.ArrayList(registers)); }
private void mergeMethodHandles() { new com.android.dx.merge.DexMerger.IdMerger<com.android.dex.MethodHandle>(idsDefsOut) { @java.lang.Override TableOfContents.Section getSection(com.android.dex.TableOfContents tableOfContents) { return tableOfContents.methodHandles; } @java.lang.Override com.android.dex.MethodHandle read(com.android.dex.Dex.Section in, com.android.dx.merge.IndexMap indexMap, int index) { return indexMap.adjust(in.readMethodHandle()); } @java.lang.Override void updateIndex(int offset, com.android.dx.merge.IndexMap indexMap, int oldIndex, int newIndex) { indexMap.methodHandleIds[oldIndex] = newIndex; } @java.lang.Override void write(com.android.dex.MethodHandle value) { value.writeTo(idsDefsOut); } }.mergeUnsorted(); }
@java.lang.Override public int getB() { return (registers.size()) > 1 ? registers.get(1) : 1; }
@java.lang.Override void updateIndex(int offset, com.android.dx.merge.IndexMap indexMap, int oldIndex, int newIndex) { indexMap.methodHandleIds[oldIndex] = newIndex; }
public com.android.dex.MethodHandle adjust(com.android.dex.MethodHandle methodHandle) { return new com.android.dex.MethodHandle(target, methodHandle.getMethodHandleType(), (methodHandle.getMethodHandleType().isField() ? adjustField(methodHandle.getFieldOrMethodId()) : adjustMethod(methodHandle.getFieldOrMethodId()))); }
@java.lang.Override boolean build() { if (super.build()) { java.io.File tempFile = new java.io.File(inputFile.folder, destFileName); try { if (!(inputFile.fileName.equals(tempFile))) { copyFile(inputFile.fileName, tempFile); } else { tempFile = null; } } catch (java.io.IOException e) { java.lang.System.err.println(("io exception:" + (e.getMessage()))); e.printStackTrace(); return false; } java.io.File outDir = outputFile.fileName.getParentFile(); if ((!(outDir.exists())) && (!(outDir.mkdirs()))) { java.lang.System.err.println(("failed to create output dir: " + (outDir.getAbsolutePath()))); return false; } java.io.File absoluteFile = new java.io.File(inputFile.folder.getAbsolutePath(), destFileName); if (!(absoluteFile.exists())) { throw new java.lang.IllegalArgumentException(absoluteFile.getAbsolutePath()); } try (java.util.jar.JarOutputStream jarOut = new java.util.jar.JarOutputStream(new java.io.FileOutputStream(outputFile.fileName.getAbsolutePath()))) { java.util.jar.JarEntry entry = new java.util.jar.JarEntry(destFileName); entry.setTime(absoluteFile.lastModified()); jarOut.putNextEntry(entry); try (java.io.BufferedInputStream bis = new java.io.BufferedInputStream(new java.io.FileInputStream(absoluteFile))) { byte[] buffer = new byte[4096]; for (; ;) { int read = bis.read(buffer); if (read < 0) { break; } jarOut.write(buffer, 0, read); } } jarOut.closeEntry(); } catch (java.lang.Exception e) { java.lang.System.err.println(((("exception in JarBuildStep for " + (outputFile.fileName.getAbsolutePath())) + ", ") + (destFileName))); e.printStackTrace(java.lang.System.err); new java.io.File(outputFile.fileName.getAbsolutePath()).delete(); return false; } if (tempFile != null) { tempFile.delete(); } if (deleteInputFileAfterBuild) { inputFile.fileName.delete(); } return true; } return false; }
private static java.lang.String getDeviceSummary(java.util.List<DeviceInfoEntity> devices, java.lang.String selectedDevice) { if (devices == null) return null; java.util.List<java.lang.String> buildInfos = new java.util.ArrayList<>(); boolean isSelectedDevice = selectedDevice == null; for (DeviceInfoEntity device : devices) { if ((selectedDevice != null) && (device.product.toLowerCase().equals(selectedDevice.toLowerCase()))) { isSelectedDevice = true; } buildInfos.add(((((device.product) + " (") + (device.buildId)) + ")")); } return isSelectedDevice ? org.apache.commons.lang.StringUtils.join(buildInfos, ", ") : null; }
@java.lang.Override public java.net.InetAddress[] getAllByName(java.lang.String host) throws java.net.UnknownHostException { java.net.InetAddress[] addrs = super.getAllByName(host); java.util.ArrayList<java.net.InetAddress> out = new java.util.ArrayList<>(); java.util.HashSet<java.lang.Class> families = new java.util.HashSet<>(); for (java.net.InetAddress addr : addrs) { if (!(families.contains(addr.getClass()))) { out.add(addr); families.add(addr.getClass()); } } return out.toArray(new java.net.InetAddress[out.size()]); }
@java.lang.Override public boolean processMessage(android.os.Message message) { switch (message.what) { case com.android.server.connectivity.NetworkMonitor.CMD_LAUNCH_CAPTIVE_PORTAL_APP : final android.content.Intent intent = new android.content.Intent(android.net.ConnectivityManager.ACTION_CAPTIVE_PORTAL_SIGN_IN); intent.putExtra(ConnectivityManager.EXTRA_NETWORK, mNetwork); intent.putExtra(ConnectivityManager.EXTRA_CAPTIVE_PORTAL, new android.net.CaptivePortal(new android.net.ICaptivePortal.Stub() { @java.lang.Override public void appResponse(int response) { if (response == (android.net.CaptivePortal.APP_RETURN_WANTED_AS_IS)) { mContext.enforceCallingPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, "CaptivePortal"); } sendMessage(com.android.server.connectivity.NetworkMonitor.CMD_CAPTIVE_PORTAL_APP_FINISHED, response); } })); intent.putExtra(ConnectivityManager.EXTRA_CAPTIVE_PORTAL_URL, mLastPortalProbeResult.detectUrl); intent.putExtra(ConnectivityManager.EXTRA_CAPTIVE_PORTAL_USER_AGENT, mCaptivePortalUserAgent); intent.setFlags(((android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) | (android.content.Intent.FLAG_ACTIVITY_NEW_TASK))); mContext.startActivityAsUser(intent, UserHandle.CURRENT); return HANDLED; default : return NOT_HANDLED; } }
public void probeAll() { java.util.Set<java.net.InetAddress> ipProbeList = new java.util.HashSet<java.net.InetAddress>(); synchronized(mLock) { ipProbeList.addAll(mIpWatchList.keySet()); } if ((!(ipProbeList.isEmpty())) && (stillRunning())) { mWakeLock.acquire(android.net.ip.IpReachabilityMonitor.getProbeWakeLockDuration()); } for (java.net.InetAddress target : ipProbeList) { if (!(stillRunning())) { break; } final int returnValue = android.net.ip.IpReachabilityMonitor.probeNeighbor(mInterfaceIndex, target); mLog.log(java.lang.String.format("put neighbor %s%%%d into NUD_PROBE state (rval=%d)", target.getHostAddress(), mInterfaceIndex, returnValue)); logEvent(IpReachabilityEvent.PROBE, returnValue); } mLastProbeTimeMs = android.os.SystemClock.elapsedRealtime(); }
private void startOffloadController() { mOffloadController.start(); mOffloadController.updateLocalPrefixes(mUpstreamNetworkMonitor.getLocalPrefixes()); }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); reset(mContext); reset(mCS); reset(mLog); when(mLog.forSubComponent(anyString())).thenReturn(mLog); mCM = spy(new com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.TestConnectivityManager(mContext, mCS)); mSM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.TestStateMachine(); mUNM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitor(((android.net.ConnectivityManager) (mCM)), mSM, mLog, com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.EVENT_UNM_UPDATE, com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.EVENT_PFX_UPDATE); }
public void updateLocalPrefixes(java.util.Set<android.net.IpPrefix> localPrefixes) { if (!(started())) return; mLocalPrefixes = localPrefixes; }
private static java.util.Set<android.net.IpPrefix> allLocalPrefixes(java.util.HashMap<android.net.Network, NetworkState> networkMap) { final java.util.HashSet<android.net.IpPrefix> allLocal = new java.util.HashSet<>(); for (java.lang.String prefix : com.android.server.connectivity.tethering.UpstreamNetworkMonitor.MINIMUM_LOCAL_PREFIXES_SET) { allLocal.add(new android.net.IpPrefix(prefix)); } for (NetworkState ns : networkMap.values()) { if ((ns.linkProperties) == null) continue; for (android.net.LinkAddress linkAddr : ns.linkProperties.getAllLinkAddresses()) { final java.net.InetAddress ip = linkAddr.getAddress(); allLocal.add(new android.net.IpPrefix(ip, android.net.util.NetworkConstants.prefixLengthForAddress(ip))); final android.net.IpPrefix linkPrefix = new android.net.IpPrefix(ip, linkAddr.getPrefixLength()); } } return allLocal; }
public java.util.Set<android.net.IpPrefix> getLocalPrefixes() { return mLastLocalPrefixes; }
private void notifyTarget(int which, android.net.NetworkState netstate) { mTarget.sendMessage(mUpstreamUpdateCode, which, 0, netstate); }
@android.test.suitebuilder.annotation.SmallTest public void testNetworkInfoOfTypeNone() { android.os.ConditionVariable broadcastCV = waitForConnectivityBroadcasts(1); verifyNoNetwork(); com.android.server.ConnectivityServiceTest.MockNetworkAgent lowpanNetwork = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_LOWPAN); assertNull(mCm.getActiveNetworkInfo()); lowpanNetwork.connect(true); waitForIdle(); verifyActiveNetwork(com.android.server.TRANSPORT_LOWPAN); com.android.server.ConnectivityServiceTest.assertLength(1, mCm.getAllNetworks()); android.net.NetworkInfo info = mCm.getActiveNetworkInfo(); android.net.Network network = mCm.getActiveNetwork(); com.android.server.NetworkCapabilities capabilities = mCm.getNetworkCapabilities(network); assertNotNull(info); assertNotNull(network); assertNotNull(capabilities); assertEquals(com.android.server.TYPE_NONE, info.getType()); assertTrue(capabilities.hasTransport(com.android.server.TRANSPORT_LOWPAN)); lowpanNetwork.disconnect(); waitForIdle(); verifyNoNetwork(); if (broadcastCV.block(10)) { fail("expected no broadcast, but got CONNECTIVITY_ACTION broadcast"); } }
@android.test.suitebuilder.annotation.SmallTest public void testTimedoutAfterUnregisteredNetworkRequest() { android.net.NetworkRequest nr = new android.net.NetworkRequest.Builder().addTransportType(NetworkCapabilities.TRANSPORT_WIFI).build(); final com.android.server.ConnectivityServiceTest.TestNetworkCallback networkCallback = new com.android.server.ConnectivityServiceTest.TestNetworkCallback(); final int timeoutMs = 10; mCm.requestNetwork(nr, networkCallback, timeoutMs); mCm.unregisterNetworkCallback(networkCallback); networkCallback.assertNoCallback(); mWiFiNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_WIFI); mWiFiNetworkAgent.connect(false); networkCallback.assertNoCallback(); }
public static void main(java.lang.String[] args) throws java.lang.Throwable { java.util.Random random = new java.util.Random(); java.util.HashSet<java.lang.Integer> seen = new java.util.HashSet<>(); try { for (int pass = 0; pass < 2; pass++) { for (int i = 0; i < (com.android.dx.merge.MergeTest.NUMBER_OF_TRIES); i++) { int numDex = (pass == 0) ? 2 : (random.nextInt(8)) + 3; java.lang.String[] fileNames = new java.lang.String[numDex]; for (int j = 0; j < numDex; ++j) { int fileIndex = random.nextInt(args.length); fileNames[j] = args[fileIndex]; } if (!(seen.add(fileNames.hashCode()))) { continue; } com.android.dex.Dex[] dexesToMerge = new com.android.dex.Dex[numDex]; for (int j = 0; j < numDex; ++j) { try { dexesToMerge[j] = new com.android.dex.Dex(new java.io.File(fileNames[j])); } catch (java.io.IOException e) { java.lang.System.err.println(("Error opening " + (fileNames[j]))); throw e; } } com.android.dx.merge.MergeTest.executor.execute(new com.android.dx.merge.MergeTest.MergeTask(fileNames, dexesToMerge)); } } } catch (java.lang.Throwable t) { com.android.dx.merge.MergeTest.executor.shutdownNow(); throw t; } com.android.dx.merge.MergeTest.executor.shutdown(); com.android.dx.merge.MergeTest.executor.awaitTermination(8, java.util.concurrent.TimeUnit.HOURS); java.lang.System.exit((com.android.dx.merge.MergeTest.failures.get() ? 1 : 0)); }
public void run() { try { dexMerger.merge(); } catch (com.android.dex.DexIndexOverflowException e) { } catch (java.lang.Throwable t) { java.lang.System.err.println(("Exception processing DEX files: " + t)); java.lang.System.err.println(("Problem merging those dexes: " + (java.util.Arrays.toString(dexFiles)))); com.android.dx.merge.MergeTest.failures.set(true); com.android.dx.merge.MergeTest.executor.shutdownNow(); } }
private boolean isNameMatchTarget(java.lang.String name, java.lang.String target) { java.lang.String contentTypeName = name; if (name == null) return false; if (contentTypeName.endsWith(".vcf")) { contentTypeName = contentTypeName.substring(0, ((contentTypeName.length()) - (".vcf".length()))); } java.lang.String[] nameList = contentTypeName.split("/"); for (java.lang.String subName : nameList) { if (subName.equals(target)) { return true; } } return false; }
@java.lang.Override public void run() { synchronized(mLock) { if ((mTransport) != null) { this.onChange(mSelfChange, mUri, mUserId); } } }
private void dispatchChange(boolean selfChange, android.net.Uri uri, int userId) { if ((mHandler) == null) { synchronized(mLock) { if ((mTransport) != null) { onChange(selfChange, uri, userId); } } } else { mHandler.post(new android.database.ContentObserver.NotificationRunnable(selfChange, uri, userId)); } }
void generateForegroundT3tIdentifiersCacheLocked() { if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, "generateForegroundT3tIdentifiersCacheLocked"); mForegroundT3tIdentifiersCache.clear(); if ((mEnabledForegroundService) != null) { for (android.nfc.cardemulation.NfcFServiceInfo service : mServices) { if (mEnabledForegroundService.equals(service.getComponent())) { if (((!(service.getSystemCode().equalsIgnoreCase("NULL"))) && (!(service.getNfcid2().equalsIgnoreCase("NULL")))) && (!(service.getT3tPmm().equalsIgnoreCase("NULL")))) { mForegroundT3tIdentifiersCache.put(service.getNfcid2(), service); mForegroundT3tIdentifiersCache.put(service.getT3tPmm(), service); } break; } } } if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, ("mForegroundT3tIdentifiersCache: size=" + (mForegroundT3tIdentifiersCache.size()))); for (java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo> entry : mForegroundT3tIdentifiersCache.entrySet()) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, (((" " + (entry.getKey())) + "/") + (entry.getValue().getComponent().toString()))); } } updateRoutingLocked(); }
public static boolean isValidAid(java.lang.String aid) { if (aid == null) return false; if (((aid.endsWith("*")) || (aid.endsWith("@"))) && (((aid.length()) % 2) == 0)) { android.util.Log.e(android.nfc.cardemulation.CardEmulation.TAG, (("AID " + aid) + " is not a valid AID.")); return false; } if ((!((aid.endsWith("*")) || (aid.endsWith("@")))) && (((aid.length()) % 2) != 0)) { android.util.Log.e(android.nfc.cardemulation.CardEmulation.TAG, (("AID " + aid) + " is not a valid AID.")); return false; } if (!(aid.matches("[0-9A-Fa-f]{10,32}\\*?\\@?"))) { android.util.Log.e(android.nfc.cardemulation.CardEmulation.TAG, (("AID " + aid) + " is not a valid AID.")); return false; } return true; }
public java.util.List<java.lang.String> getSubsetAids() { final java.util.ArrayList<java.lang.String> subsetAids = new java.util.ArrayList<java.lang.String>(); for (android.nfc.cardemulation.AidGroup group : getAidGroups()) { for (java.lang.String aid : group.aids) { if (aid.endsWith("@")) { subsetAids.add(aid); } } } return subsetAids; }
static boolean isSubset(java.lang.String aid) { return aid.endsWith("@"); }
static boolean isExact(java.lang.String aid) { return !((aid.endsWith("*")) || (aid.endsWith("@"))); }
com.android.nfc.cardemulation.RegisteredAidCache.ReslovedPrefixConflictAid findPrefixConflictForSubsetAid(java.lang.String subsetAid, java.util.ArrayList<android.nfc.cardemulation.ApduServiceInfo> prefixServices) { java.util.ArrayList<java.lang.String> prefixAids = new java.util.ArrayList<java.lang.String>(); java.lang.String minPrefix = null; java.lang.String plainSubsetAid = subsetAid.substring(0, ((subsetAid.length()) - 1)); for (android.nfc.cardemulation.ApduServiceInfo service : prefixServices) { for (java.lang.String prefixAid : service.getPrefixAids()) { java.lang.String plainPrefix = prefixAid.substring(0, ((prefixAid.length()) - 1)); if (plainSubsetAid.startsWith(plainPrefix)) prefixAids.add(prefixAid); } } if ((prefixAids.size()) > 0) minPrefix = java.util.Collections.min(prefixAids); com.android.nfc.cardemulation.RegisteredAidCache.ReslovedPrefixConflictAid resolvedPrefix = new com.android.nfc.cardemulation.RegisteredAidCache.ReslovedPrefixConflictAid(); resolvedPrefix.prefixAid = minPrefix; if ((minPrefix != null) && (plainSubsetAid.equalsIgnoreCase(minPrefix.substring(0, ((minPrefix.length()) - 1))))) resolvedPrefix.matchingSubset = true; return resolvedPrefix; }
@java.lang.Override public void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException { com.google.appengine.api.datastore.DatastoreService datastore = com.google.appengine.api.datastore.DatastoreServiceFactory.getDatastoreService(); com.google.appengine.api.taskqueue.Queue queue = com.google.appengine.api.taskqueue.QueueFactory.getDefaultQueue(); com.google.appengine.api.datastore.Query q = new com.google.appengine.api.datastore.Query(com.android.vts.entity.TestEntity.KIND).setKeysOnly(); java.util.List<com.google.appengine.api.taskqueue.TaskOptions> tasks = new java.util.ArrayList<>(); for (com.google.appengine.api.datastore.Entity test : datastore.prepare(q).asIterable()) { if ((test.getKey().getName()) == null) { continue; } com.google.appengine.api.taskqueue.TaskOptions task = TaskOptions.Builder.withUrl(com.android.vts.servlet.VtsPerformanceJobServlet.PERFORMANCE_JOB_URL).param("testKey", com.google.appengine.api.datastore.KeyFactory.keyToString(test.getKey())).method(TaskOptions.Method.POST); tasks.add(task); } queue.add(tasks); }
public static void run() throws java.lang.Exception { art.Test988.loadAllClasses(); art.Trace.disableTracing(java.lang.Thread.currentThread()); art.Trace.enableMethodTracing(art.Test988.class, art.Test988.class.getDeclaredMethod("notifyMethodEntry", java.lang.Object.class), art.Test988.class.getDeclaredMethod("notifyMethodExit", java.lang.Object.class, java.lang.Boolean.TYPE, java.lang.Object.class), java.lang.Thread.currentThread()); art.Test988.doFibTest(30, new art.Test988.IterOp()); art.Test988.doFibTest(5, new art.Test988.RecurOp()); art.Test988.doFibTest((-19), new art.Test988.IterOp()); art.Test988.doFibTest((-19), new art.Test988.RecurOp()); java.lang.Long.compare(123L, 456L); art.Trace.disableTracing(java.lang.Thread.currentThread()); art.Test988.printResults(); }
void increment(int imp) { imp = (imp < 0) ? 0 : imp > ((com.android.server.notification.NotificationUsageStats.ImportanceHistogram.NUM_IMPORTANCES) - 1) ? (com.android.server.notification.NotificationUsageStats.ImportanceHistogram.NUM_IMPORTANCES) - 1 : imp; (mCount[imp])++; }
@java.lang.Override public void onReceivedSslError(android.webkit.WebView view, android.webkit.SslErrorHandler handler, android.net.http.SslError error) { java.net.URL url = com.android.captiveportallogin.CaptivePortalLoginActivity.makeURL(error.getUrl()); if (((url == null) || ((mHostname) == null)) || (!(mHostname.equals(url.getHost())))) { return; } logMetricsEvent(MetricsEvent.CAPTIVE_PORTAL_LOGIN_ACTIVITY_SSL_ERROR); android.util.Log.w(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, (((((("SSL error (error: " + (error.getPrimaryError())) + " host: ") + (android.net.Uri.parse(error.getUrl()).getHost())) + " certificate: ") + (error.getCertificate())) + "); displaying SSL warning.")); final java.lang.String sslErrorPage = makeSslErrorPage(); if (com.android.captiveportallogin.CaptivePortalLoginActivity.VDBG) { android.util.Log.d(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, sslErrorPage); } view.loadDataWithBaseURL(com.android.captiveportallogin.CaptivePortalLoginActivity.MyWebViewClient.INTERNAL_ASSETS, sslErrorPage, "text/HTML", "UTF-8", null); }
@java.lang.Override public void onPageStarted(android.webkit.WebView view, java.lang.String urlString, android.graphics.Bitmap favicon) { if (urlString.contains(mBrowserBailOutToken)) { mLaunchBrowser = true; done(com.android.captiveportallogin.CaptivePortalLoginActivity.Result.WANTED_AS_IS); return; } if ((mPagesLoaded) == 0) return; if (!(urlString.startsWith(com.android.captiveportallogin.CaptivePortalLoginActivity.MyWebViewClient.INTERNAL_ASSETS))) { getActionBar().setSubtitle(getHeaderSubtitle(urlString)); } getProgressBar().setVisibility(View.VISIBLE); java.net.URL url = com.android.captiveportallogin.CaptivePortalLoginActivity.makeURL(urlString); if (url != null) { mHostname = url.getHost(); } testForCaptivePortal(); }
@java.lang.Override public void onActiveSessionsChanged(java.util.List<android.media.session.MediaController> newControllers) { com.android.bluetooth.avrcp.Set<java.lang.String> updatedPackages; for (android.media.session.MediaController controller : newControllers) { java.lang.String packageName = controller.getPackageName(); if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ("ActiveSession: " + (com.android.bluetooth.avrcp.MediaController.wrap(controller)))); if (updatedPackages.contains(packageName)) continue; addMediaPlayerController(controller); updatedPackages.add(packageName); } if (((newControllers.size()) > 0) && ((getAddressedPlayerInfo()) == null)) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, "No addressed player but active sessions, taking first."); setAddressedMediaSessionPackage(newControllers.get(0).getPackageName()); } scheduleMediaUpdate(); }
private int getTextWidth(java.lang.CharSequence str, android.text.TextPaint paint) { float totalWidth = 0.0F; float[] widths = new float[str.length()]; paint.getTextWidths(str, 0, str.length(), widths); for (float f : widths) { totalWidth += f; } return ((int) (totalWidth)); }
public void run() { tv.setText(longEnoughText); }
public void testScrollTo() throws java.lang.Throwable { final android.widget.TextView tv = new android.text.method.cts.TextViewNoIme(mActivity); tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10); runTestOnUiThread(new java.lang.Runnable() { public void run() { mActivity.setContentView(tv); tv.setSingleLine(true); tv.setLines(2); } }); getInstrumentation().waitForIdleSync(); android.text.TextPaint paint = tv.getPaint(); final android.text.Layout layout = tv.getLayout(); final java.lang.StringBuilder longEnoughText = new java.lang.StringBuilder(android.text.method.cts.TouchTest.LONG_TEXT); while ((getTextWidth(longEnoughText, paint)) <= (tv.getWidth())) { longEnoughText.append(android.text.method.cts.TouchTest.LONG_TEXT); } runTestOnUiThread(new java.lang.Runnable() { public void run() { tv.setText(longEnoughText); } }); getInstrumentation().waitForIdleSync(); final int width = getTextWidth(longEnoughText, paint); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, ((width - (tv.getWidth())) - 1), 0); } }); getInstrumentation().waitForIdleSync(); assertEquals(((width - (tv.getWidth())) - 1), tv.getScrollX()); assertEquals(0, tv.getScrollY()); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, (width + 100), 5); } }); getInstrumentation().waitForIdleSync(); assertEquals((width - (tv.getWidth())), tv.getScrollX(), 1.0F); assertEquals(5, tv.getScrollY()); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, (width - 10), 5); } }); getInstrumentation().waitForIdleSync(); assertEquals((width - (tv.getWidth())), tv.getScrollX(), 1.0F); assertEquals(5, tv.getScrollY()); }
public void test_SSLSocket_setSoWriteTimeout() throws java.lang.Exception { if (libcore.java.security.StandardNames.IS_RI) { return; } final libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create(); SSLSocket client = ((SSLSocket) (c.clientContext.getSocketFactory().createSocket())); int sendBufferSize = 1024; client.setSendBufferSize(sendBufferSize); sendBufferSize = client.getSendBufferSize(); final int recvBufferSize = 128; c.serverSocket.setReceiveBufferSize(recvBufferSize); client.connect(new java.net.InetSocketAddress(c.host, c.port)); final SSLSocket server = ((SSLSocket) (c.serverSocket.accept())); java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newSingleThreadExecutor(); java.util.concurrent.Future<java.lang.Void> future = executor.submit(new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { server.startHandshake(); return null; } }); executor.shutdown(); client.startHandshake(); java.lang.String expectedClassName = "com.android.org.conscrypt.ConscryptFileDescriptorSocket"; java.lang.Class<?> actualClass = client.getClass(); assertEquals(expectedClassName, actualClass.getName()); java.lang.reflect.Method setSoWriteTimeout = actualClass.getMethod("setSoWriteTimeout", new java.lang.Class<?>[]{ java.lang.Integer.TYPE }); setSoWriteTimeout.invoke(client, 1); try { final int extra = 1; client.getOutputStream().write(new byte[sendBufferSize + extra]); fail(); } catch (java.net.SocketTimeoutException expected) { } future.get(); client.close(); server.close(); c.close(); }
private com.android.timezone.updater.RulesCheckReceiver.DistroOperation getOperation(android.content.Context context) { android.database.Cursor c = context.getContentResolver().query(TimeZoneRulesDataContract.OPERATION_URI, new java.lang.String[]{ TimeZoneRulesDataContract.Columns.OPERATION, TimeZoneRulesDataContract.Columns.DISTRO_MAJOR_VERSION, TimeZoneRulesDataContract.Columns.DISTRO_MINOR_VERSION, TimeZoneRulesDataContract.Columns.RULES_VERSION, TimeZoneRulesDataContract.Columns.REVISION }, null, null, null); try (android.database.Cursor cursor = c) { if (cursor == null) { android.util.Log.e(com.android.timezone.updater.RulesCheckReceiver.TAG, "Query returned null"); return null; } if (!(cursor.moveToFirst())) { android.util.Log.e(com.android.timezone.updater.RulesCheckReceiver.TAG, "Query returned empty results"); return null; } try { java.lang.String operation = cursor.getString(0); android.app.timezone.DistroFormatVersion distroFormatVersion = null; android.app.timezone.DistroRulesVersion distroRulesVersion = null; if (TimeZoneRulesDataContract.OPERATION_INSTALL.equals(operation)) { distroFormatVersion = new android.app.timezone.DistroFormatVersion(cursor.getInt(1), cursor.getInt(2)); distroRulesVersion = new android.app.timezone.DistroRulesVersion(cursor.getString(3), cursor.getInt(4)); } return new com.android.timezone.updater.RulesCheckReceiver.DistroOperation(operation, distroFormatVersion, distroRulesVersion); } catch (java.lang.Exception e) { android.util.Log.e(com.android.timezone.updater.RulesCheckReceiver.TAG, "Error looking up distro operation / version", e); return null; } } }
public void testSetTime_after1980() throws java.lang.Exception { long time = libcore.java.util.zip.ZipEntryTest.TEST_TIME; java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setTime(time); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(time, zipFile.getEntry("x").getTime()); zipFile.close(); }
public void testMaxLengthExtra() throws java.lang.Exception { byte[] maxLengthExtra = new byte[65535]; java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setTime(libcore.java.util.zip.ZipEntryTest.TEST_TIME); ze.setExtra(maxLengthExtra); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(maxLengthExtra.length, zipFile.getEntry("x").getExtra().length); zipFile.close(); }
public void testSetTime_before1980() throws java.lang.Exception { long time = 31536000000L; java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setTime(time); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(time, zipFile.getEntry("x").getTime()); zipFile.close(); }
public void testCommentAndExtraInSameOrder() throws java.lang.Exception { java.lang.String comment = libcore.java.util.zip.ZipEntryTest.makeString(17, "z"); byte[] extra = libcore.java.util.zip.ZipEntryTest.makeString(11, "a").getBytes(); java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setTime(libcore.java.util.zip.ZipEntryTest.TEST_TIME); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); ze = new java.util.zip.ZipEntry("y"); ze.setTime(libcore.java.util.zip.ZipEntryTest.TEST_TIME); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); try { assertEquals(comment, zipFile.getEntry("x").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry("x").getExtra())); assertEquals(comment, zipFile.getEntry("y").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry("y").getExtra())); } finally { zipFile.close(); } }
public static java.lang.invoke.CallSite bsmLookupTest9(java.lang.invoke.MethodHandles.Lookup caller, java.lang.String name, java.lang.invoke.MethodType type, java.lang.invoke.MethodHandle staticGetter, java.lang.invoke.MethodHandle staticSetter, java.lang.invoke.MethodHandle fieldGetter, java.lang.invoke.MethodHandle fieldSetter, java.lang.invoke.MethodHandle instanceInvoke, java.lang.invoke.MethodHandle constructor, java.lang.invoke.MethodHandle interfaceInvoke, java.lang.invoke.MethodHandle privateInvoke) throws java.lang.Throwable { java.lang.System.out.println((((((((("bsmLookupTest9 [" + staticGetter) + ", ") + staticSetter) + ", ") + fieldGetter) + ", ") + fieldSetter) + "]")); java.lang.System.out.println(((name + " ") + type)); invokecustom.InvokeCustom.checkStaticFieldTest9(staticGetter, staticSetter); invokecustom.InvokeCustom instance = new invokecustom.InvokeCustom(); instance.checkFieldTest9(fieldGetter, fieldSetter); instanceInvoke.invokeExact(instance); invokecustom.InvokeCustom instance2 = instance; interfaceInvoke.invoke(instance2); privateInvoke.invoke(instance2); final java.lang.invoke.MethodHandles.Lookup lookup = java.lang.invoke.MethodHandles.lookup(); final java.lang.invoke.MethodHandle targetMH = lookup.findStatic(lookup.lookupClass(), name, type); return new java.lang.invoke.ConstantCallSite(targetMH.asType(type)); }
public void testMaxLengthComment() throws java.lang.Exception { java.lang.String maxLengthComment = libcore.java.util.zip.ZipEntryTest.makeString(65535, "z"); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(mFile); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setComment(maxLengthComment); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(mFile); assertEquals(maxLengthComment, zipFile.getEntry("x").getComment()); zipFile.close(); }
public void testCommentAndExtraInSameOrder() throws java.lang.Exception { java.lang.String comment = libcore.java.util.zip.ZipEntryTest.makeString(17, "z"); byte[] extra = libcore.java.util.zip.ZipEntryTest.makeString(11, "a").getBytes(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(mFile); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); ze = new java.util.zip.ZipEntry("y"); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(mFile); try { assertEquals(comment, zipFile.getEntry("x").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry("x").getExtra())); assertEquals(comment, zipFile.getEntry("y").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry("y").getExtra())); } finally { zipFile.close(); } }
@java.lang.Override public void tearDown() throws java.lang.Exception { mFile.delete(); }
public void testMaxLengthExtra() throws java.lang.Exception { byte[] maxLengthExtra = new byte[65535]; java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(mFile); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(maxLengthExtra); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(mFile); assertEquals(maxLengthExtra.length, zipFile.getEntry("x").getExtra().length); zipFile.close(); }
@java.lang.Override public void setUp() throws java.lang.Exception { mFile = java.io.File.createTempFile("ZipFileTest", "zip"); }
private void checkSetTime(long time) throws java.io.IOException { java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(mFile); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setTime(time); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(mFile); assertEquals(time, zipFile.getEntry("x").getTime()); zipFile.close(); }
public void testMaxLengthName() throws java.lang.Exception { java.lang.String maxLengthName = libcore.java.util.zip.ZipEntryTest.makeString(65535, "z"); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(mFile); out.putNextEntry(new java.util.zip.ZipEntry(maxLengthName)); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(mFile); assertNotNull(zipFile.getEntry(maxLengthName)); zipFile.close(); }
public void test_utf8FileNames() throws java.lang.Exception { java.util.List<java.lang.String> filenames = java.util.Arrays.asList("us-ascii", "\u043c\u0430\u0440\u0442\u0430", "\u1f00\u03c0\u1f78", "\u30b3\u30f3\u30cb\u30c1\u30cf"); java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream(new java.io.FileOutputStream(mFile)); for (java.lang.String filename : filenames) { out.putNextEntry(new java.util.zip.ZipEntry(filename)); out.closeEntry(); } out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(mFile); for (java.lang.String filename : filenames) { assertNotNull(filename, zipFile.getEntry(filename)); } java.util.zip.ZipInputStream in = new java.util.zip.ZipInputStream(new java.io.FileInputStream(mFile)); java.util.zip.ZipEntry entry; int entryCount = 0; while ((entry = in.getNextEntry()) != null) { assertTrue(entry.getName(), filenames.contains(entry.getName())); ++entryCount; } assertEquals(filenames.size(), entryCount); in.close(); }
private boolean isNetworkSelectionNeeded(java.util.List<com.android.server.wifi.ScanDetail> scanDetails, android.net.wifi.WifiInfo wifiInfo, boolean connected, boolean disconnected) { if ((scanDetails.size()) == 0) { localLog("Empty connectivity scan results. Skip network selection."); return false; } if (connected) { if (!(mEnableAutoJoinWhenAssociated)) { localLog(("Switching networks in connected state is not allowed." + " Skip network selection.")); return false; } if ((mLastNetworkSelectionTimeStamp) != (com.android.server.wifi.WifiNetworkSelector.INVALID_TIME_STAMP)) { long gap = (mClock.getElapsedSinceBootMillis()) - (mLastNetworkSelectionTimeStamp); if (gap < (com.android.server.wifi.WifiNetworkSelector.MINIMUM_NETWORK_SELECTION_INTERVAL_MS)) { localLog(((("Too short since last network selection: " + gap) + " ms.") + " Skip network selection.")); return false; } } boolean is5GHzAvailable = is5GHzNetworkAvailable(scanDetails); if (isCurrentNetworkSufficient(wifiInfo, is5GHzAvailable)) { localLog("Current connected network already sufficient. Skip network selection."); return false; } else { localLog("Current connected network is not sufficient."); return true; } } else if (disconnected) { return true; } else { localLog(("WifiStateMachine is in neither CONNECTED nor DISCONNECTED state." + " Skip network selection.")); return false; } }
private boolean isCurrentNetworkSufficient(android.net.wifi.WifiInfo wifiInfo, boolean is5GHzAvailable) { android.net.wifi.WifiConfiguration network = mWifiConfigManager.getConfiguredNetwork(wifiInfo.getNetworkId()); if (network == null) { localLog("No current connected network."); return false; } else { localLog(((("Current connected network: " + (network.SSID)) + " , ID: ") + (network.networkId))); } if (network.ephemeral) { localLog("Current network is an ephemeral one."); return false; } if (com.android.server.wifi.WifiConfigurationUtil.isConfigForOpenNetwork(network)) { localLog("Current network is a open one."); return false; } int currentRssi = wifiInfo.getRssi(); if (wifiInfo.is24GHz()) { if (is5GHzAvailable) { localLog("Current network is 2.4GHz. No 5GHz networks available."); return false; } if (currentRssi < (mThresholdQualifiedRssi24)) { localLog((("Current network band=2.4GHz, RSSI[" + currentRssi) + "]-acceptable but not qualified.")); return false; } } else if (wifiInfo.is5GHz()) { if (currentRssi < (mThresholdQualifiedRssi5)) { localLog((("Current network band=5GHz, RSSI[" + currentRssi) + "]-acceptable but not qualified.")); return false; } } else { android.util.Log.wtf(com.android.server.wifi.WifiNetworkSelector.TAG, "We're on a wifi network that's neither 2.4 or 5GHz... aliens!"); } return true; }
void clientConnect(int clientIf, java.lang.String address, boolean isDirect, int transport, boolean opportunistic, int phy) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ((((((("clientConnect() - address=" + address) + ", isDirect=") + isDirect) + ", phy= ") + phy) + ", opportunistic=") + (java.lang.String.valueOf(opportunistic)))); gattClientConnectNative(clientIf, address, isDirect, transport, opportunistic, phy); }
public android.bluetooth.BluetoothGatt connectGatt(android.content.Context context, boolean autoConnect, android.bluetooth.BluetoothGattCallback callback, int transport, boolean opportunistic, int phy, android.os.Handler handler) { if (callback == null) throw new java.lang.NullPointerException("callback is null"); android.bluetooth.BluetoothAdapter adapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); android.bluetooth.IBluetoothManager managerService = adapter.getBluetoothManager(); try { android.bluetooth.IBluetoothGatt iGatt = managerService.getBluetoothGatt(); if (iGatt == null) { return null; } android.bluetooth.BluetoothGatt gatt = new android.bluetooth.BluetoothGatt(iGatt, this, transport, false, phy); gatt.connect(autoConnect, callback, handler); return gatt; } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothDevice.TAG, "", e); } return null; }
@org.junit.After public void tearDown() throws java.lang.Exception { com.android.internal.util.test.FakeSettingsProvider.clearSettingsProvider(); }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); when(mContext.getApplicationInfo()).thenReturn(mApplicationInfo); when(mContext.getPackageName()).thenReturn("OffloadControllerTest"); mContentResolver = new android.test.mock.MockContentResolver(mContext); mContentResolver.addProvider(Settings.AUTHORITY, new com.android.internal.util.test.FakeSettingsProvider()); when(mContext.getContentResolver()).thenReturn(mContentResolver); com.android.internal.util.test.FakeSettingsProvider.clearSettingsProvider(); }
@org.junit.Test public void testNoSettingsValueDefaultEnabledDoesStart() { setupFunctioningHardwareInterface(); when(mHardware.getDefaultTetherOffloadDisabled()).thenReturn(0); try { Settings.Global.getInt(mContentResolver, android.provider.Settings.Global.TETHER_OFFLOAD_DISABLED); fail(); } catch (android.provider.Settings.SettingNotFoundException expected) { } final com.android.server.connectivity.tethering.OffloadController offload = new com.android.server.connectivity.tethering.OffloadController(null, mHardware, mContentResolver, new android.net.util.SharedLog("test")); offload.start(); final org.mockito.InOrder inOrder = inOrder(mHardware); inOrder.verify(mHardware, times(1)).getDefaultTetherOffloadDisabled(); inOrder.verify(mHardware, times(1)).initOffloadConfig(); inOrder.verify(mHardware, times(1)).initOffloadControl(any(OffloadHardwareInterface.ControlCallback.class)); inOrder.verifyNoMoreInteractions(); }
@org.junit.Test public void testNoSettingsValueDefaultDisabledDoesNotStart() { setupFunctioningHardwareInterface(); when(mHardware.getDefaultTetherOffloadDisabled()).thenReturn(1); try { Settings.Global.getInt(mContentResolver, android.provider.Settings.Global.TETHER_OFFLOAD_DISABLED); fail(); } catch (android.provider.Settings.SettingNotFoundException expected) { } final com.android.server.connectivity.tethering.OffloadController offload = new com.android.server.connectivity.tethering.OffloadController(null, mHardware, mContentResolver, new android.net.util.SharedLog("test")); offload.start(); final org.mockito.InOrder inOrder = inOrder(mHardware); inOrder.verify(mHardware, times(1)).getDefaultTetherOffloadDisabled(); inOrder.verify(mHardware, never()).initOffloadConfig(); inOrder.verify(mHardware, never()).initOffloadControl(any(OffloadHardwareInterface.ControlCallback.class)); inOrder.verifyNoMoreInteractions(); }
public void run() { createBitmaps(); java.lang.Runtime.getRuntime().gc(); Main.sleep(250); mBitmap2.drawAt(0, 0); java.lang.System.out.println("nulling 1"); mBitmap1 = null; java.lang.Runtime.getRuntime().gc(); while (!(Main.freeNativeStoragePrinted)) { Main.sleep(500); } Main.freeNativeStoragePrinted = false; java.lang.System.out.println("nulling 2"); mBitmap2 = null; java.lang.Runtime.getRuntime().gc(); Main.sleep(500); java.lang.System.out.println("nulling 3"); mBitmap3 = null; java.lang.Runtime.getRuntime().gc(); Main.sleep(500); java.lang.System.out.println("nulling 4"); mBitmap4 = null; java.lang.Runtime.getRuntime().gc(); while (!(Main.freeNativeStoragePrinted)) { Main.sleep(500); } Bitmap.shutDown(); }
static void freeNativeStorage(int nativeDataPtr) { java.lang.System.out.println(("freeNativeStorage: " + nativeDataPtr)); Main.freeNativeStoragePrinted = true; }
protected boolean isBreak(int thisType, int prevType, int nextType) { switch (thisType) { case java.lang.Character.UPPERCASE_LETTER : if (nextType == (java.lang.Character.UPPERCASE_LETTER)) { return true; } case java.lang.Character.TITLECASE_LETTER : return prevType != (java.lang.Character.UPPERCASE_LETTER); case java.lang.Character.LOWERCASE_LETTER : return (prevType > (java.lang.Character.OTHER_LETTER)) || (prevType <= (java.lang.Character.UNASSIGNED)); case java.lang.Character.DECIMAL_DIGIT_NUMBER : case java.lang.Character.LETTER_NUMBER : case java.lang.Character.OTHER_NUMBER : return !(((prevType == (java.lang.Character.DECIMAL_DIGIT_NUMBER)) || (prevType == (java.lang.Character.LETTER_NUMBER))) || (prevType == (java.lang.Character.OTHER_NUMBER))); case java.lang.Character.MATH_SYMBOL : case java.lang.Character.CURRENCY_SYMBOL : case java.lang.Character.OTHER_PUNCTUATION : case java.lang.Character.DASH_PUNCTUATION : return true; case java.lang.Character.OTHER_LETTER : return true; default : return false; } }
@java.lang.Override public android.view.View onCreateView(android.view.LayoutInflater inflater, android.view.ViewGroup container, android.os.Bundle savedInstanceState) { final android.telephony.TelephonyManager tm = ((android.telephony.TelephonyManager) (getContext().getSystemService(Context.TELEPHONY_SERVICE))); final int numSims = tm.getSimCount(); if (numSims > 1) { return inflater.inflate(com.android.internal.R.layout.common_tab_settings, container, false); } else { return super.onCreateView(inflater, container, savedInstanceState); } }
private void setComponentsEnabledState(final int enabledState) { final java.lang.String[] components = new java.lang.String[]{ com.android.cts.verifier.managedprovisioning.ByodHelperActivity.class.getName(), com.android.cts.verifier.managedprovisioning.WorkStatusTestActivity.class.getName(), PermissionLockdownTestActivity.ACTIVITY_ALIAS, com.android.cts.verifier.managedprovisioning.AuthenticationBoundKeyTestActivity.class.getName(), com.android.cts.verifier.managedprovisioning.VpnTestActivity.class.getName(), com.android.cts.verifier.managedprovisioning.RecentsRedactionActivity.class.getName(), com.android.cts.verifier.managedprovisioning.CommandReceiverActivity.class.getName(), com.android.cts.verifier.managedprovisioning.SetSupportMessageActivity.class.getName() }; for (java.lang.String component : components) { mPackageManager.setComponentEnabledSetting(new android.content.ComponentName(mContext, component), enabledState, PackageManager.DONT_KILL_APP); } }
public void run() { android.widget.ImageView imageView = ((android.widget.ImageView) (activity.findViewById(R.id.imageview))); imageView.setBackgroundResource(R.drawable.animationdrawable); mAnimationDrawable = ((android.graphics.drawable.AnimationDrawable) (imageView.getBackground())); mAnimationDrawable.setOneShot(false); }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); final android.app.Activity activity = getActivity(); mResources = activity.getResources(); try { runTestOnUiThread(new java.lang.Runnable() { public void run() { android.widget.ImageView imageView = ((android.widget.ImageView) (activity.findViewById(R.id.imageview))); imageView.setBackgroundResource(R.drawable.animationdrawable); mAnimationDrawable = ((android.graphics.drawable.AnimationDrawable) (imageView.getBackground())); mAnimationDrawable.setOneShot(false); } }); } catch (java.lang.Throwable t) { throw new java.lang.Exception(t); } }
@org.junit.Test @android.support.test.filters.MediumTest public void testRSUnitTest() throws java.lang.Exception { java.lang.String thisDeviceName = android.os.Build.DEVICE; int thisApiVersion = android.os.Build.VERSION.SDK_INT; android.util.Log.i(com.android.rs.test.RSTest.TAG, java.lang.String.format(("RenderScript testing (%s) " + "on device %s, API version %d"), mTest.toString(), thisDeviceName, thisApiVersion)); mTest.runTest(); org.junit.Assert.assertTrue(mTest.getSuccess()); java.lang.String result; if (mTest.getSuccess()) { result = "PASS"; } else { result = "FAIL"; } android.util.Log.i(com.android.rs.test.RSTest.TAG, java.lang.String.format("RenderScript testing (%s) - %s", mTest.toString(), result)); }
private boolean isDefaultMethod(com.android.jack.ir.ast.JMethod jMethod) { assert jMethod != null; assert (jMethod.getEnclosingType()) instanceof com.android.jack.ir.ast.JDefinedInterface; return (!(jMethod.isAbstract())) && (!(jMethod.isStatic())); }
private void trace(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodIdWide mid, @javax.annotation.Nonnull com.android.jack.ir.ast.JClassOrInterface receiverType, @javax.annotation.Nonnull com.android.jack.ir.ast.JType returnType, boolean mustTraceOverridingMethods) { com.android.jack.ir.ast.JMethod foundMethod = findMethod(mid, receiverType, returnType); if (foundMethod != null) { trace(foundMethod); if (mustTraceOverridingMethods) { brush.setMustTraceOverridingMethods(foundMethod); } } if ((receiverType instanceof com.android.jack.ir.ast.JDefinedClassOrInterface) && mustTraceOverridingMethods) { com.android.jack.shrob.obfuscation.SubClassOrInterfaceMarker marker = ((com.android.sched.marker.LocalMarkerManager) (receiverType)).getMarker(com.android.jack.shrob.obfuscation.SubClassOrInterfaceMarker.class); if (marker != null) { java.util.Iterator<com.android.jack.ir.ast.JDefinedClassOrInterface> classOrInterfaceIterator = marker.iterator(); while (classOrInterfaceIterator.hasNext()) { com.android.jack.ir.ast.JDefinedClassOrInterface clOrI = classOrInterfaceIterator.next(); if (brush.traceMarked(clOrI)) { com.android.jack.ir.ast.JMethod implementation = findImplementation(mid, returnType, clOrI); if ((implementation != null) && ((clOrI instanceof com.android.jack.ir.ast.JDefinedClass) || (isDefaultMethod(implementation)))) { trace(implementation); brush.setMustTraceOverridingMethods(implementation); } brush.endTraceMarked(clOrI); } } } } }
private java.io.File getTimeZoneDataApkFile(java.lang.String testId) throws java.lang.Exception { com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper buildHelper = new com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper(mBuildInfo); java.lang.String fileName = getTimeZoneDataApkName(testId); return buildHelper.getTestFile(fileName); }
private void connectNativeNetdService() { java.lang.Thread t = new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { synchronized(com.android.server.IpSecService.this) { android.net.util.NetdService.get(com.android.server.IpSecService.NETD_FETCH_TIMEOUT); } } }); t.start(); }
@org.junit.Test public void testDefaultProvisioningConfiguration() throws java.lang.Exception { final java.lang.String iface = "test_wlan0"; final android.net.ip.IpManager ipm = new android.net.ip.IpManager(mContext, iface, mCb, mNMService); android.net.ip.IpManager.ProvisioningConfiguration config = new android.net.ip.IpManager.ProvisioningConfiguration.Builder().withoutIPv4().withoutIpReachabilityMonitor().build(); ipm.startProvisioning(config); verify(mCb, times(1)).setNeighborDiscoveryOffload(true); verify(mNMService, timeout(100).times(1)).disableIpv6(iface); verify(mNMService, timeout(100).times(1)).clearInterfaceAddresses(iface); verify(mCb, timeout(100).times(1)).setFallbackMulticastFilter(false); verify(mCb, never()).onProvisioningFailure(any()); ipm.stop(); verify(mNMService, timeout(100).times(1)).disableIpv6(iface); verify(mNMService, timeout(100).times(1)).clearInterfaceAddresses(iface); }
@android.test.suitebuilder.annotation.SmallTest public void testNetworkInfoOfTypeNone() { android.os.ConditionVariable broadcastCV = waitForConnectivityBroadcasts(1); verifyNoNetwork(); com.android.server.ConnectivityServiceTest.MockNetworkAgent wifiAware = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_WIFI_AWARE); assertNull(mCm.getActiveNetworkInfo()); android.net.Network[] allNetworks = mCm.getAllNetworks(); com.android.server.ConnectivityServiceTest.assertLength(1, allNetworks); android.net.Network network = allNetworks[0]; com.android.server.NetworkCapabilities capabilities = mCm.getNetworkCapabilities(network); assertTrue(capabilities.hasTransport(com.android.server.TRANSPORT_WIFI_AWARE)); final android.net.NetworkRequest request = new android.net.NetworkRequest.Builder().addTransportType(com.android.server.TRANSPORT_WIFI_AWARE).build(); final com.android.server.ConnectivityServiceTest.TestNetworkCallback callback = new com.android.server.ConnectivityServiceTest.TestNetworkCallback(); mCm.registerNetworkCallback(request, callback); wifiAware.connect(false, false); callback.expectAvailableCallbacks(wifiAware); assertNull(mCm.getActiveNetworkInfo()); assertNull(mCm.getActiveNetwork()); wifiAware.disconnect(); callback.expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.LOST, wifiAware); mCm.unregisterNetworkCallback(callback); verifyNoNetwork(); if (broadcastCV.block(10)) { fail("expected no broadcast, but got CONNECTIVITY_ACTION broadcast"); } }
public void tearDown() throws java.lang.Exception { setMobileDataAlwaysOn(false); if ((mCellNetworkAgent) != null) { mCellNetworkAgent.disconnect(); mCellNetworkAgent = null; } if ((mWiFiNetworkAgent) != null) { mWiFiNetworkAgent.disconnect(); mWiFiNetworkAgent = null; } if ((mEthernetNetworkAgent) != null) { mEthernetNetworkAgent.disconnect(); mEthernetNetworkAgent = null; } waitForIdle(); super.tearDown(); }
public void testReset_resetStringCache() { java.util.regex.Pattern p = java.util.regex.Pattern.compile("a"); java.lang.StringBuilder s = new java.lang.StringBuilder("a"); java.util.regex.Matcher m = p.matcher(s); assertTrue(m.find()); s.replace(0, 1, "c"); m.reset(); assertFalse(m.find()); }
public void testFind_invokeReset() { java.util.regex.Pattern p = java.util.regex.Pattern.compile("a|c"); java.lang.StringBuilder s = new java.lang.StringBuilder("abc"); java.util.regex.Matcher m = p.matcher(s); assertTrue(m.find()); assertEquals(0, m.start()); assertTrue(m.find()); assertEquals(2, m.start()); assertTrue(m.find(0)); assertEquals(0, m.start()); s.replace(0, 3, "bac"); assertTrue(m.find(0)); assertEquals(1, m.start()); }
public void setProcSysNet(int family, int which, java.lang.String ifname, java.lang.String parameter, java.lang.String value) { }
public void ipSecApplyTransportModeTransform(java.io.FileDescriptor socket, int transformId, int direction, java.lang.String localAddress, java.lang.String remoteAddress, int spi) { }
public void setMetricsReportingLevel(int level) { }
public void interfaceAddAddress(java.lang.String ifName, java.lang.String addrString, int prefixLength) { }
public int getMetricsReportingLevel() { return 0; }
@org.junit.Test public void testOpenUdpEncapsulationSocket() throws android.os.RemoteException, java.io.IOException, java.lang.InterruptedException { com.android.server.IpSecService ipSecSrv = com.android.server.IpSecService.create(mockContext); android.net.IpSecUdpEncapResponse ipSecUdpEncapResp = ipSecSrv.openUdpEncapsulationSocket(com.android.server.IpSecServiceTest.TEST_UDP_ENCAP_PORT, new android.os.Binder()); assertTrue(((ipSecUdpEncapResp.port) == (com.android.server.IpSecServiceTest.TEST_UDP_ENCAP_PORT))); }
@org.junit.Before public void setUp() throws android.os.RemoteException, android.system.ErrnoException, java.io.IOException, java.lang.InterruptedException, java.net.UnknownHostException { when(mockNetd.ipSecAllocateSpi(anyInt(), anyInt(), anyString(), anyString(), anyInt())).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI); java.io.FileDescriptor sockFd = android.system.Os.socket(com.android.server.AF_INET, com.android.server.SOCK_DGRAM, com.android.server.IPPROTO_UDP); ipSecUdpEncapResp = new android.net.IpSecUdpEncapResponse(IpSecManager.Status.OK, 1, com.android.server.IpSecServiceTest.TEST_UDP_ENCAP_PORT, sockFd); when(mockIpSecService.openUdpEncapsulationSocket(eq(com.android.server.IpSecServiceTest.TEST_UDP_ENCAP_PORT), anyObject())).thenReturn(ipSecUdpEncapResp); local = java.net.InetAddress.getByAddress(new byte[]{ 127, 0, 0, 1 }); }
public void ipSecDeleteSecurityAssociation(int transformId, int direction, java.lang.String localAddress, java.lang.String remoteAddress, int spi) { }
public void setResolverConfiguration(int netId, java.lang.String[] servers, java.lang.String[] domains, int[] params) { }
@org.junit.Test public void testIpSecServiceCreate() throws java.lang.InterruptedException { com.android.server.IpSecService ipSecSrv = com.android.server.IpSecService.create(mockContext); assertTrue((ipSecSrv != null)); }
@org.junit.Test public void testCreateTransportModeTransform() throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, android.os.RemoteException, java.io.IOException, java.lang.InterruptedException { setUpTestCreateTransportModeTransform(); com.android.server.IpSecService ipSecSrv = com.android.server.IpSecService.create(mockContext).setINetd(mockNetd); mISM = new android.net.IpSecManager(ipSecSrv); android.net.IpSecManager.SecurityParameterIndex outSpi = mISM.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, local); android.net.IpSecManager.SecurityParameterIndex inSpi = mISM.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_IN, local, com.android.server.IpSecServiceTest.DROID_SPI); android.net.IpSecTransform transform = new android.net.IpSecTransform.Builder(mockContext).setSpi(IpSecTransform.DIRECTION_OUT, outSpi).setSpi(IpSecTransform.DIRECTION_IN, inSpi).buildTransportModeTransform(local, mockIpSecService); android.net.IpSecTransformResponse createTransformResp = ipSecSrv.createTransportModeTransform(transform.getIpSecConfig(), new android.os.Binder()); assertTrue(((createTransformResp.status) == (IpSecManager.Status.OK))); }
public int ipSecAllocateSpi(int transformId, int direction, java.lang.String localAddress, java.lang.String remoteAddress, int spi) { return 0; }
void setUpTestCreateTransportModeTransform() throws android.os.RemoteException, java.lang.InterruptedException { when(mockContext.getSystemService(Context.CONNECTIVITY_SERVICE)).thenReturn(mCM); when(mockIpSecService.createTransportModeTransform(anyObject(), anyObject())).thenReturn(tsfResp); when(mockNetd.ipSecAddSecurityAssociation(anyInt(), anyInt(), anyInt(), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceTest.DROID_SPI), anyString(), anyObject(), anyInt(), anyString(), anyObject(), anyInt(), anyInt(), anyInt(), anyInt())).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI); when(mockNetd.ipSecAllocateSpi(anyInt(), anyInt(), anyString(), anyString(), eq(com.android.server.IpSecServiceTest.DROID_SPI))).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI); }
public void interfaceDelAddress(java.lang.String ifName, java.lang.String addrString, int prefixLength) { }
private android.net.IIpSecService getIpSecService() { if ((mIpSecSrv) != null) { return mIpSecSrv; } android.os.IBinder b = android.os.ServiceManager.getService(android.content.Context.IPSEC_SERVICE); if (b == null) { throw new android.os.RemoteException("Failed to connect to IpSecService").rethrowAsRuntimeException(); } return IIpSecService.Stub.asInterface(b); }
public void socketDestroy(android.net.UidRange[] uidRanges, int[] exemptUids) { }
public int ipSecAddSecurityAssociation(int transformId, int mode, int direction, java.lang.String localAddress, java.lang.String remoteAddress, long underlyingNetworkHandle, int spi, java.lang.String authAlgo, byte[] authKey, int authTruncBits, java.lang.String cryptAlgo, byte[] cryptKey, int cryptTruncBits, int encapType, int encapLocalPort, int encapRemotePort) { return 0; }
@org.junit.Test public void testIpSecServiceReserveSpi() throws android.os.RemoteException, java.lang.InterruptedException { com.android.server.IpSecService ipSecSrv = com.android.server.IpSecService.create(mockContext).setINetd(mockNetd); assertTrue(((ipSecSrv.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, com.android.server.IpSecServiceTest.IPV4_LOOPBACK, com.android.server.IpSecServiceTest.DROID_SPI, new android.os.Binder()).spi) == (com.android.server.IpSecServiceTest.DROID_SPI))); }
@java.lang.Override public void requestNothing(byte[] checkTokenBytes, boolean success) { mPermissionHelper.enforceCallerHasPermission(com.android.server.timezone.RulesManagerService.REQUIRED_UPDATER_PERMISSION); com.android.server.timezone.CheckToken checkToken = null; if (checkTokenBytes != null) { checkToken = com.android.server.timezone.RulesManagerService.createCheckTokenOrThrow(checkTokenBytes); } android.util.EventLog.writeEvent(EventLogTags.TIMEZONE_REQUEST_NOTHING, com.android.server.timezone.RulesManagerService.toStringOrNull(checkToken)); mPackageTracker.recordCheckResult(checkToken, success); android.util.EventLog.writeEvent(EventLogTags.TIMEZONE_NOTHING_COMPLETE, com.android.server.timezone.RulesManagerService.toStringOrNull(checkToken)); }
@java.lang.Override public void sendTriggerUpdateCheck(com.android.server.timezone.CheckToken checkToken) { android.app.timezone.RulesUpdaterContract.sendBroadcast(mContext, mUpdaterAppPackageName, checkToken.toByteArray()); android.util.EventLog.writeEvent(EventLogTags.TIMEZONE_TRIGGER_CHECK, checkToken.toString()); }
@java.lang.Override public void run() { android.util.EventLog.writeEvent(EventLogTags.TIMEZONE_UNINSTALL_STARTED, com.android.server.timezone.RulesManagerService.toStringOrNull(mCheckToken)); boolean success = false; try { success = mInstaller.stageUninstall(); int resultCode = (success) ? android.app.timezone.Callback.SUCCESS : android.app.timezone.Callback.ERROR_UNKNOWN_FAILURE; android.util.EventLog.writeEvent(EventLogTags.TIMEZONE_UNINSTALL_COMPLETE, com.android.server.timezone.RulesManagerService.toStringOrNull(mCheckToken), resultCode); sendFinishedStatus(mCallback, resultCode); } catch (java.lang.Exception e) { android.util.EventLog.writeEvent(EventLogTags.TIMEZONE_UNINSTALL_COMPLETE, com.android.server.timezone.RulesManagerService.toStringOrNull(mCheckToken), Callback.ERROR_UNKNOWN_FAILURE); android.util.Slog.w(com.android.server.timezone.RulesManagerService.TAG, "Failed to uninstall distro.", e); sendFinishedStatus(mCallback, Callback.ERROR_UNKNOWN_FAILURE); } finally { mPackageTracker.recordCheckResult(mCheckToken, success); mOperationInProgress.set(false); } }
@java.lang.Override public int requestInstall(android.os.ParcelFileDescriptor distroParcelFileDescriptor, byte[] checkTokenBytes, android.app.timezone.ICallback callback) { boolean closeParcelFileDescriptorOnExit = true; try { mPermissionHelper.enforceCallerHasPermission(com.android.server.timezone.RulesManagerService.REQUIRED_UPDATER_PERMISSION); com.android.server.timezone.CheckToken checkToken = null; if (checkTokenBytes != null) { checkToken = com.android.server.timezone.RulesManagerService.createCheckTokenOrThrow(checkTokenBytes); } android.util.EventLog.writeEvent(EventLogTags.TIMEZONE_REQUEST_INSTALL, com.android.server.timezone.RulesManagerService.toStringOrNull(checkToken)); synchronized(this) { if (distroParcelFileDescriptor == null) { throw new java.lang.NullPointerException("distroParcelFileDescriptor == null"); } if (callback == null) { throw new java.lang.NullPointerException("observer == null"); } if (mOperationInProgress.get()) { return android.app.timezone.RulesManager.ERROR_OPERATION_IN_PROGRESS; } mOperationInProgress.set(true); mExecutor.execute(new com.android.server.timezone.RulesManagerService.InstallRunnable(distroParcelFileDescriptor, checkToken, callback)); closeParcelFileDescriptorOnExit = false; return android.app.timezone.RulesManager.SUCCESS; } } finally { if ((distroParcelFileDescriptor != null) && closeParcelFileDescriptorOnExit) { try { distroParcelFileDescriptor.close(); } catch (java.io.IOException e) { android.util.Slog.w(com.android.server.timezone.RulesManagerService.TAG, "Failed to close distroParcelFileDescriptor", e); } } } }
@java.lang.Override public int requestUninstall(byte[] checkTokenBytes, android.app.timezone.ICallback callback) { mPermissionHelper.enforceCallerHasPermission(com.android.server.timezone.RulesManagerService.REQUIRED_UPDATER_PERMISSION); com.android.server.timezone.CheckToken checkToken = null; if (checkTokenBytes != null) { checkToken = com.android.server.timezone.RulesManagerService.createCheckTokenOrThrow(checkTokenBytes); } android.util.EventLog.writeEvent(EventLogTags.TIMEZONE_REQUEST_UNINSTALL, com.android.server.timezone.RulesManagerService.toStringOrNull(checkToken)); synchronized(this) { if (callback == null) { throw new java.lang.NullPointerException("callback == null"); } if (mOperationInProgress.get()) { return android.app.timezone.RulesManager.ERROR_OPERATION_IN_PROGRESS; } mOperationInProgress.set(true); mExecutor.execute(new com.android.server.timezone.RulesManagerService.UninstallRunnable(checkToken, callback)); return android.app.timezone.RulesManager.SUCCESS; } }
@java.lang.Override public void run() { android.util.EventLog.writeEvent(EventLogTags.TIMEZONE_INSTALL_STARTED, com.android.server.timezone.RulesManagerService.toStringOrNull(mCheckToken)); boolean success = false; try (android.os.ParcelFileDescriptor pfd = mDistroParcelFileDescriptor) { final boolean isFdOwner = false; java.io.InputStream is = new java.io.FileInputStream(pfd.getFileDescriptor(), isFdOwner); com.android.timezone.distro.TimeZoneDistro distro = new com.android.timezone.distro.TimeZoneDistro(is); int installerResult = mInstaller.stageInstallWithErrorCode(distro); int resultCode = mapInstallerResultToApiCode(installerResult); android.util.EventLog.writeEvent(EventLogTags.TIMEZONE_INSTALL_COMPLETE, com.android.server.timezone.RulesManagerService.toStringOrNull(mCheckToken), resultCode); sendFinishedStatus(mCallback, resultCode); success = true; } catch (java.lang.Exception e) { android.util.Slog.w(com.android.server.timezone.RulesManagerService.TAG, "Failed to install distro.", e); android.util.EventLog.writeEvent(EventLogTags.TIMEZONE_INSTALL_COMPLETE, com.android.server.timezone.RulesManagerService.toStringOrNull(mCheckToken), Callback.ERROR_UNKNOWN_FAILURE); sendFinishedStatus(mCallback, Callback.ERROR_UNKNOWN_FAILURE); } finally { mPackageTracker.recordCheckResult(mCheckToken, success); mOperationInProgress.set(false); } }
private boolean addMediaPlayerInfo(com.android.bluetooth.avrcp.MediaPlayerInfo info) { int updateId = -1; boolean updated = false; boolean currentRemoved = false; boolean toUpdate; int currBrowsePlayerID; synchronized(mMediaPlayerInfoList) { for (java.util.Map.Entry<java.lang.Integer, com.android.bluetooth.avrcp.MediaPlayerInfo> entry : mMediaPlayerInfoList.entrySet()) { com.android.bluetooth.avrcp.MediaPlayerInfo current = entry.getValue(); int id = entry.getKey(); if (info.getPackageName().equals(current.getPackageName())) { if (!(current.equalView(info))) { mMediaPlayerInfoList.remove(id); currentRemoved = (mCurrAddrPlayerID) == id; break; } updateId = id; updated = true; break; } } if (updateId == (-1)) { (mLastUsedPlayerID)++; updateId = mLastUsedPlayerID; mAvailablePlayerViewChanged = true; } mMediaPlayerInfoList.put(updateId, info); if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, ((((updated ? "update #" : "add #") + updateId) + ":") + (info.toString()))); toUpdate = updateId == (mCurrAddrPlayerID); currBrowsePlayerID = mCurrBrowsePlayerID; } if (currentRemoved || toUpdate) { updateCurrentController(updateId, currBrowsePlayerID); } return updated; }
@java.lang.Override com.android.ahat.heapdump.ReferenceIterator getReferences() { final com.android.ahat.heapdump.AhatInstance src = this; java.util.List<com.android.ahat.heapdump.Reference> refs = new java.util.AbstractList<com.android.ahat.heapdump.Reference>() { @java.lang.Override public int size() { return mStaticFieldValues.length; } @java.lang.Override public com.android.ahat.heapdump.Reference get(int index) { com.android.ahat.heapdump.FieldValue field = mStaticFieldValues[index]; com.android.ahat.heapdump.Value value = field.value; if ((value != null) && (value.isAhatInstance())) { return new com.android.ahat.heapdump.Reference(src, ("." + (field.name)), value.asAhatInstance(), true); } return null; } }; return new com.android.ahat.heapdump.ReferenceIterator(refs); }
@java.lang.Override com.android.ahat.heapdump.ReferenceIterator getReferences() { final com.android.ahat.heapdump.AhatInstance src = this; java.util.List<com.android.ahat.heapdump.Reference> refs = new java.util.AbstractList<com.android.ahat.heapdump.Reference>() { @java.lang.Override public int size() { return mFieldValues.length; } @java.lang.Override public com.android.ahat.heapdump.Reference get(int index) { com.android.ahat.heapdump.FieldValue field = mFieldValues[index]; com.android.ahat.heapdump.Value value = field.value; if ((value != null) && (value.isAhatInstance())) { boolean strong = (!(field.name.equals("referent"))) || (!(isInstanceOfClass("java.lang.ref.Reference"))); return new com.android.ahat.heapdump.Reference(src, ("." + (field.name)), value.asAhatInstance(), strong); } return null; } }; return new com.android.ahat.heapdump.ReferenceIterator(refs); }
@java.lang.Override public java.lang.Iterable<? extends com.android.ahat.heapdump.DominatorsComputation.Node> getReferencesForDominators() { return new com.android.ahat.heapdump.DominatorReferenceIterator(getReferences()); }
@java.lang.Override public com.android.ahat.heapdump.Reference get(int index) { com.android.ahat.heapdump.FieldValue field = mFieldValues[index]; com.android.ahat.heapdump.Value value = field.value; if ((value != null) && (value.isAhatInstance())) { boolean strong = (!(field.name.equals("referent"))) || (!(isInstanceOfClass("java.lang.ref.Reference"))); return new com.android.ahat.heapdump.Reference(src, ("." + (field.name)), value.asAhatInstance(), strong); } return null; }
public java.util.List<com.android.ahat.heapdump.AhatInstance> getHardReverseReferences() { java.util.List<com.android.ahat.heapdump.AhatInstance> refs = java.util.Collections.emptyList(); if ((mHardReverseReferences) != null) { refs = mHardReverseReferences; } return refs; }
@java.lang.Override public com.android.ahat.heapdump.AhatInstance next() { com.android.ahat.heapdump.AhatInstance next = mNext; mNext = null; return next; }
@java.lang.Override public com.android.ahat.heapdump.Reference get(int index) { com.android.ahat.heapdump.FieldValue field = mStaticFieldValues[index]; com.android.ahat.heapdump.Value value = field.value; if ((value != null) && (value.isAhatInstance())) { return new com.android.ahat.heapdump.Reference(src, ("." + (field.name)), value.asAhatInstance(), true); } return null; }
@java.lang.Override public com.android.ahat.heapdump.Reference get(int index) { com.android.ahat.heapdump.Value value = mValues.get(index); if (value != null) { assert value.isAhatInstance(); java.lang.String field = ("[" + (java.lang.Integer.toString(index))) + "]"; return new com.android.ahat.heapdump.Reference(src, field, value.asAhatInstance(), true); } return null; }
@java.lang.Override com.android.ahat.heapdump.ReferenceIterator getReferences() { final com.android.ahat.heapdump.AhatInstance src = this; java.util.List<com.android.ahat.heapdump.Reference> refs = java.util.Collections.emptyList(); if (!(mValues.isEmpty())) { com.android.ahat.heapdump.Value first = mValues.get(0); if ((first == null) || (first.isAhatInstance())) { refs = new java.util.AbstractList<com.android.ahat.heapdump.Reference>() { @java.lang.Override public int size() { return mValues.size(); } @java.lang.Override public com.android.ahat.heapdump.Reference get(int index) { com.android.ahat.heapdump.Value value = mValues.get(index); if (value != null) { assert value.isAhatInstance(); java.lang.String field = ("[" + (java.lang.Integer.toString(index))) + "]"; return new com.android.ahat.heapdump.Reference(src, field, value.asAhatInstance(), true); } return null; } }; } } return new com.android.ahat.heapdump.ReferenceIterator(refs); }
void setDominator(com.android.ahat.heapdump.DominatorsComputation.Node dominator);
java.lang.Iterable<? extends com.android.ahat.heapdump.DominatorsComputation.Node> getReferencesForDominators();
@java.lang.Override public void setDominator(com.android.ahat.heapdump.DominatorsComputation.Node dominator) { this.dominator = ((com.android.ahat.DominatorsTest.Node) (dominator)); }
public void computeDominators() { com.android.ahat.heapdump.DominatorsComputation.computeDominators(this); }
public java.util.List<com.android.ahat.heapdump.AhatInstance> getSoftReverseReferences() { java.util.List<com.android.ahat.heapdump.AhatInstance> refs = java.util.Collections.emptyList(); if ((mSoftReverseReferences) != null) { refs = mSoftReverseReferences; } return refs; }
@java.lang.Override public void setDominator(com.android.ahat.heapdump.DominatorsComputation.Node dominator) { mImmediateDominator = ((com.android.ahat.heapdump.AhatInstance) (dominator)); mImmediateDominator.mDominated.add(this); }
public void applyPattern(java.lang.String pattern) { icuDecimalFormat.applyPattern(pattern); updateFieldsFromIcu(); icuDecimalFormat.setPositivePrefix(icuDecimalFormat.getPositivePrefix()); icuDecimalFormat.setPositiveSuffix(icuDecimalFormat.getPositiveSuffix()); icuDecimalFormat.setNegativePrefix(icuDecimalFormat.getNegativePrefix()); icuDecimalFormat.setNegativeSuffix(icuDecimalFormat.getNegativeSuffix()); icuDecimalFormat.setGroupingSize(icuDecimalFormat.getGroupingSize()); icuDecimalFormat.setRoundingMode(java.text.DecimalFormat.convertRoundingMode(roundingMode)); icuDecimalFormat.setMaximumIntegerDigits(icuDecimalFormat.getMaximumIntegerDigits()); icuDecimalFormat.setMinimumIntegerDigits(icuDecimalFormat.getMinimumIntegerDigits()); icuDecimalFormat.setMaximumFractionDigits(icuDecimalFormat.getMaximumFractionDigits()); icuDecimalFormat.setMinimumFractionDigits(icuDecimalFormat.getMinimumFractionDigits()); }
public static long getCanonicalTime(long time) { long timeMillis = java.util.concurrent.TimeUnit.MICROSECONDS.toMillis(time); java.util.Calendar calendar = java.util.Calendar.getInstance(); calendar.setTimeInMillis(timeMillis); java.util.TimeZone pst = java.util.TimeZone.getTimeZone("PST"); calendar.setTimeZone(pst); calendar.set(java.util.Calendar.HOUR_OF_DAY, 0); calendar.set(java.util.Calendar.MINUTE, 0); calendar.set(java.util.Calendar.SECOND, 0); calendar.set(java.util.Calendar.MILLISECOND, 0); return java.util.concurrent.TimeUnit.MILLISECONDS.toMicros(calendar.getTimeInMillis()); }
public static void addTasks(java.util.List<com.google.appengine.api.datastore.Key> profilingPointKeys) { com.google.appengine.api.taskqueue.Queue queue = com.google.appengine.api.taskqueue.QueueFactory.getDefaultQueue(); java.util.List<com.google.appengine.api.taskqueue.TaskOptions> tasks = new java.util.ArrayList<>(); for (com.google.appengine.api.datastore.Key key : profilingPointKeys) { java.lang.String keyString = com.google.appengine.api.datastore.KeyFactory.keyToString(key); tasks.add(TaskOptions.Builder.withUrl(com.android.vts.servlet.VtsProfilingStatsJobServlet.PROFILING_STATS_JOB_URL).param("profilingPointKey", keyString).method(TaskOptions.Method.POST)); } queue.add(tasks); }
@java.lang.Override public com.google.appengine.api.datastore.Entity toEntity() { com.google.appengine.api.datastore.Entity profilingPoint = new com.google.appengine.api.datastore.Entity(key); profilingPoint.setUnindexedProperty(com.android.vts.entity.ProfilingPointEntity.TYPE, this.type.getNumber()); profilingPoint.setUnindexedProperty(com.android.vts.entity.ProfilingPointEntity.REGRESSION_MODE, this.regressionMode.getNumber()); profilingPoint.setUnindexedProperty(com.android.vts.entity.ProfilingPointEntity.X_LABEL, this.xLabel); profilingPoint.setUnindexedProperty(com.android.vts.entity.ProfilingPointEntity.Y_LABEL, this.yLabel); return profilingPoint; }
@java.lang.Override public void enableDtaMode() { android.util.Log.d(com.android.nfc.dhimpl.NativeNfcManager.TAG, "enableDtaMode : entry"); doEnableDtaMode(); }
public void disableExtDtaSnepServer() { if (com.android.nfc.P2pLinkManager.DBG) android.util.Log.d(com.android.nfc.P2pLinkManager.TAG, "Disabling Extended DTA Server"); if (!(mExtDtaSnepServerRunning)) { return; } synchronized(this) { mExtDtaSnepServer.stop(); mExtDtaSnepServer = null; mExtDtaSnepServerRunning = false; } mServerEnabled = false; }
public void bindService() { if (!(isBound)) { android.content.Intent intent = new android.content.Intent("com.phdtaui.messageservice.ACTION_BIND"); mContext.bindService(com.android.nfc.DtaServiceConnector.createExplicitFromImplicitIntent(mContext, intent), myConnection, Context.BIND_AUTO_CREATE); } }
@java.lang.Override public void run() { if (com.android.nfc.sneptest.ExtDtaSnepServer.DBG) android.util.Log.d(com.android.nfc.sneptest.ExtDtaSnepServer.TAG, "starting connection thread"); try { boolean running; synchronized(this) { running = mServerRunning; } while (running) { if (!(com.android.nfc.sneptest.ExtDtaSnepServer.handleRequest(mMessager, mExtDtaSnepServerCallback))) { break; } synchronized(this) { running = mServerRunning; } } } catch (java.io.IOException e) { if (com.android.nfc.sneptest.ExtDtaSnepServer.DBG) android.util.Log.e(com.android.nfc.sneptest.ExtDtaSnepServer.TAG, "Closing from IOException"); } finally { try { if (com.android.nfc.sneptest.ExtDtaSnepServer.DBG) android.util.Log.d(com.android.nfc.sneptest.ExtDtaSnepServer.TAG, "about to close"); mSock.close(); } catch (java.io.IOException e) { } } if (com.android.nfc.sneptest.ExtDtaSnepServer.DBG) android.util.Log.d(com.android.nfc.sneptest.ExtDtaSnepServer.TAG, "finished connection thread"); }
@java.lang.Override public com.android.nfc.snep.SnepMessage doGet(int acceptableLength, android.nfc.NdefMessage msg) { android.nfc.NdefMessage response = null; if (NfcService.sIsDtaMode) { if (msg == null) { } else if ((mHandoverDataParser.getIncomingHandoverData(msg)) == null) { } else { response = mHandoverDataParser.getIncomingHandoverData(msg).handoverSelect; } } else { response = mHandoverDataParser.getIncomingHandoverData(msg).handoverSelect; } if (response != null) { onReceiveHandover(); return com.android.nfc.snep.SnepMessage.getSuccessResponse(response); } else { return com.android.nfc.snep.SnepMessage.getMessage(SnepMessage.RESPONSE_NOT_IMPLEMENTED); } }
@java.lang.Override public com.nxp.nfc.INfcDta getNfcDtaInterface() { if ((mDtaService) == null) { mDtaService = new com.android.nfc.NfcService.NfcDtaService(); } return mDtaService; }
public void testLocaleGroupingSeparator() { int number = 1234; java.text.DecimalFormat df; java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(new java.util.Locale("de", "AT")); df = new java.text.DecimalFormat("#,##0.00;-#,##0.00", dfs); assertEquals("1 234,00", df.format(number)); df = new java.text.DecimalFormat("¤#,##0.00;¤-#,##0.00", dfs); assertEquals("€1 234,00", df.format(number)); }
public void testSetGroupingSeparator() { int number = 1234; java.text.DecimalFormat df; java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(java.util.Locale.US); dfs.setGroupingSeparator(' '); df = new java.text.DecimalFormat("#,##0.00;-#,##0.00", dfs); assertEquals("1 234.00", df.format(number)); df = new java.text.DecimalFormat("¤#,##0.00;¤-#,##0.00", dfs); assertEquals("$1 234.00", df.format(number)); }
public static void main(java.lang.String[] args) { try { Indirect.main(); java.lang.System.out.println("Succeeded unexpectedly"); } catch (java.lang.IncompatibleClassChangeError icce) { java.lang.System.out.println("Got expected ICCE"); } try { Indirect2.main(); java.lang.System.out.println("Succeeded unexpectedly"); } catch (java.lang.VerifyError ve) { java.lang.System.out.println("Got expected VerifyError"); } }
private synchronized java.util.List<java.lang.String> generatePackageDexopts(android.content.pm.PackageParser.Package pkg, int compilationReason) { final java.util.List<java.lang.String> commands = new java.util.ArrayList<java.lang.String>(); final com.android.server.pm.Installer collectingInstaller = new com.android.server.pm.Installer(mContext, true) { @java.lang.Override public void dexopt(java.lang.String apkPath, int uid, @android.annotation.Nullable java.lang.String pkgName, java.lang.String instructionSet, int dexoptNeeded, @android.annotation.Nullable java.lang.String outputPath, int dexFlags, java.lang.String compilerFilter, @android.annotation.Nullable java.lang.String volumeUuid, @android.annotation.Nullable java.lang.String sharedLibraries) throws com.android.server.pm.Installer.InstallerException { commands.add(com.android.server.pm.OtaDexoptService.buildCommand("dexopt", apkPath, uid, pkgName, instructionSet, dexoptNeeded, outputPath, dexFlags, compilerFilter, volumeUuid, sharedLibraries)); } }; com.android.server.pm.PackageDexOptimizer optimizer = new com.android.server.pm.OtaDexoptService.OTADexoptPackageDexOptimizer(collectingInstaller, mPackageManagerService.mInstallLock, mContext); java.lang.String[] libraryDependencies = pkg.usesLibraryFiles; if (pkg.isSystemApp()) { libraryDependencies = com.android.server.pm.OtaDexoptService.NO_LIBRARIES; } optimizer.performDexOpt(pkg, libraryDependencies, null, false, com.android.server.pm.PackageManagerServiceCompilerMapping.getCompilerFilterForReason(compilationReason), null, mPackageManagerService.getDexManager().isUsedByOtherApps(pkg.packageName), true, false); return commands; }
int performDexOpt(android.content.pm.PackageParser.Package pkg, java.lang.String[] sharedLibraries, java.lang.String[] instructionSets, boolean checkProfiles, java.lang.String targetCompilationFilter, com.android.server.pm.CompilerStats.PackageStats packageStats, boolean isUsedByOtherApps, boolean bootComplete, boolean downgrade) { if (!(com.android.server.pm.PackageDexOptimizer.canOptimizePackage(pkg))) { return com.android.server.pm.PackageDexOptimizer.DEX_OPT_SKIPPED; } synchronized(mInstallLock) { final boolean useLock = mSystemReady; if (useLock) { mDexoptWakeLock.setWorkSource(new android.os.WorkSource(pkg.applicationInfo.uid)); mDexoptWakeLock.acquire(); } try { return performDexOptLI(pkg, sharedLibraries, instructionSets, checkProfiles, targetCompilationFilter, packageStats, isUsedByOtherApps, bootComplete, downgrade); } finally { if (useLock) { mDexoptWakeLock.release(); } } } }
private int performDexOptInternalWithDependenciesLI(android.content.pm.PackageParser.Package p, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete, boolean downgrade) { com.android.server.pm.PackageDexOptimizer pdo = (force) ? new com.android.server.pm.PackageDexOptimizer.ForcedUpdatePackageDexOptimizer(mPackageDexOptimizer) : mPackageDexOptimizer; java.util.Collection<android.content.pm.PackageParser.Package> deps = findSharedNonSystemLibraries(p); final java.lang.String[] instructionSets = com.android.server.pm.InstructionSets.getAppDexInstructionSets(p.applicationInfo); if (!(deps.isEmpty())) { for (android.content.pm.PackageParser.Package depPackage : deps) { pdo.performDexOpt(depPackage, null, instructionSets, false, com.android.server.pm.PackageManagerServiceCompilerMapping.getCompilerFilterForReason(com.android.server.pm.PackageManagerService.REASON_NON_SYSTEM_LIBRARY), getOrCreateCompilerPackageStats(depPackage), mDexManager.isUsedByOtherApps(p.packageName), bootComplete, downgrade); } } return pdo.performDexOpt(p, p.usesLibraryFiles, instructionSets, checkProfiles, targetCompilerFilter, getOrCreateCompilerPackageStats(p), mDexManager.isUsedByOtherApps(p.packageName), bootComplete, downgrade); }
@java.lang.Override public void forceDexOpt(java.lang.String packageName) { com.android.server.pm.PackageManagerService.enforceSystemOrRoot("forceDexOpt"); android.content.pm.PackageParser.Package pkg; synchronized(mPackages) { pkg = mPackages.get(packageName); if (pkg == null) { throw new java.lang.IllegalArgumentException(("Unknown package: " + packageName)); } } synchronized(mInstallLock) { android.os.Trace.traceBegin(com.android.server.pm.TRACE_TAG_PACKAGE_MANAGER, "dexopt"); final int res = performDexOptInternalWithDependenciesLI(pkg, false, com.android.server.pm.PackageManagerServiceCompilerMapping.getCompilerFilterForReason(com.android.server.pm.PackageManagerService.REASON_FORCED_DEXOPT), true, true, false); android.os.Trace.traceEnd(com.android.server.pm.TRACE_TAG_PACKAGE_MANAGER); if (res != (PackageDexOptimizer.DEX_OPT_PERFORMED)) { throw new java.lang.IllegalStateException(("Failed to dexopt: " + res)); } } }
private int performDexOptInternal(java.lang.String packageName, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete, boolean downgrade) { android.content.pm.PackageParser.Package p; synchronized(mPackages) { p = mPackages.get(packageName); if (p == null) { return PackageDexOptimizer.DEX_OPT_FAILED; } mPackageUsage.maybeWriteAsync(mPackages); mCompilerStats.maybeWriteAsync(); } long callingId = android.os.Binder.clearCallingIdentity(); try { synchronized(mInstallLock) { return performDexOptInternalWithDependenciesLI(p, checkProfiles, targetCompilerFilter, force, bootComplete, downgrade); } } finally { android.os.Binder.restoreCallingIdentity(callingId); } }
private int performDexOptTraced(java.lang.String packageName, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete) { android.os.Trace.traceBegin(com.android.server.pm.TRACE_TAG_PACKAGE_MANAGER, "dexopt"); try { return performDexOptInternal(packageName, checkProfiles, targetCompilerFilter, force, bootComplete, false); } finally { android.os.Trace.traceEnd(com.android.server.pm.TRACE_TAG_PACKAGE_MANAGER); } }
private int getDexoptNeeded(java.lang.String path, java.lang.String isa, java.lang.String compilerFilter, boolean newProfile, boolean downgrade) { int dexoptNeeded; try { dexoptNeeded = dalvik.system.DexFile.getDexOptNeeded(path, isa, compilerFilter, newProfile, downgrade); } catch (java.io.IOException ioe) { android.util.Slog.w(com.android.server.pm.PackageDexOptimizer.TAG, ("IOException reading apk: " + path), ioe); return com.android.server.pm.PackageDexOptimizer.DEX_OPT_FAILED; } return adjustDexoptNeeded(dexoptNeeded); }
@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter pw, java.lang.String[] args) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.server.IpSecService.TAG); pw.println("IpSecService Log:"); pw.println(("NetdNativeService Connection: " + (isNetdAlive() ? "alive" : "dead"))); pw.println(); dumpUserQuota(pw); dumpTransformRecords(pw); }
public void dump(java.io.PrintWriter pw) { pw.print("transform config "); if ((mode) == 0) { pw.print((" local address " + (localAddress.toString()))); } pw.print((" remote address " + (remoteAddress.toString()))); pw.print((" port " + (encapRemotePort))); pw.print((((mode) == 0 ? " tunnel " : "transport") + " mode ")); pw.println(); pw.print(("keepalive interval " + (nattKeepaliveInterval))); pw.print((" encap type " + (getEncapTypeString(encapType)))); pw.println(); pw.print("In-flow "); pw.print(("SPI resource ID " + (flow[0].spiResourceId))); pw.print((" encryption " + (flow[0].encryption.getName()))); pw.print((" authentication " + (flow[0].authentication.getName()))); pw.println(); pw.print("Out-flow "); pw.print(("SPI resource ID " + (flow[1].spiResourceId))); pw.print((" encryption " + (flow[1].encryption.getName()))); pw.print((" authentication " + (flow[1].authentication.getName()))); pw.println(); }
private java.lang.String getEncapTypeString(int encapType) { switch (encapType) { case IpSecTransform.ENCAP_ESPINUDP : return "ESP in UDP"; case IpSecTransform.ENCAP_ESPINUDP_NON_IKE : return "ESP in UDP with no IKE"; default : } return "none"; }
public static void assertWatchServiceEventMultipleKeys(java.nio.file.WatchService watchService, java.util.Map<java.nio.file.WatchKey, java.util.List<libcore.java.nio.file.WatchServiceTest.WatchEventResult>> expectedResults, boolean expectedResetResult) throws java.lang.InterruptedException { while (!(expectedResults.isEmpty())) { java.nio.file.WatchKey watchKey = watchService.poll(2, java.util.concurrent.TimeUnit.SECONDS); java.util.List<libcore.java.nio.file.WatchServiceTest.WatchEventResult> expectedEvents = expectedResults.get(watchKey); junit.framework.TestCase.assertNotNull(expectedEvents); java.util.Iterator<libcore.java.nio.file.WatchServiceTest.WatchEventResult> expectedEventsIterator = expectedEvents.iterator(); for (java.nio.file.WatchEvent<?> event : watchKey.pollEvents()) { libcore.java.nio.file.WatchServiceTest.WatchEventResult expectedEventResult = expectedEventsIterator.next(); junit.framework.TestCase.assertNotNull(expectedEventResult); junit.framework.TestCase.assertEquals(expectedEventResult.expectedKind, event.kind()); if (expectedEventResult.testCount) { junit.framework.TestCase.assertEquals(expectedEventResult.expectedCount, event.count()); } } junit.framework.TestCase.assertEquals(expectedResetResult, watchKey.reset()); expectedResults.remove(watchKey); } }
public void probeAll() { java.util.Set<java.net.InetAddress> ipProbeList = new java.util.HashSet<java.net.InetAddress>(); synchronized(mLock) { ipProbeList.addAll(mIpWatchList.keySet()); } if ((!(ipProbeList.isEmpty())) && (stillRunning())) { mConfig.acquireWakeLock(android.net.ip.IpReachabilityMonitor.getProbeWakeLockDuration()); } for (java.net.InetAddress target : ipProbeList) { if (!(stillRunning())) { break; } final int returnValue = android.net.ip.IpReachabilityMonitor.probeNeighbor(mInterfaceIndex, target); mLog.log(java.lang.String.format("put neighbor %s into NUD_PROBE state (rval=%d)", target.getHostAddress(), returnValue)); logEvent(IpReachabilityEvent.PROBE, returnValue); } mLastProbeTimeMs = android.os.SystemClock.elapsedRealtime(); }
static android.net.ip.IpReachabilityMonitor.Config makeDefault(android.content.Context context, java.lang.String iface) { final java.lang.String lockName = ((android.net.ip.IpReachabilityMonitor.TAG) + ".") + iface; final android.os.PowerManager pm = ((android.os.PowerManager) (context.getSystemService(Context.POWER_SERVICE))); final android.os.PowerManager.WakeLock lock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, lockName); return new android.net.ip.IpReachabilityMonitor.Config() { public void acquireWakeLock(long durationMs) { lock.acquire(durationMs); } }; }
private static int getInterfaceIndex(java.lang.String iface) { try { return java.net.NetworkInterface.getByName(iface).getIndex(); } catch (java.net.SocketException e) { throw new java.lang.IllegalArgumentException((("invalid interface '" + iface) + "': "), e); } }
android.net.ip.IpReachabilityMonitor makeMonitor() { return new android.net.ip.IpReachabilityMonitor("fake0", 1, mLog, mCallback, null, mConfig); }
@java.lang.Override protected void applyMutation(dexfuzz.program.Mutation uncastMutation) { dexfuzz.program.mutators.NewArrayLengthChanger.AssociatedMutation mutation = ((dexfuzz.program.mutators.NewArrayLengthChanger.AssociatedMutation) (uncastMutation)); dexfuzz.program.MutatableCode mutatableCode = mutation.mutatableCode; dexfuzz.program.MInsn newArrayInsn = newArrayLengthInsns.get(mutation.newArrayToChangeIdx); int newArrayInsnIdx = mutatableCode.getInstructionIndex(newArrayInsn); dexfuzz.program.MInsn newInsn = new dexfuzz.program.MInsn(); newInsn.insn = new dexfuzz.rawdex.Instruction(); newInsn.insn.info = dexfuzz.rawdex.Instruction.getOpcodeInfo(Opcode.CONST_16); newArrayInsn.insn.vregB = mutatableCode.getTemporaryVReg(0); newInsn.insn.vregA = ((int) (newArrayInsn.insn.vregB)); newInsn.insn.vregB = rng.nextInt(100); mutatableCode.insertInstructionAt(newInsn, newArrayInsnIdx); dexfuzz.Log.info(("Changed the length of the array to " + (newInsn.insn.vregB))); stats.incrementStat("Changed length of new array"); }
boolean isScoRouted() { for (java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.hfpclient.HeadsetClientStateMachine> entry : mStateMachineMap.entrySet()) { if ((entry.getValue()) != null) { int audioState = entry.getValue().getAudioState(entry.getKey()); if (audioState == (android.bluetooth.BluetoothHeadsetClient.STATE_AUDIO_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, (((("Device " + (entry.getKey())) + " audio state ") + audioState) + " Connected")); return true; } } } return false; }
boolean acceptCall(android.bluetooth.BluetoothDevice device, int flag) { enforceCallingOrSelfPermission(com.android.bluetooth.hfpclient.BLUETOOTH_PERM, "Need BLUETOOTH permission"); synchronized(this) { for (java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.hfpclient.HeadsetClientStateMachine> entry : mStateMachineMap.entrySet()) { if ((entry.getValue()) != null) { int connectionState = entry.getValue().getConnectionState(entry.getKey()); android.util.Log.e(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ((("accepting a call on device " + device) + "Disconnecting possibly on ") + (entry.getValue()))); if (connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) entry.getValue().obtainMessage(HeadsetClientStateMachine.TERMINATE_CALL).sendToTarget(); } } } com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = getStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ("Cannot allocate SM for device " + device)); return false; } int connectionState = sm.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } android.os.Message msg = sm.obtainMessage(HeadsetClientStateMachine.ACCEPT_CALL); msg.arg1 = flag; sm.sendMessage(msg); return true; }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578827") public void testAppInstallation() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); final java.lang.String application = "Google Translate"; if (((testFramework.getApi()) >= 24) && (testFramework.isGoogleApiImage())) { device.pressHome(); device.findObject(new android.support.test.uiautomator.UiSelector().description("Apps")).clickAndWaitForNewWindow(); boolean playStoreInstalled = com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.isPlayStoreInstalled(instrumentation); if (playStoreInstalled) { com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.loginGooglePlay(instrumentation); com.android.devtools.systemimage.uitest.smoke.PlayStoreTest.selectApplication(instrumentation, application); new com.android.devtools.systemimage.uitest.watchers.PlayStoreConfirmationWatcher(device).checkForCondition(); assertTrue("Unable to install the application from Google Play", com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.installApplication(instrumentation)); assertTrue("Unable to uninstall the application from Google Play", com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.uninstallApplication(instrumentation)); com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.resetPlayStore(instrumentation); device.pressHome(); } } }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578827") public void testPlaySearch() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); final java.lang.String application = "Messenger"; if (((testFramework.getApi()) >= 24) && (testFramework.isGoogleApiImage())) { device.pressHome(); device.findObject(new android.support.test.uiautomator.UiSelector().description("Apps")).clickAndWaitForNewWindow(); boolean playStoreInstalled = com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.isPlayStoreInstalled(instrumentation); if (playStoreInstalled) { com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.loginGooglePlay(instrumentation); assertTrue("Application not found in search.", com.android.devtools.systemimage.uitest.smoke.PlayStoreTest.hasTestApp(instrumentation, application)); com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.resetPlayStore(instrumentation); device.pressHome(); } } }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578827") public void testPayAppVerification() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); final java.lang.String application = "Pocket Casts"; if (((testFramework.getApi()) >= 24) && (testFramework.isGoogleApiImage())) { device.pressHome(); device.findObject(new android.support.test.uiautomator.UiSelector().description("Apps")).clickAndWaitForNewWindow(); boolean playStoreInstalled = com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.isPlayStoreInstalled(instrumentation); if (playStoreInstalled) { com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.loginGooglePlay(instrumentation); com.android.devtools.systemimage.uitest.smoke.PlayStoreTest.selectApplication(instrumentation, application); new com.android.devtools.systemimage.uitest.watchers.PlayStoreConfirmationWatcher(device).checkForCondition(); assertTrue("Target application is not a pay app", new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws android.support.test.uiautomator.UiObjectNotFoundException { return device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.GOOGLE_PLAY_BUY_BUTTON_RES).textContains("$")).exists(); } })); com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.resetPlayStore(instrumentation); device.pressHome(); } } }
private int priority(int eventId) { switch (eventId) { case com.android.internal.logging.MetricsProto.MetricsEvent.NOTIFICATION_NETWORK_SIGN_IN : return 4; case com.android.internal.logging.MetricsProto.MetricsEvent.NOTIFICATION_NETWORK_NO_INTERNET : return 3; case com.android.internal.logging.MetricsProto.MetricsEvent.NOTIFICATION_NETWORK_SWITCH : return 2; case com.android.internal.logging.MetricsProto.MetricsEvent.NOTIFICATION_NETWORK_LOST_INTERNET : return 1; default : return 0; } }
private void doTest(boolean isGoog, java.lang.String mimeType, int w, int h, long testTimeoutMs) throws java.lang.Exception { java.lang.String[] encoderNames = getEncoderName(mimeType, isGoog); if ((encoderNames.length) == 0) { android.util.Log.i(com.android.cts.videoperf.VideoEncoderDecoderTest.TAG, (isGoog ? "Google " : (("Non-google " + "encoder for ") + mimeType) + " not found")); return; } java.lang.String[] decoderNames = getDecoderName(mimeType, isGoog); if ((decoderNames.length) == 0) { android.util.Log.i(com.android.cts.videoperf.VideoEncoderDecoderTest.TAG, (isGoog ? "Google " : (("Non-google " + "decoder for ") + mimeType) + " not found")); return; } mTestConfig.mMaxTimeMs = java.lang.Math.min((((((testTimeoutMs / (encoderNames.length)) / (decoderNames.length)) * 4) / 5) / (mTestConfig.mNumberOfRepeat)), mTestConfig.mMaxTimeMs); for (java.lang.String encoderName : encoderNames) { for (java.lang.String decoderName : decoderNames) { doTestByName(encoderName, decoderName, mimeType, w, h); } } }
public static java.lang.String getOriginalHostNameFromInetAddress(java.net.InetAddress addr) { if ((Build.VERSION.SDK_INT) > 24) { try { java.lang.reflect.Method getHolder = java.net.InetAddress.class.getDeclaredMethod("holder"); getHolder.setAccessible(true); java.lang.reflect.Method getOriginalHostName = java.lang.Class.forName("java.net.InetAddress$InetAddressHolder").getDeclaredMethod("getOriginalHostName"); getOriginalHostName.setAccessible(true); java.lang.String originalHostName = ((java.lang.String) (getOriginalHostName.invoke(getHolder.invoke(addr)))); if (originalHostName == null) { return addr.getHostAddress(); } return originalHostName; } catch (java.lang.NoSuchMethodException | java.lang.ClassNotFoundException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException e) { throw new java.lang.RuntimeException("Failed to get originalHostName", e); } } return addr.getHostAddress(); }
public java.lang.String getHostnameOrIP() { if ((peerHostname) != null) { return peerHostname; } java.net.InetAddress peerAddress = getInetAddress(); if (peerAddress != null) { return org.conscrypt.Platform.getOriginalHostNameFromInetAddress(peerAddress); } return null; }
private boolean isIpAddress(java.lang.String address) { if (address == null) return false; return java.net.InetAddress.isNumeric(address); }
public void testEncryption() throws java.lang.Exception { if (((isTelevision()) || (!(isRequired()))) || (android.security.cts.EncryptionTest.deviceIsEncrypted())) { return; } assertFalse("Device encryption is required", android.security.cts.EncryptionTest.aesIsFast()); }
public static void insertMethodCallAfter(org.objectweb.asm.tree.MethodNode mn, java.util.List<org.objectweb.asm.tree.analysis.Frame> frameMap, java.util.List<java.util.List<org.objectweb.asm.tree.TryCatchBlockNode>> handlersMap, org.objectweb.asm.tree.AbstractInsnNode node, int index, org.objectweb.asm.tree.MethodInsnNode call) { org.objectweb.asm.tree.InsnList instructions = mn.instructions; while (((index + 1) < (instructions.size())) && ((instructions.get((index + 1)).getOpcode()) == (-1))) { index++; node = node.getNext(); } java.util.List<org.objectweb.asm.tree.TryCatchBlockNode> handlers = handlersMap.get((index + 1)); org.objectweb.asm.tree.LabelNode end = new org.objectweb.asm.tree.LabelNode(); instructions.insert(node, end); frameMap.add((index + 1), null); handlersMap.add((index + 1), null); instructions.insert(node, call); frameMap.add((index + 1), null); handlersMap.add((index + 1), null); org.objectweb.asm.tree.LabelNode start = new org.objectweb.asm.tree.LabelNode(); instructions.insert(node, start); frameMap.add((index + 1), null); handlersMap.add((index + 1), null); lockedregioncodeinjection.LockFindingClassVisitor.updateCatchHandler(mn, handlers, start, end, handlersMap); }
public void synchronizedThrows() { lockedregioncodeinjection.TestTarget.nextUnboostThrows = true; synchronized(this) { lockedregioncodeinjection.TestTarget.invoke(); } }
@org.junit.Test public void testUnboostThatThrows() { lockedregioncodeinjection.TestTarget.resetCount(); lockedregioncodeinjection.TestTarget t = new lockedregioncodeinjection.TestTarget(); org.junit.Assert.assertEquals(TestTarget.boostCount, 0); org.junit.Assert.assertEquals(TestTarget.unboostCount, 0); try { t.synchronizedThrows(); } catch (java.lang.RuntimeException e) { } org.junit.Assert.assertEquals(TestTarget.boostCount, 1); org.junit.Assert.assertEquals(TestTarget.unboostCount, 0); org.junit.Assert.assertEquals(TestTarget.invokeCount, 1); }
@org.junit.Test public void testDescribeImmutableDifferences() { android.net.NetworkCapabilities nc1; android.net.NetworkCapabilities nc2; nc1 = new android.net.NetworkCapabilities().addTransportType(android.net.NetworkCapabilities.TRANSPORT_CELLULAR); nc2 = new android.net.NetworkCapabilities().addTransportType(android.net.NetworkCapabilities.TRANSPORT_WIFI); assertNotEquals("", nc1.describeImmutableDifferences(nc2)); assertEquals("", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED); nc2 = new android.net.NetworkCapabilities(); assertEquals("", nc1.describeImmutableDifferences(nc2)); assertEquals("", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED); nc2 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); assertEquals("", nc1.describeImmutableDifferences(nc2)); assertEquals("", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities().removeCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); nc2 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); assertNotEquals("", nc1.describeImmutableDifferences(nc2)); assertEquals("", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities(); nc2 = new android.net.NetworkCapabilities().setSpecifier(new android.net.StringNetworkSpecifier("specifications")); assertNotEquals("", nc1.describeImmutableDifferences(nc2)); assertEquals("", nc1.describeImmutableDifferences(nc1)); }
@org.junit.Test public void testV1SignedAttrs() throws java.lang.Exception { com.android.apksig.ApkVerifierTest.assertVerified(verify("v1-only-with-signed-attrs.apk")); com.android.apksig.ApkVerifierTest.assertVerified(verify("v1-only-with-signed-attrs-signerInfo1-good-signerInfo2-good.apk")); }
private void notifyPackageManager(java.util.List<dalvik.system.BaseDexClassLoader> ignored, java.util.List<java.lang.String> classPaths) { java.lang.String packageName = android.app.ActivityThread.currentPackageName(); try { android.app.ActivityThread.getPackageManager().notifyDexLoad(packageName, new java.util.List<java.lang.String>(classPaths.get(0).split(java.io.File.pathSeparator)), dalvik.system.VMRuntime.getRuntime().vmInstructionSet()); } catch (android.os.RemoteException re) { android.util.Slog.e(android.app.DexLoadReporter.TAG, ("Failed to notify PM about dex load for package " + packageName), re); } }
public void run(java.lang.String[] args) { boolean validCommand = false; if ((args.length) >= 2) { boolean flag = false; if ("enable".equals(args[1])) { flag = true; validCommand = true; } else if ("disable".equals(args[1])) { flag = false; validCommand = true; } if (validCommand) { android.net.wifi.IWifiManager wifiMgr = IWifiManager.Stub.asInterface(android.os.ServiceManager.getService(Context.WIFI_SERVICE)); try { if (wifiMgr == null) { java.lang.System.err.println("Wi-Fi service is not ready"); return; } wifiMgr.setWifiEnabled("com.android.shell", flag); } catch (android.os.RemoteException e) { java.lang.System.err.println(("Wi-Fi operation failed: " + e)); } return; } } java.lang.System.err.println(longHelp()); }
public void setDataRoamingEnabled(boolean enabled) { final int phoneSubId = mPhone.getSubId(); if ((getDataRoamingEnabled()) != enabled) { int roaming = (enabled) ? 1 : 0; if ((android.telephony.TelephonyManager.getDefault().getSimCount()) == 1) { Settings.Global.putInt(mResolver, Settings.Global.DATA_ROAMING, roaming); } else { Settings.Global.putInt(mResolver, ((Settings.Global.DATA_ROAMING) + phoneSubId), roaming); } mSubscriptionManager.setDataRoaming(roaming, phoneSubId); if (com.android.internal.telephony.dataconnection.DcTracker.DBG) { log(((("setDataRoamingEnabled: set phoneSubId=" + phoneSubId) + " isRoaming=") + enabled)); } } else { if (com.android.internal.telephony.dataconnection.DcTracker.DBG) { log(((("setDataRoamingEnabled: unchanged phoneSubId=" + phoneSubId) + " isRoaming=") + enabled)); } } android.content.SharedPreferences.Editor sp = android.preference.PreferenceManager.getDefaultSharedPreferences(mPhone.getContext()).edit(); sp.putBoolean(Phone.DATA_ROAMING_IS_USER_SETTING_KEY, true).commit(); }
private void setDefaultDataRoamingEnabled() { java.lang.String setting = Settings.Global.DATA_ROAMING; boolean update = false; if ((android.telephony.TelephonyManager.getDefault().getSimCount()) != 1) { setting = setting + (mPhone.getSubId()); try { Settings.Global.getInt(mResolver, setting); } catch (android.provider.Settings.SettingNotFoundException ex) { update = true; } } else if (!(isDataRoamingFromUserAction())) { update = true; } if (update) { boolean defaultVal = getDefaultDataRoamingEnabled(); log(((("setDefaultDataRoamingEnabled: " + setting) + "default value: ") + defaultVal)); Settings.Global.putInt(mResolver, setting, (defaultVal ? 1 : 0)); mSubscriptionManager.setDataRoaming((defaultVal ? 1 : 0), mPhone.getSubId()); } }
private void connectNativeNetdService() { boolean nativeServiceAvailable = false; try { mNetdService = INetd.Stub.asInterface(android.os.ServiceManager.getService(com.android.server.NetworkManagementService.NETD_SERVICE_NAME)); nativeServiceAvailable = ((mNetdService) != null) && (mNetdService.isAlive()); } catch (android.os.RemoteException e) { } if (!nativeServiceAvailable) { android.util.Slog.wtf(com.android.server.NetworkManagementService.TAG, ("Can't connect to NativeNetdService " + (com.android.server.NetworkManagementService.NETD_SERVICE_NAME))); } }
@java.lang.Override protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return com.android.server.IpSecService.mUserQuotaTracker.getUserRecord(this.uid).transform; }
@java.lang.Override protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return com.android.server.IpSecService.mUserQuotaTracker.getUserRecord(this.uid).spi; }
@java.lang.Override public android.net.IpSecSpiResponse reserveSecurityParameterIndex(int direction, java.lang.String remoteAddress, int requestedSpi, android.os.IBinder binder) throws android.os.RemoteException { int resourceId = com.android.server.IpSecService.mNextResourceId.getAndIncrement(); int spi = android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX; java.lang.String localAddress = ""; try { synchronized(mLock) { if (!(com.android.server.IpSecService.mUserQuotaTracker.getUserRecord(android.os.Binder.getCallingUid()).spi.isAvailable())) { return new android.net.IpSecSpiResponse(IpSecManager.Status.RESOURCE_UNAVAILABLE, android.net.IpSecManager.INVALID_RESOURCE_ID, spi); } spi = getNetdInstance().ipSecAllocateSpi(resourceId, direction, localAddress, remoteAddress, requestedSpi); android.util.Log.d(com.android.server.IpSecService.TAG, ("Allocated SPI " + spi)); mSpiRecords.put(resourceId, new com.android.server.IpSecService.SpiRecord(resourceId, binder, direction, localAddress, remoteAddress, spi)); } } catch (android.os.ServiceSpecificException e) { return new android.net.IpSecSpiResponse(IpSecManager.Status.SPI_UNAVAILABLE, android.net.IpSecManager.INVALID_RESOURCE_ID, spi); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return new android.net.IpSecSpiResponse(IpSecManager.Status.OK, resourceId, spi); }
@java.lang.Override protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return com.android.server.IpSecService.mUserQuotaTracker.getUserRecord(this.uid).socket; }
public void testRecorderVideo() throws java.lang.Exception { if (!(hasCamera())) { return; } mCamera = android.hardware.Camera.open(0); setSupportedResolution(mCamera); mCamera.unlock(); mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA); mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT); mMediaRecorder.setOutputFile(OUTPUT_PATH2); mMediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.DEFAULT); mMediaRecorder.setPreviewDisplay(mActivity.getSurfaceHolder().getSurface()); mMediaRecorder.setVideoSize(android.media.cts.MediaRecorderTest.mVideoWidth, android.media.cts.MediaRecorderTest.mVideoHeight); java.io.FileOutputStream fos = new java.io.FileOutputStream(OUTPUT_PATH2); java.io.FileDescriptor fd = fos.getFD(); mMediaRecorder.setOutputFile(fd); long maxFileSize = (android.media.cts.MediaRecorderTest.MAX_FILE_SIZE) * 20; recordMedia(maxFileSize, mOutFile2); assertFalse(checkLocationInFile(OUTPUT_PATH2)); fos.close(); }
com.android.bluetooth.gatt.AppScanStats.LastScan getScanFromScannerId(int scannerId) { java.util.ListIterator<com.android.bluetooth.gatt.AppScanStats.LastScan> iter = lastScans.listIterator(lastScans.size()); com.android.bluetooth.gatt.AppScanStats.LastScan ret = null; while (iter.hasPrevious()) { ret = iter.previous(); if ((ret.scannerId) == scannerId) { return ret; } } return null; }
boolean isScanning() { java.util.Iterator<com.android.bluetooth.gatt.AppScanStats.LastScan> iter = lastScans.iterator(); while (iter.hasNext()) { if ((iter.next().stopped) == false) { return true; } } return false; }
synchronized void recordScanStop(int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan existingScan = getScanFromScannerId(scannerId); if ((existingScan != null) && ((existingScan.stopped) == true)) { return; } (this.scansStopped)++; stopTime = android.os.SystemClock.elapsedRealtime(); com.android.bluetooth.gatt.AppScanStats.LastScan scan = getScanFromScannerId(scannerId); if (scan == null) { return; } long scanDuration = (stopTime) - (scan.timestamp); scan.stopped = true; scan.duration = scanDuration; com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_STOP); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); gattService.addScanEvent(scanEvent); if (!(isScanning())) { try { long totalDuration = (stopTime) - (mScanStartTime); mTotalScanTime += totalDuration; minScanTime = java.lang.Math.min(totalDuration, minScanTime); maxScanTime = java.lang.Math.max(totalDuration, maxScanTime); batteryStats.noteBleScanStopped(workSource); } catch (android.os.RemoteException e) { } } }
synchronized void recordScanStart(android.bluetooth.le.ScanSettings settings, boolean filtered, int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan existingScan = getScanFromScannerId(scannerId); if ((existingScan != null) && ((existingScan.stopped) == false)) { return; } (this.scansStarted)++; startTime = android.os.SystemClock.elapsedRealtime(); com.android.bluetooth.gatt.AppScanStats.LastScan scan = new com.android.bluetooth.gatt.AppScanStats.LastScan(startTime, 0, false, false, filtered, scannerId); if (settings != null) { scan.opportunistic = (settings.getScanMode()) == (android.bluetooth.le.ScanSettings.SCAN_MODE_OPPORTUNISTIC); scan.background = ((settings.getCallbackType()) & (android.bluetooth.le.ScanSettings.CALLBACK_TYPE_FIRST_MATCH)) != 0; } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_START); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); gattService.addScanEvent(scanEvent); if (!(isScanning())) { try { mScanStartTime = startTime; batteryStats.noteBleScanStarted(workSource); } catch (android.os.RemoteException e) { } } if ((lastScans.size()) >= (com.android.bluetooth.gatt.AppScanStats.NUM_SCAN_DURATIONS_KEPT)) { removeStoppedScan(); } if ((lastScans.size()) < (com.android.bluetooth.gatt.AppScanStats.NUM_SCAN_DURATIONS_KEPT)) { lastScans.add(scan); } }
synchronized void addResult(int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan scan = getScanFromScannerId(scannerId); if (scan != null) { int batteryStatsResults = ++(scan.results); if ((batteryStatsResults % 100) == 0) { try { batteryStats.noteBleScanResults(workSource, 100); } catch (android.os.RemoteException e) { } } } (results)++; }
boolean refreshNeeded() { return (this.softTtl) < (java.lang.System.currentTimeMillis()); }
boolean isExpired() { return (this.ttl) < (java.lang.System.currentTimeMillis()); }
public java.lang.String getIsimIst(int subId) throws android.os.RemoteException { com.android.internal.telephony.Phone phone = getPhone(subId); mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, "Requires READ_PRIVILEGED_PHONE_STATE"); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimIst(); } else { return null; } }
public java.lang.String getIsimDomain(int subId) { com.android.internal.telephony.Phone phone = getPhone(subId); mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, "Requires READ_PRIVILEGED_PHONE_STATE"); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimDomain(); } else { return null; } }
public java.lang.String getIsimImpi(int subId) { com.android.internal.telephony.Phone phone = getPhone(subId); mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, "Requires READ_PRIVILEGED_PHONE_STATE"); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimImpi(); } else { return null; } }
public java.lang.String[] getIsimPcscf(int subId) throws android.os.RemoteException { com.android.internal.telephony.Phone phone = getPhone(subId); mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, "Requires READ_PRIVILEGED_PHONE_STATE"); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimPcscf(); } else { return null; } }
public java.lang.String[] getIsimImpu(int subId) { com.android.internal.telephony.Phone phone = getPhone(subId); mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, "Requires READ_PRIVILEGED_PHONE_STATE"); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimImpu(); } else { return null; } }
public java.lang.String getIsimIst() { return getIsimIst(getSubId()); }
public java.lang.String[] getIsimImpu() { return getIsimImpu(getSubId()); }
public java.lang.String getIsimImpi() { return getIsimImpi(getSubId()); }
public java.lang.String getIsimDomain() { return getIsimDomain(getSubId()); }
public java.lang.String[] getIsimPcscf() { return getIsimPcscf(getSubId()); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { final java.lang.String action = intent.getAction(); final java.lang.String iccState = intent.getStringExtra(IccCardConstants.INTENT_KEY_ICC_STATE); if (TelephonyIntents.ACTION_SIM_STATE_CHANGED.equals(action)) { if (intent.getBooleanExtra(TelephonyIntents.EXTRA_REBROADCAST_ON_UNLOCK, false)) { return; } if (IccCardConstants.INTENT_VALUE_ICC_LOADED.equals(iccState)) { sendEmptyMessage(com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_RESET); java.lang.String mobileData = Settings.Global.MOBILE_DATA; if ((android.telephony.TelephonyManager.getDefault().getSimCount()) != 1) { mobileData = mobileData + (mPhone.getSubId()); } mSettingsObserver.observe(Settings.Global.getUriFor(mobileData), com.android.internal.telephony.CarrierActionAgent.EVENT_MOBILE_DATA_SETTINGS_CHANGED); mSettingsObserver.observe(Settings.Global.getUriFor(Settings.Global.AIRPLANE_MODE_ON), com.android.internal.telephony.CarrierActionAgent.EVENT_APM_SETTINGS_CHANGED); } else if (IccCardConstants.INTENT_VALUE_ICC_ABSENT.equals(iccState)) { sendEmptyMessage(com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_RESET); mSettingsObserver.unobserve(); } } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCarrierActionResetOnAPM() { final android.content.Intent intent = new android.content.Intent(TelephonyIntents.ACTION_SIM_STATE_CHANGED); intent.putExtra(IccCardConstants.INTENT_KEY_ICC_STATE, IccCardConstants.INTENT_VALUE_ICC_LOADED); mContext.sendBroadcast(intent); com.android.internal.telephony.TelephonyTestUtils.waitForMs(100); org.mockito.ArgumentCaptor<android.os.Message> message = org.mockito.ArgumentCaptor.forClass(android.os.Message.class); verify(mDataActionHandler).sendMessageAtTime(message.capture(), anyLong()); assertEquals(com.android.internal.telephony.CarrierActionAgentTest.DATA_CARRIER_ACTION_EVENT, message.getValue().what); verify(mRadioActionHandler).sendMessageAtTime(message.capture(), anyLong()); assertEquals(com.android.internal.telephony.CarrierActionAgentTest.RADIO_CARRIER_ACTION_EVENT, message.getValue().what); Settings.Global.putInt(mFakeContentResolver, Settings.Global.AIRPLANE_MODE_ON, 1); mFakeContentProvider.simulateChange(Settings.Global.getUriFor(Settings.Global.AIRPLANE_MODE_ON)); com.android.internal.telephony.TelephonyTestUtils.waitForMs(200); verify(mDataActionHandler, times(2)).sendMessageAtTime(message.capture(), anyLong()); assertEquals(com.android.internal.telephony.CarrierActionAgentTest.DATA_CARRIER_ACTION_EVENT, message.getValue().what); verify(mRadioActionHandler, times(2)).sendMessageAtTime(message.capture(), anyLong()); assertEquals(com.android.internal.telephony.CarrierActionAgentTest.RADIO_CARRIER_ACTION_EVENT, message.getValue().what); }
void registerImsConnectionStateListener() { try { com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(this, android.telephony.SubscriptionManager.getDefaultVoicePhoneId()); if (imsManager != null) { imsManager.addRegistrationListener(mImsConnectionStateListener); } } catch (com.android.ims.ImsException e) { logger.error("addRegistrationListener exception=", e); } }
private void stopUSBTethering() { if (uTethered) { mConnManager.stopTethering(ConnectivityManager.TETHERING_USB); uTethered = false; mBtnStart.setEnabled(true); mRadioGroup.setFocusable(true); mTextView.setText("Stopped usb tethering"); } }
@java.lang.Override public void onTetheringStarted() { uTethered = true; }
private void startUSBTethering() { com.android.pmc.PMCMainActivity.OnStartTetheringCallback tetherCallback = new com.android.pmc.PMCMainActivity.OnStartTetheringCallback(); mConnManager.startTethering(ConnectivityManager.TETHERING_USB, true, tetherCallback); if (uTethered) { mBtnStart.setEnabled(false); mRadioGroup.setFocusable(false); mTextView.setText("Started usb tethering"); } }
public void testSetZeroDigitForPattern() { java.text.DecimalFormatSymbols decimalFormatSymbols = new java.text.DecimalFormatSymbols(); decimalFormatSymbols.setZeroDigit('a'); java.text.DecimalFormat formatter = new java.text.DecimalFormat(); formatter.setDecimalFormatSymbols(decimalFormatSymbols); formatter.applyLocalizedPattern("#.aa"); assertEquals("e.aa", formatter.format(4.5)); }
public void test_equals() { java.text.NumberFormat nf1 = java.text.NumberFormat.getInstance(); java.text.NumberFormat nf2 = java.text.NumberFormat.getInstance(); assertTrue("Objects are not equal", nf1.equals(nf2)); assertTrue("THe same Objects are not equal", nf1.equals(nf1)); nf2.setMaximumIntegerDigits(100); assertFalse("Different NumberFormat are equal", nf1.equals(nf2)); nf2.setMaximumIntegerDigits(nf1.getMaximumIntegerDigits()); assertFalse("THe same Objects are equal", nf1.equals(nf2)); nf1 = java.text.NumberFormat.getIntegerInstance(); nf2 = java.text.NumberFormat.getIntegerInstance(java.util.Locale.CHINA); assertFalse("Different NumberFormat are equal", nf1.equals(nf2)); assertFalse("Object is equal null", nf1.equals(null)); }
public void testBug15081434() throws java.lang.Exception { java.text.DecimalFormat df = ((java.text.DecimalFormat) (java.text.NumberFormat.getCurrencyInstance(java.util.Locale.US))); try { df.parse(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.applyLocalizedPattern(null); } catch (java.lang.NullPointerException unexpected) { fail(); } try { df.applyPattern(null); } catch (java.lang.NullPointerException unexpected) { fail(); } try { df.applyPattern(null); } catch (java.lang.NullPointerException unexpected) { fail(); } try { df.format(null, new java.lang.StringBuffer(), new java.text.FieldPosition(0)); fail(); } catch (java.lang.IllegalArgumentException expected) { } try { df.parse(null, new java.text.ParsePosition(0)); fail(); } catch (java.lang.NullPointerException expected) { } df.setDecimalFormatSymbols(null); try { df.setCurrency(null); fail(); } catch (java.lang.NullPointerException expected) { } df.setNegativePrefix(null); df.setNegativeSuffix(null); df.setPositivePrefix(null); df.setPositiveSuffix(null); try { df.setRoundingMode(null); fail(); } catch (java.lang.NullPointerException expected) { } }
public void test_setMaximumIntegerDigits() { java.text.NumberFormat format = java.text.NumberFormat.getInstance(); format.setMaximumIntegerDigits(2); assertEquals("Wrong result: case 1", "23", format.format(123)); format.setMaximumIntegerDigits(java.lang.Integer.MIN_VALUE); assertEquals("Wrong result: case 2", "3", format.format(123)); }
public void test_formatDouble_minimumFractionDigits() { java.text.DecimalFormat df = new java.text.DecimalFormat("###0.##", new java.text.DecimalFormatSymbols(java.util.Locale.US)); df.setMinimumFractionDigits(4); assertEquals(4, df.getMinimumFractionDigits()); assertEquals("1.2300", df.format(1.23)); df.setMaximumFractionDigits(2); assertEquals(2, df.getMinimumFractionDigits()); assertEquals("456.0000", df.format(456)); df = new java.text.DecimalFormat("##0.#", new java.text.DecimalFormatSymbols(java.util.Locale.US)); df.setMinimumFractionDigits(30); assertEquals("0.000000000000000000000000000000", df.format(0.0)); assertEquals("-0.000000000000000000000000000000", df.format((-0.0))); assertEquals("1.000000000000000000000000000000", df.format(1.0)); assertEquals("-1.000000000000000000000000000000", df.format((-1.0))); }
public void test_applyLocalizedPattern() throws java.lang.Exception { java.text.DecimalFormat format = new java.text.DecimalFormat(); format.applyLocalizedPattern("#.#"); assertEquals("Wrong pattern 1", "0.#", format.toLocalizedPattern()); format.applyLocalizedPattern("#."); assertEquals("Wrong pattern 2", "0.", format.toLocalizedPattern()); format.applyLocalizedPattern("#"); assertEquals("Wrong pattern 3", "0", format.toLocalizedPattern()); format.applyLocalizedPattern(".#"); assertEquals("Wrong pattern 4", "#.0", format.toLocalizedPattern()); try { format.applyLocalizedPattern("'#,#:#0.0#;(#)"); fail(); } catch (java.lang.IllegalArgumentException expected) { } try { format.applyLocalizedPattern(((java.lang.String) (null))); } catch (java.lang.NullPointerException unexpected) { fail(); } }
public void test_setPositiveSuffix() throws java.lang.Exception { java.text.DecimalFormat format = new java.text.DecimalFormat(); assertEquals("", format.getPositiveSuffix()); format.setPositiveSuffix("PosSfx"); assertEquals("PosSfx", format.getPositiveSuffix()); assertTrue(((format.parse("123.45PosSfx").doubleValue()) == 123.45)); format.setPositiveSuffix(""); assertEquals("", format.getPositiveSuffix()); format.setPositiveSuffix(null); assertNotNull(format.getPositiveSuffix()); }
public void test_setCurrency() throws java.lang.Exception { java.text.NumberFormat nf = java.text.NumberFormat.getCurrencyInstance(java.util.Locale.US); java.util.Currency amd = java.util.Currency.getInstance("AMD"); assertEquals(0, amd.getDefaultFractionDigits()); nf.setCurrency(amd); assertEquals(2, nf.getMinimumFractionDigits()); assertEquals(2, nf.getMaximumFractionDigits()); assertEquals("AMD50.00", nf.format(50.0)); nf.setMaximumFractionDigits(amd.getDefaultFractionDigits()); assertEquals("AMD50.00", nf.format(50.0)); nf = java.text.NumberFormat.getCurrencyInstance(java.util.Locale.US); nf.setCurrency(java.util.Currency.getInstance("EUR")); assertEquals("€50.00", nf.format(50.0)); nf.setCurrency(java.util.Currency.getInstance("JPY")); assertEquals("¥50.00", nf.format(50.0)); nf.setCurrency(java.util.Currency.getInstance("CHF")); assertEquals("CHF50.00", nf.format(50.0)); }
public void testConstructor_stringAndSymbols() { java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(java.util.Locale.CANADA); java.text.DecimalFormat format1 = new java.text.DecimalFormat("'$'1000.0000", dfs); java.text.DecimalFormat format2 = new java.text.DecimalFormat(); format2.applyPattern("'$'1000.0000"); format2.setDecimalFormatSymbols(dfs); assertTrue("Constructed format did not match applied format object", format2.equals(format1)); assertTrue("Constructed format did not match applied format object", (!(format1.equals(new java.text.DecimalFormat("'$'1000.0000", new java.text.DecimalFormatSymbols(java.util.Locale.CHINA)))))); try { new java.text.DecimalFormat("'$'1000.0000", ((java.text.DecimalFormatSymbols) (null))); fail(); } catch (java.lang.NullPointerException expected) { } try { new java.text.DecimalFormat(null, new java.text.DecimalFormatSymbols()); } catch (java.lang.NullPointerException unexpected) { fail(); } try { new java.text.DecimalFormat(null, ((java.text.DecimalFormatSymbols) (null))); fail(); } catch (java.lang.NullPointerException expected) { } try { new java.text.DecimalFormat("$'", new java.text.DecimalFormatSymbols()); fail(); } catch (java.lang.IllegalArgumentException expected) { } }
public void test_setNegativeSuffix() throws java.lang.Exception { java.text.DecimalFormat format = new java.text.DecimalFormat(); assertEquals("", format.getNegativeSuffix()); format.setNegativeSuffix("NegSfx"); assertEquals("NegSfx", format.getNegativeSuffix()); assertTrue(((format.parse("123.45NegSfx").doubleValue()) == (-123.45))); format.setNegativeSuffix(""); assertEquals("", format.getNegativeSuffix()); format.setNegativeSuffix(null); assertNotNull(format.getNegativeSuffix()); }
public void test_positiveExponentSign() throws java.lang.Exception { format.applyPattern("0.###E+0"); assertEquals("1E+2", format.format(100)); assertEquals("1E-2", format.format(0.01)); assertEquals(100, format.parse("1E+2").intValue()); assertEquals(0.01F, format.parse("1E-2").floatValue()); format.applyPattern("0.###E0 m/s"); assertEquals("1E2 m/s", format.format(100)); assertEquals(100, format.parse("1E2 m/s").intValue()); format.applyPattern("00.###E0"); assertEquals("12.3E-4", format.format(0.00123)); assertEquals(0.00123F, format.parse("12.3E-4").floatValue()); format.applyPattern("##0.####E0"); assertEquals("12.345E3", format.format(12345)); assertEquals(12345, format.parse("12.345E3").intValue()); try { format.applyPattern("#,##0.##E0"); } catch (java.lang.IllegalArgumentException e) { fail(("unexpected IllegalArgumentException was thrown for " + "pattern \"#,##0.##E0\".")); } }
public void test_parse_withMultiplier() { java.text.DecimalFormat format = ((java.text.DecimalFormat) (java.text.NumberFormat.getNumberInstance(java.util.Locale.ENGLISH))); java.lang.Number result; format.setMultiplier(100); result = format.parse("9223372036854775807", new java.text.ParsePosition(0)); assertEquals(("Wrong result type multiplier 100: " + result), java.lang.Long.class, result.getClass()); assertEquals(("Wrong result for multiplier 100: " + result), 9.223372036854776E16, result.doubleValue()); format.setMultiplier(1000); result = format.parse("9223372036854775807", new java.text.ParsePosition(0)); assertEquals(("Wrong result type multiplier 1000: " + result), java.lang.Long.class, result.getClass()); assertEquals(("Wrong result for multiplier 1000: " + result), 9.223372036854776E15, result.doubleValue()); format.setMultiplier(10000); result = format.parse("9223372036854775807", new java.text.ParsePosition(0)); assertEquals(("Wrong result type multiplier 10000: " + result), java.lang.Double.class, result.getClass()); assertEquals(("Wrong result for multiplier 10000: " + result), 9.223372036854776E14, result.doubleValue()); }
public void test_sigDigitPatterns() throws java.lang.Exception { java.text.DecimalFormat format = ((java.text.DecimalFormat) (java.text.NumberFormat.getInstance(java.util.Locale.US))); format.applyPattern("@@@"); assertEquals("sigDigit doesn't work", "12300", format.format(12345)); assertEquals("sigDigit doesn't work", "0.123", format.format(0.12345)); format.applyPattern("@@##"); assertEquals("sigDigit doesn't work", "3.142", format.format(3.14159)); assertEquals("sigDigit doesn't work", "1.23", format.format(1.23004)); format.applyPattern("@@###E0"); assertEquals("1.23E1", format.format(12.3)); format.applyPattern("0.0###E0"); assertEquals("1.23E1", format.format(12.3)); try { format.applyPattern("@00"); fail(("expected IllegalArgumentException was not thrown for " + "pattern \"@00\".")); } catch (java.lang.IllegalArgumentException e) { } try { format.applyPattern("@.###"); } catch (java.lang.IllegalArgumentException e) { fail(("unexpected IllegalArgumentException was thrown for " + "pattern \"@.###\".")); } }
public void test_setNegativePrefix() throws java.lang.Exception { java.text.DecimalFormat format = new java.text.DecimalFormat(); assertEquals("-", format.getNegativePrefix()); format.setNegativePrefix("NegPrf"); assertEquals("NegPrf", format.getNegativePrefix()); assertTrue(((format.parse("NegPrf123.45").doubleValue()) == (-123.45))); format.setNegativePrefix(""); assertEquals("", format.getNegativePrefix()); format.setNegativePrefix(null); assertNotNull(format.getNegativePrefix()); }
public void testConstructor_string() { java.text.DecimalFormat format = new java.text.DecimalFormat("'$'0000.0000"); java.text.DecimalFormat format1 = new java.text.DecimalFormat(); format1.applyPattern("'$'0000.0000"); assertTrue("Constructed format did not match applied format object", format.equals(format1)); new java.text.DecimalFormat("####.##"); new java.text.DecimalFormat("######.######"); new java.text.DecimalFormat("000000.000000"); new java.text.DecimalFormat("######.000000"); new java.text.DecimalFormat("000000.######"); new java.text.DecimalFormat(" ###.###"); new java.text.DecimalFormat("$#####.######"); new java.text.DecimalFormat("$$####.######"); new java.text.DecimalFormat("%#,##,###,####"); new java.text.DecimalFormat("#,##0.00;(#,##0.00)"); try { new java.text.DecimalFormat(null); } catch (java.lang.NullPointerException unexpected) { fail(); } try { new java.text.DecimalFormat("%#,##,###,####'"); fail(); } catch (java.lang.IllegalArgumentException expected) { } try { new java.text.DecimalFormat("#.##0.00"); fail(); } catch (java.lang.IllegalArgumentException expected) { } }
public void test_applyPattern() { java.text.DecimalFormat format = new java.text.DecimalFormat("#.#"); assertEquals("Wrong pattern 1", "0.#", format.toPattern()); format = new java.text.DecimalFormat("#."); assertEquals("Wrong pattern 2", "0.", format.toPattern()); format = new java.text.DecimalFormat("#"); assertEquals("Wrong pattern 3", "0", format.toPattern()); format = new java.text.DecimalFormat(".#"); assertEquals("Wrong pattern 4", "#.0", format.toPattern()); format = new java.text.DecimalFormat(); format.setMinimumIntegerDigits(0); format.setMinimumFractionDigits(0); format.setMaximumFractionDigits(0); format.applyPattern("00.0#"); assertEquals("Minimum integer digits not set", 2, format.getMinimumIntegerDigits()); assertEquals("Minimum fraction digits not set", 1, format.getMinimumFractionDigits()); assertEquals("Maximum fraction digits not set", 2, format.getMaximumFractionDigits()); try { format.applyPattern(null); } catch (java.lang.NullPointerException unexpected) { fail(); } try { format.applyPattern("%#,##,###,####'"); fail(); } catch (java.lang.IllegalArgumentException expected) { } try { format.applyPattern("#.##0.00"); fail(); } catch (java.lang.IllegalArgumentException expected) { } }
public void test_formatLong_minimumIntegerDigits() { java.text.DecimalFormat df = new java.text.DecimalFormat("###0.##", new java.text.DecimalFormatSymbols(java.util.Locale.US)); df.setMinimumIntegerDigits(3); assertEquals(3, df.getMinimumIntegerDigits()); assertEquals("012", df.format(12)); df.setMaximumIntegerDigits(2); assertEquals(2, df.getMinimumIntegerDigits()); assertEquals("000.7", df.format(0.7)); }
public void test_setPositivePrefix() throws java.lang.Exception { java.text.DecimalFormat format = new java.text.DecimalFormat(); assertEquals("", format.getPositivePrefix()); format.setPositivePrefix("PosPrf"); assertEquals("PosPrf", format.getPositivePrefix()); assertTrue(((format.parse("PosPrf123.45").doubleValue()) == 123.45)); format.setPositivePrefix(""); assertEquals("", format.getPositivePrefix()); format.setPositivePrefix(null); assertNotNull(format.getPositivePrefix()); }
public void testRunNormalInputOnWindows() throws com.android.tradefed.device.DeviceNotAvailableException, java.lang.IllegalArgumentException { java.lang.String originalName = java.lang.System.getProperty(VtsPythonUtil.OS_NAME); java.lang.System.setProperty(VtsPythonUtil.OS_NAME, VtsPythonUtil.WINDOWS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice()); mTest.setRunUtil(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockRunUtil("where", "python.exe", CommandStatus.SUCCESS)); try { mTest.run(mMockInvocationListener); } finally { java.lang.System.setProperty(VtsPythonUtil.OS_NAME, originalName); } }
public boolean LoadVendorConfig(com.android.tradefed.build.IBuildInfo buildInfo) throws java.lang.RuntimeException { java.util.Map<java.lang.String, java.lang.String> attrs = buildInfo.getBuildAttributes(); if (attrs.containsKey(com.android.tradefed.util.VtsVendorConfigFileUtil.KEY_VENDOR_TEST_CONFIG_DEFAULT_TYPE)) { mDefaultType = attrs.get(com.android.tradefed.util.VtsVendorConfigFileUtil.KEY_VENDOR_TEST_CONFIG_DEFAULT_TYPE); } mVendorConfigFilePath = attrs.get(com.android.tradefed.util.VtsVendorConfigFileUtil.KEY_VENDOR_TEST_CONFIG_FILE_PATH); return LoadVendorConfig(mDefaultType, mVendorConfigFilePath); }
private boolean dirExistsAndHaveReadAccess(java.lang.String path) { java.io.File pathDir = new java.io.File(path); if ((!(pathDir.exists())) || (!(pathDir.isDirectory()))) { com.android.tradefed.log.LogUtil.CLog.i("Directory %s does not exist.", pathDir); return false; } if (!(com.android.tradefed.util.VtsPythonUtil.isOnWindows())) { com.android.tradefed.util.CommandResult c = mRunUtil.runTimedCmd(((com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.BASE_TIMEOUT) * 5), "ls", path); if ((c.getStatus()) != (com.android.tradefed.util.CommandStatus.SUCCESS)) { com.android.tradefed.log.LogUtil.CLog.i(java.lang.String.format("Failed to read dir: %s. Result %s. stdout: %s, stderr: %s", path, c.getStatus(), c.getStdout(), c.getStderr())); return false; } return true; } else { try { java.lang.String[] pathDirList = pathDir.list(); if (pathDirList == null) { com.android.tradefed.log.LogUtil.CLog.i("Failed to read dir: %s. Please check access permission.", pathDir); return false; } } catch (java.lang.SecurityException e) { com.android.tradefed.log.LogUtil.CLog.i(java.lang.String.format("Failed to read dir %s with SecurityException %s", pathDir, e)); return false; } return true; } }
private void activate() { java.io.File binDir = new java.io.File(mVenvDir, (com.android.tradefed.util.VtsPythonUtil.isOnWindows() ? "Scripts" : "bin")); mRunUtil.setWorkingDir(binDir); java.lang.String path = java.lang.System.getenv(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PATH); mRunUtil.setEnvVariable(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PATH, ((binDir + (java.io.File.pathSeparator)) + path)); java.io.File pipFile = new java.io.File(binDir, com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PIP); pipFile.setExecutable(true); mPip = pipFile.getAbsolutePath(); }
public static java.lang.String getSymbolsDirectoryKey(com.android.tradefed.device.ITestDevice device) { return java.lang.String.format(com.android.tradefed.targetprep.VtsSancovPreparer.SYMBOLS_DIRECTORY_KEY, device.getSerialNumber()); }
@java.lang.Override public void tearDown(com.android.tradefed.device.ITestDevice device, com.android.tradefed.build.IBuildInfo buildInfo, java.lang.Throwable e) throws com.android.tradefed.device.DeviceNotAvailableException { if ((mCoverageDirectory) != null) { com.android.tradefed.util.FileUtil.recursiveDelete(mCoverageDirectory); device.executeShellCommand(("rm -r " + (com.android.tradefed.targetprep.VtsSancovPreparer.SANCOV_CONFIGURE_DST))); } }
@java.lang.Override public int hashCode() { return ((address.hashCode()) + (11 * (prefixLength))) + (19 * (flags)); }
@org.junit.Test public void testHashCode() { android.net.IpPrefix p; int oldCode = -1; java.util.Random random = new java.util.Random(); for (int i = 0; i < 100; i++) { if (random.nextBoolean()) { byte[] b = new byte[4]; random.nextBytes(b); p = new android.net.IpPrefix(b, random.nextInt(33)); assertNotEquals(oldCode, p.hashCode()); oldCode = p.hashCode(); } else { byte[] b = new byte[16]; random.nextBytes(b); p = new android.net.IpPrefix(b, random.nextInt(129)); assertNotEquals(oldCode, p.hashCode()); oldCode = p.hashCode(); } } }
private static java.lang.String connectDetail(java.net.InetAddress inetAddress, int port, int timeoutMs, android.system.ErrnoException cause) { java.lang.String detail = ((("failed to connect to " + inetAddress) + " (port ") + port) + ")"; if (timeoutMs > 0) { detail += (" after " + timeoutMs) + "ms"; } if (cause != null) { detail += ": " + (cause.getMessage()); } return detail; }
public static boolean isConnected(java.io.FileDescriptor fd, java.net.InetAddress inetAddress, int port, int timeoutMs, int remainingTimeoutMs) throws java.io.IOException { android.system.ErrnoException cause; try { android.system.StructPollfd[] pollFds = new android.system.StructPollfd[]{ new android.system.StructPollfd() }; pollFds[0].fd = fd; pollFds[0].events = ((short) (POLLOUT)); int rc = Libcore.os.poll(pollFds, remainingTimeoutMs); if (rc == 0) { return false; } int connectError = Libcore.os.getsockoptInt(fd, libcore.io.SOL_SOCKET, libcore.io.SO_ERROR); if (connectError == 0) { return true; } throw new android.system.ErrnoException("isConnected", connectError); } catch (android.system.ErrnoException errnoException) { if (!(fd.valid())) { throw new java.net.SocketException("Socket closed"); } cause = errnoException; } java.lang.String detail = libcore.io.IoBridge.connectDetail(inetAddress, port, timeoutMs, cause); if ((cause.errno) == (ETIMEDOUT)) { throw new java.net.SocketTimeoutException(detail, cause); } throw new java.net.ConnectException(detail, cause); }
private static void connectErrno(java.io.FileDescriptor fd, java.net.InetAddress inetAddress, int port, int timeoutMs) throws android.system.ErrnoException, java.io.IOException { if (timeoutMs == 0) { Libcore.os.connect(fd, inetAddress, port); return; } libcore.io.IoUtils.setBlocking(fd, false); long finishTimeNanos = (java.lang.System.nanoTime()) + (java.util.concurrent.TimeUnit.MILLISECONDS.toNanos(timeoutMs)); try { Libcore.os.connect(fd, inetAddress, port); libcore.io.IoUtils.setBlocking(fd, true); return; } catch (android.system.ErrnoException errnoException) { if ((errnoException.errno) != (EINPROGRESS)) { throw errnoException; } } int remainingTimeoutMs; do { remainingTimeoutMs = ((int) (java.util.concurrent.TimeUnit.NANOSECONDS.toMillis((finishTimeNanos - (java.lang.System.nanoTime()))))); if (remainingTimeoutMs <= 0) { throw new java.net.SocketTimeoutException(libcore.io.IoBridge.connectDetail(inetAddress, port, timeoutMs, null)); } } while (!(libcore.io.IoBridge.isConnected(fd, inetAddress, port, timeoutMs, remainingTimeoutMs)) ); libcore.io.IoUtils.setBlocking(fd, true); }
public static int getSocketLocalPort(java.io.FileDescriptor fd) throws java.net.SocketException { try { java.net.SocketAddress sa = Libcore.os.getsockname(fd); java.net.InetSocketAddress isa = ((java.net.InetSocketAddress) (sa)); return isa.getPort(); } catch (android.system.ErrnoException errnoException) { throw errnoException.rethrowAsSocketException(); } }
public static java.net.InetAddress getSocketLocalAddress(java.io.FileDescriptor fd) throws java.net.SocketException { try { java.net.SocketAddress sa = Libcore.os.getsockname(fd); java.net.InetSocketAddress isa = ((java.net.InetSocketAddress) (sa)); return isa.getAddress(); } catch (android.system.ErrnoException errnoException) { throw errnoException.rethrowAsSocketException(); } }
public static void connect(java.io.FileDescriptor fd, java.net.InetAddress inetAddress, int port, int timeoutMs) throws java.net.SocketException, java.net.SocketTimeoutException { try { libcore.io.IoBridge.connectErrno(fd, inetAddress, port, timeoutMs); } catch (android.system.ErrnoException errnoException) { throw new java.net.ConnectException(libcore.io.IoBridge.connectDetail(inetAddress, port, timeoutMs, errnoException), errnoException); } catch (java.net.SocketException ex) { throw ex; } catch (java.net.SocketTimeoutException ex) { throw ex; } catch (java.io.IOException ex) { throw new java.net.SocketException(ex); } }
private boolean doTestDragAndDrop(java.lang.String sourceMode, java.lang.String targetMode, java.lang.String expectedDropResult) throws java.lang.Exception { if (!(supportsDragAndDrop())) { return false; } if (!(supportsMultiWindowMode())) { return false; } if (supportsSplitScreenMultiWindow()) { launchDockedActivity(mSourcePackageName, android.wm.cts.CrossAppDragAndDropTests.SOURCE_ACTIVITY_NAME, sourceMode); launchFullscreenActivity(mTargetPackageName, android.wm.cts.CrossAppDragAndDropTests.TARGET_ACTIVITY_NAME, targetMode); } else if (supportsFreeformMultiWindow()) { android.wm.cts.CrossAppDragAndDropTests.Point displaySize = getDisplaySize(); launchFreeformActivity(mSourcePackageName, android.wm.cts.CrossAppDragAndDropTests.SOURCE_ACTIVITY_NAME, sourceMode, displaySize, true); launchFreeformActivity(mTargetPackageName, android.wm.cts.CrossAppDragAndDropTests.TARGET_ACTIVITY_NAME, targetMode, displaySize, false); } else { return false; } clearLogs(); injectInput(getWindowCenter(getComponentName(mSourcePackageName, android.wm.cts.CrossAppDragAndDropTests.SOURCE_ACTIVITY_NAME)), getWindowCenter(getComponentName(mTargetPackageName, android.wm.cts.CrossAppDragAndDropTests.TARGET_ACTIVITY_NAME)), android.wm.cts.CrossAppDragAndDropTests.SWIPE_DURATION_MS); mResults = getLogResults(android.wm.cts.CrossAppDragAndDropTests.TARGET_LOG_TAG); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DROP_RESULT, expectedDropResult); return true; }
protected boolean supportsMultiWindowMode() { if (!(android.server.cts.ActivityManagerTestBase.mConfigLoaded)) { try { executeShellCommand((("am start -n " + "android.server.app/.") + (SUPPORT_OBSERVER))); waitForResume("android.server.app", SUPPORT_OBSERVER); java.util.Map map = getLogResults(SUPPORT_OBSERVER); java.lang.String value = ((java.lang.String) (map.get(RESULT_KEY_HEAD))); if ((value != null) && (value.equals("OK"))) { android.server.cts.ActivityManagerTestBase.mConfigLoaded = true; android.server.cts.ActivityManagerTestBase.mSupportMultiWindow = !(map.get("config_supportsMultiWindow").equals("false")); } executeShellCommand(android.server.cts.ActivityManagerTestBase.AM_FORCE_STOP_TEST_PACKAGE); clearLogs(); } catch (java.lang.Exception e) { e.printStackTrace(); } } return android.server.cts.ActivityManagerTestBase.mSupportMultiWindow; }
protected boolean supportsMultiWindowMode() { if (!(mConfigLoaded)) { try { executeShellCommand((("am start -n " + "android.server.app/.") + (SUPPORT_OBSERVER))); waitForResume("android.server.app", android.server.cts.SUPPORT_OBSERVER); java.util.Map map = getLogResults(android.server.cts.SUPPORT_OBSERVER); java.lang.String value = ((java.lang.String) (map.get(RESULT_KEY_HEAD))); if ((value != null) && (value.equals("OK"))) { mConfigLoaded = true; mSupportMultiWindow = !(map.get("config_supportsMultiWindow").equals("false")); } executeShellCommand(android.server.cts.ActivityManagerTestBase.AM_FORCE_STOP_TEST_PACKAGE); clearLogs(); } catch (java.lang.Exception e) { e.printStackTrace(); } } return mSupportMultiWindow; }
@java.lang.Override public boolean perform() { try { semaphore.acquire(); java.lang.Thread.sleep(Main.PermitBasedWait.SLEEP_TIME); semaphore.release(); } catch (java.lang.InterruptedException ignored) { } return true; }
private static java.util.Map<Main.Operation, java.lang.Double> updateFrequencyMap(java.util.Map<Main.Operation, java.lang.Double> in, java.lang.Object lock, java.util.concurrent.Semaphore semaphore, java.lang.String arg) { java.lang.String[] split = arg.split(":"); if ((split.length) != 2) { throw new java.lang.IllegalArgumentException(("Can't split argument " + arg)); } double d; try { d = java.lang.Double.parseDouble(split[1]); } catch (java.lang.Exception e) { throw new java.lang.IllegalArgumentException(e); } if (d < 0) { throw new java.lang.IllegalArgumentException((arg + ": value must be >= 0.")); } Main.Operation op = null; if (split[0].equals("-oom")) { op = new Main.OOM(); } else if (split[0].equals("-sigquit")) { op = new Main.SigQuit(); } else if (split[0].equals("-alloc")) { op = new Main.Alloc(); } else if (split[0].equals("-largealloc")) { op = new Main.LargeAlloc(); } else if (split[0].equals("-stacktrace")) { op = new Main.StackTrace(); } else if (split[0].equals("-exit")) { op = new Main.Exit(); } else if (split[0].equals("-sleep")) { op = new Main.Sleep(); } else if (split[0].equals("-wait")) { op = new Main.Wait(lock); } else if (split[0].equals("-timedwait")) { op = new Main.TimedWait(lock); } else if (split[0].equals("-syncandwork")) { op = new Main.SyncAndWork(lock); } else if (split[0].equals("-permitbasedwait")) { op = new Main.PermitBasedWait(semaphore); } else { throw new java.lang.IllegalArgumentException(("Unknown arg " + arg)); } if (in == null) { in = new java.util.HashMap<Main.Operation, java.lang.Double>(); } in.put(op, d); return in; }
private static final java.util.Map<Main.Operation, java.lang.Double> createDefaultFrequencyMap(java.lang.Object lock, java.util.concurrent.Semaphore semaphore) { java.util.Map<Main.Operation, java.lang.Double> frequencyMap = new java.util.HashMap<Main.Operation, java.lang.Double>(); frequencyMap.put(new Main.OOM(), 0.005); frequencyMap.put(new Main.SigQuit(), 0.095); frequencyMap.put(new Main.Alloc(), 0.225); frequencyMap.put(new Main.LargeAlloc(), 0.05); frequencyMap.put(new Main.StackTrace(), 0.1); frequencyMap.put(new Main.Exit(), 0.225); frequencyMap.put(new Main.Sleep(), 0.125); frequencyMap.put(new Main.TimedWait(lock), 0.05); frequencyMap.put(new Main.Wait(lock), 0.075); frequencyMap.put(new Main.PermitBasedWait(semaphore), 0.05); return frequencyMap; }
@java.lang.Override public void setUidCleartextNetworkPolicy(int uid, int policy) { if ((android.os.Binder.getCallingUid()) != uid) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, com.android.server.NetworkManagementService.TAG); } synchronized(mQuotaLock) { final int oldPolicy = mUidCleartextPolicy.get(uid, StrictMode.NETWORK_POLICY_ACCEPT); if (oldPolicy == policy) { return; } if (!(mStrictEnabled)) { mUidCleartextPolicy.put(uid, policy); return; } if ((oldPolicy != (android.os.StrictMode.NETWORK_POLICY_ACCEPT)) && (policy != (android.os.StrictMode.NETWORK_POLICY_ACCEPT))) { applyUidCleartextNetworkPolicy(uid, StrictMode.NETWORK_POLICY_ACCEPT); } } applyUidCleartextNetworkPolicy(uid, policy); }
private boolean multiBandScanResults(android.net.wifi.WifiInfo wifiInfo) { android.net.wifi.WifiConfiguration currentConfiguration = mWifiConfigManager.getConfiguredNetwork(wifiInfo.getNetworkId()); if (currentConfiguration == null) return false; com.android.server.wifi.ScanDetailCache scanDetailCache = mWifiConfigManager.getScanDetailCacheForNetwork(wifiInfo.getNetworkId()); if (scanDetailCache == null) return false; currentConfiguration.setVisibility(scanDetailCache.getVisibility(com.android.server.wifi.WifiScoreReport.SCAN_CACHE_VISIBILITY_MS)); if ((currentConfiguration.visibility) == null) return false; if ((currentConfiguration.visibility.rssi24) == (android.net.wifi.WifiConfiguration.INVALID_RSSI)) return false; return (currentConfiguration.visibility.rssi24) >= ((currentConfiguration.visibility.rssi5) - (com.android.server.wifi.WifiScoreReport.SCAN_CACHE_COUNT_PENALTY)); }
private boolean isHomeNetwork(android.net.wifi.WifiInfo wifiInfo) { WifiConfiguration currentConfiguration = mWifiConfigManager.getConfiguredNetwork(wifiInfo.getNetworkId()); if (currentConfiguration == null) return false; if ((currentConfiguration.allowedKeyManagement.cardinality()) != 1) return false; if (!(currentConfiguration.allowedKeyManagement.get(WPA_PSK))) { return false; } com.android.server.wifi.ScanDetailCache scanDetailCache = mWifiConfigManager.getScanDetailCacheForNetwork(wifiInfo.getNetworkId()); if (scanDetailCache == null) return false; return (scanDetailCache.size()) <= (com.android.server.wifi.WifiScoreReport.HOME_VISIBLE_NETWORK_MAX_COUNT); }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); setUpResources(mResources); WifiConfiguration config = new WifiConfiguration(); config.SSID = "nooooooooooo"; config.allowedKeyManagement.set(NONE); config.hiddenSSID = false; m5GHz = false; doAnswer(new android.app.test.MockAnswerUtil.AnswerWithArguments() { public boolean answer() { return !(m5GHz); } }).when(mWifiInfo).is24GHz(); doAnswer(new android.app.test.MockAnswerUtil.AnswerWithArguments() { public boolean answer() { return m5GHz; } }).when(mWifiInfo).is5GHz(); when(mWifiConfigManager.getSavedNetworks()).thenReturn(java.util.Arrays.asList(config)); when(mWifiConfigManager.getConfiguredNetwork(anyInt())).thenReturn(config); mWifiConfiguration = config; int maxSize = 10; int trimSize = 5; mScanDetailCache = new com.android.server.wifi.ScanDetailCache(config, maxSize, trimSize); when(mWifiConfigManager.getScanDetailCacheForNetwork(anyInt())).thenReturn(mScanDetailCache); when(mContext.getResources()).thenReturn(mResources); mWifiScoreReport = new com.android.server.wifi.WifiScoreReport(mContext, mWifiConfigManager); }
@org.junit.Test public void badLinkspeedCounter() throws java.lang.Exception { when(mWifiInfo.getRssi()).thenReturn((-123)); when(mWifiInfo.getLinkSpeed()).thenReturn(1); m5GHz = false; assertFalse(mWifiScoreReport.isLastReportValid()); mWifiScoreReport.enableVerboseLogging(true); assertEquals(0, mWifiScoreReport.getLastBadLinkspeedcount()); mWifiScoreReport.calculateAndReportScore(mWifiInfo, null, 0, mWifiMetrics); assertEquals(1, mWifiScoreReport.getLastBadLinkspeedcount()); mWifiScoreReport.calculateAndReportScore(mWifiInfo, null, 0, mWifiMetrics); assertEquals(2, mWifiScoreReport.getLastBadLinkspeedcount()); mWifiScoreReport.calculateAndReportScore(mWifiInfo, null, 0, mWifiMetrics); assertEquals(3, mWifiScoreReport.getLastBadLinkspeedcount()); mWifiScoreReport.calculateAndReportScore(mWifiInfo, null, 1, mWifiMetrics); mWifiScoreReport.calculateAndReportScore(mWifiInfo, null, 0, mWifiMetrics); mWifiScoreReport.calculateAndReportScore(mWifiInfo, null, 1, mWifiMetrics); mWifiScoreReport.calculateAndReportScore(mWifiInfo, null, 0, mWifiMetrics); mWifiScoreReport.calculateAndReportScore(mWifiInfo, null, 0, mWifiMetrics); mWifiScoreReport.calculateAndReportScore(mWifiInfo, null, 0, mWifiMetrics); assertEquals(6, mWifiScoreReport.getLastBadLinkspeedcount()); verify(mWifiMetrics, times(9)).incrementWifiScoreCount(anyInt()); verify(mWifiInfo, atLeast(9)).is24GHz(); assertTrue(mWifiScoreReport.isLastReportValid()); mWifiScoreReport.reset(); assertEquals(0, mWifiScoreReport.getLastBadLinkspeedcount()); }
@org.junit.Test public void giveUpOnBadRssiWhenDataIsNotMoving() throws java.lang.Exception { when(mWifiInfo.getRssi()).thenReturn((-100)); when(mWifiInfo.getLinkSpeed()).thenReturn(6); m5GHz = true; mWifiScoreReport.enableVerboseLogging(true); mWifiInfo.txSuccessRate = 0.1; mWifiInfo.rxSuccessRate = 0.1; for (int i = 0; i < 10; i++) { mWifiScoreReport.calculateAndReportScore(mWifiInfo, mNetworkAgent, 0, mWifiMetrics); java.lang.String report = mWifiScoreReport.getLastReport(); assertTrue(report.contains(" br ")); } assertTrue(mWifiScoreReport.isLastReportValid()); int score = fishScoreFromReportString(mWifiScoreReport.getLastReport()); assertTrue((score < (com.android.server.wifi.WifiScoreReportTest.CELLULAR_THRESHOLD_SCORE))); verify(mNetworkAgent, atLeast(1)).sendNetworkScore(score); }
@org.junit.Test public void allowLowRssiIfDataIsMoving() throws java.lang.Exception { when(mWifiInfo.getRssi()).thenReturn((-80)); when(mWifiInfo.getLinkSpeed()).thenReturn(6); m5GHz = false; mWifiInfo.txSuccessRate = 5.1; mWifiInfo.rxSuccessRate = 5.1; for (int i = 0; i < 10; i++) { mWifiScoreReport.calculateAndReportScore(mWifiInfo, mNetworkAgent, 0, mWifiMetrics); } assertTrue(mWifiScoreReport.isLastReportValid()); int score = fishScoreFromReportString(mWifiScoreReport.getLastReport()); assertTrue((score > (com.android.server.wifi.WifiScoreReportTest.CELLULAR_THRESHOLD_SCORE))); }
@org.junit.Before public void setUp() throws java.lang.Exception { logd("SmsNumberUtilsTest +Setup!"); super.setUp(getClass().getSimpleName()); mHbpcdContentProvider = new com.android.internal.telephony.SmsNumberUtilsTest.HbpcdContentProvider(); doReturn(com.android.internal.telephony.SmsNumberUtilsTest.TMO_MCC_MNC).when(mTelephonyManager).getNetworkOperator(anyInt()); ((android.test.mock.MockContentResolver) (mContextFixture.getTestDouble().getContentResolver())).addProvider(HbpcdLookup.MccIdd.CONTENT_URI.getAuthority(), mHbpcdContentProvider); mContextFixture.getCarrierConfigBundle().putBoolean(CarrierConfigManager.KEY_SMS_CONVERT_DESTINATION_NUMBER_SUPPORT_BOOL, true); logd("SmsNumberUtilsTest -Setup!"); }
private static boolean needToConvert(com.android.internal.telephony.Phone phone) { android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (phone.getContext().getSystemService(Context.CARRIER_CONFIG_SERVICE))); if (configManager != null) { android.os.PersistableBundle bundle = configManager.getConfig(); if (bundle != null) { return bundle.getBoolean(CarrierConfigManager.KEY_SMS_CONVERT_DESTINATION_NUMBER_SUPPORT_BOOL); } } return false; }
private void doAdbReboot(final java.lang.String into) throws com.android.tradefed.device.DeviceNotAvailableException { if (!(doAdbFrameworkReboot(into))) { com.android.tradefed.device.AndroidNativeDevice.DeviceAction rebootAction = new com.android.tradefed.device.AndroidNativeDevice.DeviceAction() { @java.lang.Override public boolean run() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException { getIDevice().reboot(into); return true; } }; performDeviceAction("reboot", rebootAction, com.android.tradefed.device.AndroidNativeDevice.MAX_RETRY_ATTEMPTS); } }
@java.lang.Override public boolean processMessage(android.os.Message msg) { if ((super.processMessage(msg)) == (HANDLED)) { return HANDLED; } switch (msg.what) { case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_WIRED_HEADSET : android.telecom.Log.e(this, new java.lang.IllegalStateException(), "Wired headset should already be connected."); mAvailableRoutes |= com.android.server.telecom.CallAudioRouteStateMachine.ROUTE_WIRED_HEADSET; updateSystemAudioState(); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_BLUETOOTH : if (!(mHasUserExplicitlyLeftBluetooth)) { sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_BLUETOOTH); } else { android.telecom.Log.i(this, ("Not switching to BT route from headset because user has " + "explicitly disconnected.")); updateSystemAudioState(); } return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH : updateSystemAudioState(); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_WIRED_HEADSET : if (mWasOnSpeaker) { sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_SPEAKER); } else { sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_BASELINE_ROUTE, 1); } return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.BT_AUDIO_DISCONNECT : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_DOCK : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_DOCK : return HANDLED; default : return NOT_HANDLED; } }
@java.lang.Override public boolean processMessage(android.os.Message msg) { if ((super.processMessage(msg)) == (HANDLED)) { return HANDLED; } switch (msg.what) { case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_WIRED_HEADSET : sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_HEADSET); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_BLUETOOTH : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH : sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_BASELINE_ROUTE, 0); mWasOnSpeaker = false; return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_WIRED_HEADSET : updateSystemAudioState(); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_DOCK : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_DOCK : return HANDLED; default : return NOT_HANDLED; } }
@java.lang.Override public boolean processMessage(android.os.Message msg) { if ((super.processMessage(msg)) == (HANDLED)) { return HANDLED; } switch (msg.what) { case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_WIRED_HEADSET : sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_HEADSET); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_BLUETOOTH : if (!(mHasUserExplicitlyLeftBluetooth)) { sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_BLUETOOTH); } else { android.telecom.Log.i(this, ("Not switching to BT route from speaker because user has " + "explicitly disconnected.")); updateSystemAudioState(); } return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH : updateSystemAudioState(); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_WIRED_HEADSET : updateSystemAudioState(); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.BT_AUDIO_DISCONNECT : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_DOCK : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_DOCK : sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_BASELINE_ROUTE, 1); return HANDLED; default : return NOT_HANDLED; } }
void setAudioRoute(int route) { android.telecom.Log.v(this, "setAudioRoute, route: %s", android.telecom.CallAudioState.audioRouteToString(route)); switch (route) { case android.telecom.CallAudioState.ROUTE_BLUETOOTH : mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.USER_SWITCH_BLUETOOTH); return; case android.telecom.CallAudioState.ROUTE_SPEAKER : mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.USER_SWITCH_SPEAKER); return; case android.telecom.CallAudioState.ROUTE_WIRED_HEADSET : mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.USER_SWITCH_HEADSET); return; case android.telecom.CallAudioState.ROUTE_EARPIECE : mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.USER_SWITCH_EARPIECE); return; case android.telecom.CallAudioState.ROUTE_WIRED_OR_EARPIECE : mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.USER_SWITCH_BASELINE_ROUTE, 0); return; default : android.telecom.Log.wtf(this, "Invalid route specified: %d", route); } }
public static java.net.InetSocketAddress getLocalInetSocketAddress(java.io.FileDescriptor fd) throws java.net.SocketException { try { java.net.SocketAddress socketAddress = Libcore.os.getsockname(fd); if (!(socketAddress instanceof java.net.InetSocketAddress)) { throw new java.net.SocketException(("Unsupported address type: " + (socketAddress.getClass()))); } return ((java.net.InetSocketAddress) (socketAddress)); } catch (android.system.ErrnoException errnoException) { throw errnoException.rethrowAsSocketException(); } }
private void bindAndInitialize() throws android.telephony.mbms.MbmsException { android.telephony.mbms.MbmsUtils.startBinding(mContext, android.telephony.MbmsStreamingManager.MBMS_STREAMING_SERVICE_ACTION, new android.content.ServiceConnection() { @java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsStreamingService streamingService = IMbmsStreamingService.Stub.asInterface(service); int result; try { result = streamingService.initialize(mCallbackToApp, mSubscriptionId); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG, "Service died before initialization"); sendErrorToApp(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); android.telephony.MbmsStreamingManager.sIsInitialized = false; return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG, "Runtime exception during initialization"); sendErrorToApp(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); android.telephony.MbmsStreamingManager.sIsInitialized = false; return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { sendErrorToApp(result, "Error returned during initialization"); android.telephony.MbmsStreamingManager.sIsInitialized = false; return; } try { streamingService.asBinder().linkToDeath(mDeathRecipient, 0); } catch (android.os.RemoteException e) { sendErrorToApp(MbmsException.ERROR_MIDDLEWARE_LOST, "Middleware lost during initialization"); android.telephony.MbmsStreamingManager.sIsInitialized = false; return; } mService.set(streamingService); } @java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { android.telephony.MbmsStreamingManager.sIsInitialized = false; mService.set(null); } }); }
public void dispose() { try { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { android.util.Log.i(android.telephony.MbmsDownloadManager.LOG_TAG, "Service already dead"); return; } downloadService.dispose(mSubscriptionId); } catch (android.os.RemoteException e) { android.util.Log.i(android.telephony.MbmsDownloadManager.LOG_TAG, "Remote exception while disposing of service"); } finally { mService.set(null); android.telephony.MbmsDownloadManager.sIsInitialized = false; } }
@java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = IMbmsDownloadService.Stub.asInterface(service); int result; try { result = downloadService.initialize(mSubscriptionId, mCallback); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG, "Service died before initialization"); android.telephony.MbmsDownloadManager.sIsInitialized = false; return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG, "Runtime exception during initialization"); sendErrorToApp(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); android.telephony.MbmsDownloadManager.sIsInitialized = false; return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { sendErrorToApp(result, "Error returned during initialization"); android.telephony.MbmsDownloadManager.sIsInitialized = false; return; } try { downloadService.asBinder().linkToDeath(mDeathRecipient, 0); } catch (android.os.RemoteException e) { sendErrorToApp(MbmsException.ERROR_MIDDLEWARE_LOST, "Middleware lost during initialization"); android.telephony.MbmsDownloadManager.sIsInitialized = false; return; } mService.set(downloadService); }
@java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { android.telephony.MbmsDownloadManager.sIsInitialized = false; mService.set(null); }
private void bindAndInitialize() throws android.telephony.mbms.MbmsException { android.telephony.mbms.MbmsUtils.startBinding(mContext, android.telephony.MbmsDownloadManager.MBMS_DOWNLOAD_SERVICE_ACTION, new android.content.ServiceConnection() { @java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = IMbmsDownloadService.Stub.asInterface(service); int result; try { result = downloadService.initialize(mSubscriptionId, mCallback); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG, "Service died before initialization"); android.telephony.MbmsDownloadManager.sIsInitialized = false; return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG, "Runtime exception during initialization"); sendErrorToApp(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); android.telephony.MbmsDownloadManager.sIsInitialized = false; return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { sendErrorToApp(result, "Error returned during initialization"); android.telephony.MbmsDownloadManager.sIsInitialized = false; return; } try { downloadService.asBinder().linkToDeath(mDeathRecipient, 0); } catch (android.os.RemoteException e) { sendErrorToApp(MbmsException.ERROR_MIDDLEWARE_LOST, "Middleware lost during initialization"); android.telephony.MbmsDownloadManager.sIsInitialized = false; return; } mService.set(downloadService); } @java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { android.telephony.MbmsDownloadManager.sIsInitialized = false; mService.set(null); } }); }
public static android.telephony.MbmsDownloadManager create(android.content.Context context, android.telephony.mbms.MbmsDownloadManagerCallback listener, int subscriptionId) throws android.telephony.mbms.MbmsException { if (android.telephony.MbmsDownloadManager.sIsInitialized) { throw new android.telephony.mbms.MbmsException(MbmsException.InitializationErrors.ERROR_DUPLICATE_INITIALIZE); } android.telephony.MbmsDownloadManager mdm = new android.telephony.MbmsDownloadManager(context, listener, subscriptionId); mdm.bindAndInitialize(); android.telephony.MbmsDownloadManager.sIsInitialized = true; return mdm; }
public static android.telephony.MbmsStreamingManager create(android.content.Context context, android.telephony.mbms.MbmsStreamingManagerCallback callback, int subscriptionId) throws android.telephony.mbms.MbmsException { if (android.telephony.MbmsStreamingManager.sIsInitialized) { throw new android.telephony.mbms.MbmsException(MbmsException.InitializationErrors.ERROR_DUPLICATE_INITIALIZE); } android.telephony.MbmsStreamingManager manager = new android.telephony.MbmsStreamingManager(context, callback, subscriptionId); manager.bindAndInitialize(); android.telephony.MbmsStreamingManager.sIsInitialized = true; return manager; }
public void dispose() { try { android.telephony.mbms.vendor.IMbmsStreamingService streamingService = mService.get(); if (streamingService == null) { return; } streamingService.dispose(mSubscriptionId); } catch (android.os.RemoteException e) { } finally { mService.set(null); android.telephony.MbmsStreamingManager.sIsInitialized = false; } }
@java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsStreamingService streamingService = IMbmsStreamingService.Stub.asInterface(service); int result; try { result = streamingService.initialize(mCallbackToApp, mSubscriptionId); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG, "Service died before initialization"); sendErrorToApp(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); android.telephony.MbmsStreamingManager.sIsInitialized = false; return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG, "Runtime exception during initialization"); sendErrorToApp(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); android.telephony.MbmsStreamingManager.sIsInitialized = false; return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { sendErrorToApp(result, "Error returned during initialization"); android.telephony.MbmsStreamingManager.sIsInitialized = false; return; } try { streamingService.asBinder().linkToDeath(mDeathRecipient, 0); } catch (android.os.RemoteException e) { sendErrorToApp(MbmsException.ERROR_MIDDLEWARE_LOST, "Middleware lost during initialization"); android.telephony.MbmsStreamingManager.sIsInitialized = false; return; } mService.set(streamingService); }
private void sendErrorToApp(int errorCode, java.lang.String message) { try { mCallbackToApp.error(errorCode, message); } catch (android.os.RemoteException e) { } }
@java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { android.telephony.MbmsStreamingManager.sIsInitialized = false; mService.set(null); }
@java.lang.Override boolean build() { if (super.build()) { if (sourceFiles.isEmpty()) { return true; } java.io.File destFile = new java.io.File(destPath); if ((!(destFile.exists())) && (!(destFile.mkdirs()))) { java.lang.System.err.println("failed to create destination dir"); return false; } javax.tools.JavaCompiler compiler = javax.tools.ToolProvider.getSystemJavaCompiler(); javax.tools.StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null); try { fileManager.setLocation(javax.tools.StandardLocation.CLASS_OUTPUT, java.util.Arrays.asList(new java.io.File[]{ new java.io.File(destPath) })); fileManager.setLocation(javax.tools.StandardLocation.CLASS_PATH, java.util.Arrays.asList(classPath.split(":")).stream().map(( n) -> { return new java.io.File(n); }).collect(java.util.stream.Collectors.toList())); } catch (java.lang.Exception e) { e.printStackTrace(); return false; } java.lang.Iterable<? extends javax.tools.JavaFileObject> compilationUnits = fileManager.getJavaFileObjectsFromStrings(sourceFiles); java.util.List<java.lang.String> options = java.util.Arrays.asList(new java.lang.String[]{ "-source", "1.7", "-target", "1.7" }); java.lang.Boolean result = compiler.getTask(null, fileManager, null, null, null, compilationUnits).call(); try { fileManager.close(); } catch (java.lang.Exception e) { e.printStackTrace(); return false; } return java.lang.Boolean.TRUE.equals(result); } return false; }
public void setLeBluetoothDeviceAddress(byte[] leBluetoothDeviceAddress) { this.mLeBluetoothDeviceAddress = leBluetoothDeviceAddress; }
public void setAdvertisingData(android.bluetooth.le.AdvertiseData advertiseData) { try { mGatt.setAdvertisingData(this.mAdvertiserId, advertiseData); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
void setAdvertiserId(int advertiserId) { this.mAdvertiserId = advertiserId; }
public android.bluetooth.le.AdvertisingSetParameters.Builder setLegacyMode(boolean isLegacy) { this.mIsLegacy = isLegacy; return this; }
public void setPeriodicAdvertisingData(android.bluetooth.le.AdvertiseData periodicData) { try { mGatt.setPeriodicAdvertisingData(this.mAdvertiserId, periodicData); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
public android.bluetooth.le.AdvertisingSetParameters.Builder setIncludeTxPower(boolean includeTxPower) { this.mIncludeTxPower = includeTxPower; return this; }
public android.bluetooth.le.AdvertisingSetParameters.Builder setConnectable(boolean connectable) { this.mConnectable = connectable; return this; }
public android.bluetooth.le.AdvertisingSetParameters.Builder setAnonymous(boolean isAnonymous) { this.mIsAnonymous = isAnonymous; return this; }
public void enableAdvertising(boolean enable, int duration, int maxExtendedAdvertisingEvents) { try { mGatt.enableAdvertisingSet(this.mAdvertiserId, enable, duration, maxExtendedAdvertisingEvents); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
public android.bluetooth.le.AdvertisingSetParameters.Builder setSecondaryPhy(int secondaryPhy) { if (((secondaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_1M)) && (secondaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_2M))) && (secondaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_CODED))) { throw new java.lang.IllegalArgumentException(("bad secondaryPhy " + secondaryPhy)); } this.mSecondaryPhy = secondaryPhy; return this; }
public void setLeSecureConnectionsConfirmation(byte[] leSecureConnectionsConfirmation) { this.mLeSecureConnectionsConfirmation = leSecureConnectionsConfirmation; }
public android.bluetooth.le.AdvertisingSetParameters.Builder setInterval(int interval) { if ((interval < (android.bluetooth.le.AdvertisingSetParameters.INTERVAL_MIN)) || (interval > (android.bluetooth.le.AdvertisingSetParameters.INTERVAL_MAX))) { throw new java.lang.IllegalArgumentException(("unknown interval " + interval)); } this.mInterval = interval; return this; }
public void setLeSecureConnectionsRandom(byte[] leSecureConnectionsRandom) { this.mLeSecureConnectionsRandom = leSecureConnectionsRandom; }
public android.bluetooth.le.PeriodicAdvertisingParameters.Builder setIncludeTxPower(boolean includeTxPower) { this.mIncludeTxPower = includeTxPower; return this; }
void onLeScan(android.bluetooth.BluetoothDevice device, int rssi, byte[] scanRecord);
public android.bluetooth.le.AdvertisingSetParameters.Builder setTxPowerLevel(int txPowerLevel) { if ((txPowerLevel < (android.bluetooth.le.AdvertisingSetParameters.TX_POWER_MIN)) || (txPowerLevel > (android.bluetooth.le.AdvertisingSetParameters.TX_POWER_MAX))) { throw new java.lang.IllegalArgumentException(("unknown txPowerLevel " + txPowerLevel)); } this.mTxPowerLevel = txPowerLevel; return this; }
void onBluetoothStateChange(boolean on);
public void getOwnAddress() { try { mGatt.getOwnAddress(this.mAdvertiserId); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
public android.bluetooth.le.AdvertisingSetParameters.Builder setScannable(boolean scannable) { this.mScannable = scannable; return this; }
public android.bluetooth.le.AdvertisingSetParameters.Builder setPrimaryPhy(int primaryPhy) { if ((primaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_1M)) && (primaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_CODED))) { throw new java.lang.IllegalArgumentException(("bad primaryPhy " + primaryPhy)); } this.mPrimaryPhy = primaryPhy; return this; }
public void setAdvertisingParameters(android.bluetooth.le.AdvertisingSetParameters parameters) { try { mGatt.setAdvertisingParameters(this.mAdvertiserId, parameters); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
public void setPeriodicAdvertisingParameters(android.bluetooth.le.PeriodicAdvertisingParameters parameters) { try { mGatt.setPeriodicAdvertisingParameters(this.mAdvertiserId, parameters); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
public void setPeriodicAdvertisingEnabled(boolean enable) { try { mGatt.setPeriodicAdvertisingEnable(this.mAdvertiserId, enable); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
public void setSecurityManagerTk(byte[] securityManagerTk) { this.mSecurityManagerTk = securityManagerTk; }
public android.bluetooth.le.PeriodicAdvertisingParameters.Builder setInterval(int interval) { if ((interval < (android.bluetooth.le.PeriodicAdvertisingParameters.INTERVAL_MIN)) || (interval > (android.bluetooth.le.PeriodicAdvertisingParameters.INTERVAL_MAX))) { throw new java.lang.IllegalArgumentException((((("Invalid interval (must be " + (android.bluetooth.le.PeriodicAdvertisingParameters.INTERVAL_MIN)) + "-") + (android.bluetooth.le.PeriodicAdvertisingParameters.INTERVAL_MAX)) + ")")); } this.mInterval = interval; return this; }
public void setScanResponseData(android.bluetooth.le.AdvertiseData scanResponse) { try { mGatt.setScanResponseData(this.mAdvertiserId, scanResponse); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
@com.android.internal.annotations.VisibleForTesting public long getAgeMillis() { if (((mState) == (CallState.DISCONNECTED)) && (((mDisconnectCause.getCode()) == (android.telecom.DisconnectCause.REJECTED)) || ((mDisconnectCause.getCode()) == (android.telecom.DisconnectCause.MISSED)))) { return 0; } else if ((mConnectRealTimeMillis) == 0) { return 0; } else if ((mDisconnectElapsedTimeMillis) == 0) { return (android.os.SystemClock.elapsedRealtime()) - (mConnectRealTimeMillis); } return (mDisconnectElapsedTimeMillis) - (mConnectRealTimeMillis); }
@java.lang.Override public void writeToParcel(android.os.Parcel destination, int flags) { destination.writeParcelable(mPhoneAccount, 0); destination.writeInt(mState); destination.writeInt(mConnectionCapabilities); destination.writeParcelable(mAddress, 0); destination.writeInt(mAddressPresentation); destination.writeString(mCallerDisplayName); destination.writeInt(mCallerDisplayNamePresentation); destination.writeStrongBinder(((mVideoProvider) != null ? mVideoProvider.asBinder() : null)); destination.writeInt(mVideoState); destination.writeByte(((byte) (mRingbackRequested ? 1 : 0))); destination.writeByte(((byte) (mIsVoipAudioMode ? 1 : 0))); destination.writeLong(mConnectTimeMillis); destination.writeParcelable(mStatusHints, 0); destination.writeParcelable(mDisconnectCause, 0); destination.writeStringList(mConferenceableConnectionIds); destination.writeBundle(mExtras); destination.writeInt(mConnectionProperties); destination.writeInt(mSupportedAudioRoutes); destination.writeLong(mConnectElapsedTimeMillis); }
@java.lang.Override public android.telecom.ParcelableConnection createFromParcel(android.os.Parcel source) { java.lang.ClassLoader classLoader = .class.getClassLoader(); android.telecom.PhoneAccountHandle phoneAccount = source.readParcelable(classLoader); int state = source.readInt(); int capabilities = source.readInt(); android.net.Uri address = source.readParcelable(classLoader); int addressPresentation = source.readInt(); java.lang.String callerDisplayName = source.readString(); int callerDisplayNamePresentation = source.readInt(); com.android.internal.telecom.IVideoProvider videoCallProvider = IVideoProvider.Stub.asInterface(source.readStrongBinder()); int videoState = source.readInt(); boolean ringbackRequested = (source.readByte()) == 1; boolean audioModeIsVoip = (source.readByte()) == 1; long connectTimeMillis = source.readLong(); android.telecom.StatusHints statusHints = source.readParcelable(classLoader); android.telecom.DisconnectCause disconnectCause = source.readParcelable(classLoader); List<java.lang.String> conferenceableConnectionIds = new android.telecom.ArrayList<>(); source.readStringList(conferenceableConnectionIds); android.os.Bundle extras = android.os.Bundle.setDefusable(source.readBundle(classLoader), true); int properties = source.readInt(); int supportedAudioRoutes = source.readInt(); long connectElapsedTimeMillis = source.readLong(); return new android.telecom.ParcelableConnection(phoneAccount, state, capabilities, properties, supportedAudioRoutes, address, addressPresentation, callerDisplayName, callerDisplayNamePresentation, videoCallProvider, videoState, ringbackRequested, audioModeIsVoip, connectTimeMillis, connectElapsedTimeMillis, statusHints, disconnectCause, conferenceableConnectionIds, extras); }
private android.util.Pair<java.lang.ref.WeakReference<com.android.services.telephony.TelephonyConnection>, java.util.List<com.android.internal.telephony.Phone>> makeCachedConnectionPhonePair(com.android.services.telephony.TelephonyConnection c) { java.util.List<com.android.internal.telephony.Phone> phones = new java.util.ArrayList(android.telephony.TelephonyManager.getDefault().getPhoneCount()); for (com.android.internal.telephony.Phone phone : com.android.internal.telephony.PhoneFactory.getPhones()) { if ((mIsPermDiscCauseReceived[phone.getPhoneId()]) == false) { phones.add(phone); } } return new android.util.Pair(new java.lang.ref.WeakReference(c), phones); }
void updateStateInternal() { if ((mOriginalConnection) == null) { return; } com.android.internal.telephony.Call.State newState; if ((mIsStateOverridden) && ((mOriginalConnectionState) == (mOriginalConnection.getState()))) { newState = mConnectionOverriddenState; } else { newState = mOriginalConnection.getState(); } com.android.services.telephony.Log.v(this, "Update state from %s to %s for %s", mConnectionState, newState, this); int cause = mOriginalConnection.getDisconnectCause(); final boolean isEmergencyNumber = android.telephony.PhoneNumberUtils.isEmergencyNumber(mOriginalConnection.getAddress()); com.android.services.telephony.Log.v(this, "Update state from %s to %s for %s", mConnectionState, newState, this); if ((mConnectionState) != newState) { mConnectionState = newState; switch (newState) { case IDLE : break; case ACTIVE : setActiveInternal(); break; case HOLDING : setOnHold(); break; case DIALING : case ALERTING : if (((mOriginalConnection) != null) && (mOriginalConnection.isPulledCall())) { setPulling(); } else { setDialing(); } break; case INCOMING : case WAITING : setRinging(); break; case DISCONNECTED : synchronized(com.android.services.telephony.TelephonyConnection.mLock) { if ((isEmergencyNumber && ((android.telephony.TelephonyManager.getDefault().getPhoneCount()) > 1)) && ((cause == (android.telephony.DisconnectCause.EMERGENCY_TEMP_FAILURE)) || (cause == (android.telephony.DisconnectCause.EMERGENCY_PERM_FAILURE)))) { fireOnOriginalConnectionRetryDial((cause == (android.telephony.DisconnectCause.EMERGENCY_PERM_FAILURE))); } else { setDisconnected(com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCause(mOriginalConnection.getDisconnectCause(), mOriginalConnection.getVendorDisconnectCause())); close(); } } break; case DISCONNECTING : break; } } }
protected void hangup(int telephonyDisconnectCode) { synchronized(com.android.services.telephony.TelephonyConnection.mLock) { if ((mOriginalConnection) != null) { try { if (isValidRingingCall()) { com.android.internal.telephony.Call call = getCall(); if (call != null) { call.hangup(); } else { com.android.services.telephony.Log.w(this, "Attempting to hangup a connection without backing call."); } } else { mOriginalConnection.hangup(); } } catch (com.android.internal.telephony.CallStateException e) { com.android.services.telephony.Log.e(this, e, "Call to Connection.hangup failed with exception"); } } else { if ((getState()) == (STATE_DISCONNECTED)) { com.android.services.telephony.Log.i(this, "hangup called on an already disconnected call!"); close(); } else { setDisconnected(com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCause(android.telephony.DisconnectCause.LOCAL, "Local Disconnect before connection established.")); close(); } } } }
private void resetDisconnectCause() { for (int phoneId = 0; phoneId < (android.telephony.TelephonyManager.getDefault().getPhoneCount()); phoneId++) { mIsPermDiscCauseReceived[phoneId] = false; } }
private com.android.internal.telephony.Phone getPhoneForRedial(com.android.internal.telephony.Phone phoneToExclude) { java.util.List<com.android.internal.telephony.Phone> cachedPhones = mEmergencyRetryCache.second; if (((cachedPhones.size()) > 1) && (cachedPhones.contains(phoneToExclude))) { com.android.services.telephony.Log.i(this, (("getPhoneForRedial, removing Phone[" + (phoneToExclude.getPhoneId())) + "] from the available Phone cache.")); cachedPhones.remove(phoneToExclude); } return cachedPhones.isEmpty() ? null : cachedPhones.get(0); }
private void retryOutgoingOriginalConnection(com.android.services.telephony.TelephonyConnection c, boolean isPermanentFailure) { int phoneId = c.getPhone().getPhoneId(); mIsPermDiscCauseReceived[phoneId] = isPermanentFailure; mEmergencyRetryCache = makeCachedConnectionPhonePair(c); com.android.internal.telephony.Phone newPhoneToUse = getPhoneForRedial(c.getPhone()); if (newPhoneToUse != null) { int videoState = c.getVideoState(); android.os.Bundle connExtras = c.getExtras(); com.android.services.telephony.Log.i(this, ("retryOutgoingOriginalConnection, redialing on Phone Id: " + newPhoneToUse)); c.clearOriginalConnection(); if (phoneId != (newPhoneToUse.getPhoneId())) isAccountChanged = true; placeOutgoingConnection(c, newPhoneToUse, videoState, connExtras); } else { com.android.services.telephony.Log.i(this, "retryOutgoingOriginalConnection, no more Phones to use. Disconnecting."); c.setDisconnected(new android.telecom.DisconnectCause(android.telecom.DisconnectCause.ERROR)); c.clearOriginalConnection(); resetDisconnectCause(); c.destroy(); } }
private boolean isRequired() { int first_api_level = android.os.SystemProperties.getInt("ro.product.first_api_level", 0); if ((first_api_level > 0) && (first_api_level < (android.security.cts.EncryptionTest.min_api_level))) { return false; } else { return (!(hasLowRAM())) && (!(isTelevision())); } }
private void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo networkAgent, android.net.LinkProperties oldLp) { android.net.LinkProperties newLp = networkAgent.linkProperties; int netId = networkAgent.network.netId; if ((networkAgent.clatd) != null) { networkAgent.clatd.fixupLinkProperties(oldLp); } updateInterfaces(newLp, oldLp, netId, networkAgent.networkCapabilities); updateMtu(newLp, oldLp); updateTcpBufferSizes(networkAgent); updateRoutes(newLp, oldLp, netId); updateDnses(newLp, oldLp, netId); if (com.android.server.connectivity.Nat464Xlat.requiresClat(networkAgent)) { networkAgent.startClat(mNetd, mTrackerHandler); } if (isDefaultNetwork(networkAgent)) { handleApplyDefaultProxy(newLp.getHttpProxy()); } else { updateProxy(newLp, oldLp, networkAgent); } if (!(java.util.Objects.equals(newLp, oldLp))) { notifyIfacesChangedForNetworkStats(); notifyNetworkCallbacks(networkAgent, ConnectivityManager.CALLBACK_IP_CHANGED); } mKeepaliveTracker.handleCheckKeepalivesStillValid(networkAgent); }
private void updateConnectivityService(android.net.LinkProperties lp) { android.os.Message msg = mHandler.obtainMessage(NetworkAgent.EVENT_NETWORK_PROPERTIES_CHANGED, lp); msg.replyTo = mNetwork.messenger; if (com.android.server.connectivity.Nat464Xlat.DBG) { android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, ("sending message to ConnectivityService: " + msg)); } msg.sendToTarget(); }
public void start() { if (isStarted()) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, "startClat: already started"); return; } if ((mNetwork.linkProperties) == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, "startClat: Can't start clat with null LinkProperties"); return; } mBaseIface = mNetwork.linkProperties.getInterfaceName(); if ((mBaseIface) == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, "startClat: Can't start clat on null interface"); return; } mIface = (com.android.server.connectivity.Nat464Xlat.CLAT_PREFIX) + (mBaseIface); android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, ("Starting clatd on " + (mBaseIface))); try { mNMService.registerObserver(this); mNMService.startClatd(mBaseIface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ("Error starting clatd on " + (mBaseIface)), e); } }
@java.lang.Override public void interfaceLinkStateChanged(java.lang.String iface, boolean up) { if (((!up) || (!(isStarted()))) || (!(mIface.equals(iface)))) { return; } if (mIsRunning) { return; } android.net.LinkAddress clatAddress = getLinkAddress(iface); if (clatAddress == null) { return; } mIsRunning = true; android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, java.lang.String.format("interface %s is up, adding stacked link %s on top of %s", mIface, mIface, mBaseIface)); maybeSetIpv6NdOffload(mBaseIface, false); android.net.LinkProperties lp = new android.net.LinkProperties(mNetwork.linkProperties); lp.addStackedLink(makeLinkProperties(clatAddress)); updateConnectivityService(lp); }
public void fixupLinkProperties(android.net.LinkProperties oldLp) { if ((!(mIsRunning)) || ((mNetwork.clatd) == null)) { return; } android.net.LinkProperties lp = mNetwork.linkProperties; if ((lp == null) || (lp.getAllInterfaceNames().contains(mIface))) { return; } android.util.Slog.d(com.android.server.connectivity.Nat464Xlat.TAG, ("clatd running, updating NAI for " + (mIface))); for (android.net.LinkProperties stacked : oldLp.getStackedLinks()) { if (mIface.equals(stacked.getInterfaceName())) { lp.addStackedLink(stacked); return; } } }
@java.lang.Override public void interfaceRemoved(java.lang.String iface) { if ((!(isStarted())) || (!(mIface.equals(iface)))) { return; } if (!(mIsRunning)) { return; } java.lang.String baseIface = mBaseIface; mIsRunning = false; mBaseIface = null; mIface = null; android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, (("interface " + iface) + " removed")); try { mNMService.unregisterObserver(this); mNMService.stopClatd(baseIface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { } maybeSetIpv6NdOffload(baseIface, true); android.net.LinkProperties lp = new android.net.LinkProperties(mNetwork.linkProperties); lp.removeStackedLink(iface); updateConnectivityService(lp); }
private boolean isStarted() { return (mIface) != null; }
private void linkPropertiesChanged(com.android.server.connectivity.NetworkAgentInfo nai, android.net.LinkProperties newLp) { if (com.android.server.ConnectivityService.VDBG) { com.android.server.ConnectivityService.log(((((("Update of LinkProperties for " + (nai.name())) + "; created=") + (nai.created)) + "; everConnected=") + (nai.everConnected))); } android.net.LinkProperties oldLp = nai.linkProperties; synchronized(nai) { nai.linkProperties = newLp; } if (nai.everConnected) { updateLinkProperties(nai, oldLp); } }
public void start() { if (mState.isStarted()) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, "startClat: already started"); return; } if ((mNetwork.linkProperties) == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, "startClat: Can't start clat with null LinkProperties"); return; } mBaseIface = mNetwork.linkProperties.getInterfaceName(); if ((mBaseIface) == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, "startClat: Can't start clat on null interface"); return; } mIface = (com.android.server.connectivity.Nat464Xlat.CLAT_PREFIX) + (mBaseIface); mState = com.android.server.connectivity.Nat464Xlat.State.STARTING; android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, ("Starting clatd on " + (mBaseIface))); try { mNMService.startClatd(mBaseIface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ("Error starting clatd on " + (mBaseIface)), e); } }
private void registerClatInterfaceListener(com.android.server.connectivity.NetworkAgentInfo nai) { com.android.server.net.BaseNetworkObserver observer = new com.android.server.net.BaseNetworkObserver() { @java.lang.Override public void interfaceLinkStateChanged(java.lang.String iface, boolean up) { mHandler.post(() -> { if (nai.clatd == null) { android.util.Slog.w(com.android.server.ConnectivityService.TAG, ("expected non-null Nat464Xlat clatd for " + (nai.name()))); return; } linkPropertiesChanged(nai, nai.clatd.interfaceLinkStateChanged(iface, up)); }); } @java.lang.Override public void interfaceRemoved(java.lang.String iface) { try { mNetd.unregisterObserver(this); } catch (android.os.RemoteException cannotHappen) { } mHandler.post(() -> { if (nai.clatd == null) { android.util.Slog.w(com.android.server.ConnectivityService.TAG, ("expected non-null Nat464Xlat clatd for " + (nai.name()))); return; } linkPropertiesChanged(nai, nai.clatd.interfaceRemoved(iface)); }); } }; try { mNetd.unregisterObserver(observer); mNetd.registerObserver(observer); } catch (android.os.RemoteException cannotHappen) { } }
public android.net.LinkProperties interfaceLinkStateChanged(java.lang.String iface, boolean up) { if (((!up) || (!(mState.isStarted()))) || (!(mIface.equals(iface)))) { return null; } if (mState.isRunning()) { return null; } android.net.LinkAddress clatAddress = getLinkAddress(iface); if (clatAddress == null) { return null; } mState = com.android.server.connectivity.Nat464Xlat.State.RUNNING; android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, java.lang.String.format("interface %s is up, adding stacked link %s on top of %s", mIface, mIface, mBaseIface)); maybeSetIpv6NdOffload(mBaseIface, false); android.net.LinkProperties lp = new android.net.LinkProperties(mNetwork.linkProperties); lp.addStackedLink(makeLinkProperties(clatAddress)); return lp; }
public android.net.LinkProperties interfaceRemoved(java.lang.String iface) { if ((!(mState.isStarted())) || (!(mIface.equals(iface)))) { return null; } if (!(mState.isRunning())) { return null; } java.lang.String baseIface = mBaseIface; mState = com.android.server.connectivity.Nat464Xlat.State.IDLE; mBaseIface = null; mIface = null; android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, (("interface " + iface) + " removed")); try { mNMService.stopClatd(baseIface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { } maybeSetIpv6NdOffload(baseIface, true); android.net.LinkProperties lp = new android.net.LinkProperties(mNetwork.linkProperties); lp.removeStackedLink(iface); return lp; }
public void startRegistration() { synchronized(this) { if (((mScannerId) == (-1)) || ((mScannerId) == (-2))) return; try { mBluetoothGatt.registerScanner(this, mWorkSource); wait(android.bluetooth.le.BluetoothLeScanner.BleScanCallbackWrapper.REGISTRATION_CALLBACK_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException | android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.BluetoothLeScanner.TAG, "application registeration exception", e); postCallbackError(mScanCallback, ScanCallback.SCAN_FAILED_INTERNAL_ERROR); } if ((mScannerId) > 0) { mLeScanClients.put(mScanCallback, this); } else { if ((mScannerId) == 0) mScannerId = -1; postCallbackError(mScanCallback, ((mScannerId) == (-2) ? ScanCallback.SCAN_FAILED_SCANNING_TOO_FREQUENTLY : ScanCallback.SCAN_FAILED_APPLICATION_REGISTRATION_FAILED)); } } }
void registerScanner(android.bluetooth.le.IScannerCallback callback, android.os.WorkSource workSource) throws android.os.RemoteException { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM, "Need BLUETOOTH permission"); java.util.UUID uuid = java.util.UUID.randomUUID(); if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ("registerScanner() - UUID=" + uuid)); if (workSource != null) { enforceImpersonatationPermission(); } mScannerMap.add(uuid, workSource, callback, null, this); com.android.bluetooth.gatt.AppScanStats app = mScannerMap.getAppScanStatsByUid(android.os.Binder.getCallingUid()); if (((app != null) && (app.isScanningTooFrequently())) && ((checkCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PRIVILEGED)) != (PERMISSION_GRANTED))) { android.util.Log.e(com.android.bluetooth.gatt.GattService.TAG, (("App '" + (app.appName)) + "' is scanning too frequently")); callback.onScannerRegistered(BluetoothGatt.GATT_FAILURE, (-1)); return; } mScanManager.registerScanner(uuid); }
@org.junit.Test @com.android.server.connectivity.tethering.Ignore("Restore when FakeSettingsProvider.clearSettingsProvider() is available.") public void testNoSettingsValueDefaultDisabledDoesNotStart() throws java.lang.Exception { setupFunctioningHardwareInterface(); when(mHardware.getDefaultTetherOffloadDisabled()).thenReturn(1); try { Settings.Global.getInt(mContentResolver, android.provider.Settings.Global.TETHER_OFFLOAD_DISABLED); fail(); } catch (android.provider.Settings.SettingNotFoundException expected) { } final com.android.server.connectivity.tethering.OffloadController offload = makeOffloadController(); offload.start(); final org.mockito.InOrder inOrder = inOrder(mHardware); inOrder.verify(mHardware, times(1)).getDefaultTetherOffloadDisabled(); inOrder.verify(mHardware, never()).initOffloadConfig(); inOrder.verify(mHardware, never()).initOffloadControl(any(OffloadHardwareInterface.ControlCallback.class)); inOrder.verifyNoMoreInteractions(); }
@org.junit.Test @com.android.server.connectivity.tethering.Ignore("Restore when FakeSettingsProvider.clearSettingsProvider() is available.") public void testNoSettingsValueDefaultEnabledDoesStart() throws java.lang.Exception { setupFunctioningHardwareInterface(); when(mHardware.getDefaultTetherOffloadDisabled()).thenReturn(0); try { Settings.Global.getInt(mContentResolver, android.provider.Settings.Global.TETHER_OFFLOAD_DISABLED); fail(); } catch (android.provider.Settings.SettingNotFoundException expected) { } final com.android.server.connectivity.tethering.OffloadController offload = makeOffloadController(); offload.start(); final org.mockito.InOrder inOrder = inOrder(mHardware); inOrder.verify(mHardware, times(1)).getDefaultTetherOffloadDisabled(); inOrder.verify(mHardware, times(1)).initOffloadConfig(); inOrder.verify(mHardware, times(1)).initOffloadControl(any(OffloadHardwareInterface.ControlCallback.class)); inOrder.verifyNoMoreInteractions(); }
@android.support.test.filters.FlakyTest @com.android.internal.telephony.gsm.Ignore @org.junit.Test @android.test.suitebuilder.annotation.MediumTest public void testNewSms() { transitionFromStartupToIdle(); mGsmInboundSmsHandler.sendMessage(InboundSmsHandler.EVENT_NEW_SMS, new android.os.AsyncResult(null, mSmsMessage, null)); com.android.internal.telephony.TelephonyTestUtils.waitForMs(100); verifySmsIntentBroadcasts(0); mGsmInboundSmsHandler.sendMessage(InboundSmsHandler.EVENT_NEW_SMS, new android.os.AsyncResult(null, mSmsMessage, null)); com.android.internal.telephony.TelephonyTestUtils.waitForMs(100); verify(mContext, times(2)).sendBroadcast(any(android.content.Intent.class)); assertEquals("IdleState", getCurrentState().getName()); }
@org.junit.After public void tearDown() throws java.lang.Exception { mServiceHandler.chan.disconnect(); mServiceHandler.stop(); if ((mManager) != null) { mManager.disconnect(); } }
private void handleInterfaceLinkStateChanged(java.lang.String iface, boolean up) { if (((!(isStarting())) || (!up)) || (!(java.util.Objects.equals(mIface, iface)))) { return; } android.net.LinkAddress clatAddress = getLinkAddress(iface); if (clatAddress == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ("cladAddress was null for stacked iface " + iface)); return; } enterRunningState(); android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, java.lang.String.format("interface %s is up, adding stacked link %s on top of %s", mIface, mIface, mBaseIface)); maybeSetIpv6NdOffload(mBaseIface, false); android.net.LinkProperties lp = new android.net.LinkProperties(mNetwork.linkProperties); lp.addStackedLink(makeLinkProperties(clatAddress)); mNetwork.connService.handleUpdateLinkProperties(mNetwork, lp); }
private void handleInterfaceRemoved(java.lang.String iface) { if ((!(isRunning())) || (!(java.util.Objects.equals(mIface, iface)))) { return; } boolean shouldUpdate = !(isStopping()); android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, (("interface " + iface) + " removed")); try { mNMService.unregisterObserver(this); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ("Error unregistering clatd observer on " + (mBaseIface)), e); } stop(); maybeSetIpv6NdOffload(mBaseIface, true); android.net.LinkProperties lp = new android.net.LinkProperties(mNetwork.linkProperties); lp.removeStackedLink(mIface); enterIdleState(); if (shouldUpdate) { mNetwork.connService.handleUpdateLinkProperties(mNetwork, lp); } }
private void enterStoppingState() { mState = com.android.server.connectivity.Nat464Xlat.State.STOPPING; }
public void stop() { if ((!(isStarted())) || (isStopping())) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, "stopClat: already stopped or not started"); return; } android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, ("Stopping clatd on " + (mBaseIface))); try { mNMService.stopClatd(mBaseIface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ("Error stopping clatd on " + (mBaseIface)), e); } enterStoppingState(); }
private void enterRunningState() { mState = com.android.server.connectivity.Nat464Xlat.State.RUNNING; }
public boolean isAudioConnected(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.VDBG) android.bluetooth.BluetoothHeadset.log("isAudioConnected()"); final android.bluetooth.IBluetoothHeadset service = mService; if (((service != null) && (isEnabled())) && (isValidDevice(device))) { try { return service.isAudioConnected(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } if (service == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return false; }
public int getConnectionState(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.VDBG) android.bluetooth.BluetoothHeadset.log((("getConnectionState(" + device) + ")")); final android.bluetooth.IBluetoothHeadset service = mService; if (((service != null) && (isEnabled())) && (isValidDevice(device))) { try { return service.getConnectionState(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return BluetoothProfile.STATE_DISCONNECTED; } } if (service == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return BluetoothProfile.STATE_DISCONNECTED; }
public boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log("startScoUsingVirtualVoiceCall()"); final android.bluetooth.IBluetoothHeadset service = mService; if (((service != null) && (isEnabled())) && (isValidDevice(device))) { try { return service.startScoUsingVirtualVoiceCall(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); if (android.bluetooth.BluetoothHeadset.DBG) android.util.Log.d(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } return false; }
public boolean disconnect(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log((("disconnect(" + device) + ")")); final android.bluetooth.IBluetoothHeadset service = mService; if (((service != null) && (isEnabled())) && (isValidDevice(device))) { try { return service.disconnect(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return false; } } if (service == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return false; }
public boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice device, java.lang.String command, java.lang.String arg) { if (android.bluetooth.BluetoothHeadset.DBG) { android.bluetooth.BluetoothHeadset.log("sendVendorSpecificResultCode()"); } if (command == null) { throw new java.lang.IllegalArgumentException("command is null"); } final android.bluetooth.IBluetoothHeadset service = mService; if (((service != null) && (isEnabled())) && (isValidDevice(device))) { try { return service.sendVendorSpecificResultCode(device, command, arg); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } if (service == null) { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); } return false; }
public boolean setPriority(android.bluetooth.BluetoothDevice device, int priority) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log((((("setPriority(" + device) + ", ") + priority) + ")")); final android.bluetooth.IBluetoothHeadset service = mService; if (((service != null) && (isEnabled())) && (isValidDevice(device))) { if ((priority != (BluetoothProfile.PRIORITY_OFF)) && (priority != (BluetoothProfile.PRIORITY_ON))) { return false; } try { return service.setPriority(device, priority); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return false; } } if (service == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return false; }
public boolean connect(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log((("connect(" + device) + ")")); final android.bluetooth.IBluetoothHeadset service = mService; if (((service != null) && (isEnabled())) && (isValidDevice(device))) { try { return service.connect(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return false; } } if (service == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return false; }
public int getBatteryUsageHint(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.VDBG) android.bluetooth.BluetoothHeadset.log("getBatteryUsageHint()"); final android.bluetooth.IBluetoothHeadset service = mService; if (((service != null) && (isEnabled())) && (isValidDevice(device))) { try { return service.getBatteryUsageHint(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } if (service == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return -1; }
public boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log("stopScoUsingVirtualVoiceCall()"); final android.bluetooth.IBluetoothHeadset service = mService; if (((service != null) && (isEnabled())) && (isValidDevice(device))) { try { return service.stopScoUsingVirtualVoiceCall(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); if (android.bluetooth.BluetoothHeadset.DBG) android.util.Log.d(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } return false; }
public java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { if (android.bluetooth.BluetoothHeadset.VDBG) android.bluetooth.BluetoothHeadset.log("getDevicesMatchingStates()"); final android.bluetooth.IBluetoothHeadset service = mService; if ((service != null) && (isEnabled())) { try { return service.getDevicesMatchingConnectionStates(states); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); } } if (service == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); }
public int getPriority(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.VDBG) android.bluetooth.BluetoothHeadset.log((("getPriority(" + device) + ")")); final android.bluetooth.IBluetoothHeadset service = mService; if (((service != null) && (isEnabled())) && (isValidDevice(device))) { try { return service.getPriority(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return PRIORITY_OFF; } } if (service == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return PRIORITY_OFF; }
public boolean startVoiceRecognition(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log("startVoiceRecognition()"); final android.bluetooth.IBluetoothHeadset service = mService; if (((service != null) && (isEnabled())) && (isValidDevice(device))) { try { return service.startVoiceRecognition(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } if (service == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return false; }
public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { if (android.bluetooth.BluetoothHeadset.VDBG) android.bluetooth.BluetoothHeadset.log("getConnectedDevices()"); final android.bluetooth.IBluetoothHeadset service = mService; if ((service != null) && (isEnabled())) { try { return mService.getConnectedDevices(); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); } } if (service == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); }
public boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log("stopVoiceRecognition()"); final android.bluetooth.IBluetoothHeadset service = mService; if (((service != null) && (isEnabled())) && (isValidDevice(device))) { try { return service.stopVoiceRecognition(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } if (service == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); return false; }
public void bindResponse(int ind_id, boolean ind_status) { final android.bluetooth.IBluetoothHeadset service = mService; if ((service != null) && (isEnabled())) { try { service.bindResponse(ind_id, ind_status); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); if (android.bluetooth.BluetoothHeadset.DBG) android.util.Log.d(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } }
public void updateDefaultWfcModeForSlot() { if (com.android.ims.ImsManager.DBG) com.android.ims.ImsManager.log("updateWfcModeForSlot"); if (!(getBooleanCarrierConfigForSlot(CarrierConfigManager.KEY_EDITABLE_WFC_MODE_BOOL))) { android.provider.Settings.Global.putInt(mContext.getContentResolver(), android.provider.Settings.Global.WFC_IMS_MODE, getIntCarrierConfigForSlot(CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_MODE_INT)); } }
private boolean updateWfcFeatureAndProvisionedValues() throws com.android.ims.ImsException { boolean isNetworkRoaming = android.telephony.TelephonyManager.getDefault().isNetworkRoaming(); boolean available = isWfcEnabledByPlatformForSlot(); boolean enabled = isWfcEnabledByUserForSlot(); updateDefaultWfcModeForSlot(); int mode = getWfcModeForSlot(isNetworkRoaming); boolean roaming = isWfcRoamingEnabledByUserForSlot(); boolean isFeatureOn = available && enabled; com.android.ims.ImsManager.log(((((((("updateWfcFeatureAndProvisionedValues: available = " + available) + ", enabled = ") + enabled) + ", mode = ") + mode) + ", roaming = ") + roaming)); getConfigInterface().setFeatureValue(ImsConfig.FeatureConstants.FEATURE_TYPE_VOICE_OVER_WIFI, TelephonyManager.NETWORK_TYPE_IWLAN, (isFeatureOn ? ImsConfig.FeatureValueConstants.ON : ImsConfig.FeatureValueConstants.OFF), mImsConfigListener); if (!isFeatureOn) { mode = ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED; roaming = false; } com.android.ims.ImsManager.setWfcModeInternal(mContext, mode); setWfcRoamingSettingInternal(roaming); return isFeatureOn; }
public static java.lang.String formatProgressText(long totalBytes, long currentBytes) { java.text.DecimalFormat df = new java.text.DecimalFormat("#%"); double percent = 0.0; if (totalBytes > 0) { percent = currentBytes / ((double) (totalBytes)); } return df.format(percent); }
private static boolean notifyIfInactive(com.android.vts.entity.TestStatusEntity test, long lastRunTime, java.lang.String link, java.util.List<java.lang.String> emails, java.util.List<javax.mail.Message> messages) { long now = java.util.concurrent.TimeUnit.MILLISECONDS.toMicros(java.lang.System.currentTimeMillis()); long diff = now - lastRunTime; if ((diff >= (java.util.concurrent.TimeUnit.DAYS.toMicros(1))) && (diff < (java.util.concurrent.TimeUnit.DAYS.toMicros(8)))) { java.util.Date lastUpload = new java.util.Date(java.util.concurrent.TimeUnit.MICROSECONDS.toMillis(lastRunTime)); java.lang.String uploadTimeString = new java.text.SimpleDateFormat("MM/dd/yyyy HH:mm:ss").format(lastUpload); java.lang.String subject = "Warning! Inactive test: " + (test.testName); java.lang.String body = ((((("Hello,<br><br>Test \"" + (test.testName)) + "\" is inactive. ") + "No new data has been uploaded since ") + uploadTimeString) + ".") + (com.android.vts.util.EmailHelper.getEmailFooter(null, null, link)); try { messages.add(com.android.vts.util.EmailHelper.composeEmail(emails, subject, body)); return true; } catch (javax.mail.MessagingException | java.io.UnsupportedEncodingException e) { com.android.vts.job.VtsInactivityJobServlet.logger.log(java.util.logging.Level.WARNING, "Error composing email : ", e); } } return false; }
public static java.lang.String getEmailFooter(com.android.vts.entity.TestRunEntity testRun, java.util.List<com.android.vts.entity.DeviceInfoEntity> devices, java.lang.String link) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append("<br><br>"); if (devices != null) { for (com.android.vts.entity.DeviceInfoEntity device : devices) { sb.append((("Device: " + (device.getFingerprint())) + "<br>")); } } if (testRun != null) { sb.append((("VTS Build ID: " + (testRun.testBuildId)) + "<br>")); java.util.Date start = new java.util.Date(java.util.concurrent.TimeUnit.MICROSECONDS.toMillis(testRun.startTimestamp)); java.util.Date end = new java.util.Date(java.util.concurrent.TimeUnit.MICROSECONDS.toMillis(testRun.endTimestamp)); sb.append(("Start Time: " + (new java.text.SimpleDateFormat("yyyy/MM/dd H:m (z)").format(start)))); sb.append(("<br>End Time: " + (new java.text.SimpleDateFormat("yyyy/MM/dd H:m (z)").format(end)))); } sb.append((((("<br><br>For details, visit the" + " <a href='") + link) + "'>") + "VTS dashboard.</a>")); return sb.toString(); }
@java.lang.Override public void enter() { removeDeferredMessages(com.android.bluetooth.a2dp.A2dpStateMachine.CONNECT); log(("Enter Connected: " + (getCurrentMessage().what))); if ((mTargetDevice) == null) { removeMessages(com.android.bluetooth.a2dp.A2dpStateMachine.CONNECT_TIMEOUT); } broadcastAudioState(mCurrentDevice, BluetoothA2dp.STATE_NOT_PLAYING, BluetoothA2dp.STATE_PLAYING); }
public int updateNatTimeout() { int errno = -(android.system.OsConstants.EPROTO); try (android.net.netlink.NetlinkSocket nlSocket = new android.net.netlink.NetlinkSocket(android.system.OsConstants.NETLINK_NETFILTER)) { } catch (android.system.ErrnoException e) { mLog.e(("Error " + e)); errno = -(e.errno); } return errno; }
private static int probeNeighbor(int ifIndex, java.net.InetAddress ip) { final java.lang.String msgSnippet = (("probing ip=" + (ip.getHostAddress())) + "%") + ifIndex; if (android.net.ip.IpReachabilityMonitor.DBG) { android.util.Log.d(android.net.ip.IpReachabilityMonitor.TAG, msgSnippet); } final byte[] msg = android.net.netlink.RtNetlinkNeighborMessage.newNewNeighborMessage(1, ip, StructNdMsg.NUD_PROBE, ifIndex, null); try { android.net.netlink.NetlinkSocket.sendOneShotKernelMessage(OsConstants.NETLINK_ROUTE, msg); } catch (android.system.ErrnoException e) { android.util.Log.e(android.net.ip.IpReachabilityMonitor.TAG, ("Error " + msgSnippet), e); return -(e.errno); } return 0; }
private void closeKeyChainConnections() { synchronized(mLock) { final int n = mKeyChainConnectionByProfileId.size(); for (int i = 0; i < n; ++i) { mKeyChainConnectionByProfileId.valueAt(i).close(); } mKeyChainConnectionByProfileId.clear(); } }
@java.lang.Override protected java.lang.Boolean doInBackground(java.lang.Void... params) { try { synchronized(mLock) { android.security.KeyChain.KeyChainConnection keyChainConnection = mKeyChainConnectionByProfileId.get(mCertHolder.mProfileId); android.security.IKeyChainService service = keyChainConnection.getService(); if (mCertHolder.mDeleted) { byte[] bytes = mCertHolder.mX509Cert.getEncoded(); service.installCaCertificate(bytes); return true; } else { return service.deleteCaCertificate(mCertHolder.mAlias); } } } catch (java.security.cert.CertificateEncodingException | java.lang.SecurityException | java.lang.IllegalStateException | android.os.RemoteException e) { android.util.Log.w(com.android.settings.TrustedCredentialsSettings.TAG, ("Error while toggling alias " + (mCertHolder.mAlias)), e); return false; } }
@java.lang.Override public java.util.List<java.security.cert.X509Certificate> getX509CertsFromCertHolder(com.android.settings.TrustedCredentialsSettings.CertHolder certHolder) { java.util.List<java.security.cert.X509Certificate> certificates = null; try { synchronized(mLock) { android.security.KeyChain.KeyChainConnection keyChainConnection = mKeyChainConnectionByProfileId.get(certHolder.mProfileId); android.security.IKeyChainService service = keyChainConnection.getService(); java.util.List<java.lang.String> chain = service.getCaCertificateChainAliases(certHolder.mAlias, true); final int n = chain.size(); certificates = new java.util.ArrayList<java.security.cert.X509Certificate>(n); for (int i = 0; i < n; ++i) { byte[] encodedCertificate = service.getEncodedCaCertificate(chain.get(i), true); java.security.cert.X509Certificate certificate = android.security.KeyChain.toCertificate(encodedCertificate); certificates.add(certificate); } } } catch (android.os.RemoteException ex) { android.util.Log.e(com.android.settings.TrustedCredentialsSettings.TAG, ("RemoteException while retrieving certificate chain for root " + (certHolder.mAlias)), ex); } return certificates; }
public int getProfileConnectionState(com.android.settingslib.bluetooth.LocalBluetoothProfile profile) { if ((mProfileConnectionState.isEmpty()) || ((mProfileConnectionState.get(profile)) == null)) { int state = profile.getConnectionStatus(mDevice); mProfileConnectionState.put(profile, state); } return mProfileConnectionState.get(profile); }
private void handleImportanceChange(com.android.bluetooth.gatt.ScanManager.UidImportance imp) { if (imp == null) { return; } int uid = imp.uid; int importance = imp.importance; if (importance <= (ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND_SERVICE)) { for (com.android.bluetooth.gatt.ScanClient client : mRegularScanClients) { if (((client.appUid) == uid) && ((client.passiveSettings) != null)) { client.settings = client.passiveSettings; client.passiveSettings = null; } } } else { for (com.android.bluetooth.gatt.ScanClient client : mRegularScanClients) { if ((client.appUid) == uid) { client.passiveSettings = client.settings; android.bluetooth.le.ScanSettings.Builder builder = new android.bluetooth.le.ScanSettings.Builder(); android.bluetooth.le.ScanSettings settings = client.settings; builder.setScanMode(ScanSettings.SCAN_MODE_LOW_POWER); builder.setCallbackType(settings.getCallbackType()); builder.setScanResultType(settings.getScanResultType()); builder.setReportDelay(settings.getReportDelayMillis()); builder.setNumOfMatches(settings.getNumOfMatches()); client.settings = builder.build(); } } } mScanNative.configureRegularScanParams(); }
void cleanup() { mRegularScanClients.clear(); mBatchClients.clear(); mSuspendedScanClients.clear(); mScanNative.cleanup(); if ((mActivityManager) != null) { mActivityManager.removeOnUidImportanceListener(mUidImportanceListener, com.android.bluetooth.gatt.ScanManager.FOREGROUND_IMPORTANCE_CUTOFF); } if ((mDm) != null) { mDm.unregisterDisplayListener(mDisplayListener); } if ((mHandler) != null) { mHandler.removeCallbacksAndMessages(null); android.os.Looper looper = mHandler.getLooper(); if (looper != null) { looper.quit(); } mHandler = null; } }
private void setImsRegistrationStatus() { if (getResources().getBoolean(R.bool.config_showImsRegistrationState)) { android.telephony.TelephonyManager tm = ((android.telephony.TelephonyManager) (getSystemService(Context.TELEPHONY_SERVICE))); boolean isImsRegistered = tm.isImsRegistered(android.telephony.SubscriptionManager.getDefaultDataSubId()); mImsStatus.setSummary((isImsRegistered ? R.string.ims_reg_status_registered : R.string.ims_reg_status_not_registered)); } else { removePreferenceFromScreen(com.android.settings.deviceinfo.Status.KEY_IMS_REGISTRATION_STATE); mImsStatus = null; } }
@android.test.suitebuilder.annotation.MediumTest @android.graphics.drawable.cts.Test public void testPreloadDensity_tvdpi() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { final android.content.res.Resources res = getContext().getResources(); final int densityDpi = res.getConfiguration().densityDpi; try { android.graphics.drawable.cts.DrawableTestUtils.setResourcesDensity(res, 213); verifyPreloadDensityInner(res, 213); } finally { android.graphics.drawable.cts.DrawableTestUtils.setResourcesDensity(res, densityDpi); } }
@java.lang.Override public final android.app.WaitResult startActivityAndWait(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int struntimeFlags, android.app.ProfilerInfo profilerInfo, android.os.Bundle bOptions, int userId) { enforceNotIsolatedCaller("startActivityAndWait"); userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, "startActivityAndWait", null); android.app.WaitResult res = new android.app.WaitResult(); mActivityStarter.startActivityMayWait(caller, (-1), callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, struntimeFlags, profilerInfo, res, null, bOptions, false, userId, null, null, "startActivityAndWait"); return res; }
@java.lang.Override public final int startActivityWithConfig(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int struntimeFlags, android.content.res.Configuration config, android.os.Bundle bOptions, int userId) { enforceNotIsolatedCaller("startActivityWithConfig"); userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, "startActivityWithConfig", null); int ret = mActivityStarter.startActivityMayWait(caller, (-1), callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, struntimeFlags, null, null, config, bOptions, false, userId, null, null, "startActivityWithConfig"); return ret; }
@java.lang.Override public final int startActivity(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int struntimeFlags, android.app.ProfilerInfo profilerInfo, android.os.Bundle bOptions) { return startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo, resultWho, requestCode, struntimeFlags, profilerInfo, bOptions, android.os.UserHandle.getCallingUserId()); }
final int startActivityInPackage(int uid, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int struntimeFlags, android.os.Bundle bOptions, int userId, android.app.IActivityContainer container, com.android.server.am.TaskRecord inTask, java.lang.String reason) { userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, "startActivityInPackage", null); int ret = mActivityStarter.startActivityMayWait(null, uid, callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, struntimeFlags, null, null, null, bOptions, false, userId, container, inTask, reason); return ret; }
@java.lang.Override public final int startActivityAsUser(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int struntimeFlags, android.app.ProfilerInfo profilerInfo, android.os.Bundle bOptions, int userId) { enforceNotIsolatedCaller("startActivity"); userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, "startActivity", null); return mActivityStarter.startActivityMayWait(caller, (-1), callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, struntimeFlags, profilerInfo, null, null, bOptions, false, userId, null, null, "startActivityAsUser"); }
@java.lang.Override public int startVoiceActivity(java.lang.String callingPackage, int callingPid, int callingUid, android.content.Intent intent, java.lang.String resolvedType, android.service.voice.IVoiceInteractionSession session, com.android.internal.app.IVoiceInteractor interactor, int struntimeFlags, android.app.ProfilerInfo profilerInfo, android.os.Bundle bOptions, int userId) { if ((checkCallingPermission(Manifest.permission.BIND_VOICE_INTERACTION)) != (android.content.pm.PackageManager.PERMISSION_GRANTED)) { java.lang.String msg = (((("Permission Denial: startVoiceActivity() from pid=" + (android.os.Binder.getCallingPid())) + ", uid=") + (android.os.Binder.getCallingUid())) + " requires ") + (android.Manifest.permission.BIND_VOICE_INTERACTION); android.util.Slog.w(com.android.server.am.ActivityManagerService.TAG, msg); throw new java.lang.SecurityException(msg); } if ((session == null) || (interactor == null)) { throw new java.lang.NullPointerException("null session or interactor"); } userId = mUserController.handleIncomingUser(callingPid, callingUid, userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, "startVoiceActivity", null); return mActivityStarter.startActivityMayWait(null, callingUid, callingPackage, intent, resolvedType, session, interactor, null, null, 0, struntimeFlags, profilerInfo, null, null, bOptions, false, userId, null, null, "startVoiceActivity"); }
public static final android.os.Process.ProcessStartResult start(final java.lang.String processClass, final java.lang.String niceName, int uid, int gid, int[] gids, int artFlags, int mountExternal, int targetSdkVersion, java.lang.String seInfo, java.lang.String abi, java.lang.String instructionSet, java.lang.String appDataDir, java.lang.String invokeWith, java.lang.String[] zygoteArgs) { return android.os.Process.zygoteProcess.start(processClass, niceName, uid, gid, gids, artFlags, mountExternal, targetSdkVersion, seInfo, abi, instructionSet, appDataDir, invokeWith, zygoteArgs); }
public static final android.os.Process.ProcessStartResult startWebView(final java.lang.String processClass, final java.lang.String niceName, int uid, int gid, int[] gids, int artFlags, int mountExternal, int targetSdkVersion, java.lang.String seInfo, java.lang.String abi, java.lang.String instructionSet, java.lang.String appDataDir, java.lang.String invokeWith, java.lang.String[] zygoteArgs) { return android.webkit.WebViewZygote.getProcess().start(processClass, niceName, uid, gid, gids, artFlags, mountExternal, targetSdkVersion, seInfo, abi, instructionSet, appDataDir, invokeWith, zygoteArgs); }
private void verifyPreloadDensityInner(android.content.res.Resources res, int densityDpi) { }
@android.test.suitebuilder.annotation.SmallTest @android.graphics.drawable.cts.Test public void testPreloadDensity() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { final int densityDpi = mResources.getConfiguration().densityDpi; try { android.graphics.drawable.cts.DrawableTestUtils.setResourcesDensity(mResources, densityDpi); verifyPreloadDensityInner(mResources, densityDpi); } finally { android.graphics.drawable.cts.DrawableTestUtils.setResourcesDensity(mResources, densityDpi); } }
@android.test.suitebuilder.annotation.SmallTest @android.graphics.drawable.cts.Test public void testPreloadDensity_tvdpi() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { final int densityDpi = mResources.getConfiguration().densityDpi; try { android.graphics.drawable.cts.DrawableTestUtils.setResourcesDensity(mResources, 213); verifyPreloadDensityInner(mResources, 213); } finally { android.graphics.drawable.cts.DrawableTestUtils.setResourcesDensity(mResources, densityDpi); } }
@android.test.suitebuilder.annotation.SmallTest @android.graphics.drawable.cts.Test public void testGetOpacity() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { android.graphics.drawable.VectorDrawable vectorDrawable = new android.graphics.drawable.VectorDrawable(); assertEquals("Default alpha should be 255", 255, vectorDrawable.getAlpha()); assertEquals("Default opacity should be TRANSLUCENT", PixelFormat.TRANSLUCENT, vectorDrawable.getOpacity()); vectorDrawable.setAlpha(0); assertEquals("Alpha should be 0 now", 0, vectorDrawable.getAlpha()); assertEquals("Opacity should be TRANSPARENT now", PixelFormat.TRANSPARENT, vectorDrawable.getOpacity()); }
public java.lang.Iterable<com.android.ahat.heapdump.Site> getChildren() { return mChildren; }
public com.android.dx.util.ByteArray slice(int start, int end) { checkOffsets(start, end); byte[] slicedOut = new byte[end - start]; java.lang.System.arraycopy(bytes, start, slicedOut, 0, (end - start)); return new com.android.dx.util.ByteArray(slicedOut, 0, slicedOut.length); }
public void writeTo(java.io.OutputStream out, java.io.Writer humanOut, boolean verbose) throws java.io.IOException { boolean annotate = humanOut != null; com.android.dx.util.ByteArrayAnnotatedOutput result = toDex0(annotate, verbose, null); if (out != null) { out.write(result.getArray()); } if (annotate) { result.writeAnnotationsTo(humanOut); } }
public int read() throws java.io.IOException { if ((cursor) >= (size)) { return -1; } int result = getUnsignedByte0(cursor); (cursor)++; return result; }
public void mark(int reserve) { mark = cursor; }
public int available() { return (size) - (cursor); }
public void reset() { cursor = mark; }
public boolean markSupported() { return true; }
public int read(byte[] arr, int offset, int length) { if ((offset + length) > (arr.length)) { length = (arr.length) - offset; } int maxLength = (size) - (cursor); if (length > maxLength) { length = maxLength; } java.lang.System.arraycopy(bytes, ((cursor) + (start)), arr, offset, length); cursor += length; return length; }
@org.junit.Test public void testWakeupStatsSerialization() { android.net.metrics.WakeupStats stats = new android.net.metrics.WakeupStats("wlan0"); stats.totalWakeups = 10; stats.applicationWakeups = 5; stats.frameworksWakeups = 2; stats.anonymousWakeups = 3; com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent got = com.android.server.connectivity.IpConnectivityEventBuilder.toProto(stats); java.lang.String want = java.lang.String.join("\n", "dropped_events: 0", "events <", " if_name: \"\"", " link_layer: 4", " network_id: 0", " time_ms: 0", " transports: 0", " wakeup_stats <", " anonymous_wakeups: 3", " application_wakeups: 5", " duration_sec: 0", " frameworks_wakeups: 2", " total_wakeups: 10", " >", ">", "version: 2\n"); com.android.server.connectivity.IpConnectivityEventBuilderTest.verifySerialization(want, got); }
public static com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent toProto(android.net.metrics.WakeupStats in) { com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.WakeupStats wakeupStats = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.WakeupStats(); in.updateDuration(); wakeupStats.durationSec = in.durationSec; wakeupStats.totalWakeups = in.totalWakeups; wakeupStats.applicationWakeups = in.applicationWakeups; wakeupStats.frameworksWakeups = in.frameworksWakeups; wakeupStats.anonymousWakeups = in.anonymousWakeups; final com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent out = com.android.server.connectivity.IpConnectivityEventBuilder.buildEvent(0, 0, in.iface); out.setWakeupStats(wakeupStats); return out; }
@java.lang.Override public java.lang.String toString() { updateDuration(); return java.lang.String.format("WakeupStats(%s, total: %d, frameworks: %d, apps: %d, anonymous: %d, %ds)", iface, totalWakeups, frameworksWakeups, applicationWakeups, anonymousWakeups, durationSec); }
@org.junit.Test public void testWakeupStatsLogging() throws java.lang.Exception { wakeupEvent("wlan0", 1000); wakeupEvent("rmnet0", 10123); wakeupEvent("wlan0", 1000); wakeupEvent("rmnet0", 10008); wakeupEvent("wlan0", (-1)); wakeupEvent("wlan0", 10008); wakeupEvent("rmnet0", 1000); wakeupEvent("wlan0", 10004); wakeupEvent("wlan0", 1000); wakeupEvent("wlan0", (-1)); wakeupEvent("rmnet0", 10052); wakeupEvent("rmnet0", 1000); java.lang.String got = flushStatistics(); java.lang.String want = java.lang.String.join("\n", "dropped_events: 0", "events <", " if_name: \"\"", " link_layer: 2", " network_id: 0", " time_ms: 0", " transports: 0", " wakeup_stats <", " anonymous_wakeups: 0", " application_wakeups: 3", " duration_sec: 0", " frameworks_wakeups: 2", " total_wakeups: 5", " >", ">", "events <", " if_name: \"\"", " link_layer: 4", " network_id: 0", " time_ms: 0", " transports: 0", " wakeup_stats <", " anonymous_wakeups: 2", " application_wakeups: 2", " duration_sec: 0", " frameworks_wakeups: 3", " total_wakeups: 7", " >", ">", "version: 2\n"); assertEquals(want, got); }
public void countEvent(android.net.metrics.WakeupEvent ev) { (totalWakeups)++; switch (ev.uid) { case 1000 : (frameworksWakeups)++; break; case -1 : (anonymousWakeups)++; break; default : (applicationWakeups)++; break; } }
public boolean getUseHttpsValidation(android.content.Context context) { return (mSettings.getSetting(context, Settings.Global.CAPTIVE_PORTAL_USE_HTTPS, 1)) == 1; }
@org.junit.After public void tearDown() throws java.lang.Exception { waitForIdleHandler(mServiceHandler.thread, mTimeoutMs); mServiceHandler.chan.disconnect(); mServiceHandler.stop(); if ((mManager) != null) { mManager.disconnect(); } }
private java.lang.String getCaptivePortalUserAgent(android.content.Context context) { return mSettings.getSetting(context, Settings.Global.CAPTIVE_PORTAL_USER_AGENT, com.android.server.connectivity.NetworkMonitor.DEFAULT_USER_AGENT); }
private java.net.URL[] makeCaptivePortalFallbackUrls(android.content.Context context) { java.lang.String separator = ","; java.lang.String firstUrl = mSettings.getSetting(context, Settings.Global.CAPTIVE_PORTAL_FALLBACK_URL, com.android.server.connectivity.NetworkMonitor.DEFAULT_FALLBACK_URL); java.lang.String joinedUrls = (firstUrl + separator) + (mSettings.getSetting(context, Settings.Global.CAPTIVE_PORTAL_OTHER_FALLBACK_URLS, com.android.server.connectivity.NetworkMonitor.DEFAULT_OTHER_FALLBACK_URLS)); java.util.List<java.net.URL> urls = new java.util.ArrayList<>(); for (java.lang.String s : joinedUrls.split(separator)) { java.net.URL u = makeURL(s); if (u == null) { continue; } urls.add(u); } if (urls.isEmpty()) { android.util.Log.e(com.android.server.connectivity.NetworkMonitor.TAG, java.lang.String.format("could not create any url from %s", joinedUrls)); } return urls.toArray(new java.net.URL[urls.size()]); }
private java.lang.String getCaptivePortalServerHttpsUrl(android.content.Context context) { return mSettings.getSetting(context, Settings.Global.CAPTIVE_PORTAL_HTTPS_URL, com.android.server.connectivity.NetworkMonitor.DEFAULT_HTTPS_URL); }
public boolean getWifiScansAlwaysAvailable(android.content.Context context) { return (mSettings.getSetting(context, Settings.Global.WIFI_SCAN_ALWAYS_AVAILABLE, 0)) == 0; }
public boolean getIsCaptivePortalCheckEnabled(android.content.Context context) { java.lang.String symbol = Settings.Global.CAPTIVE_PORTAL_MODE; int defaultValue = Settings.Global.CAPTIVE_PORTAL_MODE_PROMPT; int mode = mSettings.getSetting(context, symbol, defaultValue); return mode != (Settings.Global.CAPTIVE_PORTAL_MODE_IGNORE); }
int verifyRequest(int expectedMessageType) { waitForIdleHandler(mServiceHandler.thread, mTimeoutMs); verify(mServiceHandler, timeout(mTimeoutMs)).handleMessage(any()); reset(mServiceHandler); android.os.Message received = mServiceHandler.getLastMessage(); assertEquals(android.net.nsd.NsdManager.nameOf(expectedMessageType), android.net.nsd.NsdManager.nameOf(received.what)); return received.arg2; }
static android.net.nsd.NsdManagerTest.MockServiceHandler create(android.content.Context context) { android.os.HandlerThread t = new android.os.HandlerThread("mock-service-handler"); t.start(); return new android.net.nsd.NsdManagerTest.MockServiceHandler(t, context); }
@org.junit.Test public void testNothing() { com.android.server.connectivity.NetworkMonitor monitor = makeMonitor(); }
@java.lang.Override public final int initialize(final android.telephony.mbms.IMbmsStreamingManagerCallback callback, final int subscriptionId) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); callback.asBinder().linkToDeath(new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, subscriptionId); } }, 0); return initialize(new android.telephony.mbms.MbmsStreamingSessionCallback() { @java.lang.Override public void onError(int errorCode, java.lang.String message) { try { callback.onError(errorCode, message); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } @java.lang.Override public void onStreamingServicesUpdated(java.util.List<android.telephony.mbms.StreamingServiceInfo> services) { try { callback.onStreamingServicesUpdated(services); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } @java.lang.Override public void onMiddlewareReady() { try { callback.onMiddlewareReady(); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } }, subscriptionId); }
private final void closeService() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Pbap Service closeService in"); com.android.bluetooth.pbap.BluetoothPbapUtils.savePbapParams(this, BluetoothPbapUtils.primaryVersionCounter, BluetoothPbapUtils.secondaryVersionCounter, BluetoothPbapUtils.mDbIdentifier.get(), BluetoothPbapUtils.contactsLastUpdated, BluetoothPbapUtils.totalFields, BluetoothPbapUtils.totalSvcFields, BluetoothPbapUtils.totalContacts); mInterrupted = true; if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); closeServerSocket(); mServerSockets.shutdown(true); mServerSockets = null; if ((mSessionStatusHandler) != null) mSessionStatusHandler.removeCallbacksAndMessages(null); if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Pbap Service closeService out"); }
void discoveryStateChangeCallback(int state) { com.android.bluetooth.btservice.AdapterProperties.infoLog(("Callback:discoveryStateChangeCallback with state:" + state)); synchronized(mObject) { android.content.Intent intent; if (state == (AbstractionLayer.BT_DISCOVERY_STOPPED)) { mDiscovering = false; mDiscoveryEndMs = java.lang.System.currentTimeMillis(); intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_FINISHED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } else if (state == (AbstractionLayer.BT_DISCOVERY_STARTED)) { mDiscovering = true; mDiscoveryEndMs = (java.lang.System.currentTimeMillis()) + (com.android.bluetooth.btservice.AdapterProperties.DEFAULT_DISCOVERY_TIMEOUT_MS); intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_STARTED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } } }
private static char bcdToCharSMS(byte b) { if (b < 10) { return ((char) ('0' + b)); } else switch (b) { case 10 : return '*'; case 11 : return '#'; case 12 : return 'a'; case 13 : return 'b'; case 14 : return 'c'; default : return 0; } }
public static java.lang.String calledPartyBCDToString(byte[] bytes, int offset, int length) { return android.telephony.PhoneNumberUtils.calledPartyBCDToString(bytes, offset, length, false); }
private static void internalCalledPartySMSBCDFragmentToString(java.lang.StringBuilder sb, byte[] bytes, int offset, int length) { for (int i = offset; i < (length + offset); i++) { byte b; char c; c = android.telephony.PhoneNumberUtils.bcdToCharSMS(((byte) ((bytes[i]) & 15))); if (c != 0) { sb.append(c); } b = ((byte) (((bytes[i]) >> 4) & 15)); if ((b == 15) && ((i + 1) == (length + offset))) { break; } c = android.telephony.PhoneNumberUtils.bcdToCharSMS(b); if (c != 0) { sb.append(c); } } }
@org.junit.Test public void testWakeupStatsSerialization() { android.net.metrics.WakeupStats stats = new android.net.metrics.WakeupStats("wlan0"); stats.totalWakeups = 14; stats.applicationWakeups = 5; stats.nonApplicationWakeups = 1; stats.rootWakeups = 2; stats.systemWakeups = 3; stats.noUidWakeups = 3; com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent got = com.android.server.connectivity.IpConnectivityEventBuilder.toProto(stats); java.lang.String want = java.lang.String.join("\n", "dropped_events: 0", "events <", " if_name: \"\"", " link_layer: 4", " network_id: 0", " time_ms: 0", " transports: 0", " wakeup_stats <", " application_wakeups: 5", " duration_sec: 0", " non_application_wakeups: 1", " root_wakeups: 2", " system_wakeups: 3", " total_wakeups: 14", " no_uid_wakeups: 3", " >", ">", "version: 2\n"); com.android.server.connectivity.IpConnectivityEventBuilderTest.verifySerialization(want, got); }
@org.junit.Test public void testWakeupStatsLogging() throws java.lang.Exception { wakeupEvent("wlan0", 1000); wakeupEvent("rmnet0", 10123); wakeupEvent("wlan0", 1000); wakeupEvent("rmnet0", 10008); wakeupEvent("wlan0", (-1)); wakeupEvent("wlan0", 10008); wakeupEvent("rmnet0", 1000); wakeupEvent("wlan0", 10004); wakeupEvent("wlan0", 1000); wakeupEvent("wlan0", 0); wakeupEvent("wlan0", (-1)); wakeupEvent("rmnet0", 10052); wakeupEvent("wlan0", 0); wakeupEvent("rmnet0", 1000); wakeupEvent("wlan0", 1010); java.lang.String got = flushStatistics(); java.lang.String want = java.lang.String.join("\n", "dropped_events: 0", "events <", " if_name: \"\"", " link_layer: 2", " network_id: 0", " time_ms: 0", " transports: 0", " wakeup_stats <", " application_wakeups: 3", " duration_sec: 0", " non_application_wakeups: 0", " root_wakeups: 0", " system_wakeups: 2", " total_wakeups: 5", " no_uid_wakeups: 0", " >", ">", "events <", " if_name: \"\"", " link_layer: 4", " network_id: 0", " time_ms: 0", " transports: 0", " wakeup_stats <", " application_wakeups: 2", " duration_sec: 0", " non_application_wakeups: 1", " root_wakeups: 2", " system_wakeups: 3", " total_wakeups: 10", " no_uid_wakeups: 2", " >", ">", "version: 2\n"); assertEquals(want, got); }
private static int compareBooleans(boolean x, boolean y) { try { java.lang.Class<?> c = java.lang.Class.forName("Smali"); java.lang.reflect.Method m = c.getMethod("compareBooleans", boolean.class, boolean.class); return ((java.lang.Integer) (m.invoke(null, x, y))); } catch (java.lang.Exception ex) { throw new java.lang.Error(ex); } }
private android.os.Bundle maybeCleanseExtras(android.os.Bundle extras) { if (extras == null) { return null; } int startSize = extras.getSize(); android.os.Bundle filtered = extras.filterValues(); int endSize = filtered.getSize(); if (startSize != endSize) { android.util.Log.i(com.android.ims.ImsCallProfile.TAG, ((("maybeCleanseExtras: " + (startSize - endSize)) + " extra values were ") + "removed - only primitive types and system parcelables are permitted.")); } return filtered; }
private void openChannel(int aidId) { java.lang.String mAID = (aidId == 0) ? com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.ARAD_AID : com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.ARAM_AID; int p2 = 0; mUiccCard.iccOpenLogicalChannel(mAID, p2, obtainMessage(com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.EVENT_OPEN_LOGICAL_CHANNEL_DONE, 0, aidId, null)); }
@java.lang.Override public void addAccount(android.accounts.IAccountAuthenticatorResponse response, java.lang.String accountType, java.lang.String authTokenType, java.lang.String[] features, android.os.Bundle options) throws android.os.RemoteException { if (android.util.Log.isLoggable(android.accounts.AbstractAccountAuthenticator.TAG, Log.VERBOSE)) { android.util.Log.v(android.accounts.AbstractAccountAuthenticator.TAG, ((((("addAccount: accountType " + accountType) + ", authTokenType ") + authTokenType) + ", features ") + (features == null ? "[]" : java.util.Arrays.toString(features)))); } checkBinderPermission(); try { final android.os.Bundle result = this.addAccount(new android.accounts.AccountAuthenticatorResponse(response), accountType, authTokenType, features, options); if (android.util.Log.isLoggable(android.accounts.AbstractAccountAuthenticator.TAG, Log.VERBOSE)) { if (result != null) { result.keySet(); } android.util.Log.v(android.accounts.AbstractAccountAuthenticator.TAG, ("addAccount: result " + (android.accounts.AccountManager.sanitizeResult(result)))); } response.onResult(result); } catch (java.lang.Exception e) { handleException(response, "addAccount", accountType, e); } }
void sendConnectionStateChange(android.bluetooth.BluetoothDevice device, int profile, int state, int prevState) { if ((!(validateProfileConnectionState(state))) || (!(validateProfileConnectionState(prevState)))) { com.android.bluetooth.btservice.AdapterProperties.errorLog(((("sendConnectionStateChange: invalid state transition " + prevState) + " -> ") + state)); return; } synchronized(mObject) { updateProfileConnectionState(profile, state, prevState); if (updateCountersAndCheckForConnectionStateChange(state, prevState)) { int newAdapterState = com.android.bluetooth.btservice.AdapterProperties.convertToAdapterState(state); int prevAdapterState = com.android.bluetooth.btservice.AdapterProperties.convertToAdapterState(prevState); setConnectionState(newAdapterState); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.putExtra(BluetoothAdapter.EXTRA_CONNECTION_STATE, newAdapterState); intent.putExtra(BluetoothAdapter.EXTRA_PREVIOUS_CONNECTION_STATE, prevAdapterState); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); android.util.Log.d(com.android.bluetooth.btservice.AdapterProperties.TAG, ((((("ADAPTER_CONNECTION_STATE_CHANGE: " + device) + ": ") + prevAdapterState) + " -> ") + newAdapterState)); if (!(com.android.bluetooth.btservice.AdapterProperties.isNormalStateTransition(prevState, state))) { android.util.Log.w(com.android.bluetooth.btservice.AdapterProperties.TAG, ((((((("ADAPTER_CONNECTION_STATE_CHANGE: abnormal transition for profile=" + profile) + ", device=") + device) + ", ") + prevState) + " -> ") + state)); } mService.sendBroadcastAsUser(intent, UserHandle.ALL, AdapterService.BLUETOOTH_PERM); } } }
private void sendConnectionStateChange(int profile, android.content.Intent connIntent) { android.bluetooth.BluetoothDevice device = connIntent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); int prevState = connIntent.getIntExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, (-1)); int state = connIntent.getIntExtra(BluetoothProfile.EXTRA_STATE, (-1)); android.util.Log.d(com.android.bluetooth.btservice.AdapterProperties.TAG, ((((((("PROFILE_CONNECTION_STATE_CHANGE: profile=" + profile) + ", device=") + device) + ", ") + prevState) + " -> ") + state)); if (!(com.android.bluetooth.btservice.AdapterProperties.isNormalStateTransition(prevState, state))) { android.util.Log.w(com.android.bluetooth.btservice.AdapterProperties.TAG, ((((((("PROFILE_CONNECTION_STATE_CHANGE: abnormal transition for profile=" + profile) + ", device=") + device) + ", ") + prevState) + " -> ") + state)); } sendConnectionStateChange(device, profile, state, prevState); }
@org.junit.Test public void testJobDuration() throws java.lang.Exception { android.app.job.JobScheduler js = mContext.getSystemService(android.app.job.JobScheduler.class); assertTrue("JobScheduler service not available", (js != null)); final android.app.job.JobInfo job = createJobInfo(1); for (int i = 0; i < 3; i++) { java.util.concurrent.CountDownLatch latch = com.android.server.cts.device.batterystats.SimpleJobService.resetCountDownLatch(); android.util.Log.i(com.android.server.cts.device.batterystats.BatteryStatsJobDurationTests.TAG, "Scheduling job"); js.schedule(job); android.util.Log.i(com.android.server.cts.device.batterystats.BatteryStatsJobDurationTests.TAG, "Waiting for job to finish"); if (!(latch.await(10, java.util.concurrent.TimeUnit.SECONDS))) { android.util.Log.e(com.android.server.cts.device.batterystats.BatteryStatsJobDurationTests.TAG, "Job didn't finish in 10 seconds"); fail("Job didn't finish in 10 seconds"); } } }
@java.lang.Override protected boolean refreshUi() { try { if (((mPackageInfo) == null) || ((mPm.getPackageInfo(mPackageName, 0)) == null)) { return false; } } catch (android.content.pm.PackageManager.NameNotFoundException e) { return false; } mUsageState = mUsageBridge.getUsageInfo(mPackageName, mPackageInfo.applicationInfo.uid); boolean hasAccess = mUsageState.isPermissible(); mSwitchPref.setChecked(hasAccess); mSwitchPref.setEnabled(mUsageState.permissionDeclared); mUsagePrefs.setEnabled(hasAccess); android.content.pm.ResolveInfo resolveInfo = mPm.resolveActivityAsUser(mSettingsIntent, PackageManager.GET_META_DATA, mUserId); if (resolveInfo != null) { if ((findPreference(com.android.settings.applications.UsageAccessDetails.KEY_APP_OPS_SETTINGS_PREFS)) == null) { getPreferenceScreen().addPreference(mUsagePrefs); } android.os.Bundle metaData = resolveInfo.activityInfo.metaData; mSettingsIntent.setComponent(new android.content.ComponentName(resolveInfo.activityInfo.packageName, resolveInfo.activityInfo.name)); if ((metaData != null) && (metaData.containsKey(Settings.METADATA_USAGE_ACCESS_REASON))) { mSwitchPref.setSummary(metaData.getString(Settings.METADATA_USAGE_ACCESS_REASON)); } } else { if ((findPreference(com.android.settings.applications.UsageAccessDetails.KEY_APP_OPS_SETTINGS_PREFS)) != null) { getPreferenceScreen().removePreference(mUsagePrefs); } } return true; }
private static int $noinline$bar() { Main.assertIsInterpreted(); synchronized(Main.class) { Main.sEntered = true; Main.class.notify(); while (!(Main.sExitFlag)) { try { Main.class.wait(); } catch (java.lang.Exception e) { } } } Main.assertIsInterpreted(); return 4660; }
public void run() { if ((threadIndex) == 0) { synchronized(Main.class) { if (Main.sEntered) { Main.class.notify(); } else { while (!(Main.sEntered)) { try { Main.class.wait(); } catch (java.lang.Exception e) { } } } } Main.deoptimizeAll(); synchronized(Main.class) { Main.sExitFlag = true; Main.class.notify(); } } else { Main.ensureJitCompiled(Main.class, "$noinline$foo"); $noinline$foo(); } }
@java.lang.Override public void handleMessage(android.os.Message msg) { android.util.Log.i(com.android.server.cts.device.batterystats.SimpleForegroundService.TAG, "Handling message"); try { java.lang.Thread.sleep(2000); } catch (java.lang.InterruptedException e) { java.lang.Thread.currentThread().interrupt(); } android.util.Log.i(com.android.server.cts.device.batterystats.SimpleForegroundService.TAG, "Stopping service"); stopSelf(msg.arg1); }
public static synchronized com.android.ahat.TestDump getTestDump() throws java.io.IOException { return com.android.ahat.TestDump.getTestDump("test-dump.hprof", "test-dump-base.hprof", "proguard_dictionary"); }
public static java.lang.String escape(java.lang.String text) { java.lang.String specials = "&<>\'\""; java.lang.String[] replacements = new java.lang.String[]{ "&amp;", "&lt;", "&gt;", "&#39;", "&quot;" }; java.lang.StringBuilder sb = null; int low = 0; for (int i = 0; i < (text.length()); ++i) { int s = specials.indexOf(text.charAt(i)); if (s != (-1)) { if (sb == null) { sb = new java.lang.StringBuilder(); } sb.append(text.substring(low, i)); sb.append(replacements[s]); low = i + 1; } } if (sb == null) { return text; } sb.append(text.substring(low)); return sb.toString(); }
@org.junit.Test public void tests() { assertEquals("nothing to escape", com.android.ahat.HtmlEscaper.escape("nothing to escape")); assertEquals("a&lt;b&gt; &amp; &quot;c&#39;d&quot;e", com.android.ahat.HtmlEscaper.escape("a<b> & \"c\'d\"e")); assertEquals("adjacent &lt;&lt;&gt;&gt; x", com.android.ahat.HtmlEscaper.escape("adjacent <<>> x")); assertEquals("&lt; initial", com.android.ahat.HtmlEscaper.escape("< initial")); assertEquals("ending &gt;", com.android.ahat.HtmlEscaper.escape("ending >")); }
@java.lang.Override public void handle(com.sun.net.httpserver.HttpExchange exchange) throws java.io.IOException { java.lang.ClassLoader loader = com.android.ahat.StaticHandler.class.getClassLoader(); java.io.InputStream is = loader.getResourceAsStream(mResourceName); if (is == null) { exchange.getResponseHeaders().add("Content-Type", "text/html"); exchange.sendResponseHeaders(404, 0); java.io.PrintStream ps = new java.io.PrintStream(exchange.getResponseBody()); com.android.ahat.HtmlDoc doc = new com.android.ahat.HtmlDoc(ps, com.android.ahat.DocString.text("ahat"), com.android.ahat.DocString.uri("style.css")); doc.big(com.android.ahat.DocString.text("Resource not found.")); doc.close(); } else { exchange.getResponseHeaders().add("Content-Type", mContentType); exchange.sendResponseHeaders(200, 0); java.io.OutputStream os = exchange.getResponseBody(); int read; byte[] buf = new byte[4096]; while ((read = is.read(buf)) > 0) { os.write(buf, 0, read); } is.close(); os.close(); } }
public long getMethodID(long classID, java.lang.String methodName, java.lang.String methodSignature) { org.apache.harmony.jpda.tests.framework.jdwp.VmMirror.MethodInfo[] methodInfos = getMethodsInfo(classID); for (org.apache.harmony.jpda.tests.framework.jdwp.VmMirror.MethodInfo methodInfo : methodInfos) { if ((methodInfo.getName().equals(methodName)) && ((methodSignature == null) || (methodInfo.getSignature().equals(methodSignature)))) { return methodInfo.getMethodID(); } } return -1; }
public void testBytecodesTest001() { logWriter.println("testBytecodesTest001 started"); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); long classID = getClassIDBySignature((("L" + (getDebuggeeClassName().replace('.', '/'))) + ";")); org.apache.harmony.jpda.tests.framework.jdwp.VmMirror.MethodInfo[] methodsInfo = jdwpGetMethodsInfo(classID); assertFalse("Invalid number of methods", ((methodsInfo.length) == 0)); for (int i = 0; i < (methodsInfo.length); i++) { logWriter.println(methodsInfo[i].toString()); org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket packet = new org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket(JDWPCommands.MethodCommandSet.CommandSetID, JDWPCommands.MethodCommandSet.BytecodesCommand); packet.setNextValueAsClassID(classID); packet.setNextValueAsMethodID(methodsInfo[i].getMethodID()); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.performCommand(packet); checkReplyPacket(reply, "Method::Bytecodes command"); int bytes = reply.getNextValueAsInt(); logWriter.println(("bytes = " + bytes)); byte[] bytecode = new byte[bytes]; for (int j = 0; j < bytes; j++) { bytecode[j] = reply.getNextValueAsByte(); } logWriter.println(("Bytecode=" + (java.util.Arrays.toString(bytecode)))); } synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); }
public final java.lang.String getMethodSignature(long classID, long methodID) { org.apache.harmony.jpda.tests.framework.jdwp.VmMirror.MethodInfo[] methodInfos = getMethodsInfo(classID); for (org.apache.harmony.jpda.tests.framework.jdwp.VmMirror.MethodInfo methodInfo : methodInfos) { if (methodID == (methodInfo.getMethodID())) { java.lang.String value = methodInfo.getSignature(); value = value.replaceAll("/", "."); int lastRoundBracketIndex = value.lastIndexOf(")"); value = value.substring(0, (lastRoundBracketIndex + 1)); return value; } } return null; }
public void testIsObsoleteTest001() { logWriter.println("testObsoleteTest001 started"); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); long classID = getClassIDBySignature((("L" + (getDebuggeeClassName().replace('.', '/'))) + ";")); org.apache.harmony.jpda.tests.framework.jdwp.VmMirror.MethodInfo[] methodsInfo = jdwpGetMethodsInfo(classID); assertFalse("Invalid number of methods", ((methodsInfo.length) == 0)); for (org.apache.harmony.jpda.tests.framework.jdwp.VmMirror.MethodInfo methodInfo : methodsInfo) { logWriter.println(methodInfo.toString()); org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket packet = new org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket(JDWPCommands.MethodCommandSet.CommandSetID, JDWPCommands.MethodCommandSet.IsObsoleteCommand); packet.setNextValueAsClassID(classID); packet.setNextValueAsMethodID(methodInfo.getMethodID()); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.performCommand(packet); checkReplyPacket(reply, "Method::IsObsolete command"); boolean isObsolete = reply.getNextValueAsBoolean(); logWriter.println(("isObsolete=" + isObsolete)); assertAllDataRead(reply); } synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); }
public org.apache.harmony.jpda.tests.framework.jdwp.VmMirror.MethodInfo[] getMethodsInfo(long classID) { boolean withGeneric = true; org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket commandPacket = new org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket(JDWPCommands.ReferenceTypeCommandSet.CommandSetID, JDWPCommands.ReferenceTypeCommandSet.MethodsWithGenericCommand); commandPacket.setNextValueAsReferenceTypeID(classID); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = performCommand(commandPacket); if ((reply.getErrorCode()) == (JDWPConstants.Error.NOT_IMPLEMENTED)) { withGeneric = false; commandPacket.setCommand(JDWPCommands.ReferenceTypeCommandSet.MethodsCommand); reply = performCommand(commandPacket); } checkReply(reply); int declared = reply.getNextValueAsInt(); org.apache.harmony.jpda.tests.framework.jdwp.VmMirror.MethodInfo[] methodsInfo = new org.apache.harmony.jpda.tests.framework.jdwp.VmMirror.MethodInfo[declared]; for (int i = 0; i < declared; i++) { long methodID = reply.getNextValueAsMethodID(); java.lang.String methodName = reply.getNextValueAsString(); java.lang.String methodSignature = reply.getNextValueAsString(); java.lang.String methodGenericSignature = ""; if (withGeneric) { methodGenericSignature = reply.getNextValueAsString(); } int methodModifiers = reply.getNextValueAsInt(); methodsInfo[i] = new org.apache.harmony.jpda.tests.framework.jdwp.VmMirror.MethodInfo(methodID, methodName, methodSignature, methodGenericSignature, methodModifiers); } return methodsInfo; }
public java.lang.String getMethodName(long classID, long methodID) { org.apache.harmony.jpda.tests.framework.jdwp.VmMirror.MethodInfo[] methodInfos = getMethodsInfo(classID); for (org.apache.harmony.jpda.tests.framework.jdwp.VmMirror.MethodInfo methodInfo : methodInfos) { if (methodID == (methodInfo.getMethodID())) { return methodInfo.getName(); } } return "unknown"; }
public void testLineTableTest001() { logWriter.println("testLineTableTest001 started"); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); long classID = getClassIDBySignature((("L" + (getDebuggeeClassName().replace('.', '/'))) + ";")); org.apache.harmony.jpda.tests.framework.jdwp.VmMirror.MethodInfo[] methodsInfo = jdwpGetMethodsInfo(classID); assertFalse("Invalid number of methods: 0", ((methodsInfo.length) == 0)); for (int i = 0; i < (methodsInfo.length); i++) { logWriter.println(methodsInfo[i].toString()); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = getLineTable(classID, methodsInfo[i].getMethodID()); long start = reply.getNextValueAsLong(); logWriter.println(("start = " + start)); long end = reply.getNextValueAsLong(); logWriter.println(("end = " + end)); int lines = reply.getNextValueAsInt(); logWriter.println(("lines = " + lines)); for (int j = 0; j < lines; j++) { long lineCodeIndex = reply.getNextValueAsLong(); logWriter.println(("lineCodeIndex = " + lineCodeIndex)); int lineNumber = reply.getNextValueAsInt(); logWriter.println(("lineNumber = " + lineNumber)); } } synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); }
public final java.util.List<org.apache.harmony.jpda.tests.framework.jdwp.Frame.Variable> getVariableTable(long classID, long methodID) { boolean withGeneric = true; org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket command = new org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket(JDWPCommands.MethodCommandSet.CommandSetID, JDWPCommands.MethodCommandSet.VariableTableWithGenericCommand); command.setNextValueAsReferenceTypeID(classID); command.setNextValueAsMethodID(methodID); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = performCommand(command); if ((reply.getErrorCode()) == (JDWPConstants.Error.NOT_IMPLEMENTED)) { withGeneric = false; command.setCommand(JDWPCommands.MethodCommandSet.VariableTableCommand); reply = performCommand(command); } if (((reply.getErrorCode()) == (JDWPConstants.Error.ABSENT_INFORMATION)) || ((reply.getErrorCode()) == (JDWPConstants.Error.NATIVE_METHOD))) { return null; } checkReply(reply); reply.getNextValueAsInt(); int slots = reply.getNextValueAsInt(); java.util.ArrayList<org.apache.harmony.jpda.tests.framework.jdwp.Frame.Variable> vars = new java.util.ArrayList<org.apache.harmony.jpda.tests.framework.jdwp.Frame.Variable>(slots); for (int i = 0; i < slots; i++) { org.apache.harmony.jpda.tests.framework.jdwp.Frame.Variable var = new org.apache.harmony.jpda.tests.framework.jdwp.Frame.Variable(); var.setCodeIndex(reply.getNextValueAsLong()); var.setName(reply.getNextValueAsString()); var.setSignature(reply.getNextValueAsString()); if (withGeneric) { reply.getNextValueAsString(); } var.setLength(reply.getNextValueAsInt()); var.setSlot(reply.getNextValueAsInt()); vars.add(var); } return vars; }
protected org.apache.harmony.jpda.tests.jdwp.StackFrame.JDWPStackFrameTestCase.VarInfo[] jdwpGetVariableTable(long classID, long methodID) { java.util.List<org.apache.harmony.jpda.tests.framework.jdwp.Frame.Variable> variables = debuggeeWrapper.vmMirror.getVariableTable(classID, methodID); if (variables == null) { fail("No variable table"); } int varNumber = variables.size(); org.apache.harmony.jpda.tests.jdwp.StackFrame.JDWPStackFrameTestCase.VarInfo[] varInfos = new org.apache.harmony.jpda.tests.jdwp.StackFrame.JDWPStackFrameTestCase.VarInfo[varNumber]; for (int i = 0; i < varNumber; i++) { org.apache.harmony.jpda.tests.framework.jdwp.Frame.Variable variable = variables.get(i); java.lang.String name = variable.getName(); java.lang.String sign = variable.getSignature(); int slot = variable.getSlot(); varInfos[i] = new org.apache.harmony.jpda.tests.jdwp.StackFrame.JDWPStackFrameTestCase.VarInfo(name, slot, sign); } return varInfos; }
@org.junit.Test public void parseCaseInsensitive() { long now = java.lang.System.currentTimeMillis(); java.util.List<com.android.volley.Header> headers = new java.util.ArrayList<>(); headers.add(new com.android.volley.Header("eTAG", "Yow!")); headers.add(new com.android.volley.Header("DATE", com.android.volley.toolbox.HttpHeaderParserTest.rfc1123Date(now))); headers.add(new com.android.volley.Header("expires", com.android.volley.toolbox.HttpHeaderParserTest.rfc1123Date((now + (com.android.volley.toolbox.HttpHeaderParserTest.ONE_HOUR_MILLIS))))); headers.add(new com.android.volley.Header("cache-control", "public, max-age=86400")); headers.add(new com.android.volley.Header("content-type", "text/plain")); com.android.volley.NetworkResponse response = new com.android.volley.NetworkResponse(0, null, headers, false, 0); com.android.volley.Cache.Entry entry = com.android.volley.toolbox.HttpHeaderParser.parseCacheHeaders(response); assertNotNull(entry); assertEquals("Yow!", entry.etag); assertEqualsWithin((now + (com.android.volley.toolbox.HttpHeaderParserTest.ONE_DAY_MILLIS)), entry.ttl, com.android.volley.toolbox.HttpHeaderParserTest.ONE_MINUTE_MILLIS); assertEquals(entry.softTtl, entry.ttl); assertEquals("ISO-8859-1", com.android.volley.toolbox.HttpHeaderParser.parseCharset(com.android.volley.toolbox.HttpHeaderParser.toHeaderMap(headers))); }
@org.junit.Test public void convertHeaders() { java.util.Map<java.lang.String, java.util.List<java.lang.String>> headers = new java.util.HashMap<>(); headers.put("HeaderA", java.util.Collections.singletonList("ValueA")); java.util.List<java.lang.String> values = new java.util.ArrayList<>(); values.add("ValueB_1"); values.add("ValueB_2"); headers.put("HeaderB", values); java.util.List<com.android.volley.Header> result = com.android.volley.toolbox.HurlStack.convertHeaders(headers); java.util.List<com.android.volley.Header> expected = new java.util.ArrayList<>(); expected.add(new com.android.volley.Header("HeaderA", "ValueA")); expected.add(new com.android.volley.Header("HeaderB", "ValueB_1")); expected.add(new com.android.volley.Header("HeaderB", "ValueB_2")); assertEquals(expected, result); }
private static java.util.Map<java.lang.String, java.lang.String> toHeaderMap(java.util.List<com.android.volley.Header> allHeaders) { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.TreeMap<>(java.lang.String.CASE_INSENSITIVE_ORDER); for (com.android.volley.Header header : allHeaders) { headers.put(header.getName(), header.getValue()); } return headers; }
static java.util.List<com.android.volley.Header> convertHeaders(java.util.Map<java.lang.String, java.util.List<java.lang.String>> responseHeaders) { java.util.List<com.android.volley.Header> headerList = new java.util.ArrayList<>(responseHeaders.size()); for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> entry : responseHeaders.entrySet()) { for (java.lang.String value : entry.getValue()) { headerList.add(new com.android.volley.Header(entry.getKey(), value)); } } return headerList; }
private static java.util.List<com.android.volley.Header> toAllHeaderList(java.util.Map<java.lang.String, java.lang.String> headers) { java.util.List<com.android.volley.Header> allHeaders = new java.util.ArrayList<>(headers.size()); for (java.util.Map.Entry<java.lang.String, java.lang.String> header : headers.entrySet()) { allHeaders.add(new com.android.volley.Header(header.getKey(), header.getValue())); } return allHeaders; }
private static void assertSizesRotate(android.server.cts.ReportedSizes rotationA, android.server.cts.ReportedSizes rotationB) throws java.lang.Exception { assertEquals(rotationA.displayWidth, rotationA.metricsWidth); assertEquals(rotationA.displayHeight, rotationA.metricsHeight); assertEquals(rotationB.displayWidth, rotationB.metricsWidth); assertEquals(rotationB.displayHeight, rotationB.metricsHeight); final boolean beforePortrait = (rotationA.displayWidth) < (rotationA.displayHeight); final boolean afterPortrait = (rotationB.displayWidth) < (rotationB.displayHeight); final boolean beforeConfigPortrait = (rotationA.widthDp) < (rotationA.heightDp); final boolean afterConfigPortrait = (rotationB.widthDp) < (rotationB.heightDp); assertEquals(beforePortrait, beforeConfigPortrait); assertEquals(afterPortrait, afterConfigPortrait); }
public void testNetworkTypes() { assertTrue(mCm.isNetworkSupported(com.android.server.TYPE_WIFI)); assertTrue(mCm.isNetworkSupported(com.android.server.TYPE_MOBILE)); assertTrue(mCm.isNetworkSupported(com.android.server.TYPE_ETHERNET)); }
boolean setBluetoothClass(android.bluetooth.BluetoothClass bluetoothClass) { enforceCallingOrSelfPermission(com.android.bluetooth.btservice.AdapterService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); return mAdapterProperties.setBluetoothClass(bluetoothClass); }
boolean setBluetoothClass(android.bluetooth.BluetoothClass bluetoothClass) { android.util.Log.d(com.android.bluetooth.btservice.AdapterProperties.TAG, ("Setting BluetoothClass - " + bluetoothClass)); byte[] bytes = com.android.bluetooth.Utils.intToByteArray(bluetoothClass.getClassOfDevice()); android.util.Log.d(com.android.bluetooth.btservice.AdapterProperties.TAG, ((((((((("BluetoothClass. Length - " + (bytes.length)) + " bytes - ") + (java.lang.Byte.toHexString(bytes[0], false))) + ", ") + (java.lang.Byte.toHexString(bytes[1], false))) + ", ") + (java.lang.Byte.toHexString(bytes[2], false))) + ", ") + (java.lang.Byte.toHexString(bytes[3], false)))); synchronized(mObject) { return mService.setAdapterPropertyNative(AbstractionLayer.BT_PROPERTY_CLASS_OF_DEVICE, bytes); } }
public boolean setBluetoothClass(android.bluetooth.BluetoothClass bluetoothClass) { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, "setName() - Not allowed for non-active user"); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.setBluetoothClass(bluetoothClass); }
private void placeOutgoingCallImmediately(com.android.server.telecom.Call call, android.net.Uri handle, android.telecom.GatewayInfo gatewayInfo, boolean speakerphoneOn, int videoState) { android.telecom.Log.i(this, ("Placing call immediately instead of waiting for " + " OutgoingCallBroadcastReceiver: %s"), intent); mCall.setNewOutgoingCallIntentBroadcastIsDone(); mCall.placeOutgoingCall(call, handle, gatewayInfo, speakerphoneOn, videoState); }
void handleStopScan(com.android.bluetooth.gatt.ScanClient client) { com.android.bluetooth.Utils.enforceAdminPermission(mService); if (client == null) return; if (mRegularScanClients.contains(client)) { mScanNative.stopRegularScan(client); if ((mScanNative.numRegularScanClients()) == 0) { this.removeMessages(com.android.bluetooth.gatt.ScanManager.MSG_SCAN_TIMEOUT); } if (!(mScanNative.isOpportunisticScanClient(client))) { mScanNative.configureRegularScanParams(); } } else { mScanNative.stopBatchScan(client); } if (client.appDied) { if (com.android.bluetooth.gatt.ScanManager.DBG) android.util.Log.d(com.android.bluetooth.gatt.ScanManager.TAG, ("app died, unregister scanner - " + (client.scannerId))); mService.unregisterScanner(client.scannerId); } }
void cleanup() { mRegularScanClients.clear(); mBatchClients.clear(); mScanNative.cleanup(); if ((mHandler) != null) { mHandler.removeCallbacksAndMessages(null); android.os.Looper looper = mHandler.getLooper(); if (looper != null) { looper.quitSafely(); } mHandler = null; } }
void handleStartScan(com.android.bluetooth.gatt.ScanClient client) { com.android.bluetooth.Utils.enforceAdminPermission(mService); if (com.android.bluetooth.gatt.ScanManager.DBG) android.util.Log.d(com.android.bluetooth.gatt.ScanManager.TAG, "handling starting scan"); if (!(isScanSupported(client))) { android.util.Log.e(com.android.bluetooth.gatt.ScanManager.TAG, "Scan settings not supported"); return; } if ((mRegularScanClients.contains(client)) || (mBatchClients.contains(client))) { android.util.Log.e(com.android.bluetooth.gatt.ScanManager.TAG, "Scan already started"); return; } if (isBatchClient(client)) { mBatchClients.add(client); mScanNative.startBatchScan(client); } else { mRegularScanClients.add(client); mScanNative.startRegularScan(client); if (!(mScanNative.isOpportunisticScanClient(client))) { mScanNative.configureRegularScanParams(); if (!(mScanNative.isExemptFromScanDowngrade(client))) { android.os.Message msg = this.obtainMessage(com.android.bluetooth.gatt.ScanManager.MSG_SCAN_TIMEOUT); msg.obj = client; this.sendMessageDelayed(msg, AppScanStats.SCAN_TIMEOUT_MS); } } } }
private static android.os.Looper getMyLooper() { final android.os.Looper looper = android.os.Looper.myLooper(); if (looper != null) return looper; android.os.Looper.prepare(); return android.os.Looper.myLooper(); }
private final void mainLoop() { final android.os.Looper looper = android.net.util.BlockingSocketReader.getMyLooper(); final android.os.MessageQueue queue = looper.getQueue(); final int eventsOfInterest = (EVENT_INPUT) | (EVENT_ERROR); queue.addOnFileDescriptorEventListener(mSocket, eventsOfInterest, new android.os.MessageQueue.OnFileDescriptorEventListener() { @java.lang.Override public int onFileDescriptorEvents(java.io.FileDescriptor fd, int events) { android.util.Log.e("XXX", ((("fd " + fd) + " got ") + events)); final boolean hasInput = (events & (EVENT_INPUT)) != 0; android.util.Log.e("XXX", ("hasInput " + hasInput)); final boolean hasError = (events & (EVENT_ERROR)) != 0; android.util.Log.e("XXX", ("hasError " + hasError)); if (hasError || (hasInput && (!(handleInput())))) { stop(); queue.removeOnFileDescriptorEventListener(fd); onExit(); looper.quitSafely(); return 0; } return eventsOfInterest; } }); looper.loop(); }
@java.lang.Override public int onFileDescriptorEvents(java.io.FileDescriptor fd, int events) { android.util.Log.e("XXX", ((("fd " + fd) + " got ") + events)); final boolean hasInput = (events & (EVENT_INPUT)) != 0; android.util.Log.e("XXX", ("hasInput " + hasInput)); final boolean hasError = (events & (EVENT_ERROR)) != 0; android.util.Log.e("XXX", ("hasError " + hasError)); if (hasError || (hasInput && (!(handleInput())))) { stop(); queue.removeOnFileDescriptorEventListener(fd); onExit(); looper.quitSafely(); return 0; } return eventsOfInterest; }
private boolean handleInput() { while (isRunning()) { final int bytesRead; try { libcore.io.IoUtils.setBlocking(mSocket, false); bytesRead = android.system.Os.read(mSocket, mPacket, 0, mPacket.length); if (bytesRead < 1) { if (isRunning()) logError("Socket closed, exiting", null); break; } (mPacketsReceived)++; } catch (android.system.ErrnoException e) { if ((e.errno) == (android.system.OsConstants.EAGAIN)) { return true; } if ((e.errno) != (android.system.OsConstants.EINTR)) { if (isRunning()) logError("read error: ", e); break; } continue; } catch (java.io.IOException ioe) { if (isRunning()) logError("read error: ", ioe); continue; } try { handlePacket(mPacket, bytesRead); } catch (java.lang.Exception e) { logError("Unexpected exception: ", e); break; } } return false; }
public static final void closeSocket(@android.annotation.Nullable java.io.FileDescriptor fd) { if (fd == null) return; try { libcore.io.IoBridge.closeAndSignalBlockedThreads(fd); } catch (java.io.IOException ignored) { } libcore.io.IoUtils.closeQuietly(fd); }
void waitForActivity() throws java.lang.Exception { assertTrue(mLatch.await(5000, java.util.concurrent.TimeUnit.MILLISECONDS)); resetLatch(); }
@java.lang.Override public void tearDown(com.android.tradefed.device.ITestDevice device, com.android.tradefed.build.IBuildInfo buildInfo, java.lang.Throwable throwable) throws com.android.tradefed.device.DeviceNotAvailableException { if ((mVenvDir) != null) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.recursiveDelete(mVenvDir.toPath()); com.android.tradefed.log.LogUtil.CLog.i("Deleted the virtual env's temp working dir, %s.", mVenvDir); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e("Failed to delete %s: %s", mVenvDir, e); } mVenvDir = null; } }
private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException { getZoneStringsImpl(false); stream.defaultWriteObject(); }
private java.lang.String[][] getZoneStringsImpl(boolean needsCopy) { if ((zoneStrings) == null) { zoneStrings = libcore.icu.TimeZoneNames.getZoneStrings(locale); } if (!needsCopy) { return zoneStrings; } int len = zoneStrings.length; java.lang.String[][] aCopy = new java.lang.String[len][]; for (int i = 0; i < len; i++) { aCopy[i] = java.util.Arrays.copyOf(zoneStrings[i], zoneStrings[i].length); } return aCopy; }
private static java.util.Set<java.lang.String> separateAcknowledged(java.util.Set<java.lang.String> testCases, java.util.List<com.android.vts.entity.DeviceInfoEntity> devices, java.util.List<TestAcknowledgementEntity> acks) { java.util.Set<java.lang.String> acknowledged = new java.util.HashSet<>(); for (TestAcknowledgementEntity ack : acks) { boolean allDevices = ((ack.devices) == null) || ((ack.devices.size()) == 0); boolean allBranches = ((ack.branches) == null) || ((ack.branches.size()) == 0); boolean isRelevant = allDevices && allBranches; if (!isRelevant) { for (com.android.vts.entity.DeviceInfoEntity device : devices) { boolean deviceAcknowledged = allDevices || (ack.devices.contains(device.buildFlavor)); boolean branchAcknowledged = allBranches || (ack.branches.contains(device.branch)); if (deviceAcknowledged && branchAcknowledged) isRelevant = true; } } if (isRelevant) { boolean allTestCases = ((ack.testCaseNames) == null) || ((ack.testCaseNames.size()) == 0); if (allTestCases) { acknowledged.addAll(testCases); testCases.removeAll(acknowledged); } else { for (java.lang.String testCase : ack.testCaseNames) { if (testCases.contains(testCase)) { acknowledged.add(testCase); testCases.remove(testCase); } } } } } return acknowledged; }
private static java.util.List<com.android.vts.entity.TestAcknowledgementEntity> getTestCaseAcknowledgements(com.google.appengine.api.datastore.Key testKey) { com.google.appengine.api.datastore.DatastoreService datastore = com.google.appengine.api.datastore.DatastoreServiceFactory.getDatastoreService(); java.util.List<com.android.vts.entity.TestAcknowledgementEntity> acks = new java.util.ArrayList<>(); com.google.appengine.api.datastore.Query.Filter testFilter = new com.google.appengine.api.datastore.Query.FilterPredicate(com.android.vts.entity.TestAcknowledgementEntity.TEST_KEY, Query.FilterOperator.EQUAL, testKey); com.google.appengine.api.datastore.Query q = new com.google.appengine.api.datastore.Query(com.android.vts.entity.TestAcknowledgementEntity.KIND).setFilter(testFilter); for (com.google.appengine.api.datastore.Entity ackEntity : datastore.prepare(q).asIterable()) { com.android.vts.entity.TestAcknowledgementEntity ack = com.android.vts.entity.TestAcknowledgementEntity.fromEntity(ackEntity); if (ack == null) continue; acks.add(ack); } return acks; }
public final java.lang.invoke.MethodType accessModeType(java.lang.invoke.VarHandle.AccessMode accessMode) { java.lang.invoke.VarHandle.unsupported("VarHandle.accessModeType()"); return null; }
public static void loadLoadFence() { java.lang.invoke.VarHandle.unsupported("VarHandle.loadLoadFence()"); }
public static void storeStoreFence() { java.lang.invoke.VarHandle.unsupported("VarHandle.storeStoreFence()"); }
public final java.lang.invoke.MethodHandle toMethodHandle(java.lang.invoke.VarHandle.AccessMode accessMode) { throw new java.lang.UnsupportedOperationException("Not implemented"); }
public final boolean isAccessModeSupported(java.lang.invoke.VarHandle.AccessMode accessMode) { java.lang.invoke.VarHandle.unsupported("VarHandle.isAccessModeSupport()"); return false; }
public void updatePreferenceIntents(android.support.v7.preference.PreferenceGroup prefs, final java.lang.String acccountType, android.accounts.Account account) { final android.content.pm.PackageManager pm = mFragment.getActivity().getPackageManager(); for (int i = 0; i < (prefs.getPreferenceCount());) { android.support.v7.preference.Preference pref = prefs.getPreference(i); if (pref instanceof android.support.v7.preference.PreferenceGroup) { updatePreferenceIntents(((android.support.v7.preference.PreferenceGroup) (pref)), acccountType, account); } android.content.Intent intent = pref.getIntent(); if (intent != null) { if (android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS.equals(intent.getAction())) { pref.setOnPreferenceClickListener(new com.android.settings.accounts.AccountTypePreferenceLoader.FragmentStarter(com.android.settings.location.LocationSettings.class.getName(), R.string.location_settings_title)); } else { android.content.pm.ResolveInfo ri = pm.resolveActivityAsUser(intent, PackageManager.MATCH_DEFAULT_ONLY, mUserHandle.getIdentifier()); if (ri == null) { prefs.removePreference(pref); continue; } intent.putExtra(com.android.settings.accounts.AccountTypePreferenceLoader.ACCOUNT_KEY, account); intent.setFlags(((intent.getFlags()) | (android.content.Intent.FLAG_ACTIVITY_NEW_TASK))); pref.setOnPreferenceClickListener(new android.support.v7.preference.Preference.OnPreferenceClickListener() { @java.lang.Override public boolean onPreferenceClick(android.support.v7.preference.Preference preference) { android.content.Intent prefIntent = preference.getIntent(); if (isSafeIntent(pm, prefIntent, acccountType)) { mFragment.getActivity().startActivityAsUser(prefIntent, mUserHandle); } else { android.util.Log.e(com.android.settings.accounts.AccountTypePreferenceLoader.TAG, (("Refusing to launch authenticator intent because" + "it exploits Settings permissions: ") + prefIntent)); } return true; } }); } } i++; } }
@java.lang.Override public void onRestoreInstanceState(android.os.Bundle savedInstanceState) { super.onRestoreInstanceState(savedInstanceState); mTextMsg = savedInstanceState.getParcelable(com.android.stk.StkDialogActivity.TEXT); mTimeoutIntent = savedInstanceState.getParcelable(com.android.stk.StkDialogActivity.TIMEOUT_INTENT); mSlotId = savedInstanceState.getInt(com.android.stk.StkDialogActivity.SLOT_ID); appService.getStkContext(mSlotId).setPendingDialogInstance(this); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkDialogActivity.LOG_TAG, (("onRestoreInstanceState - [" + (mTextMsg)) + "]")); }
@java.lang.Override public void onSaveInstanceState(android.os.Bundle outState) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkDialogActivity.LOG_TAG, "onSaveInstanceState"); super.onSaveInstanceState(outState); outState.putParcelable(com.android.stk.StkDialogActivity.TEXT, mTextMsg); outState.putParcelable(com.android.stk.StkDialogActivity.TIMEOUT_INTENT, mTimeoutIntent); outState.putInt(com.android.stk.StkDialogActivity.SLOT_ID, mSlotId); }
@java.lang.Override public void onDestroy() { super.onDestroy(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkDialogActivity.LOG_TAG, ((("onDestroy - mIsResponseSent[" + (mIsResponseSent)) + "], sim id: ") + (mSlotId))); if (!(isChangingConfigurations())) { if (((!(mIsResponseSent)) && ((appService) != null)) && (!(appService.isDialogPending(mSlotId)))) { sendResponse(StkAppService.RES_ID_CONFIRM, false); } cancelTimeOut(); } if ((mBroadcastReceiver) != null) { unregisterReceiver(mBroadcastReceiver); } }
private void generateMethodTest1(org.objectweb.asm.ClassVisitor cv) { org.objectweb.asm.MethodVisitor mv = cv.visitMethod(((org.objectweb.asm.Opcodes.ACC_PUBLIC) + (org.objectweb.asm.Opcodes.ACC_STATIC)), "test1", "()Ljava/lang/invoke/MethodHandle;", null, null); java.lang.invoke.MethodType mt = java.lang.invoke.MethodType.methodType(java.lang.Class.class); org.objectweb.asm.Handle bootstrap = new org.objectweb.asm.Handle(org.objectweb.asm.Opcodes.H_INVOKESTATIC, org.objectweb.asm.Type.getInternalName(java.lang.Object.class), "getClass", mt.toMethodDescriptorString(), false); mv.visitLdcInsn(bootstrap); mv.visitInsn(Opcodes.ARETURN); mv.visitMaxs((-1), (-1)); }
private void generateMethodMain(org.objectweb.asm.ClassVisitor cv) { org.objectweb.asm.MethodVisitor mv = cv.visitMethod(((org.objectweb.asm.Opcodes.ACC_PUBLIC) + (org.objectweb.asm.Opcodes.ACC_STATIC)), "main", "([Ljava/lang/String;)V", null, null); java.lang.String internalName = org.objectweb.asm.Type.getInternalName(constmethodhandle.ConstTest.class); mv.visitMethodInsn(Opcodes.INVOKESTATIC, internalName, "test1", "()Ljava/lang/invoke/MethodHandle;", false); mv.visitMethodInsn(Opcodes.INVOKESTATIC, internalName, "test2", "()Ljava/lang/invoke/MethodType;", false); mv.visitInsn(Opcodes.RETURN); mv.visitMaxs((-1), (-1)); }
public static int magicToApi(byte[] magic) { if ((magic.length) != 8) { return -1; } if ((((((magic[0]) != 'd') || ((magic[1]) != 'e')) || ((magic[2]) != 'x')) || ((magic[3]) != '\n')) || ((magic[7]) != '\u0000')) { return -1; } java.lang.String version = (("" + ((char) (magic[4]))) + ((char) (magic[5]))) + ((char) (magic[6])); if (version.equals(com.android.dex.DexFormat.VERSION_FOR_API_13)) { return com.android.dex.DexFormat.API_NO_EXTENDED_OPCODES; } else if (version.equals(com.android.dex.DexFormat.VERSION_FOR_API_24)) { return com.android.dex.DexFormat.API_DEFAULT_INTERFACE_METHODS; } else if (version.equals(com.android.dex.DexFormat.VERSION_FOR_API_26)) { return com.android.dex.DexFormat.API_INVOKE_POLYMORPHIC; } else if (version.equals(com.android.dex.DexFormat.VERSION_FOR_API_27)) { return com.android.dex.DexFormat.API_CONST_METHOD_HANDLE; } else if (version.equals(com.android.dex.DexFormat.VERSION_CURRENT)) { return com.android.dex.DexFormat.API_CURRENT; } return -1; }
public final boolean isFilterFlagSet(int flag) { if ((mCallbackFilterFlags) == (android.telephony.mbms.DownloadStateCallback.ALL_UPDATES)) { return true; } return ((mCallbackFilterFlags) & flag) > 0; }
private void stopObexServerSession() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Pbap Service stopObexServerSession"); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_ACQUIRE_WAKE_LOCK); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_RELEASE_WAKE_LOCK); if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if (((mAdapter) != null) && (mAdapter.isEnabled())) { startSocketListeners(); } if ((mState) != (android.bluetooth.BluetoothPbap.STATE_DISCONNECTED)) setState(BluetoothPbap.STATE_DISCONNECTED); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj instanceof android.net.IpSecConfig.Flow) == false) return false; android.net.IpSecConfig.Flow rhs = ((android.net.IpSecConfig.Flow) (obj)); return (((mSpiResourceId) == (rhs.mSpiResourceId)) && ((((mEncryption) != null) && (mEncryption.equals(rhs.mEncryption))) || ((mEncryption) == (rhs.mEncryption)))) && ((((mAuthentication) != null) && (mAuthentication.equals(rhs.mAuthentication))) || ((mAuthentication) == (rhs.mAuthentication))); }
android.net.IpSecConfig buildIpSecConfig() throws java.lang.Exception { android.net.IpSecManager ipSecManager = new android.net.IpSecManager(mIpSecService); when(mMockNetd.ipSecAllocateSpi(anyInt(), anyInt(), anyString(), anyString(), anyInt())).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI2); android.net.IpSecAlgorithm encryptAlgo = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, com.android.server.IpSecServiceTest.CRYPT_KEY); android.net.IpSecAlgorithm authAlgo = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, com.android.server.IpSecServiceTest.AUTH_KEY, ((com.android.server.IpSecServiceTest.AUTH_KEY.length) * 8)); java.net.InetAddress localAddr = java.net.InetAddress.getByAddress(new byte[]{ 127, 0, 0, 1 }); java.net.InetAddress remoteAddr = java.net.InetAddress.getByAddress(new byte[]{ 8, 8, 4, 4 }); android.net.IpSecManager.SecurityParameterIndex outSpi = ipSecManager.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, localAddr); android.net.IpSecManager.SecurityParameterIndex inSpi = ipSecManager.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_IN, localAddr); android.net.IpSecConfig config = new android.net.IpSecConfig(); config.setSpiResourceId(IpSecTransform.DIRECTION_IN, inSpi.getResourceId()); config.setSpiResourceId(IpSecTransform.DIRECTION_OUT, outSpi.getResourceId()); config.setEncryption(IpSecTransform.DIRECTION_OUT, encryptAlgo); config.setAuthentication(IpSecTransform.DIRECTION_OUT, authAlgo); config.setEncryption(IpSecTransform.DIRECTION_IN, encryptAlgo); config.setAuthentication(IpSecTransform.DIRECTION_IN, authAlgo); config.setRemoteAddress(remoteAddr); return config; }
public android.net.IpSecTransform buildTransportModeTransform(java.net.InetAddress remoteAddress) throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { mConfig.setMode(android.net.IpSecTransform.MODE_TRANSPORT); mConfig.setRemoteAddress(remoteAddress); return new android.net.IpSecTransform(mContext, mConfig).activate(); }
@com.android.internal.annotations.VisibleForTesting int getResourceId() { return mResourceId; }
public java.net.InetAddress getLocalAddress() { return mLocalAddress; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj instanceof android.net.IpSecAlgorithm) == false) return false; android.net.IpSecAlgorithm rhs = ((android.net.IpSecAlgorithm) (obj)); return ((mName.equals(rhs.mName)) && (java.util.Arrays.equals(mKey, rhs.mKey))) && ((mTruncLenBits) == (rhs.mTruncLenBits)); }
public android.net.IpSecTransform buildTunnelModeTransform(java.net.InetAddress localAddress, java.net.InetAddress remoteAddress) { mConfig.setLocalAddress(localAddress); mConfig.setRemoteAddress(remoteAddress); mConfig.setMode(android.net.IpSecTransform.MODE_TUNNEL); return new android.net.IpSecTransform(mContext, mConfig); }
private void assertParcelingIsLossless(android.net.IpSecConfig ci) throws java.lang.Exception { android.os.Parcel p = android.os.Parcel.obtain(); ci.writeToParcel(p, 0); p.setDataPosition(0); android.net.IpSecConfig co = IpSecConfig.CREATOR.createFromParcel(p); assertEquals(co, ci); }
@java.lang.Override public synchronized android.net.IpSecSpiResponse reserveSecurityParameterIndex(int direction, java.lang.String remoteAddress, int requestedSpi, android.os.IBinder binder) throws android.os.RemoteException { com.android.server.IpSecService.checkDirectionAndThrow(direction); com.android.server.IpSecService.checkInetAddressAndThrow(remoteAddress); checkNotNull(binder, "Null Binder passed to reserveSecurityParameterIndex"); int resourceId = com.android.server.IpSecService.mNextResourceId.getAndIncrement(); int spi = android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX; java.lang.String localAddress = ""; try { if (!(mUserQuotaTracker.getUserRecord(android.os.Binder.getCallingUid()).spi.isAvailable())) { return new android.net.IpSecSpiResponse(IpSecManager.Status.RESOURCE_UNAVAILABLE, android.net.IpSecManager.INVALID_RESOURCE_ID, spi); } spi = mSrvConfig.getNetdInstance().ipSecAllocateSpi(resourceId, direction, localAddress, remoteAddress, requestedSpi); android.util.Log.d(com.android.server.IpSecService.TAG, ("Allocated SPI " + spi)); mSpiRecords.put(resourceId, new com.android.server.IpSecService.SpiRecord(resourceId, binder, direction, localAddress, remoteAddress, spi)); } catch (android.os.ServiceSpecificException e) { return new android.net.IpSecSpiResponse(IpSecManager.Status.SPI_UNAVAILABLE, android.net.IpSecManager.INVALID_RESOURCE_ID, spi); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return new android.net.IpSecSpiResponse(IpSecManager.Status.OK, resourceId, spi); }
@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mMode); out.writeString(((mLocalAddress) != null ? mLocalAddress.getHostAddress() : null)); out.writeString(((mRemoteAddress) != null ? mRemoteAddress.getHostAddress() : null)); out.writeParcelable(mNetwork, flags); out.writeInt(mFlow[IpSecTransform.DIRECTION_IN].mSpiResourceId); out.writeParcelable(mFlow[IpSecTransform.DIRECTION_IN].mEncryption, flags); out.writeParcelable(mFlow[IpSecTransform.DIRECTION_IN].mAuthentication, flags); out.writeInt(mFlow[IpSecTransform.DIRECTION_OUT].mSpiResourceId); out.writeParcelable(mFlow[IpSecTransform.DIRECTION_OUT].mEncryption, flags); out.writeParcelable(mFlow[IpSecTransform.DIRECTION_OUT].mAuthentication, flags); out.writeInt(mEncapType); out.writeInt(mEncapSocketResourceId); out.writeInt(mEncapRemotePort); }
public void setLocalAddress(java.net.InetAddress localAddress) { mLocalAddress = localAddress; }
public void setRemoteAddress(java.net.InetAddress remoteAddress) { mRemoteAddress = remoteAddress; }
private static void checkInetAddressAndThrow(java.lang.String inetAddress) { try { java.net.InetAddress.getByName(inetAddress).getAddress(); } catch (java.net.UnknownHostException e) { throw new java.lang.IllegalArgumentException(("Invalid InetAddress: " + inetAddress)); } }
@org.junit.runners.Parameterized.Parameters public static java.util.Collection ipSecConfigs() { return java.util.Arrays.asList(new java.lang.Object[][]{ new java.lang.Object[]{ android.system.OsConstants.AF_INET, "", "8.8.4.4" }, new java.lang.Object[]{ android.system.OsConstants.AF_INET6, "", "2601::10" } }); }
private static void checkDirectionAndThrow(int direction) { switch (direction) { case android.net.IpSecTransform.DIRECTION_OUT : case android.net.IpSecTransform.DIRECTION_IN : return; } throw new java.lang.IllegalArgumentException(("Invalid Direction: " + direction)); }
private void checkIpSecConfigAndThrow(android.net.IpSecConfig config) { switch (config.getMode()) { case android.net.IpSecTransform.MODE_TUNNEL : case android.net.IpSecTransform.MODE_TRANSPORT : break; default : throw new java.lang.IllegalArgumentException(("Invalid IpSecTransform.mode: " + (config.getMode()))); } checkNotNull(config.getRemoteAddress(), "Invalid Remote InetAddress"); switch (config.getEncapType()) { case android.net.IpSecTransform.ENCAP_NONE : break; case android.net.IpSecTransform.ENCAP_ESPINUDP : case android.net.IpSecTransform.ENCAP_ESPINUDP_NON_IKE : checkNotNull(mUdpSocketRecords.get(config.getEncapSocketResourceId()), "No Encapsulation socket for specified Resource Id"); int port = config.getEncapRemotePort(); if ((port == 0) || ((port & -65536) != 0)) { throw new java.lang.IllegalArgumentException(("Invalid remote UDP port: " + port)); } break; default : throw new java.lang.IllegalArgumentException(("Invalid Encap Type: " + (config.getEncapType()))); } for (int direction : com.android.server.IpSecService.DIRECTIONS) { android.net.IpSecAlgorithm crypt = config.getEncryption(direction); android.net.IpSecAlgorithm auth = config.getAuthentication(direction); if ((crypt == null) && (auth == null)) { throw new java.lang.IllegalArgumentException("Encryption and Authentication are both null"); } checkNotNull(mSpiRecords.get(config.getSpiResourceId(direction)), "No SPI for specified Resource Id"); } }
public java.net.InetAddress getRemoteAddress() { return mRemoteAddress; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj instanceof android.net.IpSecConfig) == false) return false; android.net.IpSecConfig rhs = ((android.net.IpSecConfig) (obj)); return ((((((((((mMode) == (rhs.mMode)) && (mLocalAddress.equals(rhs.mLocalAddress))) && (mRemoteAddress.equals(rhs.mRemoteAddress))) && ((((mNetwork) != null) && (mNetwork.equals(rhs.mNetwork))) || ((mNetwork) == (rhs.mNetwork)))) && ((mEncapType) == (rhs.mEncapType))) && ((mEncapSocketResourceId) == (rhs.mEncapSocketResourceId))) && ((mEncapRemotePort) == (rhs.mEncapRemotePort))) && ((mNattKeepaliveInterval) == (rhs.mNattKeepaliveInterval))) && (mFlow[IpSecTransform.DIRECTION_OUT].equals(rhs.mFlow[IpSecTransform.DIRECTION_OUT]))) && (mFlow[IpSecTransform.DIRECTION_IN].equals(rhs.mFlow[IpSecTransform.DIRECTION_IN])); }
private void onQueryComplete(android.os.AsyncResult ar) { java.lang.StringBuilder sb = new java.lang.StringBuilder(getScString()); sb.append("\n"); if ((ar.exception) != null) { mState = State.FAILED; if ((ar.exception) instanceof com.android.ims.ImsException) { com.android.ims.ImsException error = ((com.android.ims.ImsException) (ar.exception)); if ((error.getCode()) == (com.android.ims.ImsReasonInfo.CODE_FDN_BLOCKED)) { sb.append(mContext.getText(com.android.internal.R.string.mmiFdnError)); } else if ((error.getMessage()) != null) { sb.append(error.getMessage()); } else { sb.append(getErrorMessage(ar)); } } else { sb.append(getErrorMessage(ar)); } } else { int[] ints = ((int[]) (ar.result)); if ((ints.length) != 0) { if ((ints[0]) == 0) { sb.append(mContext.getText(com.android.internal.R.string.serviceDisabled)); } else if (mSc.equals(com.android.internal.telephony.imsphone.ImsPhoneMmiCode.SC_WAIT)) { sb.append(createQueryCallWaitingResultMessage(ints[1])); } else if ((ints[0]) == 1) { sb.append(mContext.getText(com.android.internal.R.string.serviceEnabled)); } else { sb.append(mContext.getText(com.android.internal.R.string.mmiError)); } } else { sb.append(mContext.getText(com.android.internal.R.string.mmiError)); } mState = State.COMPLETE; } mMessage = sb; mPhone.onMMIDone(this); }
private java.lang.CharSequence getErrorMessage(android.os.AsyncResult ar) { if ((ar.exception) instanceof com.android.internal.telephony.CommandException) { com.android.internal.telephony.CommandException err = ((com.android.internal.telephony.CommandException) (ar.exception)); if ((err.getCommandError()) == (CommandException.Error.FDN_CHECK_FAILURE)) { return mContext.getText(com.android.internal.R.string.mmiFdnError); } } return mContext.getText(com.android.internal.R.string.mmiError); }
private void onIcbQueryComplete(android.os.AsyncResult ar) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhoneMmiCode.LOG_TAG, "onIcbQueryComplete "); java.lang.StringBuilder sb = new java.lang.StringBuilder(getScString()); sb.append("\n"); if ((ar.exception) != null) { mState = State.FAILED; if ((ar.exception) instanceof com.android.ims.ImsException) { com.android.ims.ImsException error = ((com.android.ims.ImsException) (ar.exception)); if ((error.getCode()) == (com.android.ims.ImsReasonInfo.CODE_FDN_BLOCKED)) { sb.append(mContext.getText(com.android.internal.R.string.mmiFdnError)); } else if ((error.getMessage()) != null) { sb.append(error.getMessage()); } else { sb.append(getErrorMessage(ar)); } } else { sb.append(getErrorMessage(ar)); } } else { com.android.ims.ImsSsInfo[] infos = ((com.android.ims.ImsSsInfo[]) (ar.result)); if ((infos.length) == 0) { sb.append(mContext.getText(com.android.internal.R.string.serviceDisabled)); } else { for (int i = 0, s = infos.length; i < s; i++) { if ((infos[i].mIcbNum) != null) { sb.append((((("Num: " + (infos[i].mIcbNum)) + " status: ") + (infos[i].mStatus)) + "\n")); } else if ((infos[i].mStatus) == 1) { sb.append(mContext.getText(com.android.internal.R.string.serviceEnabled)); } else { sb.append(mContext.getText(com.android.internal.R.string.serviceDisabled)); } } } mState = State.COMPLETE; } mMessage = sb; mPhone.onMMIDone(this); }
private void onQueryCfComplete(android.os.AsyncResult ar) { java.lang.StringBuilder sb = new java.lang.StringBuilder(getScString()); sb.append("\n"); if ((ar.exception) != null) { mState = State.FAILED; if ((ar.exception) instanceof com.android.ims.ImsException) { com.android.ims.ImsException error = ((com.android.ims.ImsException) (ar.exception)); if ((error.getCode()) == (com.android.ims.ImsReasonInfo.CODE_FDN_BLOCKED)) { sb.append(mContext.getText(com.android.internal.R.string.mmiFdnError)); } else if ((error.getMessage()) != null) { sb.append(error.getMessage()); } else { sb.append(getErrorMessage(ar)); } } else { sb.append(getErrorMessage(ar)); } } else { com.android.internal.telephony.CallForwardInfo[] infos; infos = ((com.android.internal.telephony.CallForwardInfo[]) (ar.result)); if ((infos.length) == 0) { sb.append(mContext.getText(com.android.internal.R.string.serviceDisabled)); if ((mIccRecords) != null) { mPhone.setVoiceCallForwardingFlag(1, false, null); } } else { android.text.SpannableStringBuilder tb = new android.text.SpannableStringBuilder(); for (int serviceClassMask = 1; serviceClassMask <= (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_MAX); serviceClassMask <<= 1) { for (int i = 0, s = infos.length; i < s; i++) { if ((serviceClassMask & (infos[i].serviceClass)) != 0) { tb.append(makeCFQueryResultMessage(infos[i], serviceClassMask)); tb.append("\n"); } } } sb.append(tb); } mState = State.COMPLETE; } mMessage = sb; mPhone.onMMIDone(this); }
void onBluetoothReady() { com.android.bluetooth.btservice.AdapterProperties.debugLog(((("onBluetoothReady, state=" + (getState())) + ", ScanMode = ") + (mScanMode))); synchronized(mObject) { if (((getState()) == (android.bluetooth.BluetoothAdapter.STATE_TURNING_ON)) && ((mScanMode) == (android.bluetooth.BluetoothAdapter.SCAN_MODE_NONE))) { if ((mDiscoverableTimeout) != 0) setScanMode(AbstractionLayer.BT_SCAN_MODE_CONNECTABLE); else setScanMode(AbstractionLayer.BT_SCAN_MODE_CONNECTABLE_DISCOVERABLE); setDiscoverableTimeout(mDiscoverableTimeout); } } }
void onBluetoothDisable() { com.android.bluetooth.btservice.AdapterProperties.debugLog("onBluetoothDisable()"); mBluetoothDisabling = true; if ((getState()) == (android.bluetooth.BluetoothAdapter.STATE_TURNING_OFF)) { mService.cancelDiscovery(); setScanMode(AbstractionLayer.BT_SCAN_MODE_NONE); } setConnectionState(BluetoothAdapter.STATE_DISCONNECTED); }
private synchronized void startSocketListeners() { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "startsocketListener"); if ((mServerSession) != null) { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "mServerSession exists - shutting it down..."); mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if ((mServerSockets) != null) { mServerSockets.prepareForNewConnect(); } else { mServerSockets = com.android.bluetooth.ObexServerSockets.create(this); if ((mServerSockets) == null) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Failed to start the listeners"); return; } cleanUpSdpRecord(); mSdpHandle = com.android.bluetooth.sdp.SdpManager.getDefaultManager().createPbapPseRecord("OBEX Phonebook Access Server", mServerSockets.getRfcommChannel(), mServerSockets.getL2capPsm(), com.android.bluetooth.pbap.BluetoothPbapService.SDP_PBAP_SERVER_VERSION, com.android.bluetooth.pbap.BluetoothPbapService.SDP_PBAP_SUPPORTED_REPOSITORIES, com.android.bluetooth.pbap.BluetoothPbapService.SDP_PBAP_SUPPORTED_FEATURES); com.android.bluetooth.pbap.BluetoothPbapUtils.fetchPbapParams(mContext); if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("PBAP server with handle:" + (mSdpHandle))); } }
private void cleanUpSdpRecord() { if ((mSdpHandle) < 0) { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "cleanUpSdpRecord, SDP record never created"); return; } com.android.bluetooth.sdp.SdpManager sdpManager = com.android.bluetooth.sdp.SdpManager.getDefaultManager(); if (sdpManager == null) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("cleanUpSdpRecord failed, sdpManager is null, mSdpHandle=" + (mSdpHandle))); return; } android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("cleanUpSdpRecord, mSdpHandle=" + (mSdpHandle))); if (!(sdpManager.removeSdpRecord(mSdpHandle))) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("cleanUpSdpRecord, removeSdpRecord failed, mSdpHandle=" + (mSdpHandle))); return; } mSdpHandle = -1; }
public void testPlusSign() { java.lang.String pattern = "+0;-0"; assertEquals("+100", new java.text.DecimalFormat(pattern, new java.text.DecimalFormatSymbols(java.util.Locale.US)).format(123)); java.util.Locale locale = new java.util.Locale("ar"); android.icu.text.DecimalFormatSymbols icuDfs = new android.icu.text.DecimalFormatSymbols(locale); assertEquals("\u061c+", icuDfs.getPlusSignString()); java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(locale); assertEquals("+١٢٣", new java.text.DecimalFormat(pattern, dfs).format(123)); }
public void testPerMill() { java.lang.String pattern = "0.00\u2030"; double number = 0.1; java.text.DecimalFormatSymbols dfs; android.icu.text.DecimalFormatSymbols icuDfs; java.util.Locale locale; locale = java.util.Locale.US; dfs = new java.text.DecimalFormatSymbols(locale); assertEquals("100.00\u2030", new java.text.DecimalFormat(pattern, dfs).format(number)); dfs = new java.text.DecimalFormatSymbols(locale); dfs.setPerMill(';'); assertEquals("100.00;", new java.text.DecimalFormat(pattern, dfs).format(number)); locale = new java.util.Locale("ar"); icuDfs = new android.icu.text.DecimalFormatSymbols(locale); assertEquals("؉", icuDfs.getPerMillString()); dfs = new java.text.DecimalFormatSymbols(locale); assertEquals("١٠٠٫٠٠؉", new java.text.DecimalFormat(pattern, dfs).format(number)); locale = new java.util.Locale("en_US_POSIX"); icuDfs = new android.icu.text.DecimalFormatSymbols(locale); assertEquals("0/00", icuDfs.getPerMillString()); dfs = new java.text.DecimalFormatSymbols(locale); assertEquals("100.00\u2030", new java.text.DecimalFormat(pattern, dfs).format(number)); }
public boolean connectToNetwork(@android.annotation.NonNull android.net.wifi.WifiConfiguration config) { logd(("connectToNetwork " + (config.configKey()))); if (com.android.server.wifi.WifiConfigurationUtil.isSameNetwork(config, mCurrentNetworkLocalConfig)) { logd("Network is already saved, will not trigger remove and add operation."); } else if (com.android.server.wifi.WifiConfigurationUtil.isSameNetworkWithDifferentBssid(config, mCurrentNetworkLocalConfig)) { logd("Network is already saved, but need to update BSSID."); if (!(setCurrentNetworkBssid(config.getNetworkSelectionStatus().getNetworkSelectionBSSID()))) { loge("Failed to set current network BSSID."); return false; } mCurrentNetworkLocalConfig = new android.net.wifi.WifiConfiguration(config); } else { mCurrentNetworkRemoteHandle = null; mCurrentNetworkLocalConfig = null; if (!(removeAllNetworks())) { loge("Failed to remove existing networks"); return false; } android.util.Pair<com.android.server.wifi.SupplicantStaNetworkHal, android.net.wifi.WifiConfiguration> pair = addNetworkAndSaveConfig(config); if (pair == null) { loge(("Failed to add/save network configuration: " + (config.configKey()))); return false; } mCurrentNetworkRemoteHandle = pair.first; mCurrentNetworkLocalConfig = pair.second; } if (!(mCurrentNetworkRemoteHandle.select())) { loge(("Failed to select network configuration: " + (config.configKey()))); return false; } return true; }
public static boolean isSameNetwork(android.net.wifi.WifiConfiguration config, android.net.wifi.WifiConfiguration config1) { if ((config == null) && (config1 == null)) { return true; } if (!(com.android.server.wifi.WifiConfigurationUtil.isSameNetworkInternal(config, config1))) { return false; } java.lang.String networkSelectionBSSID = config.getNetworkSelectionStatus().getNetworkSelectionBSSID(); java.lang.String networkSelectionBSSID1 = config1.getNetworkSelectionStatus().getNetworkSelectionBSSID(); if (!(java.util.Objects.equals(networkSelectionBSSID, networkSelectionBSSID1))) { return false; } return true; }
private void changeLanguage(java.lang.String language) throws android.os.RemoteException { android.app.IActivityManager am = android.app.ActivityManagerNative.getDefault(); android.content.res.Configuration config = am.getConfiguration(); java.util.Locale loc = new java.util.Locale(language); config.locale = loc; config.userSetLocale = true; am.updateConfiguration(config); }
protected void onUpdateIccAvailability() { if ((mUiccController) == null) { return; } com.android.internal.telephony.uicc.UiccCardApplication newUiccApplication = getUiccCardApplication(); if ((mUiccApplcation) != newUiccApplication) { mIsSimReady = false; if ((mUiccApplcation) != null) { log("Removing stale icc objects."); mUiccApplcation.unregisterForReady(this); mUiccApplcation.unregisterForLocked(this); if ((mIccRecords) != null) { mIccRecords.unregisterForRecordsLoaded(this); } mIccRecords = null; mUiccApplcation = null; } if (newUiccApplication != null) { log("New card found"); mUiccApplcation = newUiccApplication; mIccRecords = mUiccApplcation.getIccRecords(); if (mPhone.isPhoneTypeGsm()) { mUiccApplcation.registerForReady(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_READY, null); mUiccApplcation.registerForLocked(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_LOCKED, null); if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_RECORDS_LOADED, null); } } else if (mIsSubscriptionFromRuim) { mUiccApplcation.registerForReady(this, com.android.internal.telephony.ServiceStateTracker.EVENT_RUIM_READY, null); if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.ServiceStateTracker.EVENT_RUIM_RECORDS_LOADED, null); } } } } }
@java.lang.Override public void enter() { final boolean filter802_3Frames = mContext.getResources().getBoolean(R.bool.config_apfDrop802_3Frames); final int[] ethTypeBlackList = mContext.getResources().getIntArray(R.array.config_apfEthTypeBlackList); mApfFilter = android.net.apf.ApfFilter.maybeCreate(mConfiguration.mApfCapabilities, mNetworkInterface, mCallback, mMulticastFiltering, filter802_3Frames, ethTypeBlackList); if ((mApfFilter) == null) { mCallback.setFallbackMulticastFilter(mMulticastFiltering); } mPacketTracker = createPacketTracker(); if ((mPacketTracker) != null) mPacketTracker.start(mConfiguration.mDisplayName); mNetwork = null; if ((mConfiguration.mEnableIPv6) && (!(startIPv6()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPV6); transitionTo(mStoppingState); return; } if ((mConfiguration.mEnableIPv4) && (!(startIPv4()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPV4); transitionTo(mStoppingState); return; } final android.net.ip.IpManager.InitialConfiguration config = mConfiguration.mInitialConfig; if ((config != null) && (!(applyInitialConfig(config)))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_INVALID_PROVISIONING); transitionTo(mStoppingState); return; } if ((mConfiguration.mUsingIpReachabilityMonitor) && (!(startIpReachabilityMonitor()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPREACHABILITYMONITOR); transitionTo(mStoppingState); return; } }
@java.lang.Override public void exit() { stopDhcpAction(); if ((mIpReachabilityMonitor) != null) { mIpReachabilityMonitor.stop(); mIpReachabilityMonitor = null; } if ((mDhcpClient) != null) { mDhcpClient.sendMessage(DhcpClient.CMD_STOP_DHCP); mDhcpClient.doQuit(); } mNetwork = null; if ((mPacketTracker) != null) { mPacketTracker.stop(); mPacketTracker = null; } if ((mApfFilter) != null) { mApfFilter.shutdown(); mApfFilter = null; } resetLinkProperties(); }
public static void run() throws java.lang.Exception { art.Locals.EnableLocalVariableAccess(); final art.Test1939.TestCase[] MAIN_TEST_CASES = new art.Test1939.TestCase[]{ }; art.Test1939.TestCase test = new art.Test1939.TestCase(art.Test1939.getProxyObject(art.Test1939.Foo.class), art.Test1939.getMethod(art.Test1939.Foo.class, "InterfaceProxyMethod")); test.exec(art.Test1939.NamedGet("This", Locals::GetLocalInstance)); test.exec(art.Test1939.NamedGet("LocalReference0", ( t, d) -> art.Locals.GetLocalVariableObject(t, d, 0))); test.exec(art.Test1939.NamedGet("ProxyFrameLocation", ( t, d) -> java.lang.Long.valueOf(art.Test1939.GetFrameLocation(t, d)))); test.exec(art.Test1939.NamedGet("ProxyFrameMethod", art.Test1939::GetFrameMethod)); }
@org.junit.Test public void testBasicWorking() throws java.lang.Exception { assertTrue(mReceiver.start()); assertTrue(((mLocalSockName) != null)); assertEquals(android.net.util.BlockingSocketReaderTest.LOOPBACK6, mLocalSockName.getAddress()); assertTrue((0 < (mLocalSockName.getPort()))); assertTrue(((mLocalSocket) != null)); assertFalse(mExited); final byte[] one = "one 1".getBytes("UTF-8"); sendPacket(one); waitForActivity(); assertEquals(1, mReceiver.numPacketsReceived()); assertTrue(java.util.Arrays.equals(one, mLastRecvBuf)); assertFalse(mExited); final byte[] two = "two 2".getBytes("UTF-8"); sendPacket(two); waitForActivity(); assertEquals(2, mReceiver.numPacketsReceived()); assertTrue(java.util.Arrays.equals(two, mLastRecvBuf)); assertFalse(mExited); mReceiver.stop(); waitForActivity(); assertEquals(2, mReceiver.numPacketsReceived()); assertTrue(java.util.Arrays.equals(two, mLastRecvBuf)); assertTrue(mExited); }
@org.junit.Test public void testRecordTouchingBuckets() throws java.lang.Exception { final long BUCKET_SIZE = 15 * (MINUTE_IN_MILLIS); stats = new android.net.NetworkStatsHistory(BUCKET_SIZE); final long recordStart = ((android.net.NetworkStatsHistoryTest.TEST_START) + BUCKET_SIZE) - (MINUTE_IN_MILLIS); final long recordEnd = ((android.net.NetworkStatsHistoryTest.TEST_START) + (BUCKET_SIZE * 2)) + ((MINUTE_IN_MILLIS) * 4); stats.recordData(recordStart, recordEnd, new android.net.NetworkStats.Entry(1000L, 2000L, 5000L, 10000L, 100L)); assertEquals(3, stats.size()); android.net.NetworkStatsHistoryTest.assertValues(stats, 0, android.net.MINUTE_IN_MILLIS, 50L, 100L, 250L, 500L, 5L); android.net.NetworkStatsHistoryTest.assertValues(stats, 1, (15 * (MINUTE_IN_MILLIS)), 750L, 1500L, 3750L, 7500L, 75L); android.net.NetworkStatsHistoryTest.assertValues(stats, 2, (4 * (MINUTE_IN_MILLIS)), 200L, 400L, 1000L, 2000L, 20L); }
private void stageFile(int rawId, java.io.File file) throws java.lang.Exception { new java.io.File(file.getParent()).mkdirs(); java.io.InputStream in = null; java.io.OutputStream out = null; try { in = android.support.test.InstrumentationRegistry.getContext().getResources().openRawResource(rawId); out = new java.io.FileOutputStream(file); libcore.io.Streams.copy(in, out); } finally { libcore.io.IoUtils.closeQuietly(in); libcore.io.IoUtils.closeQuietly(out); } }
@org.junit.Test public void testReadLegacyUidTags() throws java.lang.Exception { final java.io.File testFile = new java.io.File(android.support.test.InstrumentationRegistry.getContext().getFilesDir(), com.android.server.net.NetworkStatsCollectionTest.TEST_FILE); stageFile(R.raw.netstats_uid_v4, testFile); final com.android.server.net.NetworkStatsCollection collection = new com.android.server.net.NetworkStatsCollection((30 * (android.text.format.DateUtils.MINUTE_IN_MILLIS))); collection.readLegacyUid(testFile, true); com.android.server.net.NetworkStatsCollectionTest.assertSummaryTotalIncludingTags(collection, buildTemplateMobileAll(com.android.server.net.NetworkStatsCollectionTest.TEST_IMSI), 77017831L, 100995L, 35436758L, 92344L); final java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream(); collection.write(new java.io.DataOutputStream(bos)); collection.reset(); com.android.server.net.NetworkStatsCollectionTest.assertSummaryTotalIncludingTags(collection, buildTemplateMobileAll(com.android.server.net.NetworkStatsCollectionTest.TEST_IMSI), 0L, 0L, 0L, 0L); collection.read(new java.io.ByteArrayInputStream(bos.toByteArray())); com.android.server.net.NetworkStatsCollectionTest.assertSummaryTotalIncludingTags(collection, buildTemplateMobileAll(com.android.server.net.NetworkStatsCollectionTest.TEST_IMSI), 77017831L, 100995L, 35436758L, 92344L); }
@org.junit.Test public void testSerialize() throws java.lang.Exception { final android.net.NetworkStatsHistory before = new android.net.NetworkStatsHistory(MINUTE_IN_MILLIS, 40, android.net.NetworkStatsHistory.FIELD_ALL); before.recordData(0, (4 * (MINUTE_IN_MILLIS)), new android.net.NetworkStats.Entry(1024L, 10L, 2048L, 20L, 4L)); before.recordData(android.net.DAY_IN_MILLIS, ((DAY_IN_MILLIS) + (MINUTE_IN_MILLIS)), new android.net.NetworkStats.Entry(10L, 20L, 30L, 40L, 50L)); final java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(); before.writeToStream(new java.io.DataOutputStream(out)); out.close(); final java.io.ByteArrayInputStream in = new java.io.ByteArrayInputStream(out.toByteArray()); final android.net.NetworkStatsHistory after = new android.net.NetworkStatsHistory(new java.io.DataInputStream(in)); android.net.NetworkStatsHistoryTest.assertFullValues(before, (5 * (MINUTE_IN_MILLIS)), 1034L, 30L, 2078L, 60L, 54L); android.net.NetworkStatsHistoryTest.assertFullValues(after, (5 * (MINUTE_IN_MILLIS)), 1034L, 30L, 2078L, 60L, 54L); }
@org.junit.Test public void testIgnoreFields() throws java.lang.Exception { final android.net.NetworkStatsHistory history = new android.net.NetworkStatsHistory(MINUTE_IN_MILLIS, 0, ((android.net.NetworkStatsHistory.FIELD_RX_BYTES) | (android.net.NetworkStatsHistory.FIELD_TX_BYTES))); history.recordData(0, android.net.MINUTE_IN_MILLIS, new android.net.NetworkStats.Entry(1024L, 10L, 2048L, 20L, 4L)); history.recordData(0, (2 * (MINUTE_IN_MILLIS)), new android.net.NetworkStats.Entry(2L, 2L, 2L, 2L, 2L)); android.net.NetworkStatsHistoryTest.assertFullValues(history, Entry.UNKNOWN, 1026L, Entry.UNKNOWN, 2050L, Entry.UNKNOWN, Entry.UNKNOWN); }
@org.junit.Test public void testRecordEntireGapIdentical() throws java.lang.Exception { final android.net.NetworkStatsHistory stats1 = new android.net.NetworkStatsHistory(HOUR_IN_MILLIS); stats1.recordData(android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + (2 * (HOUR_IN_MILLIS))), 2000L, 1000L); final long TEST_START_2 = (android.net.NetworkStatsHistoryTest.TEST_START) + (DAY_IN_MILLIS); final android.net.NetworkStatsHistory stats2 = new android.net.NetworkStatsHistory(HOUR_IN_MILLIS); stats2.recordData(TEST_START_2, (TEST_START_2 + (2 * (HOUR_IN_MILLIS))), 1000L, 500L); stats = new android.net.NetworkStatsHistory(HOUR_IN_MILLIS); stats.recordEntireHistory(stats1); stats.recordEntireHistory(stats2); android.net.NetworkStatsHistoryTest.assertValues(stats, ((android.net.NetworkStatsHistoryTest.TEST_START) - (WEEK_IN_MILLIS)), ((android.net.NetworkStatsHistoryTest.TEST_START) + (WEEK_IN_MILLIS)), 3000L, 1500L); android.net.NetworkStatsHistoryTest.assertValues(stats, 0, 1000L, 500L); android.net.NetworkStatsHistoryTest.assertValues(stats, 1, 1000L, 500L); android.net.NetworkStatsHistoryTest.assertValues(stats, 2, 500L, 250L); android.net.NetworkStatsHistoryTest.assertValues(stats, 3, 500L, 250L); }
@org.junit.Test public void testReadLegacyNetwork() throws java.lang.Exception { final java.io.File testFile = new java.io.File(android.support.test.InstrumentationRegistry.getContext().getFilesDir(), com.android.server.net.NetworkStatsCollectionTest.TEST_FILE); stageFile(R.raw.netstats_v1, testFile); final com.android.server.net.NetworkStatsCollection collection = new com.android.server.net.NetworkStatsCollection((30 * (android.text.format.DateUtils.MINUTE_IN_MILLIS))); collection.readLegacyNetwork(testFile); com.android.server.net.NetworkStatsCollectionTest.assertSummaryTotal(collection, buildTemplateMobileAll(com.android.server.net.NetworkStatsCollectionTest.TEST_IMSI), 636016770L, 709306L, 88038768L, 518836L, NetworkStatsAccess.Level.DEVICE); final java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream(); collection.write(new java.io.DataOutputStream(bos)); collection.reset(); com.android.server.net.NetworkStatsCollectionTest.assertSummaryTotal(collection, buildTemplateMobileAll(com.android.server.net.NetworkStatsCollectionTest.TEST_IMSI), 0L, 0L, 0L, 0L, NetworkStatsAccess.Level.DEVICE); collection.read(new java.io.ByteArrayInputStream(bos.toByteArray())); com.android.server.net.NetworkStatsCollectionTest.assertSummaryTotal(collection, buildTemplateMobileAll(com.android.server.net.NetworkStatsCollectionTest.TEST_IMSI), 636016770L, 709306L, 88038768L, 518836L, NetworkStatsAccess.Level.DEVICE); }
@org.junit.Test public void testReadLegacyUid() throws java.lang.Exception { final java.io.File testFile = new java.io.File(android.support.test.InstrumentationRegistry.getContext().getFilesDir(), com.android.server.net.NetworkStatsCollectionTest.TEST_FILE); stageFile(R.raw.netstats_uid_v4, testFile); final com.android.server.net.NetworkStatsCollection collection = new com.android.server.net.NetworkStatsCollection((30 * (android.text.format.DateUtils.MINUTE_IN_MILLIS))); collection.readLegacyUid(testFile, false); com.android.server.net.NetworkStatsCollectionTest.assertSummaryTotal(collection, buildTemplateMobileAll(com.android.server.net.NetworkStatsCollectionTest.TEST_IMSI), 637076152L, 711413L, 88343717L, 521022L, NetworkStatsAccess.Level.DEVICE); final java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream(); collection.write(new java.io.DataOutputStream(bos)); collection.reset(); com.android.server.net.NetworkStatsCollectionTest.assertSummaryTotal(collection, buildTemplateMobileAll(com.android.server.net.NetworkStatsCollectionTest.TEST_IMSI), 0L, 0L, 0L, 0L, NetworkStatsAccess.Level.DEVICE); collection.read(new java.io.ByteArrayInputStream(bos.toByteArray())); com.android.server.net.NetworkStatsCollectionTest.assertSummaryTotal(collection, buildTemplateMobileAll(com.android.server.net.NetworkStatsCollectionTest.TEST_IMSI), 637076152L, 711413L, 88343717L, 521022L, NetworkStatsAccess.Level.DEVICE); }
@org.junit.Test public void testRecordSingleBucket() throws java.lang.Exception { final long BUCKET_SIZE = HOUR_IN_MILLIS; stats = new android.net.NetworkStatsHistory(BUCKET_SIZE); stats.recordData(android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + (SECOND_IN_MILLIS)), new android.net.NetworkStats.Entry(1024L, 10L, 2048L, 20L, 2L)); assertEquals(1, stats.size()); android.net.NetworkStatsHistoryTest.assertValues(stats, 0, android.net.SECOND_IN_MILLIS, 1024L, 10L, 2048L, 20L, 2L); }
@org.junit.Before public void setUp() throws java.lang.Exception { android.net.NetworkTemplate.forceAllNetworkTypes(); }
@org.junit.Test public void testRecordEqualBuckets() throws java.lang.Exception { final long bucketDuration = HOUR_IN_MILLIS; stats = new android.net.NetworkStatsHistory(bucketDuration); final long recordStart = (android.net.NetworkStatsHistoryTest.TEST_START) + (bucketDuration / 2); stats.recordData(recordStart, (recordStart + bucketDuration), new android.net.NetworkStats.Entry(1024L, 10L, 128L, 2L, 2L)); assertEquals(2, stats.size()); android.net.NetworkStatsHistoryTest.assertValues(stats, 0, ((HOUR_IN_MILLIS) / 2), 512L, 5L, 64L, 1L, 1L); android.net.NetworkStatsHistoryTest.assertValues(stats, 1, ((HOUR_IN_MILLIS) / 2), 512L, 5L, 64L, 1L, 1L); }
@org.junit.Test public void testTotalData() throws java.lang.Exception { final long BUCKET_SIZE = HOUR_IN_MILLIS; stats = new android.net.NetworkStatsHistory(BUCKET_SIZE); stats.recordData(android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + (DAY_IN_MILLIS)), 2400L, 4800L); android.net.NetworkStatsHistoryTest.assertValues(stats, ((android.net.NetworkStatsHistoryTest.TEST_START) - (WEEK_IN_MILLIS)), ((android.net.NetworkStatsHistoryTest.TEST_START) - (DAY_IN_MILLIS)), 0L, 0L); android.net.NetworkStatsHistoryTest.assertValues(stats, android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + (HOUR_IN_MILLIS)), 100L, 200L); android.net.NetworkStatsHistoryTest.assertValues(stats, android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + ((long) (1.5 * (HOUR_IN_MILLIS)))), 150L, 300L); android.net.NetworkStatsHistoryTest.assertValues(stats, ((android.net.NetworkStatsHistoryTest.TEST_START) + (23 * (HOUR_IN_MILLIS))), ((android.net.NetworkStatsHistoryTest.TEST_START) + (WEEK_IN_MILLIS)), 100L, 200L); android.net.NetworkStatsHistoryTest.assertValues(stats, ((android.net.NetworkStatsHistoryTest.TEST_START) - (WEEK_IN_MILLIS)), ((android.net.NetworkStatsHistoryTest.TEST_START) + (WEEK_IN_MILLIS)), 2400L, 4800L); }
@org.junit.Test public void testRemove() throws java.lang.Exception { stats = new android.net.NetworkStatsHistory(HOUR_IN_MILLIS); stats.recordData(android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + (DAY_IN_MILLIS)), 24L, 24L); assertEquals(24, stats.size()); stats.removeBucketsBefore((0 - (DAY_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) - (YEAR_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (SECOND_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (HOUR_IN_MILLIS))); assertEquals(23, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (4 * (HOUR_IN_MILLIS)))); assertEquals(20, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (YEAR_IN_MILLIS))); assertEquals(0, stats.size()); }
@org.junit.Test public void testReadOriginalVersion() throws java.lang.Exception { final java.io.DataInputStream in = new java.io.DataInputStream(android.support.test.InstrumentationRegistry.getContext().getResources().openRawResource(R.raw.history_v1)); android.net.NetworkStatsHistory.Entry entry = null; try { final android.net.NetworkStatsHistory history = new android.net.NetworkStatsHistory(in); assertEquals((15 * (SECOND_IN_MILLIS)), history.getBucketDuration()); entry = history.getValues(0, entry); assertEquals(29143L, entry.rxBytes); assertEquals(6223L, entry.txBytes); entry = history.getValues(((history.size()) - 1), entry); assertEquals(1476L, entry.rxBytes); assertEquals(838L, entry.txBytes); entry = history.getValues(java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, entry); assertEquals(332401L, entry.rxBytes); assertEquals(64314L, entry.txBytes); } finally { in.close(); } }
@org.junit.Test public void testIgnoreFieldsRecordOut() throws java.lang.Exception { final android.net.NetworkStatsHistory full = new android.net.NetworkStatsHistory(MINUTE_IN_MILLIS, 0, android.net.NetworkStatsHistory.FIELD_ALL); final android.net.NetworkStatsHistory partial = new android.net.NetworkStatsHistory(MINUTE_IN_MILLIS, 0, ((android.net.NetworkStatsHistory.FIELD_RX_PACKETS) | (android.net.NetworkStatsHistory.FIELD_OPERATIONS))); partial.recordData(0, android.net.MINUTE_IN_MILLIS, new android.net.NetworkStats.Entry(1024L, 10L, 2048L, 20L, 4L)); full.recordEntireHistory(partial); android.net.NetworkStatsHistoryTest.assertFullValues(full, android.net.MINUTE_IN_MILLIS, 0L, 10L, 0L, 0L, 4L); }
@org.junit.Test public void testRecordOverlapBuckets() throws java.lang.Exception { final long BUCKET_SIZE = HOUR_IN_MILLIS; stats = new android.net.NetworkStatsHistory(BUCKET_SIZE); stats.recordData(android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + (SECOND_IN_MILLIS)), new android.net.NetworkStats.Entry(256L, 2L, 256L, 2L, 1L)); final long midStart = (android.net.NetworkStatsHistoryTest.TEST_START) + ((HOUR_IN_MILLIS) / 2); stats.recordData(midStart, (midStart + (HOUR_IN_MILLIS)), new android.net.NetworkStats.Entry(1024L, 10L, 1024L, 10L, 10L)); assertEquals(2, stats.size()); android.net.NetworkStatsHistoryTest.assertValues(stats, 0, ((SECOND_IN_MILLIS) + ((HOUR_IN_MILLIS) / 2)), 768L, 7L, 768L, 7L, 6L); android.net.NetworkStatsHistoryTest.assertValues(stats, 1, ((HOUR_IN_MILLIS) / 2), 512L, 5L, 512L, 5L, 5L); }
@org.junit.Test public void testVarLong() throws java.lang.Exception { assertEquals(0L, android.net.NetworkStatsHistoryTest.performVarLong(0L)); assertEquals((-1L), android.net.NetworkStatsHistoryTest.performVarLong((-1L))); assertEquals(1024L, android.net.NetworkStatsHistoryTest.performVarLong(1024L)); assertEquals((-1024L), android.net.NetworkStatsHistoryTest.performVarLong((-1024L))); assertEquals((40 * (android.net.TrafficStats.MB_IN_BYTES)), android.net.NetworkStatsHistoryTest.performVarLong((40 * (android.net.TrafficStats.MB_IN_BYTES)))); assertEquals((512 * (android.net.TrafficStats.GB_IN_BYTES)), android.net.NetworkStatsHistoryTest.performVarLong((512 * (android.net.TrafficStats.GB_IN_BYTES)))); assertEquals(java.lang.Long.MIN_VALUE, android.net.NetworkStatsHistoryTest.performVarLong(java.lang.Long.MIN_VALUE)); assertEquals(java.lang.Long.MAX_VALUE, android.net.NetworkStatsHistoryTest.performVarLong(java.lang.Long.MAX_VALUE)); assertEquals(((java.lang.Long.MIN_VALUE) + 40), android.net.NetworkStatsHistoryTest.performVarLong(((java.lang.Long.MIN_VALUE) + 40))); assertEquals(((java.lang.Long.MAX_VALUE) - 40), android.net.NetworkStatsHistoryTest.performVarLong(((java.lang.Long.MAX_VALUE) - 40))); }
@org.junit.Test public void testIgnoreFieldsRecordIn() throws java.lang.Exception { final android.net.NetworkStatsHistory full = new android.net.NetworkStatsHistory(MINUTE_IN_MILLIS, 0, android.net.NetworkStatsHistory.FIELD_ALL); final android.net.NetworkStatsHistory partial = new android.net.NetworkStatsHistory(MINUTE_IN_MILLIS, 0, ((android.net.NetworkStatsHistory.FIELD_RX_PACKETS) | (android.net.NetworkStatsHistory.FIELD_OPERATIONS))); full.recordData(0, android.net.MINUTE_IN_MILLIS, new android.net.NetworkStats.Entry(1024L, 10L, 2048L, 20L, 4L)); partial.recordEntireHistory(full); android.net.NetworkStatsHistoryTest.assertFullValues(partial, Entry.UNKNOWN, Entry.UNKNOWN, 10L, Entry.UNKNOWN, Entry.UNKNOWN, 4L); }
@org.junit.Test public void testStartEndAtomicBuckets() throws java.lang.Exception { final com.android.server.net.NetworkStatsCollection collection = new com.android.server.net.NetworkStatsCollection(android.text.format.DateUtils.HOUR_IN_MILLIS); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); entry.rxBytes = 32; collection.recordData(null, com.android.server.net.UID_ALL, com.android.server.net.SET_DEFAULT, com.android.server.net.TAG_NONE, (30 * (android.text.format.DateUtils.MINUTE_IN_MILLIS)), (90 * (android.text.format.DateUtils.MINUTE_IN_MILLIS)), entry); assertEquals(0, collection.getStartMillis()); assertEquals((2 * (android.text.format.DateUtils.HOUR_IN_MILLIS)), collection.getEndMillis()); }
@org.junit.After public void tearDown() throws java.lang.Exception { if ((stats) != null) { android.net.NetworkStatsHistoryTest.assertConsistent(stats); } }
@org.junit.Before public void setUp() { resetLatch(); mLocalSocket = null; mLocalSockName = null; mLastRecvBuf = null; mExited = false; mReceiver = new android.net.util.BlockingSocketReader() { @java.lang.Override protected java.io.FileDescriptor createSocket() { java.io.FileDescriptor s = null; try { s = android.system.Os.socket(android.net.util.AF_INET6, android.net.util.SOCK_DGRAM, android.net.util.IPPROTO_UDP); android.system.Os.bind(s, android.net.util.BlockingSocketReaderTest.LOOPBACK6, 0); mLocalSockName = ((java.net.InetSocketAddress) (android.system.Os.getsockname(s))); android.system.Os.setsockoptTimeval(s, android.net.util.SOL_SOCKET, android.net.util.SO_SNDTIMEO, android.net.util.BlockingSocketReaderTest.TIMEO); } catch (android.system.ErrnoException | java.net.SocketException e) { closeSocket(s); fail(); return null; } mLocalSocket = s; return s; } @java.lang.Override protected void handlePacket(byte[] recvbuf, int length) { mLastRecvBuf = java.util.Arrays.copyOf(recvbuf, length); mLatch.countDown(); } @java.lang.Override protected void onExit() { mExited = true; mLatch.countDown(); } }; }
@org.junit.After public void tearDown() { if ((mReceiver) != null) mReceiver.stop(); mReceiver = null; }
private boolean updateCurrentController(int addrId, int browseId) { boolean registerRsp = true; updateNewIds(addrId, browseId); com.android.bluetooth.avrcp.MediaController newController = null; com.android.bluetooth.avrcp.MediaPlayerInfo info = getAddressedPlayerInfo(); if (info != null) newController = info.getMediaController(); if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, ((("updateCurrentController: " + (mMediaController)) + " to ") + newController)); synchronized(this) { if (((mMediaController) == null) || (!(mMediaController.equals(newController)))) { if ((mMediaController) != null) { mMediaController.unregisterCallback(mMediaControllerCb); } mMediaController = newController; if ((mMediaController) != null) { mMediaController.registerCallback(mMediaControllerCb, mHandler); } else { registerRsp = false; } mHandler.sendEmptyMessageDelayed(com.android.bluetooth.avrcp.Avrcp.MSG_NOW_PLAYING_CHANGED_RSP, com.android.bluetooth.avrcp.MEDIA_DWELL_TIME); } } updateCurrentMediaState(); return registerRsp; }
@java.lang.Override public void onQueueChanged(java.util.List<android.media.session.MediaSession.QueueItem> queue) { if (queue == null) { android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, "onQueueChanged: received null queue"); return; } android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ("onQueueChanged: NowPlaying list changed, Queue Size = " + (queue.size()))); mHandler.sendEmptyMessageDelayed(com.android.bluetooth.avrcp.Avrcp.MSG_NOW_PLAYING_CHANGED_RSP, com.android.bluetooth.avrcp.MEDIA_DWELL_TIME); }
public java.lang.String StripTelephoneNumber(java.lang.String vCard) { java.lang.String[] attr = vCard.split(java.lang.System.getProperty("line.separator")); java.lang.String Vcard = ""; for (int i = 0; i < (attr.length); i++) { if (attr[i].startsWith("TEL")) { attr[i] = attr[i].replace("(", ""); attr[i] = attr[i].replace(")", ""); attr[i] = attr[i].replace("-", ""); attr[i] = attr[i].replace(" ", ""); } } for (int i = 0; i < (attr.length); i++) { if (!(attr[i].isEmpty())) { vCard = vCard.concat(((attr[i]) + "\n")); } } if (com.android.bluetooth.pbap.BluetoothPbapVcardManager.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("Vcard with stripped telephone no.: " + Vcard)); return Vcard; }
public static void testStopRecur() throws java.lang.Exception { final java.lang.Throwable[] out_err = new java.lang.Throwable[]{ null }; final java.util.concurrent.Semaphore sem = new java.util.concurrent.Semaphore(0); java.lang.Thread target = new java.lang.Thread(() -> { sem.release(); while (true) { try { art.Test1934.doRecur(null); } catch (java.lang.StackOverflowError e) { } } }, "recuring thread!"); target.setUncaughtExceptionHandler(( t, e) -> { out_err[0] = e; }); target.start(); sem.acquire(); java.lang.System.out.println("stopping other thread recurring"); do { art.Threads.stopThread(target, new java.lang.Error("AWESOME!")); target.join(1000); } while (target.isAlive() ); java.lang.System.out.println(("Other thread Stopped by: " + (out_err[0]))); if ((art.Test1934.PRINT_STACK_TRACE) && ((out_err[0]) != null)) { out_err[0].printStackTrace(); } }
void stop() { if (com.android.bluetooth.mapclient.MnsService.VDBG) android.util.Log.v(com.android.bluetooth.mapclient.MnsService.TAG, "stop()"); mShutdown = true; if ((mSdpHandle) >= 0) { if (!(com.android.bluetooth.sdp.SdpManager.getDefaultManager().removeSdpRecord(mSdpHandle))) { android.util.Log.e(com.android.bluetooth.mapclient.MnsService.TAG, ("Failed to remove sdp handle " + (mSdpHandle))); mSdpHandle = -1; } } if ((com.android.bluetooth.mapclient.MnsService.mServerSockets) != null) { com.android.bluetooth.mapclient.MnsService.mServerSockets.shutdown(false); com.android.bluetooth.mapclient.MnsService.mServerSockets = null; } }
static void getLong(java.lang.invoke.MethodHandle m, Main.ValueHolder v, long value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final long got = (v == null) ? ((long) (m.invokeExact())) : ((long) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }
static void getFloat(java.lang.invoke.MethodHandle m, Main.ValueHolder v, float value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final float got = (v == null) ? ((float) (m.invokeExact())) : ((float) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }
static void getDouble(java.lang.invoke.MethodHandle m, Main.ValueHolder v, double value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final double got = (v == null) ? ((double) (m.invokeExact())) : ((double) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }
public static void assertEqual(boolean actual, boolean expected) throws java.lang.AssertionError { if (actual != expected) { throw new java.lang.AssertionError((((("Actual != Expected (" + actual) + " != ") + expected) + ")")); } }
static void setByte(java.lang.invoke.MethodHandle m, Main.ValueHolder v, byte value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }
private java.lang.invoke.MethodHandle findAccessor(java.lang.reflect.Field field, java.lang.Class<?> refc, java.lang.Class<?> fieldType, int kind, boolean performAccessChecks) throws java.lang.IllegalAccessException { if (performAccessChecks) { checkAccess(refc, field.getDeclaringClass(), field.getModifiers(), field.getName()); } final boolean isStaticKind = (kind == (SGET)) || (kind == (SPUT)); final int modifiers = field.getModifiers(); if ((java.lang.reflect.Modifier.isStatic(modifiers)) != isStaticKind) { java.lang.String reason = ((("Field " + field) + " is ") + (isStaticKind ? "not " : "")) + "static"; throw new java.lang.IllegalAccessException(reason); } final boolean isSetterKind = (kind == (IPUT)) || (kind == (SPUT)); if (((java.lang.reflect.Modifier.isFinal(modifiers)) && isSetterKind) && (!(field.isAccessible()))) { throw new java.lang.IllegalAccessException((("Field " + field) + " is final")); } final java.lang.invoke.MethodType methodType; switch (kind) { case SGET : methodType = java.lang.invoke.MethodType.methodType(fieldType); break; case SPUT : methodType = java.lang.invoke.MethodType.methodType(void.class, fieldType); break; case IGET : methodType = java.lang.invoke.MethodType.methodType(fieldType, refc); break; case IPUT : methodType = java.lang.invoke.MethodType.methodType(void.class, refc, fieldType); break; default : throw new java.lang.IllegalArgumentException(("Invalid kind " + kind)); } return new java.lang.invoke.MethodHandleImpl(field.getArtField(), kind, methodType); }
static void getBoolean(java.lang.invoke.MethodHandle m, Main.ValueHolder v, boolean value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final boolean got = (v == null) ? ((boolean) (m.invokeExact())) : ((boolean) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }
static void setLong(java.lang.invoke.MethodHandle m, Main.ValueHolder v, long value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }
static void setChar(java.lang.invoke.MethodHandle m, Main.ValueHolder v, char value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }
static void getShort(java.lang.invoke.MethodHandle m, Main.ValueHolder v, short value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final short got = (v == null) ? ((short) (m.invokeExact())) : ((short) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }
static void setString(java.lang.invoke.MethodHandle m, Main.ValueHolder v, java.lang.String value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }
static void setDouble(java.lang.invoke.MethodHandle m, Main.ValueHolder v, double value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }
static void getInt(java.lang.invoke.MethodHandle m, Main.ValueHolder v, int value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final int got = (v == null) ? ((int) (m.invokeExact())) : ((int) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }
public static void assertEqual(char actual, char expected) { if (actual != expected) { throw new java.lang.AssertionError((((("Actual != Expected (" + actual) + " != ") + expected) + ")")); } }
static void getChar(java.lang.invoke.MethodHandle m, Main.ValueHolder v, char value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final char got; if (v == null) { got = ((char) (m.invokeExact())); } else { got = ((char) (m.invokeExact(v))); } Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }
static void setInt(java.lang.invoke.MethodHandle m, Main.ValueHolder v, int value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }
static void setShort(java.lang.invoke.MethodHandle m, Main.ValueHolder v, short value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }
static void setFloat(java.lang.invoke.MethodHandle m, Main.ValueHolder v, float value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }
static void getString(java.lang.invoke.MethodHandle m, Main.ValueHolder v, java.lang.String value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final java.lang.String got = (v == null) ? ((java.lang.String) (m.invokeExact())) : ((java.lang.String) (m.invokeExact(v))); Main.Tester.assertTrue(got.equals(value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }
static void setBoolean(java.lang.invoke.MethodHandle m, Main.ValueHolder v, boolean value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }
static void getByte(java.lang.invoke.MethodHandle m, Main.ValueHolder v, byte value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final byte got; if (v == null) { got = ((byte) (m.invokeExact())); } else { got = ((byte) (m.invokeExact(v))); } Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }
public static void assertEqual(int actual, int expected) { if (actual != expected) { throw new java.lang.AssertionError((((("Actual != Expected (" + actual) + " != ") + expected) + ")")); } }
public final java.util.List<java.lang.Class<?>> coordinateTypes() { return accessInfo.coordinateTypes(); }
public final java.lang.Class<?> varType() { return accessInfo.varType(); }
public final boolean isAccessModeSupported(java.lang.invoke.VarHandle.AccessMode accessMode) { return accessInfo.isAccessModeSupported(accessMode); }
public final java.lang.invoke.MethodType accessModeType(java.lang.invoke.VarHandle.AccessMode accessMode) { return accessInfo.accessModeType(accessMode); }
private java.lang.reflect.Field findFieldOfType(java.lang.Class<?> refc, java.lang.String name, java.lang.Class<?> type) throws java.lang.NoSuchFieldException { final java.lang.reflect.Field field = refc.getDeclaredField(name); final java.lang.Class<?> fieldType = field.getType(); if (fieldType != type) { throw new java.lang.NoSuchFieldException(((("Field has wrong type: " + fieldType) + " != ") + type)); } return field; }
public java.lang.invoke.VarHandle findVarHandle(java.lang.Class<?> recv, java.lang.String name, java.lang.Class<?> type) throws java.lang.IllegalAccessException, java.lang.NoSuchFieldException { final java.lang.reflect.Field field = findFieldOfType(recv, name, type); commonFieldChecks(field, recv, type, false, false, true); return java.lang.invoke.FieldVarHandle.create(field); }
private void commonFieldChecks(java.lang.reflect.Field field, java.lang.Class<?> refc, java.lang.Class<?> type, boolean isStatic, boolean isSetter, boolean performAccessChecks) throws java.lang.IllegalAccessException { if (!performAccessChecks) { checkAccess(refc, field.getDeclaringClass(), field.getModifiers(), field.getName()); } final int modifiers = field.getModifiers(); if ((java.lang.reflect.Modifier.isStatic(modifiers)) != isStatic) { java.lang.String reason = ((("Field " + field) + " is ") + (isStatic ? "not " : "")) + "static"; throw new java.lang.IllegalAccessException(reason); } if ((java.lang.reflect.Modifier.isFinal(modifiers)) && isSetter) { throw new java.lang.IllegalAccessException((("Field " + field) + " is final")); } }
private java.lang.invoke.MethodHandle findAccessor(java.lang.reflect.Field field, java.lang.Class<?> refc, java.lang.Class<?> type, int kind, boolean performAccessChecks) throws java.lang.IllegalAccessException { final boolean isStaticKind = (kind == (SGET)) || (kind == (SPUT)); final boolean isSetterKind = (kind == (IPUT)) || (kind == (SPUT)); commonFieldChecks(field, refc, type, isStaticKind, isSetterKind, performAccessChecks); final java.lang.invoke.MethodType methodType; switch (kind) { case SGET : methodType = java.lang.invoke.MethodType.methodType(type); break; case SPUT : methodType = java.lang.invoke.MethodType.methodType(void.class, type); break; case IGET : methodType = java.lang.invoke.MethodType.methodType(type, refc); break; case IPUT : methodType = java.lang.invoke.MethodType.methodType(void.class, refc, type); break; default : throw new java.lang.IllegalArgumentException(("Invalid kind " + kind)); } return new java.lang.invoke.MethodHandleImpl(field.getArtField(), kind, methodType); }
public java.lang.invoke.VarHandle unreflectVarHandle(java.lang.reflect.Field f) throws java.lang.IllegalAccessException { commonFieldChecks(f, f.getDeclaringClass(), f.getType(), java.lang.reflect.Modifier.isStatic(f.getModifiers()), false, f.isAccessible()); return java.lang.invoke.FieldVarHandle.create(f); }
public java.lang.invoke.VarHandle findStaticVarHandle(java.lang.Class<?> decl, java.lang.String name, java.lang.Class<?> type) throws java.lang.IllegalAccessException, java.lang.NoSuchFieldException { final java.lang.reflect.Field field = findFieldOfType(decl, name, type); commonFieldChecks(field, decl, type, true, false, true); return java.lang.invoke.FieldVarHandle.create(field); }
public static com.android.vts.entity.BuildTargetEntity fromEntity(com.google.appengine.api.datastore.Entity e) { if ((!(e.getKind().equals(com.android.vts.entity.BuildTargetEntity.KIND))) || ((e.getKey().getName()) == null)) { com.android.vts.entity.BuildTargetEntity.logger.log(java.util.logging.Level.WARNING, ("Missing test attributes in entity: " + (e.toString()))); return null; } java.lang.String targetName = e.getKey().getName(); return new com.android.vts.entity.BuildTargetEntity(targetName); }
@java.lang.Override public com.google.appengine.api.datastore.Entity toEntity() { com.google.appengine.api.datastore.Entity targetEntity = new com.google.appengine.api.datastore.Entity(this.key); return targetEntity; }
@java.lang.Override public com.google.appengine.api.datastore.Entity toEntity() { com.google.appengine.api.datastore.Entity branchEntity = new com.google.appengine.api.datastore.Entity(this.key); return branchEntity; }
public static com.android.vts.entity.BranchEntity fromEntity(com.google.appengine.api.datastore.Entity e) { if ((!(e.getKind().equals(com.android.vts.entity.BranchEntity.KIND))) || ((e.getKey().getName()) == null)) { com.android.vts.entity.BranchEntity.logger.log(java.util.logging.Level.WARNING, ("Missing test attributes in entity: " + (e.toString()))); return null; } java.lang.String branchName = e.getKey().getName(); return new com.android.vts.entity.BranchEntity(branchName); }
private boolean validateBrowserRequest(com.android.internal.telephony.cat.CatCmdMessage.BrowserSettings settings) { java.lang.String url = android.os.SystemProperties.get(com.android.stk.StkAppService.STK_BROWSER_DEFAULT_URL_SYSPROP, ""); if ((url == "") && ((settings.url) == null)) { return false; } return true; }
public java.lang.String stripTelephoneNumber(java.lang.String vCard) { java.lang.String[] attr = vCard.split(java.lang.System.getProperty("line.separator")); java.lang.String stripedVCard = ""; for (int i = 0; i < (attr.length); i++) { if (attr[i].startsWith("TEL")) { attr[i] = attr[i].replace("(", ""); attr[i] = attr[i].replace(")", ""); attr[i] = attr[i].replace("-", ""); attr[i] = attr[i].replace(" ", ""); } } for (int i = 0; i < (attr.length); i++) { if (!(attr[i].isEmpty())) { vCard = vCard.concat(((attr[i]) + "\n")); } } if (com.android.bluetooth.pbap.BluetoothPbapVcardManager.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("vCard with stripped telephone no.: " + stripedVCard)); return stripedVCard; }
private boolean checkVCardSelector(java.lang.String vcard, java.lang.String vcardselectorop) { boolean selectedIn = true; for (com.android.bluetooth.pbap.BluetoothPbapVcardManager.PropertySelector.PropertyMask bit : com.android.bluetooth.pbap.BluetoothPbapVcardManager.PropertySelector.PropertyMask.values()) { if (checkbit(bit.pos, mSelector)) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("checking for prop :" + (bit.prop))); if (vcardselectorop.equals("0")) { if (checkprop(vcard, bit.prop)) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("bit.prop.equals current prop :" + (bit.prop))); selectedIn = true; break; } else { selectedIn = false; } } else if (vcardselectorop.equals("1")) { if (!(checkprop(vcard, bit.prop))) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("bit.prop.notequals current prop" + (bit.prop))); selectedIn = false; return selectedIn; } else { selectedIn = true; } } } } return selectedIn; }
private static void checkBouncyCastleDeprecation(java.lang.String service, java.lang.String algorithm) throws java.security.NoSuchAlgorithmException { java.lang.String key = (service + ".") + algorithm; if (sun.security.jca.Providers.DEPRECATED_ALGORITHMS.contains(key.toUpperCase(java.util.Locale.US))) { if ((dalvik.system.VMRuntime.getRuntime().getTargetSdkVersion()) <= (sun.security.jca.Providers.maximumAllowableApiLevelForBcDeprecation)) { java.lang.System.logE(" ******** DEPRECATED FUNCTIONALITY ********"); java.lang.System.logE(((" * The implementation of the " + key) + " algorithm from")); java.lang.System.logE(" * the BC provider is deprecated in this version of Android."); java.lang.System.logE(" * It will be removed in a future version of Android and your"); java.lang.System.logE(" * application will no longer be able to request it."); java.lang.System.logE(" * Please see ((TODO: Blog Post Link)) for more details."); } else { throw new java.security.NoSuchAlgorithmException((((("The BC provider no longer provides an" + " implementation for ") + key) + ". Please see") + " ((TODO: Blog Post Link)) for more details.")); } } }
private static java.util.concurrent.Semaphore getSemaphore(int permits) { if (permits == (-1)) { permits = 3; } java.util.concurrent.Semaphore semaphore = new java.util.concurrent.Semaphore(permits, true); boolean permitAcquired = false; try { semaphore.acquire(); semaphore.release(); } catch (java.lang.InterruptedException ignored) { } return semaphore; }
public static void testStopRecur() throws java.lang.Exception { final java.lang.Throwable[] out_err = new java.lang.Throwable[]{ null }; final java.util.concurrent.Semaphore sem = new java.util.concurrent.Semaphore(0); java.lang.Thread target = new java.lang.Thread(() -> { sem.release(); while (true) { art.Test1934.doRecurCnt(50); } }, "recuring thread!"); target.setUncaughtExceptionHandler(( t, e) -> { out_err[0] = e; }); target.start(); sem.acquire(); java.lang.System.out.println("stopping other thread recurring"); art.Threads.stopThread(target, new java.lang.Error("AWESOME!")); target.join(); java.lang.System.out.println(("Other thread Stopped by: " + (out_err[0]))); if ((art.Test1934.PRINT_STACK_TRACE) && ((out_err[0]) != null)) { out_err[0].printStackTrace(); } }
public static void doRecurCnt(int cnt) { if (cnt != 0) { art.Test1934.doRecurCnt((cnt - 1)); } }
@java.lang.Override public void run() { android.util.Log.i(com.android.server.cts.device.batterystats.SimpleJobService.TAG, "Running job"); try { java.lang.Thread.sleep(5000); } catch (java.lang.InterruptedException e) { } jobFinished(mRunningParams, false); if ((com.android.server.cts.device.batterystats.SimpleJobService.sLatch) != null) { com.android.server.cts.device.batterystats.SimpleJobService.sLatch.countDown(); } android.util.Log.i(com.android.server.cts.device.batterystats.SimpleJobService.TAG, "Finished job"); }
@org.junit.Test public void testJobDuration() throws java.lang.Exception { android.app.job.JobScheduler js = mContext.getSystemService(android.app.job.JobScheduler.class); assertTrue("JobScheduler service not available", (js != null)); final android.app.job.JobInfo job = createJobInfo(1); for (int i = 0; i < 3; i++) { java.util.concurrent.CountDownLatch latch = com.android.server.cts.device.batterystats.SimpleJobService.resetCountDownLatch(); android.util.Log.i(com.android.server.cts.device.batterystats.BatteryStatsJobDurationTests.TAG, "Scheduling job"); js.schedule(job); android.util.Log.i(com.android.server.cts.device.batterystats.BatteryStatsJobDurationTests.TAG, "Waiting for job to finish"); if (!(latch.await(35, java.util.concurrent.TimeUnit.SECONDS))) { android.util.Log.e(com.android.server.cts.device.batterystats.BatteryStatsJobDurationTests.TAG, "Job didn't finish in 35 seconds"); fail("Job didn't finish in 35 seconds"); } } }
void cleanup() { mRegularScanClients.clear(); mBatchClients.clear(); mSuspendedScanClients.clear(); mScanNative.cleanup(); if ((mActivityManager) != null) { try { mActivityManager.removeOnUidImportanceListener(mUidImportanceListener); } catch (java.lang.IllegalArgumentException e) { android.util.Log.e(com.android.bluetooth.gatt.ScanManager.TAG, "exception when invoking removeOnUidImportanceListener", e); } } if ((mDm) != null) { mDm.unregisterDisplayListener(mDisplayListener); } if ((mHandler) != null) { mHandler.removeCallbacksAndMessages(null); android.os.Looper looper = mHandler.getLooper(); if (looper != null) { looper.quitSafely(); } mHandler = null; } }
public java.lang.String StripTelephoneNumber(java.lang.String vCard) { java.lang.String[] attr = vCard.split(java.lang.System.getProperty("line.separator")); java.lang.String stripedVCard = ""; for (int i = 0; i < (attr.length); i++) { if (attr[i].startsWith("TEL")) { attr[i] = attr[i].replace("(", ""); attr[i] = attr[i].replace(")", ""); attr[i] = attr[i].replace("-", ""); attr[i] = attr[i].replace(" ", ""); } } for (int i = 0; i < (attr.length); i++) { if (!(attr[i].isEmpty())) { vCard = vCard.concat(((attr[i]) + "\n")); } } if (com.android.bluetooth.pbap.BluetoothPbapVcardManager.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("vCard with stripped telephone no.: " + stripedVCard)); return stripedVCard; }
@java.lang.Override public void onClick(android.view.View view) { mServer = new com.android.bluetooth.opp.TestTcpServer(); java.lang.Thread serverThread = new java.lang.Thread(mServer); serverThread.start(); }
private boolean isFilteredIn(com.android.bluetooth.pbap.BluetoothPbapVcardManager.VCardFilter.FilterBit bit, boolean vCardType21) { final int offset = ((bit.pos) / 8) + 1; final int bitPos = (bit.pos) % 8; if ((!vCardType21) && (bit.onlyCheckV21)) return true; if (vCardType21 && (bit.excludeForV21)) return false; if (((mFilter) == null) || (offset >= (mFilter.length))) return true; return (((mFilter[((mFilter.length) - offset)]) >> bitPos) & 1) != 0; }
public final boolean isInterfaceMethod() { return ((classFile.getAccessFlags()) & (com.android.dx.rop.code.AccessFlags.ACC_INTERFACE)) != 0; }
@java.lang.Override public android.view.View getView(int position, android.view.View convertView, android.view.ViewGroup parent) { final android.view.View result = (convertView != null) ? convertView : dialogInflater.inflate(R.layout.select_dialog_item, parent, false); final android.widget.TextView primaryText = ((android.widget.TextView) (result.findViewById(R.id.primary_text))); final android.widget.TextView secondaryText = ((android.widget.TextView) (result.findViewById(R.id.secondary_text))); final com.android.contacts.interactions.ImportDialogFragment.AdapterEntry entry = getItem(position); secondaryText.setVisibility(View.GONE); if ((entry.mChoiceResourceId) == (R.string.import_from_sim)) { final java.lang.CharSequence secondary = getSimSecondaryText(entry.mSim); if (android.text.TextUtils.isEmpty(secondary)) { secondaryText.setVisibility(View.GONE); } else { secondaryText.setText(secondary); java.lang.CharSequence phone = entry.mSim.getFormattedPhone(); if (phone == null) { phone = entry.mSim.getPhone(); } if (phone != null) { secondaryText.setTextDirection(TextView.TEXT_DIRECTION_LTR); } secondaryText.setVisibility(View.VISIBLE); } } primaryText.setText(entry.mLabel); return result; }
private boolean isSkipCFFailToDisableDialog() { android.os.PersistableBundle carrierConfig = com.android.phone.PhoneGlobals.getInstance().getCarrierConfigForSubId(mPhone.getSubId()); return carrierConfig.getBoolean(CarrierConfigManager.KEY_SKIP_CF_FAIL_TO_DISABLE_DIALOG_BOOL); }
public void supplyIccPinForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int remainingAttempts) { responsePinOrPukStatus(responseInfo, remainingAttempts); }
public void changeIccPin2ForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int remainingAttempts) { responsePinOrPukStatus(responseInfo, remainingAttempts); }
public void supplyIccPukForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int remainingAttempts) { responsePinOrPukStatus(responseInfo, remainingAttempts); }
public void setFacilityLockForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int retry) { responsePinOrPukStatus(responseInfo, retry); }
public void supplyIccPuk2ForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int remainingAttempts) { responsePinOrPukStatus(responseInfo, remainingAttempts); }
private int parsePinPukErrorResult(android.os.AsyncResult ar) { java.lang.Integer result = ((java.lang.Integer) (ar.result)); if (result == null) { return -1; } else { int attemptsRemaining = result; log(("parsePinPukErrorResult: attemptsRemaining=" + attemptsRemaining)); return attemptsRemaining; } }
public void supplyIccPin2ForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int remainingAttempts) { responsePinOrPukStatus(responseInfo, remainingAttempts); }
public void changeIccPinForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int remainingAttempts) { responsePinOrPukStatus(responseInfo, remainingAttempts); }
void stop() { if (com.android.bluetooth.mapclient.MnsService.VDBG) android.util.Log.v(com.android.bluetooth.mapclient.MnsService.TAG, "stop()"); mShutdown = true; if ((com.android.bluetooth.mapclient.MnsService.sServerSockets) != null) { com.android.bluetooth.mapclient.MnsService.sServerSockets.shutdown(false); com.android.bluetooth.mapclient.MnsService.sServerSockets = null; } }
protected static void setContactFields(java.lang.String fieldType, java.lang.String contactId, java.lang.String data) { com.android.bluetooth.pbap.BluetoothPbapUtils.ContactData cData = null; if (com.android.bluetooth.pbap.BluetoothPbapUtils.sContactDataset.containsKey(contactId)) cData = com.android.bluetooth.pbap.BluetoothPbapUtils.sContactDataset.get(contactId); else cData = new com.android.bluetooth.pbap.BluetoothPbapUtils.ContactData(); switch (fieldType) { case com.android.bluetooth.pbap.BluetoothPbapUtils.TYPE_NAME : cData.mName = data; break; case com.android.bluetooth.pbap.BluetoothPbapUtils.TYPE_PHONE : cData.mPhone.add(data); break; case com.android.bluetooth.pbap.BluetoothPbapUtils.TYPE_EMAIL : cData.mEmail.add(data); break; case com.android.bluetooth.pbap.BluetoothPbapUtils.TYPE_ADDRESS : cData.mAddress.add(data); break; } com.android.bluetooth.pbap.BluetoothPbapUtils.sContactDataset.put(contactId, cData); }
private boolean isFilteredIn(com.android.bluetooth.pbap.BluetoothPbapVcardManager.VCardFilter.FilterBit bit, boolean vCardType21) { final int offset = ((bit.pos) / 8) + 1; final int bit_pos = (bit.pos) % 8; if ((!vCardType21) && (bit.onlyCheckV21)) return true; if (vCardType21 && (bit.excludeForV21)) return false; if (((mFilter) == null) || (offset >= (mFilter.length))) return true; return (((mFilter[((mFilter.length) - offset)]) >> bit_pos) & 1) != 0; }
@java.lang.Override public void onClick(android.view.View view) { mServer = new com.android.bluetooth.opp.TestTcpServer(); java.lang.Thread server_thread = new java.lang.Thread(mServer); server_thread.start(); }
synchronized void recordScanStop(int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan scan = getScanFromScannerId(scannerId); if (scan == null) { return; } (this.mScansStopped)++; stopTime = android.os.SystemClock.elapsedRealtime(); long scanDuration = (stopTime) - (scan.timestamp); scan.duration = scanDuration; if (scan.isSuspended) { long suspendDuration = (stopTime) - (scan.suspendStartTime); scan.suspendDuration += suspendDuration; mTotalSuspendTime += suspendDuration; } mOngoingScans.remove(scannerId); if ((mLastScans.size()) >= (com.android.bluetooth.gatt.AppScanStats.NUM_SCAN_DURATIONS_KEPT)) { mLastScans.remove(0); } mLastScans.add(scan); com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_STOP); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); mGattService.addScanEvent(scanEvent); if (!(isScanning())) { try { long totalDuration = (stopTime) - (mScanStartTime); mTotalScanTime += totalDuration; mMinScanTime = java.lang.Math.min(totalDuration, mMinScanTime); mMaxScanTime = java.lang.Math.max(totalDuration, mMaxScanTime); mBatteryStats.noteBleScanResults(workSource, ((scan.results) % 100)); mBatteryStats.noteBleScanStopped(workSource); } catch (android.os.RemoteException e) { } } }
protected static void setContactFields(java.lang.String fieldType, java.lang.String contactId, java.lang.String data) { com.android.bluetooth.pbap.BluetoothPbapUtils.ContactData cData = null; if (com.android.bluetooth.pbap.BluetoothPbapUtils.contactDataset.containsKey(contactId)) cData = com.android.bluetooth.pbap.BluetoothPbapUtils.contactDataset.get(contactId); else cData = new com.android.bluetooth.pbap.BluetoothPbapUtils.ContactData(); switch (fieldType) { case com.android.bluetooth.pbap.BluetoothPbapUtils.TYPE_NAME : cData.mName = data; break; case com.android.bluetooth.pbap.BluetoothPbapUtils.TYPE_PHONE : cData.mPhone.add(data); break; case com.android.bluetooth.pbap.BluetoothPbapUtils.TYPE_EMAIL : cData.mEmail.add(data); break; case com.android.bluetooth.pbap.BluetoothPbapUtils.TYPE_ADDRESS : cData.mAddress.add(data); break; } com.android.bluetooth.pbap.BluetoothPbapUtils.contactDataset.put(contactId, cData); }
@java.lang.Override protected com.android.bluetooth.opp.IProfileServiceBinder initBinder() { return null; }
synchronized void recordScanStart(android.bluetooth.le.ScanSettings settings, boolean filtered, int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan existingScan = getScanFromScannerId(scannerId); if (existingScan != null) { return; } (this.mScansStarted)++; startTime = android.os.SystemClock.elapsedRealtime(); com.android.bluetooth.gatt.AppScanStats.LastScan scan = new com.android.bluetooth.gatt.AppScanStats.LastScan(startTime, 0, false, false, filtered, scannerId); if (settings != null) { scan.opportunistic = (settings.getScanMode()) == (android.bluetooth.le.ScanSettings.SCAN_MODE_OPPORTUNISTIC); scan.background = ((settings.getCallbackType()) & (android.bluetooth.le.ScanSettings.CALLBACK_TYPE_FIRST_MATCH)) != 0; } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_START); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); mGattService.addScanEvent(scanEvent); if (!(isScanning())) { try { boolean isUnoptimized = !(((scan.filtered) || (scan.background)) || (scan.opportunistic)); mScanStartTime = startTime; mBatteryStats.noteBleScanStarted(workSource, isUnoptimized); } catch (android.os.RemoteException e) { } } mOngoingScans.put(scannerId, scan); }
@java.lang.Override public void feedIntoMessageDigests(java.security.MessageDigest[] mds, long offset, int size) throws java.io.IOException { long filePosition = (mFilePosition) + offset; long mmapFilePosition = (filePosition / (android.util.apk.ApkSignatureSchemeV2Verifier.MemoryMappedFileDataSource.MEMORY_PAGE_SIZE_BYTES)) * (android.util.apk.ApkSignatureSchemeV2Verifier.MemoryMappedFileDataSource.MEMORY_PAGE_SIZE_BYTES); int dataStartOffsetInMmapRegion = ((int) (filePosition - mmapFilePosition)); long mmapRegionSize = size + dataStartOffsetInMmapRegion; long mmapPtr = 0; try { mmapPtr = libcore.io.Os.mmap(0, mmapRegionSize, OsConstants.PROT_READ, ((android.system.OsConstants.MAP_SHARED) | (android.system.OsConstants.MAP_POPULATE)), mFd, mmapFilePosition); java.nio.ByteBuffer buf = new java.nio.DirectByteBuffer(size, (mmapPtr + dataStartOffsetInMmapRegion), mFd, null, true); for (java.security.MessageDigest md : mds) { buf.position(0); md.update(buf); } } catch (android.system.ErrnoException e) { throw new java.io.IOException((("Failed to mmap " + mmapRegionSize) + " bytes"), e); } finally { if (mmapPtr != 0) { try { android.util.apk.OS.munmap(mmapPtr, mmapRegionSize); } catch (android.system.ErrnoException ignored) { } } } }
private void showPinDialog() { if ((mDialogState) == (com.android.settings.IccLockSettings.OFF_MODE)) { return; } setDialogValues(); mPinDialog.showPinDialog(); if ((mPin) != null) { mPinDialog.getEditText().setSelection(mPin.length()); } }
@java.lang.Override public boolean onPrepareOptionsMenu(android.view.Menu menu) { super.onPrepareOptionsMenu(menu); boolean helpVisible = false; boolean mainVisible = false; if ((mState) == (com.android.stk.StkMenuActivity.STATE_SECONDARY)) { mainVisible = true; } if ((mStkMenu) != null) { helpVisible = mStkMenu.helpAvailable; } menu.findItem(StkApp.MENU_ID_END_SESSION).setVisible(mainVisible); menu.findItem(StkApp.MENU_ID_HELP).setVisible(helpVisible); return mainVisible || helpVisible; }
@java.lang.Override public boolean connect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ("connect(): device=" + device)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "connect: HidDevService is null"); return false; } return service.connect(device); }
@java.lang.Override public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "getConnectedDevices()"); return getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTED }); }
@java.lang.Override public boolean registerApp(android.bluetooth.BluetoothHidDeviceAppConfiguration config, android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "registerApp()"); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "registerApp: HidDevService is null"); return false; } return service.registerApp(config, sdp, inQos, outQos, callback); }
@java.lang.Override public boolean replyReport(android.bluetooth.BluetoothDevice device, byte type, byte id, byte[] data) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ((((("replyReport(): device=" + device) + " type=") + type) + " id=") + id)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "replyReport: HidDevService is null"); return false; } return service.replyReport(device, type, id, data); }
synchronized boolean replyReport(android.bluetooth.BluetoothDevice device, byte type, byte id, byte[] data) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.TAG, ((((("replyReport(): device=" + device) + " type=") + type) + " id=") + id)); if (!(checkDevice(device))) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.TAG, "replyReport: host device not match"); return false; } return replyReportNative(type, id, data); }
synchronized boolean reportError(android.bluetooth.BluetoothDevice device, byte error) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.d(com.android.bluetooth.hid.HidDevService.TAG, ((("reportError(): device=" + device) + " error=") + error)); if (!(checkDevice(device))) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.TAG, "reportError: host device not match"); return false; } return reportErrorNative(error); }
private com.android.bluetooth.hid.HidDevService getService() { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "HidDevice call not allowed for non-active user"); return null; } if (((mService) != null) && (mService.isAvailable())) { return mService; } android.util.Log.w(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "getService: HidDevService is null"); return null; }
synchronized boolean disconnect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.d(com.android.bluetooth.hid.HidDevService.TAG, ("disconnect(): device=" + device)); if (!(checkDevice(device))) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.TAG, "disconnect: host device not match"); return false; } return disconnectNative(); }
@java.lang.Override public int getConnectionState(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ("getConnectionState(): device=" + device)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "getConnectionState: HidDevService is null"); return android.bluetooth.BluetoothInputHost.STATE_DISCONNECTED; } return service.getConnectionState(device); }
@java.lang.Override public boolean reportError(android.bluetooth.BluetoothDevice device, byte error) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ((("reportError(): device=" + device) + " error=") + error)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "reportError: HidDevService is null"); return false; } return service.reportError(device, error); }
@java.lang.Override public java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { if (com.android.bluetooth.hid.HidDevService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ("getDevicesMatchingConnectionStates(): states=" + (java.util.Arrays.toString(states)))); } com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "getDevicesMatchingConnectionStates: HidDevService is null"); return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(0); } return service.getDevicesMatchingConnectionStates(states); }
@java.lang.Override public boolean disconnect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ("disconnect(): device=" + device)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "disconnect: HidDevService is null"); return false; } return service.disconnect(device); }
synchronized boolean connect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.d(com.android.bluetooth.hid.HidDevService.TAG, ("connect(): device=" + device)); return connectNative(com.android.bluetooth.Utils.getByteAddress(device)); }
@java.lang.Override public boolean sendReport(android.bluetooth.BluetoothDevice device, int id, byte[] data) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ((("sendReport(): device=" + device) + " id=") + id)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "sendReport: HidDevService is null"); return false; } return service.sendReport(device, id, data); }
@java.lang.Override public boolean unplug(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ("unplug(): device=" + device)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "unplug: HidDevService is null"); return false; } return service.unplug(device); }
synchronized boolean unregisterApp(android.bluetooth.BluetoothHidDeviceAppConfiguration config) { if (com.android.bluetooth.hid.HidDevService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDevService.TAG, "unregisterApp()"); } if ((((mAppConfig) == null) || (config == null)) || (!(config.equals(mAppConfig)))) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.TAG, "unregisterApp: configuration does not match the record"); return false; } return unregisterAppNative(); }
synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppConfiguration config, android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if (com.android.bluetooth.hid.HidDevService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDevService.TAG, "registerApp()"); } if ((mAppConfig) != null) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.TAG, "registerApp: configuration already exists"); return false; } mAppConfig = config; mCallback = callback; return registerAppNative(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null ? null : inQos.toArray()), (outQos == null ? null : outQos.toArray())); }
synchronized boolean sendReport(android.bluetooth.BluetoothDevice device, int id, byte[] data) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.d(com.android.bluetooth.hid.HidDevService.TAG, ((("sendReport(): device=" + device) + " id=") + id)); if (!(checkDevice(device))) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.TAG, "sendReport: host device not match"); return false; } return sendReportNative(id, data); }
@java.lang.Override public boolean unregisterApp(android.bluetooth.BluetoothHidDeviceAppConfiguration config) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "unregisterApp()"); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, "unregisterApp: HidDevService is null"); return false; } return service.unregisterApp(config); }
synchronized boolean unplug(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.TAG, ("unplug(): device=" + device)); if (!(checkDevice(device))) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.TAG, "unplug: host device not match"); return false; } return unplugNative(); }
@java.lang.Override public void enter() { boolean filter802_3Frames = mContext.getResources().getBoolean(R.bool.config_apfDrop802_3Frames); int[] ethTypeBlackList = mContext.getResources().getIntArray(R.array.config_apfEthTypeBlackList); mApfFilter = android.net.apf.ApfFilter.maybeCreate(mConfiguration.mApfCapabilities, mNetworkInterface, mCallback, mMulticastFiltering, filter802_3Frames, ethTypeBlackList); if ((mApfFilter) == null) { mCallback.setFallbackMulticastFilter(mMulticastFiltering); } mPacketTracker = createPacketTracker(); if ((mPacketTracker) != null) mPacketTracker.start(); if ((mConfiguration.mEnableIPv6) && (!(startIPv6()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPV6); transitionTo(mStoppingState); return; } if ((mConfiguration.mEnableIPv4) && (!(startIPv4()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPV4); transitionTo(mStoppingState); return; } android.net.ip.IpClient.InitialConfiguration config = mConfiguration.mInitialConfig; if ((config != null) && (!(applyInitialConfig(config)))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_INVALID_PROVISIONING); transitionTo(mStoppingState); return; } if ((mConfiguration.mUsingIpReachabilityMonitor) && (!(startIpReachabilityMonitor()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPREACHABILITYMONITOR); transitionTo(mStoppingState); return; } }
@java.lang.Override public java.lang.String toString() { return new java.util.StringJoiner(", ", ((getClass().getSimpleName()) + "{"), "}").add(("mEnableIPv4: " + (mEnableIPv4))).add(("mEnableIPv6: " + (mEnableIPv6))).add(("mUsingIpReachabilityMonitor: " + (mUsingIpReachabilityMonitor))).add(("mRequestedPreDhcpActionMs: " + (mRequestedPreDhcpActionMs))).add(("mInitialConfig: " + (mInitialConfig))).add(("mStaticIpConfig: " + (mStaticIpConfig))).add(("mApfCapabilities: " + (mApfCapabilities))).add(("mProvisioningTimeoutMs: " + (mProvisioningTimeoutMs))).add(("mIPv6AddrGenMode: " + (mIPv6AddrGenMode))).toString(); }
public void fixType() { isGsm = (getGsmRelatedSignalStrength()) != (android.telephony.SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN); }
private static byte[] generateApkSigningBlock(byte[] apkSignatureSchemeV2Block) { int resultSize = ((((8 + 8) + 4) + (apkSignatureSchemeV2Block.length)) + 8) + 16; int padding = 4096 - (resultSize % 4096); resultSize += padding; java.nio.ByteBuffer result = java.nio.ByteBuffer.allocate(resultSize); result.order(java.nio.ByteOrder.LITTLE_ENDIAN); long blockSizeFieldValue = resultSize - 8; result.putLong(blockSizeFieldValue); long pairSizeFieldValue = 4 + (apkSignatureSchemeV2Block.length); result.putLong(pairSizeFieldValue); result.putInt(com.android.apksig.internal.apk.v2.V2SchemeSigner.APK_SIGNATURE_SCHEME_V2_BLOCK_ID); result.put(apkSignatureSchemeV2Block); result.put(java.nio.ByteBuffer.allocate(padding)); result.putLong(blockSizeFieldValue); result.put(com.android.apksig.internal.apk.v2.V2SchemeSigner.APK_SIGNING_BLOCK_MAGIC); return result.array(); }
private static int getInputJarEntryDataAlignmentMultiple(com.android.apksig.internal.zip.LocalFileRecord entry) { if (entry.isDataCompressed()) { return 1; } java.nio.ByteBuffer extra = entry.getExtra(); if (extra.hasRemaining()) { extra.order(java.nio.ByteOrder.LITTLE_ENDIAN); while ((extra.remaining()) >= 4) { short headerId = extra.getShort(); int dataSize = com.android.apksig.internal.zip.ZipUtils.getUnsignedInt16(extra); if (dataSize > (extra.remaining())) { break; } if (headerId != (com.android.apksig.ApkSigner.ALIGNMENT_ZIP_EXTRA_DATA_FIELD_HEADER_ID)) { extra.position(((extra.position()) + dataSize)); continue; } if (dataSize < 2) { break; } return com.android.apksig.internal.zip.ZipUtils.getUnsignedInt16(extra); } } return entry.getName().endsWith(".so") ? com.android.apksig.ApkSigner.LINUX_COMMON_PAGE_ALIGNMENT_BYTES : 4; }
private static void verify(com.android.apksig.util.DataSource beforeApkSigningBlock, java.nio.ByteBuffer apkSignatureSchemeV2Block, com.android.apksig.util.DataSource centralDir, java.nio.ByteBuffer eocd, int maxSdkVersion, com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result result) throws java.io.IOException, java.security.NoSuchAlgorithmException { java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> contentDigestsToVerify = new java.util.HashSet<>(1); com.android.apksig.internal.apk.v2.V2SchemeVerifier.parseSigners(apkSignatureSchemeV2Block, contentDigestsToVerify, maxSdkVersion, result); if (result.containsErrors()) { return; } com.android.apksig.internal.apk.v2.V2SchemeVerifier.verifyIntegrity(beforeApkSigningBlock, centralDir, eocd, contentDigestsToVerify, maxSdkVersion, result); if (!(result.containsErrors())) { result.verified = true; } }
public static com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int maxSdkVersion) throws com.android.apksig.apk.ApkFormatException, com.android.apksig.internal.apk.v2.V2SchemeVerifier.SignatureNotFoundException, java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result result = new com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result(); com.android.apksig.internal.apk.v2.V2SchemeVerifier.SignatureInfo signatureInfo = com.android.apksig.internal.apk.v2.V2SchemeVerifier.findSignature(apk, zipSections, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.internal.apk.v2.V2SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, maxSdkVersion, result); return result; }
private static void parseSigners(java.nio.ByteBuffer apkSignatureSchemeV2Block, java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> contentDigestsToVerify, int maxSdkVersion, com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result result) throws java.security.NoSuchAlgorithmException { java.nio.ByteBuffer signers; try { signers = com.android.apksig.internal.apk.v2.V2SchemeVerifier.getLengthPrefixedSlice(apkSignatureSchemeV2Block); } catch (com.android.apksig.apk.ApkFormatException e) { result.addError(Issue.V2_SIG_MALFORMED_SIGNERS); return; } if (!(signers.hasRemaining())) { result.addError(Issue.V2_SIG_NO_SIGNERS); return; } java.security.cert.CertificateFactory certFactory; try { certFactory = java.security.cert.CertificateFactory.getInstance("X.509"); } catch (java.security.cert.CertificateException e) { throw new java.lang.RuntimeException("Failed to obtain X.509 CertificateFactory", e); } int signerCount = 0; while (signers.hasRemaining()) { int signerIndex = signerCount; signerCount++; com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result.SignerInfo signerInfo = new com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result.SignerInfo(); signerInfo.index = signerIndex; result.signers.add(signerInfo); try { java.nio.ByteBuffer signer = com.android.apksig.internal.apk.v2.V2SchemeVerifier.getLengthPrefixedSlice(signers); com.android.apksig.internal.apk.v2.V2SchemeVerifier.parseSigner(signer, certFactory, signerInfo, contentDigestsToVerify, maxSdkVersion); } catch (com.android.apksig.apk.ApkFormatException | java.nio.BufferUnderflowException e) { signerInfo.addError(Issue.V2_SIG_MALFORMED_SIGNER); return; } } }
void handleCallForwardResult(com.android.internal.telephony.CallForwardInfo cf) { callForwardInfo = cf; if (com.android.phone.CallForwardEditPreference.DBG) android.util.Log.d(com.android.phone.CallForwardEditPreference.LOG_TAG, ("handleGetCFResponse done, callForwardInfo=" + (callForwardInfo))); setToggled(((callForwardInfo.status) == 1)); boolean displayVoicemailNumber = false; if (android.text.TextUtils.isEmpty(callForwardInfo.number)) { android.os.PersistableBundle carrierConfig = com.android.phone.PhoneGlobals.getInstance().getCarrierConfigForSubId(mPhone.getSubId()); if (carrierConfig != null) { displayVoicemailNumber = carrierConfig.getBoolean(CarrierConfigManager.KEY_DISPLAY_VOICEMAIL_NUMBER_AS_DEFAULT_CALL_FORWARDING_NUMBER_BOOL); android.util.Log.d(com.android.phone.CallForwardEditPreference.LOG_TAG, "display voicemail number as default"); } } setPhoneNumber((displayVoicemailNumber ? mPhone.getVoiceMailNumber() : callForwardInfo.number)); }
public synchronized void listAsProtos(java.io.PrintWriter pw) { for (int i = 0; i < (mNetworkMetrics.size()); i++) { pw.print(com.android.server.connectivity.IpConnectivityEventBuilder.toProto(mNetworkMetrics.valueAt(i).connect)); } for (int i = 0; i < (mNetworkMetrics.size()); i++) { pw.print(com.android.server.connectivity.IpConnectivityEventBuilder.toProto(mNetworkMetrics.valueAt(i).dns)); } for (int i = 0; i < (mWakeupStats.size()); i++) { pw.print(com.android.server.connectivity.IpConnectivityEventBuilder.toProto(mWakeupStats.valueAt(i))); } }
private long normalizeSnapshotTime(long timeMs) { return (timeMs / (com.android.server.connectivity.NetdEventListenerService.METRICS_SNAPSHOT_SPAN_MS)) * (com.android.server.connectivity.NetdEventListenerService.METRICS_SNAPSHOT_SPAN_MS); }
public synchronized void list(java.io.PrintWriter pw) { for (int i = 0; i < (mNetworkMetrics.size()); i++) { pw.println(mNetworkMetrics.valueAt(i).connect); } for (int i = 0; i < (mNetworkMetrics.size()); i++) { pw.println(mNetworkMetrics.valueAt(i).dns); } for (com.android.server.connectivity.NetdEventListenerService.NetworkMetricsSnapshot s : getNetworkMetricsSnapshots()) { pw.println(s); } for (int i = 0; i < (mWakeupStats.size()); i++) { pw.println(mWakeupStats.valueAt(i)); } for (android.net.metrics.WakeupEvent wakeup : mWakeupEvents.toArray()) { pw.println(wakeup); } }
public android.net.metrics.NetworkMetrics.Summary pushPendingStats() { stats.merge(pendingStats); android.net.metrics.NetworkMetrics.Summary s = pendingStats; pendingStats = new android.net.metrics.NetworkMetrics.Summary(netId, transports); return s; }
double average() { double a = (sum) / ((double) (count)); if (a != a) { a = 0; } return a; }
public void addConnectResult(int error, int latencyMs, java.lang.String ipAddr) { boolean isSuccess = connect.addEvent(error, latencyMs, ipAddr); pendingStats.connectErrorRate.count((isSuccess ? 0 : 1)); if (android.net.metrics.ConnectStats.isNonBlocking(error)) { pendingStats.connectLatencies.count((latencyMs / 1000.0)); } }
@java.lang.Override public java.lang.String toString() { java.util.StringJoiner j = new java.util.StringJoiner(", ", "{", "}"); j.add(("netId=" + (netId))); for (int t : com.android.internal.util.BitUtils.unpackBits(transports)) { j.add(android.net.NetworkCapabilities.transportNameOf(t)); } j.add(java.lang.String.format("dns avg=%05.2fs max=%05.2fs err=%04.1f%% tot=%d", dnsLatencies.average(), dnsLatencies.max, (100 * (dnsErrorRate.average())), dnsErrorRate.count)); j.add(java.lang.String.format("connect avg=%05.2fs max=%05.2fs err=%04.1f%% tot=%d", connectLatencies.average(), connectLatencies.max, (100 * (connectErrorRate.average())), connectErrorRate.count)); return j.toString(); }
public void addDnsResult(int eventType, int returnCode, int latencyMs) { boolean isSuccess = dns.addResult(((byte) (eventType)), ((byte) (returnCode)), latencyMs); pendingStats.dnsLatencies.count((latencyMs / 1000.0)); pendingStats.dnsErrorRate.count((isSuccess ? 0 : 1)); }
void merge(android.net.metrics.NetworkMetrics.Metrics that) { this.sum += that.sum; this.max = java.lang.Math.min(this.max, that.max); this.count += that.count; }
@java.lang.Override public java.lang.String toString() { return java.lang.String.format("%tT.%tL: %s", timeMs, timeMs, java.util.Arrays.toString(stats)); }
static com.android.server.connectivity.NetdEventListenerService.NetworkMetricsSnapshot collect(long timeMs, android.util.SparseArray<android.net.metrics.NetworkMetrics> networkMetrics) { com.android.server.connectivity.NetdEventListenerService.NetworkMetricsSnapshot snapshot = new com.android.server.connectivity.NetdEventListenerService.NetworkMetricsSnapshot(); snapshot.timeMs = timeMs; snapshot.stats = new android.net.metrics.NetworkMetrics.Summary[networkMetrics.size()]; for (int i = 0; i < (snapshot.stats.length); i++) { snapshot.stats[i] = networkMetrics.valueAt(i).pushPendingStats(); } return snapshot; }
private android.net.metrics.NetworkMetrics getMetricsForNetwork(long nowMs, int netId) { collectPendingMetricsSnapshot(nowMs); android.net.metrics.NetworkMetrics metrics = mNetworkMetrics.get(netId); if (metrics == null) { metrics = new android.net.metrics.NetworkMetrics(netId, getTransports(netId), mConnectTb); mNetworkMetrics.put(netId, metrics); } return metrics; }
private void collectPendingMetricsSnapshot(long nowMs) { if ((java.lang.Math.abs((nowMs - (mLastSnapshot)))) > (com.android.server.connectivity.NetdEventListenerService.METRICS_SNAPSHOT_SPAN_MS)) { mLastSnapshot = normalizeSnapshotTime(nowMs); mNetworkMetricsSnapshots.append(com.android.server.connectivity.NetdEventListenerService.NetworkMetricsSnapshot.collect(mLastSnapshot, mNetworkMetrics)); } }
public synchronized void flushStatistics(java.util.List<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent> events) { for (int i = 0; i < (mNetworkMetrics.size()); i++) { android.net.metrics.ConnectStats stats = mNetworkMetrics.valueAt(i).connect; if ((stats.eventCount) == 0) { continue; } events.add(com.android.server.connectivity.IpConnectivityEventBuilder.toProto(stats)); } for (int i = 0; i < (mNetworkMetrics.size()); i++) { android.net.metrics.DnsEvent ev = mNetworkMetrics.valueAt(i).dns; if ((ev.eventCount) == 0) { continue; } events.add(com.android.server.connectivity.IpConnectivityEventBuilder.toProto(ev)); } for (int i = 0; i < (mWakeupStats.size()); i++) { events.add(com.android.server.connectivity.IpConnectivityEventBuilder.toProto(mWakeupStats.valueAt(i))); } mNetworkMetrics.clear(); mWakeupStats.clear(); }
@com.googlecode.android_scripting.rpc.Rpc(description = "Is Hid Device profile ready.") public java.lang.Boolean bluetoothHidIsReady() { return com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sIsHidDeviceReady; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Get all the devices connected through HID.") public java.util.List<android.bluetooth.BluetoothDevice> bluetoothHidDeviceGetConnectedDevices() { while (!(com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sIsHidDeviceReady)); return com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile.getConnectedDevices(); }
@com.googlecode.android_scripting.rpc.Rpc(description = "Register app for the HID Device service.") public java.lang.Boolean bluetoothHidDeviceRegisterApp() throws java.lang.Exception { return com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile.registerApp(com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sSdpSettings, null, com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sQos, com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sCallback); }
@com.googlecode.android_scripting.rpc.Rpc(description = "Unregister app.") public java.lang.Boolean bluetoothHidDeviceUnregisterApp(@com.googlecode.android_scripting.rpc.RpcParameter(name = "config", description = "App Config.") android.bluetooth.BluetoothHidDeviceAppConfiguration config) throws java.lang.Exception { return false; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Send error handshake message to a connected HID host.") public java.lang.Boolean bluetoothHidDeviceReportError(@com.googlecode.android_scripting.rpc.RpcParameter(name = "deviceID", description = "Name or MAC address of a bluetooth device.") java.lang.String deviceID, @com.googlecode.android_scripting.rpc.RpcParameter(name = "error", description = "Error byte") java.lang.Byte error) throws java.lang.Exception { android.bluetooth.BluetoothDevice device = com.googlecode.android_scripting.facade.bluetooth.BluetoothFacade.getDevice(com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile.getConnectedDevices(), deviceID); return com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile.reportError(device, error); }
@java.lang.Override public void onServiceConnected(int profile, android.bluetooth.BluetoothProfile proxy) { com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile = ((android.bluetooth.BluetoothInputHost) (proxy)); com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sIsHidDeviceReady = true; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Send virtual unplug to a connected HID host.") public java.lang.Boolean bluetoothHidVirtualUnplug(@com.googlecode.android_scripting.rpc.RpcParameter(name = "deviceID", description = "Name or MAC address of a bluetooth device.") java.lang.String deviceID) throws java.lang.Exception { android.bluetooth.BluetoothDevice device = com.googlecode.android_scripting.facade.bluetooth.BluetoothFacade.getDevice(com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile.getConnectedDevices(), deviceID); return com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile.unplug(device); }
@com.googlecode.android_scripting.rpc.Rpc(description = "Send reply report to a connected HID..") public java.lang.Boolean bluetoothHidDeviceReplyReport(@com.googlecode.android_scripting.rpc.RpcParameter(name = "deviceID", description = "Name or MAC address of a bluetooth device.") java.lang.String deviceID, @com.googlecode.android_scripting.rpc.RpcParameter(name = "type", description = "Type as in the report.") java.lang.Byte type, @com.googlecode.android_scripting.rpc.RpcParameter(name = "id", description = "id as in the report.") java.lang.Byte id, @com.googlecode.android_scripting.rpc.RpcParameter(name = "report") java.lang.String report) throws java.lang.Exception { android.bluetooth.BluetoothDevice device = com.googlecode.android_scripting.facade.bluetooth.BluetoothFacade.getDevice(com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile.getConnectedDevices(), deviceID); byte[] reportByteArray = report.getBytes(); return com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile.replyReport(device, type, id, reportByteArray); }
@com.googlecode.android_scripting.rpc.Rpc(description = "Disconnect an HID host.") public java.lang.Boolean bluetoothHidDeviceDisconnect(@com.googlecode.android_scripting.rpc.RpcParameter(name = "device", description = "Name or MAC address of a device.") java.lang.String device) throws java.lang.Exception { if ((com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile) == null) return false; com.googlecode.android_scripting.Log.d(("Connected devices: " + (com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile.getConnectedDevices()))); android.bluetooth.BluetoothDevice mDevice = com.googlecode.android_scripting.facade.bluetooth.BluetoothFacade.getDevice(com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile.getConnectedDevices(), device); return hidDeviceDisconnect(mDevice); }
boolean verifyCallLog(java.lang.String number, java.lang.String date, java.lang.String type) { java.lang.System.out.println(((((("Verifying number=" + number) + ", date=") + date) + ", type=") + type)); java.lang.String[] query = new java.lang.String[]{ android.provider.CallLog.Calls.NUMBER, android.provider.CallLog.Calls.DATE, android.provider.CallLog.Calls.TYPE }; android.database.Cursor cursor = mContext.getContentResolver().query(Calls.CONTENT_URI, query, (((android.provider.CallLog.Calls.TYPE) + "= ") + type), null, (((android.provider.CallLog.Calls.DATE) + ", ") + (android.provider.CallLog.Calls.NUMBER))); if (date != null) { date = adjDate(date); } if (cursor != null) { while (cursor.moveToNext()) { java.lang.String foundNumber = cursor.getString(cursor.getColumnIndex(Calls.NUMBER)); java.lang.String foundDate = cursor.getString(cursor.getColumnIndex(Calls.DATE)); if (((number == null) || (number.equals(foundNumber))) && ((date == null) || (date.equals(foundDate)))) { java.lang.System.out.println(((((("Returnning True, verifying number=" + number) + ", date=") + date) + ", type=") + type)); return true; } } cursor.close(); } java.lang.System.out.println(((((("Returnning False, verifying number=" + number) + ", date=") + date) + ", type=") + type)); return false; }
android.bluetooth.BluetoothClass getBluetoothClass() { enforceCallingOrSelfPermission(com.android.bluetooth.btservice.AdapterService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); return new android.bluetooth.BluetoothClass(mAdapterProperties.getBluetoothClass()); }
@java.lang.Override public void tearDown(com.android.tradefed.device.ITestDevice device, com.android.tradefed.build.IBuildInfo buildInfo, java.lang.Throwable e) throws com.android.tradefed.device.DeviceNotAvailableException { device.executeShellCommand("start"); }
@java.lang.Override public void setUp(com.android.tradefed.device.ITestDevice device, com.android.tradefed.build.IBuildInfo buildInfo) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.TargetSetupError { for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : com.android.tradefed.targetprep.VtsDeviceInfoCollector.BUILD_KEYS.entrySet()) { buildInfo.addBuildAttribute(entry.getKey(), com.android.tradefed.util.ArrayUtil.join(",", device.getProperty(entry.getValue()))); } device.executeShellCommand("stop"); }
public static synchronized com.android.bluetooth.hfpclient.HeadsetClientService getHeadsetClientService() { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "getHeadsetClientService"); if (((com.android.bluetooth.hfpclient.HeadsetClientService.sHeadsetClientService) != null) && (com.android.bluetooth.hfpclient.HeadsetClientService.sHeadsetClientService.isAvailable())) { if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ("getHeadsetClientService(): returning " + (com.android.bluetooth.hfpclient.HeadsetClientService.sHeadsetClientService))); } return com.android.bluetooth.hfpclient.HeadsetClientService.sHeadsetClientService; } if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { if ((com.android.bluetooth.hfpclient.HeadsetClientService.sHeadsetClientService) == null) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "getHeadsetClientService(): service is NULL"); } else if (!(com.android.bluetooth.hfpclient.HeadsetClientService.sHeadsetClientService.isAvailable())) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "getHeadsetClientService(): service is not available"); } } return null; }
public void reset() { mReport = ""; mReportValid = false; android.util.Log.d(com.android.server.wifi.WifiScoreReport.TAG, "reset"); }
private int scorer(android.net.wifi.WifiInfo wifiInfo) { double rssi = wifiInfo.getRssi(); double goodRssi; double badRssi; if (wifiInfo.is5GHz()) { goodRssi = mThresholdSaturatedRssi5; badRssi = mThresholdQualifiedRssi5; } else { goodRssi = mThresholdSaturatedRssi24; badRssi = mThresholdQualifiedRssi24; } double score = (((rssi - badRssi) * 10.0) / (goodRssi - badRssi)) + 50.0; if (mHeader) { android.util.Log.d(com.android.server.wifi.WifiScoreReport.TAG, "@WSR@,rssi,lo,hi,score"); mHeader = false; } android.util.Log.d(com.android.server.wifi.WifiScoreReport.TAG, java.lang.String.format("@WSR@,%.1f,%.1f,%.1f,%.2f", rssi, badRssi, goodRssi, score)); return ((int) (java.lang.Math.round(score))); }
public void calculateAndReportScore(android.net.wifi.WifiInfo wifiInfo, android.net.NetworkAgent networkAgent, int aggressiveHandover, com.android.server.wifi.WifiMetrics wifiMetrics) { int score; if (aggressiveHandover == 0) { updateScoringState(wifiInfo, aggressiveHandover); score = calculateScore(wifiInfo, aggressiveHandover); } else { score = scorer(wifiInfo); } if (score > (android.net.NetworkAgent.WIFI_BASE_SCORE)) { score = android.net.NetworkAgent.WIFI_BASE_SCORE; } if (score < 0) { score = 0; } if (score != (wifiInfo.score)) { if (mVerboseLoggingEnabled) { android.util.Log.d(com.android.server.wifi.WifiScoreReport.TAG, (" report new wifi score " + score)); } wifiInfo.score = score; if (networkAgent != null) { networkAgent.sendNetworkScore(score); } } mReport = java.lang.String.format(" score=%d", score); mReportValid = true; wifiMetrics.incrementWifiScoreCount(score); }
public boolean getIsVoipAudioMode() { return (mIsVoipAudioMode) || ((mHandle) != null ? (mHandle.getScheme()) == (android.telecom.PhoneAccount.SCHEME_SIP) : false); }
@java.lang.Override public com.android.apksig.util.DataSource slice(long offset, long size) { throw new java.lang.UnsupportedOperationException("Not implemented"); }
@org.junit.Test public void feedAllPossibleRanges() throws java.lang.Exception { for (int begin = 0; begin < (mChain.size()); begin++) { for (int end = begin + 1; end < (mChain.size()); end++) { int size = end - begin; com.android.apksig.util.ReadableDataSink sink = com.android.apksig.util.DataSinks.newInMemoryDataSink(size); mChain.feed(begin, size, sink); assertArrayEquals("1234567890".substring(begin, end).getBytes(), sink.getByteBuffer(0, size).array()); } } }
@org.junit.Test public void copyTo() throws java.lang.Exception { for (int begin = 0; begin < (mChain.size()); begin++) { for (int end = begin + 1; end < (mChain.size()); end++) { int size = end - begin; java.nio.ByteBuffer buffer = java.nio.ByteBuffer.allocate(size); mChain.copyTo(begin, size, buffer); assertArrayEquals("1234567890".substring(begin, end).getBytes(), buffer.array()); } } }
@org.junit.Test public void getByteBufferFromAllPossibleRanges() throws java.lang.Exception { for (int begin = 0; begin < (mChain.size()); begin++) { for (int end = begin + 1; end < (mChain.size()); end++) { int size = end - begin; java.nio.ByteBuffer buffer = mChain.getByteBuffer(begin, size); assertArrayEquals("1234567890".substring(begin, end).getBytes(), buffer.array()); } } }
public byte[] generateVerityTreeRootHash(com.android.apksig.util.DataSource beforeApkSigningBlock, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd) throws java.io.IOException { if (((beforeApkSigningBlock.size()) % (com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE)) != 0) { throw new java.lang.IllegalStateException("APK Signing Block is not page aligned"); } com.android.apksig.util.DataSource modifiedEocd = com.android.apksig.util.DataSources.asDataSource(com.android.apksig.internal.zip.EocdRecord.createWithCentralDirectoryFieldHidden(eocd.getByteBuffer(0, ((int) (eocd.size()))))); return generateVerityTreeRootHash(new com.android.apksig.internal.util.ChainedDataSource(beforeApkSigningBlock, centralDir, modifiedEocd)); }
@org.junit.Test public void generateVerityTreeRootHashFromDummyDataSource() throws java.lang.Exception { byte[] sampleEoCDFromDisk = new byte[]{ 80, 75, 5, 6, 0, 0, 0, 0, 6, 0, 6, 0, 121, 1, 0, 0, 48, 22, 0, 0, 0, 0 }; com.android.apksig.internal.util.VerityTreeBuilder builder = new com.android.apksig.internal.util.VerityTreeBuilder(null); byte[] rootHash = builder.generateVerityTreeRootHash(com.android.apksig.util.DataSources.asDataSource(java.nio.ByteBuffer.allocate(4096)), makeStringDataSource("this is central directory (fake data)"), com.android.apksig.util.DataSources.asDataSource(java.nio.ByteBuffer.wrap(sampleEoCDFromDisk))); junit.framework.TestCase.assertEquals("db4176e0d6c3660a7072d9f7ae0053ba16a4a29df348627c79e1d786cf6c2931", com.android.apksig.internal.util.HexEncoding.encode(rootHash)); }
@java.lang.Override public java.nio.ByteBuffer getByteBuffer(long offset, int size) throws java.io.IOException { if ((offset + size) > (mTotalSize)) { throw new java.lang.IndexOutOfBoundsException("Requested more than available"); } com.android.apksig.util.ReadableDataSink sink = com.android.apksig.util.DataSinks.newInMemoryDataSink(size); feed(offset, size, sink); return sink.getByteBuffer(0, size); }
@java.lang.Override public void feed(long offset, long size, com.android.apksig.util.DataSink sink) throws java.io.IOException { if ((offset + size) > (mTotalSize)) { throw new java.lang.IndexOutOfBoundsException("Requested more than available"); } java.nio.ByteBuffer buffer = null; for (com.android.apksig.util.DataSource src : mSources) { if (offset >= (src.size())) { offset -= src.size(); continue; } long remaining = (src.size()) - offset; if (remaining >= size) { if (buffer != null) { if (offset != 0) { throw new java.lang.IllegalStateException("Cannot skip continuous data"); } src.copyTo(offset, java.lang.Math.toIntExact(size), buffer); break; } sink.consume(src.getByteBuffer(offset, java.lang.Math.toIntExact(size))); return; } if (buffer == null) { buffer = java.nio.ByteBuffer.allocate(java.lang.Math.toIntExact(size)); } src.copyTo(offset, java.lang.Math.toIntExact(remaining), buffer); size -= remaining; offset = 0; } if (buffer != null) { buffer.rewind(); sink.consume(buffer); } }
private void volumeChangeRequestFromNative(byte[] address, int volume, int ctype) { final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, "mHandler is already null"); return; } android.os.Message msg = handler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_VOLUME_CHANGE, volume, ctype); android.os.Bundle data = new android.os.Bundle(); data.putByteArray("BdAddress", address); msg.setData(data); handler.sendMessage(msg); }
private void getPlayStatusRequestFromNative(byte[] address) { final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, "mHandler is already null"); return; } android.os.Message msg = handler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_GET_PLAY_STATUS); msg.obj = address; handler.sendMessage(msg); }
private void playItemRequestFromNative(byte[] address, byte scope, int uidCounter, byte[] uid) { final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, "mHandler is already null"); return; } android.os.Bundle data = new android.os.Bundle(); android.os.Message msg = handler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_PLAY_ITEM); data.putByteArray("BdAddress", address); data.putByteArray("uid", uid); data.putInt("uidCounter", uidCounter); data.putByte("scope", scope); msg.setData(data); handler.sendMessage(msg); }
private void setAddressedPlayerRequestFromNative(byte[] address, int playerId) { final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, "mHandler is already null"); return; } android.os.Message msg = handler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_SET_ADDR_PLAYER, playerId, 0); msg.obj = address; handler.sendMessage(msg); }
private void handlePassthroughCmdRequestFromNative(byte[] address, int id, int keyState) { final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, "mHandler is already null"); return; } android.os.Message msg = handler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_PASS_THROUGH, id, keyState); handler.sendMessage(msg); }
@java.lang.Override public void onQueueChanged(java.util.List<android.media.session.MediaSession.QueueItem> queue) { if (queue == null) { android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, "onQueueChanged: received null queue"); return; } final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, "mHandler is already null"); return; } android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ("onQueueChanged: NowPlaying list changed, Queue Size = " + (queue.size()))); handler.sendEmptyMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NOW_PLAYING_CHANGED_RSP); }
public void adjustVolume(int direction) { final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, "mHandler is already null"); return; } android.os.Message msg = handler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_ADJUST_VOLUME, direction, 0); handler.sendMessage(msg); }
public void setA2dpAudioState(int state) { final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, "mHandler is already null"); return; } android.os.Message msg = handler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_SET_A2DP_AUDIO_STATE, state, 0); handler.sendMessage(msg); }
private void registerNotificationRequestFromNative(byte[] address, int eventId, int param) { final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, "mHandler is already null"); return; } android.os.Message msg = handler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_REGISTER_NOTIFICATION, eventId, param); msg.obj = address; handler.sendMessage(msg); }
private void getTotalNumOfItemsRequestFromNative(byte[] address, byte scope) { final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, "mHandler is already null"); return; } android.os.Bundle data = new android.os.Bundle(); android.os.Message msg = handler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_GET_TOTAL_NUM_OF_ITEMS); msg.arg1 = scope; msg.obj = address; handler.sendMessage(msg); }
private void getElementAttrRequestFromNative(byte[] address, byte numAttr, int[] attrs) { final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, "mHandler is already null"); return; } com.android.bluetooth.avrcp.AvrcpCmd avrcpCmdobj = new com.android.bluetooth.avrcp.AvrcpCmd(); com.android.bluetooth.avrcp.AvrcpCmd.ElementAttrCmd elemAttr = avrcpCmdobj.new com.android.bluetooth.avrcp.ElementAttrCmd(address, numAttr, attrs); android.os.Message msg = handler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_GET_ELEM_ATTRS); msg.obj = elemAttr; handler.sendMessage(msg); }
private void setBrowsedPlayerRequestFromNative(byte[] address, int playerId) { final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, "mHandler is already null"); return; } android.os.Message msg = handler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_SET_BR_PLAYER, playerId, 0); msg.obj = address; handler.sendMessage(msg); }
private void changePathRequestFromNative(byte[] address, byte direction, byte[] folderUid) { final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, "mHandler is already null"); return; } android.os.Bundle data = new android.os.Bundle(); android.os.Message msg = handler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_CHANGE_PATH); data.putByteArray("BdAddress", address); data.putByteArray("folderUid", folderUid); data.putByte("direction", direction); msg.setData(data); handler.sendMessage(msg); }
private void getRcFeaturesRequestFromNative(byte[] address, int features) { final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, "mHandler is already null"); return; } android.os.Message msg = handler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_GET_RC_FEATURES, features, 0, com.android.bluetooth.Utils.getAddressStringFromByte(address)); handler.sendMessage(msg); }
private void getItemAttrRequestFromNative(byte[] address, byte scope, byte[] itemUid, int uidCounter, byte numAttr, int[] attrs) { final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, "mHandler is already null"); return; } com.android.bluetooth.avrcp.AvrcpCmd avrcpCmdobj = new com.android.bluetooth.avrcp.AvrcpCmd(); com.android.bluetooth.avrcp.AvrcpCmd.ItemAttrCmd itemAttr = avrcpCmdobj.new com.android.bluetooth.avrcp.ItemAttrCmd(address, scope, itemUid, uidCounter, numAttr, attrs); android.os.Message msg = handler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_GET_ITEM_ATTR); msg.obj = itemAttr; handler.sendMessage(msg); }
public void setAbsoluteVolume(int volume) { if (volume == (mLocalVolume)) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ("setAbsoluteVolume is setting same index, ignore " + volume)); return; } final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, "mHandler is already null"); return; } handler.removeMessages(com.android.bluetooth.avrcp.Avrcp.MSG_ADJUST_VOLUME); android.os.Message msg = handler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_SET_ABSOLUTE_VOLUME, volume, 0); handler.sendMessage(msg); }
private void getFolderItemsRequestFromNative(byte[] address, byte scope, long startItem, long endItem, byte numAttr, int[] attrIds) { final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, "mHandler is already null"); return; } com.android.bluetooth.avrcp.AvrcpCmd avrcpCmdobj = new com.android.bluetooth.avrcp.AvrcpCmd(); com.android.bluetooth.avrcp.AvrcpCmd.FolderItemsCmd folderObj = avrcpCmdobj.new com.android.bluetooth.avrcp.FolderItemsCmd(address, scope, startItem, endItem, numAttr, attrIds); android.os.Message msg = handler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_GET_FOLDER_ITEMS, 0, 0); msg.obj = folderObj; handler.sendMessage(msg); }
@org.junit.Test public void testBasicListening() { assertEquals(0, mCallbackCount); mListener.startListening(); for (int i = 0; i < 5; i++) { sendChangeBroadcast(); assertEquals((i + 1), mCallbackCount); } mListener.stopListening(); }
@org.junit.Test public void testBroadcastsAfterStopAreIgnored() { mListener.startListening(); sendChangeBroadcast(); assertEquals(1, mCallbackCount); mListener.stopListening(); for (int i = 0; i < 5; i++) { sendChangeBroadcast(); assertEquals(1, mCallbackCount); } }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); reset(mContext); mServiceContext = new com.android.server.connectivity.tethering.CarrierConfigChangeListenerTest.MockContext(mContext); mHandler = new android.os.Handler(android.os.Looper.myLooper()); mCallbackCount = 0; mListener = new com.android.server.connectivity.tethering.CarrierConfigChangeListener(mServiceContext, mHandler, () -> doCallback()); }
@org.junit.Test public void testBroadcastsBeforeStartAreIgnored() { assertEquals(0, mCallbackCount); for (int i = 0; i < 5; i++) { sendChangeBroadcast(); assertEquals(0, mCallbackCount); } mListener.startListening(); sendChangeBroadcast(); assertEquals(1, mCallbackCount); }
private void sendChangeBroadcast() { final android.content.Intent intent = new android.content.Intent(android.telephony.CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED); mServiceContext.sendStickyBroadcastAsUser(intent, UserHandle.ALL); }
public static int $noinline$bug68142795Short(short b) { return ((short) (65535 & (b & 65535))); }
private boolean isFacToDial() { android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (mPhone.getContext().getSystemService(Context.CARRIER_CONFIG_SERVICE))); com.android.internal.telephony.gsm.PersistableBundle b = configManager.getConfigForSubId(mPhone.getSubId()); java.lang.String[] dialFacList = b.getStringArray(CarrierConfigManager.KEY_ENABLE_DIAL_FAC_STRING_ARRAY); if (!(com.android.internal.util.ArrayUtils.isEmpty(dialFacList))) { for (java.lang.String fac : dialFacList) { if (fac.equals(mSc)) { return true; } } } return false; }
private int modifyRcFeatureFromBlacklist(int feature, java.lang.String address) { android.content.SharedPreferences pref = mContext.getSharedPreferences(com.android.bluetooth.avrcp.Avrcp.ABSOLUTE_VOLUME_BLACKLIST, Context.MODE_PRIVATE); if (!(pref.contains(address))) { return feature; } feature &= ~(com.android.bluetooth.avrcp.Avrcp.BTRC_FEAT_ABSOLUTE_VOLUME); return feature; }
@org.junit.Before public void setUp() throws java.lang.Exception { mContext = android.support.test.InstrumentationRegistry.getContext(); org.mockito.MockitoAnnotations.initMocks(this); when(mMetricsService.defaultNetworkMonitor()).thenReturn(mDefaultNetworkMonitor); if ((android.os.Looper.myLooper()) == null) { android.os.Looper.prepare(); } mServiceContext = new com.android.server.ConnectivityServiceTest.MockContext(android.support.test.InstrumentationRegistry.getContext()); com.android.server.LocalServices.removeServiceForTest(com.android.server.net.NetworkPolicyManagerInternal.class); com.android.server.LocalServices.addService(com.android.server.net.NetworkPolicyManagerInternal.class, mock(com.android.server.net.NetworkPolicyManagerInternal.class)); mService = new com.android.server.ConnectivityServiceTest.WrappedConnectivityService(mServiceContext, mock(android.os.INetworkManagementService.class), mock(android.net.INetworkStatsService.class), mock(android.net.INetworkPolicyManager.class), mock(android.net.metrics.IpConnectivityLog.class)); mService.systemReady(); mCm = new com.android.server.ConnectivityServiceTest.WrappedConnectivityManager(android.support.test.InstrumentationRegistry.getContext(), mService); mCm.bindProcessToNetwork(null); setCaptivePortalMode(Settings.Global.CAPTIVE_PORTAL_MODE_PROMPT); setMobileDataAlwaysOn(false); }
private void cmdList(java.io.FileDescriptor fd, java.io.PrintWriter pw, java.lang.String[] args) { final java.util.ArrayList<android.net.ConnectivityMetricsEvent> events; synchronized(mLock) { events = new java.util.ArrayList(mBuffer); } if (((args.length) > 1) && (args[1].equals("proto"))) { for (com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent ev : com.android.server.connectivity.IpConnectivityEventBuilder.toProto(events)) { pw.print(ev.toString()); } if ((mNetdListener) != null) { mNetdListener.listAsProtos(pw); } mDefaultNetworkMonitor.listEventsAsProto(pw); return; } for (android.net.ConnectivityMetricsEvent ev : events) { pw.println(ev.toString()); } if ((mNetdListener) != null) { mNetdListener.list(pw); } }
private java.lang.String ipSupport() { if ((prevIPv4) && (prevIPv6)) { return "IPv4/v6"; } if (prevIPv6) { return "IPv6"; } if (prevIPv4) { return "IPv4"; } return "NONE"; }
@org.junit.Test public void testDhcpFailure() throws java.lang.Exception { initializeAndAddNetworkAndVerifySuccess(); mWsm.setOperationalMode(WifiStateMachine.CONNECT_MODE); mLooper.dispatchAll(); mLooper.startAutoDispatch(); mWsm.syncEnableNetwork(mWsmAsyncChannel, 0, true); mLooper.stopAutoDispatch(); verify(mWifiConfigManager).enableNetwork(eq(0), eq(true), anyInt()); mWsm.sendMessage(WifiMonitor.NETWORK_CONNECTION_EVENT, 0, 0, com.android.server.wifi.WifiStateMachineTest.sBSSID); mLooper.dispatchAll(); mWsm.sendMessage(WifiMonitor.SUPPLICANT_STATE_CHANGE_EVENT, 0, 0, new com.android.server.wifi.StateChangeResult(0, com.android.server.wifi.WifiStateMachineTest.sWifiSsid, com.android.server.wifi.WifiStateMachineTest.sBSSID, android.net.wifi.SupplicantState.COMPLETED)); mLooper.dispatchAll(); assertEquals("ObtainingIpState", getCurrentState().getName()); mTestIpClient.injectDhcpFailure(); mLooper.dispatchAll(); assertEquals("DisconnectingState", getCurrentState().getName()); }
@org.junit.Test public void connectWithNoEnablePermission() throws java.lang.Exception { initializeAndAddNetworkAndVerifySuccess(); when(mWifiConfigManager.enableNetwork(eq(0), eq(true), anyInt())).thenReturn(false); when(mWifiConfigManager.checkAndUpdateLastConnectUid(eq(0), anyInt())).thenReturn(false); mWsm.setOperationalMode(WifiStateMachine.CONNECT_MODE); mLooper.dispatchAll(); verify(mWifiNative).removeAllNetworks(); mLooper.startAutoDispatch(); assertTrue(mWsm.syncEnableNetwork(mWsmAsyncChannel, 0, true)); mLooper.stopAutoDispatch(); verify(mWifiConfigManager).enableNetwork(eq(0), eq(true), anyInt()); verify(mWifiConnectivityManager, never()).setUserConnectChoice(eq(0)); mWsm.sendMessage(WifiMonitor.NETWORK_CONNECTION_EVENT, 0, 0, com.android.server.wifi.WifiStateMachineTest.sBSSID); mLooper.dispatchAll(); mWsm.sendMessage(WifiMonitor.SUPPLICANT_STATE_CHANGE_EVENT, 0, 0, new com.android.server.wifi.StateChangeResult(0, com.android.server.wifi.WifiStateMachineTest.sWifiSsid, com.android.server.wifi.WifiStateMachineTest.sBSSID, android.net.wifi.SupplicantState.COMPLETED)); mLooper.dispatchAll(); assertEquals("ObtainingIpState", getCurrentState().getName()); android.net.DhcpResults dhcpResults = new android.net.DhcpResults(); dhcpResults.setGateway("1.2.3.4"); dhcpResults.setIpAddress("192.168.1.100", 0); dhcpResults.addDns("8.8.8.8"); dhcpResults.setLeaseDuration(3600); mTestIpClient.injectDhcpSuccess(dhcpResults); mLooper.dispatchAll(); assertEquals("ConnectedState", getCurrentState().getName()); }
@java.lang.Override public void startProvisioning(android.net.ip.IpClient.ProvisioningConfiguration config) { }
public android.net.ip.IpClient answer(android.content.Context context, java.lang.String ifname, android.net.ip.IpClient.Callback callback) { mTestIpClient = new com.android.server.wifi.WifiStateMachineTest.TestIpClient(context, ifname, callback); return mTestIpClient; }
private void maybeSync() { if ((flushAfterWrite) == (FLUSH_FSYNC)) { try { fd.sync(); } catch (java.io.IOException e) { } } else if ((flushAfterWrite) == (FLUSH_FDATASYNC)) { try { android.system.Os.fdatasync(fd); } catch (android.system.ErrnoException e) { } } }
void set(long key, @android.os.NonNull android.os.BinderProxy value) { int myHash = android.os.BinderProxy.ProxyMap.hash(key); java.util.ArrayList<java.lang.ref.WeakReference<android.os.BinderProxy>> valueArray = mMainIndexValues[myHash]; if (valueArray == null) { valueArray = mMainIndexValues[myHash] = new java.util.ArrayList<>(); mMainIndexKeys[myHash] = new java.lang.Long[1]; } int size = valueArray.size(); java.lang.ref.WeakReference<android.os.BinderProxy> newWr = new java.lang.ref.WeakReference<>(value); for (int i = 0; i < size; ++i) { if ((valueArray.get(i).get()) == null) { valueArray.set(i, newWr); java.lang.Long[] keyArray = mMainIndexKeys[myHash]; keyArray[i] = key; if (i < (size - 1)) { int rnd = (++(mRandom)) % (size - (i + 1)); if ((valueArray.get(((i + 1) + rnd)).get()) == null) { remove(myHash, ((i + 1) + rnd)); } } return; } } valueArray.add(size, newWr); java.lang.Long[] keyArray = mMainIndexKeys[myHash]; if ((keyArray.length) == size) { java.lang.Long[] newArray = new java.lang.Long[(size + (size / 2)) + 2]; java.lang.System.arraycopy(keyArray, 0, newArray, 0, size); newArray[size] = key; mMainIndexKeys[myHash] = newArray; } else { keyArray[size] = key; } if (size >= (mWarnBucketSize)) { android.util.Log.v(android.os.Binder.TAG, ((("BinderProxy map growth! bucket size = " + size) + " total = ") + (size()))); mWarnBucketSize += android.os.BinderProxy.ProxyMap.WARN_INCREMENT; } }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { if (android.telephony.CellIdentityGsm.DBG) android.telephony.CellIdentityGsm.log(("writeToParcel(Parcel, int): " + (toString()))); dest.writeInt(mMcc); dest.writeInt(mMnc); dest.writeInt(mLac); dest.writeInt(mCid); dest.writeInt(mArfcn); dest.writeInt(mBsic); dest.writeString(mAlphaLong); dest.writeString(mAlphaShort); }
@java.lang.Override public boolean equals(java.lang.Object other) { if ((this) == other) { return true; } if (!(other instanceof android.telephony.CellIdentityGsm)) { return false; } android.telephony.CellIdentityGsm o = ((android.telephony.CellIdentityGsm) (other)); return ((((((((mMcc) == (o.mMcc)) && ((mMnc) == (o.mMnc))) && ((mLac) == (o.mLac))) && ((mCid) == (o.mCid))) && ((mArfcn) == (o.mArfcn))) && ((mBsic) == (o.mBsic))) && (mAlphaLong.equals(o.mAlphaLong))) && (mAlphaShort.equals(o.mAlphaShort)); }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { if (android.telephony.CellIdentityLte.DBG) android.telephony.CellIdentityLte.log(("writeToParcel(Parcel, int): " + (toString()))); dest.writeInt(mMcc); dest.writeInt(mMnc); dest.writeInt(mCi); dest.writeInt(mPci); dest.writeInt(mTac); dest.writeInt(mEarfcn); dest.writeString(mAlphaLong); dest.writeString(mAlphaShort); }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder sb = new java.lang.StringBuilder("CellIdentityWcdma:{"); sb.append(" mMcc=").append(mMcc); sb.append(" mMnc=").append(mMnc); sb.append(" mLac=").append(mLac); sb.append(" mCid=").append(mCid); sb.append(" mPsc=").append(mPsc); sb.append(" mUarfcn=").append(mUarfcn); sb.append(" mAlphaLong=").append(mAlphaLong); sb.append(" mAlphaShort=").append(mAlphaShort); sb.append("}"); return sb.toString(); }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { if (android.telephony.CellIdentityWcdma.DBG) android.telephony.CellIdentityWcdma.log(("writeToParcel(Parcel, int): " + (toString()))); dest.writeInt(mMcc); dest.writeInt(mMnc); dest.writeInt(mLac); dest.writeInt(mCid); dest.writeInt(mPsc); dest.writeInt(mUarfcn); dest.writeString(mAlphaLong); dest.writeString(mAlphaShort); }
@java.lang.Override public boolean equals(java.lang.Object other) { if ((this) == other) { return true; } if (!(other instanceof android.telephony.CellIdentityCdma)) { return false; } android.telephony.CellIdentityCdma o = ((android.telephony.CellIdentityCdma) (other)); return (((((((mNetworkId) == (o.mNetworkId)) && ((mSystemId) == (o.mSystemId))) && ((mBasestationId) == (o.mBasestationId))) && ((mLatitude) == (o.mLatitude))) && ((mLongitude) == (o.mLongitude))) && (mAlphaLong.equals(o.mAlphaLong))) && (mAlphaShort.equals(o.mAlphaShort)); }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder sb = new java.lang.StringBuilder("CellIdentityGsm:{"); sb.append(" mMcc=").append(mMcc); sb.append(" mMnc=").append(mMnc); sb.append(" mLac=").append(mLac); sb.append(" mCid=").append(mCid); sb.append(" mArfcn=").append(mArfcn); sb.append(" mBsic=").append("0x").append(java.lang.Integer.toHexString(mBsic)); sb.append(" mAlphaLong=").append(mAlphaLong); sb.append(" mAlphaShort=").append(mAlphaShort); sb.append("}"); return sb.toString(); }
@java.lang.Override public boolean equals(java.lang.Object other) { if ((this) == other) { return true; } if (!(other instanceof android.telephony.CellIdentityWcdma)) { return false; } android.telephony.CellIdentityWcdma o = ((android.telephony.CellIdentityWcdma) (other)); return ((((((((mMcc) == (o.mMcc)) && ((mMnc) == (o.mMnc))) && ((mLac) == (o.mLac))) && ((mCid) == (o.mCid))) && ((mPsc) == (o.mPsc))) && ((mUarfcn) == (o.mUarfcn))) && (mAlphaLong.equals(o.mAlphaLong))) && (mAlphaShort.equals(o.mAlphaShort)); }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder sb = new java.lang.StringBuilder("CellIdentityLte:{"); sb.append(" mMcc="); sb.append(mMcc); sb.append(" mMnc="); sb.append(mMnc); sb.append(" mCi="); sb.append(mCi); sb.append(" mPci="); sb.append(mPci); sb.append(" mTac="); sb.append(mTac); sb.append(" mEarfcn="); sb.append(mEarfcn); sb.append(" mAlphaLong="); sb.append(mAlphaLong); sb.append(" mAlphaShort="); sb.append(mAlphaShort); sb.append("}"); return sb.toString(); }
@java.lang.Override public boolean equals(java.lang.Object other) { if ((this) == other) { return true; } if (!(other instanceof android.telephony.CellIdentityLte)) { return false; } android.telephony.CellIdentityLte o = ((android.telephony.CellIdentityLte) (other)); return ((((((((mMcc) == (o.mMcc)) && ((mMnc) == (o.mMnc))) && ((mCi) == (o.mCi))) && ((mPci) == (o.mPci))) && ((mTac) == (o.mTac))) && ((mEarfcn) == (o.mEarfcn))) && (mAlphaLong.equals(o.mAlphaLong))) && (mAlphaShort.equals(o.mAlphaShort)); }
public static boolean addresStartsWith(java.lang.String bdAddr, java.lang.String carkitAddr) { return bdAddr.startsWith(carkitAddr); }
private void setSubject(com.android.bluetooth.map.BluetoothMapMessageListingElement e, android.database.Cursor c, com.android.bluetooth.map.BluetoothMapContent.FilterInfo fi, com.android.bluetooth.map.BluetoothMapAppParams ap) { java.lang.String subject = ""; int subLength = ap.getSubjectLength(); if (subLength == (BluetoothMapAppParams.INVALID_VALUE_PARAMETER)) subLength = 256; if ((com.android.bluetooth.DeviceWorkArounds.addresStartsWith(com.android.bluetooth.map.BluetoothMapService.getRemoteDevice().getAddress(), DeviceWorkArounds.HONDA_CARKIT)) || (((ap.getParameterMask()) & (com.android.bluetooth.map.BluetoothMapContent.MASK_SUBJECT)) != 0)) { if ((fi.mMsgType) == (com.android.bluetooth.map.BluetoothMapContent.FilterInfo.TYPE_SMS)) { subject = c.getString(fi.mSmsColSubject); } else if ((fi.mMsgType) == (com.android.bluetooth.map.BluetoothMapContent.FilterInfo.TYPE_MMS)) { subject = c.getString(fi.mMmsColSubject); if ((subject == null) || ((subject.length()) == 0)) { long id = c.getLong(fi.mMmsColId); subject = com.android.bluetooth.map.BluetoothMapContent.getTextPartsMms(mResolver, id); } } else if (((fi.mMsgType) == (com.android.bluetooth.map.BluetoothMapContent.FilterInfo.TYPE_EMAIL)) || ((fi.mMsgType) == (com.android.bluetooth.map.BluetoothMapContent.FilterInfo.TYPE_IM))) { subject = c.getString(fi.mMessageColSubject); } if ((subject != null) && ((subject.length()) > subLength)) { subject = subject.substring(0, subLength); } else if (subject == null) { subject = ""; } if (com.android.bluetooth.map.BluetoothMapContent.V) android.util.Log.d(com.android.bluetooth.map.BluetoothMapContent.TAG, ("setSubject: " + subject)); e.setSubject(subject); } }
public byte[] encode() throws java.io.UnsupportedEncodingException { java.util.ArrayList<byte[]> bodyFragments = new java.util.ArrayList<byte[]>(); if ((mSmsBody) != null) { java.lang.String tmpBody = mSmsBody.replaceAll("END:MSG", "/END\\:MSG"); java.lang.String remoteAddress = com.android.bluetooth.map.BluetoothMapService.getRemoteDevice().getAddress(); if (com.android.bluetooth.DeviceWorkArounds.addresStartsWith(remoteAddress, DeviceWorkArounds.PCM_CARKIT)) { tmpBody = tmpBody.replaceAll("\r", ""); } else if (com.android.bluetooth.DeviceWorkArounds.addresStartsWith(remoteAddress, DeviceWorkArounds.FORD_SYNC_CARKIT)) { tmpBody = tmpBody.replaceAll("\n", ""); } bodyFragments.add(tmpBody.getBytes("UTF-8")); } else if (((mSmsBodyPdus) != null) && ((mSmsBodyPdus.size()) > 0)) { for (com.android.bluetooth.map.BluetoothMapSmsPdu.SmsPdu pdu : mSmsBodyPdus) { bodyFragments.add(encodeBinary(pdu.getData(), pdu.getScAddress()).getBytes("UTF-8")); } } else { bodyFragments.add(new byte[0]); } return encodeGeneric(bodyFragments); }
private void setDisplayName() { com.android.internal.telephony.uicc.SubscriptionManager subManager = com.android.internal.telephony.uicc.SubscriptionManager.from(mContext); int[] subId = subManager.getSubId(mParentApp.getPhoneId()); if ((subId == null) || ((subId.length) <= 0)) { log(("subId not valid for Phone " + (mParentApp.getPhoneId()))); return; } android.telephony.SubscriptionInfo subInfo = subManager.getActiveSubscriptionInfo(subId[0]); if ((subInfo != null) && ((subInfo.getNameSource()) != (SubscriptionManager.NAME_SOURCE_USER_INPUT))) { java.lang.CharSequence oldSubName = subInfo.getDisplayName(); java.lang.String newCarrierName = mTelephonyManager.getSimOperatorName(subId[0]); if ((!(android.text.TextUtils.isEmpty(newCarrierName))) && (!(newCarrierName.equals(oldSubName)))) { log(((("sim name[" + (mParentApp.getPhoneId())) + "] = ") + newCarrierName)); com.android.internal.telephony.SubscriptionController.getInstance().setDisplayName(newCarrierName, subId[0]); } } else { log((((("SUB[" + (mParentApp.getPhoneId())) + "] ") + (subId[0])) + " SubInfo not created yet")); } }
@java.lang.Override public boolean bindBluetoothProfileService(int bluetoothProfile, android.bluetooth.IBluetoothProfileServiceConnection proxy) { if (!(mEnable)) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (("Trying to bind to profile: " + bluetoothProfile) + ", while Bluetooth was disabled")); } return false; } synchronized(mProfileServices) { com.android.server.BluetoothManagerService.ProfileServiceConnections psc = mProfileServices.get(new java.lang.Integer(bluetoothProfile)); if (psc == null) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (("Creating new ProfileServiceConnections object for" + " profile: ") + bluetoothProfile)); } java.lang.String deviceType; switch (bluetoothProfile) { case android.bluetooth.BluetoothProfile.HEADSET : deviceType = android.bluetooth.IBluetoothHeadset.class.getName(); break; case android.bluetooth.BluetoothProfile.INPUT_HOST : deviceType = android.bluetooth.IBluetoothInputHost.class.getName(); break; default : android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ("This profile service is not supported: " + bluetoothProfile)); return false; android.content.Intent intent = new android.content.Intent(deviceType); psc = new com.android.server.BluetoothManagerService.ProfileServiceConnections(intent); if (!(psc.bindService())) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Cannot bind to profile service"); return false; } mProfileServices.put(new java.lang.Integer(bluetoothProfile), psc); } } android.os.Message addProxyMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_ADD_PROXY_DELAYED); addProxyMsg.arg1 = bluetoothProfile; addProxyMsg.obj = proxy; mHandler.sendMessageDelayed(addProxyMsg, com.android.server.BluetoothManagerService.ADD_PROXY_DELAY_MS); return true; } }
public void sendTextWithOptions(java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean persistMessageForNonDefaultSmsApp, int priority, boolean isExpectMore, int validityPeriod) { mPhone.getContext().enforceCallingPermission(Manifest.permission.SEND_SMS, "Sending SMS message"); if (android.telephony.Rlog.isLoggable("SMS", Log.VERBOSE)) { log(((((((((((("sendText: destAddr=" + destAddr) + " scAddr=") + scAddr) + " text='") + text) + "' sentIntent=") + sentIntent) + " deliveryIntent=") + deliveryIntent) + "validityPeriod") + validityPeriod)); } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMS, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return; } mDispatcher.sendText(destAddr, scAddr, text, sentIntent, deliveryIntent, null, callingPackage, persistMessageForNonDefaultSmsApp, priority, isExpectMore, validityPeriod); }
public void sendMultipartTextForSubscriberWithOptions(int subId, java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.util.List<java.lang.String> parts, java.util.List<android.app.PendingIntent> sentIntents, java.util.List<android.app.PendingIntent> deliveryIntents, boolean persistMessage, int priority, boolean isExpectMore, int validityPeriod) { com.android.internal.telephony.IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId); if (iccSmsIntMgr != null) { iccSmsIntMgr.sendMultipartTextWithOptions(callingPackage, destAddr, scAddr, parts, sentIntents, deliveryIntents, persistMessage, priority, isExpectMore, validityPeriod); } else { android.telephony.Rlog.e(com.android.internal.telephony.UiccSmsController.LOG_TAG, (("sendMultipartTextWithOptions iccSmsIntMgr is null for" + " Subscription: ") + subId)); } }
public void sendTextForSubscriberWithOptions(int subId, java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.lang.String parts, android.app.PendingIntent sentIntents, android.app.PendingIntent deliveryIntents, boolean persistMessage, int priority, boolean isExpectMore, int validityPeriod) { com.android.internal.telephony.IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId); if (iccSmsIntMgr != null) { iccSmsIntMgr.sendTextWithOptions(callingPackage, destAddr, scAddr, parts, sentIntents, deliveryIntents, persistMessage, priority, isExpectMore, validityPeriod); } else { android.telephony.Rlog.e(com.android.internal.telephony.UiccSmsController.LOG_TAG, (("sendTextWithOptions iccSmsIntMgr is null for" + " Subscription: ") + subId)); } }
@java.lang.Override protected com.android.internal.telephony.cdma.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int encoding, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean lastPart, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, java.lang.String fullMessageText, int priority, boolean isExpectMore, int validityPeriod) { com.android.internal.telephony.cdma.sms.UserData uData = new com.android.internal.telephony.cdma.sms.UserData(); uData.payloadStr = message; uData.userDataHeader = smsHeader; if (encoding == (com.android.internal.telephony.SmsConstants.ENCODING_7BIT)) { uData.msgEncoding = com.android.internal.telephony.cdma.sms.UserData.ENCODING_GSM_7BIT_ALPHABET; } else { uData.msgEncoding = com.android.internal.telephony.cdma.sms.UserData.ENCODING_UNICODE_16; } uData.msgEncodingSet = true; com.android.internal.telephony.cdma.SmsMessage.SubmitPdu submitPdu = com.android.internal.telephony.cdma.SmsMessage.getSubmitPdu(destinationAddress, uData, ((deliveryIntent != null) && lastPart), priority); java.util.HashMap map = getSmsTrackerMap(destinationAddress, scAddress, message, submitPdu); return getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), unsentPartCount, anyPartFailed, messageUri, smsHeader, ((!lastPart) || isExpectMore), fullMessageText, true, true, validityPeriod); }
@com.android.internal.annotations.VisibleForTesting @java.lang.Override public void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String callingPkg, boolean persistMessage, int priority, boolean isExpectMore, int validityPeriod) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddr, destAddr, text, (deliveryIntent != null), validityPeriod); if (pdu != null) { java.util.HashMap map = getSmsTrackerMap(destAddr, scAddr, text, pdu); com.android.internal.telephony.gsm.SmsTracker tracker = getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), messageUri, false, text, true, persistMessage, validityPeriod); java.lang.String carrierPackage = getCarrierAppPackageName(); if (carrierPackage != null) { android.telephony.Rlog.d(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "Found carrier package."); com.android.internal.telephony.gsm.TextSmsSender smsSender = new com.android.internal.telephony.gsm.TextSmsSender(tracker); smsSender.sendSmsByCarrierApp(carrierPackage, new com.android.internal.telephony.gsm.SmsSenderCallback(smsSender)); } else { android.telephony.Rlog.v(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "No carrier package."); sendRawPdu(tracker); } } else { android.telephony.Rlog.e(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "GsmSMSDispatcher.sendText(): getSubmitPdu() returned null"); } }
@java.lang.Override protected com.android.internal.telephony.gsm.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int encoding, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean lastPart, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, java.lang.String fullMessageText, int priority, boolean isExpectMore, int validityPeriod) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddress, destinationAddress, message, (deliveryIntent != null), com.android.internal.telephony.SmsHeader.toByteArray(smsHeader), encoding, smsHeader.languageTable, smsHeader.languageShiftTable, validityPeriod); if (pdu != null) { java.util.HashMap map = getSmsTrackerMap(destinationAddress, scAddress, message, pdu); return getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), unsentPartCount, anyPartFailed, messageUri, smsHeader, ((!lastPart) || isExpectMore), fullMessageText, true, false, validityPeriod); } else { android.telephony.Rlog.e(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "GsmSMSDispatcher.sendNewSubmitPdu(): getSubmitPdu() returned null"); return null; } }
@java.lang.Override public void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String callingPkg, boolean persistMessage, int priority, boolean isExpectMore, int validityPeriod) { android.telephony.Rlog.d(com.android.internal.telephony.ImsSMSDispatcher.TAG, "sendText"); if (isCdmaMo()) { mCdmaDispatcher.sendText(destAddr, scAddr, text, sentIntent, deliveryIntent, messageUri, callingPkg, persistMessage, priority, isExpectMore, validityPeriod); } else { mGsmDispatcher.sendText(destAddr, scAddr, text, sentIntent, deliveryIntent, messageUri, callingPkg, persistMessage, priority, isExpectMore, validityPeriod); } }
public void sendStoredText(java.lang.String callingPkg, android.net.Uri messageUri, java.lang.String scAddress, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent) { mPhone.getContext().enforceCallingPermission(Manifest.permission.SEND_SMS, "Sending SMS message"); if (android.telephony.Rlog.isLoggable("SMS", Log.VERBOSE)) { log(((((((("sendStoredText: scAddr=" + scAddress) + " messageUri=") + messageUri) + " sentIntent=") + sentIntent) + " deliveryIntent=") + deliveryIntent)); } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMS, android.os.Binder.getCallingUid(), callingPkg)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return; } final android.content.ContentResolver resolver = mPhone.getContext().getContentResolver(); if (!(isFailedOrDraft(resolver, messageUri))) { android.util.Log.e(com.android.internal.telephony.IccSmsInterfaceManager.LOG_TAG, "[IccSmsInterfaceManager]sendStoredText: not FAILED or DRAFT message"); returnUnspecifiedFailure(sentIntent); return; } final java.lang.String[] textAndAddress = loadTextAndAddress(resolver, messageUri); if (textAndAddress == null) { android.util.Log.e(com.android.internal.telephony.IccSmsInterfaceManager.LOG_TAG, "[IccSmsInterfaceManager]sendStoredText: can not load text"); returnUnspecifiedFailure(sentIntent); return; } textAndAddress[1] = filterDestAddress(textAndAddress[1]); mDispatcher.sendText(textAndAddress[1], scAddress, textAndAddress[0], sentIntent, deliveryIntent, messageUri, callingPkg, true, (-1), false, (-1)); }
public void sendMultipartTextMessageInternal(java.lang.String destinationAddress, java.lang.String scAddress, java.util.List<java.lang.String> parts, java.util.List<android.app.PendingIntent> sentIntents, java.util.List<android.app.PendingIntent> deliveryIntents, boolean persistMessage, int priority, boolean isExpectMore, int validityPeriod) { if (android.text.TextUtils.isEmpty(destinationAddress)) { throw new java.lang.IllegalArgumentException("Invalid destinationAddress"); } if ((parts == null) || ((parts.size()) < 1)) { throw new java.lang.IllegalArgumentException("Invalid message body"); } if ((parts.size()) > 1) { try { com.android.internal.telephony.ISms iccISms = android.telephony.SmsManager.getISmsServiceOrThrow(); if (iccISms != null) { iccISms.sendMultipartTextForSubscriberWithOptions(getSubscriptionId(), android.app.ActivityThread.currentPackageName(), destinationAddress, scAddress, parts, sentIntents, deliveryIntents, persistMessage, priority, isExpectMore, validityPeriod); } } catch (android.os.RemoteException ex) { } } else { android.app.PendingIntent sentIntent = null; android.app.PendingIntent deliveryIntent = null; if ((sentIntents != null) && ((sentIntents.size()) > 0)) { sentIntent = sentIntents.get(0); } if ((deliveryIntents != null) && ((deliveryIntents.size()) > 0)) { deliveryIntent = deliveryIntents.get(0); } sendTextMessageInternal(destinationAddress, scAddress, parts.get(0), sentIntent, deliveryIntent, persistMessage, priority, isExpectMore, validityPeriod); } }
protected com.android.internal.telephony.SMSDispatcher.SmsTracker getSmsTracker(java.util.HashMap<java.lang.String, java.lang.Object> data, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, java.lang.String format, android.net.Uri messageUri, boolean isExpectMore, java.lang.String fullMessageText, boolean isText, boolean persistMessage, int validityPeriod) { return getSmsTracker(data, sentIntent, deliveryIntent, format, null, null, messageUri, null, isExpectMore, fullMessageText, isText, persistMessage, validityPeriod); }
private void sendMultipartSms(com.android.internal.telephony.SMSDispatcher.SmsTracker tracker) { java.util.ArrayList<java.lang.String> parts; java.util.ArrayList<android.app.PendingIntent> sentIntents; java.util.ArrayList<android.app.PendingIntent> deliveryIntents; java.util.HashMap<java.lang.String, java.lang.Object> map = tracker.getData(); java.lang.String destinationAddress = ((java.lang.String) (map.get("destination"))); java.lang.String scAddress = ((java.lang.String) (map.get("scaddress"))); parts = ((java.util.ArrayList<java.lang.String>) (map.get("parts"))); sentIntents = ((java.util.ArrayList<android.app.PendingIntent>) (map.get("sentIntents"))); deliveryIntents = ((java.util.ArrayList<android.app.PendingIntent>) (map.get("deliveryIntents"))); int ss = mPhone.getServiceState().getState(); if ((!(isIms())) && (ss != (android.telephony.ServiceState.STATE_IN_SERVICE))) { for (int i = 0, count = parts.size(); i < count; i++) { android.app.PendingIntent sentIntent = null; if ((sentIntents != null) && ((sentIntents.size()) > i)) { sentIntent = sentIntents.get(i); } com.android.internal.telephony.SMSDispatcher.handleNotInService(ss, sentIntent); } return; } sendMultipartText(destinationAddress, scAddress, parts, sentIntents, deliveryIntents, null, null, tracker.mPersistMessage, (-1), tracker.mExpectMore, tracker.mvalidityPeriod); }
protected com.android.internal.telephony.SMSDispatcher.SmsTracker getSmsTracker(java.util.HashMap<java.lang.String, java.lang.Object> data, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, java.lang.String format, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, com.android.internal.telephony.SmsHeader smsHeader, boolean isExpectMore, java.lang.String fullMessageText, boolean isText, boolean persistMessage, int validityPeriod) { android.content.pm.PackageManager pm = mContext.getPackageManager(); java.lang.String[] packageNames = pm.getPackagesForUid(android.os.Binder.getCallingUid()); final int userId = android.os.UserHandle.getCallingUserId(); android.content.pm.PackageInfo appInfo = null; if ((packageNames != null) && ((packageNames.length) > 0)) { try { appInfo = pm.getPackageInfoAsUser(packageNames[0], PackageManager.GET_SIGNATURES, userId); } catch (android.content.pm.PackageManager e) { } } java.lang.String destAddr = android.telephony.PhoneNumberUtils.extractNetworkPortion(((java.lang.String) (data.get("destAddr")))); return new com.android.internal.telephony.SMSDispatcher.SmsTracker(data, sentIntent, deliveryIntent, appInfo, destAddr, format, unsentPartCount, anyPartFailed, messageUri, smsHeader, isExpectMore, fullMessageText, getSubId(), isText, persistMessage, userId, validityPeriod); }
@android.annotation.SystemApi public void sendMultipartTextMessageWithoutPersisting(java.lang.String destinationAddress, java.lang.String scAddress, java.util.List<java.lang.String> parts, java.util.List<android.app.PendingIntent> sentIntents, java.util.List<android.app.PendingIntent> deliveryIntents, int priority, boolean isExpectMore, int validityPeriod) { sendMultipartTextMessageInternal(destinationAddress, scAddress, parts, sentIntents, deliveryIntents, false, priority, isExpectMore, validityPeriod); }
public void sendMultipartTextMessage(java.lang.String destinationAddress, java.lang.String scAddress, java.util.ArrayList<java.lang.String> parts, java.util.ArrayList<android.app.PendingIntent> sentIntents, java.util.ArrayList<android.app.PendingIntent> deliveryIntents, int priority, boolean isExpectMore, int validityPeriod) { sendMultipartTextMessageInternal(destinationAddress, scAddress, parts, sentIntents, deliveryIntents, true); }
public void sendTextMessageInternal(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean persistMessage, int priority, boolean isExpectMore, int validityPeriod) { if (android.text.TextUtils.isEmpty(destinationAddress)) { throw new java.lang.IllegalArgumentException("Invalid destinationAddress"); } if (android.text.TextUtils.isEmpty(text)) { throw new java.lang.IllegalArgumentException("Invalid message body"); } try { com.android.internal.telephony.ISms iccISms = android.telephony.SmsManager.getISmsServiceOrThrow(); if (iccISms != null) { iccISms.sendTextForSubscriberWithOptions(getSubscriptionId(), android.app.ActivityThread.currentPackageName(), destinationAddress, scAddress, text, sentIntent, deliveryIntent, persistMessage, priority, isExpectMore, validityPeriod); } } catch (android.os.RemoteException ex) { } }
@android.annotation.SystemApi public void sendTextMessageWithoutPersisting(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, int priority, boolean isExpectMore, int validityPeriod) { sendTextMessageInternal(destinationAddress, scAddress, text, sentIntent, deliveryIntent, false, priority, isExpectMore, validityPeriod); }
protected abstract com.android.internal.telephony.SMSDispatcher.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int encoding, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean lastPart, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, java.lang.String fullMessageText, int priority, boolean isExpectMore, int validityPeriod);
protected com.android.internal.telephony.SMSDispatcher.SmsTracker getSmsTracker(java.util.HashMap<java.lang.String, java.lang.Object> data, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, java.lang.String format, android.net.Uri messageUri, boolean isExpectMore, java.lang.String fullMessageText, boolean isText, boolean persistMessage) { return getSmsTracker(data, sentIntent, deliveryIntent, format, null, null, messageUri, null, isExpectMore, fullMessageText, isText, persistMessage, (-1)); }
protected abstract void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String callingPkg, boolean persistMessage, int priority, boolean isExpectMore, int validityPeriod);
@java.lang.Override public void sendMultipartText(java.lang.String destAddr, java.lang.String scAddr, java.util.ArrayList<java.lang.String> parts, java.util.ArrayList<android.app.PendingIntent> sentIntents, java.util.ArrayList<android.app.PendingIntent> deliveryIntents, android.net.Uri messageUri, java.lang.String callingPkg, boolean persistMessage, int priority, boolean isExpectMore, int validityPeriod) { if (isCdmaMo()) { mCdmaDispatcher.sendMultipartText(destAddr, scAddr, parts, sentIntents, deliveryIntents, messageUri, callingPkg, persistMessage, priority, isExpectMore, validityPeriod); } else { mGsmDispatcher.sendMultipartText(destAddr, scAddr, parts, sentIntents, deliveryIntents, messageUri, callingPkg, persistMessage, priority, isExpectMore, validityPeriod); } }
public void sendTextMessage(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, int priority, boolean isExpectMore, int validityPeriod) { sendTextMessageInternal(destinationAddress, scAddress, text, sentIntent, deliveryIntent, true, priority, isExpectMore, validityPeriod); }
private void sendTextInternal(java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean persistMessageForNonDefaultSmsApp) { if (android.telephony.Rlog.isLoggable("SMS", Log.VERBOSE)) { log(((((((((("sendText: destAddr=" + destAddr) + " scAddr=") + scAddr) + " text='") + text) + "' sentIntent=") + sentIntent) + " deliveryIntent=") + deliveryIntent)); } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMS, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return; } if (!persistMessageForNonDefaultSmsApp) { enforcePrivilegedAppPermissions(); } destAddr = filterDestAddress(destAddr); mDispatcher.sendText(destAddr, scAddr, text, sentIntent, deliveryIntent, null, callingPackage, persistMessageForNonDefaultSmsApp, (-1), false, (-1)); }
@java.lang.Override protected com.android.internal.telephony.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int format, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean lastPart, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, java.lang.String fullMessageText, int priority, boolean isExpectMore, int validityPeriod) { android.telephony.Rlog.e(com.android.internal.telephony.ImsSMSDispatcher.TAG, "Error! Not implemented for IMS."); return null; }
private static com.android.timezone.distro.tools.TimeZoneDistroBuilder createValidTimeZoneDistroBuilder(java.lang.String rulesVersion, int revision) throws java.lang.Exception { byte[] tzData = com.android.timezone.distro.installer.TimeZoneDistroInstallerTest.createTzData(rulesVersion); byte[] icuData = new byte[]{ 'a' }; java.lang.String tzlookupXml = "<timezones>\n" + (((((((((" <countryzones>\n" + " <country code=\"us\" default=\"America/New_York\">\n") + " <id>America/New_York\"</id>\n") + " <id>America/Los_Angeles</id>\n") + " </country>\n") + " <country code=\"gb\" default=\"Europe/London\">\n") + " <id>Europe/London</id>\n") + " </country>\n") + " </countryzones>\n") + "</timezones>\n"); com.android.timezone.distro.DistroVersion distroVersion = new com.android.timezone.distro.DistroVersion(com.android.timezone.distro.DistroVersion.CURRENT_FORMAT_MAJOR_VERSION, com.android.timezone.distro.DistroVersion.CURRENT_FORMAT_MINOR_VERSION, rulesVersion, revision); return new com.android.timezone.distro.tools.TimeZoneDistroBuilder().setDistroVersion(distroVersion).setTzDataFile(tzData).setIcuDataFile(icuData).setTzLookupXml(tzlookupXml); }
public void testRequestUpdateStreamingServices() throws java.lang.Exception { java.util.List<java.lang.String> testClasses = java.util.Arrays.asList("class1", "class2"); mStreamingSession.requestUpdateStreamingServices(testClasses); java.util.List<android.telephony.mbms.StreamingServiceInfo> serviceInfos = ((java.util.List<android.telephony.mbms.StreamingServiceInfo>) (mCallback.waitOnStreamingServicesUpdated().arg1)); assertEquals(((android.telephony.mbms.ServiceInfo) (CtsStreamingService.STREAMING_SERVICE_INFO)), ((android.telephony.mbms.ServiceInfo) (serviceInfos.get(0)))); assertEquals(0, mCallback.getNumErrorCalls()); java.util.List<java.util.List> requestStreamingServicesCalls = getMiddlewareCalls(CtsStreamingService.METHOD_REQUEST_UPDATE_STREAMING_SERVICES); assertEquals(1, requestStreamingServicesCalls.size()); assertEquals(3, requestStreamingServicesCalls.get(0).size()); java.util.List<java.lang.String> middlewareReceivedServiceClasses = ((java.util.List<java.lang.String>) (requestStreamingServicesCalls.get(0).get(2))); assertEquals(testClasses.size(), middlewareReceivedServiceClasses.size()); }
public void openCameraDevice(int cameraId) throws com.android.cts.verifier.camera.its.ItsException { com.android.cts.verifier.camera.its.Logt.i(com.android.cts.verifier.camera.its.ItsService.TAG, java.lang.String.format("Opening camera %d", cameraId)); java.lang.String[] devices; try { devices = mCameraManager.getCameraIdList(); if ((devices == null) || ((devices.length) == 0)) { throw new com.android.cts.verifier.camera.its.ItsException("No camera devices"); } if ((mMemoryQuota) == (-1)) { for (java.lang.String camId : devices) { android.hardware.camera2.CameraCharacteristics chars = mCameraManager.getCameraCharacteristics(camId); android.util.Size maxYuvSize = com.android.cts.verifier.camera.its.ItsUtils.getYuvOutputSizes(mCameraCharacteristics)[0]; int quota = (((maxYuvSize.getWidth()) * (maxYuvSize.getHeight())) * 4) * 3; if (quota > (mMemoryQuota)) { mMemoryQuota = quota; } } } } catch (android.hardware.camera2.CameraAccessException e) { throw new com.android.cts.verifier.camera.its.ItsException("Failed to get device ID list", e); } try { mCamera = mBlockingCameraManager.openCamera(devices[cameraId], mCameraListener, mCameraHandler); mCameraCharacteristics = mCameraManager.getCameraCharacteristics(devices[cameraId]); mSocketQueueQuota = new java.util.concurrent.Semaphore(mMemoryQuota, true); } catch (android.hardware.camera2.CameraAccessException e) { throw new com.android.cts.verifier.camera.its.ItsException("Failed to open camera", e); } catch (com.android.ex.camera2.blocking.BlockingCameraManager.BlockingOpenException e) { throw new com.android.cts.verifier.camera.its.ItsException("Failed to open camera (after blocking)", e); } mSocketRunnableObj.sendResponse("cameraOpened", ""); }
com.android.internal.telephony.cat.Menu getMainMenu(int slotId) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("StkAppService, getMainMenu, sim id: " + slotId)); if (((slotId >= 0) && (slotId < (mSimCount))) && ((mStkContext[slotId].mMainCmd) != null)) { com.android.internal.telephony.cat.Menu menu = mStkContext[slotId].mMainCmd.getMenu(); if ((menu != null) && ((mSimCount) > (com.android.internal.telephony.PhoneConstants.MAX_PHONE_COUNT_SINGLE_SIM))) { if ((menu.title) == null) { com.android.stk.StkMenuConfig config = com.android.stk.StkMenuConfig.getInstance(getApplicationContext()); java.lang.String label = config.getLabel(slotId); if (label != null) { android.os.Parcel parcel = android.os.Parcel.obtain(); menu.writeToParcel(parcel, 0); parcel.setDataPosition(0); menu = Menu.CREATOR.createFromParcel(parcel); parcel.recycle(); menu.title = label; } } } return menu; } else { return null; } }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (intent.getAction().equals(BluetoothDevice.ACTION_BOND_STATE_CHANGED)) { android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); int state = intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.BOND_NONE); switch (state) { case android.bluetooth.BluetoothDevice.BOND_BONDED : if (com.android.cts.verifier.bluetooth.BleClientService.DEBUG) android.util.Log.d(com.android.cts.verifier.bluetooth.BleClientService.TAG, ("onReceive: BluetoothDevice.BOND_BONDED: connecting to " + (device.getAddress()))); mBluetoothGatt = com.android.cts.verifier.bluetooth.BleClientService.connectGatt(device, mContext, false, mSecure, mGattCallbacks); break; case android.bluetooth.BluetoothDevice.BOND_NONE : notifyError("Failed to create bond."); break; case android.bluetooth.BluetoothDevice.BOND_BONDING : default : break; } } }
@java.lang.Override public com.android.apksig.internal.util.Pair<com.android.apksig.OutputApkSigningBlockRequest, java.lang.Integer> outputZipSections2(com.android.apksig.util.DataSource zipEntries, com.android.apksig.util.DataSource zipCentralDirectory, com.android.apksig.util.DataSource zipEocd) throws java.io.IOException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException { int padSizeBeforeCentralDir = 0; if (((zipEntries.size()) % (com.android.apksig.DefaultApkSignerEngine.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES)) != 0) { padSizeBeforeCentralDir = ((int) ((com.android.apksig.DefaultApkSignerEngine.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES) - ((zipEntries.size()) % (com.android.apksig.DefaultApkSignerEngine.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES)))); } return com.android.apksig.internal.util.Pair.of(outputZipSections(zipEntries, zipCentralDirectory, zipEocd), padSizeBeforeCentralDir); }
com.android.apksig.internal.util.Pair<com.android.apksig.ApkSignerEngine.OutputApkSigningBlockRequest, java.lang.Integer> outputZipSections2(com.android.apksig.util.DataSource zipEntries, com.android.apksig.util.DataSource zipCentralDirectory, com.android.apksig.util.DataSource zipEocd) throws com.android.apksig.apk.ApkFormatException, java.io.IOException, java.lang.IllegalStateException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException;
@java.lang.Override public boolean checkForCondition() { boolean condition = false; boolean isSuccess = mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches("(?i)no thanks(?-i)")).waitForExists(java.util.concurrent.TimeUnit.MILLISECONDS.convert(3L, java.util.concurrent.TimeUnit.SECONDS)); try { if (isSuccess) { mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches("(?i)no thanks(?-i)")).click(); condition = true; } isSuccess = mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches("(?i)continue(?-i)")).waitForExists(java.util.concurrent.TimeUnit.MILLISECONDS.convert(3L, java.util.concurrent.TimeUnit.SECONDS)); if (isSuccess) { mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches("(?i)continue(?-i)")).click(); condition = true; } } catch (android.support.test.uiautomator.UiObjectNotFoundException e) { throw new java.lang.AssertionError("Failed to dismiss the API Demos Test confirmation popup dialogs"); } return condition; }
private static void addOtacert(java.util.jar.JarOutputStream outputJar, java.io.File publicKeyFile, long timestamp) throws java.io.IOException { java.util.jar.JarEntry je = new java.util.jar.JarEntry(com.android.signapk.SignApk.OTACERT_NAME); je.setTime(timestamp); outputJar.putNextEntry(je); java.io.FileInputStream input = new java.io.FileInputStream(publicKeyFile); byte[] b = new byte[com.android.signapk.SignApk.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES]; int read; while ((read = input.read(b)) != (-1)) { outputJar.write(b, 0, read); } input.close(); }
private static int getStoredEntryDataAlignment(java.lang.String entryName, int defaultAlignment) { if (defaultAlignment <= 0) { return 0; } if (entryName.endsWith(".so")) { return com.android.signapk.SignApk.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES; } else { return defaultAlignment; } }
public static final native android.os.IHwBinder getService(java.lang.String iface, java.lang.String serviceName, boolean isTry) throws android.os.RemoteException, java.util.NoSuchElementException;
@org.junit.Test public void tesNoSplitDelegateLastNoSharedLibraries() { android.content.pm.ApplicationInfo ai = createMockApplicationInfo(com.android.server.pm.dex.DexoptUtilsTest.DELEGATE_LAST_CLASS_LOADER_NAME, false, false); java.lang.String[] contexts = com.android.server.pm.dex.DexoptUtils.getClassLoaderContexts(ai, null); assertEquals(1, contexts.length); assertEquals("DLC[]", contexts[0]); }
@org.junit.Test public void tesNoSplitDelegateLast() { android.content.pm.ApplicationInfo ai = createMockApplicationInfo(com.android.server.pm.dex.DexoptUtilsTest.DELEGATE_LAST_CLASS_LOADER_NAME, false, false); java.lang.String[] sharedLibrary = new java.lang.String[]{ "a.dex", "b.dex" }; java.lang.String[] contexts = com.android.server.pm.dex.DexoptUtils.getClassLoaderContexts(ai, sharedLibrary); assertEquals(1, contexts.length); assertEquals("DLC[a.dex:b.dex]", contexts[0]); }
private android.content.pm.ApplicationInfo createMockApplicationInfo(java.lang.String baseClassLoader, boolean addSplits, boolean addSplitDependencies) { android.content.pm.ApplicationInfo ai = new android.content.pm.ApplicationInfo(); java.lang.String codeDir = "/data/app/mock.android.com"; ai.setBaseCodePath((codeDir + "/base.dex")); ai.classLoaderName = baseClassLoader; if (addSplits) { ai.setSplitCodePaths(new java.lang.String[]{ codeDir + "/base-1.dex", codeDir + "/base-2.dex", codeDir + "/base-3.dex", codeDir + "/base-4.dex", codeDir + "/base-5.dex", codeDir + "/base-6.dex" }); ai.splitClassLoaderNames = new java.lang.String[]{ com.android.server.pm.dex.DexoptUtilsTest.DELEGATE_LAST_CLASS_LOADER_NAME, com.android.server.pm.dex.DexoptUtilsTest.DELEGATE_LAST_CLASS_LOADER_NAME, com.android.server.pm.dex.DexoptUtilsTest.PATH_CLASS_LOADER_NAME, com.android.server.pm.dex.DexoptUtilsTest.PATH_CLASS_LOADER_NAME, com.android.server.pm.dex.DexoptUtilsTest.PATH_CLASS_LOADER_NAME, null }; if (addSplitDependencies) { ai.splitDependencies = new android.util.SparseArray(((ai.splitClassLoaderNames.length) + 1)); ai.splitDependencies.put(0, new int[]{ -1 }); ai.splitDependencies.put(1, new int[]{ 2 }); ai.splitDependencies.put(2, new int[]{ 4 }); ai.splitDependencies.put(3, new int[]{ 4 }); ai.splitDependencies.put(4, new int[]{ 0 }); ai.splitDependencies.put(5, new int[]{ 0 }); ai.splitDependencies.put(6, new int[]{ 5 }); } } return ai; }
@org.junit.Test public void testSplitChainNoSplitDependencies() { android.content.pm.ApplicationInfo ai = createMockApplicationInfo(com.android.server.pm.dex.DexoptUtilsTest.PATH_CLASS_LOADER_NAME, true, false); java.lang.String[] sharedLibrary = new java.lang.String[]{ "a.dex", "b.dex" }; java.lang.String[] contexts = com.android.server.pm.dex.DexoptUtils.getClassLoaderContexts(ai, sharedLibrary); assertEquals(7, contexts.length); assertEquals("PCL[a.dex:b.dex]", contexts[0]); assertEquals("DLC[];PCL[a.dex:b.dex:base.dex]", contexts[1]); assertEquals("DLC[];PCL[a.dex:b.dex:base.dex]", contexts[2]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[3]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[4]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[5]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[6]); }
private android.content.pm.ApplicationInfo createMockApplicationInfo(java.lang.String baseClassLoader, boolean addSplits, boolean addSplitDependencies) { android.content.pm.ApplicationInfo ai = new android.content.pm.ApplicationInfo(); java.lang.String codeDir = "/data/app/mock.android.com"; ai.setBaseCodePath((codeDir + "/base.dex")); ai.classLoaderName = baseClassLoader; ai.privateFlags = (ai.privateFlags) | (android.content.pm.ApplicationInfo.PRIVATE_FLAG_ISOLATED_SPLIT_LOADING); if (addSplits) { ai.setSplitCodePaths(new java.lang.String[]{ codeDir + "/base-1.dex", codeDir + "/base-2.dex", codeDir + "/base-3.dex", codeDir + "/base-4.dex", codeDir + "/base-5.dex", codeDir + "/base-6.dex" }); ai.splitClassLoaderNames = new java.lang.String[]{ com.android.server.pm.dex.DexoptUtilsTest.DELEGATE_LAST_CLASS_LOADER_NAME, com.android.server.pm.dex.DexoptUtilsTest.DELEGATE_LAST_CLASS_LOADER_NAME, com.android.server.pm.dex.DexoptUtilsTest.PATH_CLASS_LOADER_NAME, com.android.server.pm.dex.DexoptUtilsTest.PATH_CLASS_LOADER_NAME, com.android.server.pm.dex.DexoptUtilsTest.PATH_CLASS_LOADER_NAME, null }; if (addSplitDependencies) { ai.splitDependencies = new android.util.SparseArray(((ai.splitClassLoaderNames.length) + 1)); ai.splitDependencies.put(0, new int[]{ -1 }); ai.splitDependencies.put(1, new int[]{ 2 }); ai.splitDependencies.put(2, new int[]{ 4 }); ai.splitDependencies.put(3, new int[]{ 4 }); ai.splitDependencies.put(4, new int[]{ 0 }); ai.splitDependencies.put(5, new int[]{ 0 }); ai.splitDependencies.put(6, new int[]{ 5 }); } } return ai; }
@org.junit.Test public void testSplitChainNoSharedLibraries() { android.content.pm.ApplicationInfo ai = createMockApplicationInfo(com.android.server.pm.dex.DexoptUtilsTest.DELEGATE_LAST_CLASS_LOADER_NAME, true, true); java.lang.String[] contexts = com.android.server.pm.dex.DexoptUtils.getClassLoaderContexts(ai, null); assertEquals(7, contexts.length); assertEquals("DLC[]", contexts[0]); assertEquals("DLC[];DLC[base-2.dex];PCL[base-4.dex];DLC[base.dex]", contexts[1]); assertEquals("DLC[];PCL[base-4.dex];DLC[base.dex]", contexts[2]); assertEquals("PCL[];PCL[base-4.dex];DLC[base.dex]", contexts[3]); assertEquals("PCL[];DLC[base.dex]", contexts[4]); assertEquals("PCL[];DLC[base.dex]", contexts[5]); assertEquals("PCL[];PCL[base-5.dex];DLC[base.dex]", contexts[6]); }
@org.junit.Test public void testSplitChainWithNullPrimaryClassLoader() { android.content.pm.ApplicationInfo ai = createMockApplicationInfo(null, true, true); java.lang.String[] sharedLibrary = new java.lang.String[]{ "a.dex", "b.dex" }; java.lang.String[] contexts = com.android.server.pm.dex.DexoptUtils.getClassLoaderContexts(ai, sharedLibrary); assertEquals(7, contexts.length); assertEquals("PCL[a.dex:b.dex]", contexts[0]); assertEquals("DLC[];DLC[base-2.dex];PCL[base-4.dex];PCL[a.dex:b.dex:base.dex]", contexts[1]); assertEquals("DLC[];PCL[base-4.dex];PCL[a.dex:b.dex:base.dex]", contexts[2]); assertEquals("PCL[];PCL[base-4.dex];PCL[a.dex:b.dex:base.dex]", contexts[3]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[4]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[5]); assertEquals("PCL[];PCL[base-5.dex];PCL[a.dex:b.dex:base.dex]", contexts[6]); }
@org.junit.Test public void testSplitChain() { android.content.pm.ApplicationInfo ai = createMockApplicationInfo(com.android.server.pm.dex.DexoptUtilsTest.PATH_CLASS_LOADER_NAME, true, true); java.lang.String[] sharedLibrary = new java.lang.String[]{ "a.dex", "b.dex" }; java.lang.String[] contexts = com.android.server.pm.dex.DexoptUtils.getClassLoaderContexts(ai, sharedLibrary); assertEquals(7, contexts.length); assertEquals("PCL[a.dex:b.dex]", contexts[0]); assertEquals("DLC[];DLC[base-2.dex];PCL[base-4.dex];PCL[a.dex:b.dex:base.dex]", contexts[1]); assertEquals("DLC[];PCL[base-4.dex];PCL[a.dex:b.dex:base.dex]", contexts[2]); assertEquals("PCL[];PCL[base-4.dex];PCL[a.dex:b.dex:base.dex]", contexts[3]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[4]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[5]); assertEquals("PCL[];PCL[base-5.dex];PCL[a.dex:b.dex:base.dex]", contexts[6]); }
private boolean isUseOnlyRsrpForLteLevel() { android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (mPhone.getContext().getSystemService(Context.CARRIER_CONFIG_SERVICE))); android.os.PersistableBundle config = null; if (configManager != null) { config = configManager.getConfigForSubId(mPhone.getSubId()); } if (config != null) { return config.getBoolean(CarrierConfigManager.KEY_USE_ONLY_RSRP_FOR_LTE_SIGNAL_BAR_BOOL); } else { return android.telephony.CarrierConfigManager.getDefaultConfig().getBoolean(CarrierConfigManager.KEY_USE_ONLY_RSRP_FOR_LTE_SIGNAL_BAR_BOOL); } }
public boolean isUseOnlyRsrpForLteLevel() { return this.mUseOnlyRsrpForLteLevel; }
@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((((((((((((("SignalStrength:" + " ") + (mGsmSignalStrength)) + " ") + (mGsmBitErrorRate)) + " ") + (mCdmaDbm)) + " ") + (mCdmaEcio)) + " ") + (mEvdoDbm)) + " ") + (mEvdoEcio)) + " ") + (mEvdoSnr)) + " ") + (mLteSignalStrength)) + " ") + (mLteRsrp)) + " ") + (mLteRsrq)) + " ") + (mLteRssnr)) + " ") + (mLteCqi)) + " ") + (mLteRsrpBoost)) + " ") + (mTdScdmaRscp)) + " ") + (isGsm ? "gsm|lte" : "cdma")) + " ") + (mUseOnlyRsrpForLteLevel ? "lte_level_base_on_rsrp" : "lte_level_not_base_on_rsrp"); }
@java.lang.Override public void onStop() { com.android.music.utils.LogHelper.d(com.android.music.MediaPlaybackActivity.TAG, "onStop()"); super.onStop(); mMediaBrowser.disconnect(); }
private void toggleShuffle() { com.android.music.utils.LogHelper.d(com.android.music.MediaPlaybackActivity.TAG, "Shuffle not implemented yet"); }
@java.lang.Override public android.view.View newChildView(boolean isLastChild, android.view.ViewGroup parent) { android.view.View v = super.newChildView(isLastChild, parent); com.android.music.ArtistAlbumBrowserActivity.ArtistAlbumListAdapter.ViewHolder vh = new com.android.music.ArtistAlbumBrowserActivity.ArtistAlbumListAdapter.ViewHolder(); vh.line1 = ((com.android.music.TextView) (v.findViewById(R.id.line1))); vh.line2 = ((com.android.music.TextView) (v.findViewById(R.id.line2))); vh.play_indicator = ((com.android.music.ImageView) (v.findViewById(R.id.play_indicator))); vh.icon = ((com.android.music.ImageView) (v.findViewById(R.id.icon))); vh.icon.setBackground(mDefaultAlbumIcon); vh.icon.setPadding(0, 0, 1, 0); v.setTag(vh); return v; }
@java.lang.Override public void onError(java.lang.String id) { com.android.music.Toast.makeText(getApplicationContext(), R.string.error_loading_media, Toast.LENGTH_LONG).show(); }
@java.lang.Override public void onMusicCatalogReady(boolean success) { android.util.Log.d(com.android.music.MediaPlaybackService.TAG, ("Received catalog result, success: " + (java.lang.String.valueOf(success)))); if (success) { loadChildrenImpl(parentMediaId, result); } else { result.sendResult(java.util.Collections.emptyList()); } }
@java.lang.Override public boolean onChildClick(com.android.music.ExpandableListView parent, android.view.View v, int groupPosition, int childPosition, long id) { java.util.Map<java.lang.String, android.media.browse.MediaBrowser.MediaItem> albumEntry = ((java.util.Map<java.lang.String, android.media.browse.MediaBrowser.MediaItem>) (mAdapter.getChild(groupPosition, childPosition))); android.content.Intent intent = new android.content.Intent(android.content.Intent.ACTION_PICK); intent.setDataAndType(Uri.EMPTY, "vnd.android.cursor.dir/track"); intent.putExtra(MusicUtils.TAG_PARENT_ITEM, albumEntry.get(MediaIDHelper.MEDIA_ID_MUSICS_BY_ALBUM)); startActivity(intent); return true; }
@java.lang.Override public android.view.View newGroupView(boolean isExpanded, android.view.ViewGroup parent) { android.view.View v = super.newGroupView(isExpanded, parent); com.android.music.ImageView iv = ((com.android.music.ImageView) (v.findViewById(R.id.icon))); android.view.ViewGroup.LayoutParams p = iv.getLayoutParams(); p.width = ViewGroup.LayoutParams.WRAP_CONTENT; p.height = ViewGroup.LayoutParams.WRAP_CONTENT; com.android.music.ArtistAlbumBrowserActivity.ArtistAlbumListAdapter.ViewHolder vh = new com.android.music.ArtistAlbumBrowserActivity.ArtistAlbumListAdapter.ViewHolder(); vh.line1 = ((com.android.music.TextView) (v.findViewById(R.id.line1))); vh.line2 = ((com.android.music.TextView) (v.findViewById(R.id.line2))); vh.play_indicator = ((com.android.music.ImageView) (v.findViewById(R.id.play_indicator))); vh.icon = ((com.android.music.ImageView) (v.findViewById(R.id.icon))); vh.icon.setPadding(0, 0, 1, 0); v.setTag(vh); return v; }
private void loadPlayingQueueImpl(java.util.List<android.media.browse.MediaBrowser.MediaItem> mediaItems, java.lang.String parentId) { for (android.media.session.MediaSession.QueueItem queueItem : mPlayingQueue) { java.lang.String hierarchyAwareMediaID = queueItem.getDescription().getMediaId(); android.os.Bundle songExtra = new android.os.Bundle(); if ((queueItem.getDescription().getExtras()) != null) { songExtra.putLong(MediaMetadata.METADATA_KEY_DURATION, queueItem.getDescription().getExtras().getLong(MediaMetadata.METADATA_KEY_DURATION)); } android.media.browse.MediaBrowser.MediaItem mediaItem = new android.media.browse.MediaBrowser.MediaItem(new android.media.MediaDescription.Builder().setMediaId(hierarchyAwareMediaID).setTitle(queueItem.getDescription().getTitle()).setSubtitle(queueItem.getDescription().getSubtitle()).setExtras(songExtra).build(), android.media.browse.MediaBrowser.MediaItem.FLAG_PLAYABLE); mediaItems.add(mediaItem); } }
private void loadSongImpl(java.lang.Iterable<android.media.MediaMetadata> songList, java.util.List<android.media.browse.MediaBrowser.MediaItem> mediaItems, java.lang.String parentId) { for (android.media.MediaMetadata metadata : songList) { java.lang.String hierarchyAwareMediaID = com.android.music.MediaIDHelper.createMediaID(metadata.getDescription().getMediaId(), parentId); android.os.Bundle songExtra = new android.os.Bundle(); songExtra.putLong(MediaMetadata.METADATA_KEY_DURATION, metadata.getLong(MediaMetadata.METADATA_KEY_DURATION)); java.lang.String title = metadata.getString(MediaMetadata.METADATA_KEY_TITLE); java.lang.String artistName = metadata.getString(MediaMetadata.METADATA_KEY_ARTIST); android.media.browse.MediaBrowser.MediaItem item = new android.media.browse.MediaBrowser.MediaItem(new android.media.MediaDescription.Builder().setMediaId(hierarchyAwareMediaID).setTitle(title).setSubtitle(artistName).setExtras(songExtra).build(), android.media.browse.MediaBrowser.MediaItem.FLAG_PLAYABLE); mediaItems.add(item); } }
private void loadAlbumImpl(java.lang.Iterable<android.media.MediaMetadata> albumList, java.util.List<android.media.browse.MediaBrowser.MediaItem> mediaItems) { for (android.media.MediaMetadata albumMetadata : albumList) { java.lang.String albumName = albumMetadata.getString(MediaMetadata.METADATA_KEY_ALBUM); java.lang.String artistName = albumMetadata.getString(MediaMetadata.METADATA_KEY_ARTIST); android.os.Bundle albumExtra = new android.os.Bundle(); albumExtra.putLong(MediaMetadata.METADATA_KEY_NUM_TRACKS, albumMetadata.getLong(MediaMetadata.METADATA_KEY_NUM_TRACKS)); android.media.browse.MediaBrowser.MediaItem item = new android.media.browse.MediaBrowser.MediaItem(new android.media.MediaDescription.Builder().setMediaId(com.android.music.MediaIDHelper.createBrowseCategoryMediaID(com.android.music.MEDIA_ID_MUSICS_BY_ALBUM, albumName)).setTitle(albumName).setSubtitle(artistName).setIconBitmap(albumMetadata.getBitmap(MediaMetadata.METADATA_KEY_ALBUM_ART)).setExtras(albumExtra).build(), android.media.browse.MediaBrowser.MediaItem.FLAG_BROWSABLE); mediaItems.add(item); } }
private void updateTrackInfo() { com.android.music.utils.LogHelper.d(com.android.music.MediaPlaybackActivity.TAG, "updateTrackInfo()"); if ((getMediaController()) == null) { return; } android.media.MediaMetadata metadata = getMediaController().getMetadata(); if (metadata == null) { return; } ((android.view.View) (mArtistName.getParent())).setVisibility(View.VISIBLE); ((android.view.View) (mAlbumName.getParent())).setVisibility(View.VISIBLE); ((android.view.View) (mTrackName.getParent())).setVisibility(View.VISIBLE); mTrackName.setText(metadata.getString(MediaMetadata.METADATA_KEY_TITLE)); com.android.music.utils.LogHelper.d(com.android.music.MediaPlaybackActivity.TAG, "Track Name: ", mTrackName.getText()); java.lang.String artistName = metadata.getString(MediaMetadata.METADATA_KEY_ARTIST); if (artistName.equals(MusicProvider.UNKOWN)) { artistName = getString(R.string.unknown_artist_name); } mArtistName.setText(artistName); java.lang.String albumName = metadata.getString(MediaMetadata.METADATA_KEY_ALBUM); if (albumName.equals(MusicProvider.UNKOWN)) { albumName = getString(R.string.unknown_album_name); } mAlbumName.setText(albumName); android.graphics.Bitmap albumArt = metadata.getBitmap(MediaMetadata.METADATA_KEY_ALBUM_ART); if (albumArt != null) { mAlbumArt.setImageBitmap(albumArt); } else { mAlbumArt.setImageDrawable(mDefaultAlbumArt); } mAlbumArt.setVisibility(View.VISIBLE); long duration = metadata.getLong(MediaMetadata.METADATA_KEY_DURATION); mTotalTime.setText(com.android.music.MusicUtils.makeTimeString(this, (duration / 1000))); }
private java.util.List<com.android.apksig.internal.apk.v2.V2SchemeSigner.SignerConfig> createV2SignerConfigs(boolean apkSigningBlockPaddingSupported) throws java.security.InvalidKeyException { java.util.List<com.android.apksig.internal.apk.v2.V2SchemeSigner.SignerConfig> v2SignerConfigs = new java.util.ArrayList<>(mSignerConfigs.size()); for (int i = 0; i < (mSignerConfigs.size()); i++) { com.android.apksig.DefaultApkSignerEngine.SignerConfig signerConfig = mSignerConfigs.get(i); java.util.List<java.security.cert.X509Certificate> certificates = signerConfig.getCertificates(); java.security.PublicKey publicKey = certificates.get(0).getPublicKey(); com.android.apksig.internal.apk.v2.V2SchemeSigner.SignerConfig v2SignerConfig = new com.android.apksig.internal.apk.v2.V2SchemeSigner.SignerConfig(); v2SignerConfig.privateKey = signerConfig.getPrivateKey(); v2SignerConfig.certificates = certificates; v2SignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v2.V2SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); v2SignerConfigs.add(v2SignerConfig); } return v2SignerConfigs; }
private com.android.apksig.DefaultApkSignerEngine.OutputApkSigningBlockRequestImpl outputZipSectionsInternal(com.android.apksig.util.DataSource zipEntries, com.android.apksig.util.DataSource zipCentralDirectory, com.android.apksig.util.DataSource zipEocd, boolean apkSigningBlockPaddingSupported) throws java.io.IOException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException { checkNotClosed(); checkV1SigningDoneIfEnabled(); if (!(mV2SigningEnabled)) { return null; } invalidateV2Signature(); java.util.List<com.android.apksig.internal.apk.v2.V2SchemeSigner.SignerConfig> v2SignerConfigs = createV2SignerConfigs(apkSigningBlockPaddingSupported); com.android.apksig.internal.util.Pair<byte[], java.lang.Integer> result = com.android.apksig.internal.apk.v2.V2SchemeSigner.generateApkSigningBlock(zipEntries, zipCentralDirectory, zipEocd, v2SignerConfigs, apkSigningBlockPaddingSupported); byte[] apkSigningBlock = result.getFirst(); int padSizeBeforeApkSigningBlock = result.getSecond(); mAddV2SignatureRequest = new com.android.apksig.DefaultApkSignerEngine.OutputApkSigningBlockRequestImpl(apkSigningBlock, padSizeBeforeApkSigningBlock); return mAddV2SignatureRequest; }
public static java.util.List<com.android.apksig.internal.apk.v2.SignatureAlgorithm> getSuggestedSignatureAlgorithms(java.security.PublicKey signingKey, int minSdkVersion, boolean apkSigningBlockPaddingSupported) throws java.security.InvalidKeyException { java.lang.String keyAlgorithm = signingKey.getAlgorithm(); if ("RSA".equalsIgnoreCase(keyAlgorithm)) { int modulusLengthBits = ((java.security.interfaces.RSAKey) (signingKey)).getModulus().bitLength(); if (modulusLengthBits <= 3072) { return java.util.Collections.singletonList(SignatureAlgorithm.RSA_PKCS1_V1_5_WITH_SHA256); } else { return java.util.Collections.singletonList(SignatureAlgorithm.RSA_PKCS1_V1_5_WITH_SHA512); } } else if ("DSA".equalsIgnoreCase(keyAlgorithm)) { return java.util.Collections.singletonList(SignatureAlgorithm.DSA_WITH_SHA256); } else if ("EC".equalsIgnoreCase(keyAlgorithm)) { int keySizeBits = ((java.security.interfaces.ECKey) (signingKey)).getParams().getOrder().bitLength(); if (keySizeBits <= 256) { return java.util.Collections.singletonList(SignatureAlgorithm.ECDSA_WITH_SHA256); } else { return java.util.Collections.singletonList(SignatureAlgorithm.ECDSA_WITH_SHA512); } } else { throw new java.security.InvalidKeyException(("Unsupported key algorithm: " + keyAlgorithm)); } }
@java.lang.Override public int requestUpdateFileServices(int subscriptionId, java.util.List<java.lang.String> serviceClasses) { mReceivedCalls.add(java.util.Arrays.asList(android.telephony.cts.embmstestapp.CtsDownloadService.METHOD_REQUEST_UPDATE_FILE_SERVICES, subscriptionId, serviceClasses)); if ((mErrorCodeOverride) != (android.telephony.mbms.MbmsErrors.SUCCESS)) { return mErrorCodeOverride; } java.util.List<android.telephony.mbms.FileServiceInfo> serviceInfos = java.util.Collections.singletonList(android.telephony.cts.embmstestapp.CtsDownloadService.FILE_SERVICE_INFO); mHandler.post(() -> { if ((mAppCallback) != null) { mAppCallback.onFileServicesUpdated(serviceInfos); } }); return android.telephony.mbms.MbmsErrors.SUCCESS; }
@java.lang.Override public java.util.List getDownloadSessionCalls() { return mReceivedCalls; }
@java.lang.Override public void dispose(int subscriptionId) { mReceivedCalls.add(java.util.Arrays.asList(android.telephony.cts.embmstestapp.CtsDownloadService.METHOD_CLOSE, subscriptionId)); }
@java.lang.Override public int initialize(int subscriptionId, android.telephony.mbms.MbmsDownloadSessionCallback callback) { mReceivedCalls.add(java.util.Arrays.asList(android.telephony.cts.embmstestapp.CtsDownloadService.METHOD_INITIALIZE, subscriptionId)); if ((mErrorCodeOverride) != (android.telephony.mbms.MbmsErrors.SUCCESS)) { return mErrorCodeOverride; } int packageUid = android.os.Binder.getCallingUid(); java.lang.String[] packageNames = getPackageManager().getPackagesForUid(packageUid); if (packageNames == null) { return MbmsErrors.InitializationErrors.ERROR_APP_PERMISSIONS_NOT_GRANTED; } boolean isUidAllowed = java.util.Arrays.stream(packageNames).anyMatch(android.telephony.cts.embmstestapp.CtsDownloadService.ALLOWED_PACKAGES::contains); if (!isUidAllowed) { return MbmsErrors.InitializationErrors.ERROR_APP_PERMISSIONS_NOT_GRANTED; } mHandler.post(() -> { if ((mAppCallback) == null) { mAppCallback = callback; } else { callback.onError(MbmsErrors.InitializationErrors.ERROR_DUPLICATE_INITIALIZE, ""); return; } callback.onMiddlewareReady(); }); return android.telephony.mbms.MbmsErrors.SUCCESS; }
public void testRequestUpdateDownloadServices() throws java.lang.Exception { java.util.List<java.lang.String> testClasses = java.util.Arrays.asList("class1", "class2"); mDownloadSession.requestUpdateFileServices(testClasses); java.util.List<android.telephony.mbms.FileServiceInfo> serviceInfos = ((java.util.List<android.telephony.mbms.FileServiceInfo>) (mCallback.waitOnFileServicesUpdated().arg1)); assertEquals(CtsDownloadService.FILE_SERVICE_INFO, serviceInfos.get(0)); assertEquals(0, mCallback.getNumErrorCalls()); java.util.List<java.util.List<java.lang.Object>> requestDownloadServicesCalls = getMiddlewareCalls(CtsDownloadService.METHOD_REQUEST_UPDATE_FILE_SERVICES); assertEquals(1, requestDownloadServicesCalls.size()); assertEquals(3, requestDownloadServicesCalls.get(0).size()); java.util.List<java.lang.String> middlewareReceivedServiceClasses = ((java.util.List<java.lang.String>) (requestDownloadServicesCalls.get(0).get(2))); assertEquals(testClasses.size(), middlewareReceivedServiceClasses.size()); }
private void setupDownloadSession() throws java.lang.Exception { mDownloadSession = android.telephony.MbmsDownloadSession.create(mContext, mCallback, mCallbackHandler); assertNotNull(mDownloadSession); assertTrue(mCallback.waitOnMiddlewareReady()); assertEquals(0, mCallback.getNumErrorCalls()); java.util.List initializeCall = ((java.util.List) (mMiddlewareControl.getDownloadSessionCalls().get(0))); assertEquals(CtsDownloadService.METHOD_INITIALIZE, initializeCall.get(0)); }
protected java.util.List<java.util.List<java.lang.Object>> getMiddlewareCalls(java.lang.String methodName) throws android.os.RemoteException { return ((java.util.List<java.util.List<java.lang.Object>>) (mMiddlewareControl.getDownloadSessionCalls())).stream().filter(( elem) -> elem.get(0).equals(methodName)).collect(java.util.stream.Collectors.toList()); }
public void testClose() throws java.lang.Exception { mDownloadSession.close(); try { mDownloadSession.requestUpdateFileServices(java.util.Collections.emptyList()); fail("Download session should not be usable after close"); } catch (java.lang.IllegalStateException e) { } java.util.List<java.util.List<java.lang.Object>> closeCalls = getMiddlewareCalls(CtsDownloadService.METHOD_CLOSE); assertEquals(1, closeCalls.size()); }
@java.lang.Override public void enter() { if (com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, ("Enter Connecting: " + (getCurrentMessage().what))); } sendMessageDelayed(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.CONNECTING_TIMEOUT, com.android.bluetooth.hfpclient.HeadsetClientStateMachine.CONNECTING_TIMEOUT_MS); if ((mPrevState) == (mDisconnected)) { broadcastConnectionState(mCurrentDevice, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED); } }
@org.junit.Test public void testIncomingPriorityReject() { when(mHeadsetClientService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_OFF); com.android.bluetooth.hfpclient.StackEvent connStCh = new com.android.bluetooth.hfpclient.StackEvent(StackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED); connStCh.valueInt = HeadsetClientHalConstants.CONNECTION_STATE_CONNECTED; connStCh.device = mTestDevice; mHeadsetClientStateMachine.sendMessage(StackEvent.STACK_EVENT, connStCh); verify(mHeadsetClientService, never()).sendBroadcast(any(android.content.Intent.class), anyString()); org.junit.Assert.assertThat(mHeadsetClientStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(HeadsetClientStateMachine.Disconnected.class)); }
@java.lang.Override public void enter() { if (com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, ("Enter Connected: " + (getCurrentMessage().what))); } mAudioWbs = false; mCommandedSpeakerVolume = -1; if ((mPrevState) == (mConnecting)) { broadcastConnectionState(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_CONNECTING); } else if ((mPrevState) == (mDisconnected)) { broadcastConnectionState(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_DISCONNECTED); } }
@java.lang.Override public void enter() { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, ("Enter Disconnected: " + (getCurrentMessage().what))); mIndicatorNetworkState = HeadsetClientHalConstants.NETWORK_STATE_NOT_AVAILABLE; mIndicatorNetworkType = HeadsetClientHalConstants.SERVICE_TYPE_HOME; mIndicatorNetworkSignal = 0; mIndicatorBatteryLevel = 0; mAudioWbs = false; mOperatorName = null; mSubscriberInfo = null; mQueuedActions = new java.util.LinkedList<android.util.Pair<java.lang.Integer, java.lang.Object>>(); clearPendingAction(); mCurrentDevice = null; mCalls.clear(); mCallsUpdate.clear(); mPeerFeatures = 0; mChldFeatures = 0; removeMessages(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.QUERY_CURRENT_CALLS); if ((mPrevState) == (mConnecting)) { broadcastConnectionState(mCurrentDevice, BluetoothProfile.STATE_DISCONNECTED, BluetoothProfile.STATE_CONNECTING); } else if (((mPrevState) == (mConnected)) || ((mPrevState) == (mAudioOn))) { broadcastConnectionState(mCurrentDevice, BluetoothProfile.STATE_DISCONNECTED, BluetoothProfile.STATE_CONNECTED); } }
public void test_ChaCha20_Reuse_Success() throws java.lang.Exception { javax.crypto.spec.SecretKeySpec key = new javax.crypto.spec.SecretKeySpec(new byte[32], "ChaCha20"); javax.crypto.spec.IvParameterSpec spec = new javax.crypto.spec.IvParameterSpec(new byte[12]); javax.crypto.Cipher c1 = javax.crypto.Cipher.getInstance("ChaCha20"); javax.crypto.Cipher c2 = javax.crypto.Cipher.getInstance("ChaCha20"); c1.init(javax.crypto.Cipher.ENCRYPT_MODE, key, spec); c1.updateAAD(new byte[]{ 1, 2, 3, 4, 5 }); c1.init(javax.crypto.Cipher.ENCRYPT_MODE, key, spec); c2.init(javax.crypto.Cipher.ENCRYPT_MODE, key, spec); byte[] aad = new byte[]{ 16, 32, 48, 64, 80, 96 }; c1.updateAAD(aad); c2.updateAAD(aad); assertEquals(java.util.Arrays.toString(c1.doFinal()), java.util.Arrays.toString(c2.doFinal())); byte[] aad2 = new byte[]{ 119, 102, 85, 68, 51, 34, 17 }; try { c1.updateAAD(aad2); fail("Should not allow updateAAD without re-initialization"); } catch (java.lang.IllegalStateException expected) { } try { c1.update(new byte[8]); fail("Should not allow update without re-initialization"); } catch (java.lang.IllegalStateException expected) { } try { c1.doFinal(); fail("Should not allow doFinal without re-initialization"); } catch (java.lang.IllegalStateException expected) { } }
public com.android.apksig.ApkSigner build() { return new com.android.apksig.ApkSigner(mSignerConfigs, mMinSdkVersion, mMaxSdkVersion, mV1SigningEnabled, mV2SigningEnabled, mOtherSignersSignaturesPreserved, mCreatedBy, mSignerEngine, mInputApkFile, mInputApkDataSource, mOutputApkFile, mOutputApkDataSink, mOutputApkDataSource); }
public com.android.apksig.DefaultApkSignerEngine build() throws java.security.InvalidKeyException { return new com.android.apksig.DefaultApkSignerEngine(mSignerConfigs, mMinSdkVersion, mMaxSdkVersion, mV1SigningEnabled, mV2SigningEnabled, mOtherSignersSignaturesPreserved, mCreatedBy); }
static byte[] computeApkVerityDigest(com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd) throws java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.util.VerityTreeBuilder builder = new com.android.apksig.internal.util.VerityTreeBuilder(new byte[]{ 0, 0, 0, 0, 0, 0, 0, 0 }); return builder.generateVerityTreeRootHash(beforeCentralDir, centralDir, eocd); }
static java.util.Map<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm, byte[]> computeContentDigests(java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> digestAlgorithms, com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd) throws java.io.IOException, java.security.DigestException, java.security.NoSuchAlgorithmException { java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> oneMbChunkBasedAlgorithm = digestAlgorithms.stream().filter(( a) -> (a == ContentDigestAlgorithm.CHUNKED_SHA256) || (a == ContentDigestAlgorithm.CHUNKED_SHA512)).collect(java.util.stream.Collectors.toSet()); java.util.Map<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm, byte[]> contentDigests = com.android.apksig.internal.apk.v2.V2SchemeSigner.computeOneMbChunkContentDigests(oneMbChunkBasedAlgorithm, new com.android.apksig.util.DataSource[]{ beforeCentralDir, centralDir, eocd }); if (digestAlgorithms.contains(ContentDigestAlgorithm.VERITY_CHUNKED_SHA256)) { contentDigests.put(ContentDigestAlgorithm.VERITY_CHUNKED_SHA256, com.android.apksig.internal.apk.v2.V2SchemeSigner.computeApkVerityDigest(beforeCentralDir, centralDir, eocd)); } return contentDigests; }
private static int compareContentDigestAlgorithm(com.android.apksig.internal.apk.v2.ContentDigestAlgorithm alg1, com.android.apksig.internal.apk.v2.ContentDigestAlgorithm alg2) { switch (alg1) { case CHUNKED_SHA256 : switch (alg2) { case CHUNKED_SHA256 : return 0; case CHUNKED_SHA512 : case VERITY_CHUNKED_SHA256 : return -1; default : throw new java.lang.IllegalArgumentException(("Unknown alg2: " + alg2)); } case CHUNKED_SHA512 : switch (alg2) { case CHUNKED_SHA256 : return 1; case CHUNKED_SHA512 : return 0; case VERITY_CHUNKED_SHA256 : return -1; default : throw new java.lang.IllegalArgumentException(("Unknown alg2: " + alg2)); } case VERITY_CHUNKED_SHA256 : switch (alg2) { case CHUNKED_SHA256 : case CHUNKED_SHA512 : return 1; case VERITY_CHUNKED_SHA256 : return 0; default : throw new java.lang.IllegalArgumentException(("Unknown alg2: " + alg2)); } default : throw new java.lang.IllegalArgumentException(("Unknown alg1: " + alg1)); } }
@org.junit.Test public void testReconnectOnPartialConnect() { android.bluetooth.BluetoothDevice[] bondedDevices = new android.bluetooth.BluetoothDevice[1]; bondedDevices[0] = mTestDevice; when(mAdapterService.getBondedDevices()).thenReturn(bondedDevices); when(mHeadsetService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mA2dpService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mAdapterService.getState()).thenReturn(BluetoothAdapter.STATE_ON); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mAdapterService, mServiceFactory); java.util.ArrayList<android.bluetooth.BluetoothDevice> hsConnectedDevices = new java.util.ArrayList<>(); hsConnectedDevices.add(mTestDevice); when(mHeadsetService.getConnectedDevices()).thenReturn(hsConnectedDevices); when(mA2dpService.getConnectionState(mTestDevice)).thenReturn(BluetoothProfile.STATE_DISCONNECTED); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mTestDevice); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, BluetoothProfile.STATE_DISCONNECTED); intent.putExtra(BluetoothProfile.EXTRA_STATE, BluetoothProfile.STATE_CONNECTED); intent.addFlags(Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND); injector.onReceive(null, intent); executeDelayedMessages(2); verify(mA2dpService, times(1)).connect(eq(mTestDevice)); }
@org.junit.Test public void testProcessInitProfilePriorities() { when(mHeadsetService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_UNDEFINED); when(mA2dpService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_UNDEFINED); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mAdapterService, mServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_UUID); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mTestDevice); android.os.ParcelUuid[] uuids = new android.os.ParcelUuid[2]; uuids[0] = android.bluetooth.BluetoothUuid.Handsfree; uuids[1] = android.bluetooth.BluetoothUuid.AudioSink; intent.putExtra(BluetoothDevice.EXTRA_UUID, uuids); injector.onReceive(null, intent); executeDelayedMessages(1); verify(mHeadsetService, times(1)).setPriority(eq(mTestDevice), eq(BluetoothProfile.PRIORITY_ON)); verify(mA2dpService, times(1)).setPriority(eq(mTestDevice), eq(BluetoothProfile.PRIORITY_ON)); }
@org.junit.Test public void testAdapterOnAutoConnect() { when(mAdapterService.getState()).thenReturn(BluetoothAdapter.STATE_ON); when(mAdapterService.isQuietModeEnabled()).thenReturn(false); android.bluetooth.BluetoothDevice[] bondedDevices = new android.bluetooth.BluetoothDevice[1]; bondedDevices[0] = mTestDevice; when(mAdapterService.getBondedDevices()).thenReturn(bondedDevices); when(mHeadsetService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mA2dpService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mAdapterService, mServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_STATE_CHANGED); intent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_ON); injector.onReceive(null, intent); executeDelayedMessages(1); verify(mHeadsetService, times(1)).connect(eq(mTestDevice)); verify(mA2dpService, times(1)).connect(eq(mTestDevice)); }
private void executeDelayedMessages(int numMessage) { while (numMessage > 0) { mTestLooperManager.execute(mTestLooperManager.next()); numMessage--; } }
@org.junit.Test public void testNoSupportedUuids() { when(mHeadsetService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_UNDEFINED); when(mA2dpService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_UNDEFINED); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mAdapterService, mServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_UUID); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mTestDevice); injector.onReceive(null, intent); executeDelayedMessages(1); verify(mHeadsetService, never()).setPriority(eq(mTestDevice), eq(BluetoothProfile.PRIORITY_ON)); verify(mA2dpService, never()).setPriority(eq(mTestDevice), eq(BluetoothProfile.PRIORITY_ON)); }
@org.junit.Test public void testNoReconnectOnNoConnect() { android.bluetooth.BluetoothDevice[] bondedDevices = new android.bluetooth.BluetoothDevice[1]; bondedDevices[0] = mTestDevice; when(mAdapterService.getBondedDevices()).thenReturn(bondedDevices); when(mHeadsetService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mA2dpService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mAdapterService.getState()).thenReturn(BluetoothAdapter.STATE_ON); java.util.ArrayList<android.bluetooth.BluetoothDevice> hsConnectedDevices = new java.util.ArrayList<>(); when(mHeadsetService.getConnectedDevices()).thenReturn(hsConnectedDevices); when(mA2dpService.getConnectionState(mTestDevice)).thenReturn(BluetoothProfile.STATE_DISCONNECTED); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mAdapterService, mServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mTestDevice); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, BluetoothProfile.STATE_DISCONNECTED); intent.putExtra(BluetoothProfile.EXTRA_STATE, BluetoothProfile.STATE_CONNECTED); intent.addFlags(Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND); injector.onReceive(null, intent); executeDelayedMessages(1); verify(mA2dpService, never()).connect(eq(mTestDevice)); verify(mHeadsetService, never()).connect(eq(mTestDevice)); }
public static void main(java.lang.String[] args) { java.lang.reflect.InvocationHandler handler = new OOMEOnDispatch(); OOMEInterface inf = ((OOMEInterface) (java.lang.reflect.Proxy.newProxyInstance(OOMEInterface.class.getClassLoader(), new java.lang.Class[]{ OOMEInterface.class }, handler))); int l = 1024 * 1024; while (l > 8) { try { OOMEOnDispatch.storage.add(new byte[l]); } catch (java.lang.OutOfMemoryError e) { if (l > 128) { l = l / 2; } else { l = l - 8; } } } try { inf.foo(); OOMEOnDispatch.storage.clear(); java.lang.System.out.println("Did not receive OOME!"); } catch (java.lang.OutOfMemoryError oome) { OOMEOnDispatch.storage.clear(); java.lang.System.out.println("Received OOME"); } }
private static android.net.NetworkState buildMobile3gState(java.lang.String subscriberId, boolean isRoaming) { final android.net.NetworkInfo info = new android.net.NetworkInfo(TYPE_MOBILE, android.telephony.TelephonyManager.NETWORK_TYPE_UMTS, null, null); info.setDetailedState(DetailedState.CONNECTED, null, null); info.setRoaming(isRoaming); final android.net.LinkProperties prop = new android.net.LinkProperties(); prop.setInterfaceName(com.android.server.net.NetworkStatsServiceTest.TEST_IFACE); final android.net.NetworkCapabilities capabilities = new android.net.NetworkCapabilities(); com.android.server.net.NetworkStatsServiceTest.setCapability(capabilities, NetworkCapabilities.NET_CAPABILITY_NOT_METERED, false); com.android.server.net.NetworkStatsServiceTest.setCapability(capabilities, NetworkCapabilities.NET_CAPABILITY_NOT_ROAMING, (!isRoaming)); return new android.net.NetworkState(info, prop, capabilities, null, subscriberId, null); }
public static int minBandwidth(int a, int b) { if ((a == (android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED)) && (b == (android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED))) { return android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED; } else if (a == (android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED)) { return b; } else if (b == (android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED)) { return a; } else { return java.lang.Math.min(a, b); } }
private static android.net.NetworkState buildMobile4gState(java.lang.String iface) { final android.net.NetworkInfo info = new android.net.NetworkInfo(TYPE_WIMAX, 0, null, null); info.setDetailedState(DetailedState.CONNECTED, null, null); final android.net.LinkProperties prop = new android.net.LinkProperties(); prop.setInterfaceName(iface); final android.net.NetworkCapabilities capabilities = new android.net.NetworkCapabilities(); com.android.server.net.NetworkStatsServiceTest.setCapability(capabilities, NetworkCapabilities.NET_CAPABILITY_NOT_METERED, false); com.android.server.net.NetworkStatsServiceTest.setCapability(capabilities, NetworkCapabilities.NET_CAPABILITY_NOT_ROAMING, true); return new android.net.NetworkState(info, prop, capabilities, null, null, null); }
private static android.net.NetworkState buildWifiState(boolean isMetered) { final android.net.NetworkInfo info = new android.net.NetworkInfo(TYPE_WIFI, 0, null, null); info.setDetailedState(DetailedState.CONNECTED, null, null); final android.net.LinkProperties prop = new android.net.LinkProperties(); prop.setInterfaceName(com.android.server.net.NetworkStatsServiceTest.TEST_IFACE); final android.net.NetworkCapabilities capabilities = new android.net.NetworkCapabilities(); com.android.server.net.NetworkStatsServiceTest.setCapability(capabilities, NetworkCapabilities.NET_CAPABILITY_NOT_METERED, (!isMetered)); com.android.server.net.NetworkStatsServiceTest.setCapability(capabilities, NetworkCapabilities.NET_CAPABILITY_NOT_ROAMING, true); return new android.net.NetworkState(info, prop, capabilities, null, null, com.android.server.net.NetworkStatsServiceTest.TEST_SSID); }
public void resetSapProxy() { synchronized(mSapProxyLock) { releaseSapProxy(); mSapProxy = null; } }
com.android.server.connectivity.NetworkAgentInfo makeNai(int netId, int score, boolean ipv4, boolean ipv6, int transports) { com.android.server.connectivity.NetworkAgentInfo nai = mock(com.android.server.connectivity.NetworkAgentInfo.class); when(nai.network()).thenReturn(new android.net.Network(netId)); nai.linkProperties = new android.net.LinkProperties(); nai.networkCapabilities = new android.net.NetworkCapabilities(); for (int t : com.android.internal.util.BitUtils.unpackBits(transports)) { nai.networkCapabilities.addTransportType(t); } return nai; }
public static com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent toProto(android.net.metrics.DefaultNetworkEvent in) { com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.DefaultNetworkEvent ev = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.DefaultNetworkEvent(); ev.finalScore = in.finalScore; ev.initialScore = in.initialScore; ev.ipSupport = com.android.server.connectivity.IpConnectivityEventBuilder.ipSupportOf(in); if ((in.netId) != (android.net.ConnectivityManager.NETID_UNSET)) { ev.defaultNetworkDurationMs = in.durationMs; ev.noDefaultNetworkDurationMs = 0; } else { ev.defaultNetworkDurationMs = 0; ev.noDefaultNetworkDurationMs = in.durationMs; } ev.validationDurationMs = in.validatedMs; ev.previousDefaultNetworkLinkLayer = com.android.server.connectivity.IpConnectivityEventBuilder.transportsToLinkLayer(in.previousTransports); final com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent out = com.android.server.connectivity.IpConnectivityEventBuilder.buildEvent(in.netId, in.transports, null); out.setDefaultNetworkEvent(ev); return out; }
private IpConnectivityMetrics.Logger metricsLogger() { return checkNotNull(com.android.server.LocalServices.getService(IpConnectivityMetrics.Logger.class), "no IpConnectivityMetrics service"); }
private java.lang.String ipSupport() { if ((ipv4) && (ipv6)) { return "IPv4/v6"; } if (ipv6) { return "IPv6"; } if (ipv4) { return "IPv4"; } return "NONE"; }
private void cmdList(java.io.FileDescriptor fd, java.io.PrintWriter pw, java.lang.String[] args) { final java.util.ArrayList<android.net.ConnectivityMetricsEvent> events; synchronized(mLock) { events = new java.util.ArrayList(mBuffer); } if (((args.length) > 1) && (args[1].equals("proto"))) { for (com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent ev : com.android.server.connectivity.IpConnectivityEventBuilder.toProto(events)) { pw.print(ev.toString()); } if ((mNetdListener) != null) { mNetdListener.listAsProtos(pw); } mDefaultNetworkMonitor.listEventsAsProto(pw); return; } for (android.net.ConnectivityMetricsEvent ev : events) { pw.println(ev.toString()); } if ((mNetdListener) != null) { mNetdListener.list(pw); } mDefaultNetworkMonitor.listEvents(pw); }
private boolean shouldSaveHdInfo(com.android.server.telecom.Call call, android.telecom.PhoneAccountHandle accountHandle) { android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE))); android.os.PersistableBundle configBundle = null; if (configManager != null) { configBundle = configManager.getConfigForSubId(mPhoneAccountRegistrar.getSubscriptionIdForPhoneAccount(accountHandle)); } if (((configBundle != null) && (configBundle.getBoolean(CarrierConfigManager.KEY_ALLOW_HIGH_DEFINISION_IN_CALL_LOG_BOOL))) && (call.wasHighDefAudio())) { return true; } return false; }
public com.android.server.telecom.tests.BluetoothRouteManagerTest.BluetoothRouteTestParametersBuilder setExpectedListenerUpdate(com.android.server.telecom.tests.BluetoothRouteManagerTest.ListenerUpdate expectedListenerUpdate) { this.expectedListenerUpdate = expectedListenerUpdate; return this; }
@java.lang.Override public void enter() { super.enter(); setSpeakerphoneOn(false); mBluetoothRouteManager.disconnectBluetoothAudio(); android.telecom.CallAudioState newState = new android.telecom.CallAudioState(mIsMuted, com.android.server.telecom.CallAudioRouteStateMachine.ROUTE_WIRED_HEADSET, mAvailableRoutes); setSystemAudioState(newState, true); updateInternalCallAudioState(); }
@java.lang.Override public void enter() { android.bluetooth.BluetoothDevice erroneouslyConnectedDevice = getBluetoothAudioConnectedDevice(); if (erroneouslyConnectedDevice != null) { android.telecom.Log.w(com.android.server.telecom.bluetooth.BluetoothRouteManager.LOG_TAG, ("Entering AudioOff state but device %s appears to be connected. " + "Disconnecting."), erroneouslyConnectedDevice); disconnectAudio(); } cleanupStatesForDisconnectedDevices(); mListener.onBluetoothAudioDisconnected(); }
@java.lang.Override public void enter() { super.enter(); setSpeakerphoneOn(false); mBluetoothRouteManager.disconnectBluetoothAudio(); android.telecom.CallAudioState newState = new android.telecom.CallAudioState(mIsMuted, com.android.server.telecom.CallAudioRouteStateMachine.ROUTE_EARPIECE, mAvailableRoutes); setSystemAudioState(newState, true); updateInternalCallAudioState(); }
@java.lang.Override public void enter() { super.enter(); mWasOnSpeaker = true; setSpeakerphoneOn(true); mBluetoothRouteManager.disconnectBluetoothAudio(); android.telecom.CallAudioState newState = new android.telecom.CallAudioState(mIsMuted, com.android.server.telecom.CallAudioRouteStateMachine.ROUTE_SPEAKER, mAvailableRoutes); setSystemAudioState(newState); updateInternalCallAudioState(); }
public boolean isBluetoothAudioConnectedOrPending() { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = android.telecom.Log.createSubsession(); java.util.concurrent.BlockingQueue<com.android.internal.util.IState> stateQueue = new java.util.concurrent.LinkedBlockingQueue<>(); args.arg2 = stateQueue; sendMessage(com.android.server.telecom.bluetooth.BluetoothRouteManager.GET_CURRENT_STATE, args); try { com.android.internal.util.IState currentState = stateQueue.poll(com.android.server.telecom.bluetooth.BluetoothRouteManager.GET_STATE_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (currentState == null) { android.telecom.Log.w(com.android.server.telecom.bluetooth.BluetoothRouteManager.LOG_TAG, ("Failed to get a state from the state machine in time -- Handler " + "stuck?")); return false; } return currentState != (mAudioOffState); } catch (java.lang.InterruptedException e) { android.telecom.Log.w(com.android.server.telecom.bluetooth.BluetoothRouteManager.LOG_TAG, "isBluetoothAudioConnectedOrPending -- interrupted getting state"); return false; } }
public void test_Apia_jumpForwardOverInternationalDateLine_P12_to_M12() { java.time.zone.ZoneRules test = pacificApia(); java.time.Instant instantBefore = java.time.LocalDate.of(1892, 7, 2).atStartOfDay(java.time.ZoneOffset.UTC).toInstant(); java.time.zone.ZoneOffsetTransition trans = test.nextTransition(instantBefore); assertEquals(trans.getDateTimeBefore(), java.time.LocalDateTime.of(1892, 7, 5, 0, 0)); assertEquals(trans.getDateTimeAfter(), java.time.LocalDateTime.of(1892, 7, 4, 0, 0)); assertEquals(trans.isGap(), false); assertEquals(trans.isOverlap(), true); assertEquals(trans.isValidOffset(java.time.ZoneOffset.ofHoursMinutesSeconds((+12), 33, 4)), true); assertEquals(trans.isValidOffset(java.time.ZoneOffset.ofHoursMinutesSeconds((-11), (-26), (-56))), true); assertEquals(trans.getDuration(), java.time.Duration.ofHours((-24))); assertEquals(trans.getInstant(), java.time.LocalDateTime.of(1892, 7, 4, 0, 0).toInstant(java.time.ZoneOffset.ofHoursMinutesSeconds((-11), (-26), (-56)))); java.time.ZonedDateTime zdt = java.time.ZonedDateTime.of(1892, 7, 4, 23, 0, 0, 0, java.time.ZoneId.of("Pacific/Apia")); assertEquals(zdt.plusHours(2).toLocalDateTime(), java.time.LocalDateTime.of(1879, 7, 4, 1, 0, 0)); }
public static android.net.apf.ApfFilter maybeCreate(android.net.apf.ApfFilter.ApfConfiguration config, java.net.NetworkInterface networkInterface, android.net.ip.IpClient.Callback ipClientCallback) { android.net.apf.ApfCapabilities apfCapabilities = config.apfCapabilities; if ((apfCapabilities == null) || (networkInterface == null)) return null; if ((apfCapabilities.apfVersionSupported) == 0) return null; if ((apfCapabilities.maximumApfProgramSize) < 512) { android.util.Log.e(android.net.apf.ApfFilter.TAG, ("Unacceptably small APF limit: " + (apfCapabilities.maximumApfProgramSize))); return null; } if ((apfCapabilities.apfPacketFormat) != (ARPHRD_ETHER)) return null; if (!(new android.net.apf.ApfGenerator().setApfVersion(apfCapabilities.apfVersionSupported))) { android.util.Log.e(android.net.apf.ApfFilter.TAG, ("Unsupported APF version: " + (apfCapabilities.apfVersionSupported))); return null; } return new android.net.apf.ApfFilter(config, networkInterface, ipClientCallback, new android.net.metrics.IpConnectivityLog()); }
public java.lang.String toString() { java.lang.StringBuilder result = new java.lang.StringBuilder(); result.append("{"); boolean first = true; for (java.lang.String fieldName : android.icu.dev.test.format.DataDrivenNumberFormatTestData.fieldOrdering) { try { java.lang.reflect.Field field = getClass().getField(fieldName); java.lang.Object optionalValue = field.get(this); if (optionalValue == null) { continue; } if (!first) { result.append(", "); } first = false; result.append(fieldName); result.append(": "); result.append(optionalValue); } catch (java.lang.NoSuchFieldException e) { throw new java.lang.RuntimeException(e); } catch (java.lang.SecurityException e) { throw new java.lang.RuntimeException(e); } catch (java.lang.IllegalAccessException e) { throw new java.lang.RuntimeException(e); } } result.append("}"); return result.toString(); }
public void setStyle(java.lang.String value) { style = android.icu.dev.test.format.DataDrivenNumberFormatTestData.fromString(android.icu.dev.test.format.DataDrivenNumberFormatTestData.formatStyleMap, value); }
public void setCurrencyUsage(java.lang.String value) { currencyUsage = android.icu.dev.test.format.DataDrivenNumberFormatTestData.fromString(android.icu.dev.test.format.DataDrivenNumberFormatTestData.currencyUsageMap, value); }
public void setField(java.lang.String fieldName, java.lang.String valueString) throws java.lang.NoSuchMethodException { java.lang.reflect.Method m = getClass().getMethod(android.icu.dev.test.format.DataDrivenNumberFormatTestData.fieldToSetter(fieldName), java.lang.String.class); try { m.invoke(this, valueString); } catch (java.lang.IllegalAccessException e) { throw new java.lang.RuntimeException(e); } catch (java.lang.reflect.InvocationTargetException e) { throw new java.lang.RuntimeException(e); } }
public void setPadPosition(java.lang.String value) { padPosition = android.icu.dev.test.format.DataDrivenNumberFormatTestData.fromString(android.icu.dev.test.format.DataDrivenNumberFormatTestData.padPositionMap, value); }
public void clearField(java.lang.String fieldName) throws java.lang.NoSuchMethodException { java.lang.reflect.Method m = getClass().getMethod(android.icu.dev.test.format.DataDrivenNumberFormatTestData.fieldToClearer(fieldName)); try { m.invoke(this); } catch (java.lang.IllegalAccessException e) { throw new java.lang.RuntimeException(e); } catch (java.lang.reflect.InvocationTargetException e) { throw new java.lang.RuntimeException(e); } }
public void setRoundingMode(java.lang.String value) { roundingMode = android.icu.dev.test.format.DataDrivenNumberFormatTestData.fromString(android.icu.dev.test.format.DataDrivenNumberFormatTestData.roundingModeMap, value); }
private static java.lang.String checkSendfile(boolean useSystemOs, java.io.File in, java.lang.Long _offset, int maxBytes) throws android.system.ErrnoException, java.io.IOException { java.io.File out = java.io.File.createTempFile(libcore.io.OsTest.class.getSimpleName(), "checkSendfile.out"); try (java.io.FileInputStream inStream = new java.io.FileInputStream(in)) { java.io.FileDescriptor inFd = inStream.getFD(); try (java.io.FileOutputStream outStream = new java.io.FileOutputStream(out)) { java.io.FileDescriptor outFd = outStream.getFD(); if (useSystemOs) { android.util.MutableLong offset = (_offset == null) ? null : new android.util.MutableLong(_offset); android.system.Os.sendfile(outFd, inFd, offset, maxBytes); } else { libcore.util.MutableLong offset = (_offset == null) ? null : new libcore.util.MutableLong(_offset); libcore.io.Libcore.os.sendfile(outFd, inFd, offset, maxBytes); } } return libcore.io.IoUtils.readFileAsString(out.getPath()); } finally { out.delete(); } }
public void test_sendfile_offset() throws java.lang.Exception { java.io.File in = libcore.io.OsTest.createTempFile("test_sendfile_offset", "Hello, world!"); try { assertEquals("Hello", libcore.io.OsTest.checkSendfile(true, in, 0L, 5)); assertEquals("Hello", libcore.io.OsTest.checkSendfile(false, in, 0L, 5)); assertEquals("ello,", libcore.io.OsTest.checkSendfile(true, in, 1L, 5)); assertEquals("ello,", libcore.io.OsTest.checkSendfile(false, in, 1L, 5)); assertEquals("rld!", libcore.io.OsTest.checkSendfile(true, in, ((long) ("Hello, wo".length())), 5)); assertEquals("rld!", libcore.io.OsTest.checkSendfile(false, in, ((long) ("Hello, wo".length())), 5)); assertEquals("", libcore.io.OsTest.checkSendfile(true, in, 1L, 0)); assertEquals("", libcore.io.OsTest.checkSendfile(false, in, 1L, 0)); } finally { in.delete(); } }
public void test_sendfile_null() throws java.lang.Exception { java.io.File in = libcore.io.OsTest.createTempFile("test_sendfile_null", "Hello, world!"); try { assertEquals("Hello", libcore.io.OsTest.checkSendfile(true, in, null, "Hello".length())); assertEquals("Hello", libcore.io.OsTest.checkSendfile(false, in, null, "Hello".length())); } finally { in.delete(); } }
public static int waitpid(int pid, int[] status, int options) throws android.system.ErrnoException { if (status == null) { return Libcore.os.waitpid(pid, null, options); } else { if ((status.length) != 1) { throw new java.lang.IllegalArgumentException(("Invalid array length: " + (status.length))); } libcore.util.MutableInt internalStatus = new libcore.util.MutableInt(status[0]); try { return Libcore.os.waitpid(pid, internalStatus, options); } finally { status[0] = internalStatus.value; } } }
public static int ioctlInt(java.io.FileDescriptor fd, int cmd, int[] arg) throws android.system.ErrnoException { if ((arg.length) != 1) { throw new java.lang.IllegalArgumentException(("Invalid array length: " + (arg.length))); } libcore.util.MutableInt internalArg = new libcore.util.MutableInt(arg[0]); try { return Libcore.os.ioctlInt(fd, cmd, internalArg); } finally { arg[0] = internalArg.value; } }
@java.lang.Override public void flush() throws java.io.IOException { java.io.FileDescriptor myFd = fd; if (myFd == null) throw new java.io.IOException("socket closed"); int[] pending = new int[1]; while (true) { try { android.system.Os.ioctlInt(myFd, OsConstants.TIOCOUTQ, pending); } catch (android.system.ErrnoException e) { throw e.rethrowAsIOException(); } if ((pending[0]) <= 0) { break; } try { java.lang.Thread.sleep(10); } catch (java.lang.InterruptedException ie) { break; } } }
@java.lang.Override public int available() throws java.io.IOException { java.io.FileDescriptor myFd = fd; if (myFd == null) throw new java.io.IOException("socket closed"); int[] avail = new int[1]; try { android.system.Os.ioctlInt(myFd, OsConstants.FIONREAD, avail); } catch (android.system.ErrnoException e) { throw e.rethrowAsIOException(); } return avail[0]; }
public static long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, long[] inOffset, long byteCount) throws android.system.ErrnoException { if ((inOffset.length) != 1) { throw new java.lang.IllegalArgumentException(("Invalid array length: " + (inOffset.length))); } libcore.util.MutableLong internalInOffset = new libcore.util.MutableLong(inOffset[0]); try { return Libcore.os.sendfile(outFd, inFd, internalInOffset, byteCount); } finally { inOffset[0] = internalInOffset.value; } }
@java.lang.Deprecated public static long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException { libcore.util.MutableLong internalInOffset = new libcore.util.MutableLong(inOffset.value); try { return Libcore.os.sendfile(outFd, inFd, internalInOffset, byteCount); } finally { inOffset.value = internalInOffset.value; } }
@java.lang.Deprecated public static int waitpid(int pid, android.util.MutableInt status, int options) throws android.system.ErrnoException { libcore.util.MutableInt internalStatus = new libcore.util.MutableInt(status.value); try { return Libcore.os.waitpid(pid, internalStatus, options); } finally { status.value = internalStatus.value; } }
public void networkScanResult_1_2(int indicationType, android.hardware.radio.V1_1.NetworkScanResult result) { responseCellInfos_1_2(indicationType, result); }
private void responseCellInfos_1_2(int indicationType, android.hardware.radio.V1_1.NetworkScanResult result) { mRil.processIndication(indicationType); com.android.internal.telephony.NetworkScanResult nsr = null; java.util.ArrayList<android.telephony.CellInfo> infos = com.android.internal.telephony.RIL.convertHalCellInfoList_1_2(result.networkInfos); nsr = new com.android.internal.telephony.NetworkScanResult(result.status, result.error, infos); if (RIL.RILJ_LOGD) mRil.unsljLogRet(com.android.internal.telephony.RILConstants.RIL_UNSOL_NETWORK_SCAN_RESULT, nsr); mRil.mRilNetworkScanResultRegistrants.notifyRegistrants(new android.os.AsyncResult(null, nsr, null)); }
public java.lang.String getOperatorBrandOverride() { java.lang.String iccId = getIccId(); if (android.text.TextUtils.isEmpty(iccId)) { return null; } android.content.SharedPreferences sp = android.preference.PreferenceManager.getDefaultSharedPreferences(mContext); java.lang.String brandName = sp.getString(((com.android.internal.telephony.uicc.UiccCard.OPERATOR_BRAND_OVERRIDE_PREFIX) + iccId), null); if (brandName == null) { android.telephony.CarrierConfigManager manager = ((android.telephony.CarrierConfigManager) (mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE))); int subId = com.android.internal.telephony.SubscriptionController.getInstance().getSubIdUsingPhoneId(mPhoneId); android.os.PersistableBundle bundle = manager.getConfigForSubId(subId); if (bundle != null) { brandName = bundle.getString(CarrierConfigManager.KEY_CARRIER_BRAND_NAME_OVERRIDE_STRING); } } return brandName; }
private static boolean writeInt(java.io.File f, int value) throws java.io.FileNotFoundException { java.io.FileOutputStream os = new java.io.FileOutputStream(f); try { os.write(("" + value).getBytes()); return true; } catch (java.io.IOException e) { return false; } finally { try { os.close(); } catch (java.io.IOException e) { } } }
private static int readInt(java.io.File f) throws java.io.FileNotFoundException { java.util.Scanner s = new java.util.Scanner(f); try { return s.nextInt(); } finally { s.close(); } }
private void startDummyNetworkActivity() throws java.io.IOException { final int DUMMY_PORT = 8080; java.net.ServerSocket serverSocket = new java.net.ServerSocket(DUMMY_PORT); new java.lang.Thread(() -> { while (mGenerateNetworkTraffic) { try { java.net.Socket socket = serverSocket.accept(); java.io.PrintStream output = new java.io.PrintStream(socket.getOutputStream()); output.println("HTTP/1.0 200 OK"); output.println(); output.flush(); output.close(); } catch (java.io.IOException e) { android.util.Log.w(com.android.cts.deviceowner.NetworkLoggingTest.TAG, "Failed to serve connection", e); } } try { serverSocket.close(); } catch (java.io.IOException e) { } }).start(); new java.lang.Thread(() -> { try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { java.lang.Thread.currentThread().interrupt(); } final java.lang.String DUMMY_URL = ("localhost:" + DUMMY_PORT) + "/"; for (int i = 0; (i < ((com.android.cts.deviceowner.NetworkLoggingTest.FULL_LOG_BATCH_SIZE) * 2)) && (mGenerateNetworkTraffic); i++) { connectToWebsite(DUMMY_URL); try { java.lang.Thread.sleep(10); } catch (java.lang.InterruptedException e) { java.lang.Thread.currentThread().interrupt(); } } }).start(); }
public void testNetworkLoggingAndRetrieval() throws java.lang.Exception { mCountDownLatch = new java.util.concurrent.CountDownLatch(1); mCurrentBatchToken = com.android.cts.deviceowner.NetworkLoggingTest.FAKE_BATCH_TOKEN; mGenerateNetworkTraffic = true; final android.content.IntentFilter filterNetworkLogsAvailable = new android.content.IntentFilter(BaseDeviceOwnerTest.ACTION_NETWORK_LOGS_AVAILABLE); android.support.v4.content.LocalBroadcastManager.getInstance(mContext).registerReceiver(mNetworkLogsReceiver, filterNetworkLogsAvailable); for (final java.lang.String url : com.android.cts.deviceowner.NetworkLoggingTest.NOT_LOGGED_URLS_LIST) { connectToWebsite(url); } mDevicePolicyManager.setNetworkLoggingEnabled(getWho(), true); assertTrue(mDevicePolicyManager.isNetworkLoggingEnabled(getWho())); for (final java.lang.String url : com.android.cts.deviceowner.NetworkLoggingTest.LOGGED_URLS_LIST) { connectToWebsite(url); } startDummyNetworkActivity(); mCountDownLatch.await(10, java.util.concurrent.TimeUnit.MINUTES); android.support.v4.content.LocalBroadcastManager.getInstance(mContext).unregisterReceiver(mNetworkLogsReceiver); if (mGenerateNetworkTraffic) { fail(("Carried out 100 iterations and waited for 3 minutes, but still didn't get" + " DeviceAdminReceiver#onNetworkLogsAvailable() callback")); } final java.util.List<android.app.admin.NetworkEvent> networkEvents = mDevicePolicyManager.retrieveNetworkLogs(getWho(), mCurrentBatchToken); if (networkEvents == null) { fail(("Failed to retrieve batch of network logs with batch token " + (mCurrentBatchToken))); return; } verifyNetworkLogs(networkEvents); }
private void connectToWebsite(java.lang.String serverString) { java.net.HttpURLConnection urlConnection = null; try { final java.net.URL url = new java.net.URL(("http://" + serverString)); urlConnection = ((java.net.HttpURLConnection) (url.openConnection())); urlConnection.setConnectTimeout(2000); urlConnection.setReadTimeout(2000); urlConnection.getResponseCode(); (mRequestsMade)++; } catch (java.io.IOException e) { android.util.Log.w(com.android.cts.deviceowner.NetworkLoggingTest.TAG, ((("Failed to connect to " + serverString) + ", ") + e)); } finally { if (urlConnection != null) { urlConnection.disconnect(); } } }
@org.junit.Test public void testIsLocallyAssignedAddress() { android.net.MacAddress[] localAddresses = new android.net.MacAddress[]{ new android.net.MacAddress("06:00:00:00:00:00"), new android.net.MacAddress("07:00:d3:56:8a:c4"), new android.net.MacAddress("33:33:aa:bb:cc:dd") }; android.net.MacAddress[] universallyAddresses = new android.net.MacAddress[]{ new android.net.MacAddress("00:01:44:55:66:77"), new android.net.MacAddress("08:00:22:33:44:55") }; for (android.net.MacAddress mac : localAddresses) { java.lang.String msg = (mac.toString()) + " expected to be a locally assigned address"; assertTrue(msg, mac.isLocallyAssigned()); } for (android.net.MacAddress mac : universallyAddresses) { java.lang.String msg = (mac.toString()) + " expected not to be globally unique address"; assertFalse(msg, mac.isLocallyAssigned()); } }
@org.junit.Test public void testMacAddressConversions() { final int iterations = 10000; final java.util.Random r = new java.util.Random(); for (int i = 0; i < iterations; i++) { android.net.MacAddress mac = android.net.MacAddress.getRandomAddress(); java.lang.String stringRepr = mac.toString(); byte[] bytesRepr = mac.toByteArray(); assertEquals(mac, new android.net.MacAddress(stringRepr)); assertEquals(mac, new android.net.MacAddress(bytesRepr)); } }
public static long longAddrFromStringAddr(java.lang.String addr) { if (addr == null) { throw new java.lang.IllegalArgumentException("cannot convert the null String"); } java.lang.String[] parts = addr.split(":"); if ((parts.length) != (android.net.MacAddress.ETHER_ADDR_LEN)) { throw new java.lang.IllegalArgumentException((addr + " was not a valid MAC address")); } long longAddr = 0; int index = android.net.MacAddress.ETHER_ADDR_LEN; while ((index--) > 0) { longAddr = (java.lang.Integer.valueOf(parts[index], 16)) + (longAddr << 8); } return longAddr; }
public static android.net.MacAddress getRandomAddress(java.util.Random r) { return new android.net.MacAddress(((android.net.MacAddress.VALID_LONG_MASK) & (r.nextLong()))); }
public static android.net.MacAddress getRandomAddress() { return android.net.MacAddress.getRandomAddress(new java.util.Random()); }
@java.lang.Override public int getDisplayRule(android.telephony.ServiceState serviceState) { int rule; if ((((mParentApp) != null) && ((mParentApp.getUiccCard()) != null)) && ((mParentApp.getUiccCard().getOperatorBrandOverride()) != null)) { rule = SPN_RULE_SHOW_PLMN; } else if ((android.text.TextUtils.isEmpty(getServiceProviderName())) || ((mSpnDisplayCondition) == (-1))) { rule = SPN_RULE_SHOW_PLMN; } else if (shouldConsiderServiceStateRoaming() ? !(serviceState.getRoaming()) : isOnMatchingPlmn(serviceState.getOperatorNumeric())) { rule = SPN_RULE_SHOW_SPN; if (((mSpnDisplayCondition) & 1) == 1) { rule |= SPN_RULE_SHOW_PLMN; } } else { rule = SPN_RULE_SHOW_PLMN; if (((mSpnDisplayCondition) & 2) == 0) { rule |= SPN_RULE_SHOW_SPN; } } return rule; }
private boolean shouldConsiderServiceStateRoaming() { android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE))); if (configManager != null) { android.os.PersistableBundle b = configManager.getConfigForSubId(com.android.internal.telephony.SubscriptionController.getInstance().getSubIdUsingPhoneId(mParentApp.getPhoneId())); if ((b != null) && (b.getBoolean(CarrierConfigManager.KEY_SPN_DISPLAY_RULE_SHOULD_CONSIDER_SERVICE_STATE_ROAMING_BOOL))) { return true; } } return false; }
public static void registerUserSwitchedReceiver(android.content.Context context) { android.content.IntentFilter filter = new android.content.IntentFilter(android.content.Intent.ACTION_USER_SWITCHED); context.registerReceiverAsUser(com.android.bluetooth.Utils.sUserSwitchedReceiver, UserHandle.ALL, filter, null, null); com.android.bluetooth.Utils.sForegroundUserId = android.app.ActivityManager.getCurrentUser(); }
private void checkOutputApkNotDebuggableIfDebuggableMustBeRejected() throws java.security.SignatureException { if (mDebuggableApkPermitted) { return; } try { if (isOutputApkDebuggable()) { throw new java.security.SignatureException(("APK is debuggable and this engine is configured to refuse to sign" + " debuggable APKs")); } } catch (com.android.apksig.apk.DebuggableException e) { throw new java.security.SignatureException("Failed to determine whether the APK is debuggable", e); } }
private boolean isOutputApkDebuggable() throws com.android.apksig.apk.DebuggableException { if ((mDebuggable) != null) { return mDebuggable; } if ((mOutputAndroidManifestEntryDataRequest) == null) { throw new java.lang.IllegalStateException((("Cannot determine debuggable status of output APK because " + (com.android.apksig.apk.ApkUtils.ANDROID_MANIFEST_ZIP_ENTRY_NAME)) + " entry contents have not yet been requested")); } if (!(mOutputAndroidManifestEntryDataRequest.isDone())) { throw new java.lang.IllegalStateException(("Still waiting to inspect output APK's " + (mOutputAndroidManifestEntryDataRequest.getEntryName()))); } mDebuggable = com.android.apksig.apk.ApkUtils.getDebuggableFromBinaryAndroidManifest(java.nio.ByteBuffer.wrap(mOutputAndroidManifestEntryDataRequest.getData())); return mDebuggable; }
private void handleRilInd(com.android.bluetooth.sap.SapMessage sapMsg) { if (sapMsg == null) return; switch (sapMsg.getMsgType()) { case SapMessage.ID_RIL_UNSOL_DISCONNECT_IND : { if (((mState) != (com.android.bluetooth.sap.SapServer.SAP_STATE.DISCONNECTED)) && ((mState) != (com.android.bluetooth.sap.SapServer.SAP_STATE.DISCONNECTING))) { com.android.bluetooth.sap.SapMessage reply = new com.android.bluetooth.sap.SapMessage(SapMessage.ID_DISCONNECT_IND); reply.setDisconnectionType(sapMsg.getDisconnectionType()); sendClientMessage(reply); } else { sendDisconnectInd(sapMsg.getDisconnectionType()); } break; } default : if (com.android.bluetooth.sap.SapServer.DEBUG) android.util.Log.w(com.android.bluetooth.sap.SapServer.TAG_HANDLER, ("Unhandled message - type: " + (com.android.bluetooth.sap.SapMessage.getMsgTypeName(sapMsg.getMsgType())))); } }
public void testOcclude() throws java.lang.Exception { if (!(isHandheld())) { return; } gotoKeyguard(); mAmWmState.waitForKeyguardShowingAndNotOccluded(mDevice); launchActivity("ShowWhenLockedActivity"); mAmWmState.computeState(mDevice, new java.lang.String[]{ "ShowWhenLockedActivity" }); assertEquals("Picked wrong transition", android.server.cts.WindowManagerState.TRANSIT_KEYGUARD_OCCLUDE, mAmWmState.getWmState().getLastTransition()); }
public void testKeyguardHidesActivity() throws java.lang.Exception { if (!(isHandheld())) { return; } launchActivity("TestActivity"); mAmWmState.computeState(mDevice, new java.lang.String[]{ "TestActivity" }); mAmWmState.assertVisibility("TestActivity", true); gotoKeyguard(); mAmWmState.waitForKeyguardShowingAndNotOccluded(mDevice); mAmWmState.computeState(mDevice, null); assertShowingAndNotOccluded(); mAmWmState.assertVisibility("TestActivity", false); unlockDevice(); }
public void testUnocclude() throws java.lang.Exception { if (!(isHandheld())) { return; } launchActivity("ShowWhenLockedActivity"); gotoKeyguard(); mAmWmState.waitForKeyguardShowingAndNotOccluded(mDevice); launchActivity("TestActivity"); mAmWmState.computeState(mDevice, null); assertEquals("Picked wrong transition", android.server.cts.WindowManagerState.TRANSIT_KEYGUARD_UNOCCLUDE, mAmWmState.getWmState().getLastTransition()); }
protected void wakeUpDevice() throws com.android.tradefed.device.DeviceNotAvailableException { runCommandAndPrintOutput(java.lang.String.format("service call power 9 i64 %d s16 \"\"", getDeviceUptime())); }
protected void sleepDevice() throws com.android.tradefed.device.DeviceNotAvailableException { int retriesLeft = 5; runCommandAndPrintOutput(java.lang.String.format("service call power 10 i64 %d", getDeviceUptime())); do { if (isDisplayOn()) { android.server.cts.StateLogger.log("***Waiting for display to turn off..."); try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { android.server.cts.StateLogger.log(e.toString()); } } else { break; } } while ((retriesLeft--) > 0 ); }
private android.support.test.uiautomator.UiObject2 findPermissionNotificationInStream(android.support.test.uiautomator.UiDevice uiDevice) { uiDevice.pressHome(); swipeUp(uiDevice); if (uiDevice.hasObject(android.support.test.uiautomator.By.text("Permission requested"))) { return uiDevice.findObject(android.support.test.uiautomator.By.text("Permission requested")); } for (int i = 0; i < 100; i++) { if (!(swipeUp(uiDevice))) { break; } if (uiDevice.hasObject(android.support.test.uiautomator.By.text("Permission requested"))) { return uiDevice.findObject(android.support.test.uiautomator.By.text("Permission requested")); } } return null; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if (obj == null) { return false; } if (!(obj instanceof android.telecom.CallAudioState)) { return false; } android.telecom.CallAudioState state = ((android.telecom.CallAudioState) (obj)); if ((supportedBluetoothDevices.size()) != (state.supportedBluetoothDevices.size())) { return false; } for (android.bluetooth.BluetoothDevice device : supportedBluetoothDevices) { if (!(state.supportedBluetoothDevices.contains(device))) { return false; } } return (((isMuted()) == (state.isMuted())) && ((getRoute()) == (state.getRoute()))) && ((getSupportedRouteMask()) == (state.getSupportedRouteMask())); }
@java.lang.Override public android.telecom.CallAudioState createFromParcel(android.os.Parcel source) { boolean isMuted = ((source.readByte()) == 0) ? false : true; int route = source.readInt(); int supportedRouteMask = source.readInt(); android.bluetooth.BluetoothDevice activeBluetoothDevice = source.readParcelable(java.lang.ClassLoader.getSystemClassLoader()); List<android.bluetooth.BluetoothDevice> supportedBluetoothDevices = source.createTypedArrayList(BluetoothDevice.CREATOR); return new android.telecom.CallAudioState(isMuted, route, supportedRouteMask, activeBluetoothDevice, supportedBluetoothDevices); }
public final void requestBluetoothAudio(java.lang.String bluetoothAddress) { if ((mPhone) != null) { mPhone.requestBluetoothAudio(bluetoothAddress); } }
public void requestBluetoothAudio(java.lang.String bluetoothAddress) { for (android.telecom.Connection.Listener l : mListeners) { l.onAudioRouteChanged(this, CallAudioState.ROUTE_BLUETOOTH, bluetoothAddress); } }
@java.lang.Override public java.lang.String toString() { java.lang.String bluetoothDeviceList = java.lang.String.join(",", supportedBluetoothDevices.stream().map(BluetoothDevice::getAddress).collect(java.util.stream.Collectors.toList())); return java.lang.String.format(java.util.Locale.US, ("[AudioState isMuted: %b, route: %s, supportedRouteMask: %s, " + "activeBluetoothDevice: [%s], supportedBluetoothDevices: [%s]]"), isMuted, android.telecom.CallAudioState.audioRouteToString(route), android.telecom.CallAudioState.audioRouteToString(supportedRouteMask), activeBluetoothDevice, bluetoothDeviceList); }
void wakeupEvent(java.lang.String iface, int uid) throws java.lang.Exception { java.lang.String prefix = (NetdEventListenerService.WAKEUP_EVENT_IFACE_PREFIX) + iface; mService.onWakeupEvent(prefix, uid, uid, 2048, 6, com.android.server.connectivity.NetdEventListenerServiceTest.MAC_ADDR, "192.168.2.23", "192.168.2.23", 23, 24, 0); }
@java.lang.Override public java.lang.String toString() { updateDuration(); java.util.StringJoiner j = new java.util.StringJoiner(", ", "WakeupStats(", ")"); j.add(iface); j.add((("" + (durationSec)) + "s")); j.add(("total: " + (totalWakeups))); j.add(("root: " + (rootWakeups))); j.add(("system: " + (systemWakeups))); j.add(("apps: " + (applicationWakeups))); j.add(("non-apps: " + (nonApplicationWakeups))); j.add(("no uid: " + (noUidWakeups))); j.add(java.lang.String.format("l2 unicast/multicast/broadcast: %d/%d/%d", l2UnicastCounts, l2MulticastCounts, l2BroadcastCounts)); for (int i = 0; i < (ethertypes.size()); i++) { int eth = ethertypes.keyAt(i); int count = ethertypes.valueAt(i); j.add(java.lang.String.format("ethertype 0x%x: %d", eth, count)); } for (int i = 0; i < (ipProtocols.size()); i++) { int proto = ipProtocols.keyAt(i); int count = ipProtocols.valueAt(i); j.add(java.lang.String.format("ipproto %d: %d", proto, count)); } return j.toString(); }
void asyncDump(long durationMs) throws java.lang.Exception { final long stop = (java.lang.System.currentTimeMillis()) + durationMs; final java.io.PrintWriter pw = new java.io.PrintWriter(new java.io.FileOutputStream("/dev/null")); new java.lang.Thread(() -> { while ((java.lang.System.currentTimeMillis()) < stop) { mService.dump(pw); } }).start(); }
@java.lang.Override public synchronized void onWakeupEvent(java.lang.String prefix, int uid, int gid, int ethertype, int ipProtocol, byte[] dstHw, java.lang.String srcIp, java.lang.String dstIp, int srcPort, int dstPort, long timestampNs) { java.lang.String iface = prefix.replaceFirst(com.android.server.connectivity.NetdEventListenerService.WAKEUP_EVENT_IFACE_PREFIX, ""); final long timestampMs; if (timestampNs > 0) { timestampMs = timestampNs / (NANOS_PER_MS); } else { timestampMs = java.lang.System.currentTimeMillis(); } android.net.metrics.WakeupEvent event = new android.net.metrics.WakeupEvent(); event.iface = iface; event.timestampMs = timestampMs; event.uid = uid; event.ethertype = ethertype; event.dstHwAddr = dstHw; event.srcIp = srcIp; event.dstIp = dstIp; event.ipProtocol = ipProtocol; event.srcPort = srcPort; event.dstPort = dstPort; addWakeupEvent(event); }
public static com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent toProto(android.net.metrics.WakeupStats in) { com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.WakeupStats wakeupStats = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.WakeupStats(); in.updateDuration(); wakeupStats.durationSec = in.durationSec; wakeupStats.totalWakeups = in.totalWakeups; wakeupStats.rootWakeups = in.rootWakeups; wakeupStats.systemWakeups = in.systemWakeups; wakeupStats.nonApplicationWakeups = in.nonApplicationWakeups; wakeupStats.applicationWakeups = in.applicationWakeups; wakeupStats.noUidWakeups = in.noUidWakeups; wakeupStats.l2UnicastCounts = in.l2UnicastCounts; wakeupStats.l2MulticastCounts = in.l2MulticastCounts; wakeupStats.l2BroadcastCounts = in.l2BroadcastCounts; wakeupStats.ethertypeCounts = com.android.server.connectivity.IpConnectivityEventBuilder.toPairArray(in.ethertypes); wakeupStats.ipProtocolCounts = com.android.server.connectivity.IpConnectivityEventBuilder.toPairArray(in.ipProtocols); final com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent out = com.android.server.connectivity.IpConnectivityEventBuilder.buildEvent(0, 0, in.iface); out.setWakeupStats(wakeupStats); return out; }
public void countEvent(android.net.metrics.WakeupEvent ev) { (totalWakeups)++; switch (ev.uid) { case ROOT_UID : (rootWakeups)++; break; case SYSTEM_UID : (systemWakeups)++; break; case android.net.metrics.WakeupStats.NO_UID : (noUidWakeups)++; break; default : if ((ev.uid) >= (FIRST_APPLICATION_UID)) { (applicationWakeups)++; } else { (nonApplicationWakeups)++; } break; } if ((ev.dstHwAddr.length) == (android.net.metrics.WakeupStats.L2_BROADCAST.length)) { if (java.util.Arrays.equals(ev.dstHwAddr, android.net.metrics.WakeupStats.L2_BROADCAST)) { (l2BroadcastCounts)++; } else if ((ev.dstHwAddr[0]) == 1) { (l2MulticastCounts)++; } else { (l2UnicastCounts)++; } } android.net.metrics.WakeupStats.increment(ethertypes, ev.ethertype); if ((ev.ipProtocol) >= 0) { android.net.metrics.WakeupStats.increment(ipProtocols, ev.ipProtocol); } }
void wakeupEvent(java.lang.String iface, int uid) throws java.lang.Exception { java.lang.String prefix = (NetdEventListenerService.WAKEUP_EVENT_IFACE_PREFIX) + iface; mNetdListener.onWakeupEvent(prefix, uid, uid, 2048, 6, com.android.server.connectivity.IpConnectivityMetricsTest.MAC_ADDR, "192.168.2.23", "192.168.2.23", 23, 24, 0); }
@java.lang.Override public java.lang.String toString() { java.util.StringJoiner j = new java.util.StringJoiner(", ", "WakeupEvent(", ")"); j.add(java.lang.String.format("%tT.%tL", timestampMs, timestampMs)); j.add(iface); j.add(java.lang.Integer.toString(uid)); j.add(("eth=0x" + (java.lang.Integer.toHexString(ethertype)))); j.add(("dstHw=" + (android.net.metrics.WakeupEvent.hardwareAddrToString(dstHwAddr)))); if ((ipProtocol) > 0) { j.add(("ip=" + (ipProtocol))); j.add(("srcIp=" + (srcIp))); j.add(("dstIp=" + (dstIp))); if ((srcPort) > 0) { j.add(("srcPort=" + (srcPort))); } if ((dstPort) > 0) { j.add(("dstPort=" + (dstPort))); } } return j.toString(); }
private java.io.File createDex(vogar.Action action, java.io.File actionJar) { java.io.File dex = run.localFile(action, "classes.dex"); vogar.Classpath classesToDex = vogar.Classpath.of(actionJar); classesToDex.addAll(run.classpath); if ((run.toolchain) == (vogar.Toolchain.JACK)) { throw new java.lang.UnsupportedOperationException("Jack support for --mode=activity not yet implemented"); } java.io.File localTempDir = run.localDir(action.getName()); vogar.Classpath dependentCp = new vogar.Classpath(); vogar.android.AndroidSdk.Dexer dexer = AndroidSdk.Dexer.DX; if ((run.toolchain) == (vogar.Toolchain.D8)) { dexer = AndroidSdk.Dexer.D8; } run.androidSdk.dex(run.multidex, dex, localTempDir, classesToDex, dependentCp, dexer); return dex; }
private vogar.tasks.Task newCreateDexJarTask(vogar.Classpath classpath, java.io.File classpathElement, java.lang.String name, vogar.Action action, java.io.File localDex, java.io.File localTempDir) { vogar.tasks.Task dex; if ((run.toolchain) == (vogar.Toolchain.JACK)) { dex = new vogar.android.JackDexTask(run, classpath, run.benchmark, name, classpathElement, action, localDex); } else { dex = new vogar.android.DexTask(run, run.androidSdk, classpath, run.benchmark, name, classpathElement, action, localDex, localTempDir, run.multidex); } return dex; }
@java.lang.Override protected vogar.Result execute() throws java.lang.Exception { vogar.Classpath cp = vogar.Classpath.of(jar); vogar.Classpath dependentCp = classpath; if ((benchmark) && ((action) != null)) { cp.addAll(classpath); dependentCp = new vogar.Classpath(); } vogar.android.AndroidSdk.Dexer dexer = AndroidSdk.Dexer.DX; if ((run.toolchain) == (vogar.Toolchain.D8)) { dexer = AndroidSdk.Dexer.D8; } androidSdk.dex(multidex, localDex, localTempDir, cp, dependentCp, dexer); return vogar.Result.SUCCESS; }
private vogar.tasks.Task createCreateDexJarTask(vogar.Classpath classpath, java.io.File classpathElement, java.lang.String name, vogar.Action action, java.io.File localDex, java.io.File localTempDir) { vogar.tasks.Task dex; if ((run.toolchain) == (vogar.Toolchain.JACK)) { dex = new vogar.android.JackDexTask(run, classpath, run.benchmark, name, classpathElement, action, localDex); } else { dex = new vogar.android.DexTask(run, run.androidSdk, classpath, run.benchmark, name, classpathElement, action, localDex, localTempDir, run.multidex); } return dex; }
public void dex(boolean multidex, java.io.File output, java.io.File outputTempDir, vogar.Classpath classpath, vogar.Classpath dependentCp, vogar.android.AndroidSdk.Dexer dexer) { mkdir.mkdirs(output.getParentFile()); java.lang.String classpathSubKey = dexCache.makeKey(classpath); java.lang.String cacheKey = null; if (classpathSubKey != null) { java.lang.String multidexSubKey = "mdex=" + multidex; cacheKey = dexCache.makeKey(classpathSubKey, multidexSubKey); boolean cacheHit = dexCache.getFromCache(output, cacheKey); if (cacheHit) { log.verbose(("dex cache hit for " + classpath)); return; } } java.util.List<java.lang.String> desugarOutputFilePaths = desugar(outputTempDir, classpath, dependentCp); vogar.commands.Command.Builder builder = new vogar.commands.Command.Builder(log); switch (dexer) { case DX : builder.args("dx"); break; case D8 : builder.args("d8"); break; } builder.args("-JXms16M").args("-JXmx1536M").args(("--min-sdk-version=" + (language.getMinApiLevel()))); if (multidex) { builder.args("--multi-dex"); } builder.args("--dex").args(("--output=" + output)).args("--core-library").args(desugarOutputFilePaths); builder.execute(); if ((dexer == (vogar.android.AndroidSdk.Dexer.D8)) && (output.toString().endsWith(".jar"))) { try { fixD8Output(output, desugarOutputFilePaths); } catch (java.io.IOException e) { throw new java.lang.RuntimeException("Error while fixing d8 output", e); } } dexCache.insert(cacheKey, output); }
private void fixD8Output(java.io.File output, java.util.List<java.lang.String> inputs) throws java.io.IOException { byte[] buffer = new byte[4096]; java.io.File outputCopy = new java.io.File(((output.toString()) + ".copy")); output.renameTo(outputCopy); inputs.add(outputCopy.toString()); try (java.util.jar.JarOutputStream outputJar = new java.util.jar.JarOutputStream(new java.io.FileOutputStream(output))) { for (java.lang.String input : inputs) { try (java.util.jar.JarInputStream inputJar = new java.util.jar.JarInputStream(new java.io.FileInputStream(input))) { for (java.util.jar.JarEntry entry = inputJar.getNextJarEntry(); entry != null; entry = inputJar.getNextJarEntry()) { if (entry.getName().endsWith(".class")) { continue; } outputJar.putNextEntry(entry); int length = 0; while (length >= 0) { length = inputJar.read(buffer); if (length > 0) { outputJar.write(buffer, 0, length); } } outputJar.closeEntry(); } } } } finally { outputCopy.delete(); } }
private boolean compareIcuRoundingIncrement(android.icu.text.DecimalFormat_ICU58 other) { java.math.BigDecimal increment = this.icuDecimalFormat.getRoundingIncrement(); if (increment != null) { return ((other.getRoundingIncrement()) != null) && (increment.equals(other.getRoundingIncrement())); } return (other.getRoundingIncrement()) == null; }
@java.lang.Override public java.lang.Object clone() { try { java.text.DecimalFormat other = ((java.text.DecimalFormat) (super.clone())); other.icuDecimalFormat = ((android.icu.text.DecimalFormat_ICU58) (icuDecimalFormat.clone())); other.symbols = ((java.text.DecimalFormatSymbols) (symbols.clone())); return other; } catch (java.lang.Exception e) { throw new java.lang.InternalError(); } }
private void initPattern(java.lang.String pattern) { this.icuDecimalFormat = new android.icu.text.DecimalFormat_ICU58(pattern, symbols.getIcuDecimalFormatSymbols()); updateFieldsFromIcu(); }
public com.android.ahat.proguard.ProguardMap.Frame getFrame(java.lang.String clearClassName, java.lang.String obfuscatedMethodName, java.lang.String clearSignature, java.lang.String obfuscatedFilename, int obfuscatedLine) { java.lang.String key = obfuscatedMethodName + clearSignature; com.android.ahat.proguard.ProguardMap.FrameData frame = mFrames.get(key); if (frame == null) { return new com.android.ahat.proguard.ProguardMap.Frame(obfuscatedMethodName, clearSignature, com.android.ahat.proguard.ProguardMap.getFileName(clearClassName, ""), obfuscatedLine); } return new com.android.ahat.proguard.ProguardMap.Frame(frame.clearMethodName, clearSignature, com.android.ahat.proguard.ProguardMap.getFileName(clearClassName, frame.clearMethodName), (obfuscatedLine - (frame.lineDelta))); }
public java.lang.String getDeviceName(android.bluetooth.BluetoothDevice device) { java.lang.String deviceName = null; if (((mAdapter) != null) && (device != null)) { deviceName = device.getAlias(); } if (deviceName == null) { deviceName = com.android.bluetooth.opp.BluetoothOppPreference.getInstance(mContext).getName(device); } if ((deviceName == null) && ((mAdapter) != null)) { deviceName = device.getName(); } if (deviceName == null) { deviceName = mContext.getString(R.string.unknown_device); } return deviceName; }
void messageFromNative(com.android.bluetooth.a2dp.StackEvent stackEvent) { mStateMachine.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); }
@java.lang.Override protected boolean cleanup() { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, "stop()"); } if ((mConnectionStateChangedReceiver) != null) { unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; } if ((mStateMachine) != null) { mStateMachine.cleanup(); mStateMachine = null; } if ((mAvrcp) != null) { mAvrcp.cleanup(); mAvrcp = null; } com.android.bluetooth.a2dp.A2dpService.clearA2dpService(); return true; }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); java.lang.reflect.Method method = com.android.bluetooth.btservice.AdapterService.class.getDeclaredMethod("setAdapterService", com.android.bluetooth.btservice.AdapterService.class); method.setAccessible(true); method.invoke(mAdapterService, mAdapterService); mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("00:01:02:03:04:05"); mHandlerThread = new android.os.HandlerThread("A2dpStateMachineTestHandlerThread"); mHandlerThread.start(); mA2dpStateMachine = new com.android.bluetooth.a2dp.A2dpStateMachine(mA2dpService, mTargetContext, mA2dpNativeInterface, mHandlerThread.getLooper()); mA2dpStateMachine.start(); }
@org.junit.Test public void testIncomingPriorityReject() { when(mA2dpService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_OFF); com.android.bluetooth.a2dp.StackEvent connStCh = new com.android.bluetooth.a2dp.StackEvent(StackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED); connStCh.valueInt = A2dpStateMachine.CONNECTION_STATE_CONNECTED; connStCh.device = mTestDevice; mA2dpStateMachine.sendMessage(A2dpStateMachine.STACK_EVENT, connStCh); verify(mA2dpService, never()).sendBroadcast(any(android.content.Intent.class), anyString()); org.junit.Assert.assertTrue(((mA2dpStateMachine.getCurrentState()) instanceof com.android.bluetooth.a2dp.A2dpStateMachine.Disconnected)); }
@org.junit.Test public void testOutgoingTimeout() { when(mA2dpService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_ON); when(mA2dpNativeInterface.connectA2dp(any(android.bluetooth.BluetoothDevice.class))).thenReturn(true); when(mA2dpNativeInterface.disconnectA2dp(any(android.bluetooth.BluetoothDevice.class))).thenReturn(true); mA2dpStateMachine.sendMessage(A2dpStateMachine.CONNECT, mTestDevice); org.mockito.ArgumentCaptor<android.content.Intent> intentArgument1 = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mA2dpService, timeout(1000)).sendBroadcast(intentArgument1.capture(), anyString()); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, intentArgument1.getValue().getIntExtra(BluetoothProfile.EXTRA_STATE, (-1))); org.junit.Assert.assertTrue(((mA2dpStateMachine.getCurrentState()) instanceof com.android.bluetooth.a2dp.A2dpStateMachine.Pending)); org.mockito.ArgumentCaptor<android.content.Intent> intentArgument2 = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mA2dpService, timeout(((A2dpStateMachine.CONNECT_TIMEOUT_MS) * 2)).times(2)).sendBroadcast(intentArgument2.capture(), anyString()); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, intentArgument2.getValue().getIntExtra(BluetoothProfile.EXTRA_STATE, (-1))); org.junit.Assert.assertTrue(((mA2dpStateMachine.getCurrentState()) instanceof com.android.bluetooth.a2dp.A2dpStateMachine.Disconnected)); }
private void onAudioStateChanged(int state, byte[] address) { com.android.bluetooth.a2dp.StackEvent event = new com.android.bluetooth.a2dp.StackEvent(StackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED); event.valueInt = state; event.device = getDevice(address); if (com.android.bluetooth.a2dp.A2dpNativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpNativeInterface.TAG, ("onAudioStateChanged: " + event)); } com.android.bluetooth.a2dp.A2dpService service = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); if (service != null) { service.messageFromNative(event); } else { android.util.Log.w(com.android.bluetooth.a2dp.A2dpNativeInterface.TAG, "onAudioStateChanged ignored: service not available"); } }
private void onConnectionStateChanged(int state, byte[] address) { com.android.bluetooth.a2dp.StackEvent event = new com.android.bluetooth.a2dp.StackEvent(StackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED); event.valueInt = state; event.device = getDevice(address); if (com.android.bluetooth.a2dp.A2dpNativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpNativeInterface.TAG, ("onConnectionStateChanged: " + event)); } com.android.bluetooth.a2dp.A2dpService service = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); if (service != null) { service.messageFromNative(event); } else { android.util.Log.w(com.android.bluetooth.a2dp.A2dpNativeInterface.TAG, "onConnectionStateChanged ignored: service not available"); } }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder result = new java.lang.StringBuilder(); result.append(("StackEvent {type:" + (com.android.bluetooth.a2dp.StackEvent.eventTypeToString(type)))); result.append((", value1:" + (valueInt))); result.append(((", device:" + (device)) + "}")); return result.toString(); }
private static java.lang.String eventTypeToString(int type) { switch (type) { case com.android.bluetooth.a2dp.StackEvent.EVENT_TYPE_NONE : return "EVENT_TYPE_NONE"; case com.android.bluetooth.a2dp.StackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED : return "EVENT_TYPE_CONNECTION_STATE_CHANGED"; case com.android.bluetooth.a2dp.StackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED : return "EVENT_TYPE_AUDIO_STATE_CHANGED"; default : return "EVENT_TYPE_UNKNOWN:" + type; } }
void destroyLocked() { if (com.android.server.autofill.Helper.sVerbose) android.util.Slog.v(com.android.server.autofill.AutofillManagerServiceImpl.TAG, "destroyLocked()"); final int numSessions = mSessions.size(); final android.util.ArraySet<com.android.server.autofill.RemoteFillService> remoteFillServices = new android.util.ArraySet(numSessions); for (int i = 0; i < numSessions; i++) { final com.android.server.autofill.RemoteFillService remoteFillService = mSessions.valueAt(i).destroyLocked(); if (remoteFillService != null) { remoteFillServices.add(remoteFillService); } } mSessions.clear(); for (int i = 0; i < (remoteFillServices.size()); i++) { remoteFillServices.valueAt(i).destroy(); } sendStateToClients(true); if ((mClients) != null) { mClients.kill(); } }
public int getMax() { return mMax; }
@org.junit.Test public void testSocketResourceTrackerLimitation() throws java.lang.Exception { java.util.List<android.net.IpSecUdpEncapResponse> openUdpEncapSockets = new java.util.ArrayList<android.net.IpSecUdpEncapResponse>(); for (int i = 0; i < (com.android.server.IpSecServiceTest.MAX_NUM_ENCAP_SOCKETS); i++) { android.net.IpSecUdpEncapResponse newUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(newUdpEncapSocket); assertEquals(IpSecManager.Status.OK, newUdpEncapSocket.status); openUdpEncapSockets.add(newUdpEncapSocket); } android.net.IpSecUdpEncapResponse extraUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(extraUdpEncapSocket); assertEquals(IpSecManager.Status.RESOURCE_UNAVAILABLE, extraUdpEncapSocket.status); mIpSecService.closeUdpEncapsulationSocket(openUdpEncapSockets.get(0).resourceId); openUdpEncapSockets.get(0).fileDescriptor.close(); openUdpEncapSockets.remove(0); extraUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(extraUdpEncapSocket); assertEquals(IpSecManager.Status.OK, extraUdpEncapSocket.status); openUdpEncapSockets.add(extraUdpEncapSocket); while (!(openUdpEncapSockets.isEmpty())) { mIpSecService.closeUdpEncapsulationSocket(openUdpEncapSockets.get(0).resourceId); openUdpEncapSockets.get(0).fileDescriptor.close(); openUdpEncapSockets.remove(0); } }
@org.junit.Test public void testCreateTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = buildIpSecConfig(0); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceTest.DROID_SPI), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceTest.CRYPT_KEY), anyInt(), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceTest.DROID_SPI2), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceTest.CRYPT_KEY), anyInt(), anyInt(), anyInt(), anyInt()); }
public com.android.server.IpSecService.ResourceTracker getSocketRsrTrackerByUid(int uid) { return mUserQuotaTracker.getUserRecord(uid).socket; }
private void createNotification(android.content.Context context) { final android.content.res.Resources resources = context.getResources(); android.app.NotificationChannel notificationChannel = new android.app.NotificationChannel(com.android.settings.sim.SimSelectNotification.SIM_SELECT_NOTIFICATION_CHANNEL, resources.getString(R.string.sim_selection_channel_title), android.app.NotificationManager.IMPORTANCE_HIGH); android.support.v4.app.NotificationCompat.Builder builder = new android.support.v4.app.NotificationCompat.Builder(context, com.android.settings.sim.SimSelectNotification.SIM_SELECT_NOTIFICATION_CHANNEL).setSmallIcon(R.drawable.ic_sim_card_alert_white_48dp).setColor(context.getColor(R.color.sim_noitification)).setContentTitle(resources.getString(R.string.sim_notification_title)).setContentText(resources.getString(R.string.sim_notification_summary)); android.content.Intent resultIntent = new android.content.Intent(context, com.android.settings.Settings.SimSettingsActivity.class); resultIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); android.app.PendingIntent resultPendingIntent = android.app.PendingIntent.getActivity(context, 0, resultIntent, PendingIntent.FLAG_CANCEL_CURRENT); builder.setContentIntent(resultPendingIntent); android.app.NotificationManager notificationManager = ((android.app.NotificationManager) (context.getSystemService(Context.NOTIFICATION_SERVICE))); notificationManager.createNotificationChannel(notificationChannel); notificationManager.notify(com.android.settings.sim.SimSelectNotification.NOTIFICATION_ID, builder.build()); }
private org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket makeCommand(byte[] test_values) { org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket packet = new org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket(JDWPCommands.DDMCommandSet.CommandSetID, JDWPCommands.DDMCommandSet.ChunkCommand); packet.setNextValueAsInt(DDMDebuggee.DDM_TEST_TYPE); packet.setNextValueAsInt(test_values.length); for (byte b : test_values) { packet.setNextValueAsByte(b); } return packet; }
@java.lang.Override public void handoverTo(java.lang.String callId, android.telecom.PhoneAccountHandle destAcct, int videoState, android.os.Bundle extras) { try { android.telecom.Log.startSession("ICA.hT", mOwnerComponentName); long token = android.os.Binder.clearCallingIdentity(); try { synchronized(mLock) { com.android.server.telecom.Call call = mCallIdMapper.getCall(callId); if (call != null) { call.handoverTo(destAcct, videoState, extras); } else { android.telecom.Log.w(this, "sendCallEvent, unknown call id: %s", callId); } } } finally { android.os.Binder.restoreCallingIdentity(token); } } finally { android.telecom.Log.endSession(); } }
private void checkUnconnectedUdp(android.net.IpSecTransform transform, java.net.InetAddress local) throws java.lang.Exception { java.net.DatagramSocket localSocket = new java.net.DatagramSocket(); localSocket.setSoTimeout(500); android.os.ParcelFileDescriptor pin = android.os.ParcelFileDescriptor.fromDatagramSocket(localSocket); int localPort = localSocket.getLocalPort(); java.io.FileDescriptor udpSocket = pin.getFileDescriptor(); mISM.applyTransportModeTransform(udpSocket, transform); byte[] data = new java.lang.String(("Best test data ever! Port: " + localPort)).getBytes("UTF-8"); byte[] in = new byte[data.length]; android.system.Os.sendto(udpSocket, data, 0, data.length, 0, local, localPort); android.system.Os.read(udpSocket, in, 0, in.length); assertTrue("Encapsulated data did not match.", java.util.Arrays.equals(data, in)); mISM.removeTransportModeTransform(udpSocket, transform); android.system.Os.close(udpSocket); }
public android.bluetooth.BluetoothHidDeviceAppQosSettings build() { return new android.bluetooth.BluetoothHidDeviceAppQosSettings(this); }
private static java.util.List<com.google.currysrc.api.process.Rule> createTransformRules() { java.util.List<com.google.currysrc.api.process.Rule> rules = com.google.common.collect.Lists.newArrayList(Icu4jTransform.Icu4jRules.getRepackagingRules()); rules.add(com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule(new com.google.currysrc.processors.ReplaceTextCommentScanner(Icu4jTransform.ORIGINAL_ICU_PACKAGE, Icu4jTransform.ANDROID_ICU_PACKAGE))); rules.add(com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule(new com.android.icu4j.srcgen.TranslateJcite.BeginEndTagsHandler())); rules.add(com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule(new com.android.icu4j.srcgen.ShardingAnnotator())); rules.add(com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule(new com.google.currysrc.processors.ReplaceImports(java.util.Collections.singletonMap("android.icu.text.DecimalFormat_ICU58", "android.icu.text.DecimalFormat_ICU58_Android")))); return rules; }
private android.icu.dev.test.format.DecimalFormat_ICU58 createDecimalFormat(android.icu.dev.test.format.DataDrivenNumberFormatTestData tuple) { android.icu.dev.test.format.DecimalFormat_ICU58 fmt = new android.icu.dev.test.format.DecimalFormat_ICU58(((tuple.pattern) == null ? "0" : tuple.pattern), new android.icu.text.DecimalFormatSymbols(((tuple.locale) == null ? android.icu.dev.test.format.NumberFormatDataDrivenTest.EN : tuple.locale))); adjustDecimalFormat(tuple, fmt); return fmt; }
@java.lang.Override public java.lang.String format(android.icu.dev.test.format.DataDrivenNumberFormatTestData tuple) { android.icu.dev.test.format.DecimalFormat_ICU58 fmt = createDecimalFormat(tuple); java.lang.String actual = fmt.format(android.icu.dev.test.format.NumberFormatDataDrivenTest.toNumber(tuple.format)); java.lang.String expected = tuple.output; if (!(expected.equals(actual))) { return (("Expected " + expected) + ", got ") + actual; } return null; }
@java.lang.Override public java.lang.String parse(android.icu.dev.test.format.DataDrivenNumberFormatTestData tuple) { android.icu.dev.test.format.DecimalFormat_ICU58 fmt = createDecimalFormat(tuple); java.text.ParsePosition ppos = new java.text.ParsePosition(0); java.lang.Number actual = fmt.parse(tuple.parse, ppos); if ((ppos.getIndex()) == 0) { return (("Parse failed; got " + actual) + ", but expected ") + (tuple.output); } if (tuple.output.equals("fail")) { return null; } java.lang.Number expected = android.icu.dev.test.format.NumberFormatDataDrivenTest.toNumber(tuple.output); if ((((expected.doubleValue()) != (actual.doubleValue())) && (!(java.lang.Double.isNaN(expected.doubleValue())))) && (!(java.lang.Double.isNaN(expected.doubleValue())))) { return (("Expected: " + expected) + ", got: ") + actual; } return null; }
@java.lang.Override public java.lang.String parseCurrency(android.icu.dev.test.format.DataDrivenNumberFormatTestData tuple) { android.icu.dev.test.format.DecimalFormat_ICU58 fmt = createDecimalFormat(tuple); java.text.ParsePosition ppos = new java.text.ParsePosition(0); CurrencyAmount currAmt = fmt.parseCurrency(tuple.parse, ppos); if ((ppos.getIndex()) == 0) { return (("Parse failed; got " + currAmt) + ", but expected ") + (tuple.output); } if (tuple.output.equals("fail")) { return null; } java.lang.Number expected = android.icu.dev.test.format.NumberFormatDataDrivenTest.toNumber(tuple.output); java.lang.Number actual = currAmt.getNumber(); if ((((expected.doubleValue()) != (actual.doubleValue())) && (!(java.lang.Double.isNaN(expected.doubleValue())))) && (!(java.lang.Double.isNaN(expected.doubleValue())))) { return (("Expected: " + expected) + ", got: ") + actual; } if (!(tuple.outputCurrency.equals(currAmt.getCurrency().toString()))) { return (("Expected currency: " + (tuple.outputCurrency)) + ", got: ") + (currAmt.getCurrency()); } return null; }
@java.lang.Override public java.lang.String toPattern(android.icu.dev.test.format.DataDrivenNumberFormatTestData tuple) { android.icu.dev.test.format.DecimalFormat_ICU58 fmt = createDecimalFormat(tuple); java.lang.StringBuilder result = new java.lang.StringBuilder(); if ((tuple.toPattern) != null) { java.lang.String expected = tuple.toPattern; java.lang.String actual = fmt.toPattern(); if (!(expected.equals(actual))) { result.append(((("Expected toPattern=" + expected) + ", got ") + actual)); } } if ((tuple.toLocalizedPattern) != null) { java.lang.String expected = tuple.toLocalizedPattern; java.lang.String actual = fmt.toLocalizedPattern(); if (!(expected.equals(actual))) { result.append(((("Expected toLocalizedPattern=" + expected) + ", got ") + actual)); } } return (result.length()) == 0 ? null : result.toString(); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testHexIccIdSuffix() throws java.lang.Exception { doReturn(null).when(mSubscriptionController).getSubInfoUsingSlotIndexWithCheck(anyInt(), anyBoolean(), anyString()); verify(mSubscriptionController, times(0)).clearSubInfo(); doReturn("8901260420000000000f").when(mIccRecord).getFullIccId(); android.content.Intent mIntent = new android.content.Intent(com.android.internal.telephony.uicc.IccCardProxy.ACTION_INTERNAL_SIM_STATE_CHANGED); mIntent.putExtra(IccCardConstants.INTENT_KEY_ICC_STATE, IccCardConstants.INTENT_VALUE_ICC_LOADED); mIntent.putExtra(PhoneConstants.PHONE_KEY, com.android.internal.telephony.SubscriptionInfoUpdaterTest.FAKE_SUB_ID_1); mContext.sendBroadcast(mIntent); com.android.internal.telephony.TelephonyTestUtils.waitForMs(100); android.telephony.SubscriptionManager mSubscriptionManager = android.telephony.SubscriptionManager.from(mContext); verify(mSubscriptionController, times(1)).notifySubscriptionInfoChanged(); verify(mSubscriptionManager, times(1)).addSubscriptionInfoRecord(eq("8901260420000000000"), eq(com.android.internal.telephony.SubscriptionInfoUpdaterTest.FAKE_SUB_ID_1)); verify(mSubscriptionController, times(0)).clearSubInfo(); }
private java.lang.String stripIccIdSuffix(java.lang.String hexIccId) { if (hexIccId == null) return null; char[] arr = hexIccId.toCharArray(); for (int i = arr.length; i > 0; i--) { if (!("f".equalsIgnoreCase(java.lang.String.valueOf(arr[(i - 1)])))) { return hexIccId.substring(0, i); } } return com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM; }
private void onNoiceReductionEnable(boolean enable, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_NOICE_REDUCTION); event.valueInt = (enable) ? 1 : 0; event.device = getDevice(address); sendMessageToService(event); }
private void sendMessageToService(com.android.bluetooth.hfp.HeadsetStackEvent event) { com.android.bluetooth.hfp.HeadsetService service = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); if (service != null) { service.messageFromNative(event); } else { android.util.Log.w(com.android.bluetooth.hfp.HeadsetNativeInterface.TAG, ("Event ignored, service not available: " + event)); } }
private void onAnswerCall(byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_ANSWER_CALL); event.device = getDevice(address); sendMessageToService(event); }
public static com.android.bluetooth.hfp.HeadsetNativeInterface getInstance() { return com.android.bluetooth.hfp.HeadsetNativeInterface.INSTANCE; }
void onConnectionStateChanged(int state, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED); event.valueInt = state; event.device = getDevice(address); sendMessageToService(event); }
private void onAtClcc(byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_AT_CLCC); event.device = getDevice(address); sendMessageToService(event); }
boolean bindResponse(android.bluetooth.BluetoothDevice device, int indId, boolean indStatus) { return bindResponseNative(indId, indStatus, com.android.bluetooth.Utils.getByteAddress(device)); }
boolean setScoAllowed(boolean value) { return setScoAllowedNative(value); }
private void onDialCall(java.lang.String number, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_DIAL_CALL); event.valueString = number; event.device = getDevice(address); sendMessageToService(event); }
private void onSendDtmf(int dtmf, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_SEND_DTMF); event.valueInt = dtmf; event.device = getDevice(address); sendMessageToService(event); }
boolean connectHfp(android.bluetooth.BluetoothDevice device) { return connectHfpNative(com.android.bluetooth.Utils.getByteAddress(device)); }
boolean setVolume(android.bluetooth.BluetoothDevice device, int volumeType, int volume) { return setVolumeNative(volumeType, volume, com.android.bluetooth.Utils.getByteAddress(device)); }
boolean connectAudio(android.bluetooth.BluetoothDevice device) { return connectAudioNative(com.android.bluetooth.Utils.getByteAddress(device)); }
boolean notifyDeviceStatus(com.android.bluetooth.hfp.HeadsetDeviceState deviceState) { return notifyDeviceStatusNative(deviceState.mService, deviceState.mRoam, deviceState.mSignal, deviceState.mBatteryCharge); }
private void onAudioStateChanged(int state, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED); event.valueInt = state; event.device = getDevice(address); sendMessageToService(event); }
boolean clccResponse(android.bluetooth.BluetoothDevice device, int index, int dir, int status, int mode, boolean mpty, java.lang.String number, int type) { return clccResponseNative(index, dir, status, mode, mpty, number, type, com.android.bluetooth.Utils.getByteAddress(device)); }
boolean phoneStateChange(com.android.bluetooth.hfp.HeadsetCallState callState) { return phoneStateChangeNative(callState.mNumActive, callState.mNumHeld, callState.mCallState, callState.mNumber, callState.mType); }
private void onUnknownAt(java.lang.String atString, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_UNKNOWN_AT); event.valueString = atString; event.device = getDevice(address); sendMessageToService(event); }
private void onHangupCall(byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_HANGUP_CALL); event.device = getDevice(address); sendMessageToService(event); }
boolean disconnectHfp(android.bluetooth.BluetoothDevice device) { return disconnectHfpNative(com.android.bluetooth.Utils.getByteAddress(device)); }
private void onAtChld(int chld, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_AT_CHLD); event.valueInt = chld; event.device = getDevice(address); sendMessageToService(event); }
boolean atResponseCode(android.bluetooth.BluetoothDevice device, int responseCode, int errorCode) { return atResponseCodeNative(responseCode, errorCode, com.android.bluetooth.Utils.getByteAddress(device)); }
boolean cindResponse(android.bluetooth.BluetoothDevice device, int service, int numActive, int numHeld, int callState, int signal, int roam, int batteryCharge) { return cindResponseNative(service, numActive, numHeld, callState, signal, roam, batteryCharge, com.android.bluetooth.Utils.getByteAddress(device)); }
com.android.bluetooth.hfp.HeadsetNativeInterface getNativeInterface() { return mNativeInterface; }
static com.android.bluetooth.hfp.HeadsetStateMachine make(com.android.bluetooth.hfp.HeadsetService service) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "make"); com.android.bluetooth.hfp.HeadsetStateMachine hssm = new com.android.bluetooth.hfp.HeadsetStateMachine(service, com.android.bluetooth.hfp.HeadsetNativeInterface.getInstance()); hssm.start(); return hssm; }
private void onKeyPressed(byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_KEY_PRESSED); event.device = getDevice(address); sendMessageToService(event); }
void cleanup() { cleanupNative(); }
boolean disconnectAudio(android.bluetooth.BluetoothDevice device) { return disconnectAudioNative(com.android.bluetooth.Utils.getByteAddress(device)); }
private void onATBiev(int indId, int indValue, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BIEV); event.valueInt = indId; event.valueInt2 = indValue; event.device = getDevice(address); sendMessageToService(event); }
private void onAtCops(byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_AT_COPS); event.device = getDevice(address); sendMessageToService(event); }
private void onVolumeChanged(int type, int volume, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VOLUME_CHANGED); event.valueInt = type; event.valueInt2 = volume; event.device = getDevice(address); sendMessageToService(event); }
private void onVrStateChanged(int state, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED); event.valueInt = state; event.device = getDevice(address); sendMessageToService(event); }
private void onAtCnum(byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_SUBSCRIBER_NUMBER_REQUEST); event.device = getDevice(address); sendMessageToService(event); }
private void onATBind(java.lang.String atString, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BIND); event.valueString = atString; event.device = getDevice(address); sendMessageToService(event); }
boolean configureWBS(android.bluetooth.BluetoothDevice device, int codecConfig) { return configureWBSNative(com.android.bluetooth.Utils.getByteAddress(device), codecConfig); }
boolean copsResponse(android.bluetooth.BluetoothDevice device, java.lang.String operatorName) { return copsResponseNative(operatorName, com.android.bluetooth.Utils.getByteAddress(device)); }
boolean atResponseString(android.bluetooth.BluetoothDevice device, java.lang.String responseString) { return atResponseStringNative(responseString, com.android.bluetooth.Utils.getByteAddress(device)); }
private void onWBS(int codec, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_WBS); event.valueInt = codec; event.device = getDevice(address); sendMessageToService(event); }
boolean startVoiceRecognition(android.bluetooth.BluetoothDevice device) { return startVoiceRecognitionNative(com.android.bluetooth.Utils.getByteAddress(device)); }
private void onAtCind(byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_AT_CIND); event.device = getDevice(address); sendMessageToService(event); }
void init(int maxHfClients, boolean inbandRingEnable) { initializeNative(maxHfClients, inbandRingEnable); }
boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice device) { return stopVoiceRecognitionNative(com.android.bluetooth.Utils.getByteAddress(device)); }
@com.android.internal.annotations.VisibleForTesting public void playDtmfTone(char digit) { if ((mConnectionService) == null) { android.telecom.Log.w(this, "playDtmfTone() request on a call without a connection service."); } else { android.telecom.Log.i(this, "Send playDtmfTone to connection service for call %s", this); mConnectionService.playDtmfTone(this, digit); android.telecom.Log.addEvent(this, LogUtils.Events.START_DTMF, android.telecom.Log.pii(digit)); } }
@java.lang.Override protected android.app.Dialog onCreateDialog(int id, android.os.Bundle bundle) { if (id == (R.id.dialog_cancel_confirmation)) { final java.lang.String message; if ((mType) == (VCardService.TYPE_IMPORT)) { message = getString(R.string.stop_import_dialog_title_txt, mDisplayName); } else { message = getString(R.string.stop_export_dialog_title_txt, mDisplayName); } final android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(this).setMessage(message).setPositiveButton(R.string.stop_import_export_dialog_stop_txt, new com.android.contacts.vcard.CancelActivity.RequestCancelListener()).setOnCancelListener(mCancelListener).setNegativeButton(R.string.stop_import_export_dialog_continue_txt, mCancelListener); return builder.create(); } else if (id == (R.id.dialog_cancel_failed)) { final android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(this).setTitle(R.string.cancel_vcard_import_or_export_failed).setIconAttribute(android.R.attr.alertDialogIcon).setMessage(getString(R.string.fail_reason_unknown)).setOnCancelListener(mCancelListener).setPositiveButton(android.R.string.ok, mCancelListener); return builder.create(); } else { android.util.Log.w(LOG_TAG, ("Unknown dialog id: " + id)); return super.onCreateDialog(id, bundle); } }
@com.googlecode.android_scripting.rpc.Rpc(description = "Returns the service state for specified subscription ID") public java.lang.String telephonyGetServiceStateForSubscription(@com.googlecode.android_scripting.rpc.RpcParameter(name = "subId") java.lang.Integer subId) { return mTelephonyManager.getServiceStateForSubscriber(subId); }
public static void HandlePublish(int type, byte[] data) { art.Test1940.CURRENT_HANDLER.HandleChunk(type, data); }
@com.android.internal.annotations.VisibleForTesting public com.android.internal.telephony.ims.ImsServiceController getImsServiceControllerAndListen(int slotId, int feature, com.android.ims.internal.IImsServiceFeatureListener callback) { if ((slotId < 0) || (slotId >= (mNumSlots))) { return null; } com.android.internal.telephony.ims.ImsServiceController controller; synchronized(mBoundServicesLock) { android.util.SparseArray<com.android.internal.telephony.ims.ImsServiceController> services = mBoundImsServicesByFeature.get(slotId); if (services == null) { return null; } controller = services.get(feature); } if (controller != null) { controller.addImsServiceFeatureListener(callback); return controller; } return null; }
public com.android.ims.internal.IImsMMTelFeature getMMTelFeatureAndListen(int slotId, com.android.ims.internal.IImsServiceFeatureListener callback) { enforceModifyPermission(); return com.android.internal.telephony.PhoneFactory.getImsResolver().getMMTelFeatureAndListen(slotId, callback); }
public com.android.ims.internal.IImsMMTelFeature getEmergencyMMTelFeatureAndListen(int slotId, com.android.ims.internal.IImsServiceFeatureListener callback) { com.android.internal.telephony.ims.ImsServiceController controller = getImsServiceControllerAndListen(slotId, ImsFeature.EMERGENCY_MMTEL, callback); return controller != null ? controller.getEmergencyMMTelFeature(slotId) : null; }
public com.android.ims.internal.IImsMMTelFeature getImsMMTelFeatureAndListen(int slotIndex, com.android.ims.internal.IImsServiceFeatureListener callback) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony != null) { return telephony.getMMTelFeatureAndListen(slotIndex, callback); } } catch (android.os.RemoteException e) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ("getImsMMTelFeatureAndListen, RemoteException: " + (e.getMessage()))); } return null; }
public com.android.ims.internal.IImsRcsFeature getRcsFeatureAndListen(int slotId, com.android.ims.internal.IImsServiceFeatureListener callback) { enforceModifyPermission(); return com.android.internal.telephony.PhoneFactory.getImsResolver().getRcsFeatureAndListen(slotId, callback); }
public com.android.ims.internal.IImsMMTelFeature getEmergencyMMTelFeatureAndListen(int slotId, com.android.ims.internal.IImsServiceFeatureListener callback) { enforceModifyPermission(); return com.android.internal.telephony.PhoneFactory.getImsResolver().getEmergencyMMTelFeatureAndListen(slotId, callback); }
public com.android.ims.internal.IImsMMTelFeature getMMTelFeatureAndListen(int slotId, com.android.ims.internal.IImsServiceFeatureListener callback) { com.android.internal.telephony.ims.ImsServiceController controller = getImsServiceControllerAndListen(slotId, ImsFeature.MMTEL, callback); return controller != null ? controller.getMMTelFeature(slotId) : null; }
public com.android.ims.internal.IImsMMTelFeature getImsEmergencyMMTelFeatureAndListen(int slotIndex, com.android.ims.internal.IImsServiceFeatureListener callback) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony != null) { return telephony.getEmergencyMMTelFeatureAndListen(slotIndex, callback); } } catch (android.os.RemoteException e) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ("getImsEmergencyMMTelFeatureAndListen, RemoteException: " + (e.getMessage()))); } return null; }
public com.android.ims.internal.IImsRcsFeature getImsRcsFeatureAndListen(int slotIndex, com.android.ims.internal.IImsServiceFeatureListener callback) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony != null) { return telephony.getRcsFeatureAndListen(slotIndex, callback); } } catch (android.os.RemoteException e) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ("getImsRcsFeatureAndListen, RemoteException: " + (e.getMessage()))); } return null; }
public com.android.ims.internal.IImsRcsFeature getRcsFeatureAndListen(int slotId, com.android.ims.internal.IImsServiceFeatureListener callback) { com.android.internal.telephony.ims.ImsServiceController controller = getImsServiceControllerAndListen(slotId, ImsFeature.RCS, callback); return controller != null ? controller.getRcsFeature(slotId) : null; }
@org.junit.Test public void testConvertHalCellInfoList_1_2ForWcdmaWithEmptyOpeartorInfo() throws java.lang.Exception { java.util.ArrayList<android.telephony.CellInfo> ret = getCellInfoListForWcdma(com.android.internal.telephony.RILTest.MCC_STR, com.android.internal.telephony.RILTest.MNC_STR, com.android.internal.telephony.RILTest.EMPTY_ALPHA_LONG, com.android.internal.telephony.RILTest.EMPTY_ALPHA_SHORT); junit.framework.Assert.assertEquals(1, ret.size()); android.telephony.CellInfoWcdma cellInfoWcdma = ((android.telephony.CellInfoWcdma) (ret.get(0))); android.telephony.CellInfoWcdma expected = new android.telephony.CellInfoWcdma(); expected.setRegistered(false); expected.setTimeStamp(com.android.internal.telephony.RILTest.TIMESTAMP); expected.setTimeStampType(com.android.internal.telephony.RILTest.RIL_TIMESTAMP_TYPE_OEM_RIL); android.telephony.CellIdentityWcdma ci = new android.telephony.CellIdentityWcdma(com.android.internal.telephony.RILTest.LAC, com.android.internal.telephony.RILTest.CID, com.android.internal.telephony.RILTest.PSC, com.android.internal.telephony.RILTest.UARFCN, com.android.internal.telephony.RILTest.MCC_STR, com.android.internal.telephony.RILTest.MNC_STR, com.android.internal.telephony.RILTest.EMPTY_ALPHA_LONG, com.android.internal.telephony.RILTest.EMPTY_ALPHA_SHORT); android.telephony.CellSignalStrengthWcdma cs = new android.telephony.CellSignalStrengthWcdma(com.android.internal.telephony.RILTest.SIGNAL_STRENGTH, com.android.internal.telephony.RILTest.BIT_ERROR_RATE); expected.setCellIdentity(ci); expected.setCellSignalStrength(cs); junit.framework.Assert.assertEquals(expected, cellInfoWcdma); }
public java.lang.String StripTelephoneNumber(java.lang.String vCard) { java.lang.String[] attr = vCard.split(java.lang.System.getProperty("line.separator")); java.lang.String Vcard = ""; for (int i = 0; i < (attr.length); i++) { if (attr[i].startsWith("TEL")) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("vCard line: " + (attr[i]))); java.lang.String vTag = attr[i].substring(0, ((attr[i].lastIndexOf(":")) + 1)); java.lang.String vTel = attr[i].substring(((attr[i].lastIndexOf(":")) + 1), attr[i].length()).replaceAll("[^0-9.]", ""); android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ((("vCard Tel Tag:" + vTag) + ", Number:") + vTel)); attr[i] = new java.lang.StringBuilder().append(vTag).append(vTel).toString(); } } for (int i = 0; i < (attr.length); i++) { if (!(attr[i].equals(""))) { Vcard = Vcard.concat(((attr[i]) + "\n")); } } if (com.android.bluetooth.pbap.BluetoothPbapVcardManager.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("Vcard with stripped telephone no.: " + Vcard)); return Vcard; }
public static boolean mvnoMatches(com.android.internal.telephony.uicc.IccRecords r, java.lang.String mvnoType, java.lang.String mvnoMatchData) { if (mvnoType.equalsIgnoreCase("spn")) { if (((r.getServiceProviderName()) != null) && (r.getServiceProviderName().equalsIgnoreCase(mvnoMatchData))) { return true; } } else if (mvnoType.equalsIgnoreCase("imsi")) { java.lang.String imsiSIM = r.getIMSI(); if ((imsiSIM != null) && (com.android.internal.telephony.dataconnection.ApnSetting.imsiMatches(mvnoMatchData, imsiSIM))) { return true; } } else if (mvnoType.equalsIgnoreCase("gid")) { java.lang.String gid1 = r.getGid1(); int mvno_match_data_length = mvnoMatchData.length(); if (((gid1 != null) && ((gid1.length()) >= mvno_match_data_length)) && (gid1.substring(0, mvno_match_data_length).equalsIgnoreCase(mvnoMatchData))) { return true; } } else if (mvnoType.equalsIgnoreCase("iccid")) { java.lang.String iccId = r.getIccId(); if (iccId != null) { java.lang.String[] mvnoIccidList = mvnoMatchData.split(","); for (java.lang.String mvnoIccid : mvnoIccidList) { android.util.Log.d(com.android.internal.telephony.dataconnection.ApnSetting.TAG, ("mvnoIccid: " + mvnoIccid)); if (iccId.startsWith(mvnoIccid)) { android.util.Log.d(com.android.internal.telephony.dataconnection.ApnSetting.TAG, "mvno icc id match found"); return true; } } } } return false; }
public void testDayPeriodFormat() throws java.lang.Exception { for (java.util.Locale locale : new java.util.Locale[]{ java.util.Locale.US, java.util.Locale.FRANCE }) { assertDayPeriodFormat("HHb", "08", "08", locale); assertDayPeriodFormat("HHbb", "08", "08", locale); assertDayPeriodFormat("HHbbb", "08", "08", locale); assertDayPeriodFormat("HHbbbb", "08", "08", locale); assertDayPeriodFormat("HHbbbbb", "08", "08", locale); assertDayPeriodFormat("HHB", "08", "08", locale); assertDayPeriodFormat("HHBB", "08", "08", locale); assertDayPeriodFormat("HHBBB", "08", "08", locale); assertDayPeriodFormat("HHBBBB", "08", "08", locale); assertDayPeriodFormat("HHBBBBB", "08", "08", locale); } }
private void assertDayPeriodFormat(java.lang.String pattern, java.lang.String hour, java.lang.String expected, java.util.Locale locale) throws java.text.ParseException { java.text.SimpleDateFormat simpleDateFormat = new java.text.SimpleDateFormat(pattern, locale); simpleDateFormat.setTimeZone(java.util.TimeZone.getTimeZone("UTC")); assertEquals(expected, simpleDateFormat.format(libcore.java.text.SimpleDateFormatTest.createDateFromHour(hour))); }
private static java.util.Date createDateFromHour(java.lang.String hour) throws java.text.ParseException { java.text.SimpleDateFormat isoFormat = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); isoFormat.setTimeZone(java.util.TimeZone.getTimeZone("UTC")); return isoFormat.parse((("2017-01-01T" + hour) + ":00:00")); }
private boolean isRequestedEvent(int event) { for (int slot = com.android.internal.telephony.PhoneConstants.SIM_ID_1; slot < (mSimCount); slot++) { if ((mStkContext[slot].mSetupEventListSettings) != null) { if (findEvent(event, mStkContext[slot].mSetupEventListSettings.eventList)) { return true; } } } return false; }
private boolean isUnregisterableEvent(int event, int slotId) { for (int slot = com.android.internal.telephony.PhoneConstants.SIM_ID_1; slot < (mSimCount); slot++) { if (slot != slotId) { if ((mStkContext[slot].mSetupEventListSettings) != null) { if (findEvent(event, mStkContext[slot].mSetupEventListSettings.eventList)) { return false; } } } } return true; }
@java.lang.Override public void onCreate() { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, "onCreate()+"); int i = 0; mContext = getBaseContext(); mSimCount = android.telephony.TelephonyManager.from(mContext).getSimCount(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("simCount: " + (mSimCount))); mStkService = new com.android.internal.telephony.cat.AppInterface[mSimCount]; mStkContext = new com.android.stk.StkAppService.StkContext[mSimCount]; mPowerManager = ((android.os.PowerManager) (getSystemService(Context.POWER_SERVICE))); for (i = 0; i < (mSimCount); i++) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("slotId: " + i)); mStkService[i] = com.android.internal.telephony.cat.CatService.getInstance(i); mStkContext[i] = new com.android.stk.StkAppService.StkContext(); mStkContext[i].mSlotId = i; mStkContext[i].mCmdsQ = new java.util.LinkedList<com.android.stk.StkAppService.DelayedCmd>(); } java.lang.Thread serviceThread = new java.lang.Thread(null, this, "Stk App Service"); serviceThread.start(); mNotificationManager = ((android.app.NotificationManager) (mContext.getSystemService(Context.NOTIFICATION_SERVICE))); com.android.stk.StkAppService.sInstance = this; }
@java.lang.Override public void onDestroy() { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, "onDestroy()"); mPowerManager = null; waitForLooper(); mServiceLooper.quit(); }
private void unregisterProcessObserver(com.android.internal.telephony.cat.AppInterface.CommandType command, int slotId) { switch (command) { case SET_UP_EVENT_LIST : if (((mStkContext[slotId].mIdleModeTextCmd) != null) && (!(mStkContext[slotId].mIdleModeTextVisible))) { return; } break; case SET_UP_IDLE_MODE_TEXT : if (isRequestedEvent(com.android.stk.IDLE_SCREEN_AVAILABLE_EVENT)) { return; } break; } unregisterProcessObserver(); }
private void unregisterProcessObserver() { if ((mProcessObserver) != null) { try { android.app.ActivityManagerNative.getDefault().unregisterProcessObserver(mProcessObserver); mProcessObserver = null; } catch (android.os.RemoteException e) { com.android.internal.telephony.cat.CatLog.d(this, "Failed to unregister the process observer"); } } }
private void replaceEventList(int slotId) { if ((mStkContext[slotId].mSetupEventListSettings) != null) { for (int current : mStkContext[slotId].mSetupEventListSettings.eventList) { if (current != (com.android.stk.StkAppService.INVALID_SETUP_EVENT)) { if (((mStkContext[slotId].mCurrentCmd.getSetEventList()) == null) || (!(findEvent(current, mStkContext[slotId].mCurrentCmd.getSetEventList().eventList)))) { if (isUnregisterableEvent(current, slotId)) { unregisterEvent(current, slotId); } } } } } mStkContext[slotId].mSetupEventListSettings = mStkContext[slotId].mCurrentCmd.getSetEventList(); mStkContext[slotId].mCurrentSetupEventCmd = mStkContext[slotId].mCurrentCmd; mStkContext[slotId].mCurrentCmd = mStkContext[slotId].mMainCmd; registerEvents(slotId); }
public android.net.NetworkRequest createFromParcel(android.os.Parcel in) { final android.net.NetworkCapabilities nc; if ((in.readInt()) != 0) { nc = NetworkCapabilities.CREATOR.createFromParcel(in); } else { nc = null; } int legacyType = in.readInt(); int requestId = in.readInt(); android.net.NetworkRequest.Type type = android.net.NetworkRequest.Type.valueOf(in.readString()); android.net.NetworkRequest result = new android.net.NetworkRequest(nc, legacyType, requestId, type); return result; }
public void writeToParcel(android.os.Parcel dest, int flags) { if ((networkCapabilities) != null) { dest.writeInt(1); networkCapabilities.writeToParcel(dest, flags); } else { dest.writeInt(0); } dest.writeInt(legacyType); dest.writeInt(requestId); dest.writeString(type.name()); }
private com.android.services.telephony.TelephonyConnection createConnectionFor(com.android.internal.telephony.Phone phone, com.android.internal.telephony.Connection originalConnection, boolean isOutgoing, android.telecom.PhoneAccountHandle phoneAccountHandle) { com.android.services.telephony.TelephonyConnection returnConnection = null; int phoneType = phone.getPhoneType(); if (phoneType == (android.telephony.TelephonyManager.PHONE_TYPE_GSM)) { returnConnection = new com.android.services.telephony.GsmConnection(originalConnection); } else if (phoneType == (android.telephony.TelephonyManager.PHONE_TYPE_CDMA)) { boolean allowMute = allowMute(phone); returnConnection = new com.android.services.telephony.CdmaConnection(originalConnection, mEmergencyTonePlayer, allowMute, isOutgoing); } if (returnConnection != null) { returnConnection.addTelephonyConnectionListener(mTelephonyConnectionListener); returnConnection.setVideoPauseSupported(com.android.services.telephony.TelecomAccountRegistry.getInstance(this).isVideoPauseSupported(phoneAccountHandle)); returnConnection.setConferenceSupported(com.android.services.telephony.TelecomAccountRegistry.getInstance(this).isMergeCallSupported(phoneAccountHandle)); returnConnection.setManageConferenceSupported(((!(returnConnection.isImsConnection())) || (com.android.services.telephony.TelecomAccountRegistry.getInstance(this).isManageImsConferenceCallSupported(phoneAccountHandle)))); } return returnConnection; }
public boolean isManageConferenceCallSupported() { return mIsManageConferenceCallSupported; }
private void updateManageConference() { boolean couldManageConference = can(Connection.CAPABILITY_MANAGE_CONFERENCE); boolean canManageConference = (((mConferenceHost) != null) && (mConferenceHost.isManageConferenceCallSupported())) && (!(mConferenceParticipantConnections.isEmpty())); android.telecom.Log.v(this, "updateManageConference was :%s is:%s", (couldManageConference ? "Y" : "N"), (canManageConference ? "Y" : "N")); if (couldManageConference != canManageConference) { int capabilities = getConnectionCapabilities(); if (canManageConference) { capabilities |= android.telecom.Connection.CAPABILITY_MANAGE_CONFERENCE; capabilities &= ~(android.telecom.Connection.CAPABILITY_CONFERENCE_HAS_NO_CHILDREN); } else { capabilities &= ~(android.telecom.Connection.CAPABILITY_MANAGE_CONFERENCE); capabilities |= android.telecom.Connection.CAPABILITY_CONFERENCE_HAS_NO_CHILDREN; } setConnectionCapabilities(capabilities); } }
boolean isManageImsConferenceCallSupported(android.telecom.PhoneAccountHandle handle) { for (com.android.services.telephony.TelecomAccountRegistry.AccountEntry entry : mAccounts) { if (entry.getPhoneAccountHandle().equals(handle)) { return entry.isManageImsConferenceCallSupported(); } } return false; }
public void setManageConferenceSupported(boolean isManageConferenceCallSupported) { mIsManageConferenceCallSupported = isManageConferenceCallSupported; }
private void startConference(com.android.services.telephony.TelephonyConnection connection) { if (Log.VERBOSE) { com.android.services.telephony.Log.v(this, "Start new ImsConference - connection: %s", connection); } com.android.services.telephony.TelephonyConnection conferenceHostConnection = connection.cloneConnection(); conferenceHostConnection.setManageConferenceSupported(connection.isManageConferenceCallSupported()); com.android.services.telephony.ImsConference conference = new com.android.services.telephony.ImsConference(mConnectionService, conferenceHostConnection); conference.setState(conferenceHostConnection.getState()); conference.addListener(mConferenceListener); conference.updateConferenceParticipantsAfterCreation(); mConnectionService.addConference(conference); connection.removeConnectionListener(mConnectionListener); connection.clearOriginalConnection(); connection.setDisconnected(new android.telecom.DisconnectCause(android.telecom.DisconnectCause.OTHER)); connection.destroy(); mImsConferences.add(conference); }
private void unregisterReceivers() { try { if ((mObserver) != null) { getContentResolver().unregisterContentObserver(mObserver); mObserver = null; } unregisterReceiver(mBluetoothReceiver); } catch (java.lang.IllegalArgumentException e) { android.util.Log.w(com.android.bluetooth.opp.BluetoothOppService.TAG, ("unregisterReceivers already " + (e.toString()))); } }
void cancelNotifications() { if (com.android.bluetooth.opp.BluetoothOppNotification.V) android.util.Log.v(com.android.bluetooth.opp.BluetoothOppNotification.TAG, "cancelNotifications "); mHandler.removeCallbacksAndMessages(null); mNotificationMgr.cancelAll(); }
private void insertMultipleShare() { int count = mUris.size(); java.lang.Long ts = java.lang.System.currentTimeMillis(); for (int i = 0; i < count; i++) { android.net.Uri fileUri = mUris.get(i); android.content.ContentValues values = new android.content.ContentValues(); values.put(BluetoothShare.URI, fileUri.toString()); android.content.ContentResolver contentResolver = mContext.getContentResolver(); fileUri = com.android.bluetooth.opp.BluetoothOppUtility.originalUri(fileUri); java.lang.String contentType = contentResolver.getType(fileUri); if (com.android.bluetooth.opp.BluetoothOppManager.V) android.util.Log.v(com.android.bluetooth.opp.BluetoothOppManager.TAG, ((("Got mimetype: " + contentType) + " Got uri: ") + fileUri)); if (android.text.TextUtils.isEmpty(contentType)) { contentType = mTypeOfMultipleFiles; } values.put(BluetoothShare.MIMETYPE, contentType); values.put(BluetoothShare.DESTINATION, mRemoteDevice.getAddress()); values.put(BluetoothShare.TIMESTAMP, ts); if (mIsHandoverInitiated) { values.put(BluetoothShare.USER_CONFIRMATION, BluetoothShare.USER_CONFIRMATION_HANDOVER_CONFIRMED); } final android.net.Uri contentUri = mContext.getContentResolver().insert(BluetoothShare.CONTENT_URI, values); if (com.android.bluetooth.opp.BluetoothOppManager.V) android.util.Log.v(com.android.bluetooth.opp.BluetoothOppManager.TAG, ((("Insert contentUri: " + contentUri) + " to device: ") + (getDeviceName(mRemoteDevice)))); } }
public void saveSendingFileInfo(java.lang.String mimeType, java.util.ArrayList<android.net.Uri> uris, boolean isHandover) throws java.lang.IllegalArgumentException { synchronized(this) { mMultipleFlag = true; mMimeTypeOfSendingFiles = mimeType; mUrisOfSendingFiles = new java.util.ArrayList<android.net.Uri>(); mIsHandoverInitiated = isHandover; for (android.net.Uri uri : uris) { com.android.bluetooth.opp.BluetoothOppSendFileInfo sendFileInfo = com.android.bluetooth.opp.BluetoothOppSendFileInfo.generateFileInfo(mContext, uri, mimeType); uri = com.android.bluetooth.opp.BluetoothOppUtility.generateUri(uri, sendFileInfo); mUrisOfSendingFiles.add(uri); com.android.bluetooth.opp.BluetoothOppUtility.putSendFileInfo(uri, sendFileInfo); } storeApplicationData(); } }
public void saveSendingFileInfo(java.lang.String mimeType, java.lang.String uriString, boolean isHandover) throws java.lang.IllegalArgumentException { synchronized(this) { mMultipleFlag = false; mMimeTypeOfSendingFile = mimeType; mIsHandoverInitiated = isHandover; android.net.Uri uri = android.net.Uri.parse(uriString); com.android.bluetooth.opp.BluetoothOppSendFileInfo sendFileInfo = com.android.bluetooth.opp.BluetoothOppSendFileInfo.generateFileInfo(mContext, uri, mimeType); uri = com.android.bluetooth.opp.BluetoothOppUtility.generateUri(uri, sendFileInfo); com.android.bluetooth.opp.BluetoothOppUtility.putSendFileInfo(uri, sendFileInfo); mUriOfSendingFile = uri.toString(); storeApplicationData(); } }
public static int getLength(java.lang.Object array) throws java.lang.IllegalArgumentException { if (array instanceof java.lang.Object[]) { return ((java.lang.Object[]) (array)).length; } else if (array instanceof boolean[]) { return ((boolean[]) (array)).length; } else if (array instanceof byte[]) { return ((byte[]) (array)).length; } else if (array instanceof char[]) { return ((char[]) (array)).length; } else if (array instanceof double[]) { return ((double[]) (array)).length; } else if (array instanceof float[]) { return ((float[]) (array)).length; } else if (array instanceof int[]) { return ((int[]) (array)).length; } else if (array instanceof long[]) { return ((long[]) (array)).length; } else if (array instanceof short[]) { return ((short[]) (array)).length; } throw java.lang.reflect.Array.badArray(array); }
public static void setBoolean(java.lang.Object array, int index, boolean z) throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException { if (array instanceof boolean[]) { ((boolean[]) (array))[index] = z; } else { throw java.lang.reflect.Array.badArray(array); } }
private com.android.contacts.list.CustomContactListFilterActivity.AccountSet createAccountSet(java.util.List<com.android.contacts.model.account.AccountInfo> sourceAccounts) { final android.content.Context context = getContext(); final android.content.ContentResolver resolver = context.getContentResolver(); final com.android.contacts.list.CustomContactListFilterActivity.AccountSet accounts = new com.android.contacts.list.CustomContactListFilterActivity.AccountSet(); for (com.android.contacts.model.account.AccountInfo info : sourceAccounts) { final com.android.contacts.model.account.AccountWithDataSet account = info.getAccount(); final com.android.contacts.list.CustomContactListFilterActivity.AccountDisplay accountDisplay = new com.android.contacts.list.CustomContactListFilterActivity.AccountDisplay(resolver, info); final android.net.Uri.Builder groupsUri = Groups.CONTENT_URI.buildUpon().appendQueryParameter(Groups.ACCOUNT_NAME, account.name).appendQueryParameter(Groups.ACCOUNT_TYPE, account.type); if ((account.dataSet) != null) { groupsUri.appendQueryParameter(Groups.DATA_SET, account.dataSet).build(); } final android.database.Cursor cursor = resolver.query(groupsUri.build(), null, GroupUtil.ALL_GROUPS_SELECTION, null, null); if (cursor == null) { continue; } android.content.EntityIterator iterator = ContactsContract.Groups.newEntityIterator(cursor); try { boolean hasGroups = false; while (iterator.hasNext()) { final android.content.ContentValues values = iterator.next().getEntityValues(); final com.android.contacts.list.CustomContactListFilterActivity.GroupDelta group = com.android.contacts.list.CustomContactListFilterActivity.GroupDelta.fromBefore(values); accountDisplay.addGroup(group); hasGroups = true; } accountDisplay.mUngrouped = com.android.contacts.list.CustomContactListFilterActivity.GroupDelta.fromSettings(resolver, account.name, account.type, account.dataSet, hasGroups); accountDisplay.addGroup(accountDisplay.mUngrouped); } finally { iterator.close(); } accounts.add(accountDisplay); } return accounts; }
@java.lang.Override boolean isMetadataSynced() { android.util.Log.v(com.android.bluetooth.avrcp.GPMWrapper.TAG, "apanicke: GPM isMetadataSynced()"); android.media.session.MediaSession.QueueItem currItem = null; for (android.media.session.MediaSession.QueueItem item : getQueue()) { if ((item.getQueueId()) == (getActiveQueueID())) { currItem = item; } } if ((currItem == null) || (!(queueItemToMetadata(currItem).getDescription().equals(getMetadata().getDescription())))) { if (com.android.bluetooth.avrcp.GPMWrapper.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.GPMWrapper.TAG, "Metadata currently out of sync for Google Play Music"); if (com.android.bluetooth.avrcp.GPMWrapper.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.GPMWrapper.TAG, (" └ Current queueItem: " + currItem)); if (com.android.bluetooth.avrcp.GPMWrapper.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.GPMWrapper.TAG, (" └ Current metadata : " + (getMetadata().getDescription()))); return false; } return true; }
private void handleCarrierNameOverride() { android.telephony.CarrierConfigManager configLoader = ((android.telephony.CarrierConfigManager) (mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE))); if (configLoader == null) { return; } boolean preferCcName = configLoader.getConfig().getBoolean(CarrierConfigManager.KEY_CARRIER_NAME_OVERRIDE_BOOL, false); java.lang.String ccName = configLoader.getConfig().getString(CarrierConfigManager.KEY_CARRIER_NAME_STRING); java.lang.String spn = getServiceProviderName(); java.lang.String chosenName = null; if (preferCcName) { chosenName = ccName; } else if (!(android.text.TextUtils.isEmpty(spn))) { chosenName = spn; } else if (!(android.text.TextUtils.isEmpty(ccName))) { chosenName = ccName; } if (chosenName != null) { setServiceProviderName(chosenName); mTelephonyManager.setSimOperatorNameForPhone(mParentApp.getPhoneId(), chosenName); } }
private void broadcastConnectionState(android.bluetooth.BluetoothDevice device, int newState) { java.lang.Integer prevStateInteger = mInputDevices.get(device); int prevState = (prevStateInteger == null) ? android.bluetooth.BluetoothInputDevice.STATE_DISCONNECTED : prevStateInteger; if (prevState == newState) { android.util.Log.w(com.android.bluetooth.hid.HidService.TAG, ("no state change: " + newState)); return; } mInputDevices.put(device, newState); log(((((("Connection state " + device) + ": ") + prevState) + "->") + newState)); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothInputDevice.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); sendBroadcastAsUser(intent, UserHandle.ALL, com.android.bluetooth.hid.BLUETOOTH_PERM); }
@org.junit.Test public void testNumberAddress() { java.lang.String address = "3141592653"; com.android.internal.telephony.cdma.sms.CdmaSmsAddress cdmaAddress = com.android.internal.telephony.cdma.sms.CdmaSmsAddress.parse(address); assertEquals(address, cdmaAddress.address); assertEquals(CdmaSmsAddress.DIGIT_MODE_4BIT_DTMF, cdmaAddress.digitMode); assertEquals(CdmaSmsAddress.NUMBER_MODE_NOT_DATA_NETWORK, cdmaAddress.numberMode); assertArrayEquals(com.android.internal.telephony.cdma.CdmaSmsAddressTest.parseToDtmf(address), cdmaAddress.origBytes); }
@org.junit.Test public void testNumberWithSugar() { java.lang.String address = "(314)1592653"; com.android.internal.telephony.cdma.sms.CdmaSmsAddress cdmaAddress = com.android.internal.telephony.cdma.sms.CdmaSmsAddress.parse(address); assertEquals(address, cdmaAddress.address); assertEquals(CdmaSmsAddress.DIGIT_MODE_4BIT_DTMF, cdmaAddress.digitMode); assertEquals(CdmaSmsAddress.NUMBER_MODE_NOT_DATA_NETWORK, cdmaAddress.numberMode); assertArrayEquals(com.android.internal.telephony.cdma.CdmaSmsAddressTest.parseToDtmf("3141592653"), cdmaAddress.origBytes); }
@org.junit.Test public void testInternationalAddress() { java.lang.String address = "+10068"; com.android.internal.telephony.cdma.sms.CdmaSmsAddress cdmaAddress = com.android.internal.telephony.cdma.sms.CdmaSmsAddress.parse(address); assertEquals(address, cdmaAddress.address); assertEquals(CdmaSmsAddress.DIGIT_MODE_8BIT_CHAR, cdmaAddress.digitMode); assertEquals(CdmaSmsAddress.NUMBER_MODE_NOT_DATA_NETWORK, cdmaAddress.numberMode); assertEquals(CdmaSmsAddress.NUMBERING_PLAN_ISDN_TELEPHONY, cdmaAddress.numberPlan); assertEquals(CdmaSmsAddress.TON_INTERNATIONAL, cdmaAddress.ton); assertArrayEquals(com.android.internal.telephony.cdma.sms.UserData.stringToAscii(address), cdmaAddress.origBytes); }
@java.lang.Override public void onMessageWaitingIndicatorChanged(boolean visible) { if (com.android.phone.CallNotifier.VDBG) log(((("onMessageWaitingIndicatorChanged(): " + (this.mSubId)) + " ") + visible)); mMWIStatus.put(this.mSubId, visible); updatePhoneStateListeners(false, this.mSubId); }
public void updatePhoneStateListeners(boolean isRefresh) { updatePhoneStateListeners(isRefresh, SubscriptionManager.INVALID_SUBSCRIPTION_ID); }
public static com.android.bluetooth.hid.HidDeviceNativeInterface getInstance() { synchronized(com.android.bluetooth.hid.HidDeviceNativeInterface.INSTANCE_LOCK) { if ((com.android.bluetooth.hid.HidDeviceNativeInterface.sInstance) == null) { com.android.bluetooth.hid.HidDeviceNativeInterface.sInstance = new com.android.bluetooth.hid.HidDeviceNativeInterface(); } return com.android.bluetooth.hid.HidDeviceNativeInterface.sInstance; } }
public static synchronized com.android.bluetooth.hid.HidDeviceService getHidDeviceService() { if (((com.android.bluetooth.hid.HidDeviceService.sHidDeviceService) != null) && (com.android.bluetooth.hid.HidDeviceService.sHidDeviceService.isAvailable())) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("getHidDeviceService(): returning " + (com.android.bluetooth.hid.HidDeviceService.sHidDeviceService))); } return com.android.bluetooth.hid.HidDeviceService.sHidDeviceService; } if (com.android.bluetooth.hid.HidDeviceService.DBG) { if ((com.android.bluetooth.hid.HidDeviceService.sHidDeviceService) == null) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "getHidDeviceService(): service is NULL"); } else if (!(com.android.bluetooth.hid.HidDeviceService.sHidDeviceService.isAvailable())) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "getHidDeviceService(): service is not available"); } } return null; }
public boolean connect(byte[] btAddress) { return connectNative(btAddress); }
synchronized void onApplicationStateChangedFromNative(byte[] address, boolean registered) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("onApplicationStateChanged(): registered=" + registered)); } android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.hid.HidDeviceService.MESSAGE_APPLICATION_STATE_CHANGED); msg.obj = address; msg.arg1 = (registered) ? 1 : 0; mHandler.sendMessage(msg); }
private static synchronized void setHidDeviceService(com.android.bluetooth.hid.HidDeviceService instance) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("setHidDeviceService(): set to: " + instance)); } com.android.bluetooth.hid.HidDeviceService.sHidDeviceService = instance; }
synchronized boolean connect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("connect(): device=" + device)); } return mHidDeviceNativeInterface.connect(com.android.bluetooth.Utils.getByteAddress(device)); }
synchronized void onConnectStateChangedFromNative(byte[] address, int state) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ((("onConnectStateChanged(): address=" + (java.lang.String.format("%02x", java.util.Arrays.toString(address)))) + " state=") + state)); } android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.hid.HidDeviceService.MESSAGE_CONNECT_STATE_CHANGED); msg.obj = address; msg.arg1 = state; mHandler.sendMessage(msg); }
@java.lang.Override protected boolean start() { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "start()"); } com.android.bluetooth.hid.HidDeviceService.setHidDeviceService(this); mHandler = new com.android.bluetooth.hid.HidDeviceService.HidDeviceServiceHandler(); mHidDeviceNativeInterface.init(); mNativeAvailable = true; return true; }
private synchronized void onApplicationStateChanged(byte[] address, boolean registered) { com.android.bluetooth.hid.HidDeviceService service = com.android.bluetooth.hid.HidDeviceService.getHidDeviceService(); if (service != null) { service.onApplicationStateChangedFromNative(address, registered); } else { android.util.Log.wtfStack(com.android.bluetooth.hid.HidDeviceNativeInterface.TAG, ("FATAL: onApplicationStateChanged() " + "is called from the stack while service is not available.")); } }
private synchronized void onConnectStateChanged(byte[] address, int state) { com.android.bluetooth.hid.HidDeviceService service = com.android.bluetooth.hid.HidDeviceService.getHidDeviceService(); if (service != null) { service.onConnectStateChangedFromNative(address, state); } else { android.util.Log.wtfStack(com.android.bluetooth.hid.HidDeviceNativeInterface.TAG, ("FATAL: onConnectStateChanged() " + "is called from the stack while service is not available.")); } }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); java.lang.reflect.Method method = com.android.bluetooth.btservice.AdapterService.class.getDeclaredMethod("setAdapterService", com.android.bluetooth.btservice.AdapterService.class); method.setAccessible(true); method.invoke(mAdapterService, mAdapterService); mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("10:11:12:13:14:15"); if ((android.os.Looper.myLooper()) == null) { android.os.Looper.prepare(); } mSdpSettings = new android.bluetooth.BluetoothHidDeviceAppSdpSettings("1", "2", "3", ((byte) (4)), new byte[]{ }); mHidDeviceService = spy(com.android.bluetooth.hid.HidDeviceService.getHidDeviceService()); org.junit.Assert.assertNotNull(mHidDeviceService); java.lang.reflect.Field field = com.android.bluetooth.hid.HidDeviceService.class.getDeclaredField("mHandler"); field.setAccessible(true); org.junit.Assert.assertNotNull(field.get(mHidDeviceService)); }
@org.junit.After public void tearDown() { mHidDeviceService.cleanup(); }
@org.junit.Test public void testInitState() throws java.lang.Exception { org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHidDeviceService.getConnectionState(mTestDevice)); byte[] testDevice = new byte[]{ 16, 17, 18, 19, 20, 21 }; mHidDeviceService.onApplicationStateChangedFromNative(testDevice, true); mHidDeviceService.onConnectStateChangedFromNative(testDevice, 0); }
private void attemptCleanup() { if (isReadyForTearDown()) { com.android.dialer.common.LogUtil.i("InCallPresenter.attemptCleanup", "Cleaning up"); cleanupSurfaces(); mIsChangingConfigurations = false; if ((mContactInfoCache) != null) { mContactInfoCache.clearCache(); } mContactInfoCache = null; if ((mProximitySensor) != null) { removeListener(mProximitySensor); mProximitySensor.tearDown(); } mProximitySensor = null; if ((mStatusBarNotifier) != null) { removeListener(mStatusBarNotifier); com.android.dialer.enrichedcall.EnrichedCallComponent.get(mContext).getEnrichedCallManager().unregisterStateChangedListener(mStatusBarNotifier); } if (((mExternalCallNotifier) != null) && ((mExternalCallList) != null)) { mExternalCallList.removeExternalCallListener(mExternalCallNotifier); } mStatusBarNotifier = null; if ((mCallList) != null) { mCallList.removeListener(this); mCallList.removeListener(mSpamCallListListener); } mCallList = null; motorolaInCallUiNotifier = null; mContext = null; mInCallActivity = null; mManageConferenceActivity = null; mListeners.clear(); mIncomingCallListeners.clear(); mDetailsListeners.clear(); mCanAddCallListeners.clear(); mOrientationListeners.clear(); mInCallEventListeners.clear(); mInCallUiListeners.clear(); if (!(mInCallUiLocks.isEmpty())) { com.android.dialer.common.LogUtil.e("InCallPresenter.attemptCleanup", ("held in call locks: " + (mInCallUiLocks))); mInCallUiLocks.clear(); } com.android.dialer.common.LogUtil.d("InCallPresenter.attemptCleanup", "finished"); } }
@java.lang.Override public void updateCallBarring(int cbType, int action, android.os.Message result, java.lang.String[] barrList) { updateCallBarring(cbType, action, com.android.ims.ImsUt.SERVICE_CLASS_NONE, result, barrList); }
@java.lang.Override public void updateCallBarring(int cbType, int action, int serviceClass, android.os.Message result, java.lang.String[] barrList) { if (com.android.ims.ImsUt.DBG) { if (barrList != null) { java.lang.String bList = new java.lang.String(); for (int i = 0; i < (barrList.length); i++) { bList.concat(((barrList[i]) + " ")); } log(((((((((("updateCallBarring :: Ut=" + (miUt)) + ", cbType=") + cbType) + ", action=") + action) + ", serviceClass=") + serviceClass) + ", barrList=") + bList)); } else { log(((((((("updateCallBarring :: Ut=" + (miUt)) + ", cbType=") + cbType) + ", action=") + action) + ", serviceClass=") + serviceClass)); } } synchronized(mLockObj) { try { int id = miUt.updateCallBarringForServiceClass(cbType, action, serviceClass, barrList); if (id < 0) { sendFailureReport(result, new com.android.ims.ImsReasonInfo(ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, 0)); return; } mPendingCmds.put(java.lang.Integer.valueOf(id), result); } catch (android.os.RemoteException e) { sendFailureReport(result, new com.android.ims.ImsReasonInfo(ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, 0)); } } }
@java.lang.Override public void queryCallBarring(int cbType, android.os.Message result) { queryCallBarring(cbType, com.android.ims.ImsUt.SERVICE_CLASS_NONE, result); }
@java.lang.Override public void queryCallBarring(int cbType, int serviceClass, android.os.Message result) { if (com.android.ims.ImsUt.DBG) { log(((((("queryCallBarring :: Ut=" + (miUt)) + ", cbType=") + cbType) + ", serviceClass=") + serviceClass)); } synchronized(mLockObj) { try { int id = miUt.queryCallBarringForServiceClass(cbType, serviceClass); if (id < 0) { sendFailureReport(result, new com.android.ims.ImsReasonInfo(ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, 0)); return; } mPendingCmds.put(java.lang.Integer.valueOf(id), result); } catch (android.os.RemoteException e) { sendFailureReport(result, new com.android.ims.ImsReasonInfo(ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, 0)); } } }
private com.android.tradefed.util.CommandResult runPythonCommand(java.lang.String[] cmd) { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); com.android.tradefed.util.ProcessUtil process; try { process = new com.android.tradefed.util.ProcessUtil(mRunUtil.runCmdInBackground(cmd)); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); commandResult.setStatus(CommandStatus.EXCEPTION); commandResult.setStdout(""); commandResult.setStderr(""); return commandResult; } try { com.android.tradefed.util.CommandStatus commandStatus = null; try { commandStatus = process.waitForProcess(mTestTimeout); } catch (com.android.tradefed.util.RunInterruptedException e) { com.android.tradefed.log.LogUtil.CLog.e("Python process was interrupted."); commandStatus = com.android.tradefed.util.CommandStatus.FAILED; } if (!(process.isRunning())) { com.android.tradefed.log.LogUtil.CLog.i("Cancel Python process by sending notification to stdin."); try { process.writeStdin("STOP\n"); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } process.waitForProcess(com.android.tradefed.testtype.VtsMultiDeviceTest.TEST_ABORT_TIMEOUT_MSECS); } commandResult.setStatus(commandStatus); commandResult.setStdout(process.getStdout()); commandResult.setStderr(process.getStderr()); } finally { process.cleanUp(); } return commandResult; }
@java.lang.Override public void run() { char[] charBuffer = new char[com.android.tradefed.util.ProcessUtil.ReaderThread.BUF_SIZE]; try { while (true) { int readCount = mReader.read(charBuffer, 0, charBuffer.length); if (readCount < 0) { break; } mBuffer.append(charBuffer, 0, readCount); } } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } }
public com.android.tradefed.util.CommandStatus waitForProcess(long timeoutMsecs) throws com.android.tradefed.util.RunInterruptedException { com.android.tradefed.util.ProcessUtil.VtsRunnable vtsRunnable = new com.android.tradefed.util.ProcessUtil.VtsRunnable(); try { return com.android.tradefed.util.RunUtil.getDefault().runTimed(timeoutMsecs, vtsRunnable, true); } catch (com.android.tradefed.util.RunInterruptedException e) { java.lang.Thread.interrupted(); vtsRunnable.cancel(); java.lang.Thread execThread = vtsRunnable.getExecutionThread(); if (execThread != null) { com.android.tradefed.util.ProcessUtil.joinThread(execThread, com.android.tradefed.util.ProcessUtil.THREAD_JOIN_TIMEOUT_MSECS); } throw e; } }
private static boolean joinThread(java.lang.Thread thread, long timeoutMsec) { try { thread.join(timeoutMsec); } catch (java.lang.InterruptedException e) { com.android.tradefed.log.LogUtil.CLog.e(e); return false; } if (thread.isAlive()) { com.android.tradefed.log.LogUtil.CLog.e("Failed to join %s.", thread.getName()); return false; } return true; }
public void cleanUp() { if (isRunning()) { com.android.tradefed.log.LogUtil.CLog.e("Kill the running process."); mProcess.destroy(); } try { mStdinWriter.close(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } try { mStdoutReader.close(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } try { mStderrReader.close(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } com.android.tradefed.util.ProcessUtil.joinThread(mStdoutThread, com.android.tradefed.util.ProcessUtil.THREAD_JOIN_TIMEOUT_MSECS); com.android.tradefed.util.ProcessUtil.joinThread(mStderrThread, com.android.tradefed.util.ProcessUtil.THREAD_JOIN_TIMEOUT_MSECS); }
@java.lang.Override public boolean run() { synchronized(mLock) { mExecutionThread = java.lang.Thread.currentThread(); if (mCancelled) { com.android.tradefed.log.LogUtil.CLog.i("Python process was cancelled before being awaited."); return false; } } boolean success; try { success = (mProcess.waitFor()) == 0; com.android.tradefed.log.LogUtil.CLog.i("Python process terminates normally."); } catch (java.lang.InterruptedException e) { success = false; com.android.tradefed.log.LogUtil.CLog.i("Python process is interrupted."); } return success; }
@java.lang.Override public void run() { synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_READY); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); boolean error_occured = false; boolean is_debugger_connected = false; boolean is_debugging_enabled = false; long last_debugger_activity = -1; try { java.lang.Thread.sleep(100); java.lang.Class<?> vmdebug = java.lang.Class.forName("dalvik.system.VMDebug"); java.lang.reflect.Method isDebuggerConnectedMethod = vmdebug.getDeclaredMethod("isDebuggerConnected"); java.lang.reflect.Method isDebuggingEnabledMethod = vmdebug.getDeclaredMethod("isDebuggingEnabled"); java.lang.reflect.Method lastDebuggerActivityMethod = vmdebug.getDeclaredMethod("lastDebuggerActivity"); is_debugger_connected = ((boolean) (isDebuggerConnectedMethod.invoke(null))); is_debugging_enabled = ((boolean) (isDebuggingEnabledMethod.invoke(null))); last_debugger_activity = ((long) (lastDebuggerActivityMethod.invoke(null))); } catch (java.lang.NoSuchMethodException e) { error_occured = true; logWriter.println(("Unable to find one of the VMDebug methods!" + e)); } catch (java.lang.ClassNotFoundException e) { error_occured = true; logWriter.println("Could not find VMDebug"); } catch (java.lang.Exception e) { logWriter.println(("Other exception occured " + e)); error_occured = true; } SendResult(error_occured, is_debugger_connected, is_debugging_enabled, last_debugger_activity); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); }
synchronized boolean replyReport(android.bluetooth.BluetoothDevice device, byte type, byte id, byte[] data) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ((((("replyReport(): device=" + device) + " type=") + type) + " id=") + id)); } if (!(checkDevice(device))) { return false; } if (!(checkCallingUid())) { return false; } return replyReportNative(type, id, data); }
synchronized boolean reportError(android.bluetooth.BluetoothDevice device, byte error) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ((("reportError(): device=" + device) + " error=") + error)); } if (!(checkDevice(device))) { return false; } if (!(checkCallingUid())) { return false; } return reportErrorNative(error); }
synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppConfiguration config, android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "registerApp()"); } if ((mUserUid) != 0) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "registerApp: failed because some user already uses it. "); return false; } mAppConfig = config; mUserUid = android.os.Binder.getCallingUid(); android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("registerApp: caller uid=" + (mUserUid))); mCallback = callback; return registerAppNative(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null ? null : inQos.toArray()), (outQos == null ? null : outQos.toArray())); }
synchronized boolean unregisterApp(android.bluetooth.BluetoothHidDeviceAppConfiguration config) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "unregisterApp()"); } if (!(checkCallingUid())) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, (("unregisterApp: failed. The caller " + (android.os.Binder.getCallingUid())) + " is not registered")); return false; } mUserUid = 0; return unregisterAppNative(); }
private boolean checkCallingUid() { int callingUid = android.os.Binder.getCallingUid(); return (callingUid == (mUserUid)) || (callingUid < (android.os.Process.FIRST_APPLICATION_UID)); }
synchronized boolean connect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("connect(): device=" + device)); } if (!(checkCallingUid())) { return false; } return connectNative(com.android.bluetooth.Utils.getByteAddress(device)); }
synchronized boolean unplug(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("unplug(): device=" + device)); } if (!(checkDevice(device))) { return false; } if (!(checkCallingUid())) { return false; } return unplugNative(); }
synchronized boolean disconnect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("disconnect(): device=" + device)); } if (!(checkDevice(device))) { return false; } if (!(checkCallingUid())) { return false; } return disconnectNative(); }
synchronized boolean sendReport(android.bluetooth.BluetoothDevice device, int id, byte[] data) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ((((("sendReport(): device=" + device) + " id=") + id) + " caller=") + (android.os.Binder.getCallingUid()))); } if (!(checkDevice(device))) { return false; } if (!(checkCallingUid())) { return false; } return sendReportNative(id, data); }
public static android.net.MacAddress makeRandomAddress() { return android.net.MacAddress.makeRandomAddress(android.net.MacAddress.BASE_ANDROID_MAC, new java.util.Random()); }
private static java.lang.String stringAddrFromLongAddr(long addr) { addr = (java.lang.Long.reverseBytes(addr)) >> 16; java.util.StringJoiner j = new java.util.StringJoiner(":"); for (int i = 0; i < (android.net.MacAddress.ETHER_ADDR_LEN); i++) { j.add(java.lang.Integer.toHexString(((byte) (addr)))); addr = addr >> 8; } return j.toString(); }
private static long longAddrFromStringAddr(java.lang.String addr) { if (addr == null) { throw new java.lang.IllegalArgumentException("cannot convert the null String"); } java.lang.String[] parts = addr.split(":"); if ((parts.length) != (android.net.MacAddress.ETHER_ADDR_LEN)) { throw new java.lang.IllegalArgumentException((addr + " was not a valid MAC address")); } long longAddr = 0; int index = android.net.MacAddress.ETHER_ADDR_LEN; while ((index--) > 0) { int x = java.lang.Integer.valueOf(parts[index], 16); if ((x < 0) || (255 < x)) { throw new java.lang.IllegalArgumentException((addr + "was not a valid MAC address")); } longAddr = x + (longAddr << 8); } return longAddr; }
public static android.net.MacAddress.MacAddressType macAddressType(byte[] addr) { if (!(android.net.MacAddress.isMacAddress(addr))) { return null; } return android.net.MacAddress.fromBytes(addr).addressType(); }
private static long longAddrFromByteAddr(byte[] addr) { if (!(android.net.MacAddress.isMacAddress(addr))) { throw new java.lang.IllegalArgumentException(((java.util.Arrays.toString(addr)) + " was not a valid MAC address")); } long longAddr = 0; for (byte b : addr) { longAddr = (longAddr << 8) + (com.android.internal.util.BitUtils.uint8(b)); } return longAddr; }
@org.junit.Test public void testMacAddrTypes() { android.net.MacAddressTest.AddrTypeTestCase[] testcases = new android.net.MacAddressTest.AddrTypeTestCase[]{ android.net.MacAddressTest.AddrTypeTestCase.of(null), android.net.MacAddressTest.AddrTypeTestCase.of(null, 0), android.net.MacAddressTest.AddrTypeTestCase.of(null, 1, 2, 3, 4, 5), android.net.MacAddressTest.AddrTypeTestCase.of(null, 1, 2, 3, 4, 5, 6, 7), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddressType.UNICAST, 160, 176, 192, 208, 224, 240), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddressType.BROADCAST, 255, 255, 255, 255, 255, 255), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddressType.MULTICAST, 1, 2, 3, 4, 5, 6), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddressType.MULTICAST, 11, 22, 33, 44, 55, 66), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddressType.MULTICAST, 33, 33, 170, 187, 204, 221) }; for (android.net.MacAddressTest.AddrTypeTestCase t : testcases) { android.net.MacAddress.MacAddressType got = android.net.MacAddress.macAddressType(t.addr); java.lang.String msg = java.lang.String.format("expected type of %s to be %s, but got %s", java.util.Arrays.toString(t.addr), t.expected, got); assertEquals(msg, t.expected, got); if (got != null) { assertEquals(got, android.net.MacAddress.fromBytes(t.addr).addressType()); } } }
public static android.net.MacAddress makeRandomAddress(android.net.MacAddress base, java.util.Random r) { long longAddr = (((base.mAddr) & (android.net.MacAddress.OUI_MASK)) | ((android.net.MacAddress.NIC_MASK) & (r.nextLong()))) | (android.net.MacAddress.LOCALLY_ASSIGNED_MASK); return new android.net.MacAddress(longAddr); }
@org.junit.Test public void testMacAddressRandomGeneration() { final int iterations = 1000; final java.lang.String expectedAndroidOui = "da:a1:19"; for (int i = 0; i < iterations; i++) { android.net.MacAddress mac = android.net.MacAddress.makeRandomAddress(); java.lang.String stringRepr = mac.toString(); assertTrue((stringRepr + " expected to be a locally assigned address"), mac.isLocallyAssigned()); assertTrue(((stringRepr + " expected to begin with ") + expectedAndroidOui), stringRepr.startsWith(expectedAndroidOui)); } final java.util.Random r = new java.util.Random(); final java.lang.String anotherOui = "24:5f:78"; final java.lang.String expectedLocalOui = "26:5f:78"; final android.net.MacAddress base = android.net.MacAddress.fromString((anotherOui + ":0:0:0")); for (int i = 0; i < iterations; i++) { android.net.MacAddress mac = android.net.MacAddress.makeRandomAddress(base, r); java.lang.String stringRepr = mac.toString(); assertTrue((stringRepr + " expected to be a locally assigned address"), mac.isLocallyAssigned()); assertTrue(((stringRepr + " expected to begin with ") + expectedLocalOui), stringRepr.startsWith(expectedLocalOui)); } }
@org.junit.Test public void testConstructorInputValidation() { java.lang.String[] invalidStringAddresses = new java.lang.String[]{ null, "", "abcd", "1:2:3:4:5", "1:2:3:4:5:6:7", "10000:2:3:4:5:6" }; for (java.lang.String s : invalidStringAddresses) { try { android.net.MacAddress mac = android.net.MacAddress.fromString(s); fail(((("MacAddress.fromString(" + s) + ") should have failed, but returned ") + mac)); } catch (java.lang.IllegalArgumentException excepted) { } } byte[][] invalidBytesAddresses = new byte[][]{ null, new byte[]{ }, new byte[]{ 1, 2, 3, 4, 5 }, new byte[]{ 1, 2, 3, 4, 5, 6, 7 } }; for (byte[] b : invalidBytesAddresses) { try { android.net.MacAddress mac = android.net.MacAddress.fromBytes(b); fail(((("MacAddress.fromBytes(" + (java.util.Arrays.toString(b))) + ") should have failed, but returned ") + mac)); } catch (java.lang.IllegalArgumentException excepted) { } } }
@org.junit.Test public void testMacAddressConversions() { final int iterations = 10000; for (int i = 0; i < iterations; i++) { android.net.MacAddress mac = android.net.MacAddress.makeRandomAddress(); java.lang.String stringRepr = mac.toString(); byte[] bytesRepr = mac.toByteArray(); assertEquals(mac, android.net.MacAddress.fromString(stringRepr)); assertEquals(mac, android.net.MacAddress.fromBytes(bytesRepr)); } }
public static android.net.MacAddress fromString(java.lang.String addr) { return new android.net.MacAddress(android.net.MacAddress.longAddrFromByteAddr(android.net.MacAddress.byteAddrFromStringAddr(addr))); }
int getStackPosition(int displayId, int stackId) { int wmStackIndex = mWmState.getStackPosition(displayId, stackId); int amStackIndex = mAmState.getStackPosition(displayId, stackId); assertEquals("Window and activity manager must have the same stack position index", amStackIndex, wmStackIndex); return wmStackIndex; }
int getStackPosition(int displayId, int stackId) { java.util.List<android.server.cts.WindowManagerState.WindowStack> stacks = mDisplayStacks.get(displayId); if (stacks == null) return -1; for (int i = 0; i < (stacks.size()); i++) { if (stackId == (stacks.get(i).mStackId)) { return i; } } return -1; }
int getStackPosition(int displayId, int stackId) { java.util.List<android.server.cts.ActivityManagerState.ActivityStack> stacks = mDisplayStacks.get(displayId); if (stacks == null) return -1; for (int i = 0; i < (stacks.size()); i++) { if (stackId == (stacks.get(i).mStackId)) { return i; } } return -1; }
public void testStackListOrderLaunchDockedActivity() throws java.lang.Exception { if (!(supportsSplitScreenMultiWindow())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, "Skipping test: no split multi-window support"); return; } launchActivityInDockStack(android.server.cts.ActivityManagerDockedStackTests.TEST_ACTIVITY_NAME); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDockedStackTests.TEST_ACTIVITY_NAME }); final int homeStackIndex = mAmWmState.getStackPosition(android.server.cts.ActivityAndWindowManagersState.DEFAULT_DISPLAY_ID, android.server.cts.HOME_STACK_ID); final int recentsStackIndex = mAmWmState.getStackPosition(android.server.cts.ActivityAndWindowManagersState.DEFAULT_DISPLAY_ID, android.server.cts.RECENTS_STACK_ID); assertTrue("Recents stack should be on top of home stack", (recentsStackIndex < homeStackIndex)); }
@java.lang.Override public void onResume() { super.onResume(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkDialogActivity.LOG_TAG, ((("onResume - mIsResponseSent[" + (mIsResponseSent)) + "], sim id: ") + (mSlotId))); initFromIntent(getIntent()); if ((mTextMsg) == null) { finish(); return; } alertDialogBuilder.setTitle(mTextMsg.title); if (!((mTextMsg.iconSelfExplanatory) && ((mTextMsg.icon) != null))) { alertDialogBuilder.setMessage(mTextMsg.text); } alertDialogBuilder.show().setCanceledOnTouchOutside(false); if ((((com.android.stk.StkApp.calculateDurationInMilis(mTextMsg.duration)) == 0) && (!(mTextMsg.responseNeeded))) && (mTextMsg.userClear)) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkDialogActivity.LOG_TAG, "User should clear text..showing message forever"); return; } appService.setDisplayTextDlgVisibility(true, mSlotId); if ((mTimeoutIntent) != null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkDialogActivity.LOG_TAG, "Pending Alarm! Let it finish counting down..."); } else { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkDialogActivity.LOG_TAG, "No Pending Alarm! OK to start timer..."); startTimeOut(mTextMsg.userClear); } }
protected boolean isUiModeLockedToVrHeadset() throws com.android.tradefed.device.DeviceNotAvailableException { final java.lang.String output = runCommandAndPrintOutput("dumpsys uimode"); java.lang.Integer curUiMode = null; java.lang.Boolean uiModeLocked = null; for (java.lang.String line : output.split("\\n")) { line = line.trim(); java.util.regex.Matcher matcher = android.server.cts.ActivityManagerTestBase.sCurrentUiModePattern.matcher(line); if (matcher.find()) { curUiMode = java.lang.Integer.parseInt(matcher.group(1), 16); } matcher = android.server.cts.ActivityManagerTestBase.sUiModeLockedPattern.matcher(line); if (matcher.find()) { uiModeLocked = matcher.group(1).equals("true"); } } boolean uiModeLockedToVrHeadset = (((curUiMode != null) && (uiModeLocked != null)) && ((curUiMode & 15) == 7)) && uiModeLocked; if (uiModeLockedToVrHeadset) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, "UI mode is locked to VR headset"); } return uiModeLockedToVrHeadset; }
@java.lang.Override public void accept(int result) { if ((result ^ (hintsMask)) == (com.android.cts.verifier.notifications.MockListener.MockListener.HINT_HOST_DISABLE_CALL_EFFECTS)) { status = PASS; } else { logFail(); status = FAIL; } next(); }
@java.lang.Override void test() { if ((status) == (READY)) { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerHints(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.IntegerResultCatcher() { @java.lang.Override public void accept(int result) { hintsMask = result; } }); com.android.cts.verifier.notifications.MockListener.MockListener.setHints(mContext, MockListener.HINT_HOST_DISABLE_CALL_EFFECTS); status = RETEST; } else { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerHints(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.IntegerResultCatcher() { @java.lang.Override public void accept(int result) { if ((result ^ (hintsMask)) == (com.android.cts.verifier.notifications.MockListener.MockListener.HINT_HOST_DISABLE_CALL_EFFECTS)) { status = PASS; } else { logFail(); status = FAIL; } next(); } }); } delay(); }
public void testOptionsMenuKey() { if (!(mActivity.getWindow().hasFeature(Window.FEATURE_OPTIONS_PANEL))) { return; } final boolean[] menuIsVisible = new boolean[]{ false }; mActivity.getActionBar().addOnMenuVisibilityListener(( isVisible) -> menuIsVisible[0] = isVisible); java.lang.Thread.sleep(android.app.cts.ActionBarTest.WAIT_TIME_MS); getInstrumentation().sendKeyDownUpSync(KeyEvent.KEYCODE_MENU); getInstrumentation().waitForIdleSync(); assertTrue(menuIsVisible[0]); getInstrumentation().sendKeyDownUpSync(KeyEvent.KEYCODE_MENU); getInstrumentation().waitForIdleSync(); assertFalse(menuIsVisible[0]); }
protected static void savePbapParams(android.content.Context ctx, long primaryCounter, long secondaryCounter, long dbIdentifier, long lastUpdatedTimestamp, long totalFields, long totalSvcFields, long totalContacts) { android.content.SharedPreferences pref = android.preference.PreferenceManager.getDefaultSharedPreferences(ctx); android.content.SharedPreferences.Editor edit = pref.edit(); edit.putLong("primary", primaryCounter); edit.putLong("secondary", secondaryCounter); edit.putLong("dbIdentifier", dbIdentifier); if (com.android.bluetooth.pbap.BluetoothPbapUtils.contactsLoaded) edit.putLong("totalContacts", totalContacts); edit.putLong("lastUpdatedTimestamp", lastUpdatedTimestamp); edit.putLong("totalFields", totalFields); edit.putLong("totalSvcFields", totalSvcFields); edit.apply(); if (com.android.bluetooth.pbap.BluetoothPbapUtils.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG, ((((("Saved Primary:" + primaryCounter) + ", Secondary:") + secondaryCounter) + ", Database Identifier: ") + dbIdentifier)); }
protected static void loadAllContacts(android.content.Context mContext, android.os.Handler mHandler) { if (com.android.bluetooth.pbap.BluetoothPbapUtils.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG, "Loading Contacts ..."); try { java.lang.String[] projection = new java.lang.String[]{ android.provider.ContactsContract.Data.CONTACT_ID, android.provider.ContactsContract.Data.DATA1, android.provider.ContactsContract.Data.MIMETYPE }; int contactCount = 0; com.android.bluetooth.pbap.BluetoothPbapUtils.loadingContacts = true; if ((contactCount = com.android.bluetooth.pbap.BluetoothPbapUtils.fetchAndSetContacts(mContext, mHandler, projection, null, null, true)) < 0) return; com.android.bluetooth.pbap.BluetoothPbapUtils.totalContacts = contactCount; com.android.bluetooth.pbap.BluetoothPbapUtils.contactsLoaded = true; com.android.bluetooth.pbap.BluetoothPbapUtils.loadingContacts = false; android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG, ("Contacts Loaded. Total Contacts: " + (com.android.bluetooth.pbap.BluetoothPbapUtils.totalContacts))); } catch (java.lang.Exception e) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG, ("Exception occurred in load contacts: " + e)); } }
protected void stopObexServerSession() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Pbap Service stopObexServerSession"); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_ACQUIRE_WAKE_LOCK); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_RELEASE_WAKE_LOCK); if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if (((mAdapter) != null) && (mAdapter.isEnabled())) { startSocketListeners(); } setState(BluetoothPbap.STATE_DISCONNECTED); }
@java.lang.Override public void onClose() { if (com.android.bluetooth.pbap.BluetoothPbapObexServer.D) android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapObexServer.TAG, ("onClose contactsLoaded = " + (BluetoothPbapUtils.contactsLoaded))); if (((mCallback) != null) && ((!(BluetoothPbapFixes.isSupportedPbap12)) || (BluetoothPbapUtils.contactsLoaded))) { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothPbapService.MSG_SERVERSESSION_CLOSE; msg.sendToTarget(); if (com.android.bluetooth.pbap.BluetoothPbapObexServer.D) android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapObexServer.TAG, "onClose(): msg MSG_SERVERSESSION_CLOSE sent out."); } else if (!(BluetoothPbapUtils.contactsLoaded)) { if (com.android.bluetooth.pbap.BluetoothPbapObexServer.D) android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapObexServer.TAG, "Handling stopObexServerSession() in new thread"); new java.lang.Thread("stopObexServerSession") { public void run() { mService.stopObexServerSession(); } }.start(); } }
@java.lang.Override public void onDisconnect(final javax.obex.HeaderSet req, final javax.obex.HeaderSet resp) { if (com.android.bluetooth.pbap.BluetoothPbapObexServer.D) android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapObexServer.TAG, "onDisconnect(): enter"); if (com.android.bluetooth.pbap.BluetoothPbapObexServer.V) com.android.bluetooth.pbap.BluetoothPbapObexServer.logHeader(req); notifyUpdateWakeLock(); resp.responseCode = javax.obex.ResponseCodes.OBEX_HTTP_OK; if (((mCallback) != null) && ((!(BluetoothPbapFixes.isSupportedPbap12)) || (BluetoothPbapUtils.contactsLoaded))) { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothPbapService.MSG_SESSION_DISCONNECTED; msg.sendToTarget(); if (com.android.bluetooth.pbap.BluetoothPbapObexServer.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapObexServer.TAG, "onDisconnect(): msg MSG_SESSION_DISCONNECTED sent out."); } }
@org.junit.Before public void setup() throws java.lang.Exception { mInstrumentation = android.support.test.InstrumentationRegistry.getInstrumentation(); mContext = mActivityRule.getActivity(); final android.app.Activity activity = mActivityRule.getActivity(); com.android.compatibility.common.util.PollingCheck.waitFor(activity::hasWindowFocus); org.xmlpull.v1.XmlPullParser parser = mContext.getResources().getXml(R.layout.listview_layout); com.android.compatibility.common.util.WidgetTestUtils.beginDocument(parser, "FrameLayout"); mAttributeSet = android.util.Xml.asAttributeSet(parser); mShortAdapter = new android.widget.ArrayAdapter(mContext, android.R.layout.simple_list_item_1, android.widget.cts.AbsListViewTest.SHORT_LIST); mCountriesAdapter = new android.widget.ArrayAdapter(mContext, android.R.layout.simple_list_item_1, android.widget.cts.AbsListViewTest.COUNTRY_LIST); mListView = ((android.widget.ListView) (activity.findViewById(R.id.listview_default))); }
@com.android.internal.annotations.VisibleForTesting static boolean equals(android.net.IpSecAlgorithm lhs, android.net.IpSecAlgorithm rhs) { if ((lhs == null) || (rhs == null)) return lhs == rhs; return ((lhs.mName.equals(rhs.mName)) && (java.util.Arrays.equals(lhs.mKey, rhs.mKey))) && ((lhs.mTruncLenBits) == (rhs.mTruncLenBits)); }
@org.junit.Test public void testLenValidation() throws java.lang.Exception { for (int len : new int[]{ 128, 192, 256 }) { new android.net.IpSecAlgorithm(IpSecAlgorithm.CRYPT_AES_CBC, java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, (len / 8))); } try { new android.net.IpSecAlgorithm(IpSecAlgorithm.CRYPT_AES_CBC, java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, (384 / 8))); fail("Invalid truncation length not validated"); } catch (java.lang.IllegalArgumentException pass) { } }
private static boolean isValid(java.lang.String name, int length, int truncationLength) { java.util.function.IntPredicate isValidLength = android.net.IpSecAlgorithm.sAlgorithms.get(name); if (isValidLength == null) { android.util.Log.e(android.net.IpSecAlgorithm.TAG, "Couldn't find a matching algorithm!"); return false; } return ((isValidLength.test(length)) && (isValidLength.test(truncationLength))) && (truncationLength <= length); }
@java.lang.Override public void run() { if (mIsFullScrollDown) { mLogScrollView.fullScroll(View.FOCUS_DOWN); } }
@java.lang.Override public void run() { mLogLayout.addView(mView); mLogScrollView.post(new java.lang.Runnable() { @java.lang.Override public void run() { if (mIsFullScrollDown) { mLogScrollView.fullScroll(View.FOCUS_DOWN); } } }); }
public void append() { runOnUiThread(new java.lang.Runnable() { @java.lang.Override public void run() { mLogLayout.addView(mView); mLogScrollView.post(new java.lang.Runnable() { @java.lang.Override public void run() { if (mIsFullScrollDown) { mLogScrollView.fullScroll(View.FOCUS_DOWN); } } }); } }); }
private void calibrateMagnetometer() throws java.lang.InterruptedException { android.hardware.cts.helpers.TestSensorEnvironment environment = new android.hardware.cts.helpers.TestSensorEnvironment(getApplicationContext(), android.hardware.Sensor.TYPE_MAGNETIC_FIELD, android.hardware.SensorManager.SENSOR_DELAY_NORMAL); android.hardware.cts.helpers.TestSensorEventListener listener = new android.hardware.cts.helpers.TestSensorEventListener(environment) { @java.lang.Override public void onSensorChanged(android.hardware.SensorEvent event) { clearText(); float[] values = event.values; com.android.cts.verifier.sensors.SensorTestLogger logger = getTestLogger(); logger.logInstructions(R.string.snsr_mag_calibration_description); logger.logMessage(R.string.snsr_mag_measurement, values[0], values[1], values[2], android.hardware.cts.helpers.SensorCtsHelper.getMagnitude(values)); logger.logInstructions(R.string.snsr_mag_calibration_complete); } }; android.hardware.cts.helpers.TestSensorManager magnetometer = new android.hardware.cts.helpers.TestSensorManager(environment); try { magnetometer.registerListener(listener); changeFullSrollDownAbility(false); waitForUserToContinue(); } finally { changeFullSrollDownAbility(true); magnetometer.unregisterListener(); } }
public void addMoveToEnd(com.android.dx.rop.code.RegisterSpec result, com.android.dx.rop.code.RegisterSpec source) { if ((successors.cardinality()) != 1) { throw new java.lang.IllegalStateException("Inserting a move to a block with multiple successors"); } if ((result.getReg()) == (source.getReg())) { return; } com.android.dx.ssa.NormalSsaInsn lastInsn; lastInsn = ((com.android.dx.ssa.NormalSsaInsn) (insns.get(((insns.size()) - 1)))); if (((lastInsn.getResult()) != null) || ((lastInsn.getSources().size()) > 0)) { for (int i = successors.nextSetBit(0); i >= 0; i = successors.nextSetBit((i + 1))) { com.android.dx.ssa.SsaBasicBlock succ; succ = parent.getBlocks().get(i); succ.addMoveToBeginning(result, source); } } else { com.android.dx.rop.code.RegisterSpecList sources = com.android.dx.rop.code.RegisterSpecList.make(source); com.android.dx.ssa.NormalSsaInsn toAdd = new com.android.dx.ssa.NormalSsaInsn(new com.android.dx.rop.code.PlainInsn(com.android.dx.rop.code.Rops.opMove(result.getType()), com.android.dx.rop.code.SourcePosition.NO_INFO, result, sources), this); insns.add(((insns.size()) - 1), toAdd); (movesFromPhisAtEnd)++; } }
@java.lang.Override public void run() { synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_READY); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); boolean error_occured = false; boolean is_debugger_connected = false; boolean is_debugging_enabled = false; long last_debugger_activity = -1; try { java.lang.Thread.sleep(100); java.lang.Class<?> vmdebug = java.lang.Class.forName("dalvik.system.VMDebug"); java.lang.reflect.Method isDebuggerConnectedMethod = vmdebug.getDeclaredMethod("isDebuggerConnected"); java.lang.reflect.Method isDebuggingEnabledMethod = vmdebug.getDeclaredMethod("isDebuggingEnabled"); java.lang.reflect.Method lastDebuggerActivityMethod = vmdebug.getDeclaredMethod("lastDebuggerActivity"); is_debugger_connected = ((boolean) (isDebuggerConnectedMethod.invoke(null))); is_debugging_enabled = ((boolean) (isDebuggingEnabledMethod.invoke(null))); last_debugger_activity = ((long) (lastDebuggerActivityMethod.invoke(null))); } catch (java.lang.NoSuchMethodException e) { error_occured = true; logWriter.println(("Unable to find one of the VMDebug methods!" + e)); } catch (java.lang.ClassNotFoundException e) { error_occured = true; logWriter.println("Could not find VMDebug"); } catch (java.lang.Exception e) { error_occured = true; logWriter.println(("Other exception occured " + e)); } SendResult(error_occured, is_debugger_connected, is_debugging_enabled, last_debugger_activity); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); }
public void testVMDebug() { synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); SendDebuggerActivity(); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); org.apache.harmony.jpda.tests.jdwp.VMDebug.VMDebugDebuggee.DebugResult res = org.apache.harmony.jpda.tests.jdwp.VMDebug.VMDebugDebuggee.ReadResult(synchronizer.receiveMessage()); if (res == null) { fail("unable to deserialize result data"); } else { logWriter.println(("Recieved results: " + res)); assertFalse("no error expected", res.error_occured); assertTrue("expected active debugger!", res.is_debugging_enabled); assertTrue("expected active debugger connection!", res.is_debugger_connected); if (10 > (res.last_debugger_activity)) { fail(("Expected last debugger activity to be greater then 10, was " + (res.last_debugger_activity))); } } synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); }
private void SendDebuggerActivity() { logWriter.println("Sending invalid command to ensure there is recent debugger activity!"); long stringID = org.apache.harmony.jpda.tests.jdwp.share.JDWPTestConstants.INVALID_OBJECT_ID; int expectedError = JDWPConstants.Error.INVALID_OBJECT; logWriter.println(("Send StringReference.Value command with id " + stringID)); org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket packet = new org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket(JDWPCommands.StringReferenceCommandSet.CommandSetID, JDWPCommands.StringReferenceCommandSet.ValueCommand); packet.setNextValueAsObjectID(stringID); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.performCommand(packet); checkReplyPacket(reply, "StringReference::Value command", expectedError); }
public void testSetStreamVolumeInAlarmsOnlyMode() throws java.lang.Exception { if (((mUseFixedVolume) || (mIsTelevision)) || (mIsSingleVolume)) { return; } try { android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_RING, 1, 0); mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 1, 0); setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALARMS); mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 3, 0); assertEquals(3, mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); mAudioManager.setStreamVolume(AudioManager.STREAM_RING, 7, 0); assertEquals(7, mAudioManager.getStreamVolume(AudioManager.STREAM_RING)); } finally { setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL); } }
public void testAccessRingMode() throws java.lang.Exception { android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setRingerMode(android.media.AudioManager.RINGER_MODE_NORMAL); assertEquals(android.media.AudioManager.RINGER_MODE_NORMAL, mAudioManager.getRingerMode()); mAudioManager.setRingerMode(android.media.AudioManager.RINGER_MODE_SILENT); if (((mUseFixedVolume) || (mIsTelevision)) || (mIsSingleVolume)) { assertEquals(android.media.AudioManager.RINGER_MODE_NORMAL, mAudioManager.getRingerMode()); } else { assertEquals(android.media.AudioManager.RINGER_MODE_SILENT, mAudioManager.getRingerMode()); } mAudioManager.setRingerMode(android.media.AudioManager.RINGER_MODE_VIBRATE); if (((mUseFixedVolume) || (mIsTelevision)) || (mIsSingleVolume)) { assertEquals(android.media.AudioManager.RINGER_MODE_NORMAL, mAudioManager.getRingerMode()); } else { assertEquals((mHasVibrator ? android.media.AudioManager.RINGER_MODE_VIBRATE : android.media.AudioManager.RINGER_MODE_SILENT), mAudioManager.getRingerMode()); } }
public void testSetStreamVolumeInTotalSilenceMode() throws java.lang.Exception { if (((mUseFixedVolume) || (mIsTelevision)) || (mIsSingleVolume)) { return; } try { android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_RING, 1, 0); mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 1, 0); setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_NONE); int musicVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC); mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 7, 0); assertEquals(musicVolume, mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); mAudioManager.setStreamVolume(AudioManager.STREAM_RING, 7, 0); assertEquals(7, mAudioManager.getStreamVolume(AudioManager.STREAM_RING)); } finally { setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL); } }
public void testAdjustVolumeInAlarmsOnlyMode() throws java.lang.Exception { if (((mUseFixedVolume) || (mIsTelevision)) || (mIsSingleVolume)) { return; } try { android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 1, 0); setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALARMS); int musicVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC); mAudioManager.adjustStreamVolume(AudioManager.STREAM_MUSIC, AudioManager.ADJUST_RAISE, 0); int volumeDelta = getVolumeDelta(mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); assertEquals((musicVolume + volumeDelta), mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); } finally { setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL); } }
public void testAdjustVolumeInTotalSilenceMode() throws java.lang.Exception { if (((mUseFixedVolume) || (mIsTelevision)) || (mIsSingleVolume)) { return; } try { android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 1, 0); setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_NONE); int musicVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC); mAudioManager.adjustStreamVolume(AudioManager.STREAM_MUSIC, AudioManager.ADJUST_RAISE, 0); assertEquals(musicVolume, mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); } finally { setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL); } }
public void testMuteDndUnaffectedStreams() throws java.lang.Exception { if (((mUseFixedVolume) || (mIsTelevision)) || (mIsSingleVolume)) { return; } int[] streams = new int[]{ android.media.AudioManager.STREAM_VOICE_CALL, android.media.AudioManager.STREAM_MUSIC, android.media.AudioManager.STREAM_ALARM }; int muteAffectedStreams = java.lang.System.getInt(mContext.getContentResolver(), MUTE_STREAMS_AFFECTED, ((((1 << (android.media.AudioManager.STREAM_MUSIC)) | (1 << (android.media.AudioManager.STREAM_RING))) | (1 << (android.media.AudioManager.STREAM_NOTIFICATION))) | (1 << (android.media.AudioManager.STREAM_SYSTEM)))); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setRingerMode(android.media.AudioManager.RINGER_MODE_NORMAL); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), false); for (int stream : streams) { mAudioManager.setStreamVolume(stream, mAudioManager.getStreamMaxVolume(stream), 0); if (((1 << stream) & muteAffectedStreams) == 0) { mAudioManager.adjustStreamVolume(stream, AudioManager.ADJUST_MUTE, 0); assertFalse((("Stream " + stream) + " should not be affected by mute."), mAudioManager.isStreamMute(stream)); mAudioManager.setStreamMute(stream, true); assertFalse((("Stream " + stream) + " should not be affected by mute."), mAudioManager.isStreamMute(stream)); mAudioManager.adjustStreamVolume(stream, AudioManager.ADJUST_TOGGLE_MUTE, 0); assertFalse((("Stream " + stream) + " should not be affected by mute."), mAudioManager.isStreamMute(stream)); continue; } testStreamMuting(stream); } }
public void testVolumeDndAffectedStream() throws java.lang.Exception { if ((((mUseFixedVolume) || (mHasVibrator)) || (mIsTelevision)) || (mIsSingleVolume)) { return; } android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 7, AudioManager.FLAG_ALLOW_RINGER_MODES); mAudioManager.setRingerMode(AudioManager.RINGER_MODE_NORMAL); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), false); try { mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 0, AudioManager.FLAG_ALLOW_RINGER_MODES); fail("Apps without notification policy access cannot change ringer mode"); } catch (java.lang.SecurityException e) { } mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 1, AudioManager.FLAG_ALLOW_RINGER_MODES); assertEquals("setStreamVolume did not change volume", 1, mAudioManager.getStreamVolume(AudioManager.STREAM_SYSTEM)); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setRingerMode(AudioManager.RINGER_MODE_SILENT); mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 0, AudioManager.FLAG_ALLOW_RINGER_MODES); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), false); try { mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 6, AudioManager.FLAG_ALLOW_RINGER_MODES); fail("Apps without notification policy access cannot change ringer mode"); } catch (java.lang.SecurityException e) { } }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getContext(); android.media.cts.Utils.enableAppOps(mContext.getPackageName(), android.media.cts.AudioManagerTest.APPOPS_OP_STR, getInstrumentation()); mAudioManager = ((android.media.AudioManager) (mContext.getSystemService(Context.AUDIO_SERVICE))); android.os.Vibrator vibrator = ((android.os.Vibrator) (mContext.getSystemService(Context.VIBRATOR_SERVICE))); mNm = ((android.app.NotificationManager) (mContext.getSystemService(Context.NOTIFICATION_SERVICE))); mHasVibrator = (vibrator != null) && (vibrator.hasVibrator()); mUseFixedVolume = mContext.getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier("config_useFixedVolume", "bool", "android")); android.content.pm.PackageManager packageManager = mContext.getPackageManager(); mIsTelevision = (packageManager != null) && ((packageManager.hasSystemFeature(PackageManager.FEATURE_LEANBACK)) || (packageManager.hasSystemFeature(PackageManager.FEATURE_TELEVISION))); mIsSingleVolume = android.media.AudioSystem.isSingleVolume(mContext); }
void doParentChildTest(java.lang.String testCase, android.server.cts.ParentChildTestBase.ParentChildTest t) throws java.lang.Exception { if (!(supportsSplitScreenMultiWindow())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, "Skipping test: no split multi-window support"); return; } doFullscreenTest(testCase, t); doDockedTest(testCase, t); }
private void playUri(final android.net.Uri uri, long timeToPlayMs, int usage, int contentType) throws java.lang.Exception { boolean isMusicPlayingBeforeTest = false; if (mAudioManager.isMusicActive()) { isMusicPlayingBeforeTest = true; } android.media.MediaPlayer mp = new android.media.MediaPlayer(); assertNotNull(mp); mp.setDataSource(mContext, uri); mp.setAudioAttributes(new android.media.AudioAttributes.Builder().setUsage(usage).setContentType(contentType).build()); mp.prepare(); mp.start(); java.lang.Thread.sleep(timeToPlayMs); mp.stop(); mp.release(); java.lang.Thread.sleep(timeToPlayMs); if (!isMusicPlayingBeforeTest) { assertFalse(mAudioManager.isMusicActive()); } }
private void handleSimLocked(int slotId, java.lang.String reason) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM))) { logd((("SIM" + (slotId + 1)) + " hot plug in")); com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = null; } java.lang.String iccId = com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]; if (iccId == null) { com.android.internal.telephony.uicc.IccRecords records = com.android.internal.telephony.SubscriptionInfoUpdater.mPhone[slotId].getIccCard().getIccRecords(); if ((records.getFullIccId()) == null) { logd("handleSimLocked: IccID null"); return; } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = records.getFullIccId(); } else { logd(((("NOT Querying IccId its already set sIccid[" + slotId) + "]=") + iccId)); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED, reason); }
public void registerForLockedRecordsLoaded(android.os.Handler h, int what, java.lang.Object obj) { if (mDestroyed.get()) { return; } android.os.Registrant r = new android.os.Registrant(h, what, obj); mLockedRecordsLoadedRegistrants.add(r); if (((mRecordsToLoad) == 0) && (mLockedRecordsRequested)) { r.notifyRegistrant(new android.os.AsyncResult(null, null, null)); } }
public void testStackFocusSwitchOnTouchEvent() throws java.lang.Exception { if (!(supportsMultiDisplay())) { return; } final android.server.cts.DisplayState newDisplay = new android.server.cts.VirtualDisplayBuilder(this).build(); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY }); mAmWmState.assertFocusedActivity("Focus must be switched back to primary display", android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY); launchActivityOnDisplay(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, newDisplay.mDisplayId); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME }); mAmWmState.assertFocusedActivity("Activity launched on secondary display must be focused", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); final android.server.cts.ActivityManagerDisplayTests.ReportedDisplayMetrics displayMetrics = getDisplayMetrics(); final int width = displayMetrics.getWidth(); final int height = displayMetrics.getHeight(); executeShellCommand(((("input tap " + (width / 2)) + " ") + (height / 2))); final java.lang.String activityName = (mVrHeadset) ? android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME : android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY; mAmWmState.computeState(mDevice, new java.lang.String[]{ activityName }); mAmWmState.assertFocusedActivity("Focus must be switched back to the correct display", activityName); }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mInitialDisplayMetrics = getDisplayMetrics(); mVrHeadset = isVrHeadset(); final android.server.cts.DisplayState vrDisplay = getDisplaysStates().getDisplayState(android.server.cts.ActivityManagerDisplayTests.VR_VIRTUAL_DISPLAY_WIDTH, android.server.cts.ActivityManagerDisplayTests.VR_VIRTUAL_DISPLAY_HEIGHT, android.server.cts.ActivityManagerDisplayTests.VR_VIRTUAL_DISPLAY_DPI); mVrVirtualDisplayId = (mVrHeadset) ? vrDisplay.mDisplayId : -1; }
@android.platform.test.annotations.Presubmit public void testConsequentLaunchActivity() throws java.lang.Exception { if (!(supportsMultiDisplay())) { return; } final android.server.cts.DisplayState newDisplay = new android.server.cts.VirtualDisplayBuilder(this).build(); launchActivityOnDisplay(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, newDisplay.mDisplayId); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME }); mAmWmState.assertFocusedActivity("Activity launched on secondary display must be focused", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); launchActivity(android.server.cts.LAUNCHING_ACTIVITY); mAmWmState.computeState(mDevice, new java.lang.String[]{ LAUNCHING_ACTIVITY }); mAmWmState.assertFocusedActivity("Launched activity must be focused", android.server.cts.LAUNCHING_ACTIVITY); int displayId = (mVrHeadset) ? mVrVirtualDisplayId : android.server.cts.ActivityAndWindowManagersState.DEFAULT_DISPLAY_ID; final int frontStackId = mAmWmState.getAmState().getFrontStackId(displayId); final android.server.cts.ActivityManagerState.ActivityStack frontStack = mAmWmState.getAmState().getStackById(frontStackId); assertEquals("Launched activity must be resumed in front stack", getActivityComponentName(android.server.cts.LAUNCHING_ACTIVITY), frontStack.mResumedActivity); assertEquals("Front stack must be on the correct display", displayId, frontStack.mDisplayId); }
@android.platform.test.annotations.Presubmit public void testMoveTaskBetweenDisplays() throws java.lang.Exception { if (!(supportsMultiDisplay())) { return; } final android.server.cts.DisplayState newDisplay = new android.server.cts.VirtualDisplayBuilder(this).build(); mAmWmState.assertVisibility(android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY, true); mAmWmState.assertFocusedActivity("Virtual display activity must be focused", android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY); int displayId = (mVrHeadset) ? mVrVirtualDisplayId : android.server.cts.ActivityAndWindowManagersState.DEFAULT_DISPLAY_ID; final int defaultDisplayStackId = mAmWmState.getAmState().getFocusedStackId(); android.server.cts.ActivityManagerState.ActivityStack focusedStack = mAmWmState.getAmState().getStackById(defaultDisplayStackId); assertEquals("Focus must remain on the correct display", displayId, focusedStack.mDisplayId); launchActivityOnDisplay(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, newDisplay.mDisplayId); mAmWmState.assertFocusedActivity("Focus must be on secondary display", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); int focusedStackId = mAmWmState.getAmState().getFocusedStackId(); focusedStack = mAmWmState.getAmState().getStackById(focusedStackId); assertEquals("Focused stack must be on secondary display", newDisplay.mDisplayId, focusedStack.mDisplayId); moveActivityToStack(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, defaultDisplayStackId); mAmWmState.waitForFocusedStack(mDevice, defaultDisplayStackId); mAmWmState.assertFocusedActivity("Focus must be on moved activity", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); focusedStackId = mAmWmState.getAmState().getFocusedStackId(); focusedStack = mAmWmState.getAmState().getStackById(focusedStackId); assertEquals("Focus must return to primary display", displayId, focusedStack.mDisplayId); }
private boolean isVrHeadset() { try { if (mDevice.getProperty(android.server.cts.ActivityManagerDisplayTests.VR_STANDALONE_DEVICE).equals("1")) { return true; } return false; } catch (com.android.tradefed.device.DeviceNotAvailableException e) { return false; } }
@org.junit.Test public void testSocketResourceTrackerLimitation() throws java.lang.Exception { java.util.List<IpSecUdpEncapResponse> openUdpEncapSockets = new java.util.ArrayList<IpSecUdpEncapResponse>(); for (int i = 0; i < (com.android.server.IpSecServiceTest.MAX_NUM_ENCAP_SOCKETS); i++) { IpSecUdpEncapResponse newUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(newUdpEncapSocket); if ((IpSecManager.Status.OK) != (newUdpEncapSocket.status)) { break; } openUdpEncapSockets.add(newUdpEncapSocket); } assertTrue("Number of open UDP encap sockets is negative", ((openUdpEncapSockets.size()) > 0)); assertTrue("Number of open UDP encap sockets is out of bound", ((openUdpEncapSockets.size()) < (com.android.server.IpSecServiceTest.MAX_NUM_ENCAP_SOCKETS))); IpSecUdpEncapResponse extraUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(extraUdpEncapSocket); assertEquals(IpSecManager.Status.RESOURCE_UNAVAILABLE, extraUdpEncapSocket.status); mIpSecService.closeUdpEncapsulationSocket(openUdpEncapSockets.get(0).resourceId); openUdpEncapSockets.get(0).fileDescriptor.close(); openUdpEncapSockets.remove(0); extraUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(extraUdpEncapSocket); assertEquals(IpSecManager.Status.OK, extraUdpEncapSocket.status); openUdpEncapSockets.add(extraUdpEncapSocket); for (IpSecUdpEncapResponse openSocket : openUdpEncapSockets) { mIpSecService.closeUdpEncapsulationSocket(openSocket.resourceId); openSocket.fileDescriptor.close(); } }
private void check_joinSourceSpecific(java.net.InetAddress senderBindAddress, java.net.InetAddress receiverBindAddress, java.net.InetAddress groupAddress, java.net.InetAddress badSenderAddress, java.net.NetworkInterface networkInterface) throws java.lang.Exception { java.nio.channels.DatagramChannel sendingChannel = java.nio.channels.DatagramChannel.open(); sendingChannel.bind(new java.net.InetSocketAddress(senderBindAddress, 0)); java.net.InetSocketAddress sendingAddress = ((java.net.InetSocketAddress) (sendingChannel.getLocalAddress())); java.nio.channels.DatagramChannel receivingChannel = java.nio.channels.DatagramChannel.open(); receivingChannel.bind(new java.net.InetSocketAddress(receiverBindAddress, 0)); libcore.java.nio.channels.DatagramChannelMulticastTest.configureChannelForReceiving(receivingChannel); java.net.InetSocketAddress localReceivingAddress = ((java.net.InetSocketAddress) (receivingChannel.getLocalAddress())); java.net.InetSocketAddress groupSocketAddress = new java.net.InetSocketAddress(groupAddress, localReceivingAddress.getPort()); java.nio.channels.MembershipKey membershipKey1 = receivingChannel.join(groupSocketAddress.getAddress(), networkInterface, senderBindAddress); java.nio.ByteBuffer receiveBuffer = java.nio.ByteBuffer.allocate(10); java.lang.String msg1 = "Hello1"; libcore.java.nio.channels.DatagramChannelMulticastTest.sendMulticastMessage(sendingChannel, msg1, groupSocketAddress, networkInterface); java.net.InetSocketAddress sourceAddress1 = ((java.net.InetSocketAddress) (receivingChannel.receive(receiveBuffer))); assertEquals(sourceAddress1, sendingAddress); assertEquals(msg1, new java.lang.String(receiveBuffer.array(), 0, receiveBuffer.position())); membershipKey1.drop(); receivingChannel.join(groupSocketAddress.getAddress(), networkInterface, badSenderAddress); java.lang.String msg2 = "Hello2"; libcore.java.nio.channels.DatagramChannelMulticastTest.sendMulticastMessage(sendingChannel, msg2, groupSocketAddress, networkInterface); java.net.InetSocketAddress sourceAddress2 = ((java.net.InetSocketAddress) (receivingChannel.receive(receiveBuffer))); assertNull(sourceAddress2); receivingChannel.close(); sendingChannel.close(); }
private static void sendMulticastMessage(java.net.InetAddress group, int port, java.lang.String msg, java.net.NetworkInterface sendingInterface) throws java.io.IOException { java.nio.channels.DatagramChannel dc = java.nio.channels.DatagramChannel.open(); libcore.java.nio.channels.DatagramChannelMulticastTest.sendMulticastMessage(dc, msg, new java.net.InetSocketAddress(group, port), sendingInterface); dc.close(); }
public void testCopyDocument_CancelFromNotification() throws java.lang.Exception { bots.roots.openRoot(com.android.documentsui.StubProvider.ROOT_0_ID); bots.directory.findDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); device.waitForIdle(); bots.directory.clickDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); device.waitForIdle(); bots.main.clickToolbarOverflowItem(com.android.documentsui.CancelFromNotificationUiTest.COPY); device.waitForIdle(); bots.roots.openRoot(com.android.documentsui.StubProvider.ROOT_1_ID); bots.main.clickDialogOkButton(); device.waitForIdle(); try { mCountDownLatch.await(60, java.util.concurrent.TimeUnit.SECONDS); } catch (java.lang.Exception e) { fail(("Cannot wait because of error." + (e.toString()))); } assertTrue(mErrorReason, mOperationExecuted); bots.roots.openRoot(com.android.documentsui.StubProvider.ROOT_1_ID); device.waitForIdle(); assertFalse(bots.directory.hasDocuments(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE)); bots.roots.openRoot(com.android.documentsui.StubProvider.ROOT_0_ID); device.waitForIdle(); assertTrue(bots.directory.hasDocuments(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE)); }
public void testMoveDocument_Cancel() throws java.lang.Exception { bots.roots.openRoot(com.android.documentsui.StubProvider.ROOT_0_ID); bots.directory.findDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); device.waitForIdle(); bots.directory.clickDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); device.waitForIdle(); bots.main.clickToolbarOverflowItem(com.android.documentsui.CancelFromNotificationUiTest.MOVE); device.waitForIdle(); bots.main.clickDialogCancelButton(); device.waitForIdle(); bots.directory.waitForDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); }
public void testCopyDocument_Cancel() throws java.lang.Exception { bots.roots.openRoot(com.android.documentsui.StubProvider.ROOT_0_ID); bots.directory.findDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); device.waitForIdle(); bots.directory.clickDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); device.waitForIdle(); bots.main.clickToolbarOverflowItem(com.android.documentsui.CancelFromNotificationUiTest.COPY); device.waitForIdle(); bots.main.clickDialogCancelButton(); device.waitForIdle(); bots.directory.waitForDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); }
public void testMoveDocument_CancelFromNotification() throws java.lang.Exception { bots.roots.openRoot(com.android.documentsui.StubProvider.ROOT_0_ID); bots.directory.findDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); device.waitForIdle(); bots.directory.clickDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); device.waitForIdle(); bots.main.clickToolbarOverflowItem(com.android.documentsui.CancelFromNotificationUiTest.MOVE); device.waitForIdle(); bots.roots.openRoot(com.android.documentsui.StubProvider.ROOT_1_ID); bots.main.clickDialogOkButton(); device.waitForIdle(); try { mCountDownLatch.await(60, java.util.concurrent.TimeUnit.SECONDS); } catch (java.lang.Exception e) { fail(("Cannot wait because of error." + (e.toString()))); } assertTrue(mErrorReason, mOperationExecuted); bots.roots.openRoot(com.android.documentsui.StubProvider.ROOT_1_ID); device.waitForIdle(); assertFalse(bots.directory.hasDocuments(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE)); bots.roots.openRoot(com.android.documentsui.StubProvider.ROOT_0_ID); device.waitForIdle(); assertTrue(bots.directory.hasDocuments(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE)); }
@java.lang.Override public void onResume() { super.onResume(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ((("onResume, slot id: " + (mSlotId)) + ",") + (mState))); appService.indicateMenuVisibility(true, mSlotId); if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { mStkMenu = appService.getMainMenu(mSlotId); } else { mStkMenu = appService.getMenu(mSlotId); } if ((mStkMenu) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "menu is null"); cancelTimeOut(); finish(); return; } if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "set main menu instance."); appService.getStkContext(mSlotId).setMainActivityInstance(this); } displayMenu(); startTimeOut(); mAcceptUsersInput = true; showProgressBar(false); invalidateOptionsMenu(); android.support.v4.content.LocalBroadcastManager.getInstance(this).registerReceiver(mLocalBroadcastReceiver, new android.content.IntentFilter(StkAppService.SESSION_ENDED)); }
@java.lang.Override public void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "onCreate"); requestWindowFeature(Window.FEATURE_NO_TITLE); setContentView(R.layout.stk_menu_list); mInstance = this; mTitleTextView = ((android.widget.TextView) (findViewById(R.id.title_text))); mTitleIconView = ((android.widget.ImageView) (findViewById(R.id.title_icon))); mProgressView = ((android.widget.ProgressBar) (findViewById(R.id.progress_bar))); mContext = getBaseContext(); getListView().setOnCreateContextMenuListener(this); initFromIntent(getIntent()); }
@java.lang.Override public boolean onOptionsItemSelected(android.view.MenuItem item) { if (!(mAcceptUsersInput)) { return true; } switch (item.getItemId()) { case StkApp.MENU_ID_END_SESSION : cancelTimeOut(); sendResponse(StkAppService.RES_ID_END_SESSION); cancelTimeOut(); finish(); return true; case StkApp.MENU_ID_HELP : cancelTimeOut(); int position = getSelectedItemPosition(); com.android.internal.telephony.cat.Item stkItem = getSelectedItem(position); if (stkItem == null) { break; } sendResponse(StkAppService.RES_ID_MENU_SELECTION, stkItem.id, true); return true; } return super.onOptionsItemSelected(item); }
@java.lang.Override protected void onListItemClick(android.widget.ListView l, android.view.View v, int position, long id) { super.onListItemClick(l, v, position, id); if (!(mAcceptUsersInput)) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "mAcceptUsersInput:false"); return; } com.android.internal.telephony.cat.Item item = getSelectedItem(position); if (item == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "Item is null"); return; } com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ((("onListItemClick Id: " + (item.id)) + ", mState: ") + (mState))); if ((mState) == (com.android.stk.StkMenuActivity.STATE_SECONDARY)) { appService.getStkContext(mSlotId).setPendingActivityInstance(this); } cancelTimeOut(); sendResponse(StkAppService.RES_ID_MENU_SELECTION, item.id, false); }
@java.lang.Override public void onPause() { super.onPause(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ((("onPause, slot id: " + (mSlotId)) + ",") + (mState))); if ((appService) != null) { appService.indicateMenuVisibility(false, mSlotId); } else { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "onPause: null appService."); } android.support.v4.content.LocalBroadcastManager.getInstance(this).unregisterReceiver(mLocalBroadcastReceiver); }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getContext(); android.media.cts.Utils.enableAppOps(mContext.getPackageName(), android.media.cts.AudioManagerTest.APPOPS_OP_STR, getInstrumentation()); mAudioManager = ((android.media.AudioManager) (mContext.getSystemService(Context.AUDIO_SERVICE))); android.os.Vibrator vibrator = ((android.os.Vibrator) (mContext.getSystemService(Context.VIBRATOR_SERVICE))); mNm = ((android.app.NotificationManager) (mContext.getSystemService(Context.NOTIFICATION_SERVICE))); mHasVibrator = (vibrator != null) && (vibrator.hasVibrator()); mUseFixedVolume = mContext.getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier("config_useFixedVolume", "bool", "android")); android.content.pm.PackageManager packageManager = mContext.getPackageManager(); mIsTelevision = (packageManager != null) && ((packageManager.hasSystemFeature(PackageManager.FEATURE_LEANBACK)) || (packageManager.hasSystemFeature(PackageManager.FEATURE_TELEVISION))); final int[] streamTypes = new int[]{ android.media.AudioManager.STREAM_VOICE_CALL, android.media.AudioManager.STREAM_SYSTEM, android.media.AudioManager.STREAM_RING, android.media.AudioManager.STREAM_MUSIC, android.media.AudioManager.STREAM_ALARM, android.media.AudioManager.STREAM_NOTIFICATION, android.media.AudioManager.STREAM_DTMF }; mOriginalRingerMode = mAudioManager.getRingerMode(); for (int streamType : streamTypes) { mOriginalStreamVolumes.put(streamType, mAudioManager.getStreamVolume(streamType)); } }
public boolean isTypeBarring() { return ((((((((mServiceType) == (com.android.ims.ImsSsData.SS_BAOC)) || ((mServiceType) == (com.android.ims.ImsSsData.SS_BAOIC))) || ((mServiceType) == (com.android.ims.ImsSsData.SS_BAOIC_EXC_HOME))) || ((mServiceType) == (com.android.ims.ImsSsData.SS_BAIC))) || ((mServiceType) == (com.android.ims.ImsSsData.SS_BAIC_ROAMING))) || ((mServiceType) == (com.android.ims.ImsSsData.SS_ALL_BARRING))) || ((mServiceType) == (com.android.ims.ImsSsData.SS_OUTGOING_BARRING))) || ((mServiceType) == (com.android.ims.ImsSsData.SS_INCOMING_BARRING)); }
public void unSetSuppServiceIndication(android.os.Handler h) { mSsIndicationRegistrant.clear(); }
public void setSuppServiceIndication(android.os.Handler h, int what, java.lang.Object obj) { mSsIndicationRegistrant = new android.os.Registrant(h, what, obj); }
@java.lang.Override public void onSupplementaryServiceIndication(com.android.ims.ImsSsData ssData) { if ((mSsIndicationRegistrant) != null) { mSsIndicationRegistrant.notifyRegistrant(new android.os.AsyncResult(null, ssData, null)); } }
public boolean isTypeClir() { return (mServiceType) == (com.android.ims.ImsSsData.SS_CLIR); }
public void processImsSsData(android.os.AsyncResult data) { mIsSsInfo = true; try { com.android.ims.ImsSsData ssData = ((com.android.ims.ImsSsData) (data.result)); parseSsData(ssData); } catch (java.lang.ClassCastException ex) { android.telephony.Rlog.e(com.android.internal.telephony.imsphone.ImsPhoneMmiCode.LOG_TAG, ("Class Cast Exception in parsing SS Data : " + ex)); } catch (java.lang.NullPointerException ex) { android.telephony.Rlog.e(com.android.internal.telephony.imsphone.ImsPhoneMmiCode.LOG_TAG, ("Null Pointer Exception in parsing SS Data : " + ex)); } }
public void dispose() { if (com.android.internal.telephony.imsphone.ImsPhoneCallTracker.DBG) log("dispose"); mRingingCall.dispose(); mBackgroundCall.dispose(); mForegroundCall.dispose(); mHandoverCall.dispose(); clearDisconnected(); if ((mUtInterface) != null) { mUtInterface.unSetSuppServiceIndication(this); } mPhone.getContext().unregisterReceiver(mReceiver); mPhone.getDefaultPhone().unregisterForDataEnabledChanged(this); removeMessages(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.EVENT_GET_IMS_SERVICE); }
private void startListeningForCalls() throws com.android.ims.ImsException { mImsServiceRetryCount = 0; mServiceId = mImsManager.open(ImsServiceClass.MMTEL, createIncomingCallPendingIntent(), mImsConnectionStateListener); mImsManager.setImsConfigListener(mImsConfigListener); getEcbmInterface().setEcbmStateListener(mPhone.getImsEcbmStateListener()); if (mPhone.isInEcm()) { mPhone.exitEmergencyCallbackMode(); } int mPreferredTtyMode = Settings.Secure.getInt(mPhone.getContext().getContentResolver(), Settings.Secure.PREFERRED_TTY_MODE, Phone.TTY_MODE_OFF); mImsManager.setUiTTYMode(mPhone.getContext(), mPreferredTtyMode, null); com.android.ims.ImsMultiEndpoint multiEndpoint = getMultiEndpointInterface(); if (multiEndpoint != null) { multiEndpoint.setExternalCallStateListener(mPhone.getExternalCallTracker().getExternalCallStateListener()); } mUtInterface = getUtInterface(); mUtInterface.setSuppServiceIndication(this, com.android.internal.telephony.imsphone.ImsPhoneCallTracker.EVENT_SUPP_SERVICE_INDICATION, null); if (mCarrierConfigLoaded) { com.android.ims.ImsManager.updateImsServiceConfig(mPhone.getContext(), mPhone.getPhoneId(), true); } }
public void setSuppServiceIndication(android.os.Handler handle, int event, java.lang.Object object);
public void unSetSuppServiceIndication(android.os.Handler handler);
private void readFromParcel(android.os.Parcel in) { mServiceType = in.readInt(); mRequestType = in.readInt(); mTeleserviceType = in.readInt(); mServiceClass = in.readInt(); mResult = in.readInt(); mSsInfo = in.createIntArray(); mCfInfo = ((com.android.ims.ImsCallForwardInfo[]) (in.readParcelableArray(this.getClass().getClassLoader()))); }
public boolean isTypeUnConditional() { return ((mServiceType) == (com.android.ims.ImsSsData.SS_CFU)) || ((mServiceType) == (com.android.ims.ImsSsData.SS_CF_ALL)); }
@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mServiceType); out.writeInt(mRequestType); out.writeInt(mTeleserviceType); out.writeInt(mServiceClass); out.writeInt(mResult); out.writeIntArray(mSsInfo); out.writeParcelableArray(mCfInfo, 0); }
public boolean isTypeCF() { return ((((((mServiceType) == (com.android.ims.ImsSsData.SS_CFU)) || ((mServiceType) == (com.android.ims.ImsSsData.SS_CF_BUSY))) || ((mServiceType) == (com.android.ims.ImsSsData.SS_CF_NO_REPLY))) || ((mServiceType) == (com.android.ims.ImsSsData.SS_CF_NOT_REACHABLE))) || ((mServiceType) == (com.android.ims.ImsSsData.SS_CF_ALL))) || ((mServiceType) == (com.android.ims.ImsSsData.SS_CF_ALL_CONDITIONAL)); }
public boolean isTypeInterrogation() { return (mRequestType) == (com.android.ims.ImsSsData.SS_INTERROGATION); }
public boolean isTypeColp() { return (mServiceType) == (com.android.ims.ImsSsData.SS_COLP); }
public boolean isTypeColr() { return (mServiceType) == (com.android.ims.ImsSsData.SS_COLR); }
public boolean isTypeCW() { return (mServiceType) == (com.android.ims.ImsSsData.SS_WAIT); }
public boolean isTypeClip() { return (mServiceType) == (com.android.ims.ImsSsData.SS_CLIP); }
public boolean isTypeIcb() { return ((mServiceType) == (com.android.ims.ImsSsData.SS_INCOMING_BARRING_DN)) || ((mServiceType) == (com.android.ims.ImsSsData.SS_INCOMING_BARRING_ANONYMOUS)); }
public java.lang.String toString() { return ((((((((("[ImsSsData] " + "ServiceType: ") + (mServiceType)) + " RequestType: ") + (mRequestType)) + " TeleserviceType: ") + (mTeleserviceType)) + " ServiceClass: ") + (mServiceClass)) + " Result: ") + (mResult); }
@org.junit.Test public void testReportError() throws java.lang.Exception { doReturn(true).when(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).reportError(anyByte()); org.junit.Assert.assertEquals(false, mHidDeviceService.reportError(mTestDevice, com.android.bluetooth.hid.HidDeviceTest.SAMPLE_REPORT_ERROR)); doReturn(true).when(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).registerApp(anyString(), anyString(), anyString(), anyByte(), any(byte[].class), isNull(), isNull()); mHidDeviceService.registerApp(mSettings, null, null, null); mHidDeviceService.onApplicationStateChangedFromNative(mTestDevice, true); java.lang.Thread.sleep(com.android.bluetooth.hid.HidDeviceTest.TIMEOUT_MS); org.junit.Assert.assertEquals(true, mHidDeviceService.reportError(mTestDevice, com.android.bluetooth.hid.HidDeviceTest.SAMPLE_REPORT_ERROR)); verify(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).reportError(eq(com.android.bluetooth.hid.HidDeviceTest.SAMPLE_REPORT_ERROR)); doReturn(true).when(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).unregisterApp(); org.junit.Assert.assertEquals(true, mHidDeviceService.unregisterApp()); }
@org.junit.After public void tearDown() { mHidDeviceService.stop(); mHidDeviceService.cleanup(); mHidDeviceService = null; reset(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface); mTargetContext.unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedQueue.clear(); }
@org.junit.Test public void testRegisterApp() throws java.lang.Exception { doReturn(true).when(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).registerApp(anyString(), anyString(), anyString(), anyByte(), any(byte[].class), isNull(), isNull()); verify(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface, never()).registerApp(anyString(), anyString(), anyString(), anyByte(), any(byte[].class), isNull(), isNull()); org.junit.Assert.assertTrue(mHidDeviceService.registerApp(mSettings, null, null, null)); verify(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).registerApp(anyString(), anyString(), anyString(), anyByte(), any(byte[].class), isNull(), isNull()); doReturn(true).when(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).unregisterApp(); org.junit.Assert.assertEquals(true, mHidDeviceService.unregisterApp()); }
@org.junit.Test public void testSendReport() throws java.lang.Exception { doReturn(true).when(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).sendReport(anyInt(), any(byte[].class)); org.junit.Assert.assertEquals(false, mHidDeviceService.sendReport(mTestDevice, com.android.bluetooth.hid.HidDeviceTest.SAMPLE_REPORT_ID, com.android.bluetooth.hid.HidDeviceTest.SAMPLE_OUTGOING_HID_REPORT)); doReturn(true).when(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).registerApp(anyString(), anyString(), anyString(), anyByte(), any(byte[].class), isNull(), isNull()); mHidDeviceService.registerApp(mSettings, null, null, null); mHidDeviceService.onApplicationStateChangedFromNative(mTestDevice, true); java.lang.Thread.sleep(com.android.bluetooth.hid.HidDeviceTest.TIMEOUT_MS); org.junit.Assert.assertEquals(true, mHidDeviceService.sendReport(mTestDevice, com.android.bluetooth.hid.HidDeviceTest.SAMPLE_REPORT_ID, com.android.bluetooth.hid.HidDeviceTest.SAMPLE_OUTGOING_HID_REPORT)); verify(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).sendReport(eq(((int) (com.android.bluetooth.hid.HidDeviceTest.SAMPLE_REPORT_ID))), eq(com.android.bluetooth.hid.HidDeviceTest.SAMPLE_OUTGOING_HID_REPORT)); doReturn(true).when(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).unregisterApp(); org.junit.Assert.assertEquals(true, mHidDeviceService.unregisterApp()); }
private static void addFileWithFootersToDropBox(android.os.DropBoxManager db, java.util.HashMap<java.lang.String, java.lang.Long> timestamps, java.lang.String headers, java.lang.String footers, java.lang.String filename, int maxSize, java.lang.String tag) throws java.io.IOException { if ((db == null) || (!(db.isTagEnabled(tag)))) return; java.io.File file = new java.io.File(filename); long fileTime = file.lastModified(); if (fileTime <= 0) return; if ((timestamps.containsKey(filename)) && ((timestamps.get(filename)) == fileTime)) { return; } timestamps.put(filename, fileTime); android.util.Slog.i(com.android.server.BootReceiver.TAG, (((("Copying " + filename) + " to DropBox (") + tag) + ")")); db.addText(tag, ((headers + (android.os.FileUtils.readTextFile(file, maxSize, "[[TRUNCATED]]\n"))) + footers)); android.util.Slog.i(com.android.server.BootReceiver.TAG, java.lang.String.format("Copied to Dropbox: filename=%s, maxSize=%d, tag=%s", filename, maxSize, tag)); }
public void test_23831() throws java.lang.Exception { byte[] bytes = new byte[]{ ((byte) (245)), ((byte) (169)), ((byte) (234)), ((byte) (33)) }; java.lang.String expected = "\ufffd\ufffd\ufffd!"; java.nio.charset.CharsetDecoder decoder = java.nio.charset.Charset.forName("UTF-8").newDecoder(); decoder.onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE); assertEquals(expected, decoder.decode(java.nio.ByteBuffer.wrap(bytes)).toString()); }
@java.lang.Override public void onResume() { super.onResume(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ((("onResume, slot id: " + (mSlotId)) + ",") + (mState))); appService.indicateMenuVisibility(true, mSlotId); if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { mStkMenu = appService.getMainMenu(mSlotId); } else { mStkMenu = appService.getMenu(mSlotId); } if ((mStkMenu) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "menu is null"); cancelTimeOut(); finish(); return; } displayMenu(); startTimeOut(); if (!(mAcceptUsersInput)) { mAcceptUsersInput = true; } invalidateOptionsMenu(); mProgressView.setIndeterminate(false); mProgressView.setVisibility(View.GONE); }
@java.lang.Override public boolean onKeyDown(int keyCode, android.view.KeyEvent event) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ("mAcceptUsersInput: " + (mAcceptUsersInput))); if (!(mAcceptUsersInput)) { return true; } switch (keyCode) { case android.view.KeyEvent.KEYCODE_BACK : com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, (("KEYCODE_BACK - mState[" + (mState)) + "]")); switch (mState) { case com.android.stk.StkMenuActivity.STATE_SECONDARY : com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "STATE_SECONDARY"); cancelTimeOut(); mAcceptUsersInput = false; appService.getStkContext(mSlotId).setPendingActivityInstance(this); sendResponse(StkAppService.RES_ID_BACKWARD); return true; case com.android.stk.StkMenuActivity.STATE_MAIN : com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "STATE_MAIN"); cancelTimeOut(); finish(); return true; } break; } return super.onKeyDown(keyCode, event); }
@java.lang.Override public void onDestroy() { getListView().setOnCreateContextMenuListener(null); super.onDestroy(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, (("onDestroy" + ",") + (mState))); if ((((mState) == (com.android.stk.StkMenuActivity.STATE_SECONDARY)) && (!(mIsResponseSent))) && (!(appService.isMenuPending(mSlotId)))) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "handleDestroy - Send End Session"); sendResponse(StkAppService.RES_ID_END_SESSION); } }
public void setActionBarTitle(android.app.ActionBar actionBar, android.content.res.Resources res, int resId) { if ((actionBar == null) || (android.text.TextUtils.isEmpty(com.android.phone.SubscriptionInfoHelper.sSubLabel))) { return; } if (!(android.telephony.TelephonyManager.from(com.android.phone.SubscriptionInfoHelper.sContext).isMultiSimEnabled())) { return; } java.lang.String title = java.lang.String.format(res.getString(resId), com.android.phone.SubscriptionInfoHelper.sSubLabel); actionBar.setTitle(title); }
public com.android.internal.telephony.Phone getPhone() { return hasSubId() ? com.android.internal.telephony.PhoneFactory.getPhone(android.telephony.SubscriptionManager.getPhoneId(com.android.phone.SubscriptionInfoHelper.sSubId)) : com.android.phone.PhoneGlobals.getPhone(); }
public android.content.Intent getIntent(java.lang.Class newActivityClass) { android.content.Intent intent = new android.content.Intent(com.android.phone.SubscriptionInfoHelper.sContext, newActivityClass); if (hasSubId()) { intent.putExtra(com.android.phone.SubscriptionInfoHelper.SUB_ID_EXTRA, com.android.phone.SubscriptionInfoHelper.sSubId); } if (!(android.text.TextUtils.isEmpty(com.android.phone.SubscriptionInfoHelper.sSubLabel))) { intent.putExtra(com.android.phone.SubscriptionInfoHelper.SUB_LABEL_EXTRA, com.android.phone.SubscriptionInfoHelper.sSubLabel); } return intent; }
public boolean hasSubId() { return (com.android.phone.SubscriptionInfoHelper.sSubId) != (android.telephony.SubscriptionManager.INVALID_SUBSCRIPTION_ID); }
public int getSubId() { return com.android.phone.SubscriptionInfoHelper.sSubId; }
@java.lang.Override public boolean processMessage(android.os.Message msg) { android.util.Log.d(com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.SetBrowsedPlayer.STATE_TAG, ("processMessage " + msg)); switch (msg.what) { case com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.MESSAGE_PROCESS_SET_BROWSED_PLAYER : android.util.Log.d(com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.SetBrowsedPlayer.STATE_TAG, ("player depth " + (msg.arg2))); mBrowseDepth = msg.arg2; if (((mBrowseDepth) == 0) && ((msg.arg1) == 0)) { broadcastFolderList(mID, com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.EMPTY_MEDIA_ITEM_LIST); transitionTo(mConnected); } else { mMoveToRoot.setFolder(mID); transitionTo(mMoveToRoot); sendMessageDelayed(com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.MESSAGE_INTERNAL_CMD_TIMEOUT, com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.CMD_TIMEOUT_MILLIS); } mBrowseTree.setCurrentBrowsedFolder(mID); mBrowseTree.setCurrentBrowsedPlayer(mID); break; case com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.MESSAGE_INTERNAL_CMD_TIMEOUT : broadcastFolderList(mID, com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.EMPTY_MEDIA_ITEM_LIST); transitionTo(mConnected); break; default : android.util.Log.d(com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.SetBrowsedPlayer.STATE_TAG, (("deferring message " + msg) + " to connected!")); deferMessage(msg); } return true; }
private boolean isCarrierRttSupported() { android.os.PersistableBundle b = com.android.phone.PhoneGlobals.getInstance().getCarrierConfigForSubId(mPhone.getSubId()); return (b != null) && (b.getBoolean(CarrierConfigManager.KEY_RTT_SUPPORTED)); }
public static void ensureCompiledCallThroughEntrypoint(boolean call) { int count = 0; while (!(Main.hasJitCompiledEntrypoint(Main.class, "callThrough"))) { int limit = (call) ? 1 << (java.lang.Math.min(count, 12)) : 0; for (int i = 0; i < limit; ++i) { Main.callThrough(Main.class, "doNothing"); } try { java.lang.Thread.sleep((count >= 12 ? 200 : 100)); } catch (java.lang.Exception e) { } if ((++count) == 50) { throw new java.lang.Error("TIMEOUT"); } } }
@java.lang.Override public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { if (android.bluetooth.BluetoothPbap.VDBG) { android.bluetooth.BluetoothPbap.log("getConnectedDevices()"); } final android.bluetooth.IBluetoothPbap service = mService; if (service != null) { try { return service.getConnectedDevices(); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothPbap.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothPbap.TAG, "Proxy not attached to service"); } return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); }
void disconnect(android.bluetooth.BluetoothDevice device) { synchronized(this) { if ((mState) == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); setState(BluetoothProfile.STATE_DISCONNECTED, BluetoothPbap.RESULT_CANCELED); } } }
java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<>(); if ((mRemoteDevice) != null) { devices.add(mRemoteDevice); } return devices; }
@java.lang.Override public java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { if (android.bluetooth.BluetoothPbap.VDBG) { android.bluetooth.BluetoothPbap.log(("getDevicesMatchingConnectionStates: states=" + (java.util.Arrays.toString(states)))); } final android.bluetooth.IBluetoothPbap service = mService; if (service != null) { try { return service.getDevicesMatchingConnectionStates(states); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothPbap.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothPbap.TAG, "Proxy not attached to service"); } return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); }
@java.lang.Override public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "getConnectedDevices"); } com.android.bluetooth.pbap.BluetoothPbapService service = getService(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM); if (service == null) { return new java.util.ArrayList<>(0); } return service.getConnectedDevices(); }
@java.lang.Override public int getConnectionState(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("getConnectionState: " + device)); } com.android.bluetooth.pbap.BluetoothPbapService service = getService(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM); if (service == null) { return android.bluetooth.BluetoothAdapter.STATE_DISCONNECTED; } return service.getConnectionState(device); }
@java.lang.Override public int getConnectionState(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothPbap.VDBG) { android.bluetooth.BluetoothPbap.log(("getConnectionState: device=" + device)); } final android.bluetooth.IBluetoothPbap service = mService; if (service != null) { try { return service.getConnectionState(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothPbap.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothPbap.TAG, "Proxy not attached to service"); } return BluetoothProfile.STATE_DISCONNECTED; }
public void onServiceConnected(android.content.ComponentName className, android.os.IBinder service) { if (android.bluetooth.BluetoothPbap.DBG) { android.bluetooth.BluetoothPbap.log("Proxy object connected"); } mService = IBluetoothPbap.Stub.asInterface(service); if ((mServiceListener) != null) { mServiceListener.onServiceConnected(this); } }
@java.lang.Override public void disconnect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "disconnect"); } com.android.bluetooth.pbap.BluetoothPbapService service = getService(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM); if (service == null) { return; } service.disconnect(device); }
@java.lang.Override public java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "getDevicesMatchingConnectionStates"); } com.android.bluetooth.pbap.BluetoothPbapService service = getService(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM); if (service == null) { return new java.util.ArrayList<>(0); } return service.getDevicesMatchingConnectionStates(states); }
java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); if ((mRemoteDevice) != null) { for (int state : states) { if (state == (mState)) { devices.add(mRemoteDevice); break; } } } return devices; }
int getConnectionState(android.bluetooth.BluetoothDevice device) { return mState; }
public void onServiceDisconnected(android.content.ComponentName className) { if (android.bluetooth.BluetoothPbap.DBG) { android.bluetooth.BluetoothPbap.log("Proxy object disconnected"); } mService = null; if ((mServiceListener) != null) { mServiceListener.onServiceDisconnected(); } }
public boolean disconnect(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothPbap.DBG) { android.bluetooth.BluetoothPbap.log("disconnect()"); } final android.bluetooth.IBluetoothPbap service = mService; if (service != null) { try { service.disconnect(device); return true; } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothPbap.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothPbap.TAG, "Proxy not attached to service"); } return false; }
@org.junit.Test public void testStateTransition_AudioOnToAudioDisconnecting_DisconnectAudio() { setUpAudioOnState(); reset(mHeadsetStateMachine); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.DISCONNECT_AUDIO, mTestDevice); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.AudioDisconnecting.class)); verify(mHeadsetService, never()).sendBroadcastAsUser(any(android.content.Intent.class), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
@org.junit.Test public void testStateTransition_AudioDisconnectingToConnected_StackAudioConnected() { setUpAudioDisconnectingState(); reset(mHeadsetStateMachine); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_CONNECTED, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.AudioOn.class)); verify(mHeadsetService, never()).sendBroadcastAsUser(any(android.content.Intent.class), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
private void setUpConnectingState() { mHeadsetStateMachine.sendMessage(HeadsetStateMachine.CONNECT, mTestDevice); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.Connecting.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getConnectionStateBroadcastMatcher(mTestDevice, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
@org.junit.Test public void testStateTransition_AudioConnectingToAudioOn_StackAudioConnected() { setUpAudioConnectingState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_CONNECTED, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.AudioOn.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getAudioStateBroadcastMatcher(mTestDevice, BluetoothHeadset.STATE_AUDIO_CONNECTED, BluetoothHeadset.STATE_AUDIO_CONNECTING), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
@org.junit.Test public void testStateTransition_ConnectedToAudioOn_StackAudioConnected() { setUpConnectedState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_CONNECTING, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.AudioOn.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getAudioStateBroadcastMatcher(mTestDevice, BluetoothHeadset.STATE_AUDIO_CONNECTED, BluetoothHeadset.STATE_AUDIO_DISCONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
@org.junit.Test public void testStateTransition_ConnectingToDisconnected_StackDisconnected() { setUpConnectingState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTING, mTestDevice)); verify(mHeadsetStateMachine, after(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any()); verify(mHeadsetService).sendBroadcastAsUser(any(android.content.Intent.class), any(android.os.UserHandle.class), anyString()); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.Disconnected.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getConnectionStateBroadcastMatcher(mTestDevice, BluetoothProfile.STATE_DISCONNECTED, BluetoothProfile.STATE_CONNECTING), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
@org.junit.Test public void testStateTransition_ConnectedToDisconnecting_Disconnect() { setUpConnectedState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.DISCONNECT, mTestDevice); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.Disconnecting.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getConnectionStateBroadcastMatcher(mTestDevice, BluetoothProfile.STATE_DISCONNECTING, BluetoothProfile.STATE_CONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
private static android.content.Intent getAudioStateBroadcastMatcher(android.bluetooth.BluetoothDevice device, int toState, int fromState) { return org.mockito.hamcrest.MockitoHamcrest.argThat(org.hamcrest.core.AllOf.allOf(android.support.test.espresso.intent.matcher.IntentMatchers.hasAction(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED), android.support.test.espresso.intent.matcher.IntentMatchers.hasExtra(BluetoothDevice.EXTRA_DEVICE, device), android.support.test.espresso.intent.matcher.IntentMatchers.hasExtra(BluetoothProfile.EXTRA_STATE, toState), android.support.test.espresso.intent.matcher.IntentMatchers.hasExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, fromState))); }
@org.junit.Test public void testStateTransition_ConnectedToDisconnecting_StackDisconnecting() { setUpConnectedState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTING, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.Disconnecting.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getConnectionStateBroadcastMatcher(mTestDevice, BluetoothProfile.STATE_DISCONNECTING, BluetoothProfile.STATE_CONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
@org.junit.Test public void testDefaultDisconnectedState() { org.junit.Assert.assertEquals(mHeadsetStateMachine.getConnectionState(null), BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertThat(mHeadsetStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(HeadsetStateMachine.Disconnected.class)); }
@org.junit.Test public void testStateTransition_ConnectedToDisconnected_StackDisconnected() { setUpConnectedState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.Disconnected.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getConnectionStateBroadcastMatcher(mTestDevice, BluetoothProfile.STATE_DISCONNECTED, BluetoothProfile.STATE_CONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
private void setUpAudioDisconnectingState() { setUpAudioOnState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.DISCONNECT_AUDIO, mTestDevice); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.AudioDisconnecting.class)); }
@org.junit.Test public void testStateTransition_DisconnectedToConnecting_Connect() { mHeadsetStateMachine.sendMessage(HeadsetStateMachine.CONNECT, mTestDevice); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.Connecting.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getConnectionStateBroadcastMatcher(mTestDevice, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
@org.junit.Test public void testStateTransition_AudioDisconnectingToConnected_StackAudioDisconnected() { setUpAudioDisconnectingState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_DISCONNECTED, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.Connected.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getAudioStateBroadcastMatcher(mTestDevice, BluetoothHeadset.STATE_AUDIO_DISCONNECTED, BluetoothHeadset.STATE_AUDIO_CONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
private void setUpAudioConnectingState() { setUpConnectedState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, mTestDevice); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.AudioConnecting.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getAudioStateBroadcastMatcher(mTestDevice, BluetoothHeadset.STATE_AUDIO_CONNECTING, BluetoothHeadset.STATE_AUDIO_DISCONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
@org.junit.Test public void testStateTransition_DisconnectingToDisconnected_StackDisconnected() { setUpDisconnectingState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.Disconnected.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getConnectionStateBroadcastMatcher(mTestDevice, BluetoothProfile.STATE_DISCONNECTED, BluetoothProfile.STATE_DISCONNECTING), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
@org.junit.Test public void testStateTransition_DisconnectedToConnecting_StackConnecting() { mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_CONNECTING, mTestDevice)); mNativeInterface.onConnectionStateChanged(HeadsetHalConstants.CONNECTION_STATE_CONNECTED, com.android.bluetooth.Utils.getByteAddress(mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.Connecting.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getConnectionStateBroadcastMatcher(mTestDevice, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
@org.junit.Test public void testSetupConnectedState() { setUpConnectedState(); org.junit.Assert.assertEquals(mHeadsetStateMachine.getConnectionState(mTestDevice), BluetoothProfile.STATE_CONNECTED); org.junit.Assert.assertThat(mHeadsetStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(HeadsetStateMachine.Connected.class)); }
@org.junit.Test public void testStateTransition_ConnectedToAudioConnecting_ConnectAudio() { setUpConnectedState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, mTestDevice); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.AudioConnecting.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getAudioStateBroadcastMatcher(mTestDevice, BluetoothHeadset.STATE_AUDIO_CONNECTING, BluetoothHeadset.STATE_AUDIO_DISCONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
private void setUpConnectedState() { mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_SLC_CONNECTED, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.Connected.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getConnectionStateBroadcastMatcher(mTestDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_DISCONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
@org.junit.Test public void testStateTransition_AudioConnectingToConnected_StackAudioDisconnected() { setUpAudioConnectingState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_DISCONNECTED, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.Connected.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getAudioStateBroadcastMatcher(mTestDevice, BluetoothHeadset.STATE_AUDIO_DISCONNECTED, BluetoothHeadset.STATE_AUDIO_CONNECTING), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
private void setUpDisconnectingState() { setUpConnectedState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.DISCONNECT, mTestDevice); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.Disconnecting.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getConnectionStateBroadcastMatcher(mTestDevice, BluetoothProfile.STATE_DISCONNECTING, BluetoothProfile.STATE_CONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
@org.junit.Test public void testStateTransition_AudioDisconnectingToConnected_Timeout() { setUpAudioDisconnectingState(); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.CONNECT_TIMEOUT_TEST_WAIT_MILLIS)).transitionTo(any(HeadsetStateMachine.Connected.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getAudioStateBroadcastMatcher(mTestDevice, BluetoothHeadset.STATE_AUDIO_DISCONNECTED, BluetoothHeadset.STATE_AUDIO_CONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
@org.junit.Test public void testStateTransition_DisconnectingToDisconnected_Timeout() { setUpDisconnectingState(); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.CONNECT_TIMEOUT_TEST_WAIT_MILLIS)).transitionTo(any(HeadsetStateMachine.Disconnected.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getConnectionStateBroadcastMatcher(mTestDevice, BluetoothProfile.STATE_DISCONNECTED, BluetoothProfile.STATE_DISCONNECTING), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
private void setUpAudioOnState() { setUpAudioConnectingState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_CONNECTED, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.AudioOn.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getAudioStateBroadcastMatcher(mTestDevice, BluetoothHeadset.STATE_AUDIO_CONNECTED, BluetoothHeadset.STATE_AUDIO_CONNECTING), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
@org.junit.Test public void testStateTransition_ConnectedToAudioConnecting_StackAudioConnecting() { setUpConnectedState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_CONNECTING, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.AudioConnecting.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getAudioStateBroadcastMatcher(mTestDevice, BluetoothHeadset.STATE_AUDIO_CONNECTING, BluetoothHeadset.STATE_AUDIO_DISCONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
@org.junit.After public void tearDown() { mHeadsetStateMachine.doQuit(); mHandlerThread.quit(); }
boolean connectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (!(mStateMachine.isConnected())) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: profile not connected"); return false; } if ((mStateMachine.getAudioState()) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ("connectAudio: audio is not idle, current state " + (mStateMachine.getAudioState()))); return false; } mStateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO); return true; }
@org.junit.Test public void testStateTransition_AudioOnToConnected_StackAudioDisconnected() { setUpAudioOnState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_DISCONNECTED, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.Connected.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getAudioStateBroadcastMatcher(mTestDevice, BluetoothHeadset.STATE_AUDIO_DISCONNECTED, BluetoothHeadset.STATE_AUDIO_CONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
boolean disconnectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if ((mStateMachine.getAudioState()) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "disconnectAudio, audio is not connected"); return false; } mStateMachine.sendMessage(HeadsetStateMachine.DISCONNECT_AUDIO); return true; }
@org.junit.Test public void testStateTransition_ConnectingToDisconnected_Timeout() { setUpConnectingState(); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.CONNECT_TIMEOUT_TEST_WAIT_MILLIS)).transitionTo(any(HeadsetStateMachine.Disconnected.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getConnectionStateBroadcastMatcher(mTestDevice, BluetoothProfile.STATE_DISCONNECTED, BluetoothProfile.STATE_CONNECTING), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
private static android.content.Intent getConnectionStateBroadcastMatcher(android.bluetooth.BluetoothDevice device, int toState, int fromState) { return org.mockito.hamcrest.MockitoHamcrest.argThat(org.hamcrest.core.AllOf.allOf(android.support.test.espresso.intent.matcher.IntentMatchers.hasAction(BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED), android.support.test.espresso.intent.matcher.IntentMatchers.hasExtra(BluetoothDevice.EXTRA_DEVICE, device), android.support.test.espresso.intent.matcher.IntentMatchers.hasExtra(BluetoothProfile.EXTRA_STATE, toState), android.support.test.espresso.intent.matcher.IntentMatchers.hasExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, fromState))); }
@org.junit.Test public void testStateTransition_AudioOnToAudioDisconnecting_StackAudioDisconnecting() { setUpAudioOnState(); reset(mHeadsetStateMachine); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_DISCONNECTING, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.AudioDisconnecting.class)); verify(mHeadsetService, never()).sendBroadcastAsUser(any(android.content.Intent.class), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
@org.junit.Test public void testStateTransition_AudioConnectingToConnected_Timeout() { setUpAudioConnectingState(); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.CONNECT_TIMEOUT_TEST_WAIT_MILLIS)).transitionTo(any(HeadsetStateMachine.Connected.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getAudioStateBroadcastMatcher(mTestDevice, BluetoothHeadset.STATE_AUDIO_DISCONNECTED, BluetoothHeadset.STATE_AUDIO_CONNECTING), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<>(); synchronized(this) { devices.add(mCurrentDevice); } return devices; }
public void dump(java.lang.StringBuilder sb) { com.android.bluetooth.btservice.ProfileService.println(sb, ("mCurrentDevice: " + (mCurrentDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mVirtualCallStarted: " + (mVirtualCallStarted))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mVoiceRecognitionStarted: " + (mVoiceRecognitionStarted))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mWaitingForVoiceRecognition: " + (mWaitingForVoiceRecognition))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mForceScoAudio: " + (mForceScoAudio))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mDialingOut: " + (mDialingOut))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mAudioRouteAllowed: " + (mAudioRouteAllowed))); com.android.bluetooth.btservice.ProfileService.println(sb, ("StateMachine: " + (this))); com.android.bluetooth.btservice.ProfileService.println(sb, ("PreviousState: " + ((mPrevState) == null ? "null" : mPrevState.getName()))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mPhoneState: " + (mPhoneState))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mAudioState: " + (mAudioState))); java.io.StringWriter stringWriter = new java.io.StringWriter(); java.io.PrintWriter printWriter = new java.io.PrintWriter(stringWriter); super.dump(new java.io.FileDescriptor(), printWriter, new java.lang.String[]{ }); printWriter.flush(); stringWriter.flush(); com.android.bluetooth.btservice.ProfileService.println(sb, ("StateMachineLog: " + (stringWriter.toString()))); }
int getAudioState() { return mAudioState; }
@org.junit.Test public void testStateTransition_DisconnectedToConnecting_StackConnected() { mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_CONNECTED, mTestDevice)); mNativeInterface.onConnectionStateChanged(HeadsetHalConstants.CONNECTION_STATE_CONNECTED, com.android.bluetooth.Utils.getByteAddress(mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.Connecting.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getConnectionStateBroadcastMatcher(mTestDevice, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
private void processNoiceReductionEvent(int enable, android.bluetooth.BluetoothDevice device) { if (!(mAudioParams.isEmpty())) { if (enable == 1) { mAudioParams.put("NREC", 1); } else { mAudioParams.put("NREC", 0); } log(((("NREC value for device :" + device) + " is: ") + (mAudioParams.get("NREC")))); } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "processNoiceReductionEvent: audioParamNrec is null "); } if ((((mCurrentDevice) != null) && (mCurrentDevice.equals(device))) && ((mAudioState) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED))) { setAudioParameters(device); } }
private void processKeyPressed(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "processKeyPressed device is null"); return; } if ((mPhoneState.getCallState()) == (HeadsetHalConstants.CALL_STATE_INCOMING)) { if ((mPhoneProxy) != null) { try { mPhoneProxy.answerCall(); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "Handsfree phone proxy null for answering call"); } } else if ((mPhoneState.getNumActiveCall()) > 0) { if ((mAudioState) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { mNativeInterface.connectAudio(mCurrentDevice); } else { if ((mPhoneProxy) != null) { try { mPhoneProxy.hangupCall(); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "Handsfree phone proxy null for hangup call"); } } } else { java.lang.String dialNumber = mPhonebook.getLastDialledNumber(); if (dialNumber == null) { log("processKeyPressed, last dial number null"); return; } android.content.Intent intent = new android.content.Intent(android.content.Intent.ACTION_CALL_PRIVILEGED, android.net.Uri.fromParts(com.android.bluetooth.hfp.HeadsetStateMachine.SCHEME_TEL, dialNumber, null)); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); mService.startActivity(intent); } }
synchronized int getConnectionState(android.bluetooth.BluetoothDevice device) { if ((mCurrentDevice) == null) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } if (!(mCurrentDevice.equals(device))) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } com.android.internal.util.IState currentState = getCurrentState(); if (currentState == (mConnecting)) { return android.bluetooth.BluetoothProfile.STATE_CONNECTING; } if ((currentState == (mConnected)) || (currentState == (mAudioOn))) { return android.bluetooth.BluetoothProfile.STATE_CONNECTED; } if (currentState == (mDisconnecting)) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTING; } android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ("getConnectionState: bad currentState: " + currentState)); return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; }
boolean okToAcceptConnection(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.btservice.AdapterService adapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); int priority = mService.getPriority(device); if ((adapterService == null) || ((adapterService.isQuietModeEnabled()) && ((mCurrentDevice) == null))) { return false; } if (((android.bluetooth.BluetoothProfile.PRIORITY_OFF) < priority) || (((android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED) == priority) && ((device.getBondState()) != (android.bluetooth.BluetoothDevice.BOND_NONE)))) { return true; } return false; }
private void processWBSEvent(int enable) { if (enable == 2) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "AudioManager.setParameters: bt_wbs=on, device="); mAudioManager.setParameters(((com.android.bluetooth.hfp.HeadsetStateMachine.HEADSET_WBS) + "=on")); } else { android.util.Log.d(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ("AudioManager.setParameters: bt_wbs=off, enable=" + enable)); mAudioManager.setParameters(((com.android.bluetooth.hfp.HeadsetStateMachine.HEADSET_WBS) + "=off")); } }
@org.junit.Test public void testStateTransition_DisconnectingToConnected_StackSlcCconnected() { setUpDisconnectingState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_SLC_CONNECTED, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.Connected.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getConnectionStateBroadcastMatcher(mTestDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_DISCONNECTING), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }
void onProfileStateChanged(com.android.settingslib.bluetooth.LocalBluetoothProfile profile, int newProfileState) { if (Utils.D) { android.util.Log.d(com.android.settingslib.bluetooth.CachedBluetoothDevice.TAG, ((("onProfileStateChanged: profile " + profile) + " newProfileState ") + newProfileState)); } if ((mLocalAdapter.getBluetoothState()) == (android.bluetooth.BluetoothAdapter.STATE_TURNING_OFF)) { if (Utils.D) android.util.Log.d(com.android.settingslib.bluetooth.CachedBluetoothDevice.TAG, " BT Turninig Off...Profile conn state change ignored..."); return; } mProfileConnectionState.put(profile, newProfileState); if (newProfileState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { if (profile instanceof com.android.settingslib.bluetooth.MapProfile) { profile.setPreferred(mDevice, true); mRemovedProfiles.remove(profile); mProfiles.add(profile); } else if (!(mProfiles.contains(profile))) { mRemovedProfiles.remove(profile); mProfiles.add(profile); if ((profile instanceof com.android.settingslib.bluetooth.PanProfile) && (((com.android.settingslib.bluetooth.PanProfile) (profile)).isLocalRoleNap(mDevice))) { mLocalNapRoleConnected = true; } } } else if ((profile instanceof com.android.settingslib.bluetooth.MapProfile) && (newProfileState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED))) { profile.setPreferred(mDevice, false); } else if ((((mLocalNapRoleConnected) && (profile instanceof com.android.settingslib.bluetooth.PanProfile)) && (((com.android.settingslib.bluetooth.PanProfile) (profile)).isLocalRoleNap(mDevice))) && (newProfileState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED))) { android.util.Log.d(com.android.settingslib.bluetooth.CachedBluetoothDevice.TAG, "Removing PanProfile from device after NAP disconnect"); mProfiles.remove(profile); mRemovedProfiles.add(profile); mLocalNapRoleConnected = false; } }
private int getClearableCount() { int count = 0; try { if (mTransferCursor.moveToFirst()) { while (!(mTransferCursor.isAfterLast())) { int statusColumnId = mTransferCursor.getColumnIndexOrThrow(BluetoothShare.STATUS); int status = mTransferCursor.getInt(statusColumnId); if (com.android.bluetooth.opp.BluetoothShare.isStatusCompleted(status)) { count++; break; } mTransferCursor.moveToNext(); } } } catch (android.database.StaleDataException e) { android.util.Log.e(com.android.bluetooth.opp.BluetoothOppTransferHistory.TAG, ("Activity paused " + (e.toString()))); } return count; }
private static synchronized void setAdapterService(com.android.bluetooth.btservice.AdapterService instance) { if ((instance != null) && (!(instance.mCleaningUp))) { if (com.android.bluetooth.btservice.AdapterService.DBG) { android.util.Log.d(com.android.bluetooth.btservice.AdapterService.TAG, ("setAdapterService() - set to: " + instance)); } com.android.bluetooth.btservice.AdapterService.sAdapterService = instance; } else { if (com.android.bluetooth.btservice.AdapterService.DBG) { if ((com.android.bluetooth.btservice.AdapterService.sAdapterService) == null) { android.util.Log.d(com.android.bluetooth.btservice.AdapterService.TAG, "setAdapterService() - Service not available"); } else if (com.android.bluetooth.btservice.AdapterService.sAdapterService.mCleaningUp) { android.util.Log.d(com.android.bluetooth.btservice.AdapterService.TAG, "setAdapterService() - Service is cleaning up"); } } } }
public static void main(java.lang.String[] args) { Main m = new Main(); java.lang.Iterable it = new java.lang.Iterable() { public java.util.Iterator iterator() { return null; } }; m.testInlinedForFalseInlined(it); m.testInlinedForFalseNotInlined(it); m.testInlinedForNullInlined(it); m.testInlinedForNullNotInlined(it); int[] a = new int[Main.LENGTH]; m.testIfCondStaticEvaluation(a, true); m.testIfCondStaticEvaluation(a, false); m.testManualUnrollWithInvarExits(a, true); m.testManualUnrollWithInvarExits(a, false); }
public void binderDied() { synchronized(this) { try { cleanupAndRelease(); } catch (java.lang.Exception e) { android.util.Log.e(com.android.server.IpSecService.TAG, ("Failed to release resource: " + e)); } } }
@org.junit.Test public void testSampleUdpEncapTranform() throws android.os.RemoteException { com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> spi1 = getTestRefcountedResource(); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> spi2 = getTestRefcountedResource(); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> udpEncapSocket = getTestRefcountedResource(); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> transform = getTestRefcountedResource(spi1, spi2, udpEncapSocket); spi1.cleanupAndRelease(); udpEncapSocket.cleanupAndRelease(); spi2.binderDied(); transform.binderDied(); assertResourceState(spi1, (-1), 1, 2, 1, 1); assertResourceState(spi2, (-1), 1, 2, 1, 1); assertResourceState(udpEncapSocket, (-1), 1, 2, 1, 1); assertResourceState(transform, (-1), 1, 1, 1, 1); }
@org.junit.Test public void testTwoChildren() throws android.os.RemoteException { com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> childResource1 = getTestRefcountedResource(); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> childResource2 = getTestRefcountedResource(); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> parentResource = getTestRefcountedResource(childResource1, childResource2); childResource1.cleanupAndRelease(); assertResourceState(childResource1, 1, 1, 1, 1, 0); assertResourceState(childResource2, 2, 0, 0, 0, 0); parentResource.cleanupAndRelease(); assertResourceState(childResource1, (-1), 1, 2, 1, 1); assertResourceState(childResource2, 1, 0, 1, 0, 0); childResource2.cleanupAndRelease(); assertResourceState(childResource1, (-1), 1, 2, 1, 1); assertResourceState(childResource2, (-1), 1, 2, 1, 1); }
@org.junit.Test public void fuzzTest() throws android.os.RemoteException { java.util.List<com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource>> resources = new java.util.ArrayList<>(); for (int i = 0; i < 100; i++) { int numDependencies = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, ((resources.size()) + 1)); java.util.Set<com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource>> dependencies = new java.util.HashSet<>(); for (int j = 0; j < numDependencies; j++) { int dependencyIndex = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, resources.size()); dependencies.add(resources.get(dependencyIndex)); } com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> newRefcountedResource = getTestRefcountedResource(dependencies.toArray(new com.android.server.IpSecService.RefcountedResource[dependencies.size()])); resources.add(newRefcountedResource); } java.util.List<com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource>> clonedResources = new java.util.ArrayList(resources); while (!(clonedResources.isEmpty())) { int index = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, clonedResources.size()); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource = clonedResources.get(index); refcountedResource.cleanupAndRelease(); clonedResources.remove(index); } for (com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource : resources) { assertEquals((-1), refcountedResource.getReferenceCount()); } }
@org.junit.Test public void testMultipleCallsToCleanupAndRelease() throws android.os.RemoteException { com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource = getTestRefcountedResource(); refcountedResource.cleanupAndRelease(); assertResourceState(refcountedResource, (-1), 1, 1, 1, 1); refcountedResource.cleanupAndRelease(); refcountedResource.cleanupAndRelease(); assertResourceState(refcountedResource, (-1), 3, 1, 1, 1); }
private void assertResourceState(com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> resource, int refCount, int cleanupAndReleaseCallCount, int releaseIfUnreferencedRecursivelyCallCount, int cleanupCallCount, int releaseResourcesAndQuotaCallCount) throws android.os.RemoteException { assertEquals(refCount, resource.getReferenceCount()); verify(resource, times(cleanupAndReleaseCallCount)).cleanupAndRelease(); verify(resource, times(releaseIfUnreferencedRecursivelyCallCount)).releaseIfUnreferencedRecursively(); verify(resource.getResource(), times(cleanupCallCount)).cleanup(); verify(resource.getResource(), times(releaseResourcesAndQuotaCallCount)).releaseResourcesAndQuota(); }
void cleanup() throws android.os.RemoteException;
@org.junit.Test public void testCleanupReferencedChildDoesNotTriggerRelease() throws android.os.RemoteException { com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> childResource = getTestRefcountedResource(); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> parentResource = getTestRefcountedResource(childResource); childResource.cleanupAndRelease(); assertResourceState(childResource, 1, 1, 1, 1, 0); assertResourceState(parentResource, 1, 0, 0, 0, 0); }
private com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> getTestRefcountedResource(com.android.server.IpSecService.RefcountedResource... dependencies) { return getTestRefcountedResource(new android.os.Binder(), dependencies); }
@org.junit.Test public void testTwoParents() throws android.os.RemoteException { com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> childResource = getTestRefcountedResource(); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> parentResource1 = getTestRefcountedResource(childResource); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> parentResource2 = getTestRefcountedResource(childResource); childResource.cleanupAndRelease(); assertResourceState(childResource, 2, 1, 1, 1, 0); parentResource1.cleanupAndRelease(); assertResourceState(childResource, 1, 1, 2, 1, 0); parentResource2.cleanupAndRelease(); assertResourceState(childResource, (-1), 1, 3, 1, 1); }
@org.junit.Test public void testSampleDualTransformEncapSocket() throws android.os.RemoteException { com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> spi1 = getTestRefcountedResource(); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> spi2 = getTestRefcountedResource(); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> spi3 = getTestRefcountedResource(); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> spi4 = getTestRefcountedResource(); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> udpEncapSocket = getTestRefcountedResource(); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> transform1 = getTestRefcountedResource(spi1, spi2, udpEncapSocket); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> transform2 = getTestRefcountedResource(spi3, spi4, udpEncapSocket); spi1.cleanupAndRelease(); udpEncapSocket.cleanupAndRelease(); spi4.cleanupAndRelease(); spi2.binderDied(); spi3.binderDied(); transform2.binderDied(); transform1.binderDied(); assertResourceState(spi1, (-1), 1, 2, 1, 1); assertResourceState(spi2, (-1), 1, 2, 1, 1); assertResourceState(spi3, (-1), 1, 2, 1, 1); assertResourceState(spi4, (-1), 1, 2, 1, 1); assertResourceState(udpEncapSocket, (-1), 1, 3, 1, 1); assertResourceState(transform1, (-1), 1, 1, 1, 1); assertResourceState(transform2, (-1), 1, 1, 1, 1); }
@org.junit.Test public void testConstructorWithDependencies() throws android.os.RemoteException { android.os.IBinder binderMockChild = mock(android.os.IBinder.class); android.os.IBinder binderMockParent = mock(android.os.IBinder.class); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> childResource = getTestRefcountedResource(binderMockChild); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> parentResource = getTestRefcountedResource(binderMockParent, childResource); assertResourceState(parentResource, 1, 0, 0, 0, 0); assertResourceState(childResource, 2, 0, 0, 0, 0); verify(binderMockChild).linkToDeath(anyObject(), anyInt()); verify(binderMockParent).linkToDeath(anyObject(), anyInt()); }
@org.junit.Test public void testCleanupAndRelease() throws android.os.RemoteException { android.os.IBinder binderMock = mock(android.os.IBinder.class); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource = getTestRefcountedResource(binderMock); refcountedResource.cleanupAndRelease(); assertResourceState(refcountedResource, (-1), 1, 1, 1, 1); verify(binderMock).unlinkToDeath(eq(refcountedResource), eq(0)); assertNull(refcountedResource.mBinder); }
@org.junit.Test public void testCleanupParentDecrementsChildRefcount() throws android.os.RemoteException { com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> childResource = getTestRefcountedResource(); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> parentResource = getTestRefcountedResource(childResource); parentResource.cleanupAndRelease(); assertResourceState(childResource, 1, 0, 1, 0, 0); assertResourceState(parentResource, (-1), 1, 1, 1, 1); }
@org.junit.Test public void testBinderDeathAfterCleanupAndReleaseDoesNothing() throws android.os.RemoteException { com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource = getTestRefcountedResource(); refcountedResource.cleanupAndRelease(); assertResourceState(refcountedResource, (-1), 1, 1, 1, 1); refcountedResource.binderDied(); assertResourceState(refcountedResource, (-1), 2, 1, 1, 1); }
private com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> getTestRefcountedResource(android.os.IBinder binder, com.android.server.IpSecService.RefcountedResource... dependencies) { return spy(mIpSecService.new RefcountedResource<com.android.server.IpSecService.IResource>(mock(com.android.server.IpSecService.IResource.class), binder, dependencies)); }
void releaseResourcesAndQuota() throws android.os.RemoteException;
@com.android.internal.annotations.GuardedBy("IpSecService.this") public void cleanupAndRelease() throws android.os.RemoteException { if ((mBinder) == null) { return; } mBinder.unlinkToDeath(this, 0); mBinder = null; mResource.cleanup(); decrementReferenceCount(); releaseIfUnreferencedRecursively(); }
@org.junit.Test public void testFailLinkToDeath() throws android.os.RemoteException { android.os.IBinder binderMock = mock(android.os.IBinder.class); doThrow(new android.os.RemoteException()).when(binderMock).linkToDeath(anyObject(), anyInt()); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource = getTestRefcountedResource(binderMock); assertEquals((-1), refcountedResource.getReferenceCount()); }
@com.android.internal.annotations.VisibleForTesting @com.android.internal.annotations.GuardedBy("IpSecService.this") public void releaseIfUnreferencedRecursively() throws android.os.RemoteException { if ((getReferenceCount()) > 0) { return; } else if ((getReferenceCount()) < 0) { throw new java.lang.IllegalStateException("Reference count in illegal state - negative refcount"); } mResource.releaseResourcesAndQuota(); for (com.android.server.IpSecService.RefcountedResource<? extends com.android.server.IpSecService.IResource> resource : mDependencies) { resource.decrementReferenceCount(); resource.releaseIfUnreferencedRecursively(); } decrementReferenceCount(); }
@java.lang.Override public java.lang.String toString() { return new java.lang.StringBuilder().append("{mResource=").append(mResource).append(", mRefCount=").append(mRefCount).append(", mDependencies=").append(mDependencies).append("}").toString(); }
private final void startSocketListeners(int masId) { if (masId == (-1)) { for (int i = 0, c = mMasInstances.size(); i < c; i++) { mMasInstances.valueAt(i).startSocketListeners(); } } else { com.android.bluetooth.map.BluetoothMapMasInstance masInst = mMasInstances.get(masId); if (masInst != null) { masInst.startSocketListeners(); } else { android.util.Log.w(com.android.bluetooth.map.BluetoothMapService.TAG, ("startSocketListeners(): Invalid MasId: " + masId)); } } }
@java.lang.Override public synchronized void onAcceptFailed() { mServerSockets = null; if (mShutdown) { android.util.Log.e(TAG, ("Failed to accept incomming connection - " + "shutdown")); } else { android.util.Log.e(TAG, ("Failed to accept incomming connection - " + "restarting")); startSocketListeners(); } }
public synchronized void startSocketListeners() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) android.util.Log.d(TAG, "Map Service startSocketListeners"); if ((mServerSession) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) android.util.Log.d(TAG, "mServerSession exists - shutting it down..."); mServerSession.close(); mServerSession = null; } if ((mObserver) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) android.util.Log.d(TAG, "mObserver exists - shutting it down..."); mObserver.deinit(); mObserver = null; } closeConnectionSocket(); if ((mServerSockets) != null) { mServerSockets.prepareForNewConnect(); } else { mServerSockets = com.android.bluetooth.ObexServerSockets.create(this); if ((mServerSockets) == null) { android.util.Log.e(TAG, "Failed to start the listeners"); return; } removeSdpRecord(); mSdpHandle = createMasSdpRecord(mServerSockets.getRfcommChannel(), mServerSockets.getL2capPsm()); if (com.android.bluetooth.map.BluetoothMapMasInstance.V) android.util.Log.d(TAG, ((((("Creating new SDP record for MAS instance: " + (mMasInstanceId)) + " Object reference: ") + (this)) + "SDP handle: ") + (mSdpHandle))); updateDbIdentifier(); } }
public void restartObexServerSession() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) android.util.Log.d(TAG, "MAP Service restartObexServerSession()"); startSocketListeners(); }
@org.junit.Test public void testUdpEncapsulationSocketBinderDeath() throws java.lang.Exception { int localport = findUnusedPort(); IpSecUdpEncapResponse udpEncapResp = mIpSecService.openUdpEncapsulationSocket(localport, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mEncapSocketRecords.getRefcountedResourceOrThrow(udpEncapResp.resourceId); refcountedRecord.binderDied(); assertEquals(0, userRecord.socketQuotaTracker.current()); try { userRecord.mEncapSocketRecords.getRefcountedResourceOrThrow(udpEncapResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@java.lang.Override public void releaseKernelResources() { if (mOwnedByTransform) { android.util.Log.d(com.android.server.IpSecService.TAG, (("Cannot release Spi " + (mSpi)) + ": Currently locked by a Transform")); return; } try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, mDirection, mLocalAddress, mRemoteAddress, mSpi); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ("Failed to delete SPI reservation with ID: " + (mResourceId))); } mSpi = android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX; getResourceTracker().give(); }
@java.lang.Override public synchronized android.net.IpSecSpiResponse reserveSecurityParameterIndex(int direction, java.lang.String remoteAddress, int requestedSpi, android.os.IBinder binder) throws android.os.RemoteException { com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.checkInetAddress(remoteAddress); checkNotNull(binder, "Null Binder passed to reserveSecurityParameterIndex"); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); int resourceId = com.android.server.IpSecService.mNextResourceId.getAndIncrement(); int spi = android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX; java.lang.String localAddress = ""; try { if (!(userRecord.spiQuotaTracker.isAvailable())) { return new android.net.IpSecSpiResponse(IpSecManager.Status.RESOURCE_UNAVAILABLE, android.net.IpSecManager.INVALID_RESOURCE_ID, spi); } spi = mSrvConfig.getNetdInstance().ipSecAllocateSpi(resourceId, direction, localAddress, remoteAddress, requestedSpi); android.util.Log.d(com.android.server.IpSecService.TAG, ("Allocated SPI " + spi)); userRecord.mSpiRecords.put(resourceId, new com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.SpiRecord>(new com.android.server.IpSecService.SpiRecord(resourceId, direction, localAddress, remoteAddress, spi), binder)); } catch (android.os.ServiceSpecificException e) { return new android.net.IpSecSpiResponse(IpSecManager.Status.SPI_UNAVAILABLE, android.net.IpSecManager.INVALID_RESOURCE_ID, spi); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return new android.net.IpSecSpiResponse(IpSecManager.Status.OK, resourceId, spi); }
@java.lang.Override protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return getUserRecord().socketQuotaTracker; }
@java.lang.Override public void cleanupResourceArrays() throws android.os.RemoteException { getUserRecord().removeSpiRecord(mResourceId); }
private void releaseResource(com.android.server.IpSecService.RefcountedResourceArray resArray, int resourceId) throws android.os.RemoteException { resArray.getRefcountedResourceOrThrow(resourceId).cleanupAndRelease(); }
@java.lang.Override protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return getUserRecord().transformQuotaTracker; }
public abstract void releaseKernelResources() throws android.os.RemoteException;
public abstract void cleanupResourceArrays() throws android.os.RemoteException;
@java.lang.Override public void releaseKernelResources() { for (int direction : com.android.server.IpSecService.DIRECTIONS) { int spi = mSpis[direction].getSpi(); try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, direction, mConfig.getLocalAddress(), mConfig.getRemoteAddress(), spi); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ("Failed to delete SA with ID: " + (mResourceId))); } } getResourceTracker().give(); }
@java.lang.Override public void cleanupResourceArrays() throws android.os.RemoteException { getUserRecord().removeTransformRecord(mResourceId); }
@org.junit.Test public void testOpenAndCloseUdpEncapsulationSocket() throws java.lang.Exception { int localport = findUnusedPort(); IpSecUdpEncapResponse udpEncapResp = mIpSecService.openUdpEncapsulationSocket(localport, new android.os.Binder()); assertNotNull(udpEncapResp); assertEquals(IpSecManager.Status.OK, udpEncapResp.status); assertEquals(localport, udpEncapResp.port); mIpSecService.closeUdpEncapsulationSocket(udpEncapResp.resourceId); udpEncapResp.fileDescriptor.close(); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.socketQuotaTracker.current()); try { userRecord.mEncapSocketRecords.getRefcountedResourceOrThrow(udpEncapResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@java.lang.Override public void cleanupResourceArrays() { getUserRecord().removeEncapSocketRecord(mResourceId); }
@org.junit.Test public void testReleaseSecurityParameterIndex() throws java.lang.Exception { when(mMockNetd.ipSecAllocateSpi(anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), eq(mRemoteAddr), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT))).thenReturn(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT); android.net.IpSecSpiResponse spiResp = mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, mRemoteAddr, com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT, new android.os.Binder()); mIpSecService.releaseSecurityParameterIndex(spiResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(spiResp.resourceId), anyInt(), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT)); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.spiQuotaTracker.current()); try { userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@org.junit.Test public void testDeleteTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); mIpSecService.deleteTransportModeTransform(createTransformResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT)); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN)); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.transformQuotaTracker.current()); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@java.lang.Override public void releaseKernelResources() { android.util.Log.d(com.android.server.IpSecService.TAG, ("Closing port " + (mPort))); libcore.io.IoUtils.closeQuietly(mSocket); mSocket = null; getResourceTracker().give(); }
@org.junit.Test public void testSecurityParameterIndexBinderDeath() throws java.lang.Exception { when(mMockNetd.ipSecAllocateSpi(anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), eq(mRemoteAddr), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT))).thenReturn(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT); IpSecSpiResponse spiResp = mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, mRemoteAddr, com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(spiResp.resourceId), anyInt(), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT)); assertEquals(0, userRecord.spiQuotaTracker.current()); try { userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@org.junit.Test public void testTransportModeTransformBinderDeath() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT)); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN)); assertEquals(0, userRecord.transformQuotaTracker.current()); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@java.lang.Override protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return getUserRecord().spiQuotaTracker; }
@java.lang.Override public java.lang.String toString() { return new java.lang.StringBuilder().append("{spiQuotaTracker=").append(spiQuotaTracker).append(", transformQuotaTracker=").append(transformQuotaTracker).append(", socketQuotaTracker=").append(socketQuotaTracker).append(", mSpiRecords=").append(mSpiRecords).append(", mTransformRecords=").append(mTransformRecords).append(", mEncapSocketRecords=").append(mEncapSocketRecords).append("}").toString(); }
public void testIke() throws java.lang.Exception { java.net.InetAddress local = android.net.cts.IpSecManagerTest.LOOPBACK_4; try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex outSpi = mISM.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, local);android.net.IpSecManager.SecurityParameterIndex inSpi = mISM.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_IN, local);android.net.IpSecTransform transform = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, inSpi, outSpi, encapSocket, local)) { java.io.FileDescriptor sock = null; try { sock = android.net.cts.IpSecManagerTest.getTestV4UdpSocket(local); int port = android.net.cts.IpSecManagerTest.getPort(sock); mISM.applyTransportModeTransform(sock, transform); byte[] header = new byte[]{ 1, 1, 1, 1 }; java.lang.String message = "Sample ESP Packet"; byte[] data = ((new java.lang.String(header)) + message).getBytes("UTF-8"); android.system.Os.sendto(sock, data, 0, data.length, 0, local, encapSocket.getPort()); header = new byte[]{ 0, 0, 0, 0 }; message = "Sample IKE Packet"; data = ((new java.lang.String(header)) + message).getBytes("UTF-8"); android.system.Os.sendto(encapSocket.getSocket(), data, 0, data.length, 0, local, encapSocket.getPort()); byte[] in = new byte[4]; in[0] = 1; android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertTrue("Encap socket received UDP-encap-ESP data despite invalid SPIs", java.util.Arrays.equals(header, in)); mISM.removeTransportModeTransform(sock, transform); } finally { if (sock != null) { android.system.Os.close(sock); } } } }
boolean isCallingFromSystemUid() { return (android.os.UserHandle.getAppId(android.os.Binder.getCallingUid())) == (SYSTEM_UID); }
@com.android.internal.annotations.VisibleForTesting public java.lang.String getSubscriberNumber() { final android.bluetooth.IBluetoothHeadsetPhone phoneProxy = mPhoneProxy; if ((mPhoneProxy) == null) { return null; } try { android.util.Log.d(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "haha"); } finally { } return mPhoneProxy.getSubscriberNumber(); }
public void cleanup() { if ((mPhoneState) != null) { mPhoneState.listenForPhoneState(false); mPhoneState.cleanup(); } if ((mPhonebook) != null) { mPhonebook.cleanup(); } mAudioParams.clear(); if ((mNativeInterface) != null) { mNativeInterface.cleanup(); } }
@java.lang.Override public void onServiceDisconnected(android.content.ComponentName className) { if (com.android.bluetooth.hfp.HeadsetSystemInterface.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "Proxy object disconnected"); } mPhoneProxy = null; }
void stop() { if ((mPhoneProxy) != null) { if (com.android.bluetooth.hfp.HeadsetSystemInterface.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "Unbinding service..."); } synchronized(mPhoneProxyConnection) { try { mPhoneProxy = null; mService.unbindService(mPhoneProxyConnection); } catch (java.lang.Exception re) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "Error unbinding from IBluetoothHeadsetPhone", re); } } } }
@java.lang.Override public void onServiceConnected(android.content.ComponentName className, android.os.IBinder service) { if (com.android.bluetooth.hfp.HeadsetSystemInterface.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "Proxy object connected"); } mPhoneProxy = IBluetoothHeadsetPhone.Stub.asInterface(service); }
@com.android.internal.annotations.VisibleForTesting public void processSendDtmf(int dtmf, android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "processSendDtmf device is null"); return; } if ((mPhoneProxy) != null) { try { mPhoneProxy.sendDtmf(dtmf); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "Handsfree phone proxy null for sending DTMF"); } }
@com.android.internal.annotations.VisibleForTesting public void queryPhoneState() { if ((mPhoneProxy) != null) { try { mPhoneProxy.queryPhoneState(); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "Handsfree phone proxy null for query phone state"); } }
void init() { android.content.Intent intent = new android.content.Intent(android.bluetooth.IBluetoothHeadsetPhone.class.getName()); intent.setComponent(intent.resolveSystemService(mService.getPackageManager(), 0)); if (((intent.getComponent()) == null) || (!(mService.bindService(intent, mPhoneProxyConnection, 0)))) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "Could not bind to Bluetooth Headset Phone Service"); } }
@java.lang.Override protected synchronized boolean start() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, "start()"); mStateMachinesThread = new android.os.HandlerThread("HeadsetService.StateMachines"); mStateMachinesThread.start(); mSystemInterface = new com.android.bluetooth.hfp.HeadsetSystemInterface(this); mSystemInterface.init(); mStateMachine = com.android.bluetooth.hfp.HeadsetStateMachine.make(this, mStateMachinesThread.getLooper(), com.android.bluetooth.hfp.HeadsetNativeInterface.getInstance(), mSystemInterface); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(Intent.ACTION_BATTERY_CHANGED); filter.addAction(AudioManager.VOLUME_CHANGED_ACTION); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); registerReceiver(mHeadsetReceiver, filter); com.android.bluetooth.hfp.HeadsetService.setHeadsetService(this); mStarted = true; return true; }
@java.lang.Override protected synchronized boolean stop() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, "stop()"); if (!(mStarted)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "stop() called before start()"); return true; } mStarted = false; unregisterReceiver(mHeadsetReceiver); com.android.bluetooth.hfp.HeadsetStateMachine.destroy(mStateMachine); mStateMachine = null; mSystemInterface.stop(); mStateMachinesThread.quitSafely(); mStateMachinesThread = null; com.android.bluetooth.hfp.HeadsetService.setHeadsetService(null); return true; }
static com.android.bluetooth.hfp.HeadsetStateMachine make(com.android.bluetooth.hfp.HeadsetService service, android.os.Looper looper, com.android.bluetooth.hfp.HeadsetNativeInterface nativeInterface, com.android.bluetooth.hfp.HeadsetSystemInterface systemInterface) { android.util.Log.i(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "make"); com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = new com.android.bluetooth.hfp.HeadsetStateMachine(service, looper, nativeInterface, systemInterface); stateMachine.start(); return stateMachine; }
@com.android.internal.annotations.VisibleForTesting public void processAnswerCall(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "processAnswerCall device is null"); return; } if ((mPhoneProxy) != null) { try { mPhoneProxy.answerCall(); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "Handsfree phone proxy null for answering call"); } }
@com.android.internal.annotations.VisibleForTesting public void processHangupCall(android.bluetooth.BluetoothDevice device, boolean isVirtualCallInProgress) { if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "processHangupCall device is null"); return; } if (isVirtualCallInProgress) { mService.stopScoUsingVirtualVoiceCall(device); } else { if ((mPhoneProxy) != null) { try { mPhoneProxy.hangupCall(); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "Handsfree phone proxy null for hanging up call"); } } }
@java.lang.Override @android.annotation.NonNull public android.os.PersistableBundle getConfigForSubId(int subId) { try { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, null); } catch (java.lang.SecurityException e) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_STATE, null); } int phoneId = android.telephony.SubscriptionManager.getPhoneId(subId); android.os.PersistableBundle retConfig = android.telephony.CarrierConfigManager.getDefaultConfig(); if (android.telephony.SubscriptionManager.isValidPhoneId(phoneId)) { android.os.PersistableBundle config = mConfigFromDefaultApp[phoneId]; if (config != null) { retConfig.putAll(config); retConfig.putBoolean(CarrierConfigManager.KEY_CARRIER_CONFIG_OVERRIDE_BOOL, true); } config = mConfigFromCarrierApp[phoneId]; if (config != null) { retConfig.putAll(config); retConfig.putBoolean(CarrierConfigManager.KEY_CARRIER_CONFIG_OVERRIDE_BOOL, true); } } return retConfig; }
public void testAesCbcHmacSha256Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false); }
public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false); }
public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true); }
public void testAesCbcHmacSha256Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true); }
public void testAesCbcHmacSha1Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false); }
public void testAesCbcHmacMd5Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true); }
public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false); }
public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false); }
private static void initQtaguidStats() throws java.io.IOException { android.net.cts.IpSecManagerTest.QtaguidStats.uidTxBytes = android.net.TrafficStats.getUidTxBytes(android.system.Os.getuid()); android.net.cts.IpSecManagerTest.QtaguidStats.uidRxBytes = android.net.TrafficStats.getUidRxBytes(android.system.Os.getuid()); android.net.cts.IpSecManagerTest.QtaguidStats.uidTxPackets = android.net.TrafficStats.getUidTxPackets(android.system.Os.getuid()); android.net.cts.IpSecManagerTest.QtaguidStats.uidRxPackets = android.net.TrafficStats.getUidRxPackets(android.system.Os.getuid()); android.net.cts.IpSecManagerTest.QtaguidStats.ifaceTxBytes = android.net.TrafficStats.getTxBytes(android.net.cts.IpSecManagerTest.QtaguidStats.LOOPBACK_INTERFACE); android.net.cts.IpSecManagerTest.QtaguidStats.ifaceRxBytes = android.net.TrafficStats.getRxBytes(android.net.cts.IpSecManagerTest.QtaguidStats.LOOPBACK_INTERFACE); android.net.cts.IpSecManagerTest.QtaguidStats.ifaceTxPackets = android.net.TrafficStats.getTxPackets(android.net.cts.IpSecManagerTest.QtaguidStats.LOOPBACK_INTERFACE); android.net.cts.IpSecManagerTest.QtaguidStats.ifaceRxPackets = android.net.TrafficStats.getRxPackets(android.net.cts.IpSecManagerTest.QtaguidStats.LOOPBACK_INTERFACE); }
public void testIkeOverUdpEncapSocket() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecManagerTest.IPV4_LOOPBACK); android.net.cts.IpSecManagerTest.QtaguidStats.initQtaguidStats(); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket()) { int localPort = android.net.cts.IpSecManagerTest.getPort(encapSocket.getSocket()); byte[] dataWithEspHeader = new byte[(android.net.cts.IpSecManagerTest.TEST_DATA.length) + 8]; java.lang.System.arraycopy(android.net.cts.IpSecManagerTest.TEST_DATA, 0, dataWithEspHeader, 8, android.net.cts.IpSecManagerTest.TEST_DATA.length); byte[] in = new byte[dataWithEspHeader.length]; android.system.Os.sendto(encapSocket.getSocket(), dataWithEspHeader, 0, dataWithEspHeader.length, 0, local, localPort); android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertArrayEquals("Encapsulated data did not match.", dataWithEspHeader, in); int ipHdrLen = (local instanceof java.net.Inet6Address) ? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int expectedPacketSize = ((dataWithEspHeader.length) + (android.net.cts.IpSecManagerTest.UDP_HDRLEN)) + ipHdrLen; android.net.cts.IpSecManagerTest.QtaguidStats.assertUidStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); android.net.cts.IpSecManagerTest.QtaguidStats.assertIfaceStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); } }
@org.junit.Test public void testOpenUdpEncapSocketTagsSocket() throws java.lang.Exception { com.android.server.IpSecService.UidFdTagger mockTagger = mock(IpSecService.UidFdTagger.class); com.android.server.IpSecService testIpSecService = new com.android.server.IpSecService(mMockContext, mMockIpSecSrvConfig, mockTagger); IpSecUdpEncapResponse udpEncapResp = testIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(udpEncapResp); assertEquals(IpSecManager.Status.OK, udpEncapResp.status); java.io.FileDescriptor sockFd = udpEncapResp.fileDescriptor.getFileDescriptor(); org.mockito.ArgumentMatcher<java.io.FileDescriptor> fdMatcher = new org.mockito.ArgumentMatcher<java.io.FileDescriptor>() { public boolean matches(java.io.FileDescriptor arg) { try { android.system.StructStat sockStat = android.system.Os.fstat(sockFd); android.system.StructStat argStat = android.system.Os.fstat(arg); return ((sockStat.st_ino) == (argStat.st_ino)) && ((sockStat.st_dev) == (argStat.st_dev)); } catch (android.system.ErrnoException e) { return false; } } }; verify(mockTagger).tag(argThat(fdMatcher), eq(android.system.Os.getuid())); testIpSecService.closeUdpEncapsulationSocket(udpEncapResp.resourceId); udpEncapResp.fileDescriptor.close(); }
public void testAesCbcHmacSha512Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false); }
public void testAesCbcHmacSha256Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true); }
public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false); }
public void testAesCbcHmacSha256Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false); }
public void testAesCbcHmacMd5Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false); }
public void testAesCbcHmacSha1Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true); }
public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false); }
public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false); }
public void testAesCbcHmacMd5Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false); }
public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false); }
public void testAesCbcHmacSha256Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false); }
public void testAesCbcHmacSha384Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true); }
public void testAesCbcHmacSha512Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true); }
public void testAesCbcHmacSha384Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false); }
public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false); }
public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false); }
private void checkUnconnectedUdp(android.net.IpSecTransform transform, java.net.InetAddress local) throws java.lang.Exception { java.io.FileDescriptor udpSocket = android.net.cts.IpSecManagerTest.getBoundUdpSocket(local); int localPort = android.net.cts.IpSecManagerTest.getPort(udpSocket); mISM.applyTransportModeTransform(udpSocket, transform); byte[] in = new byte[android.net.cts.IpSecManagerTest.TEST_DATA.length]; android.system.Os.sendto(udpSocket, android.net.cts.IpSecManagerTest.TEST_DATA, 0, android.net.cts.IpSecManagerTest.TEST_DATA.length, 0, local, localPort); android.system.Os.read(udpSocket, in, 0, in.length); assertArrayEquals("Encapsulated data did not match.", android.net.cts.IpSecManagerTest.TEST_DATA, in); mISM.removeTransportModeTransform(udpSocket, transform); android.system.Os.close(udpSocket); }
public void testAesCbcHmacSha512Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true); }
public void testAesCbcHmacMd5Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true); }
public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false); }
private static void assertUidStatsDelta(int uidTxPacketSize, int uidTxPacketCount, int uidRxPacketSize, int uidRxPacketCount) { long newUidTxBytes = android.net.TrafficStats.getUidTxBytes(android.system.Os.getuid()); long newUidRxBytes = android.net.TrafficStats.getUidRxBytes(android.system.Os.getuid()); long newUidTxPackets = android.net.TrafficStats.getUidTxPackets(android.system.Os.getuid()); long newUidRxPackets = android.net.TrafficStats.getUidRxPackets(android.system.Os.getuid()); assertEquals(uidTxPacketSize, (newUidTxBytes - (android.net.cts.IpSecManagerTest.QtaguidStats.uidTxBytes))); assertEquals(uidRxPacketSize, (newUidRxBytes - (android.net.cts.IpSecManagerTest.QtaguidStats.uidRxBytes))); assertEquals(uidTxPacketCount, (newUidTxPackets - (android.net.cts.IpSecManagerTest.QtaguidStats.uidTxPackets))); assertEquals(uidRxPacketCount, (newUidRxPackets - (android.net.cts.IpSecManagerTest.QtaguidStats.uidRxPackets))); }
public void testAesCbcHmacSha1Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true); }
private int calculateAesCbcEspPacketSizeWithAuth(int payloadLen, int authTruncLen) { final int ESP_HDRLEN = 4 + 4; final int ICV_LEN = authTruncLen / 8; payloadLen += 16; payloadLen += 2; payloadLen += (16 - (payloadLen % 16)) % 16; return (payloadLen + ESP_HDRLEN) + ICV_LEN; }
public void testAesCbcHmacSha1Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false); }
public void testAesCbcHmacSha512Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false); }
private static void assertIfaceStatsDelta(int ifaceTxPacketSize, int ifaceTxPacketCount, int ifaceRxPacketSize, int ifaceRxPacketCount) throws java.io.IOException { long newIfaceTxBytes = android.net.TrafficStats.getTxBytes(android.net.cts.IpSecManagerTest.QtaguidStats.LOOPBACK_INTERFACE); long newIfaceRxBytes = android.net.TrafficStats.getRxBytes(android.net.cts.IpSecManagerTest.QtaguidStats.LOOPBACK_INTERFACE); long newIfaceTxPackets = android.net.TrafficStats.getTxPackets(android.net.cts.IpSecManagerTest.QtaguidStats.LOOPBACK_INTERFACE); long newIfaceRxPackets = android.net.TrafficStats.getRxPackets(android.net.cts.IpSecManagerTest.QtaguidStats.LOOPBACK_INTERFACE); assertEquals(ifaceTxPacketSize, (newIfaceTxBytes - (android.net.cts.IpSecManagerTest.QtaguidStats.ifaceTxBytes))); assertEquals(ifaceRxPacketSize, (newIfaceRxBytes - (android.net.cts.IpSecManagerTest.QtaguidStats.ifaceRxBytes))); assertEquals(ifaceTxPacketCount, (newIfaceTxPackets - (android.net.cts.IpSecManagerTest.QtaguidStats.ifaceTxPackets))); assertEquals(ifaceRxPacketCount, (newIfaceRxPackets - (android.net.cts.IpSecManagerTest.QtaguidStats.ifaceRxPackets))); }
public void ratchetRat(android.telephony.ServiceState oldSS, android.telephony.ServiceState newSS) { int newVoiceRat = ratchetRat(oldSS.getRilVoiceRadioTechnology(), newSS.getRilVoiceRadioTechnology()); int newDataRat = ratchetRat(oldSS.getRilDataRadioTechnology(), newSS.getRilDataRadioTechnology()); boolean newUsingCA = newSS.isUsingCarrierAggregation(); newSS.setRilVoiceRadioTechnology(newVoiceRat); newSS.setRilDataRadioTechnology(newDataRat); newSS.setIsUsingCarrierAggregation(newUsingCA); }
public void deleteSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().deleteSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void getDownloadableSubscriptionMetadata(android.telephony.euicc.DownloadableSubscription subscription, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().getDownloadableSubscriptionMetadata(subscription, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void updateSubscriptionNickname(int subscriptionId, java.lang.String nickname, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().updateSubscriptionNickname(subscriptionId, nickname, callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
private com.android.internal.telephony.euicc.IEuiccController getIEuiccController() { return IEuiccController.Stub.asInterface(android.os.ServiceManager.getService("econtroller")); }
public void switchToSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().switchToSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void getDefaultDownloadableSubscriptionList(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().getDefaultDownloadableSubscriptionList(mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@android.annotation.Nullable public java.lang.String getEid() { if (!(isEnabled())) { return null; } try { return getIEuiccController().getEid(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void downloadSubscription(android.telephony.euicc.DownloadableSubscription subscription, boolean switchAfterDownload, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().downloadSubscription(subscription, switchAfterDownload, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@android.annotation.Nullable public android.telephony.euicc.EuiccInfo getEuiccInfo() { if (!(isEnabled())) { return null; } try { return getIEuiccController().getEuiccInfo(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void eraseSubscriptions(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().eraseSubscriptions(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void continueOperation(android.content.Intent resolutionIntent, android.os.Bundle resolutionExtras) { if (!(isEnabled())) { android.app.PendingIntent callbackIntent = resolutionIntent.getParcelableExtra(android.telephony.euicc.EuiccManager.EXTRA_EMBEDDED_SUBSCRIPTION_RESOLUTION_CALLBACK_INTENT); if (callbackIntent != null) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); } return; } try { getIEuiccController().continueOperation(resolutionIntent, resolutionExtras); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void retainSubscriptionsForFactoryReset(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().retainSubscriptionsForFactoryReset(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@java.lang.Override public void onHandoverFailed(java.lang.String callId, int error) { mHandler.obtainMessage(android.telecom.InCallService.MSG_ON_RTT_INITIATION_FAILURE, error, 0, callId).sendToTarget(); }
@java.lang.Override protected boolean start() { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "start()"); mSessionStatusHandler = new com.android.bluetooth.pbap.BluetoothPbapService.PbapHandler(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED); filter.addAction(com.android.bluetooth.pbap.BluetoothPbapService.AUTH_RESPONSE_ACTION); filter.addAction(com.android.bluetooth.pbap.BluetoothPbapService.AUTH_CANCELLED_ACTION); mInterrupted = false; com.android.bluetooth.pbap.BluetoothPbapConfig.init(this); mSessionStatusHandler.sendMessage(mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.START_LISTENER)); if ((mContactChangeObserver) == null) { registerReceiver(mPbapReceiver, filter); try { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Registering observer"); } mContactChangeObserver = new com.android.bluetooth.pbap.BluetoothPbapService.BluetoothPbapContentObserver(); getContentResolver().registerContentObserver(com.android.bluetooth.util.DevicePolicyUtils.getEnterprisePhoneUri(this), false, mContactChangeObserver); } catch (android.database.sqlite.SQLiteException e) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("SQLite exception: " + e)); } catch (java.lang.IllegalStateException e) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Illegal state exception, content observer is already registered"); } } return true; }
@java.lang.Override public synchronized void onAcceptFailed() { cleanUpSdpRecord(); if ((mServerSockets) != null) { mServerSockets.shutdown(false); mServerSockets = null; } if (!(mInterrupted)) { startSocketListeners(); } }
private void setSmsListener(android.telephony.ims.internal.aidl.IImsSmsListener listener) { synchronized(mLock) { getSmsImplementation().registerSmsListener(listener); } }
public void sendSms(int format, int messageRef, boolean isRetry, byte[] pdu) { onSendSmsResult(messageRef, android.telephony.ims.internal.SmsImplBase.SEND_STATUS_ERROR); }
@java.lang.Override public void sendSms(int format, int messageRef, boolean retry, byte[] pdu) { synchronized(mLock) { this.sendSms(format, messageRef, retry, pdu); } }
@java.lang.Override public int getSmsFormat() { synchronized(mLock) { return this.getSmsFormat(); } }
@java.lang.Override public void setSmsListener(android.telephony.ims.internal.aidl.IImsSmsListener l) throws android.os.RemoteException { synchronized(mLock) { this.setSmsListener(l); } }
private void sendSms(int format, int messageRef, boolean isRetry, byte[] pdu) { getSmsImplementation().sendSms(format, messageRef, isRetry, pdu); }
private int getSmsFormat() { return getSmsImplementation().getSmsFormat(); }
private void acknowledgeSms(int messageRef, int result) { getSmsImplementation().acknowledgeSms(messageRef, result); }
public final void onSmsStatusReportReceived(int messageRef, int format, byte[] pdu) { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.IllegalStateException("Feature not ready."); } try { mListener.onSmsStatusReportReceived(messageRef, format, pdu); acknowledgeSms(messageRef, android.telephony.ims.internal.SmsImplBase.STATUS_REPORT_STATUS_OK); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.internal.SmsImplBase.LOG_TAG, ("Can not process sms status report: " + (e.getMessage()))); acknowledgeSms(messageRef, android.telephony.ims.internal.SmsImplBase.STATUS_REPORT_STATUS_ERROR); } } }
public void acknowledgeSms(int messageRef, int result) { }
public final void onSendSmsResult(int messageRef, int result) throws java.lang.IllegalStateException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.IllegalStateException("Feature not ready."); } mListener.onSendSmsResult(messageRef, result); } }
@android.annotation.SystemApi public void registerSmsListener(android.telephony.ims.internal.IImsSmsListener listener) { synchronized(mLock) { mListener = listener; } }
public final void onSmsReceived(int format, byte[] pdu) throws java.lang.IllegalStateException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.IllegalStateException("Feature not ready."); } try { mListener.onSmsReceived(format, pdu); acknowledgeSms((-1), android.telephony.ims.internal.SmsImplBase.DELIVER_STATUS_OK); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.internal.SmsImplBase.LOG_TAG, ("Can not deliver sms: " + (e.getMessage()))); acknowledgeSms((-1), android.telephony.ims.internal.SmsImplBase.DELIVER_STATUS_ERROR); } } }
public final int getSmsFormat() { return mSmsFormat; }
@java.lang.Override public synchronized void onAcceptFailed() { android.util.Log.w(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "PBAP server socket accept thread failed. Restarting the server socket"); if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } clearServerSocket(); if ((mSessionStatusHandler) != null) { mSessionStatusHandler.removeCallbacksAndMessages(null); } mSessionStatusHandler.sendMessage(mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.START_LISTENER)); }
private synchronized void prepareServerSocket() { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "startsocketListener"); } if ((mServerSockets) != null) { mServerSockets.prepareForNewConnect(); } }
public final java.lang.String getOwnerPhoneNumberVcard(final boolean vcardType21, boolean ignorefilter, final byte[] filter) { if (com.android.bluetooth.pbap.BluetoothPbapConfig.useProfileForOwnerVcard()) { java.lang.String vcard = getOwnerPhoneNumberVcardFromProfile(vcardType21, ignorefilter, filter); if ((vcard != null) && ((vcard.length()) != 0)) { return vcard; } } com.android.bluetooth.pbap.BluetoothPbapCallLogComposer composer = new com.android.bluetooth.pbap.BluetoothPbapCallLogComposer(mContext); java.lang.String name = com.android.bluetooth.pbap.BluetoothPbapService.getLocalPhoneName(); java.lang.String number = com.android.bluetooth.pbap.BluetoothPbapService.getLocalPhoneNum(); java.lang.String vcard = composer.composeVCardForPhoneOwnNumber(Phone.TYPE_MOBILE, name, number, vcardType21); return vcard; }
private final java.lang.String getOwnerPhoneNumberVcardFromProfile(final boolean vcardType21, boolean ignorefilter, final byte[] filter) { int vcardType; java.lang.String vcard = null; com.android.bluetooth.pbap.BluetoothPbapVcardManager.VCardFilter vcardfilter = new com.android.bluetooth.pbap.BluetoothPbapVcardManager.VCardFilter((ignorefilter ? null : filter)); if (vcardType21) { vcardType = com.android.vcard.VCardConfig.VCARD_TYPE_V21_GENERIC; } else { vcardType = com.android.vcard.VCardConfig.VCARD_TYPE_V30_GENERIC; } if (!(com.android.bluetooth.pbap.BluetoothPbapConfig.includePhotosInVcard())) { vcardType |= com.android.vcard.VCardConfig.FLAG_REFRAIN_IMAGE_EXPORT; } vcard = com.android.bluetooth.pbap.BluetoothPbapUtils.createProfileVCard(mContext, vcardType, filter); if ((vcard != null) && (!ignorefilter)) { vcard = vcardfilter.apply(vcard, vcardType21); } return vcard; }
private static int getCallFeatures(int videoState, boolean isPulledCall, boolean isStoreHd, boolean isRtt) { int features = 0; if (android.telecom.VideoProfile.isVideo(videoState)) { features |= android.provider.CallLog.Calls.FEATURES_VIDEO; } if (isPulledCall) { features |= android.provider.CallLog.Calls.FEATURES_PULLED_EXTERNALLY; } if (isStoreHd) { features |= android.provider.CallLog.Calls.FEATURES_HD_CALL; } if (isRtt) { features |= android.provider.CallLog.Calls.FEATURES_RTT; } return features; }
void logCall(com.android.server.telecom.Call call, int callLogType, @android.annotation.Nullable com.android.server.telecom.CallLogManager.LogCallCompletedListener logCallCompletedListener) { final long creationTime = call.getCreationTimeMillis(); final long age = call.getAgeMillis(); final java.lang.String logNumber = getLogNumber(call); android.telecom.Log.d(com.android.server.telecom.CallLogManager.TAG, "logNumber set to: %s", android.telecom.Log.pii(logNumber)); final android.telecom.PhoneAccountHandle emergencyAccountHandle = com.android.server.telecom.TelephonyUtil.getDefaultEmergencyPhoneAccount().getAccountHandle(); java.lang.String formattedViaNumber = android.telephony.PhoneNumberUtils.formatNumber(call.getViaNumber(), getCountryIso()); formattedViaNumber = (formattedViaNumber != null) ? formattedViaNumber : call.getViaNumber(); android.telecom.PhoneAccountHandle accountHandle = call.getTargetPhoneAccount(); if (emergencyAccountHandle.equals(accountHandle)) { accountHandle = null; } java.lang.Long callDataUsage = ((call.getCallDataUsage()) == (Call.DATA_USAGE_NOT_SET)) ? null : call.getCallDataUsage(); int callFeatures = com.android.server.telecom.CallLogManager.getCallFeatures(call.getVideoStateHistory(), ((call.getDisconnectCause().getCode()) == (android.telecom.DisconnectCause.CALL_PULLED)), shouldSaveHdInfo(call, accountHandle), call.wasEverRttCall()); logCall(call.getCallerInfo(), logNumber, call.getPostDialDigits(), formattedViaNumber, call.getHandlePresentation(), callLogType, callFeatures, accountHandle, creationTime, age, callDataUsage, call.isEmergencyCall(), call.getInitiatingUser(), logCallCompletedListener); }
public boolean setNetworkSelectionModeManual(int subId, java.lang.String operatorNumeric, boolean persistSelection) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony != null) return telephony.setNetworkSelectionModeManual(subId, operatorNumeric, persistSelection); } catch (android.os.RemoteException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, "setNetworkSelectionModeManual RemoteException", ex); } catch (java.lang.NullPointerException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, "setNetworkSelectionModeManual NPE", ex); } return false; }
@org.junit.Before public void setUp() { mDevice = android.support.test.uiautomator.UiDevice.getInstance(getInstrumentation()); wm = android.view.WindowManagerGlobal.getWindowManagerService(); }
@org.junit.Test public void testNavigationBarDivider() throws java.lang.Exception { if (!(wm.hasNavigationBar())) { return; } mDevice.waitForIdle(); final int dividerColor = getInstrumentation().getContext().getColor(R.color.navigationBarDividerColor); final android.graphics.Bitmap bitmap = takeNavigationBarScreenshot(mActivityRule.getActivity()); int[] pixels = new int[(bitmap.getHeight()) * (bitmap.getWidth())]; bitmap.getPixels(pixels, 0, bitmap.getWidth(), 0, 0, bitmap.getWidth(), bitmap.getHeight()); for (int col = 0; col < (bitmap.getWidth()); col++) { if (dividerColor != (pixels[col])) { dumpBitmap(bitmap); fail(((("Invalid color exptected=" + dividerColor) + " actual=") + (pixels[col]))); } } }
@java.lang.Override public void run() { char[] charBuffer = new char[com.android.tradefed.util.ProcessHelper.ReaderThread.BUF_SIZE]; try { while (true) { int readCount = mReader.read(charBuffer, 0, charBuffer.length); if (readCount < 0) { break; } java.lang.String newRead = new java.lang.String(charBuffer, 0, readCount); int newLineLen = 0; if (newRead.endsWith("\r\n")) { newLineLen = 2; } else if (newRead.endsWith("\n")) { newLineLen = 1; } if ((mOutputType) == (com.android.tradefed.util.ProcessHelper.ReaderThread.TYPE_STDOUT)) { com.android.tradefed.log.LogUtil.CLog.i(newRead.substring(0, ((newRead.length()) - newLineLen))); } else if ((mOutputType) == (com.android.tradefed.util.ProcessHelper.ReaderThread.TYPE_STDERR)) { com.android.tradefed.log.LogUtil.CLog.e(newRead.substring(0, ((newRead.length()) - newLineLen))); } mBuffer.append(newRead); } } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e("%s: %s", getName(), e.toString()); } }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append("IccSlotStatus {").append(cardState).append(",").append(slotState).append(",").append("logicalSlotIndex=").append(logicalSlotIndex); if ((iccid) != null) { for (java.lang.String id : iccid) { sb.append(id).append(","); } } sb.append("}"); return sb.toString(); }
@java.lang.Override public void getIccSlotStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SLOT_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getIccCardStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getSlotStatus", e); } } } }
void getIccSlotStatus(android.os.Message result);
@java.lang.Override public void setLogicalToPhysicalSlotMapping(int[] physicalSlots, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { android.hardware.radio.V1_2.LogicalToPhysicalSlotMapping mapping = new android.hardware.radio.V1_2.LogicalToPhysicalSlotMapping(); mapping.numSlots = ((byte) (physicalSlots.length)); for (int slot : physicalSlots) { mapping.pysicalSlots.add(((byte) (slot))); } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_LOGICAL_TO_PHYSICAL_SLOT_MAPPING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getIccCardStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setLogicalToPhysicalSlotMapping", e); } } } }
public static void run() throws java.lang.Exception { java.lang.Thread thr = new java.lang.Thread(art.Test1941::LoopAllocFreeEnv, "LoopNative"); thr.start(); art.Trace.enableSingleStepTracing(art.Test1941.class, art.Test1941.class.getDeclaredMethod("notifySingleStep", java.lang.Thread.class, java.lang.reflect.Executable.class, java.lang.Long.TYPE), thr); art.Test1941.setTracingOn(java.lang.Thread.currentThread(), true); java.lang.System.out.println(("fib(20) is " + (art.Test1941.fib(20)))); thr.interrupt(); thr.join(); art.Test1941.setTracingOn(java.lang.Thread.currentThread(), false); art.Trace.disableTracing(null); if (art.Test1941.PRINT_CNT) { java.lang.System.out.println(("Number of envs created/destroyed: " + (art.Test1941.CNT))); } }
@com.android.internal.annotations.VisibleForTesting void removeUncleanAccounts() { if (com.android.bluetooth.mapclient.MapClientService.DBG) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); dump(sb); android.util.Log.d(com.android.bluetooth.mapclient.MapClientService.TAG, ("removeUncleanAccounts:InstanceMap end state: " + (sb.toString()))); } java.util.Iterator iterator = mMapInstanceMap.entrySet().iterator(); while (iterator.hasNext()) { java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.mapclient.MceStateMachine> profileConnection = ((java.util.Map.Entry) (iterator.next())); if ((profileConnection.getValue().getState()) == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { iterator.remove(); } } if (com.android.bluetooth.mapclient.MapClientService.DBG) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); dump(sb); android.util.Log.d(com.android.bluetooth.mapclient.MapClientService.TAG, ("removeUncleanAccounts:InstanceMap end state: " + (sb.toString()))); } }
@com.android.internal.annotations.VisibleForTesting java.util.Map<android.bluetooth.BluetoothDevice, com.android.bluetooth.mapclient.MceStateMachine> getInstanceMap() { return mMapInstanceMap; }
@java.lang.Override public boolean cleanup() { if (com.android.bluetooth.mapclient.MapClientService.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MapClientService.TAG, "in Cleanup"); } removeUncleanAccounts(); com.android.bluetooth.mapclient.MapClientService.clearMapClientService(); return true; }
public void dump(java.io.FileDescriptor fd, java.io.PrintWriter pw, java.lang.String[] args) { pw.println(("UiccController: " + (this))); pw.println((" mContext=" + (mContext))); pw.println((" mInstance=" + (com.android.internal.telephony.uicc.UiccController.mInstance))); pw.println((" mIccChangedRegistrants: size=" + (mIccChangedRegistrants.size()))); for (int i = 0; i < (mIccChangedRegistrants.size()); i++) { pw.println((((" mIccChangedRegistrants[" + i) + "]=") + (((android.os.Registrant) (mIccChangedRegistrants.get(i))).getHandler()))); } pw.println(); pw.flush(); pw.println((" mUiccCards: size=" + (mUiccCards.length))); for (int i = 0; i < (mUiccCards.length); i++) { if ((mUiccCards[i]) == null) { pw.println(((" mUiccCards[" + i) + "]=null")); } else { pw.println((((" mUiccCards[" + i) + "]=") + (mUiccCards[i]))); mUiccCards[i].dump(fd, pw, args); } } pw.println((" mUiccSlots: size=" + (mUiccSlots.length))); for (int i = 0; i < (mUiccSlots.length); i++) { if ((mUiccSlots[i]) == null) { pw.println(((" mUiccSlots[" + i) + "]=null")); } else { pw.println((((" mUiccSlots[" + i) + "]=") + (mUiccSlots[i]))); mUiccSlots[i].dump(fd, pw, args); } } pw.println("mCardLogs: "); for (int i = 0; i < (mCardLogs.size()); ++i) { pw.println((" " + (mCardLogs.get(i)))); } }
private int getSlotIdFromPhoneId(int phoneId) { return 0; }
private static void setSubscriptionPropertyIntoContentResolver(int subId, java.lang.String propKey, java.lang.String propValue, android.content.ContentResolver resolver) { android.content.ContentValues value = new android.content.ContentValues(); switch (propKey) { case android.telephony.SubscriptionManager.CB_EXTREME_THREAT_ALERT : case android.telephony.SubscriptionManager.CB_SEVERE_THREAT_ALERT : case android.telephony.SubscriptionManager.CB_AMBER_ALERT : case android.telephony.SubscriptionManager.CB_EMERGENCY_ALERT : case android.telephony.SubscriptionManager.CB_ALERT_SOUND_DURATION : case android.telephony.SubscriptionManager.CB_ALERT_REMINDER_INTERVAL : case android.telephony.SubscriptionManager.CB_ALERT_VIBRATE : case android.telephony.SubscriptionManager.CB_ALERT_SPEECH : case android.telephony.SubscriptionManager.CB_ETWS_TEST_ALERT : case android.telephony.SubscriptionManager.CB_CHANNEL_50_ALERT : case android.telephony.SubscriptionManager.CB_CMAS_TEST_ALERT : case android.telephony.SubscriptionManager.CB_OPT_OUT_DIALOG : case android.telephony.SubscriptionManager.ENHANCED_4G_MODE_ENABLED : case android.telephony.SubscriptionManager.VT_IMS_ENABLED : case android.telephony.SubscriptionManager.WFC_IMS_ENABLED : case android.telephony.SubscriptionManager.WFC_IMS_MODE : case android.telephony.SubscriptionManager.WFC_IMS_ROAMING_MODE : case android.telephony.SubscriptionManager.WFC_IMS_ROAMING_ENABLED : value.put(propKey, java.lang.Integer.parseInt(propValue)); break; default : if (com.android.internal.telephony.SubscriptionController.DBG) com.android.internal.telephony.SubscriptionController.slogd("Invalid column name"); break; } resolver.update(SubscriptionManager.CONTENT_URI, value, (((android.telephony.SubscriptionManager.UNIQUE_KEY_SUBSCRIPTION_ID) + "=") + (java.lang.Integer.toString(subId))), null); android.os.Binder.restoreCallingIdentity(token); }
protected void handleRefresh(com.android.internal.telephony.uicc.IccRefreshResponse refreshResponse) { if (refreshResponse == null) { if (com.android.internal.telephony.uicc.IccRecords.DBG) log("handleRefresh received without input"); return; } if (((refreshResponse.aid) != null) && (!(refreshResponse.aid.equals(mParentApp.getAid())))) { return; } switch (refreshResponse.refreshResult) { case IccRefreshResponse.REFRESH_RESULT_FILE_UPDATE : if (com.android.internal.telephony.uicc.IccRecords.DBG) log("handleRefresh with SIM_FILE_UPDATED"); handleFileUpdate(refreshResponse.efId); break; default : if (com.android.internal.telephony.uicc.IccRecords.DBG) log("handleRefresh with unknown operation"); break; } }
public void handleMessage(android.os.Message msg) { android.os.AsyncResult ar; if (mDestroyed.get()) { android.telephony.Rlog.e(com.android.internal.telephony.uicc.IsimUiccRecords.LOG_TAG, (((("Received message " + msg) + "[") + (msg.what)) + "] while being destroyed. Ignoring.")); return; } loge((((("IsimUiccRecords: handleMessage " + msg) + "[") + (msg.what)) + "] ")); try { switch (msg.what) { case com.android.internal.telephony.uicc.IsimUiccRecords.EVENT_APP_READY : onReady(); break; case com.android.internal.telephony.uicc.IsimUiccRecords.EVENT_ISIM_REFRESH : broadcastRefresh(); break; case com.android.internal.telephony.uicc.IsimUiccRecords.EVENT_ISIM_AUTHENTICATE_DONE : ar = ((android.os.AsyncResult) (msg.obj)); log("EVENT_ISIM_AUTHENTICATE_DONE"); if ((ar.exception) != null) { log(("Exception ISIM AKA: " + (ar.exception))); } else { try { auth_rsp = ((java.lang.String) (ar.result)); log(("ISIM AKA: auth_rsp = " + (auth_rsp))); } catch (java.lang.Exception e) { log(("Failed to parse ISIM AKA contents: " + e)); } } synchronized(mLock) { mLock.notifyAll(); } break; default : super.handleMessage(msg); } } catch (java.lang.RuntimeException exc) { android.telephony.Rlog.w(com.android.internal.telephony.uicc.IsimUiccRecords.LOG_TAG, "Exception parsing SIM record", exc); } }
@org.junit.After public void tearDown() throws java.lang.Exception { super.tearDown(); mIccRecords.dispose(); }
@org.junit.Test public void testDisposeCallsUnregisterForIccRefresh() { verify(mMockCI).registerForIccRefresh(any(com.android.internal.telephony.uicc.IccRecords.class), eq(IccRecords.EVENT_REFRESH), isNull()); mIccRecords.dispose(); verify(mMockCI).unregisterForIccRefresh(any(com.android.internal.telephony.uicc.IccRecords.class)); }
@java.lang.Override public void onLooperPrepared() { mIsimUiccRecords = new com.android.internal.telephony.uicc.IsimUiccRecords(mUiccCardApplication3gpp, mContext, mMockCI); setReady(true); }
@org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(this.getClass().getSimpleName()); mMockCI = mock(com.android.internal.telephony.CommandsInterface.class); new com.android.internal.telephony.uicc.IsimUiccRecordsTest.IsimUiccRecordsTestHandler(TAG).start(); waitUntilReady(); }
@org.junit.Test public void testBroadcastRefresh() { android.os.Message msg = new android.os.Message(); msg.what = ((java.lang.Integer) (getStaticField(com.android.internal.telephony.uicc.IsimUiccRecords.class, mIsimUiccRecords, "EVENT_ISIM_REFRESH"))); mIsimUiccRecords.handleMessage(msg); org.mockito.ArgumentCaptor<android.content.Intent> intentCapture = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mContext).sendBroadcast(intentCapture.capture()); assertEquals(((android.content.Intent) (intentCapture.getValue())).getAction(), IsimUiccRecords.INTENT_ISIM_REFRESH); }
@org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(this.getClass().getSimpleName()); mMockCI = mock(com.android.internal.telephony.CommandsInterface.class); new com.android.internal.telephony.uicc.IccRecordsTest.IccRecordsTestHandler(TAG).start(); waitUntilReady(); }
@java.lang.Override public void onLooperPrepared() { mIccRecords = new com.android.internal.telephony.uicc.SIMRecords(mUiccCardApplication3gpp, mContext, mMockCI); setReady(true); }
public int getNumApplications() { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { int count = 0; for (com.android.internal.telephony.uicc.UiccCardApplication a : mUiccApplications) { if (a != null) { count++; } } return count; } else { if ((mUiccProfile) != null) { return mUiccProfile.getNumApplications(); } else { return 0; } } }
public com.android.internal.telephony.uicc.IccCardStatus.PinState getUniversalPinState() { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { synchronized(mLock) { return mUniversalPinState; } } else { if ((mUiccProfile) != null) { return mUiccProfile.getUniversalPinState(); } else { return com.android.internal.telephony.uicc.IccCardStatus.PinState.PINSTATE_UNKNOWN; } } }
public boolean isApplicationOnIcc(com.android.internal.telephony.uicc.IccCardApplicationStatus.AppType type) { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { synchronized(mLock) { for (int i = 0; i < (mUiccApplications.length); i++) { if (((mUiccApplications[i]) != null) && ((mUiccApplications[i].getType()) == type)) { return true; } } return false; } } else { if ((mUiccProfile) != null) { return mUiccProfile.isApplicationOnIcc(type); } else { return false; } } }
public int getCarrierPrivilegeStatus(android.content.pm.Signature signature, java.lang.String packageName) { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : carrierPrivilegeRules.getCarrierPrivilegeStatus(signature, packageName); } else { if ((mUiccProfile) != null) { return mUiccProfile.getCarrierPrivilegeStatus(signature, packageName); } else { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED; } } }
public boolean setOperatorBrandOverride(java.lang.String brand) { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { log(("setOperatorBrandOverride: " + brand)); log(("current iccId: " + (getIccId()))); java.lang.String iccId = getIccId(); if (android.text.TextUtils.isEmpty(iccId)) { return false; } android.content.SharedPreferences.Editor spEditor = android.preference.PreferenceManager.getDefaultSharedPreferences(mContext).edit(); java.lang.String key = (com.android.internal.telephony.uicc.UiccCard.OPERATOR_BRAND_OVERRIDE_PREFIX) + iccId; if (brand == null) { spEditor.remove(key).commit(); } else { spEditor.putString(key, brand).commit(); } return true; } else { if ((mUiccProfile) != null) { return mUiccProfile.setOperatorBrandOverride(brand); } else { return false; } } }
public int getCarrierPrivilegeStatusForCurrentTransaction(android.content.pm.PackageManager packageManager) { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : carrierPrivilegeRules.getCarrierPrivilegeStatusForCurrentTransaction(packageManager); } else { if ((mUiccProfile) != null) { return mUiccProfile.getCarrierPrivilegeStatusForCurrentTransaction(packageManager); } else { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED; } } }
public void iccTransmitApduLogicalChannel(int channel, int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { if ((!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) || ((mUiccProfile) == null)) { mCi.iccTransmitApduLogicalChannel(channel, cla, command, p1, p2, p3, data, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_TRANSMIT_APDU_LOGICAL_CHANNEL_DONE, response)); } else { if ((mUiccProfile) != null) { mUiccProfile.iccTransmitApduLogicalChannel(channel, cla, command, p1, p2, p3, data, response); } } }
public void iccCloseLogicalChannel(int channel, android.os.Message response) { if ((!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) || ((mUiccProfile) == null)) { loglocal(("Close Logical Channel: " + channel)); mCi.iccCloseLogicalChannel(channel, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_CLOSE_LOGICAL_CHANNEL_DONE, response)); } else { if ((mUiccProfile) != null) { mUiccProfile.iccCloseLogicalChannel(channel, response); } } }
public java.util.List<java.lang.String> getCarrierPackageNamesForIntent(android.content.pm.PackageManager packageManager, android.content.Intent intent) { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? null : carrierPrivilegeRules.getCarrierPackageNamesForIntent(packageManager, intent); } else { if ((mUiccProfile) != null) { return mUiccProfile.getCarrierPackageNamesForIntent(packageManager, intent); } else { return null; } } }
public com.android.internal.telephony.uicc.UiccCardApplication getApplicationIndex(int index) { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { synchronized(mLock) { if ((index >= 0) && (index < (mUiccApplications.length))) { return mUiccApplications[index]; } return null; } } else { if ((mUiccProfile) != null) { return mUiccProfile.getApplicationIndex(index); } else { return null; } } }
public java.lang.String getOperatorBrandOverride() { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { java.lang.String iccId = getIccId(); if (android.text.TextUtils.isEmpty(iccId)) { return null; } android.content.SharedPreferences sp = android.preference.PreferenceManager.getDefaultSharedPreferences(mContext); java.lang.String brandName = sp.getString(((com.android.internal.telephony.uicc.UiccCard.OPERATOR_BRAND_OVERRIDE_PREFIX) + iccId), null); if (brandName == null) { android.telephony.CarrierConfigManager manager = ((android.telephony.CarrierConfigManager) (mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE))); int subId = com.android.internal.telephony.SubscriptionController.getInstance().getSubIdUsingPhoneId(mPhoneId); if (manager != null) { android.os.PersistableBundle bundle = manager.getConfigForSubId(subId); if ((bundle != null) && (bundle.getBoolean(CarrierConfigManager.KEY_CARRIER_NAME_OVERRIDE_BOOL))) { brandName = bundle.getString(CarrierConfigManager.KEY_CARRIER_NAME_STRING); } } } return brandName; } else { if ((mUiccProfile) != null) { return mUiccProfile.getOperatorBrandOverride(); } else { return null; } } }
public com.android.internal.telephony.uicc.UiccCardApplication getApplicationByType(int type) { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { synchronized(mLock) { for (int i = 0; i < (mUiccApplications.length); i++) { if (((mUiccApplications[i]) != null) && ((mUiccApplications[i].getType().ordinal()) == type)) { return mUiccApplications[i]; } } return null; } } else { if ((mUiccProfile) != null) { return mUiccProfile.getApplicationByType(type); } else { return null; } } }
public boolean areCarrierPriviligeRulesLoaded() { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return (carrierPrivilegeRules == null) || (carrierPrivilegeRules.areCarrierPriviligeRulesLoaded()); } else { log(("mUiccProfile: " + (mUiccProfile))); if ((mUiccProfile) != null) { return mUiccProfile.areCarrierPriviligeRulesLoaded(); } else { return false; } } }
public void unregisterForCarrierPrivilegeRulesLoaded(android.os.Handler h) { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { synchronized(mLock) { mCarrierPrivilegeRegistrants.remove(h); } } else { if ((mUiccProfile) != null) { mUiccProfile.unregisterForCarrierPrivilegeRulesLoaded(h); } } }
public int getCarrierPrivilegeStatus(android.content.pm.PackageManager packageManager, java.lang.String packageName) { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : carrierPrivilegeRules.getCarrierPrivilegeStatus(packageManager, packageName); } else { if ((mUiccProfile) != null) { return mUiccProfile.getCarrierPrivilegeStatus(packageManager, packageName); } else { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED; } } }
public void iccExchangeSimIO(int fileID, int command, int p1, int p2, int p3, java.lang.String pathID, android.os.Message response) { if ((!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) || ((mUiccProfile) == null)) { mCi.iccIO(command, fileID, pathID, p1, p2, p3, null, null, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_SIM_IO_DONE, response)); } else { if ((mUiccProfile) != null) { mUiccProfile.iccExchangeSimIO(fileID, command, p1, p2, p3, pathID, response); } } }
public boolean hasCarrierPrivilegeRules() { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return (carrierPrivilegeRules != null) && (carrierPrivilegeRules.hasCarrierPrivilegeRules()); } else { if ((mUiccProfile) != null) { return mUiccProfile.hasCarrierPrivilegeRules(); } else { return false; } } }
public void registerForCarrierPrivilegeRulesLoaded(android.os.Handler h, int what, java.lang.Object obj) { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { synchronized(mLock) { android.os.Registrant r = new android.os.Registrant(h, what, obj); mCarrierPrivilegeRegistrants.add(r); if (areCarrierPriviligeRulesLoaded()) { r.notifyRegistrant(); } } } else { if ((mUiccProfile) != null) { mUiccProfile.registerForCarrierPrivilegeRulesLoaded(h, what, obj); } } }
public void dispose() { synchronized(mLock) { if (com.android.internal.telephony.uicc.UiccCard.DBG) log("Disposing card"); if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { if ((mCatService) != null) { mCatService.dispose(); } for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { app.dispose(); } } mCatService = null; mUiccApplications = null; mCarrierPrivilegeRules = null; } if (com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR) { if ((mUiccProfile) != null) { mUiccProfile.dispose(); } mUiccProfile = null; } } }
public com.android.internal.telephony.uicc.UiccCardApplication getApplication(int family) { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { synchronized(mLock) { int index = IccCardStatus.CARD_MAX_APPS; switch (family) { case UiccController.APP_FAM_3GPP : index = mGsmUmtsSubscriptionAppIndex; break; case UiccController.APP_FAM_3GPP2 : index = mCdmaSubscriptionAppIndex; break; case UiccController.APP_FAM_IMS : index = mImsSubscriptionAppIndex; break; } if ((index >= 0) && (index < (mUiccApplications.length))) { return mUiccApplications[index]; } return null; } } else { if ((mUiccProfile) != null) { return mUiccProfile.getApplication(family); } else { return null; } } }
public boolean resetAppWithAid(java.lang.String aid) { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { synchronized(mLock) { boolean changed = false; for (int i = 0; i < (mUiccApplications.length); i++) { if (((mUiccApplications[i]) != null) && ((android.text.TextUtils.isEmpty(aid)) || (aid.equals(mUiccApplications[i].getAid())))) { mUiccApplications[i].dispose(); mUiccApplications[i] = null; changed = true; } } if (android.text.TextUtils.isEmpty(aid)) { if ((mCarrierPrivilegeRules) != null) { mCarrierPrivilegeRules = null; changed = true; } if ((mCatService) != null) { mCatService.dispose(); mCatService = null; changed = true; } } return changed; } } else { if ((mUiccProfile) != null) { return mUiccProfile.resetAppWithAid(aid); } else { return false; } } }
public int getCarrierPrivilegeStatus(android.content.pm.PackageInfo packageInfo) { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : carrierPrivilegeRules.getCarrierPrivilegeStatus(packageInfo); } else { if ((mUiccProfile) != null) { return mUiccProfile.getCarrierPrivilegeStatus(packageInfo); } else { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED; } } }
public boolean areCarrierPriviligeRulesLoaded() { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); log(("carrierPrivilegeRules" + carrierPrivilegeRules)); return (carrierPrivilegeRules == null) || (carrierPrivilegeRules.areCarrierPriviligeRulesLoaded()); }
public void sendEnvelopeWithStatus(java.lang.String contents, android.os.Message response) { if ((!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) || ((mUiccProfile) == null)) { mCi.sendEnvelopeWithStatus(contents, response); } else { if ((mUiccProfile) != null) { mUiccProfile.sendEnvelopeWithStatus(contents, response); } } }
public void iccOpenLogicalChannel(java.lang.String AID, int p2, android.os.Message response) { if ((!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) || ((mUiccProfile) == null)) { loglocal(((((((("Open Logical Channel: " + AID) + " , ") + p2) + " by pid:") + (android.os.Binder.getCallingPid())) + " uid:") + (android.os.Binder.getCallingUid()))); mCi.iccOpenLogicalChannel(AID, p2, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_OPEN_LOGICAL_CHANNEL_DONE, response)); } else { if ((mUiccProfile) != null) { mUiccProfile.iccOpenLogicalChannel(AID, p2, response); } } }
public void iccTransmitApduBasicChannel(int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { if ((!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) || ((mUiccProfile) == null)) { mCi.iccTransmitApduBasicChannel(cla, command, p1, p2, p3, data, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_TRANSMIT_APDU_BASIC_CHANNEL_DONE, response)); } else { if ((mUiccProfile) != null) { mUiccProfile.iccTransmitApduBasicChannel(cla, command, p1, p2, p3, data, response); } } }
public java.lang.String getIccId() { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir != null) && ((ir.getIccId()) != null)) { return ir.getIccId(); } } } return null; } else { if ((mUiccProfile) != null) { return mUiccProfile.getIccId(); } else { return null; } } }
private native void gattClientScanFilterAddNative(int client_if, com.android.bluetooth.gatt.ScanFilterQueue[] entries, int filter_index);
public static long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.system.SendfileOffset inOffset, long byteCount) throws android.system.ErrnoException { return Libcore.os.sendfile(outFd, inFd, inOffset, byteCount); }
public native int ioctlInt(java.io.FileDescriptor fd, int cmd, android.system.IoctlIntArg arg) throws android.system.ErrnoException;
public native int waitpid(int pid, android.system.WaitpidStatus status, int options) throws android.system.ErrnoException;
public int waitpid(int pid, android.system.WaitpidStatus status, int options) throws android.system.ErrnoException { return os.waitpid(pid, status, options); }
public int ioctlInt(java.io.FileDescriptor fd, int cmd, android.system.IoctlIntArg arg) throws android.system.ErrnoException { return os.ioctlInt(fd, cmd, arg); }
public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.system.SendfileOffset inOffset, long byteCount) throws android.system.ErrnoException { return os.sendfile(outFd, inFd, inOffset, byteCount); }
@java.lang.Override public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.system.SendfileOffset inOffset, long byteCount) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); return os.sendfile(outFd, inFd, inOffset, byteCount); }
public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.system.SendfileOffset inOffset, long byteCount) throws android.system.ErrnoException;
public int ioctlInt(java.io.FileDescriptor fd, int cmd, android.system.IoctlIntArg arg) throws android.system.ErrnoException;
public int waitpid(int pid, android.system.WaitpidStatus status, int options) throws android.system.ErrnoException;
@java.lang.Deprecated public static int waitpid(int pid, android.util.MutableInt status, int options) throws android.system.ErrnoException { if (status == null) { return android.system.Os.waitpid(pid, ((android.system.WaitpidStatus) (null)), options); } else { android.system.WaitpidStatus internalStatus = new android.system.WaitpidStatus(status.value); try { return android.system.Os.waitpid(pid, internalStatus, options); } finally { status.value = internalStatus.value; } } }
public static int ioctlInt(java.io.FileDescriptor fd, int cmd, android.system.IoctlIntArg arg) throws android.system.ErrnoException { return Libcore.os.ioctlInt(fd, cmd, arg); }
public static int waitpid(int pid, android.system.WaitpidStatus status, int options) throws android.system.ErrnoException { return Libcore.os.waitpid(pid, status, options); }
public native long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.system.SendfileOffset inOffset, long byteCount) throws android.system.ErrnoException;
public static int available(java.io.FileDescriptor fd) throws java.io.IOException { try { android.system.IoctlIntArg available = new android.system.IoctlIntArg(0); Libcore.os.ioctlInt(fd, libcore.io.FIONREAD, available); if ((available.value) < 0) { available.value = 0; } return available.value; } catch (android.system.ErrnoException errnoException) { if ((errnoException.errno) == (ENOTTY)) { return 0; } throw errnoException.rethrowAsIOException(); } }
@java.lang.Deprecated public static long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException { android.system.SendfileOffset internalInOffset = new android.system.SendfileOffset(inOffset.value); try { return Libcore.os.sendfile(outFd, inFd, internalInOffset, byteCount); } finally { inOffset.value = internalInOffset.value; } }
boolean hasOnlyDisconnectedCalls() { if ((mCalls.size()) == 0) { return false; } for (com.android.server.telecom.Call call : mCalls) { if (!(call.isDisconnected())) { return false; } } return true; }
public native long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong offset, long byteCount) throws android.system.ErrnoException;
public static long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.system.Int64Ref offset, long byteCount) throws android.system.ErrnoException { if (offset == null) { return Libcore.os.sendfile(outFd, inFd, null, byteCount); } else { libcore.util.MutableLong internalOffset = new libcore.util.MutableLong(offset.value); try { return Libcore.os.sendfile(outFd, inFd, internalOffset, byteCount); } finally { offset.value = internalOffset.value; } } }
@java.lang.Override public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong offset, long byteCount) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); return os.sendfile(outFd, inFd, offset, byteCount); }
public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong offset, long byteCount) throws android.system.ErrnoException { return os.sendfile(outFd, inFd, offset, byteCount); }
public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong offset, long byteCount) throws android.system.ErrnoException;
public android.net.IpSecTransform buildTunnelModeTransform(java.net.InetAddress localAddress, java.net.InetAddress remoteAddress) { if (localAddress == null) { throw new java.lang.IllegalArgumentException("Local address may not be null!"); } if (remoteAddress == null) { throw new java.lang.IllegalArgumentException("Remote address may not be null!"); } mConfig.setLocalAddress(localAddress.getHostAddress()); mConfig.setRemoteAddress(remoteAddress.getHostAddress()); mConfig.setMode(android.net.IpSecTransform.MODE_TUNNEL); return new android.net.IpSecTransform(mContext, mConfig); }
public android.net.IpSecTransform buildTransportModeTransform(java.net.InetAddress remoteAddress) throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { if (remoteAddress == null) { throw new java.lang.IllegalArgumentException("Remote address may not be null!"); } mConfig.setMode(android.net.IpSecTransform.MODE_TRANSPORT); mConfig.setRemoteAddress(remoteAddress.getHostAddress()); return new android.net.IpSecTransform(mContext, mConfig).activate(); }
@java.lang.Override public void enter() { if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } if ((mConnSocket) != null) { try { mConnSocket.close(); mConnSocket = null; } catch (java.io.IOException e) { android.util.Log.e(com.android.bluetooth.pbap.PbapStateMachine.TAG, ("Close Connection Socket error: " + (e.toString()))); } } mSessionStatusHandler.obtainMessage(BluetoothPbapService.MSG_STATE_MACHINE_DONE).sendToTarget(); }
private void stopObexServerSession() { if (com.android.bluetooth.pbap.PbapStateMachine.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.PbapStateMachine.TAG, "Pbap Service stopObexServerSession"); } transitionTo(mDisconnected); }
@java.lang.Override public void enter() { try { startObexServerSession(); } catch (java.io.IOException ex) { android.util.Log.e(com.android.bluetooth.pbap.PbapStateMachine.TAG, ("Caught exception starting obex server session" + (ex.toString()))); } }
@java.lang.Override public void enter() { mService.checkOrGetPhonebookPermission(mRemoteDevice); }
@java.lang.Override public boolean processMessage(android.os.Message message) { switch (message.what) { case com.android.bluetooth.pbap.PbapStateMachine.DISCONNECT : stopObexServerSession(); break; } return HANDLED; }
@java.lang.Override public boolean processMessage(android.os.Message message) { switch (message.what) { case com.android.bluetooth.pbap.PbapStateMachine.AUTHORIZED : transitionTo(mConnected); break; case com.android.bluetooth.pbap.PbapStateMachine.REJECTED : transitionTo(mDisconnected); break; case com.android.bluetooth.pbap.PbapStateMachine.DISCONNECT : mSessionStatusHandler.removeMessages(BluetoothPbapService.USER_TIMEOUT); mSessionStatusHandler.obtainMessage(BluetoothPbapService.USER_TIMEOUT).sendToTarget(); transitionTo(mDisconnected); break; } return HANDLED; }
@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice remoteDevice, android.bluetooth.BluetoothSocket socket) { mPbapStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(this, mHandlerThread.getLooper(), remoteDevice, socket, this, mSessionStatusHandler); return true; }
private void clearServerSocket() { mPbapStateMachine.sendMessage(PbapStateMachine.DISCONNECT); cleanUpSdpRecord(); if ((mServerSockets) != null) { mServerSockets.shutdown(false); mServerSockets = null; } }
void checkOrGetPhonebookPermission(android.bluetooth.BluetoothDevice device) { int permission = device.getPhonebookAccessPermission(); if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("getPhonebookAccessPermission() = " + permission)); } if (permission == (android.bluetooth.BluetoothDevice.ACCESS_ALLOWED)) { mPbapStateMachine.sendMessage(PbapStateMachine.AUTHORIZED); } else if (permission == (android.bluetooth.BluetoothDevice.ACCESS_REJECTED)) { mPbapStateMachine.sendMessage(PbapStateMachine.REJECTED); } else { android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_CONNECTION_ACCESS_REQUEST); intent.setClassName(com.android.bluetooth.pbap.BluetoothPbapService.ACCESS_AUTHORITY_PACKAGE, com.android.bluetooth.pbap.BluetoothPbapService.ACCESS_AUTHORITY_CLASS); intent.putExtra(BluetoothDevice.EXTRA_ACCESS_REQUEST_TYPE, BluetoothDevice.REQUEST_TYPE_PHONEBOOK_ACCESS); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mRemoteDevice); intent.putExtra(BluetoothDevice.EXTRA_PACKAGE_NAME, this.getPackageName()); this.sendOrderedBroadcast(intent, com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM); if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("waiting for authorization for connection from: " + (mRemoteDevice))); } mSessionStatusHandler.sendMessageDelayed(mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.USER_TIMEOUT), com.android.bluetooth.pbap.BluetoothPbapService.USER_CONFIRM_TIMEOUT_VALUE); } }
@java.lang.Override protected boolean stop() { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "stop()"); if ((mContactChangeObserver) == null) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Avoid unregister when receiver it is not registered"); return true; } try { unregisterReceiver(mPbapReceiver); getContentResolver().unregisterContentObserver(mContactChangeObserver); mContactChangeObserver = null; } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Unable to unregister pbap receiver", e); } mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.SHUTDOWN).sendToTarget(); setState(BluetoothProfile.STATE_DISCONNECTED, BluetoothPbap.RESULT_CANCELED); mHandlerThread.quitSafely(); return true; }
void disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH_ADMIN permission"); synchronized(this) { mPbapStateMachine.sendMessage(PbapStateMachine.DISCONNECT); setState(BluetoothProfile.STATE_DISCONNECTED, BluetoothPbap.RESULT_CANCELED); } }
private void phoneStateChanged(int numActive, int numHeld, int callState, java.lang.String number, int type) { enforceCallingOrSelfPermission(android.Manifest.permission.MODIFY_PHONE_STATE, null); broadCastMessageToStateMachines(HeadsetStateMachine.CALL_STATE_CHANGED, new com.android.bluetooth.hfp.HeadsetCallState(numActive, numHeld, callState, number, type)); }
public android.bluetooth.BluetoothDevice getActiveDevice() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); log(("getActiveDevice returning " + (mActiveDevice))); return mActiveDevice; }
public void connectionStateChanged(android.bluetooth.BluetoothDevice device, int newState, int prevState) { if ((prevState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (newState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.AUDIO_CONNECTABLE_STATES).size()) > 1) { mNativeInterface.configureInbandRingingEnabledUsingBsir(false); mInbandRingingAllowed = false; } } if ((prevState != (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) && (newState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED))) { if ((getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.AUDIO_CONNECTABLE_STATES).size()) <= 1) { mNativeInterface.configureInbandRingingEnabledUsingBsir(true); mInbandRingingAllowed = true; } } }
boolean connectAudio(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ("connectAudio, device=" + device)); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: device is null"); return false; } synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("connectAudio: device " + device) + " was never connected/connecting")); return false; } if ((stateMachine.getConnectionState()) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: profile not connected"); return false; } if (isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ("connectAudio: audio is not idle, current audio device is " + (getCurrentAudioDevice()))); return false; } stateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, device); } return true; }
public void setActiveDevice(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ("setActiveDevice to " + device)); mActiveDevice = device; if (!(mNativeInterface.setActiveDevice(device))) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, ("Failed to set active device on native interface to " + device)); } }
public void dump(java.lang.StringBuilder sb) { com.android.bluetooth.btservice.ProfileService.println(sb, ("mCurrentDevice: " + (mCurrentDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mVirtualCallStarted: " + (mVirtualCallStarted))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mVoiceRecognitionStarted: " + (mVoiceRecognitionStarted))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mWaitingForVoiceRecognition: " + (mWaitingForVoiceRecognition))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mDialingOut: " + (mDialingOut))); com.android.bluetooth.btservice.ProfileService.println(sb, ("StateMachine: " + (this))); com.android.bluetooth.btservice.ProfileService.println(sb, ("PreviousState: " + (mPrevState))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mAudioState: " + (getAudioState()))); java.io.StringWriter stringWriter = new java.io.StringWriter(); java.io.PrintWriter printWriter = new java.io.PrintWriter(stringWriter); super.dump(new java.io.FileDescriptor(), printWriter, new java.lang.String[]{ }); printWriter.flush(); stringWriter.flush(); com.android.bluetooth.btservice.ProfileService.println(sb, ("StateMachineLog: " + (stringWriter.toString()))); }
private boolean isScoAcceptable() { if (mService.getForceScoAudio()) { return true; } if (!(mService.getAudioRouteAllowed())) { return false; } if ((isInCall()) || (mVoiceRecognitionStarted)) { return true; } if (((isRinging()) && (android.bluetooth.BluetoothHeadset.isInbandRingingSupported(mService))) && (mService.getInbandRingingAllowed())) { return true; } return false; }
@com.android.internal.annotations.VisibleForTesting public void answerCall(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "answerCall device is null"); return; } mHeadsetService.setActiveDevice(device); if ((mPhoneProxy) != null) { try { mPhoneProxy.answerCall(); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "Handsfree phone proxy null for answering call"); } }
@android.annotation.RequiresPermission(android.Manifest.permission.BLUETOOTH_ADMIN) public boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.DBG) { android.util.Log.d(android.bluetooth.BluetoothHeadset.TAG, ("setActiveDevice: " + device)); } final android.bluetooth.IBluetoothHeadset service = mService; if (((service != null) && (isEnabled())) && (android.bluetooth.BluetoothHeadset.isValidDevice(device))) { try { return service.setActiveDevice(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } if (service == null) { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); } return false; }
private static void finalizerTimedOut(java.lang.Object object) { java.lang.String message = (((object.getClass().getName()) + ".finalize() timed out after ") + ((java.lang.Daemons.MAX_FINALIZE_NANOS) / (java.lang.Daemons.NANOS_PER_SECOND))) + " seconds"; java.lang.Exception syntheticException = new java.util.concurrent.TimeoutException(message); syntheticException.setStackTrace(java.lang.Daemons.FinalizerDaemon.INSTANCE.getStackTrace()); java.lang.Thread.UncaughtExceptionHandler preHandler = java.lang.Thread.getUncaughtExceptionPreHandler(); java.lang.Thread.UncaughtExceptionHandler handler = java.lang.Thread.getDefaultUncaughtExceptionHandler(); try { android.system.Os.kill(android.system.Os.getpid(), OsConstants.SIGQUIT); java.lang.Thread.sleep(5000); } catch (java.lang.Exception e) { java.lang.System.logE("failed to send SIGQUIT", e); } catch (java.lang.OutOfMemoryError ignored) { } if ((preHandler == null) && (handler == null)) { java.lang.System.logE(message, syntheticException); java.lang.System.exit(2); } if (preHandler != null) { preHandler.uncaughtException(java.lang.Thread.currentThread(), syntheticException); } if (handler != null) { handler.uncaughtException(java.lang.Thread.currentThread(), syntheticException); } }
private static void attachWithClassLoader(java.lang.String[] args) { for (java.lang.String a : args) { if (a.startsWith("agent:")) { java.lang.String agentName = a.substring(6, a.indexOf('=')); java.io.File tmp = null; try { tmp = java.io.File.createTempFile("lib", ".so"); Main.prepare(agentName, tmp); java.lang.String newAgentName = tmp.getName(); java.lang.String agent = a.substring(6).replace(agentName, newAgentName); java.lang.ClassLoader cl = new dalvik.system.PathClassLoader("", tmp.getParentFile().getAbsolutePath(), Main.class.getClassLoader()); try { dalvik.system.VMDebug.attachAgent(agent, cl); } catch (java.io.IOException e) { java.lang.System.out.println(e.getMessage()); java.lang.System.out.println(tmp); } } catch (java.lang.Exception e) { e.printStackTrace(java.lang.System.out); } finally { if (tmp != null) { tmp.delete(); } } } } }
@org.junit.Test public void everUtc_true() throws java.lang.Exception { com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country validCountryGb = createValidCountryGb(); java.lang.String tzLookupXml = generateXml(validCountryGb, createValidZoneTabEntriesGb()); com.android.libcore.timezone.tzlookup.TestUtils.assertContains(tzLookupXml, "everutc=\"y\""); }
@org.junit.Test public void everUtc_false() throws java.lang.Exception { com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country validCountryFr = createValidCountryFr(); java.lang.String tzLookupXml = generateXml(validCountryFr, createValidZoneTabEntriesFr()); com.android.libcore.timezone.tzlookup.TestUtils.assertContains(tzLookupXml, "everutc=\"n\""); }
private java.lang.String generateXml(com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country country, java.util.List<com.android.libcore.timezone.tzlookup.ZoneTabFile.CountryEntry> zoneTabEntries) throws java.lang.Exception { com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.CountryZones countryZones = createValidCountryZones(country); java.lang.String countryZonesFile = createCountryZonesFile(countryZones); java.lang.String zoneTabFile = createZoneTabFile(zoneTabEntries); java.lang.String outputFile = java.nio.file.Files.createTempFile(tempDir, "out", null).toString(); com.android.libcore.timezone.tzlookup.TzLookupGenerator tzLookupGenerator = new com.android.libcore.timezone.tzlookup.TzLookupGenerator(countryZonesFile, zoneTabFile, outputFile); assertTrue(tzLookupGenerator.execute()); java.nio.file.Path outputFilePath = java.nio.file.Paths.get(outputFile); assertTrue(java.nio.file.Files.exists(outputFilePath)); return com.android.libcore.timezone.tzlookup.TzLookupGeneratorTest.readFileToString(outputFilePath); }
@org.junit.Test public void explicitDefaultZone() throws java.lang.Exception { com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country validCountryGb = createValidCountryGb(); java.lang.String gbTimeZoneId = validCountryGb.getTimeZones(0).getId(); com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country gbWithExplicitDefaultTimeZone = validCountryGb.toBuilder().setDefaultTimeZoneId(gbTimeZoneId).build(); java.util.List<com.android.libcore.timezone.tzlookup.ZoneTabFile.CountryEntry> gbZoneTabEntries = createValidZoneTabEntriesGb(); java.lang.String tzLookupXml = generateXml(gbWithExplicitDefaultTimeZone, gbZoneTabEntries); com.android.libcore.timezone.tzlookup.TestUtils.assertContains(tzLookupXml, (("code=\"gb\" default=\"" + gbTimeZoneId) + "\"")); }
private static com.ibm.icu.util.Calendar getYearStartForData(java.lang.String inputIanaVersion) { java.lang.String yearString = inputIanaVersion.substring(0, ((inputIanaVersion.length()) - 1)); int year = (java.lang.Integer.parseInt(yearString)) + 1; com.ibm.icu.util.Calendar calendar = new com.ibm.icu.util.GregorianCalendar(com.ibm.icu.util.TimeZone.GMT_ZONE); calendar.clear(); calendar.set(year, Calendar.JANUARY, 1, 0, 0, 0); return calendar; }
@org.junit.Test public void calculatedDefaultZone() throws java.lang.Exception { com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country validCountryGb = createValidCountryGb(); junit.framework.TestCase.assertEquals(1, validCountryGb.getTimeZonesCount()); java.lang.String gbTimeZoneId = validCountryGb.getTimeZones(0).getId(); com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country gbWithoutDefault = validCountryGb.toBuilder().clearDefaultTimeZoneId().build(); java.util.List<com.android.libcore.timezone.tzlookup.ZoneTabFile.CountryEntry> gbZoneTabEntries = createValidZoneTabEntriesGb(); java.lang.String tzLookupXml = generateXml(gbWithoutDefault, gbZoneTabEntries); com.android.libcore.timezone.tzlookup.TestUtils.assertContains(tzLookupXml, (("code=\"gb\" default=\"" + gbTimeZoneId) + "\"")); }
private static long getSampleOffsetTimeMillisForData(java.lang.String inputIanaVersion) { com.ibm.icu.util.Calendar calendar = com.android.libcore.timezone.tzlookup.TzLookupGenerator.getYearStartForData(inputIanaVersion); calendar.set(calendar.get(Calendar.YEAR), Calendar.JULY, 2, 12, 0, 0); return calendar.getTimeInMillis(); }
@java.lang.Override public void startDtmf(char c, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_DTMF_START, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.startDtmf(rr.mSerial, (c + "")); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "startDtmf", e); } } }
@java.lang.Override public void getDeviceIdentity(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_DEVICE_IDENTITY, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getDeviceIdentity(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getDeviceIdentity", e); } } }
@java.lang.Override public void acknowledgeIncomingGsmSmsWithPdu(boolean success, java.lang.String ackPdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_ACKNOWLEDGE_INCOMING_GSM_SMS_WITH_PDU, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " success = ") + success)); } try { radioProxy.acknowledgeIncomingGsmSmsWithPdu(rr.mSerial, success, convertNullToEmptyString(ackPdu)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "acknowledgeIncomingGsmSmsWithPdu", e); } } }
@java.lang.Override public void setCallWaiting(boolean enable, int serviceClass, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_CALL_WAITING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " enable = ") + enable) + " serviceClass = ") + serviceClass)); } try { radioProxy.setCallWaiting(rr.mSerial, enable, serviceClass); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCallWaiting", e); } } }
@java.lang.Override public void queryCallForwardStatus(int cfReason, int serviceClass, java.lang.String number, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_QUERY_CALL_FORWARD_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " cfreason = ") + cfReason) + " serviceClass = ") + serviceClass)); } android.hardware.radio.V1_0.CallForwardInfo cfInfo = new android.hardware.radio.V1_0.CallForwardInfo(); cfInfo.reason = cfReason; cfInfo.serviceClass = serviceClass; cfInfo.toa = android.telephony.PhoneNumberUtils.toaFromString(number); cfInfo.number = convertNullToEmptyString(number); cfInfo.timeSeconds = 0; try { radioProxy.getCallForwardStatus(rr.mSerial, cfInfo); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "queryCallForwardStatus", e); } } }
@java.lang.Override public void changeBarringPassword(java.lang.String facility, java.lang.String oldPwd, java.lang.String newPwd, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CHANGE_BARRING_PASSWORD, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "facility = ") + facility)); } try { radioProxy.setBarringPassword(rr.mSerial, convertNullToEmptyString(facility), convertNullToEmptyString(oldPwd), convertNullToEmptyString(newPwd)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "changeBarringPassword", e); } } }
@java.lang.Override public void supplyIccPukForApp(java.lang.String puk, java.lang.String newPin, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_ENTER_SIM_PUK, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " aid = ") + aid)); } try { radioProxy.supplyIccPukForApp(rr.mSerial, convertNullToEmptyString(puk), convertNullToEmptyString(newPin), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "supplyIccPukForApp", e); } } }
@java.lang.Override public void setPreferredNetworkType(int networkType, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_PREFERRED_NETWORK_TYPE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " networkType = ") + networkType)); } mPreferredNetworkType = networkType; mMetrics.writeSetPreferredNetworkType(mPhoneId, networkType); try { radioProxy.setPreferredNetworkType(rr.mSerial, networkType); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setPreferredNetworkType", e); } } }
@java.lang.Override public void getSignalStrength(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SIGNAL_STRENGTH, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getSignalStrength(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getSignalStrength", e); } } }
@java.lang.Override public void getHardwareConfig(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_HARDWARE_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getHardwareConfig(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getHardwareConfig", e); } } }
@java.lang.Override public void getCellInfoList(android.os.Message result, android.os.WorkSource workSource) { workSource = getDeafultWorkSourceIfInvalid(workSource); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_CELL_INFO_LIST, result, workSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getCellInfoList(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getCellInfoList", e); } } }
@java.lang.Override public void sendUSSD(java.lang.String ussd, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SEND_USSD, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { java.lang.String logUssd = "*******"; if (com.android.internal.telephony.RIL.RILJ_LOGV) logUssd = ussd; riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " ussd = ") + logUssd)); } try { radioProxy.sendUssd(rr.mSerial, convertNullToEmptyString(ussd)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendUSSD", e); } } }
@java.lang.Override public void rejectCall(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_UDUB, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.rejectCall(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "rejectCall", e); } } }
@java.lang.Override public void startLceService(int reportIntervalMs, boolean pullMode, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_START_LCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " reportIntervalMs = ") + reportIntervalMs) + " pullMode = ") + pullMode)); } try { radioProxy.startLceService(rr.mSerial, reportIntervalMs, pullMode); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "startLceService", e); } } }
@java.lang.Override public void getBasebandVersion(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_BASEBAND_VERSION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getBasebandVersion(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getBasebandVersion", e); } } }
@java.lang.Override public void separateConnection(int gsmIndex, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SEPARATE_CONNECTION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " gsmIndex = ") + gsmIndex)); } try { radioProxy.separateConnection(rr.mSerial, gsmIndex); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "separateConnection", e); } } }
@java.lang.Override public void nvWriteCdmaPrl(byte[] preferredRoamingList, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_NV_WRITE_CDMA_PRL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " PreferredRoamingList = 0x") + (com.android.internal.telephony.uicc.IccUtils.bytesToHexString(preferredRoamingList)))); } java.util.ArrayList<java.lang.Byte> arrList = new java.util.ArrayList<>(); for (int i = 0; i < (preferredRoamingList.length); i++) { arrList.add(preferredRoamingList[i]); } try { radioProxy.nvWriteCdmaPrl(rr.mSerial, arrList); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "nvWriteCdmaPrl", e); } } }
@java.lang.Override public void supplyIccPuk2ForApp(java.lang.String puk, java.lang.String newPin2, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_ENTER_SIM_PUK2, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " aid = ") + aid)); } try { radioProxy.supplyIccPuk2ForApp(rr.mSerial, convertNullToEmptyString(puk), convertNullToEmptyString(newPin2), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "supplyIccPuk2ForApp", e); } } }
@java.lang.Override public void getPreferredVoicePrivacy(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getPreferredVoicePrivacy(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getPreferredVoicePrivacy", e); } } }
@java.lang.Override public void sendCDMAFeatureCode(java.lang.String featureCode, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CDMA_FLASH, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " featureCode = ") + featureCode)); } try { radioProxy.sendCDMAFeatureCode(rr.mSerial, convertNullToEmptyString(featureCode)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendCDMAFeatureCode", e); } } }
@java.lang.Override public void conference(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CONFERENCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.conference(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "conference", e); } } }
@java.lang.Override public void getOperator(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_OPERATOR, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getOperator(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getOperator", e); } } }
@java.lang.Override public void setFacilityLockForApp(java.lang.String facility, boolean lockState, java.lang.String password, int serviceClass, java.lang.String appId, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_FACILITY_LOCK, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " facility = ") + facility) + " lockstate = ") + lockState) + " serviceClass = ") + serviceClass) + " appId = ") + appId)); } try { radioProxy.setFacilityLockForApp(rr.mSerial, convertNullToEmptyString(facility), lockState, convertNullToEmptyString(password), serviceClass, convertNullToEmptyString(appId)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setFacilityLockForApp", e); } } }
@java.lang.Override public void exitEmergencyCallbackMode(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_EXIT_EMERGENCY_CALLBACK_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.exitEmergencyCallbackMode(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "exitEmergencyCallbackMode", e); } } }
@java.lang.Override public void getCdmaSubscriptionSource(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CDMA_GET_SUBSCRIPTION_SOURCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getCdmaSubscriptionSource(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getCdmaSubscriptionSource", e); } } }
@java.lang.Override public void setUiccSubscription(int slotId, int appIndex, int subId, int subStatus, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_UICC_SUBSCRIPTION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " slot = ") + slotId) + " appIndex = ") + appIndex) + " subId = ") + subId) + " subStatus = ") + subStatus)); } android.hardware.radio.V1_0.SelectUiccSub info = new android.hardware.radio.V1_0.SelectUiccSub(); info.slot = slotId; info.appIndex = appIndex; info.subType = subId; info.actStatus = subStatus; try { radioProxy.setUiccSubscription(rr.mSerial, info); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setUiccSubscription", e); } } }
@java.lang.Override public void setInitialAttachApn(android.telephony.data.DataProfile dataProfile, boolean isRoaming, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_INITIAL_ATTACH_APN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + dataProfile)); } try { radioProxy.setInitialAttachApn(rr.mSerial, com.android.internal.telephony.RIL.convertToHalDataProfile(dataProfile), dataProfile.isModemCognitive(), isRoaming); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setInitialAttachApn", e); } } }
@java.lang.Override public void reportSmsMemoryStatus(boolean available, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_REPORT_SMS_MEMORY_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " available = ") + available)); } try { radioProxy.reportSmsMemoryStatus(rr.mSerial, available); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "reportSmsMemoryStatus", e); } } }
@java.lang.Override public void getIccCardStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_SIM_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getIccCardStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getIccCardStatus", e); } } }
@java.lang.Override public void deleteSmsOnSim(int index, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_DELETE_SMS_ON_SIM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGV) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " index = ") + index)); } try { radioProxy.deleteSmsOnSim(rr.mSerial, index); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "deleteSmsOnSim", e); } } }
@java.lang.Override public void writeSmsToSim(int status, java.lang.String smsc, java.lang.String pdu, android.os.Message result) { status = translateStatus(status); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_WRITE_SMS_TO_SIM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGV) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " ") + status)); } android.hardware.radio.V1_0.SmsWriteArgs args = new android.hardware.radio.V1_0.SmsWriteArgs(); args.status = status; args.smsc = convertNullToEmptyString(smsc); args.pdu = convertNullToEmptyString(pdu); try { radioProxy.writeSmsToSim(rr.mSerial, args); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "writeSmsToSim", e); } } }
@java.lang.Override public void setCdmaBroadcastActivation(boolean activate, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CDMA_BROADCAST_ACTIVATION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " activate = ") + activate)); } try { radioProxy.setCdmaBroadcastActivation(rr.mSerial, activate); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCdmaBroadcastActivation", e); } } }
@java.lang.Override public void sendDeviceState(int stateType, boolean state, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SEND_DEVICE_STATE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " ") + stateType) + ":") + state)); } try { radioProxy.sendDeviceState(rr.mSerial, stateType, state); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendDeviceState", e); } } }
@java.lang.Override public void setRadioPower(boolean on, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_RADIO_POWER, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " on = ") + on)); } try { radioProxy.setRadioPower(rr.mSerial, on); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setRadioPower", e); } } }
@java.lang.Override public void setSimCardPower(int state, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_SIM_CARD_POWER, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " ") + state)); } android.hardware.radio.V1_1.IRadio radioProxy11 = android.hardware.radio.V1_1.IRadio.castFrom(radioProxy); if (radioProxy11 == null) { try { switch (state) { case android.telephony.TelephonyManager.CARD_POWER_DOWN : { radioProxy.setSimCardPower(rr.mSerial, false); break; } case android.telephony.TelephonyManager.CARD_POWER_UP : { radioProxy.setSimCardPower(rr.mSerial, true); break; } default : { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.RILConstants.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } } } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setSimCardPower", e); } } else { try { radioProxy11.setSimCardPower_1_1(rr.mSerial, state); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setSimCardPower", e); } } } }
@java.lang.Override public void setGsmBroadcastActivation(boolean activate, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GSM_BROADCAST_ACTIVATION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " activate = ") + activate)); } try { radioProxy.setGsmBroadcastActivation(rr.mSerial, activate); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setGsmBroadcastActivation", e); } } }
@java.lang.Override public void sendDtmf(char c, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_DTMF, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.sendDtmf(rr.mSerial, (c + "")); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendDtmf", e); } } }
@java.lang.Override public void getImsRegistrationState(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_IMS_REGISTRATION_STATE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getImsRegistrationState(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getImsRegistrationState", e); } } }
@java.lang.Override public void explicitCallTransfer(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_EXPLICIT_CALL_TRANSFER, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.explicitCallTransfer(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "explicitCallTransfer", e); } } }
@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.RILConstants.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SLOT_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.getSimSlotsStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getIccSlotStatus", e); } } } }
@java.lang.Override public void sendBurstDtmf(java.lang.String dtmfString, int on, int off, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CDMA_BURST_DTMF, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " dtmfString = ") + dtmfString) + " on = ") + on) + " off = ") + off)); } try { radioProxy.sendBurstDtmf(rr.mSerial, convertNullToEmptyString(dtmfString), on, off); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendBurstDtmf", e); } } }
@java.lang.Override public void getRadioCapability(android.os.Message response) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(response); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_RADIO_CAPABILITY, response, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getRadioCapability(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getRadioCapability", e); } } }
@java.lang.Override public void setDataProfile(android.telephony.data.DataProfile[] dps, boolean isRoaming, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_DATA_PROFILE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " with data profiles : ")); for (android.telephony.data.DataProfile profile : dps) { riljLog(profile.toString()); } } java.util.ArrayList<android.hardware.radio.V1_0.DataProfileInfo> dpis = new java.util.ArrayList<>(); for (android.telephony.data.DataProfile dp : dps) { dpis.add(com.android.internal.telephony.RIL.convertToHalDataProfile(dp)); } try { radioProxy.setDataProfile(rr.mSerial, dpis, isRoaming); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setDataProfile", e); } } }
@java.lang.Override public void iccTransmitApduLogicalChannel(int channel, int cla, int instruction, int p1, int p2, int p3, java.lang.String data, android.os.Message result) { if (channel <= 0) { throw new java.lang.RuntimeException(("Invalid channel in iccTransmitApduLogicalChannel: " + channel)); } android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SIM_TRANSMIT_APDU_CHANNEL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { if (android.os.Build.IS_DEBUGGABLE) { riljLog(((((((((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " channel = ") + channel) + " cla = ") + cla) + " instruction = ") + instruction) + " p1 = ") + p1) + " p2 = ") + " p3 = ") + p3) + " data = ") + data)); } else { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } } android.hardware.radio.V1_0.SimApdu msg = createSimApdu(channel, cla, instruction, p1, p2, p3, data); try { radioProxy.iccTransmitApduLogicalChannel(rr.mSerial, msg); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "iccTransmitApduLogicalChannel", e); } } }
@java.lang.Override public void getVoiceRegistrationState(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_VOICE_REGISTRATION_STATE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getVoiceRegistrationState(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getVoiceRegistrationState", e); } } }
@java.lang.Override public void getDataCallList(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_DATA_CALL_LIST, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getDataCallList(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getDataCallList", e); } } }
@java.lang.Override public void handleCallSetupRequestFromSim(boolean accept, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_STK_HANDLE_CALL_SETUP_REQUESTED_FROM_SIM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.handleStkCallSetupRequestFromSim(rr.mSerial, accept); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getAllowedCarriers", e); } } }
@java.lang.Override public void acknowledgeLastIncomingCdmaSms(boolean success, int cause, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CDMA_SMS_ACKNOWLEDGE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " success = ") + success) + " cause = ") + cause)); } android.hardware.radio.V1_0.CdmaSmsAck msg = new android.hardware.radio.V1_0.CdmaSmsAck(); msg.errorClass = (success) ? 0 : 1; msg.smsCauseCode = cause; try { radioProxy.acknowledgeLastIncomingCdmaSms(rr.mSerial, msg); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "acknowledgeLastIncomingCdmaSms", e); } } }
@java.lang.Override public void getPreferredNetworkType(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_PREFERRED_NETWORK_TYPE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getPreferredNetworkType(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getPreferredNetworkType", e); } } }
@java.lang.Override public void sendEnvelope(java.lang.String contents, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_STK_SEND_ENVELOPE_COMMAND, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " contents = ") + contents)); } try { radioProxy.sendEnvelope(rr.mSerial, convertNullToEmptyString(contents)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendEnvelope", e); } } }
@java.lang.Override public void getGsmBroadcastConfig(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GSM_GET_BROADCAST_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getGsmBroadcastConfig(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getGsmBroadcastConfig", e); } } }
@java.lang.Override public void setCellInfoListRate(int rateInMillis, android.os.Message result, android.os.WorkSource workSource) { workSource = getDeafultWorkSourceIfInvalid(workSource); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_UNSOL_CELL_INFO_LIST_RATE, result, workSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " rateInMillis = ") + rateInMillis)); } try { radioProxy.setCellInfoListRate(rr.mSerial, rateInMillis); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCellInfoListRate", e); } } }
@java.lang.Override public void getVoiceRadioTechnology(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_VOICE_RADIO_TECH, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getVoiceRadioTechnology(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getVoiceRadioTechnology", e); } } }
@java.lang.Override public void getNeighboringCids(android.os.Message result, android.os.WorkSource workSource) { workSource = getDeafultWorkSourceIfInvalid(workSource); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_NEIGHBORING_CELL_IDS, result, workSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getNeighboringCids(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getNeighboringCids", e); } } }
@java.lang.Override public void nvResetConfig(int resetType, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_NV_RESET_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " resetType = ") + resetType)); } try { radioProxy.nvResetConfig(rr.mSerial, com.android.internal.telephony.RIL.convertToHalResetNvType(resetType)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "nvResetConfig", e); } } }
@java.lang.Override public void changeIccPin2ForApp(java.lang.String oldPin2, java.lang.String newPin2, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CHANGE_SIM_PIN2, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " oldPin = ") + oldPin2) + " newPin = ") + newPin2) + " aid = ") + aid)); } try { radioProxy.changeIccPin2ForApp(rr.mSerial, convertNullToEmptyString(oldPin2), convertNullToEmptyString(newPin2), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "changeIccPin2ForApp", e); } } }
@java.lang.Override public void requestShutdown(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SHUTDOWN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.requestShutdown(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "requestShutdown", e); } } }
@org.junit.Test @android.support.test.filters.SmallTest public void testParcel() { int ranGsm = android.telephony.NetworkConstants.RadioAccessNetwork.GERAN; int[] gsmBands = new int[]{ android.telephony.NetworkConstants.GeranBand.BAND_T380, android.telephony.NetworkConstants.GeranBand.BAND_T410 }; int[] gsmChannels = new int[]{ 1, 2, 3, 4 }; android.telephony.RadioAccessSpecifier ras = new android.telephony.RadioAccessSpecifier(ranGsm, gsmBands, gsmChannels); android.os.Parcel p = android.os.Parcel.obtain(); ras.writeToParcel(p, 0); p.setDataPosition(0); android.telephony.RadioAccessSpecifier newRas = RadioAccessSpecifier.CREATOR.createFromParcel(p); assertEquals(ras, newRas); }
@org.junit.Test @android.support.test.filters.SmallTest public void testParcel() { int ranGsm = android.telephony.NetworkConstants.RadioAccessNetwork.GERAN; int[] gsmBands = new int[]{ android.telephony.NetworkConstants.GeranBand.BAND_T380, android.telephony.NetworkConstants.GeranBand.BAND_T410 }; int[] gsmChannels = new int[]{ 1, 2, 3, 4 }; android.telephony.RadioAccessSpecifier gsm = new android.telephony.RadioAccessSpecifier(ranGsm, gsmBands, gsmChannels); int ranLte = android.telephony.NetworkConstants.RadioAccessNetwork.EUTRAN; int[] lteBands = new int[]{ android.telephony.NetworkConstants.EutranBand.BAND_10, android.telephony.NetworkConstants.EutranBand.BAND_11 }; int[] lteChannels = new int[]{ 5, 6, 7, 8 }; android.telephony.RadioAccessSpecifier lte = new android.telephony.RadioAccessSpecifier(ranLte, lteBands, lteChannels); android.telephony.RadioAccessSpecifier[] ras = new android.telephony.RadioAccessSpecifier[]{ gsm, lte }; int searchPeriodicity = 70; int maxSearchTime = 200; boolean incrementalResults = true; int incrementalResultsPeriodicity = 7; java.util.ArrayList<java.lang.String> mccmncs = new java.util.ArrayList<java.lang.String>(); mccmncs.add("310480"); mccmncs.add("21002"); android.telephony.NetworkScanRequest nsq = new android.telephony.NetworkScanRequest(android.telephony.NetworkScanRequest.SCAN_TYPE_ONE_SHOT, ras, searchPeriodicity, maxSearchTime, incrementalResults, incrementalResultsPeriodicity, mccmncs); android.os.Parcel p = android.os.Parcel.obtain(); nsq.writeToParcel(p, 0); p.setDataPosition(0); android.telephony.NetworkScanRequest newNsq = NetworkScanRequest.CREATOR.createFromParcel(p); assertEquals(nsq, newNsq); }
@java.lang.Override public void queryAvailableBandMode(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_QUERY_AVAILABLE_BAND_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getAvailableBandModes(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "queryAvailableBandMode", e); } } }
@java.lang.Override public void iccTransmitApduBasicChannel(int cla, int instruction, int p1, int p2, int p3, java.lang.String data, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SIM_TRANSMIT_APDU_BASIC, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { if (android.os.Build.IS_DEBUGGABLE) { riljLog(((((((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " cla = ") + cla) + " instruction = ") + instruction) + " p1 = ") + p1) + " p2 = ") + " p3 = ") + p3) + " data = ") + data)); } else { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } } android.hardware.radio.V1_0.SimApdu msg = createSimApdu(0, cla, instruction, p1, p2, p3, data); try { radioProxy.iccTransmitApduBasicChannel(rr.mSerial, msg); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "iccTransmitApduBasicChannel", e); } } }
@java.lang.Override public void changeIccPinForApp(java.lang.String oldPin, java.lang.String newPin, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CHANGE_SIM_PIN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " oldPin = ") + oldPin) + " newPin = ") + newPin) + " aid = ") + aid)); } try { radioProxy.changeIccPinForApp(rr.mSerial, convertNullToEmptyString(oldPin), convertNullToEmptyString(newPin), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "changeIccPinForApp", e); } } }
@java.lang.Override public void setSmscAddress(java.lang.String address, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_SMSC_ADDRESS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " address = ") + address)); } try { radioProxy.setSmscAddress(rr.mSerial, convertNullToEmptyString(address)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setSmscAddress", e); } } }
@java.lang.Override public void getModemActivityInfo(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_ACTIVITY_INFO, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getModemActivityInfo(rr.mSerial); android.os.Message msg = mRilHandler.obtainMessage(com.android.internal.telephony.RIL.EVENT_BLOCKING_RESPONSE_TIMEOUT); msg.obj = null; msg.arg1 = rr.mSerial; mRilHandler.sendMessageDelayed(msg, com.android.internal.telephony.RIL.DEFAULT_BLOCKING_MESSAGE_RESPONSE_TIMEOUT_MS); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getModemActivityInfo", e); } } }
@java.lang.Override public void getAvailableNetworks(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_QUERY_AVAILABLE_NETWORKS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getAvailableNetworks(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getAvailableNetworks", e); } } }
@java.lang.Override public void stopNetworkScan(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_1.IRadio radioProxy11 = android.hardware.radio.V1_1.IRadio.castFrom(radioProxy); if (radioProxy11 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.RILConstants.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_STOP_NETWORK_SCAN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy11.stopNetworkScan(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "stopNetworkScan", e); } } } }
@java.lang.Override public void iccOpenLogicalChannel(java.lang.String aid, int p2, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SIM_OPEN_CHANNEL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { if (android.os.Build.IS_DEBUGGABLE) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " aid = ") + aid) + " p2 = ") + p2)); } else { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } } try { radioProxy.iccOpenLogicalChannel(rr.mSerial, convertNullToEmptyString(aid), p2); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "iccOpenLogicalChannel", e); } } }
@java.lang.Override public void getIMSIForApp(java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_IMSI, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " aid = ") + aid)); } try { radioProxy.getImsiForApp(rr.mSerial, convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getIMSIForApp", e); } } }
@java.lang.Override public void hangupForegroundResumeBackground(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.hangupForegroundResumeBackground(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "hangupForegroundResumeBackground", e); } } }
@java.lang.Override public void stopDtmf(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_DTMF_STOP, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.stopDtmf(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "stopDtmf", e); } } }
@java.lang.Override public void queryCallWaiting(int serviceClass, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_QUERY_CALL_WAITING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " serviceClass = ") + serviceClass)); } try { radioProxy.getCallWaiting(rr.mSerial, serviceClass); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "queryCallWaiting", e); } } }
@java.lang.Override public void setCdmaBroadcastConfig(com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[] configs, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CDMA_SET_BROADCAST_CONFIG, result, mRILDefaultWorkSource); java.util.ArrayList<android.hardware.radio.V1_0.CdmaBroadcastSmsConfigInfo> halConfigs = new java.util.ArrayList<>(); for (com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo config : configs) { for (int i = config.getFromServiceCategory(); i <= (config.getToServiceCategory()); i++) { android.hardware.radio.V1_0.CdmaBroadcastSmsConfigInfo info = new android.hardware.radio.V1_0.CdmaBroadcastSmsConfigInfo(); info.serviceCategory = i; info.language = config.getLanguage(); info.selected = config.isSelected(); halConfigs.add(info); } } if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " with ") + (halConfigs.size())) + " configs : ")); for (android.hardware.radio.V1_0.CdmaBroadcastSmsConfigInfo config : halConfigs) { riljLog(config.toString()); } } try { radioProxy.setCdmaBroadcastConfig(rr.mSerial, halConfigs); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCdmaBroadcastConfig", e); } } }
@java.lang.Override public void setLocationUpdates(boolean enable, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_LOCATION_UPDATES, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " enable = ") + enable)); } try { radioProxy.setLocationUpdates(rr.mSerial, enable); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setLocationUpdates", e); } } }
@java.lang.Override public void setCdmaRoamingPreference(int cdmaRoamingType, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CDMA_SET_ROAMING_PREFERENCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " cdmaRoamingType = ") + cdmaRoamingType)); } try { radioProxy.setCdmaRoamingPreference(rr.mSerial, cdmaRoamingType); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCdmaRoamingPreference", e); } } }
@java.lang.Override public void getAllowedCarriers(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_ALLOWED_CARRIERS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getAllowedCarriers(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getAllowedCarriers", e); } } }
@java.lang.Override public void sendImsCdmaSms(byte[] pdu, int retry, int messageRef, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_IMS_SEND_SMS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.ImsSmsMessage msg = new android.hardware.radio.V1_0.ImsSmsMessage(); msg.tech = RILConstants.CDMA_PHONE; msg.retry = (((byte) (retry)) == 1) ? true : false; msg.messageRef = messageRef; android.hardware.radio.V1_0.CdmaSmsMessage cdmaMsg = new android.hardware.radio.V1_0.CdmaSmsMessage(); constructCdmaSendSmsRilRequest(cdmaMsg, pdu); msg.cdmaMessage.add(cdmaMsg); try { radioProxy.sendImsSms(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_IMS, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendImsCdmaSms", e); } } }
@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SETUP_DATA_CALL, result, mRILDefaultWorkSource); android.hardware.radio.V1_0.DataProfileInfo dpi = com.android.internal.telephony.RIL.convertToHalDataProfile(dataProfile); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + ",radioTechnology=") + radioTechnology) + ",isRoaming=") + isRoaming) + ",allowRoaming=") + allowRoaming) + ",") + dataProfile)); } try { radioProxy.setupDataCall(rr.mSerial, radioTechnology, dpi, dataProfile.isModemCognitive(), allowRoaming, isRoaming); mMetrics.writeRilSetupDataCall(mPhoneId, rr.mSerial, radioTechnology, dpi.profileId, dpi.apn, dpi.authType, dpi.protocol); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setupDataCall", e); } } }
@java.lang.Override public void requestIccSimAuthentication(int authContext, java.lang.String data, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SIM_AUTHENTICATION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.requestIccSimAuthentication(rr.mSerial, authContext, convertNullToEmptyString(data), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "requestIccSimAuthentication", e); } } }
@java.lang.Override public void queryTTYMode(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_QUERY_TTY_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getTTYMode(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "queryTTYMode", e); } } }
@java.lang.Override public void setUnsolResponseFilter(int filter, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_UNSOLICITED_RESPONSE_FILTER, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " ") + filter)); } try { radioProxy.setIndicationFilter(rr.mSerial, filter); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setIndicationFilter", e); } } }
@java.lang.Override public void setDataAllowed(boolean allowed, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_ALLOW_DATA, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " allowed = ") + allowed)); } try { radioProxy.setDataAllowed(rr.mSerial, allowed); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setDataAllowed", e); } } }
@java.lang.Override public void sendTerminalResponse(java.lang.String contents, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_STK_SEND_TERMINAL_RESPONSE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " contents = ") + (android.os.Build.IS_DEBUGGABLE ? contents : censoredTerminalResponse(contents)))); } try { radioProxy.sendTerminalResponseToSim(rr.mSerial, convertNullToEmptyString(contents)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendTerminalResponse", e); } } }
@java.lang.Override public void setBandMode(int bandMode, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_BAND_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " bandMode = ") + bandMode)); } try { radioProxy.setBandMode(rr.mSerial, bandMode); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setBandMode", e); } } }
private android.telephony.RadioAccessSpecifier convertRadioAccessSpecifierToRadioHAL(android.telephony.RadioAccessSpecifier ras) { android.hardware.radio.V1_1.RadioAccessSpecifier rasInHalFormat = new android.hardware.radio.V1_1.RadioAccessSpecifier(); rasInHalFormat.radioAccessNetwork = ras.getRadioAccessNetwork(); java.util.List<java.lang.Integer> bands = null; switch (ras.getRadioAccessNetwork()) { case android.telephony.NetworkConstants.RadioAccessNetwork.GERAN : bands = rasInHalFormat.geranBands; break; case android.telephony.NetworkConstants.RadioAccessNetwork.UTRAN : bands = rasInHalFormat.utranBands; break; case android.telephony.NetworkConstants.RadioAccessNetwork.EUTRAN : bands = rasInHalFormat.eutranBands; break; default : android.util.Log.wtf(com.android.internal.telephony.RIL.RILJ_LOG_TAG, (("radioAccessNetwork " + (ras.getRadioAccessNetwork())) + " not supported!")); return null; } if ((ras.getBands()) != null) { for (int band : ras.getBands()) { bands.add(band); } } if ((ras.getChannels()) != null) { for (int channel : ras.getChannels()) { rasInHalFormat.channels.add(channel); } } return rasInHalFormat; }
@java.lang.Override public void getCdmaBroadcastConfig(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CDMA_GET_BROADCAST_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getCdmaBroadcastConfig(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getCdmaBroadcastConfig", e); } } }
@java.lang.Override public void iccCloseLogicalChannel(int channel, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SIM_CLOSE_CHANNEL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " channel = ") + channel)); } try { radioProxy.iccCloseLogicalChannel(rr.mSerial, channel); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "iccCloseLogicalChannel", e); } } }
@java.lang.Override public void setLogicalToPhysicalSlotMapping(int[] physicalSlots, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.RILConstants.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { java.util.ArrayList<java.lang.Integer> mapping = new java.util.ArrayList<>(); for (int slot : physicalSlots) { mapping.add(new java.lang.Integer(slot)); } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_LOGICAL_TO_PHYSICAL_SLOT_MAPPING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setSimSlotsMapping(rr.mSerial, mapping); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setLogicalToPhysicalSlotMapping", e); } } } }
private static java.lang.Object getResponseForTimedOutRILRequest(com.android.internal.telephony.RILRequest rr) { if (rr == null) return null; java.lang.Object timeoutResponse = null; switch (rr.mRequest) { case com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_ACTIVITY_INFO : timeoutResponse = new android.telephony.ModemActivityInfo(0, 0, 0, new int[android.telephony.ModemActivityInfo.TX_POWER_LEVELS], 0, 0); break; } return timeoutResponse; }
@com.android.internal.annotations.VisibleForTesting public android.hardware.radio.V1_0.IRadio getRadioProxy(android.os.Message result) { if (!(mIsMobileNetworkSupported)) { if (com.android.internal.telephony.RIL.RILJ_LOGV) riljLog("getRadioProxy: Not calling getService(): wifi-only"); if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.RILConstants.RADIO_NOT_AVAILABLE)); result.sendToTarget(); } return null; } if ((mRadioProxy) != null) { return mRadioProxy; } try { mRadioProxy = android.hardware.radio.V1_0.IRadio.getService(com.android.internal.telephony.RIL.HIDL_SERVICE_NAME[((mPhoneId) == null ? 0 : mPhoneId)]); if ((mRadioProxy) != null) { mRadioProxy.linkToDeath(mRadioProxyDeathRecipient, mRadioProxyCookie.incrementAndGet()); mRadioProxy.setResponseFunctions(mRadioResponse, mRadioIndication); } else { riljLoge("getRadioProxy: mRadioProxy == null"); } } catch (android.os.RemoteException | java.lang.RuntimeException e) { mRadioProxy = null; riljLoge(("RadioProxy getService/setResponseFunctions: " + e)); } if ((mRadioProxy) == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.RILConstants.RADIO_NOT_AVAILABLE)); result.sendToTarget(); } mRilHandler.sendMessageDelayed(mRilHandler.obtainMessage(com.android.internal.telephony.RIL.EVENT_RADIO_PROXY_DEAD, mRadioProxyCookie.incrementAndGet()), com.android.internal.telephony.RIL.IRADIO_GET_SERVICE_DELAY_MILLIS); } return mRadioProxy; }
private void resetProxyAndRequestList() { mRadioProxy = null; mRadioProxyCookie.incrementAndGet(); setRadioState(RadioState.RADIO_UNAVAILABLE); com.android.internal.telephony.RILRequest.resetSerial(); clearRequestList(com.android.internal.telephony.RILConstants.RADIO_NOT_AVAILABLE, false); }
@java.lang.Override public void getNetworkSelectionMode(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_QUERY_NETWORK_SELECTION_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getNetworkSelectionMode(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getNetworkSelectionMode", e); } } }
@java.lang.Override public void getLastCallFailCause(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_LAST_CALL_FAIL_CAUSE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getLastCallFailCause(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getLastCallFailCause", e); } } }
@java.lang.Override public void supplyNetworkDepersonalization(java.lang.String netpin, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_ENTER_NETWORK_DEPERSONALIZATION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " netpin = ") + netpin)); } try { radioProxy.supplyNetworkDepersonalization(rr.mSerial, convertNullToEmptyString(netpin)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "supplyNetworkDepersonalization", e); } } }
@java.lang.Override public void supplyIccPin2ForApp(java.lang.String pin, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_ENTER_SIM_PIN2, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " aid = ") + aid)); } try { radioProxy.supplyIccPin2ForApp(rr.mSerial, convertNullToEmptyString(pin), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "supplyIccPin2ForApp", e); } } }
@java.lang.Override public void cancelPendingUssd(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CANCEL_USSD, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.cancelPendingUssd(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "cancelPendingUssd", e); } } }
@java.lang.Override public void writeSmsToRuim(int status, java.lang.String pdu, android.os.Message result) { status = translateStatus(status); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CDMA_WRITE_SMS_TO_RUIM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGV) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " status = ") + status)); } android.hardware.radio.V1_0.CdmaSmsWriteArgs args = new android.hardware.radio.V1_0.CdmaSmsWriteArgs(); args.status = status; constructCdmaSendSmsRilRequest(args.message, pdu.getBytes()); try { radioProxy.writeSmsToRuim(rr.mSerial, args); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "writeSmsToRuim", e); } } }
@java.lang.Override public void setMute(boolean enableMute, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_MUTE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " enableMute = ") + enableMute)); } try { radioProxy.setMute(rr.mSerial, enableMute); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setMute", e); } } }
@java.lang.Override public void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[] config, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GSM_SET_BROADCAST_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " with ") + (config.length)) + " configs : ")); for (int i = 0; i < (config.length); i++) { riljLog(config[i].toString()); } } java.util.ArrayList<android.hardware.radio.V1_0.GsmBroadcastSmsConfigInfo> configs = new java.util.ArrayList<>(); int numOfConfig = config.length; android.hardware.radio.V1_0.GsmBroadcastSmsConfigInfo info; for (int i = 0; i < numOfConfig; i++) { info = new android.hardware.radio.V1_0.GsmBroadcastSmsConfigInfo(); info.fromServiceId = config[i].getFromServiceId(); info.toServiceId = config[i].getToServiceId(); info.fromCodeScheme = config[i].getFromCodeScheme(); info.toCodeScheme = config[i].getToCodeScheme(); info.selected = config[i].isSelected(); configs.add(info); } try { radioProxy.setGsmBroadcastConfig(rr.mSerial, configs); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setGsmBroadcastConfig", e); } } }
@java.lang.Override public void nvReadItem(int itemID, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_NV_READ_ITEM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " itemId = ") + itemID)); } try { radioProxy.nvReadItem(rr.mSerial, itemID); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "nvReadItem", e); } } }
@java.lang.Override public void acceptCall(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_ANSWER, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.acceptCall(rr.mSerial); mMetrics.writeRilAnswer(mPhoneId, rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "acceptCall", e); } } }
@java.lang.Override public void nvWriteItem(int itemId, java.lang.String itemValue, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_NV_WRITE_ITEM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " itemId = ") + itemId) + " itemValue = ") + itemValue)); } android.hardware.radio.V1_0.NvWriteItem item = new android.hardware.radio.V1_0.NvWriteItem(); item.itemId = itemId; item.value = convertNullToEmptyString(itemValue); try { radioProxy.nvWriteItem(rr.mSerial, item); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "nvWriteItem", e); } } }
@java.lang.Override public void setCLIR(int clirMode, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_CLIR, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " clirMode = ") + clirMode)); } try { radioProxy.setClir(rr.mSerial, clirMode); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCLIR", e); } } }
@java.lang.Override public void queryFacilityLockForApp(java.lang.String facility, java.lang.String password, int serviceClass, java.lang.String appId, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_QUERY_FACILITY_LOCK, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " facility = ") + facility) + " serviceClass = ") + serviceClass) + " appId = ") + appId)); } try { radioProxy.getFacilityLockForApp(rr.mSerial, convertNullToEmptyString(facility), convertNullToEmptyString(password), serviceClass, convertNullToEmptyString(appId)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getFacilityLockForApp", e); } } }
@java.lang.Override public void getSmscAddress(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_SMSC_ADDRESS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getSmscAddress(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getSmscAddress", e); } } }
@java.lang.Override public void queryCLIP(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_QUERY_CLIP, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getClip(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "queryCLIP", e); } } }
@java.lang.Override public void hangupWaitingOrBackground(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.hangupWaitingOrBackground(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "hangupWaitingOrBackground", e); } } }
@java.lang.Override public void getMute(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_MUTE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getMute(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getMute", e); } } }
@java.lang.Override public void requestIsimAuthentication(java.lang.String nonce, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_ISIM_AUTHENTICATION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " nonce = ") + nonce)); } try { radioProxy.requestIsimAuthentication(rr.mSerial, convertNullToEmptyString(nonce)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "requestIsimAuthentication", e); } } }
@java.lang.Override public void reportStkServiceIsRunning(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_REPORT_STK_SERVICE_IS_RUNNING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.reportStkServiceIsRunning(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "reportStkServiceIsRunning", e); } } }
@java.lang.Override public void queryCdmaRoamingPreference(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CDMA_QUERY_ROAMING_PREFERENCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getCdmaRoamingPreference(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "queryCdmaRoamingPreference", e); } } }
@java.lang.Override public void setCallForward(int action, int cfReason, int serviceClass, java.lang.String number, int timeSeconds, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_CALL_FORWARD, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " action = ") + action) + " cfReason = ") + cfReason) + " serviceClass = ") + serviceClass) + " timeSeconds = ") + timeSeconds)); } android.hardware.radio.V1_0.CallForwardInfo cfInfo = new android.hardware.radio.V1_0.CallForwardInfo(); cfInfo.status = action; cfInfo.reason = cfReason; cfInfo.serviceClass = serviceClass; cfInfo.toa = android.telephony.PhoneNumberUtils.toaFromString(number); cfInfo.number = convertNullToEmptyString(number); cfInfo.timeSeconds = timeSeconds; try { radioProxy.setCallForward(rr.mSerial, cfInfo); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCallForward", e); } } }
@java.lang.Override public void sendCdmaSms(byte[] pdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CDMA_SEND_SMS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.CdmaSmsMessage msg = new android.hardware.radio.V1_0.CdmaSmsMessage(); constructCdmaSendSmsRilRequest(msg, pdu); try { radioProxy.sendCdmaSms(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_CDMA, SmsSession.Event.Format.SMS_FORMAT_3GPP2); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendCdmaSms", e); } } }
@java.lang.Override public void getCDMASubscription(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CDMA_SUBSCRIPTION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getCDMASubscription(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getCDMASubscription", e); } } }
@java.lang.Override public void sendSMSExpectMore(java.lang.String smscPdu, java.lang.String pdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SEND_SMS_EXPECT_MORE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.GsmSmsMessage msg = constructGsmSendSmsRilRequest(smscPdu, pdu); try { radioProxy.sendSMSExpectMore(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_GSM, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendSMSExpectMore", e); } } }
@java.lang.Override public void dial(java.lang.String address, int clirMode, com.android.internal.telephony.UUSInfo uusInfo, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_DIAL, result, mRILDefaultWorkSource); android.hardware.radio.V1_0.Dial dialInfo = new android.hardware.radio.V1_0.Dial(); dialInfo.address = convertNullToEmptyString(address); dialInfo.clir = clirMode; if (uusInfo != null) { android.hardware.radio.V1_0.UusInfo info = new android.hardware.radio.V1_0.UusInfo(); info.uusType = uusInfo.getType(); info.uusDcs = uusInfo.getDcs(); info.uusData = new java.lang.String(uusInfo.getUserData()); dialInfo.uusInfo.add(info); } if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.dial(rr.mSerial, dialInfo); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "dial", e); } } }
private void sendAck() { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RILConstants.RIL_RESPONSE_ACKNOWLEDGEMENT, null, mRILDefaultWorkSource); acquireWakeLock(rr, com.android.internal.telephony.RIL.FOR_ACK_WAKELOCK); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(null); if (radioProxy != null) { try { radioProxy.responseAcknowledgement(); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendAck", e); riljLoge(("sendAck: " + e)); } } else { android.telephony.Rlog.e(com.android.internal.telephony.RIL.RILJ_LOG_TAG, "Error trying to send ack, radioProxy = null"); } rr.release(); }
@java.lang.Override public void stopLceService(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_STOP_LCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.stopLceService(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "stopLceService", e); } } }
@java.lang.Override public void setPreferredVoicePrivacy(boolean enable, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CDMA_SET_PREFERRED_VOICE_PRIVACY_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " enable = ") + enable)); } try { radioProxy.setPreferredVoicePrivacy(rr.mSerial, enable); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setPreferredVoicePrivacy", e); } } }
@java.lang.Override public void sendImsGsmSms(java.lang.String smscPdu, java.lang.String pdu, int retry, int messageRef, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_IMS_SEND_SMS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.ImsSmsMessage msg = new android.hardware.radio.V1_0.ImsSmsMessage(); msg.tech = RILConstants.GSM_PHONE; msg.retry = (((byte) (retry)) == 1) ? true : false; msg.messageRef = messageRef; android.hardware.radio.V1_0.GsmSmsMessage gsmMsg = constructGsmSendSmsRilRequest(smscPdu, pdu); msg.gsmMessage.add(gsmMsg); try { radioProxy.sendImsSms(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_IMS, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendImsGsmSms", e); } } }
@java.lang.Override public void acknowledgeLastIncomingGsmSms(boolean success, int cause, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SMS_ACKNOWLEDGE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " success = ") + success) + " cause = ") + cause)); } try { radioProxy.acknowledgeLastIncomingGsmSms(rr.mSerial, success, cause); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "acknowledgeLastIncomingGsmSms", e); } } }
@java.lang.Override public void setSuppServiceNotifications(boolean enable, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_SUPP_SVC_NOTIFICATION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " enable = ") + enable)); } try { radioProxy.setSuppServiceNotifications(rr.mSerial, enable); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setSuppServiceNotifications", e); } } }
@java.lang.Override public void sendSMS(java.lang.String smscPdu, java.lang.String pdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SEND_SMS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.GsmSmsMessage msg = constructGsmSendSmsRilRequest(smscPdu, pdu); try { radioProxy.sendSms(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_GSM, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendSMS", e); } } }
@java.lang.Override public void pullLceData(android.os.Message response) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(response); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_PULL_LCEDATA, response, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.pullLceData(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "pullLceData", e); } } }
@java.lang.Override public void sendEnvelopeWithStatus(java.lang.String contents, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_STK_SEND_ENVELOPE_WITH_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " contents = ") + contents)); } try { radioProxy.sendEnvelopeWithStatus(rr.mSerial, convertNullToEmptyString(contents)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendEnvelopeWithStatus", e); } } }
@java.lang.Override public void getCLIR(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_CLIR, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getClir(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getCLIR", e); } } }
@java.lang.Override public void hangupConnection(int gsmIndex, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_HANGUP, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " gsmIndex = ") + gsmIndex)); } try { radioProxy.hangup(rr.mSerial, gsmIndex); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "hangupConnection", e); } } }
@java.lang.Override public void setNetworkSelectionModeManual(java.lang.String operatorNumeric, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_NETWORK_SELECTION_MANUAL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " operatorNumeric = ") + operatorNumeric)); } try { radioProxy.setNetworkSelectionModeManual(rr.mSerial, convertNullToEmptyString(operatorNumeric)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setNetworkSelectionModeManual", e); } } }
@java.lang.Override public void getDataRegistrationState(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_DATA_REGISTRATION_STATE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getDataRegistrationState(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getDataRegistrationState", e); } } }
@java.lang.Override public void setTTYMode(int ttyMode, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_TTY_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " ttyMode = ") + ttyMode)); } try { radioProxy.setTTYMode(rr.mSerial, ttyMode); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setTTYMode", e); } } }
@java.lang.Override public void setRadioCapability(com.android.internal.telephony.RadioCapability rc, android.os.Message response) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(response); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_RADIO_CAPABILITY, response, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " RadioCapability = ") + (rc.toString()))); } android.hardware.radio.V1_0.RadioCapability halRc = new android.hardware.radio.V1_0.RadioCapability(); halRc.session = rc.getSession(); halRc.phase = rc.getPhase(); halRc.raf = rc.getRadioAccessFamily(); halRc.logicalModemUuid = convertNullToEmptyString(rc.getLogicalModemUuid()); halRc.status = rc.getStatus(); try { radioProxy.setRadioCapability(rr.mSerial, halRc); } catch (java.lang.Exception e) { handleRadioProxyExceptionForRR(rr, "setRadioCapability", e); } } }
@java.lang.Override public void setNetworkSelectionModeAutomatic(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_NETWORK_SELECTION_AUTOMATIC, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.setNetworkSelectionModeAutomatic(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setNetworkSelectionModeAutomatic", e); } } }
@java.lang.Override public void deactivateDataCall(int cid, int reason, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_DEACTIVATE_DATA_CALL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " cid = ") + cid) + " reason = ") + reason)); } try { radioProxy.deactivateDataCall(rr.mSerial, cid, (reason == 0 ? false : true)); mMetrics.writeRilDeactivateDataCall(mPhoneId, rr.mSerial, cid, reason); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "deactivateDataCall", e); } } }
@java.lang.Override public void setCdmaSubscriptionSource(int cdmaSubscription, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CDMA_SET_SUBSCRIPTION_SOURCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " cdmaSubscription = ") + cdmaSubscription)); } try { radioProxy.setCdmaSubscriptionSource(rr.mSerial, cdmaSubscription); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCdmaSubscriptionSource", e); } } }
@java.lang.Override public void switchWaitingOrHoldingAndActive(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.switchWaitingOrHoldingAndActive(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "switchWaitingOrHoldingAndActive", e); } } }
@java.lang.Override public void deleteSmsOnRuim(int index, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CDMA_DELETE_SMS_ON_RUIM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGV) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " index = ") + index)); } try { radioProxy.deleteSmsOnRuim(rr.mSerial, index); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "deleteSmsOnRuim", e); } } }
@java.lang.Override public void getCurrentCalls(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_CURRENT_CALLS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getCurrentCalls(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getCurrentCalls", e); } } }
@java.lang.Override public void supplyIccPinForApp(java.lang.String pin, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_ENTER_SIM_PIN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " aid = ") + aid)); } try { radioProxy.supplyIccPinForApp(rr.mSerial, convertNullToEmptyString(pin), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "supplyIccPinForApp", e); } } }
public void setAuthentication(int direction, android.net.IpSecAlgorithm authentication) { if (!(android.net.IpSecAlgorithm.isAuthenticationAlgorithm(authentication))) { throw new java.lang.IllegalArgumentException(("Invalid algorithm for Authentication: " + (authentication.getName()))); } mFlow[direction].mAuthentication = authentication; }
public void setAuthenticatedEncryption(int direction, android.net.IpSecAlgorithm authenticatedEncryption) { if (!(android.net.IpSecAlgorithm.isAuthenticatedEncryptionAlgorithm(authenticatedEncryption))) { throw new java.lang.IllegalArgumentException(("Invalid algorithm for Authenticated Encryption: " + (authenticatedEncryption.getName()))); } mFlow[direction].mAuthenticatedEncryption = authenticatedEncryption; }
static boolean isAuthenticationAlgorithm(android.net.IpSecAlgorithm algorithm) { switch (algorithm.getName()) { case android.net.IpSecAlgorithm.AUTH_HMAC_MD5 : case android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 : case android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 : case android.net.IpSecAlgorithm.AUTH_HMAC_SHA384 : case android.net.IpSecAlgorithm.AUTH_HMAC_SHA512 : return true; default : return false; } }
static boolean isAuthenticatedEncryptionAlgorithm(android.net.IpSecAlgorithm algorithm) { switch (algorithm.getName()) { case android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM : return true; default : return false; } }
static boolean isEncryptionAlgorithm(android.net.IpSecAlgorithm algorithm) { switch (algorithm.getName()) { case android.net.IpSecAlgorithm.CRYPT_AES_CBC : return true; default : return false; } }
public void setEncryption(int direction, android.net.IpSecAlgorithm encryption) { if (!(android.net.IpSecAlgorithm.isEncryptionAlgorithm(encryption))) { throw new java.lang.IllegalArgumentException(("Invalid algorithm for Encryption: " + (encryption.getName()))); } mFlow[direction].mEncryption = encryption; }
private void createSdpRecord() { if ((mSdpHandle) > (-1)) { android.util.Log.w(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "createSdpRecord, SDP record already created"); } if ((mServerSockets) != null) { mSdpHandle = com.android.bluetooth.sdp.SdpManager.getDefaultManager().createPbapPseRecord("OBEX Phonebook Access Server", mServerSockets.getRfcommChannel(), mServerSockets.getL2capPsm(), com.android.bluetooth.pbap.BluetoothPbapService.SDP_PBAP_SERVER_VERSION, com.android.bluetooth.pbap.BluetoothPbapService.SDP_PBAP_SUPPORTED_REPOSITORIES, com.android.bluetooth.pbap.BluetoothPbapService.SDP_PBAP_SUPPORTED_FEATURES); } if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("created Sdp record, mSdpHandle=" + (mSdpHandle))); } }
private native void initializeNative(int maxHfClients, boolean inbandRingingEnable);
@android.test.suitebuilder.annotation.SmallTest public void testGetNetworkTypeBitmaskFromString() { java.lang.String networkTypeList = "4|7|5|6|12|13|14|19"; int networkTypeBitmask = (((((((1 << (4 - 1)) | (1 << (7 - 1))) | (1 << (5 - 1))) | (1 << (6 - 1))) | (1 << (12 - 1))) | (1 << (14 - 1))) | (1 << (13 - 1))) | (1 << (19 - 1)); assertEquals(networkTypeBitmask, android.telephony.ServiceState.getNetworkTypeBitmaskFromString(networkTypeList)); networkTypeList = "13"; networkTypeBitmask = 1 << (13 - 1); assertEquals(networkTypeBitmask, android.telephony.ServiceState.getNetworkTypeBitmaskFromString(networkTypeList)); }
@com.android.internal.annotations.VisibleForTesting public static android.telephony.data.DataProfile createDataProfile(com.android.internal.telephony.dataconnection.ApnSetting apn, int profileId) { int profileType; int bearerBitmap = 0; if ((apn.networkTypeBitmask) != 0) { bearerBitmap = android.telephony.ServiceState.convertNetworkTypeBitmaskToBearerBitmask(apn.networkTypeBitmask); } else { bearerBitmap = apn.bearerBitmask; } if (bearerBitmap == 0) { profileType = android.telephony.data.DataProfile.TYPE_COMMON; } else if (android.telephony.ServiceState.bearerBitmapHasCdma(bearerBitmap)) { profileType = android.telephony.data.DataProfile.TYPE_3GPP2; } else { profileType = android.telephony.data.DataProfile.TYPE_3GPP; } return new android.telephony.data.DataProfile(profileId, apn.apn, apn.protocol, apn.authType, apn.user, apn.password, profileType, apn.maxConnsTime, apn.maxConns, apn.waitTime, apn.carrierEnabled, apn.typesBitmap, apn.roamingProtocol, bearerBitmap, apn.mtu, apn.mvnoType, apn.mvnoMatchData, apn.modemCognitive); }
@android.test.suitebuilder.annotation.SmallTest public void testConvertNetworkTypeBitmaskToBearerBitmask() { int networkTypeBitmask = 276600; int bearerBitmask = 276728; assertEquals(bearerBitmask, android.telephony.ServiceState.convertNetworkTypeBitmaskToBearerBitmask(networkTypeBitmask)); }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append("[ApnSettingV3] ").append(carrier).append(", ").append(id).append(", ").append(numeric).append(", ").append(apn).append(", ").append(proxy).append(", ").append(mmsc).append(", ").append(mmsProxy).append(", ").append(mmsPort).append(", ").append(port).append(", ").append(authType).append(", "); for (int i = 0; i < (types.length); i++) { sb.append(types[i]); if (i < ((types.length) - 1)) { sb.append(" | "); } } sb.append(", ").append(protocol); sb.append(", ").append(roamingProtocol); sb.append(", ").append(carrierEnabled); sb.append(", ").append(bearer); sb.append(", ").append(bearerBitmask); sb.append(", ").append(profileId); sb.append(", ").append(modemCognitive); sb.append(", ").append(maxConns); sb.append(", ").append(waitTime); sb.append(", ").append(maxConnsTime); sb.append(", ").append(mtu); sb.append(", ").append(mvnoType); sb.append(", ").append(mvnoMatchData); sb.append(", ").append(permanentFailed); sb.append(", ").append(networkTypeBitmask); return sb.toString(); }
public static int convertNetworkTypeBitmaskToBearerBitmask(int networkTypeBitmask) { int bearerBitmask = 0; for (int i = 0; i < (android.telephony.ServiceState.NUMBER_OF_RADIO_TECHNOLOGY); i++) { int bearerInt = i; if (android.telephony.ServiceState.bitmaskHasTech(networkTypeBitmask, android.telephony.ServiceState.rilRadioTechnologyToNetworkType(bearerInt))) { bearerBitmask |= android.telephony.ServiceState.getBitmaskForTech(bearerInt); } } return bearerBitmask; }
public static int convertBearerBitmaskToNetworkTypeBitmask(int bearerBitmask) { int networkTypeBitmask = 0; for (int i = 0; i < (android.telephony.ServiceState.NUMBER_OF_RADIO_TECHNOLOGY); i++) { int bearerInt = i; if (android.telephony.ServiceState.bitmaskHasTech(bearerBitmask, bearerInt)) { networkTypeBitmask |= android.telephony.ServiceState.getBitmaskForTech(android.telephony.ServiceState.rilRadioTechnologyToNetworkType(bearerInt)); } } return networkTypeBitmask; }
@android.test.suitebuilder.annotation.SmallTest public void testConvertBearerBitmaskToNetworkTypeBitmask() { int networkTypeBitmask = 276600; int bearerBitmask = 276728; assertEquals(networkTypeBitmask, android.telephony.ServiceState.convertBearerBitmaskToNetworkTypeBitmask(bearerBitmask)); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testToString() throws java.lang.Exception { java.lang.String[] types = new java.lang.String[]{ "default", "*" }; com.android.internal.telephony.dataconnection.ApnSetting apn = new com.android.internal.telephony.dataconnection.ApnSetting(99, "12345", "Name", "apn", "proxy", "port", "mmsc", "mmsproxy", "mmsport", "user", "password", 0, types, "IPV6", "IP", true, 14, 0, 0, false, 0, 0, 0, 0, "", ""); java.lang.String expected = "[ApnSettingV3] Name, 99, 12345, apn, proxy, " + ("mmsc, mmsproxy, mmsport, port, 0, default | *, " + "IPV6, IP, true, 14, 8192, 0, false, 0, 0, 0, 0, , , false, 0"); assertEquals(expected, apn.toString()); }
public android.service.euicc.OperatorId getOperatorId() { return operatorId; }
public android.service.euicc.EuiccProfileInfo.Builder setIccid(java.lang.String value) { iccid = value; return this; }
public android.service.euicc.EuiccProfileInfo.Builder setOperatorId(android.service.euicc.OperatorId value) { operatorId = value; return this; }
@org.junit.Test public void testWriteToParcel() { android.service.euicc.EuiccProfileInfo p = new android.service.euicc.EuiccProfileInfo.Builder().setIccid("21430000000000006587").setNickname("profile nickname").setProfileName("profile name").setServiceProviderName("service provider").setOperatorId(new android.service.euicc.OperatorId(new byte[]{ 35, 69, 103 }, new byte[]{ 1, 2, 3 }, new byte[]{ 4, 5 })).setState(EuiccProfileInfo.ProfileState.ENABLED).setProfileClass(EuiccProfileInfo.ProfileClass.OPERATIONAL).setPolicyRules(EuiccProfileInfo.PolicyRule.DO_NOT_DELETE).setUiccAccessRule(new android.telephony.UiccAccessRule[]{ new android.telephony.UiccAccessRule(new byte[]{ }, "package", 12345L) }).build(); android.os.Parcel parcel = android.os.Parcel.obtain(); assertTrue((parcel != null)); p.writeToParcel(parcel, 0); parcel.setDataPosition(0); android.service.euicc.EuiccProfileInfo fromParcel = EuiccProfileInfo.CREATOR.createFromParcel(parcel); assertEquals(p, fromParcel); }
@org.junit.Test public void testBuilder_BasedOnAnotherProfile() { android.service.euicc.EuiccProfileInfo p = new android.service.euicc.EuiccProfileInfo.Builder().setIccid("21430000000000006587").setNickname("profile nickname").setProfileName("profile name").setServiceProviderName("service provider").setOperatorId(new android.service.euicc.OperatorId(new byte[]{ 35, 69, 103 }, new byte[]{ 1, 2, 3 }, new byte[]{ 4, 5 })).setState(EuiccProfileInfo.ProfileState.ENABLED).setProfileClass(EuiccProfileInfo.ProfileClass.OPERATIONAL).setPolicyRules(EuiccProfileInfo.PolicyRule.DO_NOT_DELETE).setUiccAccessRule(new android.telephony.UiccAccessRule[]{ new android.telephony.UiccAccessRule(new byte[0], null, 0) }).build(); android.service.euicc.EuiccProfileInfo copied = new android.service.euicc.EuiccProfileInfo.Builder(p).build(); assertEquals(p, copied); assertEquals(p.hashCode(), copied.hashCode()); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if ((obj == null) || ((getClass()) != (obj.getClass()))) { return false; } android.service.euicc.EuiccProfileInfo that = ((android.service.euicc.EuiccProfileInfo) (obj)); return ((((((((java.util.Objects.equals(iccid, that.iccid)) && (java.util.Arrays.equals(accessRules, that.accessRules))) && (java.util.Objects.equals(nickname, that.nickname))) && (java.util.Objects.equals(serviceProviderName, that.serviceProviderName))) && (java.util.Objects.equals(profileName, that.profileName))) && ((profileClass) == (that.profileClass))) && ((state) == (that.state))) && (java.util.Objects.equals(operatorId, that.operatorId))) && ((policyRules) == (that.policyRules)); }
@java.lang.Override public java.lang.String toString() { return ((((((((((((((("EuiccProfile (nickname=" + (nickname)) + ", serviceProviderName=") + (serviceProviderName)) + ", profileName=") + (profileName)) + ", profileClass=") + (profileClass)) + ", state=") + (state)) + ", operatorId=") + (operatorId.toString())) + ", policyRules=") + (policyRules)) + ", accessRules=") + (java.util.Arrays.toString(accessRules))) + ")"; }
@org.junit.Test public void testBuilderAndGetters() { android.service.euicc.EuiccProfileInfo p = new android.service.euicc.EuiccProfileInfo.Builder().setIccid("21430000000000006587").setNickname("profile nickname").setProfileName("profile name").setServiceProviderName("service provider").setOperatorId(new android.service.euicc.OperatorId(new byte[]{ 35, 69, 103 }, new byte[]{ 1, 2, 3 }, new byte[]{ 4, 5 })).setState(EuiccProfileInfo.ProfileState.ENABLED).setProfileClass(EuiccProfileInfo.ProfileClass.OPERATIONAL).setPolicyRules(EuiccProfileInfo.PolicyRule.DO_NOT_DELETE).setUiccAccessRule(new android.telephony.UiccAccessRule[]{ new android.telephony.UiccAccessRule(new byte[0], null, 0) }).build(); assertEquals("21430000000000006587", p.getIccid()); assertEquals("profile nickname", p.getNickname()); assertEquals("profile name", p.getProfileName()); assertEquals("service provider", p.getServiceProviderName()); assertEquals("325", p.getOperatorId().getMcc()); assertEquals("764", p.getOperatorId().getMnc()); assertArrayEquals(new byte[]{ 1, 2, 3 }, p.getOperatorId().getGid1()); assertArrayEquals(new byte[]{ 4, 5 }, p.getOperatorId().getGid2()); assertEquals(EuiccProfileInfo.ProfileState.ENABLED, p.getState()); assertEquals(EuiccProfileInfo.ProfileClass.OPERATIONAL, p.getProfileClass()); assertEquals(EuiccProfileInfo.PolicyRule.DO_NOT_DELETE, p.getPolicyRules()); assertTrue(p.hasPolicyRules()); assertTrue(p.hasPolicyRule(EuiccProfileInfo.PolicyRule.DO_NOT_DELETE)); assertFalse(p.hasPolicyRule(EuiccProfileInfo.PolicyRule.DO_NOT_DISABLE)); assertArrayEquals(new android.telephony.UiccAccessRule[]{ new android.telephony.UiccAccessRule(new byte[0], null, 0) }, p.getUiccAccessRules()); }
@java.lang.Override public int hashCode() { int result = 1; result = (31 * result) + (java.util.Objects.hashCode(iccid)); result = (31 * result) + (java.util.Arrays.hashCode(accessRules)); result = (31 * result) + (java.util.Objects.hashCode(nickname)); result = (31 * result) + (java.util.Objects.hashCode(serviceProviderName)); result = (31 * result) + (java.util.Objects.hashCode(profileName)); result = (31 * result) + (profileClass); result = (31 * result) + (state); result = (31 * result) + (java.util.Objects.hashCode(operatorId)); result = (31 * result) + (policyRules); return result; }
public android.service.euicc.EuiccProfileInfo build() { if ((iccid) == null) { throw new java.lang.IllegalStateException("ICCID must be set for a profile."); } return new android.service.euicc.EuiccProfileInfo(iccid, accessRules, nickname, serviceProviderName, profileName, profileClass, state, operatorId, policyRules); }
@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testBuilderSetOperatorMccMnc_Illegal() { new android.service.euicc.EuiccProfileInfo.Builder().setOperatorId(new android.service.euicc.OperatorId(new byte[]{ 1, 2, 3, 4 }, null, null)); }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof android.telecom.DisconnectCause) { android.telecom.DisconnectCause d = ((android.telecom.DisconnectCause) (o)); return ((((((java.util.Objects.equals(mDisconnectCode, d.getCode())) && (java.util.Objects.equals(mPreciseDisconnectCode, d.getPreciseCode()))) && (java.util.Objects.equals(mDisconnectLabel, d.getLabel()))) && (java.util.Objects.equals(mPreciseDisconnectLabel, d.getPreciseLabel()))) && (java.util.Objects.equals(mDisconnectDescription, d.getDescription()))) && (java.util.Objects.equals(mDisconnectReason, d.getReason()))) && (java.util.Objects.equals(mToneToPlay, d.getTone())); } return false; }
@java.lang.Override public android.telecom.DisconnectCause createFromParcel(android.os.Parcel source) { int code = source.readInt(); int preciseCode = source.readInt(); java.lang.CharSequence label = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(source); java.lang.CharSequence preciseLabel = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(source); java.lang.CharSequence description = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(source); java.lang.String reason = source.readString(); int tone = source.readInt(); return new android.telecom.DisconnectCause(code, preciseCode, label, preciseLabel, description, reason, tone); }
@java.lang.Override public int hashCode() { return ((((((java.util.Objects.hashCode(mDisconnectCode)) + (java.util.Objects.hashCode(mPreciseDisconnectCode))) + (java.util.Objects.hashCode(mDisconnectLabel))) + (java.util.Objects.hashCode(mPreciseDisconnectLabel))) + (java.util.Objects.hashCode(mDisconnectDescription))) + (java.util.Objects.hashCode(mDisconnectReason))) + (java.util.Objects.hashCode(mToneToPlay)); }
public static android.telecom.DisconnectCause toTelecomDisconnectCause(int telephonyDisconnectCause, int telephonyPerciseDisconnectCause, java.lang.String reason) { android.content.Context context = com.android.phone.PhoneGlobals.getInstance(); return new android.telecom.DisconnectCause(com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseCode(telephonyDisconnectCause), telephonyPerciseDisconnectCause, com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseLabel(context, telephonyDisconnectCause), com.android.services.telephony.DisconnectCauseUtil.toTelecomPreciseDisconnectCauseLabel(context, telephonyPerciseDisconnectCause, telephonyDisconnectCause), com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseDescription(context, telephonyDisconnectCause), com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectReason(telephonyDisconnectCause, reason), com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseTone(telephonyDisconnectCause)); }
void updateStateInternal() { if ((mOriginalConnection) == null) { return; } com.android.internal.telephony.Call.State newState; if ((mIsStateOverridden) && ((mOriginalConnectionState) == (mOriginalConnection.getState()))) { newState = mConnectionOverriddenState; } else { newState = mOriginalConnection.getState(); } com.android.services.telephony.Log.v(this, "Update state from %s to %s for %s", mConnectionState, newState, this); if ((mConnectionState) != newState) { mConnectionState = newState; switch (newState) { case IDLE : break; case ACTIVE : setActiveInternal(); break; case HOLDING : setOnHold(); break; case DIALING : case ALERTING : setDialing(); break; case INCOMING : case WAITING : setRinging(); break; case DISCONNECTED : int preciseDisconnectCause = -1; if (mIsPreciseFailedCauseSupported) { preciseDisconnectCause = mOriginalConnection.getPreciseDisconnectCause(); } setDisconnected(com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCause(mOriginalConnection.getDisconnectCause(), preciseDisconnectCause, mOriginalConnection.getVendorDisconnectCause())); close(); break; case DISCONNECTING : break; } } }
public void setPreciseFailedCauseSupported(boolean isPreciseFailedCauseSupported) { mIsPreciseFailedCauseSupported = isPreciseFailedCauseSupported; }
public boolean isPreciseFailedCauseSupported() { return mIsPreciseFailedCauseSupported; }
private boolean isCarrierPreciseFailedCauseSupported() { android.os.PersistableBundle b = com.android.phone.PhoneGlobals.getInstance().getCarrierConfigForSubId(mPhone.getSubId()); return b.getBoolean(CarrierConfigManager.KEY_SUPPORT_PRECISE_FAILED_CAUSE_BOOL); }
boolean isPreciseFailedCauseSupported(android.telecom.PhoneAccountHandle handle) { for (com.android.services.telephony.TelecomAccountRegistry.AccountEntry entry : mAccounts) { if (entry.getPhoneAccountHandle().equals(handle)) { return entry.isPreciseFailedCauseSupported(); } } return false; }
private com.android.services.telephony.TelephonyConnection createConnectionFor(com.android.internal.telephony.Phone phone, com.android.internal.telephony.Connection originalConnection, boolean isOutgoing, android.telecom.PhoneAccountHandle phoneAccountHandle, java.lang.String telecomCallId, android.net.Uri address) { com.android.services.telephony.TelephonyConnection returnConnection = null; int phoneType = phone.getPhoneType(); if (phoneType == (android.telephony.TelephonyManager.PHONE_TYPE_GSM)) { returnConnection = new com.android.services.telephony.GsmConnection(originalConnection, telecomCallId); } else if (phoneType == (android.telephony.TelephonyManager.PHONE_TYPE_CDMA)) { boolean allowsMute = allowsMute(phone); returnConnection = new com.android.services.telephony.CdmaConnection(originalConnection, mEmergencyTonePlayer, allowsMute, isOutgoing, telecomCallId); } if (returnConnection != null) { returnConnection.addTelephonyConnectionListener(mTelephonyConnectionListener); returnConnection.setVideoPauseSupported(com.android.services.telephony.TelecomAccountRegistry.getInstance(this).isVideoPauseSupported(phoneAccountHandle)); boolean isEmergencyCall = (address != null) && (android.telephony.PhoneNumberUtils.isEmergencyNumber(address.getSchemeSpecificPart())); returnConnection.setConferenceSupported(((!isEmergencyCall) && (com.android.services.telephony.TelecomAccountRegistry.getInstance(this).isMergeCallSupported(phoneAccountHandle)))); returnConnection.setPreciseFailedCauseSupported(com.android.services.telephony.TelecomAccountRegistry.getInstance(this).isPreciseFailedCauseSupported(phoneAccountHandle)); } return returnConnection; }
@java.lang.Override public void writeToParcel(android.os.Parcel destination, int flags) { destination.writeInt(mDisconnectCode); destination.writeInt(mPreciseDisconnectCode); android.text.TextUtils.writeToParcel(mDisconnectLabel, destination, flags); android.text.TextUtils.writeToParcel(mPreciseDisconnectLabel, destination, flags); android.text.TextUtils.writeToParcel(mDisconnectDescription, destination, flags); destination.writeString(mDisconnectReason); destination.writeInt(mToneToPlay); }
public java.lang.String getMccStr() { return mMcc; }
@java.lang.Override public abstract void writeToParcel(android.os.Parcel dest, int flags);
@java.lang.Override public boolean equals(java.lang.Object other) { if ((this) == other) { return true; } if (!(other instanceof android.telephony.CellIdentityTdscdma)) { return false; } android.telephony.CellIdentityTdscdma o = ((android.telephony.CellIdentityTdscdma) (other)); return ((((android.text.TextUtils.equals(mMcc, o.mMcc)) && (android.text.TextUtils.equals(mMnc, o.mMnc))) && ((mLac) == (o.mLac))) && ((mCid) == (o.mCid))) && ((mCpid) == (o.mCpid)); }
@android.test.suitebuilder.annotation.SmallTest public void testParcel() { android.telephony.CellIdentity ci = new android.telephony.CellIdentityLte(com.android.internal.telephony.CellIdentityTest.CI, com.android.internal.telephony.CellIdentityTest.PCI, com.android.internal.telephony.CellIdentityTest.TAC, com.android.internal.telephony.CellIdentityTest.EARFCN, com.android.internal.telephony.CellIdentityTest.MCC_STR, com.android.internal.telephony.CellIdentityTest.MNC_STR, com.android.internal.telephony.CellIdentityTest.ALPHA_LONG, com.android.internal.telephony.CellIdentityTest.ALPHA_SHORT); android.os.Parcel p = android.os.Parcel.obtain(); ci.writeToParcel(p, 0); p.setDataPosition(0); android.telephony.CellIdentity newCi = CellIdentity.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { if (android.telephony.CellIdentityTdscdma.DBG) android.telephony.CellIdentityTdscdma.log(("writeToParcel(Parcel, int): " + (toString()))); super.writeToParcel(dest, flags, android.telephony.TYPE_TDSCDMA); dest.writeString(mMcc); dest.writeString(mMnc); dest.writeInt(mLac); dest.writeInt(mCid); dest.writeInt(mCpid); }
public java.lang.String getMncStr() { return mMnc; }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder sb = new java.lang.StringBuilder("CellIdentityTdscdma:{"); sb.append(" mMcc="); sb.append(mMcc); sb.append(" mMnc="); sb.append(mMnc); sb.append(" mLac="); sb.append(mLac); sb.append(" mCid="); sb.append(mCid); sb.append(" mCpid="); sb.append(mCpid); sb.append("}"); return sb.toString(); }
private static void writeToParcelForGsm(android.os.Parcel p, int lac, int cid, int arfcn, int bsic, java.lang.String mcc, java.lang.String mnc, java.lang.String al, java.lang.String as, int ss, int ber, int ta) { p.writeInt(CellIdentity.TYPE_GSM); p.writeInt(lac); p.writeInt(cid); p.writeInt(arfcn); p.writeInt(bsic); p.writeString(mcc); p.writeString(mnc); p.writeString(al); p.writeString(as); p.writeInt(ss); p.writeInt(ber); p.writeInt(ta); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(mMcc, mMnc, mLac, mCid, mCpid); }
private static void writeToParcelForCdma(android.os.Parcel p, int ni, int si, int bsi, int lon, int lat, java.lang.String al, java.lang.String as, int dbm, int ecio, int eDbm, int eEcio, int eSnr) { p.writeInt(CellIdentity.TYPE_CDMA); p.writeInt(ni); p.writeInt(si); p.writeInt(bsi); p.writeInt(lon); p.writeInt(lat); p.writeString(al); p.writeString(as); p.writeInt(dbm); p.writeInt(ecio); p.writeInt(eDbm); p.writeInt(eEcio); p.writeInt(eSnr); }
protected void writeToParcel(android.os.Parcel dest, int flags, int type) { dest.writeInt(type); }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { if (android.telephony.CellIdentityLte.DBG) android.telephony.CellIdentityLte.log(("writeToParcel(Parcel, int): " + (toString()))); super.writeToParcel(dest, flags, android.telephony.TYPE_LTE); dest.writeInt(mCi); dest.writeInt(mPci); dest.writeInt(mTac); dest.writeInt(mEarfcn); dest.writeString(mMccStr); dest.writeString(mMncStr); dest.writeString(mAlphaLong); dest.writeString(mAlphaShort); }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { if (android.telephony.CellIdentityGsm.DBG) android.telephony.CellIdentityGsm.log(("writeToParcel(Parcel, int): " + (toString()))); super.writeToParcel(dest, flags, android.telephony.TYPE_GSM); dest.writeInt(mLac); dest.writeInt(mCid); dest.writeInt(mArfcn); dest.writeInt(mBsic); dest.writeString(mMccStr); dest.writeString(mMncStr); dest.writeString(mAlphaLong); dest.writeString(mAlphaShort); }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { if (android.telephony.CellIdentityCdma.DBG) android.telephony.CellIdentityCdma.log(("writeToParcel(Parcel, int): " + (toString()))); super.writeToParcel(dest, flags, android.telephony.TYPE_CDMA); dest.writeInt(mNetworkId); dest.writeInt(mSystemId); dest.writeInt(mBasestationId); dest.writeInt(mLongitude); dest.writeInt(mLatitude); dest.writeString(mAlphaLong); dest.writeString(mAlphaShort); }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { if (android.telephony.CellIdentityWcdma.DBG) android.telephony.CellIdentityWcdma.log(("writeToParcel(Parcel, int): " + (toString()))); super.writeToParcel(dest, flags, android.telephony.TYPE_WCDMA); dest.writeInt(mLac); dest.writeInt(mCid); dest.writeInt(mPsc); dest.writeInt(mUarfcn); dest.writeString(mMccStr); dest.writeString(mMncStr); dest.writeString(mAlphaLong); dest.writeString(mAlphaShort); }
private static void writeToParcelForWcdma(android.os.Parcel p, int lac, int cid, int psc, int uarfcn, java.lang.String mcc, java.lang.String mnc, java.lang.String al, java.lang.String as, int ss, int ber) { p.writeInt(CellIdentity.TYPE_WCDMA); p.writeInt(lac); p.writeInt(cid); p.writeInt(psc); p.writeInt(uarfcn); p.writeString(mcc); p.writeString(mnc); p.writeString(al); p.writeString(as); p.writeInt(ss); p.writeInt(ber); }
@android.test.suitebuilder.annotation.SmallTest public void testParcelWithUnknowMccMnc() { android.telephony.CellIdentityGsm ci = new android.telephony.CellIdentityGsm(com.android.internal.telephony.CellIdentityGsmTest.LAC, com.android.internal.telephony.CellIdentityGsmTest.CID, com.android.internal.telephony.CellIdentityGsmTest.ARFCN, com.android.internal.telephony.CellIdentityGsmTest.BSIC, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(CellIdentityGsm.TYPE_GSM); p.writeInt(com.android.internal.telephony.CellIdentityGsmTest.LAC); p.writeInt(com.android.internal.telephony.CellIdentityGsmTest.CID); p.writeInt(com.android.internal.telephony.CellIdentityGsmTest.ARFCN); p.writeInt(com.android.internal.telephony.CellIdentityGsmTest.BSIC); p.writeString(java.lang.String.valueOf(java.lang.Integer.MAX_VALUE)); p.writeString(java.lang.String.valueOf(java.lang.Integer.MAX_VALUE)); p.setDataPosition(0); android.telephony.CellIdentityGsm newCi = CellIdentityGsm.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }
@android.test.suitebuilder.annotation.SmallTest public void testParcelWithInvalidMccMnc() { final java.lang.String invalidMcc = "randomStuff"; final java.lang.String invalidMnc = "randomStuff"; android.telephony.CellIdentityGsm ci = new android.telephony.CellIdentityGsm(com.android.internal.telephony.CellIdentityGsmTest.LAC, com.android.internal.telephony.CellIdentityGsmTest.CID, com.android.internal.telephony.CellIdentityGsmTest.ARFCN, com.android.internal.telephony.CellIdentityGsmTest.BSIC, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(CellIdentity.TYPE_GSM); p.writeInt(com.android.internal.telephony.CellIdentityGsmTest.LAC); p.writeInt(com.android.internal.telephony.CellIdentityGsmTest.CID); p.writeInt(com.android.internal.telephony.CellIdentityGsmTest.ARFCN); p.writeInt(com.android.internal.telephony.CellIdentityGsmTest.BSIC); p.writeString(invalidMcc); p.writeString(invalidMnc); p.setDataPosition(0); android.telephony.CellIdentityGsm newCi = CellIdentityGsm.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }
@android.test.suitebuilder.annotation.SmallTest public void testParcelWithInvalidMccMnc() { final java.lang.String invalidMcc = "randomStuff"; final java.lang.String invalidMnc = "randomStuff"; android.telephony.CellIdentityWcdma ci = new android.telephony.CellIdentityWcdma(com.android.internal.telephony.CellIdentityWcdmaTest.LAC, com.android.internal.telephony.CellIdentityWcdmaTest.CID, com.android.internal.telephony.CellIdentityWcdmaTest.PSC, com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(CellIdentity.TYPE_WCDMA); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.LAC); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.CID); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.PSC); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN); p.writeString(invalidMcc); p.writeString(invalidMnc); p.setDataPosition(0); android.telephony.CellIdentityWcdma newCi = CellIdentityWcdma.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }
@android.test.suitebuilder.annotation.SmallTest public void testParcelWithUnknowMccMnc() { android.telephony.CellIdentityWcdma ci = new android.telephony.CellIdentityWcdma(com.android.internal.telephony.CellIdentityWcdmaTest.LAC, com.android.internal.telephony.CellIdentityWcdmaTest.CID, com.android.internal.telephony.CellIdentityWcdmaTest.PSC, com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(CellIdentity.TYPE_WCDMA); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.LAC); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.CID); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.PSC); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN); p.writeString(java.lang.String.valueOf(java.lang.Integer.MAX_VALUE)); p.writeString(java.lang.String.valueOf(java.lang.Integer.MAX_VALUE)); p.setDataPosition(0); android.telephony.CellIdentityWcdma newCi = CellIdentityWcdma.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }
@android.test.suitebuilder.annotation.SmallTest public void testParcelWithInvalidMccMnc() { final java.lang.String invalidMcc = "randomStuff"; final java.lang.String invalidMnc = "randomStuff"; android.telephony.CellIdentityLte ci = new android.telephony.CellIdentityLte(com.android.internal.telephony.CellIdentityLteTest.CI, com.android.internal.telephony.CellIdentityLteTest.PCI, com.android.internal.telephony.CellIdentityLteTest.TAC, com.android.internal.telephony.CellIdentityLteTest.EARFCN, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(CellIdentity.TYPE_LTE); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.CI); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.PCI); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.TAC); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.EARFCN); p.writeString(invalidMcc); p.writeString(invalidMnc); p.setDataPosition(0); android.telephony.CellIdentityLte newCi = CellIdentityLte.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }
@android.test.suitebuilder.annotation.SmallTest public void testParcelWithUnknowMccMnc() { android.telephony.CellIdentityLte ci = new android.telephony.CellIdentityLte(com.android.internal.telephony.CellIdentityLteTest.CI, com.android.internal.telephony.CellIdentityLteTest.PCI, com.android.internal.telephony.CellIdentityLteTest.TAC, com.android.internal.telephony.CellIdentityLteTest.EARFCN, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(CellIdentity.TYPE_LTE); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.CI); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.PCI); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.TAC); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.EARFCN); p.writeString(java.lang.String.valueOf(java.lang.Integer.MAX_VALUE)); p.writeString(java.lang.String.valueOf(java.lang.Integer.MAX_VALUE)); p.setDataPosition(0); android.telephony.CellIdentityLte newCi = CellIdentityLte.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }
@java.lang.Override public android.telephony.CellIdentity createFromParcel(android.os.Parcel in) { int type = in.readInt(); switch (type) { case android.telephony.CellIdentity.TYPE_GSM : return android.telephony.CellIdentityGsm.createFromParcelBody(in); case android.telephony.CellIdentity.TYPE_WCDMA : return android.telephony.CellIdentityWcdma.createFromParcelBody(in); case android.telephony.CellIdentity.TYPE_CDMA : return android.telephony.CellIdentityCdma.createFromParcelBody(in); case android.telephony.CellIdentity.TYPE_LTE : return android.telephony.CellIdentityLte.createFromParcelBody(in); case android.telephony.CellIdentity.TYPE_TDSCDMA : return android.telephony.CellIdentityTdscdma.createFromParcelBody(in); default : throw new java.lang.RuntimeException("Bad Cell identity Parcel"); } }
private static void writeToParcelForLte(android.os.Parcel p, int ci, int pci, int tac, int earfcn, java.lang.String mcc, java.lang.String mnc, java.lang.String al, java.lang.String as, int ss, int rsrp, int rsrq, int rssnr, int cqi, int ta) { p.writeInt(CellIdentity.TYPE_LTE); p.writeInt(ci); p.writeInt(pci); p.writeInt(tac); p.writeInt(earfcn); p.writeString(mcc); p.writeString(mnc); p.writeString(al); p.writeString(as); p.writeInt(ss); p.writeInt(rsrp); p.writeInt(rsrq); p.writeInt(rssnr); p.writeInt(cqi); p.writeInt(ta); }
@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testInitializationWithEarpieceAndHeadsetNoBluetooth() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_WIRED_HEADSET, ((android.telecom.CallAudioState.ROUTE_WIRED_HEADSET) | (android.telecom.CallAudioState.ROUTE_SPEAKER))); initializationTestHelper(expectedState, true); }
@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testInitializationWithBluetoothNoHeadsetNoEarpiece() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, ((android.telecom.CallAudioState.ROUTE_SPEAKER) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); initializationTestHelper(expectedState, false); }
@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testInitializationWithHeadsetNoBluetoothNoEarpiece() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_WIRED_HEADSET, ((android.telecom.CallAudioState.ROUTE_WIRED_HEADSET) | (android.telecom.CallAudioState.ROUTE_SPEAKER))); initializationTestHelper(expectedState, false); }
@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testInitializationWithHeadsetAndBluetoothNoEarpiece() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, (((android.telecom.CallAudioState.ROUTE_WIRED_HEADSET) | (android.telecom.CallAudioState.ROUTE_SPEAKER)) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); initializationTestHelper(expectedState, false); }
@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); org.mockito.MockitoAnnotations.initMocks(this); mContext = mComponentContextFixture.getTestDouble().getApplicationContext(); doNothing().when(mMockCallsManager).addListener(any(CallsManager.CallsManagerListener.class)); doReturn(null).when(mMockCallsManager).getActiveCall(); doReturn(null).when(mMockCallsManager).getRingingCall(); doReturn(null).when(mMockCallsManager).getHeldCall(); doReturn(null).when(mMockCallsManager).getOutgoingCall(); doReturn(0).when(mMockCallsManager).getNumHeldCalls(); mBluetoothPhoneService = new com.android.server.telecom.BluetoothPhoneServiceImpl(mContext, mLock, mMockCallsManager, mock(com.android.server.telecom.BluetoothAdapterProxy.class), mMockPhoneAccountRegistrar); mBluetoothPhoneService.setBluetoothHeadset(mMockBluetoothHeadset); }
@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testInitializationWithEarpieceNoHeadsetNoBluetooth() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_EARPIECE, ((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_SPEAKER))); initializationTestHelper(expectedState, true); }
@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testInitializationWithNoEarpieceNoHeadsetNoBluetooth() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_SPEAKER, android.telecom.CallAudioState.ROUTE_SPEAKER); initializationTestHelper(expectedState, false); }
@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testInitializationWithEarpieceAndHeadsetAndBluetooth() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, (((android.telecom.CallAudioState.ROUTE_WIRED_HEADSET) | (android.telecom.CallAudioState.ROUTE_SPEAKER)) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); initializationTestHelper(expectedState, true); }
@android.test.suitebuilder.annotation.MediumTest @org.junit.Test public void testBluetoothRinging() { com.android.server.telecom.CallAudioRouteStateMachine stateMachine = new com.android.server.telecom.CallAudioRouteStateMachine(mContext, mockCallsManager, mockBluetoothRouteManager, mockWiredHeadsetManager, mockStatusBarNotifier, mAudioServiceFactory, true); when(mockBluetoothRouteManager.isBluetoothAudioConnectedOrPending()).thenReturn(false); when(mockBluetoothRouteManager.isBluetoothAvailable()).thenReturn(true); when(mockBluetoothRouteManager.getConnectedDevices()).thenReturn(java.util.Collections.singletonList(com.android.server.telecom.tests.CallAudioRouteStateMachineTest.bluetoothDevice1)); when(mockAudioManager.isSpeakerphoneOn()).thenReturn(false); android.telecom.CallAudioState initState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, ((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); stateMachine.initialize(initState); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.SWITCH_FOCUS, CallAudioRouteStateMachine.RINGING_FOCUS); waitForStateMachineActionCompletion(stateMachine, CallAudioRouteStateMachine.RUN_RUNNABLE); verify(mockBluetoothRouteManager, never()).connectBluetoothAudio(nullable(java.lang.String.class)); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.SWITCH_FOCUS, CallAudioRouteStateMachine.ACTIVE_FOCUS); waitForStateMachineActionCompletion(stateMachine, CallAudioRouteStateMachine.RUN_RUNNABLE); verify(mockBluetoothRouteManager, times(1)).connectBluetoothAudio(nullable(java.lang.String.class)); }
@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testInitializationWithEarpieceAndBluetoothNoHeadset() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, (((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_SPEAKER)) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); initializationTestHelper(expectedState, true); }
private static void verify(com.android.apksig.util.DataSource beforeApkSigningBlock, java.nio.ByteBuffer apkSignatureSchemeV2Block, com.android.apksig.util.DataSource centralDir, java.nio.ByteBuffer eocd, int minSdkVersion, int maxSdkVersion, com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.Result result) throws java.io.IOException, java.security.NoSuchAlgorithmException { java.util.Set<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm> contentDigestsToVerify = new java.util.HashSet<>(1); com.android.apksig.internal.apk.SigningBlockScheme.v2.V2SchemeVerifier.parseSigners(apkSignatureSchemeV2Block, contentDigestsToVerify, minSdkVersion, maxSdkVersion, result); if (result.containsErrors()) { return; } com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.verifyIntegrity(beforeApkSigningBlock, centralDir, eocd, contentDigestsToVerify, result); if (!(result.containsErrors())) { result.verified = true; } }
private static void parseSigners(java.nio.ByteBuffer apkSignatureSchemeV2Block, java.util.Set<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm> contentDigestsToVerify, int minSdkVersion, int maxSdkVersion, com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.Result result) throws java.security.NoSuchAlgorithmException { java.nio.ByteBuffer signers; try { signers = com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.getLengthPrefixedSlice(apkSignatureSchemeV2Block); } catch (com.android.apksig.apk.ApkFormatException e) { result.addError(Issue.V2_SIG_MALFORMED_SIGNERS); return; } if (!(signers.hasRemaining())) { result.addError(Issue.V2_SIG_NO_SIGNERS); return; } java.security.cert.CertificateFactory certFactory; try { certFactory = java.security.cert.CertificateFactory.getInstance("X.509"); } catch (java.security.cert.CertificateException e) { throw new java.lang.RuntimeException("Failed to obtain X.509 CertificateFactory", e); } int signerCount = 0; while (signers.hasRemaining()) { int signerIndex = signerCount; signerCount++; com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.Result.SignerInfo signerInfo = new com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.Result.SignerInfo(); signerInfo.index = signerIndex; result.signers.add(signerInfo); try { java.nio.ByteBuffer signer = com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.getLengthPrefixedSlice(signers); com.android.apksig.internal.apk.SigningBlockScheme.v2.V2SchemeVerifier.parseSigner(signer, certFactory, signerInfo, contentDigestsToVerify, minSdkVersion, maxSdkVersion); } catch (com.android.apksig.apk.ApkFormatException | java.nio.BufferUnderflowException e) { signerInfo.addError(Issue.V2_SIG_MALFORMED_SIGNER); return; } } }
public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion, int maxSdkVersion) throws ApkSigningBlockUtils.SignatureNotFoundException, com.android.apksig.apk.ApkFormatException, java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.Result(); com.android.apksig.internal.apk.SigningBlockScheme.SignatureInfo signatureInfo = com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.findSignature(apk, zipSections, com.android.apksig.internal.apk.SigningBlockScheme.v2.V2SchemeVerifier.APK_SIGNATURE_SCHEME_V2_BLOCK_ID, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.internal.apk.SigningBlockScheme.v2.V2SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, minSdkVersion, maxSdkVersion, result); return result; }
public static java.lang.String toHex(byte[] value) { java.lang.StringBuilder sb = new java.lang.StringBuilder(((value.length) * 2)); int len = value.length; for (int i = 0; i < len; i++) { int hi = ((value[i]) & 255) >>> 4; int lo = (value[i]) & 15; sb.append(com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.HEX_DIGITS[hi]).append(com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.HEX_DIGITS[lo]); } return sb.toString(); }
public static com.android.apksig.internal.apk.SigningBlockScheme.SignatureAlgorithm findById(int id) { for (com.android.apksig.internal.apk.SigningBlockScheme.SignatureAlgorithm alg : com.android.apksig.internal.apk.SigningBlockScheme.SignatureAlgorithm.values()) { if ((alg.getId()) == id) { return alg; } } return null; }
public static com.android.apksig.internal.util.Pair<byte[], java.lang.Integer> generateApkSignatureSchemeV2Block(java.util.List<com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignerConfig> signerConfigs, java.util.Map<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm, byte[]> contentDigests) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException { java.util.List<byte[]> signerBlocks = new java.util.ArrayList(signerConfigs.size()); int signerNumber = 0; for (com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignerConfig signerConfig : signerConfigs) { signerNumber++; byte[] signerBlock; try { signerBlock = com.android.apksig.internal.apk.SigningBlockScheme.v2.V2SchemeSigner.generateSignerBlock(signerConfig, contentDigests); } catch (java.security.InvalidKeyException e) { throw new java.security.InvalidKeyException((("Signer #" + signerNumber) + " failed"), e); } catch (java.security.SignatureException e) { throw new java.security.SignatureException((("Signer #" + signerNumber) + " failed"), e); } signerBlocks.add(signerBlock); } return com.android.apksig.internal.util.Pair.of(com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.encodeAsSequenceOfLengthPrefixedElements(new byte[][]{ com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.encodeAsSequenceOfLengthPrefixedElements(signerBlocks) }), com.android.apksig.internal.apk.SigningBlockScheme.v2.V2SchemeSigner.APK_SIGNATURE_SCHEME_V2_BLOCK_ID); }
private void mergeFrom(com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.Result source) { mVerifiedUsingV2Scheme = source.verified; mErrors.addAll(source.getErrors()); mWarnings.addAll(source.getWarnings()); for (com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.Result.SignerInfo signer : source.signers) { mV2SchemeSigners.add(new com.android.apksig.ApkVerifier.Result.V2SchemeSignerInfo(signer)); } }
public static java.util.List<com.android.apksig.internal.apk.SigningBlockScheme.SignatureAlgorithm> getSuggestedSignatureAlgorithms(java.security.PublicKey signingKey, int minSdkVersion, boolean apkSigningBlockPaddingSupported) throws java.security.InvalidKeyException { java.lang.String keyAlgorithm = signingKey.getAlgorithm(); if ("RSA".equalsIgnoreCase(keyAlgorithm)) { int modulusLengthBits = ((java.security.interfaces.RSAKey) (signingKey)).getModulus().bitLength(); if (modulusLengthBits <= 3072) { java.util.List<com.android.apksig.internal.apk.SigningBlockScheme.SignatureAlgorithm> algorithms = new java.util.ArrayList<>(); algorithms.add(SignatureAlgorithm.RSA_PKCS1_V1_5_WITH_SHA256); if (apkSigningBlockPaddingSupported) { algorithms.add(SignatureAlgorithm.VERITY_RSA_PKCS1_V1_5_WITH_SHA256); } return algorithms; } else { return java.util.Collections.singletonList(SignatureAlgorithm.RSA_PKCS1_V1_5_WITH_SHA512); } } else if ("DSA".equalsIgnoreCase(keyAlgorithm)) { java.util.List<com.android.apksig.internal.apk.SigningBlockScheme.SignatureAlgorithm> algorithms = new java.util.ArrayList<>(); algorithms.add(SignatureAlgorithm.DSA_WITH_SHA256); if (apkSigningBlockPaddingSupported) { algorithms.add(SignatureAlgorithm.VERITY_DSA_WITH_SHA256); } return algorithms; } else if ("EC".equalsIgnoreCase(keyAlgorithm)) { int keySizeBits = ((java.security.interfaces.ECKey) (signingKey)).getParams().getOrder().bitLength(); if (keySizeBits <= 256) { java.util.List<com.android.apksig.internal.apk.SigningBlockScheme.SignatureAlgorithm> algorithms = new java.util.ArrayList<>(); algorithms.add(SignatureAlgorithm.ECDSA_WITH_SHA256); if (apkSigningBlockPaddingSupported) { algorithms.add(SignatureAlgorithm.VERITY_ECDSA_WITH_SHA256); } return algorithms; } else { return java.util.Collections.singletonList(SignatureAlgorithm.ECDSA_WITH_SHA512); } } else { throw new java.security.InvalidKeyException(("Unsupported key algorithm: " + keyAlgorithm)); } }
public static java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer source) throws com.android.apksig.apk.ApkFormatException { if ((source.remaining()) < 4) { throw new com.android.apksig.apk.ApkFormatException((("Remaining buffer too short to contain length of length-prefixed field" + ". Remaining: ") + (source.remaining()))); } int len = source.getInt(); if (len < 0) { throw new java.lang.IllegalArgumentException("Negative length"); } else if (len > (source.remaining())) { throw new com.android.apksig.apk.ApkFormatException((((("Length-prefixed field longer than remaining buffer" + ". Field length: ") + len) + ", remaining: ") + (source.remaining()))); } return com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.getByteBuffer(source, len); }
private java.util.List<com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignerConfig> createV2SignerConfigs(boolean apkSigningBlockPaddingSupported) throws java.security.InvalidKeyException { java.util.List<com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignerConfig> v2SignerConfigs = new java.util.ArrayList<>(mSignerConfigs.size()); for (int i = 0; i < (mSignerConfigs.size()); i++) { com.android.apksig.DefaultApkSignerEngine.SignerConfig signerConfig = mSignerConfigs.get(i); java.util.List<java.security.cert.X509Certificate> certificates = signerConfig.getCertificates(); java.security.PublicKey publicKey = certificates.get(0).getPublicKey(); com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignerConfig v2SignerConfig = new com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignerConfig(); v2SignerConfig.privateKey = signerConfig.getPrivateKey(); v2SignerConfig.certificates = certificates; v2SignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.SigningBlockScheme.v2.V2SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); v2SignerConfigs.add(v2SignerConfig); } return v2SignerConfigs; }
public static com.android.apksig.internal.apk.SigningBlockScheme.SignatureInfo findSignature(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int blockId, com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.Result result) throws com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignatureNotFoundException, java.io.IOException { com.android.apksig.util.DataSource apkSigningBlock; long apkSigningBlockOffset; try { com.android.apksig.apk.ApkUtils.ApkSigningBlock apkSigningBlockInfo = com.android.apksig.apk.ApkUtils.findApkSigningBlock(apk, zipSections); apkSigningBlockOffset = apkSigningBlockInfo.getStartOffset(); apkSigningBlock = apkSigningBlockInfo.getContents(); } catch (com.android.apksig.apk.ApkSigningBlockNotFoundException e) { throw new com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignatureNotFoundException(e.getMessage(), e); } java.nio.ByteBuffer apkSigningBlockBuf = apkSigningBlock.getByteBuffer(0, ((int) (apkSigningBlock.size()))); apkSigningBlockBuf.order(java.nio.ByteOrder.LITTLE_ENDIAN); java.nio.ByteBuffer apkSignatureSchemeBlock = com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.findApkSignatureSchemeBlock(apkSigningBlockBuf, blockId, result); return new com.android.apksig.internal.apk.SigningBlockScheme.SignatureInfo(apkSignatureSchemeBlock, apkSigningBlockOffset, zipSections.getZipCentralDirectoryOffset(), zipSections.getZipEndOfCentralDirectoryOffset(), zipSections.getZipEndOfCentralDirectory()); }
public boolean containsErrors() { if (!(mErrors.isEmpty())) { return true; } if (!(signers.isEmpty())) { for (com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.Result.SignerInfo signer : signers) { if (signer.containsErrors()) { return true; } } } return false; }
public com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm getContentDigestAlgorithm() { return mContentDigestAlgorithm; }
public static byte[] encodeAsSequenceOfLengthPrefixedElements(java.util.List<byte[]> sequence) { return com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.encodeAsSequenceOfLengthPrefixedElements(sequence.toArray(new byte[sequence.size()][])); }
public static com.android.apksig.util.DataSource generateApkSigningBlockCDOffset(com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource eocd) throws java.io.IOException { long centralDirOffsetForDigesting = beforeCentralDir.size(); java.nio.ByteBuffer eocdBuf = java.nio.ByteBuffer.allocate(((int) (eocd.size()))); eocdBuf.order(java.nio.ByteOrder.LITTLE_ENDIAN); eocd.copyTo(0, ((int) (eocd.size())), eocdBuf); eocdBuf.flip(); com.android.apksig.internal.zip.ZipUtils.setZipEocdCentralDirectoryOffset(eocdBuf, centralDirOffsetForDigesting); return com.android.apksig.util.DataSources.asDataSource(eocdBuf); }
private static int compareContentDigestAlgorithm(com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm alg1, com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm alg2) { switch (alg1) { case CHUNKED_SHA256 : switch (alg2) { case CHUNKED_SHA256 : return 0; case CHUNKED_SHA512 : case VERITY_CHUNKED_SHA256 : return -1; default : throw new java.lang.IllegalArgumentException(("Unknown alg2: " + alg2)); } case CHUNKED_SHA512 : switch (alg2) { case CHUNKED_SHA256 : case VERITY_CHUNKED_SHA256 : return 1; case CHUNKED_SHA512 : return 0; default : throw new java.lang.IllegalArgumentException(("Unknown alg2: " + alg2)); } case VERITY_CHUNKED_SHA256 : switch (alg2) { case CHUNKED_SHA256 : return 1; case VERITY_CHUNKED_SHA256 : return 0; case CHUNKED_SHA512 : return -1; default : throw new java.lang.IllegalArgumentException(("Unknown alg2: " + alg2)); } default : throw new java.lang.IllegalArgumentException(("Unknown alg1: " + alg1)); } }
public static com.android.apksig.internal.util.Pair<com.android.apksig.util.DataSource, java.lang.Integer> generateApKSigningBlockPadding(com.android.apksig.util.DataSource beforeCentralDir, boolean apkSigningBlockPaddingSupported) { int padSizeBeforeSigningBlock = 0; if (apkSigningBlockPaddingSupported && (((beforeCentralDir.size()) % (com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES)) != 0)) { padSizeBeforeSigningBlock = ((int) ((com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES) - ((beforeCentralDir.size()) % (com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES)))); beforeCentralDir = new com.android.apksig.internal.util.ChainedDataSource(beforeCentralDir, com.android.apksig.util.DataSources.asDataSource(java.nio.ByteBuffer.allocate(padSizeBeforeSigningBlock))); } return com.android.apksig.internal.util.Pair.of(beforeCentralDir, padSizeBeforeSigningBlock); }
public static int compareSignatureAlgorithm(com.android.apksig.internal.apk.SigningBlockScheme.SignatureAlgorithm alg1, com.android.apksig.internal.apk.SigningBlockScheme.SignatureAlgorithm alg2) { com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm digestAlg1 = alg1.getContentDigestAlgorithm(); com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm digestAlg2 = alg2.getContentDigestAlgorithm(); return com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.compareContentDigestAlgorithm(digestAlg1, digestAlg2); }
public static com.android.apksig.internal.util.Pair<java.util.List<com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignerConfig>, java.util.Map<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm, byte[]>> computeContentDigests(com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd, java.util.List<com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignerConfig> signerConfigs) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.SignatureException { if (signerConfigs.isEmpty()) { throw new java.lang.IllegalArgumentException("No signer configs provided. At least one is required"); } java.util.Set<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm> contentDigestAlgorithms = new java.util.HashSet<>(1); for (com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignerConfig signerConfig : signerConfigs) { for (com.android.apksig.internal.apk.SigningBlockScheme.SignatureAlgorithm signatureAlgorithm : signerConfig.signatureAlgorithms) { contentDigestAlgorithms.add(signatureAlgorithm.getContentDigestAlgorithm()); } } java.util.Map<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm, byte[]> contentDigests; try { contentDigests = com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.computeContentDigests(contentDigestAlgorithms, beforeCentralDir, centralDir, eocd); } catch (java.io.IOException e) { throw new java.io.IOException("Failed to read APK being signed", e); } catch (java.security.DigestException e) { throw new java.security.SignatureException("Failed to compute digests of APK", e); } return com.android.apksig.internal.util.Pair.of(signerConfigs, contentDigests); }
public static byte[] generateApkSigningBlock(com.android.apksig.internal.util.Pair<byte[], java.lang.Integer> apkSignatureSchemeV2Pair) { byte[] apkSignatureSchemeV2Block = apkSignatureSchemeV2Pair.getFirst(); int apkSignatureSchemev2Id = apkSignatureSchemeV2Pair.getSecond(); int resultSize = ((((8 + 8) + 4) + (apkSignatureSchemeV2Block.length)) + 8) + 16; java.nio.ByteBuffer paddingPair = null; if ((resultSize % (com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES)) != 0) { int padding = (com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES) - (resultSize % (com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES)); if (padding < 12) { padding += com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES; } paddingPair = java.nio.ByteBuffer.allocate(padding).order(java.nio.ByteOrder.LITTLE_ENDIAN); paddingPair.putLong((padding - 8)); paddingPair.putInt(com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.VERITY_PADDING_BLOCK_ID); paddingPair.rewind(); resultSize += padding; } java.nio.ByteBuffer result = java.nio.ByteBuffer.allocate(resultSize); result.order(java.nio.ByteOrder.LITTLE_ENDIAN); long blockSizeFieldValue = resultSize - 8L; result.putLong(blockSizeFieldValue); long pairSizeFieldValue = 4L + (apkSignatureSchemeV2Block.length); result.putLong(pairSizeFieldValue); result.putInt(apkSignatureSchemev2Id); result.put(apkSignatureSchemeV2Block); if (paddingPair != null) { result.put(paddingPair); } result.putLong(blockSizeFieldValue); result.put(com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.APK_SIGNING_BLOCK_MAGIC); return result.array(); }
public static java.util.Map<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm, byte[]> computeContentDigests(java.util.Set<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm> digestAlgorithms, com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd) throws java.io.IOException, java.security.DigestException, java.security.NoSuchAlgorithmException { java.util.Map<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm, byte[]> contentDigests = new java.util.HashMap<>(); java.util.Set<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm> oneMbChunkBasedAlgorithm = digestAlgorithms.stream().filter(( a) -> (a == ContentDigestAlgorithm.CHUNKED_SHA256) || (a == ContentDigestAlgorithm.CHUNKED_SHA512)).collect(java.util.stream.Collectors.toSet()); com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.computeOneMbChunkContentDigests(oneMbChunkBasedAlgorithm, new com.android.apksig.util.DataSource[]{ beforeCentralDir, centralDir, eocd }, contentDigests); if (digestAlgorithms.contains(ContentDigestAlgorithm.VERITY_CHUNKED_SHA256)) { com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.computeApkVerityDigest(beforeCentralDir, centralDir, eocd, contentDigests); } return contentDigests; }
private static void computeApkVerityDigest(com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd, java.util.Map<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm, byte[]> outputContentDigests) throws java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.util.VerityTreeBuilder builder = new com.android.apksig.internal.util.VerityTreeBuilder(new byte[8]); outputContentDigests.put(ContentDigestAlgorithm.VERITY_CHUNKED_SHA256, builder.generateVerityTreeRootHash(beforeCentralDir, centralDir, eocd)); }
@org.junit.Test public void testSendRetryImsGsmSms() throws java.lang.Exception { java.lang.String smscPdu = "smscPdu"; java.lang.String pdu = "pdu"; GsmSmsMessage gsmMsg = new GsmSmsMessage(); gsmMsg.smscPdu = smscPdu; gsmMsg.pdu = pdu; ImsSmsMessage firstMsg = new ImsSmsMessage(); firstMsg.tech = RILConstants.GSM_PHONE; firstMsg.retry = false; firstMsg.messageRef = 0; firstMsg.gsmMessage.add(gsmMsg); ImsSmsMessage retryMsg = new ImsSmsMessage(); retryMsg.tech = RILConstants.GSM_PHONE; retryMsg.retry = true; retryMsg.messageRef = 0; retryMsg.gsmMessage.add(gsmMsg); int maxRetryCount = 3; int firstTransmission = 0; for (int i = 0; i <= maxRetryCount; i++) { mRILUnderTest.sendImsGsmSms(smscPdu, pdu, i, 0, obtainMessage()); if (i == firstTransmission) { verify(mRadioProxy, times(1)).sendImsSms(mSerialNumberCaptor.capture(), eq(firstMsg)); com.android.internal.telephony.RILTest.verifyRILResponse(mRILUnderTest, mSerialNumberCaptor.getValue(), com.android.internal.telephony.RILConstants.RIL_REQUEST_IMS_SEND_SMS); } else { verify(mRadioProxy, times(i)).sendImsSms(mSerialNumberCaptor.capture(), eq(retryMsg)); com.android.internal.telephony.RILTest.verifyRILResponse(mRILUnderTest, mSerialNumberCaptor.getValue(), com.android.internal.telephony.RILConstants.RIL_REQUEST_IMS_SEND_SMS); } } }
public static android.net.util.InterfaceParams getByName(java.lang.String name) { if (name == null) return null; try { final java.net.NetworkInterface netif = java.net.NetworkInterface.getByName(name); if (netif != null) { final android.net.MacAddress macAddr = (netif.isLoopback()) ? android.net.MacAddress.ALL_ZEROS_ADDRESS : android.net.MacAddress.fromBytes(netif.getHardwareAddress()); return new android.net.util.InterfaceParams(name, netif.getIndex(), macAddr, netif.getMTU()); } } catch (java.lang.IllegalArgumentException | java.net.SocketException e) { } return null; }
@org.junit.Test public void testNonExistentInterfaceReturnsNull() { assertTrue((null == (android.net.util.InterfaceParams.getByName("doesnotexist0")))); }
@org.junit.Test public void testLoopback() { final android.net.util.InterfaceParams ifParams = android.net.util.InterfaceParams.getByName("lo"); assertTrue((ifParams != null)); assertEquals("lo", ifParams.name); assertTrue(((ifParams.index) > 0)); assertTrue(((ifParams.macAddr) != null)); assertTrue(((ifParams.defaultMtu) >= (NetworkConstants.ETHER_MTU))); }
@java.lang.Override public java.lang.String toString() { final java.util.StringJoiner j = new java.util.StringJoiner(",", "NeighborEvent{", "}"); return j.add(("@" + (elapsedMs))).add(android.net.netlink.NetlinkConstants.stringForNlMsgType(msgType)).add(("if=" + (ifindex))).add(ip.getHostAddress()).add(android.net.netlink.StructNdMsg.stringForNudState(nudState)).add((("[" + (macAddr)) + "]")).toString(); }
private void evaluateRtNetlinkNeighborMessage(android.net.netlink.RtNetlinkNeighborMessage neighMsg, long whenMs) { final short msgType = neighMsg.getHeader().nlmsg_type; final android.net.netlink.StructNdMsg ndMsg = neighMsg.getNdHeader(); if (ndMsg == null) { mLog.e("RtNetlinkNeighborMessage without ND message header!"); return; } final int ifindex = ndMsg.ndm_ifindex; final java.net.InetAddress destination = neighMsg.getDestination(); final short nudState = (msgType == (android.net.netlink.NetlinkConstants.RTM_DELNEIGH)) ? android.net.netlink.StructNdMsg.NUD_NONE : ndMsg.ndm_state; final android.net.ip.IpNeighborMonitor.NeighborEvent event = new android.net.ip.IpNeighborMonitor.NeighborEvent(whenMs, msgType, ifindex, destination, nudState, android.net.ip.IpNeighborMonitor.getMacAddress(neighMsg.getLinkLayerAddress())); if (android.net.ip.IpNeighborMonitor.VDBG) { android.util.Log.d(android.net.ip.IpNeighborMonitor.TAG, neighMsg.toString()); } if (android.net.ip.IpNeighborMonitor.DBG) { android.util.Log.d(android.net.ip.IpNeighborMonitor.TAG, event.toString()); } mConsumer.accept(event); }
private static android.net.MacAddress getMacAddress(byte[] linkLayerAddress) { if (linkLayerAddress != null) { try { return android.net.MacAddress.fromBytes(linkLayerAddress); } catch (java.lang.IllegalArgumentException e) { } } return null; }
@org.junit.Test public void testNullInterfaceReturnsNull() { assertTrue((null == (android.net.util.InterfaceParams.getByName(null)))); }
@java.lang.Override public boolean setDataSaverModeEnabled(boolean enable) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, com.android.server.NetworkManagementService.TAG); if (com.android.server.NetworkManagementService.DBG) android.util.Log.d(com.android.server.NetworkManagementService.TAG, ("setDataSaverMode: " + enable)); synchronized(mQuotaLock) { if ((mDataSaverMode) == enable) { android.util.Log.w(com.android.server.NetworkManagementService.TAG, ("setDataSaverMode(): already " + (mDataSaverMode))); return true; } android.os.Trace.traceBegin(Trace.TRACE_TAG_NETWORK, "bandwidthEnableDataSaver"); try { final boolean changed = mNetdService.bandwidthEnableDataSaver(enable); if (changed) { mDataSaverMode = enable; } else { android.util.Log.w(com.android.server.NetworkManagementService.TAG, (("setDataSaverMode(" + enable) + "): netd command silently failed")); } return changed; } catch (android.os.RemoteException e) { android.util.Log.w(com.android.server.NetworkManagementService.TAG, (("setDataSaverMode(" + enable) + "): netd command failed"), e); return false; } finally { android.os.Trace.traceEnd(Trace.TRACE_TAG_NETWORK); } } }
@org.junit.Test public void testBasicDnsConfigurationPushed() throws java.lang.Exception { mCellNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_CELLULAR); mCellNetworkAgent.connect(false); waitForIdle(); final android.net.LinkProperties cellLp = new android.net.LinkProperties(); cellLp.setInterfaceName("test_rmnet_data0"); mCellNetworkAgent.sendLinkProperties(cellLp); waitForIdle(); verify(mNetworkManagementService, times(1)).setDnsConfigurationForNetwork(anyInt(), mStringArrayCaptor.capture(), any()); com.android.server.ConnectivityServiceTest.assertEmpty(mStringArrayCaptor.getValue()); reset(mNetworkManagementService); cellLp.addDnsServer(java.net.InetAddress.getByName("2001:db8::1")); cellLp.addDnsServer(java.net.InetAddress.getByName("192.0.2.1")); mCellNetworkAgent.sendLinkProperties(cellLp); waitForIdle(); verify(mNetworkManagementService, times(1)).setDnsConfigurationForNetwork(anyInt(), mStringArrayCaptor.capture(), any()); assertEquals(2, mStringArrayCaptor.getValue().length); assertTrue(com.android.internal.util.ArrayUtils.containsAll(mStringArrayCaptor.getValue(), new java.lang.String[]{ "2001:db8::1", "192.0.2.1" })); reset(mNetworkManagementService); }
public void setDnsConfigurationForNetwork(int netId, java.util.Collection<java.net.InetAddress> servers, java.lang.String domains) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, com.android.server.connectivity.DnsManager.TAG); final android.net.INetd netd = getNetd(); if (netd == null) { android.util.Slog.e(com.android.server.connectivity.DnsManager.TAG, "Failed to locate netd service"); return; } updateParametersSettings(); updatePrivateDnsSettings(); final java.lang.String[] domainStrs = (domains == null) ? new java.lang.String[0] : domains.split(" "); final int[] params = new int[]{ mSampleValidity, mSuccessThreshold, mMinSamples, mMaxSamples }; final boolean useTls = com.android.server.connectivity.DnsManager.shouldUseTls(mPrivateDnsMode); final java.lang.String tlsHostname = ""; final java.lang.String[] tlsFingerprints = new java.lang.String[0]; try { mNetd.setResolverConfiguration(netId, android.net.NetworkUtils.makeStrings(servers), domainStrs, params, useTls, tlsHostname, tlsFingerprints); } catch (java.lang.Exception e) { android.util.Slog.e(com.android.server.connectivity.DnsManager.TAG, ("Error setting DNS configuration: " + e)); } }
private android.net.INetd getNetd() { if ((mNetd) == null) { mNetd = android.net.util.NetdService.get(1000); } return mNetd; }
private void updateDnses(android.net.LinkProperties newLp, android.net.LinkProperties oldLp, int netId) { if ((oldLp != null) && (newLp.isIdenticalDnses(oldLp))) { return; } java.util.Collection<java.net.InetAddress> dnses = newLp.getDnsServers(); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(((("Setting DNS servers for network " + netId) + " to ") + dnses)); try { mDnsManager.setDnsConfigurationForNetwork(netId, dnses, newLp.getDomains()); } catch (java.lang.Exception e) { com.android.server.ConnectivityService.loge(("Exception in setDnsConfigurationForNetwork: " + e)); } final com.android.server.connectivity.NetworkAgentInfo defaultNai = getDefaultNetwork(); if ((defaultNai != null) && ((defaultNai.network.netId) == netId)) { setDefaultDnsSystemProperties(dnses); } mDnsManager.flushVmDnsCache(); }
public void flushVmDnsCache() { final android.content.Intent intent = new android.content.Intent(android.content.Intent.ACTION_CLEAR_DNS_CACHE); intent.addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); final long ident = android.os.Binder.clearCallingIdentity(); try { mContext.sendBroadcastAsUser(intent, UserHandle.ALL); } finally { android.os.Binder.restoreCallingIdentity(ident); } }
private static boolean shouldUseTls(java.lang.String mode) { if (android.text.TextUtils.isEmpty(mode)) { mode = PRIVATE_DNS_DEFAULT_MODE; } return (mode.equals(com.android.server.connectivity.PRIVATE_DNS_MODE_OPPORTUNISTIC)) || (mode.startsWith(com.android.server.connectivity.PRIVATE_DNS_MODE_PROVIDER_HOSTNAME)); }