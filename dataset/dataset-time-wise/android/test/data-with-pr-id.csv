PR_ID,filename,codebase,codebase-hash,initial,initial-hash,approved,approved-hash,submited_date,total_patchsets
581468,src_java_com_android_internal_telephony_test_SimulatedCommands.java,"@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { if ((mIccSlotStatus) != null) { resultSuccess(result, mIccSlotStatus); } else { resultFail(result, null, new java.lang.RuntimeException(""IccSlotStatus not set"")); } }",28f32bf686d03272fc92da8d6f0a5e32d2fad2e3,"@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { if ((mIccSlotStatus) != null) { resultSuccess(result, mIccSlotStatus); } else { resultFail(result, null, new com.android.internal.telephony.CommandException(CommandException.Error.REQUEST_NOT_SUPPORTED)); } }",9b9e6f60d4bef85157084083a228500b40e7384d,"@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().getIccSlotsStatus(result); if ((mIccSlotStatus) != null) { resultSuccess(result, mIccSlotStatus); } else { resultFail(result, null, new com.android.internal.telephony.CommandException(CommandException.Error.REQUEST_NOT_SUPPORTED)); } }",e31c92e4bf0b934228ee903188a0532c5f9fbe97,2018-01-11 22:43:08,7
581468,tests_telephonytests_src_com_android_internal_telephony_uicc_UiccControllerTest.java,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSanity() { assertEquals(com.android.internal.telephony.uicc.UiccControllerTest.PHONE_COUNT, mUiccControllerUT.getUiccSlots().length); assertNotNull(mUiccControllerUT.getUiccCard(0)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_3GPP)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_3GPP2)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_IMS)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_3GPP)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_3GPP2)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_IMS)); }",70ebe125b66b54408f2642077cd1edb5ef66bf19,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSanity() { assertNotNull(mUiccControllerUT.getUiccCard(0)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_3GPP)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_3GPP2)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_IMS)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_3GPP)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_3GPP2)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_IMS)); }",ac3f182181e356c04a5c26e6cf248e55258cd1ec,"@org.junit.Test @android.support.test.filters.SmallTest public void testSanity() { verify(mSimulatedCommandsVerifier, times(1)).getIccCardStatus(any(android.os.Message.class)); verify(mSimulatedCommandsVerifier, times(1)).getIccSlotsStatus(any(android.os.Message.class)); com.android.internal.telephony.uicc.UiccSlot uiccSlot = mUiccControllerUT.getUiccSlot(0); com.android.internal.telephony.uicc.UiccCard uiccCard = mUiccControllerUT.getUiccCardForSlot(0); assertNotNull(uiccSlot); assertEquals(uiccCard, mUiccControllerUT.getUiccCardForPhone(0)); assertNotNull(mUiccControllerUT.getUiccCard(0)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_3GPP)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_3GPP2)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_IMS)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_3GPP)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_3GPP2)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_IMS)); }",cf99edbcf140ea8c48d55ec7e3f58ec6a803d86f,2018-01-11 22:43:08,7
581468,tests_telephonytests_src_com_android_internal_telephony_uicc_UiccControllerTest.java,"@org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(this.getClass().getSimpleName()); doReturn(com.android.internal.telephony.uicc.UiccControllerTest.PHONE_COUNT).when(mTelephonyManager).getPhoneCount(); doReturn(com.android.internal.telephony.uicc.UiccControllerTest.PHONE_COUNT).when(mTelephonyManager).getSimCount(); replaceInstance(com.android.internal.telephony.uicc.UiccController.class, ""mInstance"", null, null); mIccCardStatus.mApplications = new com.android.internal.telephony.uicc.IccCardApplicationStatus[]{ }; mIccCardStatus.mCdmaSubscriptionAppIndex = mIccCardStatus.mImsSubscriptionAppIndex = mIccCardStatus.mGsmUmtsSubscriptionAppIndex = -1; mSimulatedCommands.setIccCardStatus(mIccCardStatus); mUiccControllerHandlerThread = new com.android.internal.telephony.uicc.UiccControllerTest.UiccControllerHandlerThread(TAG); mUiccControllerHandlerThread.start(); waitUntilReady(); com.android.internal.telephony.TelephonyTestUtils.waitForMs(100); }",d57eeb1c66ca34aef523de5ed1a5e7ab3fd34367,"@org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(this.getClass().getSimpleName()); doReturn(com.android.internal.telephony.uicc.UiccControllerTest.PHONE_COUNT).when(mTelephonyManager).getPhoneCount(); doReturn(com.android.internal.telephony.uicc.UiccControllerTest.PHONE_COUNT).when(mTelephonyManager).getSimCount(); replaceInstance(com.android.internal.telephony.uicc.UiccController.class, ""mInstance"", null, null); mIccCardStatus.mApplications = new com.android.internal.telephony.uicc.IccCardApplicationStatus[]{ }; mIccCardStatus.mCdmaSubscriptionAppIndex = mIccCardStatus.mImsSubscriptionAppIndex = mIccCardStatus.mGsmUmtsSubscriptionAppIndex = -1; mSimulatedCommands.setIccCardStatus(mIccCardStatus); mIccCardStatus.physicalSlotIndex = UiccController.INVALID_SLOT_ID; mUiccControllerHandlerThread = new com.android.internal.telephony.uicc.UiccControllerTest.UiccControllerHandlerThread(TAG); mUiccControllerHandlerThread.start(); waitUntilReady(); com.android.internal.telephony.TelephonyTestUtils.waitForMs(100); }",ba11ee8576adbec77ec816ad48ab92352c871d8b,"@org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(this.getClass().getSimpleName()); doReturn(com.android.internal.telephony.uicc.UiccControllerTest.PHONE_COUNT).when(mTelephonyManager).getPhoneCount(); doReturn(com.android.internal.telephony.uicc.UiccControllerTest.PHONE_COUNT).when(mTelephonyManager).getSimCount(); mContextFixture.putIntResource(com.android.internal.R.integer.config_num_physical_slots, 1); replaceInstance(com.android.internal.telephony.uicc.UiccController.class, ""mInstance"", null, null); mIccCardStatus.mApplications = new com.android.internal.telephony.uicc.IccCardApplicationStatus[]{ }; mIccCardStatus.mCdmaSubscriptionAppIndex = mIccCardStatus.mImsSubscriptionAppIndex = mIccCardStatus.mGsmUmtsSubscriptionAppIndex = -1; mSimulatedCommands.setIccCardStatus(mIccCardStatus); mIccCardStatus.physicalSlotIndex = UiccController.INVALID_SLOT_ID; mUiccControllerHandlerThread = new com.android.internal.telephony.uicc.UiccControllerTest.UiccControllerHandlerThread(TAG); mUiccControllerHandlerThread.start(); waitUntilReady(); com.android.internal.telephony.TelephonyTestUtils.waitForMs(100); }",687aa36a6577bcc12bf569774c1e19ddb2480f13,2018-01-11 22:43:08,7
581468,src_java_com_android_internal_telephony_RIL.java,"@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SLOT_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.getSimSlotsStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getIccSlotStatus"", e); } } } }",87a9705b856960cf9693f876c96f62f70c4d5d3c,"@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); riljLog(""getIccSlotsStatus""); if (radioProxy != null) { riljLog(""getIccSlotsStatus: radioProxy != null""); android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { riljLog(""getIccSlotsStatus: radioProxy12 == null""); if (result != null) { riljLog(""getIccSlotsStatus: result != null""); android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SLOT_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.getSimSlotsStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getIccSlotStatus"", e); } } } }",2ebe1bd39d0b63592cb96843c0999b5cd6c82868,"@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SLOT_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.getSimSlotsStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getIccSlotStatus"", e); } } } }",87a9705b856960cf9693f876c96f62f70c4d5d3c,2018-01-11 22:43:08,7
560062,UID_src_com_android_tests_connectivity_uid_ConnectivityTestActivity.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void downloadData(android.os.Bundle extras, android.content.Context context) { if (extras == null) return; java.lang.String url; url = extras.getString(com.android.tests.connectivity.uid.ConnectivityTestActivity.URL); android.util.Log.e(com.android.tests.connectivity.uid.ConnectivityTestActivity.TAG, (""URL IS: "" + url)); checkAndGrantRuntimePermissions(context); httpDownloadFile(url); }",eaf744c620c5f5717dc3c211e6b11c2f5cc44ba9,"private void downloadData(android.os.Bundle extras) { if (extras == null) return; java.lang.String url = extras.getString(com.android.tests.connectivity.uid.ConnectivityTestActivity.URL); android.util.Log.d(com.android.tests.connectivity.uid.ConnectivityTestActivity.TAG, (""URL IS: "" + url)); android.app.DownloadManager.Request request = new android.app.DownloadManager.Request(android.net.Uri.parse(url)); request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED); java.lang.String name = android.webkit.URLUtil.guessFileName(url, null, android.webkit.MimeTypeMap.getFileExtensionFromUrl(url)); request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, name); mDownloadManager.enqueue(request); }",1ea971160957632a4c446727f89b5f2d28373663,2018-01-11 23:06:29,2
560062,UID_src_com_android_tests_connectivity_uid_ConnectivityTestActivity.java,"public void onResume() { super.onResume(); boolean conn = checkNow(this.getApplicationContext()); android.content.Intent returnIntent = new android.content.Intent(); returnIntent.putExtra(com.android.tests.connectivity.uid.ConnectivityTestActivity.RESULT, conn); setResult(com.android.tests.connectivity.uid.RESULT_OK, returnIntent); finish(); }",fcedbb35418385ee3c64693af6d450e193ca9583,"public void onResume() { super.onResume(); boolean conn = checkNow(this.getApplicationContext()); android.content.Intent returnIntent = new android.content.Intent(); returnIntent.putExtra(com.android.tests.connectivity.uid.ConnectivityTestActivity.RESULT, conn); setResult(com.android.tests.connectivity.uid.RESULT_OK, returnIntent); android.os.Bundle extras = getIntent().getExtras(); downloadData(extras, this.getApplicationContext()); finish(); }",1c28c26840d7ec93117d91defb2f970c2c7536cb,"public void onResume() { super.onResume(); boolean conn = checkNow(); android.content.Intent returnIntent = new android.content.Intent(); returnIntent.putExtra(com.android.tests.connectivity.uid.ConnectivityTestActivity.RESULT, conn); setResult(com.android.tests.connectivity.uid.RESULT_OK, returnIntent); android.os.Bundle extras = getIntent().getExtras(); downloadData(extras); finish(); }",aaf04f9a1c5527208bf64f7df8c81fcd8d924e75,2018-01-11 23:06:29,2
565717,tests_tests_systemui_src_android_systemui_cts_LightBarTests.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean isRunningInVR() { final android.content.Context context = android.support.test.InstrumentationRegistry.getTargetContext(); if (((context.getResources().getConfiguration().uiMode) & (android.content.res.Configuration.UI_MODE_TYPE_MASK)) == (android.content.res.Configuration.UI_MODE_TYPE_VR_HEADSET)) { return true; } return false; },12fe0f266f9a9bac907d9f53725bb152a4224946,private boolean isRunningInVR() { final android.content.Context context = android.support.test.InstrumentationRegistry.getContext(); android.content.res.Configuration config = context.getResources().getConfiguration(); return ((config.uiMode) & android.systemui.cts.android.content.res.Configuration) == android.systemui.cts.android.content.res.Configuration; },96be2c2e92bbf5161f13792d95a3770e8e1b78af,2018-01-12 00:12:14,7
571937,hostsidetests_services_activityandwindowmanager_util_src_android_server_cts_ActivityManagerTestBase.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,protected boolean supportsKeyguard() throws com.android.tradefed.device.DeviceNotAvailableException { return (isHandheld()) && (!(isUiModeLockedToVrHeadset())); },ff87206302c727634010a0071c7a07fdf6490732,"protected boolean supportsKeyguard() throws com.android.tradefed.device.DeviceNotAvailableException { return ((!(hasDeviceFeature(""android.software.leanback""))) && (!(hasDeviceFeature(""android.hardware.type.watch"")))) && (!(isUiModeLockedToVrHeadset())); }",3a1e41f97cd44344b6cb9eb63eaf4356ba354765,2018-01-12 00:13:23,6
564862,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerConfigChangeTests.java,"private void testChangeFontScale(java.lang.String activityName, boolean relaunch) throws java.lang.Exception { launchActivity(activityName); final java.lang.String[] waitForActivitiesVisible = new java.lang.String[]{ activityName }; mAmWmState.computeState(mDevice, waitForActivitiesVisible); setFontScale(1.0F); mAmWmState.computeState(mDevice, waitForActivitiesVisible); final int densityDpi = getGlobalDensityDpi(); for (float fontScale = 0.85F; fontScale <= 1.3F; fontScale += 0.15F) { final java.lang.String logSeparator = clearLogcat(); setFontScale(fontScale); mAmWmState.computeState(mDevice, waitForActivitiesVisible); assertRelaunchOrConfigChanged(activityName, (relaunch ? 1 : 0), (relaunch ? 0 : 1), logSeparator); assertExpectedFontPixelSize(activityName, android.server.cts.ActivityManagerConfigChangeTests.scaledPixelsToPixels(android.server.cts.ActivityManagerConfigChangeTests.EXPECTED_FONT_SIZE_SP, fontScale, densityDpi), logSeparator); } }",e198b25f0b86b453dc0fa11b9a11378cb64887dc,"private void testChangeFontScale(java.lang.String activityName, boolean relaunch) throws java.lang.Exception { java.lang.String logSeparator = clearLogcat(); launchActivity(activityName); final java.lang.String[] waitForActivitiesVisible = new java.lang.String[]{ activityName }; mAmWmState.computeState(mDevice, waitForActivitiesVisible); setFontScale(1.0F); mAmWmState.computeState(mDevice, waitForActivitiesVisible); final int densityDpi = getGlobalDensityDpi(activityName, logSeparator); for (float fontScale = 0.85F; fontScale <= 1.3F; fontScale += 0.15F) { logSeparator = clearLogcat(); setFontScale(fontScale); mAmWmState.computeState(mDevice, waitForActivitiesVisible); assertRelaunchOrConfigChanged(activityName, (relaunch ? 1 : 0), (relaunch ? 0 : 1), logSeparator); assertExpectedFontPixelSize(activityName, android.server.cts.ActivityManagerConfigChangeTests.scaledPixelsToPixels(android.server.cts.ActivityManagerConfigChangeTests.EXPECTED_FONT_SIZE_SP, fontScale, densityDpi), logSeparator); } }",c15ace0b1dbfb497b10b83927786057cc488e854,"private void testChangeFontScale(java.lang.String activityName, boolean relaunch) throws java.lang.Exception { setFontScale(1.0F); java.lang.String logSeparator = clearLogcat(); launchActivity(activityName); final java.lang.String[] waitForActivitiesVisible = new java.lang.String[]{ activityName }; mAmWmState.computeState(mDevice, waitForActivitiesVisible); final int densityDpi = getActivityDensityDpi(activityName, logSeparator); for (float fontScale = 0.85F; fontScale <= 1.3F; fontScale += 0.15F) { logSeparator = clearLogcat(); setFontScale(fontScale); mAmWmState.computeState(mDevice, waitForActivitiesVisible); assertRelaunchOrConfigChanged(activityName, (relaunch ? 1 : 0), (relaunch ? 0 : 1), logSeparator); assertExpectedFontPixelSize(activityName, android.server.cts.ActivityManagerConfigChangeTests.scaledPixelsToPixels(android.server.cts.ActivityManagerConfigChangeTests.EXPECTED_FONT_SIZE_SP, fontScale, densityDpi), logSeparator); } }",7d62dd4b0829f82b040816f6d44a8d22279b6a8b,2018-01-12 01:31:26,4
564862,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerConfigChangeTests.java,"private int getGlobalDensityDpi() throws java.lang.Exception { final java.lang.String result = getDevice().executeShellCommand(""am get-config""); final java.lang.String[] lines = result.split(""\n""); if ((lines.length) < 1) { throw new java.lang.IllegalStateException((""Invalid config returned from device: "" + result)); } final java.util.regex.Matcher matcher = android.server.cts.ActivityManagerConfigChangeTests.sDeviceDensityPattern.matcher(lines[0]); if (!(matcher.matches())) { throw new java.lang.IllegalStateException((""Invalid config returned from device: "" + (lines[0]))); } switch (matcher.group(1)) { case ""l"" : return 120; case ""m"" : return 160; case ""tv"" : return 213; case ""h"" : return 240; case ""xh"" : return 320; case ""xxh"" : return 480; case ""xxxh"" : return 640; } return java.lang.Integer.parseInt(matcher.group(1)); }",3ae0d9c356603477cbfa611483ec81ea30e851d4,"private int getGlobalDensityDpi(java.lang.String activityName, java.lang.String logSeparator) throws java.lang.Exception { final java.lang.String[] lines = getDeviceLogsForComponent(activityName, logSeparator); for (int i = (lines.length) - 1; i >= 0; i--) { final java.lang.String line = lines[i].trim(); final java.util.regex.Matcher matcher = android.server.cts.ActivityManagerConfigChangeTests.sDeviceDensityPattern.matcher(line); if (matcher.matches()) { return java.lang.Integer.parseInt(matcher.group(2)); } } fail((""No fontActivityDpi reported from activity "" + activityName)); return -1; }",b6aca3008f614521536ae189a1aa97385aecfe2f,"private int getActivityDensityDpi(java.lang.String activityName, java.lang.String logSeparator) throws java.lang.Exception { final java.lang.String[] lines = getDeviceLogsForComponent(activityName, logSeparator); for (int i = (lines.length) - 1; i >= 0; i--) { final java.lang.String line = lines[i].trim(); final java.util.regex.Matcher matcher = android.server.cts.ActivityManagerConfigChangeTests.sDeviceDensityPattern.matcher(line); if (matcher.matches()) { return java.lang.Integer.parseInt(matcher.group(2)); } } fail((""No fontActivityDpi reported from activity "" + activityName)); return -1; }",a4edc96d17cf3fe4e52e66dddb09eff8561076ca,2018-01-12 01:31:26,4
564471,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerAppConfigurationTests.java,"@android.platform.test.annotations.Presubmit public void testFullscreenAppOrientationRequests() throws java.lang.Exception { launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); assertEquals(""Fullscreen app requested portrait orientation"", 1, mAmWmState.getWmState().getLastOrientation()); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME, true); assertEquals(""Fullscreen app requested landscape orientation"", 0, mAmWmState.getWmState().getLastOrientation()); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); assertEquals(""Fullscreen app requested portrait orientation"", 1, mAmWmState.getWmState().getLastOrientation()); }",663f309121ffc9c210d2f1331f9af8649d1aee2c,"@android.platform.test.annotations.Presubmit public void testFullscreenAppOrientationRequests() throws java.lang.Exception { java.lang.String logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); android.server.cts.ReportedSizes initialReportedSizes = getLastReportedSizesForActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, logSeparator); assertEquals(""portrait activity should be in portrait"", 1, initialReportedSizes.orientation); logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME, true); initialReportedSizes = getLastReportedSizesForActivity(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME, logSeparator); assertEquals(""landscape activity should be in landscape"", 2, initialReportedSizes.orientation); logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); initialReportedSizes = getLastReportedSizesForActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, logSeparator); assertEquals(""portrait activity should be in portrait"", 1, initialReportedSizes.orientation); logSeparator = clearLogcat(); }",bbd7fe5d4dc82fc78278bfab03038c1365a47b2a,"@android.platform.test.annotations.Presubmit public void testFullscreenAppOrientationRequests() throws java.lang.Exception { java.lang.String logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); android.server.cts.ReportedSizes reportedSizes = getLastReportedSizesForActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, logSeparator); assertEquals(""portrait activity should be in portrait"", 1, reportedSizes.orientation); logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME, true); reportedSizes = getLastReportedSizesForActivity(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME, logSeparator); assertEquals(""landscape activity should be in landscape"", 2, reportedSizes.orientation); logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); reportedSizes = getLastReportedSizesForActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, logSeparator); assertEquals(""portrait activity should be in portrait"", 1, reportedSizes.orientation); logSeparator = clearLogcat(); }",4bb2d8fc7bc3a4981c413bec5da41315fc1addd6,2018-01-12 04:13:11,3
576543,luni_src_test_java_libcore_java_lang_StringTest.java,"public void test_23831() throws java.lang.Exception { byte[] bytes = new byte[]{ ((byte) (245)), ((byte) (169)), ((byte) (234)), ((byte) (33)) }; java.lang.String expected = ""\ufffd\ufffd!""; java.nio.charset.CharsetDecoder decoder = java.nio.charset.Charset.forName(""UTF-8"").newDecoder(); decoder.onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE); assertEquals(expected, decoder.decode(java.nio.ByteBuffer.wrap(bytes)).toString()); assertEquals(expected, new java.lang.String(bytes, ""UTF-8"")); }",59f1be4658e871f45c7a9402cfde266088a0d32b,"public void test_23831() throws java.lang.Exception { byte[] bytes = new byte[]{ ((byte) (245)), ((byte) (169)), ((byte) (234)), ((byte) (33)) }; java.lang.String expected = ""\ufffd\ufffd\ufffd!""; java.nio.charset.CharsetDecoder decoder = java.nio.charset.Charset.forName(""UTF-8"").newDecoder(); decoder.onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE); assertEquals(expected, decoder.decode(java.nio.ByteBuffer.wrap(bytes)).toString()); assertEquals(expected, new java.lang.String(bytes, ""UTF-8"")); }",f3154d9e829f3bf3179dea023986e5cc92f6d9c9,"public void test_69599767() throws java.lang.Exception { byte[] bytes = new byte[]{ ((byte) (245)), ((byte) (169)), ((byte) (234)), ((byte) (33)) }; java.lang.String expected = ""\ufffd\ufffd\ufffd!""; java.nio.charset.CharsetDecoder decoder = java.nio.charset.Charset.forName(""UTF-8"").newDecoder(); decoder.onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE); assertEquals(expected, decoder.decode(java.nio.ByteBuffer.wrap(bytes)).toString()); assertEquals(expected, new java.lang.String(bytes, ""UTF-8"")); }",cb0abbf37765ba753b7b305806cab1bd3e5844d5,2018-01-12 10:22:21,14
564188,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerAssistantStackTests.java,"public void testAssistantStackZOrder() throws java.lang.Exception { if ((!(supportsPip())) || (!(supportsSplitScreenMultiWindow()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ENTER_PIP, ""true""); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.PINNED_STACK_ID); mAmWmState.assertContainsStack(""Must contain pinned stack."", android.server.cts.PINNED_STACK_ID); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack(""Must contain fullscreen stack."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack(""Must contain docked stack."", android.server.cts.DOCKED_STACK_ID); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); assertAssistantStackExists(); mAmWmState.assertFrontStack(""Pinned stack should be on top."", android.server.cts.PINNED_STACK_ID); mAmWmState.assertFocusedStack(""Assistant stack should be focused."", android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }",4719ad9751141b4d30832c08c22af8ad16cf49b7,"public void testAssistantStackZOrder() throws java.lang.Exception { if ((!(supportsPip())) || (!(supportsSplitScreenMultiWindow()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ENTER_PIP, ""true""); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.PINNED_STACK_ID); mAmWmState.assertContainsStack(""Must contain pinned stack."", android.server.cts.PINNED_STACK_ID); launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_DISPLAY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack(""Must contain fullscreen stack."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack(""Must contain docked stack."", android.server.cts.DOCKED_STACK_ID); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); assertAssistantStackExists(); mAmWmState.assertFrontStack(""Pinned stack should be on top."", android.server.cts.PINNED_STACK_ID); mAmWmState.assertFocusedStack(""Assistant stack should be focused."", android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }",0ee891d26e4ac7dd33a6a640606d66394fc46b5d,"public void testAssistantStackZOrder() throws java.lang.Exception { if (((!(supportsPip())) || (!(supportsSplitScreenMultiWindow()))) || (!(assistantRunsOnPrimaryDisplay()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ENTER_PIP, ""true""); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.PINNED_STACK_ID); mAmWmState.assertContainsStack(""Must contain pinned stack."", android.server.cts.PINNED_STACK_ID); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack(""Must contain fullscreen stack."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack(""Must contain docked stack."", android.server.cts.DOCKED_STACK_ID); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); assertAssistantStackExists(); mAmWmState.assertFrontStack(""Pinned stack should be on top."", android.server.cts.PINNED_STACK_ID); mAmWmState.assertFocusedStack(""Assistant stack should be focused."", android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }",70a888a34581e5c8e3dd0da71483e9f5995af426,2018-01-12 17:24:20,9
564188,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerAssistantStackTests.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void setUp() throws java.lang.Exception { super.setUp(); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStack assistantStack = mAmWmState.getAmState().getStackById(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_DISPLAY = assistantStack.mDisplayId; disableAssistant(); }",4a11dfd3487af4c118be8962746e204349fa15b1,"public void setUp() throws java.lang.Exception { super.setUp(); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStack assistantStack = mAmWmState.getAmState().getStackById(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId = assistantStack.mDisplayId; disableAssistant(); }",388e0b9d81d118c589ffa424668c9cdf6924e783,2018-01-12 17:24:20,9
564188,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerAssistantStackTests.java,"public void testAssistantStackFinishToPreviousApp() throws java.lang.Exception { launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF, ""true""); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerState.STATE_RESUMED); mAmWmState.assertFocusedActivity(""TestActivity should be resumed"", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertFrontStack(""Fullscreen stack should be on top."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedStack(""Fullscreen stack should be focused."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); }",acc3ec43ef3fad65c96d04cf4455588997a116cf,"public void testAssistantStackFinishToPreviousApp() throws java.lang.Exception { launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_DISPLAY); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF, ""true""); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerState.STATE_RESUMED); mAmWmState.assertFocusedActivity(""TestActivity should be resumed"", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertFrontStack(""Fullscreen stack should be on top."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedStack(""Fullscreen stack should be focused."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); }",91fe3916f041c7098d79e946971f85eff1427274,"public void testAssistantStackFinishToPreviousApp() throws java.lang.Exception { launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF, ""true""); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerState.STATE_RESUMED); mAmWmState.assertFocusedActivity(""TestActivity should be resumed"", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertFrontStack(""Fullscreen stack should be on top."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedStack(""Fullscreen stack should be focused."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); }",699f7273d2354cd4da836b49376e80fb21196630,2018-01-12 17:24:20,9
564188,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerAssistantStackTests.java,"public void testAssistantStackLaunchNewTaskWithDockedStack() throws java.lang.Exception { if (!(supportsSplitScreenMultiWindow())) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack(""Must contain fullscreen stack."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack(""Must contain docked stack."", android.server.cts.DOCKED_STACK_ID); enableAssistant(); assertAssistantStackCanLaunchAndReturnFromNewTask(); disableAssistant(); }",5ab45cf844895374a7e38a5cb362191a358968d3,"public void testAssistantStackLaunchNewTaskWithDockedStack() throws java.lang.Exception { if (!(supportsSplitScreenMultiWindow())) return; launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_DISPLAY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack(""Must contain fullscreen stack."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack(""Must contain docked stack."", android.server.cts.DOCKED_STACK_ID); enableAssistant(); assertAssistantStackCanLaunchAndReturnFromNewTask(); disableAssistant(); }",24d23b927a9b7ddb87eab44e791ce462754f4bc4,"public void testAssistantStackLaunchNewTaskWithDockedStack() throws java.lang.Exception { if ((!(supportsSplitScreenMultiWindow())) || (!(assistantRunsOnPrimaryDisplay()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack(""Must contain fullscreen stack."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack(""Must contain docked stack."", android.server.cts.DOCKED_STACK_ID); enableAssistant(); assertAssistantStackCanLaunchAndReturnFromNewTask(); disableAssistant(); }",3bc1fe1e5482268876c8ddd3f7f6942964dcf4ca,2018-01-12 17:24:20,9
559061,tests_vr_src_android_vr_cts_VrSetFIFOThreadTest.java,"public void testSetVrThreadAPISuccess() throws java.lang.Throwable { setIntent(1, 1, 0, 0); android.content.ComponentName requestedComponent = new android.content.ComponentName(mContext, com.android.cts.verifier.vr.MockVrListenerService.class); Settings.Secure.putString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS, requestedComponent.flattenToString()); mActivity = getActivity(); assertTrue(mActivity.waitForFrameDrawn()); if (mActivity.getPackageManager().hasSystemFeature(PackageManager.FEATURE_VR_MODE_HIGH_PERFORMANCE)) { int vr_thread = 0; int policy = 0; mActivity.setVrModeEnabled(true, requestedComponent); vr_thread = java.lang.Process.myTid(); mActivityManager = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); mActivityManager.setVrThread(vr_thread); policy = ((int) (java.lang.Process.getThreadScheduler(vr_thread))); android.util.Log.e(android.vr.cts.VrSetFIFOThreadTest.TAG, (""scheduling policy: "" + policy)); assertEquals(((android.vr.cts.VrSetFIFOThreadTest.SCHED_FIFO) | (android.vr.cts.VrSetFIFOThreadTest.SCHED_RESET_ON_FORK)), policy); } }",7c54f1f26bfbbd9de7e2534741bde553479908fa,"public void testSetVrThreadAPISuccess() throws java.lang.Throwable { if (mIsVrHeadset) { return; } setIntent(1, 1, 0, 0); android.content.ComponentName requestedComponent = new android.content.ComponentName(mContext, com.android.cts.verifier.vr.MockVrListenerService.class); Settings.Secure.putString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS, requestedComponent.flattenToString()); mActivity = getActivity(); assertTrue(mActivity.waitForFrameDrawn()); if (mActivity.getPackageManager().hasSystemFeature(PackageManager.FEATURE_VR_MODE_HIGH_PERFORMANCE)) { int vr_thread = 0; int policy = 0; mActivity.setVrModeEnabled(true, requestedComponent); vr_thread = java.lang.Process.myTid(); mActivityManager = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); mActivityManager.setVrThread(vr_thread); policy = ((int) (java.lang.Process.getThreadScheduler(vr_thread))); android.util.Log.e(android.vr.cts.VrSetFIFOThreadTest.TAG, (""scheduling policy: "" + policy)); assertEquals(((android.vr.cts.VrSetFIFOThreadTest.SCHED_FIFO) | (android.vr.cts.VrSetFIFOThreadTest.SCHED_RESET_ON_FORK)), policy); } }",a176dfd4a4aa1b0d8061a57283bf79862a47940e,"public void testSetVrThreadAPISuccess() throws java.lang.Throwable { if (mPersistentVrModeEnabled) { return; } setIntent(1, 1, 0, 0); android.content.ComponentName requestedComponent = new android.content.ComponentName(mContext, com.android.cts.verifier.vr.MockVrListenerService.class); Settings.Secure.putString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS, requestedComponent.flattenToString()); mActivity = getActivity(); assertTrue(mActivity.waitForFrameDrawn()); if (mActivity.getPackageManager().hasSystemFeature(PackageManager.FEATURE_VR_MODE_HIGH_PERFORMANCE)) { int vr_thread = 0; int policy = 0; mActivity.setVrModeEnabled(true, requestedComponent); vr_thread = java.lang.Process.myTid(); mActivityManager = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); mActivityManager.setVrThread(vr_thread); policy = ((int) (java.lang.Process.getThreadScheduler(vr_thread))); android.util.Log.e(android.vr.cts.VrSetFIFOThreadTest.TAG, (""scheduling policy: "" + policy)); assertEquals(((android.vr.cts.VrSetFIFOThreadTest.SCHED_FIFO) | (android.vr.cts.VrSetFIFOThreadTest.SCHED_RESET_ON_FORK)), policy); } }",bda56641b51fb3d183af27240d246a4cd96ed799,2018-01-12 19:08:50,5
559061,tests_vr_src_android_vr_cts_VrSetFIFOThreadTest.java,"public void testSetVrThreadAPIFailure() throws java.lang.Throwable { setIntent(1, 1, 0, 0); android.content.ComponentName requestedComponent = new android.content.ComponentName(mContext, com.android.cts.verifier.vr.MockVrListenerService.class); Settings.Secure.putString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS, requestedComponent.flattenToString()); mActivity = getActivity(); assertTrue(mActivity.waitForFrameDrawn()); if (mActivity.getPackageManager().hasSystemFeature(PackageManager.FEATURE_VR_MODE_HIGH_PERFORMANCE)) { int vr_thread = 0; int policy = 0; mActivity.setVrModeEnabled(false, requestedComponent); vr_thread = java.lang.Process.myTid(); mActivityManager = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); mActivityManager.setVrThread(vr_thread); policy = ((int) (java.lang.Process.getThreadScheduler(vr_thread))); android.util.Log.e(android.vr.cts.VrSetFIFOThreadTest.TAG, (""scheduling policy: "" + policy)); assertEquals(android.vr.cts.VrSetFIFOThreadTest.SCHED_OTHER, policy); } }",1fc87c3bede1d92e92b5143803e95c73b8e7d95a,"public void testSetVrThreadAPIFailure() throws java.lang.Throwable { if (mIsVrHeadset) { return; } setIntent(1, 1, 0, 0); android.content.ComponentName requestedComponent = new android.content.ComponentName(mContext, com.android.cts.verifier.vr.MockVrListenerService.class); Settings.Secure.putString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS, requestedComponent.flattenToString()); mActivity = getActivity(); assertTrue(mActivity.waitForFrameDrawn()); if (mActivity.getPackageManager().hasSystemFeature(PackageManager.FEATURE_VR_MODE_HIGH_PERFORMANCE)) { int vr_thread = 0; int policy = 0; mActivity.setVrModeEnabled(false, requestedComponent); vr_thread = java.lang.Process.myTid(); mActivityManager = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); mActivityManager.setVrThread(vr_thread); policy = ((int) (java.lang.Process.getThreadScheduler(vr_thread))); android.util.Log.e(android.vr.cts.VrSetFIFOThreadTest.TAG, (""scheduling policy: "" + policy)); assertEquals(android.vr.cts.VrSetFIFOThreadTest.SCHED_OTHER, policy); } }",4b61a2abe46b9bf5d255ab9cfac89ea086051b8f,"public void testSetVrThreadAPIFailure() throws java.lang.Throwable { if (mPersistentVrModeEnabled) { return; } setIntent(1, 1, 0, 0); android.content.ComponentName requestedComponent = new android.content.ComponentName(mContext, com.android.cts.verifier.vr.MockVrListenerService.class); Settings.Secure.putString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS, requestedComponent.flattenToString()); mActivity = getActivity(); assertTrue(mActivity.waitForFrameDrawn()); if (mActivity.getPackageManager().hasSystemFeature(PackageManager.FEATURE_VR_MODE_HIGH_PERFORMANCE)) { int vr_thread = 0; int policy = 0; mActivity.setVrModeEnabled(false, requestedComponent); vr_thread = java.lang.Process.myTid(); mActivityManager = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); mActivityManager.setVrThread(vr_thread); policy = ((int) (java.lang.Process.getThreadScheduler(vr_thread))); android.util.Log.e(android.vr.cts.VrSetFIFOThreadTest.TAG, (""scheduling policy: "" + policy)); assertEquals(android.vr.cts.VrSetFIFOThreadTest.SCHED_OTHER, policy); } }",f0624339efaee7a80f697c2d7333082a1d1e6ab0,2018-01-12 19:08:50,5
559061,tests_vr_src_android_vr_cts_VrSetFIFOThreadTest.java,"@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getTargetContext(); mOldVrListener = Settings.Secure.getString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS); }",2029777bb2d965effe151b9e8e308685c8a53e7f,"@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getTargetContext(); mOldVrListener = Settings.Secure.getString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS); mIsVrHeadset = (""1"".equals(android.os.SystemProperties.get(android.vr.cts.VrSetFIFOThreadTest.VR_STANDALONE_PROPERTY, ""0""))) ? true : false; }",ed361a9c015d48675205632095318ef79fb4cbf7,"@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getTargetContext(); mOldVrListener = Settings.Secure.getString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS); java.lang.String result = com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.vr.cts.VrSetFIFOThreadTest.DUMP_VRMANAGER); mDumpLines.clear(); java.util.Collections.addAll(mDumpLines, result.split(""\\n"")); if (""enabled"".equals(parseVrManagerDumpsys(mDumpLines))) { mPersistentVrModeEnabled = true; } }",d735de79218feed0ceddbff290ee460ceb76e08e,2018-01-12 19:08:50,5
562757,Common_src_com_googlecode_android_scripting_facade_ConnectivityManagerFacade.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Get network stats - Rx bytes for UID"") public long connectivityQueryDetailsForUidRxBytes(java.lang.String subscriberId, java.lang.Long startTime, java.lang.Long endTime, java.lang.Integer uid, java.lang.Integer connType) throws android.os.RemoteException, java.lang.SecurityException { long rxBytes = 0; android.app.usage.NetworkStats netStats = mNetStatsManager.queryDetailsForUid(connType, subscriberId, startTime, endTime, uid); android.app.usage.NetworkStats.Bucket bucket = new android.app.usage.NetworkStats.Bucket(); while ((netStats.hasNextBucket()) && (netStats.getNextBucket(bucket))) rxBytes += bucket.getRxBytes(); netStats.close(); return rxBytes; }",8eab4d354a0d952877eb446e01329f15b944570e,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Get network stats for UID - Rx bytes"") public long connectivityQueryDetailsForUidRxBytes(java.lang.Integer connType, java.lang.String subscriberId, java.lang.Long startTime, java.lang.Long endTime, java.lang.Integer uid) throws android.os.RemoteException, java.lang.SecurityException { long rxBytes = 0; android.app.usage.NetworkStats netStats = mNetStatsManager.queryDetailsForUid(connType, subscriberId, startTime, endTime, uid); android.app.usage.NetworkStats.Bucket bucket = new android.app.usage.NetworkStats.Bucket(); while ((netStats.hasNextBucket()) && (netStats.getNextBucket(bucket))) { rxBytes += bucket.getRxBytes(); } netStats.close(); return rxBytes; }",85d1c6bf9053efbf0da4ec9eabc273adafdd3ba0,2018-01-12 20:23:05,3
562757,Common_src_com_googlecode_android_scripting_facade_ConnectivityManagerFacade.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Get network stats for UID"") public long connectivityQueryDetailsForUid(java.lang.String subscriberId, java.lang.Long startTime, java.lang.Long endTime, java.lang.Integer uid, java.lang.Integer connType) throws android.os.RemoteException, java.lang.SecurityException { android.app.usage.NetworkStats netStats = mNetStatsManager.queryDetailsForUid(connType, subscriberId, startTime, endTime, uid); long totalData = 0; android.app.usage.NetworkStats.Bucket bucket = new android.app.usage.NetworkStats.Bucket(); while ((netStats.hasNextBucket()) && (netStats.getNextBucket(bucket))) totalData += (bucket.getTxBytes()) + (bucket.getRxBytes()); netStats.close(); return totalData; }",8da144dcd61a43511a32d42e543fcbea02360acd,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Get network stats for UID"") public long connectivityQueryDetailsForUid(java.lang.Integer connType, java.lang.String subscriberId, java.lang.Long startTime, java.lang.Long endTime, java.lang.Integer uid) throws android.os.RemoteException, java.lang.SecurityException { long totalData = 0; android.app.usage.NetworkStats netStats = mNetStatsManager.queryDetailsForUid(connType, subscriberId, startTime, endTime, uid); android.app.usage.NetworkStats.Bucket bucket = new android.app.usage.NetworkStats.Bucket(); while ((netStats.hasNextBucket()) && (netStats.getNextBucket(bucket))) { totalData += (bucket.getTxBytes()) + (bucket.getRxBytes()); } netStats.close(); return totalData; }",c2da0c9202e5226b07676c90ac4e2c4e1542110d,2018-01-12 20:23:05,3
562757,Common_src_com_googlecode_android_scripting_facade_ApplicationManagerFacade.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Launch activity for result with intent"") public android.content.Intent launchForResultWithIntent(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""intent"") android.content.Intent intent, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""extras"") @com.googlecode.android_scripting.rpc.RpcOptional org.json.JSONObject extras) throws org.json.JSONException { if (extras != null) mAndroidFacade.putExtrasFromJsonObject(extras, intent); return mAndroidFacade.startActivityForResult(intent); }",c9a5e20b8acb9762f8d5f7fea7c5b8a288a38e0b,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Launch activity for result with intent"") public android.content.Intent launchForResultWithIntent(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""intent"") android.content.Intent intent, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""extras"") @com.googlecode.android_scripting.rpc.RpcOptional org.json.JSONObject extras) throws org.json.JSONException { if (extras != null) { mAndroidFacade.putExtrasFromJsonObject(extras, intent); } return mAndroidFacade.startActivityForResult(intent); }",7b1568bf5d652e4c50390294c024973f92e23425,2018-01-12 20:23:05,3
585987,luni_src_test_java_libcore_javax_net_ssl_DefaultHostnameVerifierTest.java,"private boolean verifyWithDomainNamePattern(java.lang.String hostname, java.lang.String pattern) { libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubSSLSession session = new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubSSLSession(); session.peerCertificates = new java.security.cert.Certificate[]{ new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate(((""cn=\"""" + pattern) + ""\"""")) }; boolean resultWhenPatternInCn = verifier.verify(hostname, session); session.peerCertificates = new java.security.cert.Certificate[]{ new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate(""ou=test"").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME, pattern) }; boolean resultWhenPatternInSubjectAltName = verifier.verify(hostname, session); if (resultWhenPatternInCn != resultWhenPatternInSubjectAltName) { fail(((((((((""Different results between pattern in CN and SubjectAltName."" + "" hostname : "") + hostname) + "", pattern: "") + pattern) + "", when pattern in CN: "") + resultWhenPatternInCn) + "", when pattern in SubjectAltName: "") + resultWhenPatternInSubjectAltName)); } return resultWhenPatternInCn; }",a99f7d16208964c717126c9f7879cf3f752e5390,"private boolean verifyWithDomainNamePattern(java.lang.String hostname, java.lang.String pattern) { libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubSSLSession session = new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubSSLSession(); session.peerCertificates = new java.security.cert.Certificate[]{ new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate(((""cn=\"""" + pattern) + ""\"""")) }; boolean resultWhenPatternInCn = verifier.verify(hostname, session); session.peerCertificates = new java.security.cert.Certificate[]{ new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate(""ou=test"").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME, pattern) }; boolean resultWhenPatternInSubjectAltName = verifier.verify(hostname, session); assertFalse(""Verifier should ignore CN."", resultWhenPatternInCn); return resultWhenPatternInSubjectAltName; }",dd358bcb25c49cac416108af6fdf7907a6958d04,"private boolean verifyWithDomainNamePattern(java.lang.String hostname, java.lang.String pattern) { libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubSSLSession session = new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubSSLSession(); session.peerCertificates = new java.security.cert.Certificate[]{ new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate(((""cn=\"""" + pattern) + ""\"""")) }; assertFalse(""Verifier should ignore CN."", verifier.verify(hostname, session)); session.peerCertificates = new java.security.cert.Certificate[]{ new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate(""ou=test"").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME, pattern) }; return verifier.verify(hostname, session); }",f8bac9c172aa69d7c57723f5c541f9f181090dc1,2018-01-12 20:37:13,4
578588,apps_CtsVerifier_src_com_android_cts_verifier_notifications_NotificationListenerVerifierActivity.java,"@java.lang.Override void test() { if ((status) == (READY)) { com.android.cts.verifier.notifications.MockListener.MockListener.snooze(mContext); status = RETEST; } else { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerStatus(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.StatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressor()) == null) { status = PASS; } else { logFail(); status = RETEST; delay(); } } next(); } }); } delay(); }",f5fc977ebc83c592f8babe5d86d3713499b8a28d,"@java.lang.Override void test() { if ((status) == (READY)) { com.android.cts.verifier.notifications.MockListener.MockListener.snooze(mContext); status = RETEST; } else { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerStatus(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.StatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressor()) == null) || (mNm.getEffectsSuppressor().equals(com.android.cts.verifier.notifications.NotificationListenerVerifierActivity.VR_NOTIFICATION_SERVICE))) { status = PASS; } else { logFail(); status = RETEST; delay(); } } next(); } }); } delay(); }",cd6991935afb719a9e7daaf3ee433870770a34c6,"@java.lang.Override void test() { if ((status) == (READY)) { com.android.cts.verifier.notifications.MockListener.MockListener.snooze(mContext); status = RETEST; } else { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerStatus(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.StatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressor()) == null) || (!(mNm.getEffectsSuppressor().equals(MockListener.COMPONENT_NAME)))) { status = PASS; } else { logFail(); status = RETEST; delay(); } } next(); } }); } delay(); }",774240c1ff88412aab8408ce0e8cc5479ad8c6fc,2018-01-12 21:08:18,4
578588,apps_CtsVerifier_src_com_android_cts_verifier_notifications_NotificationListenerVerifierActivity.java,"@java.lang.Override void test() { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerStatus(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.StatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressor()) == null) { status = PASS; } else { status = FAIL; } } next(); } }); delay(); }",b8af1e2fff815765846167b3db1fac8b7ca16558,"@java.lang.Override void test() { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerStatus(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.StatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressor()) == null) || (mNm.getEffectsSuppressor().equals(com.android.cts.verifier.notifications.NotificationListenerVerifierActivity.VR_NOTIFICATION_SERVICE))) { status = PASS; } else { status = FAIL; } } next(); } }); delay(); }",39a75672b49db652b7db38186d52b016ddb093a1,"@java.lang.Override void test() { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerStatus(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.StatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressor()) == null) || (!(mNm.getEffectsSuppressor().equals(MockListener.COMPONENT_NAME)))) { status = PASS; } else { status = FAIL; } } next(); } }); delay(); }",3660b9ccef471a1b8994ecc311b280197a67eaa8,2018-01-12 21:08:18,4
578588,apps_CtsVerifier_src_com_android_cts_verifier_notifications_NotificationListenerVerifierActivity.java,@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressor()) == null) { status = PASS; } else { status = FAIL; } } next(); },55c22923ec252b941208601cf92d8562bc821ac6,@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressor()) == null) || (mNm.getEffectsSuppressor().equals(com.android.cts.verifier.notifications.NotificationListenerVerifierActivity.VR_NOTIFICATION_SERVICE))) { status = PASS; } else { status = FAIL; } } next(); },3ba15c5b3b7371fac7521a5ee82d40a04403e2d7,@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressor()) == null) || (!(mNm.getEffectsSuppressor().equals(MockListener.COMPONENT_NAME)))) { status = PASS; } else { status = FAIL; } } next(); },91690765eb3bdb1d64771230609e673d50b155c0,2018-01-12 21:08:18,4
578588,apps_CtsVerifier_src_com_android_cts_verifier_notifications_NotificationListenerVerifierActivity.java,@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressor()) == null) { status = PASS; } else { logFail(); status = RETEST; delay(); } } next(); },d45c72409786fa9781d71c9bf3c4532d95b5aa74,@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressor()) == null) || (mNm.getEffectsSuppressor().equals(com.android.cts.verifier.notifications.NotificationListenerVerifierActivity.VR_NOTIFICATION_SERVICE))) { status = PASS; } else { logFail(); status = RETEST; delay(); } } next(); },e85e2a7ea0b2f5821598999d8487a0f04c9526ab,@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressor()) == null) || (!(mNm.getEffectsSuppressor().equals(MockListener.COMPONENT_NAME)))) { status = PASS; } else { logFail(); status = RETEST; delay(); } } next(); },4a150bdf251e88a4ed3e8f2eef036f8df7cf12f6,2018-01-12 21:08:18,4
584815,src_java_com_android_internal_telephony_uicc_IccRecords.java,protected boolean getLockedRecordsLoaded() { return ((mRecordsToLoad) == 0) && (mLockedRecordsRequested); },932442e4f649cf8a183e97e479edb1921d91e6fc,protected boolean getLockedRecordsLoaded() { return ((mRecordsToLoad) == 0) && ((mLockedRecordsReqReason) == (com.android.internal.telephony.uicc.IccRecords.LOCKED_RECORDS_REQ_REASON_PIN_LOCKED)); },2f2851081ab0904526b52e0068093b3a0c4884f8,protected boolean getLockedRecordsLoaded() { return ((mRecordsToLoad) == 0) && ((mLockedRecordsReqReason) == (com.android.internal.telephony.uicc.IccRecords.LOCKED_RECORDS_REQ_REASON_LOCKED)); },a62d2cd8cc806f482bc924646d2bd72f7bb3fef8,2018-01-12 21:37:58,3
584815,src_java_com_android_internal_telephony_uicc_SIMRecords.java,"private void onLockedAllRecordsLoaded() { setSimLanguageFromEF(); mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); }",32d1b99702c11457bb295c20637e72ad146a2735,"private void onLockedAllRecordsLoaded() { setSimLanguageFromEF(); if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_PIN_LOCKED)) { mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else { mNetworkLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } }",2629be5a80d621e5006eccffaf018bf8b8c805e8,"private void onLockedAllRecordsLoaded() { setSimLanguageFromEF(); if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_LOCKED)) { mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_NETWORK_LOCKED)) { mNetworkLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else { loge((""onLockedAllRecordsLoaded: unexpected mLockedRecordsReqReason "" + (mLockedRecordsReqReason))); } }",72b71d6d92e6e7792e2376cadcd18117a4f07326,2018-01-12 21:37:58,3
584815,src_java_com_android_internal_telephony_uicc_SIMRecords.java,"private void onLocked() { if (DBG) log(""only fetch EF_LI, EF_PL and EF_ICCID in locked state""); mLockedRecordsRequested = true; loadEfLiAndEfPl(); mFh.loadEFTransparent(com.android.internal.telephony.uicc.EF_ICCID, obtainMessage(com.android.internal.telephony.uicc.SIMRecords.EVENT_GET_ICCID_DONE)); (mRecordsToLoad)++; }",986d93602badb50e12f9cf79267d32da7faaa727,"private void onLocked(int msg) { if (DBG) log(""only fetch EF_LI, EF_PL and EF_ICCID in locked state""); mLockedRecordsReqReason = (msg == (com.android.internal.telephony.uicc.SIMRecords.EVENT_APP_LOCKED)) ? LOCKED_RECORDS_REQ_REASON_PIN_LOCKED : LOCKED_RECORDS_REQ_REASON_NETWORK_LOCKED; loadEfLiAndEfPl(); mFh.loadEFTransparent(com.android.internal.telephony.uicc.EF_ICCID, obtainMessage(com.android.internal.telephony.uicc.SIMRecords.EVENT_GET_ICCID_DONE)); (mRecordsToLoad)++; }",32084016b696414e845c3f2881f4f6f37c1f3cea,"private void onLocked(int msg) { if (DBG) log(""only fetch EF_LI, EF_PL and EF_ICCID in locked state""); mLockedRecordsReqReason = (msg == (com.android.internal.telephony.uicc.SIMRecords.EVENT_APP_LOCKED)) ? LOCKED_RECORDS_REQ_REASON_LOCKED : LOCKED_RECORDS_REQ_REASON_NETWORK_LOCKED; loadEfLiAndEfPl(); mFh.loadEFTransparent(com.android.internal.telephony.uicc.EF_ICCID, obtainMessage(com.android.internal.telephony.uicc.SIMRecords.EVENT_GET_ICCID_DONE)); (mRecordsToLoad)++; }",1681501299473d11164211e80862daee8f1c6b80,2018-01-12 21:37:58,3
584815,src_java_com_android_internal_telephony_uicc_IccRecords.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,protected boolean getNetworkLockedRecordsLoaded() { return ((mRecordsToLoad) == 0) && ((mLockedRecordsReqReason) != (com.android.internal.telephony.uicc.IccRecords.LOCKED_RECORDS_REQ_REASON_NETWORK_LOCKED)); },47a2acb8e060db01f42a7f0475f6934099839e65,protected boolean getNetworkLockedRecordsLoaded() { return ((mRecordsToLoad) == 0) && ((mLockedRecordsReqReason) == (com.android.internal.telephony.uicc.IccRecords.LOCKED_RECORDS_REQ_REASON_NETWORK_LOCKED)); },29c183d681c3f1b372b3b78839f4da757d0be452,2018-01-12 21:37:58,3
584815,src_java_com_android_internal_telephony_uicc_RuimRecords.java,"private void onLocked() { if (DBG) log(""only fetch EF_ICCID in locked state""); mLockedRecordsRequested = true; mFh.loadEFTransparent(com.android.internal.telephony.uicc.EF_ICCID, obtainMessage(com.android.internal.telephony.uicc.RuimRecords.EVENT_GET_ICCID_DONE)); (mRecordsToLoad)++; }",2630b9f9918ee985b0d63a41bf09a2697b1d521e,"private void onLocked(int msg) { if (DBG) log(""only fetch EF_ICCID in locked state""); mLockedRecordsReqReason = (msg == (com.android.internal.telephony.uicc.RuimRecords.EVENT_APP_LOCKED)) ? LOCKED_RECORDS_REQ_REASON_PIN_LOCKED : LOCKED_RECORDS_REQ_REASON_NETWORK_LOCKED; mFh.loadEFTransparent(com.android.internal.telephony.uicc.EF_ICCID, obtainMessage(com.android.internal.telephony.uicc.RuimRecords.EVENT_GET_ICCID_DONE)); (mRecordsToLoad)++; }",9905d9938bf8b99ca78c9caf856f47280645aee4,"private void onLocked(int msg) { if (DBG) log(""only fetch EF_ICCID in locked state""); mLockedRecordsReqReason = (msg == (com.android.internal.telephony.uicc.RuimRecords.EVENT_APP_LOCKED)) ? LOCKED_RECORDS_REQ_REASON_LOCKED : LOCKED_RECORDS_REQ_REASON_NETWORK_LOCKED; mFh.loadEFTransparent(com.android.internal.telephony.uicc.EF_ICCID, obtainMessage(com.android.internal.telephony.uicc.RuimRecords.EVENT_GET_ICCID_DONE)); (mRecordsToLoad)++; }",218052664b462f102273b2ba39b1a548bfaf0bf3,2018-01-12 21:37:58,3
584815,src_java_com_android_internal_telephony_uicc_IsimUiccRecords.java,"private void onLockedAllRecordsLoaded() { if (com.android.internal.telephony.uicc.IsimUiccRecords.DBG) log(""SIM locked; record load complete""); mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); }",508a461cdcbc19cb0bd04901a7d51666f797b042,"private void onLockedAllRecordsLoaded() { if (com.android.internal.telephony.uicc.IsimUiccRecords.DBG) log(""SIM locked; record load complete""); if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_PIN_LOCKED)) { mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else { mNetworkLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } }",61a4c87791741486c922415fa0c26477c2429544,"private void onLockedAllRecordsLoaded() { if (com.android.internal.telephony.uicc.IsimUiccRecords.DBG) log(""SIM locked; record load complete""); if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_LOCKED)) { mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_NETWORK_LOCKED)) { mNetworkLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else { loge((""onLockedAllRecordsLoaded: unexpected mLockedRecordsReqReason "" + (mLockedRecordsReqReason))); } }",7d7797fcb49ca7bb9fad0f880cea06f62f03cb2e,2018-01-12 21:37:58,3
584815,src_java_com_android_internal_telephony_uicc_RuimRecords.java,"private void onLockedAllRecordsLoaded() { mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); }",e491a8d7599e1759bf32612bd16e99c76522264e,"private void onLockedAllRecordsLoaded() { if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_PIN_LOCKED)) { mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else { mNetworkLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } }",e4318f8914390b171a901cab84fafc1cfa98dca3,"private void onLockedAllRecordsLoaded() { if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_LOCKED)) { mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_NETWORK_LOCKED)) { mNetworkLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else { loge((""onLockedAllRecordsLoaded: unexpected mLockedRecordsReqReason "" + (mLockedRecordsReqReason))); } }",8b0e7f75f9d9927a1d5bb7da4d95068e3a56fd8e,2018-01-12 21:37:58,3
581716,src_com_android_server_telecom_Call.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.android.internal.annotations.VisibleForTesting public void setEmergencyCall(boolean flag) { mIsEmergencyCall = flag; },e41728b0e9541be6b76612599023201a9288ddf4,@java.lang.Override public ConnectionServiceFocusManager.ConnectionServiceFocus getConnectionServiceWrapper() { return mConnectionService; },85e6a9b1f792885697ba6e9eac05cf65be8438b3,2018-01-12 23:50:38,6
586706,src_java_com_android_internal_telephony_test_SimulatedCommands.java,"@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, result); if ((mDcResponse) == null) { try { mDcResponse = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, ""IP"", ""rmnet_data7"", java.util.Arrays.asList(new android.telephony.data.InterfaceAddress(""12.34.56.78"", 0)), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(""98.76.54.32"")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(""11.22.33.44"")), null, 1440); } catch (java.lang.Exception e) { } } if (mDcSuccess) { resultSuccess(result, mDcResponse); } else { resultFail(result, mDcResponse, new java.lang.RuntimeException(""Setup data call failed!"")); } }",b7fa6ed66d99643ae3dbab74c515f94a720357d6,"@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, result); if ((mDcResponse) == null) { try { mDcResponse = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, ""IP"", ""rmnet_data7"", java.util.Arrays.asList(new android.net.LinkAddress(android.net.NetworkUtils.numericToInetAddress(""12.34.56.78""), 0)), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(""98.76.54.32"")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(""11.22.33.44"")), null, 1440); } catch (java.lang.Exception e) { } } if (mDcSuccess) { resultSuccess(result, mDcResponse); } else { resultFail(result, mDcResponse, new java.lang.RuntimeException(""Setup data call failed!"")); } }",8bfe9830efabcb88b14a64e24c7ac9bc0af8803e,"@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, result); if ((mDcResponse) == null) { try { mDcResponse = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, ""IP"", ""rmnet_data7"", java.util.Arrays.asList(new android.net.LinkAddress(""12.34.56.78/32"")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(""98.76.54.32"")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(""11.22.33.44"")), null, 1440); } catch (java.lang.Exception e) { } } if (mDcSuccess) { resultSuccess(result, mDcResponse); } else { resultFail(result, mDcResponse, new java.lang.RuntimeException(""Setup data call failed!"")); } }",0240734b833984d08d48830ba7059aeb4192818f,2018-01-13 01:42:52,4
586706,tests_telephonytests_src_com_android_internal_telephony_dataconnection_DataConnectionTest.java,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetLinkPropertiesInvalidAddress() throws java.lang.Exception { android.telephony.data.DataCallResponse response = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, ""IP"", com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_IFNAME, java.util.Arrays.asList(new android.telephony.data.InterfaceAddress(""224.224.224.224"", 0)), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_DNS)), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_GATEWAY)), java.util.Arrays.asList(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_PCSCF_ADDRESS), 1440); android.net.LinkProperties linkProperties = new android.net.LinkProperties(); assertEquals(SetupResult.ERR_UnacceptableParameter, setLinkProperties(response, linkProperties)); }",5c887ce538875233efbead96cf1a17352a2c2f3c,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetLinkPropertiesInvalidAddress() throws java.lang.Exception { android.telephony.data.DataCallResponse response = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, ""IP"", com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_IFNAME, java.util.Arrays.asList(new android.net.LinkAddress(android.net.NetworkUtils.numericToInetAddress(""224.224.224.224""), 0)), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_DNS)), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_GATEWAY)), java.util.Arrays.asList(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_PCSCF_ADDRESS), 1440); android.net.LinkProperties linkProperties = new android.net.LinkProperties(); assertEquals(SetupResult.ERR_UnacceptableParameter, setLinkProperties(response, linkProperties)); }",5114c701e83600a33034d470c878c12d4bb542a8,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetLinkPropertiesEmptyAddress() throws java.lang.Exception { android.telephony.data.DataCallResponse response = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, ""IP"", com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_IFNAME, null, java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_DNS)), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_GATEWAY)), java.util.Arrays.asList(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_PCSCF_ADDRESS), 1440); android.net.LinkProperties linkProperties = new android.net.LinkProperties(); assertEquals(SetupResult.ERR_UnacceptableParameter, setLinkProperties(response, linkProperties)); }",a015053b86707cc348cf25924b08d06e474e7e59,2018-01-13 01:42:52,4
580355,src_java_com_android_internal_telephony_PhoneNotifier.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void notifyCellularDataStateChanged(com.android.internal.telephony.Phone sender, boolean state);",2a0361e81462fb002a963b2c2d06b7eee8b5de36,"public void notifyUserMobileDataStateChanged(com.android.internal.telephony.Phone sender, boolean state);",890cf557c93fb0b399ac83febe55d44c56ac72f5,2018-01-13 04:09:40,5
580352,services_core_java_com_android_server_TelephonyRegistry.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void notifyCellularDataChangedForPhoneId(int phoneId, int subId, boolean cdi) { if (!(checkNotifyPermission(""notifyCellularDataChanged()""))) { return; } if (com.android.server.TelephonyRegistry.VDBG) { com.android.server.TelephonyRegistry.log((((""notifyCellularDataChangedForSubscriberPhoneID: subId="" + phoneId) + "" cdi="") + cdi)); } synchronized(mRecords) { if (validatePhoneId(phoneId)) { mMessageWaiting[phoneId] = cdi; for (com.android.server.TelephonyRegistry.Record r : mRecords) { if ((r.matchPhoneStateListenerEvent(PhoneStateListener.LISTEN_CELLULAR_DATA_INDICATOR)) && (idMatch(r.subId, subId, phoneId))) { try { r.callback.onCellularDataIndicatorChanged(cdi); } catch (android.os.RemoteException ex) { mRemoveList.add(r.binder); } } } } handleRemoveListLocked(); } }",0f263cf8dfd17851fe9a115e68f1c064b5ea7a04,"public void notifyUserMobileDataStateChangedForPhoneId(int phoneId, int subId, boolean state) { if (!(checkNotifyPermission(""notifyUserMobileDataStateChanged()""))) { return; } if (com.android.server.TelephonyRegistry.VDBG) { com.android.server.TelephonyRegistry.log((((""notifyUserMobileDataStateChangedForSubscriberPhoneID: subId="" + phoneId) + "" state="") + state)); } synchronized(mRecords) { if (validatePhoneId(phoneId)) { mMessageWaiting[phoneId] = state; for (com.android.server.TelephonyRegistry.Record r : mRecords) { if ((r.matchPhoneStateListenerEvent(PhoneStateListener.LISTEN_USER_MOBILE_DATA_STATE)) && (idMatch(r.subId, subId, phoneId))) { try { r.callback.onUserMobileDataStateChanged(state); } catch (android.os.RemoteException ex) { mRemoveList.add(r.binder); } } } } handleRemoveListLocked(); } }",bdbcc7fbfcc3a5a5510c5e4bc6912d7a4b3b4fa1,2018-01-13 04:09:40,5
580355,src_java_com_android_internal_telephony_DefaultPhoneNotifier.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void notifyCellularDataStateChanged(com.android.internal.telephony.Phone sender, boolean state) { try { mRegistry.notifyCellularDataChangedForPhoneId(sender.getPhoneId(), sender.getSubId(), state); } catch (android.os.RemoteException ex) { } }",ed5248ac6166ffa63e18b0bf2f7df7b658cbae17,"@java.lang.Override public void notifyUserMobileDataStateChanged(com.android.internal.telephony.Phone sender, boolean state) { try { mRegistry.notifyUserMobileDataStateChangedForPhoneId(sender.getPhoneId(), sender.getSubId(), state); } catch (android.os.RemoteException ex) { } }",8e1714df5420140e8ec38583fffe04f81cac44f2,2018-01-13 04:09:40,5
580355,src_java_com_android_internal_telephony_dataconnection_DcTracker.java,"private void onSetUserDataEnabled(boolean enabled) { synchronized(mDataEnabledSettings) { if ((mDataEnabledSettings.isUserDataEnabled()) != enabled) { mDataEnabledSettings.setUserDataEnabled(enabled); if ((android.telephony.TelephonyManager.getDefault().getSimCount()) == 1) { Settings.Global.putInt(mResolver, Settings.Global.MOBILE_DATA, (enabled ? 1 : 0)); } else { int phoneSubId = mPhone.getSubId(); Settings.Global.putInt(mResolver, ((Settings.Global.MOBILE_DATA) + phoneSubId), (enabled ? 1 : 0)); } if ((!(getDataRoamingEnabled())) && (mPhone.getServiceState().getDataRoaming())) { if (enabled) { notifyOffApnsOfAvailability(Phone.REASON_ROAMING_ON); } else { notifyOffApnsOfAvailability(Phone.REASON_DATA_DISABLED); } } if (enabled) { reevaluateDataConnections(); onTrySetupData(Phone.REASON_DATA_ENABLED); } else { onCleanUpAllConnections(Phone.REASON_DATA_SPECIFIC_DISABLED); } } } }",9da9f249944f1a57565c78d9c36ec2a522a85cf2,"private void onSetUserDataEnabled(boolean enabled) { synchronized(mDataEnabledSettings) { if ((mDataEnabledSettings.isUserDataEnabled()) != enabled) { mDataEnabledSettings.setUserDataEnabled(enabled); if ((android.telephony.TelephonyManager.getDefault().getSimCount()) == 1) { Settings.Global.putInt(mResolver, Settings.Global.MOBILE_DATA, (enabled ? 1 : 0)); } else { int phoneSubId = mPhone.getSubId(); Settings.Global.putInt(mResolver, ((Settings.Global.MOBILE_DATA) + phoneSubId), (enabled ? 1 : 0)); } if ((!(getDataRoamingEnabled())) && (mPhone.getServiceState().getDataRoaming())) { if (enabled) { notifyOffApnsOfAvailability(Phone.REASON_ROAMING_ON); } else { notifyOffApnsOfAvailability(Phone.REASON_DATA_DISABLED); } } mPhone.notifyCellularDataStateChanged(enabled); if (enabled) { reevaluateDataConnections(); onTrySetupData(Phone.REASON_DATA_ENABLED); } else { onCleanUpAllConnections(Phone.REASON_DATA_SPECIFIC_DISABLED); } } } }",1a373b85be4bdd2d7766167e63433a0b04d35510,private void onSetUserDataEnabled(boolean enabled) { synchronized(mDataEnabledSettings) { if ((mDataEnabledSettings.isUserDataEnabled()) != enabled) { mDataEnabledSettings.setUserDataEnabled(enabled); if ((!(getDataRoamingEnabled())) && (mPhone.getServiceState().getDataRoaming())) { if (enabled) { notifyOffApnsOfAvailability(Phone.REASON_ROAMING_ON); } else { notifyOffApnsOfAvailability(Phone.REASON_DATA_DISABLED); } } mPhone.notifyUserMobileDataStateChanged(enabled); if (enabled) { reevaluateDataConnections(); onTrySetupData(Phone.REASON_DATA_ENABLED); } else { onCleanUpAllConnections(Phone.REASON_DATA_SPECIFIC_DISABLED); } } } },f16b97d2c4a6918482a0f76d16c1d476bcc8cbad,2018-01-13 04:09:40,5
580355,src_java_com_android_internal_telephony_Phone.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void notifyCellularDataStateChanged(boolean state) { mNotifier.notifyCellularDataStateChanged(this, state); }",a37099191cfe882814101bc29d5b3e1d0c4fe77f,"public void notifyUserMobileDataStateChanged(boolean state) { mNotifier.notifyUserMobileDataStateChanged(this, state); }",ea26af257730a4c2caee1742369a3f7bab6f1eb3,2018-01-13 04:09:40,5
580352,telephony_java_android_telephony_PhoneStateListener.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void onCellularDataIndicatorChanged(boolean enabled) { send(android.telephony.PhoneStateListener.LISTEN_CELLULAR_DATA_INDICATOR, 0, 0, enabled); }",70ff87f2c5725ee82f7bd604690436bb0a04ea01,"public void onUserMobileDataStateChanged(boolean enabled) { send(android.telephony.PhoneStateListener.LISTEN_USER_MOBILE_DATA_STATE, 0, 0, enabled); }",56b29d452c5b9fc8f56941d9926f2d1d678e6ee0,2018-01-13 04:09:40,5
580352,telephony_java_android_telephony_PhoneStateListener.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void onCellularDataIndicatorChanged(boolean enabled) { },c917ea4cf0ce474f0a7a99b9e58b1edea23fa754,public void onUserMobileDataStateChanged(boolean enabled) { },d127aa4c00ef0637712a006484924f1872698061,2018-01-13 04:09:40,5
588737,services_core_java_com_android_server_NetworkManagementService.java,"@java.lang.Override public void removeNetwork(int netId) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, com.android.server.NetworkManagementService.TAG); try { mConnector.execute(""network"", ""destroy"", netId); } catch (com.android.server.NativeDaemonConnectorException e) { throw e.rethrowAsParcelableException(); } }",8aa89e600cb6f5d983c9a2441546842e398b7510,"@java.lang.Override public void removeNetwork(int netId) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, com.android.server.NetworkManagementService.TAG); try { mNetdService.networkDestroy(netId); } catch (android.os.ServiceSpecificException e) { android.util.Log.w(com.android.server.NetworkManagementService.TAG, ((""removeNetwork("" + netId) + ""): ""), e); throw e; } catch (android.os.RemoteException e) { android.util.Log.w(com.android.server.NetworkManagementService.TAG, ((""removeNetwork("" + netId) + ""): ""), e); throw e.rethrowAsRuntimeException(); } }",bb1311df71d6af7ffdbb4cb9b03dd9c0da508d54,"@java.lang.Override public void removeNetwork(int netId) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.NETWORK_STACK, com.android.server.NetworkManagementService.TAG); try { mNetdService.networkDestroy(netId); } catch (android.os.ServiceSpecificException e) { android.util.Log.w(com.android.server.NetworkManagementService.TAG, ((""removeNetwork("" + netId) + ""): ""), e); throw e; } catch (android.os.RemoteException e) { android.util.Log.w(com.android.server.NetworkManagementService.TAG, ((""removeNetwork("" + netId) + ""): ""), e); throw e.rethrowAsRuntimeException(); } }",928687a03c8f5ea5278d5adf72b86a6f429de73a,2018-01-15 12:39:07,2
515835,src_java_com_android_internal_telephony_CarrierActionAgent.java,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { final java.lang.String action = intent.getAction(); final java.lang.String iccState = intent.getStringExtra(IccCardConstants.INTENT_KEY_ICC_STATE); if (TelephonyIntents.ACTION_SIM_STATE_CHANGED.equals(action)) { if (IccCardConstants.INTENT_VALUE_ICC_LOADED.equals(iccState)) { sendEmptyMessage(com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_RESET); java.lang.String mobileData = Settings.Global.MOBILE_DATA; if ((android.telephony.TelephonyManager.getDefault().getSimCount()) != 1) { mobileData = mobileData + (mPhone.getSubId()); } mSettingsObserver.observe(Settings.Global.getUriFor(mobileData), com.android.internal.telephony.CarrierActionAgent.EVENT_MOBILE_DATA_SETTINGS_CHANGED); mSettingsObserver.observe(Settings.Global.getUriFor(Settings.Global.AIRPLANE_MODE_ON), com.android.internal.telephony.CarrierActionAgent.EVENT_APM_SETTINGS_CHANGED); } else if (IccCardConstants.INTENT_VALUE_ICC_ABSENT.equals(iccState)) { sendEmptyMessage(com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_RESET); mSettingsObserver.unobserve(); } } }",13e77d4b0da4e34f27d8a3d01855fbdd739596ed,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { final java.lang.String action = intent.getAction(); final java.lang.String iccState = intent.getStringExtra(IccCardConstants.INTENT_KEY_ICC_STATE); if (TelephonyIntents.ACTION_SIM_STATE_CHANGED.equals(action)) { if (IccCardConstants.INTENT_VALUE_ICC_LOADED.equals(iccState)) { sendEmptyMessage(com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_RESET); java.lang.String mobileData = Settings.Global.MOBILE_DATA; if ((android.telephony.TelephonyManager.getDefault().getSimCount()) != 1) { mobileData = mobileData + (mPhone.getSubId()); } mSettingsObserver.observe(Settings.Global.getUriFor(mobileData), com.android.internal.telephony.CarrierActionAgent.EVENT_MOBILE_DATA_SETTINGS_CHANGED); mSettingsObserver.observe(Settings.Global.getUriFor(Settings.Global.AIRPLANE_MODE_ON), com.android.internal.telephony.CarrierActionAgent.EVENT_APM_SETTINGS_CHANGED); mSettingsObserver.observe(Telephony.Carriers.CONTENT_URI, com.android.internal.telephony.CarrierActionAgent.EVENT_APN_SETTINGS_CHANGED); } else if (IccCardConstants.INTENT_VALUE_ICC_ABSENT.equals(iccState)) { sendEmptyMessage(com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_RESET); mSettingsObserver.unobserve(); } } }",2a5e72bc8f8514fea929d7f5a9b46de9e89d21ee,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { final java.lang.String action = intent.getAction(); final java.lang.String iccState = intent.getStringExtra(IccCardConstants.INTENT_KEY_ICC_STATE); if (TelephonyIntents.ACTION_SIM_STATE_CHANGED.equals(action)) { if (intent.getBooleanExtra(TelephonyIntents.EXTRA_REBROADCAST_ON_UNLOCK, false)) { return; } sendMessage(obtainMessage(com.android.internal.telephony.CarrierActionAgent.EVENT_SIM_STATE_CHANGED, iccState)); } }",100a2fb15c87cdb3c1882e6016a8e7c36aa508a2,2018-01-15 19:29:23,3
586986,tests_net_java_android_net_MacAddressTest.java,"@org.junit.Test public void testMacAddrTypes() { android.net.MacAddressTest.AddrTypeTestCase[] testcases = new android.net.MacAddressTest.AddrTypeTestCase[]{ android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 0), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5, 6, 7), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNICAST, 160, 176, 192, 208, 224, 240), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_BROADCAST, 255, 255, 255, 255, 255, 255), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 1, 2, 3, 4, 5, 6), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 11, 22, 33, 44, 55, 66), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 33, 33, 170, 187, 204, 221) }; for (android.net.MacAddressTest.AddrTypeTestCase t : testcases) { int got = android.net.MacAddress.macAddressType(t.addr); java.lang.String msg = java.lang.String.format(""expected type of %s to be %s, but got %s"", java.util.Arrays.toString(t.addr), t.expectedType, got); assertEquals(msg, t.expectedType, got); if (got != (MacAddress.TYPE_UNKNOWN)) { assertEquals(got, android.net.MacAddress.fromBytes(t.addr).addressType()); } } }",3560ec57139a39a8d3bcc20dfc283ba5f3c75d3b,"@org.junit.Test public void testMacAddrTypes() { android.net.MacAddressTest.AddrTypeTestCase[] testcases = new android.net.MacAddressTest.AddrTypeTestCase[]{ android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 0), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5, 6, 7), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNICAST, 160, 176, 192, 208, 224, 240), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_BROADCAST, 255, 255, 255, 255, 255, 255), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 1, 2, 3, 4, 5, 6), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 11, 22, 33, 44, 55, 66), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 33, 33, 170, 187, 204, 221).of(MacAddress.TYPE_UNSPECIFIED, 0, 0, 0, 0, 0, 0) }; for (android.net.MacAddressTest.AddrTypeTestCase t : testcases) { int got = android.net.MacAddress.macAddressType(t.addr); java.lang.String msg = java.lang.String.format(""expected type of %s to be %s, but got %s"", java.util.Arrays.toString(t.addr), t.expectedType, got); assertEquals(msg, t.expectedType, got); if (got != (MacAddress.TYPE_UNKNOWN)) { assertEquals(got, android.net.MacAddress.fromBytes(t.addr).getAddressType()); } } }",9eebc51f3848756efff7301e40b3f303dd8e4c5f,"@org.junit.Test public void testMacAddrTypes() { android.net.MacAddressTest.AddrTypeTestCase[] testcases = new android.net.MacAddressTest.AddrTypeTestCase[]{ android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 0), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5, 6, 7), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNICAST, 160, 176, 192, 208, 224, 240), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_BROADCAST, 255, 255, 255, 255, 255, 255), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 1, 2, 3, 4, 5, 6), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 11, 22, 33, 44, 55, 66), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 33, 33, 170, 187, 204, 221) }; for (android.net.MacAddressTest.AddrTypeTestCase t : testcases) { int got = android.net.MacAddress.macAddressType(t.addr); java.lang.String msg = java.lang.String.format(""expected type of %s to be %s, but got %s"", java.util.Arrays.toString(t.addr), t.expectedType, got); assertEquals(msg, t.expectedType, got); if (got != (MacAddress.TYPE_UNKNOWN)) { assertEquals(got, android.net.MacAddress.fromBytes(t.addr).getAddressType()); } } }",63fb2aeb62e1ed5730aeb9578d4c08447dcba17a,2018-01-16 07:10:48,4
586986,core_java_android_net_MacAddress.java,@android.net.MacAddress.MacAddressType public int addressType() { if (equals(android.net.MacAddress.BROADCAST_ADDRESS)) { return android.net.MacAddress.TYPE_BROADCAST; } if (isMulticastAddress()) { return android.net.MacAddress.TYPE_MULTICAST; } return android.net.MacAddress.TYPE_UNICAST; },8264c2843e29efd2ae354215cf06b18ae0700f17,@android.net.MacAddress.MacAddressType public int getAddressType() { if (equals(android.net.MacAddress.ALL_ZEROS_ADDRESS)) { return android.net.MacAddress.TYPE_UNSPECIFIED; } if (equals(android.net.MacAddress.BROADCAST_ADDRESS)) { return android.net.MacAddress.TYPE_BROADCAST; } if (isMulticastAddress()) { return android.net.MacAddress.TYPE_MULTICAST; } return android.net.MacAddress.TYPE_UNICAST; },71b79605754e19535ed1b1e773feeefc6139b63a,@android.net.MacAddress.MacAddressType public int getAddressType() { if (equals(android.net.MacAddress.BROADCAST_ADDRESS)) { return android.net.MacAddress.TYPE_BROADCAST; } if (isMulticastAddress()) { return android.net.MacAddress.TYPE_MULTICAST; } return android.net.MacAddress.TYPE_UNICAST; },e49f710bb4d6958983be3b29c2398c413f306bb7,2018-01-16 07:10:48,4
587253,tests_net_java_com_android_server_ConnectivityServiceTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void expectAvailableCallbacks(com.android.server.ConnectivityServiceTest.MockNetworkAgent agent, boolean expectSuspended, int timeoutMs) { expectAvailableCallbacks(agent, expectSuspended, false, timeoutMs); }",58cef9dbcbc12d070cb4f1babdb46314c72b8538,"void expectAvailableAndSuspendedCallbacks(com.android.server.ConnectivityServiceTest.MockNetworkAgent agent, boolean expectValidated) { expectAvailableCallbacks(agent, true, expectValidated, com.android.server.ConnectivityServiceTest.TestNetworkCallback.TIMEOUT_MS); }",809a4e5e0f230a6ff0a8bba9818af8b3e0c9f4a7,2018-01-16 14:25:11,2
587253,tests_net_java_com_android_server_ConnectivityServiceTest.java,"void expectAvailableCallbacks(com.android.server.ConnectivityServiceTest.MockNetworkAgent agent, boolean expectSuspended, int timeoutMs) { expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE, agent, timeoutMs); if (expectSuspended) { expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.SUSPENDED, agent, timeoutMs); } expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.NETWORK_CAPABILITIES, agent, timeoutMs); expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.LINK_PROPERTIES, agent, timeoutMs); }",f6f92b0d6f0b360b4d5cb2838bf0d0eb7fcbfe89,"void expectAvailableCallbacks(com.android.server.ConnectivityServiceTest.MockNetworkAgent agent, boolean expectSuspended, boolean requireUnvalidated, int timeoutMs) { expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE, agent, timeoutMs); if (expectSuspended) { expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.SUSPENDED, agent, timeoutMs); } if (requireUnvalidated) { expectCapabilitiesWithout(com.android.server.NET_CAPABILITY_VALIDATED, agent); } else { expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.NETWORK_CAPABILITIES, agent, timeoutMs); } expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.LINK_PROPERTIES, agent, timeoutMs); }",18672eebde0c54c1145bd62c103a269279e709f4,"void expectAvailableCallbacks(com.android.server.ConnectivityServiceTest.MockNetworkAgent agent, boolean expectSuspended, boolean expectValidated, int timeoutMs) { expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE, agent, timeoutMs); if (expectSuspended) { expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.SUSPENDED, agent, timeoutMs); } if (expectValidated) { expectCapabilitiesWith(com.android.server.NET_CAPABILITY_VALIDATED, agent); } else { expectCapabilitiesWithout(com.android.server.NET_CAPABILITY_VALIDATED, agent); } expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.LINK_PROPERTIES, agent, timeoutMs); }",5cc242abd4b973e9aaf60bf8ddcb15e57c1d595a,2018-01-16 14:25:11,2
580354,src_java_com_android_internal_telephony_uicc_UiccProfile.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean areAllRecordsLoaded() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir == null) || (!(ir.isLoaded()))) { return false; } } } return (mUiccApplications[0]) != null; },eaea3da10b0c4de14a25fb40dab9e5fa5ae73333,private boolean areAllRecordsLoaded() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if ((app != null) && (isSupportedApplication(app))) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir == null) || (!(ir.isLoaded()))) { return false; } } } return (mUiccApplications[0]) != null; },eaf84454ffac14eb492d4e27f8776ed8f9ebcbbf,2018-01-16 18:05:21,4
580354,src_java_com_android_internal_telephony_uicc_UiccProfile.java,"private void registerUiccCardEvents() { if ((mUiccApplication) != null) { mUiccApplication.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); mUiccApplication.registerForNetworkLocked(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_NETWORK_LOCKED, null); } if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); mIccRecords.registerForLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_LOCKED, null); mIccRecords.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } }",2bab0dfa941943b89b947fc76a469e8f1785296a,"private void registerUiccCardEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { app.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); app.registerForNetworkLocked(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_NETWORK_LOCKED, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir != null) { ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_LOCKED, null); ir.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } } } }",361706cf9a498247133bff5735bbcd264810d6c5,"private void registerUiccCardEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { app.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir != null) { ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } } } if ((mIccRecords) != null) { mIccRecords.registerForLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_LOCKED, null); mIccRecords.registerForNetworkLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_NETWORK_LOCKED, null); } }",54b7b4311d6291505b2f43aadcdc3696b50e5927,2018-01-16 18:05:21,4
580354,src_java_com_android_internal_telephony_uicc_UiccProfile.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if ((app != null) && (!(app.isReady()))) { return false; } } return (mUiccApplications[0]) != null; },0564110ba29e781c632bad11d8bcbff4747ac0ef,private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app != null) && (isSupportedApplication(app))) && (!(app.isReady()))) { return false; } } return (mUiccApplications[0]) != null; },737784f673bb016a4d19a267db3e9e785064af1d,2018-01-16 18:05:21,4
580354,src_java_com_android_internal_telephony_uicc_UiccProfile.java,private void unregisterUiccCardEvents() { if ((mUiccCard) != null) mUiccCard.unregisterForCarrierPrivilegeRulesLoaded(this); if ((mUiccApplication) != null) mUiccApplication.unregisterForReady(this); if ((mUiccApplication) != null) mUiccApplication.unregisterForLocked(this); if ((mUiccApplication) != null) mUiccApplication.unregisterForNetworkLocked(this); if ((mIccRecords) != null) mIccRecords.unregisterForRecordsLoaded(this); if ((mIccRecords) != null) mIccRecords.unregisterForRecordsEvents(this); },30949c07b72501d0f24164cd82825b37b35b38b5,private void unregisterUiccCardEvents() { if ((mUiccCard) != null) mUiccCard.unregisterForCarrierPrivilegeRulesLoaded(this); for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { app.unregisterForReady(this); app.unregisterForNetworkLocked(this); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir != null) { ir.unregisterForRecordsLoaded(this); ir.unregisterForLockedRecordsLoaded(this); ir.unregisterForRecordsEvents(this); } } } },4447c4bffcaf9286627db552c464eef2f0849843,private void unregisterUiccCardEvents() { if ((mUiccCard) != null) mUiccCard.unregisterForCarrierPrivilegeRulesLoaded(this); for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { app.unregisterForReady(this); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir != null) { ir.unregisterForRecordsLoaded(this); ir.unregisterForRecordsEvents(this); } } } if ((mIccRecords) != null) { mIccRecords.unregisterForLockedRecordsLoaded(this); mIccRecords.unregisterForNetworkLockedRecordsLoaded(this); } },55a2ad9924c1d21c5d132012c0bc061376bb137a,2018-01-16 18:05:21,4
587153,core_java_android_app_ProfilerInfo.java,"@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeString(profileFile); if ((profileFd) != null) { out.writeInt(1); profileFd.writeToParcel(out, flags); } else { out.writeInt(0); } out.writeInt(samplingInterval); out.writeInt((autoStopProfiler ? 1 : 0)); out.writeInt((streamingOutput ? 1 : 0)); out.writeString(agent); }",3315e50f19a1ecb416d0873f3ffdb867c7b04059,"@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeString(profileFile); if ((profileFd) != null) { out.writeInt(1); profileFd.writeToParcel(out, flags); } else { out.writeInt(0); } out.writeInt(samplingInterval); out.writeInt((autoStopProfiler ? 1 : 0)); out.writeInt((streamingOutput ? 1 : 0)); out.writeString(agent); out.writeBoolean(bindTimeAgentAttach); }",b74e4049dab8e574102334b09c2ddac27c6c8472,"@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeString(profileFile); if ((profileFd) != null) { out.writeInt(1); profileFd.writeToParcel(out, flags); } else { out.writeInt(0); } out.writeInt(samplingInterval); out.writeInt((autoStopProfiler ? 1 : 0)); out.writeInt((streamingOutput ? 1 : 0)); out.writeString(agent); out.writeBoolean(attachAgentDuringBind); }",9eed83bc161cb21858b3bff0cad515da51e057c4,2018-01-16 18:25:30,4
583630,src_com_android_bips_discovery_MdnsDiscovery.java,"@java.lang.Override void onStart() { if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, ""onStart()""); mIppServiceListener = new com.android.bips.discovery.MdnsDiscovery.NsdServiceListener() { @java.lang.Override public void onStartDiscoveryFailed(java.lang.String s, int i) { mIppServiceListener = null; } }; mNsdManager.discoverServices(com.android.bips.discovery.MdnsDiscovery.SERVICE_IPP, NsdManager.PROTOCOL_DNS_SD, mIppServiceListener); mIppsServiceListener = new com.android.bips.discovery.MdnsDiscovery.NsdServiceListener() { @java.lang.Override public void onStartDiscoveryFailed(java.lang.String s, int i) { mIppServiceListener = null; } }; mNsdManager.discoverServices(com.android.bips.discovery.MdnsDiscovery.SERVICE_IPPS, NsdManager.PROTOCOL_DNS_SD, mIppsServiceListener); }",9335a4c4a4200dd60a92d7ab86be1608500e0267,"@java.lang.Override void onStart() { if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, (""onStart() "" + (mServiceName))); com.android.bips.discovery.MdnsDiscovery.NsdServiceListener serviceListener = new com.android.bips.discovery.MdnsDiscovery.NsdServiceListener() { @java.lang.Override public void onStartDiscoveryFailed(java.lang.String s, int i) { } }; android.net.nsd.NsdManager nsdManager = mNsdResolveQueue.getNsdManager(); nsdManager.discoverServices(mServiceName, NsdManager.PROTOCOL_DNS_SD, serviceListener); mToStop.add(() -> nsdManager.stopServiceDiscovery(serviceListener)); }",61c69ae59c437afb7c462820a80348105c786b80,"@java.lang.Override void onStart() { if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, (""onStart() "" + (mServiceName))); com.android.bips.discovery.MdnsDiscovery.NsdServiceListener serviceListener = new com.android.bips.discovery.MdnsDiscovery.NsdServiceListener() { @java.lang.Override public void onStartDiscoveryFailed(java.lang.String s, int i) { } }; android.net.nsd.NsdManager nsdManager = mNsdResolveQueue.getNsdManager(); nsdManager.discoverServices(mServiceName, NsdManager.PROTOCOL_DNS_SD, serviceListener); mServiceListeners.add(serviceListener); }",ab93f6e7b131149f2e0a9889fcde9f8017d08786,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_Discovery.java,public void start(com.android.bips.discovery.Discovery.Listener listener) { mListeners.add(listener); mPrinters.values().forEach(listener::onPrinterFound); start(); },298d9a3470e6fb95c2a6de9af1fe7941e0d0a762,public com.android.bips.util.Stoppable start(com.android.bips.discovery.Discovery.Listener listener) { mListeners.add(listener); if (!(mPrinters.isEmpty())) { mHandler.post(() -> { if (!(mListeners.contains(listener))) return; new com.android.bips.discovery.ArrayList<>(mPrinters.values()).forEach(listener::onPrinterFound); }); } start(); return () -> { mListeners.remove(listener); if (mListeners.isEmpty()) { stop(); } }; },748e89396b3b16afce204a5059b8bab9ebd184e5,public void start(com.android.bips.discovery.Discovery.Listener listener) { mListeners.add(listener); if (!(mPrinters.isEmpty())) { if (!(mListeners.contains(listener))) { return; } for (com.android.bips.discovery.DiscoveredPrinter printer : new java.util.ArrayList(mPrinters.values())) { listener.onPrinterFound(printer); } } start(); },a68dda4fe0d2469eb1136f41d966385bbcd9d5bd,2018-01-17 01:43:24,4
583630,src_com_android_bips_BuiltInPrintService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.android.bips.util.Stoppable delay(int delay, java.lang.Runnable toRun) { mMainHandler.postDelayed(toRun, delay); return () -> mMainHandler.removeCallbacks(toRun); }",bd67c0e063b56969ee68e4fc345bbcfdd05081e1,"public com.android.bips.DelayedAction delay(int delay, java.lang.Runnable toRun) { mMainHandler.postDelayed(toRun, delay); return () -> mMainHandler.removeCallbacks(toRun); }",01b632098221eb3cd49b48c25986643a05fb0fce,2018-01-17 01:43:24,4
583630,src_com_android_bips_ui_AddP2pPrinterDialog.java,,,@java.lang.Override public void onConnectionComplete(com.android.bips.discovery.DiscoveredPrinter printer) { if (printer != null) { mPrintService.getMainHandler().post(() -> { mValidating.stop(); mPrintService.getP2pDiscovery().addValidPrinter(printer); mFragment.getActivity().finish(); }); dismiss(); } else { fail(); } },67916ae20da519c14f557ac674665e5e9c3d0ca4,@java.lang.Override public void onConnectionComplete(com.android.bips.discovery.DiscoveredPrinter printer) { if (printer != null) { mPrintService.getMainHandler().post(() -> { mValidating.close(); mPrintService.getP2pDiscovery().addValidPrinter(printer); mFragment.getActivity().finish(); }); dismiss(); } else { fail(); } },1bda56c7afeaee039a3309ed0463d22320b7f9cb,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_MdnsDiscovery.java,"@java.lang.Override public void onResolveFailed(final android.net.nsd.NsdServiceInfo info, final int errorCode) { }",1ce072dfbacf1aba8c788760a616ad098bdd83a4,"@java.lang.Override public void onResolveFailed(final android.net.nsd.NsdServiceInfo info, final int errorCode) { mToStop.remove(this); mResolve = null; }",654fe2e8640cc5b42b0c7736a11e658bb1aa5270,"@java.lang.Override public void onResolveFailed(final android.net.nsd.NsdServiceInfo info, final int errorCode) { mResolvers.remove(this); }",324c038a2ece03827eebdcc7119003ccb62a5ea7,2018-01-17 01:43:24,4
583630,src_com_android_bips_LocalPrinter.java,"android.print.PrinterInfo createPrinterInfo() { if (((mCapabilities) != null) && (!(mCapabilities.isSupported))) { return null; } com.android.bips.discovery.DiscoveredPrinter printer = mPrintService.getDiscovery().getPrinter(mDiscoveredPrinter.getUri()); if (printer == null) return null; java.lang.String description = printer.getDescription(mPrintService); boolean idle = (mFound) && ((mCapabilities) != null); android.print.PrinterInfo.Builder builder = new android.print.PrinterInfo.Builder(mPrinterId, printer.name, (idle ? android.print.PrinterInfo.STATUS_IDLE : android.print.PrinterInfo.STATUS_UNAVAILABLE)).setIconResourceId(R.drawable.ic_printer).setDescription(description); if ((mCapabilities) != null) { android.print.PrinterCapabilitiesInfo.Builder capabilitiesBuilder = new android.print.PrinterCapabilitiesInfo.Builder(mPrinterId); mCapabilities.buildCapabilities(mPrintService, capabilitiesBuilder); builder.setCapabilities(capabilitiesBuilder.build()); } return builder.build(); }",12f5cd586d5d86659efcb3a443292b42df43ddf2,"android.print.PrinterInfo createPrinterInfo(boolean knownGood) { if ((mCapabilities) == null) { if (com.android.bips.p2p.P2pUtils.isP2p(mDiscoveredPrinter)) { android.print.PrinterInfo.Builder builder = new android.print.PrinterInfo.Builder(mPrinterId, mDiscoveredPrinter.name, android.print.PrinterInfo.STATUS_IDLE).setIconResourceId(R.drawable.ic_printer).setDescription(mPrintService.getDescription(mDiscoveredPrinter)); return builder.build(); } else if (!knownGood) { return null; } } else if (!(mCapabilities.isSupported)) { return null; } com.android.bips.discovery.DiscoveredPrinter printer = mPrintService.getDiscovery().getPrinter(mDiscoveredPrinter.getUri()); if (printer == null) return null; boolean idle = (mFound) && ((mCapabilities) != null); android.print.PrinterInfo.Builder builder = new android.print.PrinterInfo.Builder(mPrinterId, printer.name, (idle ? android.print.PrinterInfo.STATUS_IDLE : android.print.PrinterInfo.STATUS_UNAVAILABLE)).setIconResourceId(R.drawable.ic_printer).setDescription(mPrintService.getDescription(mDiscoveredPrinter)); if ((mCapabilities) != null) { android.print.PrinterCapabilitiesInfo.Builder capabilitiesBuilder = new android.print.PrinterCapabilitiesInfo.Builder(mPrinterId); mCapabilities.buildCapabilities(mPrintService, capabilitiesBuilder); builder.setCapabilities(capabilitiesBuilder.build()); } return builder.build(); }",db766c275afa492746b593e21aeafaeb67b3c134,"android.print.PrinterInfo createPrinterInfo(boolean knownGood) { if ((mCapabilities) == null) { if (com.android.bips.p2p.P2pUtils.isP2p(mDiscoveredPrinter)) { android.print.PrinterInfo.Builder builder = new android.print.PrinterInfo.Builder(mPrinterId, mDiscoveredPrinter.name, android.print.PrinterInfo.STATUS_IDLE).setIconResourceId(R.drawable.ic_printer).setDescription(mPrintService.getDescription(mDiscoveredPrinter)); return builder.build(); } else if (!knownGood) { return null; } } else if (!(mCapabilities.isSupported)) { return null; } com.android.bips.discovery.DiscoveredPrinter printer = mPrintService.getDiscovery().getPrinter(mDiscoveredPrinter.getUri()); if (printer == null) { return null; } boolean idle = (mFound) && ((mCapabilities) != null); android.print.PrinterInfo.Builder builder = new android.print.PrinterInfo.Builder(mPrinterId, printer.name, (idle ? android.print.PrinterInfo.STATUS_IDLE : android.print.PrinterInfo.STATUS_UNAVAILABLE)).setIconResourceId(R.drawable.ic_printer).setDescription(mPrintService.getDescription(mDiscoveredPrinter)); if ((mCapabilities) != null) { android.print.PrinterCapabilitiesInfo.Builder capabilitiesBuilder = new android.print.PrinterCapabilitiesInfo.Builder(mPrinterId); mCapabilities.buildCapabilities(mPrintService, capabilitiesBuilder); builder.setCapabilities(capabilitiesBuilder.build()); } return builder.build(); }",e23cfa4bc98de246af9ac4b04e880dab6056dc23,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_MultiDiscovery.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private com.android.bips.discovery.DiscoveredPrinter first(android.net.Uri printerUri) { for (com.android.bips.discovery.Discovery discovery : getChildren()) { com.android.bips.discovery.DiscoveredPrinter found = discovery.getPrinter(printerUri); if (found != null) return found; } return null; },9c5c5d4dc5f5f7da87ec3bc7e26b5f983cfa4c43,private com.android.bips.discovery.DiscoveredPrinter first(android.net.Uri printerUri) { for (com.android.bips.discovery.Discovery discovery : getChildren()) { com.android.bips.discovery.DiscoveredPrinter found = discovery.getPrinter(printerUri); if (found != null) { return found; } } return null; },612f10ee9e7a08493685cd0050b567a18dac31e2,2018-01-17 01:43:24,4
583630,src_com_android_bips_BuiltInPrintService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.android.bips.util.Stoppable receiveBroadcasts(android.content.BroadcastReceiver receiver, java.lang.String... actions) { return new com.android.bips.util.StoppableReceiver(this, receiver, actions); }",6004014a03651ebd102044b9851ab244c422dd81,"public com.android.bips.util.BroadcastMonitor receiveBroadcasts(android.content.BroadcastReceiver receiver, java.lang.String... actions) { return new com.android.bips.util.BroadcastMonitor(this, receiver, actions); }",b0e771d25b60734a5d7311c7595735f9511c77e9,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_MultiDiscovery.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private void stopAndClearAll() { for (com.android.bips.util.Stoppable started : mStarted) { started.stop(); } mStarted.clear(); allPrintersLost(); },2fdb308d73f587a02212420223c95a5012113d39,private void stopAndClearAll() { for (com.android.bips.discovery.Discovery discovery : mStartedDiscoveries) { discovery.stop(mChildListener); } mStartedDiscoveries.clear(); allPrintersLost(); },edbded588473b1fc89c1132745f85a136f297830,2018-01-17 01:43:24,4
583630,src_com_android_bips_LocalPrintJob.java,"private void finish(boolean success, java.lang.String error) { mPrintService.unlockWifi(); mBackend.closeDocument(); mMainHandler.removeCallbacksAndMessages(null); if (success) { mPrintJob.start(); mPrintJob.complete(); } else if ((mState) == (com.android.bips.LocalPrintJob.STATE_CANCEL)) { mPrintJob.cancel(); } else { mPrintJob.fail(error); } mState = com.android.bips.LocalPrintJob.STATE_DONE; mCompleteConsumer.accept(this); }",fda3c82dc98b5323350b8ca59d95295e92f80850,"private void finish(boolean success, java.lang.String error) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (((""finish() success="" + success) + "", error="") + error)); if ((mDiscovery) != null) mDiscovery.stop(); if ((mDiscoveryTimeout) != null) mDiscoveryTimeout.stop(); if ((mConnection) != null) mConnection.stop(); mPrintService.unlockWifi(); mBackend.closeDocument(); if (success) { mPrintJob.start(); mPrintJob.complete(); } else if ((mState) == (com.android.bips.LocalPrintJob.STATE_CANCEL)) { mPrintJob.cancel(); } else { mPrintJob.fail(error); } mState = com.android.bips.LocalPrintJob.STATE_DONE; mCompleteConsumer.accept(this); }",b3e632922b87b363dd7e7cc743abbf9df28e8c07,"private void finish(boolean success, java.lang.String error) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (((""finish() success="" + success) + "", error="") + error)); mPrintService.getDiscovery().stop(this); if ((mDiscoveryTimeout) != null) { mDiscoveryTimeout.cancel(); } if ((mConnection) != null) { mConnection.close(); } mPrintService.unlockWifi(); mBackend.closeDocument(); if (success) { mPrintJob.start(); mPrintJob.complete(); } else if ((mState) == (com.android.bips.LocalPrintJob.STATE_CANCEL)) { mPrintJob.cancel(); } else { mPrintJob.fail(error); } mState = com.android.bips.LocalPrintJob.STATE_DONE; mCompleteConsumer.accept(this); }",f5670ec4ab30bc163d5790d555a4fe7aa05e0d41,2018-01-17 01:43:24,4
583630,src_com_android_bips_LocalPrintJob.java,"void start(java.util.function.Consumer<com.android.bips.LocalPrintJob> callback) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (""start() "" + (mPrintJob))); if ((mState) != (com.android.bips.LocalPrintJob.STATE_INIT)) { android.util.Log.w(com.android.bips.LocalPrintJob.TAG, (""Invalid start state "" + (mState))); return; } mPrintJob.start(); mPrintService.lockWifi(); mState = com.android.bips.LocalPrintJob.STATE_DISCOVERY; mCompleteConsumer = callback; mPrintService.getDiscovery().start(this); mMainHandler.postDelayed(() -> { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ""Discovery timeout""); if ((mState) == (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) { mPrintService.getDiscovery().stop(this); finish(false, mPrintService.getString(R.string.printer_offline)); } }, com.android.bips.LocalPrintJob.DISCOVERY_TIMEOUT); }",4e1c8bb3198dfd6b1ed9fbbd47044242dfaaaa09,"void start(java.util.function.Consumer<com.android.bips.LocalPrintJob> callback) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (""start() "" + (mPrintJob))); if ((mState) != (com.android.bips.LocalPrintJob.STATE_INIT)) { android.util.Log.w(com.android.bips.LocalPrintJob.TAG, (""Invalid start state "" + (mState))); return; } mPrintJob.start(); mPrintService.lockWifi(); mState = com.android.bips.LocalPrintJob.STATE_DISCOVERY; mCompleteConsumer = callback; mDiscovery = mPrintService.getDiscovery().start(this); mDiscoveryTimeout = mPrintService.delay(com.android.bips.LocalPrintJob.DISCOVERY_TIMEOUT, () -> { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ""Discovery timeout""); if ((mState) == (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) { finish(false, mPrintService.getString(R.string.printer_offline)); } }); }",3cc02b511256b68f14f3530664128f428b6424ec,"void start(java.util.function.Consumer<com.android.bips.LocalPrintJob> callback) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (""start() "" + (mPrintJob))); if ((mState) != (com.android.bips.LocalPrintJob.STATE_INIT)) { android.util.Log.w(com.android.bips.LocalPrintJob.TAG, (""Invalid start state "" + (mState))); return; } mPrintJob.start(); mPrintService.lockWifi(); mState = com.android.bips.LocalPrintJob.STATE_DISCOVERY; mCompleteConsumer = callback; mDiscoveryTimeout = mPrintService.delay(com.android.bips.LocalPrintJob.DISCOVERY_TIMEOUT, () -> { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ""Discovery timeout""); if ((mState) == (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) { finish(false, mPrintService.getString(R.string.printer_offline)); } }); mPrintService.getDiscovery().start(this); }",2b9efe2ca49c2a3207d568f9fcd417b5e4eb1390,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_Discovery.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void removeSavedPrinter(android.net.Uri printerPath) { getChildren().stream().filter(( child) -> child != (this)).forEach(( child) -> child.removeSavedPrinter(printerPath)); },1b87af2ccc5a094364f779dfe37609c911cf9145,public void removeSavedPrinter(android.net.Uri printerPath) { for (com.android.bips.discovery.Discovery child : getChildren()) { if (child != (this)) { child.removeSavedPrinter(printerPath); } } },97802917c3e83ee4965a4f05c64fee20d0774999,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_MultiDiscovery.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override java.util.Collection<com.android.bips.discovery.Discovery> getChildren() { return mDiscoveries.stream().flatMap(( child) -> child.getChildren().stream()).collect(java.util.stream.Collectors.toList()); },58f7fac6de8cbc5d392866f38e605d8b01445205,@java.lang.Override java.util.Collection<com.android.bips.discovery.Discovery> getChildren() { java.util.List<com.android.bips.discovery.Discovery> children = new java.util.ArrayList<>(); for (com.android.bips.discovery.Discovery child : mDiscoveries) { children.addAll(child.getChildren()); } return children; },ee74f159bc7f262097afa7c7f0f3e320aabfa854,2018-01-17 01:43:24,4
583630,src_com_android_bips_BuiltInPrintService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.lang.String getDescription(DiscoveredPrinter printer) { if ((com.android.bips.p2p.P2pUtils.isP2p(printer)) || (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(this, printer))) { return getString(R.string.wifi_direct); } java.lang.String host = printer.path.getHost().replaceAll("":[0-9]+"", """"); if (!(android.text.TextUtils.isEmpty(printer.location))) { return getString(R.string.printer_description, host, printer.location); } else { return host; } }",d1fd42ae2fc258d9ebe9717aeae6ffa92aada5cd,"public java.lang.String getDescription(com.android.bips.discovery.DiscoveredPrinter printer) { if ((com.android.bips.p2p.P2pUtils.isP2p(printer)) || (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(this, printer))) { return getString(R.string.wifi_direct); } java.lang.String host = printer.getHost(); if (!(android.text.TextUtils.isEmpty(printer.location))) { return getString(R.string.printer_description, host, printer.location); } else { return host; } }",cc619669b3cf4853ae6da2d5cbf585a1a8d720e1,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_MdnsDiscovery.java,"@java.lang.Override void onStop() { if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, ""onStop()""); com.android.bips.discovery.NsdResolveQueue.getInstance(getPrintService()).clear(); for (com.android.bips.discovery.MdnsDiscovery.IppsDelay ippsDelay : mIppsDelays.values()) { mMainHandler.removeCallbacks(ippsDelay); } mIppsDelays.clear(); if ((mIppServiceListener) != null) { mNsdManager.stopServiceDiscovery(mIppServiceListener); mIppServiceListener = null; } if ((mIppsServiceListener) != null) { mNsdManager.stopServiceDiscovery(mIppsServiceListener); mIppsServiceListener = null; } mMainHandler.removeCallbacksAndMessages(null); com.android.bips.discovery.NsdResolveQueue.getInstance(getPrintService()).clear(); }",4a7de26e6e798ec91e63c9c3c37ff52689fca96d,"@java.lang.Override void onStop() { if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, (""onStop() "" + (mServiceName))); mToStop.forEach(Stoppable::stop); mToStop.clear(); }",da043b193acc595affe9505ae02bcd48ae8e7bdd,"@java.lang.Override void onStop() { if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, (""onStop() "" + (mServiceName))); android.net.nsd.NsdManager nsdManager = mNsdResolveQueue.getNsdManager(); for (com.android.bips.discovery.MdnsDiscovery.NsdServiceListener listener : mServiceListeners) { nsdManager.stopServiceDiscovery(listener); } mServiceListeners.clear(); for (com.android.bips.discovery.MdnsDiscovery.Resolver resolver : mResolvers) { resolver.cancel(); } mResolvers.clear(); }",d5142da28d7dc0c4bd9b93c5541d004ed31886a5,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_ManualDiscovery.java,"@java.lang.Override void onStart() { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, ""onStart""); for (com.android.bips.discovery.DiscoveredPrinter printer : mManualPrinters) { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, (""reporting "" + printer)); getPrintService().getCapabilitiesCache().evictOnNetworkChange(printer.getUri()); printerFound(printer); } }",ca1b704b302a441e70fd4aeb32900c961b3d14cf,"@java.lang.Override void onStart() { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, ""onStart""); mCapabilitiesCache = getPrintService().getCapabilitiesCache(); mWifiMonitor = new com.android.bips.util.WifiMonitor(getPrintService(), ( isConnected) -> { if (isConnected) { for (com.android.bips.discovery.DiscoveredPrinter printer : getSavedPrinters()) { mCapabilitiesCache.request(printer, false, ( capabilities) -> { if (capabilities != null) { printerFound(printer); } }); } } else { allPrintersLost(); } }); }",930dee6e901a42e514773f6c6d0cfa08fdc48b14,"@java.lang.Override void onStart() { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, ""onStart""); mWifiMonitor = new com.android.bips.util.WifiMonitor(getPrintService(), ( isConnected) -> { if (isConnected) { for (com.android.bips.discovery.DiscoveredPrinter printer : getSavedPrinters()) { mCapabilitiesCache.request(printer, false, ( capabilities) -> { if (capabilities != null) { printerFound(printer); } }); } } else { allPrintersLost(); } }); }",bc9bc646454f704eac9a33e347b41cd3a6725db0,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pDiscoveryProcedure.java,,,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { java.lang.String action = intent.getAction(); if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) { int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, (-1)); java.lang.Boolean enableState = state == (android.net.wifi.p2p.WifiP2pManager.WIFI_P2P_STATE_ENABLED); if (com.android.bips.p2p.P2pDiscoveryProcedure.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pDiscoveryProcedure.TAG, (""WIFI_P2P_STATE_CHANGED_ACTION: enabled="" + enableState)); if (enableState) { mP2pManager.stopPeerDiscovery(mChannel, null); mP2pManager.discoverPeers(mChannel, null); } } else if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) { android.net.wifi.p2p.WifiP2pDeviceList list = intent.getParcelableExtra(WifiP2pManager.EXTRA_P2P_DEVICE_LIST); java.util.Collection<android.net.wifi.p2p.WifiP2pDevice> newPeers = list.getDeviceList(); updatePeers(newPeers); if (newPeers.isEmpty()) { mP2pManager.stopPeerDiscovery(mChannel, null); mP2pManager.discoverPeers(mChannel, null); } } }",af96b48bc091a478dd1d2072dea7469cb452c432,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { java.lang.String action = intent.getAction(); if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) { int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, (-1)); boolean isP2pEnabled = state == (android.net.wifi.p2p.WifiP2pManager.WIFI_P2P_STATE_ENABLED); if (com.android.bips.p2p.P2pDiscoveryProcedure.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pDiscoveryProcedure.TAG, (""WIFI_P2P_STATE_CHANGED_ACTION: enabled="" + isP2pEnabled)); if (isP2pEnabled) { mP2pManager.stopPeerDiscovery(mChannel, null); mP2pManager.discoverPeers(mChannel, null); } } else if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) { android.net.wifi.p2p.WifiP2pDeviceList list = intent.getParcelableExtra(WifiP2pManager.EXTRA_P2P_DEVICE_LIST); java.util.Collection<android.net.wifi.p2p.WifiP2pDevice> newPeers = list.getDeviceList(); updatePeers(newPeers); if (newPeers.isEmpty()) { mP2pManager.stopPeerDiscovery(mChannel, null); mP2pManager.discoverPeers(mChannel, null); } } }",1a72e2ee91c93f59028382adafc2cdd2b1459123,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_P2pDiscovery.java,,,"@java.lang.Override void onStop() { if (com.android.bips.discovery.P2pDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.P2pDiscovery.TAG, ""onStop()""); if ((mPeerDiscovery) != null) { mPeerDiscovery.stop(); mPeerDiscovery = null; allPrintersLost(); } }",c0104b87c3b50a92b8641412e4ac483653284e6c,"@java.lang.Override void onStop() { if (com.android.bips.discovery.P2pDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.P2pDiscovery.TAG, ""onStop()""); if (mDiscoveringPeers) { mDiscoveringPeers = false; getPrintService().getP2pMonitor().stopDiscover(this); allPrintersLost(); } }",4aa61ba738dfacde8dd442bcbc01a473be2cfe38,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_P2pDiscovery.java,,,public void addValidPrinter(com.android.bips.discovery.DiscoveredPrinter printer) { if (addSavedPrinter(printer)) { printerFound(printer); if (isStarted()) startPeerDiscovery(); } },77371d1e36ce9a5f8b81fa7f81941585b2f5f9fd,public void addValidPrinter(com.android.bips.discovery.DiscoveredPrinter printer) { if (addSavedPrinter(printer)) { printerFound(printer); if (isStarted()) { startPeerDiscovery(); } } },fda4216ac359e656eb11117369f80c53f355ba61,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pUtils.java,,,private static java.net.NetworkInterface toNetworkInterface(java.lang.String name) { if (name == null) return null; try { return java.net.NetworkInterface.getByName(name); } catch (java.net.SocketException e) { return null; } },3ba09f9f63482a67a2f1a89cf2996de8f958069a,private static java.net.NetworkInterface toNetworkInterface(java.lang.String name) { if (name == null) { return null; } try { return java.net.NetworkInterface.getByName(name); } catch (java.net.SocketException e) { return null; } },63eb4c8f0a467025198823c0aad30818d97975e6,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pUtils.java,,,private static java.net.Inet4Address toInet4Address(android.net.Uri path) { if (!(com.android.bips.p2p.P2pUtils.IPV4_PATTERN.matcher(path.getHost()).find())) return null; try { return ((java.net.Inet4Address) (java.net.InetAddress.getByName(path.getHost()))); } catch (java.net.UnknownHostException ignored) { } return null; },23b255a759eb93b836566f1d5f464b3a02feb72a,private static java.net.Inet4Address toInet4Address(android.net.Uri path) { if (!(com.android.bips.p2p.P2pUtils.IPV4_PATTERN.matcher(path.getHost()).find())) { return null; } try { return ((java.net.Inet4Address) (java.net.InetAddress.getByName(path.getHost()))); } catch (java.net.UnknownHostException ignored) { } return null; },9279931ba56d44cddb143b117c1be03d370822ee,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pUtils.java,,,"static boolean isOnInterface(java.net.NetworkInterface iface, java.net.Inet4Address address) { long addressLong = com.android.bips.p2p.P2pUtils.toLong(address); for (java.net.InterfaceAddress ifaceAddress : iface.getInterfaceAddresses()) { if (!((ifaceAddress.getAddress()) instanceof java.net.Inet4Address)) continue; java.net.Inet4Address networkAddress = ((java.net.Inet4Address) (ifaceAddress.getAddress())); java.util.BitSet bitSet = new java.util.BitSet(32); bitSet.set((32 - (ifaceAddress.getNetworkPrefixLength())), 32); long netMask = bitSet.toLongArray()[0]; if (((com.android.bips.p2p.P2pUtils.toLong(networkAddress)) & netMask) == (addressLong & netMask)) { return true; } } return false; }",e0bf9afdada64d2eff1d3ef23b4d20a6ccf2bef9,"static boolean isOnInterface(java.net.NetworkInterface iface, java.net.Inet4Address address) { long addressLong = com.android.bips.p2p.P2pUtils.toLong(address); for (java.net.InterfaceAddress ifaceAddress : iface.getInterfaceAddresses()) { if (!((ifaceAddress.getAddress()) instanceof java.net.Inet4Address)) { continue; } java.net.Inet4Address networkAddress = ((java.net.Inet4Address) (ifaceAddress.getAddress())); java.util.BitSet bitSet = new java.util.BitSet(32); bitSet.set((32 - (ifaceAddress.getNetworkPrefixLength())), 32); long netMask = bitSet.toLongArray()[0]; if (((com.android.bips.p2p.P2pUtils.toLong(networkAddress)) & netMask) == (addressLong & netMask)) { return true; } } return false; }",5d765c15417e15627816fe2bab686e8608d7b568,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pDiscoveryProcedure.java,,,"@java.lang.Override public void stop() { if (com.android.bips.p2p.P2pDiscoveryProcedure.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pDiscoveryProcedure.TAG, ""stop()""); mBroadcasts.stop(); mP2pManager.stopPeerDiscovery(mChannel, null); }",7081c0be316a9824ee90dcfef114ca465e0bd5cf,"public void cancel() { if (com.android.bips.p2p.P2pDiscoveryProcedure.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pDiscoveryProcedure.TAG, ""stop()""); mBroadcastMonitor.close(); if ((mChannel) != null) { mP2pManager.stopPeerDiscovery(mChannel, null); mChannel.close(); mChannel = null; } }",8effe85f85be91ed77c90afa5d8de7ff3087b54b,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_Discovery.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.util.Collection<com.android.bips.discovery.DiscoveredPrinter> getSavedPrinters() { return getChildren().stream().filter(( child) -> child != (this)).flatMap(( child) -> child.getSavedPrinters().stream()).collect(java.util.stream.Collectors.toList()); },bb5a676e6e20b4ee27feac9f254860733ae4006b,public java.util.Collection<com.android.bips.discovery.DiscoveredPrinter> getSavedPrinters() { java.util.List<com.android.bips.discovery.DiscoveredPrinter> printers = new java.util.ArrayList<>(); for (com.android.bips.discovery.Discovery child : getChildren()) { if (child != (this)) { printers.addAll(child.getSavedPrinters()); } } return printers; },916767aee8268d8eec2150b56a098ed4edb7438b,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pDiscoveryProcedure.java,,,"private WifiP2pDevice getDevice(java.util.Collection<WifiP2pDevice> peers, java.lang.String address) { for (WifiP2pDevice found : peers) { if (found.deviceAddress.equals(address)) return found; } return null; }",a597d4e85221b3698f0c2a26a76173602836ebd6,"private WifiP2pDevice getDevice(java.util.Collection<WifiP2pDevice> peers, java.lang.String address) { for (WifiP2pDevice found : peers) { if (found.deviceAddress.equals(address)) { return found; } } return null; }",be0f8bb653aa41f529bbd44109a0b6bf53e6c383,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pDiscoveryProcedure.java,,,"private void updatePeers(java.util.Collection<android.net.wifi.p2p.WifiP2pDevice> newPeers) { java.util.List<android.net.wifi.p2p.WifiP2pDevice> oldPeers = new java.util.ArrayList(mPeers); mPeers.clear(); for (android.net.wifi.p2p.WifiP2pDevice peer : newPeers) { if (com.android.bips.p2p.P2pDiscoveryProcedure.PRINTER_PATTERN.matcher(peer.primaryDeviceType).find()) { mPeers.add(peer); } } java.util.Set<java.lang.String> foundAddresses = new java.util.HashSet<>(); for (android.net.wifi.p2p.WifiP2pDevice peer : mPeers) { foundAddresses.add(peer.deviceAddress); android.net.wifi.p2p.WifiP2pDevice old = getDevice(oldPeers, peer.deviceAddress); if ((old == null) || (!(old.equals(peer)))) { mListeners.forEach(( listener) -> listener.onPeerFound(peer)); } } for (android.net.wifi.p2p.WifiP2pDevice oldPeer : oldPeers) { if (!(foundAddresses.contains(oldPeer.deviceAddress))) { mListeners.forEach(( listener) -> listener.onPeerLost(oldPeer)); } } }",d3facf45e31278c37ecb9c7c77fdf6cc952b2a3a,"private void updatePeers(java.util.Collection<android.net.wifi.p2p.WifiP2pDevice> newPeers) { java.util.List<android.net.wifi.p2p.WifiP2pDevice> oldPeers = new java.util.ArrayList(mPeers); mPeers.clear(); for (android.net.wifi.p2p.WifiP2pDevice peer : newPeers) { if (com.android.bips.p2p.P2pDiscoveryProcedure.PRINTER_PATTERN.matcher(peer.primaryDeviceType).find()) { mPeers.add(peer); } } java.util.Set<java.lang.String> foundAddresses = new java.util.HashSet<>(); for (android.net.wifi.p2p.WifiP2pDevice peer : mPeers) { foundAddresses.add(peer.deviceAddress); android.net.wifi.p2p.WifiP2pDevice old = getDevice(oldPeers, peer.deviceAddress); if ((old == null) || (!(old.equals(peer)))) { for (com.android.bips.p2p.P2pPeerListener listener : mListeners) { listener.onPeerFound(peer); } } } for (android.net.wifi.p2p.WifiP2pDevice oldPeer : oldPeers) { if (!(foundAddresses.contains(oldPeer.deviceAddress))) { for (com.android.bips.p2p.P2pPeerListener listener : mListeners) { listener.onPeerLost(oldPeer); } } } }",8465466e995eefe348fe63eb01af7d584be57297,2018-01-17 01:43:24,4
583630,src_com_android_bips_ui_FindP2pPrintersFragment.java,,,"@java.lang.Override public void onResume() { super.onResume(); if (com.android.bips.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.FindP2pPrintersFragment.TAG, ""onResume""); getActivity().setTitle(R.string.wifi_direct_printers); getContext().bindService(new android.content.Intent(getContext(), com.android.bips.BuiltInPrintService.class), this, Context.BIND_AUTO_CREATE); }",0646b894a3c017625049f7c691881c0cf3984047,"@java.lang.Override public void onStart() { super.onStart(); if (com.android.bips.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.FindP2pPrintersFragment.TAG, ""onStart""); getActivity().setTitle(R.string.wifi_direct_printers); getContext().bindService(new android.content.Intent(getContext(), com.android.bips.BuiltInPrintService.class), this, Context.BIND_AUTO_CREATE); }",38b103c6bc1e667619f27e6d993830d3d2c2a04b,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_ManualDiscovery.java,"@java.lang.Override public void onCapabilities(com.android.bips.discovery.DiscoveredPrinter printer, com.android.bips.jni.LocalPrinterCapabilities capabilities) { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, (""onCapabilities: "" + capabilities)); mUris.remove(printer.getUri()); if (capabilities == null) { if (mUris.isEmpty()) { mFinalCallback.onNotFound(); } return; } getPrintService().getCapabilitiesCache().cancel(this); android.net.Uri uuid = (android.text.TextUtils.isEmpty(capabilities.uuid)) ? null : android.net.Uri.parse(capabilities.uuid); java.lang.String name = (android.text.TextUtils.isEmpty(capabilities.name)) ? printer.getUri().getHost() : capabilities.name; com.android.bips.discovery.DiscoveredPrinter resolvedPrinter = new com.android.bips.discovery.DiscoveredPrinter(uuid, name, printer.getUri(), capabilities.location); if (capabilities.isSupported) { addManualPrinter(resolvedPrinter); } mFinalCallback.onFound(resolvedPrinter, capabilities.isSupported); }",01df5b6b7b168b93654de8651111941fab74b206,"void handleCapabilities(android.net.Uri printerPath, com.android.bips.jni.LocalPrinterCapabilities capabilities) { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, (((""request "" + printerPath) + "" cap="") + capabilities)); if (capabilities == null) { if (mRequests.isEmpty()) { mFinalCallback.onNotFound(); } return; } mRequests.forEach(mCapabilitiesCache::cancel); mRequests.clear(); android.net.Uri uuid = (android.text.TextUtils.isEmpty(capabilities.uuid)) ? null : android.net.Uri.parse(capabilities.uuid); java.lang.String name = (android.text.TextUtils.isEmpty(capabilities.name)) ? printerPath.getHost() : capabilities.name; com.android.bips.discovery.DiscoveredPrinter resolvedPrinter = new com.android.bips.discovery.DiscoveredPrinter(uuid, name, printerPath, capabilities.location); if (capabilities.isSupported) { if (addSavedPrinter(resolvedPrinter)) { printerFound(resolvedPrinter); } } mFinalCallback.onFound(resolvedPrinter, capabilities.isSupported); }",aba5606ac6f6a99697d7bbe096dbc445a4dca3a9,"void handleCapabilities(android.net.Uri printerPath, com.android.bips.jni.LocalPrinterCapabilities capabilities) { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, (((""request "" + printerPath) + "" cap="") + capabilities)); if (capabilities == null) { if (mRequests.isEmpty()) { mFinalCallback.onNotFound(); } return; } for (com.android.bips.ipp.CapabilitiesCache.OnLocalPrinterCapabilities request : mRequests) { mCapabilitiesCache.cancel(request); } mRequests.clear(); android.net.Uri uuid = (android.text.TextUtils.isEmpty(capabilities.uuid)) ? null : android.net.Uri.parse(capabilities.uuid); java.lang.String name = (android.text.TextUtils.isEmpty(capabilities.name)) ? printerPath.getHost() : capabilities.name; com.android.bips.discovery.DiscoveredPrinter resolvedPrinter = new com.android.bips.discovery.DiscoveredPrinter(uuid, name, printerPath, capabilities.location); if (capabilities.isSupported) { if (addSavedPrinter(resolvedPrinter)) { printerFound(resolvedPrinter); } } mFinalCallback.onFound(resolvedPrinter, capabilities.isSupported); }",7c27ad81947dbc2b4db43ad79256366100e1f832,2018-01-17 01:43:24,4
583630,src_com_android_bips_ui_FindP2pPrintersFragment.java,,,"@java.lang.Override public void onPeerFound(android.net.wifi.p2p.WifiP2pDevice peer) { if (com.android.bips.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.FindP2pPrintersFragment.TAG, (""onPeerFound: "" + (com.android.bips.p2p.P2pMonitor.toString(peer)))); if ((mPrintService) == null) return; DiscoveredPrinter printer = com.android.bips.discovery.P2pDiscovery.toPrinter(peer); for (DiscoveredPrinter prior : mPrintService.getP2pDiscovery().getSavedPrinters()) { if (prior.path.equals(printer.path)) return; } com.android.bips.ui.PrinterPreference pref = getPrinterPreference(printer.getUri()); if (pref != null) { pref.updatePrinter(printer); } else { pref = new com.android.bips.ui.PrinterPreference(getContext(), mPrintService, printer, true); pref.setOnPreferenceClickListener(( preference) -> { if (com.android.bips.ui.DEBUG) android.util.Log.d(com.android.bips.ui.TAG, (""add "" + (com.android.bips.discovery.P2pDiscovery.toPrinter(peer)))); new <com.android.bips.ui.mPrintService>com.android.bips.ui.AddP2pPrinterDialog(this, peer).show(); return true; }); mAvailableCategory.addPreference(pref); } }",ae7398c54bbac43f0b9db0a1270ed16ac911099e,"@java.lang.Override public void onPeerFound(android.net.wifi.p2p.WifiP2pDevice peer) { if (com.android.bips.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.FindP2pPrintersFragment.TAG, (""onPeerFound: "" + (com.android.bips.p2p.P2pMonitor.toString(peer)))); if ((mPrintService) == null) { return; } DiscoveredPrinter printer = com.android.bips.discovery.P2pDiscovery.toPrinter(peer); for (DiscoveredPrinter prior : mPrintService.getP2pDiscovery().getSavedPrinters()) { if (prior.path.equals(printer.path)) { return; } } com.android.bips.ui.PrinterPreference pref = getPrinterPreference(printer.getUri()); if (pref != null) { pref.updatePrinter(printer); } else { pref = new com.android.bips.ui.PrinterPreference(getContext(), mPrintService, printer, true); pref.setOnPreferenceClickListener(( preference) -> { if (com.android.bips.ui.DEBUG) android.util.Log.d(com.android.bips.ui.TAG, (""add "" + (com.android.bips.discovery.P2pDiscovery.toPrinter(peer)))); new <com.android.bips.ui.mPrintService>com.android.bips.ui.AddP2pPrinterDialog(this, peer).show(); return true; }); mAvailableCategory.addPreference(pref); } }",db70ac449bb7629d2131da617ea7388a2771a44f,2018-01-17 01:43:24,4
583630,src_com_android_bips_ui_FindP2pPrintersFragment.java,,,"@java.lang.Override public void onServiceConnected(android.content.ComponentName componentName, android.os.IBinder iBinder) { if (com.android.bips.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.FindP2pPrintersFragment.TAG, ""onServiceConnected""); mPrintService = com.android.bips.BuiltInPrintService.getInstance(); if ((mPrintService) == null) return; if ((getContext().checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION)) != (android.content.pm.PackageManager.PERMISSION_GRANTED)) { getActivity().requestPermissions(new java.lang.String[]{ Manifest.permission.ACCESS_COARSE_LOCATION }, com.android.bips.ui.FindP2pPrintersFragment.REQUEST_PERMISSION); } else { startP2pDiscovery(); } }",268c3b3888f74a3917229aebd67e9d7ca71a80dd,"@java.lang.Override public void onServiceConnected(android.content.ComponentName componentName, android.os.IBinder iBinder) { if (com.android.bips.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.FindP2pPrintersFragment.TAG, ""onServiceConnected""); mPrintService = com.android.bips.BuiltInPrintService.getInstance(); if ((mPrintService) == null) { return; } if ((getContext().checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION)) != (android.content.pm.PackageManager.PERMISSION_GRANTED)) { getActivity().requestPermissions(new java.lang.String[]{ Manifest.permission.ACCESS_COARSE_LOCATION }, com.android.bips.ui.FindP2pPrintersFragment.REQUEST_PERMISSION); } else { startP2pDiscovery(); } }",a798c037c24db747ff1bdc0bf696e3f27420912f,2018-01-17 01:43:24,4
583630,src_com_android_bips_ui_FindP2pPrintersFragment.java,,,private void startP2pDiscovery() { if (((mPrintService) != null) && ((mPeerDiscovery) == null)) { mPeerDiscovery = mPrintService.getP2pMonitor().discover(new com.android.bips.ui.FindP2pPrintersFragment.P2pListener()); } },1bef0476f836544e72c79a1e95ff6659bb7dc68b,private void startP2pDiscovery() { if (((mPrintService) != null) && ((mPeerDiscoveryListener) == null)) { mPeerDiscoveryListener = new com.android.bips.ui.FindP2pPrintersFragment.P2pListener(); mPrintService.getP2pMonitor().discover(mPeerDiscoveryListener); } },28dd61ad3b663f0e56c641da1f56caa7bbd954ea,2018-01-17 01:43:24,4
583630,src_com_android_bips_ui_FindP2pPrintersFragment.java,,,"@java.lang.Override public void onPeerLost(android.net.wifi.p2p.WifiP2pDevice peer) { if (com.android.bips.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.FindP2pPrintersFragment.TAG, (""onPeerLost: "" + (com.android.bips.p2p.P2pMonitor.toString(peer)))); if ((mPrintService) == null) return; com.android.bips.discovery.DiscoveredPrinter printer = com.android.bips.discovery.P2pDiscovery.toPrinter(peer); com.android.bips.ui.PrinterPreference pref = getPrinterPreference(printer.path); if (pref != null) { mAvailableCategory.removePreference(pref); } }",67ffe65d85b3853b0649750fe048980d4a86dc44,"@java.lang.Override public void onPeerLost(android.net.wifi.p2p.WifiP2pDevice peer) { if (com.android.bips.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.FindP2pPrintersFragment.TAG, (""onPeerLost: "" + (com.android.bips.p2p.P2pMonitor.toString(peer)))); if ((mPrintService) == null) { return; } com.android.bips.discovery.DiscoveredPrinter printer = com.android.bips.discovery.P2pDiscovery.toPrinter(peer); com.android.bips.ui.PrinterPreference pref = getPrinterPreference(printer.path); if (pref != null) { mAvailableCategory.removePreference(pref); } }",c89a4ddc761d68cbc8bc612e30e8ef0b392eb533,2018-01-17 01:43:24,4
583630,src_com_android_bips_ui_FindP2pPrintersFragment.java,,,"@java.lang.Override public void onPause() { super.onPause(); if (com.android.bips.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.FindP2pPrintersFragment.TAG, ""onPause""); if ((mPeerDiscovery) != null) { mPeerDiscovery.stop(); mPeerDiscovery = null; } getContext().unbindService(this); mPrintService = null; }",ce821852504ce738b2983c7793511dab2df3b451,"@java.lang.Override public void onStop() { super.onStop(); if (com.android.bips.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.FindP2pPrintersFragment.TAG, ""onStop""); if ((mPeerDiscoveryListener) != null) { mPrintService.getP2pMonitor().stopDiscover(mPeerDiscoveryListener); mPeerDiscoveryListener = null; } getContext().unbindService(this); mPrintService = null; }",eaa05a915990b84b0c5c4f6b8005a9e06f4af226,2018-01-17 01:43:24,4
583630,src_com_android_bips_util_PriorityLock.java,,,"public synchronized void unlock() { if (!(mLocked)) throw new java.lang.IllegalArgumentException(""not locked""); mLocked = false; notifyAll(); }",40dd762170d6156a4e1466374daa0343b13d4e8b,"public synchronized void unlock() { if (!(mLocked)) { throw new java.lang.IllegalArgumentException(""not locked""); } mLocked = false; notifyAll(); }",f101f306230b347eba1771dcd9097576b9159a4b,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_Discovery.java,void allPrintersLost() { for (com.android.bips.discovery.DiscoveredPrinter printer : mPrinters.values()) { for (com.android.bips.discovery.Discovery.Listener listener : mListeners) { listener.onPrinterLost(printer); } } mPrinters.clear(); },12b246f59281c740ab267aa861d5e8ac5495e92b,void allPrintersLost() { new java.util.ArrayList(mPrinters.keySet()).forEach(this::printerLost); },bd5747258bc6696cd3c641a0c967ee5dac7c1339,void allPrintersLost() { for (android.net.Uri uri : new java.util.ArrayList(mPrinters.keySet())) { printerLost(uri); } },00e4a4f2ba327ab05c3f5219dca014a3049380e6,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_NsdResolveQueue.java,"public void resolve(android.net.nsd.NsdManager nsdManager, android.net.nsd.NsdServiceInfo serviceInfo, android.net.nsd.NsdManager.ResolveListener listener) { if (com.android.bips.discovery.NsdResolveQueue.DEBUG) { android.util.Log.d(com.android.bips.discovery.NsdResolveQueue.TAG, (((""Adding resolve of "" + (serviceInfo.getServiceName())) + "" to queue size="") + (mResolveRequests.size()))); } mResolveRequests.addLast(new com.android.bips.discovery.NsdResolveQueue.NsdResolveRequest(nsdManager, serviceInfo, listener)); if ((mResolveRequests.size()) == 1) { resolveNextRequest(); } }",66dccfbab656cc88ac99bdbbfce6e611502db435,"public com.android.bips.util.Stoppable resolve(android.net.nsd.NsdServiceInfo serviceInfo, android.net.nsd.NsdManager.ResolveListener listener) { if (com.android.bips.discovery.NsdResolveQueue.DEBUG) { android.util.Log.d(com.android.bips.discovery.NsdResolveQueue.TAG, (((""Adding resolve of "" + (serviceInfo.getServiceName())) + "" to queue size="") + (mResolveRequests.size()))); } com.android.bips.discovery.NsdResolveQueue.NsdResolveRequest request = new com.android.bips.discovery.NsdResolveQueue.NsdResolveRequest(mNsdManager, serviceInfo, listener); mResolveRequests.addLast(request); if ((mResolveRequests.size()) == 1) { resolveNextRequest(); } return () -> { if ((mResolveRequests.contains(request)) && ((mResolveRequests.get(0)) != request)) { mResolveRequests.remove(request); } }; }",453e154a854cca3dce5a3fdfbc1ba186eb7a82fb,"public com.android.bips.discovery.NsdResolveQueue.NsdResolveRequest resolve(android.net.nsd.NsdServiceInfo serviceInfo, android.net.nsd.NsdManager.ResolveListener listener) { if (com.android.bips.discovery.NsdResolveQueue.DEBUG) { android.util.Log.d(com.android.bips.discovery.NsdResolveQueue.TAG, (((""Adding resolve of "" + (serviceInfo.getServiceName())) + "" to queue size="") + (mResolveRequests.size()))); } com.android.bips.discovery.NsdResolveQueue.NsdResolveRequest request = new com.android.bips.discovery.NsdResolveQueue.NsdResolveRequest(mNsdManager, serviceInfo, listener); mResolveRequests.addLast(request); if ((mResolveRequests.size()) == 1) { resolveNextRequest(); } return request; }",4825d4fdd4c3b4938eab63765d79b67045cff42d,2018-01-17 01:43:24,4
583630,src_com_android_bips_util_WifiMonitor.java,public static boolean isConnected(android.content.Context context) { android.net.ConnectivityManager cm = ((android.net.ConnectivityManager) (context.getSystemService(Context.CONNECTIVITY_SERVICE))); for (android.net.Network network : cm.getAllNetworks()) { android.net.NetworkInfo networkInfo = cm.getNetworkInfo(network); if (((networkInfo != null) && (networkInfo.isConnected())) && ((networkInfo.getType()) == (android.net.ConnectivityManager.TYPE_WIFI))) { return true; } } return false; },b3672ff1801ef9d941de907f3e765c6b5a133e61,"@java.lang.Override public void stop() { if (com.android.bips.util.WifiMonitor.DEBUG) android.util.Log.d(com.android.bips.util.WifiMonitor.TAG, ""stop()""); if ((mBroadcasts) != null) mBroadcasts.stop(); mListener = null; }",1a7e5a5e267533114ce819aef056b4a2395c3f4f,"public void close() { if (com.android.bips.util.WifiMonitor.DEBUG) android.util.Log.d(com.android.bips.util.WifiMonitor.TAG, ""close()""); if ((mBroadcasts) != null) { mBroadcasts.close(); } mListener = null; }",fa9f0943eb1f3e2f47ea426377c017ce40c1fd1b,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pDiscoveryProcedure.java,,,void addListener(com.android.bips.p2p.P2pPeerListener listener) { mListeners.add(listener); if (!(mPeers.isEmpty())) { new android.os.Handler(android.os.Looper.getMainLooper()).post(() -> { if (mListeners.contains(listener)) { mPeers.forEach(listener::onPeerFound); } }); } },f059a0af06267bbc3e943eefbdaa38a1004f1830,void addListener(com.android.bips.p2p.P2pPeerListener listener) { mListeners.add(listener); if (!(mPeers.isEmpty())) { for (android.net.wifi.p2p.WifiP2pDevice peer : mPeers) { listener.onPeerFound(peer); } } },98219a17df1ae0cf8ccec6956187407fb45466cf,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_MdnsDiscovery.java,"@java.lang.Override public void onServiceFound(final android.net.nsd.NsdServiceInfo info) { if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, (""onServiceFound - "" + (info.getServiceName()))); com.android.bips.discovery.NsdResolveQueue.getInstance(getPrintService()).resolve(mNsdManager, info, this); }",ef057859ac386fb3f2c6956527b397f924870790,"@java.lang.Override public void onServiceFound(final android.net.nsd.NsdServiceInfo info) { if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, (((""found "" + (mServiceName)) + "" name="") + (info.getServiceName()))); getHandler().post(() -> com.android.bips.discovery.mToStop.add(new com.android.bips.discovery.Resolver(info))); }",cf625ad8cbde76b1e626bb05cb4e72e4c802ee3c,"@java.lang.Override public void onServiceFound(final android.net.nsd.NsdServiceInfo info) { if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, (((""found "" + (mServiceName)) + "" name="") + (info.getServiceName()))); getHandler().post(() -> com.android.bips.discovery.mResolvers.add(new com.android.bips.discovery.Resolver(info))); }",bc135ef272b979df512633d9f46075cd0fff4311,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_ManualDiscovery.java,"@java.lang.Override void onStop() { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, ""onStop""); }",92edc600b02ac2f0a6dbc7146dbbde1d2f3ed132,"@java.lang.Override void onStop() { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, ""onStop""); mWifiMonitor.stop(); allPrintersLost(); }",41421a5f8c531de0601d0cb8ee064da6eaa825f8,"@java.lang.Override void onStop() { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, ""onStop""); mWifiMonitor.close(); allPrintersLost(); }",cec3bb4fbdc848fef77beb92e6a83b655245ad1b,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_MdnsDiscovery.java,"@java.lang.Override public void onServiceResolved(final android.net.nsd.NsdServiceInfo info) { final com.android.bips.discovery.DiscoveredPrinter printer = com.android.bips.discovery.MdnsDiscovery.toNetworkPrinter(info); if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, (((""Service "" + (info.getServiceName())) + "" resolved to "") + printer)); if (printer == null) { return; } android.net.Uri printerUri = printer.getUri(); if (printer.path.getScheme().equals(com.android.bips.discovery.MdnsDiscovery.SCHEME_IPPS)) { com.android.bips.discovery.DiscoveredPrinter oldPrinter = getPrinter(printerUri); com.android.bips.discovery.MdnsDiscovery.IppsDelay ippsDelay = mIppsDelays.get(printerUri); if ((oldPrinter == null) && (ippsDelay == null)) { mIppsDelays.put(printerUri, new com.android.bips.discovery.MdnsDiscovery.IppsDelay(printer)); } return; } else { cancelIppsDelay(printerUri); } mMainHandler.post(() -> printerFound(printer)); }",f899acaf5b55fdc3617f7f79a1b4d641e19cdd30,"@java.lang.Override public void onServiceResolved(final android.net.nsd.NsdServiceInfo info) { mToStop.remove(this); mResolve = null; if (!(isStarted())) return; com.android.bips.discovery.DiscoveredPrinter printer = com.android.bips.discovery.MdnsDiscovery.toNetworkPrinter(info); if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, (((""Service "" + (info.getServiceName())) + "" resolved to "") + printer)); if (printer == null) return; printerFound(printer); }",b4b88cd28318b457f4bde1bc3cf872393bc8352c,"@java.lang.Override public void onServiceResolved(final android.net.nsd.NsdServiceInfo info) { mResolvers.remove(this); if (!(isStarted())) { return; } com.android.bips.discovery.DiscoveredPrinter printer = com.android.bips.discovery.MdnsDiscovery.toNetworkPrinter(info); if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, (((""Service "" + (info.getServiceName())) + "" resolved to "") + printer)); if (printer == null) { return; } printerFound(printer); }",30564cadef8b835a69482ebb0852a47b38ce4384,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_MultiDiscovery.java,"@java.lang.Override void onStart() { if (com.android.bips.discovery.MultiDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MultiDiscovery.TAG, ""onStart()""); mWifiMonitor = mWifiMonitorFactory.create(getPrintService(), ( connected) -> { if (connected) { if (com.android.bips.discovery.MultiDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MultiDiscovery.TAG, ""Connected, starting discovery""); for (com.android.bips.discovery.Discovery discovery : mDiscoveries) { discovery.start(mChildListener); } } else { if (com.android.bips.discovery.MultiDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MultiDiscovery.TAG, ""Disconnected, stopping discovery""); for (com.android.bips.discovery.Discovery discovery : mDiscoveries) { discovery.stop(mChildListener); } allPrintersLost(); } }); }",a62a011f51b1af8b43dd8222c43e01bf864b44eb,"@java.lang.Override void onStart() { if (com.android.bips.discovery.MultiDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MultiDiscovery.TAG, ""onStart()""); for (com.android.bips.discovery.Discovery discovery : mDiscoveries) { mStarted.add(discovery.start(mChildListener)); } }",8c2472e1257f3a2f56ebc12096f61a2702eb8a38,"@java.lang.Override void onStart() { if (com.android.bips.discovery.MultiDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MultiDiscovery.TAG, ""onStart()""); for (com.android.bips.discovery.Discovery discovery : mDiscoveries) { discovery.start(mChildListener); mStartedDiscoveries.add(discovery); } }",e67806b191e45e235768e73dbc65ce34ce1f66fb,2018-01-17 01:43:24,4
583630,src_com_android_bips_LocalDiscoverySessionInfo.java,,,"private void load() { if (!(mCacheFile.exists())) return; try (android.util.JsonReader reader = new android.util.JsonReader(new java.io.FileReader(mCacheFile))) { reader.beginObject(); while (reader.hasNext()) { switch (reader.nextName()) { case com.android.bips.LocalDiscoverySessionInfo.NAME_KNOWN_GOOD : mKnownGood.addAll(loadPrinterIds(reader)); break; case com.android.bips.LocalDiscoverySessionInfo.NAME_PRIORITY : mPriority.addAll(loadPrinterIds(reader)); break; default : reader.skipValue(); break; } } reader.endObject(); } catch (java.io.IOException e) { android.util.Log.w(com.android.bips.LocalDiscoverySessionInfo.TAG, (""Failed to read info from "" + (com.android.bips.LocalDiscoverySessionInfo.CACHE_FILE)), e); } }",803f0a742740335c4fba12dcaccc013d296f6230,"private void load() { if (!(mCacheFile.exists())) { return; } try (android.util.JsonReader reader = new android.util.JsonReader(new java.io.FileReader(mCacheFile))) { reader.beginObject(); while (reader.hasNext()) { switch (reader.nextName()) { case com.android.bips.LocalDiscoverySessionInfo.NAME_KNOWN_GOOD : mKnownGood.addAll(loadPrinterIds(reader)); break; case com.android.bips.LocalDiscoverySessionInfo.NAME_PRIORITY : mPriority.addAll(loadPrinterIds(reader)); break; default : reader.skipValue(); break; } } reader.endObject(); } catch (java.io.IOException e) { android.util.Log.w(com.android.bips.LocalDiscoverySessionInfo.TAG, (""Failed to read info from "" + (com.android.bips.LocalDiscoverySessionInfo.CACHE_FILE)), e); } }",d3a762d84578f99ff2e558a40b8cbef223e4db10,2018-01-17 01:43:24,4
583630,src_com_android_bips_LocalDiscoverySession.java,"@java.lang.Override public void onStopPrinterDiscovery() { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ""onStopPrinterDiscovery()""); mPrintService.getDiscovery().stop(this); android.print.PrintManager printManager = mPrintService.getSystemService(android.print.PrintManager.class); printManager.removePrintServicesChangeListener(this); printManager.removePrintServiceRecommendationsChangeListener(this); if ((mExpirePrinters) != null) { mPrintService.getMainHandler().removeCallbacks(mExpirePrinters); mExpirePrinters = null; } }",f647795a20c041c1fc6364f72258b5eadd549cc7,"@java.lang.Override public void onStopPrinterDiscovery() { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ""onStopPrinterDiscovery()""); mDiscover.stop(); android.print.PrintManager printManager = mPrintService.getSystemService(android.print.PrintManager.class); printManager.removePrintServicesChangeListener(this); printManager.removePrintServiceRecommendationsChangeListener(this); if ((mExpirePrinters) != null) { mExpirePrinters.stop(); mExpirePrinters = null; } }",2e294447ef92fec36f3f3538bf9ee98af3993fb3,"@java.lang.Override public void onStopPrinterDiscovery() { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ""onStopPrinterDiscovery()""); mPrintService.getDiscovery().stop(this); android.print.PrintManager printManager = mPrintService.getSystemService(android.print.PrintManager.class); printManager.removePrintServicesChangeListener(this); printManager.removePrintServiceRecommendationsChangeListener(this); if ((mExpirePrinters) != null) { mExpirePrinters.cancel(); mExpirePrinters = null; } }",b3236cb41c8673c6ac6f842ed63d41dde56b084e,2018-01-17 01:43:24,4
583630,src_com_android_bips_LocalPrinter.java,"void requestCapabilities() { mPrintService.getCapabilitiesCache().request(mDiscoveredPrinter, mSession.isPriority(mPrinterId), this); }",8cf8d3027eda00b2c373aa1638e9f540cfaa3173,"@java.lang.Override public void onCapabilities(com.android.bips.jni.LocalPrinterCapabilities capabilities) { if ((mSession.isDestroyed()) || (!(mSession.isKnown(mPrinterId)))) return; if (capabilities == null) { if (com.android.bips.LocalPrinter.DEBUG) android.util.Log.d(com.android.bips.LocalPrinter.TAG, (""No capabilities so removing printer "" + (this))); mSession.removePrinters(java.util.Collections.singletonList(mPrinterId)); } else { mCapabilities = capabilities; mSession.handlePrinter(this); } }",20f64eb70979e2c651d5750fec4afb71de0a71ef,"@java.lang.Override public void onCapabilities(com.android.bips.jni.LocalPrinterCapabilities capabilities) { if ((mSession.isDestroyed()) || (!(mSession.isKnown(mPrinterId)))) { return; } if (capabilities == null) { if (com.android.bips.LocalPrinter.DEBUG) android.util.Log.d(com.android.bips.LocalPrinter.TAG, (""No capabilities so removing printer "" + (this))); mSession.removePrinters(java.util.Collections.singletonList(mPrinterId)); } else { mCapabilities = capabilities; mSession.handlePrinter(this); } }",4b418f37da26fb2d21cc7e65eda3625c8e462f8c,2018-01-17 01:43:24,4
583630,src_com_android_bips_LocalPrinter.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void startTracking() { mTracking = true; if ((mTrackingConnection) != null) return; if ((com.android.bips.p2p.P2pUtils.isP2p(mDiscoveredPrinter)) || (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(mPrintService, mDiscoveredPrinter))) { com.android.bips.discovery.ConnectionListener listener = new com.android.bips.discovery.ConnectionListener() { @java.lang.Override public void onConnectionComplete(com.android.bips.discovery.DiscoveredPrinter printer) { if (com.android.bips.LocalPrinter.DEBUG) android.util.Log.d(com.android.bips.LocalPrinter.TAG, (""connection complete "" + printer)); if (printer == null) { mTrackingConnection = null; } } @java.lang.Override public void onConnectionDelayed(boolean delayed) { if (com.android.bips.LocalPrinter.DEBUG) android.util.Log.d(com.android.bips.LocalPrinter.TAG, (""connection delayed="" + delayed)); if (delayed) { android.widget.Toast.makeText(mPrintService, R.string.connect_hint_text, Toast.LENGTH_LONG).show(); } } }; mTrackingConnection = com.android.bips.p2p.P2pPrinterConnection.connectPrinter(mPrintService, mDiscoveredPrinter, listener); } }",eace268a1e071cd163498f5a323d8ea179fbea66,"private void startTracking() { mTracking = true; if ((mTrackingConnection) != null) { return; } if ((com.android.bips.p2p.P2pUtils.isP2p(mDiscoveredPrinter)) || (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(mPrintService, mDiscoveredPrinter))) { com.android.bips.discovery.ConnectionListener listener = new com.android.bips.discovery.ConnectionListener() { @java.lang.Override public void onConnectionComplete(com.android.bips.discovery.DiscoveredPrinter printer) { if (com.android.bips.LocalPrinter.DEBUG) android.util.Log.d(com.android.bips.LocalPrinter.TAG, (""connection complete "" + printer)); if (printer == null) { mTrackingConnection = null; } } @java.lang.Override public void onConnectionDelayed(boolean delayed) { if (com.android.bips.LocalPrinter.DEBUG) android.util.Log.d(com.android.bips.LocalPrinter.TAG, (""connection delayed="" + delayed)); if (delayed) { android.widget.Toast.makeText(mPrintService, R.string.connect_hint_text, Toast.LENGTH_LONG).show(); } } }; mTrackingConnection = new com.android.bips.p2p.P2pPrinterConnection(mPrintService, mDiscoveredPrinter, listener); } }",31109f5e769c04f849e71627d3cd0e2436bdb7b8,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pMonitor.java,,,public void stopAll() { if ((mConnection) != null) { mConnection.stop(); mConnection = null; mConnectedInterface = null; } if ((mPeerDiscovery) != null) { mPeerDiscovery.stop(); mPeerDiscovery = null; } },396983ab04e3f35cac4e2a8738f6d83428e255d5,public void stopAll() { if ((mConnection) != null) { mConnection.close(); mConnection = null; mConnectedInterface = null; } if ((mPeerDiscovery) != null) { mPeerDiscovery.cancel(); mPeerDiscovery = null; } },1ff66b2e8f101fc81023cdab1235f51c60dd3337,2018-01-17 01:43:24,4
583630,src_com_android_bips_LocalDiscoverySession.java,"void handlePrinter(com.android.bips.LocalPrinter localPrinter) { if (((localPrinter.getCapabilities()) == null) && (!(mKnownGood.contains(localPrinter.getPrinterId())))) { return; } android.print.PrinterInfo info = localPrinter.createPrinterInfo(); mKnownGood.remove(localPrinter.getPrinterId()); if (info == null) return; if (((info.getStatus()) == (android.print.PrinterInfo.STATUS_IDLE)) && ((localPrinter.getUuid()) != null)) { mKnownGood.add(0, localPrinter.getPrinterId()); } for (android.print.PrinterInfo knownInfo : getPrinters()) { if ((knownInfo.getId().equals(info.getId())) && ((info.getCapabilities()) == null)) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""Ignore update with no caps "" + localPrinter)); return; } } if (com.android.bips.LocalDiscoverySession.DEBUG) { android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (((((""handlePrinter: reporting "" + localPrinter) + "" caps="") + ((info.getCapabilities()) != null)) + "" status="") + (info.getStatus()))); } if (!(isHandledByOtherService(localPrinter))) { addPrinters(java.util.Collections.singletonList(info)); } }",229c70b19fa1dba4b8a45a607f7526bc11ea5949,"void handlePrinter(com.android.bips.LocalPrinter localPrinter) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""handlePrinter record "" + localPrinter)); boolean knownGood = mInfo.isKnownGood(localPrinter.getPrinterId()); android.print.PrinterInfo info = localPrinter.createPrinterInfo(knownGood); if (info == null) return; if (((info.getStatus()) == (android.print.PrinterInfo.STATUS_IDLE)) && ((localPrinter.getUuid()) != null)) { mInfo.setKnownGood(localPrinter.getPrinterId()); } for (android.print.PrinterInfo knownInfo : getPrinters()) { if ((knownInfo.getId().equals(info.getId())) && ((info.getCapabilities()) == null)) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""Ignore update with no caps "" + localPrinter)); return; } } if (com.android.bips.LocalDiscoverySession.DEBUG) { android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (((((((""handlePrinter: reporting "" + localPrinter) + "" caps="") + ((info.getCapabilities()) != null)) + "" status="") + (info.getStatus())) + "" summary="") + (info.getDescription()))); } if (!(isHandledByOtherService(localPrinter))) { addPrinters(java.util.Collections.singletonList(info)); } }",bc88c359c21d69743abe8ad80dd3664a936f1a11,"void handlePrinter(com.android.bips.LocalPrinter localPrinter) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""handlePrinter record "" + localPrinter)); boolean knownGood = mInfo.isKnownGood(localPrinter.getPrinterId()); android.print.PrinterInfo info = localPrinter.createPrinterInfo(knownGood); if (info == null) { return; } if (((info.getStatus()) == (android.print.PrinterInfo.STATUS_IDLE)) && ((localPrinter.getUuid()) != null)) { mInfo.setKnownGood(localPrinter.getPrinterId()); } for (android.print.PrinterInfo knownInfo : getPrinters()) { if ((knownInfo.getId().equals(info.getId())) && ((info.getCapabilities()) == null)) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""Ignore update with no caps "" + localPrinter)); return; } } if (com.android.bips.LocalDiscoverySession.DEBUG) { android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (((((((""handlePrinter: reporting "" + localPrinter) + "" caps="") + ((info.getCapabilities()) != null)) + "" status="") + (info.getStatus())) + "" summary="") + (info.getDescription()))); } if (!(isHandledByOtherService(localPrinter))) { addPrinters(java.util.Collections.singletonList(info)); } }",a8474e1b7d04c01879b618eb4568780040e2aeca,2018-01-17 01:43:24,4
583630,src_com_android_bips_LocalDiscoverySession.java,"private void monitorExpiredPrinters() { if (((mExpirePrinters) == null) && (!(mPrinters.isEmpty()))) { mExpirePrinters = new com.android.bips.LocalDiscoverySession.ExpirePrinters(); mPrintService.getMainHandler().postDelayed(mExpirePrinters, com.android.bips.LocalDiscoverySession.PRINTER_EXPIRATION_MILLIS); } }",7a51c6969af8c48ca7f08a5a608ce12b4e1b7af1,"private void monitorExpiredPrinters() { if (((mExpirePrinters) == null) && (!(mPrinters.isEmpty()))) { mExpirePrinters = mPrintService.delay(com.android.bips.LocalDiscoverySession.PRINTER_EXPIRATION_MILLIS, () -> { mExpirePrinters = null; boolean allFound = true; List<android.print.PrinterId> idsToRemove = new com.android.bips.ArrayList<>(); for (com.android.bips.LocalPrinter localPrinter : mPrinters.values()) { if (localPrinter.isExpired()) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""Expiring "" + localPrinter)); idsToRemove.add(localPrinter.getPrinterId()); } if (!(localPrinter.isFound())) allFound = false; } idsToRemove.forEach(mPrinters::remove); removePrinters(idsToRemove); if (!allFound) { monitorExpiredPrinters(); } }); } }",3718530b62e390280b88597cf7143afce6636165,"private void monitorExpiredPrinters() { if (((mExpirePrinters) == null) && (!(mPrinters.isEmpty()))) { mExpirePrinters = mPrintService.delay(com.android.bips.LocalDiscoverySession.PRINTER_EXPIRATION_MILLIS, () -> { mExpirePrinters = null; boolean allFound = true; List<android.print.PrinterId> idsToRemove = new com.android.bips.ArrayList<>(); for (com.android.bips.LocalPrinter localPrinter : mPrinters.values()) { if (localPrinter.isExpired()) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""Expiring "" + localPrinter)); idsToRemove.add(localPrinter.getPrinterId()); } if (!(localPrinter.isFound())) { allFound = false; } } for (android.print.PrinterId id : idsToRemove) { mPrinters.remove(id); } removePrinters(idsToRemove); if (!allFound) { monitorExpiredPrinters(); } }); } }",d070e7bd2a8e15f2cf3514275896a80f6313536e,2018-01-17 01:43:24,4
583630,src_com_android_bips_LocalDiscoverySession.java,"@java.lang.Override public void onStartPrinterStateTracking(final android.print.PrinterId printerId) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""onStartPrinterStateTracking() "" + printerId)); com.android.bips.LocalPrinter localPrinter = mPrinters.get(printerId); mTrackingIds.add(printerId); if ((localPrinter == null) || (!(localPrinter.isFound()))) return; localPrinter.requestCapabilities(); }",38531ad550b72651c04e54eafb6d0c4dcb6ff06b,"@java.lang.Override public void onStartPrinterStateTracking(final android.print.PrinterId printerId) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""onStartPrinterStateTracking() "" + printerId)); com.android.bips.LocalPrinter localPrinter = mPrinters.get(printerId); mTrackingIds.add(printerId); if ((localPrinter == null) || (!(localPrinter.isFound()))) return; localPrinter.track(); }",20d25b10925f2daa2027fd401e8badcae3a5b436,"@java.lang.Override public void onStartPrinterStateTracking(final android.print.PrinterId printerId) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""onStartPrinterStateTracking() "" + printerId)); com.android.bips.LocalPrinter localPrinter = mPrinters.get(printerId); mTrackingIds.add(printerId); if ((localPrinter == null) || (!(localPrinter.isFound()))) { return; } localPrinter.track(); }",48aada09bf8b278e65da1dd62ba42de8dd3f2f85,2018-01-17 01:43:24,4
583630,src_com_android_bips_LocalDiscoverySession.java,"@java.lang.Override public void onPrinterLost(com.android.bips.discovery.DiscoveredPrinter lostPrinter) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""onPrinterLost() "" + lostPrinter)); android.print.PrinterId printerId = lostPrinter.getId(mPrintService); if (printerId.getLocalId().startsWith(""ipp"")) { mCapabilitiesCache.remove(lostPrinter.getUri()); } com.android.bips.LocalPrinter localPrinter = mPrinters.get(printerId); if (localPrinter == null) return; localPrinter.notFound(); handlePrinter(localPrinter); monitorExpiredPrinters(); }",88a383912c0234ec64ec3a68e5a88caff91ea6ba,"@java.lang.Override public void onPrinterLost(com.android.bips.discovery.DiscoveredPrinter lostPrinter) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""onPrinterLost() "" + lostPrinter)); mPrintService.getCapabilitiesCache().remove(lostPrinter.path); android.print.PrinterId printerId = lostPrinter.getId(mPrintService); com.android.bips.LocalPrinter localPrinter = mPrinters.get(printerId); if (localPrinter == null) return; localPrinter.notFound(); handlePrinter(localPrinter); monitorExpiredPrinters(); }",5f8a79f86a6e1945d5ada571431dee944170da7a,"@java.lang.Override public void onPrinterLost(com.android.bips.discovery.DiscoveredPrinter lostPrinter) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""onPrinterLost() "" + lostPrinter)); mPrintService.getCapabilitiesCache().remove(lostPrinter.path); android.print.PrinterId printerId = lostPrinter.getId(mPrintService); com.android.bips.LocalPrinter localPrinter = mPrinters.get(printerId); if (localPrinter == null) { return; } localPrinter.notFound(); handlePrinter(localPrinter); monitorExpiredPrinters(); }",e45542a5afcc6b0d28cf763102ebdb3d70e7087f,2018-01-17 01:43:24,4
583630,src_com_android_bips_util_StoppableReceiver.java,,,@java.lang.Override public void stop() { if ((mReceiver) != null) { mReceiver = null; mContext.unregisterReceiver(this); } },951a467f281b218e00216ef89d8471a2b10740cd,public void close() { if ((mReceiver) != null) { mReceiver = null; mContext.unregisterReceiver(this); } },579f9c7e4b9c76fe85726c43442f26bc28a361ca,2018-01-17 01:43:24,4
583630,src_com_android_bips_LocalDiscoverySession.java,"@java.lang.Override public void onStartPrinterDiscovery(java.util.List<android.print.PrinterId> priorityList) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""onStartPrinterDiscovery() "" + priorityList)); mPriorityIds.clear(); mPriorityIds.addAll(priorityList); mPrinters.values().forEach(LocalPrinter::notFound); monitorExpiredPrinters(); mPrintService.getDiscovery().start(this); mPrintManager.addPrintServicesChangeListener(this, null); onPrintServicesChanged(); mPrintManager.addPrintServiceRecommendationsChangeListener(this, null); onPrintServiceRecommendationsChanged(); }",518238a7c89e421a73d6a4341b305efd7596decd,"@java.lang.Override public void onStartPrinterDiscovery(java.util.List<android.print.PrinterId> priorityList) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""onStartPrinterDiscovery() "" + priorityList)); mPrinters.values().forEach(LocalPrinter::notFound); monitorExpiredPrinters(); mDiscover = mPrintService.getDiscovery().start(this); mPrintManager.addPrintServicesChangeListener(this, null); onPrintServicesChanged(); mPrintManager.addPrintServiceRecommendationsChangeListener(this, null); onPrintServiceRecommendationsChanged(); }",8d59800b50dc34c3054e48309902fcbbd3b458ab,"@java.lang.Override public void onStartPrinterDiscovery(java.util.List<android.print.PrinterId> priorityList) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""onStartPrinterDiscovery() "" + priorityList)); for (com.android.bips.LocalPrinter printer : mPrinters.values()) { printer.notFound(); } monitorExpiredPrinters(); mPrintService.getDiscovery().start(this); mPrintManager.addPrintServicesChangeListener(this, null); onPrintServicesChanged(); mPrintManager.addPrintServiceRecommendationsChangeListener(this, null); onPrintServiceRecommendationsChanged(); }",6de6812768cec9827b8df4f0a1d29faefa0fd6f2,2018-01-17 01:43:24,4
583630,src_com_android_bips_LocalPrintJob.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onConnectionDelayed(boolean delayed) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (""onConnectionDelayed "" + delayed)); if ((mState) != (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) return; if (delayed) { mPrintJob.block(mPrintService.getString(R.string.connect_hint_text)); } else { mPrintJob.start(); } }",e2ebd0310ceabd95a24ea11e17f07321462c9934,"@java.lang.Override public void onConnectionDelayed(boolean delayed) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (""onConnectionDelayed "" + delayed)); if ((mState) != (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) { return; } if (delayed) { mPrintJob.block(mPrintService.getString(R.string.connect_hint_text)); } else { mPrintJob.start(); } }",42e7e54256edf393ceb6cfc3fcf9a25172b05158,2018-01-17 01:43:24,4
583630,src_com_android_bips_ipp_CapabilitiesCache.java,"public void cancel(com.android.bips.ipp.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) { java.util.List<android.net.Uri> toDrop = new java.util.ArrayList<>(); for (java.util.Map.Entry<android.net.Uri, com.android.bips.ipp.CapabilitiesCache.Request> entry : mRequests.entrySet()) { com.android.bips.ipp.CapabilitiesCache.Request request = entry.getValue(); request.mCallbacks.remove(onLocalPrinterCapabilities); if (request.mCallbacks.isEmpty()) { toDrop.add(entry.getKey()); if ((request.mQuery) != null) { request.mQuery.cancel(true); } } } toDrop.forEach(mRequests::remove); }",204ee5ea19f0922dd031ff2ab448e39568712aeb,"public void cancel(com.android.bips.ipp.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) { java.util.List<android.net.Uri> toDrop = new java.util.ArrayList<>(); for (java.util.Map.Entry<android.net.Uri, com.android.bips.ipp.CapabilitiesCache.Request> entry : mRequests.entrySet()) { com.android.bips.ipp.CapabilitiesCache.Request request = entry.getValue(); request.mCallbacks.remove(onLocalPrinterCapabilities); if (request.mCallbacks.isEmpty()) { toDrop.add(entry.getKey()); request.stop(); } } toDrop.forEach(mRequests::remove); }",3d03c66d258b705f2ac67c455db8eba693b48863,"public void cancel(com.android.bips.ipp.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) { java.util.List<android.net.Uri> toDrop = new java.util.ArrayList<>(); for (java.util.Map.Entry<android.net.Uri, com.android.bips.ipp.CapabilitiesCache.Request> entry : mRequests.entrySet()) { com.android.bips.ipp.CapabilitiesCache.Request request = entry.getValue(); request.mCallbacks.remove(onLocalPrinterCapabilities); if (request.mCallbacks.isEmpty()) { toDrop.add(entry.getKey()); request.cancel(); } } for (android.net.Uri request : toDrop) { mRequests.remove(request); } }",349234438d9c4c15a14937c2c8f451d1b451c39f,2018-01-17 01:43:24,4
583630,src_com_android_bips_ipp_GetCapabilitiesTask.java,"@java.lang.Override protected com.android.bips.jni.LocalPrinterCapabilities doInBackground(java.lang.Void... dummy) { long start = java.lang.System.currentTimeMillis(); com.android.bips.jni.LocalPrinterCapabilities printerCaps = new com.android.bips.jni.LocalPrinterCapabilities(); try { printerCaps.inetAddress = java.net.InetAddress.getByName(mUri.getHost()); } catch (java.net.UnknownHostException e) { return null; } boolean online = isDeviceOnline(mUri); if (com.android.bips.ipp.GetCapabilitiesTask.DEBUG) { android.util.Log.d(com.android.bips.ipp.GetCapabilitiesTask.TAG, ((((((""isDeviceOnline uri="" + (mUri)) + "" online="") + online) + "" ("") + ((java.lang.System.currentTimeMillis()) - start)) + ""ms)"")); } if ((!online) || (isCancelled())) return null; com.android.bips.ipp.GetCapabilitiesTask.sJniLock.lock(); int status = -1; start = java.lang.System.currentTimeMillis(); try { if (isCancelled()) return null; status = mBackend.nativeGetCapabilities(com.android.bips.ipp.Backend.getIp(mUri.getHost()), mUri.getPort(), mUri.getPath(), mUri.getScheme(), mTimeout, printerCaps); } finally { com.android.bips.ipp.GetCapabilitiesTask.sJniLock.unlock(); } if (com.android.bips.ipp.GetCapabilitiesTask.DEBUG) { android.util.Log.d(com.android.bips.ipp.GetCapabilitiesTask.TAG, ((((((""callNativeGetCapabilities uri="" + (mUri)) + "" status="") + status) + "" ("") + ((java.lang.System.currentTimeMillis()) - start)) + ""ms)"")); } return status == (com.android.bips.jni.BackendConstants.STATUS_OK) ? printerCaps : null; }",1d53ff1f59e250e13386e1af92bdf61e632fb46a,"@java.lang.Override protected com.android.bips.jni.LocalPrinterCapabilities doInBackground(java.lang.Void... dummy) { long start = java.lang.System.currentTimeMillis(); com.android.bips.jni.LocalPrinterCapabilities printerCaps = new com.android.bips.jni.LocalPrinterCapabilities(); try { printerCaps.inetAddress = java.net.InetAddress.getByName(mUri.getHost()); } catch (java.net.UnknownHostException e) { return null; } boolean online = isDeviceOnline(mUri); if (com.android.bips.ipp.GetCapabilitiesTask.DEBUG) { android.util.Log.d(com.android.bips.ipp.GetCapabilitiesTask.TAG, ((((((""isDeviceOnline uri="" + (mUri)) + "" online="") + online) + "" ("") + ((java.lang.System.currentTimeMillis()) - start)) + ""ms)"")); } if ((!online) || (isCancelled())) return null; try { com.android.bips.ipp.GetCapabilitiesTask.sLock.lock((mPriority ? 1 : 0)); } catch (java.lang.InterruptedException e) { return null; } int status = -1; start = java.lang.System.currentTimeMillis(); try { if (isCancelled()) return null; status = mBackend.nativeGetCapabilities(com.android.bips.ipp.Backend.getIp(mUri.getHost()), mUri.getPort(), mUri.getPath(), mUri.getScheme(), mTimeout, printerCaps); } finally { com.android.bips.ipp.GetCapabilitiesTask.sLock.unlock(); } if (com.android.bips.ipp.GetCapabilitiesTask.DEBUG) { android.util.Log.d(com.android.bips.ipp.GetCapabilitiesTask.TAG, ((((((""callNativeGetCapabilities uri="" + (mUri)) + "" status="") + status) + "" ("") + ((java.lang.System.currentTimeMillis()) - start)) + ""ms)"")); } return status == (com.android.bips.jni.BackendConstants.STATUS_OK) ? printerCaps : null; }",992342a78307d0efd13e12097deaae306e31c01e,"@java.lang.Override protected com.android.bips.jni.LocalPrinterCapabilities doInBackground(java.lang.Void... dummy) { long start = java.lang.System.currentTimeMillis(); com.android.bips.jni.LocalPrinterCapabilities printerCaps = new com.android.bips.jni.LocalPrinterCapabilities(); try { printerCaps.inetAddress = java.net.InetAddress.getByName(mUri.getHost()); } catch (java.net.UnknownHostException e) { return null; } boolean online = isDeviceOnline(mUri); if (com.android.bips.ipp.GetCapabilitiesTask.DEBUG) { android.util.Log.d(com.android.bips.ipp.GetCapabilitiesTask.TAG, ((((((""isDeviceOnline uri="" + (mUri)) + "" online="") + online) + "" ("") + ((java.lang.System.currentTimeMillis()) - start)) + ""ms)"")); } if ((!online) || (isCancelled())) { return null; } try { com.android.bips.ipp.GetCapabilitiesTask.sLock.lock((mPriority ? 1 : 0)); } catch (java.lang.InterruptedException e) { return null; } int status = -1; start = java.lang.System.currentTimeMillis(); try { if (isCancelled()) { return null; } status = mBackend.nativeGetCapabilities(com.android.bips.ipp.Backend.getIp(mUri.getHost()), mUri.getPort(), mUri.getPath(), mUri.getScheme(), mTimeout, printerCaps); } finally { com.android.bips.ipp.GetCapabilitiesTask.sLock.unlock(); } if (com.android.bips.ipp.GetCapabilitiesTask.DEBUG) { android.util.Log.d(com.android.bips.ipp.GetCapabilitiesTask.TAG, ((((((""callNativeGetCapabilities uri="" + (mUri)) + "" status="") + status) + "" ("") + ((java.lang.System.currentTimeMillis()) - start)) + ""ms)"")); } return status == (com.android.bips.jni.BackendConstants.STATUS_OK) ? printerCaps : null; }",5dd9ace52bb26c0aa4e8757060b8465822f49150,2018-01-17 01:43:24,4
583630,src_com_android_bips_ipp_CapabilitiesCache.java,"public void request(DiscoveredPrinter printer, boolean highPriority, com.android.bips.ipp.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (((""request() printer="" + printer) + "" high="") + highPriority)); Uri printerUri = printer.getUri(); Uri printerPath = printer.path; com.android.bips.jni.LocalPrinterCapabilities capabilities = get(printer.getUri()); if ((capabilities != null) && ((capabilities.nativeData) != null)) { onLocalPrinterCapabilities.onCapabilities(printer, capabilities); return; } com.android.bips.ipp.CapabilitiesCache.Request request = mRequests.get(printerUri); if (request == null) { if (highPriority) { request = new com.android.bips.ipp.CapabilitiesCache.Request(printer, com.android.bips.ipp.CapabilitiesCache.SECOND_PASS_TIMEOUT); } else { request = new com.android.bips.ipp.CapabilitiesCache.Request(printer, com.android.bips.ipp.CapabilitiesCache.FIRST_PASS_TIMEOUT); } mRequests.put(printerUri, request); } else if (!(request.mPrinter.path.equals(printerPath))) { android.util.Log.w(com.android.bips.ipp.CapabilitiesCache.TAG, (((""Capabilities request for printer "" + printer) + "" overlaps with different path "") + (request.mPrinter.path))); onLocalPrinterCapabilities.onCapabilities(printer, null); return; } request.mCallbacks.add(onLocalPrinterCapabilities); if (highPriority) { request.mHighPriority = true; } startNextRequest(); }",d821c74c09deef9d7075595a6c39779d81c73d91,"public void request(com.android.bips.discovery.DiscoveredPrinter printer, boolean highPriority, com.android.bips.ipp.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (((""request() printer="" + printer) + "" high="") + highPriority)); com.android.bips.jni.LocalPrinterCapabilities capabilities = get(printer); if ((capabilities != null) && ((capabilities.nativeData) != null)) { onLocalPrinterCapabilities.onCapabilities(capabilities); return; } if (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(mService, printer)) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (""Adding to P2P evict list: "" + printer)); mToEvictP2p.add(printer.path); } else { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (""Adding to WLAN evict list: "" + printer)); mToEvict.add(printer.path); } com.android.bips.ipp.CapabilitiesCache.Request request = mRequests.computeIfAbsent(printer.path, ( uri) -> new com.android.bips.ipp.Request(printer, (highPriority ? com.android.bips.ipp.CapabilitiesCache.SECOND_PASS_TIMEOUT : com.android.bips.ipp.CapabilitiesCache.FIRST_PASS_TIMEOUT))); if (highPriority) request.mHighPriority = true; request.mCallbacks.add(onLocalPrinterCapabilities); startNextRequest(); }",b4dabf4e34feff89542c71825ee6bf5d442c580e,"public void request(com.android.bips.discovery.DiscoveredPrinter printer, boolean highPriority, com.android.bips.ipp.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (((""request() printer="" + printer) + "" high="") + highPriority)); com.android.bips.jni.LocalPrinterCapabilities capabilities = get(printer); if ((capabilities != null) && ((capabilities.nativeData) != null)) { onLocalPrinterCapabilities.onCapabilities(capabilities); return; } if (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(mService, printer)) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (""Adding to P2P evict list: "" + printer)); mToEvictP2p.add(printer.path); } else { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (""Adding to WLAN evict list: "" + printer)); mToEvict.add(printer.path); } com.android.bips.ipp.CapabilitiesCache.Request request = mRequests.computeIfAbsent(printer.path, ( uri) -> new com.android.bips.ipp.Request(printer, (highPriority ? com.android.bips.ipp.CapabilitiesCache.SECOND_PASS_TIMEOUT : com.android.bips.ipp.CapabilitiesCache.FIRST_PASS_TIMEOUT))); if (highPriority) { request.mHighPriority = true; } request.mCallbacks.add(onLocalPrinterCapabilities); startNextRequest(); }",f22c629efb4bfa0607a4f85b10680c751853f656,2018-01-17 01:43:24,4
583630,src_com_android_bips_LocalPrintJob.java,"private void handleCapabilities(com.android.bips.discovery.DiscoveredPrinter printer, com.android.bips.jni.LocalPrinterCapabilities capabilities) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (((""Capabilities for "" + (mPath)) + "" are "") + capabilities)); if ((mState) != (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) return; if (capabilities == null) { finish(false, mPrintService.getString(R.string.printer_offline)); } else { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (""Starting backend print of "" + (mPrintJob))); mMainHandler.removeCallbacksAndMessages(null); mState = com.android.bips.LocalPrintJob.STATE_DELIVERING; mBackend.print(mPath, mPrintJob, capabilities, this::handleJobStatus); } }",2dc2c4d52b025c833b6fa78051edd64d7738b5fc,"@java.lang.Override public void onConnectionComplete(com.android.bips.discovery.DiscoveredPrinter printer) { if ((mState) != (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) return; if (printer == null) { finish(false, mPrintService.getString(R.string.failed_printer_connection)); } else if (mPrintJob.isBlocked()) { mPrintJob.start(); } }",1ef3070bce40844013b75749f10b6ea4d4e7e3ea,"@java.lang.Override public void onConnectionComplete(com.android.bips.discovery.DiscoveredPrinter printer) { if ((mState) != (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) { return; } if (printer == null) { finish(false, mPrintService.getString(R.string.failed_printer_connection)); } else if (mPrintJob.isBlocked()) { mPrintJob.start(); } }",e542cc61dbc1e778aa7967df393c9efd164eb343,2018-01-17 01:43:24,4
583630,src_com_android_bips_util_Stoppable.java,,,void stop();,c0100f2b72c5dc62cccf62e57fe1f17a2b990b64,void cancel();,9ecbe6e52b4ae7cd15862e804e760a9fd487dda6,2018-01-17 01:43:24,4
583630,src_com_android_bips_ipp_CapabilitiesCache.java,"@java.lang.Override public void close() { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, ""close()""); mClosed = true; mWifiMonitor.close(); }",5260ae8f49e46a4efe52b28dedc5306ae532c2b1,"@java.lang.Override public void close() { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, ""stop()""); mStopped = true; mWifiMonitor.stop(); mP2pMonitor.stop(); }",69fb016a50a1b0f8ce59d46fdbd8fd1d7a862e81,"@java.lang.Override public void close() { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, ""stop()""); mIsStopped = true; mWifiMonitor.close(); mP2pMonitor.close(); }",317f1cea7b9c30ad20e58bb3661e31fa3dabde7a,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_MdnsDiscovery.java,private void cancelIppsDelay(android.net.Uri printerUri) { com.android.bips.discovery.MdnsDiscovery.IppsDelay ippsDelay = mIppsDelays.get(printerUri); mMainHandler.removeCallbacks(ippsDelay); mIppsDelays.remove(printerUri); },593c819c15504c4ddadbf5d5288a637be99c6bd2,@java.lang.Override public void stop() { if ((mResolve) != null) { mResolve.stop(); } },f3c6ea8e9f8ab296434f6fc3bda7751df30cf112,void cancel() { mResolveAttempt.cancel(); },368ccc87423214dc566dbcea3299cf464430dd7a,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_DelayedDiscovery.java,,,"@java.lang.Override void onStart() { if ((mStartDelay) == 0) { mDiscovery = mChild.start(mChildListener); } else { mDelayedStart = getPrintService().delay(mStartDelay, () -> { if (!(isStarted())) return; mDiscovery = mChild.start(mChildListener); }); } }",3c0f93ddc2047b647fbc89c69fdaef2e7f52849b,"@java.lang.Override void onStart() { if ((mStartDelay) == 0) { mChild.start(mChildListener); } else { mDelayedStart = getPrintService().delay(mStartDelay, () -> { if (!(isStarted())) { return; } mChild.start(mChildListener); }); } }",f751e88e9eb7ee1d40ebf80c82d80bedc55dfa87,2018-01-17 01:43:24,4
583630,src_com_android_bips_ipp_CapabilitiesCache.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void stop() { if ((mQuery) != null) { mQuery.cancel(true); mQuery = null; } },30ab47987dda2b9df5655a80c89d2bfe6417b693,"@java.lang.Override public void accept(com.android.bips.jni.LocalPrinterCapabilities capabilities) { com.android.bips.discovery.DiscoveredPrinter printer = mPrinter; if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (((""Capabilities for "" + printer) + "" cap="") + capabilities)); if (mIsStopped) { return; } mRequests.remove(printer.path); android.net.Uri capUuid = null; if (capabilities != null) { if (!(android.text.TextUtils.isEmpty(capabilities.uuid))) { capUuid = android.net.Uri.parse(capabilities.uuid); } if (((printer.uuid) != null) && (!(printer.uuid.equals(capUuid)))) { android.util.Log.w(com.android.bips.ipp.CapabilitiesCache.TAG, ((""UUID mismatch for "" + printer) + ""; rejecting capabilities"")); capabilities = null; } } if (capabilities == null) { if ((mTimeout) == (com.android.bips.ipp.CapabilitiesCache.FIRST_PASS_TIMEOUT)) { mTimeout = com.android.bips.ipp.CapabilitiesCache.SECOND_PASS_TIMEOUT; mQuery = null; mRequests.put(printer.path, this); startNextRequest(); return; } else { remove(printer.getUri()); } } else { put(printer.path, capabilities); } com.android.bips.jni.LocalPrinterCapabilities result = capabilities; for (com.android.bips.ipp.CapabilitiesCache.OnLocalPrinterCapabilities callback : mCallbacks) { callback.onCapabilities(result); } startNextRequest(); }",4ee2d6c6bfcc13e636736cfbe10cd12d53f722d4,2018-01-17 01:43:24,4
583630,src_com_android_bips_ipp_CapabilitiesCache.java,"private void startNextRequest() { final com.android.bips.ipp.CapabilitiesCache.Request request = getNextRequest(); if (request == null) return; request.mQuery = mBackend.getCapabilities(request.mPrinter.path, request.mTimeout, ( capabilities) -> { com.android.bips.discovery.DiscoveredPrinter printer = request.mPrinter; if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (((""Capabilities for "" + printer) + "" cap="") + capabilities)); if (mClosed) return; mRequests.remove(printer.getUri()); android.net.Uri capUuid = null; if (capabilities != null) { if (!(android.text.TextUtils.isEmpty(capabilities.uuid))) { capUuid = android.net.Uri.parse(capabilities.uuid); } if ((printer.uuid != null) && (!(printer.uuid.equals(capUuid)))) { android.util.Log.w(com.android.bips.ipp.CapabilitiesCache.TAG, ((""UUID mismatch for "" + printer) + ""; rejecting capabilities"")); capabilities = null; } } if (capabilities == null) { if (request.mTimeout == (com.android.bips.ipp.CapabilitiesCache.FIRST_PASS_TIMEOUT)) { request.mTimeout = com.android.bips.ipp.CapabilitiesCache.SECOND_PASS_TIMEOUT; request.mQuery = null; mRequests.put(printer.getUri(), request); startNextRequest(); return; } else { remove(printer.getUri()); } } else { android.net.Uri key = printer.getUri(); if (printer.uuid == null) { evictOnNetworkChange(key); if (capUuid != null) { key = capUuid; } } put(key, capabilities); } for (com.android.bips.ipp.OnLocalPrinterCapabilities callback : request.mCallbacks) { callback.onCapabilities(printer, capabilities); } startNextRequest(); }); }",8d8d2a56944ae3d657c1432e1fe980938d8e29a4,"private void startNextRequest() { final com.android.bips.ipp.CapabilitiesCache.Request request = getNextRequest(); if (request == null) return; request.mQuery = mBackend.getCapabilities(request.mPrinter.path, request.mTimeout, request.mHighPriority, ( capabilities) -> { com.android.bips.discovery.DiscoveredPrinter printer = request.mPrinter; if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (((""Capabilities for "" + printer) + "" cap="") + capabilities)); if (mStopped) return; mRequests.remove(printer.path); android.net.Uri capUuid = null; if (capabilities != null) { if (!(android.text.TextUtils.isEmpty(capabilities.uuid))) { capUuid = android.net.Uri.parse(capabilities.uuid); } if ((printer.uuid != null) && (!(printer.uuid.equals(capUuid)))) { android.util.Log.w(com.android.bips.ipp.CapabilitiesCache.TAG, ((""UUID mismatch for "" + printer) + ""; rejecting capabilities"")); capabilities = null; } } if (capabilities == null) { if (request.mTimeout == (com.android.bips.ipp.CapabilitiesCache.FIRST_PASS_TIMEOUT)) { request.mTimeout = com.android.bips.ipp.CapabilitiesCache.SECOND_PASS_TIMEOUT; request.mQuery = null; mRequests.put(printer.path, request); startNextRequest(); return; } else { remove(printer.getUri()); } } else { put(printer.path, capabilities); } com.android.bips.jni.LocalPrinterCapabilities result = capabilities; request.mCallbacks.forEach(( callback) -> callback.onCapabilities(result)); startNextRequest(); }); }",9fbb81a246985742c5ce98cc9ec272ff79030d28,private void startNextRequest() { final com.android.bips.ipp.CapabilitiesCache.Request request = getNextRequest(); if (request == null) { return; } request.start(); },1b15977efb2244359b085d40cb0220d9b20950e2,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_P2pDiscovery.java,,,private void startPeerDiscovery() { if ((mPeerDiscovery) != null) return; if (getSavedPrinters().isEmpty()) return; mPeerDiscovery = getPrintService().getP2pMonitor().discover(this); },12aa2faecb63d15a9b66b06a6325801d734c28b8,private void startPeerDiscovery() { if ((mDiscoveringPeers) || (getSavedPrinters().isEmpty())) { return; } mDiscoveringPeers = true; getPrintService().getP2pMonitor().discover(this); },1c4aad83a341cb30d2c99aa331a0fc38bb0eeec0,2018-01-17 01:43:24,4
583630,src_com_android_bips_ipp_CapabilitiesCache.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.net.NetworkInfo info = intent.getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO); if (!(info.isConnected())) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (""Evicting P2P "" + (mToEvictP2p))); mToEvictP2p.forEach(this::remove); mToEvictP2p.clear(); } }",c71e5157cf615b51be60069d15c3fa55182b7b58,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.net.NetworkInfo info = intent.getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO); if (!(info.isConnected())) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (""Evicting P2P "" + (mToEvictP2p))); for (android.net.Uri uri : mToEvictP2p) { remove(uri); } mToEvictP2p.clear(); } }",165409a17b575742962242b1455b2b6ceded4e60,2018-01-17 01:43:24,4
583630,src_com_android_bips_LocalPrintJob.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void handleCapabilities(com.android.bips.jni.LocalPrinterCapabilities capabilities) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (((""Capabilities for "" + (mPath)) + "" are "") + capabilities)); if ((mState) != (com.android.bips.LocalPrintJob.STATE_CAPABILITIES)) return; if (capabilities == null) { finish(false, mPrintService.getString(R.string.printer_offline)); } else { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (""Starting backend print of "" + (mPrintJob))); if ((mDiscoveryTimeout) != null) mDiscoveryTimeout.stop(); mState = com.android.bips.LocalPrintJob.STATE_DELIVERING; mPrintJob.start(); mBackend.print(mPath, mPrintJob, capabilities, this::handleJobStatus); } }",8e366733604f8b74c66d32de79dc7c843384e848,"@java.lang.Override public void onCapabilities(com.android.bips.jni.LocalPrinterCapabilities capabilities) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (((""Capabilities for "" + (mPath)) + "" are "") + capabilities)); if ((mState) != (com.android.bips.LocalPrintJob.STATE_CAPABILITIES)) { return; } if (capabilities == null) { finish(false, mPrintService.getString(R.string.printer_offline)); } else { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (""Starting backend print of "" + (mPrintJob))); if ((mDiscoveryTimeout) != null) { mDiscoveryTimeout.cancel(); } mState = com.android.bips.LocalPrintJob.STATE_DELIVERING; mPrintJob.start(); mBackend.print(mPath, mPrintJob, capabilities, this::handleJobStatus); } }",7829170e8c539c6d863c264bb1c6d03988246010,2018-01-17 01:43:24,4
583630,src_com_android_bips_LocalDiscoverySession.java,"@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter discoveredPrinter) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""onPrinterFound() "" + discoveredPrinter)); if (isDestroyed()) { android.util.Log.w(com.android.bips.LocalDiscoverySession.TAG, ""Destroyed; ignoring""); return; } final android.print.PrinterId printerId = discoveredPrinter.getId(mPrintService); com.android.bips.LocalPrinter localPrinter = mPrinters.get(printerId); if (localPrinter == null) { localPrinter = new com.android.bips.LocalPrinter(mPrintService, this, discoveredPrinter); mPrinters.put(printerId, localPrinter); } localPrinter.found(); }",9526ee72ce00b8a4aaf986751a3d74797ebd8f8e,"@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter discoveredPrinter) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""onPrinterFound() "" + discoveredPrinter)); if (isDestroyed()) { android.util.Log.w(com.android.bips.LocalDiscoverySession.TAG, ""Destroyed; ignoring""); return; } android.print.PrinterId printerId = discoveredPrinter.getId(mPrintService); com.android.bips.LocalPrinter localPrinter = mPrinters.computeIfAbsent(printerId, ( id) -> new com.android.bips.LocalPrinter(mPrintService, this, discoveredPrinter)); localPrinter.found(discoveredPrinter); if (mTrackingIds.contains(printerId)) localPrinter.track(); }",50ab0de08bdf3f6e9b11dcd357744038de6be0a6,"@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter discoveredPrinter) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""onPrinterFound() "" + discoveredPrinter)); if (isDestroyed()) { android.util.Log.w(com.android.bips.LocalDiscoverySession.TAG, ""Destroyed; ignoring""); return; } android.print.PrinterId printerId = discoveredPrinter.getId(mPrintService); com.android.bips.LocalPrinter localPrinter = mPrinters.computeIfAbsent(printerId, ( id) -> new com.android.bips.LocalPrinter(mPrintService, this, discoveredPrinter)); localPrinter.found(discoveredPrinter); if (mTrackingIds.contains(printerId)) { localPrinter.track(); } }",71b30bdede6de148705581ce3b1a05b04c0308a3,2018-01-17 01:43:24,4
583630,src_com_android_bips_LocalPrinter.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,void stopTracking() { if ((mTrackingConnection) != null) { mTrackingConnection.stop(); mTrackingConnection = null; } mTracking = false; },26dc46395746dda8eee31563e42a60a31fe91c1f,void stopTracking() { if ((mTrackingConnection) != null) { mTrackingConnection.close(); mTrackingConnection = null; } mTracking = false; },a52a5fb3e27b9d6387a83f9f063873420edd6c0a,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pConnectionProcedure.java,,,"@java.lang.Override public void stop() { if (com.android.bips.p2p.P2pConnectionProcedure.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pConnectionProcedure.TAG, (""stop() for "" + (mPeer.deviceAddress))); mListeners.clear(); mConnectionMonitor.stop(); if ((mDetectDelayed) != null) mDetectDelayed.stop(); if ((mChannel) != null) { mP2pManager.cancelConnect(mChannel, null); mP2pManager.removeGroup(mChannel, null); mChannel = null; } }",5215759719608d9ef78c59619da866d3982c3dfa,boolean hasListener(com.android.bips.p2p.P2pConnectionListener listener) { return mListeners.contains(listener); },80b3afb644a73b37b731694545f7d9666ff6dba8,2018-01-17 01:43:24,4
583630,src_com_android_bips_ui_AddP2pPrinterDialog.java,,,"@android.annotation.SuppressLint(""InflateParams"") @java.lang.Override protected void onCreate(android.os.Bundle savedInstanceState) { setView(getLayoutInflater().inflate(R.layout.manual_printer_add, null)); setTitle(getContext().getString(R.string.connecting_to, mPeer.deviceName)); setButton(AlertDialog.BUTTON_NEGATIVE, getContext().getString(android.R.string.cancel), ((com.android.bips.ui.OnClickListener) (null))); super.onCreate(savedInstanceState); findViewById(R.id.labelHostname).setVisibility(View.GONE); findViewById(R.id.hostname).setVisibility(View.GONE); findViewById(R.id.progress).setVisibility(View.VISIBLE); setOnDismissListener(( d) -> mValidating.stop()); mValidating = com.android.bips.p2p.P2pPrinterConnection.connectPrinter(mPrintService, mPeer, this); }",7262e3c5c5182ae5af7a4d579dc145000e548bf1,"@android.annotation.SuppressLint(""InflateParams"") @java.lang.Override protected void onCreate(android.os.Bundle savedInstanceState) { setView(getLayoutInflater().inflate(R.layout.manual_printer_add, null)); setTitle(getContext().getString(R.string.connecting_to, mPeer.deviceName)); setButton(AlertDialog.BUTTON_NEGATIVE, getContext().getString(android.R.string.cancel), ((com.android.bips.ui.OnClickListener) (null))); super.onCreate(savedInstanceState); findViewById(R.id.labelHostname).setVisibility(View.GONE); findViewById(R.id.hostname).setVisibility(View.GONE); findViewById(R.id.progress).setVisibility(View.VISIBLE); setOnDismissListener(( d) -> mValidating.close()); mValidating = new com.android.bips.p2p.P2pPrinterConnection(mPrintService, mPeer, this); }",668e4f282ae9c2fb6eae96828da08915c9ed41d3,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pPrinterConnection.java,,,"public static com.android.bips.util.Stoppable connectPrinter(com.android.bips.BuiltInPrintService service, android.net.wifi.p2p.WifiP2pDevice peer, com.android.bips.discovery.ConnectionListener listener) { return new com.android.bips.p2p.P2pPrinterConnection(service, peer, listener); }",979e92f7ac9b82290b871adee19ba9b63a0aa929,"@java.lang.Override public void onPeerFound(WifiP2pDevice peer) { if ((mListener) == null) { return; } java.lang.String address = mPrinter.path.getHost().replaceAll(""-"", "":""); if (peer.deviceAddress.equals(address)) { mService.getP2pMonitor().stopDiscover(this); connectToPeer(peer); } }",74f570d9866cdb81b4cb9bb1ac2b0b9822ac70f4,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pPrinterConnection.java,,,"@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter printer) { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, ((""onPrinterFound("" + printer) + "")"")); if ((mListener) == null) return; java.net.Inet4Address printerAddress; try { printerAddress = ((java.net.Inet4Address) (java.net.Inet4Address.getByName(printer.path.getHost()))); } catch (java.net.UnknownHostException e) { return; } if (((mInterface) != null) && (com.android.bips.p2p.P2pUtils.isOnInterface(mInterface, printerAddress))) { mMdnsDiscovery.stop(); mMdnsDiscoveryTimeout.stop(); mService.getCapabilitiesCache().request(printer, true, ( capabilities) -> onCapabilities(printer, capabilities)); } }",774df6c233f5cb223cc2644e1d697f7b0da2a50a,"@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter printer) { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, ((""onPrinterFound("" + printer) + "")"")); if ((mListener) == null) { return; } java.net.Inet4Address printerAddress; try { printerAddress = ((java.net.Inet4Address) (java.net.Inet4Address.getByName(printer.path.getHost()))); } catch (java.net.UnknownHostException e) { return; } if (((mInterface) != null) && (com.android.bips.p2p.P2pUtils.isOnInterface(mInterface, printerAddress))) { mMdnsDiscovery.stop(this); mMdnsDiscoveryTimeout.cancel(); mService.getCapabilitiesCache().request(printer, true, ( capabilities) -> onCapabilities(printer, capabilities)); } }",f40413435403fbefe11eaadef061efd0a0ef662a,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pPrinterConnection.java,,,"public static com.android.bips.util.Stoppable connectPrinter(com.android.bips.BuiltInPrintService service, com.android.bips.discovery.DiscoveredPrinter discoveredPrinter, com.android.bips.discovery.ConnectionListener listener) { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, ((""connectPrinter("" + discoveredPrinter) + "")"")); if (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(service, discoveredPrinter)) { android.net.wifi.p2p.WifiP2pDevice peer = service.getP2pMonitor().getConnection().getPeer(); return new com.android.bips.p2p.P2pPrinterConnection(service, peer, listener); } return new com.android.bips.util.Stoppable() { final java.lang.String mAddress = discoveredPrinter.path.getHost().replaceAll(""-"", "":""); com.android.bips.util.Stoppable mConnectOp = null; com.android.bips.util.Stoppable mDiscoverOp = service.getP2pMonitor().discover(new com.android.bips.p2p.P2pPeerListener() { @java.lang.Override public void onPeerFound(android.net.wifi.p2p.WifiP2pDevice peer) { if (peer.deviceAddress.equals(mAddress)) { mDiscoverOp.stop(); mConnectOp = new com.android.bips.p2p.P2pPrinterConnection(service, peer, listener); } } @java.lang.Override public void onPeerLost(android.net.wifi.p2p.WifiP2pDevice peer) { } }); @java.lang.Override public void stop() { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, (""Stopping connection to "" + discoveredPrinter)); if ((mConnectOp) != null) mConnectOp.stop(); mDiscoverOp.stop(); } }; }",599239af4f723c11a5091518733420f552ddeca9,"private void connectToPeer(android.net.wifi.p2p.WifiP2pDevice peer) { mPeer = peer; mService.getP2pMonitor().connect(mPeer, this); }",369e748918d4cb758dcac50457a680fdefe2d61b,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pPrinterConnection.java,,,"@java.lang.Override public void onConnectionOpen(java.lang.String networkInterface, android.net.wifi.p2p.WifiP2pInfo info) { if ((mListener) == null) return; try { mInterface = java.net.NetworkInterface.getByName(networkInterface); } catch (java.net.SocketException ignored) { } if ((mInterface) == null) { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, (""Failed to get interface from "" + networkInterface)); mListener.onConnectionComplete(null); stop(); return; } if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, (""Connected on network interface "" + (mInterface))); mMdnsDiscoveryTimeout = mService.delay(com.android.bips.p2p.P2pPrinterConnection.TIMEOUT_DISCOVERY, () -> { mMdnsDiscovery.stop(); if ((mListener) != null) mListener.onConnectionComplete(null); stop(); }); mMdnsDiscovery = mService.getMdnsDiscovery().start(this); }",f5570c510716cd183783db5b5d61552a6b20cb3c,"@java.lang.Override public void onConnectionOpen(java.lang.String networkInterface, android.net.wifi.p2p.WifiP2pInfo info) { if ((mListener) == null) { return; } try { mInterface = java.net.NetworkInterface.getByName(networkInterface); } catch (java.net.SocketException ignored) { } if ((mInterface) == null) { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, (""Failed to get interface from "" + networkInterface)); mListener.onConnectionComplete(null); close(); return; } if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, (""Connected on network interface "" + (mInterface))); mMdnsDiscoveryTimeout = mService.delay(com.android.bips.p2p.P2pPrinterConnection.TIMEOUT_DISCOVERY, () -> { mMdnsDiscovery.stop(this); if ((mListener) != null) { mListener.onConnectionComplete(null); } close(); }); mMdnsDiscovery.start(this); }",8ff530eb5f375471e29e32b45d17d3d3030d3528,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pPrinterConnection.java,,,@java.lang.Override public void onConnectionDelayed(boolean delayed) { if ((mListener) == null) return; mListener.onConnectionDelayed(delayed); },f941f50a9cfd246bc2ab2827eeb762884c92a360,@java.lang.Override public void onConnectionDelayed(boolean delayed) { if ((mListener) == null) { return; } mListener.onConnectionDelayed(delayed); },f074e8965b18b2fefdfb3e5401f85bfa0c58895c,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pPrinterConnection.java,,,"@java.lang.Override public void stop() { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, ""stop()""); if ((mMdnsDiscovery) != null) mMdnsDiscovery.stop(); if ((mMdnsDiscoveryTimeout) != null) mMdnsDiscoveryTimeout.stop(); if ((mConnection) != null) mConnection.stop(); mListener = null; }",df4043b808292c87927860ed934057e23c7e5c38,"public void close() { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, ""close()""); mMdnsDiscovery.stop(this); if ((mMdnsDiscoveryTimeout) != null) { mMdnsDiscoveryTimeout.cancel(); } mService.getP2pMonitor().stopDiscover(this); mService.getP2pMonitor().stopConnect(this); mListener = null; }",f9e046804b911f4f20fea807d4956359f06ed06a,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pPrinterConnection.java,,,"@java.lang.Override public void onConnectionClosed() { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, (""closed/failed connection to "" + (com.android.bips.p2p.P2pMonitor.toString(mPeer)))); if ((mListener) != null) { mListener.onConnectionComplete(null); } stop(); }",397dd91d55acc16fe79c89d25f331eb87388df45,"@java.lang.Override public void onConnectionClosed() { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, (""closed/failed connection to "" + (com.android.bips.p2p.P2pMonitor.toString(mPeer)))); if ((mListener) != null) { mListener.onConnectionComplete(null); } close(); }",967ca5f7cf49722a8455fd0b96916d4a428274a4,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pPrinterConnection.java,,,"private void onCapabilities(com.android.bips.discovery.DiscoveredPrinter printer, com.android.bips.jni.LocalPrinterCapabilities capabilities) { if ((mListener) == null) return; if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, (((""Printer "" + printer) + "" caps="") + capabilities)); if (capabilities == null) { mListener.onConnectionComplete(null); stop(); } else { com.android.bips.discovery.DiscoveredPrinter p2pPrinter = new com.android.bips.discovery.DiscoveredPrinter(printer.uuid, printer.name, com.android.bips.discovery.P2pDiscovery.toPath(mPeer), printer.location); mListener.onConnectionComplete(p2pPrinter); } }",bdbc4f829d264cb68e6fdd92af64f80915718ccd,"private void onCapabilities(com.android.bips.discovery.DiscoveredPrinter printer, com.android.bips.jni.LocalPrinterCapabilities capabilities) { if ((mListener) == null) { return; } if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, (((""Printer "" + printer) + "" caps="") + capabilities)); if (capabilities == null) { mListener.onConnectionComplete(null); close(); } else { com.android.bips.discovery.DiscoveredPrinter p2pPrinter = new com.android.bips.discovery.DiscoveredPrinter(printer.uuid, printer.name, com.android.bips.discovery.P2pDiscovery.toPath(mPeer), printer.location); mListener.onConnectionComplete(p2pPrinter); } }",98b08e918eeee1bcf01985ea09cd5d801b39f946,2018-01-17 01:43:24,4
583630,src_com_android_bips_ui_AddPrintersFragment.java,,,"private void updateSavedPrinters() { int savedCount = mPrintService.getDiscovery().getSavedPrinters().size(); if (savedCount == 0) { if ((getPreferenceScreen().findPreference(mSavedPrintersCategory.getKey())) != null) { getPreferenceScreen().removePreference(mSavedPrintersCategory); } } else { if ((getPreferenceScreen().findPreference(mSavedPrintersCategory.getKey())) == null) { getPreferenceScreen().addPreference(mSavedPrintersCategory); } mSavedPrintersCategory.removeAll(); mPrintService.getDiscovery().getSavedPrinters().forEach(( printer) -> { if (com.android.bips.ui.AddPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.AddPrintersFragment.TAG, (""Adding saved printer "" + printer)); com.android.bips.ui.PrinterPreference pref = new com.android.bips.ui.PrinterPreference(getContext(), mPrintService, printer, false); pref.setOrder(com.android.bips.ui.AddPrintersFragment.ORDER_SAVED); pref.setOnPreferenceClickListener(( preference) -> { showRemovalDialog(printer); return true; }); mSavedPrintersCategory.addPreference(pref); }); } }",4c50628af2fdcd13c5a15bf5dd1ae3ab403ec8ff,"private void updateSavedPrinters() { int savedCount = mPrintService.getDiscovery().getSavedPrinters().size(); if (savedCount == 0) { if ((getPreferenceScreen().findPreference(mSavedPrintersCategory.getKey())) != null) { getPreferenceScreen().removePreference(mSavedPrintersCategory); } } else { if ((getPreferenceScreen().findPreference(mSavedPrintersCategory.getKey())) == null) { getPreferenceScreen().addPreference(mSavedPrintersCategory); } mSavedPrintersCategory.removeAll(); for (com.android.bips.discovery.DiscoveredPrinter printer : mPrintService.getDiscovery().getSavedPrinters()) { if (com.android.bips.ui.AddPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.AddPrintersFragment.TAG, (""Adding saved printer "" + printer)); com.android.bips.ui.PrinterPreference pref = new com.android.bips.ui.PrinterPreference(getContext(), mPrintService, printer, false); pref.setOrder(com.android.bips.ui.AddPrintersFragment.ORDER_SAVED); pref.setOnPreferenceClickListener(( preference) -> { showRemovalDialog(printer); return true; }); mSavedPrintersCategory.addPreference(pref); } } }",03fb4c0ba195ee75d9e11ec01b4b8d71bfd3adfd,2018-01-17 01:43:24,4
583630,src_com_android_bips_ui_AddPrintersFragment.java,,,"@java.lang.Override public void onResume() { super.onResume(); getActivity().setTitle(R.string.title_activity_add_printer); if (com.android.bips.ui.AddPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.AddPrintersFragment.TAG, ""onResume""); getContext().bindService(new android.content.Intent(getContext(), com.android.bips.BuiltInPrintService.class), this, Context.BIND_AUTO_CREATE); }",f6d06efe10faa0c4a4ecbe47567e1306a9663012,"@java.lang.Override public void onStart() { super.onStart(); if (com.android.bips.ui.AddPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.AddPrintersFragment.TAG, ""onStart""); getActivity().setTitle(R.string.title_activity_add_printer); getContext().bindService(new android.content.Intent(getContext(), com.android.bips.BuiltInPrintService.class), this, Context.BIND_AUTO_CREATE); }",7d2ac96653c9b369b6c9466f0479cf708dbba8b3,2018-01-17 01:43:24,4
583630,src_com_android_bips_ui_AddPrintersFragment.java,,,"private void showRemovalDialog(com.android.bips.discovery.DiscoveredPrinter printer) { new android.app.AlertDialog.Builder(getContext()).setTitle(printer.name).setMessage(mPrintService.getDescription(printer)).setPositiveButton(android.R.string.cancel, null).setNeutralButton(R.string.forget, ( dialog, which) -> { mPrintService.getDiscovery().removeSavedPrinter(printer.path); updateSavedPrinters(); }).show(); }",e9be50bc4302b266f657ab53d912ff7bbb1f8bc1,"private void showRemovalDialog(com.android.bips.discovery.DiscoveredPrinter printer) { java.lang.String message; if (com.android.bips.p2p.P2pUtils.isP2p(printer)) { message = mPrintService.getString(R.string.connects_via_wifi_direct); } else { message = mPrintService.getString(R.string.connects_via_network, printer.getHost()); } new android.app.AlertDialog.Builder(getContext()).setTitle(printer.name).setMessage(message).setNegativeButton(android.R.string.cancel, null).setPositiveButton(R.string.forget, ( dialog, which) -> { mPrintService.getDiscovery().removeSavedPrinter(printer.path); updateSavedPrinters(); }).show(); }",fb8ad46744461afe8c1b27bea39d2416d93f1c1c,2018-01-17 01:43:24,4
583630,src_com_android_bips_ui_AddPrintersFragment.java,,,"@java.lang.Override public void onPause() { super.onPause(); if (com.android.bips.ui.AddPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.AddPrintersFragment.TAG, ""onPause""); getContext().unbindService(this); }",1de6928b6e0af7c886c59d8b76ac88d0236447bb,"@java.lang.Override public void onStop() { super.onStop(); if (com.android.bips.ui.AddPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.AddPrintersFragment.TAG, ""onStop""); getContext().unbindService(this); }",0801cdb7598f0dbf69e44b9dfaf0ceeb53ddc907,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_SavedDiscovery.java,,,@java.lang.Override public void removeSavedPrinter(android.net.Uri printerPath) { mSavedPrinters.stream().filter(( printer) -> printer.path.equals(printerPath)).findFirst().ifPresent(( printer) -> { mSavedPrinters.remove(printer); save(); }); },ef74461085f607fb0a7359d5ec9f99a9c531a7f3,@java.lang.Override public void removeSavedPrinter(Uri printerPath) { for (com.android.bips.discovery.DiscoveredPrinter printer : mSavedPrinters) { if (printer.path.equals(printerPath)) { mSavedPrinters.remove(printer); save(); return; } } },9eb3833a14e0819ab334c1b963f612c3e03f2fbf,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_P2pDiscovery.java,,,"@java.lang.Override public void onPeerFound(android.net.wifi.p2p.WifiP2pDevice peer) { com.android.bips.discovery.DiscoveredPrinter printer = com.android.bips.discovery.P2pDiscovery.toPrinter(peer); if (com.android.bips.discovery.P2pDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.P2pDiscovery.TAG, (""onPeerFound "" + printer)); getSavedPrinters().forEach(( saved) -> { if (saved.path.equals(printer.path)) { printerFound(saved); } }); }",96ee5bafcdb44cd72591f29cb0816a207df40940,"@java.lang.Override public void onPeerFound(android.net.wifi.p2p.WifiP2pDevice peer) { com.android.bips.discovery.DiscoveredPrinter printer = com.android.bips.discovery.P2pDiscovery.toPrinter(peer); if (com.android.bips.discovery.P2pDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.P2pDiscovery.TAG, (""onPeerFound "" + printer)); for (com.android.bips.discovery.DiscoveredPrinter saved : getSavedPrinters()) { if (saved.path.equals(printer.path)) { printerFound(saved); } } }",7a37577c2c9696413749573b3d0b6193e71ce141,2018-01-17 01:43:24,4
583630,src_com_android_bips_LocalPrintJob.java,"@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter printer) { if ((mState) != (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) return; if (printer.getId(mPrintService).equals(mPrintJob.getInfo().getPrinterId())) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (((""onPrinterFound() "" + (printer.name)) + "" state="") + (mState))); mPath = printer.path; mPrintService.getCapabilitiesCache().request(printer, true, this::handleCapabilities); mPrintService.getDiscovery().stop(this); } }",46025bb6c38343f1135df87451ef058a2d7c7e01,"@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter printer) { if ((mState) != (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) return; if (!(printer.getId(mPrintService).equals(mPrintJob.getInfo().getPrinterId()))) return; if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (((""onPrinterFound() "" + (printer.name)) + "" state="") + (mState))); if (com.android.bips.p2p.P2pUtils.isP2p(printer)) { mConnection = com.android.bips.p2p.P2pPrinterConnection.connectPrinter(mPrintService, printer, this); return; } if ((com.android.bips.p2p.P2pUtils.isOnConnectedInterface(mPrintService, printer)) && ((mConnection) == null)) { mConnection = com.android.bips.p2p.P2pPrinterConnection.connectPrinter(mPrintService, printer, this); } if ((mDiscovery) != null) mDiscovery.stop(); mState = com.android.bips.LocalPrintJob.STATE_CAPABILITIES; mPath = printer.path; mPrintService.getCapabilitiesCache().request(printer, true, this::handleCapabilities); }",0bf69c200a12df93c5b51ef2b1cd68be0481e0df,"@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter printer) { if ((mState) != (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) { return; } if (!(printer.getId(mPrintService).equals(mPrintJob.getInfo().getPrinterId()))) { return; } if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (((""onPrinterFound() "" + (printer.name)) + "" state="") + (mState))); if (com.android.bips.p2p.P2pUtils.isP2p(printer)) { mConnection = new com.android.bips.p2p.P2pPrinterConnection(mPrintService, printer, this); return; } if ((com.android.bips.p2p.P2pUtils.isOnConnectedInterface(mPrintService, printer)) && ((mConnection) == null)) { mConnection = new com.android.bips.p2p.P2pPrinterConnection(mPrintService, printer, this); } mPrintService.getDiscovery().stop(this); mState = com.android.bips.LocalPrintJob.STATE_CAPABILITIES; mPath = printer.path; mPrintService.getCapabilitiesCache().request(printer, true, this); }",0be4a558d47d6920631d555dd3e6d9735a6727e2,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_SavedDiscovery.java,,,"private java.util.List<com.android.bips.discovery.DiscoveredPrinter> load() { java.util.List<com.android.bips.discovery.DiscoveredPrinter> printers = new java.util.ArrayList<>(); if (!(mCacheFile.exists())) return printers; try (android.util.JsonReader reader = new android.util.JsonReader(new java.io.BufferedReader(new java.io.FileReader(mCacheFile)))) { reader.beginObject(); while (reader.hasNext()) { java.lang.String itemName = reader.nextName(); if (com.android.bips.discovery.SavedDiscovery.PRINTER_LIST_NAMES.contains(itemName)) { reader.beginArray(); while (reader.hasNext()) { printers.add(new com.android.bips.discovery.DiscoveredPrinter(reader)); } reader.endArray(); } } reader.endObject(); } catch (java.lang.IllegalStateException | java.io.IOException ignored) { android.util.Log.w(com.android.bips.discovery.SavedDiscovery.TAG, (""Error while loading from "" + (mCacheFile)), ignored); } if (com.android.bips.discovery.SavedDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.SavedDiscovery.TAG, (((""Loaded size="" + (printers.size())) + "" from "") + (mCacheFile))); return printers; }",dd1e6c28a0bb0561f60ab33376f0f3c94dcd37c3,"private java.util.List<com.android.bips.discovery.DiscoveredPrinter> load() { java.util.List<com.android.bips.discovery.DiscoveredPrinter> printers = new java.util.ArrayList<>(); if (!(mCacheFile.exists())) { return printers; } try (android.util.JsonReader reader = new android.util.JsonReader(new java.io.BufferedReader(new java.io.FileReader(mCacheFile)))) { reader.beginObject(); while (reader.hasNext()) { java.lang.String itemName = reader.nextName(); if (com.android.bips.discovery.SavedDiscovery.PRINTER_LIST_NAMES.contains(itemName)) { reader.beginArray(); while (reader.hasNext()) { printers.add(new com.android.bips.discovery.DiscoveredPrinter(reader)); } reader.endArray(); } } reader.endObject(); } catch (java.lang.IllegalStateException | java.io.IOException ignored) { android.util.Log.w(com.android.bips.discovery.SavedDiscovery.TAG, (""Error while loading from "" + (mCacheFile)), ignored); } if (com.android.bips.discovery.SavedDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.SavedDiscovery.TAG, (((""Loaded size="" + (printers.size())) + "" from "") + (mCacheFile))); return printers; }",00faf863ff2ffb5076aef984da1287212d6cd312,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_DelayedDiscovery.java,,,@java.lang.Override void onStop() { if ((mDelayedStart) != null) mDelayedStart.stop(); if ((mDiscovery) != null) mDiscovery.stop(); mPending.clear(); },77033b8852cc5aa199a6b7a74b93f3570b6de6d7,@java.lang.Override void onStop() { if ((mDelayedStart) != null) { mDelayedStart.cancel(); } mChild.stop(mChildListener); mPending.clear(); },61a2e178f3bd3c2c68cc8d96b2019f32ccd7dfe6,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pMonitor.java,,,"public com.android.bips.util.Stoppable discover(com.android.bips.p2p.P2pPeerListener listener) { if (com.android.bips.p2p.P2pMonitor.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pMonitor.TAG, ""discover()""); if ((mP2pManager) == null) { return com.android.bips.p2p.P2pMonitor.STOPPED; } if ((mPeerDiscovery) == null) { mPeerDiscovery = new com.android.bips.p2p.P2pDiscoveryProcedure(mService, mP2pManager, listener); } else { mPeerDiscovery.addListener(listener); } return () -> { if (com.android.bips.p2p.P2pMonitor.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pMonitor.TAG, ""discover.stop()""); if ((mPeerDiscovery) != null) { mPeerDiscovery.removeListener(listener); if (mPeerDiscovery.getListeners().isEmpty()) { mPeerDiscovery.stop(); mPeerDiscovery = null; } } }; }",660e2cf7ead208a57d7bc55e058269d856dd074d,"public void discover(com.android.bips.p2p.P2pPeerListener listener) { if (com.android.bips.p2p.P2pMonitor.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pMonitor.TAG, ""discover()""); if ((mP2pManager) == null) { return; } if ((mPeerDiscovery) == null) { mPeerDiscovery = new com.android.bips.p2p.P2pDiscoveryProcedure(mService, mP2pManager, listener); } else { mPeerDiscovery.addListener(listener); } }",b0c14fc9ec19765c41c7c6975f0f02babb8ab25e,2018-01-17 01:43:24,4
583630,src_com_android_bips_p2p_P2pConnectionProcedure.java,,,private boolean isConnectedToPeer(android.net.wifi.p2p.WifiP2pGroup group) { WifiP2pDevice owner = group.getOwner(); if ((owner != null) && (owner.deviceAddress.equals(mPeer.deviceAddress))) return true; for (WifiP2pDevice client : group.getClientList()) { if (client.deviceAddress.equals(mPeer.deviceAddress)) return true; } return false; },778f17444fc220a351e01c354cdd6e31985d27ec,private boolean isConnectedToPeer(android.net.wifi.p2p.WifiP2pGroup group) { WifiP2pDevice owner = group.getOwner(); if ((owner != null) && (owner.deviceAddress.equals(mPeer.deviceAddress))) { return true; } for (WifiP2pDevice client : group.getClientList()) { if (client.deviceAddress.equals(mPeer.deviceAddress)) { return true; } } return false; },72c07cf46fd958a64fd55d67ec0d5dd927028c4b,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_SavedDiscovery.java,,,private com.android.bips.discovery.DiscoveredPrinter find(android.net.Uri printerUri) { return mSavedPrinters.stream().filter(( printer) -> printer.getUri().equals(printerUri)).findFirst().orElse(null); },83ba00b4e988b3a65de9f9fabaa0826f952c9749,private com.android.bips.discovery.DiscoveredPrinter find(android.net.Uri printerUri) { for (com.android.bips.discovery.DiscoveredPrinter printer : mSavedPrinters) { if (printer.getUri().equals(printerUri)) { return printer; } } return null; },e73b4d7f5f894235499579fad14540e6530f8725,2018-01-17 01:43:24,4
583630,src_com_android_bips_discovery_SavedDiscovery.java,,,"boolean addSavedPrinter(com.android.bips.discovery.DiscoveredPrinter printer) { android.net.Uri printerUri = printer.getUri(); com.android.bips.discovery.DiscoveredPrinter old = find(printerUri); if (old != null) { if (printer.equals(old)) return false; mSavedPrinters.remove(old); } mSavedPrinters.add(0, printer); save(); return true; }",1a81d221c8a1d1bd2df7a06ce214fa4313bb55ee,"boolean addSavedPrinter(com.android.bips.discovery.DiscoveredPrinter printer) { android.net.Uri printerUri = printer.getUri(); com.android.bips.discovery.DiscoveredPrinter old = find(printerUri); if (old != null) { if (printer.equals(old)) { return false; } mSavedPrinters.remove(old); } mSavedPrinters.add(0, printer); save(); return true; }",bac2e38d76745df9c33405af0e268bfcaa54a67e,2018-01-17 01:43:24,4
584393,core_java_android_net_IpSecManager.java,"private void applyTransportModeTransform(android.os.ParcelFileDescriptor pfd, android.net.IpSecTransform transform) { try { mService.applyTransportModeTransform(pfd, transform.getResourceId()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",6c1f2b4d0a2b4f57504baf9de7ef6a53f80e07e7,"private void applyTransportModeTransform(android.os.ParcelFileDescriptor pfd, int direction, android.net.IpSecTransform transform) { try { mService.applyTransportModeTransform(pfd, direction, transform.getResourceId()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",ac5fbc285e1619d9c9a7fef9c6c90e875147a911,"private void applyTransportModeTransform(android.os.ParcelFileDescriptor pfd, int direction, android.net.IpSecTransform transform) throws java.io.IOException { try { mService.applyTransportModeTransform(pfd, direction, transform.getResourceId()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",5e852a9ae0e5e4bea0253c7d8641d418b3330a3a,2018-01-17 08:40:36,7
584393,services_core_java_com_android_server_IpSecService.java,"private void checkIpSecConfig(android.net.IpSecConfig config) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); switch (config.getEncapType()) { case android.net.IpSecTransform.ENCAP_NONE : break; case android.net.IpSecTransform.ENCAP_ESPINUDP : case android.net.IpSecTransform.ENCAP_ESPINUDP_NON_IKE : userRecord.mEncapSocketRecords.getResourceOrThrow(config.getEncapSocketResourceId()); int port = config.getEncapRemotePort(); if ((port <= 0) || (port > 65535)) { throw new java.lang.IllegalArgumentException((""Invalid remote UDP port: "" + port)); } break; default : throw new java.lang.IllegalArgumentException((""Invalid Encap Type: "" + (config.getEncapType()))); } for (int direction : com.android.server.IpSecService.DIRECTIONS) { android.net.IpSecAlgorithm crypt = config.getEncryption(direction); android.net.IpSecAlgorithm auth = config.getAuthentication(direction); android.net.IpSecAlgorithm authenticatedEncryption = config.getAuthenticatedEncryption(direction); if (((authenticatedEncryption == null) && (crypt == null)) && (auth == null)) { throw new java.lang.IllegalArgumentException(""No Encryption or Authentication algorithms specified""); } else if ((authenticatedEncryption != null) && ((auth != null) || (crypt != null))) { throw new java.lang.IllegalArgumentException((""Authenticated Encryption is mutually exclusive with other "" + "" Authentication or Encryption algorithms"")); } com.android.server.IpSecService.SpiRecord s = userRecord.mSpiRecords.getResourceOrThrow(config.getSpiResourceId(direction)); if (android.text.TextUtils.isEmpty(config.getRemoteAddress())) { config.setRemoteAddress(s.getRemoteAddress()); } if (!(config.getRemoteAddress().equals(s.getRemoteAddress()))) { throw new java.lang.IllegalArgumentException(""Mismatched remote addresseses.""); } } java.net.InetAddress remoteAddr = android.net.NetworkUtils.numericToInetAddress(config.getRemoteAddress()); if (android.text.TextUtils.isEmpty(config.getLocalAddress())) { android.net.Network n = config.getNetwork(); if (n == null) { n = getConnectivityManager().getActiveNetwork(); } if (n == null) { throw new java.lang.IllegalArgumentException(""No local address, network, or default network found.""); } java.util.List<java.lang.String> addrsByFamily = new java.util.ArrayList<java.lang.String>(); try { java.util.List<java.net.InetAddress> addrs = getConnectivityManager().getLinkProperties(n).getAddresses(); for (java.net.InetAddress addr : addrs) { if (android.net.NetworkUtils.addressTypeMatches(remoteAddr, addr)) { addrsByFamily.add(addr.getHostAddress()); } } } catch (java.lang.NullPointerException e) { throw new java.lang.IllegalStateException(""Failed to retrieve link properties for the active network.""); } if ((addrsByFamily.size()) == 0) { throw new java.lang.IllegalArgumentException(""Mismatched local and remote address families.""); } config.setLocalAddresses(((java.lang.String[]) (addrsByFamily.toArray()))); } else { if (!(android.net.NetworkUtils.addressTypeMatches(remoteAddr, android.net.NetworkUtils.numericToInetAddress(config.getLocalAddress())))) { throw new java.lang.IllegalArgumentException(""Mismatched local and remote address families.""); } } switch (config.getMode()) { case android.net.IpSecTransform.MODE_TRANSPORT : for (java.lang.String addr : config.getLocalAddresses()) { com.android.server.IpSecService.checkInetAddress(addr); } com.android.server.IpSecService.checkInetAddress(config.getRemoteAddress()); break; case android.net.IpSecTransform.MODE_TUNNEL : break; default : throw new java.lang.IllegalArgumentException((""Invalid IpSecTransform.mode: "" + (config.getMode()))); } }",6786e386dded764aee3cedccc64a436d0e3452df,"private void checkIpSecConfig(android.net.IpSecConfig config) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); switch (config.getEncapType()) { case android.net.IpSecTransform.ENCAP_NONE : break; case android.net.IpSecTransform.ENCAP_ESPINUDP : case android.net.IpSecTransform.ENCAP_ESPINUDP_NON_IKE : userRecord.mEncapSocketRecords.getResourceOrThrow(config.getEncapSocketResourceId()); int port = config.getEncapRemotePort(); if ((port <= 0) || (port > 65535)) { throw new java.lang.IllegalArgumentException((""Invalid remote UDP port: "" + port)); } break; default : throw new java.lang.IllegalArgumentException((""Invalid Encap Type: "" + (config.getEncapType()))); } android.net.IpSecAlgorithm crypt = config.getEncryption(); android.net.IpSecAlgorithm auth = config.getAuthentication(); android.net.IpSecAlgorithm authenticatedEncryption = config.getAuthenticatedEncryption(); if (((authenticatedEncryption == null) && (crypt == null)) && (auth == null)) { throw new java.lang.IllegalArgumentException(""No Encryption or Authentication algorithms specified""); } else if ((authenticatedEncryption != null) && ((auth != null) || (crypt != null))) { throw new java.lang.IllegalArgumentException((""Authenticated Encryption is mutually exclusive with other "" + "" Authentication or Encryption algorithms"")); } com.android.server.IpSecService.SpiRecord s = userRecord.mSpiRecords.getResourceOrThrow(config.getSpiResourceId()); if (android.text.TextUtils.isEmpty(config.getDestinationAddress())) { config.setDestinationAddress(s.getDestinationAddress()); } if (!(config.getDestinationAddress().equals(s.getDestinationAddress()))) { throw new java.lang.IllegalArgumentException(""Mismatched remote addresseses.""); } switch (config.getMode()) { case android.net.IpSecTransform.MODE_TRANSPORT : case android.net.IpSecTransform.MODE_TUNNEL : break; default : throw new java.lang.IllegalArgumentException((""Invalid IpSecTransform.mode: "" + (config.getMode()))); } }",44719bb1bfa2fba099a1bbcf2429e5285c539769,"private void checkIpSecConfig(android.net.IpSecConfig config) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); switch (config.getEncapType()) { case android.net.IpSecTransform.ENCAP_NONE : break; case android.net.IpSecTransform.ENCAP_ESPINUDP : case android.net.IpSecTransform.ENCAP_ESPINUDP_NON_IKE : userRecord.mEncapSocketRecords.getResourceOrThrow(config.getEncapSocketResourceId()); int port = config.getEncapRemotePort(); if ((port <= 0) || (port > 65535)) { throw new java.lang.IllegalArgumentException((""Invalid remote UDP port: "" + port)); } break; default : throw new java.lang.IllegalArgumentException((""Invalid Encap Type: "" + (config.getEncapType()))); } validateAlgorithms(config); com.android.server.IpSecService.SpiRecord s = userRecord.mSpiRecords.getResourceOrThrow(config.getSpiResourceId()); if (android.text.TextUtils.isEmpty(config.getDestinationAddress())) { config.setDestinationAddress(s.getDestinationAddress()); } if (!(config.getDestinationAddress().equals(s.getDestinationAddress()))) { throw new java.lang.IllegalArgumentException(""Mismatched remote addresseses.""); } com.android.server.IpSecService.checkInetAddress(config.getDestinationAddress()); com.android.server.IpSecService.checkInetAddress(config.getSourceAddress()); switch (config.getMode()) { case android.net.IpSecTransform.MODE_TRANSPORT : case android.net.IpSecTransform.MODE_TUNNEL : break; default : throw new java.lang.IllegalArgumentException((""Invalid IpSecTransform.mode: "" + (config.getMode()))); } }",cd870e82053d9c6548634b597841365b9e08a0fe,2018-01-17 08:40:36,7
584823,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"private static android.net.IpSecTransform buildIpSecTransform(android.content.Context mContext, android.net.IpSecManager.SecurityParameterIndex inSpi, android.net.IpSecManager.SecurityParameterIndex outSpi, android.net.IpSecManager.UdpEncapsulationSocket encapSocket, java.net.InetAddress remoteAddr) throws java.lang.Exception { java.lang.String localAddr = (remoteAddr instanceof java.net.Inet4Address) ? android.net.cts.IpSecManagerTest.IPV4_LOOPBACK : android.net.cts.IpSecManagerTest.IPV6_LOOPBACK; return new android.net.IpSecTransform.Builder(mContext).setSpi(IpSecTransform.DIRECTION_IN, inSpi).setSpi(IpSecTransform.DIRECTION_OUT, outSpi).setEncryption(IpSecTransform.DIRECTION_IN, new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setEncryption(IpSecTransform.DIRECTION_OUT, new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setAuthentication(IpSecTransform.DIRECTION_IN, new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.cts.IpSecManagerTest.AUTH_KEY.length) * 4))).setAuthentication(IpSecTransform.DIRECTION_OUT, new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.cts.IpSecManagerTest.AUTH_KEY.length) * 4))).setIpv4Encapsulation(encapSocket, encapSocket.getPort()).buildTransportModeTransform(java.net.InetAddress.getByName(localAddr)); }",e0bf55733b280f12025f30c592c38e40787ad28d,"private static android.net.IpSecTransform buildIpSecTransform(android.content.Context mContext, android.net.IpSecManager.SecurityParameterIndex spi, android.net.IpSecManager.UdpEncapsulationSocket encapSocket, java.net.InetAddress remoteAddr) throws java.lang.Exception { java.lang.String localAddr = (remoteAddr instanceof java.net.Inet4Address) ? android.net.cts.IpSecManagerTest.IPV4_LOOPBACK : android.net.cts.IpSecManagerTest.IPV6_LOOPBACK; return new android.net.IpSecTransform.Builder(mContext).setSpi(spi).setEncryption(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setAuthentication(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.cts.IpSecManagerTest.AUTH_KEY.length) * 4))).setIpv4Encapsulation(encapSocket, encapSocket.getPort()).buildTransportModeTransform(java.net.InetAddress.getByName(localAddr)); }",bb45a1d9d24c4cb6be74a3c7ec1158dbc149518f,"private static android.net.IpSecTransform buildIpSecTransform(android.content.Context mContext, android.net.IpSecManager.SecurityParameterIndex spi, android.net.IpSecManager.UdpEncapsulationSocket encapSocket, java.net.InetAddress remoteAddr) throws java.lang.Exception { java.lang.String localAddr = (remoteAddr instanceof java.net.Inet4Address) ? android.net.cts.IpSecManagerTest.IPV4_LOOPBACK : android.net.cts.IpSecManagerTest.IPV6_LOOPBACK; return new android.net.IpSecTransform.Builder(mContext).setEncryption(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setAuthentication(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.cts.IpSecManagerTest.AUTH_KEY.length) * 4))).setIpv4Encapsulation(encapSocket, encapSocket.getPort()).buildTransportModeTransform(java.net.InetAddress.getByName(localAddr), spi); }",c27c09200a13646eee53d0ecb3b0920e99352bbf,2018-01-17 08:40:36,4
584823,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testCreateTransform() throws java.lang.Exception { java.net.InetAddress localAddr = java.net.InetAddress.getByName(android.net.cts.IpSecManagerTest.IPV4_LOOPBACK); android.net.IpSecManager.SecurityParameterIndex outSpi = mISM.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, localAddr); android.net.IpSecManager.SecurityParameterIndex inSpi = mISM.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_IN, localAddr, outSpi.getSpi()); android.net.IpSecTransform transform = new android.net.IpSecTransform.Builder(mContext).setSpi(IpSecTransform.DIRECTION_OUT, outSpi).setEncryption(IpSecTransform.DIRECTION_OUT, new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setAuthentication(IpSecTransform.DIRECTION_OUT, new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.cts.IpSecManagerTest.AUTH_KEY.length) * 8))).setSpi(IpSecTransform.DIRECTION_IN, inSpi).setEncryption(IpSecTransform.DIRECTION_IN, new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setAuthentication(IpSecTransform.DIRECTION_IN, new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.cts.IpSecManagerTest.CRYPT_KEY.length) * 8))).buildTransportModeTransform(localAddr); java.net.DatagramSocket localSocket = new java.net.DatagramSocket(0); int localPort = localSocket.getLocalPort(); localSocket.setSoTimeout(500); android.os.ParcelFileDescriptor pin = android.os.ParcelFileDescriptor.fromDatagramSocket(localSocket); java.io.FileDescriptor udpSocket = pin.getFileDescriptor(); mISM.applyTransportModeTransform(udpSocket, transform); byte[] data = new java.lang.String(""Best test data ever!"").getBytes(""UTF-8""); byte[] in = new byte[data.length]; android.system.Os.sendto(udpSocket, data, 0, data.length, 0, localAddr, localPort); android.system.Os.read(udpSocket, in, 0, in.length); assertTrue(""Encapsulated data did not match."", java.util.Arrays.equals(data, in)); mISM.removeTransportModeTransform(udpSocket, transform); android.system.Os.close(udpSocket); transform.close(); }",8c72d4b27c2f4d67ef8a5b0f9937816180856bac,"public void testCreateTransform() throws java.lang.Exception { java.net.InetAddress localAddr = java.net.InetAddress.getByName(android.net.cts.IpSecManagerTest.IPV4_LOOPBACK); android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr); android.net.IpSecTransform transform = new android.net.IpSecTransform.Builder(mContext).setSpi(spi).setEncryption(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setAuthentication(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.cts.IpSecManagerTest.AUTH_KEY.length) * 8))).buildTransportModeTransform(localAddr); java.net.DatagramSocket localSocket = new java.net.DatagramSocket(0); int localPort = localSocket.getLocalPort(); localSocket.setSoTimeout(500); android.os.ParcelFileDescriptor pin = android.os.ParcelFileDescriptor.fromDatagramSocket(localSocket); java.io.FileDescriptor udpSocket = pin.getFileDescriptor(); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_OUT, transform); byte[] data = new java.lang.String(""Best test data ever!"").getBytes(""UTF-8""); byte[] in = new byte[data.length]; android.system.Os.sendto(udpSocket, data, 0, data.length, 0, localAddr, localPort); android.system.Os.read(udpSocket, in, 0, in.length); assertTrue(""Encapsulated data did not match."", java.util.Arrays.equals(data, in)); mISM.removeTransportModeTransforms(udpSocket, transform); android.system.Os.close(udpSocket); transform.close(); }",bf37451c9a8af7b4081e7567daca9d44a7454c23,"public void testCreateTransform() throws java.lang.Exception { java.net.InetAddress localAddr = java.net.InetAddress.getByName(android.net.cts.IpSecManagerTest.IPV4_LOOPBACK); android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr); android.net.IpSecTransform transform = new android.net.IpSecTransform.Builder(mContext).setEncryption(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setAuthentication(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.cts.IpSecManagerTest.AUTH_KEY.length) * 8))).buildTransportModeTransform(localAddr, spi); java.net.DatagramSocket localSocket = new java.net.DatagramSocket(0); int localPort = localSocket.getLocalPort(); localSocket.setSoTimeout(500); android.os.ParcelFileDescriptor pin = android.os.ParcelFileDescriptor.fromDatagramSocket(localSocket); java.io.FileDescriptor udpSocket = pin.getFileDescriptor(); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_OUT, transform); byte[] data = new java.lang.String(""Best test data ever!"").getBytes(""UTF-8""); byte[] in = new byte[data.length]; android.system.Os.sendto(udpSocket, data, 0, data.length, 0, localAddr, localPort); android.system.Os.read(udpSocket, in, 0, in.length); assertTrue(""Encapsulated data did not match."", java.util.Arrays.equals(data, in)); mISM.removeTransportModeTransforms(udpSocket, transform); android.system.Os.close(udpSocket); transform.close(); }",2fd495150d75091af4ce16a4a6ef50a2b672af05,2018-01-17 08:40:36,4
584393,tests_net_java_com_android_server_IpSecServiceParameterizedTest.java,"@org.junit.Test public void testCreateTransportModeTransformAead() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); ipSecConfig.setAuthenticatedEncryption(IpSecTransform.DIRECTION_OUT, com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); ipSecConfig.setAuthenticatedEncryption(IpSecTransform.DIRECTION_IN, com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), eq(""""), eq(new byte[]{ }), eq(0), eq(""""), eq(new byte[]{ }), eq(0), eq(IpSecAlgorithm.AUTH_CRYPT_AES_GCM), eq(com.android.server.IpSecServiceParameterizedTest.AEAD_KEY), anyInt(), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), eq(""""), eq(new byte[]{ }), eq(0), eq(""""), eq(new byte[]{ }), eq(0), eq(IpSecAlgorithm.AUTH_CRYPT_AES_GCM), eq(com.android.server.IpSecServiceParameterizedTest.AEAD_KEY), anyInt(), anyInt(), anyInt(), anyInt()); }",c6f5faaf926ffa22f4d3b5ce93cdaa80f4e61bc9,"@org.junit.Test public void testCreateTransportModeTransformAead() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); ipSecConfig.setAuthenticatedEncryption(com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); ipSecConfig.setAuthenticatedEncryption(com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI), eq(""""), eq(new byte[]{ }), eq(0), eq(""""), eq(new byte[]{ }), eq(0), eq(IpSecAlgorithm.AUTH_CRYPT_AES_GCM), eq(com.android.server.IpSecServiceParameterizedTest.AEAD_KEY), anyInt(), anyInt(), anyInt(), anyInt()); }",6e12214726c788bb8f70f3dd873265409d0a7a59,"@org.junit.Test public void testCreateTransportModeTransformAead() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); ipSecConfig.setAuthenticatedEncryption(com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI), eq(""""), eq(new byte[]{ }), eq(0), eq(""""), eq(new byte[]{ }), eq(0), eq(IpSecAlgorithm.AUTH_CRYPT_AES_GCM), eq(com.android.server.IpSecServiceParameterizedTest.AEAD_KEY), anyInt(), anyInt(), anyInt(), anyInt()); }",268e66b25488b2fc918fcf7d29514d9f83135d4f,2018-01-17 08:40:36,7
584823,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void checkTransform(int protocol, java.lang.String localAddress, android.net.IpSecAlgorithm crypt, android.net.IpSecAlgorithm auth, boolean doUdpEncap, int sendCount, boolean useJavaSockets) throws java.lang.Exception { android.net.cts.IpSecManagerTest.StatsChecker.initStatsChecker(); java.net.InetAddress local = java.net.InetAddress.getByName(localAddress); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex outSpi = mISM.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, local);android.net.IpSecManager.SecurityParameterIndex inSpi = mISM.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_IN, local, outSpi.getSpi())) { android.net.IpSecTransform.Builder transformBuilder = new android.net.IpSecTransform.Builder(mContext).setSpi(IpSecTransform.DIRECTION_OUT, outSpi).setEncryption(IpSecTransform.DIRECTION_OUT, crypt).setAuthentication(IpSecTransform.DIRECTION_OUT, auth).setSpi(IpSecTransform.DIRECTION_IN, inSpi).setEncryption(IpSecTransform.DIRECTION_IN, crypt).setAuthentication(IpSecTransform.DIRECTION_IN, auth); if (doUdpEncap) { transformBuilder = transformBuilder.setIpv4Encapsulation(encapSocket, encapSocket.getPort()); } int ipHdrLen = (local instanceof java.net.Inet6Address) ? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int transportHdrLen = 0; int udpEncapLen = (doUdpEncap) ? android.net.cts.IpSecManagerTest.UDP_HDRLEN : 0; try (android.net.IpSecTransform transform = transformBuilder.buildTransportModeTransform(java.net.InetAddress.getByName(localAddress))) { if (protocol == (IPPROTO_TCP)) { transportHdrLen = android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS; checkTcp(transform, local, sendCount, useJavaSockets); } else if (protocol == (IPPROTO_UDP)) { transportHdrLen = android.net.cts.IpSecManagerTest.UDP_HDRLEN; checkUnconnectedUdp(transform, local, sendCount, useJavaSockets); } else { throw new java.lang.IllegalArgumentException(""Invalid protocol""); } } checkStatsChecker(protocol, ipHdrLen, transportHdrLen, udpEncapLen, sendCount, auth.getTruncationLengthBits()); } }",81ac18372d52c54c7fa3f5c15c3eb50b67dc0816,"public void checkTransform(int protocol, java.lang.String localAddress, android.net.IpSecAlgorithm crypt, android.net.IpSecAlgorithm auth, boolean doUdpEncap, int sendCount, boolean useJavaSockets) throws java.lang.Exception { android.net.cts.IpSecManagerTest.StatsChecker.initStatsChecker(); java.net.InetAddress local = java.net.InetAddress.getByName(localAddress); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(local)) { android.net.IpSecTransform.Builder transformBuilder = new android.net.IpSecTransform.Builder(mContext).setSpi(spi).setEncryption(crypt).setAuthentication(auth); if (doUdpEncap) { transformBuilder = transformBuilder.setIpv4Encapsulation(encapSocket, encapSocket.getPort()); } int ipHdrLen = (local instanceof java.net.Inet6Address) ? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int transportHdrLen = 0; int udpEncapLen = (doUdpEncap) ? android.net.cts.IpSecManagerTest.UDP_HDRLEN : 0; try (android.net.IpSecTransform transform = transformBuilder.buildTransportModeTransform(java.net.InetAddress.getByName(localAddress))) { if (protocol == (IPPROTO_TCP)) { transportHdrLen = android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS; checkTcp(transform, local, sendCount, useJavaSockets); } else if (protocol == (IPPROTO_UDP)) { transportHdrLen = android.net.cts.IpSecManagerTest.UDP_HDRLEN; checkUnconnectedUdp(transform, local, sendCount, useJavaSockets); } else { throw new java.lang.IllegalArgumentException(""Invalid protocol""); } } checkStatsChecker(protocol, ipHdrLen, transportHdrLen, udpEncapLen, sendCount, auth.getTruncationLengthBits()); } }",de140e0e0b96712a5e2aeab64be3d44c233ff019,"public void checkTransform(int protocol, java.lang.String localAddress, android.net.IpSecAlgorithm crypt, android.net.IpSecAlgorithm auth, boolean doUdpEncap, int sendCount, boolean useJavaSockets) throws java.lang.Exception { android.net.cts.IpSecManagerTest.StatsChecker.initStatsChecker(); java.net.InetAddress local = java.net.InetAddress.getByName(localAddress); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(local)) { android.net.IpSecTransform.Builder transformBuilder = new android.net.IpSecTransform.Builder(mContext).setEncryption(crypt).setAuthentication(auth); if (doUdpEncap) { transformBuilder = transformBuilder.setIpv4Encapsulation(encapSocket, encapSocket.getPort()); } int ipHdrLen = (local instanceof java.net.Inet6Address) ? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int transportHdrLen = 0; int udpEncapLen = (doUdpEncap) ? android.net.cts.IpSecManagerTest.UDP_HDRLEN : 0; try (android.net.IpSecTransform transform = transformBuilder.buildTransportModeTransform(local, spi)) { if (protocol == (IPPROTO_TCP)) { transportHdrLen = android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS; checkTcp(transform, local, sendCount, useJavaSockets); } else if (protocol == (IPPROTO_UDP)) { transportHdrLen = android.net.cts.IpSecManagerTest.UDP_HDRLEN; checkUnconnectedUdp(transform, local, sendCount, useJavaSockets); } else { throw new java.lang.IllegalArgumentException(""Invalid protocol""); } } checkStatsChecker(protocol, ipHdrLen, transportHdrLen, udpEncapLen, sendCount, auth.getTruncationLengthBits()); } }",505119080d1b3a894fd8994a92097f4c55ba65ff,2018-01-17 08:40:36,4
584393,core_java_android_net_IpSecTransform.java,"public android.net.IpSecTransform.Builder setEncryption(@android.net.IpSecTransform.TransformDirection int direction, android.net.IpSecAlgorithm algo) { mConfig.setEncryption(direction, algo); return this; }",ddfab747e4e7f1601711b25caf8c86df1cca02a6,public android.net.IpSecTransform.Builder setEncryption(android.net.IpSecAlgorithm algo) { mConfig.setEncryption(algo); return this; },5d69657333392ff5429f2629b643ab96444a73d7,public android.net.IpSecTransform.Builder setEncryption(@android.annotation.NonNull android.net.IpSecAlgorithm algo) { com.android.internal.util.Preconditions.checkNotNull(algo); mConfig.setEncryption(algo); return this; },7447c272135dbd6910fa93995aa1b22648ccbba7,2018-01-17 08:40:36,7
584393,core_java_android_net_IpSecTransform.java,"public android.net.IpSecTransform buildTransportModeTransform(java.net.InetAddress localAddress) throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { mConfig.setMode(android.net.IpSecTransform.MODE_TRANSPORT); mConfig.setLocalAddress(localAddress.getHostAddress()); return new android.net.IpSecTransform(mContext, mConfig).activate(); }",fe6b6504b53a0b307846999f8a9a191c1ccbfd8f,"public android.net.IpSecTransform buildTransportModeTransform(java.net.InetAddress sourceAddress) throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { mConfig.setMode(android.net.IpSecTransform.MODE_TRANSPORT); mConfig.setSourceAddress(sourceAddress.getHostAddress()); return new android.net.IpSecTransform(mContext, mConfig).activate(); }",05191fbdba3f833da0d7da41285bad5555a772d2,"public android.net.IpSecTransform buildTransportModeTransform(@android.annotation.NonNull java.net.InetAddress sourceAddress, @android.annotation.NonNull android.net.IpSecManager.SecurityParameterIndex spi) throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { com.android.internal.util.Preconditions.checkNotNull(sourceAddress); com.android.internal.util.Preconditions.checkNotNull(spi); if ((spi.getResourceId()) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { throw new java.lang.IllegalArgumentException(""Invalid SecurityParameterIndex""); } mConfig.setMode(android.net.IpSecTransform.MODE_TRANSPORT); mConfig.setSourceAddress(sourceAddress.getHostAddress()); mConfig.setSpiResourceId(spi.getResourceId()); return new android.net.IpSecTransform(mContext, mConfig).activate(); }",d52aa0992c1b1613c94c7046482aaf03b536e038,2018-01-17 08:40:36,7
584393,core_java_android_net_IpSecTransform.java,"public android.net.IpSecTransform.Builder setAuthentication(@android.net.IpSecTransform.TransformDirection int direction, android.net.IpSecAlgorithm algo) { mConfig.setAuthentication(direction, algo); return this; }",5dd552c9b559e8e1ca6bdc63a1cf7404381602d5,public android.net.IpSecTransform.Builder setAuthentication(android.net.IpSecAlgorithm algo) { mConfig.setAuthentication(algo); return this; },ddca00a57462f13aae0db6d994e02766cbacdcd0,public android.net.IpSecTransform.Builder setAuthentication(@android.annotation.NonNull android.net.IpSecAlgorithm algo) { com.android.internal.util.Preconditions.checkNotNull(algo); mConfig.setAuthentication(algo); return this; },cac6db9cda0fd7a32a6b8c4a4a7280f6f735e210,2018-01-17 08:40:36,7
570083,src_java_com_android_internal_telephony_ims_ImsResolver.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.android.ims.internal.IImsRegistration getImsRegistration(int slotId, int feature) throws android.os.RemoteException { com.android.internal.telephony.ims.ImsServiceController controller = getImsServiceController(slotId, feature); if (controller != null) { return controller.getRegistration(slotId); } return null; }",d916418a17ac5cbaca8c42e10174104f1eb84fdb,"@android.annotation.Nullable public com.android.ims.internal.IImsRegistration getImsRegistration(int slotId, int feature) throws android.os.RemoteException { com.android.internal.telephony.ims.ImsServiceController controller = getImsServiceController(slotId, feature); if (controller != null) { return controller.getRegistration(slotId); } return null; }",5ba37b8d031f52ca5d1d50730b2ce9ce1407b9c3,2018-01-17 20:29:53,7
570083,tests_telephonytests_src_android_telephony_ims_ImsRegistrationTests.java,@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentState() throws android.os.RemoteException { android.telephony.ims.internal.stub.ImsRegistrationImplBase.Callback mCallback2 = spy(new android.telephony.ims.internal.stub.ImsRegistrationImplBase.Callback()); mRegistration.onRegistered(ImsRegistrationImplBase.REGISTRATION_TECH_LTE); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback2).onRegistered(eq(ImsRegistrationImplBase.REGISTRATION_TECH_LTE)); },86eb9b7152e4771864716529bc97457f2137632b,@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentState() throws android.os.RemoteException { android.telephony.ims.stub.ImsRegistrationImplBase.Callback mCallback2 = spy(new android.telephony.ims.stub.ImsRegistrationImplBase.Callback()); mRegistration.onRegistered(ImsRegistrationImplBase.REGISTRATION_TECH_LTE); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback2).onRegistered(eq(ImsRegistrationImplBase.REGISTRATION_TECH_LTE)); },5d5074c0dbc760f186ed1ce2481e7b28f79899a5,@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentState() throws android.os.RemoteException { mRegistration.onRegistered(ImsRegistrationImplBase.REGISTRATION_TECH_LTE); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback2).onRegistered(eq(ImsRegistrationImplBase.REGISTRATION_TECH_LTE)); },c903a51c461907ce36b17028be498e30f1c17fcb,2018-01-17 20:29:53,7
570203,src_java_com_android_ims_ImsManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void addRegistrationCallback(android.telephony.ims.stub.ImsRegistrationImplBase.Callback cb) throws com.android.ims.ImsException { if (cb == null) { throw new java.lang.NullPointerException(""listener can't be null""); } synchronized(mHasRegisteredLock) { if (!(mHasRegisteredForProxy)) { try { checkAndThrowExceptionIfServiceUnavailable(); mImsServiceProxy.getRegistration().addRegistrationCallback(mRegistrationCallback.getBinder()); com.android.ims.ImsManager.log(""RegistrationCallback registered.""); mHasRegisteredForProxy = true; } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException(""addRegistrationListener()"", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } } } synchronized(mRegistrationCallbacks) { com.android.ims.ImsManager.log((""Local registration callback added: "" + cb)); mRegistrationCallbacks.add(cb); } }",2c7a5d0fb890dc6d354e4ce806c8a23352e4db15,"public void removeNotifyStatusChangedCallback(com.android.ims.ImsServiceProxy.IFeatureUpdate c) { if (c != null) { mStatusCallbacks.remove(c); } else { android.util.Log.w(com.android.ims.ImsManager.TAG, ""removeNotifyStatusChangedCallback: callback is null!""); } }",7f9c7a91a2b5d66c4993e89a89d81b4cff2444d8,2018-01-17 20:29:53,14
570083,tests_telephonytests_src_android_telephony_ims_ImsRegistrationTests.java,"@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentStateDisconnected() throws android.os.RemoteException { android.telephony.ims.internal.stub.ImsRegistrationImplBase.Callback mCallback2 = spy(new android.telephony.ims.internal.stub.ImsRegistrationImplBase.Callback()); com.android.ims.ImsReasonInfo info = new com.android.ims.ImsReasonInfo(com.android.ims.ImsReasonInfo.CODE_LOCAL_NETWORK_NO_LTE_COVERAGE, 0); mRegistration.onDeregistered(info); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback).onDeregistered(eq(info)); verify(mCallback2).onDeregistered(eq(info)); }",f4424f485bd05764d7d0174cc79226126deb10a2,"@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentStateDisconnected() throws android.os.RemoteException { android.telephony.ims.stub.ImsRegistrationImplBase.Callback mCallback2 = spy(new android.telephony.ims.stub.ImsRegistrationImplBase.Callback()); com.android.ims.ImsReasonInfo info = new com.android.ims.ImsReasonInfo(com.android.ims.ImsReasonInfo.CODE_LOCAL_NETWORK_NO_LTE_COVERAGE, 0); mRegistration.onDeregistered(info); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback).onDeregistered(eq(info)); verify(mCallback2).onDeregistered(eq(info)); }",633bf9e28bf686c81271b4b18984d1ecec8b442a,"@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentStateDisconnected() throws android.os.RemoteException { com.android.ims.ImsReasonInfo info = new com.android.ims.ImsReasonInfo(com.android.ims.ImsReasonInfo.CODE_LOCAL_NETWORK_NO_LTE_COVERAGE, 0); mRegistration.onDeregistered(info); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback).onDeregistered(eq(info)); verify(mCallback2).onDeregistered(eq(info)); }",3f52e1de7aace1c665432d42d2d892c997a94492,2018-01-17 20:29:53,7
570202,telephony_java_android_telephony_ims_stub_ImsRegistrationImplBase.java,@android.telephony.ims.internal.stub.ImsRegistrationImplBase.ImsRegistrationTech private int getConnectionType() { synchronized(mLock) { return mConnectionType; } },01ded31d77043a5b11dee9db315c87d7eb3ab38f,@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech private int getConnectionType() { synchronized(mLock) { return mConnectionType; } },fd4674ef2501a8bf53019d62419c8f789e3b946c,@com.android.internal.annotations.VisibleForTesting @android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech public final int getConnectionType() { synchronized(mLock) { return mConnectionType; } },a988851faef4565c3db45819edf3cb7f4bb10c9f,2018-01-17 20:29:53,12
570202,telephony_java_android_telephony_ims_stub_ImsRegistrationImplBase.java,private void updateNewCallbackWithState(android.telephony.ims.internal.aidl.IImsRegistrationCallback c) throws android.os.RemoteException { int state; com.android.ims.ImsReasonInfo disconnectInfo; synchronized(mLock) { state = mRegistrationState; disconnectInfo = mLastDisconnectCause; } switch (state) { case android.telephony.ims.internal.stub.ImsRegistrationImplBase.REGISTRATION_STATE_NOT_REGISTERED : { c.onDeregistered(disconnectInfo); break; } case android.telephony.ims.internal.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERING : { c.onRegistering(getConnectionType()); break; } case android.telephony.ims.internal.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERED : { c.onRegistered(getConnectionType()); break; } } },9c7575137679938b9c5f96f87b5206443cb1a312,private void updateNewCallbackWithState(com.android.ims.internal.IImsRegistrationCallback c) throws android.os.RemoteException { int state; com.android.ims.ImsReasonInfo disconnectInfo; synchronized(mLock) { state = mRegistrationState; disconnectInfo = mLastDisconnectCause; } switch (state) { case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_NOT_REGISTERED : { c.onDeregistered(disconnectInfo); break; } case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERING : { c.onRegistering(getConnectionType()); break; } case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERED : { c.onRegistered(getConnectionType()); break; } } },3b0020aaf23f81eeae98f0ceba7b3414a971febe,private void updateNewCallbackWithState(com.android.ims.internal.IImsRegistrationCallback c) throws android.os.RemoteException { int state; com.android.ims.ImsReasonInfo disconnectInfo; synchronized(mLock) { state = mRegistrationState; disconnectInfo = mLastDisconnectCause; } switch (state) { case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_NOT_REGISTERED : { c.onDeregistered(disconnectInfo); break; } case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERING : { c.onRegistering(getConnectionType()); break; } case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERED : { c.onRegistered(getConnectionType()); break; } case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_UNKNOWN : { break; } } },ea866fddd643a129327f0173b8596944d50f8b38,2018-01-17 20:29:53,12
570203,src_java_com_android_ims_ImsConnectionStateListener.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public final void onRegistering(@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech int imsRadioTech) { onImsProgressing(imsRadioTech); },ff18090f062b89287f4396cb82a0a5f50128e395,@java.lang.Override public final void onRegistering(@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech int imsRadioTech) { onImsProgressing(imsRadioTech); },9517919e39869704dd3d846f926b81c90dd90685,2018-01-17 20:29:53,14
570202,telephony_java_android_telephony_ims_stub_ImsRegistrationImplBase.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onTechnologyChangeFailed(int imsRadioTech, com.android.ims.ImsReasonInfo imsReasonInfo) { this.onTechnologyChangeFailed(imsRadioTech, imsReasonInfo); }",d58b6a3394083c3e923c75a51515f3c4364b3b69,"public final void onSubscriberAssociatedUriChanged(android.net.Uri[] uris) { mCallbacks.broadcast(( c) -> { try { c.onSubscriberAssociatedUriChanged(uris); } catch ( e) { android.util.Log.w(android.telephony.ims.stub.ImsRegistrationImplBase.LOG_TAG, (((android.telephony.ims.stub.e + "" "") + ""onSubscriberAssociatedUriChanged() - Skipping "") + ""callback."")); } }); }",bf16a8499aa8dff3cefaef2875acae65c0f70900,2018-01-17 20:29:53,12
570203,src_java_com_android_ims_ImsConnectionStateListener.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public final void onRegistered(@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech int imsRadioTech) { onImsConnected(imsRadioTech); },eca75caee94d579c90608cb9e545f26a332e586d,@java.lang.Override public final void onRegistered(@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech int imsRadioTech) { onImsConnected(imsRadioTech); },1ea0e018692faa57eaa07419e72fa124c0279042,2018-01-17 20:29:53,14
570203,src_java_com_android_ims_ImsManager.java,"private void createImsService() { if (!(mConfigDynamicBind)) { android.telephony.Rlog.i(com.android.ims.ImsManager.TAG, ""Creating ImsService using ServiceManager""); mImsServiceProxy = getServiceProxyCompat(); } else { android.telephony.Rlog.i(com.android.ims.ImsManager.TAG, ""Creating ImsService using ImsResolver""); mImsServiceProxy = getServiceProxy(); } synchronized(mHasRegisteredLock) { mHasRegisteredForProxy = false; } }",7ebdcd67a348555828a6dcdf271d8bc0825c03c6,"private void createImsService() { if (!(mConfigDynamicBind)) { android.telephony.Rlog.i(com.android.ims.ImsManager.TAG, ""Creating ImsService using ServiceManager""); mImsServiceProxy = com.android.ims.ImsServiceProxyCompat.create(mPhoneId, mDeathRecipient); } else { android.telephony.Rlog.i(com.android.ims.ImsManager.TAG, ""Creating ImsService using ImsResolver""); mImsServiceProxy = com.android.ims.ImsServiceProxy.create(mContext, mPhoneId); } synchronized(mHasRegisteredLock) { mHasRegisteredForProxy = false; } }",c1280dfcaaddd1ed839be9846bb4e9b547510bf2,"private void createImsService() { if (!(mConfigDynamicBind)) { android.telephony.Rlog.i(com.android.ims.ImsManager.TAG, ""Creating ImsService using ServiceManager""); mImsServiceProxy = com.android.ims.ImsServiceProxyCompat.create(mPhoneId, mDeathRecipient); } else { android.telephony.Rlog.i(com.android.ims.ImsManager.TAG, ""Creating ImsService using ImsResolver""); mImsServiceProxy = com.android.ims.ImsServiceProxy.create(mContext, mPhoneId); } mImsServiceProxy.setStatusCallback(new com.android.ims.ImsServiceProxy.IFeatureUpdate() { @java.lang.Override public void notifyStateChanged() { mStatusCallbacks.forEach(ImsServiceProxy.IFeatureUpdate::notifyStateChanged); } @java.lang.Override public void notifyUnavailable() { mStatusCallbacks.forEach(ImsServiceProxy.IFeatureUpdate::notifyUnavailable); } }); synchronized(mHasRegisteredLock) { mHasRegisteredForProxy = false; } }",dbd043b32119b398f54761bbc4695fd2fec63fc2,2018-01-17 20:29:53,14
570203,src_java_com_android_ims_ImsManager.java,"public void removeRegistrationListener(com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { if (listener == null) { throw new java.lang.NullPointerException(""listener can't be null""); } synchronized(mRegistrationListeners) { com.android.ims.ImsManager.log((""Local registration listener removed: "" + listener)); mRegistrationListeners.remove(listener); } }",3943640c725cee1c15c6acb3b28bf0b0509e38a2,"public void removeRegistrationListener(android.telephony.ims.stub.ImsRegistrationImplBase.Callback cb) throws com.android.ims.ImsException { if (cb == null) { throw new java.lang.NullPointerException(""listener can't be null""); } synchronized(mRegistrationCallbacks) { com.android.ims.ImsManager.log((""Local registration callback removed: "" + cb)); mRegistrationCallbacks.remove(cb); } }",4acd67a7c704b8b0f459c4a1b0008f88290dda45,"public void removeRegistrationListener(com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { if (listener == null) { throw new java.lang.NullPointerException(""listener can't be null""); } synchronized(mRegistrationListeners) { com.android.ims.ImsManager.log((""Local registration listener removed: "" + listener)); mRegistrationListeners.remove(listener); } }",3943640c725cee1c15c6acb3b28bf0b0509e38a2,2018-01-17 20:29:53,14
570203,src_java_com_android_ims_ImsManager.java,"@java.lang.Override public void registrationProgressingWithRadioTech(int imsRadioTech) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log((""registrationProgressingWithRadioTech :: imsRadioTech="" + imsRadioTech)); } synchronized(mRegistrationListeners) { mRegistrationListeners.forEach(( l) -> l.onImsProgressing(imsRadioTech)); } }",f3781ac29ca175e56d31842e5998b898709aa713,"@java.lang.Override public void onRegistering(int imsRadioTech) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log(""onRegistering ::""); } synchronized(mRegistrationCallbacks) { mRegistrationCallbacks.forEach(( l) -> l.onRegistering(imsRadioTech)); } }",014a0f443947fff8b46ae46306f6ea9719d9c026,"@java.lang.Override public void onRegistering(int imsRadioTech) { if (com.android.ims.ImsManager.DBG) com.android.ims.ImsManager.log(""onRegistering ::""); synchronized(mRegistrationListeners) { mRegistrationListeners.forEach(( l) -> l.onRegistering(imsRadioTech)); } }",96ce48a18b0e25247622cdd4ed3b4b473acca8a5,2018-01-17 20:29:53,14
570203,src_java_com_android_ims_ImsConnectionStateListener.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public final void onDeregistered(com.android.ims.ImsReasonInfo info) { onImsDisconnected(info); },6070e15d4e2cbc4a940844faa82cc077d58bf1a2,@java.lang.Override public final void onDeregistered(com.android.ims.ImsReasonInfo info) { onImsDisconnected(info); },f711e569bc2230f26cd81711c0bc569a6ac31e58,2018-01-17 20:29:53,14
570203,src_java_com_android_ims_ImsServiceProxy.java,"@java.lang.Override public void imsFeatureCreated(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((!(mIsAvailable)) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(LOG_TAG, (((""Feature enabled on slotId: "" + slotId) + "" for feature: "") + feature)); mIsAvailable = true; } } }",a9118629f6c857ad935351f8554c57c1e5d597f8,"@java.lang.Override public void imsFeatureCreated(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((!(mIsAvailable)) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, (((""Feature enabled on slotId: "" + slotId) + "" for feature: "") + feature)); mIsAvailable = true; } } }",f3d3ccdabf8f1d07da2c21802bcb7a66f40e7cfb,"@java.lang.Override public void imsFeatureCreated(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((!(mIsAvailable)) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(com.android.ims.ImsServiceProxy.TAG, (((""Feature enabled on slotId: "" + slotId) + "" for feature: "") + feature)); mIsAvailable = true; } } }",9747b90528da7f71d69786aa5e3f1c0a08d5c8cf,2018-01-17 20:29:53,14
570203,src_java_com_android_ims_ImsServiceProxy.java,"@java.lang.Override public void imsStatusChanged(int slotId, int feature, int status) throws android.os.RemoteException { synchronized(mLock) { android.util.Log.i(LOG_TAG, (((((""imsStatusChanged: slot: "" + slotId) + "" feature: "") + feature) + "" status: "") + status)); if (((mSlotId) == slotId) && (feature == (mSupportedFeature))) { mFeatureStatusCached = status; if ((mStatusCallback) != null) { mStatusCallback.notifyStatusChanged(); } } } }",3ea9cdf7159eab7dedd29983629f9eb1e6dd10d3,"@java.lang.Override public void imsStatusChanged(int slotId, int feature, int status) throws android.os.RemoteException { synchronized(mLock) { android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, (((((""imsStatusChanged: slot: "" + slotId) + "" feature: "") + feature) + "" status: "") + status)); if (((mSlotId) == slotId) && (feature == (mSupportedFeature))) { mFeatureStatusCached = status; if ((mStatusCallback) != null) { mStatusCallback.notifyStatusChanged(); } } } }",59368851fe29dfea28ee2812d92b86e90de8cf61,"@java.lang.Override public void imsStatusChanged(int slotId, int feature, int status) throws android.os.RemoteException { synchronized(mLock) { android.util.Log.i(com.android.ims.ImsServiceProxy.TAG, (((((""imsStatusChanged: slot: "" + slotId) + "" feature: "") + feature) + "" status: "") + status)); if (((mSlotId) == slotId) && (feature == (mSupportedFeature))) { mFeatureStatusCached = status; if ((mStatusCallback) != null) { mStatusCallback.notifyStateChanged(); } } } }",888628015f7808b792287fda37dc1fecdcac38b2,2018-01-17 20:29:53,14
570203,src_java_com_android_ims_ImsServiceProxy.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static com.android.ims.ImsServiceProxy create(android.content.Context context, int slotId) { com.android.ims.ImsServiceProxy serviceProxy = new com.android.ims.ImsServiceProxy(context, slotId, android.telephony.ims.feature.ImsFeature.MMTEL); com.android.ims.internal.IImsMMTelFeature b = com.android.ims.ImsServiceProxy.getTelephonyManager(context).getImsMMTelFeatureAndListen(slotId, serviceProxy.getListener()); if (b != null) { serviceProxy.setBinder(b.asBinder()); serviceProxy.getFeatureStatus(); } else { android.telephony.Rlog.w(com.android.ims.ImsServiceProxy.LOG_TAG, (""getServiceProxy: b is null! Phone Id: "" + slotId)); } return serviceProxy; }",761b8e3fae04045da41c8025541992119eaf2f89,"public static com.android.ims.ImsServiceProxy create(android.content.Context context, int slotId) { com.android.ims.ImsServiceProxy serviceProxy = new com.android.ims.ImsServiceProxy(context, slotId, android.telephony.ims.feature.ImsFeature.MMTEL); android.telephony.TelephonyManager tm = com.android.ims.ImsServiceProxy.getTelephonyManager(context); if (tm == null) { android.telephony.Rlog.w(com.android.ims.ImsServiceProxy.TAG, ""getServiceProxy: TelephonyManager is null!""); return serviceProxy; } com.android.ims.internal.IImsMMTelFeature binder = tm.getImsMMTelFeatureAndListen(slotId, serviceProxy.getListener()); if (binder != null) { serviceProxy.setBinder(binder.asBinder()); serviceProxy.getFeatureStatus(); } else { android.telephony.Rlog.w(com.android.ims.ImsServiceProxy.TAG, (""getServiceProxy: binder is null! Phone Id: "" + slotId)); } return serviceProxy; }",47933a0c33d3460a0c05184118ba336947a5dd99,2018-01-17 20:29:53,14
570203,src_java_com_android_ims_ImsServiceProxy.java,"@java.lang.Override public void imsFeatureRemoved(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((mIsAvailable) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(LOG_TAG, (((""Feature disabled on slotId: "" + slotId) + "" for feature: "") + feature)); mIsAvailable = false; } } }",991797ebbf96b4241a910d03def00b7fc9362735,"@java.lang.Override public void imsFeatureRemoved(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((mIsAvailable) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, (((""Feature disabled on slotId: "" + slotId) + "" for feature: "") + feature)); mIsAvailable = false; } } }",d40c8311b50a699dbcf44622578632a1663e317d,"@java.lang.Override public void imsFeatureRemoved(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((mIsAvailable) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(com.android.ims.ImsServiceProxy.TAG, (((""Feature disabled on slotId: "" + slotId) + "" for feature: "") + feature)); mIsAvailable = false; if ((mStatusCallback) != null) { mStatusCallback.notifyUnavailable(); } } } }",506013ac6588e0ebda4eee06a27db8c54abc50bd,2018-01-17 20:29:53,14
570203,src_java_com_android_ims_ImsManager.java,"public void addRegistrationListener(int serviceClass, com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { addRegistrationListener(listener); }",169fa42aea16840b78d8d5d2c964302ea2d78f18,"public void addRegistrationListener(int serviceClass, com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { addRegistrationCallback(listener); }",af19dc8c316232ef810401464ad8c9966a365dcf,"public void addRegistrationListener(int serviceClass, com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { addRegistrationListener(listener); }",169fa42aea16840b78d8d5d2c964302ea2d78f18,2018-01-17 20:29:53,14
570203,src_java_com_android_ims_ImsServiceProxy.java,"public int getFeatureStatus() { synchronized(mLock) { if ((isBinderAlive()) && ((mFeatureStatusCached) != null)) { android.util.Log.i(LOG_TAG, (""getFeatureStatus - returning cached: "" + (mFeatureStatusCached))); return mFeatureStatusCached; } } java.lang.Integer status = retrieveFeatureStatus(); synchronized(mLock) { if (status == null) { return android.telephony.ims.feature.ImsFeature.STATE_NOT_AVAILABLE; } mFeatureStatusCached = status; } android.util.Log.i(LOG_TAG, (""getFeatureStatus - returning "" + status)); return status; }",c4f78819aff7003656fc7e50fa366c1bbe135d5d,"public int getFeatureStatus() { synchronized(mLock) { if ((isBinderAlive()) && ((mFeatureStatusCached) != null)) { android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, (""getFeatureStatus - returning cached: "" + (mFeatureStatusCached))); return mFeatureStatusCached; } } java.lang.Integer status = retrieveFeatureStatus(); synchronized(mLock) { if (status == null) { return android.telephony.ims.feature.ImsFeature.STATE_NOT_AVAILABLE; } mFeatureStatusCached = status; } android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, (""getFeatureStatus - returning "" + status)); return status; }",30d2dbcda5a7cbf915246bab589e0575f102b163,"public int getFeatureStatus() { synchronized(mLock) { if ((isBinderAlive()) && ((mFeatureStatusCached) != null)) { android.util.Log.i(com.android.ims.ImsServiceProxy.TAG, (""getFeatureStatus - returning cached: "" + (mFeatureStatusCached))); return mFeatureStatusCached; } } java.lang.Integer status = retrieveFeatureStatus(); synchronized(mLock) { if (status == null) { return android.telephony.ims.feature.ImsFeature.STATE_NOT_AVAILABLE; } mFeatureStatusCached = status; } android.util.Log.i(com.android.ims.ImsServiceProxy.TAG, (""getFeatureStatus - returning "" + status)); return status; }",c5155673f8e176c2e3a8870cbe23df0c56e70db0,2018-01-17 20:29:53,14
570203,src_java_com_android_ims_ImsManager.java,"public int open(int serviceClass, android.app.PendingIntent incomingCallPendingIntent, com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable(); if (incomingCallPendingIntent == null) { throw new java.lang.NullPointerException(""incomingCallPendingIntent can't be null""); } if (listener == null) { throw new java.lang.NullPointerException(""listener can't be null""); } int result = 0; try { result = mImsServiceProxy.startSession(incomingCallPendingIntent, new com.android.ims.ImsManager.ImsRegistrationListenerBase()); addRegistrationListener(listener); com.android.ims.ImsManager.log(""open: Session started and registration listener added.""); } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException(""open()"", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } if (result <= 0) { throw new com.android.ims.ImsException(""open()"", (result * (-1))); } return result; }",48d4303b0ed339fa2d3bd7b46f8cf3f32e4abb9f,"public int open(int serviceClass, android.app.PendingIntent incomingCallPendingIntent, com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable(); if (incomingCallPendingIntent == null) { throw new java.lang.NullPointerException(""incomingCallPendingIntent can't be null""); } if (listener == null) { throw new java.lang.NullPointerException(""listener can't be null""); } int result = 0; try { result = mImsServiceProxy.startSession(incomingCallPendingIntent, new com.android.ims.ImsManager.ImsRegistrationListenerBase()); addRegistrationCallback(listener); com.android.ims.ImsManager.log(""open: Session started and registration listener added.""); } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException(""open()"", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } if (result <= 0) { throw new com.android.ims.ImsException(""open()"", (result * (-1))); } return result; }",4728c19577c494a6b709c9a710611999665888d2,"public int open(int serviceClass, android.app.PendingIntent incomingCallPendingIntent, com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable(); if (incomingCallPendingIntent == null) { throw new java.lang.NullPointerException(""incomingCallPendingIntent can't be null""); } if (listener == null) { throw new java.lang.NullPointerException(""listener can't be null""); } int result = 0; try { result = mImsServiceProxy.startSession(incomingCallPendingIntent, new com.android.ims.ImsManager.ImsRegistrationListenerBase()); addRegistrationListener(listener); com.android.ims.ImsManager.log(""open: Session started and registration listener added.""); } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException(""open()"", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } if (result <= 0) { throw new com.android.ims.ImsException(""open()"", (result * (-1))); } return result; }",48d4303b0ed339fa2d3bd7b46f8cf3f32e4abb9f,2018-01-17 20:29:53,14
570203,src_java_com_android_ims_ImsServiceProxy.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.android.ims.internal.IImsRegistration getRegistration() { return com.android.ims.ImsServiceProxy.getTelephonyManager(mContext).getImsRegistration(mSlotId, ImsFeature.MMTEL); }",4ca892e4e58ff3d199807c420344938019acccdb,"@android.annotation.Nullable public com.android.ims.internal.IImsRegistration getRegistration() { android.telephony.TelephonyManager tm = com.android.ims.ImsServiceProxy.getTelephonyManager(mContext); return tm != null ? tm.getImsRegistration(mSlotId, ImsFeature.MMTEL) : null; }",61277161ff58364333768ca2159319c543a8d656,2018-01-17 20:29:53,14
570203,src_java_com_android_ims_ImsManager.java,"@java.lang.Override public void registrationConnectedWithRadioTech(int imsRadioTech) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log((""registrationConnectedWithRadioTech :: imsRadioTech="" + imsRadioTech)); } synchronized(mRegistrationListeners) { mRegistrationListeners.forEach(( l) -> l.onImsConnected(imsRadioTech)); } }",7fdb4858191687038cd1f856f63b01a8d78950cf,"@java.lang.Override public void onRegistered(int imsRadioTech) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log(""onRegistered ::""); } synchronized(mRegistrationCallbacks) { mRegistrationCallbacks.forEach(( l) -> l.onRegistered(imsRadioTech)); } }",d445038a6e2187633514b8f73cf51697dd4a7594,"@java.lang.Override public void onRegistered(int imsRadioTech) { if (com.android.ims.ImsManager.DBG) com.android.ims.ImsManager.log(""onRegistered ::""); synchronized(mRegistrationListeners) { mRegistrationListeners.forEach(( l) -> l.onRegistered(imsRadioTech)); } }",e5d4394c2e9304478787e793a792889178befde2,2018-01-17 20:29:53,14
570203,src_java_com_android_ims_ImsConnectionStateListener.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public final void onTechnologyChangeFailed(@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech int imsRadioTech, com.android.ims.ImsReasonInfo info) { onRegistrationChangeFailed(imsRadioTech, info); }",6f1728c49aab5267c6a4d87b0c07c50b04f14b5f,"@java.lang.Override public final void onTechnologyChangeFailed(@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech int imsRadioTech, com.android.ims.ImsReasonInfo info) { onRegistrationChangeFailed(imsRadioTech, info); }",0317e44ff473e695a34efbc901c550c03a71ab75,2018-01-17 20:29:53,14
570203,src_java_com_android_ims_ImsManager.java,"@java.lang.Override public void registrationChangeFailed(int targetAccessTech, com.android.ims.ImsReasonInfo imsReasonInfo) { if (com.android.ims.ImsManager.DBG) com.android.ims.ImsManager.log((((""registrationChangeFailed :: targetAccessTech="" + targetAccessTech) + "", imsReasonInfo="") + imsReasonInfo)); synchronized(mRegistrationListeners) { mRegistrationListeners.forEach(( l) -> l.onRegistrationChangeFailed(targetAccessTech, imsReasonInfo)); } }",7df8f26638178038f3122edd8ed9b2e633db1f7a,"@java.lang.Override public void onTechnologyChangeFailed(int targetRadioTech, com.android.ims.ImsReasonInfo imsReasonInfo) { if (com.android.ims.ImsManager.DBG) com.android.ims.ImsManager.log((((""onTechnologyChangeFailed :: targetAccessTech="" + targetRadioTech) + "", imsReasonInfo="") + imsReasonInfo)); synchronized(mRegistrationCallbacks) { mRegistrationCallbacks.forEach(( l) -> l.onTechnologyChangeFailed(targetRadioTech, imsReasonInfo)); } }",69501756dcfd331bb209a72bd9730f4141412e5e,"@java.lang.Override public void onTechnologyChangeFailed(int targetRadioTech, com.android.ims.ImsReasonInfo imsReasonInfo) { if (com.android.ims.ImsManager.DBG) com.android.ims.ImsManager.log((((""onTechnologyChangeFailed :: targetAccessTech="" + targetRadioTech) + "", imsReasonInfo="") + imsReasonInfo)); synchronized(mRegistrationListeners) { mRegistrationListeners.forEach(( l) -> l.onTechnologyChangeFailed(targetRadioTech, imsReasonInfo)); } }",72f0db4924220bd4323f921229f51f750d5592ff,2018-01-17 20:29:53,14
570203,src_java_com_android_ims_ImsManager.java,"@java.lang.Override public void registrationDisconnected(com.android.ims.ImsReasonInfo imsReasonInfo) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log((""registrationDisconnected :: imsReasonInfo"" + imsReasonInfo)); } addToRecentDisconnectReasons(imsReasonInfo); synchronized(mRegistrationListeners) { mRegistrationListeners.forEach(( l) -> l.onImsDisconnected(imsReasonInfo)); } }",3d0c63f683ed049019b2ef0d0ff2b1f43d15e2ce,"@java.lang.Override public void onDeregistered(com.android.ims.ImsReasonInfo imsReasonInfo) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log(""onDeregistered ::""); } synchronized(mRegistrationCallbacks) { mRegistrationCallbacks.forEach(( l) -> l.onDeregistered(imsReasonInfo)); } }",c09e80837b6b1bfbdd2861cb300c37ffcb6059bf,"@java.lang.Override public void onDeregistered(com.android.ims.ImsReasonInfo imsReasonInfo) { if (com.android.ims.ImsManager.DBG) com.android.ims.ImsManager.log(""onDeregistered ::""); synchronized(mRegistrationListeners) { mRegistrationListeners.forEach(( l) -> l.onDeregistered(imsReasonInfo)); } }",934774d74bae32de8588e2f83cd0deafa9a80c26,2018-01-17 20:29:53,14
570203,src_java_com_android_ims_ImsManager.java,"public void addRegistrationListener(com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { if (listener == null) { throw new java.lang.NullPointerException(""listener can't be null""); } synchronized(mHasRegisteredLock) { if (!(mHasRegisteredForProxy)) { try { checkAndThrowExceptionIfServiceUnavailable(); mImsServiceProxy.addRegistrationListener(mRegistrationListenerProxy); com.android.ims.ImsManager.log(""RegistrationListenerProxy registered.""); mHasRegisteredForProxy = true; } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException(""addRegistrationListener()"", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } } } synchronized(mRegistrationListeners) { com.android.ims.ImsManager.log((""Local registration listener added: "" + listener)); mRegistrationListeners.add(listener); } }",66870b6af95ae7086f1a5688d1c60d115e935295,public void addRegistrationListener(com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { addRegistrationCallback(listener); },3457077a0813fd34e620471aabe89ca5edf5d79d,"public void addRegistrationListener(com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { if (listener == null) { throw new java.lang.NullPointerException(""listener can't be null""); } synchronized(mHasRegisteredLock) { if (!(mHasRegisteredForProxy)) { try { checkAndThrowExceptionIfServiceUnavailable(); mImsServiceProxy.addRegistrationListener(mImsRegistrationListenerProxy); mImsServiceProxy.getRegistration().addRegistrationCallback(mRegistrationCallback); com.android.ims.ImsManager.log(""Registration Callback/Listener registered.""); mHasRegisteredForProxy = true; } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException(""addRegistrationListener()"", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } } } synchronized(mRegistrationListeners) { com.android.ims.ImsManager.log((""Local registration listener added: "" + listener)); mRegistrationListeners.add(listener); } }",8944719de69d348ad82fdc95fd56cf8c4915b47b,2018-01-17 20:29:53,14
570202,telephony_java_android_telephony_ims_stub_ImsRegistrationImplBase.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onRegistered(int imsRadioTech) { this.onRegistered(imsRadioTech); },7ae51e83ab57b029fb963ce53cecd5ebc43eb1d0,public void onSubscriberAssociatedUriChanged(android.net.Uri[] uris) { },73385b43b81336059f201674182c16fa1b2dc873,2018-01-17 20:29:53,12
588915,src_java_com_android_internal_telephony_uicc_IccCardProxy.java,private java.lang.String getIccStateIntentString(com.android.internal.telephony.IccCardConstants.State state) { switch (state) { case ABSENT : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_ABSENT; case PIN_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case PUK_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case NETWORK_LOCKED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_READY; case NOT_READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_NOT_READY; case PERM_DISABLED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case CARD_IO_ERROR : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR; case CARD_RESTRICTED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_CARD_RESTRICTED; default : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_UNKNOWN; } },44c31e1029363b9b7ffe2106128f78c10f35a860,private java.lang.String getIccStateIntentString(com.android.internal.telephony.IccCardConstants.State state) { switch (state) { case ABSENT : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_ABSENT; case PIN_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case PUK_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case NETWORK_LOCKED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_READY; case NOT_READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_NOT_READY; case PERM_DISABLED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case CARD_IO_ERROR : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR; case CARD_RESTRICTED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_CARD_RESTRICTED; case LOADED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOADED; default : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_UNKNOWN; } },35e73d0a7db766f1b39a5c0a59b2743ed3a62c83,private java.lang.String getIccStateIntentString(com.android.internal.telephony.IccCardConstants.State state) { switch (state) { case ABSENT : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_ABSENT; case PIN_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case PUK_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case NETWORK_LOCKED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_READY; case NOT_READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_NOT_READY; case PERM_DISABLED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case CARD_IO_ERROR : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR; case CARD_RESTRICTED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_CARD_RESTRICTED; default : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_UNKNOWN; } },44c31e1029363b9b7ffe2106128f78c10f35a860,2018-01-17 21:55:10,4
588944,src_com_android_bluetooth_opp_BluetoothOppService.java,"@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ((("" onConnect BluetoothSocket :"" + socket) + "" \n :device :"") + device)); } com.android.bluetooth.BluetoothObexTransport transport = new com.android.bluetooth.BluetoothObexTransport(socket); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.opp.BluetoothOppService.MSG_INCOMING_BTOPP_CONNECTION); msg.obj = transport; msg.sendToTarget(); return true; }",cb4da57f5f5fdd67b1057a595d5035b2926410d8,"@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ((("" onConnect BluetoothSocket :"" + socket) + "" \n :device :"") + device)); } com.android.bluetooth.BluetoothObexTransport transport = new com.android.bluetooth.BluetoothObexTransport(socket); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.opp.BluetoothOppService.MSG_INCOMING_BTOPP_CONNECTION); msg.obj = transport; msg.sendToTarget(); mAcceptNewConnect = false; return true; }",395210b9f1944dc6926cf17fb0311a2920646442,"@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ((("" onConnect BluetoothSocket :"" + socket) + "" \n :device :"") + device)); } if (!(mAcceptNewConnections)) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, (("" onConnect BluetoothSocket :"" + socket) + "" rejected"")); return false; } com.android.bluetooth.BluetoothObexTransport transport = new com.android.bluetooth.BluetoothObexTransport(socket); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.opp.BluetoothOppService.MSG_INCOMING_BTOPP_CONNECTION); msg.obj = transport; msg.sendToTarget(); mAcceptNewConnections = false; return true; }",373163a4089fecdd82a388ed29f42da04d53c4eb,2018-01-17 21:56:20,6
588944,src_com_android_bluetooth_opp_BluetoothOppObexServerSession.java,"@java.lang.Override public void onClose() { if (com.android.bluetooth.opp.BluetoothOppObexServerSession.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppObexServerSession.TAG, ""onClose""); } releaseWakeLocks(); if ((mServerSocket) != null) { if (com.android.bluetooth.opp.BluetoothOppObexServerSession.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppObexServerSession.TAG, ""prepareForNewConnect""); } mServerSocket.prepareForNewConnect(); } com.android.bluetooth.opp.BluetoothOppUtility.cancelNotification(mContext); if ((mCallback) != null) { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SESSION_COMPLETE; msg.obj = mInfo; msg.sendToTarget(); } }",6049ddb609af814000c21662fcc5b35b324981b1,"@java.lang.Override public void onClose() { if (com.android.bluetooth.opp.BluetoothOppObexServerSession.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppObexServerSession.TAG, ""onClose""); } releaseWakeLocks(); if ((mServerSocket) != null) { if (com.android.bluetooth.opp.BluetoothOppObexServerSession.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppObexServerSession.TAG, ""prepareForNewConnect""); } ((com.android.bluetooth.opp.BluetoothOppService) (mContext)).mAcceptNewConnect = true; } com.android.bluetooth.opp.BluetoothOppUtility.cancelNotification(mContext); if ((mCallback) != null) { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SESSION_COMPLETE; msg.obj = mInfo; msg.sendToTarget(); } }",eeff8c1c0ebbc9d5361b4a58109fbac9f497ddbe,"@java.lang.Override public void onClose() { if (com.android.bluetooth.opp.BluetoothOppObexServerSession.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppObexServerSession.TAG, ""onClose""); } releaseWakeLocks(); mBluetoothOppService.acceptNewConnections(); com.android.bluetooth.opp.BluetoothOppUtility.cancelNotification(mContext); if ((mCallback) != null) { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SESSION_COMPLETE; msg.obj = mInfo; msg.sendToTarget(); } }",5aad9e39d84e3147ef90438e436048f17a9b1b52,2018-01-17 21:56:20,6
588944,src_com_android_bluetooth_map_BluetoothMapMasInstance.java,"public synchronized void startSocketListeners() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""Map Service startSocketListeners""); } if ((mServerSession) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""mServerSession exists - shutting it down...""); } mServerSession.close(); mServerSession = null; } if ((mObserver) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""mObserver exists - shutting it down...""); } mObserver.deinit(); mObserver = null; } closeConnectionSocket(); if ((mServerSockets) != null) { mServerSockets.prepareForNewConnect(); } else { mServerSockets = com.android.bluetooth.ObexServerSockets.create(this); if ((mServerSockets) == null) { android.util.Log.e(mTag, ""Failed to start the listeners""); return; } removeSdpRecord(); mSdpHandle = createMasSdpRecord(mServerSockets.getRfcommChannel(), mServerSockets.getL2capPsm()); if (com.android.bluetooth.map.BluetoothMapMasInstance.V) { android.util.Log.d(mTag, (((((""Creating new SDP record for MAS instance: "" + (mMasInstanceId)) + "" Object reference: "") + (this)) + ""SDP handle: "") + (mSdpHandle))); } updateDbIdentifier(); } }",6d04ca2d4b733288f6c51113f26fdb1eff703b7d,"public synchronized void startSocketListeners() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""Map Service startSocketListeners""); } if ((mServerSession) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""mServerSession exists - shutting it down...""); } mServerSession.close(); mServerSession = null; } if ((mObserver) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""mObserver exists - shutting it down...""); } mObserver.deinit(); mObserver = null; } closeConnectionSocket(); if ((mServerSockets) != null) { mAcceptNewConnect = true; } else { mServerSockets = com.android.bluetooth.ObexServerSockets.create(this); mAcceptNewConnect = true; if ((mServerSockets) == null) { android.util.Log.e(mTag, ""Failed to start the listeners""); return; } removeSdpRecord(); mSdpHandle = createMasSdpRecord(mServerSockets.getRfcommChannel(), mServerSockets.getL2capPsm()); if (com.android.bluetooth.map.BluetoothMapMasInstance.V) { android.util.Log.d(mTag, (((((""Creating new SDP record for MAS instance: "" + (mMasInstanceId)) + "" Object reference: "") + (this)) + ""SDP handle: "") + (mSdpHandle))); } updateDbIdentifier(); } }",2ac2f1ff6f2e1d61bb8bad7f3f78590214ba376f,"public synchronized void startSocketListeners() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""Map Service startSocketListeners""); } if ((mServerSession) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""mServerSession exists - shutting it down...""); } mServerSession.close(); mServerSession = null; } if ((mObserver) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""mObserver exists - shutting it down...""); } mObserver.deinit(); mObserver = null; } closeConnectionSocket(); if ((mServerSockets) != null) { mAcceptNewConnections = true; } else { mServerSockets = com.android.bluetooth.ObexServerSockets.create(this); mAcceptNewConnections = true; if ((mServerSockets) == null) { android.util.Log.e(mTag, ""Failed to start the listeners""); return; } removeSdpRecord(); mSdpHandle = createMasSdpRecord(mServerSockets.getRfcommChannel(), mServerSockets.getL2capPsm()); if (com.android.bluetooth.map.BluetoothMapMasInstance.V) { android.util.Log.d(mTag, (((((""Creating new SDP record for MAS instance: "" + (mMasInstanceId)) + "" Object reference: "") + (this)) + ""SDP handle: "") + (mSdpHandle))); } updateDbIdentifier(); } }",41be29ee7faac4533765975726392216d7e60a47,2018-01-17 21:56:20,6
588944,src_com_android_bluetooth_ObexServerSockets.java,"private synchronized boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket conSocket) { if (com.android.bluetooth.ObexServerSockets.D) { android.util.Log.d(mTag, (((""onConnect() socket: "" + conSocket) + "" mConAccepted = "") + (mConAccepted))); } if ((!(mConAccepted)) && (mConHandler.onConnect(device, conSocket))) { mConAccepted = true; return true; } return false; }",2703adfa2a2f575b5ec68d28408435576f7f9963,"private synchronized boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket conSocket) { if (com.android.bluetooth.ObexServerSockets.D) { android.util.Log.d(mTag, (""onConnect() socket: "" + conSocket)); } if (mConHandler.onConnect(device, conSocket)) { return true; } return false; }",23a7da2f6c510091603baf1eb5fd7ab8ef25fb1e,"private synchronized boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket conSocket) { if (com.android.bluetooth.ObexServerSockets.D) { android.util.Log.d(mTag, (""onConnect() socket: "" + conSocket)); } return mConHandler.onConnect(device, conSocket); }",29d717d7cbc96633282dc30158c2c86e4d1ff980,2018-01-17 21:56:20,6
588944,src_com_android_bluetooth_opp_BluetoothOppService.java,"private void createServerSession(javax.obex.ObexTransport transport) { mServerSession = new com.android.bluetooth.opp.BluetoothOppObexServerSession(this, transport, mServerSocket); mServerSession.preStart(); if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, (((""Get ServerSession "" + (mServerSession.toString())) + "" for incoming connection"") + (transport.toString()))); } }",6cb910f9aa284cad2ac102143a5cd0fb2dac473a,"private void createServerSession(javax.obex.ObexTransport transport) { mServerSession = new com.android.bluetooth.opp.BluetoothOppObexServerSession(this, transport, mServerSocket); mAcceptNewConnect = true; mServerSession.preStart(); if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, (((""Get ServerSession "" + (mServerSession.toString())) + "" for incoming connection"") + (transport.toString()))); } }",0a0a5b1b84b13d3780b1ba3fdc43d38632dde58a,"private void createServerSession(javax.obex.ObexTransport transport) { mServerSession = new com.android.bluetooth.opp.BluetoothOppObexServerSession(this, transport, this); mServerSession.preStart(); if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, (((""Get ServerSession "" + (mServerSession.toString())) + "" for incoming connection"") + (transport.toString()))); } }",56c8f8e9b198f3b36cb079d3d2b8556bf318c5ba,2018-01-17 21:56:20,6
588944,src_com_android_bluetooth_map_BluetoothMapMasInstance.java,"@java.lang.Override public synchronized boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { boolean isValid = mMapService.onConnect(device, this); if (isValid) { mRemoteDevice = device; mConnSocket = socket; } return isValid; }",90f06c4583ab2ebed86ce1db90d8b16ca4310c00,"@java.lang.Override public synchronized boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { boolean isValid = mMapService.onConnect(device, this); if (isValid) { mRemoteDevice = device; mConnSocket = socket; mAcceptNewConnect = false; } return isValid; }",079fc0a97dd642e6d8f201b0f8f335270ed02e6c,"@java.lang.Override public synchronized boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { if (!(mAcceptNewConnections)) { return false; } boolean isValid = mMapService.onConnect(device, this); if (isValid) { mRemoteDevice = device; mConnSocket = socket; mAcceptNewConnections = false; } return isValid; }",a9a448ce3c82342eb5cf78ae10ae98b99ce75f13,2018-01-17 21:56:20,6
586959,src_java_com_android_internal_telephony_euicc_EuiccCardController.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void getRat(java.lang.String callingPackage, com.android.internal.telephony.euicc.IGetRatCallback callback) { checkCallingPackage(callingPackage); }",8ca70cdb4f702451b378a6a89be32239a323d059,"@java.lang.Override public void getRulesAuthTable(java.lang.String callingPackage, com.android.internal.telephony.euicc.IGetRulesAuthTableCallback callback) { checkCallingPackage(callingPackage); }",9021a77102925c5cc816ae22b2947cd2aa1a01dd,2018-01-17 22:26:56,3
586717,src_com_android_bluetooth_hfpclient_NativeInterface.java,"private void onInBandRing(int inBand, byte[] address) { android.util.Log.w(com.android.bluetooth.hfpclient.NativeInterface.TAG, ""onInBandRing not supported""); }",4c0ab60a088dee7cb90d7375cbf8fea806853c51,"private void onInBandRing(int inBand, byte[] address) { com.android.bluetooth.hfpclient.StackEvent event = new com.android.bluetooth.hfpclient.StackEvent(StackEvent.EVENT_TYPE_IN_BAND_RINGTONE); event.valueInt = inBand; event.device = getDevice(address); if (com.android.bluetooth.hfpclient.NativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.NativeInterface.TAG, (((""onInBandRing: address "" + address) + "" event "") + event)); } com.android.bluetooth.hfpclient.HeadsetClientService service = com.android.bluetooth.hfpclient.HeadsetClientService.getHeadsetClientService(); if (service != null) { service.messageFromNative(event); } else { android.util.Log.w(com.android.bluetooth.hfpclient.NativeInterface.TAG, (""onSubscriberInfo: Ignoring message because service not available: "" + event)); } }",009ae51f9a0d3582a06b2cf51f2b2531abf57d7b,"private void onInBandRing(int inBand, byte[] address) { com.android.bluetooth.hfpclient.StackEvent event = new com.android.bluetooth.hfpclient.StackEvent(StackEvent.EVENT_TYPE_IN_BAND_RINGTONE); event.valueInt = inBand; event.device = getDevice(address); if (com.android.bluetooth.hfpclient.NativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.NativeInterface.TAG, (((""onInBandRing: address "" + address) + "" event "") + event)); } com.android.bluetooth.hfpclient.HeadsetClientService service = com.android.bluetooth.hfpclient.HeadsetClientService.getHeadsetClientService(); if (service != null) { service.messageFromNative(event); } else { android.util.Log.w(com.android.bluetooth.hfpclient.NativeInterface.TAG, (""onInBandRing: Ignoring message because service not available: "" + event)); } }",1912d480ef2c740e81fa712363220f0d065ffb71,2018-01-17 23:48:38,3
586125,services_core_java_com_android_server_connectivity_DnsManager.java,"public void setDnsConfigurationForNetwork(int netId, java.util.Collection<java.net.InetAddress> servers, java.lang.String domains, boolean isDefaultNetwork) { updateParametersSettings(); updatePrivateDnsSettings(); final java.lang.String[] serverStrs = android.net.NetworkUtils.makeStrings(servers); final java.lang.String[] domainStrs = (domains == null) ? new java.lang.String[0] : domains.split("" ""); final int[] params = new int[]{ mSampleValidity, mSuccessThreshold, mMinSamples, mMaxSamples }; final boolean useTls = com.android.server.connectivity.DnsManager.shouldUseTls(mPrivateDnsMode); final java.lang.String tlsHostname = """"; try { mNMS.setDnsConfigurationForNetwork(netId, serverStrs, domainStrs, params, useTls, tlsHostname); } catch (java.lang.Exception e) { android.util.Slog.e(com.android.server.connectivity.DnsManager.TAG, (""Error setting DNS configuration: "" + e)); return; } if (isDefaultNetwork) setDefaultDnsSystemProperties(servers); flushVmDnsCache(); }",80c199fb9651e46eafac1ec74028aab2eb1f39b0,"public void setDnsConfigurationForNetwork(int netId, java.util.Collection<java.net.InetAddress> servers, java.lang.String domains, boolean isDefaultNetwork) { updateParametersSettings(); updatePrivateDnsSettings(); final boolean useTls = com.android.server.connectivity.DnsManager.shouldUseTls(mPrivateDnsMode); final com.android.server.connectivity.DnsManager.ResolvedPrivateDnsHostname resolvedName = (useTls) ? mPrivateDnsMap.get(netId) : null; final java.lang.String[] serverStrs = android.net.NetworkUtils.makeStrings((resolvedName != null ? java.util.Arrays.asList(resolvedName.ips) : servers)); final java.lang.String[] domainStrs = (domains == null) ? new java.lang.String[0] : domains.split("" ""); final int[] params = new int[]{ mSampleValidity, mSuccessThreshold, mMinSamples, mMaxSamples }; final java.lang.String tlsHostname = (resolvedName != null) ? resolvedName.hostname : """"; try { mNMS.setDnsConfigurationForNetwork(netId, serverStrs, domainStrs, params, useTls, tlsHostname); } catch (java.lang.Exception e) { android.util.Slog.e(com.android.server.connectivity.DnsManager.TAG, (""Error setting DNS configuration: "" + e)); return; } if (isDefaultNetwork) setDefaultDnsSystemProperties(servers); flushVmDnsCache(); }",f323bd355a55be538295c73bcc825f2afcee398e,"public void setDnsConfigurationForNetwork(int netId, android.net.LinkProperties lp, boolean isDefaultNetwork) { final com.android.server.connectivity.DnsManager.PrivateDnsConfig privateDnsCfg = mPrivateDnsMap.get(netId); final boolean useTls = (privateDnsCfg != null) && (privateDnsCfg.useTls); final boolean strictMode = (privateDnsCfg != null) && (privateDnsCfg.inStrictMode()); final java.lang.String tlsHostname = (strictMode) ? privateDnsCfg.hostname : """"; final java.lang.String[] serverStrs = android.net.NetworkUtils.makeStrings((strictMode ? java.util.Arrays.stream(privateDnsCfg.ips).filter(( ip) -> lp.isReachable(ip)).collect(java.util.stream.Collectors.toList()) : lp.getDnsServers())); final java.lang.String[] domainStrs = com.android.server.connectivity.DnsManager.getDomainStrings(lp.getDomains()); updateParametersSettings(); final int[] params = new int[]{ mSampleValidity, mSuccessThreshold, mMinSamples, mMaxSamples }; android.util.Slog.d(com.android.server.connectivity.DnsManager.TAG, java.lang.String.format(""setDnsConfigurationForNetwork(%d, %s, %s, %s, %s, %s)"", netId, java.util.Arrays.toString(serverStrs), java.util.Arrays.toString(domainStrs), java.util.Arrays.toString(params), useTls, tlsHostname)); try { mNMS.setDnsConfigurationForNetwork(netId, serverStrs, domainStrs, params, useTls, tlsHostname); } catch (java.lang.Exception e) { android.util.Slog.e(com.android.server.connectivity.DnsManager.TAG, (""Error setting DNS configuration: "" + e)); return; } if (isDefaultNetwork) setDefaultDnsSystemProperties(lp.getDnsServers()); flushVmDnsCache(); }",1431a107944f1ceaff5e3bed0d74f98562cc057a,2018-01-18 02:44:52,12
586125,services_core_java_com_android_server_connectivity_DnsManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static java.lang.String getPrivateDnsStrictModeHostname(android.content.ContentResolver cr) { final java.lang.String mode = com.android.server.connectivity.DnsManager.getStringSetting(cr, android.provider.Settings.Global.PRIVATE_DNS_MODE); if ((android.text.TextUtils.isEmpty(mode)) || (!(mode.startsWith(android.net.ConnectivityManager.PRIVATE_DNS_MODE_PROVIDER_HOSTNAME)))) { return null; } return com.android.server.connectivity.DnsManager.getStringSetting(cr, android.provider.Settings.Global.PRIVATE_DNS_SPECIFIER); }",8c90a40a5aa8f3e853d03419e288be2ec213a3a4,"public static com.android.server.connectivity.DnsManager.PrivateDnsConfig getPrivateDnsConfig(android.content.ContentResolver cr) { final java.lang.String mode = com.android.server.connectivity.DnsManager.getPrivateDnsMode(cr); final boolean useTls = (!(android.text.TextUtils.isEmpty(mode))) && (!(android.net.ConnectivityManager.PRIVATE_DNS_MODE_OFF.equals(mode))); if (android.net.ConnectivityManager.PRIVATE_DNS_MODE_PROVIDER_HOSTNAME.equals(mode)) { final java.lang.String specifier = com.android.server.connectivity.DnsManager.getStringSetting(cr, android.provider.Settings.Global.PRIVATE_DNS_SPECIFIER); return new com.android.server.connectivity.DnsManager.PrivateDnsConfig(specifier, null); } return new com.android.server.connectivity.DnsManager.PrivateDnsConfig(useTls); }",bc36207b6f7a5417ffd09d248e93656f08b3848a,2018-01-18 02:44:52,12
586125,services_core_java_com_android_server_connectivity_DnsManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void updatePrivateDns(android.net.Network network, com.android.server.connectivity.DnsManager.ResolvedPrivateDnsHostname resolvedName) { android.util.Slog.w(com.android.server.connectivity.DnsManager.TAG, ((((""updatePrivateDns("" + network) + "", "") + resolvedName) + "")"")); mPrivateDnsMap.put(network.netId, resolvedName); }",608e41a98094db401aa3fb9bbc355facb3465a73,"public com.android.server.connectivity.DnsManager.PrivateDnsConfig updatePrivateDns(android.net.Network network, com.android.server.connectivity.DnsManager.PrivateDnsConfig cfg) { android.util.Slog.w(com.android.server.connectivity.DnsManager.TAG, ((((""updatePrivateDns("" + network) + "", "") + cfg) + "")"")); return cfg != null ? mPrivateDnsMap.put(network.netId, cfg) : mPrivateDnsMap.remove(network); }",2b5fead504616ad07ae47f0927c8b84e1ce6e3fc,2018-01-18 02:44:52,12
586125,services_core_java_com_android_server_connectivity_DnsManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static com.android.server.connectivity.DnsManager.ResolvedPrivateDnsHostname tryBlockingResolveOf(android.net.Network network, java.lang.String name) { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_family = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; try { final java.net.InetAddress[] ips = Libcore.os.android_getaddrinfo(name, hints, network.netId); if ((ips != null) && ((ips.length) > 0)) { return new com.android.server.connectivity.DnsManager.ResolvedPrivateDnsHostname(name, ips); } } catch (android.system.GaiException ignored) { } return null; }",4bdee119e8b8ca15ce1e85af6be614177d70dec2,"public static com.android.server.connectivity.DnsManager.PrivateDnsConfig tryBlockingResolveOf(android.net.Network network, java.lang.String name) { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_family = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; try { final java.net.InetAddress[] ips = Libcore.os.android_getaddrinfo(name, hints, network.netId); if ((ips != null) && ((ips.length) > 0)) { return new com.android.server.connectivity.DnsManager.PrivateDnsConfig(name, ips); } } catch (android.system.GaiException ignored) { } return null; }",7c811e1d17fa3d093242b6980a983bb6126cd2c4,2018-01-18 02:44:52,12
586125,services_core_java_com_android_server_connectivity_DnsManager.java,"private java.lang.String getStringSetting(java.lang.String which) { return Settings.Global.getString(mContentResolver, which); }",941135e00e3d8025ff32834aeb47f0eb86bc9198,"private java.lang.String getStringSetting(java.lang.String which) { return com.android.server.connectivity.DnsManager.getStringSetting(mContentResolver, which); }",de1a5598d055f6e559a783f37832ac68460745fd,"private static java.lang.String getPrivateDnsMode(android.content.ContentResolver cr) { final java.lang.String mode = com.android.server.connectivity.DnsManager.getStringSetting(cr, android.provider.Settings.Global.PRIVATE_DNS_MODE); return !(android.text.TextUtils.isEmpty(mode)) ? mode : android.net.ConnectivityManager.PRIVATE_DNS_DEFAULT_MODE; }",d8a4acea2bf14629fbf02c319822dc26e565671b,2018-01-18 02:44:52,12
586125,services_core_java_com_android_server_connectivity_NetworkMonitor.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void maybeResolvePrivateDnsHostname() { final java.lang.String hostname = com.android.server.connectivity.DnsManager.getPrivateDnsStrictModeHostname(mContext.getContentResolver()); if (android.text.TextUtils.isEmpty(hostname)) { mPrivateDns = null; return; } mPrivateDns = com.android.server.connectivity.DnsManager.tryBlockingResolveOf(mNetwork, hostname); }",820d6dacf7c03c440ee582caa88de12a6ae57f93,private void resolvePrivateDnsConfig() { resolvePrivateDnsConfig(com.android.server.connectivity.DnsManager.getPrivateDnsConfig(mContext.getContentResolver())); },a5ab9bb4ee6e76507de61e8a27877d68bb8081f7,2018-01-18 02:44:52,12
586125,services_core_java_com_android_server_connectivity_NetworkMonitor.java,"@java.lang.Override public void enter() { maybeLogEvaluationResult(networkEventType(validationStage(), com.android.server.connectivity.NetworkMonitor.EvaluationResult.VALIDATED)); mConnectivityServiceHandler.sendMessage(obtainMessage(com.android.server.connectivity.NetworkMonitor.EVENT_NETWORK_TESTED, com.android.server.connectivity.NetworkMonitor.NETWORK_TEST_RESULT_VALID, mNetId, null)); (mValidations)++; }",23e3f51365e71bd366ed3ac6d0703f28d70f371b,"@java.lang.Override public void enter() { maybeLogEvaluationResult(networkEventType(validationStage(), com.android.server.connectivity.NetworkMonitor.EvaluationResult.VALIDATED)); mConnectivityServiceHandler.sendMessage(obtainMessage(com.android.server.connectivity.NetworkMonitor.EVENT_NETWORK_TESTED, com.android.server.connectivity.NetworkMonitor.NETWORK_TEST_RESULT_VALID, mNetId, mPrivateDns)); (mValidations)++; }",4984236c1710bed71fd6b95f0ff2ec3007aab50b,"@java.lang.Override public void enter() { maybeLogEvaluationResult(networkEventType(validationStage(), com.android.server.connectivity.NetworkMonitor.EvaluationResult.VALIDATED)); mConnectivityServiceHandler.sendMessage(obtainMessage(com.android.server.connectivity.NetworkMonitor.EVENT_NETWORK_TESTED, com.android.server.connectivity.NetworkMonitor.NETWORK_TEST_RESULT_VALID, mNetId, mPrivateDnsCfg)); (mValidations)++; }",75bb0bcfc1c3eaf4a0968b6b806d6a33c8d54dcc,2018-01-18 02:44:52,12
520115,src_com_android_settings_wifi_WifiSettings.java,"private void updateAccessPointsDelayed() { if ((((getActivity()) != null) && (!(mIsRestricted))) && (mWifiManager.isWifiEnabled())) { setProgressBarVisible(true); getView().postDelayed(mUpdateAccessPointsRunnable, 300); } }",3eb364819587622b6b501865104a6ab12a67f751,"private void updateAccessPointsDelayed() { if ((((getActivity()) != null) && (!(mIsRestricted))) && (mWifiManager.isWifiEnabled())) { getView().removeCallbacks(mUpdateAccessPointsRunnable); setProgressBarVisible(true); getView().postDelayed(mUpdateAccessPointsRunnable, 300); } }",6622ae25503024d51fe8d9a7ca4189c33e04c5fe,"private void updateAccessPointsDelayed() { if ((((getActivity()) != null) && (!(mIsRestricted))) && (mWifiManager.isWifiEnabled())) { android.os.Handler handler = getView().getHandler(); if ((handler != null) && (handler.hasCallbacks(mUpdateAccessPointsRunnable))) { return; } setProgressBarVisible(true); getView().postDelayed(mUpdateAccessPointsRunnable, 300); } }",6f465976581cb8e265c8bedba99b09be14c09b3e,2018-01-18 02:48:30,4
590334,core_java_android_net_NetworkCapabilities.java,"public java.lang.String describeFirstNonRequestableCapability() { if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED)) return ""NET_CAPABILITY_VALIDATED""; if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_CAPTIVE_PORTAL)) return ""NET_CAPABILITY_CAPTIVE_PORTAL""; if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_FOREGROUND)) return ""NET_CAPABILITY_FOREGROUND""; if (((mNetworkCapabilities) & (android.net.NetworkCapabilities.NON_REQUESTABLE_CAPABILITIES)) != 0) { return ""unknown non-requestable capabilities "" + (java.lang.Long.toHexString(mNetworkCapabilities)); } if (((mLinkUpBandwidthKbps) != 0) || ((mLinkDownBandwidthKbps) != 0)) return ""link bandwidth""; if (hasSignalStrength()) return ""signalStrength""; return null; }",82e371f7e6a23b62062b3e0e9dd16625ad668e1d,"public java.lang.String describeFirstNonRequestableCapability() { if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED)) return ""NET_CAPABILITY_VALIDATED""; if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_CAPTIVE_PORTAL)) return ""NET_CAPABILITY_CAPTIVE_PORTAL""; if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_FOREGROUND)) return ""NET_CAPABILITY_FOREGROUND""; if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_UNCONGESTED)) return ""NET_CAPABILITY_UNCONGESTED""; if (((mNetworkCapabilities) & (android.net.NetworkCapabilities.NON_REQUESTABLE_CAPABILITIES)) != 0) { return ""unknown non-requestable capabilities "" + (java.lang.Long.toHexString(mNetworkCapabilities)); } if (((mLinkUpBandwidthKbps) != 0) || ((mLinkDownBandwidthKbps) != 0)) return ""link bandwidth""; if (hasSignalStrength()) return ""signalStrength""; return null; }",98dfeb04eb28ff4b9878139f14dee2ca721bc582,"public java.lang.String describeFirstNonRequestableCapability() { final long nonRequestable = (mNetworkCapabilities) & (android.net.NetworkCapabilities.NON_REQUESTABLE_CAPABILITIES); if (nonRequestable != 0) { return android.net.NetworkCapabilities.capabilityNameOf(com.android.internal.util.BitUtils.unpackBits(nonRequestable)[0]); } if (((mLinkUpBandwidthKbps) != 0) || ((mLinkDownBandwidthKbps) != 0)) return ""link bandwidth""; if (hasSignalStrength()) return ""signalStrength""; return null; }",11512f160fd9309b6debf38664219905a599c86b,2018-01-18 03:28:32,3
578923,test_004-NativeAllocations_src-art_Main.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void checkRegisterNativeAllocation() throws java.lang.Exception { long maxMem = java.lang.Runtime.getRuntime().maxMemory(); int size = ((int) (maxMem / 32)); int allocation_count = 256; java.lang.ref.ReferenceQueue<java.lang.Object> queue = new java.lang.ref.ReferenceQueue<java.lang.Object>(); java.lang.ref.PhantomReference ref = new java.lang.ref.PhantomReference(new java.lang.Object(), queue); long total = 0; for (int i = 0; (!(ref.isEnqueued())) && (i < allocation_count); ++i) { Main.runtime.registerNativeAllocation(size); total += size; } if ((queue.remove(1000)) == null) { throw new java.lang.RuntimeException(""GC failed to run""); } while (total > 0) { Main.runtime.registerNativeFree(size); total -= size; } }",677154ec7ae545d48489e4a77f7e98b30d8c1956,"private static void checkRegisterNativeAllocation() throws java.lang.Exception { long maxMem = java.lang.Runtime.getRuntime().maxMemory(); int size = ((int) (maxMem / 32)); int allocationCount = 256; int maxExpectedGcDurationMs = 2000; java.lang.ref.ReferenceQueue<java.lang.Object> queue = new java.lang.ref.ReferenceQueue<java.lang.Object>(); Main.ref = Main.allocPhantom(queue); long total = 0; for (int i = 0; (!(Main.ref.isEnqueued())) && (i < allocationCount); ++i) { Main.runtime.registerNativeAllocation(size); total += size; java.lang.Thread.sleep((maxExpectedGcDurationMs / allocationCount)); } if ((queue.remove(maxExpectedGcDurationMs)) == null) { throw new java.lang.RuntimeException(""GC failed to complete""); } while (total > 0) { Main.runtime.registerNativeFree(size); total -= size; } }",1b5363b28e7c4e6117f6c6be2b6872f42ad6650e,2018-01-18 10:58:30,4
578923,test_004-NativeAllocations_src-art_Main.java,"public static void main(java.lang.String[] args) throws java.lang.Exception { java.lang.Class<?> vm_runtime = java.lang.Class.forName(""dalvik.system.VMRuntime""); java.lang.reflect.Method get_runtime = vm_runtime.getDeclaredMethod(""getRuntime""); Main.runtime = get_runtime.invoke(null); Main.register_native_allocation = vm_runtime.getDeclaredMethod(""registerNativeAllocation"", java.lang.Integer.TYPE); Main.register_native_free = vm_runtime.getDeclaredMethod(""registerNativeFree"", java.lang.Integer.TYPE); Main.maxMem = java.lang.Runtime.getRuntime().maxMemory(); int count = 16; int size = ((int) (((Main.maxMem) / 2) / count)); int allocation_count = 256; Main.NativeAllocation[] allocations = new Main.NativeAllocation[count]; for (int i = 0; i < allocation_count; ++i) { allocations[(i % count)] = new Main.NativeAllocation(size, false); } Main.aboutToDeadlockLock = false; synchronized(Main.deadlockLock) { for (int i = 0; (Main.aboutToDeadlockLock) != true; ++i) { allocations[(i % count)] = new Main.NativeAllocation(size, true); } for (int i = 0; i < 10; ++i) { allocations[(i % count)] = new Main.NativeAllocation(size, true); } } java.lang.System.out.println(""Test complete""); }",3048a2b1433ea8dfc9e4ccbdd2251919e17c93fa,"public static void main(java.lang.String[] args) throws java.lang.Exception { for (int i = 0; i < 4; ++i) { Main.checkRegisterNativeAllocation(); } synchronized(Main.deadlockLock) { Main.allocateDeadlockingFinalizer(); while (!(Main.aboutToDeadlock)) { Main.checkRegisterNativeAllocation(); } Main.checkRegisterNativeAllocation(); } java.lang.System.out.println(""Test complete""); }",7056d6d98341ca35942ebd15465f116ba0650b59,"public static void main(java.lang.String[] args) throws java.lang.Exception { for (int i = 0; i < 20; ++i) { Main.checkRegisterNativeAllocation(); } synchronized(Main.deadlockLock) { Main.allocateDeadlockingFinalizer(); while (!(Main.aboutToDeadlock)) { Main.checkRegisterNativeAllocation(); } Main.triggerBlockingRegisterNativeAllocation(); } java.lang.System.out.println(""Test complete""); }",b25bdfb2f69c1acec05c4e4115415cc7cba0c4f2,2018-01-18 10:58:30,4
588557,library_src_android_support_multidex_MultiDexExtractor.java,"private static void prepareDexDir(java.io.File dexDir, final java.lang.String extractedFilePrefix) { java.io.FileFilter filter = new java.io.FileFilter() { @java.lang.Override public boolean accept(java.io.File pathname) { java.lang.String name = pathname.getName(); return !((name.startsWith(extractedFilePrefix)) || (name.equals(android.support.multidex.MultiDexExtractor.LOCK_FILENAME))); } }; java.io.File[] files = dexDir.listFiles(filter); if (files == null) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, ((""Failed to list secondary dex dir content ("" + (dexDir.getPath())) + "")."")); return; } for (java.io.File oldFile : files) { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, (((""Trying to delete old file "" + (oldFile.getPath())) + "" of size "") + (oldFile.length()))); if (!(oldFile.delete())) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, (""Failed to delete old file "" + (oldFile.getPath()))); } else { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, (""Deleted old file "" + (oldFile.getPath()))); } } }",14941167213183ffa3c48f9fd19abfa4f5769119,"private static void clearDexDir(java.io.File dexDir) { java.io.File[] files = dexDir.listFiles(new java.io.FileFilter() { @java.lang.Override public boolean accept(java.io.File pathname) { return !(pathname.getName().equals(android.support.multidex.MultiDexExtractor.LOCK_FILENAME)); } }); if (files == null) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, ((""Failed to list secondary dex dir content ("" + (dexDir.getPath())) + "")."")); return; } for (java.io.File oldFile : files) { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, (((""Trying to delete old file "" + (oldFile.getPath())) + "" of size "") + (oldFile.length()))); if (!(oldFile.delete())) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, (""Failed to delete old file "" + (oldFile.getPath()))); } else { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, (""Deleted old file "" + (oldFile.getPath()))); } } }",3c4cda5cdd69f0464079d0a16085d58a1b41d907,"private void clearDexDir() { java.io.File[] files = dexDir.listFiles(new java.io.FileFilter() { @java.lang.Override public boolean accept(java.io.File pathname) { return !(pathname.getName().equals(android.support.multidex.MultiDexExtractor.LOCK_FILENAME)); } }); if (files == null) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, ((""Failed to list secondary dex dir content ("" + (dexDir.getPath())) + "")."")); return; } for (java.io.File oldFile : files) { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, (((""Trying to delete old file "" + (oldFile.getPath())) + "" of size "") + (oldFile.length()))); if (!(oldFile.delete())) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, (""Failed to delete old file "" + (oldFile.getPath()))); } else { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, (""Deleted old file "" + (oldFile.getPath()))); } } }",fbb2d1363878a24bd9f3506fbb963a138df88c27,2018-01-18 15:27:13,4
588557,library_src_android_support_multidex_MultiDexExtractor.java,"static java.util.List<? extends java.io.File> load(android.content.Context context, java.io.File sourceApk, java.io.File dexDir, java.lang.String prefsKeyPrefix, boolean forceReload) throws java.io.IOException { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((((((""MultiDexExtractor.load("" + (sourceApk.getPath())) + "", "") + forceReload) + "", "") + prefsKeyPrefix) + "")"")); long currentCrc = android.support.multidex.MultiDexExtractor.getZipCrc(sourceApk); java.io.File lockFile = new java.io.File(dexDir, android.support.multidex.MultiDexExtractor.LOCK_FILENAME); java.io.RandomAccessFile lockRaf = new java.io.RandomAccessFile(lockFile, ""rw""); java.nio.channels.FileChannel lockChannel = null; java.nio.channels.FileLock cacheLock = null; java.util.List<android.support.multidex.MultiDexExtractor.ExtractedDex> files; java.io.IOException releaseLockException = null; try { lockChannel = lockRaf.getChannel(); android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, (""Blocking on lock "" + (lockFile.getPath()))); cacheLock = lockChannel.lock(); android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((lockFile.getPath()) + "" locked"")); if ((!forceReload) && (!(android.support.multidex.MultiDexExtractor.isModified(context, sourceApk, currentCrc, prefsKeyPrefix)))) { try { files = android.support.multidex.MultiDexExtractor.loadExistingExtractions(context, sourceApk, dexDir, prefsKeyPrefix); } catch (java.io.IOException ioe) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, (""Failed to reload existing extracted secondary dex files,"" + "" falling back to fresh extraction""), ioe); files = android.support.multidex.MultiDexExtractor.performExtractions(sourceApk, dexDir); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), currentCrc, files); } } else { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ""Detected that extraction must be performed.""); files = android.support.multidex.MultiDexExtractor.performExtractions(sourceApk, dexDir); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), currentCrc, files); } } finally { if (cacheLock != null) { try { cacheLock.release(); } catch (java.io.IOException e) { android.util.Log.e(android.support.multidex.MultiDexExtractor.TAG, (""Failed to release lock on "" + (lockFile.getPath()))); releaseLockException = e; } } if (lockChannel != null) { android.support.multidex.MultiDexExtractor.closeQuietly(lockChannel); } android.support.multidex.MultiDexExtractor.closeQuietly(lockRaf); } if (releaseLockException != null) { throw releaseLockException; } android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((""load found "" + (files.size())) + "" secondary dex files"")); return files; }",47b3c7d0285210b65131f99d6bf1a93df4804f71,"java.util.List<? extends java.io.File> load(android.content.Context context, java.lang.String prefsKeyPrefix, boolean forceReload) throws java.io.IOException { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((((((""MultiDexExtractor.load("" + (sourceApk.getPath())) + "", "") + forceReload) + "", "") + prefsKeyPrefix) + "")"")); java.util.List<android.support.multidex.MultiDexExtractor.ExtractedDex> files; if ((!forceReload) && (!(android.support.multidex.MultiDexExtractor.isModified(context, sourceApk, sourceCrc, prefsKeyPrefix)))) { try { files = loadExistingExtractions(context, prefsKeyPrefix); } catch (java.io.IOException ioe) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, (""Failed to reload existing extracted secondary dex files,"" + "" falling back to fresh extraction""), ioe); files = android.support.multidex.MultiDexExtractor.performExtractions(sourceApk, dexDir); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), sourceCrc, files); } } else { if (forceReload) { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ""Forced extraction must be performed.""); } else { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ""Detected that extraction must be performed.""); } files = android.support.multidex.MultiDexExtractor.performExtractions(sourceApk, dexDir); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), sourceCrc, files); } android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((""load found "" + (files.size())) + "" secondary dex files"")); return files; }",d7bbb625166808f025dced222c97b743bbb96c3c,"java.util.List<? extends java.io.File> load(android.content.Context context, java.lang.String prefsKeyPrefix, boolean forceReload) throws java.io.IOException { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((((((""MultiDexExtractor.load("" + (sourceApk.getPath())) + "", "") + forceReload) + "", "") + prefsKeyPrefix) + "")"")); if (!(cacheLock.isValid())) { throw new java.lang.IllegalStateException(""MultiDexExtractor was closed""); } java.util.List<android.support.multidex.MultiDexExtractor.ExtractedDex> files; if ((!forceReload) && (!(android.support.multidex.MultiDexExtractor.isModified(context, sourceApk, sourceCrc, prefsKeyPrefix)))) { try { files = loadExistingExtractions(context, prefsKeyPrefix); } catch (java.io.IOException ioe) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, (""Failed to reload existing extracted secondary dex files,"" + "" falling back to fresh extraction""), ioe); files = performExtractions(); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), sourceCrc, files); } } else { if (forceReload) { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ""Forced extraction must be performed.""); } else { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ""Detected that extraction must be performed.""); } files = performExtractions(); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), sourceCrc, files); } android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((""load found "" + (files.size())) + "" secondary dex files"")); return files; }",37c0dc9c94317597481760029a1f1e38e6f3eba1,2018-01-18 15:27:13,4
545592,core_java_android_bluetooth_BluetoothDevice.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothSocket createL2capCocSocket(int transport, int psm) throws java.io.IOException { if (!(isBluetoothEnabled())) { android.util.Log.e(android.bluetooth.BluetoothDevice.TAG, ""createL2capCocSocket: Bluetooth is not enabled""); throw new java.io.IOException(); } if (android.bluetooth.BluetoothDevice.DBG) android.util.Log.d(android.bluetooth.BluetoothDevice.TAG, (((""createL2capCocSocket: transport="" + transport) + "", psm="") + psm)); return null; }",3f30beb6fc32baa173ae013a147aba7c5fcb9f89,"@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothSocket createL2capCocSocket(int transport, int psm) throws java.io.IOException { if (!(isBluetoothEnabled())) { android.util.Log.e(android.bluetooth.BluetoothDevice.TAG, ""createL2capCocSocket: Bluetooth is not enabled""); throw new java.io.IOException(); } if (transport != (android.bluetooth.BluetoothDevice.TRANSPORT_LE)) { throw new java.lang.IllegalArgumentException((""Unsupported transport: "" + transport)); } if (android.bluetooth.BluetoothDevice.DBG) android.util.Log.d(android.bluetooth.BluetoothDevice.TAG, (((""createL2capCocSocket: transport="" + transport) + "", psm="") + psm)); return new android.bluetooth.BluetoothSocket(BluetoothSocket.TYPE_L2CAP_LE, (-1), true, true, this, psm, null); }",fd6b7aadcfa3ca3a791a6aad586c68c2b1f28b67,2018-01-18 16:42:31,11
545592,core_java_android_bluetooth_BluetoothAdapter.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothServerSocket listenUsingL2capCoc(int transport) throws java.io.IOException { if (android.bluetooth.BluetoothAdapter.DBG) android.util.Log.d(android.bluetooth.BluetoothAdapter.TAG, ((""listenUsingL2capCoc(): transport="" + transport) + "", no uuid"")); return null; }",c760aed942105e807f3808ffe6cf6f864a0d2714,"@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothServerSocket listenUsingL2capCoc(int transport) throws java.io.IOException { if (transport != (BluetoothDevice.TRANSPORT_LE)) { throw new java.lang.IllegalArgumentException((""Unsupported transport: "" + transport)); } android.bluetooth.BluetoothServerSocket socket = new android.bluetooth.BluetoothServerSocket(BluetoothSocket.TYPE_L2CAP_LE, true, true, android.bluetooth.BluetoothAdapter.SOCKET_CHANNEL_AUTO_STATIC_NO_SDP, false, false); int errno = socket.mSocket.bindListen(); if (errno != 0) { throw new java.io.IOException((""Error: "" + errno)); } int assignedPsm = socket.mSocket.getPort(); if (assignedPsm == 0) { throw new java.io.IOException(""Error: Unable to assign PSM value""); } if (android.bluetooth.BluetoothAdapter.DBG) { android.util.Log.d(android.bluetooth.BluetoothAdapter.TAG, (""listenUsingL2capCoc: set assigned PSM to "" + assignedPsm)); } socket.setChannel(assignedPsm); return socket; }",414ed66889a9b8e18dd3d54789dbf3e41674f5d0,2018-01-18 16:42:31,11
545592,core_java_android_bluetooth_BluetoothAdapter.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothServerSocket listenUsingInsecureL2capCoc(int transport) throws java.io.IOException { if (android.bluetooth.BluetoothAdapter.DBG) { android.util.Log.d(android.bluetooth.BluetoothAdapter.TAG, ((""listenUsingInsecureL2capCoc(): transport="" + transport) + "", no uuid"")); } return null; }",a5f2b1120a5b86a66efb3ed178fec626c6c2b5c6,"@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothServerSocket listenUsingInsecureL2capCoc(int transport) throws java.io.IOException { if (transport != (BluetoothDevice.TRANSPORT_LE)) { throw new java.lang.IllegalArgumentException((""Unsupported transport: "" + transport)); } android.bluetooth.BluetoothServerSocket socket = new android.bluetooth.BluetoothServerSocket(BluetoothSocket.TYPE_L2CAP_LE, false, false, android.bluetooth.BluetoothAdapter.SOCKET_CHANNEL_AUTO_STATIC_NO_SDP, false, false); int errno = socket.mSocket.bindListen(); if (errno != 0) { throw new java.io.IOException((""Error: "" + errno)); } int assignedPsm = socket.mSocket.getPort(); if (assignedPsm == 0) { throw new java.io.IOException(""Error: Unable to assign PSM value""); } if (android.bluetooth.BluetoothAdapter.DBG) { android.util.Log.d(android.bluetooth.BluetoothAdapter.TAG, (""listenUsingInsecureL2capOn: set assigned PSM to "" + assignedPsm)); } socket.setChannel(assignedPsm); return socket; }",beffe3773c83dce82b0541de46b34651e1b5c9e5,2018-01-18 16:42:31,11
545592,core_java_android_bluetooth_BluetoothDevice.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothSocket createInsecureL2capCocSocket(int transport, int psm) throws java.io.IOException { if (!(isBluetoothEnabled())) { android.util.Log.e(android.bluetooth.BluetoothDevice.TAG, ""createInsecureL2capCocSocket: Bluetooth is not enabled""); throw new java.io.IOException(); } if (android.bluetooth.BluetoothDevice.DBG) { android.util.Log.d(android.bluetooth.BluetoothDevice.TAG, (((""createInsecureL2capCocSocket: transport="" + transport) + "", psm="") + psm)); } return null; }",05c41747bf30236862fe727692cf135eaabb1ad8,"@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothSocket createInsecureL2capCocSocket(int transport, int psm) throws java.io.IOException { if (!(isBluetoothEnabled())) { android.util.Log.e(android.bluetooth.BluetoothDevice.TAG, ""createInsecureL2capCocSocket: Bluetooth is not enabled""); throw new java.io.IOException(); } if (transport != (android.bluetooth.BluetoothDevice.TRANSPORT_LE)) { throw new java.lang.IllegalArgumentException((""Unsupported transport: "" + transport)); } if (android.bluetooth.BluetoothDevice.DBG) { android.util.Log.d(android.bluetooth.BluetoothDevice.TAG, (((""createInsecureL2capCocSocket: transport="" + transport) + "", psm="") + psm)); } return new android.bluetooth.BluetoothSocket(BluetoothSocket.TYPE_L2CAP_LE, (-1), false, false, this, psm, null); }",8a72dfbf7a76c89369359777417d7084b8441306,2018-01-18 16:42:31,11
573505,Common_src_com_googlecode_android_scripting_facade_bluetooth_BluetoothSocketConnFacade.java,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Begins a thread initiate an L2CAP CoC connection over Bluetooth. "") public void bluetoothSocketConnBeginConnectThreadPsm(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""address"", description = ""The mac address of the device to connect to."") java.lang.String address, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""isBle"", description = ""Is transport BLE?"") @com.googlecode.android_scripting.rpc.RpcDefault(""0"") java.lang.Boolean isBle, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""psmValue"") @com.googlecode.android_scripting.rpc.RpcDefault(com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.DEFAULT_PSM) java.lang.Integer psmValue) throws java.io.IOException { android.bluetooth.BluetoothDevice mDevice; mDevice = mBluetoothAdapter.getRemoteDevice(address); com.googlecode.android_scripting.Log.d((((((""bluetoothSocketConnBeginConnectThreadPsm: Coc connecting to "" + address) + "", isBle="") + isBle) + "", psmValue="") + psmValue)); com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.ConnectThread connectThread = new com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.ConnectThread(mDevice, psmValue, isBle); connectThread.start(); mConnectThread = connectThread; }",9a1de795708e66ad3d20409544a5e3daead6c9f2,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Begins a thread initiate an L2CAP CoC connection over Bluetooth. "") public void bluetoothSocketConnBeginConnectThreadPsm(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""address"", description = ""The mac address of the device to connect to."") java.lang.String address, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""isBle"", description = ""Is transport BLE?"") @com.googlecode.android_scripting.rpc.RpcDefault(""0"") java.lang.Boolean isBle, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""psmValue"") @com.googlecode.android_scripting.rpc.RpcDefault(com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.DEFAULT_PSM) java.lang.Integer psmValue, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""securedConn"") @com.googlecode.android_scripting.rpc.RpcDefault(""0"") java.lang.Boolean securedConn) throws java.io.IOException { android.bluetooth.BluetoothDevice mDevice; mDevice = mBluetoothAdapter.getRemoteDevice(address); com.googlecode.android_scripting.Log.d((((((((""bluetoothSocketConnBeginConnectThreadPsm: Coc connecting to "" + address) + "", isBle="") + isBle) + "", psmValue="") + psmValue) + "", securedConn="") + securedConn)); com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.ConnectThread connectThread = new com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.ConnectThread(mDevice, psmValue, isBle, securedConn); connectThread.start(); mConnectThread = connectThread; }",a07b1d903b4a8341f710fc53c3ff91e4f355e16f,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Begins a thread initiate an L2CAP CoC connection over Bluetooth. "") public void bluetoothSocketConnBeginConnectThreadPsm(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""address"", description = ""The mac address of the device to connect to."") java.lang.String address, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""isBle"", description = ""Is transport BLE?"") @com.googlecode.android_scripting.rpc.RpcDefault(""false"") java.lang.Boolean isBle, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""psmValue"") @com.googlecode.android_scripting.rpc.RpcDefault(com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.DEFAULT_PSM) java.lang.Integer psmValue, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""securedConn"") @com.googlecode.android_scripting.rpc.RpcDefault(""false"") java.lang.Boolean securedConn) throws java.io.IOException { android.bluetooth.BluetoothDevice mDevice; mDevice = mBluetoothAdapter.getRemoteDevice(address); com.googlecode.android_scripting.Log.d((((((((""bluetoothSocketConnBeginConnectThreadPsm: Coc connecting to "" + address) + "", isBle="") + isBle) + "", psmValue="") + psmValue) + "", securedConn="") + securedConn)); com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.ConnectThread connectThread = new com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.ConnectThread(mDevice, psmValue, isBle, securedConn); connectThread.start(); mConnectThread = connectThread; }",851adb2954b64fa2a0ee0efffb97d6ab7c344d40,2018-01-18 16:42:31,4
573505,Common_src_com_googlecode_android_scripting_facade_bluetooth_BluetoothSocketConnFacade.java,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Begins a thread to accept an Coc connection over Bluetooth. "") public void bluetoothSocketConnBeginAcceptThreadPsm(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""psmValue"") @com.googlecode.android_scripting.rpc.RpcDefault(com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.DEFAULT_PSM) java.lang.Integer psmValue, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""timeout"", description = ""How long to wait for a new connection, 0 is wait for ever"") @com.googlecode.android_scripting.rpc.RpcDefault(""0"") java.lang.Integer timeout, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""isBle"", description = ""Is transport BLE?"") @com.googlecode.android_scripting.rpc.RpcDefault(""0"") java.lang.Boolean isBle) throws java.io.IOException { com.googlecode.android_scripting.Log.d((""bluetoothSocketConnBeginAcceptThreadPsm: PSM value="" + psmValue)); android.bluetooth.BluetoothServerSocket mServerSocket; com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread acceptThread = new com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread(psmValue.intValue(), timeout.intValue(), isBle); acceptThread.start(); mAcceptThread = acceptThread; }",b9669a497ef68ba2c6f710e8ad014a7f3efc0d4b,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Begins a thread to accept an Coc connection over Bluetooth. "") public void bluetoothSocketConnBeginAcceptThreadPsm(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""psmValue"") @com.googlecode.android_scripting.rpc.RpcDefault(com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.DEFAULT_PSM) java.lang.Integer psmValue, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""timeout"", description = ""How long to wait for a new connection, 0 is wait for ever"") @com.googlecode.android_scripting.rpc.RpcDefault(""0"") java.lang.Integer timeout, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""isBle"", description = ""Is transport BLE?"") @com.googlecode.android_scripting.rpc.RpcDefault(""0"") java.lang.Boolean isBle, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""securedConn"", description = ""Using secured connection?"") @com.googlecode.android_scripting.rpc.RpcDefault(""0"") java.lang.Boolean securedConn) throws java.io.IOException { com.googlecode.android_scripting.Log.d((""bluetoothSocketConnBeginAcceptThreadPsm: PSM value="" + psmValue)); com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread acceptThread = new com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread(psmValue.intValue(), timeout.intValue(), isBle, securedConn); acceptThread.start(); mAcceptThread = acceptThread; }",31076dc44882e99466caa2170e563b5b1ef49075,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Begins a thread to accept an Coc connection over Bluetooth. "") public void bluetoothSocketConnBeginAcceptThreadPsm(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""psmValue"") @com.googlecode.android_scripting.rpc.RpcDefault(com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.DEFAULT_PSM) java.lang.Integer psmValue, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""timeout"", description = ""How long to wait for a new connection, 0 is wait for ever"") @com.googlecode.android_scripting.rpc.RpcDefault(""0"") java.lang.Integer timeout, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""isBle"", description = ""Is transport BLE?"") @com.googlecode.android_scripting.rpc.RpcDefault(""false"") java.lang.Boolean isBle, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""securedConn"", description = ""Using secured connection?"") @com.googlecode.android_scripting.rpc.RpcDefault(""false"") java.lang.Boolean securedConn) throws java.io.IOException { com.googlecode.android_scripting.Log.d((""bluetoothSocketConnBeginAcceptThreadPsm: PSM value="" + psmValue)); com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread acceptThread = new com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread(psmValue.intValue(), timeout.intValue(), isBle, securedConn); acceptThread.start(); mAcceptThread = acceptThread; }",2350101e3d14926f91631974e41a583f0b224751,2018-01-18 16:42:31,4
588293,luni_src_main_java_libcore_util_NativeAllocationRegistry.java,"public java.lang.Runnable registerNativeAllocation(java.lang.Object referent, libcore.util.NativeAllocationRegistry.Allocator allocator) { if (referent == null) { throw new java.lang.IllegalArgumentException(""referent is null""); } libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); libcore.util.NativeAllocationRegistry.CleanerThunk thunk = new libcore.util.NativeAllocationRegistry.CleanerThunk(); sun.misc.Cleaner cleaner = sun.misc.Cleaner.create(referent, thunk); long nativePtr = allocator.allocate(); if (nativePtr == 0) { cleaner.clean(); return null; } thunk.setNativePtr(nativePtr); return new libcore.util.NativeAllocationRegistry.CleanerRunner(cleaner); }",85f772aadc7bfbfe2bda7a4d34de4966c78cae61,"public java.lang.Runnable registerNativeAllocation(java.lang.Object referent, libcore.util.NativeAllocationRegistry.Allocator allocator) { if (referent == null) { throw new java.lang.IllegalArgumentException(""referent is null""); } libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); libcore.util.NativeAllocationRegistry.CleanerThunk thunk = new libcore.util.NativeAllocationRegistry.CleanerThunk(); sun.misc.Cleaner cleaner = sun.misc.Cleaner.create(referent, thunk); libcore.util.NativeAllocationRegistry.CleanerRunner result = new libcore.util.NativeAllocationRegistry.CleanerRunner(cleaner); long nativePtr = allocator.allocate(); if (nativePtr == 0) { cleaner.clean(); return null; } thunk.setNativePtr(nativePtr); return result; }",75323d689fd62152a9670c5f363cf97fe81e24d6,"public java.lang.Runnable registerNativeAllocation(java.lang.Object referent, libcore.util.NativeAllocationRegistry.Allocator allocator) { if (referent == null) { throw new java.lang.IllegalArgumentException(""referent is null""); } libcore.util.NativeAllocationRegistry.CleanerThunk thunk = new libcore.util.NativeAllocationRegistry.CleanerThunk(); sun.misc.Cleaner cleaner = sun.misc.Cleaner.create(referent, thunk); libcore.util.NativeAllocationRegistry.CleanerRunner result = new libcore.util.NativeAllocationRegistry.CleanerRunner(cleaner); long nativePtr = allocator.allocate(); if (nativePtr == 0) { cleaner.clean(); return null; } libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); thunk.setNativePtr(nativePtr); return result; }",36b3a41f1459a3bd04bec8c262f93602e0623b76,2018-01-18 19:25:12,3
588293,luni_src_main_java_libcore_util_NativeAllocationRegistry.java,"public java.lang.Runnable registerNativeAllocation(java.lang.Object referent, long nativePtr) { if (referent == null) { throw new java.lang.IllegalArgumentException(""referent is null""); } if (nativePtr == 0) { throw new java.lang.IllegalArgumentException(""nativePtr is null""); } try { libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); } catch (java.lang.OutOfMemoryError oome) { libcore.util.NativeAllocationRegistry.applyFreeFunction(freeFunction, nativePtr); throw oome; } sun.misc.Cleaner cleaner = sun.misc.Cleaner.create(referent, new libcore.util.NativeAllocationRegistry.CleanerThunk(nativePtr)); return new libcore.util.NativeAllocationRegistry.CleanerRunner(cleaner); }",d2a7e66ff58516f193cf280235ed5301f693144c,"public java.lang.Runnable registerNativeAllocation(java.lang.Object referent, long nativePtr) { if (referent == null) { throw new java.lang.IllegalArgumentException(""referent is null""); } if (nativePtr == 0) { throw new java.lang.IllegalArgumentException(""nativePtr is null""); } try { libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); } catch (java.lang.OutOfMemoryError oome) { libcore.util.NativeAllocationRegistry.applyFreeFunction(freeFunction, nativePtr); throw oome; } libcore.util.NativeAllocationRegistry.CleanerThunk thunk = new libcore.util.NativeAllocationRegistry.CleanerThunk(); sun.misc.Cleaner cleaner = sun.misc.Cleaner.create(referent, thunk); libcore.util.NativeAllocationRegistry.CleanerRunner result = new libcore.util.NativeAllocationRegistry.CleanerRunner(cleaner); thunk.setNativePtr(nativePtr); return result; }",7c18cb799e49a249000ac689a81da5a7aef1992b,"public java.lang.Runnable registerNativeAllocation(java.lang.Object referent, long nativePtr) { if (referent == null) { throw new java.lang.IllegalArgumentException(""referent is null""); } if (nativePtr == 0) { throw new java.lang.IllegalArgumentException(""nativePtr is null""); } libcore.util.NativeAllocationRegistry.CleanerThunk thunk; libcore.util.NativeAllocationRegistry.CleanerRunner result; try { thunk = new libcore.util.NativeAllocationRegistry.CleanerThunk(); sun.misc.Cleaner cleaner = sun.misc.Cleaner.create(referent, thunk); result = new libcore.util.NativeAllocationRegistry.CleanerRunner(cleaner); libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); } catch (java.lang.VirtualMachineError vme) { libcore.util.NativeAllocationRegistry.applyFreeFunction(freeFunction, nativePtr); throw vme; } thunk.setNativePtr(nativePtr); return result; }",07c719927f705aa17d230da7333a13b84c0047be,2018-01-18 19:25:12,3
517329,test_639-checker-code-sinking_src_Main.java,public static void main(java.lang.String[] args) { Main.testSimpleUse(); Main.testTwoUses(); Main.testFieldStores(Main.doThrow); Main.testFieldStoreCycle(); Main.testArrayStores(); Main.testOnlyStoreUses(); Main.testNoUse(); Main.testPhiInput(); Main.testVolatileStore(); Main.doThrow = true; try { Main.testInstanceSideEffects(); } catch (java.lang.Error e) { java.lang.System.out.println(e.getMessage()); } try { Main.testStaticSideEffects(); } catch (java.lang.Error e) { java.lang.System.out.println(e.getMessage()); } try { Main.testStoreStore(Main.doThrow); } catch (java.lang.Error e) { java.lang.System.out.println(e.getMessage()); } },f76471aefc320e79d1df9c0a00c4110955377ed8,"public static void main(java.lang.String[] args) { Main.testSimpleUse(); Main.testTwoUses(); Main.testFieldStores(Main.doThrow); Main.testFieldStoreCycle(); Main.testArrayStores(); Main.testOnlyStoreUses(); Main.testNoUse(); Main.testPhiInput(); Main.testVolatileStore(); Main.doThrow = true; try { Main.testInstanceSideEffects(); } catch (java.lang.Error e) { java.lang.System.out.println(e.getMessage()); } try { Main.testStaticSideEffects(); } catch (java.lang.Error e) { java.lang.System.out.println(e.getMessage()); } try { Main.$noinline$testStoreStore(Main.doThrow, true); } catch (java.lang.Error e) { java.lang.System.out.println(e.getMessage()); } }",783e9fa75572b7ee85cb2bc516409db213c4617a,public static void main(java.lang.String[] args) { Main.testSimpleUse(); Main.testTwoUses(); Main.testFieldStores(Main.doThrow); Main.testFieldStoreCycle(); Main.testArrayStores(); Main.testOnlyStoreUses(); Main.testNoUse(); Main.testPhiInput(); Main.testVolatileStore(); Main.doThrow = true; try { Main.testInstanceSideEffects(); } catch (java.lang.Error e) { java.lang.System.out.println(e.getMessage()); } try { Main.testStaticSideEffects(); } catch (java.lang.Error e) { java.lang.System.out.println(e.getMessage()); } try { Main.testStoreStore(Main.doThrow); } catch (java.lang.Error e) { java.lang.System.out.println(e.getMessage()); } },f76471aefc320e79d1df9c0a00c4110955377ed8,2018-01-18 21:34:08,6
517329,test_639-checker-code-sinking_src_Main.java,public static void testStoreStore(boolean doThrow) { Main m = new Main(); m.intField = 42; m.intField = 43; if (doThrow) { throw new java.lang.Error(m.$opt$noinline$toString()); } },0bc51eacf73c502d6df4eeb26b210799194cec3b,"public static void $noinline$testStoreStore(boolean doThrow, boolean flag) { Main m = new Main(); m.intField = 42; m.intField2 = 43; if (doThrow) { throw new java.lang.Error(m.$opt$noinline$toString()); } }",e8087a646bf84e65ffef485525d6ae077a84878d,public static void testStoreStore(boolean doThrow) { Main m = new Main(); m.intField = 42; m.intField2 = 43; if (doThrow) { throw new java.lang.Error(m.$opt$noinline$toString()); } },cf04f8728608f510b99b4947db49018a2fe606ea,2018-01-18 21:34:08,6
557179,services_core_java_com_android_server_hdmi_HdmiControlService.java,"void setAudioStatus(boolean mute, int volume) { if ((!(isTvDeviceEnabled())) || (!(tv().isSystemAudioActivated()))) { return; } android.media.AudioManager audioManager = getAudioManager(); boolean muted = audioManager.isStreamMute(AudioManager.STREAM_MUSIC); if (mute) { if (!muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, true); } } else { if (muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, false); } audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, volume, ((android.media.AudioManager.FLAG_SHOW_UI) | (android.media.AudioManager.FLAG_HDMI_SYSTEM_AUDIO_VOLUME))); } }",5a627a0a034b09f2bfebe9d9aa363131f4b3b399,"void setAudioStatus(boolean mute, int volume) { if ((!(isTvDeviceEnabled())) || (!(tv().isSystemAudioActivated()))) { return; } android.media.AudioManager audioManager = getAudioManager(); boolean muted = audioManager.isStreamMute(AudioManager.STREAM_MUSIC); if (mute) { if (!muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, true); } } else { if (muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, false); } int flag = android.media.AudioManager.FLAG_HDMI_SYSTEM_AUDIO_VOLUME; if ((0 <= volume) && (volume <= 100)) { android.util.Slog.i(com.android.server.hdmi.HdmiControlService.TAG, (""volume: "" + volume)); flag |= android.media.AudioManager.FLAG_SHOW_UI; } audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, volume, flag); } }",37c9ceee72c1747df46bf4ad577c726b315f20e8,"void setAudioStatus(boolean mute, int volume) { if ((!(isTvDeviceEnabled())) || (!(tv().isSystemAudioActivated()))) { return; } android.media.AudioManager audioManager = getAudioManager(); boolean muted = audioManager.isStreamMute(AudioManager.STREAM_MUSIC); if (mute) { if (!muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, true); } } else { if (muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, false); } int flag = android.media.AudioManager.FLAG_HDMI_SYSTEM_AUDIO_VOLUME; if ((0 <= volume) && (volume <= 100)) { android.util.Slog.i(com.android.server.hdmi.HdmiControlService.TAG, (""volume: "" + volume)); flag |= android.media.AudioManager.FLAG_SHOW_UI; audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, volume, flag); } } }",c7931e2095d464a32d8c74e3120afcbddd5abd87,2018-01-18 21:50:08,3
552002,services_core_java_com_android_server_hdmi_DeviceDiscoveryAction.java,"private void handleSetOsdName(com.android.server.hdmi.HdmiCecMessage cmd) { com.android.internal.util.Preconditions.checkState(((mProcessedDeviceCount) < (mDevices.size()))); com.android.server.hdmi.DeviceDiscoveryAction.DeviceInfo current = mDevices.get(mProcessedDeviceCount); if ((current.mLogicalAddress) != (cmd.getSource())) { android.util.Slog.w(com.android.server.hdmi.DeviceDiscoveryAction.TAG, (((""Unmatched address[expected:"" + (current.mLogicalAddress)) + "", actual:"") + (cmd.getSource()))); return; } java.lang.String displayName = null; try { displayName = new java.lang.String(cmd.getParams(), ""US-ASCII""); } catch (java.io.UnsupportedEncodingException e) { android.util.Slog.w(com.android.server.hdmi.DeviceDiscoveryAction.TAG, (""Failed to decode display name: "" + (cmd.toString()))); displayName = com.android.server.hdmi.HdmiUtils.getDefaultDeviceName(current.mLogicalAddress); } current.mDisplayName = displayName; increaseProcessedDeviceCount(); checkAndProceedStage(); }",fd1555cffb4f1d1482eac7f194d62daf6f6e80ca,"private void handleSetOsdName(com.android.server.hdmi.HdmiCecMessage cmd) { com.android.internal.util.Preconditions.checkState(((mProcessedDeviceCount) < (mDevices.size()))); com.android.server.hdmi.DeviceDiscoveryAction.DeviceInfo current = mDevices.get(mProcessedDeviceCount); if ((current.mLogicalAddress) != (cmd.getSource())) { android.util.Slog.w(com.android.server.hdmi.DeviceDiscoveryAction.TAG, (((""Unmatched address[expected:"" + (current.mLogicalAddress)) + "", actual:"") + (cmd.getSource()))); return; } java.lang.String displayName = null; try { displayName = new java.lang.String(cmd.getParams(), ""US-ASCII""); } catch (java.io.UnsupportedEncodingException e) { android.util.Slog.w(com.android.server.hdmi.DeviceDiscoveryAction.TAG, (""Failed to decode display name: "" + (cmd.toString()))); displayName = com.android.server.hdmi.HdmiUtils.getDefaultDeviceName(current.mLogicalAddress); } if ((cmd.getOpcode()) == (Constants.MESSAGE_FEATURE_ABORT)) { displayName = com.android.server.hdmi.HdmiUtils.getDefaultDeviceName(current.mLogicalAddress); } current.mDisplayName = displayName; increaseProcessedDeviceCount(); checkAndProceedStage(); }",6d484f066dc287d1e27d54ffc6e5d30546474ede,"private void handleSetOsdName(com.android.server.hdmi.HdmiCecMessage cmd) { com.android.internal.util.Preconditions.checkState(((mProcessedDeviceCount) < (mDevices.size()))); com.android.server.hdmi.DeviceDiscoveryAction.DeviceInfo current = mDevices.get(mProcessedDeviceCount); if ((current.mLogicalAddress) != (cmd.getSource())) { android.util.Slog.w(com.android.server.hdmi.DeviceDiscoveryAction.TAG, (((""Unmatched address[expected:"" + (current.mLogicalAddress)) + "", actual:"") + (cmd.getSource()))); return; } java.lang.String displayName = null; try { if ((cmd.getOpcode()) == (Constants.MESSAGE_FEATURE_ABORT)) { displayName = com.android.server.hdmi.HdmiUtils.getDefaultDeviceName(current.mLogicalAddress); } else { displayName = new java.lang.String(cmd.getParams(), ""US-ASCII""); } } catch (java.io.UnsupportedEncodingException e) { android.util.Slog.w(com.android.server.hdmi.DeviceDiscoveryAction.TAG, (""Failed to decode display name: "" + (cmd.toString()))); displayName = com.android.server.hdmi.HdmiUtils.getDefaultDeviceName(current.mLogicalAddress); } current.mDisplayName = displayName; increaseProcessedDeviceCount(); checkAndProceedStage(); }",837bb2f40a23ef3d2a9750586a569a9759720b49,2018-01-18 22:16:23,2
591540,Common_src_com_googlecode_android_scripting_facade_telephony_TelephonyManagerFacade.java,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Returns Carrier Name for currention subscription"") public java.lang.String telephonyGetSubscriptionCarrierName() { return mTelephonyManager.getSubscriptionCarrierName(); }",972194709ebdb9697354c7ba96b119a9326a086a,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Set the SIM power state for SIM slot slotId."") public void telephonyGetSimStateForSlotId(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""slotId"") java.lang.Integer slotId, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""state"") java.lang.Integer state) { mTelephonyManager.setSimPowerStateForSlot(slotId, state); }",4213aa8e9909a4513f529c4e5a79abc7269e17f5,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Set the SIM power state for SIM slot slotId."") public void telephonySetSimStateForSlotId(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""slotId"") java.lang.Integer slotId, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""state"") java.lang.Integer state) { mTelephonyManager.setSimPowerStateForSlot(slotId, state); }",cfa4db80df91a60461b8dd70d126a697c0b44770,2018-01-18 23:58:15,4
589613,core_java_android_net_NetworkStats.java,"public android.net.NetworkStats addValues(android.net.NetworkStats.Entry entry) { if ((size) >= (capacity)) { final int newLength = ((java.lang.Math.max(size, 10)) * 3) / 2; iface = java.util.Arrays.copyOf(iface, newLength); uid = java.util.Arrays.copyOf(uid, newLength); set = java.util.Arrays.copyOf(set, newLength); tag = java.util.Arrays.copyOf(tag, newLength); metered = java.util.Arrays.copyOf(metered, newLength); roaming = java.util.Arrays.copyOf(roaming, newLength); rxBytes = java.util.Arrays.copyOf(rxBytes, newLength); rxPackets = java.util.Arrays.copyOf(rxPackets, newLength); txBytes = java.util.Arrays.copyOf(txBytes, newLength); txPackets = java.util.Arrays.copyOf(txPackets, newLength); operations = java.util.Arrays.copyOf(operations, newLength); capacity = newLength; } iface[size] = entry.iface; uid[size] = entry.uid; set[size] = entry.set; tag[size] = entry.tag; metered[size] = entry.metered; roaming[size] = entry.roaming; rxBytes[size] = entry.rxBytes; rxPackets[size] = entry.rxPackets; txBytes[size] = entry.txBytes; txPackets[size] = entry.txPackets; operations[size] = entry.operations; (size)++; return this; }",8dfd2cc297162d18957263d6f26d9fe605f1067f,"public android.net.NetworkStats addValues(android.net.NetworkStats.Entry entry) { if ((size) >= (capacity)) { final int newLength = ((java.lang.Math.max(size, 10)) * 3) / 2; iface = java.util.Arrays.copyOf(iface, newLength); uid = java.util.Arrays.copyOf(uid, newLength); set = java.util.Arrays.copyOf(set, newLength); tag = java.util.Arrays.copyOf(tag, newLength); defaultNetwork = java.util.Arrays.copyOf(defaultNetwork, newLength); metered = java.util.Arrays.copyOf(metered, newLength); roaming = java.util.Arrays.copyOf(roaming, newLength); rxBytes = java.util.Arrays.copyOf(rxBytes, newLength); rxPackets = java.util.Arrays.copyOf(rxPackets, newLength); txBytes = java.util.Arrays.copyOf(txBytes, newLength); txPackets = java.util.Arrays.copyOf(txPackets, newLength); operations = java.util.Arrays.copyOf(operations, newLength); capacity = newLength; } iface[size] = entry.iface; uid[size] = entry.uid; set[size] = entry.set; tag[size] = entry.tag; defaultNetwork[size] = entry.defaultNetwork; metered[size] = entry.metered; roaming[size] = entry.roaming; rxBytes[size] = entry.rxBytes; rxPackets[size] = entry.rxPackets; txBytes[size] = entry.txBytes; txPackets[size] = entry.txPackets; operations[size] = entry.operations; (size)++; return this; }",c0b3e01ac8764a12f24fa3baace05d62208b216f,"public android.net.NetworkStats addValues(android.net.NetworkStats.Entry entry) { if ((size) >= (capacity)) { final int newLength = ((java.lang.Math.max(size, 10)) * 3) / 2; iface = java.util.Arrays.copyOf(iface, newLength); uid = java.util.Arrays.copyOf(uid, newLength); set = java.util.Arrays.copyOf(set, newLength); tag = java.util.Arrays.copyOf(tag, newLength); metered = java.util.Arrays.copyOf(metered, newLength); roaming = java.util.Arrays.copyOf(roaming, newLength); defaultNetwork = java.util.Arrays.copyOf(defaultNetwork, newLength); rxBytes = java.util.Arrays.copyOf(rxBytes, newLength); rxPackets = java.util.Arrays.copyOf(rxPackets, newLength); txBytes = java.util.Arrays.copyOf(txBytes, newLength); txPackets = java.util.Arrays.copyOf(txPackets, newLength); operations = java.util.Arrays.copyOf(operations, newLength); capacity = newLength; } iface[size] = entry.iface; uid[size] = entry.uid; set[size] = entry.set; tag[size] = entry.tag; metered[size] = entry.metered; roaming[size] = entry.roaming; defaultNetwork[size] = entry.defaultNetwork; rxBytes[size] = entry.rxBytes; rxPackets[size] = entry.rxPackets; txBytes[size] = entry.txBytes; txPackets[size] = entry.txPackets; operations[size] = entry.operations; (size)++; return this; }",f68f02c7189e9a0358fdc834af205b9fb44d0ebb,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,"@java.lang.Deprecated public android.net.NetworkStats combineValues(java.lang.String iface, int uid, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return combineValues(iface, uid, android.net.NetworkStats.SET_DEFAULT, tag, rxBytes, rxPackets, txBytes, txPackets, operations); }",b3b3ddc54354533f2ae86998e53d2cedb73f2050,"@java.lang.Deprecated public android.net.NetworkStats combineValues(java.lang.String iface, int uid, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return combineValues(iface, uid, android.net.NetworkStats.SET_DEFAULT, tag, android.net.NetworkStats.DEFAULT_NETWORK_ALL, rxBytes, rxPackets, txBytes, txPackets, operations); }",5386d09c7f760f3fa622e59536a6dbcc3be8dbde,"@java.lang.Deprecated public android.net.NetworkStats combineValues(java.lang.String iface, int uid, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return combineValues(iface, uid, android.net.NetworkStats.SET_DEFAULT, tag, rxBytes, rxPackets, txBytes, txPackets, operations); }",b3b3ddc54354533f2ae86998e53d2cedb73f2050,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,"@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addIfaceValues(java.lang.String iface, long rxBytes, long rxPackets, long txBytes, long txPackets) { return addValues(iface, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, rxBytes, rxPackets, txBytes, txPackets, 0L); }",06c8761689f0ed9dc997b8cace9beb4a7c6812d7,"@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addIfaceValues(java.lang.String iface, long rxBytes, long rxPackets, long txBytes, long txPackets) { return addValues(iface, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.DEFAULT_NETWORK_ALL, rxBytes, rxPackets, txBytes, txPackets, 0L); }",dfe691683531cfc6aa7654f1202a8573b3a43516,"@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addIfaceValues(java.lang.String iface, long rxBytes, long rxPackets, long txBytes, long txPackets) { return addValues(iface, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, rxBytes, rxPackets, txBytes, txPackets, 0L); }",06c8761689f0ed9dc997b8cace9beb4a7c6812d7,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,"public android.net.NetworkStats groupedByUid() { final android.net.NetworkStats stats = new android.net.NetworkStats(elapsedRealtime, 10); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); entry.iface = android.net.NetworkStats.IFACE_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.metered = android.net.NetworkStats.METERED_ALL; entry.roaming = android.net.NetworkStats.ROAMING_ALL; for (int i = 0; i < (size); i++) { if ((tag[i]) != (android.net.NetworkStats.TAG_NONE)) continue; entry.uid = uid[i]; entry.rxBytes = rxBytes[i]; entry.rxPackets = rxPackets[i]; entry.txBytes = txBytes[i]; entry.txPackets = txPackets[i]; entry.operations = operations[i]; stats.combineValues(entry); } return stats; }",7452aa1da9adc1a9e457dc9f56decd00820e4742,"public android.net.NetworkStats groupedByUid() { final android.net.NetworkStats stats = new android.net.NetworkStats(elapsedRealtime, 10); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); entry.iface = android.net.NetworkStats.IFACE_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.defaultNetwork = android.net.NetworkStats.DEFAULT_NETWORK_ALL; entry.metered = android.net.NetworkStats.METERED_ALL; entry.roaming = android.net.NetworkStats.ROAMING_ALL; for (int i = 0; i < (size); i++) { if ((tag[i]) != (android.net.NetworkStats.TAG_NONE)) continue; entry.uid = uid[i]; entry.rxBytes = rxBytes[i]; entry.rxPackets = rxPackets[i]; entry.txBytes = txBytes[i]; entry.txPackets = txPackets[i]; entry.operations = operations[i]; stats.combineValues(entry); } return stats; }",fef5990a873abc88f69217df70d35f1b3e107e4e,"public android.net.NetworkStats groupedByUid() { final android.net.NetworkStats stats = new android.net.NetworkStats(elapsedRealtime, 10); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); entry.iface = android.net.NetworkStats.IFACE_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.metered = android.net.NetworkStats.METERED_ALL; entry.roaming = android.net.NetworkStats.ROAMING_ALL; entry.defaultNetwork = android.net.NetworkStats.DEFAULT_NETWORK_ALL; for (int i = 0; i < (size); i++) { if ((tag[i]) != (android.net.NetworkStats.TAG_NONE)) continue; entry.uid = uid[i]; entry.rxBytes = rxBytes[i]; entry.rxPackets = rxPackets[i]; entry.txBytes = txBytes[i]; entry.txPackets = txPackets[i]; entry.operations = operations[i]; stats.combineValues(entry); } return stats; }",88987523455540e1e5239c81780a7bccab15b014,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,"@java.lang.Override public int hashCode() { return java.util.Objects.hash(uid, set, tag, metered, roaming, iface); }",eb3732f077510355104cd6f1783d8daab74526e5,"@java.lang.Override public int hashCode() { return java.util.Objects.hash(uid, set, tag, defaultNetwork, metered, roaming, iface); }",b72da0bac3261613cba31a2d8e3b978a6771b1f4,"@java.lang.Override public int hashCode() { return java.util.Objects.hash(uid, set, tag, metered, roaming, defaultNetwork, iface); }",8662908af5477e7ce052846f00cce0191fdf38a5,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,"public android.net.NetworkStats combineValues(android.net.NetworkStats.Entry entry) { final int i = findIndex(entry.iface, entry.uid, entry.set, entry.tag, entry.metered, entry.roaming); if (i == (-1)) { addValues(entry); } else { rxBytes[i] += entry.rxBytes; rxPackets[i] += entry.rxPackets; txBytes[i] += entry.txBytes; txPackets[i] += entry.txPackets; operations[i] += entry.operations; } return this; }",963f1eda1ebd0f029d24835de730b745c16a6d15,"public android.net.NetworkStats combineValues(android.net.NetworkStats.Entry entry) { final int i = findIndex(entry.iface, entry.uid, entry.set, entry.tag, entry.defaultNetwork, entry.metered, entry.roaming); if (i == (-1)) { addValues(entry); } else { rxBytes[i] += entry.rxBytes; rxPackets[i] += entry.rxPackets; txBytes[i] += entry.txBytes; txPackets[i] += entry.txPackets; operations[i] += entry.operations; } return this; }",8dc3b9d98a74e264e7d2dd77aa2e1b63973c629d,"public android.net.NetworkStats combineValues(android.net.NetworkStats.Entry entry) { final int i = findIndex(entry.iface, entry.uid, entry.set, entry.tag, entry.metered, entry.roaming, entry.defaultNetwork); if (i == (-1)) { addValues(entry); } else { rxBytes[i] += entry.rxBytes; rxPackets[i] += entry.rxPackets; txBytes[i] += entry.txBytes; txPackets[i] += entry.txPackets; operations[i] += entry.operations; } return this; }",545e5c1256c0f4831018e681c7586d555567e21b,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,"private void deductTrafficFromVpnApp(int tunUid, java.lang.String underlyingIface, android.net.NetworkStats.Entry moved) { moved.uid = tunUid; moved.set = android.net.NetworkStats.SET_DBG_VPN_OUT; moved.tag = android.net.NetworkStats.TAG_NONE; moved.iface = underlyingIface; moved.metered = android.net.NetworkStats.METERED_ALL; moved.roaming = android.net.NetworkStats.ROAMING_ALL; combineValues(moved); int idxVpnBackground = findIndex(underlyingIface, tunUid, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO); if (idxVpnBackground != (-1)) { android.net.NetworkStats.tunSubtract(idxVpnBackground, this, moved); } int idxVpnForeground = findIndex(underlyingIface, tunUid, android.net.NetworkStats.SET_FOREGROUND, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO); if (idxVpnForeground != (-1)) { android.net.NetworkStats.tunSubtract(idxVpnForeground, this, moved); } }",d1ab4dd5ac7edc97c1e727286a8779c178ff6792,"private void deductTrafficFromVpnApp(int tunUid, java.lang.String underlyingIface, android.net.NetworkStats.Entry moved) { moved.uid = tunUid; moved.set = android.net.NetworkStats.SET_DBG_VPN_OUT; moved.tag = android.net.NetworkStats.TAG_NONE; moved.iface = underlyingIface; moved.defaultNetwork = android.net.NetworkStats.DEFAULT_NETWORK_ALL; moved.metered = android.net.NetworkStats.METERED_ALL; moved.roaming = android.net.NetworkStats.ROAMING_ALL; combineValues(moved); int idxVpnBackground = findIndex(underlyingIface, tunUid, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.DEFAULT_NETWORK_YES, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO); if (idxVpnBackground != (-1)) { android.net.NetworkStats.tunSubtract(idxVpnBackground, this, moved); } int idxVpnForeground = findIndex(underlyingIface, tunUid, android.net.NetworkStats.SET_FOREGROUND, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.DEFAULT_NETWORK_YES, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO); if (idxVpnForeground != (-1)) { android.net.NetworkStats.tunSubtract(idxVpnForeground, this, moved); } }",a9ac612514d2e5567d1d988b6804cdf571fb443f,"private void deductTrafficFromVpnApp(int tunUid, java.lang.String underlyingIface, android.net.NetworkStats.Entry moved) { moved.uid = tunUid; moved.set = android.net.NetworkStats.SET_DBG_VPN_OUT; moved.tag = android.net.NetworkStats.TAG_NONE; moved.iface = underlyingIface; moved.metered = android.net.NetworkStats.METERED_ALL; moved.roaming = android.net.NetworkStats.ROAMING_ALL; moved.defaultNetwork = android.net.NetworkStats.DEFAULT_NETWORK_ALL; combineValues(moved); int idxVpnBackground = findIndex(underlyingIface, tunUid, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO); if (idxVpnBackground != (-1)) { android.net.NetworkStats.tunSubtract(idxVpnBackground, this, moved); } int idxVpnForeground = findIndex(underlyingIface, tunUid, android.net.NetworkStats.SET_FOREGROUND, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO); if (idxVpnForeground != (-1)) { android.net.NetworkStats.tunSubtract(idxVpnForeground, this, moved); } }",e4b59adddf062edf9c95abd5a82572243420d737,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,"@com.android.internal.annotations.VisibleForTesting public int findIndexHinted(java.lang.String iface, int uid, int set, int tag, int metered, int roaming, int hintIndex) { for (int offset = 0; offset < (size); offset++) { final int halfOffset = offset / 2; final int i; if ((offset % 2) == 0) { i = (hintIndex + halfOffset) % (size); } else { i = ((((size) + hintIndex) - halfOffset) - 1) % (size); } if ((((((uid == (this.uid[i])) && (set == (this.set[i]))) && (tag == (this.tag[i]))) && (metered == (this.metered[i]))) && (roaming == (this.roaming[i]))) && (java.util.Objects.equals(iface, this.iface[i]))) { return i; } } return -1; }",02ccacc8dbc0658c282518eacefd73224a243f23,"@com.android.internal.annotations.VisibleForTesting public int findIndexHinted(java.lang.String iface, int uid, int set, int tag, int defaultNetwork, int metered, int roaming, int hintIndex) { for (int offset = 0; offset < (size); offset++) { final int halfOffset = offset / 2; final int i; if ((offset % 2) == 0) { i = (hintIndex + halfOffset) % (size); } else { i = ((((size) + hintIndex) - halfOffset) - 1) % (size); } if (((((((uid == (this.uid[i])) && (set == (this.set[i]))) && (tag == (this.tag[i]))) && (defaultNetwork == (this.defaultNetwork[i]))) && (metered == (this.metered[i]))) && (roaming == (this.roaming[i]))) && (java.util.Objects.equals(iface, this.iface[i]))) { return i; } } return -1; }",3e933542c22a30dfb4902fbab9128621926318f4,"@com.android.internal.annotations.VisibleForTesting public int findIndexHinted(java.lang.String iface, int uid, int set, int tag, int metered, int roaming, int defaultNetwork, int hintIndex) { for (int offset = 0; offset < (size); offset++) { final int halfOffset = offset / 2; final int i; if ((offset % 2) == 0) { i = (hintIndex + halfOffset) % (size); } else { i = ((((size) + hintIndex) - halfOffset) - 1) % (size); } if (((((((uid == (this.uid[i])) && (set == (this.set[i]))) && (tag == (this.tag[i]))) && (metered == (this.metered[i]))) && (roaming == (this.roaming[i]))) && (defaultNetwork == (this.defaultNetwork[i]))) && (java.util.Objects.equals(iface, this.iface[i]))) { return i; } } return -1; }",791c0005a09131b8de6ab5c30ae2bcb227d9bc48,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,"public void spliceOperationsFrom(android.net.NetworkStats stats) { for (int i = 0; i < (size); i++) { final int j = stats.findIndex(iface[i], uid[i], set[i], tag[i], metered[i], roaming[i]); if (j == (-1)) { operations[i] = 0; } else { operations[i] = stats.operations[j]; } } }",293aa848b4ae8387cbb98410ce16a52bd0b10f42,"public void spliceOperationsFrom(android.net.NetworkStats stats) { for (int i = 0; i < (size); i++) { final int j = stats.findIndex(iface[i], uid[i], set[i], tag[i], defaultNetwork[i], metered[i], roaming[i]); if (j == (-1)) { operations[i] = 0; } else { operations[i] = stats.operations[j]; } } }",c6f478a79b12c4d18e730f4be58ae8279a92f50c,"public void spliceOperationsFrom(android.net.NetworkStats stats) { for (int i = 0; i < (size); i++) { final int j = stats.findIndex(iface[i], uid[i], set[i], tag[i], metered[i], roaming[i], defaultNetwork[i]); if (j == (-1)) { operations[i] = 0; } else { operations[i] = stats.operations[j]; } } }",28dd22a0237b6ed000e9a143d16c1a9552ce16f5,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,"public android.net.NetworkStats groupedByIface() { final android.net.NetworkStats stats = new android.net.NetworkStats(elapsedRealtime, 10); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); entry.uid = android.net.NetworkStats.UID_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.metered = android.net.NetworkStats.METERED_ALL; entry.roaming = android.net.NetworkStats.ROAMING_ALL; entry.operations = 0L; for (int i = 0; i < (size); i++) { if ((tag[i]) != (android.net.NetworkStats.TAG_NONE)) continue; entry.iface = iface[i]; entry.rxBytes = rxBytes[i]; entry.rxPackets = rxPackets[i]; entry.txBytes = txBytes[i]; entry.txPackets = txPackets[i]; stats.combineValues(entry); } return stats; }",07ee85a2da7b0acd22f25083070568b41247a2bf,"public android.net.NetworkStats groupedByIface() { final android.net.NetworkStats stats = new android.net.NetworkStats(elapsedRealtime, 10); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); entry.uid = android.net.NetworkStats.UID_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.defaultNetwork = android.net.NetworkStats.DEFAULT_NETWORK_ALL; entry.metered = android.net.NetworkStats.METERED_ALL; entry.roaming = android.net.NetworkStats.ROAMING_ALL; entry.operations = 0L; for (int i = 0; i < (size); i++) { if ((tag[i]) != (android.net.NetworkStats.TAG_NONE)) continue; entry.iface = iface[i]; entry.rxBytes = rxBytes[i]; entry.rxPackets = rxPackets[i]; entry.txBytes = txBytes[i]; entry.txPackets = txPackets[i]; stats.combineValues(entry); } return stats; }",142558c98c92b062fdc358eae3e711f6bcb3aa3c,"public android.net.NetworkStats groupedByIface() { final android.net.NetworkStats stats = new android.net.NetworkStats(elapsedRealtime, 10); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); entry.uid = android.net.NetworkStats.UID_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.metered = android.net.NetworkStats.METERED_ALL; entry.roaming = android.net.NetworkStats.ROAMING_ALL; entry.defaultNetwork = android.net.NetworkStats.DEFAULT_NETWORK_ALL; entry.operations = 0L; for (int i = 0; i < (size); i++) { if ((tag[i]) != (android.net.NetworkStats.TAG_NONE)) continue; entry.iface = iface[i]; entry.rxBytes = rxBytes[i]; entry.rxPackets = rxPackets[i]; entry.txBytes = txBytes[i]; entry.txPackets = txPackets[i]; stats.combineValues(entry); } return stats; }",7e80957d67a7c2893a2c6b107f4716504daca064,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,"public void dump(java.lang.String prefix, java.io.PrintWriter pw) { pw.print(prefix); pw.print(""NetworkStats: elapsedRealtime=""); pw.println(elapsedRealtime); for (int i = 0; i < (size); i++) { pw.print(prefix); pw.print("" [""); pw.print(i); pw.print(""]""); pw.print("" iface=""); pw.print(iface[i]); pw.print("" uid=""); pw.print(uid[i]); pw.print("" set=""); pw.print(android.net.NetworkStats.setToString(set[i])); pw.print("" tag=""); pw.print(android.net.NetworkStats.tagToString(tag[i])); pw.print("" metered=""); pw.print(android.net.NetworkStats.meteredToString(metered[i])); pw.print("" roaming=""); pw.print(android.net.NetworkStats.roamingToString(roaming[i])); pw.print("" rxBytes=""); pw.print(rxBytes[i]); pw.print("" rxPackets=""); pw.print(rxPackets[i]); pw.print("" txBytes=""); pw.print(txBytes[i]); pw.print("" txPackets=""); pw.print(txPackets[i]); pw.print("" operations=""); pw.println(operations[i]); } }",7e19550c4283e098ebebe37a3e68e02d8ca64b3f,"public void dump(java.lang.String prefix, java.io.PrintWriter pw) { pw.print(prefix); pw.print(""NetworkStats: elapsedRealtime=""); pw.println(elapsedRealtime); for (int i = 0; i < (size); i++) { pw.print(prefix); pw.print("" [""); pw.print(i); pw.print(""]""); pw.print("" iface=""); pw.print(iface[i]); pw.print("" uid=""); pw.print(uid[i]); pw.print("" set=""); pw.print(android.net.NetworkStats.setToString(set[i])); pw.print("" tag=""); pw.print(android.net.NetworkStats.tagToString(tag[i])); pw.print("" defaultNetwork=""); pw.print(android.net.NetworkStats.defaultNetworkToString(defaultNetwork[i])); pw.print("" metered=""); pw.print(android.net.NetworkStats.meteredToString(metered[i])); pw.print("" roaming=""); pw.print(android.net.NetworkStats.roamingToString(roaming[i])); pw.print("" rxBytes=""); pw.print(rxBytes[i]); pw.print("" rxPackets=""); pw.print(rxPackets[i]); pw.print("" txBytes=""); pw.print(txBytes[i]); pw.print("" txPackets=""); pw.print(txPackets[i]); pw.print("" operations=""); pw.println(operations[i]); } }",cfc8619c437c246daeb85bc09164505f3344cf18,"public void dump(java.lang.String prefix, java.io.PrintWriter pw) { pw.print(prefix); pw.print(""NetworkStats: elapsedRealtime=""); pw.println(elapsedRealtime); for (int i = 0; i < (size); i++) { pw.print(prefix); pw.print("" [""); pw.print(i); pw.print(""]""); pw.print("" iface=""); pw.print(iface[i]); pw.print("" uid=""); pw.print(uid[i]); pw.print("" set=""); pw.print(android.net.NetworkStats.setToString(set[i])); pw.print("" tag=""); pw.print(android.net.NetworkStats.tagToString(tag[i])); pw.print("" metered=""); pw.print(android.net.NetworkStats.meteredToString(metered[i])); pw.print("" roaming=""); pw.print(android.net.NetworkStats.roamingToString(roaming[i])); pw.print("" defaultNetwork=""); pw.print(android.net.NetworkStats.defaultNetworkToString(defaultNetwork[i])); pw.print("" rxBytes=""); pw.print(rxBytes[i]); pw.print("" rxPackets=""); pw.print(rxPackets[i]); pw.print("" txBytes=""); pw.print(txBytes[i]); pw.print("" txPackets=""); pw.print(txPackets[i]); pw.print("" operations=""); pw.println(operations[i]); } }",09f2dac11dc7a5462011400ea31928d2e0763fb2,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,"private android.net.NetworkStats.Entry getTotal(android.net.NetworkStats.Entry recycle, java.util.HashSet<java.lang.String> limitIface, int limitUid, boolean includeTags) { final android.net.NetworkStats.Entry entry = (recycle != null) ? recycle : new android.net.NetworkStats.Entry(); entry.iface = android.net.NetworkStats.IFACE_ALL; entry.uid = limitUid; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.metered = android.net.NetworkStats.METERED_ALL; entry.roaming = android.net.NetworkStats.ROAMING_ALL; entry.rxBytes = 0; entry.rxPackets = 0; entry.txBytes = 0; entry.txPackets = 0; entry.operations = 0; for (int i = 0; i < (size); i++) { final boolean matchesUid = (limitUid == (android.net.NetworkStats.UID_ALL)) || (limitUid == (uid[i])); final boolean matchesIface = (limitIface == null) || (limitIface.contains(iface[i])); if (matchesUid && matchesIface) { if (((tag[i]) != (android.net.NetworkStats.TAG_NONE)) && (!includeTags)) continue; entry.rxBytes += rxBytes[i]; entry.rxPackets += rxPackets[i]; entry.txBytes += txBytes[i]; entry.txPackets += txPackets[i]; entry.operations += operations[i]; } } return entry; }",8ef8eb684040b42dfdcafa311d4939fffa568315,"private android.net.NetworkStats.Entry getTotal(android.net.NetworkStats.Entry recycle, java.util.HashSet<java.lang.String> limitIface, int limitUid, boolean includeTags) { final android.net.NetworkStats.Entry entry = (recycle != null) ? recycle : new android.net.NetworkStats.Entry(); entry.iface = android.net.NetworkStats.IFACE_ALL; entry.uid = limitUid; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.defaultNetwork = android.net.NetworkStats.DEFAULT_NETWORK_ALL; entry.metered = android.net.NetworkStats.METERED_ALL; entry.roaming = android.net.NetworkStats.ROAMING_ALL; entry.rxBytes = 0; entry.rxPackets = 0; entry.txBytes = 0; entry.txPackets = 0; entry.operations = 0; for (int i = 0; i < (size); i++) { final boolean matchesUid = (limitUid == (android.net.NetworkStats.UID_ALL)) || (limitUid == (uid[i])); final boolean matchesIface = (limitIface == null) || (limitIface.contains(iface[i])); if (matchesUid && matchesIface) { if (((tag[i]) != (android.net.NetworkStats.TAG_NONE)) && (!includeTags)) continue; entry.rxBytes += rxBytes[i]; entry.rxPackets += rxPackets[i]; entry.txBytes += txBytes[i]; entry.txPackets += txPackets[i]; entry.operations += operations[i]; } } return entry; }",56befface521b19e538b3e3ad5045685c9e30b2d,"private android.net.NetworkStats.Entry getTotal(android.net.NetworkStats.Entry recycle, java.util.HashSet<java.lang.String> limitIface, int limitUid, boolean includeTags) { final android.net.NetworkStats.Entry entry = (recycle != null) ? recycle : new android.net.NetworkStats.Entry(); entry.iface = android.net.NetworkStats.IFACE_ALL; entry.uid = limitUid; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.metered = android.net.NetworkStats.METERED_ALL; entry.roaming = android.net.NetworkStats.ROAMING_ALL; entry.defaultNetwork = android.net.NetworkStats.DEFAULT_NETWORK_ALL; entry.rxBytes = 0; entry.rxPackets = 0; entry.txBytes = 0; entry.txPackets = 0; entry.operations = 0; for (int i = 0; i < (size); i++) { final boolean matchesUid = (limitUid == (android.net.NetworkStats.UID_ALL)) || (limitUid == (uid[i])); final boolean matchesIface = (limitIface == null) || (limitIface.contains(iface[i])); if (matchesUid && matchesIface) { if (((tag[i]) != (android.net.NetworkStats.TAG_NONE)) && (!includeTags)) continue; entry.rxBytes += rxBytes[i]; entry.rxPackets += rxPackets[i]; entry.txBytes += txBytes[i]; entry.txPackets += txPackets[i]; entry.operations += operations[i]; } } return entry; }",cbc5b8c737a32146377734e4086163fcadc30ecf,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,"@java.lang.Override public java.lang.String toString() { final java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append(""iface="").append(iface); builder.append("" uid="").append(uid); builder.append("" set="").append(android.net.NetworkStats.setToString(set)); builder.append("" tag="").append(android.net.NetworkStats.tagToString(tag)); builder.append("" metered="").append(android.net.NetworkStats.meteredToString(metered)); builder.append("" roaming="").append(android.net.NetworkStats.roamingToString(roaming)); builder.append("" rxBytes="").append(rxBytes); builder.append("" rxPackets="").append(rxPackets); builder.append("" txBytes="").append(txBytes); builder.append("" txPackets="").append(txPackets); builder.append("" operations="").append(operations); return builder.toString(); }",07fe349bb61a962829bdf46746209637688377ba,"@java.lang.Override public java.lang.String toString() { final java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append(""iface="").append(iface); builder.append("" uid="").append(uid); builder.append("" set="").append(android.net.NetworkStats.setToString(set)); builder.append("" tag="").append(android.net.NetworkStats.tagToString(tag)); builder.append("" defaultNetwork="").append(android.net.NetworkStats.defaultNetworkToString(defaultNetwork)); builder.append("" metered="").append(android.net.NetworkStats.meteredToString(metered)); builder.append("" roaming="").append(android.net.NetworkStats.roamingToString(roaming)); builder.append("" rxBytes="").append(rxBytes); builder.append("" rxPackets="").append(rxPackets); builder.append("" txBytes="").append(txBytes); builder.append("" txPackets="").append(txPackets); builder.append("" operations="").append(operations); return builder.toString(); }",2f4dcd5a46dca95fb45d9d17af2f9de8eeb462b2,"@java.lang.Override public java.lang.String toString() { final java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append(""iface="").append(iface); builder.append("" uid="").append(uid); builder.append("" set="").append(android.net.NetworkStats.setToString(set)); builder.append("" tag="").append(android.net.NetworkStats.tagToString(tag)); builder.append("" metered="").append(android.net.NetworkStats.meteredToString(metered)); builder.append("" roaming="").append(android.net.NetworkStats.roamingToString(roaming)); builder.append("" defaultNetwork="").append(android.net.NetworkStats.defaultNetworkToString(defaultNetwork)); builder.append("" rxBytes="").append(rxBytes); builder.append("" rxPackets="").append(rxPackets); builder.append("" txBytes="").append(txBytes); builder.append("" txPackets="").append(txPackets); builder.append("" operations="").append(operations); return builder.toString(); }",21a84db9329fa24e4c16cff47b6f61c59cded819,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,"@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int set, int tag, int metered, int roaming, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, metered, roaming, rxBytes, rxPackets, txBytes, txPackets, operations)); }",acb2ee4584eb4220b1835a9342284a8fe9453d82,"@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int set, int tag, int defaultNetwork, int metered, int roaming, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, defaultNetwork, metered, roaming, rxBytes, rxPackets, txBytes, txPackets, operations)); }",07a12d8d8c1d2d1efaf5ac4d272fedf3943fcf5e,"@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int set, int tag, int metered, int roaming, int defaultNetwork, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, metered, roaming, defaultNetwork, rxBytes, rxPackets, txBytes, txPackets, operations)); }",f38840c558ccb0a46eabe5ffb8f8ea45f99ede0b,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,"public android.net.NetworkStats.Entry getValues(int i, android.net.NetworkStats.Entry recycle) { final android.net.NetworkStats.Entry entry = (recycle != null) ? recycle : new android.net.NetworkStats.Entry(); entry.iface = iface[i]; entry.uid = uid[i]; entry.set = set[i]; entry.tag = tag[i]; entry.metered = metered[i]; entry.roaming = roaming[i]; entry.rxBytes = rxBytes[i]; entry.rxPackets = rxPackets[i]; entry.txBytes = txBytes[i]; entry.txPackets = txPackets[i]; entry.operations = operations[i]; return entry; }",f40065493e2551e9de69796ee99fd69fd5b3e5f5,"public android.net.NetworkStats.Entry getValues(int i, android.net.NetworkStats.Entry recycle) { final android.net.NetworkStats.Entry entry = (recycle != null) ? recycle : new android.net.NetworkStats.Entry(); entry.iface = iface[i]; entry.uid = uid[i]; entry.set = set[i]; entry.tag = tag[i]; entry.defaultNetwork = defaultNetwork[i]; entry.metered = metered[i]; entry.roaming = roaming[i]; entry.rxBytes = rxBytes[i]; entry.rxPackets = rxPackets[i]; entry.txBytes = txBytes[i]; entry.txPackets = txPackets[i]; entry.operations = operations[i]; return entry; }",2cbb928c3fceae602e6ad915166e7f900ce4cef6,"public android.net.NetworkStats.Entry getValues(int i, android.net.NetworkStats.Entry recycle) { final android.net.NetworkStats.Entry entry = (recycle != null) ? recycle : new android.net.NetworkStats.Entry(); entry.iface = iface[i]; entry.uid = uid[i]; entry.set = set[i]; entry.tag = tag[i]; entry.metered = metered[i]; entry.roaming = roaming[i]; entry.defaultNetwork = defaultNetwork[i]; entry.rxBytes = rxBytes[i]; entry.rxPackets = rxPackets[i]; entry.txBytes = txBytes[i]; entry.txPackets = txPackets[i]; entry.operations = operations[i]; return entry; }",08be67a6291a6c5d8faa3494a162f8699b6f11fd,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,"public android.net.NetworkStats combineValues(java.lang.String iface, int uid, int set, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return combineValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, rxBytes, rxPackets, txBytes, txPackets, operations)); }",8fe2e82417f1f793fe02303a363c8db57a0bebd2,"public android.net.NetworkStats combineValues(java.lang.String iface, int uid, int set, int tag, int defaultNetwork, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return combineValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, defaultNetwork, rxBytes, rxPackets, txBytes, txPackets, operations)); }",f49c909597a3dbc34cd2f085cabd50e02dfc4e90,"public android.net.NetworkStats combineValues(java.lang.String iface, int uid, int set, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return combineValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, rxBytes, rxPackets, txBytes, txPackets, operations)); }",8fe2e82417f1f793fe02303a363c8db57a0bebd2,2018-01-19 14:48:51,6
589613,services_core_java_com_android_server_ConnectivityService.java,"private void makeDefault(NetworkAgentInfo newNetwork) { if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log((""Switching to new default network: "" + newNetwork)); setupDataActivityTracking(newNetwork); try { mNetd.setDefaultNetId(newNetwork.network.netId); } catch (java.lang.Exception e) { com.android.server.ConnectivityService.loge((""Exception setting default network :"" + e)); } notifyLockdownVpn(newNetwork); handleApplyDefaultProxy(newNetwork.linkProperties.getHttpProxy()); updateTcpBufferSizes(newNetwork); mDnsManager.setDefaultDnsSystemProperties(newNetwork.linkProperties.getDnsServers()); }",7c83c01268b038bfe79b569d7ab0fe31a3f466b3,"private void makeDefault(NetworkAgentInfo newNetwork) { if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log((""Switching to new default network: "" + newNetwork)); setupDataActivityTracking(newNetwork); try { mNetd.setDefaultNetId(newNetwork.network.netId); } catch (java.lang.Exception e) { com.android.server.ConnectivityService.loge((""Exception setting default network :"" + e)); } android.net.LinkProperties lp = newNetwork.linkProperties; notifyDefaultNetworkForNetworkStats(lp); notifyLockdownVpn(newNetwork); handleApplyDefaultProxy(lp.getHttpProxy()); updateTcpBufferSizes(newNetwork); mDnsManager.setDefaultDnsSystemProperties(newNetwork.linkProperties.getDnsServers()); }",e75504dc9e4511d8c8e143e73fb5f320586a57f5,"private void makeDefault(NetworkAgentInfo newNetwork) { if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log((""Switching to new default network: "" + newNetwork)); setupDataActivityTracking(newNetwork); try { mNetd.setDefaultNetId(newNetwork.network.netId); } catch (java.lang.Exception e) { com.android.server.ConnectivityService.loge((""Exception setting default network :"" + e)); } notifyLockdownVpn(newNetwork); handleApplyDefaultProxy(newNetwork.linkProperties.getHttpProxy()); updateTcpBufferSizes(newNetwork); mDnsManager.setDefaultDnsSystemProperties(newNetwork.linkProperties.getDnsServers()); notifyIfacesChangedForNetworkStats(); }",73803b3abdaa996b16385aeca1cd4aac259d2cc9,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof android.net.NetworkStats.Entry) { final android.net.NetworkStats.Entry e = ((android.net.NetworkStats.Entry) (o)); return (((((((((((uid) == (e.uid)) && ((set) == (e.set))) && ((tag) == (e.tag))) && ((metered) == (e.metered))) && ((roaming) == (e.roaming))) && ((rxBytes) == (e.rxBytes))) && ((rxPackets) == (e.rxPackets))) && ((txBytes) == (e.txBytes))) && ((txPackets) == (e.txPackets))) && ((operations) == (e.operations))) && (iface.equals(e.iface)); } return false; },0899848066598ef0d34dfbc032271ea792bc05bf,@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof android.net.NetworkStats.Entry) { final android.net.NetworkStats.Entry e = ((android.net.NetworkStats.Entry) (o)); return ((((((((((((uid) == (e.uid)) && ((set) == (e.set))) && ((tag) == (e.tag))) && ((defaultNetwork) == (e.defaultNetwork))) && ((metered) == (e.metered))) && ((roaming) == (e.roaming))) && ((rxBytes) == (e.rxBytes))) && ((rxPackets) == (e.rxPackets))) && ((txBytes) == (e.txBytes))) && ((txPackets) == (e.txPackets))) && ((operations) == (e.operations))) && (iface.equals(e.iface)); } return false; },7a262a4e7f2c33290a25ff22c78a4f53cb477561,@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof android.net.NetworkStats.Entry) { final android.net.NetworkStats.Entry e = ((android.net.NetworkStats.Entry) (o)); return ((((((((((((uid) == (e.uid)) && ((set) == (e.set))) && ((tag) == (e.tag))) && ((metered) == (e.metered))) && ((roaming) == (e.roaming))) && ((defaultNetwork) == (e.defaultNetwork))) && ((rxBytes) == (e.rxBytes))) && ((rxPackets) == (e.rxPackets))) && ((txBytes) == (e.txBytes))) && ((txPackets) == (e.txPackets))) && ((operations) == (e.operations))) && (iface.equals(e.iface)); } return false; },dbaabc804b3c7e54f51301705981b4a884426563,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,"public int findIndex(java.lang.String iface, int uid, int set, int tag, int metered, int roaming) { for (int i = 0; i < (size); i++) { if ((((((uid == (this.uid[i])) && (set == (this.set[i]))) && (tag == (this.tag[i]))) && (metered == (this.metered[i]))) && (roaming == (this.roaming[i]))) && (java.util.Objects.equals(iface, this.iface[i]))) { return i; } } return -1; }",680a94d01466515de86f425e38569a20b5a5212c,"public int findIndex(java.lang.String iface, int uid, int set, int tag, int defaultNetwork, int metered, int roaming) { for (int i = 0; i < (size); i++) { if (((((((uid == (this.uid[i])) && (set == (this.set[i]))) && (tag == (this.tag[i]))) && (defaultNetwork == (this.defaultNetwork[i]))) && (metered == (this.metered[i]))) && (roaming == (this.roaming[i]))) && (java.util.Objects.equals(iface, this.iface[i]))) { return i; } } return -1; }",aec6806272156bdbe325cc889b91110b220e3c8b,"public int findIndex(java.lang.String iface, int uid, int set, int tag, int metered, int roaming, int defaultNetwork) { for (int i = 0; i < (size); i++) { if (((((((uid == (this.uid[i])) && (set == (this.set[i]))) && (tag == (this.tag[i]))) && (metered == (this.metered[i]))) && (roaming == (this.roaming[i]))) && (defaultNetwork == (this.defaultNetwork[i]))) && (java.util.Objects.equals(iface, this.iface[i]))) { return i; } } return -1; }",2d41adc198d822dd05847e4dbd0d3fc597630c0d,2018-01-19 14:48:51,6
589613,core_java_com_android_internal_net_NetworkStatsFactory.java,"public static void noteStackedIface(java.lang.String stackedIface, java.lang.String baseIface) { synchronized(com.android.internal.net.NetworkStatsFactory.sStackedIfaces) { if (baseIface != null) { com.android.internal.net.NetworkStatsFactory.sStackedIfaces.put(stackedIface, baseIface); } else { com.android.internal.net.NetworkStatsFactory.sStackedIfaces.remove(stackedIface); } } }",cbd149f3f37cb04ccba77a5cc09d13229b7943f2,"public static void noteStackedIface(java.lang.String stackedIface, java.lang.String baseIface) { synchronized(com.android.internal.net.NetworkStatsFactory.sConnectivityServiceLock) { if (baseIface != null) { com.android.internal.net.NetworkStatsFactory.sStackedIfaces.put(stackedIface, baseIface); } else { com.android.internal.net.NetworkStatsFactory.sStackedIfaces.remove(stackedIface); } } }",2febdc6ff141aab3539b49bc6787d4515db574b7,"public static void noteStackedIface(java.lang.String stackedIface, java.lang.String baseIface) { synchronized(com.android.internal.net.NetworkStatsFactory.sStackedIfaces) { if (baseIface != null) { com.android.internal.net.NetworkStatsFactory.sStackedIfaces.put(stackedIface, baseIface); } else { com.android.internal.net.NetworkStatsFactory.sStackedIfaces.remove(stackedIface); } } }",cbd149f3f37cb04ccba77a5cc09d13229b7943f2,2018-01-19 14:48:51,6
589613,services_core_java_com_android_server_net_NetworkStatsCollection.java,"@java.lang.Override public int compareTo(com.android.server.net.NetworkStatsCollection.Key another) { int res = 0; if (((ident) != null) && ((another.ident) != null)) { res = ident.compareTo(another.ident); } if (res == 0) { res = java.lang.Integer.compare(uid, another.uid); } if (res == 0) { res = java.lang.Integer.compare(set, another.set); } if (res == 0) { res = java.lang.Integer.compare(tag, another.tag); } return res; }",e99dd1f8df9824fbf00863894121c2181be63a63,"@java.lang.Override public int compareTo(com.android.server.net.NetworkStatsCollection.Key another) { int res = 0; if (((ident) != null) && ((another.ident) != null)) { res = ident.compareTo(another.ident); } if (res == 0) { res = java.lang.Integer.compare(uid, another.uid); } if (res == 0) { res = java.lang.Integer.compare(set, another.set); } if (res == 0) { res = java.lang.Integer.compare(tag, another.tag); } if (res == 0) { res = java.lang.Integer.compare(defaultNetwork, another.defaultNetwork); } return res; }",4e5ce67a7a0dc9b3432571c35074025a2a3e93e5,"@java.lang.Override public int compareTo(com.android.server.net.NetworkStatsCollection.Key another) { int res = 0; if (((ident) != null) && ((another.ident) != null)) { res = ident.compareTo(another.ident); } if (res == 0) { res = java.lang.Integer.compare(uid, another.uid); } if (res == 0) { res = java.lang.Integer.compare(set, another.set); } if (res == 0) { res = java.lang.Integer.compare(tag, another.tag); } return res; }",e99dd1f8df9824fbf00863894121c2181be63a63,2018-01-19 14:48:51,6
589613,services_core_java_com_android_server_net_NetworkStatsObservers.java,"private long getTotalBytesForNetworkUid(android.net.NetworkTemplate template, int uid) { try { android.net.NetworkStatsHistory history = mCollection.getHistory(template, null, uid, NetworkStats.SET_ALL, NetworkStats.TAG_NONE, NetworkStatsHistory.FIELD_ALL, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, mAccessLevel, mCallingUid); return history.getTotalBytes(); } catch (java.lang.SecurityException e) { if (com.android.server.net.NetworkStatsObservers.LOGV) { android.util.Slog.w(com.android.server.net.NetworkStatsObservers.TAG, (((""CallerUid "" + (mCallingUid)) + "" may have lost access to uid "") + uid)); } return 0; } }",ba41d8d6094cd0826c534dc3a7f20d7ce28fd2a1,"private long getTotalBytesForNetworkUid(android.net.NetworkTemplate template, int uid) { try { android.net.NetworkStatsHistory history = mCollection.getHistory(template, null, uid, NetworkStats.SET_ALL, NetworkStats.TAG_NONE, NetworkStats.DEFAULT_NETWORK_ALL, NetworkStatsHistory.FIELD_ALL, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, mAccessLevel, mCallingUid); return history.getTotalBytes(); } catch (java.lang.SecurityException e) { if (com.android.server.net.NetworkStatsObservers.LOGV) { android.util.Slog.w(com.android.server.net.NetworkStatsObservers.TAG, (((""CallerUid "" + (mCallingUid)) + "" may have lost access to uid "") + uid)); } return 0; } }",7f696e2837e976a86a09209ba1998463b7a31520,"private long getTotalBytesForNetworkUid(android.net.NetworkTemplate template, int uid) { try { android.net.NetworkStatsHistory history = mCollection.getHistory(template, null, uid, NetworkStats.SET_ALL, NetworkStats.TAG_NONE, NetworkStatsHistory.FIELD_ALL, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, mAccessLevel, mCallingUid); return history.getTotalBytes(); } catch (java.lang.SecurityException e) { if (com.android.server.net.NetworkStatsObservers.LOGV) { android.util.Slog.w(com.android.server.net.NetworkStatsObservers.TAG, (((""CallerUid "" + (mCallingUid)) + "" may have lost access to uid "") + uid)); } return 0; } }",ba41d8d6094cd0826c534dc3a7f20d7ce28fd2a1,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStatsHistory.java,"@java.lang.Deprecated public void recordData(long start, long end, long rxBytes, long txBytes) { recordData(start, end, new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, rxBytes, 0L, txBytes, 0L, 0L)); }",3dd38e8fd0caf4381b8899cc67826677483d5a3e,"@java.lang.Deprecated public void recordData(long start, long end, long rxBytes, long txBytes) { recordData(start, end, new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.DEFAULT_NETWORK_ALL, rxBytes, 0L, txBytes, 0L, 0L)); }",f9eae01ef46208279cc407232548c5c4cafebfe0,"@java.lang.Deprecated public void recordData(long start, long end, long rxBytes, long txBytes) { recordData(start, end, new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, rxBytes, 0L, txBytes, 0L, 0L)); }",3dd38e8fd0caf4381b8899cc67826677483d5a3e,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStatsHistory.java,"@java.lang.Deprecated public void generateRandom(long start, long end, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations, java.util.Random r) { ensureBuckets(start, end); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, 0L, 0L, 0L, 0L, 0L); while (((((rxBytes > 1024) || (rxPackets > 128)) || (txBytes > 1024)) || (txPackets > 128)) || (operations > 32)) { final long curStart = android.net.NetworkStatsHistory.randomLong(r, start, end); final long curEnd = curStart + (android.net.NetworkStatsHistory.randomLong(r, 0, ((end - curStart) / 2))); entry.rxBytes = android.net.NetworkStatsHistory.randomLong(r, 0, rxBytes); entry.rxPackets = android.net.NetworkStatsHistory.randomLong(r, 0, rxPackets); entry.txBytes = android.net.NetworkStatsHistory.randomLong(r, 0, txBytes); entry.txPackets = android.net.NetworkStatsHistory.randomLong(r, 0, txPackets); entry.operations = android.net.NetworkStatsHistory.randomLong(r, 0, operations); rxBytes -= entry.rxBytes; rxPackets -= entry.rxPackets; txBytes -= entry.txBytes; txPackets -= entry.txPackets; operations -= entry.operations; recordData(curStart, curEnd, entry); } }",4197b2aeb3bc7743df840cd7449eb0a127e45962,"@java.lang.Deprecated public void generateRandom(long start, long end, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations, java.util.Random r) { ensureBuckets(start, end); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.DEFAULT_NETWORK_ALL, 0L, 0L, 0L, 0L, 0L); while (((((rxBytes > 1024) || (rxPackets > 128)) || (txBytes > 1024)) || (txPackets > 128)) || (operations > 32)) { final long curStart = android.net.NetworkStatsHistory.randomLong(r, start, end); final long curEnd = curStart + (android.net.NetworkStatsHistory.randomLong(r, 0, ((end - curStart) / 2))); entry.rxBytes = android.net.NetworkStatsHistory.randomLong(r, 0, rxBytes); entry.rxPackets = android.net.NetworkStatsHistory.randomLong(r, 0, rxPackets); entry.txBytes = android.net.NetworkStatsHistory.randomLong(r, 0, txBytes); entry.txPackets = android.net.NetworkStatsHistory.randomLong(r, 0, txPackets); entry.operations = android.net.NetworkStatsHistory.randomLong(r, 0, operations); rxBytes -= entry.rxBytes; rxPackets -= entry.rxPackets; txBytes -= entry.txBytes; txPackets -= entry.txPackets; operations -= entry.operations; recordData(curStart, curEnd, entry); } }",746c22d9a29fb5a2448ed53205633849068b8672,"@java.lang.Deprecated public void generateRandom(long start, long end, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations, java.util.Random r) { ensureBuckets(start, end); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, 0L, 0L, 0L, 0L, 0L); while (((((rxBytes > 1024) || (rxPackets > 128)) || (txBytes > 1024)) || (txPackets > 128)) || (operations > 32)) { final long curStart = android.net.NetworkStatsHistory.randomLong(r, start, end); final long curEnd = curStart + (android.net.NetworkStatsHistory.randomLong(r, 0, ((end - curStart) / 2))); entry.rxBytes = android.net.NetworkStatsHistory.randomLong(r, 0, rxBytes); entry.rxPackets = android.net.NetworkStatsHistory.randomLong(r, 0, rxPackets); entry.txBytes = android.net.NetworkStatsHistory.randomLong(r, 0, txBytes); entry.txPackets = android.net.NetworkStatsHistory.randomLong(r, 0, txPackets); entry.operations = android.net.NetworkStatsHistory.randomLong(r, 0, operations); rxBytes -= entry.rxBytes; rxPackets -= entry.rxPackets; txBytes -= entry.txBytes; txPackets -= entry.txPackets; operations -= entry.operations; recordData(curStart, curEnd, entry); } }",4197b2aeb3bc7743df840cd7449eb0a127e45962,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStatsHistory.java,"public void recordHistory(android.net.NetworkStatsHistory input, long start, long end) { final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, 0L, 0L, 0L, 0L, 0L); for (int i = 0; i < (input.bucketCount); i++) { final long bucketStart = input.bucketStart[i]; final long bucketEnd = bucketStart + (input.bucketDuration); if ((bucketStart < start) || (bucketEnd > end)) continue; entry.rxBytes = android.net.NetworkStatsHistory.getLong(input.rxBytes, i, 0L); entry.rxPackets = android.net.NetworkStatsHistory.getLong(input.rxPackets, i, 0L); entry.txBytes = android.net.NetworkStatsHistory.getLong(input.txBytes, i, 0L); entry.txPackets = android.net.NetworkStatsHistory.getLong(input.txPackets, i, 0L); entry.operations = android.net.NetworkStatsHistory.getLong(input.operations, i, 0L); recordData(bucketStart, bucketEnd, entry); } }",626899935a44a14db658f2af5d291fcfa779f0ab,"public void recordHistory(android.net.NetworkStatsHistory input, long start, long end) { final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.DEFAULT_NETWORK_ALL, 0L, 0L, 0L, 0L, 0L); for (int i = 0; i < (input.bucketCount); i++) { final long bucketStart = input.bucketStart[i]; final long bucketEnd = bucketStart + (input.bucketDuration); if ((bucketStart < start) || (bucketEnd > end)) continue; entry.rxBytes = android.net.NetworkStatsHistory.getLong(input.rxBytes, i, 0L); entry.rxPackets = android.net.NetworkStatsHistory.getLong(input.rxPackets, i, 0L); entry.txBytes = android.net.NetworkStatsHistory.getLong(input.txBytes, i, 0L); entry.txPackets = android.net.NetworkStatsHistory.getLong(input.txPackets, i, 0L); entry.operations = android.net.NetworkStatsHistory.getLong(input.operations, i, 0L); recordData(bucketStart, bucketEnd, entry); } }",f0b8ca8927601c9b4636b65822886d5d5f246e9b,"public void recordHistory(android.net.NetworkStatsHistory input, long start, long end) { final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, 0L, 0L, 0L, 0L, 0L); for (int i = 0; i < (input.bucketCount); i++) { final long bucketStart = input.bucketStart[i]; final long bucketEnd = bucketStart + (input.bucketDuration); if ((bucketStart < start) || (bucketEnd > end)) continue; entry.rxBytes = android.net.NetworkStatsHistory.getLong(input.rxBytes, i, 0L); entry.rxPackets = android.net.NetworkStatsHistory.getLong(input.rxPackets, i, 0L); entry.txBytes = android.net.NetworkStatsHistory.getLong(input.txBytes, i, 0L); entry.txPackets = android.net.NetworkStatsHistory.getLong(input.txPackets, i, 0L); entry.operations = android.net.NetworkStatsHistory.getLong(input.operations, i, 0L); recordData(bucketStart, bucketEnd, entry); } }",626899935a44a14db658f2af5d291fcfa779f0ab,2018-01-19 14:48:51,6
589613,services_core_java_com_android_server_net_NetworkStatsService.java,"private android.net.NetworkStats internalGetSummaryForNetwork(android.net.NetworkTemplate template, int flags, long start, long end, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callingUid) { final android.net.NetworkStatsHistory history = internalGetHistoryForNetwork(template, flags, android.net.NetworkStatsHistory.FIELD_ALL, accessLevel, callingUid); final long now = java.lang.System.currentTimeMillis(); final android.net.NetworkStatsHistory.Entry entry = history.getValues(start, end, now, null); final android.net.NetworkStats stats = new android.net.NetworkStats((end - start), 1); stats.addValues(new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_ALL, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_ALL, android.net.NetworkStats.ROAMING_ALL, entry.rxBytes, entry.rxPackets, entry.txBytes, entry.txPackets, entry.operations)); return stats; }",f05b4d3228618993d8e04400bb8834094d6a6873,"private android.net.NetworkStats internalGetSummaryForNetwork(android.net.NetworkTemplate template, int flags, long start, long end, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callingUid) { final android.net.NetworkStatsHistory history = internalGetHistoryForNetwork(template, flags, android.net.NetworkStatsHistory.FIELD_ALL, accessLevel, callingUid); final long now = java.lang.System.currentTimeMillis(); final android.net.NetworkStatsHistory.Entry entry = history.getValues(start, end, now, null); final android.net.NetworkStats stats = new android.net.NetworkStats((end - start), 1); stats.addValues(new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_ALL, android.net.NetworkStats.DEFAULT_NETWORK_ALL, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_ALL, android.net.NetworkStats.ROAMING_ALL, entry.rxBytes, entry.rxPackets, entry.txBytes, entry.txPackets, entry.operations)); return stats; }",e43a32e7e91aaeee9e146711cea03b33468969b3,"private android.net.NetworkStats internalGetSummaryForNetwork(android.net.NetworkTemplate template, int flags, long start, long end, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callingUid) { final android.net.NetworkStatsHistory history = internalGetHistoryForNetwork(template, flags, android.net.NetworkStatsHistory.FIELD_ALL, accessLevel, callingUid); final long now = java.lang.System.currentTimeMillis(); final android.net.NetworkStatsHistory.Entry entry = history.getValues(start, end, now, null); final android.net.NetworkStats stats = new android.net.NetworkStats((end - start), 1); stats.addValues(new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_ALL, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_ALL, android.net.NetworkStats.ROAMING_ALL, android.net.NetworkStats.DEFAULT_NETWORK_ALL, entry.rxBytes, entry.rxPackets, entry.txBytes, entry.txPackets, entry.operations)); return stats; }",86897034bf40974434a42f1d7dd07f81bdb1a3b9,2018-01-19 14:48:51,6
589613,services_core_java_com_android_server_net_NetworkStatsService.java,"@java.lang.Override public android.net.NetworkStatsHistory getHistoryForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidComplete().getHistory(template, null, uid, set, tag, fields, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, mAccessLevel, mCallingUid); } else { return getUidTagComplete().getHistory(template, null, uid, set, tag, fields, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, mAccessLevel, mCallingUid); } }",8f4922fced9f7f3073620755dfdd8c185b7c078f,"@java.lang.Override public android.net.NetworkStatsHistory getHistoryForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidComplete().getHistory(template, null, uid, set, tag, android.net.NetworkStats.DEFAULT_NETWORK_ALL, fields, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, mAccessLevel, mCallingUid); } else { return getUidTagComplete().getHistory(template, null, uid, set, tag, android.net.NetworkStats.DEFAULT_NETWORK_ALL, fields, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, mAccessLevel, mCallingUid); } }",780a4ea77e1f706ba5506e533ca3d1d39bcd1c6b,"@java.lang.Override public android.net.NetworkStatsHistory getHistoryForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidComplete().getHistory(template, null, uid, set, tag, fields, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, mAccessLevel, mCallingUid); } else { return getUidTagComplete().getHistory(template, null, uid, set, tag, fields, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, mAccessLevel, mCallingUid); } }",8f4922fced9f7f3073620755dfdd8c185b7c078f,2018-01-19 14:48:51,6
589613,services_core_java_com_android_server_net_NetworkStatsService.java,"@java.lang.Override public android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields, long start, long end) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidComplete().getHistory(template, null, uid, set, tag, fields, start, end, mAccessLevel, mCallingUid); } else if (uid == (android.os.Binder.getCallingUid())) { return getUidTagComplete().getHistory(template, null, uid, set, tag, fields, start, end, mAccessLevel, mCallingUid); } else { throw new java.lang.SecurityException(((""Calling package "" + (mCallingPackage)) + "" cannot access tag information from a different uid"")); } }",169258c00842e9c0c01683bd72d7cad9ad083cc1,"@java.lang.Override public android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields, long start, long end) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidComplete().getHistory(template, null, uid, set, tag, android.net.NetworkStats.DEFAULT_NETWORK_ALL, fields, start, end, mAccessLevel, mCallingUid); } else if (uid == (android.os.Binder.getCallingUid())) { return getUidTagComplete().getHistory(template, null, uid, set, tag, android.net.NetworkStats.DEFAULT_NETWORK_ALL, fields, start, end, mAccessLevel, mCallingUid); } else { throw new java.lang.SecurityException(((""Calling package "" + (mCallingPackage)) + "" cannot access tag information from a different uid"")); } }",157d8af33b06733ad857e2b540b44a5c9d81b8a2,"@java.lang.Override public android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields, long start, long end) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidComplete().getHistory(template, null, uid, set, tag, fields, start, end, mAccessLevel, mCallingUid); } else if (uid == (android.os.Binder.getCallingUid())) { return getUidTagComplete().getHistory(template, null, uid, set, tag, fields, start, end, mAccessLevel, mCallingUid); } else { throw new java.lang.SecurityException(((""Calling package "" + (mCallingPackage)) + "" cannot access tag information from a different uid"")); } }",169258c00842e9c0c01683bd72d7cad9ad083cc1,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,"@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int set, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, rxBytes, rxPackets, txBytes, txPackets, operations)); }",9d7029067cd237b37bcde556ce9ff865d47896fb,"@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int set, int tag, int defaultNetwork, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, defaultNetwork, rxBytes, rxPackets, txBytes, txPackets, operations)); }",a25f26408927f6f07b0f91dc96301e11f10207c9,"@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int set, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, rxBytes, rxPackets, txBytes, txPackets, operations)); }",9d7029067cd237b37bcde556ce9ff865d47896fb,2018-01-19 14:48:51,6
589613,services_core_java_com_android_server_net_NetworkStatsService.java,"private android.net.NetworkStatsHistory internalGetHistoryForNetwork(android.net.NetworkTemplate template, int flags, int fields, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callingUid) { final android.telephony.SubscriptionPlan augmentPlan = resolveSubscriptionPlan(template, flags); synchronized(mStatsLock) { return mXtStatsCached.getHistory(template, augmentPlan, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_ALL, android.net.NetworkStats.TAG_NONE, fields, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, accessLevel, callingUid); } }",5aa92343abd8b1700090947d42d01ebd13684b78,"private android.net.NetworkStatsHistory internalGetHistoryForNetwork(android.net.NetworkTemplate template, int flags, int fields, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callingUid) { final android.telephony.SubscriptionPlan augmentPlan = resolveSubscriptionPlan(template, flags); synchronized(mStatsLock) { return mXtStatsCached.getHistory(template, augmentPlan, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_ALL, android.net.NetworkStats.DEFAULT_NETWORK_ALL, android.net.NetworkStats.TAG_NONE, fields, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, accessLevel, callingUid); } }",58cbccc81dd86e55ba8ada847742bc46bc85c4cb,"private android.net.NetworkStatsHistory internalGetHistoryForNetwork(android.net.NetworkTemplate template, int flags, int fields, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callingUid) { final android.telephony.SubscriptionPlan augmentPlan = resolveSubscriptionPlan(template, flags); synchronized(mStatsLock) { return mXtStatsCached.getHistory(template, augmentPlan, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_ALL, android.net.NetworkStats.TAG_NONE, fields, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, accessLevel, callingUid); } }",5aa92343abd8b1700090947d42d01ebd13684b78,2018-01-19 14:48:51,6
593074,core_java_android_net_NetworkIdentity.java,"public void writeToProto(android.util.proto.ProtoOutputStream proto, long tag) { final long start = proto.start(tag); proto.write(NetworkIdentityProto.TYPE, mType); if ((mSubscriberId) != null) { proto.write(NetworkIdentityProto.SUBSCRIBER_ID, android.net.NetworkIdentity.scrubSubscriberId(mSubscriberId)); } proto.write(NetworkIdentityProto.NETWORK_ID, mNetworkId); proto.write(NetworkIdentityProto.ROAMING, mRoaming); proto.write(NetworkIdentityProto.METERED, mMetered); proto.end(start); }",55cc6fcb4e0a9db9afb64290a10414d3b1a3ea08,"public void writeToProto(android.util.proto.ProtoOutputStream proto, long tag) { final long start = proto.start(tag); proto.write(NetworkIdentityProto.TYPE, mType); if ((mSubscriberId) != null) { proto.write(NetworkIdentityProto.SUBSCRIBER_ID, android.net.NetworkIdentity.scrubSubscriberId(mSubscriberId)); } proto.write(NetworkIdentityProto.NETWORK_ID, mNetworkId); proto.write(NetworkIdentityProto.ROAMING, mRoaming); proto.write(NetworkIdentityProto.METERED, mMetered); proto.write(NetworkIdentityProto.DEFAULT_NETWORK, mDefaultNetwork); proto.end(start); }",5de65563afa7ce6190d863f71f8ece97b82b3220,"public void writeToProto(android.util.proto.ProtoOutputStream proto, long tag) { final long start = proto.start(tag); proto.write(NetworkIdentityProto.TYPE, mType); if ((mSubscriberId) != null) { proto.write(NetworkIdentityProto.SUBSCRIBER_ID, android.net.NetworkIdentity.scrubSubscriberId(mSubscriberId)); } proto.write(NetworkIdentityProto.NETWORK_ID, mNetworkId); proto.write(NetworkIdentityProto.ROAMING, mRoaming); proto.write(NetworkIdentityProto.METERED, mMetered); proto.end(start); }",55cc6fcb4e0a9db9afb64290a10414d3b1a3ea08,2018-01-19 14:48:51,5
589613,services_core_java_com_android_server_net_NetworkStatsService.java,"@java.lang.Override public void incrementOperationCount(int uid, int tag, int operationCount) { if ((android.os.Binder.getCallingUid()) != uid) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.UPDATE_DEVICE_STATS, com.android.server.net.NetworkStatsService.TAG); } if (operationCount < 0) { throw new java.lang.IllegalArgumentException(""operation count can only be incremented""); } if (tag == (android.net.NetworkStats.TAG_NONE)) { throw new java.lang.IllegalArgumentException(""operation count must have specific tag""); } synchronized(mStatsLock) { final int set = mActiveUidCounterSet.get(uid, android.net.NetworkStats.SET_DEFAULT); mUidOperations.combineValues(mActiveIface, uid, set, tag, 0L, 0L, 0L, 0L, operationCount); mUidOperations.combineValues(mActiveIface, uid, set, android.net.NetworkStats.TAG_NONE, 0L, 0L, 0L, 0L, operationCount); } }",378348f5708f9bc27ef625a95124b85817357459,"@java.lang.Override public void incrementOperationCount(int uid, int tag, int operationCount) { if ((android.os.Binder.getCallingUid()) != uid) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.UPDATE_DEVICE_STATS, com.android.server.net.NetworkStatsService.TAG); } if (operationCount < 0) { throw new java.lang.IllegalArgumentException(""operation count can only be incremented""); } if (tag == (android.net.NetworkStats.TAG_NONE)) { throw new java.lang.IllegalArgumentException(""operation count must have specific tag""); } synchronized(mStatsLock) { final int set = mActiveUidCounterSet.get(uid, android.net.NetworkStats.SET_DEFAULT); mUidOperations.combineValues(mActiveIface, uid, set, tag, android.net.NetworkStats.DEFAULT_NETWORK_YES, 0L, 0L, 0L, 0L, operationCount); mUidOperations.combineValues(mActiveIface, uid, set, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.DEFAULT_NETWORK_YES, 0L, 0L, 0L, 0L, operationCount); } }",c697eae5e50dec502af50921828ef9802e272085,"@java.lang.Override public void incrementOperationCount(int uid, int tag, int operationCount) { if ((android.os.Binder.getCallingUid()) != uid) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.UPDATE_DEVICE_STATS, com.android.server.net.NetworkStatsService.TAG); } if (operationCount < 0) { throw new java.lang.IllegalArgumentException(""operation count can only be incremented""); } if (tag == (android.net.NetworkStats.TAG_NONE)) { throw new java.lang.IllegalArgumentException(""operation count must have specific tag""); } synchronized(mStatsLock) { final int set = mActiveUidCounterSet.get(uid, android.net.NetworkStats.SET_DEFAULT); mUidOperations.combineValues(mActiveIface, uid, set, tag, 0L, 0L, 0L, 0L, operationCount); mUidOperations.combineValues(mActiveIface, uid, set, android.net.NetworkStats.TAG_NONE, 0L, 0L, 0L, 0L, operationCount); } }",378348f5708f9bc27ef625a95124b85817357459,2018-01-19 14:48:51,6
589613,services_core_java_com_android_server_net_NetworkStatsCollection.java,"@java.lang.Override public boolean equals(java.lang.Object obj) { if (obj instanceof com.android.server.net.NetworkStatsCollection.Key) { final com.android.server.net.NetworkStatsCollection.Key key = ((com.android.server.net.NetworkStatsCollection.Key) (obj)); return ((((uid) == (key.uid)) && ((set) == (key.set))) && ((tag) == (key.tag))) && (java.util.Objects.equals(ident, key.ident)); } return false; }",f11af4ffb6359c7322a0a121451170ca830da2d7,"@java.lang.Override public boolean equals(java.lang.Object obj) { if (obj instanceof com.android.server.net.NetworkStatsCollection.Key) { final com.android.server.net.NetworkStatsCollection.Key key = ((com.android.server.net.NetworkStatsCollection.Key) (obj)); return (((((uid) == (key.uid)) && ((set) == (key.set))) && ((tag) == (key.tag))) && ((defaultNetwork) == (key.defaultNetwork))) && (java.util.Objects.equals(ident, key.ident)); } return false; }",65aa19e8f3e300ddf81febf61a19d723d8346c43,"@java.lang.Override public boolean equals(java.lang.Object obj) { if (obj instanceof com.android.server.net.NetworkStatsCollection.Key) { final com.android.server.net.NetworkStatsCollection.Key key = ((com.android.server.net.NetworkStatsCollection.Key) (obj)); return ((((uid) == (key.uid)) && ((set) == (key.set))) && ((tag) == (key.tag))) && (java.util.Objects.equals(ident, key.ident)); } return false; }",f11af4ffb6359c7322a0a121451170ca830da2d7,2018-01-19 14:48:51,6
589613,core_java_android_net_NetworkStats.java,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(elapsedRealtime); dest.writeInt(size); dest.writeInt(capacity); dest.writeStringArray(iface); dest.writeIntArray(uid); dest.writeIntArray(set); dest.writeIntArray(tag); dest.writeIntArray(metered); dest.writeIntArray(roaming); dest.writeLongArray(rxBytes); dest.writeLongArray(rxPackets); dest.writeLongArray(txBytes); dest.writeLongArray(txPackets); dest.writeLongArray(operations); }",f647668c7aeb9d8dae586fedb78d66e37b1dc464,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(elapsedRealtime); dest.writeInt(size); dest.writeInt(capacity); dest.writeStringArray(iface); dest.writeIntArray(uid); dest.writeIntArray(set); dest.writeIntArray(tag); dest.writeIntArray(defaultNetwork); dest.writeIntArray(metered); dest.writeIntArray(roaming); dest.writeLongArray(rxBytes); dest.writeLongArray(rxPackets); dest.writeLongArray(txBytes); dest.writeLongArray(txPackets); dest.writeLongArray(operations); }",a2e9f9b1dff0bf90a2f5b73fb724f9a81f510644,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(elapsedRealtime); dest.writeInt(size); dest.writeInt(capacity); dest.writeStringArray(iface); dest.writeIntArray(uid); dest.writeIntArray(set); dest.writeIntArray(tag); dest.writeIntArray(metered); dest.writeIntArray(roaming); dest.writeIntArray(defaultNetwork); dest.writeLongArray(rxBytes); dest.writeLongArray(rxPackets); dest.writeLongArray(txBytes); dest.writeLongArray(txPackets); dest.writeLongArray(operations); }",cf343b1428cb68550a4c52494983428761f1fbd3,2018-01-19 14:48:51,6
589613,services_core_java_com_android_server_net_NetworkStatsCollection.java,"public void dump(com.android.internal.util.IndentingPrintWriter pw) { for (com.android.server.net.NetworkStatsCollection.Key key : getSortedKeys()) { pw.print(""ident=""); pw.print(key.ident.toString()); pw.print("" uid=""); pw.print(key.uid); pw.print("" set=""); pw.print(android.net.NetworkStats.setToString(key.set)); pw.print("" tag=""); pw.println(android.net.NetworkStats.tagToString(key.tag)); final android.net.NetworkStatsHistory history = mStats.get(key); pw.increaseIndent(); history.dump(pw, true); pw.decreaseIndent(); } }",777c13a38338cb9c17da3059fd0fdc28e9c1441b,"public void dump(com.android.internal.util.IndentingPrintWriter pw) { for (com.android.server.net.NetworkStatsCollection.Key key : getSortedKeys()) { pw.print(""ident=""); pw.print(key.ident.toString()); pw.print("" uid=""); pw.print(key.uid); pw.print("" set=""); pw.print(android.net.NetworkStats.setToString(key.set)); pw.print("" tag=""); pw.print(android.net.NetworkStats.tagToString(key.tag)); pw.print("" defaultNetwork=""); pw.println(android.net.NetworkStats.defaultNetworkToString(key.defaultNetwork)); final android.net.NetworkStatsHistory history = mStats.get(key); pw.increaseIndent(); history.dump(pw, true); pw.decreaseIndent(); } }",e5d3f93b78741232142bc4c11bdd21a8ac386022,"public void dump(com.android.internal.util.IndentingPrintWriter pw) { for (com.android.server.net.NetworkStatsCollection.Key key : getSortedKeys()) { pw.print(""ident=""); pw.print(key.ident.toString()); pw.print("" uid=""); pw.print(key.uid); pw.print("" set=""); pw.print(android.net.NetworkStats.setToString(key.set)); pw.print("" tag=""); pw.println(android.net.NetworkStats.tagToString(key.tag)); final android.net.NetworkStatsHistory history = mStats.get(key); pw.increaseIndent(); history.dump(pw, true); pw.decreaseIndent(); } }",777c13a38338cb9c17da3059fd0fdc28e9c1441b,2018-01-19 14:48:51,6
589613,services_core_java_com_android_server_net_NetworkStatsCollection.java,"public void recordData(com.android.server.net.NetworkIdentitySet ident, int uid, int set, int tag, long start, long end, android.net.NetworkStats.Entry entry) { final android.net.NetworkStatsHistory history = findOrCreateHistory(ident, uid, set, tag); history.recordData(start, end, entry); noteRecordedHistory(history.getStart(), history.getEnd(), ((entry.rxBytes) + (entry.txBytes))); }",9b1f6ded2d166f1dc033daf2753c7c6aa27509c0,"public void recordData(com.android.server.net.NetworkIdentitySet ident, int uid, int set, int tag, int defaultNetwork, long start, long end, android.net.NetworkStats.Entry entry) { final android.net.NetworkStatsHistory history = findOrCreateHistory(ident, uid, set, tag, defaultNetwork); history.recordData(start, end, entry); noteRecordedHistory(history.getStart(), history.getEnd(), ((entry.rxBytes) + (entry.txBytes))); }",b513f4f2f576757af07ec0f01b0ad12d1353edd5,"public void recordData(com.android.server.net.NetworkIdentitySet ident, int uid, int set, int tag, long start, long end, android.net.NetworkStats.Entry entry) { final android.net.NetworkStatsHistory history = findOrCreateHistory(ident, uid, set, tag); history.recordData(start, end, entry); noteRecordedHistory(history.getStart(), history.getEnd(), ((entry.rxBytes) + (entry.txBytes))); }",9b1f6ded2d166f1dc033daf2753c7c6aa27509c0,2018-01-19 14:48:51,6
589613,services_core_java_com_android_server_net_NetworkStatsCollection.java,"@java.lang.Deprecated public void readLegacyNetwork(java.io.File file) throws java.io.IOException { final android.util.AtomicFile inputFile = new android.util.AtomicFile(file); java.io.DataInputStream in = null; try { in = new java.io.DataInputStream(new java.io.BufferedInputStream(inputFile.openRead())); final int magic = in.readInt(); if (magic != (com.android.server.net.NetworkStatsCollection.FILE_MAGIC)) { throw new java.net.ProtocolException((""unexpected magic: "" + magic)); } final int version = in.readInt(); switch (version) { case com.android.server.net.NetworkStatsCollection.VERSION_NETWORK_INIT : { final int size = in.readInt(); for (int i = 0; i < size; i++) { final com.android.server.net.NetworkIdentitySet ident = new com.android.server.net.NetworkIdentitySet(in); final android.net.NetworkStatsHistory history = new android.net.NetworkStatsHistory(in); final com.android.server.net.NetworkStatsCollection.Key key = new com.android.server.net.NetworkStatsCollection.Key(ident, UID_ALL, SET_ALL, TAG_NONE); recordHistory(key, history); } break; } default : { throw new java.net.ProtocolException((""unexpected version: "" + version)); } } } catch (java.io.FileNotFoundException e) { } finally { libcore.io.IoUtils.closeQuietly(in); } }",0e28907b4cf78ee46e84ed648904cfa95cb39c4a,"@java.lang.Deprecated public void readLegacyNetwork(java.io.File file) throws java.io.IOException { final android.util.AtomicFile inputFile = new android.util.AtomicFile(file); java.io.DataInputStream in = null; try { in = new java.io.DataInputStream(new java.io.BufferedInputStream(inputFile.openRead())); final int magic = in.readInt(); if (magic != (com.android.server.net.NetworkStatsCollection.FILE_MAGIC)) { throw new java.net.ProtocolException((""unexpected magic: "" + magic)); } final int version = in.readInt(); switch (version) { case com.android.server.net.NetworkStatsCollection.VERSION_NETWORK_INIT : { final int size = in.readInt(); for (int i = 0; i < size; i++) { final com.android.server.net.NetworkIdentitySet ident = new com.android.server.net.NetworkIdentitySet(in); final android.net.NetworkStatsHistory history = new android.net.NetworkStatsHistory(in); final com.android.server.net.NetworkStatsCollection.Key key = new com.android.server.net.NetworkStatsCollection.Key(ident, UID_ALL, SET_ALL, TAG_NONE, DEFAULT_NETWORK_ALL); recordHistory(key, history); } break; } default : { throw new java.net.ProtocolException((""unexpected version: "" + version)); } } } catch (java.io.FileNotFoundException e) { } finally { libcore.io.IoUtils.closeQuietly(in); } }",f71e54043ddff042223f292e8fbc1a02fc326b34,"@java.lang.Deprecated public void readLegacyNetwork(java.io.File file) throws java.io.IOException { final android.util.AtomicFile inputFile = new android.util.AtomicFile(file); java.io.DataInputStream in = null; try { in = new java.io.DataInputStream(new java.io.BufferedInputStream(inputFile.openRead())); final int magic = in.readInt(); if (magic != (com.android.server.net.NetworkStatsCollection.FILE_MAGIC)) { throw new java.net.ProtocolException((""unexpected magic: "" + magic)); } final int version = in.readInt(); switch (version) { case com.android.server.net.NetworkStatsCollection.VERSION_NETWORK_INIT : { final int size = in.readInt(); for (int i = 0; i < size; i++) { final com.android.server.net.NetworkIdentitySet ident = new com.android.server.net.NetworkIdentitySet(in); final android.net.NetworkStatsHistory history = new android.net.NetworkStatsHistory(in); final com.android.server.net.NetworkStatsCollection.Key key = new com.android.server.net.NetworkStatsCollection.Key(ident, UID_ALL, SET_ALL, TAG_NONE); recordHistory(key, history); } break; } default : { throw new java.net.ProtocolException((""unexpected version: "" + version)); } } } catch (java.io.FileNotFoundException e) { } finally { libcore.io.IoUtils.closeQuietly(in); } }",0e28907b4cf78ee46e84ed648904cfa95cb39c4a,2018-01-19 14:48:51,6
589613,services_core_java_com_android_server_net_NetworkStatsCollection.java,"private android.net.NetworkStatsHistory findOrCreateHistory(com.android.server.net.NetworkIdentitySet ident, int uid, int set, int tag) { final com.android.server.net.NetworkStatsCollection.Key key = new com.android.server.net.NetworkStatsCollection.Key(ident, uid, set, tag); final android.net.NetworkStatsHistory existing = mStats.get(key); android.net.NetworkStatsHistory updated = null; if (existing == null) { updated = new android.net.NetworkStatsHistory(mBucketDuration, 10); } else if ((existing.getBucketDuration()) != (mBucketDuration)) { updated = new android.net.NetworkStatsHistory(existing, mBucketDuration); } if (updated != null) { mStats.put(key, updated); return updated; } else { return existing; } }",b4b2b0a3bbd612ee266c64e3e68e2e44e883b338,"private android.net.NetworkStatsHistory findOrCreateHistory(com.android.server.net.NetworkIdentitySet ident, int uid, int set, int tag, int defaultNetwork) { final com.android.server.net.NetworkStatsCollection.Key key = new com.android.server.net.NetworkStatsCollection.Key(ident, uid, set, tag, defaultNetwork); final android.net.NetworkStatsHistory existing = mStats.get(key); android.net.NetworkStatsHistory updated = null; if (existing == null) { updated = new android.net.NetworkStatsHistory(mBucketDuration, 10); } else if ((existing.getBucketDuration()) != (mBucketDuration)) { updated = new android.net.NetworkStatsHistory(existing, mBucketDuration); } if (updated != null) { mStats.put(key, updated); return updated; } else { return existing; } }",ac45041a0d0b80aec6c603e0ff148b0b2be31851,"private android.net.NetworkStatsHistory findOrCreateHistory(com.android.server.net.NetworkIdentitySet ident, int uid, int set, int tag) { final com.android.server.net.NetworkStatsCollection.Key key = new com.android.server.net.NetworkStatsCollection.Key(ident, uid, set, tag); final android.net.NetworkStatsHistory existing = mStats.get(key); android.net.NetworkStatsHistory updated = null; if (existing == null) { updated = new android.net.NetworkStatsHistory(mBucketDuration, 10); } else if ((existing.getBucketDuration()) != (mBucketDuration)) { updated = new android.net.NetworkStatsHistory(existing, mBucketDuration); } if (updated != null) { mStats.put(key, updated); return updated; } else { return existing; } }",b4b2b0a3bbd612ee266c64e3e68e2e44e883b338,2018-01-19 14:48:51,6
589613,services_core_java_com_android_server_net_NetworkStatsCollection.java,"private void dumpCheckin(java.io.PrintWriter pw, long start, long end, android.net.NetworkTemplate groupTemplate, java.lang.String groupPrefix) { final android.util.ArrayMap<com.android.server.net.NetworkStatsCollection.Key, android.net.NetworkStatsHistory> grouped = new android.util.ArrayMap(); for (int i = 0; i < (mStats.size()); i++) { final com.android.server.net.NetworkStatsCollection.Key key = mStats.keyAt(i); final android.net.NetworkStatsHistory value = mStats.valueAt(i); if (!(com.android.server.net.NetworkStatsCollection.templateMatches(groupTemplate, key.ident))) continue; if ((key.set) >= (android.net.NetworkStats.SET_DEBUG_START)) continue; final com.android.server.net.NetworkStatsCollection.Key groupKey = new com.android.server.net.NetworkStatsCollection.Key(null, key.uid, key.set, key.tag); android.net.NetworkStatsHistory groupHistory = grouped.get(groupKey); if (groupHistory == null) { groupHistory = new android.net.NetworkStatsHistory(value.getBucketDuration()); grouped.put(groupKey, groupHistory); } groupHistory.recordHistory(value, start, end); } for (int i = 0; i < (grouped.size()); i++) { final com.android.server.net.NetworkStatsCollection.Key key = grouped.keyAt(i); final android.net.NetworkStatsHistory value = grouped.valueAt(i); if ((value.size()) == 0) continue; pw.print(""c,""); pw.print(groupPrefix); pw.print(','); pw.print(key.uid); pw.print(','); pw.print(android.net.NetworkStats.setToCheckinString(key.set)); pw.print(','); pw.print(key.tag); pw.println(); value.dumpCheckin(pw); } }",c7087fbb59de90cc8f6ac91ebdaa2cd5d1bb026f,"private void dumpCheckin(java.io.PrintWriter pw, long start, long end, android.net.NetworkTemplate groupTemplate, java.lang.String groupPrefix) { final android.util.ArrayMap<com.android.server.net.NetworkStatsCollection.Key, android.net.NetworkStatsHistory> grouped = new android.util.ArrayMap(); for (int i = 0; i < (mStats.size()); i++) { final com.android.server.net.NetworkStatsCollection.Key key = mStats.keyAt(i); final android.net.NetworkStatsHistory value = mStats.valueAt(i); if (!(com.android.server.net.NetworkStatsCollection.templateMatches(groupTemplate, key.ident))) continue; if ((key.set) >= (android.net.NetworkStats.SET_DEBUG_START)) continue; final com.android.server.net.NetworkStatsCollection.Key groupKey = new com.android.server.net.NetworkStatsCollection.Key(null, key.uid, key.set, key.tag, key.defaultNetwork); android.net.NetworkStatsHistory groupHistory = grouped.get(groupKey); if (groupHistory == null) { groupHistory = new android.net.NetworkStatsHistory(value.getBucketDuration()); grouped.put(groupKey, groupHistory); } groupHistory.recordHistory(value, start, end); } for (int i = 0; i < (grouped.size()); i++) { final com.android.server.net.NetworkStatsCollection.Key key = grouped.keyAt(i); final android.net.NetworkStatsHistory value = grouped.valueAt(i); if ((value.size()) == 0) continue; pw.print(""c,""); pw.print(groupPrefix); pw.print(','); pw.print(key.uid); pw.print(','); pw.print(android.net.NetworkStats.setToCheckinString(key.set)); pw.print(','); pw.print(key.tag); pw.println(); value.dumpCheckin(pw); } }",a6d96491a684409554cb51021a058e1c732d378d,"private void dumpCheckin(java.io.PrintWriter pw, long start, long end, android.net.NetworkTemplate groupTemplate, java.lang.String groupPrefix) { final android.util.ArrayMap<com.android.server.net.NetworkStatsCollection.Key, android.net.NetworkStatsHistory> grouped = new android.util.ArrayMap(); for (int i = 0; i < (mStats.size()); i++) { final com.android.server.net.NetworkStatsCollection.Key key = mStats.keyAt(i); final android.net.NetworkStatsHistory value = mStats.valueAt(i); if (!(com.android.server.net.NetworkStatsCollection.templateMatches(groupTemplate, key.ident))) continue; if ((key.set) >= (android.net.NetworkStats.SET_DEBUG_START)) continue; final com.android.server.net.NetworkStatsCollection.Key groupKey = new com.android.server.net.NetworkStatsCollection.Key(null, key.uid, key.set, key.tag); android.net.NetworkStatsHistory groupHistory = grouped.get(groupKey); if (groupHistory == null) { groupHistory = new android.net.NetworkStatsHistory(value.getBucketDuration()); grouped.put(groupKey, groupHistory); } groupHistory.recordHistory(value, start, end); } for (int i = 0; i < (grouped.size()); i++) { final com.android.server.net.NetworkStatsCollection.Key key = grouped.keyAt(i); final android.net.NetworkStatsHistory value = grouped.valueAt(i); if ((value.size()) == 0) continue; pw.print(""c,""); pw.print(groupPrefix); pw.print(','); pw.print(key.uid); pw.print(','); pw.print(android.net.NetworkStats.setToCheckinString(key.set)); pw.print(','); pw.print(key.tag); pw.println(); value.dumpCheckin(pw); } }",c7087fbb59de90cc8f6ac91ebdaa2cd5d1bb026f,2018-01-19 14:48:51,6
589613,services_core_java_com_android_server_net_NetworkStatsCollection.java,"public void write(java.io.DataOutputStream out) throws java.io.IOException { final java.util.HashMap<com.android.server.net.NetworkIdentitySet, java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key>> keysByIdent = com.google.android.collect.Maps.newHashMap(); for (com.android.server.net.NetworkStatsCollection.Key key : mStats.keySet()) { java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(key.ident); if (keys == null) { keys = com.google.android.collect.Lists.newArrayList(); keysByIdent.put(key.ident, keys); } keys.add(key); } out.writeInt(com.android.server.net.NetworkStatsCollection.FILE_MAGIC); out.writeInt(com.android.server.net.NetworkStatsCollection.VERSION_UNIFIED_INIT); out.writeInt(keysByIdent.size()); for (com.android.server.net.NetworkIdentitySet ident : keysByIdent.keySet()) { final java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(ident); ident.writeToStream(out); out.writeInt(keys.size()); for (com.android.server.net.NetworkStatsCollection.Key key : keys) { final android.net.NetworkStatsHistory history = mStats.get(key); out.writeInt(key.uid); out.writeInt(key.set); out.writeInt(key.tag); history.writeToStream(out); } } out.flush(); }",aa4b32d3bd5b72f6e57ce68f98e887b8569fb158,"public void write(java.io.DataOutputStream out) throws java.io.IOException { final java.util.HashMap<com.android.server.net.NetworkIdentitySet, java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key>> keysByIdent = com.google.android.collect.Maps.newHashMap(); for (com.android.server.net.NetworkStatsCollection.Key key : mStats.keySet()) { java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(key.ident); if (keys == null) { keys = com.google.android.collect.Lists.newArrayList(); keysByIdent.put(key.ident, keys); } keys.add(key); } out.writeInt(com.android.server.net.NetworkStatsCollection.FILE_MAGIC); out.writeInt(com.android.server.net.NetworkStatsCollection.VERSION_WITH_DEFAULT_NETWORK); out.writeInt(keysByIdent.size()); for (com.android.server.net.NetworkIdentitySet ident : keysByIdent.keySet()) { final java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(ident); ident.writeToStream(out); out.writeInt(keys.size()); for (com.android.server.net.NetworkStatsCollection.Key key : keys) { final android.net.NetworkStatsHistory history = mStats.get(key); out.writeInt(key.uid); out.writeInt(key.set); out.writeInt(key.tag); out.writeInt(key.defaultNetwork); history.writeToStream(out); } } out.flush(); }",a6788ae3195f2fb0a07628d23a9512643ada8edb,"public void write(java.io.DataOutputStream out) throws java.io.IOException { final java.util.HashMap<com.android.server.net.NetworkIdentitySet, java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key>> keysByIdent = com.google.android.collect.Maps.newHashMap(); for (com.android.server.net.NetworkStatsCollection.Key key : mStats.keySet()) { java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(key.ident); if (keys == null) { keys = com.google.android.collect.Lists.newArrayList(); keysByIdent.put(key.ident, keys); } keys.add(key); } out.writeInt(com.android.server.net.NetworkStatsCollection.FILE_MAGIC); out.writeInt(com.android.server.net.NetworkStatsCollection.VERSION_UNIFIED_INIT); out.writeInt(keysByIdent.size()); for (com.android.server.net.NetworkIdentitySet ident : keysByIdent.keySet()) { final java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(ident); ident.writeToStream(out); out.writeInt(keys.size()); for (com.android.server.net.NetworkStatsCollection.Key key : keys) { final android.net.NetworkStatsHistory history = mStats.get(key); out.writeInt(key.uid); out.writeInt(key.set); out.writeInt(key.tag); history.writeToStream(out); } } out.flush(); }",aa4b32d3bd5b72f6e57ce68f98e887b8569fb158,2018-01-19 14:48:51,6
589613,services_core_java_com_android_server_net_NetworkStatsCollection.java,"public void removeUids(int[] uids) { final java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> knownKeys = com.google.android.collect.Lists.newArrayList(); knownKeys.addAll(mStats.keySet()); for (com.android.server.net.NetworkStatsCollection.Key key : knownKeys) { if (com.android.internal.util.ArrayUtils.contains(uids, key.uid)) { if ((key.tag) == (TAG_NONE)) { final android.net.NetworkStatsHistory uidHistory = mStats.get(key); final android.net.NetworkStatsHistory removedHistory = findOrCreateHistory(key.ident, com.android.server.net.UID_REMOVED, com.android.server.net.SET_DEFAULT, com.android.server.net.TAG_NONE); removedHistory.recordEntireHistory(uidHistory); } mStats.remove(key); mDirty = true; } } }",9bcd4f0dacd03bdff48bcd590155d0f6b1f409c8,"public void removeUids(int[] uids) { final java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> knownKeys = com.google.android.collect.Lists.newArrayList(); knownKeys.addAll(mStats.keySet()); for (com.android.server.net.NetworkStatsCollection.Key key : knownKeys) { if (com.android.internal.util.ArrayUtils.contains(uids, key.uid)) { if ((key.tag) == (TAG_NONE)) { final android.net.NetworkStatsHistory uidHistory = mStats.get(key); final android.net.NetworkStatsHistory removedHistory = findOrCreateHistory(key.ident, com.android.server.net.UID_REMOVED, com.android.server.net.SET_DEFAULT, com.android.server.net.TAG_NONE, com.android.server.net.DEFAULT_NETWORK_ALL); removedHistory.recordEntireHistory(uidHistory); } mStats.remove(key); mDirty = true; } } }",43023715103807f8ac00429e9880838ec6708b76,"public void removeUids(int[] uids) { final java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> knownKeys = com.google.android.collect.Lists.newArrayList(); knownKeys.addAll(mStats.keySet()); for (com.android.server.net.NetworkStatsCollection.Key key : knownKeys) { if (com.android.internal.util.ArrayUtils.contains(uids, key.uid)) { if ((key.tag) == (TAG_NONE)) { final android.net.NetworkStatsHistory uidHistory = mStats.get(key); final android.net.NetworkStatsHistory removedHistory = findOrCreateHistory(key.ident, com.android.server.net.UID_REMOVED, com.android.server.net.SET_DEFAULT, com.android.server.net.TAG_NONE); removedHistory.recordEntireHistory(uidHistory); } mStats.remove(key); mDirty = true; } } }",9bcd4f0dacd03bdff48bcd590155d0f6b1f409c8,2018-01-19 14:48:51,6
589613,services_core_java_com_android_server_net_NetworkStatsCollection.java,"public android.net.NetworkStats getSummary(android.net.NetworkTemplate template, long start, long end, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callerUid) { final long now = java.lang.System.currentTimeMillis(); final android.net.NetworkStats stats = new android.net.NetworkStats((end - start), 24); if (start == end) return stats; final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); android.net.NetworkStatsHistory.Entry historyEntry = null; for (int i = 0; i < (mStats.size()); i++) { final com.android.server.net.NetworkStatsCollection.Key key = mStats.keyAt(i); if (((com.android.server.net.NetworkStatsCollection.templateMatches(template, key.ident)) && (com.android.server.net.NetworkStatsAccess.isAccessibleToUser(key.uid, callerUid, accessLevel))) && ((key.set) < (android.net.NetworkStats.SET_DEBUG_START))) { final android.net.NetworkStatsHistory value = mStats.valueAt(i); historyEntry = value.getValues(start, end, now, historyEntry); entry.iface = IFACE_ALL; entry.uid = key.uid; entry.set = key.set; entry.tag = key.tag; entry.metered = (key.ident.isAnyMemberMetered()) ? METERED_YES : METERED_NO; entry.roaming = (key.ident.isAnyMemberRoaming()) ? ROAMING_YES : ROAMING_NO; entry.rxBytes = historyEntry.rxBytes; entry.rxPackets = historyEntry.rxPackets; entry.txBytes = historyEntry.txBytes; entry.txPackets = historyEntry.txPackets; entry.operations = historyEntry.operations; if (!(entry.isEmpty())) { stats.combineValues(entry); } } } return stats; }",5d4427d3a3fbf89dc98c04161dde9ea4d1a76068,"public android.net.NetworkStats getSummary(android.net.NetworkTemplate template, long start, long end, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callerUid) { final long now = java.lang.System.currentTimeMillis(); final android.net.NetworkStats stats = new android.net.NetworkStats((end - start), 24); if (start == end) return stats; final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); android.net.NetworkStatsHistory.Entry historyEntry = null; for (int i = 0; i < (mStats.size()); i++) { final com.android.server.net.NetworkStatsCollection.Key key = mStats.keyAt(i); if (((com.android.server.net.NetworkStatsCollection.templateMatches(template, key.ident)) && (com.android.server.net.NetworkStatsAccess.isAccessibleToUser(key.uid, callerUid, accessLevel))) && ((key.set) < (android.net.NetworkStats.SET_DEBUG_START))) { final android.net.NetworkStatsHistory value = mStats.valueAt(i); historyEntry = value.getValues(start, end, now, historyEntry); entry.iface = IFACE_ALL; entry.uid = key.uid; entry.set = key.set; entry.tag = key.tag; entry.defaultNetwork = key.defaultNetwork; entry.metered = (key.ident.isAnyMemberMetered()) ? METERED_YES : METERED_NO; entry.roaming = (key.ident.isAnyMemberRoaming()) ? ROAMING_YES : ROAMING_NO; entry.rxBytes = historyEntry.rxBytes; entry.rxPackets = historyEntry.rxPackets; entry.txBytes = historyEntry.txBytes; entry.txPackets = historyEntry.txPackets; entry.operations = historyEntry.operations; if (!(entry.isEmpty())) { stats.combineValues(entry); } } } return stats; }",c5be7f728b45478f7de626de6fd4a6124511671d,"public android.net.NetworkStats getSummary(android.net.NetworkTemplate template, long start, long end, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callerUid) { final long now = java.lang.System.currentTimeMillis(); final android.net.NetworkStats stats = new android.net.NetworkStats((end - start), 24); if (start == end) return stats; final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); android.net.NetworkStatsHistory.Entry historyEntry = null; for (int i = 0; i < (mStats.size()); i++) { final com.android.server.net.NetworkStatsCollection.Key key = mStats.keyAt(i); if (((com.android.server.net.NetworkStatsCollection.templateMatches(template, key.ident)) && (com.android.server.net.NetworkStatsAccess.isAccessibleToUser(key.uid, callerUid, accessLevel))) && ((key.set) < (android.net.NetworkStats.SET_DEBUG_START))) { final android.net.NetworkStatsHistory value = mStats.valueAt(i); historyEntry = value.getValues(start, end, now, historyEntry); entry.iface = IFACE_ALL; entry.uid = key.uid; entry.set = key.set; entry.tag = key.tag; entry.defaultNetwork = DEFAULT_NETWORK_YES; entry.metered = (key.ident.isAnyMemberMetered()) ? METERED_YES : METERED_NO; entry.roaming = (key.ident.isAnyMemberRoaming()) ? ROAMING_YES : ROAMING_NO; entry.rxBytes = historyEntry.rxBytes; entry.rxPackets = historyEntry.rxPackets; entry.txBytes = historyEntry.txBytes; entry.txPackets = historyEntry.txPackets; entry.operations = historyEntry.operations; if (!(entry.isEmpty())) { stats.combineValues(entry); } } } return stats; }",b736dea6e3c0f31fc336ea31dab96eb122ebe2b8,2018-01-19 14:48:51,6
589613,services_core_java_com_android_server_net_NetworkStatsCollection.java,"public void read(java.io.DataInputStream in) throws java.io.IOException { final int magic = in.readInt(); if (magic != (com.android.server.net.NetworkStatsCollection.FILE_MAGIC)) { throw new java.net.ProtocolException((""unexpected magic: "" + magic)); } final int version = in.readInt(); switch (version) { case com.android.server.net.NetworkStatsCollection.VERSION_UNIFIED_INIT : { final int identSize = in.readInt(); for (int i = 0; i < identSize; i++) { final com.android.server.net.NetworkIdentitySet ident = new com.android.server.net.NetworkIdentitySet(in); final int size = in.readInt(); for (int j = 0; j < size; j++) { final int uid = in.readInt(); final int set = in.readInt(); final int tag = in.readInt(); final com.android.server.net.NetworkStatsCollection.Key key = new com.android.server.net.NetworkStatsCollection.Key(ident, uid, set, tag); final android.net.NetworkStatsHistory history = new android.net.NetworkStatsHistory(in); recordHistory(key, history); } } break; } default : { throw new java.net.ProtocolException((""unexpected version: "" + version)); } } }",2db3ebe273b74040c48c47828e0445758c8c1ab2,"public void read(java.io.DataInputStream in) throws java.io.IOException { final int magic = in.readInt(); if (magic != (com.android.server.net.NetworkStatsCollection.FILE_MAGIC)) { throw new java.net.ProtocolException((""unexpected magic: "" + magic)); } final int version = in.readInt(); switch (version) { case com.android.server.net.NetworkStatsCollection.VERSION_UNIFIED_INIT : case com.android.server.net.NetworkStatsCollection.VERSION_WITH_DEFAULT_NETWORK : { final int identSize = in.readInt(); for (int i = 0; i < identSize; i++) { final com.android.server.net.NetworkIdentitySet ident = new com.android.server.net.NetworkIdentitySet(in); final int size = in.readInt(); for (int j = 0; j < size; j++) { final int uid = in.readInt(); final int set = in.readInt(); final int tag = in.readInt(); final int defaultNetwork = (version >= (com.android.server.net.NetworkStatsCollection.VERSION_WITH_DEFAULT_NETWORK)) ? in.readInt() : DEFAULT_NETWORK_YES; final com.android.server.net.NetworkStatsCollection.Key key = new com.android.server.net.NetworkStatsCollection.Key(ident, uid, set, tag, defaultNetwork); final android.net.NetworkStatsHistory history = new android.net.NetworkStatsHistory(in); recordHistory(key, history); } } break; } default : { throw new java.net.ProtocolException((""unexpected version: "" + version)); } } }",54f508cd112d80014d050f928a9e5552d7f01463,"public void read(java.io.DataInputStream in) throws java.io.IOException { final int magic = in.readInt(); if (magic != (com.android.server.net.NetworkStatsCollection.FILE_MAGIC)) { throw new java.net.ProtocolException((""unexpected magic: "" + magic)); } final int version = in.readInt(); switch (version) { case com.android.server.net.NetworkStatsCollection.VERSION_UNIFIED_INIT : { final int identSize = in.readInt(); for (int i = 0; i < identSize; i++) { final com.android.server.net.NetworkIdentitySet ident = new com.android.server.net.NetworkIdentitySet(in); final int size = in.readInt(); for (int j = 0; j < size; j++) { final int uid = in.readInt(); final int set = in.readInt(); final int tag = in.readInt(); final com.android.server.net.NetworkStatsCollection.Key key = new com.android.server.net.NetworkStatsCollection.Key(ident, uid, set, tag); final android.net.NetworkStatsHistory history = new android.net.NetworkStatsHistory(in); recordHistory(key, history); } } break; } default : { throw new java.net.ProtocolException((""unexpected version: "" + version)); } } }",2db3ebe273b74040c48c47828e0445758c8c1ab2,2018-01-19 14:48:51,6
588341,hostsidetests_devicepolicy_src_com_android_cts_devicepolicy_DeviceAndProfileOwnerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,protected void executeDeviceTestClassNoRestrictBackground(java.lang.String className) throws java.lang.Exception { boolean originalRestriction = ensureRestrictBackgroundPolicyOff(); executeDeviceTestClass(className); restoreRestrictBackgroundPolicyTo(originalRestriction); },43e253a843c3b4539411825d96e777cc34edec55,protected void executeDeviceTestClassNoRestrictBackground(java.lang.String className) throws java.lang.Exception { boolean originalRestriction = ensureRestrictBackgroundPolicyOff(); try { executeDeviceTestClass(className); } catch (java.lang.Exception e) { throw e; } finally { restoreRestrictBackgroundPolicyTo(originalRestriction); } },0754a9a919e648865fb3d438629447d8fea1b1b5,2018-01-19 17:35:15,3
569542,telephony_java_android_telephony_SignalStrength.java,"public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoSnr, boolean gsm) { initialize(gsmSignalStrength, gsmBitErrorRate, cdmaDbm, cdmaEcio, evdoDbm, evdoEcio, evdoSnr, 99, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, 0, gsm, false); }",9443424be0abf699a61733aa8d2b26da9a56731e,"public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoSnr, boolean gsm) { initialize(gsmSignalStrength, gsmBitErrorRate, cdmaDbm, cdmaEcio, evdoDbm, evdoEcio, evdoSnr, 99, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, 0, gsm, false, android.telephony.SignalStrength.DEFAULT_LTE_RSRP_THRESHOLDS); }",169b8351ee6cb59c56ef35a05717080dfbe8325c,"public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoSnr, boolean gsm) { initialize(gsmSignalStrength, gsmBitErrorRate, cdmaDbm, cdmaEcio, evdoDbm, evdoEcio, evdoSnr, 99, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, 0, gsm, false); }",9443424be0abf699a61733aa8d2b26da9a56731e,2018-01-19 20:39:41,5
569542,telephony_java_android_telephony_SignalStrength.java,"public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoSnr, int lteSignalStrength, int lteRsrp, int lteRsrq, int lteRssnr, int lteCqi, int lteRsrpBoost, boolean gsm, boolean useOnlyRsrpForLteLevel) { mGsmSignalStrength = gsmSignalStrength; mGsmBitErrorRate = gsmBitErrorRate; mCdmaDbm = cdmaDbm; mCdmaEcio = cdmaEcio; mEvdoDbm = evdoDbm; mEvdoEcio = evdoEcio; mEvdoSnr = evdoSnr; mLteSignalStrength = lteSignalStrength; mLteRsrp = lteRsrp; mLteRsrq = lteRsrq; mLteRssnr = lteRssnr; mLteCqi = lteCqi; mLteRsrpBoost = lteRsrpBoost; mTdScdmaRscp = android.telephony.SignalStrength.INVALID; isGsm = gsm; mUseOnlyRsrpForLteLevel = useOnlyRsrpForLteLevel; if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log((""initialize: "" + (toString()))); }",6707dc42949e7d953c398e5b2202a5ae8d38f8f7,"public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoSnr, int lteSignalStrength, int lteRsrp, int lteRsrq, int lteRssnr, int lteCqi, int lteRsrpBoost, boolean gsm, boolean useOnlyRsrpForLteLevel, int[] lteRsrpThresholds) { mGsmSignalStrength = gsmSignalStrength; mGsmBitErrorRate = gsmBitErrorRate; mCdmaDbm = cdmaDbm; mCdmaEcio = cdmaEcio; mEvdoDbm = evdoDbm; mEvdoEcio = evdoEcio; mEvdoSnr = evdoSnr; mLteSignalStrength = lteSignalStrength; mLteRsrp = lteRsrp; mLteRsrq = lteRsrq; mLteRssnr = lteRssnr; mLteCqi = lteCqi; mLteRsrpBoost = lteRsrpBoost; mTdScdmaRscp = android.telephony.SignalStrength.INVALID; isGsm = gsm; mUseOnlyRsrpForLteLevel = useOnlyRsrpForLteLevel; setLteRsrpThresholds(lteRsrpThresholds); if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log((""initialize: "" + (toString()))); }",1f75df06f1e1837f02383638d1b342b56bea378f,"public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoSnr, int lteSignalStrength, int lteRsrp, int lteRsrq, int lteRssnr, int lteCqi, int lteRsrpBoost, boolean gsm, boolean useOnlyRsrpForLteLevel) { mGsmSignalStrength = gsmSignalStrength; mGsmBitErrorRate = gsmBitErrorRate; mCdmaDbm = cdmaDbm; mCdmaEcio = cdmaEcio; mEvdoDbm = evdoDbm; mEvdoEcio = evdoEcio; mEvdoSnr = evdoSnr; mLteSignalStrength = lteSignalStrength; mLteRsrp = lteRsrp; mLteRsrq = lteRsrq; mLteRssnr = lteRssnr; mLteCqi = lteCqi; mLteRsrpBoost = lteRsrpBoost; mTdScdmaRscp = android.telephony.SignalStrength.INVALID; isGsm = gsm; mUseOnlyRsrpForLteLevel = useOnlyRsrpForLteLevel; setLteRsrpThresholds(getDefaultLteRsrpThresholds()); if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log((""initialize: "" + (toString()))); }",68b50214d674f17aac697c96b8ed2d465024d6d0,2018-01-19 20:39:41,5
594319,tests_unit_src_com_android_bluetooth_btservice_ProfileServiceTest.java,"@org.junit.Test public void testEnableDisableInterleaved() throws java.util.concurrent.TimeoutException { for (java.lang.Class profile : mProfiles) { setProfileState(profile, BluetoothAdapter.STATE_ON); setProfileState(profile, BluetoothAdapter.STATE_OFF); } for (java.lang.Class profile : mProfiles) { verify(mMockAdapterService, timeout(com.android.bluetooth.btservice.ProfileServiceTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(eq(profile.getName()), eq(BluetoothAdapter.STATE_ON)); verify(mMockAdapterService, timeout(com.android.bluetooth.btservice.ProfileServiceTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(eq(profile.getName()), eq(BluetoothAdapter.STATE_OFF)); } }",0e2942ed07587bf0ac9ded436cfa0f006147bbf8,"@org.junit.Test public void testEnableDisableInterleaved() throws java.util.concurrent.TimeoutException { for (java.lang.Class profile : mProfiles) { setProfileState(profile, BluetoothAdapter.STATE_ON); setProfileState(profile, BluetoothAdapter.STATE_OFF); } int waitTime = com.android.bluetooth.btservice.ProfileServiceTest.ASYNC_CALL_TIMEOUT_MILLIS; for (java.lang.Class profile : mProfiles) { verify(mMockAdapterService, timeout(waitTime)).onProfileServiceStateChanged(eq(profile.getName()), eq(BluetoothAdapter.STATE_ON)); waitTime = 0; } waitTime = com.android.bluetooth.btservice.ProfileServiceTest.ASYNC_CALL_TIMEOUT_MILLIS; for (java.lang.Class profile : mProfiles) { verify(mMockAdapterService, timeout(waitTime)).onProfileServiceStateChanged(eq(profile.getName()), eq(BluetoothAdapter.STATE_OFF)); waitTime = 0; } }",da4d241eed447180140c92f73e4d7db9fbacf72f,"@org.junit.Test public void testEnableDisableInterleaved() throws java.util.concurrent.TimeoutException { for (java.lang.Class profile : mProfiles) { setProfileState(profile, BluetoothAdapter.STATE_ON); setProfileState(profile, BluetoothAdapter.STATE_OFF); } for (java.lang.Class profile : mProfiles) { verify(mMockAdapterService, timeout(com.android.bluetooth.btservice.ProfileServiceTest.PROFILE_START_MILLIS)).onProfileServiceStateChanged(eq(profile.getName()), eq(BluetoothAdapter.STATE_ON)); verify(mMockAdapterService, timeout(com.android.bluetooth.btservice.ProfileServiceTest.PROFILE_START_MILLIS)).onProfileServiceStateChanged(eq(profile.getName()), eq(BluetoothAdapter.STATE_OFF)); } }",8439ff2b669fd084834821103e42e74723ea315d,2018-01-19 23:14:24,3
593154,src_com_android_bips_ui_AddManualPrinterDialog.java,private void updateButtonState() { java.lang.String hostname = mHostnameView.getText().toString(); java.util.regex.Matcher hostMatch = com.android.bips.ui.AddManualPrinterDialog.HOSTNAME_PATTERN.matcher(hostname); mAddButton.setEnabled(hostMatch.matches()); },b5397246a2112a0d89ebc45f9ad5976078738169,private void updateButtonState() { java.lang.String hostname = mHostnameView.getText().toString(); java.util.regex.Matcher uriMatcher = com.android.bips.ui.AddManualPrinterDialog.PRINTER_URI_PATTERN.matcher(hostname); mAddButton.setEnabled(uriMatcher.matches()); },36c284df72fe3b1a4889792bfbe84421329d257e,private void updateButtonState() { java.lang.String hostname = mHostnameView.getText().toString(); java.util.regex.Matcher uriMatcher = com.android.bips.ui.AddManualPrinterDialog.FULL_URI_PATTERN.matcher(hostname); mAddButton.setEnabled(uriMatcher.matches()); },5ef65d204f49ddb0cbf150903d49a64be651db29,2018-01-20 06:04:24,2
593154,src_com_android_bips_discovery_ManualDiscovery.java,"public void addManualPrinter(java.lang.String hostname, com.android.bips.discovery.ManualDiscovery.PrinterAddCallback callback) { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, (""addManualPrinter "" + hostname)); new com.android.bips.discovery.ManualDiscovery.CapabilitiesFinder(hostname, callback); }",d99bc8741e5e7ee149bada2478a3cdb870cb6133,"public void addManualPrinter(java.lang.String uriString, com.android.bips.discovery.ManualDiscovery.PrinterAddCallback callback) { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, (""addManualPrinter "" + uriString)); android.net.Uri printerUri = android.net.Uri.parse((""ipp://"" + uriString)); int givenPort = printerUri.getPort(); java.lang.String givenPath = printerUri.getPath(); java.lang.String hostname = printerUri.getHost(); java.util.Set<android.net.Uri> uris = new java.util.LinkedHashSet<>(); for (android.net.Uri uri : com.android.bips.discovery.ManualDiscovery.IPP_URIS) { java.lang.String authority = (hostname + "":"") + (givenPort == (-1) ? uri.getPort() : givenPort); java.lang.String path = (android.text.TextUtils.isEmpty(givenPath)) ? uri.getPath() : givenPath; uris.add(uri.buildUpon().encodedAuthority(authority).path(path).build()); } new com.android.bips.discovery.ManualDiscovery.CapabilitiesFinder(uris, callback); }",4d619a2a9e50c333bd4e3f4c8a9575f023b0202f,"public void addManualPrinter(android.net.Uri printerUri, com.android.bips.discovery.ManualDiscovery.PrinterAddCallback callback) { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, (""addManualPrinter "" + printerUri)); int givenPort = printerUri.getPort(); java.lang.String givenPath = printerUri.getPath(); java.lang.String hostname = printerUri.getHost(); java.lang.String givenScheme = printerUri.getScheme(); java.util.Set<android.net.Uri> uris = new java.util.LinkedHashSet<>(); for (android.net.Uri uri : com.android.bips.discovery.ManualDiscovery.IPP_URIS) { java.lang.String scheme = uri.getScheme(); if ((!(android.text.TextUtils.isEmpty(givenScheme))) && (!(scheme.equals(givenScheme)))) { continue; } java.lang.String authority = (hostname + "":"") + (givenPort == (-1) ? uri.getPort() : givenPort); java.lang.String path = (android.text.TextUtils.isEmpty(givenPath)) ? uri.getPath() : givenPath; android.net.Uri targetUri = uri.buildUpon().scheme(scheme).encodedAuthority(authority).path(path).build(); uris.add(targetUri); } mAddRequests.add(new com.android.bips.discovery.ManualDiscovery.CapabilitiesFinder(uris, callback)); }",561e1526b0631e3e530fbdb38418b3278514be61,2018-01-20 06:04:24,2
581706,telephony_java_android_telephony_SubscriptionInfo.java,"@java.lang.Override public java.lang.String toString() { java.lang.String iccIdToPrint = android.telephony.SubscriptionInfo.givePrintableIccid(mIccId); return (((((((((((((((((((((((((""{id="" + (mId)) + "", iccId="") + iccIdToPrint) + "" simSlotIndex="") + (mSimSlotIndex)) + "" displayName="") + (mDisplayName)) + "" carrierName="") + (mCarrierName)) + "" nameSource="") + (mNameSource)) + "" iconTint="") + (mIconTint)) + "" dataRoaming="") + (mDataRoaming)) + "" iconBitmap="") + (mIconBitmap)) + "" mcc "") + (mMcc)) + "" mnc "") + (mMnc)) + "" isEmbedded "") + (mIsEmbedded)) + "" accessRules "") + (java.util.Arrays.toString(mAccessRules))) + ""}""; }",b2e57ca22a08b3119acbc5665bac112066145f33,"@java.lang.Override public java.lang.String toString() { java.lang.String iccIdToPrint = android.telephony.SubscriptionInfo.givePrintableIccid(mIccId); return (((((((((((((((((((((((((((""{id="" + (mId)) + "", iccId="") + iccIdToPrint) + "" simSlotIndex="") + (mSimSlotIndex)) + "" displayName="") + (mDisplayName)) + "" carrierName="") + (mCarrierName)) + "" nameSource="") + (mNameSource)) + "" iconTint="") + (mIconTint)) + "" dataRoaming="") + (mDataRoaming)) + "" iconBitmap="") + (mIconBitmap)) + "" mcc "") + (mMcc)) + "" mnc "") + (mMnc)) + "" isEmbedded "") + (mIsEmbedded)) + "" accessRules "") + (java.util.Arrays.toString(mAccessRules))) + "" cardId="") + (mCardId)) + ""}""; }",d8a2e14b1c9131f3274649512d968ff2507f9258,"@java.lang.Override public java.lang.String toString() { java.lang.String iccIdToPrint = android.telephony.SubscriptionInfo.givePrintableIccid(mIccId); java.lang.String cardIdToPrint = android.telephony.SubscriptionInfo.givePrintableIccid(mCardId); return (((((((((((((((((((((((((((""{id="" + (mId)) + "", iccId="") + iccIdToPrint) + "" simSlotIndex="") + (mSimSlotIndex)) + "" displayName="") + (mDisplayName)) + "" carrierName="") + (mCarrierName)) + "" nameSource="") + (mNameSource)) + "" iconTint="") + (mIconTint)) + "" dataRoaming="") + (mDataRoaming)) + "" iconBitmap="") + (mIconBitmap)) + "" mcc "") + (mMcc)) + "" mnc "") + (mMnc)) + "" isEmbedded "") + (mIsEmbedded)) + "" accessRules "") + (java.util.Arrays.toString(mAccessRules))) + "" cardId="") + cardIdToPrint) + ""}""; }",2e1dc1fdf9af75859d34dcda74c811242058652f,2018-01-20 08:28:22,6
581706,telephony_java_android_telephony_SubscriptionInfo.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.lang.String getCardId() { return (this.mCardId) == null ? """" : this.mCardId; }",49385956feb6bb664ff15501a036e755297c561a,public java.lang.String getCardId() { return this.mCardId; },9f5b7f323f3d737b2732a8604a8e11d378d29d05,2018-01-20 08:28:22,6
581689,src_java_com_android_internal_telephony_uicc_UiccCard.java,"public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { com.android.internal.telephony.uicc.IccCardStatus.CardState oldState = mCardState; mCardState = ics.mCardState; mContext = c; mCi = ci; mIccid = ics.iccid; if ((mCardState) != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = new com.android.internal.telephony.uicc.UiccProfile(mContext, mCi, ics, mPhoneId, this); } else { mUiccProfile.update(mContext, mCi, ics); } } else { throw new java.lang.RuntimeException(""Card state is absent when updating!""); } } }",afbc27b865eb2418ab421f1609f8077c9e4c5f9c,"public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { com.android.internal.telephony.uicc.IccCardStatus.CardState oldState = mCardState; mCardState = ics.mCardState; mContext = c; mCi = ci; mIccid = ics.iccid; mCardId = ics.iccid; if ((mCardState) != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = new com.android.internal.telephony.uicc.UiccProfile(mContext, mCi, ics, mPhoneId, this); } else { mUiccProfile.update(mContext, mCi, ics); } } else { throw new java.lang.RuntimeException(""Card state is absent when updating!""); } } }",ac9d2104604f29ea850278aa84d1d1c3166a9805,"public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { com.android.internal.telephony.uicc.IccCardStatus.CardState oldState = mCardState; mCardState = ics.mCardState; mContext = c; mCi = ci; mIccid = ics.iccid; updateCardId(); if ((mCardState) != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = new com.android.internal.telephony.uicc.UiccProfile(mContext, mCi, ics, mPhoneId, this); } else { mUiccProfile.update(mContext, mCi, ics); } } else { throw new java.lang.RuntimeException(""Card state is absent when updating!""); } } }",37c4eb13dfd0e1a488b83e816609dd0efcad2755,2018-01-20 08:28:22,9
581689,src_java_com_android_internal_telephony_SubscriptionController.java,"@com.android.internal.annotations.VisibleForTesting(visibility = VisibleForTesting.Visibility.PACKAGE) public android.net.Uri insertEmptySubInfoRecord(java.lang.String iccId, int slotIndex) { android.content.ContentResolver resolver = mContext.getContentResolver(); android.content.ContentValues value = new android.content.ContentValues(); value.put(SubscriptionManager.ICC_ID, iccId); int color = getUnusedColor(mContext.getOpPackageName()); value.put(SubscriptionManager.COLOR, color); value.put(SubscriptionManager.SIM_SLOT_INDEX, slotIndex); value.put(SubscriptionManager.CARRIER_NAME, """"); android.net.Uri uri = resolver.insert(SubscriptionManager.CONTENT_URI, value); refreshCachedActiveSubscriptionInfoList(); return uri; }",78849c907fb858a193e82d0ab1fc032ae36055df,"@com.android.internal.annotations.VisibleForTesting(visibility = VisibleForTesting.Visibility.PACKAGE) public android.net.Uri insertEmptySubInfoRecord(java.lang.String iccId, int slotIndex) { android.content.ContentResolver resolver = mContext.getContentResolver(); android.content.ContentValues value = new android.content.ContentValues(); value.put(SubscriptionManager.ICC_ID, iccId); int color = getUnusedColor(mContext.getOpPackageName()); value.put(SubscriptionManager.COLOR, color); value.put(SubscriptionManager.SIM_SLOT_INDEX, slotIndex); value.put(SubscriptionManager.CARRIER_NAME, """"); java.lang.String cardId = com.android.internal.telephony.uicc.UiccController.getInstance().getUiccCardForPhone(slotIndex).getCardId(); if (cardId != null) { value.put(SubscriptionManager.CARD_ID, cardId); } else { value.put(SubscriptionManager.CARD_ID, iccId); } android.net.Uri uri = resolver.insert(SubscriptionManager.CONTENT_URI, value); refreshCachedActiveSubscriptionInfoList(); return uri; }",892e398ce5dd0abed66975e45fe835472b24b1f7,"@com.android.internal.annotations.VisibleForTesting(visibility = VisibleForTesting.Visibility.PACKAGE) public android.net.Uri insertEmptySubInfoRecord(java.lang.String iccId, int slotIndex) { android.content.ContentResolver resolver = mContext.getContentResolver(); android.content.ContentValues value = new android.content.ContentValues(); value.put(SubscriptionManager.ICC_ID, iccId); int color = getUnusedColor(mContext.getOpPackageName()); value.put(SubscriptionManager.COLOR, color); value.put(SubscriptionManager.SIM_SLOT_INDEX, slotIndex); value.put(SubscriptionManager.CARRIER_NAME, """"); com.android.internal.telephony.uicc.UiccCard card = com.android.internal.telephony.uicc.UiccController.getInstance().getUiccCardForPhone(slotIndex); if (card != null) { java.lang.String cardId = card.getCardId(); if (cardId != null) { value.put(SubscriptionManager.CARD_ID, cardId); } else { value.put(SubscriptionManager.CARD_ID, iccId); } } else { value.put(SubscriptionManager.CARD_ID, iccId); } android.net.Uri uri = resolver.insert(SubscriptionManager.CONTENT_URI, value); refreshCachedActiveSubscriptionInfoList(); return uri; }",1501cc60dc237c22e43f06cbc8a069751a7ce572,2018-01-20 08:28:22,9
591549,src_java_com_android_internal_telephony_SubscriptionInfoUpdater.java,"private void handleSimLocked(int slotId, java.lang.String reason) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM))) { logd(((""SIM"" + (slotId + 1)) + "" hot plug in"")); com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = null; } java.lang.String iccId = com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]; if (iccId == null) { com.android.internal.telephony.uicc.IccRecords records = com.android.internal.telephony.SubscriptionInfoUpdater.mPhone[slotId].getIccCard().getIccRecords(); if ((stripIccIdSuffix(records.getFullIccId())) == null) { logd(""handleSimLocked: IccID null""); return; } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = stripIccIdSuffix(records.getFullIccId()); } else { logd((((""NOT Querying IccId its already set sIccid["" + slotId) + ""]="") + iccId)); } if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED, reason); }",d332fe8f5b77b6545b60772d94cb0f0324dd8e88,"private void handleSimLocked(int slotId, java.lang.String reason) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM))) { logd(((""SIM"" + (slotId + 1)) + "" hot plug in"")); com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = null; } java.lang.String iccId = com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]; if (iccId == null) { com.android.internal.telephony.uicc.IccRecords records = com.android.internal.telephony.SubscriptionInfoUpdater.mPhone[slotId].getIccCard().getIccRecords(); if ((stripIccIdSuffix(records.getFullIccId())) == null) { logd(""handleSimLocked: IccID null""); return; } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = stripIccIdSuffix(records.getFullIccId()); } else { logd((((""NOT Querying IccId its already set sIccid["" + slotId) + ""]="") + iccId)); } if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED, reason); broadcastSimCardStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_PRESENT); broadcastSimApplicationStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED, reason); }",ec908b93ed6a437ada34e1fea7e281724f2e9ade,"private void handleSimLocked(int slotId, java.lang.String reason) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM))) { logd(((""SIM"" + (slotId + 1)) + "" hot plug in"")); com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = null; } java.lang.String iccId = com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]; if (iccId == null) { com.android.internal.telephony.uicc.IccRecords records = com.android.internal.telephony.SubscriptionInfoUpdater.mPhone[slotId].getIccCard().getIccRecords(); if ((stripIccIdSuffix(records.getFullIccId())) == null) { logd(""handleSimLocked: IccID null""); return; } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = stripIccIdSuffix(records.getFullIccId()); } else { logd((((""NOT Querying IccId its already set sIccid["" + slotId) + ""]="") + iccId)); } if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED, reason); broadcastSimCardStateChanged(slotId, TelephonyManager.SIM_STATE_PRESENT); broadcastSimApplicationStateChanged(slotId, com.android.internal.telephony.SubscriptionInfoUpdater.getSimStateFromLockedReason(reason)); }",1dfc7b882160594528fdfc09dca1fc9f900dfe1c,2018-01-20 19:43:41,9
591549,src_java_com_android_internal_telephony_SubscriptionInfoUpdater.java,"private void handleSimAbsent(int slotId) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (!(com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM)))) { logd(((""SIM"" + (slotId + 1)) + "" hot plug out"")); } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM; if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT, null); }",8b5d163b94f12f698bf1b3b0d73c1ffd11eb2b40,"private void handleSimAbsent(int slotId) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (!(com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM)))) { logd(((""SIM"" + (slotId + 1)) + "" hot plug out"")); } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM; if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT, null); broadcastSimCardStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT); broadcastSimApplicationStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_NOT_READY, null); }",7199286cdb932ed5ecc3d61f5c656fde070ec0b4,"private void handleSimAbsent(int slotId) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (!(com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM)))) { logd(((""SIM"" + (slotId + 1)) + "" hot plug out"")); } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM; if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT, null); broadcastSimCardStateChanged(slotId, TelephonyManager.SIM_STATE_ABSENT); broadcastSimApplicationStateChanged(slotId, TelephonyManager.SIM_STATE_NOT_READY); }",d96c6cc156c33b6a5240d9bd3a84189302a7ec70,2018-01-20 19:43:41,9
591549,src_java_com_android_internal_telephony_SubscriptionInfoUpdater.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void broadcastSimApplicationStateChanged(int phoneId, java.lang.String state, java.lang.String reason) { if (!(com.android.internal.telephony.SubscriptionInfoUpdater.sSimApplicationState[phoneId].equals(state))) { com.android.internal.telephony.SubscriptionInfoUpdater.sSimApplicationState[phoneId] = state; android.content.Intent i = new android.content.Intent(android.content.Intent.ACTION_SIM_APPLICATION_STATE_CHANGED); i.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); i.putExtra(IccCardConstants.INTENT_KEY_ICC_STATE, state); i.putExtra(IccCardConstants.INTENT_KEY_LOCKED_REASON, reason); android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra(i, phoneId); logd((((((""Broadcasting intent ACTION_SIM_APPLICATION_STATE_CHANGED "" + state) + "" reason "") + reason) + "" for phone: "") + phoneId)); com.android.internal.telephony.IntentBroadcaster.getInstance().broadcastStickyIntent(i, UserHandle.USER_ALL); } }",4da2381647eee8f33ee753fcd0c7a445a069fd9e,"private void broadcastSimApplicationStateChanged(int phoneId, int state) { if (!((state == (com.android.internal.telephony.SubscriptionInfoUpdater.sSimApplicationState[phoneId])) || ((state == (android.telephony.TelephonyManager.SIM_STATE_NOT_READY)) && ((com.android.internal.telephony.SubscriptionInfoUpdater.sSimApplicationState[phoneId]) == (android.telephony.TelephonyManager.SIM_STATE_UNKNOWN))))) { com.android.internal.telephony.SubscriptionInfoUpdater.sSimApplicationState[phoneId] = state; android.content.Intent i = new android.content.Intent(android.content.Intent.ACTION_SIM_APPLICATION_STATE_CHANGED); i.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); i.putExtra(TelephonyManager.EXTRA_SIM_STATE, state); android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra(i, phoneId); logd((((""Broadcasting intent ACTION_SIM_APPLICATION_STATE_CHANGED "" + (com.android.internal.telephony.SubscriptionInfoUpdater.simStateString(state))) + "" for phone: "") + phoneId)); com.android.internal.telephony.SubscriptionInfoUpdater.mContext.sendBroadcast(i, Manifest.permission.READ_PRIVILEGED_PHONE_STATE); } }",61407a9824a2ce730350ffe3df976659de831f7a,2018-01-20 19:43:41,9
591549,src_java_com_android_internal_telephony_SubscriptionInfoUpdater.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void broadcastSimCardStateChanged(int phoneId, java.lang.String state) { if (!(com.android.internal.telephony.SubscriptionInfoUpdater.sSimCardState[phoneId].equals(state))) { com.android.internal.telephony.SubscriptionInfoUpdater.sSimCardState[phoneId] = state; android.content.Intent i = new android.content.Intent(android.content.Intent.ACTION_SIM_CARD_STATE_CHANGED); i.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); i.putExtra(IccCardConstants.INTENT_KEY_ICC_STATE, state); android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra(i, phoneId); logd((((""Broadcasting intent ACTION_SIM_CARD_STATE_CHANGED "" + state) + "" for phone: "") + phoneId)); android.app.ActivityManager.broadcastStickyIntent(i, UserHandle.USER_ALL); } }",e9ffc99178053cff1cb62f11ae156b976b9b6be1,"private void broadcastSimCardStateChanged(int phoneId, int state) { if (state != (com.android.internal.telephony.SubscriptionInfoUpdater.sSimCardState[phoneId])) { com.android.internal.telephony.SubscriptionInfoUpdater.sSimCardState[phoneId] = state; android.content.Intent i = new android.content.Intent(android.content.Intent.ACTION_SIM_CARD_STATE_CHANGED); i.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); i.putExtra(TelephonyManager.EXTRA_SIM_STATE, state); android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra(i, phoneId); logd((((""Broadcasting intent ACTION_SIM_CARD_STATE_CHANGED "" + (com.android.internal.telephony.SubscriptionInfoUpdater.simStateString(state))) + "" for phone: "") + phoneId)); com.android.internal.telephony.SubscriptionInfoUpdater.mContext.sendBroadcast(i, Manifest.permission.READ_PRIVILEGED_PHONE_STATE); } }",c299ba273c61628f556ec3e92c2cfc6b9d47aca6,2018-01-20 19:43:41,9
591549,src_java_com_android_internal_telephony_SubscriptionInfoUpdater.java,"private void handleSimError(int slotId) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (!(com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM)))) { logd(((""SIM"" + (slotId + 1)) + "" Error "")); } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM; if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR); }",626a7ee8ed04b9a16fd9968c7f3423b1d985799f,"private void handleSimError(int slotId) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (!(com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM)))) { logd(((""SIM"" + (slotId + 1)) + "" Error "")); } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM; if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR); broadcastSimCardStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR); broadcastSimApplicationStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_NOT_READY, null); }",047a8daa278e473024eb41bee779cd9d6c120a15,"private void handleSimError(int slotId) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (!(com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM)))) { logd(((""SIM"" + (slotId + 1)) + "" Error "")); } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM; if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR); broadcastSimCardStateChanged(slotId, TelephonyManager.SIM_STATE_CARD_IO_ERROR); broadcastSimApplicationStateChanged(slotId, TelephonyManager.SIM_STATE_NOT_READY); }",dce43285804f12077eeb78ce55cf761d3c2cb3ef,2018-01-20 19:43:41,9
591053,luni_src_main_java_libcore_io_Os.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public long splice(java.io.FileDescriptor fdIn, libcore.util.MutableLong offIn, java.io.FileDescriptor fdOut, libcore.util.MutableLong offOut, long len, int flags) throws android.system.ErrnoException;",c414a48af70cbeca720511a12702759b712d8681,"public long splice(java.io.FileDescriptor fdIn, android.system.Int64Ref offIn, java.io.FileDescriptor fdOut, android.system.Int64Ref offOut, long len, int flags) throws android.system.ErrnoException;",2a0222a1148a959100b570c5c8ee24027300ed9a,2018-01-22 12:09:18,8
591053,luni_src_main_java_android_system_Os.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static long splice(java.io.FileDescriptor fdIn, android.system.Int64Ref offIn, java.io.FileDescriptor fdOut, android.system.Int64Ref offOut, long len, int flags) throws android.system.ErrnoException { libcore.util.MutableLong internalOffIn = (offIn == null) ? null : new libcore.util.MutableLong(offIn.value); libcore.util.MutableLong internalOffOut = (offOut == null) ? null : new libcore.util.MutableLong(offOut.value); try { return Libcore.os.splice(fdIn, internalOffIn, fdOut, internalOffOut, len, flags); } finally { if (offIn != null) { offIn.value = internalOffIn.value; } if (offOut != null) { offOut.value = internalOffOut.value; } } }",33d4a99a37b927f0dfbfc5a50177d2f50ae6bf55,"public static long splice(java.io.FileDescriptor fdIn, android.system.Int64Ref offIn, java.io.FileDescriptor fdOut, android.system.Int64Ref offOut, long len, int flags) throws android.system.ErrnoException { return Libcore.os.splice(fdIn, offIn, fdOut, offOut, len, flags); }",153a1075598b4c2c456ac0797c92aaa6437d12c2,2018-01-22 12:09:18,8
591053,luni_src_main_java_libcore_io_ForwardingOs.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public long splice(java.io.FileDescriptor fdIn, libcore.util.MutableLong offIn, java.io.FileDescriptor fdOut, libcore.util.MutableLong offOut, long len, int flags) throws android.system.ErrnoException { return os.splice(fdIn, offIn, fdOut, offOut, len, flags); }",d6e31ccf15ad10596f1da79fa52afe2cafbe535a,"public long splice(java.io.FileDescriptor fdIn, android.system.Int64Ref offIn, java.io.FileDescriptor fdOut, android.system.Int64Ref offOut, long len, int flags) throws android.system.ErrnoException { return os.splice(fdIn, offIn, fdOut, offOut, len, flags); }",2f2a7fedb1292c978fabad5fdbb3a500170897d9,2018-01-22 12:09:18,8
591053,luni_src_main_java_libcore_io_Linux.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public native long splice(java.io.FileDescriptor fdIn, libcore.util.MutableLong offIn, java.io.FileDescriptor fdOut, libcore.util.MutableLong offOut, long len, int flags) throws android.system.ErrnoException;",b5cac410987ba14d0b91d0a35b2f35dc1c931c65,"public native long splice(java.io.FileDescriptor fdIn, android.system.Int64Ref offIn, java.io.FileDescriptor fdOut, android.system.Int64Ref offOut, long len, int flags) throws android.system.ErrnoException;",d03b53de96226fd3816695dafda1953b1ce0a855,2018-01-22 12:09:18,8
593794,tests_functional_com_android_documentsui_CancelFromNotificationUiTest.java,"@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); initTestFiles(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(TestNotificationService.ACTION_OPERATION_RESULT); context.registerReceiver(mReceiver, filter); context.sendBroadcast(new android.content.Intent(com.android.documentsui.services.TestNotificationService.ACTION_CHANGE_CANCEL_MODE)); mOperationExecuted = false; mErrorReason = ""No response from Notification""; mCountDownLatch = new java.util.concurrent.CountDownLatch(1); }",7c8789b22eeb9dba39c9708d0a63977de0811eab,"@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); android.os.Bundle bundle = new android.os.Bundle(); bundle.putLong(com.android.documentsui.StubProvider.EXTRA_SIZE, 500L); mDocsHelper.configure(null, bundle); initTestFiles(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(TestNotificationService.ACTION_OPERATION_RESULT); context.registerReceiver(mReceiver, filter); context.sendBroadcast(new android.content.Intent(com.android.documentsui.services.TestNotificationService.ACTION_CHANGE_CANCEL_MODE)); mOperationExecuted = false; mErrorReason = ""No response from Notification""; mCountDownLatch = new java.util.concurrent.CountDownLatch(1); }",40ab3474132360a2595681b042eadfc01178dac3,"@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); initTestFiles(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(TestNotificationService.ACTION_OPERATION_RESULT); context.registerReceiver(mReceiver, filter); context.sendBroadcast(new android.content.Intent(com.android.documentsui.services.TestNotificationService.ACTION_CHANGE_CANCEL_MODE)); mOperationExecuted = false; mErrorReason = ""No response from Notification""; mCountDownLatch = new java.util.concurrent.CountDownLatch(1); }",7c8789b22eeb9dba39c9708d0a63977de0811eab,2018-01-22 14:26:14,2
584381,tests_tests_telephony_src_android_telephony_cts_TelephonyManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean scanCompleteStatus() { return (((mNetworkScanStatus) == (android.telephony.cts.TelephonyManagerTest.EVENT_NETWORK_SCAN_COMPLETED)) && ((mScanResults) != null)) || ((mNetworkScanStatus) == (android.telephony.cts.TelephonyManagerTest.EVENT_NETWORK_SCAN_ERROR)); },628227636f3052beed12748f022925d7c1d11b73,"@org.junit.Test public void testSetNetworkSelectionModeManual() { try { mTelephonyManager.setNetworkSelectionModeManual("""", false); fail(""Expected SecurityException. App does not have carrier privileges.""); } catch (java.lang.SecurityException expected) { } }",5e3c5f861c1d64aa51594e684b0b224eb8598968,2018-01-22 16:59:19,10
584381,tests_tests_telephony_src_android_telephony_cts_TelephonyManagerTest.java,"@org.junit.After public void tearDown() throws java.lang.Exception { if ((mListener) != null) { mTelephonyManager.listen(mListener, PhoneStateListener.LISTEN_NONE); } }",ecd6dcb13046ac366009d165898d45505a8eb947,"@org.junit.After public void tearDown() throws java.lang.Exception { if ((mListener) != null) { mTelephonyManager.listen(mListener, PhoneStateListener.LISTEN_NONE); } mTestHandlerThread.quit(); }",278ff73c2a804c6e799f3cc566a0eea5e49f4c13,"@org.junit.After public void tearDown() throws java.lang.Exception { if ((mListener) != null) { mTelephonyManager.listen(mListener, PhoneStateListener.LISTEN_NONE); } }",ecd6dcb13046ac366009d165898d45505a8eb947,2018-01-22 16:59:19,10
584381,tests_tests_telephony_src_android_telephony_cts_TelephonyManagerTest.java,@org.junit.Before public void setUp() throws java.lang.Exception { mTelephonyManager = ((android.telephony.TelephonyManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.TELEPHONY_SERVICE))); android.telephony.cts.TelephonyManagerTest.mCm = ((android.net.ConnectivityManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); mPackageManager = android.telephony.cts.TelephonyManagerTest.getContext().getPackageManager(); },d084d58b195fbc3ec59933a30fcdcbf7ad31173c,@org.junit.Before public void setUp() throws java.lang.Exception { mTelephonyManager = ((android.telephony.TelephonyManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.TELEPHONY_SERVICE))); android.telephony.cts.TelephonyManagerTest.mCm = ((android.net.ConnectivityManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); mPackageManager = android.telephony.cts.TelephonyManagerTest.getContext().getPackageManager(); mNetworkScanStatus = android.telephony.cts.TelephonyManagerTest.EVENT_NETWORK_SCAN_COMPLETED; mTestHandlerThread = new android.telephony.cts.TelephonyManagerTest.NetworkScanHandlerThread(android.telephony.cts.TelephonyManagerTest.TAG); mTestHandlerThread.start(); },78182a0ee9a5ad833b428df18863fee51f001af0,@org.junit.Before public void setUp() throws java.lang.Exception { mTelephonyManager = ((android.telephony.TelephonyManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.TELEPHONY_SERVICE))); android.telephony.cts.TelephonyManagerTest.mCm = ((android.net.ConnectivityManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); mPackageManager = android.telephony.cts.TelephonyManagerTest.getContext().getPackageManager(); },d084d58b195fbc3ec59933a30fcdcbf7ad31173c,2018-01-22 16:59:19,10
584381,tests_tests_telephony_src_android_telephony_cts_TelephonyManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testRequestNetworkScan() throws java.lang.InterruptedException { if (!(mTelephonyManager.hasCarrierPrivileges())) { android.util.Log.d(android.telephony.cts.TelephonyManagerTest.TAG, ""Skipping test that requires carrier privileges.""); return; } int ranGsm = RadioNetworkConstants.RadioAccessNetworks.GERAN; int[] gsmBands = new int[]{ RadioNetworkConstants.GeranBands.BAND_T380, RadioNetworkConstants.GeranBands.BAND_T410 }; int[] gsmChannels = new int[]{ 1, 2, 3, 4 }; android.telephony.RadioAccessSpecifier gsm = new android.telephony.RadioAccessSpecifier(ranGsm, gsmBands, gsmChannels); int ranLte = RadioNetworkConstants.RadioAccessNetworks.EUTRAN; int[] lteBands = new int[]{ RadioNetworkConstants.EutranBands.BAND_10, RadioNetworkConstants.EutranBands.BAND_11 }; int[] lteChannels = new int[]{ 5, 6, 7, 8 }; android.telephony.RadioAccessSpecifier lte = new android.telephony.RadioAccessSpecifier(ranLte, lteBands, lteChannels); android.telephony.RadioAccessSpecifier[] radioAccessSpecifier = new android.telephony.RadioAccessSpecifier[]{ gsm, lte }; mNetworkScanRequest = new android.telephony.NetworkScanRequest(android.telephony.NetworkScanRequest.SCAN_TYPE_ONE_SHOT, radioAccessSpecifier, 5, 60, true, 10, null); mNetworkScanCallback = new android.telephony.cts.TelephonyManagerTest.NetworkScanCallbackImpl(); android.os.Message startNetworkScan = mHandler.obtainMessage(android.telephony.cts.TelephonyManagerTest.EVENT_NETWORK_SCAN_START); startNetworkScan.sendToTarget(); java.lang.Thread.sleep(android.telephony.cts.TelephonyManagerTest.MAX_INIT_WAIT_MS); android.util.Log.d(android.telephony.cts.TelephonyManagerTest.TAG, (""mNetworkScanStatus: "" + (mNetworkScanStatus))); assertTrue(""The final scan status is not ScanCompleted or ScanError"", scanCompleteStatus()); }",bcc8a02b1d2a4bb3bf2cf7c785d407bcfdcadf67,"@org.junit.Test public void testSetNetworkSelectionModeAutomatic() { try { mTelephonyManager.setNetworkSelectionModeAutomatic(); fail(""Expected SecurityException. App does not have carrier privileges.""); } catch (java.lang.SecurityException expected) { } }",65684e5a987096774553d9d39b597fa6cad5eb04,2018-01-22 16:59:19,10
593047,tests_net_java_com_android_server_IpSecServiceParameterizedTest.java,"@org.junit.Test public void testDeleteTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); mIpSecService.deleteTransportModeTransform(createTransformResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI)); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",876fd6e1d6787ca1553dacd0b3c8fe0e7e061230,"@org.junit.Test public void testDeleteTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransform(ipSecConfig, new android.os.Binder()); mIpSecService.deleteTransportModeTransform(createTransformResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI)); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",f7122956eff8440e5cbe473ec334fdeea24fb344,"@org.junit.Test public void testDeleteTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransform(ipSecConfig, new android.os.Binder()); mIpSecService.deleteTransform(createTransformResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI)); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",365d7f8370083255448c6de959cf366db20aa790,2018-01-22 17:57:13,6
590253,tests_tests_jvmti_attaching_src_android.jvmti.attaching.cts_AttachingTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.BeforeClass public static void prepareAgent3() throws java.lang.Exception { android.jvmti.attaching.cts.AttachingTest.sAgentFile3 = android.jvmti.attaching.cts.AttachingTest.copyAgentToFile(""jvmtiattachingtestagent3""); }",d522cfbc9cac9279717252cd6f7df2c4d0149a02,@org.junit.AfterClass public static void cleanupExtractedAgents() throws java.lang.Exception { for (java.io.File f : android.jvmti.attaching.cts.AttachingTest.createdFiles) { f.delete(); } android.jvmti.attaching.cts.AttachingTest.createdFiles.clear(); },5b1702a7b79f663f362646fe12652188e6c580cf,2018-01-22 18:22:05,2
590253,tests_tests_jvmti_attaching_src_android.jvmti.attaching.cts_AttachingTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.BeforeClass public static void prepareAgent() throws java.lang.Exception { android.jvmti.attaching.cts.AttachingTest.sAgentFile = android.jvmti.attaching.cts.AttachingTest.copyAgentToFile(""jvmtiattachingtestagent""); }",03734b660d0c05ca7fe728489306d2edc5bc5023,"private static java.io.File copyAgentToFile(java.lang.String lib) throws java.lang.Exception { java.lang.ClassLoader cl = android.jvmti.attaching.cts.AttachingTest.class.getClassLoader(); assertTrue((cl instanceof dalvik.system.BaseDexClassLoader)); java.io.File copiedAgent = java.io.File.createTempFile(""agent"", "".so""); try (java.io.InputStream is = new java.io.FileInputStream(((dalvik.system.BaseDexClassLoader) (cl)).findLibrary(lib))) { try (java.io.OutputStream os = new java.io.FileOutputStream(copiedAgent)) { byte[] buffer = new byte[64 * 1024]; while (true) { int numRead = is.read(buffer); if (numRead == (-1)) { break; } os.write(buffer, 0, numRead); } } } return copiedAgent; }",135ee9907abdcd5dcc0482d8b35a4195521e241a,2018-01-22 18:22:05,2
593291,src_java_com_android_internal_telephony_uicc_UiccController.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.android.internal.telephony.uicc.UiccSlot getUiccSlotForCardId(java.lang.String cardId) { synchronized(com.android.internal.telephony.uicc.UiccController.mLock) { for (com.android.internal.telephony.uicc.UiccSlot uiccSlot : mUiccSlots) { if (uiccSlot != null) { com.android.internal.telephony.uicc.UiccCard uiccCard = uiccSlot.getUiccCard(); if (uiccCard != null) { if (false) { return uiccSlot; } } } } for (com.android.internal.telephony.uicc.UiccSlot uiccSlot : mUiccSlots) { if ((uiccSlot != null) && (cardId.equals(uiccSlot.getIccId()))) { return uiccSlot; } } return null; } },b389daac8d980911a47dff73369a94b84c989265,public int getUiccSlotForCardId(java.lang.String cardId) { synchronized(com.android.internal.telephony.uicc.UiccController.mLock) { for (int idx = 0; idx < (mUiccSlots.length); idx++) { if ((mUiccSlots[idx]) != null) { com.android.internal.telephony.uicc.UiccCard uiccCard = mUiccSlots[idx].getUiccCard(); if (uiccCard != null) { if (false) { return idx; } } } } for (int idx = 0; idx < (mUiccSlots.length); idx++) { if (((mUiccSlots[idx]) != null) && (cardId.equals(mUiccSlots[idx].getIccId()))) { return idx; } } return com.android.internal.telephony.uicc.UiccController.INVALID_SLOT_ID; } },7aa57004ff9e5a5d49cd722d834d9876075720a8,2018-01-23 17:59:59,4
567849,tests_net_java_com_android_server_IpSecServiceParameterizedTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testCreateTwoTransportModeTransformsWithSameSpis() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); try { mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); fail(""IpSecService should have thrown an error for reuse of SPI""); } catch (java.lang.IllegalArgumentException expected) { } }",5e7756d0951a5d39276bf01127dc78f0ea96d3c7,"public void testCreateTwoTransformsWithSameSpis() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); try { mIpSecService.createTransform(ipSecConfig, new android.os.Binder()); fail(""IpSecService should have thrown an error for reuse of SPI""); } catch (java.lang.IllegalStateException expected) { } mIpSecService.deleteTransform(createTransformResp.resourceId); try { mIpSecService.createTransform(ipSecConfig, new android.os.Binder()); fail(""IpSecService should have thrown an error for reuse of SPI""); } catch (java.lang.IllegalStateException expected) { } }",29d796f37d8c16b7f6a7b49bc06a4f3323d619f6,2018-01-23 18:00:06,11
583256,tests_unit_src_com_android_bluetooth_btservice_PhonePolicyTest.java,"@org.junit.Before public void setUp() { org.mockito.MockitoAnnotations.initMocks(this); doReturn(mHeadsetService).when(mServiceFactory).getHeadsetService(); doReturn(mA2dpService).when(mServiceFactory).getA2dpService(); mHandlerThread = new android.os.HandlerThread(""PhonePolicyTestHandlerThread""); mHandlerThread.start(); mTestLooperManager = android.support.test.InstrumentationRegistry.getInstrumentation().acquireLooperManager(mHandlerThread.getLooper()); doReturn(mHandlerThread.getLooper()).when(mAdapterService).getMainLooper(); doReturn(true).when(mAdapterService).isMock(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); }",e6cb89a0cbf668b45f974bef377be6e0f1ff7f81,"@org.junit.Before public void setUp() { org.mockito.MockitoAnnotations.initMocks(this); doReturn(mHeadsetService).when(mServiceFactory).getHeadsetService(); doReturn(mA2dpService).when(mServiceFactory).getA2dpService(); mHandlerThread = new android.os.HandlerThread(""PhonePolicyTestHandlerThread""); mHandlerThread.start(); mTestLooperManager = android.support.test.InstrumentationRegistry.getInstrumentation().acquireLooperManager(mHandlerThread.getLooper()); doReturn(mHandlerThread.getLooper()).when(mAdapterService).getMainLooper(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); }",a1e25115215da022e987d0e4d9393aa462e4e05d,"@org.junit.Before public void setUp() { org.mockito.MockitoAnnotations.initMocks(this); doReturn(mHeadsetService).when(mServiceFactory).getHeadsetService(); doReturn(mA2dpService).when(mServiceFactory).getA2dpService(); mHandlerThread = new android.os.HandlerThread(""PhonePolicyTestHandlerThread""); mHandlerThread.start(); mTestLooperManager = android.support.test.InstrumentationRegistry.getInstrumentation().acquireLooperManager(mHandlerThread.getLooper()); doReturn(mHandlerThread.getLooper()).when(mAdapterService).getMainLooper(); doReturn(true).when(mAdapterService).isMock(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); }",e6cb89a0cbf668b45f974bef377be6e0f1ff7f81,2018-01-23 18:49:11,7
583256,src_com_android_bluetooth_btservice_AdapterService.java,"@java.lang.Override public void onDestroy() { debugLog(""onDestroy()""); mProfileObserver.stop(); if (!(isMock())) { android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, ""Force exit to cleanup internal state in Bluetooth stack""); java.lang.System.exit(0); } }",ff5eb32b146c39e624ba04bdcfa02aea5459b00f,"@java.lang.Override public void onDestroy() { debugLog(""onDestroy()""); mProfileObserver.stop(); }",67b06f204a3c6aff4e24b8a5b9ca8af81d26c53d,"@java.lang.Override public void onDestroy() { debugLog(""onDestroy()""); mProfileObserver.stop(); if (!(isMock())) { android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, ""Force exit to cleanup internal state in Bluetooth stack""); java.lang.System.exit(0); } }",ff5eb32b146c39e624ba04bdcfa02aea5459b00f,2018-01-23 18:49:11,7
594598,telephony_java_android_telephony_data_DataService.java,"public void deactivateDataCall(int cid, boolean reasonRadioShutDown, boolean isHandover, android.telephony.data.DataServiceCallback callback) { callback.onDeactivateDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED); }",496644ba773e04dda915ea6efc6381a81e0b6823,"public void deactivateDataCall(int cid, @android.telephony.data.DataService.RequestReason int reason, android.telephony.data.DataServiceCallback callback) { callback.onDeactivateDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED); }",01ed48c641ae4e97adcaa0ffd9874d42596f1788,"public void deactivateDataCall(int cid, @android.telephony.data.DataService.DeactivateDataReason int reason, android.telephony.data.DataServiceCallback callback) { callback.onDeactivateDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED); }",838b751796be8130e0a2a02afe3d475e807e339c,2018-01-23 19:43:23,3
594598,telephony_java_android_telephony_data_DataService.java,"public void setupDataCall(int accessNetworkType, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, boolean isHandover, android.net.LinkProperties linkProperties, android.telephony.data.DataServiceCallback callback) { callback.onSetupDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED, null); }",feb82cfa23669fa1e1288a82925f2b43290165d1,"public void setupDataCall(int accessNetworkType, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, @android.telephony.data.DataService.RequestReason int reason, android.net.LinkProperties linkProperties, android.telephony.data.DataServiceCallback callback) { callback.onSetupDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED, null); }",1df0593fb43c6fec93257941c4a3c6af9cfa3591,"public void setupDataCall(int accessNetworkType, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, @android.telephony.data.DataService.SetupDataReason int reason, android.net.LinkProperties linkProperties, android.telephony.data.DataServiceCallback callback) { callback.onSetupDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED, null); }",d62a50221e7ed42edc1a575eec362b5c9e9d3809,2018-01-23 19:43:23,3
593334,telephony_java_android_telephony_SignalStrength.java,@java.lang.Override public int hashCode() { int primeNum = 31; return ((((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaEcio) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrp) * primeNum)) + ((mLteRsrq) * primeNum)) + ((mLteRssnr) * primeNum)) + ((mLteCqi) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mTdScdmaRscp) * primeNum)) + (isGsm ? 1 : 0)) + (mUseOnlyRsrpForLteLevel ? 1 : 0); },9a1c261df7d15da12f7587b390303e0fada7cd33,@java.lang.Override public int hashCode() { int primeNum = 31; return ((((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaEcio) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrp) * primeNum)) + ((mLteRsrq) * primeNum)) + ((mLteRssnr) * primeNum)) + ((mLteCqi) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mTdScdmaRscp) * primeNum)) + (mIsGsm ? 1 : 0)) + (mUseOnlyRsrpForLteLevel ? 1 : 0); },e2fca8d27430592f76bfbbda567f529913d1c6a4,@java.lang.Override public int hashCode() { int primeNum = 31; return (((((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaEcio) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrp) * primeNum)) + ((mLteRsrq) * primeNum)) + ((mLteRssnr) * primeNum)) + ((mLteCqi) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mTdScdmaRscp) * primeNum)) + (mIsGsm ? 1 : 0)) + (mUseOnlyRsrpForLteLevel ? 1 : 0)) + (java.util.Arrays.hashCode(mLteRsrpThresholds)); },ac0c1ee5f99fe70077dd9ff019bc2eacdae2e2cb,2018-01-23 23:23:47,6
593334,telephony_java_android_telephony_SignalStrength.java,"public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mLteRsrpBoost); out.writeInt(mTdScdmaRscp); out.writeInt((isGsm ? 1 : 0)); out.writeInt((mUseOnlyRsrpForLteLevel ? 1 : 0)); }",af60b3b23d7d8f16b6b73fdee661ff65df1a7bb1,"public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mTdScdmaRscp); out.writeInt(mLteRsrpBoost); out.writeInt((mIsGsm ? 1 : 0)); out.writeInt((mUseOnlyRsrpForLteLevel ? 1 : 0)); }",98e06621c0dde8d8424ce9921e3f859dfe3a15fd,"public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mTdScdmaRscp); out.writeInt(mLteRsrpBoost); out.writeBoolean(mIsGsm); out.writeBoolean(mUseOnlyRsrpForLteLevel); out.writeIntArray(mLteRsrpThresholds); }",4ee656b7bf3aa4b0fac6ac1200783a51bc8182fb,2018-01-23 23:23:47,6
593286,tests_telephonytests_src_com_android_internal_telephony_SignalStrengthTest.java,,,"private void assertParcelingIsLossless(com.android.internal.telephony.SignalStrength ssi) throws java.lang.Exception { android.os.Parcel p = android.os.Parcel.obtain(); ssi.writeToParcel(p, 0); p.setDataPosition(0); com.android.internal.telephony.SignalStrength sso = SignalStrength.CREATOR.createFromParcel(p); assertTrue(sso.equals(ssi)); }",c311c3625d6e22c9dc353030351781506fee892f,"private void assertParcelingIsLossless(android.telephony.SignalStrength ssi) throws java.lang.Exception { android.os.Parcel p = android.os.Parcel.obtain(); ssi.writeToParcel(p, 0); p.setDataPosition(0); android.telephony.SignalStrength sso = SignalStrength.CREATOR.createFromParcel(p); assertTrue(sso.equals(ssi)); }",21b773624225fa2485ddd8abecb487d1dba78e21,2018-01-23 23:23:47,4
593286,tests_telephonytests_src_com_android_internal_telephony_SignalStrengthTest.java,,,"@org.junit.Test public void testDefaults() throws java.lang.Exception { com.android.internal.telephony.SignalStrength s = new com.android.internal.telephony.SignalStrength(); assertEquals((-1), s.getCdmaDbm()); assertEquals((-1), s.getCdmaEcio()); assertEquals((-1), s.getEvdoDbm()); assertEquals((-1), s.getEvdoEcio()); assertEquals((-1), s.getEvdoSnr()); assertEquals((-1), s.getGsmBitErrorRate()); assertEquals(99, s.getGsmSignalStrength()); assertEquals(true, s.isGsm()); }",c20fabb80564eb567c7c87c7830f4b31d43ceef5,"@org.junit.Test public void testDefaults() throws java.lang.Exception { android.telephony.SignalStrength s = new android.telephony.SignalStrength(); assertEquals((-1), s.getCdmaDbm()); assertEquals((-1), s.getCdmaEcio()); assertEquals((-1), s.getEvdoDbm()); assertEquals((-1), s.getEvdoEcio()); assertEquals((-1), s.getEvdoSnr()); assertEquals((-1), s.getGsmBitErrorRate()); assertEquals(99, s.getGsmSignalStrength()); assertEquals(true, s.isGsm()); }",cf360497e8afd074ced7a5882abf58be7fb00fde,2018-01-23 23:23:47,4
593334,telephony_java_android_telephony_SignalStrength.java,"private void setFromNotifierBundle(android.os.Bundle m) { mGsmSignalStrength = m.getInt(""GsmSignalStrength""); mGsmBitErrorRate = m.getInt(""GsmBitErrorRate""); mCdmaDbm = m.getInt(""CdmaDbm""); mCdmaEcio = m.getInt(""CdmaEcio""); mEvdoDbm = m.getInt(""EvdoDbm""); mEvdoEcio = m.getInt(""EvdoEcio""); mEvdoSnr = m.getInt(""EvdoSnr""); mLteSignalStrength = m.getInt(""LteSignalStrength""); mLteRsrp = m.getInt(""LteRsrp""); mLteRsrq = m.getInt(""LteRsrq""); mLteRssnr = m.getInt(""LteRssnr""); mLteCqi = m.getInt(""LteCqi""); mLteRsrpBoost = m.getInt(""lteRsrpBoost""); mTdScdmaRscp = m.getInt(""TdScdma""); isGsm = m.getBoolean(""isGsm""); mUseOnlyRsrpForLteLevel = m.getBoolean(""useOnlyRsrpForLteLevel""); }",5b37cac34b510339998e104045a4332b0f1f28c3,"private void setFromNotifierBundle(android.os.Bundle m) { mGsmSignalStrength = m.getInt(""GsmSignalStrength""); mGsmBitErrorRate = m.getInt(""GsmBitErrorRate""); mCdmaDbm = m.getInt(""CdmaDbm""); mCdmaEcio = m.getInt(""CdmaEcio""); mEvdoDbm = m.getInt(""EvdoDbm""); mEvdoEcio = m.getInt(""EvdoEcio""); mEvdoSnr = m.getInt(""EvdoSnr""); mLteSignalStrength = m.getInt(""LteSignalStrength""); mLteRsrp = m.getInt(""LteRsrp""); mLteRsrq = m.getInt(""LteRsrq""); mLteRssnr = m.getInt(""LteRssnr""); mLteCqi = m.getInt(""LteCqi""); mLteRsrpBoost = m.getInt(""LteRsrpBoost""); mTdScdmaRscp = m.getInt(""TdScdma""); mIsGsm = m.getBoolean(""IsGsm""); mUseOnlyRsrpForLteLevel = m.getBoolean(""UseOnlyRsrpForLteLevel""); }",38e7693875f47121983ece295dfb995b929e23cd,"private void setFromNotifierBundle(android.os.Bundle m) { mGsmSignalStrength = m.getInt(""GsmSignalStrength""); mGsmBitErrorRate = m.getInt(""GsmBitErrorRate""); mCdmaDbm = m.getInt(""CdmaDbm""); mCdmaEcio = m.getInt(""CdmaEcio""); mEvdoDbm = m.getInt(""EvdoDbm""); mEvdoEcio = m.getInt(""EvdoEcio""); mEvdoSnr = m.getInt(""EvdoSnr""); mLteSignalStrength = m.getInt(""LteSignalStrength""); mLteRsrp = m.getInt(""LteRsrp""); mLteRsrq = m.getInt(""LteRsrq""); mLteRssnr = m.getInt(""LteRssnr""); mLteCqi = m.getInt(""LteCqi""); mLteRsrpBoost = m.getInt(""LteRsrpBoost""); mTdScdmaRscp = m.getInt(""TdScdma""); mIsGsm = m.getBoolean(""IsGsm""); mUseOnlyRsrpForLteLevel = m.getBoolean(""UseOnlyRsrpForLteLevel""); java.util.ArrayList<java.lang.Integer> lteRsrpThresholds = m.getIntegerArrayList(""lteRsrpThresholds""); for (int i = 0; i < (lteRsrpThresholds.size()); i++) { mLteRsrpThresholds[i] = lteRsrpThresholds.get(i); } }",9e5178b51e6bc8632abd32fce9d9fe3adff11cdc,2018-01-23 23:23:47,6
593334,telephony_java_android_telephony_SignalStrength.java,"public void fillInNotifierBundle(android.os.Bundle m) { m.putInt(""GsmSignalStrength"", mGsmSignalStrength); m.putInt(""GsmBitErrorRate"", mGsmBitErrorRate); m.putInt(""CdmaDbm"", mCdmaDbm); m.putInt(""CdmaEcio"", mCdmaEcio); m.putInt(""EvdoDbm"", mEvdoDbm); m.putInt(""EvdoEcio"", mEvdoEcio); m.putInt(""EvdoSnr"", mEvdoSnr); m.putInt(""LteSignalStrength"", mLteSignalStrength); m.putInt(""LteRsrp"", mLteRsrp); m.putInt(""LteRsrq"", mLteRsrq); m.putInt(""LteRssnr"", mLteRssnr); m.putInt(""LteCqi"", mLteCqi); m.putInt(""lteRsrpBoost"", mLteRsrpBoost); m.putInt(""TdScdma"", mTdScdmaRscp); m.putBoolean(""isGsm"", isGsm); m.putBoolean(""useOnlyRsrpForLteLevel"", mUseOnlyRsrpForLteLevel); }",7ff536e953e408b41381667f391dbc2acec88355,"public void fillInNotifierBundle(android.os.Bundle m) { m.putInt(""GsmSignalStrength"", mGsmSignalStrength); m.putInt(""GsmBitErrorRate"", mGsmBitErrorRate); m.putInt(""CdmaDbm"", mCdmaDbm); m.putInt(""CdmaEcio"", mCdmaEcio); m.putInt(""EvdoDbm"", mEvdoDbm); m.putInt(""EvdoEcio"", mEvdoEcio); m.putInt(""EvdoSnr"", mEvdoSnr); m.putInt(""LteSignalStrength"", mLteSignalStrength); m.putInt(""LteRsrp"", mLteRsrp); m.putInt(""LteRsrq"", mLteRsrq); m.putInt(""LteRssnr"", mLteRssnr); m.putInt(""LteCqi"", mLteCqi); m.putInt(""LteRsrpBoost"", mLteRsrpBoost); m.putInt(""TdScdma"", mTdScdmaRscp); m.putBoolean(""IsGsm"", mIsGsm); m.putBoolean(""UseOnlyRsrpForLteLevel"", mUseOnlyRsrpForLteLevel); }",95ea8fc4890d17f7727d39bd546ece2b87f5ca3c,"public void fillInNotifierBundle(android.os.Bundle m) { m.putInt(""GsmSignalStrength"", mGsmSignalStrength); m.putInt(""GsmBitErrorRate"", mGsmBitErrorRate); m.putInt(""CdmaDbm"", mCdmaDbm); m.putInt(""CdmaEcio"", mCdmaEcio); m.putInt(""EvdoDbm"", mEvdoDbm); m.putInt(""EvdoEcio"", mEvdoEcio); m.putInt(""EvdoSnr"", mEvdoSnr); m.putInt(""LteSignalStrength"", mLteSignalStrength); m.putInt(""LteRsrp"", mLteRsrp); m.putInt(""LteRsrq"", mLteRsrq); m.putInt(""LteRssnr"", mLteRssnr); m.putInt(""LteCqi"", mLteCqi); m.putInt(""LteRsrpBoost"", mLteRsrpBoost); m.putInt(""TdScdma"", mTdScdmaRscp); m.putBoolean(""IsGsm"", mIsGsm); m.putBoolean(""UseOnlyRsrpForLteLevel"", mUseOnlyRsrpForLteLevel); java.util.ArrayList<java.lang.Integer> lteRsrpThresholds = new java.util.ArrayList<java.lang.Integer>(); for (int value : mLteRsrpThresholds) { lteRsrpThresholds.add(value); } m.putIntegerArrayList(""lteRsrpThresholds"", lteRsrpThresholds); }",f91385390a719ec890848020e4276226479fd9af,2018-01-23 23:23:47,6
593334,telephony_java_android_telephony_SignalStrength.java,protected void copyFrom(android.telephony.SignalStrength s) { mGsmSignalStrength = s.mGsmSignalStrength; mGsmBitErrorRate = s.mGsmBitErrorRate; mCdmaDbm = s.mCdmaDbm; mCdmaEcio = s.mCdmaEcio; mEvdoDbm = s.mEvdoDbm; mEvdoEcio = s.mEvdoEcio; mEvdoSnr = s.mEvdoSnr; mLteSignalStrength = s.mLteSignalStrength; mLteRsrp = s.mLteRsrp; mLteRsrq = s.mLteRsrq; mLteRssnr = s.mLteRssnr; mLteCqi = s.mLteCqi; mLteRsrpBoost = s.mLteRsrpBoost; mTdScdmaRscp = s.mTdScdmaRscp; isGsm = s.isGsm; mUseOnlyRsrpForLteLevel = s.mUseOnlyRsrpForLteLevel; },9c1839d60820db33c6afab56da05dca36cfd161b,protected void copyFrom(android.telephony.SignalStrength s) { mGsmSignalStrength = s.mGsmSignalStrength; mGsmBitErrorRate = s.mGsmBitErrorRate; mCdmaDbm = s.mCdmaDbm; mCdmaEcio = s.mCdmaEcio; mEvdoDbm = s.mEvdoDbm; mEvdoEcio = s.mEvdoEcio; mEvdoSnr = s.mEvdoSnr; mLteSignalStrength = s.mLteSignalStrength; mLteRsrp = s.mLteRsrp; mLteRsrq = s.mLteRsrq; mLteRssnr = s.mLteRssnr; mLteCqi = s.mLteCqi; mTdScdmaRscp = s.mTdScdmaRscp; mLteRsrpBoost = s.mLteRsrpBoost; mIsGsm = s.mIsGsm; mUseOnlyRsrpForLteLevel = s.mUseOnlyRsrpForLteLevel; },95d66bfa7b6632f4c0c1667bc656d0b0554fa8e2,protected void copyFrom(android.telephony.SignalStrength s) { mGsmSignalStrength = s.mGsmSignalStrength; mGsmBitErrorRate = s.mGsmBitErrorRate; mCdmaDbm = s.mCdmaDbm; mCdmaEcio = s.mCdmaEcio; mEvdoDbm = s.mEvdoDbm; mEvdoEcio = s.mEvdoEcio; mEvdoSnr = s.mEvdoSnr; mLteSignalStrength = s.mLteSignalStrength; mLteRsrp = s.mLteRsrp; mLteRsrq = s.mLteRsrq; mLteRssnr = s.mLteRssnr; mLteCqi = s.mLteCqi; mTdScdmaRscp = s.mTdScdmaRscp; mLteRsrpBoost = s.mLteRsrpBoost; mIsGsm = s.mIsGsm; mUseOnlyRsrpForLteLevel = s.mUseOnlyRsrpForLteLevel; setLteRsrpThresholds(s.mLteRsrpThresholds); },99b9b3a06ee6a0c77612e8bc65b1194bfab4465e,2018-01-23 23:23:47,6
593334,telephony_java_android_telephony_SignalStrength.java,@java.lang.Override public boolean equals(java.lang.Object o) { android.telephony.SignalStrength s; try { s = ((android.telephony.SignalStrength) (o)); } catch (java.lang.ClassCastException ex) { return false; } if (o == null) { return false; } return ((((((((((((((((mGsmSignalStrength) == (s.mGsmSignalStrength)) && ((mGsmBitErrorRate) == (s.mGsmBitErrorRate))) && ((mCdmaDbm) == (s.mCdmaDbm))) && ((mCdmaEcio) == (s.mCdmaEcio))) && ((mEvdoDbm) == (s.mEvdoDbm))) && ((mEvdoEcio) == (s.mEvdoEcio))) && ((mEvdoSnr) == (s.mEvdoSnr))) && ((mLteSignalStrength) == (s.mLteSignalStrength))) && ((mLteRsrp) == (s.mLteRsrp))) && ((mLteRsrq) == (s.mLteRsrq))) && ((mLteRssnr) == (s.mLteRssnr))) && ((mLteCqi) == (s.mLteCqi))) && ((mLteRsrpBoost) == (s.mLteRsrpBoost))) && ((mTdScdmaRscp) == (s.mTdScdmaRscp))) && ((isGsm) == (s.isGsm))) && ((mUseOnlyRsrpForLteLevel) == (s.mUseOnlyRsrpForLteLevel)); },a51643e639b18c84c4445c09940dc50c504d7f45,@java.lang.Override public boolean equals(java.lang.Object o) { android.telephony.SignalStrength s; try { s = ((android.telephony.SignalStrength) (o)); } catch (java.lang.ClassCastException ex) { return false; } if (o == null) { return false; } return ((((((((((((((((mGsmSignalStrength) == (s.mGsmSignalStrength)) && ((mGsmBitErrorRate) == (s.mGsmBitErrorRate))) && ((mCdmaDbm) == (s.mCdmaDbm))) && ((mCdmaEcio) == (s.mCdmaEcio))) && ((mEvdoDbm) == (s.mEvdoDbm))) && ((mEvdoEcio) == (s.mEvdoEcio))) && ((mEvdoSnr) == (s.mEvdoSnr))) && ((mLteSignalStrength) == (s.mLteSignalStrength))) && ((mLteRsrp) == (s.mLteRsrp))) && ((mLteRsrq) == (s.mLteRsrq))) && ((mLteRssnr) == (s.mLteRssnr))) && ((mLteCqi) == (s.mLteCqi))) && ((mLteRsrpBoost) == (s.mLteRsrpBoost))) && ((mTdScdmaRscp) == (s.mTdScdmaRscp))) && ((mIsGsm) == (s.mIsGsm))) && ((mUseOnlyRsrpForLteLevel) == (s.mUseOnlyRsrpForLteLevel)); },9518ee4b5bf4b8ca747e0c44c6a14ce248a6c223,"@java.lang.Override public boolean equals(java.lang.Object o) { android.telephony.SignalStrength s; try { s = ((android.telephony.SignalStrength) (o)); } catch (java.lang.ClassCastException ex) { return false; } if (o == null) { return false; } return (((((((((((((((((mGsmSignalStrength) == (s.mGsmSignalStrength)) && ((mGsmBitErrorRate) == (s.mGsmBitErrorRate))) && ((mCdmaDbm) == (s.mCdmaDbm))) && ((mCdmaEcio) == (s.mCdmaEcio))) && ((mEvdoDbm) == (s.mEvdoDbm))) && ((mEvdoEcio) == (s.mEvdoEcio))) && ((mEvdoSnr) == (s.mEvdoSnr))) && ((mLteSignalStrength) == (s.mLteSignalStrength))) && ((mLteRsrp) == (s.mLteRsrp))) && ((mLteRsrq) == (s.mLteRsrq))) && ((mLteRssnr) == (s.mLteRssnr))) && ((mLteCqi) == (s.mLteCqi))) && ((mLteRsrpBoost) == (s.mLteRsrpBoost))) && ((mTdScdmaRscp) == (s.mTdScdmaRscp))) && ((mIsGsm) == (s.mIsGsm))) && ((mUseOnlyRsrpForLteLevel) == (s.mUseOnlyRsrpForLteLevel))) && (java.util.Arrays.equals(mLteRsrpThresholds, s.mLteRsrpThresholds)); }",ace50bb29013ac613e8e06392ff7fa9b9a737773,2018-01-23 23:23:47,6
593286,tests_telephonytests_src_com_android_internal_telephony_SignalStrengthTest.java,,,"@org.junit.Test public void testParcelUnparcel() throws java.lang.Exception { assertParcelingIsLossless(new com.android.internal.telephony.SignalStrength()); com.android.internal.telephony.SignalStrength s = new com.android.internal.telephony.SignalStrength(20, 5, (-95), 10, (-98), (-5), (-2), 45, (-105), (-110), (-115), 13, (-90), 2, false, true); assertParcelingIsLossless(s); }",bb4748310bd9b51be70b676e57cd14669ac55b5b,"@org.junit.Test public void testParcelUnparcel() throws java.lang.Exception { assertParcelingIsLossless(new android.telephony.SignalStrength()); android.telephony.SignalStrength s = new android.telephony.SignalStrength(20, 5, (-95), 10, (-98), (-5), (-2), 45, (-105), (-110), (-115), 13, (-90), 2, false, true); assertParcelingIsLossless(s); }",8d03cdc165d2457e25ff980415eec96b70d2467c,2018-01-23 23:23:47,4
593334,telephony_java_android_telephony_SignalStrength.java,"@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((((((((((((((""SignalStrength:"" + "" "") + (mGsmSignalStrength)) + "" "") + (mGsmBitErrorRate)) + "" "") + (mCdmaDbm)) + "" "") + (mCdmaEcio)) + "" "") + (mEvdoDbm)) + "" "") + (mEvdoEcio)) + "" "") + (mEvdoSnr)) + "" "") + (mLteSignalStrength)) + "" "") + (mLteRsrp)) + "" "") + (mLteRsrq)) + "" "") + (mLteRssnr)) + "" "") + (mLteCqi)) + "" "") + (mLteRsrpBoost)) + "" "") + (mTdScdmaRscp)) + "" "") + (isGsm ? ""gsm|lte"" : ""cdma"")) + "" "") + (mUseOnlyRsrpForLteLevel ? ""use_only_rsrp_for_lte_level"" : ""use_rsrp_and_rssnr_for_lte_level""); }",aa839c2d1fbafb20e35f2a32f32dfdf1588ef35b,"@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((((((((((((((""SignalStrength:"" + "" "") + (mGsmSignalStrength)) + "" "") + (mGsmBitErrorRate)) + "" "") + (mCdmaDbm)) + "" "") + (mCdmaEcio)) + "" "") + (mEvdoDbm)) + "" "") + (mEvdoEcio)) + "" "") + (mEvdoSnr)) + "" "") + (mLteSignalStrength)) + "" "") + (mLteRsrp)) + "" "") + (mLteRsrq)) + "" "") + (mLteRssnr)) + "" "") + (mLteCqi)) + "" "") + (mLteRsrpBoost)) + "" "") + (mTdScdmaRscp)) + "" "") + (mIsGsm ? ""gsm|lte"" : ""cdma"")) + "" "") + (mUseOnlyRsrpForLteLevel ? ""use_only_rsrp_for_lte_level"" : ""use_rsrp_and_rssnr_for_lte_level""); }",e310329dfdaa76dcaafdb4c086bb774499fa3aa7,"@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((((((((((((((((""SignalStrength:"" + "" "") + (mGsmSignalStrength)) + "" "") + (mGsmBitErrorRate)) + "" "") + (mCdmaDbm)) + "" "") + (mCdmaEcio)) + "" "") + (mEvdoDbm)) + "" "") + (mEvdoEcio)) + "" "") + (mEvdoSnr)) + "" "") + (mLteSignalStrength)) + "" "") + (mLteRsrp)) + "" "") + (mLteRsrq)) + "" "") + (mLteRssnr)) + "" "") + (mLteCqi)) + "" "") + (mLteRsrpBoost)) + "" "") + (mTdScdmaRscp)) + "" "") + (mIsGsm ? ""gsm|lte"" : ""cdma"")) + "" "") + (mUseOnlyRsrpForLteLevel ? ""use_only_rsrp_for_lte_level"" : ""use_rsrp_and_rssnr_for_lte_level"")) + "" "") + (java.util.Arrays.toString(mLteRsrpThresholds)); }",7e34b96e5d156010fefcf4023e1430cef03df637,2018-01-23 23:23:47,6
516695,telephony_java_android_telephony_SignalStrength.java,"public int getAsuLevel() { int asuLevel = 0; if (isGsm) { if ((getLteLevel()) == (android.telephony.SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN)) { if ((getTdScdmaLevel()) == (android.telephony.SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN)) { asuLevel = getGsmAsuLevel(); } else { asuLevel = getTdScdmaAsuLevel(); } } else { asuLevel = getLteAsuLevel(); } } else { int cdmaAsuLevel = getCdmaAsuLevel(); int evdoAsuLevel = getEvdoAsuLevel(); if (evdoAsuLevel == 0) { asuLevel = cdmaAsuLevel; } else if (cdmaAsuLevel == 0) { asuLevel = evdoAsuLevel; } else { asuLevel = (cdmaAsuLevel < evdoAsuLevel) ? cdmaAsuLevel : evdoAsuLevel; } } if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log((""getAsuLevel="" + asuLevel)); return asuLevel; }",f532db11b6bd4f4ff1c47403c825388ad7b61fa8,"public int getAsuLevel() { int asuLevel = 0; if (isGsm) { if ((mLteRsrp) == (android.telephony.SignalStrength.INVALID)) { if ((mTdScdmaRscp) == (android.telephony.SignalStrength.INVALID)) { asuLevel = getGsmAsuLevel(); } else { asuLevel = getTdScdmaAsuLevel(); } } else { asuLevel = getLteAsuLevel(); } } else { int cdmaAsuLevel = getCdmaAsuLevel(); int evdoAsuLevel = getEvdoAsuLevel(); if (evdoAsuLevel == 0) { asuLevel = cdmaAsuLevel; } else if (cdmaAsuLevel == 0) { asuLevel = evdoAsuLevel; } else { asuLevel = (cdmaAsuLevel < evdoAsuLevel) ? cdmaAsuLevel : evdoAsuLevel; } } if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log((""getAsuLevel="" + asuLevel)); return asuLevel; }",55cfde36f8ccd0799a4af7934f5b9912a3ed42ec,"public int getAsuLevel() { int asuLevel = 0; if (mIsGsm) { if ((mLteRsrp) != (android.telephony.SignalStrength.INVALID)) { asuLevel = getLteAsuLevel(); } else if ((mTdScdmaRscp) != (android.telephony.SignalStrength.INVALID)) { asuLevel = getTdScdmaAsuLevel(); } else { asuLevel = getGsmAsuLevel(); } } else { int cdmaAsuLevel = getCdmaAsuLevel(); int evdoAsuLevel = getEvdoAsuLevel(); if (evdoAsuLevel == 0) { asuLevel = cdmaAsuLevel; } else if (cdmaAsuLevel == 0) { asuLevel = evdoAsuLevel; } else { asuLevel = (cdmaAsuLevel < evdoAsuLevel) ? cdmaAsuLevel : evdoAsuLevel; } } if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log((""getAsuLevel="" + asuLevel)); return asuLevel; }",178ecd3964fa0420facb47a09527fd13663323cf,2018-01-23 23:23:47,5
594260,telephony_java_android_telephony_euicc_EuiccManager.java,"public void updateSubscriptionNickname(int subscriptionId, java.lang.String nickname, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().updateSubscriptionNickname(subscriptionId, nickname, callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",b3404c8f8fa8d716cbbbcac35a8e876912206050,"public void updateSubscriptionNickname(int subscriptionId, java.lang.String nickname, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.updateSubscriptionNickname(subscriptionId, nickname, callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",4754b19f1714fd9bb027231403bbfb309f5f813f,"public void updateSubscriptionNickname(int subscriptionId, java.lang.String nickname, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().updateSubscriptionNickname(subscriptionId, nickname, callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",9b28965b7bbe90cb87d25db67a6f843738f564e6,2018-01-24 01:09:43,3
594260,telephony_java_android_telephony_euicc_EuiccManager.java,"public void switchToSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().switchToSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",12082844fbdf03b19f5e363ac6c19bec149cb105,"public void switchToSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.switchToSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",3b1c2fd2c3cfa9b7096c11096693b27e54eb59b7,"public void switchToSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().switchToSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",b44de9374f3afb5ca79e68de7e16af02c7fd54cb,2018-01-24 01:09:43,3
594260,telephony_java_android_telephony_euicc_EuiccManager.java,"public void deleteSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().deleteSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",5f68ae412a44b7c913e2f6ca38a5689b7d081faa,"public void deleteSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.deleteSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",e492d0442dcc33fb28eb68b60f5d4de108835ce1,"public void deleteSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().deleteSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",d8f7a7e4a260540fd0c488e01ee4930cec9a2108,2018-01-24 01:09:43,3
594260,telephony_java_android_telephony_euicc_EuiccManager.java,"public void continueOperation(android.content.Intent resolutionIntent, android.os.Bundle resolutionExtras) { if (!(isEnabled())) { android.app.PendingIntent callbackIntent = resolutionIntent.getParcelableExtra(android.telephony.euicc.EuiccManager.EXTRA_EMBEDDED_SUBSCRIPTION_RESOLUTION_CALLBACK_INTENT); if (callbackIntent != null) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); } return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().continueOperation(resolutionIntent, resolutionExtras); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",59735a5061dbc6778a6665cc2f54555d06cf172f,"public void continueOperation(android.content.Intent resolutionIntent, android.os.Bundle resolutionExtras) { if (!(isEnabled())) { android.app.PendingIntent callbackIntent = resolutionIntent.getParcelableExtra(android.telephony.euicc.EuiccManager.EXTRA_EMBEDDED_SUBSCRIPTION_RESOLUTION_CALLBACK_INTENT); if (callbackIntent != null) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); } return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.continueOperation(resolutionIntent, resolutionExtras); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",41d09a09e64917fdccc73fecdff0f60595557276,"public void continueOperation(android.content.Intent resolutionIntent, android.os.Bundle resolutionExtras) { if (!(isEnabled())) { android.app.PendingIntent callbackIntent = resolutionIntent.getParcelableExtra(android.telephony.euicc.EuiccManager.EXTRA_EMBEDDED_SUBSCRIPTION_RESOLUTION_CALLBACK_INTENT); if (callbackIntent != null) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); } return; } try { getIEuiccController().continueOperation(resolutionIntent, resolutionExtras); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",622365af31673f7f9e7f59c5f91db131d9de4f44,2018-01-24 01:09:43,3
594260,telephony_java_android_telephony_euicc_EuiccManager.java,public void eraseSubscriptions(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().eraseSubscriptions(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },47ae3f1fa23190c5694701fb6f464bd7079c7ea5,public void eraseSubscriptions(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.eraseSubscriptions(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },ab9e380709216b576029fa1ee1ca6f03115a5d72,public void eraseSubscriptions(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().eraseSubscriptions(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },0138b8a2c5f327ea4f72507d5cee20909dc207fa,2018-01-24 01:09:43,3
594260,telephony_java_android_telephony_euicc_EuiccManager.java,"public void downloadSubscription(android.telephony.euicc.DownloadableSubscription subscription, boolean switchAfterDownload, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().downloadSubscription(subscription, switchAfterDownload, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",3c0fd7c456e18f014b2267ab0890f8400fd1c802,"public void downloadSubscription(android.telephony.euicc.DownloadableSubscription subscription, boolean switchAfterDownload, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.downloadSubscription(subscription, switchAfterDownload, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",d7bfcd42f7d04d4fadbea459e1c95ee2f4c7f49a,"public void downloadSubscription(android.telephony.euicc.DownloadableSubscription subscription, boolean switchAfterDownload, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().downloadSubscription(subscription, switchAfterDownload, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",1e36e389d5077c9573592e9094cf9340ad4640d1,2018-01-24 01:09:43,3
594260,telephony_java_android_telephony_euicc_EuiccManager.java,"public void getDownloadableSubscriptionMetadata(android.telephony.euicc.DownloadableSubscription subscription, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().getDownloadableSubscriptionMetadata(subscription, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",09006bb377f4e04a4a735cd0700343acdcffd62c,"public void getDownloadableSubscriptionMetadata(android.telephony.euicc.DownloadableSubscription subscription, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.getDownloadableSubscriptionMetadata(subscription, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",ec05f812c272284feb778b575972bc8e7fbcb6a5,"public void getDownloadableSubscriptionMetadata(android.telephony.euicc.DownloadableSubscription subscription, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().getDownloadableSubscriptionMetadata(subscription, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",e422e5fbf882a07ba1f99edd4afc84cf070aec33,2018-01-24 01:09:43,3
594260,telephony_java_android_telephony_euicc_EuiccManager.java,@android.annotation.Nullable public android.telephony.euicc.EuiccInfo getEuiccInfo() { if (!(isEnabled())) { return null; } try { return android.telephony.euicc.EuiccManager.getIEuiccController().getEuiccInfo(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },c4d454ff1d75b775f2ee30704729845dbb08d3e4,@android.annotation.Nullable public android.telephony.euicc.EuiccInfo getEuiccInfo() { if (!(isEnabled())) { return null; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return null; try { return controller.getEuiccInfo(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },10f4d6a11995a08024556cb751ff62b3eae83b24,@android.annotation.Nullable public android.telephony.euicc.EuiccInfo getEuiccInfo() { if (!(isEnabled())) { return null; } try { return getIEuiccController().getEuiccInfo(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },8243aa719d49ca00d8b9af06c5eeeaa6245baaad,2018-01-24 01:09:43,3
594260,telephony_java_android_telephony_euicc_EuiccManager.java,"private static com.android.internal.telephony.euicc.IEuiccController getIEuiccController() { return IEuiccController.Stub.asInterface(android.os.ServiceManager.getService(""econtroller"")); }",98fade2e62d661464782950b4ad9d9c81856b920,"protected com.android.internal.telephony.euicc.IEuiccController getIEuiccController() { return IEuiccController.Stub.asInterface(android.os.ServiceManager.getService(""econtroller"")); }",75774f161a04a702211d1f5c5415e32fc73e64f3,"@android.annotation.TestApi protected com.android.internal.telephony.euicc.IEuiccController getIEuiccController() { return IEuiccController.Stub.asInterface(android.os.ServiceManager.getService(""econtroller"")); }",e95cc84a65e35fd05a9bdb81d67324460ceb9a46,2018-01-24 01:09:43,3
594260,telephony_java_android_telephony_euicc_EuiccManager.java,"public void getDefaultDownloadableSubscriptionList(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().getDefaultDownloadableSubscriptionList(mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",c03ce8b8e6f5fe6c34504a2a942994b7c40a4b9d,"public void getDefaultDownloadableSubscriptionList(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.getDefaultDownloadableSubscriptionList(mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",65bf4d00fcc6a67433afac0c72925231439686a1,"public void getDefaultDownloadableSubscriptionList(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().getDefaultDownloadableSubscriptionList(mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",a34b4390b299ef5c37f46425a548bf72cbe427b9,2018-01-24 01:09:43,3
594260,telephony_java_android_telephony_euicc_EuiccManager.java,@android.annotation.SystemApi public int getOtaStatus() { if (!(isEnabled())) { return android.telephony.euicc.EuiccManager.EUICC_OTA_STATUS_UNAVAILABLE; } try { return android.telephony.euicc.EuiccManager.getIEuiccController().getOtaStatus(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },70ab61212280bdc0760836e721d917b0511c536e,@android.annotation.SystemApi public int getOtaStatus() { if (!(isEnabled())) { return android.telephony.euicc.EuiccManager.EUICC_OTA_STATUS_UNAVAILABLE; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return android.telephony.euicc.EuiccManager.EUICC_OTA_STATUS_UNAVAILABLE; try { return controller.getOtaStatus(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },0b446dad5463e0731cfb21c3867438bba6f55f8c,@android.annotation.SystemApi public int getOtaStatus() { if (!(isEnabled())) { return android.telephony.euicc.EuiccManager.EUICC_OTA_STATUS_UNAVAILABLE; } try { return getIEuiccController().getOtaStatus(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },a6b2519c620dcdf89c8f93735d4ea79e4d52f553,2018-01-24 01:09:43,3
594260,telephony_java_android_telephony_euicc_EuiccManager.java,@android.annotation.Nullable public java.lang.String getEid() { if (!(isEnabled())) { return null; } try { return android.telephony.euicc.EuiccManager.getIEuiccController().getEid(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },a149748101f70c2eeec0bd04b6bdab8c121707e0,@android.annotation.Nullable public java.lang.String getEid() { if (!(isEnabled())) { return null; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return null; try { return controller.getEid(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },5ab29720fcbb11a1d49b3e62f531df3f9e9cd43a,@android.annotation.Nullable public java.lang.String getEid() { if (!(isEnabled())) { return null; } try { return getIEuiccController().getEid(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },3ecfcc3253dfbe9b3d9f32f5d11b4f1821b09019,2018-01-24 01:09:43,3
594260,telephony_java_android_telephony_euicc_EuiccManager.java,public void retainSubscriptionsForFactoryReset(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().retainSubscriptionsForFactoryReset(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },458f273a553b2ea6f421c3e7ebd3a1d885b60ead,public void retainSubscriptionsForFactoryReset(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.retainSubscriptionsForFactoryReset(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },965520db72c1d2c63c24f3e1f88f97fd99a71bdd,public void retainSubscriptionsForFactoryReset(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().retainSubscriptionsForFactoryReset(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },bfb4b04c2ed286a307afd306bdf96c945549f208,2018-01-24 01:09:43,3
595619,src_java_com_android_internal_telephony_RadioConfig.java,,,"private static java.lang.String requestToString(int request) { switch (request) { case com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_SLOT_STATUS : return ""GET_SLOT_STATUS""; default : return ""<unknown request>""; } }",02cd6902ebd9c884157f128a9ec799e3084677cb,"private static java.lang.String requestToString(int request) { switch (request) { case com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_SLOT_STATUS : return ""GET_SLOT_STATUS""; case com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_LOGICAL_TO_PHYSICAL_SLOT_MAPPING : return ""SET_LOGICAL_TO_PHYSICAL_SLOT_MAPPING""; default : return ""<unknown request>""; } }",77e7b7e5179e3769f521a2269574e3cde5655cee,2018-01-24 01:49:24,5
517965,src_java_com_android_internal_telephony_GsmCdmaPhone.java,"@java.lang.Override public void setSystemProperty(java.lang.String property, java.lang.String value) { if (getUnitTestMode()) { return; } if ((isPhoneTypeGsm()) || (isPhoneTypeCdmaLte())) { android.telephony.TelephonyManager.setTelephonyProperty(mPhoneId, property, value); } else { super.setSystemProperty(property, value); } }",2a252df21c4446fab3cfb4956bd1a0624d5dfc4e,"@java.lang.Override public void setSystemProperty(java.lang.String property, java.lang.String value) { if (getUnitTestMode()) { return; } if (((isPhoneTypeGsm()) || (isPhoneTypeCdmaLte())) || (isPhoneTypeCdma())) { android.telephony.TelephonyManager.setTelephonyProperty(mPhoneId, property, value); } else { super.setSystemProperty(property, value); } }",299fee6ae9e2ad326acd4ca7a7dba4b81721bfc5,"@java.lang.Override public void setSystemProperty(java.lang.String property, java.lang.String value) { if (getUnitTestMode()) { return; } android.telephony.TelephonyManager.setTelephonyProperty(mPhoneId, property, value); }",0483b6ddf4e709b19e347a8993a284ab3bf594f9,2018-01-24 02:34:56,4
517965,src_java_com_android_internal_telephony_GsmCdmaPhone.java,"@java.lang.Override public boolean updateCurrentCarrierInProvider() { if ((isPhoneTypeGsm()) || (isPhoneTypeCdmaLte())) { long currentDds = android.telephony.SubscriptionManager.getDefaultDataSubscriptionId(); java.lang.String operatorNumeric = getOperatorNumeric(); logd((((((""updateCurrentCarrierInProvider: mSubId = "" + (getSubId())) + "" currentDds = "") + currentDds) + "" operatorNumeric = "") + operatorNumeric)); if ((!(android.text.TextUtils.isEmpty(operatorNumeric))) && ((getSubId()) == currentDds)) { try { android.net.Uri uri = android.net.Uri.withAppendedPath(Telephony.Carriers.CONTENT_URI, ""current""); android.content.ContentValues map = new android.content.ContentValues(); map.put(Telephony.Carriers.NUMERIC, operatorNumeric); mContext.getContentResolver().insert(uri, map); return true; } catch (android.database.SQLException e) { android.telephony.Rlog.e(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, ""Can't store current operator"", e); } } return false; } else { return true; } }",ff841f57f011498ed43eae1cbc30a31d355f60d5,"@java.lang.Override public boolean updateCurrentCarrierInProvider() { if (((isPhoneTypeGsm()) || (isPhoneTypeCdmaLte())) || (isPhoneTypeCdma())) { long currentDds = android.telephony.SubscriptionManager.getDefaultDataSubscriptionId(); java.lang.String operatorNumeric = getOperatorNumeric(); logd((((((""updateCurrentCarrierInProvider: mSubId = "" + (getSubId())) + "" currentDds = "") + currentDds) + "" operatorNumeric = "") + operatorNumeric)); if ((!(android.text.TextUtils.isEmpty(operatorNumeric))) && ((getSubId()) == currentDds)) { try { android.net.Uri uri = android.net.Uri.withAppendedPath(Telephony.Carriers.CONTENT_URI, ""current""); android.content.ContentValues map = new android.content.ContentValues(); map.put(Telephony.Carriers.NUMERIC, operatorNumeric); mContext.getContentResolver().insert(uri, map); return true; } catch (android.database.SQLException e) { android.telephony.Rlog.e(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, ""Can't store current operator"", e); } } return false; } else { return true; } }",42f01881a656be79a3588947cce225cf7a7f2bd7,"@java.lang.Override public boolean updateCurrentCarrierInProvider() { long currentDds = android.telephony.SubscriptionManager.getDefaultDataSubscriptionId(); java.lang.String operatorNumeric = getOperatorNumeric(); logd((((((""updateCurrentCarrierInProvider: mSubId = "" + (getSubId())) + "" currentDds = "") + currentDds) + "" operatorNumeric = "") + operatorNumeric)); if ((!(android.text.TextUtils.isEmpty(operatorNumeric))) && ((getSubId()) == currentDds)) { try { android.net.Uri uri = android.net.Uri.withAppendedPath(Telephony.Carriers.CONTENT_URI, ""current""); android.content.ContentValues map = new android.content.ContentValues(); map.put(Telephony.Carriers.NUMERIC, operatorNumeric); mContext.getContentResolver().insert(uri, map); return true; } catch (android.database.SQLException e) { android.telephony.Rlog.e(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, ""Can't store current operator"", e); } } return false; }",d60d6f222d59f00d53e6ba549dbedc916c4095ab,2018-01-24 02:34:56,4
517965,src_java_com_android_internal_telephony_GsmCdmaPhone.java,"@java.lang.Override public java.lang.String getSystemProperty(java.lang.String property, java.lang.String defValue) { if ((isPhoneTypeGsm()) || (isPhoneTypeCdmaLte())) { if (getUnitTestMode()) { return null; } return android.telephony.TelephonyManager.getTelephonyProperty(mPhoneId, property, defValue); } else { return super.getSystemProperty(property, defValue); } }",9e445c5d67e8d929e98ea0ad9ecd58e3bf25b13f,"@java.lang.Override public java.lang.String getSystemProperty(java.lang.String property, java.lang.String defValue) { if (((isPhoneTypeGsm()) || (isPhoneTypeCdmaLte())) || (isPhoneTypeCdma())) { if (getUnitTestMode()) { return null; } return android.telephony.TelephonyManager.getTelephonyProperty(mPhoneId, property, defValue); } else { return super.getSystemProperty(property, defValue); } }",2c129f731e65bbff4a08c144ab7ed1ab82a8e0c1,"@java.lang.Override public java.lang.String getSystemProperty(java.lang.String property, java.lang.String defValue) { if (getUnitTestMode()) { return null; } return android.telephony.TelephonyManager.getTelephonyProperty(mPhoneId, property, defValue); }",4ec7e2aecdc82512e8dfa5d8e5b15058eecb25bb,2018-01-24 02:34:56,4
593550,core_java_com_android_internal_net_NetworkStatsFactory.java,"public android.net.NetworkStats readNetworkStatsSummaryDev() throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; final boolean active = (reader.nextInt()) != 0; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.rxPackets += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); } stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",9f421666d8827fcae8e6e6d6f752d422a1433426,"public android.net.NetworkStats readNetworkStatsSummaryDev() throws java.io.IOException { if (!(mStatsXtIfaceAll.exists())) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; final boolean active = (reader.nextInt()) != 0; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.rxPackets += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); } stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",16f74ef36767a6804882c4a6b4c8f9c2620b3a9d,"public android.net.NetworkStats readNetworkStatsSummaryDev() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; final boolean active = (reader.nextInt()) != 0; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.rxPackets += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); } stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",d3ceb86ca8ffbbcc11bdba7186f19fbdc4f077d6,2018-01-24 04:08:27,5
593550,core_java_com_android_internal_net_NetworkStatsFactory.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats readNetworkStatsIfaceDev() throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsIfaceDev)); reader.finishLine(); reader.finishLine(); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); for (int i = 0; i < 6; i++) { reader.nextLong(); } entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",b70f63a0b9bda7bdd710ec6196c02a0bf36049ae,"@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats readNetworkStatsIfaceDev() throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); java.io.BufferedReader reader = null; try { reader = new java.io.BufferedReader(new java.io.FileReader(mStatsIfaceDev)); reader.readLine(); reader.readLine(); java.lang.String line; while ((line = reader.readLine()) != null) { java.lang.String[] values = line.trim().split(""\\:?\\s+""); entry.iface = values[0]; entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; entry.rxBytes = java.lang.Long.parseLong(values[1]); entry.rxPackets = java.lang.Long.parseLong(values[2]); entry.txBytes = java.lang.Long.parseLong(values[9]); entry.txPackets = java.lang.Long.parseLong(values[10]); stats.addValues(entry); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",0bc21126ab8cf8a1092e17b99d7d5d0ea9fc064e,2018-01-24 04:08:27,5
593550,core_java_com_android_internal_net_NetworkStatsFactory.java,"public android.net.NetworkStats readNetworkStatsSummaryXt() throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); if (!(mStatsXtIfaceFmt.exists())) return null; final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceFmt)); reader.finishLine(); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",07f22efac078ef2eb2ac9650fa67eef483e15c11,"public android.net.NetworkStats readNetworkStatsSummaryXt() throws java.io.IOException { if (!(mStatsXtIfaceFmt.exists())) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceFmt)); reader.finishLine(); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",009c4f59708e092912a17e181e990ff752312113,"public android.net.NetworkStats readNetworkStatsSummaryXt() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); if (!(mStatsXtIfaceFmt.exists())) return null; final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceFmt)); reader.finishLine(); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",c51a3647a34899315a99463ac6a4b6cf525b1d74,2018-01-24 04:08:27,5
577277,core_java_android_net_NetworkCapabilities.java,@java.lang.Override public android.net.NetworkCapabilities createFromParcel(android.os.Parcel in) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCap.mNetworkCapabilities = in.readLong(); netCap.mTransportTypes = in.readLong(); netCap.mLinkUpBandwidthKbps = in.readInt(); netCap.mLinkDownBandwidthKbps = in.readInt(); netCap.mNetworkSpecifier = in.readParcelable(null); netCap.mSignalStrength = in.readInt(); return netCap; },f3fa5b123530cd88372ea69631054369c667ff01,@java.lang.Override public android.net.NetworkCapabilities createFromParcel(android.os.Parcel in) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCap.mNetworkCapabilities = in.readLong(); netCap.mTransportTypes = in.readLong(); netCap.mLinkUpBandwidthKbps = in.readInt(); netCap.mLinkDownBandwidthKbps = in.readInt(); netCap.mNetworkSpecifier = in.readParcelable(null); netCap.mSignalStrength = in.readInt(); netCap.mAllowedUids = ((android.util.ArraySet<android.net.UidRange>) (in.readArraySet(null))); return netCap; },caef1d4cdcdfa063fc2cbe8d876ce01e74d7176b,@java.lang.Override public android.net.NetworkCapabilities createFromParcel(android.os.Parcel in) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCap.mNetworkCapabilities = in.readLong(); netCap.mTransportTypes = in.readLong(); netCap.mLinkUpBandwidthKbps = in.readInt(); netCap.mLinkDownBandwidthKbps = in.readInt(); netCap.mNetworkSpecifier = in.readParcelable(null); netCap.mSignalStrength = in.readInt(); netCap.mUids = ((android.util.ArraySet<android.net.UidRange>) (in.readArraySet(null))); return netCap; },c050e9fd46c5565b134dd284ce37df485aed5447,2018-01-24 04:09:42,13
590295,core_java_android_net_NetworkMisc.java,"@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt((allowBypass ? 1 : 0)); out.writeInt((explicitlySelected ? 1 : 0)); out.writeInt((acceptUnvalidated ? 1 : 0)); out.writeString(subscriberId); out.writeInt((provisioningNotificationDisabled ? 1 : 0)); }",36efd33b6492245cc041ca26a60396a679552c84,"@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt((allowBypass ? 1 : 0)); out.writeInt((explicitlySelected ? 1 : 0)); out.writeInt((acceptUnvalidated ? 1 : 0)); out.writeString(subscriberId); out.writeInt((provisioningNotificationDisabled ? 1 : 0)); out.writeInt(managerUid); }",67ccf3c7322c2e41a4a5925fae208ea9f8ae79c3,"@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt((allowBypass ? 1 : 0)); out.writeInt((explicitlySelected ? 1 : 0)); out.writeInt((acceptUnvalidated ? 1 : 0)); out.writeString(subscriberId); out.writeInt((provisioningNotificationDisabled ? 1 : 0)); }",36efd33b6492245cc041ca26a60396a679552c84,2018-01-24 04:09:42,10
577277,core_java_android_net_NetworkCapabilities.java,@java.lang.Override public int hashCode() { return ((((((((int) ((mNetworkCapabilities) & -1)) + (((int) ((mNetworkCapabilities) >> 32)) * 3)) + (((int) ((mTransportTypes) & -1)) * 5)) + (((int) ((mTransportTypes) >> 32)) * 7)) + ((mLinkUpBandwidthKbps) * 11)) + ((mLinkDownBandwidthKbps) * 13)) + ((java.util.Objects.hashCode(mNetworkSpecifier)) * 17)) + ((mSignalStrength) * 19); },463bb5aac600f3f1f3e48548263c83fcd32a7369,@java.lang.Override public int hashCode() { return (((((((((int) ((mNetworkCapabilities) & -1)) + (((int) ((mNetworkCapabilities) >> 32)) * 3)) + (((int) ((mTransportTypes) & -1)) * 5)) + (((int) ((mTransportTypes) >> 32)) * 7)) + ((mLinkUpBandwidthKbps) * 11)) + ((mLinkDownBandwidthKbps) * 13)) + ((java.util.Objects.hashCode(mNetworkSpecifier)) * 17)) + ((mSignalStrength) * 19)) + ((java.util.Objects.hashCode(mAllowedUids)) * 23); },84ce8c583b038ca63bbc35006dff2f1030f16326,@java.lang.Override public int hashCode() { return (((((((((int) ((mNetworkCapabilities) & -1)) + (((int) ((mNetworkCapabilities) >> 32)) * 3)) + (((int) ((mTransportTypes) & -1)) * 5)) + (((int) ((mTransportTypes) >> 32)) * 7)) + ((mLinkUpBandwidthKbps) * 11)) + ((mLinkDownBandwidthKbps) * 13)) + ((java.util.Objects.hashCode(mNetworkSpecifier)) * 17)) + ((mSignalStrength) * 19)) + ((java.util.Objects.hashCode(mUids)) * 23); },03cd242e5fafee0669d9f16a31c4f8533f557909,2018-01-24 04:09:42,13
577277,core_java_android_net_NetworkCapabilities.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean allowsUid(int uid) { if (null == (mAllowedUids)) return true; for (android.net.UidRange range : mAllowedUids) { if (range.contains(uid)) { return true; } } return false; },81cee3bc980ce67d6a977b2b8c4fa5042149de4b,public boolean appliesToUid(int uid) { if (null == (mUids)) return true; for (android.net.UidRange range : mUids) { if (range.contains(uid)) { return true; } } return false; },bf08c0e711d1bdef1a0ecc5efdeb9d787660c126,2018-01-24 04:09:42,13
589433,services_core_java_com_android_server_ConnectivityService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void updateUids(com.android.server.connectivity.NetworkAgentInfo nai, android.net.NetworkCapabilities prevNc, android.net.NetworkCapabilities newNc) { final java.util.Set<android.net.UidRange> prevRanges = (null == prevNc) ? null : prevNc.getUids(); final java.util.Set<android.net.UidRange> newRanges = (null == newNc) ? null : newNc.getUids(); final java.util.ArrayList<android.net.UidRange> removedRanges; final java.util.ArrayList<android.net.UidRange> addedRanges; if (null == prevRanges) { if (null == newRanges) { return; } removedRanges = null; addedRanges = new java.util.ArrayList(newRanges); } else if (null == newNc) { removedRanges = new java.util.ArrayList(prevRanges); addedRanges = null; } else { removedRanges = new java.util.ArrayList(); addedRanges = new java.util.ArrayList(); for (final android.net.UidRange prevRange : prevRanges) { if (!(newRanges.contains(prevRange))) { removedRanges.add(prevRange); } } for (final android.net.UidRange newRange : newRanges) { if (!(prevRanges.contains(newRange))) { addedRanges.add(newRange); } } } try { if ((null != removedRanges) && (!(removedRanges.isEmpty()))) { final android.net.UidRange[] removedRangesArray = new android.net.UidRange[removedRanges.size()]; removedRanges.toArray(removedRangesArray); mNetd.removeVpnUidRanges(nai.network.netId, removedRangesArray); } if ((null != addedRanges) && (!(addedRanges.isEmpty()))) { final android.net.UidRange[] addedRangesArray = new android.net.UidRange[addedRanges.size()]; addedRanges.toArray(addedRangesArray); mNetd.addVpnUidRanges(nai.network.netId, addedRangesArray); } } catch (java.lang.Exception e) { com.android.server.ConnectivityService.loge((""Exception in updateUids: "" + e)); } }",b280075d5b696559a8f3e028a6416f7c1fc5ffcf,"private void updateUids(com.android.server.connectivity.NetworkAgentInfo nai, android.net.NetworkCapabilities prevNc, android.net.NetworkCapabilities newNc) { java.util.Set<android.net.UidRange> prevRanges = (null == prevNc) ? null : prevNc.getUids(); java.util.Set<android.net.UidRange> newRanges = (null == newNc) ? null : newNc.getUids(); if (null == prevRanges) prevRanges = new android.util.ArraySet(); if (null == newRanges) newRanges = new android.util.ArraySet(); final java.util.Set<android.net.UidRange> prevRangesCopy = new android.util.ArraySet(prevRanges); prevRanges.removeAll(newRanges); newRanges.removeAll(prevRangesCopy); try { if (!(newRanges.isEmpty())) { final android.net.UidRange[] addedRangesArray = new android.net.UidRange[newRanges.size()]; newRanges.toArray(addedRangesArray); mNetd.addVpnUidRanges(nai.network.netId, addedRangesArray); } if (!(prevRanges.isEmpty())) { final android.net.UidRange[] removedRangesArray = new android.net.UidRange[prevRanges.size()]; prevRanges.toArray(removedRangesArray); mNetd.removeVpnUidRanges(nai.network.netId, removedRangesArray); } } catch (java.lang.Exception e) { com.android.server.ConnectivityService.loge((""Exception in updateUids: "" + e)); } }",9f923c10067b3effbb2ebd8c763f1756033da778,2018-01-24 04:09:42,8
577277,core_java_android_net_NetworkCapabilities.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.util.Set<android.net.UidRange> getAllowedUids() { return null == (mAllowedUids) ? null : new android.util.ArraySet(mAllowedUids); },166cd67589eecca0da22a7fef0d429aa37982164,public java.util.Set<android.net.UidRange> getUids() { return null == (mUids) ? null : new android.util.ArraySet(mUids); },bcd6ee7245372fa80c40eea5573eca7de9630a89,2018-01-24 04:09:42,13
577277,core_java_android_net_NetworkCapabilities.java,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeInt(mSignalStrength); }",f453dc9a6abdbfb3fa1313367422ceebd7ed461d,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeInt(mSignalStrength); dest.writeArraySet(new android.util.ArraySet(mAllowedUids)); }",5e98ed8cccd5ae20d2207cd6c485ec6749ec3dc5,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeInt(mSignalStrength); dest.writeArraySet(new android.util.ArraySet(mUids)); }",d656db3be876b4a4d1f310bafd435f86c4e311f1,2018-01-24 04:09:42,13
577277,services_core_java_com_android_server_connectivity_Vpn.java,"private void prepareInternal(java.lang.String newPackage) { long token = android.os.Binder.clearCallingIdentity(); try { if ((mInterface) != null) { mStatusIntent = null; agentDisconnect(); jniReset(mInterface); mInterface = null; mVpnUsers = null; } if ((mConnection) != null) { try { mConnection.mService.transact(IBinder.LAST_CALL_TRANSACTION, android.os.Parcel.obtain(), null, IBinder.FLAG_ONEWAY); } catch (java.lang.Exception e) { } mContext.unbindService(mConnection); mConnection = null; } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } try { mNetd.denyProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, (((""Failed to disallow UID "" + (mOwnerUID)) + "" to call protect() "") + e)); } android.util.Log.i(com.android.server.connectivity.Vpn.TAG, (((""Switched from "" + (mPackage)) + "" to "") + newPackage)); mPackage = newPackage; mOwnerUID = getAppUid(newPackage, mUserHandle); try { mNetd.allowProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, (((""Failed to allow UID "" + (mOwnerUID)) + "" to call protect() "") + e)); } mConfig = null; updateState(DetailedState.IDLE, ""prepare""); setVpnForcedLocked(mLockdown); } finally { android.os.Binder.restoreCallingIdentity(token); } }",da5bb34197c856f57fb649275e7336ba8279c502,"private void prepareInternal(java.lang.String newPackage) { long token = android.os.Binder.clearCallingIdentity(); try { if ((mInterface) != null) { mStatusIntent = null; agentDisconnect(); jniReset(mInterface); mInterface = null; mNetworkCapabilities.setAllowedUids(null); } if ((mConnection) != null) { try { mConnection.mService.transact(IBinder.LAST_CALL_TRANSACTION, android.os.Parcel.obtain(), null, IBinder.FLAG_ONEWAY); } catch (java.lang.Exception e) { } mContext.unbindService(mConnection); mConnection = null; } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } try { mNetd.denyProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, (((""Failed to disallow UID "" + (mOwnerUID)) + "" to call protect() "") + e)); } android.util.Log.i(com.android.server.connectivity.Vpn.TAG, (((""Switched from "" + (mPackage)) + "" to "") + newPackage)); mPackage = newPackage; mOwnerUID = getAppUid(newPackage, mUserHandle); try { mNetd.allowProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, (((""Failed to allow UID "" + (mOwnerUID)) + "" to call protect() "") + e)); } mConfig = null; updateState(DetailedState.IDLE, ""prepare""); setVpnForcedLocked(mLockdown); } finally { android.os.Binder.restoreCallingIdentity(token); } }",7d4b4e5dc7b6c4c3ce66e37416b2db2db416a26b,"private void prepareInternal(java.lang.String newPackage) { long token = android.os.Binder.clearCallingIdentity(); try { if ((mInterface) != null) { mStatusIntent = null; agentDisconnect(); jniReset(mInterface); mInterface = null; mNetworkCapabilities.setUids(null); } if ((mConnection) != null) { try { mConnection.mService.transact(IBinder.LAST_CALL_TRANSACTION, android.os.Parcel.obtain(), null, IBinder.FLAG_ONEWAY); } catch (java.lang.Exception e) { } mContext.unbindService(mConnection); mConnection = null; } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } try { mNetd.denyProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, (((""Failed to disallow UID "" + (mOwnerUID)) + "" to call protect() "") + e)); } android.util.Log.i(com.android.server.connectivity.Vpn.TAG, (((""Switched from "" + (mPackage)) + "" to "") + newPackage)); mPackage = newPackage; mOwnerUID = getAppUid(newPackage, mUserHandle); try { mNetd.allowProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, (((""Failed to allow UID "" + (mOwnerUID)) + "" to call protect() "") + e)); } mConfig = null; updateState(DetailedState.IDLE, ""prepare""); setVpnForcedLocked(mLockdown); } finally { android.os.Binder.restoreCallingIdentity(token); } }",b0d2c6b47ce8d379eb6f0d5db3c53a801319b8de,2018-01-24 04:09:42,13
577277,services_core_java_com_android_server_connectivity_Vpn.java,"public void onUserAdded(int userHandle) { android.content.pm.UserInfo user = android.os.UserManager.get(mContext).getUserInfo(userHandle); if ((user.isRestricted()) && ((user.restrictedProfileParentId) == (mUserHandle))) { synchronized(this) { if ((mVpnUsers) != null) { try { addUserToRanges(mVpnUsers, userHandle, mConfig.allowedApplications, mConfig.disallowedApplications); if ((mNetworkAgent) != null) { final java.util.List<android.net.UidRange> ranges = uidRangesForUser(userHandle); mNetworkAgent.addUidRanges(ranges.toArray(new android.net.UidRange[ranges.size()])); } } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, ""Failed to add restricted user to owner"", e); } } setVpnForcedLocked(mLockdown); } } }",81aa8d92bef5657ff5a7269973b04cad71a321ff,"public void onUserAdded(int userHandle) { android.content.pm.UserInfo user = android.os.UserManager.get(mContext).getUserInfo(userHandle); if ((user.isRestricted()) && ((user.restrictedProfileParentId) == (mUserHandle))) { synchronized(this) { final java.util.Set<android.net.UidRange> existingRanges = mNetworkCapabilities.getAllowedUids(); if (existingRanges != null) { try { addUserToRanges(existingRanges, userHandle, mConfig.allowedApplications, mConfig.disallowedApplications); mNetworkCapabilities.setAllowedUids(existingRanges); if ((mNetworkAgent) != null) { final java.util.List<android.net.UidRange> ranges = com.android.server.connectivity.Vpn.uidRangesForUser(userHandle, mNetworkCapabilities.getAllowedUids()); mNetworkAgent.addUidRanges(ranges.toArray(new android.net.UidRange[ranges.size()])); } } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, ""Failed to add restricted user to owner"", e); } } setVpnForcedLocked(mLockdown); } } }",2321f06136f1d29495aba8eb3cc6c224b155cb4c,"public void onUserAdded(int userHandle) { android.content.pm.UserInfo user = android.os.UserManager.get(mContext).getUserInfo(userHandle); if ((user.isRestricted()) && ((user.restrictedProfileParentId) == (mUserHandle))) { synchronized(this) { final java.util.Set<android.net.UidRange> existingRanges = mNetworkCapabilities.getUids(); if (existingRanges != null) { try { addUserToRanges(existingRanges, userHandle, mConfig.allowedApplications, mConfig.disallowedApplications); mNetworkCapabilities.setUids(existingRanges); if ((mNetworkAgent) != null) { final java.util.List<android.net.UidRange> ranges = com.android.server.connectivity.Vpn.uidRangesForUser(userHandle, mNetworkCapabilities.getUids()); mNetworkAgent.addUidRanges(ranges.toArray(new android.net.UidRange[ranges.size()])); } } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, ""Failed to add restricted user to owner"", e); } } setVpnForcedLocked(mLockdown); } } }",5f9b14579587478f98babbea509f6c520799fc6b,2018-01-24 04:09:42,13
577277,services_core_java_com_android_server_connectivity_Vpn.java,"public void onUserRemoved(int userHandle) { android.content.pm.UserInfo user = android.os.UserManager.get(mContext).getUserInfo(userHandle); if ((user.isRestricted()) && ((user.restrictedProfileParentId) == (mUserHandle))) { synchronized(this) { if ((mVpnUsers) != null) { try { removeVpnUserLocked(userHandle); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, ""Failed to remove restricted user to owner"", e); } } setVpnForcedLocked(mLockdown); } } }",b880ea05a98a3093b952cc793ce8ebc037f18adc,"public void onUserRemoved(int userHandle) { android.content.pm.UserInfo user = android.os.UserManager.get(mContext).getUserInfo(userHandle); if ((user.isRestricted()) && ((user.restrictedProfileParentId) == (mUserHandle))) { synchronized(this) { final java.util.Set<android.net.UidRange> existingRanges = mNetworkCapabilities.getAllowedUids(); if (existingRanges != null) { try { final java.util.List<android.net.UidRange> removedRanges = com.android.server.connectivity.Vpn.uidRangesForUser(userHandle, existingRanges); if ((mNetworkAgent) != null) { mNetworkAgent.removeUidRanges(removedRanges.toArray(new android.net.UidRange[removedRanges.size()])); } existingRanges.removeAll(removedRanges); mNetworkCapabilities.setAllowedUids(existingRanges); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, ""Failed to remove restricted user to owner"", e); } } setVpnForcedLocked(mLockdown); } } }",ec3d38dffed1b317a9abb045b0b2088dd818731f,"public void onUserRemoved(int userHandle) { android.content.pm.UserInfo user = android.os.UserManager.get(mContext).getUserInfo(userHandle); if ((user.isRestricted()) && ((user.restrictedProfileParentId) == (mUserHandle))) { synchronized(this) { final java.util.Set<android.net.UidRange> existingRanges = mNetworkCapabilities.getUids(); if (existingRanges != null) { try { final java.util.List<android.net.UidRange> removedRanges = com.android.server.connectivity.Vpn.uidRangesForUser(userHandle, existingRanges); if ((mNetworkAgent) != null) { mNetworkAgent.removeUidRanges(removedRanges.toArray(new android.net.UidRange[removedRanges.size()])); } existingRanges.removeAll(removedRanges); mNetworkCapabilities.setUids(existingRanges); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, ""Failed to remove restricted user to owner"", e); } } setVpnForcedLocked(mLockdown); } } }",cdb407aed292b5ebfaeebed708fdd7b179610a4c,2018-01-24 04:09:42,13
577277,services_core_java_com_android_server_connectivity_Vpn.java,@java.lang.Override public void interfaceRemoved(java.lang.String interfaze) { synchronized(this) { if ((interfaze.equals(mInterface)) && ((jniCheck(interfaze)) == 0)) { mStatusIntent = null; mVpnUsers = null; mConfig = null; mInterface = null; if ((mConnection) != null) { mContext.unbindService(mConnection); mConnection = null; agentDisconnect(); } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } } } },455ae9eef4660266565ce9f91993eacd5e04b592,@java.lang.Override public void interfaceRemoved(java.lang.String interfaze) { synchronized(this) { if ((interfaze.equals(mInterface)) && ((jniCheck(interfaze)) == 0)) { mStatusIntent = null; mNetworkCapabilities.setAllowedUids(null); mConfig = null; mInterface = null; if ((mConnection) != null) { mContext.unbindService(mConnection); mConnection = null; agentDisconnect(); } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } } } },12bb2ebbfd5bcf8c10752be32f36a1d172d397a2,@java.lang.Override public void interfaceRemoved(java.lang.String interfaze) { synchronized(this) { if ((interfaze.equals(mInterface)) && ((jniCheck(interfaze)) == 0)) { mStatusIntent = null; mNetworkCapabilities.setUids(null); mConfig = null; mInterface = null; if ((mConnection) != null) { mContext.unbindService(mConnection); mConnection = null; agentDisconnect(); } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } } } },65b10e2f94342ea518b2f9261a2d81855271dbd1,2018-01-24 04:09:42,13
577277,services_core_java_com_android_server_connectivity_Vpn.java,public synchronized boolean appliesToUid(int uid) { if (!(isRunningLocked())) { return false; } for (android.net.UidRange uidRange : mVpnUsers) { if (uidRange.contains(uid)) { return true; } } return false; },9212efa65a5cf0037356c6a727420650b49d6193,public synchronized boolean appliesToUid(int uid) { if (!(isRunningLocked())) { return false; } return mNetworkCapabilities.allowsUid(uid); },f44afafbc747ba06a2bc17425d84e2c563ad4761,public synchronized boolean appliesToUid(int uid) { if (!(isRunningLocked())) { return false; } return mNetworkCapabilities.appliesToUid(uid); },9ea093364c23225cc6551805e2bab0f700b37f3c,2018-01-24 04:09:42,13
577277,core_java_android_net_NetworkCapabilities.java,@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return ((((equalsNetCapabilities(that)) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that)); },a82479832438374eafe5f54239c6226fcc1665a7,@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return (((((equalsNetCapabilities(that)) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that))) && (equalsAllowedUids(that)); },70e024734f85ac6ab7cdcd0aa3640a24a7c1c92a,@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return (((((equalsNetCapabilities(that)) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that))) && (equalsUids(that)); },6dd59d9a440b11f0ce43c43ee9dd406da9ee34ea,2018-01-24 04:09:42,13
593793,services_core_java_com_android_server_connectivity_KeepalivePacketData.java,"public static com.android.server.connectivity.KeepalivePacketData nattKeepalivePacket(java.net.InetAddress srcAddress, int srcPort, java.net.InetAddress dstAddress, int dstPort) throws com.android.server.connectivity.KeepalivePacketData.InvalidPacketException { if ((!(srcAddress instanceof java.net.Inet4Address)) || (!(dstAddress instanceof java.net.Inet4Address))) { throw new com.android.server.connectivity.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_IP_ADDRESS); } if (dstPort != (NATT_PORT)) { throw new com.android.server.connectivity.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_PORT); } int length = ((com.android.server.connectivity.KeepalivePacketData.IPV4_HEADER_LENGTH) + (com.android.server.connectivity.KeepalivePacketData.UDP_HEADER_LENGTH)) + 1; java.nio.ByteBuffer buf = java.nio.ByteBuffer.allocate(length); buf.order(java.nio.ByteOrder.BIG_ENDIAN); buf.putShort(((short) (17664))); buf.putShort(((short) (length))); buf.putInt(0); buf.put(((byte) (64))); buf.put(((byte) (OsConstants.IPPROTO_UDP))); int ipChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(srcAddress.getAddress()); buf.put(dstAddress.getAddress()); buf.putShort(((short) (srcPort))); buf.putShort(((short) (dstPort))); buf.putShort(((short) (length - 20))); int udpChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(((byte) (255))); buf.putShort(ipChecksumOffset, android.net.util.IpUtils.ipChecksum(buf, 0)); buf.putShort(udpChecksumOffset, android.net.util.IpUtils.udpChecksum(buf, 0, com.android.server.connectivity.KeepalivePacketData.IPV4_HEADER_LENGTH)); return new com.android.server.connectivity.KeepalivePacketData(srcAddress, srcPort, dstAddress, dstPort, buf.array()); }",d8cd1c474f4524d13bbe26388b76e0a54535315e,"public static com.android.server.connectivity.KeepalivePacketData nattKeepalivePacket(java.net.InetAddress srcAddress, int srcPort, java.net.InetAddress dstAddress, int dstPort) throws com.android.server.connectivity.KeepalivePacketData.InvalidPacketException { if ((!(srcAddress instanceof java.net.Inet4Address)) || (!(dstAddress instanceof java.net.Inet4Address))) { throw new com.android.server.connectivity.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_IP_ADDRESS); } if (dstPort != (NATT_PORT)) { throw new com.android.server.connectivity.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_PORT); } int length = ((ConnectivityConstants.IPV4_HEADER_LENGTH) + (ConnectivityConstants.UDP_HEADER_LENGTH)) + 1; java.nio.ByteBuffer buf = java.nio.ByteBuffer.allocate(length); buf.order(java.nio.ByteOrder.BIG_ENDIAN); buf.putShort(((short) (17664))); buf.putShort(((short) (length))); buf.putInt(0); buf.put(((byte) (64))); buf.put(((byte) (OsConstants.IPPROTO_UDP))); int ipChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(srcAddress.getAddress()); buf.put(dstAddress.getAddress()); buf.putShort(((short) (srcPort))); buf.putShort(((short) (dstPort))); buf.putShort(((short) (length - 20))); int udpChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(((byte) (255))); buf.putShort(ipChecksumOffset, android.net.util.IpUtils.ipChecksum(buf, 0)); buf.putShort(udpChecksumOffset, android.net.util.IpUtils.udpChecksum(buf, 0, ConnectivityConstants.IPV4_HEADER_LENGTH)); return new com.android.server.connectivity.KeepalivePacketData(srcAddress, srcPort, dstAddress, dstPort, buf.array()); }",5e7eda77cb641bd885bf9e50aa900aad91d69828,"public static com.android.server.connectivity.KeepalivePacketData nattKeepalivePacket(java.net.InetAddress srcAddress, int srcPort, java.net.InetAddress dstAddress, int dstPort) throws com.android.server.connectivity.KeepalivePacketData.InvalidPacketException { if ((!(srcAddress instanceof java.net.Inet4Address)) || (!(dstAddress instanceof java.net.Inet4Address))) { throw new com.android.server.connectivity.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_IP_ADDRESS); } if (dstPort != (NATT_PORT)) { throw new com.android.server.connectivity.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_PORT); } int length = ((IPV4_HEADER_MIN_LEN) + (UDP_HEADER_LEN)) + 1; java.nio.ByteBuffer buf = java.nio.ByteBuffer.allocate(length); buf.order(java.nio.ByteOrder.BIG_ENDIAN); buf.putShort(((short) (17664))); buf.putShort(((short) (length))); buf.putInt(0); buf.put(((byte) (64))); buf.put(((byte) (OsConstants.IPPROTO_UDP))); int ipChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(srcAddress.getAddress()); buf.put(dstAddress.getAddress()); buf.putShort(((short) (srcPort))); buf.putShort(((short) (dstPort))); buf.putShort(((short) (length - 20))); int udpChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(((byte) (255))); buf.putShort(ipChecksumOffset, android.net.util.IpUtils.ipChecksum(buf, 0)); buf.putShort(udpChecksumOffset, android.net.util.IpUtils.udpChecksum(buf, 0, com.android.server.connectivity.IPV4_HEADER_MIN_LEN)); return new com.android.server.connectivity.KeepalivePacketData(srcAddress, srcPort, dstAddress, dstPort, buf.array()); }",be2044ad0c0513eee2e6ff1a8028f569c583c141,2018-01-24 04:09:42,9
577277,core_java_android_net_NetworkCapabilities.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private void combineAllowedUids(android.net.NetworkCapabilities nc) { if ((null == (nc.mAllowedUids)) || (null == (mAllowedUids))) { mAllowedUids = null; return; } mAllowedUids.addAll(nc.mAllowedUids); },692cac6fec629c4da2d87e07c97366cb949171e7,private void combineUids(android.net.NetworkCapabilities nc) { if ((null == (nc.mUids)) || (null == (mUids))) { mUids = null; return; } mUids.addAll(nc.mUids); },1c7e2bdc89a8fc0b546bc59b13a8525285bb93a6,2018-01-24 04:09:42,13
577277,core_java_android_net_NetworkCapabilities.java,"private boolean satisfiedByNetworkCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { return (((((nc != null) && (satisfiedByNetCapabilities(nc, onlyImmutable))) && (satisfiedByTransportTypes(nc))) && (onlyImmutable || (satisfiedByLinkBandwidths(nc)))) && (satisfiedBySpecifier(nc))) && (onlyImmutable || (satisfiedBySignalStrength(nc))); }",d550a4cdf5ba556ce28646809b63e19f709aadd4,"private boolean satisfiedByNetworkCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { return ((((((nc != null) && (satisfiedByNetCapabilities(nc, onlyImmutable))) && (satisfiedByTransportTypes(nc))) && (onlyImmutable || (satisfiedByLinkBandwidths(nc)))) && (satisfiedBySpecifier(nc))) && (onlyImmutable || (satisfiedBySignalStrength(nc)))) && (onlyImmutable || (satisfiedByAllowedUids(nc))); }",65beb074eb9cc76af50554039ee58a49d54e2482,"private boolean satisfiedByNetworkCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { return ((((((nc != null) && (satisfiedByNetCapabilities(nc, onlyImmutable))) && (satisfiedByTransportTypes(nc))) && (onlyImmutable || (satisfiedByLinkBandwidths(nc)))) && (satisfiedBySpecifier(nc))) && (onlyImmutable || (satisfiedBySignalStrength(nc)))) && (onlyImmutable || (satisfiedByUids(nc))); }",af5e17f5be960716b5c4b5b4d8638217930fdbb8,2018-01-24 04:09:42,13
590295,services_core_java_com_android_server_connectivity_Vpn.java,"private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkCapabilities.removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } mNetworkInfo.setDetailedState(DetailedState.CONNECTING, null, null); android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); mNetworkCapabilities.setUids(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications, mConfig.disallowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, 0, networkMisc) { @java.lang.Override public void unwanted() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, ""agentConnect""); }",f1e5c6aac6fa84f6260e5b3e89d25298d69e48f9,"private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkCapabilities.removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } mNetworkInfo.setDetailedState(DetailedState.CONNECTING, null, null); android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); networkMisc.managerUid = android.os.Binder.getCallingUid(); mNetworkCapabilities.setUids(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications, mConfig.disallowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, 0, networkMisc) { @java.lang.Override public void unwanted() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, ""agentConnect""); }",510fc32b4ad2c1607c75e75232ce7af4c50bd4a4,"private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkCapabilities.removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } mNetworkInfo.setDetailedState(DetailedState.CONNECTING, null, null); android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); mNetworkCapabilities.setEstablishingVpnAppUid(android.os.Binder.getCallingUid()); mNetworkCapabilities.setUids(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications, mConfig.disallowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, 0, networkMisc) { @java.lang.Override public void unwanted() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, ""agentConnect""); }",78323f348a54c02de2252cdf8837b26f49a605c9,2018-01-24 04:09:42,10
589435,services_core_java_com_android_server_connectivity_Vpn.java,"private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkCapabilities.removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } mNetworkInfo.setDetailedState(DetailedState.CONNECTING, null, null); android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); mNetworkCapabilities.setUids(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications, mConfig.disallowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, 0, networkMisc) { @java.lang.Override public void unwanted() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, ""agentConnect""); }",f1e5c6aac6fa84f6260e5b3e89d25298d69e48f9,"private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkCapabilities.removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } mNetworkInfo.setDetailedState(DetailedState.CONNECTING, null, null); android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); mNetworkCapabilities.setUids(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications, mConfig.disallowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, com.android.server.connectivity.Vpn.VPN_DEFAULT_SCORE, networkMisc) { @java.lang.Override public void unwanted() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, ""agentConnect""); }",4f7f887729a467badc7f8385cfc3f850e33b4a10,"private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkCapabilities.removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } mNetworkInfo.setDetailedState(DetailedState.CONNECTING, null, null); android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); mNetworkCapabilities.setEstablishingVpnAppUid(android.os.Binder.getCallingUid()); mNetworkCapabilities.setUids(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications, mConfig.disallowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, ConnectivityConstants.VPN_DEFAULT_SCORE, networkMisc) { @java.lang.Override public void unwanted() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, ""agentConnect""); }",e2e1e4d8c3ff11555c3d530b7620432a78d69f63,2018-01-24 04:09:42,14
577277,services_core_java_com_android_server_connectivity_Vpn.java,"private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkCapabilities.removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } mNetworkInfo.setDetailedState(DetailedState.CONNECTING, null, null); android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, 0, networkMisc) { @java.lang.Override public void unwanted() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mVpnUsers = createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications, mConfig.disallowedApplications); mNetworkAgent.addUidRanges(mVpnUsers.toArray(new android.net.UidRange[mVpnUsers.size()])); mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, ""agentConnect""); }",78f4b8de6591a961ecbdb8f6ee83123bed65c7b1,"private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkCapabilities.removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } mNetworkInfo.setDetailedState(DetailedState.CONNECTING, null, null); android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); mNetworkCapabilities.setAllowedUids(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications, mConfig.disallowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, 0, networkMisc) { @java.lang.Override public void unwanted() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, ""agentConnect""); }",87fcdb2b88a420a9a0e66060bc940a747dc16581,"private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkCapabilities.removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } mNetworkInfo.setDetailedState(DetailedState.CONNECTING, null, null); android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); mNetworkCapabilities.setUids(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications, mConfig.disallowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, 0, networkMisc) { @java.lang.Override public void unwanted() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, ""agentConnect""); }",f1e5c6aac6fa84f6260e5b3e89d25298d69e48f9,2018-01-24 04:09:42,13
589435,services_core_java_com_android_server_ConnectivityService.java,"@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null) ? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); enforceAccessPermission(); } else { networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureRequestableCapabilities(networkCapabilities); if (timeoutMs < 0) { throw new java.lang.IllegalArgumentException(""Bad timeout specified""); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log((""requestNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri)); if (timeoutMs > 0) { mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs); } return networkRequest; }",42a18aa11a8807c3c87eddedfd2f1c2095e426e0,"@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null) ? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); enforceAccessPermission(); } else { networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureRequestableCapabilities(networkCapabilities); networkCapabilities.setSingleUid(android.os.Binder.getCallingUid()); if (timeoutMs < 0) { throw new java.lang.IllegalArgumentException(""Bad timeout specified""); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log((""requestNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri)); if (timeoutMs > 0) { mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs); } return networkRequest; }",8c0aae725d6bc33258d8f4266288f7fcf5086b04,"@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null) ? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); networkCapabilities.removeCapability(com.android.server.NET_CAPABILITY_NOT_VPN); enforceAccessPermission(); } else { networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureRequestableCapabilities(networkCapabilities); networkCapabilities.setSingleUid(android.os.Binder.getCallingUid()); if (timeoutMs < 0) { throw new java.lang.IllegalArgumentException(""Bad timeout specified""); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log((""requestNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri)); if (timeoutMs > 0) { mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs); } return networkRequest; }",98aa6a9fd7218a1c3c893ea2705dc64b85b4e8d1,2018-01-24 04:09:42,14
589435,services_core_java_com_android_server_ConnectivityService.java,"@java.lang.Override public void pendingListenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, ""PendingIntent cannot be null.""); if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(new android.net.NetworkCapabilities(networkCapabilities), TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log((""pendingListenForNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); }",fbb4e0aa3f2832d4484357fc0667145e2098e487,"@java.lang.Override public void pendingListenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, ""PendingIntent cannot be null.""); if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } ensureValidNetworkSpecifier(networkCapabilities); networkCapabilities.setSingleUid(android.os.Binder.getCallingUid()); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(new android.net.NetworkCapabilities(networkCapabilities), TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log((""pendingListenForNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); }",c006e50af2af91d1408544eac31ab895c6b20f2c,"@java.lang.Override public void pendingListenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, ""PendingIntent cannot be null.""); if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } ensureValidNetworkSpecifier(networkCapabilities); final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); nc.setSingleUid(android.os.Binder.getCallingUid()); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log((""pendingListenForNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); }",998aea43d0e562356bd52525077076015e0e7073,2018-01-24 04:09:42,14
589435,services_core_java_com_android_server_ConnectivityService.java,"@java.lang.Override public android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int userId) { enforceAccessPermission(); java.util.HashMap<android.net.Network, android.net.NetworkCapabilities> result = new java.util.HashMap<android.net.Network, android.net.NetworkCapabilities>(); com.android.server.connectivity.NetworkAgentInfo nai = getDefaultNetwork(); android.net.NetworkCapabilities nc = getNetworkCapabilitiesInternal(nai); if (nc != null) { result.put(nai.network, nc); } synchronized(mVpns) { if (!(mLockdownEnabled)) { com.android.server.connectivity.Vpn vpn = mVpns.get(userId); if (vpn != null) { android.net.Network[] networks = vpn.getUnderlyingNetworks(); if (networks != null) { for (android.net.Network network : networks) { nai = getNetworkAgentInfoForNetwork(network); nc = getNetworkCapabilitiesInternal(nai); if (nc != null) { result.put(network, nc); } } } } } } android.net.NetworkCapabilities[] out = new android.net.NetworkCapabilities[result.size()]; out = result.values().toArray(out); return out; }",0f77bba5ca8427873f449408f9cea3fe3c308d85,"@java.lang.Override public android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int userId) { enforceAccessPermission(); java.util.HashMap<android.net.Network, android.net.NetworkCapabilities> result = new java.util.HashMap<android.net.Network, android.net.NetworkCapabilities>(); com.android.server.connectivity.NetworkAgentInfo nai = getDefaultNetwork(); android.net.NetworkCapabilities nc = getNetworkCapabilitiesInternal(nai); if (nc != null) { result.put(nai.network, nc); } synchronized(mVpns) { if (!(mLockdownEnabled)) { com.android.server.connectivity.Vpn vpn = mVpns.get(userId); if (vpn != null) { android.net.Network[] networks = vpn.getUnderlyingNetworks(); if (networks != null) { for (android.net.Network network : networks) { nai = getNetworkAgentInfoForNetwork(network); nc = getNetworkCapabilitiesInternal(nai); nc.setSingleUid(userId); if (nc != null) { result.put(network, nc); } } } } } } android.net.NetworkCapabilities[] out = new android.net.NetworkCapabilities[result.size()]; out = result.values().toArray(out); return out; }",7663c18b055c3d4d69f72ffddf332030c20c4c8b,"@java.lang.Override public android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int userId) { enforceAccessPermission(); java.util.HashMap<android.net.Network, android.net.NetworkCapabilities> result = new java.util.HashMap<android.net.Network, android.net.NetworkCapabilities>(); com.android.server.connectivity.NetworkAgentInfo nai = getDefaultNetwork(); android.net.NetworkCapabilities nc = getNetworkCapabilitiesInternal(nai); if (nc != null) { result.put(nai.network, nc); } synchronized(mVpns) { if (!(mLockdownEnabled)) { com.android.server.connectivity.Vpn vpn = mVpns.get(userId); if (vpn != null) { android.net.Network[] networks = vpn.getUnderlyingNetworks(); if (networks != null) { for (android.net.Network network : networks) { nai = getNetworkAgentInfoForNetwork(network); nc = getNetworkCapabilitiesInternal(nai); if (nc != null) { nc.setSingleUid(userId); result.put(network, nc); } } } } } } android.net.NetworkCapabilities[] out = new android.net.NetworkCapabilities[result.size()]; out = result.values().toArray(out); return out; }",c4d01c075c1d313cf7b58b23581bc7fb074b8b5f,2018-01-24 04:09:42,14
577277,core_java_android_net_NetworkCapabilities.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean satisfiedByAllowedUids(android.net.NetworkCapabilities nc) { if (null == (mAllowedUids)) return true; if (null == (nc.mAllowedUids)) return false; for (android.net.UidRange requiredRange : nc.mAllowedUids) { if (!(allowsUidRange(requiredRange))) { return false; } } return true; },703aed10548485a303a807fd80bf62d52bf56a89,public boolean satisfiedByUids(android.net.NetworkCapabilities nc) { if (null == (nc.mUids)) return true; if (null == (mUids)) return false; for (android.net.UidRange requiredRange : mUids) { if (!(nc.appliesToUidRange(requiredRange))) { return false; } } return true; },5f9747d78d524e3d12468e6d61348bee5bd774a8,2018-01-24 04:09:42,13
577277,core_java_android_net_NetworkCapabilities.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public android.net.NetworkCapabilities setAllowedUids(java.util.Set<android.net.UidRange> allowedUids) { if (null == allowedUids) { mAllowedUids = null; } else { mAllowedUids = new android.util.ArraySet(allowedUids); } return this; },9b2208d5e6270585ff24428180d63d3bdd74b4bd,public android.net.NetworkCapabilities setUids(java.util.Set<android.net.UidRange> uids) { if (null == uids) { mUids = null; } else { mUids = new android.util.ArraySet(uids); } return this; },11505c12a1b08e7ea6db409c74314d844d8717e6,2018-01-24 04:09:42,13
589435,services_core_java_com_android_server_ConnectivityService.java,"private android.net.NetworkRequest createInternetRequestForTransport(int transportType, android.net.NetworkRequest.Type type) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCap.addCapability(com.android.server.NET_CAPABILITY_INTERNET); netCap.addCapability(com.android.server.NET_CAPABILITY_NOT_RESTRICTED); if (transportType > (-1)) { netCap.addTransportType(transportType); } return new android.net.NetworkRequest(netCap, TYPE_NONE, nextNetworkRequestId(), type); }",aaa16d91ef6613163591ca544b94e9bd73883e48,"private android.net.NetworkRequest createDefaultInternetRequestForTransport(int transportType, android.net.NetworkRequest.Type type) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCap.addCapability(com.android.server.NET_CAPABILITY_INTERNET); netCap.addCapability(com.android.server.NET_CAPABILITY_NOT_RESTRICTED); if (transportType > (-1)) { netCap.addTransportType(transportType); } netCap.removeCapability(NetworkCapabilities.NET_CAPABILITY_NOT_VPN); return new android.net.NetworkRequest(netCap, TYPE_NONE, nextNetworkRequestId(), type); }",de51d3889bd8827f8bb907f34b3d2754931a870f,"private android.net.NetworkRequest createDefaultInternetRequestForTransport(int transportType, android.net.NetworkRequest.Type type) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCap.addCapability(com.android.server.NET_CAPABILITY_INTERNET); netCap.addCapability(com.android.server.NET_CAPABILITY_NOT_RESTRICTED); if (transportType > (-1)) { netCap.addTransportType(transportType); } return new android.net.NetworkRequest(netCap, TYPE_NONE, nextNetworkRequestId(), type); }",db2ad8eed59cdf2f1fba377d069fe342bf3ad2b1,2018-01-24 04:09:42,14
589435,services_core_java_com_android_server_ConnectivityService.java,"@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log((""listenForNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }",ef8740af2e199a9f746d0e77bcd5563060973454,"@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } networkCapabilities.setSingleUid(android.os.Binder.getCallingUid()); android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log((""listenForNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }",b757f93eb78ee2b0e2d9b3acfc7e09283876a7ea,"@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); nc.setSingleUid(android.os.Binder.getCallingUid()); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log((""listenForNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }",9a34321242c52bf9b372d2e9fc784013f58c90c6,2018-01-24 04:09:42,14
590295,core_java_android_net_NetworkMisc.java,@java.lang.Override public android.net.NetworkMisc createFromParcel(android.os.Parcel in) { android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (in.readInt()) != 0; networkMisc.explicitlySelected = (in.readInt()) != 0; networkMisc.acceptUnvalidated = (in.readInt()) != 0; networkMisc.subscriberId = in.readString(); networkMisc.provisioningNotificationDisabled = (in.readInt()) != 0; return networkMisc; },e33c455b0af7c3ffc35c9fbdd945b307624e4852,@java.lang.Override public android.net.NetworkMisc createFromParcel(android.os.Parcel in) { android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (in.readInt()) != 0; networkMisc.explicitlySelected = (in.readInt()) != 0; networkMisc.acceptUnvalidated = (in.readInt()) != 0; networkMisc.subscriberId = in.readString(); networkMisc.provisioningNotificationDisabled = (in.readInt()) != 0; networkMisc.managerUid = in.readInt(); return networkMisc; },6f95cc3090b3783dd21b6ec492359e3daa648a0e,@java.lang.Override public android.net.NetworkMisc createFromParcel(android.os.Parcel in) { android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (in.readInt()) != 0; networkMisc.explicitlySelected = (in.readInt()) != 0; networkMisc.acceptUnvalidated = (in.readInt()) != 0; networkMisc.subscriberId = in.readString(); networkMisc.provisioningNotificationDisabled = (in.readInt()) != 0; return networkMisc; },e33c455b0af7c3ffc35c9fbdd945b307624e4852,2018-01-24 04:09:42,10
577277,core_java_android_net_NetworkCapabilities.java,"@java.lang.Override public java.lang.String toString() { int[] types = getTransportTypes(); java.lang.String transports = ((types.length) > 0) ? "" Transports: "" + (android.net.NetworkCapabilities.transportNamesOf(types)) : """"; types = getCapabilities(); java.lang.String capabilities = ((types.length) > 0) ? "" Capabilities: "" : """"; for (int i = 0; i < (types.length);) { capabilities += android.net.NetworkCapabilities.capabilityNameOf(types[i]); if ((++i) < (types.length)) capabilities += ""&""; } java.lang.String upBand = ((mLinkUpBandwidthKbps) > 0) ? ("" LinkUpBandwidth>="" + (mLinkUpBandwidthKbps)) + ""Kbps"" : """"; java.lang.String dnBand = ((mLinkDownBandwidthKbps) > 0) ? ("" LinkDnBandwidth>="" + (mLinkDownBandwidthKbps)) + ""Kbps"" : """"; java.lang.String specifier = ((mNetworkSpecifier) == null) ? """" : ("" Specifier: <"" + (mNetworkSpecifier)) + "">""; java.lang.String signalStrength = (hasSignalStrength()) ? "" SignalStrength: "" + (mSignalStrength) : """"; return ((((((""["" + transports) + capabilities) + upBand) + dnBand) + specifier) + signalStrength) + ""]""; }",3b4851d1e8f5bd6c806305389cb79d0c63c3278a,"@java.lang.Override public java.lang.String toString() { int[] types = getTransportTypes(); java.lang.String transports = ((types.length) > 0) ? "" Transports: "" + (android.net.NetworkCapabilities.transportNamesOf(types)) : """"; types = getCapabilities(); java.lang.String capabilities = ((types.length) > 0) ? "" Capabilities: "" : """"; for (int i = 0; i < (types.length);) { capabilities += android.net.NetworkCapabilities.capabilityNameOf(types[i]); if ((++i) < (types.length)) capabilities += ""&""; } java.lang.String upBand = ((mLinkUpBandwidthKbps) > 0) ? ("" LinkUpBandwidth>="" + (mLinkUpBandwidthKbps)) + ""Kbps"" : """"; java.lang.String dnBand = ((mLinkDownBandwidthKbps) > 0) ? ("" LinkDnBandwidth>="" + (mLinkDownBandwidthKbps)) + ""Kbps"" : """"; java.lang.String specifier = ((mNetworkSpecifier) == null) ? """" : ("" Specifier: <"" + (mNetworkSpecifier)) + "">""; java.lang.String signalStrength = (hasSignalStrength()) ? "" SignalStrength: "" + (mSignalStrength) : """"; java.lang.String allowedUids = (null != (mAllowedUids)) ? ("" AllowedUids: <"" + (mAllowedUids)) + "">"" : """"; return (((((((""["" + transports) + capabilities) + upBand) + dnBand) + specifier) + signalStrength) + allowedUids) + ""]""; }",6191405e2477932abb3ad5ebe8ecb41ff1b2d42a,"@java.lang.Override public java.lang.String toString() { int[] types = getTransportTypes(); java.lang.String transports = ((types.length) > 0) ? "" Transports: "" + (android.net.NetworkCapabilities.transportNamesOf(types)) : """"; types = getCapabilities(); java.lang.String capabilities = ((types.length) > 0) ? "" Capabilities: "" : """"; for (int i = 0; i < (types.length);) { capabilities += android.net.NetworkCapabilities.capabilityNameOf(types[i]); if ((++i) < (types.length)) capabilities += ""&""; } java.lang.String upBand = ((mLinkUpBandwidthKbps) > 0) ? ("" LinkUpBandwidth>="" + (mLinkUpBandwidthKbps)) + ""Kbps"" : """"; java.lang.String dnBand = ((mLinkDownBandwidthKbps) > 0) ? ("" LinkDnBandwidth>="" + (mLinkDownBandwidthKbps)) + ""Kbps"" : """"; java.lang.String specifier = ((mNetworkSpecifier) == null) ? """" : ("" Specifier: <"" + (mNetworkSpecifier)) + "">""; java.lang.String signalStrength = (hasSignalStrength()) ? "" SignalStrength: "" + (mSignalStrength) : """"; java.lang.String uids = (null != (mUids)) ? ("" Uids: <"" + (mUids)) + "">"" : """"; return (((((((""["" + transports) + capabilities) + upBand) + dnBand) + specifier) + signalStrength) + uids) + ""]""; }",ce096ef190b8abd637440a0736cb49ece7640543,2018-01-24 04:09:42,13
577277,core_java_android_net_NetworkCapabilities.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.android.internal.annotations.VisibleForTesting public boolean allowsUidRange(android.net.UidRange requiredRange) { if (null == (mAllowedUids)) return true; for (android.net.UidRange allowedRange : mAllowedUids) { if (allowedRange.containsRange(requiredRange)) { return true; } } return false; },5fbb2f9a17c0fdc52bd9ad6ff098ac6ff61507a7,@com.android.internal.annotations.VisibleForTesting public boolean appliesToUidRange(android.net.UidRange requiredRange) { if (null == (mUids)) return true; for (android.net.UidRange uidRange : mUids) { if (uidRange.containsRange(requiredRange)) { return true; } } return false; },bd020be2ed83467c431ed99b192cb9613db92300,2018-01-24 04:09:42,13
577277,core_java_android_net_NetworkCapabilities.java,public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineTransportTypes(nc); combineLinkBandwidths(nc); combineSpecifiers(nc); combineSignalStrength(nc); },532ffcd3f09874add76b1929d7e736a60eb965d9,public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineTransportTypes(nc); combineLinkBandwidths(nc); combineSpecifiers(nc); combineSignalStrength(nc); combineAllowedUids(nc); },516c11a9f4af58db5f800e6bb74411a2a5ec4267,public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineTransportTypes(nc); combineLinkBandwidths(nc); combineSpecifiers(nc); combineSignalStrength(nc); combineUids(nc); },9fe3fcc90adb3ef7954c3bb5cd214d7e8976bdae,2018-01-24 04:09:42,13
577277,core_java_android_net_NetworkCapabilities.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.android.internal.annotations.VisibleForTesting public boolean equalsAllowedUids(android.net.NetworkCapabilities nc) { java.util.Set<android.net.UidRange> comparedUids = nc.mAllowedUids; if (null == comparedUids) return null == (mAllowedUids); if (null == (mAllowedUids)) return false; final java.util.Set<android.net.UidRange> allowedUids = new android.util.ArraySet(mAllowedUids); for (android.net.UidRange range : comparedUids) { if (!(allowedUids.contains(range))) { return false; } allowedUids.remove(range); } return allowedUids.isEmpty(); },19b3edc3a91a97254f477633c42356577ce5507d,@com.android.internal.annotations.VisibleForTesting public boolean equalsUids(android.net.NetworkCapabilities nc) { java.util.Set<android.net.UidRange> comparedUids = nc.mUids; if (null == comparedUids) return null == (mUids); if (null == (mUids)) return false; final java.util.Set<android.net.UidRange> uids = new android.util.ArraySet(mUids); for (android.net.UidRange range : comparedUids) { if (!(uids.contains(range))) { return false; } uids.remove(range); } return uids.isEmpty(); },815c7704038b4b84496c7a43cc0e69af4978b6b1,2018-01-24 04:09:42,13
577277,tests_net_java_android_net_NetworkCapabilitiesTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testParcelNetworkCapabilities() { final java.util.Set<android.net.UidRange> uids = new android.util.ArraySet(); uids.add(new android.net.UidRange(50, 100)); uids.add(new android.net.UidRange(3000, 4000)); final android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET).setAllowedUids(uids).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_EIMS).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED); assertEqualsThroughMarshalling(netCap); }",4c3d82ded7ad321e42a60d26f519536ec05f34c1,"@org.junit.Test public void testParcelNetworkCapabilities() { final java.util.Set<android.net.UidRange> uids = new android.util.ArraySet(); uids.add(new android.net.UidRange(50, 100)); uids.add(new android.net.UidRange(3000, 4000)); final android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET).setUids(uids).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_EIMS).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED); assertEqualsThroughMarshalling(netCap); }",cb06141b1610d549546e3b489c0d557fe959f1d3,2018-01-24 04:09:42,13
588346,src_java_com_android_internal_telephony_uicc_UiccController.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void switchSlots(int[] physicalSlots) { },e507ede65f7570a365bf94e4a3faa4c5559e0f27,"public void switchSlots(int[] physicalSlots, android.os.Message response) { mRadioConfig.setSimSlotsMapping(physicalSlots, response); }",db72c252915bd69fd6a784c51d0d208c00680b7f,2018-01-24 05:08:03,7
588346,src_java_com_android_internal_telephony_uicc_UiccCard.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public int getCardId() { return 0; },eb9fdeaa928db87ed7624660e690196d50580c31,public java.lang.String getCardId() { if ((mCardId) != null) { return mCardId; } else if ((mUiccProfile) != null) { return mUiccProfile.getIccId(); } else { return null; } },16a95de253cd813e98ff399171c6c184e09ecd50,2018-01-24 05:08:03,7
588357,telephony_java_android_telephony_TelephonyManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void switchSlots(int[] physicalSlots) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony == null) { return; } telephony.switchSlots(physicalSlots); } catch (android.os.RemoteException e) { return; } },c176b4a6fefde96bf484518748928fea700ad3c7,@android.annotation.SystemApi @android.annotation.RequiresPermission(android.Manifest.permission.MODIFY_PHONE_STATE) public boolean switchSlots(int[] physicalSlots) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony == null) { return false; } return telephony.switchSlots(physicalSlots); } catch (android.os.RemoteException e) { return false; } },8ddc9659cefe8d5469e291d7710e4ed7746a989b,2018-01-24 05:08:03,8
588357,telephony_java_android_telephony_UiccSlotInfo.java,,,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeByte(((byte) (isActive ? 1 : 0))); dest.writeByte(((byte) (isEuicc ? 1 : 0))); dest.writeInt(cardId); dest.writeInt(cardStateInfo); }",bc8c8d08543f2623d857dec16dfb31a8c7c29d30,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeByte(((byte) (isActive ? 1 : 0))); dest.writeByte(((byte) (isEuicc ? 1 : 0))); dest.writeString(cardId); dest.writeInt(cardStateInfo); }",97ab4d8d0cce1782b23f96f5b2fef8e139a7500b,2018-01-24 05:08:03,8
588357,telephony_java_android_telephony_UiccSlotInfo.java,,,public int getCardId() { return cardId; },1e5afe2d5ec0d8680aea9c841af2b161ff5e7ce8,public java.lang.String getCardId() { return cardId; },97c955f8c8f7a046d1e4f381a73e89ac14724ef8,2018-01-24 05:08:03,8
588358,src_com_android_phone_PhoneInterfaceManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void switchSlots(int[] physicalSlots) { com.android.internal.telephony.uicc.UiccController.getInstance().switchSlots(physicalSlots); },aac67ab14fceda9953a3f904fbacd0a560c85085,"@java.lang.Override public boolean switchSlots(int[] physicalSlots) { enforceModifyPermission(); return ((java.lang.Boolean) (sendRequest(com.android.phone.PhoneInterfaceManager.CMD_SWITCH_SLOTS, physicalSlots))); }",ece0ab44cc8a55e845375e5b3c95d58faf8c49c3,2018-01-24 05:08:03,5
588358,src_com_android_phone_PhoneInterfaceManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public android.telephony.UiccSlotInfo[] getUiccSlotsInfo() { com.android.internal.telephony.uicc.UiccSlot[] slots = com.android.internal.telephony.uicc.UiccController.getInstance().getUiccSlots(); if (slots == null) return null; android.telephony.UiccSlotInfo[] infos = new android.telephony.UiccSlotInfo[slots.length]; for (int i = 0; i < (slots.length); i++) { com.android.internal.telephony.uicc.UiccSlot slot = slots[i]; int cardId = com.android.internal.telephony.uicc.UiccController.getInstance().getUiccCard(i).getCardId(); int cardState = 0; switch (slot.getCardState()) { case CARDSTATE_ABSENT : cardState = android.telephony.UiccSlotInfo.CARD_STATE_INFO_ABSENT; break; case CARDSTATE_PRESENT : cardState = android.telephony.UiccSlotInfo.CARD_STATE_INFO_PRESENT; break; case CARDSTATE_ERROR : cardState = android.telephony.UiccSlotInfo.CARD_STATE_INFO_ERROR; break; case CARDSTATE_RESTRICTED : cardState = android.telephony.UiccSlotInfo.CARD_STATE_INFO_RESTRICTED; break; default : break; } infos[i] = new android.telephony.UiccSlotInfo.Builder().setIsActive(slot.isActive()).setIsEuicc(slot.isEuicc()).setCardId(cardId).setCardState(cardState).build(); } return infos; },2f2921626150dfdd24e3fc76c9991a161409d24b,"@java.lang.Override public android.telephony.UiccSlotInfo[] getUiccSlotsInfo() { enforceReadPrivilegedPermission(); com.android.internal.telephony.uicc.UiccSlot[] slots = com.android.internal.telephony.uicc.UiccController.getInstance().getUiccSlots(); if (slots == null) return null; android.telephony.UiccSlotInfo[] infos = new android.telephony.UiccSlotInfo[slots.length]; for (int i = 0; i < (slots.length); i++) { com.android.internal.telephony.uicc.UiccSlot slot = slots[i]; java.lang.String cardId = com.android.internal.telephony.uicc.UiccController.getInstance().getUiccCard(i).getCardId(); int cardState = 0; switch (slot.getCardState()) { case CARDSTATE_ABSENT : cardState = android.telephony.UiccSlotInfo.CARD_STATE_INFO_ABSENT; break; case CARDSTATE_PRESENT : cardState = android.telephony.UiccSlotInfo.CARD_STATE_INFO_PRESENT; break; case CARDSTATE_ERROR : cardState = android.telephony.UiccSlotInfo.CARD_STATE_INFO_ERROR; break; case CARDSTATE_RESTRICTED : cardState = android.telephony.UiccSlotInfo.CARD_STATE_INFO_RESTRICTED; break; default : break; } infos[i] = new android.telephony.UiccSlotInfo(slot.isActive(), slot.isEuicc(), cardId, cardState); } return infos; }",ab9be6ccdb36be1fb86ad3decb528b5b78a7374c,2018-01-24 05:08:03,5
588357,telephony_java_android_telephony_TelephonyManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public android.telephony.UiccSlotInfo[] getUiccSlotsInfo() { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony == null) { return null; } return telephony.getUiccSlotsInfo(); } catch (android.os.RemoteException e) { return null; } },92e3d7b96d87dd6f89e2bb2f549e672573bd5ac0,@android.annotation.SystemApi @android.annotation.RequiresPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE) public android.telephony.UiccSlotInfo[] getUiccSlotsInfo() { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony == null) { return null; } return telephony.getUiccSlotsInfo(); } catch (android.os.RemoteException e) { return null; } },3374a6ef574a918cc389a3d98eb167c916042419,2018-01-24 05:08:03,8
588357,telephony_java_android_telephony_UiccSlotInfo.java,,,@java.lang.Override public int hashCode() { int result = 1; result = (31 * result) + (isActive ? 1 : 0); result = (31 * result) + (isEuicc ? 1 : 0); result = (31 * result) + (cardId); result = (31 * result) + (cardStateInfo); return result; },f0eb6f6bff3ebbb3f52a672c361a0c237d75f188,@java.lang.Override public int hashCode() { int result = 1; result = (31 * result) + (isActive ? 1 : 0); result = (31 * result) + (isEuicc ? 1 : 0); result = (31 * result) + (java.util.Objects.hashCode(cardId)); result = (31 * result) + (cardStateInfo); return result; },fbe63d63a11bed4dc7af6e621852d980ea2e62c9,2018-01-24 05:08:03,8
586414,tests_net_java_com_android_server_IpSecServiceParameterizedTest.java,"@org.junit.Test public void testTransportModeTransformBinderDeath() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT)); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN)); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",5eddc143711d1cfd04adb46b91240557ebafd8fe,"@org.junit.Test public void testTransportModeTransformBinderDeath() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), anyInt(), anyInt()); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), anyInt(), anyInt()); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",26824b0e1961e58071a37129ac90597de5806c3b,"@org.junit.Test public void testTransportModeTransformBinderDeath() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI), anyInt(), anyInt()); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",acbfbeb9bfd2fe4904dfd23cfeed59c08c3e20a1,2018-01-24 05:53:27,3
586414,services_core_java_com_android_server_IpSecService.java,"@java.lang.Override public void freeUnderlyingResources() { for (int direction : com.android.server.IpSecService.DIRECTIONS) { int spi = mSpis[direction].getSpi(); try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, direction, mConfig.getLocalAddress(), mConfig.getRemoteAddress(), spi); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, (""Failed to delete SA with ID: "" + (mResourceId))); } } getResourceTracker().give(); }",a433d09b0a30e7975582b67ea2b08ea8869b378b,"@java.lang.Override public void freeUnderlyingResources() { for (int direction : com.android.server.IpSecService.DIRECTIONS) { int spi = mSpis[direction].getSpi(); try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, direction, mConfig.getLocalAddress(), mConfig.getRemoteAddress(), spi, 0, 0); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, (""Failed to delete SA with ID: "" + (mResourceId))); } } getResourceTracker().give(); }",507c018bb4512d2b1f19b749ae66d4ce38fc6763,"@java.lang.Override public void freeUnderlyingResources() { int spi = mSpi.getSpi(); try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, mConfig.getSourceAddress(), mConfig.getDestinationAddress(), spi, mConfig.getMarkValue(), mConfig.getMarkMask()); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, (""Failed to delete SA with ID: "" + (mResourceId))); } getResourceTracker().give(); }",9627165c779a42d2b18d21a6487f3110e6627c5d,2018-01-24 05:53:27,3
586414,tests_net_java_com_android_server_IpSecServiceParameterizedTest.java,"@org.junit.Test public void testCreateTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); }",e746232b54bb418fb2da4585dfc138c6a48b2d5b,"@org.junit.Test public void testCreateTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), anyInt(), anyInt(), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), anyInt(), anyInt(), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); }",989e4fdb4d4a16e032c1c2bf01d16a9aeef90eeb,"@org.junit.Test public void testCreateTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI), anyInt(), anyInt(), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); }",771b9f3a9eb729f31d51f7f94ed1a9c39fe5f34d,2018-01-24 05:53:27,3
586414,tests_net_java_com_android_server_IpSecServiceParameterizedTest.java,"@org.junit.Test public void testDeleteTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); mIpSecService.deleteTransportModeTransform(createTransformResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT)); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN)); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",61cd69b2c6c15b91bee21f46b47dc688be9fcc77,"@org.junit.Test public void testDeleteTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); mIpSecService.deleteTransportModeTransform(createTransformResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), anyInt(), anyInt()); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), anyInt(), anyInt()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",84a73a53b1429c14093ae95ea0095fa3bb5be74d,"@org.junit.Test public void testDeleteTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); mIpSecService.deleteTransportModeTransform(createTransformResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI), anyInt(), anyInt()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",e46fe7b52d6e3358aa4ed51ad1cb4514e07f017f,2018-01-24 05:53:27,3
586414,tests_net_java_com_android_server_IpSecServiceParameterizedTest.java,"@org.junit.Test public void testSecurityParameterIndexBinderDeath() throws java.lang.Exception { when(mMockNetd.ipSecAllocateSpi(anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), eq(mRemoteAddr), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT))).thenReturn(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT); IpSecSpiResponse spiResp = mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, mRemoteAddr, com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(spiResp.resourceId), anyInt(), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT)); assertEquals(0, userRecord.mSpiQuotaTracker.mCurrent); try { userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",92d0768c6ed887f757204862b3a6327204e88d91,"@org.junit.Test public void testSecurityParameterIndexBinderDeath() throws java.lang.Exception { when(mMockNetd.ipSecAllocateSpi(anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), eq(mRemoteAddr), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT))).thenReturn(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT); IpSecSpiResponse spiResp = mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, mRemoteAddr, com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(spiResp.resourceId), anyInt(), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), anyInt(), anyInt()); assertEquals(0, userRecord.mSpiQuotaTracker.mCurrent); try { userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",843daa7ab8207930d9764456da9e29e53d830e23,"@org.junit.Test public void testSecurityParameterIndexBinderDeath() throws java.lang.Exception { when(mMockNetd.ipSecAllocateSpi(anyInt(), anyString(), eq(mDestinationAddr), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI))).thenReturn(com.android.server.IpSecServiceParameterizedTest.TEST_SPI); IpSecSpiResponse spiResp = mIpSecService.allocateSecurityParameterIndex(mDestinationAddr, com.android.server.IpSecServiceParameterizedTest.TEST_SPI, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(spiResp.resourceId), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI), anyInt(), anyInt()); assertEquals(0, userRecord.mSpiQuotaTracker.mCurrent); try { userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",c7caa1e67e76eb81b03bb535831f1b97d10cfc16,2018-01-24 05:53:27,3
586414,services_core_java_com_android_server_IpSecService.java,"@java.lang.Override public void freeUnderlyingResources() { if (mOwnedByTransform) { android.util.Log.d(com.android.server.IpSecService.TAG, ((""Cannot release Spi "" + (mSpi)) + "": Currently locked by a Transform"")); return; } try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, mDirection, mLocalAddress, mRemoteAddress, mSpi); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, (""Failed to delete SPI reservation with ID: "" + (mResourceId))); } mSpi = android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX; getResourceTracker().give(); }",5f8100c737988143a19029bb3f54c03410a92cc6,"@java.lang.Override public void freeUnderlyingResources() { if (mOwnedByTransform) { android.util.Log.d(com.android.server.IpSecService.TAG, ((""Cannot release Spi "" + (mSpi)) + "": Currently locked by a Transform"")); return; } try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, mDirection, mLocalAddress, mRemoteAddress, mSpi, 0, 0); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, (""Failed to delete SPI reservation with ID: "" + (mResourceId))); } mSpi = android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX; getResourceTracker().give(); }",8af60fea4d26da154b40335a232a98b4ebd05018,"@java.lang.Override public void freeUnderlyingResources() { if (mOwnedByTransform) { android.util.Log.d(com.android.server.IpSecService.TAG, ((""Cannot release Spi "" + (mSpi)) + "": Currently locked by a Transform"")); return; } try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, mSourceAddress, mDestinationAddress, mSpi, 0, 0); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, (""Failed to delete SPI reservation with ID: "" + (mResourceId))); } mSpi = android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX; getResourceTracker().give(); }",965a02e284d8a18a18678f52e1c5eabd823302fe,2018-01-24 05:53:27,3
586414,tests_net_java_com_android_server_IpSecServiceParameterizedTest.java,"@org.junit.Test public void testCreateTransportModeTransformAead() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); ipSecConfig.setAuthenticatedEncryption(IpSecTransform.DIRECTION_OUT, com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); ipSecConfig.setAuthenticatedEncryption(IpSecTransform.DIRECTION_IN, com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), eq(""""), eq(new byte[]{ }), eq(0), eq(""""), eq(new byte[]{ }), eq(0), eq(IpSecAlgorithm.AUTH_CRYPT_AES_GCM), eq(com.android.server.IpSecServiceParameterizedTest.AEAD_KEY), anyInt(), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), eq(""""), eq(new byte[]{ }), eq(0), eq(""""), eq(new byte[]{ }), eq(0), eq(IpSecAlgorithm.AUTH_CRYPT_AES_GCM), eq(com.android.server.IpSecServiceParameterizedTest.AEAD_KEY), anyInt(), anyInt(), anyInt(), anyInt()); }",c6f5faaf926ffa22f4d3b5ce93cdaa80f4e61bc9,"@org.junit.Test public void testCreateTransportModeTransformAead() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); ipSecConfig.setAuthenticatedEncryption(IpSecTransform.DIRECTION_OUT, com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); ipSecConfig.setAuthenticatedEncryption(IpSecTransform.DIRECTION_IN, com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), anyInt(), anyInt(), eq(""""), eq(new byte[]{ }), eq(0), eq(""""), eq(new byte[]{ }), eq(0), eq(IpSecAlgorithm.AUTH_CRYPT_AES_GCM), eq(com.android.server.IpSecServiceParameterizedTest.AEAD_KEY), anyInt(), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), anyInt(), anyInt(), eq(""""), eq(new byte[]{ }), eq(0), eq(""""), eq(new byte[]{ }), eq(0), eq(IpSecAlgorithm.AUTH_CRYPT_AES_GCM), eq(com.android.server.IpSecServiceParameterizedTest.AEAD_KEY), anyInt(), anyInt(), anyInt(), anyInt()); }",2b8c951a2177aaf728966ee3f5eb56a07a8003cb,"@org.junit.Test public void testCreateTransportModeTransformAead() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); ipSecConfig.setAuthenticatedEncryption(com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI), anyInt(), anyInt(), eq(""""), eq(new byte[]{ }), eq(0), eq(""""), eq(new byte[]{ }), eq(0), eq(IpSecAlgorithm.AUTH_CRYPT_AES_GCM), eq(com.android.server.IpSecServiceParameterizedTest.AEAD_KEY), anyInt(), anyInt(), anyInt(), anyInt()); }",dfd3d5ab98010d328de979095e6997920171c3b0,2018-01-24 05:53:27,3
586414,tests_net_java_com_android_server_IpSecServiceParameterizedTest.java,"@org.junit.Test public void testReleaseSecurityParameterIndex() throws java.lang.Exception { when(mMockNetd.ipSecAllocateSpi(anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), eq(mRemoteAddr), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT))).thenReturn(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT); android.net.IpSecSpiResponse spiResp = mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, mRemoteAddr, com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT, new android.os.Binder()); mIpSecService.releaseSecurityParameterIndex(spiResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(spiResp.resourceId), anyInt(), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT)); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mSpiQuotaTracker.mCurrent); try { userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",6a2e1ba3655c49a5dab782dcfbabe156f28f7ebe,"@org.junit.Test public void testReleaseSecurityParameterIndex() throws java.lang.Exception { when(mMockNetd.ipSecAllocateSpi(anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), eq(mRemoteAddr), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT))).thenReturn(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT); android.net.IpSecSpiResponse spiResp = mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, mRemoteAddr, com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT, new android.os.Binder()); mIpSecService.releaseSecurityParameterIndex(spiResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(spiResp.resourceId), anyInt(), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), anyInt(), anyInt()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mSpiQuotaTracker.mCurrent); try { userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",83ab5d6690c9a305e98878c26c37b794049366d3,"@org.junit.Test public void testReleaseSecurityParameterIndex() throws java.lang.Exception { when(mMockNetd.ipSecAllocateSpi(anyInt(), anyString(), eq(mDestinationAddr), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI))).thenReturn(com.android.server.IpSecServiceParameterizedTest.TEST_SPI); android.net.IpSecSpiResponse spiResp = mIpSecService.allocateSecurityParameterIndex(mDestinationAddr, com.android.server.IpSecServiceParameterizedTest.TEST_SPI, new android.os.Binder()); mIpSecService.releaseSecurityParameterIndex(spiResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(spiResp.resourceId), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI), anyInt(), anyInt()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mSpiQuotaTracker.mCurrent); try { userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",487f50314682f4e34ccc74582f4aa85ba40752ce,2018-01-24 05:53:27,3
593048,services_core_java_com_android_server_IpSecService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.android.server.IpSecTunnelInterfaceResponse createTunnelInterface(com.android.server.Network underlyingNetwork, java.lang.String localAddr, java.lang.String remoteAddr) { checkNotNull(binder, ""Null Binder passed to openUdpEncapsulationSocket""); checkNotNull(underlyingNetwork, ""No underlying network was specified""); checkNotNull(localAddr, ""No local address was specified""); checkNotNull(remoteAddr, ""No remote address was specified""); com.android.server.IpSecService.checkInetAddress(localAddr); com.android.server.IpSecService.checkInetAddress(remoteAddr); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); final int resourceId = (mNextResourceId)++; final int ikey = mReserveKeyTracker.reserve(); final int okey = mReserveKeyTracker.reserve(); try { if (!(userRecord.mTunnelQuotaTracker.isAvailable())) { return new android.net.IpSecTransformResponse(IpSecManager.Status.RESOURCE_UNAVAILABLE); } java.lang.String intfName = """"; userRecord.mTunnelInterfaceRecords.put(resourceId, new com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.TunnelInterfaceRecord>(new com.android.server.IpSecService.TunnelInterfaceRecord(resourceId, intfName, underlyingNetwork, localAddr, remoteAddr, ikey, okey), binder)); return new android.net.IpSecTransformResponse(IpSecManager.Status.OK, resourceId); } catch (java.io.IOException | android.system.ErrnoException e) { libcore.io.IoUtils.closeQuietly(sockFd); } return new android.net.IpSecTransformResponse(IpSecManager.Status.RESOURCE_UNAVAILABLE); }",dce65872941163071f1ec2060f18b4c2f36adaf8,"@java.lang.Override public synchronized android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String localAddr, java.lang.String remoteAddr, android.net.Network underlyingNetwork, android.os.IBinder binder) { checkNotNull(binder, ""Null Binder passed to createTunnelInterface""); checkNotNull(underlyingNetwork, ""No underlying network was specified""); com.android.server.IpSecService.checkInetAddress(localAddr); com.android.server.IpSecService.checkInetAddress(remoteAddr); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); if (!(userRecord.mTunnelQuotaTracker.isAvailable())) { return new android.net.IpSecTunnelInterfaceResponse(IpSecManager.Status.RESOURCE_UNAVAILABLE); } final int resourceId = (mNextResourceId)++; final int ikey = reserveNetId(); final int okey = reserveNetId(); java.lang.String intfName = java.lang.String.format(""%s%d"", com.android.server.IpSecService.TUNNEL_INTERFACE_PREFIX, resourceId); userRecord.mTunnelInterfaceRecords.put(resourceId, new com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.TunnelInterfaceRecord>(new com.android.server.IpSecService.TunnelInterfaceRecord(resourceId, intfName, underlyingNetwork, localAddr, remoteAddr, ikey, okey), binder)); return new android.net.IpSecTunnelInterfaceResponse(IpSecManager.Status.OK, resourceId, intfName); }",824da02520f11829b361398eef61f5dc0ba9d697,2018-01-24 07:25:02,28
593048,services_core_java_com_android_server_IpSecService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void freeUnderlyingResources() { try { mSrvConfig.getNetdInstance().removeVirtualTunnelInterface(mInterfaceName); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, (((""Failed to delete VTI with interface name: "" + (mInterfaceName)) + "" and id: "") + (mResourceId))); } getResourceTracker().give(); }",a76bf40c97daceaf202fff45d847f7c0c3f55769,@java.lang.Override public void freeUnderlyingResources() { getResourceTracker().give(); releaseNetId(mIkey); releaseNetId(mOkey); },83356a789c728287f92f01f625ea807ead7051e1,2018-01-24 07:25:02,28
593048,services_core_java_com_android_server_IpSecService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public synchronized void destroyTunnelInterface(int resourceId) throws android.os.RemoteException { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); releaseResource(userRecord.mTunnelInterfaceRecords, resourceId); }",439d80ff3395bcbcae5c3bb35361af210e494df1,"@java.lang.Override public synchronized void deleteTunnelInterface(int resourceId) throws android.os.RemoteException { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); releaseResource(userRecord.mTunnelInterfaceRecords, resourceId); }",ce0621f9b6f2e167141abd7c6451ac4400ff8310,2018-01-24 07:25:02,28
593048,services_core_java_com_android_server_IpSecService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public int getIKey() { return mKeys[android.net.IpSecManager.DIRECTION_IN]; },67234f77fe67c9428318080b3d6f966006986b4a,public int getIkey() { return mIkey; },46ccc239d6a3f7b7ba93e390454a06b1f6766cc2,2018-01-24 07:25:02,28
593048,services_core_java_com_android_server_IpSecService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,synchronized void release(int i) { if ((i < 0) || (i >= ((mRangeStart) + (numBits)))) { throw new java.lang.IllegalArgumentException(); } mBitSet.clear((i - (mRangeStart))); },568de73a0af2d454ad4c76fadeb7f219a3bd9ded,@com.android.internal.annotations.VisibleForTesting void releaseNetId(int netId) { synchronized(mTunnelNetIds) { mTunnelNetIds.delete(netId); } },31a938aea9bd0096ddc49f16f5eb510fafc6c243,2018-01-24 07:25:02,28
593048,services_core_java_com_android_server_IpSecService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public int getOKey() { return mKeys[android.net.IpSecManager.DIRECTION_OUT]; },2bd435c4e10dddfbe281d5c439257e62a43479f7,public int getOkey() { return mOkey; },72d3939fbc494745d6f7c48e80285b8f5bef5fa8,2018-01-24 07:25:02,28
593048,services_core_java_com_android_server_IpSecService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public synchronized void applyTunnelModeTransform(int direction, int transformResourceId, int tunnelResourceId) throws android.os.RemoteException { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.TransformRecord transformInfo = userRecord.mTransformRecords.getResourceOrThrow(transformResourceId); com.android.server.IpSecService.TunnelInterfaceRecord tunIntfInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); android.net.IpSecConfig c = transformInfo.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (IpSecmanager.MODE_TUNNEL)), ""Transform mode was not Tunnel mode; cannot be applied to a tunnel interface""); try { mSrvConfig.getNetdInstance().ipSecApplyTunnelModeTransform(direction, c.getSourceAddress(), c.getDestinationAddress(), transformInfo.getSpiRecord().getSpi(), tunIntfInfo.getIKey(), tunIntfInfo.getOKey(), tunIntfInfo.getUnderlyingNetwork()); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (EINVAL)) { throw new java.lang.IllegalArgumentException(e.toString()); } else { throw e; } } }",b0e12b016d047263a03da4f3b87b6bce51bd0bee,"@java.lang.Override public synchronized void applyTunnelModeTransform(int tunnelResourceId, int direction, int transformResourceId) throws android.os.RemoteException { com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TransformRecord transformInfo = userRecord.mTransformRecords.getResourceOrThrow(transformResourceId); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); android.net.IpSecConfig c = transformInfo.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (android.net.IpSecTransform.MODE_TUNNEL)), ""Transform mode was not Tunnel mode; cannot be applied to a tunnel interface""); int mark = (direction == (android.net.IpSecManager.DIRECTION_IN)) ? tunnelInterfaceInfo.getIkey() : tunnelInterfaceInfo.getOkey(); }",cbb4a86881e3a14351d9a0d3aa56ab32804461d5,2018-01-24 07:25:02,28
593048,services_core_java_com_android_server_IpSecService.java,"@java.lang.Override public synchronized void applyTransportModeTransform(android.os.ParcelFileDescriptor socket, int direction, int resourceId) throws android.os.RemoteException { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.TransformRecord info = userRecord.mTransformRecords.getResourceOrThrow(resourceId); if (((info.pid) != (getCallingPid())) || ((info.uid) != (getCallingUid()))) { throw new java.lang.SecurityException(""Only the owner of an IpSec Transform may apply it!""); } android.net.IpSecConfig c = info.getConfig(); try { mSrvConfig.getNetdInstance().ipSecApplyTransportModeTransform(socket.getFileDescriptor(), resourceId, direction, c.getSourceAddress(), c.getDestinationAddress(), info.getSpiRecord().getSpi()); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (EINVAL)) { throw new java.lang.IllegalArgumentException(e.toString()); } else { throw e; } } }",ec7b477567ea26aa833b2ede22a3902f9873d66c,"@java.lang.Override public synchronized void applyTransportModeTransform(android.os.ParcelFileDescriptor socket, int direction, int resourceId) throws android.os.RemoteException { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.TransformRecord info = userRecord.mTransformRecords.getResourceOrThrow(resourceId); if (((info.pid) != (getCallingPid())) || ((info.uid) != (getCallingUid()))) { throw new java.lang.SecurityException(""Only the owner of an IpSec Transform may apply it!""); } android.net.IpSecConfig c = info.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (IpSecmanager.MODE_TRANSPORT)), ""Transform mode was not Transport mode; cannot be applied to a socket""); try { mSrvConfig.getNetdInstance().ipSecApplyTransportModeTransform(socket.getFileDescriptor(), resourceId, direction, c.getSourceAddress(), c.getDestinationAddress(), info.getSpiRecord().getSpi()); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (EINVAL)) { throw new java.lang.IllegalArgumentException(e.toString()); } else { throw e; } } }",f8859892c1d23dcd68f9d8573c47aeaf89846877,"@java.lang.Override public synchronized void applyTransportModeTransform(android.os.ParcelFileDescriptor socket, int direction, int resourceId) throws android.os.RemoteException { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.TransformRecord info = userRecord.mTransformRecords.getResourceOrThrow(resourceId); if (((info.pid) != (getCallingPid())) || ((info.uid) != (getCallingUid()))) { throw new java.lang.SecurityException(""Only the owner of an IpSec Transform may apply it!""); } android.net.IpSecConfig c = info.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (android.net.IpSecTransform.MODE_TRANSPORT)), ""Transform mode was not Transport mode; cannot be applied to a socket""); try { mSrvConfig.getNetdInstance().ipSecApplyTransportModeTransform(socket.getFileDescriptor(), resourceId, direction, c.getSourceAddress(), c.getDestinationAddress(), info.getSpiRecord().getSpi()); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (EINVAL)) { throw new java.lang.IllegalArgumentException(e.toString()); } else { throw e; } } }",84c09cf8ed4733b835b153c4fe01a42902555722,2018-01-24 07:25:02,28
593048,services_core_java_com_android_server_IpSecService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"synchronized int reserve() { int current = mNextIndex; for (int i = 0; i < (mSize); i++ , current = (++current) % (mSize)) { if (!(mBitSet.get(current))) { mBitSet.set(current); mNextIndex = (current + 1) % (mSize); return (mRangeStart) + current; } } throw new java.lang.IllegalStateException(""Out of VTI interfaces""); }",64adf25f99d8653b5be085d391a14e87a1abe025,"@com.android.internal.annotations.VisibleForTesting int reserveNetId() { synchronized(mTunnelNetIds) { for (int i = 0; i < (com.android.server.IpSecService.TUN_INTF_NETID_RANGE); i++) { int index = mNextTunnelNetIdIndex; int netId = index + (com.android.server.IpSecService.TUN_INTF_NETID_START); if ((++(mNextTunnelNetIdIndex)) >= (com.android.server.IpSecService.TUN_INTF_NETID_RANGE)) mNextTunnelNetIdIndex = 0; if (!(mTunnelNetIds.get(netId))) { mTunnelNetIds.put(netId, true); return netId; } } } throw new java.lang.IllegalStateException(""No free netIds to allocate""); }",c811fb2d53e8cccd8e2c5503b571d32fdad0a0d4,2018-01-24 07:25:02,28
593048,services_core_java_com_android_server_IpSecService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.util.List<java.lang.String> getLocalAddresses() { return mLocalAddresses; },c7fbf372fd3bd68369113da87c9cc4b969e981cf,public java.lang.String getLocalAddress() { return mLocalAddress; },8152e18bc5f316097f99fc6c200b6a1c4aa6f86b,2018-01-24 07:25:02,28
593048,core_java_android_net_IpSecTunnelInterfaceResponse.java,,,"@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(status); out.writeInt(resourceId); }",c56d64635ba9d36174aab8118773b036fa1cd8a5,"@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(status); out.writeInt(resourceId); out.writeString(interfaceName); }",4edfa257e3c23477af62fda779683c33e29bb3d8,2018-01-24 07:25:02,28
593048,services_core_java_com_android_server_IpSecService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.android.server.Network getUnderlyingNetwork() { return mUnderlyingNetwork; },25e323164c5e92318b63928933c97f518d6e7f19,public android.net.Network getUnderlyingNetwork() { return mUnderlyingNetwork; },f33c3b8f9d9d1ba4f6a8282194f8e9287aeaeae3,2018-01-24 07:25:02,28
593048,services_core_java_com_android_server_IpSecService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.lang.String toString() { return new java.lang.StringBuilder().append(""{super="").append(super.toString()).append("", mInterfaceName="").append(mInterfaceName).append("", mUnderlyingNetwork="").append(mUnderlyingNetwork).append("", mLocalAddresses="").append(mLocalAddresses).append("", mRemoteAddress="").append(mRemoteAddress).append(""}"").toString(); }",f040da00dd97bf9e44435e74979262a36c89e108,"@java.lang.Override public java.lang.String toString() { return new java.lang.StringBuilder().append(""{super="").append(super.toString()).append("", mInterfaceName="").append(mInterfaceName).append("", mUnderlyingNetwork="").append(mUnderlyingNetwork).append("", mLocalAddress="").append(mLocalAddress).append("", mRemoteAddress="").append(mRemoteAddress).append("", mIkey="").append(mIkey).append("", mOkey="").append(mOkey).append(""}"").toString(); }",6c28de210d84c8ead16c48aa540b6871abf08030,2018-01-24 07:25:02,28
579366,src_java_com_android_internal_telephony_RadioIndication.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void currentRadioConfig(int indicationType, android.hardware.radio.V1_2.RadioConfig radioConfig) { }",e7bb91cee47f432c74ff9a5e77cab1a0db03d819,"public void currentPhysicalChannelConfigs(int indicationType, java.util.ArrayList<android.hardware.radio.V1_2.PhysicalChannelConfig> configs) { }",198071503f61867957e4af07529385318e3d9952,2018-01-24 17:57:23,7
548206,src_com_android_bluetooth_hfp_HeadsetService.java,"synchronized void onDeviceStateChanged(com.android.bluetooth.hfp.HeadsetDeviceState deviceState) { mStateMachine.sendMessage(HeadsetStateMachine.DEVICE_STATE_CHANGED, deviceState); }",310eab7dff119c9a4df48292c0eb2ec95f3a4ac5,"synchronized void onDeviceStateChanged(com.android.bluetooth.hfp.HeadsetDeviceState deviceState) { broadCastMessageToStateMachines(HeadsetStateMachine.DEVICE_STATE_CHANGED, deviceState); }",fa29d11bfb6368e0d1143758a5520b61ca8ba96b,"void onDeviceStateChanged(com.android.bluetooth.hfp.HeadsetDeviceState deviceState) { doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.DEVICE_STATE_CHANGED, deviceState)); }",12170f91807eabc419394e79c5ffe2db0d629d29,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,"boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); int connectionState = mStateMachine.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mStateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_STOP, device); return true; }",53979cea5aa6e5ba95844ea9a5e78377cd53413c,"boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } stateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_STOP, device); } return true; }",ca1f58a6b107a4de8206d8b389b018b2c578c5fc,"boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mVoiceRecognitionStarted = false; stateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_STOP, device); } return true; }",0c9b8634bad188ca3551da1ada771389b4544617,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,"private boolean bindResponse(int indId, boolean indStatus) { for (android.bluetooth.BluetoothDevice device : getConnectedDevices()) { int connectionState = mStateMachine.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { continue; } if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(""Bind Response sent for"", device.getAddress()); } android.os.Message msg = mStateMachine.obtainMessage(HeadsetStateMachine.BIND_RESPONSE); msg.obj = device; msg.arg1 = indId; msg.arg2 = (indStatus) ? 1 : 0; mStateMachine.sendMessage(msg); return true; } return false; }",0cae295f53def35f14b4d0ac3cf20108815a4fa4,"private boolean bindResponse(int indId, boolean indStatus) { synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { int connectionState = stateMachine.getConnectionState(); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { continue; } if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, (""bindResponse for"" + (stateMachine.getDevice()))); } stateMachine.sendMessage(HeadsetStateMachine.BIND_RESPONSE, indId, (indStatus ? 1 : 0)); return true; } } return false; }",abd8fa08691a326e04e51897fe50527dc3a4a420,"@com.android.internal.annotations.VisibleForTesting public void onAudioStateChangedFromStateMachine(android.bluetooth.BluetoothDevice device, int fromState, int toState) { synchronized(mStateMachines) { if ((fromState != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) && (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED))) { } if ((fromState != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) && (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED))) { if (((mActiveDevice) != null) && (!(mActiveDevice.equals(device)))) { if (!(connectAudio(mActiveDevice))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (((((""onAudioStateChangedFromStateMachine, failed to connect to new "" + ""active device "") + (mActiveDevice)) + "", after "") + device) + "" is disconnected"")); setActiveDevice(null); } } } } }",e1a0c95f00542bef0bc0c6462c7ef78689947104,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"boolean disconnectAudio(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((""disconnectAudio: device "" + device) + "" was never connected/connecting"")); return false; } if ((stateMachine.getAudioState()) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (""disconnectAudio, audio is not connected for "" + device)); return false; } stateMachine.sendMessage(HeadsetStateMachine.DISCONNECT_AUDIO, device); } return true; }",5044307d258a2ee74eaa0c568056f15b6cc34c0e,"boolean disconnectAudio(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH_ADMIN permission""); synchronized(mStateMachines) { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, (""disconnectAudio, device="" + device)); final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((""disconnectAudio: device "" + device) + "" was never connected/connecting"")); return false; } if ((stateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (""disconnectAudio, audio is already disconnected for "" + device)); return false; } stateMachine.sendMessage(HeadsetStateMachine.DISCONNECT_AUDIO, device); } return true; }",b999cca71476d739cc2f6409ec808d5b56940742,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,android.bluetooth.BluetoothDevice getCurrentAudioDevice() { synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { if ((stateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { return stateMachine.getDevice(); } } return null; } },a4cff85326293d5aa5fdb564e14986d3496bf4a6,private java.util.List<android.bluetooth.BluetoothDevice> getNonIdleAudioDevices() { java.util.ArrayList<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<>(); synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { if ((stateMachine.getAudioState()) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { devices.add(stateMachine.getDevice()); } } } return devices; },a78e1ef4131309ac86a5c6bdf6f6aecfe4ee81a1,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,"boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, (""disconnect: device="" + device)); int connectionState = mStateMachine.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (((""disconnect: not connected/connecting, connectionState="" + connectionState) + "", device="") + device)); return false; } mStateMachine.sendMessage(HeadsetStateMachine.DISCONNECT, device); return true; }",697d41ff388019606389b21ad16ad0d82f9f577b,"boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, (""disconnect: device="" + device)); synchronized(mStateMachines) { com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((""disconnect: device "" + device) + "" not ever connected/connecting"")); return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (((""disconnect: device "" + device) + "" not connected/connecting, connectionState="") + connectionState)); return false; } stateMachine.sendMessage(HeadsetStateMachine.DISCONNECT, device); } return true; }",7980b823a6175d986f6889c9453eb4e4785a71a8,"boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); synchronized(mStateMachines) { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, (""disconnect: device="" + device)); com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((""disconnect: device "" + device) + "" not ever connected/connecting"")); return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (((""disconnect: device "" + device) + "" not connected/connecting, connectionState="") + connectionState)); return false; } stateMachine.sendMessage(HeadsetStateMachine.DISCONNECT, device); } return true; }",7a27aefd42519be08893dbf4a67856d4dbd2f9ec,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,"@java.lang.Override protected synchronized boolean start() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ""start()""); mStateMachinesThread = new android.os.HandlerThread(""HeadsetService.StateMachines""); mStateMachinesThread.start(); mSystemInterface = new com.android.bluetooth.hfp.HeadsetSystemInterface(this); mSystemInterface.init(); mNativeInterface = com.android.bluetooth.hfp.HeadsetNativeInterface.getInstance(); mNativeInterface.init(com.android.bluetooth.hfp.HeadsetService.MAX_HEADSET_CONNECTIONS, android.bluetooth.BluetoothHeadset.isInbandRingingSupported(this)); mStateMachine = com.android.bluetooth.hfp.HeadsetStateMachine.make(mStateMachinesThread.getLooper(), this, mNativeInterface, mSystemInterface); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(Intent.ACTION_BATTERY_CHANGED); filter.addAction(AudioManager.VOLUME_CHANGED_ACTION); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); registerReceiver(mHeadsetReceiver, filter); com.android.bluetooth.hfp.HeadsetService.setHeadsetService(this); mStarted = true; return true; }",13f038fcfe596fdb3f84fdd31ca177b999c1af4c,"@java.lang.Override protected synchronized boolean start() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ""start()""); mStateMachinesThread = new android.os.HandlerThread(""HeadsetService.StateMachines""); mStateMachinesThread.start(); mSystemInterface = new com.android.bluetooth.hfp.HeadsetSystemInterface(this); mSystemInterface.init(); mNativeInterface = com.android.bluetooth.hfp.HeadsetNativeInterface.getInstance(); mNativeInterface.init(com.android.bluetooth.hfp.HeadsetService.MAX_HEADSET_CONNECTIONS, android.bluetooth.BluetoothHeadset.isInbandRingingSupported(this)); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(Intent.ACTION_BATTERY_CHANGED); filter.addAction(AudioManager.VOLUME_CHANGED_ACTION); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); registerReceiver(mHeadsetReceiver, filter); com.android.bluetooth.hfp.HeadsetService.setHeadsetService(this); mStarted = true; return true; }",d0f513ea9a9b3b1a786cf325fad43918e3861e13,"@java.lang.Override protected boolean start() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ""start()""); if (mStarted) { throw new java.lang.IllegalStateException(""start() called twice""); } mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapterService(), ""AdapterService cannot be null when HeadsetService starts""); mStateMachinesThread = new android.os.HandlerThread(""HeadsetService.StateMachines""); mStateMachinesThread.start(); mSystemInterface = com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().makeSystemInterface(this); mSystemInterface.init(); mMaxHeadsetConnections = mAdapterService.getMaxConnectedAudioDevices(); mNativeInterface = com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().getNativeInterface(); mNativeInterface.init(((mMaxHeadsetConnections) + 1), isInbandRingingEnabled()); if ((mStateMachines.size()) > 0) { throw new java.lang.IllegalStateException(((""start(): mStateMachines is not empty, "" + (mStateMachines.size())) + "" is already created. Was stop() called properly?"")); } android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(Intent.ACTION_BATTERY_CHANGED); filter.addAction(AudioManager.VOLUME_CHANGED_ACTION); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); registerReceiver(mHeadsetReceiver, filter); com.android.bluetooth.hfp.HeadsetService.setHeadsetService(this); mStarted = true; return true; }",4d6d3645596e1f3bd24a8624ce24ae3d7496d798,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,"boolean disableWBS() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if ((mStateMachine.getConnectionState(mStateMachine.getCurrentDevice())) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""enableWBS: device is not connected""); return false; } if ((mStateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""enableWBS: audio is already connected""); return false; } for (android.bluetooth.BluetoothDevice device : getConnectedDevices()) { mStateMachine.sendMessage(HeadsetStateMachine.DISABLE_WBS, device); } return true; }",e8abb81397dcf397229730d6e1a1cdcb1cfb3993,"boolean disableWBS() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { if ((stateMachine.getConnectionState()) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, (""disableWBS: device is not connected "" + (stateMachine.getDevice()))); } continue; } if ((stateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, (""disableWBS: audio is already connected "" + (stateMachine.getDevice()))); } continue; } stateMachine.sendMessage(HeadsetStateMachine.DISABLE_WBS, stateMachine.getDevice()); } } return true; }",cf3041faa92745f5863be530c8edb0734345f4d8,"@com.android.internal.annotations.VisibleForTesting public void onConnectionStateChangedFromStateMachine(android.bluetooth.BluetoothDevice device, int fromState, int toState) { synchronized(mStateMachines) { java.util.List<android.bluetooth.BluetoothDevice> audioConnectableDevices = getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.CONNECTING_CONNECTED_STATES); if ((fromState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((audioConnectableDevices.size()) > 1) { mInbandRingingRuntimeDisable = true; doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.SEND_BSIR, 0)); } if ((mActiveDevice) == null) { setActiveDevice(device); } } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (toState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((audioConnectableDevices.size()) <= 1) { mInbandRingingRuntimeDisable = false; doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.SEND_BSIR, 1)); } if (device.equals(mActiveDevice)) { setActiveDevice(null); } } } }",a4b3ee60ad710f2774b41babbd5bf04fe4a34a40,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,"private java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); return mStateMachine.getDevicesMatchingConnectionStates(states); }",28939e1f5ef95a270d7a56672d5b5428a2ef4afb,"private java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); java.util.ArrayList<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<>(); if (states == null) { return devices; } synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { int currentState = stateMachine.getConnectionState(); for (int state : states) { if (currentState == state) { devices.add(stateMachine.getDevice()); break; } } } } return devices; }",0e09eb58a7d7c1180a969ca67c68ef34160ded41,"private java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); java.util.ArrayList<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<>(); if (states == null) { return devices; } final android.bluetooth.BluetoothDevice[] bondedDevices = mAdapterService.getBondedDevices(); if (bondedDevices == null) { return devices; } synchronized(mStateMachines) { for (android.bluetooth.BluetoothDevice device : bondedDevices) { final android.os.ParcelUuid[] featureUuids = mAdapterService.getRemoteUuids(device); if (!(android.bluetooth.BluetoothUuid.containsAnyUuid(featureUuids, com.android.bluetooth.hfp.HeadsetService.HEADSET_UUIDS))) { continue; } int connectionState = getConnectionState(device); for (int state : states) { if (connectionState == state) { devices.add(device); break; } } } } return devices; }",d5cf7127ad82752dee10ab37808baf76ad4a1563,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,"boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice device) { int connectionState = mStateMachine.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mStateMachine.sendMessage(HeadsetStateMachine.VIRTUAL_CALL_STOP, device); return true; }",3e98ce773a6ffbfd7b7a95d2045683b949758f4b,"boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice device) { synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((""stopScoUsingVirtualVoiceCall: device "" + device) + "" was never connected/connecting"")); return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((""stopScoUsingVirtualVoiceCall: device "" + device) + "" is neither connected/connecting"")); return false; } stateMachine.sendMessage(HeadsetStateMachine.VIRTUAL_CALL_STOP, device); } return true; }",3b621ab5b76add082e2a872855b1affe756fda3f,"boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((""stopScoUsingVirtualVoiceCall: device "" + device) + "" was never connected/connecting"")); return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((""stopScoUsingVirtualVoiceCall: device "" + device) + "" is neither connected/connecting"")); return false; } stateMachine.sendMessage(HeadsetStateMachine.VIRTUAL_CALL_STOP, device); } return true; }",f04a01076d9b81175bffafc33158f22fd608351e,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,"boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice device) { mStateMachine.sendMessage(HeadsetStateMachine.VIRTUAL_CALL_START, device); return true; }",7cf2f1b71172135d1edcbc301d98653dac69811c,"boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice device) { synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((""startScoUsingVirtualVoiceCall: device "" + device) + "" was never connected/connecting"")); return false; } stateMachine.sendMessage(HeadsetStateMachine.VIRTUAL_CALL_START, device); } return true; }",5b5bb725f51343e220cab6403e89c129802e1ad6,"boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((""startScoUsingVirtualVoiceCall: device "" + device) + "" was never connected/connecting"")); return false; } stateMachine.sendMessage(HeadsetStateMachine.VIRTUAL_CALL_START, device); } return true; }",c534c8c44a85c633a208df4f45a429b20d15e413,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@android.annotation.Nullable private android.bluetooth.BluetoothDevice getLastConnectedDevice() { android.bluetooth.BluetoothDevice lastConnectedDeivce = null; long lastConnectionTimestampMillis = java.lang.Long.MIN_VALUE; synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { if ((stateMachine.getConnectionState()) == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { long timestampMillis = stateMachine.getConnectionTimestampMillis(); if (timestampMillis > lastConnectionTimestampMillis) { lastConnectedDeivce = stateMachine.getDevice(); lastConnectionTimestampMillis = timestampMillis; } } } } return lastConnectedDeivce; },10267b8a3f1d221a59e401f3fa3fda3ad8f28aaf,"public android.bluetooth.BluetoothDevice getActiveDevice() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH_PERM permission""); synchronized(mStateMachines) { return mActiveDevice; } }",f9b8b9b73751cb3c8f3a0d78c96801a8abb2a4f3,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,int getAudioState(android.bluetooth.BluetoothDevice device) { return mStateMachine.getAudioState(); },dac788296ef51b8e50c658e3ee9dee871ac1308c,int getAudioState(android.bluetooth.BluetoothDevice device) { synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { return android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED; } return stateMachine.getAudioState(); } },378aea67f674de00408ade8d72024c757c69c729,"int getAudioState(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { return android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED; } return stateMachine.getAudioState(); } }",d6125e9b4c5767d136c76beef48b883d07cf9770,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,"synchronized void messageFromNative(com.android.bluetooth.hfp.HeadsetStackEvent stackEvent) { mStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, stackEvent); }",007f0061fae59ef690c49b89e7b9e89c27cfd2c8,"synchronized void messageFromNative(com.android.bluetooth.hfp.HeadsetStackEvent stackEvent) { if ((stackEvent.device) == null) { android.util.Log.wtfStack(com.android.bluetooth.hfp.HeadsetService.TAG, (""messageFromNative, device is null, event: "" + stackEvent)); return; } synchronized(mStateMachines) { com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(stackEvent.device); if (stateMachine == null) { if ((stackEvent.device) == null) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, ""messageFromNative, device is null""); return; } if ((stackEvent.type) == (HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED)) { stateMachine = com.android.bluetooth.hfp.HeadsetStateMachine.make(mStateMachinesThread.getLooper(), this, mNativeInterface, mSystemInterface); mStateMachines.put(stackEvent.device, stateMachine); } else { android.util.Log.wtfStack(com.android.bluetooth.hfp.HeadsetService.TAG, (""State machine not found for stack event: "" + stackEvent)); return; } } stateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, stackEvent); } }",e7ad92e0f4c5e0972774155c95b0c36eb1c9e0b5,"void messageFromNative(com.android.bluetooth.hfp.HeadsetStackEvent stackEvent) { if ((stackEvent.device) == null) { android.util.Log.wtfStack(com.android.bluetooth.hfp.HeadsetService.TAG, (""messageFromNative, device is null, event: "" + stackEvent)); return; } synchronized(mStateMachines) { com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(stackEvent.device); if ((stackEvent.type) == (HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED)) { switch (stackEvent.valueInt) { case HeadsetHalConstants.CONNECTION_STATE_CONNECTED : case HeadsetHalConstants.CONNECTION_STATE_CONNECTING : { if (stateMachine == null) { stateMachine = com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().makeStateMachine(stackEvent.device, mStateMachinesThread.getLooper(), this, mNativeInterface, mSystemInterface); mStateMachines.put(stackEvent.device, stateMachine); } break; } } } else if (stateMachine == null) { android.util.Log.wtfStack(com.android.bluetooth.hfp.HeadsetService.TAG, (""State machine not found for stack event: "" + stackEvent)); return; } stateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, stackEvent); } }",148f15219b2774546c5d867fc8344ed653fe108a,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetStateMachine.java,"synchronized int getConnectionState(android.bluetooth.BluetoothDevice device) { if ((mCurrentDevice) == null) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } if (!(mCurrentDevice.equals(device))) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } com.android.internal.util.IState currentState = getCurrentState(); if (currentState == (mConnecting)) { return android.bluetooth.BluetoothProfile.STATE_CONNECTING; } else if (currentState instanceof com.android.bluetooth.hfp.HeadsetStateMachine.ConnectedBase) { return android.bluetooth.BluetoothProfile.STATE_CONNECTED; } else if (currentState == (mDisconnecting)) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTING; } android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, (""getConnectionState: bad currentState: "" + currentState)); return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; }",92b0e89715f72e1f79463b1248964fe971f253ba,synchronized int getConnectionState() { com.android.internal.util.IState currentState = getCurrentState(); if (currentState == (mConnecting)) { return android.bluetooth.BluetoothProfile.STATE_CONNECTING; } else if (currentState instanceof com.android.bluetooth.hfp.HeadsetStateMachine.ConnectedBase) { return android.bluetooth.BluetoothProfile.STATE_CONNECTED; } else if (currentState == (mDisconnecting)) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTING; } return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; },6d7888a97c882c7cac7d9d486a198f94188fd645,@android.support.annotation.VisibleForTesting public synchronized int getConnectionState() { com.android.bluetooth.hfp.HeadsetStateMachine.HeadsetStateBase state = ((com.android.bluetooth.hfp.HeadsetStateMachine.HeadsetStateBase) (getCurrentState())); if (state == null) { return android.bluetooth.BluetoothHeadset.STATE_DISCONNECTED; } return state.getConnectionStateInt(); },549e1dc17351d8f040af27afb94135e9b87d30ab,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetStateMachine.java,synchronized android.bluetooth.BluetoothDevice getCurrentDevice() { return mCurrentDevice; },e6b170120ad11d3bcde5c31453d9d7e7f18f039d,synchronized android.bluetooth.BluetoothDevice getDevice() { return mCurrentDevice; },256c91682c4dee98624ba6b57a8044bfe7238cad,@android.support.annotation.VisibleForTesting public synchronized android.bluetooth.BluetoothDevice getDevice() { return mDevice; },7750e9e1f2e698b6a90a07e98b4a1ef27ca81c4a,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetStateMachine.java,"java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { java.util.List<android.bluetooth.BluetoothDevice> deviceList = new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); java.util.Set<android.bluetooth.BluetoothDevice> bondedDevices = mAdapter.getBondedDevices(); if (bondedDevices == null) { return deviceList; } synchronized(this) { for (android.bluetooth.BluetoothDevice device : bondedDevices) { android.os.ParcelUuid[] featureUuids = device.getUuids(); if (!(android.bluetooth.BluetoothUuid.containsAnyUuid(featureUuids, com.android.bluetooth.hfp.HeadsetStateMachine.HEADSET_UUIDS))) { continue; } int connectionState = getConnectionState(device); for (int state : states) { if (connectionState == state) { deviceList.add(device); } } } } return deviceList; }",54b29d54ab3a99e536714bc83ae832eebb4798dd,long getConnectionTimestampMillis() { return mConnectionTimestampMillis; },65551c9383e8f0f11e2c5f299fab78b0792e8d5f,public long getConnectingTimestampMs() { return mConnectingTimestampMs; },eaeb756ed99112039fd304dc4f1f60445e16967f,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetStateMachine.java,private boolean isScoAcceptable() { if (mForceScoAudio) { return true; } return (mAudioRouteAllowed) && (((mVoiceRecognitionStarted) || (isInCall())) || ((android.bluetooth.BluetoothHeadset.isInbandRingingSupported(mService)) && (isRinging()))); },2ecb5fa2bef747ae34347351eb783c28ad04a2ef,private boolean isScoAcceptable() { if (mService.getForceScoAudio()) { return true; } return (mAudioRouteAllowed) && (((mVoiceRecognitionStarted) || (isInCall())) || ((android.bluetooth.BluetoothHeadset.isInbandRingingSupported(mService)) && (isRinging()))); },09aee0f4757c7a672b07b1587a3de31018e78371,"private boolean isScoAcceptable() { if (mService.getForceScoAudio()) { return true; } android.bluetooth.BluetoothDevice activeDevice = mService.getActiveDevice(); if (!(mDevice.equals(activeDevice))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, (((""isScoAcceptable: rejected SCO since "" + (mDevice)) + "" is not the current active device "") + activeDevice)); return false; } if (!(mService.getAudioRouteAllowed())) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ""isScoAcceptabl: rejected SCO since audio route is not allowed""); return false; } if ((mSystemInterface.isInCall()) || (mVoiceRecognitionStarted)) { return true; } if ((mSystemInterface.isRinging()) && (mService.isInbandRingingEnabled())) { return true; } android.util.Log.w(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, (((((((""isScoAcceptable: rejected SCO, inCall="" + (mSystemInterface.isInCall())) + "", voiceRecognition="") + (mVoiceRecognitionStarted)) + "", ringing="") + (mSystemInterface.isRinging())) + "", inbandRinging="") + (mService.isInbandRingingEnabled()))); return false; }",59354587419180d596c97911d9dc1e7c1ccca157,2018-01-24 18:03:19,34
548206,tests_unit_src_com_android_bluetooth_hfp_HeadsetStateMachineTest.java,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); when(mSystemInterface.getHeadsetPhoneState()).thenReturn(mPhoneState); when(mSystemInterface.getAudioManager()).thenReturn(mAudioManager); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); mNativeInterface = spy(com.android.bluetooth.hfp.HeadsetNativeInterface.getInstance()); doNothing().when(mNativeInterface).init(anyInt(), anyBoolean()); doReturn(true).when(mNativeInterface).connectHfp(mTestDevice); doReturn(true).when(mNativeInterface).disconnectHfp(mTestDevice); doReturn(true).when(mNativeInterface).connectAudio(mTestDevice); doReturn(true).when(mNativeInterface).disconnectAudio(mTestDevice); when(mHeadsetService.bindService(any(android.content.Intent.class), any(android.content.ServiceConnection.class), anyInt())).thenReturn(true); when(mHeadsetService.getResources()).thenReturn(android.support.test.InstrumentationRegistry.getTargetContext().getResources()); when(mHeadsetService.getPackageManager()).thenReturn(android.support.test.InstrumentationRegistry.getContext().getPackageManager()); when(mHeadsetService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_ON); mHandlerThread = new android.os.HandlerThread(""HeadsetStateMachineTestHandlerThread""); mHandlerThread.start(); HeadsetStateMachine.sConnectTimeoutMillis = com.android.bluetooth.hfp.HeadsetStateMachineTest.CONNECT_TIMEOUT_TEST_MILLIS; mHeadsetStateMachine = com.android.bluetooth.hfp.HeadsetStateMachine.make(mHandlerThread.getLooper(), mHeadsetService, mNativeInterface, mSystemInterface); mHeadsetStateMachine.setForceScoAudio(true); }",87cd84472bdbbb8b9355165bfe85507d4c6619e8,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); when(mSystemInterface.getHeadsetPhoneState()).thenReturn(mPhoneState); when(mSystemInterface.getAudioManager()).thenReturn(mAudioManager); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); mNativeInterface = spy(com.android.bluetooth.hfp.HeadsetNativeInterface.getInstance()); doNothing().when(mNativeInterface).init(anyInt(), anyBoolean()); doReturn(true).when(mNativeInterface).connectHfp(mTestDevice); doReturn(true).when(mNativeInterface).disconnectHfp(mTestDevice); doReturn(true).when(mNativeInterface).connectAudio(mTestDevice); doReturn(true).when(mNativeInterface).disconnectAudio(mTestDevice); when(mHeadsetService.bindService(any(android.content.Intent.class), any(android.content.ServiceConnection.class), anyInt())).thenReturn(true); when(mHeadsetService.getResources()).thenReturn(android.support.test.InstrumentationRegistry.getTargetContext().getResources()); when(mHeadsetService.getPackageManager()).thenReturn(android.support.test.InstrumentationRegistry.getContext().getPackageManager()); when(mHeadsetService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_ON); when(mHeadsetService.getForceScoAudio()).thenReturn(true); mHandlerThread = new android.os.HandlerThread(""HeadsetStateMachineTestHandlerThread""); mHandlerThread.start(); HeadsetStateMachine.sConnectTimeoutMillis = com.android.bluetooth.hfp.HeadsetStateMachineTest.CONNECT_TIMEOUT_TEST_MILLIS; mHeadsetStateMachine = com.android.bluetooth.hfp.HeadsetStateMachine.make(mHandlerThread.getLooper(), mHeadsetService, mNativeInterface, mSystemInterface); }",09837095258a935b144cf7861aac405f5aeb72e9,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); when(mSystemInterface.getHeadsetPhoneState()).thenReturn(mPhoneState); when(mSystemInterface.getAudioManager()).thenReturn(mAudioManager); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); mNativeInterface = spy(com.android.bluetooth.hfp.HeadsetNativeInterface.getInstance()); doNothing().when(mNativeInterface).init(anyInt(), anyBoolean()); doReturn(true).when(mNativeInterface).connectHfp(mTestDevice); doReturn(true).when(mNativeInterface).disconnectHfp(mTestDevice); doReturn(true).when(mNativeInterface).connectAudio(mTestDevice); doReturn(true).when(mNativeInterface).disconnectAudio(mTestDevice); when(mHeadsetService.bindService(any(android.content.Intent.class), any(android.content.ServiceConnection.class), anyInt())).thenReturn(true); when(mHeadsetService.getResources()).thenReturn(android.support.test.InstrumentationRegistry.getTargetContext().getResources()); when(mHeadsetService.getPackageManager()).thenReturn(android.support.test.InstrumentationRegistry.getContext().getPackageManager()); when(mHeadsetService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_ON); when(mHeadsetService.getForceScoAudio()).thenReturn(true); when(mHeadsetService.okToAcceptConnection(any(android.bluetooth.BluetoothDevice.class))).thenReturn(true); mHandlerThread = new android.os.HandlerThread(""HeadsetStateMachineTestHandlerThread""); mHandlerThread.start(); HeadsetStateMachine.sConnectTimeoutMs = com.android.bluetooth.hfp.HeadsetStateMachineTest.CONNECT_TIMEOUT_TEST_MILLIS; mHeadsetStateMachine = com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().makeStateMachine(mTestDevice, mHandlerThread.getLooper(), mHeadsetService, mNativeInterface, mSystemInterface); }",951e0e78b832f2ac1e79fea40587e3feefee43c9,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"boolean connectAudio(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""connectAudio: device is null""); return false; } synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((""connectAudio: device "" + device) + "" was never connected/connecting"")); return false; } if ((stateMachine.getConnectionState()) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""connectAudio: profile not connected""); return false; } if ((stateMachine.getAudioState()) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (""connectAudio: audio is not idle, current state "" + (stateMachine.getAudioState()))); return false; } stateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, device); } return true; }",3204470ffea4df6c9442c827497aa562804f8587,"boolean connectAudio(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH_ADMIN permission""); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""connectAudio: device is null""); return false; } if (!(device.equals(mActiveDevice))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (""connectAudio: device is not active, active device is "" + (mActiveDevice))); return false; } synchronized(mStateMachines) { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, (""connectAudio, device="" + device)); final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((""connectAudio: device "" + device) + "" was never connected/connecting"")); return false; } if ((stateMachine.getConnectionState()) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""connectAudio: profile not connected""); return false; } if ((stateMachine.getAudioState()) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { com.android.bluetooth.hfp.HeadsetService.logD((""connectAudio: audio is not idle for device "" + device)); return true; } if (isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (""connectAudio: audio is not idle, current audio devices are "" + (java.util.Arrays.toString(getNonIdleAudioDevices().toArray())))); return false; } stateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, device); } return true; }",1fc5145cdf386965fefff613afd26fe3af47e758,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,"@java.lang.Override protected synchronized boolean stop() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ""stop()""); if (!(mStarted)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""stop() called before start()""); return true; } mStarted = false; unregisterReceiver(mHeadsetReceiver); com.android.bluetooth.hfp.HeadsetStateMachine.destroy(mStateMachine); mStateMachine = null; mNativeInterface.cleanup(); mSystemInterface.stop(); mStateMachinesThread.quitSafely(); mStateMachinesThread = null; com.android.bluetooth.hfp.HeadsetService.setHeadsetService(null); return true; }",f5a214d80c958d251061f150c0e3758f4304fd64,"@java.lang.Override protected synchronized boolean stop() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ""stop()""); if (!(mStarted)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""stop() called before start()""); return true; } mStarted = false; unregisterReceiver(mHeadsetReceiver); synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { com.android.bluetooth.hfp.HeadsetStateMachine.destroy(stateMachine); } mStateMachines.clear(); } mNativeInterface.cleanup(); mSystemInterface.stop(); mStateMachinesThread.quitSafely(); mStateMachinesThread = null; com.android.bluetooth.hfp.HeadsetService.setHeadsetService(null); return true; }",82645b16ad298a9f17267db5326a017d882744e4,"@java.lang.Override protected boolean stop() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ""stop()""); if (!(mStarted)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""stop() called before start()""); return true; } mStarted = false; com.android.bluetooth.hfp.HeadsetService.setHeadsetService(null); mActiveDevice = null; mInbandRingingRuntimeDisable = false; mForceScoAudio = false; mAudioRouteAllowed = true; mMaxHeadsetConnections = 1; mVoiceRecognitionStarted = false; unregisterReceiver(mHeadsetReceiver); synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().destroyStateMachine(stateMachine); } mStateMachines.clear(); } mNativeInterface.cleanup(); mSystemInterface.stop(); mStateMachinesThread.quitSafely(); mStateMachinesThread = null; mAdapterService = null; return true; }",789290276da8e19bae404b4bfff1bf640cc2a001,2018-01-24 18:03:19,34
593734,services_core_java_com_android_server_audio_AudioService.java,"void disconnectHeadset() { synchronized(mScoClients) { if ((mBluetoothHeadsetDevice) != null) { setBtScoDeviceConnectionState(mBluetoothHeadsetDevice, BluetoothProfile.STATE_DISCONNECTED); } mBluetoothHeadset = null; } }",4588bb9d90886e2a9fb192ed4ebac3ce4b29cbbc,void disconnectHeadset() { synchronized(mScoClients) { if ((mBluetoothHeadsetDevice) != null) { setBtScoActiveDevice(mBluetoothHeadsetDevice); } mBluetoothHeadset = null; } },d31c5ce6e7bcb8ac6fa03421d9449a3d04879b9d,void disconnectHeadset() { synchronized(mScoClients) { setBtScoActiveDevice(null); mBluetoothHeadset = null; } },0784fb6638fd12cc4b8c5d97e8c9b32ed0ae5a28,2018-01-24 18:03:19,13
593734,services_core_java_com_android_server_audio_AudioService.java,"void setBtScoDeviceConnectionState(android.bluetooth.BluetoothDevice btDevice, int state) { if (btDevice == null) { return; } java.lang.String address = btDevice.getAddress(); android.bluetooth.BluetoothClass btClass = btDevice.getBluetoothClass(); int outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO; int inDevice = android.media.AudioSystem.DEVICE_IN_BLUETOOTH_SCO_HEADSET; if (btClass != null) { switch (btClass.getDeviceClass()) { case BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET : case BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE : outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_HEADSET; break; case BluetoothClass.Device.AUDIO_VIDEO_CAR_AUDIO : outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_CARKIT; break; } } if (!(android.bluetooth.BluetoothAdapter.checkBluetoothAddress(address))) { address = """"; } boolean connected = state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED); java.lang.String btDeviceName = btDevice.getName(); boolean success = (handleDeviceConnection(connected, outDevice, address, btDeviceName)) && (handleDeviceConnection(connected, inDevice, address, btDeviceName)); if (!success) { return; } if ((((state == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) || (state == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTING))) && ((mBluetoothHeadset) != null)) && ((mBluetoothHeadset.getAudioState(btDevice)) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, ""SCO connected through another device, returning""); return; } synchronized(mScoClients) { if (connected) { mBluetoothHeadsetDevice = btDevice; } else { mBluetoothHeadsetDevice = null; resetBluetoothSco(); } } }",c0fc42911559a714c8192d7bf0dd9b9f0ddd6478,"private boolean handleBtScoActiveDeviceChange(android.bluetooth.BluetoothDevice btDevice, boolean isActive) { if (btDevice == null) { return true; } java.lang.String address = btDevice.getAddress(); android.bluetooth.BluetoothClass btClass = btDevice.getBluetoothClass(); int outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO; int inDevice = android.media.AudioSystem.DEVICE_IN_BLUETOOTH_SCO_HEADSET; if (btClass != null) { switch (btClass.getDeviceClass()) { case BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET : case BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE : outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_HEADSET; break; case BluetoothClass.Device.AUDIO_VIDEO_CAR_AUDIO : outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_CARKIT; break; } } if (!(android.bluetooth.BluetoothAdapter.checkBluetoothAddress(address))) { address = """"; } java.lang.String btDeviceName = btDevice.getName(); return (handleDeviceConnection(isActive, outDevice, address, btDeviceName)) && (handleDeviceConnection(isActive, inDevice, address, btDeviceName)); }",71c88f8aa75c6e8aff698533fb5f9c7d52a1bf4e,"private boolean handleBtScoActiveDeviceChange(android.bluetooth.BluetoothDevice btDevice, boolean isActive) { if (btDevice == null) { return true; } java.lang.String address = btDevice.getAddress(); android.bluetooth.BluetoothClass btClass = btDevice.getBluetoothClass(); int outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO; int inDevice = android.media.AudioSystem.DEVICE_IN_BLUETOOTH_SCO_HEADSET; if (btClass != null) { switch (btClass.getDeviceClass()) { case BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET : case BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE : outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_HEADSET; break; case BluetoothClass.Device.AUDIO_VIDEO_CAR_AUDIO : outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_CARKIT; break; } } if (!(android.bluetooth.BluetoothAdapter.checkBluetoothAddress(address))) { address = """"; } java.lang.String btDeviceName = btDevice.getName(); boolean result = handleDeviceConnection(isActive, outDevice, address, btDeviceName); result = (handleDeviceConnection(isActive, inDevice, address, btDeviceName)) && result; return result; }",c1ae8c5ff39da4c33cd9a6cb2467ec8315bc8c8a,2018-01-24 18:03:19,13
548206,src_com_android_bluetooth_hfp_HeadsetService.java,"boolean startVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); int connectionState = mStateMachine.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mStateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_START, device); return true; }",aa0c8c3445d16ff34e89a395c8e533d60defd71e,"boolean startVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } stateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_START, device); } return true; }",518be8ee3b76c546b3b93999e971fa38755b93d1,"boolean startVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mVoiceRecognitionStarted = true; stateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_START, device); } return true; }",c31640a6572bce6d20ee91e86db7eb8c995d6ea7,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,"private void clccResponse(int index, int direction, int status, int mode, boolean mpty, java.lang.String number, int type) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.HeadsetService.MODIFY_PHONE_STATE, null); mStateMachine.sendMessage(HeadsetStateMachine.SEND_CCLC_RESPONSE, new com.android.bluetooth.hfp.HeadsetClccResponse(index, direction, status, mode, mpty, number, type)); }",69c6563eed7d5023cf76994bd65162e027b5acca,"private void clccResponse(int index, int direction, int status, int mode, boolean mpty, java.lang.String number, int type) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.HeadsetService.MODIFY_PHONE_STATE, null); broadCastMessageToStateMachines(HeadsetStateMachine.SEND_CCLC_RESPONSE, new com.android.bluetooth.hfp.HeadsetClccResponse(index, direction, status, mode, mpty, number, type)); }",d7fec49e6b80982f2f39ceb7df9e93608ce8fa07,"private void clccResponse(int index, int direction, int status, int mode, boolean mpty, java.lang.String number, int type) { enforceCallingOrSelfPermission(android.Manifest.permission.MODIFY_PHONE_STATE, null); doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.SEND_CCLC_RESPONSE, new com.android.bluetooth.hfp.HeadsetClccResponse(index, direction, status, mode, mpty, number, type))); }",3293a61eebcc9d2dcbdc176031606fd8f4eaee4a,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,"boolean connectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if ((mStateMachine.getConnectionState(mStateMachine.getCurrentDevice())) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""connectAudio: profile not connected""); return false; } if ((mStateMachine.getAudioState()) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (""connectAudio: audio is not idle, current state "" + (mStateMachine.getAudioState()))); return false; } mStateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, mStateMachine.getCurrentDevice()); return true; }",b04ce112bd0b09e9189495b63c6c2046c5889fb9,"boolean connectAudio() { synchronized(mStateMachines) { final android.bluetooth.BluetoothDevice device = getLastConnectedDevice(); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""connectAudio: no device is connected""); return false; } return connectAudio(device); } }",e4d7adf0396d50d1bebd1c081ca74afa5e9ea5c6,"boolean connectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH_ADMIN permission""); synchronized(mStateMachines) { android.bluetooth.BluetoothDevice device = mActiveDevice; if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""connectAudio: no active device is selected""); return false; } return connectAudio(device); } }",ef284d9d76e1f60b1233a3b87d7eb7ca7424c058,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,"boolean enableWBS() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if ((mStateMachine.getConnectionState(mStateMachine.getCurrentDevice())) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""enableWBS: device is not connected""); return false; } if ((mStateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""enableWBS: audio is already connected""); return false; } for (android.bluetooth.BluetoothDevice device : getConnectedDevices()) { mStateMachine.sendMessage(HeadsetStateMachine.ENABLE_WBS, device); } return true; }",54a866b2ba8e2180d79253d6eb8fdbb07ea0095c,"boolean enableWBS() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { if ((stateMachine.getConnectionState()) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, (""enableWBS: device is not connected "" + (stateMachine.getDevice()))); } continue; } if ((stateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, (""enableWBS: audio is already connected "" + (stateMachine.getDevice()))); } continue; } stateMachine.sendMessage(HeadsetStateMachine.ENABLE_WBS, stateMachine.getDevice()); } } return true; }",7ac1b54e9704cbda1cdf364373223aff0165fa4a,"boolean isInbandRingingEnabled() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); return ((android.bluetooth.BluetoothHeadset.isInbandRingingSupported(this)) && (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.hfp.HeadsetService.DISABLE_INBAND_RINGING_PROPERTY, false)))) && (!(mInbandRingingRuntimeDisable)); }",1573a618d6c6f34fde9235f46457fa432ee08727,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,"boolean disconnectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if ((mStateMachine.getAudioState()) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""disconnectAudio, audio is not connected""); return false; } mStateMachine.sendMessage(HeadsetStateMachine.DISCONNECT_AUDIO, mStateMachine.getCurrentDevice()); return true; }",9a3db5b9b141751450207a3d49e2c17660a0419f,"boolean disconnectAudio() { synchronized(mStateMachines) { final android.bluetooth.BluetoothDevice device = getCurrentAudioDevice(); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""disconnectAudio: no audio device is connected/connecting""); return false; } return disconnectAudio(device); } }",77cb23cdf84e4bde267cd1ce3bbce096f2cfba88,"boolean disconnectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH_ADMIN permission""); boolean result = false; synchronized(mStateMachines) { for (android.bluetooth.BluetoothDevice device : getNonIdleAudioDevices()) { if (!(disconnectAudio(device))) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, ((""disconnectAudio() from "" + device) + "" failed"")); } else { result = true; } } } if (!result) { com.android.bluetooth.hfp.HeadsetService.logD(""disconnectAudio() no active audio connection""); } return result; }",75539c99cf6e6ac345a0ee5aeda249c15f2ed29b,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,public boolean getAudioRouteAllowed() { return mStateMachine.getAudioRouteAllowed(); },a9c55184d98d0c73b5ab64bad53d3f4ec9db538b,public boolean getAudioRouteAllowed() { return mAudioRouteAllowed; },1b8b23caed9540f5d634e2cddcb147a42b356a93,"private static void logD(java.lang.String message) { if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, message); } }",cc8ea9856770b8f2ab08937a1f48ba6eb5d64d32,2018-01-24 18:03:19,34
548206,src_com_android_bluetooth_hfp_HeadsetService.java,"boolean isAudioOn() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); return (mStateMachine.getAudioState()) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED); }",5bd6a479e6944f701c813d7cacf770f29680c40e,"boolean isAudioOn() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { if ((stateMachine.getAudioState()) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { return true; } } } return false; }",5d6ab336a697427d663bc6522b72e07c55aee385,"boolean isAudioOn() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); return (getNonIdleAudioDevices().size()) > 0; }",e2c565f0198911c12c6ed1696b9970bfb180a4a7,2018-01-24 18:03:19,34
593734,services_core_java_com_android_server_audio_AudioService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void setBtScoActiveDevice(android.bluetooth.BluetoothDevice btDevice) { android.util.Log.d(com.android.server.audio.AudioService.TAG, ((""setBtScoActiveDevice("" + btDevice) + "")"")); synchronized(mScoClients) { final android.bluetooth.BluetoothDevice previousActiveDevice = mBluetoothHeadsetDevice; if (!(java.util.Objects.equals(btDevice, previousActiveDevice))) { if (!(handleBtScoActiveDeviceChange(previousActiveDevice, false))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, (""setBtScoActiveDevice() failed to remove previous device "" + previousActiveDevice)); return; } if (!(handleBtScoActiveDeviceChange(btDevice, true))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, (""setBtScoActiveDevice() failed to add new device "" + btDevice)); return; } mBluetoothHeadsetDevice = btDevice; if ((mBluetoothHeadsetDevice) == null) { resetBluetoothSco(); } android.util.Log.d(com.android.server.audio.AudioService.TAG, ((""setBtScoActiveDevice("" + btDevice) + "") done set"")); } } android.util.Log.d(com.android.server.audio.AudioService.TAG, ((""setBtScoActiveDevice("" + btDevice) + "") done"")); }",0796bedcda5197051ee6d84360c66fbcc622d8e8,"void setBtScoActiveDevice(android.bluetooth.BluetoothDevice btDevice) { if (com.android.server.audio.AudioService.DEBUG_DEVICES) { android.util.Log.d(com.android.server.audio.AudioService.TAG, ((""setBtScoActiveDevice("" + btDevice) + "")"")); } synchronized(mScoClients) { final android.bluetooth.BluetoothDevice previousActiveDevice = mBluetoothHeadsetDevice; if (!(java.util.Objects.equals(btDevice, previousActiveDevice))) { if (!(handleBtScoActiveDeviceChange(previousActiveDevice, false))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, (""setBtScoActiveDevice() failed to remove previous device "" + previousActiveDevice)); } if (!(handleBtScoActiveDeviceChange(btDevice, true))) { android.util.Log.e(com.android.server.audio.AudioService.TAG, (""setBtScoActiveDevice() failed to add new device "" + btDevice)); btDevice = null; } mBluetoothHeadsetDevice = btDevice; if ((mBluetoothHeadsetDevice) == null) { resetBluetoothSco(); } } } }",488cd048e1f016b59a75396144881492ec0def6e,2018-01-24 18:03:19,13
548206,src_com_android_bluetooth_hfp_HeadsetService.java,"private void phoneStateChanged(int numActive, int numHeld, int callState, java.lang.String number, int type) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.HeadsetService.MODIFY_PHONE_STATE, null); android.os.Message msg = mStateMachine.obtainMessage(HeadsetStateMachine.CALL_STATE_CHANGED); msg.obj = new com.android.bluetooth.hfp.HeadsetCallState(numActive, numHeld, callState, number, type); msg.arg1 = 0; mStateMachine.sendMessage(msg); }",0eec6943f57dcd66ed7c179b6b0784c482af8d11,"private void phoneStateChanged(int numActive, int numHeld, int callState, java.lang.String number, int type) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.HeadsetService.MODIFY_PHONE_STATE, null); broadCastMessageToStateMachines(HeadsetStateMachine.CALL_STATE_CHANGED, new com.android.bluetooth.hfp.HeadsetCallState(numActive, numHeld, callState, number, type)); }",4ba684838b6de43d98ee05d3d0604381858c05c2,"private void phoneStateChanged(int numActive, int numHeld, int callState, java.lang.String number, int type) { enforceCallingOrSelfPermission(android.Manifest.permission.MODIFY_PHONE_STATE, null); doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.CALL_STATE_CHANGED, new com.android.bluetooth.hfp.HeadsetCallState(numActive, numHeld, callState, number, type))); }",a671ed96e2df87ccd486fcae3e11fce084a95692,2018-01-24 18:03:19,34
593287,services_core_java_com_android_server_IpSecService.java,@java.lang.Override public void freeUnderlyingResources() { getResourceTracker().give(); mReserveKeyTracker.release(mKeys); },ca68f91edd423dd6464201ac3ced90d6a1099980,"@java.lang.Override public void freeUnderlyingResources() { try { mSrvConfig.getNetdInstance().teardownVirtualTunnelInterface(mInterfaceName); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, (((""Failed to delete VTI with interface name: "" + (mInterfaceName)) + "" and id: "") + (mResourceId))); } getResourceTracker().give(); mReserveKeyTracker.release(mKeys); }",59b18f408d1ed265dd356f8e0bba83467e3f41ee,"@java.lang.Override public void freeUnderlyingResources() { try { mSrvConfig.getNetdInstance().removeVirtualTunnelInterface(mInterfaceName); for (int direction : com.android.server.IpSecService.DIRECTIONS) { int mark = (direction == (android.net.IpSecManager.DIRECTION_IN)) ? mIkey : mOkey; mSrvConfig.getNetdInstance().ipSecDeleteSecurityPolicy(0, direction, mLocalAddress, mRemoteAddress, mark, -1); } } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, (((""Failed to delete VTI with interface name: "" + (mInterfaceName)) + "" and id: "") + (mResourceId))); } getResourceTracker().give(); releaseNetId(mIkey); releaseNetId(mOkey); }",701222dff1120380ceafe4af0e248ed4fb66b5ae,2018-01-24 18:10:53,21
593287,services_core_java_com_android_server_IpSecService.java,"@java.lang.Override public synchronized void applyTunnelModeTransform(int direction, int transformResourceId, int tunnelResourceId) throws android.os.RemoteException { com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TransformRecord transformInfo = userRecord.mTransformRecords.getResourceOrThrow(transformResourceId); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); android.net.IpSecConfig c = transformInfo.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (android.net.IpSecTransform.MODE_TUNNEL)), ""Transform mode was not Tunnel mode; cannot be applied to a tunnel interface""); int[] keys = tunnelInterfaceInfo.getKeys(); }",6be466457cc205609f1529b9bdbbdfc69c865011,"@java.lang.Override public synchronized void applyTunnelModeTransform(int direction, int transformResourceId, int tunnelResourceId) throws android.os.RemoteException { com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TransformRecord transformInfo = userRecord.mTransformRecords.getResourceOrThrow(transformResourceId); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); android.net.IpSecConfig c = transformInfo.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (android.net.IpSecTransform.MODE_TUNNEL)), ""Transform mode was not Tunnel mode; cannot be applied to a tunnel interface""); int[] keys = tunnelInterfaceInfo.getKeys(); try { mSrvConfig.getNetdInstance().ipSecApplyTunnelModeTransform(direction, c.getSourceAddress(), c.getDestinationAddress(), transformInfo.getSpiRecord().getSpi(), keys[direction]); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (EINVAL)) { throw new java.lang.IllegalArgumentException(e.toString()); } else { throw e; } } }",b637ba67437ac9071f356e94996b0d9c5af459cc,"@java.lang.Override public synchronized void applyTunnelModeTransform(int tunnelResourceId, int direction, int transformResourceId) throws android.os.RemoteException { com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TransformRecord transformInfo = userRecord.mTransformRecords.getResourceOrThrow(transformResourceId); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); android.net.IpSecConfig c = transformInfo.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (android.net.IpSecTransform.MODE_TUNNEL)), ""Transform mode was not Tunnel mode; cannot be applied to a tunnel interface""); com.android.server.IpSecService.EncapSocketRecord socketRecord = null; if ((c.getEncapType()) != (android.net.IpSecTransform.ENCAP_NONE)) { socketRecord = userRecord.mEncapSocketRecords.getResourceOrThrow(c.getEncapSocketResourceId()); } com.android.server.IpSecService.SpiRecord spiRecord = userRecord.mSpiRecords.getResourceOrThrow(c.getSpiResourceId()); int mark = (direction == (android.net.IpSecManager.DIRECTION_IN)) ? tunnelInterfaceInfo.getIkey() : tunnelInterfaceInfo.getOkey(); try { c.setMarkValue(mark); c.setMarkMask(-1); if (direction == (android.net.IpSecManager.DIRECTION_OUT)) { c.setNetwork(tunnelInterfaceInfo.getUnderlyingNetwork()); mSrvConfig.getNetdInstance().ipSecUpdateSecurityPolicy(0, direction, """", """", transformInfo.getSpiRecord().getSpi(), mark, -1); } createOrUpdateTransform(c, transformResourceId, spiRecord, socketRecord); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (EINVAL)) { throw new java.lang.IllegalArgumentException(e.toString()); } else { throw e; } } }",ec3b99fbefe8450570b2ee21cbd46759df882145,2018-01-24 18:10:53,21
592395,services_core_java_com_android_server_pm_PackageDexOptimizer.java,"private int getDexFlags(android.content.pm.ApplicationInfo info, java.lang.String compilerFilter, com.android.server.pm.dex.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) != 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = (!(info.isForwardLocked())) && (!isProfileGuidedFilter); int profileFlag = (isProfileGuidedFilter) ? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int dexFlags = ((((isPublic ? com.android.server.pm.Installer.DEXOPT_PUBLIC : 0) | (debuggable ? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | profileFlag) | (options.isBootComplete() ? com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE : 0)) | (options.isDexoptIdleBackgroundJob() ? com.android.server.pm.Installer.DEXOPT_IDLE_BACKGROUND_JOB : 0); return adjustDexoptFlags(dexFlags); }",42afd0b94b6cf9ae53d1a4e01166ec3c63799e06,"private int getDexFlags(android.content.pm.ApplicationInfo info, java.lang.String compilerFilter, com.android.server.pm.dex.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) != 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = (!(info.isForwardLocked())) && (!isProfileGuidedFilter); int profileFlag = (isProfileGuidedFilter) ? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int dexFlags = (((((isPublic ? com.android.server.pm.Installer.DEXOPT_PUBLIC : 0) | (debuggable ? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | profileFlag) | (options.isBootComplete() ? com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE : 0)) | (options.isDexoptIdleBackgroundJob() ? com.android.server.pm.Installer.DEXOPT_IDLE_BACKGROUND_JOB : 0)) | (info.isSystemApp() ? com.android.server.pm.Installer.DEXOPT_DISABLE_HIDDEN_API_CHECKS : 0); return adjustDexoptFlags(dexFlags); }",9121a12ac04322e5f68c02235bd541ac3d2ab336,"private int getDexFlags(android.content.pm.ApplicationInfo info, java.lang.String compilerFilter, com.android.server.pm.dex.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) != 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = (!(info.isForwardLocked())) && (!isProfileGuidedFilter); int profileFlag = (isProfileGuidedFilter) ? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int hiddenApiFlag = (info.isAllowedToUseHiddenApi()) ? com.android.server.pm.Installer.DEXOPT_DISABLE_HIDDEN_API_CHECKS : 0; int dexFlags = (((((isPublic ? com.android.server.pm.Installer.DEXOPT_PUBLIC : 0) | (debuggable ? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | profileFlag) | (options.isBootComplete() ? com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE : 0)) | (options.isDexoptIdleBackgroundJob() ? com.android.server.pm.Installer.DEXOPT_IDLE_BACKGROUND_JOB : 0)) | hiddenApiFlag; return adjustDexoptFlags(dexFlags); }",3b7445e4e8a1265b195761dede1d8b01736daa8d,2018-01-24 20:28:19,6
598951,src_com_android_phone_CarrierConfigLoader.java,"private void broadcastConfigChangedIntent(int phoneId) { android.content.Intent intent = new android.content.Intent(android.telephony.CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND))); android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra(intent, phoneId); android.app.ActivityManager.broadcastStickyIntent(intent, UserHandle.USER_ALL); mHasSentConfigChange[phoneId] = true; }",49a32add7135dea61dfdba5d707fa43c9df5576c,"private void broadcastConfigChangedIntent(int phoneId) { android.content.Intent intent = new android.content.Intent(android.telephony.CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND))); android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra(intent, phoneId); intent.putExtra(CarrierConfigManager.EXTRA_PHONE_ID, phoneId); android.app.ActivityManager.broadcastStickyIntent(intent, UserHandle.USER_ALL); mHasSentConfigChange[phoneId] = true; }",17e80737a8e7ab3fbd418e125b74d15fd87ccf7f,"private void broadcastConfigChangedIntent(int phoneId) { android.content.Intent intent = new android.content.Intent(android.telephony.CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND))); android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra(intent, phoneId); intent.putExtra(CarrierConfigManager.EXTRA_SLOT_INDEX, phoneId); android.app.ActivityManager.broadcastStickyIntent(intent, UserHandle.USER_ALL); mHasSentConfigChange[phoneId] = true; }",31f2b2ab7d5b738a8317cb206d0d3b4aca2b8d5d,2018-01-25 01:33:32,2
591217,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,,"@org.junit.Before public void setUp() { mEuiccCard = new com.android.internal.telephony.uicc.euicc.EuiccCardImplV2(new com.android.euicc.data.EuiccSpecVersion(2, 0, 0), mMockTm); }",e9fe7c791169e4eca66dff266cd24f0c50ed2912,@org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(getClass().getSimpleName()); mMockIccCardStatus.mApplications = new com.android.internal.telephony.uicc.IccCardApplicationStatus[]{ }; mMockIccCardStatus.mCdmaSubscriptionAppIndex = mMockIccCardStatus.mImsSubscriptionAppIndex = mMockIccCardStatus.mGsmUmtsSubscriptionAppIndex = -1; mMockIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_PRESENT; mTestHandlerThread = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.UiccCardHandlerThread(getClass().getSimpleName()); mTestHandlerThread.start(); waitUntilReady(); },ec1e04a73656a5c756ba9af40897675d4cdc6495,2018-01-25 02:44:24,5
591217,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static com.android.internal.telephony.uicc.euicc.OperatorId buildOperatorId(com.android.internal.telephony.uicc.asn1.Asn1Node node) throws com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException, com.android.internal.telephony.uicc.asn1.TagNotFoundException { byte[] gid1 = null; if (node.hasChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_1)) { gid1 = node.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_1).asBytes(); } byte[] gid2 = null; if (node.hasChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_2)) { gid2 = node.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_2).asBytes(); } return new com.android.internal.telephony.uicc.euicc.OperatorId(node.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_0).asBytes(), gid1, gid2); }",805f064987f4ce586215cb9a568fa8f261789dee,"private static android.service.carrier.CarrierIdentifier buildCarrierIdentifier(com.android.internal.telephony.uicc.asn1.Asn1Node node) throws com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException, com.android.internal.telephony.uicc.asn1.TagNotFoundException { java.lang.String gid1 = null; if (node.hasChild(Tags.TAG_CTX_1)) { gid1 = com.android.internal.telephony.uicc.IccUtils.bytesToHexString(node.getChild(Tags.TAG_CTX_1).asBytes()); } java.lang.String gid2 = null; if (node.hasChild(Tags.TAG_CTX_2)) { gid2 = com.android.internal.telephony.uicc.IccUtils.bytesToHexString(node.getChild(Tags.TAG_CTX_2).asBytes()); } return new android.service.carrier.CarrierIdentifier(node.getChild(Tags.TAG_CTX_0).asBytes(), gid1, gid2); }",91584e72f9508490da5fb99b4ff2c163296268be,2018-01-25 02:44:24,5
591217,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,,"private int mockLogicalChannelResponses(java.lang.String response, java.lang.String... extraResponses) { int channel = com.android.euicc.telephony.UiccChannelMocker.mockOpenLogicalChannelResponse(mMockTm, IccOpenLogicalChannelResponse.STATUS_NO_ERROR, ""9000""); com.android.euicc.telephony.UiccChannelMocker.mockSendToLogicalChannel(mMockTm, channel, response, extraResponses); com.android.euicc.telephony.UiccChannelMocker.mockCloseLogicalChannel(mMockTm, channel); return channel; }",03b83022fabbca3d6282d1fa5dd631ff4a3e184a,"private int mockLogicalChannelResponses(java.lang.Object... responses) { int channel = com.android.internal.telephony.uicc.euicc.apdu.LogicalChannelMocker.mockOpenLogicalChannelResponse(mMockCi, ""E00582030200009000""); com.android.internal.telephony.uicc.euicc.apdu.LogicalChannelMocker.mockSendToLogicalChannel(mMockCi, channel, responses); com.android.internal.telephony.uicc.euicc.apdu.LogicalChannelMocker.mockCloseLogicalChannel(mMockCi, channel); return channel; }",1861e24fc1fe4130a59b10ffa5fba20ce4a1d19a,2018-01-25 02:44:24,5
591217,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,"public void prepareDownload(@android.annotation.Nullable byte[] hashCc, byte[] smdpSigned2, byte[] smdpSignature2, byte[] smdpCertificate, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }",9e26d32c6e0e2f1109358089b06bd5a3dd193a22,"public void prepareDownload(@android.annotation.Nullable byte[] hashCc, com.android.internal.telephony.uicc.asn1.Asn1Node smdpSigned2, com.android.internal.telephony.uicc.asn1.Asn1Node smdpSignature2, com.android.internal.telephony.uicc.asn1.Asn1Node smdpCertificate, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.Asn1Node> callback, android.os.Handler handler) { }",5a0d218a80966709cf8909ae798f0373ef607f8d,"public void prepareDownload(@android.annotation.Nullable byte[] hashCc, byte[] smdpSigned2, byte[] smdpSignature2, byte[] smdpCertificate, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }",9e26d32c6e0e2f1109358089b06bd5a3dd193a22,2018-01-25 02:44:24,5
591217,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,,"@org.junit.Test public void testGetAllProfiles() throws com.android.euicc.telephony.UiccChannelException, com.android.internal.telephony.uicc.euicc.EuiccCardException { int channel = mockLogicalChannelResponses(""BF2D14A012E3105A0A896700000000004523019F7001019000""); com.android.euicc.data.EuiccProfile[] profiles = mEuiccCard.getAllProfiles(); assertEquals(1, profiles.length); assertEquals(""98760000000000543210"", profiles[0].getIccid()); assertEquals(ProfileState.ENABLED, profiles[0].getState()); verifyStoreData(channel, ""BF2D0D5C0B5A909192B79F709599BF76""); }",ac86e05c816296888520578a1239dd5986a45e50,"@org.junit.Test public void testGetAllProfiles() { int channel = mockLogicalChannelResponses(""BF2D14A012E3105A0A896700000000004523019F7001019000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<android.service.euicc.EuiccProfileInfo[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.getAllProfiles(resultCaptor, mHandler); resultCaptor.await(); assertUnexpectedException(resultCaptor.exception); android.service.euicc.EuiccProfileInfo[] profiles = resultCaptor.result; assertEquals(1, profiles.length); assertEquals(""98760000000000543210"", profiles[0].getIccid()); assertEquals(EuiccProfileInfo.PROFILE_STATE_ENABLED, profiles[0].getState()); verifyStoreData(channel, ""BF2D0D5C0B5A909192B79F709599BF76""); }",4f63eccf528341facdcf7fa1db17328288015627,2018-01-25 02:44:24,5
591217,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,"public void getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }",54e0b17fa407570f91f2ce845b068fd197ed0428,"public void getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.Asn1Node> callback, android.os.Handler handler) { }",57e13e5c5eb7116ff7f6a06541db9efc6c4b653d,"public void getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }",54e0b17fa407570f91f2ce845b068fd197ed0428,2018-01-25 02:44:24,5
591217,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,"public void authenticateServer(java.lang.String matchingId, byte[] serverSigned1, byte[] serverSignature1, byte[] euiccCiPkIdToBeUsed, byte[] serverCertificate, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }",11879672cf24fa1f112fd9c032a2ea98a51c3ae0,"public void authenticateServer(java.lang.String matchingId, com.android.internal.telephony.uicc.asn1.Asn1Node serverSigned1, com.android.internal.telephony.uicc.asn1.Asn1Node serverSignature1, com.android.internal.telephony.uicc.asn1.Asn1Node euiccCiPkIdToBeUsed, com.android.internal.telephony.uicc.asn1.Asn1Node serverCertificate, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.Asn1Node> callback, android.os.Handler handler) { }",44f1d85c08209b8ff65340a524195264cff6733e,"public void authenticateServer(java.lang.String matchingId, byte[] serverSigned1, byte[] serverSignature1, byte[] euiccCiPkIdToBeUsed, byte[] serverCertificate, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }",11879672cf24fa1f112fd9c032a2ea98a51c3ae0,2018-01-25 02:44:24,5
591217,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,"public void cancelSession(byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }",244257c515a647496eeb9982124baf0593751c7b,"public void cancelSession(byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.Asn1Node> callback, android.os.Handler handler) { }",fcd53a67ec69413747235086c7aac86e3aee3865,"public void cancelSession(byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }",244257c515a647496eeb9982124baf0593751c7b,2018-01-25 02:44:24,5
591217,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,,"private void verifyStoreData(int channel, java.lang.String command) { verify(mMockTm, times(1)).iccTransmitApduLogicalChannel(channel, (128 | channel), 226, 145, 0, ((command.length()) / 2), command); }",00e4aa9e91028a7319c32ed4811fde9e13b7119c,"private void verifyStoreData(int channel, java.lang.String command) { verify(mMockCi, times(1)).iccTransmitApduLogicalChannel(eq(channel), eq((128 | channel)), eq(226), eq(145), eq(0), eq(((command.length()) / 2)), eq(command), any()); }",49d358cb736ad68132d09a2fe273f149c7937ea1,2018-01-25 02:44:24,5
591217,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,"public void getEuiccInfo2(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }",8c90a62e744a3dc3bb1124f0cd1418da58054701,"public void getEuiccInfo2(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.Asn1Node> callback, android.os.Handler handler) { }",e6e62ffa9bb3cc42665c4161f62e2a40efe221e6,"public void getEuiccInfo2(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }",8c90a62e744a3dc3bb1124f0cd1418da58054701,2018-01-25 02:44:24,5
591217,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static java.lang.String stripTrailingFs(byte[] iccId) { java.lang.String iccIdString = com.android.internal.telephony.uicc.euicc.Asn1Converter.bcdBytesToString(iccId); if (iccIdString.endsWith(""F"")) { iccIdString = iccIdString.substring(0, iccIdString.indexOf('F')); } return iccIdString; }",59bc0df7fedc32758fb58de31ed9f8bc130535f9,"private static java.lang.String stripTrailingFs(byte[] iccId) { return com.android.internal.telephony.uicc.IccUtils.stripTrailingFs(com.android.internal.telephony.uicc.IccUtils.bchToString(iccId, 0, iccId.length)); }",0ede81f956026d45ff82a2feb433c3cdeb9dbf76,2018-01-25 02:44:24,5
591217,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,"public void loadBoundProfilePackage(byte[] boundProfilePackage, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }",f951f3215f5e22f7d04ccd6b3cec12e7530250d9,"public void loadBoundProfilePackage(com.android.internal.telephony.uicc.asn1.Asn1Node boundProfilePackage, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.Asn1Node> callback, android.os.Handler handler) { }",4dc50e417ee64e4b7b4b8b2d8e0343595e17f349,"public void loadBoundProfilePackage(byte[] boundProfilePackage, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }",f951f3215f5e22f7d04ccd6b3cec12e7530250d9,2018-01-25 02:44:24,5
591217,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,,"@org.junit.Test public void testFSuffix() throws com.android.euicc.telephony.UiccChannelException, com.android.internal.telephony.uicc.euicc.EuiccCardException { int channel = mockLogicalChannelResponses(""BF2D14A012E3105A0A896700000000004523FF9F7001019000""); com.android.euicc.data.EuiccProfile[] profiles = mEuiccCard.getAllProfiles(); assertEquals(1, profiles.length); assertEquals(""987600000000005432"", profiles[0].getIccid()); assertEquals(ProfileState.ENABLED, profiles[0].getState()); verifyStoreData(channel, ""BF2D0D5C0B5A909192B79F709599BF76""); }",fe9182e8c4599b116fb66f2865ef58a681a3cf6e,"@org.junit.Test public void testFSuffix() { int channel = mockLogicalChannelResponses(""BF2D14A012E3105A0A896700000000004523FF9F7001019000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<android.service.euicc.EuiccProfileInfo[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.getAllProfiles(resultCaptor, mHandler); resultCaptor.await(); assertUnexpectedException(resultCaptor.exception); android.service.euicc.EuiccProfileInfo[] profiles = resultCaptor.result; assertEquals(1, profiles.length); assertEquals(""987600000000005432"", profiles[0].getIccid()); assertEquals(EuiccProfileInfo.PROFILE_STATE_ENABLED, profiles[0].getState()); verifyStoreData(channel, ""BF2D0D5C0B5A909192B79F709599BF76""); }",8275d64fccda47b73d8f076ebaf0d826e6c97222,2018-01-25 02:44:24,5
595602,src_java_com_android_internal_telephony_uicc_UiccProfile.java,private boolean areAllRecordsLoaded() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if ((app != null) && (isSupportedApplication(app))) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir == null) || (!(ir.isLoaded()))) { return false; } } } return (mUiccApplications[0]) != null; },eaf84454ffac14eb492d4e27f8776ed8f9ebcbbf,"private boolean areAllRecordsLoaded() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if ((app != null) && (isSupportedApplication(app))) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir == null) || (!(ir.isLoaded()))) { log(""areAllRecordsLoaded: return false""); return false; } } } log((""areAllRecordsLoaded: outside loop, return "" + ((mUiccApplications[0]) != null))); return (mUiccApplications[0]) != null; }",5c20338a72be121d073af1138c149a0fedb4ae7a,"private boolean areAllRecordsLoaded() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if ((app != null) && (isSupportedApplication(app))) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir == null) || (!(ir.isLoaded()))) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log(""areAllRecordsLoaded: return false""); return false; } } } if (com.android.internal.telephony.uicc.UiccProfile.VDBG) { log((""areAllRecordsLoaded: outside loop, return "" + ((mUiccApplications[0]) != null))); } return (mUiccApplications[0]) != null; }",da78d0d6d3f5edb15fe77d0f36d35f090674dc82,2018-01-25 03:56:21,13
595602,src_java_com_android_internal_telephony_uicc_UiccProfile.java,private void updateExternalState() { if ((mUiccCard.getCardState()) == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ERROR)) { setExternalState(IccCardConstants.State.CARD_IO_ERROR); return; } if ((mUiccCard.getCardState()) == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_RESTRICTED)) { setExternalState(IccCardConstants.State.CARD_RESTRICTED); return; } if ((mUiccApplication) == null) { setExternalState(IccCardConstants.State.NOT_READY); return; } switch (mUiccApplication.getState()) { case APPSTATE_UNKNOWN : setExternalState(IccCardConstants.State.NOT_READY); break; case APPSTATE_SUBSCRIPTION_PERSO : if ((mUiccApplication.getPersoSubState()) == (IccCardApplicationStatus.PersoSubState.PERSOSUBSTATE_SIM_NETWORK)) { setExternalState(IccCardConstants.State.NETWORK_LOCKED); } break; case APPSTATE_READY : setExternalState(IccCardConstants.State.READY); break; } },3a8f110cb391d212c22cd03306cef28ad8566d03,private void updateExternalState() { if ((mUiccCard.getCardState()) == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ERROR)) { setExternalState(IccCardConstants.State.CARD_IO_ERROR); return; } if ((mUiccCard.getCardState()) == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_RESTRICTED)) { setExternalState(IccCardConstants.State.CARD_RESTRICTED); return; } if (((mUiccApplication) == null) || (!(areAllApplicationsReady()))) { setExternalState(IccCardConstants.State.NOT_READY); return; } switch (mUiccApplication.getState()) { case APPSTATE_UNKNOWN : setExternalState(IccCardConstants.State.NOT_READY); break; case APPSTATE_SUBSCRIPTION_PERSO : if ((mUiccApplication.getPersoSubState()) == (IccCardApplicationStatus.PersoSubState.PERSOSUBSTATE_SIM_NETWORK)) { setExternalState(IccCardConstants.State.NETWORK_LOCKED); } break; case APPSTATE_READY : setExternalState(IccCardConstants.State.READY); break; } },988a42648de0a51dcca48ed6c21942d030675151,private void updateExternalState() { if ((mUiccCard.getCardState()) == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ERROR)) { setExternalState(IccCardConstants.State.CARD_IO_ERROR); return; } if ((mUiccCard.getCardState()) == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_RESTRICTED)) { setExternalState(IccCardConstants.State.CARD_RESTRICTED); return; } if (((mUiccApplication) == null) || (!(areAllApplicationsReady()))) { setExternalState(IccCardConstants.State.NOT_READY); return; } switch (mUiccApplication.getState()) { case APPSTATE_UNKNOWN : setExternalState(IccCardConstants.State.NOT_READY); break; case APPSTATE_SUBSCRIPTION_PERSO : if ((mUiccApplication.getPersoSubState()) == (IccCardApplicationStatus.PersoSubState.PERSOSUBSTATE_SIM_NETWORK)) { setExternalState(IccCardConstants.State.NETWORK_LOCKED); } break; case APPSTATE_READY : setExternalStateOnReady(); break; } },2d742ccbbcb9e6aad948d2c04b81358dd7170e13,2018-01-25 03:56:21,13
595602,src_java_com_android_internal_telephony_uicc_UiccController.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.android.internal.telephony.uicc.UiccProfile getUiccProfileForPhone(int phoneId) { synchronized(com.android.internal.telephony.uicc.UiccController.mLock) { com.android.internal.telephony.uicc.UiccCard uiccCard = getUiccCardForPhone(phoneId); return uiccCard != null ? uiccCard.getUiccProfile() : null; } },67099c4fb0b92a69f5ff9caab79169097e447198,public com.android.internal.telephony.uicc.UiccProfile getUiccProfileForPhone(int phoneId) { synchronized(com.android.internal.telephony.uicc.UiccController.mLock) { if (isValidPhoneIndex(phoneId)) { com.android.internal.telephony.uicc.UiccCard uiccCard = getUiccCardForPhone(phoneId); return uiccCard != null ? uiccCard.getUiccProfile() : null; } return null; } },3367ccdf48f6eae5cc1389e496c701eca86c8595,2018-01-25 03:56:21,13
595602,src_java_com_android_internal_telephony_uicc_UiccProfile.java,"@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { case com.android.internal.telephony.uicc.UiccProfile.EVENT_OPEN_LOGICAL_CHANNEL_DONE : case com.android.internal.telephony.uicc.UiccProfile.EVENT_CLOSE_LOGICAL_CHANNEL_DONE : case com.android.internal.telephony.uicc.UiccProfile.EVENT_TRANSMIT_APDU_LOGICAL_CHANNEL_DONE : case com.android.internal.telephony.uicc.UiccProfile.EVENT_TRANSMIT_APDU_BASIC_CHANNEL_DONE : case com.android.internal.telephony.uicc.UiccProfile.EVENT_SIM_IO_DONE : android.os.AsyncResult ar = ((android.os.AsyncResult) (msg.obj)); if ((ar.exception) != null) { loglocal((""Exception: "" + (ar.exception))); log((""Error in SIM access with exception"" + (ar.exception))); } android.os.AsyncResult.forMessage(((android.os.Message) (ar.userObj)), ar.result, ar.exception); ((android.os.Message) (ar.userObj)).sendToTarget(); break; case com.android.internal.telephony.uicc.UiccProfile.EVENT_CARRIER_PRIVILEGES_LOADED : onCarrierPriviligesLoadedMessage(); break; default : loge((""Unknown Event "" + (msg.what))); } }",55222f8ec98b9db40cfb61985efdaf6c9ca44720,"@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { default : loge((""Unknown Event "" + (msg.what))); } }",552bd9b841f68c59fa6016ef2c01e32a2a0956ba,private void setExternalStateOnReady() { if (areAllApplicationsReady()) { if ((areAllRecordsLoaded()) && (areCarrierPriviligeRulesLoaded())) { setExternalState(IccCardConstants.State.LOADED); } else { setExternalState(IccCardConstants.State.READY); } } else { setExternalState(IccCardConstants.State.NOT_READY); } },11a6fb59657f7d66beedc5e6dd3abc7eebcbb832,2018-01-25 03:56:21,13
595602,src_java_com_android_internal_telephony_uicc_UiccProfile.java,private void setCurrentAppType(boolean isGsm) { synchronized(mLock) { boolean isLteOnCdmaMode = (android.telephony.TelephonyManager.getLteOnCdmaModeStatic()) == (com.android.internal.telephony.PhoneConstants.LTE_ON_CDMA_TRUE); if (isGsm || isLteOnCdmaMode) { mCurrentAppType = UiccController.APP_FAM_3GPP; } else { mCurrentAppType = UiccController.APP_FAM_3GPP2; } initializeCurrentApp(); } },86d9a4d7ba4dedb6cd93ae8f0bb6ca5153d72c16,"private void setCurrentAppType(boolean isGsm) { log(""setCurrentAppType""); synchronized(mLock) { boolean isLteOnCdmaMode = (android.telephony.TelephonyManager.getLteOnCdmaModeStatic()) == (com.android.internal.telephony.PhoneConstants.LTE_ON_CDMA_TRUE); if (isGsm || isLteOnCdmaMode) { mCurrentAppType = UiccController.APP_FAM_3GPP; } else { mCurrentAppType = UiccController.APP_FAM_3GPP2; } } }",6255d835655e202f0102e736df8ed3d3550ef552,"private void setCurrentAppType(boolean isGsm) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log(""setCurrentAppType""); synchronized(mLock) { boolean isLteOnCdmaMode = (android.telephony.TelephonyManager.getLteOnCdmaModeStatic()) == (com.android.internal.telephony.PhoneConstants.LTE_ON_CDMA_TRUE); if (isGsm || isLteOnCdmaMode) { mCurrentAppType = UiccController.APP_FAM_3GPP; } else { mCurrentAppType = UiccController.APP_FAM_3GPP2; } } }",20711abea1beee38f1d786f677689d7f41943e48,2018-01-25 03:56:21,13
595602,src_java_com_android_internal_telephony_uicc_UiccProfile.java,"private void registerUiccCardEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { app.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir != null) { ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } } } if ((mIccRecords) != null) { mIccRecords.registerForLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_LOCKED, null); mIccRecords.registerForNetworkLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_NETWORK_LOCKED, null); } }",54b7b4311d6291505b2f43aadcdc3696b50e5927,"private void registerAllAppEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { log(""registerUiccCardEvents: registering for EVENT_APP_READY""); app.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir != null) { log(""registerUiccCardEvents: registering for EVENT_RECORDS_LOADED""); ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } } } }",828968ff0678875f6ed1bb6730dcf2ed905d12a5,"private void registerAllAppEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log(""registerUiccCardEvents: registering for EVENT_APP_READY""); app.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir != null) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log(""registerUiccCardEvents: registering for EVENT_RECORDS_LOADED""); ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } } } }",763c12f6cf4ac9f8c2d6bdac22da4eb259356f20,2018-01-25 03:56:21,13
595602,src_java_com_android_internal_telephony_uicc_UiccCard.java,"public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { com.android.internal.telephony.uicc.IccCardStatus.CardState oldState = mCardState; mCardState = ics.mCardState; mContext = c; mCi = ci; mIccid = ics.iccid; updateCardId(); if ((mCardState) != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = new com.android.internal.telephony.uicc.UiccProfile(mContext, mCi, ics, mPhoneId, this); } else { mUiccProfile.update(mContext, mCi, ics); } } else { throw new java.lang.RuntimeException(""Card state is absent when updating!""); } } }",37c4eb13dfd0e1a488b83e816609dd0efcad2755,"public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { mCardState = ics.mCardState; mContext = c; mCi = ci; mIccid = ics.iccid; updateCardId(); if ((mCardState) != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = new com.android.internal.telephony.uicc.UiccProfile(mContext, mCi, ics, mPhoneId, this); } else { mUiccProfile.update(mContext, mCi, ics); } } else { throw new java.lang.RuntimeException(""Card state is absent when updating!""); } } }",1f54ca8c1a71025131acf17b10c328f05a5f345d,"public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { mCardState = ics.mCardState; mContext = c; mCi = ci; mIccid = ics.iccid; updateCardId(); if ((mCardState) != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = com.android.internal.telephony.TelephonyComponentFactory.getInstance().makeUiccProfile(mContext, mCi, ics, mPhoneId, this); } else { mUiccProfile.update(mContext, mCi, ics); } } else { throw new java.lang.RuntimeException(""Card state is absent when updating!""); } } }",78ed7bc33a1d051464fe5050e71139f357ad2a69,2018-01-25 03:56:21,13
595602,src_java_com_android_internal_telephony_uicc_UiccProfile.java,private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app != null) && (isSupportedApplication(app))) && (!(app.isReady()))) { return false; } } return (mUiccApplications[0]) != null; },737784f673bb016a4d19a267db3e9e785064af1d,"private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app != null) && (isSupportedApplication(app))) && (!(app.isReady()))) { log(""areAllApplicationsReady: return false""); return false; } } log((""areAllApplicationsReady: outside loop, return "" + ((mUiccApplications[0]) != null))); return (mUiccApplications[0]) != null; }",55d120bb956118bba7b0504e3b80b6b3e1cb4590,"private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app != null) && (isSupportedApplication(app))) && (!(app.isReady()))) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log(""areAllApplicationsReady: return false""); return false; } } if (com.android.internal.telephony.uicc.UiccProfile.VDBG) { log((""areAllApplicationsReady: outside loop, return "" + ((mUiccApplications[0]) != null))); } return (mUiccApplications[0]) != null; }",086aaf3a75083320874edb9c45faad757759e4a9,2018-01-25 03:56:21,13
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testRetrieveNotification_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF2B038101019000""); try { mEuiccCard.retrieveNotification(5); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(1, e.getErrorCode()); verifyStoreData(channel, ""BF2B05A003800105""); throw e; } }",0566ca2d65d608497601c8e5aa0c1d43fd32b27b,"@org.junit.Test public void testRetrieveNotification_Error() { int channel = mockLogicalChannelResponses(""BF2B038101019000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<android.telephony.euicc.EuiccNotification> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.retrieveNotification(5, resultCaptor, mHandler); resultCaptor.await(); assertEquals(1, ((com.android.internal.telephony.uicc.euicc.EuiccCardErrorException) (resultCaptor.exception)).getErrorCode()); verifyStoreData(channel, ""BF2B05A003800105""); }",40f1c2a4b11b94ebe804304afb91a4da3c26dbf8,2018-01-25 05:47:02,8
591196,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private android.telephony.euicc.EuiccNotification createNotification(com.android.internal.telephony.uicc.asn1.Asn1Node node) throws com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException, com.android.internal.telephony.uicc.asn1.TagNotFoundException { com.android.internal.telephony.uicc.asn1.Asn1Node metadataNode; if ((node.getTag()) == (TAG_NOTIFICATION_METADATA)) { metadataNode = node; } else if ((node.getTag()) == (TAG_PROFILE_INSTALLATION_RESULT)) { metadataNode = node.getChild(com.android.internal.telephony.uicc.euicc.TAG_PROFILE_INSTALLATION_RESULT_DATA, com.android.internal.telephony.uicc.euicc.TAG_NOTIFICATION_METADATA); } else { metadataNode = node.getChild(com.android.internal.telephony.uicc.euicc.TAG_NOTIFICATION_METADATA); } return new android.telephony.euicc.EuiccNotification(metadataNode.getChild(com.android.internal.telephony.uicc.euicc.TAG_SEQ).asInteger(), metadataNode.getChild(com.android.internal.telephony.uicc.euicc.TAG_TARGET_ADDR).asString(), metadataNode.getChild(com.android.internal.telephony.uicc.euicc.TAG_EVENT).asBits(), ((node.getTag()) == (TAG_NOTIFICATION_METADATA) ? null : node.toBytes())); }",5a3df2a3538c3d34bbe5a2384cd6c2e2bf4bd0f0,"private static android.telephony.euicc.EuiccNotification createNotification(com.android.internal.telephony.uicc.asn1.Asn1Node node) throws com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException, com.android.internal.telephony.uicc.asn1.TagNotFoundException { com.android.internal.telephony.uicc.asn1.Asn1Node metadataNode; if ((node.getTag()) == (Tags.TAG_NOTIFICATION_METADATA)) { metadataNode = node; } else if ((node.getTag()) == (Tags.TAG_PROFILE_INSTALLATION_RESULT)) { metadataNode = node.getChild(Tags.TAG_PROFILE_INSTALLATION_RESULT_DATA, Tags.TAG_NOTIFICATION_METADATA); } else { metadataNode = node.getChild(Tags.TAG_NOTIFICATION_METADATA); } return new android.telephony.euicc.EuiccNotification(metadataNode.getChild(Tags.TAG_SEQ).asInteger(), metadataNode.getChild(Tags.TAG_TARGET_ADDR).asString(), metadataNode.getChild(Tags.TAG_EVENT).asBits(), ((node.getTag()) == (Tags.TAG_NOTIFICATION_METADATA) ? null : node.toBytes())); }",20036e35ea833c61c0f5c4dbe62eea53c9bb6875,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testCancelSession_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF41038101039000""); try { mEuiccCard.cancelSession(com.android.internal.telephony.uicc.euicc.Asn1Converter.hexToBytes(""A1B2C3""), EuiccCard.CancelReason.POSTPONED); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, ""BF41088003A1B2C3810101""); throw e; } }",533290f8b916f21a3810f3af584b038f6fa8ac28,"@org.junit.Test public void testCancelSession_Error() { int channel = mockLogicalChannelResponses(""BF41038101039000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<byte[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.cancelSession(com.android.internal.telephony.uicc.IccUtils.hexStringToBytes(""A1B2C3""), EuiccCardManager.CANCEL_REASON_POSTPONED, resultCaptor, mHandler); resultCaptor.await(); assertEquals(3, ((com.android.internal.telephony.uicc.euicc.EuiccCardErrorException) (resultCaptor.exception)).getErrorCode()); verifyStoreData(channel, ""BF41088003A1B2C3810101""); }",41f7765ffc85a8c4a95b849ef6136692a379c25d,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testRemoveNotificationFromList() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF30038001009000""); mEuiccCard.removeNotificationFromList(5); verifyStoreData(channel, ""BF3003800105""); }",0901fdfeb7ce910bbacac9f452687d90123b60c3,"@org.junit.Test public void testRemoveNotificationFromList() { int channel = mockLogicalChannelResponses(""BF30038001009000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<java.lang.Void> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.removeNotificationFromList(5, resultCaptor, mHandler); resultCaptor.await(); assertUnexpectedException(resultCaptor.exception); verifyStoreData(channel, ""BF3003800105""); }",01113e73f9539b108f67e420110c4dc5c53f59f3,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testSwitchToProfile_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF2D14A012E3105A0A896700000000004523019F7001009000"", ""BF31038001039000""); try { mEuiccCard.switchToProfile(""98760000000000543210"", true); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, ""BF3111A00C5A0A896700000000004523018101FF""); throw e; } }",c3c2b811174f5074ef5ae94a0d3d8976d2eef6a6,"@org.junit.Test public void testSwitchToProfile_Error() { int channel = mockLogicalChannelResponses(""BF31038001039000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<java.lang.Void> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.switchToProfile(""98760000000000543210"", true, resultCaptor, mHandler); resultCaptor.await(); assertEquals(3, ((com.android.internal.telephony.uicc.euicc.EuiccCardErrorException) (resultCaptor.exception)).getErrorCode()); verifyStoreData(channel, ""BF3111A00C5A0A896700000000004523018101FF""); }",d7671f2d0e303bdaeabb80171f236cec56257d09,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testswitchToProfile_SimRefresh() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF2D14A012E3105A0A896700000000004523019F7001009000"", ""6106"", ""6f00""); mEuiccCard.switchToProfile(""98760000000000543210"", true); verifyStoreData(channel, ""BF3111A00C5A0A896700000000004523018101FF""); }",c5b57fff31581546400bf55881d9df7eb2d14851,"@org.junit.Test public void testSwitchToProfile_SimRefresh() { int channel = mockLogicalChannelResponses(""6106"", ""6f00""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<java.lang.Void> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.switchToProfile(""98760000000000543210"", true, resultCaptor, mHandler); resultCaptor.await(); assertUnexpectedException(resultCaptor.exception); verifyStoreData(channel, ""BF3111A00C5A0A896700000000004523018101FF""); }",959fc99cec1f8fd3f408cf9776bd420d0e7f63a5,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testRetrieveNotificationList_Empty() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF2B038101019000""); com.android.internal.telephony.uicc.euicc.EuiccNotification[] result = mEuiccCard.retrieveNotificationList(((EuiccNotification.Event.DELETE) | (EuiccNotification.Event.DISABLE))); assertArrayEquals(new com.android.internal.telephony.uicc.euicc.EuiccNotification[0], result); verifyStoreData(channel, ""BF2B06A00481020430""); }",943259423350a03698e5e35f716b4c7daa327f29,"@org.junit.Test public void testRetrieveNotificationList_Empty() { int channel = mockLogicalChannelResponses(""BF2B038101019000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<android.telephony.euicc.EuiccNotification[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.retrieveNotificationList(((android.telephony.euicc.EuiccNotification.EVENT_DELETE) | (android.telephony.euicc.EuiccNotification.EVENT_DISABLE)), resultCaptor, mHandler); resultCaptor.await(); assertArrayEquals(new android.telephony.euicc.EuiccNotification[0], resultCaptor.result); verifyStoreData(channel, ""BF2B06A00481020430""); }",ef47c554edf3374204613708326f39e85b69a9f0,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testGetSmdsAddress() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF3C148008534D44502E434F4D8108736D64732E636F6D9000""); assertEquals(""smds.com"", mEuiccCard.getSmdsAddress()); verifyStoreData(channel, ""BF3C00""); }",b869117e8dbd3953ed71a952a1d186a1b846ba4e,"@org.junit.Test public void testGetSmdsAddress() { int channel = mockLogicalChannelResponses(""BF3C148008534D44502E434F4D8108736D64732E636F6D9000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<java.lang.String> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.getSmdsAddress(resultCaptor, mHandler); resultCaptor.await(); assertEquals(""smds.com"", resultCaptor.result); verifyStoreData(channel, ""BF3C00""); }",c4717aa511457e98eee9b69b181e7d1bbc368356,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testResetMemory_SimRefresh() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""6106"", ""6f00""); mEuiccCard.resetMemory(EuiccCard.ResetOption.DELETE_FIELD_LOADED_TEST_PROFILES); verifyStoreData(channel, ""BF340482020640""); }",dcd1423382434d7205d99dd1c76611fd64b2367a,"@org.junit.Test public void testResetMemory_SimRefresh() { int channel = mockLogicalChannelResponses(""6106"", ""6f00""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<java.lang.Void> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.resetMemory(EuiccCardManager.RESET_OPTION_DELETE_FIELD_LOADED_TEST_PROFILES, resultCaptor, mHandler); resultCaptor.await(); assertUnexpectedException(resultCaptor.exception); verifyStoreData(channel, ""BF340482020640""); }",4766797bf167db064d78607377e183c4882bfcbe,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testListNotifications() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses((""BF282BA029"" + ((""BF2F118001010C08736D64702E636F6D81020410"" + ""BF2F128001020C09736D6470322E636F6D81020420"") + ""9000""))); com.android.internal.telephony.uicc.euicc.EuiccNotification[] result = mEuiccCard.listNotifications(((EuiccNotification.Event.DELETE) | (EuiccNotification.Event.DISABLE))); assertArrayEquals(new com.android.internal.telephony.uicc.euicc.EuiccNotification[]{ new com.android.internal.telephony.uicc.euicc.EuiccNotification(1, ""smdp.com"", EuiccNotification.Event.DELETE, null), new com.android.internal.telephony.uicc.euicc.EuiccNotification(2, ""smdp2.com"", EuiccNotification.Event.DISABLE, null) }, result); verifyStoreData(channel, ""BF280481020430""); }",7fe6eb7bab967c831177d2ad2a5bbe0aab991f0d,"@org.junit.Test public void testListNotifications() { int channel = mockLogicalChannelResponses((""BF282BA029"" + ((""BF2F118001010C08736D64702E636F6D81020410"" + ""BF2F128001020C09736D6470322E636F6D81020420"") + ""9000""))); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<android.telephony.euicc.EuiccNotification[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.listNotifications(((android.telephony.euicc.EuiccNotification.EVENT_DELETE) | (android.telephony.euicc.EuiccNotification.EVENT_DISABLE)), resultCaptor, mHandler); resultCaptor.await(); assertArrayEquals(new android.telephony.euicc.EuiccNotification[]{ new android.telephony.euicc.EuiccNotification(1, ""smdp.com"", android.telephony.euicc.EuiccNotification.EVENT_DELETE, null), new android.telephony.euicc.EuiccNotification(2, ""smdp2.com"", android.telephony.euicc.EuiccNotification.EVENT_DISABLE, null) }, resultCaptor.result); verifyStoreData(channel, ""BF280481020430""); }",aeb3bdbae04abb68982e83cc169da30c03af5cac,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testSetNickname() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF29038001009000""); mEuiccCard.setNickname(""98760000000000543210"", ""new nickname""); verifyStoreData(channel, ""BF291A5A0A89670000000000452301900C6E6577206E69636B6E616D65""); }",da1bad6b43a7f8805b5813bf38d6608a4aca45b3,"@org.junit.Test public void testSetNickname() { int channel = mockLogicalChannelResponses(""BF29038001009000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<java.lang.Void> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.setNickname(""98760000000000543210"", ""new nickname"", resultCaptor, mHandler); resultCaptor.await(); assertUnexpectedException(resultCaptor.exception); verifyStoreData(channel, ""BF291A5A0A89670000000000452301900C6E6577206E69636B6E616D65""); }",3feac4499ceed4fe734ab9da498e450ef729b73e,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testGetEuiccChallenge() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF2E0580030102039000""); assertArrayEquals(new byte[]{ 1, 2, 3 }, mEuiccCard.getEuiccChallenge()); verifyStoreData(channel, ""BF2E00""); }",285167cd45e2acc311c6b279a4bb9af29cc9e8ce,"@org.junit.Test public void testGetEuiccChallenge() { int channel = mockLogicalChannelResponses(""BF2E0580030102039000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<byte[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.getEuiccChallenge(resultCaptor, mHandler); resultCaptor.await(); assertArrayEquals(new byte[]{ 1, 2, 3 }, resultCaptor.result); verifyStoreData(channel, ""BF2E00""); }",fb68b7f975ebda5d032f1b9c50dc16f93e7ced52,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testAuthenticateServer_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF38038101039000""); when(mMockTm.getDeviceId()).thenReturn(""987654321012345""); try { mEuiccCard.authenticateServer(""A1B2C3-X4Y5Z6"", com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(160).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(163).build()); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, (""BF382D"" + ((((((((""A000"" + ""A100"") + ""A200"") + ""A300"") + ""A023"") + ""800D4131423243332D583459355A36"") + ""A112800489674523"") + ""A100"") + ""82088967452301214305""))); throw e; } }",bc27818e55a54fc33cd418f141f242b7077a4ff8,"@org.junit.Test public void testAuthenticateServer_Error() { int channel = mockLogicalChannelResponses(""BF38038101039000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<byte[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.authenticateServer(""A1B2C3-X4Y5Z6"", com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(160).build().toBytes(), com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(161).build().toBytes(), com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(162).build().toBytes(), com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(163).build().toBytes(), resultCaptor, mHandler); resultCaptor.await(); assertEquals(3, ((com.android.internal.telephony.uicc.euicc.EuiccCardErrorException) (resultCaptor.exception)).getErrorCode()); verifyStoreData(channel, (""BF382D"" + ((((((((""A000"" + ""A100"") + ""A200"") + ""A300"") + ""A023"") + ""800D4131423243332D583459355A36"") + ""A112800489674523"") + ""A100"") + ""82088967452301214305""))); }",b88cfe2db754db1d2ef30b484eb29a67a06e9c04,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testResetMemory() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF34038001009000""); mEuiccCard.resetMemory(EuiccCard.ResetOption.DELETE_FIELD_LOADED_TEST_PROFILES); verifyStoreData(channel, ""BF340482020640""); }",8f764790008d009198ccea1eab1286433508149b,"@org.junit.Test public void testResetMemory() { int channel = mockLogicalChannelResponses(""BF34038001009000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<java.lang.Void> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.resetMemory(EuiccCardManager.RESET_OPTION_DELETE_FIELD_LOADED_TEST_PROFILES, resultCaptor, mHandler); resultCaptor.await(); assertUnexpectedException(resultCaptor.exception); verifyStoreData(channel, ""BF340482020640""); }",38cb30b5de0658b7c50bf1b18387e388a78338c1,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testGetEuiccInfo2() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF22030102039000""); assertEquals(""BF2203010203"", mEuiccCard.getEuiccInfo2().toHex()); verifyStoreData(channel, ""BF2200""); }",3ab479148415e676a0c4da7a9e864c706fc5e1c6,"@org.junit.Test public void testGetEuiccInfo2() { int channel = mockLogicalChannelResponses(""BF22030102039000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<byte[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.getEuiccInfo2(resultCaptor, mHandler); resultCaptor.await(); assertEquals(""BF2203010203"", com.android.internal.telephony.uicc.IccUtils.bytesToHexString(resultCaptor.result)); verifyStoreData(channel, ""BF2200""); }",ec6e885b978f9a3d145576166301971e7495abf0,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testListNotifications_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF28038101039000""); try { mEuiccCard.listNotifications(((EuiccNotification.Event.DELETE) | (EuiccNotification.Event.DISABLE))); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, ""BF280481020430""); throw e; } }",c5c1f444420bf0435b3998bc5df3c1f3b9d44c6e,"@org.junit.Test public void testListNotifications_Error() { int channel = mockLogicalChannelResponses(""BF28038101039000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<android.telephony.euicc.EuiccNotification[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.listNotifications(((android.telephony.euicc.EuiccNotification.EVENT_DELETE) | (android.telephony.euicc.EuiccNotification.EVENT_DISABLE)), resultCaptor, mHandler); resultCaptor.await(); assertEquals(3, ((com.android.internal.telephony.uicc.euicc.EuiccCardErrorException) (resultCaptor.exception)).getErrorCode()); verifyStoreData(channel, ""BF280481020430""); }",780f3fbacf3c556367361e1e623daf787c21f93a,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testGetRat() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses((""BF4347"" + ((((((((((((""A021"" + ""800206C0"") + ""A118"") + ""B70A800312F3458103010203"") + ""B70A800312F3458203040506"") + ""820108"") + ""A022"") + ""80020780"") + ""A118"") + ""B70A800312E3458103010203"") + ""B70A8003EEEE458203040506"") + ""82020780"") + ""9000""))); com.android.internal.telephony.uicc.euicc.EuiccRat rat = mEuiccCard.getRat(); assertEquals((-1), rat.findIndex(PolicyRule.DO_NOT_DELETE, new com.android.internal.telephony.uicc.euicc.OperatorId(new byte[]{ 18, ((byte) (243)), 69 }, null, null))); assertEquals(1, rat.findIndex(PolicyRule.DO_NOT_DISABLE, new com.android.internal.telephony.uicc.euicc.OperatorId(new byte[]{ 35, 103, 69 }, null, new byte[]{ 4, 5, 6 }))); assertFalse(rat.hasPolicyRuleFlag(0, EuiccRat.PolicyRuleFlag.CONSENT_REQUIRED)); assertTrue(rat.hasPolicyRuleFlag(1, EuiccRat.PolicyRuleFlag.CONSENT_REQUIRED)); verifyStoreData(channel, ""BF4300""); }",64d63f2891ff21a297026c1449cbc047c1170a57,"@org.junit.Test public void testGetRulesAuthTable() { int channel = mockLogicalChannelResponses((""BF4347"" + ((((((((((((""A021"" + ""800206C0"") + ""A118"") + ""B70A800312F3458103010203"") + ""B70A800312F3458203040506"") + ""820108"") + ""A022"") + ""80020780"") + ""A118"") + ""B70A800312E3458103010203"") + ""B70A8003EEEE458203040506"") + ""82020780"") + ""9000""))); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<android.telephony.euicc.EuiccRulesAuthTable> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.getRulesAuthTable(resultCaptor, mHandler); resultCaptor.await(); android.telephony.euicc.EuiccRulesAuthTable rat = resultCaptor.result; assertEquals((-1), rat.findIndex(EuiccProfileInfo.POLICY_RULE_DO_NOT_DELETE, new android.service.carrier.CarrierIdentifier(new byte[]{ 18, ((byte) (243)), 69 }, null, null))); assertEquals(1, rat.findIndex(EuiccProfileInfo.POLICY_RULE_DO_NOT_DISABLE, new android.service.carrier.CarrierIdentifier(new byte[]{ 35, 103, 69 }, null, ""040506""))); assertFalse(rat.hasPolicyRuleFlag(0, EuiccRulesAuthTable.POLICY_RULE_FLAG_CONSENT_REQUIRED)); assertTrue(rat.hasPolicyRuleFlag(1, EuiccRulesAuthTable.POLICY_RULE_FLAG_CONSENT_REQUIRED)); verifyStoreData(channel, ""BF4300""); }",b5724a80bd68ff76c1d281baaca5c6edd5725732,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testSwitchToProfile() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF2D14A012E3105A0A896700000000004523019F7001009000"", ""BF31038001009000""); com.android.internal.telephony.uicc.euicc.EuiccProfile profile = mEuiccCard.switchToProfile(""98760000000000543210"", true); assertEquals(profile.getIccid(), ""98760000000000543210""); verifyStoreData(channel, ""BF3111A00C5A0A896700000000004523018101FF""); }",eb3dd98709fa3e84b8c7a05510e5ad3f65f826c0,"@org.junit.Test public void testSwitchToProfile() { int channel = mockLogicalChannelResponses(""BF31038001009000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<java.lang.Void> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.switchToProfile(""98760000000000543210"", true, resultCaptor, mHandler); resultCaptor.await(); assertUnexpectedException(resultCaptor.exception); verifyStoreData(channel, ""BF3111A00C5A0A896700000000004523018101FF""); }",5df41de4a6060c4a4648d2989fbe48d1737e9178,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testLoadBoundProfilePackage_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""9000"", ""9000"", ""9000"", ""9000"", ""9000"", ""9000"", ""9000"", ""BF370ABF2707A205A1038101039000""); try { mEuiccCard.loadBoundProfilePackage(com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(48950).addChild(com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(48931)).addChild(com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(160).addChildAsBytes(135, new byte[]{ 1, 2, 3 })).addChild(com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(161).addChildAsBytes(136, new byte[]{ 4, 5, 6 })).addChild(com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(162)).addChild(com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(163).addChildAsBytes(134, new byte[]{ 7, 8, 9 }).addChildAsBytes(134, new byte[]{ 10, 11, 12 })).build()); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, ""BF361FBF2300""); verifyStoreData(channel, ""A0058703010203""); verifyStoreData(channel, ""A105""); verifyStoreData(channel, ""8803040506""); verifyStoreData(channel, ""A200""); verifyStoreData(channel, ""A30A""); verifyStoreData(channel, ""8603070809""); verifyStoreData(channel, ""86030A0B0C""); throw e; } }",38d43fd0da21113a022739560e9b091df9e578b1,"@org.junit.Test public void testLoadBoundProfilePackage_Error() { int channel = mockLogicalChannelResponses(""9000"", ""9000"", ""9000"", ""9000"", ""9000"", ""9000"", ""9000"", ""BF370ABF2707A205A1038101039000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<byte[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.loadBoundProfilePackage(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(48950).addChild(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(48931)).addChild(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(160).addChildAsBytes(135, new byte[]{ 1, 2, 3 })).addChild(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(161).addChildAsBytes(136, new byte[]{ 4, 5, 6 })).addChild(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(162)).addChild(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(163).addChildAsBytes(134, new byte[]{ 7, 8, 9 }).addChildAsBytes(134, new byte[]{ 10, 11, 12 })).build().toBytes(), resultCaptor, mHandler); resultCaptor.await(); assertEquals(3, ((com.android.internal.telephony.uicc.euicc.EuiccCardErrorException) (resultCaptor.exception)).getErrorCode()); verifyStoreData(channel, ""BF361FBF2300""); verifyStoreData(channel, ""A0058703010203""); verifyStoreData(channel, ""A105""); verifyStoreData(channel, ""8803040506""); verifyStoreData(channel, ""A200""); verifyStoreData(channel, ""A30A""); verifyStoreData(channel, ""8603070809""); verifyStoreData(channel, ""86030A0B0C""); }",c17a134bed125da21d9c06ae24e14b92c3ba97af,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testPrepareDownload() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF2102A0009000""); com.android.internal.telephony.uicc.euicc.Asn1Node result = mEuiccCard.prepareDownload(com.android.internal.telephony.uicc.euicc.Asn1Converter.hexToBytes(""4131423243332D583459355A36""), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(160).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(162).build()); assertEquals(""BF2102A000"", result.toHex()); verifyStoreData(channel, (""BF2115"" + (((""A000"" + ""A100"") + ""040D4131423243332D583459355A36"") + ""A200""))); }",136fa955f38c83d3f94b8e03e7f39c7e0b506785,"@org.junit.Test public void testPrepareDownload() { int channel = mockLogicalChannelResponses(""BF2102A0009000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<byte[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.prepareDownload(com.android.internal.telephony.uicc.IccUtils.hexStringToBytes(""4131423243332D583459355A36""), com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(160).build().toBytes(), com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(161).build().toBytes(), com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(162).build().toBytes(), resultCaptor, mHandler); resultCaptor.await(); assertEquals(""BF2102A000"", com.android.internal.telephony.uicc.IccUtils.bytesToHexString(resultCaptor.result)); verifyStoreData(channel, (""BF2115"" + (((""A000"" + ""A100"") + ""040D4131423243332D583459355A36"") + ""A200""))); }",1b4ec997825046d149032f09b35d9f2760b73c5f,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testDeleteProfile() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses((""BF2D26A024"" + ((""E3105A0A896700000000004523019F700100"" + ""E3105A0A896700000000004523029F700101"") + ""9000"")), ""BF33038001009000""); mEuiccCard.deleteProfile(""98760000000000543210""); verifyStoreData(channel, ""BF330C5A0A89670000000000452301""); }",17f5da81a46d661fa5aaa9a46015bd91ed057e9f,"@org.junit.Test public void testDeleteProfile() { int channel = mockLogicalChannelResponses(""BF33038001009000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<java.lang.Void> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.deleteProfile(""98760000000000543210"", resultCaptor, mHandler); resultCaptor.await(); assertUnexpectedException(resultCaptor.exception); verifyStoreData(channel, ""BF330C5A0A89670000000000452301""); }",e91d80d66fa77ede97842801c223c4301177596e,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testRetrieveNotification() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses((""BF2B18A016"" + (""3014BF2F118001010C08736D64702E636F6D81020410"" + ""9000""))); com.android.internal.telephony.uicc.euicc.EuiccNotification result = mEuiccCard.retrieveNotification(5); assertEquals(new com.android.internal.telephony.uicc.euicc.EuiccNotification(1, ""smdp.com"", EuiccNotification.Event.DELETE, com.android.internal.telephony.uicc.euicc.Asn1Converter.hexToBytes(""3014BF2F118001010C08736D64702E636F6D81020410"")), result); verifyStoreData(channel, ""BF2B05A003800105""); }",12cc99fd962f0cdd995a700d611833e5f64918db,"@org.junit.Test public void testRetrieveNotification() { int channel = mockLogicalChannelResponses((""BF2B18A016"" + (""3014BF2F118001010C08736D64702E636F6D81020410"" + ""9000""))); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<android.telephony.euicc.EuiccNotification> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.retrieveNotification(5, resultCaptor, mHandler); resultCaptor.await(); assertEquals(new android.telephony.euicc.EuiccNotification(1, ""smdp.com"", android.telephony.euicc.EuiccNotification.EVENT_DELETE, com.android.internal.telephony.uicc.IccUtils.hexStringToBytes(""3014BF2F118001010C08736D64702E636F6D81020410"")), resultCaptor.result); verifyStoreData(channel, ""BF2B05A003800105""); }",535ab6f5d2ce85ee5ff07b2ca363b52e460a1ca1,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testGetEid() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF3E065A041A2B3C4D9000""); assertEquals(""1A2B3C4D"", mEuiccCard.getEid()); verifyStoreData(channel, ""BF3E035C015A""); }",5a5b6e5e82192832a9e5ad2e30c789086f828d19,"@org.junit.Test public void testGetEid() { int channel = mockLogicalChannelResponses(""BF3E065A041A2B3C4D9000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<java.lang.String> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.getEid(resultCaptor, mHandler); resultCaptor.await(); assertEquals(""1A2B3C4D"", resultCaptor.result); verifyStoreData(channel, ""BF3E035C015A""); }",77bf65d7054c2133b6b45a321702bcd0df9cc36f,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testPrepareDownload_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF2105A1030201039000""); try { mEuiccCard.prepareDownload(com.android.internal.telephony.uicc.euicc.Asn1Converter.hexToBytes(""4131423243332D583459355A36""), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(160).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(162).build()); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, (""BF2115"" + (((""A000"" + ""A100"") + ""040D4131423243332D583459355A36"") + ""A200""))); throw e; } }",40d05494ccd2c0171892e0468bfbc07ffe5ca98c,"@org.junit.Test public void testPrepareDownload_Error() { int channel = mockLogicalChannelResponses(""BF2105A1030201039000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<byte[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.prepareDownload(com.android.internal.telephony.uicc.IccUtils.hexStringToBytes(""4131423243332D583459355A36""), com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(160).build().toBytes(), com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(161).build().toBytes(), com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(162).build().toBytes(), resultCaptor, mHandler); resultCaptor.await(); assertEquals(3, ((com.android.internal.telephony.uicc.euicc.EuiccCardErrorException) (resultCaptor.exception)).getErrorCode()); verifyStoreData(channel, (""BF2115"" + (((""A000"" + ""A100"") + ""040D4131423243332D583459355A36"") + ""A200""))); }",e0e0a11436c35db8610e479a747cfafbd08c693d,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testSetDefaultSmdpAddress() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF3C148008534D44502E434F4D8108736D64732E636F6D9000"", ""BF3F038001009000""); assertEquals(""SMDP.COM"", mEuiccCard.getDefaultSmdpAddress()); verifyStoreData(channel, ""BF3C00""); mEuiccCard.setDefaultSmdpAddress(""smdp.gsma.com""); assertEquals(""smdp.gsma.com"", mEuiccCard.getDefaultSmdpAddress()); verifyStoreData(channel, ""BF3F0F800D736D64702E67736D612E636F6D""); }",1bb0bb8f48e68c7f0dc7457418ea535162846d73,"@org.junit.Test public void testSetDefaultSmdpAddress() { int channel = mockLogicalChannelResponses(""BF3F038001009000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<java.lang.Void> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.setDefaultSmdpAddress(""smdp.gsma.com"", resultCaptor, mHandler); resultCaptor.await(); assertUnexpectedException(resultCaptor.exception); verifyStoreData(channel, ""BF3F0F800D736D64702E67736D612E636F6D""); }",167b038aa75c5a080f36f1e2bd5c4bc261673525,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testAuthenticateServer() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF3802A0009000""); when(mMockTm.getDeviceId()).thenReturn(""987654321012345""); com.android.internal.telephony.uicc.euicc.Asn1Node result = mEuiccCard.authenticateServer(""A1B2C3-X4Y5Z6"", com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(160).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(163).build()); assertEquals(""BF3802A000"", result.toHex()); verifyStoreData(channel, (""BF382D"" + ((((((((""A000"" + ""A100"") + ""A200"") + ""A300"") + ""A023"") + ""800D4131423243332D583459355A36"") + ""A112800489674523"") + ""A100"") + ""82088967452301214305""))); }",3c0d47cc30a28786b9fca085a69cfbc5bbe0f504,"@org.junit.Test public void testAuthenticateServer() { int channel = mockLogicalChannelResponses(""BF3802A0009000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<byte[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.authenticateServer(""A1B2C3-X4Y5Z6"", com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(160).build().toBytes(), com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(161).build().toBytes(), com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(162).build().toBytes(), com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(163).build().toBytes(), resultCaptor, mHandler); resultCaptor.await(); assertUnexpectedException(resultCaptor.exception); assertEquals(""BF3802A000"", com.android.internal.telephony.uicc.IccUtils.bytesToHexString(resultCaptor.result)); verifyStoreData(channel, (""BF382D"" + ((((((((""A000"" + ""A100"") + ""A200"") + ""A300"") + ""A023"") + ""800D4131423243332D583459355A36"") + ""A112800489674523"") + ""A100"") + ""82088967452301214305""))); }",4535850d1ca85816e41c304156cbfa2837cd85be,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testGetEuiccInfo1() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF20030102039000""); assertEquals(""BF2003010203"", mEuiccCard.getEuiccInfo1().toHex()); verifyStoreData(channel, ""BF2000""); }",d872e4add04d562f85f6c90d7a5222379e84c2fe,"@org.junit.Test public void testGetEuiccInfo1() { int channel = mockLogicalChannelResponses(""BF20030102039000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<byte[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.getEuiccInfo1(resultCaptor, mHandler); resultCaptor.await(); assertEquals(""BF2003010203"", com.android.internal.telephony.uicc.IccUtils.bytesToHexString(resultCaptor.result)); verifyStoreData(channel, ""BF2000""); }",dca50d614898afde9bda199e676017bbaa05b42b,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testLoadBoundProfilePackage() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""9000"", ""9000"", ""9000"", ""9000"", ""9000"", ""9000"", ""9000"", ""BF37009000""); com.android.internal.telephony.uicc.euicc.Asn1Node result = mEuiccCard.loadBoundProfilePackage(com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(48950).addChild(com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(48931)).addChild(com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(160).addChildAsBytes(135, new byte[]{ 1, 2, 3 })).addChild(com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(161).addChildAsBytes(136, new byte[]{ 4, 5, 6 })).addChild(com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(162)).addChild(com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(163).addChildAsBytes(134, new byte[]{ 7, 8, 9 }).addChildAsBytes(134, new byte[]{ 10, 11, 12 })).build()); assertEquals(""BF3700"", result.toHex()); verifyStoreData(channel, ""BF361FBF2300""); verifyStoreData(channel, ""A0058703010203""); verifyStoreData(channel, ""A105""); verifyStoreData(channel, ""8803040506""); verifyStoreData(channel, ""A200""); verifyStoreData(channel, ""A30A""); verifyStoreData(channel, ""8603070809""); verifyStoreData(channel, ""86030A0B0C""); }",359e27fa4b54a73af042bfe88e1ede5c69cf6a03,"@org.junit.Test public void testLoadBoundProfilePackage() { int channel = mockLogicalChannelResponses(""9000"", ""9000"", ""9000"", ""9000"", ""9000"", ""9000"", ""9000"", ""BF37009000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<byte[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.loadBoundProfilePackage(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(48950).addChild(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(48931)).addChild(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(160).addChildAsBytes(135, new byte[]{ 1, 2, 3 })).addChild(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(161).addChildAsBytes(136, new byte[]{ 4, 5, 6 })).addChild(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(162)).addChild(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(163).addChildAsBytes(134, new byte[]{ 7, 8, 9 }).addChildAsBytes(134, new byte[]{ 10, 11, 12 })).build().toBytes(), resultCaptor, mHandler); resultCaptor.await(); assertEquals(""BF3700"", com.android.internal.telephony.uicc.IccUtils.bytesToHexString(resultCaptor.result)); verifyStoreData(channel, ""BF361FBF2300""); verifyStoreData(channel, ""A0058703010203""); verifyStoreData(channel, ""A105""); verifyStoreData(channel, ""8803040506""); verifyStoreData(channel, ""A200""); verifyStoreData(channel, ""A30A""); verifyStoreData(channel, ""8603070809""); verifyStoreData(channel, ""86030A0B0C""); }",664d0944801174a06fd815480ac23991ed9c3a58,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testRetrieveNotificationList() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses((""BF2B2FA02D"" + ((""3014BF2F118001010C08736D64702E636F6D81020410"" + ""3015BF2F128001020C09736D6470322E636F6D81020420"") + ""9000""))); com.android.internal.telephony.uicc.euicc.EuiccNotification[] result = mEuiccCard.retrieveNotificationList(((EuiccNotification.Event.DELETE) | (EuiccNotification.Event.DISABLE))); assertArrayEquals(new com.android.internal.telephony.uicc.euicc.EuiccNotification[]{ new com.android.internal.telephony.uicc.euicc.EuiccNotification(1, ""smdp.com"", EuiccNotification.Event.DELETE, com.android.internal.telephony.uicc.euicc.Asn1Converter.hexToBytes(""3014BF2F118001010C08736D64702E636F6D81020410"")), new com.android.internal.telephony.uicc.euicc.EuiccNotification(2, ""smdp2.com"", EuiccNotification.Event.DISABLE, com.android.internal.telephony.uicc.euicc.Asn1Converter.hexToBytes(""3015BF2F128001020C09736D6470322E636F6D81020420"")) }, result); verifyStoreData(channel, ""BF2B06A00481020430""); }",7b097b61464247d0443538ae11e92dfd8900834f,"@org.junit.Test public void testRetrieveNotificationList() { int channel = mockLogicalChannelResponses((""BF2B2FA02D"" + ((""3014BF2F118001010C08736D64702E636F6D81020410"" + ""3015BF2F128001020C09736D6470322E636F6D81020420"") + ""9000""))); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<android.telephony.euicc.EuiccNotification[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.retrieveNotificationList(((android.telephony.euicc.EuiccNotification.EVENT_DELETE) | (android.telephony.euicc.EuiccNotification.EVENT_DISABLE)), resultCaptor, mHandler); resultCaptor.await(); assertArrayEquals(new android.telephony.euicc.EuiccNotification[]{ new android.telephony.euicc.EuiccNotification(1, ""smdp.com"", android.telephony.euicc.EuiccNotification.EVENT_DELETE, com.android.internal.telephony.uicc.IccUtils.hexStringToBytes(""3014BF2F118001010C08736D64702E636F6D81020410"")), new android.telephony.euicc.EuiccNotification(2, ""smdp2.com"", android.telephony.euicc.EuiccNotification.EVENT_DISABLE, com.android.internal.telephony.uicc.IccUtils.hexStringToBytes(""3015BF2F128001020C09736D6470322E636F6D81020420"")) }, resultCaptor.result); verifyStoreData(channel, ""BF2B06A00481020430""); }",a7893fb48aba084476c4fedf3bb922512392854a,2018-01-25 05:47:02,8
591196,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,"public void removeNotificationFromList(int seqNumber, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) { }",07c8d5746cbc3f85a1babc1de5046519c6c374e1,"public void removeNotificationFromList(int seqNumber, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) { java.lang.String command = com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_REMOVE_NOTIFICATION_FROM_LIST).addChildAsInteger(com.android.internal.telephony.uicc.euicc.TAG_CTX_0, seqNumber).build().toHex(); java.lang.String response; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(command); } int result = com.android.internal.telephony.uicc.euicc.EuiccCard.parseSimpleResult(response); switch (result) { case RemoveNotificationFromListCode.OK : case RemoveNotificationFromListCode.NOTHING_TO_DELETE : break; default : throw new com.android.internal.telephony.uicc.euicc.EuiccCardErrorException(OperationCode.REMOVE_NOTIFICATION_FROM_LIST, result); } }",4e3732b5c5e0fa63819a9a0935ff0fb5e51253a5,"public void removeNotificationFromList(int seqNumber, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) { sendApdu(newRequestProvider((com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder requestBuilder) -> requestBuilder.addStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(Tags.TAG_REMOVE_NOTIFICATION_FROM_LIST).addChildAsInteger(Tags.TAG_CTX_0, seqNumber).build().toHex())), (byte[] response) -> { int result = parseSimpleResult(response); if ((result != (com.android.internal.telephony.uicc.euicc.EuiccCard.CODE_OK)) && (result != (com.android.internal.telephony.uicc.euicc.EuiccCard.CODE_NOTHING_TO_DELETE))) { throw new com.android.internal.telephony.uicc.euicc.EuiccCardErrorException(EuiccCardErrorException.OPERATION_REMOVE_NOTIFICATION_FROM_LIST, result); } return null; }, callback, handler); }",b9ab00f993a36bb4f6a555be54b2b6fa9efff65c,2018-01-25 05:47:02,8
591196,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,"public void resetMemory(@android.telephony.euicc.EuiccCardManager.ResetOption int options, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) { }",9e71a865955cb1645c68c82f22fe66965371c4e6,"public void resetMemory(@android.telephony.euicc.EuiccCardManager.ResetOption int options, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) { java.lang.String command = com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_EUICC_MEMORY_RESET).addChildAsBits(com.android.internal.telephony.uicc.euicc.TAG_CTX_2, options).build().toHex(); java.lang.String response; int result; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(command); result = com.android.internal.telephony.uicc.euicc.EuiccCard.parseSimpleResult(response); } catch (com.android.internal.telephony.uicc.euicc.UiccChannelException e) { if ((e.getApduStatus()) == (com.android.internal.telephony.uicc.euicc.EuiccCard.APDU_ERROR_SIM_REFRESH)) { com.android.internal.telephony.uicc.euicc.EuiccLog.get().i(""Sim is refreshed after resetting memory, no response got.""); result = ResetMemoryCode.OK; } else { throw e; } } switch (result) { case ResetMemoryCode.OK : mProfiles = null; mEnabledIccid = null; mDefaultSmdpAddress = null; break; case ResetMemoryCode.NOTHING_TO_DELETE : break; default : throw new com.android.internal.telephony.uicc.euicc.EuiccCardErrorException(OperationCode.RESET_MEMORY, result); } }",2541dd255a791dfa13989c93ec9ad0598a289815,"public void resetMemory(@android.telephony.euicc.EuiccCardManager.ResetOption int options, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) { sendApduWithSimResetErrorWorkaround(newRequestProvider((com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder requestBuilder) -> requestBuilder.addStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(Tags.TAG_EUICC_MEMORY_RESET).addChildAsBits(Tags.TAG_CTX_2, options).build().toHex())), (byte[] response) -> { int result = parseSimpleResult(response); if ((result != (com.android.internal.telephony.uicc.euicc.EuiccCard.CODE_OK)) && (result != (com.android.internal.telephony.uicc.euicc.EuiccCard.CODE_NOTHING_TO_DELETE))) { throw new com.android.internal.telephony.uicc.euicc.EuiccCardErrorException(EuiccCardErrorException.OPERATION_RESET_MEMORY, result); } return null; }, callback, handler); }",33a59b850e9afe6106b2b95bf4a52b1bf2e43efc,2018-01-25 05:47:02,8
591196,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,"public void getSmdsAddress(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { }",ee0d372138e9da62f6c2a8933006a087431c454d,"public void getSmdsAddress(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { if ((mSmdsAddress) == null) { getDefaultSmdpAddress(); } return mSmdsAddress; }",1d9c1e3253b587e946caa53a3ddf45f6916db01c,"public void getSmdsAddress(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { sendApdu(newRequestProvider((com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder requestBuilder) -> requestBuilder.addStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(Tags.TAG_GET_CONFIGURED_ADDRESSES).build().toHex())), (byte[] response) -> parseResponse(response).getChild(Tags.TAG_CTX_1).asString(), callback, handler); }",8ed86d4e6f5ee35a540355cb4f81962f9a2f4747,2018-01-25 05:47:02,8
591196,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,"public void getEuiccChallenge(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }",968595569f32aaa396d965c55b591fe0c83d3ccb,"public void getEuiccChallenge(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { java.lang.String response; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_GET_EUICC_CHALLENGE).build().toHex()); } com.android.internal.telephony.uicc.asn1.Asn1Node node = com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponse(response); try { return node.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_0).asBytes(); } catch (com.android.internal.telephony.uicc.asn1.TagNotFoundException | com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException e) { throw new com.android.internal.telephony.uicc.euicc.EuiccCardInvalidResponseException((""Cannot parse response: "" + response), e); } }",d9224aefe95bc201d9275fabd6e701186ad7c698,"public void getEuiccChallenge(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { sendApdu(newRequestProvider((com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder requestBuilder) -> requestBuilder.addStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(Tags.TAG_GET_EUICC_CHALLENGE).build().toHex())), (byte[] response) -> parseResponse(response).getChild(Tags.TAG_CTX_0).asBytes(), callback, handler); }",0acd887975ce285ae2572a43e30b5523b7f26cdc,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testCancelSession() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF41009000""); com.android.internal.telephony.uicc.euicc.Asn1Node result = mEuiccCard.cancelSession(com.android.internal.telephony.uicc.euicc.Asn1Converter.hexToBytes(""A1B2C3""), EuiccCard.CancelReason.POSTPONED); assertEquals(""BF4100"", result.toHex()); verifyStoreData(channel, ""BF41088003A1B2C3810101""); }",ad417074228357e934aca9eaa1c3d1fad0ce8eb2,"@org.junit.Test public void testCancelSession() { int channel = mockLogicalChannelResponses(""BF41009000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<byte[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.cancelSession(com.android.internal.telephony.uicc.IccUtils.hexStringToBytes(""A1B2C3""), EuiccCardManager.CANCEL_REASON_POSTPONED, resultCaptor, mHandler); resultCaptor.await(); assertEquals(""BF4100"", com.android.internal.telephony.uicc.IccUtils.bytesToHexString(resultCaptor.result)); verifyStoreData(channel, ""BF41088003A1B2C3810101""); }",3c4e7d564a34ac3293887cd5ae2b34df6134127d,2018-01-25 05:47:02,8
591196,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,"public void cancelSession(byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }",244257c515a647496eeb9982124baf0593751c7b,"public void cancelSession(byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { java.lang.String command = com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_CANCEL_SESSION).addChildAsBytes(com.android.internal.telephony.uicc.euicc.TAG_CTX_0, transactionId).addChildAsInteger(com.android.internal.telephony.uicc.euicc.TAG_CTX_1, reason).build().toHex(); java.lang.String response; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(command); } com.android.internal.telephony.uicc.asn1.Asn1Node root = com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponse(response); try { if (root.hasChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_1)) { throw new com.android.internal.telephony.uicc.euicc.EuiccCardErrorException(OperationCode.CANCEL_SESSION, root.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_1).asInteger()); } } catch (com.android.internal.telephony.uicc.asn1.TagNotFoundException | com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException e) { throw new com.android.internal.telephony.uicc.euicc.EuiccCardInvalidResponseException((""Cannot parse response: "" + response), e); } return root; }",108aea16616fb13d39e8c38dd464a3c117fe4098,"public void cancelSession(byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { sendApdu(newRequestProvider((com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder requestBuilder) -> requestBuilder.addStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(Tags.TAG_CANCEL_SESSION).addChildAsBytes(Tags.TAG_CTX_0, transactionId).addChildAsInteger(Tags.TAG_CTX_1, reason).build().toHex())), (byte[] response) -> parseResponseAndCheckSimpleError(response, EuiccCardErrorException.OPERATION_CANCEL_SESSION).toBytes(), callback, handler); }",3ed2a6caa5b5cd30b1f18341257ef3afbef5827b,2018-01-25 05:47:02,8
591196,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,"public void getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }",54e0b17fa407570f91f2ce845b068fd197ed0428,"public void getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.Asn1Node> callback, android.os.Handler handler) { java.lang.String response; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_GET_EUICC_INFO_1).build().toHex()); } return com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponse(response); }",9100cf37b3a0c8099de91f157e63b1cfd290fa6d,"public void getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { sendApdu(newRequestProvider((com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder requestBuilder) -> requestBuilder.addStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(Tags.TAG_GET_EUICC_INFO_1).build().toHex())), ( response) -> response, callback, handler); }",1d7b5753c5c7ba1b5b1f40151469252e92920609,2018-01-25 05:47:02,8
591196,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,"public void setDefaultSmdpAddress(java.lang.String defaultSmdpAddress, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) { }",cb7a4b88e65b22cbf5c86be772f49a9ddeeffb06,"public void setDefaultSmdpAddress(java.lang.String defaultSmdpAddress, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) { java.lang.String command = com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_SET_DEFAULT_SMDP_ADDRESS).addChildAsString(com.android.internal.telephony.uicc.euicc.TAG_CTX_0, defaultSmdpAddress).build().toHex(); java.lang.String response; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(command); } int result = com.android.internal.telephony.uicc.euicc.EuiccCard.parseSimpleResult(response); switch (result) { case SetDefaultSmdpAddressCode.OK : break; default : throw new com.android.internal.telephony.uicc.euicc.EuiccCardErrorException(OperationCode.SET_DEFAULT_SMDP_ADDRESS, result); } mDefaultSmdpAddress = defaultSmdpAddress; }",c9d2b8f5c2f76418b88d79591fc95adbd47802c9,"public void setDefaultSmdpAddress(java.lang.String defaultSmdpAddress, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) { sendApdu(newRequestProvider((com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder requestBuilder) -> requestBuilder.addStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(Tags.TAG_SET_DEFAULT_SMDP_ADDRESS).addChildAsString(Tags.TAG_CTX_0, defaultSmdpAddress).build().toHex())), (byte[] response) -> { int result = parseSimpleResult(response); if (result != (com.android.internal.telephony.uicc.euicc.EuiccCard.CODE_OK)) { throw new com.android.internal.telephony.uicc.euicc.EuiccCardErrorException(EuiccCardErrorException.OPERATION_SET_DEFAULT_SMDP_ADDRESS, result); } return null; }, callback, handler); }",f63d94cc83db65edc0f19751e92a519b8c23ed44,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testDeleteProfile_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses((""BF2D26A024"" + ((""E3105A0A896700000000004523019F700100"" + ""E3105A0A896700000000004523029F700101"") + ""9000"")), ""BF33038001039000""); try { mEuiccCard.deleteProfile(""98760000000000543210""); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, ""BF330C5A0A89670000000000452301""); throw e; } }",8043f3ab9a5bade2cae735021d8403388642d5e3,"@org.junit.Test public void testDeleteProfile_Error() { int channel = mockLogicalChannelResponses(""BF33038001039000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<java.lang.Void> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.deleteProfile(""98760000000000543210"", resultCaptor, mHandler); resultCaptor.await(); assertEquals(3, ((com.android.internal.telephony.uicc.euicc.EuiccCardErrorException) (resultCaptor.exception)).getErrorCode()); verifyStoreData(channel, ""BF330C5A0A89670000000000452301""); }",f790df75ce88276eeaa8170a1e5b7875b4edd230,2018-01-25 05:47:02,8
591196,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,"public void getDefaultSmdpAddress(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { }",e6fe51db545da656326594b25bbaa21c632f28d0,"public void getDefaultSmdpAddress(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { if (((mDefaultSmdpAddress) == null) || ((mSmdsAddress) == null)) { java.lang.String response; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_GET_CONFIGURED_ADDRESSES).build().toHex()); } try { com.android.internal.telephony.uicc.asn1.Asn1Node root = com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponse(response); mDefaultSmdpAddress = root.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_0).asString(); mSmdsAddress = root.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_1).asString(); } catch (com.android.internal.telephony.uicc.asn1.TagNotFoundException | com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException e) { throw new com.android.internal.telephony.uicc.euicc.EuiccCardInvalidResponseException((""Cannot parse response: "" + response), e); } } return mDefaultSmdpAddress; }",e750324cdde7a06802831eae2c6d9e04ac7989a7,"public void getDefaultSmdpAddress(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { sendApdu(newRequestProvider((com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder requestBuilder) -> requestBuilder.addStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(Tags.TAG_GET_CONFIGURED_ADDRESSES).build().toHex())), (byte[] response) -> parseResponse(response).getChild(Tags.TAG_CTX_0).asString(), callback, handler); }",7c0115e41a7f9a3ed88cf59c96b3d189a255b65c,2018-01-25 05:47:02,8
591196,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,"public void getEuiccInfo2(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }",8c90a62e744a3dc3bb1124f0cd1418da58054701,"public void getEuiccInfo2(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.Asn1Node> callback, android.os.Handler handler) { java.lang.String response; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_GET_EUICC_INFO_2).build().toHex()); } return com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponse(response); }",c6dcc3f3c57c4b924d500bc6f26521093d2311e4,"public void getEuiccInfo2(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { sendApdu(newRequestProvider((com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder requestBuilder) -> requestBuilder.addStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(Tags.TAG_GET_EUICC_INFO_2).build().toHex())), ( response) -> response, callback, handler); }",1d2113ae5c6dc5e4f4b40d6fc74f2f3996234952,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testRetrieveNotificationList_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF2B038101039000""); try { mEuiccCard.retrieveNotificationList(((EuiccNotification.Event.DELETE) | (EuiccNotification.Event.DISABLE))); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, ""BF2B06A00481020430""); throw e; } }",a02b1fae546be19a131db2c3f05ac5756635f3d2,"@org.junit.Test public void testRetrieveNotificationList_Error() { int channel = mockLogicalChannelResponses(""BF2B038101039000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<android.telephony.euicc.EuiccNotification[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.retrieveNotificationList(((android.telephony.euicc.EuiccNotification.EVENT_DELETE) | (android.telephony.euicc.EuiccNotification.EVENT_DISABLE)), resultCaptor, mHandler); resultCaptor.await(); assertEquals(3, ((com.android.internal.telephony.uicc.euicc.EuiccCardErrorException) (resultCaptor.exception)).getErrorCode()); verifyStoreData(channel, ""BF2B06A00481020430""); }",95e415d667df74e210078828abd559adfaf0985e,2018-01-25 05:47:02,8
591196,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,"public void getEid(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { }",5a483a3fb892c8a59dcf0d1ba29a6f2964b957f9,"public void getEid(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { if ((mEid) == null) { java.lang.String response; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { java.lang.String command = com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_GET_EID).addChildAsBytes(com.android.internal.telephony.uicc.euicc.TAG_TAG_LIST, new byte[]{ TAG_EID }).build().toHex(); response = ch.execStoreData(command); } com.android.internal.telephony.uicc.asn1.Asn1Node eidAsn1Node = com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponse(response); try { mEid = com.android.internal.telephony.uicc.euicc.Asn1Converter.bytesToHex(eidAsn1Node.getChild(com.android.internal.telephony.uicc.euicc.TAG_EID).asBytes()); } catch (com.android.internal.telephony.uicc.asn1.TagNotFoundException | com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException e) { throw new com.android.internal.telephony.uicc.euicc.EuiccCardInvalidResponseException((""Cannot get EID: response = "" + response), e); } } return mEid; }",607c1dfdf843ee9a3113fbf1b915e8b407607f52,"public void getEid(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { if ((mEid) != null) { com.android.internal.telephony.uicc.euicc.async.AsyncResultHelper.returnResult(mEid, callback, handler); return; } sendApdu(newRequestProvider((com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder requestBuilder) -> requestBuilder.addStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(Tags.TAG_GET_EID).addChildAsBytes(Tags.TAG_TAG_LIST, new byte[]{ Tags.TAG_EID }).build().toHex())), (byte[] response) -> { java.lang.String eid = com.android.internal.telephony.uicc.IccUtils.bytesToHexString(parseResponse(response).getChild(Tags.TAG_EID).asBytes()); synchronized(mLock) { mEid = eid; } return eid; }, callback, handler); }",77ec967d47f40064fa8b142349de3957f8abb0a4,2018-01-25 05:47:02,8
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testGetDefaultSmdpAddress() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF3C148008534D44502E434F4D8108736D64732E636F6D9000""); assertEquals(""SMDP.COM"", mEuiccCard.getDefaultSmdpAddress()); verifyStoreData(channel, ""BF3C00""); }",df411cfb4aa97d99da7d41f8c1ffa28523e911fe,"@org.junit.Test public void testGetDefaultSmdpAddress() { int channel = mockLogicalChannelResponses(""BF3C148008534D44502E434F4D8108736D64732E636F6D9000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<java.lang.String> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.getDefaultSmdpAddress(resultCaptor, mHandler); resultCaptor.await(); assertEquals(""SMDP.COM"", resultCaptor.result); verifyStoreData(channel, ""BF3C00""); }",e769b89ad4318ac489fe8f0682487806995ac93d,2018-01-25 05:47:02,8
559360,core_java_android_net_IpSecTransform.java,"public void close() { android.util.Log.d(android.net.IpSecTransform.TAG, (""Removing Transform with Id "" + (mResourceId))); if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { mCloseGuard.close(); return; } try { android.net.IIpSecService svc = getIpSecService(); svc.deleteTransportModeTransform(mResourceId); stopKeepalive(); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } finally { mResourceId = android.net.IpSecManager.INVALID_RESOURCE_ID; mCloseGuard.close(); } }",aa846d0568e67b5fb4c8d7c1cb65d6fff961acef,"public void close() { android.util.Log.d(android.net.IpSecTransform.TAG, (""Removing Transform with Id "" + (mResourceId))); if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { mCloseGuard.close(); return; } try { android.net.IIpSecService svc = getIpSecService(); synchronized(mKeepaliveCallback) { if ((mKeepalive) != null) { stopNattKeepalive(); } } svc.deleteTransportModeTransform(mResourceId); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } finally { mResourceId = android.net.IpSecManager.INVALID_RESOURCE_ID; mCloseGuard.close(); } }",0b4f25fbc7a7c0de8b7c748ae99d73260185a206,"public void close() { android.util.Log.d(android.net.IpSecTransform.TAG, (""Removing Transform with Id "" + (mResourceId))); if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { mCloseGuard.close(); return; } try { android.net.IIpSecService svc = getIpSecService(); svc.deleteTransform(mResourceId); stopNattKeepalive(); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } finally { mResourceId = android.net.IpSecManager.INVALID_RESOURCE_ID; mCloseGuard.close(); } }",8b1386a332a6dcbaea3a18914d150b3ddc709ed3,2018-01-25 05:50:32,9
559360,core_java_android_net_IpSecTransform.java,@java.lang.Override public void onError(int error) { synchronized(mKeepaliveSyncLock) { mKeepaliveStatus = error; mKeepaliveSyncLock.notifyAll(); } },d596f104f42ae3d382dfb1e80819678457543d45,@java.lang.Override public void onError(int error) { synchronized(this) { mKeepalive = null; } if ((mUserKeepaliveCallback) != null) mUserKeepaliveCallback.onError(error); },a7694de4ab85a360420b464e4e14748e1ca2fa0f,@java.lang.Override public void onError(int error) { synchronized(this) { mKeepalive = null; mCallbackHandler.post(() -> android.net.mUserKeepaliveCallback.onError(error)); } },67766c946a2175002e923aaf52135bf399c1cfa3,2018-01-25 05:50:32,9
559360,core_java_android_net_IpSecTransform.java,void stopKeepalive() { return; },6649216a07622141ea185fb0865342f3fecc51ad,"void stopNattKeepalive() { synchronized(mKeepaliveCallback) { if ((mKeepalive) == null) { android.util.Log.e(android.net.IpSecTransform.TAG, ""No active keepalive to stop""); return; } mKeepalive.stop(); } }",49323e0470e672d9434efb18659d9eb443cfae9a,"@android.annotation.SystemApi public void stopNattKeepalive() { synchronized(mKeepaliveCallback) { if ((mKeepalive) == null) { android.util.Log.e(android.net.IpSecTransform.TAG, ""No active keepalive to stop""); return; } mKeepalive.stop(); } }",084783b250601b176294bf576efe056beb435a88,2018-01-25 05:50:32,9
559360,core_java_android_net_IpSecTransform.java,@java.lang.Override public void onStarted() { synchronized(mKeepaliveSyncLock) { mKeepaliveStatus = ConnectivityManager.PacketKeepalive.SUCCESS; mKeepaliveSyncLock.notifyAll(); } },f2345e5ca4dea672b4c464d96b07da4cf6657fb4,@java.lang.Override public void onStarted() { if ((mUserKeepaliveCallback) != null) mUserKeepaliveCallback.onStarted(); },e63878172b2cdcc7429068ed8b65179dca266493,@java.lang.Override public void onStarted() { synchronized(this) { mCallbackHandler.post(() -> android.net.mUserKeepaliveCallback.onStarted()); } },ce7ea9464865fbcc6a970b89957bd6e8f4241009,2018-01-25 05:50:32,9
559360,core_java_android_net_IpSecTransform.java,@java.lang.Override public void onStopped() { synchronized(mKeepaliveSyncLock) { mKeepaliveStatus = ConnectivityManager.PacketKeepalive.NO_KEEPALIVE; mKeepaliveSyncLock.notifyAll(); } },7e0abad0097ed564bc75d2186eb0fe3e66a03c80,@java.lang.Override public void onStopped() { synchronized(this) { mKeepalive = null; } if ((mUserKeepaliveCallback) != null) mUserKeepaliveCallback.onStopped(); },2841b7cbeaef7e63da5d85aca1c15d9c3dc90a3b,@java.lang.Override public void onStopped() { synchronized(this) { mKeepalive = null; mCallbackHandler.post(() -> android.net.mUserKeepaliveCallback.onStopped()); } },bb0d3c167a016e37de47e426a3c4cd5b8c5a6485,2018-01-25 05:50:32,9
559360,core_java_android_net_IpSecTransform.java,"void startKeepalive(android.content.Context c) { if ((mConfig.getNattKeepaliveInterval()) != 0) { android.util.Log.wtf(android.net.IpSecTransform.TAG, ""Keepalive not yet supported.""); } }",417ead8d910070e2ccf0ca5945d1a76aefd14d59,"void startNattKeepalive(java.io.FileDescriptor socket, android.net.ConnectivityManager.PacketKeepaliveCallback userCallback, int intervalSeconds) throws java.io.IOException { if ((mConfig.getMode()) != (android.net.IpSecTransform.MODE_TRANSPORT)) { throw new java.lang.IllegalArgumentException(""Socket keepalive cannot be used in Tunnel mode""); } if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { throw new java.lang.IllegalStateException(""Packet keepalive cannot be started for an inactive transform""); } synchronized(mKeepaliveCallback) { if ((mKeepaliveCallback) != null) { throw new java.lang.IllegalStateException(""Keepalive already active""); } java.net.InetSocketAddress localAddr = null; try { localAddr = ((java.net.InetSocketAddress) (android.system.Os.getsockname(socket))); } catch (android.system.ErrnoException e) { throw e.rethrowAsIOException(); } mUserKeepaliveCallback = userCallback; android.net.ConnectivityManager cm = ((android.net.ConnectivityManager) (mContext.getSystemService(Context.CONNECTIVITY_SERVICE))); mKeepalive = cm.startNattKeepalive(mConfig.getNetwork(), intervalSeconds, mKeepaliveCallback, localAddr.getAddress(), localAddr.getPort(), android.net.NetworkUtils.numericToInetAddress(mConfig.getRemoteAddress())); } }",b59e12e9c458ee6a5f9d1280e9ab53c4b6a967ba,"@android.annotation.SystemApi public void startNattKeepalive(@android.annotation.NonNull android.net.IpSecTransform.NattKeepaliveCallback userCallback, int intervalSeconds, @android.annotation.NonNull android.os.Handler handler) throws java.io.IOException { checkNotNull(userCallback); if ((intervalSeconds < 20) || (intervalSeconds > 3600)) { throw new java.lang.IllegalArgumentException(""Invalid NAT-T keepalive interval""); } checkNotNull(handler); if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { throw new java.lang.IllegalStateException(""Packet keepalive cannot be started for an inactive transform""); } synchronized(mKeepaliveCallback) { if ((mKeepaliveCallback) != null) { throw new java.lang.IllegalStateException(""Keepalive already active""); } mUserKeepaliveCallback = userCallback; android.net.ConnectivityManager cm = ((android.net.ConnectivityManager) (mContext.getSystemService(Context.CONNECTIVITY_SERVICE))); mKeepalive = cm.startNattKeepalive(mConfig.getNetwork(), intervalSeconds, mKeepaliveCallback, android.net.NetworkUtils.numericToInetAddress(mConfig.getSourceAddress()), 4500, android.net.NetworkUtils.numericToInetAddress(mConfig.getDestinationAddress())); mCallbackHandler = handler; } }",56234a0df9a2c378e4dabdf99d75866842d4b33c,2018-01-25 05:50:32,9
559360,core_java_android_net_IpSecTransform.java,"private android.net.IpSecTransform activate() throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { synchronized(this) { try { android.net.IIpSecService svc = getIpSecService(); android.net.IpSecTransformResponse result = svc.createTransportModeTransform(mConfig, new android.os.Binder()); int status = result.status; checkResultStatus(status); mResourceId = result.resourceId; startKeepalive(mContext); android.util.Log.d(android.net.IpSecTransform.TAG, (""Added Transform with Id "" + (mResourceId))); mCloseGuard.open(""build""); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } } return this; }",49f8887d3e71f7caf663b8ea442313952624bed9,"private android.net.IpSecTransform activate() throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { synchronized(this) { try { android.net.IIpSecService svc = getIpSecService(); android.net.IpSecTransformResponse result = svc.createTransportModeTransform(mConfig, new android.os.Binder()); int status = result.status; checkResultStatus(status); mResourceId = result.resourceId; android.util.Log.d(android.net.IpSecTransform.TAG, (""Added Transform with Id "" + (mResourceId))); mCloseGuard.open(""build""); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } } return this; }",0e0e436e6df2dc8802364c88f79c9d5f5b28a5f9,"private android.net.IpSecTransform activate() throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { synchronized(this) { try { android.net.IIpSecService svc = getIpSecService(); android.net.IpSecTransformResponse result = svc.createTransform(mConfig, new android.os.Binder()); int status = result.status; checkResultStatus(status); mResourceId = result.resourceId; android.util.Log.d(android.net.IpSecTransform.TAG, (""Added Transform with Id "" + (mResourceId))); mCloseGuard.open(""build""); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } } return this; }",f2ec1f2f53520d038d00189a8782357ecceae27c,2018-01-25 05:50:32,9
593044,telephony_java_android_telephony_ServiceState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public int getDuplexMode() { return android.telephony.ServiceState.DUPLEX_MODE_UNKNOWN; },a67de4df01862e481f5a8b56d50e248d49029141,@android.telephony.ServiceState.DuplexMode public int getDuplexMode() { return android.telephony.ServiceState.DUPLEX_MODE_UNKNOWN; },42c73f17203187b93016e371e1b539d47d2479d4,2018-01-25 07:47:54,8
593044,telephony_java_android_telephony_ServiceState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public int[] getCellBandwidths() { return new int[0]; },d48359cd63a515571e8e9d2d4dfe7a9961e345df,@android.annotation.Nullable public int[] getCellBandwidths() { return mCellBandwidths; },82020a36d86afe2228f7fdf7b7d70a023bd7f3f6,2018-01-25 07:47:54,8
593044,telephony_java_android_telephony_ServiceState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setChannelNumber(int channelNumber) { },83e536d89e44bce3d205fc7f62e9abc3fcca85a7,public void setChannelNumber(int channelNumber) { mChannelNumber = channelNumber; },1cd8fed63dadadb58ac28497c77387547bfb279c,2018-01-25 07:47:54,8
593044,telephony_java_android_telephony_ServiceState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setCellBandwidths(int[] bandwidths) { },6bc710bd644a9d565d1d2b7fde2700c43fc75ccc,public void setCellBandwidths(int[] bandwidths) { mCellBandwidths = bandwidths; },b1702c9795e8ba9cd7dc8c11a1c5313986787058,2018-01-25 07:47:54,8
593044,telephony_java_android_telephony_ServiceState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public int getChannelNumber() { return 0; },f117afaad897507e10abe88ef7a402ae9224d0af,public int getChannelNumber() { return mChannelNumber; },e8f14022d4f6d95a8e73b7e49c6d09cdfe8d491c,2018-01-25 07:47:54,8
594318,tests_telephonytests_src_com_android_internal_telephony_ServiceStateTest.java,"@android.test.suitebuilder.annotation.SmallTest public void testParcel() { android.telephony.ServiceState ss = new android.telephony.ServiceState(); ss.setVoiceRegState(ServiceState.STATE_IN_SERVICE); ss.setDataRegState(ServiceState.STATE_OUT_OF_SERVICE); ss.setVoiceRoamingType(ServiceState.ROAMING_TYPE_INTERNATIONAL); ss.setDataRoamingType(ServiceState.ROAMING_TYPE_UNKNOWN); ss.setOperatorName(""long"", ""short"", ""numeric""); ss.setIsManualSelection(true); ss.setRilVoiceRadioTechnology(ServiceState.RIL_RADIO_TECHNOLOGY_1xRTT); ss.setRilDataRadioTechnology(ServiceState.RIL_RADIO_TECHNOLOGY_EVDO_0); ss.setCssIndicator(1); ss.setSystemAndNetworkId(2, 3); ss.setCdmaRoamingIndicator(4); ss.setCdmaDefaultRoamingIndicator(5); ss.setCdmaEriIconIndex(6); ss.setCdmaEriIconMode(7); ss.setEmergencyOnly(true); ss.setDataRoamingFromRegistration(true); android.os.Parcel p = android.os.Parcel.obtain(); ss.writeToParcel(p, 0); p.setDataPosition(0); android.telephony.ServiceState newSs = new android.telephony.ServiceState(p); assertEquals(ss, newSs); }",f4650832a49da4bb357853a907e84d5e0fb00648,"@android.test.suitebuilder.annotation.SmallTest public void testParcel() { android.telephony.ServiceState ss = new android.telephony.ServiceState(); ss.setVoiceRegState(ServiceState.STATE_IN_SERVICE); ss.setDataRegState(ServiceState.STATE_OUT_OF_SERVICE); ss.setVoiceRoamingType(ServiceState.ROAMING_TYPE_INTERNATIONAL); ss.setDataRoamingType(ServiceState.ROAMING_TYPE_UNKNOWN); ss.setOperatorName(""long"", ""short"", ""numeric""); ss.setIsManualSelection(true); ss.setRilVoiceRadioTechnology(ServiceState.RIL_RADIO_TECHNOLOGY_1xRTT); ss.setRilDataRadioTechnology(ServiceState.RIL_RADIO_TECHNOLOGY_EVDO_0); ss.setCssIndicator(1); ss.setSystemAndNetworkId(2, 3); ss.setCdmaRoamingIndicator(4); ss.setCdmaDefaultRoamingIndicator(5); ss.setCdmaEriIconIndex(6); ss.setCdmaEriIconMode(7); ss.setEmergencyOnly(true); ss.setDataRoamingFromRegistration(true); ss.setChannelNumber(2100); ss.setCellBandwidths(new int[]{ 3, 4, 10 }); android.os.Parcel p = android.os.Parcel.obtain(); ss.writeToParcel(p, 0); p.setDataPosition(0); android.telephony.ServiceState newSs = new android.telephony.ServiceState(p); assertEquals(ss, newSs); }",bef21912a21c2957a66dad8101d0cb9ed36fb281,"@android.test.suitebuilder.annotation.SmallTest public void testParcel() { android.telephony.ServiceState ss = new android.telephony.ServiceState(); ss.setVoiceRegState(ServiceState.STATE_IN_SERVICE); ss.setDataRegState(ServiceState.STATE_OUT_OF_SERVICE); ss.setVoiceRoamingType(ServiceState.ROAMING_TYPE_INTERNATIONAL); ss.setDataRoamingType(ServiceState.ROAMING_TYPE_UNKNOWN); ss.setOperatorName(""long"", ""short"", ""numeric""); ss.setIsManualSelection(true); ss.setRilVoiceRadioTechnology(ServiceState.RIL_RADIO_TECHNOLOGY_1xRTT); ss.setRilDataRadioTechnology(ServiceState.RIL_RADIO_TECHNOLOGY_EVDO_0); ss.setCssIndicator(1); ss.setSystemAndNetworkId(2, 3); ss.setCdmaRoamingIndicator(4); ss.setCdmaDefaultRoamingIndicator(5); ss.setCdmaEriIconIndex(6); ss.setCdmaEriIconMode(7); ss.setEmergencyOnly(true); ss.setDataRoamingFromRegistration(true); ss.setChannelNumber(2100); ss.setCellBandwidths(new int[]{ 1400, 5000, 10000 }); android.os.Parcel p = android.os.Parcel.obtain(); ss.writeToParcel(p, 0); p.setDataPosition(0); android.telephony.ServiceState newSs = new android.telephony.ServiceState(p); assertEquals(ss, newSs); }",2e860713f1a0072159d542b1149ba568ee52b2ca,2018-01-25 07:47:54,3
591861,telephony_java_android_telephony_CellInfo.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public int getCellConnectionStatus() { return mCellConnectionStatus; },9e88413fea43c11ce0151352dd448d68b3c48737,@android.telephony.CellInfo.CellConnectionStatus public int getCellConnectionStatus() { return mCellConnectionStatus; },577d644518a0ab845f09ddee894030a889963fcc,2018-01-25 12:50:36,10
591861,telephony_java_android_telephony_CellInfo.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setCellConnectionStatus(int cellConnectionStatus) { mCellConnectionStatus = cellConnectionStatus; },a7fa38878967ac24539f2542a7eb418cb6284cbc,public void setCellConnectionStatus(@android.telephony.CellInfo.CellConnectionStatus int cellConnectionStatus) { mCellConnectionStatus = cellConnectionStatus; },584143e7e432702dd91fac933f0f022cadec730c,2018-01-25 12:50:36,10
593046,src_java_com_android_internal_telephony_euicc_EuiccCardController.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private int getResultCode(java.lang.Throwable e) { if ((e.getCause()) instanceof com.android.internal.telephony.euicc.EuiccCardErrorException) { com.android.internal.telephony.euicc.EuiccCardErrorException exception = ((com.android.internal.telephony.euicc.EuiccCardErrorException) (e.getCause())); int resultCode = ((exception.getOperationCode()) << (com.android.internal.telephony.euicc.EuiccCardController.EUICC_CARD_ERROR_CODE_OPERATION_BITS_SHIFT)) + (exception.getErrorCode()); return resultCode; } return android.telephony.euicc.EuiccCardManager.RESULT_UNKNOWN; },285fc84d64c8cc54bf9dbc99784eee589ef671bb,private int getResultCode(java.lang.Throwable e) { if (e instanceof com.android.internal.telephony.uicc.euicc.EuiccCardErrorException) { return ((com.android.internal.telephony.uicc.euicc.EuiccCardErrorException) (e)).getErrorCode(); } return android.telephony.euicc.EuiccCardManager.RESULT_UNKNOWN_ERROR; },6e48f0eb0c022bb6713e4a1e981c0c668e5a6279,2018-01-25 17:22:49,8
593046,src_java_com_android_internal_telephony_euicc_EuiccCardController.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onResult(android.service.euicc.EuiccProfileInfo[] profiles) { callback.onComplete(EuiccCardManager.RESULT_OK, profiles); }",53e6e0c92639f2d1a53b591fc6d0c0afe7ba567d,"@java.lang.Override public void onResult(android.service.euicc.EuiccProfileInfo[] result) { try { callback.onComplete(EuiccCardManager.RESULT_OK, result); } catch (android.os.RemoteException exception) { throw exception.rethrowFromSystemServer(); } }",78c740378360ce894168b3c32ff57e42431a835b,2018-01-25 17:22:49,8
593046,src_java_com_android_internal_telephony_euicc_EuiccCardController.java,"@java.lang.Override public void getAllProfiles(java.lang.String callingPackage, com.android.internal.telephony.euicc.IGetAllProfilesCallback callback) { checkCallingPackage(callingPackage); }",9cd85ea89953e7639c1a343cb03170e55aae9cc5,"@java.lang.Override public void getAllProfiles(java.lang.String callingPackage, com.android.internal.telephony.euicc.IGetAllProfilesCallback callback) { checkCallingPackage(callingPackage); com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<android.service.euicc.EuiccProfileInfo[]> cardCb = new com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<android.service.euicc.EuiccProfileInfo[]>() { @java.lang.Override public void onResult(android.service.euicc.EuiccProfileInfo[] profiles) { callback.onComplete(EuiccCardManager.RESULT_OK, profiles); } @java.lang.Override public void onException(java.lang.Throwable e) { callback.onComplete(getResultCode(e), null); } }; com.android.internal.telephony.uicc.UiccController.getInstance().getEuiccCard().getAllProfiles(cardCb, mEuiccHandler); }",82f5e8258bff48a1cec9fc49ff8ac88cb67fde72,"@java.lang.Override public void getAllProfiles(java.lang.String callingPackage, java.lang.String cardId, com.android.internal.telephony.euicc.IGetAllProfilesCallback callback) { checkCallingPackage(callingPackage); com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<android.service.euicc.EuiccProfileInfo[]> cardCb = new com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<android.service.euicc.EuiccProfileInfo[]>() { @java.lang.Override public void onResult(android.service.euicc.EuiccProfileInfo[] result) { try { callback.onComplete(EuiccCardManager.RESULT_OK, result); } catch (android.os.RemoteException exception) { throw exception.rethrowFromSystemServer(); } } @java.lang.Override public void onException(java.lang.Throwable e) { try { callback.onComplete(getResultCode(e), null); } catch (android.os.RemoteException exception) { throw exception.rethrowFromSystemServer(); } } }; getEuiccCard(cardId).getAllProfiles(cardCb, mEuiccMainThreadHandler); }",ab27c096809c73835f0fb7028bb0210ae9a22d12,2018-01-25 17:22:49,8
593046,src_java_com_android_internal_telephony_uicc_UiccController.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.android.internal.telephony.uicc.UiccCard getEuiccCard(int slotId) { return null; },d83806b063ef7b42fe3c2a4f010fd6df7b17e7c0,public int getUiccSlotForCardId(java.lang.String cardId) { synchronized(com.android.internal.telephony.uicc.UiccController.mLock) { for (int idx = 0; idx < (mUiccSlots.length); idx++) { if ((mUiccSlots[idx]) != null) { com.android.internal.telephony.uicc.UiccCard uiccCard = mUiccSlots[idx].getUiccCard(); if (uiccCard != null) { if (false) { return idx; } } } } for (int idx = 0; idx < (mUiccSlots.length); idx++) { if (((mUiccSlots[idx]) != null) && (cardId.equals(mUiccSlots[idx].getIccId()))) { return idx; } } return com.android.internal.telephony.uicc.UiccController.INVALID_SLOT_ID; } },7aa57004ff9e5a5d49cd722d834d9876075720a8,2018-01-25 17:22:49,8
593046,src_java_com_android_internal_telephony_euicc_EuiccCardController.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onException(java.lang.Throwable e) { callback.onComplete(getResultCode(e), null); }",b62e14f56d3bc5b9e2a1e24a3f20ef568ae3d924,"@java.lang.Override public void onException(java.lang.Throwable e) { try { callback.onComplete(getResultCode(e), null); } catch (android.os.RemoteException exception) { throw exception.rethrowFromSystemServer(); } }",18bd599f76d031965b5a448edc5329d8d6f9d9d8,2018-01-25 17:22:49,8
598075,hostsidetests_jvmti_attaching_host_src_android_jvmti_cts_JvmtiAttachingHostTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testJvmtiAgentAppInternal() throws java.lang.Exception { runJvmtiAgentLoadTest((com.android.tradefed.device.ITestDevice device,java.lang.String pkg,java.lang.String apk,java.lang.String abiName) -> { try { java.lang.String setAgentAppCmd = ((""cmd activity set-agent-app "" + pkg) + "" "") + (android.jvmti.cts.JvmtiAttachingHostTest.AGENT); java.lang.String setAgentAppReply = device.executeShellCommand(setAgentAppCmd); if ((setAgentAppReply != null) && (!(setAgentAppReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(setAgentAppReply); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(""Failed running set-agent-app"", e); } try { android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, """"); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(""Failed agent-app attaching"", e); } }); }",307df963b61e6fac712168c203e8f3ea978750c6,"public void testJvmtiAgentAppInternal() throws java.lang.Exception { runJvmtiAgentLoadTest((com.android.tradefed.device.ITestDevice device,java.lang.String pkg,java.lang.String apk,java.lang.String abiName) -> { try { java.lang.String setAgentAppCmd = ((""cmd activity set-agent-app "" + pkg) + "" "") + (android.jvmti.cts.JvmtiAttachingHostTest.AGENT); device.executeShellCommand(setAgentAppCmd); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(""Failed running set-agent-app"", e); } try { android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, """"); android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, """"); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(""Failed agent-app attaching"", e); } }); }",714e3e43eb775f6b5fd8e87c53d2ff89e9bf5571,2018-01-25 18:08:06,2
598075,hostsidetests_jvmti_attaching_host_src_android_jvmti_cts_JvmtiAttachingHostTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testJvmtiAgentAppExternal() throws java.lang.Exception { runJvmtiAgentLoadTest((com.android.tradefed.device.ITestDevice device,java.lang.String pkg,java.lang.String apk,java.lang.String abiName) -> { try { java.lang.String pwd = device.executeShellCommand(((""run-as "" + pkg) + "" pwd"")); if (pwd == null) { throw new java.lang.RuntimeException(""pwd failed""); } pwd = pwd.trim(); if (pwd.isEmpty()) { throw new java.lang.RuntimeException(""pwd failed""); } java.lang.String libInDataData = (android.jvmti.cts.JvmtiAttachingHostTest.AGENT.substring(0, ((android.jvmti.cts.JvmtiAttachingHostTest.AGENT.length()) - ("".so"".length())))) + ""2.so""; java.lang.String agentInDataData = installLibToDataData(device, pkg, abiName, apk, pwd, android.jvmti.cts.JvmtiAttachingHostTest.AGENT, libInDataData); java.lang.String setAgentAppCmd = ((""cmd activity set-agent-app "" + pkg) + "" "") + agentInDataData; java.lang.String setAgentAppReply = device.executeShellCommand(setAgentAppCmd); if ((setAgentAppReply != null) && (!(setAgentAppReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(setAgentAppReply); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(""Failed running set-agent-app"", e); } try { android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, """"); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(""Failed agent-app attaching"", e); } }); }",a7babf5ce83e01a109b1dc98e683353123eca7d3,"public void testJvmtiAgentAppExternal() throws java.lang.Exception { runJvmtiAgentLoadTest((com.android.tradefed.device.ITestDevice device,java.lang.String pkg,java.lang.String apk,java.lang.String abiName) -> { try { java.lang.String pwd = device.executeShellCommand(((""run-as "" + pkg) + "" pwd"")); if (pwd == null) { throw new java.lang.RuntimeException(""pwd failed""); } pwd = pwd.trim(); if (pwd.isEmpty()) { throw new java.lang.RuntimeException(""pwd failed""); } java.lang.String libInDataData = (android.jvmti.cts.JvmtiAttachingHostTest.AGENT.substring(0, ((android.jvmti.cts.JvmtiAttachingHostTest.AGENT.length()) - ("".so"".length())))) + ""2.so""; java.lang.String agentInDataData = installLibToDataData(device, pkg, abiName, apk, pwd, android.jvmti.cts.JvmtiAttachingHostTest.AGENT, libInDataData); java.lang.String setAgentAppCmd = ((""cmd activity set-agent-app "" + pkg) + "" "") + agentInDataData; device.executeShellCommand(setAgentAppCmd); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(""Failed running set-agent-app"", e); } try { android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, """"); android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, """"); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(""Failed agent-app attaching"", e); } }); }",36e6fb5d387d2e5c5dc66870e3af7702737b17f1,2018-01-25 18:08:06,2
598075,hostsidetests_jvmti_attaching_host_src_android_jvmti_cts_JvmtiAttachingHostTest.java,"private void runAttachTestCmd(com.android.tradefed.device.ITestDevice device, java.lang.String pkg, java.lang.String agentParams) throws java.lang.Exception { java.lang.String attachCmd = (((""cmd activity start -S -W "" + agentParams) + "" -n "") + pkg) + ""/android.jvmti.JvmtiActivity""; java.lang.String attachReply = device.executeShellCommand(attachCmd); if ((attachReply != null) && (!(attachReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(attachReply); } }",96a86109f8341d2b03e1051a2a0b0b93b54cc2d9,"private static void runAttachTestCmd(com.android.tradefed.device.ITestDevice device, java.lang.String pkg, java.lang.String agentParams) throws java.lang.Exception { java.lang.String attachCmd = (((""cmd activity start -S -W "" + agentParams) + "" -n "") + pkg) + ""/android.jvmti.JvmtiActivity""; java.lang.String attachReply = device.executeShellCommand(attachCmd); if ((attachReply != null) && (!(attachReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(attachReply); } }",b6b8e568b1ebcb0ca421d8bb97dde84fed2f3d61,"private static void runAttachTestCmd(com.android.tradefed.device.ITestDevice device, java.lang.String pkg, java.lang.String agentParams) throws java.lang.Exception { java.lang.String attachCmd = (((""cmd activity start -S -W "" + agentParams) + "" -n "") + pkg) + ""/android.jvmti.JvmtiActivity""; device.executeShellCommand(attachCmd, com.android.ddmlib.NullOutputReceiver.getReceiver(), 10, java.util.concurrent.TimeUnit.SECONDS, 1); }",bd186e75f62d4871f132bd18297d6c081afbbc97,2018-01-25 18:08:06,2
598074,services_core_java_com_android_server_am_ActivityManagerService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void setAgentApp(java.lang.String packageName, java.lang.String agent) { synchronized(this) { if ((checkCallingPermission(android.Manifest.permission.SET_ACTIVITY_WATCHER)) != (android.content.pm.PackageManager.PERMISSION_GRANTED)) { throw new java.lang.SecurityException((""Requires permission "" + (android.Manifest.permission.SET_ACTIVITY_WATCHER))); } stopProfilerLocked(null, 0); setProfileAppUnchecked(packageName, new android.app.ProfilerInfo(null, null, 0, false, false, agent, true)); mProfileProc = null; } }",135f9010fb38bbe9f4b41be0e3e07940160dca0f,"@java.lang.Override public void setAgentApp(@android.annotation.NonNull java.lang.String packageName, @android.annotation.Nullable java.lang.String agent) { synchronized(this) { if ((checkCallingPermission(android.Manifest.permission.SET_ACTIVITY_WATCHER)) != (android.content.pm.PackageManager.PERMISSION_GRANTED)) { throw new java.lang.SecurityException((""Requires permission "" + (android.Manifest.permission.SET_ACTIVITY_WATCHER))); } if (agent == null) { if ((mAppAgentMap) != null) { mAppAgentMap.remove(packageName); if (mAppAgentMap.isEmpty()) { mAppAgentMap = null; } } } else { if ((mAppAgentMap) == null) { mAppAgentMap = new java.util.HashMap<>(); } if ((mAppAgentMap.size()) >= 100) { android.util.Slog.e(com.android.server.am.ActivityManagerService.TAG, (((""App agent map has too many entries, cannot add "" + packageName) + ""/"") + agent)); return; } mAppAgentMap.put(packageName, agent); } } }",88febd79e8b4593c9034d34f42c24138f8de4189,2018-01-25 18:08:06,3
598074,services_core_java_com_android_server_am_ActivityManagerShellCommand.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"int runSetAgentApp(java.io.PrintWriter pw) throws android.os.RemoteException { java.lang.String pkg = getNextArgRequired(); java.lang.String agent = getNextArgRequired(); mInterface.setAgentApp(pkg, agent); return 0; }",a4ca42f5dee233d96f3db21e2611e147457a7ff2,"int runSetAgentApp(java.io.PrintWriter pw) throws android.os.RemoteException { java.lang.String pkg = getNextArgRequired(); java.lang.String agent = getNextArg(); mInterface.setAgentApp(pkg, agent); return 0; }",fd71aeb964400bbbf831d81dd993c491426c3223,2018-01-25 18:08:06,3
598074,services_core_java_com_android_server_am_ActivityManagerService.java,"void setProfileApp(android.content.pm.ApplicationInfo app, java.lang.String processName, android.app.ProfilerInfo profilerInfo) { synchronized(this) { boolean isDebuggable = ""1"".equals(android.os.SystemProperties.get(com.android.server.am.ActivityManagerService.SYSTEM_DEBUGGABLE, ""0"")); if (!isDebuggable) { if (((app.flags) & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) == 0) { throw new java.lang.SecurityException((""Process not debuggable: "" + (app.packageName))); } } mProfileApp = processName; if ((mProfilerInfo) != null) { if ((mProfilerInfo.profileFd) != null) { try { mProfilerInfo.profileFd.close(); } catch (java.io.IOException e) { } } } mProfilerInfo = new android.app.ProfilerInfo(profilerInfo); mProfileType = 0; } }",79732a67e9653ab10ffcdcff41ac5debfdb16618,"void setProfileApp(android.content.pm.ApplicationInfo app, java.lang.String processName, android.app.ProfilerInfo profilerInfo) { synchronized(this) { boolean isDebuggable = ""1"".equals(android.os.SystemProperties.get(com.android.server.am.ActivityManagerService.SYSTEM_DEBUGGABLE, ""0"")); if (!isDebuggable) { if (((app.flags) & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) == 0) { throw new java.lang.SecurityException((""Process not debuggable: "" + (app.packageName))); } } setProfileAppUnchecked(processName, profilerInfo); } }",96ceb1747776d2987756c5614a96affb582f82a1,"void setProfileApp(android.content.pm.ApplicationInfo app, java.lang.String processName, android.app.ProfilerInfo profilerInfo) { synchronized(this) { boolean isDebuggable = ""1"".equals(android.os.SystemProperties.get(com.android.server.am.ActivityManagerService.SYSTEM_DEBUGGABLE, ""0"")); if (!isDebuggable) { if (((app.flags) & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) == 0) { throw new java.lang.SecurityException((""Process not debuggable: "" + (app.packageName))); } } mProfileApp = processName; if ((mProfilerInfo) != null) { if ((mProfilerInfo.profileFd) != null) { try { mProfilerInfo.profileFd.close(); } catch (java.io.IOException e) { } } } mProfilerInfo = new android.app.ProfilerInfo(profilerInfo); mProfileType = 0; } }",79732a67e9653ab10ffcdcff41ac5debfdb16618,2018-01-25 18:08:06,3
584046,src_com_android_providers_telephony_TelephonyProvider.java,"private void restoreDefaultAPN(int subId) { android.database.sqlite.SQLiteDatabase db = getWritableDatabase(); try { db.delete(com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE, com.android.providers.telephony.TelephonyProvider.IS_NOT_OWNED_BY_DPC, null); } catch (android.database.SQLException e) { com.android.providers.telephony.TelephonyProvider.loge((""got exception when deleting to restore: "" + e)); } android.content.SharedPreferences spApnId = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApnId = spApnId.edit(); editorApnId.clear(); editorApnId.apply(); android.content.SharedPreferences spApn = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_FULL_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApn = spApn.edit(); editorApn.clear(); editorApn.apply(); if (com.android.providers.telephony.TelephonyProvider.apnSourceServiceExists(getContext())) { restoreApnsWithService(); } else { initDatabaseWithDatabaseHelper(db); } }",dc7a923f8b8f5d1ed672063db2d7d8657086d555,"private void restoreDefaultAPN(int subId) { android.database.sqlite.SQLiteDatabase db = getWritableDatabase(); java.lang.String where = getWhereClauseForRestoreDefaultApn(db, subId); com.android.providers.telephony.TelephonyProvider.log((""restoreDefaultAPN: where: "" + where)); if (android.text.TextUtils.isEmpty(where)) { com.android.providers.telephony.TelephonyProvider.loge(""Cannot get where clause to restore APN""); where = com.android.providers.telephony.TelephonyProvider.IS_NOT_OWNED_BY_DPC; } try { db.delete(com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE, where, null); } catch (android.database.SQLException e) { com.android.providers.telephony.TelephonyProvider.loge((""got exception when deleting to restore: "" + e)); } android.content.SharedPreferences spApnId = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApnId = spApnId.edit(); editorApnId.clear(); editorApnId.apply(); android.content.SharedPreferences spApn = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_FULL_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApn = spApn.edit(); editorApn.clear(); editorApn.apply(); if (com.android.providers.telephony.TelephonyProvider.apnSourceServiceExists(getContext())) { restoreApnsWithService(); } else { initDatabaseWithDatabaseHelper(db); } }",92f72c83d4d9535836ec5da31943f0fbca2327e8,"private void restoreDefaultAPN(int subId) { android.database.sqlite.SQLiteDatabase db = getWritableDatabase(); android.telephony.TelephonyManager telephonyManager = ((android.telephony.TelephonyManager) (getContext().getSystemService(Context.TELEPHONY_SERVICE))); java.lang.String where = null; if ((telephonyManager.getPhoneCount()) > 1) { where = getWhereClauseForRestoreDefaultApn(db, subId); } if (android.text.TextUtils.isEmpty(where)) { where = com.android.providers.telephony.TelephonyProvider.IS_NOT_OWNED_BY_DPC; } com.android.providers.telephony.TelephonyProvider.log((""restoreDefaultAPN: where: "" + where)); try { db.delete(com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE, where, null); } catch (android.database.SQLException e) { com.android.providers.telephony.TelephonyProvider.loge((""got exception when deleting to restore: "" + e)); } android.content.SharedPreferences spApnId = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApnId = spApnId.edit(); editorApnId.clear(); editorApnId.apply(); android.content.SharedPreferences spApn = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_FULL_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApn = spApn.edit(); editorApn.clear(); editorApn.apply(); if (com.android.providers.telephony.TelephonyProvider.apnSourceServiceExists(getContext())) { restoreApnsWithService(); } else { initDatabaseWithDatabaseHelper(db); } }",54d3b687cadb4927403fa44a0945dd4a953f55f9,2018-01-25 18:17:09,5
579585,src_com_android_bluetooth_pbap_BluetoothPbapService.java,"void disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH_ADMIN permission""); synchronized(this) { mPbapStateMachine.sendMessage(PbapStateMachine.DISCONNECT); } }",5c07f926c98e80d1a942d12ccf81c96572b37e6a,"void disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH_ADMIN permission""); synchronized(this) { if (mPbapStateMachineMap.containsKey(device)) { mPbapStateMachineMap.get(device).sendMessage(PbapStateMachine.DISCONNECT); } } }",733613bf1af11dfe470418b14e97f3d26ada1f61,"void disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH_ADMIN permission""); synchronized(mPbapStateMachineMap) { com.android.bluetooth.pbap.PbapStateMachine sm = mPbapStateMachineMap.get(device); if (sm != null) { sm.sendMessage(PbapStateMachine.DISCONNECT); } } }",38d848b268ee06ba76a0ea776dc1b7f081c7b267,2018-01-25 19:08:14,19
579585,src_com_android_bluetooth_pbap_BluetoothPbapService.java,"@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice remoteDevice, android.bluetooth.BluetoothSocket socket) { if ((remoteDevice == null) || (socket == null)) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (((""onConnect(): Unexpected null. remoteDevice="" + remoteDevice) + "" socket="") + socket)); return false; } mPbapStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(this, mHandlerThread.getLooper(), remoteDevice, socket, this, mSessionStatusHandler); return true; }",e3808107f403fb165eb7aaac1467341b64aae4a4,"@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice remoteDevice, android.bluetooth.BluetoothSocket socket) { if ((remoteDevice == null) || (socket == null)) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (((""onConnect(): Unexpected null. remoteDevice="" + remoteDevice) + "" socket="") + socket)); return false; } (mNextNotificationId)--; if (mPbapStateMachineMap.containsKey(remoteDevice)) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (""onConnect(): device already connected. remoteDevice="" + remoteDevice)); return false; } com.android.bluetooth.pbap.PbapStateMachine newStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(this, mHandlerThread.getLooper(), remoteDevice, socket, this, mSessionStatusHandler, mNextNotificationId); mPbapStateMachineMap.put(remoteDevice, newStateMachine); mServerSockets.prepareForNewConnect(); return true; }",57b1600058a8189575e17f6c6f0cba8c5f741447,"@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice remoteDevice, android.bluetooth.BluetoothSocket socket) { if ((remoteDevice == null) || (socket == null)) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (((""onConnect(): Unexpected null. remoteDevice="" + remoteDevice) + "" socket="") + socket)); return false; } com.android.bluetooth.pbap.PbapStateMachine sm = com.android.bluetooth.pbap.PbapStateMachine.make(this, mHandlerThread.getLooper(), remoteDevice, socket, this, mSessionStatusHandler, mNextNotificationId); (mNextNotificationId)++; if ((mNextNotificationId) == (com.android.bluetooth.pbap.BluetoothPbapService.PBAP_NOTIFICATION_ID_END)) { mNextNotificationId = com.android.bluetooth.pbap.BluetoothPbapService.PBAP_NOTIFICATION_ID_START; } synchronized(mPbapStateMachineMap) { mPbapStateMachineMap.put(remoteDevice, sm); } sm.sendMessage(PbapStateMachine.REQUEST_PERMISSION); return true; }",0ed2eed14f2b87e03e407da4f27ebfb801fe5b97,2018-01-25 19:08:14,19
579585,src_com_android_bluetooth_pbap_BluetoothPbapService.java,"java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); if ((mPbapStateMachine) != null) { for (int state : states) { if (state == (mPbapStateMachine.getConnectionState())) { devices.add(mPbapStateMachine.getRemoteDevice()); break; } } } return devices; }",32a530ed87d590d1cdd0136eadf94e562a1c2e0a,"java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<>(); if (((mPbapStateMachineMap) == null) || (states == null)) { return devices; } for (int state : states) { for (android.bluetooth.BluetoothDevice device : mPbapStateMachineMap.keySet()) { if (state == (mPbapStateMachineMap.get(device).getConnectionState())) { devices.add(device); } } } return devices; }",02425d448ae81f8b8e456d2ed7c75f05165de480,"java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<>(); if (((mPbapStateMachineMap) == null) || (states == null)) { return devices; } synchronized(mPbapStateMachineMap) { for (int state : states) { for (android.bluetooth.BluetoothDevice device : mPbapStateMachineMap.keySet()) { if (state == (mPbapStateMachineMap.get(device).getConnectionState())) { devices.add(device); } } } } return devices; }",836b68024d2d79d2b33ea3e6c32ebcbc11f79e66,2018-01-25 19:08:14,19
579585,src_com_android_bluetooth_pbap_BluetoothPbapService.java,private void cleanUpServerSocket() { mPbapStateMachine.sendMessage(PbapStateMachine.DISCONNECT); cleanUpSdpRecord(); if ((mServerSockets) != null) { mServerSockets.shutdown(false); mServerSockets = null; } },9e31c7115816c4061e206c76a8e8c2a9463267d5,private void cleanUpServerSocket() { for (com.android.bluetooth.pbap.PbapStateMachine stateMachine : mPbapStateMachineMap.values()) { stateMachine.sendMessage(PbapStateMachine.DISCONNECT); } cleanUpSdpRecord(); if ((mServerSockets) != null) { mServerSockets.shutdown(false); mServerSockets = null; } },8fb3ef8d8fc9584852908495d0fe10da3bff13c0,private void cleanUpServerSocket() { synchronized(mPbapStateMachineMap) { for (com.android.bluetooth.pbap.PbapStateMachine stateMachine : mPbapStateMachineMap.values()) { stateMachine.sendMessage(PbapStateMachine.DISCONNECT); } } cleanUpSdpRecord(); if ((mServerSockets) != null) { mServerSockets.shutdown(false); mServerSockets = null; } },64f2895ee79de994a5f36c66ec31f948180dc0de,2018-01-25 19:08:14,19
579585,src_com_android_bluetooth_pbap_BluetoothPbapService.java,"java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<>(); if ((mPbapStateMachine) != null) { devices.add(mPbapStateMachine.getRemoteDevice()); } return devices; }",3fd8938613e9be440217d8289271f9c5a72e8420,"java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if ((mPbapStateMachineMap) == null) { return new java.util.ArrayList<>(); } return new java.util.ArrayList(mPbapStateMachineMap.keySet()); }",d0448bda7f8b3e0daab07be129e7d6a2e1863b73,"java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if ((mPbapStateMachineMap) == null) { return new java.util.ArrayList<>(); } synchronized(mPbapStateMachineMap) { return new java.util.ArrayList(mPbapStateMachineMap.keySet()); } }",07faf89e0a8b7db0b98d5be6f5aa579314beffa4,2018-01-25 19:08:14,19
579585,src_com_android_bluetooth_pbap_BluetoothPbapService.java,"int getConnectionState(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if ((mPbapStateMachine) == null) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } return mPbapStateMachine.getConnectionState(); }",34b36746844ffbfd0a4fef64e3fd47a86c6d4bef,"int getConnectionState(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (((mPbapStateMachineMap) == null) || (!(mPbapStateMachineMap.containsKey(device)))) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } return mPbapStateMachineMap.get(device).getConnectionState(); }",f9153ea214a1c8e7572702069f446a9873f6932a,"int getConnectionState(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if ((mPbapStateMachineMap) == null) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } synchronized(mPbapStateMachineMap) { com.android.bluetooth.pbap.PbapStateMachine sm = mPbapStateMachineMap.get(device); if (sm == null) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } return sm.getConnectionState(); } }",84c3d90ffbb2e157f4aaa3d53336377e0d161028,2018-01-25 19:08:14,19
596353,core_java_android_net_metrics_NetworkMetrics.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void addTcpStatsResult(int sent, int lost) { pendingSummary.tcpLossRate.count(lost, sent); }",d6b008d3a6bedbb9ee2b31e49b97fdbfb793df4a,"public void addTcpStatsResult(int sent, int lost, int rttUs, int sentAckDiffMs) { pendingSummary.tcpLossRate.count(lost, sent); pendingSummary.roundTripTimeUs.count(rttUs); pendingSummary.sentAckTimeDiffenceMs.count(sentAckDiffMs); }",1ea0b0d1d88538b39ca05aaf5c5b350e02450c62,2018-01-25 19:23:17,3
596353,core_java_android_net_metrics_NetworkMetrics.java,"@java.lang.Override public java.lang.String toString() { java.util.StringJoiner j = new java.util.StringJoiner("", "", ""{"", ""}""); j.add((""netId="" + (netId))); for (int t : com.android.internal.util.BitUtils.unpackBits(transports)) { j.add(android.net.NetworkCapabilities.transportNameOf(t)); } j.add(java.lang.String.format(""dns avg=%dms max=%dms err=%.1f%% tot=%d"", ((int) (dnsLatencies.average())), ((int) (dnsLatencies.max)), (100 * (dnsErrorRate.average())), dnsErrorRate.count)); j.add(java.lang.String.format(""connect avg=%dms max=%dms err=%.1f%% tot=%d"", ((int) (connectLatencies.average())), ((int) (connectLatencies.max)), (100 * (connectErrorRate.average())), connectErrorRate.count)); return j.toString(); }",4e3419876bb72171adca7e1687ef669e3ac570e3,"@java.lang.Override public java.lang.String toString() { java.util.StringJoiner j = new java.util.StringJoiner("", "", ""{"", ""}""); j.add((""netId="" + (netId))); for (int t : com.android.internal.util.BitUtils.unpackBits(transports)) { j.add(android.net.NetworkCapabilities.transportNameOf(t)); } j.add(java.lang.String.format(""dns avg=%dms max=%dms err=%.1f%% tot=%d"", ((int) (dnsLatencies.average())), ((int) (dnsLatencies.max)), (100 * (dnsErrorRate.average())), dnsErrorRate.count)); j.add(java.lang.String.format(""connect avg=%dms max=%dms err=%.1f%% tot=%d"", ((int) (connectLatencies.average())), ((int) (connectLatencies.max)), (100 * (connectErrorRate.average())), connectErrorRate.count)); j.add(java.lang.String.format(""tcp avg_loss=%.1f%% total_sent=%d total_lost=%d"", (100 * (tcpLossRate.average())), tcpLossRate.count, ((int) (tcpLossRate.sum)))); return j.toString(); }",19cfee63f1cca411e4a84b8a990a7139ee85217a,"@java.lang.Override public java.lang.String toString() { java.util.StringJoiner j = new java.util.StringJoiner("", "", ""{"", ""}""); j.add((""netId="" + (netId))); for (int t : com.android.internal.util.BitUtils.unpackBits(transports)) { j.add(android.net.NetworkCapabilities.transportNameOf(t)); } j.add(java.lang.String.format(""dns avg=%dms max=%dms err=%.1f%% tot=%d"", ((int) (dnsLatencies.average())), ((int) (dnsLatencies.max)), (100 * (dnsErrorRate.average())), dnsErrorRate.count)); j.add(java.lang.String.format(""connect avg=%dms max=%dms err=%.1f%% tot=%d"", ((int) (connectLatencies.average())), ((int) (connectLatencies.max)), (100 * (connectErrorRate.average())), connectErrorRate.count)); j.add(java.lang.String.format(""tcp avg_loss=%.1f%% total_sent=%d total_lost=%d"", (100 * (tcpLossRate.average())), tcpLossRate.count, ((int) (tcpLossRate.sum)))); j.add(java.lang.String.format(""tcp rtt=%dms"", ((int) ((roundTripTimeUs.average()) / 1000)))); j.add(java.lang.String.format(""tcp sent-ack_diff=%dms"", ((int) (sentAckTimeDiffenceMs.average())))); return j.toString(); }",495911d7452c1fe5722e4e3f14e795ae40010b33,2018-01-25 19:23:17,3
596353,services_core_java_com_android_server_connectivity_NetdEventListenerService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public synchronized void onTcpSocketStatsEvent(int[] networkIds, int[] packetSentCounters, int[] packetLostCounters) { if (((networkIds.length) != (packetSentCounters.length)) || ((networkIds.length) != (packetLostCounters.length))) { android.util.Log.e(com.android.server.connectivity.NetdEventListenerService.TAG, ""Invalid data FIXME""); return; } long timestamp = java.lang.System.currentTimeMillis(); for (int i = 0; i < (networkIds.length); i++) { int netId = networkIds[i]; int sent = packetSentCounters[i]; int lost = packetLostCounters[i]; getMetricsForNetwork(timestamp, netId).addTcpStatsResult(sent, lost); } if (com.android.server.connectivity.NetdEventListenerService.DBG) { java.util.StringJoiner j = new java.util.StringJoiner("", ""); for (int i = 0; i < (networkIds.length); i++) { int netId = networkIds[i]; int sent = packetSentCounters[i]; int lost = packetLostCounters[i]; j.add(java.lang.String.format(""{netId=%d, sent=%d, lost=%d}"", netId, sent, lost)); } android.util.Log.d(com.android.server.connectivity.NetdEventListenerService.TAG, (""TcpSocketStatsEvent: "" + (j.toString()))); } }",aef988b332782be34de1e2965c5c9f2dfcca70c9,"@java.lang.Override public synchronized void onTcpSocketStatsEvent(int[] networkIds, int[] sentPackets, int[] lostPackets, int[] rttsUs, int[] sentAckDiffsMs) { if (((((networkIds.length) != (sentPackets.length)) || ((networkIds.length) != (lostPackets.length))) || ((networkIds.length) != (rttsUs.length))) || ((networkIds.length) != (sentAckDiffsMs.length))) { android.util.Log.e(com.android.server.connectivity.NetdEventListenerService.TAG, ""Mismatched lengths of TCP socket stats data arrays""); return; } long timestamp = java.lang.System.currentTimeMillis(); for (int i = 0; i < (networkIds.length); i++) { int netId = networkIds[i]; int sent = sentPackets[i]; int lost = lostPackets[i]; int rttUs = rttsUs[i]; int sentAckDiffMs = sentAckDiffsMs[i]; getMetricsForNetwork(timestamp, netId).addTcpStatsResult(sent, lost, rttUs, sentAckDiffMs); } }",b453aec856ca9089a9d274b78dd5311f08d32046,2018-01-25 19:23:17,3
599176,telephony_java_android_telephony_NetworkRegistrationState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mMaxDataCalls); }",e32172ce531b8b8e4ad5bd71417b35ecbf864c34,public android.telephony.CellIdentity getCellIdentity() { return mCellIdentity; },612dfc2af11d65ace5d041291403553343c4196b,2018-01-26 00:41:26,10
599176,telephony_java_android_telephony_NetworkRegistrationState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public android.telephony.NetworkRegistrationState.DataSpecificStates getDataSpecificStates() { return mDataSpecificStates; },e130f5571e5bcca8658aa0da9f1b2a19fad830b3,@android.annotation.Nullable public android.telephony.DataSpecificRegistrationStates getDataSpecificStates() { return mDataSpecificStates; },c81cdf986a843d0486a4397127bbc13fd434390b,2018-01-26 00:41:26,10
599176,telephony_java_android_telephony_NetworkRegistrationState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public android.telephony.NetworkRegistrationState.VoiceSpecificStates getVoiceSpecificStates() { return mVoiceSpecificStates; },46c0a3cb39ae699a4511242a23d5d91909e8bdc3,@android.annotation.Nullable public android.telephony.VoiceSpecificRegistrationStates getVoiceSpecificStates() { return mVoiceSpecificStates; },71419c6be95d90ec2853ae189c4f95224b54193f,2018-01-26 00:41:26,10
599176,telephony_java_android_telephony_NetworkRegistrationState.java,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mTransportType); dest.writeInt(mDomain); dest.writeInt(mRegState); dest.writeInt(mAccessNetworkTechnology); dest.writeInt(mReasonForDenial); dest.writeBoolean(mEmergencyOnly); dest.writeIntArray(mAvailableServices); dest.writeParcelable(mCellIdentity, 0); }",e94deb34e24b8f6c05857287e2842e619c030c88,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mTransportType); dest.writeInt(mDomain); dest.writeInt(mRegState); dest.writeInt(mAccessNetworkTechnology); dest.writeInt(mReasonForDenial); dest.writeBoolean(mEmergencyOnly); dest.writeIntArray(mAvailableServices); dest.writeParcelable(mCellIdentity, 0); if ((mVoiceSpecificStates) != null) { dest.writeBoolean(true); mVoiceSpecificStates.writeToParcel(dest, flags); } else { dest.writeBoolean(false); } if ((mDataSpecificStates) != null) { dest.writeBoolean(true); mDataSpecificStates.writeToParcel(dest, flags); } else { dest.writeBoolean(false); } }",61688fd877d5ace187ac7ce5868080d1c25d97e6,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mTransportType); dest.writeInt(mDomain); dest.writeInt(mRegState); dest.writeInt(mAccessNetworkTechnology); dest.writeInt(mReasonForDenial); dest.writeBoolean(mEmergencyOnly); dest.writeIntArray(mAvailableServices); dest.writeParcelable(mCellIdentity, 0); dest.writeParcelable(mVoiceSpecificStates, 0); dest.writeParcelable(mDataSpecificStates, 0); }",7398f039401c8341a3d59e67b41414e0c0de2426,2018-01-26 00:41:26,10
599176,telephony_java_android_telephony_NetworkRegistrationState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeBoolean(mCssSupported); dest.writeInt(mRoamingIndicator); dest.writeInt(mSystemIsInPrl); dest.writeInt(mDefaultRoamingIndicator); }",bcece97884532e1f72cefeb182dcdbf1a86f7aa9,public int getReasonForDenial() { return mReasonForDenial; },a2011a691ac4b98de6095270c255fd17430e6555,2018-01-26 00:41:26,10
597817,telephony_java_android_telephony_data_DataService.java,"@java.lang.Override public android.os.IBinder onBind(android.content.Intent intent) { if ((intent == null) || (!(android.telephony.data.DataService.DATA_SERVICE_INTERFACE.equals(intent.getAction())))) { loge((""Unexpected intent "" + intent)); return null; } int slotId = intent.getIntExtra(android.telephony.data.DataService.DATA_SERVICE_EXTRA_SLOT_ID, SubscriptionManager.INVALID_SIM_SLOT_INDEX); if (!(android.telephony.SubscriptionManager.isValidSlotIndex(slotId))) { loge((""Invalid slot id "" + slotId)); return null; } log((""onBind: slot id="" + slotId)); android.telephony.data.DataService.IDataServiceWrapper binder = mBinderMap.get(slotId); if (binder == null) { android.os.Message msg = mHandler.obtainMessage(android.telephony.data.DataService.DATA_SERVICE_INTERNAL_REQUEST_INITIALIZE_SERVICE); msg.arg1 = slotId; msg.sendToTarget(); binder = new android.telephony.data.DataService.IDataServiceWrapper(slotId); mBinderMap.put(slotId, binder); } return binder; }",7e14803dcd22ab44517b3fd41bdd25d90290ff61,"@java.lang.Override public android.os.IBinder onBind(android.content.Intent intent) { if ((intent == null) || (!(android.telephony.data.DataService.DATA_SERVICE_INTERFACE.equals(intent.getAction())))) { loge((""Unexpected intent "" + intent)); return null; } if ((mBinder) != null) return mBinder; mHandler.obtainMessage(android.telephony.data.DataService.DATA_SERVICE_INTERNAL_REQUEST_INITIALIZE_SERVICE).sendToTarget(); mBinder = new android.telephony.data.DataService.IDataServiceWrapper(); return mBinder; }",a77219f0db311b10cbe9d53c264da1ba1cf773bf,"@java.lang.Override public android.os.IBinder onBind(android.content.Intent intent) { if ((intent == null) || (!(android.telephony.data.DataService.DATA_SERVICE_INTERFACE.equals(intent.getAction())))) { loge((""Unexpected intent "" + intent)); return null; } return mBinder; }",6aa932bfbfbc491fc6a931a93db41d959e082474,2018-01-26 19:25:12,3
597817,telephony_java_android_telephony_data_DataService.java,"@java.lang.Override public boolean onUnbind(android.content.Intent intent) { int slotId = intent.getIntExtra(android.telephony.data.DataService.DATA_SERVICE_EXTRA_SLOT_ID, SubscriptionManager.INVALID_SIM_SLOT_INDEX); if ((mBinderMap.get(slotId)) != null) { android.telephony.data.DataService.DataServiceProvider serviceImpl; synchronized(mServiceMap) { serviceImpl = mServiceMap.get(slotId); } if (serviceImpl != null) { serviceImpl.onDestroy(); } mBinderMap.remove(slotId); } if ((mBinderMap.size()) == 0) { mHandlerThread.quit(); } return false; }",69b9f72f9ceaebe21054a76dfaa7fe11cac940c2,@java.lang.Override public boolean onUnbind(android.content.Intent intent) { onDestroy(); return false; },d44c91c877abd89f2bf93798f6459228524f5822,@java.lang.Override public boolean onUnbind(android.content.Intent intent) { mHandler.obtainMessage(android.telephony.data.DataService.DATA_SERVICE_REMOVE_ALL_DATA_SERVICE_PROVIDERS).sendToTarget(); return false; },d6cc131ce1326c1c1562226f56a4d3c57a0e49e3,2018-01-26 19:25:12,3
597816,src_com_android_bluetooth_btservice_ProfileService.java,"@java.lang.Override public void onDestroy() { if (com.android.bluetooth.btservice.ProfileService.DBG) { log(""Destroying service.""); } com.android.bluetooth.btservice.AdapterService adapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); if (adapterService != null) { adapterService.removeProfile(this); } if (mCleaningUp) { if (com.android.bluetooth.btservice.ProfileService.DBG) { log(""Cleanup already started... Skipping cleanup()...""); } } else { if (com.android.bluetooth.btservice.ProfileService.DBG) { log(""cleanup()""); } mCleaningUp = true; cleanup(); if ((mBinder) != null) { mBinder.cleanup(); mBinder = null; } } super.onDestroy(); mAdapter = null; }",e5e3aa0cf25a44e7bd4251c1e53c5f36d7c9e30c,"@java.lang.Override public void onDestroy() { if (mCleaningUp) { log(""Cleanup already started... Skipping cleanup()...""); return; } mCleaningUp = true; if ((mAdapterService) != null) { mAdapterService.removeProfile(this); } cleanup(); if ((mBinder) != null) { mBinder.cleanup(); mBinder = null; } super.onDestroy(); mAdapter = null; }",4485e36ad521a256fa80989d06da6f6b53b1fd83,@java.lang.Override public void onDestroy() { if ((mAdapterService) != null) { mAdapterService.removeProfile(this); } cleanup(); if ((mBinder) != null) { mBinder.cleanup(); mBinder = null; } super.onDestroy(); mAdapter = null; },93c481ec0d0e457471aa5a82df0959b0a0441843,2018-01-26 20:14:24,15
597816,src_com_android_bluetooth_btservice_ProfileService.java,"private void doStart(android.content.Intent intent) { if ((mAdapter) == null) { android.util.Log.e(mName, ""Error starting profile. BluetoothAdapter is null""); } else { if (com.android.bluetooth.btservice.ProfileService.DBG) { log(""start()""); } mStartError = !(start()); if (!(mStartError)) { notifyProfileServiceStateChanged(BluetoothAdapter.STATE_ON); } else { android.util.Log.e(mName, ""Error starting profile. start() returned false.""); } } }",220f53cd11bd0b8c3538eede6e5fd4a4d3d67d48,"private void doStart() { if ((mAdapter) == null) { android.util.Log.w(mName, ""Can't start profile service: device does not have BT""); return; } mAdapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); if ((mAdapterService) == null) { android.util.Log.w(com.android.bluetooth.btservice.ProfileService.TAG, ""Could not add this profile because AdapterService is null.""); return; } mAdapterService.addProfile(this); mProfileStarted = start(); if (!(mProfileStarted)) { android.util.Log.e(mName, ""Error starting profile. start() returned false.""); return; } mAdapterService.onProfileServiceStateChanged(getClass().getName(), BluetoothAdapter.STATE_ON); }",e0686c9ea780a509e0c96cb7512a56cd5e5700bf,"private void doStart() { if ((mAdapter) == null) { android.util.Log.w(mName, ""Can't start profile service: device does not have BT""); return; } mAdapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); if ((mAdapterService) == null) { android.util.Log.w(mName, ""Could not add this profile because AdapterService is null.""); return; } mAdapterService.addProfile(this); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(Intent.ACTION_USER_SWITCHED); filter.addAction(Intent.ACTION_USER_UNLOCKED); mUserSwitchedReceiver = new android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { final java.lang.String action = intent.getAction(); final int userId = intent.getIntExtra(Intent.EXTRA_USER_HANDLE, UserHandle.USER_NULL); if (userId == (android.os.UserHandle.USER_NULL)) { android.util.Log.e(mName, ""userChangeReceiver received an invalid EXTRA_USER_HANDLE""); return; } if (Intent.ACTION_USER_SWITCHED.equals(action)) { android.util.Log.d(mName, (""User switched to userId "" + userId)); setCurrentUser(userId); } else if (Intent.ACTION_USER_UNLOCKED.equals(intent.getAction())) { android.util.Log.d(mName, (""Unlocked userId "" + userId)); setUserUnlocked(userId); } } }; getApplicationContext().registerReceiver(mUserSwitchedReceiver, filter); int currentUserId = android.app.ActivityManager.getCurrentUser(); setCurrentUser(currentUserId); android.os.UserManager userManager = android.os.UserManager.get(getApplicationContext()); if (userManager.isUserUnlocked(currentUserId)) { setUserUnlocked(currentUserId); } mProfileStarted = start(); if (!(mProfileStarted)) { android.util.Log.e(mName, ""Error starting profile. start() returned false.""); return; } mAdapterService.onProfileServiceStateChanged(getClass().getName(), BluetoothAdapter.STATE_ON); }",49204fd6f881b319ba1cf93ee4e83bb79a6f489d,2018-01-26 20:14:24,15
597816,src_com_android_bluetooth_btservice_ProfileService.java,protected boolean isAvailable() { return (!(mStartError)) && (!(mCleaningUp)); },01ffa9694dd46e6e1fbeb303f1984cc2baadd8e4,protected boolean isAvailable() { return (mProfileStarted) && (!(mCleaningUp)); },b46a4bcaf7860373f32a94892ec2622b581f15aa,protected boolean isAvailable() { return mProfileStarted; },bb9166ed06b4cd96ef08750f38540f4b8bf920d5,2018-01-26 20:14:24,15
597816,src_com_android_bluetooth_btservice_ProfileService.java,"private void doStop(android.content.Intent intent) { if (stop()) { if (com.android.bluetooth.btservice.ProfileService.DBG) { log(""stop()""); } notifyProfileServiceStateChanged(BluetoothAdapter.STATE_OFF); stopSelf(); } else { android.util.Log.e(mName, ""Unable to stop profile""); } }",401a8b28222a0bba02f2d356144665c5533634b1,"private void doStop() { if (!(mProfileStarted)) { android.util.Log.w(mName, ""doStop() called but the profile is not running.""); } mProfileStarted = false; if (!(stop())) { android.util.Log.e(mName, ""Unable to stop profile""); } if ((mAdapterService) != null) { mAdapterService.onProfileServiceStateChanged(getClass().getName(), BluetoothAdapter.STATE_OFF); } stopSelf(); }",851a40de4185d395a1a7700cdea8edb3f8e5376a,"private void doStop() { if (!(mProfileStarted)) { android.util.Log.w(mName, ""doStop() called, but the profile is not running.""); } mProfileStarted = false; if ((mAdapterService) != null) { mAdapterService.onProfileServiceStateChanged(getClass().getName(), BluetoothAdapter.STATE_OFF); } if (!(stop())) { android.util.Log.e(mName, ""Unable to stop profile""); } if ((mUserSwitchedReceiver) != null) { getApplicationContext().unregisterReceiver(mUserSwitchedReceiver); mUserSwitchedReceiver = null; } stopSelf(); }",dc77d3c13b20674f8c36e10147fd8c98f88e54c6,2018-01-26 20:14:24,15
597816,src_com_android_bluetooth_btservice_ProfileService.java,"@java.lang.Override public void onCreate() { if (com.android.bluetooth.btservice.ProfileService.DBG) { log(""onCreate""); } super.onCreate(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mBinder = initBinder(); create(); }",cba2844e0b1f534ca73649521e11fb5fe8f8ea88,"@java.lang.Override public void onCreate() { if (com.android.bluetooth.btservice.ProfileService.DBG) { log(""onCreate""); } super.onCreate(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mBinder = initBinder(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(Intent.ACTION_USER_SWITCHED); filter.addAction(Intent.ACTION_USER_UNLOCKED); android.content.BroadcastReceiver userSwitchedReceiver = new android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { final java.lang.String action = intent.getAction(); final int userId = intent.getIntExtra(Intent.EXTRA_USER_HANDLE, UserHandle.USER_NULL); if (userId == (android.os.UserHandle.USER_NULL)) { android.util.Log.e(mName, ""userChangeReceiver received an invalid EXTRA_USER_HANDLE""); return; } if (Intent.ACTION_USER_SWITCHED.equals(action)) { android.util.Log.d(mName, (""User switched to userId "" + userId)); setCurrentUser(userId); } else if (Intent.ACTION_USER_UNLOCKED.equals(intent.getAction())) { android.util.Log.d(mName, (""Unlocked userId "" + userId)); setUserUnlocked(userId); } } }; getApplicationContext().registerReceiver(userSwitchedReceiver, filter); int currentUserId = android.app.ActivityManager.getCurrentUser(); setCurrentUser(currentUserId); android.os.UserManager userManager = android.os.UserManager.get(getApplicationContext()); if (userManager.isUserUnlocked(currentUserId)) { setUserUnlocked(currentUserId); } create(); }",28606f853602089445c5627516af5bc036b9d3e9,"@java.lang.Override public void onCreate() { if (com.android.bluetooth.btservice.ProfileService.DBG) { log(""onCreate""); } super.onCreate(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mBinder = initBinder(); create(); }",cba2844e0b1f534ca73649521e11fb5fe8f8ea88,2018-01-26 20:14:24,15
540316,src_com_android_bluetooth_a2dp_A2dpService.java,"public android.bluetooth.BluetoothCodecStatus getCodecStatus() { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ""getCodecStatus()""); } return mStateMachine.getCodecStatus(); }",5d1cd7868e1ef5386decefec228513e03b0c4576,"public android.bluetooth.BluetoothCodecStatus getCodecStatus() { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ""getCodecStatus()""); } synchronized(mStateMachines) { for (com.android.bluetooth.a2dp.A2dpStateMachine sm : mStateMachines.values()) { if (sm.isConnected()) { return sm.getCodecStatus(); } } return mLocalCodecStatus; } }",ba73af881e1ebc567104db5ca00fac569c6adc67,"public android.bluetooth.BluetoothCodecStatus getCodecStatus(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ((""getCodecStatus("" + device) + "")"")); } if (device == null) { device = mActiveDevice; } if (device == null) { return null; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachines.get(device); if (sm != null) { return sm.getCodecStatus(); } return null; } }",3da2bd38c0c830634aafeac7e4fe741eb1342317,2018-01-26 22:43:51,9
540316,src_com_android_bluetooth_a2dp_A2dpStateMachine.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void broadcastConnectionState(int newState, int prevState) { if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (((((""Connection state "" + (mDevice)) + "": "") + (com.android.bluetooth.a2dp.A2dpStateMachine.profileStateToString(prevState))) + ""->"") + (com.android.bluetooth.a2dp.A2dpStateMachine.profileStateToString(newState)))); } mAudioManager.setBluetoothA2dpDeviceConnectionState(mDevice, newState, BluetoothProfile.A2DP); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dp.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND))); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }",19926f466983bda812150b2e88eec547a80a82cc,"private void broadcastConnectionState(int newState, int prevState) { if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (((((""Connection state "" + (mDevice)) + "": "") + (com.android.bluetooth.a2dp.A2dpStateMachine.profileStateToString(prevState))) + ""->"") + (com.android.bluetooth.a2dp.A2dpStateMachine.profileStateToString(newState)))); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dp.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND))); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }",cdbcf8033a2fccf8986c52e9c827f4cc6fa4dba1,2018-01-26 22:43:51,9
540316,src_com_android_bluetooth_a2dp_A2dpService.java,"boolean disconnect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""disconnect(): "" + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); int connectionState = mStateMachine.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mStateMachine.sendMessage(A2dpStateMachine.DISCONNECT, device); return true; }",df9c46ac7706446745cae0d3e384c1b5ae5d04b8,"boolean disconnect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""disconnect(): "" + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachines.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Ignored disconnect request for "" + device) + "" : no state machine"")); return false; } int connectionState = sm.getConnectionState(); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } sm.sendMessage(A2dpStateMachine.DISCONNECT); return true; } }",74b4092baf7efd23164b3438391524872310e241,"boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""disconnect(): "" + device)); } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachines.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Ignored disconnect request for "" + device) + "" : no state machine"")); return false; } sm.sendMessage(A2dpStateMachine.DISCONNECT); return true; } }",544b23bc06fe8dd0cd1157851f8740363c3d6db2,2018-01-26 22:43:51,9
540316,src_com_android_bluetooth_a2dp_A2dpStateMachine.java,"private void processCodecConfigEvent(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothCodecStatus newCodecStatus) { android.bluetooth.BluetoothCodecConfig prevCodecConfig = null; synchronized(this) { if ((mCodecStatus) != null) { prevCodecConfig = mCodecStatus.getCodecConfig(); } mCodecStatus = newCodecStatus; } if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (((""A2DP Codec Config: "" + prevCodecConfig) + ""->"") + (newCodecStatus.getCodecConfig()))); for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsLocalCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""A2DP Codec Local Capability: "" + codecConfig)); } for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsSelectableCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""A2DP Codec Selectable Capability: "" + codecConfig)); } } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dp.ACTION_CODEC_CONFIG_CHANGED); intent.putExtra(BluetoothCodecStatus.EXTRA_CODEC_STATUS, mCodecStatus); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); if (((!(newCodecStatus.getCodecConfig().sameAudioFeedingParameters(prevCodecConfig))) && ((mCurrentDevice) != null)) && ((getCurrentState()) == (mConnected))) { intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mCurrentDevice); mAudioManager.handleBluetoothA2dpDeviceConfigChange(mCurrentDevice); } mService.sendBroadcast(intent, A2dpService.BLUETOOTH_PERM); }",d20e1317c8ac199e7e05275fe66a4f614ffaa9d2,"private void processCodecConfigEvent(android.bluetooth.BluetoothCodecStatus newCodecStatus) { android.bluetooth.BluetoothCodecConfig prevCodecConfig = null; synchronized(this) { if ((mCodecStatus) != null) { prevCodecConfig = mCodecStatus.getCodecConfig(); } mCodecStatus = newCodecStatus; } if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (((""A2DP Codec Config: "" + prevCodecConfig) + ""->"") + (newCodecStatus.getCodecConfig()))); for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsLocalCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""A2DP Codec Local Capability: "" + codecConfig)); } for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsSelectableCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""A2DP Codec Selectable Capability: "" + codecConfig)); } } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dp.ACTION_CODEC_CONFIG_CHANGED); intent.putExtra(BluetoothCodecStatus.EXTRA_CODEC_STATUS, mCodecStatus); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); if ((!(newCodecStatus.getCodecConfig().sameAudioFeedingParameters(prevCodecConfig))) && ((getCurrentState()) == (mConnected))) { intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); mAudioManager.handleBluetoothA2dpDeviceConfigChange(mDevice); } mService.sendBroadcast(intent, A2dpService.BLUETOOTH_PERM); }",d3f7833c87c701b666d8a57659e0800b8c4f5817,"private void processCodecConfigEvent(android.bluetooth.BluetoothCodecStatus newCodecStatus) { android.bluetooth.BluetoothCodecConfig prevCodecConfig = null; synchronized(this) { if ((mCodecStatus) != null) { prevCodecConfig = mCodecStatus.getCodecConfig(); } mCodecStatus = newCodecStatus; } if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (((""A2DP Codec Config: "" + prevCodecConfig) + ""->"") + (newCodecStatus.getCodecConfig()))); for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsLocalCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""A2DP Codec Local Capability: "" + codecConfig)); } for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsSelectableCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""A2DP Codec Selectable Capability: "" + codecConfig)); } } boolean sameAudioFeedingParameters = newCodecStatus.getCodecConfig().sameAudioFeedingParameters(prevCodecConfig); mService.codecConfigUpdated(mDevice, mCodecStatus, sameAudioFeedingParameters); }",c7db9a03189bd256a556bb508d7fdaef8c826f44,2018-01-26 22:43:51,9
540316,src_com_android_bluetooth_a2dp_A2dpStateMachine.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void enter() { android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (((""Enter Disconnected("" + (mDevice)) + ""): "") + (com.android.bluetooth.a2dp.A2dpStateMachine.messageWhatToString(getCurrentMessage().what)))); mConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; removeMessages(com.android.bluetooth.a2dp.A2dpStateMachine.CONNECT_TIMEOUT); if ((mLastConnectionState) != (-1)) { broadcastConnectionState(mConnectionState, mLastConnectionState); } }",ac471e07b30e8d2dd8ec4a3bed6752e3131f7fdd,"@java.lang.Override public void enter() { android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (((""Enter Disconnected("" + (mDevice)) + ""): "") + (com.android.bluetooth.a2dp.A2dpStateMachine.messageWhatToString(getCurrentMessage().what)))); mConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; removeDeferredMessages(com.android.bluetooth.a2dp.A2dpStateMachine.DISCONNECT); removeMessages(com.android.bluetooth.a2dp.A2dpStateMachine.CONNECT_TIMEOUT); if ((mLastConnectionState) != (-1)) { broadcastConnectionState(mConnectionState, mLastConnectionState); if (mIsPlaying) { android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Disconnected: stopped playing: "" + (mDevice))); mIsPlaying = false; mService.setAvrcpAudioState(BluetoothA2dp.STATE_NOT_PLAYING); broadcastAudioState(BluetoothA2dp.STATE_NOT_PLAYING, BluetoothA2dp.STATE_PLAYING); } } }",2d96b6acf47c03a198995ecd01bdc33f5b389440,2018-01-26 22:43:51,9
540316,src_com_android_bluetooth_a2dp_A2dpStateMachine.java,boolean okToConnect(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.btservice.AdapterService adapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); int priority = mService.getPriority(device); if ((adapterService == null) || ((adapterService.isQuietModeEnabled()) && ((mTargetDevice) == null))) { return false; } if (((android.bluetooth.BluetoothProfile.PRIORITY_OFF) < priority) || (((android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED) == priority) && ((device.getBondState()) != (android.bluetooth.BluetoothDevice.BOND_NONE)))) { return true; } return false; },6613f0afd396fcae5ce8a5ec5815fe5f3b3083a8,boolean okToConnect(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.btservice.AdapterService adapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); int priority = mService.getPriority(device); if ((adapterService == null) || (adapterService.isQuietModeEnabled())) { return false; } if (((android.bluetooth.BluetoothProfile.PRIORITY_OFF) < priority) || (((android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED) == priority) && ((device.getBondState()) != (android.bluetooth.BluetoothDevice.BOND_NONE)))) { return true; } return false; },00debfdb84b47e2dac942012c3a047c50f591884,"boolean okToConnect(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.btservice.AdapterService adapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); int priority = mService.getPriority(device); if ((adapterService == null) || (adapterService.isQuietModeEnabled())) { return false; } if (!(mService.canConnectToDevice(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ((""Cannot connect to "" + device) + "" : too many connected devices"")); return false; } if (((android.bluetooth.BluetoothProfile.PRIORITY_OFF) < priority) || (((android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED) == priority) && ((device.getBondState()) != (android.bluetooth.BluetoothDevice.BOND_NONE)))) { return true; } return false; }",114585acaacb2901388ab6c6303cdd3bd8b36c56,2018-01-26 22:43:51,9
540316,src_com_android_bluetooth_a2dp_A2dpService.java,@java.lang.Override public void dump(java.lang.StringBuilder sb) { super.dump(sb); if ((mStateMachine) != null) { mStateMachine.dump(sb); } if ((mAvrcp) != null) { mAvrcp.dump(sb); } },5b12b46491ba5f472e1af7697aefd015d08f6a52,@java.lang.Override public void dump(java.lang.StringBuilder sb) { super.dump(sb); for (com.android.bluetooth.a2dp.A2dpStateMachine sm : mStateMachines.values()) { sm.dump(sb); } if ((mAvrcp) != null) { mAvrcp.dump(sb); } },3c574bd8cd570608d9ce99a85ce1ac620e5faa88,"@java.lang.Override public void dump(java.lang.StringBuilder sb) { super.dump(sb); com.android.bluetooth.btservice.ProfileService.println(sb, (""mActiveDevice: "" + (mActiveDevice))); for (com.android.bluetooth.a2dp.A2dpStateMachine sm : mStateMachines.values()) { sm.dump(sb); } if ((mAvrcp) != null) { mAvrcp.dump(sb); } }",d971cda873322c05ad5c60aa75077d910843a862,2018-01-26 22:43:51,9
540316,tests_unit_src_com_android_bluetooth_a2dp_A2dpStateMachineTest.java,"@org.junit.Test public void testIncomingPriorityReject() { when(mA2dpService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_OFF); com.android.bluetooth.a2dp.A2dpStackEvent connStCh = new com.android.bluetooth.a2dp.A2dpStackEvent(A2dpStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED); connStCh.valueInt = A2dpStateMachine.CONNECTION_STATE_CONNECTED; connStCh.device = mTestDevice; mA2dpStateMachine.sendMessage(A2dpStateMachine.STACK_EVENT, connStCh); verify(mA2dpService, after(com.android.bluetooth.a2dp.A2dpStateMachineTest.TIMEOUT_MS).never()).sendBroadcast(any(android.content.Intent.class), anyString()); org.junit.Assert.assertTrue(((mA2dpStateMachine.getCurrentState()) instanceof com.android.bluetooth.a2dp.A2dpStateMachine.Disconnected)); }",76ce29871ec651806025a1feaf3235d850db06c2,"@org.junit.Test public void testIncomingPriorityReject() { when(mA2dpService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_OFF); com.android.bluetooth.a2dp.A2dpStackEvent connStCh = new com.android.bluetooth.a2dp.A2dpStackEvent(A2dpStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED); connStCh.valueInt = A2dpStackEvent.CONNECTION_STATE_CONNECTED; connStCh.device = mTestDevice; mA2dpStateMachine.sendMessage(A2dpStateMachine.STACK_EVENT, connStCh); verify(mA2dpService, after(com.android.bluetooth.a2dp.A2dpStateMachineTest.TIMEOUT_MS).never()).sendBroadcast(any(android.content.Intent.class), anyString()); org.junit.Assert.assertThat(mA2dpStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(A2dpStateMachine.Disconnected.class)); }",f7a78ea9e17df076a1cb81910e00ef2f9c1f9f67,"@org.junit.Test public void testIncomingPriorityReject() { when(mA2dpService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_OFF); com.android.bluetooth.a2dp.A2dpStackEvent connStCh = new com.android.bluetooth.a2dp.A2dpStackEvent(A2dpStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED); connStCh.device = mTestDevice; connStCh.valueInt = A2dpStackEvent.CONNECTION_STATE_CONNECTED; mA2dpStateMachine.sendMessage(A2dpStateMachine.STACK_EVENT, connStCh); verify(mA2dpService, after(com.android.bluetooth.a2dp.A2dpStateMachineTest.TIMEOUT_MS).never()).sendBroadcast(any(android.content.Intent.class), anyString()); org.junit.Assert.assertThat(mA2dpStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(A2dpStateMachine.Disconnected.class)); }",181763c23a312f96a59aeb6a12f10676c81f1fd9,2018-01-26 22:43:51,9
540316,tests_unit_src_com_android_bluetooth_a2dp_A2dpStateMachineTest.java,"@org.junit.Test public void testDefaultDisconnectedState() { org.junit.Assert.assertEquals(mA2dpStateMachine.getConnectionState(null), BluetoothProfile.STATE_DISCONNECTED); }",0c9b945332fa880d9b85ddddf91e0b08cc58014c,"@org.junit.Test public void testDefaultDisconnectedState() { org.junit.Assert.assertEquals(mA2dpStateMachine.getConnectionState(), BluetoothProfile.STATE_DISCONNECTED); }",8991eb24188334f51cc241e176ee3e6b561e9ae8,"@org.junit.Test public void testDefaultDisconnectedState() { org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mA2dpStateMachine.getConnectionState()); }",856c85c433bad5b478ebeb8b18bf8eaa661634c1,2018-01-26 22:43:51,9
540316,tests_unit_src_com_android_bluetooth_a2dp_A2dpStateMachineTest.java,"@org.junit.Test public void testOutgoingTimeout() { when(mA2dpService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_ON); when(mA2dpNativeInterface.connectA2dp(any(android.bluetooth.BluetoothDevice.class))).thenReturn(true); when(mA2dpNativeInterface.disconnectA2dp(any(android.bluetooth.BluetoothDevice.class))).thenReturn(true); mA2dpStateMachine.sendMessage(A2dpStateMachine.CONNECT, mTestDevice); org.mockito.ArgumentCaptor<android.content.Intent> intentArgument1 = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mA2dpService, timeout(com.android.bluetooth.a2dp.A2dpStateMachineTest.TIMEOUT_MS).times(1)).sendBroadcast(intentArgument1.capture(), anyString()); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, intentArgument1.getValue().getIntExtra(BluetoothProfile.EXTRA_STATE, (-1))); org.junit.Assert.assertTrue(((mA2dpStateMachine.getCurrentState()) instanceof com.android.bluetooth.a2dp.A2dpStateMachine.Pending)); org.mockito.ArgumentCaptor<android.content.Intent> intentArgument2 = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mA2dpService, timeout(((A2dpStateMachine.sConnectTimeoutMs) * 2)).times(2)).sendBroadcast(intentArgument2.capture(), anyString()); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, intentArgument2.getValue().getIntExtra(BluetoothProfile.EXTRA_STATE, (-1))); org.junit.Assert.assertTrue(((mA2dpStateMachine.getCurrentState()) instanceof com.android.bluetooth.a2dp.A2dpStateMachine.Disconnected)); }",7adcd90a6d7f07dbff652f08a458b3f26c8e31f7,"@org.junit.Test public void testOutgoingTimeout() { when(mA2dpService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_ON); when(mA2dpNativeInterface.connectA2dp(any(android.bluetooth.BluetoothDevice.class))).thenReturn(true); when(mA2dpNativeInterface.disconnectA2dp(any(android.bluetooth.BluetoothDevice.class))).thenReturn(true); mA2dpStateMachine.sendMessage(A2dpStateMachine.CONNECT, mTestDevice); org.mockito.ArgumentCaptor<android.content.Intent> intentArgument1 = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mA2dpService, timeout(com.android.bluetooth.a2dp.A2dpStateMachineTest.TIMEOUT_MS).times(1)).sendBroadcast(intentArgument1.capture(), anyString()); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, intentArgument1.getValue().getIntExtra(BluetoothProfile.EXTRA_STATE, (-1))); org.junit.Assert.assertThat(mA2dpStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(A2dpStateMachine.Connecting.class)); org.mockito.ArgumentCaptor<android.content.Intent> intentArgument2 = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mA2dpService, timeout(((A2dpStateMachine.sConnectTimeoutMs) * 2)).times(2)).sendBroadcast(intentArgument2.capture(), anyString()); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, intentArgument2.getValue().getIntExtra(BluetoothProfile.EXTRA_STATE, (-1))); org.junit.Assert.assertThat(mA2dpStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(A2dpStateMachine.Disconnected.class)); }",42ff96e169a7e6bb2fd5a4d03d8d256aa1423ff2,"@org.junit.Ignore(""Test is broken - mocking side-effect of mA2dpService"") @org.junit.Test public void testOutgoingTimeout() { when(mA2dpService.canConnectToDevice(any(android.bluetooth.BluetoothDevice.class))).thenReturn(true); when(mA2dpNativeInterface.connectA2dp(any(android.bluetooth.BluetoothDevice.class))).thenReturn(true); when(mA2dpNativeInterface.disconnectA2dp(any(android.bluetooth.BluetoothDevice.class))).thenReturn(true); mA2dpStateMachine.sendMessage(A2dpStateMachine.CONNECT, mTestDevice); org.mockito.ArgumentCaptor<android.content.Intent> intentArgument1 = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mA2dpService, timeout(com.android.bluetooth.a2dp.A2dpStateMachineTest.TIMEOUT_MS).times(1)).sendBroadcast(intentArgument1.capture(), anyString()); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, intentArgument1.getValue().getIntExtra(BluetoothProfile.EXTRA_STATE, (-1))); org.junit.Assert.assertThat(mA2dpStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(A2dpStateMachine.Connecting.class)); org.mockito.ArgumentCaptor<android.content.Intent> intentArgument2 = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mA2dpService, timeout(((A2dpStateMachine.sConnectTimeoutMs) * 2)).times(2)).sendBroadcast(intentArgument2.capture(), anyString()); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, intentArgument2.getValue().getIntExtra(BluetoothProfile.EXTRA_STATE, (-1))); org.junit.Assert.assertThat(mA2dpStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(A2dpStateMachine.Disconnected.class)); }",c6ed33371dbd004e19ffb19750548ae6cd27fa8f,2018-01-26 22:43:51,9
540316,src_com_android_bluetooth_a2dp_A2dpService.java,"public void setCodecConfigPreference(android.bluetooth.BluetoothCodecConfig codecConfig) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""setCodecConfigPreference(): "" + (java.util.Objects.toString(codecConfig)))); } mStateMachine.setCodecConfigPreference(codecConfig); }",4032fe64a14acd4c99dabd3c66aa8ae047707302,"public void setCodecConfigPreference(android.bluetooth.BluetoothCodecConfig codecConfig) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""setCodecConfigPreference(): "" + (java.util.Objects.toString(codecConfig)))); } mA2dpCodecConfig.setCodecConfigPreference(codecConfig); }",934e8db3319a04a8277ed86bffa5926a9ec4a757,"public void setCodecConfigPreference(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothCodecConfig codecConfig) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (((""setCodecConfigPreference("" + device) + ""): "") + (java.util.Objects.toString(codecConfig)))); } if (device == null) { device = mActiveDevice; } if (device == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ""Cannot set codec config preference: no active A2DP device""); return; } mA2dpCodecConfig.setCodecConfigPreference(device, codecConfig); }",897cd92022215ac31efc9e94beb3a78949df46df,2018-01-26 22:43:51,9
540316,src_com_android_bluetooth_a2dp_A2dpService.java,"public void disableOptionalCodecs() { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ""disableOptionalCodecs()""); } mStateMachine.disableOptionalCodecs(); }",9c73f08fd561f96b3771a02b33f24ed81341e15e,"public void disableOptionalCodecs() { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ""disableOptionalCodecs()""); } mA2dpCodecConfig.disableOptionalCodecs(); }",6ab372691e2530d09077fd878db10cd30be20b12,"public void disableOptionalCodecs(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ((""disableOptionalCodecs("" + device) + "")"")); } if (device == null) { device = mActiveDevice; } if (device == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ""Cannot disable optional codecs: no active A2DP device""); return; } mA2dpCodecConfig.disableOptionalCodecs(device); }",1db800d3d58d94914d99e3cce4816c55a0ac6dd2,2018-01-26 22:43:51,9
540316,src_com_android_bluetooth_a2dp_A2dpStateMachine.java,"public void dump(java.lang.StringBuilder sb) { com.android.bluetooth.btservice.ProfileService.println(sb, (""mCurrentDevice: "" + (mCurrentDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, (""mTargetDevice: "" + (mTargetDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, (""mIncomingDevice: "" + (mIncomingDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, (""mPlayingA2dpDevice: "" + (mPlayingA2dpDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, (""StateMachine: "" + (this.toString()))); }",d9ce337e1dc8fa8bca29775b68b54a6e277b4296,"public void dump(java.lang.StringBuilder sb) { com.android.bluetooth.btservice.ProfileService.println(sb, (""mDevice: "" + (mDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, ("" StateMachine: "" + (this.toString()))); com.android.bluetooth.btservice.ProfileService.println(sb, ("" mIsPlaying: "" + (mIsPlaying))); synchronized(this) { if ((mCodecStatus) != null) { com.android.bluetooth.btservice.ProfileService.println(sb, ("" mCodecConfig: "" + (mCodecStatus.getCodecConfig()))); } } }",6a8ed85d10de38e47061528a7a1d032cad8ab70a,"public void dump(java.lang.StringBuilder sb) { com.android.bluetooth.btservice.ProfileService.println(sb, (""mDevice: "" + (mDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, ("" StateMachine: "" + (this.toString()))); com.android.bluetooth.btservice.ProfileService.println(sb, ("" mIsPlaying: "" + (mIsPlaying))); synchronized(this) { if ((mCodecStatus) != null) { com.android.bluetooth.btservice.ProfileService.println(sb, ("" mCodecConfig: "" + (mCodecStatus.getCodecConfig()))); } } com.android.bluetooth.btservice.ProfileService.println(sb, ("" StateMachine: "" + (this))); java.io.StringWriter stringWriter = new java.io.StringWriter(); java.io.PrintWriter printWriter = new java.io.PrintWriter(stringWriter); super.dump(new java.io.FileDescriptor(), printWriter, new java.lang.String[]{ }); printWriter.flush(); stringWriter.flush(); com.android.bluetooth.btservice.ProfileService.println(sb, "" StateMachineLog:""); java.util.Scanner scanner = new java.util.Scanner(stringWriter.toString()); while (scanner.hasNextLine()) { java.lang.String line = scanner.nextLine(); com.android.bluetooth.btservice.ProfileService.println(sb, ("" "" + line)); } scanner.close(); }",45b2dce2144c4ea7b88d25c359204ce802b56feb,2018-01-26 22:43:51,9
540316,src_com_android_bluetooth_a2dp_A2dpService.java,"public void enableOptionalCodecs() { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ""enableOptionalCodecs()""); } mStateMachine.enableOptionalCodecs(); }",1b1a649ad9a4e2ec7e4eab0a70559add11abe500,"public void enableOptionalCodecs() { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ""enableOptionalCodecs()""); } mA2dpCodecConfig.enableOptionalCodecs(); }",c3e9bcfb2a2b4e6e098ab3f88e7ac74b1c3fbb85,"public void enableOptionalCodecs(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ((""enableOptionalCodecs("" + device) + "")"")); } if (device == null) { device = mActiveDevice; } if (device == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ""Cannot enable optional codecs: no active A2DP device""); return; } mA2dpCodecConfig.enableOptionalCodecs(device); }",0ac5d775866766178f5370b5756ee5f815e51bab,2018-01-26 22:43:51,9
540316,src_com_android_bluetooth_a2dp_A2dpService.java,"@java.lang.Override protected boolean cleanup() { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ""cleanup()""); } if ((mConnectionStateChangedReceiver) != null) { unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; } if ((mStateMachine) != null) { mStateMachine.cleanup(); mStateMachine = null; } if ((mAvrcp) != null) { mAvrcp.cleanup(); mAvrcp = null; } com.android.bluetooth.a2dp.A2dpService.clearA2dpService(); return true; }",89a95837db086761a9a57f864f38e65c65c91607,"@java.lang.Override protected boolean cleanup() { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ""cleanup()""); } if ((mBondStateChangedReceiver) != null) { unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; } if ((mConnectionStateChangedReceiver) != null) { unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; } for (java.util.Iterator<java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.a2dp.A2dpStateMachine>> it = mStateMachines.entrySet().iterator(); it.hasNext();) { com.android.bluetooth.a2dp.A2dpStateMachine sm = it.next().getValue(); sm.cleanup(); it.remove(); } mA2dpNativeInterface.cleanup(); if ((mAvrcp) != null) { mAvrcp.cleanup(); mAvrcp = null; } com.android.bluetooth.a2dp.A2dpService.clearA2dpService(); return true; }",f17ccaadd28491a29c951978333cea19cedfec9e,"@java.lang.Override protected void cleanup() { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ""cleanup()""); } if ((mConnectionStateChangedReceiver) != null) { unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; } if ((mBondStateChangedReceiver) != null) { unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; } for (java.util.Iterator<java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.a2dp.A2dpStateMachine>> it = mStateMachines.entrySet().iterator(); it.hasNext();) { com.android.bluetooth.a2dp.A2dpStateMachine sm = it.next().getValue(); sm.cleanup(); it.remove(); } mA2dpNativeInterface.cleanup(); if ((mAvrcp) != null) { mAvrcp.cleanup(); mAvrcp = null; } com.android.bluetooth.a2dp.A2dpService.clearA2dpService(); }",bb69675b0adab4125fb33d92a396da7cbbf14480,2018-01-26 22:43:51,9
540316,src_com_android_bluetooth_a2dp_A2dpService.java,"void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { mStateMachine.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); }",44c02da46359e69232e70a34ce798fa06741796d,"void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { synchronized(mStateMachines) { android.bluetooth.BluetoothDevice device = stackEvent.device; if ((stackEvent.type) == (A2dpStackEvent.EVENT_TYPE_CODEC_CONFIG_CHANGED)) { android.bluetooth.BluetoothDevice zeroDevice = mAdapter.getRemoteDevice(""00:00:00:00:00:00""); if ((device == null) || (device.equals(zeroDevice))) { mLocalCodecStatus = stackEvent.codecStatus; return; } } com.android.bluetooth.a2dp.A2dpStateMachine sm = getStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (""Cannot process stack event: no state machine: "" + stackEvent)); return; } sm.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); } }",c2f37620c7e046e734c6adf54ad23ebd59f317c1,"void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { synchronized(mStateMachines) { android.bluetooth.BluetoothDevice device = stackEvent.device; com.android.bluetooth.a2dp.A2dpStateMachine sm = getOrCreateStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (""Cannot process stack event: no state machine: "" + stackEvent)); return; } sm.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); } }",41609d90a1882aace0b03a6a3ec57f9e2fae9999,2018-01-26 22:43:51,9
540316,src_com_android_bluetooth_a2dp_A2dpStateMachine.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void processConnectionEvent(int state) { switch (state) { case A2dpStackEvent.CONNECTION_STATE_DISCONNECTED : android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Disconnected: "" + (mDevice))); transitionTo(mDisconnected); break; case A2dpStackEvent.CONNECTION_STATE_CONNECTED : android.util.Log.w(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Disconnecting interrupted: device is connected: "" + (mDevice))); transitionTo(mConnected); break; case A2dpStackEvent.CONNECTION_STATE_CONNECTING : android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Disconnecting interrupted: try to reconnect: "" + (mDevice))); transitionTo(mConnecting); break; case A2dpStackEvent.CONNECTION_STATE_DISCONNECTING : break; default : android.util.Log.e(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Incorrect state: "" + state)); break; } }",49de24378eaa754c4e7374d6996146d8050b175b,"private void processConnectionEvent(int state) { switch (state) { case A2dpStackEvent.CONNECTION_STATE_DISCONNECTED : android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Disconnected: "" + (mDevice))); transitionTo(mDisconnected); break; case A2dpStackEvent.CONNECTION_STATE_CONNECTED : if (okToConnect(mDevice)) { android.util.Log.w(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Disconnecting interrupted: device is connected: "" + (mDevice))); transitionTo(mConnected); } else { android.util.Log.w(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Incoming A2DP Connected request rejected: "" + (mDevice))); mA2dpNativeInterface.disconnectA2dp(mDevice); } break; case A2dpStackEvent.CONNECTION_STATE_CONNECTING : if (okToConnect(mDevice)) { android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Disconnecting interrupted: try to reconnect: "" + (mDevice))); transitionTo(mConnecting); } else { android.util.Log.w(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Incoming A2DP Connecting request rejected: "" + (mDevice))); mA2dpNativeInterface.disconnectA2dp(mDevice); } break; case A2dpStackEvent.CONNECTION_STATE_DISCONNECTING : break; default : android.util.Log.e(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Incorrect state: "" + state)); break; } }",fb347783e4af6098b2547e6867a2c91b37358f17,2018-01-26 22:43:51,9
540316,src_com_android_bluetooth_a2dp_A2dpService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.android.bluetooth.a2dp.A2dpStateMachine getStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ""getStateMachine failed: device cannot be null""); return null; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachines.get(device); if (sm != null) { return sm; } if ((mStateMachines.size()) > (com.android.bluetooth.a2dp.A2dpService.MAX_A2DP_STATE_MACHINES)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (""Maximum number of A2DP state machines reached: "" + (com.android.bluetooth.a2dp.A2dpService.MAX_A2DP_STATE_MACHINES))); return null; } if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""Creating a new state machine for "" + device)); } sm = com.android.bluetooth.a2dp.A2dpStateMachine.make(device, this, this, mA2dpNativeInterface, mStateMachinesThread.getLooper()); mStateMachines.put(device, sm); return sm; } }",0b23010138b541a0d140cf6d596f7575a06f4537,"private com.android.bluetooth.a2dp.A2dpStateMachine getOrCreateStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ""getOrCreateStateMachine failed: device cannot be null""); return null; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachines.get(device); if (sm != null) { return sm; } if ((mStateMachines.size()) > (com.android.bluetooth.a2dp.A2dpService.MAX_A2DP_STATE_MACHINES)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (""Maximum number of A2DP state machines reached: "" + (com.android.bluetooth.a2dp.A2dpService.MAX_A2DP_STATE_MACHINES))); return null; } if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""Creating a new state machine for "" + device)); } sm = com.android.bluetooth.a2dp.A2dpStateMachine.make(device, this, this, mA2dpNativeInterface, mStateMachinesThread.getLooper()); mStateMachines.put(device, sm); return sm; } }",1e19a057d5a437c3ababd084ed94bbe7fa20dd54,2018-01-26 22:43:51,9
540316,src_com_android_bluetooth_a2dp_A2dpService.java,"public boolean connect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""connect(): "" + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { return false; } android.os.ParcelUuid[] featureUuids = device.getUuids(); if ((android.bluetooth.BluetoothUuid.containsAnyUuid(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_UUID)) && (!(android.bluetooth.BluetoothUuid.containsAllUuids(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_SINK_UUIDS)))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ""Remote does not have A2dp Sink UUID""); return false; } int connectionState = mStateMachine.getConnectionState(device); if ((connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) || (connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mStateMachine.sendMessage(A2dpStateMachine.CONNECT, device); return true; }",be0e60935b4885620c73d67dda1a581af4f5f1cb,"public boolean connect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""connect(): "" + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { return false; } android.os.ParcelUuid[] featureUuids = device.getUuids(); if ((android.bluetooth.BluetoothUuid.containsAnyUuid(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_UUID)) && (!(android.bluetooth.BluetoothUuid.containsAllUuids(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_SINK_UUIDS)))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ""Remote does not have A2DP Sink UUID""); return false; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : no state machine"")); return false; } int connectionState = smConnect.getConnectionState(); if ((connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) || (connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } for (com.android.bluetooth.a2dp.A2dpStateMachine smDisconnect : mStateMachines.values()) { if (!(smDisconnect.getDevice().equals(device))) { smDisconnect.sendMessage(A2dpStateMachine.DISCONNECT); } } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; } }",07cd2f34f3a8a692b2d4b54a7f59081c8f474c19,"public boolean connect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""connect(): "" + device)); } if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { return false; } android.os.ParcelUuid[] featureUuids = device.getUuids(); if ((android.bluetooth.BluetoothUuid.containsAnyUuid(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_UUID)) && (!(android.bluetooth.BluetoothUuid.containsAllUuids(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_SINK_UUIDS)))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : Remote does not have A2DP Sink UUID"")); return false; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getOrCreateStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : no state machine"")); return false; } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; } }",63137f35692794ada487fb1b705859e488d77190,2018-01-26 22:43:51,9
602028,telephony_java_android_telephony_data_DataService.java,"@java.lang.Override public void getDataCallList(int slotId, android.telephony.data.IDataServiceCallback callback) { mHandler.obtainMessage(android.telephony.data.DataService.DATA_SERVICE_REQUEST_GET_DATA_CALL_LIST, slotId, 0, callback).sendToTarget(); }",a0073221b647c77cf76e7b72286d536dff28a9aa,"@java.lang.Override public void getDataCallList(int slotId, android.telephony.data.IDataServiceCallback callback) { if (callback == null) { loge(""Callback is null""); return; } mHandler.obtainMessage(android.telephony.data.DataService.DATA_SERVICE_REQUEST_GET_DATA_CALL_LIST, slotId, 0, callback).sendToTarget(); }",81934dff052d9b11093c1c415e1d37818e5c912a,"@java.lang.Override public void getDataCallList(int slotId, android.telephony.data.IDataServiceCallback callback) { if (callback == null) { loge(""getDataCallList: callback is null""); return; } mHandler.obtainMessage(android.telephony.data.DataService.DATA_SERVICE_REQUEST_GET_DATA_CALL_LIST, slotId, 0, callback).sendToTarget(); }",be3f76ec86351799b94776a439cc0c9ec04b6c27,2018-01-27 03:24:50,4
602026,test_983-source-transform-verify_src_art_Test983.java,public static void doTest() { art.Test983.Transform abc = new art.Test983.Transform(); art.Redefinition.enableCommonRetransformation(true); art.Redefinition.doCommonClassRetransformation(art.Test983.Transform.class); art.Redefinition.doCommonClassRetransformation(java.lang.Object.class); art.Redefinition.enableCommonRetransformation(false); },803f7d7117559c434fc5a8b63282828081763fc4,public static void doTest() throws java.lang.Exception { art.Redefinition.enableCommonRetransformation(true); art.Redefinition.doCommonClassRetransformation(art.Test983.Transform.class); art.Redefinition.doCommonClassRetransformation(java.lang.Object.class); art.Redefinition.doCommonClassRetransformation(java.lang.ClassLoader.class); art.Redefinition.enableCommonRetransformation(false); },62e1dc6d0edcc9c4d47433a735f394fe6d09b087,public static void doTest() { art.Redefinition.enableCommonRetransformation(true); art.Redefinition.doCommonClassRetransformation(art.Test983.Transform.class); art.Redefinition.doCommonClassRetransformation(java.lang.Object.class); art.Redefinition.doCommonClassRetransformation(java.lang.ClassLoader.class); art.Redefinition.enableCommonRetransformation(false); },97fbbf3ecf652b7446e6d696da22565d4c62a377,2018-01-29 23:49:49,6
602026,test_983-source-transform-verify_src_art_Test983.java,public static void run() { art.Test983.doTest(); },baae49bdc1fc5f9d4df3479c0c95a633f824afca,public static void run() throws java.lang.Exception { art.Test983.doTest(); },289c409d20f09a5d08b36bcaf0102b749057e9be,public static void run() { art.Test983.doTest(); },baae49bdc1fc5f9d4df3479c0c95a633f824afca,2018-01-29 23:49:49,6
602297,tests_net_java_com_android_server_connectivity_IpConnectivityMetricsTest.java,"com.android.server.connectivity.NetworkAgentInfo makeNai(int netId, int score, boolean ipv4, boolean ipv6, long transports) { com.android.server.connectivity.NetworkAgentInfo nai = mock(com.android.server.connectivity.NetworkAgentInfo.class); when(nai.network()).thenReturn(new android.net.Network(netId)); when(nai.getCurrentScore()).thenReturn(score); nai.linkProperties = new android.net.LinkProperties(); nai.networkCapabilities = new android.net.NetworkCapabilities(); for (int t : com.android.internal.util.BitUtils.unpackBits(transports)) { nai.networkCapabilities.addTransportType(t); } if (ipv4) { nai.linkProperties.addLinkAddress(new android.net.LinkAddress(""192.0.2.12/24"")); nai.linkProperties.addRoute(new android.net.RouteInfo(new android.net.IpPrefix(""0.0.0.0/0""))); } if (ipv6) { nai.linkProperties.addLinkAddress(new android.net.LinkAddress(""2001:db8:dead:beef:f00::a0/64"")); nai.linkProperties.addRoute(new android.net.RouteInfo(new android.net.IpPrefix(""::/0""))); } return nai; }",9d480f88d0fd0462f391566f0ed4112d06c14257,"com.android.server.connectivity.NetworkAgentInfo makeNai(int netId, int score, com.android.server.connectivity.IpConnectivityMetricsTest.IP ip, long transports) { com.android.server.connectivity.NetworkAgentInfo nai = mock(com.android.server.connectivity.NetworkAgentInfo.class); when(nai.network()).thenReturn(new android.net.Network(netId)); when(nai.getCurrentScore()).thenReturn(score); nai.linkProperties = new android.net.LinkProperties(); nai.networkCapabilities = new android.net.NetworkCapabilities(); nai.lastValidated = true; for (int t : com.android.internal.util.BitUtils.unpackBits(transports)) { nai.networkCapabilities.addTransportType(t); } if ((ip == (com.android.server.connectivity.IpConnectivityMetricsTest.IP.V4)) || (ip == (com.android.server.connectivity.IpConnectivityMetricsTest.IP.DUAL))) { nai.linkProperties.addLinkAddress(new android.net.LinkAddress(""192.0.2.12/24"")); nai.linkProperties.addRoute(new android.net.RouteInfo(new android.net.IpPrefix(""0.0.0.0/0""))); } if ((ip == (com.android.server.connectivity.IpConnectivityMetricsTest.IP.V6)) || (ip == (com.android.server.connectivity.IpConnectivityMetricsTest.IP.DUAL))) { nai.linkProperties.addLinkAddress(new android.net.LinkAddress(""2001:db8:dead:beef:f00::a0/64"")); nai.linkProperties.addRoute(new android.net.RouteInfo(new android.net.IpPrefix(""::/0""))); } return nai; }",555e79fbe8d087f315ce8925bde887a3d3c0bf16,"com.android.server.connectivity.NetworkAgentInfo makeNai(int netId, int score, boolean ipv4, boolean ipv6, long transports) { com.android.server.connectivity.NetworkAgentInfo nai = mock(com.android.server.connectivity.NetworkAgentInfo.class); when(nai.network()).thenReturn(new android.net.Network(netId)); when(nai.getCurrentScore()).thenReturn(score); nai.linkProperties = new android.net.LinkProperties(); nai.networkCapabilities = new android.net.NetworkCapabilities(); nai.lastValidated = true; for (int t : com.android.internal.util.BitUtils.unpackBits(transports)) { nai.networkCapabilities.addTransportType(t); } if (ipv4) { nai.linkProperties.addLinkAddress(new android.net.LinkAddress(""192.0.2.12/24"")); nai.linkProperties.addRoute(new android.net.RouteInfo(new android.net.IpPrefix(""0.0.0.0/0""))); } if (ipv6) { nai.linkProperties.addLinkAddress(new android.net.LinkAddress(""2001:db8:dead:beef:f00::a0/64"")); nai.linkProperties.addRoute(new android.net.RouteInfo(new android.net.IpPrefix(""::/0""))); } return nai; }",459690a53b78ee4e44f0e1b6f8bad0e0dc871bb9,2018-01-30 00:26:29,3
600737,luni_src_test_java_libcore_java_text_SimpleDateFormatTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testParseUtcLong() throws java.lang.Exception { java.lang.String roundTripFormat = ""yyyyMMdd HH:mm:ss.SSSS zzzz""; libcore.java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.ENGLISH, roundTripFormat); libcore.java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.SIMPLIFIED_CHINESE, roundTripFormat); }",e513ed6f68a9c0ff796af0b0ac0fe664addc1aa3,"public void testParseUtcLong() throws java.lang.Exception { java.lang.String timeZonePattern = ""zzzz""; int timeZoneStyle = java.util.TimeZone.LONG; libcore.java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.ENGLISH, timeZonePattern, timeZoneStyle, ""Coordinated Universal Time""); libcore.java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.FRENCH, timeZonePattern, timeZoneStyle, ""Temps universel coordonné""); libcore.java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.SIMPLIFIED_CHINESE, timeZonePattern, timeZoneStyle, ""协调世界时""); }",552e844dd1dace146c7be7b63edaeba9c4ed28dc,2018-01-30 13:21:17,3
600737,luni_src_test_java_libcore_java_text_SimpleDateFormatTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testParseUtcShort() throws java.lang.Exception { java.lang.String roundTripFormat = ""yyyyMMdd HH:mm:ss.SSSS z""; libcore.java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.ENGLISH, roundTripFormat); libcore.java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.SIMPLIFIED_CHINESE, roundTripFormat); }",eaee354ceb8da10ad2ed00e486c5b7d26a68ac7e,"public void testParseUtcShort() throws java.lang.Exception { java.lang.String timeZonePattern = ""z""; int timeZoneStyle = java.util.TimeZone.SHORT; libcore.java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.ENGLISH, timeZonePattern, timeZoneStyle, ""UTC""); libcore.java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.FRENCH, timeZonePattern, timeZoneStyle, ""UTC""); libcore.java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.SIMPLIFIED_CHINESE, timeZonePattern, timeZoneStyle, ""UTC""); }",251f62e88de9ba0e99e83b7f5e9b13832df363e0,2018-01-30 13:21:17,3
600737,luni_src_test_java_libcore_java_text_SimpleDateFormatTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void doUtcParsingTest(java.util.Locale locale, java.lang.String roundTripFormat) throws java.lang.Exception { java.util.TimeZone nonUtcZone = java.util.TimeZone.getTimeZone(""America/Los_Angeles""); java.text.DateFormat formatter = new java.text.SimpleDateFormat(roundTripFormat, locale); java.text.DateFormat parser = new java.text.SimpleDateFormat(roundTripFormat, locale); for (java.lang.String timeZoneId : libcore.java.text.SimpleDateFormatTest.UTC_ZONE_IDS) { java.util.TimeZone timeZone = java.util.TimeZone.getTimeZone(timeZoneId); assertEquals(timeZoneId, timeZone.getID()); java.util.Date dateToFormat = new java.util.Date(); formatter.setTimeZone(timeZone); java.lang.String dateTimeString = formatter.format(dateToFormat); parser.setTimeZone(nonUtcZone); java.util.Date parsedDate = parser.parse(dateTimeString); assertEquals(dateToFormat, parsedDate); } }",a4f0588c0705a45dbc2cd6302f456fbb8a6e8748,"private static void doUtcParsingTest(java.util.Locale locale, java.lang.String timeZonePattern, int timeZoneStyle, java.lang.String timeZoneString) throws java.lang.Exception { java.lang.String basePattern = ""yyyyMMdd HH:mm:ss.SSS""; java.lang.String fullPattern = (basePattern + "" "") + timeZonePattern; java.util.TimeZone nonUtcZone = java.util.TimeZone.getTimeZone(""America/Los_Angeles""); java.text.DateFormat formatter = new java.text.SimpleDateFormat(basePattern, locale); java.text.DateFormat parser = new java.text.SimpleDateFormat(fullPattern, locale); for (java.lang.String timeZoneId : libcore.java.text.SimpleDateFormatTest.UTC_ZONE_IDS) { java.util.TimeZone timeZone = java.util.TimeZone.getTimeZone(timeZoneId); assertEquals(timeZoneId, timeZone.getID()); assertEquals(timeZoneString, timeZone.getDisplayName(false, timeZoneStyle, locale)); java.util.Date dateToFormat = new java.util.Date(); formatter.setTimeZone(timeZone); java.lang.String dateTimeString = formatter.format(dateToFormat); java.lang.String dateTimeStringWithTimeZone = (dateTimeString + "" "") + timeZoneString; parser.setTimeZone(nonUtcZone); java.util.Date parsedDate = parser.parse(dateTimeStringWithTimeZone); assertEquals(dateToFormat, parsedDate); } }",36006860496d01f2296d127b5dbbbd2e857bf691,2018-01-30 13:21:17,3
433584,src_java_com_android_internal_telephony_RIL.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void stopNattKeepalive(int sessionHandle, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy == null) { android.telephony.Rlog.e(com.android.internal.telephony.RIL.RILJ_LOG_TAG, ""Radio Proxy object is null!""); return; } android.hardware.radio.V1_1.IRadio radioProxy11 = android.hardware.radio.V1_1.IRadio.castFrom(radioProxy); if (radioProxy11 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } return; } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_STOP_KEEPALIVE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy11.stopKeepalive(rr.mSerial, sessionHandle); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""stopNattKeepalive"", e); } }",3836e466d1f26d70a6e33ab29ed27cc0197f5c3c,"@java.lang.Override public void stopNattKeepalive(int sessionHandle, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy == null) { android.telephony.Rlog.e(com.android.internal.telephony.RIL.RILJ_LOG_TAG, ""Radio Proxy object is null!""); return; } android.hardware.radio.V1_1.IRadio radioProxy11 = android.hardware.radio.V1_1.IRadio.castFrom(radioProxy); if (radioProxy11 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } return; } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_STOP_KEEPALIVE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy11.stopKeepalive(rr.mSerial, sessionHandle); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""stopNattKeepalive"", e); } }",d7ea242d439f04e54c8632c095a5d11a55c5a4c8,2018-01-30 18:39:06,10
433584,src_java_com_android_internal_telephony_dataconnection_KeepaliveStatus.java,,,"@java.lang.Override public com.android.internal.telephony.dataconnection.KeepaliveStatus createFromParcel(android.os.Parcel source) { return new com.android.internal.telephony.dataconnection.KeepaliveStatus(source.readInt(), source.readInt(), source.readInt()); }",a8144384a7fc29f3716fcdc35f4997d4a0776f60,@java.lang.Override public com.android.internal.telephony.dataconnection.KeepaliveStatus createFromParcel(android.os.Parcel source) { return new com.android.internal.telephony.dataconnection.KeepaliveStatus(source); },84c9793fae450b8abd21b29faab4a571e493c2a0,2018-01-30 18:39:06,10
559359,services_core_java_com_android_server_connectivity_KeepaliveTracker.java,private int checkSourceAddress() { for (java.net.InetAddress address : mNai.linkProperties.getAddresses()) { if (address.equals(mPacket.srcAddress)) { return SUCCESS; } } return ERROR_INVALID_IP_ADDRESS; },e6a2d9cc448012abea7c455d8ae9ebe7107e9203,"private int checkSourceAddress() { for (java.net.InetAddress address : mNai.linkProperties.getAddresses()) { android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, (((""keepalive, comparing"" + address) + "" to "") + (mPacket.srcAddress))); if (address.equals(mPacket.srcAddress)) { android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, ""found a matching address""); return SUCCESS; } } return ERROR_INVALID_IP_ADDRESS; }",e8447077f0ce2a49109671793906e11b7516966b,private int checkSourceAddress() { for (java.net.InetAddress address : mNai.linkProperties.getAddresses()) { if (address.equals(mPacket.srcAddress)) { return SUCCESS; } } return ERROR_INVALID_IP_ADDRESS; },e6a2d9cc448012abea7c455d8ae9ebe7107e9203,2018-01-30 18:39:06,3
559359,core_java_android_net_KeepalivePacketData.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public byte[] getNattKeepalivePacket() throws android.net.KeepalivePacketData.InvalidPacketException { if ((!((srcAddress) instanceof java.net.Inet4Address)) || (!((dstAddress) instanceof java.net.Inet4Address))) { throw new android.net.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_IP_ADDRESS); } if ((dstPort) != (NATT_PORT)) { throw new android.net.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_PORT); } int length = ((android.net.KeepalivePacketData.IPV4_HEADER_LENGTH) + (android.net.KeepalivePacketData.UDP_HEADER_LENGTH)) + 1; java.nio.ByteBuffer buf = java.nio.ByteBuffer.allocate(length); buf.order(java.nio.ByteOrder.BIG_ENDIAN); buf.putShort(((short) (17664))); buf.putShort(((short) (length))); buf.putInt(0); buf.put(((byte) (64))); buf.put(((byte) (OsConstants.IPPROTO_UDP))); int ipChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(this.srcAddress.getAddress()); buf.put(this.dstAddress.getAddress()); buf.putShort(((short) (this.srcPort))); buf.putShort(((short) (this.dstPort))); buf.putShort(((short) (length - 20))); int udpChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(((byte) (255))); buf.putShort(ipChecksumOffset, android.net.util.IpUtils.ipChecksum(buf, 0)); buf.putShort(udpChecksumOffset, android.net.util.IpUtils.udpChecksum(buf, 0, android.net.KeepalivePacketData.IPV4_HEADER_LENGTH)); return buf.array(); }",2d6db0bd23195fe506e69f53c592df803e416aec,"public static android.net.KeepalivePacketData nattKeepalivePacket(java.net.InetAddress srcAddress, int srcPort, java.net.InetAddress dstAddress, int dstPort) throws android.net.KeepalivePacketData.InvalidPacketException { if ((srcAddress instanceof java.net.Inet6Address) && (dstAddress instanceof java.net.Inet6Address)) { return new android.net.KeepalivePacketData(srcAddress, srcPort, dstAddress, dstPort, new byte[0]); } if ((!(srcAddress instanceof java.net.Inet4Address)) || (!(dstAddress instanceof java.net.Inet4Address))) { throw new android.net.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_IP_ADDRESS); } if (dstPort != (NATT_PORT)) { throw new android.net.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_PORT); } int length = ((android.net.KeepalivePacketData.IPV4_HEADER_LENGTH) + (android.net.KeepalivePacketData.UDP_HEADER_LENGTH)) + 1; java.nio.ByteBuffer buf = java.nio.ByteBuffer.allocate(length); buf.order(java.nio.ByteOrder.BIG_ENDIAN); buf.putShort(((short) (17664))); buf.putShort(((short) (length))); buf.putInt(0); buf.put(((byte) (64))); buf.put(((byte) (OsConstants.IPPROTO_UDP))); int ipChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(srcAddress.getAddress()); buf.put(dstAddress.getAddress()); buf.putShort(((short) (srcPort))); buf.putShort(((short) (dstPort))); buf.putShort(((short) (length - 20))); int udpChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(((byte) (255))); buf.putShort(ipChecksumOffset, android.net.util.IpUtils.ipChecksum(buf, 0)); buf.putShort(udpChecksumOffset, android.net.util.IpUtils.udpChecksum(buf, 0, android.net.KeepalivePacketData.IPV4_HEADER_LENGTH)); return new android.net.KeepalivePacketData(srcAddress, srcPort, dstAddress, dstPort, buf.array()); }",26b2c7490a856c3ef1dd5c02638ea4945deae7a1,2018-01-30 18:39:06,3
559359,services_core_java_com_android_server_connectivity_KeepaliveTracker.java,private int isValid() { synchronized(mNai) { int error = checkInterval(); if (error == (SUCCESS)) error = checkNetworkConnected(); if (error == (SUCCESS)) error = checkSourceAddress(); return error; } },b35c006f1b2732108e5a755cf4a0e287e6d2bb7b,private int isValid() { synchronized(mNai) { int error = checkInterval(); if (error == (SUCCESS)) error = checkNetworkConnected(); if (error == (SUCCESS)) error = checkSourceAddress(); return SUCCESS; } },754312c1463c693fe6a5c50c215fafc04a897d5e,private int isValid() { synchronized(mNai) { int error = checkInterval(); if (error == (SUCCESS)) error = checkNetworkConnected(); if (error == (SUCCESS)) error = checkSourceAddress(); return error; } },b35c006f1b2732108e5a755cf4a0e287e6d2bb7b,2018-01-30 18:39:06,3
558961,service_java_com_android_server_wifi_WifiStateMachine.java,"int startWifiIPPacketOffload(int slot, android.net.KeepalivePacketData packetData, int intervalSeconds) { int ret = mWifiNative.startSendingOffloadedPacket(slot, packetData, (intervalSeconds * 1000)); if (ret != 0) { loge((((((""startWifiIPPacketOffload("" + slot) + "", "") + intervalSeconds) + ""): hardware error "") + ret)); return ConnectivityManager.PacketKeepalive.ERROR_HARDWARE_ERROR; } else { return ConnectivityManager.PacketKeepalive.SUCCESS; } }",f7ef4911404e2c0dc15ad9d8832a7020463a532c,"int startWifiIPPacketOffload(int slot, android.net.KeepalivePacketData packetData, int intervalSeconds) { byte[] packet = null; byte[] dstMac = null; try { packet = packetData.getNattKeepalivePacket(); dstMac = getDstMacForKeepalive(packetData); } catch (android.net.KeepalivePacketData e) { return e.error; } int ret = mWifiNative.startSendingOffloadedPacket(slot, dstMac, packet, packetData.protocol, (intervalSeconds * 1000)); if (ret != 0) { loge((((((""startWifiIPPacketOffload("" + slot) + "", "") + intervalSeconds) + ""): hardware error "") + ret)); return ConnectivityManager.PacketKeepalive.ERROR_HARDWARE_ERROR; } else { return ConnectivityManager.PacketKeepalive.SUCCESS; } }",03d42121b803bb3e328c7c0c19d750f607389138,"int startWifiIPPacketOffload(int slot, android.net.KeepalivePacketData packetData, int intervalSeconds) { byte[] packet = null; byte[] dstMac = null; int proto = 0; try { packet = packetData.getPacket(); dstMac = getDstMacForKeepalive(packetData); proto = com.android.server.wifi.WifiStateMachine.getEtherProtoForKeepalive(packetData); } catch (android.net.KeepalivePacketData e) { return e.error; } int ret = mWifiNative.startSendingOffloadedPacket(slot, dstMac, packet, proto, (intervalSeconds * 1000)); if (ret != 0) { loge((((((""startWifiIPPacketOffload("" + slot) + "", "") + intervalSeconds) + ""): hardware error "") + ret)); return ConnectivityManager.PacketKeepalive.ERROR_HARDWARE_ERROR; } else { return ConnectivityManager.PacketKeepalive.SUCCESS; } }",ed46a1ffaf8193527665b7b3366dfc4aa1fde484,2018-01-30 18:39:06,3
559359,services_core_java_com_android_server_connectivity_KeepaliveTracker.java,"public java.lang.String toString() { return new java.lang.StringBuffer(""KeepaliveInfo ["").append("" network="").append(mNai.network).append("" isStarted="").append(isStarted).append("" "").append(android.net.util.IpUtils.addressAndPortToString(mPacket.srcAddress, mPacket.srcPort)).append(""->"").append(android.net.util.IpUtils.addressAndPortToString(mPacket.dstAddress, mPacket.dstPort)).append(("" interval="" + (mInterval))).append(("" data="" + (com.android.internal.util.HexDump.toHexString(mPacket.data)))).append("" uid="").append(mUid).append("" pid="").append(mPid).append("" ]"").toString(); }",ce581dc12e0b78a38b97416a373746d199a2655e,"public java.lang.String toString() { return new java.lang.StringBuffer(""KeepaliveInfo ["").append("" network="").append(mNai.network).append("" isStarted="").append(isStarted).append("" "").append(android.net.util.IpUtils.addressAndPortToString(mPacket.srcAddress, mPacket.srcPort)).append(""->"").append(android.net.util.IpUtils.addressAndPortToString(mPacket.dstAddress, mPacket.dstPort)).append(("" interval="" + (mInterval))).append("" uid="").append(mUid).append("" pid="").append(mPid).append("" ]"").toString(); }",32c111c418e40b2000a289580216c16aec2aeb55,"public java.lang.String toString() { return new java.lang.StringBuffer(""KeepaliveInfo ["").append("" network="").append(mNai.network).append("" isStarted="").append(isStarted).append("" "").append(android.net.util.IpUtils.addressAndPortToString(mPacket.srcAddress, mPacket.srcPort)).append(""->"").append(android.net.util.IpUtils.addressAndPortToString(mPacket.dstAddress, mPacket.dstPort)).append(("" interval="" + (mInterval))).append(("" packetData="" + (com.android.internal.util.HexDump.toHexString(mPacket.getPacket())))).append("" uid="").append(mUid).append("" pid="").append(mPid).append("" ]"").toString(); }",5d8457626ecbf8424d960fd02e79eefed87eb6cd,2018-01-30 18:39:06,3
559359,services_core_java_com_android_server_connectivity_KeepaliveTracker.java,"public void startNattKeepalive(com.android.server.connectivity.NetworkAgentInfo nai, int intervalSeconds, android.os.Messenger messenger, android.os.IBinder binder, java.lang.String srcAddrString, int srcPort, java.lang.String dstAddrString, int dstPort) { if (nai == null) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_NETWORK); return; } java.net.InetAddress srcAddress; java.net.InetAddress dstAddress; try { srcAddress = android.net.NetworkUtils.numericToInetAddress(srcAddrString); dstAddress = android.net.NetworkUtils.numericToInetAddress(dstAddrString); } catch (java.lang.IllegalArgumentException e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_IP_ADDRESS); return; } android.net.KeepalivePacketData packet; try { packet = android.net.KeepalivePacketData.nattKeepalivePacket(srcAddress, srcPort, dstAddress, com.android.server.connectivity.NATT_PORT); } catch (android.net.KeepalivePacketData e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, e.error); return; } com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo ki = new com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo(messenger, binder, nai, packet, intervalSeconds); android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, (""Created keepalive: "" + (ki.toString()))); mConnectivityServiceHandler.obtainMessage(NetworkAgent.CMD_START_PACKET_KEEPALIVE, ki).sendToTarget(); }",93f2bc28ffd8e58a4c68e800d1bdfbbea84a7c72,"public void startNattKeepalive(com.android.server.connectivity.NetworkAgentInfo nai, int intervalSeconds, android.os.Messenger messenger, android.os.IBinder binder, java.lang.String srcAddrString, int srcPort, java.lang.String dstAddrString, int dstPort) { if (nai == null) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_NETWORK); return; } java.net.InetAddress srcAddress; java.net.InetAddress dstAddress; try { android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, (((""SourceAddr: "" + srcAddrString) + ""DstAddr: "") + dstAddrString)); srcAddress = android.net.NetworkUtils.numericToInetAddress(srcAddrString); dstAddress = android.net.NetworkUtils.numericToInetAddress(dstAddrString); } catch (java.lang.IllegalArgumentException e) { android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, ""Couldn't parse ip addresses""); notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_IP_ADDRESS); return; } android.net.KeepalivePacketData packet; try { packet = new android.net.KeepalivePacketData(srcAddress, srcPort, dstAddress, NATT_PORT); } catch (android.net.KeepalivePacketData e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, e.error); return; } com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo ki = new com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo(messenger, binder, nai, packet, intervalSeconds); android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, (""Created keepalive: "" + (ki.toString()))); mConnectivityServiceHandler.obtainMessage(NetworkAgent.CMD_START_PACKET_KEEPALIVE, ki).sendToTarget(); }",d8c9b22cf006b25dc3fb8897b0fe144cb668babe,"public void startNattKeepalive(com.android.server.connectivity.NetworkAgentInfo nai, int intervalSeconds, android.os.Messenger messenger, android.os.IBinder binder, java.lang.String srcAddrString, int srcPort, java.lang.String dstAddrString, int dstPort) { if (nai == null) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_NETWORK); return; } java.net.InetAddress srcAddress; java.net.InetAddress dstAddress; try { srcAddress = android.net.NetworkUtils.numericToInetAddress(srcAddrString); dstAddress = android.net.NetworkUtils.numericToInetAddress(dstAddrString); } catch (java.lang.IllegalArgumentException e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_IP_ADDRESS); return; } android.net.KeepalivePacketData packet; try { packet = android.net.KeepalivePacketData.nattKeepalivePacket(srcAddress, srcPort, dstAddress, com.android.server.connectivity.NATT_PORT); } catch (android.net.KeepalivePacketData e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, e.error); return; } com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo ki = new com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo(messenger, binder, nai, packet, intervalSeconds); android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, (""Created keepalive: "" + (ki.toString()))); mConnectivityServiceHandler.obtainMessage(NetworkAgent.CMD_START_PACKET_KEEPALIVE, ki).sendToTarget(); }",93f2bc28ffd8e58a4c68e800d1bdfbbea84a7c72,2018-01-30 18:39:06,3
559359,services_core_java_com_android_server_connectivity_KeepaliveTracker.java,private int checkNetworkConnected() { if (!(mNai.networkInfo.isConnectedOrConnecting())) { return ERROR_INVALID_NETWORK; } return SUCCESS; },76fc96142610c37ed0f98596c276e1a3c3f70849,"private int checkNetworkConnected() { android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, ""checking network connnection""); if (!(mNai.networkInfo.isConnectedOrConnecting())) { android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, ""network not connected""); return ERROR_INVALID_NETWORK; } return SUCCESS; }",dd5570d0b4f772471840d1bbd47523433cbbef3c,private int checkNetworkConnected() { if (!(mNai.networkInfo.isConnectedOrConnecting())) { return ERROR_INVALID_NETWORK; } return SUCCESS; },76fc96142610c37ed0f98596c276e1a3c3f70849,2018-01-30 18:39:06,3
433584,src_java_com_android_internal_telephony_RadioResponse.java,"public void startKeepaliveResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, android.hardware.radio.V1_1.KeepaliveStatus keepaliveStatus) { throw new java.lang.UnsupportedOperationException(""startKeepaliveResponse not implemented""); }",9089882d7c5f702a0bb064fd09905f07fd544efb,"public void startKeepaliveResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, android.hardware.radio.V1_1.KeepaliveStatus keepaliveStatus) { com.android.internal.telephony.RILRequest rr = mRil.processResponse(responseInfo); if (rr == null) { return; } if ((responseInfo.error) == (android.hardware.radio.V1_0.RadioError.NONE)) { com.android.internal.telephony.dataconnection.KeepaliveStatus ret = new com.android.internal.telephony.dataconnection.KeepaliveStatus(keepaliveStatus.sessionHandle, keepaliveStatus.code); com.android.internal.telephony.RadioResponse.sendMessageResponse(rr.mResult, ret); mRil.processResponseDone(rr, responseInfo, ret); } else { } }",0657264deba5ed963caf43f9339e8d0eeea367e8,"public void startKeepaliveResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, android.hardware.radio.V1_1.KeepaliveStatus keepaliveStatus) { com.android.internal.telephony.RILRequest rr = mRil.processResponse(responseInfo); if (rr == null) { return; } com.android.internal.telephony.dataconnection.KeepaliveStatus ret = null; switch (responseInfo.error) { case android.hardware.radio.V1_0.RadioError.NONE : int convertedStatus = convertHalKeepaliveStatusCode(keepaliveStatus.code); if (convertedStatus < 0) { ret = new com.android.internal.telephony.dataconnection.KeepaliveStatus(com.android.internal.telephony.dataconnection.KeepaliveStatus.ERROR_UNSUPPORTED); } else { ret = new com.android.internal.telephony.dataconnection.KeepaliveStatus(keepaliveStatus.sessionHandle, convertedStatus); } break; case android.hardware.radio.V1_0.RadioError.REQUEST_NOT_SUPPORTED : ret = new com.android.internal.telephony.dataconnection.KeepaliveStatus(com.android.internal.telephony.dataconnection.KeepaliveStatus.ERROR_UNSUPPORTED); responseInfo.error = android.hardware.radio.V1_0.RadioError.NONE; break; case android.hardware.radio.V1_0.RadioError.NO_RESOURCES : ret = new com.android.internal.telephony.dataconnection.KeepaliveStatus(com.android.internal.telephony.dataconnection.KeepaliveStatus.ERROR_NO_RESOURCES); break; default : ret = new com.android.internal.telephony.dataconnection.KeepaliveStatus(com.android.internal.telephony.dataconnection.KeepaliveStatus.ERROR_UNKNOWN); break; } com.android.internal.telephony.RadioResponse.sendMessageResponse(rr.mResult, ret); mRil.processResponseDone(rr, responseInfo, ret); }",fa88fd29cc1699f4c67baeee3273c238ac8cda5c,2018-01-30 18:39:06,10
559359,core_java_android_net_KeepalivePacketData.java,"public static android.net.KeepalivePacketData nattKeepalivePacket(java.net.InetAddress srcAddress, int srcPort, java.net.InetAddress dstAddress, int dstPort) throws android.net.KeepalivePacketData.InvalidPacketException { if ((!(srcAddress instanceof java.net.Inet4Address)) || (!(dstAddress instanceof java.net.Inet4Address))) { throw new android.net.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_IP_ADDRESS); } if (dstPort != (NATT_PORT)) { throw new android.net.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_PORT); } int length = ((android.net.KeepalivePacketData.IPV4_HEADER_LENGTH) + (android.net.KeepalivePacketData.UDP_HEADER_LENGTH)) + 1; java.nio.ByteBuffer buf = java.nio.ByteBuffer.allocate(length); buf.order(java.nio.ByteOrder.BIG_ENDIAN); buf.putShort(((short) (17664))); buf.putShort(((short) (length))); buf.putInt(0); buf.put(((byte) (64))); buf.put(((byte) (OsConstants.IPPROTO_UDP))); int ipChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(srcAddress.getAddress()); buf.put(dstAddress.getAddress()); buf.putShort(((short) (srcPort))); buf.putShort(((short) (dstPort))); buf.putShort(((short) (length - 20))); int udpChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(((byte) (255))); buf.putShort(ipChecksumOffset, android.net.util.IpUtils.ipChecksum(buf, 0)); buf.putShort(udpChecksumOffset, android.net.util.IpUtils.udpChecksum(buf, 0, android.net.KeepalivePacketData.IPV4_HEADER_LENGTH)); return new android.net.KeepalivePacketData(srcAddress, srcPort, dstAddress, dstPort, buf.array()); }",9c37844467728cff5ea40f030083c97f969627ec,"public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(protocol); out.writeString(srcAddress.getHostAddress()); out.writeString(dstAddress.getHostAddress()); out.writeInt(srcPort); out.writeInt(dstPort); }",861274181e5b1f15cbd15b04d41521570d7ef8d5,"public void writeToParcel(android.os.Parcel out, int flags) { out.writeString(srcAddress.getHostAddress()); out.writeString(dstAddress.getHostAddress()); out.writeInt(srcPort); out.writeInt(dstPort); out.writeByteArray(mPacket); }",fd484a66a3661173290536f3a616ba76394493e3,2018-01-30 18:39:06,3
602141,src_java_com_android_internal_telephony_uicc_UiccSlot.java,"public void update(com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccSlotStatus iss) { log(""slotStatus update""); synchronized(mLock) { mCi = ci; if ((iss.slotState) == (IccSlotStatus.SlotState.SLOTSTATE_INACTIVE)) { if (mActive) { mActive = false; onRadioStateUnavailable(); } parseAtr(iss.atr); mCardState = iss.cardState; mIccId = iss.iccid; } else if ((!(mActive)) && ((iss.slotState) == (IccSlotStatus.SlotState.SLOTSTATE_ACTIVE))) { mActive = true; } } }",6d8c9f2ed38a7be1b77bd0b80512fc96b4ee0348,"public void update(com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccSlotStatus iss) { log(""slotStatus update""); synchronized(mLock) { mCi = ci; if ((iss.slotState) == (IccSlotStatus.SlotState.SLOTSTATE_INACTIVE)) { if (mActive) { mActive = false; mPhoneId = null; onRadioStateUnavailable(); } parseAtr(iss.atr); mCardState = iss.cardState; mIccId = iss.iccid; } else if ((!(mActive)) && ((iss.slotState) == (IccSlotStatus.SlotState.SLOTSTATE_ACTIVE))) { mActive = true; } } }",9155e6a62b2581c0a6debb957ed42bdd2496b670,"public void update(com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccSlotStatus iss) { log(""slotStatus update""); synchronized(mLock) { mCi = ci; if ((iss.slotState) == (IccSlotStatus.SlotState.SLOTSTATE_INACTIVE)) { if (mActive) { mActive = false; onRadioStateUnavailable(); mPhoneId = null; } parseAtr(iss.atr); mCardState = iss.cardState; mIccId = iss.iccid; } else if ((!(mActive)) && ((iss.slotState) == (IccSlotStatus.SlotState.SLOTSTATE_ACTIVE))) { mActive = true; } } }",77b3510f6d662dc1aefdb954bf44e56fed1b9ece,2018-01-30 19:36:31,3
602141,src_java_com_android_internal_telephony_uicc_UiccSlot.java,public void onRadioStateUnavailable() { if ((mUiccCard) != null) { mUiccCard.dispose(); } mUiccCard = null; mCardState = com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT; mLastRadioState = com.android.internal.telephony.CommandsInterface.RadioState.RADIO_UNAVAILABLE; },aa0bf12bc37c85ff7db79117e6dd582128c1d1cf,"public void onRadioStateUnavailable() { if ((mUiccCard) != null) { mUiccCard.dispose(); } mUiccCard = null; com.android.internal.telephony.uicc.UiccProfile.broadcastInternalIccStateChangedIntent(IccCardConstants.INTENT_VALUE_ICC_UNKNOWN, null, mPhoneId); mCardState = com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT; mLastRadioState = com.android.internal.telephony.CommandsInterface.RadioState.RADIO_UNAVAILABLE; }",67f118f03c38a8125d5424e5c42d0f2929018b89,"public void onRadioStateUnavailable() { if ((mUiccCard) != null) { mUiccCard.dispose(); } mUiccCard = null; if ((mPhoneId) != null) { com.android.internal.telephony.uicc.UiccProfile.broadcastInternalIccStateChangedIntent(IccCardConstants.INTENT_VALUE_ICC_UNKNOWN, null, mPhoneId); } mCardState = com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT; mLastRadioState = com.android.internal.telephony.CommandsInterface.RadioState.RADIO_UNAVAILABLE; }",3df9d077f0526a98c3cd14ae42277e79db25c900,2018-01-30 19:36:31,3
588602,core_tests_hosttests_test-apps_MultiDexLegacyTestServicesTests2_src_com_android_framework_multidexlegacytestservices_test2_ServicesTests.java,,,@org.junit.Test public void testRecoverFromZipCorruptionStressTest() throws java.lang.Exception { java.lang.Thread startServices = new java.lang.Thread() { @java.lang.Override public void run() { startServices(); } }; startServices.start(); for (int i = 0; i < 7; i++) { java.lang.Thread.sleep(1000); tamperAllExctractedZips(); } startServices.join(); try { waitServicesCompletion(); } catch (java.util.concurrent.TimeoutException e) { } killServices(); checkRecover(); },e4de3c20c9a166079939a31f2a255510532abf70,@org.junit.Test public void testRecoverFromZipCorruptionStressTest() throws java.lang.Exception { java.lang.Thread startServices = new java.lang.Thread() { @java.lang.Override public void run() { startServices(); } }; startServices.start(); for (int i = 0; i < 80; i++) { java.lang.Thread.sleep(1000); tamperAllExtractedZips(); } startServices.join(); try { waitServicesCompletion(); } catch (java.util.concurrent.TimeoutException e) { } killServices(); checkRecover(); },d7ab34dddf72127a027bc5adbdb1ce575d858e48,2018-01-31 09:57:43,7
588602,core_tests_hosttests_test-apps_MultiDexLegacyTestServicesTests2_src_com_android_framework_multidexlegacytestservices_test2_ServicesTests.java,,,"@org.junit.Before public void setup() throws java.lang.Exception { android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, ""setup""); java.io.File applicationDataDir = new java.io.File(android.support.test.InstrumentationRegistry.getTargetContext().getApplicationInfo().dataDir); com.android.framework.multidexlegacytestservices.test2.ServicesTests.clearDirContent(applicationDataDir); targetFilesDir = android.support.test.InstrumentationRegistry.getTargetContext().getFilesDir(); android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, ""setup done""); }",6f9e7d3f5d4d37b74e92fa90f9b5d2779a841ca8,"@org.junit.Before public void setup() throws java.lang.Exception { android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, ""setup""); killServices(); java.io.File applicationDataDir = new java.io.File(android.support.test.InstrumentationRegistry.getTargetContext().getApplicationInfo().dataDir); com.android.framework.multidexlegacytestservices.test2.ServicesTests.clearDirContent(applicationDataDir); targetFilesDir = android.support.test.InstrumentationRegistry.getTargetContext().getFilesDir(); android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, ""setup done""); }",2dde9eeeae94a83f5b62d2a9cc34d4b945981fa7,2018-01-31 09:57:43,7
588602,core_tests_hosttests_test-apps_MultiDexLegacyTestServicesTests2_src_com_android_framework_multidexlegacytestservices_test2_ServicesTests.java,,,"private java.lang.String getServicesCompletionStatus() { for (int i = com.android.framework.multidexlegacytestservices.test2.ServicesTests.MIN_SERVICE; i <= (com.android.framework.multidexlegacytestservices.test2.ServicesTests.MAX_SERVICE); i++) { java.io.File resultFile = new java.io.File(targetFilesDir, (""Service"" + i)); if (!(resultFile.isFile())) { return (""Service"" + i) + "" never completed.""; } if ((resultFile.length()) != 8) { return (""Service"" + i) + "" was restarted.""; } } return com.android.framework.multidexlegacytestservices.test2.ServicesTests.COMPLETION_SUCCESS; }",e8d92288fc771c1315fa52f188089dc017c7a0e6,"private java.lang.String getServicesCompletionStatus() { java.lang.String status = com.android.framework.multidexlegacytestservices.test2.ServicesTests.COMPLETION_SUCCESS; for (int i = com.android.framework.multidexlegacytestservices.test2.ServicesTests.MIN_SERVICE; i <= (com.android.framework.multidexlegacytestservices.test2.ServicesTests.MAX_SERVICE); i++) { java.io.File resultFile = new java.io.File(targetFilesDir, (""Service"" + i)); if (!(resultFile.isFile())) { status = (""Service"" + i) + "" never completed.""; break; } if ((resultFile.length()) != 8) { status = (""Service"" + i) + "" was restarted.""; break; } } android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, (""Services completion status: "" + status)); return status; }",f9b37478f9ad91c9906e63976dfa6f2e1fd732d0,2018-01-31 09:57:43,7
588602,core_tests_hosttests_test-apps_MultiDexLegacyTestServicesTests2_src_com_android_framework_multidexlegacytestservices_test2_ServicesTests.java,,,"private java.lang.String getServiceCompletionStatus(int serviceId) { java.io.File resultFile = new java.io.File(targetFilesDir, (""Service"" + serviceId)); if (!(resultFile.isFile())) { return (""Service"" + serviceId) + "" never completed.""; } if ((resultFile.length()) != 8) { return (""Service"" + serviceId) + "" was restarted.""; } return com.android.framework.multidexlegacytestservices.test2.ServicesTests.COMPLETION_SUCCESS; }",bb956b81b7e040db8f5fb7347973c71c3254056f,"private java.lang.String getServiceCompletionStatus(int serviceId) { java.lang.String status = com.android.framework.multidexlegacytestservices.test2.ServicesTests.COMPLETION_SUCCESS; java.io.File resultFile = new java.io.File(targetFilesDir, (""Service"" + serviceId)); if (!(resultFile.isFile())) { status = (""Service"" + serviceId) + "" never completed.""; } else if ((resultFile.length()) != 8) { status = (""Service"" + serviceId) + "" was restarted.""; } android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, (((""Service "" + serviceId) + "" completion status: "") + status)); return status; }",c5541c13b60e635898b4ac89f378e969101c9754,2018-01-31 09:57:43,7
588602,core_tests_hosttests_test-apps_MultiDexLegacyTestServicesTests2_src_com_android_framework_multidexlegacytestservices_test2_ServicesTests.java,,,"private java.io.File getSecondaryFolder() { java.io.File dir = new java.io.File(new java.io.File(android.support.test.InstrumentationRegistry.getTargetContext().getApplicationInfo().dataDir, ""code_cache""), ""secondary-dexes""); junit.framework.Assert.assertTrue(dir.isDirectory()); return dir; }",48d54be5ece1b4931c14f097386d7450ca5e999a,"private java.io.File getSecondaryFolder() { java.io.File dir = new java.io.File(new java.io.File(android.support.test.InstrumentationRegistry.getTargetContext().getApplicationInfo().dataDir, ""code_cache""), ""secondary-dexes""); junit.framework.Assert.assertTrue(dir.getAbsolutePath(), dir.isDirectory()); return dir; }",116163471b0c517ace2011be7f183418af4e0d4e,2018-01-31 09:57:43,7
588602,core_tests_hosttests_test-apps_MultiDexLegacyTestServicesTests2_src_com_android_framework_multidexlegacytestservices_test2_ServicesTests.java,,,"private void tamperAllExctractedZips() throws java.io.IOException { android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, ""Tamper extracted zip files by overwriting all content by \'\\0\'s.""); byte[] zeros = new byte[4 * 1024]; for (java.io.File zip : getSecondaryFolder().listFiles(new com.android.framework.multidexlegacytestservices.test2.ServicesTests.ExtensionFilter("".zip""))) { long fileLength = zip.length(); junit.framework.Assert.assertTrue((fileLength > (com.android.framework.multidexlegacytestservices.test2.ServicesTests.ENDHDR))); zip.setWritable(true); java.io.RandomAccessFile raf = new java.io.RandomAccessFile(zip, ""rw""); try { int index = 0; while (index < fileLength) { int length = ((int) (java.lang.Math.min(zeros.length, (fileLength - index)))); raf.write(zeros, 0, length); index += length; } } finally { raf.close(); } } }",49b6ba25e5a11aa20523a36681738769da738f59,"private void tamperAllExtractedZips() throws java.io.IOException { android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, ""Tamper extracted zip files by overwriting all content by \'\\0\'s.""); byte[] zeros = new byte[4 * 1024]; for (java.io.File zip : getSecondaryFolder().listFiles(new com.android.framework.multidexlegacytestservices.test2.ServicesTests.ExtractedZipFilter())) { long fileLength = zip.length(); junit.framework.Assert.assertTrue((fileLength > (com.android.framework.multidexlegacytestservices.test2.ServicesTests.ENDHDR))); zip.setWritable(true); java.io.RandomAccessFile raf = new java.io.RandomAccessFile(zip, ""rw""); try { int index = 0; while (index < fileLength) { int length = ((int) (java.lang.Math.min(zeros.length, (fileLength - index)))); raf.write(zeros, 0, length); index += length; } } finally { raf.close(); } } }",d4c04ad8e19f3cbecd281883fc4b4ca68f19e2a9,2018-01-31 09:57:43,7
588602,core_tests_hosttests_test-apps_MultiDexLegacyTestServicesTests2_src_com_android_framework_multidexlegacytestservices_test2_ServicesTests.java,,,@org.junit.Test public void testRecoverFromZipCorruption() throws java.lang.Exception { int serviceId = 1; initServicesWorkFiles(); startService(serviceId); waitServicesCompletion(serviceId); tamperAllExctractedZips(); killServices(); checkRecover(); },32cf227e4d3878f6a8c87219c8681a939761ef21,@org.junit.Test public void testRecoverFromZipCorruption() throws java.lang.Exception { int serviceId = 1; initServicesWorkFiles(); startService(serviceId); waitServicesCompletion(serviceId); tamperAllExtractedZips(); killServices(); checkRecover(); },e8f011962ce0baf041f79658efd1dbfd5db4d02d,2018-01-31 09:57:43,7
588602,core_tests_hosttests_test-apps_MultiDexLegacyTestServicesTests2_src_com_android_framework_multidexlegacytestservices_test2_ServicesTests.java,,,"private void tamperAllOdex() throws java.io.IOException { android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, (""Tamper extracted zip files by overwriting all content but the central directory"" + "" by \'\\0\'s."")); byte[] zeros = new byte[4 * 1024]; int savedSizeForOdexHeader = 80; for (java.io.File odex : getSecondaryFolder().listFiles(new com.android.framework.multidexlegacytestservices.test2.ServicesTests.ExtensionFilter("".dex""))) { long fileLength = odex.length(); junit.framework.Assert.assertTrue((fileLength > ((zeros.length) + savedSizeForOdexHeader))); odex.setWritable(true); java.io.RandomAccessFile raf = new java.io.RandomAccessFile(odex, ""rw""); try { raf.seek(savedSizeForOdexHeader); raf.write(zeros, 0, zeros.length); } finally { raf.close(); } } }",2d1645e266c4a60c05b47c84b4feb81ad688180b,"private void tamperAllOdex() throws java.io.IOException { android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, ""Tamper odex files by overwriting some content by \'\\0\'s.""); byte[] zeros = new byte[4 * 1024]; int savedSizeForOdexHeader = 80; for (java.io.File odex : getSecondaryFolder().listFiles(new com.android.framework.multidexlegacytestservices.test2.ServicesTests.ExtensionFilter("".dex""))) { long fileLength = odex.length(); junit.framework.Assert.assertTrue((fileLength > ((zeros.length) + savedSizeForOdexHeader))); odex.setWritable(true); java.io.RandomAccessFile raf = new java.io.RandomAccessFile(odex, ""rw""); try { raf.seek(savedSizeForOdexHeader); raf.write(zeros, 0, zeros.length); } finally { raf.close(); } } }",2e43ff82e5c03db2dc60b676d954ee4e9098cd72,2018-01-31 09:57:43,7
588602,core_tests_hosttests_test-apps_MultiDexLegacyTestServicesTests2_src_com_android_framework_multidexlegacytestservices_test2_ServicesTests.java,,,@org.junit.Test public void testRecoverFromDexCorruptionStressTest() throws java.lang.Exception { java.lang.Thread startServices = new java.lang.Thread() { @java.lang.Override public void run() { startServices(); } }; startServices.start(); for (int i = 0; i < 7; i++) { java.lang.Thread.sleep(1000); tamperAllOdex(); } startServices.join(); try { waitServicesCompletion(); } catch (java.util.concurrent.TimeoutException e) { } killServices(); checkRecover(); },08bb9746b297bd58728e6a3127dc5b0e4e6dd69b,@org.junit.Test public void testRecoverFromDexCorruptionStressTest() throws java.lang.Exception { java.lang.Thread startServices = new java.lang.Thread() { @java.lang.Override public void run() { startServices(); } }; startServices.start(); for (int i = 0; i < 80; i++) { java.lang.Thread.sleep(1000); tamperAllOdex(); } startServices.join(); try { waitServicesCompletion(); } catch (java.util.concurrent.TimeoutException e) { } killServices(); checkRecover(); },4a72914458b8903acf614597683fc6c1ce8957b6,2018-01-31 09:57:43,7
588602,core_tests_hosttests_test-apps_MultiDexLegacyTestServicesTests2_src_com_android_framework_multidexlegacytestservices_test2_ServicesTests.java,,,private void checkRecover() throws java.util.concurrent.TimeoutException { int serviceId = 1; initServicesWorkFiles(); startService(serviceId); waitServicesCompletion(serviceId); java.lang.String completionStatus = getServiceCompletionStatus(serviceId); if (completionStatus != (com.android.framework.multidexlegacytestservices.test2.ServicesTests.COMPLETION_SUCCESS)) { junit.framework.Assert.fail(completionStatus); } },fbc2987961db68da1472d077183bb6c8a318247f,"private void checkRecover() throws java.util.concurrent.TimeoutException { android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, ""Check recover capability""); int serviceId = 1; initServicesWorkFiles(); startService(serviceId); waitServicesCompletion(serviceId); java.lang.String completionStatus = getServiceCompletionStatus(serviceId); if (completionStatus != (com.android.framework.multidexlegacytestservices.test2.ServicesTests.COMPLETION_SUCCESS)) { junit.framework.Assert.fail(completionStatus); } }",5caa990e770aae904166393718d06c856d5568b9,2018-01-31 09:57:43,7
597573,dalvik_src_main_java_dalvik_system_CloseGuard.java,"public void open(java.lang.String closer) { if (closer == null) { throw new java.lang.NullPointerException(""closer == null""); } if (((this) == (dalvik.system.CloseGuard.NOOP)) || (!(dalvik.system.CloseGuard.ENABLED))) { return; } java.lang.String message = (""Explicit termination method '"" + closer) + ""' not called""; allocationSite = new java.lang.Throwable(message); dalvik.system.CloseGuard.currentTracker.open(allocationSite); }",7d49a6324692cd2113d28646bb7496eaceb087c5,"public void open(java.lang.String closer) { if (closer == null) { throw new java.lang.NullPointerException(""closer == null""); } if (!(dalvik.system.CloseGuard.enabled)) { closerNameOrAllocationInfo = closer; return; } java.lang.String message = (""Explicit termination method '"" + closer) + ""' not called""; java.lang.Throwable stack = new java.lang.Throwable(message); closerNameOrAllocationInfo = stack; if ((dalvik.system.CloseGuard.currentTracker) != null) { dalvik.system.CloseGuard.currentTracker.open(stack); } }",5f169ab6409d3ee1b5a3491bb6703a8a4e873b5b,"public void open(java.lang.String closer) { if (closer == null) { throw new java.lang.NullPointerException(""closer == null""); } if (!(dalvik.system.CloseGuard.stackAndTrackingEnabled)) { closerNameOrAllocationInfo = closer; return; } java.lang.String message = (""Explicit termination method '"" + closer) + ""' not called""; java.lang.Throwable stack = new java.lang.Throwable(message); closerNameOrAllocationInfo = stack; dalvik.system.CloseGuard.Tracker tracker = dalvik.system.CloseGuard.currentTracker; if (tracker != null) { tracker.open(stack); } }",80330613cba7855ad08da401fb3a0a04789f2a8e,2018-01-31 22:04:03,5
597573,dalvik_src_main_java_dalvik_system_CloseGuard.java,"public static void setReporter(dalvik.system.CloseGuard.Reporter reporter) { if (reporter == null) { throw new java.lang.NullPointerException(""reporter == null""); } dalvik.system.CloseGuard.REPORTER = reporter; }",fb867c4dbfad96ec8f06949ec66c7375ee8465b7,"public static void setReporter(dalvik.system.CloseGuard.Reporter reporter) { if (reporter == null) { throw new java.lang.NullPointerException(""reporter == null""); } reporter = reporter; }",65abef474a57f29c069d3531e822cfc374b5da6f,"public static void setReporter(dalvik.system.CloseGuard.Reporter rep) { if (rep == null) { throw new java.lang.NullPointerException(""reporter == null""); } dalvik.system.CloseGuard.reporter = rep; }",de17996a350bfe2886e640b4a7ccc1d2bd8f7e29,2018-01-31 22:04:03,5
597573,dalvik_src_main_java_dalvik_system_CloseGuard.java,public void close() { dalvik.system.CloseGuard.currentTracker.close(allocationSite); allocationSite = null; },ebf47d618e86f8689a9e0fcecf5da3ab36455bbd,public void close() { if (((dalvik.system.CloseGuard.currentTracker) != null) && ((closerNameOrAllocationInfo) instanceof java.lang.Throwable)) { dalvik.system.CloseGuard.currentTracker.close(((java.lang.Throwable) (closerNameOrAllocationInfo))); } closerNameOrAllocationInfo = null; },1a8713e0a59bd3c9e8138748f07554cb59ca64ba,public void close() { dalvik.system.CloseGuard.Tracker tracker = dalvik.system.CloseGuard.currentTracker; if ((tracker != null) && ((closerNameOrAllocationInfo) instanceof java.lang.Throwable)) { tracker.close(((java.lang.Throwable) (closerNameOrAllocationInfo))); } closerNameOrAllocationInfo = null; },c12579cdb95fc1a4535e1d789b9f35791c2f2edb,2018-01-31 22:04:03,5
597573,dalvik_src_main_java_dalvik_system_CloseGuard.java,"public void warnIfOpen() { if (((allocationSite) == null) || (!(dalvik.system.CloseGuard.ENABLED))) { return; } java.lang.String message = ""A resource was acquired at attached stack trace but never released. "" + ""See java.io.Closeable for information on avoiding resource leaks.""; dalvik.system.CloseGuard.REPORTER.report(message, allocationSite); }",a8775a2830e838c59bf9f4cd97a75cde124bc0f7,"public void warnIfOpen() { if ((closerNameOrAllocationInfo) != null) { java.lang.String message; java.lang.Throwable stack; if ((closerNameOrAllocationInfo) instanceof java.lang.String) { message = (""A resource failed to call "" + ((java.lang.String) (closerNameOrAllocationInfo))) + "". ""; stack = dalvik.system.CloseGuard.UNKNOWN_ALLOCATION; } else { message = ""A resource was acquired at attached stack trace but never released. ""; stack = ((java.lang.Throwable) (closerNameOrAllocationInfo)); } message += ""See java.io.Closeable for information on avoiding resource leaks.""; dalvik.system.CloseGuard.reporter.report(message, stack); } }",460a4e1eaccee04d40e62bc6b37f0598b5817785,"public void warnIfOpen() { if ((closerNameOrAllocationInfo) != null) { if ((closerNameOrAllocationInfo) instanceof java.lang.String) { java.lang.System.logW(((""A resource failed to call "" + ((java.lang.String) (closerNameOrAllocationInfo))) + "". "")); } else { java.lang.String message = ""A resource was acquired at attached stack trace but never released. ""; message += ""See java.io.Closeable for information on avoiding resource leaks.""; java.lang.Throwable stack = ((java.lang.Throwable) (closerNameOrAllocationInfo)); dalvik.system.CloseGuard.reporter.report(message, stack); } } }",c0865c34d731272d285699117ff78e5e0a49845a,2018-01-31 22:04:03,5
597573,dalvik_src_main_java_dalvik_system_CloseGuard.java,public static boolean isEnabled() { return dalvik.system.CloseGuard.ENABLED; },0743bb6390f0e799e1241f7bc1c801fdbfafc08a,public static boolean isEnabled() { return dalvik.system.CloseGuard.enabled; },55ac0ef54b176b27487cbffccd7d7cf82adb02c0,public static boolean isEnabled() { return dalvik.system.CloseGuard.stackAndTrackingEnabled; },8b967b85ce2477b40859d4d9073aa0d9bed8bc8e,2018-01-31 22:04:03,5
597573,dalvik_src_main_java_dalvik_system_CloseGuard.java,public static void setEnabled(boolean enabled) { dalvik.system.CloseGuard.ENABLED = enabled; },53940019e1960f678566c4ba87bae1b9807f48c5,public static void setEnabled(boolean enabled) { enabled = enabled; },6070bf7693e6cd75da2e22e0f787735d769233da,public static void setEnabled(boolean enabled) { dalvik.system.CloseGuard.stackAndTrackingEnabled = enabled; },5e70200b49bd1ab656c612cdf59359b2e1941807,2018-01-31 22:04:03,5
602213,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testMessageFromNative_deviceDisconnectedUnknown() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent connectingEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectingEvent); verifyNoMoreInteractions(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory); }",3f8863924b6b8b1fc36a3aa69378702bc0d0660d,"@org.junit.Test public void testMessageFromNative_deviceDisconnectedUnknown() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent connectingEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mCurrentDevice); try { mHeadsetService.messageFromNative(connectingEvent); org.junit.Assert.fail(""Expect an IllegalStateException""); } catch (java.lang.IllegalStateException exception) { } verifyNoMoreInteractions(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory); }",7a660c13a51a74d1d68bed4e08cd69ce335c4cdc,2018-01-31 22:20:06,8
602213,src_com_android_bluetooth_hfp_HeadsetService.java,"void messageFromNative(com.android.bluetooth.hfp.HeadsetStackEvent stackEvent) { if ((stackEvent.device) == null) { android.util.Log.wtfStack(com.android.bluetooth.hfp.HeadsetService.TAG, (""messageFromNative, device is null, event: "" + stackEvent)); return; } synchronized(mStateMachines) { com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(stackEvent.device); if ((stackEvent.type) == (HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED)) { switch (stackEvent.valueInt) { case HeadsetHalConstants.CONNECTION_STATE_CONNECTED : case HeadsetHalConstants.CONNECTION_STATE_CONNECTING : { if (stateMachine == null) { stateMachine = com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().makeStateMachine(stackEvent.device, mStateMachinesThread.getLooper(), this, mNativeInterface, mSystemInterface); mStateMachines.put(stackEvent.device, stateMachine); } break; } } } else if (stateMachine == null) { android.util.Log.wtfStack(com.android.bluetooth.hfp.HeadsetService.TAG, (""State machine not found for stack event: "" + stackEvent)); return; } stateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, stackEvent); } }",148f15219b2774546c5d867fc8344ed653fe108a,"void messageFromNative(com.android.bluetooth.hfp.HeadsetStackEvent stackEvent) { java.util.Objects.requireNonNull(stackEvent.device, (""device should never be null, event: "" + stackEvent)); synchronized(mStateMachines) { com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(stackEvent.device); if (stateMachine == null) { if ((stackEvent.type) != (HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED)) { throw new java.lang.IllegalArgumentException((""State machine not found for stack event: "" + stackEvent)); } switch (stackEvent.valueInt) { case HeadsetHalConstants.CONNECTION_STATE_CONNECTED : case HeadsetHalConstants.CONNECTION_STATE_CONNECTING : { stateMachine = com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().makeStateMachine(stackEvent.device, mStateMachinesThread.getLooper(), this, mNativeInterface, mSystemInterface); mStateMachines.put(stackEvent.device, stateMachine); break; } default : android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ((""messageFromNative: for unknown device, ignore connection events "" + ""other than connecting/connected, "") + stackEvent)); return; } } stateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, stackEvent); } }",77a20c2459f0c6138d7e7a7d2a9fb156fef7079e,"void messageFromNative(com.android.bluetooth.hfp.HeadsetStackEvent stackEvent) { java.util.Objects.requireNonNull(stackEvent.device, (""Device should never be null, event: "" + stackEvent)); synchronized(mStateMachines) { com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(stackEvent.device); if ((stackEvent.type) == (HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED)) { switch (stackEvent.valueInt) { case HeadsetHalConstants.CONNECTION_STATE_CONNECTED : case HeadsetHalConstants.CONNECTION_STATE_CONNECTING : { if (stateMachine == null) { stateMachine = com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().makeStateMachine(stackEvent.device, mStateMachinesThread.getLooper(), this, mAdapterService, mNativeInterface, mSystemInterface); mStateMachines.put(stackEvent.device, stateMachine); } break; } } } if (stateMachine == null) { throw new java.lang.IllegalStateException((""State machine not found for stack event: "" + stackEvent)); } stateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, stackEvent); } }",3a12f253ab79f6346781923b4d95c87db132feb9,2018-01-31 22:20:06,8
602213,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testMessageFromNative_deviceConnected() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_CONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectedEvent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mNativeInterface, mSystemInterface); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.STACK_EVENT, connectedEvent); when(mStateMachines.get(mCurrentDevice).getDevice()).thenReturn(mCurrentDevice); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_CONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(mCurrentDevice), mHeadsetService.getConnectedDevices()); com.android.bluetooth.hfp.HeadsetStackEvent disconnectEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(disconnectEvent); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.STACK_EVENT, disconnectEvent); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.EMPTY_LIST, mHeadsetService.getConnectedDevices()); }",4f93f784436e113b3df9e9ab78af36d7f90d0d78,"@org.junit.Test public void testMessageFromNative_deviceConnected() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_CONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectedEvent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, mNativeInterface, mSystemInterface); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.STACK_EVENT, connectedEvent); when(mStateMachines.get(mCurrentDevice).getDevice()).thenReturn(mCurrentDevice); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_CONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(mCurrentDevice), mHeadsetService.getConnectedDevices()); com.android.bluetooth.hfp.HeadsetStackEvent disconnectEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(disconnectEvent); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.STACK_EVENT, disconnectEvent); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.EMPTY_LIST, mHeadsetService.getConnectedDevices()); }",bbae4deed3b26b91c037310394b34bdd67cc16ed,2018-01-31 22:20:06,8
602213,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testMessageFromNative_deviceConnectingUnknown() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent connectingEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_CONNECTING, mCurrentDevice); mHeadsetService.messageFromNative(connectingEvent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mNativeInterface, mSystemInterface); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.STACK_EVENT, connectingEvent); }",4ba019d80c998ef295f0f5891f573aae1c54f55d,"@org.junit.Test public void testMessageFromNative_deviceConnectingUnknown() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent connectingEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_CONNECTING, mCurrentDevice); mHeadsetService.messageFromNative(connectingEvent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, mNativeInterface, mSystemInterface); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.STACK_EVENT, connectingEvent); }",33b4d658da5a5133e966352a9683527a6359d636,2018-01-31 22:20:06,8
594267,tests_JobScheduler_src_android_jobscheduler_cts_ConnectivityConstraintTest.java,"@java.lang.Override public void tearDown() throws java.lang.Exception { mJobScheduler.cancel(android.jobscheduler.cts.ConnectivityConstraintTest.CONNECTIVITY_JOB_ID); if ((mWifiManager.isWifiEnabled()) == (mInitialWiFiState)) { return; } android.net.NetworkInfo.State expectedState = (mInitialWiFiState) ? NetworkInfo.State.CONNECTED : NetworkInfo.State.DISCONNECTED; android.jobscheduler.cts.ConnectivityConstraintTest.ConnectivityActionReceiver receiver = new android.jobscheduler.cts.ConnectivityConstraintTest.ConnectivityActionReceiver(android.net.ConnectivityManager.TYPE_WIFI, expectedState); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION); mContext.registerReceiver(receiver, filter); assertTrue(mWifiManager.setWifiEnabled(mInitialWiFiState)); receiver.waitForStateChange(); assertTrue(""Failure to restore previous WiFi state"", ((mWifiManager.isWifiEnabled()) == (mInitialWiFiState))); mContext.unregisterReceiver(receiver); }",3094e40332698c16d59faaadfaab299f856f7591,"@java.lang.Override public void tearDown() throws java.lang.Exception { mJobScheduler.cancel(android.jobscheduler.cts.ConnectivityConstraintTest.CONNECTIVITY_JOB_ID); if ((mWifiManager.isWifiEnabled()) == (mInitialWiFiState)) { return; } android.net.NetworkInfo.State expectedState = (mInitialWiFiState) ? NetworkInfo.State.CONNECTED : NetworkInfo.State.DISCONNECTED; android.jobscheduler.cts.ConnectivityConstraintTest.ConnectivityActionReceiver receiver = new android.jobscheduler.cts.ConnectivityConstraintTest.ConnectivityActionReceiver(android.net.ConnectivityManager.TYPE_WIFI, expectedState); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION); mContext.registerReceiver(receiver, filter); assertTrue(mWifiManager.setWifiEnabled(mInitialWiFiState)); receiver.waitForStateChange(); assertTrue(""Failure to restore previous WiFi state"", ((mWifiManager.isWifiEnabled()) == (mInitialWiFiState))); mContext.unregisterReceiver(receiver); if (mInitialRestrictBackground) { com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.jobscheduler.cts.ConnectivityConstraintTest.RESTRICT_BACKGROUND_ON_CMD); } }",c38b16447f0e1d2c94ea78ae3de918ca341ed0b7,"@java.lang.Override public void tearDown() throws java.lang.Exception { mJobScheduler.cancel(android.jobscheduler.cts.ConnectivityConstraintTest.CONNECTIVITY_JOB_ID); if (mInitialRestrictBackground) { com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.jobscheduler.cts.ConnectivityConstraintTest.RESTRICT_BACKGROUND_ON_CMD); } if ((mWifiManager.isWifiEnabled()) == (mInitialWiFiState)) { return; } android.net.NetworkInfo.State expectedState = (mInitialWiFiState) ? NetworkInfo.State.CONNECTED : NetworkInfo.State.DISCONNECTED; android.jobscheduler.cts.ConnectivityConstraintTest.ConnectivityActionReceiver receiver = new android.jobscheduler.cts.ConnectivityConstraintTest.ConnectivityActionReceiver(android.net.ConnectivityManager.TYPE_WIFI, expectedState); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION); mContext.registerReceiver(receiver, filter); assertTrue(mWifiManager.setWifiEnabled(mInitialWiFiState)); receiver.waitForStateChange(); assertTrue(""Failure to restore previous WiFi state"", ((mWifiManager.isWifiEnabled()) == (mInitialWiFiState))); mContext.unregisterReceiver(receiver); }",f2434ccfceb5abe19bea1fa05d694b9efe31fc35,2018-02-01 01:41:49,4
604384,src_java_com_android_internal_telephony_test_SimulatedCommands.java,"@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, result); if ((mDcResponse) == null) { try { mDcResponse = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, ""IP"", ""rmnet_data7"", java.util.Arrays.asList(new android.net.LinkAddress(""12.34.56.78/32"")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(""98.76.54.32"")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(""11.22.33.44"")), null, 1440); } catch (java.lang.Exception e) { } } if (mDcSuccess) { resultSuccess(result, mDcResponse); } else { resultFail(result, mDcResponse, new java.lang.RuntimeException(""Setup data call failed!"")); } }",0240734b833984d08d48830ba7059aeb4192818f,"@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, int reason, android.net.LinkProperties linkProperties, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, reason, linkProperties, result); if ((mDcResponse) == null) { try { mDcResponse = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, ""IP"", ""rmnet_data7"", java.util.Arrays.asList(new android.net.LinkAddress(""12.34.56.78/32"")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(""98.76.54.32"")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(""11.22.33.44"")), null, 1440); } catch (java.lang.Exception e) { } } if (mDcSuccess) { resultSuccess(result, mDcResponse); } else { resultFail(result, mDcResponse, new java.lang.RuntimeException(""Setup data call failed!"")); } }",26a34caa09fab34d8a7fa0f9dd561ba10722f084,"@java.lang.Override public void setupDataCall(int accessNetworkType, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, int reason, android.net.LinkProperties linkProperties, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(accessNetworkType, dataProfile, isRoaming, allowRoaming, reason, linkProperties, result); if ((mDcResponse) == null) { try { mDcResponse = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, ""IP"", ""rmnet_data7"", java.util.Arrays.asList(new android.net.LinkAddress(""12.34.56.78/32"")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(""98.76.54.32"")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(""11.22.33.44"")), null, 1440); } catch (java.lang.Exception e) { } } if (mDcSuccess) { resultSuccess(result, mDcResponse); } else { resultFail(result, mDcResponse, new java.lang.RuntimeException(""Setup data call failed!"")); } }",f9092ba506963e95dcf5fc1702787e6e80eabd88,2018-02-01 20:10:35,2
604384,src_java_com_android_internal_telephony_metrics_TelephonyMetrics.java,"public void writeRilDeactivateDataCall(int phoneId, int rilSerial, int cid, int reason) { com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall deactivateDataCall = new com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall(); deactivateDataCall.cid = cid; deactivateDataCall.reason = reason + 1; addTelephonyEvent(new com.android.internal.telephony.metrics.TelephonyEventBuilder(phoneId).setDeactivateDataCall(deactivateDataCall).build()); }",c8365fab9abe533e62188a34abb842ff5e533a43,"public void writeRilDeactivateDataCall(int phoneId, int rilSerial, int cid, int reason) { com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall deactivateDataCall = new com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall(); deactivateDataCall.cid = cid; switch (reason) { case android.telephony.data.DataService.REQUEST_REASON_NORMAL : deactivateDataCall.reason = com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_NONE; break; case android.telephony.data.DataService.REQUEST_REASON_SHUTDOWN : deactivateDataCall.reason = com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_RADIO_OFF; break; case android.telephony.data.DataService.REQUEST_REASON_HANDOVER : } deactivateDataCall.reason = reason + 1; addTelephonyEvent(new com.android.internal.telephony.metrics.TelephonyEventBuilder(phoneId).setDeactivateDataCall(deactivateDataCall).build()); }",1d50002aec466772d2faedd3397bf9f66ab61772,"public void writeRilDeactivateDataCall(int phoneId, int rilSerial, int cid, int reason) { com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall deactivateDataCall = new com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall(); deactivateDataCall.cid = cid; switch (reason) { case android.telephony.data.DataService.REQUEST_REASON_NORMAL : deactivateDataCall.reason = com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_NONE; break; case android.telephony.data.DataService.REQUEST_REASON_SHUTDOWN : deactivateDataCall.reason = com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_RADIO_OFF; break; case android.telephony.data.DataService.REQUEST_REASON_HANDOVER : deactivateDataCall.reason = com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_HANDOVER; break; default : deactivateDataCall.reason = com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_UNKNOWN; } addTelephonyEvent(new com.android.internal.telephony.metrics.TelephonyEventBuilder(phoneId).setDeactivateDataCall(deactivateDataCall).build()); }",711dd480e05a0abc72489b489734e69561a74893,2018-02-01 20:10:35,2
604384,src_java_com_android_internal_telephony_CommandsInterface.java,"void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result);",0df24836e7e9916ed9479f05e60de4a5f67d74e3,"void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, int reason, android.net.LinkProperties linkProperties, android.os.Message result);",30d0e50d76481022dc20fbc71f63154922a89d3f,"void setupDataCall(int accessNetworkType, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, int reason, android.net.LinkProperties linkProperties, android.os.Message result);",1d22d674c900c7f6dbc4465da30d3022101d886d,2018-02-01 20:10:35,2
571262,src_com_android_services_telephony_TelephonyConnection.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,protected boolean isGsmCdmaConnection() { com.android.internal.telephony.Phone phone = getPhone(); if (phone != null) { switch (phone.getPhoneType()) { case com.android.internal.telephony.PhoneConstants.PHONE_TYPE_GSM : case com.android.internal.telephony.PhoneConstants.PHONE_TYPE_CDMA : case com.android.internal.telephony.PhoneConstants.PHONE_TYPE_CDMA_LTE : return true; default : return false; } } return false; },18f3fd3403142d2de93358de19eaadbf334b7301,protected boolean isGsmCdmaConnection() { com.android.internal.telephony.Phone phone = getPhone(); if (phone != null) { switch (phone.getPhoneType()) { case com.android.internal.telephony.PhoneConstants.PHONE_TYPE_GSM : case com.android.internal.telephony.PhoneConstants.PHONE_TYPE_CDMA : return true; default : return false; } } return false; },024258137c05e4dc6e4a85f57e36936ce121fa23,2018-02-01 21:18:52,3
274154,src_com_android_phone_GsmUmtsCallBarringOptions.java,,,"@java.lang.Override public void onResume() { super.onResume(); if (mFirstResume) { if ((mIcicle) == null) { if (com.android.phone.GsmUmtsCallBarringOptions.DBG) android.util.Log.d(com.android.phone.GsmUmtsCallBarringOptions.LOG_TAG, ""start to init ""); resetPwChangeState(); mPreferences.get(mInitIndex).init(this, false, mPhone); } else { if (com.android.phone.GsmUmtsCallBarringOptions.DBG) android.util.Log.d(com.android.phone.GsmUmtsCallBarringOptions.LOG_TAG, ""restore stored states""); mInitIndex = mPreferences.size(); for (com.android.phone.CallBarringEditPreference pref : mPreferences) { android.os.Bundle bundle = mIcicle.getParcelable(pref.getKey()); pref.handleCallBarringResult(bundle.getBoolean(com.android.phone.GsmUmtsCallBarringOptions.KEY_STATUS)); pref.init(this, true, mPhone); } mPwChangeState = mIcicle.getInt(com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_STATE_KEY); mOldPassword = mIcicle.getString(com.android.phone.GsmUmtsCallBarringOptions.OLD_PW_KEY); mNewPassword = mIcicle.getString(com.android.phone.GsmUmtsCallBarringOptions.NEW_PW_KEY); mButtonChangePW.setDialogMessage(mIcicle.getString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_MESSAGE_KEY)); mButtonChangePW.setText(mIcicle.getString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_PW_ENTRY_KEY)); } mFirstResume = false; mIcicle = null; } }",2aca6f939616cd0c811b57f58ec907accbf9e1c3,"@java.lang.Override public void onResume() { super.onResume(); if (mFirstResume) { if (((mIcicle) == null) || (mIcicle.getBoolean(com.android.phone.GsmUmtsCallBarringOptions.SAVED_BEFORE_LOAD_COMPLETED_KEY))) { if (com.android.phone.GsmUmtsCallBarringOptions.DBG) { android.util.Log.d(com.android.phone.GsmUmtsCallBarringOptions.LOG_TAG, ""onResume: start to init ""); } resetPwChangeState(); mPreferences.get(mInitIndex).init(this, false, mPhone); removeDialog(com.android.phone.GsmUmtsCallBarringOptions.BUSY_SAVING_DIALOG); } mFirstResume = false; mIcicle = null; } }",b59761277416966f6e1370c34c1281a1011abb52,2018-02-01 22:35:36,5
274154,src_com_android_phone_GsmUmtsCallBarringOptions.java,,,private boolean validatePassword(java.lang.String password) { if ((password == null) || ((password.length()) != (com.android.phone.GsmUmtsCallBarringOptions.PW_LENGTH))) { return false; } else { return true; } },1ec6ff29ce632d06657ba32bcfd25316eb0718b2,private boolean validatePassword(java.lang.String password) { return (password != null) && ((password.length()) == (com.android.phone.GsmUmtsCallBarringOptions.PW_LENGTH)); },6c62ba3ddc98fba26a5cdd0ff3d5557d4d4fe434,2018-02-01 22:35:36,5
274154,src_com_android_phone_CallBarringEditPreference.java,,,"@java.lang.Override protected void onPrepareDialogBuilder(android.app.AlertDialog.Builder builder) { builder.setPositiveButton(null, null); if (isActivated) { builder.setNeutralButton(mDisableText, this); } else { builder.setNeutralButton(mEnableText, this); } }",7e27611b06bf3225f7922cca173ad1b033cd6aaf,"@java.lang.Override protected void onPrepareDialogBuilder(android.app.AlertDialog.Builder builder) { builder.setPositiveButton(null, null); builder.setNeutralButton((mIsActivated ? mDisableText : mEnableText), this); }",e8c717d508fbcccb047fa4072990d9d742a55f3f,2018-02-01 22:35:36,5
274134,src_java_com_android_internal_telephony_GsmCdmaPhone.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void setCallBarringOption(java.lang.String facility, boolean lockState, java.lang.String password, int serviceClass, android.os.Message onComplete) { if (isPhoneTypeGsm()) { mCi.setFacilityLock(facility, lockState, password, serviceClass, onComplete); } else { loge(""setCallBarringOption: not possible in CDMA""); } }",5db7460d894eb72e123bd3cd50e60c9a161ca58c,"@java.lang.Override public void setCallBarring(java.lang.String facility, boolean lockState, java.lang.String password, android.os.Message onComplete, int serviceClass) { if (isPhoneTypeGsm()) { com.android.internal.telephony.Phone imsPhone = mImsPhone; if ((imsPhone != null) && (((imsPhone.getServiceState().getState()) == (android.telephony.ServiceState.STATE_IN_SERVICE)) || (imsPhone.isUtEnabled()))) { imsPhone.setCallBarring(facility, lockState, password, onComplete, serviceClass); return; } mCi.setFacilityLock(facility, lockState, password, serviceClass, onComplete); } else { loge(""setCallBarringOption: not possible in CDMA""); } }",547b62a3cfbf3107b6aca766f1450793fa7b47a7,2018-02-01 22:35:36,3
274134,src_java_com_android_internal_telephony_GsmCdmaPhone.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void getCallBarringOption(java.lang.String facility, java.lang.String password, int serviceClass, android.os.Message onComplete) { if (isPhoneTypeGsm()) { mCi.queryFacilityLock(facility, password, serviceClass, onComplete); } else { loge(""getCallBarringOption: not possible in CDMA""); } }",6f039143d24733cb30ce8b96ba43c08097642058,"@java.lang.Override public void getCallBarring(java.lang.String facility, java.lang.String password, android.os.Message onComplete, int serviceClass) { if (isPhoneTypeGsm()) { com.android.internal.telephony.Phone imsPhone = mImsPhone; if ((imsPhone != null) && (((imsPhone.getServiceState().getState()) == (android.telephony.ServiceState.STATE_IN_SERVICE)) || (imsPhone.isUtEnabled()))) { imsPhone.getCallBarring(facility, password, onComplete, serviceClass); return; } mCi.queryFacilityLock(facility, password, serviceClass, onComplete); } else { loge(""getCallBarringOption: not possible in CDMA""); } }",1d7fb50d1058a0232aca2b9c57270ef8f8b54595,2018-02-01 22:35:36,3
274154,src_com_android_phone_CallBarringEditPreference.java,,,"@java.lang.Override protected void onDialogClosed(boolean positiveResult) { super.onDialogClosed(positiveResult); if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, (((""mButtonClicked="" + (mButtonClicked)) + "", positiveResult="") + positiveResult)); if ((this.mButtonClicked) != (android.content.DialogInterface.BUTTON_NEGATIVE)) { mPassword = getEditText().getText().toString(); if (((mPassword) == null) || ((mPassword.length()) != (com.android.phone.CallBarringEditPreference.PW_LENGTH))) { android.widget.Toast.makeText(mContext, mContext.getString(R.string.call_barring_right_pwd_number), Toast.LENGTH_SHORT).show(); return; } if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, (""onDialogClosed: mPassword="" + (mPassword))); ((com.android.internal.telephony.GsmCdmaPhone) (mPhone)).setCallBarringOption(mFacility, (!(isActivated)), mPassword, 0, mHandler.obtainMessage(com.android.phone.CallBarringEditPreference.MyHandler.MESSAGE_SET_CALL_BARRING)); if ((mTcpListener) != null) { mTcpListener.onStarted(this, false); } } }",f4b4cbea05d5b5bec6efea709bc0a76fc0c02547,"@java.lang.Override protected void onDialogClosed(boolean positiveResult) { super.onDialogClosed(positiveResult); if (com.android.phone.CallBarringEditPreference.DBG) { android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, (((""onDialogClosed: mButtonClicked="" + (mButtonClicked)) + "", positiveResult="") + positiveResult)); } if ((mButtonClicked) != (android.content.DialogInterface.BUTTON_NEGATIVE)) { java.lang.String password = null; if (mShowPassword) { password = getEditText().getText().toString(); if ((password == null) || ((password.length()) != (com.android.phone.CallBarringEditPreference.PW_LENGTH))) { android.widget.Toast.makeText(getContext(), getContext().getString(R.string.call_barring_right_pwd_number), Toast.LENGTH_SHORT).show(); return; } } if (com.android.phone.CallBarringEditPreference.DBG) { android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, (""onDialogClosed: password="" + password)); } mPhone.setCallBarring(mFacility, (!(mIsActivated)), password, mHandler.obtainMessage(com.android.phone.CallBarringEditPreference.MyHandler.MESSAGE_SET_CALL_BARRING), 0); if ((mTcpListener) != null) { mTcpListener.onStarted(this, false); } } }",9bc3f13462b86335fc7e71c306278d52ac96250f,2018-02-01 22:35:36,5
274154,src_com_android_phone_CallBarringEditPreference.java,,,"private void handleSetCallBarringResponse(android.os.Message msg) { android.os.AsyncResult ar = ((android.os.AsyncResult) (msg.obj)); if (((ar.exception) != null) || ((ar.userObj) instanceof java.lang.Throwable)) { if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, (""handleSetCallBarringResponse: ar.exception="" + (ar.exception))); } if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ""handleSetCallBarringResponse: re get""); ((com.android.internal.telephony.GsmCdmaPhone) (mPhone)).getCallBarringOption(mFacility, """", 0, obtainMessage(com.android.phone.CallBarringEditPreference.MyHandler.MESSAGE_GET_CALL_BARRING, 0, com.android.phone.CallBarringEditPreference.MyHandler.MESSAGE_SET_CALL_BARRING, ar.exception)); }",fac5d36cb8f07ddee7a8294fd7560ea71bcace57,"private void handleSetCallBarringResponse(android.os.Message msg) { final com.android.phone.CallBarringEditPreference pref = mCallBarringEditPreference.get(); if (pref == null) { return; } android.os.AsyncResult ar = ((android.os.AsyncResult) (msg.obj)); if (((ar.exception) != null) || ((ar.userObj) instanceof java.lang.Throwable)) { if (com.android.phone.CallBarringEditPreference.DBG) { android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, (""handleSetCallBarringResponse: ar.exception="" + (ar.exception))); } } if (com.android.phone.CallBarringEditPreference.DBG) { android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ""handleSetCallBarringResponse: re-get call barring option""); } pref.mPhone.getCallBarring(pref.mFacility, """", obtainMessage(com.android.phone.CallBarringEditPreference.MyHandler.MESSAGE_GET_CALL_BARRING, 0, com.android.phone.CallBarringEditPreference.MyHandler.MESSAGE_SET_CALL_BARRING, ar.exception), 0); }",6213fb891e5a2d076819660984f97bcfe577dfb8,2018-02-01 22:35:36,5
274154,src_com_android_phone_GsmUmtsCallBarringOptions.java,,,"private final void resetPwChangeState() { mPwChangeState = com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_OLD; displayPwChangeDialog(0, false); mOldPassword = """"; mNewPassword = """"; }",01da78c7309df3e92097a7e2977b55e54252beac,"private void resetPwChangeState() { mPwChangeState = com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_OLD; displayPwChangeDialog(0, false); mOldPassword = """"; mNewPassword = """"; }",029b88c8031d737f4b9abc2b44b743eab7616863,2018-02-01 22:35:36,5
274154,src_com_android_phone_GsmUmtsCallBarringOptions.java,,,"private final void displayPwChangeDialog() { displayPwChangeDialog(0, true); }",b06dad8bea495dae1de1c8e37b2a27a4c22b1c38,"private void displayPwChangeDialog() { displayPwChangeDialog(0, true); }",73020e8a3c46ff2657b8d358b6a1adb3d104297c,2018-02-01 22:35:36,5
274154,src_com_android_phone_GsmUmtsCallBarringOptions.java,,,private final void resetCallBarringPrefState(boolean bEnable) { for (com.android.phone.CallBarringEditPreference pref : mPreferences) { pref.isActivated = bEnable; pref.updateSummaryText(); } },d2ebb5f58648dd4b55fea9310a64abeaab85c195,private void resetCallBarringPrefState(boolean enable) { for (com.android.phone.CallBarringEditPreference pref : mPreferences) { pref.mIsActivated = enable; pref.updateSummaryText(); } },5cc3ec688e7cf50a8ad265ffa8a6be5f32627a7c,2018-02-01 22:35:36,5
274154,src_com_android_phone_GsmUmtsCallBarringOptions.java,,,"public void onPinEntered(com.android.phone.settings.fdn.EditPinPreference preference, boolean positiveResult) { if (preference == (mButtonChangePW)) { updatePWChangeState(positiveResult); } else if (preference == (mButtonDeaAll)) { deactivateAllBarring(positiveResult); } }",d83828a5aec8be5f1a840c8e2a88807cf3d57ee3,"@java.lang.Override public void onPinEntered(com.android.phone.settings.fdn.EditPinPreference preference, boolean positiveResult) { if (preference == (mButtonChangePW)) { updatePWChangeState(positiveResult); } else if (preference == (mButtonDisableAll)) { disableAllBarring(positiveResult); } }",ba00d41e5c1496c5794f3e98a8ffb4c77a1cff98,2018-02-01 22:35:36,5
274154,src_com_android_phone_GsmUmtsCallBarringOptions.java,,,"private final void displayPwChangeDialog(int strId, boolean shouldDisplay) { int msgId = 0; switch (mPwChangeState) { case com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_OLD : msgId = R.string.call_barring_old_pwd; break; case com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_NEW : msgId = R.string.call_barring_new_pwd; break; case com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_REENTER : msgId = R.string.call_barring_confirm_pwd; break; default : break; } if (strId != 0) { mButtonChangePW.setDialogMessage((((getText(msgId)) + ""\n"") + (getText(strId)))); } else { mButtonChangePW.setDialogMessage(msgId); } if (shouldDisplay) { mButtonChangePW.showPinDialog(); } }",32afae4bb0d89be56d45770dd8166ae9ecbc1909,"private void displayPwChangeDialog(int strId, boolean shouldDisplay) { int msgId = 0; switch (mPwChangeState) { case com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_OLD : msgId = R.string.call_barring_old_pwd; break; case com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_NEW : msgId = R.string.call_barring_new_pwd; break; case com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_REENTER : msgId = R.string.call_barring_confirm_pwd; break; default : break; } if (strId != 0) { mButtonChangePW.setDialogMessage((((getText(msgId)) + ""\n"") + (getText(strId)))); } else { mButtonChangePW.setDialogMessage(msgId); } if (shouldDisplay) { mButtonChangePW.showPinDialog(); } mPwChangeDialogStrId = strId; }",314a7e4f613f43eb1103e36f65b671e29447534c,2018-02-01 22:35:36,5
274154,src_com_android_phone_CallBarringEditPreference.java,,,"void handleCallBarringResult(boolean status) { isActivated = status; if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, (""handleGetCBResponse done, isActivated="" + status)); }",a01aa077928feb34b601fe4c4cbc32c116030fba,"void handleCallBarringResult(boolean status) { mIsActivated = status; if (com.android.phone.CallBarringEditPreference.DBG) { android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, (""handleCallBarringResult: mIsActivated="" + (mIsActivated))); } }",b02acbcec13b0b0044854770123a32ae8a3356c9,2018-02-01 22:35:36,5
274154,src_com_android_phone_GsmUmtsCallBarringOptions.java,,,"private final void displayMessage(int strId) { android.widget.Toast.makeText(this, getString(strId), Toast.LENGTH_SHORT).show(); }",b1d15f74892d440b117f48f744857be39ef65950,"private void displayMessage(int strId) { android.widget.Toast.makeText(this, getString(strId), Toast.LENGTH_SHORT).show(); }",f1e9e603af38bd7a9f19d44e8ccfb005d18f371f,2018-02-01 22:35:36,5
274154,src_com_android_phone_CallBarringEditPreference.java,,,@java.lang.Override public boolean shouldDisableDependents() { boolean shouldDisable = isActivated; return shouldDisable; },312c3cdc157ff3a037621829518821c9d0439c8e,@java.lang.Override public boolean shouldDisableDependents() { return mIsActivated; },56a14afd505b998e81ceddd81ed3647267d48721,2018-02-01 22:35:36,5
274154,src_com_android_phone_CallBarringEditPreference.java,,,"void init(com.android.phone.TimeConsumingPreferenceListener listener, boolean skipReading, com.android.internal.telephony.Phone phone) { if (com.android.phone.CallBarringEditPreference.DBG) { android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, (""Getting callBarringEditPreference phone id = "" + (phone.getPhoneId()))); } mPhone = phone; mTcpListener = listener; if (!skipReading) { ((com.android.internal.telephony.GsmCdmaPhone) (mPhone)).getCallBarringOption(mFacility, """", 0, mHandler.obtainMessage(com.android.phone.CallBarringEditPreference.MyHandler.MESSAGE_GET_CALL_BARRING)); if ((mTcpListener) != null) { mTcpListener.onStarted(this, true); } } }",15c3aee10dc370619d8242992a60831690a5ed29,"void init(com.android.phone.TimeConsumingPreferenceListener listener, boolean skipReading, com.android.internal.telephony.Phone phone) { if (com.android.phone.CallBarringEditPreference.DBG) { android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, (""init: phone id = "" + (phone.getPhoneId()))); } mPhone = phone; mTcpListener = listener; if (!skipReading) { mPhone.getCallBarring(mFacility, """", mHandler.obtainMessage(com.android.phone.CallBarringEditPreference.MyHandler.MESSAGE_GET_CALL_BARRING), 0); if ((mTcpListener) != null) { mTcpListener.onStarted(this, true); } } }",982cf168f2b4f56c8e43d5e30f87881672909f16,2018-02-01 22:35:36,5
274154,src_com_android_phone_GsmUmtsCallBarringOptions.java,,,"@java.lang.Override protected void onSaveInstanceState(android.os.Bundle outState) { super.onSaveInstanceState(outState); for (com.android.phone.CallBarringEditPreference pref : mPreferences) { android.os.Bundle bundle = new android.os.Bundle(); bundle.putBoolean(com.android.phone.GsmUmtsCallBarringOptions.KEY_STATUS, pref.isActivated); outState.putParcelable(pref.getKey(), bundle); } outState.putInt(com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_STATE_KEY, mPwChangeState); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.OLD_PW_KEY, mOldPassword); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.NEW_PW_KEY, mNewPassword); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_MESSAGE_KEY, mButtonChangePW.getDialogMessage().toString()); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_PW_ENTRY_KEY, mButtonChangePW.getText()); }",89515d0bd97015d7a91c30a6d1b7f97f04e0fed3,"@java.lang.Override protected void onSaveInstanceState(android.os.Bundle outState) { super.onSaveInstanceState(outState); for (com.android.phone.CallBarringEditPreference pref : mPreferences) { android.os.Bundle bundle = new android.os.Bundle(); bundle.putBoolean(com.android.phone.GsmUmtsCallBarringOptions.KEY_STATUS, pref.mIsActivated); bundle.putBoolean(com.android.phone.GsmUmtsCallBarringOptions.PREFERENCE_ENABLED_KEY, pref.isEnabled()); bundle.putBoolean(com.android.phone.GsmUmtsCallBarringOptions.PREFERENCE_SHOW_PASSWORD_KEY, pref.needInputMethod()); outState.putParcelable(pref.getKey(), bundle); } outState.putInt(com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_STATE_KEY, mPwChangeState); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.OLD_PW_KEY, mOldPassword); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.NEW_PW_KEY, mNewPassword); outState.putInt(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_MESSAGE_KEY, mPwChangeDialogStrId); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_PW_ENTRY_KEY, mButtonChangePW.getText()); outState.putBoolean(com.android.phone.GsmUmtsCallBarringOptions.SAVED_BEFORE_LOAD_COMPLETED_KEY, (((mProgressDialog) != null) && (mProgressDialog.isShowing()))); }",d4012a5ca9067a8e65fc3f258bb46f62036f5d92,2018-02-01 22:35:36,5
274154,src_com_android_phone_GsmUmtsCallOptions.java,"public static void init(android.preference.PreferenceScreen prefScreen, com.android.phone.SubscriptionInfoHelper subInfoHelper) { android.preference.Preference callForwardingPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_FORWARDING_KEY); callForwardingPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallForwardOptions.class)); android.preference.Preference additionalGsmSettingsPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.ADDITIONAL_GSM_SETTINGS_KEY); additionalGsmSettingsPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsAdditionalCallOptions.class)); }",9125dab69fd5df8d4abb17638ad16311f04c0e39,"public static void init(android.preference.PreferenceScreen prefScreen, com.android.phone.SubscriptionInfoHelper subInfoHelper) { android.preference.Preference callForwardingPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_FORWARDING_KEY); callForwardingPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallForwardOptions.class)); android.preference.Preference additionalGsmSettingsPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.ADDITIONAL_GSM_SETTINGS_KEY); additionalGsmSettingsPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsAdditionalCallOptions.class)); android.preference.Preference callBarringPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_BARRING_KEY); android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (prefScreen.getContext().getSystemService(Context.CARRIER_CONFIG_SERVICE))); android.os.PersistableBundle b = configManager.getConfig(); if ((b != null) && (b.getBoolean(CarrierConfigManager.KEY_SHOW_CALL_BARRING_UI_BOOL))) { callBarringPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallBarringOptions.class)); } else { prefScreen.removePreference(callBarringPref); } }",23f6ca3b710a6a08985db656ae9467ef2bd50131,"public static void init(android.preference.PreferenceScreen prefScreen, com.android.phone.SubscriptionInfoHelper subInfoHelper) { android.preference.Preference callForwardingPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_FORWARDING_KEY); callForwardingPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallForwardOptions.class)); android.preference.Preference additionalGsmSettingsPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.ADDITIONAL_GSM_SETTINGS_KEY); additionalGsmSettingsPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsAdditionalCallOptions.class)); android.preference.Preference callBarringPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_BARRING_KEY); android.os.PersistableBundle b = null; if (subInfoHelper.hasSubId()) { b = com.android.phone.PhoneGlobals.getInstance().getCarrierConfigForSubId(subInfoHelper.getSubId()); } else { b = com.android.phone.PhoneGlobals.getInstance().getCarrierConfig(); } if ((b != null) && (b.getBoolean(CarrierConfigManager.KEY_CALL_BARRING_VISIBILITY_BOOL))) { callBarringPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallBarringOptions.class)); } else { prefScreen.removePreference(callBarringPref); } }",6b9f8037d7ed2fe94d8e29fe35b3a235a3817e06,2018-02-01 22:35:36,5
274154,src_com_android_phone_CallBarringEditPreference.java,,,@java.lang.Override protected void onBindView(android.view.View view) { super.onBindView(view); android.widget.TextView summaryView = ((android.widget.TextView) (view.findViewById(android.R.id.summary))); if (summaryView != null) { java.lang.CharSequence sum; int vis; if (isActivated) { sum = ((mSummaryOn) == null) ? getSummary() : mSummaryOn; } else { sum = ((mSummaryOff) == null) ? getSummary() : mSummaryOff; } if (sum != null) { summaryView.setText(sum); vis = android.view.View.VISIBLE; } else { vis = android.view.View.GONE; } if (vis != (summaryView.getVisibility())) { summaryView.setVisibility(vis); } } },61b32d598dcf55c447da1c2f5987653573e032f2,@java.lang.Override protected void onBindView(android.view.View view) { super.onBindView(view); android.widget.TextView summaryView = ((android.widget.TextView) (view.findViewById(android.R.id.summary))); if (summaryView != null) { java.lang.CharSequence sum; int vis; if (mIsActivated) { sum = ((mSummaryOn) == null) ? getSummary() : mSummaryOn; } else { sum = ((mSummaryOff) == null) ? getSummary() : mSummaryOff; } if (sum != null) { summaryView.setText(sum); vis = android.view.View.VISIBLE; } else { vis = android.view.View.GONE; } if (vis != (summaryView.getVisibility())) { summaryView.setVisibility(vis); } } },a562a302f309a10c19beeb304aa60184aa95c366,2018-02-01 22:35:36,5
274154,src_com_android_phone_CallBarringEditPreference.java,,,@java.lang.Override protected void onBindDialogView(android.view.View view) { super.onBindDialogView(view); mButtonClicked = android.content.DialogInterface.BUTTON_NEGATIVE; final android.widget.EditText editText = ((android.widget.EditText) (view.findViewById(android.R.id.edit))); if (editText != null) { editText.setSingleLine(true); editText.setTransformationMethod(android.text.method.PasswordTransformationMethod.getInstance()); editText.setKeyListener(android.text.method.DigitsKeyListener.getInstance()); } },6d9dac7a01fb8c41c84c0a04f77bd249161fda96,@java.lang.Override protected void onBindDialogView(android.view.View view) { super.onBindDialogView(view); mButtonClicked = android.content.DialogInterface.BUTTON_NEGATIVE; final android.widget.EditText editText = ((android.widget.EditText) (view.findViewById(android.R.id.edit))); if (editText != null) { editText.setSingleLine(true); editText.setTransformationMethod(android.text.method.PasswordTransformationMethod.getInstance()); editText.setKeyListener(android.text.method.DigitsKeyListener.getInstance()); editText.setVisibility((mShowPassword ? android.view.View.VISIBLE : android.view.View.GONE)); } },312aa6161ce3679a4c608cd3c78dcb2c8856ce9e,2018-02-01 22:35:36,5
274154,src_com_android_phone_GsmUmtsCallBarringOptions.java,,,"private void deactivateAllBarring(boolean positiveResult) { if (!positiveResult) { return; } java.lang.String password = mButtonDeaAll.getText(); if ((password == null) || ((password.length()) != (com.android.phone.GsmUmtsCallBarringOptions.PW_LENGTH))) { mButtonDeaAll.setText(""""); displayMessage(R.string.call_barring_right_pwd_number); return; } mButtonDeaAll.setText(""""); android.os.Message onComplete = myHandler.obtainMessage(com.android.phone.GsmUmtsCallBarringOptions.EVENT_DEACT_ALL_COMPLETE); ((com.android.internal.telephony.GsmCdmaPhone) (mPhone)).setCallBarringOption(CommandsInterface.CB_FACILITY_BA_ALL, false, password, 0, onComplete); this.onStarted(mButtonDeaAll, false); }",4e829a35d6f42cdd26c9592db9fa797d399a979e,"private void disableAllBarring(boolean positiveResult) { if (!positiveResult) { return; } java.lang.String password = null; if (mButtonDisableAll.isPasswordShown()) { password = mButtonDisableAll.getText(); if (!(validatePassword(password))) { mButtonDisableAll.setText(""""); displayMessage(R.string.call_barring_right_pwd_number); return; } } mButtonDisableAll.setText(""""); android.os.Message onComplete = mHandler.obtainMessage(com.android.phone.GsmUmtsCallBarringOptions.EVENT_DISABLE_ALL_COMPLETE); mPhone.setCallBarring(CommandsInterface.CB_FACILITY_BA_ALL, false, password, onComplete, 0); this.onStarted(mButtonDisableAll, false); }",2b33c860d2ba95cae8df677b7a9f829d7155fb55,2018-02-01 22:35:36,5
604417,src_com_android_server_telecom_CallRecordingTonePlayer.java,,,"private void startCallRecordingTone(android.content.Context context) { if ((mRecordingTonePlayer) != null) { return; } android.media.AudioDeviceInfo telephonyDevice = getTelephonyDevice(mAudioManager); if (telephonyDevice != null) { android.telecom.Log.i(this, ""startCallRecordingTone: playing call recording tone to remote end.""); mRecordingTonePlayer = android.media.MediaPlayer.create(context, R.raw.record); mRecordingTonePlayer.setLooping(true); mRecordingTonePlayer.setPreferredDevice(telephonyDevice); mRecordingTonePlayer.setVolume(0.1F); mRecordingTonePlayer.start(); } else { android.telecom.Log.w(this, ""startCallRecordingTone: can't find telephony audio device.""); } }",9d9e329af1ba3c0be4bf095fda9ce30711ee9fa6,"private void startCallRecordingTone(android.content.Context context) { if ((mRecordingTonePlayer) != null) { return; } android.media.AudioDeviceInfo telephonyDevice = getTelephonyDevice(mAudioManager); if (telephonyDevice != null) { android.telecom.Log.i(this, ""startCallRecordingTone: playing call recording tone to remote end.""); } else { android.telecom.Log.w(this, ""startCallRecordingTone: can't find telephony audio device.""); } }",a13f8a7e89a903077d561872b2d76a6235984935,2018-02-01 22:38:53,4
604417,src_com_android_server_telecom_CallRecordingTonePlayer.java,,,@java.lang.Override public void onRecordingConfigChanged(java.util.List<android.media.AudioRecordingConfiguration> configs) { handleRecordingConfigurationChange(configs); maybeStartCallAudioTone(); maybeStopCallAudioTone(); },3b5ae5f2b1aab5cc3de5d756f6f5ac538d27d248,"@java.lang.Override public void onRecordingConfigChanged(java.util.List<android.media.AudioRecordingConfiguration> configs) { synchronized(mLock) { try { android.telecom.Log.startSession(""CRTP.oRCC""); handleRecordingConfigurationChange(configs); maybeStartCallAudioTone(); maybeStopCallAudioTone(); } finally { android.telecom.Log.endSession(); } } }",2cde197dd2f74e0f5730130b3ce4b650211de0c1,2018-02-01 22:38:53,4
604417,tests_src_com_android_server_telecom_tests_CallRecordingTonePlayerTest.java,,,"@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); org.mockito.MockitoAnnotations.initMocks(this); mCallRecordingTonePlayer = new com.android.server.telecom.CallRecordingTonePlayer(mComponentContextFixture.getTestDouble().getApplicationContext(), mAudioManager); when(mAudioManager.getActiveRecordingConfigurations()).thenReturn(null); }",2a9f39ac632c2ef8b7750d9bf4fd065a3cd9595c,"@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); org.mockito.MockitoAnnotations.initMocks(this); mCallRecordingTonePlayer = new com.android.server.telecom.CallRecordingTonePlayer(mComponentContextFixture.getTestDouble().getApplicationContext(), mAudioManager, mSyncRoot); when(mAudioManager.getActiveRecordingConfigurations()).thenReturn(null); }",16e115d5a3917c1ce768ca4f270227cb63e26a86,2018-02-01 22:38:53,4
604417,src_com_android_server_telecom_CallRecordingTonePlayer.java,,,"private void addCall(com.android.server.telecom.Call toAdd) { boolean isFirstCall = mCalls.isEmpty(); mCalls.add(toAdd); if (isFirstCall) { handleRecordingConfigurationChange(mAudioManager.getActiveRecordingConfigurations()); mAudioManager.registerAudioRecordingCallback(mAudioRecordingCallback, null); } maybeStartCallAudioTone(); }",332245b7339846c5f224b73772f4b189f0a5b4d4,"private void addCall(com.android.server.telecom.Call toAdd) { boolean isFirstCall = mCalls.isEmpty(); mCalls.add(toAdd); if (isFirstCall) { handleRecordingConfigurationChange(mAudioManager.getActiveRecordingConfigurations()); mAudioManager.registerAudioRecordingCallback(mAudioRecordingCallback, mMainThreadHandler); } maybeStartCallAudioTone(); }",f485105c217e1fe9bc49dccbcd26750fce5e9812,2018-02-01 22:38:53,4
572011,telephony_java_android_telephony_LocationAccessPolicy.java,,,"private static boolean isCurrentProfile(@android.annotation.NonNull android.content.Context context, int uid) { final int currentUser = android.app.ActivityManager.getCurrentUser(); final int callingUserId = android.os.UserHandle.getUserId(uid); if (callingUserId == currentUser) { return true; } else { java.util.List<android.content.pm.UserInfo> userProfiles = context.getSystemService(android.os.UserManager.class).getProfiles(currentUser); for (android.content.pm.UserInfo user : userProfiles) { if ((user.id) == callingUserId) { return true; } } } return false; }",cff4b2fe94fff14e948b8f251938d990c1e08b2c,"private static boolean isCurrentProfile(@android.annotation.NonNull android.content.Context context, int uid) { long token = android.os.Binder.clearCallingIdentity(); try { final int currentUser = android.app.ActivityManager.getCurrentUser(); final int callingUserId = android.os.UserHandle.getUserId(uid); if (callingUserId == currentUser) { return true; } else { java.util.List<android.content.pm.UserInfo> userProfiles = context.getSystemService(android.os.UserManager.class).getProfiles(currentUser); for (android.content.pm.UserInfo user : userProfiles) { if ((user.id) == callingUserId) { return true; } } } return false; } finally { android.os.Binder.restoreCallingIdentity(token); } }",7c18f50ee91f9f6db82fbf4061096003e4f0bdf8,2018-02-01 23:05:21,10
572011,telephony_java_android_telephony_LocationAccessPolicy.java,,,"public static boolean canAccessCellLocation(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.lang.String pkgName, int uid, int pid) throws java.lang.SecurityException { android.os.Trace.beginSection(""TelephonyLocationCheck""); try { if ((context.checkPermission(Manifest.permission.ACCESS_COARSE_LOCATION, pid, uid)) == (android.content.pm.PackageManager.PERMISSION_DENIED)) { return false; } final int opCode = android.app.AppOpsManager.permissionToOpCode(Manifest.permission.ACCESS_COARSE_LOCATION); if ((opCode != (android.app.AppOpsManager.OP_NONE)) && ((context.getSystemService(android.app.AppOpsManager.class).noteOp(opCode, uid, pkgName)) != (android.app.AppOpsManager.MODE_ALLOWED))) { return false; } if ((!(android.telephony.LocationAccessPolicy.isLocationModeEnabled(context, android.os.UserHandle.getUserId(uid)))) && (!(android.telephony.LocationAccessPolicy.isLegacyForeground(context, pkgName, uid)))) { return false; } return (android.telephony.LocationAccessPolicy.isCurrentProfile(context, uid)) || (android.telephony.LocationAccessPolicy.checkInteractAcrossUsersFull(context)); } finally { android.os.Trace.endSection(); } }",d079a0b6bd84d298e46a41305022a5707620001c,"public static boolean canAccessCellLocation(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.lang.String pkgName, int uid, int pid) throws java.lang.SecurityException { android.os.Trace.beginSection(""TelephonyLocationCheck""); try { if (uid == (PHONE_UID)) { return true; } if ((context.checkPermission(Manifest.permission.ACCESS_COARSE_LOCATION, pid, uid)) == (android.content.pm.PackageManager.PERMISSION_DENIED)) { return false; } final int opCode = android.app.AppOpsManager.permissionToOpCode(Manifest.permission.ACCESS_COARSE_LOCATION); if ((opCode != (android.app.AppOpsManager.OP_NONE)) && ((context.getSystemService(android.app.AppOpsManager.class).noteOpNoThrow(opCode, uid, pkgName)) != (android.app.AppOpsManager.MODE_ALLOWED))) { return false; } if ((!(android.telephony.LocationAccessPolicy.isLocationModeEnabled(context, android.os.UserHandle.getUserId(uid)))) && (!(android.telephony.LocationAccessPolicy.isLegacyForeground(context, pkgName, uid)))) { return false; } return (android.telephony.LocationAccessPolicy.isCurrentProfile(context, uid)) || (android.telephony.LocationAccessPolicy.checkInteractAcrossUsersFull(context)); } finally { android.os.Trace.endSection(); } }",78212ab961e2bc6d4cffa3d24e19aac9264f37ec,2018-02-01 23:05:21,10
572011,telephony_java_android_telephony_LocationAccessPolicy.java,,,"private static boolean isLegacyForeground(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.lang.String pkgName, int uid) { return (android.telephony.LocationAccessPolicy.isLegacyVersion(context, pkgName)) && (android.telephony.LocationAccessPolicy.isForegroundApp(context, uid)); }",01298cddd7b4bb9d05f08225913004651d09294b,"private static boolean isLegacyForeground(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.lang.String pkgName, int uid) { long token = android.os.Binder.clearCallingIdentity(); try { return (android.telephony.LocationAccessPolicy.isLegacyVersion(context, pkgName)) && (android.telephony.LocationAccessPolicy.isForegroundApp(context, uid)); } finally { android.os.Binder.restoreCallingIdentity(token); } }",677017c410d1d035a84ba8e7010e69976fa49483,2018-02-01 23:05:21,10
605576,src_com_android_bluetooth_btservice_AdapterService.java,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println(""Skipping dump in APP SERVICES, see bluetooth_manager section.""); writer.println(""Use --print argument for dumpsys direct from AdapterService.""); return; } verboseLog((""dumpsys arguments, check for protobuf output: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].startsWith(""--proto"")) { if (args[0].equals(""--proto-java-bin"")) { dumpJava(fd); } else { dumpNative(fd, args); } return; } writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",db276e553fdbe7708e5bbda3db35035683362949,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println(""Skipping dump in APP SERVICES, see bluetooth_manager section.""); writer.println(""Use --print argument for dumpsys direct from AdapterService.""); return; } verboseLog((""dumpsys arguments, check for protobuf output: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].equals(""--proto-bin"")) { dumpMetrics(fd); return; } writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",70838f575d633f2f3556dfff168ab7c43cc38805,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println(""Skipping dump in APP SERVICES, see bluetooth_manager section.""); writer.println(""Use --print argument for dumpsys direct from AdapterService.""); return; } verboseLog((""dumpsys arguments, check for protobuf output: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].startsWith(""--proto"")) { if (args[0].equals(""--proto-bin"")) { dumpMetrics(fd); } else if (args[0].equals(""--proto-java-bin"")) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, (""proto-java-bin dump, empty metrics size is "" + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog(""Unable to write Java protobuf to file descriptor.""); } } return; } writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",fb1a555f3d4c79f3b12e492c82bc1881b812cc15,2018-02-02 00:23:40,9
605576,src_com_android_bluetooth_btservice_AdapterService.java,"private void dumpJava(java.io.FileDescriptor fd) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog log = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); log.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dumpProto(log); } try { java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd); java.lang.String protoOutString = android.util.Base64.encodeToString(log.toByteArray(), Base64.DEFAULT); protoOut.write(protoOutString.getBytes(java.nio.charset.StandardCharsets.UTF_8)); protoOut.close(); } catch (java.io.IOException e) { errorLog(""Unable to write Java protobuf to file descriptor.""); } }",2d95b0c07a7d35fdeaaa275454896b03b43c7da1,"private void dumpMetrics(java.io.FileDescriptor fd) { android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, ""dumpMetrics""); com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); metrics.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dumpProto(metrics); } byte[] nativeMetricsBytes = dumpMetricsNative(); android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, (""dumpMetrics, native metrics size is "" + (nativeMetricsBytes.length))); try { metrics.mergeFrom(nativeMetricsBytes); } catch (com.google.protobuf.micro.InvalidProtocolBufferMicroException ex) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, (""Problem parsing metrics Protobuf: "" + (ex.getMessage()))); return; } byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, (""dumpMetrics, combined metrics size is "" + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog(""Unable to write Java protobuf to file descriptor.""); } }",53d9b457021d785b09dfc5a31506cb9ced813c27,"private void dumpMetrics(java.io.FileDescriptor fd) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); metrics.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dumpProto(metrics); } byte[] nativeMetricsBytes = dumpMetricsNative(); debugLog((""dumpMetrics: native metrics size is "" + (nativeMetricsBytes.length))); if ((nativeMetricsBytes.length) > 0) { try { metrics.mergeFrom(nativeMetricsBytes); } catch (com.google.protobuf.micro.InvalidProtocolBufferMicroException ex) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, (""dumpMetrics: problem parsing metrics protobuf, "" + (ex.getMessage()))); return; } } byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); debugLog((""dumpMetrics: combined metrics size is "" + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog((""dumpMetrics: error writing combined protobuf to fd, "" + (e.getMessage()))); } }",e4cd37ddd35245e6056c0a7360c9694bc8d2b4b1,2018-02-02 00:23:40,9
600834,core_java_android_net_TrafficStats.java,public static long getMobileRxPackets() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { total += android.net.TrafficStats.getRxPackets(iface); } return total; },23337234961587ae4cacb85738ae3248c92256f8,public static long getMobileRxPackets() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { long stat = android.net.TrafficStats.UNSUPPORTED; stat = android.net.TrafficStats.getRxPackets(iface); if (stat != (android.net.TrafficStats.UNSUPPORTED)) { total += stat; } } return total; },1a25a01e2a8ba66df57432f00a208ee9c756603d,public static long getMobileRxPackets() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { total += android.net.TrafficStats.addIfSupported(android.net.TrafficStats.getRxPackets(iface)); } return total; },f6df920086353204b1cf67db4fec95ecf0ad5ced,2018-02-02 04:22:33,2
600834,core_java_android_net_TrafficStats.java,public static long getMobileRxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { total += android.net.TrafficStats.getRxBytes(iface); } return total; },72af5cc35c8267d588828e6f199f47cdb9040e29,public static long getMobileRxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { long stat = android.net.TrafficStats.UNSUPPORTED; stat = android.net.TrafficStats.getRxBytes(iface); if (stat != (android.net.TrafficStats.UNSUPPORTED)) { total += stat; } } return total; },bbb92036c7b82fea02f93ee858812d6de3cc5207,public static long getMobileRxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { total += android.net.TrafficStats.addIfSupported(android.net.TrafficStats.getRxBytes(iface)); } return total; },05eaaf59e1ba91389fff83df5bb08bb90d0b2700,2018-02-02 04:22:33,2
600834,core_java_android_net_TrafficStats.java,public static long getMobileTxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { total += android.net.TrafficStats.getTxBytes(iface); } return total; },ce1a6cf40d25c3bbd0b307ea2ac6b17eb86f0370,public static long getMobileTxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { long stat = android.net.TrafficStats.UNSUPPORTED; stat = android.net.TrafficStats.getTxBytes(iface); if (stat != (android.net.TrafficStats.UNSUPPORTED)) { total += stat; } } return total; },9fa1dca1e8589b1d4888956b90d7bf2ef304a69c,public static long getMobileTxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { total += android.net.TrafficStats.addIfSupported(android.net.TrafficStats.getTxBytes(iface)); } return total; },dc638d1db5c7ce941fdb3acd8b2a8375ca03e0fd,2018-02-02 04:22:33,2
600834,core_java_android_net_TrafficStats.java,public static long getMobileTxPackets() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { total += android.net.TrafficStats.getTxPackets(iface); } return total; },1db7974fab9ab10a2fa90959539cb847b7e26b1d,public static long getMobileTxPackets() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { long stat = android.net.TrafficStats.UNSUPPORTED; stat = android.net.TrafficStats.getTxPackets(iface); if (stat != (android.net.TrafficStats.UNSUPPORTED)) { total += stat; } } return total; },b85085e4e8ac06dc2177781a4511abb3ca0bfbec,public static long getMobileTxPackets() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { total += android.net.TrafficStats.addIfSupported(android.net.TrafficStats.getTxPackets(iface)); } return total; },2c4618f5e57f316cb1520401e9eba107408df65c,2018-02-02 04:22:33,2
578626,src_com_android_nfc_NfcService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.ArrayList<java.lang.String> getSEAccessAllowedPackages() { if (((mSEService) == null) || (mNfcEventInstalledPackages.isEmpty())) { return null; } java.lang.String[] readers = null; try { readers = mSEService.getReaders(); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.nfc.NfcService.TAG, (""Error in getReaders() "" + e)); return null; } if ((readers == null) || ((readers.length) == 0)) { return null; } boolean[] nfcAccessFinal = null; java.lang.String[] installedPackages = new java.lang.String[mNfcEventInstalledPackages.size()]; android.se.omapi.ISecureElementCallback callback = new android.se.omapi.ISecureElementCallback.Stub() {}; for (java.lang.String reader : readers) { try { boolean[] accessList = mSEService.isNFCEventAllowed(reader, null, mNfcEventInstalledPackages.toArray(installedPackages), callback); if (accessList == null) { continue; } if (nfcAccessFinal == null) { nfcAccessFinal = accessList; } for (int i = 0; i < (accessList.length); i++) { if (accessList[i]) { nfcAccessFinal[i] = true; } } } catch (android.os.RemoteException e) { android.util.Log.e(com.android.nfc.NfcService.TAG, (""Error in isNFCEventAllowed() "" + e)); } } if (nfcAccessFinal == null) { return null; } java.util.ArrayList<java.lang.String> packages = new java.util.ArrayList<java.lang.String>(); for (int i = 0; i < (nfcAccessFinal.length); i++) { if (nfcAccessFinal[i]) { packages.add(mNfcEventInstalledPackages.get(i).packageName); } } return packages; }",0da76324cc2e3396a2069fd95b8078b3f4293e49,"private java.util.ArrayList<java.lang.String> getSEAccessAllowedPackages() { if (((mSEService) == null) || (mNfcEventInstalledPackages.isEmpty())) { return null; } java.lang.String[] readers = null; try { readers = mSEService.getReaders(); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.nfc.NfcService.TAG, (""Error in getReaders() "" + e)); return null; } if ((readers == null) || ((readers.length) == 0)) { return null; } boolean[] nfcAccessFinal = null; java.lang.String[] installedPackages = new java.lang.String[mNfcEventInstalledPackages.size()]; for (java.lang.String reader : readers) { try { boolean[] accessList = mSEService.isNFCEventAllowed(reader, null, mNfcEventInstalledPackages.toArray(installedPackages)); if (accessList == null) { continue; } if (nfcAccessFinal == null) { nfcAccessFinal = accessList; } for (int i = 0; i < (accessList.length); i++) { if (accessList[i]) { nfcAccessFinal[i] = true; } } } catch (android.os.RemoteException e) { android.util.Log.e(com.android.nfc.NfcService.TAG, (""Error in isNFCEventAllowed() "" + e)); } } if (nfcAccessFinal == null) { return null; } java.util.ArrayList<java.lang.String> packages = new java.util.ArrayList<java.lang.String>(); for (int i = 0; i < (nfcAccessFinal.length); i++) { if (nfcAccessFinal[i]) { packages.add(mNfcEventInstalledPackages.get(i).packageName); } } return packages; }",71c1b255777d8090798424b194d1350014bb8703,2018-02-02 20:34:22,11
578626,src_com_android_nfc_NfcService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void sendNfcTransactionEvent(byte[] aid, byte[] data, java.lang.String reader) { if (((mSEService) == null) || (mNfcEventInstalledPackages.isEmpty())) { return; } android.se.omapi.ISecureElementCallback callback = new android.se.omapi.ISecureElementCallback.Stub() {}; java.lang.String[] installedPackages = new java.lang.String[mNfcEventInstalledPackages.size()]; try { boolean[] nfcAccess = mSEService.isNFCEventAllowed(reader, aid, mNfcEventInstalledPackages.toArray(installedPackages), callback); if (nfcAccess == null) { return; } java.util.ArrayList<java.lang.String> packages = new java.util.ArrayList<java.lang.String>(); android.content.Intent intent = new android.content.Intent(com.android.nfc.NfcService.ACTION_TRANSACTION_EVT); intent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES); intent.putExtra(com.android.nfc.NfcService.EXTRA_AID, aid); intent.putExtra(com.android.nfc.NfcService.EXTRA_DATA, data); intent.putExtra(com.android.nfc.NfcService.EXTRA_SE_NAME, reader); for (int i = 0; i < (nfcAccess.length); i++) { if (nfcAccess[i]) { intent.setPackage(mNfcEventInstalledPackages.get(i).packageName); mContext.sendBroadcast(intent); } } } catch (android.os.RemoteException e) { android.util.Log.e(com.android.nfc.NfcService.TAG, (""Error in isNFCEventAllowed() "" + e)); } }",785fe34e1ca87e6d77a9b78c2b41753cbd81bdb6,"public void sendOffHostTransactionEvent(byte[] aid, byte[] data, java.lang.String reader) { if (((mSEService) == null) || (mNfcEventInstalledPackages.isEmpty())) { return; } java.lang.String[] installedPackages = new java.lang.String[mNfcEventInstalledPackages.size()]; try { boolean[] nfcAccess = mSEService.isNFCEventAllowed(reader, aid, mNfcEventInstalledPackages.toArray(installedPackages)); if (nfcAccess == null) { return; } java.util.ArrayList<java.lang.String> packages = new java.util.ArrayList<java.lang.String>(); android.content.Intent intent = new android.content.Intent(android.nfc.NfcAdapter.ACTION_TRANSACTION_DETECTED); intent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES); intent.putExtra(NfcAdapter.EXTRA_AID, aid); intent.putExtra(NfcAdapter.EXTRA_DATA, data); intent.putExtra(NfcAdapter.EXTRA_SE_NAME, reader); for (int i = 0; i < (nfcAccess.length); i++) { if (nfcAccess[i]) { intent.setPackage(mNfcEventInstalledPackages.get(i).packageName); mContext.sendBroadcast(intent); } } } catch (android.os.RemoteException e) { android.util.Log.e(com.android.nfc.NfcService.TAG, (""Error in isNFCEventAllowed() "" + e)); } }",b51ad1991262fd1f8883c66bb0a94162280fb841,2018-02-02 20:34:22,11
578626,src_com_android_nfc_NfcService.java,private void sendNfcEeAccessProtectedBroadcast(android.content.Intent intent) { intent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES); mNfcDispatcher.resumeAppSwitches(); java.util.ArrayList<java.lang.String> matchingPackages = new java.util.ArrayList<java.lang.String>(); java.util.ArrayList<java.lang.String> preferredPackages = new java.util.ArrayList<java.lang.String>(); synchronized(this) { for (android.content.pm.PackageInfo pkg : mInstalledPackages) { if ((pkg != null) && ((pkg.applicationInfo) != null)) { if (mNfceeAccessControl.check(pkg.applicationInfo)) { matchingPackages.add(pkg.packageName); if (((mCardEmulationManager) != null) && (mCardEmulationManager.packageHasPreferredService(pkg.packageName))) { preferredPackages.add(pkg.packageName); } } } } if ((preferredPackages.size()) > 0) { for (java.lang.String packageName : preferredPackages) { intent.setPackage(packageName); mContext.sendBroadcast(intent); } } else { for (java.lang.String packageName : matchingPackages) { intent.setPackage(packageName); mContext.sendBroadcast(intent); } } } },58db857a795a85795c7fecbf3d3e6c5b187d2141,private void sendNfcEeAccessProtectedBroadcast(android.content.Intent intent) { intent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES); mNfcDispatcher.resumeAppSwitches(); java.util.ArrayList<java.lang.String> matchingPackages = new java.util.ArrayList<java.lang.String>(); java.util.ArrayList<java.lang.String> preferredPackages = new java.util.ArrayList<java.lang.String>(); synchronized(this) { java.util.ArrayList<java.lang.String> SEPackages = getSEAccessAllowedPackages(); if ((SEPackages != null) && (!(SEPackages.isEmpty()))) { for (java.lang.String packageName : SEPackages) { intent.setPackage(packageName); mContext.sendBroadcast(intent); } } for (android.content.pm.PackageInfo pkg : mInstalledPackages) { if ((pkg != null) && ((pkg.applicationInfo) != null)) { if ((SEPackages != null) && (SEPackages.contains(pkg))) { continue; } if (mNfceeAccessControl.check(pkg.applicationInfo)) { matchingPackages.add(pkg.packageName); if (((mCardEmulationManager) != null) && (mCardEmulationManager.packageHasPreferredService(pkg.packageName))) { preferredPackages.add(pkg.packageName); } } } } if ((preferredPackages.size()) > 0) { for (java.lang.String packageName : preferredPackages) { intent.setPackage(packageName); mContext.sendBroadcast(intent); } } else { for (java.lang.String packageName : matchingPackages) { intent.setPackage(packageName); mContext.sendBroadcast(intent); } } } },6c92d3a9d0cfa090e5d9533e8e2a149b74bb8f56,private void sendNfcEeAccessProtectedBroadcast(android.content.Intent intent) { intent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES); mNfcDispatcher.resumeAppSwitches(); synchronized(this) { java.util.ArrayList<java.lang.String> SEPackages = getSEAccessAllowedPackages(); if ((SEPackages != null) && (!(SEPackages.isEmpty()))) { for (java.lang.String packageName : SEPackages) { intent.setPackage(packageName); mContext.sendBroadcast(intent); } } for (android.content.pm.PackageInfo info : mNfcEventInstalledPackages) { if ((SEPackages != null) && (SEPackages.contains(info.packageName))) { continue; } if (((info.applicationInfo) != null) && ((((info.applicationInfo.flags) & (android.content.pm.ApplicationInfo.FLAG_SYSTEM)) != 0) || (((info.applicationInfo.privateFlags) & (android.content.pm.ApplicationInfo.PRIVATE_FLAG_PRIVILEGED)) != 0))) { intent.setPackage(info.packageName); mContext.sendBroadcast(intent); } } } },4734c064bb677cee2c09e6bc463e0db3e3465118,2018-02-02 20:34:22,11
578626,src_com_android_nfc_NfcService.java,"void updatePackageCache() { android.content.pm.PackageManager pm = mContext.getPackageManager(); java.util.List<android.content.pm.PackageInfo> packages = pm.getInstalledPackagesAsUser(0, UserHandle.USER_SYSTEM); synchronized(this) { mInstalledPackages = packages; } }",6b9afb18830d75cc7d7ef675cc41d4eb22534a03,"void updatePackageCache() { android.content.pm.PackageManager pm = mContext.getPackageManager(); java.util.List<android.content.pm.PackageInfo> packages = pm.getInstalledPackagesAsUser(0, UserHandle.USER_SYSTEM); java.util.List<android.content.pm.PackageInfo> packagesNfcEvents = pm.getPackagesHoldingPermissions(new java.lang.String[]{ android.Manifest.permission.NFC_TRANSACTION_EVENT }, PackageManager.GET_ACTIVITIES); synchronized(this) { mInstalledPackages = packages; mNfcEventInstalledPackages = packagesNfcEvents; } }",374dd61987e29e8185e700853c0be0272e47253f,"void updatePackageCache() { android.content.pm.PackageManager pm = mContext.getPackageManager(); java.util.List<android.content.pm.PackageInfo> packagesNfcEvents = pm.getPackagesHoldingPermissions(new java.lang.String[]{ android.Manifest.permission.NFC_TRANSACTION_EVENT }, PackageManager.GET_ACTIVITIES); synchronized(this) { mNfcEventInstalledPackages = packagesNfcEvents; } }",fa7b8dc71c2637271610013902e25c3d537e23d8,2018-02-02 20:34:22,11
525392,java_com_android_server_ethernet_EthernetNetworkFactory.java,private void initNetworkCapabilities() { mNetworkCapabilities = new android.net.NetworkCapabilities(); mNetworkCapabilities.addTransportType(NetworkCapabilities.TRANSPORT_ETHERNET); mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); mNetworkCapabilities.setLinkUpstreamBandwidthKbps((100 * 1000)); mNetworkCapabilities.setLinkDownstreamBandwidthKbps((100 * 1000)); },3d509e9b494bcf81c5ffe0351967c94aef6b90a0,"@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((((getClass().getSimpleName()) + ""{ "") + ""iface: "") + (name)) + "", "") + ""up: "") + (mLinkUp)) + "", "") + ""hwAddress: "") + (mHwAddress)) + "", "") + ""networkInfo: "") + (mNetworkInfo)) + "", "") + ""networkAgent: "") + (mNetworkAgent)) + "", "") + ""ipManager: "") + (mIpManager)) + "","") + ""linkProperties: "") + (mLinkProperties)) + ""}""; }",e4d2d36242142111365a10da69c6cf69db6807df,"@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((((getClass().getSimpleName()) + ""{ "") + ""iface: "") + (name)) + "", "") + ""up: "") + (mLinkUp)) + "", "") + ""hwAddress: "") + (mHwAddress)) + "", "") + ""networkInfo: "") + (mNetworkInfo)) + "", "") + ""networkAgent: "") + (mNetworkAgent)) + "", "") + ""ipClient: "") + (mIpClient)) + "","") + ""linkProperties: "") + (mLinkProperties)) + ""}""; }",bb4ec35b7b56fa5030e3a5d19e721d0c915370b8,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetNetworkFactory.java,"void onIpLayerStarted(android.net.LinkProperties linkProperties) { if ((mNetworkAgent) != null) { android.util.Log.e(com.android.server.ethernet.EthernetNetworkFactory.TAG, ""Already have a NetworkAgent - aborting new request""); stopIpManager(); return; } mLinkProperties = linkProperties; mNetworkInfo.setDetailedState(DetailedState.CONNECTED, null, mHwAddr); mNetworkAgent = new android.net.NetworkAgent(mHandler.getLooper(), mContext, com.android.server.ethernet.EthernetNetworkFactory.NETWORK_TYPE, mNetworkInfo, mNetworkCapabilities, mLinkProperties, com.android.server.ethernet.EthernetNetworkFactory.NETWORK_SCORE) { public void unwanted() { if ((this) == (mNetworkAgent)) { stopIpManager(); } else if ((mNetworkAgent) != null) { android.util.Log.d(com.android.server.ethernet.EthernetNetworkFactory.TAG, (""Ignoring unwanted as we have a more modern "" + ""instance"")); } } }; }",f5305a82085f436575760e8f7e5bd4c7fca27054,"void onIpLayerStarted(android.net.LinkProperties linkProperties) { if ((mNetworkAgent) != null) { android.util.Log.e(com.android.server.ethernet.EthernetNetworkFactory.TAG, ""Already have a NetworkAgent - aborting new request""); stop(); return; } mLinkProperties = linkProperties; mNetworkInfo.setDetailedState(DetailedState.CONNECTED, null, mHwAddress); mNetworkAgent = new android.net.NetworkAgent(mHandler.getLooper(), mContext, com.android.server.ethernet.EthernetNetworkFactory.NETWORK_TYPE, mNetworkInfo, mCapabilities, mLinkProperties, com.android.server.ethernet.EthernetNetworkFactory.NETWORK_SCORE) { public void unwanted() { if ((this) == (mNetworkAgent)) { stop(); } else if ((mNetworkAgent) != null) { android.util.Log.d(com.android.server.ethernet.EthernetNetworkFactory.TAG, (""Ignoring unwanted as we have a more modern "" + ""instance"")); } } }; }",2b96f39a63569b056e1a3e1dffa0bece43cdc220,"void onIpLayerStarted(android.net.LinkProperties linkProperties) { if ((mNetworkAgent) != null) { android.util.Log.e(com.android.server.ethernet.EthernetNetworkFactory.TAG, ""Already have a NetworkAgent - aborting new request""); stop(); return; } mLinkProperties = linkProperties; mNetworkInfo.setDetailedState(DetailedState.CONNECTED, null, mHwAddress); mNetworkInfo.setIsAvailable(true); mNetworkAgent = new android.net.NetworkAgent(mHandler.getLooper(), mContext, com.android.server.ethernet.EthernetNetworkFactory.NETWORK_TYPE, mNetworkInfo, mCapabilities, mLinkProperties, com.android.server.ethernet.EthernetNetworkFactory.NETWORK_SCORE) { public void unwanted() { if ((this) == (mNetworkAgent)) { stop(); } else if ((mNetworkAgent) != null) { android.util.Log.d(com.android.server.ethernet.EthernetNetworkFactory.TAG, (""Ignoring unwanted as we have a more modern "" + ""instance"")); } } }; }",a6274d06dbab7d8494883b2977a31d415f63ac82,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetNetworkFactory.java,"public void updateAgent() { if ((mNetworkAgent) == null) return; if (com.android.server.ethernet.EthernetNetworkFactory.DBG) { android.util.Log.i(com.android.server.ethernet.EthernetNetworkFactory.TAG, (((((""Updating mNetworkAgent with: "" + (mNetworkCapabilities)) + "", "") + (mNetworkInfo)) + "", "") + (mLinkProperties))); } mNetworkAgent.sendNetworkCapabilities(mNetworkCapabilities); mNetworkAgent.sendNetworkInfo(mNetworkInfo); mNetworkAgent.sendLinkProperties(mLinkProperties); mNetworkAgent.sendNetworkScore((mLinkUp ? com.android.server.ethernet.EthernetNetworkFactory.NETWORK_SCORE : 0)); }",0e516bce21037a3ca52d34579e631c94b06789e8,"private void start() { if (com.android.server.ethernet.EthernetNetworkFactory.DBG) { android.util.Log.d(com.android.server.ethernet.EthernetNetworkFactory.TAG, java.lang.String.format(""starting IpManager(%s): mNetworkInfo=%s"", name, mNetworkInfo)); } if ((mIpManager) != null) stop(); mNetworkInfo.setDetailedState(DetailedState.OBTAINING_IPADDR, null, mHwAddress); mIpManager = new android.net.ip.IpManager(mContext, name, mIpManagerCallback); if ((com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState.sTcpBufferSizes) == null) { com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState.sTcpBufferSizes = mContext.getResources().getString(com.android.internal.R.string.config_ethernet_tcp_buffers); } com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState.provisionIpManager(mIpManager, mIpConfig, com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState.sTcpBufferSizes); }",90c9f2dd335d728bac0545e495eab6335bf086df,"private void start() { if (com.android.server.ethernet.EthernetNetworkFactory.DBG) { android.util.Log.d(com.android.server.ethernet.EthernetNetworkFactory.TAG, java.lang.String.format(""starting IpClient(%s): mNetworkInfo=%s"", name, mNetworkInfo)); } if ((mIpClient) != null) stop(); mNetworkInfo.setDetailedState(DetailedState.OBTAINING_IPADDR, null, mHwAddress); mIpClient = new android.net.ip.IpClient(mContext, name, mIpClientCallback); if ((com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState.sTcpBufferSizes) == null) { com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState.sTcpBufferSizes = mContext.getResources().getString(com.android.internal.R.string.config_ethernet_tcp_buffers); } com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState.provisionIpClient(mIpClient, mIpConfig, com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState.sTcpBufferSizes); }",434526c3cd07178d999f8acff5bf61f4082b7ce4,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetNetworkFactory.java,private void postAndWaitForRunnable(java.lang.Runnable r) throws java.lang.InterruptedException { java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1); mHandler.post(() -> { try { r.run(); } finally { latch.countDown(); } }); latch.await(); },c4cbde3dc7e8daeffa89055bdce6af75209d5818,private com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState networkForRequest(NetworkRequest request) { java.lang.String requestedIface = null; android.net.NetworkSpecifier specifier = request.networkCapabilities.getNetworkSpecifier(); if (specifier instanceof android.net.StringNetworkSpecifier) { requestedIface = ((android.net.StringNetworkSpecifier) (specifier)).specifier; } com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState network = null; if (!(android.text.TextUtils.isEmpty(requestedIface))) { com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState n = mTrackingInterfaces.get(requestedIface); network = (n.statisified(request.networkCapabilities)) ? n : null; } else { for (com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState n : mTrackingInterfaces.values()) { if (n.statisified(request.networkCapabilities)) { network = n; break; } } } return network; },e2f9ff80b6956798723f0b3c8d623b16edde4847,"private com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState networkForRequest(NetworkRequest request) { java.lang.String requestedIface = null; android.net.NetworkSpecifier specifier = request.networkCapabilities.getNetworkSpecifier(); if (specifier instanceof android.net.StringNetworkSpecifier) { requestedIface = ((android.net.StringNetworkSpecifier) (specifier)).specifier; } com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState network = null; if (!(android.text.TextUtils.isEmpty(requestedIface))) { com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState n = mTrackingInterfaces.get(requestedIface); if ((n != null) && (n.statisified(request.networkCapabilities))) { network = n; } } else { for (com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState n : mTrackingInterfaces.values()) { if (n.statisified(request.networkCapabilities)) { network = n; break; } } } if (com.android.server.ethernet.EthernetNetworkFactory.DBG) { android.util.Log.i(com.android.server.ethernet.EthernetNetworkFactory.TAG, (((""networkForRequest, request: "" + request) + "", network: "") + network)); } return network; }",b9b2cf43eb76c25301a2fff2b9cde9c6b236a9ae,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetNetworkFactory.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void addInterface(java.lang.String ifaceName, java.lang.String hwAddress, android.net.NetworkCapabilities capabilities, android.net.IpConfiguration ipConfiguration) { if (mTrackingInterfaces.containsKey(ifaceName)) { return; } if (com.android.server.ethernet.EthernetNetworkFactory.DBG) { android.util.Log.d(com.android.server.ethernet.EthernetNetworkFactory.TAG, (((""addInterface, iface: "" + ifaceName) + "", capabilities: "") + capabilities)); } com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState iface = new com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState(ifaceName, hwAddress, mHandler, mContext, capabilities); iface.setIpConfig(ipConfiguration); mTrackingInterfaces.put(ifaceName, iface); }",7b0ebce7aa548edd49dbec7a862ae1d7a6c80fa0,"void addInterface(java.lang.String ifaceName, java.lang.String hwAddress, android.net.NetworkCapabilities capabilities, android.net.IpConfiguration ipConfiguration) { if (mTrackingInterfaces.containsKey(ifaceName)) { android.util.Log.e(com.android.server.ethernet.EthernetNetworkFactory.TAG, ((""Interface with name "" + ifaceName) + "" already exists."")); return; } if (com.android.server.ethernet.EthernetNetworkFactory.DBG) { android.util.Log.d(com.android.server.ethernet.EthernetNetworkFactory.TAG, (((""addInterface, iface: "" + ifaceName) + "", capabilities: "") + capabilities)); } com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState iface = new com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState(ifaceName, hwAddress, mHandler, mContext, capabilities); iface.setIpConfig(ipConfiguration); mTrackingInterfaces.put(ifaceName, iface); updateCapabilityFilter(); }",cc1446a17012cf4a060e87b87b16ded345f5b493,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetConfigStore.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean write(java.lang.String iface, android.net.IpConfiguration config) { boolean modified; synchronized(mSync) { if (config == null) { modified = (mIpConfigurations.remove(iface)) != null; } else { android.net.IpConfiguration oldConfig = mIpConfigurations.put(iface, config); modified = !(config.equals(oldConfig)); } if (modified) { mStore.writeIpConfigurations(com.android.server.ethernet.EthernetConfigStore.ipConfigFile, mIpConfigurations); } } return modified; }",405733a2eb8da3ae7eaeb1f1578f8d3b10cdf2aa,"public void write(java.lang.String iface, android.net.IpConfiguration config) { boolean modified; synchronized(mSync) { if (config == null) { modified = (mIpConfigurations.remove(iface)) != null; } else { android.net.IpConfiguration oldConfig = mIpConfigurations.put(iface, config); modified = !(config.equals(oldConfig)); } if (modified) { mStore.writeIpConfigurations(com.android.server.ethernet.EthernetConfigStore.ipConfigFile, mIpConfigurations); } } }",ef6d72efd5792a0e3ac61a3b2b5945117b53474f,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetNetworkFactory.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,void removeInterface(java.lang.String interfaceName) { com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState iface = mTrackingInterfaces.remove(interfaceName); if (iface != null) { iface.stop(); } },8cc112f9d8cac75f041960ae48d3043fa4fe4015,void removeInterface(java.lang.String interfaceName) { com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState iface = mTrackingInterfaces.remove(interfaceName); if (iface != null) { iface.stop(); } updateCapabilityFilter(); },e7fd0e9f75c61a6dbcef14dff391445e497e7473,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetNetworkFactory.java,"public void startIpManager() { if (com.android.server.ethernet.EthernetNetworkFactory.DBG) { android.util.Log.d(com.android.server.ethernet.EthernetNetworkFactory.TAG, java.lang.String.format(""starting IpManager(%s): mNetworkInfo=%s"", mIface, mNetworkInfo)); } android.net.IpConfiguration config = mEthernetManager.getConfiguration(); mNetworkInfo.setDetailedState(DetailedState.OBTAINING_IPADDR, null, mHwAddr); android.net.ip.IpManager.Callback ipmCallback = new android.net.ip.IpManager.Callback() { @java.lang.Override public void onProvisioningSuccess(android.net.LinkProperties newLp) { mHandler.post(() -> onIpLayerStarted(newLp)); } @java.lang.Override public void onProvisioningFailure(android.net.LinkProperties newLp) { mHandler.post(() -> onIpLayerStopped(newLp)); } @java.lang.Override public void onLinkPropertiesChange(android.net.LinkProperties newLp) { mHandler.post(() -> updateLinkProperties(newLp)); } }; stopIpManager(); mIpManager = new android.net.ip.IpManager(mContext, mIface, ipmCallback); if (((config.getProxySettings()) == (android.net.IpConfiguration.ProxySettings.STATIC)) || ((config.getProxySettings()) == (android.net.IpConfiguration.ProxySettings.PAC))) { mIpManager.setHttpProxy(config.getHttpProxy()); } final java.lang.String tcpBufferSizes = mContext.getResources().getString(com.android.internal.R.string.config_ethernet_tcp_buffers); if (!(android.text.TextUtils.isEmpty(tcpBufferSizes))) { mIpManager.setTcpBufferSizes(tcpBufferSizes); } final android.net.ip.IpManager.ProvisioningConfiguration provisioningConfiguration; if ((config.getIpAssignment()) == (android.net.IpConfiguration.IpAssignment.STATIC)) { provisioningConfiguration = android.net.ip.IpManager.buildProvisioningConfiguration().withStaticConfiguration(config.getStaticIpConfiguration()).build(); } else { provisioningConfiguration = mIpManager.buildProvisioningConfiguration().withProvisioningTimeoutMs(0).build(); } mIpManager.startProvisioning(provisioningConfiguration); }",2e311198c9c3a88cff7287bc2758fe02b1a48662,"void stop() { if ((mIpManager) != null) { mIpManager.shutdown(); mIpManager = null; } mNetworkInfo.setDetailedState(DetailedState.DISCONNECTED, null, mHwAddress); if ((mNetworkAgent) != null) { updateAgent(); mNetworkAgent = null; } clear(); }",86206767a220563546bc185b2a536985b9e3c036,"void stop() { if ((mIpClient) != null) { mIpClient.shutdown(); mIpClient = null; } mNetworkInfo.setDetailedState(DetailedState.DISCONNECTED, null, mHwAddress); if ((mNetworkAgent) != null) { updateAgent(); mNetworkAgent = null; } clear(); }",e76dd75dd7060b038854551b1fd97f77f48a9a96,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetNetworkFactory.java,"public void stop() { stopIpManager(); setInterfaceInfo("""", null); mFactory.unregister(); }",e5cff4db98f9ef659ce2aec0461a7d889064c913,"private static void provisionIpManager(android.net.ip.IpManager mgr, android.net.IpConfiguration config, java.lang.String tcpBufferSizes) { if (((config.getProxySettings()) == (android.net.IpConfiguration.ProxySettings.STATIC)) || ((config.getProxySettings()) == (android.net.IpConfiguration.ProxySettings.PAC))) { mgr.setHttpProxy(config.getHttpProxy()); } if (!(android.text.TextUtils.isEmpty(tcpBufferSizes))) { mgr.setTcpBufferSizes(tcpBufferSizes); } final android.net.ip.IpManager.ProvisioningConfiguration provisioningConfiguration; if ((config.getIpAssignment()) == (android.net.IpConfiguration.IpAssignment.STATIC)) { provisioningConfiguration = android.net.ip.IpManager.buildProvisioningConfiguration().withStaticConfiguration(config.getStaticIpConfiguration()).build(); } else { provisioningConfiguration = android.net.ip.IpManager.buildProvisioningConfiguration().withProvisioningTimeoutMs(0).build(); } mgr.startProvisioning(provisioningConfiguration); }",e6266ee86d63a19d9712aeaae221359012728bae,"private static void provisionIpClient(android.net.ip.IpClient ipClient, android.net.IpConfiguration config, java.lang.String tcpBufferSizes) { if (((config.getProxySettings()) == (android.net.IpConfiguration.ProxySettings.STATIC)) || ((config.getProxySettings()) == (android.net.IpConfiguration.ProxySettings.PAC))) { ipClient.setHttpProxy(config.getHttpProxy()); } if (!(android.text.TextUtils.isEmpty(tcpBufferSizes))) { ipClient.setTcpBufferSizes(tcpBufferSizes); } final android.net.ip.IpClient.ProvisioningConfiguration provisioningConfiguration; if ((config.getIpAssignment()) == (android.net.IpConfiguration.IpAssignment.STATIC)) { provisioningConfiguration = android.net.ip.IpClient.buildProvisioningConfiguration().withStaticConfiguration(config.getStaticIpConfiguration()).build(); } else { provisioningConfiguration = android.net.ip.IpClient.buildProvisioningConfiguration().withProvisioningTimeoutMs(0).build(); } ipClient.startProvisioning(provisioningConfiguration); }",0522cbd2d5cf998d9becfb615341d6f63550a588,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetNetworkFactory.java,@java.lang.Override public void interfaceRemoved(java.lang.String iface) { mHandler.post(() -> { if (stopTrackingInterface(iface)) { trackFirstAvailableInterface(); } }); },d623bfae2528ae0fc0b36fc6289dc7975e15dabe,boolean statisified(android.net.NetworkCapabilities capabilities) { return this.mCapabilities.satisfiedByImmutableNetworkCapabilities(capabilities); },95cdb9521054d3ea4ddeb230e9bb7be55c7a83c4,boolean statisified(android.net.NetworkCapabilities requestedCapabilities) { return requestedCapabilities.satisfiedByNetworkCapabilities(mCapabilities); },2c824519ba361f26795e0ed8bf31c5d37f478fb4,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetTracker.java,,,"void dump(java.io.FileDescriptor fd, com.android.internal.util.IndentingPrintWriter pw, java.lang.String[] args) { try { postAndWaitForRunnable(() -> { pw.println(getClass().getSimpleName()); pw.println((""Ethernet interface name filter: "" + (mIfaceMatch))); pw.println((""Listeners: "" + (mListeners.getRegisteredCallbackCount()))); pw.println(""IP Configurations:""); pw.increaseIndent(); for (java.lang.String iface : mIpConfigurations.keySet()) { pw.println(((iface + "": "") + (mIpConfigurations.get(iface)))); } pw.decreaseIndent(); pw.println(); pw.println(""Network Capabilities:""); pw.increaseIndent(); for (java.lang.String iface : mNetworkCapabilities.keySet()) { pw.println(((iface + "": "") + (mNetworkCapabilities.get(iface)))); } pw.decreaseIndent(); pw.println(); mFactory.dump(fd, pw, args); }); } catch (java.lang.InterruptedException e) { throw new java.lang.IllegalStateException(""dump() interrupted""); } }",809f82c8dedb09e917ead3b2180d196981dae62d,"void dump(java.io.FileDescriptor fd, com.android.internal.util.IndentingPrintWriter pw, java.lang.String[] args) { postAndWaitForRunnable(() -> { pw.println(getClass().getSimpleName()); pw.println((""Ethernet interface name filter: "" + (mIfaceMatch))); pw.println((""Listeners: "" + (mListeners.getRegisteredCallbackCount()))); pw.println(""IP Configurations:""); pw.increaseIndent(); for (java.lang.String iface : mIpConfigurations.keySet()) { pw.println(((iface + "": "") + (mIpConfigurations.get(iface)))); } pw.decreaseIndent(); pw.println(); pw.println(""Network Capabilities:""); pw.increaseIndent(); for (java.lang.String iface : mNetworkCapabilities.keySet()) { pw.println(((iface + "": "") + (mNetworkCapabilities.get(iface)))); } pw.decreaseIndent(); pw.println(); mFactory.dump(fd, pw, args); }); }",da71bdee4f4ab415b3f7e5b3e37c42dfd3076bb8,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetConfigStore.java,"public void writeIpAndProxyConfigurations(android.net.IpConfiguration config) { android.util.SparseArray<android.net.IpConfiguration> networks = new android.util.SparseArray<android.net.IpConfiguration>(); networks.put(0, config); writeIpAndProxyConfigurations(com.android.server.ethernet.EthernetConfigStore.ipConfigFile, networks); }",fc6d0bb5830e626d126be18518f34208fe12a65f,public android.net.IpConfiguration getIpConfigurationForDefaultInterface() { synchronized(mSync) { return mIpConfigurationForDefaultInterface; } },fd9fb2299a0d2203b1fcf8701c6ecb9a7b3a015e,public android.net.IpConfiguration getIpConfigurationForDefaultInterface() { synchronized(mSync) { return new android.net.IpConfiguration(mIpConfigurationForDefaultInterface); } },0f3a06b761f0dff640878a3558ebfe0b6e6eeaae,2018-02-02 23:13:46,7
525435,Settings_src_com_android_tv_settings_connectivity_EthernetConfig.java,public void load() { mIpConfiguration = mEthernetManager.getConfiguration(); },8e74cb1579e52ad26084cb9d1b294f535207b7a6,public void load() { java.lang.String[] ifaces = mEthernetManager.getAvailableInterfaces(); if ((ifaces != null) && ((ifaces.length) > 0)) { mInterfaceName = ifaces[0]; mIpConfiguration = mEthernetManager.getConfiguration(mInterfaceName); } },97bae0127988d8b2bb97131539e09fc29cea0568,public void load() { java.lang.String[] ifaces = mEthernetManager.getAvailableInterfaces(); if ((ifaces.length) > 0) { mInterfaceName = ifaces[0]; mIpConfiguration = mEthernetManager.getConfiguration(mInterfaceName); } },f737b194e91a8c287514dafc96ce0dfb0145429b,2018-02-02 23:13:46,3
525392,java_com_android_server_ethernet_EthernetNetworkFactory.java,"void dump(java.io.FileDescriptor fd, com.android.internal.util.IndentingPrintWriter pw, java.lang.String[] args) { try { postAndWaitForRunnable(() -> { pw.println((""Network Requested: "" + (mNetworkRequested))); if (isTrackingInterface()) { pw.println((""Tracking interface: "" + (mIface))); pw.increaseIndent(); pw.println((""MAC address: "" + (mHwAddr))); pw.println((""Link state: "" + (mLinkUp ? ""up"" : ""down""))); pw.decreaseIndent(); } else { pw.println(""Not tracking any interface""); } pw.println(); pw.println((""NetworkInfo: "" + (mNetworkInfo))); pw.println((""LinkProperties: "" + (mLinkProperties))); pw.println((""NetworkAgent: "" + (mNetworkAgent))); if ((mIpManager) != null) { pw.println(""IpManager:""); pw.increaseIndent(); mIpManager.dump(fd, pw, args); pw.decreaseIndent(); } }); } catch (java.lang.InterruptedException e) { throw new java.lang.IllegalStateException(""dump() interrupted""); } }",8de045915c796dd68f840825900d1271154cc95b,"void dump(java.io.FileDescriptor fd, com.android.internal.util.IndentingPrintWriter pw, java.lang.String[] args) { pw.println(getClass().getSimpleName()); pw.println(""Tracking interfaces:""); pw.increaseIndent(); for (java.lang.String iface : mTrackingInterfaces.keySet()) { pw.println(((iface + "":"") + (mTrackingInterfaces.get(iface)))); } pw.decreaseIndent(); }",2be0d978eec3950edc35accc6eb7bd221aa95609,"void dump(java.io.FileDescriptor fd, com.android.internal.util.IndentingPrintWriter pw, java.lang.String[] args) { super.dump(fd, pw, args); pw.println(getClass().getSimpleName()); pw.println(""Tracking interfaces:""); pw.increaseIndent(); for (java.lang.String iface : mTrackingInterfaces.keySet()) { com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState ifaceState = mTrackingInterfaces.get(iface); pw.println(((iface + "":"") + ifaceState)); pw.increaseIndent(); ifaceState.mIpClient.dump(fd, pw, args); pw.decreaseIndent(); } pw.decreaseIndent(); }",7d3209bfd75198ff2688a11dd9f3aca3bd06fb5c,2018-02-02 23:13:46,7
525388,services_core_java_com_android_server_net_IpConfigStore.java,"public void writeIpAndProxyConfigurations(java.lang.String filePath, final android.util.SparseArray<android.net.IpConfiguration> networks) { mWriter.write(filePath, new com.android.server.net.DelayedDiskWrite.Writer() { public void onWriteCalled(java.io.DataOutputStream out) throws java.io.IOException { out.writeInt(com.android.server.net.IpConfigStore.IPCONFIG_FILE_VERSION); for (int i = 0; i < (networks.size()); i++) { com.android.server.net.IpConfigStore.writeConfig(out, networks.keyAt(i), networks.valueAt(i)); } } }); }",edd5cb9bf2ae7549b88057dafcc7d6c3265e242a,"@java.lang.Deprecated public void writeIpAndProxyConfigurationsToFile(java.lang.String filePath, final android.util.SparseArray<android.net.IpConfiguration> networks) { mWriter.write(filePath, new com.android.server.net.DelayedDiskWrite.Writer() { public void onWriteCalled(java.io.DataOutputStream out) throws java.io.IOException { out.writeInt(com.android.server.net.IpConfigStore.IPCONFIG_FILE_VERSION); for (int i = 0; i < (networks.size()); i++) { com.android.server.net.IpConfigStore.writeConfig(out, java.lang.String.valueOf(networks.keyAt(i)), networks.valueAt(i)); } } }); }",6932640ae93e599342a6bb6814eb86c1b2e50807,"@java.lang.Deprecated public void writeIpAndProxyConfigurationsToFile(java.lang.String filePath, final android.util.SparseArray<android.net.IpConfiguration> networks) { mWriter.write(filePath, ( out) -> { out.writeInt(com.android.server.net.IpConfigStore.IPCONFIG_FILE_VERSION); for (int i = 0; i < (networks.size()); i++) { writeConfig(out, java.lang.String.valueOf(networks.keyAt(i)), networks.valueAt(i)); } }); }",a1c2ac9871c448c5424deab4735ba5b51943f166,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetConfigStore.java,"public android.net.IpConfiguration readIpAndProxyConfigurations() { android.util.SparseArray<android.net.IpConfiguration> networks = readIpAndProxyConfigurations(com.android.server.ethernet.EthernetConfigStore.ipConfigFile); if ((networks.size()) == 0) { android.util.Log.w(com.android.server.ethernet.EthernetConfigStore.TAG, ""No Ethernet configuration found. Using default.""); return new android.net.IpConfiguration(android.net.IpConfiguration.IpAssignment.DHCP, android.net.IpConfiguration.ProxySettings.NONE, null, null); } if ((networks.size()) > 1) { android.util.Log.w(com.android.server.ethernet.EthernetConfigStore.TAG, ""Multiple Ethernet configurations detected. Only reading first one.""); } return networks.valueAt(0); }",282a406e5ecafe5617632fd1714480f4e9796457,"public android.util.ArrayMap<java.lang.String, android.net.IpConfiguration> getIpConfigurations() { synchronized(mSync) { return mIpConfigurations; } }",4bf9c14e2b325fcdaea89a6ac63a107218e80285,"public android.util.ArrayMap<java.lang.String, android.net.IpConfiguration> getIpConfigurations() { synchronized(mSync) { return new android.util.ArrayMap(mIpConfigurations); } }",458c3b012a96628477ae1070206378b3218859d8,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetTracker.java,,,"private void parseEthernetConfig(java.lang.String configString) { java.lang.String[] tokens = configString.split("";""); java.lang.String name = tokens[0]; android.net.NetworkCapabilities nc = com.android.server.ethernet.EthernetTracker.createNetworkCapabilities(((tokens.length) > 1 ? tokens[1] : null)); mNetworkCapabilities.put(name, nc); if (((tokens.length) > 2) && (!(android.text.TextUtils.isEmpty(tokens[2])))) { android.net.IpConfiguration ipConfig = com.android.server.ethernet.EthernetTracker.createStaticIpConfiguration(tokens[2]); mIpConfigurations.put(name, ipConfig); } }",bb19d022f6b38c0b642487228646da1cb799a08b,"private void parseEthernetConfig(java.lang.String configString) { java.lang.String[] tokens = configString.split("";""); java.lang.String name = tokens[0]; java.lang.String capabilities = ((tokens.length) > 1) ? tokens[1] : null; android.net.NetworkCapabilities nc = com.android.server.ethernet.EthernetTracker.createNetworkCapabilities((!(android.text.TextUtils.isEmpty(capabilities))), capabilities); mNetworkCapabilities.put(name, nc); if (((tokens.length) > 2) && (!(android.text.TextUtils.isEmpty(tokens[2])))) { android.net.IpConfiguration ipConfig = com.android.server.ethernet.EthernetTracker.createStaticIpConfiguration(tokens[2]); mIpConfigurations.put(name, ipConfig); } }",08a225ba227944d9843953b37a6e67ca06176dd8,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetTracker.java,,,"private static android.net.NetworkCapabilities createNetworkCapabilities(@android.annotation.Nullable java.lang.String commaSeparatedCapabilities) { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); nc.clearAll(); nc.addTransportType(NetworkCapabilities.TRANSPORT_ETHERNET); nc.setLinkUpstreamBandwidthKbps((100 * 1000)); nc.setLinkDownstreamBandwidthKbps((100 * 1000)); if (!(android.text.TextUtils.isEmpty(commaSeparatedCapabilities))) { for (java.lang.String strNetworkCapability : commaSeparatedCapabilities.split("","")) { if (!(android.text.TextUtils.isEmpty(strNetworkCapability))) { nc.addCapability(java.lang.Integer.valueOf(strNetworkCapability)); } } } return nc; }",1c4822acaa73550d637d220d3aedfd5d4d542bee,"private static android.net.NetworkCapabilities createNetworkCapabilities(boolean clearDefaultCapabilities) { return com.android.server.ethernet.EthernetTracker.createNetworkCapabilities(clearDefaultCapabilities, null); }",59faab67e681f2c39426048e13af8aad5deaf049,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetTracker.java,,,"private void updateInterfaceState(java.lang.String iface, boolean up) { boolean modified = mFactory.updateInterfaceLinkState(iface, up); if (modified) { boolean restricted = isRestrictedInterface(iface); int n = mListeners.beginBroadcast(); for (int i = 0; i < n; i++) { try { if (restricted) { com.android.server.ethernet.EthernetTracker.ListenerInfo listenerInfo = ((com.android.server.ethernet.EthernetTracker.ListenerInfo) (mListeners.getBroadcastCookie(i))); if (!(listenerInfo.canUseRestrictedNetworks)) continue; } mListeners.getBroadcastItem(i).onAvailabilityChanged(iface, up); } catch (android.os.RemoteException e) { } } mListeners.finishBroadcast(); } }",b491afc39c224b047b1f532f202f058ee806a5e4,"private void updateInterfaceState(java.lang.String iface, boolean up) { boolean modified = mFactory.updateInterfaceLinkState(iface, up); if (modified) { boolean restricted = isRestrictedInterface(iface); int n = mListeners.beginBroadcast(); for (int i = 0; i < n; i++) { try { if (restricted) { com.android.server.ethernet.EthernetTracker.ListenerInfo listenerInfo = ((com.android.server.ethernet.EthernetTracker.ListenerInfo) (mListeners.getBroadcastCookie(i))); if (!(listenerInfo.canUseRestrictedNetworks)) { continue; } } mListeners.getBroadcastItem(i).onAvailabilityChanged(iface, up); } catch (android.os.RemoteException e) { } } mListeners.finishBroadcast(); } }",d7edb9f3a54ce06a8209152cc78657718fa6f388,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetTracker.java,,,private void postAndWaitForRunnable(java.lang.Runnable r) throws java.lang.InterruptedException { java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1); mHandler.post(() -> { try { r.run(); } finally { latch.countDown(); } }); latch.await(); },c4cbde3dc7e8daeffa89055bdce6af75209d5818,"private void postAndWaitForRunnable(java.lang.Runnable r) { mHandler.runWithScissors(r, 2000L); }",7abf6166033764e46879ccd9a051336eb3ba3308,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetTracker.java,,,private static android.net.NetworkCapabilities createDefaultNetworkCapabilities() { android.net.NetworkCapabilities nc = com.android.server.ethernet.EthernetTracker.createNetworkCapabilities(null); nc.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); nc.addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); return nc; },4f1df1f3fa75241642c4d7a9c12580d02df2354a,private static android.net.NetworkCapabilities createDefaultNetworkCapabilities() { android.net.NetworkCapabilities nc = com.android.server.ethernet.EthernetTracker.createNetworkCapabilities(false); nc.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); nc.addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); nc.addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_METERED); nc.addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_ROAMING); return nc; },a5a9c5e3ec89885d790ff30bd0f799ece5aafabc,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetTracker.java,,,"@java.lang.Override public void interfaceLinkStateChanged(java.lang.String iface, boolean up) { if (com.android.server.ethernet.EthernetTracker.DBG) android.util.Log.i(com.android.server.ethernet.EthernetTracker.TAG, (((""interfaceLinkStateChanged, iface: "" + iface) + "", up: "") + up)); mHandler.post(() -> updateInterfaceState(iface, up)); }",9a6201712e411cf92c0f5e2a6f2949539531f212,"@java.lang.Override public void interfaceLinkStateChanged(java.lang.String iface, boolean up) { if (com.android.server.ethernet.EthernetTracker.DBG) { android.util.Log.i(com.android.server.ethernet.EthernetTracker.TAG, (((""interfaceLinkStateChanged, iface: "" + iface) + "", up: "") + up)); } mHandler.post(() -> updateInterfaceState(iface, up)); }",5713a243d6e5cce9af8df9342c0f210182c8f41a,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetTracker.java,,,"void updateIpConfiguration(java.lang.String iface, android.net.IpConfiguration ipConfiguration) { if (com.android.server.ethernet.EthernetTracker.DBG) android.util.Log.i(com.android.server.ethernet.EthernetTracker.TAG, (((""updateIpConfiguration, iface: "" + iface) + "", cfg: "") + ipConfiguration)); mConfigStore.write(iface, ipConfiguration); mIpConfigurations.put(iface, ipConfiguration); mHandler.post(() -> mFactory.updateIpConfiguration(iface, ipConfiguration)); }",eb3560abbf2356f9d06e7a7276eb888283605033,"void updateIpConfiguration(java.lang.String iface, android.net.IpConfiguration ipConfiguration) { if (com.android.server.ethernet.EthernetTracker.DBG) { android.util.Log.i(com.android.server.ethernet.EthernetTracker.TAG, (((""updateIpConfiguration, iface: "" + iface) + "", cfg: "") + ipConfiguration)); } mConfigStore.write(iface, ipConfiguration); mIpConfigurations.put(iface, ipConfiguration); mHandler.post(() -> mFactory.updateIpConfiguration(iface, ipConfiguration)); }",863a905524b37a544d0f7dd25ed0f444e51a9008,2018-02-02 23:13:46,7
525392,java_com_android_server_ethernet_EthernetTracker.java,,,"private void addInterface(java.lang.String iface) { android.net.InterfaceConfiguration config = null; try { mNMService.setInterfaceUp(iface); config = mNMService.getInterfaceConfig(iface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { android.util.Log.e(com.android.server.ethernet.EthernetTracker.TAG, (""Error upping interface "" + iface), e); } if (config == null) { android.util.Log.e(com.android.server.ethernet.EthernetTracker.TAG, ((""Null interface config for "" + iface) + "". Bailing out."")); return; } android.net.NetworkCapabilities nc = mNetworkCapabilities.get(iface); if (nc == null) { nc = com.android.server.ethernet.EthernetTracker.createDefaultNetworkCapabilities(); } android.net.IpConfiguration ipConfiguration = mIpConfigurations.get(iface); if (ipConfiguration == null) { ipConfiguration = com.android.server.ethernet.EthernetTracker.createDefaultIpConfiguration(); } android.util.Log.d(com.android.server.ethernet.EthernetTracker.TAG, (""Started tracking interface "" + iface)); mFactory.addInterface(iface, config.getHardwareAddress(), nc, ipConfiguration); if (config.hasFlag(""running"")) { updateInterfaceState(iface, true); } }",11685568aea126b69cba94a3900b3e48d50e74e7,"private void addInterface(java.lang.String iface) { android.net.InterfaceConfiguration config = null; try { mNMService.setInterfaceUp(iface); config = mNMService.getInterfaceConfig(iface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { android.util.Log.e(com.android.server.ethernet.EthernetTracker.TAG, (""Error upping interface "" + iface), e); } if (config == null) { android.util.Log.e(com.android.server.ethernet.EthernetTracker.TAG, ((""Null interface config for "" + iface) + "". Bailing out."")); return; } final java.lang.String hwAddress = config.getHardwareAddress(); android.net.NetworkCapabilities nc = mNetworkCapabilities.get(iface); if (nc == null) { nc = mNetworkCapabilities.get(hwAddress); if (nc == null) { nc = com.android.server.ethernet.EthernetTracker.createDefaultNetworkCapabilities(); } } android.net.IpConfiguration ipConfiguration = mIpConfigurations.get(iface); if (ipConfiguration == null) { ipConfiguration = com.android.server.ethernet.EthernetTracker.createDefaultIpConfiguration(); } android.util.Log.d(com.android.server.ethernet.EthernetTracker.TAG, (""Started tracking interface "" + iface)); mFactory.addInterface(iface, hwAddress, nc, ipConfiguration); if (config.hasFlag(""running"")) { updateInterfaceState(iface, true); } }",794fab838b460c3b361ae22a92b9ede1d618725a,2018-02-02 23:13:46,7
603238,src_java_com_android_internal_telephony_uicc_UiccProfile.java,"private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app != null) && (isSupportedApplication(app))) && (!(app.isReady()))) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log(""areAllApplicationsReady: return false""); return false; } } if (com.android.internal.telephony.uicc.UiccProfile.VDBG) { log((""areAllApplicationsReady: outside loop, return "" + ((mUiccApplications[0]) != null))); } return (mUiccApplications[0]) != null; }",086aaf3a75083320874edb9c45faad757759e4a9,"private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app != null) && (isSupportedApplication(app))) && (!(app.isReady()))) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log(""areAllApplicationsReady: return false""); return false; } } if (com.android.internal.telephony.uicc.UiccProfile.VDBG) { log((""areAllApplicationsReady: outside loop, return "" + ((mUiccApplications[0]) != null))); } return ((mUiccCard) instanceof com.android.internal.telephony.uicc.euicc.EuiccCard) || ((mUiccApplications[0]) != null); }",29cee7f9b54257fd56dc9c0085b0181dd5963d42,"private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app != null) && (isSupportedApplication(app))) && (!(app.isReady()))) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) com.android.internal.telephony.uicc.UiccProfile.log(""areAllApplicationsReady: return false""); return false; } } if (com.android.internal.telephony.uicc.UiccProfile.VDBG) { com.android.internal.telephony.uicc.UiccProfile.log((""areAllApplicationsReady: outside loop, return "" + ((mUiccApplication) != null))); } return (mUiccApplication) != null; }",36f0a2c28aadb35a3f24c7cdf14ded4700bf1c8c,2018-02-03 01:02:28,14
603238,src_java_com_android_internal_telephony_uicc_UiccProfile.java,"private boolean areAllRecordsLoaded() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if ((app != null) && (isSupportedApplication(app))) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir == null) || (!(ir.isLoaded()))) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log(""areAllRecordsLoaded: return false""); return false; } } } if (com.android.internal.telephony.uicc.UiccProfile.VDBG) { log((""areAllRecordsLoaded: outside loop, return "" + ((mUiccApplications[0]) != null))); } return (mUiccApplications[0]) != null; }",da78d0d6d3f5edb15fe77d0f36d35f090674dc82,"private boolean areAllRecordsLoaded() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if ((app != null) && (isSupportedApplication(app))) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir == null) || (!(ir.isLoaded()))) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log(""areAllRecordsLoaded: return false""); return false; } } } if (com.android.internal.telephony.uicc.UiccProfile.VDBG) { log((""areAllRecordsLoaded: outside loop, return "" + ((mUiccApplications[0]) != null))); } return ((mUiccCard) instanceof com.android.internal.telephony.uicc.euicc.EuiccCard) || ((mUiccApplications[0]) != null); }",ae933a364d4f23fb1bb9e468e347254d449821ac,"private boolean areAllRecordsLoaded() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if ((app != null) && (isSupportedApplication(app))) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir == null) || (!(ir.isLoaded()))) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) com.android.internal.telephony.uicc.UiccProfile.log(""areAllRecordsLoaded: return false""); return false; } } } if (com.android.internal.telephony.uicc.UiccProfile.VDBG) { com.android.internal.telephony.uicc.UiccProfile.log((""areAllRecordsLoaded: outside loop, return "" + ((mUiccApplication) != null))); } return (mUiccApplication) != null; }",b6c9548e42e65c30179104cf5bf8b029dd3235bc,2018-02-03 01:02:28,14
580609,Common_src_com_googlecode_android_scripting_facade_bluetooth_GattClientFacade.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Request an LE connection parameters update."") public boolean gattClientRequestLeConnectionParameters(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""index"") java.lang.Integer index, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""minConnectionInterval"") java.lang.Integer minConnectionInterval, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""maxConnectionInterval"") java.lang.Integer maxConnectionInterval, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""slaveLatency"") java.lang.Integer slaveLatency, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""supervisionTimeout"") java.lang.Integer supervisionTimeout) throws java.lang.Exception { boolean result = false; if ((mBluetoothGattList.get(index)) != null) { result = mBluetoothGattList.get(index).requestLeConnectionParameters(minConnectionInterval, maxConnectionInterval, slaveLatency, supervisionTimeout); } else { throw new java.lang.Exception((""Invalid index input:"" + index)); } return result; }",9e27dfa26516b4a95bbf6de44950d85bd7ab8b5d,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Request an LE connection parameters update."") public boolean gattClientRequestLeConnectionParameters(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""index"") java.lang.Integer index, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""minConnectionInterval"") java.lang.Integer minConnectionInterval, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""maxConnectionInterval"") java.lang.Integer maxConnectionInterval, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""slaveLatency"") java.lang.Integer slaveLatency, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""supervisionTimeout"") java.lang.Integer supervisionTimeout) throws java.lang.Exception { boolean result = false; if ((mBluetoothGattList.get(index)) != null) { result = mBluetoothGattList.get(index).requestLeConnectionUpdate(minConnectionInterval, maxConnectionInterval, slaveLatency, supervisionTimeout); } else { throw new java.lang.Exception((""Invalid index input:"" + index)); } return result; }",425f21cb8ae6f84ccb4af9a6cc086037046494b7,2018-02-03 01:36:02,5
580574,src_com_android_bluetooth_gatt_GattService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void rawLeConnectionParametersUpdate(int clientIf, java.lang.String address, int minConnectionInterval, int maxConnectionInterval, int slaveLatency, int supervisionTimeout) { com.android.bluetooth.gatt.GattService service = getService(); if (service == null) { return; } service.rawLeConnectionParametersUpdate(clientIf, address, minConnectionInterval, maxConnectionInterval, slaveLatency, supervisionTimeout); }",448c4f6ba6ab9bfc648c96b88ea561bbfae9b504,"@java.lang.Override public void leConnectionUpdate(int clientIf, java.lang.String address, int minConnectionInterval, int maxConnectionInterval, int slaveLatency, int supervisionTimeout) { com.android.bluetooth.gatt.GattService service = getService(); if (service == null) { return; } service.leConnectionUpdate(clientIf, address, minConnectionInterval, maxConnectionInterval, slaveLatency, supervisionTimeout); }",dc47f78fd6c83723d900dda96df88f7854a50699,2018-02-03 01:36:02,5
580574,src_com_android_bluetooth_gatt_GattService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void rawLeConnectionParametersUpdate(int clientIf, java.lang.String address, int minInterval, int maxInterval, int slaveLatency, int supervisionTimeout) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.gatt.GattService.DBG) { android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, (((((((((""rawLeConnectionParametersUpdate() - address="" + address) + "", intervals="") + minInterval) + ""/"") + maxInterval) + "", latency="") + slaveLatency) + "", timeout="") + supervisionTimeout)); } gattConnectionParameterUpdateNative(clientIf, address, minInterval, maxInterval, slaveLatency, supervisionTimeout); }",134a4dfcb54106cd3a08e5e85401a42c7edc4204,"void leConnectionUpdate(int clientIf, java.lang.String address, int minInterval, int maxInterval, int slaveLatency, int supervisionTimeout) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.gatt.GattService.DBG) { android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, (((((((((""leConnectionUpdate() - address="" + address) + "", intervals="") + minInterval) + ""/"") + maxInterval) + "", latency="") + slaveLatency) + "", timeout="") + supervisionTimeout)); } gattConnectionParameterUpdateNative(clientIf, address, minInterval, maxInterval, slaveLatency, supervisionTimeout); }",98165080813fc66dc362ae3129f7ae88965a414d,2018-02-03 01:36:02,5
601218,src_com_android_bluetooth_hid_HidHostService.java,"private void broadcastConnectionState(android.bluetooth.BluetoothDevice device, int newState) { java.lang.Integer prevStateInteger = mInputDevices.get(device); int prevState = (prevStateInteger == null) ? android.bluetooth.BluetoothHidHost.STATE_DISCONNECTED : prevStateInteger; if (prevState == newState) { android.util.Log.w(com.android.bluetooth.hid.HidHostService.TAG, (""no state change: "" + newState)); return; } mInputDevices.put(device, newState); log((((((""Connection state "" + device) + "": "") + prevState) + ""->"") + newState)); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHidHost.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); sendBroadcastAsUser(intent, UserHandle.ALL, com.android.bluetooth.hid.BLUETOOTH_PERM); }",75d26b943c00766508d13d966bb2a1bd0974e6ab,"private void broadcastConnectionState(android.bluetooth.BluetoothDevice device, int newState) { java.lang.Integer prevStateInteger = mInputDevices.get(device); int prevState = (prevStateInteger == null) ? android.bluetooth.BluetoothHidHost.STATE_DISCONNECTED : prevStateInteger; if (prevState == newState) { android.util.Log.w(com.android.bluetooth.hid.HidHostService.TAG, (""no state change: "" + newState)); return; } mInputDevices.put(device, newState); if (com.android.bluetooth.hid.HidHostService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidHostService.TAG, (((((""Connection state "" + device) + "": "") + prevState) + ""->"") + newState)); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHidHost.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); sendBroadcastAsUser(intent, UserHandle.ALL, com.android.bluetooth.hid.BLUETOOTH_PERM); }",0eaa56dda8b05c7397c18c0844cdadc71b410864,"private void broadcastConnectionState(android.bluetooth.BluetoothDevice device, int newState) { java.lang.Integer prevStateInteger = mInputDevices.get(device); int prevState = (prevStateInteger == null) ? android.bluetooth.BluetoothHidHost.STATE_DISCONNECTED : prevStateInteger; if (prevState == newState) { android.util.Log.w(com.android.bluetooth.hid.HidHostService.TAG, (""no state change: "" + newState)); return; } mInputDevices.put(device, newState); android.util.Log.d(com.android.bluetooth.hid.HidHostService.TAG, (((((""Connection state "" + device) + "": "") + prevState) + ""->"") + newState)); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHidHost.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); sendBroadcastAsUser(intent, UserHandle.ALL, com.android.bluetooth.hid.BLUETOOTH_PERM); }",e6479bf2c1a247dc3e245c78da689ff4bd24ccb9,2018-02-03 02:49:32,5
605914,apps_CtsVerifier_src_com_android_cts_verifier_audio_RingerModeActivity.java,private boolean supportsConditionProviders() { android.app.ActivityManager am = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); return !(am.isLowRamDevice()); },c96fe27a3584331334f08a9bfd44bec56c6236cd,private boolean supportsConditionProviders() { android.app.ActivityManager am = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); return (!(am.isLowRamDevice())) || (mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WATCH)); },6d84801fd2f4468276f89b83cd9a274368d37cfa,private boolean supportsConditionProviders() { android.app.ActivityManager am = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); return !(am.isLowRamDevice()); },c96fe27a3584331334f08a9bfd44bec56c6236cd,2018-02-05 17:44:33,2
544212,tests_telephonytests_src_com_android_internal_telephony_ims_ImsManagerTest.java,,,"@org.junit.Test public void testGetProvisionedValues() throws java.lang.Exception { com.android.ims.ImsManager imsManager = initializeProvisionedValues(); assertEquals(true, imsManager.isWfcProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED)); assertEquals(true, imsManager.isVtProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.LVC_SETTING_ENABLED)); assertEquals(true, imsManager.isVolteProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.VLT_SETTING_ENABLED)); assertEquals(true, imsManager.isWfcProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED)); assertEquals(true, imsManager.isVtProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.LVC_SETTING_ENABLED)); assertEquals(true, imsManager.isVolteProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.VLT_SETTING_ENABLED)); }",bb23206a6e1ce7f3b506fccf0cfee46652c91467,"@org.junit.Test public void testGetProvisionedValues() throws java.lang.Exception { com.android.ims.ImsManager imsManager = initializeProvisionedValues(); assertEquals(true, imsManager.isWfcProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getConfigInt(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED)); assertEquals(true, imsManager.isVtProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getConfigInt(eq(ImsConfig.ConfigConstants.LVC_SETTING_ENABLED)); assertEquals(true, imsManager.isVolteProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getConfigInt(eq(ImsConfig.ConfigConstants.VLT_SETTING_ENABLED)); assertEquals(true, imsManager.isWfcProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getConfigInt(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED)); assertEquals(true, imsManager.isVtProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getConfigInt(eq(ImsConfig.ConfigConstants.LVC_SETTING_ENABLED)); assertEquals(true, imsManager.isVolteProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getConfigInt(eq(ImsConfig.ConfigConstants.VLT_SETTING_ENABLED)); }",1cc847ffeeaa71392e0d5ecfed3a6b889451cdb4,2018-02-05 19:09:23,4
591424,telephony_java_android_telephony_ims_stub_ImsSmsImplBase.java,"public final void onSmsStatusReportReceived(int messageRef, java.lang.String format, byte[] pdu) { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.IllegalStateException(""Feature not ready.""); } try { mListener.onSmsStatusReportReceived(messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.internal.SmsImplBase.LOG_TAG, (""Can not process sms status report: "" + (e.getMessage()))); acknowledgeSmsReport(messageRef, android.telephony.ims.internal.SmsImplBase.STATUS_REPORT_STATUS_ERROR); } } }",8c143303d906b845c388dc918cbe2ac4cc144622,"public final void onSmsStatusReportReceived(int messageRef, java.lang.String format, byte[] pdu) { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.IllegalStateException(""Feature not ready.""); } try { mListener.onSmsStatusReportReceived(messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, (""Can not process sms status report: "" + (e.getMessage()))); acknowledgeSmsReport(messageRef, android.telephony.ims.stub.ImsSmsImplBase.STATUS_REPORT_STATUS_ERROR); } } }",73290a102e625a2bba2298cf2aa89b538ca9512d,"public final void onSmsStatusReportReceived(int token, int messageRef, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException(""Feature not ready.""); } try { mListener.onSmsStatusReportReceived(token, messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, (""Can not process sms status report: "" + (e.getMessage()))); acknowledgeSmsReport(token, messageRef, android.telephony.ims.stub.ImsSmsImplBase.STATUS_REPORT_STATUS_ERROR); } } }",fb3449dea5cb7631fd67e6bc9470977669ed1133,2018-02-05 19:09:23,3
591424,telephony_java_android_telephony_ims_stub_ImsSmsImplBase.java,"public void acknowledgeSms(int messageRef, @android.telephony.ims.internal.SmsImplBase.DeliverStatusResult int result) { }",dd980ee44e773d61d5fe396f249c1d71c7791725,"public void acknowledgeSms(int messageRef, @android.telephony.ims.stub.ImsSmsImplBase.DeliverStatusResult int result) { }",e729a5e640f94866eab2f9b89cd670be6738b876,"public void acknowledgeSms(int token, @android.telephony.ims.stub.ImsSmsImplBase.DeliverStatusResult int messageRef, int result) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, ""acknowledgeSms() not implemented.""); }",dda1f7b69d0f437c39c705078217e14c27aab293,2018-02-05 19:09:23,3
591424,telephony_java_android_telephony_ims_stub_ImsSmsImplBase.java,"public final void onSmsReceived(java.lang.String format, byte[] pdu) throws java.lang.IllegalStateException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.IllegalStateException(""Feature not ready.""); } try { mListener.onSmsReceived(format, pdu); acknowledgeSms((-1), android.telephony.ims.internal.SmsImplBase.DELIVER_STATUS_OK); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.internal.SmsImplBase.LOG_TAG, (""Can not deliver sms: "" + (e.getMessage()))); acknowledgeSms((-1), android.telephony.ims.internal.SmsImplBase.DELIVER_STATUS_ERROR); } } }",56ca1c1656a6a857838e90e8c31e30a6cf9389ce,"public final void onSmsReceived(java.lang.String format, byte[] pdu) throws java.lang.IllegalStateException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.IllegalStateException(""Feature not ready.""); } try { mListener.onSmsReceived(format, pdu); acknowledgeSms((-1), android.telephony.ims.stub.ImsSmsImplBase.DELIVER_STATUS_OK); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, (""Can not deliver sms: "" + (e.getMessage()))); acknowledgeSms((-1), android.telephony.ims.stub.ImsSmsImplBase.DELIVER_STATUS_ERROR); } } }",89f8d4b8277a39a8b5fb8ac8d213402eff63bd97,"public final void onSmsReceived(int token, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException(""Feature not ready.""); } try { mListener.onSmsReceived(token, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, (""Can not deliver sms: "" + (e.getMessage()))); acknowledgeSms(token, 0, android.telephony.ims.stub.ImsSmsImplBase.DELIVER_STATUS_ERROR); } } }",afd9cd34ebdc0faa71eb8226691cde784a2fc4c6,2018-02-05 19:09:23,3
544212,tests_telephonytests_src_com_android_internal_telephony_ims_ImsManagerTest.java,,,"private void setDefaultValues() { mBundle.putBoolean(CarrierConfigManager.KEY_EDITABLE_ENHANCED_4G_LTE_BOOL, com.android.internal.telephony.ims.ImsManagerTest.ENHANCED_4G_ENABLE_DEFAULT_VAL); mBundle.putBoolean(CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_ENABLED_BOOL, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ENABLE_DEFAULT_VAL); mBundle.putBoolean(CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_ROAMING_ENABLED_BOOL, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ROAMING_ENABLE_DEFAULT_VAL); mBundle.putInt(CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_MODE_INT, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_MODE_DEFAULT_VAL); mBundle.putInt(CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_ROAMING_MODE_INT, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ROAMING_MODE_DEFAULT_VAL); mBundle.putBoolean(CarrierConfigManager.KEY_CARRIER_VOLTE_PROVISIONING_REQUIRED_BOOL, true); }",6432935f30a2f2d885d533074ae3878c8bfcda50,"private void setDefaultValues() { mBundle.putBoolean(CarrierConfigManager.KEY_EDITABLE_ENHANCED_4G_LTE_BOOL, com.android.internal.telephony.ims.ImsManagerTest.ENHANCED_4G_ENABLE_DEFAULT_VAL); mBundle.putBoolean(CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_ENABLED_BOOL, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ENABLE_DEFAULT_VAL); mBundle.putBoolean(CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_ROAMING_ENABLED_BOOL, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ROAMING_ENABLE_DEFAULT_VAL); mBundle.putInt(CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_MODE_INT, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_MODE_DEFAULT_VAL); mBundle.putInt(CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_ROAMING_MODE_INT, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ROAMING_MODE_DEFAULT_VAL); mBundle.putBoolean(CarrierConfigManager.KEY_ENHANCED_4G_LTE_ON_BY_DEFAULT_BOOL, com.android.internal.telephony.ims.ImsManagerTest.ENHANCED_4G_MODE_DEFAULT_VAL); mBundle.putBoolean(CarrierConfigManager.KEY_CARRIER_VOLTE_PROVISIONING_REQUIRED_BOOL, true); }",08db64b8766865531e28acd6d0ca503170d485c7,2018-02-05 19:09:23,4
591424,telephony_java_android_telephony_ims_feature_MmTelFeature.java,"private void acknowledgeSms(int messageRef, @android.telephony.ims.internal.SmsImplBase.DeliverStatusResult int result) { getSmsImplementation().acknowledgeSms(messageRef, result); }",5c506a9c224f39bf83c4e3324215493f4508829f,"private void acknowledgeSms(int messageRef, @android.telephony.ims.stub.ImsSmsImplBase.DeliverStatusResult int result) { getSmsImplementation().acknowledgeSms(messageRef, result); }",a6dfb39441bbf3bb482272fb1a440bb3be778331,"private void acknowledgeSms(int token, int messageRef, @android.telephony.ims.stub.ImsSmsImplBase.DeliverStatusResult int result) { getSmsImplementation().acknowledgeSms(token, messageRef, result); }",db46d72fee79850b505f566b502e81f9f2b33375,2018-02-05 19:09:23,3
544212,tests_telephonytests_src_com_android_internal_telephony_ims_ImsManagerTest.java,,,"@org.junit.Test public void testSetProvisionedValues() throws java.lang.Exception { com.android.ims.ImsManager imsManager = initializeProvisionedValues(); assertEquals(true, imsManager.isWfcProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED)); imsManager.getConfigInterface().setProvisionedValue(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED, ImsConfig.FeatureValueConstants.OFF); assertEquals(0, ((int) (mProvisionedIntVals.get(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED)))); assertEquals(false, imsManager.isWfcProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).setProvisionedValue(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED), eq(0)); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED)); }",bf1cd830e0d7245eb9b0618a012e1597240df8c6,"@org.junit.Test public void testSetProvisionedValues() throws java.lang.Exception { com.android.ims.ImsManager imsManager = initializeProvisionedValues(); assertEquals(true, imsManager.isWfcProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getConfigInt(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED)); imsManager.getConfigInterface().setProvisionedValue(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED, ImsConfig.FeatureValueConstants.OFF); assertEquals(0, ((int) (mProvisionedIntVals.get(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED)))); assertEquals(false, imsManager.isWfcProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).setConfig(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED), eq(0)); verify(mImsConfigImplBaseMock, times(1)).getConfigInt(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED)); }",1310801fa7f59b08271b62f17cb53829d2ae1d28,2018-02-05 19:09:23,4
591559,testapps_ImsTestService_src_com_android_phone_testapps_imstestapp_TestImsService.java,"@java.lang.Override public void onCreate() { android.util.Log.i(com.android.phone.testapps.imstestapp.TestImsService.LOG_TAG, ""TestImsService: onCreate""); mImsRegistration = com.android.phone.testapps.imstestapp.TestImsRegistrationImpl.getInstance(); mTestMmTelFeature = com.android.phone.testapps.imstestapp.TestMmTelFeatureImpl.getInstance(); mTestRcsFeature = new com.android.phone.testapps.imstestapp.TestRcsFeatureImpl(); com.android.phone.testapps.imstestapp.TestImsService.mInstance = this; }",e4747a0b333640ec1504168fe46da99df11271b1,"@java.lang.Override public void onCreate() { android.util.Log.i(com.android.phone.testapps.imstestapp.TestImsService.LOG_TAG, ""TestImsService: onCreate""); mImsRegistration = com.android.phone.testapps.imstestapp.TestImsRegistrationImpl.getInstance(); mTestMmTelFeature = com.android.phone.testapps.imstestapp.TestMmTelFeatureImpl.getInstance(); mTestRcsFeature = new com.android.phone.testapps.imstestapp.TestRcsFeatureImpl(); mTestImsConfig = new com.android.phone.testapps.imstestapp.TestImsConfigImpl(); com.android.phone.testapps.imstestapp.TestImsService.mInstance = this; }",43da3e06a6c5020760cffe025158ad4dee5dbbdd,"@java.lang.Override public void onCreate() { android.util.Log.i(com.android.phone.testapps.imstestapp.TestImsService.LOG_TAG, ""TestImsService: onCreate""); mImsRegistration = com.android.phone.testapps.imstestapp.TestImsRegistrationImpl.getInstance(); mTestMmTelFeature = com.android.phone.testapps.imstestapp.TestMmTelFeatureImpl.getInstance(); mTestRcsFeature = new com.android.phone.testapps.imstestapp.TestRcsFeatureImpl(); mTestImsConfig = com.android.phone.testapps.imstestapp.TestImsConfigImpl.getInstance(); com.android.phone.testapps.imstestapp.TestImsService.mInstance = this; }",cb59e44dd6066d68cfc998a18359eed06c7361cc,2018-02-05 19:09:23,5
544212,tests_telephonytests_src_com_android_internal_telephony_ims_ImsManagerTest.java,,,"@org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(""SubscriptionControllerTest""); mPhoneId = mPhone.getPhoneId(); mBundle = mContextFixture.getCarrierConfigBundle(); doReturn(mSubId).when(mSubscriptionController).getSubId(mPhoneId); doReturn(mSubscriptionController).when(mBinder).queryLocalInterface(anyString()); mServiceManagerMockedServices.put(""isub"", mBinder); mImsManagerInstances.remove(mPhoneId); }",3de900e59554fef6ab5e8b9932e7e1bc298303c3,"@org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(""SubscriptionControllerTest""); mPhoneId = mPhone.getPhoneId(); mBundle = mContextFixture.getCarrierConfigBundle(); doReturn(mSubId).when(mSubscriptionController).getSubId(mPhoneId); doReturn(mSubscriptionController).when(mBinder).queryLocalInterface(anyString()); mServiceManagerMockedServices.put(""isub"", mBinder); mImsManagerInstances.remove(mPhoneId); setDefaultValues(); }",13af05f4b0f8eec1212758818da7bcf7eb648460,2018-02-05 19:09:23,4
591424,telephony_java_android_telephony_ims_feature_MmTelFeature.java,"private void acknowledgeSmsReport(int messageRef, @android.telephony.ims.internal.SmsImplBase.StatusReportResult int result) { getSmsImplementation().acknowledgeSmsReport(messageRef, result); }",dd7d5988b1ee7b4abbaf1c71b87ed7bb9e438d0a,"private void acknowledgeSmsReport(int messageRef, @android.telephony.ims.stub.ImsSmsImplBase.StatusReportResult int result) { getSmsImplementation().acknowledgeSmsReport(messageRef, result); }",37bfc20b8507a3d6503694978136133b022c1587,"private void acknowledgeSmsReport(int token, int messageRef, @android.telephony.ims.stub.ImsSmsImplBase.StatusReportResult int result) { getSmsImplementation().acknowledgeSmsReport(token, messageRef, result); }",42ce77eb0288899540035a75118c73093f7ceb01,2018-02-05 19:09:23,3
591424,telephony_java_android_telephony_ims_ImsService.java,"@java.lang.Override public com.android.ims.internal.IImsRcsFeature createRcsFeature(int slotId, com.android.ims.internal.IImsFeatureStatusCallback c) { return createRcsFeatureInternal(slotId, c); }",76b7371b4964315d2720d6aa4b3b40919a65b8ac,@java.lang.Override public android.telephony.ims.aidl.IImsConfig getConfig(int slotId) throws android.os.RemoteException { android.telephony.ims.stub.ImsConfigImplBase c = this.getConfig(slotId); return c != null ? c.getBinder() : null; },8853fad447a947c3fe326860a5bdf29af04fff93,@java.lang.Override public android.telephony.ims.aidl.IImsConfig getConfig(int slotId) throws android.os.RemoteException { android.telephony.ims.stub.ImsConfigImplBase c = this.getConfig(slotId); return c != null ? c.getIImsConfig() : null; },45e6c5640128504c23a675ec338061e39a903460,2018-02-05 19:09:23,3
591559,testapps_ImsTestService_src_com_android_phone_testapps_imstestapp_TestImsConfigImpl.java,"@java.lang.Override public int setProvisionedValue(int item, int value) throws android.os.RemoteException { return ImsConfig.OperationStatusConstants.SUCCESS; }",00472ac47f3696a87221a2101d81d0d1de7b50ab,"@java.lang.Override public int setConfig(int item, int value) { return ImsConfig.OperationStatusConstants.SUCCESS; }",794d887614bf2964f83053a326934d0341c13602,"@java.lang.Override public int setConfig(int item, int value) { replaceConfig(new com.android.phone.testapps.imstestapp.TestImsConfigImpl.ConfigItem(item, value)); return ImsConfig.OperationStatusConstants.SUCCESS; }",a0a8badd01feb1e3eb8f2bb17c8d89682e305262,2018-02-05 19:09:23,5
591559,testapps_ImsTestService_src_com_android_phone_testapps_imstestapp_TestImsConfigImpl.java,"@java.lang.Override public int setProvisionedStringValue(int item, java.lang.String value) throws android.os.RemoteException { return ImsConfig.OperationStatusConstants.SUCCESS; }",156e946e203a94aecaac96cecb50621a951b9106,"@java.lang.Override public int setConfig(int item, java.lang.String value) { return ImsConfig.OperationStatusConstants.SUCCESS; }",774e6ad973abd2a6ce8518849eba83db3260d951,"@java.lang.Override public int setConfig(int item, java.lang.String value) { replaceConfig(new com.android.phone.testapps.imstestapp.TestImsConfigImpl.ConfigItem(item, value)); return ImsConfig.OperationStatusConstants.SUCCESS; }",2cb7086477a6a076297693cbadad49b0aa5c8988,2018-02-05 19:09:23,5
591559,testapps_ImsTestService_src_com_android_phone_testapps_imstestapp_TestImsConfigImpl.java,"@java.lang.Override public void getFeatureValue(int feature, int network, com.android.ims.ImsConfigListener listener) throws android.os.RemoteException { listener.onGetFeatureResponse(feature, network, ImsConfig.FeatureValueConstants.ON, ImsConfig.OperationStatusConstants.SUCCESS); }",973676b03460969a4ee14db4a6b8b3861c1a4684,@java.lang.Override public int getConfigInt(int item) { return ImsConfig.FeatureValueConstants.ON; },096a21d8ebd7fbd5cd60f11d9aeaa28d041d191c,"@java.lang.Override public int getConfigInt(int item) { replaceConfig(new com.android.phone.testapps.imstestapp.TestImsConfigImpl.ConfigItem(item, ImsConfig.FeatureValueConstants.ON)); return ImsConfig.FeatureValueConstants.ON; }",b98a53bd569e60d9d053db6ba65ed8fc5ff0974a,2018-02-05 19:09:23,5
544212,tests_telephonytests_src_com_android_internal_telephony_ims_ImsManagerTest.java,,,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testGetDefaultValues() { doReturn(""-1"").when(mSubscriptionController).getSubscriptionProperty(anyInt(), anyString(), anyString()); setDefaultValues(); com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, mPhoneId); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ENABLE_DEFAULT_VAL, imsManager.isWfcEnabledByUser()); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.WFC_IMS_ENABLED), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.ENHANCED_4G_ENABLE_DEFAULT_VAL, imsManager.isEnhanced4gLteModeSettingEnabledByUser()); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.ENHANCED_4G_MODE_ENABLED), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_MODE_DEFAULT_VAL, imsManager.getWfcMode(false)); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.WFC_IMS_MODE), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ROAMING_MODE_DEFAULT_VAL, imsManager.getWfcMode(true)); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.WFC_IMS_ROAMING_MODE), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.VT_IMS_ENABLE_DEFAULT_VAL, imsManager.isVtEnabledByUser()); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.VT_IMS_ENABLED), anyString()); }",5af52e1ca42263db7c2c1ef504ba6a4229909006,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testGetDefaultValues() { doReturn(""-1"").when(mSubscriptionController).getSubscriptionProperty(anyInt(), anyString(), anyString()); com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, mPhoneId); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ENABLE_DEFAULT_VAL, imsManager.isWfcEnabledByUser()); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.WFC_IMS_ENABLED), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.ENHANCED_4G_ENABLE_DEFAULT_VAL, imsManager.isEnhanced4gLteModeSettingEnabledByUser()); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.ENHANCED_4G_MODE_ENABLED), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_MODE_DEFAULT_VAL, imsManager.getWfcMode(false)); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.WFC_IMS_MODE), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ROAMING_MODE_DEFAULT_VAL, imsManager.getWfcMode(true)); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.WFC_IMS_ROAMING_MODE), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.VT_IMS_ENABLE_DEFAULT_VAL, imsManager.isVtEnabledByUser()); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.VT_IMS_ENABLED), anyString()); }",e62966de11ccff0e44ae22336eacd6f8e5133418,2018-02-05 19:09:23,4
544212,tests_telephonytests_src_com_android_internal_telephony_ims_ImsManagerTest.java,,,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetValues() { com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, mPhoneId); imsManager.setWfcMode(ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_MODE), eq(""1"")); imsManager.setWfcMode(ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED, true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_ROAMING_MODE), eq(""1"")); imsManager.setVtSetting(false); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.VT_IMS_ENABLED), eq(""0"")); imsManager.setEnhanced4gLteModeSetting(true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.ENHANCED_4G_MODE_ENABLED), eq(""1"")); imsManager.setWfcSetting(true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_ENABLED), eq(""1"")); }",dc0b8058d9c479494b574b7202b44f1050d8ca5c,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetValues() { com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, mPhoneId); imsManager.setWfcMode(ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_MODE), eq(""1"")); imsManager.setWfcMode(ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED, true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_ROAMING_MODE), eq(""1"")); imsManager.setVtSetting(false); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.VT_IMS_ENABLED), eq(""0"")); mBundle.putBoolean(CarrierConfigManager.KEY_EDITABLE_ENHANCED_4G_LTE_BOOL, com.android.internal.telephony.ims.ImsManagerTest.ENHANCED_4G_MODE_EDITABLE); imsManager.setEnhanced4gLteModeSetting(true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.ENHANCED_4G_MODE_ENABLED), eq(""1"")); imsManager.setWfcSetting(true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_ENABLED), eq(""1"")); }",d9855229c66837c732d1c58f5e1aa743dc9caa47,2018-02-05 19:09:23,4
591424,telephony_java_android_telephony_ims_stub_ImsSmsImplBase.java,"public void sendSms(int messageRef, java.lang.String format, java.lang.String smsc, boolean isRetry, byte[] pdu) { try { onSendSmsResult(messageRef, android.telephony.ims.internal.SmsImplBase.SEND_STATUS_ERROR, SmsManager.RESULT_ERROR_GENERIC_FAILURE); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.internal.SmsImplBase.LOG_TAG, (""Can not send sms: "" + (e.getMessage()))); } }",b0a613656ca4c65087d7e0fa79e615536d9a12db,"public void sendSms(int messageRef, java.lang.String format, java.lang.String smsc, boolean isRetry, byte[] pdu) { try { onSendSmsResult(messageRef, android.telephony.ims.stub.ImsSmsImplBase.SEND_STATUS_ERROR, SmsManager.RESULT_ERROR_GENERIC_FAILURE); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, (""Can not send sms: "" + (e.getMessage()))); } }",aec0edc1bdd2c1625c6be19ddb498cd5a3b36253,"public void sendSms(int token, int messageRef, java.lang.String format, java.lang.String smsc, boolean isRetry, byte[] pdu) { try { onSendSmsResult(token, messageRef, android.telephony.ims.stub.ImsSmsImplBase.SEND_STATUS_ERROR, SmsManager.RESULT_ERROR_GENERIC_FAILURE); } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, (""Can not send sms: "" + (e.getMessage()))); } }",7fb2bd3a6275222e0dd20f290c238682c2013b9b,2018-02-05 19:09:23,3
591424,telephony_java_android_telephony_ims_stub_ImsSmsImplBase.java,"public void acknowledgeSmsReport(int messageRef, @android.telephony.ims.internal.SmsImplBase.StatusReportResult int result) { }",f942b3237218da1b38c57c11bfba54a86458bcf7,"public void acknowledgeSmsReport(int messageRef, @android.telephony.ims.stub.ImsSmsImplBase.StatusReportResult int result) { }",8e182bf3081d20ac7062f6f69cd1c50117997a00,"public void acknowledgeSmsReport(int token, int messageRef, @android.telephony.ims.stub.ImsSmsImplBase.StatusReportResult int result) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, ""acknowledgeSmsReport() not implemented.""); }",62f4d378b57ecf83fec5907539ecda766f1d08d9,2018-02-05 19:09:23,3
591424,telephony_java_android_telephony_ims_stub_ImsSmsImplBase.java,"public final void onSendSmsResult(int messageRef, @android.telephony.ims.internal.SmsImplBase.SendStatusResult int status, int reason) throws android.os.RemoteException, java.lang.IllegalStateException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.IllegalStateException(""Feature not ready.""); } mListener.onSendSmsResult(messageRef, status, reason); } }",7cbbe503b3b51a02b9613ff6ab506fa7093f4449,"public final void onSendSmsResult(int messageRef, @android.telephony.ims.stub.ImsSmsImplBase.SendStatusResult int status, int reason) throws android.os.RemoteException, java.lang.IllegalStateException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.IllegalStateException(""Feature not ready.""); } mListener.onSendSmsResult(messageRef, status, reason); } }",b004394bba11bb4d943edfb44a208c75d5b581d9,"public final void onSendSmsResult(int token, int messageRef, @android.telephony.ims.stub.ImsSmsImplBase.SendStatusResult int status, int reason) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException(""Feature not ready.""); } try { mListener.onSendSmsResult(token, messageRef, status, reason); } catch (android.os.RemoteException e) { e.rethrowFromSystemServer(); } } }",d7c94f52ab0c12d410174959439a1af3ee8e4224,2018-02-05 19:09:23,3
591426,src_java_com_android_internal_telephony_Phone.java,"public void startMonitoringImsService() { if ((getPhoneType()) == (PhoneConstants.PHONE_TYPE_SIP)) { return; } synchronized(com.android.internal.telephony.Phone.lockForRadioTechnologyChange) { android.content.IntentFilter filter = new android.content.IntentFilter(); com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, getPhoneId()); if ((imsManager != null) && (!(imsManager.isDynamicBinding()))) { filter.addAction(ImsManager.ACTION_IMS_SERVICE_UP); filter.addAction(ImsManager.ACTION_IMS_SERVICE_DOWN); } filter.addAction(ImsConfig.ACTION_IMS_CONFIG_CHANGED); mContext.registerReceiver(mImsIntentReceiver, filter); if (imsManager != null) { if ((imsManager.isDynamicBinding()) || (imsManager.isServiceAvailable())) { mImsServiceReady = true; updateImsPhone(); } } } }",55fb28039361aaaad78e0e0c3bbed6877107844f,"public void startMonitoringImsService() { if ((getPhoneType()) == (PhoneConstants.PHONE_TYPE_SIP)) { return; } synchronized(com.android.internal.telephony.Phone.lockForRadioTechnologyChange) { android.content.IntentFilter filter = new android.content.IntentFilter(); com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, getPhoneId()); if ((imsManager != null) && (!(imsManager.isDynamicBinding()))) { filter.addAction(ImsManager.ACTION_IMS_SERVICE_UP); filter.addAction(ImsManager.ACTION_IMS_SERVICE_DOWN); } mContext.registerReceiver(mImsIntentReceiver, filter); if (imsManager != null) { if ((imsManager.isDynamicBinding()) || (imsManager.isServiceAvailable())) { mImsServiceReady = true; updateImsPhone(); } } } }",0b60c8de4b6b87f06b35e310c407c754138fd453,"public void startMonitoringImsService() { if ((getPhoneType()) == (PhoneConstants.PHONE_TYPE_SIP)) { return; } synchronized(com.android.internal.telephony.Phone.lockForRadioTechnologyChange) { android.content.IntentFilter filter = new android.content.IntentFilter(); com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, getPhoneId()); if ((imsManager != null) && (!(imsManager.isDynamicBinding()))) { filter.addAction(ImsManager.ACTION_IMS_SERVICE_UP); filter.addAction(ImsManager.ACTION_IMS_SERVICE_DOWN); } filter.addAction(ImsConfig.ACTION_IMS_CONFIG_CHANGED); mContext.registerReceiver(mImsIntentReceiver, filter); if (imsManager != null) { if ((imsManager.isDynamicBinding()) || (imsManager.isServiceAvailable())) { mImsServiceReady = true; updateImsPhone(); } } } }",55fb28039361aaaad78e0e0c3bbed6877107844f,2018-02-05 19:09:23,3
597795,src_java_com_android_internal_telephony_ims_ImsServiceController.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,protected java.lang.String getServiceInterface() { return com.android.internal.telephony.ims.ImsServiceController.SERVICE_INTERFACE; },a4005591f4017143e64e759b5393c94778d8e934,protected java.lang.String getServiceInterface() { return android.telephony.ims.ImsService.SERVICE_INTERFACE; },448cd81210f6e432c91df7cf655ac4a5c84687b3,2018-02-05 19:09:23,3
597795,src_java_com_android_internal_telephony_ims_ImsServiceControllerCompat.java,,,@java.lang.Override protected java.lang.String getServiceInterface() { return com.android.internal.telephony.ims.ImsServiceControllerCompat.SERVICE_INTERFACE; },b9ddb845690c81c977d5d84eade23a767767237e,@java.lang.Override protected java.lang.String getServiceInterface() { return android.telephony.ims.compat.ImsService.SERVICE_INTERFACE; },025aaed064bbd6c5aeec7a1312b80f6b3de2b594,2018-02-05 19:09:23,3
597795,tests_telephonytests_src_com_android_internal_telephony_ims_ImsResolverTest.java,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testDontBindWhenNullCarrierPackage() throws android.os.RemoteException { setupResolver(1); java.util.List<android.content.pm.ResolveInfo> info = new java.util.ArrayList<>(); java.util.Set<java.lang.String> features = new java.util.HashSet<>(); features.add(ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); info.add(getResolveInfo(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, true)); when(mMockPM.queryIntentServicesAsUser(any(), anyInt(), anyInt())).thenReturn(info); com.android.internal.telephony.ims.ImsServiceController controller = mock(com.android.internal.telephony.ims.ImsServiceController.class); mTestImsResolver.setImsServiceControllerFactory(( context, componentName) -> { when(controller.getComponentName()).thenReturn(componentName); return controller; }); setConfigCarrierString(0, null); mTestImsResolver.populateCacheAndStartBind(); waitForHandlerAction(mTestImsResolver.getHandler(), com.android.internal.telephony.ims.ImsResolverTest.TEST_TIMEOUT); verify(controller, never()).bind(any()); verify(controller, never()).unbind(); }",dc10c9e0bb2236d94552324b5eaab4b055435f66,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testDontBindWhenNullCarrierPackage() throws android.os.RemoteException { setupResolver(1); java.util.List<android.content.pm.ResolveInfo> info = new java.util.ArrayList<>(); java.util.Set<java.lang.String> features = new java.util.HashSet<>(); features.add(ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); info.add(getResolveInfo(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, true)); when(mMockPM.queryIntentServicesAsUser(any(), anyInt(), anyInt())).thenReturn(info); com.android.internal.telephony.ims.ImsServiceController controller = mock(com.android.internal.telephony.ims.ImsServiceController.class); mTestImsResolver.setImsServiceControllerFactory(new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override public java.lang.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName componentName, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks) { when(controller.getComponentName()).thenReturn(componentName); return controller; } }); setConfigCarrierString(0, null); mTestImsResolver.populateCacheAndStartBind(); waitForHandlerAction(mTestImsResolver.getHandler(), com.android.internal.telephony.ims.ImsResolverTest.TEST_TIMEOUT); verify(controller, never()).bind(any()); verify(controller, never()).unbind(); }",49cc5ab342c8fdc4c5d8838be9a512b64d9d1789,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testDontBindWhenNullCarrierPackage() throws android.os.RemoteException { setupResolver(1); java.util.List<android.content.pm.ResolveInfo> info = new java.util.ArrayList<>(); java.util.Set<java.lang.String> features = new java.util.HashSet<>(); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); info.add(getResolveInfo(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, true)); when(mMockPM.queryIntentServicesAsUser(any(), anyInt(), anyInt())).thenReturn(info); com.android.internal.telephony.ims.ImsServiceController controller = mock(com.android.internal.telephony.ims.ImsServiceController.class); mTestImsResolver.setImsServiceControllerFactory(new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override public java.lang.String getServiceInterface() { return android.telephony.ims.ImsService.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName componentName, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks) { when(controller.getComponentName()).thenReturn(componentName); return controller; } }); setConfigCarrierString(0, null); mTestImsResolver.populateCacheAndStartBind(); waitForHandlerAction(mTestImsResolver.getHandler(), com.android.internal.telephony.ims.ImsResolverTest.TEST_TIMEOUT); verify(controller, never()).bind(any()); verify(controller, never()).unbind(); }",57c2874ac198487a638fe5f7e3d8464699c73b5c,2018-02-05 19:09:23,3
591424,telephony_java_android_telephony_ims_stub_ImsConfigImplBase.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public final android.telephony.ims.aidl.IImsConfig getBinder() { return mBinder; },f184e33816511e7bc14b4c0c473c297a3804d509,public android.telephony.ims.aidl.IImsConfig getIImsConfig() { return mImsConfigStub; },49acb3de453297555dd07c7fdd045455a9ea2f04,2018-02-05 19:09:23,3
591424,telephony_java_android_telephony_ims_stub_ImsConfigImplBase.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void removeImsConfigCallback(android.telephony.ims.aidl.IImsConfigCallback c) throws android.os.RemoteException { this.removeImsConfigCallback(c); },14618c0a331d6bbaa9c39f54cd7baa629f6caced,@java.lang.Override public void removeImsConfigCallback(android.telephony.ims.aidl.IImsConfigCallback c) throws android.os.RemoteException { getImsConfigImpl().removeImsConfigCallback(c); },244a88c98ca3627e2cbd3f67f9f256ba1241ec54,2018-02-05 19:09:23,3
591426,src_java_com_android_internal_telephony_imsphone_ImsPhoneCallTracker.java,private void stopListeningForCalls() { try { resetImsCapabilities(); if (((mImsManager) != null) && ((mServiceId) > 0)) { mImsManager.close(mServiceId); mServiceId = -1; } } catch (com.android.ims.ImsException e) { } },e629e803f3ffad281d1d9e661eddb4e6a687980a,private void stopListeningForCalls() { try { resetImsCapabilities(); if ((mImsManager) != null) { mImsManager.getConfigInterface().removeConfigCallback(mConfigCallback); mImsManager.close(); } } catch (com.android.ims.ImsException e) { } },3cba451f9948e49943266ee9ec3fa98fd7ef5820,"private void stopListeningForCalls() { resetImsCapabilities(); if ((mImsManager) != null) { try { mImsManager.getConfigInterface().removeConfigCallback(mConfigCallback); } catch (com.android.ims.ImsException e) { android.util.Log.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ""stopListeningForCalls: unable to remove config callback.""); } mImsManager.close(); } }",edc4fce4c6d58a52dd150ada7a4c966be88f4829,2018-02-05 19:09:23,3
597795,tests_telephonytests_src_com_android_internal_telephony_ims_ImsResolverTest.java,"private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController1, com.android.internal.telephony.ims.ImsServiceController carrierController2) { mTestImsResolver.setImsServiceControllerFactory(( context, componentName) -> { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(deviceController.getComponentName()).thenReturn(componentName); return deviceController; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController1.getComponentName()).thenReturn(componentName); return carrierController1; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_2_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController2.getComponentName()).thenReturn(componentName); return carrierController2; } return null; }); }",7a21486821bdf9ab98c274858683a6530319ae39,"private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController1, com.android.internal.telephony.ims.ImsServiceController carrierController2) { mTestImsResolver.setImsServiceControllerFactory(new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override public java.lang.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName componentName, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks) { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(deviceController.getComponentName()).thenReturn(componentName); return deviceController; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController1.getComponentName()).thenReturn(componentName); return carrierController1; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_2_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController2.getComponentName()).thenReturn(componentName); return carrierController2; } return null; } }); }",affca37be18ca1047759628cab96ffbbce039812,"private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController1, com.android.internal.telephony.ims.ImsServiceController carrierController2) { mTestImsResolver.setImsServiceControllerFactory(new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override public java.lang.String getServiceInterface() { return android.telephony.ims.ImsService.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName componentName, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks) { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(deviceController.getComponentName()).thenReturn(componentName); return deviceController; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController1.getComponentName()).thenReturn(componentName); return carrierController1; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_2_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController2.getComponentName()).thenReturn(componentName); return carrierController2; } return null; } }); }",3ccf6366943363eedacaec318fbb096f7f2e3134,2018-02-05 19:09:23,3
597795,tests_telephonytests_src_com_android_internal_telephony_ims_ImsResolverTest.java,"private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController) { mTestImsResolver.setImsServiceControllerFactory(( context, componentName) -> { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(deviceController.getComponentName()).thenReturn(componentName); return deviceController; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController.getComponentName()).thenReturn(componentName); return carrierController; } return null; }); }",a92f465263fa6d04b0d7e9f92a39477177cf706f,"private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController) { mTestImsResolver.setImsServiceControllerFactory(new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override public java.lang.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName componentName, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks) { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(deviceController.getComponentName()).thenReturn(componentName); return deviceController; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController.getComponentName()).thenReturn(componentName); return carrierController; } return null; } }); }",8583984445be743b2878807b88f77816660ea9bd,"private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController) { mTestImsResolver.setImsServiceControllerFactory(new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override public java.lang.String getServiceInterface() { return android.telephony.ims.ImsService.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName componentName, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks) { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(deviceController.getComponentName()).thenReturn(componentName); return deviceController; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController.getComponentName()).thenReturn(componentName); return carrierController; } return null; } }); }",775f411d175514bc39d2fa89af8ba8703ee6e7d7,2018-02-05 19:09:23,3
597795,src_java_com_android_internal_telephony_ims_ImsResolver.java,@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) return true; if ((o == null) || ((getClass()) != (o.getClass()))) return false; com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo that = ((com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo) (o)); if ((name) != null ? !(name.equals(that.name)) : (that.name) != null) return false; return (supportedFeatures) != null ? supportedFeatures.equals(that.supportedFeatures) : (that.supportedFeatures) == null; },5a88f7cb923ba4a9fd33c55c5dd9e981d23e6e6e,@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) return true; if ((o == null) || ((getClass()) != (o.getClass()))) return false; com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo that = ((com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo) (o)); if ((name) != null ? !(name.equals(that.name)) : (that.name) != null) return false; if ((supportedFeatures) != null ? !(supportedFeatures.equals(that.supportedFeatures)) : (that.supportedFeatures) != null) return false; return (controllerFactory) != null ? controllerFactory.equals(that.controllerFactory) : (that.controllerFactory) == null; },25f982d4e1c705d886f5a5629e6ad89c80cc9d4f,@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) return true; if ((o == null) || ((getClass()) != (o.getClass()))) return false; com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo that = ((com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo) (o)); if ((name) != null ? !(name.equals(that.name)) : (that.name) != null) return false; if ((supportedFeatures) != null ? !(supportedFeatures.equals(that.supportedFeatures)) : (that.supportedFeatures) != null) { return false; } return (controllerFactory) != null ? controllerFactory.equals(that.controllerFactory) : (that.controllerFactory) == null; },cd0d5c3c9d52ae3519064e2e55b5e6e39f570f49,2018-02-05 19:09:23,3
591426,src_java_com_android_internal_telephony_Phone.java,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.telephony.Rlog.d(com.android.internal.telephony.Phone.LOG_TAG, (""mImsIntentReceiver: action "" + (intent.getAction()))); if (intent.hasExtra(ImsManager.EXTRA_PHONE_ID)) { int extraPhoneId = intent.getIntExtra(ImsManager.EXTRA_PHONE_ID, SubscriptionManager.INVALID_PHONE_INDEX); android.telephony.Rlog.d(com.android.internal.telephony.Phone.LOG_TAG, (""mImsIntentReceiver: extraPhoneId = "" + extraPhoneId)); if ((extraPhoneId == (android.telephony.SubscriptionManager.INVALID_PHONE_INDEX)) || (extraPhoneId != (getPhoneId()))) { return; } } synchronized(com.android.internal.telephony.Phone.lockForRadioTechnologyChange) { if (intent.getAction().equals(ImsManager.ACTION_IMS_SERVICE_UP)) { mImsServiceReady = true; updateImsPhone(); com.android.ims.ImsManager.getInstance(mContext, mPhoneId).updateImsServiceConfig(false); } else if (intent.getAction().equals(ImsManager.ACTION_IMS_SERVICE_DOWN)) { mImsServiceReady = false; updateImsPhone(); } else if (intent.getAction().equals(ImsConfig.ACTION_IMS_CONFIG_CHANGED)) { int item = intent.getIntExtra(ImsConfig.EXTRA_CHANGED_ITEM, (-1)); java.lang.String value = intent.getStringExtra(ImsConfig.EXTRA_NEW_VALUE); com.android.ims.ImsManager.onProvisionedValueChanged(context, item, value); } } }",acfd5a96802cad5682e1b2711f71a62f5344d35d,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.telephony.Rlog.d(com.android.internal.telephony.Phone.LOG_TAG, (""mImsIntentReceiver: action "" + (intent.getAction()))); if (intent.hasExtra(ImsManager.EXTRA_PHONE_ID)) { int extraPhoneId = intent.getIntExtra(ImsManager.EXTRA_PHONE_ID, SubscriptionManager.INVALID_PHONE_INDEX); android.telephony.Rlog.d(com.android.internal.telephony.Phone.LOG_TAG, (""mImsIntentReceiver: extraPhoneId = "" + extraPhoneId)); if ((extraPhoneId == (android.telephony.SubscriptionManager.INVALID_PHONE_INDEX)) || (extraPhoneId != (getPhoneId()))) { return; } } synchronized(com.android.internal.telephony.Phone.lockForRadioTechnologyChange) { if (intent.getAction().equals(ImsManager.ACTION_IMS_SERVICE_UP)) { mImsServiceReady = true; updateImsPhone(); com.android.ims.ImsManager.getInstance(mContext, mPhoneId).updateImsServiceConfig(false); } else if (intent.getAction().equals(ImsManager.ACTION_IMS_SERVICE_DOWN)) { mImsServiceReady = false; updateImsPhone(); } } }",e13330899c2326b1e08c9ef7d277e7eb1464739b,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.telephony.Rlog.d(com.android.internal.telephony.Phone.LOG_TAG, (""mImsIntentReceiver: action "" + (intent.getAction()))); if (intent.hasExtra(ImsManager.EXTRA_PHONE_ID)) { int extraPhoneId = intent.getIntExtra(ImsManager.EXTRA_PHONE_ID, SubscriptionManager.INVALID_PHONE_INDEX); android.telephony.Rlog.d(com.android.internal.telephony.Phone.LOG_TAG, (""mImsIntentReceiver: extraPhoneId = "" + extraPhoneId)); if ((extraPhoneId == (android.telephony.SubscriptionManager.INVALID_PHONE_INDEX)) || (extraPhoneId != (getPhoneId()))) { return; } } synchronized(com.android.internal.telephony.Phone.lockForRadioTechnologyChange) { if (intent.getAction().equals(ImsManager.ACTION_IMS_SERVICE_UP)) { mImsServiceReady = true; updateImsPhone(); com.android.ims.ImsManager.getInstance(mContext, mPhoneId).updateImsServiceConfig(false); } else if (intent.getAction().equals(ImsManager.ACTION_IMS_SERVICE_DOWN)) { mImsServiceReady = false; updateImsPhone(); } else if (intent.getAction().equals(ImsConfig.ACTION_IMS_CONFIG_CHANGED)) { int item = intent.getIntExtra(ImsConfig.EXTRA_CHANGED_ITEM, (-1)); java.lang.String value = intent.getStringExtra(ImsConfig.EXTRA_NEW_VALUE); com.android.ims.ImsManager.onProvisionedValueChanged(context, item, value); } } }",acfd5a96802cad5682e1b2711f71a62f5344d35d,2018-02-05 19:09:23,3
591426,src_java_com_android_internal_telephony_imsphone_ImsPhoneCallTracker.java,"private void startListeningForCalls() throws com.android.ims.ImsException { mImsServiceRetryCount = 0; mServiceId = mImsManager.open(ImsServiceClass.MMTEL, createIncomingCallPendingIntent(), mImsConnectionStateListener); mImsManager.setImsConfigListener(mImsConfigListener); getEcbmInterface().setEcbmStateListener(mPhone.getImsEcbmStateListener()); if (mPhone.isInEcm()) { mPhone.exitEmergencyCallbackMode(); } int mPreferredTtyMode = Settings.Secure.getInt(mPhone.getContext().getContentResolver(), Settings.Secure.PREFERRED_TTY_MODE, Phone.TTY_MODE_OFF); mImsManager.setUiTTYMode(mPhone.getContext(), mPreferredTtyMode, null); com.android.ims.ImsMultiEndpoint multiEndpoint = getMultiEndpointInterface(); if (multiEndpoint != null) { multiEndpoint.setExternalCallStateListener(mPhone.getExternalCallTracker().getExternalCallStateListener()); } mUtInterface = getUtInterface(); if ((mUtInterface) != null) { mUtInterface.registerForSuppServiceIndication(this, com.android.internal.telephony.imsphone.ImsPhoneCallTracker.EVENT_SUPP_SERVICE_INDICATION, null); } if (mCarrierConfigLoaded) { mImsManager.updateImsServiceConfig(true); } }",a1a50624a3934ef01a1f324701640b73453dae4d,"private void startListeningForCalls() throws com.android.ims.ImsException { mImsServiceRetryCount = 0; mImsManager.open(mMmTelFeatureListener); mImsManager.addRegistrationCallback(mImsRegistrationCallback); mImsManager.addCapabilitiesCallback(mImsCapabilityCallback); mImsManager.setCapabilitiesCallback(mImsConfigListener); mImsManager.getConfigInterface().addConfigCallback(mConfigCallback); getEcbmInterface().setEcbmStateListener(mPhone.getImsEcbmStateListener()); if (mPhone.isInEcm()) { mPhone.exitEmergencyCallbackMode(); } int mPreferredTtyMode = Settings.Secure.getInt(mPhone.getContext().getContentResolver(), Settings.Secure.PREFERRED_TTY_MODE, Phone.TTY_MODE_OFF); mImsManager.setUiTTYMode(mPhone.getContext(), mPreferredTtyMode, null); com.android.ims.ImsMultiEndpoint multiEndpoint = getMultiEndpointInterface(); if (multiEndpoint != null) { multiEndpoint.setExternalCallStateListener(mPhone.getExternalCallTracker().getExternalCallStateListener()); } mUtInterface = getUtInterface(); if ((mUtInterface) != null) { mUtInterface.registerForSuppServiceIndication(this, com.android.internal.telephony.imsphone.ImsPhoneCallTracker.EVENT_SUPP_SERVICE_INDICATION, null); } if (mCarrierConfigLoaded) { mImsManager.updateImsServiceConfig(true); } }",420015ad8200c09ce0fcd430f7c963d59d67cfda,"private void startListeningForCalls() throws com.android.ims.ImsException { mImsServiceRetryCount = 0; mImsManager.open(mMmTelFeatureListener); mImsManager.addRegistrationCallback(mImsRegistrationCallback); mImsManager.addCapabilitiesCallback(mImsCapabilityCallback); mImsManager.setConfigListener(mImsConfigListener); mImsManager.getConfigInterface().addConfigCallback(mConfigCallback); getEcbmInterface().setEcbmStateListener(mPhone.getImsEcbmStateListener()); if (mPhone.isInEcm()) { mPhone.exitEmergencyCallbackMode(); } int mPreferredTtyMode = Settings.Secure.getInt(mPhone.getContext().getContentResolver(), Settings.Secure.PREFERRED_TTY_MODE, Phone.TTY_MODE_OFF); mImsManager.setUiTTYMode(mPhone.getContext(), mPreferredTtyMode, null); com.android.ims.ImsMultiEndpoint multiEndpoint = getMultiEndpointInterface(); if (multiEndpoint != null) { multiEndpoint.setExternalCallStateListener(mPhone.getExternalCallTracker().getExternalCallStateListener()); } mUtInterface = getUtInterface(); if ((mUtInterface) != null) { mUtInterface.registerForSuppServiceIndication(this, com.android.internal.telephony.imsphone.ImsPhoneCallTracker.EVENT_SUPP_SERVICE_INDICATION, null); } if (mCarrierConfigLoaded) { mImsManager.updateImsServiceConfig(true); } }",a879b2815500b4148bd4ec3bf0e4b6a5cf10ba14,2018-02-05 19:09:23,3
591426,tests_telephonytests_src_android_telephony_ims_TestImsService.java,@java.lang.Override public android.telephony.ims.feature.MMTelFeature onCreateEmergencyMMTelImsFeature(int slotId) { return null; },fbf4a520c8148f180e516c9a11d0253d195cc0b3,@java.lang.Override public android.telephony.ims.feature.MmTelFeature onCreateEmergencyMMTelImsFeature(int slotId) { return null; },3024a18fdbee9249a4de93b6d503cf10619c21bc,@java.lang.Override public android.telephony.ims.feature.MmTelFeature createMmTelFeature(int slotId) { return mSpyMmTelFeature; },e220b8411683ef292fcc84d3e275fef8d43c033d,2018-02-05 19:09:23,3
597795,src_java_com_android_internal_telephony_ims_ImsResolver.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public java.lang.String getServiceInterface() { return ImsServiceControllerCompat.SERVICE_INTERFACE; },71f38f505089b656d1e5b80280eeb3eca9d86ff9,@java.lang.Override public java.lang.String getServiceInterface() { return android.telephony.ims.ImsService.SERVICE_INTERFACE; },b73cca7e5e471da76b9b69e20716dca364ddafc1,2018-02-05 19:09:23,3
597795,src_java_com_android_internal_telephony_ims_ImsResolver.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public java.lang.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; },bb84c31c869801f547126d443b33aafdef2d30d3,@java.lang.Override public java.lang.String getServiceInterface() { return android.telephony.ims.ImsService.SERVICE_INTERFACE; },b73cca7e5e471da76b9b69e20716dca364ddafc1,2018-02-05 19:09:23,3
591424,telephony_java_android_telephony_ims_stub_ImsConfigImplBase.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void addImsConfigCallback(android.telephony.ims.aidl.IImsConfigCallback c) throws android.os.RemoteException { this.addImsConfigCallback(c); },954730926330faaedd25b1ffc1b0922c41fffa0f,@java.lang.Override public void addImsConfigCallback(android.telephony.ims.aidl.IImsConfigCallback c) throws android.os.RemoteException { getImsConfigImpl().addImsConfigCallback(c); },75ba679dd6134d88de66786aea9eeb55ed0c7f89,2018-02-05 19:09:23,3
591424,telephony_java_android_telephony_ims_stub_ImsConfigImplBase.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public int setConfigInt(int item, int value) throws android.os.RemoteException { return java.lang.Integer.MIN_VALUE; }",4d88b24e5f991483eade7a0d7896617e12056302,"@java.lang.Override public synchronized int setConfigInt(int item, int value) throws android.os.RemoteException { mProvisionedIntValue.remove(item); int retVal = getImsConfigImpl().setConfig(item, value); if (retVal == (ImsConfig.OperationStatusConstants.SUCCESS)) { updateCachedValue(item, retVal, true); } else { android.util.Log.d(android.telephony.ims.stub.ImsConfigImplBase.TAG, (((((""Set provision value of "" + item) + "" to "") + value) + "" failed with error code "") + retVal)); } return retVal; }",656a46e2786618ed5ae3b3fef13c0c5394749ae5,2018-02-05 19:09:23,3
591424,telephony_java_android_telephony_ims_stub_ImsConfigImplBase.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public int setConfigString(int item, java.lang.String value) throws android.os.RemoteException { return java.lang.Integer.MIN_VALUE; }",04d9af9f36652863062407c9d0fe6efc1c6a7dda,"@java.lang.Override public synchronized int setConfigString(int item, java.lang.String value) throws android.os.RemoteException { mProvisionedStringValue.remove(item); int retVal = getImsConfigImpl().setConfig(item, value); if (retVal == (ImsConfig.OperationStatusConstants.SUCCESS)) { updateCachedValue(item, retVal, true); } return retVal; }",77d38262328eb3d2cc20a1762d6b4593dae38912,2018-02-05 19:09:23,3
591424,telephony_java_android_telephony_ims_stub_ImsConfigImplBase.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public int getConfigInt(int item) throws android.os.RemoteException { return java.lang.Integer.MIN_VALUE; },1d473e7e55dd369ad52ff101773536ae154431b8,"@java.lang.Override public synchronized int getConfigInt(int item) throws android.os.RemoteException { if (mProvisionedIntValue.containsKey(item)) { return mProvisionedIntValue.get(item); } else { int retVal = getImsConfigImpl().getConfigInt(item); if (retVal != (ImsConfig.OperationStatusConstants.UNKNOWN)) { updateCachedValue(item, retVal, false); } return retVal; } }",08f5c2a863ce9e6dfac6f864102fd1f4cca8a87e,2018-02-05 19:09:23,3
591424,telephony_java_android_telephony_ims_stub_ImsConfigImplBase.java,@java.lang.Override public boolean getVolteProvisioned() throws android.os.RemoteException { return false; },7f2ab947ffffb01a405736dad11bde9bf755fb50,@java.lang.Override public java.lang.String getConfigString(int item) throws android.os.RemoteException { return null; },f58b9022e44c89476bc5745771a7909cb7baf20e,"@java.lang.Override public synchronized java.lang.String getConfigString(int item) throws android.os.RemoteException { if (mProvisionedIntValue.containsKey(item)) { return mProvisionedStringValue.get(item); } else { java.lang.String retVal = getImsConfigImpl().getConfigString(item); if (retVal != null) { updateCachedValue(item, retVal, false); } return retVal; } }",5c3b4eb641892e4b15414153aff7c290b524c30c,2018-02-05 19:09:23,3
544212,tests_telephonytests_src_com_android_internal_telephony_ims_ImsManagerTest.java,,,"private com.android.ims.ImsManager initializeProvisionedValues() { try { when(mImsConfigImplBaseMock.getProvisionedValue(anyInt())).thenAnswer(( invocation) -> { return getProvisionedInt(((java.lang.Integer) (invocation.getArguments()[0]))); }); when(mImsConfigImplBaseMock.setProvisionedValue(anyInt(), anyInt())).thenAnswer(( invocation) -> { mProvisionedIntVals.put(((java.lang.Integer) (invocation.getArguments()[0])), ((java.lang.Integer) (invocation.getArguments()[1]))); return ImsConfig.OperationStatusConstants.SUCCESS; }); when(mImsConfigImplBaseMock.getProvisionedStringValue(anyInt())).thenAnswer(( invocation) -> { return getProvisionedString(((java.lang.Integer) (invocation.getArguments()[0]))); }); when(mImsConfigImplBaseMock.setProvisionedStringValue(anyInt(), anyString())).thenAnswer(( invocation) -> { mProvisionedStringVals.put(((java.lang.Integer) (invocation.getArguments()[0])), ((java.lang.String) (invocation.getArguments()[1]))); return ImsConfig.OperationStatusConstants.SUCCESS; }); } catch (android.os.RemoteException ex) { fail((""initializeProvisionedValues failed with "" + ex)); } mImsConfigStub = new android.telephony.ims.stub.ImsConfigImplBase.ImsConfigStub(mImsConfigImplBaseMock); doReturn(mImsConfigStub).when(mImsConfigImplBaseMock).getIImsConfig(); mImsConfig = new com.android.ims.ImsConfig(mImsConfigStub, mContext); com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, mPhoneId); try { replaceInstance(com.android.ims.ImsManager.class, ""mConfig"", imsManager, mImsConfig); } catch (java.lang.Exception ex) { fail((""failed with "" + ex)); } return imsManager; }",d047186f0ec8135dc77b5cb4a976d5c7e343f819,"private com.android.ims.ImsManager initializeProvisionedValues() { when(mImsConfigImplBaseMock.getConfigInt(anyInt())).thenAnswer(( invocation) -> { return getProvisionedInt(((java.lang.Integer) (invocation.getArguments()[0]))); }); when(mImsConfigImplBaseMock.setConfig(anyInt(), anyInt())).thenAnswer(( invocation) -> { mProvisionedIntVals.put(((java.lang.Integer) (invocation.getArguments()[0])), ((java.lang.Integer) (invocation.getArguments()[1]))); return ImsConfig.OperationStatusConstants.SUCCESS; }); mImsConfigStub = new android.telephony.ims.stub.ImsConfigImplBase.ImsConfigStub(mImsConfigImplBaseMock); doReturn(mImsConfigStub).when(mImsConfigImplBaseMock).getIImsConfig(); mImsConfig = new com.android.ims.ImsConfig(mImsConfigStub, mContext); com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, mPhoneId); try { replaceInstance(com.android.ims.ImsManager.class, ""mConfig"", imsManager, mImsConfig); } catch (java.lang.Exception ex) { fail((""failed with "" + ex)); } return imsManager; }",3c12228d79f3b127f3991addd32bd93a12551599,2018-02-05 19:09:23,4
591426,tests_telephonytests_src_android_telephony_ims_TestImsService.java,@java.lang.Override public android.telephony.ims.feature.MMTelFeature onCreateMMTelImsFeature(int slotId) { return mSpyMMTelFeature; },3ca9e36ef091a1a3a64f716ec85b66a412e22df5,@java.lang.Override public android.telephony.ims.feature.MmTelFeature onCreateMMTelImsFeature(int slotId) { return mSpyMMTelFeature; },09e86d22f0b7cc6708da4d089349e43603f8869f,@java.lang.Override public android.telephony.ims.feature.RcsFeature createRcsFeature(int slotId) { return null; },51f329f9f41eb549ba303d2bc9de799846b8b3d6,2018-02-05 19:09:23,3
597795,tests_telephonytests_src_com_android_internal_telephony_ims_ImsServiceControllerTest.java,"@android.support.test.filters.FlakyTest @org.junit.Test public void testBindService() { java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> testFeatures = new java.util.HashSet<>(); testFeatures.add(new android.util.Pair(1, 1)); testFeatures.add(new android.util.Pair(1, 2)); org.mockito.ArgumentCaptor<android.content.Intent> intentCaptor = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); junit.framework.Assert.assertTrue(mTestImsServiceController.bind(testFeatures)); int expectedFlags = ((android.content.Context.BIND_AUTO_CREATE) | (android.content.Context.BIND_FOREGROUND_SERVICE)) | (android.content.Context.BIND_IMPORTANT); verify(mMockContext).bindService(intentCaptor.capture(), any(), eq(expectedFlags)); android.content.Intent testIntent = intentCaptor.getValue(); junit.framework.Assert.assertEquals(ImsResolver.SERVICE_INTERFACE, testIntent.getAction()); junit.framework.Assert.assertEquals(mTestComponentName, testIntent.getComponent()); }",a55878320fa51a078fe972be651fa29568ac990c,"@android.support.test.filters.FlakyTest @org.junit.Test public void testBindService() { java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> testFeatures = new java.util.HashSet<>(); testFeatures.add(new android.util.Pair(1, 1)); testFeatures.add(new android.util.Pair(1, 2)); org.mockito.ArgumentCaptor<android.content.Intent> intentCaptor = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); junit.framework.Assert.assertTrue(mTestImsServiceController.bind(testFeatures)); int expectedFlags = ((android.content.Context.BIND_AUTO_CREATE) | (android.content.Context.BIND_FOREGROUND_SERVICE)) | (android.content.Context.BIND_IMPORTANT); verify(mMockContext).bindService(intentCaptor.capture(), any(), eq(expectedFlags)); android.content.Intent testIntent = intentCaptor.getValue(); junit.framework.Assert.assertEquals(ImsServiceController.SERVICE_INTERFACE, testIntent.getAction()); junit.framework.Assert.assertEquals(mTestComponentName, testIntent.getComponent()); }",cd273d22dba7f32e0ae57242a35ec2786e8131a2,"@android.support.test.filters.FlakyTest @org.junit.Test public void testBindService() { java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> testFeatures = new java.util.HashSet<>(); testFeatures.add(new android.util.Pair(1, 1)); testFeatures.add(new android.util.Pair(1, 2)); org.mockito.ArgumentCaptor<android.content.Intent> intentCaptor = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); junit.framework.Assert.assertTrue(mTestImsServiceController.bind(testFeatures)); int expectedFlags = ((android.content.Context.BIND_AUTO_CREATE) | (android.content.Context.BIND_FOREGROUND_SERVICE)) | (android.content.Context.BIND_IMPORTANT); verify(mMockContext).bindService(intentCaptor.capture(), any(), eq(expectedFlags)); android.content.Intent testIntent = intentCaptor.getValue(); junit.framework.Assert.assertEquals(ImsService.SERVICE_INTERFACE, testIntent.getAction()); junit.framework.Assert.assertEquals(mTestComponentName, testIntent.getComponent()); }",7af962d00e0a3ace19256ddc472acae1c12ab434,2018-02-05 19:09:23,3
530555,src_com_android_stk_StkAppService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void launchNotificationOnKeyguard(int slotId, java.lang.String message) { android.app.Notification.Builder builder = new android.app.Notification.Builder(this, com.android.stk.StkAppService.STK_NOTIFICATION_CHANNEL_ID); builder.setStyle(new android.app.Notification.BigTextStyle(builder).bigText(message)); builder.setContentText(message); com.android.internal.telephony.cat.Menu menu = getMainMenu(slotId); if ((menu == null) || (android.text.TextUtils.isEmpty(menu.title))) { builder.setContentTitle(getResources().getString(R.string.app_name)); } else { builder.setContentTitle(menu.title); } builder.setSmallIcon(com.android.internal.R.drawable.stat_notify_sim_toolkit); builder.setOngoing(true); builder.setOnlyAlertOnce(true); builder.setColor(getResources().getColor(com.android.internal.R.color.system_notification_accent_color)); mNotificationManager.notify(getNotificationId(com.android.stk.StkAppService.NOTIFICATION_ON_KEYGUARD, slotId), builder.build()); }",b8049422eb0ca4a9931c78acaf00e1c1a285f9b3,"private void launchNotificationOnKeyguard(int slotId, java.lang.String message) { android.app.Notification.Builder builder = new android.app.Notification.Builder(this, com.android.stk.StkAppService.STK_NOTIFICATION_CHANNEL_ID); builder.setStyle(new android.app.Notification.BigTextStyle(builder).bigText(message)); builder.setContentText(message); com.android.internal.telephony.cat.Menu menu = getMainMenu(slotId); if ((menu == null) || (android.text.TextUtils.isEmpty(menu.title))) { builder.setContentTitle(getResources().getString(R.string.app_name)); } else { builder.setContentTitle(menu.title); } builder.setSmallIcon(com.android.internal.R.drawable.stat_notify_sim_toolkit); builder.setOngoing(true); builder.setOnlyAlertOnce(true); builder.setColor(getResources().getColor(com.android.internal.R.color.system_notification_accent_color)); registerUserPresentReceiver(); mNotificationManager.notify(getNotificationId(com.android.stk.StkAppService.NOTIFICATION_ON_KEYGUARD, slotId), builder.build()); mStkContext[slotId].mNotificationOnKeyguard = true; }",423c729d54792f2281f82362c28b9fcaa23059c1,2018-02-05 19:44:50,7
530555,src_com_android_stk_StkAppService.java,"private void launchInputActivity(int slotId) { android.content.Intent newIntent = new android.content.Intent(android.content.Intent.ACTION_VIEW); java.lang.String targetActivity = com.android.stk.StkAppService.STK_INPUT_ACTIVITY_NAME; java.lang.String uriString = (com.android.stk.StkAppService.STK_INPUT_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, (""launchInputActivity, slotId: "" + slotId)); newIntent.setFlags(((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId)))); newIntent.setClassName(com.android.stk.StkAppService.PACKAGE_NAME, targetActivity); newIntent.putExtra(""INPUT"", mStkContext[slotId].mCurrentCmd.geInput()); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); newIntent.setData(uriData); mContext.startActivity(newIntent); }",858b485a221be94081e01e94291cd3d63d24a1c5,"private void launchInputActivity(int slotId) { android.content.Intent newIntent = new android.content.Intent(android.content.Intent.ACTION_VIEW); java.lang.String targetActivity = com.android.stk.StkAppService.STK_INPUT_ACTIVITY_NAME; java.lang.String uriString = (com.android.stk.StkAppService.STK_INPUT_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, (""launchInputActivity, slotId: "" + slotId)); newIntent.setFlags(((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId)))); newIntent.setClassName(com.android.stk.StkAppService.PACKAGE_NAME, targetActivity); newIntent.putExtra(""INPUT"", mStkContext[slotId].mCurrentCmd.geInput()); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); newIntent.setData(uriData); com.android.internal.telephony.cat.Input input = mStkContext[slotId].mCurrentCmd.geInput(); notifyUserIfNecessary(slotId, (input != null ? input.text : null)); mContext.startActivity(newIntent); }",c21ba74d5bd2d6ac3bcd2070d778a436c534ccb7,"private void launchInputActivity(int slotId) { android.content.Intent newIntent = new android.content.Intent(android.content.Intent.ACTION_VIEW); java.lang.String targetActivity = com.android.stk.StkAppService.STK_INPUT_ACTIVITY_NAME; java.lang.String uriString = (com.android.stk.StkAppService.STK_INPUT_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); com.android.internal.telephony.cat.Input input = mStkContext[slotId].mCurrentCmd.geInput(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, (""launchInputActivity, slotId: "" + slotId)); newIntent.setFlags(((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId)))); newIntent.setClassName(com.android.stk.StkAppService.PACKAGE_NAME, targetActivity); newIntent.putExtra(""INPUT"", input); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); newIntent.setData(uriData); if (input != null) { notifyUserIfNecessary(slotId, input.text); } mContext.startActivity(newIntent); }",0d0e0da71a651feeabcec1e908c0210bba33b07b,2018-02-05 19:44:50,7
530555,src_com_android_stk_StkAppService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void cancelNotificationOnKeyguard(int slotId) { if ((mUserPresentReceiver) != null) { unregisterReceiver(mUserPresentReceiver); mUserPresentReceiver = null; mNotificationManager.cancel(getNotificationId(com.android.stk.StkAppService.NOTIFICATION_ON_KEYGUARD, slotId)); } }",63e5713b435bed1904e4c665c85dfce619a66cba,"private void cancelNotificationOnKeyguard(int slotId) { mNotificationManager.cancel(getNotificationId(com.android.stk.StkAppService.NOTIFICATION_ON_KEYGUARD, slotId)); mStkContext[slotId].mNotificationOnKeyguard = false; unregisterUserPresentReceiver(slotId); }",5f4f251f38f3cf05c30b8cac0723c23da4b58ad4,2018-02-05 19:44:50,7
530555,src_com_android_stk_StkAppService.java,"private void launchTextDialog(int slotId) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, (""launchTextDialog, slotId: "" + slotId)); android.content.Intent newIntent = new android.content.Intent(); java.lang.String targetActivity = com.android.stk.StkAppService.STK_DIALOG_ACTIVITY_NAME; int action = getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId); java.lang.String uriString = (com.android.stk.StkAppService.STK_DIALOG_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); if (newIntent != null) { newIntent.setClassName(com.android.stk.StkAppService.PACKAGE_NAME, targetActivity); newIntent.setFlags((((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId)))); newIntent.setData(uriData); newIntent.putExtra(""TEXT"", mStkContext[slotId].mCurrentCmd.geTextMessage()); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); startActivity(newIntent); if (!(mStkContext[slotId].mCurrentCmd.geTextMessage().responseNeeded)) { sendResponse(com.android.stk.StkAppService.RES_ID_CONFIRM, slotId, true); } } }",2140ef05e316afe73e8139b67dcb4e26c05d51d8,"private void launchTextDialog(int slotId) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, (""launchTextDialog, slotId: "" + slotId)); android.content.Intent newIntent = new android.content.Intent(); java.lang.String targetActivity = com.android.stk.StkAppService.STK_DIALOG_ACTIVITY_NAME; int action = getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId); java.lang.String uriString = (com.android.stk.StkAppService.STK_DIALOG_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); if (newIntent != null) { newIntent.setClassName(com.android.stk.StkAppService.PACKAGE_NAME, targetActivity); newIntent.setFlags((((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId)))); newIntent.setData(uriData); newIntent.putExtra(""TEXT"", mStkContext[slotId].mCurrentCmd.geTextMessage()); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); com.android.internal.telephony.cat.TextMessage textMessage = mStkContext[slotId].mCurrentCmd.geTextMessage(); notifyUserIfNecessary(slotId, (textMessage != null ? textMessage.text : null)); startActivity(newIntent); if (!(mStkContext[slotId].mCurrentCmd.geTextMessage().responseNeeded)) { sendResponse(com.android.stk.StkAppService.RES_ID_CONFIRM, slotId, true); } } }",5486f8cdb196659f64457a13ab4988ed434a4753,"private void launchTextDialog(int slotId) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, (""launchTextDialog, slotId: "" + slotId)); android.content.Intent newIntent = new android.content.Intent(); java.lang.String targetActivity = com.android.stk.StkAppService.STK_DIALOG_ACTIVITY_NAME; int action = getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId); java.lang.String uriString = (com.android.stk.StkAppService.STK_DIALOG_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); com.android.internal.telephony.cat.TextMessage textMessage = mStkContext[slotId].mCurrentCmd.geTextMessage(); newIntent.setClassName(com.android.stk.StkAppService.PACKAGE_NAME, targetActivity); newIntent.setFlags((((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId)))); newIntent.setData(uriData); newIntent.putExtra(""TEXT"", textMessage); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); if (textMessage != null) { notifyUserIfNecessary(slotId, textMessage.text); } startActivity(newIntent); if (!(mStkContext[slotId].mCurrentCmd.geTextMessage().responseNeeded)) { sendResponse(com.android.stk.StkAppService.RES_ID_CONFIRM, slotId, true); } }",cb41d2bbea231aaaf68c99159c33da51a4b7c100,2018-02-05 19:44:50,7
606852,src_java_com_android_internal_telephony_uicc_UiccCarrierPrivilegeRules.java,"public int getCarrierPrivilegeStatus(android.content.pm.PackageManager packageManager, java.lang.String packageName) { try { if (!(hasCarrierPrivilegeRules())) { int state = mState.get(); if (state == (com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.STATE_LOADING)) { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED; } else if (state == (com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.STATE_ERROR)) { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_ERROR_LOADING_RULES; } return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_NO_ACCESS; } android.content.pm.PackageInfo pInfo = packageManager.getPackageInfo(packageName, ((android.content.pm.PackageManager.GET_SIGNATURES) | (android.content.pm.PackageManager.MATCH_DISABLED_UNTIL_USED_COMPONENTS))); return getCarrierPrivilegeStatus(pInfo); } catch (android.content.pm.PackageManager ex) { android.telephony.Rlog.e(com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.LOG_TAG, ""NameNotFoundException"", ex); } return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_NO_ACCESS; }",fb4effc1e9756502fbbf05fb5d7edabbf6baa925,"public int getCarrierPrivilegeStatus(android.content.pm.PackageManager packageManager, java.lang.String packageName) { try { if (!(hasCarrierPrivilegeRules())) { int state = mState.get(); if (state == (com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.STATE_LOADING)) { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED; } else if (state == (com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.STATE_ERROR)) { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_ERROR_LOADING_RULES; } return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_NO_ACCESS; } android.content.pm.PackageInfo pInfo = packageManager.getPackageInfo(packageName, ((android.content.pm.PackageManager.GET_SIGNATURES) | (android.content.pm.PackageManager.MATCH_DISABLED_UNTIL_USED_COMPONENTS))); return getCarrierPrivilegeStatus(pInfo); } catch (android.content.pm.PackageManager ex) { } return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_NO_ACCESS; }",0f29c6461d6804b07b7ea8588d1530e8ca9b22c7,"public int getCarrierPrivilegeStatus(android.content.pm.PackageManager packageManager, java.lang.String packageName) { try { if (!(hasCarrierPrivilegeRules())) { int state = mState.get(); if (state == (com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.STATE_LOADING)) { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED; } else if (state == (com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.STATE_ERROR)) { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_ERROR_LOADING_RULES; } return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_NO_ACCESS; } android.content.pm.PackageInfo pInfo = packageManager.getPackageInfo(packageName, ((android.content.pm.PackageManager.GET_SIGNATURES) | (android.content.pm.PackageManager.MATCH_DISABLED_UNTIL_USED_COMPONENTS))); return getCarrierPrivilegeStatus(pInfo); } catch (android.content.pm.PackageManager ex) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.log(((""Package "" + packageName) + "" not found for carrier privilege status check"")); } return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_NO_ACCESS; }",d5de8f743f6bd40c56a67bc1895a4f7619d7ee3f,2018-02-05 22:55:14,2
607396,tests_unit_src_com_android_bluetooth_a2dp_A2dpServiceTest.java,@org.junit.After public void tearDown() throws java.lang.Exception { stopService(); mTargetContext.unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedQueue.clear(); },f60a14ae294e390bc242b61b9d179c52fe66dbdc,@org.junit.After public void tearDown() throws java.lang.Exception { stopService(); mTargetContext.unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedQueue.clear(); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); },97e1c0ed286bb491c3dd72570e4f19587bcfec3c,@org.junit.After public void tearDown() throws java.lang.Exception { if (!(mTargetContext.getResources().getBoolean(R.bool.profile_supported_a2dp))) { return; } stopService(); mTargetContext.unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedQueue.clear(); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); },075b6a71929d977ddc4bcb807a463682d4b84576,2018-02-06 10:36:53,15
607396,tests_unit_src_com_android_bluetooth_hfpclient_HeadsetClientServiceTest.java,@org.junit.After public void tearDown() throws java.lang.Exception { mService = null; mAdapter = null; },1143229bea6d11c4d9a34ef4303d875cd931bbd7,"@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfpclient.HeadsetClientService.class); mService = null; mAdapter = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }",44fcc73ec321aa7b7b7e3e307b64b9babe630c84,"@org.junit.After public void tearDown() throws java.lang.Exception { if (!(mTargetContext.getResources().getBoolean(R.bool.profile_supported_hfpclient))) { return; } com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfpclient.HeadsetClientService.class); mService = com.android.bluetooth.hfpclient.HeadsetClientService.getHeadsetClientService(); org.junit.Assert.assertNull(mService); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }",b9584386d332b1a0c31032f3244e4b8d607aefee,2018-02-06 10:36:53,15
607396,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceTest.java,"@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(eq(com.android.bluetooth.hfp.HeadsetService.class.getName()), eq(BluetoothAdapter.STATE_OFF)); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService); mStateMachines.clear(); mCurrentDevice = null; }",7a1a6db993c812d92a94cdeb8c75b0d97e451625,"@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfp.HeadsetService.class); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); mStateMachines.clear(); mCurrentDevice = null; java.lang.reflect.Method method = com.android.bluetooth.hfp.HeadsetObjectsFactory.class.getDeclaredMethod(""setInstanceForTesting"", com.android.bluetooth.hfp.HeadsetObjectsFactory.class); method.setAccessible(true); method.invoke(null, ((com.android.bluetooth.hfp.HeadsetObjectsFactory) (null))); mObjectsFactory = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); mAdapterService = null; }",aebc3eecaf2bbc273d78bd91532274d57ef8c717,"@org.junit.After public void tearDown() throws java.lang.Exception { if (!(mTargetContext.getResources().getBoolean(R.bool.profile_supported_hs_hfp))) { return; } com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfp.HeadsetService.class); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); mStateMachines.clear(); mCurrentDevice = null; java.lang.reflect.Method method = com.android.bluetooth.hfp.HeadsetObjectsFactory.class.getDeclaredMethod(""setInstanceForTesting"", com.android.bluetooth.hfp.HeadsetObjectsFactory.class); method.setAccessible(true); method.invoke(null, ((com.android.bluetooth.hfp.HeadsetObjectsFactory) (null))); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }",d92111b27bc8bc837280aeb4fb7015e24299c65d,2018-02-06 10:36:53,15
607396,tests_unit_src_com_android_bluetooth_hdp_HealthServiceTest.java,"public void testRegisterAppConfiguration() { com.android.bluetooth.hdp.HealthService testService = new com.android.bluetooth.hdp.HealthService(); testService.attach(getInstrumentation().getContext(), null, null, null, null, null); assertEquals(false, testService.registerAppConfiguration(null, null)); }",54a4ff75bcf3bbae81cf8c796548acc229abd874,"@org.junit.Test public void testInitialize() { android.util.Log.i(com.android.bluetooth.hdp.HealthServiceTest.TAG, ""testInitialize, test passed""); }",72d8a189f62775efb904e03b792289960d25ee72,@org.junit.Test public void testInitialize() { org.junit.Assert.assertNotNull(com.android.bluetooth.hdp.HealthService.getHealthService()); },7ddcf7ad4fff4e71bf820ca9939692f48f4a41c2,2018-02-06 10:36:53,15
607396,tests_unit_src_com_android_bluetooth_hdp_HealthServiceTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hdp.HealthService.class); mAdapter = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }",672d27b3bd12c4cb9a857b8ca53d0f388ec12451,"@org.junit.After public void tearDown() throws java.lang.Exception { if (!(mTargetContext.getResources().getBoolean(R.bool.profile_supported_hdp))) { return; } com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hdp.HealthService.class); mService = com.android.bluetooth.hdp.HealthService.getHealthService(); org.junit.Assert.assertNull(mService); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }",59bb283fd77f6afe36fd68399ad58258e92b3f99,2018-02-06 10:36:53,15
607396,tests_unit_src_com_android_bluetooth_hfp_HeadsetStateMachineTest.java,@org.junit.After public void tearDown() { com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().destroyStateMachine(mHeadsetStateMachine); mHandlerThread.quit(); reset(com.android.bluetooth.hfp.HeadsetStateMachineTest.sAdapterService); },cced7ae2428483607f287053d6ef471eaa1ae29e,@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().destroyStateMachine(mHeadsetStateMachine); mHandlerThread.quit(); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); mAdapterService = null; },0032336237c5e5bb82a68f577ae7ecdb45c0b5a5,@org.junit.After public void tearDown() throws java.lang.Exception { if (!(mTargetContext.getResources().getBoolean(R.bool.profile_supported_hs_hfp))) { return; } com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().destroyStateMachine(mHeadsetStateMachine); mHandlerThread.quit(); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); },031df759ebc3d8f655ddac2bd4e97196a31e6cda,2018-02-06 10:36:53,15
607396,tests_unit_src_com_android_bluetooth_hdp_HealthServiceTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Before public void setUp() throws java.lang.Exception { mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); org.junit.Assume.assumeTrue(""Ignore test when HealthService is not enabled"", mTargetContext.getResources().getBoolean(R.bool.profile_supported_hdp)); org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); com.android.bluetooth.TestUtils.startService(mServiceRule, com.android.bluetooth.hdp.HealthService.class); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); org.junit.Assert.assertNotNull(mAdapter); }",6ad113368631ca0c6d2bae0a809024552677355c,"@org.junit.Before public void setUp() throws java.lang.Exception { mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); org.junit.Assume.assumeTrue(""Ignore test when HealthService is not enabled"", mTargetContext.getResources().getBoolean(R.bool.profile_supported_hdp)); org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); com.android.bluetooth.TestUtils.startService(mServiceRule, com.android.bluetooth.hdp.HealthService.class); mService = com.android.bluetooth.hdp.HealthService.getHealthService(); org.junit.Assert.assertNotNull(mService); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); org.junit.Assert.assertNotNull(mAdapter); }",65a1c77d651b5704bb1c9b75fe9f94758d46ac67,2018-02-06 10:36:53,15
607396,tests_unit_src_com_android_bluetooth_mapclient_MapClientTest.java,"@org.junit.Test public void testInitialize() { if (skipTest()) return; android.util.Log.i(com.android.bluetooth.mapclient.MapClientTest.TAG, ""testInitialize, test passed""); }",abe0d7b738f5a1709a5b3c67e1d92920bdb8154f,"@org.junit.Test public void testInitialize() { android.util.Log.i(com.android.bluetooth.mapclient.MapClientTest.TAG, ""testInitialize, test passed""); }",840b1172b7f0d6a448c563d5c9bf7ccc88cae370,@org.junit.Test public void testInitialize() { org.junit.Assert.assertNotNull(com.android.bluetooth.mapclient.MapClientService.getMapClientService()); },aef17794108cbd3b9c4387cebc8f80141a86050d,2018-02-06 10:36:53,15
607396,tests_unit_src_com_android_bluetooth_a2dp_A2dpStateMachineTest.java,@org.junit.After public void tearDown() { mA2dpStateMachine.doQuit(); mHandlerThread.quit(); },f3f50583b5979c831e6eef3ca6b89000c972a5a7,@org.junit.After public void tearDown() throws java.lang.Exception { mA2dpStateMachine.doQuit(); mHandlerThread.quit(); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); },8675ffaac25e8d4ba997cff840e272324a32c328,@org.junit.After public void tearDown() throws java.lang.Exception { if (!(mTargetContext.getResources().getBoolean(R.bool.profile_supported_a2dp))) { return; } mA2dpStateMachine.doQuit(); mHandlerThread.quit(); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); },dfdcc5b1bf8ad2383d8d6d13fe4aa375da3966fa,2018-02-06 10:36:53,15
607396,tests_unit_src_com_android_bluetooth_a2dp_A2dpStateMachineTest.java,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); java.lang.reflect.Method method = com.android.bluetooth.btservice.AdapterService.class.getDeclaredMethod(""setAdapterService"", com.android.bluetooth.btservice.AdapterService.class); method.setAccessible(true); method.invoke(mAdapterService, mAdapterService); mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); mHandlerThread = new android.os.HandlerThread(""A2dpStateMachineTestHandlerThread""); mHandlerThread.start(); mA2dpStateMachine = new com.android.bluetooth.a2dp.A2dpStateMachine(mTestDevice, mA2dpService, mTargetContext, mA2dpNativeInterface, mHandlerThread.getLooper()); mA2dpStateMachine.sConnectTimeoutMs = 1000; mA2dpStateMachine.start(); }",9cf5cff15b451257f150271d5ffd8c83810e8999,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); mHandlerThread = new android.os.HandlerThread(""A2dpStateMachineTestHandlerThread""); mHandlerThread.start(); mA2dpStateMachine = new com.android.bluetooth.a2dp.A2dpStateMachine(mTestDevice, mA2dpService, mTargetContext, mA2dpNativeInterface, mHandlerThread.getLooper()); A2dpStateMachine.sConnectTimeoutMs = 1000; mA2dpStateMachine.start(); }",90e232281a5f26e6b8d0646dc01b69b180053f5e,"@org.junit.Before public void setUp() throws java.lang.Exception { mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); org.junit.Assume.assumeTrue(""Ignore test when A2dpService is not enabled"", mTargetContext.getResources().getBoolean(R.bool.profile_supported_a2dp)); org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); mHandlerThread = new android.os.HandlerThread(""A2dpStateMachineTestHandlerThread""); mHandlerThread.start(); mA2dpStateMachine = new com.android.bluetooth.a2dp.A2dpStateMachine(mTestDevice, mA2dpService, mTargetContext, mA2dpNativeInterface, mHandlerThread.getLooper()); A2dpStateMachine.sConnectTimeoutMs = 1000; mA2dpStateMachine.start(); }",1fefbb5f4f4dfdfc32e18bd5e5eea28265a835d4,2018-02-06 10:36:53,15
607396,tests_unit_src_com_android_bluetooth_hid_HidDeviceTest.java,@org.junit.After public void tearDown() { mHidDeviceService.stop(); mHidDeviceService.cleanup(); mHidDeviceService = null; mTargetContext.unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedQueue.clear(); mCallbackQueue.clear(); },e74ad60668f73ab61523c068f987004e552defdb,@org.junit.After public void tearDown() throws java.lang.Exception { mHidDeviceService.stop(); mHidDeviceService.cleanup(); mHidDeviceService = null; mTargetContext.unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedQueue.clear(); mCallbackQueue.clear(); com.android.bluetooth.hid.HidDeviceTest.setHidDeviceNativeInterfaceInstance(null); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); mAdapterService = null; },5318ceac36948a3a607b67f76926d972864f8a7f,"@org.junit.After public void tearDown() throws java.lang.Exception { if (!(mTargetContext.getResources().getBoolean(R.bool.profile_supported_hid_device))) { return; } com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hid.HidDeviceService.class); mHidDeviceService = com.android.bluetooth.hid.HidDeviceService.getHidDeviceService(); org.junit.Assert.assertNull(mHidDeviceService); mTargetContext.unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedQueue.clear(); mCallbackQueue.clear(); com.android.bluetooth.hid.HidDeviceTest.setHidDeviceNativeInterfaceInstance(null); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }",af0622de8163edf737d69c98788c57c5711dc4aa,2018-02-06 10:36:53,15
607396,tests_unit_src_com_android_bluetooth_pbap_PbapStateMachineTest.java,@org.junit.After public void tearDown() { mHandlerThread.quitSafely(); },47a94d9e95a5e16dfd6599a7e7c63e0aa8ffee39,@org.junit.After public void tearDown() throws java.lang.Exception { mHandlerThread.quitSafely(); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); mAdapterService = null; },850962ab77d1c29ed1f759737fb0b1c63e2b61a3,@org.junit.After public void tearDown() throws java.lang.Exception { if (!(mTargetContext.getResources().getBoolean(R.bool.profile_supported_pbap))) { return; } mHandlerThread.quitSafely(); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); },b654afc3a9db5838168e38b2ae51adc2d0a6764c,2018-02-06 10:36:53,15
607396,tests_unit_src_com_android_bluetooth_pbap_PbapStateMachineTest.java,"@org.junit.Before public void setUp() throws java.lang.Exception { mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); mHandlerThread = new android.os.HandlerThread(""PbapTestHandlerThread""); mHandlerThread.start(); mHandler = new android.os.Handler(mHandlerThread.getLooper()); mBluetoothPbapService = mock(com.android.bluetooth.pbap.BluetoothPbapService.class); doNothing().when(mBluetoothPbapService).checkOrGetPhonebookPermission(any()); mPbapStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(mBluetoothPbapService, mHandlerThread.getLooper(), mTestDevice, mSocket, mBluetoothPbapService, mHandler, com.android.bluetooth.pbap.PbapTest.TEST_NOTIFICATION_ID); }",5064ac94b515ad11a9e39c87f26117d9302e4885,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); mHandlerThread = new android.os.HandlerThread(""PbapTestHandlerThread""); mHandlerThread.start(); mHandler = new android.os.Handler(mHandlerThread.getLooper()); mBluetoothPbapService = mock(com.android.bluetooth.pbap.BluetoothPbapService.class); doNothing().when(mBluetoothPbapService).checkOrGetPhonebookPermission(any()); mPbapStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(mBluetoothPbapService, mHandlerThread.getLooper(), mTestDevice, mSocket, mBluetoothPbapService, mHandler, com.android.bluetooth.pbap.PbapStateMachineTest.TEST_NOTIFICATION_ID); }",40339dd178959063c9b4c6f092cbe73769101834,"@org.junit.Before public void setUp() throws java.lang.Exception { mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); org.junit.Assume.assumeTrue(""Ignore test when BluetoothPbapService is not enabled"", mTargetContext.getResources().getBoolean(R.bool.profile_supported_pbap)); org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); mHandlerThread = new android.os.HandlerThread(""PbapTestHandlerThread""); mHandlerThread.start(); mHandler = new android.os.Handler(mHandlerThread.getLooper()); mBluetoothPbapService = mock(com.android.bluetooth.pbap.BluetoothPbapService.class); doNothing().when(mBluetoothPbapService).checkOrGetPhonebookPermission(any()); mPbapStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(mBluetoothPbapService, mHandlerThread.getLooper(), mTestDevice, mSocket, mBluetoothPbapService, mHandler, com.android.bluetooth.pbap.PbapStateMachineTest.TEST_NOTIFICATION_ID); }",577ef44a4d2f15c6e5b9897f0dad189248f0679c,2018-02-06 10:36:53,15
607396,tests_unit_src_com_android_bluetooth_mapclient_MapClientTest.java,@org.junit.After public void tearDown() throws java.lang.Exception { mService = null; mAdapter = null; },1143229bea6d11c4d9a34ef4303d875cd931bbd7,"@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.mapclient.MapClientService.class); mService = com.android.bluetooth.mapclient.MapClientService.getMapClientService(); org.junit.Assert.assertNull(mService); mAdapter = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); mAdapterService = null; }",64f07683f11411de2e002df95d58e1275bd84c20,"@org.junit.After public void tearDown() throws java.lang.Exception { if (!(mTargetContext.getResources().getBoolean(R.bool.profile_supported_mapmce))) { return; } com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.mapclient.MapClientService.class); mService = com.android.bluetooth.mapclient.MapClientService.getMapClientService(); org.junit.Assert.assertNull(mService); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }",c91bcdb6eae1809b5882b6a99d7e2e6926b2d73a,2018-02-06 10:36:53,15
607396,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,"@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); verify(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(eq(com.android.bluetooth.hfp.HeadsetService.class.getName()), eq(BluetoothAdapter.STATE_OFF)); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sAdapterService); mCurrentDevice = null; }",86d43beef9d52f3d757880589d12ee7714a61ad8,"@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfp.HeadsetService.class); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(mObjectsFactory, mAdapterService); mCurrentDevice = null; java.lang.reflect.Method method = com.android.bluetooth.hfp.HeadsetObjectsFactory.class.getDeclaredMethod(""setInstanceForTesting"", com.android.bluetooth.hfp.HeadsetObjectsFactory.class); method.setAccessible(true); method.invoke(null, ((com.android.bluetooth.hfp.HeadsetObjectsFactory) (null))); mObjectsFactory = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }",9cc9eea31a2791301fdffedeceae8c9b8b099ebf,"@org.junit.After public void tearDown() throws java.lang.Exception { if (!(mTargetContext.getResources().getBoolean(R.bool.profile_supported_hs_hfp))) { return; } com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfp.HeadsetService.class); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); java.lang.reflect.Method method = com.android.bluetooth.hfp.HeadsetObjectsFactory.class.getDeclaredMethod(""setInstanceForTesting"", com.android.bluetooth.hfp.HeadsetObjectsFactory.class); method.setAccessible(true); method.invoke(null, ((com.android.bluetooth.hfp.HeadsetObjectsFactory) (null))); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }",2956c0ab31fe2a396b5e30350e3da70ad92b92e8,2018-02-06 10:36:53,15
603413,src_java_com_android_internal_telephony_NetworkRegistrationManager.java,,,"@java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { mServiceBinder = ((android.telephony.INetworkService.Stub) (service)); mDeathRecipient = new com.android.internal.telephony.NetworkRegistrationManager.RegManagerDeathRecipient(name); try { mServiceBinder.linkToDeath(mDeathRecipient); mServiceBinder.createNetworkServiceProvider(mPhone.getPhoneId()); mServiceBinder.registerForNetworkRegistrationStateChanged(mPhone.getPhoneId(), new com.android.internal.telephony.NetworkRegistrationManager.NetworkRegStateCallback(null)); } catch (android.os.RemoteException exception) { mDeathRecipient.binderDied(); android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, (""RemoteException "" + exception)); } }",15cd5c4cdfb04cc0df9da002192f68cc67de4876,"@java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { mServiceBinder = ((android.telephony.INetworkService.Stub) (service)); mDeathRecipient = new com.android.internal.telephony.NetworkRegistrationManager.RegManagerDeathRecipient(name); try { mServiceBinder.linkToDeath(mDeathRecipient, 0); mServiceBinder.createNetworkServiceProvider(mPhone.getPhoneId()); mServiceBinder.registerForNetworkRegistrationStateChanged(mPhone.getPhoneId(), new com.android.internal.telephony.NetworkRegistrationManager.NetworkRegStateCallback(null)); } catch (android.os.RemoteException exception) { mDeathRecipient.binderDied(); com.android.internal.telephony.NetworkRegistrationManager.logd((""RemoteException "" + exception)); } }",43dbf3d9d2bf539db459209515a334cebb90752f,2018-02-06 20:57:24,4
603413,src_java_com_android_internal_telephony_NetworkRegistrationManager.java,,,"private boolean bindService() { android.content.Intent intent = new android.content.Intent(android.telephony.NetworkService.NETWORK_SERVICE_INTERFACE); intent.setPackage(getPackageName()); return mPhone.getContext().bindService(intent, new com.android.internal.telephony.NetworkRegistrationManager.NetworkServiceConnection(), Context.BIND_AUTO_CREATE); }",e1c602f611fe70246698b879f2e6436b5a23ec54,"private boolean bindService() { android.content.Intent intent = new android.content.Intent(android.telephony.NetworkService.NETWORK_SERVICE_INTERFACE); intent.setPackage(getPackageName()); try { return mPhone.getContext().bindService(intent, new com.android.internal.telephony.NetworkRegistrationManager.NetworkServiceConnection(), Context.BIND_AUTO_CREATE); } catch (java.lang.SecurityException e) { com.android.internal.telephony.NetworkRegistrationManager.loge((""bindService failed "" + e)); return false; } }",7aefec9ff2568b5db67fc9f2aab93f469e642eca,2018-02-06 20:57:24,4
603413,src_java_com_android_internal_telephony_NetworkRegistrationManager.java,,,"public void registerForNetworkRegistrationStateChanged(android.os.Handler h, int what, java.lang.Object obj) { android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ""registerForNetworkRegistrationStateChanged""); android.os.Registrant r = new android.os.Registrant(h, what, obj); mRegStateChangeRegistrants.addUnique(h, what, obj); }",eb1a960883f59dda1e85d393e7732a966022d64e,"public void registerForNetworkRegistrationStateChanged(android.os.Handler h, int what, java.lang.Object obj) { com.android.internal.telephony.NetworkRegistrationManager.logd(""registerForNetworkRegistrationStateChanged""); android.os.Registrant r = new android.os.Registrant(h, what, obj); mRegStateChangeRegistrants.addUnique(h, what, obj); }",9dccf7078d1dfb587605e12bb1b197c8a446d022,2018-02-06 20:57:24,4
603413,src_java_com_android_internal_telephony_NetworkRegistrationManager.java,,,"@java.lang.Override public void binderDied() { android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ((((""NetworkService("" + (mComponentName)) + "" transport type "") + (mTransportType)) + "") died."")); }",f136257c8985d426172886ee68937edb8887ddf5,"@java.lang.Override public void binderDied() { com.android.internal.telephony.NetworkRegistrationManager.logd(((((""NetworkService("" + (mComponentName)) + "" transport type "") + (mTransportType)) + "") died."")); }",7c29a70d422be6a2eefd079f38ac107976ca1897,2018-02-06 20:57:24,4
603413,src_java_com_android_internal_telephony_NetworkRegistrationManager.java,,,"@java.lang.Override public void onNetworkStateChanged() { android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ""onNetworkStateChanged""); mRegStateChangeRegistrants.notifyRegistrants(); }",ea779510ced3168f3fa8bec5aa150b54aa12f44e,"private static int loge(java.lang.String msg) { return android.telephony.Rlog.e(com.android.internal.telephony.NetworkRegistrationManager.TAG, msg); }",bea291b1ebb1f2b253fd0e5745a9f9453d071455,2018-02-06 20:57:24,4
603413,src_java_com_android_internal_telephony_NetworkRegistrationManager.java,,,"private java.lang.String getPackageName() { java.lang.String packageName; int resourceId; java.lang.String carrierConfig; switch (mTransportType) { case android.telephony.AccessNetworkConstants.TransportType.WWAN : resourceId = com.android.internal.R.string.config_wwan_network_service_package; carrierConfig = android.telephony.CarrierConfigManager.KEY_CARRIER_NETWORK_SERVICE_WWAN_PACKAGE_OVERRIDE_STRING; break; case android.telephony.AccessNetworkConstants.TransportType.WLAN : resourceId = com.android.internal.R.string.config_wlan_network_service_package; carrierConfig = android.telephony.CarrierConfigManager.KEY_CARRIER_NETWORK_SERVICE_WLAN_PACKAGE_OVERRIDE_STRING; break; default : throw new java.lang.IllegalStateException((""Transport type not WWAN or WLAN. type="" + (mTransportType))); } packageName = mPhone.getContext().getResources().getString(resourceId); android.os.PersistableBundle b = mCarrierConfigManager.getConfigForSubId(mPhone.getSubId()); if (b != null) { packageName = b.getString(carrierConfig, packageName); } android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, (((""Binding to packageName "" + packageName) + "" for transport type"") + (mTransportType))); return packageName; }",4951d8f941ab736c16afc353abc744cc4868b3bb,"private java.lang.String getPackageName() { java.lang.String packageName; int resourceId; java.lang.String carrierConfig; switch (mTransportType) { case android.telephony.AccessNetworkConstants.TransportType.WWAN : resourceId = com.android.internal.R.string.config_wwan_network_service_package; carrierConfig = android.telephony.CarrierConfigManager.KEY_CARRIER_NETWORK_SERVICE_WWAN_PACKAGE_OVERRIDE_STRING; break; case android.telephony.AccessNetworkConstants.TransportType.WLAN : resourceId = com.android.internal.R.string.config_wlan_network_service_package; carrierConfig = android.telephony.CarrierConfigManager.KEY_CARRIER_NETWORK_SERVICE_WLAN_PACKAGE_OVERRIDE_STRING; break; default : throw new java.lang.IllegalStateException((""Transport type not WWAN or WLAN. type="" + (mTransportType))); } packageName = mPhone.getContext().getResources().getString(resourceId); android.os.PersistableBundle b = mCarrierConfigManager.getConfigForSubId(mPhone.getSubId()); if (b != null) { packageName = b.getString(carrierConfig, packageName); } com.android.internal.telephony.NetworkRegistrationManager.logd((((""Binding to packageName "" + packageName) + "" for transport type"") + (mTransportType))); return packageName; }",5cb5664af4b3e649752e923db2d7c780002f34c1,2018-02-06 20:57:24,4
603413,src_java_com_android_internal_telephony_NetworkRegistrationManager.java,,,"public void getNetworkRegistrationState(int domain, android.os.Message onCompleteMessage) { if (onCompleteMessage == null) return; android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, (""getNetworkRegistrationState domain "" + domain)); if (!(isServiceConnected())) { onCompleteMessage.obj = new android.os.AsyncResult(onCompleteMessage.obj, null, new java.lang.IllegalStateException(""Service not connected."")); onCompleteMessage.sendToTarget(); return; } try { mServiceBinder.getNetworkRegistrationState(mPhone.getPhoneId(), domain, new com.android.internal.telephony.NetworkRegistrationManager.NetworkRegStateCallback(onCompleteMessage)); } catch (android.os.RemoteException e) { android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, (""getNetworkRegistrationState RemoteException "" + e)); onCompleteMessage.obj = new android.os.AsyncResult(onCompleteMessage.obj, null, e); onCompleteMessage.sendToTarget(); } }",993c6dca8470e64a79fab7f3e74139187b8df3db,"public void getNetworkRegistrationState(int domain, android.os.Message onCompleteMessage) { if (onCompleteMessage == null) return; com.android.internal.telephony.NetworkRegistrationManager.logd((""getNetworkRegistrationState domain "" + domain)); if (!(isServiceConnected())) { onCompleteMessage.obj = new android.os.AsyncResult(onCompleteMessage.obj, null, new java.lang.IllegalStateException(""Service not connected."")); onCompleteMessage.sendToTarget(); return; } try { mServiceBinder.getNetworkRegistrationState(mPhone.getPhoneId(), domain, new com.android.internal.telephony.NetworkRegistrationManager.NetworkRegStateCallback(onCompleteMessage)); } catch (android.os.RemoteException e) { android.telephony.Rlog.e(com.android.internal.telephony.NetworkRegistrationManager.TAG, (""getNetworkRegistrationState RemoteException "" + e)); onCompleteMessage.obj = new android.os.AsyncResult(onCompleteMessage.obj, null, e); onCompleteMessage.sendToTarget(); } }",f39138baebb026a4b91a0fdd6ee0548b2c43ea8e,2018-02-06 20:57:24,4
603413,src_java_com_android_internal_telephony_NetworkRegistrationManager.java,,,"@java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, (""onServiceDisconnected "" + name)); if ((mServiceBinder) != null) { mServiceBinder.unlinkToDeath(mDeathRecipient, 0); } }",c59d5172499c4f40973f513842782037f93d8823,"@java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { com.android.internal.telephony.NetworkRegistrationManager.logd((""onServiceDisconnected "" + name)); if ((mServiceBinder) != null) { mServiceBinder.unlinkToDeath(mDeathRecipient, 0); } }",3979a7468cd523a470a5a84c3ce7c508fc44aca5,2018-02-06 20:57:24,4
609548,src_com_google_android_traceur_QsService.java,"private void update() { boolean tracingOn = com.android.traceur.AtraceUtils.isTracingOn(); getQsTile().setIcon(android.graphics.drawable.Icon.createWithResource(this, R.drawable.stat_sys_adb)); getQsTile().setState((tracingOn ? android.service.quicksettings.Tile.STATE_ACTIVE : android.service.quicksettings.Tile.STATE_INACTIVE)); getQsTile().setLabel((tracingOn ? ""Tracing"" : ""Start Tracing"")); getQsTile().updateTile(); }",b2992323f72f05f30532821c807e8b2aaac54e34,"private void update() { boolean tracingOn = com.android.traceur.AtraceUtils.isTracingOn(); getQsTile().setIcon(android.graphics.drawable.Icon.createWithResource(this, R.drawable.stat_sys_adb)); getQsTile().setState((tracingOn ? android.service.quicksettings.Tile.STATE_ACTIVE : android.service.quicksettings.Tile.STATE_INACTIVE)); getQsTile().setLabel(getString((tracingOn ? R.string.save_and_share_trace : R.string.record_trace))); getQsTile().updateTile(); }",1714dc7ff085863898f0c2888defd325572c9c6e,"private void update() { boolean tracingOn = com.android.traceur.AtraceUtils.isTracingOn(); java.lang.String titleString = getString((tracingOn ? R.string.save_and_share_trace : R.string.record_trace)); getQsTile().setIcon(android.graphics.drawable.Icon.createWithResource(this, R.drawable.stat_sys_adb)); getQsTile().setState((tracingOn ? android.service.quicksettings.Tile.STATE_ACTIVE : android.service.quicksettings.Tile.STATE_INACTIVE)); getQsTile().setLabel(titleString); getQsTile().updateTile(); }",9a11ce1d295bcd9f9b06afde5597d402ec79d8b5,2018-02-06 21:05:35,3
603436,src_java_com_android_internal_telephony_ServiceStateTracker.java,"public void pollState(boolean modemTriggered) { mPollingContext = new int[1]; mPollingContext[0] = 0; log((""pollState: modemTriggered="" + modemTriggered)); switch (mCi.getRadioState()) { case RADIO_UNAVAILABLE : mNewSS.setStateOutOfService(); mNewCellLoc.setStateInvalid(); setSignalStrengthDefaultValues(); mNitzState.handleNetworkUnavailable(); pollStateDone(); break; case RADIO_OFF : mNewSS.setStateOff(); mNewCellLoc.setStateInvalid(); setSignalStrengthDefaultValues(); mNitzState.handleNetworkUnavailable(); if ((mDeviceShuttingDown) || ((!modemTriggered) && ((android.telephony.ServiceState.RIL_RADIO_TECHNOLOGY_IWLAN) != (mSS.getRilDataRadioTechnology())))) { pollStateDone(); break; } default : (mPollingContext[0])++; mCi.getOperator(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_OPERATOR, mPollingContext)); (mPollingContext[0])++; mCi.getDataRegistrationState(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_GPRS, mPollingContext)); (mPollingContext[0])++; mCi.getVoiceRegistrationState(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_REGISTRATION, mPollingContext)); if (mPhone.isPhoneTypeGsm()) { (mPollingContext[0])++; mCi.getNetworkSelectionMode(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_NETWORK_SELECTION_MODE, mPollingContext)); } break; } }",040c54cd184e7a0a82b16462c672572dc7f4b6f4,"public void pollState(boolean modemTriggered) { mPollingContext = new int[1]; mPollingContext[0] = 0; log((""pollState: modemTriggered="" + modemTriggered)); switch (mCi.getRadioState()) { case RADIO_UNAVAILABLE : mNewSS.setStateOutOfService(); mNewCellLoc.setStateInvalid(); setSignalStrengthDefaultValues(); mNitzState.handleNetworkUnavailable(); pollStateDone(); break; case RADIO_OFF : mNewSS.setStateOff(); mNewCellLoc.setStateInvalid(); setSignalStrengthDefaultValues(); mNitzState.handleNetworkUnavailable(); if ((mDeviceShuttingDown) || ((!modemTriggered) && ((android.telephony.ServiceState.RIL_RADIO_TECHNOLOGY_IWLAN) != (mSS.getRilDataRadioTechnology())))) { pollStateDone(); break; } default : (mPollingContext[0])++; mCi.getOperator(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_OPERATOR, mPollingContext)); (mPollingContext[0])++; mWwanRegStateManager.getNetworkRegistrationState(NetworkRegistrationState.DOMAIN_PS, obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_GPRS, mPollingContext)); (mPollingContext[0])++; mWwanRegStateManager.getNetworkRegistrationState(NetworkRegistrationState.DOMAIN_CS, obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_REGISTRATION, mPollingContext)); if (mPhone.isPhoneTypeGsm()) { (mPollingContext[0])++; mCi.getNetworkSelectionMode(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_NETWORK_SELECTION_MODE, mPollingContext)); } break; } }",67843e464aa8b9c0e1271abef563c03374927721,"public void pollState(boolean modemTriggered) { mPollingContext = new int[1]; mPollingContext[0] = 0; log((""pollState: modemTriggered="" + modemTriggered)); switch (mCi.getRadioState()) { case RADIO_UNAVAILABLE : mNewSS.setStateOutOfService(); mNewCellLoc.setStateInvalid(); setSignalStrengthDefaultValues(); mNitzState.handleNetworkUnavailable(); pollStateDone(); break; case RADIO_OFF : mNewSS.setStateOff(); mNewCellLoc.setStateInvalid(); setSignalStrengthDefaultValues(); mNitzState.handleNetworkUnavailable(); if ((mDeviceShuttingDown) || ((!modemTriggered) && ((android.telephony.ServiceState.RIL_RADIO_TECHNOLOGY_IWLAN) != (mSS.getRilDataRadioTechnology())))) { pollStateDone(); break; } default : (mPollingContext[0])++; mCi.getOperator(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_OPERATOR, mPollingContext)); (mPollingContext[0])++; mRegStateManagers.get(AccessNetworkConstants.TransportType.WWAN).getNetworkRegistrationState(NetworkRegistrationState.DOMAIN_PS, obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_GPRS, mPollingContext)); (mPollingContext[0])++; mRegStateManagers.get(AccessNetworkConstants.TransportType.WWAN).getNetworkRegistrationState(NetworkRegistrationState.DOMAIN_CS, obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_REGISTRATION, mPollingContext)); if (mPhone.isPhoneTypeGsm()) { (mPollingContext[0])++; mCi.getNetworkSelectionMode(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_NETWORK_SELECTION_MODE, mPollingContext)); } break; } }",c2829fb48d608eb30c5c8be56b309a8b55e6f892,2018-02-06 21:32:30,4
603436,src_java_com_android_internal_telephony_ServiceStateTracker.java,private int getLteEarfcn(android.hardware.radio.V1_0.DataRegStateResult dataRegStateResult) { int lteEarfcn = com.android.internal.telephony.ServiceStateTracker.INVALID_LTE_EARFCN; switch (dataRegStateResult.cellIdentity.cellInfoType) { case android.hardware.radio.V1_0.CellInfoType.LTE : { if ((dataRegStateResult.cellIdentity.cellIdentityLte.size()) == 1) { android.hardware.radio.V1_0.CellIdentityLte cellIdentityLte = dataRegStateResult.cellIdentity.cellIdentityLte.get(0); lteEarfcn = cellIdentityLte.earfcn; } break; } default : { break; } } return lteEarfcn; },3ed16f8ad7f36832260b9356d9f5b7918d79ea04,private int getLteEarfcn(android.telephony.CellIdentity cellIdentity) { int lteEarfcn = com.android.internal.telephony.ServiceStateTracker.INVALID_LTE_EARFCN; switch (cellIdentity.getType()) { case android.hardware.radio.V1_0.CellInfoType.LTE : { lteEarfcn = ((android.telephony.CellIdentityLte) (cellIdentity)).getEarfcn(); break; } default : { break; } } return lteEarfcn; },03aa8c522218b1a395d136e4c0bb9d92fad7d870,private int getLteEarfcn(android.telephony.CellIdentity cellIdentity) { int lteEarfcn = com.android.internal.telephony.ServiceStateTracker.INVALID_LTE_EARFCN; if (cellIdentity != null) { switch (cellIdentity.getType()) { case android.hardware.radio.V1_0.CellInfoType.LTE : { lteEarfcn = ((android.telephony.CellIdentityLte) (cellIdentity)).getEarfcn(); break; } default : { break; } } } return lteEarfcn; },25fa0d0a173e9a81f19b93f653c64e0624f940a8,2018-02-06 21:32:30,4
609110,src_com_android_bluetooth_mapclient_MceStateMachine.java,"private void notifySentMessageStatus(java.lang.String handle, com.android.bluetooth.mapclient.EventReport.Type status) { if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, (((""got a status for "" + handle) + "" Status = "") + status)); } android.app.PendingIntent intentToSend = null; if (status == (EventReport.Type.SENDING_SUCCESS)) { intentToSend = mSentReceiptRequested.remove(mSentMessageLog.get(handle)); } else if (status == (EventReport.Type.DELIVERY_SUCCESS)) { intentToSend = mDeliveryReceiptRequested.remove(mSentMessageLog.get(handle)); } if (intentToSend != null) { try { if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, (""*******Sending "" + intentToSend)); } intentToSend.send(); } catch (android.app.PendingIntent e) { android.util.Log.w(com.android.bluetooth.mapclient.MceStateMachine.TAG, (""Notification Request Canceled"" + e)); } } }",ac4a5db9b6929d9d2b7fb5dce29558c06a7b3e52,"private void notifySentMessageStatus(java.lang.String handle, com.android.bluetooth.mapclient.EventReport.Type status) { if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, (((""got a status for "" + handle) + "" Status = "") + status)); } android.app.PendingIntent intentToSend = null; java.lang.String shortHandle = handle.substring(2); if ((status == (EventReport.Type.SENDING_FAILURE)) || (status == (EventReport.Type.SENDING_SUCCESS))) { intentToSend = mSentReceiptRequested.remove(mSentMessageLog.get(shortHandle)); } else if ((status == (EventReport.Type.DELIVERY_SUCCESS)) || (status == (EventReport.Type.DELIVERY_FAILURE))) { intentToSend = mDeliveryReceiptRequested.remove(mSentMessageLog.get(shortHandle)); } if (intentToSend != null) { try { if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, (""*******Sending "" + intentToSend)); } intentToSend.send(); } catch (android.app.PendingIntent e) { android.util.Log.w(com.android.bluetooth.mapclient.MceStateMachine.TAG, (""Notification Request Canceled"" + e)); } } else { android.util.Log.e(com.android.bluetooth.mapclient.MceStateMachine.TAG, ((""Received a notification on message with handle = "" + handle) + "", but it is NOT found in mSentMessageLog! where did it go?"")); } }",a2054b3df346a90968dc2bb73e5d3a1caf0e2c97,"private void notifySentMessageStatus(java.lang.String handle, com.android.bluetooth.mapclient.EventReport.Type status) { if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, (((""got a status for "" + handle) + "" Status = "") + status)); } android.app.PendingIntent intentToSend = null; java.lang.String shortHandle = handle.substring(2); if ((status == (EventReport.Type.SENDING_FAILURE)) || (status == (EventReport.Type.SENDING_SUCCESS))) { intentToSend = mSentReceiptRequested.remove(mSentMessageLog.get(shortHandle)); } else if ((status == (EventReport.Type.DELIVERY_SUCCESS)) || (status == (EventReport.Type.DELIVERY_FAILURE))) { intentToSend = mDeliveryReceiptRequested.remove(mSentMessageLog.get(shortHandle)); } if (intentToSend != null) { try { if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, (""*******Sending "" + intentToSend)); } int result = 0; if ((status == (EventReport.Type.SENDING_FAILURE)) || (status == (EventReport.Type.DELIVERY_FAILURE))) { result = -1; } intentToSend.send(result); } catch (android.app.PendingIntent e) { android.util.Log.w(com.android.bluetooth.mapclient.MceStateMachine.TAG, (""Notification Request Canceled"" + e)); } } else { android.util.Log.e(com.android.bluetooth.mapclient.MceStateMachine.TAG, ((""Received a notification on message with handle = "" + handle) + "", but it is NOT found in mSentMessageLog! where did it go?"")); } }",d27031032a51983460291606552b0d18363ab108,2018-02-06 22:46:11,2
607159,src_com_android_bluetooth_hfp_HeadsetStateMachine.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override protected java.lang.String getLogRecString(android.os.Message msg) { if ((msg.what) == (com.android.bluetooth.hfp.HeadsetStateMachine.STACK_EVENT)) { com.android.bluetooth.hfp.HeadsetStackEvent event = ((com.android.bluetooth.hfp.HeadsetStackEvent) (msg.obj)); return ((com.android.bluetooth.hfp.HeadsetStateMachine.getMessageName(msg.what)) + "": "") + event; } else { return ((((com.android.bluetooth.hfp.HeadsetStateMachine.getMessageName(msg.what)) + "": arg1="") + (msg.arg1)) + "", arg2="") + (msg.arg2); } }",7d3006c21b4826d952fe92006adcf72e7cc656b6,"@java.lang.Override protected java.lang.String getLogRecString(android.os.Message msg) { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append(com.android.bluetooth.hfp.HeadsetStateMachine.getMessageName(msg.what)); builder.append("": ""); builder.append(""arg1="").append(msg.arg1).append("", arg2="").append(msg.arg2).append("", obj=""); if ((msg.obj) instanceof com.android.bluetooth.hfp.HeadsetMessageObject) { com.android.bluetooth.hfp.HeadsetMessageObject object = ((com.android.bluetooth.hfp.HeadsetMessageObject) (msg.obj)); object.buildString(builder); } else { builder.append(msg.obj); } return builder.toString(); }",dac97017cd2448714f5ad3fffda30ae632324667,2018-02-06 23:15:37,6
605238,core_java_android_net_MacAddress.java,"@android.annotation.NonNull public static android.net.MacAddress createRandomUnicastAddress() { return android.net.MacAddress.createRandomUnicastAddress(android.net.MacAddress.BASE_GOOGLE_MAC, new java.util.Random()); }",1609c929358da698a5a1574c178985b6fbf7d360,@android.annotation.NonNull public static android.net.MacAddress createRandomUnicastAddress() { java.security.SecureRandom r = new java.security.SecureRandom(); long addr = (r.nextLong()) & (android.net.MacAddress.VALID_LONG_MASK); addr = addr | (android.net.MacAddress.LOCALLY_ASSIGNED_MASK); addr = addr & (~(android.net.MacAddress.MULTICAST_MASK)); return new android.net.MacAddress(addr); },818273fc03e27e206b9a97e6385fa73dd3e974f7,@android.annotation.NonNull public static android.net.MacAddress createRandomUnicastAddress() { java.security.SecureRandom r = new java.security.SecureRandom(); long addr = (r.nextLong()) & (android.net.MacAddress.VALID_LONG_MASK); addr |= android.net.MacAddress.LOCALLY_ASSIGNED_MASK; addr &= ~(android.net.MacAddress.MULTICAST_MASK); return new android.net.MacAddress(addr); },78c84a2bcbb3e737a6e809ea69e0831a6143b54a,2018-02-07 02:06:06,3
601015,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void registerForEidReady(android.os.Handler h, int what, java.lang.Object obj) { android.os.Registrant r = new android.os.Registrant(h, what, obj); mSimStateLoadedRegistrants.add(r); }",52a39d7f059a14d996827e37a0f21ab8a12caaea,"public void registerForEidReady(android.os.Handler h, int what, java.lang.Object obj) { android.os.Registrant r = new android.os.Registrant(h, what, obj); if ((mEid) != null) { r.notifyRegistrant(new android.os.AsyncResult(null, null, null)); } else { mEidReadyRegistrants.add(r); } }",833708379fdaa8d3591150fd52c0d66eeecb43a5,2018-02-07 02:11:04,11
601015,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onException(java.lang.Throwable e) { com.android.internal.telephony.uicc.euicc.EuiccCard.loge(""Failed loading eid""); }",332455bf5e72d7ce49fa0b90d096cbd3c27aebc1,"@java.lang.Override public void onException(java.lang.Throwable e) { android.telephony.Rlog.e(com.android.internal.telephony.uicc.euicc.EuiccCard.LOG_TAG, ""Failed loading eid"", e); }",68f4519ad2cdf3cb98576d49d4c3d153c4339ebb,2018-02-07 02:11:04,11
601015,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onResult(java.lang.String result) { mEid = result; mSimStateLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); }",686a934b19ce6bd023db7be30f990fc67b6d8e05,"@java.lang.Override public void onResult(java.lang.String result) { mEidReadyRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); }",a726262267e946eb9b9f34e05d6c90de7c37c109,2018-02-07 02:11:04,11
601015,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void unregisterForEidReady(android.os.Handler h) { mSimStateLoadedRegistrants.remove(h); },b2fe6b6c51025990ab28cc22179ea8772c0eb278,public void unregisterForEidReady(android.os.Handler h) { mEidReadyRegistrants.remove(h); },5c1a187ec25614e59c1ad348f6bf7faa305bb97e,2018-02-07 02:11:04,11
601015,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void loadEidAndNotifyRegistrants() { android.os.Handler euiccMainThreadHandler = new android.os.Handler(); com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String> cardCb = new com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String>() { @java.lang.Override public void onResult(java.lang.String result) { mEid = result; mSimStateLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } @java.lang.Override public void onException(java.lang.Throwable e) { com.android.internal.telephony.uicc.euicc.EuiccCard.loge(""Failed loading eid""); } }; getEid(cardCb, euiccMainThreadHandler); }",a5b39f9cb8ef20aad845b978a8c38a5ed0fdd10e,"@com.android.internal.annotations.VisibleForTesting(visibility = VisibleForTesting.Visibility.PRIVATE) protected void loadEidAndNotifyRegistrants() { android.os.Handler euiccMainThreadHandler = new android.os.Handler(); com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String> cardCb = new com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String>() { @java.lang.Override public void onResult(java.lang.String result) { mEidReadyRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } @java.lang.Override public void onException(java.lang.Throwable e) { android.telephony.Rlog.e(com.android.internal.telephony.uicc.euicc.EuiccCard.LOG_TAG, ""Failed loading eid"", e); } }; getEid(cardCb, euiccMainThreadHandler); }",297387b5884df76688d2340c495582c8d20f5834,2018-02-07 02:11:04,11
610588,src_java_com_android_internal_telephony_uicc_AnswerToReset.java,"private boolean parseAtrString(java.lang.String atr) { if (((atr.length()) % 2) != 0) { com.android.internal.telephony.AnswerToReset.loge(((""The length of input ATR string "" + (atr.length())) + "" is not even."")); return false; } if ((atr.length()) < 4) { com.android.internal.telephony.AnswerToReset.loge(""Valid ATR string must at least contains TS and T0.""); return false; } byte[] atrBytes = com.android.internal.telephony.uicc.IccUtils.hexStringToBytes(atr); if (atrBytes == null) { return false; } int index = parseConventionByte(atrBytes, 0); if (index == (-1)) { return false; } index = parseFormatByte(atrBytes, index); if (index == (-1)) { return false; } index = parseInterfaceBytes(atrBytes, index); if (index == (-1)) { return false; } index = parseHistoricalBytes(atrBytes, index); if (index == (-1)) { return false; } index = parseCheckBytes(atrBytes, index); if (index == (-1)) { return false; } if (index != (atrBytes.length)) { com.android.internal.telephony.AnswerToReset.loge(""Unexpected bytes after the check byte.""); return false; } com.android.internal.telephony.AnswerToReset.log((((""Successfully parsed the ATR string "" + atr) + "" into "") + (toString()))); checkIsEuiccSupported(); return true; }",1699ee8836c48fb7ffaadf98484dbc4e8101f0f6,"private boolean parseAtrString(java.lang.String atr) { if (((atr.length()) % 2) != 0) { com.android.internal.telephony.uicc.AnswerToReset.loge(((""The length of input ATR string "" + (atr.length())) + "" is not even."")); return false; } if ((atr.length()) < 4) { com.android.internal.telephony.uicc.AnswerToReset.loge(""Valid ATR string must at least contains TS and T0.""); return false; } byte[] atrBytes = com.android.internal.telephony.uicc.IccUtils.hexStringToBytes(atr); if (atrBytes == null) { return false; } int index = parseConventionByte(atrBytes, 0); if (index == (-1)) { return false; } index = parseFormatByte(atrBytes, index); if (index == (-1)) { return false; } index = parseInterfaceBytes(atrBytes, index); if (index == (-1)) { return false; } index = parseHistoricalBytes(atrBytes, index); if (index == (-1)) { return false; } index = parseCheckBytes(atrBytes, index); if (index == (-1)) { return false; } if (index != (atrBytes.length)) { com.android.internal.telephony.uicc.AnswerToReset.loge(""Unexpected bytes after the check byte.""); return false; } com.android.internal.telephony.uicc.AnswerToReset.log((((""Successfully parsed the ATR string "" + atr) + "" into "") + (toString()))); checkIsEuiccSupported(); return true; }",2d6ffbc65880699ab40b47e46e7a46f233661b98,"private boolean parseAtrString(java.lang.String atr) { if (atr == null) { com.android.internal.telephony.uicc.AnswerToReset.loge(""The input ATR string can not be null""); return false; } if (((atr.length()) % 2) != 0) { com.android.internal.telephony.uicc.AnswerToReset.loge(((""The length of input ATR string "" + (atr.length())) + "" is not even."")); return false; } if ((atr.length()) < 4) { com.android.internal.telephony.uicc.AnswerToReset.loge(""Valid ATR string must at least contains TS and T0.""); return false; } byte[] atrBytes = com.android.internal.telephony.uicc.IccUtils.hexStringToBytes(atr); if (atrBytes == null) { return false; } int index = parseConventionByte(atrBytes, 0); if (index == (-1)) { return false; } index = parseFormatByte(atrBytes, index); if (index == (-1)) { return false; } index = parseInterfaceBytes(atrBytes, index); if (index == (-1)) { return false; } index = parseHistoricalBytes(atrBytes, index); if (index == (-1)) { return false; } index = parseCheckBytes(atrBytes, index); if (index == (-1)) { return false; } if (index != (atrBytes.length)) { com.android.internal.telephony.uicc.AnswerToReset.loge(""Unexpected bytes after the check byte.""); return false; } com.android.internal.telephony.uicc.AnswerToReset.log((((""Successfully parsed the ATR string "" + atr) + "" into "") + (toString()))); checkIsEuiccSupported(); return true; }",8dfd93c017522821fea0fe22351da4cef8b6cbf6,2018-02-07 02:48:30,3
577903,src_com_android_server_telecom_ConnectionServiceWrapper.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void deflect(com.android.server.telecom.Call call, java.lang.String number) { final java.lang.String callId = mCallIdMapper.getCallId(call); if ((callId != null) && (isServiceValid(""deflect""))) { try { logOutgoing(""deflect %s %s"", callId, number); mServiceInterface.deflect(callId, number, android.telecom.Log.getExternalSession()); } catch (android.os.RemoteException e) { } } }",282e152f1948a9d9b617384981d543aae1aa7882,"void deflect(com.android.server.telecom.Call call, android.net.Uri address) { final java.lang.String callId = mCallIdMapper.getCallId(call); if ((callId != null) && (isServiceValid(""deflect""))) { try { logOutgoing(""deflect %s"", callId); mServiceInterface.deflect(callId, address, android.telecom.Log.getExternalSession()); } catch (android.os.RemoteException e) { } } }",caed2e2d3faf9e09df7f42fdff277cf1c15dbd65,2018-02-07 22:25:02,7
577903,src_com_android_server_telecom_InCallAdapter.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void deflectCall(java.lang.String callId, java.lang.String deflectNumber) { try { android.telecom.Log.startSession(LogUtils.Sessions.ICA_DEFLECT_CALL, mOwnerComponentName); long token = android.os.Binder.clearCallingIdentity(); try { synchronized(mLock) { android.telecom.Log.i(this, ""deflectCall(%s,%s)"", callId, deflectNumber); com.android.server.telecom.Call call = mCallIdMapper.getCall(callId); if (call != null) { mCallsManager.deflectCall(call, deflectNumber); } else { android.telecom.Log.w(this, ""deflectCall, unknown call id: %s"", callId); } } } finally { android.os.Binder.restoreCallingIdentity(token); } } finally { android.telecom.Log.endSession(); } }",8200ec73b5908369156fa8da506b4b7590c6cdb9,"@java.lang.Override public void deflectCall(java.lang.String callId, android.net.Uri address) { try { android.telecom.Log.startSession(LogUtils.Sessions.ICA_DEFLECT_CALL, mOwnerComponentName); long token = android.os.Binder.clearCallingIdentity(); try { synchronized(mLock) { android.telecom.Log.i(this, ""deflectCall - %s, %s "", callId, android.telecom.Log.pii(address)); com.android.server.telecom.Call call = mCallIdMapper.getCall(callId); if (call != null) { mCallsManager.deflectCall(call, address); } else { android.telecom.Log.w(this, ""deflectCall, unknown call id: %s"", callId); } } } finally { android.os.Binder.restoreCallingIdentity(token); } } finally { android.telecom.Log.endSession(); } }",1ffc6126a55ba314c4eea3da35fdc2c56e83c4de,2018-02-07 22:25:02,7
577903,src_com_android_server_telecom_Call.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.android.internal.annotations.VisibleForTesting public void deflect(java.lang.String number) { if (isRinging(""deflect"")) { if ((mConnectionService) != null) { mConnectionService.deflect(this, number); } else { android.telecom.Log.e(this, new java.lang.NullPointerException(), ""deflect call failed due to null CS callId=%s"", getId()); } android.telecom.Log.addEvent(this, LogUtils.Events.REQUEST_DEFLECT); } }",746b72dc4006051b944f4e8b6e6dc39e27d67409,"@com.android.internal.annotations.VisibleForTesting public void deflect(android.net.Uri address) { if (isRinging(""deflect"")) { mVideoStateHistory |= mVideoState; if ((mConnectionService) != null) { mConnectionService.deflect(this, address); } else { android.telecom.Log.e(this, new java.lang.NullPointerException(), ""deflect call failed due to null CS callId=%s"", getId()); } android.telecom.Log.addEvent(this, LogUtils.Events.REQUEST_DEFLECT, android.telecom.Log.pii(address)); } }",c734eda9cafd3b9e3ba6f07122db81a8ae9cc8b7,2018-02-07 22:25:02,7
577942,telecomm_java_android_telecom_InCallAdapter.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void deflectCall(java.lang.String callId, java.lang.String deflectNumber) { try { mAdapter.deflectCall(callId, deflectNumber); } catch (android.os.RemoteException e) { } }",02a9ad6c00bd901ccaad8fb31ade2753cd218ad6,"public void deflectCall(java.lang.String callId, android.net.Uri address) { try { mAdapter.deflectCall(callId, address); } catch (android.os.RemoteException e) { } }",f94fb7b04ce821327dc8ec5589e9a1a8b86af6ff,2018-02-07 22:25:02,7
577903,tests_src_com_android_server_telecom_tests_ConnectionServiceFixture.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void deflect(java.lang.String callId, java.lang.String number, android.telecom.Logging.Session.Info info) throws android.os.RemoteException { }",98f53516ecf793216c5fc0ce7e0f1e27b4ed3e2e,"@java.lang.Override public void deflect(java.lang.String callId, android.net.Uri address, android.telecom.Logging.Session.Info info) throws android.os.RemoteException { }",92b7a20bd418e26ae44ebaf168df2afed670b74e,2018-02-07 22:25:02,7
577903,src_com_android_server_telecom_CallsManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.android.internal.annotations.VisibleForTesting public void deflectCall(com.android.server.telecom.Call call, java.lang.String number) { if (!(mCalls.contains(call))) { android.telecom.Log.i(this, ""Request to deflect a non-existent call %s"", call); } else { call.deflect(number); } }",6a223c1701fd7c79f10ea7d458fccb33b190d91e,"@com.android.internal.annotations.VisibleForTesting public void deflectCall(com.android.server.telecom.Call call, android.net.Uri address) { if (!(mCalls.contains(call))) { android.telecom.Log.i(this, ""Request to deflect a non-existent call %s"", call); } else { call.deflect(address); } }",a6956781da7dd1677fc074278854904744578dfc,2018-02-07 22:25:02,7
577962,src_com_android_services_telephony_TelephonyConnection.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onDeflect(java.lang.String number) { com.android.services.telephony.Log.v(this, ""onDeflect""); if (((mOriginalConnection) != null) && (isValidRingingCall())) { try { mOriginalConnection.deflect(number); } catch (com.android.internal.telephony.CallStateException e) { com.android.services.telephony.Log.e(this, e, ""Failed to deflect call.""); } } }",1f9282343c183542e2b41f3e3d284ebf682fbf5b,"@java.lang.Override public void onDeflect(android.net.Uri address) { com.android.services.telephony.Log.v(this, ""onDeflect""); if (((mOriginalConnection) != null) && (isValidRingingCall())) { if (address == null) { com.android.services.telephony.Log.w(this, ""call deflect address uri is null""); return; } java.lang.String scheme = address.getScheme(); java.lang.String deflectNumber = """"; java.lang.String uriString = address.getSchemeSpecificPart(); if (!(PhoneAccount.SCHEME_VOICEMAIL.equals(scheme))) { if (!(PhoneAccount.SCHEME_TEL.equals(scheme))) { com.android.services.telephony.Log.w(this, (""onDeflect, address scheme is not of type tel instead: "" + scheme)); return; } if (android.telephony.PhoneNumberUtils.isUriNumber(uriString)) { com.android.services.telephony.Log.w(this, ""Invalid deflect address. Not a legal PSTN number.""); return; } deflectNumber = android.telephony.PhoneNumberUtils.convertAndStrip(uriString); if (android.text.TextUtils.isEmpty(deflectNumber)) { com.android.services.telephony.Log.w(this, ""Empty deflect number obtained from address uri""); return; } } else { com.android.services.telephony.Log.w(this, ""Cannot deflect to voicemail uri""); return; } try { mOriginalConnection.deflect(deflectNumber); } catch (com.android.internal.telephony.CallStateException e) { com.android.services.telephony.Log.e(this, e, ""Failed to deflect call.""); } } }",3f8ac68c83b8f3c67ad6edd6532de75a310bf980,2018-02-07 22:25:02,6
577942,telecomm_java_android_telecom_ConnectionService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void deflect(java.lang.String callId, java.lang.String number) { android.telecom.Log.d(this, ""deflect %s - %s"", callId, number); findConnectionForAction(callId, ""deflect"").onDeflect(number); }",3056d562e0751d29870a0e6926f0b8b7bd09477c,"private void deflect(java.lang.String callId, android.net.Uri address) { android.telecom.Log.d(this, ""deflect %s"", callId); findConnectionForAction(callId, ""deflect"").onDeflect(address); }",9d79fdc45f9391abde9dbf1c7ebe79616397b8df,2018-02-07 22:25:02,7
577942,telecomm_java_android_telecom_Connection.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void onDeflect(java.lang.String number) { },84b300b965e665eb61d1eb8ae9665d6020a0fc05,public void onDeflect(android.net.Uri address) { },3d6cf5b8dd835e07907aa5c86bd82b11aa67e5b9,2018-02-07 22:25:02,7
577942,telephony_java_android_telephony_ims_stub_ImsCallSessionImplBase.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void deflect(java.lang.String deflectNumber) throws android.os.RemoteException { },40e5a4330ef48e6259f2087b3acb488fdd755af2,public void deflect(java.lang.String deflectNumber) { },2c68676ca5063929c2b1f4c4d597fb06f3b88aa8,2018-02-07 22:25:02,7
577942,telecomm_java_android_telecom_Call.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void deflect(java.lang.String number) { mInCallAdapter.deflectCall(mTelecomCallId, number); }",e44286d4151ad279697e48bdb48fdee96de7f919,"public void deflect(android.net.Uri address) { mInCallAdapter.deflectCall(mTelecomCallId, address); }",87ff287320b3b4d3ef762438af0a1a4a9c73c3c5,2018-02-07 22:25:02,7
577963,src_java_com_android_ims_ImsCall.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void deflect(java.lang.String number) throws com.android.ims.ImsException { logi((((""deflect :: session="" + (mSession)) + "", number="") + number)); synchronized(mLockObj) { if ((mSession) == null) { throw new com.android.ims.ImsException(""No call to deflect"", ImsReasonInfo.CODE_LOCAL_CALL_TERMINATED); } try { mSession.deflect(number); } catch (java.lang.Throwable t) { loge(""deflect :: "", t); throw new com.android.ims.ImsException(""deflect()"", t, 0); } } }",8654aaf1ee4bcea9c434be253e78e47b1377305e,"public void deflect(java.lang.String number) throws com.android.ims.ImsException { logi((((""deflect :: session="" + (mSession)) + "", number="") + (android.telephony.Rlog.pii(com.android.ims.ImsCall.TAG, number)))); synchronized(mLockObj) { if ((mSession) == null) { throw new com.android.ims.ImsException(""No call to deflect"", android.telephony.ims.ImsReasonInfo.CODE_LOCAL_CALL_TERMINATED); } try { mSession.deflect(number); } catch (java.lang.Throwable t) { loge(""deflect :: "", t); throw new com.android.ims.ImsException(""deflect()"", t, 0); } } }",0bbc4de57e0cc41d38f75bd34427a340fd91e759,2018-02-07 22:25:02,4
577942,telecomm_java_android_telecom_ConnectionService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void deflect(java.lang.String callId, java.lang.String number, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startSession(sessionInfo, android.telecom.ConnectionService.SESSION_DEFLECT); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = number; args.arg3 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_DEFLECT, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }",8d142c7a70c5579cab15075925aa08e58cd48270,"@java.lang.Override public void deflect(java.lang.String callId, android.net.Uri address, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startSession(sessionInfo, android.telecom.ConnectionService.SESSION_DEFLECT); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = address; args.arg3 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_DEFLECT, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }",66f71717d5d6e83bb45719f2e619be0d6d10f715,2018-02-07 22:25:02,7
608852,src_com_android_se_Channel.java,public byte[] getSelectResponse() { return mSelectResponse; },f247408404bd6929be09421a24717ad5ff811fe4,public byte[] getSelectResponse() { return (mSelectResponse.length) == 0 ? null : mSelectResponse; },54a5f9f0e242baad652109a1c26f1ca02c85ef28,public byte[] getSelectResponse() { return mHasSelectedAid ? mSelectResponse : null; },3252a10872cf1efa66acbce85200c5b719d11253,2018-02-08 00:16:36,5
608852,src_com_android_se_Terminal.java,public void selectDefaultApplication() { try { select(null); } catch (java.util.NoSuchElementException e) { if ((getAccessControlEnforcer()) != null) { try { select(mAccessControlEnforcer.getDefaultAccessControlAid()); } catch (java.lang.Exception ignore) { } } } catch (android.os.RemoteException ignore) { } synchronized(mLock) { mDefaultApplicationSelectedOnBasicChannel = true; } },c35563956ed9b48b38e3c56dfe616d571040c56c,public void selectDefaultApplication() { try { select(null); synchronized(mLock) { mDefaultApplicationSelectedOnBasicChannel = true; } } catch (java.util.NoSuchElementException e) { if ((getAccessControlEnforcer()) != null) { try { select(mAccessControlEnforcer.getDefaultAccessControlAid()); synchronized(mLock) { mDefaultApplicationSelectedOnBasicChannel = true; } } catch (java.lang.Exception ignore) { } } } catch (android.os.RemoteException ignore) { } },ac31a1e81965e501255a3d2fbfad8c076d967a06,public void selectDefaultApplication() { try { select(null); } catch (java.util.NoSuchElementException e) { if ((getAccessControlEnforcer()) != null) { try { select(mAccessControlEnforcer.getDefaultAccessControlAid()); } catch (java.lang.Exception ignore) { } } } catch (android.os.RemoteException ignore) { } },9b9975ba88ed8e646c7c1648e10a84189166e0d3,2018-02-08 00:16:36,5
556951,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerTransitionSelectionTests.java,"private void testTransitionSelection(boolean testOpen, boolean testNewTask, boolean bottomWallpaper, boolean topWallpaper, boolean topTranslucent, boolean testSlowStop, java.lang.String expectedTransit) throws java.lang.Exception { java.lang.String bottomStartCmd = getAmStartCmd(android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME); if (bottomWallpaper) { bottomStartCmd += "" --ez USE_WALLPAPER true""; } if (testSlowStop) { bottomStartCmd += "" --ei STOP_DELAY 3000""; } executeShellCommand(bottomStartCmd); final java.lang.String topActivityName = (topTranslucent) ? android.server.cts.ActivityManagerTransitionSelectionTests.TRANSLUCENT_TOP_ACTIVITY_NAME : android.server.cts.ActivityManagerTransitionSelectionTests.TOP_ACTIVITY_NAME; final java.lang.String[] bottomActivityArray = new java.lang.String[]{ android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME }; final java.lang.String[] topActivityArray = new java.lang.String[]{ topActivityName }; mAmWmState.computeState(mDevice, bottomActivityArray); java.lang.String topStartCmd = getAmStartCmd(topActivityName); if (testNewTask) { topStartCmd += "" -f 0x18000000""; } if (topWallpaper) { topStartCmd += "" --ez USE_WALLPAPER true""; } if (!testOpen) { topStartCmd += "" --ei FINISH_DELAY 1000""; } executeShellCommand(topStartCmd); java.lang.Thread.sleep(5000); if (testOpen) { mAmWmState.computeState(mDevice, topActivityArray); } else { mAmWmState.computeState(mDevice, bottomActivityArray); } assertEquals(""Picked wrong transition"", expectedTransit, mAmWmState.getWmState().getLastTransition()); }",a985fde551cb7ba9cecc676c93ea586bfe71eff5,"private void testTransitionSelection(boolean testOpen, boolean testNewTask, boolean bottomWallpaper, boolean topWallpaper, boolean topTranslucent, boolean testSlowStop, java.lang.String expectedTransit) throws java.lang.Exception { if (isVrHeadset()) { return; } java.lang.String bottomStartCmd = getAmStartCmd(android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME); if (bottomWallpaper) { bottomStartCmd += "" --ez USE_WALLPAPER true""; } if (testSlowStop) { bottomStartCmd += "" --ei STOP_DELAY 3000""; } executeShellCommand(bottomStartCmd); final java.lang.String topActivityName = (topTranslucent) ? android.server.cts.ActivityManagerTransitionSelectionTests.TRANSLUCENT_TOP_ACTIVITY_NAME : android.server.cts.ActivityManagerTransitionSelectionTests.TOP_ACTIVITY_NAME; final java.lang.String[] bottomActivityArray = new java.lang.String[]{ android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME }; final java.lang.String[] topActivityArray = new java.lang.String[]{ topActivityName }; mAmWmState.computeState(mDevice, bottomActivityArray); java.lang.String topStartCmd = getAmStartCmd(topActivityName); if (testNewTask) { topStartCmd += "" -f 0x18000000""; } if (topWallpaper) { topStartCmd += "" --ez USE_WALLPAPER true""; } if (!testOpen) { topStartCmd += "" --ei FINISH_DELAY 1000""; } executeShellCommand(topStartCmd); java.lang.Thread.sleep(5000); if (testOpen) { mAmWmState.computeState(mDevice, topActivityArray); } else { mAmWmState.computeState(mDevice, bottomActivityArray); } assertEquals(""Picked wrong transition"", expectedTransit, mAmWmState.getWmState().getLastTransition()); }",5d0302a7d2706586e7e30ea2ec0412a45ab536aa,"private void testTransitionSelection(boolean testOpen, boolean testNewTask, boolean bottomWallpaper, boolean topWallpaper, boolean topTranslucent, boolean testSlowStop, java.lang.String expectedTransit) throws java.lang.Exception { if ((isUiModeLockedToVrHeadset()) && (bottomWallpaper || topWallpaper)) { return; } java.lang.String bottomStartCmd = getAmStartCmd(android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME); if (bottomWallpaper) { bottomStartCmd += "" --ez USE_WALLPAPER true""; } if (testSlowStop) { bottomStartCmd += "" --ei STOP_DELAY 3000""; } executeShellCommand(bottomStartCmd); final java.lang.String topActivityName = (topTranslucent) ? android.server.cts.ActivityManagerTransitionSelectionTests.TRANSLUCENT_TOP_ACTIVITY_NAME : android.server.cts.ActivityManagerTransitionSelectionTests.TOP_ACTIVITY_NAME; final java.lang.String[] bottomActivityArray = new java.lang.String[]{ android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME }; final java.lang.String[] topActivityArray = new java.lang.String[]{ topActivityName }; mAmWmState.computeState(mDevice, bottomActivityArray); java.lang.String topStartCmd = getAmStartCmd(topActivityName); if (testNewTask) { topStartCmd += "" -f 0x18000000""; } if (topWallpaper) { topStartCmd += "" --ez USE_WALLPAPER true""; } if (!testOpen) { topStartCmd += "" --ei FINISH_DELAY 1000""; } executeShellCommand(topStartCmd); java.lang.Thread.sleep(5000); if (testOpen) { mAmWmState.computeState(mDevice, topActivityArray); } else { mAmWmState.computeState(mDevice, bottomActivityArray); } assertEquals(""Picked wrong transition"", expectedTransit, mAmWmState.getWmState().getLastTransition()); }",2e302a9906c5850d35bb6e0a3dc8b2775f1bae66,2018-02-08 00:30:52,9
602076,tests_app_src_android_app_cts_ApplicationTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void toggleFontScale() throws java.lang.Throwable { com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.app.cts.ApplicationTest.ERASE_FONT_SCALE_CMD); getInstrumentation().waitForIdleSync(); com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.app.cts.ApplicationTest.PUT_FONT_SCALE_CMD); getInstrumentation().waitForIdleSync(); com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.app.cts.ApplicationTest.ERASE_FONT_SCALE_CMD); getInstrumentation().waitForIdleSync(); }",3f8d638d76ffd41eb7ebdad696ed81a0a5035809,"private void toggleFontScale() throws java.lang.Throwable { com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.app.cts.ApplicationTest.ERASE_FONT_SCALE_CMD); getInstrumentation().waitForIdleSync(); com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.app.cts.ApplicationTest.PUT_FONT_SCALE_CMD); getInstrumentation().waitForIdleSync(); com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.app.cts.ApplicationTest.ERASE_FONT_SCALE_CMD); }",c7f42c27d503a2aae2e70708e00fc27161775395,2018-02-08 00:34:52,5
602076,tests_app_src_android_app_cts_ApplicationTest.java,"public void testApplication() throws java.lang.Throwable { final android.app.Instrumentation instrumentation = getInstrumentation(); final android.content.Context targetContext = instrumentation.getTargetContext(); final android.content.Intent intent = new android.content.Intent(targetContext, android.app.stubs.MockApplicationActivity.class); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); final android.app.Activity activity = instrumentation.startActivitySync(intent); final android.app.stubs.MockApplication mockApp = ((android.app.stubs.MockApplication) (activity.getApplication())); assertTrue(mockApp.isConstructorCalled); assertTrue(mockApp.isOnCreateCalled); final android.content.pm.PackageManager pm = targetContext.getPackageManager(); if (!((pm.hasSystemFeature(PackageManager.FEATURE_SCREEN_LANDSCAPE)) && (pm.hasSystemFeature(PackageManager.FEATURE_SCREEN_PORTRAIT)))) { return; } runTestOnUiThread(new java.lang.Runnable() { public void run() { android.app.stubs.OrientationTestUtils.toggleOrientation(activity); } }); instrumentation.waitForIdleSync(); final boolean isInMultiwindowMode = activity.isInMultiWindowMode(); if (activity.isInMultiWindowMode()) { assertFalse((""Orientation change should not trigger global configuration change when "" + "" in multi-window mode.""), mockApp.isOnConfigurationChangedCalled); } else { assertTrue(mockApp.isOnConfigurationChangedCalled); } }",ac42352fbc2469f355a942c1419f20328f4c32b1,"public void testApplication() throws java.lang.Throwable { final android.app.Instrumentation instrumentation = getInstrumentation(); final android.content.Context targetContext = instrumentation.getTargetContext(); final android.content.Intent intent = new android.content.Intent(targetContext, android.app.stubs.MockApplicationActivity.class); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); final android.app.Activity activity = instrumentation.startActivitySync(intent); final android.app.stubs.MockApplication mockApp = ((android.app.stubs.MockApplication) (activity.getApplication())); assertTrue(mockApp.isConstructorCalled); assertTrue(mockApp.isOnCreateCalled); toggleFontScale(); assertTrue(mockApp.isOnConfigurationChangedCalled); }",b2686a0205b85807c11eedc0d9d0efb1b58098a6,"public void testApplication() throws java.lang.Throwable { final android.app.Instrumentation instrumentation = getInstrumentation(); final android.content.Context targetContext = instrumentation.getTargetContext(); final android.content.Intent intent = new android.content.Intent(targetContext, android.app.stubs.MockApplicationActivity.class); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); final android.app.Activity activity = instrumentation.startActivitySync(intent); final android.app.stubs.MockApplication mockApp = ((android.app.stubs.MockApplication) (activity.getApplication())); assertTrue(mockApp.isConstructorCalled); assertTrue(mockApp.isOnCreateCalled); toggleFontScale(); assertTrue(waitForOnConfigurationChange(mockApp)); }",242c988e0b64f74cfe623df1e1ec6bdcb1b9e68f,2018-02-08 00:34:52,5
612326,services_tests_servicestests_src_com_android_server_WatchdogDiagnosticsTest.java,,,"private static java.lang.String filterHashes(java.lang.String t) { for (; ;) { int index = t.indexOf(""<0x""); if (index < 0) { break; } int endIndex = t.indexOf("">"", index); if (endIndex < 0) { break; } t = ((t.substring(0, (index + 1))) + ""HASH"") + (t.substring(endIndex)); } return t; }",dc7f20d385808256366a5af31230221f8d321546,"private static java.lang.String filterHashes(java.lang.String t) { return t.replaceAll(""<0x[0-9a-f]{8}>"", ""<HASH>""); }",f00b43e6bc35277f2f5de2b89562a4a34471bbed,2018-02-09 19:24:03,2
604366,tests_src_com_android_services_telephony_TelephonyConnectionServiceTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSuppServiceNotification() { com.android.services.telephony.TestTelephonyConnection c = new com.android.services.telephony.TestTelephonyConnection(); com.android.internal.telephony.Phone phone = c.getPhone(); c.setOriginalConnection(c.getOriginalConnection()); org.mockito.ArgumentCaptor<android.os.Handler> handlerCaptor = org.mockito.ArgumentCaptor.forClass(android.os.Handler.class); org.mockito.ArgumentCaptor<java.lang.Integer> messageCaptor = org.mockito.ArgumentCaptor.forClass(java.lang.Integer.class); verify(phone).registerForSuppServiceNotification(handlerCaptor.capture(), messageCaptor.capture(), any()); android.os.Handler handler = handlerCaptor.getValue(); int message = messageCaptor.getValue(); android.os.AsyncResult result = getSuppServiceNotification(SuppServiceNotification.NOTIFICATION_TYPE_MO, SuppServiceNotification.MO_CODE_CALL_FORWARDED); handler.obtainMessage(message, result).sendToTarget(); waitForHandlerAction(handler, com.android.services.telephony.TelephonyConnectionServiceTest.TIMEOUT_MS); junit.framework.Assert.assertEquals(c.getLastConnectionEvent(), TelephonyManager.EVENT_CALL_FORWARDED); result = getSuppServiceNotification(SuppServiceNotification.NOTIFICATION_TYPE_MO, SuppServiceNotification.MO_CODE_CALL_IS_WAITING); handler.obtainMessage(message, result).sendToTarget(); waitForHandlerAction(handler, com.android.services.telephony.TelephonyConnectionServiceTest.TIMEOUT_MS); junit.framework.Assert.assertEquals(c.getLastConnectionEvent(), TelephonyManager.EVENT_CALL_IS_WAITING); }",528c9e84708e16041a069b32a43fe207b451e1d6,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSuppServiceNotification() { com.android.services.telephony.TestTelephonyConnection c = new com.android.services.telephony.TestTelephonyConnection(); com.android.internal.telephony.Phone phone = c.getPhone(); c.setOriginalConnection(c.getOriginalConnection()); org.mockito.ArgumentCaptor<android.os.Handler> handlerCaptor = org.mockito.ArgumentCaptor.forClass(android.os.Handler.class); org.mockito.ArgumentCaptor<java.lang.Integer> messageCaptor = org.mockito.ArgumentCaptor.forClass(java.lang.Integer.class); verify(phone).registerForSuppServiceNotification(handlerCaptor.capture(), messageCaptor.capture(), any()); android.os.Handler handler = handlerCaptor.getValue(); int message = messageCaptor.getValue(); android.os.AsyncResult result = getSuppServiceNotification(SuppServiceNotification.NOTIFICATION_TYPE_CODE_1, SuppServiceNotification.CODE_1_CALL_FORWARDED); handler.obtainMessage(message, result).sendToTarget(); waitForHandlerAction(handler, com.android.services.telephony.TelephonyConnectionServiceTest.TIMEOUT_MS); junit.framework.Assert.assertTrue(c.getLastConnectionEvents().contains(TelephonyManager.EVENT_CALL_FORWARDED)); result = getSuppServiceNotification(SuppServiceNotification.NOTIFICATION_TYPE_CODE_1, SuppServiceNotification.CODE_1_CALL_IS_WAITING); handler.obtainMessage(message, result).sendToTarget(); waitForHandlerAction(handler, com.android.services.telephony.TelephonyConnectionServiceTest.TIMEOUT_MS); junit.framework.Assert.assertEquals(c.getLastConnectionEvents().get(2), TelephonyManager.EVENT_SUPPLEMENTARY_SERVICE_NOTIFICATION); android.os.Bundle extras = c.getLastConnectionEventExtras().get(2); junit.framework.Assert.assertEquals(SuppServiceNotification.NOTIFICATION_TYPE_CODE_1, extras.getInt(TelephonyManager.EXTRA_NOTIFICATION_TYPE)); junit.framework.Assert.assertEquals(SuppServiceNotification.CODE_1_CALL_IS_WAITING, extras.getInt(TelephonyManager.EXTRA_NOTIFICATION_CODE)); }",3d1989bdd89b3f6ec63e63794e369f53a706e19a,2018-02-09 22:10:49,4
604366,src_com_android_services_telephony_TelephonyConnection.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void handleSuppServiceNotification(com.android.internal.telephony.gsm.SuppServiceNotification ssn) { com.android.services.telephony.Log.i(this, ""handleSuppServiceNotification: type=%d, code=%d"", ssn.notificationType, ssn.code); if ((ssn.notificationType) == (com.android.internal.telephony.gsm.SuppServiceNotification.NOTIFICATION_TYPE_MO)) { switch (ssn.code) { case com.android.internal.telephony.gsm.SuppServiceNotification.MO_CODE_CALL_FORWARDED : sendConnectionEvent(TelephonyManager.EVENT_CALL_FORWARDED, null); break; case com.android.internal.telephony.gsm.SuppServiceNotification.MO_CODE_CALL_IS_WAITING : sendConnectionEvent(TelephonyManager.EVENT_CALL_IS_WAITING, null); break; } } else if ((ssn.type) == (com.android.internal.telephony.gsm.SuppServiceNotification.NOTIFICATION_TYPE_MT)) { } }",a0771e2a72eca9d9f8051a855031b6b1e7a18a83,"private void handleSuppServiceNotification(com.android.internal.telephony.gsm.SuppServiceNotification ssn) { com.android.services.telephony.Log.i(this, ""handleSuppServiceNotification: type=%d, code=%d"", ssn.notificationType, ssn.code); if (((ssn.notificationType) == (com.android.internal.telephony.gsm.SuppServiceNotification.NOTIFICATION_TYPE_CODE_1)) && ((ssn.code) == (com.android.internal.telephony.gsm.SuppServiceNotification.CODE_1_CALL_FORWARDED))) { sendConnectionEvent(TelephonyManager.EVENT_CALL_FORWARDED, null); } sendSuppServiceNotificationEvent(ssn.notificationType, ssn.code); }",e5884addccfc106e10587557a5dc3181a0288ee6,2018-02-09 22:10:49,4
604366,tests_src_com_android_services_telephony_TestTelephonyConnection.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.lang.String getLastConnectionEvent() { return mLastConnectionEvent; },11e71a21bb9d5acc7bdde47f95f863ccd73e92f8,public java.util.List<java.lang.String> getLastConnectionEvents() { return mLastConnectionEvents; },510e57d76e7e144c0fc5fa7d3dafc4875c49361b,2018-02-09 22:10:49,4
604366,tests_src_com_android_services_telephony_TestTelephonyConnection.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void sendConnectionEvent(java.lang.String event, android.os.Bundle extras) { mLastConnectionEvent = event; }",807656d937f402581cb61e00b321d3411c60352a,"@java.lang.Override public void sendConnectionEvent(java.lang.String event, android.os.Bundle extras) { mLastConnectionEvents.add(event); mLastConnectionEventExtras.add(extras); }",33740b4e612a7db46979e489b97944ea3b77a018,2018-02-09 22:10:49,4
613391,jdwp_src_test_java_org_apache_harmony_jpda_tests_share_GcMarker.java,public void waitForGc() { allowCollection(); do { try { java.lang.Thread.sleep(10); } catch (java.lang.Exception e) { } java.lang.System.gc(); java.lang.System.runFinalization(); java.lang.System.gc(); } while (isLive() ); reset(); },cd45cb1f54c9e66aced99b7bdd9d286521c23ce7,public void waitForGc() { allowCollection(); do { try { java.lang.Thread.sleep(10); } catch (java.lang.Exception e) { } java.lang.System.gc(); java.lang.System.runFinalization(); java.lang.System.gc(); } while (isLive() ); try { mQueue.remove(); } catch (java.lang.Exception e) { } reset(); },545d2bc6882726ab0419ef113bf6eb5394684e3a,public void waitForGc() { java.lang.Runtime.getRuntime().gc(); allowCollection(); java.lang.Runtime.getRuntime().gc(); do { java.lang.System.runFinalization(); java.lang.Runtime.getRuntime().gc(); try { java.lang.Thread.sleep(10); } catch (java.lang.Exception e) { } } while (isLive() ); try { mQueue.remove(); } catch (java.lang.Exception e) { } markerRef = null; reset(); },780f99a0448b2620309ad4108c454d672ba074ca,2018-02-09 23:02:00,6
610628,ojluni_src_main_java_java_net_NetworkInterface.java,public boolean isUp() throws java.net.SocketException { return ((getFlags()) & (IFF_UP)) != 0; },8092e0f013398e368a52b02da8dbb5d4e63e1abf,public boolean isUp() throws java.net.SocketException { return ((getFlags()) & ((IFF_UP) | (IFF_RUNNING))) != 0; },9871e2003d288fef587506ac2f3cd9a4f88d0ce9,public boolean isUp() throws java.net.SocketException { final int mask = (IFF_UP) | (IFF_RUNNING); return ((getFlags()) & mask) == mask; },c1a3bee485157e5df4aefb8770670e7a6aadc158,2018-02-12 11:32:44,6
429724,src_java_com_android_internal_telephony_ServiceStateTracker.java,"protected void setOperatorIdd(java.lang.String operatorNumeric) { java.lang.String idd = mHbpcdUtils.getIddByMcc(java.lang.Integer.parseInt(operatorNumeric.substring(0, 3))); if ((idd != null) && (!(idd.isEmpty()))) { mPhone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_IDP_STRING, idd); } else { mPhone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_IDP_STRING, ""+""); } }",513369ab0e16c331cebd448fe5e72a923571e644,"protected void setOperatorIdd(java.lang.String operatorNumeric) { java.lang.String idd = mHbpcdUtils.getIddByMcc(java.lang.Integer.parseInt(operatorNumeric.substring(0, 3))); if ((idd != null) && (!(idd.isEmpty()))) { android.os.SystemProperties.set(TelephonyProperties.PROPERTY_OPERATOR_IDP_STRING, idd); } else { android.os.SystemProperties.set(TelephonyProperties.PROPERTY_OPERATOR_IDP_STRING, ""+""); } }",592d37e61e3f99cfc5763949ed75c26fbab53a3c,"protected void setOperatorIdd(java.lang.String operatorNumeric) { java.lang.String idd = mHbpcdUtils.getIddByMcc(java.lang.Integer.parseInt(operatorNumeric.substring(0, 3))); if ((idd != null) && (!(idd.isEmpty()))) { mPhone.setGlobalSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_IDP_STRING, idd); } else { mPhone.setGlobalSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_IDP_STRING, ""+""); } }",130769c756114dc755e18ca011771aaeac3a2ba1,2018-02-12 18:17:23,5
614425,src_com_android_bluetooth_a2dp_A2dpStateMachine.java,"static com.android.bluetooth.a2dp.A2dpStateMachine make(android.bluetooth.BluetoothDevice device, com.android.bluetooth.a2dp.A2dpService svc, android.content.Context context, com.android.bluetooth.a2dp.A2dpNativeInterface a2dpNativeInterface, android.os.Looper looper) { if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""make for device "" + device)); } com.android.bluetooth.a2dp.A2dpStateMachine a2dpSm = new com.android.bluetooth.a2dp.A2dpStateMachine(device, svc, context, a2dpNativeInterface, looper); a2dpSm.start(); return a2dpSm; }",d1c3bdfe6dab4813c4ada5e98ffd7c7ca097f1f5,"static com.android.bluetooth.a2dp.A2dpStateMachine make(android.bluetooth.BluetoothDevice device, com.android.bluetooth.a2dp.A2dpService a2dpService, android.content.Context context, com.android.bluetooth.a2dp.A2dpNativeInterface a2dpNativeInterface, android.os.Looper looper) { if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""make for device "" + device)); } com.android.bluetooth.a2dp.A2dpStateMachine a2dpSm = new com.android.bluetooth.a2dp.A2dpStateMachine(device, a2dpService, context, a2dpNativeInterface, looper); a2dpSm.start(); return a2dpSm; }",5a694f9b5d5c20792ff7e149e7e97f50d38973c0,"static com.android.bluetooth.a2dp.A2dpStateMachine make(android.bluetooth.BluetoothDevice device, com.android.bluetooth.a2dp.A2dpService a2dpService, com.android.bluetooth.a2dp.A2dpNativeInterface a2dpNativeInterface, android.os.Looper looper) { if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""make for device "" + device)); } com.android.bluetooth.a2dp.A2dpStateMachine a2dpSm = new com.android.bluetooth.a2dp.A2dpStateMachine(device, a2dpService, a2dpNativeInterface, looper); a2dpSm.start(); return a2dpSm; }",c7ad16dbdfd17810654c508ed8de654d5c6b9113,2018-02-13 06:19:04,4
611608,hostsidetests_devicepolicy_app_DeviceAndProfileOwner_src_com_android_cts_deviceandprofileowner_AlwaysOnVpnMultiStageTest.java,"public void testNetworkBlocked() throws java.lang.Exception { assertEquals(com.android.cts.deviceandprofileowner.VPN_PACKAGE, mDevicePolicyManager.getAlwaysOnVpnPackage(com.android.cts.deviceandprofileowner.ADMIN_RECEIVER_COMPONENT)); assertFalse(com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.isNetworkVpn(mContext)); try { com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.tryPosixConnect(com.android.cts.deviceandprofileowner.TEST_ADDRESS); fail(""sendIcmpMessage doesn't throw Exception during network lockdown""); } catch (android.system.ErrnoException e) { assertTrue((((e.errno) == (android.system.OsConstants.ENETUNREACH)) || ((e.errno) == (android.system.OsConstants.EACCES)))); } }",d09e879e53f5e91a05af5ff5c328ce62728f07fd,"public void testNetworkBlocked() throws java.lang.Exception { assertEquals(com.android.cts.deviceandprofileowner.VPN_PACKAGE, mDevicePolicyManager.getAlwaysOnVpnPackage(com.android.cts.deviceandprofileowner.ADMIN_RECEIVER_COMPONENT)); for (int i = 0; (i < (MAX_NUMBER_OF_ATTEMPT)) && (com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.isNetworkVpn(mContext)); ++i) { java.lang.Thread.sleep(1000); } assertFalse(com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.isNetworkVpn(mContext)); try { com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.tryPosixConnect(com.android.cts.deviceandprofileowner.TEST_ADDRESS); fail(""sendIcmpMessage doesn't throw Exception during network lockdown""); } catch (android.system.ErrnoException e) { assertTrue((((e.errno) == (android.system.OsConstants.ENETUNREACH)) || ((e.errno) == (android.system.OsConstants.EACCES)))); } }",3f7126335b9d9eeca355c17a2832db8875140e2d,"public void testNetworkBlocked() throws java.lang.Exception { assertEquals(com.android.cts.deviceandprofileowner.VPN_PACKAGE, mDevicePolicyManager.getAlwaysOnVpnPackage(com.android.cts.deviceandprofileowner.ADMIN_RECEIVER_COMPONENT)); for (int i = 0; (i < (MAX_NUMBER_OF_ATTEMPTS)) && (com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.isNetworkVpn(mContext)); ++i) { java.lang.Thread.sleep(java.util.concurrent.TimeUnit.SECONDS.toMillis(1)); } assertFalse(com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.isNetworkVpn(mContext)); try { com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.tryPosixConnect(com.android.cts.deviceandprofileowner.TEST_ADDRESS); fail(""sendIcmpMessage doesn't throw Exception during network lockdown""); } catch (android.system.ErrnoException e) { assertTrue((((e.errno) == (android.system.OsConstants.ENETUNREACH)) || ((e.errno) == (android.system.OsConstants.EACCES)))); } }",e9f852896b889f806eea768fdbd8c09bf5bd6a0e,2018-02-13 09:02:41,10
615713,jdwp_src_test_java_org_apache_harmony_jpda_tests_share_GcMarker.java,public void waitForGc() { java.lang.Runtime.getRuntime().gc(); allowCollection(); java.lang.Runtime.getRuntime().gc(); do { java.lang.System.runFinalization(); java.lang.Runtime.getRuntime().gc(); try { java.lang.Thread.sleep(10); } catch (java.lang.Exception e) { } } while (isLive() ); try { mQueue.remove(); } catch (java.lang.Exception e) { } markerRef = null; reset(); },780f99a0448b2620309ad4108c454d672ba074ca,"public void waitForGc(int numberOfExpectedFinalizations) { if (numberOfExpectedFinalizations > (mList.size())) { throw new java.lang.IllegalArgumentException(""wait condition will never be met""); } do { java.lang.System.runFinalization(); java.lang.Runtime.getRuntime().gc(); try { java.lang.Thread.sleep(10); } catch (java.lang.Exception e) { } } while (isLive(numberOfExpectedFinalizations) ); try { while ((mQueue.poll()) != null); } catch (java.lang.Exception e) { } mList.clear(); }",1768c54ef7e52a1f4b4fd170b726a430b305ffe9,"public void waitForGc(int numberOfExpectedFinalizations) { if (numberOfExpectedFinalizations > (mList.size())) { throw new java.lang.IllegalArgumentException(""wait condition will never be met""); } do { java.lang.System.runFinalization(); java.lang.Runtime.getRuntime().gc(); try { java.lang.Thread.sleep(10); } catch (java.lang.Exception e) { } } while (isLive(numberOfExpectedFinalizations) ); }",b37c3d4702b8529cc7a0b7fd75ce9f0ebfa17cee,2018-02-13 19:08:44,3
611606,hostsidetests_devicepolicy_app_DeviceOwner_src_com_android_cts_deviceowner_CreateAndManageUserTest.java,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.os.UserHandle userHandle = intent.getParcelableExtra(com.android.cts.deviceowner.EXTRA_USER_HANDLE); android.util.Log.d(com.android.cts.deviceowner.CreateAndManageUserTest.TAG, (((""broadcast receiver received "" + intent) + "" with userHandle "") + userHandle)); mQueue.offer(userHandle); }",bf3ad2c26c2cb1348b1a1b60bcef7ae77f88c446,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.os.UserHandle userHandle = intent.getParcelableExtra(com.android.cts.deviceowner.EXTRA_USER_HANDLE); android.util.Log.d(com.android.cts.deviceowner.CreateAndManageUserTest.TAG, (((""broadcast receiver received "" + intent) + "" with userHandle "") + userHandle)); mQueue.add(userHandle); }",1ee3bcda9745447a9632e0fce2ac9d1133df3cc4,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.os.UserHandle userHandle = intent.getParcelableExtra(com.android.cts.deviceowner.EXTRA_USER_HANDLE); android.util.Log.d(com.android.cts.deviceowner.CreateAndManageUserTest.TAG, (((""broadcast receiver received "" + intent) + "" with userHandle "") + userHandle)); mQueue.offer(userHandle); }",bf3ad2c26c2cb1348b1a1b60bcef7ae77f88c446,2018-02-13 21:17:52,4
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void deleteProfile(java.lang.String cardId, java.lang.String iccid, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().deleteProfile(mContext.getOpPackageName(), cardId, iccid, new com.android.internal.telephony.euicc.IDeleteProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { callback.onComplete(resultCode, null); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling deleteProfile"", e); throw e.rethrowFromSystemServer(); } }",10cc7535672bfa6e2eca127535549a0d911b38cc,"public void deleteProfile(java.lang.String cardId, java.lang.String iccid, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().deleteProfile(mContext.getOpPackageName(), cardId, iccid, new com.android.internal.telephony.euicc.IDeleteProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling deleteProfile"", e); throw e.rethrowFromSystemServer(); } }",4a796411357cdbedf578547c5af4fe48a4012922,"public void deleteProfile(java.lang.String cardId, java.lang.String iccid, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().deleteProfile(mContext.getOpPackageName(), cardId, iccid, new com.android.internal.telephony.euicc.IDeleteProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling deleteProfile"", e); throw e.rethrowFromSystemServer(); } }",5486914bb21b925a086361508136e286d7062849,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void disableProfile(java.lang.String cardId, java.lang.String iccid, boolean refresh, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().disableProfile(mContext.getOpPackageName(), cardId, iccid, refresh, new com.android.internal.telephony.euicc.IDisableProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { callback.onComplete(resultCode, null); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling disableProfile"", e); throw e.rethrowFromSystemServer(); } }",c7f9e28a95d18a5a840a25efcbdca97f3bb67a2b,"public void disableProfile(java.lang.String cardId, java.lang.String iccid, boolean refresh, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().disableProfile(mContext.getOpPackageName(), cardId, iccid, refresh, new com.android.internal.telephony.euicc.IDisableProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling disableProfile"", e); throw e.rethrowFromSystemServer(); } }",7312a631f03c166344239df1a253b88bdf7802c3,"public void disableProfile(java.lang.String cardId, java.lang.String iccid, boolean refresh, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().disableProfile(mContext.getOpPackageName(), cardId, iccid, refresh, new com.android.internal.telephony.euicc.IDisableProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling disableProfile"", e); throw e.rethrowFromSystemServer(); } }",90eb2ffb9f06e8096c1cf8cdcc5f2b0c8956df25,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void getRulesAuthTable(java.lang.String cardId, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccRulesAuthTable> callback) { try { getIEuiccCardController().getRulesAuthTable(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetRulesAuthTableCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccRulesAuthTable rat) { callback.onComplete(resultCode, rat); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getRulesAuthTable"", e); throw e.rethrowFromSystemServer(); } }",e2b401d53df6fa4f20542d915f905384006f9f8a,"public void requestRulesAuthTable(java.lang.String cardId, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccRulesAuthTable> callback) { try { getIEuiccCardController().getRulesAuthTable(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetRulesAuthTableCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccRulesAuthTable rat) { executor.execute(() -> callback.onComplete(resultCode, rat)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getRulesAuthTable"", e); throw e.rethrowFromSystemServer(); } }",5a3db2df8e36e3be93d392f65f2808c093451da1,"public void requestRulesAuthTable(java.lang.String cardId, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccRulesAuthTable> callback) { try { getIEuiccCardController().getRulesAuthTable(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetRulesAuthTableCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccRulesAuthTable rat) { executor.execute(() -> callback.onComplete(resultCode, rat)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getRulesAuthTable"", e); throw e.rethrowFromSystemServer(); } }",8094fb3f3b9a359226f23413e89fb41372d8fbcd,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void getEuiccInfo2(java.lang.String cardId, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccInfo2(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccInfo2Callback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] info) { callback.onComplete(resultCode, info); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getEuiccInfo2"", e); throw e.rethrowFromSystemServer(); } }",594521f94c21c6ed558551e54a5a55ce4c7646dd,"public void requestEuiccInfo2(java.lang.String cardId, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccInfo2(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccInfo2Callback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] info) { executor.execute(() -> callback.onComplete(resultCode, info)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getEuiccInfo2"", e); throw e.rethrowFromSystemServer(); } }",b1dc8a95f3c672f1094ed78a34e93da6e8fae231,"public void requestEuiccInfo2(java.lang.String cardId, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccInfo2(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccInfo2Callback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] info) { executor.execute(() -> callback.onComplete(resultCode, info)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getEuiccInfo2"", e); throw e.rethrowFromSystemServer(); } }",2cc8f6689e4ecbaf2805fb1a84bbcad78cb75236,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void cancelSession(java.lang.String cardId, byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().cancelSession(mContext.getOpPackageName(), cardId, transactionId, reason, new com.android.internal.telephony.euicc.ICancelSessionCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { callback.onComplete(resultCode, response); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling cancelSession"", e); throw e.rethrowFromSystemServer(); } }",7c4ca96ce2a03a5f3c7298506b3761a2a5ab4f6c,"public void cancelSession(java.lang.String cardId, byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().cancelSession(mContext.getOpPackageName(), cardId, transactionId, reason, new com.android.internal.telephony.euicc.ICancelSessionCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling cancelSession"", e); throw e.rethrowFromSystemServer(); } }",ca47d11eedcfabb6305a0aa9d2b9404b66a43579,"public void cancelSession(java.lang.String cardId, byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().cancelSession(mContext.getOpPackageName(), cardId, transactionId, reason, new com.android.internal.telephony.euicc.ICancelSessionCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling cancelSession"", e); throw e.rethrowFromSystemServer(); } }",5c9bdaaeb26cb5b9b8b21c006839acae9bc433c0,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void getSmdsAddress(java.lang.String cardId, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.String> callback) { try { getIEuiccCardController().getSmdsAddress(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetSmdsAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, java.lang.String address) { callback.onComplete(resultCode, address); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getSmdsAddress"", e); throw e.rethrowFromSystemServer(); } }",acb98d660c028667809f28e50419733594893061,"public void requestSmdsAddress(java.lang.String cardId, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.String> callback) { try { getIEuiccCardController().getSmdsAddress(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetSmdsAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, java.lang.String address) { executor.execute(() -> callback.onComplete(resultCode, address)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getSmdsAddress"", e); throw e.rethrowFromSystemServer(); } }",4feda0068f7515d45a83af5c8544125f6088bd07,"public void requestSmdsAddress(java.lang.String cardId, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.String> callback) { try { getIEuiccCardController().getSmdsAddress(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetSmdsAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, java.lang.String address) { executor.execute(() -> callback.onComplete(resultCode, address)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getSmdsAddress"", e); throw e.rethrowFromSystemServer(); } }",43b58b0986b4403ed5930c99f453dfa4972bd4aa,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void authenticateServer(java.lang.String cardId, java.lang.String matchingId, byte[] serverSigned1, byte[] serverSignature1, byte[] euiccCiPkIdToBeUsed, byte[] serverCertificate, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().authenticateServer(mContext.getOpPackageName(), cardId, matchingId, serverSigned1, serverSignature1, euiccCiPkIdToBeUsed, serverCertificate, new com.android.internal.telephony.euicc.IAuthenticateServerCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { callback.onComplete(resultCode, response); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling authenticateServer"", e); throw e.rethrowFromSystemServer(); } }",276487693f64bc9023af8746a04c5af052f929ff,"public void authenticateServer(java.lang.String cardId, java.lang.String matchingId, byte[] serverSigned1, byte[] serverSignature1, byte[] euiccCiPkIdToBeUsed, byte[] serverCertificate, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().authenticateServer(mContext.getOpPackageName(), cardId, matchingId, serverSigned1, serverSignature1, euiccCiPkIdToBeUsed, serverCertificate, new com.android.internal.telephony.euicc.IAuthenticateServerCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling authenticateServer"", e); throw e.rethrowFromSystemServer(); } }",d8efdf5e45167e8850e5d0acc46050bb9108fa35,"public void authenticateServer(java.lang.String cardId, java.lang.String matchingId, byte[] serverSigned1, byte[] serverSignature1, byte[] euiccCiPkIdToBeUsed, byte[] serverCertificate, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().authenticateServer(mContext.getOpPackageName(), cardId, matchingId, serverSigned1, serverSignature1, euiccCiPkIdToBeUsed, serverCertificate, new com.android.internal.telephony.euicc.IAuthenticateServerCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling authenticateServer"", e); throw e.rethrowFromSystemServer(); } }",602282f778b70bceca9a58b21dca446f4d936150,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void getEuiccChallenge(java.lang.String cardId, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccChallenge(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccChallengeCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] challenge) { callback.onComplete(resultCode, challenge); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getEuiccChallenge"", e); throw e.rethrowFromSystemServer(); } }",9ef01fcb1ae0931c0023a09ca04f5994ac2675f5,"public void requestEuiccChallenge(java.lang.String cardId, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccChallenge(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccChallengeCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] challenge) { executor.execute(() -> callback.onComplete(resultCode, challenge)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getEuiccChallenge"", e); throw e.rethrowFromSystemServer(); } }",878bdf532636052ff50c9ade2a37fb4d723a4537,"public void requestEuiccChallenge(java.lang.String cardId, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccChallenge(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccChallengeCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] challenge) { executor.execute(() -> callback.onComplete(resultCode, challenge)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getEuiccChallenge"", e); throw e.rethrowFromSystemServer(); } }",8f481c14f821fd18dc0d14a99ec3fe4029a47870,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void removeNotificationFromList(java.lang.String cardId, int seqNumber, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().removeNotificationFromList(mContext.getOpPackageName(), cardId, seqNumber, new com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { callback.onComplete(resultCode, null); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling removeNotificationFromList"", e); throw e.rethrowFromSystemServer(); } }",5370e0e163664ac702405bb4869bd48e346f0dc6,"public void removeNotificationFromList(java.lang.String cardId, int seqNumber, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().removeNotificationFromList(mContext.getOpPackageName(), cardId, seqNumber, new com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling removeNotificationFromList"", e); throw e.rethrowFromSystemServer(); } }",d8d464ee775c5be1cc1d233404ae6e1c7ccf0f61,"public void removeNotificationFromList(java.lang.String cardId, int seqNumber, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().removeNotificationFromList(mContext.getOpPackageName(), cardId, seqNumber, new com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling removeNotificationFromList"", e); throw e.rethrowFromSystemServer(); } }",17b3ab9f50aadae6a171e295a377963f655c4654,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void resetMemory(java.lang.String cardId, @android.telephony.euicc.EuiccCardManager.ResetOption int options, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().resetMemory(mContext.getOpPackageName(), cardId, options, new com.android.internal.telephony.euicc.IResetMemoryCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { callback.onComplete(resultCode, null); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling resetMemory"", e); throw e.rethrowFromSystemServer(); } }",6ee8e2c94c83f511c61221810d7ee4acf97d9f78,"public void resetMemory(java.lang.String cardId, @android.telephony.euicc.EuiccCardManager.ResetOption int options, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().resetMemory(mContext.getOpPackageName(), cardId, options, new com.android.internal.telephony.euicc.IResetMemoryCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling resetMemory"", e); throw e.rethrowFromSystemServer(); } }",3d8d6ea99e7ee820b1a06d229d035d98cc20cbe6,"public void resetMemory(java.lang.String cardId, @android.telephony.euicc.EuiccCardManager.ResetOption int options, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().resetMemory(mContext.getOpPackageName(), cardId, options, new com.android.internal.telephony.euicc.IResetMemoryCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling resetMemory"", e); throw e.rethrowFromSystemServer(); } }",ed5094b77f37b64b9762445b1624f6852cc0b292,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void setNickname(java.lang.String cardId, java.lang.String iccid, java.lang.String nickname, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().setNickname(mContext.getOpPackageName(), cardId, iccid, nickname, new com.android.internal.telephony.euicc.ISetNicknameCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { callback.onComplete(resultCode, null); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling setNickname"", e); throw e.rethrowFromSystemServer(); } }",cbe8b146bc5163e4496352526d0392f759b842ea,"public void setNickname(java.lang.String cardId, java.lang.String iccid, java.lang.String nickname, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().setNickname(mContext.getOpPackageName(), cardId, iccid, nickname, new com.android.internal.telephony.euicc.ISetNicknameCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling setNickname"", e); throw e.rethrowFromSystemServer(); } }",fdde8c27dbdd01365fdf7ea15c0702ea1e467156,"public void setNickname(java.lang.String cardId, java.lang.String iccid, java.lang.String nickname, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().setNickname(mContext.getOpPackageName(), cardId, iccid, nickname, new com.android.internal.telephony.euicc.ISetNicknameCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling setNickname"", e); throw e.rethrowFromSystemServer(); } }",770b71601843638a0e390d177a31f5de46355d02,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void getProfile(java.lang.String cardId, java.lang.String iccid, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo> callback) { try { getIEuiccCardController().getProfile(mContext.getOpPackageName(), cardId, iccid, new com.android.internal.telephony.euicc.IGetProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo profile) { callback.onComplete(resultCode, profile); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getProfile"", e); throw e.rethrowFromSystemServer(); } }",6116978d486d4acc0126d0b696c8e83d92c0fa55,"public void requestProfile(java.lang.String cardId, java.lang.String iccid, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo> callback) { try { getIEuiccCardController().getProfile(mContext.getOpPackageName(), cardId, iccid, new com.android.internal.telephony.euicc.IGetProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo profile) { executor.execute(() -> callback.onComplete(resultCode, profile)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getProfile"", e); throw e.rethrowFromSystemServer(); } }",450350d24b5c90cf0aa0f96deef660b0083eac14,"public void requestProfile(java.lang.String cardId, java.lang.String iccid, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo> callback) { try { getIEuiccCardController().getProfile(mContext.getOpPackageName(), cardId, iccid, new com.android.internal.telephony.euicc.IGetProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo profile) { executor.execute(() -> callback.onComplete(resultCode, profile)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getProfile"", e); throw e.rethrowFromSystemServer(); } }",6308841f3bb3d381a6672f94ceef9ec4a496bb56,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void prepareDownload(java.lang.String cardId, @android.annotation.Nullable byte[] hashCc, byte[] smdpSigned2, byte[] smdpSignature2, byte[] smdpCertificate, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().prepareDownload(mContext.getOpPackageName(), cardId, hashCc, smdpSigned2, smdpSignature2, smdpCertificate, new com.android.internal.telephony.euicc.IPrepareDownloadCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { callback.onComplete(resultCode, response); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling prepareDownload"", e); throw e.rethrowFromSystemServer(); } }",c55fe4752f01e818fa57d8a2214134470d2330a7,"public void prepareDownload(java.lang.String cardId, @android.annotation.Nullable byte[] hashCc, byte[] smdpSigned2, byte[] smdpSignature2, byte[] smdpCertificate, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().prepareDownload(mContext.getOpPackageName(), cardId, hashCc, smdpSigned2, smdpSignature2, smdpCertificate, new com.android.internal.telephony.euicc.IPrepareDownloadCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling prepareDownload"", e); throw e.rethrowFromSystemServer(); } }",84f55b10b68d909056bba3f7ea04dd5722719e6b,"public void prepareDownload(java.lang.String cardId, @android.annotation.Nullable byte[] hashCc, byte[] smdpSigned2, byte[] smdpSignature2, byte[] smdpCertificate, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().prepareDownload(mContext.getOpPackageName(), cardId, hashCc, smdpSigned2, smdpSignature2, smdpCertificate, new com.android.internal.telephony.euicc.IPrepareDownloadCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling prepareDownload"", e); throw e.rethrowFromSystemServer(); } }",8c6bf501f09c2b37ae826500bb50169ac6a7a655,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void retrieveNotificationList(java.lang.String cardId, @android.telephony.euicc.EuiccNotification.Event int events, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification[]> callback) { try { getIEuiccCardController().retrieveNotificationList(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.euicc.IRetrieveNotificationListCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification[] notifications) { callback.onComplete(resultCode, notifications); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling retrieveNotificationList"", e); throw e.rethrowFromSystemServer(); } }",e9edae797842000fcd8190eb61dd19c89004895f,"public void retrieveNotificationList(java.lang.String cardId, @android.telephony.euicc.EuiccNotification.Event int events, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification[]> callback) { try { getIEuiccCardController().retrieveNotificationList(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.euicc.IRetrieveNotificationListCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification[] notifications) { executor.execute(() -> callback.onComplete(resultCode, notifications)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling retrieveNotificationList"", e); throw e.rethrowFromSystemServer(); } }",71f27c301b15371d24be4b510a1c23d76634fe19,"public void retrieveNotificationList(java.lang.String cardId, @android.telephony.euicc.EuiccNotification.Event int events, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification[]> callback) { try { getIEuiccCardController().retrieveNotificationList(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.euicc.IRetrieveNotificationListCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification[] notifications) { executor.execute(() -> callback.onComplete(resultCode, notifications)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling retrieveNotificationList"", e); throw e.rethrowFromSystemServer(); } }",3b6a701f97df171c018283b20ed213dd2969e4a1,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void listNotifications(java.lang.String cardId, @android.telephony.euicc.EuiccNotification.Event int events, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification[]> callback) { try { getIEuiccCardController().listNotifications(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.euicc.IListNotificationsCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification[] notifications) { callback.onComplete(resultCode, notifications); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling listNotifications"", e); throw e.rethrowFromSystemServer(); } }",79d080977a7ab88aad0cb38100989557e9ad27eb,"public void listNotifications(java.lang.String cardId, @android.telephony.euicc.EuiccNotification.Event int events, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification[]> callback) { try { getIEuiccCardController().listNotifications(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.euicc.IListNotificationsCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification[] notifications) { executor.execute(() -> callback.onComplete(resultCode, notifications)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling listNotifications"", e); throw e.rethrowFromSystemServer(); } }",4089189db2f00cff4bf2038b465c364bdc4f095b,"public void listNotifications(java.lang.String cardId, @android.telephony.euicc.EuiccNotification.Event int events, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification[]> callback) { try { getIEuiccCardController().listNotifications(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.euicc.IListNotificationsCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification[] notifications) { executor.execute(() -> callback.onComplete(resultCode, notifications)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling listNotifications"", e); throw e.rethrowFromSystemServer(); } }",d658e86d2d6e8d1276e82314486dfa75ba1256d1,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void retrieveNotification(java.lang.String cardId, int seqNumber, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification> callback) { try { getIEuiccCardController().retrieveNotification(mContext.getOpPackageName(), cardId, seqNumber, new com.android.internal.telephony.euicc.IRetrieveNotificationCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification notification) { callback.onComplete(resultCode, notification); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling retrieveNotification"", e); throw e.rethrowFromSystemServer(); } }",27490274de25339840efe41f15b98abeae27b3b0,"public void retrieveNotification(java.lang.String cardId, int seqNumber, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification> callback) { try { getIEuiccCardController().retrieveNotification(mContext.getOpPackageName(), cardId, seqNumber, new com.android.internal.telephony.euicc.IRetrieveNotificationCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification notification) { executor.execute(() -> callback.onComplete(resultCode, notification)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling retrieveNotification"", e); throw e.rethrowFromSystemServer(); } }",ee14ef329ddfa41b808019c49c226ccbcc2ead19,"public void retrieveNotification(java.lang.String cardId, int seqNumber, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification> callback) { try { getIEuiccCardController().retrieveNotification(mContext.getOpPackageName(), cardId, seqNumber, new com.android.internal.telephony.euicc.IRetrieveNotificationCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification notification) { executor.execute(() -> callback.onComplete(resultCode, notification)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling retrieveNotification"", e); throw e.rethrowFromSystemServer(); } }",ffc8267bb1b5b7cf30d7639962933ca3309c8d8f,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void getDefaultSmdpAddress(java.lang.String cardId, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.String> callback) { try { getIEuiccCardController().getDefaultSmdpAddress(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, java.lang.String address) { callback.onComplete(resultCode, address); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getDefaultSmdpAddress"", e); throw e.rethrowFromSystemServer(); } }",5edd1fae6080203bb1af8ab2e30686a0a5d3045c,"public void requestDefaultSmdpAddress(java.lang.String cardId, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.String> callback) { try { getIEuiccCardController().getDefaultSmdpAddress(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, java.lang.String address) { executor.execute(() -> callback.onComplete(resultCode, address)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getDefaultSmdpAddress"", e); throw e.rethrowFromSystemServer(); } }",6e709f814bb0cc5877a41d2dc255cc17e23afe2d,"public void requestDefaultSmdpAddress(java.lang.String cardId, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.String> callback) { try { getIEuiccCardController().getDefaultSmdpAddress(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, java.lang.String address) { executor.execute(() -> callback.onComplete(resultCode, address)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getDefaultSmdpAddress"", e); throw e.rethrowFromSystemServer(); } }",96c02bc83361bf43b1a7bc80e961c30197137299,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void loadBoundProfilePackage(java.lang.String cardId, byte[] boundProfilePackage, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().loadBoundProfilePackage(mContext.getOpPackageName(), cardId, boundProfilePackage, new com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { callback.onComplete(resultCode, response); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling loadBoundProfilePackage"", e); throw e.rethrowFromSystemServer(); } }",ea726757df5171b1dea2bb08aec769d75b2e7448,"public void loadBoundProfilePackage(java.lang.String cardId, byte[] boundProfilePackage, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().loadBoundProfilePackage(mContext.getOpPackageName(), cardId, boundProfilePackage, new com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling loadBoundProfilePackage"", e); throw e.rethrowFromSystemServer(); } }",522d0a97705acc70b6eecc0be3c342f8a2dde05b,"public void loadBoundProfilePackage(java.lang.String cardId, byte[] boundProfilePackage, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().loadBoundProfilePackage(mContext.getOpPackageName(), cardId, boundProfilePackage, new com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling loadBoundProfilePackage"", e); throw e.rethrowFromSystemServer(); } }",e40576452b43f306f2994e1e7955d84a7e7d1f7e,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void getEuiccInfo1(java.lang.String cardId, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccInfo1(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccInfo1Callback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] info) { callback.onComplete(resultCode, info); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getEuiccInfo1"", e); throw e.rethrowFromSystemServer(); } }",a565e55144ef29f1a964c086c2fb31be65d2802c,"public void requestEuiccInfo1(java.lang.String cardId, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccInfo1(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccInfo1Callback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] info) { executor.execute(() -> callback.onComplete(resultCode, info)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getEuiccInfo1"", e); throw e.rethrowFromSystemServer(); } }",dda3d5052a756cc8323e80b3e8512f318e1f2c8d,"public void requestEuiccInfo1(java.lang.String cardId, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccInfo1(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccInfo1Callback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] info) { executor.execute(() -> callback.onComplete(resultCode, info)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getEuiccInfo1"", e); throw e.rethrowFromSystemServer(); } }",554d3774a3e7811967da299093d81e7b546a8492,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void getAllProfiles(java.lang.String cardId, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo[]> callback) { try { getIEuiccCardController().getAllProfiles(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetAllProfilesCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo[] profiles) { callback.onComplete(resultCode, profiles); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getAllProfiles"", e); throw e.rethrowFromSystemServer(); } }",b8a70c30e09a024146c0860ca1ffbe9cb48b598c,"public void requestAllProfiles(java.lang.String cardId, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo[]> callback) { try { getIEuiccCardController().getAllProfiles(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetAllProfilesCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo[] profiles) { executor.execute(() -> callback.onComplete(resultCode, profiles)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getAllProfiles"", e); throw e.rethrowFromSystemServer(); } }",750ee8886a440f365132f1776c21fc182b940a19,"public void requestAllProfiles(java.lang.String cardId, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo[]> callback) { try { getIEuiccCardController().getAllProfiles(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetAllProfilesCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo[] profiles) { executor.execute(() -> callback.onComplete(resultCode, profiles)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getAllProfiles"", e); throw e.rethrowFromSystemServer(); } }",1efce5e27951c49b9e53a33e244cf0f283705782,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void setDefaultSmdpAddress(java.lang.String cardId, java.lang.String defaultSmdpAddress, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().setDefaultSmdpAddress(mContext.getOpPackageName(), cardId, defaultSmdpAddress, new com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { callback.onComplete(resultCode, null); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling setDefaultSmdpAddress"", e); throw e.rethrowFromSystemServer(); } }",cd846eeed2ef7406bd81829c8f03462c0d2d288e,"public void setDefaultSmdpAddress(java.lang.String cardId, java.lang.String defaultSmdpAddress, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().setDefaultSmdpAddress(mContext.getOpPackageName(), cardId, defaultSmdpAddress, new com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling setDefaultSmdpAddress"", e); throw e.rethrowFromSystemServer(); } }",85bd5b7b0be7afece363b99c632f809fe8af6485,"public void setDefaultSmdpAddress(java.lang.String cardId, java.lang.String defaultSmdpAddress, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().setDefaultSmdpAddress(mContext.getOpPackageName(), cardId, defaultSmdpAddress, new com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling setDefaultSmdpAddress"", e); throw e.rethrowFromSystemServer(); } }",7e9a386f1b496f9d5992f4e7685958b646cc92cd,2018-02-13 22:56:07,2
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,"public void switchToProfile(java.lang.String cardId, java.lang.String iccid, boolean refresh, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo> callback) { try { getIEuiccCardController().switchToProfile(mContext.getOpPackageName(), cardId, iccid, refresh, new com.android.internal.telephony.euicc.ISwitchToProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo profile) { callback.onComplete(resultCode, profile); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling switchToProfile"", e); throw e.rethrowFromSystemServer(); } }",64192d83812a0c8dd8c02e428bc5e0cf3e1f1b7c,"public void switchToProfile(java.lang.String cardId, java.lang.String iccid, boolean refresh, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo> callback) { try { getIEuiccCardController().switchToProfile(mContext.getOpPackageName(), cardId, iccid, refresh, new com.android.internal.telephony.euicc.ISwitchToProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo profile) { executor.execute(() -> callback.onComplete(resultCode, profile)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling switchToProfile"", e); throw e.rethrowFromSystemServer(); } }",fbb533db95be4db89ed1888ce361cb6396440b79,"public void switchToProfile(java.lang.String cardId, java.lang.String iccid, boolean refresh, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo> callback) { try { getIEuiccCardController().switchToProfile(mContext.getOpPackageName(), cardId, iccid, refresh, new com.android.internal.telephony.euicc.ISwitchToProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo profile) { executor.execute(() -> callback.onComplete(resultCode, profile)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling switchToProfile"", e); throw e.rethrowFromSystemServer(); } }",5b21d0a4ef6d36d9c46ad37edfd0eb2a1ebe19d3,2018-02-13 22:56:07,2
607027,telecomm_java_android_telecom_Conference.java,public final long getConnectElapsedTime() { return mConnectElapsedTimeMillis; },d5ddacb5d4abb285024db4ab381730cdc9142f6f,public final long getConnectElapsedTime() { return mConnectionStartElapsedRealTime; },ed8a6d900933d878186f17dc32a92563fc38f336,public final long getConnectionStartElapsedRealTime() { return mConnectionStartElapsedRealTime; },c5d5a585537303c3bb0788c13db1960192db17be,2018-02-13 23:27:32,2
616426,tests_unit_src_com_android_bluetooth_a2dp_A2dpServiceTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void verifyNoConnectionStateIntent(int timeoutMs, android.bluetooth.BluetoothDevice device, int newState, int prevState) { android.content.Intent intent = waitForNoIntent(timeoutMs, mConnectionStateChangedQueue); org.junit.Assert.assertNull(intent); }",54b93b0a6b4060a9b7b1b37859b73a31619bb2de,"private void verifyNoConnectionStateIntent(int timeoutMs) { android.content.Intent intent = waitForNoIntent(timeoutMs, mConnectionStateChangedQueue); org.junit.Assert.assertNull(intent); }",bf3df8f21fa5f7ef275ecd762eb7d612770930a4,2018-02-14 01:25:57,4
616426,tests_unit_src_com_android_bluetooth_a2dp_A2dpServiceTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void generateUnexpectedMessageFromNative(android.bluetooth.BluetoothDevice device, int newConnectionState, int oldConnectionState) { com.android.bluetooth.a2dp.A2dpStackEvent stackEvent = new com.android.bluetooth.a2dp.A2dpStackEvent(A2dpStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED); stackEvent.device = device; stackEvent.valueInt = newConnectionState; mA2dpService.messageFromNative(stackEvent); verifyNoConnectionStateIntent(com.android.bluetooth.a2dp.A2dpServiceTest.TIMEOUT_MS, device, newConnectionState, oldConnectionState); }",bcd9aa6df73fa043316e49983533bfbd73fa5074,"private void generateUnexpectedMessageFromNative(android.bluetooth.BluetoothDevice device, int newConnectionState, int oldConnectionState) { com.android.bluetooth.a2dp.A2dpStackEvent stackEvent = new com.android.bluetooth.a2dp.A2dpStackEvent(A2dpStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED); stackEvent.device = device; stackEvent.valueInt = newConnectionState; mA2dpService.messageFromNative(stackEvent); verifyNoConnectionStateIntent(com.android.bluetooth.a2dp.A2dpServiceTest.TIMEOUT_MS); }",76bd391bb3b3257941def7a49e5a01b2e3f04ced,2018-02-14 01:25:57,4
616426,src_com_android_bluetooth_a2dp_A2dpService.java,"void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { synchronized(mStateMachines) { android.bluetooth.BluetoothDevice device = stackEvent.device; com.android.bluetooth.a2dp.A2dpStateMachine sm = getOrCreateStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (""Cannot process stack event: no state machine: "" + stackEvent)); return; } sm.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); } }",41609d90a1882aace0b03a6a3ec57f9e2fae9999,"void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { java.util.Objects.requireNonNull(stackEvent.device, (""Device should never be null, event: "" + stackEvent)); synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine sm = null; android.bluetooth.BluetoothDevice device = stackEvent.device; if ((stackEvent.type) == (A2dpStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED)) { switch (stackEvent.valueInt) { case A2dpStackEvent.CONNECTION_STATE_CONNECTED : case A2dpStackEvent.CONNECTION_STATE_CONNECTING : if (!(canConnectToDevice(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : too many connected devices"")); return; } sm = getOrCreateStateMachine(device); break; default : sm = mStateMachines.get(device); break; } } if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (""Cannot process stack event: no state machine: "" + stackEvent)); return; } sm.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); } }",53f944008bd61b2154807c5963d216052d37365d,"void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { java.util.Objects.requireNonNull(stackEvent.device, (""Device should never be null, event: "" + stackEvent)); synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine sm = null; android.bluetooth.BluetoothDevice device = stackEvent.device; if ((stackEvent.type) == (A2dpStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED)) { switch (stackEvent.valueInt) { case A2dpStackEvent.CONNECTION_STATE_CONNECTED : case A2dpStackEvent.CONNECTION_STATE_CONNECTING : if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : too many connected devices"")); return; } sm = getOrCreateStateMachine(device); break; default : sm = mStateMachines.get(device); break; } } if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (""Cannot process stack event: no state machine: "" + stackEvent)); return; } sm.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); } }",99413577798748a884ba380de4599f94057a4e71,2018-02-14 01:25:57,4
616426,src_com_android_bluetooth_a2dp_A2dpStateMachine.java,"private void processConnectionEvent(int state) { switch (state) { case A2dpStackEvent.CONNECTION_STATE_DISCONNECTED : android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Disconnected from "" + (mDevice))); transitionTo(mDisconnected); break; default : android.util.Log.e(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (((""Connection State Device: "" + (mDevice)) + "" bad state: "") + state)); break; } }",0df1d1d874a072d89db73848c0b81ab8d8dd92bf,"private void processConnectionEvent(int state) { switch (state) { case A2dpStackEvent.CONNECTION_STATE_DISCONNECTED : android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Disconnected from "" + (mDevice))); transitionTo(mDisconnected); break; case A2dpStackEvent.CONNECTION_STATE_CONNECTED : android.util.Log.w(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Ignore A2DP CONNECTED event: "" + (mDevice))); break; case A2dpStackEvent.CONNECTION_STATE_CONNECTING : android.util.Log.w(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Ignore A2DP CONNECTING event: "" + (mDevice))); break; case A2dpStackEvent.CONNECTION_STATE_DISCONNECTING : android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Disconnecting from "" + (mDevice))); transitionTo(mDisconnecting); break; default : android.util.Log.e(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (((""Connection State Device: "" + (mDevice)) + "" bad state: "") + state)); break; } }",1f1c438089ab780121c860f2d2a9016eb2b6d31d,"private void processConnectionEvent(int event) { switch (event) { case A2dpStackEvent.CONNECTION_STATE_DISCONNECTED : android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Disconnected from "" + (mDevice))); transitionTo(mDisconnected); break; case A2dpStackEvent.CONNECTION_STATE_CONNECTED : android.util.Log.w(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Ignore A2DP CONNECTED event: "" + (mDevice))); break; case A2dpStackEvent.CONNECTION_STATE_CONNECTING : android.util.Log.w(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Ignore A2DP CONNECTING event: "" + (mDevice))); break; case A2dpStackEvent.CONNECTION_STATE_DISCONNECTING : android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""Disconnecting from "" + (mDevice))); transitionTo(mDisconnecting); break; default : android.util.Log.e(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (((""Connection State Device: "" + (mDevice)) + "" bad event: "") + event)); break; } }",29f4641476a66075a71f6ab4a8da0d8a99463efb,2018-02-14 01:25:57,4
616426,tests_unit_src_com_android_bluetooth_TestUtils.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static android.bluetooth.BluetoothDevice getTestDevice(int id) { org.junit.Assert.assertTrue((id <= 255)); android.bluetooth.BluetoothAdapter bluetoothAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); org.junit.Assert.assertNotNull(bluetoothAdapter); android.bluetooth.BluetoothDevice testDevice = bluetoothAdapter.getRemoteDevice(java.lang.String.format(""00:01:02:03:04:%02X"", id)); org.junit.Assert.assertNotNull(testDevice); return testDevice; }",2506be2236155ada07cdf9e659536c3112993a4e,"public static android.bluetooth.BluetoothDevice getTestDevice(android.bluetooth.BluetoothAdapter bluetoothAdapter, int id) { org.junit.Assert.assertTrue((id <= 255)); org.junit.Assert.assertNotNull(bluetoothAdapter); android.bluetooth.BluetoothDevice testDevice = bluetoothAdapter.getRemoteDevice(java.lang.String.format(""00:01:02:03:04:%02X"", id)); org.junit.Assert.assertNotNull(testDevice); return testDevice; }",2d651e618023583762f2522901aa90f0a52e1b49,2018-02-14 01:25:57,4
616426,src_com_android_bluetooth_a2dp_A2dpService.java,"public boolean connect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""connect(): "" + device)); } if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { return false; } if (!(android.bluetooth.BluetoothUuid.isUuidPresent(mAdapterService.getRemoteUuids(device), BluetoothUuid.AudioSink))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : Remote does not have A2DP Sink UUID"")); return false; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getOrCreateStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : no state machine"")); return false; } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; } }",c06258dfa7997ebbddbca218e0ae357d56196d37,"public boolean connect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""connect(): "" + device)); } if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : PRIORITY_OFF"")); return false; } if (!(android.bluetooth.BluetoothUuid.isUuidPresent(mAdapterService.getRemoteUuids(device), BluetoothUuid.AudioSink))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : Remote does not have A2DP Sink UUID"")); return false; } synchronized(mStateMachines) { if (!(canConnectToDevice(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : too many connected devices"")); return false; } com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getOrCreateStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : no state machine"")); return false; } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; } }",53dca68bd859ad825292a77d3c1a91cebd6e26b7,"public boolean connect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""connect(): "" + device)); } if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : PRIORITY_OFF"")); return false; } if (!(android.bluetooth.BluetoothUuid.isUuidPresent(mAdapterService.getRemoteUuids(device), BluetoothUuid.AudioSink))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : Remote does not have A2DP Sink UUID"")); return false; } synchronized(mStateMachines) { if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : too many connected devices"")); return false; } com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getOrCreateStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : no state machine"")); return false; } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; } }",53474fedec0fabd89cbb33622c4080568013f4a0,2018-02-14 01:25:57,4
615187,luni_src_main_java_libcore_util_CountryZonesFinder.java,,,public java.util.List<java.lang.String> lookupCountryCodeForZoneId(java.lang.String zoneId) { java.util.List<java.lang.String> isoCodes = new java.util.ArrayList<>(2); for (libcore.util.CountryTimeZones countryTimeZones : countryTimeZonesList) { if (countryTimeZones.getTimeZoneIds().contains(zoneId)) { isoCodes.add(countryTimeZones.getCountryIso()); } } return java.util.Collections.unmodifiableList(isoCodes); },ef6b4ebf16fd8549ce2fb2edd07a6cf107e52514,public java.util.List<java.lang.String> lookupCountryCodesForZoneId(java.lang.String zoneId) { java.util.List<java.lang.String> isoCodes = new java.util.ArrayList<>(2); for (libcore.util.CountryTimeZones countryTimeZones : countryTimeZonesList) { if (countryTimeZones.getTimeZoneIds().contains(zoneId)) { isoCodes.add(countryTimeZones.getCountryIso()); } } return java.util.Collections.unmodifiableList(isoCodes); },d0d37ca46b6c7bc52f209e5597a2f1cdcf5f8167,2018-02-14 16:17:01,4
615187,luni_src_main_java_libcore_util_TimeZoneFinder.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public libcore.util.CountryZonesFinder getCountryZonesLookup() { libcore.util.TimeZoneFinder.CountryZonesLookupExtractor extractor = new libcore.util.TimeZoneFinder.CountryZonesLookupExtractor(); try { processXml(extractor); return extractor.getCountryZonesLookup(); } catch (org.xmlpull.v1.XmlPullParserException | java.io.IOException e) { java.lang.System.logW(""Error reading country zones "", e); return null; } }",0657f73fa4a22ade50dae5373a829bd3ae72a7e7,"public libcore.util.CountryZonesFinder getCountryZonesFinder() { libcore.util.TimeZoneFinder.CountryZonesLookupExtractor extractor = new libcore.util.TimeZoneFinder.CountryZonesLookupExtractor(); try { processXml(extractor); return extractor.getCountryZonesLookup(); } catch (org.xmlpull.v1.XmlPullParserException | java.io.IOException e) { java.lang.System.logW(""Error reading country zones "", e); return null; } }",562af1ce01c3ce4ef19617c18b3dfc4861abdeea,2018-02-14 16:17:01,4
615187,luni_src_main_java_libcore_util_CountryZonesFinder.java,,,public java.util.List<java.lang.String> getCountryIsoCodes() { java.util.List<java.lang.String> isoCodes = new java.util.ArrayList(countryTimeZonesList.size()); for (libcore.util.CountryTimeZones countryTimeZones : countryTimeZonesList) { isoCodes.add(countryTimeZones.getCountryIso()); } return java.util.Collections.unmodifiableList(isoCodes); },1d3d6299550f6f4bdb61bbf940dd40adef2dafda,public java.util.List<java.lang.String> lookupAllCountryIsoCodes() { java.util.List<java.lang.String> isoCodes = new java.util.ArrayList(countryTimeZonesList.size()); for (libcore.util.CountryTimeZones countryTimeZones : countryTimeZonesList) { isoCodes.add(countryTimeZones.getCountryIso()); } return java.util.Collections.unmodifiableList(isoCodes); },fc1d75d4125dcb5d5a1d18cd7e81c294dbb047b9,2018-02-14 16:17:01,4
615655,hostsidetests_services_activityandwindowmanager_util_src_android_server_cts_ActivityAndWindowManagersState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void assertContainsSuitableStackOnDisplay(java.lang.String msg, int displayId) { assertTrue(msg, mAmState.containsSuitableStackOnDisplay(displayId)); }",389e29a00592d692e15f46c59bc05e99a0521bf1,"void assertHasFullscreenTypeStackOnDisplay(java.lang.String msg, int displayId) { assertTrue(msg, mAmState.containsSuitableStackOnDisplay(displayId)); }",d9f87b36491603c492715000e63e7e807457b9d3,2018-02-14 22:39:27,7
615655,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerAssistantStackTests.java,"public void setUp() throws java.lang.Exception { super.setUp(); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStack assistantStack = mAmWmState.getAmState().getStackById(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId = assistantStack.mDisplayId; removeStacks(android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }",867f1afbfe3221bf227f80ad942881ca1937a525,"public void setUp() throws java.lang.Exception { super.setUp(); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStack assistantStack = mAmWmState.getAmState().getStackById(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId = 0; removeStacks(android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }",65fe26290742e691c734a2c239668ecd1d4dcf31,"public void setUp() throws java.lang.Exception { super.setUp(); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStack assistantStack = mAmWmState.getAmState().getStackById(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId = assistantStack.mDisplayId; removeStacks(android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }",867f1afbfe3221bf227f80ad942881ca1937a525,2018-02-14 22:39:27,7
615655,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerAssistantStackTests.java,"public void testAssistantStackZOrder() throws java.lang.Exception { if (((!(supportsPip())) || (!(supportsSplitScreenMultiWindow()))) || (!(assistantRunsOnPrimaryDisplay()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ENTER_PIP, ""true""); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.PINNED_STACK_ID); mAmWmState.assertContainsStack(""Must contain pinned stack."", android.server.cts.PINNED_STACK_ID); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack(""Must contain fullscreen stack."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack(""Must contain docked stack."", android.server.cts.DOCKED_STACK_ID); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); assertAssistantStackExists(); mAmWmState.assertFrontStack(""Pinned stack should be on top."", android.server.cts.PINNED_STACK_ID); mAmWmState.assertFocusedStack(""Assistant stack should be focused."", android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }",70a888a34581e5c8e3dd0da71483e9f5995af426,"public void testAssistantStackZOrder() throws java.lang.Exception { if (((!(supportsPip())) || (!(supportsSplitScreenMultiWindow()))) || (!(assistantRunsOnPrimaryDisplay()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ENTER_PIP, ""true""); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.PINNED_STACK_ID); mAmWmState.assertContainsStack(""Must contain pinned stack."", android.server.cts.PINNED_STACK_ID); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsSuitableStackOnDisplay(""Must contain fullscreen stack."", android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId); mAmWmState.assertContainsStack(""Must contain docked stack."", android.server.cts.DOCKED_STACK_ID); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); assertAssistantStackExists(); mAmWmState.assertFrontStack(""Pinned stack should be on top."", android.server.cts.PINNED_STACK_ID); mAmWmState.assertFocusedStack(""Assistant stack should be focused."", android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }",eace0a6d3379807e5740fa8709d238bda04340b7,"public void testAssistantStackZOrder() throws java.lang.Exception { if (((!(supportsPip())) || (!(supportsSplitScreenMultiWindow()))) || (!(assistantRunsOnPrimaryDisplay()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ENTER_PIP, ""true""); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.PINNED_STACK_ID); mAmWmState.assertContainsStack(""Must contain pinned stack."", android.server.cts.PINNED_STACK_ID); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertHasFullscreenTypeStackOnDisplay(""Must contain fullscreen stack."", android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId); mAmWmState.assertContainsStack(""Must contain docked stack."", android.server.cts.DOCKED_STACK_ID); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); assertAssistantStackExists(); mAmWmState.assertFrontStack(""Pinned stack should be on top."", android.server.cts.PINNED_STACK_ID); mAmWmState.assertFocusedStack(""Assistant stack should be focused."", android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }",a909e5bb7f0561422e7065c98b6094c31e67917e,2018-02-14 22:39:27,7
615655,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerAssistantStackTests.java,"public void testAssistantStackFinishToPreviousApp() throws java.lang.Exception { launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF, ""true""); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerState.STATE_RESUMED); mAmWmState.assertFocusedActivity(""TestActivity should be resumed"", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertFrontStack(""Fullscreen stack should be on top."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedStack(""Fullscreen stack should be focused."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); }",699f7273d2354cd4da836b49376e80fb21196630,"public void testAssistantStackFinishToPreviousApp() throws java.lang.Exception { launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF, ""true""); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerState.STATE_RESUMED); mAmWmState.assertFocusedActivity(""TestActivity should be resumed"", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertSuitableStackContainsActivity(""TestActivity should go on a suitable fullscreen-type stack."", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); }",d33883c775c9af1dde128d52fc975d5f73457935,"public void testAssistantStackFinishToPreviousApp() throws java.lang.Exception { launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF, ""true""); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerState.STATE_RESUMED); mAmWmState.assertFocusedActivity(""TestActivity should be resumed"", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertActivityInFullscreenTypeStack(""TestActivity should go on a suitable fullscreen-type stack."", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); }",fadc0fa6a7603031c8b7d286198192e3a04ca8a7,2018-02-14 22:39:27,7
615655,hostsidetests_services_activityandwindowmanager_util_src_android_server_cts_ActivityAndWindowManagersState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void assertSuitableStackContainsActivity(java.lang.String msg, java.lang.String activityName) throws java.lang.Exception { final int stackId = mAmState.getTaskByActivityName(activityName).mStackId; assertTrue(mAmState.isSuitableStack(stackId)); assertFrontStack(msg, stackId); assertFocusedStack(msg, stackId); }",1f183ef3d37eb84771ea2e1d1d53073e27262923,"void assertActivityInFullscreenTypeStack(java.lang.String msg, java.lang.String activityName) throws java.lang.Exception { final int stackId = mAmState.getTaskByActivityName(activityName).mStackId; assertTrue(mAmState.isSuitableStack(stackId)); assertFrontStack(msg, stackId); assertFocusedStack(msg, stackId); }",9efeb6ca1513c181c376e515c4d400bbdb141607,2018-02-14 22:39:27,7
615655,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerAssistantStackTests.java,"public void testAssistantStackLaunchNewTaskWithDockedStack() throws java.lang.Exception { if ((!(supportsSplitScreenMultiWindow())) || (!(assistantRunsOnPrimaryDisplay()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack(""Must contain fullscreen stack."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack(""Must contain docked stack."", android.server.cts.DOCKED_STACK_ID); enableAssistant(); assertAssistantStackCanLaunchAndReturnFromNewTask(); disableAssistant(); }",3bc1fe1e5482268876c8ddd3f7f6942964dcf4ca,"public void testAssistantStackLaunchNewTaskWithDockedStack() throws java.lang.Exception { if ((!(supportsSplitScreenMultiWindow())) || (!(assistantRunsOnPrimaryDisplay()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsSuitableStackOnDisplay(""Must contain fullscreen stack."", android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId); mAmWmState.assertContainsStack(""Must contain docked stack."", android.server.cts.DOCKED_STACK_ID); enableAssistant(); assertAssistantStackCanLaunchAndReturnFromNewTask(); disableAssistant(); }",a0f5735de397b2e64dd33c6434da31f94383723f,"public void testAssistantStackLaunchNewTaskWithDockedStack() throws java.lang.Exception { if ((!(supportsSplitScreenMultiWindow())) || (!(assistantRunsOnPrimaryDisplay()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertHasFullscreenTypeStackOnDisplay(""Must contain fullscreen stack."", android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId); mAmWmState.assertContainsStack(""Must contain docked stack."", android.server.cts.DOCKED_STACK_ID); enableAssistant(); assertAssistantStackCanLaunchAndReturnFromNewTask(); disableAssistant(); }",394959d970b06814a7759496511e68d6a8eb1d97,2018-02-14 22:39:27,7
615655,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerAssistantStackTests.java,"private void assertAssistantStackCanLaunchAndReturnFromNewTask() throws java.lang.Exception { enableAssistant(); launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_LAUNCH_NEW_TASK, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ASSISTANT_DISPLAY_ID, java.lang.Integer.toString(android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId)); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedActivity(""TestActivity should be resumed"", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertFrontStack(""Fullscreen stack should be on top."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedStack(""Fullscreen stack should be focused."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); executeShellCommand((""am broadcast -a "" + (android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY_ACTION_FINISH_SELF))); mAmWmState.waitForFocusedStack(mDevice, android.server.cts.ASSISTANT_STACK_ID); mAmWmState.assertFrontStack(""Assistant stack should be on top."", android.server.cts.ASSISTANT_STACK_ID); mAmWmState.assertFocusedStack(""Assistant stack should be focused."", android.server.cts.ASSISTANT_STACK_ID); }",765c6752e17494952553a959d6a14a35e1d9cf82,"private void assertAssistantStackCanLaunchAndReturnFromNewTask() throws java.lang.Exception { enableAssistant(); launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_LAUNCH_NEW_TASK, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ASSISTANT_DISPLAY_ID, java.lang.Integer.toString(android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId)); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedActivity(""TestActivity should be resumed"", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertSuitableStackContainsActivity(""TestActivity should go on a suitable fullscreen-type stack."", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); executeShellCommand((""am broadcast -a "" + (android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY_ACTION_FINISH_SELF))); mAmWmState.waitForFocusedStack(mDevice, android.server.cts.ASSISTANT_STACK_ID); mAmWmState.assertFrontStack(""Assistant stack should be on top."", android.server.cts.ASSISTANT_STACK_ID); mAmWmState.assertFocusedStack(""Assistant stack should be focused."", android.server.cts.ASSISTANT_STACK_ID); }",a3723cc5bd1c8a099e4c741c4290665bd34b63cb,"private void assertAssistantStackCanLaunchAndReturnFromNewTask() throws java.lang.Exception { enableAssistant(); launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_LAUNCH_NEW_TASK, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ASSISTANT_DISPLAY_ID, java.lang.Integer.toString(android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId)); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedActivity(""TestActivity should be resumed"", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertActivityInFullscreenTypeStack(""TestActivity should go on a suitable fullscreen-type stack."", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); executeShellCommand((""am broadcast -a "" + (android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY_ACTION_FINISH_SELF))); mAmWmState.waitForFocusedStack(mDevice, android.server.cts.ASSISTANT_STACK_ID); mAmWmState.assertFrontStack(""Assistant stack should be on top."", android.server.cts.ASSISTANT_STACK_ID); mAmWmState.assertFocusedStack(""Assistant stack should be focused."", android.server.cts.ASSISTANT_STACK_ID); }",2e2cdec1630a8309e2fbdfc9770deab9721f987b,2018-02-14 22:39:27,7
549481,core_java_android_bluetooth_BluetoothHearingAid.java,,,"boolean doBind() { android.content.Intent intent = new android.content.Intent(android.bluetooth.IBluetoothHearingAid.class.getName()); android.content.ComponentName comp = intent.resolveSystemService(mContext.getPackageManager(), 0); intent.setComponent(comp); if ((comp == null) || (!(mContext.bindServiceAsUser(intent, mConnection, 0, android.os.Process.myUserHandle())))) { android.util.Log.e(android.bluetooth.BluetoothHearingAid.TAG, (""Could not bind to Bluetooth Hearing Aid Service with "" + intent)); return false; } return true; }",c67446e33abf8803f82cce0319e0ae047693ced7,"void doBind() { android.content.Intent intent = new android.content.Intent(android.bluetooth.IBluetoothHearingAid.class.getName()); android.content.ComponentName comp = intent.resolveSystemService(mContext.getPackageManager(), 0); intent.setComponent(comp); if ((comp == null) || (!(mContext.bindServiceAsUser(intent, mConnection, 0, android.os.Process.myUserHandle())))) { android.util.Log.e(android.bluetooth.BluetoothHearingAid.TAG, (""Could not bind to Bluetooth Hearing Aid Service with "" + intent)); return; } }",366414646f53f5a22ab68cd37f0b2a972db577ee,2018-02-15 04:14:42,22
549481,packages_SettingsLib_src_com_android_settingslib_bluetooth_HearingAidProfile.java,,,public int getDrawableResource(android.bluetooth.BluetoothClass btClass) { return R.drawable.ic_bt_headphones_a2dp; },daefb0157a701ebfdc38a7b5ed96a1f6d6659ede,public int getDrawableResource(android.bluetooth.BluetoothClass btClass) { return R.drawable.ic_bt_hearing_aid; },29a131e8f632af6a53e8316291bb0976e24b35fd,2018-02-15 04:14:42,22
549481,packages_SettingsLib_src_com_android_settingslib_bluetooth_HearingAidProfile.java,,,"public boolean connect(android.bluetooth.BluetoothDevice device) { if ((mService) == null) return false; java.util.List<android.bluetooth.BluetoothDevice> sinks = getConnectedDevices(); if (sinks != null) { for (android.bluetooth.BluetoothDevice sink : sinks) { if (sink.equals(device)) { android.util.Log.w(com.android.settingslib.bluetooth.HearingAidProfile.TAG, ((""Connecting to device "" + device) + "" : disconnect skipped"")); continue; } mService.disconnect(sink); } } return mService.connect(device); }",59c5249cb025e91d3aca67b39bd875b5f7e28755,public boolean connect(android.bluetooth.BluetoothDevice device) { if ((mService) == null) return false; return mService.connect(device); },1fe04c601ed62b004ac2464b989e49915e4e4d88,2018-02-15 04:14:42,22
601257,services_core_java_com_android_server_ConnectivityService.java,"@java.lang.Override public android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int userId) { enforceAccessPermission(); java.util.HashMap<android.net.Network, android.net.NetworkCapabilities> result = new java.util.HashMap<android.net.Network, android.net.NetworkCapabilities>(); com.android.server.connectivity.NetworkAgentInfo nai = getDefaultNetwork(); android.net.NetworkCapabilities nc = getNetworkCapabilitiesInternal(nai); if (nc != null) { result.put(nai.network, nc); } synchronized(mVpns) { if (!(mLockdownEnabled)) { com.android.server.connectivity.Vpn vpn = mVpns.get(userId); if (vpn != null) { android.net.Network[] networks = vpn.getUnderlyingNetworks(); if (networks != null) { for (android.net.Network network : networks) { nai = getNetworkAgentInfoForNetwork(network); nc = getNetworkCapabilitiesInternal(nai); if (nc != null) { nc.setSingleUid(userId); result.put(network, nc); } } } } } } android.net.NetworkCapabilities[] out = new android.net.NetworkCapabilities[result.size()]; out = result.values().toArray(out); return out; }",c4d01c075c1d313cf7b58b23581bc7fb074b8b5f,"@java.lang.Override public android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int userId) { enforceAccessPermission(); java.util.HashMap<android.net.Network, android.net.NetworkCapabilities> result = new java.util.HashMap<android.net.Network, android.net.NetworkCapabilities>(); com.android.server.connectivity.NetworkAgentInfo nai = getDefaultNetwork(); android.net.NetworkCapabilities nc = getNetworkCapabilitiesInternal(nai); if (nc != null) { result.put(nai.network, nc); } synchronized(mVpns) { if (!(mLockdownEnabled)) { com.android.server.connectivity.Vpn vpn = mVpns.get(userId); if (vpn != null) { android.net.Network[] networks = vpn.getUnderlyingNetworks(); if (networks != null) { for (android.net.Network network : networks) { nai = getNetworkAgentInfoForNetwork(network); nc = getNetworkCapabilitiesInternal(nai); if (nc != null) { nc.setUids(null); result.put(network, nc); } } } } } } android.net.NetworkCapabilities[] out = new android.net.NetworkCapabilities[result.size()]; out = result.values().toArray(out); return out; }",de0e40049f803a4590b8759246163859f6ed1ebf,"@java.lang.Override public android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int userId) { enforceAccessPermission(); java.util.HashMap<android.net.Network, android.net.NetworkCapabilities> result = new java.util.HashMap<android.net.Network, android.net.NetworkCapabilities>(); com.android.server.connectivity.NetworkAgentInfo nai = getDefaultNetwork(); android.net.NetworkCapabilities nc = getNetworkCapabilitiesInternal(nai); if (nc != null) { result.put(nai.network, nc); } synchronized(mVpns) { if (!(mLockdownEnabled)) { com.android.server.connectivity.Vpn vpn = mVpns.get(userId); if (vpn != null) { android.net.Network[] networks = vpn.getUnderlyingNetworks(); if (networks != null) { for (android.net.Network network : networks) { nai = getNetworkAgentInfoForNetwork(network); nc = getNetworkCapabilitiesInternal(nai); if (nc != null) { result.put(network, nc); } } } } } } android.net.NetworkCapabilities[] out = new android.net.NetworkCapabilities[result.size()]; out = result.values().toArray(out); return out; }",0f77bba5ca8427873f449408f9cea3fe3c308d85,2018-02-15 11:25:34,7
604838,tests_net_java_com_android_server_ConnectivityServiceTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onAvailable(android.net.Network network, android.net.NetworkCapabilities networkCapabilities, android.net.LinkProperties linkProperties) { setLastCallback(com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE, network, networkCapabilities); super.onAvailable(network, networkCapabilities, linkProperties); }",5a492671710fc4c00aef278486ceb056ab6206d0,"@java.lang.Override public void onNetworkResumed(android.net.Network network) { setLastCallback(com.android.server.ConnectivityServiceTest.CallbackState.RESUMED, network, null); }",5f303098bf39484e1e348a578dcaa4f802accdeb,2018-02-15 11:25:34,6
601257,services_core_java_com_android_server_ConnectivityService.java,"private static void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType != (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkAgent.networkCapabilities); nc.setSingleUid(nri.mUid); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log((((""sending notification "" + notification) + "" for "") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge((""RemoteException caught trying to send a callback msg for "" + (nri.request))); } }",1beb3e6312ceba2627b6d898747cf6938fd76993,"private static void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType != (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkAgent.networkCapabilities); nc.setUids(null); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log((((""sending notification "" + notification) + "" for "") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge((""RemoteException caught trying to send a callback msg for "" + (nri.request))); } }",55feb7b9c02bf895f0569acc9c4a4542bb24cd71,"private void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType != (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = networkCapabilitiesWithoutUids(networkAgent.networkCapabilities); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log((((""sending notification "" + notification) + "" for "") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge((""RemoteException caught trying to send a callback msg for "" + (nri.request))); } }",2a33aecb79fd0cdaa0adcbeeef7498cfb1b08583,2018-02-15 11:25:34,7
604838,services_core_java_com_android_server_ConnectivityService.java,"private static void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType != (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkCapabilities(networkAgent.networkCapabilities)); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkInfo(networkAgent.networkInfo)); break; } case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkAgent.networkCapabilities); nc.setUids(null); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log((((""sending notification "" + notification) + "" for "") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge((""RemoteException caught trying to send a callback msg for "" + (nri.request))); } }",02b617b3aa97573eae528e3f8d1397b5dafa7801,"private static void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType != (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkCapabilities(networkAgent.networkCapabilities)); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkAgent.networkCapabilities); nc.setUids(null); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log((((""sending notification "" + notification) + "" for "") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge((""RemoteException caught trying to send a callback msg for "" + (nri.request))); } }",eb4541b0489c60ef9895699b2c6cbb64500905f8,"private void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType != (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkCapabilities(networkAgent.networkCapabilities)); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = networkCapabilitiesWithoutUids(networkAgent.networkCapabilities); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log((((""sending notification "" + notification) + "" for "") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge((""RemoteException caught trying to send a callback msg for "" + (nri.request))); } }",1e5a1d8a7b9980753fd0c6cc72b76188ce37f30f,2018-02-15 11:25:34,6
617571,core_tests_coretests_src_android_content_pm_dex_DexMetadataHelperTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testPackageSizeWithPartialPackageLite() throws android.content.pm.PackageParser.PackageParserException, java.io.IOException { java.io.File base = copyApkToToTmpDir(""install_split_base"", R.raw.install_split_base); java.io.File dm = createDexMetadataFile(""install_split_base.apk""); try (java.io.FileInputStream is = new java.io.FileInputStream(base)) { android.content.pm.PackageParser.ApkLite baseApk = android.content.pm.PackageParser.parseApkLite(is.getFD(), base.getAbsolutePath(), 0); android.content.pm.PackageParser.PackageLite pkgLite = new android.content.pm.PackageParser.PackageLite(null, baseApk, null, null, null, null, null, null); org.junit.Assert.assertEquals(dm.length(), android.content.pm.dex.DexMetadataHelper.getPackageDexMetadataSize(pkgLite)); } }",511e9ddabcf26a697f36661ad4badef941047a01,"@org.junit.Test public void testPackageSizeWithPartialPackageLite() throws android.content.pm.PackageParser.PackageParserException, java.io.IOException { java.io.File base = copyApkToToTmpDir(""install_split_base"", R.raw.install_split_base); java.io.File dm = createDexMetadataFile(""install_split_base.apk""); android.content.pm.PackageParser.ApkLite baseApk = android.content.pm.PackageParser.parseApkLite(base, 0); android.content.pm.PackageParser.PackageLite pkgLite = new android.content.pm.PackageParser.PackageLite(null, baseApk, null, null, null, null, null, null); org.junit.Assert.assertEquals(dm.length(), android.content.pm.dex.DexMetadataHelper.getPackageDexMetadataSize(pkgLite)); }",6a977dfbde2c62659038e3a35ab0ea51481c4cdc,2018-02-15 16:17:04,2
617157,telephony_java_android_telephony_ServiceState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void addNetworkRegistrationState(android.telephony.NetworkRegistrationState regStates) { if (regStates == null) return; synchronized(mNetworkRegistrationStates) { for (int i = 0; i < (mNetworkRegistrationStates.size()); i++) { android.telephony.NetworkRegistrationState curRegStates = mNetworkRegistrationStates.get(i); if (((curRegStates.getTransportType()) == (regStates.getTransportType())) && ((curRegStates.getDomain()) == (regStates.getDomain()))) { mNetworkRegistrationStates.remove(i); break; } } mNetworkRegistrationStates.add(regStates); } },6b667475065bf02a1ab4d38b78379c7f012133bc,public void addNetworkRegistrationState(android.telephony.NetworkRegistrationState regState) { if (regState == null) return; synchronized(mNetworkRegistrationStates) { for (int i = 0; i < (mNetworkRegistrationStates.size()); i++) { android.telephony.NetworkRegistrationState curRegState = mNetworkRegistrationStates.get(i); if (((curRegState.getTransportType()) == (regState.getTransportType())) && ((curRegState.getDomain()) == (regState.getDomain()))) { mNetworkRegistrationStates.remove(i); break; } } mNetworkRegistrationStates.add(regState); } },261b063dacf473d3bcf96df8bf9d6c4bae237187,2018-02-15 19:01:59,2
561294,hostsidetests_services_activityandwindowmanager_windowmanager_frametestapp_src_android_server_frametestapp_DialogTestActivity.java,private void testExplicitPositionMatchParent() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; params.x = 100; params.y = 100; }); },bf634d32e89212502d1f6de5355f03517dc1d73c,private void testExplicitPositionMatchParent() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; params.width = (100 - (mOutsets.left)) - (mOutsets.right); params.height = (100 - (mOutsets.bottom)) - (mOutsets.top); }); },a7798ef2c076adf5ef49142b3f006c814df3f4bd,private void testExplicitPositionMatchParent() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; }); },c7358f09c75ea2919ce2db7296657c4d2731bef9,2018-02-15 19:03:32,5
561294,hostsidetests_services_activityandwindowmanager_windowmanager_frametestapp_src_android_server_frametestapp_DialogTestActivity.java,protected void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); },7e5ca8ad6a71a67b88267d6b32a526114321462c,protected void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); android.view.View content = new android.view.View(this); setContentView(content); content.setOnApplyWindowInsetsListener(this); },564ebb6f1b010f50e00ce8f52e3b3c8c9f866892,protected void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); android.view.View content = new android.view.View(this); content.setOnApplyWindowInsetsListener(this); setContentView(content); },6d8d382cbb2854429ed80b2fdfdaab206e19a221,2018-02-15 19:03:32,5
561294,hostsidetests_services_activityandwindowmanager_windowmanager_frametestapp_src_android_server_frametestapp_DialogTestActivity.java,private void testExplicitPositionMatchParentNoLimits() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; params.gravity = (android.view.Gravity.LEFT) | (android.view.Gravity.TOP); params.flags |= WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS; params.x = 100; params.y = 100; }); },53860ee9f6247c23e120d030b4e07436c98bc23f,private void testExplicitPositionMatchParentNoLimits() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; params.gravity = (android.view.Gravity.LEFT) | (android.view.Gravity.TOP); params.flags |= WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS; params.width = (100 - (mOutsets.left)) - (mOutsets.right); params.height = (100 - (mOutsets.bottom)) - (mOutsets.top); }); },13887abca6084eeb6676e922f61cc9ad272029e5,private void testExplicitPositionMatchParentNoLimits() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; params.gravity = (android.view.Gravity.LEFT) | (android.view.Gravity.TOP); params.flags |= WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS; }); },69bcf85a62061ad75b89343594811186895be0bc,2018-02-15 19:03:32,5
611111,src_com_android_bluetooth_pan_PanService.java,"@java.lang.Override protected void cleanup() { com.android.bluetooth.pan.PanService.setPanService(null); if (mNativeAvailable) { cleanupNative(); mNativeAvailable = false; } if ((mPanDevices) != null) { java.util.List<android.bluetooth.BluetoothDevice> devList = getConnectedDevices(); for (android.bluetooth.BluetoothDevice dev : devList) { handlePanDeviceStateChange(dev, mPanIfName, BluetoothProfile.STATE_DISCONNECTED, BluetoothPan.LOCAL_PANU_ROLE, BluetoothPan.REMOTE_NAP_ROLE); } mPanDevices.clear(); } }",29b3e5d53cf7b46af4ca494ed6f07fba7eaf44ce,"@java.lang.Override protected void cleanup() { com.android.bluetooth.pan.PanService.setPanService(null); if (mNativeAvailable) { cleanupNative(); mNativeAvailable = false; } if ((mPanDevices) != null) { for (android.bluetooth.BluetoothDevice device : mPanDevices.keySet()) { com.android.bluetooth.pan.PanService.BluetoothPanDevice panDevice = mPanDevices.get(device); android.util.Log.d(com.android.bluetooth.pan.PanService.TAG, (((""panDevice: "" + panDevice) + "" device address: "") + device)); if ((panDevice != null) && ((panDevice.mState) != (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED))) { handlePanDeviceStateChange(device, mPanIfName, BluetoothProfile.STATE_DISCONNECTED, panDevice.mLocalRole, panDevice.mRemoteRole); break; } } mPanDevices.clear(); } }",6680b02776a2231b7be1d0911c522f837b2efb09,"@java.lang.Override protected void cleanup() { com.android.bluetooth.pan.PanService.setPanService(null); if (mNativeAvailable) { cleanupNative(); mNativeAvailable = false; } if ((mPanDevices) != null) { int[] desiredStates = new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTING, android.bluetooth.BluetoothProfile.STATE_CONNECTED, android.bluetooth.BluetoothProfile.STATE_DISCONNECTING }; java.util.List<android.bluetooth.BluetoothDevice> devList = getDevicesMatchingConnectionStates(desiredStates); for (android.bluetooth.BluetoothDevice device : devList) { com.android.bluetooth.pan.PanService.BluetoothPanDevice panDevice = mPanDevices.get(device); android.util.Log.d(com.android.bluetooth.pan.PanService.TAG, (((""panDevice: "" + panDevice) + "" device address: "") + device)); if (panDevice != null) { handlePanDeviceStateChange(device, mPanIfName, BluetoothProfile.STATE_DISCONNECTED, panDevice.mLocalRole, panDevice.mRemoteRole); } } mPanDevices.clear(); } }",f89f3269430415c04155ae5caf07db18eae5245e,2018-02-15 21:43:45,8
619406,ojluni_src_main_java_java_text_NumberFormat.java,"private static java.text.NumberFormat getInstance(java.util.Locale desiredLocale, int choice) { java.lang.String[] numberPatterns = ((java.lang.String[]) (java.text.NumberFormat.cachedLocaleData.get(desiredLocale))); if (numberPatterns == null) { libcore.icu.LocaleData data = libcore.icu.LocaleData.get(desiredLocale); numberPatterns = new java.lang.String[4]; numberPatterns[java.text.NumberFormat.NUMBERSTYLE] = data.numberPattern; numberPatterns[java.text.NumberFormat.CURRENCYSTYLE] = data.currencyPattern; numberPatterns[java.text.NumberFormat.PERCENTSTYLE] = data.percentPattern; numberPatterns[java.text.NumberFormat.INTEGERSTYLE] = data.integerPattern; java.text.NumberFormat.cachedLocaleData.put(desiredLocale, numberPatterns); } java.text.DecimalFormatSymbols symbols = java.text.DecimalFormatSymbols.getInstance(desiredLocale); int entry = (choice == (java.text.NumberFormat.INTEGERSTYLE)) ? java.text.NumberFormat.NUMBERSTYLE : choice; java.text.DecimalFormat format = new java.text.DecimalFormat(numberPatterns[entry], symbols); if (choice == (java.text.NumberFormat.INTEGERSTYLE)) { format.setMaximumFractionDigits(0); format.setDecimalSeparatorAlwaysShown(false); format.setParseIntegerOnly(true); } else if (choice == (java.text.NumberFormat.CURRENCYSTYLE)) { format.adjustForCurrencyDefaultFractionDigits(); } return format; }",47571dfe32160ebe8306366baa87a910659e66ea,"private static java.text.NumberFormat getInstance(java.util.Locale desiredLocale, int choice) { java.lang.String[] numberPatterns = new java.lang.String[4]; libcore.icu.LocaleData data = libcore.icu.LocaleData.get(desiredLocale); numberPatterns[java.text.NumberFormat.NUMBERSTYLE] = data.numberPattern; numberPatterns[java.text.NumberFormat.CURRENCYSTYLE] = data.currencyPattern; numberPatterns[java.text.NumberFormat.PERCENTSTYLE] = data.percentPattern; numberPatterns[java.text.NumberFormat.INTEGERSTYLE] = data.integerPattern; java.text.DecimalFormatSymbols symbols = java.text.DecimalFormatSymbols.getInstance(desiredLocale); int entry = (choice == (java.text.NumberFormat.INTEGERSTYLE)) ? java.text.NumberFormat.NUMBERSTYLE : choice; java.text.DecimalFormat numberFormat = new java.text.DecimalFormat(numberPatterns[entry], symbols); if (choice == (java.text.NumberFormat.INTEGERSTYLE)) { numberFormat.setMaximumFractionDigits(0); numberFormat.setDecimalSeparatorAlwaysShown(false); numberFormat.setParseIntegerOnly(true); } else if (choice == (java.text.NumberFormat.CURRENCYSTYLE)) { numberFormat.adjustForCurrencyDefaultFractionDigits(); } return numberFormat; }",e817ee04ccd5384f1fdfad22f7b8fe81f2cfc5ec,"private static java.text.NumberFormat getInstance(java.util.Locale desiredLocale, int choice) { java.lang.String[] numberPatterns = new java.lang.String[3]; libcore.icu.LocaleData data = libcore.icu.LocaleData.get(desiredLocale); numberPatterns[java.text.NumberFormat.NUMBERSTYLE] = data.numberPattern; numberPatterns[java.text.NumberFormat.CURRENCYSTYLE] = data.currencyPattern; numberPatterns[java.text.NumberFormat.PERCENTSTYLE] = data.percentPattern; java.text.DecimalFormatSymbols symbols = java.text.DecimalFormatSymbols.getInstance(desiredLocale); int entry = (choice == (java.text.NumberFormat.INTEGERSTYLE)) ? java.text.NumberFormat.NUMBERSTYLE : choice; java.text.DecimalFormat numberFormat = new java.text.DecimalFormat(numberPatterns[entry], symbols); if (choice == (java.text.NumberFormat.INTEGERSTYLE)) { numberFormat.setMaximumFractionDigits(0); numberFormat.setDecimalSeparatorAlwaysShown(false); numberFormat.setParseIntegerOnly(true); } else if (choice == (java.text.NumberFormat.CURRENCYSTYLE)) { numberFormat.adjustForCurrencyDefaultFractionDigits(); } return numberFormat; }",a803ae84d8a9bf20b9021fcf471b2457cf8154c2,2018-02-16 10:51:09,4
600713,src_com_android_bluetooth_map_BluetoothMapService.java,"@java.lang.Override public boolean setPriority(android.bluetooth.BluetoothDevice device, int priority) { com.android.bluetooth.map.BluetoothMapService service = getService(); if (service == null) { return false; } return service.setPriority(device, priority); }",3694c60aef1ea8496fa9f2d4bb1c86f738c46fbf,"@java.lang.Override public boolean setPriority(android.bluetooth.BluetoothDevice device, int priority) { com.android.bluetooth.map.BluetoothMapService service = getService(); if (service == null) { return false; } service.setPriority(device, priority); return true; }",fa029a7142a1fe7b4b984ba36e78eadf0bb19a48,"@java.lang.Override public boolean setPriority(android.bluetooth.BluetoothDevice device, int priority) { com.android.bluetooth.map.BluetoothMapService service = getService(); if (service == null) { return false; } return service.setPriority(device, priority); }",3694c60aef1ea8496fa9f2d4bb1c86f738c46fbf,2018-02-16 16:57:53,7
600713,src_com_android_bluetooth_map_BluetoothMapService.java,"@java.lang.Override protected boolean start() { if (com.android.bluetooth.map.BluetoothMapService.DEBUG) { android.util.Log.d(com.android.bluetooth.map.BluetoothMapService.TAG, ""start()""); } if (isMapStarted()) { android.util.Log.w(com.android.bluetooth.map.BluetoothMapService.TAG, ""start received for already started, ignoring""); return false; } android.os.HandlerThread thread = new android.os.HandlerThread(""BluetoothMapHandler""); thread.start(); android.os.Looper looper = thread.getLooper(); mSessionStatusHandler = new com.android.bluetooth.map.BluetoothMapService.MapServiceMessageHandler(looper); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED); filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED); filter.addAction(BluetoothDevice.ACTION_SDP_RECORD); filter.addAction(com.android.bluetooth.map.BluetoothMapService.ACTION_SHOW_MAPS_SETTINGS); filter.addAction(com.android.bluetooth.map.BluetoothMapService.USER_CONFIRM_TIMEOUT_ACTION); android.content.IntentFilter filterMessageSent = new android.content.IntentFilter(); filterMessageSent.addAction(BluetoothMapContentObserver.ACTION_MESSAGE_SENT); try { filterMessageSent.addDataType(""message/*""); } catch (android.content.IntentFilter.MalformedMimeTypeException e) { android.util.Log.e(com.android.bluetooth.map.BluetoothMapService.TAG, ""Wrong mime type!!!"", e); } if (!(mRegisteredMapReceiver)) { try { registerReceiver(mMapReceiver, filter); registerReceiver(mMapReceiver, filterMessageSent); mRegisteredMapReceiver = true; } catch (java.lang.Exception e) { android.util.Log.e(com.android.bluetooth.map.BluetoothMapService.TAG, ""Unable to register map receiver"", e); } } mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mAppObserver = new com.android.bluetooth.map.BluetoothMapAppObserver(this, this); mEnabledAccounts = mAppObserver.getEnabledAccountItems(); mSmsCapable = getResources().getBoolean(com.android.internal.R.bool.config_sms_capable); createMasInstances(); sendStartListenerMessage((-1)); mServiceStarted = true; return mServiceStarted; }",623e113494d87ad237100211524bae233b94a8ee,"@java.lang.Override protected boolean start() { if (com.android.bluetooth.map.BluetoothMapService.DEBUG) { android.util.Log.d(com.android.bluetooth.map.BluetoothMapService.TAG, ""start()""); } if (mServiceStarted) { android.util.Log.w(com.android.bluetooth.map.BluetoothMapService.TAG, ""start(): Already started, ignoring""); return false; } android.os.HandlerThread thread = new android.os.HandlerThread(""BluetoothMapHandler""); thread.start(); android.os.Looper looper = thread.getLooper(); mSessionStatusHandler = new com.android.bluetooth.map.BluetoothMapService.MapServiceMessageHandler(looper); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED); filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED); filter.addAction(BluetoothDevice.ACTION_SDP_RECORD); filter.addAction(com.android.bluetooth.map.BluetoothMapService.ACTION_SHOW_MAPS_SETTINGS); filter.addAction(com.android.bluetooth.map.BluetoothMapService.USER_CONFIRM_TIMEOUT_ACTION); android.content.IntentFilter filterMessageSent = new android.content.IntentFilter(); filterMessageSent.addAction(BluetoothMapContentObserver.ACTION_MESSAGE_SENT); try { filterMessageSent.addDataType(""message/*""); } catch (android.content.IntentFilter.MalformedMimeTypeException e) { android.util.Log.e(com.android.bluetooth.map.BluetoothMapService.TAG, ""Wrong mime type!!!"", e); } if (!(mRegisteredMapReceiver)) { registerReceiver(mMapReceiver, filter); registerReceiver(mMapReceiver, filterMessageSent); mRegisteredMapReceiver = true; } mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mAppObserver = new com.android.bluetooth.map.BluetoothMapAppObserver(this, this); mSmsCapable = getResources().getBoolean(com.android.internal.R.bool.config_sms_capable); mEnabledAccounts = mAppObserver.getEnabledAccountItems(); createMasInstances(); sendStartListenerMessage((-1)); mServiceStarted = true; return true; }",48d2dade3eda39c877abcb4bcd9ebb47de9dc22b,"@java.lang.Override protected boolean start() { if (com.android.bluetooth.map.BluetoothMapService.DEBUG) { android.util.Log.d(com.android.bluetooth.map.BluetoothMapService.TAG, ""start()""); } android.os.HandlerThread thread = new android.os.HandlerThread(""BluetoothMapHandler""); thread.start(); android.os.Looper looper = thread.getLooper(); mSessionStatusHandler = new com.android.bluetooth.map.BluetoothMapService.MapServiceMessageHandler(looper); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED); filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED); filter.addAction(BluetoothDevice.ACTION_SDP_RECORD); filter.addAction(com.android.bluetooth.map.BluetoothMapService.ACTION_SHOW_MAPS_SETTINGS); filter.addAction(com.android.bluetooth.map.BluetoothMapService.USER_CONFIRM_TIMEOUT_ACTION); android.content.IntentFilter filterMessageSent = new android.content.IntentFilter(); filterMessageSent.addAction(BluetoothMapContentObserver.ACTION_MESSAGE_SENT); try { filterMessageSent.addDataType(""message/*""); } catch (android.content.IntentFilter.MalformedMimeTypeException e) { android.util.Log.e(com.android.bluetooth.map.BluetoothMapService.TAG, ""Wrong mime type!!!"", e); } if (!(mRegisteredMapReceiver)) { registerReceiver(mMapReceiver, filter); registerReceiver(mMapReceiver, filterMessageSent); mRegisteredMapReceiver = true; } mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mAppObserver = new com.android.bluetooth.map.BluetoothMapAppObserver(this, this); mSmsCapable = getResources().getBoolean(com.android.internal.R.bool.config_sms_capable); mEnabledAccounts = mAppObserver.getEnabledAccountItems(); createMasInstances(); sendStartListenerMessage((-1)); mServiceStarted = true; return true; }",06397f1e9f03d8914b44e042a30276e24a5df6b0,2018-02-16 16:57:53,7
600713,src_com_android_bluetooth_map_BluetoothMapService.java,"private synchronized void closeService() { if (com.android.bluetooth.map.BluetoothMapService.DEBUG) { android.util.Log.d(com.android.bluetooth.map.BluetoothMapService.TAG, ""MAP Service closeService in""); } mServiceStarted = false; if ((mBluetoothMnsObexClient) != null) { mBluetoothMnsObexClient.shutdown(); mBluetoothMnsObexClient = null; } if ((mMasInstances.size()) > 0) { for (int i = 0, c = mMasInstances.size(); i < c; i++) { mMasInstances.valueAt(i).shutdown(); } mMasInstances.clear(); } mIsWaitingAuthorization = false; mPermission = android.bluetooth.BluetoothDevice.ACCESS_UNKNOWN; setState(BluetoothMap.STATE_DISCONNECTED); if ((mWakeLock) != null) { mWakeLock.release(); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, ""CloseService(): Release Wake Lock""); } mWakeLock = null; } if ((mSessionStatusHandler) != null) { mSessionStatusHandler.removeCallbacksAndMessages(null); android.os.Looper looper = mSessionStatusHandler.getLooper(); if (looper != null) { looper.quit(); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.i(com.android.bluetooth.map.BluetoothMapService.TAG, ""Quit looper""); } } mSessionStatusHandler = null; if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.i(com.android.bluetooth.map.BluetoothMapService.TAG, ""Remove Handler""); } } com.android.bluetooth.map.BluetoothMapService.sRemoteDevice = null; if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, ""MAP Service closeService out""); } }",51b59395ad18925f38d22aa94ec5719009e5b428,"private synchronized void closeService() { if (com.android.bluetooth.map.BluetoothMapService.DEBUG) { android.util.Log.d(com.android.bluetooth.map.BluetoothMapService.TAG, ""closeService() in""); } if ((mBluetoothMnsObexClient) != null) { mBluetoothMnsObexClient.shutdown(); mBluetoothMnsObexClient = null; } if ((mMasInstances.size()) > 0) { for (int i = 0, c = mMasInstances.size(); i < c; i++) { mMasInstances.valueAt(i).shutdown(); } mMasInstances.clear(); } mIsWaitingAuthorization = false; mPermission = android.bluetooth.BluetoothDevice.ACCESS_UNKNOWN; setState(BluetoothMap.STATE_DISCONNECTED); if ((mWakeLock) != null) { mWakeLock.release(); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, ""CloseService(): Release Wake Lock""); } mWakeLock = null; } com.android.bluetooth.map.BluetoothMapService.sRemoteDevice = null; if ((mSessionStatusHandler) == null) { return; } mSessionStatusHandler.removeCallbacksAndMessages(null); android.os.Looper looper = mSessionStatusHandler.getLooper(); if (looper != null) { looper.quit(); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.i(com.android.bluetooth.map.BluetoothMapService.TAG, ""Quit looper""); } } mSessionStatusHandler = null; if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, ""MAP Service closeService out""); } }",e6a5860ba7afae27d65160b1c78888fa9b2a5618,"private synchronized void closeService() { if (com.android.bluetooth.map.BluetoothMapService.DEBUG) { android.util.Log.d(com.android.bluetooth.map.BluetoothMapService.TAG, ""closeService() in""); } if ((mBluetoothMnsObexClient) != null) { mBluetoothMnsObexClient.shutdown(); mBluetoothMnsObexClient = null; } int numMasInstances = mMasInstances.size(); for (int i = 0; i < numMasInstances; i++) { mMasInstances.valueAt(i).shutdown(); } mMasInstances.clear(); mIsWaitingAuthorization = false; mPermission = android.bluetooth.BluetoothDevice.ACCESS_UNKNOWN; setState(BluetoothMap.STATE_DISCONNECTED); if ((mWakeLock) != null) { mWakeLock.release(); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, ""CloseService(): Release Wake Lock""); } mWakeLock = null; } com.android.bluetooth.map.BluetoothMapService.sRemoteDevice = null; if ((mSessionStatusHandler) == null) { return; } mSessionStatusHandler.removeCallbacksAndMessages(null); android.os.Looper looper = mSessionStatusHandler.getLooper(); if (looper != null) { looper.quit(); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.i(com.android.bluetooth.map.BluetoothMapService.TAG, ""Quit looper""); } } mSessionStatusHandler = null; if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, ""MAP Service closeService out""); } }",61e3549668b83d9069d68d76b6feaa8504735384,2018-02-16 16:57:53,7
600713,src_com_android_bluetooth_map_BluetoothMapService.java,"public boolean setPriority(android.bluetooth.BluetoothDevice device, int priority) { Settings.Global.putInt(getContentResolver(), Settings.Global.getBluetoothMapPriorityKey(device.getAddress()), priority); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, (((""Saved priority "" + device) + "" = "") + priority)); } return true; }",d5e251cb43f80ba21bce85770fb37eaf1f338e0d,"void setPriority(android.bluetooth.BluetoothDevice device, int priority) { Settings.Global.putInt(getContentResolver(), Settings.Global.getBluetoothMapPriorityKey(device.getAddress()), priority); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, (((""Saved priority "" + device) + "" = "") + priority)); } }",161ef9e336f3887597f84115865e945dd6ab29a2,"boolean setPriority(android.bluetooth.BluetoothDevice device, int priority) { if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, (((""Saved priority "" + device) + "" = "") + priority)); } return Settings.Global.putInt(getContentResolver(), Settings.Global.getBluetoothMapPriorityKey(device.getAddress()), priority); }",44ff446de8074b81f4b2a7c359369d8d1622e3b8,2018-02-16 16:57:53,7
620169,src_com_google_android_traceur_QsService.java,"@java.lang.Override public void onClick() { boolean tracingOn = com.android.traceur.AtraceUtils.isTracingOn(); android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(this); prefs.edit().putBoolean(getString(R.string.pref_key_tracing_on), (!tracingOn)).apply(); if (tracingOn) { android.widget.Toast.makeText(getApplicationContext(), getString(R.string.stopping_trace), Toast.LENGTH_SHORT).show(); com.android.traceur.AtraceUtils.atraceDumpAndSendInBackground(this, com.android.traceur.Receiver.getActiveTags(this, prefs, true)); } else { android.widget.Toast.makeText(getApplicationContext(), getString(R.string.starting_trace), Toast.LENGTH_SHORT).show(); } com.android.traceur.Receiver.updateTracing(this, true); com.android.traceur.QsService.requestListeningState(this); update(); }",b2d8287378024a8a6f2a21b85b34b7b2dd2ea6e9,"@java.lang.Override public void onClick() { boolean tracingOn = com.android.traceur.AtraceUtils.isTracingOn(); android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(this); prefs.edit().putBoolean(getString(R.string.pref_key_tracing_on), (!tracingOn)).apply(); if (tracingOn) { android.widget.Toast.makeText(getApplicationContext(), getString(R.string.stopping_trace), Toast.LENGTH_SHORT).show(); com.android.traceur.AtraceUtils.atraceDumpAndSendInBackground(this); } else { android.widget.Toast.makeText(getApplicationContext(), getString(R.string.starting_trace), Toast.LENGTH_SHORT).show(); } com.android.traceur.Receiver.updateTracing(this, true); com.android.traceur.QsService.requestListeningState(this); update(); }",e2ef3d3e09e9a3d2b83c2e930a9d89ff9926d328,"@java.lang.Override public void onClick() { boolean tracingOn = com.android.traceur.AtraceUtils.isTracingOn(); android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(this); prefs.edit().putBoolean(getString(R.string.pref_key_tracing_on), (!tracingOn)).apply(); if (tracingOn) { android.widget.Toast.makeText(getApplicationContext(), getString(R.string.stopping_trace), Toast.LENGTH_SHORT).show(); com.android.traceur.AtraceUtils.atraceDumpAndSend(this); } else { android.widget.Toast.makeText(getApplicationContext(), getString(R.string.starting_trace), Toast.LENGTH_SHORT).show(); } com.android.traceur.Receiver.updateTracing(this, true); com.android.traceur.QsService.requestListeningState(this); update(); }",80eb7f9e1a46ca3102e97909e3418973bdad74b7,2018-02-16 18:37:28,2
620169,src_com_google_android_traceur_MainFragment.java,"@java.lang.Override public boolean onPreferenceClick(android.support.v7.preference.Preference preference) { com.android.traceur.AtraceUtils.atraceDumpAndSendInBackground(getContext(), com.android.traceur.Receiver.getActiveTags(getContext(), mPrefs, true)); return true; }",edde601a903c312de58e96d87f122e170c51425b,@java.lang.Override public boolean onPreferenceClick(android.support.v7.preference.Preference preference) { com.android.traceur.AtraceUtils.atraceDumpAndSendInBackground(getContext()); return true; },9b4d8f6d752748fe5c2eb1ebf4a9c06ddaaa509e,@java.lang.Override public boolean onPreferenceClick(android.support.v7.preference.Preference preference) { com.android.traceur.AtraceUtils.atraceDumpAndSend(getContext()); return true; },6df40b44770799b357625a7a2980e8f4f796c02f,2018-02-16 18:37:28,2
620169,src_com_google_android_traceur_Receiver.java,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context, false); com.android.traceur.QsService.requestListeningState(context); } else if (com.android.traceur.Receiver.FORCE_UPDATE_ACTION.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context, true); } else if (com.android.traceur.Receiver.DUMP_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); if (com.android.traceur.AtraceUtils.isTracingOn()) { com.android.traceur.AtraceUtils.atraceDumpAndSendInBackground(context, com.android.traceur.Receiver.getActiveTags(context, prefs, true)); } else { context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } } else if (com.android.traceur.Receiver.OPEN_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }",9fd2efa875c0c773d49e8cbe2ec5040937678066,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context, false); com.android.traceur.QsService.requestListeningState(context); } else if (com.android.traceur.Receiver.FORCE_UPDATE_ACTION.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context, true); } else if (com.android.traceur.Receiver.DUMP_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); if (com.android.traceur.AtraceUtils.isTracingOn()) { com.android.traceur.AtraceUtils.atraceDumpAndSendInBackground(context); } else { context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } } else if (com.android.traceur.Receiver.OPEN_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }",1594f27e9b5c1b7b632deb3ce0ea6f720f00ce6f,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context, false); com.android.traceur.QsService.requestListeningState(context); } else if (com.android.traceur.Receiver.FORCE_UPDATE_ACTION.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context, true); } else if (com.android.traceur.Receiver.DUMP_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); if (com.android.traceur.AtraceUtils.isTracingOn()) { com.android.traceur.AtraceUtils.atraceDumpAndSend(context); } else { context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } } else if (com.android.traceur.Receiver.OPEN_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }",f28ec76daad96e24c1a6dc08502b0e77e831b4c0,2018-02-16 18:37:28,2
620169,src_com_google_android_traceur_AtraceUtils.java,"public static void atraceDumpAndSendInBackground(final android.content.Context context, final java.lang.String tags) { new android.os.AsyncTask<java.lang.Void, java.lang.Void, java.lang.Void>() { @java.lang.Override protected java.lang.Void doInBackground(java.lang.Void... params) { com.android.traceur.AtraceUtils.atraceDumpAndSend(context, tags, Receiver.BUFFER_SIZE_KB); return null; } }.execute(); }",c98210c18e829de1485e721ec9519e09a1329c4d,"public static void atraceDumpAndSendInBackground(final android.content.Context context) { new android.os.AsyncTask<java.lang.Void, java.lang.Void, java.lang.Void>() { @java.lang.Override protected java.lang.Void doInBackground(java.lang.Void... params) { java.lang.String format = ""yyyy-MM-dd-HH-mm-ss""; java.lang.String now = new java.text.SimpleDateFormat(format, java.util.Locale.US).format(new java.util.Date()); java.io.File file = new java.io.File(com.android.traceur.AtraceUtils.TRACE_DIRECTORY, java.lang.String.format(""trace-%s-%s-%s.ctrace"", Build.BOARD, Build.ID, now)); com.android.traceur.FileSender.postCaptureNotification(context, file); com.android.traceur.AtraceUtils.atraceDump(file); com.android.traceur.FileSender.postNotification(context, file); return null; } }.execute(); }",7d1fded3b636c1b57e25cb310728866fa3aac0d4,"public static void atraceDumpAndSend(final android.content.Context context) { new android.os.AsyncTask<java.lang.Void, java.lang.Void, java.lang.Void>() { @java.lang.Override protected java.lang.Void doInBackground(java.lang.Void... params) { java.lang.String format = ""yyyy-MM-dd-HH-mm-ss""; java.lang.String now = new java.text.SimpleDateFormat(format, java.util.Locale.US).format(new java.util.Date()); java.io.File file = new java.io.File(com.android.traceur.AtraceUtils.TRACE_DIRECTORY, java.lang.String.format(""trace-%s-%s-%s.ctrace"", Build.BOARD, Build.ID, now)); com.android.traceur.FileSender.postCaptureNotification(context, file); com.android.traceur.AtraceUtils.atraceDump(file); com.android.traceur.FileSender.postNotification(context, file); return null; } }.execute(); }",29a97a3395aaf77a016be7ececd03740a40d16a5,2018-02-16 18:37:28,2
601741,src_com_android_bluetooth_pbap_BluetoothPbapService.java,"@java.lang.Override protected boolean stop() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""stop()""); } mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.SHUTDOWN).sendToTarget(); mHandlerThread.quitSafely(); if ((mContactChangeObserver) == null) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Avoid unregister when receiver it is not registered""); return true; } try { unregisterReceiver(mPbapReceiver); getContentResolver().unregisterContentObserver(mContactChangeObserver); mContactChangeObserver = null; } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Unable to unregister pbap receiver"", e); } return true; }",d66cb8c64a1a27cbba50d75248d39a8b15e8a998,"@java.lang.Override protected boolean stop() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""stop()""); } mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.SHUTDOWN).sendToTarget(); mHandlerThread.quitSafely(); if ((mContactChangeObserver) == null) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Avoid unregister when receiver it is not registered""); return true; } unregisterReceiver(mPbapReceiver); getContentResolver().unregisterContentObserver(mContactChangeObserver); mContactChangeObserver = null; return true; }",c71254e8ed9b17ba6f2f1b3c773c4b7e18230e6d,"@java.lang.Override protected boolean stop() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""stop()""); } com.android.bluetooth.pbap.BluetoothPbapService.setBluetoothPbapService(null); if ((mSessionStatusHandler) != null) { mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.SHUTDOWN).sendToTarget(); } if ((mHandlerThread) != null) { mHandlerThread.quitSafely(); } if ((mContactChangeObserver) == null) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Avoid unregister when receiver it is not registered""); return true; } unregisterReceiver(mPbapReceiver); getContentResolver().unregisterContentObserver(mContactChangeObserver); mContactChangeObserver = null; return true; }",b0468c3271c90ef52c3979d911ae2744a5fe3c99,2018-02-16 19:19:47,9
601741,src_com_android_bluetooth_pbap_BluetoothPbapService.java,"@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public void checkOrGetPhonebookPermission(com.android.bluetooth.pbap.PbapStateMachine stateMachine) { android.bluetooth.BluetoothDevice device = stateMachine.getRemoteDevice(); int permission = device.getPhonebookAccessPermission(); if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (""getPhonebookAccessPermission() = "" + permission)); } if (permission == (android.bluetooth.BluetoothDevice.ACCESS_ALLOWED)) { stateMachine.sendMessage(PbapStateMachine.AUTHORIZED); } else if (permission == (android.bluetooth.BluetoothDevice.ACCESS_REJECTED)) { stateMachine.sendMessage(PbapStateMachine.REJECTED); } else { android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_CONNECTION_ACCESS_REQUEST); intent.setClassName(com.android.bluetooth.pbap.BluetoothPbapService.ACCESS_AUTHORITY_PACKAGE, com.android.bluetooth.pbap.BluetoothPbapService.ACCESS_AUTHORITY_CLASS); intent.putExtra(BluetoothDevice.EXTRA_ACCESS_REQUEST_TYPE, BluetoothDevice.REQUEST_TYPE_PHONEBOOK_ACCESS); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.putExtra(BluetoothDevice.EXTRA_PACKAGE_NAME, this.getPackageName()); this.sendOrderedBroadcast(intent, com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM); if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (""waiting for authorization for connection from: "" + device)); } android.os.Message msg = mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.USER_TIMEOUT, stateMachine); mSessionStatusHandler.sendMessageDelayed(msg, com.android.bluetooth.pbap.BluetoothPbapService.USER_CONFIRM_TIMEOUT_VALUE); } }",64276c5b3243404881cc30b4d8dca341dd4e3f64,"@android.support.annotation.VisibleForTesting void checkOrGetPhonebookPermission(com.android.bluetooth.pbap.PbapStateMachine stateMachine) { android.bluetooth.BluetoothDevice device = stateMachine.getRemoteDevice(); int permission = device.getPhonebookAccessPermission(); if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (""getPhonebookAccessPermission() = "" + permission)); } if (permission == (android.bluetooth.BluetoothDevice.ACCESS_ALLOWED)) { stateMachine.sendMessage(PbapStateMachine.AUTHORIZED); } else if (permission == (android.bluetooth.BluetoothDevice.ACCESS_REJECTED)) { stateMachine.sendMessage(PbapStateMachine.REJECTED); } else { android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_CONNECTION_ACCESS_REQUEST); intent.setClassName(com.android.bluetooth.pbap.BluetoothPbapService.ACCESS_AUTHORITY_PACKAGE, com.android.bluetooth.pbap.BluetoothPbapService.ACCESS_AUTHORITY_CLASS); intent.putExtra(BluetoothDevice.EXTRA_ACCESS_REQUEST_TYPE, BluetoothDevice.REQUEST_TYPE_PHONEBOOK_ACCESS); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.putExtra(BluetoothDevice.EXTRA_PACKAGE_NAME, this.getPackageName()); this.sendOrderedBroadcast(intent, com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM); if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (""waiting for authorization for connection from: "" + device)); } android.os.Message msg = mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.USER_TIMEOUT, stateMachine); mSessionStatusHandler.sendMessageDelayed(msg, com.android.bluetooth.pbap.BluetoothPbapService.USER_CONFIRM_TIMEOUT_VALUE); } }",5ed7ff39efd90046440f2fe30edce06f60860b69,"@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public void checkOrGetPhonebookPermission(com.android.bluetooth.pbap.PbapStateMachine stateMachine) { android.bluetooth.BluetoothDevice device = stateMachine.getRemoteDevice(); int permission = device.getPhonebookAccessPermission(); if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (""getPhonebookAccessPermission() = "" + permission)); } if (permission == (android.bluetooth.BluetoothDevice.ACCESS_ALLOWED)) { stateMachine.sendMessage(PbapStateMachine.AUTHORIZED); } else if (permission == (android.bluetooth.BluetoothDevice.ACCESS_REJECTED)) { stateMachine.sendMessage(PbapStateMachine.REJECTED); } else { android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_CONNECTION_ACCESS_REQUEST); intent.setClassName(com.android.bluetooth.pbap.BluetoothPbapService.ACCESS_AUTHORITY_PACKAGE, com.android.bluetooth.pbap.BluetoothPbapService.ACCESS_AUTHORITY_CLASS); intent.putExtra(BluetoothDevice.EXTRA_ACCESS_REQUEST_TYPE, BluetoothDevice.REQUEST_TYPE_PHONEBOOK_ACCESS); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.putExtra(BluetoothDevice.EXTRA_PACKAGE_NAME, this.getPackageName()); this.sendOrderedBroadcast(intent, com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM); if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (""waiting for authorization for connection from: "" + device)); } android.os.Message msg = mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.USER_TIMEOUT, stateMachine); mSessionStatusHandler.sendMessageDelayed(msg, com.android.bluetooth.pbap.BluetoothPbapService.USER_CONFIRM_TIMEOUT_VALUE); } }",64276c5b3243404881cc30b4d8dca341dd4e3f64,2018-02-16 19:19:47,9
613398,telephony_java_android_telephony_TelephonyManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isVideoTelephonyAvailable(int subId) { try { return getITelephony().isVideoTelephonyAvailable(subId); } catch (android.os.RemoteException ex) { return false; } catch (java.lang.NullPointerException ex) { return false; } },924e82b0194ed3ad15cc224f681282e255b51947,"public static java.lang.String getTelephonyProperty(java.lang.String property, java.lang.String defaultVal) { java.lang.String propVal = android.os.SystemProperties.get(property); return propVal == null ? defaultVal : propVal; }",0acc0321117b87a5a0396578232cffab9eb7e51f,2018-02-16 20:35:43,4
613398,telephony_java_android_telephony_TelephonyManager.java,public boolean isWifiCallingAvailable() { try { return getITelephony().isWifiCallingAvailable(); } catch (android.os.RemoteException ex) { return false; } catch (java.lang.NullPointerException ex) { return false; } },a01b4b2805e4bd687bd72470d9a9aad4995c0c33,public boolean isWifiCallingAvailable() { return isWifiCallingAvailable(SubscriptionManager.DEFAULT_SUBSCRIPTION_ID); },78dc775137233abeaa4732a83eade1dc30e773c0,public boolean isVolteAvailable() { try { return getITelephony().isVolteAvailable(getSubId()); } catch (android.os.RemoteException | java.lang.NullPointerException ex) { return false; } },a9c0ccaf0d6d1707c0940c07320083e61b938271,2018-02-16 20:35:43,4
613398,telephony_java_android_telephony_TelephonyManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isWifiCallingAvailable(int subId) { try { return getITelephony().isWifiCallingAvailable(subId); } catch (android.os.RemoteException ex) { return false; } catch (java.lang.NullPointerException ex) { return false; } },ced4ffe986ca65633f2743606c94e5b5e59c022d,public boolean isWifiCallingAvailable() { try { return getITelephony().isWifiCallingAvailable(getSubId()); } catch (android.os.RemoteException | java.lang.NullPointerException ex) { return false; } },349bf90ff1dc7f4357c2080b03be9efa9993519e,2018-02-16 20:35:43,4
613398,telephony_java_android_telephony_TelephonyManager.java,public boolean isVolteAvailable() { try { return getITelephony().isVolteAvailable(); } catch (android.os.RemoteException ex) { return false; } catch (java.lang.NullPointerException ex) { return false; } },8ba62d02b46796bb611cf415faa0920984f166ed,public boolean isVolteAvailable() { return isVolteAvailable(SubscriptionManager.DEFAULT_SUBSCRIPTION_ID); },fc842c2bfdeef5427e65eb213b5c33ce8abc1e6c,public boolean isVideoTelephonyAvailable() { try { return getITelephony().isVideoTelephonyAvailable(getSubId()); } catch (android.os.RemoteException | java.lang.NullPointerException ex) { return false; } },d2defbbd5caba678c01e4be008ed10672680f42d,2018-02-16 20:35:43,4
613398,telephony_java_android_telephony_TelephonyManager.java,public boolean isImsRegistered() { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony == null) return false; return telephony.isImsRegistered(); } catch (android.os.RemoteException ex) { return false; } catch (java.lang.NullPointerException ex) { return false; } },e91ff21a19927b0dd6f718e7527b82c40a14408b,public boolean isImsRegistered() { return isImsRegistered(SubscriptionManager.DEFAULT_SUBSCRIPTION_ID); },1f4e96d3d4fff4dba1a753ce8db35341fb9eeb8f,public boolean isImsRegistered() { try { return getITelephony().isImsRegistered(getSubId()); } catch (android.os.RemoteException | java.lang.NullPointerException ex) { return false; } },6ac354722cf4c259bdddf91e36a9698877d67f10,2018-02-16 20:35:43,4
613398,telephony_java_android_telephony_TelephonyManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isVolteAvailable(int subId) { try { return getITelephony().isVolteAvailable(subId); } catch (android.os.RemoteException | java.lang.NullPointerException ex) { return false; } },258f0dc797b9fc0f0edebd0a6e3448a5bef7982b,"private java.lang.String getNaiBySubscriberId(int subId) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) return null; java.lang.String nai = info.getNaiForSubscriber(subId, mContext.getOpPackageName()); if (android.util.Log.isLoggable(android.telephony.TelephonyManager.TAG, Log.VERBOSE)) { android.telephony.Rlog.v(android.telephony.TelephonyManager.TAG, (""Nai = "" + nai)); } return nai; } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } }",4dd5dd4259449d570bcd9bb2a89f3e7edbbc3ce3,2018-02-16 20:35:43,4
613398,telephony_java_android_telephony_TelephonyManager.java,public boolean isVideoTelephonyAvailable() { try { return getITelephony().isVideoTelephonyAvailable(); } catch (android.os.RemoteException ex) { return false; } catch (java.lang.NullPointerException ex) { return false; } },3db2ed1a856ef93c05f6fd3de30b20c412a882a5,public boolean isVideoTelephonyAvailable() { return isVideoTelephonyAvailable(SubscriptionManager.DEFAULT_SUBSCRIPTION_ID); },6dd9b16664a5a1d401ab2b7c548081b72b1e9048,@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech public int getImsRegTechnologyForMmTel() { try { return getITelephony().getImsRegTechnologyForMmTel(getSubId()); } catch (android.os.RemoteException ex) { return android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NONE; } },dd0aa110e982c59777cb3d3cdba0522dffe5b3b0,2018-02-16 20:35:43,4
613398,telephony_java_android_telephony_TelephonyManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech public int getImsRegTechnologyForMmTel(int subId) { try { return getITelephony().getImsRegTechnologyForMmTel(subId); } catch (android.os.RemoteException ex) { return android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NONE; } },442863f2a090c4d2188e70be462f2e43541df221,"public static void setTelephonyProperty(java.lang.String property, java.lang.String value) { if (value == null) { value = """"; } android.telephony.Rlog.d(android.telephony.TelephonyManager.TAG, ((((""setTelephonyProperty: success"" + "" property="") + property) + "" value: "") + value)); android.os.SystemProperties.set(property, value); }",1531883ffc901349cdc9f8651ef3ebb2e55c6a2f,2018-02-16 20:35:43,4
546445,src_com_android_phone_MobileNetworkSettings.java,"@java.lang.Override public void onCallStateChanged(int state, java.lang.String incomingNumber) { if (com.android.phone.MobileNetworkSettings.MobileNetworkFragment.DBG) com.android.phone.MobileNetworkSettings.MobileNetworkFragment.log((""PhoneStateListener.onCallStateChanged: state="" + state)); boolean enabled = (state == (android.telephony.TelephonyManager.CALL_STATE_IDLE)) && (com.android.ims.ImsManager.isNonTtyOrTtyOnVolteEnabled(getActivity().getApplicationContext())); android.preference.Preference pref = getPreferenceScreen().findPreference(com.android.phone.MobileNetworkSettings.MobileNetworkFragment.BUTTON_4G_LTE_KEY); if (pref != null) pref.setEnabled((enabled && (hasActiveSubscriptions()))); }",44edcf22180ba7a52145d25b1d2de4d7a829be33,"@java.lang.Override public void onCallStateChanged(int state, java.lang.String incomingNumber) { if (com.android.phone.MobileNetworkSettings.MobileNetworkFragment.DBG) com.android.phone.MobileNetworkSettings.MobileNetworkFragment.log((""PhoneStateListener.onCallStateChanged: state="" + state)); boolean enabled = ((mTelephonyManager.getCallState()) == (android.telephony.TelephonyManager.CALL_STATE_IDLE)) && (com.android.ims.ImsManager.isNonTtyOrTtyOnVolteEnabled(getActivity().getApplicationContext())); android.preference.Preference pref = getPreferenceScreen().findPreference(com.android.phone.MobileNetworkSettings.MobileNetworkFragment.BUTTON_4G_LTE_KEY); if (pref != null) pref.setEnabled((enabled && (hasActiveSubscriptions()))); updateVideoCallState(); }",adfb6f3dd149fe873497c9a27d85afddfbdf06c9,"@java.lang.Override public void onCallStateChanged(int state, java.lang.String incomingNumber) { if (com.android.phone.MobileNetworkSettings.MobileNetworkFragment.DBG) com.android.phone.MobileNetworkSettings.MobileNetworkFragment.log((""PhoneStateListener.onCallStateChanged: state="" + state)); int subId = ((mPhone) != null) ? mPhone.getSubId() : android.telephony.SubscriptionManager.INVALID_SUBSCRIPTION_ID; android.os.PersistableBundle carrierConfig = com.android.phone.PhoneGlobals.getInstance().getCarrierConfigForSubId(subId); boolean enabled = is4gLtePrefEnabled(carrierConfig); android.preference.Preference pref = getPreferenceScreen().findPreference(com.android.phone.MobileNetworkSettings.MobileNetworkFragment.BUTTON_4G_LTE_KEY); if (pref != null) pref.setEnabled((enabled && (hasActiveSubscriptions()))); updateVideoCallState(); }",b1eb31f7b4e759556ea3021e630839bd9ae718b1,2018-02-16 20:50:26,3
607217,tests_unit_src_com_android_bluetooth_a2dp_A2dpServiceTest.java,"private void stopService() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.a2dp.A2dpService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); verify(mAdapterService, timeout(com.android.bluetooth.a2dp.A2dpServiceTest.TIMEOUT_MS)).onProfileServiceStateChanged(eq(com.android.bluetooth.a2dp.A2dpService.class.getName()), eq(BluetoothAdapter.STATE_OFF)); mA2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); org.junit.Assert.assertNull(mA2dpService); }",0920ad84b6dd63ba534bb1d0284cd541ebc998da,"private void stopService() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.a2dp.A2dpService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); org.mockito.ArgumentCaptor<com.android.bluetooth.a2dp.A2dpService> argument = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.a2dp.A2dpService.class); verify(mAdapterService, timeout(com.android.bluetooth.a2dp.A2dpServiceTest.TIMEOUT_MS)).onProfileServiceStateChanged(argument.capture(), eq(BluetoothAdapter.STATE_ON)); org.junit.Assert.assertEquals(argument.getValue().getClass().getName(), com.android.bluetooth.a2dp.A2dpService.class.getName()); org.junit.Assert.assertEquals(argument.getValue(), mA2dpService); mA2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); org.junit.Assert.assertNull(mA2dpService); }",c9f3c430cc1b06464a58e1d97d776e8606acba59,"private void stopService() throws java.util.concurrent.TimeoutException { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.a2dp.A2dpService.class); mA2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); org.junit.Assert.assertNull(mA2dpService); }",126ba583dd741808f6050d321a7eb47039399451,2018-02-17 01:07:21,8
607217,tests_unit_src_com_android_bluetooth_a2dp_A2dpServiceTest.java,"private void startService() throws java.util.concurrent.TimeoutException { android.content.Intent startIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.a2dp.A2dpService.class); startIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); startIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_ON); mServiceRule.startService(startIntent); verify(mAdapterService, timeout(com.android.bluetooth.a2dp.A2dpServiceTest.TIMEOUT_MS)).onProfileServiceStateChanged(eq(com.android.bluetooth.a2dp.A2dpService.class.getName()), eq(BluetoothAdapter.STATE_ON)); mA2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); org.junit.Assert.assertNotNull(mA2dpService); }",94c55af654c57c788388012a3610d858dbe61a7e,"private void startService() throws java.util.concurrent.TimeoutException { android.content.Intent startIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.a2dp.A2dpService.class); startIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); startIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_ON); mServiceRule.startService(startIntent); org.mockito.ArgumentCaptor<com.android.bluetooth.a2dp.A2dpService> argument = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.a2dp.A2dpService.class); verify(mAdapterService, timeout(com.android.bluetooth.a2dp.A2dpServiceTest.TIMEOUT_MS)).onProfileServiceStateChanged(argument.capture(), eq(BluetoothAdapter.STATE_ON)); mA2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); org.junit.Assert.assertNotNull(mA2dpService); org.junit.Assert.assertEquals(argument.getValue(), mA2dpService); }",eb7a859b19da631d967eae3241dafaceb4017803,"private void startService() throws java.util.concurrent.TimeoutException { com.android.bluetooth.TestUtils.startService(mServiceRule, com.android.bluetooth.a2dp.A2dpService.class); mA2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); org.junit.Assert.assertNotNull(mA2dpService); }",0bf7abee49295449be9464cfb05f76cd5bf66992,2018-02-17 01:07:21,8
607217,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,"@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); verify(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(eq(com.android.bluetooth.hfp.HeadsetService.class.getName()), eq(BluetoothAdapter.STATE_OFF)); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sAdapterService); mCurrentDevice = null; }",86d43beef9d52f3d757880589d12ee7714a61ad8,"@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); org.mockito.ArgumentCaptor<com.android.bluetooth.hfp.HeadsetService> argument = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.hfp.HeadsetService.class); verify(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(argument.capture(), eq(BluetoothAdapter.STATE_OFF)); org.junit.Assert.assertEquals(argument.getValue(), mHeadsetService); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sAdapterService); mCurrentDevice = null; }",0eb240cf364b6cf04b6483f09c0e5341ddc4487d,"@org.junit.After public void tearDown() throws java.lang.Exception { if (!(mTargetContext.getResources().getBoolean(R.bool.profile_supported_hs_hfp))) { return; } com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfp.HeadsetService.class); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); java.lang.reflect.Method method = com.android.bluetooth.hfp.HeadsetObjectsFactory.class.getDeclaredMethod(""setInstanceForTesting"", com.android.bluetooth.hfp.HeadsetObjectsFactory.class); method.setAccessible(true); method.invoke(null, ((com.android.bluetooth.hfp.HeadsetObjectsFactory) (null))); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }",2956c0ab31fe2a396b5e30350e3da70ad92b92e8,2018-02-17 01:07:21,8
607217,tests_unit_src_com_android_bluetooth_btservice_ProfileServiceTest.java,"@org.junit.Test public void testRepeatedEnableDisableSingly() throws java.util.concurrent.TimeoutException { for (java.lang.Class profile : mProfiles) { android.util.Log.d(""Singly"", (""profile = "" + (profile.getSimpleName()))); for (int i = 0; i < 5; i++) { setProfileState(profile, BluetoothAdapter.STATE_ON); verify(mMockAdapterService, timeout(com.android.bluetooth.btservice.ProfileServiceTest.PROFILE_START_MILLIS).times((i + 1))).onProfileServiceStateChanged(eq(profile.getName()), eq(BluetoothAdapter.STATE_ON)); android.util.Log.d(""Singly"", (((""profile = "" + (profile.getSimpleName())) + "": enabled "") + i)); setProfileState(profile, BluetoothAdapter.STATE_OFF); verify(mMockAdapterService, timeout(com.android.bluetooth.btservice.ProfileServiceTest.PROFILE_START_MILLIS).times((i + 1))).onProfileServiceStateChanged(eq(profile.getName()), eq(BluetoothAdapter.STATE_OFF)); android.util.Log.d(""Singly"", ((("" "" + (profile.getSimpleName())) + "": disabled "") + i)); } } }",d2475d3312c8d3887fc4065b0462c0bb19a77f7b,"@org.junit.Test public void testRepeatedEnableDisableSingly() throws java.util.concurrent.TimeoutException { for (java.lang.Class profile : mProfiles) { for (int i = 0; i < 5; i++) { setProfileState(profile, BluetoothAdapter.STATE_ON); org.mockito.ArgumentCaptor<com.android.bluetooth.btservice.ProfileService> start = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.btservice.ProfileService.class); verify(mMockAdapterService, timeout(com.android.bluetooth.btservice.ProfileServiceTest.PROFILE_START_MILLIS).times((i + 1))).onProfileServiceStateChanged(start.capture(), eq(BluetoothAdapter.STATE_ON)); setProfileState(profile, BluetoothAdapter.STATE_OFF); org.mockito.ArgumentCaptor<com.android.bluetooth.btservice.ProfileService> stop = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.btservice.ProfileService.class); verify(mMockAdapterService, timeout(com.android.bluetooth.btservice.ProfileServiceTest.PROFILE_START_MILLIS).times((2 * (i + 1)))).onProfileServiceStateChanged(stop.capture(), eq(BluetoothAdapter.STATE_OFF)); org.junit.Assert.assertEquals(start.getValue(), stop.getValue()); } } }",36324c2e4e54a4dc2eaea318365695b2547bd931,"@org.junit.Test public void testRepeatedEnableDisableSingly() throws java.util.concurrent.TimeoutException { int profileNumber = 0; for (java.lang.Class profile : mProfiles) { for (int i = 0; i < (com.android.bluetooth.btservice.ProfileServiceTest.NUM_REPEATS); i++) { setProfileState(profile, BluetoothAdapter.STATE_ON); org.mockito.ArgumentCaptor<com.android.bluetooth.btservice.ProfileService> start = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.btservice.ProfileService.class); verify(mMockAdapterService, timeout(com.android.bluetooth.btservice.ProfileServiceTest.PROFILE_START_MILLIS).times(((((com.android.bluetooth.btservice.ProfileServiceTest.NUM_REPEATS) * profileNumber) + i) + 1))).onProfileServiceStateChanged(start.capture(), eq(BluetoothAdapter.STATE_ON)); setProfileState(profile, BluetoothAdapter.STATE_OFF); org.mockito.ArgumentCaptor<com.android.bluetooth.btservice.ProfileService> stop = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.btservice.ProfileService.class); verify(mMockAdapterService, timeout(com.android.bluetooth.btservice.ProfileServiceTest.PROFILE_START_MILLIS).times(((((com.android.bluetooth.btservice.ProfileServiceTest.NUM_REPEATS) * profileNumber) + i) + 1))).onProfileServiceStateChanged(stop.capture(), eq(BluetoothAdapter.STATE_OFF)); org.junit.Assert.assertEquals(start.getValue(), stop.getValue()); } profileNumber += 1; } }",30a35f63fa3bc7ac22c45d5327c7691f9eaf5dff,2018-02-17 01:07:21,8
607217,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceTest.java,"@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(eq(com.android.bluetooth.hfp.HeadsetService.class.getName()), eq(BluetoothAdapter.STATE_OFF)); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService); mStateMachines.clear(); mCurrentDevice = null; }",7a1a6db993c812d92a94cdeb8c75b0d97e451625,"@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); org.mockito.ArgumentCaptor<com.android.bluetooth.hfp.HeadsetService> argument = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.hfp.HeadsetService.class); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(argument.capture(), eq(BluetoothAdapter.STATE_OFF)); org.junit.Assert.assertEquals(argument.getValue(), mHeadsetService); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService); mStateMachines.clear(); mCurrentDevice = null; }",cba019455486807ee897157cf51a0aa742448de1,"@org.junit.After public void tearDown() throws java.lang.Exception { if (!(mTargetContext.getResources().getBoolean(R.bool.profile_supported_hs_hfp))) { return; } com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfp.HeadsetService.class); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); mStateMachines.clear(); mCurrentDevice = null; java.lang.reflect.Method method = com.android.bluetooth.hfp.HeadsetObjectsFactory.class.getDeclaredMethod(""setInstanceForTesting"", com.android.bluetooth.hfp.HeadsetObjectsFactory.class); method.setAccessible(true); method.invoke(null, ((com.android.bluetooth.hfp.HeadsetObjectsFactory) (null))); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }",d92111b27bc8bc837280aeb4fb7015e24299c65d,2018-02-17 01:07:21,8
607217,src_com_android_bluetooth_btservice_AdapterService.java,public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { synchronized(mProfiles) { mProfiles.remove(profile); } },4659afdc57f814f370faf4e1e9556c0781b5e9ef,public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_STATE_CHANGED); m.obj = profile; m.arg1 = com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_UNREGISTERED; mHandler.sendMessage(m); },5e4679ba051c36d8c2125be68f06d9234b7f3cdf,"public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_UNREGISTERED, profile); mHandler.sendMessage(m); }",fd25d49587844c0e99a61f5b6b5dfed7eab0c7d4,2018-02-17 01:07:21,8
607217,src_com_android_bluetooth_btservice_AdapterService.java,public void addProfile(com.android.bluetooth.btservice.ProfileService profile) { synchronized(mProfiles) { if (!(mProfiles.contains(profile))) { mProfiles.add(profile); } } },0a18e91fb2570af6f1eb904fcd4bfcc115214363,public void addProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_STATE_CHANGED); m.obj = profile; m.arg1 = com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_REGISTERED; mHandler.sendMessage(m); },7e105ede4d18450642c1510b0e648c9fe244a14e,"public void addProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_REGISTERED, profile); mHandler.sendMessage(m); }",fc45c39e0dc892c497875b8bbf4e9f3a6e12f52b,2018-02-17 01:07:21,8
607217,src_com_android_bluetooth_btservice_AdapterService.java,"boolean stopProfileServices() { java.lang.Class[] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles(); if ((mProfilesStarted) && ((supportedProfileServices.length) > 0)) { setProfileServiceState(supportedProfileServices, BluetoothAdapter.STATE_OFF); return true; } debugLog(""stopProfileServices() - No profiles services to stop or already stopped.""); return false; }",2600666b484ef5d4c052c7d4f7bfd8570754c800,"void stopProfileServices() { java.lang.Class[] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles(); if ((mRunningProfiles.size()) > 0) { setAllProfileServiceStates(supportedProfileServices, BluetoothAdapter.STATE_OFF); } debugLog(""stopProfileServices() - No profiles services to stop or already stopped.""); }",3008688be4d351ca4ebf38b4f0732721ae3e2cef,"void stopProfileServices() { java.lang.Class[] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles(); if ((mRunningProfiles.size()) == 0) { debugLog(""stopProfileServices() - No profiles services to stop or already stopped.""); return; } setAllProfileServiceStates(supportedProfileServices, BluetoothAdapter.STATE_OFF); }",904b3d95c18d6bb7a909083e9f4690c9adfd2f46,2018-02-17 01:07:21,8
607217,src_com_android_bluetooth_btservice_AdapterService.java,"public void onProfileServiceStateChanged(java.lang.String serviceName, int state) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_STATE_CHANGED); m.obj = serviceName; m.arg1 = state; mHandler.sendMessage(m); }",253c9ea71820e1b729ea69b80e74d9b8ef465b8a,"public void onProfileServiceStateChanged(com.android.bluetooth.btservice.ProfileService profile, int state) { if ((state != (android.bluetooth.BluetoothAdapter.STATE_ON)) && (state != (android.bluetooth.BluetoothAdapter.STATE_OFF))) { android.util.Log.e(com.android.bluetooth.btservice.AdapterService.TAG, (""onProfileServiceStateChanged: Unhandled "" + (android.bluetooth.BluetoothAdapter.nameForState(state)))); return; } android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_STATE_CHANGED); m.obj = profile; m.arg1 = state; mHandler.sendMessage(m); }",9d3d14fd0b742e97f0648e36075e993bdd2fff3e,"public void onProfileServiceStateChanged(com.android.bluetooth.btservice.ProfileService profile, int state) { if ((state != (android.bluetooth.BluetoothAdapter.STATE_ON)) && (state != (android.bluetooth.BluetoothAdapter.STATE_OFF))) { throw new java.lang.IllegalArgumentException(android.bluetooth.BluetoothAdapter.nameForState(state)); } android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_STATE_CHANGED); m.obj = profile; m.arg1 = state; mHandler.sendMessage(m); }",09472cdb695314f1e5c5ab02ef690a3e6572a4b1,2018-02-17 01:07:21,8
607217,src_com_android_bluetooth_btservice_AdapterService.java,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println(""Skipping dump in APP SERVICES, see bluetooth_manager section.""); writer.println(""Use --print argument for dumpsys direct from AdapterService.""); return; } verboseLog((""dumpsys arguments, check for protobuf output: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].startsWith(""--proto"")) { if (args[0].equals(""--proto-bin"")) { dumpMetrics(fd); } else if (args[0].equals(""--proto-java-bin"")) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, (""proto-java-bin dump, empty metrics size is "" + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog(""Unable to write Java protobuf to file descriptor.""); } } return; } writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",fb1a555f3d4c79f3b12e492c82bc1881b812cc15,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println(""Skipping dump in APP SERVICES, see bluetooth_manager section.""); writer.println(""Use --print argument for dumpsys direct from AdapterService.""); return; } verboseLog((""dumpsys arguments, check for protobuf output: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].startsWith(""--proto"")) { if (args[0].equals(""--proto-bin"")) { dumpMetrics(fd); } else if (args[0].equals(""--proto-java-bin"")) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, (""proto-java-bin dump, empty metrics size is "" + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog(""Unable to write Java protobuf to file descriptor.""); } } return; } writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dump(sb); } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",25ee67c469f3cc91e75415564c89f4ae08be2c32,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println(""Skipping dump in APP SERVICES, see bluetooth_manager section.""); writer.println(""Use --print argument for dumpsys direct from AdapterService.""); return; } verboseLog((""dumpsys arguments, check for protobuf output: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].equals(""--proto-bin"")) { dumpMetrics(fd); return; } writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dump(sb); } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",043367c7ce1ebacb54a966fbfdb2600d93161de0,2018-02-17 01:07:21,8
616958,core_java_com_android_internal_os_ZygoteServer.java,"void registerServerSocket(java.lang.String socketName) { if ((mServerSocket) == null) { int fileDesc; final java.lang.String fullSocketName = (com.android.internal.os.ZygoteServer.ANDROID_SOCKET_PREFIX) + socketName; try { java.lang.String env = java.lang.System.getenv(fullSocketName); fileDesc = java.lang.Integer.parseInt(env); } catch (java.lang.RuntimeException ex) { throw new java.lang.RuntimeException((fullSocketName + "" unset or invalid""), ex); } try { java.io.FileDescriptor fd = new java.io.FileDescriptor(); fd.setInt$(fileDesc); mServerSocket = new android.net.LocalServerSocket(fd); } catch (java.io.IOException ex) { throw new java.lang.RuntimeException(((""Error binding to local socket '"" + fileDesc) + ""'""), ex); } } }",7275abf1084174a4f6e448a8c51f0196c4f79c93,"void registerServerSocket(java.lang.String socketName) { if ((mServerSocket) == null) { int fileDesc; final java.lang.String fullSocketName = (com.android.internal.os.ZygoteServer.ANDROID_SOCKET_PREFIX) + socketName; try { java.lang.String env = java.lang.System.getenv(fullSocketName); fileDesc = java.lang.Integer.parseInt(env); } catch (java.lang.RuntimeException ex) { throw new java.lang.RuntimeException((fullSocketName + "" unset or invalid""), ex); } try { java.io.FileDescriptor fd = new java.io.FileDescriptor(); fd.setInt$(fileDesc); mServerSocket = new android.net.LocalServerSocket(fd); mCloseSocketFd = true; } catch (java.io.IOException ex) { throw new java.lang.RuntimeException(((""Error binding to local socket '"" + fileDesc) + ""'""), ex); } } }",46ed2db8f933b3576475028b15e59a9ccd24aa5f,"void registerServerSocketFromEnv(java.lang.String socketName) { if ((mServerSocket) == null) { int fileDesc; final java.lang.String fullSocketName = (com.android.internal.os.ZygoteServer.ANDROID_SOCKET_PREFIX) + socketName; try { java.lang.String env = java.lang.System.getenv(fullSocketName); fileDesc = java.lang.Integer.parseInt(env); } catch (java.lang.RuntimeException ex) { throw new java.lang.RuntimeException((fullSocketName + "" unset or invalid""), ex); } try { java.io.FileDescriptor fd = new java.io.FileDescriptor(); fd.setInt$(fileDesc); mServerSocket = new android.net.LocalServerSocket(fd); mCloseSocketFd = true; } catch (java.io.IOException ex) { throw new java.lang.RuntimeException(((""Error binding to local socket '"" + fileDesc) + ""'""), ex); } } }",c21ed2335f112659957c38beffbaa1b83d2db214,2018-02-17 01:39:52,5
616958,core_java_com_android_internal_os_ZygoteInit.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static final java.lang.Runnable childZygoteInit(int targetSdkVersion, java.lang.String[] argv, java.lang.ClassLoader classLoader) { final com.android.internal.os.RuntimeInit.Arguments args = new com.android.internal.os.RuntimeInit.Arguments(argv); return com.android.internal.os.RuntimeInit.findStaticMain(args.startClass, args.startArgs, classLoader); }",e9f2c4eb95a01b83d180145424482791a34fa156,"static final java.lang.Runnable childZygoteInit(int targetSdkVersion, java.lang.String[] argv, java.lang.ClassLoader classLoader) { com.android.internal.os.RuntimeInit.Arguments args = new com.android.internal.os.RuntimeInit.Arguments(argv); return com.android.internal.os.RuntimeInit.findStaticMain(args.startClass, args.startArgs, classLoader); }",d72609ba35266a5684a9d3f6ee7d552115f52306,2018-02-17 01:39:52,5
616958,core_java_android_os_ZygoteProcess.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public android.os.ZygoteProcess.ChildZygoteProcess startChildZygote(final java.lang.String processClass, final java.lang.String niceName, int uid, int gid, int[] gids, int runtimeFlags, int targetSdkVersion, java.lang.String seInfo, java.lang.String abi, java.lang.String instructionSet, java.lang.String invokeWith) { final android.net.LocalSocketAddress serverAddress = new android.net.LocalSocketAddress(((processClass + ""/"") + (java.util.UUID.randomUUID().toString()))); final java.lang.String[] extraArgs = new java.lang.String[]{ (com.android.internal.os.Zygote.CHILD_ZYGOTE_SOCKET_NAME_ARG) + (serverAddress.getName()) }; android.os.Process.ProcessStartResult result; try { result = startViaZygote(processClass, niceName, uid, gid, gids, runtimeFlags, 0, targetSdkVersion, seInfo, abi, instructionSet, null, invokeWith, true, extraArgs); } catch (android.os.ZygoteStartFailedEx ex) { throw new java.lang.RuntimeException(""Starting child-zygote through Zygote failed"", ex); } android.os.ZygoteProcess zp = new android.os.ZygoteProcess(serverAddress, null); return new android.os.ZygoteProcess.ChildZygoteProcess(zp, result); }",8b147f9520b149eed71dc117b02474fda1630848,"public android.os.ChildZygoteProcess startChildZygote(final java.lang.String processClass, final java.lang.String niceName, int uid, int gid, int[] gids, int runtimeFlags, java.lang.String seInfo, java.lang.String abi, java.lang.String instructionSet) { final android.net.LocalSocketAddress serverAddress = new android.net.LocalSocketAddress(((processClass + ""/"") + (java.util.UUID.randomUUID().toString()))); final java.lang.String[] extraArgs = new java.lang.String[]{ (com.android.internal.os.Zygote.CHILD_ZYGOTE_SOCKET_NAME_ARG) + (serverAddress.getName()) }; android.os.Process.ProcessStartResult result; try { result = startViaZygote(processClass, niceName, uid, gid, gids, runtimeFlags, 0, 0, seInfo, abi, instructionSet, null, null, true, extraArgs); } catch (android.os.ZygoteStartFailedEx ex) { throw new java.lang.RuntimeException(""Starting child-zygote through Zygote failed"", ex); } return new android.os.ChildZygoteProcess(serverAddress, result.pid); }",d1470f98b50eb6528b2eb0fc9b48b2e213773f20,2018-02-17 01:39:52,5
616958,core_java_com_android_internal_os_ZygoteServer.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void setServerSocket(android.net.LocalServerSocket socket) { if ((mServerSocket) != null) { throw new java.lang.IllegalStateException(""Server socket already specified""); } mServerSocket = socket; mCloseSocketFd = false; }",89f30bbdde3d22b8e08d04ec15a69fc3a8ad2cac,"void registerServerSocketAtAbstractName(java.lang.String socketName) { if ((mServerSocket) == null) { try { mServerSocket = new android.net.LocalServerSocket(socketName); mCloseSocketFd = false; } catch (java.io.IOException ex) { throw new java.lang.RuntimeException(((""Error binding to abstract socket '"" + socketName) + ""'""), ex); } } }",a0d92a127812f9b0cb8bbeb538f86cad99b991cb,2018-02-17 01:39:52,5
620746,src_vogar_android_DeviceRuntime.java,"@java.lang.Override public vogar.commands.VmCommandBuilder newVmCommandBuilder(vogar.Action action, java.io.File workingDirectory) { java.util.List<java.lang.String> vmCommand = new java.util.ArrayList<java.lang.String>(); com.google.common.collect.Iterables.addAll(vmCommand, run.invokeWith()); vmCommand.add(run.vmCommand); vogar.commands.VmCommandBuilder vmCommandBuilder = new vogar.commands.VmCommandBuilder(run.log).env(""ANDROID_DATA"", run.getAndroidDataPath()).workingDirectory(workingDirectory).vmCommand(vmCommand).vmArgs((""-Duser.home="" + (run.deviceUserHome))).maxLength(4096); if ((run.debugPort) != null) { vmCommandBuilder.vmArgs(""-Xcompiler-option"", ""--debuggable""); } if ((modeId) == (vogar.ModeId.APP_PROCESS)) { return vmCommandBuilder.vmArgs(action.getUserDir().getPath()).classpathViaProperty(true); } vmCommandBuilder.vmArgs((""-Duser.name="" + (deviceUserNameSupplier.get()))).vmArgs(""-Duser.language=en"").vmArgs(""-Duser.region=US""); if ((!(run.benchmark)) && (run.checkJni)) { vmCommandBuilder.vmArgs(""-Xcheck:jni""); } vmCommandBuilder.vmArgs(""-Xjnigreflimit:2000""); return vmCommandBuilder; }",752b04aa073d27b437a6650e5ee762750a2f691e,"@java.lang.Override public vogar.commands.VmCommandBuilder newVmCommandBuilder(vogar.Action action, java.io.File workingDirectory) { java.util.List<java.lang.String> vmCommand = new java.util.ArrayList<java.lang.String>(); com.google.common.collect.Iterables.addAll(vmCommand, run.invokeWith()); vmCommand.add(run.vmCommand); vogar.commands.VmCommandBuilder vmCommandBuilder = new vogar.commands.VmCommandBuilder(run.log).env(""ANDROID_DATA"", run.getAndroidDataPath()).workingDirectory(workingDirectory).vmCommand(vmCommand).vmArgs((""-Duser.home="" + (run.deviceUserHome))).maxLength(4096); if ((run.debugPort) != null) { vmCommandBuilder.vmArgs(""-Xcompiler-option"", ""--debuggable"", ""-XjdwpProvider:internal"", ((""-XjdwpOptions:transport=dt_socket,address="" + (run.debugPort)) + "",server=y,suspend=y"")); } if ((modeId) == (vogar.ModeId.APP_PROCESS)) { return vmCommandBuilder.vmArgs(action.getUserDir().getPath()).classpathViaProperty(true); } vmCommandBuilder.vmArgs((""-Duser.name="" + (deviceUserNameSupplier.get()))).vmArgs(""-Duser.language=en"").vmArgs(""-Duser.region=US""); if ((!(run.benchmark)) && (run.checkJni)) { vmCommandBuilder.vmArgs(""-Xcheck:jni""); } vmCommandBuilder.vmArgs(""-Xjnigreflimit:2000""); return vmCommandBuilder; }",174ebd3d1f939db25a1f6744a1ad8458adc6dfb7,"@java.lang.Override public vogar.commands.VmCommandBuilder newVmCommandBuilder(vogar.Action action, java.io.File workingDirectory) { java.util.List<java.lang.String> vmCommand = new java.util.ArrayList<java.lang.String>(); com.google.common.collect.Iterables.addAll(vmCommand, run.invokeWith()); vmCommand.add(run.vmCommand); vogar.commands.VmCommandBuilder vmCommandBuilder = new vogar.commands.VmCommandBuilder(run.log).env(""ANDROID_DATA"", run.getAndroidDataPath()).workingDirectory(workingDirectory).vmCommand(vmCommand).vmArgs((""-Duser.home="" + (run.deviceUserHome))).maxLength(4096); if ((run.debugPort) != null) { vmCommandBuilder.vmArgs(""-Xcompiler-option"", ""--debuggable"", ""-Xplugin:libopenjdkjvmti.so"", ((""-agentpath:libjdwp.so=transport=dt_socket,address="" + (run.debugPort)) + "",server=y,suspend=y"")); } if ((modeId) == (vogar.ModeId.APP_PROCESS)) { return vmCommandBuilder.vmArgs(action.getUserDir().getPath()).classpathViaProperty(true); } vmCommandBuilder.vmArgs((""-Duser.name="" + (deviceUserNameSupplier.get()))).vmArgs(""-Duser.language=en"").vmArgs(""-Duser.region=US""); if ((!(run.benchmark)) && (run.checkJni)) { vmCommandBuilder.vmArgs(""-Xcheck:jni""); } vmCommandBuilder.vmArgs(""-Xjnigreflimit:2000""); return vmCommandBuilder; }",99aa1bb55fdc4ebbda284917b173d98c98ed2f19,2018-02-19 11:38:20,2
617010,cmds_am_src_com_android_commands_am_Am.java,"public void runInstrument() throws java.lang.Exception { com.android.commands.am.Instrument instrument = new com.android.commands.am.Instrument(mAm, mPm); java.lang.String opt; while ((opt = nextOption()) != null) { if (opt.equals(""-p"")) { instrument.profileFile = nextArgRequired(); } else if (opt.equals(""-w"")) { instrument.wait = true; } else if (opt.equals(""-r"")) { instrument.rawMode = true; } else if (opt.equals(""-m"")) { instrument.proto = true; } else if (opt.equals(""-e"")) { final java.lang.String argKey = nextArgRequired(); final java.lang.String argValue = nextArgRequired(); instrument.args.putString(argKey, argValue); } else if ((opt.equals(""--no_window_animation"")) || (opt.equals(""--no-window-animation""))) { instrument.noWindowAnimation = true; } else if (opt.equals(""--user"")) { instrument.userId = parseUserArg(nextArgRequired()); } else if (opt.equals(""--abi"")) { instrument.abi = nextArgRequired(); } else { java.lang.System.err.println((""Error: Unknown option: "" + opt)); return; } } if ((instrument.userId) == (android.os.UserHandle.USER_ALL)) { java.lang.System.err.println(""Error: Can't start instrumentation with user 'all'""); return; } instrument.componentNameArg = nextArgRequired(); instrument.run(); }",bac5f7d3dc22d024909a4b6dea4b00a816f49fde,"public void runInstrument() throws java.lang.Exception { com.android.commands.am.Instrument instrument = new com.android.commands.am.Instrument(mAm, mPm); java.lang.String opt; while ((opt = nextOption()) != null) { if (opt.equals(""-p"")) { instrument.profileFile = nextArgRequired(); } else if (opt.equals(""-w"")) { instrument.wait = true; } else if (opt.equals(""-r"")) { instrument.rawMode = true; } else if (opt.equals(""-m"")) { instrument.proto = true; } else if (opt.equals(""-e"")) { final java.lang.String argKey = nextArgRequired(); final java.lang.String argValue = nextArgRequired(); instrument.args.putString(argKey, argValue); } else if ((opt.equals(""--no_window_animation"")) || (opt.equals(""--no-window-animation""))) { instrument.noWindowAnimation = true; } else if (opt.equals(""--no-hidden-api-checks"")) { instrument.noHiddenApiChecks = true; } else if (opt.equals(""--user"")) { instrument.userId = parseUserArg(nextArgRequired()); } else if (opt.equals(""--abi"")) { instrument.abi = nextArgRequired(); } else { java.lang.System.err.println((""Error: Unknown option: "" + opt)); return; } } if ((instrument.userId) == (android.os.UserHandle.USER_ALL)) { java.lang.System.err.println(""Error: Can't start instrumentation with user 'all'""); return; } instrument.componentNameArg = nextArgRequired(); instrument.run(); }",794081e62a460dd9e794b9b49fc3497e77eca764,"public void runInstrument() throws java.lang.Exception { com.android.commands.am.Instrument instrument = new com.android.commands.am.Instrument(mAm, mPm); java.lang.String opt; while ((opt = nextOption()) != null) { if (opt.equals(""-p"")) { instrument.profileFile = nextArgRequired(); } else if (opt.equals(""-w"")) { instrument.wait = true; } else if (opt.equals(""-r"")) { instrument.rawMode = true; } else if (opt.equals(""-m"")) { instrument.proto = true; } else if (opt.equals(""-e"")) { final java.lang.String argKey = nextArgRequired(); final java.lang.String argValue = nextArgRequired(); instrument.args.putString(argKey, argValue); } else if ((opt.equals(""--no_window_animation"")) || (opt.equals(""--no-window-animation""))) { instrument.noWindowAnimation = true; } else if (opt.equals(""--no-hidden-api-checks"")) { instrument.disableHiddenApiChecks = true; } else if (opt.equals(""--user"")) { instrument.userId = parseUserArg(nextArgRequired()); } else if (opt.equals(""--abi"")) { instrument.abi = nextArgRequired(); } else { java.lang.System.err.println((""Error: Unknown option: "" + opt)); return; } } if ((instrument.userId) == (android.os.UserHandle.USER_ALL)) { java.lang.System.err.println(""Error: Can't start instrumentation with user 'all'""); return; } instrument.componentNameArg = nextArgRequired(); instrument.run(); }",c4088f1a362cb189871f0a67a8e60f6b3a782425,2018-02-20 14:36:16,6
617010,services_core_java_com_android_server_am_ActivityManagerService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"final com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo info, java.lang.String customProcess, boolean isolated, boolean noHiddenApiChecks, java.lang.String abiOverride) { com.android.server.am.ProcessRecord app; if (!isolated) { app = getProcessRecordLocked((customProcess != null ? customProcess : info.processName), info.uid, true); } else { app = null; } if (app == null) { app = newProcessRecordLocked(info, customProcess, isolated, 0); updateLruProcessLocked(app, false, null); updateOomAdjLocked(); } try { android.app.AppGlobals.getPackageManager().setPackageStoppedState(info.packageName, false, android.os.UserHandle.getUserId(app.uid)); } catch (android.os.RemoteException e) { } catch (java.lang.IllegalArgumentException e) { android.util.Slog.w(com.android.server.am.ActivityManagerService.TAG, (((""Failed trying to unstop package "" + (info.packageName)) + "": "") + e)); } if (((info.flags) & (com.android.server.am.ActivityManagerService.PERSISTENT_MASK)) == (com.android.server.am.ActivityManagerService.PERSISTENT_MASK)) { app.persistent = true; app.maxAdj = ProcessList.PERSISTENT_PROC_ADJ; } if (((app.thread) == null) && ((mPersistentStartingProcesses.indexOf(app)) < 0)) { mPersistentStartingProcesses.add(app); startProcessLocked(app, ""added application"", (customProcess != null ? customProcess : app.processName), abiOverride, null, null); } return app; }",ada8b4c8a340650eea3f01c12e9cc045a0c266c2,"final com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo info, java.lang.String customProcess, boolean isolated, boolean disableHiddenApiChecks, java.lang.String abiOverride) { com.android.server.am.ProcessRecord app; if (!isolated) { app = getProcessRecordLocked((customProcess != null ? customProcess : info.processName), info.uid, true); } else { app = null; } if (app == null) { app = newProcessRecordLocked(info, customProcess, isolated, 0); updateLruProcessLocked(app, false, null); updateOomAdjLocked(); } try { android.app.AppGlobals.getPackageManager().setPackageStoppedState(info.packageName, false, android.os.UserHandle.getUserId(app.uid)); } catch (android.os.RemoteException e) { } catch (java.lang.IllegalArgumentException e) { android.util.Slog.w(com.android.server.am.ActivityManagerService.TAG, (((""Failed trying to unstop package "" + (info.packageName)) + "": "") + e)); } if (((info.flags) & (com.android.server.am.ActivityManagerService.PERSISTENT_MASK)) == (com.android.server.am.ActivityManagerService.PERSISTENT_MASK)) { app.persistent = true; app.maxAdj = ProcessList.PERSISTENT_PROC_ADJ; } if (((app.thread) == null) && ((mPersistentStartingProcesses.indexOf(app)) < 0)) { mPersistentStartingProcesses.add(app); startProcessLocked(app, ""added application"", (customProcess != null ? customProcess : app.processName), disableHiddenApiChecks, abiOverride, null, null); } return app; }",2934cddb997e422f6c51761e28ad50c0df67af96,2018-02-20 14:36:16,6
617010,services_core_java_com_android_server_am_ActivityManagerService.java,"private final void startProcessLocked(com.android.server.am.ProcessRecord app, java.lang.String hostingType, java.lang.String hostingNameStr) { startProcessLocked(app, hostingType, hostingNameStr, null, null, null); }",54853056b9cb61d7862b5ca49cb8cac36aa8d4e7,"private final void startProcessLocked(com.android.server.am.ProcessRecord app, java.lang.String hostingType, java.lang.String hostingNameStr) { startProcessLocked(app, hostingType, hostingNameStr, false, null, null, null); }",9f71fc4cea830e222acf0f779e7a51deeebf4aee,"private final void startProcessLocked(com.android.server.am.ProcessRecord app, java.lang.String hostingType, java.lang.String hostingNameStr) { startProcessLocked(app, hostingType, hostingNameStr, null, null, null); }",54853056b9cb61d7862b5ca49cb8cac36aa8d4e7,2018-02-20 14:36:16,6
620826,packages_SystemUI_src_com_android_systemui_qs_tiles_WifiTile.java,@java.lang.Override public void handleSetListening(boolean listening) { if (listening) { mController.addCallback(mSignalCallback); } else { mController.removeCallback(mSignalCallback); } },182f5e810eb671b58a2f260a236c0549ead99f2b,@java.lang.Override public void handleSetListening(boolean listening) { if ((getAdapter()) == null) return; if (listening) { mController.addCallback(mSignalCallback); } else { mController.removeCallback(mSignalCallback); } },36cefa760be3627f01f9770f15c284581b126667,@java.lang.Override public void handleSetListening(boolean listening) { if ((mController) == null) return; if (listening) { mController.addCallback(mSignalCallback); } else { mController.removeCallback(mSignalCallback); } },2de59dc1047763bc3dabf11545c89abea1a4916a,2018-02-20 15:23:02,5
544841,src_java_com_android_internal_telephony_GsmCdmaPhone.java,"private void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, (""[GsmCdmaPhone] "" + s)); }",481ca0f59fa54724fee451905265aa542a464fa1,"private void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, (((""[GsmCdmaPhone]["" + (getPhoneId())) + ""] "") + s)); }",94d8ce384f17cce895767a3a2579f5476370306c,"private void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, (((""["" + (mPhoneId)) + ""] "") + s)); }",4a166aa503c80743a223e9f7ba3e039021f34ee2,2018-02-20 23:06:06,9
544841,src_java_com_android_internal_telephony_imsphone_ImsPhone.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (((""[ImsPhone]["" + (getPhoneId())) + ""] "") + s)); }",432b6b811291cd1cd88d9ad320d12cd7c612049f,"private void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (((""["" + (mPhoneId)) + ""] "") + s)); }",121e0a21ba445100fc9ae8f2856926b747fe3ea6,2018-02-20 23:06:06,9
544841,src_java_com_android_internal_telephony_imsphone_ImsPhone.java,"public void onMMIDone(com.android.internal.telephony.imsphone.ImsPhoneMmiCode mmi) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (""onMMIDone: mmi="" + mmi)); if ((mPendingMMIs.remove(mmi)) || (mmi.isUssdRequest())) { android.os.ResultReceiver receiverCallback = mmi.getUssdCallbackReceiver(); if (receiverCallback != null) { int returnCode = ((mmi.getState()) == (MmiCode.State.COMPLETE)) ? android.telephony.TelephonyManager.USSD_RETURN_SUCCESS : android.telephony.TelephonyManager.USSD_RETURN_FAILURE; sendUssdResponse(mmi.getDialString(), mmi.getMessage(), returnCode, receiverCallback); } else { android.telephony.Rlog.v(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ""onMMIDone: notifyRegistrants""); mMmiCompleteRegistrants.notifyRegistrants(new android.os.AsyncResult(null, mmi, null)); } } }",64f2a4048aa1f7daa5052b9073440f5ce2997251,"public void onMMIDone(com.android.internal.telephony.imsphone.ImsPhoneMmiCode mmi) { logd((""onMMIDone: mmi="" + mmi)); if ((mPendingMMIs.remove(mmi)) || (mmi.isUssdRequest())) { android.os.ResultReceiver receiverCallback = mmi.getUssdCallbackReceiver(); if (receiverCallback != null) { int returnCode = ((mmi.getState()) == (MmiCode.State.COMPLETE)) ? android.telephony.TelephonyManager.USSD_RETURN_SUCCESS : android.telephony.TelephonyManager.USSD_RETURN_FAILURE; sendUssdResponse(mmi.getDialString(), mmi.getMessage(), returnCode, receiverCallback); } else { logv(""onMMIDone: notifyRegistrants""); mMmiCompleteRegistrants.notifyRegistrants(new android.os.AsyncResult(null, mmi, null)); } } }",393743a6755fab2a6abab1aa94e39ab763786dc1,"public void onMMIDone(com.android.internal.telephony.imsphone.ImsPhoneMmiCode mmi) { logd((""onMMIDone: mmi="" + mmi)); if (((mPendingMMIs.remove(mmi)) || (mmi.isUssdRequest())) || (mmi.isSsInfo())) { android.os.ResultReceiver receiverCallback = mmi.getUssdCallbackReceiver(); if (receiverCallback != null) { int returnCode = ((mmi.getState()) == (MmiCode.State.COMPLETE)) ? android.telephony.TelephonyManager.USSD_RETURN_SUCCESS : android.telephony.TelephonyManager.USSD_RETURN_FAILURE; sendUssdResponse(mmi.getDialString(), mmi.getMessage(), returnCode, receiverCallback); } else { logv(""onMMIDone: notifyRegistrants""); mMmiCompleteRegistrants.notifyRegistrants(new android.os.AsyncResult(null, mmi, null)); } } }",b0ed2c719d3349531ea3756778a6f5587a768de1,2018-02-20 23:06:06,9
544841,src_java_com_android_internal_telephony_imsphone_ImsPhone.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void logd(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (((""[ImsPhone]["" + (getPhoneId())) + ""] "") + s)); }",e399e6f268e770c5a51390c08f45b4e8031c07c9,"private void logd(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (((""["" + (mPhoneId)) + ""] "") + s)); }",4d81c1a905131f53bc4dff8a1cf02ad451f4a5b3,2018-02-20 23:06:06,9
544841,src_java_com_android_internal_telephony_imsphone_ImsPhone.java,"private com.android.internal.telephony.CommandException getCommandException(int code, java.lang.String errorString) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (((""getCommandException code= "" + code) + "", errorString= "") + errorString)); com.android.internal.telephony.CommandException.Error error = CommandException.Error.GENERIC_FAILURE; switch (code) { case com.android.ims.ImsReasonInfo.CODE_UT_NOT_SUPPORTED : error = CommandException.Error.REQUEST_NOT_SUPPORTED; break; case com.android.ims.ImsReasonInfo.CODE_UT_CB_PASSWORD_MISMATCH : error = CommandException.Error.PASSWORD_INCORRECT; break; case com.android.ims.ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE : error = CommandException.Error.RADIO_NOT_AVAILABLE; break; case com.android.ims.ImsReasonInfo.CODE_FDN_BLOCKED : error = CommandException.Error.FDN_CHECK_FAILURE; default : break; } return new com.android.internal.telephony.CommandException(error, errorString); }",d2caf659b478280f8c6dbe79c6e184b1ff4cf0b6,"private com.android.internal.telephony.CommandException getCommandException(int code, java.lang.String errorString) { logd((((""getCommandException code= "" + code) + "", errorString= "") + errorString)); com.android.internal.telephony.CommandException.Error error = CommandException.Error.GENERIC_FAILURE; switch (code) { case com.android.ims.ImsReasonInfo.CODE_UT_NOT_SUPPORTED : error = CommandException.Error.REQUEST_NOT_SUPPORTED; break; case com.android.ims.ImsReasonInfo.CODE_UT_CB_PASSWORD_MISMATCH : error = CommandException.Error.PASSWORD_INCORRECT; break; case com.android.ims.ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE : error = CommandException.Error.RADIO_NOT_AVAILABLE; break; case com.android.ims.ImsReasonInfo.CODE_FDN_BLOCKED : error = CommandException.Error.FDN_CHECK_FAILURE; default : break; } return new com.android.internal.telephony.CommandException(error, errorString); }",6f2b4364adcfef3594588363598e4a5518be4f84,"private com.android.internal.telephony.CommandException getCommandException(int code, java.lang.String errorString) { logd((((""getCommandException code= "" + code) + "", errorString= "") + errorString)); com.android.internal.telephony.CommandException.Error error = CommandException.Error.GENERIC_FAILURE; switch (code) { case android.telephony.ims.ImsReasonInfo.CODE_UT_NOT_SUPPORTED : error = CommandException.Error.REQUEST_NOT_SUPPORTED; break; case android.telephony.ims.ImsReasonInfo.CODE_UT_CB_PASSWORD_MISMATCH : error = CommandException.Error.PASSWORD_INCORRECT; break; case android.telephony.ims.ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE : error = CommandException.Error.RADIO_NOT_AVAILABLE; break; case android.telephony.ims.ImsReasonInfo.CODE_FDN_BLOCKED : error = CommandException.Error.FDN_CHECK_FAILURE; break; case android.telephony.ims.ImsReasonInfo.CODE_UT_SS_MODIFIED_TO_DIAL : error = CommandException.Error.SS_MODIFIED_TO_DIAL; break; case android.telephony.ims.ImsReasonInfo.CODE_UT_SS_MODIFIED_TO_USSD : error = CommandException.Error.SS_MODIFIED_TO_USSD; break; case android.telephony.ims.ImsReasonInfo.CODE_UT_SS_MODIFIED_TO_SS : error = CommandException.Error.SS_MODIFIED_TO_SS; break; case android.telephony.ims.ImsReasonInfo.CODE_UT_SS_MODIFIED_TO_DIAL_VIDEO : error = CommandException.Error.SS_MODIFIED_TO_DIAL_VIDEO; break; default : break; } return new com.android.internal.telephony.CommandException(error, errorString); }",2a6f27d26d7603964a594bf6a8c485c3d2e5cc39,2018-02-20 23:06:06,9
544841,src_java_com_android_internal_telephony_imsphone_ImsPhone.java,"public void getCallBarring(java.lang.String facility, android.os.Message onComplete) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (""getCallBarring facility="" + facility)); android.os.Message resp; resp = obtainMessage(com.android.internal.telephony.imsphone.ImsPhone.EVENT_GET_CALL_BARRING_DONE, onComplete); try { com.android.ims.ImsUtInterface ut = mCT.getUtInterface(); ut.queryCallBarring(getCBTypeFromFacility(facility), resp); } catch (com.android.ims.ImsException e) { sendErrorResponse(onComplete, e); } }",91022ecbf9e61a2ebf73243b3a4a30c4258a8edf,"public void getCallBarring(java.lang.String facility, android.os.Message onComplete) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) logd((""getCallBarring facility="" + facility)); android.os.Message resp; resp = obtainMessage(com.android.internal.telephony.imsphone.ImsPhone.EVENT_GET_CALL_BARRING_DONE, onComplete); try { com.android.ims.ImsUtInterface ut = mCT.getUtInterface(); ut.queryCallBarring(getCBTypeFromFacility(facility), resp); } catch (com.android.ims.ImsException e) { sendErrorResponse(onComplete, e); } }",71d8e7181ec76346ab5fdc27754ef172d1c8ebf4,"public void getCallBarring(java.lang.String facility, android.os.Message onComplete) { getCallBarring(facility, onComplete, CommandsInterface.SERVICE_CLASS_NONE); }",00b52dd52ee9bbc0ffca294ffce6dc5d641fdc3c,2018-02-20 23:06:06,9
544841,src_java_com_android_internal_telephony_imsphone_ImsPhone.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void logi(java.lang.String s) { android.telephony.Rlog.i(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (((""[ImsPhone]["" + (getPhoneId())) + ""] "") + s)); }",efcc8ff5fbe40ab3148869c9b782d784b32f4a98,"private void logi(java.lang.String s) { android.telephony.Rlog.i(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (((""["" + (mPhoneId)) + ""] "") + s)); }",77129f2100479b19857d09ac6e42dba000efec8b,2018-02-20 23:06:06,9
544841,src_java_com_android_internal_telephony_imsphone_ImsPhone.java,"public void setCallBarring(java.lang.String facility, boolean lockState, java.lang.String password, android.os.Message onComplete) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (((""setCallBarring facility="" + facility) + "", lockState="") + lockState)); android.os.Message resp; resp = obtainMessage(com.android.internal.telephony.imsphone.ImsPhone.EVENT_SET_CALL_BARRING_DONE, onComplete); int action; if (lockState) { action = com.android.internal.telephony.CommandsInterface.CF_ACTION_ENABLE; } else { action = com.android.internal.telephony.CommandsInterface.CF_ACTION_DISABLE; } try { com.android.ims.ImsUtInterface ut = mCT.getUtInterface(); ut.updateCallBarring(getCBTypeFromFacility(facility), action, resp, null); } catch (com.android.ims.ImsException e) { sendErrorResponse(onComplete, e); } }",60bccfb94925f6d0219c6fa299a5fe834141816d,"public void setCallBarring(java.lang.String facility, boolean lockState, java.lang.String password, android.os.Message onComplete) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) logd((((""setCallBarring facility="" + facility) + "", lockState="") + lockState)); android.os.Message resp; resp = obtainMessage(com.android.internal.telephony.imsphone.ImsPhone.EVENT_SET_CALL_BARRING_DONE, onComplete); int action; if (lockState) { action = com.android.internal.telephony.CommandsInterface.CF_ACTION_ENABLE; } else { action = com.android.internal.telephony.CommandsInterface.CF_ACTION_DISABLE; } try { com.android.ims.ImsUtInterface ut = mCT.getUtInterface(); ut.updateCallBarring(getCBTypeFromFacility(facility), action, resp, null); } catch (com.android.ims.ImsException e) { sendErrorResponse(onComplete, e); } }",12ea12e033225175a6a2ea989faee7877d4606bb,"public void setCallBarring(java.lang.String facility, boolean lockState, java.lang.String password, android.os.Message onComplete) { setCallBarring(facility, lockState, password, onComplete, CommandsInterface.SERVICE_CLASS_NONE); }",d4fbe44ac9c9ebebbcc4ef1fe2ea3fc6463969d5,2018-02-20 23:06:06,9
544841,src_java_com_android_internal_telephony_imsphone_ImsPhone.java,"@java.lang.Override public boolean handleUssdRequest(java.lang.String ussdRequest, android.os.ResultReceiver wrappedCallback) throws com.android.internal.telephony.CallStateException { if ((mPendingMMIs.size()) > 0) { android.telephony.Rlog.i(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (""handleUssdRequest: queue full: "" + (android.telephony.Rlog.pii(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ussdRequest)))); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); return true; } try { dialInternal(ussdRequest, VideoProfile.STATE_AUDIO_ONLY, null, wrappedCallback); } catch (com.android.internal.telephony.CallStateException cse) { if (com.android.internal.telephony.imsphone.CS_FALLBACK.equals(cse.getMessage())) { throw cse; } else { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (""Could not execute USSD "" + cse)); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); } } catch (java.lang.Exception e) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (""Could not execute USSD "" + e)); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); return false; } return true; }",4f5aa85be413efb7a57949319cd39e451a7125e4,"@java.lang.Override public boolean handleUssdRequest(java.lang.String ussdRequest, android.os.ResultReceiver wrappedCallback) throws com.android.internal.telephony.CallStateException { if ((mPendingMMIs.size()) > 0) { logi((""handleUssdRequest: queue full: "" + (android.telephony.Rlog.pii(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ussdRequest)))); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); return true; } try { dialInternal(ussdRequest, VideoProfile.STATE_AUDIO_ONLY, null, wrappedCallback); } catch (com.android.internal.telephony.CallStateException cse) { if (com.android.internal.telephony.imsphone.CS_FALLBACK.equals(cse.getMessage())) { throw cse; } else { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (""Could not execute USSD "" + cse)); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); } } catch (java.lang.Exception e) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (""Could not execute USSD "" + e)); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); return false; } return true; }",953e3838bad8239d706c520d1962ded2a5af7a1c,"@java.lang.Override public boolean handleUssdRequest(java.lang.String ussdRequest, android.os.ResultReceiver wrappedCallback) throws com.android.internal.telephony.CallStateException { if ((mPendingMMIs.size()) > 0) { logi((""handleUssdRequest: queue full: "" + (android.telephony.Rlog.pii(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ussdRequest)))); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); return true; } try { dialInternal(ussdRequest, new com.android.internal.telephony.imsphone.ImsPhone.ImsDialArgs.Builder().build(), wrappedCallback); } catch (com.android.internal.telephony.CallStateException cse) { if (com.android.internal.telephony.imsphone.CS_FALLBACK.equals(cse.getMessage())) { throw cse; } else { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (""Could not execute USSD "" + cse)); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); } } catch (java.lang.Exception e) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (""Could not execute USSD "" + e)); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); return false; } return true; }",65fc289f630882b53bf43cbd3410820123b5b9dc,2018-02-20 23:06:06,9
544841,src_java_com_android_internal_telephony_imsphone_ImsPhone.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void logv(java.lang.String s) { android.telephony.Rlog.v(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (((""[ImsPhone]["" + (getPhoneId())) + ""] "") + s)); }",83ccbd551c2df050a24ae259d755091ab18414a5,"private void logv(java.lang.String s) { android.telephony.Rlog.v(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (((""["" + (mPhoneId)) + ""] "") + s)); }",744d9ea8b058f270c8ce3c4e665330eb4b8af04f,2018-02-20 23:06:06,9
544841,src_java_com_android_internal_telephony_imsphone_ImsPhoneCallTracker.java,"protected void loge(java.lang.String msg) { android.telephony.Rlog.e(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, (""[ImsPhoneCallTracker] "" + msg)); }",4550b0300bd1642a20ac80bcab13aeb6de24a686,"protected void loge(java.lang.String msg) { android.telephony.Rlog.e(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, (((""[ImsPhoneCallTracker]["" + (mPhone.getPhoneId())) + ""] "") + msg)); }",4e82e629c4f6b80f87829e050e3f14bd707b4e55,"protected void loge(java.lang.String msg) { android.telephony.Rlog.e(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, (((""["" + (mPhone.getPhoneId())) + ""] "") + msg)); }",40a3ae0fe5d30e4b4fcb5e387b850e9b70fe7782,2018-02-20 23:06:06,9
544841,src_java_com_android_internal_telephony_imsphone_ImsPhoneCallTracker.java,"@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, (""[ImsPhoneCallTracker] "" + msg)); }",1485fb6efe276f2d4d9976a6184a400d9f7fb006,"@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, (((""[ImsPhoneCallTracker]["" + (mPhone.getPhoneId())) + ""] "") + msg)); }",81db6a44e0ca59f2e3105d47f34e87f3ce331743,"@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, (((""["" + (mPhone.getPhoneId())) + ""] "") + msg)); }",59ce8b62af5a9f74525db018a70711e1da79a799,2018-02-20 23:06:06,9
544841,src_java_com_android_internal_telephony_GsmCdmaPhone.java,"private void logd(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, (""[GsmCdmaPhone] "" + s)); }",c7e158686fd70b81aa9686bd06ba5a9701549839,"private void logd(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, (((""[GsmCdmaPhone]["" + (getPhoneId())) + ""] "") + s)); }",e8393373189cd6329ca94e99bde5e15295744d80,"private void logd(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, (((""["" + (mPhoneId)) + ""] "") + s)); }",fe5cfe6ed934dffb1a4e1a3235b6aefeb50f962a,2018-02-20 23:06:06,9
544841,src_java_com_android_internal_telephony_GsmCdmaPhone.java,"private void logi(java.lang.String s) { android.telephony.Rlog.i(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, (""[GsmCdmaPhone] "" + s)); }",bd94218e205b883ef87c9135794cdaf404fa74ff,"private void logi(java.lang.String s) { android.telephony.Rlog.i(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, (((""[GsmCdmaPhone]["" + (getPhoneId())) + ""] "") + s)); }",48a4a6681859ca46f046009c727ae9829ebfc63a,"private void logi(java.lang.String s) { android.telephony.Rlog.i(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, (((""["" + (mPhoneId)) + ""] "") + s)); }",25dbc022859c3bd6f5aa5974e4a589b46284251a,2018-02-20 23:06:06,9
544841,src_java_com_android_internal_telephony_ServiceStateTracker.java,"protected void log(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.ServiceStateTracker.LOG_TAG, s); }",2884ffcb2bb8ca5f66ec585917052fe1413f6ee7,"protected void log(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.ServiceStateTracker.LOG_TAG, (((""[ServiceStateTracker]["" + (mPhone.getPhoneId())) + ""] "") + s)); }",bd0a828b8690c1fb13ee1449c23f11ecd5259797,"protected final void log(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.ServiceStateTracker.LOG_TAG, (((""["" + (mPhone.getPhoneId())) + ""] "") + s)); }",b77f9f6d9698d08d59027ee2f1fc7facf8c01f4d,2018-02-20 23:06:06,9
544841,src_java_com_android_internal_telephony_ServiceStateTracker.java,"protected void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.ServiceStateTracker.LOG_TAG, s); }",d43c52df0de10d1cd0d83e311a413a1eb3c0f63b,"protected void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.ServiceStateTracker.LOG_TAG, (((""[ServiceStateTracker]["" + (mPhone.getPhoneId())) + ""] "") + s)); }",5916c2e1b9bac8f264063ce6b7a9408de6ccb1ba,"protected final void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.ServiceStateTracker.LOG_TAG, (((""["" + (mPhone.getPhoneId())) + ""] "") + s)); }",fec0eae34c3835c90fcf65ea8ed15c18dd729c74,2018-02-20 23:06:06,9
544841,src_java_com_android_internal_telephony_imsphone_ImsPhone.java,"private void updateRoamingState(boolean newRoaming) { if ((mCT.getState()) == (PhoneConstants.State.IDLE)) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (""updateRoamingState now: "" + newRoaming)); mRoaming = newRoaming; com.android.ims.ImsManager.setWfcMode(mContext, com.android.ims.ImsManager.getWfcMode(mContext, newRoaming), newRoaming); } else { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, (""updateRoamingState postponed: "" + newRoaming)); mCT.registerForVoiceCallEnded(this, com.android.internal.telephony.imsphone.ImsPhone.EVENT_VOICE_CALL_ENDED, null); } }",166b4457960320f934df262f41b4914cd1795d33,"private void updateRoamingState(boolean newRoaming) { if ((mCT.getState()) == (PhoneConstants.State.IDLE)) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) logd((""updateRoamingState now: "" + newRoaming)); mRoaming = newRoaming; com.android.ims.ImsManager.setWfcMode(mContext, com.android.ims.ImsManager.getWfcMode(mContext, newRoaming), newRoaming); } else { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) logd((""updateRoamingState postponed: "" + newRoaming)); mCT.registerForVoiceCallEnded(this, com.android.internal.telephony.imsphone.ImsPhone.EVENT_VOICE_CALL_ENDED, null); } }",097bf9ffe2edbff8ff1a00d0a5a7887c9d8bbb3e,"private void updateRoamingState(boolean newRoaming) { if ((mCT.getState()) == (PhoneConstants.State.IDLE)) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) logd((""updateRoamingState now: "" + newRoaming)); mRoaming = newRoaming; com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, mPhoneId); imsManager.setWfcMode(imsManager.getWfcMode(newRoaming), newRoaming); } else { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) logd((""updateRoamingState postponed: "" + newRoaming)); mCT.registerForVoiceCallEnded(this, com.android.internal.telephony.imsphone.ImsPhone.EVENT_VOICE_CALL_ENDED, null); } }",f10c63e2b6b8ee9616c67c5d006867036ff6f4c3,2018-02-20 23:06:06,9
544841,src_java_com_android_internal_telephony_GsmCdmaCallTracker.java,"@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.GsmCdmaCallTracker.LOG_TAG, (""[GsmCdmaCallTracker] "" + msg)); }",bd2b43a923108cf9f78ac7cc20d6644cbf57efa6,"@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.GsmCdmaCallTracker.LOG_TAG, (((""[GsmCdmaCallTracker]["" + (mPhone.getPhoneId())) + ""] "") + msg)); }",9217065a7482014f63975a27c2895b62ff83916f,"@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.GsmCdmaCallTracker.LOG_TAG, (((""["" + (mPhone.getPhoneId())) + ""] "") + msg)); }",74e045b0184dcc61101593d5299e56968b280573,2018-02-20 23:06:06,9
620809,src_com_google_android_traceur_Receiver.java,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context, false); com.android.traceur.QsService.requestListeningState(context); } else if (com.android.traceur.Receiver.FORCE_UPDATE_ACTION.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context, true); } else if (com.android.traceur.Receiver.DUMP_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); if (com.android.traceur.AtraceUtils.isTracingOn()) { com.android.traceur.AtraceUtils.atraceDumpAndSend(context); } else { context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } } else if (com.android.traceur.Receiver.OPEN_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }",f28ec76daad96e24c1a6dc08502b0e77e831b4c0,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { boolean isTracingPrefOn = prefs.getBoolean(context.getString(R.string.pref_key_tracing_on), false); com.android.traceur.Receiver.updateTracing(context); com.android.traceur.QsService.requestListeningState(context); } else if (com.android.traceur.Receiver.DUMP_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); if (com.android.traceur.AtraceUtils.isTracingOn()) { com.android.traceur.AtraceUtils.atraceDumpAndSend(context); } else { context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } } else if (com.android.traceur.Receiver.OPEN_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }",a253db5dec21b34a83de60a02add4468fa2fbd68,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context); } else if (com.android.traceur.Receiver.DUMP_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); if (com.android.traceur.AtraceUtils.isTracingOn()) { com.android.traceur.AtraceUtils.atraceDumpAndSend(context); } else { context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } } else if (com.android.traceur.Receiver.OPEN_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }",4f343e138d21e27a9ead692d0579106d5e80a164,2018-02-20 23:06:36,4
620809,src_com_google_android_traceur_Receiver.java,"public static java.lang.String getActiveUnavailableTags(android.content.Context context, android.content.SharedPreferences prefs) { java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.pref_key_tags), com.android.traceur.Receiver.getDefaultTagList()); java.lang.StringBuilder sb = new java.lang.StringBuilder((10 * (tags.size()))); java.util.TreeMap<java.lang.String, java.lang.String> available = com.android.traceur.AtraceUtils.atraceListCategories(); for (java.lang.String s : tags) { if (available.containsKey(s)) continue; if ((sb.length()) > 0) { sb.append(' '); } sb.append(s); } java.lang.String s = sb.toString(); android.util.Log.v(com.android.traceur.Receiver.TAG, ((""getActiveUnavailableTags() = \"""" + s) + ""\"""")); return s; }",9edff4225d31a626eb4e46fc21fe4221c463abfe,"public static java.lang.String getActiveUnavailableTags(android.content.Context context, android.content.SharedPreferences prefs) { java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.pref_key_tags), com.android.traceur.Receiver.getDefaultTagList()); java.lang.StringBuilder sb = new java.lang.StringBuilder((10 * (tags.size()))); java.util.TreeMap<java.lang.String, java.lang.String> available = com.android.traceur.AtraceUtils.atraceListCategories(); for (java.lang.String s : tags) { if (available.containsKey(s)) continue; if ((sb.length()) > 0) { sb.append(' '); } sb.append(s); } java.lang.String s = sb.toString(); com.android.traceur.Log.v(com.android.traceur.Receiver.TAG, ((""getActiveUnavailableTags() = \"""" + s) + ""\"""")); return s; }",b9ba764c9fdc56b2222c63a32e646527c8b3131d,"public static java.lang.String getActiveUnavailableTags(android.content.Context context, android.content.SharedPreferences prefs) { java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.pref_key_tags), com.android.traceur.Receiver.getDefaultTagList()); java.lang.StringBuilder sb = new java.lang.StringBuilder((10 * (tags.size()))); java.util.TreeMap<java.lang.String, java.lang.String> available = com.android.traceur.AtraceUtils.atraceListCategories(); for (java.lang.String s : tags) { if (available.containsKey(s)) continue; if ((sb.length()) > 0) { sb.append(' '); } sb.append(s); } java.lang.String s = sb.toString(); android.util.Log.v(com.android.traceur.Receiver.TAG, ((""getActiveUnavailableTags() = \"""" + s) + ""\"""")); return s; }",9edff4225d31a626eb4e46fc21fe4221c463abfe,2018-02-20 23:06:36,4
620809,src_com_google_android_traceur_Receiver.java,"public static java.lang.String getActiveTags(android.content.Context context, android.content.SharedPreferences prefs, boolean onlyAvailable) { java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.pref_key_tags), com.android.traceur.Receiver.getDefaultTagList()); java.lang.StringBuilder sb = new java.lang.StringBuilder((10 * (tags.size()))); java.util.TreeMap<java.lang.String, java.lang.String> available = (onlyAvailable) ? com.android.traceur.AtraceUtils.atraceListCategories() : null; for (java.lang.String s : tags) { if (onlyAvailable && (!(available.containsKey(s)))) continue; if ((sb.length()) > 0) { sb.append(' '); } sb.append(s); } java.lang.String s = sb.toString(); android.util.Log.v(com.android.traceur.Receiver.TAG, ((((""getActiveTags(onlyAvailable="" + onlyAvailable) + "") = \"""") + s) + ""\"""")); return s; }",58683fd8922920f6716c241e38d95f7f865a09d8,"public static java.lang.String getActiveTags(android.content.Context context, android.content.SharedPreferences prefs, boolean onlyAvailable) { java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.pref_key_tags), com.android.traceur.Receiver.getDefaultTagList()); java.lang.StringBuilder sb = new java.lang.StringBuilder((10 * (tags.size()))); java.util.TreeMap<java.lang.String, java.lang.String> available = (onlyAvailable) ? com.android.traceur.AtraceUtils.atraceListCategories() : null; for (java.lang.String s : tags) { if (onlyAvailable && (!(available.containsKey(s)))) continue; if ((sb.length()) > 0) { sb.append(' '); } sb.append(s); } java.lang.String s = sb.toString(); com.android.traceur.Log.v(com.android.traceur.Receiver.TAG, ((((""getActiveTags(onlyAvailable="" + onlyAvailable) + "") = \"""") + s) + ""\"""")); return s; }",8b3f5165f1bf513f6c2eb2716b13c4a345f76904,"public static java.lang.String getActiveTags(android.content.Context context, android.content.SharedPreferences prefs, boolean onlyAvailable) { java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.pref_key_tags), com.android.traceur.Receiver.getDefaultTagList()); java.lang.StringBuilder sb = new java.lang.StringBuilder((10 * (tags.size()))); java.util.TreeMap<java.lang.String, java.lang.String> available = (onlyAvailable) ? com.android.traceur.AtraceUtils.atraceListCategories() : null; for (java.lang.String s : tags) { if (onlyAvailable && (!(available.containsKey(s)))) continue; if ((sb.length()) > 0) { sb.append(' '); } sb.append(s); } java.lang.String s = sb.toString(); android.util.Log.v(com.android.traceur.Receiver.TAG, ((((""getActiveTags(onlyAvailable="" + onlyAvailable) + "") = \"""") + s) + ""\"""")); return s; }",58683fd8922920f6716c241e38d95f7f865a09d8,2018-02-20 23:06:36,4
616891,core_java_android_webkit_WebViewZygote.java,public static android.os.ZygoteProcess getProcess() { synchronized(android.webkit.WebViewZygote.sLock) { if ((android.webkit.WebViewZygote.sZygote) != null) return android.webkit.WebViewZygote.sZygote; android.webkit.WebViewZygote.waitForServiceStartAndConnect(); return android.webkit.WebViewZygote.sZygote; } },c35ca65e44e1780d327e9db73b54bc42b9e6fde4,public static android.os.ZygoteProcess getProcess() { synchronized(android.webkit.WebViewZygote.sLock) { if ((android.webkit.WebViewZygote.sZygote) != null) return android.webkit.WebViewZygote.sZygote.zygote; android.webkit.WebViewZygote.connectToZygoteIfNeededLocked(); return android.webkit.WebViewZygote.sZygote.zygote; } },ec855b6193b97ec7d5998d1b29b699652c2c305e,public static android.os.ZygoteProcess getProcess() { synchronized(android.webkit.WebViewZygote.sLock) { if ((android.webkit.WebViewZygote.sZygote) != null) return android.webkit.WebViewZygote.sZygote; android.webkit.WebViewZygote.connectToZygoteIfNeededLocked(); return android.webkit.WebViewZygote.sZygote; } },6d466f713f364d66196b2c21b97befe3c5eb65ee,2018-02-21 00:43:55,8
616891,core_java_android_webkit_WebViewZygote.java,"public static void onWebViewProviderChanged(android.content.pm.PackageInfo packageInfo, java.lang.String cacheKey) { synchronized(android.webkit.WebViewZygote.sLock) { android.webkit.WebViewZygote.sPackage = packageInfo; android.webkit.WebViewZygote.sPackageCacheKey = cacheKey; if (!(android.webkit.WebViewZygote.sMultiprocessEnabled)) { return; } final java.lang.String serviceName = android.webkit.WebViewZygote.getServiceNameLocked(); android.webkit.WebViewZygote.sZygote = null; if (android.os.SystemService.isStopped(serviceName)) { android.os.SystemService.start(serviceName); } else { android.os.SystemService.restart(serviceName); } android.webkit.WebViewZygote.sStartedService = true; } }",f5778924a285b65313a9a89870d6aff0ad55ef97,"public static void onWebViewProviderChanged(android.content.pm.PackageInfo packageInfo, java.lang.String cacheKey) { synchronized(android.webkit.WebViewZygote.sLock) { android.webkit.WebViewZygote.sPackage = packageInfo; android.webkit.WebViewZygote.sPackageCacheKey = cacheKey; if (!(android.webkit.WebViewZygote.sMultiprocessEnabled)) { return; } android.webkit.WebViewZygote.stopZygoteLocked(); } }",d309620d8b878eacf5a059e1dced791e8063e3b8,"public static void onWebViewProviderChanged(android.content.pm.PackageInfo packageInfo, android.content.pm.ApplicationInfo originalAppInfo) { synchronized(android.webkit.WebViewZygote.sLock) { android.webkit.WebViewZygote.sPackage = packageInfo; android.webkit.WebViewZygote.sPackageOriginalAppInfo = originalAppInfo; if (!(android.webkit.WebViewZygote.sMultiprocessEnabled)) { return; } android.webkit.WebViewZygote.stopZygoteLocked(); } }",7af646094f3e2b5e158c2b70c0e0e43907e15cc1,2018-02-21 00:43:55,8
616891,core_java_android_webkit_WebViewZygote.java,"@com.android.internal.annotations.GuardedBy(""sLock"") private static java.lang.String getServiceNameLocked() { if ((android.webkit.WebViewZygote.sPackage) == null) return null; if (java.util.Arrays.asList(Build.SUPPORTED_64_BIT_ABIS).contains(android.webkit.WebViewZygote.sPackage.applicationInfo.primaryCpuAbi)) { return android.webkit.WebViewZygote.WEBVIEW_ZYGOTE_SERVICE_64; } return android.webkit.WebViewZygote.WEBVIEW_ZYGOTE_SERVICE_32; }",0c80a6a62897e3b7a3e7a633d33e908fffdf3884,"@com.android.internal.annotations.GuardedBy(""sLock"") private static void stopZygoteLocked() { if ((android.webkit.WebViewZygote.sZygote) != null) { android.webkit.WebViewZygote.sZygote.zygote.close(); java.lang.Process.killProcess(android.webkit.WebViewZygote.sZygote.startResult.pid); android.webkit.WebViewZygote.sZygote = null; } }",011cd462940ab7e7d059749b475d179337941213,"@com.android.internal.annotations.GuardedBy(""sLock"") private static void stopZygoteLocked() { if ((android.webkit.WebViewZygote.sZygote) != null) { android.webkit.WebViewZygote.sZygote.close(); java.lang.Process.killProcess(android.webkit.WebViewZygote.sZygote.getPid()); android.webkit.WebViewZygote.sZygote = null; } }",04db925db236067325128798c0362f8274a8f1bf,2018-02-21 00:43:55,8
605957,Common_src_com_googlecode_android_scripting_facade_SettingsFacade.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Get private DNS specifier"", returns = ""DNS hostname set in strict mode"") public java.lang.String getPrivateDnsSpecifier() { if ((getPrivateDnsMode()) != (ConnectivityConstants.PrivateDnsModeStrict)) return null; return android.provider.Settings.Global.getString(mService.getContentResolver(), android.provider.Settings.Global.PRIVATE_DNS_SPECIFIER); }",a16b1a6ee5de808de10d08cbc67289800724dd09,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Get private DNS specifier"", returns = ""DNS hostname set in strict mode"") public java.lang.String getPrivateDnsSpecifier() { if (!(getPrivateDnsMode().equals(ConnectivityConstants.PrivateDnsModeStrict))) return null; return android.provider.Settings.Global.getString(mService.getContentResolver(), android.provider.Settings.Global.PRIVATE_DNS_SPECIFIER); }",799a4cc7ff3b00b6078eb82670315202669d1f14,2018-02-21 18:47:45,3
622431,src_com_google_android_traceur_AtraceUtils.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static void clearSavedTraces() { java.lang.String cmd = (""rm "" + (com.android.traceur.AtraceUtils.TRACE_DIRECTORY)) + ""trace-*.ctrace""; android.util.Log.v(com.android.traceur.AtraceUtils.TAG, (""Clearing trace directory: "" + cmd)); try { java.lang.Process rm = com.android.traceur.AtraceUtils.exec(cmd); if ((rm.waitFor()) != 0) { android.util.Log.e(com.android.traceur.AtraceUtils.TAG, (""clearSavedTraces failed with: "" + (rm.exitValue()))); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }",1ba0123147a894b0e0e79f2e93b41decf01fb90f,"public static void clearSavedTraces() { java.lang.String cmd = (""rm -f "" + (com.android.traceur.AtraceUtils.TRACE_DIRECTORY)) + ""trace-*.ctrace""; android.util.Log.v(com.android.traceur.AtraceUtils.TAG, (""Clearing trace directory: "" + cmd)); try { java.lang.Process rm = com.android.traceur.AtraceUtils.exec(cmd); if ((rm.waitFor()) != 0) { android.util.Log.e(com.android.traceur.AtraceUtils.TAG, (""clearSavedTraces failed with: "" + (rm.exitValue()))); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }",e78f31e27b7f884e6652ae284eeade720c0dfdbd,2018-02-21 20:55:33,3
618774,telephony_java_android_telephony_MbmsDownloadSession.java,"@android.annotation.Nullable public static android.telephony.MbmsDownloadSession create(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull final android.telephony.mbms.MbmsDownloadSessionCallback callback, int subscriptionId, @android.annotation.NonNull android.os.Handler handler) { if (!(android.telephony.MbmsDownloadSession.sIsInitialized.compareAndSet(false, true))) { throw new java.lang.IllegalStateException(""Cannot have two active instances""); } android.telephony.MbmsDownloadSession session = new android.telephony.MbmsDownloadSession(context, callback, subscriptionId, handler); final int result = session.bindAndInitialize(); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.MbmsDownloadSession.sIsInitialized.set(false); handler.post(new java.lang.Runnable() { @java.lang.Override public void run() { callback.onError(result, null); } }); return null; } return session; }",906adbfaf630375fc5974f2b97eccf54c5daa824,"@android.annotation.Nullable public static android.telephony.MbmsDownloadSession create(@android.annotation.NonNull android.content.Context context, int subscriptionId, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull final android.telephony.mbms.MbmsDownloadSessionCallback callback) { if (!(android.telephony.MbmsDownloadSession.sIsInitialized.compareAndSet(false, true))) { throw new java.lang.IllegalStateException(""Cannot have two active instances""); } android.telephony.MbmsDownloadSession session = new android.telephony.MbmsDownloadSession(context, callback, subscriptionId, executor); final int result = session.bindAndInitialize(); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.MbmsDownloadSession.sIsInitialized.set(false); executor.execute(new java.lang.Runnable() { @java.lang.Override public void run() { callback.onError(result, null); } }); return null; } return session; }",f24bf22522de2bed5ed5a32c7927bbde8d3b368b,"@android.annotation.Nullable public static android.telephony.MbmsDownloadSession create(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.util.concurrent.Executor executor, int subscriptionId, @android.annotation.NonNull final android.telephony.mbms.MbmsDownloadSessionCallback callback) { if (!(android.telephony.MbmsDownloadSession.sIsInitialized.compareAndSet(false, true))) { throw new java.lang.IllegalStateException(""Cannot have two active instances""); } android.telephony.MbmsDownloadSession session = new android.telephony.MbmsDownloadSession(context, executor, subscriptionId, callback); final int result = session.bindAndInitialize(); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.MbmsDownloadSession.sIsInitialized.set(false); executor.execute(new java.lang.Runnable() { @java.lang.Override public void run() { callback.onError(result, null); } }); return null; } return session; }",5cd72463fc80dbf04a1bc1383916afd631a84609,2018-02-22 00:35:50,3
618774,telephony_java_android_telephony_MbmsStreamingSession.java,"@android.annotation.Nullable public static android.telephony.MbmsStreamingSession create(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull final android.telephony.mbms.MbmsStreamingSessionCallback callback, int subscriptionId, @android.annotation.NonNull android.os.Handler handler) { if (!(android.telephony.MbmsStreamingSession.sIsInitialized.compareAndSet(false, true))) { throw new java.lang.IllegalStateException(""Cannot create two instances of MbmsStreamingSession""); } android.telephony.MbmsStreamingSession session = new android.telephony.MbmsStreamingSession(context, callback, subscriptionId, handler); final int result = session.bindAndInitialize(); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.MbmsStreamingSession.sIsInitialized.set(false); handler.post(new java.lang.Runnable() { @java.lang.Override public void run() { callback.onError(result, null); } }); return null; } return session; }",ad8772aa17dcd1f9874f4884d324ae7a6a8985b0,"@android.annotation.Nullable public static android.telephony.MbmsStreamingSession create(@android.annotation.NonNull android.content.Context context, int subscriptionId, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull final android.telephony.mbms.MbmsStreamingSessionCallback callback) { if (!(android.telephony.MbmsStreamingSession.sIsInitialized.compareAndSet(false, true))) { throw new java.lang.IllegalStateException(""Cannot create two instances of MbmsStreamingSession""); } android.telephony.MbmsStreamingSession session = new android.telephony.MbmsStreamingSession(context, callback, subscriptionId, executor); final int result = session.bindAndInitialize(); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.MbmsStreamingSession.sIsInitialized.set(false); executor.execute(new java.lang.Runnable() { @java.lang.Override public void run() { callback.onError(result, null); } }); return null; } return session; }",31d9792d8e3a10c96190c9dcd9d8a986cc86526f,"@android.annotation.Nullable public static android.telephony.MbmsStreamingSession create(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.util.concurrent.Executor executor, int subscriptionId, @android.annotation.NonNull final android.telephony.mbms.MbmsStreamingSessionCallback callback) { if (!(android.telephony.MbmsStreamingSession.sIsInitialized.compareAndSet(false, true))) { throw new java.lang.IllegalStateException(""Cannot create two instances of MbmsStreamingSession""); } android.telephony.MbmsStreamingSession session = new android.telephony.MbmsStreamingSession(context, executor, subscriptionId, callback); final int result = session.bindAndInitialize(); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.MbmsStreamingSession.sIsInitialized.set(false); executor.execute(new java.lang.Runnable() { @java.lang.Override public void run() { callback.onError(result, null); } }); return null; } return session; }",1e5aee620ae6c209a1549ba49e4c87c5f3ff84ad,2018-02-22 00:35:50,3
618774,telephony_java_android_telephony_MbmsDownloadSession.java,"public static android.telephony.MbmsDownloadSession create(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull android.telephony.mbms.MbmsDownloadSessionCallback callback, @android.annotation.NonNull android.os.Handler handler) { return android.telephony.MbmsDownloadSession.create(context, callback, android.telephony.SubscriptionManager.getDefaultSubscriptionId(), handler); }",97e2d59b8a211bb33ef72fbedb8f80752d2eb446,"public static android.telephony.MbmsDownloadSession create(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull android.telephony.mbms.MbmsDownloadSessionCallback callback) { return android.telephony.MbmsDownloadSession.create(context, android.telephony.SubscriptionManager.getDefaultSubscriptionId(), executor, callback); }",0762ecd6e63c7740bb793054d2bd47aabdc3d447,"public static android.telephony.MbmsDownloadSession create(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull android.telephony.mbms.MbmsDownloadSessionCallback callback) { return android.telephony.MbmsDownloadSession.create(context, executor, android.telephony.SubscriptionManager.getDefaultSubscriptionId(), callback); }",1344cb036db12d13e5dcc4d54b1db0fc528c0362,2018-02-22 00:35:50,3
618774,telephony_java_android_telephony_mbms_DownloadRequest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static android.telephony.mbms.DownloadRequest.Builder fromDownloadRequest(android.telephony.mbms.DownloadRequest other) { android.telephony.mbms.DownloadRequest.Builder result = new android.telephony.mbms.DownloadRequest.Builder(other.sourceUri).setServiceId(other.fileServiceId).setSubscriptionId(other.subscriptionId); result.appIntent = other.serializedResultIntentForApp; return result; },dc1fd77b80a235982e2750078a88958acff74033,"public static android.telephony.mbms.DownloadRequest.Builder fromDownloadRequest(android.telephony.mbms.DownloadRequest other) { android.telephony.mbms.DownloadRequest.Builder result = new android.telephony.mbms.DownloadRequest.Builder(other.sourceUri, other.destinationUri).setServiceId(other.fileServiceId).setSubscriptionId(other.subscriptionId); result.appIntent = other.serializedResultIntentForApp; return result; }",c4efb0e72188afb7a6a2eaf3b7b20197958e5942,2018-02-22 00:35:50,3
618774,telephony_java_android_telephony_MbmsStreamingSession.java,"public static android.telephony.MbmsStreamingSession create(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull android.telephony.mbms.MbmsStreamingSessionCallback callback, @android.annotation.NonNull android.os.Handler handler) { return android.telephony.MbmsStreamingSession.create(context, callback, android.telephony.SubscriptionManager.getDefaultSubscriptionId(), handler); }",5e870e84445e42f8c027a8fe67fd5134978fb37e,"public static android.telephony.MbmsStreamingSession create(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull android.telephony.mbms.MbmsStreamingSessionCallback callback) { return android.telephony.MbmsStreamingSession.create(context, android.telephony.SubscriptionManager.getDefaultSubscriptionId(), executor, callback); }",e5069f0e087cfd1c904c3897990bc918a4c69aea,"public static android.telephony.MbmsStreamingSession create(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull android.telephony.mbms.MbmsStreamingSessionCallback callback) { return android.telephony.MbmsStreamingSession.create(context, executor, android.telephony.SubscriptionManager.getDefaultSubscriptionId(), callback); }",f1ad1219d708a6fd209beb5a5560c930767d5ba5,2018-02-22 00:35:50,3
622447,src_java_com_android_internal_telephony_ServiceStateTracker.java,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (intent.getAction().equals(CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED)) { updateLteEarfcnLists(); return; } if (!(mPhone.isPhoneTypeGsm())) { loge(((""Ignoring intent "" + intent) + "" received on CDMA phone"")); return; } if (intent.getAction().equals(Intent.ACTION_LOCALE_CHANGED)) { updateSpnDisplay(); } else if (intent.getAction().equals(com.android.internal.telephony.ServiceStateTracker.ACTION_RADIO_OFF)) { mAlarmSwitch = false; com.android.internal.telephony.dataconnection.DcTracker dcTracker = mPhone.mDcTracker; powerOffRadioSafely(dcTracker); } }",5202c1b62fa880f8c0cc084621a3478473cdd72f,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (intent.getAction().equals(CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED)) { if (com.android.internal.telephony.ServiceStateTracker.VDBG) log(""onReceive: ACTION_CARRIER_CONFIG_CHANGED""); sendMessage(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_CARRIER_CONFIG_CHANGED)); return; } if (!(mPhone.isPhoneTypeGsm())) { loge(((""Ignoring intent "" + intent) + "" received on CDMA phone"")); return; } if (intent.getAction().equals(Intent.ACTION_LOCALE_CHANGED)) { updateSpnDisplay(); } else if (intent.getAction().equals(com.android.internal.telephony.ServiceStateTracker.ACTION_RADIO_OFF)) { mAlarmSwitch = false; com.android.internal.telephony.dataconnection.DcTracker dcTracker = mPhone.mDcTracker; powerOffRadioSafely(dcTracker); } }",08f5eb1d04d78afe9c131414b1d0cb342d67721f,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (intent.getAction().equals(CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED)) { updateLteEarfcnLists(); return; } if (!(mPhone.isPhoneTypeGsm())) { loge(((""Ignoring intent "" + intent) + "" received on CDMA phone"")); return; } if (intent.getAction().equals(Intent.ACTION_LOCALE_CHANGED)) { updateSpnDisplay(); } else if (intent.getAction().equals(com.android.internal.telephony.ServiceStateTracker.ACTION_RADIO_OFF)) { mAlarmSwitch = false; com.android.internal.telephony.dataconnection.DcTracker dcTracker = mPhone.mDcTracker; powerOffRadioSafely(dcTracker); } }",5202c1b62fa880f8c0cc084621a3478473cdd72f,2018-02-22 01:18:43,3
622432,src_com_android_bluetooth_btservice_AdapterService.java,public void addProfile(com.android.bluetooth.btservice.ProfileService profile) { synchronized(mProfiles) { if (!(mProfiles.contains(profile))) { mProfiles.add(profile); } } },0a18e91fb2570af6f1eb904fcd4bfcc115214363,"public void addProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_REGISTERED, profile); mHandler.sendMessage(m); }",fc45c39e0dc892c497875b8bbf4e9f3a6e12f52b,"public void addProfile(com.android.bluetooth.btservice.ProfileService profile) { mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_REGISTERED, profile).sendToTarget(); }",0d868e8ccb5f5f2e9a68f8d439ba4f61146d3d23,2018-02-22 02:30:51,5
622432,src_com_android_bluetooth_btservice_AdapterService.java,public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { synchronized(mProfiles) { mProfiles.remove(profile); } },4659afdc57f814f370faf4e1e9556c0781b5e9ef,"public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_UNREGISTERED, profile); mHandler.sendMessage(m); }",fd25d49587844c0e99a61f5b6b5dfed7eab0c7d4,"public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_UNREGISTERED, profile).sendToTarget(); }",bd57395777355b217e9093506ad6c45e0d1a5414,2018-02-22 02:30:51,5
620374,src_com_android_documentsui_roots_ProvidersCache.java,"public com.android.documentsui.base.RootInfo getRootOneshot(java.lang.String authority, java.lang.String rootId, boolean forceRefresh) { synchronized(mLock) { com.android.documentsui.base.RootInfo root = (forceRefresh) ? null : getRootLocked(authority, rootId); if (root == null) { mRoots.putAll(authority, loadRootsForAuthority(mContext.getContentResolver(), authority, forceRefresh)); root = getRootLocked(authority, rootId); } return root; } }",df4bb43350dc2d970cd23e1a1f2a094417217058,"public com.android.documentsui.base.RootInfo getRootOneshot(java.lang.String authority, java.lang.String rootId, boolean forceRefresh) { synchronized(mLock) { com.android.documentsui.base.RootInfo root = (forceRefresh) ? null : getRootLocked(authority, rootId); if (root == null) { mRoots.removeAll(authority); mRoots.putAll(authority, loadRootsForAuthority(mContext.getContentResolver(), authority, forceRefresh)); root = getRootLocked(authority, rootId); } return root; } }",a632460c9a2a02ab63380ee9bdb46621125f7aa4,"public com.android.documentsui.base.RootInfo getRootOneshot(java.lang.String authority, java.lang.String rootId, boolean forceRefresh) { synchronized(mLock) { com.android.documentsui.base.RootInfo root = (forceRefresh) ? null : getRootLocked(authority, rootId); if (root == null) { mRoots.replaceValues(authority, loadRootsForAuthority(mContext.getContentResolver(), authority, forceRefresh)); root = getRootLocked(authority, rootId); } return root; } }",87d021f2df08e906cf64f2f61361b43e469ad51b,2018-02-22 03:55:35,3
620447,core_java_android_content_pm_ApplicationInfo.java,public boolean isAllowedToUseHiddenApi() { return isSystemApp(); },22c661a95590536fe3b45b43b5b0642f612c6593,public boolean isAllowedToUseHiddenApi() { return (isSystemApp()) || (com.android.server.SystemConfig.getInstance().getHiddenApiWhitelistedApps().contains(packageName)); },81f408a7bb5beb173db38b72dcf43760ca20a279,public boolean isAllowedToUseHiddenApi() { boolean whitelisted = com.android.server.SystemConfig.getInstance().getHiddenApiWhitelistedApps().contains(packageName); return (isSystemApp()) || (whitelisted && ((isSystemApp()) || (isUpdatedSystemApp()))); },58834ea27319ec2bd292cffae2f6c9fc422696e9,2018-02-22 12:57:46,9
604514,ojluni_src_main_java_java_lang_invoke_MethodHandles.java,"public static java.lang.invoke.MethodHandle varHandleExactInvoker(java.lang.invoke.VarHandle.AccessMode accessMode, java.lang.invoke.MethodType type) { java.lang.invoke.MethodHandles.unsupported(""MethodHandles.varHandleExactInvoker()""); return null; }",711528cf05bdb090fe46f12f3c736eb961ee77cb,"public static java.lang.invoke.MethodHandle varHandleExactInvoker(java.lang.invoke.VarHandle.AccessMode accessMode, java.lang.invoke.MethodType type) { return java.lang.invoke.MethodHandles.varHandleInvoker(accessMode, type); }",912a60076953b988e7682ed27fc946ac310c7c1e,"public static java.lang.invoke.MethodHandle varHandleExactInvoker(java.lang.invoke.VarHandle.AccessMode accessMode, java.lang.invoke.MethodType type) { return java.lang.invoke.MethodHandles.methodHandleForVarHandleAccessor(accessMode, type, true); }",f146f2941e4a636f3335340c96bd1db7a6ff91aa,2018-02-22 14:49:11,5
604514,ojluni_src_main_java_java_lang_invoke_MethodHandles.java,"public static java.lang.invoke.MethodHandle varHandleInvoker(java.lang.invoke.VarHandle.AccessMode accessMode, java.lang.invoke.MethodType type) { java.lang.invoke.MethodHandles.unsupported(""MethodHandles.varHandleInvoker()""); return null; }",d92f2edec219cab692254d92e618c54f0f82c0d0,"public static java.lang.invoke.MethodHandle varHandleInvoker(java.lang.invoke.VarHandle.AccessMode accessMode, java.lang.invoke.MethodType type) { java.lang.Class<?> refc = java.lang.invoke.VarHandle.class; java.lang.reflect.Method method; try { method = refc.getDeclaredMethod(accessMode.methodName(), java.lang.Object[].class); } catch (java.lang.NoSuchMethodException e) { throw new java.lang.IllegalStateException((""No method for AccessMode "" + accessMode), e); } java.lang.invoke.MethodType methodType = type.insertParameterTypes(0, java.lang.invoke.VarHandle.class); return new java.lang.invoke.MethodHandleImpl(method.getArtMethod(), INVOKE_VAR_HANDLE, methodType); }",4e5f0bdc6a9e42e0fb49151a6ce01f89019329e1,"public static java.lang.invoke.MethodHandle varHandleInvoker(java.lang.invoke.VarHandle.AccessMode accessMode, java.lang.invoke.MethodType type) { return java.lang.invoke.MethodHandles.methodHandleForVarHandleAccessor(accessMode, type, false); }",13d30aee7bb36911c08b34c8af375014b05fe068,2018-02-22 14:49:11,5
601315,src_com_android_server_telecom_CallAudioManager.java,void toggleMute() { mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.TOGGLE_MUTE); },3ceb98036cb2fa354ce98164a75fd26a3829ba9e,"void toggleMute() { if (mCallsManager.hasEmergencyCall()) { android.telecom.Log.v(this, ""ignoring toggleMute for emergency call""); return; } mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.TOGGLE_MUTE); }",35e962d1ddd73d121cfff6b82420b8d2ac3b7edc,"@com.android.internal.annotations.VisibleForTesting public void toggleMute() { if (mCallsManager.hasEmergencyCall()) { android.telecom.Log.v(this, ""ignoring toggleMute for emergency call""); return; } mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.TOGGLE_MUTE); }",0556667b85d9d0181072dd58a1c5cac50b68210f,2018-02-23 19:39:59,4
601315,src_com_android_server_telecom_CallsManager.java,"boolean onMediaButton(int type) { if (hasAnyCalls()) { com.android.server.telecom.Call ringingCall = getFirstCallWithState(CallState.RINGING); if ((HeadsetMediaButton.SHORT_PRESS) == type) { if (ringingCall == null) { com.android.server.telecom.Call callToHangup = getFirstCallWithState(CallState.RINGING, CallState.DIALING, CallState.PULLING, CallState.ACTIVE, CallState.ON_HOLD); android.telecom.Log.addEvent(callToHangup, LogUtils.Events.INFO, ""media btn short press - end call.""); if (callToHangup != null) { disconnectCall(callToHangup); return true; } } else { ringingCall.answer(VideoProfile.STATE_AUDIO_ONLY); return true; } } else if ((HeadsetMediaButton.LONG_PRESS) == type) { if (ringingCall != null) { android.telecom.Log.addEvent(getForegroundCall(), LogUtils.Events.INFO, ""media btn long press - reject""); ringingCall.reject(false, null); } else { android.telecom.Log.addEvent(getForegroundCall(), LogUtils.Events.INFO, ""media btn long press - mute""); mCallAudioManager.toggleMute(); } return true; } } return false; }",efe9ee25c492dc6d923d1e7cbf0310352d6827b3,"@com.android.internal.annotations.VisibleForTesting public boolean onMediaButton(int type) { if (hasAnyCalls()) { com.android.server.telecom.Call ringingCall = getFirstCallWithState(CallState.RINGING); if ((HeadsetMediaButton.SHORT_PRESS) == type) { if (ringingCall == null) { com.android.server.telecom.Call callToHangup = getFirstCallWithState(CallState.RINGING, CallState.DIALING, CallState.PULLING, CallState.ACTIVE, CallState.ON_HOLD); android.telecom.Log.addEvent(callToHangup, LogUtils.Events.INFO, ""media btn short press - end call.""); if (callToHangup != null) { disconnectCall(callToHangup); return true; } } else { ringingCall.answer(VideoProfile.STATE_AUDIO_ONLY); return true; } } else if ((HeadsetMediaButton.LONG_PRESS) == type) { if (ringingCall != null) { android.telecom.Log.addEvent(getForegroundCall(), LogUtils.Events.INFO, ""media btn long press - reject""); ringingCall.reject(false, null); } else { android.telecom.Log.addEvent(getForegroundCall(), LogUtils.Events.INFO, ""media btn long press - mute""); mCallAudioManager.toggleMute(); } return true; } } return false; }",973389054d1e77458f2e495ce96a4412a3ba0eba,"boolean onMediaButton(int type) { if (hasAnyCalls()) { com.android.server.telecom.Call ringingCall = getFirstCallWithState(CallState.RINGING); if ((HeadsetMediaButton.SHORT_PRESS) == type) { if (ringingCall == null) { com.android.server.telecom.Call callToHangup = getFirstCallWithState(CallState.RINGING, CallState.DIALING, CallState.PULLING, CallState.ACTIVE, CallState.ON_HOLD); android.telecom.Log.addEvent(callToHangup, LogUtils.Events.INFO, ""media btn short press - end call.""); if (callToHangup != null) { disconnectCall(callToHangup); return true; } } else { ringingCall.answer(VideoProfile.STATE_AUDIO_ONLY); return true; } } else if ((HeadsetMediaButton.LONG_PRESS) == type) { if (ringingCall != null) { android.telecom.Log.addEvent(getForegroundCall(), LogUtils.Events.INFO, ""media btn long press - reject""); ringingCall.reject(false, null); } else { android.telecom.Log.addEvent(getForegroundCall(), LogUtils.Events.INFO, ""media btn long press - mute""); mCallAudioManager.toggleMute(); } return true; } } return false; }",efe9ee25c492dc6d923d1e7cbf0310352d6827b3,2018-02-23 19:39:59,4
587834,src_main_java_com_android_apksig_DefaultApkSignerEngine.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> createV3SignerConfig(boolean apkSigningBlockPaddingSupported) throws java.security.InvalidKeyException { return createSigningBLockSignerConfigs(apkSigningBlockPaddingSupported, ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3); }",72bef1a59f9069d98e00325772be3965ec980d01,"private java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> createV3SignerConfigs(boolean apkSigningBlockPaddingSupported) throws java.security.InvalidKeyException { java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> rawConfigs = createSigningBlockSignerConfigs(apkSigningBlockPaddingSupported, ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3); java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> processedConfigs = new java.util.ArrayList<>(); int currentMinSdk = java.lang.Integer.MAX_VALUE; for (int i = (rawConfigs.size()) - 1; i >= 0; i--) { com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig config = rawConfigs.get(i); if ((config.signatureAlgorithms) == null) { java.lang.String keyAlgorithm = config.certificates.get(0).getPublicKey().getAlgorithm(); throw new java.security.InvalidKeyException((((""Unsupported key algorithm "" + keyAlgorithm) + "" is "") + ""not supported for APK Signature Scheme v3 signing"")); } config.maxSdkVersion = currentMinSdk - 1; config.minSdkVersion = getMinSdkFromV3SignatureAlgorithms(config.signatureAlgorithms); processedConfigs.add(config); currentMinSdk = config.minSdkVersion; if ((currentMinSdk <= (mMinSdkVersion)) || (currentMinSdk <= (com.android.apksig.internal.util.AndroidSdkVersion.P))) { break; } } if ((currentMinSdk > (com.android.apksig.internal.util.AndroidSdkVersion.P)) && (currentMinSdk > (mMinSdkVersion))) { throw new java.security.InvalidKeyException((""Provided key algorithms not supported on all desired "" + ""Android SDK versions"")); } return processedConfigs; }",7966845a311e1a17a773a29459bb04525273ca3a,2018-02-23 22:40:10,10
587834,src_main_java_com_android_apksig_DefaultApkSignerEngine.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.android.apksig.DefaultApkSignerEngine.SignerConfig.Builder setApkSignerLineage(com.android.apksig.ApkSignerLineage apkSignerLineage) { throw new sun.reflect.generics.reflectiveObjects.NotImplementedException(); },2c03230642cccf32b30fb32ccb2712e018699009,public com.android.apksig.DefaultApkSignerEngine.SignerConfig.Builder setSigningCertificateLineage(com.android.apksig.SigningCertificateLineage signingCertificateLineage) { throw new java.lang.UnsupportedOperationException(); },9ca0418e1d82a55a9e8e06f355c75ba4cb0fff32,2018-02-23 22:40:10,10
587834,src_main_java_com_android_apksig_ApkSigner.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.android.apksig.ApkSigner.Builder setOldSignerConfig(com.android.apksig.ApkSigner.SignerConfig oldSigner) { checkInitializedWithoutEngine(); if (!(mV3SigningEnabled)) { throw new java.lang.IllegalArgumentException((""An old signer can only be specified when using "" + ""APK Signature Scheme v3. Please enable that first"")); } mOldSignerConfig = oldSigner; return this; }",baefb5156803083ca7e234323b2ce58f97b0c69d,public com.android.apksig.ApkSigner.Builder setSigningCertificateLineage(com.android.apksig.SigningCertificateLineage signingCertificateLineage) { mV3SigningEnabled = true; throw new java.lang.UnsupportedOperationException(); },52d8b8eea83d0fc7e16905fce8ae175ff57742cb,2018-02-23 22:40:10,10
587834,src_main_java_com_android_apksig_ApkSigner.java,"public com.android.apksig.ApkSigner.SignerConfig build() { return new com.android.apksig.ApkSigner.SignerConfig(mName, mPrivateKey, mCertificates); }",5136216e4cd0d8450d5e962de9c76672998f5910,"public com.android.apksig.ApkSigner.SignerConfig build() { return new com.android.apksig.ApkSigner.SignerConfig(mName, mPrivateKey, mCertificates, mMinSdkVersion, mMaxSdkVersion, mApkSignerLineage); }",3ff9106fd37248e6954249d69f5707946c0fe980,"public com.android.apksig.ApkSigner.SignerConfig build() { return new com.android.apksig.ApkSigner.SignerConfig(mName, mPrivateKey, mCertificates); }",5136216e4cd0d8450d5e962de9c76672998f5910,2018-02-23 22:40:10,10
587834,src_main_java_com_android_apksig_ApkSigner.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.android.apksig.ApkSigner.Builder setV3SigningEnabled(boolean enabled) { checkInitializedWithoutEngine(); if ((enabled && ((mSignerConfigs) != null)) && ((mSignerConfigs.size()) > 1)) { throw new java.lang.IllegalArgumentException((""APK Signature Scheme v3 cannot be used with "" + ""multiple signers."")); } mV3SigningEnabled = enabled; return this; }",085b4bc46fb0b596a69e56cef6f15f0fb464238d,public com.android.apksig.ApkSigner.Builder setV3SigningEnabled(boolean enabled) { checkInitializedWithoutEngine(); mV3SigningEnabled = enabled; if (enabled) { mV3SigningExplicitlyEnabled = true; } else { mV3SigningExplicitlyDisabled = true; } return this; },83c7a25c1ad36285a4d0e9dd41d5a834fa2efe32,2018-02-23 22:40:10,10
587834,src_main_java_com_android_apksig_internal_apk_v3_V3SchemeSigner.java,,,private static byte[] generateAdditionalAttributes(com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig signerConfig) { if ((signerConfig.apkSignerLineage) == null) { return new byte[0]; } throw new sun.reflect.generics.reflectiveObjects.NotImplementedException(); },790a074b43f1801ea96f6141693edf283ff251c7,private static byte[] generateAdditionalAttributes(com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig signerConfig) { if ((signerConfig.mSigningCertificateLineage) == null) { return new byte[0]; } throw new java.lang.UnsupportedOperationException(); },062d3ca0d1a1c6d2d3c0728c815734068affe752,2018-02-23 22:40:10,10
587834,src_main_java_com_android_apksig_ApkSigner.java,"public com.android.apksig.ApkSigner build() { return new com.android.apksig.ApkSigner(mSignerConfigs, mMinSdkVersion, mV1SigningEnabled, mV2SigningEnabled, mDebuggableApkPermitted, mOtherSignersSignaturesPreserved, mCreatedBy, mSignerEngine, mInputApkFile, mInputApkDataSource, mOutputApkFile, mOutputApkDataSink, mOutputApkDataSource); }",b6fd93ea497eacd747f7df1a2badf54651509285,"public com.android.apksig.ApkSigner build() { return new com.android.apksig.ApkSigner(mSignerConfigs, mOldSignerConfig, mMinSdkVersion, mV1SigningEnabled, mV2SigningEnabled, mV3SigningEnabled, mDebuggableApkPermitted, mOtherSignersSignaturesPreserved, mCreatedBy, mSignerEngine, mInputApkFile, mInputApkDataSource, mOutputApkFile, mOutputApkDataSink, mOutputApkDataSource); }",e23218f6772829a3f6f4ad503d9f78ac9ddecab1,"public com.android.apksig.ApkSigner build() { if ((mV3SigningExplicitlyDisabled) && (mV3SigningExplicitlyEnabled)) { throw new java.lang.IllegalStateException((""Builder configured to both enable and disable APK "" + ""Signature Scheme v3 signing"")); } if (mV3SigningExplicitlyDisabled) { mV3SigningEnabled = false; } if (mV3SigningExplicitlyEnabled) { mV3SigningEnabled = true; } return new com.android.apksig.ApkSigner(mSignerConfigs, mMinSdkVersion, mV1SigningEnabled, mV2SigningEnabled, mV3SigningEnabled, mDebuggableApkPermitted, mOtherSignersSignaturesPreserved, mCreatedBy, mSignerEngine, mInputApkFile, mInputApkDataSource, mOutputApkFile, mOutputApkDataSink, mOutputApkDataSource, mSigningCertificateLineage); }",4bbf788ccfccdd94bea4e80f12e28ae68246e39f,2018-02-23 22:40:10,10
587834,src_main_java_com_android_apksig_ApkSignerLineage.java,,,public com.android.apksig.ApkSignerLineage build() { return new com.android.apksig.ApkSignerLineage(); },dda89d5fd2bbbe33afdd4eb2978bdcde3e251142,"public java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> sortSignerConfigs(java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> signerConfigs) { throw new java.lang.UnsupportedOperationException(""SigningCertificateLineage support not yet added""); }",a1d731194b2ff545b5e7b64df6a8fef8e6a0953b,2018-02-23 22:40:10,10
587834,src_main_java_com_android_apksig_internal_apk_v3_V3SchemeSigner.java,,,"private static com.android.apksig.internal.util.Pair<byte[], java.lang.Integer> generateApkSignatureSchemeV3Block(java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> signerConfigs, java.util.Map<com.android.apksig.internal.apk.ContentDigestAlgorithm, byte[]> contentDigests) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException { if ((signerConfigs.size()) > 1) { throw new java.lang.IllegalArgumentException((""APK Signature Scheme v3 cannot be used with "" + ""multiple signers"")); } java.util.List<byte[]> signerBlocks = new java.util.ArrayList(signerConfigs.size()); int signerNumber = 0; for (com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig signerConfig : signerConfigs) { signerNumber++; byte[] signerBlock; try { signerBlock = com.android.apksig.internal.apk.v3.V3SchemeSigner.generateSignerBlock(signerConfig, contentDigests); } catch (java.security.InvalidKeyException e) { throw new java.security.InvalidKeyException(((""Signer #"" + signerNumber) + "" failed""), e); } catch (java.security.SignatureException e) { throw new java.security.SignatureException(((""Signer #"" + signerNumber) + "" failed""), e); } signerBlocks.add(signerBlock); } return com.android.apksig.internal.util.Pair.of(com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsSequenceOfLengthPrefixedElements(new byte[][]{ com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsSequenceOfLengthPrefixedElements(signerBlocks) }), com.android.apksig.internal.apk.v3.V3SchemeSigner.APK_SIGNATURE_SCHEME_V3_BLOCK_ID); }",dd0e6e1388cc0c64fd1e22e900f94f75119d6b1c,"private static com.android.apksig.internal.util.Pair<byte[], java.lang.Integer> generateApkSignatureSchemeV3Block(java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> signerConfigs, java.util.Map<com.android.apksig.internal.apk.ContentDigestAlgorithm, byte[]> contentDigests) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException { java.util.List<byte[]> signerBlocks = new java.util.ArrayList(signerConfigs.size()); int signerNumber = 0; for (com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig signerConfig : signerConfigs) { signerNumber++; byte[] signerBlock; try { signerBlock = com.android.apksig.internal.apk.v3.V3SchemeSigner.generateSignerBlock(signerConfig, contentDigests); } catch (java.security.InvalidKeyException e) { throw new java.security.InvalidKeyException(((""Signer #"" + signerNumber) + "" failed""), e); } catch (java.security.SignatureException e) { throw new java.security.SignatureException(((""Signer #"" + signerNumber) + "" failed""), e); } signerBlocks.add(signerBlock); } return com.android.apksig.internal.util.Pair.of(com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsSequenceOfLengthPrefixedElements(new byte[][]{ com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsSequenceOfLengthPrefixedElements(signerBlocks) }), com.android.apksig.internal.apk.v3.V3SchemeSigner.APK_SIGNATURE_SCHEME_V3_BLOCK_ID); }",e2091b0270aec42cc26132806d1df1b3f6761259,2018-02-23 22:40:10,10
587834,src_main_java_com_android_apksig_DefaultApkSignerEngine.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private ApkSigningBlockUtils.SignerConfig createSigningBLockSignerConfig(com.android.apksig.DefaultApkSignerEngine.SignerConfig signerConfig, boolean apkSigningBlockPaddingSupported, int schemeId) throws java.security.InvalidKeyException { java.util.List<java.security.cert.X509Certificate> certificates = signerConfig.getCertificates(); java.security.PublicKey publicKey = certificates.get(0).getPublicKey(); com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig newSignerConfig = new com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig(); newSignerConfig.privateKey = signerConfig.getPrivateKey(); newSignerConfig.certificates = certificates; newSignerConfig.minSdkVersion = signerConfig.getMinSdkVersion(); newSignerConfig.maxSdkVersion = signerConfig.getMaxSdkVersion(); newSignerConfig.apkSignerLineage = signerConfig.getApkSignerLineage(); switch (schemeId) { case com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2 : newSignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v2.V2SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); break; case com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3 : newSignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v3.V3SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); break; default : throw new java.lang.IllegalArgumentException(""Unknown APK Signature Scheme ID requested""); } return newSignerConfig; }",ec893e9f8f881435a8d5dac5badeae87e26feea0,"private ApkSigningBlockUtils.SignerConfig createSigningBlockSignerConfig(com.android.apksig.DefaultApkSignerEngine.SignerConfig signerConfig, boolean apkSigningBlockPaddingSupported, int schemeId) throws java.security.InvalidKeyException { java.util.List<java.security.cert.X509Certificate> certificates = signerConfig.getCertificates(); java.security.PublicKey publicKey = certificates.get(0).getPublicKey(); com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig newSignerConfig = new com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig(); newSignerConfig.privateKey = signerConfig.getPrivateKey(); newSignerConfig.certificates = certificates; switch (schemeId) { case com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2 : newSignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v2.V2SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); break; case com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3 : try { newSignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v3.V3SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); } catch (java.security.InvalidKeyException e) { newSignerConfig.signatureAlgorithms = null; } break; default : throw new java.lang.IllegalArgumentException(""Unknown APK Signature Scheme ID requested""); } return newSignerConfig; }",d4e5243fee5f3e6e730764e707ab0c28121c8b6c,2018-02-23 22:40:10,10
587834,src_main_java_com_android_apksig_DefaultApkSignerEngine.java,"private void checkV2SigningDoneIfEnabled() { if (!(mV2SignaturePending)) { return; } if ((mAddV2SignatureRequest) == null) { throw new java.lang.IllegalStateException((""v2 signature (APK Signature Scheme v2 signature) not yet generated."" + "" Skipped outputZipSections()?"")); } if (!(mAddV2SignatureRequest.isDone())) { throw new java.lang.IllegalStateException((""v2 signature (APK Signature Scheme v2 signature) addition requested by"" + "" outputZipSections() hasn't been fulfilled yet"")); } mAddV2SignatureRequest = null; mV2SignaturePending = false; }",1faf3bf31186882ef3c344419a36dc561ca21cd2,"private void checkSigningBlockDoneIfEnabled() { if ((!(mV2SignaturePending)) || (!(mV3SignaturePending))) { return; } if ((mAddSigningBlockRequest) == null) { throw new java.lang.IllegalStateException(""Signed APK Signing BLock not yet generated. Skipped outputZipSections()?""); } if (!(mAddSigningBlockRequest.isDone())) { throw new java.lang.IllegalStateException((""APK Signing Block addition of signature(s) requested by"" + "" outputZipSections() hasn't been fulfilled yet"")); } mAddSigningBlockRequest = null; mV2SignaturePending = false; mV3SignaturePending = false; }",080e3b8e8221415a699387db0830f9e40ee0f0a5,"private void checkSigningBlockDoneIfEnabled() { if ((!(mV2SignaturePending)) && (!(mV3SignaturePending))) { return; } if ((mAddSigningBlockRequest) == null) { throw new java.lang.IllegalStateException(""Signed APK Signing BLock not yet generated. Skipped outputZipSections()?""); } if (!(mAddSigningBlockRequest.isDone())) { throw new java.lang.IllegalStateException((""APK Signing Block addition of signature(s) requested by"" + "" outputZipSections() hasn't been fulfilled yet"")); } mAddSigningBlockRequest = null; mV2SignaturePending = false; mV3SignaturePending = false; }",c20b92e24aae05b49267f51a3deebbdfb1fa4a7f,2018-02-23 22:40:10,10
587834,src_main_java_com_android_apksig_DefaultApkSignerEngine.java,"public com.android.apksig.DefaultApkSignerEngine.SignerConfig build() { return new com.android.apksig.DefaultApkSignerEngine.SignerConfig(mName, mPrivateKey, mCertificates); }",679574ff6c8bc1d67217867f6a27ae97c6df3847,"public com.android.apksig.DefaultApkSignerEngine.SignerConfig build() { return new com.android.apksig.DefaultApkSignerEngine.SignerConfig(mName, mPrivateKey, mCertificates, mMinSdkVersion, mMaxSdkVersion, mApkSignerLineage); }",d9f79b4f9b2d7c7b6836177674ca5cc832c61b92,"public com.android.apksig.DefaultApkSignerEngine.SignerConfig build() { return new com.android.apksig.DefaultApkSignerEngine.SignerConfig(mName, mPrivateKey, mCertificates); }",679574ff6c8bc1d67217867f6a27ae97c6df3847,2018-02-23 22:40:10,10
587834,src_main_java_com_android_apksig_DefaultApkSignerEngine.java,"private java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> createV2SignerConfigs(boolean apkSigningBlockPaddingSupported) throws java.security.InvalidKeyException { java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> v2SignerConfigs = new java.util.ArrayList<>(mSignerConfigs.size()); for (int i = 0; i < (mSignerConfigs.size()); i++) { com.android.apksig.DefaultApkSignerEngine.SignerConfig signerConfig = mSignerConfigs.get(i); java.util.List<java.security.cert.X509Certificate> certificates = signerConfig.getCertificates(); java.security.PublicKey publicKey = certificates.get(0).getPublicKey(); com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig v2SignerConfig = new com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig(); v2SignerConfig.privateKey = signerConfig.getPrivateKey(); v2SignerConfig.certificates = certificates; v2SignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v2.V2SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); v2SignerConfigs.add(v2SignerConfig); } return v2SignerConfigs; }",5d12810cb4c5d21f9480214d35b4756455a1c63f,"private java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> createV2SignerConfigs(boolean apkSigningBlockPaddingSupported) throws java.security.InvalidKeyException { if ((mOldSignerConfig) != null) { java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> signerConfig = new java.util.ArrayList<>(); signerConfig.add(createSigningBLockSignerConfig(mOldSignerConfig, apkSigningBlockPaddingSupported, ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2)); return signerConfig; } else { return createSigningBLockSignerConfigs(apkSigningBlockPaddingSupported, ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2); } }",e84e2120958b223cd990516ff79571a95a0bdf99,"private java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> createV2SignerConfigs(boolean apkSigningBlockPaddingSupported) throws java.security.InvalidKeyException { if (mV3SigningEnabled) { java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> signerConfig = new java.util.ArrayList<>(); signerConfig.add(createSigningBlockSignerConfig(mSignerConfigs.get(0), apkSigningBlockPaddingSupported, ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2)); return signerConfig; } else { return createSigningBlockSignerConfigs(apkSigningBlockPaddingSupported, ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2); } }",37c1a4a91d74d970a465be74b603a24ece0372af,2018-02-23 22:40:10,10
587834,src_main_java_com_android_apksig_DefaultApkSignerEngine.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> createSigningBLockSignerConfigs(boolean apkSigningBlockPaddingSupported, int schemeId) throws java.security.InvalidKeyException { java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> signerConfigs = new java.util.ArrayList<>(mSignerConfigs.size()); for (int i = 0; i < (mSignerConfigs.size()); i++) { com.android.apksig.DefaultApkSignerEngine.SignerConfig signerConfig = mSignerConfigs.get(i); signerConfigs.add(createSigningBLockSignerConfig(signerConfig, apkSigningBlockPaddingSupported, schemeId)); } return signerConfigs; }",a536057f6f0ff25b8e708e972ddf4533037f6c1c,"private java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> createSigningBlockSignerConfigs(boolean apkSigningBlockPaddingSupported, int schemeId) throws java.security.InvalidKeyException { java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> signerConfigs = new java.util.ArrayList<>(mSignerConfigs.size()); for (int i = 0; i < (mSignerConfigs.size()); i++) { com.android.apksig.DefaultApkSignerEngine.SignerConfig signerConfig = mSignerConfigs.get(i); signerConfigs.add(createSigningBlockSignerConfig(signerConfig, apkSigningBlockPaddingSupported, schemeId)); } return signerConfigs; }",9e2694beb7d5aa34aa5b03131a92992e286ba9a9,2018-02-23 22:40:10,10
626051,src_com_android_bluetooth_a2dpsink_mbs_A2dpMediaBrowserService.java,"private synchronized void msgGetPlayStatusNative() { android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ""msgGetPlayStatusNative""); if ((mA2dpDevice) == null) { android.util.Log.e(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ""Already disconnected ignoring.""); return; } mAvrcpCtrlSrvc.getPlaybackState(mA2dpDevice, false); }",55b9bf3fef934199fd16cf0179572547f5b202b5,"private synchronized void msgGetPlayStatusNative() { if (com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.DBG) android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ""msgGetPlayStatusNative""); if ((mA2dpDevice) == null) { android.util.Log.e(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ""Already disconnected ignoring.""); return; } mAvrcpCtrlSrvc.getPlaybackState(mA2dpDevice, false); }",2f586f852e787b3fe93e4a76623d98ee261829fd,"private synchronized void msgGetPlayStatusNative() { if (com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.DBG) android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ""msgGetPlayStatusNative""); if ((mA2dpDevice) == null) { android.util.Log.w(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ""Already disconnected ignoring.""); return; } mAvrcpCtrlSrvc.getPlaybackState(mA2dpDevice, false); }",c6587079570e2de6ba988015f8981fb2b00f4fc7,2018-02-23 22:52:23,3
626051,src_com_android_bluetooth_a2dpsink_mbs_A2dpMediaBrowserService.java,"@java.lang.Override public synchronized void onLoadChildren(final java.lang.String parentMediaId, final com.android.bluetooth.a2dpsink.mbs.Result<java.util.List<android.media.browse.MediaBrowser.MediaItem>> result) { if ((mAvrcpCtrlSrvc) == null) { android.util.Log.e(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ""AVRCP not yet connected.""); result.sendResult(java.util.Collections.emptyList()); return; } android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, (""onLoadChildren parentMediaId="" + parentMediaId)); if (!(mAvrcpCtrlSrvc.getChildren(mA2dpDevice, parentMediaId, 0, 255))) { result.sendResult(java.util.Collections.emptyList()); return; } synchronized(this) { mParentIdToRequestMap.put(parentMediaId, result); } result.detach(); }",e87afcb15a9f96785c1980e4ebf204ef4c92abc0,"@java.lang.Override public synchronized void onLoadChildren(final java.lang.String parentMediaId, final com.android.bluetooth.a2dpsink.mbs.Result<java.util.List<android.media.browse.MediaBrowser.MediaItem>> result) { if ((mAvrcpCtrlSrvc) == null) { android.util.Log.e(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ""AVRCP not yet connected.""); result.sendResult(java.util.Collections.emptyList()); return; } if (com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.DBG) android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, (""onLoadChildren parentMediaId="" + parentMediaId)); if (!(mAvrcpCtrlSrvc.getChildren(mA2dpDevice, parentMediaId, 0, 255))) { result.sendResult(java.util.Collections.emptyList()); return; } synchronized(this) { mParentIdToRequestMap.put(parentMediaId, result); } result.detach(); }",95d881035d3a5918f46e3271f223832f348b06b0,"@java.lang.Override public synchronized void onLoadChildren(final java.lang.String parentMediaId, final com.android.bluetooth.a2dpsink.mbs.Result<java.util.List<android.media.browse.MediaBrowser.MediaItem>> result) { if ((mAvrcpCtrlSrvc) == null) { android.util.Log.w(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ""AVRCP not yet connected.""); result.sendResult(java.util.Collections.emptyList()); return; } if (com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.DBG) android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, (""onLoadChildren parentMediaId="" + parentMediaId)); if (!(mAvrcpCtrlSrvc.getChildren(mA2dpDevice, parentMediaId, 0, 255))) { result.sendResult(java.util.Collections.emptyList()); return; } synchronized(this) { mParentIdToRequestMap.put(parentMediaId, result); } result.detach(); }",9b35f87453b84d598b79b16031c09c149e1c9c25,2018-02-23 22:52:23,3
626051,src_com_android_bluetooth_a2dpsink_mbs_A2dpMediaBrowserService.java,"private synchronized void msgPassThru(int cmd) { android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, (""msgPassThru "" + cmd)); if ((mA2dpDevice) == null) { android.util.Log.e(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ""Already disconnected ignoring.""); return; } mAvrcpCtrlSrvc.sendPassThroughCmd(mA2dpDevice, cmd, AvrcpControllerService.KEY_STATE_PRESSED); mAvrcpCtrlSrvc.sendPassThroughCmd(mA2dpDevice, cmd, AvrcpControllerService.KEY_STATE_RELEASED); }",4448efcd5eb7b36a56ea5b7d4ec3fc28979fb834,"private synchronized void msgPassThru(int cmd) { if (com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.DBG) android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, (""msgPassThru "" + cmd)); if ((mA2dpDevice) == null) { android.util.Log.e(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ""Already disconnected ignoring.""); return; } mAvrcpCtrlSrvc.sendPassThroughCmd(mA2dpDevice, cmd, AvrcpControllerService.KEY_STATE_PRESSED); mAvrcpCtrlSrvc.sendPassThroughCmd(mA2dpDevice, cmd, AvrcpControllerService.KEY_STATE_RELEASED); }",f894fa46355d80700552ef1e95718e56d2e6c1cb,"private synchronized void msgPassThru(int cmd) { if (com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.DBG) android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, (""msgPassThru "" + cmd)); if ((mA2dpDevice) == null) { android.util.Log.w(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ""Already disconnected ignoring.""); return; } mAvrcpCtrlSrvc.sendPassThroughCmd(mA2dpDevice, cmd, AvrcpControllerService.KEY_STATE_PRESSED); mAvrcpCtrlSrvc.sendPassThroughCmd(mA2dpDevice, cmd, AvrcpControllerService.KEY_STATE_RELEASED); }",a301123a879e4275dfcc7ee2f7bf474e925d2c64,2018-02-23 22:52:23,3
625207,rcs_rcsservice_src_com_android_service_ims_RcsStackAdaptor.java,private void clearImsUceService() { synchronized(mSyncObj) { mImsUceManager = null; mStackService = null; mStackPresService = null; } },e5203638aa302e2c553b0f6f9d32b7b8dc97ef90,"private void clearImsUceService() { synchronized(mSyncObj) { try { if ((mStackService) != null) { mStackService.destroyPresenceService(mStackPresenceServiceHandle); } } catch (android.os.RemoteException e) { logger.warn(""clearImsUceService: Couldn't clean up stack service""); } mImsUceManager = null; mStackService = null; mStackPresService = null; } }",dd395d8cd5727f236181bd96668bc055b0ec09e5,"private void clearImsUceService() { synchronized(mSyncObj) { try { logger.info(""clearImsUceService: removing listener and presence service.""); if ((mStackPresService) != null) { mStackPresService.removeListener(mStackPresenceServiceHandle, mListenerHandle); } if ((mStackService) != null) { mStackService.destroyPresenceService(mStackPresenceServiceHandle); } } catch (android.os.RemoteException e) { logger.warn(""clearImsUceService: Couldn't clean up stack service""); } mImsUceManager = null; mStackService = null; mStackPresService = null; } }",0c3e55d3c1fcdc9251e2f80b9415be71282db468,2018-02-23 22:57:28,2
579842,src_com_android_settings_development_DevelopmentSettings.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void updateBluetoothEnableAvdtpDelayReportOptions() { updateSwitchPreference(mBluetoothEnableAvdtpDelayReport, android.os.SystemProperties.getBoolean(com.android.settings.development.DevelopmentSettings.BLUETOOTH_ENABLE_AVDTP_DELAY_REPORTS, false)); }",c307dd3d45700983d98cad48f693fd8634e1d544,"private void updateBluetoothEnableAvdtpDelayReportOptions() { updateSwitchPreference(mBluetoothEnableAvdtpDelayReport, android.os.SystemProperties.getBoolean(com.android.settings.development.DevelopmentSettings.BLUETOOTH_ENABLE_AVDTP_DELAY_REPORTS_PROPERTY, false)); }",4ac14307c07d1142c05086ebadae6512699a490a,2018-02-23 23:07:25,5
579842,src_com_android_settings_development_DevelopmentSettings.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void writeBluetoothEnableAvdtpDelayReportOptions() { android.os.SystemProperties.set(com.android.settings.development.DevelopmentSettings.BLUETOOTH_ENABLE_AVDTP_DELAY_REPORTS, (mBluetoothEnableAvdtpDelayReport.isChecked() ? ""true"" : ""false"")); }",8dcabe954df6857f7737d9891fabaa0bf5ff0cdd,"private void writeBluetoothEnableAvdtpDelayReportOptions() { android.os.SystemProperties.set(com.android.settings.development.DevelopmentSettings.BLUETOOTH_ENABLE_AVDTP_DELAY_REPORTS_PROPERTY, (mBluetoothEnableAvdtpDelayReport.isChecked() ? ""true"" : ""false"")); }",9e9d6c7772b1137dc50387a4fa8e0d68bd74871f,2018-02-23 23:07:25,5
525696,services_core_java_com_android_server_NativeDaemonConnector.java,"@java.lang.Override public void run() { mCallbackHandler = new android.os.Handler(mLooper, this); while (true) { try { listenToSocket(); } catch (java.lang.Exception e) { loge((""Error in NativeDaemonConnector: "" + e)); java.lang.String shutdownAct = android.os.SystemProperties.get(ShutdownThread.SHUTDOWN_ACTION_PROPERTY, """"); if ((shutdownAct != null) && ((shutdownAct.length()) > 0)) { break; } android.os.SystemClock.sleep(5000); } } }",ce7222fd0d009dd8f78dce107ba4232f9182eb9f,"@java.lang.Override public void run() { mCallbackHandler = new android.os.Handler(mLooper, this); while (true) { try { listenToSocket(); } catch (java.lang.Exception e) { loge((""Error in NativeDaemonConnector: "" + e)); android.os.SystemClock.sleep(5000); } java.lang.String shutdownAct = android.os.SystemProperties.get(ShutdownThread.SHUTDOWN_ACTION_PROPERTY, """"); if ((shutdownAct != null) && ((shutdownAct.length()) > 0)) { break; } } }",0d4adda7fae141953aa6f90035547231814a637f,"@java.lang.Override public void run() { mCallbackHandler = new android.os.Handler(mLooper, this); while (true) { if (com.android.server.NativeDaemonConnector.isShuttingDown()) break; try { listenToSocket(); } catch (java.lang.Exception e) { loge((""Error in NativeDaemonConnector: "" + e)); if (com.android.server.NativeDaemonConnector.isShuttingDown()) break; android.os.SystemClock.sleep(5000); } } }",fa3c00380007024fe2475dc4a7c95d3ddba29aa0,2018-02-26 06:49:51,3
623701,src_java_com_android_internal_telephony_ImsSmsDispatcher.java,"private void getImsService() throws com.android.ims.ImsException { android.telephony.Rlog.d(com.android.internal.telephony.TAG, ""getImsService""); getImsManager().addNotifyStatusChangedCallbackIfAvailable(mNotifyStatusChangedCallback); mNotifyStatusChangedCallback.notifyStateChanged(); }",cd7f8390426c2b0a9ac47718a4be0e5f6f3b16bd,"@java.lang.Override public void connectionUnavailable() { android.telephony.Rlog.d(com.android.internal.telephony.ImsSmsDispatcher.TAG, ""ImsManager: connection unavailable.""); mIsImsServiceUp = false; }",33943d94a7a0d2502a6930cc8f81fb278c9ef0d0,"@java.lang.Override public void connectionUnavailable() { android.telephony.Rlog.d(com.android.internal.telephony.ImsSmsDispatcher.TAG, ""ImsManager: connection unavailable.""); synchronized(mLock) { mIsImsServiceUp = false; } }",21c5f2b08ffa8984313211f9a646196ba513b98f,2018-02-26 21:17:36,3
623700,src_java_com_android_ims_ImsManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void disconnect() { removeMessages(com.android.ims.ImsManager.Connector.EVENT_GET_IMS_SERVICE); synchronized(mLock) { if ((mImsManager) != null) { mImsManager.removeNotifyStatusChangedCallback(mNotifyStatusChangedCallback); } } notifyNotReady(); },d96dd12927c52ddaf57f4b3a74b8020b3e1fce07,public void disconnect() { removeCallbacks(mGetServiceRunnable); synchronized(mLock) { if ((mImsManager) != null) { mImsManager.removeNotifyStatusChangedCallback(mNotifyStatusChangedCallback); } } notifyNotReady(); },4c5d04e03848561d3d796018ef0c5fd989bdcd60,2018-02-26 21:17:36,2
623700,src_java_com_android_ims_ImsManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void connect() { mRetryCount = 0; sendEmptyMessage(com.android.ims.ImsManager.Connector.EVENT_GET_IMS_SERVICE); },6e8ba7f331d087d92acc81e418c93495cd7a2135,public void connect() { mRetryCount = 0; post(mGetServiceRunnable); },2157e4f07e7ac6b9f9a7e3ddb016e9cab6881fd6,2018-02-26 21:17:36,2
623700,src_java_com_android_ims_ImsManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void retryGetImsService() { synchronized(mLock) { mImsManager.removeNotifyStatusChangedCallback(mNotifyStatusChangedCallback); mImsManager = null; } com.android.ims.ImsManager.loge(""Connector: Retrying getting ImsService...""); removeMessages(com.android.ims.ImsManager.Connector.EVENT_GET_IMS_SERVICE); sendEmptyMessageDelayed(com.android.ims.ImsManager.Connector.EVENT_GET_IMS_SERVICE, mRetryTimeout.get()); }",808193780af9ba451d755945664974fbc9a2fb1c,"private void retryGetImsService() { synchronized(mLock) { mImsManager.removeNotifyStatusChangedCallback(mNotifyStatusChangedCallback); mImsManager = null; } com.android.ims.ImsManager.loge(""Connector: Retrying getting ImsService...""); removeCallbacks(mGetServiceRunnable); postDelayed(mGetServiceRunnable, mRetryTimeout.get()); }",d9bdf5bc2eabe99e0acc4622393d5c8946519125,2018-02-26 21:17:36,2
623701,src_java_com_android_internal_telephony_ImsSmsDispatcher.java,"@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { case EVENT_GET_IMS_SERVICE : try { getImsService(); } catch (com.android.ims.ImsException e) { android.telephony.Rlog.e(com.android.internal.telephony.TAG, (""setListeners: "" + e)); retryGetImsService(); } break; default : super.handleMessage(msg); } }",87aba06b491dae224ea089faef2b3c51a2de3388,"@java.lang.Override public void connectionReady(com.android.ims.ImsManager manager) throws com.android.ims.ImsException { android.telephony.Rlog.d(com.android.internal.telephony.ImsSmsDispatcher.TAG, ""ImsManager: connection ready.""); setListeners(); mIsImsServiceUp = true; }",975d1be290408bc0bb8d5f0ac27a358a875d1e9e,"@java.lang.Override public void connectionReady(com.android.ims.ImsManager manager) throws com.android.ims.ImsException { android.telephony.Rlog.d(com.android.internal.telephony.ImsSmsDispatcher.TAG, ""ImsManager: connection ready.""); synchronized(mLock) { setListeners(); mIsImsServiceUp = true; } }",8f93c5d93b032ec5df89cbee2e051dbd92c863d6,2018-02-26 21:17:36,3
627588,tests_robotests_src_com_android_settings_bluetooth_BluetoothPairingDialogTest.java,"@org.junit.Test public void dialogAsksForPairCodeOnUserEntryVariant() { when(controller.getDialogType()).thenReturn(BluetoothPairingController.USER_ENTRY_DIALOG); when(controller.getDeviceVariantMessageId()).thenReturn(BluetoothPairingController.INVALID_DIALOG_TYPE); when(controller.getDeviceVariantMessageHintId()).thenReturn(BluetoothPairingController.INVALID_DIALOG_TYPE); android.content.Context context = spy(org.robolectric.shadows.ShadowApplication.getInstance().getApplicationContext()); android.view.inputmethod.InputMethodManager imm = mock(android.view.inputmethod.InputMethodManager.class); doReturn(imm).when(context).getSystemService(Context.INPUT_METHOD_SERVICE); com.android.settings.bluetooth.BluetoothPairingDialogFragment frag = spy(new com.android.settings.bluetooth.BluetoothPairingDialogFragment()); when(frag.getContext()).thenReturn(context); setupFragment(frag); android.app.AlertDialog alertDialog = frag.getmDialog(); android.view.View view = alertDialog.findViewById(R.id.text); assertThat(view.getVisibility()).isEqualTo(View.VISIBLE); assertThat(view.isFocused()).isTrue(); assertThat(imm.isActive()); verify(imm).showSoftInput(view, InputMethodManager.SHOW_IMPLICIT); }",94f4eafd4083380c2a945ede9b643138bb76f10a,"@org.junit.Test public void dialogAsksForPairCodeOnUserEntryVariant() { when(controller.getDialogType()).thenReturn(BluetoothPairingController.USER_ENTRY_DIALOG); when(controller.getDeviceVariantMessageId()).thenReturn(BluetoothPairingController.INVALID_DIALOG_TYPE); when(controller.getDeviceVariantMessageHintId()).thenReturn(BluetoothPairingController.INVALID_DIALOG_TYPE); android.content.Context context = spy(org.robolectric.shadows.ShadowApplication.getInstance().getApplicationContext()); android.view.inputmethod.InputMethodManager imm = mock(android.view.inputmethod.InputMethodManager.class); doReturn(imm).when(context).getSystemService(Context.INPUT_METHOD_SERVICE); com.android.settings.bluetooth.BluetoothPairingDialogFragment frag = spy(new com.android.settings.bluetooth.BluetoothPairingDialogFragment()); when(frag.getContext()).thenReturn(context); setupFragment(frag); android.app.AlertDialog alertDialog = frag.getmDialog(); android.view.View view = alertDialog.findViewById(R.id.text); assertThat(view.getVisibility()).isEqualTo(View.VISIBLE); assertThat(view.isFocused()).isTrue(); assertThat(imm.isActive()).isTrue(); verify(imm).showSoftInput(view, InputMethodManager.SHOW_IMPLICIT); }",415b2a910c9e56c9d9e0f187cb4aced49a087a0b,"@org.junit.Test public void dialogAsksForPairCodeOnUserEntryVariant() { when(controller.getDialogType()).thenReturn(BluetoothPairingController.USER_ENTRY_DIALOG); when(controller.getDeviceVariantMessageId()).thenReturn(BluetoothPairingController.INVALID_DIALOG_TYPE); when(controller.getDeviceVariantMessageHintId()).thenReturn(BluetoothPairingController.INVALID_DIALOG_TYPE); android.content.Context context = spy(org.robolectric.shadows.ShadowApplication.getInstance().getApplicationContext()); android.view.inputmethod.InputMethodManager imm = mock(android.view.inputmethod.InputMethodManager.class); doReturn(imm).when(context).getSystemService(Context.INPUT_METHOD_SERVICE); com.android.settings.bluetooth.BluetoothPairingDialogFragment frag = spy(new com.android.settings.bluetooth.BluetoothPairingDialogFragment()); when(frag.getContext()).thenReturn(context); setupFragment(frag); android.app.AlertDialog alertDialog = frag.getmDialog(); android.view.View view = alertDialog.findViewById(R.id.text); assertThat(view.getVisibility()).isEqualTo(View.VISIBLE); assertThat(view.isFocused()).isTrue(); assertThat(imm.isActive()); verify(imm).showSoftInput(view, InputMethodManager.SHOW_IMPLICIT); }",94f4eafd4083380c2a945ede9b643138bb76f10a,2018-02-26 22:00:17,2
627588,tests_robotests_src_com_android_settings_fuelgauge_PowerUsageSummaryTest.java,@org.junit.Test public void testShowBothEstimates_summariesAreBothModified() { doReturn(new android.widget.TextView(mRealContext)).when(mBatteryLayoutPref).findViewById(R.id.summary2); doReturn(new android.widget.TextView(mRealContext)).when(mBatteryLayoutPref).findViewById(R.id.summary1); mFragment.onLongClick(new android.view.View(mRealContext)); android.widget.TextView summary1 = mFragment.mBatteryLayoutPref.findViewById(R.id.summary1); android.widget.TextView summary2 = mFragment.mBatteryLayoutPref.findViewById(R.id.summary2); org.robolectric.Robolectric.flushBackgroundThreadScheduler(); assertThat(summary2.getText().toString().contains(com.android.settings.fuelgauge.PowerUsageSummaryTest.NEW_ML_EST_SUFFIX)); assertThat(summary1.getText().toString().contains(com.android.settings.fuelgauge.PowerUsageSummaryTest.OLD_EST_SUFFIX)); },8377da01cf0acd02fb0a6a2bd5ee63b95943a4e8,@org.junit.Test public void testShowBothEstimates_summariesAreBothModified() { doReturn(new android.widget.TextView(mRealContext)).when(mBatteryLayoutPref).findViewById(R.id.summary2); doReturn(new android.widget.TextView(mRealContext)).when(mBatteryLayoutPref).findViewById(R.id.summary1); mFragment.onLongClick(new android.view.View(mRealContext)); android.widget.TextView summary1 = mFragment.mBatteryLayoutPref.findViewById(R.id.summary1); android.widget.TextView summary2 = mFragment.mBatteryLayoutPref.findViewById(R.id.summary2); org.robolectric.Robolectric.flushBackgroundThreadScheduler(); assertThat(summary2.getText().toString()).contains(com.android.settings.fuelgauge.PowerUsageSummaryTest.NEW_ML_EST_SUFFIX); assertThat(summary1.getText().toString()).contains(com.android.settings.fuelgauge.PowerUsageSummaryTest.OLD_EST_SUFFIX); },731bf6bebf4167393c196a2780e0348d6fb7011d,@org.junit.Test public void testShowBothEstimates_summariesAreBothModified() { doReturn(new android.widget.TextView(mRealContext)).when(mBatteryLayoutPref).findViewById(R.id.summary2); doReturn(new android.widget.TextView(mRealContext)).when(mBatteryLayoutPref).findViewById(R.id.summary1); mFragment.onLongClick(new android.view.View(mRealContext)); android.widget.TextView summary1 = mFragment.mBatteryLayoutPref.findViewById(R.id.summary1); android.widget.TextView summary2 = mFragment.mBatteryLayoutPref.findViewById(R.id.summary2); org.robolectric.Robolectric.flushBackgroundThreadScheduler(); assertThat(summary2.getText().toString().contains(com.android.settings.fuelgauge.PowerUsageSummaryTest.NEW_ML_EST_SUFFIX)); assertThat(summary1.getText().toString().contains(com.android.settings.fuelgauge.PowerUsageSummaryTest.OLD_EST_SUFFIX)); },8377da01cf0acd02fb0a6a2bd5ee63b95943a4e8,2018-02-26 22:00:17,2
627648,tests_robotests_src_com_android_settings_applications_PictureInPictureSettingsTest.java,"@org.junit.Test public void testCollectPipApps() { android.content.pm.PackageInfo primaryP1 = createPackage(""Calculator"", true); android.content.pm.PackageInfo primaryP2 = createPackage(""Clock"", false); android.content.pm.PackageInfo profileP1 = createPackage(""Calculator"", false); android.content.pm.PackageInfo profileP2 = createPackage(""Clock"", true); mPrimaryUserPackages.add(primaryP1); mPrimaryUserPackages.add(primaryP2); mProfileUserPackages.add(profileP1); mProfileUserPackages.add(profileP2); java.util.ArrayList<android.util.Pair<android.content.pm.ApplicationInfo, java.lang.Integer>> apps = mFragment.collectPipApps(com.android.settings.applications.PictureInPictureSettingsTest.PRIMARY_USER_ID); assertThat(containsPackages(apps, primaryP1, profileP2)).isTrue(); assertThat(containsPackages(apps, primaryP2, profileP1)).isFalse(); }",500f6029899a250058b881cd28988e558b945fac,"@com.android.settings.applications.Ignore(""b/73892555"") @org.junit.Test public void testCollectPipApps() { android.content.pm.PackageInfo primaryP1 = createPackage(""Calculator"", true); android.content.pm.PackageInfo primaryP2 = createPackage(""Clock"", false); android.content.pm.PackageInfo profileP1 = createPackage(""Calculator"", false); android.content.pm.PackageInfo profileP2 = createPackage(""Clock"", true); mPrimaryUserPackages.add(primaryP1); mPrimaryUserPackages.add(primaryP2); mProfileUserPackages.add(profileP1); mProfileUserPackages.add(profileP2); java.util.ArrayList<android.util.Pair<android.content.pm.ApplicationInfo, java.lang.Integer>> apps = mFragment.collectPipApps(com.android.settings.applications.PictureInPictureSettingsTest.PRIMARY_USER_ID); assertThat(containsPackages(apps, primaryP1, profileP2)).isTrue(); assertThat(containsPackages(apps, primaryP2, profileP1)).isFalse(); }",31dba6482e710a2284915e1ad471735596364345,"@org.junit.Ignore(""b/73892555"") @org.junit.Test public void testCollectPipApps() { android.content.pm.PackageInfo primaryP1 = createPackage(""Calculator"", true); android.content.pm.PackageInfo primaryP2 = createPackage(""Clock"", false); android.content.pm.PackageInfo profileP1 = createPackage(""Calculator"", false); android.content.pm.PackageInfo profileP2 = createPackage(""Clock"", true); mPrimaryUserPackages.add(primaryP1); mPrimaryUserPackages.add(primaryP2); mProfileUserPackages.add(profileP1); mProfileUserPackages.add(profileP2); java.util.ArrayList<android.util.Pair<android.content.pm.ApplicationInfo, java.lang.Integer>> apps = mFragment.collectPipApps(com.android.settings.applications.PictureInPictureSettingsTest.PRIMARY_USER_ID); assertThat(containsPackages(apps, primaryP1, profileP2)).isTrue(); assertThat(containsPackages(apps, primaryP2, profileP1)).isFalse(); }",9586d3902aadba308d9547f1858aadf9a5624b53,2018-02-26 22:00:17,2
626547,src_com_android_bluetooth_pbap_PbapStateMachine.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void enforceValidConnectionStateTransition() { boolean result = false; if ((this) == (mWaitingForAuth)) { result = (((mPrevState) == null) || ((mPrevState) == (mFinished))) || ((mPrevState) == (mConnected)); } else if ((this) == (mFinished)) { result = (mPrevState) == (mConnected); } else if ((this) == (mConnected)) { result = (mPrevState) == (mFinished); } if (!result) { throw new java.lang.IllegalStateException((((((""Invalid state transition from "" + (mPrevState)) + "" to "") + (this)) + "" for device "") + (mRemoteDevice))); } }",95697236171dfcfa3ec5a8bb512c1132c5e0ca0b,"private void enforceValidConnectionStateTransition() { boolean isValidTransition = false; if ((this) == (mWaitingForAuth)) { isValidTransition = (mPrevState) == null; } else if ((this) == (mFinished)) { isValidTransition = ((mPrevState) == (mConnected)) || ((mPrevState) == (mWaitingForAuth)); } else if ((this) == (mConnected)) { isValidTransition = ((mPrevState) == (mFinished)) || ((mPrevState) == (mWaitingForAuth)); } if (!isValidTransition) { throw new java.lang.IllegalStateException((((((""Invalid state transition from "" + (mPrevState)) + "" to "") + (this)) + "" for device "") + (mRemoteDevice))); } }",7fa236b4e7ae6453db98aaa03f0484e3c1a07525,2018-02-26 22:08:33,5
577704,tests_telephonytests_src_com_android_internal_telephony_ImsSMSDispatcherTest.java,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSendImsCdmaTest() throws java.lang.Exception { switchImsSmsFormat(PhoneConstants.PHONE_TYPE_CDMA); mImsSmsDispatcher.sendText(""111"", ""222"", com.android.internal.telephony.TAG, null, null, null, null, false); verify(mSimulatedCommandsVerifier).sendImsCdmaSms(((byte[]) (any())), eq(0), eq(0), any(android.os.Message.class)); }",63bc5743edf16a4f1e6bd13666e062dd698796d5,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSendImsCdmaTest() throws java.lang.Exception { switchImsSmsFormat(PhoneConstants.PHONE_TYPE_CDMA); mImsSmsDispatcher.sendText(""111"", ""222"", com.android.internal.telephony.TAG, null, null, null, null, false, (-1), false, (-1)); verify(mSimulatedCommandsVerifier).sendImsCdmaSms(((byte[]) (any())), eq(0), eq(0), any(android.os.Message.class)); }",9e8477da28da919b9cfd6f706c2180d80067021f,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSendImsCdmaTest() throws java.lang.Exception { switchImsSmsFormat(PhoneConstants.PHONE_TYPE_CDMA); mSmsDispatchersController.sendText(""111"", ""222"", com.android.internal.telephony.TAG, null, null, null, null, false, (-1), false, (-1)); verify(mSimulatedCommandsVerifier).sendImsCdmaSms(((byte[]) (any())), eq(0), eq(0), any(android.os.Message.class)); }",6551ed76653e3ff34c4f0449188691650c88a808,2018-02-26 22:53:22,7
577704,src_java_com_android_internal_telephony_gsm_GsmSMSDispatcher.java,"@java.lang.Override protected com.android.internal.telephony.gsm.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int encoding, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean lastPart, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, java.lang.String fullMessageText) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddress, destinationAddress, message, (deliveryIntent != null), com.android.internal.telephony.SmsHeader.toByteArray(smsHeader), encoding, smsHeader.languageTable, smsHeader.languageShiftTable); if (pdu != null) { java.util.HashMap map = getSmsTrackerMap(destinationAddress, scAddress, message, pdu); return getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), unsentPartCount, anyPartFailed, messageUri, smsHeader, (!lastPart), fullMessageText, true, false); } else { android.telephony.Rlog.e(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, ""GsmSMSDispatcher.sendNewSubmitPdu(): getSubmitPdu() returned null""); return null; } }",1963f0c599620b4243a9a493c824b23e245286ba,"@java.lang.Override protected com.android.internal.telephony.gsm.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int encoding, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean lastPart, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, java.lang.String fullMessageText, int priority, boolean expectMore, int validityPeriod) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddress, destinationAddress, message, (deliveryIntent != null), com.android.internal.telephony.SmsHeader.toByteArray(smsHeader), encoding, smsHeader.languageTable, smsHeader.languageShiftTable, validityPeriod); if (pdu != null) { java.util.HashMap map = getSmsTrackerMap(destinationAddress, scAddress, message, pdu); return getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), unsentPartCount, anyPartFailed, messageUri, smsHeader, ((!lastPart) || expectMore), fullMessageText, true, false, priority, validityPeriod); } else { android.telephony.Rlog.e(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, ""GsmSMSDispatcher.sendNewSubmitPdu(): getSubmitPdu() returned null""); return null; } }",a7bce2f2e93fc319bae5590a2ed19c3c0d4b5d76,"@java.lang.Override protected SmsMessageBase.SubmitPduBase getSubmitPdu(java.lang.String scAddr, java.lang.String destAddr, int destPort, byte[] message, boolean statusReportRequested) { return com.android.internal.telephony.util.SMSDispatcherUtil.getSubmitPduGsm(scAddr, destAddr, destPort, message, statusReportRequested); }",affb05e0284dcaf46fc3af9646f86253c58368ab,2018-02-26 22:53:22,7
577704,tests_telephonytests_src_com_android_internal_telephony_ImsSMSDispatcherTest.java,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSendImsGmsTestWithOutDesAddr() throws java.lang.Exception { switchImsSmsFormat(PhoneConstants.PHONE_TYPE_GSM); mImsSmsDispatcher.sendText(null, ""222"", com.android.internal.telephony.TAG, null, null, null, null, false); verify(mSimulatedCommandsVerifier, times(0)).sendImsGsmSms(anyString(), anyString(), anyInt(), anyInt(), any(android.os.Message.class)); }",d22414fb285cdb50d877c0446e65aa4ce50203a8,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSendImsGmsTestWithOutDesAddr() throws java.lang.Exception { switchImsSmsFormat(PhoneConstants.PHONE_TYPE_GSM); mImsSmsDispatcher.sendText(null, ""222"", com.android.internal.telephony.TAG, null, null, null, null, false, (-1), false, (-1)); verify(mSimulatedCommandsVerifier, times(0)).sendImsGsmSms(anyString(), anyString(), anyInt(), anyInt(), any(android.os.Message.class)); }",c2158f72736971b0684a4c9f959ea059e9178051,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSendImsGmsTestWithOutDesAddr() throws java.lang.Exception { switchImsSmsFormat(PhoneConstants.PHONE_TYPE_GSM); mSmsDispatchersController.sendText(null, ""222"", com.android.internal.telephony.TAG, null, null, null, null, false, (-1), false, (-1)); verify(mSimulatedCommandsVerifier, times(0)).sendImsGsmSms(anyString(), anyString(), anyInt(), anyInt(), any(android.os.Message.class)); }",e7b548c4b8a98a62d762148598589cf6955af271,2018-02-26 22:53:22,7
577704,src_java_com_android_internal_telephony_gsm_GsmSMSDispatcher.java,"@com.android.internal.annotations.VisibleForTesting @java.lang.Override public void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String callingPkg, boolean persistMessage) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddr, destAddr, text, (deliveryIntent != null)); if (pdu != null) { java.util.HashMap map = getSmsTrackerMap(destAddr, scAddr, text, pdu); com.android.internal.telephony.gsm.SmsTracker tracker = getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), messageUri, false, text, true, persistMessage); java.lang.String carrierPackage = getCarrierAppPackageName(); if (carrierPackage != null) { android.telephony.Rlog.d(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, ""Found carrier package.""); com.android.internal.telephony.gsm.TextSmsSender smsSender = new com.android.internal.telephony.gsm.TextSmsSender(tracker); smsSender.sendSmsByCarrierApp(carrierPackage, new com.android.internal.telephony.gsm.SmsSenderCallback(smsSender)); } else { android.telephony.Rlog.v(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, ""No carrier package.""); sendRawPdu(tracker); } } else { android.telephony.Rlog.e(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, ""GsmSMSDispatcher.sendText(): getSubmitPdu() returned null""); } }",e84494ce0a885bfa7397583da6504a4cafc27b70,"@com.android.internal.annotations.VisibleForTesting @java.lang.Override public void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String callingPkg, boolean persistMessage, int priority, boolean expectMore, int validityPeriod) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddr, destAddr, text, (deliveryIntent != null), validityPeriod); if (pdu != null) { java.util.HashMap map = getSmsTrackerMap(destAddr, scAddr, text, pdu); com.android.internal.telephony.gsm.SmsTracker tracker = getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), messageUri, false, text, true, persistMessage, priority, validityPeriod); java.lang.String carrierPackage = getCarrierAppPackageName(); if (carrierPackage != null) { android.telephony.Rlog.d(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, ""Found carrier package.""); com.android.internal.telephony.gsm.TextSmsSender smsSender = new com.android.internal.telephony.gsm.TextSmsSender(tracker); smsSender.sendSmsByCarrierApp(carrierPackage, new com.android.internal.telephony.gsm.SmsSenderCallback(smsSender)); } else { android.telephony.Rlog.v(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, ""No carrier package.""); sendRawPdu(tracker); } } else { android.telephony.Rlog.e(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, ""GsmSMSDispatcher.sendText(): getSubmitPdu() returned null""); } }",386e6ee75ddc9fb66168558c58eb9843f12f75bd,"@java.lang.Override protected SmsMessageBase.SubmitPduBase getSubmitPdu(java.lang.String scAddr, java.lang.String destAddr, java.lang.String message, boolean statusReportRequested, com.android.internal.telephony.SmsHeader smsHeader, int priority, int validityPeriod) { return com.android.internal.telephony.util.SMSDispatcherUtil.getSubmitPduGsm(scAddr, destAddr, message, statusReportRequested, validityPeriod); }",9a6210925da8b7260613658f2e33759334d1b40f,2018-02-26 22:53:22,7
577704,src_java_com_android_internal_telephony_cdma_CdmaSMSDispatcher.java,"@java.lang.Override protected com.android.internal.telephony.cdma.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int encoding, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean lastPart, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, java.lang.String fullMessageText) { com.android.internal.telephony.cdma.sms.UserData uData = new com.android.internal.telephony.cdma.sms.UserData(); uData.payloadStr = message; uData.userDataHeader = smsHeader; if (encoding == (com.android.internal.telephony.SmsConstants.ENCODING_7BIT)) { uData.msgEncoding = com.android.internal.telephony.cdma.sms.UserData.ENCODING_GSM_7BIT_ALPHABET; } else { uData.msgEncoding = com.android.internal.telephony.cdma.sms.UserData.ENCODING_UNICODE_16; } uData.msgEncodingSet = true; com.android.internal.telephony.cdma.SmsMessage.SubmitPdu submitPdu = com.android.internal.telephony.cdma.SmsMessage.getSubmitPdu(destinationAddress, uData, ((deliveryIntent != null) && lastPart)); java.util.HashMap map = getSmsTrackerMap(destinationAddress, scAddress, message, submitPdu); return getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), unsentPartCount, anyPartFailed, messageUri, smsHeader, false, fullMessageText, true, true); }",a0771fc8260978808baef58569231f31bf893cb6,"@java.lang.Override protected com.android.internal.telephony.cdma.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int encoding, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean lastPart, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, java.lang.String fullMessageText, int priority, boolean expectMore, int validityPeriod) { com.android.internal.telephony.cdma.sms.UserData uData = new com.android.internal.telephony.cdma.sms.UserData(); uData.payloadStr = message; uData.userDataHeader = smsHeader; if (encoding == (com.android.internal.telephony.SmsConstants.ENCODING_7BIT)) { uData.msgEncoding = com.android.internal.telephony.cdma.sms.UserData.ENCODING_GSM_7BIT_ALPHABET; } else { uData.msgEncoding = com.android.internal.telephony.cdma.sms.UserData.ENCODING_UNICODE_16; } uData.msgEncodingSet = true; com.android.internal.telephony.cdma.SmsMessage.SubmitPdu submitPdu = com.android.internal.telephony.cdma.SmsMessage.getSubmitPdu(destinationAddress, uData, ((deliveryIntent != null) && lastPart), priority); java.util.HashMap map = getSmsTrackerMap(destinationAddress, scAddress, message, submitPdu); return getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), unsentPartCount, anyPartFailed, messageUri, smsHeader, ((!lastPart) || expectMore), fullMessageText, true, true, priority, validityPeriod); }",0b9273fb23263e11005509ec347ecad22e280fc7,"@java.lang.Override protected SmsMessageBase.SubmitPduBase getSubmitPdu(java.lang.String scAddr, java.lang.String destAddr, int destPort, byte[] message, boolean statusReportRequested) { return com.android.internal.telephony.util.SMSDispatcherUtil.getSubmitPduCdma(scAddr, destAddr, destPort, message, statusReportRequested); }",ab59a7d402df7c711c345d1d5d9504967706319f,2018-02-26 22:53:22,7
577704,tests_telephonytests_src_com_android_internal_telephony_ImsSMSDispatcherTest.java,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest @android.test.FlakyTest @org.junit.Ignore public void testSendImsGmsTest() throws java.lang.Exception { switchImsSmsFormat(PhoneConstants.PHONE_TYPE_GSM); mImsSmsDispatcher.sendText(""111"", ""222"", com.android.internal.telephony.TAG, null, null, null, null, false); verify(mSimulatedCommandsVerifier).sendImsGsmSms(eq(""038122f2""), eq(""0100038111f1000014c9f67cda9c12d37378983e4697e5d4f29c0e""), eq(0), eq(0), any(android.os.Message.class)); }",c10f0ac2f8776098bf7b8e3b99377a0e31dd4801,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest @android.test.FlakyTest @org.junit.Ignore public void testSendImsGmsTest() throws java.lang.Exception { switchImsSmsFormat(PhoneConstants.PHONE_TYPE_GSM); mImsSmsDispatcher.sendText(""111"", ""222"", com.android.internal.telephony.TAG, null, null, null, null, false, (-1), false, (-1)); verify(mSimulatedCommandsVerifier).sendImsGsmSms(eq(""038122f2""), eq(""0100038111f1000014c9f67cda9c12d37378983e4697e5d4f29c0e""), eq(0), eq(0), any(android.os.Message.class)); }",95d13b52cbe9b00cba352a16d8b37b4be69e4ab7,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest @android.test.FlakyTest @org.junit.Ignore public void testSendImsGmsTest() throws java.lang.Exception { switchImsSmsFormat(PhoneConstants.PHONE_TYPE_GSM); mSmsDispatchersController.sendText(""111"", ""222"", com.android.internal.telephony.TAG, null, null, null, null, false, (-1), false, (-1)); verify(mSimulatedCommandsVerifier).sendImsGsmSms(eq(""038122f2""), eq(""0100038111f1000014c9f67cda9c12d37378983e4697e5d4f29c0e""), eq(0), eq(0), any(android.os.Message.class)); }",a26522bdc5f1d9f8f4e3a806a70284d01ebc6d67,2018-02-26 22:53:22,7
577704,src_java_com_android_internal_telephony_IccSmsInterfaceManager.java,"public void sendStoredText(java.lang.String callingPkg, android.net.Uri messageUri, java.lang.String scAddress, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent) { mPhone.getContext().enforceCallingPermission(Manifest.permission.SEND_SMS, ""Sending SMS message""); if (android.telephony.Rlog.isLoggable(""SMS"", Log.VERBOSE)) { log((((((((""sendStoredText: scAddr="" + scAddress) + "" messageUri="") + messageUri) + "" sentIntent="") + sentIntent) + "" deliveryIntent="") + deliveryIntent)); } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMS, android.os.Binder.getCallingUid(), callingPkg)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return; } final android.content.ContentResolver resolver = mPhone.getContext().getContentResolver(); if (!(isFailedOrDraft(resolver, messageUri))) { android.util.Log.e(com.android.internal.telephony.IccSmsInterfaceManager.LOG_TAG, ""[IccSmsInterfaceManager]sendStoredText: not FAILED or DRAFT message""); returnUnspecifiedFailure(sentIntent); return; } final java.lang.String[] textAndAddress = loadTextAndAddress(resolver, messageUri); if (textAndAddress == null) { android.util.Log.e(com.android.internal.telephony.IccSmsInterfaceManager.LOG_TAG, ""[IccSmsInterfaceManager]sendStoredText: can not load text""); returnUnspecifiedFailure(sentIntent); return; } textAndAddress[1] = filterDestAddress(textAndAddress[1]); mDispatcher.sendText(textAndAddress[1], scAddress, textAndAddress[0], sentIntent, deliveryIntent, messageUri, callingPkg, true); }",64742d993da269c645e8bb490a607cd3f5b960af,"public void sendStoredText(java.lang.String callingPkg, android.net.Uri messageUri, java.lang.String scAddress, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent) { mPhone.getContext().enforceCallingPermission(Manifest.permission.SEND_SMS, ""Sending SMS message""); if (android.telephony.Rlog.isLoggable(""SMS"", Log.VERBOSE)) { log((((((((""sendStoredText: scAddr="" + scAddress) + "" messageUri="") + messageUri) + "" sentIntent="") + sentIntent) + "" deliveryIntent="") + deliveryIntent)); } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMS, android.os.Binder.getCallingUid(), callingPkg)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return; } final android.content.ContentResolver resolver = mPhone.getContext().getContentResolver(); if (!(isFailedOrDraft(resolver, messageUri))) { android.util.Log.e(com.android.internal.telephony.IccSmsInterfaceManager.LOG_TAG, ""[IccSmsInterfaceManager]sendStoredText: not FAILED or DRAFT message""); returnUnspecifiedFailure(sentIntent); return; } final java.lang.String[] textAndAddress = loadTextAndAddress(resolver, messageUri); if (textAndAddress == null) { android.util.Log.e(com.android.internal.telephony.IccSmsInterfaceManager.LOG_TAG, ""[IccSmsInterfaceManager]sendStoredText: can not load text""); returnUnspecifiedFailure(sentIntent); return; } textAndAddress[1] = filterDestAddress(textAndAddress[1]); mDispatcher.sendText(textAndAddress[1], scAddress, textAndAddress[0], sentIntent, deliveryIntent, messageUri, callingPkg, true, com.android.internal.telephony.IccSmsInterfaceManager.SMS_MESSAGE_PRIORITY_NOT_SPECIFIED, false, com.android.internal.telephony.IccSmsInterfaceManager.SMS_MESSAGE_PERIOD_NOT_SPECIFIED); }",ec7904ac7f653d2ee13c411dcd0b52c992b0877c,"public void sendStoredText(java.lang.String callingPkg, android.net.Uri messageUri, java.lang.String scAddress, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent) { mPhone.getContext().enforceCallingPermission(Manifest.permission.SEND_SMS, ""Sending SMS message""); if (android.telephony.Rlog.isLoggable(""SMS"", Log.VERBOSE)) { log((((((((""sendStoredText: scAddr="" + scAddress) + "" messageUri="") + messageUri) + "" sentIntent="") + sentIntent) + "" deliveryIntent="") + deliveryIntent)); } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMS, android.os.Binder.getCallingUid(), callingPkg)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return; } final android.content.ContentResolver resolver = mPhone.getContext().getContentResolver(); if (!(isFailedOrDraft(resolver, messageUri))) { android.util.Log.e(com.android.internal.telephony.IccSmsInterfaceManager.LOG_TAG, ""[IccSmsInterfaceManager]sendStoredText: not FAILED or DRAFT message""); returnUnspecifiedFailure(sentIntent); return; } final java.lang.String[] textAndAddress = loadTextAndAddress(resolver, messageUri); if (textAndAddress == null) { android.util.Log.e(com.android.internal.telephony.IccSmsInterfaceManager.LOG_TAG, ""[IccSmsInterfaceManager]sendStoredText: can not load text""); returnUnspecifiedFailure(sentIntent); return; } textAndAddress[1] = filterDestAddress(textAndAddress[1]); mDispatchersController.sendText(textAndAddress[1], scAddress, textAndAddress[0], sentIntent, deliveryIntent, messageUri, callingPkg, true, com.android.internal.telephony.IccSmsInterfaceManager.SMS_MESSAGE_PRIORITY_NOT_SPECIFIED, false, com.android.internal.telephony.IccSmsInterfaceManager.SMS_MESSAGE_PERIOD_NOT_SPECIFIED); }",0c804c30b48ccfb5a3cd1cd52a15e0bba9d99bd0,2018-02-26 22:53:22,7
577704,src_java_com_android_internal_telephony_IccSmsInterfaceManager.java,"public void sendMultipartText(java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.util.List<java.lang.String> parts, java.util.List<android.app.PendingIntent> sentIntents, java.util.List<android.app.PendingIntent> deliveryIntents, boolean persistMessageForNonDefaultSmsApp) { mPhone.getContext().enforceCallingPermission(Manifest.permission.SEND_SMS, ""Sending SMS message""); if (!persistMessageForNonDefaultSmsApp) { enforcePrivilegedAppPermissions(); } if (android.telephony.Rlog.isLoggable(""SMS"", Log.VERBOSE)) { int i = 0; for (java.lang.String part : parts) { log((((((((""sendMultipartText: destAddr="" + destAddr) + "", srAddr="") + scAddr) + "", part["") + (i++)) + ""]="") + part)); } } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMS, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return; } destAddr = filterDestAddress(destAddr); if ((((parts.size()) > 1) && ((parts.size()) < 10)) && (!(android.telephony.SmsMessage.hasEmsSupport()))) { for (int i = 0; i < (parts.size()); i++) { java.lang.String singlePart = parts.get(i); if (android.telephony.SmsMessage.shouldAppendPageNumberAsPrefix()) { singlePart = ((((java.lang.String.valueOf((i + 1))) + '/') + (parts.size())) + ' ') + singlePart; } else { singlePart = singlePart.concat((((' ' + (java.lang.String.valueOf((i + 1)))) + '/') + (parts.size()))); } android.app.PendingIntent singleSentIntent = null; if ((sentIntents != null) && ((sentIntents.size()) > i)) { singleSentIntent = sentIntents.get(i); } android.app.PendingIntent singleDeliveryIntent = null; if ((deliveryIntents != null) && ((deliveryIntents.size()) > i)) { singleDeliveryIntent = deliveryIntents.get(i); } mDispatcher.sendText(destAddr, scAddr, singlePart, singleSentIntent, singleDeliveryIntent, null, callingPackage, persistMessageForNonDefaultSmsApp); } return; } mDispatcher.sendMultipartText(destAddr, scAddr, ((java.util.ArrayList<java.lang.String>) (parts)), ((java.util.ArrayList<android.app.PendingIntent>) (sentIntents)), ((java.util.ArrayList<android.app.PendingIntent>) (deliveryIntents)), null, callingPackage, persistMessageForNonDefaultSmsApp); }",3d52ecdfd7f8a0430052906f353d33727c71fdcf,"public void sendMultipartText(java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.util.List<java.lang.String> parts, java.util.List<android.app.PendingIntent> sentIntents, java.util.List<android.app.PendingIntent> deliveryIntents, boolean persistMessageForNonDefaultSmsApp) { sendMultipartTextWithOptions(callingPackage, destAddr, destAddr, parts, sentIntents, deliveryIntents, persistMessageForNonDefaultSmsApp, com.android.internal.telephony.IccSmsInterfaceManager.SMS_MESSAGE_PRIORITY_NOT_SPECIFIED, false, com.android.internal.telephony.IccSmsInterfaceManager.SMS_MESSAGE_PERIOD_NOT_SPECIFIED); }",8da29b713c5387d01230a553c9979414a8cfd96b,"public void sendMultipartText(java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.util.List<java.lang.String> parts, java.util.List<android.app.PendingIntent> sentIntents, java.util.List<android.app.PendingIntent> deliveryIntents, boolean persistMessageForNonDefaultSmsApp) { sendMultipartTextWithOptions(callingPackage, destAddr, scAddr, parts, sentIntents, deliveryIntents, persistMessageForNonDefaultSmsApp, com.android.internal.telephony.IccSmsInterfaceManager.SMS_MESSAGE_PRIORITY_NOT_SPECIFIED, false, com.android.internal.telephony.IccSmsInterfaceManager.SMS_MESSAGE_PERIOD_NOT_SPECIFIED); }",6933b3c78619ce27f53d081f6a4ea88e5023a185,2018-02-26 22:53:22,7
577704,src_java_com_android_internal_telephony_IccSmsInterfaceManager.java,"private void sendTextInternal(java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean persistMessageForNonDefaultSmsApp) { if (android.telephony.Rlog.isLoggable(""SMS"", Log.VERBOSE)) { log((((((((((""sendText: destAddr="" + destAddr) + "" scAddr="") + scAddr) + "" text='"") + text) + ""' sentIntent="") + sentIntent) + "" deliveryIntent="") + deliveryIntent)); } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMS, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return; } if (!persistMessageForNonDefaultSmsApp) { enforcePrivilegedAppPermissions(); } destAddr = filterDestAddress(destAddr); mDispatcher.sendText(destAddr, scAddr, text, sentIntent, deliveryIntent, null, callingPackage, persistMessageForNonDefaultSmsApp); }",08e00d25daf1a94af34b01f461fd4444386ade04,"private void sendTextInternal(java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean persistMessageForNonDefaultSmsApp, int priority, boolean expectMore, int validityPeriod) { if (android.telephony.Rlog.isLoggable(""SMS"", Log.VERBOSE)) { log((((((((((((((((""sendText: destAddr="" + destAddr) + "" scAddr="") + scAddr) + "" text='"") + text) + ""' sentIntent="") + sentIntent) + "" deliveryIntent="") + deliveryIntent) + "" priority="") + priority) + "" expectMore="") + expectMore) + "" validityPeriod="") + validityPeriod)); } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMS, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return; } if (!persistMessageForNonDefaultSmsApp) { enforcePrivilegedAppPermissions(); } destAddr = filterDestAddress(destAddr); mDispatcher.sendText(destAddr, scAddr, text, sentIntent, deliveryIntent, null, callingPackage, persistMessageForNonDefaultSmsApp, priority, expectMore, validityPeriod); }",8771efa95c4b9b0b0cd3e761f273d21e8c657468,"private void sendTextInternal(java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean persistMessageForNonDefaultSmsApp, int priority, boolean expectMore, int validityPeriod) { if (android.telephony.Rlog.isLoggable(""SMS"", Log.VERBOSE)) { log((((((((((((((((""sendText: destAddr="" + destAddr) + "" scAddr="") + scAddr) + "" text='"") + text) + ""' sentIntent="") + sentIntent) + "" deliveryIntent="") + deliveryIntent) + "" priority="") + priority) + "" expectMore="") + expectMore) + "" validityPeriod="") + validityPeriod)); } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMS, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return; } if (!persistMessageForNonDefaultSmsApp) { enforcePrivilegedAppPermissions(); } destAddr = filterDestAddress(destAddr); mDispatchersController.sendText(destAddr, scAddr, text, sentIntent, deliveryIntent, null, callingPackage, persistMessageForNonDefaultSmsApp, priority, expectMore, validityPeriod); }",1e1b8d57811a468d7eddf00591b260800d941221,2018-02-26 22:53:22,7
577704,src_java_com_android_internal_telephony_SMSDispatcher.java,"protected abstract void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String callingPkg, boolean persistMessage);",0c3a9a9def44220f1b6b62c9eefa85b971852752,"protected abstract void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String callingPkg, boolean persistMessage, int priority, boolean expectMore, int validityPeriod);",4321e5944cdd86f2fc23b8ef98554bb0ae76ee47,"public void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String callingPkg, boolean persistMessage, int priority, boolean expectMore, int validityPeriod) { android.telephony.Rlog.d(com.android.internal.telephony.SMSDispatcher.TAG, ""sendText""); com.android.internal.telephony.SmsMessageBase.SubmitPduBase pdu = getSubmitPdu(scAddr, destAddr, text, (deliveryIntent != null), null, priority, validityPeriod); if (pdu != null) { java.util.HashMap map = getSmsTrackerMap(destAddr, scAddr, text, pdu); com.android.internal.telephony.SMSDispatcher.SmsTracker tracker = getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), messageUri, expectMore, text, true, persistMessage, priority, validityPeriod); if (!(sendSmsByCarrierApp(false, tracker))) { sendSubmitPdu(tracker); } } else { android.telephony.Rlog.e(com.android.internal.telephony.SMSDispatcher.TAG, ""SmsDispatcher.sendText(): getSubmitPdu() returned null""); triggerSentIntentForFailure(sentIntent); } }",127b21eb99a3ffec8ef98a5c192bca59c54748ef,2018-02-26 22:53:22,7
625116,src_com_google_android_traceur_Receiver.java,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context); } else if (com.android.traceur.Receiver.STOP_ACTION.equals(intent.getAction())) { prefs.edit().putBoolean(context.getString(R.string.pref_key_tracing_on), false).apply(); com.android.traceur.Receiver.updateTracing(context); } else if (com.android.traceur.Receiver.OPEN_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }",951857a910e77210edeeb4566f4f9b645cc7bce0,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context); com.android.traceur.Receiver.updateQuickswitch(context); } else if (com.android.traceur.Receiver.STOP_ACTION.equals(intent.getAction())) { prefs.edit().putBoolean(context.getString(R.string.pref_key_tracing_on), false).apply(); com.android.traceur.Receiver.updateTracing(context); } else if (com.android.traceur.Receiver.OPEN_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }",4f80fbf62289b670401a17950b5d840a5401e4e1,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { com.android.traceur.Receiver.setupDeveloperOptionsWatcher(context); com.android.traceur.Receiver.updateTracing(context); com.android.traceur.Receiver.updateQuickswitch(context); } else if (com.android.traceur.Receiver.STOP_ACTION.equals(intent.getAction())) { prefs.edit().putBoolean(context.getString(R.string.pref_key_tracing_on), false).apply(); com.android.traceur.Receiver.updateTracing(context); } else if (com.android.traceur.Receiver.OPEN_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }",39161ebc4b9097cbadb4808a71a3d1e9cf97f021,2018-02-26 23:44:08,4
620246,telephony_java_android_telephony_data_DataProfile.java,"@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((((((((((((((((""DataProfile="" + (mProfileId)) + ""/"") + (mApn)) + ""/"") + (mProtocol)) + ""/"") + (mAuthType)) + ""/"") + (mUserName)) + ""/"") + (mPassword)) + ""/"") + (mType)) + ""/"") + (mMaxConnsTime)) + ""/"") + (mMaxConns)) + ""/"") + (mWaitTime)) + ""/"") + (mEnabled)) + ""/"") + (mSupportedApnTypesBitmap)) + ""/"") + (mRoamingProtocol)) + ""/"") + (mBearerBitmap)) + ""/"") + (mMtu)) + ""/"") + (mMvnoType)) + ""/"") + (mMvnoMatchData)) + ""/"") + (mModemCognitive); }",8cfd68bbb1c1b8d19582310c03c411c06132247f,"@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((((((((((((""DataProfile="" + (mProfileId)) + ""/"") + (mProtocol)) + ""/"") + (mAuthType)) + ""/"") + (""user"".equals(Build.TYPE) ? ""***/***/***"" : ((((mApn) + ""/"") + (mUserName)) + ""/"") + (mPassword))) + ""/"") + (mType)) + ""/"") + (mMaxConnsTime)) + ""/"") + (mMaxConns)) + ""/"") + (mWaitTime)) + ""/"") + (mEnabled)) + ""/"") + (mSupportedApnTypesBitmap)) + ""/"") + (mRoamingProtocol)) + ""/"") + (mBearerBitmap)) + ""/"") + (mMtu)) + ""/"") + (mMvnoType)) + ""/"") + (mMvnoMatchData)) + ""/"") + (mModemCognitive); }",00e0e341de87d493dcf70fcb40ab7e3ceea51668,"@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((((((((((((""DataProfile="" + (mProfileId)) + ""/"") + (mProtocol)) + ""/"") + (mAuthType)) + ""/"") + (android.os.Build.IS_USER ? ""***/***/***"" : ((((mApn) + ""/"") + (mUserName)) + ""/"") + (mPassword))) + ""/"") + (mType)) + ""/"") + (mMaxConnsTime)) + ""/"") + (mMaxConns)) + ""/"") + (mWaitTime)) + ""/"") + (mEnabled)) + ""/"") + (mSupportedApnTypesBitmap)) + ""/"") + (mRoamingProtocol)) + ""/"") + (mBearerBitmap)) + ""/"") + (mMtu)) + ""/"") + (mMvnoType)) + ""/"") + (mMvnoMatchData)) + ""/"") + (mModemCognitive); }",ff749169c77a7130b9537a2360feee3f0a787e31,2018-02-27 00:02:34,4
620332,telephony_java_android_telephony_ims_stub_ImsSmsImplBase.java,"public final void onSmsStatusReportReceived(int token, int messageRef, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException(""Feature not ready.""); } try { mListener.onSmsStatusReportReceived(token, messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, (""Can not process sms status report: "" + (e.getMessage()))); acknowledgeSmsReport(token, messageRef, android.telephony.ims.stub.ImsSmsImplBase.STATUS_REPORT_STATUS_ERROR); } } }",fb3449dea5cb7631fd67e6bc9470977669ed1133,"public final void onSmsStatusReportReceived(int token, int messageRef, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException(""Feature not ready.""); } try { mListener.onSmsStatusReportReceived(token, messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, (""Can not process sms status report: "" + (e.getMessage()))); acknowledgeSmsReport(token, messageRef, android.telephony.ims.stub.STATUS_REPORT_STATUS_ERROR); } } }",dcbbc9c6b84fb9b8aa088456b08dc05ba0814243,"public final void onSmsStatusReportReceived(int token, int messageRef, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException(""Feature not ready.""); } try { mListener.onSmsStatusReportReceived(token, messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, (""Can not process sms status report: "" + (e.getMessage()))); acknowledgeSmsReport(token, messageRef, android.telephony.ims.stub.ImsSmsImplBase.STATUS_REPORT_STATUS_ERROR); } } }",fb3449dea5cb7631fd67e6bc9470977669ed1133,2018-02-27 02:48:31,5
620332,telephony_java_android_telephony_ims_stub_ImsSmsImplBase.java,"public final void onSmsReceived(int token, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException(""Feature not ready.""); } try { mListener.onSmsReceived(token, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, (""Can not deliver sms: "" + (e.getMessage()))); acknowledgeSms(token, 0, android.telephony.ims.stub.ImsSmsImplBase.DELIVER_STATUS_ERROR); } } }",afd9cd34ebdc0faa71eb8226691cde784a2fc4c6,"public final void onSmsReceived(int token, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException(""Feature not ready.""); } try { mListener.onSmsReceived(token, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, (""Can not deliver sms: "" + (e.getMessage()))); acknowledgeSms(token, 0, android.telephony.ims.stub.DELIVER_STATUS_ERROR_GENERIC); } } }",10a6263830af6849c62a2bab5eccbf50aa52b58e,"public final void onSmsReceived(int token, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException(""Feature not ready.""); } try { mListener.onSmsReceived(token, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, (""Can not deliver sms: "" + (e.getMessage()))); acknowledgeSms(token, 0, android.telephony.ims.stub.ImsSmsImplBase.DELIVER_STATUS_ERROR_GENERIC); } } }",630267dbb2d6cdc57a8b5ef44a419f7131a6b758,2018-02-27 02:48:31,5
625867,src_com_android_certinstaller_CertInstallerMain.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static byte[] readWithLimit(java.io.InputStream in) throws java.io.IOException { java.io.ByteArrayOutputStream bytes = new java.io.ByteArrayOutputStream(); byte[] buffer = new byte[1024]; int bytesRead = 0; int count; while ((count = in.read(buffer)) != (-1)) { bytes.write(buffer, 0, count); bytesRead += count; if (bytesRead >= (com.android.certinstaller.CertInstallerMain.MAXIMUM_CERT_SIZE)) { throw new java.io.IOException(""Certificate file exceeded maximum size.""); } } return bytes.toByteArray(); }",6aa3acb32680ab0cb5fb1580c54f1f37594a84e2,"private static byte[] readWithLimit(java.io.InputStream in) throws java.io.IOException { java.io.ByteArrayOutputStream bytes = new java.io.ByteArrayOutputStream(); byte[] buffer = new byte[1024]; int bytesRead = 0; int count; while ((count = in.read(buffer)) != (-1)) { bytes.write(buffer, 0, count); bytesRead += count; if (bytesRead > (com.android.certinstaller.CertInstallerMain.READ_LIMIT)) { throw new java.io.IOException(""Data file exceeded maximum size.""); } } return bytes.toByteArray(); }",fc64b417a408461dea1a728a35d0053d0ae7b753,2018-02-27 08:22:09,2
627768,src_com_android_bluetooth_btservice_AdapterService.java,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println(""Skipping dump in APP SERVICES, see bluetooth_manager section.""); writer.println(""Use --print argument for dumpsys direct from AdapterService.""); return; } verboseLog((""dumpsys arguments, check for protobuf output: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].equals(""--proto-bin"")) { dumpMetrics(fd); return; } writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dump(sb); } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",043367c7ce1ebacb54a966fbfdb2600d93161de0,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println(""Skipping dump in APP SERVICES, see bluetooth_manager section.""); writer.println(""Use --print argument for dumpsys direct from AdapterService.""); return; } verboseLog((""dumpsys arguments, check for protobuf output: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].equals(""--proto-bin"")) { dumpMetrics(fd); return; } writer.println(""AdapterProperties""); writer.println((("" "" + ""MaxConnectedAudioDevices: "") + (getMaxConnectedAudioDevices()))); writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dump(sb); } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",fa73cdb3d6524435809481481ac44c2ad4a9eef2,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println(""Skipping dump in APP SERVICES, see bluetooth_manager section.""); writer.println(""Use --print argument for dumpsys direct from AdapterService.""); return; } verboseLog((""dumpsys arguments, check for protobuf output: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].equals(""--proto-bin"")) { dumpMetrics(fd); return; } writer.println(""AdapterProperties""); writer.println((("" "" + ""MaxConnectedAudioDevices: "") + (getMaxConnectedAudioDevices()))); writer.println(); writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dump(sb); } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",28105ae2a93a7d2cde6eae33d15dea5ab77b7d2d,2018-02-27 08:41:42,2
627898,jdwp_src_test_java_org_apache_harmony_jpda_tests_framework_StreamRedirector.java,"@java.lang.Override public void run() { logWriter.println((""Redirector started: "" + (name))); try { java.lang.String line = """"; while (!(doExit)) { try { line = br.readLine(); if (line == null) break; logWriter.println((((name) + ""> "") + line)); } catch (java.lang.IllegalStateException e) { } } logWriter.println((""Redirector completed: "" + (name))); } catch (java.io.IOException e) { logWriter.printError(e); } }",284c465269868ba3fc19498ec20c721f79a13f10,"@java.lang.Override public void run() { logWriter.println((""Redirector started: "" + (name))); try { java.lang.String line = """"; while ((!(doExit)) || (br.ready())) { try { line = br.readLine(); if (line == null) break; logWriter.println((((name) + ""> "") + line)); } catch (java.lang.IllegalStateException e) { } } logWriter.println((""Redirector completed: "" + (name))); } catch (java.io.IOException e) { logWriter.printError(e); } }",570af5017c1d776693702f41bbaf0a4301476a29,"@java.lang.Override public void run() { logWriter.println((""Redirector started: "" + (name))); try { java.lang.StringBuilder cur = new java.lang.StringBuilder(); while ((!(doExit)) || (br.ready())) { try { int nc = br.read(); if (nc == (-1)) { if ((cur.length()) != 0) { logWriter.println((((name) + ""> "") + (cur.toString()))); cur.setLength(0); } break; } else if (nc == ((int) ('\n'))) { logWriter.println((((name) + ""> "") + (cur.toString()))); cur.setLength(0); } else { cur.appendCodePoint(nc); } } catch (java.lang.IllegalStateException e) { } } if ((cur.length()) != 0) { logWriter.println((((name) + ""> "") + (cur.toString()))); cur.setLength(0); } logWriter.println((""Redirector completed: "" + (name))); } catch (java.io.IOException e) { logWriter.printError(e); } }",9bfb695410383efba6640c1fef041f93271ffc43,2018-02-27 16:59:34,4
627806,luni_src_main_java_libcore_util_TimeZoneFinder.java,"private static java.util.List<java.lang.String> parseZoneIds(org.xmlpull.v1.XmlPullParser parser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { java.util.List<java.lang.String> timeZones = new java.util.ArrayList<>(); while (libcore.util.TimeZoneFinder.findOptionalStartTag(parser, libcore.util.TimeZoneFinder.ID_ELEMENT)) { java.lang.String zoneIdString = libcore.util.TimeZoneFinder.consumeText(parser); libcore.util.TimeZoneFinder.checkOnEndTag(parser, libcore.util.TimeZoneFinder.ID_ELEMENT); timeZones.add(zoneIdString); } return java.util.Collections.unmodifiableList(timeZones); }",b85ac04035983ddec477882333e744b286206014,"private static java.util.List<libcore.util.CountryTimeZones.TimeZoneMapping> parseTimeZoneMappings(org.xmlpull.v1.XmlPullParser parser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { java.util.List<libcore.util.CountryTimeZones.TimeZoneMapping> timeZoneMappings = new java.util.ArrayList<>(); while (libcore.util.TimeZoneFinder.findOptionalStartTag(parser, libcore.util.TimeZoneFinder.ZONE_ID_ELEMENT)) { java.lang.String showInPickerString = parser.getAttributeValue(null, libcore.util.TimeZoneFinder.ZONE_SHOW_IN_PICKER_ATTRIBUTE); java.lang.String zoneIdString = libcore.util.TimeZoneFinder.consumeText(parser); libcore.util.TimeZoneFinder.checkOnEndTag(parser, libcore.util.TimeZoneFinder.ZONE_ID_ELEMENT); if ((zoneIdString == null) || ((zoneIdString.length()) == 0)) { throw new org.xmlpull.v1.XmlPullParserException((((""Missing text for "" + (libcore.util.TimeZoneFinder.ZONE_ID_ELEMENT)) + ""): "") + (parser.getPositionDescription()))); } boolean showInPicker; if (showInPickerString == null) { showInPicker = true; } else { java.lang.Boolean showInPickerOrNull = libcore.util.TimeZoneFinder.parseBooleanAttribute(showInPickerString); if (showInPickerOrNull == null) { throw new org.xmlpull.v1.XmlPullParserException((((""Bad value for "" + (libcore.util.TimeZoneFinder.ZONE_SHOW_IN_PICKER_ATTRIBUTE)) + ""): "") + (parser.getPositionDescription()))); } showInPicker = showInPickerOrNull; } libcore.util.CountryTimeZones.TimeZoneMapping timeZoneMapping = new libcore.util.CountryTimeZones.TimeZoneMapping(zoneIdString, showInPicker); timeZoneMappings.add(timeZoneMapping); } return java.util.Collections.unmodifiableList(timeZoneMappings); }",2e0239ea06c8d3047da71f02da6459a4c42aa0b5,"private static java.util.List<libcore.util.CountryTimeZones.TimeZoneMapping> parseTimeZoneMappings(org.xmlpull.v1.XmlPullParser parser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { java.util.List<libcore.util.CountryTimeZones.TimeZoneMapping> timeZoneMappings = new java.util.ArrayList<>(); while (libcore.util.TimeZoneFinder.findOptionalStartTag(parser, libcore.util.TimeZoneFinder.ZONE_ID_ELEMENT)) { boolean showInPicker = libcore.util.TimeZoneFinder.parseBooleanAttribute(parser, libcore.util.TimeZoneFinder.ZONE_SHOW_IN_PICKER_ATTRIBUTE, true); java.lang.String zoneIdString = libcore.util.TimeZoneFinder.consumeText(parser); libcore.util.TimeZoneFinder.checkOnEndTag(parser, libcore.util.TimeZoneFinder.ZONE_ID_ELEMENT); if ((zoneIdString == null) || ((zoneIdString.length()) == 0)) { throw new org.xmlpull.v1.XmlPullParserException((((""Missing text for "" + (libcore.util.TimeZoneFinder.ZONE_ID_ELEMENT)) + ""): "") + (parser.getPositionDescription()))); } libcore.util.CountryTimeZones.TimeZoneMapping timeZoneMapping = new libcore.util.CountryTimeZones.TimeZoneMapping(zoneIdString, showInPicker); timeZoneMappings.add(timeZoneMapping); } return java.util.Collections.unmodifiableList(timeZoneMappings); }",53e0d7b859adb78596f556d01675abd09c14a7a8,2018-02-27 17:48:37,3
627806,luni_src_main_java_libcore_util_TimeZoneFinder.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static java.lang.Boolean parseBooleanAttribute(java.lang.String attributeValue) { if (attributeValue == null) { return null; } boolean isTrue = libcore.util.TimeZoneFinder.TRUE_ATTRIBUTE_VALUE.equals(attributeValue); if (!(isTrue || (libcore.util.TimeZoneFinder.FALSE_ATTRIBUTE_VALUE.equals(attributeValue)))) { return null; } return isTrue; },1026bfb70c0124301219092e1bd80b3604b17bf8,"private static java.lang.Boolean parseBooleanAttribute(org.xmlpull.v1.XmlPullParser parser, java.lang.String attributeName, java.lang.Boolean defaultValue) throws org.xmlpull.v1.XmlPullParserException { java.lang.String attributeValueString = parser.getAttributeValue(null, attributeName); if (attributeValueString == null) { return defaultValue; } boolean isTrue = libcore.util.TimeZoneFinder.TRUE_ATTRIBUTE_VALUE.equals(attributeValueString); if (!(isTrue || (libcore.util.TimeZoneFinder.FALSE_ATTRIBUTE_VALUE.equals(attributeValueString)))) { throw new org.xmlpull.v1.XmlPullParserException((((""Attribute \"""" + attributeName) + ""\"" is not \""y\"" or \""n\"": "") + (parser.getPositionDescription()))); } return isTrue; }",468aa351660b84971c71d693a73ec223a3b88581,2018-02-27 17:48:37,3
622850,tests_src_com_android_providers_telephony_TelephonyProviderTest.java,"private int parseIdFromInsertedUri(android.net.Uri uri) { int id = 0; if (uri != null) { try { id = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { } } assertTrue(""Can't parse ID for inserted APN"", (id != 0)); return id; }",da6d6e318b391603636abe42700ce90cf996d47e,private int parseIdFromInsertedUri(android.net.Uri uri) throws java.lang.NumberFormatException { int id = -1; if (uri != null) { id = java.lang.Integer.parseInt(uri.getLastPathSegment()); } return id; },bd85da63e84ea1ef77bb1db04e44e029cb9c93ce,private int parseIdFromInsertedUri(android.net.Uri uri) throws java.lang.NumberFormatException { return uri != null ? java.lang.Integer.parseInt(uri.getLastPathSegment()) : -1; },c4a514b1e757c6793549f5b915831ca7ed8d73bd,2018-02-27 18:23:22,8
589594,src_main_java_com_android_apksig_internal_apk_v3_V3SigningCertificateLineage.java,,,public static byte[] encodeSigningCertificateLineage(java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> signingCertificateLineage) { java.util.List<byte[]> nodes = new java.util.ArrayList<>(); for (com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode node : signingCertificateLineage) { nodes.add(com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.encodeSigningCertificateNode(node)); } byte[] encodedSigningCertificateLineage = com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsSequenceOfLengthPrefixedElements(nodes); return com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsLengthPrefixedElement(encodedSigningCertificateLineage); },216258515cdd527b439d728fd54c964dcbb373b4,public static byte[] encodeSigningCertificateLineage(java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> signingCertificateLineage) { java.util.List<byte[]> nodes = new java.util.ArrayList<>(); for (com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode node : signingCertificateLineage) { nodes.add(com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.encodeSigningCertificateNode(node)); } byte[] encodedSigningCertificateLineage = com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsSequenceOfLengthPrefixedElements(nodes); int payloadSize = 4 + (encodedSigningCertificateLineage.length); java.nio.ByteBuffer encodedWithVersion = java.nio.ByteBuffer.allocate(payloadSize); encodedWithVersion.order(java.nio.ByteOrder.LITTLE_ENDIAN); encodedWithVersion.putInt(com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.CURRENT_VERSION); encodedWithVersion.put(encodedSigningCertificateLineage); return encodedWithVersion.array(); },abbc9120ccaca064ddeaf3c328a2e47bd104fbfd,2018-02-27 18:53:40,7
589594,src_main_java_com_android_apksig_internal_apk_v3_V3SigningCertificateLineage.java,,,"public static byte[] encodeSigningCertificateNode(com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode node) { int parentSigAlgorithmId = 0; if ((node.parentSigAlgorithm) != null) { parentSigAlgorithmId = node.parentSigAlgorithm.getId(); } int sigAlgorithmId = 0; if ((node.sigAlgorithm) != null) { sigAlgorithmId = node.sigAlgorithm.getId(); } byte[] prefixedSignedData = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.encodeSignedData(node.signingCert, parentSigAlgorithmId); byte[] prefixedSignature = com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsLengthPrefixedElement(node.signature); int payloadSize = ((prefixedSignedData.length) + 4) + (prefixedSignature.length); java.nio.ByteBuffer result = java.nio.ByteBuffer.allocate(payloadSize); result.order(java.nio.ByteOrder.LITTLE_ENDIAN); result.put(prefixedSignedData); result.putInt(sigAlgorithmId); result.put(prefixedSignature); return result.array(); }",fe0144b10fa9c37c0b4b1e9486f0e54ac7ea5f55,"public static byte[] encodeSigningCertificateNode(com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode node) { int parentSigAlgorithmId = 0; if ((node.parentSigAlgorithm) != null) { parentSigAlgorithmId = node.parentSigAlgorithm.getId(); } int sigAlgorithmId = 0; if ((node.sigAlgorithm) != null) { sigAlgorithmId = node.sigAlgorithm.getId(); } byte[] prefixedSignedData = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.encodeSignedData(node.signingCert, parentSigAlgorithmId); byte[] prefixedSignature = com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsLengthPrefixedElement(node.signature); int payloadSize = (((prefixedSignedData.length) + 4) + 4) + (prefixedSignature.length); java.nio.ByteBuffer result = java.nio.ByteBuffer.allocate(payloadSize); result.order(java.nio.ByteOrder.LITTLE_ENDIAN); result.put(prefixedSignedData); result.putInt(node.flags); result.putInt(sigAlgorithmId); result.put(prefixedSignature); return result.array(); }",a7e3aa140ff226982b38a866935ca3377dcaccd4,2018-02-27 18:53:40,7
589594,src_main_java_com_android_apksig_SigningCertificateLineage.java,public com.android.apksig.SigningCertificateLineage build() { return new com.android.apksig.SigningCertificateLineage(); },6dda17978d8d82303ba8bfb1e0f0f442df3f25a5,"public com.android.apksig.SigningCertificateLineage build() throws java.io.IOException { return new com.android.apksig.SigningCertificateLineage(mInputSigningCertificateLineage, mMinimumSdkVersion); }",6816840c22044586d25500b95e1e1ab6e03686fa,"public com.android.apksig.SigningCertificateLineage build() throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.cert.CertificateEncodingException { if ((mMinSdkVersion) < (com.android.apksig.internal.util.AndroidSdkVersion.P)) { mMinSdkVersion = com.android.apksig.internal.util.AndroidSdkVersion.P; } if ((mOriginalCapabilities) == null) { mOriginalCapabilities = new com.android.apksig.SigningCertificateLineage.SignerCapabilities.Builder().build(); } if ((mNewCapabilities) == null) { mNewCapabilities = new com.android.apksig.SigningCertificateLineage.SignerCapabilities.Builder().build(); } return com.android.apksig.SigningCertificateLineage.createSigningLineage(mMinSdkVersion, mOriginalSignerConfig, mOriginalCapabilities, mNewSignerConfig, mNewCapabilities); }",510978882767aa255daff0a8343dddcf90408810,2018-02-27 18:53:40,7
589594,src_main_java_com_android_apksig_SigningCertificateLineage.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void spawnFirstDescendant(com.android.apksig.SigningCertificateLineage.SignerConfig parent, int flags) { if ((mLineage) == null) { mLineage = new java.util.ArrayList(); } if ((mLineage.size()) > 0) { throw new java.lang.IllegalStateException(""SigningCertificateLineage already has its first node""); } com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode firstNode = new com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode(parent.getCertificate(), null, null, new byte[0], flags); mLineage.add(firstNode); }",59ca571b5afa372fd2fb3cc03379fc5d388b8a71,"private com.android.apksig.SigningCertificateLineage spawnFirstDescendant(com.android.apksig.SigningCertificateLineage.SignerConfig parent, com.android.apksig.SigningCertificateLineage.SignerCapabilities signerCapabilities) { if ((mSigningLineage.size()) > 0) { throw new java.lang.IllegalStateException(""SigningCertificateLineage already has its first node""); } try { getSignatureAlgorithm(parent); } catch (java.security.InvalidKeyException e) { throw new java.lang.IllegalArgumentException((""Algorithm associated with first signing certificate"" + "" invalid on desired platform versions""), e); } com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode firstNode = new com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode(parent.getCertificate(), null, null, new byte[0], signerCapabilities.getFlags()); return new com.android.apksig.SigningCertificateLineage(mMinSdkVersion, java.util.Collections.singletonList(firstNode)); }",2a0fd756bf6edd10567d36e63998f707122aa665,2018-02-27 18:53:40,7
589594,src_main_java_com_android_apksig_SigningCertificateLineage.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void spawnDescendant(com.android.apksig.SigningCertificateLineage.SignerConfig parent, com.android.apksig.SigningCertificateLineage.SignerConfig child) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.cert.CertificateEncodingException { int flags = calculateDefaultFlags(); spawnDescendant(parent, flags, child, flags); }",ad87e00c9ac63b90cbde1f27606b02eb3baa1cb1,"public com.android.apksig.SigningCertificateLineage spawnDescendant(com.android.apksig.SigningCertificateLineage.SignerConfig parent, com.android.apksig.SigningCertificateLineage.SignerConfig child) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.cert.CertificateEncodingException { if ((parent == null) || (child == null)) { throw new java.lang.NullPointerException(""can't add new descendant to lineage with null inputs""); } com.android.apksig.SigningCertificateLineage.SignerCapabilities signerCapabilities = new com.android.apksig.SigningCertificateLineage.SignerCapabilities.Builder().build(); return spawnDescendant(parent, child, signerCapabilities); }",f0a4ec498b6706416cfbfc4176a8ae607d70fa7d,2018-02-27 18:53:40,7
589594,src_main_java_com_android_apksig_SigningCertificateLineage.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> read(java.nio.ByteBuffer inputByteBuffer, int version) throws java.io.IOException { switch (version) { case com.android.apksig.SigningCertificateLineage.FIRST_VERSION : mVersion = com.android.apksig.SigningCertificateLineage.FIRST_VERSION; return com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.readSigningCertificateLineage(inputByteBuffer); default : throw new java.lang.IllegalArgumentException(""Improper SigningCertificateLineage format: unrecognized version.""); } }",50252d6d4b59dc129fc89da50e287d5efa0d98b6,"private static com.android.apksig.SigningCertificateLineage read(java.nio.ByteBuffer inputByteBuffer) throws java.io.IOException { com.android.apksig.internal.apk.ApkSigningBlockUtils.checkByteOrderLittleEndian(inputByteBuffer); if ((inputByteBuffer.remaining()) < 8) { throw new java.lang.IllegalArgumentException(""Improper SigningCertificateLineage format: insufficient data for header.""); } if ((inputByteBuffer.getInt()) != (com.android.apksig.SigningCertificateLineage.MAGIC)) { throw new java.lang.IllegalArgumentException(""Improper SigningCertificateLineage format: MAGIC header mismatch.""); } return com.android.apksig.SigningCertificateLineage.read(inputByteBuffer, inputByteBuffer.getInt()); }",bbd6e2d410ee725130fda653085f877a98eab1c7,2018-02-27 18:53:40,7
589594,src_main_java_com_android_apksig_SigningCertificateLineage.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.android.apksig.SigningCertificateLineage.Builder setMinimumSdkVersion(int minimumSdkVersion) { mMinimumSdkVersion = minimumSdkVersion; return this; },41df0dba44fe68f8f36497a2363fe31ed50d55be,"public com.android.apksig.SigningCertificateLineage.Builder setNewCapabilities(com.android.apksig.SigningCertificateLineage.SignerCapabilities signerCapabilities) { if (signerCapabilities == null) { throw new java.lang.NullPointerException(""signerCapabilities == null""); } mNewCapabilities = signerCapabilities; return this; }",5f25749e84147b351869da12cdacb6110a967397,2018-02-27 18:53:40,7
589594,src_main_java_com_android_apksig_SigningCertificateLineage.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private int calculateDefaultFlags() { throw new java.lang.UnsupportedOperationException(""Default flag values not yet implemented""); }",f1576ef3367c71ca95f10d04a3524b01b0d505f1,"public void writeToDataSink(com.android.apksig.util.DataSink dataSink) throws java.io.IOException { if (dataSink == null) { throw new java.lang.NullPointerException(""dataSink == null""); } dataSink.consume(write()); }",161ecdbd7cd4ceb3f5adb2d053b1e7c421b1de0e,2018-02-27 18:53:40,7
589594,src_main_java_com_android_apksig_SigningCertificateLineage.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.nio.ByteBuffer write() { byte[] encodedLineage = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.encodeSigningCertificateLineage(mSigningLineage); int payloadSize = (4 + 4) + (encodedLineage.length); java.nio.ByteBuffer result = java.nio.ByteBuffer.allocate(payloadSize); result.order(java.nio.ByteOrder.LITTLE_ENDIAN); result.putInt(com.android.apksig.SigningCertificateLineage.MAGIC); result.putInt(mVersion); result.put(encodedLineage); return result; },3ae50642721ad1027d169c532d3a8ea5faefd772,"public void writeToFile(java.io.File file) throws java.io.IOException { if (file == null) { throw new java.lang.NullPointerException(""file == null""); } java.io.RandomAccessFile outputFile = new java.io.RandomAccessFile(file, ""rw""); writeToDataSink(new com.android.apksig.internal.util.RandomAccessFileDataSink(outputFile)); }",e00c32771a89c3613ec89636b02796191fba48c7,2018-02-27 18:53:40,7
589594,src_main_java_com_android_apksig_internal_apk_v3_V3SchemeSigner.java,private static byte[] generateAdditionalAttributes(com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig signerConfig) { if ((signerConfig.mSigningCertificateLineage) == null) { return new byte[0]; } throw new java.lang.UnsupportedOperationException(); },062d3ca0d1a1c6d2d3c0728c815734068affe752,private static byte[] generateAdditionalAttributes(SignerConfig signerConfig) { if ((signerConfig.mSigningCertificateLineage) == null) { return new byte[0]; } byte[] por = signerConfig.mSigningCertificateLineage.generateV3SignerAttribute(); return com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsLengthPrefixedElement(por); },c16c634d0db30c54398dcbd3c8e574e66954a77e,private static byte[] generateAdditionalAttributes(SignerConfig signerConfig) { if ((signerConfig.mSigningCertificateLineage) == null) { return new byte[0]; } return signerConfig.mSigningCertificateLineage.generateV3SignerAttribute(); },36953898d5608c1a78218435988414d93fbd53d9,2018-02-27 18:53:40,7
589594,src_main_java_com_android_apksig_SigningCertificateLineage.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> read(java.nio.ByteBuffer inputByteBuffer) throws java.io.IOException { com.android.apksig.internal.apk.ApkSigningBlockUtils.checkByteOrderLittleEndian(inputByteBuffer); if ((inputByteBuffer.remaining()) < 8) { throw new java.lang.IllegalArgumentException(""Improper SigningCertificateLineage format: insufficient data for header.""); } if ((inputByteBuffer.getInt()) != (com.android.apksig.SigningCertificateLineage.MAGIC)) { throw new java.lang.IllegalArgumentException(""Improper SigningCertificateLineage format: MAGIC header mismatch.""); } return read(inputByteBuffer, inputByteBuffer.getInt()); }",0328b2b7c4b8ac864f885a1d29660f3a251a9f19,"private static com.android.apksig.SigningCertificateLineage read(java.nio.ByteBuffer inputByteBuffer, int version) throws java.io.IOException { switch (version) { case com.android.apksig.SigningCertificateLineage.FIRST_VERSION : try { java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> nodes = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.readSigningCertificateLineage(getLengthPrefixedSlice(inputByteBuffer)); int minSdkVersion = com.android.apksig.SigningCertificateLineage.calculateMinSdkVersion(nodes); return new com.android.apksig.SigningCertificateLineage(minSdkVersion, nodes); } catch (com.android.apksig.apk.ApkFormatException e) { throw new java.io.IOException((""Unable to read list of signing certificate nodes in "" + ""SigningCertificateLineage""), e); } default : throw new java.lang.IllegalArgumentException(""Improper SigningCertificateLineage format: unrecognized version.""); } }",e9933fe57447f54833b93eeb171a3eb228f93550,2018-02-27 18:53:40,7
589594,src_main_java_com_android_apksig_SigningCertificateLineage.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.android.apksig.SigningCertificateLineage.Builder setInputSigningCertificateLineage(java.nio.ByteBuffer inputSigningCertificateLineage) { mInputSigningCertificateLineage = inputSigningCertificateLineage; return this; },651da5a20237e53ee8cc7747c1dc986b90385f97,"public com.android.apksig.SigningCertificateLineage.Builder setOriginalCapabilities(com.android.apksig.SigningCertificateLineage.SignerCapabilities signerCapabilities) { if (signerCapabilities == null) { throw new java.lang.NullPointerException(""signerCapabilities == null""); } mOriginalCapabilities = signerCapabilities; return this; }",330014551d7b00098283649b401ad65f1c016dfe,2018-02-27 18:53:40,7
620863,src_java_com_android_internal_telephony_imsphone_ImsPhoneCallTracker.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean shouldNumberBePlacedOnIms(boolean isEmergency, java.lang.String number) { int processCallResult; try { if ((mImsManager) != null) { processCallResult = mImsManager.shouldProcessCall(isEmergency, new java.lang.String[]{ number }); android.telephony.Rlog.i(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, (((""shouldProcessCall: number: "" + (android.telephony.Rlog.pii(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, number))) + "", result: "") + processCallResult)); } else { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ""ImsManager unavailable, shouldProcessCall returning false.""); return false; } } catch (com.android.ims.ImsException e) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ""ImsService unavailable, shouldProcessCall returning false.""); return false; } if (processCallResult == (android.telephony.ims.feature.MmTelFeature.PROCESS_CALL_IMS)) { return true; } else if (processCallResult == (android.telephony.ims.feature.MmTelFeature.PROCESS_CALL_CSFB)) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ""shouldProcessCall: place over CSFB instead.""); return false; } else { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ""shouldProcessCall returned unknown result.""); return false; } }",3b47647233442b1a13981f575d8493d130a9f205,"private boolean shouldNumberBePlacedOnIms(boolean isEmergency, java.lang.String number) { int processCallResult; try { if ((mImsManager) != null) { processCallResult = mImsManager.shouldProcessCall(isEmergency, new java.lang.String[]{ number }); android.telephony.Rlog.i(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, (((""shouldProcessCall: number: "" + (android.telephony.Rlog.pii(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, number))) + "", result: "") + processCallResult)); } else { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ""ImsManager unavailable, shouldProcessCall returning false.""); return false; } } catch (com.android.ims.ImsException e) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ""ImsService unavailable, shouldProcessCall returning false.""); return false; } switch (processCallResult) { case android.telephony.ims.feature.MmTelFeature.PROCESS_CALL_IMS : { return true; } case android.telephony.ims.feature.MmTelFeature.PROCESS_CALL_CSFB : { android.telephony.Rlog.i(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ""shouldProcessCall: place over CSFB instead.""); return false; } default : { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ""shouldProcessCall returned unknown result.""); return false; } } }",ab6928f3e3c33052c19cf3dea0cc330412969269,2018-02-28 03:02:25,2
604705,core_java_android_net_NetworkCapabilities.java,@java.lang.Override public android.net.NetworkCapabilities createFromParcel(android.os.Parcel in) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCap.mNetworkCapabilities = in.readLong(); netCap.mTransportTypes = in.readLong(); netCap.mLinkUpBandwidthKbps = in.readInt(); netCap.mLinkDownBandwidthKbps = in.readInt(); netCap.mNetworkSpecifier = in.readParcelable(null); netCap.mSignalStrength = in.readInt(); netCap.mUids = ((android.util.ArraySet<android.net.UidRange>) (in.readArraySet(null))); return netCap; },c050e9fd46c5565b134dd284ce37df485aed5447,@java.lang.Override public android.net.NetworkCapabilities createFromParcel(android.os.Parcel in) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCap.mNetworkCapabilities = in.readLong(); netCap.mTransportTypes = in.readLong(); netCap.mLinkUpBandwidthKbps = in.readInt(); netCap.mLinkDownBandwidthKbps = in.readInt(); netCap.mNetworkSpecifier = in.readParcelable(null); netCap.mSignalStrength = in.readInt(); netCap.mUids = ((android.util.ArraySet<android.net.UidRange>) (in.readArraySet(null))); netCap.mUnwantedNetworkCapabilities = in.readLong(); return netCap; },6efa0bb0c099614b87ade78125645116c0dbb8ce,@java.lang.Override public android.net.NetworkCapabilities createFromParcel(android.os.Parcel in) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCap.mNetworkCapabilities = in.readLong(); netCap.mTransportTypes = in.readLong(); netCap.mLinkUpBandwidthKbps = in.readInt(); netCap.mLinkDownBandwidthKbps = in.readInt(); netCap.mNetworkSpecifier = in.readParcelable(null); netCap.mSignalStrength = in.readInt(); netCap.mUids = ((android.util.ArraySet<android.net.UidRange>) (in.readArraySet(null))); return netCap; },c050e9fd46c5565b134dd284ce37df485aed5447,2018-02-28 07:05:58,4
604705,core_java_android_net_NetworkCapabilities.java,"public android.net.NetworkCapabilities addCapability(@android.net.NetworkCapabilities.NetCapability int capability) { if ((capability < (android.net.NetworkCapabilities.MIN_NET_CAPABILITY)) || (capability > (android.net.NetworkCapabilities.MAX_NET_CAPABILITY))) { throw new java.lang.IllegalArgumentException(""NetworkCapability out of range""); } mNetworkCapabilities |= 1 << capability; return this; }",d07ec0fcb7094e21816ad145f8839d0ff4c90405,"public android.net.NetworkCapabilities addCapability(@android.net.NetworkCapabilities.NetCapability int capability) { if ((capability < (android.net.NetworkCapabilities.MIN_NET_CAPABILITY)) || (capability > (android.net.NetworkCapabilities.MAX_NET_CAPABILITY))) { throw new java.lang.IllegalArgumentException(""NetworkCapability out of range""); } mNetworkCapabilities |= 1 << capability; removeUnwantedCapability(capability); return this; }",3f9522a056d6fe002ef9bae76c7e209e9574f6f1,"public android.net.NetworkCapabilities addCapability(@android.net.NetworkCapabilities.NetCapability int capability) { if ((capability < (android.net.NetworkCapabilities.MIN_NET_CAPABILITY)) || (capability > (android.net.NetworkCapabilities.MAX_NET_CAPABILITY))) { throw new java.lang.IllegalArgumentException(""NetworkCapability out of range""); } mNetworkCapabilities |= 1 << capability; return this; }",d07ec0fcb7094e21816ad145f8839d0ff4c90405,2018-02-28 07:05:58,4
604705,core_java_android_net_NetworkCapabilities.java,"private boolean satisfiedByNetCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { long networkCapabilities = this.mNetworkCapabilities; if (onlyImmutable) { networkCapabilities = networkCapabilities & (~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES)); } return ((nc.mNetworkCapabilities) & networkCapabilities) == networkCapabilities; }",b88805c6964f1ac315ca6edcb3434b87d14f2980,"private boolean satisfiedByNetCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { long networkCapabilities = this.mNetworkCapabilities; if (onlyImmutable) { networkCapabilities = networkCapabilities & (~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES)); } if (((mUnwantedNetworkCapabilities) & (nc.mNetworkCapabilities)) > 0) { return false; } return ((nc.mNetworkCapabilities) & networkCapabilities) == networkCapabilities; }",56ed0c7fe22d142f9a411bfee38a971b78a8432f,"private boolean satisfiedByNetCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { long networkCapabilities = this.mNetworkCapabilities; if (onlyImmutable) { networkCapabilities = networkCapabilities & (~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES)); } return ((nc.mNetworkCapabilities) & networkCapabilities) == networkCapabilities; }",b88805c6964f1ac315ca6edcb3434b87d14f2980,2018-02-28 07:05:58,4
604705,core_java_android_net_NetworkCapabilities.java,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeInt(mSignalStrength); dest.writeArraySet(mUids); }",0be2d87b510f17cc9fe798a51ddf23539c8f1356,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeInt(mSignalStrength); dest.writeArraySet(mUids); dest.writeLong(mUnwantedNetworkCapabilities); }",6d44e0581a9d0ac525d6bcacb9b5abf1440f92dd,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeInt(mSignalStrength); dest.writeArraySet(mUids); }",0be2d87b510f17cc9fe798a51ddf23539c8f1356,2018-02-28 07:05:58,4
604705,core_java_android_net_NetworkCapabilities.java,@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return (((((equalsNetCapabilities(that)) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that))) && (equalsUids(that)); },6dd59d9a440b11f0ce43c43ee9dd406da9ee34ea,"@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return ((((((equalsNetCapabilities(that)) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that))) && (equalsUids(that))) && (java.util.Objects.equals(mUnwantedNetworkCapabilities, that.mUnwantedNetworkCapabilities)); }",2574ba773d658e44833b1c931fa2a8343a2362cc,@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return (((((equalsNetCapabilities(that)) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that))) && (equalsUids(that)); },6dd59d9a440b11f0ce43c43ee9dd406da9ee34ea,2018-02-28 07:05:58,4
604705,core_java_android_net_NetworkCapabilities.java,public void clearAll() { mNetworkCapabilities = mTransportTypes = 0; mLinkUpBandwidthKbps = mLinkDownBandwidthKbps = android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED; mNetworkSpecifier = null; mSignalStrength = android.net.NetworkCapabilities.SIGNAL_STRENGTH_UNSPECIFIED; mUids = null; mEstablishingVpnAppUid = android.net.NetworkCapabilities.INVALID_UID; },84b30b21b71006f0ce3b9b1929694aa965081f62,public void clearAll() { mNetworkCapabilities = mTransportTypes = 0; mLinkUpBandwidthKbps = mLinkDownBandwidthKbps = android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED; mNetworkSpecifier = null; mSignalStrength = android.net.NetworkCapabilities.SIGNAL_STRENGTH_UNSPECIFIED; mUids = null; mEstablishingVpnAppUid = android.net.NetworkCapabilities.INVALID_UID; mUnwantedNetworkCapabilities = 0; },761e9d23206cb988f36dbdf5c4c9fe7e458e5d77,public void clearAll() { mNetworkCapabilities = mTransportTypes = 0; mLinkUpBandwidthKbps = mLinkDownBandwidthKbps = android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED; mNetworkSpecifier = null; mSignalStrength = android.net.NetworkCapabilities.SIGNAL_STRENGTH_UNSPECIFIED; mUids = null; mEstablishingVpnAppUid = android.net.NetworkCapabilities.INVALID_UID; },84b30b21b71006f0ce3b9b1929694aa965081f62,2018-02-28 07:05:58,4
604705,core_java_android_net_NetworkCapabilities.java,@java.lang.Override public int hashCode() { return (((((((((int) ((mNetworkCapabilities) & -1)) + (((int) ((mNetworkCapabilities) >> 32)) * 3)) + (((int) ((mTransportTypes) & -1)) * 5)) + (((int) ((mTransportTypes) >> 32)) * 7)) + ((mLinkUpBandwidthKbps) * 11)) + ((mLinkDownBandwidthKbps) * 13)) + ((java.util.Objects.hashCode(mNetworkSpecifier)) * 17)) + ((mSignalStrength) * 19)) + ((java.util.Objects.hashCode(mUids)) * 23); },03cd242e5fafee0669d9f16a31c4f8533f557909,"@java.lang.Override public int hashCode() { return java.util.Objects.hash(mNetworkCapabilities, mTransportTypes, mLinkDownBandwidthKbps, mLinkUpBandwidthKbps, mNetworkSpecifier, mSignalStrength, mUids, mUnwantedNetworkCapabilities); }",e8f01664fdfc64d010c756549d5addd79407d138,@java.lang.Override public int hashCode() { return (((((((((int) ((mNetworkCapabilities) & -1)) + (((int) ((mNetworkCapabilities) >> 32)) * 3)) + (((int) ((mTransportTypes) & -1)) * 5)) + (((int) ((mTransportTypes) >> 32)) * 7)) + ((mLinkUpBandwidthKbps) * 11)) + ((mLinkDownBandwidthKbps) * 13)) + ((java.util.Objects.hashCode(mNetworkSpecifier)) * 17)) + ((mSignalStrength) * 19)) + ((java.util.Objects.hashCode(mUids)) * 23); },03cd242e5fafee0669d9f16a31c4f8533f557909,2018-02-28 07:05:58,4
604705,tests_net_java_android_net_NetworkCapabilitiesTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@org.junit.Test public void testOemPaid() { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); android.net.NetworkCapabilities request = new android.net.NetworkCapabilities(); assertTrue(request.satisfiedByNetworkCapabilities(nc)); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); assertFalse(request.satisfiedByNetworkCapabilities(nc)); request.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); assertTrue(request.satisfiedByNetworkCapabilities(nc)); },eb2484a8346fa9622e096620fcf98cbf2efdadf3,@org.junit.Test public void testOemPaid() { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); nc.maybeMarkCapabilitiesRestricted(); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); },5e99e8a62856ad02ad40c920916e6436c697bad5,2018-02-28 07:05:58,4
624906,tests_autofillservice_src_android_autofillservice_cts_CustomDescriptionWithLinkTestCase.java,@org.junit.Test public final void testTapLink_changeOrientationThenTapBack() throws java.lang.Exception { sUiBot.setScreenOrientation(UiBot.PORTRAIT); try { saveUiRestoredAfterTappingLinkTest(android.autofillservice.cts.CustomDescriptionWithLinkTestCase.PostSaveLinkTappedAction.ROTATE_THEN_TAP_BACK_BUTTON); } finally { sUiBot.setScreenOrientation(UiBot.PORTRAIT); } },58b2ec76e688c88a0492e2a0f89808dc2c1b47e3,"@org.junit.Test public final void testTapLink_changeOrientationThenTapBack() throws java.lang.Exception { sUiBot.setScreenOrientation(UiBot.PORTRAIT); try { android.autofillservice.cts.Helper.runShellCommand(""wm density 420""); saveUiRestoredAfterTappingLinkTest(android.autofillservice.cts.CustomDescriptionWithLinkTestCase.PostSaveLinkTappedAction.ROTATE_THEN_TAP_BACK_BUTTON); } finally { android.autofillservice.cts.Helper.runShellCommand(""wm density reset""); sUiBot.setScreenOrientation(UiBot.PORTRAIT); } }",5f243a2b4a548ba1e751e71f71a49653bc5c377b,"@org.junit.Test public final void testTapLink_changeOrientationThenTapBack() throws java.lang.Exception { sUiBot.setScreenOrientation(UiBot.PORTRAIT); try { android.autofillservice.cts.Helper.runShellCommand(""wm density 420""); saveUiRestoredAfterTappingLinkTest(android.autofillservice.cts.CustomDescriptionWithLinkTestCase.PostSaveLinkTappedAction.ROTATE_THEN_TAP_BACK_BUTTON); } finally { sUiBot.setScreenOrientation(UiBot.PORTRAIT); try { cleanUpAfterScreenOrientationIsBackToPortrait(); } finally { android.autofillservice.cts.Helper.runShellCommand(""wm density reset""); } } }",75f8b38fe427a9b815c90e634309754ffecefe83,2018-02-28 17:44:44,8
629866,src_com_android_bluetooth_hfpclient_HeadsetClientService.java,"@java.lang.Override protected synchronized boolean start() { if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ""start()""); } com.android.bluetooth.hfpclient.NativeInterface.initializeNative(); mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); mSmFactory = new com.android.bluetooth.hfpclient.HeadsetClientStateMachineFactory(); mStateMachineMap.clear(); android.content.IntentFilter filter = new android.content.IntentFilter(android.media.AudioManager.VOLUME_CHANGED_ACTION); try { registerReceiver(mBroadcastReceiver, filter); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ""Unable to register broadcat receiver"", e); } com.android.bluetooth.hfpclient.HeadsetClientService.setHeadsetClientService(this); mNativeInterface = new com.android.bluetooth.hfpclient.NativeInterface(); android.content.Intent startIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); startService(startIntent); mSmThread = new android.os.HandlerThread(""HeadsetClient.SM""); mSmThread.start(); return true; }",a57ca27776a740ed25c8d55393d48aaa41e83949,"@java.lang.Override protected synchronized boolean start() { if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ""start()""); } com.android.bluetooth.hfpclient.NativeInterface.initializeNative(); mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); mSmFactory = new com.android.bluetooth.hfpclient.HeadsetClientStateMachineFactory(); mStateMachineMap.clear(); android.content.IntentFilter filter = new android.content.IntentFilter(android.media.AudioManager.VOLUME_CHANGED_ACTION); try { registerReceiver(mBroadcastReceiver, filter); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ""Unable to register broadcat receiver"", e); } mNativeInterface = new com.android.bluetooth.hfpclient.NativeInterface(); android.content.Intent startIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); startService(startIntent); mSmThread = new android.os.HandlerThread(""HeadsetClient.SM""); mSmThread.start(); com.android.bluetooth.hfpclient.HeadsetClientService.setHeadsetClientService(this); return true; }",ae90686fcb01c7bd01eb14c5d77e829ef8e6ccc8,"@java.lang.Override protected synchronized boolean start() { if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ""start()""); } com.android.bluetooth.hfpclient.NativeInterface.initializeNative(); mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); mSmFactory = new com.android.bluetooth.hfpclient.HeadsetClientStateMachineFactory(); mStateMachineMap.clear(); android.content.IntentFilter filter = new android.content.IntentFilter(android.media.AudioManager.VOLUME_CHANGED_ACTION); registerReceiver(mBroadcastReceiver, filter); mNativeInterface = new com.android.bluetooth.hfpclient.NativeInterface(); android.content.Intent startIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); startService(startIntent); mSmThread = new android.os.HandlerThread(""HeadsetClient.SM""); mSmThread.start(); com.android.bluetooth.hfpclient.HeadsetClientService.setHeadsetClientService(this); return true; }",5802b60a78564d4467ac68922d2233ad31d466c3,2018-02-28 21:31:01,2
598858,src_java_com_android_internal_telephony_RadioIndication.java,"public void currentPhysicalChannelConfigs(int indicationType, java.util.ArrayList<android.hardware.radio.V1_2.PhysicalChannelConfig> configs) { }",198071503f61867957e4af07529385318e3d9952,"public void currentPhysicalChannelConfigs(int indicationType, java.util.ArrayList<android.hardware.radio.V1_2.PhysicalChannelConfig> configs) { java.util.List<android.telephony.PhysicalChannelConfig> response = com.android.internal.telephony.RIL.convertHalPhysicalChannelConfigs(configs); mRil.mPhysicalChannelConfigurationRegistrants.notifyRegistrants(new android.os.AsyncResult(null, response, null)); }",95d70d1d70de2e09123fb0087c5e6968fef88d52,"public void currentPhysicalChannelConfigs(int indicationType, java.util.ArrayList<android.hardware.radio.V1_2.PhysicalChannelConfig> configs) { java.util.List<android.telephony.PhysicalChannelConfig> response = new java.util.ArrayList(configs.size()); for (android.hardware.radio.V1_2.PhysicalChannelConfig config : configs) { int status; switch (config.status) { case android.hardware.radio.V1_2.CellConnectionStatus.PRIMARY_SERVING : status = android.telephony.PhysicalChannelConfig.CONNECTION_PRIMARY_SERVING; break; case android.hardware.radio.V1_2.CellConnectionStatus.SECONDARY_SERVING : status = android.telephony.PhysicalChannelConfig.CONNECTION_SECONDARY_SERVING; break; default : mRil.riljLoge((""Unsupported CellConnectionStatus in PhysicalChannelConfig: "" + (config.status))); status = android.telephony.PhysicalChannelConfig.CONNECTION_UNKNOWN; break; } response.add(new android.telephony.PhysicalChannelConfig(status, config.cellBandwidthDownlink)); } mRil.mPhysicalChannelConfigurationRegistrants.notifyRegistrants(new android.os.AsyncResult(null, response, null)); }",3cb524950fb1c1fe12840acd742dc0fdff60a46a,2018-03-01 03:48:30,9
598859,services_core_java_com_android_server_TelephonyRegistry.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void notifyPhysicalChannelConfigurationForSubscriber(int subId, java.util.List<android.telephony.PhysicalChannelConfig> configs) { if (!(checkNotifyPermission(""notifyPhysicalChannelConfiguration()""))) { return; } if (com.android.server.TelephonyRegistry.VDBG) { com.android.server.TelephonyRegistry.log((((""notifyPhysicalChannelConfiguration: subId="" + subId) + "" configs="") + configs)); } synchronized(mRecords) { int phoneId = android.telephony.SubscriptionManager.getPhoneId(subId); if (validatePhoneId(phoneId)) { mPhysicalChannelConfigs.set(phoneId, configs); for (com.android.server.TelephonyRegistry.Record r : mRecords) { if ((r.matchPhoneStateListenerEvent(PhoneStateListener.LISTEN_PHYSICAL_CHANNEL_CONFIGURATION)) && (idMatch(r.subId, subId, phoneId))) { try { if (com.android.server.TelephonyRegistry.DBG_LOC) { com.android.server.TelephonyRegistry.log((((""notifyPhysicalChannelConfiguration: mPhysicalChannelConfigu="" + configs) + "" r="") + r)); } r.callback.onPhysicalChannelConfigurationChanged(configs); } catch (android.os.RemoteException ex) { mRemoveList.add(r.binder); } } } } handleRemoveListLocked(); } }",fa4751f800da82fcd9925f679bd230ded5be981f,"public void notifyPhysicalChannelConfigurationForSubscriber(int subId, java.util.List<android.telephony.PhysicalChannelConfig> configs) { if (!(checkNotifyPermission(""notifyPhysicalChannelConfiguration()""))) { return; } if (com.android.server.TelephonyRegistry.VDBG) { com.android.server.TelephonyRegistry.log((((""notifyPhysicalChannelConfiguration: subId="" + subId) + "" configs="") + configs)); } synchronized(mRecords) { int phoneId = android.telephony.SubscriptionManager.getPhoneId(subId); if (validatePhoneId(phoneId)) { mPhysicalChannelConfigs.set(phoneId, configs); for (com.android.server.TelephonyRegistry.Record r : mRecords) { if ((r.matchPhoneStateListenerEvent(PhoneStateListener.LISTEN_PHYSICAL_CHANNEL_CONFIGURATION)) && (idMatch(r.subId, subId, phoneId))) { try { if (com.android.server.TelephonyRegistry.DBG_LOC) { com.android.server.TelephonyRegistry.log((((""notifyPhysicalChannelConfiguration: mPhysicalChannelConfigs="" + configs) + "" r="") + r)); } r.callback.onPhysicalChannelConfigurationChanged(configs); } catch (android.os.RemoteException ex) { mRemoveList.add(r.binder); } } } } handleRemoveListLocked(); } }",a57e7024315a16da39a3f573544823f6f6eaa0c4,2018-03-01 03:48:30,5
598858,src_java_com_android_internal_telephony_RIL.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static java.util.List<android.telephony.PhysicalChannelConfig> convertHalPhysicalChannelConfigs(java.util.List<android.hardware.radio.V1_2.PhysicalChannelConfig> records) { java.util.List<android.telephony.PhysicalChannelConfig> configs = new java.util.ArrayList<>(); for (android.hardware.radio.V1_2.PhysicalChannelConfig r : records) { configs.add(new android.telephony.PhysicalChannelConfig(r.status, r.cellBandwidthDownlink)); } return configs; }",a1b762a81e6808ba6a1b2b178779e34792788ee5,"static android.telephony.SignalStrength convertHalSignalStrength_1_2(android.hardware.radio.V1_2.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gsm.signalStrength, signalStrength.gsm.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, signalStrength.tdScdma.rscp); }",bcd832f38d7b20fee7a87214b92fb40a4ac0b930,2018-03-01 03:48:30,9
626887,core_java_android_net_NetworkCapabilities.java,"@java.lang.Override public java.lang.String toString() { int[] types = getTransportTypes(); java.lang.String transports = ((types.length) > 0) ? "" Transports: "" + (android.net.NetworkCapabilities.transportNamesOf(types)) : """"; types = getCapabilities(); java.lang.String capabilities = ((types.length) > 0) ? "" Capabilities: "" : """"; for (int i = 0; i < (types.length);) { capabilities += android.net.NetworkCapabilities.capabilityNameOf(types[i]); if ((++i) < (types.length)) capabilities += ""&""; } java.lang.String upBand = ((mLinkUpBandwidthKbps) > 0) ? ("" LinkUpBandwidth>="" + (mLinkUpBandwidthKbps)) + ""Kbps"" : """"; java.lang.String dnBand = ((mLinkDownBandwidthKbps) > 0) ? ("" LinkDnBandwidth>="" + (mLinkDownBandwidthKbps)) + ""Kbps"" : """"; java.lang.String specifier = ((mNetworkSpecifier) == null) ? """" : ("" Specifier: <"" + (mNetworkSpecifier)) + "">""; java.lang.String signalStrength = (hasSignalStrength()) ? "" SignalStrength: "" + (mSignalStrength) : """"; java.lang.String uids = (null != (mUids)) ? ("" Uids: <"" + (mUids)) + "">"" : """"; java.lang.String establishingAppUid = "" EstablishingAppUid: "" + (mEstablishingVpnAppUid); return ((((((((""["" + transports) + capabilities) + upBand) + dnBand) + specifier) + signalStrength) + uids) + establishingAppUid) + ""]""; }",da6da796abb580120c30efb6a1fbc92572b5cf6e,"@java.lang.Override public java.lang.String toString() { int[] types = getTransportTypes(); java.lang.String transports = ((types.length) > 0) ? "" Transports: "" + (android.net.NetworkCapabilities.transportNamesOf(types)) : """"; types = getCapabilities(); java.lang.String capabilities = ((types.length) > 0) ? "" Capabilities: "" : """"; for (int i = 0; i < (types.length);) { capabilities += android.net.NetworkCapabilities.capabilityNameOf(types[i]); if ((++i) < (types.length)) capabilities += ""&""; } java.lang.String upBand = ((mLinkUpBandwidthKbps) > 0) ? ("" LinkUpBandwidth>="" + (mLinkUpBandwidthKbps)) + ""Kbps"" : """"; java.lang.String dnBand = ((mLinkDownBandwidthKbps) > 0) ? ("" LinkDnBandwidth>="" + (mLinkDownBandwidthKbps)) + ""Kbps"" : """"; java.lang.String specifier = ((mNetworkSpecifier) == null) ? """" : ("" Specifier: <"" + (mNetworkSpecifier)) + "">""; java.lang.String signalStrength = (hasSignalStrength()) ? "" SignalStrength: "" + (mSignalStrength) : """"; final java.lang.String uids; if (null == (mUids)) { uids = """"; } else if ((1 == (mUids.size())) && (mUids.valueAt(0).isSingleUid())) { uids = "" Uid: "" + (mUids.valueAt(0).start); } else { uids = ("" Uids: <"" + (mUids)) + "">""; } java.lang.String establishingAppUid = (0 > (mEstablishingVpnAppUid)) ? """" : "" EstablishingAppUid: "" + (mEstablishingVpnAppUid); return ((((((((""["" + transports) + capabilities) + upBand) + dnBand) + specifier) + signalStrength) + uids) + establishingAppUid) + ""]""; }",106df791fdfd79e5d8b40ffc90efc6e56abeb397,"@java.lang.Override public java.lang.String toString() { final java.lang.StringBuilder sb = new java.lang.StringBuilder(""[""); if (0 != (mTransportTypes)) { sb.append("" Transports: ""); android.net.NetworkCapabilities.appendStringRepresentationOfBitMaskToStringBuilder(sb, mTransportTypes, android.net.NetworkCapabilities::transportNameOf, ""|""); } if (0 != (mNetworkCapabilities)) { sb.append("" Capabilities: ""); android.net.NetworkCapabilities.appendStringRepresentationOfBitMaskToStringBuilder(sb, mNetworkCapabilities, android.net.NetworkCapabilities::capabilityNameOf, ""&""); } if ((mLinkUpBandwidthKbps) > 0) { sb.append("" LinkUpBandwidth>="").append(mLinkUpBandwidthKbps).append(""Kbps""); } if ((mLinkDownBandwidthKbps) > 0) { sb.append("" LinkDnBandwidth>="").append(mLinkDownBandwidthKbps).append(""Kbps""); } if ((mNetworkSpecifier) != null) { sb.append("" Specifier: <"").append(mNetworkSpecifier).append("">""); } if (hasSignalStrength()) { sb.append("" SignalStrength: "").append(mSignalStrength); } if (null != (mUids)) { if ((1 == (mUids.size())) && ((mUids.valueAt(0).count()) == 1)) { sb.append("" Uid: "").append(mUids.valueAt(0).start); } else { sb.append("" Uids: <"").append(mUids).append("">""); } } if ((mEstablishingVpnAppUid) != (android.net.NetworkCapabilities.INVALID_UID)) { sb.append("" EstablishingAppUid: "").append(mEstablishingVpnAppUid); } sb.append(""]""); return sb.toString(); }",5f4cf7d5cfa8fe4c4ed2602621cdb1e247e77f04,2018-03-01 04:01:14,7
626887,core_java_android_net_UidRange.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isSingleUid() { return (start) == (stop); },1450f1c508be416a3561993033e4700072bd7c2a,public int count() { return (1 + (stop)) - (start); },860ba3724d64a375e432db88344eddcb6171739a,2018-03-01 04:01:14,7
628456,luni_src_main_java_libcore_icu_DateIntervalFormat.java,"public static java.lang.String formatDateRange(android.icu.util.ULocale icuLocale, android.icu.util.TimeZone icuTimeZone, long startMs, long endMs, int flags) { android.icu.util.Calendar startCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, startMs); android.icu.util.Calendar endCalendar; if (startMs == endMs) { endCalendar = startCalendar; } else { endCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, endMs); } boolean endsAtMidnight = libcore.icu.DateIntervalFormat.isMidnight(endCalendar); if (((startMs != endMs) && endsAtMidnight) && (((flags & (DateUtilsBridge.FORMAT_SHOW_TIME)) == 0) || ((libcore.icu.DateUtilsBridge.dayDistance(startCalendar, endCalendar)) <= 1))) { endCalendar.add(Calendar.DAY_OF_MONTH, (-1)); } java.lang.String skeleton = libcore.icu.DateUtilsBridge.toSkeleton(startCalendar, endCalendar, flags); synchronized(libcore.icu.DateIntervalFormat.CACHED_FORMATTERS) { android.icu.text.DateIntervalFormat formatter = libcore.icu.DateIntervalFormat.getFormatter(skeleton, icuLocale, icuTimeZone); return formatter.format(startCalendar, endCalendar, new java.lang.StringBuffer(), new java.text.FieldPosition(0)).toString(); } }",52d713122a77acd8ada7d8360d874de4db83df94,"public static java.lang.String formatDateRange(android.icu.util.ULocale icuLocale, android.icu.util.TimeZone icuTimeZone, long startMs, long endMs, int flags) { android.icu.util.Calendar startCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, startMs); android.icu.util.Calendar endCalendar; if (startMs == endMs) { endCalendar = startCalendar; } else { endCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, endMs); } boolean startsAtMidnight = libcore.icu.DateIntervalFormat.isMidnight(startCalendar); boolean endsAtMidnight = libcore.icu.DateIntervalFormat.isMidnight(endCalendar); boolean showTime = (flags & (DateUtilsBridge.FORMAT_SHOW_TIME)) != 0; boolean endsDayAfterStart = (libcore.icu.DateUtilsBridge.dayDistance(startCalendar, endCalendar)) == 1; if (((startMs != endMs) && endsAtMidnight) && ((!showTime) || (endsDayAfterStart && (!startsAtMidnight)))) { endCalendar.add(Calendar.DAY_OF_MONTH, (-1)); } java.lang.String skeleton = libcore.icu.DateUtilsBridge.toSkeleton(startCalendar, endCalendar, flags); synchronized(libcore.icu.DateIntervalFormat.CACHED_FORMATTERS) { android.icu.text.DateIntervalFormat formatter = libcore.icu.DateIntervalFormat.getFormatter(skeleton, icuLocale, icuTimeZone); return formatter.format(startCalendar, endCalendar, new java.lang.StringBuffer(), new java.text.FieldPosition(0)).toString(); } }",56f51baf2dc538d1550ba6f81d91f149eefd182d,"public static java.lang.String formatDateRange(android.icu.util.ULocale icuLocale, android.icu.util.TimeZone icuTimeZone, long startMs, long endMs, int flags) { android.icu.util.Calendar startCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, startMs); android.icu.util.Calendar endCalendar; if (startMs == endMs) { endCalendar = startCalendar; } else { endCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, endMs); } if (libcore.icu.DateIntervalFormat.isExactlyMidnight(endCalendar)) { boolean showTime = (flags & (DateUtilsBridge.FORMAT_SHOW_TIME)) == (DateUtilsBridge.FORMAT_SHOW_TIME); boolean endsDayAfterStart = (libcore.icu.DateUtilsBridge.dayDistance(startCalendar, endCalendar)) == 1; if (((!showTime) && (startMs != endMs)) || (endsDayAfterStart && (!(libcore.icu.DateUtilsBridge.isDisplayMidnightUsingSkeleton(startCalendar))))) { endCalendar.add(Calendar.DAY_OF_MONTH, (-1)); } } java.lang.String skeleton = libcore.icu.DateUtilsBridge.toSkeleton(startCalendar, endCalendar, flags); synchronized(libcore.icu.DateIntervalFormat.CACHED_FORMATTERS) { android.icu.text.DateIntervalFormat formatter = libcore.icu.DateIntervalFormat.getFormatter(skeleton, icuLocale, icuTimeZone); return formatter.format(startCalendar, endCalendar, new java.lang.StringBuffer(), new java.text.FieldPosition(0)).toString(); } }",1a7a264b92e280c3b03da413398ff1e5d52aae73,2018-03-01 15:20:25,4
628348,src_com_android_settings_development_DevelopmentSettings.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void initBluetoothMaxConnectedAudioDevicesPreference() { java.lang.CharSequence[] entries = mBluetoothSelectMaxConnectedAudioDevices.getEntries(); java.lang.String[] entriesWithDefault = getResources().getStringArray(R.array.bluetooth_max_connected_audio_devices_with_default); if ((entries.length) != (entriesWithDefault.length)) { throw new java.lang.IllegalStateException((((""bluetooth_max_connected_audio_devices.length="" + (entries.length)) + "" != bluetooth_max_connected_audio_devices_with_default.length="") + (entriesWithDefault.length))); } java.lang.String defaultValue = java.lang.String.valueOf(getResources().getInteger(com.android.internal.R.integer.config_bluetooth_max_connected_audio_devices)); int defaultIndex = mBluetoothSelectMaxConnectedAudioDevices.findIndexOfValue(defaultValue); if (defaultIndex < 0) { throw new java.lang.IllegalStateException(((""Cannot find defaultValue "" + defaultValue) + "" in bluetooth_max_connected_audio_devices array"")); } entries[defaultIndex] = entriesWithDefault[defaultIndex]; mBluetoothSelectMaxConnectedAudioDevices.setEntries(entries); java.lang.String overlayedValue = android.os.SystemProperties.get(com.android.settings.development.DevelopmentSettings.BLUETOOTH_MAX_CONNECTED_AUDIO_DEVICES_PROPERTY, defaultValue); int overlayedIndex = mBluetoothSelectMaxConnectedAudioDevices.findIndexOfValue(overlayedValue); mBluetoothSelectMaxConnectedAudioDevices.setValueIndex(overlayedIndex); mBluetoothSelectMaxConnectedAudioDevices.setSummary(entries[overlayedIndex]); }",469866a9daddf3d5313d100319497a493671e75f,"private void initBluetoothMaxConnectedAudioDevicesPreference() { int defaultMaxConnectedAudioDevices = getResources().getInteger(com.android.internal.R.integer.config_bluetooth_max_connected_audio_devices); final java.lang.CharSequence[] entries = mBluetoothSelectMaxConnectedAudioDevices.getEntries(); entries[0] = java.lang.String.format(entries[0].toString(), defaultMaxConnectedAudioDevices); mBluetoothSelectMaxConnectedAudioDevices.setEntries(entries); }",910f069edfb0e8fc61b59506c738243475efaac7,2018-03-01 19:34:18,5
628348,src_com_android_settings_development_DevelopmentSettings.java,"private void writeBluetoothMaxConnectedAudioDevices(java.lang.Object newValue) { android.os.SystemProperties.set(com.android.settings.development.DevelopmentSettings.BLUETOOTH_MAX_CONNECTED_AUDIO_DEVICES_PROPERTY, newValue.toString()); int index = mBluetoothSelectMaxConnectedAudioDevices.findIndexOfValue(newValue.toString()); if (index >= 0) { java.lang.String[] titles = getResources().getStringArray(R.array.bluetooth_max_connected_audio_devices); mBluetoothSelectMaxConnectedAudioDevices.setSummary(titles[index]); } }",6e7b20a39877984be3d8e5fb200a484e94fdac87,"private void writeBluetoothMaxConnectedAudioDevices(java.lang.Object newValueObj) { java.lang.String newValue = newValueObj.toString(); int index = mBluetoothSelectMaxConnectedAudioDevices.findIndexOfValue(newValue); if (index < 0) { throw new java.lang.IllegalArgumentException((((""Value "" + newValue) + "" not found in Bluetooth max"") + "" connected audio devices preference"")); } android.os.SystemProperties.set(com.android.settings.development.DevelopmentSettings.BLUETOOTH_MAX_CONNECTED_AUDIO_DEVICES_PROPERTY, newValue); mBluetoothSelectMaxConnectedAudioDevices.setValueIndex(index); java.lang.CharSequence[] entries = mBluetoothSelectMaxConnectedAudioDevices.getEntries(); mBluetoothSelectMaxConnectedAudioDevices.setSummary(entries[index]); }",3770112979b8d5d872c82b0e2ae92fe0f3057996,"private void writeBluetoothMaxConnectedAudioDevices(java.lang.Object newValue) { java.lang.String newValueString = newValue.toString(); if ((mBluetoothSelectMaxConnectedAudioDevices.findIndexOfValue(newValueString)) <= 0) { newValueString = """"; } android.os.SystemProperties.set(com.android.settings.development.DevelopmentSettings.BLUETOOTH_MAX_CONNECTED_AUDIO_DEVICES_PROPERTY, newValueString); updateBluetoothMaxConnectedAudioDevicesPreference(); }",5ea27ddfbe1ac2eed8a1d276b78897c8026b74b9,2018-03-01 19:34:18,5
628348,src_com_android_settings_development_DevelopmentSettings.java,"private void resetDangerousOptions() { mDontPokeProperties = true; for (int i = 0; i < (mResetSwitchPrefs.size()); i++) { android.support.v14.preference.SwitchPreference cb = mResetSwitchPrefs.get(i); if (cb.isChecked()) { cb.setChecked(false); onPreferenceTreeClick(cb); } } mBugReportInPowerController.resetPreference(); mEnableAdbController.resetPreference(); com.android.settings.development.DevelopmentSettings.resetDebuggerOptions(); writeLogpersistOption(null, true); writeLogdSizeOption(null); writeAnimationScaleOption(0, mWindowAnimationScale, null); writeAnimationScaleOption(1, mTransitionAnimationScale, null); writeAnimationScaleOption(2, mAnimatorDurationScale, null); if (usingDevelopmentColorSpace()) { writeSimulateColorSpace((-1)); } writeOverlayDisplayDevicesOptions(null); writeAppProcessLimitOptions(null); mHaveDebugSettings = false; updateAllOptions(); mDontPokeProperties = false; pokeSystemProperties(); }",0c53d3bed3bad5738b3af7ded3000a7534f0ed94,"private void resetDangerousOptions() { mDontPokeProperties = true; for (int i = 0; i < (mResetSwitchPrefs.size()); i++) { android.support.v14.preference.SwitchPreference cb = mResetSwitchPrefs.get(i); if (cb.isChecked()) { cb.setChecked(false); onPreferenceTreeClick(cb); } } mBugReportInPowerController.resetPreference(); mEnableAdbController.resetPreference(); com.android.settings.development.DevelopmentSettings.resetDebuggerOptions(); writeLogpersistOption(null, true); writeLogdSizeOption(null); writeAnimationScaleOption(0, mWindowAnimationScale, null); writeAnimationScaleOption(1, mTransitionAnimationScale, null); writeAnimationScaleOption(2, mAnimatorDurationScale, null); if (usingDevelopmentColorSpace()) { writeSimulateColorSpace((-1)); } writeOverlayDisplayDevicesOptions(null); writeAppProcessLimitOptions(null); java.lang.String defaultBluetoothMaxConnectedAudioDevices = java.lang.String.valueOf(getResources().getInteger(com.android.internal.R.integer.config_bluetooth_max_connected_audio_devices)); writeBluetoothMaxConnectedAudioDevices(defaultBluetoothMaxConnectedAudioDevices); mHaveDebugSettings = false; updateAllOptions(); mDontPokeProperties = false; pokeSystemProperties(); }",ffc6eb7e37761f46330c7312db76c0af3b255104,"private void resetDangerousOptions() { mDontPokeProperties = true; for (int i = 0; i < (mResetSwitchPrefs.size()); i++) { android.support.v14.preference.SwitchPreference cb = mResetSwitchPrefs.get(i); if (cb.isChecked()) { cb.setChecked(false); onPreferenceTreeClick(cb); } } mBugReportInPowerController.resetPreference(); mEnableAdbController.resetPreference(); com.android.settings.development.DevelopmentSettings.resetDebuggerOptions(); writeLogpersistOption(null, true); writeLogdSizeOption(null); writeAnimationScaleOption(0, mWindowAnimationScale, null); writeAnimationScaleOption(1, mTransitionAnimationScale, null); writeAnimationScaleOption(2, mAnimatorDurationScale, null); if (usingDevelopmentColorSpace()) { writeSimulateColorSpace((-1)); } writeOverlayDisplayDevicesOptions(null); writeAppProcessLimitOptions(null); writeBluetoothMaxConnectedAudioDevices(""""); mHaveDebugSettings = false; updateAllOptions(); mDontPokeProperties = false; pokeSystemProperties(); }",4dc16d340c87a274f85f967351d0113b5affca32,2018-03-01 19:34:18,5
571767,telephony_java_android_telephony_LocationAccessPolicy.java,"private static boolean isLocationModeEnabled(@android.annotation.NonNull android.content.Context context, @android.annotation.UserIdInt int userId) { int locationMode = Settings.Secure.getIntForUser(context.getContentResolver(), Settings.Secure.LOCATION_MODE, Settings.Secure.LOCATION_MODE_OFF, userId); return (locationMode != (Settings.Secure.LOCATION_MODE_OFF)) && (locationMode != (Settings.Secure.LOCATION_MODE_SENSORS_ONLY)); }",4c698d4677436fb1de7e3fdebee258d1a0cd9a27,"private static boolean isLocationModeEnabled(@android.annotation.NonNull android.content.Context context, @android.annotation.UserIdInt int userId) { int locationMode = Settings.Secure.getIntForUser(context.getContentResolver(), Settings.Secure.LOCATION_MODE, Settings.Secure.LOCATION_MODE_OFF, userId); return locationMode != (Settings.Secure.LOCATION_MODE_OFF); }",0e29af2ec3f8b4d4ae55abb52c4e62ada555687d,"private static boolean isLocationModeEnabled(@android.annotation.NonNull android.content.Context context, @android.annotation.UserIdInt int userId) { int locationMode = Settings.Secure.getIntForUser(context.getContentResolver(), Settings.Secure.LOCATION_MODE, Settings.Secure.LOCATION_MODE_OFF, userId); return (locationMode != (Settings.Secure.LOCATION_MODE_OFF)) && (locationMode != (Settings.Secure.LOCATION_MODE_SENSORS_ONLY)); }",4c698d4677436fb1de7e3fdebee258d1a0cd9a27,2018-03-02 00:49:32,8
571767,telephony_java_android_telephony_LocationAccessPolicy.java,"public static boolean canAccessCellLocation(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.lang.String pkgName, int uid, int pid) throws java.lang.SecurityException { android.os.Trace.beginSection(""TelephonyLocationCheck""); try { if (uid == (PHONE_UID)) { return true; } if ((context.checkPermission(Manifest.permission.ACCESS_COARSE_LOCATION, pid, uid)) == (android.content.pm.PackageManager.PERMISSION_DENIED)) { return false; } final int opCode = android.app.AppOpsManager.permissionToOpCode(Manifest.permission.ACCESS_COARSE_LOCATION); if ((opCode != (android.app.AppOpsManager.OP_NONE)) && ((context.getSystemService(android.app.AppOpsManager.class).noteOp(opCode, uid, pkgName)) != (android.app.AppOpsManager.MODE_ALLOWED))) { return false; } if ((!(android.telephony.LocationAccessPolicy.isLocationModeEnabled(context, android.os.UserHandle.getUserId(uid)))) && (!(android.telephony.LocationAccessPolicy.isLegacyForeground(context, pkgName, uid)))) { return false; } return (android.telephony.LocationAccessPolicy.isCurrentProfile(context, uid)) || (android.telephony.LocationAccessPolicy.checkInteractAcrossUsersFull(context)); } finally { android.os.Trace.endSection(); } }",e3013a863abc282cc14f7462c039e43df914a4d9,"public static boolean canAccessCellLocation(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.lang.String pkgName, int uid, int pid) throws java.lang.SecurityException { android.os.Trace.beginSection(""TelephonyLocationCheck""); try { if (uid == (PHONE_UID)) { return true; } if ((context.checkPermission(Manifest.permission.ACCESS_COARSE_LOCATION, pid, uid)) == (android.content.pm.PackageManager.PERMISSION_DENIED)) { return false; } final int opCode = android.app.AppOpsManager.permissionToOpCode(Manifest.permission.ACCESS_COARSE_LOCATION); if ((opCode != (android.app.AppOpsManager.OP_NONE)) && ((context.getSystemService(android.app.AppOpsManager.class).noteOp(opCode, uid, pkgName)) != (android.app.AppOpsManager.MODE_ALLOWED))) { return false; } if (!(android.telephony.LocationAccessPolicy.isLocationModeEnabled(context, android.os.UserHandle.getUserId(uid)))) { return false; } return (android.telephony.LocationAccessPolicy.isCurrentProfile(context, uid)) || (android.telephony.LocationAccessPolicy.checkInteractAcrossUsersFull(context)); } finally { android.os.Trace.endSection(); } }",f52ce93f172f17e36765092943b701249b38f5da,"public static boolean canAccessCellLocation(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.lang.String pkgName, int uid, int pid) throws java.lang.SecurityException { android.os.Trace.beginSection(""TelephonyLocationCheck""); try { if (uid == (PHONE_UID)) { return true; } if ((context.checkPermission(Manifest.permission.ACCESS_COARSE_LOCATION, pid, uid)) == (android.content.pm.PackageManager.PERMISSION_DENIED)) { return false; } final int opCode = android.app.AppOpsManager.permissionToOpCode(Manifest.permission.ACCESS_COARSE_LOCATION); if ((opCode != (android.app.AppOpsManager.OP_NONE)) && ((context.getSystemService(android.app.AppOpsManager.class).noteOpNoThrow(opCode, uid, pkgName)) != (android.app.AppOpsManager.MODE_ALLOWED))) { return false; } if (!(android.telephony.LocationAccessPolicy.isLocationModeEnabled(context, android.os.UserHandle.getUserId(uid)))) { return false; } return (android.telephony.LocationAccessPolicy.isCurrentProfile(context, uid)) || (android.telephony.LocationAccessPolicy.checkInteractAcrossUsersFull(context)); } finally { android.os.Trace.endSection(); } }",02dd3553831c93726f36aa09da7bf973c159172a,2018-03-02 00:49:32,8
626967,core_java_android_net_IpPrefix.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public int compare(android.net.IpPrefix prefix1, android.net.IpPrefix prefix2) { final int p1len = prefix1.getPrefixLength(); final int p2len = prefix2.getPrefixLength(); if (p1len < p2len) return -1; if (p2len < p1len) return 1; final byte[] a1 = prefix1.address; final byte[] a2 = prefix2.address; final int len = ((a1.length) < (a2.length)) ? a1.length : a2.length; for (int i = 0; i < len; ++i) { if ((a1[i]) < (a2[i])) return -1; if ((a1[i]) > (a2[i])) return 1; } if ((a2.length) < len) return 1; if ((a1.length) < len) return -1; return 0; }",76d57056cbfcedc1984c11907b5241845e2b6865,"@java.lang.Override public int compare(android.net.IpPrefix prefix1, android.net.IpPrefix prefix2) { if (prefix1.isIPv4()) { if (prefix2.isIPv6()) return -1; } else { if (prefix2.isIPv4()) return 1; } final int p1len = prefix1.getPrefixLength(); final int p2len = prefix2.getPrefixLength(); if (p1len < p2len) return -1; if (p2len < p1len) return 1; final byte[] a1 = prefix1.address; final byte[] a2 = prefix2.address; final int len = ((a1.length) < (a2.length)) ? a1.length : a2.length; for (int i = 0; i < len; ++i) { if ((a1[i]) < (a2[i])) return -1; if ((a1[i]) > (a2[i])) return 1; } if ((a2.length) < len) return 1; if ((a1.length) < len) return -1; return 0; }",6bfd57205f27127f836d40dd8fba5fd03be2cf21,2018-03-02 11:18:08,3
626967,services_core_java_com_android_server_connectivity_Vpn.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.android.internal.annotations.VisibleForTesting static boolean providesRoutesToMostDestinations(android.net.LinkProperties lp) { final java.util.Comparator<android.net.IpPrefix> prefixLengthComparator = android.net.IpPrefix.lengthComparator(); java.util.TreeSet<android.net.IpPrefix> ipV4Prefixes = new java.util.TreeSet(prefixLengthComparator); java.util.TreeSet<android.net.IpPrefix> ipV6Prefixes = new java.util.TreeSet(prefixLengthComparator); for (final android.net.RouteInfo route : lp.getAllRoutes()) { android.net.IpPrefix destination = route.getDestination(); if (destination.isIPv4()) { ipV4Prefixes.add(destination); } else { ipV6Prefixes.add(destination); } } if ((android.net.NetworkUtils.routedIPv4AddressCount(ipV4Prefixes)) > (com.android.server.connectivity.Vpn.MOST_IPV4_ADDRESSES_COUNT)) { return true; } return (android.net.NetworkUtils.routedIPv6AddressCount(ipV6Prefixes).compareTo(com.android.server.connectivity.Vpn.MOST_IPV6_ADDRESSES_COUNT)) >= 0; },08516433013a87f05efddccee7b2d496cc3454a1,@com.android.internal.annotations.VisibleForTesting static boolean providesRoutesToMostDestinations(android.net.LinkProperties lp) { final java.util.Comparator<android.net.IpPrefix> prefixLengthComparator = android.net.IpPrefix.lengthComparator(); java.util.TreeSet<android.net.IpPrefix> ipv4Prefixes = new java.util.TreeSet(prefixLengthComparator); java.util.TreeSet<android.net.IpPrefix> ipv6Prefixes = new java.util.TreeSet(prefixLengthComparator); for (final android.net.RouteInfo route : lp.getAllRoutes()) { android.net.IpPrefix destination = route.getDestination(); if (destination.isIPv4()) { ipv4Prefixes.add(destination); } else { ipv6Prefixes.add(destination); } } if ((android.net.NetworkUtils.routedIPv4AddressCount(ipv4Prefixes)) > (com.android.server.connectivity.Vpn.MOST_IPV4_ADDRESSES_COUNT)) { return true; } return (android.net.NetworkUtils.routedIPv6AddressCount(ipv6Prefixes).compareTo(com.android.server.connectivity.Vpn.MOST_IPV6_ADDRESSES_COUNT)) >= 0; },18863ac1f37010f49a4ae537daaabacb0901410d,2018-03-02 11:18:08,3
626967,core_java_android_net_NetworkUtils.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static java.math.BigInteger routedIPv6AddressCount(final java.util.TreeSet<android.net.IpPrefix> prefixes) { java.math.BigInteger routedIPCount = java.math.BigInteger.ZERO; for (final android.net.IpPrefix prefix : android.net.NetworkUtils.deduplicatePrefixSet(prefixes)) { int rank = 128 - (prefix.getPrefixLength()); routedIPCount = routedIPCount.add(java.math.BigInteger.ONE.shiftLeft(rank)); } return routedIPCount; },1fbf1b216bfe7eef095c39cdf3a3070576da9b11,"public static java.math.BigInteger routedIPv6AddressCount(final java.util.TreeSet<android.net.IpPrefix> prefixes) { java.math.BigInteger routedIPCount = java.math.BigInteger.ZERO; for (final android.net.IpPrefix prefix : android.net.NetworkUtils.deduplicatePrefixSet(prefixes)) { if (!(prefix.isIPv6())) { android.util.Log.wtf(android.net.NetworkUtils.TAG, ""Non-IPv6 prefix in routedIPv6AddressCount""); } int rank = 128 - (prefix.getPrefixLength()); routedIPCount = routedIPCount.add(java.math.BigInteger.ONE.shiftLeft(rank)); } return routedIPCount; }",488c3f6d804aa945a7f676850a9e8114f6edf3e5,2018-03-02 11:18:08,3
626967,core_java_android_net_NetworkUtils.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static long routedIPv4AddressCount(final java.util.TreeSet<android.net.IpPrefix> prefixes) { long routedIPCount = 0; for (final android.net.IpPrefix prefix : android.net.NetworkUtils.deduplicatePrefixSet(prefixes)) { int rank = 32 - (prefix.getPrefixLength()); routedIPCount += 1L << rank; } return routedIPCount; },94e339603404f79397bd77541133c2ccbcb2527e,"public static long routedIPv4AddressCount(final java.util.TreeSet<android.net.IpPrefix> prefixes) { long routedIPCount = 0; for (final android.net.IpPrefix prefix : android.net.NetworkUtils.deduplicatePrefixSet(prefixes)) { if (!(prefix.isIPv4())) { android.util.Log.wtf(android.net.NetworkUtils.TAG, ""Non-IPv4 prefix in routedIPv4AddressCount""); } int rank = 32 - (prefix.getPrefixLength()); routedIPCount += 1L << rank; } return routedIPCount; }",e653301e16042daa13e3511a02c047ee87679bab,2018-03-02 11:18:08,3
626967,core_java_android_net_IpPrefix.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static java.util.Comparator<android.net.IpPrefix> lengthComparator() { return new java.util.Comparator<android.net.IpPrefix>() { @java.lang.Override public int compare(android.net.IpPrefix prefix1, android.net.IpPrefix prefix2) { final int p1len = prefix1.getPrefixLength(); final int p2len = prefix2.getPrefixLength(); if (p1len < p2len) return -1; if (p2len < p1len) return 1; final byte[] a1 = prefix1.address; final byte[] a2 = prefix2.address; final int len = ((a1.length) < (a2.length)) ? a1.length : a2.length; for (int i = 0; i < len; ++i) { if ((a1[i]) < (a2[i])) return -1; if ((a1[i]) > (a2[i])) return 1; } if ((a2.length) < len) return 1; if ((a1.length) < len) return -1; return 0; } }; }",c82094abd757dd3764d2d7662cb89e8eba2994c3,"public static java.util.Comparator<android.net.IpPrefix> lengthComparator() { return new java.util.Comparator<android.net.IpPrefix>() { @java.lang.Override public int compare(android.net.IpPrefix prefix1, android.net.IpPrefix prefix2) { if (prefix1.isIPv4()) { if (prefix2.isIPv6()) return -1; } else { if (prefix2.isIPv4()) return 1; } final int p1len = prefix1.getPrefixLength(); final int p2len = prefix2.getPrefixLength(); if (p1len < p2len) return -1; if (p2len < p1len) return 1; final byte[] a1 = prefix1.address; final byte[] a2 = prefix2.address; final int len = ((a1.length) < (a2.length)) ? a1.length : a2.length; for (int i = 0; i < len; ++i) { if ((a1[i]) < (a2[i])) return -1; if ((a1[i]) > (a2[i])) return 1; } if ((a2.length) < len) return 1; if ((a1.length) < len) return -1; return 0; } }; }",1c54956a4b4e0e9e31d845216ee675170398e83f,2018-03-02 11:18:08,3
622726,services_core_java_com_android_server_ConnectivityService.java,"@java.lang.Override public void pendingListenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, ""PendingIntent cannot be null.""); if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } ensureValidNetworkSpecifier(networkCapabilities); final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); nc.setSingleUid(android.os.Binder.getCallingUid()); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log((""pendingListenForNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); }",998aea43d0e562356bd52525077076015e0e7073,"@java.lang.Override public void pendingListenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, ""PendingIntent cannot be null.""); if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } ensureValidNetworkSpecifier(networkCapabilities); final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); restrictRequestUidsToSetAccessibleToCaller(nc); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log((""pendingListenForNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); }",fbc2cf9735cdb3e7cb43578bce687aa3ffca5a14,"@java.lang.Override public void pendingListenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, ""PendingIntent cannot be null.""); if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } ensureValidNetworkSpecifier(networkCapabilities); final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); restrictRequestUidsForCaller(nc); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log((""pendingListenForNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); }",4ac253997d539309d1645afebac5a2f3b9bf06b8,2018-03-02 11:52:13,3
622726,services_core_java_com_android_server_ConnectivityService.java,"@java.lang.Override public android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, ""PendingIntent cannot be null.""); networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); ensureRequestableCapabilities(networkCapabilities); ensureValidNetworkSpecifier(networkCapabilities); networkCapabilities.setSingleUid(android.os.Binder.getCallingUid()); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.REQUEST); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log((""pendingRequest for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST_WITH_INTENT, nri)); return networkRequest; }",9283e746953e37bc6a8200f2f697e254ac4e856b,"@java.lang.Override public android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, ""PendingIntent cannot be null.""); networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); ensureRequestableCapabilities(networkCapabilities); ensureValidNetworkSpecifier(networkCapabilities); restrictRequestUidsToSetAccessibleToCaller(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.REQUEST); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log((""pendingRequest for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST_WITH_INTENT, nri)); return networkRequest; }",ec17ba38e400d43668de8086feabf637d46910ba,"@java.lang.Override public android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, ""PendingIntent cannot be null.""); networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); ensureRequestableCapabilities(networkCapabilities); ensureValidNetworkSpecifier(networkCapabilities); restrictRequestUidsForCaller(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.REQUEST); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log((""pendingRequest for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST_WITH_INTENT, nri)); return networkRequest; }",efcd87b09a1f561302dd7dae1f5c715f45cd5b50,2018-03-02 11:52:13,3
622726,services_core_java_com_android_server_ConnectivityService.java,"private void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType != (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkCapabilities(networkAgent.networkCapabilities)); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = networkCapabilitiesWithoutUids(networkAgent.networkCapabilities); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log((((""sending notification "" + notification) + "" for "") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge((""RemoteException caught trying to send a callback msg for "" + (nri.request))); } }",1e5a1d8a7b9980753fd0c6cc72b76188ce37f30f,"private void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType != (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkCapabilities(networkAgent.networkCapabilities)); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = networkCapabilitiesWithoutUidsUnlessAllowed(networkAgent.networkCapabilities); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log((((""sending notification "" + notification) + "" for "") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge((""RemoteException caught trying to send a callback msg for "" + (nri.request))); } }",4bb7a86dced4cc462669600616353a010964080d,"private void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType != (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkCapabilities(networkAgent.networkCapabilities)); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = networkCapabilitiesWithoutUidsUnlessAllowed(networkAgent.networkCapabilities, nri.mPid, nri.mUid); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log((((""sending notification "" + notification) + "" for "") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge((""RemoteException caught trying to send a callback msg for "" + (nri.request))); } }",e9a6bcd20b6aafa249f15f95887bcd70e2a22a9f,2018-03-02 11:52:13,3
622726,services_core_java_com_android_server_ConnectivityService.java,"@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null) ? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); networkCapabilities.removeCapability(com.android.server.NET_CAPABILITY_NOT_VPN); enforceAccessPermission(); } else { networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureRequestableCapabilities(networkCapabilities); networkCapabilities.setSingleUid(android.os.Binder.getCallingUid()); if (timeoutMs < 0) { throw new java.lang.IllegalArgumentException(""Bad timeout specified""); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log((""requestNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri)); if (timeoutMs > 0) { mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs); } return networkRequest; }",98aa6a9fd7218a1c3c893ea2705dc64b85b4e8d1,"@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null) ? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); networkCapabilities.removeCapability(com.android.server.NET_CAPABILITY_NOT_VPN); enforceAccessPermission(); } else { networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureRequestableCapabilities(networkCapabilities); restrictRequestUidsToSetAccessibleToCaller(networkCapabilities); if (timeoutMs < 0) { throw new java.lang.IllegalArgumentException(""Bad timeout specified""); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log((""requestNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri)); if (timeoutMs > 0) { mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs); } return networkRequest; }",938d625e2bfeb3226af88ba9dd821561687b7d7b,"@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null) ? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); networkCapabilities.removeCapability(com.android.server.NET_CAPABILITY_NOT_VPN); enforceAccessPermission(); } else { networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureRequestableCapabilities(networkCapabilities); restrictRequestUidsForCaller(networkCapabilities); if (timeoutMs < 0) { throw new java.lang.IllegalArgumentException(""Bad timeout specified""); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log((""requestNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri)); if (timeoutMs > 0) { mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs); } return networkRequest; }",643e779ed2d8fa3840ad789a2c80d139e4a7173b,2018-03-02 11:52:13,3
622726,services_core_java_com_android_server_ConnectivityService.java,private android.net.NetworkCapabilities networkCapabilitiesWithoutUids(android.net.NetworkCapabilities nc) { return new android.net.NetworkCapabilities(nc).setUids(null); },fa38def5ed25a07c0f61f15b44d74b6e6a0fffb6,private android.net.NetworkCapabilities networkCapabilitiesWithoutUidsUnlessAllowed(android.net.NetworkCapabilities nc) { if (checkSettingsPermission()) return nc; return new android.net.NetworkCapabilities(nc).setUids(null); },8c917a99bcfe1d9c9d954db869221ced909a1b4e,"private android.net.NetworkCapabilities networkCapabilitiesWithoutUidsUnlessAllowed(android.net.NetworkCapabilities nc, int callerPid, int callerUid) { if (checkSettingsPermission(callerPid, callerUid)) return new android.net.NetworkCapabilities(nc); return new android.net.NetworkCapabilities(nc).setUids(null); }",40bc0ae7692e0df2cae8e49489d6bfb0f5891b25,2018-03-02 11:52:13,3
622726,services_core_java_com_android_server_ConnectivityService.java,private android.net.NetworkCapabilities getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo nai) { if (nai != null) { synchronized(nai) { if ((nai.networkCapabilities) != null) { return networkCapabilitiesWithoutUids(nai.networkCapabilities); } } } return null; },aa50ad93bad4e2ba8058a32750697e4679f43dcb,private android.net.NetworkCapabilities getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo nai) { if (nai != null) { synchronized(nai) { if ((nai.networkCapabilities) != null) { return networkCapabilitiesWithoutUidsUnlessAllowed(nai.networkCapabilities); } } } return null; },4e7408302e584b3923c1a73ee49bbf243a8c3e29,"private android.net.NetworkCapabilities getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo nai) { if (nai != null) { synchronized(nai) { if ((nai.networkCapabilities) != null) { return networkCapabilitiesWithoutUidsUnlessAllowed(nai.networkCapabilities, android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid()); } } } return null; }",35fe5e0ba08d88de5fcc283f4e809b01c40ae38d,2018-03-02 11:52:13,3
622726,services_core_java_com_android_server_ConnectivityService.java,"@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); nc.setSingleUid(android.os.Binder.getCallingUid()); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log((""listenForNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }",9a34321242c52bf9b372d2e9fc784013f58c90c6,"@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); restrictRequestUidsToSetAccessibleToCaller(nc); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log((""listenForNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }",ef6d91e5758135984c3e72b600d576bff1bb8d3f,"@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); restrictRequestUidsForCaller(nc); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log((""listenForNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }",0de35b3b8b709ded9feed895fc5a8da4740244e6,2018-03-02 11:52:13,3
622726,services_core_java_com_android_server_ConnectivityService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private void restrictRequestUidsToSetAccessibleToCaller(android.net.NetworkCapabilities nc) { if (checkSettingsPermission()) { nc.setUids(new android.util.ArraySet<android.net.UidRange>()); } else { nc.setSingleUid(android.os.Binder.getCallingUid()); } },af43caca201f6d5e07ef3d6cfe94621af2594d6d,private void restrictRequestUidsForCaller(android.net.NetworkCapabilities nc) { if (!(checkSettingsPermission())) { nc.setSingleUid(android.os.Binder.getCallingUid()); } },88d43e06bf9397b9084297639542f7c6adc95053,2018-03-02 11:52:13,3
606338,core_java_android_net_NetworkCapabilities.java,public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineTransportTypes(nc); combineLinkBandwidths(nc); combineSpecifiers(nc); combineSignalStrength(nc); combineUids(nc); },9fe3fcc90adb3ef7954c3bb5cd214d7e8976bdae,public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineUnwantedNetCapabilities(nc); combineTransportTypes(nc); combineLinkBandwidths(nc); combineSpecifiers(nc); combineSignalStrength(nc); combineUids(nc); },72115f6fb4ade13c7d92d6f3a2b71bf3b768148e,public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineTransportTypes(nc); combineLinkBandwidths(nc); combineSpecifiers(nc); combineSignalStrength(nc); combineUids(nc); },9fe3fcc90adb3ef7954c3bb5cd214d7e8976bdae,2018-03-02 19:04:30,14
606338,core_java_android_net_NetworkCapabilities.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void checkCapabilityRange(@android.net.NetworkCapabilities.NetCapability int capability) { if ((capability < (android.net.NetworkCapabilities.MIN_NET_CAPABILITY)) || (capability > (android.net.NetworkCapabilities.MAX_NET_CAPABILITY))) { throw new java.lang.IllegalArgumentException(""NetworkCapability out of range""); } }",c263d8297733c3e6117bb91b2279f7c9f652ab2c,"public void setCapabilities(@android.net.NetworkCapabilities.NetCapability int[] capabilities, @android.net.NetworkCapabilities.NetCapability int[] unwantedCapabilities) { mNetworkCapabilities = com.android.internal.util.BitUtils.packBits(capabilities); mUnwantedNetworkCapabilities = com.android.internal.util.BitUtils.packBits(unwantedCapabilities); }",9f6a241337671ea8ac323b176c16423a05eb3096,2018-03-02 19:04:30,14
606338,core_java_android_net_NetworkCapabilities.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void addUnwantedCapability(@android.net.NetworkCapabilities.NetCapability int capability) { checkCapabilityRange(capability); mUnwantedNetworkCapabilities |= 1 << capability; removeCapability(capability); },2c01406ad1f13a67f5b85d0aaebf22e6cc0faf88,public void addUnwantedCapability(@android.net.NetworkCapabilities.NetCapability int capability) { android.net.NetworkCapabilities.checkValidCapability(capability); mUnwantedNetworkCapabilities |= 1 << capability; mNetworkCapabilities &= ~(1 << capability); },254d20bf752e0d2270c9d81b15b3305a57254815,2018-03-02 19:04:30,14
606338,core_java_android_net_NetworkCapabilities.java,@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return (((((equalsNetCapabilities(that)) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that))) && (equalsUids(that)); },6dd59d9a440b11f0ce43c43ee9dd406da9ee34ea,@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return ((((((equalsNetCapabilities(that)) && (equalsUnwantedNetCapabilities(that))) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that))) && (equalsUids(that)); },6b1af60cea40e8dacaf67fab5396ec9960bbf945,"private static void checkValidCapability(@android.net.NetworkCapabilities.NetCapability int capability) { com.android.internal.util.Preconditions.checkArgument(android.net.NetworkCapabilities.isValidCapability(capability), ((""NetworkCapability "" + capability) + ""out of range"")); }",fe9206dbd3ae2041e1783229de924bb7024f4893,2018-03-02 19:04:30,14
606338,core_java_android_net_NetworkCapabilities.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void removeUnwantedCapability(@android.net.NetworkCapabilities.NetCapability int capability) { checkCapabilityRange(capability); mUnwantedNetworkCapabilities &= ~(1 << capability); },124032277a2c8ff97ae937cdac428633b1eb8e57,private static boolean isValidCapability(@android.net.NetworkCapabilities.NetCapability int capability) { return (capability >= (android.net.NetworkCapabilities.MIN_NET_CAPABILITY)) && (capability <= (android.net.NetworkCapabilities.MAX_NET_CAPABILITY)); },47ba8c33dd1ac5d7926946ad60d9f02ec6760b1d,2018-03-02 19:04:30,14
606338,core_java_android_net_NetworkCapabilities.java,"private boolean satisfiedByNetCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { long networkCapabilities = this.mNetworkCapabilities; if (onlyImmutable) { networkCapabilities = networkCapabilities & (~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES)); } return ((nc.mNetworkCapabilities) & networkCapabilities) == networkCapabilities; }",b88805c6964f1ac315ca6edcb3434b87d14f2980,"private boolean satisfiedByNetCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { long requestedCapabilities = mNetworkCapabilities; long requestedUnwantedCapabilities = mUnwantedNetworkCapabilities; long providedCapabilities = nc.mNetworkCapabilities; if (onlyImmutable) { requestedCapabilities &= ~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES); requestedUnwantedCapabilities &= ~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES); providedCapabilities &= ~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES); } return ((providedCapabilities & requestedCapabilities) == requestedCapabilities) && ((requestedUnwantedCapabilities & providedCapabilities) == 0); }",a3d602a0ef624c6a02ff518d8adfcbb2135a5229,"private boolean satisfiedByNetCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { long requestedCapabilities = mNetworkCapabilities; long requestedUnwantedCapabilities = mUnwantedNetworkCapabilities; long providedCapabilities = nc.mNetworkCapabilities; if (onlyImmutable) { requestedCapabilities &= ~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES); requestedUnwantedCapabilities &= ~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES); } return ((providedCapabilities & requestedCapabilities) == requestedCapabilities) && ((requestedUnwantedCapabilities & providedCapabilities) == 0); }",ca9abb8f828ad7b0d8d5ab4628dc9a4463825801,2018-03-02 19:04:30,14
606338,core_java_android_net_NetworkCapabilities.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private void combineUnwantedNetCapabilities(android.net.NetworkCapabilities nc) { this.mUnwantedNetworkCapabilities |= nc.mUnwantedNetworkCapabilities; },e0e9783089b13e04d7402c579a832d0c1520b808,@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return (((((equalsNetCapabilities(that)) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that))) && (equalsUids(that)); },6dd59d9a440b11f0ce43c43ee9dd406da9ee34ea,2018-03-02 19:04:30,14
606338,core_java_android_net_NetworkCapabilities.java,"public android.net.NetworkCapabilities removeCapability(@android.net.NetworkCapabilities.NetCapability int capability) { if ((capability < (android.net.NetworkCapabilities.MIN_NET_CAPABILITY)) || (capability > (android.net.NetworkCapabilities.MAX_NET_CAPABILITY))) { throw new java.lang.IllegalArgumentException(""NetworkCapability out of range""); } mNetworkCapabilities &= ~(1 << capability); return this; }",a3994676c064df8154aa825731c568717fb09e08,public android.net.NetworkCapabilities removeCapability(@android.net.NetworkCapabilities.NetCapability int capability) { checkCapabilityRange(capability); mNetworkCapabilities &= ~(1 << capability); return this; },958a70cf193f4a5bf5a8823349a4c0a0b95f9e65,public android.net.NetworkCapabilities removeCapability(@android.net.NetworkCapabilities.NetCapability int capability) { android.net.NetworkCapabilities.checkValidCapability(capability); final long mask = ~(1 << capability); mNetworkCapabilities &= mask; mUnwantedNetworkCapabilities &= mask; return this; },2eaa412592ec07395a3b4a7bdf4319ed9441a6ff,2018-03-02 19:04:30,14
606338,core_java_android_net_NetworkCapabilities.java,"public android.net.NetworkCapabilities addCapability(@android.net.NetworkCapabilities.NetCapability int capability) { if ((capability < (android.net.NetworkCapabilities.MIN_NET_CAPABILITY)) || (capability > (android.net.NetworkCapabilities.MAX_NET_CAPABILITY))) { throw new java.lang.IllegalArgumentException(""NetworkCapability out of range""); } mNetworkCapabilities |= 1 << capability; return this; }",d07ec0fcb7094e21816ad145f8839d0ff4c90405,public android.net.NetworkCapabilities addCapability(@android.net.NetworkCapabilities.NetCapability int capability) { checkCapabilityRange(capability); mNetworkCapabilities |= 1 << capability; removeUnwantedCapability(capability); return this; },3d23b37d116eae678e37d18d938229bf1ac10ffa,public android.net.NetworkCapabilities addCapability(@android.net.NetworkCapabilities.NetCapability int capability) { android.net.NetworkCapabilities.checkValidCapability(capability); mNetworkCapabilities |= 1 << capability; mUnwantedNetworkCapabilities &= ~(1 << capability); return this; },a055f5ce8dcc8c7a2a40b04cd112f586c8fafea7,2018-03-02 19:04:30,14
606338,tests_net_java_android_net_NetworkCapabilitiesTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testUnwantedCapabilities() { android.net.NetworkCapabilities network = new android.net.NetworkCapabilities(); android.net.NetworkCapabilities request = new android.net.NetworkCapabilities(); assertTrue((((""Request: "" + request) + "", Network:"") + network), request.satisfiedByNetworkCapabilities(network)); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED); assertTrue(request.satisfiedByNetworkCapabilities(network)); assertTrue(network.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertFalse(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.satisfiedByNetworkCapabilities(network)); network.removeCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.satisfiedByNetworkCapabilities(network)); request.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertFalse(request.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.satisfiedByNetworkCapabilities(network)); network.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.satisfiedByNetworkCapabilities(network)); }",f7cdcc3db49f50432aeeb443460394673577e3a2,"@org.junit.Test public void testUnwantedCapabilities() { android.net.NetworkCapabilities network = new android.net.NetworkCapabilities(); android.net.NetworkCapabilities request = new android.net.NetworkCapabilities(); assertTrue((((""Request: "" + request) + "", Network:"") + network), request.satisfiedByNetworkCapabilities(network)); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED); assertTrue(request.satisfiedByNetworkCapabilities(network)); assertArrayEquals(new int[]{ android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED }, request.getUnwantedCapabilities()); assertTrue(network.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.satisfiedByNetworkCapabilities(network)); network.removeCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.satisfiedByNetworkCapabilities(network)); request.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.satisfiedByNetworkCapabilities(network)); network.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.satisfiedByNetworkCapabilities(network)); }",aec24870e1782a1cfd1c19818cb61ee2a523a366,2018-03-02 19:04:30,14
606338,core_java_android_net_NetworkCapabilities.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean equalsUnwantedNetCapabilities(android.net.NetworkCapabilities nc) { return (nc.mUnwantedNetworkCapabilities) == (this.mUnwantedNetworkCapabilities); },252856bd1fedd9beaead6c15f1501fa0733b09ff,"public static void appendStringRepresentationOfBitMaskToStringBuilder(java.lang.StringBuilder sb, long bitMask, android.net.NetworkCapabilities.NameOf nameFetcher, java.lang.String separator) { int bitPos = 0; boolean firstElementAdded = false; while (bitMask != 0) { if ((bitMask & 1) != 0) { if (firstElementAdded) { sb.append(separator); } else { firstElementAdded = true; } sb.append(nameFetcher.nameOf(bitPos)); } bitMask >>= 1; ++bitPos; } }",61deb0ff362b32d47f9779eaf829273a8ed9f246,2018-03-02 19:04:30,14
606338,core_java_android_net_NetworkCapabilities.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean hasUnwantedCapability(@android.net.NetworkCapabilities.NetCapability int capability) { if ((capability < (android.net.NetworkCapabilities.MIN_NET_CAPABILITY)) || (capability > (android.net.NetworkCapabilities.MAX_NET_CAPABILITY))) { return false; } return ((mUnwantedNetworkCapabilities) & (1 << capability)) != 0; },8f350cf5e44a8de8d5f4b1922c23e1cf9c0fc682,public boolean hasUnwantedCapability(@android.net.NetworkCapabilities.NetCapability int capability) { return (android.net.NetworkCapabilities.isValidCapability(capability)) && (((mUnwantedNetworkCapabilities) & (1 << capability)) != 0); },33045507acc5a2e5cf54837a440996963c9fd420,2018-03-02 19:04:30,14
606338,core_java_android_net_NetworkCapabilities.java,public void setCapabilities(@android.net.NetworkCapabilities.NetCapability int[] capabilities) { mNetworkCapabilities = com.android.internal.util.BitUtils.packBits(capabilities); },65174b999dc0b9f9e06ef24de759bdee17df6e89,public void setCapabilities(@android.net.NetworkCapabilities.NetCapability int[] capabilities) { mNetworkCapabilities = com.android.internal.util.BitUtils.packBits(capabilities); mUnwantedNetworkCapabilities &= ~((mNetworkCapabilities) & (mUnwantedNetworkCapabilities)); },977176d3dd11df3f884e065ecfc00ca0209dce23,"@java.lang.Deprecated public void setCapabilities(@android.net.NetworkCapabilities.NetCapability int[] capabilities) { setCapabilities(capabilities, new int[]{ }); }",ab878c49451f46e45f8d8fdb7f662e0daba35439,2018-03-02 19:04:30,14
611569,src_java_com_android_internal_telephony_LinkCapacityEstimate.java,,,"@java.lang.Override public java.lang.String toString() { return new java.lang.StringBuilder().append(""{downlinkBandwidth="").append(downlinkBandwidth).append("", uplinkBandwidth="").append(uplinkBandwidth).append("", confidence="").append(confidence).append("", status="").append(status).toString(); }",a9da388612ae9e9b243d0c20a2e6c2bcab0e816b,"@java.lang.Override public java.lang.String toString() { return new java.lang.StringBuilder().append(""{downlinkCapacityKbps="").append(downlinkCapacityKbps).append("", uplinkCapacityKbps="").append(uplinkCapacityKbps).append("", confidence="").append(confidence).append("", status="").append(status).toString(); }",b4e46d9293e1bdc742bb52ea9cd84cf7002567be,2018-03-03 02:51:50,8
628219,src_java_com_android_internal_telephony_RIL.java,"private static void writeToParcelForCdma(android.os.Parcel p, int ni, int si, int bsi, int lon, int lat, java.lang.String al, java.lang.String as, int dbm, int ecio, int eDbm, int eEcio, int eSnr) { p.writeInt(CellIdentity.TYPE_CDMA); p.writeString(null); p.writeString(null); p.writeInt(ni); p.writeInt(si); p.writeInt(bsi); p.writeInt(lon); p.writeInt(lat); p.writeString(al); p.writeString(as); p.writeInt(dbm); p.writeInt(ecio); p.writeInt(eDbm); p.writeInt(eEcio); p.writeInt(eSnr); }",11416e4207a788e4a6b95e82bfdae1083997e871,"private static void writeToParcelForCdma(android.os.Parcel p, int ni, int si, int bsi, int lon, int lat, java.lang.String al, java.lang.String as, int dbm, int ecio, int eDbm, int eEcio, int eSnr) { new android.telephony.CellInfoCdma(new android.telephony.CellIdentityCdma(ni, si, bsi, lon, lat, al, as), new android.telephony.CellSignalStrengthCdma(dbm, ecio, eDbm, eEcio, eSnr)).writeToParcel(p, 0); }",f96482d3ba092a58b09125f0138dbc2b6af054e4,"private static void writeToParcelForCdma(android.os.Parcel p, int ni, int si, int bsi, int lon, int lat, java.lang.String al, java.lang.String as, int dbm, int ecio, int eDbm, int eEcio, int eSnr) { new android.telephony.CellIdentityCdma(ni, si, bsi, lon, lat, al, as).writeToParcel(p, 0); new android.telephony.CellSignalStrengthCdma(dbm, ecio, eDbm, eEcio, eSnr).writeToParcel(p, 0); }",d4d3d767384aeba850dc85a0e6d603f9f4f8579e,2018-03-03 03:14:20,2
540428,src_com_android_stk_StkAppService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void registerBroadcastReceiver() { if ((mBroadcastReceiver) == null) { mBroadcastReceiver = new android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (Intent.ACTION_LOCALE_CHANGED.equals(intent.getAction())) { android.os.Message message = mServiceHandler.obtainMessage(); message.arg1 = com.android.stk.StkAppService.OP_LOCALE_CHANGED; mServiceHandler.sendMessage(message); } } }; registerReceiver(mBroadcastReceiver, new android.content.IntentFilter(android.content.Intent.ACTION_LOCALE_CHANGED)); } }",a87803f6daee6d5e720e6f8f3cbb5cffe97a2982,"private synchronized void registerLocaleChangeReceiver() { if ((mLocaleChangeReceiver) == null) { mLocaleChangeReceiver = new android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (Intent.ACTION_LOCALE_CHANGED.equals(intent.getAction())) { android.os.Message message = mServiceHandler.obtainMessage(); message.arg1 = com.android.stk.StkAppService.OP_LOCALE_CHANGED; mServiceHandler.sendMessage(message); } } }; registerReceiver(mLocaleChangeReceiver, new android.content.IntentFilter(android.content.Intent.ACTION_LOCALE_CHANGED)); } }",1d0ccc57a283288359ed1c9c5d20f9e0188f3fb5,2018-03-05 17:57:32,8
540428,src_com_android_stk_StkAppService.java,"@java.lang.Override public void onDestroy() { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ""onDestroy()""); unregisterProcessObserver(); com.android.stk.StkAppService.sInstance = null; waitForLooper(); mServiceLooper.quit(); }",cee85f73b275cff6d8ddb14a7ecb3f8427fc3489,"@java.lang.Override public void onDestroy() { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ""onDestroy()""); unregisterProcessObserver(); unregisterBroadcastReceiver(); com.android.stk.StkAppService.sInstance = null; waitForLooper(); mServiceLooper.quit(); }",beb30242bd870e18faa68110e02606c894b2e8a1,"@java.lang.Override public void onDestroy() { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ""onDestroy()""); unregisterProcessObserver(); unregisterLocaleChangeReceiver(); com.android.stk.StkAppService.sInstance = null; waitForLooper(); mServiceLooper.quit(); }",48c139d9887738032148acff511685109f71fa69,2018-03-05 17:57:32,8
540428,src_com_android_stk_StkAppService.java,"private void unregisterEvent(int event, int slotId) { switch (event) { case IDLE_SCREEN_AVAILABLE_EVENT : unregisterProcessObserver(AppInterface.CommandType.SET_UP_EVENT_LIST, slotId); break; case LANGUAGE_SELECTION_EVENT : default : break; } }",fcc44154872ccc92dcb0d1ab637c843345992b6e,"private void unregisterEvent(int event, int slotId) { switch (event) { case IDLE_SCREEN_AVAILABLE_EVENT : unregisterProcessObserver(AppInterface.CommandType.SET_UP_EVENT_LIST, slotId); break; case LANGUAGE_SELECTION_EVENT : unregisterBroadcastReceiver(); break; default : break; } }",95f0e242237d9c465a0aedf737259645088280e9,"private void unregisterEvent(int event, int slotId) { for (int slot = com.android.internal.telephony.PhoneConstants.SIM_ID_1; slot < (mSimCount); slot++) { if (slot != slotId) { if ((mStkContext[slot].mSetupEventListSettings) != null) { if (findEvent(event, mStkContext[slot].mSetupEventListSettings.eventList)) { return; } } } } switch (event) { case IDLE_SCREEN_AVAILABLE_EVENT : unregisterProcessObserver(AppInterface.CommandType.SET_UP_EVENT_LIST, slotId); break; case LANGUAGE_SELECTION_EVENT : unregisterLocaleChangeReceiver(); break; default : break; } }",589682b19d39a5ccc3cb897440c945c496514770,2018-03-05 17:57:32,8
540428,src_com_android_stk_StkAppService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private void unregisterBroadcastReceiver() { if ((mBroadcastReceiver) != null) { unregisterReceiver(mBroadcastReceiver); mBroadcastReceiver = null; } },908d61f3a7380973afa5474ac3c93c4e2aeb961c,private synchronized void unregisterLocaleChangeReceiver() { if ((mLocaleChangeReceiver) != null) { unregisterReceiver(mLocaleChangeReceiver); mLocaleChangeReceiver = null; } },275bee0a0e272df8c69f8f8b9b8b2d412c40abae,2018-03-05 17:57:32,8
540428,src_com_android_stk_StkAppService.java,private void registerEvents(int slotId) { if ((mStkContext[slotId].mSetupEventListSettings) == null) { return; } for (int event : mStkContext[slotId].mSetupEventListSettings.eventList) { switch (event) { case IDLE_SCREEN_AVAILABLE_EVENT : registerProcessObserver(); break; case LANGUAGE_SELECTION_EVENT : default : break; } } },87464308975ffd598e8e3ecf418c791a47b5d51d,private void registerEvents(int slotId) { if ((mStkContext[slotId].mSetupEventListSettings) == null) { return; } for (int event : mStkContext[slotId].mSetupEventListSettings.eventList) { switch (event) { case IDLE_SCREEN_AVAILABLE_EVENT : registerProcessObserver(); break; case LANGUAGE_SELECTION_EVENT : registerBroadcastReceiver(); break; default : break; } } },cd7a6a37caee8ed6ef5e149dd8e82aeb97dd4915,private void registerEvents(int slotId) { if ((mStkContext[slotId].mSetupEventListSettings) == null) { return; } for (int event : mStkContext[slotId].mSetupEventListSettings.eventList) { switch (event) { case IDLE_SCREEN_AVAILABLE_EVENT : registerProcessObserver(); break; case LANGUAGE_SELECTION_EVENT : registerLocaleChangeReceiver(); break; default : break; } } },631e5139b95bc636708dfb8da089356f28a95f5d,2018-03-05 17:57:32,8
615866,src_apksigner_java_com_android_apksigner_ApkSignerTool.java,"public static void main(java.lang.String[] params) throws java.lang.Exception { if ((((params.length) == 0) || (""--help"".equals(params[0]))) || (""-h"".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if (""--version"".equals(params[0])) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } java.lang.String cmd = params[0]; try { if (""sign"".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""verify"".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""help"".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if (""version"".equals(cmd)) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } else { throw new com.android.apksigner.ApkSignerTool.ParameterException(((""Unsupported command: "" + cmd) + "". See --help for supported commands"")); } } catch (com.android.apksigner.ApkSignerTool.ParameterException | com.android.apksigner.OptionsParser e) { java.lang.System.err.println(e.getMessage()); java.lang.System.exit(1); return; } }",9de6484a9c03e3c7a3cf24ce1db7d5923d1e2bde,"public static void main(java.lang.String[] params) throws java.lang.Exception { if ((((params.length) == 0) || (""--help"".equals(params[0]))) || (""-h"".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if (""--version"".equals(params[0])) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } java.lang.String cmd = params[0]; try { if (""sign"".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""verify"".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""rotate"".equals(cmd)) { com.android.apksigner.ApkSignerTool.rotate(java.util.Arrays.copyOfRange(params, 1, params.length)); } else if (""help"".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if (""version"".equals(cmd)) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } else { throw new com.android.apksigner.ApkSignerTool.ParameterException(((""Unsupported command: "" + cmd) + "". See --help for supported commands"")); } } catch (com.android.apksigner.ApkSignerTool.ParameterException | com.android.apksigner.OptionsParser e) { java.lang.System.err.println(e.getMessage()); java.lang.System.exit(1); return; } }",17d807a77cca14992c25efa5e2a4da5947dc867e,"public static void main(java.lang.String[] params) throws java.lang.Exception { if ((((params.length) == 0) || (""--help"".equals(params[0]))) || (""-h"".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if (""--version"".equals(params[0])) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } java.lang.String cmd = params[0]; try { if (""sign"".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""verify"".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""rotate"".equals(cmd)) { com.android.apksigner.ApkSignerTool.rotate(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""help"".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if (""version"".equals(cmd)) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } else { throw new com.android.apksigner.ApkSignerTool.ParameterException(((""Unsupported command: "" + cmd) + "". See --help for supported commands"")); } } catch (com.android.apksigner.ApkSignerTool.ParameterException | com.android.apksigner.OptionsParser e) { java.lang.System.err.println(e.getMessage()); java.lang.System.exit(1); return; } }",98aafc713d46dfbbd4fd6834459a6a077142e660,2018-03-05 18:12:26,8
615866,src_apksigner_java_com_android_apksigner_OptionsParser.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.lang.String putOption() { mIndex = mPutBackIndex; mLastOptionOriginalForm = mPutBackLastOptionOriginalForm; mLastOptionValue = mPutBackLastOptionValue; },9c7f30d8fc7943029f7401e1fba76d786982fbd8,public void putOption() { mIndex = mPutBackIndex; mLastOptionOriginalForm = mPutBackLastOptionOriginalForm; mLastOptionValue = mPutBackLastOptionValue; },b16e0a9a138fa99dd6efa352761706e92b9c25a3,2018-03-05 18:12:26,8
629942,src_java_com_android_internal_telephony_CarrierIdentifier.java,"private com.android.internal.telephony.CarrierIdentifier.CarrierMatchingRule makeCarrierMatchingRule(android.database.Cursor cursor) { return new com.android.internal.telephony.CarrierIdentifier.CarrierMatchingRule(cursor.getString(cursor.getColumnIndexOrThrow(CarrierIdentification.All.MCCMNC)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierIdentification.All.IMSI_PREFIX_XPATTERN)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierIdentification.All.ICCID_PREFIX)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierIdentification.All.GID1)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierIdentification.All.GID2)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierIdentification.All.PLMN)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierIdentification.All.SPN)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierIdentification.All.APN)), cursor.getInt(cursor.getColumnIndexOrThrow(CarrierIdentification.CID)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierIdentification.NAME))); }",69286f2f5faf34616b5fb5bcfb809b0da382e5a7,"private com.android.internal.telephony.CarrierIdentifier.CarrierMatchingRule makeCarrierMatchingRule(android.database.Cursor cursor) { return new com.android.internal.telephony.CarrierIdentifier.CarrierMatchingRule(cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.MCCMNC)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.IMSI_PREFIX_XPATTERN)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.ICCID_PREFIX)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.GID1)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.GID2)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.PLMN)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.SPN)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.APN)), cursor.getInt(cursor.getColumnIndexOrThrow(CarrierId.CARRIER_ID)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.NAME))); }",add639c2e3c0ec74de0441f54894973581c75721,"private com.android.internal.telephony.CarrierIdentifier.CarrierMatchingRule makeCarrierMatchingRule(android.database.Cursor cursor) { return new com.android.internal.telephony.CarrierIdentifier.CarrierMatchingRule(cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.MCCMNC)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.IMSI_PREFIX_XPATTERN)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.ICCID_PREFIX)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.GID1)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.GID2)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.PLMN)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.SPN)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.APN)), cursor.getInt(cursor.getColumnIndexOrThrow(CarrierId.CARRIER_ID)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.CARRIER_NAME))); }",514460157ed3a2efdfc7856487ef3863e56cf162,2018-03-05 22:59:19,2
630005,src_com_android_providers_telephony_CarrierIdProvider.java,"private int updateDatabaseFromPb(android.database.sqlite.SQLiteDatabase db) { android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ""update database from pb file""); int rows = 0; com.android.internal.telephony.nano.CarrierIdProto.CarrierList carrierList = getUpdateCarrierList(); if (carrierList == null) return rows; android.content.ContentValues cv; java.util.List<android.content.ContentValues> cvs; try { db.beginTransaction(); db.delete(com.android.providers.telephony.CarrierIdProvider.CARRIER_ID_TABLE, null, null); for (com.android.internal.telephony.nano.CarrierIdProto.CarrierId id : carrierList.carrierId) { for (com.android.internal.telephony.nano.CarrierIdProto.CarrierAttribute attr : id.carrierAttribute) { cv = new android.content.ContentValues(); cv.put(CarrierIdentification.CID, id.canonicalId); cv.put(CarrierIdentification.NAME, id.carrierName); cvs = new java.util.ArrayList(); convertCarrierAttrToContentValues(cv, cvs, attr, 0); for (android.content.ContentValues contentVal : cvs) { if ((db.insertWithOnConflict(com.android.providers.telephony.CarrierIdProvider.CARRIER_ID_TABLE, null, contentVal, SQLiteDatabase.CONFLICT_IGNORE)) > 0) { rows++; } else { android.util.Log.e(com.android.providers.telephony.CarrierIdProvider.TAG, (((""updateDatabaseFromPB insertion failure, row: "" + rows) + ""carrier id: "") + (id.canonicalId))); } } } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""update database from pb. inserted rows = "" + rows)); if (rows > 0) { getContext().getContentResolver().notifyChange(CarrierIdentification.All.CONTENT_URI, null); } setAppliedVersion(carrierList.version); db.setTransactionSuccessful(); } finally { db.endTransaction(); } return rows; }",bbffd08e304bf8038297f53c66e5779a4ad43c38,"private int updateDatabaseFromPb(android.database.sqlite.SQLiteDatabase db) { android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ""update database from pb file""); int rows = 0; com.android.internal.telephony.nano.CarrierIdProto.CarrierList carrierList = getUpdateCarrierList(); if (carrierList == null) return rows; android.content.ContentValues cv; java.util.List<android.content.ContentValues> cvs; try { db.beginTransaction(); db.delete(com.android.providers.telephony.CarrierIdProvider.CARRIER_ID_TABLE, null, null); for (com.android.internal.telephony.nano.CarrierIdProto.CarrierId id : carrierList.carrierId) { for (com.android.internal.telephony.nano.CarrierIdProto.CarrierAttribute attr : id.carrierAttribute) { cv = new android.content.ContentValues(); cv.put(CarrierId.CARRIER_ID, id.canonicalId); cv.put(CarrierId.NAME, id.carrierName); cvs = new java.util.ArrayList(); convertCarrierAttrToContentValues(cv, cvs, attr, 0); for (android.content.ContentValues contentVal : cvs) { if ((db.insertWithOnConflict(com.android.providers.telephony.CarrierIdProvider.CARRIER_ID_TABLE, null, contentVal, SQLiteDatabase.CONFLICT_IGNORE)) > 0) { rows++; } else { android.util.Log.e(com.android.providers.telephony.CarrierIdProvider.TAG, (((""updateDatabaseFromPB insertion failure, row: "" + rows) + ""carrier id: "") + (id.canonicalId))); } } } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""update database from pb. inserted rows = "" + rows)); if (rows > 0) { getContext().getContentResolver().notifyChange(CarrierId.All.CONTENT_URI, null); } setAppliedVersion(carrierList.version); db.setTransactionSuccessful(); } finally { db.endTransaction(); } return rows; }",21757f5a55d1f378770f8bb95e42e1d8a87cb7ec,"private int updateDatabaseFromPb(android.database.sqlite.SQLiteDatabase db) { android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ""update database from pb file""); int rows = 0; com.android.internal.telephony.nano.CarrierIdProto.CarrierList carrierList = getUpdateCarrierList(); if (carrierList == null) return rows; android.content.ContentValues cv; java.util.List<android.content.ContentValues> cvs; try { db.beginTransaction(); db.delete(com.android.providers.telephony.CarrierIdProvider.CARRIER_ID_TABLE, null, null); for (com.android.internal.telephony.nano.CarrierIdProto.CarrierId id : carrierList.carrierId) { for (com.android.internal.telephony.nano.CarrierIdProto.CarrierAttribute attr : id.carrierAttribute) { cv = new android.content.ContentValues(); cv.put(CarrierId.CARRIER_ID, id.canonicalId); cv.put(CarrierId.CARRIER_NAME, id.carrierName); cvs = new java.util.ArrayList(); convertCarrierAttrToContentValues(cv, cvs, attr, 0); for (android.content.ContentValues contentVal : cvs) { if ((db.insertWithOnConflict(com.android.providers.telephony.CarrierIdProvider.CARRIER_ID_TABLE, null, contentVal, SQLiteDatabase.CONFLICT_IGNORE)) > 0) { rows++; } else { android.util.Log.e(com.android.providers.telephony.CarrierIdProvider.TAG, (((""updateDatabaseFromPB insertion failure, row: "" + rows) + ""carrier id: "") + (id.canonicalId))); } } } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""update database from pb. inserted rows = "" + rows)); if (rows > 0) { getContext().getContentResolver().notifyChange(CarrierId.All.CONTENT_URI, null); } setAppliedVersion(carrierList.version); db.setTransactionSuccessful(); } finally { db.endTransaction(); } return rows; }",6bcd9f80edf554e37ab9e3c045e0330d0560e309,2018-03-05 22:59:19,2
630005,src_com_android_providers_telephony_CarrierIdProvider.java,"@com.android.internal.annotations.VisibleForTesting public static java.lang.String getStringForCarrierIdTableCreation(java.lang.String tableName) { return ((((((((((((((((((((((((""CREATE TABLE "" + tableName) + ""(_id INTEGER PRIMARY KEY,"") + (CarrierIdentification.All.MCCMNC)) + "" TEXT NOT NULL,"") + (CarrierIdentification.All.GID1)) + "" TEXT,"") + (CarrierIdentification.All.GID2)) + "" TEXT,"") + (CarrierIdentification.All.PLMN)) + "" TEXT,"") + (CarrierIdentification.All.IMSI_PREFIX_XPATTERN)) + "" TEXT,"") + (CarrierIdentification.All.SPN)) + "" TEXT,"") + (CarrierIdentification.All.APN)) + "" TEXT,"") + (CarrierIdentification.All.ICCID_PREFIX)) + "" TEXT,"") + (android.provider.Telephony.CarrierIdentification.NAME)) + "" TEXT,"") + (android.provider.Telephony.CarrierIdentification.CID)) + "" INTEGER DEFAULT -1,"") + ""UNIQUE ("") + (android.text.TextUtils.join("", "", com.android.providers.telephony.CarrierIdProvider.CARRIERS_ID_UNIQUE_FIELDS))) + ""));""; }",0dedb2a8ce6f9769b355e0ae7433362b5f563562,"@com.android.internal.annotations.VisibleForTesting public static java.lang.String getStringForCarrierIdTableCreation(java.lang.String tableName) { return ((((((((((((((((((((((((""CREATE TABLE "" + tableName) + ""(_id INTEGER PRIMARY KEY,"") + (CarrierId.All.MCCMNC)) + "" TEXT NOT NULL,"") + (CarrierId.All.GID1)) + "" TEXT,"") + (CarrierId.All.GID2)) + "" TEXT,"") + (CarrierId.All.PLMN)) + "" TEXT,"") + (CarrierId.All.IMSI_PREFIX_XPATTERN)) + "" TEXT,"") + (CarrierId.All.SPN)) + "" TEXT,"") + (CarrierId.All.APN)) + "" TEXT,"") + (CarrierId.All.ICCID_PREFIX)) + "" TEXT,"") + (android.provider.Telephony.CarrierId.NAME)) + "" TEXT,"") + (android.provider.Telephony.CarrierId.CARRIER_ID)) + "" INTEGER DEFAULT -1,"") + ""UNIQUE ("") + (android.text.TextUtils.join("", "", com.android.providers.telephony.CarrierIdProvider.CARRIERS_ID_UNIQUE_FIELDS))) + ""));""; }",4a4aaeb2d52f36f0a1cc1d7125db24fe7d129c78,"@com.android.internal.annotations.VisibleForTesting public static java.lang.String getStringForCarrierIdTableCreation(java.lang.String tableName) { return ((((((((((((((((((((((((""CREATE TABLE "" + tableName) + ""(_id INTEGER PRIMARY KEY,"") + (CarrierId.All.MCCMNC)) + "" TEXT NOT NULL,"") + (CarrierId.All.GID1)) + "" TEXT,"") + (CarrierId.All.GID2)) + "" TEXT,"") + (CarrierId.All.PLMN)) + "" TEXT,"") + (CarrierId.All.IMSI_PREFIX_XPATTERN)) + "" TEXT,"") + (CarrierId.All.SPN)) + "" TEXT,"") + (CarrierId.All.APN)) + "" TEXT,"") + (CarrierId.All.ICCID_PREFIX)) + "" TEXT,"") + (android.provider.Telephony.CarrierId.CARRIER_NAME)) + "" TEXT,"") + (android.provider.Telephony.CarrierId.CARRIER_ID)) + "" INTEGER DEFAULT -1,"") + ""UNIQUE ("") + (android.text.TextUtils.join("", "", com.android.providers.telephony.CarrierIdProvider.CARRIERS_ID_UNIQUE_FIELDS))) + ""));""; }",951f777735c52e687f405b6b3d46d2d82c598ea2,2018-03-05 22:59:19,2
630005,src_com_android_providers_telephony_CarrierIdProvider.java,"private int updateCarrierIdForCurrentSubscription(android.net.Uri uri, android.content.ContentValues cv) { int subId; try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException((""invalid subid in provided uri "" + uri)); } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""updateCarrierIdForSubId: "" + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(com.android.internal.telephony.SubscriptionController.getInstance().isActiveSubId(subId))) { final java.util.List activeSubscriptions = java.util.Arrays.asList(com.android.internal.telephony.SubscriptionController.getInstance().getActiveSubIdList()); int count = 0; for (int subscription : mCurrentSubscriptionMap.keySet()) { if (!(activeSubscriptions.contains(subscription))) { count++; android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""updateCarrierIdForSubId: "" + subscription)); mCurrentSubscriptionMap.remove(subscription); getContext().getContentResolver().notifyChange(CarrierIdentification.CONTENT_URI, null); } } return count; } else { mCurrentSubscriptionMap.put(subId, new android.util.Pair(cv.getAsInteger(CarrierIdentification.CID), cv.getAsString(CarrierIdentification.NAME))); getContext().getContentResolver().notifyChange(CarrierIdentification.CONTENT_URI, null); return 1; } }",534e92779d5a2ce830b47318e69e1e756930b853,"private int updateCarrierIdForCurrentSubscription(android.net.Uri uri, android.content.ContentValues cv) { int subId; try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException((""invalid subid in provided uri "" + uri)); } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""updateCarrierIdForSubId: "" + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(com.android.internal.telephony.SubscriptionController.getInstance().isActiveSubId(subId))) { final java.util.List activeSubscriptions = java.util.Arrays.asList(com.android.internal.telephony.SubscriptionController.getInstance().getActiveSubIdList()); int count = 0; for (int subscription : mCurrentSubscriptionMap.keySet()) { if (!(activeSubscriptions.contains(subscription))) { count++; android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""updateCarrierIdForSubId: "" + subscription)); mCurrentSubscriptionMap.remove(subscription); getContext().getContentResolver().notifyChange(CarrierId.CONTENT_URI, null); } } return count; } else { mCurrentSubscriptionMap.put(subId, new android.util.Pair(cv.getAsInteger(CarrierId.CARRIER_ID), cv.getAsString(CarrierId.NAME))); getContext().getContentResolver().notifyChange(CarrierId.CONTENT_URI, null); return 1; } }",2618c6e602b664e1e0cd9e3715976b72faf8b70e,"private int updateCarrierIdForCurrentSubscription(android.net.Uri uri, android.content.ContentValues cv) { int subId; try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException((""invalid subid in provided uri "" + uri)); } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""updateCarrierIdForSubId: "" + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(com.android.internal.telephony.SubscriptionController.getInstance().isActiveSubId(subId))) { final java.util.List activeSubscriptions = java.util.Arrays.asList(com.android.internal.telephony.SubscriptionController.getInstance().getActiveSubIdList()); int count = 0; for (int subscription : mCurrentSubscriptionMap.keySet()) { if (!(activeSubscriptions.contains(subscription))) { count++; android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""updateCarrierIdForSubId: "" + subscription)); mCurrentSubscriptionMap.remove(subscription); getContext().getContentResolver().notifyChange(CarrierId.CONTENT_URI, null); } } return count; } else { mCurrentSubscriptionMap.put(subId, new android.util.Pair(cv.getAsInteger(CarrierId.CARRIER_ID), cv.getAsString(CarrierId.CARRIER_NAME))); getContext().getContentResolver().notifyChange(CarrierId.CONTENT_URI, null); return 1; } }",922585e7d1fce4bc43695b41082065a2627bd313,2018-03-05 22:59:19,2
630005,tests_src_com_android_providers_telephony_CarrierIdProviderTest.java,"private static android.content.ContentValues createCarrierInfoInternal() { android.content.ContentValues contentValues = new android.content.ContentValues(); contentValues.put(CarrierIdentification.All.MCCMNC, com.android.providers.telephony.CarrierIdProviderTest.dummy_mccmnc); contentValues.put(CarrierIdentification.All.GID1, com.android.providers.telephony.CarrierIdProviderTest.dummy_gid1); contentValues.put(CarrierIdentification.All.GID2, com.android.providers.telephony.CarrierIdProviderTest.dummy_gid2); contentValues.put(CarrierIdentification.All.PLMN, com.android.providers.telephony.CarrierIdProviderTest.dummy_plmn); contentValues.put(CarrierIdentification.All.IMSI_PREFIX_XPATTERN, com.android.providers.telephony.CarrierIdProviderTest.dummy_imsi_prefix); contentValues.put(CarrierIdentification.All.SPN, com.android.providers.telephony.CarrierIdProviderTest.dummy_spn); contentValues.put(CarrierIdentification.All.APN, com.android.providers.telephony.CarrierIdProviderTest.dummy_apn); contentValues.put(CarrierIdentification.All.ICCID_PREFIX, com.android.providers.telephony.CarrierIdProviderTest.dummy_iccid_prefix); contentValues.put(CarrierIdentification.NAME, com.android.providers.telephony.CarrierIdProviderTest.dummy_name); contentValues.put(CarrierIdentification.CID, com.android.providers.telephony.CarrierIdProviderTest.dummy_cid); return contentValues; }",a02f97064800b6c03164c5a871960cdcc425aef1,"private static android.content.ContentValues createCarrierInfoInternal() { android.content.ContentValues contentValues = new android.content.ContentValues(); contentValues.put(CarrierId.All.MCCMNC, com.android.providers.telephony.CarrierIdProviderTest.dummy_mccmnc); contentValues.put(CarrierId.All.GID1, com.android.providers.telephony.CarrierIdProviderTest.dummy_gid1); contentValues.put(CarrierId.All.GID2, com.android.providers.telephony.CarrierIdProviderTest.dummy_gid2); contentValues.put(CarrierId.All.PLMN, com.android.providers.telephony.CarrierIdProviderTest.dummy_plmn); contentValues.put(CarrierId.All.IMSI_PREFIX_XPATTERN, com.android.providers.telephony.CarrierIdProviderTest.dummy_imsi_prefix); contentValues.put(CarrierId.All.SPN, com.android.providers.telephony.CarrierIdProviderTest.dummy_spn); contentValues.put(CarrierId.All.APN, com.android.providers.telephony.CarrierIdProviderTest.dummy_apn); contentValues.put(CarrierId.All.ICCID_PREFIX, com.android.providers.telephony.CarrierIdProviderTest.dummy_iccid_prefix); contentValues.put(CarrierId.NAME, com.android.providers.telephony.CarrierIdProviderTest.dummy_name); contentValues.put(CarrierId.CARRIER_ID, com.android.providers.telephony.CarrierIdProviderTest.dummy_cid); return contentValues; }",bf4764ddffda4aea3b264a8eb0811a3aa5c047db,"private static android.content.ContentValues createCarrierInfoInternal() { android.content.ContentValues contentValues = new android.content.ContentValues(); contentValues.put(CarrierId.All.MCCMNC, com.android.providers.telephony.CarrierIdProviderTest.dummy_mccmnc); contentValues.put(CarrierId.All.GID1, com.android.providers.telephony.CarrierIdProviderTest.dummy_gid1); contentValues.put(CarrierId.All.GID2, com.android.providers.telephony.CarrierIdProviderTest.dummy_gid2); contentValues.put(CarrierId.All.PLMN, com.android.providers.telephony.CarrierIdProviderTest.dummy_plmn); contentValues.put(CarrierId.All.IMSI_PREFIX_XPATTERN, com.android.providers.telephony.CarrierIdProviderTest.dummy_imsi_prefix); contentValues.put(CarrierId.All.SPN, com.android.providers.telephony.CarrierIdProviderTest.dummy_spn); contentValues.put(CarrierId.All.APN, com.android.providers.telephony.CarrierIdProviderTest.dummy_apn); contentValues.put(CarrierId.All.ICCID_PREFIX, com.android.providers.telephony.CarrierIdProviderTest.dummy_iccid_prefix); contentValues.put(CarrierId.CARRIER_NAME, com.android.providers.telephony.CarrierIdProviderTest.dummy_name); contentValues.put(CarrierId.CARRIER_ID, com.android.providers.telephony.CarrierIdProviderTest.dummy_cid); return contentValues; }",7289bfa0751982ff035de4b3301a27500a231e4b,2018-03-05 22:59:19,2
630005,tests_src_com_android_providers_telephony_CarrierIdProviderTest.java,"@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testUpdateCurrentSubscription_WrongURI() { try { android.content.ContentValues cv = new android.content.ContentValues(); cv.put(CarrierIdentification.CID, com.android.providers.telephony.CarrierIdProviderTest.dummy_cid); cv.put(CarrierIdentification.NAME, com.android.providers.telephony.CarrierIdProviderTest.dummy_name); doReturn(1).when(mSubController).getDefaultSubId(); doReturn(true).when(mSubController).isActiveSubId(eq(1)); mContext.getContentResolver().update(CarrierIdentification.CONTENT_URI, cv, null, null); org.junit.Assert.fail(""should throw an exception for wrong uri""); } catch (java.lang.IllegalArgumentException ex) { assertFalse(mContentObserver.changed); } }",5ddd17f70bbc613d3b36b3d329d6e5b58b2ec835,"@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testUpdateCurrentSubscription_WrongURI() { try { android.content.ContentValues cv = new android.content.ContentValues(); cv.put(CarrierId.CARRIER_ID, com.android.providers.telephony.CarrierIdProviderTest.dummy_cid); cv.put(CarrierId.NAME, com.android.providers.telephony.CarrierIdProviderTest.dummy_name); doReturn(1).when(mSubController).getDefaultSubId(); doReturn(true).when(mSubController).isActiveSubId(eq(1)); mContext.getContentResolver().update(CarrierId.CONTENT_URI, cv, null, null); org.junit.Assert.fail(""should throw an exception for wrong uri""); } catch (java.lang.IllegalArgumentException ex) { assertFalse(mContentObserver.changed); } }",e18b562043cd79e442e26f94f14c85169e9a3b79,"@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testUpdateCurrentSubscription_WrongURI() { try { android.content.ContentValues cv = new android.content.ContentValues(); cv.put(CarrierId.CARRIER_ID, com.android.providers.telephony.CarrierIdProviderTest.dummy_cid); cv.put(CarrierId.CARRIER_NAME, com.android.providers.telephony.CarrierIdProviderTest.dummy_name); doReturn(1).when(mSubController).getDefaultSubId(); doReturn(true).when(mSubController).isActiveSubId(eq(1)); mContext.getContentResolver().update(CarrierId.CONTENT_URI, cv, null, null); org.junit.Assert.fail(""should throw an exception for wrong uri""); } catch (java.lang.IllegalArgumentException ex) { assertFalse(mContentObserver.changed); } }",e02281d9bc6a3d707bc659e02d789d64cb1d3850,2018-03-05 22:59:19,2
630005,src_com_android_providers_telephony_CarrierIdProvider.java,"private android.database.Cursor queryCarrierIdForCurrentSubscription(android.net.Uri uri, java.lang.String[] projectionIn) { int subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); if (!(android.text.TextUtils.isEmpty(uri.getLastPathSegment()))) { try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException((""invalid subid in provided uri"" + uri)); } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""queryCarrierIdForSubId: "" + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(mCurrentSubscriptionMap.containsKey(subId))) { return new android.database.MatrixCursor(projectionIn, 0); } final android.database.MatrixCursor c = new android.database.MatrixCursor(projectionIn, 1); final android.database.MatrixCursor.RowBuilder row = c.newRow(); for (int i = 0; i < (c.getColumnCount()); i++) { final java.lang.String columnName = c.getColumnName(i); if (CarrierIdentification.CID.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).first); } else if (CarrierIdentification.NAME.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).second); } else { throw new java.lang.IllegalArgumentException((""Invalid column "" + (projectionIn[i]))); } } return c; }",0bc11d0466e193e29e6843e4e39683c930f40503,"private android.database.Cursor queryCarrierIdForCurrentSubscription(android.net.Uri uri, java.lang.String[] projectionIn) { int subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); if (!(android.text.TextUtils.isEmpty(uri.getLastPathSegment()))) { try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException((""invalid subid in provided uri"" + uri)); } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""queryCarrierIdForSubId: "" + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(mCurrentSubscriptionMap.containsKey(subId))) { return new android.database.MatrixCursor(projectionIn, 0); } final android.database.MatrixCursor c = new android.database.MatrixCursor(projectionIn, 1); final android.database.MatrixCursor.RowBuilder row = c.newRow(); for (int i = 0; i < (c.getColumnCount()); i++) { final java.lang.String columnName = c.getColumnName(i); if (CarrierId.CARRIER_ID.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).first); } else if (CarrierId.NAME.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).second); } else { throw new java.lang.IllegalArgumentException((""Invalid column "" + (projectionIn[i]))); } } return c; }",7fe3155a0a09c4eceff0492568b4e30add1558ec,"private android.database.Cursor queryCarrierIdForCurrentSubscription(android.net.Uri uri, java.lang.String[] projectionIn) { int subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); if (!(android.text.TextUtils.isEmpty(uri.getLastPathSegment()))) { try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException((""invalid subid in provided uri"" + uri)); } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""queryCarrierIdForSubId: "" + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(mCurrentSubscriptionMap.containsKey(subId))) { return new android.database.MatrixCursor(projectionIn, 0); } final android.database.MatrixCursor c = new android.database.MatrixCursor(projectionIn, 1); final android.database.MatrixCursor.RowBuilder row = c.newRow(); for (int i = 0; i < (c.getColumnCount()); i++) { final java.lang.String columnName = c.getColumnName(i); if (CarrierId.CARRIER_ID.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).first); } else if (CarrierId.CARRIER_NAME.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).second); } else { throw new java.lang.IllegalArgumentException((""Invalid column "" + (projectionIn[i]))); } } return c; }",12ce6284f97398902743b168dca772ddc740fc2e,2018-03-05 22:59:19,2
630005,tests_src_com_android_providers_telephony_CarrierIdProviderTest.java,"@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testQueryWithWrongURI() { try { mContext.getContentResolver().query(android.net.Uri.withAppendedPath(CarrierIdentification.CONTENT_URI, ""invalid""), new java.lang.String[]{ android.provider.Telephony.CarrierIdentification.CID, android.provider.Telephony.CarrierIdentification.NAME }, null, null); org.junit.Assert.fail(""should throw an exception for wrong uri""); } catch (java.lang.IllegalArgumentException ex) { } }",c403f446baf7cdb8b85f8b772410bbb5de183963,"@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testQueryWithWrongURI() { try { mContext.getContentResolver().query(android.net.Uri.withAppendedPath(CarrierId.CONTENT_URI, ""invalid""), new java.lang.String[]{ android.provider.Telephony.CarrierId.CARRIER_ID, android.provider.Telephony.CarrierId.NAME }, null, null); org.junit.Assert.fail(""should throw an exception for wrong uri""); } catch (java.lang.IllegalArgumentException ex) { } }",cb101cabbe09d4f142a8bc1dde42b1308afa9cf8,"@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testQueryWithWrongURI() { try { mContext.getContentResolver().query(android.net.Uri.withAppendedPath(CarrierId.CONTENT_URI, ""invalid""), new java.lang.String[]{ android.provider.Telephony.CarrierId.CARRIER_ID, android.provider.Telephony.CarrierId.CARRIER_NAME }, null, null); org.junit.Assert.fail(""should throw an exception for wrong uri""); } catch (java.lang.IllegalArgumentException ex) { } }",94e762dd95501acd478b07e673291cc248c9e164,2018-03-05 22:59:19,2
630005,tests_src_com_android_providers_telephony_CarrierIdProviderTest.java,"@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testQueryCurrrentSubscription_wrongProjection() { mContext.getContentResolver().query(CarrierIdentification.CONTENT_URI, new java.lang.String[]{ android.provider.Telephony.CarrierIdentification.CID, android.provider.Telephony.CarrierIdentification.NAME, CarrierIdentification.All.MCCMNC }, null, null); }",da5c4f4211084dfa1fea7e514ad08ee7ff5b995d,"@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testQueryCurrrentSubscription_wrongProjection() { mContext.getContentResolver().query(CarrierId.CONTENT_URI, new java.lang.String[]{ android.provider.Telephony.CarrierId.CARRIER_ID, android.provider.Telephony.CarrierId.NAME, CarrierId.All.MCCMNC }, null, null); }",e403591a4adba4f84590d50df48464ec649e2d0c,"@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testQueryCurrrentSubscription_wrongProjection() { mContext.getContentResolver().query(CarrierId.CONTENT_URI, new java.lang.String[]{ android.provider.Telephony.CarrierId.CARRIER_ID, android.provider.Telephony.CarrierId.CARRIER_NAME, CarrierId.All.MCCMNC }, null, null); }",7e8f0521db05058d5ba1912fe86b0092e4337914,2018-03-05 22:59:19,2
629942,src_java_com_android_internal_telephony_CarrierIdentifier.java,"private void updateCarrierIdAndName(int cid, java.lang.String name) { boolean update = false; if (!(com.android.internal.telephony.CarrierIdentifier.equals(name, mCarrierName, true))) { com.android.internal.telephony.CarrierIdentifier.logd((((""[updateCarrierName] from:"" + (mCarrierName)) + "" to:"") + name)); mCarrierName = name; update = true; } if (cid != (mCarrierId)) { com.android.internal.telephony.CarrierIdentifier.logd((((""[updateCarrierId] from:"" + (mCarrierId)) + "" to:"") + cid)); mCarrierId = cid; update = true; } if (update) { mCarrierIdLocalLog.log((((""[updateCarrierIdAndName] cid:"" + (mCarrierId)) + "" name:"") + (mCarrierName))); final android.content.Intent intent = new android.content.Intent(android.telephony.TelephonyManager.ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED); intent.putExtra(TelephonyManager.EXTRA_CARRIER_ID, mCarrierId); intent.putExtra(TelephonyManager.EXTRA_CARRIER_NAME, mCarrierName); intent.putExtra(TelephonyManager.EXTRA_SUBSCRIPTION_ID, mPhone.getSubId()); mContext.sendBroadcast(intent); android.content.ContentValues cv = new android.content.ContentValues(); cv.put(CarrierIdentification.CID, mCarrierId); cv.put(CarrierIdentification.NAME, mCarrierName); mContext.getContentResolver().update(android.net.Uri.withAppendedPath(CarrierIdentification.CONTENT_URI, java.lang.Integer.toString(mPhone.getSubId())), cv, null, null); } }",1813efcb07275c21101a4e777ebbdc8e272e5368,"private void updateCarrierIdAndName(int cid, java.lang.String name) { boolean update = false; if (!(com.android.internal.telephony.CarrierIdentifier.equals(name, mCarrierName, true))) { com.android.internal.telephony.CarrierIdentifier.logd((((""[updateCarrierName] from:"" + (mCarrierName)) + "" to:"") + name)); mCarrierName = name; update = true; } if (cid != (mCarrierId)) { com.android.internal.telephony.CarrierIdentifier.logd((((""[updateCarrierId] from:"" + (mCarrierId)) + "" to:"") + cid)); mCarrierId = cid; update = true; } if (update) { mCarrierIdLocalLog.log((((""[updateCarrierIdAndName] cid:"" + (mCarrierId)) + "" name:"") + (mCarrierName))); final android.content.Intent intent = new android.content.Intent(android.telephony.TelephonyManager.ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED); intent.putExtra(TelephonyManager.EXTRA_CARRIER_ID, mCarrierId); intent.putExtra(TelephonyManager.EXTRA_CARRIER_NAME, mCarrierName); intent.putExtra(TelephonyManager.EXTRA_SUBSCRIPTION_ID, mPhone.getSubId()); mContext.sendBroadcast(intent); android.content.ContentValues cv = new android.content.ContentValues(); cv.put(CarrierId.CARRIER_ID, mCarrierId); cv.put(CarrierId.NAME, mCarrierName); mContext.getContentResolver().update(android.net.Uri.withAppendedPath(CarrierId.CONTENT_URI, java.lang.Integer.toString(mPhone.getSubId())), cv, null, null); } }",1e061fa6551d8bb367d941490c1f3da27c761b1d,"private void updateCarrierIdAndName(int cid, java.lang.String name) { boolean update = false; if (!(com.android.internal.telephony.CarrierIdentifier.equals(name, mCarrierName, true))) { com.android.internal.telephony.CarrierIdentifier.logd((((""[updateCarrierName] from:"" + (mCarrierName)) + "" to:"") + name)); mCarrierName = name; update = true; } if (cid != (mCarrierId)) { com.android.internal.telephony.CarrierIdentifier.logd((((""[updateCarrierId] from:"" + (mCarrierId)) + "" to:"") + cid)); mCarrierId = cid; update = true; } if (update) { mCarrierIdLocalLog.log((((""[updateCarrierIdAndName] cid:"" + (mCarrierId)) + "" name:"") + (mCarrierName))); final android.content.Intent intent = new android.content.Intent(android.telephony.TelephonyManager.ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED); intent.putExtra(TelephonyManager.EXTRA_CARRIER_ID, mCarrierId); intent.putExtra(TelephonyManager.EXTRA_CARRIER_NAME, mCarrierName); intent.putExtra(TelephonyManager.EXTRA_SUBSCRIPTION_ID, mPhone.getSubId()); mContext.sendBroadcast(intent); android.content.ContentValues cv = new android.content.ContentValues(); cv.put(CarrierId.CARRIER_ID, mCarrierId); cv.put(CarrierId.CARRIER_NAME, mCarrierName); mContext.getContentResolver().update(android.net.Uri.withAppendedPath(CarrierId.CONTENT_URI, java.lang.Integer.toString(mPhone.getSubId())), cv, null, null); } }",90681696cf37ddd8dd4c978667a798f3dade68cc,2018-03-05 22:59:19,2
632447,services_core_java_com_android_server_TelephonyRegistry.java,"private boolean checkListenerPermission(int events, java.lang.String callingPackage, java.lang.String message) { if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_LOCATION)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); } if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_INFO)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK)) != 0) { if (!(com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState(mContext, callingPackage, message))) { return false; } } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_STATE_PERMISSION_MASK)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRECISE_PHONE_STATE, null); } return true; }",ddbbd0c038849cae10e490aed49307936089b6e2,"private boolean checkListenerPermission(int events, java.lang.String callingPackage, java.lang.String message) { if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_LOCATION)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); if ((mAppOps.noteOp(AppOpsManager.OP_COARSE_LOCATION, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return false; } } if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_INFO)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); if ((mAppOps.noteOp(AppOpsManager.OP_COARSE_LOCATION, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return false; } } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK)) != 0) { if (!(com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState(mContext, callingPackage, message))) { return false; } } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_STATE_PERMISSION_MASK)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRECISE_PHONE_STATE, null); } return true; }",756a4e84331090f0a58599d014f9d2aa355cfd70,"private boolean checkListenerPermission(int events, java.lang.String callingPackage, java.lang.String message) { if ((events & (com.android.server.TelephonyRegistry.ENFORCE_COARSE_LOCATION_PERMISSION_MASK)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); if ((mAppOps.noteOp(AppOpsManager.OP_COARSE_LOCATION, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return false; } } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK)) != 0) { if (!(com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState(mContext, callingPackage, message))) { return false; } } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_STATE_PERMISSION_MASK)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRECISE_PHONE_STATE, null); } return true; }",d4ee4acebf55d8984c1e8de8d8b2d5c978df436f,2018-03-06 02:14:44,2
632865,core_tests_coretests_src_android_app_usage_NetworkStatsManagerTest.java,,,"@org.junit.Test public void testQueryDetails_NoSubscriberId() throws android.os.RemoteException { final long startTime = 1; final long endTime = 100; final int uid1 = 10001; final int uid2 = 10002; android.net.NetworkStatsHistory emptyHistory = new android.net.NetworkStatsHistory(10, 0); when(mService.openSessionForUsageStats(anyInt(), anyString())).thenReturn(mStatsSession); when(mStatsSession.getRelevantUids()).thenReturn(new int[]{ uid1, uid2 }); when(mStatsSession.getHistoryIntervalForUid(any(android.net.NetworkTemplate.class), anyInt(), eq(android.app.usage.android.net.NetworkStats.SET_ALL), eq(android.app.usage.android.net.NetworkStats.TAG_NONE), eq(NetworkStatsHistory.FIELD_ALL), eq(startTime), eq(endTime))).then((org.mockito.invocation.InvocationOnMock inv) -> { android.net.NetworkTemplate template = inv.getArgument(0); assertEquals(NetworkTemplate.MATCH_MOBILE_WILDCARD, template.getMatchRule()); return emptyHistory; }); android.app.usage.NetworkStats stats = mManager.queryDetails(ConnectivityManager.TYPE_MOBILE, null, startTime, endTime); junit.framework.Assert.assertFalse(stats.hasNextBucket()); }",88152257d65cc6d36d14c26a4463e3a115313639,"@org.junit.Test public void testQueryDetails_NoSubscriberId() throws android.os.RemoteException { final long startTime = 1; final long endTime = 100; final int uid1 = 10001; final int uid2 = 10002; when(mService.openSessionForUsageStats(anyInt(), anyString())).thenReturn(mStatsSession); when(mStatsSession.getRelevantUids()).thenReturn(new int[]{ uid1, uid2 }); android.app.usage.NetworkStats stats = mManager.queryDetails(ConnectivityManager.TYPE_MOBILE, null, startTime, endTime); when(mStatsSession.getHistoryIntervalForUid(any(android.net.NetworkTemplate.class), anyInt(), anyInt(), anyInt(), anyInt(), anyLong(), anyLong())).thenReturn(new android.net.NetworkStatsHistory(10, 0)); verify(mStatsSession, times(1)).getHistoryIntervalForUid(argThat((android.net.NetworkTemplate t) -> (t.getMatchRule()) == NetworkTemplate.MATCH_MOBILE_WILDCARD), eq(uid1), eq(android.net.NetworkStats.SET_ALL), eq(android.net.NetworkStats.TAG_NONE), eq(NetworkStatsHistory.FIELD_ALL), eq(startTime), eq(endTime)); verify(mStatsSession, times(1)).getHistoryIntervalForUid(argThat((android.net.NetworkTemplate t) -> (t.getMatchRule()) == NetworkTemplate.MATCH_MOBILE_WILDCARD), eq(uid2), eq(android.net.NetworkStats.SET_ALL), eq(android.net.NetworkStats.TAG_NONE), eq(NetworkStatsHistory.FIELD_ALL), eq(startTime), eq(endTime)); junit.framework.Assert.assertFalse(stats.hasNextBucket()); }",83d39016d3ade589f66b5b5721f72355c9410166,2018-03-06 06:52:32,3
614330,tests_tests_uirendering_src_android_uirendering_cts_testinfrastructure_ActivityTestBase.java,"public android.graphics.Bitmap takeScreenshot(android.graphics.Point testOffset) { android.graphics.Bitmap source = getInstrumentation().getUiAutomation().takeScreenshot(); return android.graphics.Bitmap.createBitmap(source, testOffset.x, testOffset.y, android.uirendering.cts.testinfrastructure.ActivityTestBase.TEST_WIDTH, android.uirendering.cts.testinfrastructure.ActivityTestBase.TEST_HEIGHT); }",f1c14b9f232a1c750aa6c19d4b3e7f82ebbd3c85,"public android.graphics.Bitmap takeScreenshot(android.uirendering.cts.testinfrastructure.ActivityTestBase.TestPositionInfo testPositionInfo) { android.graphics.Bitmap source = getInstrumentation().getUiAutomation().takeScreenshot(); return android.graphics.Bitmap.createBitmap(testPositionInfo.screenOffset.x, testPositionInfo.screenOffset.y, android.uirendering.cts.testinfrastructure.ActivityTestBase.TEST_WIDTH, android.uirendering.cts.testinfrastructure.ActivityTestBase.TEST_HEIGHT); }",4e66c6a427cb09e0f8ec1ef53bc430679f9e3991,"public android.graphics.Bitmap takeScreenshot(android.uirendering.cts.testinfrastructure.ActivityTestBase.TestPositionInfo testPositionInfo) { android.graphics.Bitmap source = getInstrumentation().getUiAutomation().takeScreenshot(); return android.graphics.Bitmap.createBitmap(source, testPositionInfo.screenOffset.x, testPositionInfo.screenOffset.y, android.uirendering.cts.testinfrastructure.ActivityTestBase.TEST_WIDTH, android.uirendering.cts.testinfrastructure.ActivityTestBase.TEST_HEIGHT); }",90220a7a7078e40e054952b4979026e398fad1b6,2018-03-06 18:08:14,3
577169,telephony_java_android_telephony_SignalStrength.java,"@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((((((((((((((""SignalStrength:"" + "" "") + (mGsmSignalStrength)) + "" "") + (mGsmBitErrorRate)) + "" "") + (mCdmaDbm)) + "" "") + (mCdmaEcio)) + "" "") + (mEvdoDbm)) + "" "") + (mEvdoEcio)) + "" "") + (mEvdoSnr)) + "" "") + (mLteSignalStrength)) + "" "") + (mLteRsrp)) + "" "") + (mLteRsrq)) + "" "") + (mLteRssnr)) + "" "") + (mLteCqi)) + "" "") + (mLteRsrpBoost)) + "" "") + (mTdScdmaRscp)) + "" "") + (isGsm ? ""gsm|lte"" : ""cdma"")) + "" "") + (mUseOnlyRsrpForLteLevel ? ""use_only_rsrp_for_lte_level"" : ""use_rsrp_and_rssnr_for_lte_level""); }",aa839c2d1fbafb20e35f2a32f32dfdf1588ef35b,"@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((((((((((((((((((""SignalStrength:"" + "" "") + (mGsmSignalStrength)) + "" "") + (mGsmBitErrorRate)) + "" "") + (mUmtsRscp)) + "" "") + (mCdmaDbm)) + "" "") + (mCdmaEcio)) + "" "") + (mEvdoDbm)) + "" "") + (mEvdoEcio)) + "" "") + (mEvdoSnr)) + "" "") + (mLteSignalStrength)) + "" "") + (mLteRsrp)) + "" "") + (mLteRsrq)) + "" "") + (mLteRssnr)) + "" "") + (mLteCqi)) + "" "") + (mLteRsrpBoost)) + "" "") + (mTdScdmaRscp)) + "" "") + (isGsm ? ""gsm|lte"" : ""cdma"")) + "" "") + (mUseOnlyRsrpForLteLevel ? ""use_only_rsrp_for_lte_level"" : ""use_rsrp_and_rssnr_for_lte_level"")) + "" "") + (java.util.Arrays.toString(mUmtsRscpThresholds)); }",05f98be40a516b86000c5cd095bc24a0813a7e45,"@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((((((((((((((((((((((((((""SignalStrength:"" + "" "") + (mGsmSignalStrength)) + "" "") + (mGsmBitErrorRate)) + "" "") + (mCdmaDbm)) + "" "") + (mCdmaEcio)) + "" "") + (mEvdoDbm)) + "" "") + (mEvdoEcio)) + "" "") + (mEvdoSnr)) + "" "") + (mLteSignalStrength)) + "" "") + (mLteRsrp)) + "" "") + (mLteRsrq)) + "" "") + (mLteRssnr)) + "" "") + (mLteCqi)) + "" "") + (mLteRsrpBoost)) + "" "") + (mTdScdmaRscp)) + "" "") + (mWcdmaSignalStrength)) + "" "") + (mWcdmaRscpAsu)) + "" "") + (mWcdmaRscp)) + "" "") + (mIsGsm ? ""gsm|lte"" : ""cdma"")) + "" "") + (mUseOnlyRsrpForLteLevel ? ""use_only_rsrp_for_lte_level"" : ""use_rsrp_and_rssnr_for_lte_level"")) + "" "") + (mWcdmaDefaultSignalMeasurement)) + "" "") + (java.util.Arrays.toString(mLteRsrpThresholds))) + "" "") + (java.util.Arrays.toString(mWcdmaRscpThresholds)); }",a4f030bf67f7484da6884eda9077aa1638b60032,2018-03-06 18:54:56,10
577169,telephony_java_android_telephony_SignalStrength.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void setUmtsRscpThresholds(int[] umtsRscpThresholds) { if ((umtsRscpThresholds == null) || ((umtsRscpThresholds.length) != (android.telephony.SignalStrength.UMTS_RSCP_THRESHOLDS_NUM))) { android.util.Log.wtf(android.telephony.SignalStrength.LOG_TAG, ""setUmtsRscpThresholds - umtsRscpThresholds is invalid.""); return; } java.lang.System.arraycopy(umtsRscpThresholds, 0, mUmtsRscpThresholds, 0, android.telephony.SignalStrength.UMTS_RSCP_THRESHOLDS_NUM); }",5ce57e6edf47c4c390f4e809a929607ecb396330,"public void setWcdmaRscpThresholds(int[] wcdmaRscpThresholds) { if ((wcdmaRscpThresholds == null) || ((wcdmaRscpThresholds.length) != (android.telephony.SignalStrength.WCDMA_RSCP_THRESHOLDS_NUM))) { android.util.Log.wtf(android.telephony.SignalStrength.LOG_TAG, ""setWcdmaRscpThresholds - wcdmaRscpThresholds is invalid.""); return; } java.lang.System.arraycopy(wcdmaRscpThresholds, 0, mWcdmaRscpThresholds, 0, android.telephony.SignalStrength.WCDMA_RSCP_THRESHOLDS_NUM); }",e16082c9c14ec082bd7e61a708fea98b746c8cc8,2018-03-06 18:54:56,10
577169,telephony_java_android_telephony_SignalStrength.java,"public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoSnr, boolean gsm) { initialize(gsmSignalStrength, gsmBitErrorRate, cdmaDbm, cdmaEcio, evdoDbm, evdoEcio, evdoSnr, 99, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, 0, gsm, false); }",9443424be0abf699a61733aa8d2b26da9a56731e,"public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoSnr, boolean gsm) { initialize(gsmSignalStrength, gsmBitErrorRate, android.telephony.SignalStrength.INVALID, cdmaDbm, cdmaEcio, evdoDbm, evdoEcio, evdoSnr, 99, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, 0, gsm, false); }",7293fdcf2065eed3a19636adb2a261eccf2b5f6a,public void fixType() { mIsGsm = (getCdmaRelatedSignalStrength()) == (android.telephony.SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN); },8072f91dc568621fc7f13a1ae9fb44cfbc290c7f,2018-03-06 18:54:56,10
577169,telephony_java_android_telephony_SignalStrength.java,"public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mLteRsrpBoost); out.writeInt(mTdScdmaRscp); out.writeInt((isGsm ? 1 : 0)); out.writeInt((mUseOnlyRsrpForLteLevel ? 1 : 0)); }",af60b3b23d7d8f16b6b73fdee661ff65df1a7bb1,"public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mUmtsRscp); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mLteRsrpBoost); out.writeInt(mTdScdmaRscp); out.writeInt((isGsm ? 1 : 0)); out.writeInt((mUseOnlyRsrpForLteLevel ? 1 : 0)); for (int i = 0; i < (android.telephony.SignalStrength.UMTS_RSCP_THRESHOLDS_NUM); i++) { out.writeInt(mUmtsRscpThresholds[i]); } }",3176813e7a27883e967d825c9d6b34373fadcfb8,"public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mTdScdmaRscp); out.writeInt(mWcdmaSignalStrength); out.writeInt(mWcdmaRscpAsu); out.writeInt(mWcdmaRscp); out.writeInt(mLteRsrpBoost); out.writeBoolean(mIsGsm); out.writeBoolean(mUseOnlyRsrpForLteLevel); out.writeString(mWcdmaDefaultSignalMeasurement); out.writeIntArray(mLteRsrpThresholds); out.writeIntArray(mWcdmaRscpThresholds); }",eed9adc8fbabafef82cc84a6ae0fc6ffe4833aa5,2018-03-06 18:54:56,10
577169,telephony_java_android_telephony_SignalStrength.java,"public static android.telephony.SignalStrength makeSignalStrengthFromRilParcel(android.os.Parcel in) { if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log((""Size of signalstrength parcel:"" + (in.dataSize()))); android.telephony.SignalStrength ss = new android.telephony.SignalStrength(); ss.mGsmSignalStrength = in.readInt(); ss.mGsmBitErrorRate = in.readInt(); ss.mCdmaDbm = in.readInt(); ss.mCdmaEcio = in.readInt(); ss.mEvdoDbm = in.readInt(); ss.mEvdoEcio = in.readInt(); ss.mEvdoSnr = in.readInt(); ss.mLteSignalStrength = in.readInt(); ss.mLteRsrp = in.readInt(); ss.mLteRsrq = in.readInt(); ss.mLteRssnr = in.readInt(); ss.mLteCqi = in.readInt(); ss.mTdScdmaRscp = in.readInt(); return ss; }",2a133412443aa5220a2a991feea11098c4e33d88,"public static android.telephony.SignalStrength makeSignalStrengthFromRilParcel(android.os.Parcel in) { if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log((""Size of signalstrength parcel:"" + (in.dataSize()))); android.telephony.SignalStrength ss = new android.telephony.SignalStrength(); ss.mGsmSignalStrength = in.readInt(); ss.mGsmBitErrorRate = in.readInt(); ss.mUmtsRscp = in.readInt(); ss.mCdmaDbm = in.readInt(); ss.mCdmaEcio = in.readInt(); ss.mEvdoDbm = in.readInt(); ss.mEvdoEcio = in.readInt(); ss.mEvdoSnr = in.readInt(); ss.mLteSignalStrength = in.readInt(); ss.mLteRsrp = in.readInt(); ss.mLteRsrq = in.readInt(); ss.mLteRssnr = in.readInt(); ss.mLteCqi = in.readInt(); ss.mTdScdmaRscp = in.readInt(); for (int i = 0; i < (android.telephony.SignalStrength.UMTS_RSCP_THRESHOLDS_NUM); i++) { ss.mUmtsRscpThresholds[i] = in.readInt(); } return ss; }",c49cd78e430fa9c82f5dd3a0948fdf22172b0542,"public void setLteRsrpThresholds(int[] lteRsrpThresholds) { if ((lteRsrpThresholds == null) || ((lteRsrpThresholds.length) != (android.telephony.SignalStrength.LTE_RSRP_THRESHOLDS_NUM))) { android.util.Log.wtf(android.telephony.SignalStrength.LOG_TAG, ""setLteRsrpThresholds - lteRsrpThresholds is invalid.""); return; } java.lang.System.arraycopy(lteRsrpThresholds, 0, mLteRsrpThresholds, 0, android.telephony.SignalStrength.LTE_RSRP_THRESHOLDS_NUM); }",86ef0ae3ff6ba263bb2d32deb56ed9de222d3ca9,2018-03-06 18:54:56,10
577169,telephony_java_android_telephony_SignalStrength.java,"public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoSnr, int lteSignalStrength, int lteRsrp, int lteRsrq, int lteRssnr, int lteCqi, int lteRsrpBoost, boolean gsm, boolean useOnlyRsrpForLteLevel) { mGsmSignalStrength = gsmSignalStrength; mGsmBitErrorRate = gsmBitErrorRate; mCdmaDbm = cdmaDbm; mCdmaEcio = cdmaEcio; mEvdoDbm = evdoDbm; mEvdoEcio = evdoEcio; mEvdoSnr = evdoSnr; mLteSignalStrength = lteSignalStrength; mLteRsrp = lteRsrp; mLteRsrq = lteRsrq; mLteRssnr = lteRssnr; mLteCqi = lteCqi; mLteRsrpBoost = lteRsrpBoost; mTdScdmaRscp = android.telephony.SignalStrength.INVALID; isGsm = gsm; mUseOnlyRsrpForLteLevel = useOnlyRsrpForLteLevel; if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log((""initialize: "" + (toString()))); }",6707dc42949e7d953c398e5b2202a5ae8d38f8f7,"public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int umtsRscp, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoSnr, int lteSignalStrength, int lteRsrp, int lteRsrq, int lteRssnr, int lteCqi, int lteRsrpBoost, boolean gsm, boolean useOnlyRsrpForLteLevel) { mGsmSignalStrength = gsmSignalStrength; mGsmBitErrorRate = gsmBitErrorRate; mUmtsRscp = umtsRscp; mCdmaDbm = cdmaDbm; mCdmaEcio = cdmaEcio; mEvdoDbm = evdoDbm; mEvdoEcio = evdoEcio; mEvdoSnr = evdoSnr; mLteSignalStrength = lteSignalStrength; mLteRsrp = lteRsrp; mLteRsrq = lteRsrq; mLteRssnr = lteRssnr; mLteCqi = lteCqi; mLteRsrpBoost = lteRsrpBoost; mTdScdmaRscp = android.telephony.SignalStrength.INVALID; isGsm = gsm; mUseOnlyRsrpForLteLevel = useOnlyRsrpForLteLevel; setUmtsRscpThresholds(getDefauUmtsRscpThresholds()); if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log((""initialize: "" + (toString()))); }",d51572582162a524982e1439a03a6c0efc58f6be,public void setWcdmaDefaultSignalMeasurement(java.lang.String defaultMeasurement) { mWcdmaDefaultSignalMeasurement = defaultMeasurement; },388e5d14b0c4ebbd6012ed3f20feb613cfec96da,2018-03-06 18:54:56,10
577171,src_java_com_android_internal_telephony_RIL.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static android.telephony.SignalStrength convertHalSignalStrength_1_2(android.hardware.radio.V1_2.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gw.signalStrength, signalStrength.gw.bitErrorRate, signalStrength.gw.rscp, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, signalStrength.tdScdma.rscp, false); }",0d770abc858a4ca78f5ca1d0592379fe9ef09a70,"static android.telephony.SignalStrength convertHalSignalStrength_1_2(android.hardware.radio.V1_2.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gsm.signalStrength, signalStrength.gsm.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, signalStrength.tdScdma.rscp, signalStrength.wcdma.base.signalStrength, signalStrength.wcdma.rscp); }",6bdc8dff5a75e31c221a4c856357b348f2f97dce,2018-03-06 18:54:56,8
577171,src_java_com_android_internal_telephony_RadioResponse.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void responseSignalStrength_1_2(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, android.hardware.radio.V1_2.SignalStrength sigStrength) { com.android.internal.telephony.RILRequest rr = mRil.processResponse(responseInfo); if (rr != null) { android.telephony.SignalStrength ret = com.android.internal.telephony.RIL.convertHalSignalStrength_1_2(sigStrength); if ((responseInfo.error) == (android.hardware.radio.V1_0.RadioError.NONE)) { com.android.internal.telephony.RadioResponse.sendMessageResponse(rr.mResult, ret); } mRil.processResponseDone(rr, responseInfo, ret); } }",9242a7119fa131b425849e5c117c195f82570138,"private void responseSignalStrength_1_2(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, android.hardware.radio.V1_2.SignalStrength signalStrength) { com.android.internal.telephony.RILRequest rr = mRil.processResponse(responseInfo); if (rr != null) { android.telephony.SignalStrength ret = com.android.internal.telephony.RIL.convertHalSignalStrength_1_2(signalStrength); if ((responseInfo.error) == (android.hardware.radio.V1_0.RadioError.NONE)) { com.android.internal.telephony.RadioResponse.sendMessageResponse(rr.mResult, ret); } mRil.processResponseDone(rr, responseInfo, ret); } }",2ee3d2a85ef2e960d8b8b41eaf0311f972148a74,2018-03-06 18:54:56,8
577171,src_java_com_android_internal_telephony_RadioResponse.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void getSignalStrengthResponse_1_2(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, android.hardware.radio.V1_2.SignalStrength sigStrength) { responseSignalStrength_1_2(responseInfo, sigStrength); }",856fcd8fca32fdfe17c7d32170618944ec6264d9,"public void getSignalStrengthResponse_1_2(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, android.hardware.radio.V1_2.SignalStrength signalStrength) { responseSignalStrength_1_2(responseInfo, signalStrength); }",d9b2c30c973b3e427db97aacad2e5c3f972423cf,2018-03-06 18:54:56,8
577169,telephony_java_android_telephony_SignalStrength.java,protected void copyFrom(android.telephony.SignalStrength s) { mGsmSignalStrength = s.mGsmSignalStrength; mGsmBitErrorRate = s.mGsmBitErrorRate; mCdmaDbm = s.mCdmaDbm; mCdmaEcio = s.mCdmaEcio; mEvdoDbm = s.mEvdoDbm; mEvdoEcio = s.mEvdoEcio; mEvdoSnr = s.mEvdoSnr; mLteSignalStrength = s.mLteSignalStrength; mLteRsrp = s.mLteRsrp; mLteRsrq = s.mLteRsrq; mLteRssnr = s.mLteRssnr; mLteCqi = s.mLteCqi; mLteRsrpBoost = s.mLteRsrpBoost; mTdScdmaRscp = s.mTdScdmaRscp; isGsm = s.isGsm; mUseOnlyRsrpForLteLevel = s.mUseOnlyRsrpForLteLevel; },9c1839d60820db33c6afab56da05dca36cfd161b,protected void copyFrom(android.telephony.SignalStrength s) { mGsmSignalStrength = s.mGsmSignalStrength; mGsmBitErrorRate = s.mGsmBitErrorRate; mUmtsRscp = s.mUmtsRscp; mCdmaDbm = s.mCdmaDbm; mCdmaEcio = s.mCdmaEcio; mEvdoDbm = s.mEvdoDbm; mEvdoEcio = s.mEvdoEcio; mEvdoSnr = s.mEvdoSnr; mLteSignalStrength = s.mLteSignalStrength; mLteRsrp = s.mLteRsrp; mLteRsrq = s.mLteRsrq; mLteRssnr = s.mLteRssnr; mLteCqi = s.mLteCqi; mLteRsrpBoost = s.mLteRsrpBoost; mTdScdmaRscp = s.mTdScdmaRscp; isGsm = s.isGsm; mUseOnlyRsrpForLteLevel = s.mUseOnlyRsrpForLteLevel; setUmtsRscpThresholds(s.mUmtsRscpThresholds); },07259904d425cb3fa86829b9ae988b65f8a8bd9f,protected void copyFrom(android.telephony.SignalStrength s) { mGsmSignalStrength = s.mGsmSignalStrength; mGsmBitErrorRate = s.mGsmBitErrorRate; mCdmaDbm = s.mCdmaDbm; mCdmaEcio = s.mCdmaEcio; mEvdoDbm = s.mEvdoDbm; mEvdoEcio = s.mEvdoEcio; mEvdoSnr = s.mEvdoSnr; mLteSignalStrength = s.mLteSignalStrength; mLteRsrp = s.mLteRsrp; mLteRsrq = s.mLteRsrq; mLteRssnr = s.mLteRssnr; mLteCqi = s.mLteCqi; mTdScdmaRscp = s.mTdScdmaRscp; mWcdmaSignalStrength = s.mWcdmaSignalStrength; mWcdmaRscpAsu = s.mWcdmaRscpAsu; mWcdmaRscp = s.mWcdmaRscp; mLteRsrpBoost = s.mLteRsrpBoost; mIsGsm = s.mIsGsm; mUseOnlyRsrpForLteLevel = s.mUseOnlyRsrpForLteLevel; mWcdmaDefaultSignalMeasurement = s.mWcdmaDefaultSignalMeasurement; setLteRsrpThresholds(s.mLteRsrpThresholds); setWcdmaRscpThresholds(s.mWcdmaRscpThresholds); },531c060a332d2e67b5b3d36a47c87d7492bf3d57,2018-03-06 18:54:56,10
577171,src_java_com_android_internal_telephony_ServiceStateTracker.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private int[] getUmtsRscpThresholds() { return getCarrierConfig().getIntArray(CarrierConfigManager.KEY_UMTS_RSCP_THRESHOLDS_INT_ARRAY); },29fe5f67968e9067273511ef7c47b1db84afc941,private boolean iccCardExists() { boolean iccCardExist = false; if ((mUiccApplcation) != null) { iccCardExist = (mUiccApplcation.getState()) != (com.android.internal.telephony.uicc.IccCardApplicationStatus.AppState.APPSTATE_UNKNOWN); } return iccCardExist; },9f4d57501657563a393f623894395f36d26f68cd,2018-03-06 18:54:56,8
577169,telephony_java_android_telephony_SignalStrength.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private int[] getDefauUmtsRscpThresholds() { return android.telephony.CarrierConfigManager.getDefaultConfig().getIntArray(CarrierConfigManager.KEY_UMTS_RSCP_THRESHOLDS_INT_ARRAY); },32e8b6b5cf38700b319d93257fdd93092b06d937,private int[] getDefaultWcdmaRscpThresholds() { return android.telephony.CarrierConfigManager.getDefaultConfig().getIntArray(CarrierConfigManager.KEY_WCDMA_RSCP_THRESHOLDS_INT_ARRAY); },313b11b1092ec87d7bc74ac2bdfa5804fa9c4d2b,2018-03-06 18:54:56,10
577169,telephony_java_android_telephony_SignalStrength.java,@java.lang.Override public int hashCode() { int primeNum = 31; return ((((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaEcio) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrp) * primeNum)) + ((mLteRsrq) * primeNum)) + ((mLteRssnr) * primeNum)) + ((mLteCqi) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mTdScdmaRscp) * primeNum)) + (isGsm ? 1 : 0)) + (mUseOnlyRsrpForLteLevel ? 1 : 0); },9a1c261df7d15da12f7587b390303e0fada7cd33,@java.lang.Override public int hashCode() { int primeNum = 31; return ((((((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mUmtsRscp) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaEcio) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrp) * primeNum)) + ((mLteRsrq) * primeNum)) + ((mLteRssnr) * primeNum)) + ((mLteCqi) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mTdScdmaRscp) * primeNum)) + (isGsm ? 1 : 0)) + (mUseOnlyRsrpForLteLevel ? 1 : 0)) + (java.util.Arrays.hashCode(mUmtsRscpThresholds)); },2d68c1cdeb9ff06c526aa886a7e37a91deb89345,@java.lang.Override public int hashCode() { int primeNum = 31; return ((((((((((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaEcio) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrp) * primeNum)) + ((mLteRsrq) * primeNum)) + ((mLteRssnr) * primeNum)) + ((mLteCqi) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mTdScdmaRscp) * primeNum)) + ((mWcdmaSignalStrength) * primeNum)) + ((mWcdmaRscpAsu) * primeNum)) + ((mWcdmaRscp) * primeNum)) + (mIsGsm ? 1 : 0)) + (mUseOnlyRsrpForLteLevel ? 1 : 0)) + (java.util.Objects.hashCode(mWcdmaDefaultSignalMeasurement))) + (java.util.Arrays.hashCode(mLteRsrpThresholds))) + (java.util.Arrays.hashCode(mWcdmaRscpThresholds)); },a4ebaff169b66c14d8dde85eb5ff9470733cdbbb,2018-03-06 18:54:56,10
623607,apps_CtsVerifier_src_com_android_cts_verifier_notifications_NotificationListenerVerifierActivity.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override void test() { if ((status) == (READY)) { com.android.cts.verifier.notifications.MockListener.MockListener.getInstance().requestListenerHints(MockListener.HINT_HOST_DISABLE_CALL_EFFECTS); status = RETEST; } else { int result = com.android.cts.verifier.notifications.MockListener.MockListener.getInstance().getCurrentListenerHints(); if (result == (com.android.cts.verifier.notifications.MockListener.MockListener.HINT_HOST_DISABLE_CALL_EFFECTS)) { status = PASS; next(); } else { logFail(); status = FAIL; } } },b0d2ac1834ebf4869eabb9c0520edec8f9bea2a9,@java.lang.Override void test() { if ((status) == (READY)) { com.android.cts.verifier.notifications.MockListener.MockListener.getInstance().requestListenerHints(MockListener.HINT_HOST_DISABLE_CALL_EFFECTS); status = RETEST; } else { int result = com.android.cts.verifier.notifications.MockListener.MockListener.getInstance().getCurrentListenerHints(); if ((result & (com.android.cts.verifier.notifications.MockListener.MockListener.HINT_HOST_DISABLE_CALL_EFFECTS)) != 0) { status = PASS; next(); } else { logFail(); status = FAIL; } } },e9ec88d54a9b14841f1bd8f421408eacd565621e,2018-03-06 19:28:51,4
623607,apps_CtsVerifier_src_com_android_cts_verifier_notifications_NotificationListenerVerifierActivity.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override void test() { if ((status) == (READY)) { com.android.cts.verifier.notifications.MockListener.MockListener.getInstance().requestUnbind(); status = RETEST; } else { if (((mNm.getEffectsSuppressor()) == null) && (!(com.android.cts.verifier.notifications.MockListener.MockListener.getInstance().isConnected))) { status = PASS; } else { if ((--(mRetries)) > 0) { status = RETEST; } else { logFail(); status = FAIL; } } next(); } },9946235404e8f0eaebb2e32fd8b4261512a97d0f,@java.lang.Override void test() { if ((status) == (READY)) { com.android.cts.verifier.notifications.MockListener.MockListener.getInstance().requestUnbind(); status = RETEST; } else { boolean noSuppressors = ((mNm.getEffectsSuppressor()) == null) || (!(mNm.getEffectsSuppressor().equals(MockListener.COMPONENT_NAME))); if (noSuppressors && (!(com.android.cts.verifier.notifications.MockListener.MockListener.getInstance().isConnected))) { status = PASS; } else { if ((--(mRetries)) > 0) { status = RETEST; } else { logFail(); status = FAIL; } } next(); } },7584c8231fa6f41fc987e86a0c8f357701e123fb,2018-03-06 19:28:51,4
623607,apps_CtsVerifier_src_com_android_cts_verifier_notifications_NotificationListenerVerifierActivity.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override void test() { if ((mNm.getEffectsSuppressor()) == null) { status = PASS; } else { status = FAIL; } },aa8b9b0865c587481a0c53dbed46bee687db42d9,@java.lang.Override void test() { if (((mNm.getEffectsSuppressor()) == null) || (!(mNm.getEffectsSuppressor().equals(MockListener.COMPONENT_NAME)))) { status = PASS; } else { status = FAIL; } },a2d66fb89d7d1c9dc831a1d73ad33faca556b2aa,2018-03-06 19:28:51,4
623607,apps_CtsVerifier_src_com_android_cts_verifier_notifications_AttentionManagementVerifierActivity.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override void setUp() { mNm.setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_PRIORITY); android.app.NotificationManager.Policy policy = mNm.getNotificationPolicy(); policy = new android.app.NotificationManager.Policy(policy.priorityCategories, policy.priorityCallSenders, NotificationManager.Policy.PRIORITY_SENDERS_STARRED); mNm.setNotificationPolicy(policy); createChannels(); sendNotifications(com.android.cts.verifier.notifications.AttentionManagementVerifierActivity.MODE_URI, false, false); status = READY; }",9ee7cf053d0fc646fa03ec35d7e299a2b31e865a,"@java.lang.Override void setUp() { mNm.setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_PRIORITY); android.app.NotificationManager.Policy policy = mNm.getNotificationPolicy(); policy = new android.app.NotificationManager.Policy(((policy.priorityCategories) | (NotificationManager.Policy.PRIORITY_CATEGORY_MESSAGES)), policy.priorityCallSenders, NotificationManager.Policy.PRIORITY_SENDERS_STARRED); mNm.setNotificationPolicy(policy); createChannels(); sendNotifications(com.android.cts.verifier.notifications.AttentionManagementVerifierActivity.MODE_URI, false, false); status = READY; }",a63b4144983efb5516396fc8d79127835fb371c5,2018-03-06 19:28:51,4
632427,src_com_android_bluetooth_btservice_AdapterService.java,"private void dumpMetrics(java.io.FileDescriptor fd) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); metrics.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dumpProto(metrics); } byte[] nativeMetricsBytes = dumpMetricsNative(); debugLog((""dumpMetrics: native metrics size is "" + (nativeMetricsBytes.length))); if ((nativeMetricsBytes.length) > 0) { try { metrics.mergeFrom(nativeMetricsBytes); } catch (com.google.protobuf.micro.InvalidProtocolBufferMicroException ex) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, (""dumpMetrics: problem parsing metrics protobuf, "" + (ex.getMessage()))); return; } } byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); debugLog((""dumpMetrics: combined metrics size is "" + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog((""dumpMetrics: error writing combined protobuf to fd, "" + (e.getMessage()))); } }",2b2e1cda542596c90a0db0232a1bdf8be2bcda68,"private void dumpMetrics(java.io.FileDescriptor fd) { com.android.bluetooth.BluetoothMetricsProto.BluetoothLog.Builder metricsBuilder = BluetoothMetricsProto.BluetoothLog.newBuilder(); metricsBuilder.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dumpProto(metricsBuilder); } byte[] nativeMetricsBytes = dumpMetricsNative(); debugLog((""dumpMetrics: native metrics size is "" + (nativeMetricsBytes.length))); if ((nativeMetricsBytes.length) > 0) { try { metricsBuilder.mergeFrom(nativeMetricsBytes); } catch (com.google.protobuf.InvalidProtocolBufferException ex) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, (""dumpMetrics: problem parsing metrics protobuf, "" + (ex.getMessage()))); return; } } byte[] metricsBytes = android.util.Base64.encode(metricsBuilder.build().toByteArray(), Base64.DEFAULT); debugLog((""dumpMetrics: combined metrics size is "" + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog((""dumpMetrics: error writing combined protobuf to fd, "" + (e.getMessage()))); } }",18f14a98a1903742fd77d4441bc2a9e1c9eea15a,"private void dumpMetrics(java.io.FileDescriptor fd) { com.android.bluetooth.BluetoothMetricsProto.BluetoothLog.Builder metricsBuilder = BluetoothMetricsProto.BluetoothLog.newBuilder(); byte[] nativeMetricsBytes = dumpMetricsNative(); debugLog((""dumpMetrics: native metrics size is "" + (nativeMetricsBytes.length))); if ((nativeMetricsBytes.length) > 0) { try { metricsBuilder.mergeFrom(nativeMetricsBytes); } catch (com.google.protobuf.InvalidProtocolBufferException ex) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, (""dumpMetrics: problem parsing metrics protobuf, "" + (ex.getMessage()))); return; } } metricsBuilder.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dumpProto(metricsBuilder); } byte[] metricsBytes = android.util.Base64.encode(metricsBuilder.build().toByteArray(), Base64.DEFAULT); debugLog((""dumpMetrics: combined metrics size is "" + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog((""dumpMetrics: error writing combined protobuf to fd, "" + (e.getMessage()))); } }",05752ef5a5449510fc200da2aa927546331f26e4,2018-03-06 20:13:16,7
632427,src_com_android_bluetooth_gatt_AppScanStats.java,"synchronized void recordScanStart(android.bluetooth.le.ScanSettings settings, boolean filtered, int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan existingScan = getScanFromScannerId(scannerId); if (existingScan != null) { return; } (this.mScansStarted)++; startTime = android.os.SystemClock.elapsedRealtime(); com.android.bluetooth.gatt.AppScanStats.LastScan scan = new com.android.bluetooth.gatt.AppScanStats.LastScan(startTime, 0, false, false, filtered, scannerId); if (settings != null) { scan.opportunistic = (settings.getScanMode()) == (android.bluetooth.le.ScanSettings.SCAN_MODE_OPPORTUNISTIC); scan.background = ((settings.getCallbackType()) & (android.bluetooth.le.ScanSettings.CALLBACK_TYPE_FIRST_MATCH)) != 0; } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_START); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); mGattService.addScanEvent(scanEvent); if (!(isScanning())) { mScanStartTime = startTime; } try { boolean isUnoptimized = !(((scan.filtered) || (scan.background)) || (scan.opportunistic)); mBatteryStats.noteBleScanStarted(workSource, isUnoptimized); } catch (android.os.RemoteException e) { } mOngoingScans.put(scannerId, scan); }",e6469f02733d528917f314e3e3393b5e405ccc5b,"synchronized void recordScanStart(android.bluetooth.le.ScanSettings settings, boolean filtered, int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan existingScan = getScanFromScannerId(scannerId); if (existingScan != null) { return; } (this.mScansStarted)++; startTime = android.os.SystemClock.elapsedRealtime(); com.android.bluetooth.gatt.AppScanStats.LastScan scan = new com.android.bluetooth.gatt.AppScanStats.LastScan(startTime, 0, false, false, filtered, scannerId); if (settings != null) { scan.opportunistic = (settings.getScanMode()) == (android.bluetooth.le.ScanSettings.SCAN_MODE_OPPORTUNISTIC); scan.background = ((settings.getCallbackType()) & (android.bluetooth.le.ScanSettings.CALLBACK_TYPE_FIRST_MATCH)) != 0; } com.android.bluetooth.BluetoothMetricsProto.ScanEvent scanEvent = BluetoothMetricsProto.ScanEvent.newBuilder().setScanEventType(BluetoothMetricsProto.ScanEvent.ScanEventType.SCAN_EVENT_START).setScanTechnologyType(BluetoothMetricsProto.ScanEvent.ScanTechnologyType.SCAN_TECH_TYPE_LE).setEventTimeMillis(java.lang.System.currentTimeMillis()).setInitiator(truncateAppName(appName)).build(); mGattService.addScanEvent(scanEvent); mSessionNumScanResults = 0; if (!(isScanning())) { mScanStartTime = startTime; } try { boolean isUnoptimized = !(((scan.filtered) || (scan.background)) || (scan.opportunistic)); mBatteryStats.noteBleScanStarted(workSource, isUnoptimized); } catch (android.os.RemoteException e) { } mOngoingScans.put(scannerId, scan); }",6dc616e120660370f6a5d9206829cae72abb0552,"synchronized void recordScanStart(android.bluetooth.le.ScanSettings settings, boolean filtered, int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan existingScan = getScanFromScannerId(scannerId); if (existingScan != null) { return; } (this.mScansStarted)++; startTime = android.os.SystemClock.elapsedRealtime(); com.android.bluetooth.gatt.AppScanStats.LastScan scan = new com.android.bluetooth.gatt.AppScanStats.LastScan(startTime, 0, false, false, filtered, scannerId); if (settings != null) { scan.opportunistic = (settings.getScanMode()) == (android.bluetooth.le.ScanSettings.SCAN_MODE_OPPORTUNISTIC); scan.background = ((settings.getCallbackType()) & (android.bluetooth.le.ScanSettings.CALLBACK_TYPE_FIRST_MATCH)) != 0; } com.android.bluetooth.BluetoothMetricsProto.ScanEvent scanEvent = BluetoothMetricsProto.ScanEvent.newBuilder().setScanEventType(BluetoothMetricsProto.ScanEvent.ScanEventType.SCAN_EVENT_START).setScanTechnologyType(BluetoothMetricsProto.ScanEvent.ScanTechnologyType.SCAN_TECH_TYPE_LE).setEventTimeMillis(java.lang.System.currentTimeMillis()).setInitiator(truncateAppName(appName)).build(); mGattService.addScanEvent(scanEvent); if (!(isScanning())) { mScanStartTime = startTime; } try { boolean isUnoptimized = !(((scan.filtered) || (scan.background)) || (scan.opportunistic)); mBatteryStats.noteBleScanStarted(workSource, isUnoptimized); } catch (android.os.RemoteException e) { } mOngoingScans.put(scannerId, scan); }",f27af66814afa9ea8f53b3de8cfde2a3bd80734b,2018-03-06 20:13:16,7
632427,src_com_android_bluetooth_gatt_AppScanStats.java,"synchronized void recordScanStop(int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan scan = getScanFromScannerId(scannerId); if (scan == null) { return; } (this.mScansStopped)++; stopTime = android.os.SystemClock.elapsedRealtime(); long scanDuration = (stopTime) - (scan.timestamp); scan.duration = scanDuration; if (scan.isSuspended) { long suspendDuration = (stopTime) - (scan.suspendStartTime); scan.suspendDuration += suspendDuration; mTotalSuspendTime += suspendDuration; } mOngoingScans.remove(scannerId); if ((mLastScans.size()) >= (com.android.bluetooth.gatt.AppScanStats.NUM_SCAN_DURATIONS_KEPT)) { mLastScans.remove(0); } mLastScans.add(scan); com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_STOP); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); mGattService.addScanEvent(scanEvent); if (!(isScanning())) { long totalDuration = (stopTime) - (mScanStartTime); mTotalScanTime += totalDuration; mMinScanTime = java.lang.Math.min(totalDuration, mMinScanTime); mMaxScanTime = java.lang.Math.max(totalDuration, mMaxScanTime); } try { boolean isUnoptimized = !(((scan.filtered) || (scan.background)) || (scan.opportunistic)); mBatteryStats.noteBleScanResults(workSource, ((scan.results) % 100)); mBatteryStats.noteBleScanStopped(workSource, isUnoptimized); } catch (android.os.RemoteException e) { } }",c4b6f15abcd9452ea0e0d2368e6534efde6ed7b4,"synchronized void recordScanStop(int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan scan = getScanFromScannerId(scannerId); if (scan == null) { return; } (this.mScansStopped)++; stopTime = android.os.SystemClock.elapsedRealtime(); long scanDuration = (stopTime) - (scan.timestamp); scan.duration = scanDuration; if (scan.isSuspended) { long suspendDuration = (stopTime) - (scan.suspendStartTime); scan.suspendDuration += suspendDuration; mTotalSuspendTime += suspendDuration; } mOngoingScans.remove(scannerId); if ((mLastScans.size()) >= (com.android.bluetooth.gatt.AppScanStats.NUM_SCAN_DURATIONS_KEPT)) { mLastScans.remove(0); } mLastScans.add(scan); com.android.bluetooth.BluetoothMetricsProto.ScanEvent scanEvent = BluetoothMetricsProto.ScanEvent.newBuilder().setScanEventType(BluetoothMetricsProto.ScanEvent.ScanEventType.SCAN_EVENT_STOP).setScanTechnologyType(BluetoothMetricsProto.ScanEvent.ScanTechnologyType.SCAN_TECH_TYPE_LE).setEventTimeMillis(java.lang.System.currentTimeMillis()).setInitiator(truncateAppName(appName)).setNumberResults(mSessionNumScanResults).build(); mGattService.addScanEvent(scanEvent); mSessionNumScanResults = 0; if (!(isScanning())) { long totalDuration = (stopTime) - (mScanStartTime); mTotalScanTime += totalDuration; mMinScanTime = java.lang.Math.min(totalDuration, mMinScanTime); mMaxScanTime = java.lang.Math.max(totalDuration, mMaxScanTime); } try { boolean isUnoptimized = !(((scan.filtered) || (scan.background)) || (scan.opportunistic)); mBatteryStats.noteBleScanResults(workSource, ((scan.results) % 100)); mBatteryStats.noteBleScanStopped(workSource, isUnoptimized); } catch (android.os.RemoteException e) { } }",44ef125a0904557331fbe9438cdbd3ba82872e02,"synchronized void recordScanStop(int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan scan = getScanFromScannerId(scannerId); if (scan == null) { return; } (this.mScansStopped)++; stopTime = android.os.SystemClock.elapsedRealtime(); long scanDuration = (stopTime) - (scan.timestamp); scan.duration = scanDuration; if (scan.isSuspended) { long suspendDuration = (stopTime) - (scan.suspendStartTime); scan.suspendDuration += suspendDuration; mTotalSuspendTime += suspendDuration; } mOngoingScans.remove(scannerId); if ((mLastScans.size()) >= (com.android.bluetooth.gatt.AppScanStats.NUM_SCAN_DURATIONS_KEPT)) { mLastScans.remove(0); } mLastScans.add(scan); com.android.bluetooth.BluetoothMetricsProto.ScanEvent scanEvent = BluetoothMetricsProto.ScanEvent.newBuilder().setScanEventType(BluetoothMetricsProto.ScanEvent.ScanEventType.SCAN_EVENT_STOP).setScanTechnologyType(BluetoothMetricsProto.ScanEvent.ScanTechnologyType.SCAN_TECH_TYPE_LE).setEventTimeMillis(java.lang.System.currentTimeMillis()).setInitiator(truncateAppName(appName)).setNumberResults(scan.results).build(); mGattService.addScanEvent(scanEvent); if (!(isScanning())) { long totalDuration = (stopTime) - (mScanStartTime); mTotalScanTime += totalDuration; mMinScanTime = java.lang.Math.min(totalDuration, mMinScanTime); mMaxScanTime = java.lang.Math.max(totalDuration, mMaxScanTime); } try { boolean isUnoptimized = !(((scan.filtered) || (scan.background)) || (scan.opportunistic)); mBatteryStats.noteBleScanResults(workSource, ((scan.results) % 100)); mBatteryStats.noteBleScanStopped(workSource, isUnoptimized); } catch (android.os.RemoteException e) { } }",0cb744d44f29c8002dc718109f624a0987c1b6ea,2018-03-06 20:13:16,7
625111,apps_CtsVerifier_src_com_android_cts_verifier_audio_USBAudioPeripheralButtonsActivity.java,"private void calculateMatch() { if ((mIsPeripheralAttached) && ((mSelectedProfile) != null)) { com.android.cts.verifier.audio.peripheralprofile.ProfileButtonAttributes mButtonAttributes = mSelectedProfile.getButtonAttributes(); boolean match = mButtonAttributes != null; if (match && ((mButtonAttributes.mHasBtnA) != (mHasBtnA))) { match = false; } if (match && ((mButtonAttributes.mHasBtnB) != (mHasBtnB))) { match = false; } if (match && ((mButtonAttributes.mHasBtnC) != (mHasBtnC))) { match = false; } android.util.Log.i(com.android.cts.verifier.audio.USBAudioPeripheralButtonsActivity.TAG, (""match:"" + match)); getPassButton().setEnabled(match); } else { getPassButton().setEnabled(false); } }",b0540d75a3c8c19a602f79ec1a46c8e0b580efd5,"private void calculateMatch() { if ((mIsPeripheralAttached) && ((mSelectedProfile) != null)) { com.android.cts.verifier.audio.peripheralprofile.ProfileButtonAttributes mButtonAttributes = mSelectedProfile.getButtonAttributes(); boolean match = mButtonAttributes != null; boolean interceptedVolume = getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier(""config_handleVolumeKeysInWindowManager"", ""bool"", ""android"")); if (match && ((mButtonAttributes.mHasBtnA) != (mHasBtnA))) { match = false; } if ((match && ((mButtonAttributes.mHasBtnB) != (mHasBtnB))) && (!interceptedVolume)) { match = false; } if ((match && ((mButtonAttributes.mHasBtnC) != (mHasBtnC))) && (!interceptedVolume)) { match = false; } android.util.Log.i(com.android.cts.verifier.audio.USBAudioPeripheralButtonsActivity.TAG, (""match:"" + match)); getPassButton().setEnabled(match); } else { getPassButton().setEnabled(false); } }",092d488d74135f8465d758ba18abb36e6ed67667,"private void calculateMatch() { if ((mIsPeripheralAttached) && ((mSelectedProfile) != null)) { com.android.cts.verifier.audio.peripheralprofile.ProfileButtonAttributes mButtonAttributes = mSelectedProfile.getButtonAttributes(); boolean match = mButtonAttributes != null; boolean interceptedVolume = getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier(""config_handleVolumeKeysInWindowManager"", ""bool"", ""android"")); if (match && ((mButtonAttributes.mHasBtnA) != (mHasBtnA))) { match = false; } if (!interceptedVolume) { if (match && ((mButtonAttributes.mHasBtnB) != (mHasBtnB))) { match = false; } if (match && ((mButtonAttributes.mHasBtnC) != (mHasBtnC))) { match = false; } } android.util.Log.i(com.android.cts.verifier.audio.USBAudioPeripheralButtonsActivity.TAG, (""match:"" + match)); getPassButton().setEnabled(match); } else { getPassButton().setEnabled(false); } }",1d544ccfb96c15d824c7b5b84c5e6ff56dfe8b08,2018-03-06 20:42:45,8
511695,hostsidetests_devicepolicy_app_DeviceAndProfileOwner_src_com_android_cts_deviceandprofileowner_AlwaysOnVpnMultiStageTest.java,public void testAlwaysOnVpnDisabled() throws java.lang.Exception { assertNull(mDevicePolicyManager.getAlwaysOnVpnPackage(com.android.cts.deviceandprofileowner.ADMIN_RECEIVER_COMPONENT)); assertFalse(com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.isNetworkVpn(mContext)); },830fca4cedbfc71ddb3f898f4859e100967f50cf,public void testAlwaysOnVpnDisabled() throws java.lang.Exception { for (int i = 0; (i < 60) && ((mDevicePolicyManager.getAlwaysOnVpnPackage(com.android.cts.deviceandprofileowner.ADMIN_RECEIVER_COMPONENT)) != null); i++) { java.lang.Thread.sleep(1000); } assertNull(mDevicePolicyManager.getAlwaysOnVpnPackage(com.android.cts.deviceandprofileowner.ADMIN_RECEIVER_COMPONENT)); assertFalse(com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.isNetworkVpn(mContext)); },2fc6feba39de5c6f1d70fea1f8f2290e70eeb85a,public void testAlwaysOnVpnDisabled() throws java.lang.Exception { for (int i = 0; i < 60; i++) { if ((mDevicePolicyManager.getAlwaysOnVpnPackage(com.android.cts.deviceandprofileowner.ADMIN_RECEIVER_COMPONENT)) == null) { break; } java.lang.Thread.sleep(1000); } assertNull(mDevicePolicyManager.getAlwaysOnVpnPackage(com.android.cts.deviceandprofileowner.ADMIN_RECEIVER_COMPONENT)); assertFalse(com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.isNetworkVpn(mContext)); },6ab1fa9d81ed017e0cb996239d8d9cc750feef39,2018-03-06 21:18:49,3
629405,src_com_android_se_security_AccessControlEnforcer.java,"private synchronized boolean[] internal_isNfcEventAllowed(byte[] aid, java.lang.String[] packageNames, boolean checkRefreshTag) { if (checkRefreshTag) { updateAccessRuleIfNeed(); } int i = 0; boolean[] nfcEventFlags = new boolean[packageNames.length]; for (java.lang.String packageName : packageNames) { try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { nfcEventFlags[i] = false; } else { com.android.se.security.ChannelAccess channelAccess = getAccessRule(aid, appCerts); nfcEventFlags[i] = (channelAccess.getNFCEventAccess()) == (com.android.se.security.ChannelAccess.ACCESS.ALLOWED); } } catch (java.lang.Exception e) { android.util.Log.w(mTag, ("" Access Rules for NFC: "" + (e.getLocalizedMessage()))); nfcEventFlags[i] = false; } i++; } return nfcEventFlags; }",f778c34a937ff1f4398a3fcb09f5fc3236ff03c6,"private synchronized boolean[] internal_isNfcEventAllowed(byte[] aid, java.lang.String[] packageNames, boolean checkRefreshTag) { if (checkRefreshTag) { try { updateAccessRuleIfNeed(false); } catch (java.io.IOException ignore) { } } int i = 0; boolean[] nfcEventFlags = new boolean[packageNames.length]; for (java.lang.String packageName : packageNames) { try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { nfcEventFlags[i] = false; } else { com.android.se.security.ChannelAccess channelAccess = getAccessRule(aid, appCerts); nfcEventFlags[i] = (channelAccess.getNFCEventAccess()) == (com.android.se.security.ChannelAccess.ACCESS.ALLOWED); } } catch (java.lang.Exception e) { android.util.Log.w(mTag, ("" Access Rules for NFC: "" + (e.getLocalizedMessage()))); nfcEventFlags[i] = false; } i++; } return nfcEventFlags; }",48ca1b7e6510f769600f0715dde91c9c4d2bf188,"private synchronized boolean[] internal_isNfcEventAllowed(byte[] aid, java.lang.String[] packageNames, boolean checkRefreshTag) { if (checkRefreshTag) { try { updateAccessRuleIfNeed(); } catch (java.io.IOException e) { throw new java.security.AccessControlException((""Access-Control not found in "" + (mTerminal.getName()))); } } int i = 0; boolean[] nfcEventFlags = new boolean[packageNames.length]; for (java.lang.String packageName : packageNames) { try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { nfcEventFlags[i] = false; } else { com.android.se.security.ChannelAccess channelAccess = getAccessRule(aid, appCerts); nfcEventFlags[i] = (channelAccess.getNFCEventAccess()) == (com.android.se.security.ChannelAccess.ACCESS.ALLOWED); } } catch (java.lang.Exception e) { android.util.Log.w(mTag, ("" Access Rules for NFC: "" + (e.getLocalizedMessage()))); nfcEventFlags[i] = false; } i++; } return nfcEventFlags; }",c874520ebf6bec2d33217f9f98dc4ab6bedba4e7,2018-03-06 21:33:34,8
629405,src_com_android_se_security_AccessControlEnforcer.java,"private void updateAccessRuleIfNeed() { if ((mUseAra) && ((mAraController) != null)) { try { mAraController.initialize(); mUseArf = false; mFullAccess = false; } catch (java.lang.Exception e) { throw new java.security.AccessControlException((""No ARA applet found in "" + (mTerminal.getName()))); } } else if ((mUseArf) && ((mArfController) != null)) { try { mArfController.initialize(); } catch (java.lang.Exception e) { android.util.Log.e(mTag, e.getMessage()); } } }",e9a220f4283aab3d53e857e9b7326a6509ffa065,"private void updateAccessRuleIfNeed(boolean distinguishTemporaryError) throws java.io.IOException { if ((mUseAra) && ((mAraController) != null)) { try { mAraController.initialize(); mUseArf = false; mFullAccess = false; } catch (java.lang.Exception e) { if (distinguishTemporaryError) { if (e instanceof java.io.IOException) { throw e; } } throw new java.security.AccessControlException((""No ARA applet found in "" + (mTerminal.getName()))); } } else if ((mUseArf) && ((mArfController) != null)) { try { mArfController.initialize(); } catch (java.lang.Exception e) { if (distinguishTemporaryError) { if (e instanceof java.io.IOException) { throw e; } } android.util.Log.e(mTag, e.getMessage()); } } }",08b7a260392412ca6c2bade2f6efbb100c0725e5,"private void updateAccessRuleIfNeed() throws java.io.IOException { if ((mUseAra) && ((mAraController) != null)) { try { mAraController.initialize(); mUseArf = false; mFullAccess = false; } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { throw new java.security.AccessControlException((""No ARA applet found in "" + (mTerminal.getName()))); } } else if ((mUseArf) && ((mArfController) != null)) { try { mArfController.initialize(); } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { android.util.Log.e(mTag, e.getMessage()); } } }",18c04a18cbc1537addc53cceb1ac9c9f1ba6d332,2018-03-06 21:33:34,8
629405,src_com_android_se_security_AccessControlEnforcer.java,"private synchronized com.android.se.security.ChannelAccess internal_setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag) { if ((packageName == null) || (packageName.isEmpty())) { throw new java.security.AccessControlException(""package names must be specified""); } try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw new java.security.AccessControlException(""Application certificates are invalid or do not exist.""); } if (checkRefreshTag) { updateAccessRuleIfNeed(); } return getAccessRule(aid, appCerts); } catch (java.lang.Throwable exp) { throw new java.security.AccessControlException(exp.getMessage()); } }",8907b690eca10b71b674c544f7a381430c485b8e,"private synchronized com.android.se.security.ChannelAccess internal_setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag) throws java.io.IOException { if ((packageName == null) || (packageName.isEmpty())) { throw new java.security.AccessControlException(""package names must be specified""); } try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw new java.security.AccessControlException(""Application certificates are invalid or do not exist.""); } if (checkRefreshTag) { updateAccessRuleIfNeed(true); } return getAccessRule(aid, appCerts); } catch (java.io.IOException e) { throw e; } catch (java.lang.Throwable exp) { throw new java.security.AccessControlException(exp.getMessage()); } }",1c970c36fcd240af6d2cdfb661fd25247deafd2b,"private synchronized com.android.se.security.ChannelAccess internal_setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag) throws java.io.IOException { if ((packageName == null) || (packageName.isEmpty())) { throw new java.security.AccessControlException(""package names must be specified""); } try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw new java.security.AccessControlException(""Application certificates are invalid or do not exist.""); } if (checkRefreshTag) { updateAccessRuleIfNeed(); } return getAccessRule(aid, appCerts); } catch (java.io.IOException e) { throw e; } catch (java.lang.Throwable exp) { throw new java.security.AccessControlException(exp.getMessage()); } }",6f08e3c44670fbf600457f7f0582fac06c99c97e,2018-03-06 21:33:34,8
629405,src_com_android_se_Terminal.java,"public com.android.se.Channel openLogicalChannelWithoutChannelAccess(byte[] aid) throws android.os.RemoteException { return openLogicalChannel(null, aid, ((byte) (0)), null, null, 0); }",85fa1253eaf7cde7def467ddd36c902343e9d725,"public com.android.se.Channel openLogicalChannelWithoutChannelAccess(byte[] aid) throws java.io.IOException { try { return openLogicalChannel(null, aid, ((byte) (0)), null, null, 0); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (android.se.omapi.SEService.IO_ERROR)) { throw new java.io.IOException(e.getMessage()); } throw e; } catch (android.os.RemoteException e) { throw new java.io.IOException(e.getMessage()); } }",97030a7c7e22fe229f3398049cf6324d3923e287,"public com.android.se.Channel openLogicalChannelWithoutChannelAccess(byte[] aid) throws java.io.IOException { return openLogicalChannel(null, aid, ((byte) (0)), null, null, 0); }",bd98d2e65dab73952817d8765edc5843bb286a46,2018-03-06 21:33:34,8
629405,src_com_android_se_Terminal.java,"public com.android.se.security.ChannelAccess setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag, int pid) { if ((mAccessControlEnforcer) == null) { android.util.Log.e(mTag, ""Access Control Enforcer not properly set up""); initializeAccessControl(); } mAccessControlEnforcer.setPackageManager(mContext.getPackageManager()); synchronized(mLock) { try { com.android.se.security.ChannelAccess channelAccess = mAccessControlEnforcer.setUpChannelAccess(aid, packageName, checkRefreshTag); channelAccess.setCallingPid(pid); return channelAccess; } catch (java.lang.Exception e) { throw new java.lang.SecurityException((""Exception in setUpChannelAccess()"" + e)); } } }",c18cb03b165f21d8efa010443dcb003af77bf019,"public com.android.se.security.ChannelAccess setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag, int pid) { if ((mAccessControlEnforcer) == null) { android.util.Log.e(mTag, ""Access Control Enforcer not properly set up""); initializeAccessControl(); } mAccessControlEnforcer.setPackageManager(mContext.getPackageManager()); synchronized(mLock) { try { com.android.se.security.ChannelAccess channelAccess = mAccessControlEnforcer.setUpChannelAccess(aid, packageName, checkRefreshTag); channelAccess.setCallingPid(pid); return channelAccess; } catch (java.io.IOException e) { throw new android.os.ServiceSpecificException(android.se.omapi.SEService.IO_ERROR, e.getMessage()); } catch (java.lang.Exception e) { throw new java.lang.SecurityException((""Exception in setUpChannelAccess()"" + e)); } } }",768f53b988f1fd5ef760d4db803cd193daac5dfa,"private com.android.se.security.ChannelAccess setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag, int pid) throws java.io.IOException { if ((mAccessControlEnforcer) == null) { android.util.Log.e(mTag, ""Access Control Enforcer not properly set up""); initializeAccessControl(); } mAccessControlEnforcer.setPackageManager(mContext.getPackageManager()); synchronized(mLock) { try { com.android.se.security.ChannelAccess channelAccess = mAccessControlEnforcer.setUpChannelAccess(aid, packageName, checkRefreshTag); channelAccess.setCallingPid(pid); return channelAccess; } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { throw new java.lang.SecurityException((""Exception in setUpChannelAccess()"" + e)); } } }",1539b528d2a2d1e72d2a22c77a3700310c186e34,2018-03-06 21:33:34,8
629406,src_com_android_se_security_arf_SecureElement.java,"public byte[] exchangeAPDU(com.android.se.security.arf.pkcs15.EF ef, byte[] cmd) throws com.android.se.security.arf.SecureElementException { try { return mArfChannel.transmit(cmd); } catch (java.lang.Exception e) { throw new com.android.se.security.arf.SecureElementException((""Secure Element access error "" + (e.getLocalizedMessage()))); } }",b19eeea5700c75689befcfa86a6ca6a7898fd3cd,"public byte[] exchangeAPDU(com.android.se.security.arf.pkcs15.EF ef, byte[] cmd) throws com.android.se.security.arf.SecureElementException, java.io.IOException { try { return mArfChannel.transmit(cmd); } catch (android.os.RemoteException e) { throw new java.io.IOException(e.getMessage()); } catch (java.lang.Exception e) { if (e instanceof android.os.ServiceSpecificException) { if ((((android.os.ServiceSpecificException) (e)).errorCode) == (android.se.omapi.SEService.IO_ERROR)) { throw new java.io.IOException(e.getMessage()); } } throw new com.android.se.security.arf.SecureElementException((""Secure Element access error "" + (e.getLocalizedMessage()))); } }",ca23c99cba9dc9f36edc6244607d2452e9b44777,"public byte[] exchangeAPDU(com.android.se.security.arf.pkcs15.EF ef, byte[] cmd) throws com.android.se.security.arf.SecureElementException, java.io.IOException { try { return mArfChannel.transmit(cmd); } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { throw new com.android.se.security.arf.SecureElementException((""Secure Element access error "" + (e.getLocalizedMessage()))); } }",b654cf808bde92f78b526815b263242b1df8fa9b,2018-03-06 21:35:09,7
629406,src_com_android_se_security_ara_AccessRuleApplet.java,private com.android.se.security.ResponseApdu send(com.android.se.security.CommandApdu cmdApdu) { try { byte[] response = mChannel.transmit(cmdApdu.toBytes()); return new com.android.se.security.ResponseApdu(response); } catch (android.os.RemoteException e) { return null; } },fae07f507ca2f0c729f7a21b4619cb8260601d8e,private com.android.se.security.ResponseApdu send(com.android.se.security.CommandApdu cmdApdu) throws java.io.IOException { try { byte[] response = mChannel.transmit(cmdApdu.toBytes()); return new com.android.se.security.ResponseApdu(response); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (android.se.omapi.SEService.IO_ERROR)) { throw new java.io.IOException(e.getMessage()); } throw e; } catch (android.os.RemoteException e) { throw new java.io.IOException(e.getMessage()); } },89b4e32bd224f6eaec048d2b0f4eaf1c1812f971,private com.android.se.security.ResponseApdu send(com.android.se.security.CommandApdu cmdApdu) throws java.io.IOException { byte[] response = mChannel.transmit(cmdApdu.toBytes()); return new com.android.se.security.ResponseApdu(response); },7ef43bda8e8faea6dbb12c3ac4b3cf51939e7caf,2018-03-06 21:35:09,7
629407,src_com_android_se_security_arf_SecureElement.java,"public com.android.se.Channel openLogicalArfChannel(byte[] aid) throws java.io.IOException { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { return null; } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { android.util.Log.e(mTag, (""no channels left to access ARF: "" + (e.getMessage()))); throw ((java.util.MissingResourceException) (e)); } else { android.util.Log.e(mTag, (""Error opening logical channel "" + (e.getLocalizedMessage()))); } mArfChannel = null; return null; } }",de40d503b9b6ad6454a5feb60c7a95df9e86d760,"public com.android.se.Channel openLogicalArfChannel(byte[] aid) throws java.io.IOException { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { throw new java.util.MissingResourceException(""No channel was available"", """", """"); } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { android.util.Log.e(mTag, (""no channels left to access ARF: "" + (e.getMessage()))); throw ((java.util.MissingResourceException) (e)); } else { android.util.Log.e(mTag, (""Error opening logical channel "" + (e.getLocalizedMessage()))); } mArfChannel = null; return null; } }",e26b68c462007a657278335c33d553fab74716c2,"public com.android.se.Channel openLogicalArfChannel(byte[] aid) throws java.io.IOException { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { throw new java.util.MissingResourceException(""No channel was available"", """", """"); } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { android.util.Log.e(mTag, (""Error opening logical channel "" + (e.getLocalizedMessage()))); mArfChannel = null; return null; } }",7c10f405dd8916bf2270874e97f256e0af404e61,2018-03-06 21:37:26,7
629407,src_com_android_se_security_AccessControlEnforcer.java,"private synchronized boolean[] internal_isNfcEventAllowed(byte[] aid, java.lang.String[] packageNames, boolean checkRefreshTag) { if (checkRefreshTag) { try { updateAccessRuleIfNeed(false); } catch (java.io.IOException ignore) { } } int i = 0; boolean[] nfcEventFlags = new boolean[packageNames.length]; for (java.lang.String packageName : packageNames) { try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { nfcEventFlags[i] = false; } else { com.android.se.security.ChannelAccess channelAccess = getAccessRule(aid, appCerts); nfcEventFlags[i] = (channelAccess.getNFCEventAccess()) == (com.android.se.security.ChannelAccess.ACCESS.ALLOWED); } } catch (java.lang.Exception e) { android.util.Log.w(mTag, ("" Access Rules for NFC: "" + (e.getLocalizedMessage()))); nfcEventFlags[i] = false; } i++; } return nfcEventFlags; }",48ca1b7e6510f769600f0715dde91c9c4d2bf188,"private synchronized boolean[] internal_isNfcEventAllowed(byte[] aid, java.lang.String[] packageNames, boolean checkRefreshTag) { if (checkRefreshTag) { try { updateAccessRuleIfNeed(false); } catch (java.io.IOException ignore) { } catch (java.util.MissingResourceException ignore) { } } int i = 0; boolean[] nfcEventFlags = new boolean[packageNames.length]; for (java.lang.String packageName : packageNames) { try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { nfcEventFlags[i] = false; } else { com.android.se.security.ChannelAccess channelAccess = getAccessRule(aid, appCerts); nfcEventFlags[i] = (channelAccess.getNFCEventAccess()) == (com.android.se.security.ChannelAccess.ACCESS.ALLOWED); } } catch (java.lang.Exception e) { android.util.Log.w(mTag, ("" Access Rules for NFC: "" + (e.getLocalizedMessage()))); nfcEventFlags[i] = false; } i++; } return nfcEventFlags; }",d23839356673e0fcb38ae72d11ddb917fde4cf18,"private synchronized boolean[] internal_isNfcEventAllowed(byte[] aid, java.lang.String[] packageNames, boolean checkRefreshTag) { if (checkRefreshTag) { try { updateAccessRuleIfNeed(); } catch (java.io.IOException e) { throw new java.security.AccessControlException((""Access-Control not found in "" + (mTerminal.getName()))); } catch (java.util.MissingResourceException e) { throw new java.security.AccessControlException((""Access-Control not found in "" + (mTerminal.getName()))); } } int i = 0; boolean[] nfcEventFlags = new boolean[packageNames.length]; for (java.lang.String packageName : packageNames) { try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { nfcEventFlags[i] = false; } else { com.android.se.security.ChannelAccess channelAccess = getAccessRule(aid, appCerts); nfcEventFlags[i] = (channelAccess.getNFCEventAccess()) == (com.android.se.security.ChannelAccess.ACCESS.ALLOWED); } } catch (java.lang.Exception e) { android.util.Log.w(mTag, ("" Access Rules for NFC: "" + (e.getLocalizedMessage()))); nfcEventFlags[i] = false; } i++; } return nfcEventFlags; }",bd45b145bd1e4d84f4b5b8f8c28cf35f3ea98ec7,2018-03-06 21:37:26,7
629407,src_com_android_se_security_AccessControlEnforcer.java,"private synchronized com.android.se.security.ChannelAccess internal_setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag) throws java.io.IOException { if ((packageName == null) || (packageName.isEmpty())) { throw new java.security.AccessControlException(""package names must be specified""); } try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw new java.security.AccessControlException(""Application certificates are invalid or do not exist.""); } if (checkRefreshTag) { updateAccessRuleIfNeed(true); } return getAccessRule(aid, appCerts); } catch (java.io.IOException e) { throw e; } catch (java.lang.Throwable exp) { throw new java.security.AccessControlException(exp.getMessage()); } }",1c970c36fcd240af6d2cdfb661fd25247deafd2b,"private synchronized com.android.se.security.ChannelAccess internal_setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag) throws java.io.IOException, java.util.MissingResourceException { if ((packageName == null) || (packageName.isEmpty())) { throw new java.security.AccessControlException(""package names must be specified""); } try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw new java.security.AccessControlException(""Application certificates are invalid or do not exist.""); } if (checkRefreshTag) { updateAccessRuleIfNeed(true); } return getAccessRule(aid, appCerts); } catch (java.io.IOException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } catch (java.lang.Throwable exp) { throw new java.security.AccessControlException(exp.getMessage()); } }",903ec54d20599e9192f0c4202b0f4b7c5af490ad,"private synchronized com.android.se.security.ChannelAccess internal_setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag) throws java.io.IOException, java.util.MissingResourceException { if ((packageName == null) || (packageName.isEmpty())) { throw new java.security.AccessControlException(""package names must be specified""); } try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw new java.security.AccessControlException(""Application certificates are invalid or do not exist.""); } if (checkRefreshTag) { updateAccessRuleIfNeed(); } return getAccessRule(aid, appCerts); } catch (java.io.IOException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } catch (java.lang.Throwable exp) { throw new java.security.AccessControlException(exp.getMessage()); } }",2944c1296719eb034a81b2f479c7f0a0a98dd72c,2018-03-06 21:37:26,7
629407,src_com_android_se_security_AccessControlEnforcer.java,"private void updateAccessRuleIfNeed(boolean distinguishTemporaryError) throws java.io.IOException { if ((mUseAra) && ((mAraController) != null)) { try { mAraController.initialize(); mUseArf = false; mFullAccess = false; } catch (java.lang.Exception e) { if (distinguishTemporaryError) { if (e instanceof java.io.IOException) { throw e; } } throw new java.security.AccessControlException((""No ARA applet found in "" + (mTerminal.getName()))); } } else if ((mUseArf) && ((mArfController) != null)) { try { mArfController.initialize(); } catch (java.lang.Exception e) { if (distinguishTemporaryError) { if (e instanceof java.io.IOException) { throw e; } } android.util.Log.e(mTag, e.getMessage()); } } }",08b7a260392412ca6c2bade2f6efbb100c0725e5,"private void updateAccessRuleIfNeed(boolean distinguishTemporaryError) throws java.io.IOException { if ((mUseAra) && ((mAraController) != null)) { try { mAraController.initialize(); mUseArf = false; mFullAccess = false; } catch (java.lang.Exception e) { if (distinguishTemporaryError) { if (e instanceof java.io.IOException) { throw e; } else if (e instanceof java.util.MissingResourceException) { throw e; } } throw new java.security.AccessControlException((""No ARA applet found in "" + (mTerminal.getName()))); } } else if ((mUseArf) && ((mArfController) != null)) { try { mArfController.initialize(); } catch (java.lang.Exception e) { if (distinguishTemporaryError) { if (e instanceof java.io.IOException) { throw e; } else if (e instanceof java.util.MissingResourceException) { throw e; } } android.util.Log.e(mTag, e.getMessage()); } } }",28e3f64446e928fceee13ec61eacbb31c6e4e853,"private void updateAccessRuleIfNeed() throws java.io.IOException { if ((mUseAra) && ((mAraController) != null)) { try { mAraController.initialize(); mUseArf = false; mFullAccess = false; } catch (java.io.IOException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } catch (java.lang.Exception e) { throw new java.security.AccessControlException((""No ARA applet found in "" + (mTerminal.getName()))); } } else if ((mUseArf) && ((mArfController) != null)) { try { mArfController.initialize(); } catch (java.io.IOException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } catch (java.lang.Exception e) { android.util.Log.e(mTag, e.getMessage()); } } }",226ee43166feb1f6154286289e9b88cac6830a8d,2018-03-06 21:37:26,7
632765,src_com_android_se_Terminal.java,"private byte[] transmitInternal(byte[] cmd) throws android.os.RemoteException { java.util.ArrayList<java.lang.Byte> response = mSEHal.transmit(byteArrayToArrayList(cmd)); if (response.isEmpty()) { throw new android.os.ServiceSpecificException(android.se.omapi.SEService.IO_ERROR, ""Error in transmit()""); } byte[] rsp = arrayListToByteArray(response); if (mDebug) { android.util.Log.i(mTag, (""Sent : "" + (com.android.se.internal.ByteArrayConverter.byteArrayToHexString(cmd)))); android.util.Log.i(mTag, (""Received : "" + (com.android.se.internal.ByteArrayConverter.byteArrayToHexString(rsp)))); } return rsp; }",9626473ecb35e54e7cc2d2388c7a3e72a88a7c96,"private byte[] transmitInternal(byte[] cmd) throws android.os.RemoteException { java.util.ArrayList<java.lang.Byte> response = mSEHal.transmit(byteArrayToArrayList(cmd)); if (response.isEmpty()) { throw new android.os.ServiceSpecificException(android.se.omapi.SEService.IO_ERROR, ""Error in transmit()""); } byte[] rsp = arrayListToByteArray(response); if (DEBUG) { android.util.Log.i(mTag, (""Sent : "" + (com.android.se.internal.ByteArrayConverter.byteArrayToHexString(cmd)))); android.util.Log.i(mTag, (""Received : "" + (com.android.se.internal.ByteArrayConverter.byteArrayToHexString(rsp)))); } return rsp; }",5564595db6cfeaa8702f740136ba631b5d67e1f2,"private byte[] transmitInternal(byte[] cmd) throws java.io.IOException { java.util.ArrayList<java.lang.Byte> response; try { response = mSEHal.transmit(byteArrayToArrayList(cmd)); } catch (android.os.RemoteException e) { throw new java.io.IOException(e.getMessage()); } if (response.isEmpty()) { throw new java.io.IOException(""Error in transmit()""); } byte[] rsp = arrayListToByteArray(response); if (com.android.se.Terminal.DEBUG) { android.util.Log.i(mTag, (""Sent : "" + (com.android.se.internal.ByteArrayConverter.byteArrayToHexString(cmd)))); android.util.Log.i(mTag, (""Received : "" + (com.android.se.internal.ByteArrayConverter.byteArrayToHexString(rsp)))); } return rsp; }",a01ab3af093e53bfcc7d9f32b6d7237c52dcd9b6,2018-03-06 21:56:28,4
629007,src_com_android_bluetooth_btservice_AdapterState.java,public void setBleTurningOff(boolean isBleTurningOff) { mIsBleTurningOff = isBleTurningOff; },3502661f334150fedf36ed401625ce13e1dd3a9d,"@java.lang.Override public void enter() { super.enter(); sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT, com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT_DELAY); mAdapterService.startCoreServices(); }",d169fc5fd8bda8a5bffc57a41a2ab716412e15ca,@java.lang.Override public void exit() { removeMessages(com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT); super.exit(); },df0dfd525135b3b5726cdffcc52db14c0b274150,2018-03-07 00:25:43,14
629008,src_com_android_bluetooth_btservice_AdapterService.java,"void startCoreServices() { debugLog(""startCoreServices()""); java.lang.Class[] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles(); setAllProfileServiceStates(supportedProfileServices, BluetoothAdapter.STATE_ON); }",4a36459da7edec365f01777090b18df3dc2a365d,"void startCoreServices() { debugLog(""startCoreServices()""); java.lang.Class[] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles(); if (((supportedProfileServices.length) == 1) && (((mRunningProfiles.size()) == 1) && (com.android.bluetooth.gatt.GattService.class.getSimpleName().equals(mRunningProfiles.get(0).getName())))) { mAdapterStateMachine.sendMessage(AdapterState.BREDR_STARTED); } else { setAllProfileServiceStates(supportedProfileServices, BluetoothAdapter.STATE_ON); } }",7d9e6dd4435230c79e2dfbef0473ff8c47627eaa,void bringDownBle() { stopGattProfileService(); },4d33355382b7d5ada2dcfeac45bc9a4f44f841a9,2018-03-07 00:25:43,15
629008,src_com_android_bluetooth_btservice_AdapterService.java,"boolean stopGattProfileService() { mAdapterProperties.onBleDisable(); if ((mRunningProfiles.size()) == 0) { debugLog(""stopGattProfileService() - No profiles services to stop.""); mAdapterStateMachine.sendMessage(AdapterState.BLE_STOPPED); } setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); return true; }",47b62da32bfbc91bd2563ea4558bed055e688457,"void stopGattProfileService() { mAdapterProperties.onBleDisable(); if ((mRunningProfiles.size()) == 0) { debugLog(""stopGattProfileService() - No profiles services to stop.""); mAdapterStateMachine.sendMessage(AdapterState.BLE_STOPPED); } setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); }",2fa31e50a2924ca8d0a3bb75f4b498017a88ee3e,"private void stopGattProfileService() { mAdapterProperties.onBleDisable(); if ((mRunningProfiles.size()) == 0) { debugLog(""stopGattProfileService() - No profiles services to stop.""); mAdapterStateMachine.sendMessage(AdapterState.BLE_STOPPED); } setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); }",a6e0239a6dad39acfd0c81d121f7563bc1a2da56,2018-03-07 00:25:43,15
629007,src_com_android_bluetooth_btservice_AdapterService.java,"boolean stopGattProfileService() { setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); return true; }",97bac3539c85c58544fa626302e92c849927c900,"boolean stopGattProfileService() { mAdapterProperties.onBleDisable(); if ((mRunningProfiles.size()) == 0) { debugLog(""stopGattProfileService() - No profiles services to stop.""); mAdapterStateMachine.sendMessage(AdapterState.BLE_STOPPED); } setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); return true; }",47b62da32bfbc91bd2563ea4558bed055e688457,"private void stopGattProfileService() { mAdapterProperties.onBleDisable(); if ((mRunningProfiles.size()) == 0) { debugLog(""stopGattProfileService() - No profiles services to stop.""); mAdapterStateMachine.sendMessage(AdapterState.BLE_STOPPED); } setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); }",a6e0239a6dad39acfd0c81d121f7563bc1a2da56,2018-03-07 00:25:43,14
629007,src_com_android_bluetooth_btservice_AdapterService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"boolean enableNativeFromStateMachine() { boolean isGuest = android.os.UserManager.get(this).isGuestUser(); android.util.Log.d(""ATST"", (""enableNativeUser() - isGuest = "" + isGuest)); return enableNative(isGuest); }",49240f2d863543820f0029566fe62323579f1714,"private void enableNativeWithGuestFlag() { boolean isGuest = android.os.UserManager.get(this).isGuestUser(); if (!(enableNative(isGuest))) { android.util.Log.e(com.android.bluetooth.btservice.AdapterService.TAG, ""enableNative() returned false""); } }",a220a0465c4c1d2fca0ac574c4fa3536e09da970,2018-03-07 00:25:43,14
629007,src_com_android_bluetooth_btservice_AdapterService.java,public void onBrEdrDown() { mAdapterStateMachine.sendMessage(AdapterState.USER_TURN_OFF); },13a15dc424d7a006161d1d5b86624c6be04db645,public void onBrEdrDown() { mAdapterStateMachine.sendMessage(AdapterState.BLE_TURN_OFF); },bce49eb2408b20cbecefd334474052b0616906a9,void onBrEdrDown() { mAdapterStateMachine.sendMessage(AdapterState.BLE_TURN_OFF); },c8bcb62e1d382a8eb55c0ba195fa79da9a3b5483,2018-03-07 00:25:43,14
629007,src_com_android_bluetooth_btservice_AdapterService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void stateChangeCallback(int status) { if (status == (AbstractionLayer.BT_STATE_OFF)) { mAdapterStateMachine.sendMessage(AdapterState.DISABLED_NATIVE); } else if (status == (AbstractionLayer.BT_STATE_ON)) { mAdapterStateMachine.sendMessage(AdapterState.ENABLED_NATIVE); } else { android.util.Log.e(""TAG"", ((""Incorrect status "" + status) + "" in stateChangeCallback"")); } }",05b4f51bd6bc5fd70f7bcd5c296d53f11e43e302,"void stateChangeCallback(int status) { if (status == (AbstractionLayer.BT_STATE_OFF)) { debugLog(""stateChangeCallback: disableNative() completed""); } else if (status == (AbstractionLayer.BT_STATE_ON)) { mAdapterStateMachine.sendMessage(AdapterState.BLE_STARTED); } else { android.util.Log.e(com.android.bluetooth.btservice.AdapterService.TAG, ((""Incorrect status "" + status) + "" in stateChangeCallback"")); } }",dd399a72eae0d9853f6518ee4fd7df43c827e44f,2018-03-07 00:25:43,14
629007,src_com_android_bluetooth_btservice_AdapterState.java,"@java.lang.Override public boolean processMessage(android.os.Message msg) { com.android.bluetooth.btservice.AdapterService adapterService = mAdapterService; com.android.bluetooth.btservice.AdapterProperties adapterProperties = mAdapterProperties; if ((adapterService == null) || (adapterProperties == null)) { errorLog((""Received message in BleOnState after cleanup: "" + (msg.what))); return false; } debugLog((""Current state: BLE ON, message: "" + (msg.what))); switch (msg.what) { case com.android.bluetooth.btservice.AdapterState.USER_TURN_ON : notifyAdapterStateChange(BluetoothAdapter.STATE_TURNING_ON); mPendingCommandState.setTurningOn(true); transitionTo(mPendingCommandState); sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT, com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT_DELAY); adapterService.startCoreServices(); break; case com.android.bluetooth.btservice.AdapterState.USER_TURN_OFF : notifyAdapterStateChange(BluetoothAdapter.STATE_BLE_TURNING_OFF); mPendingCommandState.setBleTurningOff(true); adapterProperties.onBleDisable(); transitionTo(mPendingCommandState); sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.DISABLE_TIMEOUT, com.android.bluetooth.btservice.AdapterState.DISABLE_TIMEOUT_DELAY); boolean ret = adapterService.disableNative(); if (!ret) { removeMessages(com.android.bluetooth.btservice.AdapterState.DISABLE_TIMEOUT); errorLog(""Error while calling disableNative""); mPendingCommandState.setBleTurningOff(false); notifyAdapterStateChange(BluetoothAdapter.STATE_BLE_ON); } break; default : return false; } return true; }",76e706814360627c7c12e678212b952e360df7b1,"@java.lang.Override public boolean processMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.btservice.AdapterState.BLE_STARTED : mAdapterService.enableNativeFromStateMachine(); break; case com.android.bluetooth.btservice.AdapterState.ENABLED_NATIVE : transitionTo(mBleOnState); break; case com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT : errorLog(messageString(msg.what)); transitionTo(mOffState); break; default : infoLog((""Unhandled message - "" + (messageString(msg.what)))); return false; } return true; }",4ba15a81f2b19da57f0a3958baec36888aa7f964,"@java.lang.Override public boolean processMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.btservice.AdapterState.BLE_STARTED : transitionTo(mBleOnState); break; case com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT : errorLog(messageString(msg.what)); transitionTo(mTurningBleOffState); break; default : infoLog((""Unhandled message - "" + (messageString(msg.what)))); return false; } return true; }",3b8b8249446f9e76ea01c21066c0a6623e1453ab,2018-03-07 00:25:43,14
629007,src_com_android_bluetooth_btservice_AdapterState.java,"private void notifyAdapterStateChange(int newState) { com.android.bluetooth.btservice.AdapterService adapterService = mAdapterService; com.android.bluetooth.btservice.AdapterProperties adapterProperties = mAdapterProperties; if ((adapterService == null) || (adapterProperties == null)) { errorLog((""notifyAdapterStateChange after cleanup:"" + newState)); return; } int oldState = adapterProperties.getState(); adapterProperties.setState(newState); infoLog((((""Bluetooth adapter state changed: "" + (android.bluetooth.BluetoothAdapter.nameForState(oldState))) + ""-> "") + (android.bluetooth.BluetoothAdapter.nameForState(newState)))); adapterService.updateAdapterState(oldState, newState); }",a50c3bb55d2b97d0daac3f46cb4b83773df38618,"private java.lang.String messageString(int message) { switch (message) { case com.android.bluetooth.btservice.AdapterState.BLE_TURN_ON : return ""BLE_TURN_ON""; case com.android.bluetooth.btservice.AdapterState.USER_TURN_ON : return ""USER_TURN_ON""; case com.android.bluetooth.btservice.AdapterState.BREDR_STARTED : return ""BREDR_STARTED""; case com.android.bluetooth.btservice.AdapterState.ENABLED_NATIVE : return ""ENABLED_NATIVE""; case com.android.bluetooth.btservice.AdapterState.BLE_STARTED : return ""BLE_STARTED""; case com.android.bluetooth.btservice.AdapterState.USER_TURN_OFF : return ""USER_TURN_OFF""; case com.android.bluetooth.btservice.AdapterState.BLE_TURN_OFF : return ""BLE_TURN_OFF""; case com.android.bluetooth.btservice.AdapterState.DISABLED_NATIVE : return ""DISABLED_NATIVE""; case com.android.bluetooth.btservice.AdapterState.BLE_STOPPED : return ""BLE_STOPPED""; case com.android.bluetooth.btservice.AdapterState.BREDR_STOPPED : return ""BREDR_STOPPED""; case com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT : return ""BLE_START_TIMEOUT""; case com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT : return ""BLE_STOP_TIMEOUT""; case com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT : return ""BREDR_START_TIMEOUT""; case com.android.bluetooth.btservice.AdapterState.BREDR_STOP_TIMEOUT : return ""BREDR_STOP_TIMEOUT""; default : return (""Unknown message ("" + message) + "")""; } }",c0b272a8afd917347c99d90702202bfc8043c672,"private java.lang.String messageString(int message) { switch (message) { case com.android.bluetooth.btservice.AdapterState.BLE_TURN_ON : return ""BLE_TURN_ON""; case com.android.bluetooth.btservice.AdapterState.USER_TURN_ON : return ""USER_TURN_ON""; case com.android.bluetooth.btservice.AdapterState.BREDR_STARTED : return ""BREDR_STARTED""; case com.android.bluetooth.btservice.AdapterState.BLE_STARTED : return ""BLE_STARTED""; case com.android.bluetooth.btservice.AdapterState.USER_TURN_OFF : return ""USER_TURN_OFF""; case com.android.bluetooth.btservice.AdapterState.BLE_TURN_OFF : return ""BLE_TURN_OFF""; case com.android.bluetooth.btservice.AdapterState.BLE_STOPPED : return ""BLE_STOPPED""; case com.android.bluetooth.btservice.AdapterState.BREDR_STOPPED : return ""BREDR_STOPPED""; case com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT : return ""BLE_START_TIMEOUT""; case com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT : return ""BLE_STOP_TIMEOUT""; case com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT : return ""BREDR_START_TIMEOUT""; case com.android.bluetooth.btservice.AdapterState.BREDR_STOP_TIMEOUT : return ""BREDR_STOP_TIMEOUT""; default : return (""Unknown message ("" + message) + "")""; } }",608d6e2a2839f87562870213566d0aa5dcd338d9,2018-03-07 00:25:43,14
629007,src_com_android_bluetooth_btservice_AdapterState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void exit() { removeMessages(com.android.bluetooth.btservice.AdapterState.BREDR_STOP_TIMEOUT); },df36f8f93180312cf244e5d20bb9ef0d261f35a1,@java.lang.Override public void exit() { removeMessages(com.android.bluetooth.btservice.AdapterState.BREDR_STOP_TIMEOUT); super.exit(); },b926e3b81d4821aa26762fa5a89adfb054176cad,2018-03-07 00:25:43,14
629007,src_com_android_bluetooth_btservice_AdapterState.java,"private void infoLog(java.lang.String msg) { if (com.android.bluetooth.btservice.AdapterState.DBG) { android.util.Log.i(com.android.bluetooth.btservice.AdapterState.TAG, msg); } }",bedb494cb6264935d690a88d89c39ac817aed8d5,@java.lang.Override public void exit() { removeMessages(com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT); },c4a42f49fa9b638417a701dfe39bc29a73b17476,@java.lang.Override public void exit() { removeMessages(com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT); super.exit(); },309232d74df2970ea8a67dfd16c6d34a3e8e562c,2018-03-07 00:25:43,14
629007,src_com_android_bluetooth_btservice_AdapterState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public boolean processMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.btservice.AdapterState.BLE_STOPPED : transitionTo(mOffState); break; case com.android.bluetooth.btservice.AdapterState.DISABLED_NATIVE : mAdapterService.stopGattProfileService(); break; case com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT : errorLog(messageString(msg.what)); transitionTo(mOffState); break; default : infoLog((""Unhandled message - "" + (messageString(msg.what)))); return false; } return true; }",142ff4289f4ed88c80b1953d3c3012f2f8749299,"@java.lang.Override public boolean processMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.btservice.AdapterState.BLE_STOPPED : transitionTo(mOffState); break; case com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT : errorLog(messageString(msg.what)); transitionTo(mOffState); break; default : infoLog((""Unhandled message - "" + (messageString(msg.what)))); return false; } return true; }",086b0fba3c35b10cda173fd78ec9fcc1697176e7,2018-03-07 00:25:43,14
629007,src_com_android_bluetooth_btservice_AdapterState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void exit() { removeMessages(com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT); },b7c98faba7500e2e63b46d6f4889e13cf7e021a0,@java.lang.Override public void exit() { removeMessages(com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT); super.exit(); },c3e1b324e5e387e92c818d3da7cd58e8bed9cfd3,2018-03-07 00:25:43,14
629007,src_com_android_bluetooth_btservice_AdapterState.java,"@java.lang.Override public void enter() { infoLog(""Entering PendingCommandState""); }",2faa237dc1762d3dec48fe0cce122bb7720974ee,@java.lang.Override public void enter() { super.enter(); mAdapterService.updateUuids(); mAdapterService.setBluetoothClassFromConfig(); },c5ec3cd50a73f2e41ab64e0b4b59a4cb31711898,"@java.lang.Override public void enter() { super.enter(); sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT, com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT_DELAY); mAdapterService.startProfileServices(); }",24995311e361f872f0ec50b48e4b7b7166021d03,2018-03-07 00:25:43,14
629007,src_com_android_bluetooth_btservice_AdapterState.java,"private void logTransientStates() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(""PendingCommand - transient state(s):""); if (isTurningOn()) { sb.append("" isTurningOn""); } if (isTurningOff()) { sb.append("" isTurningOff""); } if (isBleTurningOn()) { sb.append("" isBleTurningOn""); } if (isBleTurningOff()) { sb.append("" isBleTurningOff""); } verboseLog(sb.toString()); }",951dcf0b5efa5e18064071fe84b4d433c8f9bc7e,"@java.lang.Override public void enter() { super.enter(); sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT, com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT_DELAY); mAdapterService.disableNative(); }",3e1534f07814b8a9f130788c85d637907fc19599,"@java.lang.Override public void enter() { super.enter(); sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT, com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT_DELAY); mAdapterService.bringDownBle(); }",73e2d42d01231f9e6f53142984deefbba57b0f2a,2018-03-07 00:25:43,14
629007,src_com_android_bluetooth_btservice_AdapterState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public boolean processMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.btservice.AdapterState.BREDR_STARTED : transitionTo(mOnState); break; case com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT : errorLog(messageString(msg.what)); transitionTo(mBleOnState); break; default : infoLog((""Unhandled message - "" + (messageString(msg.what)))); return false; } return true; }",732730d4e06cb29abb8fda2f3ac625664d1eb003,"@java.lang.Override public boolean processMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.btservice.AdapterState.BREDR_STARTED : transitionTo(mOnState); break; case com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT : errorLog(messageString(msg.what)); transitionTo(mTurningOffState); break; default : infoLog((""Unhandled message - "" + (messageString(msg.what)))); return false; } return true; }",a13abc12720341ab324f8c64a9b489fe72850a5f,2018-03-07 00:25:43,14
629007,src_com_android_bluetooth_btservice_AdapterState.java,"@java.lang.Override public void enter() { infoLog(""Entering BleOnState""); }",91ac9d77d75330110f3d17ab405053d3a8cde3d3,"@java.lang.Override public void enter() { super.enter(); mAdapterService.bleOnProcessStart(); sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT, com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT_DELAY); }",c81e38c25b4efa0a66c1d266fbc39ac16a8d95d6,"@java.lang.Override public void enter() { super.enter(); sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT, com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT_DELAY); mAdapterService.bringUpBle(); }",f950e4d04385b8cd8162b1ea181283bcfa1e14d1,2018-03-07 00:25:43,14
632132,src_com_android_bluetooth_hearingaid_HearingAidService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.android.bluetooth.hearingaid.HearingAidStateMachine getOrCreateStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""getOrCreateStateMachine failed: device cannot be null""); return null; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm != null) { return sm; } if ((mStateMachines.size()) > (com.android.bluetooth.hearingaid.HearingAidService.MAX_HearingAid_STATE_MACHINES)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""Maximum number of HearingAid state machines reached: "" + (com.android.bluetooth.hearingaid.HearingAidService.MAX_HearingAid_STATE_MACHINES))); return null; } if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""Creating a new state machine for "" + device)); } sm = com.android.bluetooth.hearingaid.HearingAidStateMachine.make(device, this, mHearingAidNativeInterface, mStateMachinesThread.getLooper()); mStateMachines.put(device, sm); return sm; } }",56add187d679c47cf1dccb3da435d95e80055f3d,"private com.android.bluetooth.hearingaid.HearingAidStateMachine getOrCreateStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""getOrCreateStateMachine failed: device cannot be null""); return null; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm != null) { return sm; } if ((mStateMachines.size()) > (com.android.bluetooth.hearingaid.HearingAidService.MAX_HEARING_AID_STATE_MACHINES)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""Maximum number of HearingAid state machines reached: "" + (com.android.bluetooth.hearingaid.HearingAidService.MAX_HEARING_AID_STATE_MACHINES))); return null; } if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""Creating a new state machine for "" + device)); } sm = com.android.bluetooth.hearingaid.HearingAidStateMachine.make(device, this, mStateMachinesThread.getLooper()); mStateMachines.put(device, sm); return sm; } }",ed21a7e501d6ac378e8d38ef0d330a4e65c40447,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidStateMachine.java,,,"@java.lang.Override public void exit() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (((""Exit Disconnected("" + (mDevice)) + ""): "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; }",f12f5a666064cf35c389abc3ebe9b17e045fa3ad,"@java.lang.Override public void exit() { log((((""Exit Disconnected("" + (mDevice)) + ""): "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; }",cdcc737a2e202b0beef6f9a146657529d72a823e,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidStateMachine.java,,,"public void doQuit() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (""doQuit for device "" + (mDevice))); } quitNow(); }",ad1e299130d91fcbfcbf1677925c09989436a3da,"public void doQuit() { log((""doQuit for device "" + (mDevice))); quitNow(); }",7bc70b21d84a3ba299a70899d37d5d2443b901ac,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidStateMachine.java,,,"@java.lang.Override public void enter() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (((""Enter Disconnected("" + (mDevice)) + ""): "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); mConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; removeDeferredMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.DISCONNECT); removeMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT_TIMEOUT); if ((mLastConnectionState) != (-1)) { broadcastConnectionState(mConnectionState, mLastConnectionState); if (mIsPlaying) { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (""Disconnected: stopped playing: "" + (mDevice))); mIsPlaying = false; broadcastAudioState(BluetoothHearingAid.STATE_NOT_PLAYING, BluetoothHearingAid.STATE_PLAYING); } } }",b895796fbc66222334a24d85ab19f5d989681917,"@java.lang.Override public void enter() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (((""Enter Disconnected("" + (mDevice)) + ""): "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); mConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; removeDeferredMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.DISCONNECT); removeMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT_TIMEOUT); if ((mLastConnectionState) != (-1)) { broadcastConnectionState(mConnectionState, mLastConnectionState); } }",60ef3b3ef4546d69542a7349729b0f147d5eef28,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidStateMachine.java,,,"@java.lang.Override public void exit() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (((""Exit Connected("" + (mDevice)) + ""): "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTED; }",1281795ef2e61ec2e5480f71d98a1d2510539469,"@java.lang.Override public void exit() { log((((""Exit Connected("" + (mDevice)) + ""): "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTED; }",a26145ae8d3eb2a981ecc2f01085caf00a75482a,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidStateMachine.java,,,"static com.android.bluetooth.hearingaid.HearingAidStateMachine make(android.bluetooth.BluetoothDevice device, com.android.bluetooth.hearingaid.HearingAidService svc, com.android.bluetooth.hearingaid.HearingAidNativeInterface hearingAidNativeInterface, android.os.Looper looper) { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (""make for device "" + device)); com.android.bluetooth.hearingaid.HearingAidStateMachine HearingAidSm = new com.android.bluetooth.hearingaid.HearingAidStateMachine(device, svc, hearingAidNativeInterface, looper); HearingAidSm.start(); return HearingAidSm; }",42d368c358b98a7abd5becf7b4b39c1c7942e847,"static com.android.bluetooth.hearingaid.HearingAidStateMachine make(android.bluetooth.BluetoothDevice device, com.android.bluetooth.hearingaid.HearingAidService svc, android.os.Looper looper) { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (""make for device "" + device)); com.android.bluetooth.hearingaid.HearingAidStateMachine HearingAidSm = new com.android.bluetooth.hearingaid.HearingAidStateMachine(device, svc, looper); HearingAidSm.start(); return HearingAidSm; }",5afcd7fcccd4046cd9a9528e71a921ec6d84b787,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidStateMachine.java,,,"private void broadcastConnectionState(int newState, int prevState) { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (((((""Connection state "" + (mDevice)) + "": "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.profileStateToString(prevState))) + ""->"") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.profileStateToString(newState)))); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND))); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }",9f4ba6143e5dd8100f77fbee29dd14889c1db626,"private void broadcastConnectionState(int newState, int prevState) { log((((((""Connection state "" + (mDevice)) + "": "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.profileStateToString(prevState))) + ""->"") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.profileStateToString(newState)))); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND))); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }",1d982f2ba299a7f513ec4f7d4177288a0b4dc057,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidStateMachine.java,,,"@java.lang.Override public void exit() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (((""Exit Disconnecting("" + (mDevice)) + ""): "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTING; removeMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT_TIMEOUT); }",4c27ab12ec4abf66c8c17996337b559d474d2f19,"@java.lang.Override public void exit() { log((((""Exit Disconnecting("" + (mDevice)) + ""): "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTING; removeMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT_TIMEOUT); }",466450f642b6755152956263f550bf37a5974016,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidStateMachine.java,,,"@java.lang.Override public void exit() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (((""Exit Connecting("" + (mDevice)) + ""): "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTING; removeMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT_TIMEOUT); }",3e4984287e50149bae0f755ccdda226980c5a761,"@java.lang.Override public void exit() { log((((""Exit Connecting("" + (mDevice)) + ""): "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTING; removeMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT_TIMEOUT); }",507d6d581b5c09125f90c2b01eaf3d4a6b840c0a,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidStateMachine.java,,,"private static java.lang.String audioStateToString(int state) { switch (state) { case android.bluetooth.BluetoothHearingAid.STATE_PLAYING : return ""PLAYING""; case android.bluetooth.BluetoothHearingAid.STATE_NOT_PLAYING : return ""NOT_PLAYING""; default : break; } return java.lang.Integer.toString(state); }",9b2b928d7580ad2f79868e3499f06f1b823d94c2,@java.lang.Override protected void log(java.lang.String msg) { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { super.log(msg); } },479c8656be28cd9e552b11f37228b70d76cfd163,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidStateMachine.java,,,"public void cleanup() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (""cleanup for device "" + (mDevice))); } }",89bff0f5bbb02ab4ef99bb6573d49e9110e37fc4,"public void cleanup() { log((""cleanup for device "" + (mDevice))); }",2b70e3bdb1ae092d4475f5fa53f5fa0e05f7c408,2018-03-07 00:42:45,10
632132,tests_unit_src_com_android_bluetooth_hearingaid_HearingAidStateMachineTest.java,,,"@org.junit.Before public void setUp() throws java.lang.Exception { mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); org.junit.Assume.assumeTrue(""Ignore test when HearingAidService is not enabled"", mTargetContext.getResources().getBoolean(R.bool.profile_supported_hearing_aid)); org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); mHandlerThread = new android.os.HandlerThread(""HearingAidStateMachineTestHandlerThread""); mHandlerThread.start(); mHearingAidStateMachine = new com.android.bluetooth.hearingaid.HearingAidStateMachine(mTestDevice, mHearingAidService, mHearingAidNativeInterface, mHandlerThread.getLooper()); mHearingAidStateMachine.sConnectTimeoutMs = 1000; mHearingAidStateMachine.start(); }",3edd5f23fc236a8d64fa51596e9da4441bb7eb55,"@org.junit.Before public void setUp() throws java.lang.Exception { mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); org.junit.Assume.assumeTrue(""Ignore test when HearingAidService is not enabled"", mTargetContext.getResources().getBoolean(R.bool.profile_supported_hearing_aid)); org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); mHandlerThread = new android.os.HandlerThread(""HearingAidStateMachineTestHandlerThread""); mHandlerThread.start(); mHearingAidStateMachine = new com.android.bluetooth.hearingaid.HearingAidStateMachine(mTestDevice, mHearingAidService, mHandlerThread.getLooper()); mHearingAidStateMachine.sConnectTimeoutMs = 1000; mHearingAidStateMachine.start(); }",0a6c5b9a88f41deb74e0d91314b80cd364dd4d3a,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidStateMachine.java,,,"@java.lang.Override public void enter() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (((""Enter Connected("" + (mDevice)) + ""): "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); mConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTED; removeDeferredMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT); broadcastConnectionState(mConnectionState, mLastConnectionState); broadcastAudioState(BluetoothHearingAid.STATE_NOT_PLAYING, BluetoothHearingAid.STATE_PLAYING); }",e6b896c89bf12a9716856f76f5dcf151f2bb3129,"@java.lang.Override public void enter() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (((""Enter Connected("" + (mDevice)) + ""): "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); mConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTED; removeDeferredMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT); broadcastConnectionState(mConnectionState, mLastConnectionState); }",216169cbf1c6562c053363ad788088028edca2f6,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidService.java,"private synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { }",4f2f42afcdbfb06ffeb7864e9797140fb57bb0c6,"private synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { return; } if ((toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && ((getConnectedDevices().size()) == 1)) { setActiveDevice(device); } if ((toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) && ((getConnectedDevices().size()) == 0)) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { removeStateMachine(device); } } }",47976c245c3ccc23b73a6ccd7c242b7f494c0f25,"private synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { removeStateMachine(device); } } }",c44fbc2a58f4e59e2f76a49f3294e3d2ad28073b,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidService.java,"@java.lang.Override protected boolean start() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""start()""); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) != null) { throw new java.lang.IllegalStateException(""start() called twice""); } mAdapter = java.util.Objects.requireNonNull(android.bluetooth.BluetoothAdapter.getDefaultAdapter(), ""BluetoothAdapter cannot be null when HearingAidService starts""); mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapterService(), ""AdapterService cannot be null when HearingAidService starts""); mStateMachinesThread = new android.os.HandlerThread(""HearingAidService.StateMachines""); mStateMachinesThread.start(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.BondStateChangedReceiver(); registerReceiver(mBondStateChangedReceiver, filter); filter = new android.content.IntentFilter(); filter.addAction(BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); mConnectionStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(this); setActiveDevice(null); return true; }",1840b73b6bb68ebdc06dbbaa44ee4dacb6a7fd86,"@java.lang.Override protected boolean start() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""start()""); if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) != null) { throw new java.lang.IllegalStateException(""start() called twice""); } mAdapter = java.util.Objects.requireNonNull(android.bluetooth.BluetoothAdapter.getDefaultAdapter(), ""BluetoothAdapter cannot be null when HearingAidService starts""); mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapterService(), ""AdapterService cannot be null when HearingAidService starts""); mHearingAidNativeInterface = java.util.Objects.requireNonNull(com.android.bluetooth.hearingaid.HearingAidNativeInterface.getInstance(), ""HearingAidNativeInterface cannot be null when HearingAidService starts""); mStateMachines.clear(); mStateMachinesThread = new android.os.HandlerThread(""HearingAidService.StateMachines""); mStateMachinesThread.start(); mHearingAidNativeInterface.init(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.BondStateChangedReceiver(); registerReceiver(mBondStateChangedReceiver, filter); filter = new android.content.IntentFilter(); filter.addAction(BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); mConnectionStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(this); setActiveDevice(null); return true; }",3bf999b010f3e695ab0c2489eda2977448282fc5,"@java.lang.Override protected boolean start() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""start()""); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) != null) { throw new java.lang.IllegalStateException(""start() called twice""); } mAdapter = java.util.Objects.requireNonNull(android.bluetooth.BluetoothAdapter.getDefaultAdapter(), ""BluetoothAdapter cannot be null when HearingAidService starts""); mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapterService(), ""AdapterService cannot be null when HearingAidService starts""); mStateMachines.clear(); mStateMachinesThread = new android.os.HandlerThread(""HearingAidService.StateMachines""); mStateMachinesThread.start(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.BondStateChangedReceiver(); registerReceiver(mBondStateChangedReceiver, filter); filter = new android.content.IntentFilter(); filter.addAction(BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); mConnectionStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(this); setActiveDevice(null); return true; }",33e17dc33e9272c0a715110614045c0fd5591ffd,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidService.java,"java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); return new java.util.ArrayList<>(); }",4d6d33037aaf1f8aedbc03af6e3a7f098de45a2e,"java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); java.util.Set<android.bluetooth.BluetoothDevice> bondedDevices = mAdapter.getBondedDevices(); for (android.bluetooth.BluetoothDevice device : bondedDevices) { android.os.ParcelUuid[] featureUuids = device.getUuids(); if (!(android.bluetooth.BluetoothUuid.isUuidPresent(featureUuids, BluetoothUuid.AudioSink))) { continue; } int connectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm != null) { connectionState = sm.getConnectionState(); } for (int i = 0; i < (states.length); i++) { if (connectionState == (states[i])) { devices.add(device); } } } return devices; } }",e0a60325290a5762a56ae03a796757e91a6993a9,"java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); java.util.Set<android.bluetooth.BluetoothDevice> bondedDevices = mAdapter.getBondedDevices(); for (android.bluetooth.BluetoothDevice device : bondedDevices) { android.os.ParcelUuid[] featureUuids = device.getUuids(); if (!(android.bluetooth.BluetoothUuid.isUuidPresent(featureUuids, BluetoothUuid.HearingAid))) { continue; } int connectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm != null) { connectionState = sm.getConnectionState(); } for (int i = 0; i < (states.length); i++) { if (connectionState == (states[i])) { devices.add(device); } } } return devices; } }",e9c3edf313813b6168a3e7d59b6146b812754b23,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidService.java,"boolean okToConnect(android.bluetooth.BluetoothDevice device) { throw new java.lang.IllegalStateException(""Implement me""); }",6c6552b9c7ab96853de226929cacac1f2137c721,"@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : quiet mode enabled"")); return false; } if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : too many connected devices"")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE))) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((((""okToConnect: cannot connect to "" + device) + "" : priority="") + priority) + "" bondState="") + bondState)); return false; } if (priority <= (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((""okToConnect: cannot connect to "" + device) + "" : priority="") + priority)); return false; } return true; }",83f0db06b746c4b7533a813cac2a124537025c9d,"@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : quiet mode enabled"")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE))) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((((""okToConnect: cannot connect to "" + device) + "" : priority="") + priority) + "" bondState="") + bondState)); return false; } if (priority <= (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((""okToConnect: cannot connect to "" + device) + "" : priority="") + priority)); return false; } return true; }",223a9d53c68491d3d72ea9e6be18cdbce01393a0,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidService.java,"@java.lang.Override protected boolean stop() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""stop()""); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""stop() called before start()""); return true; } setActiveDevice(null); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(null); unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; if ((mStateMachinesThread) != null) { mStateMachinesThread.quitSafely(); mStateMachinesThread = null; } mAdapterService = null; mAdapter = null; return true; }",65794a3b515081fe0d7daaf0f8d0e6dee30f24d3,"@java.lang.Override protected boolean stop() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""stop()""); if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""stop() called before start()""); return true; } setActiveDevice(null); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(null); unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; mHearingAidNativeInterface.cleanup(); mHearingAidNativeInterface = null; synchronized(mStateMachines) { for (com.android.bluetooth.hearingaid.HearingAidStateMachine sm : mStateMachines.values()) { sm.doQuit(); sm.cleanup(); } mStateMachines.clear(); } if ((mStateMachinesThread) != null) { mStateMachinesThread.quitSafely(); mStateMachinesThread = null; } mHearingAidNativeInterface = null; mAdapterService = null; mAdapter = null; return true; }",9239a1bbd4350ed9b04e29f7ae27bf106ca2dc2a,"@java.lang.Override protected boolean stop() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""stop()""); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""stop() called before start()""); return true; } setActiveDevice(null); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(null); unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; synchronized(mStateMachines) { for (com.android.bluetooth.hearingaid.HearingAidStateMachine sm : mStateMachines.values()) { sm.doQuit(); sm.cleanup(); } mStateMachines.clear(); } if ((mStateMachinesThread) != null) { mStateMachinesThread.quitSafely(); mStateMachinesThread = null; } mAdapterService = null; mAdapter = null; return true; }",4eae75e3f2cb3db4ff4e634c78e663f16b32bc1e,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidService.java,"public synchronized boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); return false; }",c4431babe7850fde60bf01ffb59dc6d81cf51850,"public synchronized boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (device != null) { com.android.bluetooth.a2dp.A2dpService a2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); a2dpService.setActiveDevice(null); } mActiveDevice = device; return true; }",7dc81dbf5ce623be2978dbc346cde8db0c32aee5,"public synchronized boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); return false; }",c4431babe7850fde60bf01ffb59dc6d81cf51850,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidService.java,@java.lang.Override public void setVolume(int volume) { },f3efe8d1107e18ff54cf5633d8ad826e7f4b5f37,@java.lang.Override public void setVolume(int volume) { volume = ((volume * 512) / 100) - 128; com.android.bluetooth.hearingaid.HearingAidNativeInterface.setVolume(volume); },1e1d187a72d69233c6e463411d2729a3897f4cc3,@java.lang.Override public void setVolume(int volume) { volume = ((volume * 512) / 100) - 128; },1f02367a5ed163d32313353262afb74dfcdc7ff3,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidService.java,"boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""disconnect(): "" + device)); } return false; }",ff3533155c04210822066e038ebaaf93fc3965af,"boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""disconnect(): "" + device)); } int customerId = mDeviceMap.get(device); for (android.bluetooth.BluetoothDevice storedDevice : mDeviceMap.keySet()) { if ((mDeviceMap.get(storedDevice)) != customerId) { continue; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""Ignored disconnect request for "" + device) + "" : no state machine"")); continue; } sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } return true; }",4106f6114c90073f6a7e32de240bcd0abe9cad8f,"boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""disconnect(): "" + device)); } int hiSyncId = mDeviceMap.get(device); for (android.bluetooth.BluetoothDevice storedDevice : mDeviceMap.keySet()) { if ((mDeviceMap.get(storedDevice)) != hiSyncId) { continue; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""Ignored disconnect request for "" + device) + "" : no state machine"")); continue; } sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } return true; }",2f885ec605b5974d25cf5b0f9291b8d787a0e0ab,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidService.java,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (!(BluetoothDevice.ACTION_BOND_STATE_CHANGED.equals(intent.getAction()))) { return; } int state = intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.ERROR); android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((""Bond state changed for device: "" + device) + "" state: "") + state)); } if (state != (android.bluetooth.BluetoothDevice.BOND_NONE)) { return; } }",282ecdc6afc957cc2cca6166fddd4c08f85fdb69,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (!(BluetoothDevice.ACTION_BOND_STATE_CHANGED.equals(intent.getAction()))) { return; } int state = intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.ERROR); android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((""Bond state changed for device: "" + device) + "" state: "") + state)); } if (state != (android.bluetooth.BluetoothDevice.BOND_NONE)) { return; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm == null) { return; } if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""Removing state machine for device: "" + device)); } sm.doQuit(); sm.cleanup(); mStateMachines.remove(device); } }",ff98e1ef4fb9c219d0ed4da7acaf321cde4a2f98,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (!(BluetoothDevice.ACTION_BOND_STATE_CHANGED.equals(intent.getAction()))) { return; } int state = intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.ERROR); android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); java.util.Objects.requireNonNull(device, ""ACTION_BOND_STATE_CHANGED with no EXTRA_DEVICE""); bondStateChanged(device, state); }",1806cfa26aca1404999e797da78c9ef1ebabd078,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidService.java,"@java.lang.Override protected void cleanup() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""cleanup()""); } }",53eb5c2716669ba65608747bee926cea8a1f539a,"@java.lang.Override protected void cleanup() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""cleanup()""); }",10ea50afa67812fda650d99b834131689a2d7733,"@java.lang.Override protected void cleanup() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""cleanup()""); } }",53eb5c2716669ba65608747bee926cea8a1f539a,2018-03-07 00:42:45,10
632132,src_com_android_bluetooth_hearingaid_HearingAidService.java,"@java.lang.Override protected void create() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""create()""); } }",4b5f43f7a9481ca809029c9434427a284f45b8cd,"@java.lang.Override protected void create() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""create()""); }",09fd5e4250d4c385af9ee62d5a40be8de11a4284,"@java.lang.Override protected void create() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""create()""); } }",4b5f43f7a9481ca809029c9434427a284f45b8cd,2018-03-07 00:42:45,10
632510,src_java_com_android_internal_telephony_RIL.java,"static android.telephony.SignalStrength convertHalSignalStrength(android.hardware.radio.V1_0.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gw.signalStrength, signalStrength.gw.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, signalStrength.tdScdma.rscp); }",e57bcf8b8562b960e926686c67ed71d197db6aa6,"static android.telephony.SignalStrength convertHalSignalStrength(android.hardware.radio.V1_0.SignalStrength signalStrength) { int tdscdmaRsrp_1_2 = 255; if (((signalStrength.tdScdma.rscp) >= 25) && ((signalStrength.tdScdma.rscp) <= 120)) { tdscdmaRsrp_1_2 = 120 - (signalStrength.tdScdma.rscp); } return new android.telephony.SignalStrength(signalStrength.gw.signalStrength, signalStrength.gw.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, tdscdmaRsrp_1_2); }",c1106812d6e7420aeb79dc0a64b81cc48f2fdf16,"static android.telephony.SignalStrength convertHalSignalStrength(android.hardware.radio.V1_0.SignalStrength signalStrength) { int tdscdmaRscp_1_2 = 255; if (((signalStrength.tdScdma.rscp) >= 25) && ((signalStrength.tdScdma.rscp) <= 120)) { int rscpDbm = -(signalStrength.tdScdma.rscp); tdscdmaRscp_1_2 = rscpDbm + 120; } return new android.telephony.SignalStrength(signalStrength.gw.signalStrength, signalStrength.gw.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, tdscdmaRscp_1_2); }",a341100d3aeaba891b094db895b7febf3d89ffc5,2018-03-07 02:05:32,6
632510,src_java_com_android_internal_telephony_RIL.java,"static android.telephony.SignalStrength convertHalSignalStrength_1_2(android.hardware.radio.V1_2.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gsm.signalStrength, signalStrength.gsm.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, signalStrength.tdScdma.rscp); }",bcd832f38d7b20fee7a87214b92fb40a4ac0b930,"static android.telephony.SignalStrength convertHalSignalStrength_1_2(android.hardware.radio.V1_2.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gsm.signalStrength, signalStrength.gsm.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, tdscdmaRsrp_1_2); }",6f1b91b4524ab3b333781d4e7d4c042926b5fd44,"static android.telephony.SignalStrength convertHalSignalStrength_1_2(android.hardware.radio.V1_2.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gsm.signalStrength, signalStrength.gsm.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, signalStrength.tdScdma.rscp, signalStrength.wcdma.base.signalStrength, signalStrength.wcdma.rscp); }",6bdc8dff5a75e31c221a4c856357b348f2f97dce,2018-03-07 02:05:32,6
633907,tests_telephonytests_src_com_android_internal_telephony_RILTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public android.telephony.SignalStrength getTdScdmaSignalStrength_1_0(int tdscdmaNegDbm) { android.hardware.radio.V1_0.SignalStrength halSs = new android.hardware.radio.V1_0.SignalStrength(); halSs.lte.signalStrength = com.android.internal.telephony.RILTest.SIGNAL_STRENGTH; halSs.lte.rsrp = com.android.internal.telephony.RILTest.RSRP; halSs.lte.rsrq = com.android.internal.telephony.RILTest.RSRQ; halSs.lte.rssnr = com.android.internal.telephony.RILTest.RSSNR; halSs.gw.signalStrength = com.android.internal.telephony.RILTest.SIGNAL_STRENGTH; halSs.gw.bitErrorRate = com.android.internal.telephony.RILTest.BIT_ERROR_RATE; halSs.cdma.dbm = com.android.internal.telephony.RILTest.DBM; halSs.cdma.ecio = com.android.internal.telephony.RILTest.ECIO; halSs.evdo.dbm = com.android.internal.telephony.RILTest.DBM; halSs.evdo.ecio = com.android.internal.telephony.RILTest.ECIO; halSs.evdo.signalNoiseRatio = com.android.internal.telephony.RILTest.SIGNAL_NOICE_RATIO; halSs.tdScdma.rscp = tdscdmaNegDbm; return com.android.internal.telephony.RIL.convertHalSignalStrength(halSs); },2fddfd52c5031ebba957c540370cea01f741b3f9,public android.telephony.SignalStrength getTdScdmaSignalStrength_1_0(int tdscdmaNegDbm) { android.hardware.radio.V1_0.SignalStrength halSs = new android.hardware.radio.V1_0.SignalStrength(); halSs.lte.signalStrength = com.android.internal.telephony.RILTest.SIGNAL_STRENGTH; halSs.lte.rsrp = com.android.internal.telephony.RILTest.RSRP; halSs.lte.rsrq = com.android.internal.telephony.RILTest.RSRQ; halSs.lte.rssnr = com.android.internal.telephony.RILTest.RSSNR; halSs.gw.signalStrength = com.android.internal.telephony.RILTest.SIGNAL_STRENGTH; halSs.gw.bitErrorRate = com.android.internal.telephony.RILTest.BIT_ERROR_RATE; halSs.cdma.dbm = com.android.internal.telephony.RILTest.DBM; halSs.cdma.ecio = com.android.internal.telephony.RILTest.ECIO; halSs.evdo.dbm = com.android.internal.telephony.RILTest.DBM; halSs.evdo.ecio = com.android.internal.telephony.RILTest.ECIO; halSs.evdo.signalNoiseRatio = com.android.internal.telephony.RILTest.SIGNAL_NOISE_RATIO; halSs.tdScdma.rscp = tdscdmaNegDbm; android.telephony.SignalStrength ss = com.android.internal.telephony.RIL.convertHalSignalStrength(halSs); ss.validateInput(); return ss; },6c91f4f37dd37c6dabba00fc57b4576658e8c7e2,2018-03-07 02:05:32,2
633907,tests_telephonytests_src_com_android_internal_telephony_RILTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public android.telephony.SignalStrength getTdScdmaSignalStrength_1_2(int tdscdmaAsu) { android.hardware.radio.V1_2.SignalStrength halSs = new android.hardware.radio.V1_2.SignalStrength(); halSs.lte.signalStrength = com.android.internal.telephony.RILTest.SIGNAL_STRENGTH; halSs.lte.rsrp = com.android.internal.telephony.RILTest.RSRP; halSs.lte.rsrq = com.android.internal.telephony.RILTest.RSRQ; halSs.lte.rssnr = com.android.internal.telephony.RILTest.RSSNR; halSs.gsm.signalStrength = com.android.internal.telephony.RILTest.SIGNAL_STRENGTH; halSs.gsm.bitErrorRate = com.android.internal.telephony.RILTest.BIT_ERROR_RATE; halSs.cdma.dbm = com.android.internal.telephony.RILTest.DBM; halSs.cdma.ecio = com.android.internal.telephony.RILTest.ECIO; halSs.evdo.dbm = com.android.internal.telephony.RILTest.DBM; halSs.evdo.ecio = com.android.internal.telephony.RILTest.ECIO; halSs.evdo.signalNoiseRatio = com.android.internal.telephony.RILTest.SIGNAL_NOICE_RATIO; halSs.tdScdma.rscp = tdscdmaAsu; return com.android.internal.telephony.RIL.convertHalSignalStrength_1_2(halSs); },663cd808c87fb431b9a24d28b7aa4b88088e84a1,public android.telephony.SignalStrength getTdScdmaSignalStrength_1_2(int tdscdmaAsu) { android.hardware.radio.V1_2.SignalStrength halSs = new android.hardware.radio.V1_2.SignalStrength(); halSs.lte.signalStrength = com.android.internal.telephony.RILTest.SIGNAL_STRENGTH; halSs.lte.rsrp = com.android.internal.telephony.RILTest.RSRP; halSs.lte.rsrq = com.android.internal.telephony.RILTest.RSRQ; halSs.lte.rssnr = com.android.internal.telephony.RILTest.RSSNR; halSs.gsm.signalStrength = com.android.internal.telephony.RILTest.SIGNAL_STRENGTH; halSs.gsm.bitErrorRate = com.android.internal.telephony.RILTest.BIT_ERROR_RATE; halSs.cdma.dbm = com.android.internal.telephony.RILTest.DBM; halSs.cdma.ecio = com.android.internal.telephony.RILTest.ECIO; halSs.evdo.dbm = com.android.internal.telephony.RILTest.DBM; halSs.evdo.ecio = com.android.internal.telephony.RILTest.ECIO; halSs.evdo.signalNoiseRatio = com.android.internal.telephony.RILTest.SIGNAL_NOISE_RATIO; halSs.wcdma.base.signalStrength = 99; halSs.wcdma.rscp = 255; halSs.tdScdma.rscp = tdscdmaAsu; android.telephony.SignalStrength ss = com.android.internal.telephony.RIL.convertHalSignalStrength_1_2(halSs); ss.validateInput(); return ss; },9040ba66b51d30525a5da07ecb7df90df688a158,2018-03-07 02:05:32,2
628453,ojluni_src_main_java_java_lang_System.java,"public static void arraycopy(float[] src, int srcPos, float[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_FLOAT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyFloatUnchecked(src, srcPos, dst, dstPos, length); } }",257503f5fd3804aac364b1b32666151668a89c0f,"private static void arraycopy(float[] src, int srcPos, float[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_FLOAT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyFloatUnchecked(src, srcPos, dst, dstPos, length); } }",b1c4a3c65cbecdd97a46a7932143bada7732948b,"@java.lang.SuppressWarnings(""unused"") private static void arraycopy(float[] src, int srcPos, float[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_FLOAT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyFloatUnchecked(src, srcPos, dst, dstPos, length); } }",ff1990277c0ff7885c34947edc5cbcae24a64562,2018-03-07 13:11:40,6
628453,ojluni_src_main_java_java_lang_System.java,"public static void arraycopy(long[] src, int srcPos, long[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_LONG_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyLongUnchecked(src, srcPos, dst, dstPos, length); } }",f2e20b16d36a57d8acaf14f5fd49843cd2e005fd,"private static void arraycopy(long[] src, int srcPos, long[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_LONG_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyLongUnchecked(src, srcPos, dst, dstPos, length); } }",90f81158a8d05c1ae7f02ee774bc1d7592f97946,"@java.lang.SuppressWarnings(""unused"") private static void arraycopy(long[] src, int srcPos, long[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_LONG_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyLongUnchecked(src, srcPos, dst, dstPos, length); } }",7774975685c1bf69efa87f37f0fd1a1ed0084b0f,2018-03-07 13:11:40,6
628453,ojluni_src_main_java_java_lang_System.java,"public static void arraycopy(char[] src, int srcPos, char[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_CHAR_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyCharUnchecked(src, srcPos, dst, dstPos, length); } }",eaf4ef5fa9d6d878e89405cef26c1eefb1a9c634,"private static void arraycopy(char[] src, int srcPos, char[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_CHAR_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyCharUnchecked(src, srcPos, dst, dstPos, length); } }",566355eb044ebc0b6b427638417c5a52a68d24e4,"@java.lang.SuppressWarnings(""unused"") private static void arraycopy(char[] src, int srcPos, char[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_CHAR_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyCharUnchecked(src, srcPos, dst, dstPos, length); } }",22e7ae1db67cb02574dd8a227872c01d8d8133dc,2018-03-07 13:11:40,6
628453,ojluni_src_main_java_java_lang_System.java,"public static void arraycopy(byte[] src, int srcPos, byte[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_BYTE_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyByteUnchecked(src, srcPos, dst, dstPos, length); } }",0fead53f74054a2feb3c685146be61f029813634,"private static void arraycopy(byte[] src, int srcPos, byte[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_BYTE_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyByteUnchecked(src, srcPos, dst, dstPos, length); } }",e5f7f8c92ffed6fb319c042e71717d03a1a7bdcc,"@java.lang.SuppressWarnings(""unused"") public static void arraycopy(byte[] src, int srcPos, byte[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_BYTE_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyByteUnchecked(src, srcPos, dst, dstPos, length); } }",0f84c5a4a2052c805e138598e617110a8b55243a,2018-03-07 13:11:40,6
628453,ojluni_src_main_java_java_lang_System.java,"public static void arraycopy(double[] src, int srcPos, double[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_DOUBLE_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyDoubleUnchecked(src, srcPos, dst, dstPos, length); } }",bbae2b4227481b8679c68ca2ee0cfdd8c1f7fef6,"private static void arraycopy(double[] src, int srcPos, double[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_DOUBLE_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyDoubleUnchecked(src, srcPos, dst, dstPos, length); } }",42abb1c50ad20c3d50c8399f59e25fc23f577085,"@java.lang.SuppressWarnings(""unused"") private static void arraycopy(double[] src, int srcPos, double[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_DOUBLE_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyDoubleUnchecked(src, srcPos, dst, dstPos, length); } }",db0ad6352b95a76115ee0fb93145eba41f3c72a9,2018-03-07 13:11:40,6
628453,ojluni_src_main_java_java_lang_System.java,"public static void arraycopy(boolean[] src, int srcPos, boolean[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_BOOLEAN_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyBooleanUnchecked(src, srcPos, dst, dstPos, length); } }",9c06dbb96d3554c98f2a8bb053e43a8a04353526,"private static void arraycopy(boolean[] src, int srcPos, boolean[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_BOOLEAN_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyBooleanUnchecked(src, srcPos, dst, dstPos, length); } }",964cc413f79d4c19d7eaf72d784eeba8584c0503,"@java.lang.SuppressWarnings(""unused"") private static void arraycopy(boolean[] src, int srcPos, boolean[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_BOOLEAN_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyBooleanUnchecked(src, srcPos, dst, dstPos, length); } }",922b434ab878d29627d89996a4be670bcf3cc5e0,2018-03-07 13:11:40,6
628453,ojluni_src_main_java_java_lang_System.java,"public static void arraycopy(short[] src, int srcPos, short[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_SHORT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyShortUnchecked(src, srcPos, dst, dstPos, length); } }",dd308f0a11df9e7e9345a63a0658b54dedefdb1e,"private static void arraycopy(short[] src, int srcPos, short[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_SHORT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyShortUnchecked(src, srcPos, dst, dstPos, length); } }",34e834dce2b0864188a5a0a122c9d9676646dfb7,"@java.lang.SuppressWarnings(""unused"") private static void arraycopy(short[] src, int srcPos, short[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_SHORT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyShortUnchecked(src, srcPos, dst, dstPos, length); } }",7789fffd578146557756e20465f7893b11968cbf,2018-03-07 13:11:40,6
628453,ojluni_src_main_java_java_lang_System.java,"public static void arraycopy(int[] src, int srcPos, int[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_INT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyIntUnchecked(src, srcPos, dst, dstPos, length); } }",3bd3e507f68a4a9fd431900072260b4be2e6e557,"private static void arraycopy(int[] src, int srcPos, int[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_INT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyIntUnchecked(src, srcPos, dst, dstPos, length); } }",8cb5bb0c42ced74c37e33d0e2a1439b37bf3c992,"@java.lang.SuppressWarnings(""unused"") private static void arraycopy(int[] src, int srcPos, int[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_INT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyIntUnchecked(src, srcPos, dst, dstPos, length); } }",e8ebee4ecefb78a26673aa8b7e00929db5774070,2018-03-07 13:11:40,6
634845,services_core_java_com_android_server_pm_PackageDexOptimizer.java,"private int getDexFlags(android.content.pm.ApplicationInfo info, java.lang.String compilerFilter, com.android.server.pm.dex.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) != 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = (!(info.isForwardLocked())) && ((!isProfileGuidedFilter) || (options.isDexoptInstallWithDexMetadata())); int profileFlag = (isProfileGuidedFilter) ? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int hiddenApiFlag = (info.isAllowedToUseHiddenApi()) ? 0 : com.android.server.pm.Installer.DEXOPT_ENABLE_HIDDEN_API_CHECKS; int dexFlags = (((((isPublic ? com.android.server.pm.Installer.DEXOPT_PUBLIC : 0) | (debuggable ? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | profileFlag) | (options.isBootComplete() ? com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE : 0)) | (options.isDexoptIdleBackgroundJob() ? com.android.server.pm.Installer.DEXOPT_IDLE_BACKGROUND_JOB : 0)) | hiddenApiFlag; return adjustDexoptFlags(dexFlags); }",2b78d0b060cad9667de0d6975b62e211cd0c651b,"private int getDexFlags(android.content.pm.ApplicationInfo info, java.lang.String compilerFilter, com.android.server.pm.dex.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) != 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = (!(info.isForwardLocked())) && ((!isProfileGuidedFilter) || (options.isDexoptInstallWithDexMetadata())); int profileFlag = (isProfileGuidedFilter) ? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int hiddenApiFlag = (info.isAllowedToUseHiddenApi()) ? 0 : com.android.server.pm.Installer.DEXOPT_ENABLE_HIDDEN_API_CHECKS; final int compilationReason = options.getCompilationReason(); final boolean generateCompactDex = ((compilationReason != (PackageManagerService.REASON_FIRST_BOOT)) && (compilationReason != (PackageManagerService.REASON_BOOT))) && (compilationReason != (PackageManagerService.REASON_INSTALL)); int dexFlags = ((((((isPublic ? com.android.server.pm.Installer.DEXOPT_PUBLIC : 0) | (debuggable ? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | profileFlag) | (options.isBootComplete() ? com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE : 0)) | (options.isDexoptIdleBackgroundJob() ? com.android.server.pm.Installer.DEXOPT_IDLE_BACKGROUND_JOB : 0)) | (generateCompactDex ? com.android.server.pm.Installer.DEXOPT_GENERATE_COMPACT_DEX : 0)) | hiddenApiFlag; return adjustDexoptFlags(dexFlags); }",40658869be8049cb49aad3a42b12e2072792196f,"private int getDexFlags(android.content.pm.ApplicationInfo info, java.lang.String compilerFilter, com.android.server.pm.dex.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) != 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = (!(info.isForwardLocked())) && ((!isProfileGuidedFilter) || (options.isDexoptInstallWithDexMetadata())); int profileFlag = (isProfileGuidedFilter) ? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int hiddenApiFlag = (info.isAllowedToUseHiddenApi()) ? 0 : com.android.server.pm.Installer.DEXOPT_ENABLE_HIDDEN_API_CHECKS; final int compilationReason = options.getCompilationReason(); boolean generateCompactDex = true; switch (compilationReason) { case PackageManagerService.REASON_FIRST_BOOT : case PackageManagerService.REASON_BOOT : case PackageManagerService.REASON_INSTALL : generateCompactDex = false; } int dexFlags = ((((((isPublic ? com.android.server.pm.Installer.DEXOPT_PUBLIC : 0) | (debuggable ? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | profileFlag) | (options.isBootComplete() ? com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE : 0)) | (options.isDexoptIdleBackgroundJob() ? com.android.server.pm.Installer.DEXOPT_IDLE_BACKGROUND_JOB : 0)) | (generateCompactDex ? com.android.server.pm.Installer.DEXOPT_GENERATE_COMPACT_DEX : 0)) | hiddenApiFlag; return adjustDexoptFlags(dexFlags); }",5794cb63038daea325d6ba2096ccc059a3aeee23,2018-03-07 19:53:18,2
623326,src_java_com_android_internal_telephony_RatRatcheter.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static boolean updateBandwidths(int[] bandwidths, android.telephony.ServiceState serviceState) { if (bandwidths == null) { return false; } int ssAggregateBandwidth = 0; int[] ssBandwidths = serviceState.getCellBandwidths(); if (ssBandwidths != null) { for (int bw : ssBandwidths) { ssAggregateBandwidth += bw; } } int newAggregateBandwidth = 0; for (int bw : bandwidths) { newAggregateBandwidth += bw; } if (newAggregateBandwidth > ssAggregateBandwidth) { serviceState.setCellBandwidths(bandwidths); return true; } return false; }",f80ff2d0c7cd5d50b63658071985506ac8caec7f,"public static boolean updateBandwidths(int[] bandwidths, android.telephony.ServiceState serviceState) { if (bandwidths == null) { return false; } int ssAggregateBandwidth = java.util.Arrays.stream(serviceState.getCellBandwidths()).sum(); int newAggregateBandwidth = java.util.Arrays.stream(bandwidths).sum(); if (newAggregateBandwidth > ssAggregateBandwidth) { serviceState.setCellBandwidths(bandwidths); return true; } return false; }",f2c72980756657e75f6851a7a080292e6ef04011,2018-03-07 21:12:53,4
623326,src_java_com_android_internal_telephony_RatRatcheter.java,"public int ratchetRat(int oldRat, int newRat) { synchronized(mRatFamilyMap) { final android.util.SparseIntArray oldFamily = mRatFamilyMap.get(oldRat); if (oldFamily == null) return newRat; final android.util.SparseIntArray newFamily = mRatFamilyMap.get(newRat); if (newFamily != oldFamily) return newRat; final int oldRatRank = newFamily.get(oldRat, (-1)); final int newRatRank = newFamily.get(newRat, (-1)); return oldRatRank > newRatRank ? oldRat : newRat; } }",897e55ee7824eadd19a113c1640f02e0841c0866,"public void ratchet(android.telephony.ServiceState oldSS, android.telephony.ServiceState newSS) { int newVoiceRat = ratchetRat(oldSS.getRilVoiceRadioTechnology(), newSS.getRilVoiceRadioTechnology()); int newDataRat = ratchetRat(oldSS.getRilDataRadioTechnology(), newSS.getRilDataRadioTechnology()); boolean newUsingCA = (oldSS.isUsingCarrierAggregation()) || (newSS.isUsingCarrierAggregation()); if (isSameRatFamily(oldSS, newSS)) { com.android.internal.telephony.RatRatcheter.updateBandwidths(oldSS.getCellBandwidths(), newSS); } newSS.setRilVoiceRadioTechnology(newVoiceRat); newSS.setRilDataRadioTechnology(newDataRat); newSS.setIsUsingCarrierAggregation(newUsingCA); }",b78d9f750291a75a328b8a730313686e8caf8096,"public void ratchet(android.telephony.ServiceState oldSS, android.telephony.ServiceState newSS) { int newVoiceRat = ratchetRat(oldSS.getRilVoiceRadioTechnology(), newSS.getRilVoiceRadioTechnology()); int newDataRat = ratchetRat(oldSS.getRilDataRadioTechnology(), newSS.getRilDataRadioTechnology()); if (isSameRatFamily(oldSS, newSS)) { com.android.internal.telephony.RatRatcheter.updateBandwidths(oldSS.getCellBandwidths(), newSS); } boolean newUsingCA = ((oldSS.isUsingCarrierAggregation()) || (newSS.isUsingCarrierAggregation())) || ((newSS.getCellBandwidths().length) > 1); newSS.setRilVoiceRadioTechnology(newVoiceRat); newSS.setRilDataRadioTechnology(newDataRat); newSS.setIsUsingCarrierAggregation(newUsingCA); }",1c50e40bb01bae021b78aaf78204b641ac1ed1d3,2018-03-07 21:12:53,4
633724,system_image_uitests_app_src_androidTest_java_com_android_devtools_systemimage_uitest_smoke_CameraTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""14578821"") public void testVideoCapture() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); if ((testFramework.getApi()) >= 24) { boolean videoTestSuccess = useCamera(instrumentation, ""Video""); org.junit.Assert.assertTrue(""New video was not deleted from the gallery"", videoTestSuccess); } }",abbea3617212dc5f534f9e89b4af3c82bc44ad93,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""ab5f9585-433b-4261-bd15-5c7136f6127b"") public void testVideoCapture() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); if ((testFramework.getApi()) >= 24) { boolean videoTestSuccess = useCamera(instrumentation, ""Video""); org.junit.Assert.assertTrue(""New video was not deleted from the gallery"", videoTestSuccess); } }",c0a89e8136877e26ca26dd6f602a610c53a83460,2018-03-07 21:57:19,2
633724,system_image_uitests_app_src_androidTest_java_com_android_devtools_systemimage_uitest_smoke_CameraTest.java,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""ab5f9585-433b-4261-bd15-5c7136f6127b"") public void testPhotoCapture() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); java.lang.String originalPhotoList = listPhotos(instrumentation); if ((testFramework.getApi()) >= 24) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launchPath(instrumentation, new java.lang.String[]{ ""Camera"" }); new com.android.devtools.systemimage.uitest.watchers.CameraAccessPermissionsWatcher(device).checkForCondition(); android.support.test.uiautomator.UiObject shutterButton = device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.CAMERA_SHUTTER_BUTTON_RES)); if (shutterButton.waitForExists(3L)) { shutterButton.clickAndWaitForNewWindow(); } java.lang.String newPhotoList = listPhotos(instrumentation); org.junit.Assert.assertFalse(""Photo gallery has not been updated"", originalPhotoList.equals(newPhotoList)); android.support.test.uiautomator.UiObject photoThumbnail = device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.CAMERA_PHOTO_THUMBNAIL_RES)); if (photoThumbnail.waitForExists(3L)) { photoThumbnail.clickAndWaitForNewWindow(); } android.support.test.uiautomator.UiObject trashCan = device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.CAMERA_PHOTO_DELETE_RES)); if (trashCan.waitForExists(3L)) { trashCan.click(); } device.pressBack(); device.pressHome(); java.lang.String lastPhotoList = listPhotos(instrumentation); org.junit.Assert.assertTrue(""New photo was not deleted"", originalPhotoList.equals(lastPhotoList)); } }",ba7de5fdfab51d29ab6a3e3015a99ccf7736910c,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""14578821"") public void testPhotoCapture() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); if ((testFramework.getApi()) >= 24) { boolean photoTestSuccess = useCamera(instrumentation, ""Camera""); org.junit.Assert.assertTrue(""New photo was not deleted from the gallery"", photoTestSuccess); } }",174d7e16c4f13dbb388c61ee448353fcdde6bfd1,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""ab5f9585-433b-4261-bd15-5c7136f6127b"") public void testPhotoCapture() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); if ((testFramework.getApi()) >= 24) { boolean photoTestSuccess = useCamera(instrumentation, ""Camera""); org.junit.Assert.assertTrue(""New photo was not deleted from the gallery"", photoTestSuccess); } }",d47e230f3ae3a18b699cbb53278355b76d78779f,2018-03-07 21:57:19,2
571083,src_com_android_stk_StkAppService.java,"private void launchInputActivity(int slotId) { android.content.Intent newIntent = new android.content.Intent(android.content.Intent.ACTION_VIEW); java.lang.String targetActivity = com.android.stk.StkAppService.STK_INPUT_ACTIVITY_NAME; java.lang.String uriString = (com.android.stk.StkAppService.STK_INPUT_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, (""launchInputActivity, slotId: "" + slotId)); newIntent.setFlags(((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId)))); newIntent.setClassName(com.android.stk.StkAppService.PACKAGE_NAME, targetActivity); newIntent.putExtra(""INPUT"", mStkContext[slotId].mCurrentCmd.geInput()); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); newIntent.setData(uriData); mContext.startActivity(newIntent); }",858b485a221be94081e01e94291cd3d63d24a1c5,"private void launchInputActivity(int slotId) { android.content.Intent newIntent = new android.content.Intent(android.content.Intent.ACTION_VIEW); java.lang.String targetActivity = com.android.stk.StkAppService.STK_INPUT_ACTIVITY_NAME; java.lang.String uriString = (com.android.stk.StkAppService.STK_INPUT_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, (""launchInputActivity, slotId: "" + slotId)); newIntent.setFlags(((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId)))); newIntent.setClassName(com.android.stk.StkAppService.PACKAGE_NAME, targetActivity); newIntent.putExtra(""INPUT"", mStkContext[slotId].mCurrentCmd.geInput()); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); newIntent.setData(uriData); startActivity(newIntent); }",7e6c43b1fcc3494c59eb8a96cb2110c80a5d0251,"private void launchInputActivity(int slotId) { android.content.Intent newIntent = new android.content.Intent(android.content.Intent.ACTION_VIEW); java.lang.String targetActivity = com.android.stk.StkAppService.STK_INPUT_ACTIVITY_NAME; java.lang.String uriString = (com.android.stk.StkAppService.STK_INPUT_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); com.android.internal.telephony.cat.Input input = mStkContext[slotId].mCurrentCmd.geInput(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, (""launchInputActivity, slotId: "" + slotId)); newIntent.setFlags(((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId)))); newIntent.setClassName(com.android.stk.StkAppService.PACKAGE_NAME, targetActivity); newIntent.putExtra(""INPUT"", input); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); newIntent.setData(uriData); if (input != null) { notifyUserIfNecessary(slotId, input.text); } startActivity(newIntent); }",50db2035aeb2048dae8ae8584c00a54dacc35bc1,2018-03-07 21:57:50,4
515836,src_com_android_stk_StkMenuActivity.java,"@java.lang.Override protected void onRestoreInstanceState(android.os.Bundle savedInstanceState) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, (""onRestoreInstanceState: "" + (mSlotId))); mState = savedInstanceState.getInt(""STATE""); mStkMenu = savedInstanceState.getParcelable(""MENU""); mAcceptUsersInput = savedInstanceState.getBoolean(""ACCEPT_USERS_INPUT""); }",03d70651038f2d4e1a616824e903db0cf8bcb6b4,"@java.lang.Override protected void onRestoreInstanceState(android.os.Bundle savedInstanceState) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, (""onRestoreInstanceState: "" + (mSlotId))); mState = savedInstanceState.getInt(com.android.stk.StkMenuActivity.STATE_KEY); mStkMenu = savedInstanceState.getParcelable(com.android.stk.StkMenuActivity.MENU_KEY); mAcceptUsersInput = savedInstanceState.getBoolean(com.android.stk.StkMenuActivity.ACCEPT_USERS_INPUT_KEY); mIsResponseSent = savedInstanceState.getBoolean(com.android.stk.StkMenuActivity.RESPONSE_SENT_KEY); }",289ae56c7e9e668b65f0b92f1a564a374b892fed,"@java.lang.Override protected void onRestoreInstanceState(android.os.Bundle savedInstanceState) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, (""onRestoreInstanceState: "" + (mSlotId))); mState = savedInstanceState.getInt(com.android.stk.StkMenuActivity.STATE_KEY); mStkMenu = savedInstanceState.getParcelable(com.android.stk.StkMenuActivity.MENU_KEY); mAcceptUsersInput = savedInstanceState.getBoolean(com.android.stk.StkMenuActivity.ACCEPT_USERS_INPUT_KEY); if (!(mAcceptUsersInput)) { if (((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) && (appService.isMainMenuAvailable(mSlotId))) { mAcceptUsersInput = true; } else { showProgressBar(true); } } mIsResponseSent = savedInstanceState.getBoolean(com.android.stk.StkMenuActivity.RESPONSE_SENT_KEY); }",ba991acac628cdb095efadbff4df2b726f095394,2018-03-07 23:39:38,4
515836,src_com_android_stk_StkMenuActivity.java,"@java.lang.Override public void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""onCreate""); android.app.ActionBar actionBar = getActionBar(); actionBar.setCustomView(R.layout.stk_title); actionBar.setDisplayShowCustomEnabled(true); setContentView(R.layout.stk_menu_list); mInstance = this; mTitleTextView = ((android.widget.TextView) (findViewById(R.id.title_text))); mTitleIconView = ((android.widget.ImageView) (findViewById(R.id.title_icon))); mProgressView = ((android.widget.ProgressBar) (findViewById(R.id.progress_bar))); mContext = getBaseContext(); mAcceptUsersInput = true; getListView().setOnCreateContextMenuListener(this); if ((appService) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""onCreate - appService is null""); finish(); return; } initFromIntent(getIntent()); }",97b46a5fadda9b8d45159388bbfaebaec8f7a6fe,"@java.lang.Override public void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""onCreate""); android.app.ActionBar actionBar = getActionBar(); actionBar.setCustomView(R.layout.stk_title); actionBar.setDisplayShowCustomEnabled(true); setContentView(R.layout.stk_menu_list); mInstance = this; mTitleTextView = ((android.widget.TextView) (findViewById(R.id.title_text))); mTitleIconView = ((android.widget.ImageView) (findViewById(R.id.title_icon))); mProgressView = ((android.widget.ProgressBar) (findViewById(R.id.progress_bar))); mContext = getBaseContext(); mAcceptUsersInput = true; getListView().setOnCreateContextMenuListener(this); if ((appService) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""onCreate - appService is null""); finish(); return; } initFromIntent(getIntent()); }",4c51ef34f635ce3b8fe04e6b1ba98880759cb0f4,"@java.lang.Override public void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""onCreate""); android.app.ActionBar actionBar = getActionBar(); actionBar.setCustomView(R.layout.stk_title); actionBar.setDisplayShowCustomEnabled(true); setContentView(R.layout.stk_menu_list); mInstance = this; mTitleTextView = ((android.widget.TextView) (findViewById(R.id.title_text))); mTitleIconView = ((android.widget.ImageView) (findViewById(R.id.title_icon))); mProgressView = ((android.widget.ProgressBar) (findViewById(R.id.progress_bar))); mContext = getBaseContext(); getListView().setOnCreateContextMenuListener(this); if ((appService) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""onCreate - appService is null""); finish(); return; } android.support.v4.content.LocalBroadcastManager.getInstance(this).registerReceiver(mLocalBroadcastReceiver, new android.content.IntentFilter(StkAppService.SESSION_ENDED)); initFromIntent(getIntent()); if (!(android.telephony.SubscriptionManager.isValidSlotIndex(mSlotId))) { finish(); return; } }",e27f8a6f43311cea0f965146d23189c3e4447b7b,2018-03-07 23:39:38,4
515836,src_com_android_stk_StkMenuActivity.java,"@java.lang.Override public void onDestroy() { getListView().setOnCreateContextMenuListener(null); super.onDestroy(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ((""onDestroy"" + "","") + (mState))); if ((appService) == null) { return; } if ((((mState) == (com.android.stk.StkMenuActivity.STATE_SECONDARY)) && (!(mIsResponseSent))) && (!(appService.isMenuPending(mSlotId)))) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""handleDestroy - Send End Session""); sendResponse(StkAppService.RES_ID_END_SESSION); } if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { if ((appService) != null) { appService.getStkContext(mSlotId).setMainActivityInstance(null); } else { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""onDestroy: null appService.""); } } }",0603a0ea545d7abde2c3dbeb9175ec1f025f3fb4,"@java.lang.Override public void onDestroy() { getListView().setOnCreateContextMenuListener(null); super.onDestroy(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ((""onDestroy"" + "","") + (mState))); if ((appService) == null) { return; } if ((((mState) == (com.android.stk.StkMenuActivity.STATE_SECONDARY)) && (!(mIsResponseSent))) && (!(appService.isMenuPending(mSlotId)))) { if (!(isChangingConfigurations())) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""handleDestroy - Send End Session""); sendResponse(StkAppService.RES_ID_END_SESSION); } } if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { if ((appService) != null) { appService.getStkContext(mSlotId).setMainActivityInstance(null); } else { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""onDestroy: null appService.""); } } }",ff53ef67332e86273eefa3487944389c75a21181,"@java.lang.Override public void onDestroy() { getListView().setOnCreateContextMenuListener(null); super.onDestroy(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ((""onDestroy"" + "", "") + (mState))); if (((appService) == null) || (!(android.telephony.SubscriptionManager.isValidSlotIndex(mSlotId)))) { return; } if ((((mState) == (com.android.stk.StkMenuActivity.STATE_SECONDARY)) && (!(mIsResponseSent))) && (!(appService.isMenuPending(mSlotId)))) { if (!(isChangingConfigurations())) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""handleDestroy - Send End Session""); sendResponse(StkAppService.RES_ID_END_SESSION); } } android.support.v4.content.LocalBroadcastManager.getInstance(this).unregisterReceiver(mLocalBroadcastReceiver); }",e3e7cfbd84c957efa8c6a5101002461bb55ca5f5,2018-03-07 23:39:38,4
633848,src_java_com_android_internal_telephony_ims_ImsResolver.java,"private void updateBoundCarrierServices(int subId) { int slotId = mSubscriptionManagerProxy.getSlotIndex(subId); java.lang.String newPackageName = mCarrierConfigManager.getConfigForSubId(subId).getString(CarrierConfigManager.KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING, null); if ((slotId != (android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX)) && (slotId < (mNumSlots))) { java.lang.String oldPackageName = mCarrierServices[slotId]; mCarrierServices[slotId] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""Carrier Config updated, binding new ImsService""); unbindImsService(getImsServiceInfoFromCache(oldPackageName)); bindNewImsService(getImsServiceInfoFromCache(newPackageName)); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } } }",8d93d6f2a142f6746c99f853ffdfe53d2e4a3736,"private void updateBoundCarrierServices(int subId) { int slotId = mSubscriptionManagerProxy.getSlotIndex(subId); java.lang.String newPackageName = ""com.google.android.ims""; if ((slotId != (android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX)) && (slotId < (mNumSlots))) { java.lang.String oldPackageName = mCarrierServices[slotId]; mCarrierServices[slotId] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""Carrier Config updated, binding new ImsService""); unbindImsService(getImsServiceInfoFromCache(oldPackageName)); bindNewImsService(getImsServiceInfoFromCache(newPackageName)); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } } }",c00f735813f0bc6d8cbe9d8eb756f26acd1ffa09,"private void updateBoundCarrierServices(int subId) { int slotId = mSubscriptionManagerProxy.getSlotIndex(subId); java.lang.String newPackageName = mCarrierConfigManager.getConfigForSubId(subId).getString(CarrierConfigManager.KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING, null); if ((slotId != (android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX)) && (slotId < (mNumSlots))) { java.lang.String oldPackageName = mCarrierServices[slotId]; mCarrierServices[slotId] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""Carrier Config updated, binding new ImsService""); unbindImsService(getImsServiceInfoFromCache(oldPackageName)); bindNewImsService(getImsServiceInfoFromCache(newPackageName)); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } } }",8d93d6f2a142f6746c99f853ffdfe53d2e4a3736,2018-03-08 02:00:49,3
619666,luni_src_test_java_libcore_dalvik_system_BlockGuardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onCustomSlowCall(java.lang.String name) { if (((checksList) != null) && (checksList.contains(libcore.dalvik.system.BlockGuardTest.RecordingPolicy.Check.CUSTOM_SLOW_CALL))) { addViolation((""onCustomSlowCall/"" + name)); } }",4740c36941a44b6be5cfebf9c02461adb3b77837,"@java.lang.Override public void onExplicitGc() { if (((checksList) != null) && (checksList.contains(libcore.dalvik.system.BlockGuardTest.RecordingPolicy.Check.EXPLICIT_GC))) { addViolation(""onExplicitGc""); } }",226f118cd43fe144af0a699521d73f327634e064,2018-03-08 10:54:58,6
619666,luni_src_test_java_libcore_dalvik_system_BlockGuardTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testSystemGc() throws java.lang.Exception { recorder.clear(); java.lang.System.gc(); recorder.expectAndClear(""onCustomSlowCall/System.gc()""); }",45f6021d53847e9092663dc42936b717a026d6f3,"public void testSystemGc() throws java.lang.Exception { recorder.clear(); java.lang.Runtime.getRuntime().gc(); recorder.expectAndClear(""onExplicitGc""); }",d95e5f7389bcedf54afbd4033dcc8e92849ddd5e,2018-03-08 10:54:58,6
619666,ojluni_src_main_java_java_lang_System.java,public static void gc() { boolean shouldRunGC; synchronized(java.lang.System.LOCK) { shouldRunGC = java.lang.System.justRanFinalization; if (shouldRunGC) { java.lang.System.justRanFinalization = false; } else { java.lang.System.runGC = true; } } if (shouldRunGC) { java.lang.Runtime.getRuntime().gc(); } },37dfb8fa6d9d766fa029ed349e265c75ca081658,"public static void gc() { dalvik.system.BlockGuard.getThreadPolicy().onCustomSlowCall(""System.gc()""); boolean shouldRunGC; synchronized(java.lang.System.LOCK) { shouldRunGC = java.lang.System.justRanFinalization; if (shouldRunGC) { java.lang.System.justRanFinalization = false; } else { java.lang.System.runGC = true; } } if (shouldRunGC) { java.lang.Runtime.getRuntime().gc(); } }",c5458e51ad77cbd4a506cbef99c886f60dd37a0f,public static void gc() { boolean shouldRunGC; synchronized(java.lang.System.LOCK) { shouldRunGC = java.lang.System.justRanFinalization; if (shouldRunGC) { java.lang.System.justRanFinalization = false; } else { java.lang.System.runGC = true; } } if (shouldRunGC) { java.lang.Runtime.getRuntime().gc(); } },37dfb8fa6d9d766fa029ed349e265c75ca081658,2018-03-08 10:54:58,6
619666,luni_src_test_java_libcore_dalvik_system_PathClassLoaderTest.java,"public void test_classLoader_exceptionDuringLoading() throws java.lang.Exception { final java.io.File jar = libcore.dalvik.system.PathClassLoaderTest.extractResourceJar(""loading-test""); final dalvik.system.PathClassLoader pcl = new dalvik.system.PathClassLoader(jar.getAbsolutePath(), java.lang.Object.class.getClassLoader()); dalvik.system.BlockGuard.Policy policy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { throw new java.lang.RuntimeException(""onWriteToDisk""); } @java.lang.Override public void onReadFromDisk() { throw new java.lang.RuntimeException(""onReadFromDisk""); } @java.lang.Override public void onNetwork() { throw new java.lang.RuntimeException(""onNetwork""); } @java.lang.Override public void onUnbufferedIO() { throw new java.lang.RuntimeException(""onUnbufferedIO""); } @java.lang.Override public int getPolicyMask() { return 0; } }); try { try { pcl.getResource(""test/Resource1.txt""); fail(); } catch (java.lang.RuntimeException expected) { } } finally { dalvik.system.BlockGuard.setThreadPolicy(policy); } assertNotNull(pcl.getResource(""test/Resource1.txt"")); }",3c6b40ce15e161ce56ec7682e8e55d5ca96ff4fa,"public void test_classLoader_exceptionDuringLoading() throws java.lang.Exception { final java.io.File jar = libcore.dalvik.system.PathClassLoaderTest.extractResourceJar(""loading-test""); final dalvik.system.PathClassLoader pcl = new dalvik.system.PathClassLoader(jar.getAbsolutePath(), java.lang.Object.class.getClassLoader()); dalvik.system.BlockGuard.Policy policy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { throw new java.lang.RuntimeException(""onWriteToDisk""); } @java.lang.Override public void onReadFromDisk() { throw new java.lang.RuntimeException(""onReadFromDisk""); } @java.lang.Override public void onNetwork() { throw new java.lang.RuntimeException(""onNetwork""); } @java.lang.Override public void onUnbufferedIO() { throw new java.lang.RuntimeException(""onUnbufferedIO""); } @java.lang.Override public void onCustomSlowCall(java.lang.String name) { throw new java.lang.RuntimeException((""onCustomSlowCall: "" + name)); } @java.lang.Override public int getPolicyMask() { return 0; } }); try { try { pcl.getResource(""test/Resource1.txt""); fail(); } catch (java.lang.RuntimeException expected) { } } finally { dalvik.system.BlockGuard.setThreadPolicy(policy); } assertNotNull(pcl.getResource(""test/Resource1.txt"")); }",79e666bba3a168f28305d30d08ed53de84a41acb,"public void test_classLoader_exceptionDuringLoading() throws java.lang.Exception { final java.io.File jar = libcore.dalvik.system.PathClassLoaderTest.extractResourceJar(""loading-test""); final dalvik.system.PathClassLoader pcl = new dalvik.system.PathClassLoader(jar.getAbsolutePath(), java.lang.Object.class.getClassLoader()); dalvik.system.BlockGuard.Policy policy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { throw new java.lang.RuntimeException(""onWriteToDisk""); } @java.lang.Override public void onReadFromDisk() { throw new java.lang.RuntimeException(""onReadFromDisk""); } @java.lang.Override public void onNetwork() { throw new java.lang.RuntimeException(""onNetwork""); } @java.lang.Override public void onUnbufferedIO() { throw new java.lang.RuntimeException(""onUnbufferedIO""); } @java.lang.Override public void onExplicitGc() { throw new java.lang.RuntimeException(""onExplicitGc""); } @java.lang.Override public int getPolicyMask() { return 0; } }); try { try { pcl.getResource(""test/Resource1.txt""); fail(); } catch (java.lang.RuntimeException expected) { } } finally { dalvik.system.BlockGuard.setThreadPolicy(policy); } assertNotNull(pcl.getResource(""test/Resource1.txt"")); }",dedfc6b5953188c5689ce0d7020f04bae7a11adc,2018-03-08 10:54:58,6
619666,luni_src_test_java_libcore_dalvik_system_PathClassLoaderTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onCustomSlowCall(java.lang.String name) { throw new java.lang.RuntimeException((""onCustomSlowCall: "" + name)); }",f4c7e61a7757cfce06e599155ec4c058b992dc34,"@java.lang.Override public void onExplicitGc() { throw new java.lang.RuntimeException(""onExplicitGc""); }",55ad37d5b92f90fbe543bd617015cc4ed66cb551,2018-03-08 10:54:58,6
619666,luni_src_test_java_libcore_java_net_URLTest.java,"public void testHashCodeAndEqualsDoesNotPerformNetworkIo() throws java.lang.Exception { final dalvik.system.BlockGuard.Policy oldPolicy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { fail(""Blockguard.Policy.onWriteToDisk""); } @java.lang.Override public void onReadFromDisk() { fail(""Blockguard.Policy.onReadFromDisk""); } @java.lang.Override public void onNetwork() { fail(""Blockguard.Policy.onNetwork""); } @java.lang.Override public void onUnbufferedIO() { fail(""Blockguard.Policy.onUnbufferedIO""); } @java.lang.Override public int getPolicyMask() { return 0; } }); try { java.net.URL url = new java.net.URL(""http://www.google.com/""); java.net.URL url2 = new java.net.URL(""http://www.nest.com/""); url.equals(url2); url2.hashCode(); } finally { dalvik.system.BlockGuard.setThreadPolicy(oldPolicy); } }",629fdadb20ee86717d9ce939ea4ce6e1b1d34225,"public void testHashCodeAndEqualsDoesNotPerformNetworkIo() throws java.lang.Exception { final dalvik.system.BlockGuard.Policy oldPolicy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { fail(""Blockguard.Policy.onWriteToDisk""); } @java.lang.Override public void onReadFromDisk() { fail(""Blockguard.Policy.onReadFromDisk""); } @java.lang.Override public void onNetwork() { fail(""Blockguard.Policy.onNetwork""); } @java.lang.Override public void onUnbufferedIO() { fail(""Blockguard.Policy.onUnbufferedIO""); } @java.lang.Override public void onCustomSlowCall(java.lang.String name) { fail((""Blockguard.Policy.onCustomSlowCall: "" + name)); } @java.lang.Override public int getPolicyMask() { return 0; } }); try { java.net.URL url = new java.net.URL(""http://www.google.com/""); java.net.URL url2 = new java.net.URL(""http://www.nest.com/""); url.equals(url2); url2.hashCode(); } finally { dalvik.system.BlockGuard.setThreadPolicy(oldPolicy); } }",d75a9f5ad9dd8e34325da5359e46393051a60c54,"public void testHashCodeAndEqualsDoesNotPerformNetworkIo() throws java.lang.Exception { final dalvik.system.BlockGuard.Policy oldPolicy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { fail(""Blockguard.Policy.onWriteToDisk""); } @java.lang.Override public void onReadFromDisk() { fail(""Blockguard.Policy.onReadFromDisk""); } @java.lang.Override public void onNetwork() { fail(""Blockguard.Policy.onNetwork""); } @java.lang.Override public void onUnbufferedIO() { fail(""Blockguard.Policy.onUnbufferedIO""); } @java.lang.Override public void onExplicitGc() { fail(""Blockguard.Policy.onExplicitGc""); } @java.lang.Override public int getPolicyMask() { return 0; } }); try { java.net.URL url = new java.net.URL(""http://www.google.com/""); java.net.URL url2 = new java.net.URL(""http://www.nest.com/""); url.equals(url2); url2.hashCode(); } finally { dalvik.system.BlockGuard.setThreadPolicy(oldPolicy); } }",36a06afa5e903c6106130a620ea2c4da0ec382c9,2018-03-08 10:54:58,6
619666,dalvik_src_main_java_dalvik_system_BlockGuard.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void onCustomSlowCall(java.lang.String name) { },8873236449ce559c532bcb3be835a6f33bf9d565,public void onExplicitGc() { },6a2fa73497c7b0409fe6e2b0b99f6f5694a1f8e0,2018-03-08 10:54:58,6
619666,luni_src_test_java_libcore_java_net_URLTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onCustomSlowCall(java.lang.String name) { fail((""Blockguard.Policy.onCustomSlowCall: "" + name)); }",01a69fb28ed8afd29fa5d52d1122e8a1519b627d,"@java.lang.Override public void onExplicitGc() { fail(""Blockguard.Policy.onExplicitGc""); }",602a17681efc46ca5d86b14199a5388519ce1d96,2018-03-08 10:54:58,6
619666,dalvik_src_main_java_dalvik_system_BlockGuard.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,void onCustomSlowCall(java.lang.String name);,de93f6b4a14ae6100976bf0dc680d0eea5118112,void onExplicitGc();,4f3c458dbe272d0e90efda34d73d6826580fc86c,2018-03-08 10:54:58,6
583827,src_com_android_phone_MobileNetworkSettings.java,"private void updatePreferredNetworkUIFromDb() { final int phoneSubId = mPhone.getSubId(); int settingsNetworkMode = android.provider.Settings.Global.getInt(mPhone.getContext().getContentResolver(), ((android.provider.Settings.Global.PREFERRED_NETWORK_MODE) + phoneSubId), com.android.phone.MobileNetworkSettings.MobileNetworkFragment.preferredNetworkMode); if (com.android.phone.MobileNetworkSettings.MobileNetworkFragment.DBG) { com.android.phone.MobileNetworkSettings.MobileNetworkFragment.log((""updatePreferredNetworkUIFromDb: settingsNetworkMode = "" + settingsNetworkMode)); } UpdatePreferredNetworkModeSummary(settingsNetworkMode); UpdateEnabledNetworksValueAndSummary(settingsNetworkMode); mButtonPreferredNetworkMode.setValue(java.lang.Integer.toString(settingsNetworkMode)); }",e52178a24f6760ad6ee4af1aae589d1b7c96ecd5,"private void updatePreferredNetworkUIFromDb() { final int phoneSubId = mPhone.getSubId(); int settingsNetworkMode = getPreferredNetworkModeForSubId(phoneSubId); if (com.android.phone.MobileNetworkSettings.MobileNetworkFragment.DBG) { com.android.phone.MobileNetworkSettings.MobileNetworkFragment.log((""updatePreferredNetworkUIFromDb: settingsNetworkMode = "" + settingsNetworkMode)); } UpdatePreferredNetworkModeSummary(settingsNetworkMode); UpdateEnabledNetworksValueAndSummary(settingsNetworkMode); mButtonPreferredNetworkMode.setValue(java.lang.Integer.toString(settingsNetworkMode)); }",b99f7a1797a0efc6c1670c5796b98d1638195afa,"private void updatePreferredNetworkUIFromDb() { final int phoneSubId = mPhone.getSubId(); int settingsNetworkMode = android.provider.Settings.Global.getInt(mPhone.getContext().getContentResolver(), ((android.provider.Settings.Global.PREFERRED_NETWORK_MODE) + phoneSubId), com.android.phone.MobileNetworkSettings.MobileNetworkFragment.preferredNetworkMode); if (com.android.phone.MobileNetworkSettings.MobileNetworkFragment.DBG) { com.android.phone.MobileNetworkSettings.MobileNetworkFragment.log((""updatePreferredNetworkUIFromDb: settingsNetworkMode = "" + settingsNetworkMode)); } UpdatePreferredNetworkModeSummary(settingsNetworkMode); UpdateEnabledNetworksValueAndSummary(settingsNetworkMode); mButtonPreferredNetworkMode.setValue(java.lang.Integer.toString(settingsNetworkMode)); }",e52178a24f6760ad6ee4af1aae589d1b7c96ecd5,2018-03-08 17:56:26,4
583827,src_com_android_phone_PhoneInterfaceManager.java,"@java.lang.Override public boolean setPreferredNetworkType(int subId, int networkType) { enforceModifyPermissionOrCarrierPrivilege(subId); if (com.android.phone.PhoneInterfaceManager.DBG) com.android.phone.PhoneInterfaceManager.log((((""setPreferredNetworkType: subId "" + subId) + "" type "") + networkType)); java.lang.Boolean success = ((java.lang.Boolean) (sendRequest(com.android.phone.PhoneInterfaceManager.CMD_SET_PREFERRED_NETWORK_TYPE, networkType, subId))); if (com.android.phone.PhoneInterfaceManager.DBG) com.android.phone.PhoneInterfaceManager.log((""setPreferredNetworkType: "" + (success ? ""ok"" : ""fail""))); if (success) { Settings.Global.putInt(mPhone.getContext().getContentResolver(), ((Settings.Global.PREFERRED_NETWORK_MODE) + subId), networkType); } return success; }",25009da2b6b5c873adb6e625783fc5fc52f21fa1,"@java.lang.Override public boolean setPreferredNetworkType(int subId, int networkType) { enforceModifyPermissionOrCarrierPrivilege(subId); if (com.android.phone.PhoneInterfaceManager.DBG) com.android.phone.PhoneInterfaceManager.log((((""setPreferredNetworkType: subId "" + subId) + "" type "") + networkType)); java.lang.Boolean success = ((java.lang.Boolean) (sendRequest(com.android.phone.PhoneInterfaceManager.CMD_SET_PREFERRED_NETWORK_TYPE, networkType, subId))); if (com.android.phone.PhoneInterfaceManager.DBG) com.android.phone.PhoneInterfaceManager.log((""setPreferredNetworkType: "" + (success ? ""ok"" : ""fail""))); if (success) { Settings.Global.putInt(mPhone.getContext().getContentResolver(), ((Settings.Global.PREFERRED_NETWORK_MODE) + subId), networkType); android.telephony.TelephonyManager.putIntAtIndex(mPhone.getContext().getContentResolver(), android.provider.Settings.Global.PREFERRED_NETWORK_MODE, mSubscriptionController.getPhoneId(subId), networkType); } return success; }",e12b20975f3cdd7c348be2eac8c379449862aa56,"@java.lang.Override public boolean setPreferredNetworkType(int subId, int networkType) { com.android.internal.telephony.TelephonyPermissions.enforceCallingOrSelfModifyPermissionOrCarrierPrivilege(mApp, subId, ""setPreferredNetworkType""); if (com.android.phone.PhoneInterfaceManager.DBG) com.android.phone.PhoneInterfaceManager.log((((""setPreferredNetworkType: subId "" + subId) + "" type "") + networkType)); java.lang.Boolean success = ((java.lang.Boolean) (sendRequest(com.android.phone.PhoneInterfaceManager.CMD_SET_PREFERRED_NETWORK_TYPE, networkType, subId))); if (com.android.phone.PhoneInterfaceManager.DBG) com.android.phone.PhoneInterfaceManager.log((""setPreferredNetworkType: "" + (success ? ""ok"" : ""fail""))); if (success) { Settings.Global.putInt(mPhone.getContext().getContentResolver(), ((Settings.Global.PREFERRED_NETWORK_MODE) + subId), networkType); } return success; }",5086b535330f82237827b3f65d8e986584d55d03,2018-03-08 17:56:26,4
583827,src_com_android_phone_PhoneInterfaceManager.java,"@java.lang.Override public void factoryReset(int subId) { enforceConnectivityInternalPermission(); if (mUserManager.hasUserRestriction(UserManager.DISALLOW_NETWORK_RESET)) { return; } final long identity = android.os.Binder.clearCallingIdentity(); try { if ((android.telephony.SubscriptionManager.isUsableSubIdValue(subId)) && (!(mUserManager.hasUserRestriction(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS)))) { setDataEnabled(subId, true); setNetworkSelectionModeAutomatic(subId); setPreferredNetworkType(subId, Phone.PREFERRED_NT_MODE); mPhone.setDataRoamingEnabled(false); } } finally { android.os.Binder.restoreCallingIdentity(identity); } }",291675f7f9d1953732ceacb1a8b6f19ab79d99e0,"@java.lang.Override public void factoryReset(int subId) { enforceConnectivityInternalPermission(); if (mUserManager.hasUserRestriction(UserManager.DISALLOW_NETWORK_RESET)) { return; } final long identity = android.os.Binder.clearCallingIdentity(); try { if ((android.telephony.SubscriptionManager.isUsableSubIdValue(subId)) && (!(mUserManager.hasUserRestriction(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS)))) { setDataEnabled(subId, true); setNetworkSelectionModeAutomatic(subId); java.lang.String defaultNetwork = android.telephony.TelephonyManager.getTelephonyProperty(mSubscriptionController.getPhoneId(subId), ""ro.telephony.default_network"", null); int networkType = (!(android.text.TextUtils.isEmpty(defaultNetwork))) ? java.lang.Integer.parseInt(defaultNetwork) : com.android.internal.telephony.Phone.PREFERRED_NT_MODE; setPreferredNetworkType(subId, networkType); mPhone.setDataRoamingEnabled(false); } } finally { android.os.Binder.restoreCallingIdentity(identity); } }",1d14d436ec4c20634be1c287189d88a3da1f5a6d,"@java.lang.Override public void factoryReset(int subId) { enforceConnectivityInternalPermission(); if (mUserManager.hasUserRestriction(UserManager.DISALLOW_NETWORK_RESET)) { return; } final long identity = android.os.Binder.clearCallingIdentity(); try { if ((android.telephony.SubscriptionManager.isUsableSubIdValue(subId)) && (!(mUserManager.hasUserRestriction(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS)))) { setUserDataEnabled(subId, true); setNetworkSelectionModeAutomatic(subId); java.lang.String defaultNetwork = android.telephony.TelephonyManager.getTelephonyProperty(mSubscriptionController.getPhoneId(subId), ""ro.telephony.default_network"", null); int networkType = (!(android.text.TextUtils.isEmpty(defaultNetwork))) ? java.lang.Integer.parseInt(defaultNetwork) : com.android.internal.telephony.Phone.PREFERRED_NT_MODE; setPreferredNetworkType(subId, networkType); mPhone.setDataRoamingEnabled(false); } } finally { android.os.Binder.restoreCallingIdentity(identity); } }",cb9677173afe6b41fbd2aac2b0c031aeb54d3af2,2018-03-08 17:56:26,4
465200,src_java_com_android_internal_telephony_PhoneFactory.java,"public static int calculatePreferredNetworkType(android.content.Context context, int phoneSubId) { int networkType = android.provider.Settings.Global.getInt(context.getContentResolver(), ((android.provider.Settings.Global.PREFERRED_NETWORK_MODE) + phoneSubId), RILConstants.PREFERRED_NETWORK_MODE); android.telephony.Rlog.d(com.android.internal.telephony.PhoneFactory.LOG_TAG, (((""calculatePreferredNetworkType: phoneSubId = "" + phoneSubId) + "" networkType = "") + networkType)); return networkType; }",aa1a86689987582e416593b7f0bd7e6fed04f3c3,"public static int calculatePreferredNetworkType(android.content.Context context, int phoneSubId) { int phoneId = com.android.internal.telephony.SubscriptionController.getInstance().getPhoneId(phoneSubId); int phoneIdNetworkType = RILConstants.PREFERRED_NETWORK_MODE; try { phoneIdNetworkType = android.telephony.TelephonyManager.getIntAtIndex(context.getContentResolver(), Settings.Global.PREFERRED_NETWORK_MODE, phoneId); } catch (android.provider.Settings.SettingNotFoundException snfe) { android.telephony.Rlog.e(com.android.internal.telephony.PhoneFactory.LOG_TAG, ""Settings Exception Reading Valuefor phoneID""); } int networkType = phoneIdNetworkType; android.telephony.Rlog.d(com.android.internal.telephony.PhoneFactory.LOG_TAG, (((""calculatePreferredNetworkType: phoneId = "" + phoneId) + "" phoneIdNetworkType = "") + phoneIdNetworkType)); if (com.android.internal.telephony.SubscriptionController.getInstance().isActiveSubId(phoneSubId)) { networkType = android.provider.Settings.Global.getInt(context.getContentResolver(), ((android.provider.Settings.Global.PREFERRED_NETWORK_MODE) + phoneSubId), phoneIdNetworkType); } else { android.telephony.Rlog.d(com.android.internal.telephony.PhoneFactory.LOG_TAG, ((""calculatePreferredNetworkType: phoneSubId = "" + phoneSubId) + "" is not a active SubId"")); } android.telephony.Rlog.d(com.android.internal.telephony.PhoneFactory.LOG_TAG, (((""calculatePreferredNetworkType: phoneSubId = "" + phoneSubId) + "" networkType = "") + networkType)); return networkType; }",0bb814cab7ad4a2b4e5d5134d185589d6798d165,"public static int calculatePreferredNetworkType(android.content.Context context, int phoneSubId) { int networkType = android.provider.Settings.Global.getInt(context.getContentResolver(), ((android.provider.Settings.Global.PREFERRED_NETWORK_MODE) + phoneSubId), (-1)); android.telephony.Rlog.d(com.android.internal.telephony.PhoneFactory.LOG_TAG, (((""calculatePreferredNetworkType: phoneSubId = "" + phoneSubId) + "" networkType = "") + networkType)); if (networkType == (-1)) { networkType = RILConstants.PREFERRED_NETWORK_MODE; try { networkType = android.telephony.TelephonyManager.getIntAtIndex(context.getContentResolver(), android.provider.Settings.Global.PREFERRED_NETWORK_MODE, com.android.internal.telephony.SubscriptionController.getInstance().getPhoneId(phoneSubId)); } catch (android.provider.Settings.SettingNotFoundException retrySnfe) { android.telephony.Rlog.e(com.android.internal.telephony.PhoneFactory.LOG_TAG, (""Settings Exception Reading Value At Index for "" + ""Settings.Global.PREFERRED_NETWORK_MODE"")); } } return networkType; }",eb3e6abec495652ca0657b3d0b2d16e88dc26560,2018-03-08 17:56:26,8
632219,services_core_java_com_android_server_BluetoothManagerService.java,"private void recoverBluetoothServiceFromError(boolean clearBle) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""recoverBluetoothServiceFromError""); try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { mBluetooth.unregisterCallback(mBluetoothCallback); } } catch (android.os.RemoteException re) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""Unable to unregister"", re); } finally { mBluetoothLock.readLock().unlock(); } android.os.SystemClock.sleep(500); addActiveLog(com.android.server.BluetoothManagerService.REASON_START_CRASH, false); handleDisable(); waitForOnOff(false, true); sendBluetoothServiceDownCallback(); try { mBluetoothLock.writeLock().lock(); if ((mBluetooth) != null) { mBluetooth = null; mContext.unbindService(mConnection); } mBluetoothGatt = null; } finally { mBluetoothLock.writeLock().unlock(); } mHandler.removeMessages(com.android.server.BluetoothManagerService.MESSAGE_BLUETOOTH_STATE_CHANGE); mState = android.bluetooth.BluetoothAdapter.STATE_OFF; if (clearBle) { clearBleApps(); } mEnable = false; if (((mErrorRecoveryRetryCounter)++) < (com.android.server.BluetoothManagerService.MAX_ERROR_RESTART_RETRIES)) { android.os.Message restartMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_RESTART_BLUETOOTH_SERVICE); mHandler.sendMessageDelayed(restartMsg, com.android.server.BluetoothManagerService.ERROR_RESTART_TIME_MS); } else { } }",df241db5885065fcc1922d0c849155884ca8626c,"private void recoverBluetoothServiceFromError(boolean clearBle) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""recoverBluetoothServiceFromError""); try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { mBluetooth.unregisterCallback(mBluetoothCallback); } } catch (android.os.RemoteException re) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""Unable to unregister"", re); } finally { mBluetoothLock.readLock().unlock(); } android.os.SystemClock.sleep(500); addActiveLog(com.android.server.BluetoothManagerService.REASON_START_CRASH, android.app.ActivityThread.currentPackageName(), false); handleDisable(); waitForOnOff(false, true); sendBluetoothServiceDownCallback(); try { mBluetoothLock.writeLock().lock(); if ((mBluetooth) != null) { mBluetooth = null; mContext.unbindService(mConnection); } mBluetoothGatt = null; } finally { mBluetoothLock.writeLock().unlock(); } mHandler.removeMessages(com.android.server.BluetoothManagerService.MESSAGE_BLUETOOTH_STATE_CHANGE); mState = android.bluetooth.BluetoothAdapter.STATE_OFF; if (clearBle) { clearBleApps(); } mEnable = false; if (((mErrorRecoveryRetryCounter)++) < (com.android.server.BluetoothManagerService.MAX_ERROR_RESTART_RETRIES)) { android.os.Message restartMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_RESTART_BLUETOOTH_SERVICE); mHandler.sendMessageDelayed(restartMsg, com.android.server.BluetoothManagerService.ERROR_RESTART_TIME_MS); } else { } }",8aba8885205cc8aba01be221e4c56edd9c2226ed,"private void recoverBluetoothServiceFromError(boolean clearBle) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""recoverBluetoothServiceFromError""); try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { mBluetooth.unregisterCallback(mBluetoothCallback); } } catch (android.os.RemoteException re) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""Unable to unregister"", re); } finally { mBluetoothLock.readLock().unlock(); } android.os.SystemClock.sleep(500); addActiveLog(BluetoothProtoEnums.ENABLE_DISABLE_REASON_START_ERROR, mContext.getPackageName(), false); handleDisable(); waitForOnOff(false, true); sendBluetoothServiceDownCallback(); try { mBluetoothLock.writeLock().lock(); if ((mBluetooth) != null) { mBluetooth = null; mContext.unbindService(mConnection); } mBluetoothGatt = null; } finally { mBluetoothLock.writeLock().unlock(); } mHandler.removeMessages(com.android.server.BluetoothManagerService.MESSAGE_BLUETOOTH_STATE_CHANGE); mState = android.bluetooth.BluetoothAdapter.STATE_OFF; if (clearBle) { clearBleApps(); } mEnable = false; if (((mErrorRecoveryRetryCounter)++) < (com.android.server.BluetoothManagerService.MAX_ERROR_RESTART_RETRIES)) { android.os.Message restartMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_RESTART_BLUETOOTH_SERVICE); mHandler.sendMessageDelayed(restartMsg, com.android.server.BluetoothManagerService.ERROR_RESTART_TIME_MS); } else { } }",70d0e98d4557277016ac583f52b1f67e09668169,2018-03-09 00:57:52,9
632219,services_core_java_com_android_server_BluetoothManagerService.java,"public boolean enable(java.lang.String packageName) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""enable(): not enabling - bluetooth disallowed""); } return false; } if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, ""enable(): not allowed for non-active and non system user""); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (((!(isEnabled())) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_ENABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (((((((""enable("" + packageName) + ""): mBluetooth ="") + (mBluetooth)) + "" mBinding = "") + (mBinding)) + "" mState = "") + (android.bluetooth.BluetoothAdapter.nameForState(mState)))); } synchronized(mReceiver) { mQuietEnableExternal = false; mEnableExternal = true; sendEnableMsg(false, packageName); } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""enable returning""); } return true; }",3266e84984e219ede3770fa7fc385c6ea1f182b4,"public boolean enable(java.lang.String packageName) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""enable(): not enabling - bluetooth disallowed""); } return false; } if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, ""enable(): not allowed for non-active and non system user""); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (((!(isEnabled())) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_ENABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (((((((""enable("" + packageName) + ""): mBluetooth ="") + (mBluetooth)) + "" mBinding = "") + (mBinding)) + "" mState = "") + (android.bluetooth.BluetoothAdapter.nameForState(mState)))); } synchronized(mReceiver) { mQuietEnableExternal = false; mEnableExternal = true; sendEnableMsg(false, com.android.server.BluetoothManagerService.REASON_PACKAGE, packageName); } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""enable returning""); } return true; }",80c44d0d05b1e37b70b271e2d499ae56b594f497,"public boolean enable(java.lang.String packageName) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""enable(): not enabling - bluetooth disallowed""); } return false; } if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, ""enable(): not allowed for non-active and non system user""); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (((!(isEnabled())) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_ENABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (((((((""enable("" + packageName) + ""): mBluetooth ="") + (mBluetooth)) + "" mBinding = "") + (mBinding)) + "" mState = "") + (android.bluetooth.BluetoothAdapter.nameForState(mState)))); } synchronized(mReceiver) { mQuietEnableExternal = false; mEnableExternal = true; sendEnableMsg(false, BluetoothProtoEnums.ENABLE_DISABLE_REASON_APPLICATION_REQUEST, packageName); } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""enable returning""); } return true; }",ab245ab741b0b372739cc7f6c74e8f24590bb9e3,2018-03-09 00:57:52,9
632219,services_core_java_com_android_server_BluetoothManagerService.java,"@java.lang.Override public void onChange(boolean unused) { synchronized(this) { if (isBluetoothPersistedStateOn()) { if (isAirplaneModeOn()) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_AIRPLANE); } else { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_BLUETOOTH); } } int st = android.bluetooth.BluetoothAdapter.STATE_OFF; try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { st = mBluetooth.getState(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""Unable to call getState"", e); return; } finally { mBluetoothLock.readLock().unlock(); } android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (""Airplane Mode change - current state: "" + (android.bluetooth.BluetoothAdapter.nameForState(st)))); if (isAirplaneModeOn()) { clearBleApps(); if (st == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON)) { try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { mBluetooth.onBrEdrDown(); mEnable = false; mEnableExternal = false; } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""Unable to call onBrEdrDown"", e); } finally { mBluetoothLock.readLock().unlock(); } } else if (st == (android.bluetooth.BluetoothAdapter.STATE_ON)) { sendDisableMsg(com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE); } } else if (mEnableExternal) { sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE); } } }",6bd888b57f878b0d19a046abd4cb867a32c553b9,"@java.lang.Override public void onChange(boolean unused) { synchronized(this) { if (isBluetoothPersistedStateOn()) { if (isAirplaneModeOn()) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_AIRPLANE); } else { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_BLUETOOTH); } } int st = android.bluetooth.BluetoothAdapter.STATE_OFF; try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { st = mBluetooth.getState(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""Unable to call getState"", e); return; } finally { mBluetoothLock.readLock().unlock(); } android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (""Airplane Mode change - current state: "" + (android.bluetooth.BluetoothAdapter.nameForState(st)))); if (isAirplaneModeOn()) { clearBleApps(); if (st == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON)) { try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { mBluetooth.onBrEdrDown(); mEnable = false; mEnableExternal = false; } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""Unable to call onBrEdrDown"", e); } finally { mBluetoothLock.readLock().unlock(); } } else if (st == (android.bluetooth.BluetoothAdapter.STATE_ON)) { sendDisableMsg(com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE, android.app.ActivityThread.currentPackageName()); } } else if (mEnableExternal) { sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE, android.app.ActivityThread.currentPackageName()); } } }",e9538beb8ecafbfb77a259e283f4f76cf19d38c2,"@java.lang.Override public void onChange(boolean unused) { synchronized(this) { if (isBluetoothPersistedStateOn()) { if (isAirplaneModeOn()) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_AIRPLANE); } else { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_BLUETOOTH); } } int st = android.bluetooth.BluetoothAdapter.STATE_OFF; try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { st = mBluetooth.getState(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""Unable to call getState"", e); return; } finally { mBluetoothLock.readLock().unlock(); } android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (""Airplane Mode change - current state: "" + (android.bluetooth.BluetoothAdapter.nameForState(st)))); if (isAirplaneModeOn()) { clearBleApps(); if (st == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON)) { try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { mBluetooth.onBrEdrDown(); mEnable = false; mEnableExternal = false; } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""Unable to call onBrEdrDown"", e); } finally { mBluetoothLock.readLock().unlock(); } } else if (st == (android.bluetooth.BluetoothAdapter.STATE_ON)) { sendDisableMsg(BluetoothProtoEnums.ENABLE_DISABLE_REASON_AIRPLANE_MODE, mContext.getPackageName()); } } else if (mEnableExternal) { sendEnableMsg(mQuietEnableExternal, BluetoothProtoEnums.ENABLE_DISABLE_REASON_AIRPLANE_MODE, mContext.getPackageName()); } } }",dd12af6f755a1bd6d5400bbe7a6647060074d147,2018-03-09 00:57:52,9
632219,services_core_java_com_android_server_BluetoothManagerService.java,"public boolean enableNoAutoConnect(java.lang.String packageName) { if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""enableNoAutoConnect(): not enabling - bluetooth disallowed""); } return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (((""enableNoAutoConnect(): mBluetooth ="" + (mBluetooth)) + "" mBinding = "") + (mBinding))); } int callingAppId = android.os.UserHandle.getAppId(android.os.Binder.getCallingUid()); if (callingAppId != (NFC_UID)) { throw new java.lang.SecurityException(""no permission to enable Bluetooth quietly""); } synchronized(mReceiver) { mQuietEnableExternal = true; mEnableExternal = true; sendEnableMsg(true, packageName); } return true; }",c1cebbb4aa756ecb896221036e7ec88c86706f35,"public boolean enableNoAutoConnect(java.lang.String packageName) { if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""enableNoAutoConnect(): not enabling - bluetooth disallowed""); } return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (((""enableNoAutoConnect(): mBluetooth ="" + (mBluetooth)) + "" mBinding = "") + (mBinding))); } int callingAppId = android.os.UserHandle.getAppId(android.os.Binder.getCallingUid()); if (callingAppId != (NFC_UID)) { throw new java.lang.SecurityException(""no permission to enable Bluetooth quietly""); } synchronized(mReceiver) { mQuietEnableExternal = true; mEnableExternal = true; sendEnableMsg(true, com.android.server.BluetoothManagerService.REASON_PACKAGE, packageName); } return true; }",495a34d2682b01505ac738b9fa07071db8a65ebc,"public boolean enableNoAutoConnect(java.lang.String packageName) { if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""enableNoAutoConnect(): not enabling - bluetooth disallowed""); } return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (((""enableNoAutoConnect(): mBluetooth ="" + (mBluetooth)) + "" mBinding = "") + (mBinding))); } int callingAppId = android.os.UserHandle.getAppId(android.os.Binder.getCallingUid()); if (callingAppId != (NFC_UID)) { throw new java.lang.SecurityException(""no permission to enable Bluetooth quietly""); } synchronized(mReceiver) { mQuietEnableExternal = true; mEnableExternal = true; sendEnableMsg(true, BluetoothProtoEnums.ENABLE_DISABLE_REASON_APPLICATION_REQUEST, packageName); } return true; }",8631a8c7786e696a1e2adcda69ba9659b8ac84bf,2018-03-09 00:57:52,9
632219,services_core_java_com_android_server_BluetoothManagerService.java,"public boolean disable(java.lang.String packageName, boolean persist) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, ""disable(): not allowed for non-active and non system user""); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (((isEnabled()) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_DISABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (((""disable(): mBluetooth = "" + (mBluetooth)) + "" mBinding = "") + (mBinding))); } synchronized(mReceiver) { if (persist) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_OFF); } mEnableExternal = false; sendDisableMsg(packageName); } return true; }",6027033e3d525a07097917e212d218b5659dcbb9,"public boolean disable(java.lang.String packageName, boolean persist) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, ""disable(): not allowed for non-active and non system user""); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (((isEnabled()) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_DISABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (((""disable(): mBluetooth = "" + (mBluetooth)) + "" mBinding = "") + (mBinding))); } synchronized(mReceiver) { if (persist) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_OFF); } mEnableExternal = false; sendDisableMsg(com.android.server.BluetoothManagerService.REASON_PACKAGE, packageName); } return true; }",cb03f92f19f9b5156706075e15cf1df14fafb21f,"public boolean disable(java.lang.String packageName, boolean persist) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, ""disable(): not allowed for non-active and non system user""); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (((isEnabled()) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_DISABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (((""disable(): mBluetooth = "" + (mBluetooth)) + "" mBinding = "") + (mBinding))); } synchronized(mReceiver) { if (persist) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_OFF); } mEnableExternal = false; sendDisableMsg(BluetoothProtoEnums.ENABLE_DISABLE_REASON_APPLICATION_REQUEST, packageName); } return true; }",759bdc91eb2370fba40298377e5f2d29b9da7c62,2018-03-09 00:57:52,9
632219,services_core_java_com_android_server_BluetoothManagerService.java,"@java.lang.Override public void onUserRestrictionsChanged(int userId, android.os.Bundle newRestrictions, android.os.Bundle prevRestrictions) { if (com.android.server.pm.UserRestrictionsUtils.restrictionsChanged(prevRestrictions, newRestrictions, UserManager.DISALLOW_BLUETOOTH_SHARING)) { updateOppLauncherComponentState(userId, newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH_SHARING)); } if ((userId == (android.os.UserHandle.USER_SYSTEM)) && (com.android.server.pm.UserRestrictionsUtils.restrictionsChanged(prevRestrictions, newRestrictions, UserManager.DISALLOW_BLUETOOTH))) { if ((userId == (android.os.UserHandle.USER_SYSTEM)) && (newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH))) { updateOppLauncherComponentState(userId, true); sendDisableMsg(com.android.server.BluetoothManagerService.REASON_DISALLOWED); } else { updateOppLauncherComponentState(userId, newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH_SHARING)); } } }",e7c97d6e6a7a55866e1ad59d93dc8b4f13efaf05,"@java.lang.Override public void onUserRestrictionsChanged(int userId, android.os.Bundle newRestrictions, android.os.Bundle prevRestrictions) { if (com.android.server.pm.UserRestrictionsUtils.restrictionsChanged(prevRestrictions, newRestrictions, UserManager.DISALLOW_BLUETOOTH_SHARING)) { updateOppLauncherComponentState(userId, newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH_SHARING)); } if ((userId == (android.os.UserHandle.USER_SYSTEM)) && (com.android.server.pm.UserRestrictionsUtils.restrictionsChanged(prevRestrictions, newRestrictions, UserManager.DISALLOW_BLUETOOTH))) { if ((userId == (android.os.UserHandle.USER_SYSTEM)) && (newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH))) { updateOppLauncherComponentState(userId, true); sendDisableMsg(com.android.server.BluetoothManagerService.REASON_DISALLOWED, android.app.ActivityThread.currentPackageName()); } else { updateOppLauncherComponentState(userId, newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH_SHARING)); } } }",b77348c41a1348c2209c4890a56285fcae71a6c2,"@java.lang.Override public void onUserRestrictionsChanged(int userId, android.os.Bundle newRestrictions, android.os.Bundle prevRestrictions) { if (com.android.server.pm.UserRestrictionsUtils.restrictionsChanged(prevRestrictions, newRestrictions, UserManager.DISALLOW_BLUETOOTH_SHARING)) { updateOppLauncherComponentState(userId, newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH_SHARING)); } if ((userId == (android.os.UserHandle.USER_SYSTEM)) && (com.android.server.pm.UserRestrictionsUtils.restrictionsChanged(prevRestrictions, newRestrictions, UserManager.DISALLOW_BLUETOOTH))) { if ((userId == (android.os.UserHandle.USER_SYSTEM)) && (newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH))) { updateOppLauncherComponentState(userId, true); sendDisableMsg(BluetoothProtoEnums.ENABLE_DISABLE_REASON_DISALLOWED, mContext.getPackageName()); } else { updateOppLauncherComponentState(userId, newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH_SHARING)); } } }",08bd5ab2bbcfdde22e0b25ec623ff6334639a8e7,2018-03-09 00:57:52,9
632219,services_core_java_com_android_server_BluetoothManagerService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.lang.String getReasonString(int reason) { switch (reason) { case com.android.server.BluetoothManagerService.REASON_PACKAGE : return ""REASON_PACKAGE""; case com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE : return ""REASON_AIRPLANE_MODE""; case com.android.server.BluetoothManagerService.REASON_DISALLOWED : return ""REASON_DISALLOWED""; case com.android.server.BluetoothManagerService.REASON_RESTARTED : return ""REASON_RESTARTED""; case com.android.server.BluetoothManagerService.REASON_START_CRASH : return ""REASON_START_CRASH""; case com.android.server.BluetoothManagerService.REASON_SYSTEM_BOOT : return ""REASON_SYSTEM_BOOT""; case com.android.server.BluetoothManagerService.REASON_UNEXPECTED : return ""REASON_UNEXPECTED""; case com.android.server.BluetoothManagerService.REASON_USER_SWITCH : return ""REASON_USER_SWITCH""; case com.android.server.BluetoothManagerService.REASON_RESTORE_USER_SETTING : return ""REASON_RESTORE_USER_SETTING""; default : return (""REASON_UNKNOWN["" + reason) + ""]""; } }",1561cc6f25b92593fea4b5b4abe6dbe8489f1cce,"private static java.lang.String getEnableDisableReasonString(int reason) { switch (reason) { case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_APPLICATION_REQUEST : return ""APPLICATION_REQUEST""; case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_AIRPLANE_MODE : return ""AIRPLANE_MODE""; case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_DISALLOWED : return ""DISALLOWED""; case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_RESTARTED : return ""RESTARTED""; case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_START_ERROR : return ""START_ERROR""; case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_SYSTEM_BOOT : return ""SYSTEM_BOOT""; case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_CRASH : return ""CRASH""; case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_USER_SWITCH : return ""USER_SWITCH""; case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_RESTORE_USER_SETTING : return ""RESTORE_USER_SETTING""; case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_UNSPECIFIED : default : return (""UNKNOWN["" + reason) + ""]""; } }",8f42572eeefbd1cef5243fe07a213100e5ee35e3,2018-03-09 00:57:52,9
632219,services_core_java_com_android_server_BluetoothManagerService.java,"public void handleOnBootPhase() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Bluetooth boot completed""); } android.os.UserManagerInternal userManagerInternal = com.android.server.LocalServices.getService(android.os.UserManagerInternal.class); userManagerInternal.addUserRestrictionsListener(mUserRestrictionsListener); final boolean isBluetoothDisallowed = isBluetoothDisallowed(); if (isBluetoothDisallowed) { return; } if ((mEnableExternal) && (isBluetoothPersistedStateOnBluetooth())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Auto-enabling Bluetooth.""); } sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_SYSTEM_BOOT); } else if (!(isNameAndAddressSet())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Getting adapter name and address""); } android.os.Message getMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_GET_NAME_AND_ADDRESS); mHandler.sendMessage(getMsg); } }",2837c55c049752cc108315bb39a2f8dbec79c242,"public void handleOnBootPhase() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Bluetooth boot completed""); } android.os.UserManagerInternal userManagerInternal = com.android.server.LocalServices.getService(android.os.UserManagerInternal.class); userManagerInternal.addUserRestrictionsListener(mUserRestrictionsListener); final boolean isBluetoothDisallowed = isBluetoothDisallowed(); if (isBluetoothDisallowed) { return; } if ((mEnableExternal) && (isBluetoothPersistedStateOnBluetooth())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Auto-enabling Bluetooth.""); } sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_SYSTEM_BOOT, android.app.ActivityThread.currentPackageName()); } else if (!(isNameAndAddressSet())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Getting adapter name and address""); } android.os.Message getMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_GET_NAME_AND_ADDRESS); mHandler.sendMessage(getMsg); } }",58dc7978811f42da0cb02920a46cda9b594fcdfc,"public void handleOnBootPhase() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Bluetooth boot completed""); } android.os.UserManagerInternal userManagerInternal = com.android.server.LocalServices.getService(android.os.UserManagerInternal.class); userManagerInternal.addUserRestrictionsListener(mUserRestrictionsListener); final boolean isBluetoothDisallowed = isBluetoothDisallowed(); if (isBluetoothDisallowed) { return; } if ((mEnableExternal) && (isBluetoothPersistedStateOnBluetooth())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Auto-enabling Bluetooth.""); } sendEnableMsg(mQuietEnableExternal, BluetoothProtoEnums.ENABLE_DISABLE_REASON_SYSTEM_BOOT, mContext.getPackageName()); } else if (!(isNameAndAddressSet())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Getting adapter name and address""); } android.os.Message getMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_GET_NAME_AND_ADDRESS); mHandler.sendMessage(getMsg); } }",f7cb05abe6f5b6d0659309d3f12d997c1f02b94a,2018-03-09 00:57:52,9
632219,services_core_java_com_android_server_BluetoothManagerService.java,"public java.lang.String toString() { return (((timeToLog(mTimestamp)) + (mEnable ? "" Enabled "" : "" Disabled "")) + "" by "") + (mPackageName); }",51337659d5600df75124e0d3624f1a16608caffb,"public java.lang.String toString() { return (((((timeToLog(mTimestamp)) + (mEnable ? "" Enabled "" : "" Disabled "")) + "" due to "") + (com.android.server.BluetoothManagerService.getReasonString(mReason))) + "" by "") + (mPackageName); }",cd76757a236be63c8d45c44c1c86b4fa041393b1,"public java.lang.String toString() { return (((((com.android.server.BluetoothManagerService.timeToLog(mTimestamp)) + (mEnable ? "" Enabled "" : "" Disabled "")) + "" due to "") + (com.android.server.BluetoothManagerService.getEnableDisableReasonString(mReason))) + "" by "") + (mPackageName); }",2169699e0015fa6c59aa0170a1c9f7cb3ea04669,2018-03-09 00:57:52,9
636720,src_com_android_bluetooth_newavrcp_helpers_MediaData.java,,,"@java.lang.Override public boolean equals(java.lang.Object o) { if (o == null) return false; if (!(o instanceof com.android.bluetooth.avrcp.MediaData)) return false; final com.android.bluetooth.avrcp.MediaData u = ((com.android.bluetooth.avrcp.MediaData) (o)); if (!(java.util.Objects.equals(metadata, u.metadata))) { return false; } if (!(java.util.Objects.equals(queue, u.queue))) { return false; } if (!(com.android.bluetooth.avrcp.MediaPlayerWrapper.playstateEquals(state, u.state))) { return false; } return true; }",8d26d12bb220343648ddb2030e94ca7c05e11beb,"@java.lang.Override public boolean equals(java.lang.Object o) { if (o == null) return false; if (!(o instanceof com.android.bluetooth.avrcp.MediaData)) return false; final com.android.bluetooth.avrcp.MediaData u = ((com.android.bluetooth.avrcp.MediaData) (o)); if (!(com.android.bluetooth.avrcp.MediaPlayerWrapper.playstateEquals(state, u.state))) { return false; } if (!(java.util.Objects.equals(metadata, u.metadata))) { return false; } if (!(java.util.Objects.equals(queue, u.queue))) { return false; } return true; }",62d789e41e30b36e981d5c13dfbc8193788099ac,2018-03-09 06:07:09,4
636720,tests_unit_src_com_android_bluetooth_newavrcp_MediaPlayerWrapperTest.java,"@org.junit.Test public void testNoBrowsingMediaUpdates() { android.os.TestLooperManager looperManager = new android.os.TestLooperManager(mThread.getLooper()); com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = com.android.bluetooth.avrcp.MediaPlayerWrapper.wrap(mMockController, mThread.getLooper(), false); wrapper.registerCallback(mTestCbs); verify(mMockController).registerCallback(mControllerCbs.capture(), any()); com.android.bluetooth.avrcp.MediaController.Callback controllerCallbacks = mControllerCbs.getValue(); mTestMetadata.putString(MediaMetadata.METADATA_KEY_TITLE, ""New Title""); doReturn(mTestMetadata.build()).when(mMockController).getMetadata(); controllerCallbacks.onMetadataChanged(mTestMetadata.build()); verify(mTestCbs, times(1)).mediaUpdatedCallback(mMediaUpdateData.capture()); com.android.bluetooth.avrcp.MediaPlayerWrapper.MediaData data = mMediaUpdateData.getValue(); org.junit.Assert.assertEquals(""Returned Metadata isn't equal to given Metadata"", data.metadata.getDescription(), mTestMetadata.build().getDescription()); org.junit.Assert.assertEquals(""Returned PlaybackState isn't equal to original PlaybackState"", data.state.toString(), mTestState.build().toString()); org.junit.Assert.assertNull(""Returned Queue isn't null"", data.queue); mTestState.setActiveQueueItemId(103); doReturn(mTestState.build()).when(mMockController).getPlaybackState(); controllerCallbacks.onPlaybackStateChanged(mTestState.build()); verify(mTestCbs, times(2)).mediaUpdatedCallback(mMediaUpdateData.capture()); data = mMediaUpdateData.getValue(); org.junit.Assert.assertEquals(""Returned PlaybackState isn't equal to given PlaybackState"", data.state.toString(), mTestState.build().toString()); org.junit.Assert.assertEquals(""Returned Metadata isn't equal to given Metadata"", data.metadata.getDescription(), mTestMetadata.build().getDescription()); org.junit.Assert.assertNull(""Returned Queue isn't null"", data.queue); org.junit.Assert.assertFalse(wrapper.getTimeoutHandler().hasMessages(com.android.bluetooth.avrcp.MediaPlayerWrapperTest.MSG_TIMEOUT)); verify(mFailHandler, never()).onTerribleFailure(any(), any(), anyBoolean()); }",4fe6ce6910c2429d19005223efe59988dba6e898,"@org.junit.Test public void testIsReady() { com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = com.android.bluetooth.avrcp.MediaPlayerWrapper.wrap(mMockController, mThread.getLooper()); org.junit.Assert.assertTrue(wrapper.isReady()); doReturn(null).when(mMockController).getPlaybackState(); org.junit.Assert.assertFalse(wrapper.isReady()); doReturn(mTestState.build()).when(mMockController).getPlaybackState(); org.junit.Assert.assertTrue(wrapper.isReady()); doReturn(null).when(mMockController).getMetadata(); org.junit.Assert.assertFalse(wrapper.isReady()); doReturn(mTestMetadata.build()).when(mMockController).getMetadata(); org.junit.Assert.assertTrue(wrapper.isReady()); mTestMetadata.putString(MediaMetadata.METADATA_KEY_TITLE, null); doReturn(mTestMetadata.build()).when(mMockController).getMetadata(); org.junit.Assert.assertFalse(wrapper.isReady()); }",7f7fd50594588fa70bd6758355529104876c44b7,"@org.junit.Test public void testIsReady() { com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = com.android.bluetooth.avrcp.MediaPlayerWrapper.wrap(mMockController, mThread.getLooper()); org.junit.Assert.assertTrue(wrapper.isReady()); doReturn(null).when(mMockController).getPlaybackState(); org.junit.Assert.assertFalse(wrapper.isReady()); doReturn(mTestState.build()).when(mMockController).getPlaybackState(); org.junit.Assert.assertTrue(wrapper.isReady()); doReturn(null).when(mMockController).getMetadata(); org.junit.Assert.assertFalse(wrapper.isReady()); doReturn(mTestMetadata.build()).when(mMockController).getMetadata(); org.junit.Assert.assertTrue(wrapper.isReady()); }",b7fc2dcbe3625020acee412ee1d968152d816121,2018-03-09 06:07:09,4
636720,src_com_android_bluetooth_newavrcp_MediaPlayerWrapper.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void updateMediaController(com.android.bluetooth.avrcp.MediaController newController) { if (newController == (mMediaController)) return; synchronized(mCallbackLock) { if (((mRegisteredCallback) == null) || ((mControllerCallbacks) == null)) { return; } } mControllerCallbacks.cleanup(); mMediaController = newController; mControllerCallbacks = new com.android.bluetooth.avrcp.MediaPlayerWrapper.MediaControllerListener(mLooper); if (com.android.bluetooth.avrcp.MediaPlayerWrapper.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ((""Controller for "" + (mPackageName)) + "" was updated."")); }",af2ed8b6375237de4abd943d8626a21a8e6757ec,"void updateMediaController(com.android.bluetooth.avrcp.MediaController newController) { if (newController == (mMediaController)) return; synchronized(mCallbackLock) { if (((mRegisteredCallback) == null) || ((mControllerCallbacks) == null)) { return; } } mControllerCallbacks.cleanup(); mMediaController = newController; mControllerCallbacks = new com.android.bluetooth.avrcp.MediaPlayerWrapper.MediaControllerListener(mLooper); d(((""Controller for "" + (mPackageName)) + "" was updated."")); }",0c49a6fa676300ebe3bc82a1c525fe12b65a6799,2018-03-09 06:07:09,4
636720,src_com_android_bluetooth_newavrcp_MediaPlayerWrapper.java,boolean isBrowsable() { return mIsBrowsable; },d2b9c2cdcd9e5519a4b7463781e044f63c98cd8f,"boolean isReady() { if ((getPlaybackState()) == null) { d(""isReady(): PlaybackState is null""); return false; } if ((getMetadata()) == null) { d(""isReady(): Metadata is null""); return false; } if ((getMetadata().getString(MediaMetadata.METADATA_KEY_TITLE)) == null) { d(""Metadata is missing title""); return false; } return true; }",bda3e71bfcfce539cc42ec89def4773ec1ac8ddc,"boolean isReady() { if ((getPlaybackState()) == null) { d(""isReady(): PlaybackState is null""); return false; } if ((getMetadata()) == null) { d(""isReady(): Metadata is null""); return false; } return true; }",82f91119daed0b95bcefd404ccbdbaed8968f1d1,2018-03-09 06:07:09,4
636100,core_java_android_net_NetworkInfo.java,public android.net.NetworkInfo.DetailedState getDetailedState() { synchronized(this) { return mDetailedState; } },4f454b8b7be63b2549daa17133a6bec3532e8cd9,@java.lang.Deprecated public android.net.NetworkInfo.DetailedState getDetailedState() { synchronized(this) { return mDetailedState; } },bc17083a559fb33e8885132e61eafa3b09e39fc6,public android.net.NetworkInfo.DetailedState getDetailedState() { synchronized(this) { return mDetailedState; } },4f454b8b7be63b2549daa17133a6bec3532e8cd9,2018-03-09 09:46:09,10
636100,core_java_android_net_NetworkInfo.java,public boolean isConnected() { synchronized(this) { return (mState) == (android.net.NetworkInfo.State.CONNECTED); } },d4a5446570c0dc81f5907c144b39e5c43bebf34e,@java.lang.Deprecated public boolean isConnected() { synchronized(this) { return (mState) == (android.net.NetworkInfo.State.CONNECTED); } },1acae8f2046b49d67b26927dd3a1b1508364c627,public boolean isConnected() { synchronized(this) { return (mState) == (android.net.NetworkInfo.State.CONNECTED); } },d4a5446570c0dc81f5907c144b39e5c43bebf34e,2018-03-09 09:46:09,10
628463,test_952-invoke-custom_src_TestVariableArityLinkerMethod.java,,,"private static java.lang.invoke.CallSite linkerMethod2(java.lang.invoke.MethodHandles.Lookup lookup, java.lang.String methodName, java.lang.invoke.MethodType methodType, int extraInt, java.lang.String... extraArityArgs) throws java.lang.Throwable { java.lang.System.out.print(""linkerMethod2(""); java.lang.System.out.print(lookup.lookupClass()); java.lang.System.out.print("", ""); java.lang.System.out.print(methodName); java.lang.System.out.print("", ""); java.lang.System.out.print(methodType); java.lang.System.out.print("", ""); java.lang.System.out.print(extraInt); for (java.lang.String arg : extraArityArgs) { java.lang.System.out.print("", ""); java.lang.System.out.print(arg); } java.lang.System.out.println("")""); java.lang.invoke.MethodHandle mh = lookup.findStatic(lookup.lookupClass(), methodName, methodType); return new java.lang.invoke.ConstantCallSite(mh); }",bd10b7cab8b721059321bdb1e2f0dbdf32722f53,"private static java.lang.invoke.CallSite bsmWithIntAndStringArray(java.lang.invoke.MethodHandles.Lookup lookup, java.lang.String methodName, java.lang.invoke.MethodType methodType, int extraInt, java.lang.String... extraArityArgs) throws java.lang.Throwable { TestVariableArityLinkerMethod.printBsmArgs(""bsmWithIntAndStringArray"", lookup, methodName, methodType, extraInt, extraArityArgs); java.lang.invoke.MethodHandle mh = lookup.findStatic(lookup.lookupClass(), methodName, methodType); return new java.lang.invoke.ConstantCallSite(mh); }",66fc14af0be7d3f14df027b7accbefc78c9e6c8f,2018-03-09 17:24:20,11
628463,test_952-invoke-custom_src_TestVariableArityLinkerMethod.java,,,"@annotations.CalledByIndy(bootstrapMethod = @annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = ""linkerMethod2"", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.String.class, java.lang.invoke.MethodType.class, int.class, java.lang.String[].class }), fieldOrMethodName = ""methodZ"", constantArgumentsForBootstrapMethod = { @annotations.Constant(intValue = 103) }) private static void methodZ() { java.lang.System.out.println(""methodZ""); }",774fe8797eaf3715220e2a4e045e547bc5313aa6,"@annotations.CalledByIndy(bootstrapMethod = @annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = ""bsmWithIntAndStringArray"", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.String.class, java.lang.invoke.MethodType.class, int.class, java.lang.String[].class }), fieldOrMethodName = ""methodF"", constantArgumentsForBootstrapMethod = { @annotations.Constant(intValue = 103) }) private static void methodF() { java.lang.System.out.println(""methodF""); }",197aa88a917b158fc58694331f7d57a3a96c1e1e,2018-03-09 17:24:20,11
628463,test_952-invoke-custom_src_TestVariableArityLinkerMethod.java,,,"@annotations.CalledByIndy(bootstrapMethod = @annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = ""linkerMethod"", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.String.class, java.lang.invoke.MethodType.class, java.lang.String[].class }), fieldOrMethodName = ""methodC"") private static void methodC() { java.lang.System.out.println(""methodC""); }",4687157837739c47ca753520704fe9b7d0949dfb,"@annotations.CalledByIndy(bootstrapMethod = @annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = ""bsmWithStringArray"", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.String.class, java.lang.invoke.MethodType.class, java.lang.String[].class }), fieldOrMethodName = ""methodC"") private static void methodC() { java.lang.System.out.println(""methodC""); }",8cb440ad237519b2f36716ae7616b62a030ac93a,2018-03-09 17:24:20,11
628463,test_952-invoke-custom_src_TestVariableArityLinkerMethod.java,,,"@annotations.CalledByIndy(bootstrapMethod = @annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = ""linkerMethod"", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.String.class, java.lang.invoke.MethodType.class, java.lang.String[].class }), fieldOrMethodName = ""methodA"", constantArgumentsForBootstrapMethod = { @annotations.Constant(stringValue = ""Aachen""), @annotations.Constant(stringValue = ""Aalborg""), @annotations.Constant(stringValue = ""Aalto"") }) private static void methodA() { java.lang.System.out.println(""methodA""); }",e52b33d841e401d0b0b0de452b1719cfe619d71d,"@annotations.CalledByIndy(bootstrapMethod = @annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = ""bsmWithStringArray"", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.String.class, java.lang.invoke.MethodType.class, java.lang.String[].class }), fieldOrMethodName = ""methodA"", constantArgumentsForBootstrapMethod = { @annotations.Constant(stringValue = ""Aachen""), @annotations.Constant(stringValue = ""Aalborg""), @annotations.Constant(stringValue = ""Aalto"") }) private static void methodA() { java.lang.System.out.println(""methodA""); }",db35922ec2d087f34c2c898632fcd2dd3e8119ca,2018-03-09 17:24:20,11
628463,test_952-invoke-custom_src_TestVariableArityLinkerMethod.java,,,"private static java.lang.invoke.CallSite linkerMethod(java.lang.invoke.MethodHandles.Lookup lookup, java.lang.String methodName, java.lang.invoke.MethodType methodType, java.lang.String... arityArgs) throws java.lang.Throwable { java.lang.System.out.print(""linkerMethod(""); java.lang.System.out.print(lookup.lookupClass()); java.lang.System.out.print("", ""); java.lang.System.out.print(methodName); java.lang.System.out.print("", ""); java.lang.System.out.print(methodType); for (java.lang.String arg : arityArgs) { java.lang.System.out.print("", ""); java.lang.System.out.print(arg); } java.lang.System.out.println("")""); java.lang.invoke.MethodHandle mh = lookup.findStatic(lookup.lookupClass(), methodName, methodType); return new java.lang.invoke.ConstantCallSite(mh); }",269ed670306b484ae798b000a434ceae8e660be3,"private static java.lang.invoke.CallSite bsmWithStringArray(java.lang.invoke.MethodHandles.Lookup lookup, java.lang.String methodName, java.lang.invoke.MethodType methodType, java.lang.String... arityArgs) throws java.lang.Throwable { TestVariableArityLinkerMethod.printBsmArgs(""bsmWithStringArray"", lookup, methodName, methodType, arityArgs); java.lang.invoke.MethodHandle mh = lookup.findStatic(lookup.lookupClass(), methodName, methodType); return new java.lang.invoke.ConstantCallSite(mh); }",59a894c2df218ff2e2d57ef53ec5deef4c4a7b76,2018-03-09 17:24:20,11
628463,test_952-invoke-custom_src_TestVariableArityLinkerMethod.java,,,static void test() { for (int i = 0; i < 2; ++i) { TestVariableArityLinkerMethod.methodA(); TestVariableArityLinkerMethod.methodB(); TestVariableArityLinkerMethod.methodC(); } for (int i = 0; i < 2; ++i) { TestVariableArityLinkerMethod.methodX(); TestVariableArityLinkerMethod.methodY(); TestVariableArityLinkerMethod.methodZ(); } },ef94eab018368e28f6d1807cf23966178f199640,"static void test() { for (int i = 0; i < 2; ++i) { TestVariableArityLinkerMethod.methodA(); TestVariableArityLinkerMethod.methodB(); TestVariableArityLinkerMethod.methodC(); } for (int i = 0; i < 2; ++i) { TestVariableArityLinkerMethod.methodD(); TestVariableArityLinkerMethod.methodE(); TestVariableArityLinkerMethod.methodF(); } TestVariableArityLinkerMethod.methodG(); TestVariableArityLinkerMethod.methodH(); TestVariableArityLinkerMethod.methodI(); TestVariableArityLinkerMethod.methodJ(); TestVariableArityLinkerMethod.methodK(); try { TestVariableArityLinkerMethod.methodO(); assertNotReached(); } catch (java.lang.BootstrapMethodError expected) { java.lang.System.out.print(""methodO => ""); java.lang.System.out.print(expected.getClass()); java.lang.System.out.print("" => ""); java.lang.System.out.println(expected.getCause().getClass()); } try { TestVariableArityLinkerMethod.methodP(); assertNotReached(); } catch (java.lang.BootstrapMethodError expected) { java.lang.System.out.print(""methodP => ""); java.lang.System.out.print(expected.getClass()); java.lang.System.out.print("" => ""); java.lang.System.out.println(expected.getCause().getClass()); } try { TestVariableArityLinkerMethod.methodQ(); assertNotReached(); } catch (java.lang.BootstrapMethodError expected) { java.lang.System.out.print(""methodQ => ""); java.lang.System.out.print(expected.getClass()); java.lang.System.out.print("" => ""); java.lang.System.out.println(expected.getCause().getClass()); } try { TestVariableArityLinkerMethod.methodR(); assertNotReached(); } catch (java.lang.BootstrapMethodError expected) { java.lang.System.out.print(""methodR => ""); java.lang.System.out.print(expected.getClass()); java.lang.System.out.print("" => ""); java.lang.System.out.println(expected.getCause().getClass()); } }",99dcbadb9053c0bf4d2608e7139f7a95ed28b279,2018-03-09 17:24:20,11
628463,test_952-invoke-custom_src_TestVariableArityLinkerMethod.java,,,"@annotations.CalledByIndy(bootstrapMethod = @annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = ""linkerMethod2"", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.String.class, java.lang.invoke.MethodType.class, int.class, java.lang.String[].class }), fieldOrMethodName = ""methodY"", constantArgumentsForBootstrapMethod = { @annotations.Constant(intValue = 102), @annotations.Constant(stringValue = ""zonic"") }) private static void methodY() { java.lang.System.out.println(""methodY""); }",5ea94643433ffec3260c7add1396d0f2ba006faf,"@annotations.CalledByIndy(bootstrapMethod = @annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = ""bsmWithIntAndStringArray"", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.String.class, java.lang.invoke.MethodType.class, int.class, java.lang.String[].class }), fieldOrMethodName = ""methodE"", constantArgumentsForBootstrapMethod = { @annotations.Constant(intValue = 102), @annotations.Constant(stringValue = ""zonic"") }) private static void methodE() { java.lang.System.out.println(""methodE""); }",74025300dc29f84361a32680c8e8568915c37c69,2018-03-09 17:24:20,11
628463,test_952-invoke-custom_src_TestVariableArityLinkerMethod.java,,,"@annotations.CalledByIndy(bootstrapMethod = @annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = ""linkerMethod"", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.String.class, java.lang.invoke.MethodType.class, java.lang.String[].class }), fieldOrMethodName = ""methodB"", constantArgumentsForBootstrapMethod = { @annotations.Constant(stringValue = ""barium"") }) private static void methodB() { java.lang.System.out.println(""methodB""); }",a93b55ef40458b25baa915c9cf6fe9776d7ef221,"@annotations.CalledByIndy(bootstrapMethod = @annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = ""bsmWithStringArray"", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.String.class, java.lang.invoke.MethodType.class, java.lang.String[].class }), fieldOrMethodName = ""methodB"", constantArgumentsForBootstrapMethod = { @annotations.Constant(stringValue = ""barium"") }) private static void methodB() { java.lang.System.out.println(""methodB""); }",e5bdef2f6fb4fe427667fb7da5772ccbce191d0c,2018-03-09 17:24:20,11
628463,test_952-invoke-custom_src_TestVariableArityLinkerMethod.java,,,"@annotations.CalledByIndy(bootstrapMethod = @annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = ""linkerMethod2"", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.String.class, java.lang.invoke.MethodType.class, int.class, java.lang.String[].class }), fieldOrMethodName = ""methodX"", constantArgumentsForBootstrapMethod = { @annotations.Constant(intValue = 101), @annotations.Constant(stringValue = ""zoo""), @annotations.Constant(stringValue = ""zoogene""), @annotations.Constant(stringValue = ""zoogenic"") }) private static void methodX() { java.lang.System.out.println(""methodX""); }",9235b9960a12cf2835df4087edfaed4c5ea1e8b9,"@annotations.CalledByIndy(bootstrapMethod = @annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = ""bsmWithIntAndStringArray"", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.String.class, java.lang.invoke.MethodType.class, int.class, java.lang.String[].class }), fieldOrMethodName = ""methodD"", constantArgumentsForBootstrapMethod = { @annotations.Constant(intValue = 101), @annotations.Constant(stringValue = ""zoo""), @annotations.Constant(stringValue = ""zoogene""), @annotations.Constant(stringValue = ""zoogenic"") }) private static void methodD() { java.lang.System.out.println(""methodD""); }",6d232abb19c8357b19a6586ba932df1f82c377fe,2018-03-09 17:24:20,11
515619,src_com_android_stk_StkInputActivity.java,"@java.lang.Override public void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkInputActivity.LOG_TAG, ((""onCreate - mIsResponseSent["" + (mIsResponseSent)) + ""]"")); if ((appService) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkInputActivity.LOG_TAG, ""onCreate - appService is null""); finish(); return; } android.app.ActionBar actionBar = null; if (getResources().getBoolean(R.bool.show_menu_title_only_on_menu)) { actionBar = getActionBar(); if (actionBar != null) { actionBar.hide(); } } setContentView(R.layout.stk_input); if (actionBar != null) { mMoreOptions = findViewById(R.id.more); mMoreOptions.setVisibility(View.VISIBLE); mMoreOptions.setOnClickListener(this); } mTextIn = ((android.widget.EditText) (this.findViewById(R.id.in_text))); mPromptView = ((android.widget.TextView) (this.findViewById(R.id.prompt))); mInstance = this; android.widget.Button okButton = ((android.widget.Button) (findViewById(R.id.button_ok))); android.widget.Button yesButton = ((android.widget.Button) (findViewById(R.id.button_yes))); android.widget.Button noButton = ((android.widget.Button) (findViewById(R.id.button_no))); okButton.setOnClickListener(this); yesButton.setOnClickListener(this); noButton.setOnClickListener(this); mYesNoLayout = findViewById(R.id.yes_no_layout); mNormalLayout = findViewById(R.id.normal_layout); initFromIntent(getIntent()); mContext = getBaseContext(); mAcceptUsersInput = true; }",487f960d56edc60b999fecfabbebc12a66d95d90,"@java.lang.Override public void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkInputActivity.LOG_TAG, ((""onCreate - mIsResponseSent["" + (mIsResponseSent)) + ""]"")); if ((appService) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkInputActivity.LOG_TAG, ""onCreate - appService is null""); finish(); return; } android.app.ActionBar actionBar = null; if (getResources().getBoolean(R.bool.show_menu_title_only_on_menu)) { actionBar = getActionBar(); if (actionBar != null) { actionBar.hide(); } } setContentView(R.layout.stk_input); if (actionBar != null) { mMoreOptions = findViewById(R.id.more); mMoreOptions.setVisibility(View.VISIBLE); mMoreOptions.setOnClickListener(this); } mTextIn = ((android.widget.EditText) (this.findViewById(R.id.in_text))); mPromptView = ((android.widget.TextView) (this.findViewById(R.id.prompt))); mInstance = this; android.widget.Button okButton = ((android.widget.Button) (findViewById(R.id.button_ok))); android.widget.Button yesButton = ((android.widget.Button) (findViewById(R.id.button_yes))); android.widget.Button noButton = ((android.widget.Button) (findViewById(R.id.button_no))); okButton.setOnClickListener(this); yesButton.setOnClickListener(this); noButton.setOnClickListener(this); mYesNoLayout = findViewById(R.id.yes_no_layout); mNormalLayout = findViewById(R.id.normal_layout); initFromIntent(getIntent()); mContext = getBaseContext(); mAcceptUsersInput = true; }",ed09eec8cb8bef431b1327460ceaf38546d37d89,"@java.lang.Override public void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkInputActivity.LOG_TAG, ((""onCreate - mIsResponseSent["" + (mIsResponseSent)) + ""]"")); if ((appService) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkInputActivity.LOG_TAG, ""onCreate - appService is null""); finish(); return; } android.app.ActionBar actionBar = null; if (getResources().getBoolean(R.bool.show_menu_title_only_on_menu)) { actionBar = getActionBar(); if (actionBar != null) { actionBar.hide(); } } setContentView(R.layout.stk_input); if (actionBar != null) { mMoreOptions = findViewById(R.id.more); mMoreOptions.setVisibility(View.VISIBLE); mMoreOptions.setOnClickListener(this); } mTextIn = ((android.widget.EditText) (this.findViewById(R.id.in_text))); mPromptView = ((android.widget.TextView) (this.findViewById(R.id.prompt))); mInstance = this; android.widget.Button okButton = ((android.widget.Button) (findViewById(R.id.button_ok))); android.widget.Button cancelButton = ((android.widget.Button) (findViewById(R.id.button_cancel))); android.widget.Button yesButton = ((android.widget.Button) (findViewById(R.id.button_yes))); android.widget.Button noButton = ((android.widget.Button) (findViewById(R.id.button_no))); okButton.setOnClickListener(this); cancelButton.setOnClickListener(this); yesButton.setOnClickListener(this); noButton.setOnClickListener(this); mYesNoLayout = findViewById(R.id.yes_no_layout); mNormalLayout = findViewById(R.id.normal_layout); initFromIntent(getIntent()); mContext = getBaseContext(); mAcceptUsersInput = true; }",7f77cbeaf8c037a135c0965a7bdf57b494e22a46,2018-03-09 18:29:17,6
632449,telephony_java_android_telephony_ServiceState.java,@android.telephony.ServiceState.DuplexMode public int getDuplexMode() { return android.telephony.ServiceState.DUPLEX_MODE_UNKNOWN; },42c73f17203187b93016e371e1b539d47d2479d4,@android.telephony.ServiceState.DuplexMode public int getDuplexMode() { if (!(android.telephony.ServiceState.isLte(mRilDataRadioTechnology))) { return android.telephony.ServiceState.DUPLEX_MODE_UNKNOWN; } int band = android.telephony.ChannelUtils.getOperatingBandForEarfcn(mChannelNumber); if (band >= (android.telephony.AccessNetworkConstants.EutranBand.BAND_65)) { return android.telephony.ServiceState.DUPLEX_MODE_FDD; } else if (band >= (android.telephony.AccessNetworkConstants.EutranBand.BAND_33)) { return android.telephony.ServiceState.DUPLEX_MODE_TDD; } else if (band >= (android.telephony.AccessNetworkConstants.EutranBand.BAND_1)) { return android.telephony.ServiceState.DUPLEX_MODE_FDD; } return android.telephony.ServiceState.DUPLEX_MODE_UNKNOWN; },41d560f19d7367ee4cf7be5962ff6d95a790df23,@android.telephony.ServiceState.DuplexMode public int getDuplexMode() { if (!(android.telephony.ServiceState.isLte(mRilDataRadioTechnology))) { return android.telephony.ServiceState.DUPLEX_MODE_UNKNOWN; } int band = android.telephony.AccessNetworkUtils.getOperatingBandForEarfcn(mChannelNumber); return android.telephony.AccessNetworkUtils.getDuplexModeForEutranBand(band); },2e5c70382a2919414e1684f1465be521ed88042e,2018-03-09 21:19:08,5
632321,src_java_com_android_internal_telephony_ServiceStateTracker.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void updateChannelNumber() { android.telephony.CellInfo primaryCellInfo = null; for (android.telephony.CellInfo cellInfo : mLastCellInfoList) { if ((cellInfo.getCellConnectionStatus()) == (android.telephony.CellInfo.CONNECTION_PRIMARY_SERVING)) { primaryCellInfo = cellInfo; break; } } if (primaryCellInfo instanceof android.telephony.CellInfoGsm) { android.telephony.CellInfoGsm cellInfoGsm = ((android.telephony.CellInfoGsm) (primaryCellInfo)); int channelNumber = cellInfoGsm.getCellIdentity().getArfcn(); mNewSS.setChannelNumber(channelNumber); if (com.android.internal.telephony.ServiceStateTracker.VDBG) { log((""Setting channel number, ARFCN: "" + channelNumber)); } } else if (primaryCellInfo instanceof android.telephony.CellInfoWcdma) { android.telephony.CellInfoWcdma cellInfoWcdma = ((android.telephony.CellInfoWcdma) (primaryCellInfo)); int channelNumber = cellInfoWcdma.getCellIdentity().getUarfcn(); mNewSS.setChannelNumber(channelNumber); if (com.android.internal.telephony.ServiceStateTracker.VDBG) { log((""Setting channel number, UARFCN: "" + channelNumber)); } } else if (primaryCellInfo instanceof android.telephony.CellInfoLte) { android.telephony.CellInfoLte cellInfoLte = ((android.telephony.CellInfoLte) (primaryCellInfo)); int channelNumber = cellInfoLte.getCellIdentity().getEarfcn(); mNewSS.setChannelNumber(channelNumber); if (com.android.internal.telephony.ServiceStateTracker.VDBG) { log((""Setting channel number, EARFCN: "" + channelNumber)); } } else { if (com.android.internal.telephony.ServiceStateTracker.DBG) { log(""Could not set ServiceState channel number""); } } }",0f909a1d88ec0772777adda81ab458d80f21e1dc,"private void setChannelNumberFromCellIdentity(android.telephony.ServiceState ss, android.telephony.CellIdentity cellIdentity) { if (cellIdentity == null) { if (com.android.internal.telephony.ServiceStateTracker.DBG) { log(""Could not set ServiceState channel number. CellIdentity null""); } return; } ss.setChannelNumber(cellIdentity.getChannelNumber()); if (com.android.internal.telephony.ServiceStateTracker.VDBG) { log((""Setting channel number: "" + (cellIdentity.getChannelNumber()))); } }",39c86f04d8d67a88fa7ee367fc0e7752a39756c8,2018-03-09 21:19:08,6
633945,tests_tests_app.usage_src_android_app_usage_cts_NetworkUsageStatsTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void assertResultNotEmpty(android.app.usage.NetworkStats result) { assertTrue((result != null)); android.app.usage.NetworkStats.Bucket bucket = new android.app.usage.NetworkStats.Bucket(); long totalTxPackets = 0; long totalRxPackets = 0; long totalTxBytes = 0; long totalRxBytes = 0; while (result.hasNextBucket()) { assertTrue(result.getNextBucket(bucket)); assertTimestamps(bucket); assertEquals(bucket.getState(), NetworkStats.Bucket.STATE_ALL); assertEquals(bucket.getMetered(), NetworkStats.Bucket.METERED_ALL); assertEquals(bucket.getDefaultNetwork(), NetworkStats.Bucket.DEFAULT_NETWORK_ALL); if ((bucket.getUid()) == (java.lang.Process.myUid())) { totalTxPackets += bucket.getTxPackets(); totalRxPackets += bucket.getRxPackets(); totalTxBytes += bucket.getTxBytes(); totalRxBytes += bucket.getRxBytes(); } } assertFalse(result.getNextBucket(bucket)); assertTrue((""No Rx bytes usage for uid "" + (java.lang.Process.myUid())), (totalRxBytes > 0)); assertTrue((""No Rx packets usage for uid "" + (java.lang.Process.myUid())), (totalRxPackets > 0)); assertTrue((""No Tx bytes usage for uid "" + (java.lang.Process.myUid())), (totalTxBytes > 0)); assertTrue((""No Tx packets usage for uid "" + (java.lang.Process.myUid())), (totalTxPackets > 0)); }",c2704dfc76dc57793183ec492d7076ae3b023737,"private long getTotalAndAssertNotEmpty(android.app.usage.NetworkStats result) { assertTrue((result != null)); android.app.usage.NetworkStats.Bucket bucket = new android.app.usage.NetworkStats.Bucket(); long totalTxPackets = 0; long totalRxPackets = 0; long totalTxBytes = 0; long totalRxBytes = 0; while (result.hasNextBucket()) { assertTrue(result.getNextBucket(bucket)); assertTimestamps(bucket); assertEquals(bucket.getState(), NetworkStats.Bucket.STATE_ALL); assertEquals(bucket.getMetered(), NetworkStats.Bucket.METERED_ALL); assertEquals(bucket.getDefaultNetwork(), NetworkStats.Bucket.DEFAULT_NETWORK_ALL); if ((bucket.getUid()) == (java.lang.Process.myUid())) { totalTxPackets += bucket.getTxPackets(); totalRxPackets += bucket.getRxPackets(); totalTxBytes += bucket.getTxBytes(); totalRxBytes += bucket.getRxBytes(); } } assertFalse(result.getNextBucket(bucket)); assertTrue((""No Rx bytes usage for uid "" + (java.lang.Process.myUid())), (totalRxBytes > 0)); assertTrue((""No Rx packets usage for uid "" + (java.lang.Process.myUid())), (totalRxPackets > 0)); assertTrue((""No Tx bytes usage for uid "" + (java.lang.Process.myUid())), (totalTxBytes > 0)); assertTrue((""No Tx packets usage for uid "" + (java.lang.Process.myUid())), (totalTxPackets > 0)); return totalRxBytes + totalTxBytes; }",af4b4f9a7d901ce2f49656434e50f56d1ce84caf,2018-03-12 05:07:38,4
633945,tests_tests_app.usage_src_android_app_usage_cts_NetworkUsageStatsTest.java,"public void testAppDetails() throws java.lang.Exception { for (int i = 0; i < (mNetworkInterfacesToTest.length); ++i) { if (!(shouldTestThisNetworkType(i, ((android.app.usage.cts.NetworkUsageStatsTest.MINUTE) * 120)))) { continue; } setAppOpsMode(AppOpsManager.OPSTR_GET_USAGE_STATS, ""allow""); android.app.usage.NetworkStats result = null; try { result = mNsm.queryDetails(mNetworkInterfacesToTest[i].getNetworkType(), getSubscriberId(i), mStartTime, mEndTime); assertTrue((result != null)); android.app.usage.NetworkStats.Bucket bucket = new android.app.usage.NetworkStats.Bucket(); long totalTxPackets = 0; long totalRxPackets = 0; long totalTxBytes = 0; long totalRxBytes = 0; while (result.hasNextBucket()) { assertTrue(result.getNextBucket(bucket)); assertTimestamps(bucket); assertEquals(bucket.getState(), NetworkStats.Bucket.STATE_ALL); assertEquals(bucket.getMetered(), NetworkStats.Bucket.METERED_ALL); assertEquals(bucket.getDefaultNetwork(), NetworkStats.Bucket.DEFAULT_NETWORK_ALL); if ((bucket.getUid()) == (java.lang.Process.myUid())) { totalTxPackets += bucket.getTxPackets(); totalRxPackets += bucket.getRxPackets(); totalTxBytes += bucket.getTxBytes(); totalRxBytes += bucket.getRxBytes(); } } assertFalse(result.getNextBucket(bucket)); assertTrue((""No Rx bytes usage for uid "" + (java.lang.Process.myUid())), (totalRxBytes > 0)); assertTrue((""No Rx packets usage for uid "" + (java.lang.Process.myUid())), (totalRxPackets > 0)); assertTrue((""No Tx bytes usage for uid "" + (java.lang.Process.myUid())), (totalTxBytes > 0)); assertTrue((""No Tx packets usage for uid "" + (java.lang.Process.myUid())), (totalTxPackets > 0)); } catch (android.os.RemoteException | java.lang.SecurityException e) { fail((""testAppDetails fails with exception: "" + (e.toString()))); } finally { if (result != null) { result.close(); } } setAppOpsMode(AppOpsManager.OPSTR_GET_USAGE_STATS, ""deny""); try { result = mNsm.queryDetails(mNetworkInterfacesToTest[i].getNetworkType(), getSubscriberId(i), mStartTime, mEndTime); fail(""negative testAppDetails fails: no exception thrown.""); } catch (android.os.RemoteException e) { fail((""testAppDetails fails with exception: "" + (e.toString()))); } catch (java.lang.SecurityException e) { } } }",7f6d9d4bf35af74347a707cad4f5845f1d15f6e9,"public void testAppDetails() throws java.lang.Exception { for (int i = 0; i < (mNetworkInterfacesToTest.length); ++i) { if (!(shouldTestThisNetworkType(i, ((android.app.usage.cts.NetworkUsageStatsTest.MINUTE) * 120)))) { continue; } setAppOpsMode(AppOpsManager.OPSTR_GET_USAGE_STATS, ""allow""); android.app.usage.NetworkStats result = null; try { result = mNsm.queryDetails(mNetworkInterfacesToTest[i].getNetworkType(), getSubscriberId(i), mStartTime, mEndTime); assertResultNotEmpty(result); } catch (android.os.RemoteException | java.lang.SecurityException e) { fail((""testAppDetails fails with exception: "" + (e.toString()))); } finally { if (result != null) { result.close(); } } setAppOpsMode(AppOpsManager.OPSTR_GET_USAGE_STATS, ""deny""); try { result = mNsm.queryDetails(mNetworkInterfacesToTest[i].getNetworkType(), getSubscriberId(i), mStartTime, mEndTime); fail(""negative testAppDetails fails: no exception thrown.""); } catch (android.os.RemoteException e) { fail((""testAppDetails fails with exception: "" + (e.toString()))); } catch (java.lang.SecurityException e) { } } }",7cd8bcd8b94c72f789fec304ff0dd986e9cfc0ab,"public void testAppDetails() throws java.lang.Exception { for (int i = 0; i < (mNetworkInterfacesToTest.length); ++i) { if (!(shouldTestThisNetworkType(i, ((android.app.usage.cts.NetworkUsageStatsTest.MINUTE) * 120)))) { continue; } setAppOpsMode(AppOpsManager.OPSTR_GET_USAGE_STATS, ""allow""); android.app.usage.NetworkStats result = null; try { result = mNsm.queryDetails(mNetworkInterfacesToTest[i].getNetworkType(), getSubscriberId(i), mStartTime, mEndTime); long totalBytesWithSubscriberId = getTotalAndAssertNotEmpty(result); result = mNsm.queryDetails(mNetworkInterfacesToTest[i].getNetworkType(), null, mStartTime, mEndTime); assertTrue(""More bytes with subscriberId filter than without."", ((getTotalAndAssertNotEmpty(result)) >= totalBytesWithSubscriberId)); } catch (android.os.RemoteException | java.lang.SecurityException e) { fail((""testAppDetails fails with exception: "" + (e.toString()))); } finally { if (result != null) { result.close(); } } setAppOpsMode(AppOpsManager.OPSTR_GET_USAGE_STATS, ""deny""); try { result = mNsm.queryDetails(mNetworkInterfacesToTest[i].getNetworkType(), getSubscriberId(i), mStartTime, mEndTime); fail(""negative testAppDetails fails: no exception thrown.""); } catch (android.os.RemoteException e) { fail((""testAppDetails fails with exception: "" + (e.toString()))); } catch (java.lang.SecurityException e) { } } }",05e17d6f52dcaff63345c49b5c98c0bb12e1e076,2018-03-12 05:07:38,4
637794,test_1934-jvmti-signal-thread_src_art_Test1934.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static void ensureInitialized(java.lang.Class c) { c.getName(); },57c2265cdd4ff688f9eff6888cc38a86e9128a09,"private static void ensureInitialized(java.lang.Class c) { try { java.lang.Class.forName(c.getName()); } catch (java.lang.Exception e) { throw new java.lang.Error((""Failed to initialize "" + c), e); } }",034aadaaf196b2a5e658d518c6c8ec7655820e2c,2018-03-12 17:40:25,2
630846,src_java_com_android_internal_telephony_ims_ImsResolver.java,"private void maybeAddedImsService(java.lang.String packageName) { android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, (""maybeAddedImsService, packageName: "" + packageName)); java.util.List<com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo> infos = getImsServiceInfo(packageName); java.util.List<com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo> newlyAddedInfos = new java.util.ArrayList<>(); for (com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info : infos) { java.util.Optional<com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo> match = getInfoByComponentName(mInstalledServicesCache, info.name); if (match.isPresent()) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (""Updating features in cached ImsService: "" + (info.name))); android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, (((""Updating features - Old features: "" + (match.get().supportedFeatures)) + "" new features: "") + (info.supportedFeatures))); match.get().supportedFeatures = info.supportedFeatures; updateImsServiceFeatures(info); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (""Adding newly added ImsService to cache: "" + (info.name))); mInstalledServicesCache.add(info); newlyAddedInfos.add(info); } } for (com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info : newlyAddedInfos) { if (isActiveCarrierService(info)) { bindNewImsService(info); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } else if (isDeviceService(info)) { bindNewImsService(info); } } }",caf529967a7a51922b77d369b3a4604859a0900d,"private void maybeAddedImsService(java.lang.String packageName) { android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, (""maybeAddedImsService, packageName: "" + packageName)); java.util.List<com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo> infos = getImsServiceInfo(packageName); java.util.List<com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo> newlyAddedInfos = new java.util.ArrayList<>(); for (com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info : infos) { java.util.Optional<com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo> match = getInfoByComponentName(mInstalledServicesCache, info.name); if (match.isPresent()) { if (info.featureFromMetadata) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (""Updating features in cached ImsService: "" + (info.name))); android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, (((""Updating features - Old features: "" + (match.get())) + "" new features: "") + info)); match.get().replaceFeatures(info.getSupportedFeatures()); updateImsServiceFeatures(info); } else { } } else { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (""Adding newly added ImsService to cache: "" + (info.name))); mInstalledServicesCache.add(info); if (info.featureFromMetadata) { newlyAddedInfos.add(info); } else { } } } for (com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info : newlyAddedInfos) { if (isActiveCarrierService(info)) { bindNewImsService(info); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } else if (isDeviceService(info)) { bindNewImsService(info); } } }",d15b0077dba976d8bc1d5e497a5469ccbb317458,"private void maybeAddedImsService(java.lang.String packageName) { android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, (""maybeAddedImsService, packageName: "" + packageName)); java.util.List<com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo> infos = getImsServiceInfo(packageName); java.util.List<com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo> newlyAddedInfos = new java.util.ArrayList<>(); for (com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info : infos) { com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo match = getInfoByComponentName(mInstalledServicesCache, info.name); if (match != null) { if (info.featureFromMetadata) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (""Updating features in cached ImsService: "" + (info.name))); android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, (((""Updating features - Old features: "" + match) + "" new features: "") + info)); match.replaceFeatures(info.getSupportedFeatures()); updateImsServiceFeatures(info); } else { scheduleQueryForFeatures(info); } } else { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (""Adding newly added ImsService to cache: "" + (info.name))); mInstalledServicesCache.put(info.name, info); if (info.featureFromMetadata) { newlyAddedInfos.add(info); } else { scheduleQueryForFeatures(info); } } } for (com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info : newlyAddedInfos) { if (isActiveCarrierService(info)) { bindImsService(info); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } else if (isDeviceService(info)) { bindImsService(info); } } }",1b4049c2ff4afbe4c070e39769eb76534a11dcb7,2018-03-12 22:53:45,10
630846,src_java_com_android_internal_telephony_ims_ImsResolver.java,"private void bindNewImsService(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info) { if (info == null) { return; } com.android.internal.telephony.ims.ImsServiceController controller = info.controllerFactory.create(mContext, info.name, this); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features = calculateFeaturesToCreate(info); if ((features.size()) > 0) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (((""Binding ImsService: "" + (controller.getComponentName())) + "" with features: "") + features)); controller.bind(features); mActiveControllers.add(controller); } }",d0b250f1100f2cefa24cddb17cd8078082276a77,"private void bindNewImsService(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info) { if (info == null) { return; } java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features = calculateFeaturesToCreate(info); if ((features.size()) > 0) { com.android.internal.telephony.ims.ImsServiceController controller = info.controllerFactory.create(mContext, info.name, this); android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (((""Binding ImsService: "" + (controller.getComponentName())) + "" with features: "") + features)); controller.bind(features); mActiveControllers.add(controller); } }",458455a0d4a2927dcc0c564570c251aeeb114925,"private void bindImsService(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info) { if (info == null) { return; } java.util.HashSet<android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair> features = calculateFeaturesToCreate(info); bindImsServiceWithFeatures(info, features); }",95e59cf8c7fabb95c56d35bc7fcce63fa495b0c7,2018-03-12 22:53:45,10
630846,src_java_com_android_internal_telephony_ims_ImsServiceFeatureQueryManager.java,,,"@java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { }",66a8de154c09376d6368be8da05833e2dccb51f2,"@java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.util.Log.i(com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.ImsServiceFeatureQuery.LOG_TAG, (""onServiceConnected for component: "" + name)); if (service != null) { queryImsFeatures(IImsServiceController.Stub.asInterface(service)); } else { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.ImsServiceFeatureQuery.LOG_TAG, ((""onServiceConnected: "" + name) + "" binder null, cleaning up."")); cleanup(); } }",6ad3aa79a3fd43620f3751dc16067569d47c7303,2018-03-12 22:53:45,10
630846,src_java_com_android_internal_telephony_ims_ImsResolver.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void addFeatureForAllSlots(int feature) { for (int i = 0; i < (mNumSlots); i++) { mSupportedFeatures.add(new android.util.Pair(i, feature)); } }",468fad5c4e722a1540af914f3d874fa451451541,"void addFeatureForAllSlots(int feature) { for (int i = 0; i < (mNumSlots); i++) { mSupportedFeatures.add(new android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair(i, feature)); } }",a18e847d541745963724d3c45bac001e78100072,2018-03-12 22:53:45,10
630846,src_java_com_android_internal_telephony_ims_ImsResolver.java,@java.lang.Override public int hashCode() { int result = ((name) != null) ? name.hashCode() : 0; result = (31 * result) + ((supportedFeatures) != null ? supportedFeatures.hashCode() : 0); result = (31 * result) + ((controllerFactory) != null ? controllerFactory.hashCode() : 0); return result; },f7dd6216172a63c86c7c0c9152c3696ebb37a6d7,@java.lang.Override public int hashCode() { int result = ((name) != null) ? name.hashCode() : 0; result = (31 * result) + (mSupportedFeatures.hashCode()); result = (31 * result) + ((controllerFactory) != null ? controllerFactory.hashCode() : 0); return result; },4f71327f0c180c6b7ed9a04c7ae4795bd31d44d4,@java.lang.Override public int hashCode() { int result = ((name) != null) ? name.hashCode() : 0; result = (31 * result) + (supportsEmergencyMmTel ? 1 : 0); result = (31 * result) + ((controllerFactory) != null ? controllerFactory.hashCode() : 0); return result; },23b7b14aff6bbf6c1365e5bd15deb755672dd0d0,2018-03-12 22:53:45,10
630846,src_java_com_android_internal_telephony_ims_ImsResolver.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder res = new java.lang.StringBuilder(); res.append(""[ImsServiceInfo] name=""); res.append(name); res.append("", supportedFeatures=[ ""); for (android.util.Pair<java.lang.Integer, java.lang.Integer> feature : mSupportedFeatures) { res.append(""(""); res.append(feature.first); res.append("",""); res.append(feature.second); res.append("") ""); } res.append(""], supportsEmergency=""); res.append(supportsEmergencyMmTel); return res.toString(); }",9dd09d444f6d1be995eccaa68db59abf2f29b283,"@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder res = new java.lang.StringBuilder(); res.append(""[ImsServiceInfo] name=""); res.append(name); res.append("", supportedFeatures=[ ""); for (android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair feature : mSupportedFeatures) { res.append(""(""); res.append(feature.slotId); res.append("",""); res.append(feature.featureType); res.append("") ""); } res.append(""], supportsEmergency=""); res.append(supportsEmergencyMmTel); return res.toString(); }",59ce12f161cc3f59732e23aef70d3ada143e547d,2018-03-12 22:53:45,10
630846,src_java_com_android_internal_telephony_ims_ImsResolver.java,"private void updateBoundCarrierServices(int subId) { int slotId = mSubscriptionManagerProxy.getSlotIndex(subId); java.lang.String newPackageName = mCarrierConfigManager.getConfigForSubId(subId).getString(CarrierConfigManager.KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING, null); if ((slotId != (android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX)) && (slotId < (mNumSlots))) { java.lang.String oldPackageName = mCarrierServices[slotId]; mCarrierServices[slotId] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""Carrier Config updated, binding new ImsService""); unbindImsService(getImsServiceInfoFromCache(oldPackageName)); bindNewImsService(getImsServiceInfoFromCache(newPackageName)); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } } }",8d93d6f2a142f6746c99f853ffdfe53d2e4a3736,"private void updateBoundCarrierServices(int subId) { int slotId = mSubscriptionManagerProxy.getSlotIndex(subId); java.lang.String newPackageName = mCarrierConfigManager.getConfigForSubId(subId).getString(CarrierConfigManager.KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING, null); if ((slotId != (android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX)) && (slotId < (mNumSlots))) { java.lang.String oldPackageName = mCarrierServices[slotId]; mCarrierServices[slotId] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""Carrier Config updated, binding new ImsService""); unbindImsService(getImsServiceInfoFromCache(oldPackageName)); com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo newInfo = getImsServiceInfoFromCache(newPackageName); if (newInfo.featureFromMetadata) { bindNewImsService(newInfo); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } else { } } } }",2889ec7f9406ecc9d1f19618e08ae1575bc40196,"private void updateBoundCarrierServices(int slotId) { int subId = mSubscriptionManagerProxy.getSubId(slotId); java.lang.String newPackageName = mCarrierConfigManager.getConfigForSubId(subId).getString(CarrierConfigManager.KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING, null); if ((slotId > (android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX)) && (slotId < (mNumSlots))) { java.lang.String oldPackageName = mCarrierServices[slotId]; mCarrierServices[slotId] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""Carrier Config updated, binding new ImsService""); unbindImsService(getImsServiceInfoFromCache(oldPackageName)); com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo newInfo = getImsServiceInfoFromCache(newPackageName); if ((newInfo == null) || (newInfo.featureFromMetadata)) { bindImsService(newInfo); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } else { scheduleQueryForFeatures(newInfo); } } } }",eab778dbef9cab2693bf09ee8e4a07415d0450b2,2018-03-12 22:53:45,10
630846,src_java_com_android_internal_telephony_ims_ImsResolver.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void replaceFeatures(java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> mNewFeatures) { mSupportedFeatures.clear(); mSupportedFeatures.addAll(mNewFeatures); }",50672540c52670ee742ccfe64fa82f0ba171eaf8,"void replaceFeatures(java.util.Set<android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair> newFeatures) { java.util.List<android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair> emergencyFeatures = newFeatures.stream().filter(( f) -> f.featureType == ImsFeature.FEATURE_EMERGENCY_MMTEL).collect(java.util.stream.Collectors.toList()); if (!(emergencyFeatures.isEmpty())) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""replaceFeatures: emergency calls enabled.""); supportsEmergencyMmTel = true; newFeatures.removeAll(emergencyFeatures); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""replaceFeatures: emergency calls disabled.""); supportsEmergencyMmTel = false; } mSupportedFeatures.clear(); mSupportedFeatures.addAll(newFeatures); }",401006e510661743c35cb96674270749be352044,2018-03-12 22:53:45,10
630846,src_java_com_android_internal_telephony_ims_ImsResolver.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> getSupportedFeatures() { return mSupportedFeatures; }",c218b1731598d91cbac4bbc62d31a819c07ee638,@com.android.internal.annotations.VisibleForTesting public java.util.HashSet<android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair> getSupportedFeatures() { return mSupportedFeatures; },10dd7ca614f28244012e778bed255851715506cd,2018-03-12 22:53:45,10
630846,src_java_com_android_internal_telephony_ims_ImsResolver.java,"private java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> calculateFeaturesToCreate(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info) { java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> imsFeaturesBySlot = new java.util.HashSet<>(); int slotId = getSlotForActiveCarrierService(info); if (slotId != (android.telephony.SubscriptionManager.INVALID_SUBSCRIPTION_ID)) { imsFeaturesBySlot.addAll(info.supportedFeatures.stream().map(( feature) -> new android.util.Pair(slotId, feature)).collect(java.util.stream.Collectors.toList())); } else if (isDeviceService(info)) { for (int i = 0; i < (mNumSlots); i++) { final int currSlotId = i; com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo carrierImsInfo = getImsServiceInfoFromCache(mCarrierServices[i]); if (carrierImsInfo == null) { imsFeaturesBySlot.addAll(info.supportedFeatures.stream().map(( feature) -> new android.util.Pair(currSlotId, feature)).collect(java.util.stream.Collectors.toList())); } else { java.util.Set<java.lang.Integer> deviceFeatures = new java.util.HashSet<>(info.supportedFeatures); deviceFeatures.removeAll(carrierImsInfo.supportedFeatures); imsFeaturesBySlot.addAll(deviceFeatures.stream().map(( feature) -> new android.util.Pair(currSlotId, feature)).collect(java.util.stream.Collectors.toList())); } } } return imsFeaturesBySlot; }",532dfa6f0383be9ff58b1d7fde1ae1c7bc601f7a,"private java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> calculateFeaturesToCreate(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info) { java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> imsFeaturesBySlot = new java.util.HashSet<>(); int slotId = getSlotForActiveCarrierService(info); if (slotId != (android.telephony.SubscriptionManager.INVALID_SUBSCRIPTION_ID)) { imsFeaturesBySlot.addAll(info.getSupportedFeatures().stream().filter(( feature) -> slotId == feature.first).collect(java.util.stream.Collectors.toList())); } else if (isDeviceService(info)) { for (int i = 0; i < (mNumSlots); i++) { final int currSlotId = i; com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo carrierImsInfo = getImsServiceInfoFromCache(mCarrierServices[i]); if (carrierImsInfo == null) { imsFeaturesBySlot.addAll(info.getSupportedFeatures().stream().filter(( feature) -> currSlotId == feature.first).collect(java.util.stream.Collectors.toList())); } else { java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> deviceFeatures = new java.util.HashSet(info.getSupportedFeatures()); deviceFeatures.removeAll(carrierImsInfo.getSupportedFeatures()); imsFeaturesBySlot.addAll(deviceFeatures.stream().filter(( feature) -> currSlotId == feature.first).collect(java.util.stream.Collectors.toList())); } } } return imsFeaturesBySlot; }",ce1f983d090e5b1e52f707372ab82105cd28d835,private java.util.HashSet<android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair> calculateFeaturesToCreate(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info) { java.util.HashSet<android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair> imsFeaturesBySlot = new java.util.HashSet<>(); int slotId = getSlotForActiveCarrierService(info); if (slotId != (android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX)) { imsFeaturesBySlot.addAll(info.getSupportedFeatures().stream().filter(( feature) -> slotId == feature.slotId).collect(java.util.stream.Collectors.toList())); } else if (isDeviceService(info)) { for (int i = 0; i < (mNumSlots); i++) { final int currSlotId = i; com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo carrierImsInfo = getImsServiceInfoFromCache(mCarrierServices[i]); if (carrierImsInfo == null) { imsFeaturesBySlot.addAll(info.getSupportedFeatures().stream().filter(( feature) -> currSlotId == feature.slotId).collect(java.util.stream.Collectors.toList())); } else { java.util.HashSet<android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair> deviceFeatures = new java.util.HashSet(info.getSupportedFeatures()); deviceFeatures.removeAll(carrierImsInfo.getSupportedFeatures()); imsFeaturesBySlot.addAll(deviceFeatures.stream().filter(( feature) -> currSlotId == feature.slotId).collect(java.util.stream.Collectors.toList())); } } } return imsFeaturesBySlot; },8a4f1a6d72076bc5ece2f94b7d07490f5f720e41,2018-03-12 22:53:45,10
630846,src_java_com_android_internal_telephony_ims_ImsServiceFeatureQueryManager.java,,,"public boolean start() { android.content.Intent imsServiceIntent = new android.content.Intent(mIntentFilter).setComponent(mName); int serviceFlags = (android.content.Context.BIND_FOREGROUND_SERVICE) | (android.content.Context.BIND_IMPORTANT); boolean bindStarted = mContext.bindService(imsServiceIntent, this, serviceFlags); if (!bindStarted) { mContext.unbindService(this); } return bindStarted; }",bc42d703c16d45965f1e0230e74549328f802fce,"public boolean start() { android.util.Log.d(com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.ImsServiceFeatureQuery.LOG_TAG, (((""start: intent filter="" + (mIntentFilter)) + "", name="") + (mName))); android.content.Intent imsServiceIntent = new android.content.Intent(mIntentFilter).setComponent(mName); int serviceFlags = ((android.content.Context.BIND_AUTO_CREATE) | (android.content.Context.BIND_FOREGROUND_SERVICE)) | (android.content.Context.BIND_IMPORTANT); boolean bindStarted = mContext.bindService(imsServiceIntent, this, serviceFlags); if (!bindStarted) { cleanup(); } return bindStarted; }",1430e06c5f3a8d60c09cb583386d07269cc8664d,2018-03-12 22:53:45,10
630846,src_java_com_android_internal_telephony_ims_ImsServiceFeatureQueryManager.java,,,"void onImsServiceQueryResult(java.lang.String name, java.util.Set<android.util.Pair<java.lang.Integer, java.lang.Integer>> features);",f387424481cfdd4f0c94d317d398b71e5a64be67,"void onComplete(android.content.ComponentName name, java.util.Set<android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair> features);",78de7c0dc080296f98d683603682fba5f6b0ed2a,2018-03-12 22:53:45,10
630846,tests_telephonytests_src_com_android_internal_telephony_ims_ImsResolverTest.java,"private boolean isImsServiceInfoEqual(android.content.ComponentName name, java.util.Set<java.lang.String> features, com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo sInfo) { if (!(java.util.Objects.equals(sInfo.name, name))) { return false; } for (java.lang.String f : features) { switch (f) { case ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE : if (!(sInfo.supportedFeatures.contains(ImsFeature.FEATURE_EMERGENCY_MMTEL))) { return false; } break; case ImsResolver.METADATA_MMTEL_FEATURE : if (!(sInfo.supportedFeatures.contains(ImsFeature.FEATURE_MMTEL))) { return false; } break; case ImsResolver.METADATA_RCS_FEATURE : if (!(sInfo.supportedFeatures.contains(ImsFeature.FEATURE_RCS))) { return false; } break; } } return true; }",489564015ef4ba71bf7b23b30d94ad16a99fd66b,"private boolean isImsServiceInfoEqual(android.content.ComponentName name, java.util.Set<java.lang.String> features, com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo sInfo) { if (!(java.util.Objects.equals(sInfo.name, name))) { return false; } for (java.lang.String f : features) { switch (f) { case ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE : if (!(sInfo.supportsEmergencyMmTel)) { return false; } break; case ImsResolver.METADATA_MMTEL_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)))) { return false; } break; case ImsResolver.METADATA_RCS_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_RCS)))) { return false; } break; } } return true; }",fa1a76a89337b013fb6c14f15c33f0a85eb24764,"private boolean isImsServiceInfoEqual(android.content.ComponentName name, java.util.Set<java.lang.String> features, com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo sInfo) { if (!(java.util.Objects.equals(sInfo.name, name))) { return false; } for (java.lang.String f : features) { switch (f) { case ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE : if (!(sInfo.supportsEmergencyMmTel)) { return false; } break; case ImsResolver.METADATA_MMTEL_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)))) { return false; } break; case ImsResolver.METADATA_RCS_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair(0, android.telephony.ims.feature.ImsFeature.FEATURE_RCS)))) { return false; } break; } } return true; }",f69844c93fd6c9aaee3c11ac4e64c5d79031ea83,2018-03-12 22:53:45,10
630846,tests_telephonytests_src_com_android_internal_telephony_ims_ImsResolverTest.java,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testAddPackageToCache() { setupResolver(1); java.util.List<android.content.pm.ResolveInfo> info = new java.util.ArrayList<>(); java.util.Set<java.lang.String> features = new java.util.HashSet<>(); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); info.add(getResolveInfo(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME, features, true)); when(mMockPM.queryIntentServicesAsUser(any(), anyInt(), anyInt())).thenReturn(info); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); mTestImsResolver.populateCacheAndStartBind(); waitForHandlerAction(mTestImsResolver.getHandler(), com.android.internal.telephony.ims.ImsResolverTest.TEST_TIMEOUT); com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo testCachedService = mTestImsResolver.getImsServiceInfoFromCache(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName()); junit.framework.Assert.assertNotNull(testCachedService); junit.framework.Assert.assertTrue(isImsServiceInfoEqual(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME, features, testCachedService)); }",61bdc92360d3c687fad475239e890d126753949e,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testAddPackageToCache() { setupResolver(1); java.util.List<android.content.pm.ResolveInfo> info = new java.util.ArrayList<>(); java.util.Set<java.lang.String> features = new java.util.HashSet<>(); features.add(ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); info.add(getResolveInfo(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME, features, true)); when(mMockPM.queryIntentServicesAsUser(any(), anyInt(), anyInt())).thenReturn(info); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); mTestImsResolver.populateCacheAndStartBind(); waitForHandlerAction(mTestImsResolver.getHandler(), com.android.internal.telephony.ims.ImsResolverTest.TEST_TIMEOUT); com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo testCachedService = mTestImsResolver.getImsServiceInfoFromCache(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName()); junit.framework.Assert.assertNotNull(testCachedService); junit.framework.Assert.assertTrue(isImsServiceInfoEqual(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME, features, testCachedService)); }",75245c600d5aa3f148df6776bc5deea85765f0df,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testAddDevicePackageToCache() { setupResolver(1); java.util.HashSet<java.lang.String> features = new java.util.HashSet<>(); features.add(ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); setupPackageQuery(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME, features, true); startBind(); com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo testCachedService = mTestImsResolver.getImsServiceInfoFromCache(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName()); junit.framework.Assert.assertNotNull(testCachedService); junit.framework.Assert.assertTrue(isImsServiceInfoEqual(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME, features, testCachedService)); }",7449f0deb73ed7765110176b39215cdf58889564,2018-03-12 22:53:45,10
630846,src_java_com_android_internal_telephony_ims_ImsServiceFeatureQueryManager.java,,,"public void startQuery(android.content.ComponentName name, java.lang.String intentFilter) { if (mActiveQueries.containsKey(name)) { return; } com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.ImsServiceFeatureQuery query = new com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.ImsServiceFeatureQuery(mContext, name, intentFilter); mActiveQueries.put(name, query); query.execute(); }",8727f61863207b5ac997a77bee673f5d1b5db772,"public boolean startQuery(android.content.ComponentName name, java.lang.String intentFilter) { synchronized(mLock) { if (mActiveQueries.containsKey(name)) { return true; } com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.ImsServiceFeatureQuery query = new com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.ImsServiceFeatureQuery(name, intentFilter); mActiveQueries.put(name, query); return query.start(); } }",7e6a58f260080642c424e731cc4ace1a81ecb43d,2018-03-12 22:53:45,10
630846,src_java_com_android_internal_telephony_ims_ImsServiceFeatureQueryManager.java,,,@java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { },c52ddef8c7e34a20816c77ef16b645fc6991d243,"@java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.ImsServiceFeatureQuery.LOG_TAG, (""onServiceDisconnected for component: "" + name)); }",4feb55ce44e2c4baf9be8892ca5abba6796a320a,2018-03-12 22:53:45,10
635880,src_java_com_android_internal_telephony_ServiceStateTracker.java,"private void cancelAllNotifications() { if (com.android.internal.telephony.ServiceStateTracker.DBG) log(""setNotification: cancelAllNotifications""); android.app.NotificationManager notificationManager = ((android.app.NotificationManager) (mPhone.getContext().getSystemService(Context.NOTIFICATION_SERVICE))); notificationManager.cancel(com.android.internal.telephony.ServiceStateTracker.PS_NOTIFICATION); notificationManager.cancel(com.android.internal.telephony.ServiceStateTracker.CS_NOTIFICATION); notificationManager.cancel(com.android.internal.telephony.ServiceStateTracker.CS_REJECT_CAUSE_NOTIFICATION); }",0a6ee279289aa61de3bd58a612457d7f0aab5de4,"private void cancelAllNotifications() { if (com.android.internal.telephony.ServiceStateTracker.DBG) log(""setNotification: cancelAllNotifications""); android.app.NotificationManager notificationManager = ((android.app.NotificationManager) (mPhone.getContext().getSystemService(Context.NOTIFICATION_SERVICE))); notificationManager.cancel(java.lang.Integer.toString(mSubId), com.android.internal.telephony.ServiceStateTracker.PS_NOTIFICATION); notificationManager.cancel(java.lang.Integer.toString(mSubId), com.android.internal.telephony.ServiceStateTracker.CS_NOTIFICATION); notificationManager.cancel(java.lang.Integer.toString(mSubId), com.android.internal.telephony.ServiceStateTracker.CS_REJECT_CAUSE_NOTIFICATION); }",5b6dcdd54d9df29ba2e82e582e352baff64c6e3a,"private void cancelAllNotifications() { if (com.android.internal.telephony.ServiceStateTracker.DBG) log((""cancelAllNotifications: mPrevSubId="" + (mPrevSubId))); android.app.NotificationManager notificationManager = ((android.app.NotificationManager) (mPhone.getContext().getSystemService(Context.NOTIFICATION_SERVICE))); if (android.telephony.SubscriptionManager.isValidSubscriptionId(mPrevSubId)) { notificationManager.cancel(java.lang.Integer.toString(mPrevSubId), com.android.internal.telephony.ServiceStateTracker.PS_NOTIFICATION); notificationManager.cancel(java.lang.Integer.toString(mPrevSubId), com.android.internal.telephony.ServiceStateTracker.CS_NOTIFICATION); notificationManager.cancel(java.lang.Integer.toString(mPrevSubId), com.android.internal.telephony.ServiceStateTracker.CS_REJECT_CAUSE_NOTIFICATION); } }",5ab03a4f2961e3cbe62b5adfaf71cebf21488a12,2018-03-12 23:55:41,5
636742,src_com_android_bluetooth_a2dp_A2dpStateMachine.java,"private void processCodecConfigEvent(android.bluetooth.BluetoothCodecStatus newCodecStatus) { android.bluetooth.BluetoothCodecConfig prevCodecConfig = null; synchronized(this) { if ((mCodecStatus) != null) { prevCodecConfig = mCodecStatus.getCodecConfig(); } mCodecStatus = newCodecStatus; } if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (((""A2DP Codec Config: "" + prevCodecConfig) + ""->"") + (newCodecStatus.getCodecConfig()))); for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsLocalCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""A2DP Codec Local Capability: "" + codecConfig)); } for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsSelectableCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""A2DP Codec Selectable Capability: "" + codecConfig)); } } boolean sameAudioFeedingParameters = newCodecStatus.getCodecConfig().sameAudioFeedingParameters(prevCodecConfig); mA2dpService.codecConfigUpdated(mDevice, mCodecStatus, sameAudioFeedingParameters); }",027d463400f724213e6e4d154b646299e2d61e04,"private void processCodecConfigEvent(android.bluetooth.BluetoothCodecStatus newCodecStatus) { android.bluetooth.BluetoothCodecConfig prevCodecConfig = null; synchronized(this) { if ((mCodecStatus) != null) { prevCodecConfig = mCodecStatus.getCodecConfig(); } mCodecStatus = newCodecStatus; } if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (((""A2DP Codec Config: "" + prevCodecConfig) + ""->"") + (newCodecStatus.getCodecConfig()))); for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsLocalCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""A2DP Codec Local Capability: "" + codecConfig)); } for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsSelectableCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""A2DP Codec Selectable Capability: "" + codecConfig)); } } if (mA2dpOffloadEnabled) { com.android.bluetooth.a2dp.bool update = false; android.bluetooth.BluetoothCodecConfig newCodecConfig = mCodecStatus.getCodecConfig(); if ((prevCodecConfig != null) && ((prevCodecConfig.getCodecType()) != (newCodecConfig.getCodecType()))) { update = true; } if (!(newCodecConfig.sameAudioFeedingParameters(prevCodecConfig))) { update = true; } if (((newCodecConfig.getCodecType()) == (android.bluetooth.BluetoothCodecConfig.SOURCE_CODEC_TYPE_LDAC)) && ((prevCodecConfig.getCodecSpecific1()) != (newCodecConfig.getCodecSpecific1()))) { update = true; } if (update) { mA2dpService.codecConfigUpdated(mDevice, mCodecStatus, false); } return; } boolean sameAudioFeedingParameters = newCodecStatus.getCodecConfig().sameAudioFeedingParameters(prevCodecConfig); mA2dpService.codecConfigUpdated(mDevice, mCodecStatus, sameAudioFeedingParameters); }",4d2f83a779daaa2be6f41df574a12c9f21378e95,"private void processCodecConfigEvent(android.bluetooth.BluetoothCodecStatus newCodecStatus) { android.bluetooth.BluetoothCodecConfig prevCodecConfig = null; synchronized(this) { if ((mCodecStatus) != null) { prevCodecConfig = mCodecStatus.getCodecConfig(); } mCodecStatus = newCodecStatus; } if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (((""A2DP Codec Config: "" + prevCodecConfig) + ""->"") + (newCodecStatus.getCodecConfig()))); for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsLocalCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""A2DP Codec Local Capability: "" + codecConfig)); } for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsSelectableCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (""A2DP Codec Selectable Capability: "" + codecConfig)); } } if (mA2dpOffloadEnabled) { boolean update = false; android.bluetooth.BluetoothCodecConfig newCodecConfig = mCodecStatus.getCodecConfig(); if ((prevCodecConfig != null) && ((prevCodecConfig.getCodecType()) != (newCodecConfig.getCodecType()))) { update = true; } if (!(newCodecConfig.sameAudioFeedingParameters(prevCodecConfig))) { update = true; } if (((newCodecConfig.getCodecType()) == (android.bluetooth.BluetoothCodecConfig.SOURCE_CODEC_TYPE_LDAC)) && ((prevCodecConfig.getCodecSpecific1()) != (newCodecConfig.getCodecSpecific1()))) { update = true; } if (update) { mA2dpService.codecConfigUpdated(mDevice, mCodecStatus, false); } return; } boolean sameAudioFeedingParameters = newCodecStatus.getCodecConfig().sameAudioFeedingParameters(prevCodecConfig); mA2dpService.codecConfigUpdated(mDevice, mCodecStatus, sameAudioFeedingParameters); }",f289adb96c2cdeb6d51aead4b64a64d390db7a61,2018-03-13 02:50:49,3
637156,src_java_com_android_internal_telephony_ims_ImsServiceController.java,"private void removeImsServiceFeature(android.util.Pair<java.lang.Integer, java.lang.Integer> featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ""removeImsServiceFeature called with null values.""); return; } com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback callbackToRemove = mFeatureStatusCallbacks.stream().filter(( c) -> ((c.mSlotId) == (featurePair.first)) && ((c.mFeatureType) == (featurePair.second))).findFirst().orElse(null); if (callbackToRemove != null) { mFeatureStatusCallbacks.remove(callbackToRemove); } removeImsFeature(featurePair.first, featurePair.second, (callbackToRemove != null ? callbackToRemove.getCallback() : null)); removeImsFeatureBinder(featurePair.first, featurePair.second); mCallbacks.imsServiceFeatureRemoved(featurePair.first, featurePair.second, this); sendImsFeatureRemovedCallback(featurePair.first, featurePair.second); }",522f152dd5bcae71f8f18d0ace092f8d456a52b6,"private void removeImsServiceFeature(android.util.Pair<java.lang.Integer, java.lang.Integer> featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ""removeImsServiceFeature called with null values.""); return; } if ((featurePair.second) != (android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback callbackToRemove = mFeatureStatusCallbacks.stream().filter(( c) -> ((c.mSlotId) == (featurePair.first)) && ((c.mFeatureType) == (featurePair.second))).findFirst().orElse(null); if (callbackToRemove != null) { mFeatureStatusCallbacks.remove(callbackToRemove); } removeImsFeature(featurePair.first, featurePair.second, (callbackToRemove != null ? callbackToRemove.getCallback() : null)); removeImsFeatureBinder(featurePair.first, featurePair.second); mCallbacks.imsServiceFeatureRemoved(featurePair.first, featurePair.second, this); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, (""doesn't support emergency calling on slot "" + (featurePair.first))); } sendImsFeatureRemovedCallback(featurePair.first, featurePair.second); }",e75e05ccbcb7828212dfb3a8fa925e54c20d3c36,"private void removeImsServiceFeature(android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ""removeImsServiceFeature called with null values.""); return; } if ((featurePair.featureType) != (android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback callbackToRemove = mFeatureStatusCallbacks.stream().filter(( c) -> ((c.mSlotId) == (featurePair.slotId)) && ((c.mFeatureType) == (featurePair.featureType))).findFirst().orElse(null); if (callbackToRemove != null) { mFeatureStatusCallbacks.remove(callbackToRemove); } removeImsFeature(featurePair.slotId, featurePair.featureType, (callbackToRemove != null ? callbackToRemove.getCallback() : null)); removeImsFeatureBinder(featurePair.slotId, featurePair.featureType); mCallbacks.imsServiceFeatureRemoved(featurePair.slotId, featurePair.featureType, this); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, (""doesn't support emergency calling on slot "" + (featurePair.slotId))); } sendImsFeatureRemovedCallback(featurePair.slotId, featurePair.featureType); }",158167d050b5b2d592c8e47345f691a17f6dfa75,2018-03-13 16:30:43,3
637156,src_java_com_android_internal_telephony_ims_ImsServiceController.java,public void addImsServiceFeatureListener(com.android.ims.internal.IImsServiceFeatureCallback callback) { synchronized(mLock) { mImsStatusCallbacks.add(callback); } },7975f0b3d3ff88f6ed2220bab2fa3b9d2ff612d2,"public void addImsServiceFeatureListener(com.android.ims.internal.IImsServiceFeatureCallback callback) { synchronized(mLock) { mImsStatusCallbacks.add(callback); try { for (android.util.Pair<java.lang.Integer, java.lang.Integer> i : mImsFeatures) { callback.imsFeatureCreated(i.first, i.second); } } catch (android.os.RemoteException e) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ""addImsServiceFeatureListener: exception notifying callback""); } } }",d7c030a1c8ba98a0c978f4ed5512bd5c69afe34e,"public void addImsServiceFeatureCallback(com.android.ims.internal.IImsServiceFeatureCallback callback) { synchronized(mLock) { mImsStatusCallbacks.add(callback); if (((mImsFeatures) == null) || (mImsFeatures.isEmpty())) { return; } try { for (android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair i : mImsFeatures) { callback.imsFeatureCreated(i.slotId, i.featureType); } } catch (android.os.RemoteException e) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ""addImsServiceFeatureCallback: exception notifying callback""); } } }",97e3e865c51ea7ed2fd750279171e8319aeaf98e,2018-03-13 16:30:43,3
637156,src_java_com_android_internal_telephony_ims_ImsServiceController.java,"private void notifyAllFeaturesRemoved() { if ((mCallbacks) == null) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ""notifyAllFeaturesRemoved called with invalid callbacks.""); return; } synchronized(mLock) { for (android.util.Pair<java.lang.Integer, java.lang.Integer> feature : mImsFeatures) { mCallbacks.imsServiceFeatureRemoved(feature.first, feature.second, this); sendImsFeatureRemovedCallback(feature.first, feature.second); } } }",e4f9aac056b64039e9844a0c89ee2af57de9cbb7,"private void notifyAllFeaturesRemoved() { if ((mCallbacks) == null) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ""notifyAllFeaturesRemoved called with invalid callbacks.""); return; } synchronized(mLock) { for (android.util.Pair<java.lang.Integer, java.lang.Integer> feature : mImsFeatures) { if ((feature.second) != (android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { mCallbacks.imsServiceFeatureRemoved(feature.first, feature.second, this); } sendImsFeatureRemovedCallback(feature.first, feature.second); } } }",10a8e581f5821f98688052eb88e9b48b260e4d38,"private void notifyAllFeaturesRemoved() { if ((mCallbacks) == null) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ""notifyAllFeaturesRemoved called with invalid callbacks.""); return; } synchronized(mLock) { for (android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair feature : mImsFeatures) { if ((feature.featureType) != (android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { mCallbacks.imsServiceFeatureRemoved(feature.slotId, feature.featureType, this); } sendImsFeatureRemovedCallback(feature.slotId, feature.featureType); } } }",24aec63ae76c62529c7efaf3f7d9b51a1c1889f9,2018-03-13 16:30:43,3
637156,tests_telephonytests_src_com_android_internal_telephony_ims_ImsResolverTest.java,"private boolean isImsServiceInfoEqual(android.content.ComponentName name, java.util.Set<java.lang.String> features, com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo sInfo) { if (!(java.util.Objects.equals(sInfo.name, name))) { return false; } for (java.lang.String f : features) { switch (f) { case ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE : if (!(sInfo.supportsEmergencyMmTel)) { return false; } break; case ImsResolver.METADATA_MMTEL_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)))) { return false; } break; case ImsResolver.METADATA_RCS_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_RCS)))) { return false; } break; } } return true; }",fa1a76a89337b013fb6c14f15c33f0a85eb24764,"private boolean isImsServiceInfoEqual(android.content.ComponentName name, java.util.Set<java.lang.String> features, com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo sInfo) { if (!(java.util.Objects.equals(sInfo.name, name))) { return false; } for (java.lang.String f : features) { switch (f) { case ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)))) { return false; } break; case ImsResolver.METADATA_MMTEL_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)))) { return false; } break; case ImsResolver.METADATA_RCS_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_RCS)))) { return false; } break; } } return true; }",f79998d12dd7adf852f5f8e63c602747ef5abf22,"private boolean isImsServiceInfoEqual(android.content.ComponentName name, java.util.Set<java.lang.String> features, com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo sInfo) { if (!(java.util.Objects.equals(sInfo.name, name))) { return false; } for (java.lang.String f : features) { switch (f) { case ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair(0, android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)))) { return false; } break; case ImsResolver.METADATA_MMTEL_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)))) { return false; } break; case ImsResolver.METADATA_RCS_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair(0, android.telephony.ims.feature.ImsFeature.FEATURE_RCS)))) { return false; } break; } } return true; }",149a59ce0366e4b4388d7a7c2df7ae8c9e4c35da,2018-03-13 16:30:43,3
637156,src_java_com_android_internal_telephony_ims_ImsServiceController.java,"private void addImsServiceFeature(android.util.Pair<java.lang.Integer, java.lang.Integer> featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ""addImsServiceFeature called with null values.""); return; } com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback c = new com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback(featurePair.first, featurePair.second); mFeatureStatusCallbacks.add(c); android.os.IInterface f = createImsFeature(featurePair.first, featurePair.second, c.getCallback()); addImsFeatureBinder(featurePair.first, featurePair.second, f); mCallbacks.imsServiceFeatureCreated(featurePair.first, featurePair.second, this); sendImsFeatureCreatedCallback(featurePair.first, featurePair.second); }",0e8226fd74aa5194587be479b571cca218f776e0,"private void addImsServiceFeature(android.util.Pair<java.lang.Integer, java.lang.Integer> featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ""addImsServiceFeature called with null values.""); return; } if ((featurePair.second) != (android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback c = new com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback(featurePair.first, featurePair.second); mFeatureStatusCallbacks.add(c); android.os.IInterface f = createImsFeature(featurePair.first, featurePair.second, c.getCallback()); addImsFeatureBinder(featurePair.first, featurePair.second, f); mCallbacks.imsServiceFeatureCreated(featurePair.first, featurePair.second, this); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, (""supports emergency calling on slot "" + (featurePair.first))); } sendImsFeatureCreatedCallback(featurePair.first, featurePair.second); }",2afdb7c9f6d64d61d55f21e6095a011a392a7de0,"private void addImsServiceFeature(android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ""addImsServiceFeature called with null values.""); return; } if ((featurePair.featureType) != (android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback c = new com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback(featurePair.slotId, featurePair.featureType); mFeatureStatusCallbacks.add(c); android.os.IInterface f = createImsFeature(featurePair.slotId, featurePair.featureType, c.getCallback()); addImsFeatureBinder(featurePair.slotId, featurePair.featureType, f); mCallbacks.imsServiceFeatureCreated(featurePair.slotId, featurePair.featureType, this); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, (""supports emergency calling on slot "" + (featurePair.slotId))); } sendImsFeatureCreatedCallback(featurePair.slotId, featurePair.featureType); }",d9044f0b31b4c0bea0cb48bbf27e355313db1b6b,2018-03-13 16:30:43,3
637156,tests_telephonytests_src_com_android_internal_telephony_ims_ImsResolverTest.java,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCarrierPackageChangeEmergencyCalling() throws android.os.RemoteException { setupResolver(1); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features = new java.util.HashSet<>(); features.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)); setupPackageQuery(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, new java.util.HashSet(), true); com.android.internal.telephony.ims.ImsServiceController controller = setupController(); startBind(); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, 1); verify(controller).bind(features); verify(controller, never()).unbind(); junit.framework.Assert.assertEquals(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, controller.getComponentName()); verify(controller, never()).setCanPlaceEmergencyCalls(eq(true)); packageChanged(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> newFeatures = new java.util.HashSet<>(); newFeatures.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)); newFeatures.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, newFeatures, 2); verify(controller, atLeastOnce()).changeImsServiceFeatures(newFeatures); verify(controller).setCanPlaceEmergencyCalls(eq(true)); }",1380d85e540134938de43bbf5e8537c49a381195,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCarrierPackageChangeEmergencyCalling() throws android.os.RemoteException { setupResolver(1); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features = new java.util.HashSet<>(); features.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)); setupPackageQuery(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, new java.util.HashSet(), true); com.android.internal.telephony.ims.ImsServiceController controller = setupController(); startBind(); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, 1); verify(controller).bind(features); verify(controller, never()).unbind(); junit.framework.Assert.assertEquals(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, controller.getComponentName()); packageChanged(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> newFeatures = new java.util.HashSet<>(); newFeatures.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)); newFeatures.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, newFeatures, 2); verify(controller, atLeastOnce()).changeImsServiceFeatures(newFeatures); }",9b641d635f909cb65c5d476a302e89dfecf59e00,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCarrierPackageChangeEmergencyCalling() throws android.os.RemoteException { setupResolver(1); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair> features = new java.util.HashSet<>(); features.add(new android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)); setupPackageQuery(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, new java.util.HashSet(), true); com.android.internal.telephony.ims.ImsServiceController controller = setupController(); startBind(); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, 1); verify(controller).bind(features); verify(controller, never()).unbind(); junit.framework.Assert.assertEquals(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, controller.getComponentName()); packageChanged(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair> newFeatures = new java.util.HashSet<>(); newFeatures.add(new android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)); newFeatures.add(new android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair(0, android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, newFeatures, 2); verify(controller, atLeastOnce()).changeImsServiceFeatures(newFeatures); }",c4a80f5e985cf3b3258436374da45279869fadca,2018-03-13 16:30:43,3
637156,src_java_com_android_internal_telephony_ims_ImsResolver.java,"private void updateImsServiceFeatures(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo newInfo) { if (newInfo == null) { return; } com.android.internal.telephony.ims.ImsServiceController controller = getControllerByServiceInfo(mActiveControllers, newInfo); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features = calculateFeaturesToCreate(newInfo); if ((features.size()) > 0) { try { if (controller != null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (""Updating features for ImsService: "" + (controller.getComponentName()))); android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, (""Updating canPlaceEmergencyCalls: "" + (newInfo.supportsEmergencyMmTel))); controller.setCanPlaceEmergencyCalls(newInfo.supportsEmergencyMmTel); android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, (""Updating Features - New Features: "" + features)); controller.changeImsServiceFeatures(features); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""updateImsServiceFeatures: unbound with active features, rebinding""); bindImsServiceWithFeatures(newInfo, features); } if ((isActiveCarrierService(newInfo)) && (!(android.text.TextUtils.equals(newInfo.name.getPackageName(), mDeviceService)))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""Updating device default""); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } } catch (android.os.RemoteException e) { android.util.Log.e(com.android.internal.telephony.ims.ImsResolver.TAG, (""updateImsServiceFeatures: Remote Exception: "" + (e.getMessage()))); } } else if (controller != null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (""Unbinding: features = 0 for ImsService: "" + (controller.getComponentName()))); unbindImsService(newInfo); } }",0fcc990f6c1c18bce5b4dcdcd9906964809ce753,"private void updateImsServiceFeatures(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo newInfo) { if (newInfo == null) { return; } com.android.internal.telephony.ims.ImsServiceController controller = getControllerByServiceInfo(mActiveControllers, newInfo); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features = calculateFeaturesToCreate(newInfo); if (shouldFeaturesCauseBind(features)) { try { if (controller != null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (""Updating features for ImsService: "" + (controller.getComponentName()))); android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, (""Updating Features - New Features: "" + features)); controller.changeImsServiceFeatures(features); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""updateImsServiceFeatures: unbound with active features, rebinding""); bindImsServiceWithFeatures(newInfo, features); } if ((isActiveCarrierService(newInfo)) && (!(android.text.TextUtils.equals(newInfo.name.getPackageName(), mDeviceService)))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""Updating device default""); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } } catch (android.os.RemoteException e) { android.util.Log.e(com.android.internal.telephony.ims.ImsResolver.TAG, (""updateImsServiceFeatures: Remote Exception: "" + (e.getMessage()))); } } else if (controller != null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (""Unbinding: features = 0 for ImsService: "" + (controller.getComponentName()))); unbindImsService(newInfo); } }",d7d92f482ef683319516094b0bfecfdb8f808d9e,"private void updateImsServiceFeatures(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo newInfo) { if (newInfo == null) { return; } com.android.internal.telephony.ims.ImsServiceController controller = getControllerByServiceInfo(mActiveControllers, newInfo); java.util.HashSet<android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair> features = calculateFeaturesToCreate(newInfo); if (shouldFeaturesCauseBind(features)) { try { if (controller != null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (""Updating features for ImsService: "" + (controller.getComponentName()))); android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, (""Updating Features - New Features: "" + features)); controller.changeImsServiceFeatures(features); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""updateImsServiceFeatures: unbound with active features, rebinding""); bindImsServiceWithFeatures(newInfo, features); } if ((isActiveCarrierService(newInfo)) && (!(android.text.TextUtils.equals(newInfo.name.getPackageName(), mDeviceService)))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""Updating device default""); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } } catch (android.os.RemoteException e) { android.util.Log.e(com.android.internal.telephony.ims.ImsResolver.TAG, (""updateImsServiceFeatures: Remote Exception: "" + (e.getMessage()))); } } else if (controller != null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (""Unbinding: features = 0 for ImsService: "" + (controller.getComponentName()))); unbindImsService(newInfo); } }",7440c5b0a499be99921abb8eadc2cd90033120df,2018-03-13 16:30:43,3
637156,src_java_com_android_internal_telephony_ims_ImsResolver.java,"public boolean isEmergencyMmTelAvailable(int slotId) { com.android.internal.telephony.ims.ImsServiceController controller = getImsServiceController(slotId, ImsFeature.FEATURE_MMTEL); if (controller != null) { return controller.canPlaceEmergencyCalls(); } android.util.Log.w(com.android.internal.telephony.ims.ImsResolver.TAG, (""isEmergencyMmTelAvailable: No controller found for slot "" + slotId)); return false; }",7acfc6d33af268d4b81fbf380e0a272ed57fd7c4,"private boolean shouldFeaturesCauseBind(java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features) { long bindableFeatures = features.stream().filter(( f) -> f.second != ImsFeature.FEATURE_EMERGENCY_MMTEL).count(); return bindableFeatures > 0; }",9e47087edfa258d183d7deb1553323db34473b21,private boolean shouldFeaturesCauseBind(java.util.HashSet<android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair> features) { long bindableFeatures = features.stream().filter(( f) -> f.featureType != ImsFeature.FEATURE_EMERGENCY_MMTEL).count(); return bindableFeatures > 0; },f0b1b560f57a578da775025cb7b88565ee238678,2018-03-13 16:30:43,3
637156,tests_telephonytests_src_com_android_internal_telephony_ims_ImsResolverTest.java,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCarrierPackageBindWithEmergencyCalling() throws android.os.RemoteException { setupResolver(1); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features = new java.util.HashSet<>(); features.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)); features.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)); features.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_RCS)); setupPackageQuery(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, new java.util.HashSet(), true); com.android.internal.telephony.ims.ImsServiceController controller = setupController(); startBind(); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, 1); verify(controller).bind(features); verify(controller, never()).unbind(); junit.framework.Assert.assertEquals(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, controller.getComponentName()); verify(controller).setCanPlaceEmergencyCalls(eq(true)); }",edbebc91863f12d6cfd0b1220e1438b06befa143,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCarrierPackageBindWithEmergencyCalling() throws android.os.RemoteException { setupResolver(1); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features = new java.util.HashSet<>(); features.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)); features.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_RCS)); setupPackageQuery(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, new java.util.HashSet(), true); com.android.internal.telephony.ims.ImsServiceController controller = setupController(); startBind(); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, 1); verify(controller).bind(features); verify(controller, never()).unbind(); junit.framework.Assert.assertEquals(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, controller.getComponentName()); }",766ad1ab676b534704021f995cfcd7cd93890b99,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCarrierPackageBindWithEmergencyCalling() throws android.os.RemoteException { setupResolver(1); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair> features = new java.util.HashSet<>(); features.add(new android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)); features.add(new android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair(0, android.telephony.ims.feature.ImsFeature.FEATURE_RCS)); setupPackageQuery(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, new java.util.HashSet(), true); com.android.internal.telephony.ims.ImsServiceController controller = setupController(); startBind(); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, 1); verify(controller).bind(features); verify(controller, never()).unbind(); junit.framework.Assert.assertEquals(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, controller.getComponentName()); }",5595f53b8ac712cf89456b870c534cb6edd6b4a3,2018-03-13 16:30:43,3
637156,src_java_com_android_internal_telephony_ims_ImsResolver.java,"private void bindImsServiceWithFeatures(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info, java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features) { if ((features.size()) > 0) { com.android.internal.telephony.ims.ImsServiceController controller = getControllerByServiceInfo(mActiveControllers, info); if (controller != null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (((""ImsService connection exists, updating features "" + features) + "", updating supports emergency calling: "") + (info.supportsEmergencyMmTel))); try { controller.changeImsServiceFeatures(features); } catch (android.os.RemoteException e) { android.util.Log.w(com.android.internal.telephony.ims.ImsResolver.TAG, (""bindImsService: error="" + (e.getMessage()))); } } else { controller = info.controllerFactory.create(mContext, info.name, this); android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (((((""Binding ImsService: "" + (controller.getComponentName())) + "" with features: "") + features) + "", supports emergency calling: "") + (info.supportsEmergencyMmTel))); controller.bind(features); } controller.setCanPlaceEmergencyCalls(info.supportsEmergencyMmTel); mActiveControllers.put(info.name, controller); } }",c94c68a2a507b37514c84e9f81f13011bd44d936,"private void bindImsServiceWithFeatures(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info, java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features) { if (shouldFeaturesCauseBind(features)) { com.android.internal.telephony.ims.ImsServiceController controller = getControllerByServiceInfo(mActiveControllers, info); if (controller != null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (""ImsService connection exists, updating features "" + features)); try { controller.changeImsServiceFeatures(features); } catch (android.os.RemoteException e) { android.util.Log.w(com.android.internal.telephony.ims.ImsResolver.TAG, (""bindImsService: error="" + (e.getMessage()))); } } else { controller = info.controllerFactory.create(mContext, info.name, this); android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (((""Binding ImsService: "" + (controller.getComponentName())) + "" with features: "") + features)); controller.bind(features); } mActiveControllers.put(info.name, controller); } }",540525557f48ba78f09591180be728e4ab2414fc,"private void bindImsServiceWithFeatures(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info, java.util.HashSet<android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair> features) { if (shouldFeaturesCauseBind(features)) { com.android.internal.telephony.ims.ImsServiceController controller = getControllerByServiceInfo(mActiveControllers, info); if (controller != null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (""ImsService connection exists, updating features "" + features)); try { controller.changeImsServiceFeatures(features); } catch (android.os.RemoteException e) { android.util.Log.w(com.android.internal.telephony.ims.ImsResolver.TAG, (""bindImsService: error="" + (e.getMessage()))); } } else { controller = info.controllerFactory.create(mContext, info.name, this); android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (((""Binding ImsService: "" + (controller.getComponentName())) + "" with features: "") + features)); controller.bind(features); } mActiveControllers.put(info.name, controller); } }",95f27a46aa5dd6ed579441f57038146edce3f995,2018-03-13 16:30:43,3
637156,src_java_com_android_internal_telephony_ims_ImsResolver.java,"void replaceFeatures(java.util.Set<android.util.Pair<java.lang.Integer, java.lang.Integer>> mNewFeatures) { java.util.List<android.util.Pair<java.lang.Integer, java.lang.Integer>> emergencyFeatures = mNewFeatures.stream().filter(( f) -> f.second == ImsFeature.FEATURE_EMERGENCY_MMTEL).collect(java.util.stream.Collectors.toList()); if (!(emergencyFeatures.isEmpty())) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""replaceFeatures: emergency calls enabled.""); supportsEmergencyMmTel = true; mNewFeatures.removeAll(emergencyFeatures); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""replaceFeatures: emergency calls disabled.""); supportsEmergencyMmTel = false; } mSupportedFeatures.clear(); mSupportedFeatures.addAll(mNewFeatures); }",c177f68900b5cc4812e3ebf9e4dbe61711a450ca,"void replaceFeatures(java.util.Set<android.util.Pair<java.lang.Integer, java.lang.Integer>> mNewFeatures) { mSupportedFeatures.clear(); mSupportedFeatures.addAll(mNewFeatures); }",995071dba17dcc1946efb39488c07433e28671da,void replaceFeatures(java.util.Set<android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair> newFeatures) { mSupportedFeatures.clear(); mSupportedFeatures.addAll(newFeatures); },63a1684cd6cff177dafeeaabe0590e42cd154100,2018-03-13 16:30:43,3
637156,src_java_com_android_internal_telephony_ims_ImsResolver.java,"@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder res = new java.lang.StringBuilder(); res.append(""[ImsServiceInfo] name=""); res.append(name); res.append("", supportedFeatures=[ ""); for (android.util.Pair<java.lang.Integer, java.lang.Integer> feature : mSupportedFeatures) { res.append(""(""); res.append(feature.first); res.append("",""); res.append(feature.second); res.append("") ""); } res.append(""], supportsEmergency=""); res.append(supportsEmergencyMmTel); return res.toString(); }",9dd09d444f6d1be995eccaa68db59abf2f29b283,"@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder res = new java.lang.StringBuilder(); res.append(""[ImsServiceInfo] name=""); res.append(name); res.append("", supportedFeatures=[ ""); for (android.util.Pair<java.lang.Integer, java.lang.Integer> feature : mSupportedFeatures) { res.append(""(""); res.append(feature.first); res.append("",""); res.append(feature.second); res.append("") ""); } return res.toString(); }",551c9327b1e9e3a2b036f32badde7e1e1ef12ce5,"@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder res = new java.lang.StringBuilder(); res.append(""[ImsServiceInfo] name=""); res.append(name); res.append("", supportedFeatures=[ ""); for (android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair feature : mSupportedFeatures) { res.append(""(""); res.append(feature.slotId); res.append("",""); res.append(feature.featureType); res.append("") ""); } return res.toString(); }",9e6c0bc38a0a3b099a749245e844acc19553ed5d,2018-03-13 16:30:43,3
629126,src_com_android_se_security_arf_PKCS15_PKCS15Handler.java,"private boolean selectACRulesContainer(byte[] aid) throws com.android.se.security.arf.SecureElementException, com.android.se.security.arf.pkcs15.PKCS15Exception { if (aid == null) { mArfChannel = mSEHandle.openLogicalArfChannel(new byte[]{ }); if ((mArfChannel) != null) { android.util.Log.i(mTag, ""Logical channels are used to access to PKC15""); } else { return false; } if ((mPkcs15Path) == null) { mACMainPath = null; com.android.se.security.arf.pkcs15.EFDIR DIRObject = new com.android.se.security.arf.pkcs15.EFDIR(mSEHandle); mPkcs15Path = DIRObject.lookupAID(com.android.se.security.arf.pkcs15.PKCS15Handler.PKCS15_AID); if ((mPkcs15Path) == null) { android.util.Log.i(mTag, ""Cannot use ARF: cannot select PKCS#15 directory via EF Dir""); throw new com.android.se.security.arf.pkcs15.PKCS15Exception(""Cannot select PKCS#15 directory via EF Dir""); } } } else { mArfChannel = mSEHandle.openLogicalArfChannel(aid); if ((mArfChannel) == null) { android.util.Log.w(mTag, ""GPAC/PKCS#15 ADF not found!!""); return false; } if ((mPkcs15Path) != null) { mACMainPath = null; } mPkcs15Path = null; } return true; }",4229c63a2c4033ffdda5ec03b09dd4d494aa42bc,"private boolean selectACRulesContainer(byte[] aid) throws com.android.se.security.arf.SecureElementException, com.android.se.security.arf.pkcs15.PKCS15Exception, java.util.NoSuchElementException { if (aid == null) { mArfChannel = mSEHandle.openLogicalArfChannel(new byte[]{ }); if ((mArfChannel) != null) { android.util.Log.i(mTag, ""Logical channels are used to access to PKC15""); } else { return false; } if ((mPkcs15Path) == null) { mACMainPath = null; com.android.se.security.arf.pkcs15.EFDIR DIRObject = new com.android.se.security.arf.pkcs15.EFDIR(mSEHandle); mPkcs15Path = DIRObject.lookupAID(com.android.se.security.arf.pkcs15.PKCS15Handler.PKCS15_AID); if ((mPkcs15Path) == null) { android.util.Log.i(mTag, ""Cannot use ARF: cannot select PKCS#15 directory via EF Dir""); throw new java.util.NoSuchElementException(""Cannot select PKCS#15 directory via EF Dir""); } } } else { mArfChannel = mSEHandle.openLogicalArfChannel(aid); if ((mArfChannel) == null) { android.util.Log.w(mTag, ""GPAC/PKCS#15 ADF not found!!""); return false; } if ((mPkcs15Path) != null) { mACMainPath = null; } mPkcs15Path = null; } return true; }",c631d8d5c979f4dea333af3951933df2773cbceb,"private boolean selectACRulesContainer(byte[] aid) throws com.android.se.security.arf.SecureElementException, com.android.se.security.arf.pkcs15.PKCS15Exception, java.io.IOException, java.util.MissingResourceException, java.util.NoSuchElementException { if (aid == null) { mArfChannel = mSEHandle.openLogicalArfChannel(new byte[]{ }); if ((mArfChannel) != null) { android.util.Log.i(mTag, ""Logical channels are used to access to PKC15""); } else { return false; } if ((mPkcs15Path) == null) { mACMainPath = null; com.android.se.security.arf.pkcs15.EFDIR DIRObject = new com.android.se.security.arf.pkcs15.EFDIR(mSEHandle); mPkcs15Path = DIRObject.lookupAID(com.android.se.security.arf.pkcs15.PKCS15Handler.PKCS15_AID); if ((mPkcs15Path) == null) { android.util.Log.i(mTag, ""Cannot use ARF: cannot select PKCS#15 directory via EF Dir""); throw new java.util.NoSuchElementException(""Cannot select PKCS#15 directory via EF Dir""); } } } else { mArfChannel = mSEHandle.openLogicalArfChannel(aid); if ((mArfChannel) == null) { android.util.Log.w(mTag, ""GPAC/PKCS#15 ADF not found!!""); return false; } if ((mPkcs15Path) != null) { mACMainPath = null; } mPkcs15Path = null; } return true; }",40cc431caceae601b6463f8740baad5f2e6a5c9f,2018-03-13 17:57:49,6
629126,src_com_android_se_Terminal.java,"public com.android.se.Channel openLogicalChannelWithoutChannelAccess(byte[] aid) throws android.os.RemoteException { return openLogicalChannel(null, aid, ((byte) (0)), null, null, 0); }",85fa1253eaf7cde7def467ddd36c902343e9d725,"public com.android.se.Channel openLogicalChannelWithoutChannelAccess(byte[] aid) throws android.os.RemoteException, java.util.NoSuchElementException { try { return openLogicalChannel(null, aid, ((byte) (0)), null, null, 0); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (android.se.omapi.SEService.NO_SUCH_ELEMENT_ERROR)) { throw new java.util.NoSuchElementException(e.getMessage()); } throw e; } }",173f0b77e4faab9e60065a638619c4e337f2800f,"public com.android.se.Channel openLogicalChannelWithoutChannelAccess(byte[] aid) throws java.io.IOException, java.util.NoSuchElementException { return openLogicalChannel(null, aid, ((byte) (0)), null, null, 0); }",b554ac4a8cb6180b9f62c424c410868e442a9f70,2018-03-13 17:57:49,6
629126,src_com_android_se_security_ara_AraController.java,"public synchronized void initialize() throws java.lang.Exception { com.android.se.Channel channel = mTerminal.openLogicalChannelWithoutChannelAccess(com.android.se.security.ara.AraController.getAraMAid()); if (channel == null) { throw new java.security.AccessControlException(""could not open channel""); } com.android.se.security.ChannelAccess araChannelAccess = new com.android.se.security.ChannelAccess(); araChannelAccess.setAccess(ChannelAccess.ACCESS.ALLOWED, mTag); araChannelAccess.setApduAccess(ChannelAccess.ACCESS.ALLOWED); channel.setChannelAccess(araChannelAccess); try { mApplet = new com.android.se.security.ara.AccessRuleApplet(channel); byte[] tag = mApplet.readRefreshTag(); if (mAccessRuleCache.isRefreshTagEqual(tag)) { android.util.Log.i(mTag, ""Refresh tag unchanged. Using access rules from cache.""); return; } android.util.Log.i(mTag, ""Refresh tag has changed.""); mAccessRuleCache.setRefreshTag(tag); mAccessRuleCache.clearCache(); android.util.Log.i(mTag, ""Read ARs from ARA""); readAllAccessRules(); } catch (java.lang.Exception e) { android.util.Log.i(mTag, (""ARA error: "" + (e.getLocalizedMessage()))); throw new java.security.AccessControlException(e.getLocalizedMessage()); } finally { if (channel != null) { channel.close(); } } }",e6f0d5c6cb2bb570b854b180fc91f18daaf66f34,"public synchronized void initialize() throws java.lang.Exception, java.util.NoSuchElementException { com.android.se.Channel channel = mTerminal.openLogicalChannelWithoutChannelAccess(com.android.se.security.ara.AraController.getAraMAid()); if (channel == null) { throw new java.security.AccessControlException(""could not open channel""); } com.android.se.security.ChannelAccess araChannelAccess = new com.android.se.security.ChannelAccess(); araChannelAccess.setAccess(ChannelAccess.ACCESS.ALLOWED, mTag); araChannelAccess.setApduAccess(ChannelAccess.ACCESS.ALLOWED); channel.setChannelAccess(araChannelAccess); try { mApplet = new com.android.se.security.ara.AccessRuleApplet(channel); byte[] tag = mApplet.readRefreshTag(); if (mAccessRuleCache.isRefreshTagEqual(tag)) { android.util.Log.i(mTag, ""Refresh tag unchanged. Using access rules from cache.""); return; } android.util.Log.i(mTag, ""Refresh tag has changed.""); mAccessRuleCache.setRefreshTag(tag); mAccessRuleCache.clearCache(); android.util.Log.i(mTag, ""Read ARs from ARA""); readAllAccessRules(); } catch (java.lang.Exception e) { android.util.Log.i(mTag, (""ARA error: "" + (e.getLocalizedMessage()))); throw new java.security.AccessControlException(e.getLocalizedMessage()); } finally { if (channel != null) { channel.close(); } } }",8923cb91e5017c9b835b3a024d314c27b3adbe49,"public synchronized void initialize() throws java.io.IOException, java.util.NoSuchElementException { com.android.se.Channel channel = mTerminal.openLogicalChannelWithoutChannelAccess(com.android.se.security.ara.AraController.getAraMAid()); if (channel == null) { throw new java.util.MissingResourceException(""could not open channel"", """", """"); } com.android.se.security.ChannelAccess araChannelAccess = new com.android.se.security.ChannelAccess(); araChannelAccess.setAccess(ChannelAccess.ACCESS.ALLOWED, mTag); araChannelAccess.setApduAccess(ChannelAccess.ACCESS.ALLOWED); channel.setChannelAccess(araChannelAccess); try { mApplet = new com.android.se.security.ara.AccessRuleApplet(channel); byte[] tag = mApplet.readRefreshTag(); if (mAccessRuleCache.isRefreshTagEqual(tag)) { android.util.Log.i(mTag, ""Refresh tag unchanged. Using access rules from cache.""); return; } android.util.Log.i(mTag, ""Refresh tag has changed.""); mAccessRuleCache.setRefreshTag(tag); mAccessRuleCache.clearCache(); android.util.Log.i(mTag, ""Read ARs from ARA""); readAllAccessRules(); } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { android.util.Log.i(mTag, (""ARA error: "" + (e.getLocalizedMessage()))); throw new java.security.AccessControlException(e.getLocalizedMessage()); } finally { if (channel != null) { channel.close(); } } }",9ca9c4a7487c9f6658704ee57443c5942ee8a9ae,2018-03-13 17:57:49,6
629126,src_com_android_se_security_arf_PKCS15_PKCS15Handler.java,"private boolean updateACRules() throws com.android.se.security.arf.SecureElementException, com.android.se.security.arf.pkcs15.PKCS15Exception, java.lang.Exception { byte[] ACRulesPath = null; if (!(mACMFfound)) { mSEHandle.resetAccessRules(); mACMainPath = null; if ((mArfChannel) != null) mSEHandle.closeArfChannel(); this.initACEntryPoint(); } try { ACRulesPath = mACMainObject.analyseFile(); mACMFfound = true; } catch (java.lang.Exception e) { android.util.Log.i(mTag, ""ACMF Not found !""); mACMainObject = null; mSEHandle.resetAccessRules(); mACMFfound = false; throw e; } if (ACRulesPath != null) { android.util.Log.i(mTag, ""Access Rules needs to be updated...""); if ((mACRulesObject) == null) { mACRulesObject = new com.android.se.security.arf.pkcs15.EFACRules(mSEHandle); } mSEHandle.clearAccessRuleCache(); mACMainPath = null; if ((mArfChannel) != null) mSEHandle.closeArfChannel(); this.initACEntryPoint(); try { mACRulesObject.analyseFile(ACRulesPath); } catch (java.lang.Exception e) { android.util.Log.i(mTag, ""Exception: clear access rule cache and refresh tag""); mSEHandle.resetAccessRules(); throw e; } return true; } else { android.util.Log.i(mTag, ""Refresh Tag has not been changed...""); return false; } }",25f2c079e8e1c0f67108db8256b420906fd96f33,"private boolean updateACRules() throws com.android.se.security.arf.SecureElementException, com.android.se.security.arf.pkcs15.PKCS15Exception, java.lang.Exception, java.util.NoSuchElementException { byte[] ACRulesPath = null; if (!(mACMFfound)) { mSEHandle.resetAccessRules(); mACMainPath = null; if ((mArfChannel) != null) mSEHandle.closeArfChannel(); this.initACEntryPoint(); } try { ACRulesPath = mACMainObject.analyseFile(); mACMFfound = true; } catch (java.lang.Exception e) { android.util.Log.i(mTag, ""ACMF Not found !""); mACMainObject = null; mSEHandle.resetAccessRules(); mACMFfound = false; throw e; } if (ACRulesPath != null) { android.util.Log.i(mTag, ""Access Rules needs to be updated...""); if ((mACRulesObject) == null) { mACRulesObject = new com.android.se.security.arf.pkcs15.EFACRules(mSEHandle); } mSEHandle.clearAccessRuleCache(); mACMainPath = null; if ((mArfChannel) != null) mSEHandle.closeArfChannel(); this.initACEntryPoint(); try { mACRulesObject.analyseFile(ACRulesPath); } catch (java.lang.Exception e) { android.util.Log.i(mTag, ""Exception: clear access rule cache and refresh tag""); mSEHandle.resetAccessRules(); throw e; } return true; } else { android.util.Log.i(mTag, ""Refresh Tag has not been changed...""); return false; } }",4f3fce322c16aba9e765175585369f57adf1edb9,"private boolean updateACRules() throws com.android.se.security.arf.SecureElementException, com.android.se.security.arf.pkcs15.PKCS15Exception, java.io.IOException, java.security.cert.CertificateException, java.util.MissingResourceException, java.util.NoSuchElementException { byte[] ACRulesPath = null; if (!(mACMFfound)) { mSEHandle.resetAccessRules(); mACMainPath = null; if ((mArfChannel) != null) mSEHandle.closeArfChannel(); this.initACEntryPoint(); } try { ACRulesPath = mACMainObject.analyseFile(); mACMFfound = true; } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { android.util.Log.i(mTag, ""ACMF Not found !""); mACMainObject = null; mSEHandle.resetAccessRules(); mACMFfound = false; throw e; } if (ACRulesPath != null) { android.util.Log.i(mTag, ""Access Rules needs to be updated...""); if ((mACRulesObject) == null) { mACRulesObject = new com.android.se.security.arf.pkcs15.EFACRules(mSEHandle); } mSEHandle.clearAccessRuleCache(); mACMainPath = null; if ((mArfChannel) != null) mSEHandle.closeArfChannel(); this.initACEntryPoint(); try { mACRulesObject.analyseFile(ACRulesPath); } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { android.util.Log.i(mTag, ""Exception: clear access rule cache and refresh tag""); mSEHandle.resetAccessRules(); throw e; } return true; } else { android.util.Log.i(mTag, ""Refresh Tag has not been changed...""); return false; } }",5b7476ad6791bb32d10d8ebed1e266fbd2c7aa36,2018-03-13 17:57:49,6
629126,src_com_android_se_security_arf_PKCS15_PKCS15Handler.java,"public synchronized boolean loadAccessControlRules(java.lang.String secureElement) { mSELabel = secureElement; android.util.Log.i(mTag, ((""- Loading "" + (mSELabel)) + "" rules..."")); try { initACEntryPoint(); return updateACRules(); } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { throw ((java.util.MissingResourceException) (e)); } android.util.Log.e(mTag, (((mSELabel) + "" rules not correctly initialized! "") + (e.getLocalizedMessage()))); throw new java.security.AccessControlException(e.getLocalizedMessage()); } finally { if ((mArfChannel) != null) mSEHandle.closeArfChannel(); } }",09aabb31cd2c2a96181c82260ad05149dedd2f0d,"public synchronized boolean loadAccessControlRules(java.lang.String secureElement) throws java.util.NoSuchElementException { mSELabel = secureElement; android.util.Log.i(mTag, ((""- Loading "" + (mSELabel)) + "" rules..."")); try { initACEntryPoint(); return updateACRules(); } catch (java.util.NoSuchElementException e) { throw e; } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { throw ((java.util.MissingResourceException) (e)); } android.util.Log.e(mTag, (((mSELabel) + "" rules not correctly initialized! "") + (e.getLocalizedMessage()))); throw new java.security.AccessControlException(e.getLocalizedMessage()); } finally { if ((mArfChannel) != null) mSEHandle.closeArfChannel(); } }",9b6f7ea7cffd689730822cf4a5922383244787d5,"public synchronized boolean loadAccessControlRules(java.lang.String secureElement) throws java.io.IOException, java.util.MissingResourceException, java.util.NoSuchElementException { mSELabel = secureElement; android.util.Log.i(mTag, ((""- Loading "" + (mSELabel)) + "" rules..."")); try { initACEntryPoint(); return updateACRules(); } catch (java.io.IOException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } catch (java.util.NoSuchElementException e) { throw e; } catch (java.lang.Exception e) { android.util.Log.e(mTag, (((mSELabel) + "" rules not correctly initialized! "") + (e.getLocalizedMessage()))); throw new java.security.AccessControlException(e.getLocalizedMessage()); } finally { if ((mArfChannel) != null) mSEHandle.closeArfChannel(); } }",d7cb5f591ed4cc79470ff65a1264f6425add06ea,2018-03-13 17:57:49,6
629126,src_com_android_se_security_arf_SecureElement.java,"public com.android.se.Channel openLogicalArfChannel(byte[] aid) { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { return null; } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { android.util.Log.e(mTag, (""no channels left to access ARF: "" + (e.getMessage()))); throw ((java.util.MissingResourceException) (e)); } else { android.util.Log.e(mTag, (""Error opening logical channel "" + (e.getLocalizedMessage()))); } mArfChannel = null; return null; } }",eac94a241dea90b6642985d7951573f2a61328a2,"public com.android.se.Channel openLogicalArfChannel(byte[] aid) throws java.util.NoSuchElementException { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { return null; } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.util.NoSuchElementException e) { throw e; } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { android.util.Log.e(mTag, (""no channels left to access ARF: "" + (e.getMessage()))); throw ((java.util.MissingResourceException) (e)); } else { android.util.Log.e(mTag, (""Error opening logical channel "" + (e.getLocalizedMessage()))); } mArfChannel = null; return null; } }",2828af5c3381e530667f2f1e03c40859d5b7470d,"public com.android.se.Channel openLogicalArfChannel(byte[] aid) throws java.io.IOException, java.util.NoSuchElementException { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { throw new java.util.MissingResourceException(""No channel was available"", """", """"); } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.io.IOException e) { throw e; } catch (java.util.NoSuchElementException e) { throw e; } catch (java.lang.Exception e) { android.util.Log.e(mTag, (""Error opening logical channel "" + (e.getLocalizedMessage()))); mArfChannel = null; return null; } }",49109f0cfb6e7ec5402600076a878ad686d24bbd,2018-03-13 17:57:49,6
638000,telephony_java_android_telephony_SubscriptionManager.java,"public android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int subId) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd((""[getActiveSubscriptionInfo]+ subId="" + subId)); if (!(android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { if (android.telephony.SubscriptionManager.DBG) { android.telephony.SubscriptionManager.logd(""[getActiveSubscriptionInfo]- invalid subId""); } return null; } android.telephony.SubscriptionInfo subInfo = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService(""isub"")); if (iSub != null) { subInfo = iSub.getActiveSubscriptionInfo(subId, mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return subInfo; }",ca606e61805b31a05fd77077fe8baf72a4dbd9a4,"@android.annotation.SuppressAutoDoc @android.telephony.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int subId) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd((""[getActiveSubscriptionInfo]+ subId="" + subId)); if (!(android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { if (android.telephony.SubscriptionManager.DBG) { android.telephony.SubscriptionManager.logd(""[getActiveSubscriptionInfo]- invalid subId""); } return null; } android.telephony.SubscriptionInfo subInfo = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService(""isub"")); if (iSub != null) { subInfo = iSub.getActiveSubscriptionInfo(subId, mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return subInfo; }",109dd0f30bd1c8cbea7e80e40e1290dba75445fc,"@android.annotation.SuppressAutoDoc @android.annotation.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int subId) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd((""[getActiveSubscriptionInfo]+ subId="" + subId)); if (!(android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { if (android.telephony.SubscriptionManager.DBG) { android.telephony.SubscriptionManager.logd(""[getActiveSubscriptionInfo]- invalid subId""); } return null; } android.telephony.SubscriptionInfo subInfo = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService(""isub"")); if (iSub != null) { subInfo = iSub.getActiveSubscriptionInfo(subId, mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return subInfo; }",7568448fb8783a54966a7f9f250492d622797708,2018-03-14 00:10:09,2
638000,telephony_java_android_telephony_SubscriptionManager.java,"public android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int slotIndex) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd((""[getActiveSubscriptionInfoForSimSlotIndex]+ slotIndex="" + slotIndex)); if (!(android.telephony.SubscriptionManager.isValidSlotIndex(slotIndex))) { android.telephony.SubscriptionManager.logd(""[getActiveSubscriptionInfoForSimSlotIndex]- invalid slotIndex""); return null; } android.telephony.SubscriptionInfo result = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService(""isub"")); if (iSub != null) { result = iSub.getActiveSubscriptionInfoForSimSlotIndex(slotIndex, mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }",5feb767edb2878969f499ada19d0a6d1ede6028e,"@android.annotation.SuppressAutoDoc @android.telephony.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int slotIndex) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd((""[getActiveSubscriptionInfoForSimSlotIndex]+ slotIndex="" + slotIndex)); if (!(android.telephony.SubscriptionManager.isValidSlotIndex(slotIndex))) { android.telephony.SubscriptionManager.logd(""[getActiveSubscriptionInfoForSimSlotIndex]- invalid slotIndex""); return null; } android.telephony.SubscriptionInfo result = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService(""isub"")); if (iSub != null) { result = iSub.getActiveSubscriptionInfoForSimSlotIndex(slotIndex, mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }",366fc2c30083c77e42e6f72515b39e18b9cec915,"@android.annotation.SuppressAutoDoc @android.annotation.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int slotIndex) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd((""[getActiveSubscriptionInfoForSimSlotIndex]+ slotIndex="" + slotIndex)); if (!(android.telephony.SubscriptionManager.isValidSlotIndex(slotIndex))) { android.telephony.SubscriptionManager.logd(""[getActiveSubscriptionInfoForSimSlotIndex]- invalid slotIndex""); return null; } android.telephony.SubscriptionInfo result = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService(""isub"")); if (iSub != null) { result = iSub.getActiveSubscriptionInfoForSimSlotIndex(slotIndex, mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }",99b8d57e2fd974864cf5fe3699e7c65d6061dc06,2018-03-14 00:10:09,2
638000,telephony_java_android_telephony_SubscriptionManager.java,"public void addOnSubscriptionsChangedListener(android.telephony.SubscriptionManager.OnSubscriptionsChangedListener listener) { java.lang.String pkgName = ((mContext) != null) ? mContext.getOpPackageName() : ""<unknown>""; if (android.telephony.SubscriptionManager.DBG) { android.telephony.SubscriptionManager.logd((((""register OnSubscriptionsChangedListener pkgName="" + pkgName) + "" listener="") + listener)); } try { com.android.internal.telephony.ITelephonyRegistry tr = ITelephonyRegistry.Stub.asInterface(android.os.ServiceManager.getService(""telephony.registry"")); if (tr != null) { tr.addOnSubscriptionsChangedListener(pkgName, listener.callback); } } catch (android.os.RemoteException ex) { } }",5b2036cde9e7559dc74b8f586c9220f8a2c87f41,"@android.telephony.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public void addOnSubscriptionsChangedListener(android.telephony.SubscriptionManager.OnSubscriptionsChangedListener listener) { java.lang.String pkgName = ((mContext) != null) ? mContext.getOpPackageName() : ""<unknown>""; if (android.telephony.SubscriptionManager.DBG) { android.telephony.SubscriptionManager.logd((((""register OnSubscriptionsChangedListener pkgName="" + pkgName) + "" listener="") + listener)); } try { com.android.internal.telephony.ITelephonyRegistry tr = ITelephonyRegistry.Stub.asInterface(android.os.ServiceManager.getService(""telephony.registry"")); if (tr != null) { tr.addOnSubscriptionsChangedListener(pkgName, listener.callback); } } catch (android.os.RemoteException ex) { } }",3cd12f1d0d6a1070b8ce1b65b34b40f66e03a9a7,"@android.annotation.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public void addOnSubscriptionsChangedListener(android.telephony.SubscriptionManager.OnSubscriptionsChangedListener listener) { java.lang.String pkgName = ((mContext) != null) ? mContext.getOpPackageName() : ""<unknown>""; if (android.telephony.SubscriptionManager.DBG) { android.telephony.SubscriptionManager.logd((((""register OnSubscriptionsChangedListener pkgName="" + pkgName) + "" listener="") + listener)); } try { com.android.internal.telephony.ITelephonyRegistry tr = ITelephonyRegistry.Stub.asInterface(android.os.ServiceManager.getService(""telephony.registry"")); if (tr != null) { tr.addOnSubscriptionsChangedListener(pkgName, listener.callback); } } catch (android.os.RemoteException ex) { } }",43ac43d4a443ba9814a201ce9b6483df77689a7c,2018-03-14 00:10:09,2
638000,telephony_java_android_telephony_SubscriptionManager.java,"public java.util.List<android.telephony.SubscriptionInfo> getActiveSubscriptionInfoList() { java.util.List<android.telephony.SubscriptionInfo> result = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService(""isub"")); if (iSub != null) { result = iSub.getActiveSubscriptionInfoList(mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }",1181499037948feb30d6a581f22b86004caa4b72,"@android.annotation.SuppressAutoDoc @android.telephony.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public java.util.List<android.telephony.SubscriptionInfo> getActiveSubscriptionInfoList() { java.util.List<android.telephony.SubscriptionInfo> result = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService(""isub"")); if (iSub != null) { result = iSub.getActiveSubscriptionInfoList(mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }",9f697648757a47b845709a816c8bbcc337a2f205,"@android.annotation.SuppressAutoDoc @android.annotation.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public java.util.List<android.telephony.SubscriptionInfo> getActiveSubscriptionInfoList() { java.util.List<android.telephony.SubscriptionInfo> result = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService(""isub"")); if (iSub != null) { result = iSub.getActiveSubscriptionInfoList(mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }",338b3fb70423b7e80819a770bb7eae24ba9d69c0,2018-03-14 00:10:09,2
638000,telephony_java_android_telephony_SubscriptionManager.java,"public int getActiveSubscriptionInfoCount() { int result = 0; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService(""isub"")); if (iSub != null) { result = iSub.getActiveSubInfoCount(mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }",c1bc60b571f3b6dffeb296ecc6492b74a316d326,"@android.annotation.SuppressAutoDoc @android.telephony.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public int getActiveSubscriptionInfoCount() { int result = 0; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService(""isub"")); if (iSub != null) { result = iSub.getActiveSubInfoCount(mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }",777497db03ab65dafe15d31a9af0f636678cfcc3,"@android.annotation.SuppressAutoDoc @android.annotation.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public int getActiveSubscriptionInfoCount() { int result = 0; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService(""isub"")); if (iSub != null) { result = iSub.getActiveSubInfoCount(mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }",919c240e943ca07ddd5d18263ad3fbd8b4507cbb,2018-03-14 00:10:09,2
638646,src_com_android_bluetooth_btservice_ProfileService.java,"private void doStop() { if (!(mProfileStarted)) { android.util.Log.w(mName, ""doStop() called, but the profile is not running.""); } mProfileStarted = false; if ((mAdapterService) != null) { mAdapterService.onProfileServiceStateChanged(this, BluetoothAdapter.STATE_OFF); } if (!(stop())) { android.util.Log.e(mName, ""Unable to stop profile""); } if ((mUserSwitchedReceiver) != null) { getApplicationContext().unregisterReceiver(mUserSwitchedReceiver); mUserSwitchedReceiver = null; } stopSelf(); }",b2dec05804cf76dc472b826063293304414382eb,"private void doStop() { if (!(mProfileStarted)) { android.util.Log.w(mName, ""doStop() called, but the profile is not running.""); } mProfileStarted = false; if ((mAdapterService) != null) { mAdapterService.onProfileServiceStateChanged(this, BluetoothAdapter.STATE_OFF); mAdapterService.removeProfile(this); } if (!(stop())) { android.util.Log.e(mName, ""Unable to stop profile""); } if ((mUserSwitchedReceiver) != null) { getApplicationContext().unregisterReceiver(mUserSwitchedReceiver); mUserSwitchedReceiver = null; } stopSelf(); }",a1be3a4fa82ff585e111510f349d4a44beb2cc19,"private void doStop() { if (!(mProfileStarted)) { android.util.Log.w(mName, ""doStop() called, but the profile is not running.""); } mProfileStarted = false; if ((mAdapterService) != null) { mAdapterService.onProfileServiceStateChanged(this, BluetoothAdapter.STATE_OFF); } if (!(stop())) { android.util.Log.e(mName, ""Unable to stop profile""); } if ((mAdapterService) != null) { mAdapterService.removeProfile(this); } if ((mUserSwitchedReceiver) != null) { getApplicationContext().unregisterReceiver(mUserSwitchedReceiver); mUserSwitchedReceiver = null; } stopSelf(); }",a093012d88b112694fd38825eb96916f15d8026d,2018-03-14 00:20:01,7
640059,src_com_android_bluetooth_avrcp_mockable_MediaBrowser.java,,,boolean isConnected() { return mDelegate.isConnected(); },1df6ad1bca07b336f78402131f274bc58960abb7,public boolean isConnected() { return mDelegate.isConnected(); },de2bce3edaeff08e22957384860e3f6bc71a5178,2018-03-15 01:36:53,4
640059,src_com_android_bluetooth_avrcp_mockable_MediaBrowser.java,,,void disconnect() { mDelegate.disconnect(); },f08d66f48c2548a289fc554f86a99e29d91fd777,public void disconnect() { mDelegate.disconnect(); },df6cba658d2b2dcf8ef3c0a81cc784d3b3bed936,2018-03-15 01:36:53,4
640059,src_com_android_bluetooth_avrcp_mockable_MediaBrowser.java,,,java.lang.String getRoot() { return mDelegate.getRoot(); },a7dc2798dc2a0074849e4a703623f66a25903494,public java.lang.String getRoot() { return mDelegate.getRoot(); },1e54902a109ae48e5afdc0b2539a1b83cc8d6eea,2018-03-15 01:36:53,4
640059,src_com_android_bluetooth_newavrcp_helpers_Util.java,"public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.session.MediaSession.QueueItem item) { if (item == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(item.getDescription()); if (bundle.containsKey(com.android.bluetooth.avrcp.Util.GPM_KEY)) { if (com.android.bluetooth.avrcp.Util.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Util.TAG, ""Queue item contains GPM data""); bundle.putAll(com.android.bluetooth.avrcp.Util.mediaMetadataToBundle(((android.media.MediaMetadata) (bundle.get(com.android.bluetooth.avrcp.Util.GPM_KEY))))); } if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.e(com.android.bluetooth.avrcp.Util.TAG, (""toMetadata: MediaDescription: ContainsKey: "" + key)); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bundleToMetadata(bundle); ret.mediaId = ""NowPlayingId"" + (item.getQueueId()); return ret; }",c5947070230b783ae5b4681a17ef01fd2ef97334,"public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.session.MediaSession.QueueItem item) { if (item == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(item.getDescription()); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.e(com.android.bluetooth.avrcp.Util.TAG, (""toMetadata: QueueItem: ContainsKey: "" + key)); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bundleToMetadata(bundle); ret.mediaId = ""NowPlayingId"" + (item.getQueueId()); return ret; }",7f716e26886c18a60b5933860bb1921042152378,"public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.session.MediaSession.QueueItem item) { if (item == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(item.getDescription()); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.d(com.android.bluetooth.avrcp.Util.TAG, (""toMetadata: QueueItem: ContainsKey: "" + key)); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bundleToMetadata(bundle); ret.mediaId = ""NowPlayingId"" + (item.getQueueId()); return ret; }",df234dd777eb4b96998ff968df1e08e34f0c7def,2018-03-15 01:36:53,4
640059,src_com_android_bluetooth_avrcp_mockable_MediaBrowser.java,,,MediaSession.Token getSessionToken() { return mDelegate.getSessionToken(); },730c59212dce0841cf4248f967a3d371b8c6a0e5,public MediaSession.Token getSessionToken() { return mDelegate.getSessionToken(); },c221c7ebd2d65efee5054921199e1edcece9ee64,2018-03-15 01:36:53,4
640059,src_com_android_bluetooth_newavrcp_helpers_Util.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.browse.MediaBrowser.MediaItem item) { if (item == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(item.getDescription()); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.e(com.android.bluetooth.avrcp.Util.TAG, (""toMetadata: MediaItem: ContainsKey: "" + key)); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bundleToMetadata(bundle); ret.mediaId = item.getMediaId(); return ret; }",ae0616479602e04d03866d370edbbb19793b3dbf,"public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.browse.MediaBrowser.MediaItem item) { if (item == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(item.getDescription()); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.d(com.android.bluetooth.avrcp.Util.TAG, (""toMetadata: MediaItem: ContainsKey: "" + key)); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bundleToMetadata(bundle); ret.mediaId = item.getMediaId(); return ret; }",4b75a24e4d9ea589d2e5c238e1ac47d0da032ea2,2018-03-15 01:36:53,4
640059,src_com_android_bluetooth_avrcp_mockable_MediaBrowser.java,,,android.content.ComponentName getServiceComponent() { return mDelegate.getServiceComponent(); },d5288fffd214619b010ec204aad732a77417af00,public android.content.ComponentName getServiceComponent() { return mDelegate.getServiceComponent(); },b7cc5ca32c19d5c999a96ba6c3705850615dcf8a,2018-03-15 01:36:53,4
640059,src_com_android_bluetooth_newavrcp_BrowsedPlayerWrapper.java,,,"@java.lang.Override protected boolean removeEldestEntry(Map.Entry<java.lang.String, java.util.List<com.android.bluetooth.avrcp.ListItem>> eldest) { return (size()) > (com.android.bluetooth.avrcp.BrowsedPlayerWrapper.NUM_CACHED_FOLDERS); }",82bd446210181385fdb622d0dc912c5eaf198a87,"@java.lang.Override protected boolean removeEldestEntry(java.util.Map.Entry<java.lang.String, java.util.List<com.android.bluetooth.avrcp.ListItem>> eldest) { return (size()) > (com.android.bluetooth.avrcp.BrowsedPlayerWrapper.NUM_CACHED_FOLDERS); }",017ad9035c052a93b50fb9b9456c84ccdb3c8cd1,2018-03-15 01:36:53,4
640059,src_com_android_bluetooth_avrcp_mockable_MediaBrowser.java,,,"void subscribe(java.lang.String parentId, com.android.bluetooth.avrcp.MediaBrowser.SubscriptionCallback callback) { mDelegate.subscribe(parentId, callback); }",f2c5b97624de169c1ea5888714dcafba4493a802,"public void subscribe(java.lang.String parentId, com.android.bluetooth.avrcp.MediaBrowser.SubscriptionCallback callback) { mDelegate.subscribe(parentId, callback); }",93e861451b09ac3e34b96977e7bdbd2ce7a1e1fc,2018-03-15 01:36:53,4
640059,src_com_android_bluetooth_avrcp_mockable_MediaBrowser.java,,,"void getItem(java.lang.String mediaId, com.android.bluetooth.avrcp.MediaBrowser.ItemCallback callback) { mDelegate.getItem(mediaId, callback); }",4b4e685b127dcf70ae4839571b72bf0817a8a33b,"public void getItem(java.lang.String mediaId, com.android.bluetooth.avrcp.MediaBrowser.ItemCallback callback) { mDelegate.getItem(mediaId, callback); }",dc9421217b39e73a364f026cc772f1f75547cd57,2018-03-15 01:36:53,4
640059,src_com_android_bluetooth_avrcp_mockable_MediaBrowser.java,,,android.os.Bundle getExtras() { return mDelegate.getExtras(); },70f1d43a2e4576cd3aefc311fa0a1b7a34528471,public android.os.Bundle getExtras() { return mDelegate.getExtras(); },8b453fa8c37f2ff19219044d7ca60401060f9a73,2018-03-15 01:36:53,4
640059,src_com_android_bluetooth_avrcp_mockable_MediaBrowser.java,,,"void subscribe(java.lang.String parentId, android.os.Bundle options, com.android.bluetooth.avrcp.MediaBrowser.SubscriptionCallback callback) { mDelegate.subscribe(parentId, options, callback); }",05029f908ade62c1a48f8d8b032dff8144151e42,"public void subscribe(java.lang.String parentId, android.os.Bundle options, com.android.bluetooth.avrcp.MediaBrowser.SubscriptionCallback callback) { mDelegate.subscribe(parentId, options, callback); }",920e90a7e1fe8266c73c04cdd238fc4e7ccbbaa6,2018-03-15 01:36:53,4
640059,src_com_android_bluetooth_avrcp_mockable_MediaBrowser.java,,,void unsubscribe(java.lang.String parentId) { mDelegate.unsubscribe(parentId); },2ca9898479f3acbc5824ff31b8ffc761b5b8985e,public void unsubscribe(java.lang.String parentId) { mDelegate.unsubscribe(parentId); },10dc082b54d9b7a803514c63733e356efda911f8,2018-03-15 01:36:53,4
640059,src_com_android_bluetooth_newavrcp_helpers_Util.java,"public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.MediaMetadata data) { if (data == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.media.MediaDescription desc = data.getDescription(); android.os.Bundle dataBundle = com.android.bluetooth.avrcp.Util.mediaMetadataToBundle(data); android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(data.getDescription()); bundle.putAll(dataBundle); com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bundleToMetadata(bundle); ret.mediaId = ""currsong""; return ret; }",a19ba5a801b5fe1ad8fcd688c533d8373646b09b,"public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.MediaMetadata data) { if (data == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.media.MediaDescription desc = data.getDescription(); android.os.Bundle dataBundle = com.android.bluetooth.avrcp.Util.mediaMetadataToBundle(data); android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(data.getDescription()); bundle.putAll(dataBundle); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.e(com.android.bluetooth.avrcp.Util.TAG, (""toMetadata: MediaMetadata: ContainsKey: "" + key)); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bundleToMetadata(bundle); ret.mediaId = ""currsong""; return ret; }",14e10c30a2be149b08c55a7310bf47e0c716c71a,"public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.MediaMetadata data) { if (data == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.media.MediaDescription desc = data.getDescription(); android.os.Bundle dataBundle = com.android.bluetooth.avrcp.Util.mediaMetadataToBundle(data); android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(data.getDescription()); bundle.putAll(dataBundle); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.d(com.android.bluetooth.avrcp.Util.TAG, (""toMetadata: MediaMetadata: ContainsKey: "" + key)); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bundleToMetadata(bundle); ret.mediaId = ""currsong""; return ret; }",b05f111b12403ee14273ca7745aad0a3cb3de88d,2018-03-15 01:36:53,4
640059,src_com_android_bluetooth_avrcp_mockable_MediaBrowser.java,,,void connect() { mDelegate.connect(); },e5a08652c8cb5ff9e1a62dfc69744aff620e0439,public void connect() { mDelegate.connect(); },b266d825eb505a0e6796c91af02b71a220b91f94,2018-03-15 01:36:53,4
640059,src_com_android_bluetooth_avrcp_mockable_MediaBrowser.java,,,"void unsubscribe(java.lang.String parentId, com.android.bluetooth.avrcp.MediaBrowser.SubscriptionCallback callback) { mDelegate.unsubscribe(parentId, callback); }",1245a80d9853902114882f6144dee369cafe167f,"public void unsubscribe(java.lang.String parentId, com.android.bluetooth.avrcp.MediaBrowser.SubscriptionCallback callback) { mDelegate.unsubscribe(parentId, callback); }",dc9f34ce1332158fcfaf83c346a799a22c6e015c,2018-03-15 01:36:53,4
640059,src_com_android_bluetooth_avrcp_mockable_MediaBrowser.java,,,"@com.android.internal.annotations.VisibleForTesting void testInit(android.content.Context context, android.content.ComponentName serviceComponent, com.android.bluetooth.avrcp.MediaBrowser.ConnectionCallback callback, android.os.Bundle rootHints) { android.util.Log.wtfStack(""AvrcpMockMediaBrowser"", ""This function should never be called""); }",0fc136a5967d3399a15ca6478b447d154e3fcc4f,"@com.android.internal.annotations.VisibleForTesting public void testInit(android.content.Context context, android.content.ComponentName serviceComponent, com.android.bluetooth.avrcp.MediaBrowser.ConnectionCallback callback, android.os.Bundle rootHints) { android.util.Log.wtfStack(""AvrcpMockMediaBrowser"", ""This function should never be called""); }",bca4678f332bbe3c413b089583a128ee2a09879a,2018-03-15 01:36:53,4
390413,services_core_java_com_android_server_hdmi_HdmiCecLocalDeviceTv.java,"void setSystemAudioMode(boolean on, boolean updateSetting) { com.android.server.hdmi.HdmiLogger.debug(""System Audio Mode change[old:%b new:%b]"", mSystemAudioActivated, on); if (updateSetting) { mService.writeBooleanSetting(Global.HDMI_SYSTEM_AUDIO_ENABLED, on); } updateAudioManagerForSystemAudio(on); synchronized(mLock) { if ((mSystemAudioActivated) != on) { mSystemAudioActivated = on; mService.announceSystemAudioModeChange(on); } } }",285e9477bb8c8ed74af4549943cb4d545b82172d,"void setSystemAudioMode(boolean on, boolean updateSetting) { com.android.server.hdmi.HdmiLogger.debug(""System Audio Mode change[old:%b new:%b]"", mSystemAudioActivated, on); if (updateSetting) { mService.writeBooleanSetting(Global.HDMI_SYSTEM_AUDIO_ENABLED, on); } updateAudioManagerForSystemAudio(on); synchronized(mLock) { if ((mSystemAudioActivated) != on) { mSystemAudioActivated = on; if ((getAvrDeviceInfo()) != null) { com.android.server.hdmi.RequestShortAudioDescriptorAction action = new com.android.server.hdmi.RequestShortAudioDescriptorAction(this, getAvrDeviceInfo().getLogicalAddress(), getAvrDeviceInfo().getPortId(), on); addAndStartAction(action); } mService.announceSystemAudioModeChange(on); } } }",ce76a465f2ba97271c991f9966a62d0b07128d84,"void setSystemAudioMode(boolean on, boolean updateSetting) { com.android.server.hdmi.HdmiLogger.debug(""System Audio Mode change[old:%b new:%b]"", mSystemAudioActivated, on); if (updateSetting) { mService.writeBooleanSetting(Global.HDMI_SYSTEM_AUDIO_ENABLED, on); } updateAudioManagerForSystemAudio(on); synchronized(mLock) { if ((mSystemAudioActivated) != on) { mSystemAudioActivated = on; if ((getAvrDeviceInfo()) != null) { com.android.server.hdmi.RequestShortAudioDescriptorAction action = new com.android.server.hdmi.RequestShortAudioDescriptorAction(this, getAvrDeviceInfo().getLogicalAddress(), getAvrDeviceInfo().getPortId(), on, new com.android.server.hdmi.RequestShortAudioDescriptorAction.RequestSADCallback() { @java.lang.Override public void updateSAD(java.lang.String keyValuePairs, boolean supportMultiChannels) { mService.getAudioManager().setParameters(keyValuePairs); mService.setCecOption(Constants.OPTION_CEC_SUPPORT_MULTICHANNELS, (supportMultiChannels ? Constants.ENABLED : Constants.DISABLED)); } }); addAndStartAction(action); } mService.announceSystemAudioModeChange(on); } } }",e6eb7c5d57b07163a91d8fe61befa6a71d68fbb0,2018-03-15 01:49:35,11
390413,services_core_java_com_android_server_hdmi_RequestShortAudioDescriptorAction.java,,,"@java.lang.Override boolean start() { if (mEnabled) { mState = com.android.server.hdmi.RequestShortAudioDescriptorAction.STATE_WAITING_TIMEOUT; addTimer(mState, HdmiConfig.TIMEOUT_MS); if ((com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup) != null) { com.android.server.hdmi.HdmiLogger.debug(""Set old audio format""); setAudioFormat(); } else { com.android.server.hdmi.HdmiLogger.debug(""No old audio format. Send a command to reqeust.""); sendRequestShortAudioDescriptor(); } } else { resetShortAudioDescriptor(); finish(); } return true; }",9b06d7f3287ddeaa5c007d1b4470bebbb79c32a0,"@java.lang.Override boolean start() { if (mEnabled) { mState = com.android.server.hdmi.RequestShortAudioDescriptorAction.STATE_WAITING_TIMEOUT; addTimer(mState, HdmiConfig.TIMEOUT_MS); if ((com.android.server.hdmi.RequestShortAudioDescriptorAction.mParamsBackup) != null) { com.android.server.hdmi.HdmiLogger.debug(""Set old audio format""); setAudioFormat(); } else { com.android.server.hdmi.HdmiLogger.debug(""No old audio format. Send a command to reqeust.""); sendRequestShortAudioDescriptor(); } } else { resetShortAudioDescriptor(); finish(); } return true; }",1163b4233883745ec9c2e6dbda1b98111191f008,2018-03-15 01:49:35,11
390413,services_core_java_com_android_server_hdmi_RequestShortAudioDescriptorAction.java,,,"private void resetShortAudioDescriptor() { java.lang.String audioParameter = ""set_ARC_format=""; java.lang.String keyValuePairs; byte[] buffer = new byte[2]; buffer[0] = ((byte) (0)); buffer[1] = ((byte) (mAvrPort)); keyValuePairs = audioParameter + (java.util.Arrays.toString(buffer)); tv().setAudioParameters(keyValuePairs); }",e0088c7ac77e87f6259a7a098400782272d7f476,"private void resetShortAudioDescriptor() { java.lang.String audioParameter = ""set_ARC_format=""; java.lang.String keyValuePairs; byte[] buffer = new byte[2]; buffer[0] = ((byte) (0)); buffer[1] = ((byte) (mAvrPort)); keyValuePairs = audioParameter + (java.util.Arrays.toString(buffer)); mCallback.updateSAD(keyValuePairs, false); }",171ece211be51863f8cb72a2a296226b6329aff3,2018-03-15 01:49:35,11
390413,services_core_java_com_android_server_hdmi_RequestShortAudioDescriptorAction.java,,,"private void sendRequestShortAudioDescriptor() { byte[] params = new byte[4]; params[0] = ((byte) (MSAPI_CODEC_DD)); params[1] = ((byte) (MSAPI_CODEC_AAC)); params[2] = ((byte) (MSAPI_CODEC_DTS)); params[3] = ((byte) (MSAPI_CODEC_DDP)); com.android.server.hdmi.HdmiCecMessage command = com.android.server.hdmi.HdmiCecMessageBuilder.buildRequestShortAudioDescriptor(getSourceAddress(), mAvrAddress, params); sendCommand(command, new com.android.server.hdmi.HdmiControlService.SendMessageCallback() { @java.lang.Override public void onSendCompleted(int error) { switch (error) { case Constants.SEND_RESULT_SUCCESS : case Constants.SEND_RESULT_BUSY : case Constants.SEND_RESULT_FAILURE : break; case Constants.SEND_RESULT_NAK : com.android.server.hdmi.HdmiLogger.debug(""Failed to send <Request Short Audio Descriptor>.""); finish(); break; } } }); }",2ad0d66bed855f37793fdc562239f29b249bd570,"private void sendRequestShortAudioDescriptor() { byte[] params = new byte[4]; params[0] = ((byte) (Constants.MSAPI_CODEC_DD)); params[1] = ((byte) (Constants.MSAPI_CODEC_AAC)); params[2] = ((byte) (Constants.MSAPI_CODEC_DTS)); params[3] = ((byte) (Constants.MSAPI_CODEC_DDP)); com.android.server.hdmi.HdmiCecMessage command = com.android.server.hdmi.HdmiCecMessageBuilder.buildRequestShortAudioDescriptor(getSourceAddress(), mAvrAddress, params); sendCommand(command, new com.android.server.hdmi.HdmiControlService.SendMessageCallback() { @java.lang.Override public void onSendCompleted(int error) { switch (error) { case Constants.SEND_RESULT_SUCCESS : case Constants.SEND_RESULT_BUSY : case Constants.SEND_RESULT_FAILURE : break; case Constants.SEND_RESULT_NAK : com.android.server.hdmi.HdmiLogger.debug(""Failed to send <Request Short Audio Descriptor>.""); finish(); break; } } }); }",faf84fa6b70b83a7276a4a9cb3a745bf63db3e77,2018-03-15 01:49:35,11
390413,services_core_java_com_android_server_hdmi_RequestShortAudioDescriptorAction.java,,,"public static void removeAudioFormat() { com.android.server.hdmi.HdmiLogger.debug(""Remove audio format.""); com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup = null; }",a6f7c05df609a13a547b81e5b16d98292521517b,"public static void removeAudioFormat() { com.android.server.hdmi.HdmiLogger.debug(""Remove audio format.""); com.android.server.hdmi.RequestShortAudioDescriptorAction.mParamsBackup = null; }",c2aad113ba1717193ed38670a52a5fe6af316ed7,2018-03-15 01:49:35,11
390413,services_core_java_com_android_server_hdmi_RequestShortAudioDescriptorAction.java,,,"@java.lang.Override boolean processCommand(com.android.server.hdmi.HdmiCecMessage cmd) { if ((mState) != (com.android.server.hdmi.RequestShortAudioDescriptorAction.STATE_WAITING_TIMEOUT)) { return false; } int opcode = cmd.getOpcode(); byte[] params = cmd.getParams(); if (opcode == (Constants.MESSAGE_FEATURE_ABORT)) { int originalOpcode = (cmd.getParams()[0]) & 255; if (originalOpcode == (Constants.MESSAGE_REQUEST_SHORT_AUDIO_DESCRIPTOR)) { com.android.server.hdmi.HdmiLogger.debug(""Feature aborted for <Request Short Audio Descriptor>""); finish(); return true; } } else if (opcode == (Constants.MESSAGE_REPORT_SHORT_AUDIO_DESCRIPTOR)) { com.android.server.hdmi.HdmiLogger.debug(""ProcessCommand: <Report Short Audio Descriptor>""); com.android.server.hdmi.HdmiLogger.debug((""length:"" + (params.length))); if (((params.length) == 0) || ((params.length) > (SAD_LEN_MAX))) { finish(); return false; } if (((params[0]) & 255) == (MSAPI_CODEC_NONE)) { resetShortAudioDescriptor(); finish(); return true; } com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup = new byte[params.length]; com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup = java.util.Arrays.copyOf(params, params.length); setAudioFormat(); return true; } return false; }",e8fc0fac304ee75150378a711bd40ca77deb072e,"@java.lang.Override boolean processCommand(com.android.server.hdmi.HdmiCecMessage cmd) { if ((mState) != (com.android.server.hdmi.RequestShortAudioDescriptorAction.STATE_WAITING_TIMEOUT)) { return false; } int opcode = cmd.getOpcode(); byte[] params = cmd.getParams(); if (opcode == (Constants.MESSAGE_FEATURE_ABORT)) { int originalOpcode = (cmd.getParams()[0]) & 255; if (originalOpcode == (Constants.MESSAGE_REQUEST_SHORT_AUDIO_DESCRIPTOR)) { com.android.server.hdmi.HdmiLogger.debug(""Feature aborted for <Request Short Audio Descriptor>""); finish(); return true; } } else if (opcode == (Constants.MESSAGE_REPORT_SHORT_AUDIO_DESCRIPTOR)) { com.android.server.hdmi.HdmiLogger.debug(""ProcessCommand: <Report Short Audio Descriptor>""); com.android.server.hdmi.HdmiLogger.debug((""length:"" + (params.length))); if (((params.length) == 0) || ((params.length) > (SAD_LEN_MAX))) { finish(); return false; } if (((params[0]) & 255) == (Constants.MSAPI_CODEC_NONE)) { resetShortAudioDescriptor(); finish(); return true; } com.android.server.hdmi.RequestShortAudioDescriptorAction.mParamsBackup = new byte[params.length]; com.android.server.hdmi.RequestShortAudioDescriptorAction.mParamsBackup = java.util.Arrays.copyOf(params, params.length); setAudioFormat(); return true; } return false; }",582f638c13b41c1b26e59a9d769809d2a2aad523,2018-03-15 01:49:35,11
390413,services_core_java_com_android_server_hdmi_RequestShortAudioDescriptorAction.java,,,"private void setAudioFormat() { byte[] buffer = new byte[(com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup.length) + 2]; java.lang.String audioParameter = ""set_ARC_format=""; java.lang.String keyValuePairs; buffer[0] = ((byte) (com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup.length)); buffer[1] = ((byte) (mAvrPort)); for (int index = 0; index < (com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup.length); index++) { buffer[(index + 2)] = com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup[index]; } keyValuePairs = audioParameter + (java.util.Arrays.toString(buffer)); tv().setAudioParameters(keyValuePairs); finish(); }",fce05a18513300cb89f3dbc57dbcfeaaa9a35a35,"private void setAudioFormat() { byte[] buffer = new byte[2]; java.lang.String audioParameter = ""set_ARC_format=""; java.lang.String keyValuePairs; buffer[0] = ((byte) (com.android.server.hdmi.RequestShortAudioDescriptorAction.mParamsBackup.length)); buffer[1] = ((byte) (mAvrPort)); keyValuePairs = audioParameter + (java.util.Arrays.toString(buffer)); keyValuePairs += java.util.Arrays.toString(com.android.server.hdmi.RequestShortAudioDescriptorAction.mParamsBackup); com.android.server.hdmi.HdmiLogger.debug((""keyValuePairs:"" + keyValuePairs)); mCallback.updateSAD(keyValuePairs, isMultiChannelsSupported()); finish(); }",84ba0e61cae24df501fcd645453403769e889550,2018-03-15 01:49:35,11
640021,tools_upstream_src_main_java_libcore_StandardRepositories.java,"public libcore.Repository currentUpstream(java.nio.file.Path relPath) { boolean isJsr166 = relPath.toString().startsWith(""java/util/concurrent""); java.lang.String ju = ""java/util/""; java.lang.String suffix = "".java""; if ((!isJsr166) && (relPath.startsWith(ju))) { java.lang.String name = relPath.toString().substring(ju.length()); if (name.endsWith(suffix)) { name = name.substring(0, ((name.length()) - (suffix.length()))); isJsr166 = libcore.StandardRepositories.juFilesFromJsr166.contains(name); } } return isJsr166 ? jsr166Upstream : defaultUpstream; }",1528c9f797ff16e4ce948fd3331d69d698d5bb59,"public libcore.Repository currentUpstream(java.nio.file.Path relPath) { boolean isJsr166 = relPath.startsWith(""java/util/concurrent/""); java.lang.String ju = ""java/util/""; java.lang.String suffix = "".java""; if ((!isJsr166) && (relPath.startsWith(ju))) { java.lang.String name = relPath.toString().substring(ju.length()); if (name.endsWith(suffix)) { name = name.substring(0, ((name.length()) - (suffix.length()))); isJsr166 = libcore.StandardRepositories.juFilesFromJsr166.contains(name); } } if (isJsr166) { return jsr166Upstream; } else if ((relPath.startsWith(""java/sql/"")) || (relPath.startsWith(""javax/sql/""))) { return javaUtilSqlUpstream; } else { return defaultUpstream; } }",a3c2f280a68ecaec0aeedc83f7ab66393e72e2ab,"public libcore.Repository currentUpstream(java.nio.file.Path relPath) { boolean isJsr166 = relPath.startsWith(""java/util/concurrent/""); java.lang.String ju = ""java/util/""; java.lang.String suffix = "".java""; if ((!isJsr166) && (relPath.startsWith(ju))) { java.lang.String name = relPath.toString().substring(ju.length()); if (name.endsWith(suffix)) { name = name.substring(0, ((name.length()) - (suffix.length()))); isJsr166 = libcore.StandardRepositories.juFilesFromJsr166.contains(name); } } if (isJsr166) { return jsr166Upstream; } else if ((relPath.startsWith(""java/sql/"")) || (relPath.startsWith(""javax/sql/""))) { return javaSqlUpstream; } else { return defaultUpstream; } }",471fd99b98abb3f01450f1c5ad58786d7c031976,2018-03-15 16:46:18,2
638866,harnesses_tradefed_tests_src_com_android_tradefed_util_VtsPythonRunnerHelperTest.java,,,"public void testGetPythonBinaryNormalOnWindows() { java.lang.String originalName = java.lang.System.getProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME); if (!(originalName.contains(com.android.tradefed.util.VtsPythonRunnerHelperTest.WINDOWS))) { java.lang.System.setProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME, com.android.tradefed.util.VtsPythonRunnerHelperTest.WINDOWS); } try { runTestPythonBinaryNormal(true); } catch (java.io.IOException e) { fail(); } finally { java.lang.System.setProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME, originalName); } }",e8ce29c8174267957e738b85e145e761451c0d83,"@org.junit.Test public void testGetPythonBinaryNormalOnWindows() { java.lang.String originalName = java.lang.System.getProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME); if (!(originalName.contains(com.android.tradefed.util.VtsPythonRunnerHelperTest.WINDOWS))) { java.lang.System.setProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME, com.android.tradefed.util.VtsPythonRunnerHelperTest.WINDOWS); } try { runTestPythonBinaryNormal(true); } catch (java.io.IOException e) { fail(); } finally { java.lang.System.setProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME, originalName); } }",191ff665b0009c23e08f97baa9b4277404ba2c82,2018-03-15 23:06:16,7
638866,harnesses_tradefed_tests_src_com_android_tradefed_util_VtsPythonRunnerHelperTest.java,,,"public void testProcessRunTimeout() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.TIMED_OUT); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertEquals(interruptMessage, null); assertEquals(commandResult.getStatus(), CommandStatus.TIMED_OUT); }",7503c8887112e702db7f21a2c99a8b4e5d3d5e9b,"@org.junit.Test public void testProcessRunTimeout() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.TIMED_OUT); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(com.android.tradefed.util.VtsPythonRunnerHelperTest.mPythonCmd, commandResult, com.android.tradefed.util.VtsPythonRunnerHelperTest.mTestTimeout); assertEquals(interruptMessage, null); assertEquals(commandResult.getStatus(), CommandStatus.TIMED_OUT); }",00622b00a9dc96d5bf19d1606cb567fcb2128385,2018-03-15 23:06:16,7
638866,harnesses_tradefed_tests_src_com_android_tradefed_testtype_VtsMultiDeviceTestTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public java.lang.String getPythonBinary() { return (com.android.tradefed.testtype.VtsMultiDeviceTestTest.PYTHON_DIR) + (mPython); },6e5b9466c5cb4606fffcdf042470b18a92ae0e05,@java.lang.Override public java.lang.String getPythonBinary() { return (com.android.tradefed.testtype.VtsMultiDeviceTestTest.PYTHON_DIR) + (com.android.tradefed.testtype.VtsMultiDeviceTestTest.PYTHON_BINARY); },b81651668b77639534c4f0f8bcf9fea66a1aade1,2018-03-15 23:06:16,7
638866,harnesses_tradefed_tests_src_com_android_tradefed_testtype_VtsMultiDeviceTestTest.java,"public void testRunNormalInput() { mProcessHelper = com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockProcessHelper(CommandStatus.SUCCESS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice()); mTest.setRunUtil(createMockRunUtil(""which"")); try { mTest.run(mMockInvocationListener); } catch (java.lang.IllegalArgumentException e) { fail(); e.printStackTrace(); } catch (com.android.tradefed.device.DeviceNotAvailableException e) { fail(); e.printStackTrace(); } }",4a15dd41a4ff7ad34d23566a09789e6b0c153b94,public void testRunNormalInput() { mVtsPythonRunnerHelper = createMockVtsPythonRunnerHelper(CommandStatus.SUCCESS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice()); mTest.setVtsPythonRunnerHelper(mVtsPythonRunnerHelper); try { mTest.run(mMockInvocationListener); } catch (java.lang.IllegalArgumentException e) { fail(); e.printStackTrace(); } catch (com.android.tradefed.device.DeviceNotAvailableException e) { fail(); e.printStackTrace(); } },30687629151006a3065fc65184c7be829d1c96a2,@org.junit.Test public void testRunNormalInput() { mVtsPythonRunnerHelper = createMockVtsPythonRunnerHelper(CommandStatus.SUCCESS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice()); try { mTest.run(mMockInvocationListener); } catch (java.lang.IllegalArgumentException e) { fail(); e.printStackTrace(); } catch (com.android.tradefed.device.DeviceNotAvailableException e) { fail(); e.printStackTrace(); } },230c1ea470acfe91b6a316b66c2edf57ed0af3de,2018-03-15 23:06:16,7
638866,harnesses_tradefed_tests_src_com_android_tradefed_util_VtsPythonRunnerHelperTest.java,,,"public void testGetPythonBinaryPythonBinaryNotExists() { com.android.tradefed.util.CommandResult findPythonresult = new com.android.tradefed.util.CommandResult(); findPythonresult.setStatus(CommandStatus.SUCCESS); findPythonresult.setStdout(""/user/bin/python""); com.android.tradefed.util.IRunUtil runUtil = createMockRunUtil(findPythonresult); com.android.tradefed.build.IBuildInfo mockBuildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IBuildInfo.class); org.easymock.EasyMock.expect(mockBuildInfo.getFile(org.easymock.EasyMock.eq(""VIRTUALENVPATH""))).andReturn(new java.io.File(""NonExists"")).atLeastOnce(); org.easymock.EasyMock.replay(mockBuildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(mockBuildInfo); mVtsPythonRunnerHelper.setRunUtil(runUtil); try { java.lang.String pythonBinary = mVtsPythonRunnerHelper.getPythonBinary(); assertEquals(pythonBinary, ""/user/bin/python""); } catch (java.lang.RuntimeException e) { fail(); } }",33e8f1a103b4429eedbbf64ac9d1d8233a0c25e3,"@org.junit.Test public void testGetPythonBinaryPythonBinaryNotExists() { com.android.tradefed.util.CommandResult findPythonresult = new com.android.tradefed.util.CommandResult(); findPythonresult.setStatus(CommandStatus.SUCCESS); findPythonresult.setStdout(""/user/bin/python""); com.android.tradefed.util.IRunUtil runUtil = createMockRunUtil(findPythonresult); com.android.tradefed.build.IBuildInfo mockBuildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IBuildInfo.class); org.easymock.EasyMock.expect(mockBuildInfo.getFile(org.easymock.EasyMock.eq(""VIRTUALENVPATH""))).andReturn(new java.io.File(""NonExists"")).atLeastOnce(); org.easymock.EasyMock.replay(mockBuildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(mockBuildInfo); mVtsPythonRunnerHelper.setRunUtil(runUtil); try { java.lang.String pythonBinary = mVtsPythonRunnerHelper.getPythonBinary(); assertEquals(pythonBinary, ""/user/bin/python""); } catch (java.lang.RuntimeException e) { fail(); } org.easymock.EasyMock.verify(mockBuildInfo); }",9e36f87150c99b84bbfe1fc25c8cd15d38c47984,2018-03-15 23:06:16,7
638866,harnesses_tradefed_tests_src_com_android_tradefed_util_VtsPythonRunnerHelperTest.java,,,"public void testGetPythonBinaryException() { com.android.tradefed.util.CommandResult findPythonresult = new com.android.tradefed.util.CommandResult(); findPythonresult.setStatus(CommandStatus.FAILED); findPythonresult.setStdout(""""); com.android.tradefed.util.IRunUtil runUtil = createMockRunUtil(findPythonresult); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(null); mVtsPythonRunnerHelper.setRunUtil(runUtil); try { java.lang.String pythonBinary = mVtsPythonRunnerHelper.getPythonBinary(); } catch (java.lang.RuntimeException e) { assertEquals(""Could not find python binary on host machine"", e.getMessage()); return; } fail(); }",d34177317f13b0f3e4a1d60e24984ce7fa454214,"@org.junit.Test public void testGetPythonBinaryException() { com.android.tradefed.util.CommandResult findPythonresult = new com.android.tradefed.util.CommandResult(); findPythonresult.setStatus(CommandStatus.FAILED); findPythonresult.setStdout(""""); com.android.tradefed.util.IRunUtil runUtil = createMockRunUtil(findPythonresult); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(null); mVtsPythonRunnerHelper.setRunUtil(runUtil); try { java.lang.String pythonBinary = mVtsPythonRunnerHelper.getPythonBinary(); } catch (java.lang.RuntimeException e) { assertEquals(""Could not find python binary on host machine"", e.getMessage()); return; } fail(); }",f90b744d120cf9bb3a288fde809c8819f0b87504,2018-03-15 23:06:16,7
638866,harnesses_tradefed_tests_src_com_android_tradefed_util_VtsPythonRunnerHelperTest.java,,,"public void testProcessRunSuccess() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.SUCCESS); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertEquals(interruptMessage, null); assertEquals(commandResult.getStatus(), CommandStatus.SUCCESS); }",b4834f7b5c3f080f2b339175b19a52a1cd95469f,"@org.junit.Test public void testProcessRunSuccess() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.SUCCESS); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(com.android.tradefed.util.VtsPythonRunnerHelperTest.mPythonCmd, commandResult, com.android.tradefed.util.VtsPythonRunnerHelperTest.mTestTimeout); assertEquals(interruptMessage, null); assertEquals(commandResult.getStatus(), CommandStatus.SUCCESS); }",357ff557710901dd4c00ba51c823657a7a0118ba,2018-03-15 23:06:16,7
638866,harnesses_tradefed_tests_src_com_android_tradefed_util_VtsPythonRunnerHelperTest.java,,,@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); com.android.tradefed.build.IFolderBuildInfo buildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IFolderBuildInfo.class); org.easymock.EasyMock.replay(buildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(buildInfo) { @java.lang.Override protected com.android.tradefed.util.ProcessHelper createProcessHelper(java.lang.String[] cmd) { return mProcessHelper; } }; },b20713df9a8c6c8bf928806d651a2289e720c2c7,@org.junit.Before public void setUp() throws java.lang.Exception { com.android.tradefed.build.IFolderBuildInfo buildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IFolderBuildInfo.class); org.easymock.EasyMock.replay(buildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(buildInfo) { @java.lang.Override protected com.android.tradefed.util.ProcessHelper createProcessHelper(java.lang.String[] cmd) { return mProcessHelper; } }; },bf7a44aeb041c420a159eb6e0a6c2427162de8f8,2018-03-15 23:06:16,7
638866,harnesses_tradefed_tests_src_com_android_tradefed_util_VtsPythonRunnerHelperTest.java,,,"public void testGetPythonBinaryNormalOnLinux() { java.lang.String originalName = java.lang.System.getProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME); if (originalName.contains(com.android.tradefed.util.VtsPythonRunnerHelperTest.WINDOWS)) { java.lang.System.setProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME, com.android.tradefed.util.VtsPythonRunnerHelperTest.LINUX); } try { runTestPythonBinaryNormal(false); } catch (java.io.IOException e) { fail(); } finally { java.lang.System.setProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME, originalName); } }",b36cf39573e55595e5dfbdd1fb93193fa304fa49,"@org.junit.Test public void testGetPythonBinaryNormalOnLinux() { java.lang.String originalName = java.lang.System.getProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME); if (originalName.contains(com.android.tradefed.util.VtsPythonRunnerHelperTest.WINDOWS)) { java.lang.System.setProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME, com.android.tradefed.util.VtsPythonRunnerHelperTest.LINUX); } try { runTestPythonBinaryNormal(false); } catch (java.io.IOException e) { fail(); } finally { java.lang.System.setProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME, originalName); } }",1bfe9a8c323144fda71a891930502bb4a07861b5,2018-03-15 23:06:16,7
638866,harnesses_tradefed_tests_src_com_android_tradefed_util_VtsPythonRunnerHelperTest.java,,,"public void testProcessRunFailed() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.FAILED); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertEquals(interruptMessage, null); assertEquals(commandResult.getStatus(), CommandStatus.FAILED); }",faad59111e3b14eaf052b4c907ad7f8459a53b01,"@org.junit.Test public void testProcessRunFailed() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.FAILED); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(com.android.tradefed.util.VtsPythonRunnerHelperTest.mPythonCmd, commandResult, com.android.tradefed.util.VtsPythonRunnerHelperTest.mTestTimeout); assertEquals(interruptMessage, null); assertEquals(commandResult.getStatus(), CommandStatus.FAILED); }",d87a346404c990ced380bcb4e373671d33e563b5,2018-03-15 23:06:16,7
638866,harnesses_tradefed_src_com_android_tradefed_util_VtsPythonRunnerHelper.java,,,"public java.lang.String getPythonPath() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); java.lang.String separator = java.io.File.pathSeparator; if ((java.lang.System.getenv(com.android.tradefed.util.VtsPythonRunnerHelper.PYTHONPATH)) != null) { sb.append(separator); sb.append(java.lang.System.getenv(com.android.tradefed.util.VtsPythonRunnerHelper.PYTHONPATH)); } if ((mBuildInfo) != null) { com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper buildHelper = new com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper(mBuildInfo); java.io.File testDir = null; try { testDir = buildHelper.getTestsDir(); } catch (java.io.FileNotFoundException e) { } if (testDir != null) { sb.append(separator); java.lang.String testCaseDataDir = testDir.getAbsolutePath(); sb.append(testCaseDataDir); } else if ((mBuildInfo.getFile(com.android.tradefed.util.VtsPythonRunnerHelper.VTS)) != null) { sb.append(separator); sb.append(mBuildInfo.getFile(com.android.tradefed.util.VtsPythonRunnerHelper.VTS).getAbsolutePath()).append(""/..""); } if ((mBuildInfo.getFile(com.android.tradefed.util.VtsPythonRunnerHelper.PYTHONPATH)) != null) { sb.append(separator); sb.append(mBuildInfo.getFile(com.android.tradefed.util.VtsPythonRunnerHelper.PYTHONPATH).getAbsolutePath()); } } if ((java.lang.System.getenv(""ANDROID_BUILD_TOP"")) != null) { sb.append(separator); sb.append(java.lang.System.getenv(""ANDROID_BUILD_TOP"")).append(""/test""); } if ((sb.length()) == 0) { throw new java.lang.RuntimeException(""Could not find python path on host machine""); } return sb.substring(1); }",df6c7a4b9ad5939131cb16ebd36db72a7f7c51ec,public java.lang.String getPythonPath() { return mPythonPath; },0da2b58b7ef0fcdbaea7ef81962160e07d9f9cd6,2018-03-15 23:06:16,7
638866,harnesses_tradefed_tests_src_com_android_tradefed_testtype_VtsMultiDeviceTestTest.java,"private static com.android.tradefed.util.ProcessHelper createMockProcessHelper(com.android.tradefed.util.CommandStatus... status) { java.lang.Process process; try { process = new java.lang.ProcessBuilder(""true"").start(); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } java.util.LinkedList<com.android.tradefed.util.CommandStatus> nextStatus = new java.util.LinkedList<com.android.tradefed.util.CommandStatus>(java.util.Arrays.asList(status)); return new com.android.tradefed.util.ProcessHelper(process) { @java.lang.Override public com.android.tradefed.util.CommandStatus waitForProcess(long timeoutMsecs) throws com.android.tradefed.util.RunInterruptedException { com.android.tradefed.util.CommandStatus currentStatus = nextStatus.removeFirst(); if (currentStatus == null) { throw new com.android.tradefed.util.RunInterruptedException(); } return currentStatus; } @java.lang.Override public boolean isRunning() { return !(nextStatus.isEmpty()); } }; }",238cc1c09935ade997a00ae9fb0b7bad0c9d7b4d,"private com.android.tradefed.util.VtsPythonRunnerHelper createMockVtsPythonRunnerHelper(com.android.tradefed.util.CommandStatus status) { com.android.tradefed.build.IBuildInfo buildInfo = org.easymock.EasyMock.createMock(com.android.tradefed.build.IBuildInfo.class); return new com.android.tradefed.util.VtsPythonRunnerHelper(buildInfo) { @java.lang.Override public java.lang.String runPythonRunner(java.lang.String[] cmd, com.android.tradefed.util.CommandResult commandResult, long testTimeout) { assertCommand(cmd); try { createResult(cmd[3]); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } commandResult.setStatus(status); return null; } @java.lang.Override public java.lang.String getPythonBinary() { return (com.android.tradefed.testtype.VtsMultiDeviceTestTest.PYTHON_DIR) + (mPython); } @java.lang.Override public java.lang.String getPythonPath() { return ""python""; } }; }",2ddbcfe2068120cdad954aa8adf788a3f7f725b7,"private com.android.tradefed.util.VtsPythonRunnerHelper createMockVtsPythonRunnerHelper(com.android.tradefed.util.CommandStatus status) { com.android.tradefed.build.IBuildInfo buildInfo = com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockBuildInfo(); return new com.android.tradefed.util.VtsPythonRunnerHelper(buildInfo) { @java.lang.Override public java.lang.String runPythonRunner(java.lang.String[] cmd, com.android.tradefed.util.CommandResult commandResult, long testTimeout) { assertCommand(cmd); try { createResult(cmd[3]); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } commandResult.setStatus(status); return null; } @java.lang.Override public java.lang.String getPythonBinary() { return (com.android.tradefed.testtype.VtsMultiDeviceTestTest.PYTHON_DIR) + (com.android.tradefed.testtype.VtsMultiDeviceTestTest.PYTHON_BINARY); } @java.lang.Override public java.lang.String getPythonPath() { return com.android.tradefed.testtype.VtsMultiDeviceTestTest.PYTHON_PATH; } }; }",82c4b9fe3cba95c86a9a3b15ee66eb839f5035b6,2018-03-15 23:06:16,7
638866,harnesses_tradefed_tests_src_com_android_tradefed_testtype_VtsMultiDeviceTestTest.java,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mMockInvocationListener = org.easymock.EasyMock.createMock(com.android.tradefed.result.ITestInvocationListener.class); mProcessHelper = null; mPython = ""python""; mTest = new com.android.tradefed.testtype.VtsMultiDeviceTest() { @java.lang.Override protected com.android.tradefed.util.ProcessHelper createProcessHelper(java.lang.String[] cmd) { assertCommand(cmd); try { createResult(cmd[3]); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } return mProcessHelper; } }; mTest.setBuild(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockBuildInfo()); mTest.setTestCasePath(com.android.tradefed.testtype.VtsMultiDeviceTestTest.TEST_CASE_PATH); mTest.setTestConfigPath(VtsMultiDeviceTest.DEFAULT_TESTCASE_CONFIG_PATH); }",92266df5e3d3dbc070e4f054c0c02659c3982b1a,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mMockInvocationListener = org.easymock.EasyMock.createMock(com.android.tradefed.result.ITestInvocationListener.class); mPython = ""python""; mTest = new com.android.tradefed.testtype.VtsMultiDeviceTest() { @java.lang.Override protected void updateVtsRunnerTestConfig(org.json.JSONObject jsonObject) { return; } }; mTest.setBuild(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockBuildInfo()); mTest.setTestCasePath(com.android.tradefed.testtype.VtsMultiDeviceTestTest.TEST_CASE_PATH); mTest.setTestConfigPath(VtsMultiDeviceTest.DEFAULT_TESTCASE_CONFIG_PATH); }",c3e83b51438cde17be064dca62ed9f4294f154a3,@org.junit.Before public void setUp() throws java.lang.Exception { mMockInvocationListener = org.easymock.EasyMock.createMock(com.android.tradefed.result.ITestInvocationListener.class); mTest = new com.android.tradefed.testtype.VtsMultiDeviceTest() { @java.lang.Override protected void updateVtsRunnerTestConfig(org.json.JSONObject jsonObject) { return; } @java.lang.Override protected com.android.tradefed.util.VtsPythonRunnerHelper createVtsPythonRunnerHelper() { return mVtsPythonRunnerHelper; } }; mTest.setBuild(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockBuildInfo()); mTest.setTestCasePath(com.android.tradefed.testtype.VtsMultiDeviceTestTest.TEST_CASE_PATH); mTest.setTestConfigPath(VtsMultiDeviceTest.DEFAULT_TESTCASE_CONFIG_PATH); },2da594dcd6f09de6db47d4584178466600d7c2bf,2018-03-15 23:06:16,7
638866,harnesses_tradefed_tests_src_com_android_tradefed_testtype_VtsMultiDeviceTestTest.java,@java.lang.Override public boolean isRunning() { return !(nextStatus.isEmpty()); },0b01bfea2a95cdee398327b46ba276258d82ec8a,"@java.lang.Override public java.lang.String getPythonPath() { return ""python""; }",fcc2474f0d595feae08349ec19ca76b3429cd4d7,@java.lang.Override public java.lang.String getPythonPath() { return com.android.tradefed.testtype.VtsMultiDeviceTestTest.PYTHON_PATH; },e9b9837c78a2507223d0663cecddf4f635f63403,2018-03-15 23:06:16,7
638866,harnesses_tradefed_tests_src_com_android_tradefed_util_VtsPythonRunnerHelperTest.java,,,"public void testGetPythonBinaryNullBuildInfo() { com.android.tradefed.util.CommandResult findPythonresult = new com.android.tradefed.util.CommandResult(); findPythonresult.setStatus(CommandStatus.SUCCESS); findPythonresult.setStdout(""/user/bin/python""); com.android.tradefed.util.IRunUtil runUtil = createMockRunUtil(findPythonresult); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(null); mVtsPythonRunnerHelper.setRunUtil(runUtil); java.lang.String pythonBinary = mVtsPythonRunnerHelper.getPythonBinary(); assertEquals(pythonBinary, ""/user/bin/python""); }",ee50c114ff5562d924c0e2b063bb4a2dca73c216,"@org.junit.Test public void testGetPythonBinaryNullBuildInfo() { com.android.tradefed.util.CommandResult findPythonresult = new com.android.tradefed.util.CommandResult(); findPythonresult.setStatus(CommandStatus.SUCCESS); findPythonresult.setStdout(""/user/bin/python""); com.android.tradefed.util.IRunUtil runUtil = createMockRunUtil(findPythonresult); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(null); mVtsPythonRunnerHelper.setRunUtil(runUtil); java.lang.String pythonBinary = mVtsPythonRunnerHelper.getPythonBinary(); assertEquals(pythonBinary, ""/user/bin/python""); }",744bc2ad0c6632bf5ff85d6fc3af68bb75b9e3ff,2018-03-15 23:06:16,7
638866,harnesses_tradefed_tests_src_com_android_tradefed_util_VtsPythonRunnerHelperTest.java,,,"public void testProcessRunInterrupted() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(null, true); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertFalse((interruptMessage == null)); assertEquals(commandResult.getStatus(), CommandStatus.TIMED_OUT); }",c9bcbad246e01747a2f9654bf65ac55a113cd9e9,"@org.junit.Test public void testProcessRunInterrupted() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(null, true); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(com.android.tradefed.util.VtsPythonRunnerHelperTest.mPythonCmd, commandResult, com.android.tradefed.util.VtsPythonRunnerHelperTest.mTestTimeout); assertNotEquals(interruptMessage, null); assertEquals(commandResult.getStatus(), CommandStatus.TIMED_OUT); }",839b4e4c5ed164e5ad92ff1a1c3520d158397459,2018-03-15 23:06:16,7
638866,harnesses_tradefed_tests_src_com_android_tradefed_util_VtsPythonRunnerHelperTest.java,,,"public void runTestPythonBinaryNormal(boolean isWindows) throws java.io.IOException { java.lang.String python = (isWindows) ? ""python.exe"" : ""python""; java.lang.String binDir = (isWindows) ? ""Scripts"" : ""bin""; java.io.File testDir = com.android.tradefed.util.FileUtil.createTempDir(""testVirtualEnv""); java.io.File testPython = new java.io.File(testDir, ((binDir + (java.io.File.separator)) + python)); testPython.getParentFile().mkdirs(); testPython.createNewFile(); com.android.tradefed.log.LogUtil.CLog.i((""creating test file: "" + (testPython.getAbsolutePath()))); com.android.tradefed.build.IBuildInfo mockBuildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IBuildInfo.class); org.easymock.EasyMock.expect(mockBuildInfo.getFile(org.easymock.EasyMock.eq(""VIRTUALENVPATH""))).andReturn(testDir).atLeastOnce(); org.easymock.EasyMock.replay(mockBuildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(mockBuildInfo); java.lang.String pythonBinary = mVtsPythonRunnerHelper.getPythonBinary(); assertEquals(pythonBinary, testPython.getAbsolutePath()); com.android.tradefed.util.FileUtil.recursiveDelete(testDir); }",207c974d1c406718f9d4fe905c1e61367de6c873,"public void runTestPythonBinaryNormal(boolean isWindows) throws java.io.IOException { java.lang.String python = (isWindows) ? ""python.exe"" : ""python""; java.lang.String binDir = (isWindows) ? ""Scripts"" : ""bin""; java.io.File testDir = com.android.tradefed.util.FileUtil.createTempDir(""testVirtualEnv""); java.io.File testPython = new java.io.File(testDir, ((binDir + (java.io.File.separator)) + python)); testPython.getParentFile().mkdirs(); testPython.createNewFile(); com.android.tradefed.log.LogUtil.CLog.i((""creating test file: "" + (testPython.getAbsolutePath()))); com.android.tradefed.build.IBuildInfo mockBuildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IBuildInfo.class); org.easymock.EasyMock.expect(mockBuildInfo.getFile(org.easymock.EasyMock.eq(""VIRTUALENVPATH""))).andReturn(testDir).atLeastOnce(); org.easymock.EasyMock.replay(mockBuildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(mockBuildInfo); java.lang.String pythonBinary = mVtsPythonRunnerHelper.getPythonBinary(); assertEquals(pythonBinary, testPython.getAbsolutePath()); com.android.tradefed.util.FileUtil.recursiveDelete(testDir); org.easymock.EasyMock.verify(mockBuildInfo); }",2c490bb4161c1d4e441d6f1fbf37c8b2ffe42a49,2018-03-15 23:06:16,7
639000,src_com_android_bluetooth_hearingaid_HearingAidService.java,@java.lang.Override public void setVolume(int volume) { },f3efe8d1107e18ff54cf5633d8ad826e7f4b5f37,@java.lang.Override public void setVolume(int volume) { volume = ((volume * 512) / 100) - 128; },1f02367a5ed163d32313353262afb74dfcdc7ff3,@java.lang.Override public void setVolume(int volume) { },f3efe8d1107e18ff54cf5633d8ad826e7f4b5f37,2018-03-15 23:23:44,17
639000,src_com_android_bluetooth_hearingaid_HearingAidService.java,"java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); return new java.util.ArrayList<>(); }",4d6d33037aaf1f8aedbc03af6e3a7f098de45a2e,"java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); java.util.Set<android.bluetooth.BluetoothDevice> bondedDevices = mAdapter.getBondedDevices(); for (android.bluetooth.BluetoothDevice device : bondedDevices) { android.os.ParcelUuid[] featureUuids = device.getUuids(); if (!(android.bluetooth.BluetoothUuid.isUuidPresent(featureUuids, BluetoothUuid.HearingAid))) { continue; } int connectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm != null) { connectionState = sm.getConnectionState(); } for (int i = 0; i < (states.length); i++) { if (connectionState == (states[i])) { devices.add(device); } } } return devices; } }",e9c3edf313813b6168a3e7d59b6146b812754b23,"java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<>(); java.util.Set<android.bluetooth.BluetoothDevice> bondedDevices = mAdapter.getBondedDevices(); for (android.bluetooth.BluetoothDevice device : bondedDevices) { android.os.ParcelUuid[] featureUuids = device.getUuids(); if (!(android.bluetooth.BluetoothUuid.isUuidPresent(featureUuids, BluetoothUuid.HearingAid))) { continue; } int connectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm != null) { connectionState = sm.getConnectionState(); } for (int state : states) { if (connectionState == state) { devices.add(device); } } } return devices; } }",f2cabab619429afabf073672c9bce65fd7607ad1,2018-03-15 23:23:44,17
639000,src_com_android_bluetooth_hearingaid_HearingAidService.java,"synchronized boolean isHearingAidPlaying(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""isHearingAidPlaying("" + device) + "")"")); } throw new java.lang.IllegalStateException(""Implement me""); }",db58c0337850b3bdf96b5b5d32376def48d49b93,"private com.android.bluetooth.hearingaid.HearingAidStateMachine getOrCreateStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""getOrCreateStateMachine failed: device cannot be null""); return null; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm != null) { return sm; } if ((mStateMachines.size()) > (com.android.bluetooth.hearingaid.HearingAidService.MAX_HEARING_AID_STATE_MACHINES)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""Maximum number of HearingAid state machines reached: "" + (com.android.bluetooth.hearingaid.HearingAidService.MAX_HEARING_AID_STATE_MACHINES))); return null; } if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""Creating a new state machine for "" + device)); } sm = com.android.bluetooth.hearingaid.HearingAidStateMachine.make(device, this, mStateMachinesThread.getLooper()); mStateMachines.put(device, sm); return sm; } }",ed21a7e501d6ac378e8d38ef0d330a4e65c40447,"private com.android.bluetooth.hearingaid.HearingAidStateMachine getOrCreateStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""getOrCreateStateMachine failed: device cannot be null""); return null; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm != null) { return sm; } if ((mStateMachines.size()) >= (com.android.bluetooth.hearingaid.HearingAidService.MAX_HEARING_AID_STATE_MACHINES)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""Maximum number of HearingAid state machines reached: "" + (com.android.bluetooth.hearingaid.HearingAidService.MAX_HEARING_AID_STATE_MACHINES))); return null; } if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""Creating a new state machine for "" + device)); } sm = com.android.bluetooth.hearingaid.HearingAidStateMachine.make(device, this, mStateMachinesThread.getLooper()); mStateMachines.put(device, sm); return sm; } }",4f619e19c02bc004a2960c415a528082814f28bf,2018-03-15 23:23:44,17
640686,core_java_android_bluetooth_BluetoothAdapter.java,public android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser() { if (!(getLeAccess())) { return null; } synchronized(mLock) { if ((android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser) == null) { android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser = new android.bluetooth.le.BluetoothLeAdvertiser(mManagerService); } } return android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser; },84d084b3aaf92883b89a47125911998a7ff30606,"public android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser() { if (!(getLeAccess())) { return null; } if ((!(isMultipleAdvertisementSupported())) && (!(isPeripheralModeSupported()))) { android.util.Log.e(android.bluetooth.BluetoothAdapter.TAG, ""Bluetooth LE advertising not supported""); return null; } synchronized(mLock) { if ((android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser) == null) { android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser = new android.bluetooth.le.BluetoothLeAdvertiser(mManagerService); } } return android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser; }",346187a42bbb454666e539c89398b0f38f125187,"public android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser() { if (!(getLeAccess())) { return null; } if (!(isMultipleAdvertisementSupported())) { android.util.Log.e(android.bluetooth.BluetoothAdapter.TAG, ""Bluetooth LE advertising not supported""); return null; } synchronized(mLock) { if ((android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser) == null) { android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser = new android.bluetooth.le.BluetoothLeAdvertiser(mManagerService); } } return android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser; }",32ca8b9a3c9a0f8f305b05eb8384deca48024983,2018-03-15 23:50:47,2
633606,src_com_android_bluetooth_hearingaid_HearingAidNativeInterface.java,,,"private void onDeviceLoaded(byte capabilities, byte sinkId, byte[] address) { com.android.bluetooth.hearingaid.HearingAidStackEvent event = new com.android.bluetooth.hearingaid.HearingAidStackEvent(HearingAidStackEvent.EVENT_TYPE_DEVICE_LOADED); event.device = getDevice(address); event.valueInt1 = capabilities; event.valueInt2 = sinkId; if (com.android.bluetooth.hearingaid.HearingAidNativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidNativeInterface.TAG, (""onAudioStateChanged: "" + event)); } sendMessageToService(event); }",1b1fd95b09f231466617b166694fa5510e6c8183,"private void onDeviceAvailable(byte capabilities, long hiSyncId, byte[] address) { com.android.bluetooth.hearingaid.HearingAidStackEvent event = new com.android.bluetooth.hearingaid.HearingAidStackEvent(HearingAidStackEvent.EVENT_TYPE_DEVICE_AVAILABLE); event.device = getDevice(address); event.valueInt1 = capabilities; event.valueLong2 = hiSyncId; if (com.android.bluetooth.hearingaid.HearingAidNativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidNativeInterface.TAG, (""onDeviceAvailable: "" + event)); } sendMessageToService(event); }",37430b5623aaa7f7595f876f6df8075c7740ed21,2018-03-15 23:51:34,34
633606,src_com_android_bluetooth_hearingaid_HearingAidNativeInterface.java,,,public boolean disconnectHearingAid(android.bluetooth.BluetoothDevice device) { return disconnectHearingAidNative(getByteAddress(device)); },6dc55cfc72c73bea64ee846abaab2422fb932cee,@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean disconnectHearingAid(android.bluetooth.BluetoothDevice device) { return disconnectHearingAidNative(getByteAddress(device)); },27759bd951efaf8ee17a46318b078df386ad3cb8,2018-03-15 23:51:34,34
633606,src_com_android_bluetooth_hearingaid_HearingAidNativeInterface.java,,,public static void setVolume(int volume) { com.android.bluetooth.hearingaid.HearingAidNativeInterface.setVolumeNative(volume); },5542d50f7b07ca1d5a482d0eeca499d381b9d4df,@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public void setVolume(int volume) { setVolumeNative(volume); },b1632923208a72f450e33060771a3ec776a984d8,2018-03-15 23:51:34,34
633606,src_com_android_bluetooth_hearingaid_HearingAidService.java,"@java.lang.Override protected boolean start() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""start()""); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) != null) { throw new java.lang.IllegalStateException(""start() called twice""); } mAdapter = java.util.Objects.requireNonNull(android.bluetooth.BluetoothAdapter.getDefaultAdapter(), ""BluetoothAdapter cannot be null when HearingAidService starts""); mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapterService(), ""AdapterService cannot be null when HearingAidService starts""); mStateMachines.clear(); mStateMachinesThread = new android.os.HandlerThread(""HearingAidService.StateMachines""); mStateMachinesThread.start(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.BondStateChangedReceiver(); registerReceiver(mBondStateChangedReceiver, filter); filter = new android.content.IntentFilter(); filter.addAction(BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); mConnectionStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(this); setActiveDevice(null); return true; }",33e17dc33e9272c0a715110614045c0fd5591ffd,"@java.lang.Override protected boolean start() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""start()""); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) != null) { throw new java.lang.IllegalStateException(""start() called twice""); } mAdapter = java.util.Objects.requireNonNull(android.bluetooth.BluetoothAdapter.getDefaultAdapter(), ""BluetoothAdapter cannot be null when HearingAidService starts""); mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapterService(), ""AdapterService cannot be null when HearingAidService starts""); mHearingAidNativeInterface = java.util.Objects.requireNonNull(com.android.bluetooth.hearingaid.HearingAidNativeInterface.getInstance(), ""HearingAidNativeInterface cannot be null when HearingAidService starts""); mStateMachines.clear(); mStateMachinesThread = new android.os.HandlerThread(""HearingAidService.StateMachines""); mStateMachinesThread.start(); mHearingAidNativeInterface.init(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.BondStateChangedReceiver(); registerReceiver(mBondStateChangedReceiver, filter); filter = new android.content.IntentFilter(); filter.addAction(BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); mConnectionStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(this); setActiveDevice(null); return true; }",44b632a2d3eb9579b2f6fc3e988b93e7e8d63a41,"@java.lang.Override protected boolean start() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""start()""); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) != null) { throw new java.lang.IllegalStateException(""start() called twice""); } mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapterService(), ""AdapterService cannot be null when HearingAidService starts""); mHearingAidNativeInterface = java.util.Objects.requireNonNull(com.android.bluetooth.hearingaid.HearingAidNativeInterface.getInstance(), ""HearingAidNativeInterface cannot be null when HearingAidService starts""); mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); java.util.Objects.requireNonNull(mAudioManager, ""AudioManager cannot be null when HearingAidService starts""); mStateMachines.clear(); mStateMachinesThread = new android.os.HandlerThread(""HearingAidService.StateMachines""); mStateMachinesThread.start(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.BondStateChangedReceiver(); registerReceiver(mBondStateChangedReceiver, filter); filter = new android.content.IntentFilter(); filter.addAction(BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); mConnectionStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(this); mHearingAidNativeInterface.init(); return true; }",32554bb6c44ef31417d79b4dce7d5f7f09f88bae,2018-03-15 23:51:34,34
633606,src_com_android_bluetooth_a2dp_A2dpNativeInterface.java,"private void onCodecConfigChanged(byte[] address, android.bluetooth.BluetoothCodecConfig newCodecConfig, android.bluetooth.BluetoothCodecConfig[] codecsLocalCapabilities, android.bluetooth.BluetoothCodecConfig[] codecsSelectableCapabilities) { com.android.bluetooth.a2dp.A2dpStackEvent event = new com.android.bluetooth.a2dp.A2dpStackEvent(A2dpStackEvent.EVENT_TYPE_CODEC_CONFIG_CHANGED); event.device = getDevice(address); event.codecStatus = new android.bluetooth.BluetoothCodecStatus(newCodecConfig, codecsLocalCapabilities, codecsSelectableCapabilities); if (com.android.bluetooth.a2dp.A2dpNativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpNativeInterface.TAG, (""onCodecConfigChanged: "" + event)); } sendMessageToService(event); }",8e3967be0ce1b30389a58d3db050bc55bca10df7,"private void onDeviceAvailable(byte[] address, byte capabilities, long hiSyncId) { }",ea54bc45e42bd7ae744a9d9dcbada148885fb14d,"private void onCodecConfigChanged(byte[] address, android.bluetooth.BluetoothCodecConfig newCodecConfig, android.bluetooth.BluetoothCodecConfig[] codecsLocalCapabilities, android.bluetooth.BluetoothCodecConfig[] codecsSelectableCapabilities) { com.android.bluetooth.a2dp.A2dpStackEvent event = new com.android.bluetooth.a2dp.A2dpStackEvent(A2dpStackEvent.EVENT_TYPE_CODEC_CONFIG_CHANGED); event.device = getDevice(address); event.codecStatus = new android.bluetooth.BluetoothCodecStatus(newCodecConfig, codecsLocalCapabilities, codecsSelectableCapabilities); if (com.android.bluetooth.a2dp.A2dpNativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpNativeInterface.TAG, (""onCodecConfigChanged: "" + event)); } sendMessageToService(event); }",8e3967be0ce1b30389a58d3db050bc55bca10df7,2018-03-15 23:51:34,34
633606,src_com_android_bluetooth_hearingaid_HearingAidService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void messageFromNative(com.android.bluetooth.hearingaid.HearingAidStackEvent stackEvent) { java.util.Objects.requireNonNull(stackEvent.device, (""Device should never be null, event: "" + stackEvent)); if ((stackEvent.type) == (HearingAidStackEvent.EVENT_TYPE_DEVICE_LOADED)) { android.bluetooth.BluetoothDevice device = stackEvent.device; int capabilities = stackEvent.valueInt1; int hiSyncId = stackEvent.valueInt2; mDeviceCapabilitiesMap.put(device, capabilities); mDeviceHiSyncIdMap.put(device, ((long) (hiSyncId))); return; } synchronized(mStateMachines) { android.bluetooth.BluetoothDevice device = stackEvent.device; com.android.bluetooth.hearingaid.HearingAidStateMachine sm = getOrCreateStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""Cannot process stack event: no state machine: "" + stackEvent)); return; } sm.sendMessage(HearingAidStateMachine.STACK_EVENT, stackEvent); } }",37b0d32d4f1fad2fe38a79af5c05b51070d5f6be,"void messageFromNative(com.android.bluetooth.hearingaid.HearingAidStackEvent stackEvent) { java.util.Objects.requireNonNull(stackEvent.device, (""Device should never be null, event: "" + stackEvent)); if ((stackEvent.type) == (HearingAidStackEvent.EVENT_TYPE_DEVICE_AVAILABLE)) { android.bluetooth.BluetoothDevice device = stackEvent.device; int capabilities = stackEvent.valueInt1; long hiSyncId = stackEvent.valueLong2; mDeviceCapabilitiesMap.put(device, capabilities); mDeviceHiSyncIdMap.put(device, hiSyncId); return; } synchronized(mStateMachines) { android.bluetooth.BluetoothDevice device = stackEvent.device; com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm == null) { if ((stackEvent.type) == (HearingAidStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED)) { switch (stackEvent.valueInt1) { case HearingAidStackEvent.CONNECTION_STATE_CONNECTED : case HearingAidStackEvent.CONNECTION_STATE_CONNECTING : sm = getOrCreateStateMachine(device); break; default : break; } } } if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""Cannot process stack event: no state machine: "" + stackEvent)); return; } sm.sendMessage(HearingAidStateMachine.STACK_EVENT, stackEvent); } }",c57f40a9ade9c89817ca0fbf58be02e2e89f56e3,2018-03-15 23:51:34,34
633606,src_com_android_bluetooth_hearingaid_HearingAidService.java,"@java.lang.Override protected boolean stop() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""stop()""); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""stop() called before start()""); return true; } setActiveDevice(null); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(null); unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; synchronized(mStateMachines) { for (com.android.bluetooth.hearingaid.HearingAidStateMachine sm : mStateMachines.values()) { sm.doQuit(); sm.cleanup(); } mStateMachines.clear(); } if ((mStateMachinesThread) != null) { mStateMachinesThread.quitSafely(); mStateMachinesThread = null; } mAdapterService = null; mAdapter = null; return true; }",4eae75e3f2cb3db4ff4e634c78e663f16b32bc1e,"@java.lang.Override protected boolean stop() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""stop()""); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""stop() called before start()""); return true; } setActiveDevice(null); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(null); unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; mHearingAidNativeInterface.cleanup(); mHearingAidNativeInterface = null; synchronized(mStateMachines) { for (com.android.bluetooth.hearingaid.HearingAidStateMachine sm : mStateMachines.values()) { sm.doQuit(); sm.cleanup(); } mStateMachines.clear(); } if ((mStateMachinesThread) != null) { mStateMachinesThread.quitSafely(); mStateMachinesThread = null; } mHearingAidNativeInterface = null; mAdapterService = null; mAdapter = null; return true; }",b3dcbda065195797e131a054df30c767851ef65a,"@java.lang.Override protected boolean stop() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""stop()""); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""stop() called before start()""); return true; } mHearingAidNativeInterface.cleanup(); mHearingAidNativeInterface = null; com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(null); unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; synchronized(mStateMachines) { for (com.android.bluetooth.hearingaid.HearingAidStateMachine sm : mStateMachines.values()) { sm.doQuit(); sm.cleanup(); } mStateMachines.clear(); } if ((mStateMachinesThread) != null) { mStateMachinesThread.quitSafely(); mStateMachinesThread = null; } mAudioManager = null; mHearingAidNativeInterface = null; mAdapterService = null; return true; }",16f6cc9e7bbb545d7eb999bee4a64ad9df20ac59,2018-03-15 23:51:34,34
633606,src_com_android_bluetooth_hearingaid_HearingAidService.java,"private synchronized boolean isActiveDevice(android.bluetooth.BluetoothDevice device) { synchronized(mStateMachines) { return (device != null) && (java.util.Objects.equals(device, mActiveDevice)); } }",ebf47037e914f9c650e7b85fa0e5d7bb61bbd095,private boolean isActiveDevice(android.bluetooth.BluetoothDevice device) { synchronized(mStateMachines) { return (device != null) && (mActiveDevices.contains(device)); } },a1eb8c528584eca7faf01cf644b112951b1c4743,void setVolume(int volume) { mHearingAidNativeInterface.setVolume(volume); },4197e0bb3ca2cec30e8f1cdfbcdb523019850b3b,2018-03-15 23:51:34,34
633606,src_com_android_bluetooth_hearingaid_HearingAidNativeInterface.java,,,"private void sendMessageToService(com.android.bluetooth.hearingaid.HearingAidStackEvent event) { com.android.bluetooth.hearingaid.HearingAidService service = com.android.bluetooth.hearingaid.HearingAidService.getHearingAidService(); if (service != null) { service.messageFromNative(event); } else { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidNativeInterface.TAG, (""Event ignored, service not available: "" + event)); } }",ea6407bafbfa98d2457ae4df1f0e0417a774be4a,"private void sendMessageToService(com.android.bluetooth.hearingaid.HearingAidStackEvent event) { com.android.bluetooth.hearingaid.HearingAidService service = com.android.bluetooth.hearingaid.HearingAidService.getHearingAidService(); if (service != null) { service.messageFromNative(event); } else { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidNativeInterface.TAG, (""Event ignored, service not available: "" + event)); } }",108ae6d327044af48c7bf66ba328fdae2a78085b,2018-03-15 23:51:34,34
633606,src_com_android_bluetooth_hearingaid_HearingAidStackEvent.java,,,"@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder result = new java.lang.StringBuilder(); result.append((""HearingAidStackEvent {type:"" + (com.android.bluetooth.hearingaid.HearingAidStackEvent.eventTypeToString(type)))); result.append(("", device:"" + (device))); result.append(("", value1:"" + (com.android.bluetooth.hearingaid.HearingAidStackEvent.eventTypeValueIntToString(type, valueInt1)))); result.append(("", value2:"" + (com.android.bluetooth.hearingaid.HearingAidStackEvent.eventTypeValueIntToString(type, valueInt2)))); if ((codecStatus) != null) { result.append(("", codecStatus:"" + (codecStatus))); } result.append(""}""); return result.toString(); }",0f73cb82773fbaf5f2977bd2af1941e7540941fc,"@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder result = new java.lang.StringBuilder(); result.append((""HearingAidStackEvent {type:"" + (com.android.bluetooth.hearingaid.HearingAidStackEvent.eventTypeToString(type)))); result.append(("", device:"" + (device))); result.append(("", value1:"" + (valueInt1))); result.append(("", value2:"" + (valueLong2))); result.append(""}""); return result.toString(); }",cfb2c5618c34a3af6b7010450c80f0dec7450d7c,2018-03-15 23:51:34,34
633606,src_com_android_bluetooth_hearingaid_HearingAidStackEvent.java,,,"private static java.lang.String eventTypeToString(int type) { switch (type) { case com.android.bluetooth.hearingaid.HearingAidStackEvent.EVENT_TYPE_NONE : return ""EVENT_TYPE_NONE""; case com.android.bluetooth.hearingaid.HearingAidStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED : return ""EVENT_TYPE_CONNECTION_STATE_CHANGED""; case com.android.bluetooth.hearingaid.HearingAidStackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED : return ""EVENT_TYPE_AUDIO_STATE_CHANGED""; case com.android.bluetooth.hearingaid.HearingAidStackEvent.EVENT_TYPE_CODEC_CONFIG_CHANGED : return ""EVENT_TYPE_CODEC_CONFIG_CHANGED""; default : return ""EVENT_TYPE_UNKNOWN:"" + type; } }",8269d5e6b2c6d77d30d83a22928d604d7d0ad968,"private static java.lang.String eventTypeToString(int type) { switch (type) { case com.android.bluetooth.hearingaid.HearingAidStackEvent.EVENT_TYPE_NONE : return ""EVENT_TYPE_NONE""; case com.android.bluetooth.hearingaid.HearingAidStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED : return ""EVENT_TYPE_CONNECTION_STATE_CHANGED""; case com.android.bluetooth.hearingaid.HearingAidStackEvent.EVENT_TYPE_DEVICE_AVAILABLE : return ""EVENT_TYPE_DEVICE_AVAILABLE""; default : return ""EVENT_TYPE_UNKNOWN:"" + type; } }",493fb0c3d7c0cbbfc4d0b441c7154c6850ab906b,2018-03-15 23:51:34,34
633606,src_com_android_bluetooth_hearingaid_HearingAidService.java,"public synchronized boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); return false; }",c4431babe7850fde60bf01ffb59dc6d81cf51850,"public synchronized boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (!(mActiveDevices.contains(device))) { return true; } return false; }",18ef4410b85cf781e475b431eae769c00417e19a,void setActiveDevice(android.bluetooth.BluetoothDevice device) { if (device == null) { for (android.bluetooth.BluetoothDevice smDevice : mStateMachines.keySet()) { mStateMachines.get(smDevice).sendMessage(HearingAidStateMachine.DISCONNECT); } } },e7c3209ff385faeec4a83b97d57e0f5e3e096720,2018-03-15 23:51:34,34
633606,src_com_android_bluetooth_hearingaid_HearingAidNativeInterface.java,,,public boolean connectHearingAid(android.bluetooth.BluetoothDevice device) { return connectHearingAidNative(getByteAddress(device)); },60e34c57e9db80ced4dbbea30a58fc7925dd119a,@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean connectHearingAid(android.bluetooth.BluetoothDevice device) { return connectHearingAidNative(getByteAddress(device)); },aadda5d578972aef5f041c7ca0463cc13fc4ce1b,2018-03-15 23:51:34,34
633606,src_com_android_bluetooth_hearingaid_HearingAidNativeInterface.java,,,private static native void setVolumeNative(int volume);,4630d2beffd3943b393b09c9da29af6990f6634c,private native void setVolumeNative(int volume);,130d6e3627abc91aea786e85b078ef3854010746,2018-03-15 23:51:34,34
633606,src_com_android_bluetooth_hearingaid_HearingAidService.java,"boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""disconnect(): "" + device)); } int customerId = mDeviceMap.get(device); for (android.bluetooth.BluetoothDevice storedDevice : mDeviceMap.keySet()) { if ((mDeviceMap.get(storedDevice)) != customerId) { continue; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""Ignored disconnect request for "" + device) + "" : no state machine"")); continue; } sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } return true; }",4106f6114c90073f6a7e32de240bcd0abe9cad8f,"boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""disconnect(): "" + device)); } long customerId = mDeviceHiSyncIdMap.get(device); for (android.bluetooth.BluetoothDevice storedDevice : mDeviceHiSyncIdMap.keySet()) { if ((mDeviceHiSyncIdMap.get(storedDevice)) != customerId) { continue; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""Ignored disconnect request for "" + device) + "" : no state machine"")); continue; } sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } return true; }",5406e76dd8b356dfd110f196cdd494263bb13c43,"boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""disconnect(): "" + device)); } long hiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""Ignored disconnect request for "" + device) + "" : no state machine"")); } else { sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } if (hiSyncId == (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID)) { return true; } for (android.bluetooth.BluetoothDevice storedDevice : mDeviceHiSyncIdMap.keySet()) { if (((mDeviceHiSyncIdMap.get(storedDevice)) != hiSyncId) || (storedDevice.equals(device))) { continue; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(storedDevice); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""Ignored disconnect request for "" + device) + "" : no state machine"")); continue; } sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } return true; }",a78a0093e65f7e3e0432b2425e76fd235bdbc1b7,2018-03-15 23:51:34,34
640733,src_com_android_bluetooth_newavrcp_MediaPlayerList.java,,,"void dump(java.lang.StringBuilder sb) { sb.append(""List of players: \n""); for (java.lang.String key : mMediaPlayerIds.keySet()) { if ((mMediaPlayersIds.get(key)) == (mActivePlayerId)) { sb.append(""*""); } sb.append(((((""Player "" + (mMediaPlayerIds.get(key))) + "": "") + key) + ""\n"")); } sb.append(""\n""); sb.append(((""List of media controllers size: "" + (mMediaPlayers.size())) + ""\n"")); for (com.android.bluetooth.avrcp.MediaPlayerWrapper player : mMediaPlayers.values()) { player.dump(sb); } sb.append(""\n""); sb.append(((""Browsable Player list size: "" + (mBrowsablePlayers.size())) + ""\n"")); for (com.android.bluetooth.avrcp.BrowsedPlayerWrapper player : mBrowsablePlayers.values()) { player.dump(sb); } }",d6c5ff4f8ecd7bc06dfe3aa9819fefa0d3cb60cf,"void dump(java.lang.StringBuilder sb) { sb.append(""List of players:\n""); for (java.lang.String key : mMediaPlayerIds.keySet()) { if ((mMediaPlayerIds.get(key)) == (mActivePlayerId)) { sb.append(""*""); } sb.append(((((""Player "" + (mMediaPlayerIds.get(key))) + "": "") + key) + ""\n"")); } sb.append(""\n""); sb.append(((""List of media controllers size: "" + (mMediaPlayers.size())) + ""\n"")); for (com.android.bluetooth.avrcp.MediaPlayerWrapper player : mMediaPlayers.values()) { player.dump(sb); } sb.append(""\n""); sb.append(((""Browsable Player list size: "" + (mBrowsablePlayers.size())) + ""\n"")); for (com.android.bluetooth.avrcp.BrowsedPlayerWrapper player : mBrowsablePlayers.values()) { player.dump(sb); } }",3084516f3132337866965f3cec6d7466c4e9f30c,2018-03-16 08:02:29,8
640733,src_com_android_bluetooth_newavrcp_MediaPlayerList.java,,,"void removeMediaPlayer(int playerId) { if (!(mMediaPlayers.containsKey(playerId))) { com.android.bluetooth.avrcp.MediaPlayerList.e((""Trying to remove nonexistent media player: "" + playerId)); return; } if (playerId == (mActivePlayerId)) { getActivePlayer().unregisterCallback(); mActivePlayerId = 0; } com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = mMediaPlayers.get(playerId); com.android.bluetooth.avrcp.MediaPlayerList.d((""Removing media player "" + (wrapper.getPackageName()))); mMediaPlayerIds.remove(wrapper.getPackageName()); mMediaPlayers.remove(playerId); mMediaPlayers.get(playerId).cleanup(); }",8667f5d2bebc964c7d92bc0b0a70f9e5579823b3,"void removeMediaPlayer(int playerId) { if (!(mMediaPlayers.containsKey(playerId))) { com.android.bluetooth.avrcp.MediaPlayerList.e((""Trying to remove nonexistent media player: "" + playerId)); return; } if ((playerId == (mActivePlayerId)) && (playerId != (com.android.bluetooth.avrcp.MediaPlayerList.NO_ACTIVE_PLAYER))) { getActivePlayer().unregisterCallback(); mActivePlayerId = com.android.bluetooth.avrcp.MediaPlayerList.NO_ACTIVE_PLAYER; } com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = mMediaPlayers.get(playerId); com.android.bluetooth.avrcp.MediaPlayerList.d((""Removing media player "" + (wrapper.getPackageName()))); mMediaPlayerIds.remove(wrapper.getPackageName()); mMediaPlayers.remove(playerId); mMediaPlayers.get(playerId).cleanup(); }",295ae3e14ef1c511cc33252adc97610a7112135a,2018-03-16 08:02:29,8
640733,src_com_android_bluetooth_newavrcp_MediaPlayerList.java,,,"private void sendMediaUpdate(com.android.bluetooth.avrcp.MediaData data) { com.android.bluetooth.avrcp.MediaPlayerList.d(""sendMediaUpdate""); if ((mCallback) == null) { return; } if ((data.queue.size()) == 0) { android.util.Log.i(com.android.bluetooth.avrcp.MediaPlayerList.TAG, ""sendMediaUpdate: Creating a one item queue for a player with no queue""); data.queue.add(data.metadata); } mCallback.onMediaUpdated(data); }",170013e2cbe346d0a9b517f96c3fc33b533277d3,"private void sendMediaUpdate(com.android.bluetooth.avrcp.MediaData data) { com.android.bluetooth.avrcp.MediaPlayerList.d(""sendMediaUpdate""); if ((mCallback) == null) { return; } if ((data.queue.size()) == 0) { android.util.Log.i(com.android.bluetooth.avrcp.MediaPlayerList.TAG, ""sendMediaUpdate: Creating a one item queue for a player with no queue""); data.queue.add(data.metadata); } mCallback.run(data); }",42c2f7e5d0d752d0566a10251a6cc41849a3b7aa,2018-03-16 08:02:29,8
640733,src_com_android_bluetooth_newavrcp_MediaPlayerList.java,,,"void getFolderItems(int playerId, java.lang.String mediaId, com.android.bluetooth.avrcp.GetFolderItemsCallback cb) { com.android.bluetooth.avrcp.MediaPlayerList.d((((""getFolderItems(): playerId="" + playerId) + "", mediaId="") + mediaId)); if (mediaId.equals("""")) { getFolderItemsMediaPlayerList(cb); return; } if (!(mediaId.matches(""^\\d\\d.*$""))) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerList.TAG, (""getFolderItems: mediaId didn't match pattern: mediaId="" + mediaId)); } int playerIndex = java.lang.Integer.parseInt(mediaId.substring(0, 2)); java.lang.String itemId = mediaId.substring(2); if (mBrowsablePlayers.containsKey(playerIndex)) { com.android.bluetooth.avrcp.BrowsedPlayerWrapper wrapper = mBrowsablePlayers.get(playerIndex); if (itemId.equals("""")) { android.util.Log.i(com.android.bluetooth.avrcp.MediaPlayerList.TAG, (""Empty media id, getting the root for "" + (mMediaPlayerIds.get(playerIndex)))); itemId = wrapper.getRootId(); } wrapper.getFolderItems(itemId, ( status, id, results) -> { if (status != BrowsedPlayerWrapper.STATUS_SUCCESS) { cb.run(mediaId, new ArrayList<com.android.bluetooth.avrcp.ListItem>()); return; } java.lang.String playerPrefix = java.lang.String.format(""%02d"", playerIndex); for (com.android.bluetooth.avrcp.ListItem item : results) { if (item.isFolder) { item.folder.mediaId = playerPrefix.concat(item.folder.mediaId); } else { item.song.mediaId = playerPrefix.concat(item.song.mediaId); } } cb.run(mediaId, results); }); return; } else { cb.run(mediaId, new java.util.ArrayList<com.android.bluetooth.avrcp.ListItem>()); } }",9974cbe7010a7d51bcca5b6f7dfbc663da1f97d2,"void getFolderItems(int playerId, java.lang.String mediaId, com.android.bluetooth.avrcp.MediaPlayerList.GetFolderItemsCallback cb) { com.android.bluetooth.avrcp.MediaPlayerList.d((((""getFolderItems(): playerId="" + playerId) + "", mediaId="") + mediaId)); if (mediaId.equals("""")) { getFolderItemsMediaPlayerList(cb); return; } if (!(mediaId.matches(com.android.bluetooth.avrcp.MediaPlayerList.BROWSE_ID_PATTERN))) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerList.TAG, (""getFolderItems: mediaId didn't match pattern: mediaId="" + mediaId)); } int playerIndex = java.lang.Integer.parseInt(mediaId.substring(0, 2)); java.lang.String itemId = mediaId.substring(2); if (mBrowsablePlayers.containsKey(playerIndex)) { com.android.bluetooth.avrcp.BrowsedPlayerWrapper wrapper = mBrowsablePlayers.get(playerIndex); if (itemId.equals("""")) { android.util.Log.i(com.android.bluetooth.avrcp.MediaPlayerList.TAG, (""Empty media id, getting the root for "" + (wrapper.getPackageName()))); itemId = wrapper.getRootId(); } wrapper.getFolderItems(itemId, ( status, id, results) -> { if (status != BrowsedPlayerWrapper.STATUS_SUCCESS) { cb.run(mediaId, new ArrayList<com.android.bluetooth.avrcp.ListItem>()); return; } java.lang.String playerPrefix = java.lang.String.format(""%02d"", playerIndex); for (com.android.bluetooth.avrcp.ListItem item : results) { if (item.isFolder) { item.folder.mediaId = playerPrefix.concat(item.folder.mediaId); } else { item.song.mediaId = playerPrefix.concat(item.song.mediaId); } } cb.run(mediaId, results); }); return; } else { cb.run(mediaId, new java.util.ArrayList<com.android.bluetooth.avrcp.ListItem>()); } }",91621e46e08879d8ea4909b9be69579bd3c440dc,2018-03-16 08:02:29,8
640733,src_com_android_bluetooth_newavrcp_MediaPlayerList.java,,,int getCurrentPlayerId() { return 0; },5459fff09d6725fad5a75452999aa36334c46933,int getCurrentPlayerId() { return com.android.bluetooth.avrcp.MediaPlayerList.BLUETOOTH_PLAYER_ID; },9afc0275f0a12d3624ae0b9a04eacc78829f2cfc,2018-03-16 08:02:29,8
640733,src_com_android_bluetooth_newavrcp_MediaPlayerList.java,,,"void sendMediaKeyEvent(int key, int state) { com.android.bluetooth.avrcp.MediaPlayerList.d((((""sendMediaKeyEvent: key="" + key) + "" state="") + state)); int action = (state == 0) ? android.view.KeyEvent.ACTION_DOWN : android.view.KeyEvent.ACTION_UP; android.view.KeyEvent event = new android.view.KeyEvent(action, com.android.bluetooth.avrcp.Helpers.avrcpPassthroughToKeyCode(key)); mMediaSessionManager.dispatchMediaKeyEvent(event); }",43421708479fd605cb171a3b4645b6578ee31645,"void sendMediaKeyEvent(int key, int state) { com.android.bluetooth.avrcp.MediaPlayerList.d((((""sendMediaKeyEvent: key="" + key) + "" state="") + state)); int action = (state == 0) ? android.view.KeyEvent.ACTION_DOWN : android.view.KeyEvent.ACTION_UP; android.view.KeyEvent event = new android.view.KeyEvent(action, com.android.bluetooth.avrcp.AvrcpPassthrough.toKeyCode(key)); mMediaSessionManager.dispatchMediaKeyEvent(event); }",f6bd2b74115c3be3a6fbe7cb9e57c3a8ee65391a,2018-03-16 08:02:29,8
640733,src_com_android_bluetooth_newavrcp_MediaPlayerList.java,,,void onMediaUpdated(com.android.bluetooth.avrcp.MediaData data);,27b36e4f45fa6e2192979fe1753f962a0733c1a1,void run(com.android.bluetooth.avrcp.MediaData data);,9e91ce09cfa2ab88c6a98bccf466de874353435c,2018-03-16 08:02:29,8
640733,src_com_android_bluetooth_newavrcp_MediaPlayerList.java,,,"void getFolderItemsMediaPlayerList(com.android.bluetooth.avrcp.GetFolderItemsCallback cb) { com.android.bluetooth.avrcp.MediaPlayerList.d(""getFolderItemsMediaPlayerList: Sending Media Player list for root directory""); java.util.ArrayList<com.android.bluetooth.avrcp.ListItem> playerList = new java.util.ArrayList<com.android.bluetooth.avrcp.ListItem>(); for (com.android.bluetooth.avrcp.BrowsedPlayerWrapper player : mBrowsablePlayers.values()) { java.lang.String displayName = com.android.bluetooth.avrcp.Util.getDisplayName(mContext, player.getPackageName()); int id = mMediaPlayerIds.get(player.getPackageName()); com.android.bluetooth.avrcp.MediaPlayerList.d((""getFolderItemsMediaPlayerList: Adding player "" + displayName)); com.android.bluetooth.avrcp.Folder playerFolder = new com.android.bluetooth.avrcp.Folder(java.lang.String.format(""%02d"", id), false, displayName); playerList.add(new com.android.bluetooth.avrcp.ListItem(playerFolder)); } cb.run("""", playerList); return; }",305e5189a39a0fd7699debb4663d2fdd8eef6fb9,"void getFolderItemsMediaPlayerList(com.android.bluetooth.avrcp.MediaPlayerList.GetFolderItemsCallback cb) { com.android.bluetooth.avrcp.MediaPlayerList.d(""getFolderItemsMediaPlayerList: Sending Media Player list for root directory""); java.util.ArrayList<com.android.bluetooth.avrcp.ListItem> playerList = new java.util.ArrayList<com.android.bluetooth.avrcp.ListItem>(); for (com.android.bluetooth.avrcp.BrowsedPlayerWrapper player : mBrowsablePlayers.values()) { java.lang.String displayName = com.android.bluetooth.avrcp.Util.getDisplayName(mContext, player.getPackageName()); int id = mMediaPlayerIds.get(player.getPackageName()); com.android.bluetooth.avrcp.MediaPlayerList.d((""getFolderItemsMediaPlayerList: Adding player "" + displayName)); com.android.bluetooth.avrcp.Folder playerFolder = new com.android.bluetooth.avrcp.Folder(java.lang.String.format(""%02d"", id), false, displayName); playerList.add(new com.android.bluetooth.avrcp.ListItem(playerFolder)); } cb.run("""", playerList); return; }",22b6fc08c269d3163ea3a4429edcdbbf7d4f7fee,2018-03-16 08:02:29,8
640733,src_com_android_bluetooth_newavrcp_MediaPlayerList.java,,,"void getPlayerRoot(int playerId, com.android.bluetooth.avrcp.GetPlayerRootCallback cb) { cb.run(playerId, true, """", mBrowsablePlayers.size()); }",cdf57d6fd39d4ed3bc5db284acaebefdf7bcdd3f,"void getPlayerRoot(int playerId, com.android.bluetooth.avrcp.MediaPlayerList.GetPlayerRootCallback cb) { cb.run(playerId, true, """", mBrowsablePlayers.size()); }",efdaab9013a26df2a0e2a1c73963a9fecbe9392c,2018-03-16 08:02:29,8
640733,src_com_android_bluetooth_newavrcp_MediaPlayerList.java,,,"private void playNowPlayingItem(java.lang.String mediaId) { com.android.bluetooth.avrcp.MediaPlayerList.d((""playNowPlayingItem: mediaId="" + mediaId)); java.util.regex.Pattern regex = java.util.regex.Pattern.compile(""NowPlayingId([0-9]*)""); java.util.regex.Matcher m = regex.matcher(mediaId); if (!(m.find())) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerList.TAG, (""playNowPlayingItem: Couldn't match mediaId to pattern: mediaId="" + mediaId)); } long queueItemId = java.lang.Long.parseLong(m.group(1)); if ((getActivePlayer()) != null) { getActivePlayer().playItemFromQueue(queueItemId); } }",da3f01b772fdffe2b1c3a6dc07ee98a1bb45b391,"private void playNowPlayingItem(java.lang.String mediaId) { com.android.bluetooth.avrcp.MediaPlayerList.d((""playNowPlayingItem: mediaId="" + mediaId)); java.util.regex.Pattern regex = java.util.regex.Pattern.compile(com.android.bluetooth.avrcp.MediaPlayerList.NOW_PLAYING_ID_PATTERN); java.util.regex.Matcher m = regex.matcher(mediaId); if (!(m.find())) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerList.TAG, (""playNowPlayingItem: Couldn't match mediaId to pattern: mediaId="" + mediaId)); } long queueItemId = java.lang.Long.parseLong(m.group(1)); if ((getActivePlayer()) != null) { getActivePlayer().playItemFromQueue(queueItemId); } }",c268f1dcf8d9f941ab2c1370d13c76cc55334387,2018-03-16 08:02:29,8
640733,src_com_android_bluetooth_newavrcp_MediaPlayerList.java,,,"java.lang.String getCurrentMediaId() { final com.android.bluetooth.avrcp.MediaPlayerWrapper player = getActivePlayer(); if (player == null) return """"; final android.media.session.PlaybackState state = player.getCurrentMediaData().state; if ((state == null) || ((state.getActiveQueueItemId()) == (MediaSession.QueueItem.UNKNOWN_ID))) { com.android.bluetooth.avrcp.MediaPlayerList.d((""getCurrentMediaId: No active queue item Id: "" + state)); return """"; } return ""NowPlayingId"" + (state.getActiveQueueItemId()); }",68d8930d36d1d205ff13151cd729e436f9985562,"java.lang.String getCurrentMediaId() { final com.android.bluetooth.avrcp.MediaPlayerWrapper player = getActivePlayer(); if (player == null) return """"; final android.media.session.PlaybackState state = player.getCurrentMediaData().state; if ((state == null) || ((state.getActiveQueueItemId()) == (MediaSession.QueueItem.UNKNOWN_ID))) { com.android.bluetooth.avrcp.MediaPlayerList.d((""getCurrentMediaId: No active queue item Id: "" + state)); return """"; } return (Util.NOW_PLAYING_PREFIX) + (state.getActiveQueueItemId()); }",afdbfb905b8ed757b8703d33102c44230aa062ec,2018-03-16 08:02:29,8
640733,src_com_android_bluetooth_newavrcp_MediaPlayerList.java,,,"private void playFolderItem(java.lang.String mediaId) { com.android.bluetooth.avrcp.MediaPlayerList.d((""playFolderItem: mediaId="" + mediaId)); if (!(mediaId.matches(""^\\d\\d.*$""))) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerList.TAG, (""playFolderItem: mediaId didn't match pattern: mediaId="" + mediaId)); } int playerIndex = java.lang.Integer.parseInt(mediaId.substring(0, 2)); java.lang.String itemId = mediaId.substring(2); if (!(mBrowsablePlayers.containsKey(playerIndex))) { com.android.bluetooth.avrcp.MediaPlayerList.e((""playFolderItem: Do not have the a browsable player with ID "" + playerIndex)); return; } mBrowsablePlayers.get(playerIndex).playItem(itemId); }",451ad103fe91a2f17e59cb173b34fcbad76da90a,"private void playFolderItem(java.lang.String mediaId) { com.android.bluetooth.avrcp.MediaPlayerList.d((""playFolderItem: mediaId="" + mediaId)); if (!(mediaId.matches(com.android.bluetooth.avrcp.MediaPlayerList.BROWSE_ID_PATTERN))) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerList.TAG, (""playFolderItem: mediaId didn't match pattern: mediaId="" + mediaId)); } int playerIndex = java.lang.Integer.parseInt(mediaId.substring(0, 2)); java.lang.String itemId = mediaId.substring(2); if (!(mBrowsablePlayers.containsKey(playerIndex))) { com.android.bluetooth.avrcp.MediaPlayerList.e((""playFolderItem: Do not have the a browsable player with ID "" + playerIndex)); return; } mBrowsablePlayers.get(playerIndex).playItem(itemId); }",46520ead9dc098e062baff04b7057d6a972cfc94,2018-03-16 08:02:29,8
640733,src_com_android_bluetooth_newavrcp_MediaPlayerWrapper.java,"@java.lang.Override public void onMetadataChanged(android.media.MediaMetadata metadata) { if (!(isReady())) { android.util.Log.v(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ((mPackageName) + "" tried to update with incomplete metadata"")); return; } android.util.Log.v(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (((""onMetadataChanged(): "" + (mPackageName)) + "" : "") + (metadata.getDescription()))); if (!(metadata.equals(getMetadata()))) { com.android.bluetooth.avrcp.MediaPlayerWrapper.e(""The callback metadata doesn't match controller metadata""); } if (metadata.equals(mCurrentData.metadata)) { android.util.Log.w(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ((""onMetadataChanged(): "" + (mPackageName)) + "" tried to update with no new data"")); return; } trySendMediaUpdate(); }",b80aba2404df376c9d38e75625197e84263a183a,"@java.lang.Override public void onMetadataChanged(com.android.bluetooth.avrcp.MediaMetadata metadata) { if (!(isReady())) { android.util.Log.v(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ((mPackageName) + "" tried to update with incomplete metadata"")); return; } android.util.Log.v(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (((""onMetadataChanged(): "" + (mPackageName)) + "" : "") + (metadata.getDescription()))); if (!(metadata.equals(getMetadata()))) { com.android.bluetooth.avrcp.MediaPlayerWrapper.e(""The callback metadata doesn't match controller metadata""); } if (metadata.equals(mCurrentData.metadata)) { android.util.Log.w(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ((""onMetadataChanged(): "" + (mPackageName)) + "" tried to update with no new data"")); return; } trySendMediaUpdate(); }",6cb914082a0d081ba307c3351307f531381c521e,"@java.lang.Override public void onMetadataChanged(android.media.MediaMetadata metadata) { if (!(isReady())) { android.util.Log.v(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ((mPackageName) + "" tried to update with incomplete metadata"")); return; } android.util.Log.v(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (((""onMetadataChanged(): "" + (mPackageName)) + "" : "") + (metadata.getDescription()))); if (!(metadata.equals(getMetadata()))) { com.android.bluetooth.avrcp.MediaPlayerWrapper.e(""The callback metadata doesn't match controller metadata""); } if (metadata.equals(mCurrentData.metadata)) { android.util.Log.w(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ((""onMetadataChanged(): "" + (mPackageName)) + "" tried to update with no new data"")); return; } trySendMediaUpdate(); }",b80aba2404df376c9d38e75625197e84263a183a,2018-03-16 08:02:29,8
640733,src_com_android_bluetooth_newavrcp_MediaPlayerWrapper.java,protected android.media.MediaMetadata getMetadata() { return mMediaController.getMetadata(); },37a5d63e0f6e7922dc957e537399791901396860,protected com.android.bluetooth.avrcp.MediaMetadata getMetadata() { return mMediaController.getMetadata(); },7bfeb3f18a509f41faa9b0462605602aea203577,protected android.media.MediaMetadata getMetadata() { return mMediaController.getMetadata(); },37a5d63e0f6e7922dc957e537399791901396860,2018-03-16 08:02:29,8
640733,src_com_android_bluetooth_newavrcp_MediaPlayerWrapper.java,"boolean isMetadataSynced() { if ((getQueue()) != null) { android.media.session.MediaSession.QueueItem currItem = null; for (android.media.session.MediaSession.QueueItem item : getQueue()) { if ((item.getQueueId()) == (getActiveQueueID())) { currItem = item; break; } } if ((currItem == null) || (!(currItem.getDescription().equals(getMetadata().getDescription())))) { if (com.android.bluetooth.avrcp.MediaPlayerWrapper.DEBUG) { android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (""Metadata currently out of sync for "" + (mPackageName))); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current queueItem: "" + currItem)); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current metadata : "" + (getMetadata().getDescription()))); } return false; } } return true; }",c25350c07a27adddd5c7a3c0d0df7109df2d0b49,"boolean isMetadataSynced() { if (((getQueue()) != null) && ((getActiveQueueID()) != (-1))) { android.media.session.MediaSession.QueueItem currItem = null; for (android.media.session.MediaSession.QueueItem item : getQueue()) { if ((item.getQueueId()) == (getActiveQueueID())) { currItem = item; break; } } com.android.bluetooth.avrcp.Metadata qitem = com.android.bluetooth.avrcp.Util.toMetadata(currItem); com.android.bluetooth.avrcp.Metadata mdata = com.android.bluetooth.avrcp.Util.toMetadata(getMetadata()); qitem.mediaId = """"; mdata.mediaId = """"; if ((currItem == null) || (!(qitem.equals(mdata)))) { if (com.android.bluetooth.avrcp.MediaPlayerWrapper.DEBUG) { android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (""Metadata currently out of sync for "" + (mPackageName))); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current queueItem: "" + currItem)); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current metadata : "" + (getMetadata().getDescription()))); } return false; } } return true; }",c08ff169105fa5ebdcad634a6c34446f2da4be8a,"boolean isMetadataSynced() { if (((getQueue()) != null) && ((getActiveQueueID()) != (-1))) { android.media.session.MediaSession.QueueItem currItem = null; for (android.media.session.MediaSession.QueueItem item : getQueue()) { if ((item.getQueueId()) == (getActiveQueueID())) { currItem = item; break; } } com.android.bluetooth.avrcp.Metadata qitem = com.android.bluetooth.avrcp.Util.toMetadata(currItem); com.android.bluetooth.avrcp.Metadata mdata = com.android.bluetooth.avrcp.Util.toMetadata(getMetadata()); if ((currItem == null) || (!(qitem.equals(mdata)))) { if (com.android.bluetooth.avrcp.MediaPlayerWrapper.DEBUG) { android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (""Metadata currently out of sync for "" + (mPackageName))); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current queueItem: "" + currItem)); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current metadata : "" + (getMetadata().getDescription()))); } return false; } } return true; }",8665e9e184365fb6213a5b66fefbcdc0c77b0be5,2018-03-16 08:02:29,8
640733,src_com_android_bluetooth_newavrcp_MediaPlayerList.java,,,"java.util.List<com.android.bluetooth.avrcp.PlayerInfo> getMediaPlayerList() { com.android.bluetooth.avrcp.PlayerInfo info = new com.android.bluetooth.avrcp.PlayerInfo(); info.id = 0; info.name = ""Bluetooth Player""; info.browsable = true; java.util.List<com.android.bluetooth.avrcp.PlayerInfo> ret = new java.util.ArrayList<com.android.bluetooth.avrcp.PlayerInfo>(); ret.add(info); return ret; }",42315fd72e5f50a0fd82f804cea505c8c07a0ee3,java.util.List<com.android.bluetooth.avrcp.PlayerInfo> getMediaPlayerList() { com.android.bluetooth.avrcp.PlayerInfo info = new com.android.bluetooth.avrcp.PlayerInfo(); info.id = com.android.bluetooth.avrcp.MediaPlayerList.BLUETOOTH_PLAYER_ID; info.name = com.android.bluetooth.avrcp.MediaPlayerList.BLUETOOTH_PLAYER_NAME; info.browsable = true; java.util.List<com.android.bluetooth.avrcp.PlayerInfo> ret = new java.util.ArrayList<com.android.bluetooth.avrcp.PlayerInfo>(); ret.add(info); return ret; },3077aaec0f2889bfa72e2a70481b6aa90c53f99e,2018-03-16 08:02:29,8
638760,tests_tests_net_src_android_net_cts_IpSecSysctlTest.java,,,"public void testProcFiles() throws android.system.ErrnoException, java.io.IOException, java.lang.NumberFormatException { int value = getValue(android.net.cts.IpSecSysctlTest.SPI_TIMEOUT_SYSCTL); assertAtLeast(android.net.cts.IpSecSysctlTest.SPI_TIMEOUT_SYSCTL, value, android.net.cts.IpSecSysctlTest.MIN_ACQ_EXPIRES); }",7926f61c4e23adccc9e43e264fd3ab4c0193cc58,"public void testProcFiles() throws android.system.ErrnoException, java.io.IOException, java.lang.NumberFormatException { int value = getIntValue(android.net.cts.IpSecSysctlTest.SPI_TIMEOUT_SYSCTL); assertAtLeast(android.net.cts.IpSecSysctlTest.SPI_TIMEOUT_SYSCTL, value, android.net.cts.IpSecSysctlTest.MIN_ACQ_EXPIRES); }",f6bc426cecea0e74058a78388cca35afb5503bd8,2018-03-16 17:45:19,5
638760,tests_tests_net_src_android_net_cts_SysctlBaseTest.java,,,"protected java.lang.String readFile(java.lang.String fileName) throws android.system.ErrnoException, java.io.IOException { byte[] buf = new byte[1024]; java.io.FileDescriptor fd = android.system.Os.open(fileName, 0, OsConstants.O_RDONLY); int bytesRead = android.system.Os.read(fd, buf, 0, buf.length); assertLess(((""length of "" + fileName) + "":""), bytesRead, buf.length); return new java.lang.String(buf); }",2190ac76f4d25fcfa230863831c83d0ecb3fd14b,"private java.lang.String readFile(java.lang.String fileName) throws android.system.ErrnoException, java.io.IOException { byte[] buf = new byte[1024]; java.io.FileDescriptor fd = android.system.Os.open(fileName, 0, OsConstants.O_RDONLY); int bytesRead = android.system.Os.read(fd, buf, 0, buf.length); assertLess(((""length of "" + fileName) + "":""), bytesRead, buf.length); return new java.lang.String(buf); }",0d9f546886e5962958fab25e22b1cae3148e528b,2018-03-16 17:45:19,5
638760,tests_tests_net_src_android_net_cts_SysctlBaseTest.java,,,"protected int getValue(java.lang.String filename) throws android.system.ErrnoException, java.io.IOException { checkSysctlPermissions(filename); return java.lang.Integer.parseInt(readFile(filename).trim()); }",ad138344e8e16080249a2704e36f037e5cf3e646,"protected int getIntValue(java.lang.String filename) throws android.system.ErrnoException, java.io.IOException { checkSysctlPermissions(filename); return java.lang.Integer.parseInt(readFile(filename).trim()); }",5f88887f9c349c0013d106b726694c59ccf36d8e,2018-03-16 17:45:19,5
638760,tests_tests_net_src_android_net_cts_MultinetworkSysctlTest.java,"public void testProcFiles() throws android.system.ErrnoException, java.io.IOException, java.lang.NumberFormatException { for (java.lang.String sysctl : android.net.cts.MultinetworkSysctlTest.GLOBAL_SYSCTLS) { checkSysctlPermissions(sysctl); int value = java.lang.Integer.parseInt(readFile(sysctl).trim()); assertEquals(((""value of "" + sysctl) + "":""), 1, value); } java.io.File[] interfaceDirs = new java.io.File(android.net.cts.MultinetworkSysctlTest.IPV6_SYSCTL_DIR).listFiles(); for (java.io.File interfaceDir : interfaceDirs) { if ((interfaceDir.getName().equals(""all"")) || (interfaceDir.getName().equals(""lo""))) { continue; } java.lang.String sysctl = new java.io.File(interfaceDir, android.net.cts.MultinetworkSysctlTest.AUTOCONF_SYSCTL).getAbsolutePath(); checkSysctlPermissions(sysctl); int value = java.lang.Integer.parseInt(readFile(sysctl).trim()); assertLess(((""value of "" + sysctl) + "":""), value, 0); } }",efb5259682fb05a25d0c06be7c989aa99c93d729,"public void testProcFiles() throws android.system.ErrnoException, java.io.IOException, java.lang.NumberFormatException { for (java.lang.String sysctl : android.net.cts.MultinetworkSysctlTest.GLOBAL_SYSCTLS) { int value = getValue(sysctl); assertEquals(sysctl, 1, value); } java.io.File[] interfaceDirs = new java.io.File(android.net.cts.MultinetworkSysctlTest.IPV6_SYSCTL_DIR).listFiles(); for (java.io.File interfaceDir : interfaceDirs) { if ((interfaceDir.getName().equals(""all"")) || (interfaceDir.getName().equals(""lo""))) { continue; } java.lang.String sysctl = new java.io.File(interfaceDir, android.net.cts.MultinetworkSysctlTest.AUTOCONF_SYSCTL).getAbsolutePath(); int value = getValue(sysctl); assertLess(sysctl, value, 0); } }",c32417a8674648a86d7c394c849189ab2916416b,"public void testProcFiles() throws android.system.ErrnoException, java.io.IOException, java.lang.NumberFormatException { for (java.lang.String sysctl : android.net.cts.MultinetworkSysctlTest.GLOBAL_SYSCTLS) { int value = getIntValue(sysctl); assertEquals(sysctl, 1, value); } java.io.File[] interfaceDirs = new java.io.File(android.net.cts.MultinetworkSysctlTest.IPV6_SYSCTL_DIR).listFiles(); for (java.io.File interfaceDir : interfaceDirs) { if ((interfaceDir.getName().equals(""all"")) || (interfaceDir.getName().equals(""lo""))) { continue; } java.lang.String sysctl = new java.io.File(interfaceDir, android.net.cts.MultinetworkSysctlTest.AUTOCONF_SYSCTL).getAbsolutePath(); int value = getIntValue(sysctl); assertLess(sysctl, value, 0); } }",9d61d7cad2c046e1e056143b6d73cb005836746a,2018-03-16 17:45:19,5
638760,tests_tests_net_src_android_net_cts_SysctlBaseTest.java,,,"protected void checkSysctlPermissions(java.lang.String fileName) throws android.system.ErrnoException { android.system.StructStat stat = android.system.Os.stat(fileName); assertEquals(((""mode of "" + fileName) + "":""), android.net.cts.SysctlBaseTest.SYSCTL_MODE, stat.st_mode); assertEquals(((""UID of "" + fileName) + "":""), android.net.cts.SysctlBaseTest.SYSCTL_UID, stat.st_uid); assertEquals(((""GID of "" + fileName) + "":""), android.net.cts.SysctlBaseTest.SYSCTL_GID, stat.st_gid); }",349c4ef3b7fea3bf09174e33599b371d284f86e8,"private void checkSysctlPermissions(java.lang.String fileName) throws android.system.ErrnoException { android.system.StructStat stat = android.system.Os.stat(fileName); assertEquals(((""mode of "" + fileName) + "":""), android.net.cts.SysctlBaseTest.SYSCTL_MODE, stat.st_mode); assertEquals(((""UID of "" + fileName) + "":""), android.net.cts.SysctlBaseTest.SYSCTL_UID, stat.st_uid); assertEquals(((""GID of "" + fileName) + "":""), android.net.cts.SysctlBaseTest.SYSCTL_GID, stat.st_gid); }",edc01edc03ef5b2c0f41204158774d3a5f8e2d02,2018-03-16 17:45:19,5
589595,src_main_java_com_android_apksig_internal_apk_v2_V2SchemeVerifier.java,"public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion, int maxSdkVersion) throws ApkSigningBlockUtils.SignatureNotFoundException, com.android.apksig.apk.ApkFormatException, java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result(); com.android.apksig.internal.apk.SignatureInfo signatureInfo = com.android.apksig.internal.apk.ApkSigningBlockUtils.findSignature(apk, zipSections, com.android.apksig.internal.apk.v2.V2SchemeVerifier.APK_SIGNATURE_SCHEME_V2_BLOCK_ID, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.internal.apk.v2.V2SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, minSdkVersion, maxSdkVersion, result); return result; }",848093585bcc9ffa572a812d393be9325b696b45,"public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion, int maxSdkVersion) throws ApkSigningBlockUtils.SignatureNotFoundException, com.android.apksig.apk.ApkFormatException, java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result(com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2); com.android.apksig.internal.apk.SignatureInfo signatureInfo = com.android.apksig.internal.apk.ApkSigningBlockUtils.findSignature(apk, zipSections, com.android.apksig.internal.apk.v2.V2SchemeVerifier.APK_SIGNATURE_SCHEME_V2_BLOCK_ID, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.internal.apk.v2.V2SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, minSdkVersion, maxSdkVersion, result); return result; }",37c8a2265863ad3f97618e4f9a54b921d9f141d2,"public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, java.util.Map<java.lang.Integer, java.lang.String> supportedApkSigSchemeNames, java.util.Set<java.lang.Integer> foundSigSchemeIds, int minSdkVersion, int maxSdkVersion) throws ApkSigningBlockUtils.SignatureNotFoundException, com.android.apksig.apk.ApkFormatException, java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result(com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2); com.android.apksig.internal.apk.SignatureInfo signatureInfo = com.android.apksig.internal.apk.ApkSigningBlockUtils.findSignature(apk, zipSections, com.android.apksig.internal.apk.v2.V2SchemeVerifier.APK_SIGNATURE_SCHEME_V2_BLOCK_ID, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.internal.apk.v2.V2SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, supportedApkSigSchemeNames, foundSigSchemeIds, minSdkVersion, maxSdkVersion, result); return result; }",d45b437d49a89083713f649d3baa39343d380649,2018-03-16 17:47:00,6
589595,src_main_java_com_android_apksig_internal_apk_v3_V3SchemeVerifier.java,,,"public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion, int maxSdkVersion) throws com.android.apksig.internal.apk.ApkSigningBlockUtils.SignatureNotFoundException, java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result(com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3); com.android.apksig.internal.apk.SignatureInfo signatureInfo = com.android.apksig.internal.apk.ApkSigningBlockUtils.findSignature(apk, zipSections, com.android.apksig.internal.apk.v3.V3SchemeVerifier.APK_SIGNATURE_SCHEME_V3_BLOCK_ID, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.internal.apk.v3.V3SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, minSdkVersion, maxSdkVersion, result); return result; }",e80f1adafe4027c64d58ddf200cb070ea76f146a,"public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion, int maxSdkVersion) throws com.android.apksig.internal.apk.ApkSigningBlockUtils.SignatureNotFoundException, java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result(com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3); com.android.apksig.internal.apk.SignatureInfo signatureInfo = com.android.apksig.internal.apk.ApkSigningBlockUtils.findSignature(apk, zipSections, com.android.apksig.internal.apk.v3.V3SchemeVerifier.APK_SIGNATURE_SCHEME_V3_BLOCK_ID, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; if (minSdkVersion < (com.android.apksig.internal.util.AndroidSdkVersion.P)) { minSdkVersion = com.android.apksig.internal.util.AndroidSdkVersion.P; } com.android.apksig.internal.apk.v3.V3SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, minSdkVersion, maxSdkVersion, result); return result; }",92bac67cd17d5ae7076858cfcf2f6e6749594c49,2018-03-16 17:47:00,6
589595,src_main_java_com_android_apksig_internal_apk_v3_V3SchemeVerifier.java,,,"private static void parseSigners(java.nio.ByteBuffer apkSignatureSchemeV3Block, java.util.Set<com.android.apksig.internal.apk.ContentDigestAlgorithm> contentDigestsToVerify, int minSdkVersion, int maxSdkVersion, com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result) throws java.security.NoSuchAlgorithmException { java.nio.ByteBuffer signers; try { signers = com.android.apksig.internal.apk.ApkSigningBlockUtils.getLengthPrefixedSlice(apkSignatureSchemeV3Block); } catch (com.android.apksig.apk.ApkFormatException e) { result.addError(Issue.V3_SIG_MALFORMED_SIGNERS); return; } if (!(signers.hasRemaining())) { result.addError(Issue.V3_SIG_NO_SIGNERS); return; } java.security.cert.CertificateFactory certFactory; try { certFactory = java.security.cert.CertificateFactory.getInstance(""X.509""); } catch (java.security.cert.CertificateException e) { throw new java.lang.RuntimeException(""Failed to obtain X.509 CertificateFactory"", e); } int signerCount = 0; while (signers.hasRemaining()) { int signerIndex = signerCount; signerCount++; com.android.apksig.internal.apk.ApkSigningBlockUtils.Result.SignerInfo signerInfo = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result.SignerInfo(); signerInfo.index = signerIndex; result.signers.add(signerInfo); try { java.nio.ByteBuffer signer = com.android.apksig.internal.apk.ApkSigningBlockUtils.getLengthPrefixedSlice(signers); com.android.apksig.internal.apk.v3.V3SchemeVerifier.parseSigner(signer, certFactory, signerInfo, contentDigestsToVerify, minSdkVersion, maxSdkVersion); } catch (com.android.apksig.apk.ApkFormatException | java.nio.BufferUnderflowException e) { signerInfo.addError(Issue.V3_SIG_MALFORMED_SIGNER); return; } } }",ec73f9b66ebe43887c806f643ef374d3cff39b3b,"private static void parseSigners(java.nio.ByteBuffer apkSignatureSchemeV3Block, java.util.Set<com.android.apksig.internal.apk.ContentDigestAlgorithm> contentDigestsToVerify, int minSdkVersion, int maxSdkVersion, com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result) throws java.security.NoSuchAlgorithmException { java.nio.ByteBuffer signers; try { signers = com.android.apksig.internal.apk.ApkSigningBlockUtils.getLengthPrefixedSlice(apkSignatureSchemeV3Block); } catch (com.android.apksig.apk.ApkFormatException e) { result.addError(Issue.V3_SIG_MALFORMED_SIGNERS); return; } if (!(signers.hasRemaining())) { result.addError(Issue.V3_SIG_NO_SIGNERS); return; } java.security.cert.CertificateFactory certFactory; try { certFactory = java.security.cert.CertificateFactory.getInstance(""X.509""); } catch (java.security.cert.CertificateException e) { throw new java.lang.RuntimeException(""Failed to obtain X.509 CertificateFactory"", e); } int signerCount = 0; while (signers.hasRemaining()) { int signerIndex = signerCount; signerCount++; com.android.apksig.internal.apk.ApkSigningBlockUtils.Result.SignerInfo signerInfo = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result.SignerInfo(); signerInfo.index = signerIndex; result.signers.add(signerInfo); try { java.nio.ByteBuffer signer = com.android.apksig.internal.apk.ApkSigningBlockUtils.getLengthPrefixedSlice(signers); com.android.apksig.internal.apk.v3.V3SchemeVerifier.parseSigner(signer, certFactory, signerInfo, contentDigestsToVerify); } catch (com.android.apksig.apk.ApkFormatException | java.nio.BufferUnderflowException e) { signerInfo.addError(Issue.V3_SIG_MALFORMED_SIGNER); return; } } }",8f8883eca599e9d039416b396719f58ccdc247a6,2018-03-16 17:47:00,6
636992,src_java_com_android_internal_telephony_ims_ImsServiceController.java,private void removeImsServiceFeatureListener() { synchronized(mLock) { mImsStatusCallbacks.clear(); } },6e004f1461f5bb7f8ce19e94dc17c571f07c0aa8,private void removeImsServiceFeatureListener() { mImsStatusCallbacks.clear(); },8cccc7502a285bc05824e211e196d1c75aa5e94b,@com.android.internal.annotations.VisibleForTesting public void removeImsServiceFeatureCallbacks() { mImsStatusCallbacks.clear(); },3622f15477ececdc87add6330878024cb93a8b94,2018-03-16 18:21:05,3
636992,src_java_com_android_internal_telephony_ims_ImsServiceController.java,public void addImsServiceFeatureListener(com.android.ims.internal.IImsServiceFeatureCallback callback) { synchronized(mLock) { mImsStatusCallbacks.add(callback); } },7975f0b3d3ff88f6ed2220bab2fa3b9d2ff612d2,public void addImsServiceFeatureListener(com.android.ims.internal.IImsServiceFeatureCallback callback) { mImsStatusCallbacks.add(callback); },cc5c7d5436e13923255ed3445a4a1fd20b3fd983,public boolean isBound() { synchronized(mLock) { return mIsBound; } },233f814ae64bc13650d9b47011100fe2d25bc9ef,2018-03-16 18:21:05,3
640276,src_java_com_android_internal_telephony_ims_MmTelFeatureCompatAdapter.java,"private android.app.PendingIntent createIncomingCallPendingIntent() { android.content.Intent intent = new android.content.Intent(com.android.ims.ImsManager.ACTION_IMS_INCOMING_CALL); intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND); return android.app.PendingIntent.getBroadcast(mContext, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT); }",8e9af9e05c80818452ff7d9cbd2195bbbd85186e,"private android.app.PendingIntent createIncomingCallPendingIntent() { android.content.Intent intent = new android.content.Intent(com.android.ims.ImsManager.ACTION_IMS_INCOMING_CALL); intent.setPackage(""com.android.phone""); return android.app.PendingIntent.getBroadcast(mContext, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT); }",53a7a0a8611cbc1a4190d80dd40dffe73b111400,"private android.app.PendingIntent createIncomingCallPendingIntent() { android.content.Intent intent = new android.content.Intent(com.android.ims.ImsManager.ACTION_IMS_INCOMING_CALL); intent.setPackage(TelephonyManager.PHONE_PROCESS_NAME); return android.app.PendingIntent.getBroadcast(mContext, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT); }",0b138239026f40d579e9f44f3cb68d2b778d8cd0,2018-03-16 18:38:28,2
641284,tests_telephonytests_src_com_android_internal_telephony_ServiceStateTest.java,"@android.test.suitebuilder.annotation.SmallTest public void testMisc() { android.telephony.ServiceState ss = new android.telephony.ServiceState(); ss.setCssIndicator(100); assertEquals(1, ss.getCssIndicator()); ss.setIsManualSelection(true); assertTrue(ss.getIsManualSelection()); ss.setSystemAndNetworkId(123, 456); assertEquals(123, ss.getSystemId()); assertEquals(456, ss.getNetworkId()); ss.setEmergencyOnly(true); assertTrue(ss.isEmergencyOnly()); }",c59154cc9bc5a25f55e4afdbce77e05cc0cc9e5e,"@android.test.suitebuilder.annotation.SmallTest public void testMisc() { android.telephony.ServiceState ss = new android.telephony.ServiceState(); ss.setCssIndicator(100); assertEquals(1, ss.getCssIndicator()); ss.setIsManualSelection(true); assertTrue(ss.getIsManualSelection()); ss.setSystemAndNetworkId(123, 456); assertEquals(123, ss.getCdmaSystemId()); assertEquals(456, ss.getCdmaNetworkId()); ss.setEmergencyOnly(true); assertTrue(ss.isEmergencyOnly()); }",f32ee8c64a533f27d1b3bf14b41fc8f1a90c0b1d,"@android.test.suitebuilder.annotation.SmallTest public void testMisc() { android.telephony.ServiceState ss = new android.telephony.ServiceState(); ss.setCssIndicator(100); assertEquals(1, ss.getCssIndicator()); ss.setIsManualSelection(true); assertTrue(ss.getIsManualSelection()); ss.setCdmaSystemAndNetworkId(123, 456); assertEquals(123, ss.getCdmaSystemId()); assertEquals(456, ss.getCdmaNetworkId()); ss.setEmergencyOnly(true); assertTrue(ss.isEmergencyOnly()); }",9b706cdf5870940ea4ca446f00e7b12dddfd7620,2018-03-16 21:50:02,2
642307,jdwp_src_test_java_org_apache_harmony_jpda_tests_share_SyncDebuggee.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.lang.String getPid() { try { java.io.StreamTokenizer toks = new java.io.StreamTokenizer(new java.io.FileReader(""/proc/self/stat"")); toks.parseNumbers(); if ((toks.nextToken()) != (java.io.StreamTokenizer.TT_NUMBER)) { java.lang.System.out.println(""Failed to tokenize /proc/self/stat correctly. First token isn't a number""); return ""-1""; } return java.lang.Integer.toString(((int) (toks.nval))); } catch (java.lang.Exception e) { java.lang.System.out.println((""Failed to get pid! "" + e)); e.printStackTrace(java.lang.System.out); return ""-1""; } }",228add33c04eb14ebd8ae6ff7c129ffdebd3a40a,"public java.lang.String getPid() { try { java.io.StreamTokenizer toks = new java.io.StreamTokenizer(new java.io.FileReader(""/proc/self/stat"")); toks.parseNumbers(); if ((toks.nextToken()) != (java.io.StreamTokenizer.TT_NUMBER)) { java.lang.System.out.println((""Failed to tokenize /proc/self/stat correctly. "" + ""First token isn't a number"")); return ""-1""; } return java.lang.Integer.toString(((int) (toks.nval))); } catch (java.lang.Exception e) { java.lang.System.out.println((""Failed to get pid! "" + e)); e.printStackTrace(java.lang.System.out); return ""-1""; } }",4895e96b8e2127995ac0bf0fe01d188421c49db2,2018-03-19 15:33:38,2
642683,core_java_android_os_SystemProperties.java,"@java.lang.SuppressWarnings(""unused"") private static void callChangeCallbacks() { synchronized(android.os.SystemProperties.sChangeCallbacks) { if ((android.os.SystemProperties.sChangeCallbacks.size()) == 0) { return; } java.util.ArrayList<java.lang.Runnable> callbacks = new java.util.ArrayList<java.lang.Runnable>(android.os.SystemProperties.sChangeCallbacks); for (int i = 0; i < (callbacks.size()); i++) { callbacks.get(i).run(); } } }",588d9fc55933806965f46635d75d3998feb59e5b,"@java.lang.SuppressWarnings(""unused"") private static void callChangeCallbacks() { synchronized(android.os.SystemProperties.sChangeCallbacks) { if ((android.os.SystemProperties.sChangeCallbacks.size()) == 0) { return; } java.util.ArrayList<java.lang.Runnable> callbacks = new java.util.ArrayList<java.lang.Runnable>(android.os.SystemProperties.sChangeCallbacks); for (int i = 0; i < (callbacks.size()); i++) { try { callbacks.get(i).run(); } catch (java.lang.Exception e) { } catch (java.lang.Throwable t) { android.util.Log.e(android.os.SystemProperties.TAG, ""Error during callChangeCallbacks"", t); return; } } } }",59a380e678de85d1eebef79c1a3efa782affd8aa,"@java.lang.SuppressWarnings(""unused"") private static void callChangeCallbacks() { synchronized(android.os.SystemProperties.sChangeCallbacks) { if ((android.os.SystemProperties.sChangeCallbacks.size()) == 0) { return; } java.util.ArrayList<java.lang.Runnable> callbacks = new java.util.ArrayList<java.lang.Runnable>(android.os.SystemProperties.sChangeCallbacks); for (int i = 0; i < (callbacks.size()); i++) { try { callbacks.get(i).run(); } catch (java.lang.Throwable t) { android.util.Log.wtf(android.os.SystemProperties.TAG, ""Exception in SystemProperties change callback"", t); } } } }",108420f97885bd19b161310b21fbd284ad94ee04,2018-03-19 19:38:10,2
636341,src_com_android_se_Terminal.java,"public boolean[] isNfcEventAllowed(android.content.pm.PackageManager packageManager, byte[] aid, java.lang.String[] packageNames, boolean checkRefreshTag) { if ((mAccessControlEnforcer) == null) { android.util.Log.e(mTag, ""Access Control Enforcer not properly set up""); initializeAccessControl(); } mAccessControlEnforcer.setPackageManager(packageManager); synchronized(mLock) { try { return mAccessControlEnforcer.isNfcEventAllowed(aid, packageNames, checkRefreshTag); } catch (java.lang.Exception e) { android.util.Log.i(mTag, (""isNfcEventAllowed Exception: "" + (e.getMessage()))); return null; } } }",967bdf7f00fa774f44e86ee0416857966e3b7c52,"public boolean[] isNfcEventAllowed(android.content.pm.PackageManager packageManager, byte[] aid, java.lang.String[] packageNames, boolean checkRefreshTag) { if ((mAccessControlEnforcer) == null) { try { initializeAccessControl(); } catch (java.lang.Exception e) { android.util.Log.i(mTag, (""isNfcEventAllowed Exception: "" + (e.getMessage()))); return null; } } mAccessControlEnforcer.setPackageManager(packageManager); synchronized(mLock) { try { return mAccessControlEnforcer.isNfcEventAllowed(aid, packageNames, checkRefreshTag); } catch (java.lang.Exception e) { android.util.Log.i(mTag, (""isNfcEventAllowed Exception: "" + (e.getMessage()))); return null; } } }",532a90b4862896d98c73dc1543e0764918d09cdb,"public boolean[] isNfcEventAllowed(android.content.pm.PackageManager packageManager, byte[] aid, java.lang.String[] packageNames) { boolean checkRefreshTag = true; if ((mAccessControlEnforcer) == null) { try { initializeAccessControl(); checkRefreshTag = false; } catch (java.lang.Exception e) { android.util.Log.i(mTag, (""isNfcEventAllowed Exception: "" + (e.getMessage()))); return null; } } mAccessControlEnforcer.setPackageManager(packageManager); synchronized(mLock) { try { return mAccessControlEnforcer.isNfcEventAllowed(aid, packageNames, checkRefreshTag); } catch (java.lang.Exception e) { android.util.Log.i(mTag, (""isNfcEventAllowed Exception: "" + (e.getMessage()))); return null; } } }",d2283268cf3540d81ff809cde77d3003912de94d,2018-03-19 20:38:47,3
636341,src_com_android_se_Terminal.java,"private com.android.se.security.ChannelAccess setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag, int pid) throws java.io.IOException { if ((mAccessControlEnforcer) == null) { android.util.Log.e(mTag, ""Access Control Enforcer not properly set up""); initializeAccessControl(); } mAccessControlEnforcer.setPackageManager(mContext.getPackageManager()); synchronized(mLock) { try { com.android.se.security.ChannelAccess channelAccess = mAccessControlEnforcer.setUpChannelAccess(aid, packageName, checkRefreshTag); channelAccess.setCallingPid(pid); return channelAccess; } catch (java.io.IOException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } catch (java.lang.Exception e) { throw new java.lang.SecurityException((""Exception in setUpChannelAccess()"" + e)); } } }",907888dfb6d1e253cd52de2bd6e372cd43b30e35,"private com.android.se.security.ChannelAccess setUpChannelAccess(byte[] aid, java.lang.String packageName, int pid) throws java.io.IOException, java.util.MissingResourceException { boolean checkRefreshTag = true; if ((mAccessControlEnforcer) == null) { initializeAccessControl(); checkRefreshTag = false; } mAccessControlEnforcer.setPackageManager(mContext.getPackageManager()); synchronized(mLock) { try { com.android.se.security.ChannelAccess channelAccess = mAccessControlEnforcer.setUpChannelAccess(aid, packageName, checkRefreshTag); channelAccess.setCallingPid(pid); return channelAccess; } catch (java.io.IOException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } catch (java.lang.Exception e) { throw new java.lang.SecurityException((""Exception in setUpChannelAccess()"" + e)); } } }",4dd984ae472a18f5fe5f196b43bfc88ed97f015b,"private com.android.se.security.ChannelAccess setUpChannelAccess(byte[] aid, java.lang.String packageName, int pid) throws java.io.IOException, java.util.MissingResourceException { boolean checkRefreshTag = true; if ((mAccessControlEnforcer) == null) { initializeAccessControl(); checkRefreshTag = false; } mAccessControlEnforcer.setPackageManager(mContext.getPackageManager()); synchronized(mLock) { try { com.android.se.security.ChannelAccess channelAccess = mAccessControlEnforcer.setUpChannelAccess(aid, packageName, checkRefreshTag); channelAccess.setCallingPid(pid); return channelAccess; } catch (java.io.IOException | java.util.MissingResourceException e) { throw e; } catch (java.lang.Exception e) { throw new java.lang.SecurityException((""Exception in setUpChannelAccess()"" + e)); } } }",5a054b88a120815fb592359a4399d2edfee97092,2018-03-19 20:38:47,3
636341,src_com_android_se_Terminal.java,private synchronized void initializeAccessControl() { synchronized(mLock) { if ((mAccessControlEnforcer) == null) { mAccessControlEnforcer = new com.android.se.security.AccessControlEnforcer(this); } mAccessControlEnforcer.initialize(true); } },4e8fd254bce16202167a7e334b3386e9045005e5,"private synchronized void initializeAccessControl() throws java.io.IOException, java.util.MissingResourceException { synchronized(mLock) { if ((mAccessControlEnforcer) == null) { mAccessControlEnforcer = new com.android.se.security.AccessControlEnforcer(this); } try { mAccessControlEnforcer.initialize(); } catch (java.io.IOException e) { mAccessControlEnforcer = null; throw e; } catch (java.util.MissingResourceException e) { mAccessControlEnforcer = null; throw e; } } }",46f3a1539c0de6303c9d84f393c498cea814a722,"private synchronized void initializeAccessControl() throws java.io.IOException, java.util.MissingResourceException { synchronized(mLock) { if ((mAccessControlEnforcer) == null) { mAccessControlEnforcer = new com.android.se.security.AccessControlEnforcer(this); } try { mAccessControlEnforcer.initialize(); } catch (java.io.IOException | java.util.MissingResourceException e) { mAccessControlEnforcer = null; throw e; } } }",42f4c27f774a5dc5f8b72aa2b8e4d5d85ab1fd06,2018-03-19 20:38:47,3
631549,services_core_java_com_android_server_IpSecService.java,"@java.lang.Override public synchronized void addAddressToTunnelInterface(int tunnelResourceId, java.lang.String localAddr) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); }",20e3c78bf63f1d44cb28f76bd29da5ca5dbc8116,"@java.lang.Override public synchronized void addAddressToTunnelInterface(int tunnelResourceId, android.net.LinkAddress localAddr) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); try { mSrvConfig.getNetdInstance().interfaceAddAddress(tunnelInterfaceInfo.mInterfaceName, localAddr.getAddress().getHostAddress(), localAddr.getPrefixLength()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throwFromServiceSpecificException(e); } }",ec3ae908ab0a1240da144bdc9795d96ce4930802,"@java.lang.Override public synchronized void addAddressToTunnelInterface(int tunnelResourceId, android.net.LinkAddress localAddr) { enforceNetworkStackPermission(); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); try { mSrvConfig.getNetdInstance().interfaceAddAddress(tunnelInterfaceInfo.mInterfaceName, localAddr.getAddress().getHostAddress(), localAddr.getPrefixLength()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throw new java.lang.IllegalArgumentException(e); } }",7bc54ae2949613611d8caa5b311654bc143f6720,2018-03-19 22:05:07,6
631549,tests_net_java_android_net_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private IpSecManager.IpSecTunnelInterface createVti(int resourceId, java.lang.String intfName) throws java.lang.Exception { android.net.IpSecTunnelInterfaceResponse dummyResponse = new android.net.IpSecTunnelInterfaceResponse(IpSecManager.Status.OK, resourceId, intfName); when(mMockIpSecService.createTunnelInterface(eq(android.net.IpSecManagerTest.GOOGLE_DNS_4.getHostAddress()), eq(android.net.IpSecManagerTest.GOOGLE_DNS_4_ALT.getHostAddress()), anyObject(), anyObject())).thenReturn(dummyResponse); return mIpSecManager.createIpSecTunnelInterface(android.net.IpSecManagerTest.GOOGLE_DNS_4, android.net.IpSecManagerTest.GOOGLE_DNS_4_ALT, mock(android.net.Network.class)); }",ca3d3d2868f04822ad616a4fa49251e3a5c1217d,"private IpSecManager.IpSecTunnelInterface createAndValidateVti(int resourceId, java.lang.String intfName) throws java.lang.Exception { android.net.IpSecTunnelInterfaceResponse dummyResponse = new android.net.IpSecTunnelInterfaceResponse(IpSecManager.Status.OK, resourceId, intfName); when(mMockIpSecService.createTunnelInterface(eq(android.net.IpSecManagerTest.VTI_LOCAL_ADDRESS.getHostAddress()), eq(android.net.IpSecManagerTest.GOOGLE_DNS_4.getHostAddress()), anyObject(), anyObject())).thenReturn(dummyResponse); android.net.IpSecManager.IpSecTunnelInterface tunnelIntf = mIpSecManager.createIpSecTunnelInterface(android.net.IpSecManagerTest.VTI_LOCAL_ADDRESS, android.net.IpSecManagerTest.GOOGLE_DNS_4, mock(android.net.Network.class)); assertNotNull(tunnelIntf); return tunnelIntf; }",caf65f2d9a103a4fc902e173880814ea0e80e603,2018-03-19 22:05:07,6
631549,tests_net_java_android_net_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testAddRemoveAddressesFromVti() throws java.lang.Exception { android.net.IpSecManager.IpSecTunnelInterface tunnelIntf = createVti(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID, android.net.IpSecManagerTest.VTI_INTF_NAME); tunnelIntf.addAddress(android.net.IpSecManagerTest.VTI_ADDRESS); verify(mMockIpSecService).addAddressToTunnelInterface(eq(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID), eq(android.net.IpSecManagerTest.VTI_ADDRESS)); tunnelIntf.removeAddress(android.net.IpSecManagerTest.VTI_ADDRESS); verify(mMockIpSecService).addAddressToTunnelInterface(eq(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID), eq(android.net.IpSecManagerTest.VTI_ADDRESS)); }",8f50eb6019548e5cd68b4c615a7b63d366f0c4d4,"@org.junit.Test public void testAddRemoveAddressesFromVti() throws java.lang.Exception { android.net.IpSecManager.IpSecTunnelInterface tunnelIntf = createAndValidateVti(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID, android.net.IpSecManagerTest.VTI_INTF_NAME); tunnelIntf.addAddress(android.net.IpSecManagerTest.VTI_INNER_ADDRESS); verify(mMockIpSecService).addAddressToTunnelInterface(eq(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID), eq(android.net.IpSecManagerTest.VTI_INNER_ADDRESS)); tunnelIntf.removeAddress(android.net.IpSecManagerTest.VTI_INNER_ADDRESS); verify(mMockIpSecService).addAddressToTunnelInterface(eq(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID), eq(android.net.IpSecManagerTest.VTI_INNER_ADDRESS)); }",54e405b0367a336248c3ed61d7c92d9e2ac44e79,2018-03-19 22:05:07,6
631549,tests_net_java_com_android_server_IpSecServiceParameterizedTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private android.net.IpSecTunnelInterfaceResponse createTunnel(java.lang.String localAddr, java.lang.String remoteAddr) { android.net.IpSecTunnelInterfaceResponse createTunnelResp = mIpSecService.createTunnelInterface(mSourceAddr, mDestinationAddr, fakeNetwork, new android.os.Binder()); assertNotNull(createTunnelResp); assertEquals(IpSecManager.Status.OK, createTunnelResp.status); return createTunnelResp; }",7511c596b5cad6d3493e576a242cb5e9e5c7542f,"private android.net.IpSecTunnelInterfaceResponse createAndValidateTunnel(java.lang.String localAddr, java.lang.String remoteAddr) { android.net.IpSecTunnelInterfaceResponse createTunnelResp = mIpSecService.createTunnelInterface(mSourceAddr, mDestinationAddr, fakeNetwork, new android.os.Binder()); assertNotNull(createTunnelResp); assertEquals(IpSecManager.Status.OK, createTunnelResp.status); return createTunnelResp; }",0e1a5dfa02d0a6c5389063db739a11e41a08c17f,2018-03-19 22:05:07,6
631549,tests_net_java_android_net_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testCreateVti() throws java.lang.Exception { android.net.IpSecManager.IpSecTunnelInterface tunnelIntf = createVti(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID, android.net.IpSecManagerTest.VTI_INTF_NAME); assertEquals(android.net.IpSecManagerTest.VTI_INTF_NAME, tunnelIntf.getInterfaceName()); tunnelIntf.close(); verify(mMockIpSecService).deleteTunnelInterface(eq(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID)); }",e7d441866585e57ce5a8edf34af84f9b5446f349,"@org.junit.Test public void testCreateVti() throws java.lang.Exception { android.net.IpSecManager.IpSecTunnelInterface tunnelIntf = createAndValidateVti(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID, android.net.IpSecManagerTest.VTI_INTF_NAME); assertEquals(android.net.IpSecManagerTest.VTI_INTF_NAME, tunnelIntf.getInterfaceName()); tunnelIntf.close(); verify(mMockIpSecService).deleteTunnelInterface(eq(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID)); }",19e5449fe5a6e436e54cba0a1406d59291201832,2018-03-19 22:05:07,6
631549,services_core_java_com_android_server_IpSecService.java,"@java.lang.Override public synchronized void removeAddressFromTunnelInterface(int tunnelResourceId, java.lang.String localAddr) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); }",9ced367f2c059bde4a27bdb94ddf0039fb711894,"@java.lang.Override public synchronized void removeAddressFromTunnelInterface(int tunnelResourceId, android.net.LinkAddress localAddr) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); try { mSrvConfig.getNetdInstance().interfaceDelAddress(tunnelInterfaceInfo.mInterfaceName, localAddr.getAddress().getHostAddress(), localAddr.getPrefixLength()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throwFromServiceSpecificException(e); } }",08bffc10b0a6c35140d45d931d42387b5707720a,"@java.lang.Override public synchronized void removeAddressFromTunnelInterface(int tunnelResourceId, android.net.LinkAddress localAddr) { enforceNetworkStackPermission(); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); try { mSrvConfig.getNetdInstance().interfaceDelAddress(tunnelInterfaceInfo.mInterfaceName, localAddr.getAddress().getHostAddress(), localAddr.getPrefixLength()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throw new java.lang.IllegalArgumentException(e); } }",c3835ec40c4559ddd06c0cf871d14f9db4896a17,2018-03-19 22:05:07,6
631549,tests_net_java_com_android_server_IpSecServiceParameterizedTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testDeleteTunnelInterface() throws java.lang.Exception { android.net.IpSecTunnelInterfaceResponse createTunnelResp = createTunnel(mSourceAddr, mDestinationAddr); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); mIpSecService.deleteTunnelInterface(createTunnelResp.resourceId); assertEquals(0, userRecord.mTunnelQuotaTracker.mCurrent); verify(mMockNetd).removeVirtualTunnelInterface(eq(createTunnelResp.interfaceName)); try { userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",b689c102d2a5e501cd46ed3caed4a7f4322a7193,"@org.junit.Test public void testDeleteTunnelInterface() throws java.lang.Exception { android.net.IpSecTunnelInterfaceResponse createTunnelResp = createAndValidateTunnel(mSourceAddr, mDestinationAddr); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); mIpSecService.deleteTunnelInterface(createTunnelResp.resourceId); assertEquals(0, userRecord.mTunnelQuotaTracker.mCurrent); verify(mMockNetd).removeVirtualTunnelInterface(eq(createTunnelResp.interfaceName)); try { userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",e52e68e485b3df4534d25a463eeaad628baffd83,2018-03-19 22:05:07,6
631549,core_java_android_net_IpSecManager.java,public void addAddress(android.net.LinkAddress address) throws java.io.IOException { },dd3c6d4106276aa3daca261afd0d936df1d3f5b1,"public void addAddress(android.net.LinkAddress address) throws java.io.IOException { try { mService.addAddressToTunnelInterface(mResourceId, address); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",e99d92ff6e73b9150474f7565d2b11947a447eca,"public void addAddress(android.net.LinkAddress address) { try { mService.addAddressToTunnelInterface(mResourceId, address); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",27085d9921c9b831f4a17641bc82c63819fae9bc,2018-03-19 22:05:07,6
631549,tests_net_java_com_android_server_IpSecServiceParameterizedTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testTunnelInterfaceBinderDeath() throws java.lang.Exception { IpSecTunnelInterfaceResponse createTunnelResp = createTunnel(mSourceAddr, mDestinationAddr); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.resourceId); refcountedRecord.binderDied(); assertEquals(0, userRecord.mTunnelQuotaTracker.mCurrent); verify(mMockNetd).removeVirtualTunnelInterface(eq(createTunnelResp.interfaceName)); try { userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",5547d9903b4cb3513147c036a602bd9e8e7905ff,"@org.junit.Test public void testTunnelInterfaceBinderDeath() throws java.lang.Exception { IpSecTunnelInterfaceResponse createTunnelResp = createAndValidateTunnel(mSourceAddr, mDestinationAddr); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.resourceId); refcountedRecord.binderDied(); assertEquals(0, userRecord.mTunnelQuotaTracker.mCurrent); verify(mMockNetd).removeVirtualTunnelInterface(eq(createTunnelResp.interfaceName)); try { userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",65e42d97643ec0fc21ea2051e373c24472839bb0,2018-03-19 22:05:07,6
631549,tests_net_java_com_android_server_IpSecServiceParameterizedTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testAddRemoveAddressFromTunnelInterface() throws java.lang.Exception { android.net.IpSecTunnelInterfaceResponse createTunnelResp = createTunnel(mSourceAddr, mDestinationAddr); mIpSecService.addAddressToTunnelInterface(createTunnelResp.resourceId, mLocalInnerAddress); verify(mMockNetd).interfaceAddAddress(eq(createTunnelResp.interfaceName), eq(mLocalInnerAddress.getAddress().getHostAddress()), eq(mLocalInnerAddress.getPrefixLength())); mIpSecService.removeAddressFromTunnelInterface(createTunnelResp.resourceId, mLocalInnerAddress); verify(mMockNetd).interfaceDelAddress(eq(createTunnelResp.interfaceName), eq(mLocalInnerAddress.getAddress().getHostAddress()), eq(mLocalInnerAddress.getPrefixLength())); }",a3d3c49ee85c1b78283d0c838b77b184bd19df6d,"@org.junit.Test public void testAddRemoveAddressFromTunnelInterface() throws java.lang.Exception { android.net.IpSecTunnelInterfaceResponse createTunnelResp = createAndValidateTunnel(mSourceAddr, mDestinationAddr); mIpSecService.addAddressToTunnelInterface(createTunnelResp.resourceId, mLocalInnerAddress); verify(mMockNetd).interfaceAddAddress(eq(createTunnelResp.interfaceName), eq(mLocalInnerAddress.getAddress().getHostAddress()), eq(mLocalInnerAddress.getPrefixLength())); mIpSecService.removeAddressFromTunnelInterface(createTunnelResp.resourceId, mLocalInnerAddress); verify(mMockNetd).interfaceDelAddress(eq(createTunnelResp.interfaceName), eq(mLocalInnerAddress.getAddress().getHostAddress()), eq(mLocalInnerAddress.getPrefixLength())); }",cc1d94853e970ff529eebebc4d551ede74ce57bd,2018-03-19 22:05:07,6
631549,tests_net_java_com_android_server_IpSecServiceParameterizedTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testCreateTunnelInterface() throws java.lang.Exception { IpSecTunnelInterfaceResponse createTunnelResp = createTunnel(mSourceAddr, mDestinationAddr); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.resourceId); assertEquals(1, userRecord.mTunnelQuotaTracker.mCurrent); verify(mMockNetd).addVirtualTunnelInterface(eq(createTunnelResp.interfaceName), eq(mSourceAddr), eq(mDestinationAddr), anyInt(), anyInt()); }",730b0c47d64303b6eea93c1d7844044ee7cebbd8,"@org.junit.Test public void testCreateTunnelInterface() throws java.lang.Exception { IpSecTunnelInterfaceResponse createTunnelResp = createAndValidateTunnel(mSourceAddr, mDestinationAddr); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.resourceId); assertEquals(1, userRecord.mTunnelQuotaTracker.mCurrent); verify(mMockNetd).addVirtualTunnelInterface(eq(createTunnelResp.interfaceName), eq(mSourceAddr), eq(mDestinationAddr), anyInt(), anyInt()); }",f7f678ef860dd37c8e8162530f1ae6e4a07d6ed0,2018-03-19 22:05:07,6
631549,core_java_android_net_IpSecManager.java,public void removeAddress(android.net.LinkAddress address) throws java.io.IOException { },5905898b0b8ed32795b9bfd8626cd360d9d5e545,"public void removeAddress(android.net.LinkAddress address) throws java.io.IOException { try { mService.removeAddressFromTunnelInterface(mResourceId, address); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",4f9dba2dff09546623ffa57d5e0357bd7838dd8c,"public void removeAddress(android.net.LinkAddress address) { try { mService.removeAddressFromTunnelInterface(mResourceId, address); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",c1504f3be96c70a6f9fa463eb9f8b94e1d838802,2018-03-19 22:05:07,6
641019,test_cts_producer_src_android_perfetto_producer_ProducerActivity.java,"@java.lang.Override public void onResume() { super.onResume(); paused = false; handler.post(new java.lang.Runnable() { @java.lang.Override public void run() { if (paused) { return; } startService(new android.content.Intent(android.perfetto.producer.ProducerActivity.this, android.perfetto.producer.ProducerService.class)); startService(new android.content.Intent(android.perfetto.producer.ProducerActivity.this, android.perfetto.producer.ProducerIsolatedService.class)); java.lang.System.loadLibrary(""perfettocts_jni""); new java.lang.Thread(new java.lang.Runnable() { public void run() { try { android.perfetto.producer.ProducerActivity.setupProducer(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } }).start(); } }); }",c7f0cee8d9c7aec44332b2ee137f3b0c1ab23ffd,"@java.lang.Override public void onResume() { super.onResume(); startForegroundService(new android.content.Intent(this, android.perfetto.producer.ProducerService.class)); startForegroundService(new android.content.Intent(this, android.perfetto.producer.ProducerIsolatedService.class)); java.lang.System.loadLibrary(""perfettocts_jni""); new java.lang.Thread(new java.lang.Runnable() { public void run() { try { android.perfetto.producer.ProducerActivity.setupProducer(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } }).start(); }",250a23521201c217658f1c0b7caa60354375fb94,"@java.lang.Override public void onResume() { super.onResume(); android.app.NotificationManager manager = ((android.app.NotificationManager) (getSystemService(Context.NOTIFICATION_SERVICE))); android.app.NotificationChannel serviceChannel = new android.app.NotificationChannel(""service"", ""service"", android.app.NotificationManager.IMPORTANCE_LOW); serviceChannel.setDescription(""Perfetto service""); serviceChannel.setLockscreenVisibility(Notification.VISIBILITY_PRIVATE); manager.createNotificationChannel(serviceChannel); android.app.NotificationChannel isolatedChannel = new android.app.NotificationChannel(""isolated_service"", ""isolated_service"", android.app.NotificationManager.IMPORTANCE_LOW); isolatedChannel.setDescription(""Perfetto isolated service""); isolatedChannel.setLockscreenVisibility(Notification.VISIBILITY_PRIVATE); manager.createNotificationChannel(isolatedChannel); startForegroundService(new android.content.Intent(this, android.perfetto.producer.ProducerService.class)); startForegroundService(new android.content.Intent(this, android.perfetto.producer.ProducerIsolatedService.class)); java.lang.System.loadLibrary(""perfettocts_jni""); new java.lang.Thread(new java.lang.Runnable() { public void run() { try { android.perfetto.producer.ProducerActivity.setupProducer(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } }).start(); }",3da459503c3c6fab9e32c29a53936fe28b0d06bd,2018-03-20 10:28:55,5
641019,test_cts_producer_src_android_perfetto_producer_ProducerService.java,"@java.lang.Override public void onCreate() { java.lang.System.loadLibrary(""perfettocts_jni""); new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { try { android.perfetto.producer.ProducerService.setupProducer(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } }).start(); }",481458c91e15027aab331f703ba99a50da32778a,"@java.lang.Override public void onCreate() { android.app.NotificationManager manager = ((android.app.NotificationManager) (getSystemService(Context.NOTIFICATION_SERVICE))); android.app.NotificationChannel notificationChannel = new android.app.NotificationChannel(android.perfetto.producer.ProducerService.NOTIF_CHANNEL_ID, android.perfetto.producer.ProducerService.NOTIF_CHANNEL_NAME, android.app.NotificationManager.IMPORTANCE_HIGH); notificationChannel.enableLights(true); notificationChannel.setDescription(""Perfetto service""); notificationChannel.enableVibration(true); notificationChannel.setLockscreenVisibility(Notification.VISIBILITY_PUBLIC); manager.createNotificationChannel(notificationChannel); android.app.Notification.Builder builder = new android.app.Notification.Builder(this, android.perfetto.producer.ProducerService.NOTIF_CHANNEL_ID); builder.setContentTitle(""Perfetto service""); startForeground(android.perfetto.producer.ProducerService.NOTIFICATION_ID, builder.build()); java.lang.System.loadLibrary(""perfettocts_jni""); new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { try { android.perfetto.producer.ProducerService.setupProducer(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } }).start(); }",2888974fa21e4bbd6661f824631266389a73b9b2,"@java.lang.Override public void onCreate() { android.app.Notification.Builder builder = new android.app.Notification.Builder(this, ""service""); builder.setContentTitle(""Perfetto service"").setContentText(""Perfetto service"").setSmallIcon(R.mipmap.ic_launcher); startForeground(android.perfetto.producer.ProducerService.NOTIFICATION_ID, builder.build()); java.lang.System.loadLibrary(""perfettocts_jni""); new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { try { android.perfetto.producer.ProducerService.setupProducer(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } }).start(); }",729a47a463473a9383708ca3a2d9a5f5208dff47,2018-03-20 10:28:55,5
641019,test_cts_producer_src_android_perfetto_producer_ProducerIsolatedService.java,"@java.lang.Override public void onCreate() { java.lang.System.loadLibrary(""perfettocts_jni""); new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { try { android.perfetto.producer.ProducerIsolatedService.setupProducer(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } }).start(); }",ecda4a1da9835310834b5525f348543eade29867,"@java.lang.Override public void onCreate() { android.app.NotificationManager manager = ((android.app.NotificationManager) (getSystemService(Context.NOTIFICATION_SERVICE))); android.app.NotificationChannel notificationChannel = new android.app.NotificationChannel(android.perfetto.producer.ProducerIsolatedService.NOTIF_CHANNEL_ID, android.perfetto.producer.ProducerIsolatedService.NOTIF_CHANNEL_NAME, android.app.NotificationManager.IMPORTANCE_HIGH); notificationChannel.enableLights(true); notificationChannel.setDescription(""Perfetto isolated service""); notificationChannel.enableVibration(true); notificationChannel.setLockscreenVisibility(Notification.VISIBILITY_PUBLIC); manager.createNotificationChannel(notificationChannel); android.app.Notification.Builder builder = new android.app.Notification.Builder(this, android.perfetto.producer.ProducerIsolatedService.NOTIF_CHANNEL_ID); builder.setContentTitle(""Perfetto isolated service""); startForeground(android.perfetto.producer.ProducerIsolatedService.NOTIFICATION_ID, builder.build()); java.lang.System.loadLibrary(""perfettocts_jni""); new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { try { android.perfetto.producer.ProducerIsolatedService.setupProducer(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } }).start(); }",41656fa57791e5ac771e87bca74c44a36414b272,"@java.lang.Override public void onCreate() { android.app.Notification.Builder builder = new android.app.Notification.Builder(this, ""isolated_service""); builder.setContentTitle(""Perfetto isolated service"").setContentText(""Perfetto isolated service"").setSmallIcon(R.mipmap.ic_launcher); startForeground(android.perfetto.producer.ProducerIsolatedService.NOTIFICATION_ID, builder.build()); java.lang.System.loadLibrary(""perfettocts_jni""); new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { try { android.perfetto.producer.ProducerIsolatedService.setupProducer(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } }).start(); }",ef5d3e73881ae706de1e01f92cd8fb15e1563c33,2018-03-20 10:28:55,5
636542,tzlookup_generator_src_main_java_com_android_libcore_timezone_tzlookup_zonetree_CountryZoneTree.java,,,"public static com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree create(com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country country, java.time.Instant startInclusive, java.time.Instant endExclusive) { com.ibm.icu.text.TimeZoneNames timeZoneNames = com.ibm.icu.text.TimeZoneNames.getInstance(ULocale.US); java.util.List<com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.TimeZoneMapping> timeZoneMappings = country.getTimeZoneMappingsList(); java.util.List<com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo> zoneInfos = new java.util.ArrayList<>(); for (int i = 0; i < (timeZoneMappings.size()); i++) { com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.TimeZoneMapping timeZoneMapping = timeZoneMappings.get(i); int priority = timeZoneMapping.getPriority(); com.ibm.icu.util.BasicTimeZone timeZone = ((com.ibm.icu.util.BasicTimeZone) (com.ibm.icu.util.TimeZone.getTimeZone(timeZoneMapping.getId()))); if (timeZone == (com.ibm.icu.util.TimeZone.UNKNOWN_ZONE)) { throw new java.lang.IllegalArgumentException((""Unknown zone id: "" + timeZone)); } com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo zoneInfo = com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo.create(timeZoneNames, timeZone, priority, startInclusive, endExclusive); zoneInfos.add(zoneInfo); } return com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.create(country.getIsoCode(), zoneInfos); }",9b5690de35aa09c2a030a9a7346807811ae4d781,"public static com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree create(com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country country, java.time.Instant startInclusive, java.time.Instant endExclusive) { com.ibm.icu.text.TimeZoneNames timeZoneNames = com.ibm.icu.text.TimeZoneNames.getInstance(ULocale.US); java.util.List<com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.TimeZoneMapping> timeZoneMappings = country.getTimeZoneMappingsList(); java.util.List<com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo> zoneInfos = new java.util.ArrayList<>(); for (com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.TimeZoneMapping timeZoneMapping : timeZoneMappings) { int priority = timeZoneMapping.getPriority(); com.ibm.icu.util.TimeZone timeZone = com.ibm.icu.util.TimeZone.getTimeZone(timeZoneMapping.getId()); if (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.isInvalidZone(timeZone)) { throw new java.lang.IllegalArgumentException((""Unknown or unexpected type for zone id: "" + (timeZone.getID()))); } com.ibm.icu.util.BasicTimeZone basicTimeZone = ((com.ibm.icu.util.BasicTimeZone) (timeZone)); com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo zoneInfo = com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo.create(timeZoneNames, basicTimeZone, priority, startInclusive, endExclusive); zoneInfos.add(zoneInfo); } return com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.create(country.getIsoCode(), zoneInfos, startInclusive, endExclusive); }",8ba2885dd65149b154249982c360e64022b1f4e8,2018-03-20 10:55:54,4
636542,tzlookup_generator_src_main_java_com_android_libcore_timezone_tzlookup_zonetree_CountryZoneTree.java,,,"@java.lang.Override public void visit(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode node) { if ((node.getParent()) == null) { return; } java.lang.String nodeName = enquote(node.getId()); java.time.Instant startInstant = node.getStartInstant(); java.time.Instant endInstant = node.getEndInstant(); boolean priorityClash = node.hasPriorityClash(); java.lang.String fromTimestamp = startInstant.toString(); java.lang.String toTimestamp = (endInstant == null) ? ""..."" : endInstant.toString(); java.lang.String optionalColor = (priorityClash) ? "",color=\""red\"""" : """"; java.lang.String label = ((((((node.getZoneInfosString()) + ""\nFrom="") + fromTimestamp) + "" to "") + toTimestamp) + ""\nPeriod count="") + (node.getPeriodCount()); writeLine((((((nodeName + ""[label=\"""") + label) + ""\"""") + optionalColor) + ""];"")); for (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode child : node.getChildren()) { writeLine((((nodeName + "" -> "") + (enquote(child.getId()))) + "";"")); } }",6d3698274f718078e5a1ab5cb762cc9ebb56eb50,"@java.lang.Override public void visit(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode node) { if (node.isRoot()) { return; } java.lang.String nodeName = enquote(node.getId()); java.time.Instant startInstant = node.getStartInstant(); java.time.Instant endInstant = node.getEndInstant(); boolean priorityClash = node.hasPriorityClash(); java.lang.String fromTimestamp = startInstant.toString(); java.lang.String toTimestamp = endInstant.toString(); java.lang.String optionalColor = (priorityClash) ? "",color=\""red\"""" : """"; java.lang.String label = ((((((node.getZoneInfosString()) + ""\nFrom="") + fromTimestamp) + "" to "") + toTimestamp) + ""\nPeriod count="") + (node.getPeriodCount()); writeLine((((((nodeName + ""[label=\"""") + label) + ""\"""") + optionalColor) + ""];"")); for (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode child : node.getChildren()) { writeLine((((nodeName + "" -> "") + (enquote(child.getId()))) + "";"")); } }",2132fbf28ca1a6f1d4ac3ee4df2b8a27b12cc1fb,2018-03-20 10:55:54,4
636542,tzlookup_generator_src_main_java_com_android_libcore_timezone_tzlookup_zonetree_CountryZoneTree.java,,,@java.lang.Override public void visit(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode node) { if ((node.getParent()) == null) { return; } if ((node.getChildrenCount()) == 1) { com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode child = node.getChildren().iterator().next(); node.removeChild(child); int periodCountAdjustment = child.getPeriodCount(); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode descendant = child; while ((descendant.getChildrenCount()) == 1) { descendant = descendant.getChildren().iterator().next(); periodCountAdjustment += descendant.getPeriodCount(); } for (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode newChild : descendant.getChildren()) { node.addChild(newChild); } node.adjustPeriodCount(periodCountAdjustment); } },5443c0e80916ef35a3b6ab19c587d9957f6c445a,@java.lang.Override public void visit(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode node) { if (node.isRoot()) { return; } if ((node.getChildrenCount()) == 1) { com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode child = node.getChildren().iterator().next(); node.removeChild(child); int periodCountAdjustment = child.getPeriodCount(); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode descendant = child; while ((descendant.getChildrenCount()) == 1) { descendant = descendant.getChildren().iterator().next(); periodCountAdjustment += descendant.getPeriodCount(); } for (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode newChild : descendant.getChildren()) { node.addChild(newChild); } node.adjustPeriodCount(periodCountAdjustment); } },172346539987db2b4b81bcf55f841cd9716e9b9c,2018-03-20 10:55:54,4
636542,tzlookup_generator_src_main_java_com_android_libcore_timezone_tzlookup_zonetree_CountryZoneTree.java,,,java.time.Instant getStartInstant() { int index = (primaryZoneInfo.getZoneOffsetPeriodCount()) - (((periodOffset) + (periodCount)) - 1); return primaryZoneInfo.getZoneOffsetPeriod(index).getStartInstant(); },b55fd07985916dce8be546ecdbcf9eace3a1c4ac,java.time.Instant getStartInstant() { int offset = ((periodOffset) + (periodCount)) - 1; int index = (primaryZoneInfo.getZoneOffsetPeriodCount()) - offset; return primaryZoneInfo.getZoneOffsetPeriod(index).getStartInstant(); },11a7817c58159cd3ec63bae643d3d6924b2b4758,2018-03-20 10:55:54,4
636542,tzlookup_generator_src_main_java_com_android_libcore_timezone_tzlookup_zonetree_ZoneInfo.java,,,public java.lang.String getId() { return timeZone.getID(); },afcaa02da926c93d218b4708626cedcd711fffc5,public java.lang.String getZoneId() { return zoneId; },cb6ec7927d29a311470df519b3cd365e95fc7f69,2018-03-20 10:55:54,4
636542,tzlookup_generator_src_main_java_com_android_libcore_timezone_tzlookup_zonetree_CountryZoneTree.java,,,"java.lang.String getZoneInfosString() { return zoneInfos.stream().map(( z) -> (((z.getId()) + ""("") + (z.getPriority())) + "")"").collect(java.util.stream.Collectors.toList()).toString(); }",e9821c19f4bf2ada0b25309431ffdc03dd5424a4,"java.lang.String getZoneInfosString() { return zoneInfos.stream().map(( z) -> (((z.getZoneId()) + ""("") + (z.getPriority())) + "")"").collect(java.util.stream.Collectors.toList()).toString(); }",581961f5e28499106218812ccd88500714d0a8ae,2018-03-20 10:55:54,4
636542,tzlookup_generator_src_main_java_com_android_libcore_timezone_tzlookup_zonetree_ZoneInfo.java,,,"public static com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo create(com.ibm.icu.text.TimeZoneNames timeZoneNames, com.ibm.icu.util.BasicTimeZone timeZone, int priority, java.time.Instant startInclusive, java.time.Instant endExclusive) { java.util.List<com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod> zoneOffsetPeriods = new java.util.ArrayList<>(); java.time.Instant start = startInclusive; do { com.ibm.icu.util.TimeZoneTransition transition = timeZone.getNextTransition(start.toEpochMilli(), true); java.time.Instant end; if (transition == null) { end = endExclusive; } else { com.ibm.icu.util.TimeZoneTransition nextTransition = timeZone.getNextTransition(transition.getTime(), false); if (nextTransition != null) { end = java.time.Instant.ofEpochMilli(nextTransition.getTime()); } else { end = endExclusive; } } com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod zoneOffsetPeriod = com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod.create(timeZoneNames, timeZone, start, end); zoneOffsetPeriods.add(zoneOffsetPeriod); start = end; } while (start.isBefore(endExclusive) ); return new com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo(timeZone, priority, zoneOffsetPeriods); }",c080b4877b94630c43f0a55c2ac4ff243e2b0953,"public static com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo create(com.ibm.icu.text.TimeZoneNames timeZoneNames, com.ibm.icu.util.BasicTimeZone timeZone, int priority, java.time.Instant startInclusive, java.time.Instant endExclusive) { java.util.List<com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod> zoneOffsetPeriods = new java.util.ArrayList<>(); java.time.Instant start = startInclusive; do { com.ibm.icu.util.TimeZoneTransition transition = timeZone.getNextTransition(start.toEpochMilli(), true); java.time.Instant end; if (transition == null) { end = endExclusive; } else { com.ibm.icu.util.TimeZoneTransition nextTransition = timeZone.getNextTransition(transition.getTime(), false); if (nextTransition != null) { end = java.time.Instant.ofEpochMilli(nextTransition.getTime()); } else { end = endExclusive; } } com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod zoneOffsetPeriod = com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod.create(timeZoneNames, timeZone, start, end); zoneOffsetPeriods.add(zoneOffsetPeriod); start = end; } while (start.isBefore(endExclusive) ); return new com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo(timeZone.getID(), priority, zoneOffsetPeriods); }",2f6a52ef716b4cf491bd691768eaf65185633674,2018-03-20 10:55:54,4
636542,tzlookup_generator_src_main_java_com_android_libcore_timezone_tzlookup_zonetree_ZoneInfo.java,,,"@java.lang.Override public java.lang.String toString() { return ((((""ZoneInfo{"" + ""priority="") + (priority)) + "", timeZone="") + (timeZone.getID())) + '}'; }",842ef10060f0c9b62c65e4975d23b09f0a8b62f8,"@java.lang.Override public java.lang.String toString() { return ((((""ZoneInfo{"" + ""priority="") + (priority)) + "", zoneId="") + (zoneId)) + '}'; }",5ca51756099cc0efd22cc7b7b5e3840d35bf12f9,2018-03-20 10:55:54,4
636542,tzlookup_generator_src_main_java_com_android_libcore_timezone_tzlookup_zonetree_ZoneOffsetPeriod.java,,,"public static com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod create(com.ibm.icu.text.TimeZoneNames timeZoneNames, com.ibm.icu.util.BasicTimeZone timeZone, java.time.Instant start, java.time.Instant end) { int[] offsets = new int[2]; long startMillis = start.toEpochMilli(); timeZone.getOffset(startMillis, false, offsets); java.lang.String canonicalID = com.ibm.icu.util.TimeZone.getCanonicalID(timeZone.getID()); com.ibm.icu.text.TimeZoneNames.NameType longNameType = ((offsets[1]) == 0) ? TimeZoneNames.NameType.LONG_STANDARD : TimeZoneNames.NameType.LONG_DAYLIGHT; java.lang.String longName = timeZoneNames.getDisplayName(canonicalID, longNameType, startMillis); return new com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod(start, end, offsets[0], offsets[1], longName); }",26842d8be8ed44280bd6ba5d0fe4dc57418788ec,"public static com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod create(com.ibm.icu.text.TimeZoneNames timeZoneNames, com.ibm.icu.util.TimeZone timeZone, java.time.Instant start, java.time.Instant end) { int[] offsets = new int[2]; long startMillis = start.toEpochMilli(); timeZone.getOffset(startMillis, false, offsets); java.lang.String canonicalID = com.ibm.icu.util.TimeZone.getCanonicalID(timeZone.getID()); com.ibm.icu.text.TimeZoneNames.NameType longNameType = ((offsets[1]) == 0) ? TimeZoneNames.NameType.LONG_STANDARD : TimeZoneNames.NameType.LONG_DAYLIGHT; java.lang.String longName = timeZoneNames.getDisplayName(canonicalID, longNameType, startMillis); return new com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod(start, end, offsets[0], offsets[1], longName); }",4eab2fb4e4657ece849a0a3abd985288f8911047,2018-03-20 10:55:54,4
636542,tzlookup_generator_src_main_java_com_android_libcore_timezone_tzlookup_zonetree_CountryZoneTree.java,,,private void determineNodePriority(java.util.List<com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo> zoneInfos) { com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo primaryCandidate = null; int priorityCount = 0; for (com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo zoneInfo : zoneInfos) { if ((primaryCandidate == null) || ((primaryCandidate.getPriority()) < (zoneInfo.getPriority()))) { primaryCandidate = zoneInfo; priorityCount = 1; } else if ((primaryCandidate.getPriority()) == (zoneInfo.getPriority())) { priorityCount++; } } primaryZoneInfo = primaryCandidate; priorityClash = priorityCount > 1; },bac72d01238e974ba8a0421b16f31db70a16f103,private void initNodePriority() { com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo priorityCandidate = null; int priorityCount = 0; for (com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo zoneInfo : zoneInfos) { if ((priorityCandidate == null) || ((priorityCandidate.getPriority()) < (zoneInfo.getPriority()))) { priorityCandidate = zoneInfo; priorityCount = 1; } else if ((priorityCandidate.getPriority()) == (zoneInfo.getPriority())) { priorityCount++; } } primaryZoneInfo = priorityCandidate; priorityClash = priorityCount > 1; },60cb696ac129aafa14430e7751a6b1e29c8ddc29,2018-03-20 10:55:54,4
636542,tzlookup_generator_src_main_java_com_android_libcore_timezone_tzlookup_zonetree_CountryZoneTree.java,,,public void compressTree() { class CompressionVisitor implements com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNodeVisitor { @java.lang.Override public void visit(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode node) { if ((node.getParent()) == null) { return; } if ((node.getChildrenCount()) == 1) { com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode child = node.getChildren().iterator().next(); node.removeChild(child); int periodCountAdjustment = child.getPeriodCount(); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode descendant = child; while ((descendant.getChildrenCount()) == 1) { descendant = descendant.getChildren().iterator().next(); periodCountAdjustment += descendant.getPeriodCount(); } for (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode newChild : descendant.getChildren()) { node.addChild(newChild); } node.adjustPeriodCount(periodCountAdjustment); } } } root.visitSelfThenChildrenRecursive(new CompressionVisitor()); },aef2648046a074e184dde41ff1cafa78d3472436,private static void compressTree(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode root) { class CompressionVisitor implements com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNodeVisitor { @java.lang.Override public void visit(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode node) { if (node.isRoot()) { return; } if ((node.getChildrenCount()) == 1) { com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode child = node.getChildren().iterator().next(); node.removeChild(child); int periodCountAdjustment = child.getPeriodCount(); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode descendant = child; while ((descendant.getChildrenCount()) == 1) { descendant = descendant.getChildren().iterator().next(); periodCountAdjustment += descendant.getPeriodCount(); } for (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode newChild : descendant.getChildren()) { node.addChild(newChild); } node.adjustPeriodCount(periodCountAdjustment); } } } root.visitSelfThenChildrenRecursive(new CompressionVisitor()); },4451651b421b637e33708ede03d5e6d94367eb26,2018-03-20 10:55:54,4
643534,services_core_java_com_android_server_BluetoothManagerService.java,"public void binderDied() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (""Binder is dead - unregister "" + (mPackageName))); } if (isBleAppPresent()) { return; } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Disabling LE only mode after application crash""); } try { mBluetoothLock.readLock().lock(); if (((mBluetooth) != null) && ((mBluetooth.getState()) == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON))) { mEnable = false; mBluetooth.onBrEdrDown(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""Unable to call onBrEdrDown"", e); } finally { mBluetoothLock.readLock().unlock(); } }",3cd1ce7c097fb64d4e5eee07f6c6e62d9ad03dfb,"public void binderDied() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (""Binder is dead - unregister "" + (mPackageName))); } java.util.Iterator<android.os.IBinder> list_iterator = mBleApps.keySet().iterator(); while (list_iterator.hasNext()) { android.os.IBinder token = list_iterator.next(); com.android.server.BluetoothManagerService.ClientDeathRecipient deathRec = mBleApps.get(token); if (deathRec.equals(this)) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (""Remove this BLE app "" + (mPackageName))); } mBleApps.remove(token); break; } } if (isBleAppPresent()) { return; } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Disabling LE only mode after application crash""); } try { mBluetoothLock.readLock().lock(); if (((mBluetooth) != null) && ((mBluetooth.getState()) == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON))) { mEnable = false; mBluetooth.onBrEdrDown(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""Unable to call onBrEdrDown"", e); } finally { mBluetoothLock.readLock().unlock(); } }",7b1ef70ec43ddb0752f62fc303448c2d8b2525c5,"public void binderDied() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (""Binder is dead - unregister "" + (mPackageName))); } for (java.util.Map.Entry<android.os.IBinder, com.android.server.BluetoothManagerService.ClientDeathRecipient> entry : mBleApps.entrySet()) { android.os.IBinder token = entry.getKey(); com.android.server.BluetoothManagerService.ClientDeathRecipient deathRec = entry.getValue(); if (deathRec.equals(this)) { mBleApps.remove(token); break; } } if (isBleAppPresent()) { return; } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Disabling LE only mode after application crash""); } try { mBluetoothLock.readLock().lock(); if (((mBluetooth) != null) && ((mBluetooth.getState()) == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON))) { mEnable = false; mBluetooth.onBrEdrDown(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""Unable to call onBrEdrDown"", e); } finally { mBluetoothLock.readLock().unlock(); } }",38052584aa297723cd21484f8792ea0a521708c3,2018-03-20 19:20:10,5
643526,src_com_android_bluetooth_pbapclient_PbapClientConnectionHandler.java,"private boolean connectSocket() { try { if ((mPseRec) == null) { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, (""connectSocket: UUID: "" + (BluetoothUuid.PBAP_PSE.getUuid()))); mSocket = mDevice.createRfcommSocketToServiceRecord(BluetoothUuid.PBAP_PSE.getUuid()); } else if ((mPseRec.getL2capPsm()) != (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.L2CAP_INVALID_PSM)) { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, (""connectSocket: PSM: "" + (mPseRec.getL2capPsm()))); mSocket = mDevice.createL2capSocket(mPseRec.getL2capPsm()); } else { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, (""connectSocket: channel: "" + (mPseRec.getRfcommChannelNumber()))); mSocket = mDevice.createRfcommSocket(mPseRec.getRfcommChannelNumber()); } if ((mSocket) != null) { mSocket.connect(); return true; } else { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ""Could not create socket""); } } catch (java.io.IOException e) { android.util.Log.e(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ""Error while connecting socket"", e); } return false; }",d94a5d5965a50a9e9f2d4d64445f37974274400c,"private boolean connectSocket() { try { if ((mPseRec) == null) { if (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.DBG) android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, (""connectSocket: UUID: "" + (BluetoothUuid.PBAP_PSE.getUuid()))); mSocket = mDevice.createRfcommSocketToServiceRecord(BluetoothUuid.PBAP_PSE.getUuid()); } else if ((mPseRec.getL2capPsm()) != (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.L2CAP_INVALID_PSM)) { if (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.DBG) android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, (""connectSocket: PSM: "" + (mPseRec.getL2capPsm()))); mSocket = mDevice.createL2capSocket(mPseRec.getL2capPsm()); } else { if (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.DBG) android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, (""connectSocket: channel: "" + (mPseRec.getRfcommChannelNumber()))); mSocket = mDevice.createRfcommSocket(mPseRec.getRfcommChannelNumber()); } if ((mSocket) != null) { mSocket.connect(); return true; } else { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ""Could not create socket""); } } catch (java.io.IOException e) { android.util.Log.e(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ""Error while connecting socket"", e); } return false; }",41dd9280f7e7c6de0125c20671d37064ea9cbb90,"private boolean connectSocket() { try { if ((mPseRec) == null) { if (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.VDBG) android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, (""connectSocket: UUID: "" + (BluetoothUuid.PBAP_PSE.getUuid()))); mSocket = mDevice.createRfcommSocketToServiceRecord(BluetoothUuid.PBAP_PSE.getUuid()); } else if ((mPseRec.getL2capPsm()) != (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.L2CAP_INVALID_PSM)) { if (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.VDBG) android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, (""connectSocket: PSM: "" + (mPseRec.getL2capPsm()))); mSocket = mDevice.createL2capSocket(mPseRec.getL2capPsm()); } else { if (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.VDBG) android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, (""connectSocket: channel: "" + (mPseRec.getRfcommChannelNumber()))); mSocket = mDevice.createRfcommSocket(mPseRec.getRfcommChannelNumber()); } if ((mSocket) != null) { mSocket.connect(); return true; } else { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ""Could not create socket""); } } catch (java.io.IOException e) { android.util.Log.e(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ""Error while connecting socket"", e); } return false; }",a8c9086a0c648ba2f9ac329ecd7b4f553aaf70a7,2018-03-20 20:22:28,3
643526,src_com_android_bluetooth_pbapclient_PbapClientService.java,"private void removeUncleanAccounts() { android.accounts.AccountManager accountManager = android.accounts.AccountManager.get(this); android.accounts.Account[] accounts = accountManager.getAccountsByType(getString(R.string.pbap_account_type)); android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientService.TAG, ((""Found "" + (accounts.length)) + "" unclean accounts"")); for (android.accounts.Account acc : accounts) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientService.TAG, (""Deleting "" + acc)); accountManager.removeAccountExplicitly(acc); } try { getContentResolver().delete(CallLog.Calls.CONTENT_URI, null, null); } catch (java.lang.IllegalArgumentException e) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientService.TAG, ""Call Logs could not be deleted, they may not exist yet.""); } }",1b43c805e5c52577f51aeb5de1d88b7b8f339cca,"private void removeUncleanAccounts() { android.accounts.AccountManager accountManager = android.accounts.AccountManager.get(this); android.accounts.Account[] accounts = accountManager.getAccountsByType(getString(R.string.pbap_account_type)); if (com.android.bluetooth.pbapclient.PbapClientService.DBG) android.util.Log.d(com.android.bluetooth.pbapclient.PbapClientService.TAG, ((""Found "" + (accounts.length)) + "" unclean accounts"")); for (android.accounts.Account acc : accounts) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientService.TAG, (""Deleting "" + acc)); accountManager.removeAccountExplicitly(acc); } try { getContentResolver().delete(CallLog.Calls.CONTENT_URI, null, null); } catch (java.lang.IllegalArgumentException e) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientService.TAG, ""Call Logs could not be deleted, they may not exist yet.""); } }",dece85a62974e7b0a9cd1dd38e076fd3dd751f20,"private void removeUncleanAccounts() { android.accounts.AccountManager accountManager = android.accounts.AccountManager.get(this); android.accounts.Account[] accounts = accountManager.getAccountsByType(getString(R.string.pbap_account_type)); if (com.android.bluetooth.pbapclient.PbapClientService.VDBG) android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientService.TAG, ((""Found "" + (accounts.length)) + "" unclean accounts"")); for (android.accounts.Account acc : accounts) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientService.TAG, (""Deleting "" + acc)); accountManager.removeAccountExplicitly(acc); } try { getContentResolver().delete(CallLog.Calls.CONTENT_URI, null, null); } catch (java.lang.IllegalArgumentException e) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientService.TAG, ""Call Logs could not be deleted, they may not exist yet.""); } }",66ea30064c60e0224c9b336e170cedac906c5739,2018-03-20 20:22:28,3
643560,harnesses_tradefed_src_com_android_tradefed_targetprep_VtsCoveragePreparer.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"java.lang.String getArtifactFetcher(com.android.tradefed.build.IBuildInfo buildInfo) { com.android.tradefed.util.VtsVendorConfigFileUtil configFileUtil = new com.android.tradefed.util.VtsVendorConfigFileUtil(); if (configFileUtil.LoadVendorConfig(buildInfo)) { return configFileUtil.GetVendorConfigVariable(""build_artifact_fetcher""); } return null; }",9e09ee1f852695bcba00ea0c76b85101bb95452f,"@com.android.annotations.VisibleForTesting java.lang.String getArtifactFetcher(com.android.tradefed.build.IBuildInfo buildInfo) { com.android.tradefed.util.VtsVendorConfigFileUtil configFileUtil = new com.android.tradefed.util.VtsVendorConfigFileUtil(); if (configFileUtil.LoadVendorConfig(buildInfo)) { return configFileUtil.GetVendorConfigVariable(""build_artifact_fetcher""); } return null; }",1db97c2a0e6c766196ce51ddf11d84b98cbed42e,2018-03-21 00:19:59,2
643560,harnesses_tradefed_src_com_android_tradefed_targetprep_VtsCoveragePreparer.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,java.io.File createTempDir(com.android.tradefed.device.ITestDevice device) throws java.io.IOException { return com.android.tradefed.util.FileUtil.createTempDir(device.getSerialNumber()); },b0bab5fe4ae46fecf4fd231059eb53ad4b58060a,@com.android.annotations.VisibleForTesting java.io.File createTempDir(com.android.tradefed.device.ITestDevice device) throws java.io.IOException { return com.android.tradefed.util.FileUtil.createTempDir(device.getSerialNumber()); },c5102c1c760d0d35e213838168f30184dc0391f3,2018-03-21 00:19:59,2
642684,src_com_android_bluetooth_newavrcp_AvrcpTargetService.java,"@java.lang.Override protected boolean start() { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""Starting the AVRCP Target Service""); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = this; mCurrentData = new com.android.bluetooth.avrcp.MediaData(null, null, null); mNativeInterface = com.android.bluetooth.avrcp.AvrcpNativeInterface.getInterface(); mReceiver = new com.android.bluetooth.avrcp.AvrcpTargetService.AvrcpBroadcastReceiver(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothA2dp.ACTION_ACTIVE_DEVICE_CHANGED); registerReceiver(mReceiver, filter); return true; }",ec1cb27b85aece5656c9afbe330092243ab38b5e,"@java.lang.Override protected boolean start() { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""Starting the AVRCP Target Service""); mCurrentData = new com.android.bluetooth.avrcp.MediaData(null, null, null); mNativeInterface = com.android.bluetooth.avrcp.AvrcpNativeInterface.getInterface(); mReceiver = new com.android.bluetooth.avrcp.AvrcpTargetService.AvrcpBroadcastReceiver(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothA2dp.ACTION_ACTIVE_DEVICE_CHANGED); registerReceiver(mReceiver, filter); return true; }",a31c206286eb3d4f1b19500e461e3fc3312cca17,"@java.lang.Override protected boolean start() { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""Starting the AVRCP Target Service""); mCurrentData = new com.android.bluetooth.avrcp.MediaData(null, null, null); mReceiver = new com.android.bluetooth.avrcp.AvrcpTargetService.AvrcpBroadcastReceiver(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothA2dp.ACTION_ACTIVE_DEVICE_CHANGED); registerReceiver(mReceiver, filter); return true; }",222208054098d3a824a36a85a61173be6e6ef968,2018-03-21 00:39:03,10
639684,services_core_java_com_android_server_BluetoothManagerService.java,"private void addActiveLog(int reason, java.lang.String packageName, boolean enable) { synchronized(mActiveLogs) { if ((mActiveLogs.size()) > (com.android.server.BluetoothManagerService.ACTIVE_LOG_MAX_SIZE)) { mActiveLogs.remove(); } mActiveLogs.add(new com.android.server.BluetoothManagerService.ActiveLog(reason, packageName, enable, java.lang.System.currentTimeMillis())); } }",e2729a73e930f72395c9c56d9e9697a172a15323,"private void addActiveLog(int reason, java.lang.String packageName, boolean enable) { synchronized(mActiveLogs) { if ((mActiveLogs.size()) > (com.android.server.BluetoothManagerService.ACTIVE_LOG_MAX_SIZE)) { mActiveLogs.remove(); } mActiveLogs.add(new com.android.server.BluetoothManagerService.ActiveLog(reason, packageName, enable, java.lang.System.currentTimeMillis())); if (enable) { android.util.StatsLog.write_non_chained(StatsLog.BLUETOOTH_ENABLED_STATE_CHANGED, android.os.Binder.getCallingUid(), null, StatsLog.BLUETOOTH_ENABLED_STATE_CHANGED__STATE__ENABLED, reason, packageName); } else { android.util.StatsLog.write_non_chained(StatsLog.BLUETOOTH_ENABLED_STATE_CHANGED, android.os.Binder.getCallingUid(), null, StatsLog.BLUETOOTH_ENABLED_STATE_CHANGED__STATE__DISABLED, reason, packageName); } } }",9edabe60d46e91c8da84c950f671d68d5fc1a014,"private void addActiveLog(int reason, java.lang.String packageName, boolean enable) { synchronized(mActiveLogs) { if ((mActiveLogs.size()) > (com.android.server.BluetoothManagerService.ACTIVE_LOG_MAX_SIZE)) { mActiveLogs.remove(); } mActiveLogs.add(new com.android.server.BluetoothManagerService.ActiveLog(reason, packageName, enable, java.lang.System.currentTimeMillis())); } int state = (enable) ? android.util.StatsLog.BLUETOOTH_ENABLED_STATE_CHANGED__STATE__ENABLED : android.util.StatsLog.BLUETOOTH_ENABLED_STATE_CHANGED__STATE__DISABLED; android.util.StatsLog.write_non_chained(StatsLog.BLUETOOTH_ENABLED_STATE_CHANGED, android.os.Binder.getCallingUid(), null, state, reason, packageName); }",1834ad4e786b16ad2f480316bd496ed8edfb91dd,2018-03-21 16:25:26,2
642681,core_java_android_net_IpSecManager.java,public java.io.FileDescriptor getSocket() { if ((mPfd) == null) { return null; } return mPfd.getFileDescriptor(); },df5f20459a9e8113f799e7a5fbdca67b5af0ba25,@android.annotation.NonNull public java.io.FileDescriptor getSocket() { if ((mPfd) == null) { return null; } return mPfd.getFileDescriptor(); },d93966f2660b54baa3b24df61f5751ff3b8e1f49,public java.io.FileDescriptor getSocket() { if ((mPfd) == null) { return null; } return mPfd.getFileDescriptor(); },df5f20459a9e8113f799e7a5fbdca67b5af0ba25,2018-03-21 18:49:42,5
642681,core_java_android_net_IpSecManager.java,public void addAddress(android.net.LinkAddress address) throws java.io.IOException { },dd3c6d4106276aa3daca261afd0d936df1d3f5b1,public void addAddress(@android.annotation.NonNull android.net.LinkAddress address) throws java.io.IOException { },b1eff02f6ae3e43b5c87ecf50d214828707ae95a,"@android.annotation.SystemApi public void addAddress(@android.annotation.NonNull android.net.LinkAddress address) throws java.io.IOException { try { mService.addAddressToTunnelInterface(mResourceId, address); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",05f5848cf39aa7aecd4c7dc550a4ae44f1dcb6d1,2018-03-21 18:49:42,5
642681,core_java_android_net_IpSecManager.java,public void removeAddress(android.net.LinkAddress address) throws java.io.IOException { },5905898b0b8ed32795b9bfd8626cd360d9d5e545,public void removeAddress(@android.annotation.NonNull android.net.LinkAddress address) throws java.io.IOException { },0110ed28dda934d44da9b62ac56bf2727bf634cd,"@android.annotation.SystemApi public void removeAddress(@android.annotation.NonNull android.net.LinkAddress address) throws java.io.IOException { try { mService.removeAddressFromTunnelInterface(mResourceId, address); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",a570d0e8bc7ab51d77d17275a0c7b4d6cea119c5,2018-03-21 18:49:42,5
645178,src_com_android_bluetooth_hearingaid_HearingAidService.java,void setActiveDevice(android.bluetooth.BluetoothDevice device) { if (device == null) { for (android.bluetooth.BluetoothDevice smDevice : mStateMachines.keySet()) { mStateMachines.get(smDevice).sendMessage(HearingAidStateMachine.DISCONNECT); } } },e7c3209ff385faeec4a83b97d57e0f5e3e096720,"public void setActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""setActiveDevice"" + device)); } if ((device == null) && ((mActiveDeviceHiSyncId) != (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID))) { reportActiveDevice(null); mActiveDeviceHiSyncId = android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID; return; } java.lang.Long deviceHiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); if (deviceHiSyncId != (mActiveDeviceHiSyncId)) { reportActiveDevice(device); mActiveDeviceHiSyncId = deviceHiSyncId; } }",c28bf812225926b53318fa48992cdb089b706d23,"public void setActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""setActiveDevice:"" + device)); } if (device == null) { if ((mActiveDeviceHiSyncId) != (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID)) { reportActiveDevice(null); mActiveDeviceHiSyncId = android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID; } return; } java.lang.Long deviceHiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); if (deviceHiSyncId != (mActiveDeviceHiSyncId)) { reportActiveDevice(device); mActiveDeviceHiSyncId = deviceHiSyncId; } }",26589380b02ff0cf963a46bca3dc2ac36d25341e,2018-03-21 23:53:50,4
645178,src_com_android_bluetooth_hearingaid_HearingAidService.java,"private void broadcastActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""broadcastActiveDevice("" + device) + "")"")); } }",6f2be7f1aa22b1cbaf84f240b08b6160bbca483c,"boolean isActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""isActiveDevice:"" + device)); } return (mActiveDeviceHiSyncId) == (mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID)); }",835634da7ed385fb85aaf62989adac844688b823,"boolean isActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""isActiveDevice:"" + device)); } return (((getConnectionState(device)) == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && ((mActiveDeviceHiSyncId) != (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID))) && ((mActiveDeviceHiSyncId) == (mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID))); }",0287ad53c689a16e3cb1d548a76c16c6b6eb7151,2018-03-21 23:53:50,4
645178,src_com_android_bluetooth_hearingaid_HearingAidService.java,"boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""disconnect(): "" + device)); } long hiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""Ignored disconnect request for "" + device) + "" : no state machine"")); } else { sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } if (hiSyncId == (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID)) { return true; } for (android.bluetooth.BluetoothDevice storedDevice : mDeviceHiSyncIdMap.keySet()) { if (((mDeviceHiSyncIdMap.get(storedDevice)) != hiSyncId) || (storedDevice.equals(device))) { continue; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(storedDevice); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""Ignored disconnect request for "" + device) + "" : no state machine"")); continue; } sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } return true; }",a78a0093e65f7e3e0432b2425e76fd235bdbc1b7,"boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""disconnect(): "" + device)); } long hiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""Ignored disconnect request for "" + device) + "" : no state machine"")); } else { sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } if (hiSyncId == (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID)) { return true; } for (android.bluetooth.BluetoothDevice storedDevice : mDeviceHiSyncIdMap.keySet()) { if (((mDeviceHiSyncIdMap.getOrDefault(storedDevice, BluetoothHearingAid.HI_SYNC_ID_INVALID)) != hiSyncId) || (storedDevice.equals(device))) { continue; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(storedDevice); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""Ignored disconnect request for "" + device) + "" : no state machine"")); continue; } sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } return true; }",170ab45d72d082b74803895e9013fb72d9f0cb84,"boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""disconnect(): "" + device)); } if (device == null) { return false; } long hiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""Ignored disconnect request for "" + device) + "" : no state machine"")); } else { sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } if (hiSyncId == (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID)) { return true; } for (android.bluetooth.BluetoothDevice storedDevice : mDeviceHiSyncIdMap.keySet()) { if (((mDeviceHiSyncIdMap.getOrDefault(storedDevice, BluetoothHearingAid.HI_SYNC_ID_INVALID)) != hiSyncId) || (storedDevice.equals(device))) { continue; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(storedDevice); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""Ignored disconnect request for "" + device) + "" : no state machine"")); continue; } sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } return true; }",f26a18b744c306f9d1863f0728dc8c8e973a9876,2018-03-21 23:53:50,4
645178,src_com_android_bluetooth_hearingaid_HearingAidService.java,"private synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((((""connectionStateChanged: unexpected invocation. device="" + device) + "" fromState="") + fromState) + "" toState="") + toState)); return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { mActiveDeviceSet.add(device); } else if (mActiveDeviceSet.contains(device)) { mActiveDeviceSet.remove(device); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (device + "" is unbond. Remove state machine"")); } removeStateMachine(device); } } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (mActiveDeviceSet.isEmpty())) { mAudioManager.setHearingAidDeviceConnectionState(device, BluetoothProfile.STATE_DISCONNECTED); broadcastActiveDevice(null); } if ((toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && ((mActiveDeviceSet.size()) == 1)) { mAudioManager.setHearingAidDeviceConnectionState(device, BluetoothProfile.STATE_CONNECTED); broadcastActiveDevice(device); } }",d7ce973923848edce7a7ab003701d2fcfccd978a,"private synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((((""connectionStateChanged: unexpected invocation. device="" + device) + "" fromState="") + fromState) + "" toState="") + toState)); return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { setActiveDevice(device); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (getConnectedDevices().isEmpty())) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (device + "" is unbond. Remove state machine"")); } removeStateMachine(device); } } }",e261f5a772235a212c89f265dcc96063ba64749b,"@android.support.annotation.VisibleForTesting synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((((""connectionStateChanged: unexpected invocation. device="" + device) + "" fromState="") + fromState) + "" toState="") + toState)); return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { setActiveDevice(device); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (getConnectedDevices().isEmpty())) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (device + "" is unbond. Remove state machine"")); } removeStateMachine(device); } } }",42d4d31c1b27ae688469e43712a28b81c9e62b7e,2018-03-21 23:53:50,4
645178,src_com_android_bluetooth_hearingaid_HearingAidService.java,long getHiSyncId(android.bluetooth.BluetoothDevice device) { if (!(mDeviceHiSyncIdMap.containsKey(device))) { return android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID; } return mDeviceHiSyncIdMap.get(device); },ed4f574eeac13251c302c50bdce683b3a037ab87,"long getHiSyncId(android.bluetooth.BluetoothDevice device) { return mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); }",7b04cf216f13bcf783b38eabe77bdc762ddefc2e,"long getHiSyncId(android.bluetooth.BluetoothDevice device) { if (device == null) { return android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID; } return mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); }",ac1f59a3536b3afec608ac58dfe2ea41aa07ca05,2018-03-21 23:53:50,4
645400,src_com_android_bluetooth_hid_HidDeviceService.java,"synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if ((mUserUid) != 0) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""registerApp(): failed because another app is registered""); return false; } mUserUid = android.os.Binder.getCallingUid(); if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, (""registerApp(): calling uid="" + (mUserUid))); } mCallback = callback; return mHidDeviceNativeInterface.registerApp(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null ? null : inQos.toArray()), (outQos == null ? null : outQos.toArray())); }",b2d65a63ae44c69993d15c553f526eb12f9e2902,"synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { android.app.ActivityManager activityManager = ((android.app.ActivityManager) (getSystemService(com.android.bluetooth.hid.ACTIVITY_SERVICE))); if ((mUserUid) != 0) { int currentUserImportance = activityManager.getUidImportance(mUserUid); if (currentUserImportance > (ActivityManager.RunningAppProcessInfo.IMPORTANCE_VISIBLE)) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""registerApp(): current user is not visible""); unregisterApp(); } else { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""registerApp(): failed because another app is registered""); return false; } } if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, (""registerApp(): calling uid="" + (mUserUid))); } int callingUid = android.os.Binder.getCallingUid(); mUserUid = callingUid; mCallback = callback; return mHidDeviceNativeInterface.registerApp(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null ? null : inQos.toArray()), (outQos == null ? null : outQos.toArray())); }",f245de29f2a2de3183361c0fd54aea65282c14a5,"synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if ((mUserUid) != 0) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""registerApp(): failed because another app is registered""); return false; } int callingUid = android.os.Binder.getCallingUid(); if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, (""registerApp(): calling uid="" + callingUid)); } if ((callingUid >= (FIRST_APPLICATION_UID)) && ((mActivityManager.getUidImportance(callingUid)) > (com.android.bluetooth.hid.HidDeviceService.FOREGROUND_IMPORTANCE_CUTOFF))) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""registerApp(): failed because the app is not foreground""); return false; } mUserUid = callingUid; mCallback = callback; return mHidDeviceNativeInterface.registerApp(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null ? null : inQos.toArray()), (outQos == null ? null : outQos.toArray())); }",1d2622a85b7b18c839fdbae6594c31a47b2e5850,2018-03-22 21:45:12,9
629548,core_java_android_bluetooth_BluetoothHidDevice.java,"public boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.BluetoothHidDeviceCallback callback) { android.util.Log.v(android.bluetooth.BluetoothHidDevice.TAG, (((((((""registerApp(): sdp="" + sdp) + "" inQos="") + inQos) + "" outQos="") + outQos) + "" callback="") + callback)); boolean result = false; if ((sdp == null) || (callback == null)) { return false; } final android.bluetooth.IBluetoothHidDevice service = mService; if (service != null) { try { android.bluetooth.BluetoothHidDevice.BluetoothHidDeviceCallbackWrapper cbw = new android.bluetooth.BluetoothHidDevice.BluetoothHidDeviceCallbackWrapper(callback); result = service.registerApp(sdp, inQos, outQos, cbw); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHidDevice.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothHidDevice.TAG, ""Proxy not attached to service""); } return result; }",c3b50164d70ccf8e318c98303a6ab25cbb55130b,"public boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, java.util.concurrent.Executor executor, android.bluetooth.BluetoothHidDevice.Callback callback) { android.util.Log.v(android.bluetooth.BluetoothHidDevice.TAG, (((((((((""registerApp(): sdp="" + sdp) + "" inQos="") + inQos) + "" outQos="") + outQos) + "" executor="") + executor) + "" callback="") + callback)); boolean result = false; if (sdp == null) { throw new java.lang.IllegalArgumentException(""sdp parameter cannot be null""); } if (executor == null) { throw new java.lang.IllegalArgumentException(""executor parameter cannot be null""); } if (callback == null) { throw new java.lang.IllegalArgumentException(""callback parameter cannot be null""); } final android.bluetooth.IBluetoothHidDevice service = mService; if (service != null) { try { android.bluetooth.BluetoothHidDevice.CallbackWrapper cbw = new android.bluetooth.BluetoothHidDevice.CallbackWrapper(executor, callback); result = service.registerApp(sdp, inQos, outQos, cbw); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHidDevice.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothHidDevice.TAG, ""Proxy not attached to service""); } return result; }",d90f608aa3d8c4a1f0015ba6abf995301f999e11,"public boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, java.util.concurrent.Executor executor, android.bluetooth.BluetoothHidDevice.Callback callback) { boolean result = false; if (sdp == null) { throw new java.lang.IllegalArgumentException(""sdp parameter cannot be null""); } if (executor == null) { throw new java.lang.IllegalArgumentException(""executor parameter cannot be null""); } if (callback == null) { throw new java.lang.IllegalArgumentException(""callback parameter cannot be null""); } final android.bluetooth.IBluetoothHidDevice service = mService; if (service != null) { try { android.bluetooth.BluetoothHidDevice.CallbackWrapper cbw = new android.bluetooth.BluetoothHidDevice.CallbackWrapper(executor, callback); result = service.registerApp(sdp, inQos, outQos, cbw); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHidDevice.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothHidDevice.TAG, ""Proxy not attached to service""); } return result; }",02ba7c17a7a8cbdc290f08e43524f5fb277e49bf,2018-03-22 21:50:57,4
573282,hostsidetests_incident_src_com_android_server_cts_BatteryStatsValidationTest.java,"public void testServiceForegroundDuration() throws java.lang.Exception { batteryOnScreenOff(); installPackage(com.android.server.cts.BatteryStatsValidationTest.DEVICE_SIDE_TEST_APK, true); getDevice().executeShellCommand(""am start -n com.android.server.cts.device.batterystats/.SimpleActivity""); assertValueRange(""st"", """", 5, 0, 0); runDeviceTests(com.android.server.cts.BatteryStatsValidationTest.DEVICE_SIDE_TEST_PACKAGE, "".BatteryStatsProcessStateTests"", ""testForegroundService""); assertValueRange(""st"", """", 5, ((long) (2000 * 0.8)), 4000); batteryOffScreenOn(); }",80a083182fc2c0481822d3f28f8f84bc507328f6,"public void testServiceForegroundDuration() throws java.lang.Exception { batteryOnScreenOff(); installPackage(com.android.server.cts.BatteryStatsValidationTest.DEVICE_SIDE_TEST_APK, true); getDevice().executeShellCommand(""am start -n com.android.server.cts.device.batterystats/.SimpleActivity""); assertValueRange(""st"", """", 5, 0, 0); final long startTime = java.lang.System.currentTimeMillis(); runDeviceTests(com.android.server.cts.BatteryStatsValidationTest.DEVICE_SIDE_TEST_PACKAGE, "".BatteryStatsProcessStateTests"", ""testForegroundService""); assertValueRange(""st"", """", 5, ((long) (2000 * 0.8)), ((java.lang.System.currentTimeMillis()) - startTime)); batteryOffScreenOn(); }",8bc54beabe630d3d98c54b251d328d779c91f75e,"public void testServiceForegroundDuration() throws java.lang.Exception { batteryOnScreenOff(); installPackage(com.android.server.cts.BatteryStatsValidationTest.DEVICE_SIDE_TEST_APK, true); getDevice().executeShellCommand(""am start -n com.android.server.cts.device.batterystats/.SimpleActivity""); assertValueRange(""st"", """", 5, 0, 0); final long startTime = java.lang.System.nanoTime(); runDeviceTests(com.android.server.cts.BatteryStatsValidationTest.DEVICE_SIDE_TEST_PACKAGE, "".BatteryStatsProcessStateTests"", ""testForegroundService""); assertValueRange(""st"", """", 5, ((long) (2000 * 0.8)), (((java.lang.System.nanoTime()) - startTime) / 1000000)); batteryOffScreenOn(); }",6576d20a5422b87054fb87726c98316ecdc43f7b,2018-03-22 22:25:21,7
633866,services_core_java_com_android_server_net_NetworkStatsService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public android.net.NetworkStats getDetailedUidStats(int limitUid, java.lang.String[] limitIfaces, int limitTag) { try { android.net.NetworkStats stats = getNetworkStatsUidDetail(); stats.filter(limitUid, limitIfaces, limitTag); return stats; } catch (android.os.RemoteException e) { android.util.Log.wtf(com.android.server.net.NetworkStatsService.TAG, ""Error compiling UID stats"", e); return new android.net.NetworkStats(0L, 0); } }",c7938f9695d8826032c3aa235bae7ef4ccfc7d2f,"@java.lang.Override public android.net.NetworkStats getDetailedUidStats(java.lang.String[] requiredIfaces) { try { final java.lang.String[] ifacesToQuery = com.android.internal.net.NetworkStatsFactory.augmentWithStackedInterfacesLocked(requiredIfaces); return getNetworkStatsUidDetail(ifacesToQuery); } catch (android.os.RemoteException e) { android.util.Log.wtf(com.android.server.net.NetworkStatsService.TAG, ""Error compiling UID stats"", e); return new android.net.NetworkStats(0L, 0); } }",b7835a53af11c9c125b8bfc90ba1464c50dff8d4,2018-03-23 02:38:58,13
633866,core_java_android_net_NetworkStats.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void setValues(int i, android.net.NetworkStats.Entry values) { iface[i] = values.iface; uid[i] = values.uid; set[i] = values.set; tag[i] = values.tag; metered[i] = values.metered; roaming[i] = values.roaming; defaultNetwork[i] = values.defaultNetwork; rxBytes[i] = values.rxBytes; rxPackets[i] = values.rxPackets; txBytes[i] = values.txBytes; txPackets[i] = values.txPackets; operations[i] = values.operations; }",599409568b923f00bf05c605ba15a57ac3a83389,"private void setValues(int i, android.net.NetworkStats.Entry entry) { iface[i] = entry.iface; uid[i] = entry.uid; set[i] = entry.set; tag[i] = entry.tag; metered[i] = entry.metered; roaming[i] = entry.roaming; defaultNetwork[i] = entry.defaultNetwork; rxBytes[i] = entry.rxBytes; rxPackets[i] = entry.rxPackets; txBytes[i] = entry.txBytes; txPackets[i] = entry.txPackets; operations[i] = entry.operations; }",b28bd2f1426fb8030f2eda5fcd8fb31929229792,2018-03-23 02:38:58,13
633866,tests_net_java_android_net_NetworkStatsTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testFilter_UidFilter() { final int testUid = 10101; android.net.NetworkStats.Entry entry1 = new android.net.NetworkStats.Entry(""test1"", 10100, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats.Entry entry2 = new android.net.NetworkStats.Entry(""test2"", testUid, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats.Entry entry3 = new android.net.NetworkStats.Entry(""test2"", testUid, android.net.NetworkStats.SET_DEFAULT, 123, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats stats = new android.net.NetworkStats(android.net.NetworkStatsTest.TEST_START, 3).addValues(entry1).addValues(entry2).addValues(entry3); stats.filter(testUid, null, android.net.NetworkStats.TAG_ALL); assertEquals(2, stats.size()); assertEquals(entry2, stats.getValues(0, null)); assertEquals(entry3, stats.getValues(1, null)); }",df5da16efb0086a94f80c0798c5a3a7cca339bf8,"@org.junit.Test public void testFilter_UidFilter() { final int testUid = 10101; android.net.NetworkStats.Entry entry1 = new android.net.NetworkStats.Entry(""test1"", 10100, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats.Entry entry2 = new android.net.NetworkStats.Entry(""test2"", testUid, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats.Entry entry3 = new android.net.NetworkStats.Entry(""test2"", testUid, android.net.NetworkStats.SET_DEFAULT, 123, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats stats = new android.net.NetworkStats(android.net.NetworkStatsTest.TEST_START, 3).addValues(entry1).addValues(entry2).addValues(entry3); stats.filter(testUid, android.net.NetworkStats.INTERFACES_ALL, android.net.NetworkStats.TAG_ALL); assertEquals(2, stats.size()); assertEquals(entry2, stats.getValues(0, null)); assertEquals(entry3, stats.getValues(1, null)); }",2bb12f156500fde5ad02dfe1d9b7971fc17916a8,2018-03-23 02:38:58,13
633866,tests_net_java_android_net_NetworkStatsTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testFilter_TagFilter() { final int testTag = 123; final int otherTag = 456; android.net.NetworkStats.Entry entry1 = new android.net.NetworkStats.Entry(""test1"", 10100, android.net.NetworkStats.SET_DEFAULT, testTag, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats.Entry entry2 = new android.net.NetworkStats.Entry(""test2"", 10101, android.net.NetworkStats.SET_DEFAULT, testTag, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats.Entry entry3 = new android.net.NetworkStats.Entry(""test2"", 10101, android.net.NetworkStats.SET_DEFAULT, otherTag, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats stats = new android.net.NetworkStats(android.net.NetworkStatsTest.TEST_START, 3).addValues(entry1).addValues(entry2).addValues(entry3); stats.filter(android.net.NetworkStats.UID_ALL, null, testTag); assertEquals(2, stats.size()); assertEquals(entry1, stats.getValues(0, null)); assertEquals(entry2, stats.getValues(1, null)); }",4cc96e24e0e93ae82c0cab9bcc9eb0c8b722863b,"@org.junit.Test public void testFilter_TagFilter() { final int testTag = 123; final int otherTag = 456; android.net.NetworkStats.Entry entry1 = new android.net.NetworkStats.Entry(""test1"", 10100, android.net.NetworkStats.SET_DEFAULT, testTag, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats.Entry entry2 = new android.net.NetworkStats.Entry(""test2"", 10101, android.net.NetworkStats.SET_DEFAULT, testTag, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats.Entry entry3 = new android.net.NetworkStats.Entry(""test2"", 10101, android.net.NetworkStats.SET_DEFAULT, otherTag, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats stats = new android.net.NetworkStats(android.net.NetworkStatsTest.TEST_START, 3).addValues(entry1).addValues(entry2).addValues(entry3); stats.filter(android.net.NetworkStats.UID_ALL, android.net.NetworkStats.INTERFACES_ALL, testTag); assertEquals(2, stats.size()); assertEquals(entry1, stats.getValues(0, null)); assertEquals(entry2, stats.getValues(1, null)); }",993659c4d9d01a34309c4131d2c5692fa77d0c9b,2018-03-23 02:38:58,13
633866,tests_net_java_android_net_NetworkStatsTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testFilter_NoFilter() { android.net.NetworkStats.Entry entry1 = new android.net.NetworkStats.Entry(""test1"", 10100, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats.Entry entry2 = new android.net.NetworkStats.Entry(""test2"", 10101, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats.Entry entry3 = new android.net.NetworkStats.Entry(""test2"", 10101, android.net.NetworkStats.SET_DEFAULT, 123, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats stats = new android.net.NetworkStats(android.net.NetworkStatsTest.TEST_START, 3).addValues(entry1).addValues(entry2).addValues(entry3); stats.filter(android.net.NetworkStats.UID_ALL, null, android.net.NetworkStats.TAG_ALL); assertEquals(3, stats.size()); assertEquals(entry1, stats.getValues(0, null)); assertEquals(entry2, stats.getValues(1, null)); assertEquals(entry3, stats.getValues(2, null)); }",bf3b1e6d6dfb9dc72f7b40d833dbbc06bcfe8e42,"@org.junit.Test public void testFilter_NoFilter() { android.net.NetworkStats.Entry entry1 = new android.net.NetworkStats.Entry(""test1"", 10100, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats.Entry entry2 = new android.net.NetworkStats.Entry(""test2"", 10101, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats.Entry entry3 = new android.net.NetworkStats.Entry(""test2"", 10101, android.net.NetworkStats.SET_DEFAULT, 123, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats stats = new android.net.NetworkStats(android.net.NetworkStatsTest.TEST_START, 3).addValues(entry1).addValues(entry2).addValues(entry3); stats.filter(android.net.NetworkStats.UID_ALL, android.net.NetworkStats.INTERFACES_ALL, android.net.NetworkStats.TAG_ALL); assertEquals(3, stats.size()); assertEquals(entry1, stats.getValues(0, null)); assertEquals(entry2, stats.getValues(1, null)); assertEquals(entry3, stats.getValues(2, null)); }",d7787f023945ebaf224b001ca0b4abf4dbeebe6a,2018-03-23 02:38:58,13
644479,services_core_java_com_android_server_ConnectivityService.java,"@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); restrictRequestUidsForCaller(nc); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log((""listenForNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }",0de35b3b8b709ded9feed895fc5a8da4740244e6,"@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); restrictRequestUidsForCaller(nc); restrictBackgroundRequestForCaller(nc); ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log((""listenForNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }",9ca3650c809a111e4bd6207f9c85b0855960c912,"@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); restrictRequestUidsForCaller(nc); restrictBackgroundRequestForCaller(nc); ensureValidNetworkSpecifier(nc); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log((""listenForNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }",f45b05623d51433115edfd5b144972b39aae5d66,2018-03-23 06:14:58,2
644479,services_core_java_com_android_server_connectivity_PermissionMonitor.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean hasUseBackgroundNetworksPermission(int uid) { final java.lang.String[] names = mPackageManager.getPackagesForUid(uid); if ((null == names) || ((names.length) <= 0)) return false; try { final android.content.pm.PackageInfo app = mPackageManager.getPackageInfo(names[0], com.android.server.connectivity.GET_PERMISSIONS); return hasUseBackgroundNetworksPermission(app); } catch (android.content.pm.PackageManager.NameNotFoundException e) { com.android.server.connectivity.PermissionMonitor.loge((""NameNotFoundException "" + (names[0]))); return false; } }",99e601cfa363e37bc8a9fa18f3e237a637eaa27b,"public boolean hasUseBackgroundNetworksPermission(int uid) { final java.lang.String[] names = mPackageManager.getPackagesForUid(uid); if ((null == names) || ((names.length) == 0)) return false; try { final android.content.pm.PackageInfo app = mPackageManager.getPackageInfo(names[0], com.android.server.connectivity.GET_PERMISSIONS); return hasUseBackgroundNetworksPermission(app); } catch (android.content.pm.PackageManager.NameNotFoundException e) { com.android.server.connectivity.PermissionMonitor.loge((""NameNotFoundException "" + (names[0])), e); return false; } }",021473c400122e97135e38c05c0f388d6b1381d3,2018-03-23 06:14:58,2
641824,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testOnlyCrypt() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, null, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, null, null, false, 1, true); }",28435538ae28dcae045a3d001f099d50ad4ead09,"public void testCryptTcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, null, true, 1, true); }",26dbb2ddfdcbd3b2fc18c53e9888ac046de2d9be,2018-03-23 17:25:10,5
641824,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testJustAuth() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, auth, null, false, 1, true); }",d4fab0516be10c90941022317a0d4a2ff50986e1,"public void testAuthTcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, auth, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, auth, true, 1, true); }",badb58d88214df98a7a79f9c44b63596319e2903,2018-03-23 17:25:10,5
615660,src_com_google_android_traceur_Receiver.java,"public static void updateTracing(android.content.Context context, boolean force) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (((prefs.getBoolean(context.getString(R.string.pref_key_tracing_on), false)) != (com.android.traceur.AtraceUtils.isTracingOn())) || force) { if (prefs.getBoolean(context.getString(R.string.pref_key_tracing_on), false)) { java.lang.String activeAvailableTags = com.android.traceur.Receiver.getActiveTags(context, prefs, true); if (!(android.text.TextUtils.equals(activeAvailableTags, com.android.traceur.Receiver.getActiveTags(context, prefs, false)))) { com.android.traceur.Receiver.postRootNotification(context, prefs); } else { com.android.traceur.Receiver.cancelRootNotification(context); } com.android.traceur.AtraceUtils.atraceStart(activeAvailableTags, com.android.traceur.Receiver.BUFFER_SIZE_KB); } else { com.android.traceur.AtraceUtils.atraceStop(); com.android.traceur.Receiver.cancelRootNotification(context); } } }",67373d9eba34559a6116696c78819afae0f86195,"public static void updateTracing(android.content.Context context, boolean force) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (((prefs.getBoolean(context.getString(R.string.pref_key_tracing_on), false)) != (com.android.traceur.AtraceUtils.isTracingOn())) || force) { if (prefs.getBoolean(context.getString(R.string.pref_key_tracing_on), false)) { java.lang.String activeAvailableTags = com.android.traceur.Receiver.getActiveTags(context, prefs, true); if (!(android.text.TextUtils.equals(activeAvailableTags, com.android.traceur.Receiver.getActiveTags(context, prefs, false)))) { com.android.traceur.Receiver.postRootNotification(context, prefs); } else { com.android.traceur.Receiver.cancelRootNotification(context); } java.util.Set<java.lang.String> apps = prefs.getStringSet(context.getString(R.string.pref_key_apps), java.util.Collections.EMPTY_SET); com.android.traceur.AtraceUtils.atraceStart(activeAvailableTags, com.android.traceur.Receiver.BUFFER_SIZE_KB, apps); } else { com.android.traceur.AtraceUtils.atraceStop(); com.android.traceur.Receiver.cancelRootNotification(context); } } }",015e96ed81d66b6339c63b0fc764326e8ac822b7,"private static void postTracingNotification(android.content.Context context, android.content.SharedPreferences prefs) { android.content.Intent stopIntent = new android.content.Intent(com.android.traceur.Receiver.STOP_ACTION, null, context, com.android.traceur.Receiver.class); java.lang.String title = context.getString(R.string.trace_is_being_recorded); java.lang.String msg = context.getString(R.string.tap_to_stop_tracing); final android.app.Notification.Builder builder = new android.app.Notification.Builder(context).setStyle(new android.app.Notification.BigTextStyle().bigText(msg)).setSmallIcon(R.drawable.stat_sys_adb).setContentTitle(title).setTicker(title).setContentText(msg).setContentIntent(android.app.PendingIntent.getBroadcast(context, 0, stopIntent, 0)).setOngoing(true).setLocalOnly(true).setColor(context.getColor(com.android.internal.R.color.system_notification_accent_color)); context.getSystemService(android.app.NotificationManager.class).notify(com.android.traceur.Receiver.class.getName(), com.android.traceur.Receiver.TRACE_NOTIFICATION, builder.build()); }",d28268f165d51c27b65a372ed61c3a46fa7d67cc,2018-03-23 21:22:45,7
615660,src_com_google_android_traceur_AtraceUtils.java,"public static void atraceStart(java.lang.String tags, int bufferSizeKb) { java.lang.String cmd = ((""atrace --async_start -c -b "" + bufferSizeKb) + "" "") + tags; android.util.Log.v(com.android.traceur.AtraceUtils.TAG, (""Starting async atrace: "" + cmd)); try { java.lang.Process atrace = com.android.traceur.AtraceUtils.exec(cmd); if ((atrace.waitFor()) != 0) { android.util.Log.e(com.android.traceur.AtraceUtils.TAG, (""atraceStart failed with: "" + (atrace.exitValue()))); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }",51f57dfa388569ffd7991a903963da963ce13a14,"public static void atraceStart(java.lang.String tags, int bufferSizeKb, java.util.Set<java.lang.String> apps) { java.lang.String appParameter = (apps.isEmpty()) ? """" : "" -a "" + (android.text.TextUtils.join("","", apps)); java.lang.String cmd = (((""atrace --async_start -c -b "" + bufferSizeKb) + "" "") + tags) + appParameter; android.util.Log.v(com.android.traceur.AtraceUtils.TAG, (""Starting async atrace: "" + cmd)); try { java.lang.Process atrace = com.android.traceur.AtraceUtils.exec(cmd); if ((atrace.waitFor()) != 0) { android.util.Log.e(com.android.traceur.AtraceUtils.TAG, (""atraceStart failed with: "" + (atrace.exitValue()))); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }",b22553bffdf83bdde6aa45ce36da05ea9dbf9ade,"public static void atraceStart(java.lang.String tags, int bufferSizeKb, java.util.Set<java.lang.String> apps) { java.util.Set<java.lang.String> verifiedPackageNames = com.android.traceur.AtraceUtils.verifyPackageNames(apps); java.lang.String appParameter = (verifiedPackageNames.isEmpty()) ? """" : "" -a "" + (android.text.TextUtils.join("","", verifiedPackageNames)); java.lang.String cmd = (((""atrace --async_start -c -b "" + bufferSizeKb) + "" "") + tags) + appParameter; android.util.Log.v(com.android.traceur.AtraceUtils.TAG, (""Starting async atrace: "" + cmd)); try { java.lang.Process atrace = com.android.traceur.AtraceUtils.exec(cmd); if ((atrace.waitFor()) != 0) { android.util.Log.e(com.android.traceur.AtraceUtils.TAG, (""atraceStart failed with: "" + (atrace.exitValue()))); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }",9debf4f3a41a58f2bcc307672405d923cb54254a,2018-03-23 21:22:45,7
615660,src_com_google_android_traceur_MainFragment.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public int compare(ApplicationInfo one, ApplicationInfo two) { return one.packageName.compareToIgnoreCase(two.packageName); }",83ef80983f0625f35ef58dfee8baafa444e2dc2a,"@java.lang.Override public int compare(android.content.pm.ApplicationInfo one, android.content.pm.ApplicationInfo two) { return one.packageName.compareToIgnoreCase(two.packageName); }",59e8b822a593f3b12589b45fe784324e3b68ba81,2018-03-23 21:22:45,7
615660,src_com_google_android_traceur_MainFragment.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void refreshApps() { android.content.pm.PackageManager packageManager = getContext().getPackageManager(); java.util.List<android.content.pm.ApplicationInfo> availableApps = packageManager.getInstalledApplications(0); java.util.Collections.sort(availableApps, com.android.traceur.MainFragment.mPackageComparator); java.util.ArrayList<java.lang.String> entries = new java.util.ArrayList<java.lang.String>(availableApps.size()); java.util.ArrayList<java.lang.String> values = new java.util.ArrayList<java.lang.String>(availableApps.size()); for (android.content.pm.ApplicationInfo app : availableApps) { entries.add(app.packageName); values.add(app.packageName); } mRefreshing = true; try { mApps.setEntries(entries.toArray(new java.lang.String[0])); mApps.setEntryValues(values.toArray(new java.lang.String[0])); } finally { mRefreshing = false; } }",795ffa249b7424af55dc2812eb44f654a6d83ce8,"private void refreshApps() { android.content.pm.PackageManager packageManager = getContext().getPackageManager(); java.util.List<android.content.pm.ApplicationInfo> availableApps = packageManager.getInstalledApplications(0); if (!(android.os.Build.IS_DEBUGGABLE)) { for (java.util.Iterator<android.content.pm.ApplicationInfo> appIterator = availableApps.iterator(); appIterator.hasNext();) { android.content.pm.ApplicationInfo app = appIterator.next(); if (0 == ((app.flags) & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE))) { appIterator.remove(); } } } java.util.Collections.sort(availableApps, new java.util.Comparator<android.content.pm.ApplicationInfo>() { @java.lang.Override public int compare(android.content.pm.ApplicationInfo one, android.content.pm.ApplicationInfo two) { return one.packageName.compareToIgnoreCase(two.packageName); } }); java.lang.String[] entries = new java.lang.String[availableApps.size()]; for (int x = 0; x < (entries.length); x++) { entries[x] = availableApps.get(x).packageName; } mRefreshing = true; try { mApps.setEntries(entries); mApps.setEntryValues(entries); if ((entries.length) == 0) { mApps.setSummary(R.string.no_debuggable_apps); mApps.setEnabled(false); } else { mApps.setSummary(null); mApps.setEnabled(true); } } finally { mRefreshing = false; } }",5c542cdd6bc3142648bee60beec136c00abfe857,2018-03-23 21:22:45,7
615660,uitests_src_com_android_settings_ui_TraceurAppTests.java,"@org.junit.Test @android.support.test.filters.MediumTest public void testElementsOnMainScreen() throws java.lang.Exception { assertNotNull(""Record trace switch not found."", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text(""Record trace"")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull(""Save and share trace element not found."", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text(""Save and share trace"")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull(""Categories element not found."", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text(""Categories"")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull(""Restore default categories element not found."", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text(""Restore default categories"")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull(""Show Quick Settings tile switch not found."", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text(""Show Quick Settings tile"")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); }",2206ce8722cb1b46a74fd7d8d585cd9b93f26b01,"@org.junit.Test @android.support.test.filters.MediumTest public void testElementsOnMainScreen() throws java.lang.Exception { assertNotNull(""Record trace switch not found."", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text(""Record trace"")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull(""Save and share trace element not found."", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text(""Save and share trace"")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull(""Categories element not found."", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text(""Categories"")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull(""Restore default categories element not found."", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text(""Restore default categories"")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull(""Applications element not found."", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text(""Applications"")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull(""Show Quick Settings tile switch not found."", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text(""Show Quick Settings tile"")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); }",8bf5dc50f1bc7ba750f484c2e0aa3c252b93cd5b,"@org.junit.Test @android.support.test.filters.MediumTest public void testElementsOnMainScreen() throws java.lang.Exception { assertNotNull(""Record trace switch not found."", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text(""Record trace"")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull(""Applications element not found."", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text(""Applications"")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull(""Categories element not found."", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text(""Categories"")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull(""Restore default categories element not found."", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text(""Restore default categories"")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull(""Buffer size element not found."", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text(""Buffer size"")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull(""Clear saved traces element not found."", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text(""Clear saved traces"")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull(""Show Quick Settings tile switch not found."", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text(""Show Quick Settings tile"")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); }",a39107f8e944399d9e251b26b0dc713062e68124,2018-03-23 21:22:45,7
633986,services_core_java_com_android_server_NetworkManagementService.java,"@java.lang.Override public void setDnsConfigurationForNetwork(int netId, java.lang.String[] servers, java.lang.String[] domains, int[] params, boolean useTls, java.lang.String tlsHostname) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, com.android.server.NetworkManagementService.TAG); final java.lang.String[] tlsFingerprints = new java.lang.String[0]; try { mNetdService.setResolverConfiguration(netId, servers, domains, params, useTls, tlsHostname, tlsFingerprints); } catch (android.os.RemoteException e) { throw new java.lang.RuntimeException(e); } }",b7e325de78d38007f1f14887233ffcec460d5144,"@java.lang.Override public void setDnsConfigurationForNetwork(int netId, java.lang.String[] servers, java.lang.String[] domains, int[] params, boolean useTls, java.lang.String tlsHostname, java.lang.String[] tlsServers) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, com.android.server.NetworkManagementService.TAG); final java.lang.String[] tlsFingerprints = new java.lang.String[0]; try { mNetdService.setResolverConfiguration(netId, servers, domains, params, useTls, tlsHostname, tlsServers, tlsFingerprints); } catch (android.os.RemoteException e) { throw new java.lang.RuntimeException(e); } }",12b21a7e1af4b70f63ca70ecad880ea33b54eeb9,"@java.lang.Override public void setDnsConfigurationForNetwork(int netId, java.lang.String[] servers, java.lang.String[] domains, int[] params, java.lang.String tlsHostname, java.lang.String[] tlsServers) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, com.android.server.NetworkManagementService.TAG); final java.lang.String[] tlsFingerprints = new java.lang.String[0]; try { mNetdService.setResolverConfiguration(netId, servers, domains, params, tlsHostname, tlsServers, tlsFingerprints); } catch (android.os.RemoteException e) { throw new java.lang.RuntimeException(e); } }",12ea1eca7c42bc841483ed77990bdbcf3c157854,2018-03-23 23:41:10,3
633986,services_core_java_com_android_server_connectivity_DnsManager.java,"public void setDnsConfigurationForNetwork(int netId, android.net.LinkProperties lp, boolean isDefaultNetwork) { final com.android.server.connectivity.DnsManager.PrivateDnsConfig privateDnsCfg = mPrivateDnsMap.get(netId); final boolean useTls = (privateDnsCfg != null) && (privateDnsCfg.useTls); final boolean strictMode = (privateDnsCfg != null) && (privateDnsCfg.inStrictMode()); final java.lang.String tlsHostname = (strictMode) ? privateDnsCfg.hostname : """"; final java.lang.String[] serverStrs = android.net.NetworkUtils.makeStrings((strictMode ? java.util.Arrays.stream(privateDnsCfg.ips).filter(( ip) -> lp.isReachable(ip)).collect(java.util.stream.Collectors.toList()) : lp.getDnsServers())); final java.lang.String[] domainStrs = com.android.server.connectivity.DnsManager.getDomainStrings(lp.getDomains()); updateParametersSettings(); final int[] params = new int[]{ mSampleValidity, mSuccessThreshold, mMinSamples, mMaxSamples }; android.util.Slog.d(com.android.server.connectivity.DnsManager.TAG, java.lang.String.format(""setDnsConfigurationForNetwork(%d, %s, %s, %s, %s, %s)"", netId, java.util.Arrays.toString(serverStrs), java.util.Arrays.toString(domainStrs), java.util.Arrays.toString(params), useTls, tlsHostname)); try { mNMS.setDnsConfigurationForNetwork(netId, serverStrs, domainStrs, params, useTls, tlsHostname); } catch (java.lang.Exception e) { android.util.Slog.e(com.android.server.connectivity.DnsManager.TAG, (""Error setting DNS configuration: "" + e)); return; } if (isDefaultNetwork) setDefaultDnsSystemProperties(lp.getDnsServers()); flushVmDnsCache(); }",1431a107944f1ceaff5e3bed0d74f98562cc057a,"public void setDnsConfigurationForNetwork(int netId, android.net.LinkProperties lp, boolean isDefaultNetwork) { final com.android.server.connectivity.DnsManager.PrivateDnsConfig privateDnsCfg = mPrivateDnsMap.get(netId); final boolean useTls = (privateDnsCfg != null) && (privateDnsCfg.useTls); final boolean strictMode = (privateDnsCfg != null) && (privateDnsCfg.inStrictMode()); final java.lang.String tlsHostname = (strictMode) ? privateDnsCfg.hostname : """"; final java.lang.String[] tlsServers = (strictMode) ? android.net.NetworkUtils.makeStrings(java.util.Arrays.stream(privateDnsCfg.ips).filter(( ip) -> lp.isReachable(ip)).collect(java.util.stream.Collectors.toList())) : new java.lang.String[0]; final java.lang.String[] assignedServers = android.net.NetworkUtils.makeStrings(lp.getDnsServers()); final java.lang.String[] domainStrs = com.android.server.connectivity.DnsManager.getDomainStrings(lp.getDomains()); updateParametersSettings(); final int[] params = new int[]{ mSampleValidity, mSuccessThreshold, mMinSamples, mMaxSamples }; android.util.Slog.d(com.android.server.connectivity.DnsManager.TAG, java.lang.String.format(""setDnsConfigurationForNetwork(%d, %s, %s, %s, %s, %s, %s)"", netId, java.util.Arrays.toString(assignedServers), java.util.Arrays.toString(domainStrs), java.util.Arrays.toString(params), useTls, tlsHostname, java.util.Arrays.toString(tlsServers))); try { mNMS.setDnsConfigurationForNetwork(netId, assignedServers, domainStrs, params, useTls, tlsHostname, tlsServers); } catch (java.lang.Exception e) { android.util.Slog.e(com.android.server.connectivity.DnsManager.TAG, (""Error setting DNS configuration: "" + e)); return; } if (isDefaultNetwork) setDefaultDnsSystemProperties(lp.getDnsServers()); flushVmDnsCache(); }",632df8a606be22f87ca74cef88d39b4a5f6df3b8,"public void setDnsConfigurationForNetwork(int netId, android.net.LinkProperties lp, boolean isDefaultNetwork) { final java.lang.String[] assignedServers = android.net.NetworkUtils.makeStrings(lp.getDnsServers()); final java.lang.String[] domainStrs = com.android.server.connectivity.DnsManager.getDomainStrings(lp.getDomains()); updateParametersSettings(); final int[] params = new int[]{ mSampleValidity, mSuccessThreshold, mMinSamples, mMaxSamples }; final com.android.server.connectivity.DnsManager.PrivateDnsConfig privateDnsCfg = mPrivateDnsMap.get(netId); final boolean useTls = (privateDnsCfg != null) && (privateDnsCfg.useTls); final boolean strictMode = (privateDnsCfg != null) && (privateDnsCfg.inStrictMode()); final java.lang.String tlsHostname = (strictMode) ? privateDnsCfg.hostname : """"; final java.lang.String[] tlsServers = (strictMode) ? android.net.NetworkUtils.makeStrings(java.util.Arrays.stream(privateDnsCfg.ips).filter(( ip) -> lp.isReachable(ip)).collect(java.util.stream.Collectors.toList())) : useTls ? assignedServers : new java.lang.String[0]; android.util.Slog.d(com.android.server.connectivity.DnsManager.TAG, java.lang.String.format(""setDnsConfigurationForNetwork(%d, %s, %s, %s, %s, %s)"", netId, java.util.Arrays.toString(assignedServers), java.util.Arrays.toString(domainStrs), java.util.Arrays.toString(params), tlsHostname, java.util.Arrays.toString(tlsServers))); try { mNMS.setDnsConfigurationForNetwork(netId, assignedServers, domainStrs, params, tlsHostname, tlsServers); } catch (java.lang.Exception e) { android.util.Slog.e(com.android.server.connectivity.DnsManager.TAG, (""Error setting DNS configuration: "" + e)); return; } if (isDefaultNetwork) setDefaultDnsSystemProperties(lp.getDnsServers()); flushVmDnsCache(); }",987a85c5ac2b64a98dee09b4c5fcf4b840345645,2018-03-23 23:41:10,3
648801,src_java_com_android_internal_telephony_uicc_UiccProfile.java,"public void dispose() { synchronized(mLock) { if (com.android.internal.telephony.uicc.UiccProfile.DBG) com.android.internal.telephony.uicc.UiccProfile.log(""Disposing profile""); unregisterAllAppEvents(); unregisterCurrAppEvents(); if ((mUiccCard) instanceof com.android.internal.telephony.uicc.euicc.EuiccCard) { ((com.android.internal.telephony.uicc.euicc.EuiccCard) (mUiccCard)).unregisterForEidReady(this); } mCi.unregisterForOffOrNotAvailable(this); if ((mCatService) != null) mCatService.dispose(); for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { app.dispose(); } } mCatService = null; mUiccApplications = null; mCarrierPrivilegeRules = null; mDisposed = true; } }",eedbd50c1ed758a65035c12e69457f1fe70083b2,"public void dispose() { synchronized(mLock) { if (com.android.internal.telephony.uicc.UiccProfile.DBG) com.android.internal.telephony.uicc.UiccProfile.log(""Disposing profile""); unregisterAllAppEvents(); unregisterCurrAppEvents(); if ((mUiccCard) instanceof com.android.internal.telephony.uicc.euicc.EuiccCard) { ((com.android.internal.telephony.uicc.euicc.EuiccCard) (mUiccCard)).unregisterForEidReady(mHandler); } mCi.unregisterForOffOrNotAvailable(mHandler); if ((mCatService) != null) mCatService.dispose(); for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { app.dispose(); } } mCatService = null; mUiccApplications = null; mCarrierPrivilegeRules = null; mDisposed = true; } }",ccad4c4a5211997846e3963e3b8947d862608060,"public void dispose() { synchronized(mLock) { if (com.android.internal.telephony.uicc.UiccProfile.DBG) com.android.internal.telephony.uicc.UiccProfile.log(""Disposing profile""); unregisterAllAppEvents(); unregisterCurrAppEvents(); if ((mUiccCard) instanceof com.android.internal.telephony.uicc.euicc.EuiccCard) { ((com.android.internal.telephony.uicc.euicc.EuiccCard) (mUiccCard)).unregisterForEidReady(mHandler); } mCi.unregisterForOffOrNotAvailable(mHandler); mContext.unregisterReceiver(mReceiver); if ((mCatService) != null) mCatService.dispose(); for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { app.dispose(); } } mCatService = null; mUiccApplications = null; mCarrierPrivilegeRules = null; mDisposed = true; } }",e19a2d3a7a3d120ebe6f989ad7977c1ea1a305d9,2018-03-24 01:43:33,2
642551,src_com_android_server_telecom_CallsManager.java,@java.lang.Override public void releaseConnectionService(com.android.server.telecom.ConnectionServiceFocusManager.ConnectionServiceFocus connectionService) { mCalls.stream().filter(( c) -> c.getConnectionServiceWrapper().equals(connectionService)).forEach(( c) -> c.disconnect()); },061dcab908f0be8a1af72be1acc35d17b4cd67b8,"@java.lang.Override public void releaseConnectionService(com.android.server.telecom.ConnectionServiceFocusManager.ConnectionServiceFocus connectionService) { mCalls.stream().filter(( c) -> c.getConnectionServiceWrapper().equals(connectionService)).forEach(( c) -> c.disconnect((""release "" + (connectionService.getComponentName())))); }",45f04330b96e3db474fe8fec213cefee9b154121,"@java.lang.Override public void releaseConnectionService(com.android.server.telecom.ConnectionServiceFocusManager.ConnectionServiceFocus connectionService) { mCalls.stream().filter(( c) -> c.getConnectionServiceWrapper().equals(connectionService)).forEach(( c) -> c.disconnect((""release "" + (connectionService.getComponentName().getPackageName())))); }",f50a56d6fcc5919b9cafa264835df6c312319d1e,2018-03-26 18:38:17,4
643826,telephony_java_android_telephony_MbmsDownloadSession.java,"public int registerStateCallback(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull android.telephony.mbms.DownloadStateCallback callback) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException(""Middleware not yet bound""); } android.telephony.mbms.InternalDownloadStateCallback internalCallback = new android.telephony.mbms.InternalDownloadStateCallback(callback, executor); try { int result = downloadService.registerStateCallback(request, internalCallback, callback.getCallbackFilterFlags()); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException(""Unknown download request.""); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST; } mInternalDownloadCallbacks.put(callback, internalCallback); return android.telephony.mbms.MbmsErrors.SUCCESS; }",d853fa607d789eba69d6b6e6df3cabff948f6895,"public int registerStatusListener(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull android.telephony.mbms.DownloadStatusListener listener) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException(""Middleware not yet bound""); } android.telephony.mbms.InternalDownloadStatusListener internalListener = new android.telephony.mbms.InternalDownloadStatusListener(listener, executor); try { int result = downloadService.registerStatusListener(request, internalListener); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException(""Unknown download request.""); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST; } mInternalDownloadStatusListeners.put(listener, internalListener); return android.telephony.mbms.MbmsErrors.SUCCESS; }",88c8e6cad35aa9e7a38d9c15e0a7d856abb5616c,"public int addStatusListener(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull android.telephony.mbms.DownloadStatusListener listener) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException(""Middleware not yet bound""); } android.telephony.mbms.InternalDownloadStatusListener internalListener = new android.telephony.mbms.InternalDownloadStatusListener(listener, executor); try { int result = downloadService.addStatusListener(request, internalListener); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException(""Unknown download request.""); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST; } mInternalDownloadStatusListeners.put(listener, internalListener); return android.telephony.mbms.MbmsErrors.SUCCESS; }",3c1c2de63535f0fe0184c51ae73d9ccdf8c28701,2018-03-26 23:53:39,4
643941,tests_tests_telephony_EmbmsMiddlewareTestApp_src_android_telephony_cts_embmstestapp_CtsDownloadService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public int registerProgressListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadProgressListener listener) throws android.os.RemoteException { mDownloadProgressListener = listener; return android.telephony.mbms.MbmsErrors.SUCCESS; }",cae2097e9c6adf697b5edd537e9a6374f3061587,"@java.lang.Override public int addProgressListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadProgressListener listener) throws android.os.RemoteException { mDownloadProgressListener = listener; return android.telephony.mbms.MbmsErrors.SUCCESS; }",bedc8ef69a9eb4b64cb559a4f143a116c5ff2aa3,2018-03-26 23:53:39,4
643826,telephony_java_android_telephony_MbmsDownloadSession.java,"public int unregisterStateCallback(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull android.telephony.mbms.DownloadStateCallback callback) { try { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException(""Middleware not yet bound""); } android.telephony.mbms.InternalDownloadStateCallback internalCallback = mInternalDownloadCallbacks.get(callback); if (internalCallback == null) { throw new java.lang.IllegalArgumentException(""Provided callback was never registered""); } try { int result = downloadService.unregisterStateCallback(request, internalCallback); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException(""Unknown download request.""); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST; } } finally { android.telephony.mbms.InternalDownloadStateCallback internalCallback = mInternalDownloadCallbacks.remove(callback); if (internalCallback != null) { internalCallback.stop(); } } return android.telephony.mbms.MbmsErrors.SUCCESS; }",418c93c7de34b71555f4b8b89ab7894bd9589de4,"public int unregisterStatusListener(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull android.telephony.mbms.DownloadStatusListener listener) { try { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException(""Middleware not yet bound""); } android.telephony.mbms.InternalDownloadStatusListener internalListener = mInternalDownloadStatusListeners.get(listener); if (internalListener == null) { throw new java.lang.IllegalArgumentException(""Provided listener was never registered""); } try { int result = downloadService.unregisterStatusListener(request, internalListener); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException(""Unknown download request.""); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST; } } finally { android.telephony.mbms.InternalDownloadStatusListener internalCallback = mInternalDownloadStatusListeners.remove(listener); if (internalCallback != null) { internalCallback.stop(); } } return android.telephony.mbms.MbmsErrors.SUCCESS; }",4d9d9f03ba2c0e38e59316af97550a16ea10f265,"public int removeStatusListener(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull android.telephony.mbms.DownloadStatusListener listener) { try { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException(""Middleware not yet bound""); } android.telephony.mbms.InternalDownloadStatusListener internalListener = mInternalDownloadStatusListeners.get(listener); if (internalListener == null) { throw new java.lang.IllegalArgumentException(""Provided listener was never registered""); } try { int result = downloadService.removeStatusListener(request, internalListener); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException(""Unknown download request.""); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST; } } finally { android.telephony.mbms.InternalDownloadStatusListener internalCallback = mInternalDownloadStatusListeners.remove(listener); if (internalCallback != null) { internalCallback.stop(); } } return android.telephony.mbms.MbmsErrors.SUCCESS; }",14e268576686a28024ed367345fb8be08f544582,2018-03-26 23:53:39,4
643826,telephony_java_android_telephony_mbms_vendor_MbmsDownloadServiceBase.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public int unregisterProgressListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadProgressListener listener) throws android.os.RemoteException { return 0; }",4041add2d1010e32f182dd3eb0801926e52a3f5e,"public int removeProgressListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadProgressListener listener) throws android.os.RemoteException { return 0; }",4281efe0a07f7bb02eb1e8a9011869630cda9653,2018-03-26 23:53:39,4
643826,telephony_java_android_telephony_mbms_vendor_MbmsDownloadServiceBase.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public int registerProgressListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadProgressListener listener) throws android.os.RemoteException { return 0; }",d7688b8388cf9f8c799145fab83ad31130e9facd,"public int addProgressListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadProgressListener listener) throws android.os.RemoteException { return 0; }",c3ff0537f7ded74640fdb16c9465deaa5342fe52,2018-03-26 23:53:39,4
643826,telephony_java_android_telephony_mbms_vendor_MbmsDownloadServiceBase.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public int unregisterStatusListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStatusListener listener) throws android.os.RemoteException { return 0; }",a928e4abec3cd1940ea66cdb740edb3a6efadc13,"public int removeStatusListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStatusListener listener) throws android.os.RemoteException { return 0; }",134e9e08c65d69e47bd024e6057335c93ee00e47,2018-03-26 23:53:39,4
643826,telephony_java_android_telephony_mbms_vendor_MbmsDownloadServiceBase.java,"public int unregisterStateCallback(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStateCallback callback) throws android.os.RemoteException { return 0; }",3f90a8e56d1cd59d8c62890d493f97a990f1a878,"public final int unregisterStatusListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStatusListener listener) throws android.os.RemoteException { if (downloadRequest == null) { throw new java.lang.NullPointerException(""Download request must not be null""); } if (listener == null) { throw new java.lang.NullPointerException(""Callback must not be null""); } android.telephony.mbms.vendor.DeathRecipient deathRecipient = mDownloadCallbackDeathRecipients.remove(listener.asBinder()); if (deathRecipient == null) { throw new java.lang.IllegalArgumentException(""Unknown listener""); } listener.asBinder().unlinkToDeath(deathRecipient, 0); android.telephony.mbms.DownloadStatusListener exposedCallback = mDownloadStatusListenerBinderMap.remove(listener.asBinder()); if (exposedCallback == null) { throw new java.lang.IllegalArgumentException(""Unknown listener""); } return unregisterStatusListener(downloadRequest, exposedCallback); }",94bb6aa098ae2734dea8c9a0018d16fa36a9fe8c,"public final int removeStatusListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStatusListener listener) throws android.os.RemoteException { if (downloadRequest == null) { throw new java.lang.NullPointerException(""Download request must not be null""); } if (listener == null) { throw new java.lang.NullPointerException(""Callback must not be null""); } android.telephony.mbms.vendor.DeathRecipient deathRecipient = mDownloadCallbackDeathRecipients.remove(listener.asBinder()); if (deathRecipient == null) { throw new java.lang.IllegalArgumentException(""Unknown listener""); } listener.asBinder().unlinkToDeath(deathRecipient, 0); android.telephony.mbms.DownloadStatusListener exposedCallback = mDownloadStatusListenerBinderMap.remove(listener.asBinder()); if (exposedCallback == null) { throw new java.lang.IllegalArgumentException(""Unknown listener""); } return removeStatusListener(downloadRequest, exposedCallback); }",c0cad15e203664b579f6eaa8f054d1248b8433b6,2018-03-26 23:53:39,4
643826,telephony_java_android_telephony_MbmsDownloadSession.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public int unregisterProgressListener(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull android.telephony.mbms.DownloadProgressListener listener) { try { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException(""Middleware not yet bound""); } android.telephony.mbms.InternalDownloadProgressListener internalListener = mInternalDownloadProgressListeners.get(listener); if (internalListener == null) { throw new java.lang.IllegalArgumentException(""Provided listener was never registered""); } try { int result = downloadService.unregisterProgressListener(request, internalListener); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException(""Unknown download request.""); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST; } } finally { android.telephony.mbms.InternalDownloadProgressListener internalCallback = mInternalDownloadProgressListeners.remove(listener); if (internalCallback != null) { internalCallback.stop(); } } return android.telephony.mbms.MbmsErrors.SUCCESS; }",6a4c3c02e0b6d48acefd547aafbebe0fbd0c973b,"public int removeProgressListener(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull android.telephony.mbms.DownloadProgressListener listener) { try { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException(""Middleware not yet bound""); } android.telephony.mbms.InternalDownloadProgressListener internalListener = mInternalDownloadProgressListeners.get(listener); if (internalListener == null) { throw new java.lang.IllegalArgumentException(""Provided listener was never registered""); } try { int result = downloadService.removeProgressListener(request, internalListener); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException(""Unknown download request.""); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST; } } finally { android.telephony.mbms.InternalDownloadProgressListener internalCallback = mInternalDownloadProgressListeners.remove(listener); if (internalCallback != null) { internalCallback.stop(); } } return android.telephony.mbms.MbmsErrors.SUCCESS; }",9eecb3df206ce338c9271bd52c75c957e073c13c,2018-03-26 23:53:39,4
643826,telephony_java_android_telephony_mbms_vendor_MbmsDownloadServiceBase.java,"@java.lang.Override public final int unregisterStateCallback(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStateCallback callback) throws android.os.RemoteException { if (downloadRequest == null) { throw new java.lang.NullPointerException(""Download request must not be null""); } if (callback == null) { throw new java.lang.NullPointerException(""Callback must not be null""); } android.telephony.mbms.vendor.DeathRecipient deathRecipient = mDownloadCallbackDeathRecipients.remove(callback.asBinder()); if (deathRecipient == null) { throw new java.lang.IllegalArgumentException(""Unknown callback""); } callback.asBinder().unlinkToDeath(deathRecipient, 0); android.telephony.mbms.DownloadStateCallback exposedCallback = mDownloadCallbackBinderMap.remove(callback.asBinder()); if (exposedCallback == null) { throw new java.lang.IllegalArgumentException(""Unknown callback""); } return unregisterStateCallback(downloadRequest, exposedCallback); }",a349241e5d4f56f04a00e1cdaa2e0bd2e439177b,"public final int unregisterProgressListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadProgressListener listener) throws android.os.RemoteException { if (downloadRequest == null) { throw new java.lang.NullPointerException(""Download request must not be null""); } if (listener == null) { throw new java.lang.NullPointerException(""Callback must not be null""); } android.telephony.mbms.vendor.DeathRecipient deathRecipient = mDownloadCallbackDeathRecipients.remove(listener.asBinder()); if (deathRecipient == null) { throw new java.lang.IllegalArgumentException(""Unknown listener""); } listener.asBinder().unlinkToDeath(deathRecipient, 0); android.telephony.mbms.DownloadProgressListener exposedCallback = mDownloadProgressListenerBinderMap.remove(listener.asBinder()); if (exposedCallback == null) { throw new java.lang.IllegalArgumentException(""Unknown listener""); } return unregisterProgressListener(downloadRequest, exposedCallback); }",db9c575acc42382e3e0be3fe86d41314be73cdc7,"public final int removeProgressListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadProgressListener listener) throws android.os.RemoteException { if (downloadRequest == null) { throw new java.lang.NullPointerException(""Download request must not be null""); } if (listener == null) { throw new java.lang.NullPointerException(""Callback must not be null""); } android.telephony.mbms.vendor.DeathRecipient deathRecipient = mDownloadCallbackDeathRecipients.remove(listener.asBinder()); if (deathRecipient == null) { throw new java.lang.IllegalArgumentException(""Unknown listener""); } listener.asBinder().unlinkToDeath(deathRecipient, 0); android.telephony.mbms.DownloadProgressListener exposedCallback = mDownloadProgressListenerBinderMap.remove(listener.asBinder()); if (exposedCallback == null) { throw new java.lang.IllegalArgumentException(""Unknown listener""); } return removeProgressListener(downloadRequest, exposedCallback); }",66c351069a60321e461df3fbdb58d80d93801f9b,2018-03-26 23:53:39,4
643826,telephony_java_android_telephony_MbmsDownloadSession.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public int registerProgressListener(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull android.telephony.mbms.DownloadProgressListener listener) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException(""Middleware not yet bound""); } android.telephony.mbms.InternalDownloadProgressListener internalListener = new android.telephony.mbms.InternalDownloadProgressListener(listener, executor); try { int result = downloadService.registerProgressListener(request, internalListener); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException(""Unknown download request.""); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST; } mInternalDownloadProgressListeners.put(listener, internalListener); return android.telephony.mbms.MbmsErrors.SUCCESS; }",35ee360e6758c14ce23e948261230883d4d48524,"public int addProgressListener(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull android.telephony.mbms.DownloadProgressListener listener) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException(""Middleware not yet bound""); } android.telephony.mbms.InternalDownloadProgressListener internalListener = new android.telephony.mbms.InternalDownloadProgressListener(listener, executor); try { int result = downloadService.addProgressListener(request, internalListener); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException(""Unknown download request.""); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST; } mInternalDownloadProgressListeners.put(listener, internalListener); return android.telephony.mbms.MbmsErrors.SUCCESS; }",016307aa03cb06f2b3fdec4598f20fad8c74ad74,2018-03-26 23:53:39,4
643826,telephony_java_android_telephony_mbms_vendor_MbmsDownloadServiceBase.java,"public int registerStateCallback(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStateCallback callback) throws android.os.RemoteException { return 0; }",db2eadf97c2c5604f61494bfbc2486737d5893a0,"public int registerStatusListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStatusListener listener) throws android.os.RemoteException { return 0; }",3d60ad51b3831ec63656ad5071b73f4397035853,"public int addStatusListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStatusListener listener) throws android.os.RemoteException { return 0; }",2a79bdab047acb745b0a4e94eb1c65f8f7643e06,2018-03-26 23:53:39,4
643826,telephony_java_android_telephony_mbms_vendor_MbmsDownloadServiceBase.java,"@java.lang.Override public final int registerStateCallback(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStateCallback callback, int flags) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); if (downloadRequest == null) { throw new java.lang.NullPointerException(""Download request must not be null""); } if (callback == null) { throw new java.lang.NullPointerException(""Callback must not be null""); } android.telephony.mbms.DownloadStateCallback exposedCallback = new android.telephony.mbms.vendor.MbmsDownloadServiceBase.FilteredDownloadStateCallback(callback, flags) { @java.lang.Override protected void onRemoteException(android.os.RemoteException e) { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); } }; int result = registerStateCallback(downloadRequest, exposedCallback); if (result == (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.mbms.vendor.DeathRecipient deathRecipient = new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); mDownloadCallbackBinderMap.remove(callback.asBinder()); mDownloadCallbackDeathRecipients.remove(callback.asBinder()); } }; mDownloadCallbackDeathRecipients.put(callback.asBinder(), deathRecipient); callback.asBinder().linkToDeath(deathRecipient, 0); mDownloadCallbackBinderMap.put(callback.asBinder(), exposedCallback); } return result; }",b37c2f06c696aee4ed004bae0865cb9df3aefa4a,"@java.lang.Override public final int registerStatusListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStatusListener listener) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); if (downloadRequest == null) { throw new java.lang.NullPointerException(""Download request must not be null""); } if (listener == null) { throw new java.lang.NullPointerException(""Callback must not be null""); } android.telephony.mbms.DownloadStatusListener exposedCallback = new android.telephony.mbms.vendor.MbmsDownloadServiceBase.VendorDownloadStatusListener(listener) { @java.lang.Override protected void onRemoteException(android.os.RemoteException e) { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); } }; int result = registerStatusListener(downloadRequest, exposedCallback); if (result == (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.mbms.vendor.DeathRecipient deathRecipient = new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); mDownloadStatusListenerBinderMap.remove(listener.asBinder()); mDownloadCallbackDeathRecipients.remove(listener.asBinder()); } }; mDownloadCallbackDeathRecipients.put(listener.asBinder(), deathRecipient); listener.asBinder().linkToDeath(deathRecipient, 0); mDownloadStatusListenerBinderMap.put(listener.asBinder(), exposedCallback); } return result; }",630c6fdb4341b59f36e18c93d07424cf36660440,"@java.lang.Override public final int addStatusListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStatusListener listener) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); if (downloadRequest == null) { throw new java.lang.NullPointerException(""Download request must not be null""); } if (listener == null) { throw new java.lang.NullPointerException(""Callback must not be null""); } android.telephony.mbms.DownloadStatusListener exposedCallback = new android.telephony.mbms.vendor.MbmsDownloadServiceBase.VendorDownloadStatusListener(listener) { @java.lang.Override protected void onRemoteException(android.os.RemoteException e) { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); } }; int result = addStatusListener(downloadRequest, exposedCallback); if (result == (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.mbms.vendor.DeathRecipient deathRecipient = new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); mDownloadStatusListenerBinderMap.remove(listener.asBinder()); mDownloadCallbackDeathRecipients.remove(listener.asBinder()); } }; mDownloadCallbackDeathRecipients.put(listener.asBinder(), deathRecipient); listener.asBinder().linkToDeath(deathRecipient, 0); mDownloadStatusListenerBinderMap.put(listener.asBinder(), exposedCallback); } return result; }",c3e0f81ff62df59c8871ee3c6311863e7a578fab,2018-03-26 23:53:39,4
643941,tests_tests_telephony_src_android_telephony_embms_cts_MbmsDownloadCallbackTest.java,"public void testFullCallback() throws java.lang.Exception { int sampleInt = 10; android.telephony.embms.cts.MbmsDownloadStateCallbackTest.TestDSCallback callback = new android.telephony.embms.cts.MbmsDownloadStateCallbackTest.TestDSCallback(android.telephony.mbms.DownloadStateCallback.ALL_UPDATES); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.registerStateCallback(request, mCallbackExecutor, callback); mMiddlewareControl.fireOnProgressUpdated(request, CtsDownloadService.FILE_INFO, sampleInt, sampleInt, sampleInt, sampleInt); com.android.internal.os.SomeArgs progressArgs = callback.waitOnProgressUpdated(android.telephony.embms.cts.ASYNC_TIMEOUT); assertEquals(request, progressArgs.arg1); assertEquals(CtsDownloadService.FILE_INFO, progressArgs.arg2); assertEquals(sampleInt, progressArgs.arg3); assertEquals(sampleInt, progressArgs.arg4); assertEquals(sampleInt, progressArgs.arg5); assertEquals(sampleInt, progressArgs.arg6); mMiddlewareControl.fireOnStateUpdated(request, CtsDownloadService.FILE_INFO, sampleInt); com.android.internal.os.SomeArgs stateArgs = callback.waitOnStateUpdated(android.telephony.embms.cts.ASYNC_TIMEOUT); assertEquals(request, stateArgs.arg1); assertEquals(CtsDownloadService.FILE_INFO, stateArgs.arg2); assertEquals(sampleInt, stateArgs.arg3); }",7bd932211aecbfb348e17bb4be2d45af93957bc9,"public void testFullCallback() throws java.lang.Exception { int sampleInt = 10; android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback statusCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback(); android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback progressCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback(); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.registerStatusListener(request, mCallbackExecutor, statusCallback); mDownloadSession.registerProgressListener(request, mCallbackExecutor, progressCallback); mMiddlewareControl.fireOnProgressUpdated(request, CtsDownloadService.FILE_INFO, sampleInt, sampleInt, sampleInt, sampleInt); com.android.internal.os.SomeArgs progressArgs = progressCallback.waitOnProgressUpdated(android.telephony.embms.cts.ASYNC_TIMEOUT); assertEquals(request, progressArgs.arg1); assertEquals(CtsDownloadService.FILE_INFO, progressArgs.arg2); assertEquals(sampleInt, progressArgs.arg3); assertEquals(sampleInt, progressArgs.arg4); assertEquals(sampleInt, progressArgs.arg5); assertEquals(sampleInt, progressArgs.arg6); mMiddlewareControl.fireOnStateUpdated(request, CtsDownloadService.FILE_INFO, sampleInt); com.android.internal.os.SomeArgs stateArgs = statusCallback.waitOnStateUpdated(android.telephony.embms.cts.ASYNC_TIMEOUT); assertEquals(request, stateArgs.arg1); assertEquals(CtsDownloadService.FILE_INFO, stateArgs.arg2); assertEquals(sampleInt, stateArgs.arg3); }",429732e925bcf3bebf2e70bdf3ad0237b3111457,"public void testFullCallback() throws java.lang.Exception { int sampleInt = 10; android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback statusCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback(); android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback progressCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback(); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.addStatusListener(request, mCallbackExecutor, statusCallback); mDownloadSession.addProgressListener(request, mCallbackExecutor, progressCallback); mMiddlewareControl.fireOnProgressUpdated(request, CtsDownloadService.FILE_INFO, sampleInt, sampleInt, sampleInt, sampleInt); com.android.internal.os.SomeArgs progressArgs = progressCallback.waitOnProgressUpdated(android.telephony.embms.cts.ASYNC_TIMEOUT); assertEquals(request, progressArgs.arg1); assertEquals(CtsDownloadService.FILE_INFO, progressArgs.arg2); assertEquals(sampleInt, progressArgs.arg3); assertEquals(sampleInt, progressArgs.arg4); assertEquals(sampleInt, progressArgs.arg5); assertEquals(sampleInt, progressArgs.arg6); mMiddlewareControl.fireOnStateUpdated(request, CtsDownloadService.FILE_INFO, sampleInt); com.android.internal.os.SomeArgs stateArgs = statusCallback.waitOnStateUpdated(android.telephony.embms.cts.ASYNC_TIMEOUT); assertEquals(request, stateArgs.arg1); assertEquals(CtsDownloadService.FILE_INFO, stateArgs.arg2); assertEquals(sampleInt, stateArgs.arg3); }",5f48937ca96333e15d90c5b358c2c1488d464a0e,2018-03-26 23:53:39,4
643941,tests_tests_telephony_src_android_telephony_embms_cts_MbmsDownloadCallbackTest.java,"public void testDeregistration() throws java.lang.Exception { android.telephony.embms.cts.MbmsDownloadStateCallbackTest.TestDSCallback callback = new android.telephony.embms.cts.MbmsDownloadStateCallbackTest.TestDSCallback(android.telephony.mbms.DownloadStateCallback.ALL_UPDATES); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.registerStateCallback(request, mCallbackExecutor, callback); mDownloadSession.unregisterStateCallback(request, callback); mMiddlewareControl.fireOnStateUpdated(null, null, 0); assertNull(callback.waitOnStateUpdated(android.telephony.embms.cts.MbmsDownloadStateCallbackTest.SHORT_TIMEOUT)); mMiddlewareControl.fireOnProgressUpdated(null, null, 0, 0, 0, 0); assertNull(callback.waitOnProgressUpdated(android.telephony.embms.cts.MbmsDownloadStateCallbackTest.SHORT_TIMEOUT)); }",c2e3d40d40d4f056053cc6294e9a7883bb6642fb,"public void testDeregistration() throws java.lang.Exception { android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback statusCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback(); android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback progressCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback(); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.registerProgressListener(request, mCallbackExecutor, progressCallback); mDownloadSession.registerStatusListener(request, mCallbackExecutor, statusCallback); mDownloadSession.unregisterProgressListener(request, progressCallback); mDownloadSession.unregisterStatusListener(request, statusCallback); mMiddlewareControl.fireOnStateUpdated(null, null, 0); assertNull(statusCallback.waitOnStateUpdated(android.telephony.embms.cts.MbmsDownloadCallbackTest.SHORT_TIMEOUT)); mMiddlewareControl.fireOnProgressUpdated(null, null, 0, 0, 0, 0); assertNull(progressCallback.waitOnProgressUpdated(android.telephony.embms.cts.MbmsDownloadCallbackTest.SHORT_TIMEOUT)); }",0dd9fd327930a5788a76e0c35f03781b3c1594d2,"public void testDeregistration() throws java.lang.Exception { android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback statusCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback(); android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback progressCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback(); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.addProgressListener(request, mCallbackExecutor, progressCallback); mDownloadSession.addStatusListener(request, mCallbackExecutor, statusCallback); mDownloadSession.removeProgressListener(request, progressCallback); mDownloadSession.removeStatusListener(request, statusCallback); mMiddlewareControl.fireOnStateUpdated(null, null, 0); assertNull(statusCallback.waitOnStateUpdated(android.telephony.embms.cts.MbmsDownloadCallbackTest.SHORT_TIMEOUT)); mMiddlewareControl.fireOnProgressUpdated(null, null, 0, 0, 0, 0); assertNull(progressCallback.waitOnProgressUpdated(android.telephony.embms.cts.MbmsDownloadCallbackTest.SHORT_TIMEOUT)); }",99f07ae2b71be4a976a72ac00fba4a77c5e903a9,2018-03-26 23:53:39,4
643941,tests_tests_telephony_EmbmsMiddlewareTestApp_src_android_telephony_cts_embmstestapp_CtsDownloadService.java,"@java.lang.Override public int registerStateCallback(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStateCallback listener) throws android.os.RemoteException { mDownloadStateCallback = listener; return android.telephony.mbms.MbmsErrors.SUCCESS; }",1a8cfed91ee665a254c6c8dd7404c5f78a9057ac,"@java.lang.Override public int registerStatusListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStatusListener listener) throws android.os.RemoteException { mDownloadStatusListener = listener; return android.telephony.mbms.MbmsErrors.SUCCESS; }",0e00c8e53cb014c7d3abc731fdac05e3d82a2010,"@java.lang.Override public int addStatusListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStatusListener listener) throws android.os.RemoteException { mDownloadStatusListener = listener; return android.telephony.mbms.MbmsErrors.SUCCESS; }",4e70df969c7fb3a1aebc3f636bc671aeb6546933,2018-03-26 23:53:39,4
643941,tests_tests_telephony_EmbmsMiddlewareTestApp_src_android_telephony_cts_embmstestapp_CtsDownloadService.java,"@java.lang.Override public int unregisterStateCallback(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStateCallback callback) { mDownloadStateCallback = null; return android.telephony.mbms.MbmsErrors.SUCCESS; }",a3ec403fe17672df836ce26227c8f9553333a8d1,"@java.lang.Override public int unregisterStatusListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStatusListener callback) { mDownloadStatusListener = null; return android.telephony.mbms.MbmsErrors.SUCCESS; }",941e0b92223384ea2ac0ae382f791aec543d5c7a,"@java.lang.Override public int removeStatusListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStatusListener callback) { mDownloadStatusListener = null; return android.telephony.mbms.MbmsErrors.SUCCESS; }",156f1a7191f972917ad93cd201e2eba1321794ec,2018-03-26 23:53:39,4
643826,telephony_java_android_telephony_mbms_vendor_MbmsDownloadServiceBase.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public final int registerProgressListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadProgressListener listener) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); if (downloadRequest == null) { throw new java.lang.NullPointerException(""Download request must not be null""); } if (listener == null) { throw new java.lang.NullPointerException(""Callback must not be null""); } android.telephony.mbms.DownloadProgressListener exposedCallback = new android.telephony.mbms.vendor.MbmsDownloadServiceBase.VendorDownloadProgressListener(listener) { @java.lang.Override protected void onRemoteException(android.os.RemoteException e) { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); } }; int result = registerProgressListener(downloadRequest, exposedCallback); if (result == (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.mbms.vendor.DeathRecipient deathRecipient = new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); mDownloadProgressListenerBinderMap.remove(listener.asBinder()); mDownloadCallbackDeathRecipients.remove(listener.asBinder()); } }; mDownloadCallbackDeathRecipients.put(listener.asBinder(), deathRecipient); listener.asBinder().linkToDeath(deathRecipient, 0); mDownloadProgressListenerBinderMap.put(listener.asBinder(), exposedCallback); } return result; }",83b2d96350a107cb80fe6451e40cf63078d16653,"@java.lang.Override public final int addProgressListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadProgressListener listener) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); if (downloadRequest == null) { throw new java.lang.NullPointerException(""Download request must not be null""); } if (listener == null) { throw new java.lang.NullPointerException(""Callback must not be null""); } android.telephony.mbms.DownloadProgressListener exposedCallback = new android.telephony.mbms.vendor.MbmsDownloadServiceBase.VendorDownloadProgressListener(listener) { @java.lang.Override protected void onRemoteException(android.os.RemoteException e) { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); } }; int result = addProgressListener(downloadRequest, exposedCallback); if (result == (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.mbms.vendor.DeathRecipient deathRecipient = new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); mDownloadProgressListenerBinderMap.remove(listener.asBinder()); mDownloadCallbackDeathRecipients.remove(listener.asBinder()); } }; mDownloadCallbackDeathRecipients.put(listener.asBinder(), deathRecipient); listener.asBinder().linkToDeath(deathRecipient, 0); mDownloadProgressListenerBinderMap.put(listener.asBinder(), exposedCallback); } return result; }",c186a1bea27034e1ad8fa3b3e21028a958197fb5,2018-03-26 23:53:39,4
640285,tests_net_java_com_android_server_connectivity_TetheringTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void runWorkingMobileUsbTethering(android.net.NetworkState upstreamState) { when(mConnectivityManager.isTetheringSupported()).thenReturn(true); when(mUpstreamNetworkMonitor.selectPreferredUpstreamType(any())).thenReturn(upstreamState); mTethering.startTethering(com.android.server.connectivity.TETHERING_USB, null, false); mLooper.dispatchAll(); verify(mUsbManager, times(1)).setCurrentFunction(UsbManager.USB_FUNCTION_RNDIS, false); mTethering.interfaceStatusChanged(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, true); sendUsbBroadcast(true, true, true); mLooper.dispatchAll(); mTetheringDependencies.getUpstreamNetworkMonitorMasterSM().sendMessage(Tethering.TetherMasterSM.EVENT_UPSTREAM_CALLBACK, UpstreamNetworkMonitor.EVENT_ON_AVAILABLE, 0, upstreamState); verify(mUpstreamNetworkMonitor, times(1)).selectPreferredUpstreamType(any()); verify(mUpstreamNetworkMonitor, times(1)).setCurrentUpstream(upstreamState.network); }",39c3e79e427073e5c4389d5e5d41ab978e93a785,"private void runUsbTethering(android.net.NetworkState upstreamState) { prepareUsbTethering(upstreamState); sendUsbBroadcast(true, true, true); mLooper.dispatchAll(); }",fe49fb22644bfc1e1a0c38124d430603210554cb,2018-03-27 10:17:42,10
640285,tests_net_java_com_android_server_connectivity_TetheringTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public com.android.server.connectivity.tethering.IPv6TetheringCoordinator getIpv6TetheringCoordinator(java.util.ArrayList<com.android.server.connectivity.tethering.TetherInterfaceStateMachine> notifyList, android.net.util.SharedLog log) { mIPv6CoordinatorNotifyList = notifyList; return mIPv6TetheringCoordinator; }",4e05dee781a716e0817466c7d67f3b3a5b0c594b,"@java.lang.Override public com.android.server.connectivity.tethering.IPv6TetheringCoordinator getIPv6TetheringCoordinator(java.util.ArrayList<com.android.server.connectivity.tethering.TetherInterfaceStateMachine> notifyList, android.net.util.SharedLog log) { ipv6CoordinatorNotifyList = notifyList; return mIPv6TetheringCoordinator; }",a07c15bb44d3d2fc9dd7d75002167e5de4b277d9,2018-03-27 10:17:42,10
640285,tests_net_java_com_android_server_connectivity_TetheringTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public android.net.util.InterfaceParams getInterfaceParams(java.lang.String ifName) { final java.lang.String[] ifaces = new java.lang.String[]{ com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_WLAN_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME }; final int index = java.util.Arrays.asList(ifaces).indexOf(ifName); assertTrue((""Non-mocked interface: "" + ifName), (index >= 0)); return new android.net.util.InterfaceParams(ifName, (index + 1), android.net.MacAddress.ALL_ZEROS_ADDRESS); }",72dd4d98877c2295b7bbe07fb2d4e3a29521ae4d,"@java.lang.Override public android.net.util.InterfaceParams getInterfaceParams(java.lang.String ifName) { final java.lang.String[] ifaces = new java.lang.String[]{ com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_WLAN_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME }; final int index = com.android.internal.util.ArrayUtils.indexOf(ifaces, ifName); assertTrue((""Non-mocked interface: "" + ifName), (index >= 0)); return new android.net.util.InterfaceParams(ifName, (index + (com.android.server.connectivity.TetheringTest.IFINDEX_OFFSET)), android.net.MacAddress.ALL_ZEROS_ADDRESS); }",800055f476549d18deb6d201596e6529067c2ac5,2018-03-27 10:17:42,10
640285,tests_net_java_com_android_server_connectivity_TetheringTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static android.net.NetworkState buildMobileIpv4UpstreamState() { return com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(true, false); }",d6b25ea0615a7db781e76663f3565e02938de105,"private static android.net.NetworkState buildMobileIPv4UpstreamState() { return com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(true, false); }",e9c7957303976d869239bd9fef10a5249b58aa94,2018-03-27 10:17:42,10
640285,services_core_java_com_android_server_connectivity_tethering_TetheringDependencies.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.android.server.connectivity.tethering.IPv6TetheringCoordinator getIpv6TetheringCoordinator(java.util.ArrayList<com.android.server.connectivity.tethering.TetherInterfaceStateMachine> notifyList, android.net.util.SharedLog log) { return new com.android.server.connectivity.tethering.IPv6TetheringCoordinator(notifyList, log); }",de43a9362374e1db934ab69648f6cccb12a6f954,"public com.android.server.connectivity.tethering.IPv6TetheringCoordinator getIPv6TetheringCoordinator(java.util.ArrayList<com.android.server.connectivity.tethering.TetherInterfaceStateMachine> notifyList, android.net.util.SharedLog log) { return new com.android.server.connectivity.tethering.IPv6TetheringCoordinator(notifyList, log); }",81c07d1bb07cbcf28ddc011988e15a0e3fcb9252,2018-03-27 10:17:42,10
640285,services_core_java_com_android_server_connectivity_tethering_TetheringDependencies.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.android.server.connectivity.tethering.UpstreamNetworkMonitor getUpstreamNetworkMonitor(android.content.Context ctx, com.android.internal.util.StateMachine tgt, android.net.util.SharedLog log, int what) { return new com.android.server.connectivity.tethering.UpstreamNetworkMonitor(ctx, tgt, log, what); }",357dbaf949d00e833ed19edc176069c66d9b4140,"public com.android.server.connectivity.tethering.UpstreamNetworkMonitor getUpstreamNetworkMonitor(android.content.Context ctx, com.android.internal.util.StateMachine target, android.net.util.SharedLog log, int what) { return new com.android.server.connectivity.tethering.UpstreamNetworkMonitor(ctx, target, log, what); }",62e102ee51eb78b9ff7def26f2ddb72f69c01f90,2018-03-27 10:17:42,10
640285,tests_net_java_com_android_server_connectivity_TetheringTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void sendIPv6TetherUpdates(android.net.NetworkState upstreamState) { verify(mIPv6TetheringCoordinator, times(1)).addActiveDownstream(argThat(( sm) -> sm.linkProperties().getInterfaceName().equals(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME)), eq(IControlsTethering.STATE_TETHERED)); for (com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism : mTetheringDependencies.getIPv6CoordinatorNotifyList()) { android.net.NetworkState ipv6OnlyState = com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(false, true); tism.sendMessage(TetherInterfaceStateMachine.CMD_IPV6_TETHER_UPDATE, 0, 0, (upstreamState.linkProperties.isIPv6Provisioned() ? ipv6OnlyState.linkProperties : null)); } mLooper.dispatchAll(); }",0c4acc39bcfdf1bd380d168c8f2bd004ea74d21f,"private void sendIPv6TetherUpdates(android.net.NetworkState upstreamState) { verify(mIPv6TetheringCoordinator, times(1)).addActiveDownstream(argThat(( sm) -> sm.linkProperties().getInterfaceName().equals(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME)), eq(IControlsTethering.STATE_TETHERED)); for (com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism : mTetheringDependencies.ipv6CoordinatorNotifyList) { android.net.NetworkState ipv6OnlyState = com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(false, true); tism.sendMessage(TetherInterfaceStateMachine.CMD_IPV6_TETHER_UPDATE, 0, 0, (upstreamState.linkProperties.isIPv6Provisioned() ? ipv6OnlyState.linkProperties : null)); } mLooper.dispatchAll(); }",d2827c39417877d918dda5097801ff8ff8244524,2018-03-27 10:17:42,10
640285,tests_net_java_com_android_server_connectivity_TetheringTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static android.net.NetworkState buildMobileUpstreamState(boolean withIpv4, boolean withIpv6) { final android.net.NetworkInfo info = new android.net.NetworkInfo(android.net.ConnectivityManager.TYPE_MOBILE, 0, null, null); info.setDetailedState(NetworkInfo.DetailedState.CONNECTED, null, null); final android.net.LinkProperties prop = new android.net.LinkProperties(); prop.setInterfaceName(com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); if (withIpv4) { prop.addRoute(new android.net.RouteInfo(new android.net.IpPrefix(ANY, 0), android.net.NetworkUtils.numericToInetAddress(""10.0.0.1""), com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME)); } if (withIpv6) { prop.addDnsServer(android.net.NetworkUtils.numericToInetAddress(""2001:db8::2"")); prop.addLinkAddress(new android.net.LinkAddress(android.net.NetworkUtils.numericToInetAddress(""2001:db8::""), 64)); prop.addRoute(new android.net.RouteInfo(new android.net.IpPrefix(ANY, 0), android.net.NetworkUtils.numericToInetAddress(""2001:db8::1""), com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME)); } final android.net.NetworkCapabilities capabilities = new android.net.NetworkCapabilities().addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR); return new android.net.NetworkState(info, prop, capabilities, new android.net.Network(100), null, ""netid""); }",6a3bde60fc163d2b827e886391fea355ee047c4d,"private static android.net.NetworkState buildMobileUpstreamState(boolean withIPv4, boolean withIPv6) { final android.net.NetworkInfo info = new android.net.NetworkInfo(android.net.ConnectivityManager.TYPE_MOBILE, 0, null, null); info.setDetailedState(NetworkInfo.DetailedState.CONNECTED, null, null); final android.net.LinkProperties prop = new android.net.LinkProperties(); prop.setInterfaceName(com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); if (withIPv4) { prop.addRoute(new android.net.RouteInfo(new android.net.IpPrefix(ANY, 0), android.net.NetworkUtils.numericToInetAddress(""10.0.0.1""), com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME)); } if (withIPv6) { prop.addDnsServer(android.net.NetworkUtils.numericToInetAddress(""2001:db8::2"")); prop.addLinkAddress(new android.net.LinkAddress(android.net.NetworkUtils.numericToInetAddress(""2001:db8::""), android.net.util.NetworkConstants.RFC7421_PREFIX_LENGTH)); prop.addRoute(new android.net.RouteInfo(new android.net.IpPrefix(ANY, 0), android.net.NetworkUtils.numericToInetAddress(""2001:db8::1""), com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME)); } final android.net.NetworkCapabilities capabilities = new android.net.NetworkCapabilities().addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR); return new android.net.NetworkState(info, prop, capabilities, new android.net.Network(100), null, ""netid""); }",06867b0ae4008bae37c7988e804bb4f3fc14eaf8,2018-03-27 10:17:42,10
640285,tests_net_java_com_android_server_connectivity_TetheringTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void workingMobileUsbTethering_IPv4() throws java.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobileIpv4UpstreamState(); runWorkingMobileUsbTethering(upstreamState); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); sendIPv6TetherUpdates(upstreamState); verify(mRouterAdvertisementDaemon, never()).buildNewRa(any(), notNull()); }",dce142c7a92ca04de2f00c190f669c815b038c4a,"@org.junit.Test public void workingMobileUsbTethering_IPv4() throws java.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobileIPv4UpstreamState(); runUsbTethering(upstreamState); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); sendIPv6TetherUpdates(upstreamState); verify(mRouterAdvertisementDaemon, never()).buildNewRa(any(), notNull()); }",0d29c00f288601259a3db9bdb7646c7a4190a109,2018-03-27 10:17:42,10
640285,tests_net_java_com_android_server_connectivity_TetheringTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public com.android.server.connectivity.tethering.UpstreamNetworkMonitor getUpstreamNetworkMonitor(android.content.Context ctx, com.android.internal.util.StateMachine tgt, android.net.util.SharedLog log, int what) { mUpstreamNetworkMonitorMasterSM = tgt; return mUpstreamNetworkMonitor; }",5f105ef246486b5e92152ded89b9cf5f14aaf4a8,"@java.lang.Override public com.android.server.connectivity.tethering.UpstreamNetworkMonitor getUpstreamNetworkMonitor(android.content.Context ctx, com.android.internal.util.StateMachine target, android.net.util.SharedLog log, int what) { upstreamNetworkMonitorMasterSM = target; return mUpstreamNetworkMonitor; }",8e3b324b48537651f6d66de5b72fb3c4a5f47835,2018-03-27 10:17:42,10
640285,tests_net_java_com_android_server_connectivity_TetheringTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void workingMobileUsbTethering_DualStack() throws java.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobileDualStackUpstreamState(); runWorkingMobileUsbTethering(upstreamState); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mRouterAdvertisementDaemon, times(1)).start(); sendIPv6TetherUpdates(upstreamState); verify(mRouterAdvertisementDaemon, times(1)).buildNewRa(any(), notNull()); verify(mNetd, times(1)).tetherApplyDnsInterfaces(); }",2714d7f0eeb1f8994daf809ec30812af97a2becb,"@org.junit.Test public void workingMobileUsbTethering_DualStack() throws java.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobileDualStackUpstreamState(); runUsbTethering(upstreamState); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mRouterAdvertisementDaemon, times(1)).start(); sendIPv6TetherUpdates(upstreamState); verify(mRouterAdvertisementDaemon, times(1)).buildNewRa(any(), notNull()); verify(mNetd, times(1)).tetherApplyDnsInterfaces(); }",2d12772ebc4655062268fd48c7826963f3130074,2018-03-27 10:17:42,10
646612,tests_unit_src_com_android_bluetooth_newavrcp_MediaPlayerWrapperTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testControllerUpdate() { com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = com.android.bluetooth.avrcp.MediaPlayerWrapper.wrap(mMockController, mThread.getLooper()); org.junit.Assert.assertTrue(wrapper.isReady()); wrapper.registerCallback(mTestCbs); com.android.bluetooth.avrcp.MediaController mUpdatedController = mock(com.android.bluetooth.avrcp.MediaController.class); doReturn(mTestState).when(mUpdatedController).getPlaybackState(); mTestMetadata.putString(MediaMetadata.METADATA_KEY_TITLE, ""New Title""); doReturn(mTestMetadata.build()).when(mUpdatedController).getMetadata(); doReturn(null).when(mMockController).getQueue(); wrapper.updateMediaController(mUpdatedController); verify(mUpdatedController).registerCallback(mControllerCbs.capture(), any()); com.android.bluetooth.avrcp.MediaController.Callback controllerCallbacks = mControllerCbs.getValue(); controllerCallbacks.onMetadataChanged(mTestMetadata.build()); verify(mTestCbs, never()).mediaUpdatedCallback(any()); }",dba106cfccb8773120d7819b43f3d468b9567c70,"@org.junit.Test public void testControllerUpdate() { com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = com.android.bluetooth.avrcp.MediaPlayerWrapper.wrap(mMockController, mThread.getLooper()); org.junit.Assert.assertTrue(wrapper.isReady()); wrapper.registerCallback(mTestCbs); com.android.bluetooth.avrcp.MediaController mUpdatedController = mock(com.android.bluetooth.avrcp.MediaController.class); doReturn(mTestState.build()).when(mUpdatedController).getPlaybackState(); mTestMetadata.putString(MediaMetadata.METADATA_KEY_TITLE, ""New Title""); doReturn(mTestMetadata.build()).when(mUpdatedController).getMetadata(); doReturn(null).when(mMockController).getQueue(); wrapper.updateMediaController(mUpdatedController); verify(mUpdatedController).registerCallback(mControllerCbs.capture(), any()); com.android.bluetooth.avrcp.MediaController.Callback controllerCallbacks = mControllerCbs.getValue(); controllerCallbacks.onMetadataChanged(mTestMetadata.build()); verify(mTestCbs, never()).mediaUpdatedCallback(any()); }",3c9971f61be535ae40774caec967fadd9869c08c,2018-03-27 12:55:23,4
647560,src_com_android_server_telecom_components_UserCallIntentProcessor.java,"private boolean sendBroadcastToReceiver(android.content.Intent intent) { intent.putExtra(CallIntentProcessor.KEY_IS_INCOMING_CALL, false); intent.setFlags(Intent.FLAG_RECEIVER_FOREGROUND); intent.setClass(mContext, com.android.server.telecom.components.PrimaryCallReceiver.class); android.telecom.Log.d(this, ""Sending broadcast as user to CallReceiver""); mContext.sendBroadcastAsUser(intent, UserHandle.SYSTEM); return true; }",1fa8375baefbb7f0ddacf7c7ade295da9b1a949d,"private boolean sendBroadcastToReceiver(android.content.Intent intent, boolean isLocalInvocation) { intent.putExtra(CallIntentProcessor.KEY_IS_INCOMING_CALL, false); intent.setFlags(Intent.FLAG_RECEIVER_FOREGROUND); intent.setClass(mContext, com.android.server.telecom.components.PrimaryCallReceiver.class); if (isLocalInvocation) { android.telecom.Log.i(this, ""sendBroadcastToReceiver: send intent to Telecom directly.""); synchronized(com.android.server.telecom.TelecomSystem.getInstance().getLock()) { com.android.server.telecom.TelecomSystem.getInstance().getCallIntentProcessor().processIntent(intent); } } else { android.telecom.Log.i(this, ""sendBroadcastToReceiver: trampoline to Telecom.""); mContext.sendBroadcastAsUser(intent, UserHandle.SYSTEM); } return true; }",cbf75454cd38c815fc91848b3188bcc3bc4d3448,"private boolean sendIntentToDestination(android.content.Intent intent, boolean isLocalInvocation) { intent.putExtra(CallIntentProcessor.KEY_IS_INCOMING_CALL, false); intent.setFlags(Intent.FLAG_RECEIVER_FOREGROUND); intent.setClass(mContext, com.android.server.telecom.components.PrimaryCallReceiver.class); if (isLocalInvocation) { android.telecom.Log.i(this, ""sendIntentToDestination: send intent to Telecom directly.""); synchronized(com.android.server.telecom.TelecomSystem.getInstance().getLock()) { com.android.server.telecom.TelecomSystem.getInstance().getCallIntentProcessor().processIntent(intent); } } else { android.telecom.Log.i(this, ""sendIntentToDestination: trampoline to Telecom.""); mContext.sendBroadcastAsUser(intent, UserHandle.SYSTEM); } return true; }",4eabac26f6f8e0582faf838e1a1e5d7db64def0c,2018-03-27 18:04:55,3
649566,src_com_android_bluetooth_btservice_AdapterService.java,"void updateAdapterState(int prevState, int newState) { mAdapterProperties.setState(newState); if ((mCallbacks) != null) { int n = mCallbacks.beginBroadcast(); debugLog(((((""updateAdapterState() - Broadcasting state "" + (android.bluetooth.BluetoothAdapter.nameForState(newState))) + "" to "") + n) + "" receivers."")); for (int i = 0; i < n; i++) { try { mCallbacks.getBroadcastItem(i).onBluetoothStateChange(prevState, newState); } catch (android.os.RemoteException e) { debugLog(((((""updateAdapterState() - Callback #"" + i) + "" failed ("") + e) + "")"")); } } mCallbacks.finishBroadcast(); } }",a8300911da61a5fd67582d1911c3ae272cef069f,"void updateAdapterState(int prevState, int newState) { mAdapterProperties.setState(newState); if (newState == (android.bluetooth.BluetoothAdapter.STATE_BLE_TURNING_ON)) { mSnoopLogSettingAtEnable = android.os.SystemProperties.getBoolean(com.android.bluetooth.btservice.AdapterService.BLUETOOTH_BTSNOOP_ENABLE_PROPERTY, false); } if ((mCallbacks) != null) { int n = mCallbacks.beginBroadcast(); debugLog(((((""updateAdapterState() - Broadcasting state "" + (android.bluetooth.BluetoothAdapter.nameForState(newState))) + "" to "") + n) + "" receivers."")); for (int i = 0; i < n; i++) { try { mCallbacks.getBroadcastItem(i).onBluetoothStateChange(prevState, newState); } catch (android.os.RemoteException e) { debugLog(((((""updateAdapterState() - Callback #"" + i) + "" failed ("") + e) + "")"")); } } mCallbacks.finishBroadcast(); } if ((newState == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON)) && (prevState != (android.bluetooth.BluetoothAdapter.STATE_OFF))) { boolean snoopLogSetting = android.os.SystemProperties.getBoolean(com.android.bluetooth.btservice.AdapterService.BLUETOOTH_BTSNOOP_ENABLE_PROPERTY, false); if ((mSnoopLogSettingAtEnable) != snoopLogSetting) { mAdapterStateMachine.sendMessage(AdapterState.BLE_TURN_OFF); } } }",06743c4a3a971e31796c9a40fc7cd4ab5145096a,"void updateAdapterState(int prevState, int newState) { mAdapterProperties.setState(newState); if ((mCallbacks) != null) { int n = mCallbacks.beginBroadcast(); debugLog(((((""updateAdapterState() - Broadcasting state "" + (android.bluetooth.BluetoothAdapter.nameForState(newState))) + "" to "") + n) + "" receivers."")); for (int i = 0; i < n; i++) { try { mCallbacks.getBroadcastItem(i).onBluetoothStateChange(prevState, newState); } catch (android.os.RemoteException e) { debugLog(((((""updateAdapterState() - Callback #"" + i) + "" failed ("") + e) + "")"")); } } mCallbacks.finishBroadcast(); } if (newState == (android.bluetooth.BluetoothAdapter.STATE_BLE_TURNING_ON)) { mSnoopLogSettingAtEnable = android.os.SystemProperties.getBoolean(com.android.bluetooth.btservice.AdapterService.BLUETOOTH_BTSNOOP_ENABLE_PROPERTY, false); } else if ((newState == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON)) && (prevState != (android.bluetooth.BluetoothAdapter.STATE_OFF))) { boolean snoopLogSetting = android.os.SystemProperties.getBoolean(com.android.bluetooth.btservice.AdapterService.BLUETOOTH_BTSNOOP_ENABLE_PROPERTY, false); if ((mSnoopLogSettingAtEnable) != snoopLogSetting) { mAdapterStateMachine.sendMessage(AdapterState.BLE_TURN_OFF); } } }",104f883e897e737f2326e14291f9269c7676a02a,2018-03-27 18:10:26,4
647221,core_java_android_os_ZygoteProcess.java,"@com.android.internal.annotations.GuardedBy(""mLock"") private android.os.ZygoteProcess.ZygoteState openZygoteSocketIfNeeded(java.lang.String abi) throws android.os.ZygoteStartFailedEx { com.android.internal.util.Preconditions.checkState(java.lang.Thread.holdsLock(mLock), ""ZygoteProcess lock not held""); if (((primaryZygoteState) == null) || (primaryZygoteState.isClosed())) { try { primaryZygoteState = android.os.ZygoteProcess.ZygoteState.connect(mSocket); } catch (java.io.IOException ioe) { throw new android.os.ZygoteStartFailedEx(""Error connecting to primary zygote"", ioe); } } if (primaryZygoteState.matches(abi)) { return primaryZygoteState; } if (((secondaryZygoteState) == null) || (secondaryZygoteState.isClosed())) { try { secondaryZygoteState = android.os.ZygoteProcess.ZygoteState.connect(mSecondarySocket); } catch (java.io.IOException ioe) { throw new android.os.ZygoteStartFailedEx(""Error connecting to secondary zygote"", ioe); } } if (secondaryZygoteState.matches(abi)) { return secondaryZygoteState; } throw new android.os.ZygoteStartFailedEx((""Unsupported zygote ABI: "" + abi)); }",6a8e600100092c82dcb4c854864d5cec23614209,"@com.android.internal.annotations.GuardedBy(""mLock"") private android.os.ZygoteProcess.ZygoteState openZygoteSocketIfNeeded(java.lang.String abi) throws android.os.ZygoteStartFailedEx { com.android.internal.util.Preconditions.checkState(java.lang.Thread.holdsLock(mLock), ""ZygoteProcess lock not held""); if (((primaryZygoteState) == null) || (primaryZygoteState.isClosed())) { try { primaryZygoteState = android.os.ZygoteProcess.ZygoteState.connect(mSocket); } catch (java.io.IOException ioe) { throw new android.os.ZygoteStartFailedEx(""Error connecting to primary zygote"", ioe); } maybeSendApiBlacklistExemptions(primaryZygoteState, false); } if (primaryZygoteState.matches(abi)) { return primaryZygoteState; } if (((secondaryZygoteState) == null) || (secondaryZygoteState.isClosed())) { try { secondaryZygoteState = android.os.ZygoteProcess.ZygoteState.connect(mSecondarySocket); } catch (java.io.IOException ioe) { throw new android.os.ZygoteStartFailedEx(""Error connecting to secondary zygote"", ioe); } maybeSendApiBlacklistExemptions(secondaryZygoteState, false); } if (secondaryZygoteState.matches(abi)) { return secondaryZygoteState; } throw new android.os.ZygoteStartFailedEx((""Unsupported zygote ABI: "" + abi)); }",71ad5534c2eff1f813127c1a04c621c1d7fd417e,"@com.android.internal.annotations.GuardedBy(""mLock"") private android.os.ZygoteProcess.ZygoteState openZygoteSocketIfNeeded(java.lang.String abi) throws android.os.ZygoteStartFailedEx { com.android.internal.util.Preconditions.checkState(java.lang.Thread.holdsLock(mLock), ""ZygoteProcess lock not held""); if (((primaryZygoteState) == null) || (primaryZygoteState.isClosed())) { try { primaryZygoteState = android.os.ZygoteProcess.ZygoteState.connect(mSocket); } catch (java.io.IOException ioe) { throw new android.os.ZygoteStartFailedEx(""Error connecting to primary zygote"", ioe); } maybeSetApiBlacklistExemptions(primaryZygoteState, false); } if (primaryZygoteState.matches(abi)) { return primaryZygoteState; } if (((secondaryZygoteState) == null) || (secondaryZygoteState.isClosed())) { try { secondaryZygoteState = android.os.ZygoteProcess.ZygoteState.connect(mSecondarySocket); } catch (java.io.IOException ioe) { throw new android.os.ZygoteStartFailedEx(""Error connecting to secondary zygote"", ioe); } maybeSetApiBlacklistExemptions(secondaryZygoteState, false); } if (secondaryZygoteState.matches(abi)) { return secondaryZygoteState; } throw new android.os.ZygoteStartFailedEx((""Unsupported zygote ABI: "" + abi)); }",55e0d106ea4fd5b16320c7f2ec14edea5a3504fe,2018-03-27 20:49:44,3
647221,core_java_android_os_ZygoteProcess.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void setApiBlacklistExemptions(java.lang.String exemptions) { synchronized(mLock) { mApiBlacklistExemptions = (android.text.TextUtils.isEmpty(exemptions)) ? java.util.Collections.emptyList() : java.util.Arrays.asList(exemptions.split(""\\s+"")); maybeSendApiBlacklistExemptions(primaryZygoteState, true); maybeSendApiBlacklistExemptions(secondaryZygoteState, true); } }",ee9625663a32c9a6c7a9433ad93b2ceed771042a,"public void setApiBlacklistExemptions(java.util.List<java.lang.String> exemptions) { synchronized(mLock) { mApiBlacklistExemptions = exemptions; maybeSetApiBlacklistExemptions(primaryZygoteState, true); maybeSetApiBlacklistExemptions(secondaryZygoteState, true); } }",1bb9efe5fc48c577d03e4d31c44c32b166c2820a,2018-03-27 20:49:44,3
647221,core_java_android_os_ZygoteProcess.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.android.internal.annotations.GuardedBy(""mLock"") private void maybeSendApiBlacklistExemptions(android.os.ZygoteProcess.ZygoteState state, boolean sendIfEmpty) { if ((state == null) || (state.isClosed())) { return; } if ((!sendIfEmpty) && (mApiBlacklistExemptions.isEmpty())) { return; } try { state.writer.write(java.lang.Integer.toString(((mApiBlacklistExemptions.size()) + 1))); state.writer.newLine(); state.writer.write(""--set-api-blacklist-exemptions""); state.writer.newLine(); for (int i = 0; i < (mApiBlacklistExemptions.size()); ++i) { state.writer.write(mApiBlacklistExemptions.get(i)); state.writer.newLine(); } state.writer.flush(); int status = state.inputStream.readInt(); if (status != 0) { android.util.Slog.e(android.os.ZygoteProcess.LOG_TAG, (""Failed to set API blacklist exemptionsl status "" + status)); } } catch (java.io.IOException ioe) { android.util.Slog.e(android.os.ZygoteProcess.LOG_TAG, ""Failed to set API blacklist exemptions"", ioe); } }",b35bc34941a7905a186fafce0bb1f60eaaf70de4,"@com.android.internal.annotations.GuardedBy(""mLock"") private void maybeSetApiBlacklistExemptions(android.os.ZygoteProcess.ZygoteState state, boolean sendIfEmpty) { if ((state == null) || (state.isClosed())) { return; } if ((!sendIfEmpty) && (mApiBlacklistExemptions.isEmpty())) { return; } try { state.writer.write(java.lang.Integer.toString(((mApiBlacklistExemptions.size()) + 1))); state.writer.newLine(); state.writer.write(""--set-api-blacklist-exemptions""); state.writer.newLine(); for (int i = 0; i < (mApiBlacklistExemptions.size()); ++i) { state.writer.write(mApiBlacklistExemptions.get(i)); state.writer.newLine(); } state.writer.flush(); int status = state.inputStream.readInt(); if (status != 0) { android.util.Slog.e(android.os.ZygoteProcess.LOG_TAG, (""Failed to set API blacklist exemptions; status "" + status)); } } catch (java.io.IOException ioe) { android.util.Slog.e(android.os.ZygoteProcess.LOG_TAG, ""Failed to set API blacklist exemptions"", ioe); } }",1fcbb2eb2aca3d342978f1cb1ae9a6878ec4b7d0,2018-03-27 20:49:44,3
647221,services_core_java_com_android_server_am_ActivityManagerService.java,"private void update() { mBlacklistDisabled = ""*"".equals(Settings.Global.getString(mContext.getContentResolver(), Settings.Global.HIDDEN_API_BLACKLIST_EXEMPTIONS)); }",61545fac90eead5714b65d89d52537818b25e39b,"private void update() { java.lang.String exemptions = Settings.Global.getString(mContext.getContentResolver(), Settings.Global.HIDDEN_API_BLACKLIST_EXEMPTIONS); if (!(android.text.TextUtils.equals(exemptions, mExemptions))) { if (""*"".equals(exemptions)) { mBlacklistDisabled = true; mExemptions = null; } else { mBlacklistDisabled = false; mExemptions = exemptions; } zygoteProcess.setApiBlacklistExemptions(mExemptions); } }",7dba183a768ee40b9eed2f0b2cb6d48a32c7673c,"private void update() { java.lang.String exemptions = Settings.Global.getString(mContext.getContentResolver(), Settings.Global.HIDDEN_API_BLACKLIST_EXEMPTIONS); if (!(android.text.TextUtils.equals(exemptions, mExemptionsStr))) { mExemptionsStr = exemptions; if (""*"".equals(exemptions)) { mBlacklistDisabled = true; mExemptions = java.util.Collections.emptyList(); } else { mBlacklistDisabled = false; mExemptions = (android.text.TextUtils.isEmpty(exemptions)) ? java.util.Collections.emptyList() : java.util.Arrays.asList(exemptions.split("":"")); } zygoteProcess.setApiBlacklistExemptions(mExemptions); } }",ec02fbef82640796af51afb5175414a23bd002d1,2018-03-27 20:49:44,3
617334,src_java_com_android_internal_telephony_DeviceStateMonitor.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void setSignalStrengthReportingCriteria() { mPhone.mCi.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.HYSTERESIS_MILLIS, com.android.internal.telephony.DeviceStateMonitor.HYSTERESIS_DB, AccessNetworkThresholds.GERAN, AccessNetworkType.GERAN, null); mPhone.mCi.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.HYSTERESIS_MILLIS, com.android.internal.telephony.DeviceStateMonitor.HYSTERESIS_DB, AccessNetworkThresholds.UTRAN, AccessNetworkType.UTRAN, null); mPhone.mCi.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.HYSTERESIS_MILLIS, com.android.internal.telephony.DeviceStateMonitor.HYSTERESIS_DB, AccessNetworkThresholds.EUTRAN, AccessNetworkType.EUTRAN, null); mPhone.mCi.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.HYSTERESIS_MILLIS, com.android.internal.telephony.DeviceStateMonitor.HYSTERESIS_DB, AccessNetworkThresholds.CDMA2000, AccessNetworkType.CDMA2000, null); }",e71744fccbf6cf5f0e01fcffc6acff3e326751e9,"private void setSignalStrengthReportingCriteria() { mPhone.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.AccessNetworkThresholds.GERAN, AccessNetworkType.GERAN); mPhone.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.AccessNetworkThresholds.UTRAN, AccessNetworkType.UTRAN); mPhone.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.AccessNetworkThresholds.EUTRAN, AccessNetworkType.EUTRAN); mPhone.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.AccessNetworkThresholds.CDMA2000, AccessNetworkType.CDMA2000); }",ad4efec0dd50f853626daa5693689fe030545274,2018-03-27 20:59:18,14
617334,src_java_com_android_internal_telephony_DeviceStateMonitor.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean shouldTurnOffLinkCapacityEstimate() { return (mIsPowerSaveOn) || (((!(mIsCharging)) && (!(mIsTetheringOn))) && (!(mIsScreenOn))); },9132aef43c9d7979bb932674d03d4b545d653d33,private boolean shouldTurnOffLinkCapacityEstimate() { if ((((mIsCharging) || (mIsScreenOn)) || (mIsTetheringOn)) || ((mUpdateModes.get(TelephonyManager.INDICATION_FILTER_LINK_CAPACITY_ESTIMATE)) == (android.telephony.TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF))) { return false; } return true; },30f0d893173c621311f74addbf2df1f26f16fb18,2018-03-27 20:59:18,14
617334,src_java_com_android_internal_telephony_DeviceStateMonitor.java,"private void updateDeviceState(int eventType, boolean state) { switch (eventType) { case com.android.internal.telephony.DeviceStateMonitor.EVENT_SCREEN_STATE_CHANGED : if ((mIsScreenOn) == state) return; mIsScreenOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_CHARGING_STATE_CHANGED : if ((mIsCharging) == state) return; mIsCharging = state; sendDeviceState(com.android.internal.telephony.CHARGING_STATE, mIsCharging); break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_TETHERING_STATE_CHANGED : if ((mIsTetheringOn) == state) return; mIsTetheringOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_POWER_SAVE_MODE_CHANGED : if ((mIsPowerSaveOn) == state) return; mIsPowerSaveOn = state; sendDeviceState(com.android.internal.telephony.POWER_SAVE_MODE, mIsPowerSaveOn); break; default : return; } if ((mIsLowDataExpected) != (isLowDataExpected())) { mIsLowDataExpected = !(mIsLowDataExpected); sendDeviceState(com.android.internal.telephony.LOW_DATA_EXPECTED, mIsLowDataExpected); } int newFilter = 0; if (!(shouldTurnOffSignalStrength())) { newFilter |= android.hardware.radio.V1_0.IndicationFilter.SIGNAL_STRENGTH; } if (!(shouldTurnOffFullNetworkUpdate())) { newFilter |= android.hardware.radio.V1_0.IndicationFilter.FULL_NETWORK_STATE; } if (!(shouldTurnOffDormancyUpdate())) { newFilter |= android.hardware.radio.V1_0.IndicationFilter.DATA_CALL_DORMANCY_CHANGED; } setUnsolResponseFilter(newFilter, false); }",5cca485ac23e81e87a173a53271b16e84762b5b6,"private void updateDeviceState(int eventType, boolean state) { switch (eventType) { case com.android.internal.telephony.DeviceStateMonitor.EVENT_SCREEN_STATE_CHANGED : if ((mIsScreenOn) == state) return; mIsScreenOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_CHARGING_STATE_CHANGED : if ((mIsCharging) == state) return; mIsCharging = state; sendDeviceState(com.android.internal.telephony.CHARGING_STATE, mIsCharging); break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_TETHERING_STATE_CHANGED : if ((mIsTetheringOn) == state) return; mIsTetheringOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_POWER_SAVE_MODE_CHANGED : if ((mIsPowerSaveOn) == state) return; mIsPowerSaveOn = state; sendDeviceState(com.android.internal.telephony.POWER_SAVE_MODE, mIsPowerSaveOn); break; default : return; } if ((mIsLowDataExpected) != (isLowDataExpected())) { mIsLowDataExpected = !(mIsLowDataExpected); sendDeviceState(com.android.internal.telephony.LOW_DATA_EXPECTED, mIsLowDataExpected); } int newFilter = 0; if (!(shouldTurnOffSignalStrength())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.SIGNAL_STRENGTH; } if (!(shouldTurnOffFullNetworkUpdate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.FULL_NETWORK_STATE; } if (!(shouldTurnOffDormancyUpdate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.DATA_CALL_DORMANCY_CHANGED; } if (!(shouldTurnOffLinkCapacityEstimate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.LINK_CAPACITY_ESTIMATE; } setUnsolResponseFilter(newFilter, false); }",d23a92bd867bb4990375963d97aaf5aad20a37f2,"private void onUpdateDeviceState(int eventType, boolean state) { switch (eventType) { case com.android.internal.telephony.DeviceStateMonitor.EVENT_SCREEN_STATE_CHANGED : if ((mIsScreenOn) == state) return; mIsScreenOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_CHARGING_STATE_CHANGED : if ((mIsCharging) == state) return; mIsCharging = state; sendDeviceState(com.android.internal.telephony.CHARGING_STATE, mIsCharging); break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_TETHERING_STATE_CHANGED : if ((mIsTetheringOn) == state) return; mIsTetheringOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_POWER_SAVE_MODE_CHANGED : if ((mIsPowerSaveOn) == state) return; mIsPowerSaveOn = state; sendDeviceState(com.android.internal.telephony.POWER_SAVE_MODE, mIsPowerSaveOn); break; default : return; } if ((mIsLowDataExpected) != (isLowDataExpected())) { mIsLowDataExpected = !(mIsLowDataExpected); sendDeviceState(com.android.internal.telephony.LOW_DATA_EXPECTED, mIsLowDataExpected); } int newFilter = 0; if (!(shouldTurnOffSignalStrength())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.SIGNAL_STRENGTH; } if (!(shouldTurnOffFullNetworkUpdate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.FULL_NETWORK_STATE; } if (!(shouldTurnOffDormancyUpdate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.DATA_CALL_DORMANCY_CHANGED; } if (!(shouldTurnOffLinkCapacityEstimate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.LINK_CAPACITY_ESTIMATE; } if (!(shouldTurnOffPhysicalChannelConfig())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.PHYSICAL_CHANNEL_CONFIG; } setUnsolResponseFilter(newFilter, false); }",8efaa0839f153f8f5663e178cf5cf356ef108674,2018-03-27 20:59:18,14
617334,src_java_com_android_internal_telephony_DeviceStateMonitor.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private void setLinkCapacityReportingCriteria() { },8a80dfeb087edcb1d663fcc034cec7ef58b42f14,"private void setLinkCapacityReportingCriteria() { mPhone.setLinkCapacityReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.LINK_CAPACITY_DOWNLINK_THRESHOLDS, com.android.internal.telephony.DeviceStateMonitor.LINK_CAPACITY_UPLINK_THRESHOLDS, AccessNetworkType.GERAN); mPhone.setLinkCapacityReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.LINK_CAPACITY_DOWNLINK_THRESHOLDS, com.android.internal.telephony.DeviceStateMonitor.LINK_CAPACITY_UPLINK_THRESHOLDS, AccessNetworkType.UTRAN); mPhone.setLinkCapacityReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.LINK_CAPACITY_DOWNLINK_THRESHOLDS, com.android.internal.telephony.DeviceStateMonitor.LINK_CAPACITY_UPLINK_THRESHOLDS, AccessNetworkType.EUTRAN); mPhone.setLinkCapacityReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.LINK_CAPACITY_DOWNLINK_THRESHOLDS, com.android.internal.telephony.DeviceStateMonitor.LINK_CAPACITY_UPLINK_THRESHOLDS, AccessNetworkType.CDMA2000); }",d650bdd215a7db41dbb009d5aba64ada91a9e7d6,2018-03-27 20:59:18,14
617334,src_java_com_android_internal_telephony_RIL.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void setSignalStrengthReportingCriteria(int hysteresisMs, int hysteresisDb, int[] thresholdsDbm, int ran, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { riljLoge(""Radio Proxy 1.2 is unsupported!""); return; } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_SIGNAL_STRENGTH_REPORTING_CRITERIA, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setSignalStrengthReportingCriteria(rr.mSerial, hysteresisMs, hysteresisDb, com.android.internal.telephony.RIL.primitiveArrayToArrayList(thresholdsDbm), com.android.internal.telephony.RIL.convertRanToHalRan(ran)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setSignalStrengthReportingCriteria"", e); } } }",bd6dce6ca273c7036e2a087bccce89e0593f10fe,"@java.lang.Override public void setSignalStrengthReportingCriteria(int hysteresisMs, int hysteresisDb, int[] thresholdsDbm, int ran, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { riljLoge(""setSignalStrengthReportingCriteria ignored. RadioProxy 1.2 is null!""); return; } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_SIGNAL_STRENGTH_REPORTING_CRITERIA, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setSignalStrengthReportingCriteria(rr.mSerial, hysteresisMs, hysteresisDb, com.android.internal.telephony.RIL.primitiveArrayToArrayList(thresholdsDbm), com.android.internal.telephony.RIL.convertRanToHalRan(ran)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setSignalStrengthReportingCriteria"", e); } } }",e4b2d7498e58ec142115c988c018bb9e664b7044,2018-03-27 20:59:18,14
617334,src_java_com_android_internal_telephony_RIL.java,"@java.lang.Override public void setUnsolResponseFilter(int filter, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_UNSOLICITED_RESPONSE_FILTER, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" "") + filter)); } try { radioProxy.setIndicationFilter(rr.mSerial, filter); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setIndicationFilter"", e); } } }",e6cd9cd1a3eab9d58c1b0a84acf53264623301c4,"@java.lang.Override public void setUnsolResponseFilter(int filter, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_UNSOLICITED_RESPONSE_FILTER, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" "") + filter)); } android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 != null) { try { radioProxy12.setIndicationFilter_1_2(rr.mSerial, filter); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setIndicationFilter_1_2"", e); } } else { try { radioProxy.setIndicationFilter(rr.mSerial, filter); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setIndicationFilter"", e); } } } }",7df28b923f3d114f85b3ecedb2612d524f7e7436,"@java.lang.Override public void setUnsolResponseFilter(int filter, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_UNSOLICITED_RESPONSE_FILTER, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" "") + filter)); } android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 != null) { try { radioProxy12.setIndicationFilter_1_2(rr.mSerial, filter); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setIndicationFilter_1_2"", e); } } else { try { int filter10 = filter & (android.hardware.radio.V1_0.IndicationFilter.ALL); radioProxy.setIndicationFilter(rr.mSerial, filter10); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setIndicationFilter"", e); } } } }",603e91f70962351180dc67c96970d4a614c0d87c,2018-03-27 20:59:18,14
617334,src_java_com_android_internal_telephony_RIL.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void setLinkCapacityReportingCriteria(int hysteresisMs, int hysteresisDlKbps, int hysteresisUlKbps, int[] thresholdsDlKbps, int[] thresholdsUlKbps, int ran, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { riljLoge(""Radio Proxy 1.2 is unsupported!""); return; } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_LINK_CAPACITY_REPORTING_CRITERIA, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setLinkCapacityReportingCriteria(rr.mSerial, hysteresisMs, hysteresisDlKbps, hysteresisUlKbps, com.android.internal.telephony.RIL.primitiveArrayToArrayList(thresholdsDlKbps), com.android.internal.telephony.RIL.primitiveArrayToArrayList(thresholdsUlKbps), com.android.internal.telephony.RIL.convertRanToHalRan(ran)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setLinkCapacityReportingCriteria"", e); } } }",16acee2c0d1393688c20a0862947647394d07924,"@java.lang.Override public void setLinkCapacityReportingCriteria(int hysteresisMs, int hysteresisDlKbps, int hysteresisUlKbps, int[] thresholdsDlKbps, int[] thresholdsUlKbps, int ran, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { riljLoge(""setLinkCapacityReportingCriteria ignored. RadioProxy 1.2 is null!""); return; } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_LINK_CAPACITY_REPORTING_CRITERIA, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setLinkCapacityReportingCriteria(rr.mSerial, hysteresisMs, hysteresisDlKbps, hysteresisUlKbps, com.android.internal.telephony.RIL.primitiveArrayToArrayList(thresholdsDlKbps), com.android.internal.telephony.RIL.primitiveArrayToArrayList(thresholdsUlKbps), com.android.internal.telephony.RIL.convertRanToHalRan(ran)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setLinkCapacityReportingCriteria"", e); } } }",8d7ed4c2ff4df98c531105d8aad9ccef6627d69d,2018-03-27 20:59:18,14
617334,src_java_com_android_internal_telephony_RIL.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static int convertRanToHalRan(int radioAccessNetwork) { switch (radioAccessNetwork) { case android.telephony.AccessNetworkConstants.AccessNetworkType.GERAN : return 1; case android.telephony.AccessNetworkConstants.AccessNetworkType.UTRAN : return 2; case android.telephony.AccessNetworkConstants.AccessNetworkType.EUTRAN : return 3; case android.telephony.AccessNetworkConstants.AccessNetworkType.CDMA2000 : return 4; case android.telephony.AccessNetworkConstants.AccessNetworkType.IWLAN : return 5; case android.telephony.AccessNetworkConstants.AccessNetworkType.UNKNOWN : default : return 0; } },2c8b28f5423144b3c9cf3914cf9160f1fdbb8d1b,private static int convertRanToHalRan(int radioAccessNetwork) { switch (radioAccessNetwork) { case android.telephony.AccessNetworkConstants.AccessNetworkType.GERAN : return android.hardware.radio.V1_2.AccessNetwork.GERAN; case android.telephony.AccessNetworkConstants.AccessNetworkType.UTRAN : return android.hardware.radio.V1_2.AccessNetwork.UTRAN; case android.telephony.AccessNetworkConstants.AccessNetworkType.EUTRAN : return android.hardware.radio.V1_2.AccessNetwork.EUTRAN; case android.telephony.AccessNetworkConstants.AccessNetworkType.CDMA2000 : return android.hardware.radio.V1_2.AccessNetwork.CDMA2000; case android.telephony.AccessNetworkConstants.AccessNetworkType.IWLAN : return android.hardware.radio.V1_2.AccessNetwork.IWLAN; case android.telephony.AccessNetworkConstants.AccessNetworkType.UNKNOWN : default : return 0; } },f15e21099b56e8d3f5328e84ca92aaadfdc689d1,2018-03-27 20:59:18,14
649784,system_image_uitests_app_src_androidTest_java_com_android_devtools_systemimage_uitest_smoke_SettingsTest.java,"private boolean checkStatusOfPolicy(android.app.Instrumentation instrumentation, java.lang.String adminPolicyName) throws java.lang.Exception { android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); android.support.test.uiautomator.UiSelector listViewSelector = new android.support.test.uiautomator.UiSelector().resourceId(Res.ANDROID_LIST_RES); assertTrue(device.findObject(listViewSelector).exists()); int size = device.findObject(listViewSelector).getChildCount(); for (int i = 0; i < size; i++) { android.support.test.uiautomator.UiSelector sampleDeviceSelection = listViewSelector.childSelector(new android.support.test.uiautomator.UiSelector().index(i)); if (device.findObject(sampleDeviceSelection).getChild(new android.support.test.uiautomator.UiSelector().textContains(adminPolicyName)).exists()) { return device.findObject(sampleDeviceSelection).getChild(new android.support.test.uiautomator.UiSelector().className(""android.widget.CheckBox"")).isChecked(); } } return false; }",320265c7f658f80c1c2860c1f11542eb52c882f6,"private boolean checkStatusOfPolicy(android.app.Instrumentation instrumentation, java.lang.String adminPolicyName) throws java.lang.Exception { android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); android.support.test.uiautomator.UiSelector listViewSelector = new android.support.test.uiautomator.UiSelector().resourceId(Res.ANDROID_LIST_RES); new com.android.devtools.systemimage.uitest.watchers.SettingsTestPopupWatcher(device).checkForCondition(); assertTrue(device.findObject(listViewSelector).exists()); int size = device.findObject(listViewSelector).getChildCount(); for (int i = 0; i < size; i++) { android.support.test.uiautomator.UiSelector sampleDeviceSelection = listViewSelector.childSelector(new android.support.test.uiautomator.UiSelector().index(i)); android.support.test.uiautomator.UiObject2 sampleDeviceAdminCheckbox = com.android.devtools.systemimage.uitest.utils.UiAutomatorPlus.findObjectByRelative(instrumentation, android.support.test.uiautomator.By.clazz(""android.widget.CheckBox""), android.support.test.uiautomator.By.text(adminPolicyName), android.support.test.uiautomator.By.res(Res.ANDROID_LIST_RES)); if (sampleDeviceAdminCheckbox != null) { boolean isChecked = sampleDeviceAdminCheckbox.isChecked(); return isChecked; } } return false; }",de919af6b2b769d48c0f2728f0ec82bbe7a63717,"private boolean checkStatusOfPolicy(android.app.Instrumentation instrumentation, java.lang.String adminPolicyName) throws java.lang.Exception { android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); android.support.test.uiautomator.UiSelector listViewSelector = new android.support.test.uiautomator.UiSelector().resourceId(Res.ANDROID_LIST_RES); new com.android.devtools.systemimage.uitest.watchers.SettingsTestPopupWatcher(device).checkForCondition(); assertTrue(device.findObject(listViewSelector).exists()); int size = device.findObject(listViewSelector).getChildCount(); for (int i = 0; i < size; i++) { android.support.test.uiautomator.UiObject2 sampleDeviceAdminCheckbox = com.android.devtools.systemimage.uitest.utils.UiAutomatorPlus.findObjectByRelative(instrumentation, android.support.test.uiautomator.By.clazz(""android.widget.CheckBox""), android.support.test.uiautomator.By.text(adminPolicyName), android.support.test.uiautomator.By.res(Res.ANDROID_LIST_RES)); if (sampleDeviceAdminCheckbox != null) { boolean isChecked = sampleDeviceAdminCheckbox.isChecked(); return isChecked; } } return false; }",c7f0983378f91d1474a85b1def97b96bc5dae0ff,2018-03-27 21:20:20,4
649633,src_com_android_providers_telephony_TelephonyProvider.java,"private void recreateSimInfoDB(android.database.Cursor c, android.database.sqlite.SQLiteDatabase db, java.lang.String[] proj) { if (com.android.providers.telephony.TelephonyProvider.VDBG) { c = db.query(com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE, proj, null, null, null, null, null); com.android.providers.telephony.TelephonyProvider.log((((""dbh.onUpgrade:+ before upgrading "" + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE)) + "" total number of rows: "") + (c.getCount()))); c.close(); } c = db.query(com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE, null, null, null, null, null, null); db.execSQL((""DROP TABLE IF EXISTS "" + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TMP))); createSimInfoTable(db, com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TMP); copySimInfoDataToTmpTable(db, c); c.close(); db.execSQL((""DROP TABLE IF EXISTS "" + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE))); db.execSQL(((((""ALTER TABLE "" + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TMP)) + "" rename to "") + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE)) + "";"")); }",08e2e9acbfc2070d5be79720795a51ce56496cea,"private void recreateSimInfoDB(android.database.Cursor c, android.database.sqlite.SQLiteDatabase db, java.lang.String[] proj) { if (com.android.providers.telephony.TelephonyProvider.VDBG) { c = db.query(com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE, proj, null, null, null, null, null); com.android.providers.telephony.TelephonyProvider.log((((""dbh.onUpgrade:+ before upgrading "" + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE)) + "" total number of rows: "") + (c.getCount()))); c.close(); } c = db.query(com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE, null, null, null, null, null, SubscriptionManager.UNIQUE_KEY_SUBSCRIPTION_ID); db.execSQL((""DROP TABLE IF EXISTS "" + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TMP))); createSimInfoTable(db, com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TMP); copySimInfoDataToTmpTable(db, c); c.close(); db.execSQL((""DROP TABLE IF EXISTS "" + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE))); db.execSQL(((((""ALTER TABLE "" + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TMP)) + "" rename to "") + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE)) + "";"")); }",fb976cdcf2a2efea5e55e82e7bb08c66c95404a1,"private void recreateSimInfoDB(android.database.Cursor c, android.database.sqlite.SQLiteDatabase db, java.lang.String[] proj) { if (com.android.providers.telephony.TelephonyProvider.VDBG) { c = db.query(com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE, proj, null, null, null, null, null); com.android.providers.telephony.TelephonyProvider.log((((""dbh.onUpgrade:+ before upgrading "" + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE)) + "" total number of rows: "") + (c.getCount()))); c.close(); } c = db.query(com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE, null, null, null, null, null, com.android.providers.telephony.TelephonyProvider.ORDER_BY_SUB_ID); db.execSQL((""DROP TABLE IF EXISTS "" + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TMP))); createSimInfoTable(db, com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TMP); copySimInfoDataToTmpTable(db, c); c.close(); db.execSQL((""DROP TABLE IF EXISTS "" + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE))); db.execSQL(((((""ALTER TABLE "" + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TMP)) + "" rename to "") + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE)) + "";"")); }",daba01d87f9e029a5eaa1ff51b7fc737c62659b1,2018-03-27 23:34:01,2
650239,bcprov_src_main_java_org_bouncycastle_jcajce_provider_asymmetric_rsa_CipherSpi.java,"protected int engineDoFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) throws javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException { if (input != null) { bOut.write(input, inputOffset, inputLen); } if ((cipher) instanceof org.bouncycastle.crypto.engines.RSABlindedEngine) { if ((bOut.size()) > ((cipher.getInputBlockSize()) + 1)) { throw new java.lang.ArrayIndexOutOfBoundsException(""too much data for RSA block""); } } else { if ((bOut.size()) > (cipher.getInputBlockSize())) { throw new java.lang.ArrayIndexOutOfBoundsException(""too much data for RSA block""); } } byte[] out = getOutput(); for (int i = 0; i != (out.length); i++) { output[(outputOffset + i)] = out[i]; } return out.length; }",521d35868a03a9c5f5d8c130da7b502a7c02b6f3,"protected int engineDoFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) throws javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException, javax.crypto.ShortBufferException { if ((outputOffset + (engineGetOutputSize(inputLen))) > (output.length)) { throw new javax.crypto.ShortBufferException(""output buffer too short for input.""); } if (input != null) { bOut.write(input, inputOffset, inputLen); } if ((cipher) instanceof org.bouncycastle.crypto.engines.RSABlindedEngine) { if ((bOut.size()) > ((cipher.getInputBlockSize()) + 1)) { throw new java.lang.ArrayIndexOutOfBoundsException(""too much data for RSA block""); } } else { if ((bOut.size()) > (cipher.getInputBlockSize())) { throw new java.lang.ArrayIndexOutOfBoundsException(""too much data for RSA block""); } } byte[] out = getOutput(); for (int i = 0; i != (out.length); i++) { output[(outputOffset + i)] = out[i]; } return out.length; }",580d45c3ac14b19b81f1522568730524c96785c9,"protected int engineDoFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) throws javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException, javax.crypto.ShortBufferException { if ((engineGetOutputSize(inputLen)) > ((output.length) - outputOffset)) { throw new javax.crypto.ShortBufferException(""output buffer too short for input.""); } if (input != null) { bOut.write(input, inputOffset, inputLen); } if ((cipher) instanceof org.bouncycastle.crypto.engines.RSABlindedEngine) { if ((bOut.size()) > ((cipher.getInputBlockSize()) + 1)) { throw new java.lang.ArrayIndexOutOfBoundsException(""too much data for RSA block""); } } else { if ((bOut.size()) > (cipher.getInputBlockSize())) { throw new java.lang.ArrayIndexOutOfBoundsException(""too much data for RSA block""); } } byte[] out = getOutput(); for (int i = 0; i != (out.length); i++) { output[(outputOffset + i)] = out[i]; } return out.length; }",8072f20bfc68629a755d5d4084cc02f0f243512a,2018-03-28 13:01:59,2
645166,src_java_com_android_internal_telephony_InboundSmsHandler.java,"private void handleInjectSms(android.os.AsyncResult ar) { int result; com.android.internal.telephony.SmsDispatchersController.SmsInjectionCallback callback = null; try { callback = ((com.android.internal.telephony.SmsDispatchersController.SmsInjectionCallback) (ar.userObj)); android.telephony.SmsMessage sms = ((android.telephony.SmsMessage) (ar.result)); if (sms == null) { result = android.provider.Telephony.Sms.Intents.RESULT_SMS_GENERIC_ERROR; } else { result = dispatchMessage(sms.mWrappedSmsMessage); } } catch (java.lang.RuntimeException ex) { loge(""Exception dispatching message"", ex); result = android.provider.Telephony.Sms.Intents.RESULT_SMS_GENERIC_ERROR; } if (callback != null) { callback.onSmsInjectedResult(result); } }",9719019f43b75fe9ca1cd54efa30fc4c3a38e847,"private void handleInjectSms(android.os.AsyncResult ar) { int result; com.android.internal.telephony.SmsDispatchersController.SmsInjectionCallback callback = null; android.telephony.SmsMessage sms = null; try { callback = ((com.android.internal.telephony.SmsDispatchersController.SmsInjectionCallback) (ar.userObj)); sms = ((android.telephony.SmsMessage) (ar.result)); if (sms == null) { result = android.provider.Telephony.Sms.Intents.RESULT_SMS_GENERIC_ERROR; } else { result = dispatchMessage(sms.mWrappedSmsMessage); } } catch (java.lang.RuntimeException ex) { loge(""Exception dispatching message"", ex); result = android.provider.Telephony.Sms.Intents.RESULT_SMS_GENERIC_ERROR; } if (callback != null) { callback.onSmsInjectedResult(sms, result); } }",d552116dec95f805d1229a8c162cd56e8d3ffb41,"private void handleInjectSms(android.os.AsyncResult ar) { int result; com.android.internal.telephony.SmsDispatchersController.SmsInjectionCallback callback = null; try { callback = ((com.android.internal.telephony.SmsDispatchersController.SmsInjectionCallback) (ar.userObj)); android.telephony.SmsMessage sms = ((android.telephony.SmsMessage) (ar.result)); if (sms == null) { result = android.provider.Telephony.Sms.Intents.RESULT_SMS_GENERIC_ERROR; } else { result = dispatchMessage(sms.mWrappedSmsMessage); } } catch (java.lang.RuntimeException ex) { loge(""Exception dispatching message"", ex); result = android.provider.Telephony.Sms.Intents.RESULT_SMS_GENERIC_ERROR; } if (callback != null) { callback.onSmsInjectedResult(result); } }",9719019f43b75fe9ca1cd54efa30fc4c3a38e847,2018-03-28 16:59:41,2
650541,tests_telephonytests_src_com_android_internal_telephony_uicc_UiccSlotTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @android.support.test.filters.SmallTest public void testUpdateIccCardStatus() { int phoneId = 0; mIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.update(mSimulatedCommands, mIccCardStatus, phoneId); verify(mSubInfoRecordUpdater, times(1)).updateInternalIccState(IccCardConstants.INTENT_VALUE_ICC_ABSENT, null, phoneId); assertEquals(IccCardStatus.CardState.CARDSTATE_ABSENT, mUiccSlot.getCardState()); assertEquals(null, mUiccSlot.getUiccCard()); mIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_PRESENT; mUiccSlot.update(mSimulatedCommands, mIccCardStatus, phoneId); verify(mTelephonyComponentFactory, times(1)).makeUiccProfile(anyObject(), eq(mSimulatedCommands), eq(mIccCardStatus), anyInt(), anyObject()); assertEquals(IccCardStatus.CardState.CARDSTATE_PRESENT, mUiccSlot.getCardState()); assertTrue(((mUiccSlot.getUiccCard()) != null)); mIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.update(mSimulatedCommands, mIccCardStatus, phoneId); verify(mSubInfoRecordUpdater, times(2)).updateInternalIccState(IccCardConstants.INTENT_VALUE_ICC_ABSENT, null, phoneId); verify(mUiccProfile, times(1)).dispose(); assertEquals(IccCardStatus.CardState.CARDSTATE_ABSENT, mUiccSlot.getCardState()); assertEquals(null, mUiccSlot.getUiccCard()); }",9635cf5c346a049a0a7ab33f518a23eef1c7cc34,"@org.junit.Test @android.support.test.filters.SmallTest public void testUpdateAbsentState() { int phoneId = 0; mIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.update(mSimulatedCommands, mIccCardStatus, phoneId); verify(mSubInfoRecordUpdater).updateInternalIccState(IccCardConstants.INTENT_VALUE_ICC_ABSENT, null, phoneId); assertEquals(IccCardStatus.CardState.CARDSTATE_ABSENT, mUiccSlot.getCardState()); assertNull(mUiccSlot.getUiccCard()); }",5d3b0b394afeced9b99da68226a5ba1da537173c,2018-03-28 17:40:00,2
573442,src_com_android_settings_deviceinfo_SimStatus.java,"@java.lang.Override public void onTabChanged(java.lang.String tabId) { final int slotId = java.lang.Integer.parseInt(tabId); mSir = mSelectableSubInfos.get(slotId); updatePhoneInfos(); mTelephonyManager.listen(mPhoneStateListener, (((android.telephony.PhoneStateListener.LISTEN_DATA_CONNECTION_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS)) | (android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE))); updateDataState(); updateNetworkType(); updatePreference(); }",987d5a9417990456470f9f02f08a5d2f095e7f60,"@java.lang.Override public void onTabChanged(java.lang.String tabId) { final int slotId = java.lang.Integer.parseInt(tabId); mSir = mSelectableSubInfos.get(slotId); updatePhoneInfos(); updatePreference(true); mTelephonyManager.listen(mPhoneStateListener, (((android.telephony.PhoneStateListener.LISTEN_DATA_CONNECTION_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS)) | (android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE))); updateDataState(); updateNetworkType(); }",5c25930830754f9943b0d52aa7aea8a681a60175,"@android.support.annotation.VisibleForTesting void doTabChanged(java.lang.String tabId) { final int slotId = java.lang.Integer.parseInt(tabId); mSir = mSelectableSubInfos.get(slotId); updatePhoneInfos(); updatePreference(true); mTelephonyManager.listen(mPhoneStateListener, (((android.telephony.PhoneStateListener.LISTEN_DATA_CONNECTION_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS)) | (android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE))); updateDataState(); updateNetworkType(); }",86be61f2f3389b1de524597d6c7aa8398dad1811,2018-03-28 19:51:27,4
573442,src_com_android_settings_deviceinfo_SimStatus.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void updateImsRegistrationState() { boolean isImsRegistered = mTelephonyManager.isImsRegistered(mSir.getSubscriptionId()); setSummaryText(com.android.settings.deviceinfo.SimStatus.KEY_IMS_REGISTRATION_STATE, mRes.getString((isImsRegistered ? R.string.ims_reg_status_registered : R.string.ims_reg_status_not_registered))); }",a19dc2bbee9cc28b58a24aada8ed08ec76fb3e72,"@android.support.annotation.VisibleForTesting void updateImsRegistrationState() { boolean isImsRegistered = mTelephonyManager.isImsRegistered(mSir.getSubscriptionId()); setSummaryText(com.android.settings.deviceinfo.SimStatus.KEY_IMS_REGISTRATION_STATE, mRes.getString((isImsRegistered ? R.string.ims_reg_status_registered : R.string.ims_reg_status_not_registered))); }",ccd9a0d1217913523200f6e64a18b65772b4532c,2018-03-28 19:51:27,4
601742,src_com_android_bluetooth_pbap_BluetoothPbapUtils.java,"static void loadAllContacts(android.content.Context context, android.os.Handler handler) { if (com.android.bluetooth.pbap.BluetoothPbapUtils.V) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG, ""Loading Contacts ...""); } java.lang.String[] projection = new java.lang.String[]{ android.provider.ContactsContract.Data.CONTACT_ID, android.provider.ContactsContract.Data.DATA1, android.provider.ContactsContract.Data.MIMETYPE }; com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = com.android.bluetooth.pbap.BluetoothPbapUtils.fetchAndSetContacts(context, handler, projection, null, null, true); if ((com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts) < 0) { com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = 0; return; } com.android.bluetooth.pbap.BluetoothPbapUtils.sContactsLoaded = true; }",d99596b1395c2bfbffc6f780427877b99186f060,"static void loadAllContacts(android.content.Context context, android.os.Handler handler) { if (com.android.bluetooth.pbap.BluetoothPbapUtils.V) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG, ""Loading Contacts ...""); } java.lang.String[] projection = new java.lang.String[]{ android.provider.ContactsContract.Data.CONTACT_ID, android.provider.ContactsContract.Data.DATA1, android.provider.ContactsContract.Data.MIMETYPE }; com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = com.android.bluetooth.pbap.BluetoothPbapUtils.fetchAndSetContacts(context, handler, projection, null, null, true); if ((com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts) < 0) { com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = 0; return; } handler.sendMessage(handler.obtainMessage(BluetoothPbapService.LOAD_CONTACTS)); }",25a483f4acd0916679730959d2dcf899106001e3,"static void loadAllContacts(android.content.Context context, android.os.Handler handler) { if (com.android.bluetooth.pbap.BluetoothPbapUtils.V) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG, ""Loading Contacts ...""); } java.lang.String[] projection = new java.lang.String[]{ android.provider.ContactsContract.Data.CONTACT_ID, android.provider.ContactsContract.Data.DATA1, android.provider.ContactsContract.Data.MIMETYPE }; com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = com.android.bluetooth.pbap.BluetoothPbapUtils.fetchAndSetContacts(context, handler, projection, null, null, true); if ((com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts) < 0) { com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = 0; return; } handler.sendMessage(handler.obtainMessage(BluetoothPbapService.CONTACTS_LOADED)); }",f343b20b503f07089c3f2bee3cdaa1d16246e316,2018-03-28 22:13:45,8
601742,src_com_android_bluetooth_pbap_BluetoothPbapService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override protected void setCurrentUser(int userId) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ((""setCurrentUser("" + userId) + "")"")); android.os.UserManager userManager = android.os.UserManager.get(getApplicationContext()); if (userManager.isUserUnlocked(userId)) { setUserUnlocked(userId); } }",8b8abdd741349afdc0c672b136993eb382d7948b,"@java.lang.Override protected void setCurrentUser(int userId) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ((""setCurrentUser("" + userId) + "")"")); android.os.UserManager userManager = ((android.os.UserManager) (getSystemService(Context.USER_SERVICE))); if (userManager.isUserUnlocked(userId)) { setUserUnlocked(userId); } }",a4ea6b8ab154a94e0e59ded417aaa10a49f177d2,2018-03-28 22:13:45,8
648803,test_1935-get-set-current-frame-jit_src_Main.java,public static void main(java.lang.String[] args) throws java.lang.Exception { java.lang.System.loadLibrary(args[0]); art.Locals.EnableLocalVariableAccess(); Main.runGet(); Main.runSet(); },c7f845442d24cf98ddb29467157a62a271379a71,public static void main(java.lang.String[] args) throws java.lang.Exception { java.lang.System.loadLibrary(args[0]); art.Locals.EnableLocalVariableAccess(); Main.runSet(); },c409cb7d08b73f0945535fb4dd440abe97b94a4c,public static void main(java.lang.String[] args) throws java.lang.Exception { java.lang.System.loadLibrary(args[0]); art.Locals.EnableLocalVariableAccess(); Main.runGet(); Main.runSet(); },c7f845442d24cf98ddb29467157a62a271379a71,2018-03-28 23:34:46,7
648671,verity_BootSignature.java,"public static int getSignableImageSize(byte[] data) throws java.lang.Exception { if (!(java.util.Arrays.equals(java.util.Arrays.copyOfRange(data, 0, 8), ""ANDROID!"".getBytes(""US-ASCII"")))) { throw new java.lang.IllegalArgumentException(""Invalid image header: missing magic""); } java.nio.ByteBuffer image = java.nio.ByteBuffer.wrap(data); image.order(java.nio.ByteOrder.LITTLE_ENDIAN); image.getLong(); int kernelSize = image.getInt(); image.getInt(); int ramdskSize = image.getInt(); image.getInt(); int secondSize = image.getInt(); image.getLong(); int pageSize = image.getInt(); int length = ((pageSize + ((((kernelSize + pageSize) - 1) / pageSize) * pageSize)) + ((((ramdskSize + pageSize) - 1) / pageSize) * pageSize)) + ((((secondSize + pageSize) - 1) / pageSize) * pageSize); length = (((length + pageSize) - 1) / pageSize) * pageSize; if (length <= 0) { throw new java.lang.IllegalArgumentException(""Invalid image header: invalid length""); } return length; }",a86b3fe6f9406e7d4284cc06722da22152e00b0a,"public static int getSignableImageSize(byte[] data) throws java.lang.Exception { if (!(java.util.Arrays.equals(java.util.Arrays.copyOfRange(data, 0, 8), ""ANDROID!"".getBytes(""US-ASCII"")))) { throw new java.lang.IllegalArgumentException(""Invalid image header: missing magic""); } java.nio.ByteBuffer image = java.nio.ByteBuffer.wrap(data); image.order(java.nio.ByteOrder.LITTLE_ENDIAN); image.getLong(); int kernelSize = image.getInt(); image.getInt(); int ramdskSize = image.getInt(); image.getInt(); int secondSize = image.getInt(); image.getLong(); int pageSize = image.getInt(); int length = ((pageSize + ((((kernelSize + pageSize) - 1) / pageSize) * pageSize)) + ((((ramdskSize + pageSize) - 1) / pageSize) * pageSize)) + ((((secondSize + pageSize) - 1) / pageSize) * pageSize); int headerVersion = image.getInt(); if (headerVersion > 0) { image.getInt(); byte[] tempByteArray = new byte[1024]; image.get(tempByteArray, 0, 16); image.get(tempByteArray, 0, 512); image.get(tempByteArray, 0, 32); image.get(tempByteArray, 0, 1024); int recoveryDtboLength = image.getInt(); length += (((recoveryDtboLength + pageSize) - 1) / pageSize) * pageSize; } length = (((length + pageSize) - 1) / pageSize) * pageSize; if (length <= 0) { throw new java.lang.IllegalArgumentException(""Invalid image header: invalid length""); } return length; }",b22a7d954c71449033b67f4012a15d62f0dae606,"public static int getSignableImageSize(byte[] data) throws java.lang.Exception { if (!(java.util.Arrays.equals(java.util.Arrays.copyOfRange(data, 0, 8), ""ANDROID!"".getBytes(""US-ASCII"")))) { throw new java.lang.IllegalArgumentException(""Invalid image header: missing magic""); } java.nio.ByteBuffer image = java.nio.ByteBuffer.wrap(data); image.order(java.nio.ByteOrder.LITTLE_ENDIAN); image.getLong(); int kernelSize = image.getInt(); image.getInt(); int ramdskSize = image.getInt(); image.getInt(); int secondSize = image.getInt(); image.getLong(); int pageSize = image.getInt(); int length = ((pageSize + ((((kernelSize + pageSize) - 1) / pageSize) * pageSize)) + ((((ramdskSize + pageSize) - 1) / pageSize) * pageSize)) + ((((secondSize + pageSize) - 1) / pageSize) * pageSize); int headerVersion = image.getInt(); if (headerVersion > 0) { image.position(com.android.verity.BootSignature.BOOT_IMAGE_HEADER_V1_RECOVERY_DTBO_SIZE_OFFSET); int recoveryDtboLength = image.getInt(); length += (((recoveryDtboLength + pageSize) - 1) / pageSize) * pageSize; image.getLong(); if (headerVersion == 1) { int headerSize = image.getInt(); if ((image.position()) != headerSize) { throw new java.lang.IllegalArgumentException(""Invalid image header: invalid header length""); } } } length = (((length + pageSize) - 1) / pageSize) * pageSize; if (length <= 0) { throw new java.lang.IllegalArgumentException(""Invalid image header: invalid length""); } return length; }",231d6b37267b502e780d0587ef45bfdf534d9dd5,2018-03-29 00:02:56,6
628390,core_java_com_android_internal_net_NetworkStatsFactory.java,"@com.android.internal.annotations.VisibleForTesting public static android.net.NetworkStats javaReadNetworkStatsDetail(java.io.File detailPath, int limitUid, java.lang.String[] limitIfaces, int limitTag) throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 24); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); int idx = 1; int lastIdx = 1; com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(detailPath)); reader.finishLine(); while (reader.hasMoreData()) { idx = reader.nextInt(); if (idx != (lastIdx + 1)) { throw new java.net.ProtocolException((((""inconsistent idx="" + idx) + "" after lastIdx="") + lastIdx)); } lastIdx = idx; entry.iface = reader.nextString(); entry.tag = kernelToTag(reader.nextString()); entry.uid = reader.nextInt(); entry.set = reader.nextInt(); entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if ((((limitIfaces == null) || (com.android.internal.util.ArrayUtils.contains(limitIfaces, entry.iface))) && ((limitUid == (UID_ALL)) || (limitUid == (entry.uid)))) && ((limitTag == (TAG_ALL)) || (limitTag == (entry.tag)))) { stats.addValues(entry); } reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException((""problem parsing idx "" + idx), e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",2e6aa1558a771cdad3e72f6756cddbd7ef27cd69,"@com.android.internal.annotations.VisibleForTesting public static android.net.NetworkStats javaReadNetworkStatsDetail(java.io.File detailPath, int limitUid, java.lang.String[] limitIfaces, int limitTag) throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 24); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); int idx = 1; int lastIdx = 1; com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(detailPath)); reader.finishLine(); while (reader.hasMoreData()) { idx = reader.nextInt(); if (idx != (lastIdx + 1)) { throw new java.net.ProtocolException((((""inconsistent idx="" + idx) + "" after lastIdx="") + lastIdx)); } lastIdx = idx; entry.iface = reader.nextString(); entry.tag = kernelToTag(reader.nextString()); entry.uid = reader.nextInt(); entry.set = reader.nextInt(); entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if ((((limitIfaces == null) || (com.android.internal.util.ArrayUtils.contains(limitIfaces, entry.iface))) && ((limitUid == (android.net.NetworkStats.UID_ALL)) || (limitUid == (entry.uid)))) && ((limitTag == (android.net.NetworkStats.TAG_ALL)) || (limitTag == (entry.tag)))) { stats.addValues(entry); } reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException((""problem parsing idx "" + idx), e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",ec2c57317e8dbcf2579735bdbdbc2402bd6c9cff,"@com.android.internal.annotations.VisibleForTesting public static android.net.NetworkStats javaReadNetworkStatsDetail(java.io.File detailPath, int limitUid, java.lang.String[] limitIfaces, int limitTag) throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 24); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); int idx = 1; int lastIdx = 1; com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(detailPath)); reader.finishLine(); while (reader.hasMoreData()) { idx = reader.nextInt(); if (idx != (lastIdx + 1)) { throw new java.net.ProtocolException((((""inconsistent idx="" + idx) + "" after lastIdx="") + lastIdx)); } lastIdx = idx; entry.iface = reader.nextString(); entry.tag = kernelToTag(reader.nextString()); entry.uid = reader.nextInt(); entry.set = reader.nextInt(); entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if ((((limitIfaces == null) || (com.android.internal.util.ArrayUtils.contains(limitIfaces, entry.iface))) && ((limitUid == (UID_ALL)) || (limitUid == (entry.uid)))) && ((limitTag == (TAG_ALL)) || (limitTag == (entry.tag)))) { stats.addValues(entry); } reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException((""problem parsing idx "" + idx), e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",2e6aa1558a771cdad3e72f6756cddbd7ef27cd69,2018-03-29 06:03:59,11
628390,core_java_com_android_internal_net_NetworkStatsFactory.java,"@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats readNetworkStatsIfaceDev() throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); java.io.BufferedReader reader = null; try { reader = new java.io.BufferedReader(new java.io.FileReader(mStatsIfaceDev)); reader.readLine(); reader.readLine(); java.lang.String line; while ((line = reader.readLine()) != null) { java.lang.String[] values = line.trim().split(""\\:?\\s+""); entry.iface = values[0]; entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; entry.rxBytes = java.lang.Long.parseLong(values[1]); entry.rxPackets = java.lang.Long.parseLong(values[2]); entry.txBytes = java.lang.Long.parseLong(values[9]); entry.txPackets = java.lang.Long.parseLong(values[10]); stats.addValues(entry); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",0bc21126ab8cf8a1092e17b99d7d5d0ea9fc064e,"@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats readNetworkStatsIfaceDev() throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); java.io.BufferedReader reader = null; try { reader = new java.io.BufferedReader(new java.io.FileReader(mStatsIfaceDev)); reader.readLine(); reader.readLine(); java.lang.String line; while ((line = reader.readLine()) != null) { java.lang.String[] values = line.trim().split(""\\:?\\s+""); entry.iface = values[0]; entry.uid = android.net.NetworkStats.UID_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.rxBytes = java.lang.Long.parseLong(values[1]); entry.rxPackets = java.lang.Long.parseLong(values[2]); entry.txBytes = java.lang.Long.parseLong(values[9]); entry.txPackets = java.lang.Long.parseLong(values[10]); stats.addValues(entry); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",c6feadec4143ec722ff4c2751f56ff5535d28e60,"@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats readNetworkStatsIfaceDev() throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); java.io.BufferedReader reader = null; try { reader = new java.io.BufferedReader(new java.io.FileReader(mStatsIfaceDev)); reader.readLine(); reader.readLine(); java.lang.String line; while ((line = reader.readLine()) != null) { java.lang.String[] values = line.trim().split(""\\:?\\s+""); entry.iface = values[0]; entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; entry.rxBytes = java.lang.Long.parseLong(values[1]); entry.rxPackets = java.lang.Long.parseLong(values[2]); entry.txBytes = java.lang.Long.parseLong(values[9]); entry.txPackets = java.lang.Long.parseLong(values[10]); stats.addValues(entry); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",0bc21126ab8cf8a1092e17b99d7d5d0ea9fc064e,2018-03-29 06:03:59,11
628390,core_java_com_android_internal_net_NetworkStatsFactory.java,"public android.net.NetworkStats readNetworkStatsDetail() throws java.io.IOException { return readNetworkStatsDetail(com.android.internal.net.UID_ALL, null, com.android.internal.net.TAG_ALL, null); }",a90fa3ccab6e92ab602d4f2298c24328db54eb23,"public android.net.NetworkStats readNetworkStatsDetail() throws java.io.IOException { return readNetworkStatsDetail(android.net.NetworkStats.UID_ALL, null, android.net.NetworkStats.TAG_ALL, null); }",ee5ff6e05b140568809c15bacbc0698e51d40c5e,"public android.net.NetworkStats readNetworkStatsDetail() throws java.io.IOException { return readNetworkStatsDetail(com.android.internal.net.UID_ALL, null, com.android.internal.net.TAG_ALL, null); }",a90fa3ccab6e92ab602d4f2298c24328db54eb23,2018-03-29 06:03:59,11
628390,core_java_com_android_internal_net_NetworkStatsFactory.java,"public android.net.NetworkStats readNetworkStatsDetail(int limitUid, java.lang.String[] limitIfaces, int limitTag, android.net.NetworkStats lastStats) throws java.io.IOException { final android.net.NetworkStats stats = readNetworkStatsDetailInternal(limitUid, limitIfaces, limitTag, lastStats); final android.util.ArrayMap<java.lang.String, java.lang.String> stackedIfaces; synchronized(com.android.internal.net.NetworkStatsFactory.sStackedIfaces) { stackedIfaces = new android.util.ArrayMap(com.android.internal.net.NetworkStatsFactory.sStackedIfaces); } final android.net.NetworkStats adjustments = new android.net.NetworkStats(0, stackedIfaces.size()); android.net.NetworkStats.Entry entry = null; for (int i = 0; i < (stats.size()); i++) { entry = stats.getValues(i, entry); if (((entry.iface) == null) || (!(entry.iface.startsWith(com.android.internal.net.NetworkStatsFactory.CLATD_INTERFACE_PREFIX)))) { continue; } final java.lang.String baseIface = stackedIfaces.get(entry.iface); if (baseIface == null) { continue; } android.net.NetworkStats.Entry adjust = new android.net.NetworkStats.Entry(baseIface, 0, 0, 0, 0, 0, 0, 0L, 0L, 0L, 0L, 0L); adjust.rxBytes -= (entry.rxBytes) + ((entry.rxPackets) * (com.android.internal.net.NetworkStatsFactory.IPV4V6_HEADER_DELTA)); adjust.txBytes -= (entry.txBytes) + ((entry.txPackets) * (com.android.internal.net.NetworkStatsFactory.IPV4V6_HEADER_DELTA)); adjust.rxPackets -= entry.rxPackets; adjust.txPackets -= entry.txPackets; adjustments.combineValues(adjust); entry.rxBytes = (entry.rxPackets) * (com.android.internal.net.NetworkStatsFactory.IPV4V6_HEADER_DELTA); entry.txBytes = (entry.txPackets) * (com.android.internal.net.NetworkStatsFactory.IPV4V6_HEADER_DELTA); entry.rxPackets = 0; entry.txPackets = 0; stats.combineValues(entry); } stats.combineAllValues(adjustments); return stats; }",8a10ab03470ee96e69ea06d22758af1012009736,"public android.net.NetworkStats readNetworkStatsDetail(int limitUid, java.lang.String[] limitIfaces, int limitTag, android.net.NetworkStats lastStats) throws java.io.IOException { return readNetworkStatsDetailInternal(limitUid, limitIfaces, limitTag, lastStats); }",3a69a0b12ec1045bada91e3c73f3e594e3bc7aad,"public android.net.NetworkStats readNetworkStatsDetail(int limitUid, java.lang.String[] limitIfaces, int limitTag, android.net.NetworkStats lastStats) throws java.io.IOException { final android.net.NetworkStats stats = readNetworkStatsDetailInternal(limitUid, limitIfaces, limitTag, lastStats); stats.apply464xlatAdjustments(com.android.internal.net.NetworkStatsFactory.sStackedIfaces); return stats; }",33fc88897fff42231db48a1e5ae0b6e2738432cd,2018-03-29 06:03:59,11
628390,tests_net_java_com_android_internal_net_NetworkStatsFactoryTest.java,"@org.junit.Test public void testDoubleClatAccounting100MBDownload() throws java.lang.Exception { long appRxBytesBefore = 328684029L; long appRxBytesAfter = 439237478L; assertEquals(""App traffic should be ~100MB"", 110553449, (appRxBytesAfter - appRxBytesBefore)); long rootRxBytesBefore = 1394011L; long rootRxBytesAfter = 1398634L; assertEquals(""UID 0 traffic should be ~0"", 4623, (rootRxBytesAfter - rootRxBytesBefore)); com.android.internal.net.NetworkStatsFactory.noteStackedIface(""v4-wlan0"", ""wlan0""); android.net.NetworkStats stats; stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_before); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""v4-wlan0"", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesBefore, 5199872L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""wlan0"", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesBefore, 647888L); stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_after); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""v4-wlan0"", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesAfter, 7867488L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""wlan0"", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesAfter, 647587L); com.android.internal.net.NetworkStatsFactory.noteStackedIface(""v4-wlan0"", null); }",102cc236e46dde848a3bd78f1d85dfa6ac5d3a30,"@org.junit.Test public void testDoubleClatAccounting100MBDownload() throws java.lang.Exception { long appRxBytesBefore = 328684029L; long appRxBytesAfter = 439237478L; assertEquals(""App traffic should be ~100MB"", 110553449, (appRxBytesAfter - appRxBytesBefore)); long rootRxBytesBefore = 1394011L; long rootRxBytesAfter = 1398634L; assertEquals(""UID 0 traffic should be ~0"", 4623, (rootRxBytesAfter - rootRxBytesBefore)); android.util.ArrayMap<java.lang.String, java.lang.String> stackedIface = new android.util.ArrayMap(); stackedIface.put(""v4-wlan0"", ""wlan0""); android.net.NetworkStats stats; stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_before); stats.apply464xlatAdjustments(stackedIface); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""v4-wlan0"", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesBefore, 5199872L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""wlan0"", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesBefore, 647888L); stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_after); stats.apply464xlatAdjustments(stackedIface); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""v4-wlan0"", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesAfter, 7867488L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""wlan0"", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesAfter, 647587L); }",45d0e15b348d0ed2adfec3c4d6e93ca5a45d6fa6,"@org.junit.Test public void testDoubleClatAccounting100MBDownload() throws java.lang.Exception { long appRxBytesBefore = 328684029L; long appRxBytesAfter = 439237478L; assertEquals(""App traffic should be ~100MB"", 110553449, (appRxBytesAfter - appRxBytesBefore)); long rootRxBytesBefore = 1394011L; long rootRxBytesAfter = 1398634L; assertEquals(""UID 0 traffic should be ~0"", 4623, (rootRxBytesAfter - rootRxBytesBefore)); com.android.internal.net.NetworkStatsFactory.noteStackedIface(""v4-wlan0"", ""wlan0""); android.net.NetworkStats stats; stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_before); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""v4-wlan0"", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesBefore, 5199872L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""wlan0"", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesBefore, 647888L); stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_after); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""v4-wlan0"", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesAfter, 7867488L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""wlan0"", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesAfter, 647587L); com.android.internal.net.NetworkStatsFactory.clearStackedIfaces(); }",78966cab0ab4b6fca34ccabbd5aab867d8a0ecc2,2018-03-29 06:03:59,11
628390,services_core_java_com_android_server_net_NetworkStatsService.java,private android.net.NetworkStats getNetworkStatsUidDetail() throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = mNetworkManager.getNetworkStatsUidDetail(android.net.NetworkStats.UID_ALL); final android.net.NetworkStats tetherSnapshot = getNetworkStatsTethering(android.net.NetworkStats.STATS_PER_UID); uidSnapshot.combineAllValues(tetherSnapshot); final android.telephony.TelephonyManager telephonyManager = ((android.telephony.TelephonyManager) (mContext.getSystemService(Context.TELEPHONY_SERVICE))); final android.net.NetworkStats vtStats = telephonyManager.getVtDataUsage(android.net.NetworkStats.STATS_PER_UID); if (vtStats != null) { uidSnapshot.combineAllValues(vtStats); } uidSnapshot.combineAllValues(mUidOperations); return uidSnapshot; },83bc1d5e4c2aec39b13d79d019f15d39245f50e6,private android.net.NetworkStats getNetworkStatsUidDetailLocked() throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = mNetworkManager.getNetworkStatsUidDetail(android.net.NetworkStats.UID_ALL); final android.net.NetworkStats tetherSnapshot = getNetworkStatsTethering(android.net.NetworkStats.STATS_PER_UID); uidSnapshot.combineAllValues(tetherSnapshot); final android.telephony.TelephonyManager telephonyManager = ((android.telephony.TelephonyManager) (mContext.getSystemService(Context.TELEPHONY_SERVICE))); final android.net.NetworkStats vtStats = telephonyManager.getVtDataUsage(android.net.NetworkStats.STATS_PER_UID); if (vtStats != null) { uidSnapshot.combineAllValues(vtStats); } uidSnapshot.combineAllValues(mUidOperations); uidSnapshot.apply464xlatAdjustments(mStackedIfaces); return uidSnapshot; },d4e7d04fb5356019a63c23f41970d180495c695a,"private android.net.NetworkStats getNetworkStatsUidDetail(java.lang.String[] ifaces) throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = mNetworkManager.getNetworkStatsUidDetail(android.net.NetworkStats.UID_ALL, ifaces); final android.net.NetworkStats tetherSnapshot = getNetworkStatsTethering(android.net.NetworkStats.STATS_PER_UID); tetherSnapshot.filter(android.net.NetworkStats.UID_ALL, ifaces, android.net.NetworkStats.TAG_ALL); com.android.internal.net.NetworkStatsFactory.apply464xlatAdjustments(uidSnapshot, tetherSnapshot); uidSnapshot.combineAllValues(tetherSnapshot); final android.telephony.TelephonyManager telephonyManager = ((android.telephony.TelephonyManager) (mContext.getSystemService(Context.TELEPHONY_SERVICE))); final android.net.NetworkStats vtStats = telephonyManager.getVtDataUsage(android.net.NetworkStats.STATS_PER_UID); if (vtStats != null) { vtStats.filter(android.net.NetworkStats.UID_ALL, ifaces, android.net.NetworkStats.TAG_ALL); com.android.internal.net.NetworkStatsFactory.apply464xlatAdjustments(uidSnapshot, vtStats); uidSnapshot.combineAllValues(vtStats); } uidSnapshot.combineAllValues(mUidOperations); return uidSnapshot; }",4f26299aff77628a23b1479ed700ce2b6c321b5a,2018-03-29 06:03:59,11
628390,services_core_java_com_android_server_net_NetworkStatsService.java,"private void recordSnapshotLocked(long currentTime) throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = getNetworkStatsUidDetail(); final android.net.NetworkStats xtSnapshot = getNetworkStatsXt(); final android.net.NetworkStats devSnapshot = mNetworkManager.getNetworkStatsSummaryDev(); final android.net.NetworkStats tetherSnapshot = getNetworkStatsTethering(android.net.NetworkStats.STATS_PER_IFACE); xtSnapshot.combineAllValues(tetherSnapshot); devSnapshot.combineAllValues(tetherSnapshot); mDevRecorder.recordSnapshotLocked(devSnapshot, mActiveIfaces, null, currentTime); mXtRecorder.recordSnapshotLocked(xtSnapshot, mActiveIfaces, null, currentTime); com.android.internal.net.VpnInfo[] vpnArray = mConnManager.getAllVpnInfo(); mUidRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mUidTagRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mStatsObservers.updateStats(xtSnapshot, uidSnapshot, new android.util.ArrayMap(mActiveIfaces), new android.util.ArrayMap(mActiveUidIfaces), vpnArray, currentTime); }",44532e7b97a713835236d9b91c30c70e695c08af,"private void recordSnapshotLocked(long currentTime) throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = getNetworkStatsUidDetailLocked(); final android.net.NetworkStats xtSnapshot = getNetworkStatsXt(); final android.net.NetworkStats devSnapshot = mNetworkManager.getNetworkStatsSummaryDev(); final android.net.NetworkStats tetherSnapshot = getNetworkStatsTethering(android.net.NetworkStats.STATS_PER_IFACE); xtSnapshot.combineAllValues(tetherSnapshot); devSnapshot.combineAllValues(tetherSnapshot); mDevRecorder.recordSnapshotLocked(devSnapshot, mActiveIfaces, null, currentTime); mXtRecorder.recordSnapshotLocked(xtSnapshot, mActiveIfaces, null, currentTime); com.android.internal.net.VpnInfo[] vpnArray = mConnManager.getAllVpnInfo(); mUidRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mUidTagRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mStatsObservers.updateStats(xtSnapshot, uidSnapshot, new android.util.ArrayMap(mActiveIfaces), new android.util.ArrayMap(mActiveUidIfaces), vpnArray, currentTime); }",e8ce8fe27100f35a2aa3af90e48a2651c1ba9f7e,"private void recordSnapshotLocked(long currentTime) throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = getNetworkStatsUidDetail(android.net.NetworkStats.INTERFACES_ALL); final android.net.NetworkStats xtSnapshot = getNetworkStatsXt(); final android.net.NetworkStats devSnapshot = mNetworkManager.getNetworkStatsSummaryDev(); final android.net.NetworkStats tetherSnapshot = getNetworkStatsTethering(android.net.NetworkStats.STATS_PER_IFACE); xtSnapshot.combineAllValues(tetherSnapshot); devSnapshot.combineAllValues(tetherSnapshot); mDevRecorder.recordSnapshotLocked(devSnapshot, mActiveIfaces, null, currentTime); mXtRecorder.recordSnapshotLocked(xtSnapshot, mActiveIfaces, null, currentTime); com.android.internal.net.VpnInfo[] vpnArray = mConnManager.getAllVpnInfo(); mUidRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mUidTagRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mStatsObservers.updateStats(xtSnapshot, uidSnapshot, new android.util.ArrayMap(mActiveIfaces), new android.util.ArrayMap(mActiveUidIfaces), vpnArray, currentTime); }",e3fc33d3f2978544c0442f989ff41a93c1dd51ba,2018-03-29 06:03:59,11
628390,core_java_android_net_NetworkStats.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void apply464xlatAdjustments(java.util.Map<java.lang.String, java.lang.String> stackedIfaces) { final android.net.NetworkStats adjustments = new android.net.NetworkStats(0, stackedIfaces.size()); android.net.NetworkStats.Entry entry = null; android.net.NetworkStats.Entry adjust = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, 0, 0, 0, 0, 0, 0, 0L, 0L, 0L, 0L, 0L); for (int i = 0; i < (size); i++) { entry = getValues(i, entry); if (((entry.iface) == null) || (!(entry.iface.startsWith(android.net.NetworkStats.CLATD_INTERFACE_PREFIX)))) { continue; } final java.lang.String baseIface = stackedIfaces.get(entry.iface); if (baseIface == null) { continue; } adjust.iface = baseIface; adjust.rxBytes = -((entry.rxBytes) + ((entry.rxPackets) * (android.net.NetworkStats.IPV4V6_HEADER_DELTA))); adjust.txBytes = -((entry.txBytes) + ((entry.txPackets) * (android.net.NetworkStats.IPV4V6_HEADER_DELTA))); adjust.rxPackets = -(entry.rxPackets); adjust.txPackets = -(entry.txPackets); adjustments.combineValues(adjust); entry.rxBytes = (entry.rxPackets) * (android.net.NetworkStats.IPV4V6_HEADER_DELTA); entry.txBytes = (entry.txPackets) * (android.net.NetworkStats.IPV4V6_HEADER_DELTA); entry.rxPackets = 0; entry.txPackets = 0; entry.operations = 0; combineValues(entry); } combineAllValues(adjustments); }",3c0d3600169b4559f504bea974c985acd9964ee9,"public void apply464xlatAdjustments(java.util.Map<java.lang.String, java.lang.String> stackedIfaces) { android.net.NetworkStats.apply464xlatAdjustments(this, this, stackedIfaces); }",0528895d0d0ca65810c3a89ccab3f38a85ced95f,2018-03-29 06:03:59,11
628390,core_java_com_android_internal_net_NetworkStatsFactory.java,"public android.net.NetworkStats readNetworkStatsSummaryDev() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; final boolean active = (reader.nextInt()) != 0; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.rxPackets += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); } stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",d3ceb86ca8ffbbcc11bdba7186f19fbdc4f077d6,"public android.net.NetworkStats readNetworkStatsSummaryDev() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = android.net.NetworkStats.UID_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; final boolean active = (reader.nextInt()) != 0; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.rxPackets += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); } stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",6877d8e0e89f985e29355329b100eb5fe7c6d5c3,"public android.net.NetworkStats readNetworkStatsSummaryDev() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; final boolean active = (reader.nextInt()) != 0; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.rxPackets += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); } stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",d3ceb86ca8ffbbcc11bdba7186f19fbdc4f077d6,2018-03-29 06:03:59,11
628390,core_java_com_android_internal_net_NetworkStatsFactory.java,"public android.net.NetworkStats readNetworkStatsSummaryXt() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); if (!(mStatsXtIfaceFmt.exists())) return null; final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceFmt)); reader.finishLine(); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",c51a3647a34899315a99463ac6a4b6cf525b1d74,"public android.net.NetworkStats readNetworkStatsSummaryXt() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); if (!(mStatsXtIfaceFmt.exists())) return null; final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceFmt)); reader.finishLine(); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = android.net.NetworkStats.UID_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",579632a9faf357d7c8cf13919514faab64f597b3,"public android.net.NetworkStats readNetworkStatsSummaryXt() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); if (!(mStatsXtIfaceFmt.exists())) return null; final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceFmt)); reader.finishLine(); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",c51a3647a34899315a99463ac6a4b6cf525b1d74,2018-03-29 06:03:59,11
652415,test_1935-get-set-current-frame-jit_src_Main.java,"public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; } int i = 0; while ((Main.isInterpreted()) && (i < 10000)) { Main.ensureJitCompiled(Main.IntRunner.class, ""run""); i++; } java.lang.System.out.println((""isInOsrCode? "" + ((Main.hasJit()) && (Main.isInOsrCode(""run""))))); Main.reportValue(TARGET); }",78a871a7bf1fdcfe4796b39a950d082c091e5291,"public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; } int i = 0; while ((Main.isInterpreted()) && (i < 10000)) { Main.ensureJitCompiled(Main.IntRunner.class, ""run""); i++; } if (Main.hasJit()) { boolean inOsr = Main.isInOsrCode(""run""); if ((expectOsr) && (!inOsr)) { throw new java.lang.Error(""Expected to be in OSR but was not.""); } else if ((!(expectOsr)) && inOsr) { throw new java.lang.Error(""Expected not to be in OSR but was.""); } } Main.reportValue(TARGET); }",8fffc9c2d9193e134ce265a094a8d92bb08100c9,"public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; } java.time.Instant osrDeadline = java.time.Instant.now().plusSeconds((expectOsr ? 600 : 3)); do { Main.ensureJitCompiled(Main.IntRunner.class, ""run""); } while (((Main.hasJit()) && (!(Main.isInOsrCode(""run"")))) && ((osrDeadline.compareTo(java.time.Instant.now())) > 0) ); if (Main.hasJit()) { boolean inOsr = Main.isInOsrCode(""run""); if ((expectOsr) && (!inOsr)) { throw new java.lang.Error(""Expected to be in OSR but was not.""); } else if ((!(expectOsr)) && inOsr) { throw new java.lang.Error(""Expected not to be in OSR but was.""); } } Main.reportValue(TARGET); }",9d7c53f9df8acacd4d229ab1f181753918b30493,2018-03-29 20:19:45,3
652561,harnesses_tradefed_tests_src_com_android_tradefed_targetprep_VtsHalAdapterPreparerTest.java,"@org.junit.Test public void testOnSetUpAdapterFailed() throws java.lang.Exception { java.lang.String output = ""android.hardware.foo@1.1::IFoo/default""; doReturn(output).when(mDevice).executeShellCommand(java.lang.String.format(LIST_HAL_CMD, TEST_HAL_PACKAGE)); mCmdUtil.mCmdSuccess = false; try { mPreparer.setUp(mDevice, mBuildInfo); } catch (java.lang.RuntimeException e) { assertEquals(""Hal adapter failed."", e.getMessage()); return; } fail(); }",ec6af293552454bfe51dade67939205f61ca4d88,"@org.junit.Test public void testOnSetUpAdapterFailed() throws java.lang.Exception { java.io.File testAdapter = new java.io.File(mTestDir, ((VTS_NATIVE_TEST_DIR) + (TEST_HAL_ADAPTER_BINARY))); testAdapter.createNewFile(); java.lang.String output = ""android.hardware.foo@1.1::IFoo/default""; doReturn(output).when(mDevice).executeShellCommand(java.lang.String.format(LIST_HAL_CMD, TEST_HAL_PACKAGE)); mCmdUtil.mCmdSuccess = false; try { mPreparer.setUp(mDevice, mBuildInfo); } catch (java.lang.RuntimeException e) { assertEquals(""Hal adapter failed."", e.getMessage()); return; } fail(); }",836035fba357b678ddc51a2d608f1647073da4ff,"@org.junit.Test public void testOnSetUpAdapterFailed() throws java.lang.Exception { java.io.File testAdapter = new java.io.File(mTestDir, ((VTS_NATIVE_TEST_DIR) + (TEST_HAL_ADAPTER_BINARY))); testAdapter.createNewFile(); java.lang.String output = ""android.hardware.foo@1.1::IFoo/default""; doReturn(output).when(mDevice).executeShellCommand(java.lang.String.format(LIST_HAL_CMD, TEST_HAL_PACKAGE)); mCmdUtil.mCmdSuccess = false; try { mPreparer.setUp(mDevice, mBuildInfo); } catch (com.android.tradefed.targetprep.TargetSetupError e) { assertEquals(""HAL adapter failed."", e.getMessage()); return; } fail(); }",408b48768d086e27dbf7c15158450bb025fa649c,2018-03-30 00:05:00,2
652561,harnesses_tradefed_tests_src_com_android_tradefed_targetprep_VtsHalAdapterPreparerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testOnSetupAdapterNotFound() throws java.lang.Exception { try { mPreparer.setUp(mDevice, mBuildInfo); } catch (java.lang.RuntimeException e) { assertEquals((""Could not find adapter: "" + (TEST_HAL_ADAPTER_BINARY)), e.getMessage()); return; } fail(); }",dcdddae2977c2b4d79529bcaf42549c9db5b2012,"@org.junit.Test public void testOnSetupAdapterNotFound() throws java.lang.Exception { try { mPreparer.setUp(mDevice, mBuildInfo); } catch (com.android.tradefed.targetprep.TargetSetupError e) { assertEquals(""Could not push adapter."", e.getMessage()); return; } fail(); }",4257e0b36b7476766942fd31190dc01a2abcccca,2018-03-30 00:05:00,2
652561,harnesses_tradefed_src_com_android_tradefed_targetprep_VtsHalAdapterPreparer.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void pushAdapter(com.android.tradefed.device.ITestDevice device, java.lang.String bitness) throws com.android.tradefed.device.DeviceNotAvailableException, java.io.IOException { com.android.compatibility.common.tradefed.build.VtsCompatibilityInvocationHelper invocationHelper = createVtsHelper(); java.io.File adapterDir = new java.io.File(invocationHelper.getTestsDir(), java.lang.String.format(com.android.tradefed.targetprep.VtsHalAdapterPreparer.VTS_NATIVE_TEST_DIR, bitness)); java.io.File adapter = com.android.tradefed.util.FileUtil.findFile(adapterDir, mAdapterBinaryName); if (adapter != null) { com.android.tradefed.log.LogUtil.CLog.i(""Pushing %s"", mAdapterBinaryName); device.pushFile(adapter, ((java.lang.String.format(com.android.tradefed.targetprep.VtsHalAdapterPreparer.TARGET_NATIVE_TEST_DIR, bitness)) + (mAdapterBinaryName))); } else { throw new java.lang.RuntimeException((""Could not find adapter: "" + (mAdapterBinaryName))); } }",4b2860d0feecfa5e07b0a80529a6d6fd3ceebbbc,"private void pushAdapter(com.android.tradefed.device.ITestDevice device, java.lang.String bitness) throws com.android.tradefed.device.DeviceNotAvailableException, java.io.IOException, java.util.NoSuchElementException { com.android.compatibility.common.tradefed.build.VtsCompatibilityInvocationHelper invocationHelper = createVtsHelper(); java.io.File adapterDir = new java.io.File(invocationHelper.getTestsDir(), java.lang.String.format(com.android.tradefed.targetprep.VtsHalAdapterPreparer.VTS_NATIVE_TEST_DIR, bitness)); java.io.File adapter = com.android.tradefed.util.FileUtil.findFile(adapterDir, mAdapterBinaryName); if (adapter != null) { com.android.tradefed.log.LogUtil.CLog.i(""Pushing %s"", mAdapterBinaryName); device.pushFile(adapter, ((java.lang.String.format(com.android.tradefed.targetprep.VtsHalAdapterPreparer.TARGET_NATIVE_TEST_DIR, bitness)) + (mAdapterBinaryName))); } else { throw new java.util.NoSuchElementException((""Could not find adapter: "" + (mAdapterBinaryName))); } }",f8efb8d0b4183c79705e667fe22465a54d52c033,2018-03-30 00:05:00,2
640286,tests_net_java_com_android_server_connectivity_TetheringTest.java,"private void sendIPv6TetherUpdates(android.net.NetworkState upstreamState) { verify(mIPv6TetheringCoordinator, times(1)).addActiveDownstream(argThat(( sm) -> sm.linkProperties().getInterfaceName().equals(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME)), eq(IControlsTethering.STATE_TETHERED)); for (com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism : mTetheringDependencies.getIPv6CoordinatorNotifyList()) { android.net.NetworkState ipv6OnlyState = com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(false, true); tism.sendMessage(TetherInterfaceStateMachine.CMD_IPV6_TETHER_UPDATE, 0, 0, (upstreamState.linkProperties.isIPv6Provisioned() ? ipv6OnlyState.linkProperties : null)); } mLooper.dispatchAll(); }",0c4acc39bcfdf1bd380d168c8f2bd004ea74d21f,"private void sendIPv6TetherUpdates(android.net.NetworkState upstreamState) { verify(mIPv6TetheringCoordinator, times(1)).addActiveDownstream(argThat(( sm) -> sm.linkProperties().getInterfaceName().equals(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME)), eq(IControlsTethering.STATE_TETHERED)); for (com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism : mTetheringDependencies.getIPv6CoordinatorNotifyList()) { android.net.NetworkState ipv6OnlyState = com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(false, true, false); tism.sendMessage(TetherInterfaceStateMachine.CMD_IPV6_TETHER_UPDATE, 0, 0, (upstreamState.linkProperties.isIPv6Provisioned() ? ipv6OnlyState.linkProperties : null)); } mLooper.dispatchAll(); }",de97e083dfaf52a3da6d6aabc64aab2423a8d33a,"private void sendIPv6TetherUpdates(android.net.NetworkState upstreamState) { verify(mIPv6TetheringCoordinator, times(1)).addActiveDownstream(argThat(( sm) -> sm.linkProperties().getInterfaceName().equals(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME)), eq(IControlsTethering.STATE_TETHERED)); for (com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism : mTetheringDependencies.ipv6CoordinatorNotifyList) { android.net.NetworkState ipv6OnlyState = com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(false, true, false); tism.sendMessage(TetherInterfaceStateMachine.CMD_IPV6_TETHER_UPDATE, 0, 0, (upstreamState.linkProperties.isIPv6Provisioned() ? ipv6OnlyState.linkProperties : null)); } mLooper.dispatchAll(); }",f0fc762c7e8cf8561bc47aabd159c3ac3233aa73,2018-03-30 01:05:36,13
640286,tests_net_java_com_android_server_connectivity_TetheringTest.java,"private static android.net.NetworkState buildMobileIpv4UpstreamState() { return com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(true, false); }",d6b25ea0615a7db781e76663f3565e02938de105,"private static android.net.NetworkState buildMobileIpv4UpstreamState() { return com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(true, false, false); }",d8bf2a35dcf9c009b823d4f04d73a8d819d36068,"private static android.net.NetworkState buildMobileIPv4UpstreamState() { return com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(true, false, false); }",26d46386491f13da3c377035cd25442b55da7d68,2018-03-30 01:05:36,13
640286,tests_net_java_com_android_server_connectivity_TetheringTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void workingMobileUsbTethering_464xlat() throws java.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobile464xlatUpstreamState(); runWorkingMobileUsbTethering(upstreamState); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_XLAT_MOBILE_IFNAME); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_XLAT_MOBILE_IFNAME); sendIPv6TetherUpdates(upstreamState); verify(mRouterAdvertisementDaemon, times(1)).buildNewRa(any(), notNull()); verify(mNetd, times(1)).tetherApplyDnsInterfaces(); }",532283104c956070f40dc1ee394bfcaafa19b9c4,"@org.junit.Test public void workingMobileUsbTethering_v6Then464xlat() throws java.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobileIPv6UpstreamState(); runUsbTethering(upstreamState); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); upstreamState = com.android.server.connectivity.TetheringTest.buildMobile464xlatUpstreamState(); when(mUpstreamNetworkMonitor.selectPreferredUpstreamType(any())).thenReturn(upstreamState); mTetheringDependencies.upstreamNetworkMonitorMasterSM.sendMessage(Tethering.TetherMasterSM.EVENT_UPSTREAM_CALLBACK, UpstreamNetworkMonitor.EVENT_ON_LINKPROPERTIES, 0, upstreamState); mLooper.dispatchAll(); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_XLAT_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_XLAT_MOBILE_IFNAME); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); }",dca6da85651474b79c6aaa1650043502429edba8,2018-03-30 01:05:36,13
640286,services_core_java_com_android_server_connectivity_Tethering.java,"private void handleUpstreamNetworkMonitorCallback(int arg1, java.lang.Object o) { if (arg1 == (com.android.server.connectivity.tethering.UpstreamNetworkMonitor.NOTIFY_LOCAL_PREFIXES)) { mOffload.sendOffloadExemptPrefixes(((java.util.Set<android.net.IpPrefix>) (o))); return; } final android.net.NetworkState ns = ((android.net.NetworkState) (o)); if ((ns == null) || (!(pertainsToCurrentUpstream(ns)))) { if ((mCurrentUpstreamIface) == null) { chooseUpstreamType(false); } return; } switch (arg1) { case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_AVAILABLE : break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_CAPABILITIES : handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LINKPROPERTIES : setDnsForwarders(ns.network, ns.linkProperties); handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LOST : handleNewUpstreamNetworkState(null); break; default : mLog.e((""Unknown arg1 value: "" + arg1)); break; } }",4f56d3ef5ce62fa982d6b9324681410c3cef751e,"private void handleUpstreamNetworkMonitorCallback(int arg1, java.lang.Object o) { if (arg1 == (com.android.server.connectivity.tethering.UpstreamNetworkMonitor.NOTIFY_LOCAL_PREFIXES)) { mOffload.sendOffloadExemptPrefixes(((java.util.Set<android.net.IpPrefix>) (o))); return; } final android.net.NetworkState ns = ((android.net.NetworkState) (o)); if ((ns == null) || (!(pertainsToCurrentUpstream(ns)))) { if ((mCurrentUpstreamIfaceSet) == null) { chooseUpstreamType(false); } return; } switch (arg1) { case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_AVAILABLE : break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_CAPABILITIES : handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LINKPROPERTIES : setDnsForwarders(ns.network, ns.linkProperties); handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LOST : handleNewUpstreamNetworkState(null); break; default : mLog.e((""Unknown arg1 value: "" + arg1)); break; } }",fe59e532098578bb9ae79e7e46a667ac4926de8e,"private void handleUpstreamNetworkMonitorCallback(int arg1, java.lang.Object o) { if (arg1 == (com.android.server.connectivity.tethering.UpstreamNetworkMonitor.NOTIFY_LOCAL_PREFIXES)) { mOffload.sendOffloadExemptPrefixes(((java.util.Set<android.net.IpPrefix>) (o))); return; } final android.net.NetworkState ns = ((android.net.NetworkState) (o)); if ((ns == null) || (!(pertainsToCurrentUpstream(ns)))) { if ((mCurrentUpstreamIfaceSet) == null) { chooseUpstreamType(false); } return; } switch (arg1) { case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_AVAILABLE : break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_CAPABILITIES : handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LINKPROPERTIES : chooseUpstreamType(false); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LOST : handleNewUpstreamNetworkState(null); break; default : mLog.e((""Unknown arg1 value: "" + arg1)); break; } }",0f59c112eebb4dcf59da236cb85657069bbc6940,2018-03-30 01:05:36,13
640286,services_net_java_android_net_util_InterfaceSet.java,,,@java.lang.Override public boolean equals(java.lang.Object obj) { return ((obj.getClass()) == (android.net.util.InterfaceSet.class)) && (ifnames.equals(obj)); },2988fe12865556227b6f1dcc6591ab7e1bdebee1,@java.lang.Override public boolean equals(java.lang.Object obj) { return ((obj != null) && (obj instanceof android.net.util.InterfaceSet)) && (ifnames.equals(((android.net.util.InterfaceSet) (obj)).ifnames)); },1c22fac5cc1a8ce6e5d5ad9c36f56bf1a4d1f53e,2018-03-30 01:05:36,13
640286,services_core_java_com_android_server_connectivity_tethering_TetherInterfaceStateMachine.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean noChangeInUpstreamIfaceSet(android.net.util.InterfaceSet newIfaces) { if (((mUpstreamIfaceSet) == null) && (newIfaces == null)) return true; if (((mUpstreamIfaceSet) != null) && (newIfaces != null)) { return mUpstreamIfaceSet.ifnames.equals(newIfaces.ifnames); } return false; },194bbcc317581837386da90b1b464d78c7f0e8b8,private boolean noChangeInUpstreamIfaceSet(android.net.util.InterfaceSet newIfaces) { if (((mUpstreamIfaceSet) == null) && (newIfaces == null)) return true; if (((mUpstreamIfaceSet) != null) && (newIfaces != null)) { return mUpstreamIfaceSet.equals(newIfaces); } return false; },62f0589b87937288ee49ef6fffacc1ebe6527ade,2018-03-30 01:05:36,13
651742,tests_net_java_android_net_IpSecAlgorithmTest.java,"@org.junit.Test public void testDefaultTruncLen() throws java.lang.Exception { android.net.IpSecAlgorithm explicit = new android.net.IpSecAlgorithm(IpSecAlgorithm.AUTH_HMAC_SHA256, java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, (256 / 8)), 256); android.net.IpSecAlgorithm implicit = new android.net.IpSecAlgorithm(IpSecAlgorithm.AUTH_HMAC_SHA256, java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, (256 / 8))); assertTrue((((""Default Truncation Length Incorrect, Explicit: "" + explicit) + ""implicit: "") + implicit), android.net.IpSecAlgorithm.equals(explicit, implicit)); }",2160e1ccb166535eafd07db08e3f7c42aac51300,"@org.junit.Test public void testDefaultTruncLenAuth() throws java.lang.Exception { try { android.net.IpSecAlgorithm implicit = new android.net.IpSecAlgorithm(IpSecAlgorithm.AUTH_HMAC_SHA256, java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, (256 / 8))); fail(""Expected exception on unprovided auth trunclen""); } catch (java.lang.IllegalArgumentException expected) { } }",8db029749f58777f01b575a733a667001ce2c795,"@org.junit.Test public void testNoTruncLen() throws java.lang.Exception { java.util.Map.Entry<java.lang.String, java.lang.Integer>[] authAndAeadList = new java.util.Map.Entry[]{ new java.util.AbstractMap.SimpleEntry(IpSecAlgorithm.AUTH_HMAC_MD5, 128), new java.util.AbstractMap.SimpleEntry(IpSecAlgorithm.AUTH_HMAC_SHA1, 160), new java.util.AbstractMap.SimpleEntry(IpSecAlgorithm.AUTH_HMAC_SHA256, 256), new java.util.AbstractMap.SimpleEntry(IpSecAlgorithm.AUTH_HMAC_SHA384, 384), new java.util.AbstractMap.SimpleEntry(IpSecAlgorithm.AUTH_HMAC_SHA512, 512), new java.util.AbstractMap.SimpleEntry(IpSecAlgorithm.AUTH_CRYPT_AES_GCM, 224) }; for (java.util.Map.Entry<java.lang.String, java.lang.Integer> algData : authAndAeadList) { try { new android.net.IpSecAlgorithm(algData.getKey(), java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, ((algData.getValue()) / 8))); fail(""Expected exception on unprovided auth trunclen""); } catch (java.lang.IllegalArgumentException expected) { } } new android.net.IpSecAlgorithm(IpSecAlgorithm.CRYPT_AES_CBC, java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, (256 / 8))); }",843c8c1d1ba81e4cfeec20bec3a241a73030db4d,2018-03-30 04:59:20,6
636656,tests_net_java_android_net_NetworkCapabilitiesTest.java,"@org.junit.Test public void testUnwantedCapabilities() { android.net.NetworkCapabilities network = new android.net.NetworkCapabilities(); android.net.NetworkCapabilities request = new android.net.NetworkCapabilities(); assertTrue((((""Request: "" + request) + "", Network:"") + network), request.satisfiedByNetworkCapabilities(network)); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED); assertTrue(request.satisfiedByNetworkCapabilities(network)); assertArrayEquals(new int[]{ android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED }, request.getUnwantedCapabilities()); assertTrue(network.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.satisfiedByNetworkCapabilities(network)); network.removeCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.satisfiedByNetworkCapabilities(network)); request.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.satisfiedByNetworkCapabilities(network)); network.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.satisfiedByNetworkCapabilities(network)); }",aec24870e1782a1cfd1c19818cb61ee2a523a366,"@org.junit.Test public void testUnwantedCapabilities() { android.net.NetworkCapabilities network = new android.net.NetworkCapabilities(); android.net.NetworkCapabilities request = new android.net.NetworkCapabilities(); assertTrue((((""Request: "" + request) + "", Network:"") + network), request.satisfiedByNetworkCapabilities(network)); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED); assertTrue(request.satisfiedByNetworkCapabilities(network)); assertArrayEquals(new int[]{ android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID }, request.getUnwantedCapabilities()); assertTrue(network.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.satisfiedByNetworkCapabilities(network)); network.removeCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.satisfiedByNetworkCapabilities(network)); request.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.satisfiedByNetworkCapabilities(network)); network.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.satisfiedByNetworkCapabilities(network)); }",894bca1ae73ea5f6fab17a500baf0b01c4dbf2ec,"@org.junit.Test public void testUnwantedCapabilities() { android.net.NetworkCapabilities network = new android.net.NetworkCapabilities(); android.net.NetworkCapabilities request = new android.net.NetworkCapabilities(); assertTrue((((""Request: "" + request) + "", Network:"") + network), request.satisfiedByNetworkCapabilities(network)); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED); assertTrue(request.satisfiedByNetworkCapabilities(network)); assertArrayEquals(new int[]{ android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED }, request.getUnwantedCapabilities()); assertTrue(network.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.satisfiedByNetworkCapabilities(network)); network.removeCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.satisfiedByNetworkCapabilities(network)); request.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.satisfiedByNetworkCapabilities(network)); network.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.satisfiedByNetworkCapabilities(network)); }",aec24870e1782a1cfd1c19818cb61ee2a523a366,2018-03-30 07:00:51,8
636656,tests_net_java_android_net_NetworkCapabilitiesTest.java,@org.junit.Test public void testOemPaid() { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); nc.maybeMarkCapabilitiesRestricted(); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); },5e99e8a62856ad02ad40c920916e6436c697bad5,@org.junit.Test public void testOemPaid() { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); assertTrue(nc.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); },7ffbed36949d4655f61e53c7ae0a3f44775d6db4,@org.junit.Test public void testOemPaid() { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); assertFalse(nc.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); android.net.NetworkCapabilities nr = new android.net.NetworkCapabilities(); nr.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); nr.maybeMarkCapabilitiesRestricted(); assertTrue(nr.satisfiedByNetworkCapabilities(nc)); assertFalse(nr.satisfiedByNetworkCapabilities(new android.net.NetworkCapabilities())); },f2c4955be589fe195fe7dc14efbc6acf1cb62dae,2018-03-30 07:00:51,8
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha256Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",262e827dd2b97a44f5f90afa19870fc0c82c7cae,"public void testAesCbcHmacSha256Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",40c14688768d13bee61f026fd2c9ef94b9fdafa1,"public void testAesCbcHmacSha256Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",71233a25575ec27e5dcd36585693cd8e29a4017d,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm64Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 64); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }",5a25e38096947f7cc2ed976dbe9434901092b870,"public void testAesGcm64Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 64); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }",0880cb0decaa574f0ea6be3fcae12c12bec09d41,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testInterfaceCountersUdp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1000, false); }",f4c5dc7991fd0e894e3ae8ff95e6fb09f321ff25,"public void testInterfaceCountersUdp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1000, false); }",5610b5e10e38399910edbc4badf8e4aa54d1c5f6,"public void testInterfaceCountersUdp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1000, false); }",3c2202d2e4993e2e5d3b710009584601e40bcb85,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm96Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }",13806a25f8dd5155d9a910602078cd9dbd31ecf9,"public void testAesGcm96Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }",a338609986b4fdd9cee8333a091370e5e5c43d1e,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"private static android.net.IpSecTransform buildIpSecTransform(android.content.Context mContext, android.net.IpSecManager.SecurityParameterIndex spi, android.net.IpSecManager.UdpEncapsulationSocket encapSocket, java.net.InetAddress remoteAddr) throws java.lang.Exception { java.lang.String localAddr = (remoteAddr instanceof java.net.Inet4Address) ? android.net.cts.IpSecManagerTest.IPV4_LOOPBACK : android.net.cts.IpSecManagerTest.IPV6_LOOPBACK; return new android.net.IpSecTransform.Builder(mContext).setEncryption(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setAuthentication(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.cts.IpSecManagerTest.AUTH_KEY.length) * 4))).setIpv4Encapsulation(encapSocket, encapSocket.getPort()).buildTransportModeTransform(java.net.InetAddress.getByName(localAddr), spi); }",c27c09200a13646eee53d0ecb3b0920e99352bbf,"private static android.net.IpSecTransform buildIpSecTransform(android.content.Context mContext, android.net.IpSecManager.SecurityParameterIndex spi, android.net.IpSecManager.UdpEncapsulationSocket encapSocket, java.net.InetAddress remoteAddr) throws java.lang.Exception { java.lang.String localAddr = (remoteAddr instanceof java.net.Inet4Address) ? android.net.cts.IpSecManagerTest.IPV4_LOOPBACK : android.net.cts.IpSecManagerTest.IPV6_LOOPBACK; return new android.net.IpSecTransform.Builder(mContext).setEncryption(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256))).setAuthentication(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), ((android.net.cts.IpSecManagerTest.getKey(256).length) * 4))).setIpv4Encapsulation(encapSocket, encapSocket.getPort()).buildTransportModeTransform(java.net.InetAddress.getByName(localAddr), spi); }",4fc30c3931b21e1f467e2ccb26386205231baea7,"private static android.net.IpSecTransform buildIpSecTransform(android.content.Context mContext, android.net.IpSecManager.SecurityParameterIndex spi, android.net.IpSecManager.UdpEncapsulationSocket encapSocket, java.net.InetAddress remoteAddr) throws java.lang.Exception { java.lang.String localAddr = (remoteAddr instanceof java.net.Inet4Address) ? android.net.cts.IpSecManagerTest.IPV4_LOOPBACK : android.net.cts.IpSecManagerTest.IPV6_LOOPBACK; return new android.net.IpSecTransform.Builder(mContext).setEncryption(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setAuthentication(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.cts.IpSecManagerTest.AUTH_KEY.length) * 4))).setIpv4Encapsulation(encapSocket, encapSocket.getPort()).buildTransportModeTransform(java.net.InetAddress.getByName(localAddr), spi); }",c27c09200a13646eee53d0ecb3b0920e99352bbf,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm96Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }",a5bf89f4bcfe8d671a48c326e42852a515ff3d5a,"public void testAesGcm96Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }",3d21c358987f922e93b7a6130a361cd3f05e051a,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",b2abc15aadb2dd26723c5f13747bbb4a73db9ffa,"public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",4be97cc5bb0dc001f02938038dbcc5c117d8dc93,"public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",99274f7ab27ed8261822fea8d93618b7140411d4,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",bd67adf701737f2df1b39237700bd1a4ffdba688,"public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",9f6958c2fed08e508fbb5ce2d80e7cf30f99e1a6,"public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",6624eaf2498bc012e0298e4092d218809c4e213a,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int truncLenBits) throws java.lang.Exception { int innerPacketSize = ((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateAesCbcEspPacketSizeWithAuth(((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen), truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = calculateAesCbcEspPacketSizeWithAuth(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, truncLenBits); sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (udpEncapLen != 0) { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } }",c4ac9f3e3cf855b34bc45ecc81c8027c8c27caa1,"private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int ivLen, int blkSize, int truncLenBits) throws java.lang.Exception { int innerPacketSize = ((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateEspPacketSize(((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen), ivLen, blkSize, truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = calculateEspPacketSize(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, ivLen, blkSize, truncLenBits); sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { if (udpEncapLen != 0) { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } } }",7636e8654461fb44db474689cf2fe77b9f1c11d4,"private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int ivLen, int blkSize, int truncLenBits) throws java.lang.Exception { int innerPacketSize = ((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateEspPacketSize(((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen), ivLen, blkSize, truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = calculateEspPacketSize(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, ivLen, blkSize, truncLenBits); sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (udpEncapLen != 0) { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } }",c624523a080e9b4b849a99907f58cb50813f21c0,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm96Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, true); }",bd23f71b45172211795e9ed0cae802341e4c3e22,"public void testAesGcm96Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, true); }",0b67370af0ddd7417ba4cef32baad9f516f6fa34,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",9613a79b8c9c744509c781f4a856207ef5ffd93d,"public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",9b8b409f7f3d74ee7426464182f64330cd0d9260,"public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",a95258f59828e1faa6c76973f5ebdbc85cce3b33,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm128Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }",bc7e014c6546a0c0375f2d3c8c8593e85411d18f,"public void testAesGcm128Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }",536c532df5719ab5b079a3b4380564b1353b6aa9,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha512Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",0005cab101697fd99c372092318ae9028ff211c2,"public void testAesCbcHmacSha512Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",099cf344b6d7abecfded0f86e59dedacdc6a34b2,"public void testAesCbcHmacSha512Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",97f7071706b79d3e3009b071999de756a0ad6523,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",013348b9d8071705cd25f84b41f9a82734deaadf,"public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",38be14d67f47d528d47a75060452b5765789f55f,"public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",f0f5f9d41b02337713da6bc4f05a1aa9af2e67da,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha512Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",48d08e3586b77a5ad2b8140ab426b12fd55cf801,"public void testAesCbcHmacSha512Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",a33df3afb74a414f5090191bd9b2ff54f6a29bde,"public void testAesCbcHmacSha512Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",2933dc55d96ad932032cb02b1d373bb99f83591b,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm128Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, true); }",cf6dfd8e2cd5ffc3877e56c158fea55cfb4a83d0,"public void testAesGcm128Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, true); }",29f599966e31f71537a12c11d4d8a64e259cc11c,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",cdeaf3179fc55dca20ab455aa2d7e470f16e71ca,"public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",89c55f06fc5eaa0b33e289fb9b9774b8b99208a3,"public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",931af54b13eb51933959e5ce0d38d12049092441,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",66fd08f1b84eb13e56052c34a2fdfe014bd9d303,"public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",c3df138c2715d218668e352d7cda81831b140d88,"public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",d0f13470894ef35de81bcc3d1fe575194bcd3ac4,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacMd5Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",5576ab727d155d0cc7c94c837b6971e0fd498405,"public void testAesCbcHmacMd5Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",6eb455b0357a3171a8aacc859f7c5dc433f2d772,"public void testAesCbcHmacMd5Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",191f04c538ee0e974c56c5357e104bf8f73ee3d5,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha256Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",d6fd1d9bd8dd0e230135acf48cd79a4bce5696fb,"public void testAesCbcHmacSha256Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",c21a2f2ef339f7f2b122330dd7477e44822ad5ba,"public void testAesCbcHmacSha256Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",0c1c3bb023c0250455cafbe349fa366d48e65bb1,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacMd5Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",c1fcccf3f4b455217285170e42c53865e92b1c87,"public void testAesCbcHmacMd5Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",70cf1f2b91e65f107a032dcb91a92e0e3300167d,"public void testAesCbcHmacMd5Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",2242622f85e13bc35f7f99eef14cf1616313cd89,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha384Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",5422526cbf0ace330b55d1c37eb1a1729e32c6ed,"public void testAesCbcHmacSha384Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",5a13ba5810571678e7f3261978fff57a37837e72,"public void testAesCbcHmacSha384Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",be78768e59e5506b2a908547796fb022fef41f22,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha1Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",f998488f07502908a4e912a3a1a948da76fa5d4c,"public void testAesCbcHmacSha1Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",82c7116393a3f69053694653bc62d215f8e2dc95,"public void testAesCbcHmacSha1Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",bb24bd85ae8f98a540e084d3bfc83fb348f96aa5,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm64Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 64); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }",1b0ed74f97490245538446ec2b0d580a02d61f92,"public void testAesGcm64Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 64); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }",a808cb8d227eff0ae3cf76a5eb4c4534acef9dcb,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacMd5Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",48743e17bb6e6663360c92a7cd93a99fa4240ed8,"public void testAesCbcHmacMd5Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",2c5a5c73b355896d64128275a0306340439e9500,"public void testAesCbcHmacMd5Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",4746bb5d4e4a17a7da63c6d9e84ad9f1971654e8,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha1Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",c204aa4ed356561946d03d1064a073ca918e7ee8,"public void testAesCbcHmacSha1Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",738e072ea7080a50e88c8de75617e49538a0ea52,"public void testAesCbcHmacSha1Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",8d79e917cff182e4653aa048d26241865b570776,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha256Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",88978a15ec5bbfc06949275a63155ba11955c8f9,"public void testAesCbcHmacSha256Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",dafa4516ad73fe876c85ff7ff401dc81d8965ac8,"public void testAesCbcHmacSha256Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",f8a6dd4bac8c1782a1d74dacec7b66512513aa25,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",fb2d0f8d15aeb6b4e929f94c3979bc08d83f3d7e,"public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",d92afaf1b5900cd3c0be7a05275fbd66f4e66cc5,"public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",f38d4b05e2d48aaa585f6bdd738687e0aaffbae1,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",417606c934c6f74a4d2fc5d56bad4850f2fb1c60,"public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",b6e3afb9b1bbfcd28c06aa96ca570aea06e36e2c,"public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",93c4909aa1eddf24ec2e3043bb5295cc9ae1cffd,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testInterfaceCountersUdp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1000, false); }",39402fa2effd00e68e1907d83dbba1430a63147c,"public void testInterfaceCountersUdp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1000, false); }",44aa26cbf51b828a0d60f5e490c0df2b75371b1c,"public void testInterfaceCountersUdp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1000, false); }",0f8e4926ab770d8624fda526ee5b0e78ce00cab9,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm96Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }",bb4ee5984a28d724162d3ff6bca601256c99cef6,"public void testAesGcm96Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }",f460d4c0e6345aa17624e1096033c1b25b5ea6da,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm64Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 64); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }",5d0dcd600254179988d3f421800c4b47ab0ca275,"public void testAesGcm64Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 64); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }",554292c8b5677f37ae071a1b2d628594fb02c512,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacMd5Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",b5530458e503304ba1fdfd091285ed5f226f27c0,"public void testAesCbcHmacMd5Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",29d48f6461a70f03a8ddcecaa290a47be8a27d83,"public void testAesCbcHmacMd5Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",d29c5ed801ca8f6dd20db5ccf9e0405a770f6410,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm128Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }",dd71d593f07d0b126ca5402cf53e14d50769767a,"public void testAesGcm128Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }",d1c6f92b0c25bff91fc9fee9935ae9d91fccc4fc,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm64Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 64); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, true); }",fe6ae26abcb60fed6bdc7eb8bdd4ebd4fc9f375f,"public void testAesGcm64Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 64); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, true); }",d2e161c754143a6e696376347dfa86631edfc809,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha256Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",51006a689c805c6d29acbd73ec5456db3fde64e0,"public void testAesCbcHmacSha256Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",7ce5cea0dee33e605fedb8fe2c43fd4ccd6aceb9,"public void testAesCbcHmacSha256Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",f15dbc7f6075ba008ff77244f8d5cfaf66707135,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha1Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",6579e676e23b16c42c23b649ba5844692f02c663,"public void testAesCbcHmacSha1Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",c042ceafab885eb0a5491446956d7ae33b7958d1,"public void testAesCbcHmacSha1Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",1fe108df5bfd29de4c920eaa7dceb14ab6eb1507,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm128Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, true); }",e356710c394c9082ac0eb5db581e69fa636b516d,"public void testAesGcm128Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, true); }",ff79e1b600dd4f1e64ba255d5be116aba275ed58,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm64Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 64); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, true); }",249a4c6683e853ed5965031d048cfd27ce27960d,"public void testAesGcm64Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 64); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, true); }",08eefb04ed62e3c64905c76b1132affc411199d1,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm64Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 64); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }",e8ef3c82f44006e8cdae769166ffdad491b135d0,"public void testAesGcm64Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 64); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }",b7e0428be3e2bcfba1a3540a3b95a71778f11d90,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",933f010bc566d836aa9bca077cb1b43b8ac75dd2,"public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",ffff38cd5ca5f03bbf86c4ecf2083476b3eb711f,"public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",327bd5a54e9ab30edcaf125e5004fe6703e04d43,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testInterfaceCountersUdp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1000, false); }",c99b56bac9ff8329e6e2b98ef4f3029695b5a23e,"public void testInterfaceCountersUdp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1000, false); }",04055ef65940b4970b3eb34a4e19d57aaa560ed6,"public void testInterfaceCountersUdp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1000, false); }",6635782653f8133ca62a459d53d0566e46bdb526,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha512Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",7f7f5f8b36f8ad97710bdeb7f3267b786b855ef2,"public void testAesCbcHmacSha512Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",d93d4fd0b0edf7aad02bcae088d47fa82fda567f,"public void testAesCbcHmacSha512Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",0bac0d97261f089fbb942272b73ddf3ff42fc904,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm128Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }",5f94cfff4cc89fe3c1a37961fee96c0f575d25fb,"public void testAesGcm128Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }",e6929bf1f60697ce22bc3e8818088d17aabca423,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha256Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",9d574c51d43958f3377505897f32ddc845055711,"public void testAesCbcHmacSha256Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",96ec7047a4ef14a111a298c214b9291f7ba1335d,"public void testAesCbcHmacSha256Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",703a868bf7e15f98213bbac145dad1d0b96df61f,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm128Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }",e16b39759f53fa37ab5ac659417594b6914feb42,"public void testAesGcm128Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }",d6cfce448380424ca5536da632f989fbce7dca35,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm96Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }",f29cca999864763d7c966376b44044c82364401a,"public void testAesGcm96Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }",c0a6df0889dab390d635a73e32c12322f7fad6d2,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",56c94cb5d4298afe070b3de25e7328e0dc79680e,"public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",f109bd4f330bbde45790a1b6553cd23747e7b4ce,"public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",dbfe7d8f6ad6459ce59109873532e314e09f8a75,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",2b7cfc045243aa6004652ed659b9c1a3ed3e4f94,"public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",0a4994a7c0006c30db0332d9e1d515308654866f,"public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",839123c886f6254238794a8c13ad595a83e3050a,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha512Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",c01dd020f572b52ba86ee9dab98e39def1bf24b9,"public void testAesCbcHmacSha512Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",8534b8a94950fb3ca3d4edd16293787118b9dd4b,"public void testAesCbcHmacSha512Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",c65b4c17366b494d02658feb929e7791ac98059c,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha1Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",f011d737e38902def2e55e998b558dea13bf609f,"public void testAesCbcHmacSha1Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",2436f59d312e760aefd720516c87d11e0e1b8bee,"public void testAesCbcHmacSha1Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",1469fa3ce4907404d1b8af98836e0cbdfbeddacd,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm96Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, true); }",75e474afa59fce50b896ec132cf75ab0cd8b78fd,"public void testAesGcm96Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, true); }",651001ec08e185e852e8b151387818ee4f79ba55,2018-03-30 18:14:14,9
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha384Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",51c0b0de07fa6eb6518445b098cd75b4fa47c8b5,"public void testAesCbcHmacSha384Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",a1a1cf3fd871e047e6c2890d7cacfcd9236bfca8,"public void testAesCbcHmacSha384Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",9773d29a0644caca5ec613f7d38d2a794817a3d8,2018-03-30 18:14:14,9
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha256Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",88978a15ec5bbfc06949275a63155ba11955c8f9,"public void testAesCbcHmacSha256Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",d276fe1c960fe32c50386386ba5dd4c74e11831f,"public void testAesCbcHmacSha256Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",9d205e25cf498102a5b1bc519e9c3ca372a1d400,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,@java.lang.Override public void send(byte[] data) throws java.io.IOException { mSocket.getOutputStream().write(data); },d82438769c8f07b9c8f3fe0b82fb929998e9419a,@java.lang.Override public void send(byte[] data) throws java.lang.Exception { mSocket.getOutputStream().write(data); },b8ac17c83d3940142e1202d5a81cd6237820a3ab,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,protected static int getDomain(java.net.InetAddress address) { int domain; if (address instanceof java.net.Inet6Address) domain = android.system.OsConstants.AF_INET6; else domain = android.system.OsConstants.AF_INET; return domain; },0a3efa893ad47ee21a94d8f291081f2d495420fd,protected static int getDomain(java.net.InetAddress address) { int domain; if (address instanceof java.net.Inet6Address) { domain = android.system.OsConstants.AF_INET6; } else { domain = android.system.OsConstants.AF_INET; } return domain; },8aa12d549f7d8b4055c18780e034f9248b948479,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"public void testJavaUdpSocketPair() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecBaseTest.IPV4_LOOPBACK); android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.JavaUdpSocket> sockets = android.net.cts.IpSecBaseTest.getJavaUdpSocketPair(local, true); checkSocketPair(sockets.mLeftSock, sockets.mRightSock); }",edd03eb43a55aa0f59e3b44dec4aca42b72651fb,"public void testJavaUdpSocketPair() throws java.lang.Exception { for (java.lang.String addr : android.net.cts.IpSecBaseTest.LOOPBACK_ADDRS) { java.net.InetAddress local = java.net.InetAddress.getByName(addr); try (android.net.IpSecTransform transform = buildDefaultTransform(local)) { android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.JavaUdpSocket> sockets = android.net.cts.IpSecBaseTest.getJavaUdpSocketPair(local, mISM, transform, true); checkSocketPair(sockets.mLeftSock, sockets.mRightSock); } } }",052e4ad61279c4a821ee8dbe6d51003199896b31,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,@java.lang.Override public void removeTransportModeTransforms(android.net.IpSecManager ism) throws java.io.IOException { ism.removeTransportModeTransforms(mFd); },8f900f91bceaae33b7ea5600e74398851dacafd4,@java.lang.Override public void removeTransportModeTransforms(android.net.IpSecManager ism) throws java.lang.Exception { ism.removeTransportModeTransforms(mFd); },bc813b73bcbe144f21691ddaff6bcfe7e281d8f2,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"private void checkSocketPair(android.net.cts.IpSecBaseTest.GenericSocket left, android.net.cts.IpSecBaseTest.GenericSocket right) throws java.lang.Exception { left.send(android.net.cts.IpSecBaseTest.TEST_DATA); assertArrayEquals(android.net.cts.IpSecBaseTest.TEST_DATA, right.receive()); right.send(android.net.cts.IpSecBaseTest.TEST_DATA); assertArrayEquals(android.net.cts.IpSecBaseTest.TEST_DATA, left.receive()); }",7acc05bfd7532723de37af195cabb155d7d967a5,"private void checkSocketPair(android.net.cts.IpSecBaseTest.GenericSocket left, android.net.cts.IpSecBaseTest.GenericSocket right) throws java.lang.Exception { left.send(android.net.cts.IpSecBaseTest.TEST_DATA); assertArrayEquals(android.net.cts.IpSecBaseTest.TEST_DATA, right.receive()); right.send(android.net.cts.IpSecBaseTest.TEST_DATA); assertArrayEquals(android.net.cts.IpSecBaseTest.TEST_DATA, left.receive()); left.close(); right.close(); }",71626d68ce63b80f86cfb7ede66d5cc4fe99cfce,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testInterfaceCountersUdp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1000, false); }",c99b56bac9ff8329e6e2b98ef4f3029695b5a23e,"public void testInterfaceCountersUdp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1000, false); }",eef55973dacad7c227b9c0e2e491db657b00ba94,"public void testInterfaceCountersUdp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1000, false); }",1480828cabbe4550538216d9f984b7143a9a18f0,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"@java.lang.Override public void sendTo(byte[] data, java.net.InetAddress dstAddr, int port) throws java.io.IOException { mSocket.send(new java.net.DatagramPacket(data, data.length, dstAddr, port)); }",fa9c0d3d4322992f7335f377f899c883b9f6ad34,"@java.lang.Override public void sendTo(byte[] data, java.net.InetAddress dstAddr, int port) throws java.lang.Exception { mSocket.send(new java.net.DatagramPacket(data, data.length, dstAddr, port)); }",31c0b80289f9df3cbda26057ca023b189f6ff93f,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha384Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",5422526cbf0ace330b55d1c37eb1a1729e32c6ed,"public void testAesCbcHmacSha384Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",7c5756fb30f1a37996bb2c985b8f227bffd5b3ec,"public void testAesCbcHmacSha384Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",da8cedddcc9c8eeea5567a6aab58645e7215b17c,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",417606c934c6f74a4d2fc5d56bad4850f2fb1c60,"public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",e8798faf6061d9fe6c6fc033c7f904a12ad987e0,"public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",c09bbf5e07c6e4debf1b67b1eaeecc5e3b602d15,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha1Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",6579e676e23b16c42c23b649ba5844692f02c663,"public void testAesCbcHmacSha1Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",30176d0b3e6ccf20d2dba36cb3757d90b10b9430,"public void testAesCbcHmacSha1Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",e272679b133b5ac0051808740d47e2e049ddbbfe,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",9613a79b8c9c744509c781f4a856207ef5ffd93d,"public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",55025d769b7180fe8dfc50d83ffeb6f5d7db9ff9,"public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",98f794bdad5c660ca21764753e4cb56904479388,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacMd5Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",b5530458e503304ba1fdfd091285ed5f226f27c0,"public void testAesCbcHmacMd5Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",eb2953ff7c83b7bb3b55811f80a957c15ceff9d3,"public void testAesCbcHmacMd5Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",599a09ac8f65abd0f7d60f7b9b4a099f33417815,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"public static android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeTcpSocket> getNativeTcpSocketPair(java.net.InetAddress localAddr) throws java.io.IOException { android.net.cts.IpSecBaseTest.NativeTcpSocket leftSock = null; android.net.cts.IpSecBaseTest.NativeTcpSocket rightSock = null; int domain = android.net.cts.IpSecBaseTest.getDomain(localAddr); try { java.io.FileDescriptor server = android.system.Os.socket(domain, OsConstants.SOCK_STREAM, OsConstants.IPPROTO_TCP); java.io.FileDescriptor client = android.system.Os.socket(domain, OsConstants.SOCK_STREAM, OsConstants.IPPROTO_TCP); android.system.Os.bind(server, localAddr, 0); int serverPort = android.net.cts.IpSecBaseTest.getPort(server); android.system.Os.listen(server, 10); android.system.Os.connect(client, localAddr, serverPort); java.io.FileDescriptor accepted = android.system.Os.accept(server, null); leftSock = new android.net.cts.IpSecBaseTest.NativeTcpSocket(client); rightSock = new android.net.cts.IpSecBaseTest.NativeTcpSocket(accepted); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } return new android.net.cts.IpSecBaseTest.SocketPair<>(leftSock, rightSock); }",2664a9c2340ec7fd454557eb0b28a2af93584023,"public static android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeTcpSocket> getNativeTcpSocketPair(java.net.InetAddress localAddr, android.net.IpSecManager ism, android.net.IpSecTransform transform) throws java.lang.Exception { int domain = android.net.cts.IpSecBaseTest.getDomain(localAddr); android.net.cts.IpSecBaseTest.NativeTcpSocket server = new android.net.cts.IpSecBaseTest.NativeTcpSocket(android.system.Os.socket(domain, OsConstants.SOCK_STREAM, OsConstants.IPPROTO_TCP)); android.net.cts.IpSecBaseTest.NativeTcpSocket client = new android.net.cts.IpSecBaseTest.NativeTcpSocket(android.system.Os.socket(domain, OsConstants.SOCK_STREAM, OsConstants.IPPROTO_TCP)); android.system.Os.bind(server.mFd, localAddr, 0); android.net.cts.IpSecBaseTest.applyTransformBidirectionally(ism, transform, server); android.net.cts.IpSecBaseTest.applyTransformBidirectionally(ism, transform, client); android.system.Os.listen(server.mFd, 10); android.system.Os.connect(client.mFd, localAddr, server.getPort()); android.net.cts.IpSecBaseTest.NativeTcpSocket accepted = new android.net.cts.IpSecBaseTest.NativeTcpSocket(android.system.Os.accept(server.mFd, null)); android.net.cts.IpSecBaseTest.applyTransformBidirectionally(ism, transform, accepted); server.close(); return new android.net.cts.IpSecBaseTest.SocketPair<>(client, accepted); }",7956867ec0bdd60255049bf848d2aef545f50b69,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"void sendTo(byte[] data, java.net.InetAddress dstAddr, int port) throws java.io.IOException;",96eb456bf4caf1c345d720106d704eb1e40b836d,"void sendTo(byte[] data, java.net.InetAddress dstAddr, int port) throws java.lang.Exception;",bc81286e1f5d448d03c4abe7d69bf1ddc5f0be5e,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha256Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",9d574c51d43958f3377505897f32ddc845055711,"public void testAesCbcHmacSha256Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",6c792d1df6424e035deadef061c7b025d5cbd768,"public void testAesCbcHmacSha256Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",c990c4ff0218dd088cb0582b34edd68ab700c525,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"@java.lang.Override public byte[] receive() throws java.io.IOException { java.net.DatagramPacket data = new java.net.DatagramPacket(new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN], android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN); mSocket.receive(data); return java.util.Arrays.copyOfRange(data.getData(), 0, data.getLength()); }",8ff9703006d05f5271b0c56aed87acef3ef89f0e,"@java.lang.Override public byte[] receive() throws java.lang.Exception { java.net.DatagramPacket data = new java.net.DatagramPacket(new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN], android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN); mSocket.receive(data); return java.util.Arrays.copyOfRange(data.getData(), 0, data.getLength()); }",67dc357089e152acbfc8ede80b37c03c311589e8,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacMd5Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",c1fcccf3f4b455217285170e42c53865e92b1c87,"public void testAesCbcHmacMd5Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",e1f5f3db6e38fb902661f1bf0bc1c523e25b978f,"public void testAesCbcHmacMd5Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",1d1fe1d41305c7e4b8c72c913faffcaa8c593760,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"public static android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.JavaTcpSocket> getJavaTcpSocketPair(java.net.InetAddress localAddr) throws java.io.IOException { android.net.cts.IpSecBaseTest.JavaTcpSocket leftSock = null; android.net.cts.IpSecBaseTest.JavaTcpSocket[] rightSock = new android.net.cts.IpSecBaseTest.JavaTcpSocket[1]; java.net.ServerSocket serverSocket = new java.net.ServerSocket(); serverSocket.bind(new java.net.InetSocketAddress(localAddr, 0)); java.lang.Thread serverThread = new java.lang.Thread(() -> { try { rightSock[0] = new android.net.cts.IpSecBaseTest.JavaTcpSocket(serverSocket.accept()); } catch (java.io.IOException ignored) { } }); leftSock = new android.net.cts.IpSecBaseTest.JavaTcpSocket(new java.net.Socket(localAddr, serverSocket.getLocalPort())); serverThread.start(); try { serverThread.join(); } catch (java.lang.InterruptedException e) { throw new java.io.IOException(e); } if ((rightSock[0]) == null) { throw new java.lang.IllegalStateException(""Could not create TCP socket pair""); } return new android.net.cts.IpSecBaseTest.SocketPair<>(leftSock, rightSock[0]); }",bff91a8ab4387e7ea72c35dea61fae8a241eba64,"public static android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.JavaTcpSocket> getJavaTcpSocketPair(java.net.InetAddress localAddr, android.net.IpSecManager ism, android.net.IpSecTransform transform) throws java.lang.Exception { android.net.cts.IpSecBaseTest.JavaTcpSocket clientSock = new android.net.cts.IpSecBaseTest.JavaTcpSocket(new java.net.Socket()); java.net.ServerSocket serverSocket = new java.net.ServerSocket(); serverSocket.bind(new java.net.InetSocketAddress(localAddr, 0)); clientSock.mSocket.bind(new java.net.InetSocketAddress(localAddr, 0)); java.io.FileDescriptor serverFd = serverSocket.getImpl().getFD$(); android.net.cts.IpSecBaseTest.applyTransformBidirectionally(ism, transform, new android.net.cts.IpSecBaseTest.NativeTcpSocket(serverFd)); android.net.cts.IpSecBaseTest.applyTransformBidirectionally(ism, transform, clientSock); clientSock.mSocket.connect(new java.net.InetSocketAddress(localAddr, serverSocket.getLocalPort())); android.net.cts.IpSecBaseTest.JavaTcpSocket acceptedSock = new android.net.cts.IpSecBaseTest.JavaTcpSocket(serverSocket.accept()); android.net.cts.IpSecBaseTest.applyTransformBidirectionally(ism, transform, acceptedSock); serverSocket.close(); return new android.net.cts.IpSecBaseTest.SocketPair<>(clientSock, acceptedSock); }",16ba59783b5825f390cc159d4a8a7d724cda484a,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"@java.lang.Override public byte[] receive() throws java.io.IOException { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN]; int bytesRead = 0; try { bytesRead = android.system.Os.read(mFd, in, 0, android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } return java.util.Arrays.copyOfRange(in, 0, bytesRead); }",3447456d8135b7831e05f30d0f695f8b46df5fc5,"@java.lang.Override public byte[] receive() throws java.lang.Exception { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN]; int bytesRead = android.system.Os.read(mFd, in, 0, android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN); return java.util.Arrays.copyOfRange(in, 0, bytesRead); }",761ea10acc4a524e45186d2b974739cbec373045,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,byte[] receive() throws java.io.IOException;,5c910f6e78020a7a4639ee40ad4c5dce101161c5,byte[] receive() throws java.lang.Exception;,0b1b2c49f6f12b1c70e43c0fb90baa23b7e03690,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"@java.lang.Override public void sendTo(byte[] data, java.net.InetAddress dstAddr, int port) throws java.io.IOException { try { android.system.Os.sendto(mFd, data, 0, data.length, 0, dstAddr, port); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } }",3c5100fe68886a6a4967b3956e0e2bde2138bc17,"@java.lang.Override public void sendTo(byte[] data, java.net.InetAddress dstAddr, int port) throws java.lang.Exception { android.system.Os.sendto(mFd, data, 0, data.length, 0, dstAddr, port); }",19af661d7c5f181e46adafd90c22f69ab7f76325,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,@java.lang.Override public abstract void send(byte[] data) throws java.io.IOException;,fa0ae04e0781a112c4805b2fff623d3bbf8edc9c,"@java.lang.Override public void send(byte[] data) throws java.lang.Exception { android.system.Os.write(mFd, data, 0, data.length); }",ae586ef3f00263ba878ca0a4c1f655d1f0f544ac,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"public void testJavaTcpSocketPair() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecBaseTest.IPV4_LOOPBACK); android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.JavaTcpSocket> sockets = android.net.cts.IpSecBaseTest.getJavaTcpSocketPair(local); checkSocketPair(sockets.mLeftSock, sockets.mRightSock); }",9d6acf066f1326ecf2735354dad095cc81727425,"public void testJavaTcpSocketPair() throws java.lang.Exception { for (java.lang.String addr : android.net.cts.IpSecBaseTest.LOOPBACK_ADDRS) { java.net.InetAddress local = java.net.InetAddress.getByName(addr); try (android.net.IpSecTransform transform = buildDefaultTransform(local)) { android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.JavaTcpSocket> sockets = android.net.cts.IpSecBaseTest.getJavaTcpSocketPair(local, mISM, transform); checkSocketPair(sockets.mLeftSock, sockets.mRightSock); } } }",d81460f8b94ad778e61bcaeefe22d13effdb5da2,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"public void testNativeTcpSocketPair() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecBaseTest.IPV4_LOOPBACK); android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeTcpSocket> sockets = android.net.cts.IpSecBaseTest.getNativeTcpSocketPair(local); checkSocketPair(sockets.mLeftSock, sockets.mRightSock); }",7d60cfc1e9c1a60d8a3e19b7095fe60da7854e63,"public void testNativeTcpSocketPair() throws java.lang.Exception { for (java.lang.String addr : android.net.cts.IpSecBaseTest.LOOPBACK_ADDRS) { java.net.InetAddress local = java.net.InetAddress.getByName(addr); try (android.net.IpSecTransform transform = buildDefaultTransform(local)) { android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeTcpSocket> sockets = android.net.cts.IpSecBaseTest.getNativeTcpSocketPair(local, mISM, transform); checkSocketPair(sockets.mLeftSock, sockets.mRightSock); } } }",aa1827fa4bbd8184ceeba859c02541fd806ffa8b,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"@java.lang.Override public byte[] receive() throws java.io.IOException { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN]; int bytesRead = mSocket.getInputStream().read(in); return java.util.Arrays.copyOfRange(in, 0, bytesRead); }",2aaea473804dee89e04f261f8cc5fba930f96c1a,"@java.lang.Override public byte[] receive() throws java.lang.Exception { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN]; int bytesRead = mSocket.getInputStream().read(in); return java.util.Arrays.copyOfRange(in, 0, bytesRead); }",74651673f63209d6a475bf63a9d0bdf410d82a12,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"public static android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.JavaUdpSocket> getJavaUdpSocketPair(java.net.InetAddress localAddr, boolean connected) throws java.io.IOException { android.net.cts.IpSecBaseTest.JavaUdpSocket leftSock = new android.net.cts.IpSecBaseTest.JavaUdpSocket(localAddr); android.net.cts.IpSecBaseTest.JavaUdpSocket rightSock = new android.net.cts.IpSecBaseTest.JavaUdpSocket(localAddr); if (connected) { leftSock.mSocket.connect(localAddr, rightSock.mSocket.getLocalPort()); rightSock.mSocket.connect(localAddr, leftSock.mSocket.getLocalPort()); } return new android.net.cts.IpSecBaseTest.SocketPair<>(leftSock, rightSock); }",7621e20a0f0681c1ab3bb880bc4ac5afde22f3c8,"public static android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.JavaUdpSocket> getJavaUdpSocketPair(java.net.InetAddress localAddr, android.net.IpSecManager ism, android.net.IpSecTransform transform, boolean connected) throws java.lang.Exception { android.net.cts.IpSecBaseTest.JavaUdpSocket leftSock = new android.net.cts.IpSecBaseTest.JavaUdpSocket(localAddr); android.net.cts.IpSecBaseTest.JavaUdpSocket rightSock = new android.net.cts.IpSecBaseTest.JavaUdpSocket(localAddr); android.net.cts.IpSecBaseTest.applyTransformBidirectionally(ism, transform, leftSock); android.net.cts.IpSecBaseTest.applyTransformBidirectionally(ism, transform, rightSock); if (connected) { leftSock.mSocket.connect(localAddr, rightSock.mSocket.getLocalPort()); rightSock.mSocket.connect(localAddr, leftSock.mSocket.getLocalPort()); } return new android.net.cts.IpSecBaseTest.SocketPair<>(leftSock, rightSock); }",f8eed43a608bfec33fbb759b27d0f578c88e7728,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,void send(byte[] data) throws java.io.IOException;,f2e4434536afada3cea76e317b0f5433686806b4,void send(byte[] data) throws java.lang.Exception;,28d41e0be3349788480f21a150632947f7c82708,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"void applyTransportModeTransform(android.net.IpSecManager ism, int direction, android.net.IpSecTransform transform) throws java.io.IOException;",98eb7c3376a3161c2a0f00c386dc19f73be6e5d5,"void applyTransportModeTransform(android.net.IpSecManager ism, int direction, android.net.IpSecTransform transform) throws java.lang.Exception;",51be4f7f669e411e9404166100d8110ad248a9cc,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"public void testNativeUdpSocketPair() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecBaseTest.IPV4_LOOPBACK); android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeUdpSocket> sockets = android.net.cts.IpSecBaseTest.getNativeUdpSocketPair(local, true); checkSocketPair(sockets.mLeftSock, sockets.mRightSock); }",8e289583b10aadcd2209f6f8bdf53b4681b70375,"public void testNativeUdpSocketPair() throws java.lang.Exception { for (java.lang.String addr : android.net.cts.IpSecBaseTest.LOOPBACK_ADDRS) { java.net.InetAddress local = java.net.InetAddress.getByName(addr); try (android.net.IpSecTransform transform = buildDefaultTransform(local)) { android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeUdpSocket> sockets = android.net.cts.IpSecBaseTest.getNativeUdpSocketPair(local, mISM, transform, true); checkSocketPair(sockets.mLeftSock, sockets.mRightSock); } } }",1426652723e38c724e9b7d7dddc47ad4ceb5b72d,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,void removeTransportModeTransforms(android.net.IpSecManager ism) throws java.io.IOException;,1311a90156a449ea399045e6a98eb0dcf3833d6e,void removeTransportModeTransforms(android.net.IpSecManager ism) throws java.lang.Exception;,a7110523fc47a8c4509e74de6bcc11842ba93a1c,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"public static android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeUdpSocket> getNativeUdpSocketPair(java.net.InetAddress localAddr, boolean connected) throws java.io.IOException { android.net.cts.IpSecBaseTest.NativeUdpSocket leftSock = null; android.net.cts.IpSecBaseTest.NativeUdpSocket rightSock = null; int domain = android.net.cts.IpSecBaseTest.getDomain(localAddr); try { java.io.FileDescriptor leftFd = android.system.Os.socket(domain, OsConstants.SOCK_DGRAM, OsConstants.IPPROTO_UDP); java.io.FileDescriptor rightFd = android.system.Os.socket(domain, OsConstants.SOCK_DGRAM, OsConstants.IPPROTO_UDP); android.system.Os.bind(leftFd, localAddr, 0); android.system.Os.bind(rightFd, localAddr, 0); int leftPort = android.net.cts.IpSecBaseTest.getPort(leftFd); int rightPort = android.net.cts.IpSecBaseTest.getPort(rightFd); if (connected) { android.system.Os.connect(leftFd, localAddr, rightPort); android.system.Os.connect(rightFd, localAddr, leftPort); } leftSock = new android.net.cts.IpSecBaseTest.NativeUdpSocket(leftFd); rightSock = new android.net.cts.IpSecBaseTest.NativeUdpSocket(rightFd); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } return new android.net.cts.IpSecBaseTest.SocketPair<>(leftSock, rightSock); }",b49be7e2ba7ae0f01469f71c15c28b621aee81cb,"public static android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeUdpSocket> getNativeUdpSocketPair(java.net.InetAddress localAddr, android.net.IpSecManager ism, android.net.IpSecTransform transform, boolean connected) throws java.lang.Exception { int domain = android.net.cts.IpSecBaseTest.getDomain(localAddr); android.net.cts.IpSecBaseTest.NativeUdpSocket leftSock = new android.net.cts.IpSecBaseTest.NativeUdpSocket(android.system.Os.socket(domain, OsConstants.SOCK_DGRAM, OsConstants.IPPROTO_UDP)); android.net.cts.IpSecBaseTest.NativeUdpSocket rightSock = new android.net.cts.IpSecBaseTest.NativeUdpSocket(android.system.Os.socket(domain, OsConstants.SOCK_DGRAM, OsConstants.IPPROTO_UDP)); for (android.net.cts.IpSecBaseTest.NativeUdpSocket sock : new android.net.cts.IpSecBaseTest.NativeUdpSocket[]{ leftSock, rightSock }) { android.net.cts.IpSecBaseTest.applyTransformBidirectionally(ism, transform, sock); android.system.Os.bind(sock.mFd, localAddr, 0); } if (connected) { android.system.Os.connect(leftSock.mFd, localAddr, rightSock.getPort()); android.system.Os.connect(rightSock.mFd, localAddr, leftSock.getPort()); } return new android.net.cts.IpSecBaseTest.SocketPair<>(leftSock, rightSock); }",80a7ca2d8b4e51d5d008949dff219c213fbafab5,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"@java.lang.Override public void send(byte[] data) throws java.io.IOException { mSocket.send(new java.net.DatagramPacket(data, data.length)); }",cc32070137352d184a851caa574a7793675d3474,"@java.lang.Override public void send(byte[] data) throws java.lang.Exception { mSocket.send(new java.net.DatagramPacket(data, data.length)); }",eddc10d9466547ac5dc1000798de46aa1eddf08a,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha256Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",262e827dd2b97a44f5f90afa19870fc0c82c7cae,"public void testAesCbcHmacSha256Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",aa1c01f0aefd94687fa24b400891f9e4a0a2c214,"public void testAesCbcHmacSha256Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",7bfe29933f977ea79fa05e74fcc8c51c54924449,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha512Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",c01dd020f572b52ba86ee9dab98e39def1bf24b9,"public void testAesCbcHmacSha512Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",e7defc5265dfed23b434089621951f305338afee,"public void testAesCbcHmacSha512Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",e7775bf791a277c4ef8c16d83d5f252695c59876,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha512Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",7f7f5f8b36f8ad97710bdeb7f3267b786b855ef2,"public void testAesCbcHmacSha512Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",67230f70dbe2867747ebe836b2de98bea06e12dd,"public void testAesCbcHmacSha512Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",e8c13720c94a76c2ad492314a3e2c9239354f43d,2018-03-30 18:17:01,15
647925,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,"private android.net.IpSecTransform getTransform(java.net.InetAddress localAddr) throws java.lang.Exception { android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr); android.net.IpSecTransform transform = new android.net.IpSecTransform.Builder(mContext).setEncryption(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, KEY_256)).setAuthentication(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, KEY_256, ((KEY_256.length) * 8))).buildTransportModeTransform(localAddr, spi); return transform; }",49ec08cfd314ef4623dd67ea62b90f9624357662,"private android.net.IpSecTransform getTransform(java.net.InetAddress localAddr) throws java.lang.Exception { android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr); return android.net.cts.IpSecBaseTest.buildIpSecTransform(mContext, spi, null, localAddr); }",81e5a53a5b7a325b322055cbc9ecd92ab7533958,"private android.net.IpSecTransform buildDefaultTransform(java.net.InetAddress localAddr) throws java.lang.Exception { try (android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr)) { return android.net.cts.IpSecBaseTest.buildIpSecTransform(mContext, spi, null, localAddr); } }",90e51c5b29c04bb6bf9e4a73cc1b6610f790fbbc,2018-03-30 18:17:01,9
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",fb2d0f8d15aeb6b4e929f94c3979bc08d83f3d7e,"public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",1550c148139eecf0800cf7962df971ec1434b3db,"public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",c15b6b909f0f2eefe363b00bdfa24227e3011247,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",cdeaf3179fc55dca20ab455aa2d7e470f16e71ca,"public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",d62aa1f9946d59e47ba9680a98bbbbff3b0aa0a2,"public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",345d90525d4be888291a3f1be9879380a3bc01a1,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"@java.lang.Override public void applyTransportModeTransform(android.net.IpSecManager ism, int direction, android.net.IpSecTransform transform) throws java.io.IOException { ism.applyTransportModeTransform(mFd, direction, transform); }",fde7c58aec5ee5652263ec366c83dc8e199c08ec,"@java.lang.Override public void applyTransportModeTransform(android.net.IpSecManager ism, int direction, android.net.IpSecTransform transform) throws java.lang.Exception { ism.applyTransportModeTransform(mFd, direction, transform); }",0d43741f10cac9ae4003af0d0cd3c67fcef0cba2,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha256Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",d6fd1d9bd8dd0e230135acf48cd79a4bce5696fb,"public void testAesCbcHmacSha256Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",01bf5edbe659826699839a29fbe00a1620b5397f,"public void testAesCbcHmacSha256Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",562795c47d1efb0f5f6f940171817484b06ac66b,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha512Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",48d08e3586b77a5ad2b8140ab426b12fd55cf801,"public void testAesCbcHmacSha512Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",1f61407c3f3073d50287066c29dc864ddfac1f36,"public void testAesCbcHmacSha512Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",fc63425047caf539ba9dc78a37d0b6efcfd9290f,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",013348b9d8071705cd25f84b41f9a82734deaadf,"public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",6de5af2c889b235d724626bb96043125b3089029,"public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",651632591d12248bdaf7c7bf65f861546e54f33a,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testInterfaceCountersUdp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1000, false); }",39402fa2effd00e68e1907d83dbba1430a63147c,"public void testInterfaceCountersUdp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1000, false); }",f71d4de94584b2312041618dcc7e1942c02bd954,"public void testInterfaceCountersUdp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1000, false); }",2518b2aae78e5d629d74c8360c9499221264a13b,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testUdpEncapsulation() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecManagerTest.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(local);android.net.IpSecTransform transform = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, spi, encapSocket, local)) { java.io.FileDescriptor udpSocket = null; try { udpSocket = android.net.cts.IpSecManagerTest.getBoundUdpSocket(local); int port = android.net.cts.IpSecManagerTest.getPort(udpSocket); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_OUT, transform); byte[] data = new java.lang.String(""IPSec UDP-encap-ESP test data"").getBytes(""UTF-8""); android.system.Os.sendto(udpSocket, data, 0, data.length, 0, local, port); byte[] in = new byte[data.length]; android.system.Os.read(udpSocket, in, 0, in.length); assertTrue(""Encapsulated data did not match."", java.util.Arrays.equals(data, in)); final byte[] header = new byte[]{ 0, 0, 0, 0 }; final java.lang.String message = ""Sample IKE Packet""; data = ((new java.lang.String(header)) + message).getBytes(""UTF-8""); android.system.Os.sendto(encapSocket.getSocket(), data, 0, data.length, 0, local, encapSocket.getPort()); in = new byte[data.length]; android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertTrue(""Encap socket was unable to send/receive IKE data"", java.util.Arrays.equals(data, in)); mISM.removeTransportModeTransforms(udpSocket); } finally { if (udpSocket != null) { android.system.Os.close(udpSocket); } } } }",ef4e9af5d7e5ee70b0a58416b9c4484c68b78432,"public void testUdpEncapsulation() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(local);android.net.IpSecTransform transform = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, spi, encapSocket, local)) { java.io.FileDescriptor udpSocket = null; try { udpSocket = android.net.cts.IpSecManagerTest.getBoundUdpSocket(local); int port = getPort(udpSocket); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_OUT, transform); byte[] data = new java.lang.String(""IPSec UDP-encap-ESP test data"").getBytes(""UTF-8""); android.system.Os.sendto(udpSocket, data, 0, data.length, 0, local, port); byte[] in = new byte[data.length]; android.system.Os.read(udpSocket, in, 0, in.length); assertTrue(""Encapsulated data did not match."", java.util.Arrays.equals(data, in)); final byte[] header = new byte[]{ 0, 0, 0, 0 }; final java.lang.String message = ""Sample IKE Packet""; data = ((new java.lang.String(header)) + message).getBytes(""UTF-8""); android.system.Os.sendto(encapSocket.getSocket(), data, 0, data.length, 0, local, encapSocket.getPort()); in = new byte[data.length]; android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertTrue(""Encap socket was unable to send/receive IKE data"", java.util.Arrays.equals(data, in)); mISM.removeTransportModeTransforms(udpSocket); } finally { if (udpSocket != null) { android.system.Os.close(udpSocket); } } } }",83ed955e7b99e1f73465a77198f8f1222d449de8,"public void testUdpEncapsulation() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(local);android.net.IpSecTransform transform = buildIpSecTransform(mContext, spi, encapSocket, local)) { java.io.FileDescriptor udpSocket = null; try { udpSocket = android.net.cts.IpSecManagerTest.getBoundUdpSocket(local); int port = getPort(udpSocket); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_OUT, transform); byte[] data = new java.lang.String(""IPSec UDP-encap-ESP test data"").getBytes(""UTF-8""); android.system.Os.sendto(udpSocket, data, 0, data.length, 0, local, port); byte[] in = new byte[data.length]; android.system.Os.read(udpSocket, in, 0, in.length); assertTrue(""Encapsulated data did not match."", java.util.Arrays.equals(data, in)); final byte[] header = new byte[]{ 0, 0, 0, 0 }; final java.lang.String message = ""Sample IKE Packet""; data = ((new java.lang.String(header)) + message).getBytes(""UTF-8""); android.system.Os.sendto(encapSocket.getFileDescriptor(), data, 0, data.length, 0, local, encapSocket.getPort()); in = new byte[data.length]; android.system.Os.read(encapSocket.getFileDescriptor(), in, 0, in.length); assertTrue(""Encap socket was unable to send/receive IKE data"", java.util.Arrays.equals(data, in)); mISM.removeTransportModeTransforms(udpSocket); } finally { if (udpSocket != null) { android.system.Os.close(udpSocket); } } } }",06ee337a1ea12de3c6c21bcdc1587854f48b7948,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",66fd08f1b84eb13e56052c34a2fdfe014bd9d303,"public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",e690757eaa2d75c47d06cf381473714e4ac76958,"public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",a494bc2dc6eed77e5b107718519df9019b728ea2,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int truncLenBits) throws java.lang.Exception { int innerPacketSize = ((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateAesCbcEspPacketSizeWithAuth(((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen), truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = calculateAesCbcEspPacketSizeWithAuth(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, truncLenBits); sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (udpEncapLen != 0) { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } }",c4ac9f3e3cf855b34bc45ecc81c8027c8c27caa1,"private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int truncLenBits) throws java.lang.Exception { int innerPacketSize = ((TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateAesCbcEspPacketSizeWithAuth(((TEST_DATA.length) + transportHdrLen), truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = calculateAesCbcEspPacketSizeWithAuth(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, truncLenBits); sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (udpEncapLen != 0) { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } }",b859b600648d2b39384569d2497a2021fa745262,"private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int ivLen, int blkSize, int truncLenBits) throws java.lang.Exception { int innerPacketSize = ((TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateEspPacketSize(((TEST_DATA.length) + transportHdrLen), ivLen, blkSize, truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = calculateEspPacketSize(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, ivLen, blkSize, truncLenBits); sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (udpEncapLen != 0) { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } }",255195290ef5e0bca4be8b39d434604ecfc22874,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha1Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",f998488f07502908a4e912a3a1a948da76fa5d4c,"public void testAesCbcHmacSha1Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",0af87f432dc9ff578e4777390da73f2e46af240e,"public void testAesCbcHmacSha1Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",86dd4123324d7deed7cea72dceefbf96e32a4297,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",2b7cfc045243aa6004652ed659b9c1a3ed3e4f94,"public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",b4bfdf4093546b6b1ee109cf65a1c0805b77cc2d,"public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",514da448fa94e320027c41aa00e4dbfd88bc6493,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,"protected static int getPort(java.io.FileDescriptor sock) throws java.io.IOException { int port = -1; try { port = ((java.net.InetSocketAddress) (android.system.Os.getsockname(sock))).getPort(); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } if (port == (-1)) { throw new java.lang.IllegalStateException(""Something happened while trying to get port""); } return port; }",5c1e462502364812110642a4d407294eaaa479b5,protected static int getPort(java.io.FileDescriptor sock) throws java.lang.Exception { return ((java.net.InetSocketAddress) (android.system.Os.getsockname(sock))).getPort(); },17ffe8693635ac83dfbb4527b49ff4a05728281f,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testIkeOverUdpEncapSocket() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecManagerTest.IPV4_LOOPBACK); android.net.cts.IpSecManagerTest.StatsChecker.initStatsChecker(); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket()) { int localPort = android.net.cts.IpSecManagerTest.getPort(encapSocket.getSocket()); byte[] dataWithEspHeader = new byte[(android.net.cts.IpSecManagerTest.TEST_DATA.length) + 8]; java.lang.System.arraycopy(android.net.cts.IpSecManagerTest.TEST_DATA, 0, dataWithEspHeader, 8, android.net.cts.IpSecManagerTest.TEST_DATA.length); byte[] in = new byte[dataWithEspHeader.length]; android.system.Os.sendto(encapSocket.getSocket(), dataWithEspHeader, 0, dataWithEspHeader.length, 0, local, localPort); android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertArrayEquals(""Encapsulated data did not match."", dataWithEspHeader, in); int ipHdrLen = (local instanceof java.net.Inet6Address) ? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int expectedPacketSize = ((dataWithEspHeader.length) + (android.net.cts.IpSecManagerTest.UDP_HDRLEN)) + ipHdrLen; android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); } }",e751681793535dbf0d77c5724d993fbb6b15f3ce,"public void testIkeOverUdpEncapSocket() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); android.net.cts.IpSecManagerTest.StatsChecker.initStatsChecker(); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket()) { int localPort = getPort(encapSocket.getSocket()); byte[] dataWithEspHeader = new byte[(TEST_DATA.length) + 8]; java.lang.System.arraycopy(android.net.cts.TEST_DATA, 0, dataWithEspHeader, 8, TEST_DATA.length); byte[] in = new byte[dataWithEspHeader.length]; android.system.Os.sendto(encapSocket.getSocket(), dataWithEspHeader, 0, dataWithEspHeader.length, 0, local, localPort); android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertArrayEquals(""Encapsulated data did not match."", dataWithEspHeader, in); int ipHdrLen = (local instanceof java.net.Inet6Address) ? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int expectedPacketSize = ((dataWithEspHeader.length) + (android.net.cts.IpSecManagerTest.UDP_HDRLEN)) + ipHdrLen; android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); } }",c2743ae28bd7506d8b7c16ffee4e1c5f08496018,"public void testIkeOverUdpEncapSocket() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); android.net.cts.IpSecManagerTest.StatsChecker.initStatsChecker(); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket()) { int localPort = getPort(encapSocket.getFileDescriptor()); byte[] dataWithEspHeader = new byte[(TEST_DATA.length) + 8]; java.lang.System.arraycopy(android.net.cts.TEST_DATA, 0, dataWithEspHeader, 8, TEST_DATA.length); byte[] in = new byte[dataWithEspHeader.length]; android.system.Os.sendto(encapSocket.getFileDescriptor(), dataWithEspHeader, 0, dataWithEspHeader.length, 0, local, localPort); android.system.Os.read(encapSocket.getFileDescriptor(), in, 0, in.length); assertArrayEquals(""Encapsulated data did not match."", dataWithEspHeader, in); int ipHdrLen = (local instanceof java.net.Inet6Address) ? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int expectedPacketSize = ((dataWithEspHeader.length) + (android.net.cts.IpSecManagerTest.UDP_HDRLEN)) + ipHdrLen; android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); } }",8b245ef2b308e08f83398825ff4fb5c8fd2eed11,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha384Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",51c0b0de07fa6eb6518445b098cd75b4fa47c8b5,"public void testAesCbcHmacSha384Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",4aa0b6ccd48d12e52a621a3de037cf988692d400,"public void testAesCbcHmacSha384Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",c8d7b26ea2e138d3eb1d571a237cedf4e56f7011,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",b2abc15aadb2dd26723c5f13747bbb4a73db9ffa,"public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",85c9a042122181c3a0893208466b42ab9605e0f8,"public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",14fad1e53172cec88d46a99012e53217be4412d0,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",bd67adf701737f2df1b39237700bd1a4ffdba688,"public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",4d583f444b4d89e9d450d3ea9317d13ce055e53c,"public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",072d1e0b2f1a9d31647af057cf5119c10448d7b0,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha256Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",51006a689c805c6d29acbd73ec5456db3fde64e0,"public void testAesCbcHmacSha256Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",91d36301258425dd6ff901d11e0dd1844ca0abf9,"public void testAesCbcHmacSha256Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",b9150797756b2d6347fd1d039bc8f4c2757e30c8,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha1Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",c204aa4ed356561946d03d1064a073ca918e7ee8,"public void testAesCbcHmacSha1Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",735a539f9a8640257393e7eceb8fc69ff5be368a,"public void testAesCbcHmacSha1Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",429f9a50cebae12ae8c7f5621566df945b2d3863,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testIke() throws java.lang.Exception { java.net.InetAddress localAddr = java.net.InetAddress.getByName(android.net.cts.IpSecManagerTest.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr);android.net.IpSecTransform transform = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, spi, encapSocket, localAddr)) { java.io.FileDescriptor sock = null; try { sock = android.net.cts.IpSecManagerTest.getBoundUdpSocket(localAddr); int port = android.net.cts.IpSecManagerTest.getPort(sock); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_OUT, transform); byte[] header = new byte[]{ 1, 1, 1, 1 }; java.lang.String message = ""Sample ESP Packet""; byte[] data = ((new java.lang.String(header)) + message).getBytes(""UTF-8""); android.system.Os.sendto(sock, data, 0, data.length, 0, localAddr, encapSocket.getPort()); header = new byte[]{ 0, 0, 0, 0 }; message = ""Sample IKE Packet""; data = ((new java.lang.String(header)) + message).getBytes(""UTF-8""); android.system.Os.sendto(encapSocket.getSocket(), data, 0, data.length, 0, localAddr, encapSocket.getPort()); byte[] in = new byte[4]; in[0] = 1; android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertTrue(""Encap socket received UDP-encap-ESP data despite invalid SPIs"", java.util.Arrays.equals(header, in)); mISM.removeTransportModeTransforms(sock); } finally { if (sock != null) { android.system.Os.close(sock); } } } }",f5200a9c7bf1c917c5bd4510eae710a296e465d2,"public void testIke() throws java.lang.Exception { java.net.InetAddress localAddr = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr);android.net.IpSecTransform transform = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, spi, encapSocket, localAddr)) { java.io.FileDescriptor sock = null; try { sock = android.net.cts.IpSecManagerTest.getBoundUdpSocket(localAddr); int port = getPort(sock); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_OUT, transform); byte[] header = new byte[]{ 1, 1, 1, 1 }; java.lang.String message = ""Sample ESP Packet""; byte[] data = ((new java.lang.String(header)) + message).getBytes(""UTF-8""); android.system.Os.sendto(sock, data, 0, data.length, 0, localAddr, encapSocket.getPort()); header = new byte[]{ 0, 0, 0, 0 }; message = ""Sample IKE Packet""; data = ((new java.lang.String(header)) + message).getBytes(""UTF-8""); android.system.Os.sendto(encapSocket.getSocket(), data, 0, data.length, 0, localAddr, encapSocket.getPort()); byte[] in = new byte[4]; in[0] = 1; android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertTrue(""Encap socket received UDP-encap-ESP data despite invalid SPIs"", java.util.Arrays.equals(header, in)); mISM.removeTransportModeTransforms(sock); } finally { if (sock != null) { android.system.Os.close(sock); } } } }",5ff0f4eaeed5bc41317f5066d88b4eafb4e73b12,"public void testIke() throws java.lang.Exception { java.net.InetAddress localAddr = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr);android.net.IpSecTransform transform = buildIpSecTransform(mContext, spi, encapSocket, localAddr)) { java.io.FileDescriptor sock = null; try { sock = android.net.cts.IpSecManagerTest.getBoundUdpSocket(localAddr); int port = getPort(sock); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_OUT, transform); byte[] header = new byte[]{ 1, 1, 1, 1 }; java.lang.String message = ""Sample ESP Packet""; byte[] data = ((new java.lang.String(header)) + message).getBytes(""UTF-8""); android.system.Os.sendto(sock, data, 0, data.length, 0, localAddr, encapSocket.getPort()); header = new byte[]{ 0, 0, 0, 0 }; message = ""Sample IKE Packet""; data = ((new java.lang.String(header)) + message).getBytes(""UTF-8""); android.system.Os.sendto(encapSocket.getFileDescriptor(), data, 0, data.length, 0, localAddr, encapSocket.getPort()); byte[] in = new byte[4]; in[0] = 1; android.system.Os.read(encapSocket.getFileDescriptor(), in, 0, in.length); assertTrue(""Encap socket received UDP-encap-ESP data despite invalid SPIs"", java.util.Arrays.equals(header, in)); mISM.removeTransportModeTransforms(sock); } finally { if (sock != null) { android.system.Os.close(sock); } } } }",9279f756184b2f75dbcbcdc750bb6b5bf15e858f,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacMd5Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",48743e17bb6e6663360c92a7cd93a99fa4240ed8,"public void testAesCbcHmacMd5Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",9b76707b471dd1186a5e8672cab0ed262ae1520d,"public void testAesCbcHmacMd5Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",acfea689fc017b9f368579d90c3a46d72cd4a13f,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha512Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",0005cab101697fd99c372092318ae9028ff211c2,"public void testAesCbcHmacSha512Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",820276d638f646066e7449088fe8c882f3cf3954,"public void testAesCbcHmacSha512Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",bf7f5208174354e187075284968f2f4e656c8af2,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",933f010bc566d836aa9bca077cb1b43b8ac75dd2,"public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",a64dd63b671b32a265720e26915a58ba0d1adaa9,"public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",18e7516f67ab7f5ae98833c2512e8031c55377a9,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",56c94cb5d4298afe070b3de25e7328e0dc79680e,"public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",697cf36de65e13730e5e817692d14c421bf6be03,"public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",c1bf6efdb6904f05b13d76fff69c85896e448c4b,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testInterfaceCountersUdp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1000, false); }",f4c5dc7991fd0e894e3ae8ff95e6fb09f321ff25,"public void testInterfaceCountersUdp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1000, false); }",ccc5ac605d84f49b13ad5a0f4d0e2aca60b3e443,"public void testInterfaceCountersUdp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1000, false); }",65ba4dbe1aa394801182b39f7b8a7d8a14d08754,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacSha1Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",f011d737e38902def2e55e998b558dea13bf609f,"public void testAesCbcHmacSha1Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",3868f51170a1f3dadaa7689823773de2cf9caa5a,"public void testAesCbcHmacSha1Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",a3103bf814e5ad32db83d874ede0bb879bf2aaa5,2018-03-30 18:17:01,15
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testAesCbcHmacMd5Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",5576ab727d155d0cc7c94c837b6971e0fd498405,"public void testAesCbcHmacMd5Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",39c65e735d68f060b7778735e68946ec4dbc95b3,"public void testAesCbcHmacMd5Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",79007dd13c20627d801522405752a0e77917314a,2018-03-30 18:17:01,15
650821,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"public void testUdpEncapsulation() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(local);android.net.IpSecTransform transform = buildIpSecTransform(mContext, spi, encapSocket, local)) { java.io.FileDescriptor udpSocket = null; try { udpSocket = android.net.cts.IpSecManagerTest.getBoundUdpSocket(local); int port = getPort(udpSocket); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_OUT, transform); byte[] data = new java.lang.String(""IPSec UDP-encap-ESP test data"").getBytes(""UTF-8""); android.system.Os.sendto(udpSocket, data, 0, data.length, 0, local, port); byte[] in = new byte[data.length]; android.system.Os.read(udpSocket, in, 0, in.length); assertTrue(""Encapsulated data did not match."", java.util.Arrays.equals(data, in)); final byte[] header = new byte[]{ 0, 0, 0, 0 }; final java.lang.String message = ""Sample IKE Packet""; data = ((new java.lang.String(header)) + message).getBytes(""UTF-8""); android.system.Os.sendto(encapSocket.getSocket(), data, 0, data.length, 0, local, encapSocket.getPort()); in = new byte[data.length]; android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertTrue(""Encap socket was unable to send/receive IKE data"", java.util.Arrays.equals(data, in)); mISM.removeTransportModeTransforms(udpSocket); } finally { if (udpSocket != null) { android.system.Os.close(udpSocket); } } } }",b3d94eb5b8eba8a1b701d2cf0afe2944f035bfe6,"public void testIkeOverUdpEncapSocket() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket()) { checkIkePacket(encapSocket, local); android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getKey(128), 96); try (android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(local);android.net.IpSecTransform transform = new android.net.IpSecTransform.Builder(mContext).setEncryption(crypt).setAuthentication(auth).setIpv4Encapsulation(encapSocket, encapSocket.getPort()).buildTransportModeTransform(local, spi);android.net.cts.JavaUdpSocket localSocket = new android.net.cts.JavaUdpSocket(local)) { applyTransformBidirectionally(mISM, transform, localSocket); checkIkePacket(encapSocket, local); } } }",befa3787c7b43481b3407fb03a4cd126baf9f326,"public void testIkeOverUdpEncapSocket() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket()) { android.net.cts.NativeUdpSocket wrappedEncapSocket = new android.net.cts.NativeUdpSocket(encapSocket.getFileDescriptor()); checkIkePacket(wrappedEncapSocket, local); android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getKey(128), 96); try (android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(local);android.net.IpSecTransform transform = new android.net.IpSecTransform.Builder(mContext).setEncryption(crypt).setAuthentication(auth).setIpv4Encapsulation(encapSocket, encapSocket.getPort()).buildTransportModeTransform(local, spi);android.net.cts.JavaUdpSocket localSocket = new android.net.cts.JavaUdpSocket(local)) { applyTransformBidirectionally(mISM, transform, localSocket); checkIkePacket(wrappedEncapSocket, local); } } }",147e08a2e68df3721c39b6da31628ee9cdc76171,2018-03-30 18:17:55,8
650821,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,"@java.lang.Override public byte[] receive() throws java.lang.Exception { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN]; int bytesRead = android.system.Os.read(mFd, in, 0, android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN); return java.util.Arrays.copyOfRange(in, 0, bytesRead); }",761ea10acc4a524e45186d2b974739cbec373045,"@java.lang.Override public byte[] receive() throws java.lang.Exception { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN]; int[] bytesRead = new int[]{ 0 }; java.lang.Thread readSockThread = new java.lang.Thread(() -> { long startTime = java.lang.System.currentTimeMillis(); while (((bytesRead[0]) <= 0) && ((java.lang.System.currentTimeMillis()) < (startTime + (android.net.cts.IpSecBaseTest.SOCK_TIMEOUT)))) { try { bytesRead[0] = android.system.Os.recvfrom(mFd, in, 0, android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN, ((android.system.OsConstants.O_NONBLOCK) | (android.system.OsConstants.WNOWAIT)), null); break; } catch (java.lang.Exception e) { android.util.Log.e(android.net.cts.IpSecBaseTest.TAG, ""Error encountered reading from socket"", e); } } }); try { readSockThread.start(); readSockThread.join(android.net.cts.IpSecBaseTest.SOCK_TIMEOUT); } catch (java.lang.Exception e) { throw new java.io.IOException(""Failed to receive from socket""); } if ((bytesRead[0]) <= 0) { throw new java.io.IOException(""No data received from socket""); } return java.util.Arrays.copyOfRange(in, 0, bytesRead[0]); }",0978be87361fd36e8dd48d418e65a0fcb0818f69,"@java.lang.Override public byte[] receive() throws java.lang.Exception { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN]; java.util.concurrent.atomic.AtomicInteger bytesRead = new java.util.concurrent.atomic.AtomicInteger((-1)); java.lang.Thread readSockThread = new java.lang.Thread(() -> { long startTime = java.lang.System.currentTimeMillis(); while (((bytesRead.get()) < 0) && ((java.lang.System.currentTimeMillis()) < (startTime + (android.net.cts.IpSecBaseTest.SOCK_TIMEOUT)))) { try { bytesRead.set(android.system.Os.recvfrom(mFd, in, 0, android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN, 0, null)); } catch (java.lang.Exception e) { android.util.Log.e(android.net.cts.IpSecBaseTest.TAG, ""Error encountered reading from socket"", e); } } }); readSockThread.start(); readSockThread.join(android.net.cts.IpSecBaseTest.SOCK_TIMEOUT); if ((bytesRead.get()) < 0) { throw new java.io.IOException(""No data received from socket""); } return java.util.Arrays.copyOfRange(in, 0, bytesRead.get()); }",357f46ff08f2a8db093bc55a73b0556071e44ab3,2018-03-30 18:17:55,8
653340,test_1935-get-set-current-frame-jit_src_Main.java,"public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; } int i = 0; while ((Main.isInterpreted()) && (i < 10000)) { Main.ensureJitCompiled(Main.IntRunner.class, ""run""); i++; } java.lang.System.out.println((""isInOsrCode? "" + ((Main.hasJit()) && (Main.isInOsrCode(""run""))))); Main.reportValue(TARGET); }",78a871a7bf1fdcfe4796b39a950d082c091e5291,"public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; } java.time.Instant osrDeadline = java.time.Instant.now().plusSeconds((expectOsr ? 600 : 3)); do { Main.ensureJitCompiled(Main.IntRunner.class, ""run""); } while (((Main.hasJit()) && (!(Main.isInOsrCode(""run"")))) && ((osrDeadline.compareTo(java.time.Instant.now())) > 0) ); if (Main.hasJit()) { boolean inOsr = Main.isInOsrCode(""run""); if ((expectOsr) && (!inOsr)) { throw new java.lang.Error(""Expected to be in OSR but was not.""); } else if ((!(expectOsr)) && inOsr) { throw new java.lang.Error(""Expected not to be in OSR but was.""); } } Main.reportValue(TARGET); }",9d7c53f9df8acacd4d229ab1f181753918b30493,"public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; } java.time.Instant osrDeadline = java.time.Instant.now().plusSeconds((expectOsr ? 600 : 3)); do { inBusyLoop = true; } while (((Main.hasJit()) && (!(Main.isInOsrCode(""run"")))) && ((osrDeadline.compareTo(java.time.Instant.now())) > 0) ); if (Main.hasJit()) { boolean inOsr = Main.isInOsrCode(""run""); if ((expectOsr) && (!inOsr)) { throw new java.lang.Error(""Expected to be in OSR but was not.""); } else if ((!(expectOsr)) && inOsr) { throw new java.lang.Error(""Expected not to be in OSR but was.""); } } Main.reportValue(TARGET); }",da966ca2958bfcb0e20371c7f11818f4faa318e6,2018-03-30 20:21:53,4
652080,services_net_java_android_net_apf_ApfFilter.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public synchronized void setDozeMode(boolean isEnabled) { if ((mInDozeMode) == isEnabled) return; mInDozeMode = isEnabled; installNewProgramLocked(); },c484c737b5216778e7974d145bdf06b4c6874fea,@com.android.internal.annotations.VisibleForTesting public synchronized void setDozeMode(boolean isEnabled) { if ((mInDozeMode) == isEnabled) return; mInDozeMode = isEnabled; installNewProgramLocked(); },9f0c0006fd4eae4975d0bd39bbb1cc268365ecc1,2018-04-02 13:57:43,9
652080,services_net_java_android_net_apf_ApfFilter.java,"public static android.net.apf.ApfFilter maybeCreate(android.net.apf.ApfFilter.ApfConfiguration config, android.net.util.InterfaceParams ifParams, android.net.ip.IpClient.Callback ipClientCallback) { if ((config == null) || (ifParams == null)) return null; android.net.apf.ApfCapabilities apfCapabilities = config.apfCapabilities; if (apfCapabilities == null) return null; if ((apfCapabilities.apfVersionSupported) == 0) return null; if ((apfCapabilities.maximumApfProgramSize) < 512) { android.util.Log.e(android.net.apf.ApfFilter.TAG, (""Unacceptably small APF limit: "" + (apfCapabilities.maximumApfProgramSize))); return null; } if ((apfCapabilities.apfPacketFormat) != (ARPHRD_ETHER)) return null; if (!(new android.net.apf.ApfGenerator().setApfVersion(apfCapabilities.apfVersionSupported))) { android.util.Log.e(android.net.apf.ApfFilter.TAG, (""Unsupported APF version: "" + (apfCapabilities.apfVersionSupported))); return null; } return new android.net.apf.ApfFilter(config, ifParams, ipClientCallback, new android.net.metrics.IpConnectivityLog()); }",dcf8213f45621e0c56e819bfc5a561889d622b6d,"public static android.net.apf.ApfFilter maybeCreate(android.content.Context context, android.net.apf.ApfFilter.ApfConfiguration config, android.net.util.InterfaceParams ifParams, android.net.ip.IpClient.Callback ipClientCallback) { if (((context == null) || (config == null)) || (ifParams == null)) return null; android.net.apf.ApfCapabilities apfCapabilities = config.apfCapabilities; if (apfCapabilities == null) return null; if ((apfCapabilities.apfVersionSupported) == 0) return null; if ((apfCapabilities.maximumApfProgramSize) < 512) { android.util.Log.e(android.net.apf.ApfFilter.TAG, (""Unacceptably small APF limit: "" + (apfCapabilities.maximumApfProgramSize))); return null; } if ((apfCapabilities.apfPacketFormat) != (ARPHRD_ETHER)) return null; if (!(new android.net.apf.ApfGenerator().setApfVersion(apfCapabilities.apfVersionSupported))) { android.util.Log.e(android.net.apf.ApfFilter.TAG, (""Unsupported APF version: "" + (apfCapabilities.apfVersionSupported))); return null; } android.net.apf.ApfFilter apfFilter = new android.net.apf.ApfFilter(config, ifParams, ipClientCallback, new android.net.metrics.IpConnectivityLog()); context.registerReceiver(new android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { java.lang.String action = intent.getAction(); if (action.equals(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED)) { android.os.PowerManager powerManager = ((android.os.PowerManager) (context.getSystemService(Context.POWER_SERVICE))); final boolean deviceIdle = powerManager.isDeviceIdleMode(); apfFilter.setDozeMode(deviceIdle); } } }, new android.content.IntentFilter(android.os.PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED)); return apfFilter; }",7d5c3b75851fcc44c71ad74d18552d74765a723e,"public static android.net.apf.ApfFilter maybeCreate(android.content.Context context, android.net.apf.ApfFilter.ApfConfiguration config, android.net.util.InterfaceParams ifParams, android.net.ip.IpClient.Callback ipClientCallback) { if (((context == null) || (config == null)) || (ifParams == null)) return null; android.net.apf.ApfCapabilities apfCapabilities = config.apfCapabilities; if (apfCapabilities == null) return null; if ((apfCapabilities.apfVersionSupported) == 0) return null; if ((apfCapabilities.maximumApfProgramSize) < 512) { android.util.Log.e(android.net.apf.ApfFilter.TAG, (""Unacceptably small APF limit: "" + (apfCapabilities.maximumApfProgramSize))); return null; } if ((apfCapabilities.apfPacketFormat) != (ARPHRD_ETHER)) return null; if (!(new android.net.apf.ApfGenerator().setApfVersion(apfCapabilities.apfVersionSupported))) { android.util.Log.e(android.net.apf.ApfFilter.TAG, (""Unsupported APF version: "" + (apfCapabilities.apfVersionSupported))); return null; } return new android.net.apf.ApfFilter(context, config, ifParams, ipClientCallback, new android.net.metrics.IpConnectivityLog()); }",cafdeab14792a20f84fdad86a766f0e74c02d9a3,2018-04-02 13:57:43,9
644119,tests_telephonytests_src_com_android_internal_telephony_ServiceStateTrackerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetPsNotifications() { com.android.internal.telephony.ServiceStateTracker spySst = spy(sst); android.app.NotificationManager nm = mock(android.app.NotificationManager.class); doReturn(nm).when(mContext).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(R.bool.config_user_notification_of_restrictied_mobile_access, true); doReturn(new android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.graphics.drawable.Drawable mockDrawable = mock(android.graphics.drawable.Drawable.class); android.content.res.Resources mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mockDrawable); mContextFixture.putResource(com.android.internal.R.string.RestrictedOnDataTitle, ""X""); spySst.setNotification(ServiceStateTracker.PS_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.class); verify(nm).notify(anyString(), anyInt(), notificationArgumentCaptor.capture()); android.app.Notification postedNotification = notificationArgumentCaptor.getValue(); assertTrue(notificationHasTitleSet(postedNotification)); spySst.setNotification(ServiceStateTracker.PS_DISABLED); verify(nm).cancel(anyString(), anyInt()); }",dcae64c99dbf151228357600c80b3090d4b79d11,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetPsNotifications() { sst.mSubId = 1; final android.app.NotificationManager nm = ((android.app.NotificationManager) (mContext.getSystemService(Context.NOTIFICATION_SERVICE))); mContextFixture.putBooleanResource(R.bool.config_user_notification_of_restrictied_mobile_access, true); doReturn(new android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.graphics.drawable.Drawable mockDrawable = mock(android.graphics.drawable.Drawable.class); android.content.res.Resources mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mockDrawable); mContextFixture.putResource(com.android.internal.R.string.RestrictedOnDataTitle, ""test1""); sst.setNotification(ServiceStateTracker.PS_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.class); verify(nm).notify(anyString(), anyInt(), notificationArgumentCaptor.capture()); android.app.Notification postedNotification = notificationArgumentCaptor.getValue(); assertTrue(notificationHasTitleSet(postedNotification)); assertEquals(""test1"", getNotificationTitle(postedNotification)); sst.setNotification(ServiceStateTracker.PS_DISABLED); verify(nm).cancel(anyString(), anyInt()); }",189914f0ce500ca9d3d458b8b74a190dbe71a132,2018-04-02 17:12:48,6
644119,tests_telephonytests_src_com_android_internal_telephony_ServiceStateTrackerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetCsNotifications() { com.android.internal.telephony.ServiceStateTracker spySst = spy(sst); android.app.NotificationManager nm = mock(android.app.NotificationManager.class); doReturn(nm).when(mContext).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(R.bool.config_user_notification_of_restrictied_mobile_access, true); doReturn(new android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.graphics.drawable.Drawable mockDrawable = mock(android.graphics.drawable.Drawable.class); android.content.res.Resources mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mockDrawable); mContextFixture.putResource(com.android.internal.R.string.RestrictedOnAllVoiceTitle, ""X""); spySst.setNotification(ServiceStateTracker.CS_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.class); verify(nm).notify(anyString(), anyInt(), notificationArgumentCaptor.capture()); android.app.Notification postedNotification = notificationArgumentCaptor.getValue(); assertTrue(notificationHasTitleSet(postedNotification)); spySst.setNotification(ServiceStateTracker.CS_DISABLED); verify(nm).cancel(anyString(), anyInt()); }",3072111619930ba4928b801dcfe2c0192ba23aa3,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetCsNotifications() { sst.mSubId = 1; final android.app.NotificationManager nm = ((android.app.NotificationManager) (mContext.getSystemService(Context.NOTIFICATION_SERVICE))); mContextFixture.putBooleanResource(R.bool.config_user_notification_of_restrictied_mobile_access, true); doReturn(new android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.graphics.drawable.Drawable mockDrawable = mock(android.graphics.drawable.Drawable.class); android.content.res.Resources mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mockDrawable); mContextFixture.putResource(com.android.internal.R.string.RestrictedOnAllVoiceTitle, ""test2""); sst.setNotification(ServiceStateTracker.CS_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.class); verify(nm).notify(anyString(), anyInt(), notificationArgumentCaptor.capture()); android.app.Notification postedNotification = notificationArgumentCaptor.getValue(); assertTrue(notificationHasTitleSet(postedNotification)); assertEquals(""test2"", getNotificationTitle(postedNotification)); sst.setNotification(ServiceStateTracker.CS_DISABLED); verify(nm).cancel(anyString(), anyInt()); }",4fffed38391a6eeb9d181c3263e26faab142995e,2018-04-02 17:12:48,6
644119,tests_telephonytests_src_com_android_internal_telephony_ServiceStateTrackerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetCsEmergencyNotifications() { com.android.internal.telephony.ServiceStateTracker spySst = spy(sst); android.app.NotificationManager nm = mock(android.app.NotificationManager.class); doReturn(nm).when(mContext).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(R.bool.config_user_notification_of_restrictied_mobile_access, true); doReturn(new android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.graphics.drawable.Drawable mockDrawable = mock(android.graphics.drawable.Drawable.class); android.content.res.Resources mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mockDrawable); mContextFixture.putResource(com.android.internal.R.string.RestrictedOnEmergencyTitle, ""X""); spySst.setNotification(ServiceStateTracker.CS_EMERGENCY_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.class); verify(nm).notify(anyString(), anyInt(), notificationArgumentCaptor.capture()); android.app.Notification postedNotification = notificationArgumentCaptor.getValue(); assertTrue(notificationHasTitleSet(postedNotification)); spySst.setNotification(ServiceStateTracker.CS_DISABLED); verify(nm).cancel(anyString(), anyInt()); spySst.setNotification(ServiceStateTracker.CS_REJECT_CAUSE_ENABLED); }",95c307c7636d7205e7ad93da4377ccf1fe2536e0,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetCsEmergencyNotifications() { sst.mSubId = 1; final android.app.NotificationManager nm = ((android.app.NotificationManager) (mContext.getSystemService(Context.NOTIFICATION_SERVICE))); mContextFixture.putBooleanResource(R.bool.config_user_notification_of_restrictied_mobile_access, true); doReturn(new android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.graphics.drawable.Drawable mockDrawable = mock(android.graphics.drawable.Drawable.class); android.content.res.Resources mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mockDrawable); mContextFixture.putResource(com.android.internal.R.string.RestrictedOnEmergencyTitle, ""test4""); sst.setNotification(ServiceStateTracker.CS_EMERGENCY_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.class); verify(nm).notify(anyString(), anyInt(), notificationArgumentCaptor.capture()); android.app.Notification postedNotification = notificationArgumentCaptor.getValue(); assertTrue(notificationHasTitleSet(postedNotification)); assertEquals(""test4"", getNotificationTitle(postedNotification)); sst.setNotification(ServiceStateTracker.CS_DISABLED); verify(nm).cancel(anyString(), anyInt()); sst.setNotification(ServiceStateTracker.CS_REJECT_CAUSE_ENABLED); }",b47b36267e64a96f960064c30efac060d5507f25,2018-04-02 17:12:48,6
644119,tests_telephonytests_src_com_android_internal_telephony_ServiceStateTrackerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetCsNormalNotifications() { com.android.internal.telephony.ServiceStateTracker spySst = spy(sst); android.app.NotificationManager nm = mock(android.app.NotificationManager.class); doReturn(nm).when(mContext).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(R.bool.config_user_notification_of_restrictied_mobile_access, true); doReturn(new android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.graphics.drawable.Drawable mockDrawable = mock(android.graphics.drawable.Drawable.class); android.content.res.Resources mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mockDrawable); mContextFixture.putResource(com.android.internal.R.string.RestrictedOnNormalTitle, ""X""); spySst.setNotification(ServiceStateTracker.CS_NORMAL_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.class); verify(nm).notify(anyString(), anyInt(), notificationArgumentCaptor.capture()); android.app.Notification postedNotification = notificationArgumentCaptor.getValue(); assertTrue(notificationHasTitleSet(postedNotification)); spySst.setNotification(ServiceStateTracker.CS_DISABLED); verify(nm).cancel(anyString(), anyInt()); }",4af35fb581a5712a55c2af8c98778375c45d63d8,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetCsNormalNotifications() { sst.mSubId = 1; final android.app.NotificationManager nm = ((android.app.NotificationManager) (mContext.getSystemService(Context.NOTIFICATION_SERVICE))); mContextFixture.putBooleanResource(R.bool.config_user_notification_of_restrictied_mobile_access, true); doReturn(new android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.graphics.drawable.Drawable mockDrawable = mock(android.graphics.drawable.Drawable.class); android.content.res.Resources mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mockDrawable); mContextFixture.putResource(com.android.internal.R.string.RestrictedOnNormalTitle, ""test3""); sst.setNotification(ServiceStateTracker.CS_NORMAL_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.class); verify(nm).notify(anyString(), anyInt(), notificationArgumentCaptor.capture()); android.app.Notification postedNotification = notificationArgumentCaptor.getValue(); assertTrue(notificationHasTitleSet(postedNotification)); assertEquals(""test3"", getNotificationTitle(postedNotification)); sst.setNotification(ServiceStateTracker.CS_DISABLED); verify(nm).cancel(anyString(), anyInt()); }",c2bbf1d9cc0bc279b75d2afc024e5dc1e758cd01,2018-04-02 17:12:48,6
650339,tests_tests_net_src_android_net_cts_ConnectivityManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void waitForActiveNetworkMetered(boolean metered) throws java.lang.Exception { final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1); final android.net.ConnectivityManager.NetworkCallback networkCallback = new android.net.ConnectivityManager.NetworkCallback() { @java.lang.Override public void onCapabilitiesChanged(android.net.Network network, android.net.NetworkCapabilities nc) { if ((nc.hasCapability(NetworkCapabilities.NET_CAPABILITY_NOT_METERED)) != metered) { latch.countDown(); } } }; mCm.registerDefaultNetworkCallback(networkCallback); if (!(latch.await(android.net.cts.ConnectivityManagerTest.NETWORK_CHANGE_METEREDNESS_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS))) { fail((((""Timed out waiting for active network metered status to change to "" + metered) + "" ; networkInfo = "") + (mCm.getActiveNetwork()))); } mCm.unregisterNetworkCallback(networkCallback); }",cfb1bbe4c1753bc6790022ed5e3f75966ec9079d,"private void waitForActiveNetworkMetered(boolean requestedMeteredness) throws java.lang.Exception { final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1); final android.net.ConnectivityManager.NetworkCallback networkCallback = new android.net.ConnectivityManager.NetworkCallback() { @java.lang.Override public void onCapabilitiesChanged(android.net.Network network, android.net.NetworkCapabilities nc) { final boolean metered = !(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED)); if (metered == requestedMeteredness) { latch.countDown(); } } }; mCm.registerDefaultNetworkCallback(networkCallback); if (!(latch.await(android.net.cts.ConnectivityManagerTest.NETWORK_CHANGE_METEREDNESS_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS))) { fail((((""Timed out waiting for active network metered status to change to "" + requestedMeteredness) + "" ; network = "") + (mCm.getActiveNetwork()))); } mCm.unregisterNetworkCallback(networkCallback); }",a76476546fe38776913251b3c2ff1e5238307287,2018-04-03 09:16:06,8
650339,tests_tests_net_src_android_net_cts_ConnectivityManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onCapabilitiesChanged(android.net.Network network, android.net.NetworkCapabilities nc) { if ((nc.hasCapability(NetworkCapabilities.NET_CAPABILITY_NOT_METERED)) != metered) { latch.countDown(); } }",2af5fdf9a262d0cff1ed5459ee77d10a7fb3c8b1,"@java.lang.Override public void onCapabilitiesChanged(android.net.Network network, android.net.NetworkCapabilities nc) { final boolean metered = !(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED)); if (metered == requestedMeteredness) { latch.countDown(); } }",560f6b6401d730f3f6a27b3584511b6b8a5027e7,2018-04-03 09:16:06,8
650339,tests_tests_net_src_android_net_cts_ConnectivityManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String getWifiMeteredStatus(java.lang.String ssid) throws java.lang.Exception { final java.lang.String command = ""cmd netpolicy list wifi-networks""; final java.lang.String policyString = runShellCommand(mInstrumentation, command); final java.util.regex.Matcher m = java.util.regex.Pattern.compile(((""^"" + ssid) + "";(true|false|none)$""), ((java.util.regex.Pattern.MULTILINE) | (java.util.regex.Pattern.UNIX_LINES))).matcher(policyString); if (!(m.find())) { throw new java.lang.RuntimeException(""Unexpected format from cmd netpolicy""); } return m.group(1); }",9eb28677a82bf6860cb31e8d3a07887bb5a8eef4,"private java.lang.String getWifiMeteredStatus(java.lang.String ssid) throws java.lang.Exception { final java.lang.String command = ""cmd netpolicy list wifi-networks""; final java.lang.String policyString = runShellCommand(mInstrumentation, command); final java.util.regex.Matcher m = java.util.regex.Pattern.compile(((""^"" + ssid) + "";(true|false|none)$""), ((java.util.regex.Pattern.MULTILINE) | (java.util.regex.Pattern.UNIX_LINES))).matcher(policyString); if (!(m.find())) { fail(""Unexpected format from cmd netpolicy""); } return m.group(1); }",4800b7cba8034752d448442d30c86c41964a820e,2018-04-03 09:16:06,8
652908,test_681-checker-abs_src_Main.java,"public static void main(java.lang.String[] args) { Main.expectEquals(10, Main.abs1((-10))); Main.expectEquals(20, Main.abs1(20)); Main.expectEquals(10, Main.abs2((-10))); Main.expectEquals(20, Main.abs2(20)); Main.expectEquals(10, Main.abs3((-10))); Main.expectEquals(20, Main.abs3(20)); Main.expectEquals(10, Main.abs4((-10))); Main.expectEquals(20, Main.abs4(20)); Main.expectEquals(10, Main.abs4(((short) (-10)))); Main.expectEquals(20, Main.abs4(((short) (20)))); Main.expectEquals(10, Main.abs6(((byte) (-10)))); Main.expectEquals(20, Main.abs6(((byte) (20)))); Main.expectEquals(10L, Main.abs7((-10L))); Main.expectEquals(20L, Main.abs7(20L)); java.lang.System.out.println(""passed""); }",8f57da55ff36b0cc93b86a42071bdbcecf054b47,"public static void main(java.lang.String[] args) { Main.expectEquals(10, Main.absI((-10))); Main.expectEquals(20, Main.absI(20)); Main.expectEquals(10L, Main.absL((-10L))); Main.expectEquals(20L, Main.absL(20L)); Main.expectEquals(10, Main.abs1((-10))); Main.expectEquals(20, Main.abs1(20)); Main.expectEquals(10, Main.abs2((-10))); Main.expectEquals(20, Main.abs2(20)); Main.expectEquals(10, Main.abs3((-10))); Main.expectEquals(20, Main.abs3(20)); Main.expectEquals(10, Main.abs4((-10))); Main.expectEquals(20, Main.abs4(20)); Main.expectEquals(10, Main.abs4(((short) (-10)))); Main.expectEquals(20, Main.abs4(((short) (20)))); Main.expectEquals(10, Main.abs6(((byte) (-10)))); Main.expectEquals(20, Main.abs6(((byte) (20)))); Main.expectEquals(10L, Main.abs7((-10L))); Main.expectEquals(20L, Main.abs7(20L)); Main.expectEquals(1, Main.zabs1(((byte) (1)))); Main.expectEquals(255, Main.zabs1(((byte) (-1)))); Main.expectEquals(1, Main.zabs2(((short) (1)))); Main.expectEquals(65535, Main.zabs2(((short) (-1)))); java.lang.System.out.println(""passed""); }",ab9404c41be957eb4382b1aebac102fcdec37431,"public static void main(java.lang.String[] args) { Main.expectEquals(10, Main.absI((-10))); Main.expectEquals(20, Main.absI(20)); Main.expectEquals(10L, Main.absL((-10L))); Main.expectEquals(20L, Main.absL(20L)); Main.expectEquals(10, Main.abs1((-10))); Main.expectEquals(20, Main.abs1(20)); Main.expectEquals(10, Main.abs2((-10))); Main.expectEquals(20, Main.abs2(20)); Main.expectEquals(10, Main.abs3((-10))); Main.expectEquals(20, Main.abs3(20)); Main.expectEquals(10, Main.abs4((-10))); Main.expectEquals(20, Main.abs4(20)); Main.expectEquals(10, Main.abs4(((short) (-10)))); Main.expectEquals(20, Main.abs4(((short) (20)))); Main.expectEquals(10, Main.abs6(((byte) (-10)))); Main.expectEquals(20, Main.abs6(((byte) (20)))); Main.expectEquals(10L, Main.abs7((-10L))); Main.expectEquals(20L, Main.abs7(20L)); Main.expectEquals(1, Main.zabs1(((byte) (1)))); Main.expectEquals(255, Main.zabs1(((byte) (-1)))); Main.expectEquals(1, Main.zabs2(((short) (1)))); Main.expectEquals(65535, Main.zabs2(((short) (-1)))); Main.expectEquals(1, Main.zabs3(((char) (1)))); Main.expectEquals(65535, Main.zabs3(((char) (-1)))); java.lang.System.out.println(""passed""); }",3b0a32b522d2be61d598b242d26547362c358c74,2018-04-03 15:59:53,2
626626,src_java_com_android_internal_telephony_PhoneSubInfoController.java,"public void setCarrierInfoForImsiEncryption(int subId, java.lang.String callingPackage, android.telephony.ImsiEncryptionInfo imsiEncryptionInfo) { com.android.internal.telephony.Phone phone = getPhone(subId); if (phone != null) { if (!(com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState(mContext, callingPackage, ""setCarrierInfoForImsiEncryption""))) { return; } phone.setCarrierInfoForImsiEncryption(imsiEncryptionInfo); } else { loge((""setCarrierInfoForImsiEncryption phone is null for Subscription:"" + subId)); return; } }",9328b6dbd7e37dd6e5b5f4bbb50d7810e606e605,"public void setCarrierInfoForImsiEncryption(int subId, java.lang.String callingPackage, android.telephony.ImsiEncryptionInfo imsiEncryptionInfo) { com.android.internal.telephony.Phone phone = getPhone(subId); if (phone != null) { enforceModifyPermission(); phone.setCarrierInfoForImsiEncryption(imsiEncryptionInfo); } else { loge((""setCarrierInfoForImsiEncryption phone is null for Subscription:"" + subId)); return; } }",6a1ab87cba24f07e038a28a5188bc584f2170781,"public void setCarrierInfoForImsiEncryption(int subId, java.lang.String callingPackage, android.telephony.ImsiEncryptionInfo imsiEncryptionInfo) { com.android.internal.telephony.Phone phone = getPhone(subId); if (phone != null) { if (!(com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState(mContext, subId, callingPackage, ""setCarrierInfoForImsiEncryption""))) { return; } enforceModifyPermission(); phone.setCarrierInfoForImsiEncryption(imsiEncryptionInfo); } else { loge((""setCarrierInfoForImsiEncryption phone is null for Subscription:"" + subId)); return; } }",d7493bca16ad6a1c180bd77ca8a40ea6dcc69137,2018-04-03 16:05:51,4
626626,src_java_com_android_internal_telephony_PhoneSubInfoController.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void enforceModifyPermission() { mContext.enforceCallingOrSelfPermission(com.android.internal.telephony.MODIFY_PHONE_STATE, ""Requires MODIFY_PHONE_STATE""); }",287bd873a04a904b616519d03eb386c060f980a5,"private void enforceModifyPermission() { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MODIFY_PHONE_STATE, ""Requires MODIFY_PHONE_STATE""); }",8b6ee10bb56c2f71d2cf4835b28699dd22883b54,2018-04-03 16:05:51,4
655066,services_net_java_android_net_dns_ResolvUtil.java,,,"public static java.net.InetAddress[] blockingResolveAllLocally(android.net.Network network, java.lang.String name) throws java.net.UnknownHostException { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_family = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; final android.net.Network networkForResolv = android.net.dns.ResolvUtil.getNetworkWithUseLocalNameserversFlag(network); try { return Libcore.os.android_getaddrinfo(name, hints, ((int) (networkForResolv.netId))); } catch (android.system.GaiException gai) { gai.rethrowAsUnknownHostException(""TLS-bypass resolution failed""); return null; } }",eba6ac9a2fb5244a4fecece30c29031d53a87119,"public static java.net.InetAddress[] blockingResolveAllLocally(android.net.Network network, java.lang.String name) throws java.net.UnknownHostException { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_family = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; final android.net.Network networkForResolv = android.net.dns.ResolvUtil.getNetworkWithUseLocalNameserversFlag(network); try { return Libcore.os.android_getaddrinfo(name, hints, ((int) (networkForResolv.netId))); } catch (android.system.GaiException gai) { gai.rethrowAsUnknownHostException((name + "": TLS-bypass resolution failed"")); return null; } }",7cf62d42a1f0890ca099bcbccbf8897fd2b3cb27,2018-04-03 19:56:17,3
656180,telephony_java_android_telephony_TelephonyManager.java,"public android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int keyType) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) { throw new java.lang.RuntimeException(""IMSI error: Subscriber Info is null""); } int subId = getSubId(android.telephony.SubscriptionManager.getDefaultDataSubscriptionId()); if ((keyType != (android.telephony.TelephonyManager.KEY_TYPE_EPDG)) && (keyType != (android.telephony.TelephonyManager.KEY_TYPE_WLAN))) { throw new java.lang.IllegalArgumentException(""IMSI error: Invalid key type""); } android.telephony.ImsiEncryptionInfo imsiEncryptionInfo = info.getCarrierInfoForImsiEncryption(subId, keyType, mContext.getOpPackageName()); if ((imsiEncryptionInfo == null) && (isImsiEncryptionRequired(subId, keyType))) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ""IMSI error: key is required but not found""); throw new java.lang.RuntimeException(""IMSI error: key is required but not found""); } return imsiEncryptionInfo; } catch (android.os.RemoteException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, (""getCarrierInfoForImsiEncryption RemoteException"" + ex)); throw new java.lang.RuntimeException(""IMSI error: Remote Exception""); } catch (java.lang.NullPointerException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, (""getCarrierInfoForImsiEncryption NullPointerException"" + ex)); throw new java.lang.RuntimeException(""IMSI error: Null Pointer exception""); } }",a9ce5c859e853ec5c767df7c66fd84b35b1d5e1c,"public android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int keyType) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) { throw new java.lang.RuntimeException(""IMSI error: Subscriber Info is null""); } int subId = getSubId(android.telephony.SubscriptionManager.getDefaultDataSubscriptionId()); if ((keyType != (android.telephony.TelephonyManager.KEY_TYPE_EPDG)) && (keyType != (android.telephony.TelephonyManager.KEY_TYPE_WLAN))) { throw new java.lang.IllegalArgumentException(""IMSI error: Invalid key type""); } android.telephony.ImsiEncryptionInfo imsiEncryptionInfo = info.getCarrierInfoForImsiEncryption(subId, keyType, mContext.getOpPackageName()); if ((imsiEncryptionInfo == null) && (isImsiEncryptionRequired(subId, keyType))) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ""IMSI error: key is required but not found""); throw new java.lang.RuntimeException(""IMSI error: key is required but not found""); } return imsiEncryptionInfo; } catch (android.os.RemoteException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, (""getCarrierInfoForImsiEncryption RemoteException"" + ex)); } catch (java.lang.NullPointerException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, (""getCarrierInfoForImsiEncryption NullPointerException"" + ex)); } return null; }",4c6f54e3239ab76a746bf74c31306782d78e6889,"public android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int keyType) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ""IMSI error: Subscriber Info is null""); return null; } int subId = getSubId(android.telephony.SubscriptionManager.getDefaultDataSubscriptionId()); if ((keyType != (android.telephony.TelephonyManager.KEY_TYPE_EPDG)) && (keyType != (android.telephony.TelephonyManager.KEY_TYPE_WLAN))) { throw new java.lang.IllegalArgumentException(""IMSI error: Invalid key type""); } android.telephony.ImsiEncryptionInfo imsiEncryptionInfo = info.getCarrierInfoForImsiEncryption(subId, keyType, mContext.getOpPackageName()); if ((imsiEncryptionInfo == null) && (isImsiEncryptionRequired(subId, keyType))) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ""IMSI error: key is required but not found""); throw new java.lang.IllegalArgumentException(""IMSI error: key is required but not found""); } return imsiEncryptionInfo; } catch (android.os.RemoteException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, (""getCarrierInfoForImsiEncryption RemoteException"" + ex)); } catch (java.lang.NullPointerException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, (""getCarrierInfoForImsiEncryption NullPointerException"" + ex)); } return null; }",4ed5aa8b81b07fb667599de9a5d0c8b2e1d43520,2018-04-04 03:17:37,2
654680,apps_CtsVerifier_src_com_android_cts_verifier_voicemail_VoicemailSettingsCheckActivity.java,"@java.lang.Override protected void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); android.view.View view = getLayoutInflater().inflate(R.layout.voicemail_hide_ringtone_settings, null); setContentView(view); setInfoResources(R.string.ringtone_settings_check_test, R.string.ringtone_settings_check_instructions, (-1)); setPassFailButtonClickListeners(); getPassButton().setEnabled(false); findViewById(R.id.open_voicemail_settings).setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { startActivity(new android.content.Intent(android.telephony.TelephonyManager.ACTION_CONFIGURE_VOICEMAIL).putExtra(TelephonyManager.EXTRA_HIDE_PUBLIC_SETTINGS, true)); } }); findViewById(R.id.settings_hidden).setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { getPassButton().setEnabled(true); setTestResultAndFinish(true); } }); findViewById(R.id.settings_not_hidden).setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { setTestResultAndFinish(false); } }); }",3f4a36ceb1f3cf7c90572ee372af7c3ece29eb19,"@java.lang.Override protected void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); android.view.View view = getLayoutInflater().inflate(R.layout.voicemail_hide_ringtone_settings, null); setContentView(view); setInfoResources(R.string.ringtone_settings_check_test, R.string.ringtone_settings_check_instructions, (-1)); setPassFailButtonClickListeners(); getPassButton().setEnabled(false); mNotApplicableButton = findViewById(R.id.voicemail_hide_ringtone_settings_not_applicable); mOpenVoiceMailSettingsButton = findViewById(R.id.open_voicemail_settings); mRingtoneSettingsDesNotExistButton = findViewById(R.id.settings_hidden); mRingtoneSettingsExistsButton = findViewById(R.id.settings_not_hidden); mRestoreDefaultDialerImage = findViewById(R.id.restore_default_dialer_image); mNotApplicableButton.setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { getPassButton().setEnabled(true); mOpenVoiceMailSettingsButton.setEnabled(false); mRingtoneSettingsDesNotExistButton.setEnabled(false); mRingtoneSettingsExistsButton.setEnabled(false); mRestoreDefaultDialerImage.setImageDrawable(getDrawable(R.drawable.fs_warning)); } }); mOpenVoiceMailSettingsButton.setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { startActivity(new android.content.Intent(android.telephony.TelephonyManager.ACTION_CONFIGURE_VOICEMAIL).putExtra(TelephonyManager.EXTRA_HIDE_PUBLIC_SETTINGS, true)); } }); mRingtoneSettingsDesNotExistButton.setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { getPassButton().setEnabled(true); setTestResultAndFinish(true); } }); mRingtoneSettingsExistsButton.setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { setTestResultAndFinish(false); } }); }",fafcb8acdcb5fa083dfa90d2c1543181e3e03881,"@java.lang.Override protected void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); android.view.View view = getLayoutInflater().inflate(R.layout.voicemail_hide_ringtone_settings, null); setContentView(view); setInfoResources(R.string.ringtone_settings_check_test, R.string.ringtone_settings_check_instructions, (-1)); setPassFailButtonClickListeners(); getPassButton().setEnabled(false); mNotApplicableButton = findViewById(R.id.voicemail_hide_ringtone_settings_not_applicable); mOpenVoiceMailSettingsButton = findViewById(R.id.open_voicemail_settings); mRingtoneSettingsDoesNotExistButton = findViewById(R.id.settings_hidden); mRingtoneSettingsExistsButton = findViewById(R.id.settings_not_hidden); mRestoreDefaultDialerImage = findViewById(R.id.restore_default_dialer_image); mNotApplicableButton.setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { getPassButton().setEnabled(true); mOpenVoiceMailSettingsButton.setEnabled(false); mRingtoneSettingsDoesNotExistButton.setEnabled(false); mRingtoneSettingsExistsButton.setEnabled(false); mRestoreDefaultDialerImage.setImageDrawable(getDrawable(R.drawable.fs_warning)); } }); mOpenVoiceMailSettingsButton.setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { startActivity(new android.content.Intent(android.telephony.TelephonyManager.ACTION_CONFIGURE_VOICEMAIL).putExtra(TelephonyManager.EXTRA_HIDE_PUBLIC_SETTINGS, true)); } }); mRingtoneSettingsDoesNotExistButton.setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { getPassButton().setEnabled(true); setTestResultAndFinish(true); } }); mRingtoneSettingsExistsButton.setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { setTestResultAndFinish(false); } }); }",6dc044da7bc1e02c3592815938a8f7dbb28f2f79,2018-04-04 05:25:14,3
654680,apps_CtsVerifier_src_com_android_cts_verifier_voicemail_VoicemailSettingsCheckActivity.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onClick(android.view.View v) { getPassButton().setEnabled(true); mOpenVoiceMailSettingsButton.setEnabled(false); mRingtoneSettingsDesNotExistButton.setEnabled(false); mRingtoneSettingsExistsButton.setEnabled(false); mRestoreDefaultDialerImage.setImageDrawable(getDrawable(R.drawable.fs_warning)); },5c7ee6abec1657916100e0f971cd939f472e7bfb,@java.lang.Override public void onClick(android.view.View v) { getPassButton().setEnabled(true); mOpenVoiceMailSettingsButton.setEnabled(false); mRingtoneSettingsDoesNotExistButton.setEnabled(false); mRingtoneSettingsExistsButton.setEnabled(false); mRestoreDefaultDialerImage.setImageDrawable(getDrawable(R.drawable.fs_warning)); },3b3b4eddca535fe851cbce96369c375f56e90170,2018-04-04 05:25:14,3
654960,tests_net_java_android_net_IpSecManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testMockedSocketCreationForced() throws java.lang.Exception { java.net.Socket mockSocket = mock(java.net.Socket.class); android.net.IpSecConfig dummyConfig = new android.net.IpSecConfig(); android.net.IpSecTransform dummyTransform = new android.net.IpSecTransform(null, dummyConfig); when(mockSocket.getFileDescriptor$()).thenReturn(java.io.FileDescriptor.in); mIpSecManager.applyTransportModeTransform(mockSocket, IpSecManager.DIRECTION_IN, dummyTransform); verify(mockSocket, times(1)).getSoLinger(); }",5f86f8fb4957509022a1cfd4602dd21955569550,@org.junit.Test public void testRemoveTransportModeTransformsForcesSocketCreation() throws java.lang.Exception { java.net.Socket socket = new java.net.Socket(); mIpSecManager.removeTransportModeTransforms(socket); assertNotNull(socket.getFileDescriptor$()); },2c6992e17c8a7714f139da1b8c996a9e2ae879cc,2018-04-04 17:14:44,2
650642,src_main_java_com_android_apksig_SigningCertificateLineage.java,"private static com.android.apksig.SigningCertificateLineage read(java.nio.ByteBuffer inputByteBuffer, int version) throws java.io.IOException { switch (version) { case com.android.apksig.SigningCertificateLineage.FIRST_VERSION : try { java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> nodes = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.readSigningCertificateLineage(getLengthPrefixedSlice(inputByteBuffer)); int minSdkVersion = com.android.apksig.SigningCertificateLineage.calculateMinSdkVersion(nodes); return new com.android.apksig.SigningCertificateLineage(minSdkVersion, nodes); } catch (com.android.apksig.apk.ApkFormatException e) { throw new java.io.IOException((""Unable to read list of signing certificate nodes in "" + ""SigningCertificateLineage""), e); } default : throw new java.lang.IllegalArgumentException(""Improper SigningCertificateLineage format: unrecognized version.""); } }",e9933fe57447f54833b93eeb171a3eb228f93550,"private static com.android.apksig.SigningCertificateLineage read(java.nio.ByteBuffer inputByteBuffer, int version) throws java.io.IOException { switch (version) { case com.android.apksig.SigningCertificateLineage.FIRST_VERSION : try { java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> nodes = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.readSigningCertificateLineage(getLengthPrefixedSlice(inputByteBuffer)); int minSdkVersion = com.android.apksig.SigningCertificateLineage.calculateMinSdkVersion(nodes); com.android.apksig.SigningCertificateLineage.checkUniqueSigningCertificates(nodes); return new com.android.apksig.SigningCertificateLineage(minSdkVersion, nodes); } catch (com.android.apksig.apk.ApkFormatException | java.security.cert.CertificateEncodingException e) { throw new java.io.IOException((""Unable to read list of signing certificate nodes in "" + ""SigningCertificateLineage""), e); } default : throw new java.lang.IllegalArgumentException(""Improper SigningCertificateLineage format: unrecognized version.""); } }",ec1dff125ed13ad60f7fa29cf6c3f91cf958e2ee,"private static com.android.apksig.SigningCertificateLineage read(java.nio.ByteBuffer inputByteBuffer, int version) throws java.io.IOException { switch (version) { case com.android.apksig.SigningCertificateLineage.FIRST_VERSION : try { java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> nodes = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.readSigningCertificateLineage(getLengthPrefixedSlice(inputByteBuffer)); int minSdkVersion = com.android.apksig.SigningCertificateLineage.calculateMinSdkVersion(nodes); return new com.android.apksig.SigningCertificateLineage(minSdkVersion, nodes); } catch (com.android.apksig.apk.ApkFormatException e) { throw new java.io.IOException((""Unable to read list of signing certificate nodes in "" + ""SigningCertificateLineage""), e); } default : throw new java.lang.IllegalArgumentException(""Improper SigningCertificateLineage format: unrecognized version.""); } }",e9933fe57447f54833b93eeb171a3eb228f93550,2018-04-04 20:31:00,2
650642,src_main_java_com_android_apksig_SigningCertificateLineage.java,"public java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> sortSignerConfigs(java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> signerConfigs) { if (signerConfigs == null) { throw new java.lang.NullPointerException(""signerConfigs == null""); } java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> sortedSignerConfigs = new java.util.ArrayList(signerConfigs.size()); for (int i = 0; i < (mSigningLineage.size()); i++) { for (int j = 0; j < (signerConfigs.size()); j++) { com.android.apksig.DefaultApkSignerEngine.SignerConfig config = signerConfigs.get(j); if (mSigningLineage.get(i).signingCert.equals(config.getCertificates().get(0))) { sortedSignerConfigs.add(config); break; } } } if ((sortedSignerConfigs.size()) != (signerConfigs.size())) { throw new java.lang.IllegalArgumentException((""SignerConfigs supplied which are not present in the"" + "" SigningCertificateLineage"")); } return sortedSignerConfigs; }",f9d5c29d2b7350f1ff75a068baff861a8371b479,"public java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> sortSignerConfigs(java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> signerConfigs) { if (signerConfigs == null) { throw new java.lang.NullPointerException(""signerConfigs == null""); } java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> sortedSignerConfigs = new java.util.ArrayList(signerConfigs.size()); for (int i = 0; i < (mSigningLineage.size()); i++) { for (int j = 0; j < (signerConfigs.size()); j++) { com.android.apksig.DefaultApkSignerEngine.SignerConfig config = signerConfigs.get(j); if (mSigningLineage.get(i).signingCert.equals(config.getCertificates().get(0))) { sortedSignerConfigs.add(config); break; } } } if ((sortedSignerConfigs.size()) < (signerConfigs.size())) { throw new java.lang.IllegalArgumentException((""SignerConfigs supplied which are not present in the"" + "" SigningCertificateLineage"")); } else if ((sortedSignerConfigs.size()) > (signerConfigs.size())) { throw new java.lang.IllegalArgumentException((""At least one SignerConfig is repeated in the "" + ""provided SigningCertificateLineage. Every entry must be unique."")); } return sortedSignerConfigs; }",5778d1f6bb424889dbc6c68f4af8eb32ac421e92,"public java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> sortSignerConfigs(java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> signerConfigs) { if (signerConfigs == null) { throw new java.lang.NullPointerException(""signerConfigs == null""); } java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> sortedSignerConfigs = new java.util.ArrayList(signerConfigs.size()); for (int i = 0; i < (mSigningLineage.size()); i++) { for (int j = 0; j < (signerConfigs.size()); j++) { com.android.apksig.DefaultApkSignerEngine.SignerConfig config = signerConfigs.get(j); if (mSigningLineage.get(i).signingCert.equals(config.getCertificates().get(0))) { sortedSignerConfigs.add(config); break; } } } if ((sortedSignerConfigs.size()) != (signerConfigs.size())) { throw new java.lang.IllegalArgumentException((""SignerConfigs supplied which are not present in the"" + "" SigningCertificateLineage"")); } return sortedSignerConfigs; }",f9d5c29d2b7350f1ff75a068baff861a8371b479,2018-04-04 20:31:00,2
649475,src_com_android_bluetooth_btservice_ActiveDeviceManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void setHearingAidActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ((""setHeraingAidActiveDevice("" + device) + "")"")); } final com.android.bluetooth.hearingaid.HearingAidService hearingAidService = mFactory.getHearingAidService(); if (hearingAidService == null) { return; } hearingAidService.setActiveDevice(device); mHearingAidActiveDevice = device; }",28de60064ddcecf8123619ddd7cccefa3e6ad313,"private void setHearingAidActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ((""setHearingAidActiveDevice("" + device) + "")"")); } final com.android.bluetooth.hearingaid.HearingAidService hearingAidService = mFactory.getHearingAidService(); if (hearingAidService == null) { return; } if (!(hearingAidService.setActiveDevice(device))) { return; } mHearingAidActiveDevice = device; }",91adfe269e394d5c1085d41291b6ecddbcddf028,2018-04-04 21:42:16,8
651829,src_com_android_bluetooth_hearingaid_HearingAidService.java,"public void setActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""setActiveDevice:"" + device)); } if (device == null) { if ((mActiveDeviceHiSyncId) != (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID)) { reportActiveDevice(null); mActiveDeviceHiSyncId = android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID; } return; } java.lang.Long deviceHiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); if (deviceHiSyncId != (mActiveDeviceHiSyncId)) { reportActiveDevice(device); mActiveDeviceHiSyncId = deviceHiSyncId; } }",26589380b02ff0cf963a46bca3dc2ac36d25341e,"public boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""setActiveDevice:"" + device)); } synchronized(mStateMachines) { if (device == null) { if ((mActiveDeviceHiSyncId) != (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID)) { reportActiveDevice(null); mActiveDeviceHiSyncId = android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID; } return true; } if ((getConnectionState(device)) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""setActiveDevice("" + device) + ""): failed because device not connected"")); return false; } java.lang.Long deviceHiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); if (deviceHiSyncId != (mActiveDeviceHiSyncId)) { reportActiveDevice(device); mActiveDeviceHiSyncId = deviceHiSyncId; } } return true; }",9aa847f17a903fb535fee968ed779dbe0ee0282c,"public boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (""setActiveDevice:"" + device)); } synchronized(mStateMachines) { if (device == null) { if ((mActiveDeviceHiSyncId) != (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID)) { reportActiveDevice(null); mActiveDeviceHiSyncId = android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID; } return true; } if ((getConnectionState(device)) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""setActiveDevice("" + device) + ""): failed because device not connected"")); return false; } java.lang.Long deviceHiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); if (deviceHiSyncId != (mActiveDeviceHiSyncId)) { mActiveDeviceHiSyncId = deviceHiSyncId; reportActiveDevice(device); } } return true; }",5d29ccf480cdf2cd8280a8feb46e6bf7f48a4b20,2018-04-04 21:42:16,6
655159,src_main_java_com_android_vts_util_Pagination.java,,,public void setDefaultPageCount(int pageCount) { this.DEFAULT_PAGE_COUNT = pageCount; },f878a660631009cecb28b6c4a971370423950988,public int getMaxPages() { return this.maxPages; },23ab3cbfa6796c5d505615f1e68ef5d0590a8453,2018-04-04 23:45:13,2
655159,src_main_java_com_android_vts_util_Pagination.java,,,public int getPageCount() { return pageCount; },23915363351486d8fa6e6c855d2be05c23b3f52c,public java.lang.String getNextPageCountToken() { return this.nextPageCountToken; },e1da3de3bb5e4f966500b6776d6a49a610e7b096,2018-04-04 23:45:13,2
655279,tzlookup_generator_src_test_java_com_android_libcore_timezone_tzlookup_zonetree_ZoneOffsetPeriodTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testSplitLastPeriod() { com.ibm.icu.text.TimeZoneNames timeZoneNames = com.ibm.icu.text.TimeZoneNames.getInstance(ULocale.ENGLISH); com.ibm.icu.util.BasicTimeZone honoluluTz = ((com.ibm.icu.util.BasicTimeZone) (com.ibm.icu.util.TimeZone.getTimeZone(""Pacific/Honolulu""))); int honoluluRawOffset = -36000000; int honoluluDstOffset = 0; java.lang.String honoluluOldName = null; java.lang.String honoluluNewName = ""Hawaii-Aleutian Standard Time""; java.time.Instant startInstant = java.time.Instant.EPOCH; java.time.Instant endInstant = java.time.Instant.ofEpochSecond(631152000L); com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod honoluluPeriod = com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod.create(timeZoneNames, honoluluTz, startInstant, endInstant); java.time.Instant partitionInstant = java.time.Instant.ofEpochSecond(500000000L); com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod[] shards = com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod.splitAtTime(honoluluPeriod, timeZoneNames, honoluluTz, partitionInstant); assertEquals(startInstant, shards[0].getStartInstant()); assertEquals(partitionInstant, shards[0].getEndInstant()); assertEquals(honoluluRawOffset, shards[0].getRawOffsetMillis()); assertEquals(honoluluDstOffset, shards[0].getDstOffsetMillis()); assertEquals(honoluluOldName, shards[0].getName()); assertEquals(partitionInstant, shards[1].getStartInstant()); assertEquals(endInstant, shards[1].getEndInstant()); assertEquals(honoluluRawOffset, shards[1].getRawOffsetMillis()); assertEquals(honoluluDstOffset, shards[1].getDstOffsetMillis()); assertEquals(honoluluNewName, shards[1].getName()); }",12b60335d15d4ec9c5874dbbcaa34533a769b442,"@org.junit.Test public void testSplitAtTime() { com.ibm.icu.text.TimeZoneNames timeZoneNames = com.ibm.icu.text.TimeZoneNames.getInstance(ULocale.ENGLISH); com.ibm.icu.util.BasicTimeZone honoluluTz = ((com.ibm.icu.util.BasicTimeZone) (com.ibm.icu.util.TimeZone.getTimeZone(""Pacific/Honolulu""))); int honoluluRawOffset = -36000000; int honoluluDstOffset = 0; java.lang.String honoluluOldName = null; java.lang.String honoluluNewName = ""Hawaii-Aleutian Standard Time""; java.time.Instant startInstant = java.time.Instant.EPOCH; java.time.Instant endInstant = java.time.Instant.ofEpochSecond(631152000L); com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod honoluluPeriod = com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod.create(timeZoneNames, honoluluTz, startInstant, endInstant); java.time.Instant partitionInstant = java.time.Instant.ofEpochSecond(500000000L); com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod[] shards = com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod.splitAtTime(honoluluPeriod, timeZoneNames, honoluluTz, partitionInstant); assertEquals(startInstant, shards[0].getStartInstant()); assertEquals(partitionInstant, shards[0].getEndInstant()); assertEquals(honoluluRawOffset, shards[0].getRawOffsetMillis()); assertEquals(honoluluDstOffset, shards[0].getDstOffsetMillis()); assertEquals(honoluluOldName, shards[0].getName()); assertEquals(partitionInstant, shards[1].getStartInstant()); assertEquals(endInstant, shards[1].getEndInstant()); assertEquals(honoluluRawOffset, shards[1].getRawOffsetMillis()); assertEquals(honoluluDstOffset, shards[1].getDstOffsetMillis()); assertEquals(honoluluNewName, shards[1].getName()); }",7e42d9fe0d8f011f3f9cd96a8da8514abbe92dd3,2018-04-05 12:37:44,5
655279,tzlookup_generator_src_test_java_com_android_libcore_timezone_tzlookup_zonetree_CountryZoneTreeTest.java,"@org.junit.Test public void testCountryWithPriority() throws java.lang.Exception { java.lang.String countryText = "" isoCode:\""de\""\n"" + ((((((((("" defaultTimeZoneId:\""Europe/Berlin\""\n"" + "" timeZoneMappings:<\n"") + "" utcOffset:\""1:00\""\n"") + "" id:\""Europe/Berlin\""\n"") + "" priority: 10\n"") + "" >\n"") + "" timeZoneMappings:<\n"") + "" utcOffset:\""1:00\""\n"") + "" id:\""Europe/Busingen\""\n"") + "" >\n""); com.android.libcore.timezone.tzlookup.zonetree.Country country = com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTreeTest.parseCountry(countryText); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree zoneTree = com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.create(country, com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTreeTest.START_INSTANT, com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTreeTest.END_INSTANT); assertTrue(zoneTree.validateNoPriorityClashes().isEmpty()); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneUsage countryZoneUsage = zoneTree.calculateCountryZoneUsage(); assertNull(countryZoneUsage.getNotUsedAfterInstant(""Europe/Berlin"")); java.time.Instant expectedNotUsedAfterInstant = java.time.Instant.ofEpochSecond(354675600); assertEquals(expectedNotUsedAfterInstant, countryZoneUsage.getNotUsedAfterInstant(""Europe/Busingen"")); }",f0fce35cefe41d9a1c579f5a63d3364c0c8788f7,"@org.junit.Test public void testCountryWithPriority() throws java.lang.Exception { java.lang.String countryText = "" isoCode:\""de\""\n"" + ((((((((("" defaultTimeZoneId:\""Europe/Berlin\""\n"" + "" timeZoneMappings:<\n"") + "" utcOffset:\""1:00\""\n"") + "" id:\""Europe/Berlin\""\n"") + "" priority: 10\n"") + "" >\n"") + "" timeZoneMappings:<\n"") + "" utcOffset:\""1:00\""\n"") + "" id:\""Europe/Busingen\""\n"") + "" >\n""); com.android.libcore.timezone.tzlookup.zonetree.Country country = com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTreeTest.parseCountry(countryText); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree zoneTree = com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.create(country, com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTreeTest.RULES_START_INSTANT, com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTreeTest.RULES_END_INSTANT); assertTrue(zoneTree.validateNoPriorityClashes().isEmpty()); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneUsage countryZoneUsage = zoneTree.calculateCountryZoneUsage(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTreeTest.NOT_USED_AFTER_CUT_OFF); assertNull(countryZoneUsage.getNotUsedAfterInstant(""Europe/Berlin"")); java.time.Instant expectedNotUsedAfterInstant = java.time.Instant.ofEpochSecond(354675600); assertEquals(expectedNotUsedAfterInstant, countryZoneUsage.getNotUsedAfterInstant(""Europe/Busingen"")); }",d0cdc91d0235ad87299500f0a69f0897208cff61,"@org.junit.Test public void testCountryWithPriority() throws java.lang.Exception { java.lang.String countryText = "" isoCode:\""de\""\n"" + ((((((((("" defaultTimeZoneId:\""Europe/Berlin\""\n"" + "" timeZoneMappings:<\n"") + "" utcOffset:\""1:00\""\n"") + "" id:\""Europe/Berlin\""\n"") + "" priority: 10\n"") + "" >\n"") + "" timeZoneMappings:<\n"") + "" utcOffset:\""1:00\""\n"") + "" id:\""Europe/Busingen\""\n"") + "" >\n""); com.android.libcore.timezone.tzlookup.zonetree.Country country = com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTreeTest.parseCountry(countryText); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree zoneTree = com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.create(country, com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTreeTest.RULES_START_INSTANT, com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTreeTest.RULES_END_INSTANT); assertTrue(zoneTree.validateNoPriorityClashes().isEmpty()); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneUsage countryZoneUsage = zoneTree.calculateCountryZoneUsage(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTreeTest.NOT_USED_AFTER_CUT_OFF); assertNull(countryZoneUsage.getNotUsedAfterInstant(""Europe/Berlin"")); java.time.Instant expectedNotUsedAfterInstant = java.time.Instant.ofEpochSecond(338950800); assertEquals(expectedNotUsedAfterInstant, countryZoneUsage.getNotUsedAfterInstant(""Europe/Busingen"")); }",5819da39485cbfe8b6a113b3d133365275c6115c,2018-04-05 12:37:44,5
655279,tzlookup_generator_src_main_java_com_android_libcore_timezone_tzlookup_zonetree_CountryZoneTree.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static boolean wouldLikelyEqualIfSplit(com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod a, com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod b) { return ((a.getEndInstant().equals(b.getEndInstant())) && ((a.getDstOffsetMillis()) == (b.getDstOffsetMillis()))) && ((a.getRawOffsetMillis()) == (b.getRawOffsetMillis())); }",b38db42396da2f95aaa1ccf5dc8e1ec1f8959b18,"private static boolean isMatch(com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod a, com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod b) { return ((a.getEndInstant().equals(b.getEndInstant())) && ((a.getDstOffsetMillis()) == (b.getDstOffsetMillis()))) && ((a.getRawOffsetMillis()) == (b.getRawOffsetMillis())); }",be1558b8f13288aebf73c377945b2a11e060816e,2018-04-05 12:37:44,5
650064,services_core_java_com_android_server_connectivity_NetworkMonitor.java,"@java.lang.Override public java.net.InetAddress[] getAllByName(java.lang.String host) throws java.net.UnknownHostException { java.util.List<java.net.InetAddress> addrs = java.util.Arrays.asList(super.getAllByName(host)); java.util.LinkedHashMap<java.lang.Class, java.net.InetAddress> addressByFamily = new java.util.LinkedHashMap<>(); addressByFamily.put(addrs.get(0).getClass(), addrs.get(0)); java.util.Collections.shuffle(addrs); for (java.net.InetAddress addr : addrs) { addressByFamily.put(addr.getClass(), addr); } return addressByFamily.values().toArray(new java.net.InetAddress[addressByFamily.size()]); }",568b87c2f1e0923f7ddbc9bff107dd6824df79d8,"@java.lang.Override public java.net.InetAddress[] getAllByName(java.lang.String host) throws java.net.UnknownHostException { java.util.List<java.net.InetAddress> addrs = java.util.Arrays.asList((mUseLocalNameservers ? android.net.dns.ResolvUtil.blockingResolveAllLocally(this, host) : super.getAllByName(host))); java.util.LinkedHashMap<java.lang.Class, java.net.InetAddress> addressByFamily = new java.util.LinkedHashMap<>(); addressByFamily.put(addrs.get(0).getClass(), addrs.get(0)); java.util.Collections.shuffle(addrs); for (java.net.InetAddress addr : addrs) { addressByFamily.put(addr.getClass(), addr); } return addressByFamily.values().toArray(new java.net.InetAddress[addressByFamily.size()]); }",7f5d9d3629fb2d19550f13f8640aadbe6eb98833,"@java.lang.Override public java.net.InetAddress[] getAllByName(java.lang.String host) throws java.net.UnknownHostException { final java.util.List<java.net.InetAddress> addrs = java.util.Arrays.asList(android.net.dns.ResolvUtil.blockingResolveAllLocally(this, host)); java.util.LinkedHashMap<java.lang.Class, java.net.InetAddress> addressByFamily = new java.util.LinkedHashMap<>(); addressByFamily.put(addrs.get(0).getClass(), addrs.get(0)); java.util.Collections.shuffle(addrs); for (java.net.InetAddress addr : addrs) { addressByFamily.put(addr.getClass(), addr); } return addressByFamily.values().toArray(new java.net.InetAddress[addressByFamily.size()]); }",30dc714a560002faf76f617a0a8fa311404eb69e,2018-04-05 23:52:53,20
650064,services_core_java_com_android_server_connectivity_DnsManager.java,"public static com.android.server.connectivity.DnsManager.PrivateDnsConfig tryBlockingResolveOf(android.net.Network network, java.lang.String name) { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_family = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; try { final java.net.InetAddress[] ips = Libcore.os.android_getaddrinfo(name, hints, network.netId); if ((ips != null) && ((ips.length) > 0)) { return new com.android.server.connectivity.DnsManager.PrivateDnsConfig(name, ips); } } catch (android.system.GaiException ignored) { } return null; }",7c811e1d17fa3d093242b6980a983bb6126cd2c4,"public static com.android.server.connectivity.DnsManager.PrivateDnsConfig tryBlockingResolveOf(android.net.Network network, java.lang.String name) { try { final java.net.InetAddress[] ips = android.net.dns.ResolvUtil.blockingResolveAllLocally(network, name); return (ips != null) && ((ips.length) > 0) ? new com.android.server.connectivity.DnsManager.PrivateDnsConfig(name, ips) : null; } catch (java.net.UnknownHostException uhe) { return null; } }",891eb8c8d95305fefc9b0869bc45a5bc601e1d4d,"public static com.android.server.connectivity.DnsManager.PrivateDnsConfig tryBlockingResolveOf(android.net.Network network, java.lang.String name) { try { final java.net.InetAddress[] ips = android.net.dns.ResolvUtil.blockingResolveAllLocally(network, name); return new com.android.server.connectivity.DnsManager.PrivateDnsConfig(name, ips); } catch (java.net.UnknownHostException uhe) { return new com.android.server.connectivity.DnsManager.PrivateDnsConfig(name, null); } }",5e77df541c6c3f68db4079d1a3947520845bfed6,2018-04-05 23:52:53,20
650064,services_net_java_android_net_dns_ResolvUtil.java,,,"public static java.net.InetAddress[] blockingResolveAllLocally(android.net.Network network, java.lang.String name) throws java.net.UnknownHostException { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_family = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; final long netidForResolv = (NETID_USE_LOCAL_NAMESERVERS) | ((long) (network.netId)); try { return Libcore.os.android_getaddrinfo(name, hints, ((int) (netidForResolv))); } catch (android.system.GaiException gai) { gai.rethrowAsUnknownHostException(""TLS-bypass resolution failed""); return null; } }",7dac2dee6441fcf3ffd50b52ec9468c5df99e304,"public static java.net.InetAddress[] blockingResolveAllLocally(android.net.Network network, java.lang.String name) throws java.net.UnknownHostException { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_family = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; final android.net.Network networkForResolv = android.net.dns.ResolvUtil.getNetworkWithUseLocalNameserversFlag(network); try { return Libcore.os.android_getaddrinfo(name, hints, ((int) (networkForResolv.netId))); } catch (android.system.GaiException gai) { gai.rethrowAsUnknownHostException((name + "": TLS-bypass resolution failed"")); return null; } }",7cf62d42a1f0890ca099bcbccbf8897fd2b3cb27,2018-04-05 23:52:53,20
650064,services_net_java_android_net_dns_ResolvUtil.java,,,public static void setProcessUseLocalNameservers(android.net.Network network) { final long netidForResolv = (NETID_USE_LOCAL_NAMESERVERS) | ((long) (network.netId)); android.net.NetworkUtils.bindProcessToNetworkForHostResolution(((int) (netidForResolv))); },9545ec8de16ef691c94945a8956785905a7dc890,public static android.net.Network getNetworkWithUseLocalNameserversFlag(android.net.Network network) { final long netidForResolv = (android.net.dns.ResolvUtil.NETID_USE_LOCAL_NAMESERVERS) | ((long) (network.netId)); return new android.net.Network(((int) (netidForResolv))); },e6d09a26df42208369226c7a42655d606e2d72c8,2018-04-05 23:52:53,20
650064,services_core_java_com_android_server_connectivity_NetworkMonitor.java,@java.lang.Override public void exit() { android.net.TrafficStats.clearThreadStatsUid(); },7b7a236a5a111f8220ababd7530d040f39c0fa92,@java.lang.Override public void exit() { android.net.TrafficStats.clearThreadStatsUid(); mPrivateDnsBypass = true; },a918ae41c1e5727917300e4a52a0c45c5a215506,@java.lang.Override public void exit() { android.net.TrafficStats.clearThreadStatsUid(); },7b7a236a5a111f8220ababd7530d040f39c0fa92,2018-04-05 23:52:53,20
655799,system_image_uitests_app_src_androidTest_java_com_android_devtools_systemimage_uitest_smoke_SettingsTest.java,"public void enableSampleDeviceAdmin() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""Settings""); findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains(""Security"")).click(); if ((testFramework.getApi()) >= 24) { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains(""Device admin"").resourceId(Res.ANDROID_TITLE_RES)).click(); } else { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().text(""Device administrators"")).click(); } device.findObject(new android.support.test.uiautomator.UiSelector().text(""Sample Device Admin"")).click(); try { if ((testFramework.getApi()) >= 24) { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains(""Activate"")).click(); } else { device.findObject(new android.support.test.uiautomator.UiSelector().textMatches(""(?i)activate(?-i)"")).click(); } } catch (android.support.test.uiautomator.UiObjectNotFoundException e) { assertTrue(""Could not find device administration buttons."", new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws java.lang.Exception { return device.findObject(new android.support.test.uiautomator.UiSelector().text(""Cancel"")).exists(); } })); device.findObject(new android.support.test.uiautomator.UiSelector().text(""Cancel"")).click(); } device.pressHome(); }",7d68d3560779213c10c6b1f6347cad43b0bff3b9,"public void enableSampleDeviceAdmin() throws java.lang.Exception { if (isAPIDemoInstalled) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""Settings""); findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains(""Security"")).click(); if ((testFramework.getApi()) >= 24) { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains(""Device admin"").resourceId(Res.ANDROID_TITLE_RES)).click(); } else { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().text(""Device administrators"")).click(); } device.findObject(new android.support.test.uiautomator.UiSelector().text(""Sample Device Admin"")).click(); try { if ((testFramework.getApi()) >= 24) { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains(""Activate"")).click(); } else { device.findObject(new android.support.test.uiautomator.UiSelector().textMatches(""(?i)activate(?-i)"")).click(); } } catch (android.support.test.uiautomator.UiObjectNotFoundException e) { assertTrue(""Could not find device administration buttons."", new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws java.lang.Exception { return device.findObject(new android.support.test.uiautomator.UiSelector().text(""Cancel"")).exists(); } })); device.findObject(new android.support.test.uiautomator.UiSelector().text(""Cancel"")).click(); } device.pressHome(); } }",0cfcbb20423d2ab8d75602de973ed5067a0268e6,"public void enableSampleDeviceAdmin() throws java.lang.Exception { boolean isAPIDemoInstalled = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, ""com.example.android.apis""); if (isAPIDemoInstalled) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""Settings""); findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains(""Security"")).click(); if ((testFramework.getApi()) >= 24) { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains(""Device admin"").resourceId(Res.ANDROID_TITLE_RES)).click(); } else { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().text(""Device administrators"")).click(); } device.findObject(new android.support.test.uiautomator.UiSelector().text(""Sample Device Admin"")).click(); try { if ((testFramework.getApi()) >= 24) { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains(""Activate"")).click(); } else { device.findObject(new android.support.test.uiautomator.UiSelector().textMatches(""(?i)activate(?-i)"")).click(); } } catch (android.support.test.uiautomator.UiObjectNotFoundException e) { assertTrue(""Could not find device administration buttons."", new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws java.lang.Exception { return device.findObject(new android.support.test.uiautomator.UiSelector().text(""Cancel"")).exists(); } })); device.findObject(new android.support.test.uiautomator.UiSelector().text(""Cancel"")).click(); } device.pressHome(); } }",a8b261a6b4b1a12e94dc8cadffa29d7da521eafe,2018-04-06 00:47:40,4
655799,system_image_uitests_app_src_main_java_com_android_devtools_systemimage_uitest_utils_ApiDemosInstaller.java,,,"public static void installApp(android.app.Instrumentation instrumentation) throws java.lang.Exception { java.lang.String testPackageName = ""com.example.android.apis""; java.lang.String testPackageAPK32 = ""ApiDemos_x86.apk""; java.lang.String testPackageAPK64 = ""ApiDemos_x86_64.apk""; if ((Build.VERSION.SDK_INT) >= (Build.VERSION_CODES.O)) { java.lang.String apk = (android.text.TextUtils.join("", "", Build.SUPPORTED_ABIS).contains(""64"")) ? testPackageAPK64 : testPackageAPK32; boolean isAPIDemoInstalled = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, testPackageName); if (!isAPIDemoInstalled) com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.installApk(instrumentation, apk); } com.android.devtools.systemimage.uitest.utils.SettingsUtil.activate(instrumentation, ""Sample Device Admin""); }",ae2d7856c3afe84cbb5765316f336236d0ef0fa5,"@android.annotation.TargetApi(24) public static void installApp(android.app.Instrumentation instrumentation) throws java.lang.Exception { java.lang.String testPackageName = ""com.example.android.apis""; java.lang.String testPackageAPK32 = ""ApiDemos_x86.apk""; java.lang.String testPackageAPK64 = ""ApiDemos_x86_64.apk""; java.lang.String apk = (android.text.TextUtils.join("", "", Build.SUPPORTED_ABIS).contains(""64"")) ? testPackageAPK64 : testPackageAPK32; boolean isAPIDemoInstalled = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, testPackageName); if (!isAPIDemoInstalled) com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.installApk(instrumentation, apk); com.android.devtools.systemimage.uitest.utils.SettingsUtil.activate(instrumentation, ""Sample Device Admin""); }",d69a48970ad1c1638473a9b49b97239b5a0718d9,2018-04-06 00:47:40,4
655799,system_image_uitests_app_src_androidTest_java_com_android_devtools_systemimage_uitest_smoke_SettingsTest.java,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""T144630613"") public void activateDeactivatePolicy() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); if (checkStatusOfPolicy(instrumentation, ""Sample Device Admin"")) { com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, ""Sample Device Admin""); } assertFalse(checkStatusOfPolicy(instrumentation, ""Sample Device Admin"")); com.android.devtools.systemimage.uitest.utils.SettingsUtil.activate(instrumentation, ""Sample Device Admin""); assertTrue(checkStatusOfPolicy(instrumentation, ""Sample Device Admin"")); com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, ""Sample Device Admin""); assertFalse(checkStatusOfPolicy(instrumentation, ""Sample Device Admin"")); }",87ca77dc266c06b39df27a9766e33c93c38d941d,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""T144630613"") public void activateDeactivatePolicy() throws java.lang.Exception { if (isAPIDemoInstalled) { if (checkStatusOfPolicy()) { com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, ""Sample Device Admin""); } assertFalse(checkStatusOfPolicy()); com.android.devtools.systemimage.uitest.utils.SettingsUtil.activate(instrumentation, ""Sample Device Admin""); assertTrue(checkStatusOfPolicy()); com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, ""Sample Device Admin""); assertFalse(checkStatusOfPolicy()); } }",80f98173630a62b17ecec376dcdc09fdf14e7b62,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""T144630613"") public void activateDeactivatePolicy() throws java.lang.Exception { boolean isAPIDemoInstalled = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, ""com.example.android.apis""); if (isAPIDemoInstalled) { if (checkStatusOfPolicy()) { com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, ""Sample Device Admin""); } assertFalse(checkStatusOfPolicy()); com.android.devtools.systemimage.uitest.utils.SettingsUtil.activate(instrumentation, ""Sample Device Admin""); assertTrue(checkStatusOfPolicy()); com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, ""Sample Device Admin""); assertFalse(checkStatusOfPolicy()); } }",b79c73c3a201777acff0485e97bc8338337902b2,2018-04-06 00:47:40,4
656941,tools_upstream_src_main_java_libcore_Repository.java,"public static libcore.Repository openJdk9(java.nio.file.Path upstreamRoot, java.lang.String upstreamName) { java.util.List<java.lang.String> sourceDirs = java.util.Arrays.asList(""jdk/src/java.base/share/classes"", ""jdk/src/java.logging/share/classes"", ""jdk/src/java.prefs/share/classes"", ""jdk/src/java.sql/share/classes"", ""jdk/src/java.desktop/share/classes"", ""jdk/src/java.base/solaris/classes"", ""jdk/src/java.base/unix/classes"", ""jdk/src/java.prefs/unix/classes"", ""jdk/src/jdk.unsupported/share/classes"", ""jdk/src/jdk.net/share/classes"", ""jdk/src/java.base/linux/classes"", ""build/linux-x86_64-normal-server-release/support/gensrc/java.base""); return new libcore.Repository.OpenJdkRepository(upstreamRoot, upstreamName, sourceDirs); }",a7640ab82ca2df216622041baf3f352db58c85f5,"public static libcore.Repository openJdk9(java.nio.file.Path upstreamRoot, java.lang.String upstreamName) { java.util.Map<libcore.Repository.FileGroup, java.util.List<java.lang.String>> sourceDirs = new java.util.HashMap<>(); sourceDirs.put(libcore.Repository.FileGroup.JAVA, java.util.Arrays.asList(""jdk/src/java.base/share/classes"", ""jdk/src/java.logging/share/classes"", ""jdk/src/java.prefs/share/classes"", ""jdk/src/java.sql/share/classes"", ""jdk/src/java.desktop/share/classes"", ""jdk/src/java.base/solaris/classes"", ""jdk/src/java.base/unix/classes"", ""jdk/src/java.prefs/unix/classes"", ""jdk/src/jdk.unsupported/share/classes"", ""jdk/src/jdk.net/share/classes"", ""jdk/src/java.base/linux/classes"", ""build/linux-x86_64-normal-server-release/support/gensrc/java.base"")); sourceDirs.put(libcore.Repository.FileGroup.NATIVE, java.util.Arrays.asList(""jdk/src/java.base/unix/native/libjava"", ""jdk/src/java.base/share/native/libjava"")); return new libcore.Repository.OpenJdkRepository(upstreamRoot, upstreamName, sourceDirs); }",8f44f68f2605e4f1946b6c2b13cbe2ead6402ac8,"public static libcore.Repository openJdk9(java.nio.file.Path upstreamRoot, java.lang.String upstreamName) { java.util.List<java.lang.String> sourceDirs = java.util.Arrays.asList(""jdk/src/java.base/share/classes"", ""jdk/src/java.logging/share/classes"", ""jdk/src/java.prefs/share/classes"", ""jdk/src/java.sql/share/classes"", ""jdk/src/java.desktop/share/classes"", ""jdk/src/java.base/solaris/classes"", ""jdk/src/java.base/unix/classes"", ""jdk/src/java.prefs/unix/classes"", ""jdk/src/jdk.unsupported/share/classes"", ""jdk/src/jdk.net/share/classes"", ""jdk/src/java.base/linux/classes"", ""build/linux-x86_64-normal-server-release/support/gensrc/java.base"", ""jdk/src/java.base/unix/native/libjava"", ""jdk/src/java.base/share/native/libjava""); return new libcore.Repository.OpenJdkRepository(upstreamRoot, upstreamName, sourceDirs); }",3de61edfd1224e642eccfd5c4749b6282117048f,2018-04-06 15:17:40,6
656941,tools_upstream_src_main_java_libcore_CompareUpstreams.java,"public void run() throws java.io.IOException { java.util.List<java.nio.file.Path> relPaths = standardRepositories.ojluni().loadRelPathsFromMakefile(); run(java.lang.System.out, relPaths); }",3a380b18056d2548c854b3722d80df13f7f60568,"public void run() throws java.io.IOException { java.util.List<java.nio.file.Path> relPaths = standardRepositories.ojluni().loadRelPathsFromBlueprint(java.util.EnumSet.of(FileGroup.JAVA)); run(java.lang.System.out, relPaths); }",788383ac8902af159843ce3f94a4a49406b141f9,"public void run() throws java.io.IOException { java.util.List<java.nio.file.Path> relPaths = standardRepositories.ojluni().loadRelPathsFromBlueprint(); run(java.lang.System.out, relPaths); }",f83579f7c8ce16f2acedf4a64abcf114c006d65e,2018-04-06 15:17:40,6
656941,tools_upstream_src_main_java_libcore_Repository.java,"@java.lang.Override public java.nio.file.Path pathFromRepository(java.nio.file.Path relPath) { return java.nio.file.Paths.get(""ojluni/src/main/java"").resolve(relPath); }",40b5773205a0c995088e200d4bce3518802d1e05,"@java.lang.Override public java.nio.file.Path pathFromRepository(java.nio.file.Path relPath) { return java.nio.file.Paths.get(""ojluni/src/main"").resolve(relPath); }",0700c443d0f7b70941deae9cab4e02f1465e0c6d,@java.lang.Override public java.nio.file.Path pathFromRepository(java.nio.file.Path relPath) { return java.util.Objects.requireNonNull(super.pathFromRepository(relPath)); },cd74ab772e085f98ba58625629653cf17b01610f,2018-04-06 15:17:40,6
656941,tools_upstream_src_main_java_libcore_Repository.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.List<java.nio.file.Path> loadRelPathsFromBlueprint(java.util.Set<libcore.Repository.FileGroup> fileGroups) throws java.io.IOException { java.util.List<java.nio.file.Path> result = new java.util.ArrayList<>(); for (libcore.Repository.FileGroup fileGroup : fileGroups) { switch (fileGroup) { case JAVA : result.addAll(loadRelPathsFromBlueprint(libcore.Repository.FileGroup.JAVA, ""openjdk_java_files.bp"", ""\""ojluni/src/main/java/(.+\\.java)\"""")); break; case NATIVE : result.addAll(loadRelPathsFromBlueprint(libcore.Repository.FileGroup.NATIVE, ""ojluni/src/main/native/Android.bp"", ""\\s+\""(.+\\.(?:c|cpp))\"","")); break; default : throw new java.lang.IllegalArgumentException((""Unknown FileGroup: "" + fileGroup)); } } return result; }",207987636d8a42fb7c9fa5ca9d115b046ee051e6,"public java.util.List<java.nio.file.Path> loadRelPathsFromBlueprint() throws java.io.IOException { java.util.List<java.nio.file.Path> result = new java.util.ArrayList<>(); result.addAll(loadRelPathsFromBlueprint(""openjdk_java_files.bp"", ""\""ojluni/src/main/java/(.+\\.java)\"""")); result.addAll(loadRelPathsFromBlueprint(""ojluni/src/main/native/Android.bp"", ""\\s+\""(.+\\.(?:c|cpp))\"","")); return result; }",29f83ccbb57ba64f1fc60c1449cd8e8d4ee89fa2,2018-04-06 15:17:40,6
656941,tools_upstream_src_main_java_libcore_Repository.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.List<java.nio.file.Path> loadRelPathsFromBlueprint(libcore.Repository.FileGroup fileGroup, java.lang.String blueprintPathString, java.lang.String patternString) throws java.io.IOException { java.nio.file.Path blueprintPath = rootPath.resolve(blueprintPathString); java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(patternString); java.util.List<java.nio.file.Path> result = new java.util.ArrayList<>(); for (java.lang.String line : libcore.Util.readLines(blueprintPath)) { java.util.regex.Matcher matcher = pattern.matcher(line); while (matcher.find()) { java.nio.file.Path path = fileGroup.relPathPrefix.resolve(matcher.group(1)); result.add(path); } } return result; }",fba542c4476704159a646039ed96ff030ce3c8b8,"private java.util.List<java.nio.file.Path> loadRelPathsFromBlueprint(java.lang.String blueprintPathString, java.lang.String patternString) throws java.io.IOException { java.nio.file.Path blueprintPath = rootPath.resolve(blueprintPathString); java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(patternString); java.util.List<java.nio.file.Path> result = new java.util.ArrayList<>(); for (java.lang.String line : libcore.Util.readLines(blueprintPath)) { java.util.regex.Matcher matcher = pattern.matcher(line); while (matcher.find()) { java.nio.file.Path relPath = java.nio.file.Paths.get(matcher.group(1)); result.add(relPath); } } java.util.Collections.sort(result); return result; }",1f488a64f0639f5175337a95801f515317220250,2018-04-06 15:17:40,6
656941,tools_upstream_src_main_java_libcore_StandardRepositories.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean isJsr166(java.nio.file.Path relPath) { boolean result = relPath.startsWith(""java/java/util/concurrent/""); java.lang.String ju = ""java/java/util/""; java.lang.String suffix = "".java""; if ((!result) && (relPath.startsWith(ju))) { java.lang.String name = relPath.toString().substring(ju.length()); if (name.endsWith(suffix)) { name = name.substring(0, ((name.length()) - (suffix.length()))); result = libcore.StandardRepositories.juFilesFromJsr166.contains(name); } } return result; }",1bab3611ae4fbbee6dcd06821b20f13e7340278f,"public boolean isJsr166(java.nio.file.Path relPath) { boolean result = relPath.startsWith(""java/util/concurrent/""); java.lang.String ju = ""java/util/""; java.lang.String suffix = "".java""; if ((!result) && (relPath.startsWith(ju))) { java.lang.String name = relPath.toString().substring(ju.length()); if (name.endsWith(suffix)) { name = name.substring(0, ((name.length()) - (suffix.length()))); result = libcore.StandardRepositories.juFilesFromJsr166.contains(name); } } return result; }",9d0c65f4e38688fb920baebbff03bff15f39b6a8,2018-04-06 15:17:40,6
656941,tools_upstream_src_main_java_libcore_StandardRepositories.java,"public libcore.Repository currentUpstream(java.nio.file.Path relPath) { boolean isJsr166 = relPath.startsWith(""java/util/concurrent/""); java.lang.String ju = ""java/util/""; java.lang.String suffix = "".java""; if ((!isJsr166) && (relPath.startsWith(ju))) { java.lang.String name = relPath.toString().substring(ju.length()); if (name.endsWith(suffix)) { name = name.substring(0, ((name.length()) - (suffix.length()))); isJsr166 = libcore.StandardRepositories.juFilesFromJsr166.contains(name); } } if (isJsr166) { return jsr166Upstream; } else if ((relPath.startsWith(""java/sql/"")) || (relPath.startsWith(""javax/sql/""))) { return javaSqlUpstream; } else { return defaultUpstream; } }",471fd99b98abb3f01450f1c5ad58786d7c031976,"public libcore.Repository currentUpstream(java.nio.file.Path relPath) { boolean isJsr166 = isJsr166(relPath); if (isJsr166) { return jsr166Upstream; } else if ((relPath.startsWith(""java/java/sql/"")) || (relPath.startsWith(""java/javax/sql/""))) { return javaSqlUpstream; } else { return defaultUpstream; } }",c13a3378a581e67c2f15d65206b0a745e82372b5,"public libcore.Repository currentUpstream(java.nio.file.Path relPath) { boolean isJsr166 = isJsr166(relPath); if (isJsr166) { return jsr166Upstream; } else if ((relPath.startsWith(""java/sql/"")) || (relPath.startsWith(""javax/sql/""))) { return javaSqlUpstream; } else { return defaultUpstream; } }",8aa116ed5b6f161f0eabdf92aa2cae3c4a85ad39,2018-04-06 15:17:40,6
656941,tools_upstream_src_main_java_libcore_Repository.java,"public static libcore.Repository openJdkLegacy(java.nio.file.Path upstreamRoot, java.lang.String upstreamName) { java.util.List<java.lang.String> sourceDirs = java.util.Arrays.asList(""jdk/src/share/classes"", ""jdk/src/solaris/classes"", ""build/linux-x86_64-normal-server-release/jdk/gensrc""); return new libcore.Repository.OpenJdkRepository(upstreamRoot, upstreamName, sourceDirs); }",c7111bb8f883c8feb86c9e6ec4dcbe9bd3aadbea,"public static libcore.Repository openJdkLegacy(java.nio.file.Path upstreamRoot, java.lang.String upstreamName) { java.util.Map<libcore.Repository.FileGroup, java.util.List<java.lang.String>> sourceDirs = new java.util.HashMap<>(); sourceDirs.put(libcore.Repository.FileGroup.JAVA, java.util.Arrays.asList(""jdk/src/share/classes"", ""jdk/src/solaris/classes"", ""build/linux-x86_64-normal-server-release/jdk/gensrc"")); java.util.List<java.lang.String> nativeSourceDirs = new java.util.ArrayList<>(); java.util.List<java.lang.String> pkgPaths = java.util.Arrays.asList("""", ""java/io"", ""java/lang"", ""java/net"", ""java/nio"", ""java/util"", ""java/util/zip"", ""sun/nio/ch"", ""sun/nio/fs""); for (java.lang.String pkgPath : pkgPaths) { nativeSourceDirs.add((""jdk/src/solaris/native/"" + pkgPath)); nativeSourceDirs.add((""jdk/src/share/native/"" + pkgPath)); nativeSourceDirs.add((""jdk/src/solaris/native/common/"" + pkgPath)); nativeSourceDirs.add((""jdk/src/share/native/common/"" + pkgPath)); } sourceDirs.put(libcore.Repository.FileGroup.NATIVE, nativeSourceDirs); return new libcore.Repository.OpenJdkRepository(upstreamRoot, upstreamName, sourceDirs); }",a53113eb7c8cb052174493fc6211407eabb117c3,"public static libcore.Repository openJdkLegacy(java.nio.file.Path upstreamRoot, java.lang.String upstreamName) { java.util.List<java.lang.String> sourceDirs = new java.util.ArrayList<>(); sourceDirs.addAll(java.util.Arrays.asList(""jdk/src/share/classes"", ""jdk/src/solaris/classes"", ""build/linux-x86_64-normal-server-release/jdk/gensrc"")); java.util.List<java.lang.String> nativeSourceDirs = new java.util.ArrayList<>(); java.util.List<java.lang.String> pkgPaths = java.util.Arrays.asList("""", ""java/io"", ""java/lang"", ""java/net"", ""java/nio"", ""java/util"", ""java/util/zip"", ""sun/nio/ch"", ""sun/nio/fs""); for (java.lang.String pkgPath : pkgPaths) { nativeSourceDirs.add((""jdk/src/solaris/native/"" + pkgPath)); nativeSourceDirs.add((""jdk/src/share/native/"" + pkgPath)); nativeSourceDirs.add((""jdk/src/solaris/native/common/"" + pkgPath)); nativeSourceDirs.add((""jdk/src/share/native/common/"" + pkgPath)); } sourceDirs.addAll(nativeSourceDirs); return new libcore.Repository.OpenJdkRepository(upstreamRoot, upstreamName, sourceDirs); }",936bc4c6e6ee81037b9d298ef81e53cf73f8bfed,2018-04-06 15:17:40,6
656941,tools_upstream_src_main_java_libcore_Repository.java,@java.lang.Override public java.nio.file.Path pathFromRepository(java.nio.file.Path relPath) { for (java.lang.String sourceDir : sourceDirs) { java.nio.file.Path repositoryRelativePath = java.nio.file.Paths.get(sourceDir).resolve(relPath); java.nio.file.Path file = rootPath.resolve(repositoryRelativePath); if (file.toFile().exists()) { return repositoryRelativePath; } } return null; },726b8c0614c48fc08e03ae3442559f085e176353,@java.lang.Override public java.nio.file.Path pathFromRepository(java.nio.file.Path relPath) { if (renameOrigin.containsKey(relPath)) { relPath = renameOrigin.get(relPath); } libcore.Repository.FileGroup fileGroup = libcore.Repository.FileGroup.of(relPath); java.util.List<java.lang.String> fileGroupSourceDirs = sourceDirs.get(fileGroup); java.nio.file.Path sourceDirRelativePath = fileGroup.relativizeFrom(relPath); for (java.lang.String sourceDir : fileGroupSourceDirs) { java.nio.file.Path repositoryRelativePath = java.nio.file.Paths.get(sourceDir).resolve(sourceDirRelativePath); java.io.File file = rootPath.resolve(repositoryRelativePath).toFile(); if (file.exists()) { return repositoryRelativePath; } } return null; },c1a54ba2dd412fe952243732f054faeb32b8152a,@java.lang.Override public java.nio.file.Path pathFromRepository(java.nio.file.Path relPath) { if (libcore.Repository.OPENJDK_REL_PATH.containsKey(relPath)) { relPath = libcore.Repository.OPENJDK_REL_PATH.get(relPath); } return super.pathFromRepository(relPath); },e96b3ad8312efc7ff8ca51eaef7fb5c8cbeb7871,2018-04-06 15:17:40,6
656941,tools_upstream_src_main_java_libcore_CopyUpstreamFiles.java,"public void run() throws java.io.IOException { java.util.List<java.nio.file.Path> relPaths = standardRepositories.ojluni().loadRelPathsFromMakefile(); if (outputDir.toFile().exists()) { throw new java.io.IOException(((outputDir) + "" already exists"")); } else { boolean success = outputDir.toFile().mkdir(); if (!success) { throw new java.io.IOException((""Failed to create directory "" + (outputDir))); } } for (java.nio.file.Path relPath : relPaths) { libcore.Repository expectedUpstream = standardRepositories.currentUpstream(relPath); for (libcore.Repository upstream : standardRepositories.upstreams()) { java.nio.file.Path upstreamFile = upstream.absolutePath(relPath); if (upstreamFile != null) { java.nio.file.Path outputFile = outputDir.resolve(upstream.name()).resolve(relPath); copyFile(upstreamFile, outputFile); if (upstream.equals(expectedUpstream)) { copyFile(upstreamFile, outputDir.resolve(""expected"").resolve(relPath)); } } } } }",ea3fa87bdb29a3b76cca9a5dd0a342b8619bcc72,"public void run() throws java.io.IOException { java.util.List<java.nio.file.Path> relPaths = standardRepositories.ojluni().loadRelPathsFromBlueprint(java.util.EnumSet.of(FileGroup.JAVA)); if (outputDir.toFile().exists()) { throw new java.io.IOException(((outputDir) + "" already exists"")); } else { boolean success = outputDir.toFile().mkdir(); if (!success) { throw new java.io.IOException((""Failed to create directory "" + (outputDir))); } } for (java.nio.file.Path relPath : relPaths) { libcore.Repository expectedUpstream = standardRepositories.currentUpstream(relPath); for (libcore.Repository upstream : standardRepositories.upstreams()) { java.nio.file.Path upstreamFile = upstream.absolutePath(relPath); if (upstreamFile != null) { java.nio.file.Path outputFile = outputDir.resolve(upstream.name()).resolve(relPath); copyFile(upstreamFile, outputFile); if (upstream.equals(expectedUpstream)) { copyFile(upstreamFile, outputDir.resolve(""expected"").resolve(relPath)); } } } } }",5703ceda04ae4380830280e58281deb595d620eb,"public void run() throws java.io.IOException { java.util.List<java.nio.file.Path> relPaths = standardRepositories.ojluni().loadRelPathsFromBlueprint(); if (outputDir.toFile().exists()) { throw new java.io.IOException(((outputDir) + "" already exists"")); } else { boolean success = outputDir.toFile().mkdir(); if (!success) { throw new java.io.IOException((""Failed to create directory "" + (outputDir))); } } for (java.nio.file.Path relPath : relPaths) { libcore.Repository expectedUpstream = standardRepositories.currentUpstream(relPath); for (libcore.Repository upstream : standardRepositories.upstreams()) { java.nio.file.Path upstreamFile = upstream.absolutePath(relPath); if (upstreamFile != null) { java.nio.file.Path outputFile = outputDir.resolve(upstream.name()).resolve(relPath); copyFile(upstreamFile, outputFile); if (upstream.equals(expectedUpstream)) { copyFile(upstreamFile, outputDir.resolve(""expected"").resolve(relPath)); } } } } }",15601c46b2b61362e312c5922b2ad0ba730b13cd,2018-04-06 15:17:40,6
584411,src_com_android_bluetooth_hid_HidDeviceService.java,"synchronized boolean unregisterApp() { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ""unregisterApp()""); } int callingUid = android.os.Binder.getCallingUid(); if ((callingUid == (mUserUid)) || (callingUid < (FIRST_APPLICATION_UID))) { mUserUid = 0; return mHidDeviceNativeInterface.unregisterApp(); } android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""unregisterApp(): caller UID doesn't match user UID""); return false; }",4d008f33798cdcd28d5a5b0115fcd13a11234e17,"synchronized boolean unregisterApp() { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ""unregisterApp()""); } int callingUid = android.os.Binder.getCallingUid(); if ((callingUid == (mUserUid)) || (callingUid < (FIRST_APPLICATION_UID))) { mUserUid = 0; mUserAppName = null; return mHidDeviceNativeInterface.unregisterApp(); } android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""unregisterApp(): caller UID doesn't match user UID""); return false; }",af96c0dcbc64c2e7b6e80f80a5779b05ea0cd8ca,"synchronized boolean unregisterApp() { enforceCallingOrSelfPermission(com.android.bluetooth.hid.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ""unregisterApp()""); } int callingUid = android.os.Binder.getCallingUid(); return unregisterAppUid(callingUid); }",d1d286e4e77b4d5486b760562f316b12ba74f141,2018-04-06 21:54:05,4
584411,src_com_android_bluetooth_hid_HidDeviceService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"synchronized java.lang.String getUserAppName() { if ((mUserAppName) == null) { return """"; } return mUserAppName; }",6e59d46daad752f7409c87ccf374ac544ae9350e,"synchronized java.lang.String getUserAppName() { enforceCallingOrSelfPermission(com.android.bluetooth.hid.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if ((mUserUid) < (FIRST_APPLICATION_UID)) { return """"; } java.lang.String appName = getPackageManager().getNameForUid(mUserUid); return appName != null ? appName : """"; }",a2710b30accf8b4ea40ab8ced6b34ff341e4acd0,2018-04-06 21:54:05,4
584411,src_com_android_bluetooth_hid_HidDeviceService.java,"synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if ((mUserUid) != 0) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""registerApp(): failed because another app is registered""); return false; } mUserUid = android.os.Binder.getCallingUid(); if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, (""registerApp(): calling uid="" + (mUserUid))); } mCallback = callback; return mHidDeviceNativeInterface.registerApp(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null ? null : inQos.toArray()), (outQos == null ? null : outQos.toArray())); }",b2d65a63ae44c69993d15c553f526eb12f9e2902,"synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if ((mUserUid) != 0) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""registerApp(): failed because another app is registered""); return false; } mUserUid = android.os.Binder.getCallingUid(); mUserAppName = getPackageManager().getNameForUid(mUserUid); if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, (""registerApp(): calling uid="" + (mUserUid))); } mCallback = callback; return mHidDeviceNativeInterface.registerApp(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null ? null : inQos.toArray()), (outQos == null ? null : outQos.toArray())); }",f749aa994385ca2815ccce913bbb1e4455549443,"synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { enforceCallingOrSelfPermission(com.android.bluetooth.hid.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if ((mUserUid) != 0) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""registerApp(): failed because another app is registered""); return false; } int callingUid = android.os.Binder.getCallingUid(); if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, (""registerApp(): calling uid="" + callingUid)); } if ((callingUid >= (FIRST_APPLICATION_UID)) && ((mActivityManager.getUidImportance(callingUid)) > (com.android.bluetooth.hid.HidDeviceService.FOREGROUND_IMPORTANCE_CUTOFF))) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""registerApp(): failed because the app is not foreground""); return false; } mUserUid = callingUid; mCallback = callback; return mHidDeviceNativeInterface.registerApp(sdp.getName(), sdp.getDescription(), sdp.getProvider(), sdp.getSubclass(), sdp.getDescriptors(), (inQos == null ? null : new int[]{ inQos.getServiceType(), inQos.getTokenRate(), inQos.getTokenBucketSize(), inQos.getPeakBandwidth(), inQos.getLatency(), inQos.getDelayVariation() }), (outQos == null ? null : new int[]{ outQos.getServiceType(), outQos.getTokenRate(), outQos.getTokenBucketSize(), outQos.getPeakBandwidth(), outQos.getLatency(), outQos.getDelayVariation() })); }",090c0a4354f47822c69e0c43db5ce69979b38ed6,2018-04-06 21:54:05,4
638539,services_net_java_android_net_ip_IpClient.java,"@java.lang.Override public void enter() { android.net.apf.ApfFilter.ApfConfiguration apfConfig = new android.net.apf.ApfFilter.ApfConfiguration(); apfConfig.apfCapabilities = mConfiguration.mApfCapabilities; apfConfig.multicastFilter = mMulticastFiltering; apfConfig.ieee802_3Filter = mContext.getResources().getBoolean(R.bool.config_apfDrop802_3Frames); apfConfig.ethTypeBlackList = mContext.getResources().getIntArray(R.array.config_apfEthTypeBlackList); mApfFilter = android.net.apf.ApfFilter.maybeCreate(apfConfig, mInterfaceParams, mCallback); if ((mApfFilter) == null) { mCallback.setFallbackMulticastFilter(mMulticastFiltering); } mPacketTracker = createPacketTracker(); if ((mPacketTracker) != null) mPacketTracker.start(mConfiguration.mDisplayName); if ((mConfiguration.mEnableIPv6) && (!(startIPv6()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPV6); transitionTo(mStoppingState); return; } if ((mConfiguration.mEnableIPv4) && (!(startIPv4()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPV4); transitionTo(mStoppingState); return; } final android.net.ip.IpClient.InitialConfiguration config = mConfiguration.mInitialConfig; if ((config != null) && (!(applyInitialConfig(config)))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_INVALID_PROVISIONING); transitionTo(mStoppingState); return; } if ((mConfiguration.mUsingIpReachabilityMonitor) && (!(startIpReachabilityMonitor()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPREACHABILITYMONITOR); transitionTo(mStoppingState); return; } }",cc99011fa8bef08497093ec1fcb0d8bdd3594cc4,"@java.lang.Override public void enter() { android.net.apf.ApfFilter.ApfConfiguration apfConfig = new android.net.apf.ApfFilter.ApfConfiguration(); apfConfig.apfCapabilities = mConfiguration.mApfCapabilities; apfConfig.multicastFilter = mMulticastFiltering; apfConfig.ieee802_3Filter = mContext.getResources().getBoolean(R.bool.config_apfDrop802_3Frames); apfConfig.ethTypeBlackList = mContext.getResources().getIntArray(R.array.config_apfEthTypeBlackList); mApfFilter = android.net.apf.ApfFilter.maybeCreate(apfConfig, mInterfaceParams, mCallback); if ((mApfFilter) == null) { mCallback.setFallbackMulticastFilter(mMulticastFiltering); } mPacketTracker = createPacketTracker(); if ((mPacketTracker) != null) mPacketTracker.start(mConfiguration.mDisplayName); if ((mConfiguration.mEnableIPv6) && (!(startIPv6()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPV6); transitionTo(mStoppingState); return; } if ((mConfiguration.mEnableIPv4) && (!(startIPv4()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPV4); transitionTo(mStoppingState); return; } final android.net.ip.IpClient.InitialConfiguration config = mConfiguration.mInitialConfig; if ((config != null) && (!(applyInitialConfig(config)))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_INVALID_PROVISIONING); transitionTo(mStoppingState); return; } if (mConfiguration.mUsingMultinetworkPolicyTracker) { mMultinetworkPolicyTracker = new android.net.util.MultinetworkPolicyTracker(mContext, getHandler(), () -> { android.net.ip.mLog.log(""OBSERVED AvoidBadWifi changed""); }); mMultinetworkPolicyTracker.start(); } if ((mConfiguration.mUsingIpReachabilityMonitor) && (!(startIpReachabilityMonitor()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPREACHABILITYMONITOR); transitionTo(mStoppingState); return; } }",7a32338c23ab811904bb5150da50f6cec1fc39a1,"@java.lang.Override public void enter() { android.net.apf.ApfFilter.ApfConfiguration apfConfig = new android.net.apf.ApfFilter.ApfConfiguration(); apfConfig.apfCapabilities = mConfiguration.mApfCapabilities; apfConfig.multicastFilter = mMulticastFiltering; apfConfig.ieee802_3Filter = mContext.getResources().getBoolean(R.bool.config_apfDrop802_3Frames); apfConfig.ethTypeBlackList = mContext.getResources().getIntArray(R.array.config_apfEthTypeBlackList); mApfFilter = android.net.apf.ApfFilter.maybeCreate(mContext, apfConfig, mInterfaceParams, mCallback); if ((mApfFilter) == null) { mCallback.setFallbackMulticastFilter(mMulticastFiltering); } mPacketTracker = createPacketTracker(); if ((mPacketTracker) != null) mPacketTracker.start(mConfiguration.mDisplayName); if ((mConfiguration.mEnableIPv6) && (!(startIPv6()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPV6); transitionTo(mStoppingState); return; } if ((mConfiguration.mEnableIPv4) && (!(startIPv4()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPV4); transitionTo(mStoppingState); return; } final android.net.ip.IpClient.InitialConfiguration config = mConfiguration.mInitialConfig; if ((config != null) && (!(applyInitialConfig(config)))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_INVALID_PROVISIONING); transitionTo(mStoppingState); return; } if (mConfiguration.mUsingMultinetworkPolicyTracker) { mMultinetworkPolicyTracker = new android.net.util.MultinetworkPolicyTracker(mContext, getHandler(), () -> { android.net.ip.mLog.log(""OBSERVED AvoidBadWifi changed""); }); mMultinetworkPolicyTracker.start(); } if ((mConfiguration.mUsingIpReachabilityMonitor) && (!(startIpReachabilityMonitor()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPREACHABILITYMONITOR); transitionTo(mStoppingState); return; } }",e6f6703f61b80e65c9a64b778afc28bc9a612797,2018-04-09 07:55:48,5
638539,tests_net_java_android_net_apf_ApfTest.java,"@org.junit.Test public void testRaProcessing() throws java.lang.Exception { final int maxRandomPacketSize = 512; final java.util.Random r = new java.util.Random(); android.net.apf.ApfTest.MockIpManagerCallback cb = new android.net.apf.ApfTest.MockIpManagerCallback(); android.net.apf.ApfFilter.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multicastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieee802_3Filter = android.net.apf.ApfTest.DROP_802_3_FRAMES; android.net.apf.ApfTest.TestApfFilter apfFilter = new android.net.apf.ApfTest.TestApfFilter(config, cb, mLog); for (int i = 0; i < 1000; i++) { byte[] packet = new byte[r.nextInt((maxRandomPacketSize + 1))]; r.nextBytes(packet); try { apfFilter.processRa(packet, packet.length); } catch (java.lang.Exception e) { throw new java.lang.Exception((""bad packet: "" + (com.android.internal.util.HexDump.toHexString(packet))), e); } } }",0a9a7dea8bff255d77ab4de58bfec5d7ffecd2c3,"@org.junit.Test public void testRaProcessing() throws java.lang.Exception { final int maxRandomPacketSize = 512; final java.util.Random r = new java.util.Random(); android.net.apf.ApfTest.MockIpClientCallback cb = new android.net.apf.ApfTest.MockIpClientCallback(); android.net.apf.ApfFilter.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multicastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieee802_3Filter = android.net.apf.ApfTest.DROP_802_3_FRAMES; android.net.apf.ApfTest.TestApfFilter apfFilter = new android.net.apf.ApfTest.TestApfFilter(config, cb, mLog); for (int i = 0; i < 1000; i++) { byte[] packet = new byte[r.nextInt((maxRandomPacketSize + 1))]; r.nextBytes(packet); try { apfFilter.processRa(packet, packet.length); } catch (java.lang.Exception e) { throw new java.lang.Exception((""bad packet: "" + (com.android.internal.util.HexDump.toHexString(packet))), e); } } }",3dd5509827059b6b819d32a983cbfbbf24bc98be,"@org.junit.Test public void testRaProcessing() throws java.lang.Exception { final int maxRandomPacketSize = 512; final java.util.Random r = new java.util.Random(); android.net.apf.ApfTest.MockIpClientCallback cb = new android.net.apf.ApfTest.MockIpClientCallback(); android.net.apf.ApfFilter.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multicastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieee802_3Filter = android.net.apf.ApfTest.DROP_802_3_FRAMES; android.net.apf.ApfTest.TestApfFilter apfFilter = new android.net.apf.ApfTest.TestApfFilter(mContext, config, cb, mLog); for (int i = 0; i < 1000; i++) { byte[] packet = new byte[r.nextInt((maxRandomPacketSize + 1))]; r.nextBytes(packet); try { apfFilter.processRa(packet, packet.length); } catch (java.lang.Exception e) { throw new java.lang.Exception((""bad packet: "" + (com.android.internal.util.HexDump.toHexString(packet))), e); } } }",66fd52085bcc31660c807897cb7cb93af5e5d235,2018-04-09 07:55:48,5
638539,tests_net_java_android_net_apf_ApfTest.java,"@org.junit.Test public void testApfFilterArp() throws java.lang.Exception { android.net.apf.ApfTest.MockIpManagerCallback ipManagerCallback = new android.net.apf.ApfTest.MockIpManagerCallback(); android.net.apf.ApfFilter.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multicastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieee802_3Filter = android.net.apf.ApfTest.DROP_802_3_FRAMES; android.net.apf.ApfTest.TestApfFilter apfFilter = new android.net.apf.ApfTest.TestApfFilter(config, ipManagerCallback, mLog); verifyArpFilter(ipManagerCallback.getApfProgram(), android.net.apf.ApfTest.PASS); android.net.LinkAddress linkAddress = new android.net.LinkAddress(java.net.InetAddress.getByAddress(android.net.apf.ApfTest.MOCK_IPV4_ADDR), 24); android.net.LinkProperties lp = new android.net.LinkProperties(); assertTrue(lp.addLinkAddress(linkAddress)); verifyArpFilter(getProgram(ipManagerCallback, apfFilter, lp), android.net.apf.ApfTest.DROP); verifyArpFilter(getProgram(ipManagerCallback, apfFilter, new android.net.LinkProperties()), android.net.apf.ApfTest.PASS); apfFilter.shutdown(); }",9575dbd7beb31417cd2e651250d4402ba11cc504,"@org.junit.Test public void testApfFilterArp() throws java.lang.Exception { android.net.apf.ApfTest.MockIpClientCallback ipClientCallback = new android.net.apf.ApfTest.MockIpClientCallback(); android.net.apf.ApfFilter.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multicastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieee802_3Filter = android.net.apf.ApfTest.DROP_802_3_FRAMES; android.net.apf.ApfTest.TestApfFilter apfFilter = new android.net.apf.ApfTest.TestApfFilter(config, ipClientCallback, mLog); verifyArpFilter(ipClientCallback.getApfProgram(), android.net.apf.ApfTest.PASS); android.net.LinkAddress linkAddress = new android.net.LinkAddress(java.net.InetAddress.getByAddress(android.net.apf.ApfTest.MOCK_IPV4_ADDR), 24); android.net.LinkProperties lp = new android.net.LinkProperties(); assertTrue(lp.addLinkAddress(linkAddress)); verifyArpFilter(getProgram(ipClientCallback, apfFilter, lp), android.net.apf.ApfTest.DROP); verifyArpFilter(getProgram(ipClientCallback, apfFilter, new android.net.LinkProperties()), android.net.apf.ApfTest.PASS); apfFilter.shutdown(); }",a00cc6f8075bb0941a4591959a6e5866efb0042a,"@org.junit.Test public void testApfFilterArp() throws java.lang.Exception { android.net.apf.ApfTest.MockIpClientCallback ipClientCallback = new android.net.apf.ApfTest.MockIpClientCallback(); android.net.apf.ApfFilter.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multicastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieee802_3Filter = android.net.apf.ApfTest.DROP_802_3_FRAMES; android.net.apf.ApfTest.TestApfFilter apfFilter = new android.net.apf.ApfTest.TestApfFilter(mContext, config, ipClientCallback, mLog); verifyArpFilter(ipClientCallback.getApfProgram(), android.net.apf.ApfTest.PASS); android.net.LinkAddress linkAddress = new android.net.LinkAddress(java.net.InetAddress.getByAddress(android.net.apf.ApfTest.MOCK_IPV4_ADDR), 24); android.net.LinkProperties lp = new android.net.LinkProperties(); assertTrue(lp.addLinkAddress(linkAddress)); verifyArpFilter(getProgram(ipClientCallback, apfFilter, lp), android.net.apf.ApfTest.DROP); verifyArpFilter(getProgram(ipClientCallback, apfFilter, new android.net.LinkProperties()), android.net.apf.ApfTest.PASS); apfFilter.shutdown(); }",ce5965fe8dbfc01c91b1d3e307f812469e4faed5,2018-04-09 07:55:48,5
638539,services_net_java_android_net_ip_IpClient.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onProvisioningSuccess(android.net.LinkProperties newLp) { synchronized(this) { mCallbackLinkProperties = newLp; notify(); } },ebc393d9963e4d1f531267c3e9d4577791343b32,@java.lang.Override public void onProvisioningSuccess(android.net.LinkProperties newLp) { mCallbackLinkProperties = newLp; mCV.open(); },788b0e6ae60893b47156ac0819cdc5b6707eb4f0,2018-04-09 07:55:48,5
638539,services_net_java_android_net_ip_IpClient.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onProvisioningFailure(android.net.LinkProperties newLp) { synchronized(this) { mCallbackLinkProperties = null; notify(); } },d6d1c4bacca7e6926a62c060a8bc93e11f839a94,@java.lang.Override public void onProvisioningFailure(android.net.LinkProperties newLp) { mCallbackLinkProperties = null; mCV.open(); },28ac4dd93f3c7264b735d1ab6fe1ca9e13ae9a87,2018-04-09 07:55:48,5
638539,services_net_java_android_net_ip_IpClient.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public android.net.LinkProperties waitForProvisioning() { synchronized(this) { try { wait(); } catch (java.lang.InterruptedException e) { } return mCallbackLinkProperties; } },1f153862762ae51fd87bf90c05273f79f3830837,public android.net.LinkProperties waitForProvisioning() { mCV.block(); return mCallbackLinkProperties; },de55538091b6f2dbb7f9a87212a216274196f020,2018-04-09 07:55:48,5
638539,tests_net_java_android_net_apf_ApfTest.java,"@org.junit.Test public void testRaParsing() throws java.lang.Exception { final int maxRandomPacketSize = 512; final java.util.Random r = new java.util.Random(); android.net.apf.ApfTest.MockIpManagerCallback cb = new android.net.apf.ApfTest.MockIpManagerCallback(); android.net.apf.ApfFilter.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multicastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieee802_3Filter = android.net.apf.ApfTest.DROP_802_3_FRAMES; android.net.apf.ApfTest.TestApfFilter apfFilter = new android.net.apf.ApfTest.TestApfFilter(config, cb, mLog); for (int i = 0; i < 1000; i++) { byte[] packet = new byte[r.nextInt((maxRandomPacketSize + 1))]; r.nextBytes(packet); try { apfFilter.new android.net.apf.Ra(packet, packet.length); } catch (android.net.apf.ApfFilter e) { } catch (java.lang.Exception e) { throw new java.lang.Exception((""bad packet: "" + (com.android.internal.util.HexDump.toHexString(packet))), e); } } }",83c3b04c90b44b69b7fe1e399340c42ff32f7a83,"@org.junit.Test public void testRaParsing() throws java.lang.Exception { final int maxRandomPacketSize = 512; final java.util.Random r = new java.util.Random(); android.net.apf.ApfTest.MockIpClientCallback cb = new android.net.apf.ApfTest.MockIpClientCallback(); android.net.apf.ApfFilter.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multicastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieee802_3Filter = android.net.apf.ApfTest.DROP_802_3_FRAMES; android.net.apf.ApfTest.TestApfFilter apfFilter = new android.net.apf.ApfTest.TestApfFilter(config, cb, mLog); for (int i = 0; i < 1000; i++) { byte[] packet = new byte[r.nextInt((maxRandomPacketSize + 1))]; r.nextBytes(packet); try { apfFilter.new android.net.apf.Ra(packet, packet.length); } catch (android.net.apf.ApfFilter e) { } catch (java.lang.Exception e) { throw new java.lang.Exception((""bad packet: "" + (com.android.internal.util.HexDump.toHexString(packet))), e); } } }",4d592ae2a7712cda0376cc9746463b31dbd97452,"@org.junit.Test public void testRaParsing() throws java.lang.Exception { final int maxRandomPacketSize = 512; final java.util.Random r = new java.util.Random(); android.net.apf.ApfTest.MockIpClientCallback cb = new android.net.apf.ApfTest.MockIpClientCallback(); android.net.apf.ApfFilter.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multicastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieee802_3Filter = android.net.apf.ApfTest.DROP_802_3_FRAMES; android.net.apf.ApfTest.TestApfFilter apfFilter = new android.net.apf.ApfTest.TestApfFilter(mContext, config, cb, mLog); for (int i = 0; i < 1000; i++) { byte[] packet = new byte[r.nextInt((maxRandomPacketSize + 1))]; r.nextBytes(packet); try { apfFilter.new android.net.apf.Ra(packet, packet.length); } catch (android.net.apf.ApfFilter e) { } catch (java.lang.Exception e) { throw new java.lang.Exception((""bad packet: "" + (com.android.internal.util.HexDump.toHexString(packet))), e); } } }",74ebbba9cf14f4c50289d449b65ff1817ca285ac,2018-04-09 07:55:48,5
657832,src_com_android_bluetooth_hfp_HeadsetPhoneState.java,@java.lang.Override public void onSubscriptionsChanged() { listenForPhoneState(false); listenForPhoneState(true); },e879c6e24cffcb9a5dbc1fd90cc8d9dec04cd19a,@java.lang.Override public void onSubscriptionsChanged() { stopListenForPhoneState(); startListenForPhoneState(); },5bcd5514ef153db6c79b210f89336cee9473bbcd,@java.lang.Override public void onSubscriptionsChanged() { synchronized(mDeviceEventMap) { stopListenForPhoneState(); startListenForPhoneState(); } },79ddf4adcbb9f1a5625ca3bbb651329851cd3cf2,2018-04-09 18:08:44,10
657832,src_com_android_bluetooth_hfp_HeadsetStateMachine.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void updateAgIndicatorEnableState(com.android.bluetooth.hfp.HeadsetAgIndicatorEnableState agIndicatorEnableState) { if (java.util.Objects.equals(mAgIndicatorEnableState, agIndicatorEnableState)) { return; } mAgIndicatorEnableState = agIndicatorEnableState; int events = android.telephony.PhoneStateListener.LISTEN_NONE; if (((mAgIndicatorEnableState) != null) && (mAgIndicatorEnableState.service)) { events |= android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE; } if (((mAgIndicatorEnableState) != null) && (mAgIndicatorEnableState.signal)) { events |= android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS; } mSystemInterface.getHeadsetPhoneState().listenForPhoneState(mDevice, events); }",e12e5318568eba225fe3f53f102a8cbf52ff34f4,"private void updateAgIndicatorEnableState(com.android.bluetooth.hfp.HeadsetAgIndicatorEnableState agIndicatorEnableState) { if (java.util.Objects.equals(mAgIndicatorEnableState, agIndicatorEnableState)) { android.util.Log.i(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, (""updateAgIndicatorEnableState, no change in indicator state "" + (mAgIndicatorEnableState))); return; } mAgIndicatorEnableState = agIndicatorEnableState; int events = android.telephony.PhoneStateListener.LISTEN_NONE; if (((mAgIndicatorEnableState) != null) && (mAgIndicatorEnableState.service)) { events |= android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE; } if (((mAgIndicatorEnableState) != null) && (mAgIndicatorEnableState.signal)) { events |= android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS; } mSystemInterface.getHeadsetPhoneState().listenForPhoneState(mDevice, events); }",9182403d2e6525df9632859530d94b01a0951ea4,2018-04-09 18:08:44,10
657832,src_com_android_bluetooth_hfp_HeadsetPhoneState.java,"private void startListenForPhoneState() { if (!(mListening)) { int subId = android.telephony.SubscriptionManager.getDefaultSubscriptionId(); if (android.telephony.SubscriptionManager.isValidSubscriptionId(subId)) { mPhoneStateListener = new com.android.bluetooth.hfp.HeadsetPhoneState.HeadsetPhoneStateListener(subId, mHeadsetService.getStateMachinesThreadLooper()); mTelephonyManager.listen(mPhoneStateListener, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); mListening = true; } else { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, (""startListenForPhoneState, invalid subscription ID "" + subId)); } } }",068568d402cd9ab27bff18a471a15c37229822ba,"private void startListenForPhoneState() { if ((mPhoneStateListener) != null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ""startListenForPhoneState, already listening""); return; } int subId = android.telephony.SubscriptionManager.getDefaultSubscriptionId(); if (!(android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, (""startListenForPhoneState, invalid subscription ID "" + subId)); return; } int events = getTelephonyEventsToListen(); if (events == (android.telephony.PhoneStateListener.LISTEN_NONE)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ""startListenForPhoneState, no event to listen""); return; } mPhoneStateListener = new com.android.bluetooth.hfp.HeadsetPhoneState.HeadsetPhoneStateListener(subId, mHeadsetService.getStateMachinesThreadLooper()); mTelephonyManager.listen(mPhoneStateListener, events); if ((events & (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS)) != 0) { mTelephonyManager.setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF); } }",bd53a6cf4b5dd92d50dc5b7369a88c44088db283,"private void startListenForPhoneState() { if ((mPhoneStateListener) != null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ""startListenForPhoneState, already listening""); return; } int events = getTelephonyEventsToListen(); if (events == (android.telephony.PhoneStateListener.LISTEN_NONE)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ""startListenForPhoneState, no event to listen""); return; } int subId = android.telephony.SubscriptionManager.getDefaultSubscriptionId(); if (!(android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, (""startListenForPhoneState, invalid subscription ID "" + subId)); return; } android.util.Log.i(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, (((""startListenForPhoneState(), subId="" + subId) + "", enabled_events="") + events)); mPhoneStateListener = new com.android.bluetooth.hfp.HeadsetPhoneState.HeadsetPhoneStateListener(subId, mHeadsetService.getStateMachinesThreadLooper()); mTelephonyManager.listen(mPhoneStateListener, events); }",dde8884e1972167d305caeb27a36ec4cef049efc,2018-04-09 18:08:44,10
657832,src_com_android_bluetooth_hfp_HeadsetPhoneState.java,"private void stopListenForPhoneState() { if (mListening) { mTelephonyManager.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE); mListening = false; } }",31fddde9cf6c767758c3e0e62239383cd7305cdf,"private void stopListenForPhoneState() { if ((mPhoneStateListener) == null) { android.util.Log.i(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ""stopListenForPhoneState, no listener indicates nothing is listening""); return; } mTelephonyManager.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE); mTelephonyManager.setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_NORMAL); mPhoneStateListener = null; }",d869fa3a59d9793d10d76a846b5417ab02737885,"private void stopListenForPhoneState() { if ((mPhoneStateListener) == null) { android.util.Log.i(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ""stopListenForPhoneState(), no listener indicates nothing is listening""); return; } android.util.Log.i(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, (""stopListenForPhoneState(), stopping listener, enabled_events="" + (getTelephonyEventsToListen()))); mTelephonyManager.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE); mPhoneStateListener = null; }",c2545a7af39b6af12d8d2df0438da9db315ec9c0,2018-04-09 18:08:44,10
657832,src_com_android_bluetooth_hfp_HeadsetPhoneState.java,public void cleanup() { listenForPhoneState(false); mSubscriptionManager.removeOnSubscriptionsChangedListener(mOnSubscriptionsChangedListener); },b93464888749db637bbc8921e5850a085cc9da13,public void cleanup() { synchronized(mDeviceEventMap) { mDeviceEventMap.clear(); } stopListenForPhoneState(); mSubscriptionManager.removeOnSubscriptionsChangedListener(mOnSubscriptionsChangedListener); },5b5bf7f49a47417bd3f80ea854decfc976a98c74,public void cleanup() { synchronized(mDeviceEventMap) { mDeviceEventMap.clear(); stopListenForPhoneState(); } mSubscriptionManager.removeOnSubscriptionsChangedListener(mOnSubscriptionsChangedListener); },4c14e74d7045d4cb4e47d162d46c66d06e52df7b,2018-04-09 18:08:44,10
657832,src_com_android_bluetooth_hfp_HeadsetPhoneState.java,@android.support.annotation.VisibleForTesting public void listenForPhoneState(boolean start) { synchronized(mTelephonyManager) { if (start) { startListenForPhoneState(); } else { stopListenForPhoneState(); } } },7341f8a376c04b8fd2f32a0a333e7a317e9cbf4c,"@android.support.annotation.VisibleForTesting public void listenForPhoneState(android.bluetooth.BluetoothDevice device, int events) { synchronized(mTelephonyManager) { synchronized(mDeviceEventMap) { mDeviceEventMap.put(device, events); } stopListenForPhoneState(); startListenForPhoneState(); } }",e7f31f01ca210802d588c5be0256b3b9651051dd,"@android.support.annotation.VisibleForTesting public void listenForPhoneState(android.bluetooth.BluetoothDevice device, int events) { synchronized(mDeviceEventMap) { int prevEvents = getTelephonyEventsToListen(); if (events == (android.telephony.PhoneStateListener.LISTEN_NONE)) { mDeviceEventMap.remove(device); } else { mDeviceEventMap.put(device, events); } int updatedEvents = getTelephonyEventsToListen(); if (prevEvents != updatedEvents) { stopListenForPhoneState(); startListenForPhoneState(); } } }",8ec3205983b9f0fb1e4238ce9db86dbe69fd27d1,2018-04-09 18:08:44,10
657832,tests_unit_src_com_android_bluetooth_hfp_HeadsetStateMachineTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testAtBiaEvent_initialSubscriptionWithUpdates() { setUpConnectedState(); verify(mPhoneState).listenForPhoneState(mTestDevice, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BIA, new com.android.bluetooth.hfp.HeadsetAgIndicatorEnableState(true, false, true, false), mTestDevice)); verify(mPhoneState).listenForPhoneState(mTestDevice, PhoneStateListener.LISTEN_SERVICE_STATE); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BIA, new com.android.bluetooth.hfp.HeadsetAgIndicatorEnableState(false, true, true, false), mTestDevice)); verify(mPhoneState).listenForPhoneState(mTestDevice, PhoneStateListener.LISTEN_SIGNAL_STRENGTHS); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BIA, new com.android.bluetooth.hfp.HeadsetAgIndicatorEnableState(false, false, true, false), mTestDevice)); verify(mPhoneState).listenForPhoneState(mTestDevice, PhoneStateListener.LISTEN_NONE); }",cb95241566cf10a2d850130d41a3ee4e13934896,"@org.junit.Test public void testAtBiaEvent_initialSubscriptionWithUpdates() { setUpConnectedState(); verify(mPhoneState).listenForPhoneState(mTestDevice, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BIA, new com.android.bluetooth.hfp.HeadsetAgIndicatorEnableState(true, true, false, false), mTestDevice)); verify(mPhoneState, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).listenForPhoneState(mTestDevice, PhoneStateListener.LISTEN_SERVICE_STATE); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BIA, new com.android.bluetooth.hfp.HeadsetAgIndicatorEnableState(false, true, true, false), mTestDevice)); verify(mPhoneState, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).listenForPhoneState(mTestDevice, PhoneStateListener.LISTEN_SIGNAL_STRENGTHS); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BIA, new com.android.bluetooth.hfp.HeadsetAgIndicatorEnableState(false, true, false, false), mTestDevice)); verify(mPhoneState, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).listenForPhoneState(mTestDevice, PhoneStateListener.LISTEN_NONE); }",252599568be75d1ee2f80711ea2e23d2c4ddd18c,2018-04-09 18:08:44,10
657832,tests_unit_src_com_android_bluetooth_hfp_HeadsetPhoneStateTest.java,,,"@org.junit.Test public void testListenForPhoneState_MultiDevice_AllUpAllDown() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); android.bluetooth.BluetoothDevice device2 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 2); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF); mHeadsetPhoneState.listenForPhoneState(device2, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verifyNoMoreInteractions(mTelephonyManager); mHeadsetPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_NONE); verifyNoMoreInteractions(mTelephonyManager); mHeadsetPhoneState.listenForPhoneState(device2, PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).listen(any(), PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_NORMAL); verifyNoMoreInteractions(mTelephonyManager); }",4d0cb9ea4a444eeb2a9d8bb61b9ce2fd8647df4a,"@org.junit.Test public void testListenForPhoneState_MultiDevice_AllUpAllDown() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); android.bluetooth.BluetoothDevice device2 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 2); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), eq(((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS)))); verifyNoMoreInteractions(mTelephonyManager); mHeadsetPhoneState.listenForPhoneState(device2, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verifyNoMoreInteractions(mTelephonyManager); mHeadsetPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_NONE); verifyNoMoreInteractions(mTelephonyManager); mHeadsetPhoneState.listenForPhoneState(device2, PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).listen(any(), eq(PhoneStateListener.LISTEN_NONE)); verifyNoMoreInteractions(mTelephonyManager); }",9fc3bf847702445791c2bac1eebbc722dda0ba45,2018-04-09 18:08:44,10
657832,tests_unit_src_com_android_bluetooth_hfp_HeadsetPhoneStateTest.java,,,@org.junit.After public void tearDown() { mHeadsetPhoneState.cleanup(); },e38164b227e1745913ae2ec8b2fadf5a4c14a6a0,"@org.junit.After public void tearDown() throws java.lang.Exception { mHeadsetPhoneState.cleanup(); mHandlerThread.quit(); if ((mServiceManagerOriginalServices) != null) { com.android.bluetooth.TestUtils.replaceField(android.os.ServiceManager.class, ""sCache"", null, mServiceManagerOriginalServices); mServiceManagerOriginalServices = null; } }",fcb788bc2aa5ab1c31c9121b8cdbfd28af4efab0,2018-04-09 18:08:44,10
657832,tests_unit_src_com_android_bluetooth_hfp_HeadsetPhoneStateTest.java,,,"@org.junit.Test public void testListenForPhoneState_ServiceAndSignalStrengthUpdateTurnOffAll() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF); mHeadsetPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).listen(any(), PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_NORMAL); verifyNoMoreInteractions(mTelephonyManager); }",af71d859e088174e9ecff20618a35937ec77a646,"@org.junit.Test public void testListenForPhoneState_ServiceAndSignalStrengthUpdateTurnOffAll() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), eq(((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS)))); mHeadsetPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).listen(any(), eq(PhoneStateListener.LISTEN_NONE)); verifyNoMoreInteractions(mTelephonyManager); }",5838748028ff1f68714177f9941f33606ee932bd,2018-04-09 18:08:44,10
657832,tests_unit_src_com_android_bluetooth_hfp_HeadsetPhoneStateTest.java,,,@org.junit.Before public void setUp() { org.mockito.MockitoAnnotations.initMocks(this); when(mHeadsetService.getSystemService(Context.TELEPHONY_SERVICE)).thenReturn(mTelephonyManager); when(mHeadsetService.getSystemService(Context.TELEPHONY_SUBSCRIPTION_SERVICE)).thenReturn(mSubscriptionManager); mHeadsetPhoneState = new com.android.bluetooth.hfp.HeadsetPhoneState(mHeadsetService); },2e9fdf3475f7c4ffbd410f152e93af00851ff645,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); when(mISub.getDefaultSubId()).thenReturn(SubscriptionManager.DEFAULT_SUBSCRIPTION_ID); when(mISubBinder.queryLocalInterface(anyString())).thenReturn(mISub); mServiceManagerMockedServices.put(""isub"", mISubBinder); mServiceManagerOriginalServices = com.android.bluetooth.TestUtils.replaceField(android.os.ServiceManager.class, ""sCache"", null, mServiceManagerMockedServices); when(mHeadsetService.getSystemService(Context.TELEPHONY_SERVICE)).thenReturn(mTelephonyManager); when(mHeadsetService.getSystemService(Context.TELEPHONY_SUBSCRIPTION_SERVICE)).thenReturn(mSubscriptionManager); mHandlerThread = new android.os.HandlerThread(""HeadsetStateMachineTestHandlerThread""); mHandlerThread.start(); when(mHeadsetService.getStateMachinesThreadLooper()).thenReturn(mHandlerThread.getLooper()); mHeadsetPhoneState = new com.android.bluetooth.hfp.HeadsetPhoneState(mHeadsetService); }",d1f58c6f5e9c364bcef25e869a21e9f70d55b604,2018-04-09 18:08:44,10
657832,tests_unit_src_com_android_bluetooth_hfp_HeadsetPhoneStateTest.java,,,"@org.junit.Test public void testListenForPhoneState_ServiceOnly() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_SERVICE_STATE); verify(mTelephonyManager).listen(any(), PhoneStateListener.LISTEN_SERVICE_STATE); verifyNoMoreInteractions(mTelephonyManager); }",fda3c06b2dd3923baaeea2fbc29507d83d46d036,"@org.junit.Test public void testListenForPhoneState_ServiceOnly() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_SERVICE_STATE); verify(mTelephonyManager).listen(any(), eq(PhoneStateListener.LISTEN_SERVICE_STATE)); verifyNoMoreInteractions(mTelephonyManager); }",a8b01e8afc8fc96f61204b37570dd2414647b521,2018-04-09 18:08:44,10
657832,tests_unit_src_com_android_bluetooth_hfp_HeadsetPhoneStateTest.java,,,"@org.junit.Test public void testListenForPhoneState_ServiceAndSignalStrength() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF); verifyNoMoreInteractions(mTelephonyManager); }",823d28e6f356ebe1788d9b874d97dbdeaaa09739,"@org.junit.Test public void testListenForPhoneState_ServiceAndSignalStrength() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), eq(((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS)))); verifyNoMoreInteractions(mTelephonyManager); }",384ff5b26519f0447fa5c8a9cebf2eaafe255dfb,2018-04-09 18:08:44,10
657832,tests_unit_src_com_android_bluetooth_hfp_HeadsetPhoneStateTest.java,,,"@org.junit.Test public void testListenForPhoneState_ServiceAndSignalStrengthUpdateTurnOffSignalStrengh() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF); mHeadsetPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_SERVICE_STATE); verify(mTelephonyManager).listen(any(), PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_NORMAL); verify(mTelephonyManager).listen(any(), PhoneStateListener.LISTEN_SERVICE_STATE); verifyNoMoreInteractions(mTelephonyManager); }",84c07d30e00fa8acc330886b62a056ae8ddf7920,"@org.junit.Test public void testListenForPhoneState_ServiceAndSignalStrengthUpdateTurnOffSignalStrengh() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), eq(((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS)))); mHeadsetPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_SERVICE_STATE); verify(mTelephonyManager).listen(any(), eq(PhoneStateListener.LISTEN_NONE)); verify(mTelephonyManager).listen(any(), eq(PhoneStateListener.LISTEN_SERVICE_STATE)); verifyNoMoreInteractions(mTelephonyManager); }",3ca29ce48234803b0fa05ee0909af8bcaae28806,2018-04-09 18:08:44,10
657062,hostside_src_com_android_tradefed_testtype_GraphicsBenchmarkHostsideController.java,"@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.testList.entrySet()) { java.io.File apk = new java.io.File(mApkDir, entry.getValue()); getDevice().installPackage(apk, true); runDeviceTests(com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.CLASS, entry.getKey()); } }",5f6784ed81acdfee49fdae9e2a8995165f14f84c,"@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.gfx.benchmark.ApkInfo apk : com.android.gfx.benchmark.ApkInfo.values()) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.CLASS, (""test"" + (apk.name()))); } }",0cca62ab6c7ca27406117ebb652d290a80305eb7,"@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.gfx.benchmark.ApkInfo apk : com.android.gfx.benchmark.ApkInfo.values()) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.name())) + ""]"")); } }",c69fd52f22846dfa2a09aac7534e95050d4d9711,2018-04-09 22:05:28,4
657062,test_src_com_google_android_gfx_benchmark_test_GraphicsBenchmarkTest.java,"@org.junit.Test public void testSniper3d() throws java.io.IOException, java.lang.InterruptedException { startApp(com.google.android.gfx.benchmark.test.GraphicsBenchmarkTest.App.SNIPER_3D); }",3dc7fe95b9b6bdd9c9466a9c67744aee1827ada3,"@org.junit.Test public void testSNIPER_3D() throws java.io.IOException, java.lang.InterruptedException { startApp(ApkInfo.SNIPER_3D); }",ff4ea640a16e0cb826fbb298cc8b4e0ba14dc0a5,"@org.junit.Test public void run() throws java.io.IOException, java.lang.InterruptedException { startApp(apk); }",a29f29488b43e14725966bdc5358a250bd10e5b2,2018-04-09 22:05:28,4
633505,tests_net_java_com_android_server_ConnectivityServiceTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override protected void resolvePrivateDnsConfig(com.android.server.connectivity.DnsManager.PrivateDnsConfig cfg) { mPrivateDnsCfg = cfg; if (mPrivateDnsCfg.inStrictMode()) { try { java.net.InetAddress[] ips = new java.net.InetAddress[]{ java.net.InetAddress.getByName(""3.3.3.3""), java.net.InetAddress.getByName(""4.4.4.4"") }; mPrivateDnsCfg = new com.android.server.connectivity.DnsManager.PrivateDnsConfig(mPrivateDnsCfg.hostname, ips); } catch (java.lang.Exception e) { } } }",d70cbe4c5f4f9f7aca9b1ce7522fe2fda3698670,"private void setPrivateDnsSettings(java.lang.String mode, java.lang.String specifier) { final android.content.ContentResolver cr = mServiceContext.getContentResolver(); Settings.Global.putString(cr, Settings.Global.PRIVATE_DNS_MODE, mode); Settings.Global.putString(cr, Settings.Global.PRIVATE_DNS_SPECIFIER, specifier); mService.updatePrivateDnsSettings(); waitForIdle(); }",733de2d54e8e811d7603a6b8ab3eadb31badd1f6,2018-04-10 03:16:05,10
633505,services_core_java_com_android_server_connectivity_NetworkMonitor.java,"private void resolvePrivateDnsConfig(com.android.server.connectivity.DnsManager.PrivateDnsConfig cfg) { if (cfg == null) { mPrivateDnsCfg = null; return; } if (!(cfg.inStrictMode())) { mPrivateDnsCfg = cfg; return; } if (((((mPrivateDnsCfg) != null) && (mPrivateDnsCfg.inStrictMode())) && ((mPrivateDnsCfg.ips.length) > 0)) && (mPrivateDnsCfg.hostname.equals(cfg.hostname))) { return; } mPrivateDnsCfg = cfg; final com.android.server.connectivity.DnsManager.PrivateDnsConfig resolvedCfg = com.android.server.connectivity.DnsManager.tryBlockingResolveOf(mNetwork, mPrivateDnsCfg.hostname); if (resolvedCfg != null) mPrivateDnsCfg = resolvedCfg; }",d8a5d0108e3c17b1599f5ff0c58abc06f0dd0552,"@com.android.internal.annotations.VisibleForTesting protected void resolvePrivateDnsConfig(com.android.server.connectivity.DnsManager.PrivateDnsConfig cfg) { if (cfg == null) { mPrivateDnsCfg = null; return; } if (!(cfg.inStrictMode())) { mPrivateDnsCfg = cfg; return; } if (((((mPrivateDnsCfg) != null) && (mPrivateDnsCfg.inStrictMode())) && ((mPrivateDnsCfg.ips.length) > 0)) && (mPrivateDnsCfg.hostname.equals(cfg.hostname))) { return; } mPrivateDnsCfg = cfg; final com.android.server.connectivity.DnsManager.PrivateDnsConfig resolvedCfg = com.android.server.connectivity.DnsManager.tryBlockingResolveOf(mNetwork, mPrivateDnsCfg.hostname); if (resolvedCfg != null) mPrivateDnsCfg = resolvedCfg; }",38658305005dc121287a7eb6a840b0cf0e3960ab,"private void notifyNetworkTestResultInvalid(java.lang.Object obj) { mConnectivityServiceHandler.sendMessage(obtainMessage(com.android.server.connectivity.NetworkMonitor.EVENT_NETWORK_TESTED, com.android.server.connectivity.NetworkMonitor.NETWORK_TEST_RESULT_INVALID, mNetId, obj)); }",ab5ce4e9750626f45a928779b47ccdce5cbea983,2018-04-10 03:16:05,10
633505,services_core_java_com_android_server_ConnectivityService.java,"private void handleRegisterNetworkAgent(NetworkAgentInfo na) { if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(""Got NetworkAgent Messenger""); mNetworkAgentInfos.put(na.messenger, na); synchronized(mNetworkForNetId) { mNetworkForNetId.put(na.network.netId, na); } na.asyncChannel.connect(mContext, mTrackerHandler, na.messenger); android.net.NetworkInfo networkInfo = na.networkInfo; na.networkInfo = null; updateNetworkInfo(na, networkInfo); updateUids(na, null, na.networkCapabilities); }",db0b58536acd0a13840e0e31d117d5f4579be503,"private void handleRegisterNetworkAgent(NetworkAgentInfo na) { if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(""Got NetworkAgent Messenger""); mNetworkAgentInfos.put(na.messenger, na); synchronized(mNetworkForNetId) { mNetworkForNetId.put(na.network.netId, na); } mDnsManager.updatePrivateDns(na.network, mDnsManager.getPrivateDnsConfig()); na.asyncChannel.connect(mContext, mTrackerHandler, na.messenger); android.net.NetworkInfo networkInfo = na.networkInfo; na.networkInfo = null; updateNetworkInfo(na, networkInfo); updateUids(na, null, na.networkCapabilities); }",f5d20b47685b40e62e9b9847e2006d75af7e20e3,"private void handleRegisterNetworkAgent(NetworkAgentInfo nai) { if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(""Got NetworkAgent Messenger""); mNetworkAgentInfos.put(nai.messenger, nai); synchronized(mNetworkForNetId) { mNetworkForNetId.put(nai.network.netId, nai); } nai.asyncChannel.connect(mContext, mTrackerHandler, nai.messenger); android.net.NetworkInfo networkInfo = nai.networkInfo; nai.networkInfo = null; updateNetworkInfo(nai, networkInfo); updateUids(nai, null, nai.networkCapabilities); }",eb27c74be21f14ff98ae9ccdb13a4a946bc52751,2018-04-10 03:16:05,10
633505,services_core_java_com_android_server_ConnectivityService.java,"private void handlePrivateDnsSettingsChanged() { final PrivateDnsConfig cfg = mDnsManager.getPrivateDnsConfig(); for (NetworkAgentInfo nai : mNetworkAgentInfos.values()) { if (!(com.android.server.connectivity.NetworkMonitor.isValidationRequired(mDefaultRequest.networkCapabilities, nai.networkCapabilities))) { continue; } nai.networkMonitor.notifyPrivateDnsSettingsChanged(cfg); if (!(cfg.inStrictMode())) { updatePrivateDns(nai, cfg); } } }",ce469d044300a60ae2c87914d1299232554b8e67,"@com.android.internal.annotations.VisibleForTesting protected void handlePrivateDnsSettingsChanged() { final PrivateDnsConfig cfg = mDnsManager.getPrivateDnsConfig(); for (NetworkAgentInfo nai : mNetworkAgentInfos.values()) { if (!(com.android.server.connectivity.NetworkMonitor.isValidationRequired(mDefaultRequest.networkCapabilities, nai.networkCapabilities))) { continue; } nai.networkMonitor.notifyPrivateDnsSettingsChanged(cfg); if (!(cfg.inStrictMode())) { updatePrivateDns(nai, cfg); } } }",7dbd012635a63089b647ea01c8ee48619023153f,"private void handlePrivateDnsSettingsChanged() { final com.android.server.connectivity.DnsManager.PrivateDnsConfig cfg = mDnsManager.getPrivateDnsConfig(); for (com.android.server.connectivity.NetworkAgentInfo nai : mNetworkAgentInfos.values()) { handlePerNetworkPrivateDnsConfig(nai, cfg); if (networkRequiresValidation(nai)) { handleUpdateLinkProperties(nai, new android.net.LinkProperties(nai.linkProperties)); } } }",427f7243629b2ff280627a68a5619c226aefcfed,2018-04-10 03:16:05,10
633505,services_core_java_com_android_server_ConnectivityService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void handlePrivateDnsValidationUpdate(com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate update) { mDnsManager.updatePrivateDnsValidation(update); com.android.server.connectivity.NetworkAgentInfo nai = getNetworkAgentInfoForNetwork(new android.net.Network(update.netId)); if (nai == null) { return; } if (mDnsManager.maybeFixLinkPropertiesPrivateDns(nai.network.netId, new android.net.LinkProperties(nai.linkProperties))) { handleUpdateLinkProperties(nai, new android.net.LinkProperties(nai.linkProperties)); } }",db10a7ccf9f9753691b07c7910946a71496dbe55,"private void handlePrivateDnsValidationUpdate(com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate update) { com.android.server.connectivity.NetworkAgentInfo nai = getNetworkAgentInfoForNetId(update.netId); if (nai == null) { return; } mDnsManager.updatePrivateDnsValidation(update); handleUpdateLinkProperties(nai, new android.net.LinkProperties(nai.linkProperties)); }",0bb0e0293b02f74493120c19bd9e682154176e4e,2018-04-10 03:16:05,10
633505,services_core_java_com_android_server_connectivity_DnsManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void updateStatus(java.net.InetAddress ipAddress, java.lang.String hostname, boolean validated) { android.util.Pair<java.lang.String, java.net.InetAddress> p = new android.util.Pair(hostname, ipAddress); if (!(mValidationMap.containsKey(p))) { return; } if (validated) { mValidationMap.put(p, com.android.server.connectivity.DnsManager.PrivateDnsValidationStatuses.ValidationStatus.SUCCEEDED); } else { mValidationMap.put(p, com.android.server.connectivity.DnsManager.PrivateDnsValidationStatuses.ValidationStatus.FAILED); } }",1b17c6355633d4478a78dea108cce472a07a3dcd,"private void updateStatus(com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate update) { android.util.Pair<java.lang.String, java.net.InetAddress> p = new android.util.Pair(update.hostname, update.ipAddress); if (!(mValidationMap.containsKey(p))) { return; } if (update.validated) { mValidationMap.put(p, com.android.server.connectivity.DnsManager.PrivateDnsValidationStatuses.ValidationStatus.SUCCEEDED); } else { mValidationMap.put(p, com.android.server.connectivity.DnsManager.PrivateDnsValidationStatuses.ValidationStatus.FAILED); } }",4a5b14da84c1d0de370808f27bcd91fd089bd0ad,2018-04-10 03:16:05,10
633505,services_core_java_com_android_server_ConnectivityService.java,"private void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo networkAgent, android.net.LinkProperties oldLp) { android.net.LinkProperties newLp = networkAgent.linkProperties; int netId = networkAgent.network.netId; if ((networkAgent.clatd) != null) { networkAgent.clatd.fixupLinkProperties(oldLp); } updateInterfaces(newLp, oldLp, netId, networkAgent.networkCapabilities); updateMtu(newLp, oldLp); updateTcpBufferSizes(networkAgent); updateRoutes(newLp, oldLp, netId); updateDnses(newLp, oldLp, netId); networkAgent.updateClat(mNetd); if (isDefaultNetwork(networkAgent)) { handleApplyDefaultProxy(newLp.getHttpProxy()); } else { updateProxy(newLp, oldLp, networkAgent); } if (!(java.util.Objects.equals(newLp, oldLp))) { notifyIfacesChangedForNetworkStats(); notifyNetworkCallbacks(networkAgent, ConnectivityManager.CALLBACK_IP_CHANGED); } mKeepaliveTracker.handleCheckKeepalivesStillValid(networkAgent); }",b84ba0c465c814b7e6adb5c1650f9ebc4d21e650,"private void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo networkAgent, android.net.LinkProperties oldLp) { android.net.LinkProperties newLp = networkAgent.linkProperties; int netId = networkAgent.network.netId; if ((networkAgent.clatd) != null) { networkAgent.clatd.fixupLinkProperties(oldLp); } updateInterfaces(newLp, oldLp, netId, networkAgent.networkCapabilities); updateMtu(newLp, oldLp); updateTcpBufferSizes(networkAgent); updateRoutes(newLp, oldLp, netId); updateDnses(newLp, oldLp, netId); mDnsManager.maybeFixLinkPropertiesPrivateDns(netId, newLp); networkAgent.updateClat(mNetd); if (isDefaultNetwork(networkAgent)) { handleApplyDefaultProxy(newLp.getHttpProxy()); } else { updateProxy(newLp, oldLp, networkAgent); } if (!(java.util.Objects.equals(newLp, oldLp))) { notifyIfacesChangedForNetworkStats(); notifyNetworkCallbacks(networkAgent, ConnectivityManager.CALLBACK_IP_CHANGED); } mKeepaliveTracker.handleCheckKeepalivesStillValid(networkAgent); }",2f9c47c632200cb135b2b57b5ec8985795bd41aa,"private void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo networkAgent, android.net.LinkProperties oldLp) { android.net.LinkProperties newLp = networkAgent.linkProperties; int netId = networkAgent.network.netId; if ((networkAgent.clatd) != null) { networkAgent.clatd.fixupLinkProperties(oldLp); } updateInterfaces(newLp, oldLp, netId, networkAgent.networkCapabilities); updateMtu(newLp, oldLp); updateTcpBufferSizes(networkAgent); updateRoutes(newLp, oldLp, netId); updateDnses(newLp, oldLp, netId); mDnsManager.updatePrivateDnsStatus(netId, newLp); networkAgent.updateClat(mNetd); if (isDefaultNetwork(networkAgent)) { handleApplyDefaultProxy(newLp.getHttpProxy()); } else { updateProxy(newLp, oldLp, networkAgent); } if (!(java.util.Objects.equals(newLp, oldLp))) { notifyIfacesChangedForNetworkStats(); notifyNetworkCallbacks(networkAgent, ConnectivityManager.CALLBACK_IP_CHANGED); } mKeepaliveTracker.handleCheckKeepalivesStillValid(networkAgent); }",ba0909dfab419e44c6f50ab32573d7766f08e2c5,2018-04-10 03:16:05,10
633505,services_core_java_com_android_server_ConnectivityService.java,"private boolean updatePrivateDns(com.android.server.connectivity.NetworkAgentInfo nai, com.android.server.connectivity.DnsManager.PrivateDnsConfig newCfg) { final boolean reevaluationRequired = true; final boolean dontReevaluate = false; final com.android.server.connectivity.DnsManager.PrivateDnsConfig oldCfg = mDnsManager.updatePrivateDns(nai.network, newCfg); updateDnses(nai.linkProperties, null, nai.network.netId); if (newCfg == null) { if (oldCfg == null) return dontReevaluate; return oldCfg.useTls ? reevaluationRequired : dontReevaluate; } if (oldCfg == null) { return newCfg.useTls ? reevaluationRequired : dontReevaluate; } if ((oldCfg.useTls) != (newCfg.useTls)) { return reevaluationRequired; } if ((newCfg.inStrictMode()) && (!(java.util.Objects.equals(oldCfg.hostname, newCfg.hostname)))) { return reevaluationRequired; } return dontReevaluate; }",f9021343e0281191af37116a2e4152cb02b26eb0,"private boolean updatePrivateDns(com.android.server.connectivity.NetworkAgentInfo nai, com.android.server.connectivity.DnsManager.PrivateDnsConfig newCfg) { final boolean reevaluationRequired = true; final boolean dontReevaluate = false; final com.android.server.connectivity.DnsManager.PrivateDnsConfig oldCfg = mDnsManager.updatePrivateDns(nai.network, newCfg); updateDnses(nai.linkProperties, null, nai.network.netId); if (mDnsManager.maybeFixLinkPropertiesPrivateDns(nai.network.netId, new android.net.LinkProperties(nai.linkProperties))) { handleUpdateLinkProperties(nai, new android.net.LinkProperties(nai.linkProperties)); } if (newCfg == null) { if (oldCfg == null) return dontReevaluate; return oldCfg.useTls ? reevaluationRequired : dontReevaluate; } if (oldCfg == null) { return newCfg.useTls ? reevaluationRequired : dontReevaluate; } if ((oldCfg.useTls) != (newCfg.useTls)) { return reevaluationRequired; } if ((newCfg.inStrictMode()) && (!(java.util.Objects.equals(oldCfg.hostname, newCfg.hostname)))) { return reevaluationRequired; } return dontReevaluate; }",3ebd5679e6a1deb98e68ccbdbed9ded5f2ef0ca0,"private void updatePrivateDns(com.android.server.connectivity.NetworkAgentInfo nai, com.android.server.connectivity.DnsManager.PrivateDnsConfig newCfg) { mDnsManager.updatePrivateDns(nai.network, newCfg); updateDnses(nai.linkProperties, null, nai.network.netId); }",e75998d54c5490ff47b77f848e898dc6b80da16a,2018-04-10 03:16:05,10
633505,services_core_java_com_android_server_ConnectivityService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.android.internal.annotations.VisibleForTesting protected void registerNetdEventCallback() { mIpConnectivityMetrics = checkNotNull(((android.net.IIpConnectivityMetrics) (IIpConnectivityMetrics.Stub.asInterface(android.os.ServiceManager.getService(IpConnectivityLog.SERVICE_NAME)))), ""missing IIpConnectivityMetrics""); try { mIpConnectivityMetrics.addNetdEventCallback(INetdEventCallback.CALLBACK_CALLER_CONNECTIVITY_SERVICE, mNetdEventCallback); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge((""Error registering netd callback :"" + e)); } }",79fd1d4afcfe127ab969c2960169f06e8eac18ac,"@com.android.internal.annotations.VisibleForTesting protected void registerNetdEventCallback() { mIpConnectivityMetrics = ((android.net.IIpConnectivityMetrics) (IIpConnectivityMetrics.Stub.asInterface(android.os.ServiceManager.getService(IpConnectivityLog.SERVICE_NAME)))); if ((mIpConnectivityMetrics) == null) { android.util.Slog.wtf(com.android.server.ConnectivityService.TAG, ""Missing IIpConnectivityMetrics""); } try { mIpConnectivityMetrics.addNetdEventCallback(INetdEventCallback.CALLBACK_CALLER_CONNECTIVITY_SERVICE, mNetdEventCallback); } catch (java.lang.Exception e) { com.android.server.ConnectivityService.loge((""Error registering netd callback: "" + e)); } }",37279295f6e19ec841a4563ffd678ec24cdef674,2018-04-10 03:16:05,10
633505,services_core_java_com_android_server_connectivity_DnsManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void updatePrivateDnsValidation(com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate update) { if (!(mPrivateDnsValidationMap.containsKey(update.netId))) { return; } mPrivateDnsValidationMap.get(update.netId).updateStatus(update.ipAddress, update.hostname, update.validated); }",56d4b10f850d03a6a2677d958d241351be1ba3f6,public void updatePrivateDnsValidation(com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate update) { final com.android.server.connectivity.DnsManager.PrivateDnsValidationStatuses statuses = mPrivateDnsValidationMap.get(update.netId); if (statuses == null) return; statuses.updateStatus(update); },7c147a3e21f45ddff5d9f60e21994acb5fb6a7c2,2018-04-10 03:16:05,10
633505,services_core_java_com_android_server_ConnectivityService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onPrivateDnsValidationEvent(int netId, java.lang.String ipAddress, java.lang.String hostname, boolean validated) { try { mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_PRIVATE_DNS_VALIDATION_UPDATE, new com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate(netId, java.net.InetAddress.parseNumericAddress(ipAddress), hostname, validated))); } catch (java.lang.IllegalArgumentException e) { } }",b3e7e5b306bb201f89e633cf7adbef5816612155,"@java.lang.Override public void onPrivateDnsValidationEvent(int netId, java.lang.String ipAddress, java.lang.String hostname, boolean validated) { try { mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_PRIVATE_DNS_VALIDATION_UPDATE, new com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate(netId, java.net.InetAddress.parseNumericAddress(ipAddress), hostname, validated))); } catch (java.lang.IllegalArgumentException e) { com.android.server.ConnectivityService.loge(""Error parsing ip address in validation event""); } }",fc2a1c01fce793ec31d45bd8a2f58e3940830abf,2018-04-10 03:16:05,10
633505,services_core_java_com_android_server_connectivity_DnsManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean maybeFixLinkPropertiesPrivateDns(int netId, android.net.LinkProperties lp) { final android.net.LinkProperties oldLp = new android.net.LinkProperties(lp); final com.android.server.connectivity.DnsManager.PrivateDnsConfig privateDnsCfg = mPrivateDnsMap.get(netId); final boolean useTls = (privateDnsCfg != null) && (privateDnsCfg.useTls); final boolean strictMode = (privateDnsCfg != null) && (privateDnsCfg.inStrictMode()); final java.lang.String tlsHostname = (strictMode) ? privateDnsCfg.hostname : """"; if (strictMode) { lp.setUsePrivateDns(true); lp.setPrivateDnsServerName(tlsHostname); } else if (useTls) { boolean validated = (mPrivateDnsValidationMap.containsKey(netId)) && (mPrivateDnsValidationMap.get(netId).hasValidatedServer()); lp.setUsePrivateDns(validated); lp.setPrivateDnsServerName(null); } else { lp.setUsePrivateDns(false); lp.setPrivateDnsServerName(null); } return !(java.util.Objects.equals(oldLp, lp)); }",56c242ee0c1895919476b02a11e7a1c61704d95f,"public void updatePrivateDnsStatus(int netId, android.net.LinkProperties lp) { final com.android.server.connectivity.DnsManager.PrivateDnsConfig privateDnsCfg = mPrivateDnsMap.getOrDefault(netId, com.android.server.connectivity.DnsManager.PRIVATE_DNS_OFF); final boolean useTls = privateDnsCfg.useTls; final boolean strictMode = privateDnsCfg.inStrictMode(); final java.lang.String tlsHostname = (strictMode) ? privateDnsCfg.hostname : """"; if (strictMode) { lp.setUsePrivateDns(true); lp.setPrivateDnsServerName(tlsHostname); } else if (useTls) { boolean validated = (mPrivateDnsValidationMap.containsKey(netId)) && (mPrivateDnsValidationMap.get(netId).hasValidatedServer()); lp.setUsePrivateDns(validated); lp.setPrivateDnsServerName(null); } else { lp.setUsePrivateDns(false); lp.setPrivateDnsServerName(null); } }",9256081e9e7c67912895244b3b3728fdb99cdebb,2018-04-10 03:16:05,10
629127,services_core_java_com_android_server_connectivity_Tethering.java,"@com.android.internal.annotations.VisibleForTesting protected boolean isTetherProvisioningRequired() { java.lang.String[] provisionApp = mContext.getResources().getStringArray(com.android.internal.R.array.config_mobile_hotspot_provision_app); if ((mSystemProperties.getBoolean(com.android.server.connectivity.Tethering.DISABLE_PROVISIONING_SYSPROP_KEY, false)) || (provisionApp == null)) { return false; } if (carrierConfigAffirmsEntitlementCheckNotRequired()) { return false; } return (provisionApp.length) == 2; }",1ff9493cfbb23ca66175efd8e3a9f4a784bd13aa,"@com.android.internal.annotations.VisibleForTesting protected boolean isTetherProvisioningRequired() { final com.android.server.connectivity.tethering.TetheringConfiguration cfg = mConfig; if ((mSystemProperties.getBoolean(com.android.server.connectivity.Tethering.DISABLE_PROVISIONING_SYSPROP_KEY, false)) || ((cfg.provisioningApp) == null)) { return false; } if (carrierConfigAffirmsEntitlementCheckNotRequired()) { return false; } return (cfg.provisioningApp.length) == 2; }",2bc6ad497d7a7f63647c3540e3cc72e7f44c4f8b,"@com.android.internal.annotations.VisibleForTesting protected boolean isTetherProvisioningRequired() { final com.android.server.connectivity.tethering.TetheringConfiguration cfg = mConfig; if ((mSystemProperties.getBoolean(com.android.server.connectivity.Tethering.DISABLE_PROVISIONING_SYSPROP_KEY, false)) || ((cfg.provisioningApp.length) == 0)) { return false; } if (carrierConfigAffirmsEntitlementCheckNotRequired()) { return false; } return (cfg.provisioningApp.length) == 2; }",72c3b4385d394c7549d98efa4cbe8d56b16fa698,2018-04-10 03:22:10,11
629127,services_core_java_com_android_server_connectivity_tethering_TetheringConfiguration.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.lang.String getPovisioningAppNoUi(android.content.Context ctx) { try { return ctx.getResources().getString(com.android.internal.R.string.config_mobile_hotspot_provision_app_no_ui); } catch (android.content.res.Resources e) { return """"; } }",97b049f86fa6a21de91cf29817d5f9937607873f,"private static java.lang.String getProvisioningAppNoUi(android.content.Context ctx) { try { return ctx.getResources().getString(config_mobile_hotspot_provision_app_no_ui); } catch (android.content.res.Resources e) { return """"; } }",40f4794c70d9a83618033867dc7985823416527a,2018-04-10 03:22:10,11
660825,luni_src_main_java_libcore_io_BlockGuardOs.java,@java.lang.Override public void close(java.io.FileDescriptor fd) throws android.system.ErrnoException { try { if (fd.isSocket$()) { if (libcore.io.BlockGuardOs.isLingerSocket(fd)) { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); } } } catch (android.system.ErrnoException ignored) { } os.close(fd); },0238cbf65b43ed03ccbfa2dc5cbcba8eabce6298,@java.lang.Override public void close(java.io.FileDescriptor fd) throws android.system.ErrnoException { try { if ((fd != null) && (fd.isSocket$())) { if (libcore.io.BlockGuardOs.isLingerSocket(fd)) { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); } } } catch (android.system.ErrnoException ignored) { } os.close(fd); },9e5c89cf730dbf9d35bb27d480f3c74ad13543dc,@java.lang.Override public void close(java.io.FileDescriptor fd) throws android.system.ErrnoException { try { if (fd.isSocket$()) { if (libcore.io.BlockGuardOs.isLingerSocket(fd)) { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); } } } catch (android.system.ErrnoException ignored) { } os.close(fd); },0238cbf65b43ed03ccbfa2dc5cbcba8eabce6298,2018-04-10 14:44:57,2
656540,src_com_android_se_Terminal.java,public synchronized void closeChannels() { java.util.Collection<com.android.se.Channel> col = mChannels.values(); com.android.se.Channel[] channelList = col.toArray(new com.android.se.Channel[col.size()]); for (com.android.se.Channel channel : channelList) { closeChannel(channel); } },cd6da5033b77643b4499dab2f8dd0c08d4ce9886,public synchronized void closeChannels() { java.util.Collection<com.android.se.Channel> col = mChannels.values(); com.android.se.Channel[] channelList = col.toArray(new com.android.se.Channel[col.size()]); for (com.android.se.Channel channel : channelList) { closeChannel(channel); } if ((mSEHal) != null) { try { mSEHal.unlinkToDeath(mDeathRecipient); } catch (android.os.RemoteException e) { } } },6572096a681a4509dd56043a0083faa729d668f7,public synchronized void closeChannels() { java.util.Collection<com.android.se.Channel> col = mChannels.values(); com.android.se.Channel[] channelList = col.toArray(new com.android.se.Channel[col.size()]); for (com.android.se.Channel channel : channelList) { closeChannel(channel); } },cd6da5033b77643b4499dab2f8dd0c08d4ce9886,2018-04-10 22:23:30,3
656540,src_com_android_se_Terminal.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void handleMessage(android.os.Message message) { switch (message.what) { case com.android.se.Terminal.EVENT_GET_HAL : try { initialize(); } catch (java.lang.Exception e) { android.util.Log.e(mTag, ((mName) + "" could not be initialized again"")); sendMessageDelayed(mHandler.obtainMessage(com.android.se.Terminal.EVENT_GET_HAL, 0), com.android.se.Terminal.GET_SERVICE_DELAY_MILLIS); } break; default : break; } }",8b0cbb791b43dafba376fab069b3ba9c1aee97c2,"@java.lang.Override public void handleMessage(android.os.Message message) { switch (message.what) { case com.android.se.Terminal.EVENT_GET_HAL : try { initialize(); } catch (java.lang.Exception e) { android.util.Log.e(mTag, ((mName) + "" could not be initialized again"")); sendMessageDelayed(obtainMessage(com.android.se.Terminal.EVENT_GET_HAL, 0), com.android.se.Terminal.GET_SERVICE_DELAY_MILLIS); } break; default : break; } }",0be3a99425d207041e3c52dab9a7588e1ba06a34,2018-04-10 22:23:30,3
658762,src_com_android_se_Terminal.java,"@java.lang.Override public void onStateChange(boolean state) { synchronized(mLock) { android.util.Log.i(mTag, (""OnStateChange:"" + state)); mIsConnected = state; if (!state) { if ((mAccessControlEnforcer) != null) { mAccessControlEnforcer.reset(); } } else { try { initializeAccessControl(); } catch (java.lang.Exception e) { } synchronized(mLock) { mDefaultApplicationSelectedOnBasicChannel = true; } } } }",cc71324e45f652c400a0e430e075b31a003b80af,"@java.lang.Override public void onStateChange(boolean state) { synchronized(mLock) { android.util.Log.i(mTag, (""OnStateChange:"" + state)); mIsConnected = state; if (!state) { if ((mAccessControlEnforcer) != null) { mAccessControlEnforcer.reset(); } } else { closeChannels(); try { initializeAccessControl(); } catch (java.lang.Exception e) { } synchronized(mLock) { mDefaultApplicationSelectedOnBasicChannel = true; } } } }",d528107b7ae9e8252326f57a66ae1ed7c827421d,"@java.lang.Override public void onStateChange(boolean state) { synchronized(mLock) { android.util.Log.i(mTag, (""OnStateChange:"" + state)); mIsConnected = state; if (!state) { if ((mAccessControlEnforcer) != null) { mAccessControlEnforcer.reset(); } } else { closeChannels(); try { initializeAccessControl(); } catch (java.lang.Exception e) { } mDefaultApplicationSelectedOnBasicChannel = true; } } }",2eef3a84973e37a2fb61dc72d049f0feb1e2bc48,2018-04-10 22:24:41,5
657121,src_main_java_com_android_vts_entity_TestSuiteFileEntity.java,,,public void save() { this.updated = new java.util.Date(); ofy().defer().save().entity(this); },31ed1172b84ddab7414f44d36a99d6aa1a5be96b,public void save() { this.updated = new java.util.Date(); ofy().save().entity(this).now(); },c48f3054d0a2fc163ad20093fe0569a2d93aaa17,2018-04-11 02:36:11,4
653860,harnesses_tradefed_tests_src_com_android_compatibility_common_tradefed_util_VtsRetryFilterHelperTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@org.junit.After public void tearDown() throws java.lang.Exception { com.android.tradefed.util.FileUtil.recursiveDelete(mTmpDir); },bf82b3f4a9ac13a19c9b54c306307762baad0c05,@org.junit.After public void tearDown() throws java.lang.Exception { com.android.tradefed.util.VtsFileUtil.recursiveDelete(mTmpDir); },7f81aeef03e686dc0858dd9437acc55d403cc664,2018-04-11 02:38:51,7
653860,harnesses_tradefed_tests_src_com_android_compatibility_common_tradefed_util_VtsRetryFilterHelperTest.java,"@org.junit.Before public void setUp() throws java.lang.Exception { java.net.URL resultsDir = getClass().getResource(RESULTS_DIR); mBuildHelper = new com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper(null) { @java.lang.Override public java.io.File getResultsDir() { return new java.io.File(resultsDir.getPath()); } }; mHelper = new com.android.compatibility.common.tradefed.util.VtsRetryFilterHelper(mBuildHelper, 0, ""SUB_PLAN"", new java.util.HashSet<java.lang.String>(), new java.util.HashSet<java.lang.String>(), ""ABI_NAME"", ""MODULE_NAME"", ""TEST_NAME"", com.android.compatibility.common.tradefed.util.RetryType.FAILED); }",a04e6e443197cbff032cb04a473dfa281ae53e07,"@org.junit.Before public void setUp() throws java.lang.Exception { mTmpDir = com.android.tradefed.util.FileUtil.createTempDir(""vts-unit-tests""); java.io.File invDir = new java.io.File(mTmpDir, ""2017.09.01_17.30.00""); invDir.mkdirs(); com.android.tradefed.util.FileUtil.saveResourceFile(getClass().getResourceAsStream(RESULTS_FILE), invDir, ""test_result.xml""); mBuildHelper = new com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper(null) { @java.lang.Override public java.io.File getResultsDir() { return mTmpDir; } }; mHelper = new com.android.compatibility.common.tradefed.util.VtsRetryFilterHelper(mBuildHelper, 0, ""SUB_PLAN"", new java.util.HashSet<java.lang.String>(), new java.util.HashSet<java.lang.String>(), ""ABI_NAME"", ""MODULE_NAME"", ""TEST_NAME"", RetryType.FAILED); }",2dc9a599f0f585cb3f70884202a06bcd60e26503,"@org.junit.Before public void setUp() throws java.lang.Exception { mTmpDir = com.android.tradefed.util.VtsFileUtil.createTempDir(""vts-unit-tests""); java.io.File invDir = new java.io.File(mTmpDir, ""2017.09.01_17.30.00""); invDir.mkdirs(); com.android.tradefed.util.VtsFileUtil.saveResourceFile(getClass().getResourceAsStream(RESULTS_FILE), invDir, ""test_result.xml""); mBuildHelper = new com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper(null) { @java.lang.Override public java.io.File getResultsDir() { return mTmpDir; } }; mHelper = new com.android.compatibility.common.tradefed.util.VtsRetryFilterHelper(mBuildHelper, 0, ""SUB_PLAN"", new java.util.HashSet<java.lang.String>(), new java.util.HashSet<java.lang.String>(), ""ABI_NAME"", ""MODULE_NAME"", ""TEST_NAME"", RetryType.FAILED); }",1f7efbf3303a452f25685670aee2020a0769cae0,2018-04-11 02:38:51,7
623549,src_com_android_bluetooth_hfpclient_HeadsetClientService.java,"@java.lang.Override protected synchronized boolean start() { if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ""start()""); } com.android.bluetooth.hfpclient.NativeInterface.initializeNative(); mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); mSmFactory = new com.android.bluetooth.hfpclient.HeadsetClientStateMachineFactory(); mStateMachineMap.clear(); android.content.IntentFilter filter = new android.content.IntentFilter(android.media.AudioManager.VOLUME_CHANGED_ACTION); try { registerReceiver(mBroadcastReceiver, filter); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ""Unable to register broadcat receiver"", e); } com.android.bluetooth.hfpclient.HeadsetClientService.setHeadsetClientService(this); mNativeInterface = new com.android.bluetooth.hfpclient.NativeInterface(); android.content.Intent startIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); startService(startIntent); mSmThread = new android.os.HandlerThread(""HeadsetClient.SM""); mSmThread.start(); return true; }",a57ca27776a740ed25c8d55393d48aaa41e83949,"@java.lang.Override protected synchronized boolean start() { if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ""start()""); } if ((mNativeInterface) == null) { mNativeInterface = new com.android.bluetooth.hfpclient.NativeInterface(); mNativeInterface.initializeNative(); } mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); mSmFactory = new com.android.bluetooth.hfpclient.HeadsetClientStateMachineFactory(); mStateMachineMap.clear(); android.content.IntentFilter filter = new android.content.IntentFilter(android.media.AudioManager.VOLUME_CHANGED_ACTION); try { registerReceiver(mBroadcastReceiver, filter); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ""Unable to register broadcat receiver"", e); } com.android.bluetooth.hfpclient.HeadsetClientService.setHeadsetClientService(this); android.content.Intent startIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); startService(startIntent); mSmThread = new android.os.HandlerThread(""HeadsetClient.SM""); mSmThread.start(); return true; }",0498f44a6e1864d0b77f408f3cddb683bcbf4724,"@java.lang.Override protected synchronized boolean start() { if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ""start()""); } if ((com.android.bluetooth.hfpclient.HeadsetClientService.sHeadsetClientService) != null) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ""start(): start called without stop""); return false; } mNativeInterface = new com.android.bluetooth.hfpclient.NativeInterface(); mNativeInterface.initializeNative(); mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); mSmFactory = new com.android.bluetooth.hfpclient.HeadsetClientStateMachineFactory(); mStateMachineMap.clear(); android.content.IntentFilter filter = new android.content.IntentFilter(android.media.AudioManager.VOLUME_CHANGED_ACTION); registerReceiver(mBroadcastReceiver, filter); android.content.Intent startIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); startService(startIntent); mSmThread = new android.os.HandlerThread(""HeadsetClient.SM""); mSmThread.start(); com.android.bluetooth.hfpclient.HeadsetClientService.setHeadsetClientService(this); return true; }",d0e43dcacbaca0dd70817ce346bb224f192f3c6c,2018-04-11 15:29:22,8
623549,src_com_android_bluetooth_hfpclient_HeadsetClientService.java,"@java.lang.Override protected synchronized boolean stop() { try { unregisterReceiver(mBroadcastReceiver); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ""Unable to unregister broadcast receiver"", e); } for (java.util.Iterator<java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.hfpclient.HeadsetClientStateMachine>> it = mStateMachineMap.entrySet().iterator(); it.hasNext();) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = mStateMachineMap.get(((android.bluetooth.BluetoothDevice) (it.next().getKey()))); sm.doQuit(); it.remove(); } android.content.Intent stopIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); stopIntent.putExtra(com.android.bluetooth.hfpclient.HeadsetClientService.HFP_CLIENT_STOP_TAG, true); startService(stopIntent); mNativeInterface = null; mSmThread.quit(); mSmThread = null; com.android.bluetooth.hfpclient.NativeInterface.cleanupNative(); return true; }",96c812b196d2ed89a3a7b5e6836c512702987c8a,"@java.lang.Override protected synchronized boolean stop() { try { unregisterReceiver(mBroadcastReceiver); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ""Unable to unregister broadcast receiver"", e); } for (java.util.Iterator<java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.hfpclient.HeadsetClientStateMachine>> it = mStateMachineMap.entrySet().iterator(); it.hasNext();) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = mStateMachineMap.get(((android.bluetooth.BluetoothDevice) (it.next().getKey()))); sm.doQuit(); it.remove(); } android.content.Intent stopIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); stopIntent.putExtra(com.android.bluetooth.hfpclient.HeadsetClientService.HFP_CLIENT_STOP_TAG, true); startService(stopIntent); mSmThread.quit(); mSmThread = null; if ((mNativeInterface) != null) { mNativeInterface.cleanupNative(); mNativeInterface = null; } return true; }",067c6d3f48d3d2c90f1ef12156bc315769746964,"@java.lang.Override protected synchronized boolean stop() { if ((com.android.bluetooth.hfpclient.HeadsetClientService.sHeadsetClientService) == null) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ""stop() called without start()""); return false; } com.android.bluetooth.hfpclient.HeadsetClientService.setHeadsetClientService(null); unregisterReceiver(mBroadcastReceiver); for (java.util.Iterator<java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.hfpclient.HeadsetClientStateMachine>> it = mStateMachineMap.entrySet().iterator(); it.hasNext();) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = mStateMachineMap.get(((android.bluetooth.BluetoothDevice) (it.next().getKey()))); sm.doQuit(); it.remove(); } android.content.Intent stopIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); stopIntent.putExtra(com.android.bluetooth.hfpclient.HeadsetClientService.HFP_CLIENT_STOP_TAG, true); startService(stopIntent); mSmThread.quit(); mSmThread = null; mNativeInterface.cleanupNative(); mNativeInterface = null; return true; }",6410e745b4780c6766701938331886c07b564d71,2018-04-11 15:29:22,8
660981,src_com_android_bluetooth_newavrcp_AvrcpTargetService.java,"@java.lang.Override protected void setUserUnlocked(int userId) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""User unlocked, initializing the service""); if (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.avrcp.AvrcpTargetService.AVRCP_ENABLE_PROPERTY, false))) { android.util.Log.w(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""Skipping initialization of the new AVRCP Target Service""); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = null; return; } init(); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = this; }",09e3c5e9a77f280b1eeedc4ea2fac283464d7fcf,"@java.lang.Override protected void setUserUnlocked(int userId) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""User unlocked, initializing the service""); if (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.avrcp.AvrcpTargetService.AVRCP_ENABLE_PROPERTY, false))) { android.util.Log.w(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""Skipping initialization of the new AVRCP Target Player List""); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = null; return; } mMediaPlayerList.init(new com.android.bluetooth.avrcp.AvrcpTargetService.ListCallback()); }",aa9282e4665a193e26bc49df93a36b0b5782fcbf,"@java.lang.Override protected void setUserUnlocked(int userId) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""User unlocked, initializing the service""); if (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.avrcp.AvrcpTargetService.AVRCP_ENABLE_PROPERTY, false))) { android.util.Log.w(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""Skipping initialization of the new AVRCP Target Player List""); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = null; return; } if ((mMediaPlayerList) != null) { mMediaPlayerList.init(new com.android.bluetooth.avrcp.AvrcpTargetService.ListCallback()); } }",7ac9e4a3f2f9398b08bc9422ff34996dee4d80d9,2018-04-11 22:42:33,9
660981,src_com_android_bluetooth_newavrcp_AvrcpTargetService.java,"@java.lang.Override protected boolean start() { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""Starting the AVRCP Target Service""); mCurrentData = new com.android.bluetooth.avrcp.MediaData(null, null, null); mReceiver = new com.android.bluetooth.avrcp.AvrcpTargetService.AvrcpBroadcastReceiver(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothA2dp.ACTION_ACTIVE_DEVICE_CHANGED); registerReceiver(mReceiver, filter); return true; }",222208054098d3a824a36a85a61173be6e6ef968,"@java.lang.Override protected boolean start() { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""Starting the AVRCP Target Service""); mCurrentData = new com.android.bluetooth.avrcp.MediaData(null, null, null); if (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.avrcp.AvrcpTargetService.AVRCP_ENABLE_PROPERTY, false))) { android.util.Log.w(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""Skipping initialization of the new AVRCP Target Service""); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = null; return true; } mReceiver = new com.android.bluetooth.avrcp.AvrcpTargetService.AvrcpBroadcastReceiver(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothA2dp.ACTION_ACTIVE_DEVICE_CHANGED); registerReceiver(mReceiver, filter); init(); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = this; return true; }",74a84fa48b5185fe738ba6203d404d08dbfa3c36,"@java.lang.Override protected boolean start() { if ((com.android.bluetooth.avrcp.AvrcpTargetService.sInstance) != null) { android.util.Log.wtfStack(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""The service has already been initialized""); return false; } android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""Starting the AVRCP Target Service""); mCurrentData = new com.android.bluetooth.avrcp.MediaData(null, null, null); mReceiver = new com.android.bluetooth.avrcp.AvrcpTargetService.AvrcpBroadcastReceiver(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothA2dp.ACTION_ACTIVE_DEVICE_CHANGED); registerReceiver(mReceiver, filter); if (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.avrcp.AvrcpTargetService.AVRCP_ENABLE_PROPERTY, false))) { android.util.Log.w(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""Skipping initialization of the new AVRCP Target Service""); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = null; return true; } mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); com.android.bluetooth.avrcp.AvrcpTargetService.sDeviceMaxVolume = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC); mMediaPlayerList = new com.android.bluetooth.avrcp.MediaPlayerList(android.os.Looper.myLooper(), this); android.os.UserManager userManager = android.os.UserManager.get(getApplicationContext()); if (userManager.isUserUnlocked()) { mMediaPlayerList.init(new com.android.bluetooth.avrcp.AvrcpTargetService.ListCallback()); } mNativeInterface = com.android.bluetooth.avrcp.AvrcpNativeInterface.getInterface(); mNativeInterface.init(this); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = this; return true; }",850e282a5be5ab6abe493cdf9dc1da34884a102f,2018-04-11 22:42:33,9
660981,src_com_android_bluetooth_newavrcp_AvrcpTargetService.java,"private void init() { if ((mMediaPlayerList) != null) { android.util.Log.wtfStack(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""init: The service has already been initialized""); return; } mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); com.android.bluetooth.avrcp.AvrcpTargetService.sDeviceMaxVolume = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC); mMediaPlayerList = new com.android.bluetooth.avrcp.MediaPlayerList(); mMediaPlayerList.init(android.os.Looper.myLooper(), this, new com.android.bluetooth.avrcp.AvrcpTargetService.ListCallback()); mNativeInterface = com.android.bluetooth.avrcp.AvrcpNativeInterface.getInterface(); mNativeInterface.init(this); }",5a02f1b7df8190064890613304c172c95985c6d0,"private void init() { if ((mMediaPlayerList) != null) { android.util.Log.wtfStack(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""init: The service has already been initialized""); return; } mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); com.android.bluetooth.avrcp.AvrcpTargetService.sDeviceMaxVolume = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC); mMediaPlayerList = new com.android.bluetooth.avrcp.MediaPlayerList(android.os.Looper.myLooper(), this); mNativeInterface = com.android.bluetooth.avrcp.AvrcpNativeInterface.getInterface(); mNativeInterface.init(this); }",790d9ac5487414145d6899f767870941126569fa,private void init() { },5f4fb342a095961106435c01be586558e732759e,2018-04-11 22:42:33,9
654568,src_com_android_bluetooth_opp_BluetoothOppService.java,"private void createServerSession(javax.obex.ObexTransport transport) { mServerSession = new com.android.bluetooth.opp.BluetoothOppObexServerSession(this, transport, this); mServerSession.preStart(); if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, (((""Get ServerSession "" + (mServerSession.toString())) + "" for incoming connection"") + (transport.toString()))); } }",56c8f8e9b198f3b36cb079d3d2b8556bf318c5ba,"private void createServerSession(javax.obex.ObexTransport transport) { mServerSession = new com.android.bluetooth.opp.BluetoothOppObexServerSession(this, transport, this); mServerSession.preStart(); if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, (((""Get ServerSession "" + (mServerSession.toString())) + "" for incoming connection"") + (transport.toString()))); } com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.OPP); }",b274e22e09e80e6736fb5cf944c61a760b7f43bc,"private void createServerSession(javax.obex.ObexTransport transport) { mServerSession = new com.android.bluetooth.opp.BluetoothOppObexServerSession(this, transport, this); mServerSession.preStart(); if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, (((""Get ServerSession "" + (mServerSession.toString())) + "" for incoming connection"") + (transport.toString()))); } }",56c8f8e9b198f3b36cb079d3d2b8556bf318c5ba,2018-04-12 01:01:55,18
654568,src_com_android_bluetooth_hearingaid_HearingAidService.java,"@android.support.annotation.VisibleForTesting synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((((""connectionStateChanged: unexpected invocation. device="" + device) + "" fromState="") + fromState) + "" toState="") + toState)); return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { setActiveDevice(device); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (getConnectedDevices().isEmpty())) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (device + "" is unbond. Remove state machine"")); } removeStateMachine(device); } } }",42d4d31c1b27ae688469e43712a28b81c9e62b7e,"@android.support.annotation.VisibleForTesting synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((((""connectionStateChanged: unexpected invocation. device="" + device) + "" fromState="") + fromState) + "" toState="") + toState)); return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { setActiveDevice(device); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEARING_AID); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (getConnectedDevices().isEmpty())) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (device + "" is unbond. Remove state machine"")); } removeStateMachine(device); } } }",b7cf2b4e81eff1c7cde1e04ab4c74297f3016c90,"@android.support.annotation.VisibleForTesting synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((((""connectionStateChanged: unexpected invocation. device="" + device) + "" fromState="") + fromState) + "" toState="") + toState)); return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { long myHiSyncId = getHiSyncId(device); if ((myHiSyncId == (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID)) || ((getConnectedPeerDevices(myHiSyncId).size()) == 1)) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.HEARING_AID); } setActiveDevice(device); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (getConnectedDevices().isEmpty())) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (device + "" is unbond. Remove state machine"")); } removeStateMachine(device); } } }",10882fb6d69a250ca18ff50f6e2ffb8cd1f1b533,2018-04-12 01:01:55,18
654568,src_com_android_bluetooth_a2dpsink_A2dpSinkStateMachine.java,"private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dpSink.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); mContext.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); log((((((""Connection state "" + device) + "": "") + prevState) + ""->"") + state)); }",ed24c21d5e40740c93807d0c02107058c8792314,"private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { if ((prevState != state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.A2DP_SINK); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dpSink.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); mContext.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); log((((((""Connection state "" + device) + "": "") + prevState) + ""->"") + state)); }",6181e5e3371c01121205fdb0c07fe01c5903208c,"private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { if ((prevState != state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.A2DP_SINK); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dpSink.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); mContext.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); log((((((""Connection state "" + device) + "": "") + prevState) + ""->"") + state)); }",aa013b8278c1932f69dac66b4381bdb0c27baf69,2018-04-12 01:01:55,18
654568,src_com_android_bluetooth_a2dp_A2dpService.java,"private void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { return; } synchronized(mStateMachines) { if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { updateOptionalCodecsSupport(device); } if ((toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && ((mMaxConnectedAudioDevices) == 1)) { setActiveDevice(device); } if ((isActiveDevice(device)) && (fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { removeStateMachine(device); } } } }",fcf2e81e532bcb02fcb4aaeee3de3fd031a1fa88,"private void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { return; } synchronized(mStateMachines) { if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { updateOptionalCodecsSupport(device); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.A2DP); } if ((toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && ((mMaxConnectedAudioDevices) == 1)) { setActiveDevice(device); } if ((isActiveDevice(device)) && (fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { removeStateMachine(device); } } } }",d34db4a0cc525c2d0690cc85b56eb5d0f1d0a1ca,"private void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { return; } synchronized(mStateMachines) { if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { updateOptionalCodecsSupport(device); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.A2DP); } if ((toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && ((mMaxConnectedAudioDevices) == 1)) { setActiveDevice(device); } if ((isActiveDevice(device)) && (fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { removeStateMachine(device); } } } }",364115c4cce6110dbe4c740b1b68e3a73e97983a,2018-04-12 01:01:55,18
654568,src_com_android_bluetooth_sap_SapService.java,"private synchronized void setState(int state, int result) { if (state != (mState)) { if (com.android.bluetooth.sap.SapService.DEBUG) { android.util.Log.d(com.android.bluetooth.sap.SapService.TAG, (((((""Sap state "" + (mState)) + "" -> "") + state) + "", result = "") + result)); } int prevState = mState; mState = state; android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothSap.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, mState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mRemoteDevice); sendBroadcast(intent, com.android.bluetooth.sap.BLUETOOTH_PERM); } }",af67a5913ccea9f04bf432e51257df0ca09f039a,"private synchronized void setState(int state, int result) { if (state != (mState)) { if (com.android.bluetooth.sap.SapService.DEBUG) { android.util.Log.d(com.android.bluetooth.sap.SapService.TAG, (((((""Sap state "" + (mState)) + "" -> "") + state) + "", result = "") + result)); } if (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.SAP); } int prevState = mState; mState = state; android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothSap.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, mState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mRemoteDevice); sendBroadcast(intent, com.android.bluetooth.sap.BLUETOOTH_PERM); } }",b24e87c6147349a0550055e48d53ed19ed1feab1,"private synchronized void setState(int state, int result) { if (state != (mState)) { if (com.android.bluetooth.sap.SapService.DEBUG) { android.util.Log.d(com.android.bluetooth.sap.SapService.TAG, (((((""Sap state "" + (mState)) + "" -> "") + state) + "", result = "") + result)); } if (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.SAP); } int prevState = mState; mState = state; android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothSap.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, mState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mRemoteDevice); sendBroadcast(intent, com.android.bluetooth.sap.BLUETOOTH_PERM); } }",2eb0cf12a51fb6f97d7b7fa68645257a965b80c5,2018-04-12 01:01:55,18
654568,src_com_android_bluetooth_pbapclient_PbapClientStateMachine.java,"private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { if (device == null) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG, ""onConnectionStateChanged with invalid device""); return; } android.util.Log.d(com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG, (((((""Connection state "" + device) + "": "") + prevState) + ""->"") + state)); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothPbapClient.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }",aaf1d03efaee36fae6ce2787abe9f1ea62efc51b,"private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { if (device == null) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG, ""onConnectionStateChanged with invalid device""); return; } if ((prevState != state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.PBAP_CLIENT); } android.util.Log.d(com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG, (((((""Connection state "" + device) + "": "") + prevState) + ""->"") + state)); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothPbapClient.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }",0a19fe98179cdd2d7a28f5cffe8088a2650d6b0b,"private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { if (device == null) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG, ""onConnectionStateChanged with invalid device""); return; } if ((prevState != state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.PBAP_CLIENT); } android.util.Log.d(com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG, (((((""Connection state "" + device) + "": "") + prevState) + ""->"") + state)); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothPbapClient.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }",eb6ae3802803dbb0744f6c2f27321016db91b69b,2018-04-12 01:01:55,18
654568,src_com_android_bluetooth_pbap_PbapStateMachine.java,"@java.lang.Override public void enter() { try { startObexServerSession(); } catch (java.io.IOException ex) { android.util.Log.e(com.android.bluetooth.pbap.PbapStateMachine.TAG, (""Caught exception starting OBEX server session"" + (ex.toString()))); } broadcastStateTransitions(); }",927416ff9e334190029c4ac991f7db0dae876935,"@java.lang.Override public void enter() { try { startObexServerSession(); } catch (java.io.IOException ex) { android.util.Log.e(com.android.bluetooth.pbap.PbapStateMachine.TAG, (""Caught exception starting OBEX server session"" + (ex.toString()))); } broadcastStateTransitions(); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.PBAP); }",c9f2d77c3823300194f802a63fb0174f10b47e6d,"@java.lang.Override public void enter() { try { startObexServerSession(); } catch (java.io.IOException ex) { android.util.Log.e(com.android.bluetooth.pbap.PbapStateMachine.TAG, (""Caught exception starting OBEX server session"" + (ex.toString()))); } broadcastStateTransitions(); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.PBAP); }",dbc05e4350ee91f765df2b6622be2bfefb41f248,2018-04-12 01:01:55,18
654568,src_com_android_bluetooth_hfpclient_HeadsetClientStateMachine.java,"@java.lang.Override public void enter() { if (com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, (""Enter Connected: "" + (getCurrentMessage().what))); } mAudioWbs = false; mCommandedSpeakerVolume = -1; if ((mPrevState) == (mConnecting)) { broadcastConnectionState(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_CONNECTING); } else if ((mPrevState) != (mAudioOn)) { java.lang.String prevStateName = ((mPrevState) == null) ? ""null"" : mPrevState.getName(); android.util.Log.e(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, (((""Connected: Illegal state transition from "" + prevStateName) + "" to Connecting, mCurrentDevice="") + (mCurrentDevice))); } }",9ad9697b942257b71b6d280d5a6e7a15f3af676b,"@java.lang.Override public void enter() { if (com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, (""Enter Connected: "" + (getCurrentMessage().what))); } mAudioWbs = false; mCommandedSpeakerVolume = -1; if ((mPrevState) == (mConnecting)) { broadcastConnectionState(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_CONNECTING); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEADSET_CLIENT); } else if ((mPrevState) != (mAudioOn)) { java.lang.String prevStateName = ((mPrevState) == null) ? ""null"" : mPrevState.getName(); android.util.Log.e(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, (((""Connected: Illegal state transition from "" + prevStateName) + "" to Connecting, mCurrentDevice="") + (mCurrentDevice))); } }",12b2447332da438d68f61a73937a2c067b961588,"@java.lang.Override public void enter() { if (com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, (""Enter Connected: "" + (getCurrentMessage().what))); } mAudioWbs = false; mCommandedSpeakerVolume = -1; if ((mPrevState) == (mConnecting)) { broadcastConnectionState(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_CONNECTING); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.HEADSET_CLIENT); } else if ((mPrevState) != (mAudioOn)) { java.lang.String prevStateName = ((mPrevState) == null) ? ""null"" : mPrevState.getName(); android.util.Log.e(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, (((""Connected: Illegal state transition from "" + prevStateName) + "" to Connecting, mCurrentDevice="") + (mCurrentDevice))); } }",062ff211de149044b3affa4278d1e14a1299e830,2018-04-12 01:01:55,18
654568,src_com_android_bluetooth_avrcpcontroller_AvrcpControllerStateMachine.java,"@java.lang.Override public boolean processMessage(android.os.Message msg) { if (com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.DBG) android.util.Log.d(com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.TAG, ("" HandleMessage: "" + (com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.dumpMessageString(msg.what)))); switch (msg.what) { case com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.MESSAGE_PROCESS_CONNECTION_CHANGE : if ((msg.arg1) == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { mBrowseTree.init(); transitionTo(mConnected); android.bluetooth.BluetoothDevice rtDevice = ((android.bluetooth.BluetoothDevice) (msg.obj)); synchronized(mLock) { mRemoteDevice = new com.android.bluetooth.avrcpcontroller.RemoteDevice(rtDevice); mAddressedPlayer = new com.android.bluetooth.avrcpcontroller.AvrcpPlayer(); mIsConnected = true; } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAvrcpController.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, BluetoothProfile.STATE_DISCONNECTED); intent.putExtra(BluetoothProfile.EXTRA_STATE, BluetoothProfile.STATE_CONNECTED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, rtDevice); mContext.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); } break; default : android.util.Log.w(com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.TAG, (""Currently Disconnected not handling "" + (com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.dumpMessageString(msg.what)))); return false; } return true; }",ec445b605b3f6c8373e9172ca2f42bd40e805b1d,"@java.lang.Override public boolean processMessage(android.os.Message msg) { if (com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.DBG) android.util.Log.d(com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.TAG, ("" HandleMessage: "" + (com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.dumpMessageString(msg.what)))); switch (msg.what) { case com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.MESSAGE_PROCESS_CONNECTION_CHANGE : if ((msg.arg1) == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { mBrowseTree.init(); transitionTo(mConnected); android.bluetooth.BluetoothDevice rtDevice = ((android.bluetooth.BluetoothDevice) (msg.obj)); synchronized(mLock) { mRemoteDevice = new com.android.bluetooth.avrcpcontroller.RemoteDevice(rtDevice); mAddressedPlayer = new com.android.bluetooth.avrcpcontroller.AvrcpPlayer(); mIsConnected = true; } com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.AVRCP_CONTROLLER); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAvrcpController.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, BluetoothProfile.STATE_DISCONNECTED); intent.putExtra(BluetoothProfile.EXTRA_STATE, BluetoothProfile.STATE_CONNECTED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, rtDevice); mContext.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); } break; default : android.util.Log.w(com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.TAG, (""Currently Disconnected not handling "" + (com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.dumpMessageString(msg.what)))); return false; } return true; }",610a96b932425ee72e702a71973a5f4ac072b51e,"@java.lang.Override public boolean processMessage(android.os.Message msg) { if (com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.DBG) android.util.Log.d(com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.TAG, ("" HandleMessage: "" + (com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.dumpMessageString(msg.what)))); switch (msg.what) { case com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.MESSAGE_PROCESS_CONNECTION_CHANGE : if ((msg.arg1) == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { mBrowseTree.init(); transitionTo(mConnected); android.bluetooth.BluetoothDevice rtDevice = ((android.bluetooth.BluetoothDevice) (msg.obj)); synchronized(mLock) { mRemoteDevice = new com.android.bluetooth.avrcpcontroller.RemoteDevice(rtDevice); mAddressedPlayer = new com.android.bluetooth.avrcpcontroller.AvrcpPlayer(); mIsConnected = true; } com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.AVRCP_CONTROLLER); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAvrcpController.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, BluetoothProfile.STATE_DISCONNECTED); intent.putExtra(BluetoothProfile.EXTRA_STATE, BluetoothProfile.STATE_CONNECTED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, rtDevice); mContext.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); } break; default : android.util.Log.w(com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.TAG, (""Currently Disconnected not handling "" + (com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.dumpMessageString(msg.what)))); return false; } return true; }",e065489e25b3c7504d547cacf59f30e57f14ad39,2018-04-12 01:01:55,18
654568,src_com_android_bluetooth_mapclient_MceStateMachine.java,"private void onConnectionStateChanged(int prevState, int state) { if ((mDevice) == null) { return; } if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, (((((""Connection state "" + (mDevice)) + "": "") + prevState) + ""->"") + state)); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothMapClient.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }",c014228712a914ff4a1a054cb748f82dfca90170,"private void onConnectionStateChanged(int prevState, int state) { if ((mDevice) == null) { return; } if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, (((((""Connection state "" + (mDevice)) + "": "") + prevState) + ""->"") + state)); } if ((prevState != state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.MAP_CLIENT); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothMapClient.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }",c3fab7fbde9c21aafdc75196b8ffdc1dcf718249,"private void onConnectionStateChanged(int prevState, int state) { if ((mDevice) == null) { return; } if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, (((((""Connection state "" + (mDevice)) + "": "") + prevState) + ""->"") + state)); } if ((prevState != state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.MAP_CLIENT); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothMapClient.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }",0e8e5e6eb80f1831fb3db505bb34da3ec483e8cd,2018-04-12 01:01:55,18
654568,src_com_android_bluetooth_hid_HidDeviceService.java,"private void setAndBroadcastConnectionState(android.bluetooth.BluetoothDevice device, int newState) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, (((((""setAndBroadcastConnectionState(): device="" + (device.getAddress())) + "" oldState="") + (mHidDeviceState)) + "" newState="") + newState)); } if (((mHidDevice) != null) && (!(mHidDevice.equals(device)))) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""Connection state changed for unknown device, ignoring""); return; } int prevState = mHidDeviceState; mHidDeviceState = newState; if (prevState == newState) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""Connection state is unchanged, ignoring""); return; } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHidDevice.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); sendBroadcast(intent, com.android.bluetooth.hid.BLUETOOTH_PERM); }",c6b44bc29477ff95cc17eb4ebc36f23c3ae0f8e9,"private void setAndBroadcastConnectionState(android.bluetooth.BluetoothDevice device, int newState) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, (((((""setAndBroadcastConnectionState(): device="" + (device.getAddress())) + "" oldState="") + (mHidDeviceState)) + "" newState="") + newState)); } if (((mHidDevice) != null) && (!(mHidDevice.equals(device)))) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""Connection state changed for unknown device, ignoring""); return; } int prevState = mHidDeviceState; mHidDeviceState = newState; if (prevState == newState) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""Connection state is unchanged, ignoring""); return; } if (newState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HID_HOST); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHidDevice.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); sendBroadcast(intent, com.android.bluetooth.hid.BLUETOOTH_PERM); }",ec1f0617894601c1b5d66acebdd1a9409ce75498,"private void setAndBroadcastConnectionState(android.bluetooth.BluetoothDevice device, int newState) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, (((((""setAndBroadcastConnectionState(): device="" + (device.getAddress())) + "" oldState="") + (mHidDeviceState)) + "" newState="") + newState)); } if (((mHidDevice) != null) && (!(mHidDevice.equals(device)))) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""Connection state changed for unknown device, ignoring""); return; } int prevState = mHidDeviceState; mHidDeviceState = newState; if (prevState == newState) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""Connection state is unchanged, ignoring""); return; } if (newState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.HID_DEVICE); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHidDevice.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); sendBroadcast(intent, com.android.bluetooth.hid.BLUETOOTH_PERM); }",0e807b10974df2835e2d65a6443c573f3894dc54,2018-04-12 01:01:55,18
654568,src_com_android_bluetooth_hdp_HealthService.java,"private void updateAndSendIntent(android.bluetooth.BluetoothDevice device, int newDeviceState, int prevDeviceState) { if (newDeviceState == (android.bluetooth.BluetoothHealth.STATE_DISCONNECTED)) { mHealthDevices.remove(device); } else { mHealthDevices.put(device, newDeviceState); } }",1d2b055742bf1b32bdc0830ad30896e5939eb05e,"private void updateAndSendIntent(android.bluetooth.BluetoothDevice device, int newDeviceState, int prevDeviceState) { if (newDeviceState == (android.bluetooth.BluetoothHealth.STATE_DISCONNECTED)) { mHealthDevices.remove(device); } else { mHealthDevices.put(device, newDeviceState); } if ((newDeviceState != prevDeviceState) && (newDeviceState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEALTH); } }",b91129f7d57c82ecc32e597c121a45e780d021de,"private void updateAndSendIntent(android.bluetooth.BluetoothDevice device, int newDeviceState, int prevDeviceState) { if (newDeviceState == (android.bluetooth.BluetoothHealth.STATE_DISCONNECTED)) { mHealthDevices.remove(device); } else { mHealthDevices.put(device, newDeviceState); } if ((newDeviceState != prevDeviceState) && (newDeviceState == (android.bluetooth.BluetoothHealth.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.HEALTH); } }",7c88203f6c2024210723689467cfcce1135d0aea,2018-04-12 01:01:55,18
654568,src_com_android_bluetooth_newavrcp_AvrcpTargetService.java,"void deviceConnected(java.lang.String bdaddr, boolean absoluteVolume) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, (((""deviceConnected: bdaddr="" + bdaddr) + "" absoluteVolume="") + absoluteVolume)); mAudioManager.avrcpSupportsAbsoluteVolume(bdaddr, absoluteVolume); }",e6ede96a1b595b2dc36dc6af0da827860f868958,"void deviceConnected(java.lang.String bdaddr, boolean absoluteVolume) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, (((""deviceConnected: bdaddr="" + bdaddr) + "" absoluteVolume="") + absoluteVolume)); mAudioManager.avrcpSupportsAbsoluteVolume(bdaddr, absoluteVolume); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.AVRCP); }",5040d5fc0c2a3429c84f21701fc1cd62d3283519,"void deviceConnected(java.lang.String bdaddr, boolean absoluteVolume) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, (((""deviceConnected: bdaddr="" + bdaddr) + "" absoluteVolume="") + absoluteVolume)); mAudioManager.avrcpSupportsAbsoluteVolume(bdaddr, absoluteVolume); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.AVRCP); }",5284b3f355b53c5739c30cc327ba8b5829067cb7,2018-04-12 01:01:55,18
654568,src_com_android_bluetooth_hfp_HeadsetService.java,"@com.android.internal.annotations.VisibleForTesting public void onConnectionStateChangedFromStateMachine(android.bluetooth.BluetoothDevice device, int fromState, int toState) { synchronized(mStateMachines) { java.util.List<android.bluetooth.BluetoothDevice> audioConnectableDevices = getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.CONNECTING_CONNECTED_STATES); if ((fromState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((audioConnectableDevices.size()) > 1) { mInbandRingingRuntimeDisable = true; doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.SEND_BSIR, 0)); } if ((mActiveDevice) == null) { setActiveDevice(device); } } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (toState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((audioConnectableDevices.size()) <= 1) { mInbandRingingRuntimeDisable = false; doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.SEND_BSIR, 1)); } if (device.equals(mActiveDevice)) { setActiveDevice(null); } } } }",a4b3ee60ad710f2774b41babbd5bf04fe4a34a40,"@com.android.internal.annotations.VisibleForTesting public void onConnectionStateChangedFromStateMachine(android.bluetooth.BluetoothDevice device, int fromState, int toState) { synchronized(mStateMachines) { java.util.List<android.bluetooth.BluetoothDevice> audioConnectableDevices = getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.CONNECTING_CONNECTED_STATES); if ((fromState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((audioConnectableDevices.size()) > 1) { mInbandRingingRuntimeDisable = true; doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.SEND_BSIR, 0)); } if ((mActiveDevice) == null) { setActiveDevice(device); } com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEADSET); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (toState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((audioConnectableDevices.size()) <= 1) { mInbandRingingRuntimeDisable = false; doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.SEND_BSIR, 1)); } if (device.equals(mActiveDevice)) { setActiveDevice(null); } } } }",d02a8384370730f1b87776a70a2c01ea30518401,"@com.android.internal.annotations.VisibleForTesting public void onConnectionStateChangedFromStateMachine(android.bluetooth.BluetoothDevice device, int fromState, int toState) { synchronized(mStateMachines) { java.util.List<android.bluetooth.BluetoothDevice> audioConnectableDevices = getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.CONNECTING_CONNECTED_STATES); if ((fromState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((audioConnectableDevices.size()) > 1) { mInbandRingingRuntimeDisable = true; doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.SEND_BSIR, 0)); } if ((mActiveDevice) == null) { setActiveDevice(device); } com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.HEADSET); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (toState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((audioConnectableDevices.size()) <= 1) { mInbandRingingRuntimeDisable = false; doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.SEND_BSIR, 1)); } if (device.equals(mActiveDevice)) { setActiveDevice(null); } } } }",cba773324761b8ac5062d2aaf42530c31c59758e,2018-04-12 01:01:55,18
654568,src_com_android_bluetooth_btservice_MetricsLogger.java,,,"public static void logProfileConnectionEvent(com.android.bluetooth.BluetoothMetricsProto.BluetoothProfileId profileId) { synchronized(com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts) { com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.merge(profileId, 1, java.lang.Integer::sum); } }",43a76c7a21fffd09a1f4d3768b45e2076c528d75,"public static void logProfileConnectionEvent(com.android.bluetooth.BluetoothMetricsProto.ProfileId profileId) { synchronized(com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts) { com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.merge(profileId, 1, java.lang.Integer::sum); } }",250de37740cff3fc967a5cab23e4ef3932654cfa,2018-04-12 01:01:55,18
654568,src_com_android_bluetooth_btservice_MetricsLogger.java,,,"public static void dumpProto(com.android.bluetooth.BluetoothMetricsProto.BluetoothLog.Builder metricsBuilder) { synchronized(com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts) { com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.forEach(( key, value) -> metricsBuilder.addProfileUsageStats(com.android.bluetooth.BluetoothMetricsProto.ProfileUsageStats.newBuilder().setProfileId(key).setNumTimesConnected(value).build())); com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.clear(); } }",4993f16aaab13c7fd2dc592a3e52710343b93158,"public static void dumpProto(com.android.bluetooth.BluetoothMetricsProto.BluetoothLog.Builder metricsBuilder) { synchronized(com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts) { com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.forEach(( key, value) -> metricsBuilder.addProfileConnectionStats(com.android.bluetooth.BluetoothMetricsProto.ProfileConnectionStats.newBuilder().setProfileId(key).setNumTimesConnected(value).build())); com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.clear(); } }",901016ccebbad6ae6c5ff01ecc2a0748c98ce70c,2018-04-12 01:01:55,18
630505,src_java_com_android_internal_telephony_RILRequest.java,"java.lang.String serialString() { java.lang.StringBuilder sb = new java.lang.StringBuilder(8); java.lang.String sn; long adjustedSerial = (((long) (mSerial)) - (java.lang.Integer.MIN_VALUE)) % 10000; sn = java.lang.Long.toString(adjustedSerial); sb.append('['); for (int i = 0, s = sn.length(); i < (4 - s); i++) { sb.append('0'); } sb.append(sn); sb.append(']'); return sb.toString(); }",999b646ea7c0edb79055bf1b9c1a3443a38500a6,"java.lang.String serialString() { java.lang.StringBuilder sb = new java.lang.StringBuilder(8); java.lang.String sn; sn = java.lang.Integer.toString(mSerial); sb.append('['); for (int i = 0, s = sn.length(); i < (4 - s); i++) { sb.append('0'); } sb.append(sn); sb.append(']'); return sb.toString(); }",e56883792a04aa5e3ff62a4fe497f2f558e983d7,"java.lang.String serialString() { java.lang.StringBuilder sb = new java.lang.StringBuilder(8); java.lang.String sn; int adjustedSerial = (mSerial) % 10000; sn = java.lang.Integer.toString(adjustedSerial); sb.append('['); for (int i = 0, s = sn.length(); i < (4 - s); i++) { sb.append('0'); } sb.append(sn); sb.append(']'); return sb.toString(); }",556a06199ecdf9a1b654a78912347d24a653403d,2018-04-13 17:20:44,4
664504,tests_tests_security_src_android_security_cts_EncryptionTest.java,private boolean isRequired() { return (((com.android.compatibility.common.util.PropertyUtil.getFirstApiLevel()) >= (android.security.cts.EncryptionTest.MIN_API_LEVEL)) && (!(hasLowRAM()))) && (!(isTelevision())); },d9c3c0971a0569640f80e56cc1ee20a8c84fc640,private boolean isRequired() { return (com.android.compatibility.common.util.PropertyUtil.getFirstApiLevel()) >= (android.security.cts.EncryptionTest.MIN_API_LEVEL); },a34c42e7da67645cd949f3b1b46395b229f165fd,private boolean isRequired() { return ((com.android.compatibility.common.util.PropertyUtil.getFirstApiLevel()) >= (android.security.cts.EncryptionTest.MIN_API_LEVEL)) && (!(isTelevision())); },f7083330430406e514c081dcbd25fb7f5ba9602a,2018-04-14 00:02:37,2
663827,harnesses_tradefed_src_com_android_tradefed_targetprep_VtsPythonVirtualenvPreparer.java,"@java.lang.Override public void tearDown(com.android.tradefed.invoker.IInvocationContext context, java.lang.Throwable e) throws com.android.tradefed.device.DeviceNotAvailableException { if (((mVenvDir) != null) && (mIsDirCreator)) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.recursiveDelete(mVenvDir.toPath()); com.android.tradefed.log.LogUtil.CLog.i(""Deleted the virtual env's temp working dir, %s."", mVenvDir); } catch (java.io.IOException exception) { com.android.tradefed.log.LogUtil.CLog.e(""Failed to delete %s: %s"", mVenvDir, exception); } mVenvDir = null; } }",3105103d95cd37e53bb356635d245793f674949e,"@java.lang.Override public synchronized void tearDown(com.android.tradefed.invoker.IInvocationContext context, java.lang.Throwable e) throws com.android.tradefed.device.DeviceNotAvailableException { if (((mVenvDir) != null) && (mIsDirCreator)) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.recursiveDelete(mVenvDir.toPath()); com.android.tradefed.log.LogUtil.CLog.i(""Deleted the virtual env's temp working dir, %s."", mVenvDir); } catch (java.io.IOException exception) { com.android.tradefed.log.LogUtil.CLog.e(""Failed to delete %s: %s"", mVenvDir, exception); } mVenvDir = null; } }",e6c68093e5319ed14c46805df3d9ab25724e9462,"@java.lang.Override public synchronized void tearDown(com.android.tradefed.invoker.IInvocationContext context, java.lang.Throwable e) throws com.android.tradefed.device.DeviceNotAvailableException { --(mNumOfInstances); if ((mNumOfInstances) > 0) { return; } if (((mVenvDir) != null) && (mIsDirCreator)) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.recursiveDelete(mVenvDir.toPath()); com.android.tradefed.log.LogUtil.CLog.i(""Deleted the virtual env's temp working dir, %s."", mVenvDir); } catch (java.io.IOException exception) { com.android.tradefed.log.LogUtil.CLog.e(""Failed to delete %s: %s"", mVenvDir, exception); } mVenvDir = null; } }",99e065d67e9b22a31ba7806ebda56c183a4ca3c2,2018-04-14 04:12:31,13
663827,harnesses_tradefed_src_com_android_tradefed_targetprep_VtsPythonVirtualenvPreparer.java,"@java.lang.Override public void setUp(com.android.tradefed.invoker.IInvocationContext context) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.TargetSetupError { mBuildInfo = context.getBuildInfos().get(0); startVirtualenv(mBuildInfo); setLocalPypiPath(); installDeps(mBuildInfo); }",7bac8880bebf9a1359d31bf2fc53ab9f4660f8cc,"@java.lang.Override public synchronized void setUp(com.android.tradefed.invoker.IInvocationContext context) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.TargetSetupError { mBuildInfo = context.getBuildInfos().get(0); startVirtualenv(mBuildInfo); setLocalPypiPath(); installDeps(mBuildInfo); }",3e364b55fc7d3a111417d139f20ca6ab96df5c17,"@java.lang.Override public synchronized void setUp(com.android.tradefed.invoker.IInvocationContext context) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.TargetSetupError { ++(mNumOfInstances); mBuildInfo = context.getBuildInfos().get(0); if ((mNumOfInstances) == 1) { com.android.tradefed.device.ITestDevice device = context.getDevices().get(0); mDescriptor = device.getDeviceDescriptor(); createVirtualenv(mBuildInfo); setLocalPypiPath(); installDeps(); } addPathToBuild(mBuildInfo); }",6c9a5fae50a5fc764fe98d63642f5f8dd2aa1d61,2018-04-14 04:12:31,13
647079,services_net_java_android_net_apf_ApfGenerator.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public android.net.apf.ApfGenerator addStoreData(android.net.apf.ApfGenerator.Register sourceRegister, int offset) throws android.net.apf.ApfGenerator.IllegalInstructionException { android.net.apf.ApfGenerator.Instruction instruction = new android.net.apf.ApfGenerator.Instruction(android.net.apf.ApfGenerator.Opcodes.STDW, sourceRegister); instruction.setUnsignedImm(offset); addInstruction(instruction); return this; }",2182d93ed0a6dba0882539f04f710cf0322b0919,"public android.net.apf.ApfGenerator addStoreData(android.net.apf.ApfGenerator.Register sourceRegister, int offset) throws android.net.apf.ApfGenerator.IllegalInstructionException { requireApfVersion(3); android.net.apf.ApfGenerator.Instruction instruction = new android.net.apf.ApfGenerator.Instruction(android.net.apf.ApfGenerator.Opcodes.STDW, sourceRegister); instruction.setUnsignedImm(offset); addInstruction(instruction); return this; }",935ab4b1f44e048b3f42c851655fc3f22d6ef062,2018-04-16 05:24:27,14
647079,services_net_java_android_net_apf_ApfGenerator.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public android.net.apf.ApfGenerator addLoadData(android.net.apf.ApfGenerator.Register destinationRegister, int offset) throws android.net.apf.ApfGenerator.IllegalInstructionException { android.net.apf.ApfGenerator.Instruction instruction = new android.net.apf.ApfGenerator.Instruction(android.net.apf.ApfGenerator.Opcodes.LDDW, destinationRegister); instruction.setUnsignedImm(offset); addInstruction(instruction); return this; }",775be81eaaef61b6b1c375f77e94e2e4884f2605,"public android.net.apf.ApfGenerator addLoadData(android.net.apf.ApfGenerator.Register destinationRegister, int offset) throws android.net.apf.ApfGenerator.IllegalInstructionException { requireApfVersion(3); android.net.apf.ApfGenerator.Instruction instruction = new android.net.apf.ApfGenerator.Instruction(android.net.apf.ApfGenerator.Opcodes.LDDW, destinationRegister); instruction.setUnsignedImm(offset); addInstruction(instruction); return this; }",6aef9665f9359e60a5d4b2c1a48b6bdafc735fd1,2018-04-16 05:24:27,14
647079,tests_net_java_android_net_apf_ApfTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testApfData() throws android.net.apf.ApfGenerator.IllegalInstructionException, java.lang.Exception { byte[] packet12345 = new byte[]{ 0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; byte[] expected_data = new byte[32]; android.net.apf.ApfGenerator gen = new android.net.apf.ApfGenerator(); assertDataMemoryContents(android.net.apf.ApfTest.PASS, gen, packet12345, expected_data, 0); gen = new android.net.apf.ApfGenerator(); gen.addLoadImmediate(Register.R0, 42); gen.addLoadImmediate(Register.R1, 2); gen.addStoreData(Register.R0, 3); expected_data[5] = 42; assertDataMemoryContents(android.net.apf.ApfTest.PASS, gen, packet12345, expected_data, 0); gen = new android.net.apf.ApfGenerator(); gen.addLoadImmediate(Register.R0, -2023406815); gen.addLoadImmediate(Register.R1, 2); gen.addStoreData(Register.R0, 3); expected_data[5] = 33; expected_data[6] = 67; expected_data[7] = 100; expected_data[8] = ((byte) (135)); assertDataMemoryContents(android.net.apf.ApfTest.PASS, gen, packet12345, expected_data, 0); assert false; }",61be96dc48ba6a944fc0f0b767b17f24f04a7ab6,"@org.junit.Test public void testApfDataRead() throws android.net.apf.ApfGenerator.IllegalInstructionException, java.lang.Exception { android.net.apf.ApfGenerator gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R1, 3); gen.addLoadData(Register.R0, 7); gen.addJumpIfR0Equals(-2023406815, gen.DROP_LABEL); byte[] program = gen.generate(); byte[] packet = new byte[android.net.apf.ApfTest.MIN_PKT_SIZE]; byte[] data = new byte[32]; data[10] = ((byte) (135)); data[11] = ((byte) (101)); data[12] = ((byte) (67)); data[13] = ((byte) (0)); byte[] expected_data = data.clone(); assertDataMemoryContents(android.net.apf.ApfTest.PASS, program, packet, data, expected_data); data[13] = ((byte) (33)); expected_data = data; assertDataMemoryContents(android.net.apf.ApfTest.DROP, program, packet, data, expected_data); }",6fde7ee8ef6ac2857bf63656d6d887dfd075a926,2018-04-16 05:24:27,14
647079,tests_net_java_android_net_apf_ApfTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void assertDataMemoryContents(int expected, android.net.apf.ApfGenerator gen, byte[] packet, byte[] expected_data, int filterAge) throws android.net.apf.ApfGenerator.IllegalInstructionException, java.lang.Exception { byte[] data = new byte[expected_data.length]; byte[] program = gen.generate(); android.net.apf.ApfTest.assertReturnCodesEqual(expected, android.net.apf.ApfTest.apfSimulate(program, packet, data, filterAge)); if (!(java.util.Arrays.equals(expected_data, data))) { throw new java.lang.Exception((((((""program: "" + (com.android.internal.util.HexDump.toHexString(program))) + ""\ndata memory: "") + (com.android.internal.util.HexDump.toHexString(data))) + ""\nexpected: "") + (com.android.internal.util.HexDump.toHexString(expected_data)))); } }",3f75a79bc45b095d23878c1aba6d3984653d5a17,"private void assertDataMemoryContents(int expected, byte[] program, byte[] packet, byte[] data, byte[] expected_data) throws android.net.apf.ApfGenerator.IllegalInstructionException, java.lang.Exception { android.net.apf.ApfTest.assertReturnCodesEqual(expected, android.net.apf.ApfTest.apfSimulate(program, packet, data, 0)); if (!(java.util.Arrays.equals(expected_data, data))) { throw new java.lang.Exception((((((""program: "" + (com.android.internal.util.HexDump.toHexString(program))) + ""\ndata memory: "") + (com.android.internal.util.HexDump.toHexString(data))) + ""\nexpected: "") + (com.android.internal.util.HexDump.toHexString(expected_data)))); } }",c0f24a95fdc42292f1455fd3a1d934acfd29e62c,2018-04-16 05:24:27,14
664761,src_com_android_bluetooth_newavrcp_AvrcpTargetService.java,"public void dump(java.lang.StringBuilder sb) { if ((mMediaPlayerList) != null) { mMediaPlayerList.dump(sb); } else { sb.append(""\nMedia Player List is empty\n""); } }",7a6c9b5ee4889b99b92468862b5032045b13ff65,"public void dump(java.lang.StringBuilder sb) { sb.append(""\nProfile: AvrcpTargetService:\n""); if ((mMediaPlayerList) != null) { mMediaPlayerList.dump(sb); } else { sb.append(""\nMedia Player List is empty\n""); } mVolumeManager.dump(sb); sb.append(""\n""); }",1a01a21015739f0c138badf3b4c9e57bc6decbbd,"public void dump(java.lang.StringBuilder sb) { sb.append(""\nProfile: AvrcpTargetService:\n""); if ((com.android.bluetooth.avrcp.AvrcpTargetService.sInstance) == null) { sb.append(""AvrcpTargetService not running""); return; } if ((mMediaPlayerList) != null) { mMediaPlayerList.dump(sb); } else { sb.append(""\nMedia Player List is empty\n""); } mVolumeManager.dump(sb); sb.append(""\n""); }",1160163e4d5ca96aeac5e9964fcaeaace43448db,2018-04-16 22:34:38,5
666262,src_java_com_android_internal_telephony_RIL.java,"private void resetProxyAndRequestList() { mRadioProxy = null; mRadioProxyCookie.incrementAndGet(); setRadioState(RadioState.RADIO_UNAVAILABLE); com.android.internal.telephony.RILRequest.resetSerial(); clearRequestList(com.android.internal.telephony.RADIO_NOT_AVAILABLE, false); }",aada0518e9a8883dcadf89b3c2c35029f1a1e5a9,"private void resetProxyAndRequestList() { mRadioProxy = null; mOemHookProxy = null; mRadioProxyCookie.incrementAndGet(); setRadioState(RadioState.RADIO_UNAVAILABLE); com.android.internal.telephony.RILRequest.resetSerial(); clearRequestList(com.android.internal.telephony.RADIO_NOT_AVAILABLE, false); }",fa45b49246ae6dfdb5fa2762afcf2059319e3e80,"private void resetProxyAndRequestList() { mRadioProxy = null; mOemHookProxy = null; mRadioProxyCookie.incrementAndGet(); setRadioState(RadioState.RADIO_UNAVAILABLE); com.android.internal.telephony.RILRequest.resetSerial(); clearRequestList(com.android.internal.telephony.RADIO_NOT_AVAILABLE, false); getRadioProxy(null); }",f2a4d04f6412f40789fcedc41e5855cd517176e0,2018-04-18 01:39:43,3
666281,services_core_java_com_android_server_TelephonyRegistry.java,"private void checkListenerPermission(int events) { if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_LOCATION)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); } if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_INFO)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK)) != 0) { try { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, null); } catch (java.lang.SecurityException e) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_STATE, null); } } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_STATE_PERMISSION_MASK)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRECISE_PHONE_STATE, null); } }",3d6a1e7594b93219dc97f5d005e374e458e9b5ab,"private void checkListenerPermission(int events) { if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_LOCATION)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); } if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_INFO)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK)) != 0) { try { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, null); } catch (java.lang.SecurityException e) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_STATE, null); } } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_STATE_PERMISSION_MASK)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRECISE_PHONE_STATE, null); } if ((events & (android.telephony.PhoneStateListener.LISTEN_OEM_HOOK_RAW_EVENT)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, null); } }",25fdc24a3f2d4cefe05d756ff14827720c193eed,"private boolean checkListenerPermission(int events, int subId, java.lang.String callingPackage, java.lang.String message) { if ((events & (com.android.server.TelephonyRegistry.ENFORCE_COARSE_LOCATION_PERMISSION_MASK)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); if ((mAppOps.noteOp(AppOpsManager.OP_COARSE_LOCATION, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return false; } } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK)) != 0) { if (!(com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState(mContext, subId, callingPackage, message))) { return false; } } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_STATE_PERMISSION_MASK)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRECISE_PHONE_STATE, null); } if ((events & (android.telephony.PhoneStateListener.LISTEN_OEM_HOOK_RAW_EVENT)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, null); } return true; }",65d8bfb37dfced923bd9ea8a27836c9680f87841,2018-04-18 01:39:43,2
665591,deviceside_src_com_android_graphics_benchmark_device_MetricsReporter.java,,,public void startLoop(long timestampNsecs) { loopStartTimesNsecs.add(timestampNsecs); },da5396d2a9bcc2c8022d0f24c56bbd0372071ef1,public void startLoop(long timestampNsecs) { loopStartTimesMsecs.add(timestampNsecs); },a718f6f626267f0cc68112c712b3fc2a4f453794,2018-04-18 19:13:47,2
665591,deviceside_src_com_android_graphics_benchmark_device_MetricsReporter.java,,,"public void end() throws java.io.IOException { java.io.File file = new java.io.File(((""/sdcard/benchmark-"" + (appName)) + "".csv"")); java.nio.file.Files.deleteIfExists(file.toPath()); try (java.io.Writer writer = new java.io.BufferedWriter(new java.io.FileWriter(file))) { for (java.lang.Long timestamp : loopStartTimesNsecs) { writer.append(timestamp.toString()); writer.append('\n'); } } }",4a11671f252af7d2fa6a3eb4dcbe8d6132e7795a,"public void end() throws java.io.IOException { java.io.File file = new java.io.File(((""/sdcard/benchmark-"" + (appName)) + "".csv"")); java.nio.file.Files.deleteIfExists(file.toPath()); try (java.io.Writer writer = new java.io.BufferedWriter(new java.io.FileWriter(file))) { for (java.lang.Long timestamp : loopStartTimesMsecs) { writer.append(timestamp.toString()); writer.append('\n'); } } }",5e5f560cc23317bcadb46d45b708390221cf10db,2018-04-18 19:13:47,2
666577,src_main_java_com_android_vts_entity_TestSuiteResultEntity.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE getGroupType() { if ((this.getNormalizedVersion(this.buildSystemFingerprint)) == (this.getNormalizedVersion(this.buildVendorFingerprint))) { return com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE.OTA; } else if (this.buildVendorFingerprint.endsWith(""release-keys"")) { return com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE.SIGNED; } else { return com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE.TOT; } }",51048aba6f8b82026f480bb19d1eda7e67fbcd85,"public com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE getGroupType() { if ((this.getNormalizedVersion(this.buildSystemFingerprint)) != (this.getNormalizedVersion(this.buildVendorFingerprint))) { return com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE.OTA; } else if (this.buildVendorFingerprint.endsWith(""release-keys"")) { return com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE.SIGNED; } else { return com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE.TOT; } }",21118ff68e08b414653a3ca895270863f35fd28f,2018-04-19 06:12:59,6
666577,src_main_java_com_android_vts_entity_TestSuiteResultEntity.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String getNormalizedVersion(java.lang.String fingerprint) { java.util.Map<java.lang.String, java.util.regex.Pattern> partternMap = new java.util.HashMap<java.lang.String, java.util.regex.Pattern>() { { put(""9"", java.util.regex.Pattern.compile(""(:9(\\.\\d\\.\\d|\\.\\d)|:P[A-Z]/)"", java.util.regex.Pattern.CASE_INSENSITIVE)); put(""8.1"", java.util.regex.Pattern.compile(""(:8\\.1\\.\\d\\/|:O[A-Z]-MR1/)"", java.util.regex.Pattern.CASE_INSENSITIVE)); put(""8"", java.util.regex.Pattern.compile(""(:8\\.0\\.\\d\\/|:O[A-Z]/)"", java.util.regex.Pattern.CASE_INSENSITIVE)); } }; for (java.util.Map.Entry<java.lang.String, java.util.regex.Pattern> entry : partternMap.entrySet()) { java.util.regex.Matcher systemMatcher = entry.getValue().matcher(fingerprint); if (systemMatcher.find()) { return entry.getKey(); } } return ""unknown-version-"" + (java.time.Instant.now().toEpochMilli()); }",bb4d14134b73a4c343a5c3b778fb587f80dcae56,"private java.lang.String getNormalizedVersion(java.lang.String fingerprint) { java.util.Map<java.lang.String, java.util.regex.Pattern> partternMap = new java.util.HashMap<java.lang.String, java.util.regex.Pattern>() { { put(""9"", java.util.regex.Pattern.compile(""(:9(\\.\\d\\.\\d|\\.\\d|)|:P\\w*/)"", java.util.regex.Pattern.CASE_INSENSITIVE)); put(""8.1"", java.util.regex.Pattern.compile(""(:8\\.1\\.\\d\\/|:O\\w+-MR1/)"", java.util.regex.Pattern.CASE_INSENSITIVE)); put(""8"", java.util.regex.Pattern.compile(""(:8\\.0\\.\\d\\/|:O\\w*/)"", java.util.regex.Pattern.CASE_INSENSITIVE)); } }; for (java.util.Map.Entry<java.lang.String, java.util.regex.Pattern> entry : partternMap.entrySet()) { java.util.regex.Matcher systemMatcher = entry.getValue().matcher(fingerprint); if (systemMatcher.find()) { return entry.getKey(); } } return ""unknown-version-"" + (java.time.Instant.now().toEpochMilli()); }",1f475db97d322775844d53df963e21180e31be2a,2018-04-19 06:12:59,6
660202,tests_accessibilityservice_src_android_accessibilityservice_cts_AccessibilityWindowQueryTest.java,"@android.test.suitebuilder.annotation.MediumTest public void testWindowDockAndUndock_dividerWindowAppearsAndDisappears() throws java.lang.Exception { if (getInstrumentation().getContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_LEANBACK)) { return; } try { if (!(getInstrumentation().getContext().getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier(""config_supportsSplitScreenMultiWindow"", ""bool"", ""android"")))) { return; } } catch (android.content.res.Resources e) { } if (!(getInstrumentation().getContext().getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier(""config_supportsMultiWindow"", ""bool"", ""android"")))) { return; } setAccessInteractiveWindowsFlag(); final android.app.UiAutomation uiAutomation = getInstrumentation().getUiAutomation(); assertFalse(isDividerWindowPresent(uiAutomation)); java.lang.Runnable toggleSplitScreenRunnable = new java.lang.Runnable() { @java.lang.Override public void run() { assertTrue(uiAutomation.performGlobalAction(AccessibilityService.GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN)); } }; android.app.UiAutomation.AccessibilityEventFilter windowsChangedFilter = new android.app.UiAutomation.AccessibilityEventFilter() { @java.lang.Override public boolean accept(android.view.accessibility.AccessibilityEvent event) { return (event.getEventType()) == (android.view.accessibility.AccessibilityEvent.TYPE_WINDOWS_CHANGED); } }; uiAutomation.executeAndWaitForEvent(toggleSplitScreenRunnable, windowsChangedFilter, android.accessibilityservice.cts.TIMEOUT_ASYNC_PROCESSING); waitForIdle(); assertTrue(isDividerWindowPresent(uiAutomation)); uiAutomation.executeAndWaitForEvent(toggleSplitScreenRunnable, windowsChangedFilter, android.accessibilityservice.cts.TIMEOUT_ASYNC_PROCESSING); waitForIdle(); assertFalse(isDividerWindowPresent(uiAutomation)); }",ecff83fc35d377cd09426ca3c840a581707d4796,"@android.test.suitebuilder.annotation.MediumTest public void testWindowDockAndUndock_dividerWindowAppearsAndDisappears() throws java.lang.Exception { android.app.ActivityManager mactivityManager = ((android.app.ActivityManager) (getInstrumentation().getContext().getSystemService(Context.ACTIVITY_SERVICE))); if (getInstrumentation().getContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_LEANBACK)) { return; } try { if (!(getInstrumentation().getContext().getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier(""config_supportsSplitScreenMultiWindow"", ""bool"", ""android"")))) { return; } } catch (android.content.res.Resources e) { } if ((!(getInstrumentation().getContext().getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier(""config_supportsMultiWindow"", ""bool"", ""android"")))) || (mactivityManager.isLowRamDevice())) { return; } setAccessInteractiveWindowsFlag(); final android.app.UiAutomation uiAutomation = getInstrumentation().getUiAutomation(); assertFalse(isDividerWindowPresent(uiAutomation)); java.lang.Runnable toggleSplitScreenRunnable = new java.lang.Runnable() { @java.lang.Override public void run() { assertTrue(uiAutomation.performGlobalAction(AccessibilityService.GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN)); } }; android.app.UiAutomation.AccessibilityEventFilter windowsChangedFilter = new android.app.UiAutomation.AccessibilityEventFilter() { @java.lang.Override public boolean accept(android.view.accessibility.AccessibilityEvent event) { return (event.getEventType()) == (android.view.accessibility.AccessibilityEvent.TYPE_WINDOWS_CHANGED); } }; uiAutomation.executeAndWaitForEvent(toggleSplitScreenRunnable, windowsChangedFilter, android.accessibilityservice.cts.TIMEOUT_ASYNC_PROCESSING); waitForIdle(); assertTrue(isDividerWindowPresent(uiAutomation)); uiAutomation.executeAndWaitForEvent(toggleSplitScreenRunnable, windowsChangedFilter, android.accessibilityservice.cts.TIMEOUT_ASYNC_PROCESSING); waitForIdle(); assertFalse(isDividerWindowPresent(uiAutomation)); }",59b02250ebdebf59eb7cdfaca5ff7f5a79e31acb,"@android.test.suitebuilder.annotation.MediumTest public void testWindowDockAndUndock_dividerWindowAppearsAndDisappears() throws java.lang.Exception { android.app.ActivityManager activityManager = ((android.app.ActivityManager) (getInstrumentation().getContext().getSystemService(Context.ACTIVITY_SERVICE))); if (getInstrumentation().getContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_LEANBACK)) { return; } try { if (!(getInstrumentation().getContext().getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier(""config_supportsSplitScreenMultiWindow"", ""bool"", ""android"")))) { return; } } catch (android.content.res.Resources e) { } if ((!(getInstrumentation().getContext().getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier(""config_supportsMultiWindow"", ""bool"", ""android"")))) || (activityManager.isLowRamDevice())) { return; } setAccessInteractiveWindowsFlag(); final android.app.UiAutomation uiAutomation = getInstrumentation().getUiAutomation(); assertFalse(isDividerWindowPresent(uiAutomation)); java.lang.Runnable toggleSplitScreenRunnable = new java.lang.Runnable() { @java.lang.Override public void run() { assertTrue(uiAutomation.performGlobalAction(AccessibilityService.GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN)); } }; android.app.UiAutomation.AccessibilityEventFilter windowsChangedFilter = new android.app.UiAutomation.AccessibilityEventFilter() { @java.lang.Override public boolean accept(android.view.accessibility.AccessibilityEvent event) { return (event.getEventType()) == (android.view.accessibility.AccessibilityEvent.TYPE_WINDOWS_CHANGED); } }; uiAutomation.executeAndWaitForEvent(toggleSplitScreenRunnable, windowsChangedFilter, android.accessibilityservice.cts.TIMEOUT_ASYNC_PROCESSING); waitForIdle(); assertTrue(isDividerWindowPresent(uiAutomation)); uiAutomation.executeAndWaitForEvent(toggleSplitScreenRunnable, windowsChangedFilter, android.accessibilityservice.cts.TIMEOUT_ASYNC_PROCESSING); waitForIdle(); assertFalse(isDividerWindowPresent(uiAutomation)); }",cb344e5e2ea2d938e3971f4dc4ba3100f7375636,2018-04-19 17:05:51,3
667842,tests_net_java_android_net_apf_ApfTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testImmediateEncoding() throws android.net.apf.ApfGenerator.IllegalInstructionException { final int LI_OPCODE = 13 << 3; android.net.apf.ApfGenerator gen; gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, 0); assertProgramEquals(new byte[]{ LI_OPCODE | (0 << 1) }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, 42); assertProgramEquals(new byte[]{ LI_OPCODE | (1 << 1), 42 }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, 4660); assertProgramEquals(new byte[]{ LI_OPCODE | (2 << 1), 18, 52 }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, 305419896); assertProgramEquals(new byte[]{ LI_OPCODE | (3 << 1), 18, 52, 86, 120 }, gen.generate()); }",9ef38335fd8df3c23962215590b900ce981c07ec,"@org.junit.Test public void testImmediateEncoding() throws android.net.apf.ApfGenerator.IllegalInstructionException { final int LI_OPCODE = 13 << 3; android.net.apf.ApfGenerator gen; gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, 0); assertProgramEquals(new byte[]{ LI_OPCODE | (0 << 1) }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, 42); assertProgramEquals(new byte[]{ LI_OPCODE | (1 << 1), 42 }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R1, 4660); assertProgramEquals(new byte[]{ (LI_OPCODE | (2 << 1)) | 1, 18, 52 }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, 305419896); assertProgramEquals(new byte[]{ LI_OPCODE | (3 << 1), 18, 52, 86, 120 }, gen.generate()); }",f121af24daa5e99f937a4a8c3a89def4ff2c0640,2018-04-20 01:09:31,2
667842,tests_net_java_android_net_apf_ApfTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testNegativeImmediateEncoding() throws android.net.apf.ApfGenerator.IllegalInstructionException { final int LI_OPCODE = 13 << 3; android.net.apf.ApfGenerator gen; gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, (-42)); assertProgramEquals(new byte[]{ LI_OPCODE | (1 << 1), -42 }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, (-4386)); assertProgramEquals(new byte[]{ LI_OPCODE | (2 << 1), ((byte) (238)), ((byte) (222)) }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, (-287454020)); assertProgramEquals(new byte[]{ LI_OPCODE | (3 << 1), ((byte) (238)), ((byte) (221)), ((byte) (204)), ((byte) (188)) }, gen.generate()); }",965010ac371464da25696dc561b7cd8d8f74428c,"@org.junit.Test public void testNegativeImmediateEncoding() throws android.net.apf.ApfGenerator.IllegalInstructionException { final int LI_OPCODE = 13 << 3; android.net.apf.ApfGenerator gen; gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, (-42)); assertProgramEquals(new byte[]{ LI_OPCODE | (1 << 1), -42 }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R1, (-4386)); assertProgramEquals(new byte[]{ (LI_OPCODE | (2 << 1)) | 1, ((byte) (238)), ((byte) (222)) }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, (-287454020)); assertProgramEquals(new byte[]{ LI_OPCODE | (3 << 1), ((byte) (238)), ((byte) (221)), ((byte) (204)), ((byte) (188)) }, gen.generate()); }",f8e579f22a2cdfca3b66b5417ec2a642bd5930bf,2018-04-20 01:09:31,2
667583,src_main_java_com_android_vts_servlet_ShowGcsLogServlet.java,"@java.lang.Override public void doGetHandler(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException { if ((keyFileInputStream) == null) { request.setAttribute(""error_title"", ""GCS Key file Error""); request.setAttribute(""error_message"", ""The GCS Key file is not existed!""); javax.servlet.RequestDispatcher dispatcher = request.getRequestDispatcher(com.android.vts.servlet.ERROR_MESSAGE_JSP); try { dispatcher.forward(request, response); } catch (javax.servlet.ServletException e) { logger.log(java.util.logging.Level.SEVERE, ""Servlet Excpetion caught : "", e); } } else { java.lang.String action = ((request.getParameter(""action"")) == null) ? ""read"" : request.getParameter(""action""); java.lang.String path = ((request.getParameter(""path"")) == null) ? ""/"" : request.getParameter(""path""); java.lang.String entry = ((request.getParameter(""entry"")) == null) ? """" : request.getParameter(""entry""); java.nio.file.Path pathInfo = java.nio.file.Paths.get(path); com.google.cloud.storage.Bucket vtsReportBucket = storage.get(com.android.vts.servlet.ShowGcsLogServlet.GCS_BUCKET_NAME); java.util.List<java.lang.String> dirList = new java.util.ArrayList<>(); java.util.List<java.lang.String> fileList = new java.util.ArrayList<>(); java.util.List<java.lang.String> entryList = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.Object> resultMap = new java.util.HashMap<>(); java.lang.String entryContent = """"; if (pathInfo.toString().endsWith("".zip"")) { com.google.cloud.storage.Blob blobFile = ((com.google.cloud.storage.Blob) (this.syncCache.get(path.toString()))); if (blobFile == null) { blobFile = vtsReportBucket.get(path); this.syncCache.put(path.toString(), blobFile); } if (action.equalsIgnoreCase(""read"")) { java.io.InputStream blobInputStream = new java.io.ByteArrayInputStream(blobFile.getContent()); java.util.zip.ZipInputStream zipInputStream = new java.util.zip.ZipInputStream(blobInputStream); java.util.zip.ZipEntry zipEntry; while ((zipEntry = zipInputStream.getNextEntry()) != null) { if (zipEntry.isDirectory()) { } else { if ((entry.length()) > 0) { logger.log(java.util.logging.Level.INFO, (""param entry => "" + entry)); if (zipEntry.getName().equals(entry)) { logger.log(java.util.logging.Level.INFO, (""matched !!!! "" + (zipEntry.getName()))); entryContent = org.apache.commons.io.IOUtils.toString(zipInputStream, java.nio.charset.StandardCharsets.UTF_8.name()); } } else { entryList.add(zipEntry.getName()); } } } resultMap.put(""entryList"", entryList); resultMap.put(""entryContent"", entryContent); java.lang.String json = new com.google.gson.Gson().toJson(resultMap); response.setContentType(""application/json""); response.setCharacterEncoding(""UTF-8""); response.getWriter().write(json); } else { response.setContentType(""application/octet-stream""); response.setContentLength(blobFile.getSize().intValue()); response.setHeader(""Content-Disposition"", ((""attachment; filename=\"""" + (pathInfo.getFileName())) + ""\"""")); response.getOutputStream().write(blobFile.getContent()); } } else { logger.log(java.util.logging.Level.INFO, (""path info => "" + pathInfo)); logger.log(java.util.logging.Level.INFO, (""path name count => "" + (pathInfo.getNameCount()))); com.google.cloud.storage.Storage.BlobListOption[] listOptions; if ((pathInfo.getNameCount()) == 0) { listOptions = new com.google.cloud.storage.Storage.BlobListOption[]{ com.google.cloud.storage.Storage.BlobListOption.currentDirectory() }; } else { if ((pathInfo.getNameCount()) <= 1) { dirList.add(""/""); } else { dirList.add(pathInfo.getParent().toString()); } listOptions = new com.google.cloud.storage.Storage.BlobListOption[]{ com.google.cloud.storage.Storage.BlobListOption.currentDirectory(), com.google.cloud.storage.Storage.BlobListOption.prefix(((pathInfo.toString()) + ""/"")) }; } java.lang.Iterable<com.google.cloud.storage.Blob> blobIterable = vtsReportBucket.list(listOptions).iterateAll(); java.util.Iterator<com.google.cloud.storage.Blob> blobIterator = blobIterable.iterator(); while (blobIterator.hasNext()) { com.google.cloud.storage.Blob blob = blobIterator.next(); logger.log(java.util.logging.Level.INFO, (""blob name => "" + blob)); if (blob.isDirectory()) { logger.log(java.util.logging.Level.INFO, (""directory name => "" + (blob.getName()))); dirList.add(blob.getName()); } else { logger.log(java.util.logging.Level.INFO, (""file name => "" + (blob.getName()))); fileList.add(java.nio.file.Paths.get(blob.getName()).getFileName().toString()); } } response.setStatus(HttpServletResponse.SC_OK); request.setAttribute(""entryList"", entryList); request.setAttribute(""dirList"", dirList); request.setAttribute(""fileList"", fileList); request.setAttribute(""path"", path); javax.servlet.RequestDispatcher dispatcher = request.getRequestDispatcher(com.android.vts.servlet.ShowGcsLogServlet.GCS_LOG_JSP); try { dispatcher.forward(request, response); } catch (javax.servlet.ServletException e) { logger.log(java.util.logging.Level.SEVERE, ""Servlet Excpetion caught : "", e); } } } }",af49694717250811e40279c8a690247d1918573b,"@java.lang.Override public void doGetHandler(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException { if ((keyFileInputStream) == null) { request.setAttribute(""error_title"", ""GCS Key file Error""); request.setAttribute(""error_message"", ""The GCS Key file is not existed!""); javax.servlet.RequestDispatcher dispatcher = request.getRequestDispatcher(com.android.vts.servlet.ERROR_MESSAGE_JSP); try { dispatcher.forward(request, response); } catch (javax.servlet.ServletException e) { logger.log(java.util.logging.Level.SEVERE, ""Servlet Excpetion caught : "", e); } } else { java.lang.String pathInfo = request.getPathInfo(); java.lang.String[] pathParts = pathInfo.split(""/""); if ((pathParts.length) > 1) { java.lang.String testType = pathParts[1]; if (testType.equalsIgnoreCase(""download"")) { downloadHandler(request, response); } else { logger.log(java.util.logging.Level.WARNING, ""Unknown path access!""); } } else { defaultHandler(request, response); } } }",e8c43f24c0464d0372d4cb45f0cf1201a3c5881d,"@java.lang.Override public void doGetHandler(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException { if ((keyFileInputStream) == null) { request.setAttribute(""error_title"", ""GCS Key file Error""); request.setAttribute(""error_message"", ""The GCS Key file is not existed!""); javax.servlet.RequestDispatcher dispatcher = request.getRequestDispatcher(com.android.vts.servlet.ERROR_MESSAGE_JSP); try { dispatcher.forward(request, response); } catch (javax.servlet.ServletException e) { logger.log(java.util.logging.Level.SEVERE, ""Servlet Excpetion caught : "", e); } } else { java.lang.String pathInfo = request.getPathInfo(); if (java.util.Objects.nonNull(pathInfo)) { if (pathInfo.equalsIgnoreCase(""download"")) { downloadHandler(request, response); } else { logger.log(java.util.logging.Level.WARNING, ""Unknown path access!""); } } else { defaultHandler(request, response); } } }",c2866874cb46e768715295f5df66a39f78c5038f,2018-04-20 01:38:08,2
667841,mojo_public_java_bindings_src_org_chromium_mojo_bindings_Interface.java,"@java.lang.Override public void call(org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams response) { if (((response.output) != null) && ((response.output.which()) == (RunOutput.Tag.QueryVersionResult))) { mVersion = response.output.getQueryVersionResult().version; } try { callback.call(mVersion); } catch (java.lang.RuntimeException e) { android.util.Log.wtf(""org.chromium.mojo.bindings.Interface"", ""Uncaught runtime exception"", e); } }",d7628005c06b13ae249a5a75d6a78ccaeeb229c1,@java.lang.Override public void call(org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams response) { if (((response.output) != null) && ((response.output.which()) == (RunOutput.Tag.QueryVersionResult))) { mVersion = response.output.getQueryVersionResult().version; } callback.call(mVersion); },ea865b26ba2b9cd6564e566ac4ddddbc8e272041,"@java.lang.Override public void call(org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams response) { if (((response.output) != null) && ((response.output.which()) == (RunOutput.Tag.QueryVersionResult))) { mVersion = response.output.getQueryVersionResult().version; } try { callback.call(mVersion); } catch (java.lang.RuntimeException e) { android.util.Log.wtf(""org.chromium.mojo.bindings.Interface"", ""Uncaught runtime exception"", e); } }",d7628005c06b13ae249a5a75d6a78ccaeeb229c1,2018-04-20 03:55:27,5
667841,mojo_public_java_bindings_src_org_chromium_mojo_bindings_Interface.java,"@java.lang.Override public void queryVersion(final org.chromium.mojo.bindings.Callbacks.Callback1<java.lang.Integer> callback) { RunMessageParams message = new RunMessageParams(); message.input = new org.chromium.mojo.bindings.interfacecontrol.RunInput(); message.input.setQueryVersion(new QueryVersion()); org.chromium.mojo.bindings.InterfaceControlMessagesHelper.sendRunMessage(getCore(), mMessageReceiver, message, new org.chromium.mojo.bindings.Callbacks.Callback1<org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams>() { @java.lang.Override public void call(org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams response) { if (((response.output) != null) && ((response.output.which()) == (RunOutput.Tag.QueryVersionResult))) { mVersion = response.output.getQueryVersionResult().version; } try { callback.call(mVersion); } catch (java.lang.RuntimeException e) { android.util.Log.wtf(""org.chromium.mojo.bindings.Interface"", ""Uncaught runtime exception"", e); } } }); }",2d029ea730ce0eab91b8ae236853551e14642167,"@java.lang.Override public void queryVersion(final org.chromium.mojo.bindings.Callbacks.Callback1<java.lang.Integer> callback) { RunMessageParams message = new RunMessageParams(); message.input = new org.chromium.mojo.bindings.interfacecontrol.RunInput(); message.input.setQueryVersion(new QueryVersion()); org.chromium.mojo.bindings.InterfaceControlMessagesHelper.sendRunMessage(getCore(), mMessageReceiver, message, new org.chromium.mojo.bindings.Callbacks.Callback1<org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams>() { @java.lang.Override public void call(org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams response) { if (((response.output) != null) && ((response.output.which()) == (RunOutput.Tag.QueryVersionResult))) { mVersion = response.output.getQueryVersionResult().version; } callback.call(mVersion); } }); }",dc9729e42fe86d544d2f177caa7578625849a8c7,"@java.lang.Override public void queryVersion(final org.chromium.mojo.bindings.Callbacks.Callback1<java.lang.Integer> callback) { RunMessageParams message = new RunMessageParams(); message.input = new org.chromium.mojo.bindings.interfacecontrol.RunInput(); message.input.setQueryVersion(new QueryVersion()); org.chromium.mojo.bindings.InterfaceControlMessagesHelper.sendRunMessage(getCore(), mMessageReceiver, message, new org.chromium.mojo.bindings.Callbacks.Callback1<org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams>() { @java.lang.Override public void call(org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams response) { if (((response.output) != null) && ((response.output.which()) == (RunOutput.Tag.QueryVersionResult))) { mVersion = response.output.getQueryVersionResult().version; } try { callback.call(mVersion); } catch (java.lang.RuntimeException e) { android.util.Log.wtf(""org.chromium.mojo.bindings.Interface"", ""Uncaught runtime exception"", e); } } }); }",2d029ea730ce0eab91b8ae236853551e14642167,2018-04-20 03:55:27,5
667841,mojo_public_java_bindings_src_org_chromium_mojo_bindings_RouterImpl.java,"@java.lang.Override public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver responder) { org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage(); assert messageWithHeader.getHeader().hasFlag(MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG); synchronized(mResponders) { long requestId = (mNextRequestId)++; if (requestId == 0) { requestId = (mNextRequestId)++; } if (mResponders.containsKey(requestId)) { throw new java.lang.IllegalStateException(""Unable to find a new request identifier.""); } messageWithHeader.setRequestId(requestId); if (!(mConnector.accept(messageWithHeader))) { return false; } mResponders.put(requestId, responder); } return true; }",02dca2a6f3fdde21aa7b8e14bc6b59dbe13e0527,"@java.lang.Override public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver responder) { org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage(); assert messageWithHeader.getHeader().hasFlag(MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG); long requestId = (mNextRequestId)++; if (requestId == 0) { requestId = (mNextRequestId)++; } if (mResponders.containsKey(requestId)) { throw new java.lang.IllegalStateException(""Unable to find a new request identifier.""); } messageWithHeader.setRequestId(requestId); if (!(mConnector.accept(messageWithHeader))) { return false; } mResponders.put(requestId, responder); return true; }",fe6ec99512fddd4434a58e23d5c652c776778f2d,"@java.lang.Override public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver responder) { org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage(); assert messageWithHeader.getHeader().hasFlag(MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG); synchronized(mResponders) { long requestId = (mNextRequestId)++; if (requestId == 0) { requestId = (mNextRequestId)++; } if (mResponders.containsKey(requestId)) { throw new java.lang.IllegalStateException(""Unable to find a new request identifier.""); } messageWithHeader.setRequestId(requestId); if (!(mConnector.accept(messageWithHeader))) { return false; } mResponders.put(requestId, responder); } return true; }",02dca2a6f3fdde21aa7b8e14bc6b59dbe13e0527,2018-04-20 03:55:27,5
667841,mojo_public_java_bindings_src_org_chromium_mojo_bindings_RouterImpl.java,"private boolean handleIncomingMessage(org.chromium.mojo.bindings.Message message) { org.chromium.mojo.bindings.MessageHeader header = message.asServiceMessage().getHeader(); if (header.hasFlag(MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) { if ((mIncomingMessageReceiver) != null) { return mIncomingMessageReceiver.acceptWithResponder(message, new org.chromium.mojo.bindings.RouterImpl.ResponderThunk()); } close(); return false; } else if (header.hasFlag(MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) { long requestId = header.getRequestId(); org.chromium.mojo.bindings.MessageReceiver responder; synchronized(mResponders) { responder = mResponders.get(requestId); if (responder == null) { return false; } mResponders.remove(requestId); } return responder.accept(message); } else { if ((mIncomingMessageReceiver) != null) { return mIncomingMessageReceiver.accept(message); } } return false; }",a466fbb9583d25123eddb348ceb62c10aa4dd1bc,"private boolean handleIncomingMessage(org.chromium.mojo.bindings.Message message) { org.chromium.mojo.bindings.MessageHeader header = message.asServiceMessage().getHeader(); if (header.hasFlag(MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) { if ((mIncomingMessageReceiver) != null) { return mIncomingMessageReceiver.acceptWithResponder(message, new org.chromium.mojo.bindings.RouterImpl.ResponderThunk()); } close(); return false; } else if (header.hasFlag(MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) { long requestId = header.getRequestId(); org.chromium.mojo.bindings.MessageReceiver responder = mResponders.get(requestId); if (responder == null) { return false; } mResponders.remove(requestId); return responder.accept(message); } else { if ((mIncomingMessageReceiver) != null) { return mIncomingMessageReceiver.accept(message); } } return false; }",2ff01036b12f9b5b7ea076c0be123636b5bbba68,"private boolean handleIncomingMessage(org.chromium.mojo.bindings.Message message) { org.chromium.mojo.bindings.MessageHeader header = message.asServiceMessage().getHeader(); if (header.hasFlag(MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) { if ((mIncomingMessageReceiver) != null) { return mIncomingMessageReceiver.acceptWithResponder(message, new org.chromium.mojo.bindings.RouterImpl.ResponderThunk()); } close(); return false; } else if (header.hasFlag(MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) { long requestId = header.getRequestId(); org.chromium.mojo.bindings.MessageReceiver responder; synchronized(mResponders) { responder = mResponders.get(requestId); if (responder == null) { return false; } mResponders.remove(requestId); } return responder.accept(message); } else { if ((mIncomingMessageReceiver) != null) { return mIncomingMessageReceiver.accept(message); } } return false; }",a466fbb9583d25123eddb348ceb62c10aa4dd1bc,2018-04-20 03:55:27,5
667143,hostside_src_com_android_graphics_benchmark_testtype_GraphicsBenchmarkHostsideController.java,"@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.name())) + ""]"")); } }",4783a59530930bb5245fcc1e3b48e440042ae3e8,"@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); com.android.ddmlib.testrunner.TestIdentifier identifier = new com.android.ddmlib.testrunner.TestIdentifier(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.name())) + ""]"")); java.util.Map<java.lang.String, java.lang.String> metrics = new java.util.HashMap<>(); listener.testStarted(identifier); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.name())) + ""]"")); listener.testEnded(identifier, metrics); } }",6ff0b0670ebd850cb62da2ee932949fe4d131a9d,"@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.Map<java.lang.String, java.lang.String> runMetrics = new java.util.HashMap<>(); listener.testRunStarted(""graphicsbenchmark"", mApks.size()); for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); com.android.ddmlib.testrunner.TestIdentifier identifier = new com.android.ddmlib.testrunner.TestIdentifier(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.name())) + ""]"")); java.util.Map<java.lang.String, java.lang.String> testMetrics = new java.util.HashMap<>(); listener.testStarted(identifier); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.name())) + ""]"")); listener.testEnded(identifier, testMetrics); } listener.testRunEnded(0, runMetrics); }",e95f7d3165138fc40aa277b58912b51d2a1cafa3,2018-04-20 20:28:26,3
664923,harnesses_tradefed_tests_src_com_android_tradefed_util_VtsPythonRunnerHelperTest.java,"private com.android.tradefed.util.IRunUtil createMockRunUtil(com.android.tradefed.util.CommandResult result) { com.android.tradefed.util.IRunUtil runUtil = org.easymock.EasyMock.createMock(com.android.tradefed.util.IRunUtil.class); org.easymock.EasyMock.expect(runUtil.runTimedCmd(org.easymock.EasyMock.anyLong(), org.easymock.EasyMock.eq(""which""), org.easymock.EasyMock.eq(""python""))).andReturn(result).anyTimes(); org.easymock.EasyMock.expect(runUtil.runTimedCmd(org.easymock.EasyMock.anyLong(), org.easymock.EasyMock.eq(""where""), org.easymock.EasyMock.eq(""python.exe""))).andReturn(result).anyTimes(); org.easymock.EasyMock.replay(runUtil); return runUtil; }",2bb5af0f0ce1bc80ec3f23b929bb0993eb8c5f43,"private com.android.tradefed.util.IRunUtil createMockRunUtil() { com.android.tradefed.util.IRunUtil runUtil = new com.android.tradefed.util.RunUtil() { private java.lang.String path = null; @java.lang.Override public void setEnvVariable(java.lang.String key, java.lang.String value) { super.setEnvVariable(key, value); if (key.equals(""PATH"")) { path = value; } } @java.lang.Override public com.android.tradefed.util.CommandResult runTimedCmd(final long timeout, final java.lang.String... command) { com.android.tradefed.util.CommandResult cmdRes = new com.android.tradefed.util.CommandResult(com.android.tradefed.util.CommandStatus.SUCCESS); java.lang.String out = """"; if ((((command.length) == 2) && (command[0].equals(""which""))) && (command[1].equals(""python""))) { if ((path) != null) { out = (path) + ""/python""; } else { out = ""/usr/bin/python""; } } cmdRes.setStdout(out); return cmdRes; } }; return runUtil; }",38a3710e4c4cb7cc4246bbdd26b327e0324526e9,"private com.android.tradefed.util.IRunUtil createMockRunUtil() { com.android.tradefed.util.IRunUtil runUtil = new com.android.tradefed.util.RunUtil() { private java.lang.String path = null; @java.lang.Override public void setEnvVariable(java.lang.String key, java.lang.String value) { super.setEnvVariable(key, value); if (key.equals(""PATH"")) { path = value; } } @java.lang.Override public com.android.tradefed.util.CommandResult runTimedCmd(final long timeout, final java.lang.String... command) { com.android.tradefed.util.CommandResult cmdRes = new com.android.tradefed.util.CommandResult(com.android.tradefed.util.CommandStatus.SUCCESS); java.lang.String out = """"; if ((((command.length) == 2) && (command[0].equals(""which""))) && (command[1].equals(""python""))) { if ((path) != null) { out = (path.split("":"")[0]) + ""/python""; } else { out = ""/usr/bin/python""; } } cmdRes.setStdout(out); return cmdRes; } }; return runUtil; }",db9fc115215f7dd069190cdf3856eb7984bebcf9,2018-04-24 19:25:40,4
664923,harnesses_tradefed_tests_src_com_android_tradefed_util_VtsPythonRunnerHelperTest.java,@org.junit.Before public void setUp() throws java.lang.Exception { com.android.tradefed.build.IFolderBuildInfo buildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IFolderBuildInfo.class); org.easymock.EasyMock.replay(buildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(buildInfo) { @java.lang.Override protected com.android.tradefed.util.ProcessHelper createProcessHelper(java.lang.String[] cmd) { return mProcessHelper; } }; },bf7a44aeb041c420a159eb6e0a6c2427162de8f8,@org.junit.Before public void setUp() throws java.lang.Exception { com.android.tradefed.build.IFolderBuildInfo buildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IFolderBuildInfo.class); org.easymock.EasyMock.replay(buildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(new java.io.File(mVirtualenvPath)) { @java.lang.Override protected com.android.tradefed.util.ProcessHelper startProcessHelper(java.lang.String[] cmd) { return mProcessHelper; } }; },59fa27d18350ad2e3fe52099cfff00b5e71366df,@org.junit.Before public void setUp() throws java.lang.Exception { com.android.tradefed.build.IFolderBuildInfo buildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IFolderBuildInfo.class); org.easymock.EasyMock.replay(buildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(new java.io.File(mVirtualenvPath)) { @java.lang.Override protected com.android.tradefed.util.ProcessHelper createProcessHelper(java.lang.String[] cmd) { return mProcessHelper; } }; },d69fc7a824d18cf186d933c0d79b3be340dbc895,2018-04-24 19:25:40,4
664923,harnesses_tradefed_src_com_android_tradefed_util_VtsPythonRunnerHelper.java,protected com.android.tradefed.util.ProcessHelper createProcessHelper(java.lang.String[] cmd) throws java.io.IOException { return new com.android.tradefed.util.ProcessHelper(mRunUtil.runCmdInBackground(cmd)); },f2c2aeb154caea193395828172b75f100043d649,protected com.android.tradefed.util.ProcessHelper startProcessHelper(java.lang.String[] cmd) throws java.io.IOException { return new com.android.tradefed.util.ProcessHelper(mRunUtil.runCmdInBackground(cmd)); },ae3d65c57878c35508f2212dab1c0d528291af56,protected com.android.tradefed.util.ProcessHelper createProcessHelper(java.lang.String[] cmd) throws java.io.IOException { return new com.android.tradefed.util.ProcessHelper(mRunUtil.runCmdInBackground(cmd)); },f2c2aeb154caea193395828172b75f100043d649,2018-04-24 19:25:40,4
664923,harnesses_tradefed_src_com_android_tradefed_util_VtsPythonRunnerHelper.java,"public java.lang.String getPythonBinary() { boolean isWindows = com.android.tradefed.util.VtsPythonRunnerHelper.isOnWindows(); java.lang.String python = (isWindows) ? ""python.exe"" : ""python"" + (mPythonVersion); if ((mBuildInfo) != null) { java.io.File venvDir = mBuildInfo.getFile(com.android.tradefed.util.VtsPythonRunnerHelper.VIRTUAL_ENV_PATH); if (venvDir != null) { java.lang.String binDir = (isWindows) ? ""Scripts"" : ""bin""; java.io.File pythonBinaryFile = new java.io.File(venvDir.getAbsolutePath(), ((binDir + (java.io.File.separator)) + python)); java.lang.String pythonBinPath = pythonBinaryFile.getAbsolutePath(); if (pythonBinaryFile.exists()) { com.android.tradefed.log.LogUtil.CLog.i(((""Python path "" + pythonBinPath) + "".\n"")); return pythonBinPath; } com.android.tradefed.log.LogUtil.CLog.e(((((python + "" doesn't exist under the "") + ""created virtualenv dir ("") + pythonBinPath) + "").\n"")); } else { com.android.tradefed.log.LogUtil.CLog.e((((com.android.tradefed.util.VtsPythonRunnerHelper.VIRTUAL_ENV_PATH) + "" not available in BuildInfo. "") + ""Please use VtsPythonVirtualenvPreparer tartget preparer.\n"")); } } com.android.tradefed.util.CommandResult c = mRunUtil.runTimedCmd(1000, (isWindows ? ""where"" : ""which""), python); java.lang.String pythonBin = c.getStdout().trim(); if ((pythonBin.length()) == 0) { throw new java.lang.RuntimeException((""Could not find python binary on host "" + ""machine"")); } return pythonBin; }",32b4fbb7c54f418dd8852a55d39c74b57ce8cd29,"public static java.lang.String getPythonBinDir(java.lang.String virtualenvPath) { if (virtualenvPath == null) { return null; } java.lang.String binDirName = (com.android.tradefed.util.VtsPythonRunnerHelper.isOnWindows()) ? ""Scripts"" : ""bin""; java.io.File res = new java.io.File(virtualenvPath, binDirName); if (!(res.exists())) { return null; } return res.getAbsolutePath(); }",ad865b79b42357ec5bb48adfe22be1e9a27fa98c,"public static java.lang.String getPythonBinDir(java.lang.String virtualenvPath) { if (virtualenvPath == null) { return null; } java.lang.String binDirName = (com.android.tradefed.util.EnvUtil.isOnWindows()) ? ""Scripts"" : ""bin""; java.io.File res = new java.io.File(virtualenvPath, binDirName); if (!(res.exists())) { return null; } return res.getAbsolutePath(); }",69fb2f7175b2074d828c1e0c007039b7abe323ba,2018-04-24 19:25:40,4
664923,harnesses_tradefed_src_com_android_tradefed_util_VtsPythonRunnerHelper.java,"public java.lang.String runPythonRunner(java.lang.String[] cmd, com.android.tradefed.util.CommandResult commandResult, long timeout) { com.android.tradefed.util.ProcessHelper process; try { process = createProcessHelper(cmd); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); commandResult.setStatus(CommandStatus.EXCEPTION); commandResult.setStdout(""""); commandResult.setStderr(""""); return null; } java.lang.String interruptMessage; try { com.android.tradefed.util.CommandStatus commandStatus; try { commandStatus = process.waitForProcess(timeout); interruptMessage = null; } catch (com.android.tradefed.util.RunInterruptedException e) { com.android.tradefed.log.LogUtil.CLog.e(""Python process is interrupted.""); commandStatus = com.android.tradefed.util.CommandStatus.TIMED_OUT; interruptMessage = ((e.getMessage()) != null) ? e.getMessage() : """"; } if (process.isRunning()) { com.android.tradefed.log.LogUtil.CLog.e(""Cancel Python process and wait %d seconds."", ((com.android.tradefed.util.VtsPythonRunnerHelper.TEST_ABORT_TIMEOUT_MSECS) / 1000)); try { process.closeStdin(); process.waitForProcess(com.android.tradefed.util.VtsPythonRunnerHelper.TEST_ABORT_TIMEOUT_MSECS); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(""Fail to cancel Python process.""); } } commandResult.setStatus(commandStatus); } finally { process.cleanUp(); } commandResult.setStdout(process.getStdout()); commandResult.setStderr(process.getStderr()); return interruptMessage; }",1e395296cdd5d7f1e545cc52592cd7c0d6062953,"public java.lang.String runPythonRunner(java.lang.String[] cmd, com.android.tradefed.util.CommandResult commandResult, long timeout) { com.android.tradefed.util.ProcessHelper process; try { process = startProcessHelper(cmd); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); commandResult.setStatus(CommandStatus.EXCEPTION); commandResult.setStdout(""""); commandResult.setStderr(""""); return null; } java.lang.String interruptMessage; try { com.android.tradefed.util.CommandStatus commandStatus; try { commandStatus = process.waitForProcess(timeout); interruptMessage = null; } catch (com.android.tradefed.util.RunInterruptedException e) { com.android.tradefed.log.LogUtil.CLog.e(""Python process is interrupted.""); commandStatus = com.android.tradefed.util.CommandStatus.TIMED_OUT; interruptMessage = ((e.getMessage()) != null) ? e.getMessage() : """"; } if (process.isRunning()) { com.android.tradefed.log.LogUtil.CLog.e(""Cancel Python process and wait %d seconds."", ((com.android.tradefed.util.VtsPythonRunnerHelper.TEST_ABORT_TIMEOUT_MSECS) / 1000)); try { process.closeStdin(); process.waitForProcess(com.android.tradefed.util.VtsPythonRunnerHelper.TEST_ABORT_TIMEOUT_MSECS); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(""Fail to cancel Python process.""); } } commandResult.setStatus(commandStatus); } finally { process.cleanUp(); } commandResult.setStdout(process.getStdout()); commandResult.setStderr(process.getStderr()); return interruptMessage; }",cb82498aaa5ac1e4251a3d514e32f67bb84f835c,"public java.lang.String runPythonRunner(java.lang.String[] cmd, com.android.tradefed.util.CommandResult commandResult, long timeout) { com.android.tradefed.util.ProcessHelper process; try { process = createProcessHelper(cmd); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); commandResult.setStatus(CommandStatus.EXCEPTION); commandResult.setStdout(""""); commandResult.setStderr(""""); return null; } java.lang.String interruptMessage; try { com.android.tradefed.util.CommandStatus commandStatus; try { commandStatus = process.waitForProcess(timeout); interruptMessage = null; } catch (com.android.tradefed.util.RunInterruptedException e) { com.android.tradefed.log.LogUtil.CLog.e(""Python process is interrupted.""); commandStatus = com.android.tradefed.util.CommandStatus.TIMED_OUT; interruptMessage = ((e.getMessage()) != null) ? e.getMessage() : """"; } if (process.isRunning()) { com.android.tradefed.log.LogUtil.CLog.e(""Cancel Python process and wait %d seconds."", ((com.android.tradefed.util.VtsPythonRunnerHelper.TEST_ABORT_TIMEOUT_MSECS) / 1000)); try { process.closeStdin(); process.waitForProcess(com.android.tradefed.util.VtsPythonRunnerHelper.TEST_ABORT_TIMEOUT_MSECS); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(""Fail to cancel Python process.""); } } commandResult.setStatus(commandStatus); } finally { process.cleanUp(); } commandResult.setStdout(process.getStdout()); commandResult.setStderr(process.getStderr()); return interruptMessage; }",1e395296cdd5d7f1e545cc52592cd7c0d6062953,2018-04-24 19:25:40,4
664923,harnesses_tradefed_tests_src_com_android_tradefed_util_VtsPythonRunnerHelperTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public com.android.tradefed.util.CommandResult runTimedCmd(final long timeout, final java.lang.String... command) { com.android.tradefed.util.CommandResult cmdRes = new com.android.tradefed.util.CommandResult(com.android.tradefed.util.CommandStatus.SUCCESS); java.lang.String out = """"; if ((((command.length) == 2) && (command[0].equals(""which""))) && (command[1].equals(""python""))) { if ((path) != null) { out = (path) + ""/python""; } else { out = ""/usr/bin/python""; } } cmdRes.setStdout(out); return cmdRes; }",5be9ab366ac2f37398f6962085e06c2b71b0763b,"@java.lang.Override public com.android.tradefed.util.CommandResult runTimedCmd(final long timeout, final java.lang.String... command) { com.android.tradefed.util.CommandResult cmdRes = new com.android.tradefed.util.CommandResult(com.android.tradefed.util.CommandStatus.SUCCESS); java.lang.String out = """"; if ((((command.length) == 2) && (command[0].equals(""which""))) && (command[1].equals(""python""))) { if ((path) != null) { out = (path.split("":"")[0]) + ""/python""; } else { out = ""/usr/bin/python""; } } cmdRes.setStdout(out); return cmdRes; }",5bb7696cd70f05cff9326beb45d4398d349997fa,2018-04-24 19:25:40,4
664923,harnesses_tradefed_tests_src_com_android_tradefed_util_VtsPythonRunnerHelperTest.java,@java.lang.Override protected com.android.tradefed.util.ProcessHelper createProcessHelper(java.lang.String[] cmd) { return mProcessHelper; },c39fc5c8baeef1cf1dddb4214122944aaee999ac,@java.lang.Override protected com.android.tradefed.util.ProcessHelper startProcessHelper(java.lang.String[] cmd) { return mProcessHelper; },07d752147e53d5a292b933d62c88579c905d1df4,@java.lang.Override protected com.android.tradefed.util.ProcessHelper createProcessHelper(java.lang.String[] cmd) { return mProcessHelper; },c39fc5c8baeef1cf1dddb4214122944aaee999ac,2018-04-24 19:25:40,4
664923,harnesses_tradefed_src_com_android_tradefed_util_VtsPythonRunnerHelper.java,public void setPythonVersion(java.lang.String pythonVersion) { mPythonVersion = pythonVersion; },93a36a1bf863d394ce00d5d4e977a756fd7dba8f,"public static void activateVirtualenv(com.android.tradefed.util.IRunUtil runUtil, java.lang.String virtualenvPath) { java.lang.String pythonBinDir = com.android.tradefed.util.VtsPythonRunnerHelper.getPythonBinDir(virtualenvPath); if ((pythonBinDir == null) || (!(new java.io.File(pythonBinDir).exists()))) { com.android.tradefed.log.LogUtil.CLog.e(""Invalid python virtualenv path. Using python from system path.""); } else { runUtil.setEnvVariable(com.android.tradefed.util.VtsPythonRunnerHelper.PATH, pythonBinDir); runUtil.setEnvVariable(com.android.tradefed.util.VtsPythonRunnerHelper.VIRTUALENVPATH, virtualenvPath); } }",70bb04f7c1e742e730c08d33b1fb5a7bf0c35d28,"public static void activateVirtualenv(com.android.tradefed.util.IRunUtil runUtil, java.lang.String virtualenvPath) { java.lang.String pythonBinDir = com.android.tradefed.util.VtsPythonRunnerHelper.getPythonBinDir(virtualenvPath); if ((pythonBinDir == null) || (!(new java.io.File(pythonBinDir).exists()))) { com.android.tradefed.log.LogUtil.CLog.e(""Invalid python virtualenv path. Using python from system path.""); } else { java.lang.String separater = (com.android.tradefed.util.EnvUtil.isOnWindows()) ? "";"" : "":""; runUtil.setEnvVariable(com.android.tradefed.util.VtsPythonRunnerHelper.PATH, ((pythonBinDir + separater) + (java.lang.System.getenv().get(com.android.tradefed.util.VtsPythonRunnerHelper.PATH)))); runUtil.setEnvVariable(VtsPythonVirtualenvPreparer.VIRTUAL_ENV, virtualenvPath); runUtil.unsetEnvVariable(com.android.tradefed.util.VtsPythonRunnerHelper.PYTHONHOME); } }",c50006e2241c764e7daefa4ef3bc20f151f4fd4e,2018-04-24 19:25:40,4
664923,harnesses_tradefed_tests_src_com_android_tradefed_util_VtsPythonRunnerHelperTest.java,"@org.junit.Test public void testGetPythonPath() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); java.lang.String separator = java.io.File.pathSeparator; if ((java.lang.System.getenv(com.android.tradefed.util.VtsPythonRunnerHelperTest.PYTHONPATH)) != null) { sb.append(separator); sb.append(java.lang.System.getenv(com.android.tradefed.util.VtsPythonRunnerHelperTest.PYTHONPATH)); } java.io.File testVts = new java.io.File(""TEST_VTS""); java.io.File testPythonPath = new java.io.File(""TEST_PYTHON_PATH""); java.lang.String altTestsDir = java.lang.System.getenv().get(com.android.tradefed.util.VtsPythonRunnerHelperTest.ALT_HOST_TESTCASE_DIR); if (altTestsDir != null) { java.io.File testsDir = new java.io.File(altTestsDir); sb.append(separator); sb.append(testsDir.getAbsolutePath()); } else { sb.append(separator); sb.append(testVts.getAbsolutePath()).append(""/..""); } sb.append(separator); sb.append(testPythonPath.getAbsolutePath()); if ((java.lang.System.getenv(""ANDROID_BUILD_TOP"")) != null) { sb.append(separator); sb.append(java.lang.System.getenv(""ANDROID_BUILD_TOP"")).append(""/test""); } com.android.tradefed.build.IBuildInfo mockBuildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IBuildInfo.class); org.easymock.EasyMock.expect(mockBuildInfo.getFile(org.easymock.EasyMock.eq(com.android.tradefed.util.VtsPythonRunnerHelperTest.VTS))).andReturn(testVts).anyTimes(); org.easymock.EasyMock.expect(mockBuildInfo.getFile(org.easymock.EasyMock.eq(com.android.tradefed.util.VtsPythonRunnerHelperTest.PYTHONPATH))).andReturn(testPythonPath).times(2); org.easymock.EasyMock.replay(mockBuildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(mockBuildInfo); assertEquals(sb.substring(1), mVtsPythonRunnerHelper.getPythonPath()); org.easymock.EasyMock.verify(mockBuildInfo); }",8243f3fdc6924dc0a7b346c14cb1802c27953f3a,"@org.junit.Test public void testActivateVirtualEnvExist() { com.android.tradefed.util.IRunUtil runUtil = createMockRunUtil(); java.lang.String binDirName = (com.android.tradefed.util.VtsPythonRunnerHelper.isOnWindows()) ? ""Scripts"" : ""bin""; java.io.File envDir = new java.io.File(mVirtualenvPath); java.io.File binDir = new java.io.File(mVirtualenvPath, binDirName); try { java.lang.System.out.println(envDir.mkdir()); java.lang.System.out.println(binDir.mkdir()); java.lang.System.out.println(binDir.exists()); assertEquals(binDir.getAbsolutePath(), com.android.tradefed.util.VtsPythonRunnerHelper.getPythonBinDir(mVirtualenvPath)); com.android.tradefed.util.VtsPythonRunnerHelper.activateVirtualenv(runUtil, mVirtualenvPath); java.lang.String pythonBinary = runUtil.runTimedCmd(1000, ""which"", ""python"").getStdout(); assertEquals(pythonBinary, new java.io.File(binDir, ""python"").getAbsolutePath()); } finally { binDir.delete(); envDir.delete(); } }",195859d3332cc69a667fe9c666e871f779bc062b,"@org.junit.Test public void testActivateVirtualEnvExist() { com.android.tradefed.util.IRunUtil runUtil = createMockRunUtil(); java.lang.String binDirName = (com.android.tradefed.util.EnvUtil.isOnWindows()) ? ""Scripts"" : ""bin""; java.io.File envDir = new java.io.File(mVirtualenvPath); java.io.File binDir = new java.io.File(mVirtualenvPath, binDirName); try { java.lang.System.out.println(envDir.mkdir()); java.lang.System.out.println(binDir.mkdir()); java.lang.System.out.println(binDir.exists()); assertEquals(binDir.getAbsolutePath(), com.android.tradefed.util.VtsPythonRunnerHelper.getPythonBinDir(mVirtualenvPath)); com.android.tradefed.util.VtsPythonRunnerHelper.activateVirtualenv(runUtil, mVirtualenvPath); java.lang.String pythonBinary = runUtil.runTimedCmd(1000, ""which"", ""python"").getStdout(); assertEquals(pythonBinary, new java.io.File(binDir, ""python"").getAbsolutePath()); } finally { binDir.delete(); envDir.delete(); } }",df3f0ee7ee78e9c6ad73aa56abcf80349ee8d148,2018-04-24 19:25:40,4
664923,harnesses_tradefed_src_com_android_tradefed_targetprep_VtsPythonVirtualenvPreparer.java,"private boolean dirExistsAndHaveReadAccess(java.lang.String path) { java.io.File pathDir = new java.io.File(path); if ((!(pathDir.exists())) || (!(pathDir.isDirectory()))) { com.android.tradefed.log.LogUtil.CLog.i(""Directory %s does not exist."", pathDir); return false; } if (!(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.isOnWindows())) { com.android.tradefed.util.CommandResult c = getRunUtil().runTimedCmd(((com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.BASE_TIMEOUT) * 5), ""ls"", path); if ((c.getStatus()) != (com.android.tradefed.util.CommandStatus.SUCCESS)) { com.android.tradefed.log.LogUtil.CLog.i(java.lang.String.format(""Failed to read dir: %s. Result %s. stdout: %s, stderr: %s"", path, c.getStatus(), c.getStdout(), c.getStderr())); return false; } return true; } else { try { java.lang.String[] pathDirList = pathDir.list(); if (pathDirList == null) { com.android.tradefed.log.LogUtil.CLog.i(""Failed to read dir: %s. Please check access permission."", pathDir); return false; } } catch (java.lang.SecurityException e) { com.android.tradefed.log.LogUtil.CLog.i(java.lang.String.format(""Failed to read dir %s with SecurityException %s"", pathDir, e)); return false; } return true; } }",73cbab8bd96a750ba36340abffaa7e755bf82a27,"private boolean dirExistsAndHaveReadAccess(java.lang.String path) { java.io.File pathDir = new java.io.File(path); if ((!(pathDir.exists())) || (!(pathDir.isDirectory()))) { com.android.tradefed.log.LogUtil.CLog.i(""Directory %s does not exist."", pathDir); return false; } if (!(com.android.tradefed.util.VtsPythonRunnerHelper.isOnWindows())) { com.android.tradefed.util.CommandResult c = getRunUtil().runTimedCmd(((com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.BASE_TIMEOUT) * 5), ""ls"", path); if ((c.getStatus()) != (com.android.tradefed.util.CommandStatus.SUCCESS)) { com.android.tradefed.log.LogUtil.CLog.i(java.lang.String.format(""Failed to read dir: %s. Result %s. stdout: %s, stderr: %s"", path, c.getStatus(), c.getStdout(), c.getStderr())); return false; } return true; } else { try { java.lang.String[] pathDirList = pathDir.list(); if (pathDirList == null) { com.android.tradefed.log.LogUtil.CLog.i(""Failed to read dir: %s. Please check access permission."", pathDir); return false; } } catch (java.lang.SecurityException e) { com.android.tradefed.log.LogUtil.CLog.i(java.lang.String.format(""Failed to read dir %s with SecurityException %s"", pathDir, e)); return false; } return true; } }",f36c97c0f49bdeb9984774677f3d4f3c009a7bc3,"private boolean dirExistsAndHaveReadAccess(java.lang.String path) { java.io.File pathDir = new java.io.File(path); if ((!(pathDir.exists())) || (!(pathDir.isDirectory()))) { com.android.tradefed.log.LogUtil.CLog.i(""Directory %s does not exist."", pathDir); return false; } if (!(com.android.tradefed.util.EnvUtil.isOnWindows())) { com.android.tradefed.util.CommandResult c = getRunUtil().runTimedCmd(((com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.BASE_TIMEOUT) * 5), ""ls"", path); if ((c.getStatus()) != (com.android.tradefed.util.CommandStatus.SUCCESS)) { com.android.tradefed.log.LogUtil.CLog.i(java.lang.String.format(""Failed to read dir: %s. Result %s. stdout: %s, stderr: %s"", path, c.getStatus(), c.getStdout(), c.getStderr())); return false; } return true; } else { try { java.lang.String[] pathDirList = pathDir.list(); if (pathDirList == null) { com.android.tradefed.log.LogUtil.CLog.i(""Failed to read dir: %s. Please check access permission."", pathDir); return false; } } catch (java.lang.SecurityException e) { com.android.tradefed.log.LogUtil.CLog.i(java.lang.String.format(""Failed to read dir %s with SecurityException %s"", pathDir, e)); return false; } return true; } }",551dd10083f6901897f2c95995762e2555ed7571,2018-04-24 19:25:40,4
664923,harnesses_tradefed_src_com_android_tradefed_testtype_VtsMultiDeviceTest.java,protected com.android.tradefed.util.VtsPythonRunnerHelper createVtsPythonRunnerHelper() { return new com.android.tradefed.util.VtsPythonRunnerHelper(mBuildInfo); },74cdd96ad30cc722278e9c9a1cd86666b1b18ad0,protected com.android.tradefed.util.VtsPythonRunnerHelper createVtsPythonRunnerHelper() { return new com.android.tradefed.util.VtsPythonRunnerHelper(mBuildInfo.getFile(com.android.tradefed.testtype.VtsMultiDeviceTest.VIRTUALENVPATH)); },8233d24732829909b8f1f37da0a0caefc6064ea3,protected com.android.tradefed.util.VtsPythonRunnerHelper createVtsPythonRunnerHelper() { return new com.android.tradefed.util.VtsPythonRunnerHelper(mBuildInfo); },74cdd96ad30cc722278e9c9a1cd86666b1b18ad0,2018-04-24 19:25:40,4
664923,harnesses_tradefed_src_com_android_tradefed_targetprep_VtsPythonVirtualenvPreparer.java,"protected void addPathToBuild(com.android.tradefed.build.IBuildInfo buildInfo) { if ((buildInfo.getFile(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PYTHONPATH)) == null) { buildInfo.setFile(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PYTHONPATH, new java.io.File(mVenvDir, ""local/lib/python2.7/site-packages""), buildInfo.getBuildId()); } if ((buildInfo.getFile(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.VIRTUAL_ENV_PATH)) == null) { buildInfo.setFile(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.VIRTUAL_ENV_PATH, new java.io.File(mVenvDir.getAbsolutePath()), buildInfo.getBuildId()); } }",441f9c755eb421066b1aed8410a0144d418136dd,"protected void addPathToBuild(com.android.tradefed.build.IBuildInfo buildInfo) { if ((buildInfo.getFile(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.VIRTUALENVPATH)) == null) { buildInfo.setFile(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.VIRTUALENVPATH, new java.io.File(mVenvDir.getAbsolutePath()), buildInfo.getBuildId()); } }",6c3a67cdd5f90e1f2c44a5a2aedb2345e7c873b4,"protected void addPathToBuild(com.android.tradefed.build.IBuildInfo buildInfo) throws com.android.tradefed.targetprep.TargetSetupError { java.lang.String target = null; switch (getConfiguredPythonVersionMajor()) { case 2 : target = com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.VIRTUAL_ENV; break; case 3 : target = com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.VIRTUAL_ENV_V3; break; } if ((buildInfo.getFile(target)) == null) { buildInfo.setFile(target, new java.io.File(mVenvDir.getAbsolutePath()), buildInfo.getBuildId()); } }",6f01f74322a4070814af05c275668cc0ff892245,2018-04-24 19:25:40,4
670632,tests_unit_src_com_android_bluetooth_hearingaid_HearingAidServiceTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testConnectAPair_connectBothDevices() { mService.setPriority(mLeftDevice, BluetoothProfile.PRIORITY_ON); mService.setPriority(mRightDevice, BluetoothProfile.PRIORITY_ON); doReturn(true).when(mNativeInterface).connectHearingAid(any(android.bluetooth.BluetoothDevice.class)); doReturn(true).when(mNativeInterface).disconnectHearingAid(any(android.bluetooth.BluetoothDevice.class)); org.junit.Assert.assertTrue(""Connect failed"", mService.connect(mLeftDevice)); verifyConnectionStateIntent(com.android.bluetooth.hearingaid.HearingAidServiceTest.TIMEOUT_MS, mLeftDevice, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mService.getConnectionState(mLeftDevice)); verifyConnectionStateIntent(com.android.bluetooth.hearingaid.HearingAidServiceTest.TIMEOUT_MS, mRightDevice, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mService.getConnectionState(mRightDevice)); }",358d9cf6c607060d15de7c96265318bfaf4012d8,"@org.junit.Test public void testConnectAPair_connectBothDevices() { com.android.bluetooth.hearingaid.HearingAidStackEvent connCompletedEvent; mService.setPriority(mLeftDevice, BluetoothProfile.PRIORITY_ON); mService.setPriority(mRightDevice, BluetoothProfile.PRIORITY_ON); doReturn(true).when(mNativeInterface).connectHearingAid(any(android.bluetooth.BluetoothDevice.class)); doReturn(true).when(mNativeInterface).disconnectHearingAid(any(android.bluetooth.BluetoothDevice.class)); org.junit.Assert.assertTrue(""Connect failed"", mService.connect(mLeftDevice)); verifyConnectionStateIntent(com.android.bluetooth.hearingaid.HearingAidServiceTest.TIMEOUT_MS, mLeftDevice, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mService.getConnectionState(mLeftDevice)); verifyConnectionStateIntent(com.android.bluetooth.hearingaid.HearingAidServiceTest.TIMEOUT_MS, mRightDevice, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mService.getConnectionState(mRightDevice)); }",bc7f1c94a2b687a06094964b02213bca7470df33,2018-04-25 17:15:48,5
666120,hostside_src_com_android_graphics_benchmark_testtype_GraphicsBenchmarkHostsideController.java,@java.lang.Override public java.util.Collection<com.android.tradefed.testtype.IRemoteTest> split(int shardCountHint) { java.util.List<com.android.tradefed.testtype.IRemoteTest> shards = new java.util.ArrayList<>(); for (int i = 0; i < shardCountHint; i++) { if (i >= (mApks.size())) { break; } java.util.List<com.android.graphics.benchmark.ApkInfo> apkInfo = new java.util.ArrayList<>(); for (int j = i; j < (mApks.size()); j += shardCountHint) { apkInfo.add(mApks.get(j)); } com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController shard = new com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController(); shard.mApks = apkInfo; shard.mApkDir = mApkDir; shards.add(shard); } return shards; },aa63f7683b2b512ca057d3146ec9b73a1c44eebc,@java.lang.Override public java.util.Collection<com.android.tradefed.testtype.IRemoteTest> split(int shardCountHint) { try { initApkList(); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } java.util.List<com.android.tradefed.testtype.IRemoteTest> shards = new java.util.ArrayList<>(); for (int i = 0; i < shardCountHint; i++) { if (i >= (mApks.size())) { break; } java.util.List<com.android.graphics.benchmark.ApkInfo> apkInfo = new java.util.ArrayList<>(); for (int j = i; j < (mApks.size()); j += shardCountHint) { apkInfo.add(mApks.get(j)); } com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController shard = new com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController(); shard.mApks = apkInfo; shard.mApkDir = mApkDir; shards.add(shard); } return shards; },2c98159e705960425414216a0dbdf494e303026b,@java.lang.Override public java.util.Collection<com.android.tradefed.testtype.IRemoteTest> split(int shardCountHint) { initApkList(); java.util.List<com.android.tradefed.testtype.IRemoteTest> shards = new java.util.ArrayList<>(); for (int i = 0; i < shardCountHint; i++) { if (i >= (mApks.size())) { break; } java.util.List<com.android.graphics.benchmark.ApkInfo> apkInfo = new java.util.ArrayList<>(); for (int j = i; j < (mApks.size()); j += shardCountHint) { apkInfo.add(mApks.get(j)); } com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController shard = new com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController(); shard.mApks = apkInfo; shard.mApkDir = mApkDir; shards.add(shard); } return shards; },47aa0546e254a8b215b7ce6ddc091422b2c00f9e,2018-04-25 19:48:50,9
666120,hostside_src_com_android_graphics_benchmark_testtype_GraphicsBenchmarkHostsideController.java,"@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.name())) + ""]"")); } }",4783a59530930bb5245fcc1e3b48e440042ae3e8,"@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { try { initApkList(); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } getDevice().pushFile(mApkInfoFile, ApkInfo.APK_LIST_LOCATION); for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.getName())) + ""]"")); } }",653e1d22c480846d0d9d53171252641b73a8d8c7,"@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.Map<java.lang.String, java.lang.String> runMetrics = new java.util.HashMap<>(); initApkList(); listener.testRunStarted(""graphicsbenchmark"", mApks.size()); getDevice().pushFile(mApkInfoFile, ApkInfo.APK_LIST_LOCATION); for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); com.android.ddmlib.testrunner.TestIdentifier identifier = new com.android.ddmlib.testrunner.TestIdentifier(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.getName())) + ""]"")); java.util.Map<java.lang.String, java.lang.String> testMetrics = new java.util.HashMap<>(); listener.testStarted(identifier); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.getName())) + ""]"")); listener.testEnded(identifier, testMetrics); } listener.testRunEnded(0, runMetrics); }",1c8ff666fcb57b54e1b48467ceb8e93f10287ebe,2018-04-25 19:48:50,9
666120,hostside_src_com_android_graphics_benchmark_testtype_GraphicsBenchmarkHostsideController.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void initApkList() throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { if ((mApks) != null) { return; } if ((mApkInfoFileName) != null) { mApkInfoFile = new java.io.File(mApkInfoFileName); } else { java.lang.String resource = ""/com/android/graphics/benchmark/apk-info.xml""; java.io.InputStream inputStream = com.android.graphics.benchmark.ApkInfo.class.getResourceAsStream(resource); if (inputStream == null) { throw new java.io.FileNotFoundException((""Unable to find resource: "" + resource)); } mApkInfoFile = java.io.File.createTempFile(""apk-info"", "".xml""); try (java.io.OutputStream ostream = new java.io.FileOutputStream(mApkInfoFile)) { com.google.common.io.ByteStreams.copy(inputStream, ostream); } mApkInfoFile.deleteOnExit(); } com.android.graphics.benchmark.ApkListXmlParser parser = new com.android.graphics.benchmark.ApkListXmlParser(mApkInfoFile); mApks = parser.parse(); }",0b5f08ae6baaf26eae62f845d3fbdb640eef4110,"private void initApkList() { if ((mApks) != null) { return; } if ((mApkInfoFileName) != null) { mApkInfoFile = new java.io.File(mApkInfoFileName); } else { try { java.lang.String resource = ""/com/android/graphics/benchmark/apk-info.xml""; java.io.InputStream inputStream = com.android.graphics.benchmark.ApkInfo.class.getResourceAsStream(resource); if (inputStream == null) { throw new java.io.FileNotFoundException((""Unable to find resource: "" + resource)); } mApkInfoFile = java.io.File.createTempFile(""apk-info"", "".xml""); try (java.io.OutputStream ostream = new java.io.FileOutputStream(mApkInfoFile)) { com.google.common.io.ByteStreams.copy(inputStream, ostream); } mApkInfoFile.deleteOnExit(); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } } com.android.graphics.benchmark.ApkListXmlParser parser = new com.android.graphics.benchmark.ApkListXmlParser(mApkInfoFile); try { mApks = parser.parse(); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }",8399837a5c321023e2ac84481992b04fbf01c256,2018-04-25 19:48:50,9
666120,helper_src_com_android_graphics_benchmark_ApkListXmlParser.java,,,"public java.util.List<com.android.graphics.benchmark.ApkInfo> parse() throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { javax.xml.parsers.DocumentBuilderFactory dbf = javax.xml.parsers.DocumentBuilderFactory.newInstance(); javax.xml.parsers.DocumentBuilder db = dbf.newDocumentBuilder(); org.w3c.dom.Document doc = db.parse(mFile); org.w3c.dom.NodeList nodes = doc.getElementsByTagName(""apk""); java.util.List<com.android.graphics.benchmark.ApkInfo> apks = new java.util.ArrayList<>(); for (int i = 0; i < (nodes.getLength()); i++) { org.w3c.dom.Node node = nodes.item(i); if ((node.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) { org.w3c.dom.Element element = ((org.w3c.dom.Element) (node)); apks.add(new com.android.graphics.benchmark.ApkInfo(element.getElementsByTagName(""name"").item(0).getTextContent(), element.getElementsByTagName(""fileName"").item(0).getTextContent(), element.getElementsByTagName(""packageName"").item(0).getTextContent())); } } return apks; }",39cfb8773a054b8f05f92a2b69467d9019e428bf,"public java.util.List<com.android.graphics.benchmark.ApkInfo> parse() throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { javax.xml.parsers.DocumentBuilderFactory dbf = javax.xml.parsers.DocumentBuilderFactory.newInstance(); javax.xml.parsers.DocumentBuilder db = dbf.newDocumentBuilder(); org.w3c.dom.Document doc = db.parse(mFile); doc.getDocumentElement().normalize(); org.w3c.dom.NodeList nodes = doc.getElementsByTagName(""apk""); java.util.List<com.android.graphics.benchmark.ApkInfo> apks = new java.util.ArrayList<>(); for (int i = 0; i < (nodes.getLength()); i++) { org.w3c.dom.Node node = nodes.item(i); if ((node.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) { org.w3c.dom.Element element = ((org.w3c.dom.Element) (node)); apks.add(new com.android.graphics.benchmark.ApkInfo(getElement(element, ""name""), getElement(element, ""fileName""), getElement(element, ""packageName""))); } } return apks; }",57e13d10eca9b451692f372f2ba089612177d88b,2018-04-25 19:48:50,9
664817,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,protected void setUp() throws java.lang.Exception { super.setUp(); mCM = ((android.net.ConnectivityManager) (getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); },0cbc29270dd822912c87ee7d946988184e942d90,"protected void setUp() throws java.lang.Exception { super.setUp(); mCM = ((android.net.ConnectivityManager) (getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); mBpfActive = new java.io.File(""/sys/fs/bpf"").exists(); }",a6a991ea360c43e88faa3d685e2fda984c167a55,protected void setUp() throws java.lang.Exception { super.setUp(); mCM = ((android.net.ConnectivityManager) (getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); },0cbc29270dd822912c87ee7d946988184e942d90,2018-04-25 20:45:37,4
664817,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,"private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int ivLen, int blkSize, int truncLenBits) throws java.lang.Exception { int innerPacketSize = ((TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateEspPacketSize(((TEST_DATA.length) + transportHdrLen), ivLen, blkSize, truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = calculateEspPacketSize(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, ivLen, blkSize, truncLenBits); expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (udpEncapLen != 0) { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } }",dd12f2780f8f7125f23cbd573db45a10be192828,"private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int ivLen, int blkSize, int truncLenBits) throws java.lang.Exception { int innerPacketSize = ((TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateEspPacketSize(((TEST_DATA.length) + transportHdrLen), ivLen, blkSize, truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = calculateEspPacketSize(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, ivLen, blkSize, truncLenBits); expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (udpEncapLen != 0) { int expectedRxBytes = (mBpfActive) ? expectedInnerBytes : expectedOuterBytes; android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedRxBytes, expectedPackets); } else { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } }",3567848543935131cee02ffeb301783c34cb7529,"private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int ivLen, int blkSize, int truncLenBits) throws java.lang.Exception { int innerPacketSize = ((TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateEspPacketSize(((TEST_DATA.length) + transportHdrLen), ivLen, blkSize, truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = calculateEspPacketSize(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, ivLen, blkSize, truncLenBits); expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedOuterBytes, expectedPackets); if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } }",b7f522897f59329825bc45c5830bdf15f0b00044,2018-04-25 20:45:37,4
667471,hostside_src_com_android_graphics_benchmark_testtype_GraphicsBenchmarkHostsideController.java,"private void initApkList() { if ((mApks) != null) { return; } if ((mApkInfoFileName) != null) { mApkInfoFile = new java.io.File(mApkInfoFileName); } else { try { java.lang.String resource = ""/com/android/graphics/benchmark/apk-info.xml""; java.io.InputStream inputStream = com.android.graphics.benchmark.ApkInfo.class.getResourceAsStream(resource); if (inputStream == null) { throw new java.io.FileNotFoundException((""Unable to find resource: "" + resource)); } mApkInfoFile = java.io.File.createTempFile(""apk-info"", "".xml""); try (java.io.OutputStream ostream = new java.io.FileOutputStream(mApkInfoFile)) { com.google.common.io.ByteStreams.copy(inputStream, ostream); } mApkInfoFile.deleteOnExit(); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } } com.android.graphics.benchmark.ApkListXmlParser parser = new com.android.graphics.benchmark.ApkListXmlParser(mApkInfoFile); try { mApks = parser.parse(); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }",8399837a5c321023e2ac84481992b04fbf01c256,"private void initApkList() { if ((mApks) != null) { return; } if ((mApkInfoFileName) != null) { mApkInfoFile = new java.io.File(mApkInfoFileName); } else { java.lang.String resource = ""/com/android/graphics/benchmark/apk-info.xml""; try (java.io.InputStream inputStream = com.android.graphics.benchmark.ApkInfo.class.getResourceAsStream(resource)) { if (inputStream == null) { throw new java.io.FileNotFoundException((""Unable to find resource: "" + resource)); } mApkInfoFile = java.io.File.createTempFile(""apk-info"", "".xml""); try (java.io.OutputStream ostream = new java.io.FileOutputStream(mApkInfoFile)) { com.google.common.io.ByteStreams.copy(inputStream, ostream); } mApkInfoFile.deleteOnExit(); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } } com.android.graphics.benchmark.ApkListXmlParser parser = new com.android.graphics.benchmark.ApkListXmlParser(); try { mApks = parser.parse(mApkInfoFile); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }",a7b9efe57558709877ad0a185cc23195c4eea6a9,"private void initApkList() { if ((mApks) != null) { return; } if ((mApkInfoFileName) != null) { mApkInfoFile = new java.io.File(mApkInfoFileName); } else { java.lang.String resource = ""/com/android/graphics/benchmark/apk-info.xml""; try (java.io.InputStream inputStream = com.android.graphics.benchmark.ApkInfo.class.getResourceAsStream(resource)) { if (inputStream == null) { throw new java.io.FileNotFoundException((""Unable to find resource: "" + resource)); } mApkInfoFile = java.io.File.createTempFile(""apk-info"", "".xml""); try (java.io.OutputStream ostream = new java.io.FileOutputStream(mApkInfoFile)) { com.google.common.io.ByteStreams.copy(inputStream, ostream); } mApkInfoFile.deleteOnExit(); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } } com.android.graphics.benchmark.ApkListXmlParser parser = new com.android.graphics.benchmark.ApkListXmlParser(); try { mApks = parser.parse(mApkInfoFile); } catch (java.io.IOException | javax.xml.parsers.ParserConfigurationException | org.xml.sax.SAXException e) { throw new java.lang.RuntimeException(e); } }",51213402e97c8d7861b32a78ceb269165e1809b2,2018-04-26 00:28:52,7
667471,helper_test_com_android_graphics_benchmark_ApkListXmlParserTest.java,,,"@org.junit.Test public void testArguments() throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { try (java.io.InputStream input = new java.io.ByteArrayInputStream((""<?xml version=\""1.0\""?>\n"" + ((((((((((""<apk-info>\n"" + "" <apk>\n"") + "" <name>foo</name>\n"") + "" <fileName>foo.apk</fileName>\n"") + "" <packageName>com.foo.test</packageName>\n"") + "" <args>\n"") + "" <key1>value1</key1>"") + "" <key2>value2</key2>"") + "" </args>\n"") + "" </apk>\n"") + ""</apk-info>\n"")).getBytes())) { java.util.List<com.android.graphics.benchmark.ApkInfo> apks = parser.parse(input); assertEquals(1, apks.size()); com.android.graphics.benchmark.ApkInfo apk = apks.get(0); assertEquals(""foo"", apk.getName()); assertEquals(""foo.apk"", apk.getFileName()); assertEquals(""com.foo.test"", apk.getPackageName()); java.util.List<com.android.graphics.benchmark.ApkInfo.Argument> args = apk.getArgs(); assertEquals(""key1"", args.get(0).getKey()); assertEquals(""value1"", args.get(0).getValue()); assertEquals(""key2"", args.get(1).getKey()); assertEquals(""value2"", args.get(1).getValue()); } }",092d2d11356eb5ef187ae7f354d68930c12a13e8,"@org.junit.Test public void testApkWithArguments() throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { try (java.io.InputStream input = new java.io.ByteArrayInputStream((""<?xml version=\""1.0\""?>\n"" + ((((((((((""<apk-info>\n"" + "" <apk>\n"") + "" <name>foo</name>\n"") + "" <fileName>foo.apk</fileName>\n"") + "" <packageName>com.foo.test</packageName>\n"") + "" <args>\n"") + "" <key1>value1</key1>"") + "" <key2>value2</key2>"") + "" </args>\n"") + "" </apk>\n"") + ""</apk-info>\n"")).getBytes())) { java.util.List<com.android.graphics.benchmark.ApkInfo> apks = parser.parse(input); assertEquals(1, apks.size()); com.android.graphics.benchmark.ApkInfo apk = apks.get(0); assertEquals(""foo"", apk.getName()); assertEquals(""foo.apk"", apk.getFileName()); assertEquals(""com.foo.test"", apk.getPackageName()); java.util.List<com.android.graphics.benchmark.ApkInfo.Argument> args = apk.getArgs(); assertEquals(""key1"", args.get(0).getKey()); assertEquals(""value1"", args.get(0).getValue()); assertEquals(""key2"", args.get(1).getKey()); assertEquals(""value2"", args.get(1).getValue()); } }",4477aa3f3f94088857daa5693538ab7ebc28811a,2018-04-26 00:28:52,7
671699,src_com_android_bluetooth_a2dp_A2dpService.java,"@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : quiet mode enabled"")); return false; } if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : too many connected devices"")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (((((""okToConnect: cannot connect to "" + device) + "" : priority="") + priority) + "" bondState="") + bondState)); return false; } if (priority <= (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (((""okToConnect: cannot connect to "" + device) + "" : priority="") + priority)); return false; } return true; }",616f0618cabdec19b36ade995cc7114c304fe634,"@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : quiet mode enabled"")); return false; } if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : too many connected devices"")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); boolean isSdpPending = (priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && ((bondState == (android.bluetooth.BluetoothDevice.BOND_BONDING)) || (bondState == (android.bluetooth.BluetoothDevice.BOND_BONDED))); if (((!isSdpPending) && (priority != (android.bluetooth.BluetoothProfile.PRIORITY_ON))) && (priority != (android.bluetooth.BluetoothProfile.PRIORITY_AUTO_CONNECT))) { android.util.Log.w(com.android.bluetooth.a2dp.A2dpService.TAG, (((""okToAcceptConnection: return false, priority="" + priority) + "", bondState="") + bondState)); return false; } return true; }",903d8c003ae3a49be73eb12004ada2d275dc6b52,"@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : quiet mode enabled"")); return false; } if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : too many connected devices"")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); boolean serviceDiscoveryPending = (priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && ((bondState == (android.bluetooth.BluetoothDevice.BOND_BONDING)) || (bondState == (android.bluetooth.BluetoothDevice.BOND_BONDED))); boolean isEnabled = ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_ON)) || (priority == (android.bluetooth.BluetoothProfile.PRIORITY_AUTO_CONNECT))) && ((bondState == (android.bluetooth.BluetoothDevice.BOND_BONDED)) || (bondState == (android.bluetooth.BluetoothDevice.BOND_BONDING))); if ((!serviceDiscoveryPending) && (!isEnabled)) { android.util.Log.w(com.android.bluetooth.a2dp.A2dpService.TAG, (((""okToConnect: return false, priority="" + priority) + "", bondState="") + bondState)); return false; } return true; }",b180baabd718741f3a6fb19d8d0f92efdb93c296,2018-04-26 03:39:21,12
671699,src_com_android_bluetooth_hfp_HeadsetService.java,"public boolean okToAcceptConnection(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""okToAcceptConnection: return false as quiet mode enabled""); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (((""okToAcceptConnection: return false, priority="" + priority) + "", bondState="") + bondState)); return false; } else if (priority <= (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (""okToAcceptConnection: return false, priority="" + priority)); return false; } java.util.List<android.bluetooth.BluetoothDevice> connectingConnectedDevices = getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.CONNECTING_CONNECTED_STATES); if ((connectingConnectedDevices.size()) >= (mMaxHeadsetConnections)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (((""Maximum number of connections "" + (mMaxHeadsetConnections)) + "" was reached, rejecting connection from "") + device)); return false; } return true; }",a1eff4c180f8e95fee299657f1b314403f55f43f,"public boolean okToAcceptConnection(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""okToAcceptConnection: return false as quiet mode enabled""); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); boolean isSdpPending = (priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && ((bondState == (android.bluetooth.BluetoothDevice.BOND_BONDING)) || (bondState == (android.bluetooth.BluetoothDevice.BOND_BONDED))); if (((!isSdpPending) && (priority != (android.bluetooth.BluetoothProfile.PRIORITY_ON))) && (priority != (android.bluetooth.BluetoothProfile.PRIORITY_AUTO_CONNECT))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (((""okToAcceptConnection: return false, priority="" + priority) + "", bondState="") + bondState)); return false; } java.util.List<android.bluetooth.BluetoothDevice> connectingConnectedDevices = getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.CONNECTING_CONNECTED_STATES); if ((connectingConnectedDevices.size()) >= (mMaxHeadsetConnections)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (((""Maximum number of connections "" + (mMaxHeadsetConnections)) + "" was reached, rejecting connection from "") + device)); return false; } return true; }",9997fcc1563645b3deed466a135245105fdd2966,"public boolean okToAcceptConnection(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""okToAcceptConnection: return false as quiet mode enabled""); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); boolean serviceDiscoveryPending = (priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && ((bondState == (android.bluetooth.BluetoothDevice.BOND_BONDING)) || (bondState == (android.bluetooth.BluetoothDevice.BOND_BONDED))); boolean isEnabled = ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_ON)) || (priority == (android.bluetooth.BluetoothProfile.PRIORITY_AUTO_CONNECT))) && ((bondState == (android.bluetooth.BluetoothDevice.BOND_BONDED)) || (bondState == (android.bluetooth.BluetoothDevice.BOND_BONDING))); if ((!serviceDiscoveryPending) && (!isEnabled)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (((""okToConnect: return false, priority="" + priority) + "", bondState="") + bondState)); return false; } java.util.List<android.bluetooth.BluetoothDevice> connectingConnectedDevices = getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.CONNECTING_CONNECTED_STATES); if ((connectingConnectedDevices.size()) >= (mMaxHeadsetConnections)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (((""Maximum number of connections "" + (mMaxHeadsetConnections)) + "" was reached, rejecting connection from "") + device)); return false; } return true; }",addcc0a07c1e00db762776d350392b5f35e23ed5,2018-04-26 03:39:21,12
671699,src_com_android_bluetooth_hearingaid_HearingAidService.java,"@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : quiet mode enabled"")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE))) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((((""okToConnect: cannot connect to "" + device) + "" : priority="") + priority) + "" bondState="") + bondState)); return false; } if (priority <= (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((""okToConnect: cannot connect to "" + device) + "" : priority="") + priority)); return false; } return true; }",223a9d53c68491d3d72ea9e6be18cdbce01393a0,"@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : quiet mode enabled"")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); boolean isSdpPending = (priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && ((bondState == (android.bluetooth.BluetoothDevice.BOND_BONDING)) || (bondState == (android.bluetooth.BluetoothDevice.BOND_BONDED))); if (((!isSdpPending) && (priority != (android.bluetooth.BluetoothProfile.PRIORITY_ON))) && (priority != (android.bluetooth.BluetoothProfile.PRIORITY_AUTO_CONNECT))) { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((""okToAcceptConnection: return false, priority="" + priority) + "", bondState="") + bondState)); return false; } return true; }",8c1cb594e2a2bbb967f5ee0acd0de0594af46ff6,"@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : quiet mode enabled"")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); boolean serviceDiscoveryPending = (priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && ((bondState == (android.bluetooth.BluetoothDevice.BOND_BONDING)) || (bondState == (android.bluetooth.BluetoothDevice.BOND_BONDED))); boolean isEnabled = ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_ON)) || (priority == (android.bluetooth.BluetoothProfile.PRIORITY_AUTO_CONNECT))) && ((bondState == (android.bluetooth.BluetoothDevice.BOND_BONDED)) || (bondState == (android.bluetooth.BluetoothDevice.BOND_BONDING))); if ((!serviceDiscoveryPending) && (!isEnabled)) { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((""okToConnect: return false, priority="" + priority) + "", bondState="") + bondState)); return false; } return true; }",ef8845fe2011328d7e933fe7950f6fee4878dcb3,2018-04-26 03:39:21,12
671890,packages_CarrierDefaultApp_src_com_android_carrierdefaultapp_CaptivePortalLoginActivity.java,public void run() { try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } if ((isFinishing()) || (isDestroyed())) return; java.net.HttpURLConnection urlConnection = null; int httpResponseCode = 500; int oldTag = android.net.TrafficStats.getAndSetThreadStatsTag(TrafficStats.TAG_SYSTEM_PROBE); try { urlConnection = ((java.net.HttpURLConnection) (mNetwork.openConnection(new java.net.URL(mCm.getCaptivePortalServerUrl())))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setConnectTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setUseCaches(false); urlConnection.getInputStream(); httpResponseCode = urlConnection.getResponseCode(); } catch (java.io.IOException e) { com.android.carrierdefaultapp.CaptivePortalLoginActivity.loge(e.getMessage()); } finally { if (urlConnection != null) urlConnection.disconnect(); android.net.TrafficStats.setThreadStatsTag(oldTag); } if (httpResponseCode == 204) { done(true); } },a4ce1799d4d2973e405bd7ab5206a2b391ba290b,public void run() { final android.net.Network network = android.net.dns.ResolvUtil.makeNetworkWithPrivateDnsBypass(mNetwork); try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } if ((isFinishing()) || (isDestroyed())) return; java.net.HttpURLConnection urlConnection = null; int httpResponseCode = 500; int oldTag = android.net.TrafficStats.getAndSetThreadStatsTag(TrafficStats.TAG_SYSTEM_PROBE); try { urlConnection = ((java.net.HttpURLConnection) (network.openConnection(new java.net.URL(mCm.getCaptivePortalServerUrl())))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setConnectTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setUseCaches(false); urlConnection.getInputStream(); httpResponseCode = urlConnection.getResponseCode(); } catch (java.io.IOException e) { com.android.carrierdefaultapp.CaptivePortalLoginActivity.loge(e.getMessage()); } finally { if (urlConnection != null) urlConnection.disconnect(); android.net.TrafficStats.setThreadStatsTag(oldTag); } if (httpResponseCode == 204) { done(true); } },cb8b60d56c6c411dffb030c8287f5aa298d45e7b,public void run() { try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } if ((isFinishing()) || (isDestroyed())) return; java.net.HttpURLConnection urlConnection = null; int httpResponseCode = 500; int oldTag = android.net.TrafficStats.getAndSetThreadStatsTag(TrafficStats.TAG_SYSTEM_PROBE); try { urlConnection = ((java.net.HttpURLConnection) (mNetwork.openConnection(new java.net.URL(mCm.getCaptivePortalServerUrl())))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setConnectTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setUseCaches(false); urlConnection.getInputStream(); httpResponseCode = urlConnection.getResponseCode(); } catch (java.io.IOException e) { com.android.carrierdefaultapp.CaptivePortalLoginActivity.loge(e.getMessage()); } finally { if (urlConnection != null) urlConnection.disconnect(); android.net.TrafficStats.setThreadStatsTag(oldTag); } if (httpResponseCode == 204) { done(true); } },a4ce1799d4d2973e405bd7ab5206a2b391ba290b,2018-04-26 04:15:18,2
671890,packages_CarrierDefaultApp_src_com_android_carrierdefaultapp_CaptivePortalLoginActivity.java,"@java.lang.Override public void onAvailable(android.net.Network network) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd((""Network available: "" + network)); mCm.bindProcessToNetwork(network); mNetwork = network; runOnUiThreadIfNotFinishing(() -> { if (mReload) { mWebView.reload(); } else { mWebView.loadData("""", ""text/html"", null); } }); }",685b6ba7116058779baff44c29c0d2699308c209,"@java.lang.Override public void onAvailable(android.net.Network network) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd((""Network available: "" + network)); mCm.bindProcessToNetwork(network); mCm.setProcessDefaultNetworkForHostResolution(android.net.dns.ResolvUtil.getNetworkWithUseLocalNameserversFlag(network)); mNetwork = network; runOnUiThreadIfNotFinishing(() -> { if (mReload) { mWebView.reload(); } else { mWebView.loadData("""", ""text/html"", null); } }); }",924816f2815b8a9f447b2c33ee408e984535d501,"@java.lang.Override public void onAvailable(android.net.Network network) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd((""Network available: "" + network)); mCm.bindProcessToNetwork(network); mNetwork = network; runOnUiThreadIfNotFinishing(() -> { if (mReload) { mWebView.reload(); } else { mWebView.loadData("""", ""text/html"", null); } }); }",685b6ba7116058779baff44c29c0d2699308c209,2018-04-26 04:15:18,2
671890,packages_CarrierDefaultApp_src_com_android_carrierdefaultapp_CaptivePortalLoginActivity.java,private void testForCaptivePortal() { mTestingThread = new java.lang.Thread(new java.lang.Runnable() { public void run() { try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } if ((isFinishing()) || (isDestroyed())) return; java.net.HttpURLConnection urlConnection = null; int httpResponseCode = 500; int oldTag = android.net.TrafficStats.getAndSetThreadStatsTag(TrafficStats.TAG_SYSTEM_PROBE); try { urlConnection = ((java.net.HttpURLConnection) (mNetwork.openConnection(new java.net.URL(mCm.getCaptivePortalServerUrl())))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setConnectTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setUseCaches(false); urlConnection.getInputStream(); httpResponseCode = urlConnection.getResponseCode(); } catch (java.io.IOException e) { com.android.carrierdefaultapp.CaptivePortalLoginActivity.loge(e.getMessage()); } finally { if (urlConnection != null) urlConnection.disconnect(); android.net.TrafficStats.setThreadStatsTag(oldTag); } if (httpResponseCode == 204) { done(true); } } }); mTestingThread.start(); },eebe8f7610f13e897ddd6e0f387a0427d86c1959,private void testForCaptivePortal() { mTestingThread = new java.lang.Thread(new java.lang.Runnable() { public void run() { final android.net.Network network = android.net.dns.ResolvUtil.makeNetworkWithPrivateDnsBypass(mNetwork); try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } if ((isFinishing()) || (isDestroyed())) return; java.net.HttpURLConnection urlConnection = null; int httpResponseCode = 500; int oldTag = android.net.TrafficStats.getAndSetThreadStatsTag(TrafficStats.TAG_SYSTEM_PROBE); try { urlConnection = ((java.net.HttpURLConnection) (network.openConnection(new java.net.URL(mCm.getCaptivePortalServerUrl())))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setConnectTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setUseCaches(false); urlConnection.getInputStream(); httpResponseCode = urlConnection.getResponseCode(); } catch (java.io.IOException e) { com.android.carrierdefaultapp.CaptivePortalLoginActivity.loge(e.getMessage()); } finally { if (urlConnection != null) urlConnection.disconnect(); android.net.TrafficStats.setThreadStatsTag(oldTag); } if (httpResponseCode == 204) { done(true); } } }); mTestingThread.start(); },7e80aaa6d370f699130183b4392b541868329e8e,private void testForCaptivePortal() { mTestingThread = new java.lang.Thread(new java.lang.Runnable() { public void run() { try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } if ((isFinishing()) || (isDestroyed())) return; java.net.HttpURLConnection urlConnection = null; int httpResponseCode = 500; int oldTag = android.net.TrafficStats.getAndSetThreadStatsTag(TrafficStats.TAG_SYSTEM_PROBE); try { urlConnection = ((java.net.HttpURLConnection) (mNetwork.openConnection(new java.net.URL(mCm.getCaptivePortalServerUrl())))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setConnectTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setUseCaches(false); urlConnection.getInputStream(); httpResponseCode = urlConnection.getResponseCode(); } catch (java.io.IOException e) { com.android.carrierdefaultapp.CaptivePortalLoginActivity.loge(e.getMessage()); } finally { if (urlConnection != null) urlConnection.disconnect(); android.net.TrafficStats.setThreadStatsTag(oldTag); } if (httpResponseCode == 204) { done(true); } } }); mTestingThread.start(); },eebe8f7610f13e897ddd6e0f387a0427d86c1959,2018-04-26 04:15:18,2
671890,packages_CarrierDefaultApp_src_com_android_carrierdefaultapp_CaptivePortalLoginActivity.java,"private void requestNetworkForCaptivePortal() { android.net.NetworkRequest request = new android.net.NetworkRequest.Builder().addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR).addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET).removeCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED).build(); mNetworkCallback = new android.net.ConnectivityManager.NetworkCallback() { @java.lang.Override public void onAvailable(android.net.Network network) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd((""Network available: "" + network)); mCm.bindProcessToNetwork(network); mNetwork = network; runOnUiThreadIfNotFinishing(() -> { if (mReload) { mWebView.reload(); } else { mWebView.loadData("""", ""text/html"", null); } }); } @java.lang.Override public void onUnavailable() { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd(""Network unavailable""); runOnUiThreadIfNotFinishing(() -> { mWebView.loadUrl(mUrl.toString()); }); } @java.lang.Override public void onLost(android.net.Network lostNetwork) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd(""Network lost""); mReload = true; } }; com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd(""request Network for captive portal""); mCm.requestNetwork(request, mNetworkCallback, com.android.carrierdefaultapp.CaptivePortalLoginActivity.NETWORK_REQUEST_TIMEOUT_MS); }",8975923aca56e838044f2d7917b25b70dc59b0a1,"private void requestNetworkForCaptivePortal() { android.net.NetworkRequest request = new android.net.NetworkRequest.Builder().addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR).addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET).removeCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED).build(); mNetworkCallback = new android.net.ConnectivityManager.NetworkCallback() { @java.lang.Override public void onAvailable(android.net.Network network) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd((""Network available: "" + network)); mCm.bindProcessToNetwork(network); mCm.setProcessDefaultNetworkForHostResolution(android.net.dns.ResolvUtil.getNetworkWithUseLocalNameserversFlag(network)); mNetwork = network; runOnUiThreadIfNotFinishing(() -> { if (mReload) { mWebView.reload(); } else { mWebView.loadData("""", ""text/html"", null); } }); } @java.lang.Override public void onUnavailable() { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd(""Network unavailable""); runOnUiThreadIfNotFinishing(() -> { mWebView.loadUrl(mUrl.toString()); }); } @java.lang.Override public void onLost(android.net.Network lostNetwork) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd(""Network lost""); mReload = true; } }; com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd(""request Network for captive portal""); mCm.requestNetwork(request, mNetworkCallback, com.android.carrierdefaultapp.CaptivePortalLoginActivity.NETWORK_REQUEST_TIMEOUT_MS); }",c045a371609b6f520fc6b5b46e741c7b6bc6af01,"private void requestNetworkForCaptivePortal() { android.net.NetworkRequest request = new android.net.NetworkRequest.Builder().addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR).addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET).removeCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED).build(); mNetworkCallback = new android.net.ConnectivityManager.NetworkCallback() { @java.lang.Override public void onAvailable(android.net.Network network) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd((""Network available: "" + network)); mCm.bindProcessToNetwork(network); mNetwork = network; runOnUiThreadIfNotFinishing(() -> { if (mReload) { mWebView.reload(); } else { mWebView.loadData("""", ""text/html"", null); } }); } @java.lang.Override public void onUnavailable() { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd(""Network unavailable""); runOnUiThreadIfNotFinishing(() -> { mWebView.loadUrl(mUrl.toString()); }); } @java.lang.Override public void onLost(android.net.Network lostNetwork) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd(""Network lost""); mReload = true; } }; com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd(""request Network for captive portal""); mCm.requestNetwork(request, mNetworkCallback, com.android.carrierdefaultapp.CaptivePortalLoginActivity.NETWORK_REQUEST_TIMEOUT_MS); }",8975923aca56e838044f2d7917b25b70dc59b0a1,2018-04-26 04:15:18,2
672191,harmony-tests_src_test_java_org_apache_harmony_tests_java_nio_ByteBufferTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void testAllocateDirect() { try { java.nio.ByteBuffer.allocateDirect((-1)); fail(); } catch (java.lang.IllegalArgumentException expected) { } checkAllocateDirect(0); checkAllocateDirect(1); checkAllocateDirect(2); checkAllocateDirect((1 << 20)); checkAllocateDirect(1234567); },953a1aa5803145c6781d9895cb246b913765fcc8,public void testAllocateDirect() { try { java.nio.ByteBuffer.allocateDirect((-1)); fail(); } catch (java.lang.IllegalArgumentException expected) { } checkAllocateDirect(0); checkAllocateDirect(1); checkAllocateDirect(2); checkAllocateDirect((1 << 16)); checkAllocateDirect(123456); },668606b9e90449e75c814d9af4c98b4a51e1721d,2018-04-26 09:25:14,4
672730,tests_unit_src_com_android_bluetooth_hearingaid_HearingAidServiceTest.java,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED.equals(intent.getAction())) { try { mConnectionStateChangedQueue.put(intent); } catch (java.lang.InterruptedException e) { org.junit.Assert.fail((""Cannot add Intent to the Connection State queue: "" + (e.getMessage()))); } } }",c930a6ddb9ae69d1f6e7af0af9bce34507847885,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED.equals(intent.getAction())) { try { android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); org.junit.Assert.assertNotNull(device); java.util.concurrent.BlockingQueue<android.content.Intent> queue = mDeviceQueueMap.get(device); org.junit.Assert.assertNotNull(queue); queue.put(intent); } catch (java.lang.InterruptedException e) { org.junit.Assert.fail((""Cannot add Intent to the Connection State queue: "" + (e.getMessage()))); } } }",7534496959f104e70a3b07021e786fa9b91ed9b6,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED.equals(intent.getAction())) { try { android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); org.junit.Assert.assertNotNull(device); java.util.concurrent.LinkedBlockingQueue<android.content.Intent> queue = mDeviceQueueMap.get(device); org.junit.Assert.assertNotNull(queue); queue.put(intent); } catch (java.lang.InterruptedException e) { org.junit.Assert.fail((""Cannot add Intent to the Connection State queue: "" + (e.getMessage()))); } } }",491fed98a9b823a946aeddd7200e736011f8176f,2018-04-26 18:53:48,2
672730,tests_unit_src_com_android_bluetooth_hearingaid_HearingAidServiceTest.java,"private android.content.Intent waitForNoIntent(int timeoutMs, java.util.concurrent.BlockingQueue<android.content.Intent> queue) { try { android.content.Intent intent = queue.poll(timeoutMs, java.util.concurrent.TimeUnit.MILLISECONDS); org.junit.Assert.assertNull(intent); return intent; } catch (java.lang.InterruptedException e) { org.junit.Assert.fail((""Cannot obtain an Intent from the queue: "" + (e.getMessage()))); } return null; }",f23b8741299747da3a0993c69f0d13b8879b745f,"private android.content.Intent waitForNoIntent(int timeoutMs, java.util.concurrent.BlockingQueue<android.content.Intent> queue) { try { org.junit.Assert.assertNotNull(queue); android.content.Intent intent = queue.poll(timeoutMs, java.util.concurrent.TimeUnit.MILLISECONDS); org.junit.Assert.assertNull(intent); return intent; } catch (java.lang.InterruptedException e) { org.junit.Assert.fail((""Cannot obtain an Intent from the queue: "" + (e.getMessage()))); } return null; }",ab794c7e380a4db56c60710840589405b0ba55cf,"private android.content.Intent waitForNoIntent(int timeoutMs, java.util.concurrent.LinkedBlockingQueue<android.content.Intent> queue) { try { org.junit.Assert.assertNotNull(queue); android.content.Intent intent = queue.poll(timeoutMs, java.util.concurrent.TimeUnit.MILLISECONDS); org.junit.Assert.assertNull(intent); return intent; } catch (java.lang.InterruptedException e) { org.junit.Assert.fail((""Cannot obtain an Intent from the queue: "" + (e.getMessage()))); } return null; }",fbc921fbe0abf837d6741662debc95c248a02f87,2018-04-26 18:53:48,2
672730,tests_unit_src_com_android_bluetooth_hearingaid_HearingAidServiceTest.java,"private android.content.Intent waitForIntent(int timeoutMs, java.util.concurrent.BlockingQueue<android.content.Intent> queue) { try { android.content.Intent intent = queue.poll(timeoutMs, java.util.concurrent.TimeUnit.MILLISECONDS); org.junit.Assert.assertNotNull(intent); return intent; } catch (java.lang.InterruptedException e) { org.junit.Assert.fail((""Cannot obtain an Intent from the queue: "" + (e.getMessage()))); } return null; }",0c67484ee8aea8104d550c4d17cd77817a59b1fa,"private android.content.Intent waitForIntent(int timeoutMs, java.util.concurrent.BlockingQueue<android.content.Intent> queue) { try { org.junit.Assert.assertNotNull(queue); android.content.Intent intent = queue.poll(timeoutMs, java.util.concurrent.TimeUnit.MILLISECONDS); org.junit.Assert.assertNotNull(intent); return intent; } catch (java.lang.InterruptedException e) { org.junit.Assert.fail((""Cannot obtain an Intent from the queue: "" + (e.getMessage()))); } return null; }",6d306696eeab72b370c0203db442fc08b5c6dbd0,"private android.content.Intent waitForIntent(int timeoutMs, java.util.concurrent.LinkedBlockingQueue<android.content.Intent> queue) { try { org.junit.Assert.assertNotNull(queue); android.content.Intent intent = queue.poll(timeoutMs, java.util.concurrent.TimeUnit.MILLISECONDS); org.junit.Assert.assertNotNull(intent); return intent; } catch (java.lang.InterruptedException e) { org.junit.Assert.fail((""Cannot obtain an Intent from the queue: "" + (e.getMessage()))); } return null; }",adbcae2d74df9408ea4f99fb636eaf984c71f8da,2018-04-26 18:53:48,2
671562,tests_unit_src_com_android_bluetooth_btservice_ActiveDeviceManagerTest.java,,,"@org.junit.Test public void a2dpActiveDeviceSelected_setActive() { a2dpConnected(mA2dpDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpDevice); a2dpConnected(mA2dpHeadsetDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); a2dpActiveDeviceChanged(mA2dpDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpDevice); }",60199773316f7ca3a38a1d16312568903115e18a,"@org.junit.Test public void a2dpActiveDeviceSelected_setActive() { a2dpConnected(mA2dpDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpDevice); a2dpConnected(mA2dpHeadsetDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); a2dpActiveDeviceChanged(mA2dpDevice); verify(mA2dpService, after(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS).times(1)).setActiveDevice(mA2dpDevice); org.junit.Assert.assertEquals(mA2dpDevice, mActiveDeviceManager.getA2dpActiveDevice()); }",7ec8294c9c255acf3c12c62c7b9f2f1e139eca01,2018-04-27 00:09:32,9
671562,tests_unit_src_com_android_bluetooth_btservice_ActiveDeviceManagerTest.java,,,"@org.junit.Test public void headsetActiveDeviceSelected_setActive() { headsetConnected(mHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mHeadsetDevice); headsetConnected(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); headsetActiveDeviceChanged(mHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mHeadsetDevice); }",67627c26377f1788744d4b2c7ff3ad36d61973df,"@org.junit.Test public void headsetActiveDeviceSelected_setActive() { headsetConnected(mHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mHeadsetDevice); headsetConnected(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); headsetActiveDeviceChanged(mHeadsetDevice); verify(mHeadsetService, after(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS).times(1)).setActiveDevice(mHeadsetDevice); org.junit.Assert.assertEquals(mHeadsetDevice, mActiveDeviceManager.getHfpActiveDevice()); }",8620e1d5c8912343f9eb6fc460a39b6d13f0ce5b,2018-04-27 00:09:32,9
671562,tests_unit_src_com_android_bluetooth_btservice_ActiveDeviceManagerTest.java,,,"@org.junit.Test public void hearingAidActive_clearA2dpAndHeadsetActive() { a2dpConnected(mA2dpHeadsetDevice); headsetConnected(mA2dpHeadsetDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); hearingAidActiveDeviceChanged(mHearingAidDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(isNull()); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(isNull()); }",f338769d8d2712d45ccadffb4afaef70bf81b0cc,"@org.junit.Test public void hearingAidActive_clearA2dpAndHeadsetActive() { org.junit.Assume.assumeTrue(""Ignore test when HearingAidService is not enabled"", mContext.getResources().getBoolean(R.bool.profile_supported_hearing_aid)); a2dpConnected(mA2dpHeadsetDevice); headsetConnected(mA2dpHeadsetDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); hearingAidActiveDeviceChanged(mHearingAidDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(isNull()); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(isNull()); }",6fb156ff81dae3db8cbfb90b7d68712ca4a37042,2018-04-27 00:09:32,9
671562,tests_unit_src_com_android_bluetooth_btservice_ActiveDeviceManagerTest.java,,,"@org.junit.Test public void hearingAidActive_dontSetA2dpAndHeadsetActive() { hearingAidActiveDeviceChanged(mHearingAidDevice); a2dpConnected(mA2dpHeadsetDevice); headsetConnected(mA2dpHeadsetDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS).times(0)).setActiveDevice(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS).times(0)).setActiveDevice(mA2dpHeadsetDevice); }",d89b3ad89377615b62b5093298d213a03ed2af4e,"@org.junit.Test public void hearingAidActive_dontSetA2dpAndHeadsetActive() { org.junit.Assume.assumeTrue(""Ignore test when HearingAidService is not enabled"", mContext.getResources().getBoolean(R.bool.profile_supported_hearing_aid)); hearingAidActiveDeviceChanged(mHearingAidDevice); a2dpConnected(mA2dpHeadsetDevice); headsetConnected(mA2dpHeadsetDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS).times(0)).setActiveDevice(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS).times(0)).setActiveDevice(mA2dpHeadsetDevice); }",4c048b94951e3226e10aead6ab9a13d1e1e3d6ae,2018-04-27 00:09:32,9
671562,tests_unit_src_com_android_bluetooth_btservice_ActiveDeviceManagerTest.java,,,@org.junit.After public void tearDown() throws java.lang.Exception { if (((!(mContext.getResources().getBoolean(R.bool.profile_supported_hearing_aid))) || (!(mContext.getResources().getBoolean(R.bool.profile_supported_hs_hfp)))) || (!(mContext.getResources().getBoolean(R.bool.profile_supported_a2dp)))) { return; } mActiveDeviceManager.cleanup(); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); reset(mA2dpService); reset(mHeadsetService); reset(mHearingAidService); },67bf1cb8e0e0e3e4f2255c973b461cd2b9ba8996,@org.junit.After public void tearDown() throws java.lang.Exception { if ((!(mContext.getResources().getBoolean(R.bool.profile_supported_hs_hfp))) || (!(mContext.getResources().getBoolean(R.bool.profile_supported_a2dp)))) { return; } mActiveDeviceManager.cleanup(); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); },2cfc061435c50f96fc54bd7e6cf0803cb93fed18,2018-04-27 00:09:32,9
671562,tests_unit_src_com_android_bluetooth_btservice_ActiveDeviceManagerTest.java,,,"@org.junit.Test public void hearingAidActive_setA2dpActiveExplicitly() { hearingAidActiveDeviceChanged(mHearingAidDevice); a2dpConnected(mA2dpHeadsetDevice); a2dpActiveDeviceChanged(mA2dpHeadsetDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); }",30ae15252a28b912468bca3c09283ce2b6832933,"@org.junit.Test public void hearingAidActive_setA2dpActiveExplicitly() { org.junit.Assume.assumeTrue(""Ignore test when HearingAidService is not enabled"", mContext.getResources().getBoolean(R.bool.profile_supported_hearing_aid)); hearingAidActiveDeviceChanged(mHearingAidDevice); a2dpConnected(mA2dpHeadsetDevice); a2dpActiveDeviceChanged(mA2dpHeadsetDevice); verify(mHearingAidService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(isNull()); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS).times(0)).setActiveDevice(mA2dpHeadsetDevice); org.junit.Assert.assertEquals(mA2dpHeadsetDevice, mActiveDeviceManager.getA2dpActiveDevice()); org.junit.Assert.assertEquals(null, mActiveDeviceManager.getHearingAidActiveDevice()); }",9cef6c09c1930c83dc9108f60a2b85069a5965ab,2018-04-27 00:09:32,9
671562,tests_unit_src_com_android_bluetooth_btservice_ActiveDeviceManagerTest.java,,,"@org.junit.Test public void hearingAidActive_setHeadsetActiveExplicitly() { hearingAidActiveDeviceChanged(mHearingAidDevice); headsetConnected(mA2dpHeadsetDevice); headsetActiveDeviceChanged(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); }",d8bc5bfb08279db80c9780cb2abf6989208c59a2,"@org.junit.Test public void hearingAidActive_setHeadsetActiveExplicitly() { org.junit.Assume.assumeTrue(""Ignore test when HearingAidService is not enabled"", mContext.getResources().getBoolean(R.bool.profile_supported_hearing_aid)); hearingAidActiveDeviceChanged(mHearingAidDevice); headsetConnected(mA2dpHeadsetDevice); headsetActiveDeviceChanged(mA2dpHeadsetDevice); verify(mHearingAidService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(isNull()); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS).times(0)).setActiveDevice(mA2dpHeadsetDevice); org.junit.Assert.assertEquals(mA2dpHeadsetDevice, mActiveDeviceManager.getHfpActiveDevice()); org.junit.Assert.assertEquals(null, mActiveDeviceManager.getHearingAidActiveDevice()); }",3e21e9af00c570bb58aba563d9f1ff6c61d82261,2018-04-27 00:09:32,9
671562,tests_unit_src_com_android_bluetooth_btservice_ActiveDeviceManagerTest.java,,,"@org.junit.Before public void setUp() throws java.lang.Exception { mContext = android.support.test.InstrumentationRegistry.getTargetContext(); org.junit.Assume.assumeTrue(""Ignore test when A2dpService is not enabled"", mContext.getResources().getBoolean(R.bool.profile_supported_a2dp)); org.junit.Assume.assumeTrue(""Ignore test when HeadsetService is not enabled"", mContext.getResources().getBoolean(R.bool.profile_supported_hs_hfp)); org.junit.Assume.assumeTrue(""Ignore test when HearingAidService is not enabled"", mContext.getResources().getBoolean(R.bool.profile_supported_hearing_aid)); org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); when(mServiceFactory.getA2dpService()).thenReturn(mA2dpService); when(mServiceFactory.getHeadsetService()).thenReturn(mHeadsetService); when(mServiceFactory.getHearingAidService()).thenReturn(mHearingAidService); when(mA2dpService.setActiveDevice(any())).thenReturn(true); when(mHeadsetService.setActiveDevice(any())).thenReturn(true); when(mHearingAidService.setActiveDevice(any())).thenReturn(true); mActiveDeviceManager = new com.android.bluetooth.btservice.ActiveDeviceManager(mAdapterService, mServiceFactory); mActiveDeviceManager.start(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mA2dpDevice = mAdapter.getRemoteDevice(""00:00:00:00:00:01""); mHeadsetDevice = mAdapter.getRemoteDevice(""00:00:00:00:00:10""); mA2dpHeadsetDevice = mAdapter.getRemoteDevice(""00:00:00:00:00:11""); mHearingAidDevice = mAdapter.getRemoteDevice(""00:00:00:00:11:00""); }",911810be716629ffd4f737fafa4f6953653a5d19,"@org.junit.Before public void setUp() throws java.lang.Exception { mContext = android.support.test.InstrumentationRegistry.getTargetContext(); org.junit.Assume.assumeTrue(""Ignore test when A2dpService is not enabled"", mContext.getResources().getBoolean(R.bool.profile_supported_a2dp)); org.junit.Assume.assumeTrue(""Ignore test when HeadsetService is not enabled"", mContext.getResources().getBoolean(R.bool.profile_supported_hs_hfp)); org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); when(mServiceFactory.getA2dpService()).thenReturn(mA2dpService); when(mServiceFactory.getHeadsetService()).thenReturn(mHeadsetService); when(mServiceFactory.getHearingAidService()).thenReturn(mHearingAidService); when(mA2dpService.setActiveDevice(any())).thenReturn(true); when(mHeadsetService.setActiveDevice(any())).thenReturn(true); when(mHearingAidService.setActiveDevice(any())).thenReturn(true); mActiveDeviceManager = new com.android.bluetooth.btservice.ActiveDeviceManager(mAdapterService, mServiceFactory); mActiveDeviceManager.start(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mA2dpDevice = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 0); mHeadsetDevice = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mA2dpHeadsetDevice = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 2); mHearingAidDevice = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 3); }",c822afff72e2faef49272531dad27a070c60c8fc,2018-04-27 00:09:32,9
674585,test_1935-get-set-current-frame-jit_src_Main.java,"public static void runGet() throws java.lang.Exception { java.lang.reflect.Method target = Main.IntRunner.class.getDeclaredMethod(""run""); Main.IntRunner int_runner = new Main.IntRunner(true); java.lang.Thread target_get = new java.lang.Thread(int_runner, ""GetLocalInt - Target""); target_get.start(); int_runner.waitForBusyLoopStart(); try { art.Suspension.suspend(target_get); } catch (java.lang.Exception e) { java.lang.System.out.println((""FAIL: got "" + e)); e.printStackTrace(); int_runner.finish(); target_get.join(); return; } try { art.StackTrace.StackFrameData frame = Main.FindStackFrame(target_get, target); int depth = frame.depth; if (depth != 0) { throw new java.lang.Error((""Expected depth 0 but got "" + depth)); } int slot = Main.FindSlot(frame); int value = art.Locals.GetLocalVariableInt(target_get, depth, slot); java.lang.System.out.println((""From GetLocalInt(), value is "" + value)); } finally { art.Suspension.resume(target_get); int_runner.finish(); target_get.join(); } }",7e32590fc51f116bb8e96f1f0315c12d87e7c176,"public static void runGet() throws java.lang.Exception { java.lang.reflect.Method target = Main.IntRunner.class.getDeclaredMethod(""run""); Main.IntRunner int_runner = new Main.IntRunner(true, true); java.lang.Thread target_get = new java.lang.Thread(int_runner, ""GetLocalInt - Target""); target_get.start(); int_runner.waitForBusyLoopStart(); try { art.Suspension.suspend(target_get); } catch (java.lang.Exception e) { java.lang.System.out.println((""FAIL: got "" + e)); e.printStackTrace(); int_runner.finish(); target_get.join(); return; } try { art.StackTrace.StackFrameData frame = Main.FindStackFrame(target_get, target); int depth = frame.depth; if (depth != 0) { throw new java.lang.Error((""Expected depth 0 but got "" + depth)); } int slot = Main.FindSlot(frame); int value = art.Locals.GetLocalVariableInt(target_get, depth, slot); java.lang.System.out.println((""From GetLocalInt(), value is "" + value)); } finally { art.Suspension.resume(target_get); int_runner.finish(); target_get.join(); } }",7e29066f679bc3102328d95a30e313c438867a57,"public static void runGet() throws java.lang.Exception { java.lang.reflect.Method target = Main.IntRunner.class.getDeclaredMethod(""run""); Main.stopJit(); Main.IntRunner int_runner = new Main.IntRunner(true); java.lang.Thread target_get = new java.lang.Thread(int_runner, ""GetLocalInt - Target""); target_get.start(); int_runner.waitForBusyLoopStart(); try { art.Suspension.suspend(target_get); } catch (java.lang.Exception e) { java.lang.System.out.println((""FAIL: got "" + e)); e.printStackTrace(); int_runner.finish(); target_get.join(); return; } try { art.StackTrace.StackFrameData frame = Main.FindStackFrame(target_get, target); int depth = frame.depth; if (depth != 0) { throw new java.lang.Error((""Expected depth 0 but got "" + depth)); } int slot = Main.FindSlot(frame); int value = art.Locals.GetLocalVariableInt(target_get, depth, slot); java.lang.System.out.println((""From GetLocalInt(), value is "" + value)); } finally { art.Suspension.resume(target_get); int_runner.finish(); target_get.join(); } }",19e03c68bbaf3c57745b13cbacd4a02fa9920b39,2018-04-27 23:56:13,3
674585,test_1935-get-set-current-frame-jit_src_Main.java,"public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; } java.time.Instant osrDeadline = java.time.Instant.now().plusSeconds((expectOsr ? 600 : 3)); do { inBusyLoop = true; } while (((Main.hasJit()) && (!(Main.isInOsrCode(""run"")))) && ((osrDeadline.compareTo(java.time.Instant.now())) > 0) ); if (Main.hasJit()) { boolean inOsr = Main.isInOsrCode(""run""); if ((expectOsr) && (!inOsr)) { throw new java.lang.Error((""Expected to be in OSR but was not. interpreter: "" + (Main.isInterpreted()))); } else if ((!(expectOsr)) && inOsr) { throw new java.lang.Error((""Expected not to be in OSR but was. interpreter: "" + (Main.isInterpreted()))); } } Main.reportValue(TARGET); }",4b58cc2a4ee0e91eed1191cec07d12a7798b5c55,"public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; } java.time.Instant osrDeadline = java.time.Instant.now().plusSeconds((expectOsr ? 600 : 3)); do { inBusyLoop = true; } while (((Main.hasJit()) && (!(Main.isInOsrCode(""run"")))) && ((osrDeadline.compareTo(java.time.Instant.now())) > 0) ); if (Main.hasJit()) { boolean inOsr = Main.isInOsrCode(""run""); if (allowJit) { inOsr = inOsr || (!(Main.isInterpreted())); } if ((expectOsr) && (!inOsr)) { throw new java.lang.Error((""Expected to be in OSR but was not. interpreter: "" + (Main.isInterpreted()))); } else if ((!(expectOsr)) && inOsr) { throw new java.lang.Error((""Expected not to be in OSR but was. interpreter: "" + (Main.isInterpreted()))); } } Main.reportValue(TARGET); }",82a5b732afbd946ea2d89e128c0a46f5c876ffe9,"public void run() { int TARGET = 42; if (((Main.hasJit()) && (expectOsr)) && (!(Main.isInterpreted()))) { java.lang.System.out.println(""Unexpectedly in jit code prior to restarting the JIT!""); } Main.startJit(); while (continueBusyLoop) { inBusyLoop = true; } java.time.Instant osrDeadline = java.time.Instant.now().plusSeconds((expectOsr ? 600 : 3)); do { inBusyLoop = true; } while (((Main.hasJit()) && (!(Main.isInOsrCode(""run"")))) && ((osrDeadline.compareTo(java.time.Instant.now())) > 0) ); if (Main.hasJit()) { boolean inOsr = Main.isInOsrCode(""run""); if ((expectOsr) && (!inOsr)) { throw new java.lang.Error((""Expected to be in OSR but was not. interpreter: "" + (Main.isInterpreted()))); } else if ((!(expectOsr)) && inOsr) { throw new java.lang.Error((""Expected not to be in OSR but was. interpreter: "" + (Main.isInterpreted()))); } } Main.reportValue(TARGET); }",ce5f6db502b48a976780c0ceb57a2aa02fd8cfe7,2018-04-27 23:56:13,3
674585,test_1935-get-set-current-frame-jit_src_Main.java,"public static void runSet() throws java.lang.Exception { java.lang.reflect.Method target = Main.IntRunner.class.getDeclaredMethod(""run""); Main.IntRunner int_runner = new Main.IntRunner(false); java.lang.Thread target_set = new java.lang.Thread(int_runner, ""SetLocalInt - Target""); target_set.start(); int_runner.waitForBusyLoopStart(); try { art.Suspension.suspend(target_set); } catch (java.lang.Exception e) { java.lang.System.out.println((""FAIL: got "" + e)); e.printStackTrace(); int_runner.finish(); target_set.join(); return; } try { art.StackTrace.StackFrameData frame = Main.FindStackFrame(target_set, target); int depth = frame.depth; if (depth != 0) { throw new java.lang.Error((""Expected depth 0 but got "" + depth)); } int slot = Main.FindSlot(frame); java.lang.System.out.println((""Setting TARGET to "" + (Main.SET_VALUE))); art.Locals.SetLocalVariableInt(target_set, depth, slot, Main.SET_VALUE); } finally { art.Suspension.resume(target_set); int_runner.finish(); target_set.join(); } }",d780906bf941de0f74594c4d29c56c682bf6aa4d,"public static void runSet() throws java.lang.Exception { java.lang.reflect.Method target = Main.IntRunner.class.getDeclaredMethod(""run""); Main.IntRunner int_runner = new Main.IntRunner(false, false); java.lang.Thread target_set = new java.lang.Thread(int_runner, ""SetLocalInt - Target""); target_set.start(); int_runner.waitForBusyLoopStart(); try { art.Suspension.suspend(target_set); } catch (java.lang.Exception e) { java.lang.System.out.println((""FAIL: got "" + e)); e.printStackTrace(); int_runner.finish(); target_set.join(); return; } try { art.StackTrace.StackFrameData frame = Main.FindStackFrame(target_set, target); int depth = frame.depth; if (depth != 0) { throw new java.lang.Error((""Expected depth 0 but got "" + depth)); } int slot = Main.FindSlot(frame); java.lang.System.out.println((""Setting TARGET to "" + (Main.SET_VALUE))); art.Locals.SetLocalVariableInt(target_set, depth, slot, Main.SET_VALUE); } finally { art.Suspension.resume(target_set); int_runner.finish(); target_set.join(); } }",a437a5bdddb78cae4acc94e43e539be1b1016f49,"public static void runSet() throws java.lang.Exception { java.lang.reflect.Method target = Main.IntRunner.class.getDeclaredMethod(""run""); Main.stopJit(); Main.IntRunner int_runner = new Main.IntRunner(false); java.lang.Thread target_set = new java.lang.Thread(int_runner, ""SetLocalInt - Target""); target_set.start(); int_runner.waitForBusyLoopStart(); try { art.Suspension.suspend(target_set); } catch (java.lang.Exception e) { java.lang.System.out.println((""FAIL: got "" + e)); e.printStackTrace(); int_runner.finish(); target_set.join(); return; } try { art.StackTrace.StackFrameData frame = Main.FindStackFrame(target_set, target); int depth = frame.depth; if (depth != 0) { throw new java.lang.Error((""Expected depth 0 but got "" + depth)); } int slot = Main.FindSlot(frame); java.lang.System.out.println((""Setting TARGET to "" + (Main.SET_VALUE))); art.Locals.SetLocalVariableInt(target_set, depth, slot, Main.SET_VALUE); } finally { art.Suspension.resume(target_set); int_runner.finish(); target_set.join(); } }",c582b8d6efb89c3d22ae73e18fde82dc9a53777e,2018-04-27 23:56:13,3
670703,hostside_src_com_android_graphics_benchmark_metric_GraphicsBenchmarkMetricCollector.java,,,"private void onEnd(com.android.tradefed.device.metric.DeviceMetricData runData) { java.io.BufferedWriter outputFile = null; try { java.lang.String outputFileName = ""/tmp/0/graphics-benchmark/out.txt""; outputFile = new java.io.BufferedWriter(new java.io.FileWriter(outputFileName)); outputFile.write(((""VSync Period: "" + (vSyncPeriod)) + ""\n"")); outputFile.write(""Times:\n""); for (java.lang.Long time : elapsedTimes) outputFile.write((time + ""\n"")); outputFile.close(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } }",2255b77db901420d2bf3e3bb81288babaa268595,"private void onEnd(com.android.tradefed.device.metric.DeviceMetricData runData) { try (java.io.BufferedWriter outputFile = new java.io.BufferedWriter(new java.io.FileWriter(""/tmp/0/graphics-benchmark/out.txt"", (!(mFirstRun))))) { outputFile.write(((""VSync Period: "" + (mVSyncPeriod)) + ""\n"")); outputFile.write(""Times:\n""); for (java.lang.Long time : mElapsedTimes) outputFile.write((time + ""\n"")); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } mFirstRun = false; }",2d4f148fced1c77e11dd7d3dbcc0cda919b83af7,2018-04-28 00:03:47,7
670703,hostside_src_com_android_graphics_benchmark_metric_GraphicsBenchmarkMetricCollector.java,,,public static void setAppLayerName(java.lang.String name) { com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.appLayerName = name; },7a8ca87e09aff77b5cec3a544f2c9ef2e80c17ab,public static void setAppLayerName(java.lang.String name) { com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mAppLayerName = name; com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTargetLayer = null; },3220d5e3094e4b776c681111e4f9891d87735d71,2018-04-28 00:03:47,7
670703,hostside_src_com_android_graphics_benchmark_metric_GraphicsBenchmarkMetricCollector.java,,,"@java.lang.Override public final void onTestRunStart(com.android.tradefed.device.metric.DeviceMetricData runData) { com.android.tradefed.log.LogUtil.CLog.e(""Attempt to get device from onTestRunStart""); device = getDevices().get(0); com.android.tradefed.log.LogUtil.CLog.e((""Device : "" + (device))); elapsedTimes = new java.util.ArrayList<java.lang.Long>(); com.android.tradefed.log.LogUtil.CLog.e(""starting""); onStart(runData); timer = new java.util.Timer(); java.util.TimerTask timerTask = new java.util.TimerTask() { @java.lang.Override public void run() { try { collect(runData); } catch (java.lang.InterruptedException e) { timer.cancel(); java.lang.Thread.currentThread().interrupt(); com.android.tradefed.log.LogUtil.CLog.e(""Interrupted exception thrown from task:""); com.android.tradefed.log.LogUtil.CLog.e(e); } } }; if (mFixedScheduleRate) { timer.scheduleAtFixedRate(timerTask, 0, mIntervalMs); } else { timer.schedule(timerTask, 0, mIntervalMs); } }",8c95168ffdb1db12f3c096fd9c5576ddbf615ea5,"@java.lang.Override public final void onTestRunStart(com.android.tradefed.device.metric.DeviceMetricData runData) { com.android.tradefed.log.LogUtil.CLog.e(""Attempt to get device from onTestRunStart""); mDevice = getDevices().get(0); com.android.tradefed.log.LogUtil.CLog.e((""Device : "" + (mDevice))); mElapsedTimes = new java.util.ArrayList<java.lang.Long>(); com.android.tradefed.log.LogUtil.CLog.e(""starting""); onStart(runData); mTimer = new java.util.Timer(); java.util.TimerTask timerTask = new java.util.TimerTask() { @java.lang.Override public void run() { try { collect(runData); } catch (java.lang.InterruptedException e) { mTimer.cancel(); java.lang.Thread.currentThread().interrupt(); com.android.tradefed.log.LogUtil.CLog.e(""Interrupted exception thrown from task:""); com.android.tradefed.log.LogUtil.CLog.e(e); } } }; if (mFixedScheduleRate) { mTimer.scheduleAtFixedRate(timerTask, 0, mIntervalMs); } else { mTimer.schedule(timerTask, 0, mIntervalMs); } }",325352f7fe3ce6e201c7208e7ec137c2299fc3d8,2018-04-28 00:03:47,7
670703,hostside_src_com_android_graphics_benchmark_metric_GraphicsBenchmarkMetricCollector.java,,,"@java.lang.Override public void run() { try { collect(runData); } catch (java.lang.InterruptedException e) { timer.cancel(); java.lang.Thread.currentThread().interrupt(); com.android.tradefed.log.LogUtil.CLog.e(""Interrupted exception thrown from task:""); com.android.tradefed.log.LogUtil.CLog.e(e); } }",a3c1a83f95ee8dce58565a9823abce24b2826e13,"@java.lang.Override public void run() { try { collect(runData); } catch (java.lang.InterruptedException e) { mTimer.cancel(); java.lang.Thread.currentThread().interrupt(); com.android.tradefed.log.LogUtil.CLog.e(""Interrupted exception thrown from task:""); com.android.tradefed.log.LogUtil.CLog.e(e); } }",9d207e5dec25f2e90de1389e4b4db3bb453140ca,2018-04-28 00:03:47,7
670703,hostside_src_com_android_graphics_benchmark_metric_GraphicsBenchmarkMetricCollector.java,,,public boolean sample(long timeStamp) { if (timeStamp < (latestSeen)) { return false; } else if (timeStamp == (latestSeen)) { return true; } else { elapsedTimes.add((timeStamp - (latestSeen))); latestSeen = timeStamp; return false; } },a8d0031c6b5dc95c13a802176004f892322b4076,private boolean sample(long timeStamp) { if (timeStamp < (mLatestSeen)) { return false; } else if (timeStamp == (mLatestSeen)) { return true; } else { mElapsedTimes.add((timeStamp - (mLatestSeen))); mLatestSeen = timeStamp; return false; } },dc616656bad77828e1d1d70baae104a128ba9139,2018-04-28 00:03:47,7
670703,hostside_src_com_android_graphics_benchmark_testtype_GraphicsBenchmarkHostsideController.java,"@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.name())) + ""]"")); } }",4783a59530930bb5245fcc1e3b48e440042ae3e8,"@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.Map<java.lang.String, java.lang.String> runMetrics = new java.util.HashMap<>(); for (com.android.graphics.benchmark.ApkInfo apk : mApks) { com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.setAppLayerName(apk.getPackageName()); getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); listener.testRunStarted(""graphicsbenchmark"", mApks.size()); com.android.ddmlib.testrunner.TestIdentifier identifier = new com.android.ddmlib.testrunner.TestIdentifier(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.name())) + ""]"")); java.util.Map<java.lang.String, java.lang.String> testMetrics = new java.util.HashMap<>(); listener.testStarted(identifier); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.name())) + ""]"")); listener.testEnded(identifier, testMetrics); listener.testRunEnded(0, runMetrics); } }",e0e598ccadeb56ddc319b396672505f26dfcf111,"@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.Map<java.lang.String, java.lang.String> runMetrics = new java.util.HashMap<>(); initApkList(); getDevice().pushFile(mApkInfoFile, ApkInfo.APK_LIST_LOCATION); for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.setAppLayerName(apk.getPackageName()); listener.testRunStarted(""graphicsbenchmark"", mApks.size()); com.android.ddmlib.testrunner.TestIdentifier identifier = new com.android.ddmlib.testrunner.TestIdentifier(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.getName())) + ""]"")); java.util.Map<java.lang.String, java.lang.String> testMetrics = new java.util.HashMap<>(); listener.testStarted(identifier); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.getName())) + ""]"")); listener.testEnded(identifier, testMetrics); listener.testRunEnded(0, runMetrics); } }",c015c110f461280d93381541c78a4e369e5565fd,2018-04-28 00:03:47,7
670703,hostside_src_com_android_graphics_benchmark_metric_GraphicsBenchmarkMetricCollector.java,,,"@java.lang.Override public final void onTestRunEnd(com.android.tradefed.device.metric.DeviceMetricData runData) { if ((timer) != null) { timer.cancel(); timer.purge(); } onEnd(runData); com.android.tradefed.log.LogUtil.CLog.d(""finished""); }",4917a6561b119ea4578ac9a9b37d2deba7b1a581,"@java.lang.Override public final void onTestRunEnd(com.android.tradefed.device.metric.DeviceMetricData runData) { if ((mTimer) != null) { mTimer.cancel(); mTimer.purge(); } onEnd(runData); com.android.tradefed.log.LogUtil.CLog.d(""finished""); }",b0631a4197c10a9655a26f264ac27aeb6f529c67,2018-04-28 00:03:47,7
673740,Common_src_com_googlecode_android_scripting_jsonrpc_JsonBuilder.java,"private static org.json.JSONObject buildLinkProperties(android.net.LinkProperties data) throws org.json.JSONException { org.json.JSONObject info = new org.json.JSONObject(); info.put(""InterfaceName"", data.getInterfaceName()); info.put(""LinkAddresses"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getLinkAddresses())); info.put(""DnsServers"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getDnsServers())); info.put(""Domains"", data.getDomains()); info.put(""Mtu"", data.getMtu()); info.put(""Routes"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getRoutes())); return info; }",f500820e2971ee2426c7940b0a162ecbcf95059a,"private static org.json.JSONObject buildLinkProperties(android.net.LinkProperties data) throws org.json.JSONException { org.json.JSONObject info = new org.json.JSONObject(); info.put(""InterfaceName"", data.getInterfaceName()); info.put(""LinkAddresses"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getLinkAddresses())); info.put(""DnsServers"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getDnsServers())); info.put(""Domains"", data.getDomains()); info.put(""Mtu"", data.getMtu()); info.put(""Routes"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getRoutes())); info.put(""IsPrivateDnsActive"", data.isPrivateDnsActive()); info.put(""PrivateDnsServerName"", data.getPrivateDnsServerName()); return info; }",46a3c29917b9e02eff34c9c0e55abe130328d4af,"private static org.json.JSONObject buildLinkProperties(android.net.LinkProperties data) throws org.json.JSONException { org.json.JSONObject info = new org.json.JSONObject(); info.put(""InterfaceName"", data.getInterfaceName()); info.put(""LinkAddresses"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getLinkAddresses())); info.put(""DnsServers"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getDnsServers())); info.put(""Domains"", data.getDomains()); info.put(""Mtu"", data.getMtu()); info.put(""Routes"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getRoutes())); info.put(""IsPrivateDnsActive"", data.isPrivateDnsActive()); info.put(""PrivateDnsServerName"", data.getPrivateDnsServerName()); info.put(""ValidatedPrivateDnsServers"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getValidatedPrivateDnsServers())); return info; }",9e34b30d6ebefa1c5bf21d12816e77c8c9e23a11,2018-04-30 21:32:01,3
675727,src_com_android_server_telecom_bluetooth_BluetoothRouteManager.java,"private boolean connectAudio(java.lang.String address) { com.android.server.telecom.BluetoothHeadsetProxy bluetoothHeadset = mDeviceManager.getHeadsetService(); if (bluetoothHeadset == null) { android.telecom.Log.w(this, ""Trying to connect audio but no headset service exists.""); return false; } return bluetoothHeadset.connectAudio(address); }",d75f7fa482932fc1b93670300fcb0d408e2f13f9,"private boolean connectAudio(java.lang.String address) { com.android.server.telecom.BluetoothHeadsetProxy bluetoothHeadset = mDeviceManager.getHeadsetService(); if (bluetoothHeadset == null) { android.telecom.Log.w(this, ""Trying to connect audio but no headset service exists.""); return false; } android.bluetooth.BluetoothDevice device = mDeviceManager.getDeviceFromAddress(address); if (device == null) { android.telecom.Log.w(this, ""Attempting to turn on audio for a disconnected device""); return false; } boolean success = bluetoothHeadset.setActiveDevice(device); if (!success) { android.telecom.Log.w(com.android.server.telecom.bluetooth.BluetoothRouteManager.LOG_TAG, ""Couldn't set active device to %s"", address); return false; } if (!(bluetoothHeadset.isAudioOn())) { return bluetoothHeadset.connectAudio(); } return true; }",fab3aa3847df72a2a128350827c6827edc6d7891,"private boolean connectAudio(java.lang.String address) { com.android.server.telecom.BluetoothHeadsetProxy bluetoothHeadset = mDeviceManager.getHeadsetService(); if (bluetoothHeadset == null) { android.telecom.Log.w(this, ""Trying to connect audio but no headset service exists.""); return false; } android.bluetooth.BluetoothDevice device = mDeviceManager.getDeviceFromAddress(address); if (device == null) { android.telecom.Log.w(this, ""Attempting to turn on audio for a disconnected device""); return false; } if (!(bluetoothHeadset.setActiveDevice(device))) { android.telecom.Log.w(com.android.server.telecom.bluetooth.BluetoothRouteManager.LOG_TAG, ""Couldn't set active device to %s"", address); return false; } if (!(bluetoothHeadset.isAudioOn())) { return bluetoothHeadset.connectAudio(); } return true; }",4de74f6fbe11dc7084cc4bf7efedce7fd2ee262e,2018-05-02 23:03:09,3
677803,updater_sample_tests_src_com_example_android_systemupdatersample_util_PayloadSpecsTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.io.File createMockPropertiesFile() throws java.io.IOException { java.io.File pFile = new java.io.File(mTestDir, PackageFiles.PAYLOAD_PROPERTIES_FILE_NAME); try (java.io.BufferedWriter w = new java.io.BufferedWriter(new java.io.FileWriter(pFile))) { w.write(com.example.android.systemupdatersample.util.PayloadSpecsTest.PROPERTIES_CONTENTS); } return pFile; }",15d7f37e03160538232b60da5c32e8118e51ba82,"private java.io.File createMockPropertiesFile() throws java.io.IOException { java.io.File propertiesFile = new java.io.File(mTestDir, PackageFiles.PAYLOAD_PROPERTIES_FILE_NAME); com.google.common.io.Files.asCharSink(propertiesFile, Charsets.UTF_8).write(com.example.android.systemupdatersample.util.PayloadSpecsTest.PROPERTIES_CONTENTS); return propertiesFile; }",2430274f6730dea0317788575252ad8b08e31020,2018-05-03 22:52:35,6
678302,hostside_src_com_android_graphics_benchmark_testtype_GraphicsBenchmarkHostsideController.java,"@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.Map<java.lang.String, java.lang.String> runMetrics = new java.util.HashMap<>(); initApkList(); getDevice().pushFile(mApkInfoFile, ApkInfo.APK_LIST_LOCATION); for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.setAppLayerName(apk); listener.testRunStarted(""graphicsbenchmark"", mApks.size()); com.android.ddmlib.testrunner.TestIdentifier identifier = new com.android.ddmlib.testrunner.TestIdentifier(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.getName())) + ""]"")); java.util.Map<java.lang.String, java.lang.String> testMetrics = new java.util.HashMap<>(); listener.testStarted(identifier); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.getName())) + ""]"")); listener.testEnded(identifier, testMetrics); listener.testRunEnded(0, runMetrics); } }",c67d47b67a95d22ab7f04364eb8ed82d9efcadca,"@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.Map<java.lang.String, java.lang.String> runMetrics = new java.util.HashMap<>(); initApkList(); getDevice().pushFile(mApkInfoFile, ApkInfo.APK_LIST_LOCATION); for (com.android.graphics.benchmark.ApkInfo apk : mApks) { java.io.File apkFile = findApk(apk.getFileName()); getDevice().installPackage(apkFile, true); com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.setAppLayerName(apk); listener.testRunStarted(""graphicsbenchmark"", mApks.size()); com.android.ddmlib.testrunner.TestIdentifier identifier = new com.android.ddmlib.testrunner.TestIdentifier(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.getName())) + ""]"")); java.util.Map<java.lang.String, java.lang.String> testMetrics = new java.util.HashMap<>(); listener.testStarted(identifier); if (apkFile == null) { listener.testFailed(identifier, java.lang.String.format(""Missing APK. Unable to find %s in %s."", apk.getFileName(), mApkDir)); } else { runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.getName())) + ""]"")); } listener.testEnded(identifier, testMetrics); listener.testRunEnded(0, runMetrics); } }",c8469e0c05f73878af49b89e7288674fd3bab900,"@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.Map<java.lang.String, java.lang.String> runMetrics = new java.util.HashMap<>(); initApkList(); getDevice().pushFile(mApkInfoFile, ApkInfo.APK_LIST_LOCATION); for (com.android.graphics.benchmark.ApkInfo apk : mApks) { java.io.File apkFile = findApk(apk.getFileName()); getDevice().installPackage(apkFile, true); com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.setAppLayerName(apk); listener.testRunStarted(""graphicsbenchmark"", mApks.size()); com.android.ddmlib.testrunner.TestIdentifier identifier = new com.android.ddmlib.testrunner.TestIdentifier(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.getName())) + ""]"")); java.util.Map<java.lang.String, java.lang.String> testMetrics = new java.util.HashMap<>(); listener.testStarted(identifier); if (apkFile == null) { listener.testFailed(identifier, java.lang.String.format(""Missing APK. Unable to find %s in %s."", apk.getFileName(), mApkDir)); } else { runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.getName())) + ""]"")); } listener.testEnded(identifier, testMetrics); com.android.graphics.benchmark.proto.ResultDataProto.Result resultData = retrieveResultData(); com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.setDeviceResultData(resultData); listener.testRunEnded(0, runMetrics); } }",1757de608049c20921ce06fa42ecd371ec598736,2018-05-07 19:40:29,7
679301,helper_src_com_android_graphics_benchmark_ApkListXmlParser.java,"private com.android.graphics.benchmark.ApkInfo createApkInfo(org.w3c.dom.Element element) { java.util.List<com.android.graphics.benchmark.ApkInfo.Argument> args = new java.util.ArrayList<>(); org.w3c.dom.NodeList argsNodeList = element.getElementsByTagName(""args""); if ((argsNodeList.getLength()) > 0) { org.w3c.dom.NodeList children = argsNodeList.item(0).getChildNodes(); for (int j = 0; j < (children.getLength()); j++) { org.w3c.dom.Node argNode = children.item(j); if ((argNode.getNodeType()) != (org.w3c.dom.Node.ELEMENT_NODE)) { continue; } org.w3c.dom.Element argElement = ((org.w3c.dom.Element) (argNode)); args.add(new com.android.graphics.benchmark.ApkInfo.Argument(argElement.getTagName(), argElement.getTextContent())); } } return new com.android.graphics.benchmark.ApkInfo(getElement(element, ""name""), getElement(element, ""fileName""), getElement(element, ""packageName""), getElement(element, ""layerName""), args); }",219655628180855153c3b3b38f102848cbdbf6d9,"private com.android.graphics.benchmark.ApkInfo createApkInfo(org.w3c.dom.Element element) { java.util.List<com.android.graphics.benchmark.ApkInfo.Argument> args = new java.util.ArrayList<>(); org.w3c.dom.NodeList argsNodeList = element.getElementsByTagName(""args""); if ((argsNodeList.getLength()) > 0) { org.w3c.dom.NodeList children = argsNodeList.item(0).getChildNodes(); for (int j = 0; j < (children.getLength()); j++) { org.w3c.dom.Node argNode = children.item(j); if ((argNode.getNodeType()) != (org.w3c.dom.Node.ELEMENT_NODE)) { continue; } org.w3c.dom.Element argElement = ((org.w3c.dom.Element) (argNode)); args.add(new com.android.graphics.benchmark.ApkInfo.Argument(argElement.getTagName(), argElement.getTextContent())); } } return new com.android.graphics.benchmark.ApkInfo(getElement(element, ""name"", null), getElement(element, ""fileName"", null), getElement(element, ""packageName"", null), getElement(element, ""layerName"", null), args, java.lang.Integer.parseInt(getElement(element, ""runTime"", ""300000""))); }",6f7a8fdd6d46b24070683baea5c6e99c3504ee5d,"private com.android.graphics.benchmark.ApkInfo createApkInfo(org.w3c.dom.Element element) { java.util.List<com.android.graphics.benchmark.ApkInfo.Argument> args = new java.util.ArrayList<>(); org.w3c.dom.NodeList argsNodeList = element.getElementsByTagName(""args""); if ((argsNodeList.getLength()) > 0) { org.w3c.dom.NodeList children = argsNodeList.item(0).getChildNodes(); for (int j = 0; j < (children.getLength()); j++) { org.w3c.dom.Node argNode = children.item(j); if ((argNode.getNodeType()) != (org.w3c.dom.Node.ELEMENT_NODE)) { continue; } org.w3c.dom.Element argElement = ((org.w3c.dom.Element) (argNode)); args.add(new com.android.graphics.benchmark.ApkInfo.Argument(argElement.getTagName(), argElement.getTextContent())); } } return new com.android.graphics.benchmark.ApkInfo(getElement(element, ""name"", null), getElement(element, ""fileName"", null), getElement(element, ""packageName"", null), getElement(element, ""layerName"", null), args, java.lang.Integer.parseInt(getElement(element, ""runTime"", ""10000""))); }",42bf7517c26d342abdf03237142b7a64921055e4,2018-05-08 21:46:51,7
679301,deviceside_src_com_android_graphics_benchmark_device_GraphicsBenchmarkTest.java,"private void startApp(com.android.graphics.benchmark.ApkInfo apk) throws IntentFilter.MalformedMimeTypeException, java.io.IOException { android.os.Looper.prepare(); mHandler = new android.os.Handler(); registerReceiver(); mReport.begin(apk.getName()); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, (""Launching "" + (apk.getPackageName()))); android.content.Intent intent = android.support.test.InstrumentationRegistry.getContext().getPackageManager().getLaunchIntentForPackage(apk.getPackageName()); for (com.android.graphics.benchmark.ApkInfo.Argument argument : mApk.getArgs()) { intent.putExtra(argument.getKey(), argument.getValue()); } android.support.test.InstrumentationRegistry.getContext().startActivity(intent); mHandler.postDelayed(() -> mHandler.getLooper().quit(), 10000); android.os.Looper.loop(); mReport.end(); }",fb7b724b2d554bee9cb0e827a6b2c3a605b2a346,"private void startApp(com.android.graphics.benchmark.ApkInfo apk) throws IntentFilter.MalformedMimeTypeException, java.io.IOException { android.os.Looper.prepare(); mHandler = new android.os.Handler(); registerReceiver(); mReport.begin(apk.getName()); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, (""Launching "" + (apk.getPackageName()))); android.content.Intent intent = android.support.test.InstrumentationRegistry.getContext().getPackageManager().getLaunchIntentForPackage(apk.getPackageName()); for (com.android.graphics.benchmark.ApkInfo.Argument argument : mApk.getArgs()) { intent.putExtra(argument.getKey(), argument.getValue()); } android.support.test.InstrumentationRegistry.getContext().startActivity(intent); mHandler.postDelayed(() -> mHandler.getLooper().quit(), mApk.getRunTime()); android.os.Looper.loop(); mReport.end(); }",168ac70ddc3f9713ce143de8e9a36e3d3f0d7bdc,"private void startApp(com.android.graphics.benchmark.ApkInfo apk) throws IntentFilter.MalformedMimeTypeException, java.io.IOException { android.os.Looper.prepare(); mHandler = new android.os.Handler(); registerReceiver(); mReport.begin(apk.getName()); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, (""Launching "" + (apk.getPackageName()))); android.content.Intent intent = android.support.test.InstrumentationRegistry.getContext().getPackageManager().getLaunchIntentForPackage(apk.getPackageName()); for (com.android.graphics.benchmark.ApkInfo.Argument argument : mApk.getArgs()) { intent.putExtra(argument.getKey(), argument.getValue()); } android.support.test.InstrumentationRegistry.getContext().startActivity(intent); mHandler.postDelayed(() -> { if (!(mGotIntent)) { mHandler.getLooper().quit(); } }, mApk.getRunTime()); android.os.Looper.loop(); mReport.end(); }",405d3d3aebc69e6c2d9e3d4c4ebebf7aab297c4a,2018-05-08 21:46:51,7
678625,services_core_java_com_android_server_audio_AudioService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static boolean connectBluetoothScoHelper(android.bluetooth.BluetoothHeadset bluetoothHeadset, android.bluetooth.BluetoothDevice device, int scoAudioMode) { switch (scoAudioMode) { case com.android.server.audio.AudioService.SCO_MODE_RAW : return bluetoothHeadset.connectAudio(); case com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL : return bluetoothHeadset.startScoUsingVirtualVoiceCall(); case com.android.server.audio.AudioService.SCO_MODE_VR : return bluetoothHeadset.startVoiceRecognition(device); default : return false; } }",cdb21ad2400660752fca01007be9604314fd719a,"private static boolean connectBluetoothScoAudioHelper(android.bluetooth.BluetoothHeadset bluetoothHeadset, android.bluetooth.BluetoothDevice device, int scoAudioMode) { switch (scoAudioMode) { case com.android.server.audio.AudioService.SCO_MODE_RAW : return bluetoothHeadset.connectAudio(); case com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL : return bluetoothHeadset.startScoUsingVirtualVoiceCall(); case com.android.server.audio.AudioService.SCO_MODE_VR : return bluetoothHeadset.startVoiceRecognition(device); default : return false; } }",a9a955ab82f8c5a8b88dd1f2ecb5130654986633,2018-05-09 00:25:10,2
672733,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceTest.java,"@org.junit.Test public void testConnectAudio_deviceDisconnected() { mCurrentDevice = getTestDevice(0); org.junit.Assert.assertTrue(mHeadsetService.connect(mCurrentDevice)); verify(mObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.CONNECT, mCurrentDevice); when(mStateMachines.get(mCurrentDevice).getDevice()).thenReturn(mCurrentDevice); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.EMPTY_LIST, mHeadsetService.getConnectedDevices()); mHeadsetService.onConnectionStateChangedFromStateMachine(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertFalse(mHeadsetService.connectAudio(mCurrentDevice)); verify(mStateMachines.get(mCurrentDevice), never()).sendMessage(eq(HeadsetStateMachine.CONNECT_AUDIO), any()); }",144eabb74d127aed076bbaea95c41465c50b0563,"@org.junit.Test public void testConnectAudio_deviceDisconnected() { com.android.bluetooth.hfp.HeadsetCallState headsetCallState = new com.android.bluetooth.hfp.HeadsetCallState(1, 0, HeadsetHalConstants.CALL_STATE_ALERTING, ""123-456-7890"", 128); mCurrentDevice = getTestDevice(0); org.junit.Assert.assertTrue(mHeadsetService.connect(mCurrentDevice)); verify(mObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.CONNECT, mCurrentDevice); when(mStateMachines.get(mCurrentDevice).getDevice()).thenReturn(mCurrentDevice); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.EMPTY_LIST, mHeadsetService.getConnectedDevices()); mHeadsetService.onConnectionStateChangedFromStateMachine(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertFalse(mHeadsetService.connectAudio(mCurrentDevice)); verify(mStateMachines.get(mCurrentDevice), never()).sendMessage(eq(HeadsetStateMachine.CONNECT_AUDIO), any()); }",9cdf9dd9908624d7f14bdff405e0860e5f96e907,"@org.junit.Test public void testConnectAudio_deviceDisconnected() { mCurrentDevice = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 0); com.android.bluetooth.hfp.HeadsetCallState headsetCallState = new com.android.bluetooth.hfp.HeadsetCallState(1, 0, HeadsetHalConstants.CALL_STATE_ALERTING, com.android.bluetooth.hfp.HeadsetServiceTest.TEST_PHONE_NUMBER, 128); org.junit.Assert.assertTrue(mHeadsetService.connect(mCurrentDevice)); verify(mObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.CONNECT, mCurrentDevice); when(mStateMachines.get(mCurrentDevice).getDevice()).thenReturn(mCurrentDevice); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.EMPTY_LIST, mHeadsetService.getConnectedDevices()); mHeadsetService.onConnectionStateChangedFromStateMachine(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertFalse(mHeadsetService.connectAudio(mCurrentDevice)); verify(mStateMachines.get(mCurrentDevice), never()).sendMessage(eq(HeadsetStateMachine.CONNECT_AUDIO), any()); }",4c08ea91b4f460a3f734a0c0faf72667dc01eb1a,2018-05-09 00:25:10,20
678625,services_core_java_com_android_server_audio_AudioService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static boolean disconnectBluetoothScoHelper(android.bluetooth.BluetoothHeadset bluetoothHeadset, android.bluetooth.BluetoothDevice device, int scoAudioMode) { switch (scoAudioMode) { case com.android.server.audio.AudioService.SCO_MODE_RAW : return bluetoothHeadset.disconnectAudio(); case com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL : return bluetoothHeadset.stopScoUsingVirtualVoiceCall(); case com.android.server.audio.AudioService.SCO_MODE_VR : return bluetoothHeadset.stopVoiceRecognition(device); default : return false; } }",ad4ce17bff891d335e0233c18f3d210bf2f39b02,"private static boolean disconnectBluetoothScoAudioHelper(android.bluetooth.BluetoothHeadset bluetoothHeadset, android.bluetooth.BluetoothDevice device, int scoAudioMode) { switch (scoAudioMode) { case com.android.server.audio.AudioService.SCO_MODE_RAW : return bluetoothHeadset.disconnectAudio(); case com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL : return bluetoothHeadset.stopScoUsingVirtualVoiceCall(); case com.android.server.audio.AudioService.SCO_MODE_VR : return bluetoothHeadset.stopVoiceRecognition(device); default : return false; } }",98ee9082cb43c8a3486160346e24224eff5836b5,2018-05-09 00:25:10,2
672733,src_com_android_bluetooth_hfp_HeadsetService.java,"private void phoneStateChanged(int numActive, int numHeld, int callState, java.lang.String number, int type) { enforceCallingOrSelfPermission(android.Manifest.permission.MODIFY_PHONE_STATE, null); doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.CALL_STATE_CHANGED, new com.android.bluetooth.hfp.HeadsetCallState(numActive, numHeld, callState, number, type))); }",a671ed96e2df87ccd486fcae3e11fce084a95692,"private void phoneStateChanged(int numActive, int numHeld, int callState, java.lang.String number, int type) { enforceCallingOrSelfPermission(android.Manifest.permission.MODIFY_PHONE_STATE, null); mStateMachinesThread.getThreadHandler().post(() -> { mSystemInterface.getHeadsetPhoneState().setNumActiveCall(numActive); mSystemInterface.getHeadsetPhoneState().setNumHeldCall(numHeld); mSystemInterface.getHeadsetPhoneState().setCallState(callState); }); doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.CALL_STATE_CHANGED, new com.android.bluetooth.hfp.HeadsetCallState(numActive, numHeld, callState, number, type))); }",775b640a7fd4760b877af17ab043331d7a776aed,"private void phoneStateChanged(int numActive, int numHeld, int callState, java.lang.String number, int type, boolean isVirtualCall) { enforceCallingOrSelfPermission(android.Manifest.permission.MODIFY_PHONE_STATE, ""Need MODIFY_PHONE_STATE permission""); synchronized(mStateMachines) { if (((numActive + numHeld) > 0) || (callState != (HeadsetHalConstants.CALL_STATE_IDLE))) { if ((!isVirtualCall) && (mVirtualCallStarted)) { stopScoUsingVirtualVoiceCall(); } } if ((mDialingOutTimeoutEvent) != null) { if (callState == (HeadsetHalConstants.CALL_STATE_DIALING)) { mStateMachinesThread.getThreadHandler().removeCallbacks(mDialingOutTimeoutEvent); doForStateMachine(mDialingOutTimeoutEvent.mDialingOutDevice, ( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.DIALING_OUT_RESULT, 1, 0, mDialingOutTimeoutEvent.mDialingOutDevice)); } else if ((callState == (HeadsetHalConstants.CALL_STATE_ACTIVE)) || (callState == (HeadsetHalConstants.CALL_STATE_IDLE))) { if (!(mStateMachinesThread.getThreadHandler().hasCallbacks(mDialingOutTimeoutEvent))) { mDialingOutTimeoutEvent = null; } } } } mStateMachinesThread.getThreadHandler().post(() -> { mSystemInterface.getHeadsetPhoneState().setNumActiveCall(numActive); mSystemInterface.getHeadsetPhoneState().setNumHeldCall(numHeld); mSystemInterface.getHeadsetPhoneState().setCallState(callState); }); doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.CALL_STATE_CHANGED, new com.android.bluetooth.hfp.HeadsetCallState(numActive, numHeld, callState, number, type))); }",55f6be879f901b5a6d631c4ae51e0ade9e1d5506,2018-05-09 00:25:10,20
672733,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testPhoneStateChange_noDeviceSaveState() throws android.os.RemoteException { com.android.bluetooth.hfp.HeadsetCallState headsetCallState = new com.android.bluetooth.hfp.HeadsetCallState(1, 0, HeadsetHalConstants.CALL_STATE_ALERTING, ""123-456-7890"", 128); mHeadsetServiceBinder.phoneStateChanged(headsetCallState.mNumActive, headsetCallState.mNumHeld, headsetCallState.mCallState, headsetCallState.mNumber, headsetCallState.mType); verify(mPhoneState, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS).times(1)).setCallState(headsetCallState.mCallState); verify(mPhoneState, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS).times(1)).setNumActiveCall(headsetCallState.mNumActive); verify(mPhoneState, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS).times(1)).setNumHeldCall(headsetCallState.mNumHeld); verifyNoMoreInteractions(mPhoneState); }",a0ab460b110f3c95d2723ff4f96d061da3d35061,"@org.junit.Test public void testPhoneStateChange_noDeviceSaveState() throws android.os.RemoteException { com.android.bluetooth.hfp.HeadsetCallState headsetCallState = new com.android.bluetooth.hfp.HeadsetCallState(1, 0, HeadsetHalConstants.CALL_STATE_ALERTING, com.android.bluetooth.hfp.HeadsetServiceTest.TEST_PHONE_NUMBER, 128); mHeadsetServiceBinder.phoneStateChanged(headsetCallState.mNumActive, headsetCallState.mNumHeld, headsetCallState.mCallState, headsetCallState.mNumber, headsetCallState.mType); com.android.bluetooth.hfp.HeadsetTestUtils.verifyPhoneStateChangeSetters(mPhoneState, headsetCallState, com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS); }",b1506215175758b3f92670ba729e297c2769cb40,2018-05-09 00:25:10,20
678625,services_core_java_com_android_server_audio_AudioService.java,"private void disconnectBluetoothSco(int exceptPid) { synchronized(mScoClients) { checkScoAudioState(); if (((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_ACTIVE_EXTERNAL)) || ((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_DEACTIVATE_EXT_REQ))) { if ((mBluetoothHeadsetDevice) != null) { if ((mBluetoothHeadset) != null) { if (!(mBluetoothHeadset.stopVoiceRecognition(mBluetoothHeadsetDevice))) { com.android.server.audio.AudioService.sendMsg(mAudioHandler, com.android.server.audio.AudioService.MSG_BT_HEADSET_CNCT_FAILED, com.android.server.audio.AudioService.SENDMSG_REPLACE, 0, 0, null, 0); } } else if (((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_ACTIVE_EXTERNAL)) && (getBluetoothHeadset())) { mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_DEACTIVATE_EXT_REQ; } } } else { clearAllScoClients(exceptPid, true); } } }",3abfcbfcc3fa9d877470a565045318599d66744c,"private void disconnectBluetoothSco(int exceptPid) { synchronized(mScoClients) { checkScoAudioState(); if (((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_ACTIVE_EXTERNAL)) || ((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_DEACTIVATE_EXT_REQ))) { if ((mBluetoothHeadsetDevice) != null) { if ((mBluetoothHeadset) != null) { boolean status = ((com.android.server.audio.AudioService.disconnectBluetoothScoHelper(mBluetoothHeadset, mBluetoothHeadsetDevice, com.android.server.audio.AudioService.SCO_MODE_RAW)) || (com.android.server.audio.AudioService.disconnectBluetoothScoHelper(mBluetoothHeadset, mBluetoothHeadsetDevice, com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL))) || (com.android.server.audio.AudioService.disconnectBluetoothScoHelper(mBluetoothHeadset, mBluetoothHeadsetDevice, com.android.server.audio.AudioService.SCO_MODE_VR)); if (status) { mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_DEACTIVATING; } else { clearAllScoClients(exceptPid, false); mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_INACTIVE; } } else if (((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_ACTIVE_EXTERNAL)) && (getBluetoothHeadset())) { mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_DEACTIVATE_EXT_REQ; } } } else { clearAllScoClients(exceptPid, true); } } }",d2b79161e58e8e7b41af9382b6a1cfae08b97c11,"private void disconnectBluetoothSco(int exceptPid) { synchronized(mScoClients) { checkScoAudioState(); if (((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_ACTIVE_EXTERNAL)) || ((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_DEACTIVATE_EXT_REQ))) { if ((mBluetoothHeadsetDevice) != null) { if ((mBluetoothHeadset) != null) { boolean status = ((com.android.server.audio.AudioService.disconnectBluetoothScoAudioHelper(mBluetoothHeadset, mBluetoothHeadsetDevice, com.android.server.audio.AudioService.SCO_MODE_RAW)) || (com.android.server.audio.AudioService.disconnectBluetoothScoAudioHelper(mBluetoothHeadset, mBluetoothHeadsetDevice, com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL))) || (com.android.server.audio.AudioService.disconnectBluetoothScoAudioHelper(mBluetoothHeadset, mBluetoothHeadsetDevice, com.android.server.audio.AudioService.SCO_MODE_VR)); if (status) { mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_DEACTIVATING; } else { clearAllScoClients(exceptPid, false); mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_INACTIVE; } } else if (((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_ACTIVE_EXTERNAL)) && (getBluetoothHeadset())) { mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_DEACTIVATE_EXT_REQ; } } } else { clearAllScoClients(exceptPid, true); } } }",df9ceb06e907d7527b756245782b19384a2ea5e6,2018-05-09 00:25:10,2
678625,services_core_java_com_android_server_audio_AudioService.java,"void setBtScoActiveDevice(android.bluetooth.BluetoothDevice btDevice) { if (com.android.server.audio.AudioService.DEBUG_DEVICES) { android.util.Log.d(com.android.server.audio.AudioService.TAG, ((""setBtScoActiveDevice("" + btDevice) + "")"")); } synchronized(mScoClients) { final android.bluetooth.BluetoothDevice previousActiveDevice = mBluetoothHeadsetDevice; if (!(java.util.Objects.equals(btDevice, previousActiveDevice))) { if (!(handleBtScoActiveDeviceChange(previousActiveDevice, false))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, (""setBtScoActiveDevice() failed to remove previous device "" + previousActiveDevice)); } if (!(handleBtScoActiveDeviceChange(btDevice, true))) { android.util.Log.e(com.android.server.audio.AudioService.TAG, (""setBtScoActiveDevice() failed to add new device "" + btDevice)); btDevice = null; } mBluetoothHeadsetDevice = btDevice; if ((mBluetoothHeadsetDevice) == null) { resetBluetoothSco(); } } } }",488cd048e1f016b59a75396144881492ec0def6e,"private void setBtScoActiveDevice(android.bluetooth.BluetoothDevice btDevice) { if (com.android.server.audio.AudioService.DEBUG_DEVICES) { android.util.Log.d(com.android.server.audio.AudioService.TAG, ((""setBtScoActiveDevice("" + btDevice) + "")"")); } synchronized(mScoClients) { final android.bluetooth.BluetoothDevice previousActiveDevice = mBluetoothHeadsetDevice; if (!(java.util.Objects.equals(btDevice, previousActiveDevice))) { if (!(handleBtScoActiveDeviceChange(previousActiveDevice, false))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, (""setBtScoActiveDevice() failed to remove previous device "" + previousActiveDevice)); } if (!(handleBtScoActiveDeviceChange(btDevice, true))) { android.util.Log.e(com.android.server.audio.AudioService.TAG, (""setBtScoActiveDevice() failed to add new device "" + btDevice)); btDevice = null; } mBluetoothHeadsetDevice = btDevice; if ((mBluetoothHeadsetDevice) == null) { resetBluetoothSco(); } } } }",d7feb1d0dc1eb1b97bbce196f0cb1004d9893235,"private void setBtScoActiveDevice(android.bluetooth.BluetoothDevice btDevice) { synchronized(mScoClients) { android.util.Log.i(com.android.server.audio.AudioService.TAG, (((""setBtScoActiveDevice: "" + (mBluetoothHeadsetDevice)) + "" -> "") + btDevice)); final android.bluetooth.BluetoothDevice previousActiveDevice = mBluetoothHeadsetDevice; if (!(java.util.Objects.equals(btDevice, previousActiveDevice))) { if (!(handleBtScoActiveDeviceChange(previousActiveDevice, false))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, (""setBtScoActiveDevice() failed to remove previous device "" + previousActiveDevice)); } if (!(handleBtScoActiveDeviceChange(btDevice, true))) { android.util.Log.e(com.android.server.audio.AudioService.TAG, (""setBtScoActiveDevice() failed to add new device "" + btDevice)); btDevice = null; } mBluetoothHeadsetDevice = btDevice; if ((mBluetoothHeadsetDevice) == null) { resetBluetoothSco(); } } } }",a2e31056d98e29369a84f3063eee16744a8ddfab,2018-05-09 00:25:10,2
681555,deviceside_src_com_android_graphics_benchmark_device_GraphicsBenchmarkTest.java,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { long timestamp = intent.getLongExtra(""timestamp"", 0); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, (""Received intent at "" + timestamp)); mReport.startLoop(timestamp); if (!(mGotIntent)) { mHandler.postDelayed(() -> mHandler.getLooper().quit(), 10000); mGotIntent = true; } }",56e765524741e130c614b052ba36f365ccac2f55,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { long timestamp = java.lang.Long.parseLong(intent.getStringExtra(""timestamp"")); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, (""Received intent at "" + timestamp)); mReport.startLoop(timestamp); if (!(mGotIntent)) { mHandler.postDelayed(() -> mHandler.getLooper().quit(), 10000); mGotIntent = true; } }",fab0c3c61943cdd506b885b4490e8cceac91b693,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { long timestamp = intent.getLongExtra(""timestamp"", 0); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, (""Received intent at "" + timestamp)); mReport.startLoop(timestamp); if (!(mGotIntent)) { mHandler.postDelayed(() -> mHandler.getLooper().quit(), 10000); mGotIntent = true; } }",56e765524741e130c614b052ba36f365ccac2f55,2018-05-09 00:32:31,4
681555,deviceside_src_com_android_graphics_benchmark_device_GraphicsBenchmarkTest.java,"private void registerReceiver() throws IntentFilter.MalformedMimeTypeException { android.content.BroadcastReceiver br = new android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { long timestamp = intent.getLongExtra(""timestamp"", 0); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, (""Received intent at "" + timestamp)); mReport.startLoop(timestamp); if (!(mGotIntent)) { mHandler.postDelayed(() -> mHandler.getLooper().quit(), 10000); mGotIntent = true; } } }; android.content.IntentFilter intentFilter = new android.content.IntentFilter(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.INTENT_ACTION, ""text/plain""); android.support.test.InstrumentationRegistry.getContext().registerReceiver(br, intentFilter); }",7cf4212e9b9fe4551f1e923988abc7a2869959b1,"private void registerReceiver() throws IntentFilter.MalformedMimeTypeException { android.content.BroadcastReceiver br = new android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { long timestamp = java.lang.Long.parseLong(intent.getStringExtra(""timestamp"")); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, (""Received intent at "" + timestamp)); mReport.startLoop(timestamp); if (!(mGotIntent)) { mHandler.postDelayed(() -> mHandler.getLooper().quit(), 10000); mGotIntent = true; } } }; android.content.IntentFilter intentFilter = new android.content.IntentFilter(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.INTENT_ACTION, ""text/plain""); android.support.test.InstrumentationRegistry.getContext().registerReceiver(br, intentFilter); }",4aff741ad57912d83e80a96fca9dacbd80777aff,"private void registerReceiver() throws IntentFilter.MalformedMimeTypeException { android.content.BroadcastReceiver br = new android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { long timestamp = intent.getLongExtra(""timestamp"", 0); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, (""Received intent at "" + timestamp)); mReport.startLoop(timestamp); if (!(mGotIntent)) { mHandler.postDelayed(() -> mHandler.getLooper().quit(), 10000); mGotIntent = true; } } }; android.content.IntentFilter intentFilter = new android.content.IntentFilter(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.INTENT_ACTION, ""text/plain""); android.support.test.InstrumentationRegistry.getContext().registerReceiver(br, intentFilter); }",7cf4212e9b9fe4551f1e923988abc7a2869959b1,2018-05-09 00:32:31,4
677881,src_main_java_com_android_vts_entity_TestSuiteResultEntity.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String getCrashSecurityDescription() throws java.io.IOException { java.io.InputStream inputStream = com.android.vts.entity.TestSuiteResultEntity.servletContext.getResourceAsStream(""/WEB-INF/buganizer/CrashSecurityVulnerabilityReports.tpl""); java.lang.String templateDescription = org.apache.commons.io.IOUtils.toString(inputStream, ""UTF-8""); java.util.Map<java.lang.String, java.lang.String> valuesMap = new java.util.HashMap<>(); valuesMap.put(""suiteBuildNumber"", suiteBuildNumber); valuesMap.put(""buildId"", buildId); valuesMap.put(""hostName"", hostName); valuesMap.put(""resultPath"", resultPath); valuesMap.put(""buildVendorFingerprint"", buildVendorFingerprint); valuesMap.put(""buildSystemFingerprint"", buildSystemFingerprint); org.apache.commons.lang.text.StrSubstitutor sub = new org.apache.commons.lang.text.StrSubstitutor(valuesMap); java.lang.String resolvedDescription = sub.replace(templateDescription); return resolvedDescription; }",f1df48e5aa3beb0c8de3e37e41fe43db5dd448aa,"private java.lang.String getCrashSecurityDescription() throws java.io.IOException { java.lang.String bugTrackingSystem = com.android.vts.entity.TestSuiteResultEntity.systemConfigProp.getProperty(""bug.tracking.system""); java.lang.String templateName = com.android.vts.entity.TestSuiteResultEntity.bugTrackingSystemProp.getProperty((bugTrackingSystem + "".crashSecurity.template.name"")); java.io.InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream((((""bug_tracking_system/"" + bugTrackingSystem) + ""/"") + templateName)); java.lang.String templateDescription = org.apache.commons.io.IOUtils.toString(inputStream, ""UTF-8""); java.util.Map<java.lang.String, java.lang.String> valuesMap = new java.util.HashMap<>(); valuesMap.put(""suiteBuildNumber"", suiteBuildNumber); valuesMap.put(""buildId"", buildId); valuesMap.put(""hostName"", hostName); valuesMap.put(""resultPath"", resultPath); valuesMap.put(""buildVendorFingerprint"", buildVendorFingerprint); valuesMap.put(""buildSystemFingerprint"", buildSystemFingerprint); org.apache.commons.lang.text.StrSubstitutor sub = new org.apache.commons.lang.text.StrSubstitutor(valuesMap); java.lang.String resolvedDescription = sub.replace(templateDescription); return resolvedDescription; }",9fc0da04f5e45c5056c7dc6e03e46736f5bdd76a,2018-05-09 03:42:31,4
677881,src_main_java_com_android_vts_config_ObjectifyListener.java,"@java.lang.Override public void contextInitialized(javax.servlet.ServletContextEvent servletContextEvent) { com.googlecode.objectify.ObjectifyFactory objectifyFactory = com.googlecode.objectify.ObjectifyService.factory(); objectifyFactory.register(com.android.vts.entity.TestSuiteFileEntity.class); objectifyFactory.register(com.android.vts.entity.TestSuiteResultEntity.class); objectifyFactory.begin(); com.android.vts.config.ObjectifyListener.logger.log(java.util.logging.Level.INFO, ""Value Initialized from context.""); }",2e3bea5c13a89bbe9ad9e522d445898753af37a8,"@java.lang.Override public void contextInitialized(javax.servlet.ServletContextEvent servletContextEvent) { com.googlecode.objectify.ObjectifyFactory objectifyFactory = com.googlecode.objectify.ObjectifyService.factory(); objectifyFactory.register(com.android.vts.entity.TestSuiteFileEntity.class); objectifyFactory.register(com.android.vts.entity.TestSuiteResultEntity.class); objectifyFactory.begin(); com.android.vts.entity.TestSuiteResultEntity.servletContext = servletContextEvent.getServletContext(); com.android.vts.config.ObjectifyListener.logger.log(java.util.logging.Level.INFO, ""Value Initialized from context.""); }",8636147bd457a8c3e3eb9d3d50eba0d1b96a72d2,"@java.lang.Override public void contextInitialized(javax.servlet.ServletContextEvent servletContextEvent) { com.googlecode.objectify.ObjectifyFactory objectifyFactory = com.googlecode.objectify.ObjectifyService.factory(); objectifyFactory.register(com.android.vts.entity.TestSuiteFileEntity.class); objectifyFactory.register(com.android.vts.entity.TestSuiteResultEntity.class); objectifyFactory.begin(); com.android.vts.config.ObjectifyListener.logger.log(java.util.logging.Level.INFO, ""Value Initialized from context.""); }",2e3bea5c13a89bbe9ad9e522d445898753af37a8,2018-05-09 03:42:31,4
677881,src_main_java_com_android_vts_entity_TestSuiteResultEntity.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.lang.String getBuganizerLink() throws java.io.IOException, java.net.URISyntaxException, org.apache.http.ParseException { java.util.List<org.apache.http.NameValuePair> qparams = new java.util.ArrayList<org.apache.http.NameValuePair>(); if ((!(this.bootSuccess)) || (((this.passedTestCaseCount) == 0) && ((this.failedTestCaseCount) == 0))) { qparams.add(new org.apache.http.message.BasicNameValuePair(""component"", ""326430"")); qparams.add(new org.apache.http.message.BasicNameValuePair(""template"", ""1073865"")); qparams.add(new org.apache.http.message.BasicNameValuePair(""description"", this.getLabInfraIssueDescription())); } else { qparams.add(new org.apache.http.message.BasicNameValuePair(""component"", ""163868"")); qparams.add(new org.apache.http.message.BasicNameValuePair(""template"", ""661006"")); qparams.add(new org.apache.http.message.BasicNameValuePair(""description"", this.getCrashSecurityDescription())); } java.net.URI uri = org.apache.http.client.utils.URIUtils.createURI(""https"", ""buganizer.corp.google.com"", (-1), ""/issues/new"", org.apache.http.client.utils.URLEncodedUtils.format(qparams, ""UTF-8""), null); return uri.toString(); }",d7666b827d633e22b2775de95faab8c28ef1b497,"public java.lang.String getBuganizerLink() throws java.io.IOException, java.net.URISyntaxException, org.apache.http.ParseException { java.lang.String bugTrackingSystem = com.android.vts.entity.TestSuiteResultEntity.systemConfigProp.getProperty(""bug.tracking.system""); java.util.List<org.apache.http.NameValuePair> qparams = new java.util.ArrayList<org.apache.http.NameValuePair>(); if ((!(this.bootSuccess)) || (((this.passedTestCaseCount) == 0) && ((this.failedTestCaseCount) == 0))) { qparams.add(new org.apache.http.message.BasicNameValuePair(""component"", this.bugTrackingSystemProp.getProperty((bugTrackingSystem + "".labInfraIssue.component.id"")))); qparams.add(new org.apache.http.message.BasicNameValuePair(""template"", this.bugTrackingSystemProp.getProperty((bugTrackingSystem + "".labInfraIssue.template.id"")))); qparams.add(new org.apache.http.message.BasicNameValuePair(""description"", this.getLabInfraIssueDescription())); } else { qparams.add(new org.apache.http.message.BasicNameValuePair(""component"", this.bugTrackingSystemProp.getProperty((bugTrackingSystem + "".crashSecurity.component.id"")))); qparams.add(new org.apache.http.message.BasicNameValuePair(""template"", this.bugTrackingSystemProp.getProperty((bugTrackingSystem + "".crashSecurity.template.id"")))); qparams.add(new org.apache.http.message.BasicNameValuePair(""description"", this.getCrashSecurityDescription())); } java.net.URI uri = org.apache.http.client.utils.URIUtils.createURI(this.bugTrackingSystemProp.getProperty((bugTrackingSystem + "".uri.scheme"")), this.bugTrackingSystemProp.getProperty((bugTrackingSystem + "".uri.host"")), (-1), this.bugTrackingSystemProp.getProperty((bugTrackingSystem + "".uri.path"")), org.apache.http.client.utils.URLEncodedUtils.format(qparams, ""UTF-8""), null); return uri.toString(); }",7ec5ec309232da99cd827a9c3e1dcd50e373dce3,2018-05-09 03:42:31,4
677881,src_main_java_com_android_vts_entity_TestSuiteResultEntity.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String getLabInfraIssueDescription() throws java.io.IOException { java.io.InputStream inputStream = com.android.vts.entity.TestSuiteResultEntity.servletContext.getResourceAsStream(""/WEB-INF/buganizer/LabInfraIssue.tpl""); java.lang.String templateDescription = org.apache.commons.io.IOUtils.toString(inputStream, ""UTF-8""); java.util.Map<java.lang.String, java.lang.String> valuesMap = new java.util.HashMap<>(); valuesMap.put(""suiteBuildNumber"", suiteBuildNumber); valuesMap.put(""buildId"", buildId); valuesMap.put(""modulesDone"", java.lang.Integer.toString(modulesDone)); valuesMap.put(""modulesTotal"", java.lang.Integer.toString(modulesTotal)); valuesMap.put(""hostName"", hostName); valuesMap.put(""resultPath"", resultPath); valuesMap.put(""buildVendorFingerprint"", buildVendorFingerprint); valuesMap.put(""buildSystemFingerprint"", buildSystemFingerprint); org.apache.commons.lang.text.StrSubstitutor sub = new org.apache.commons.lang.text.StrSubstitutor(valuesMap); java.lang.String resolvedDescription = sub.replace(templateDescription); return resolvedDescription; }",10d8ea7dd97b1fb7e9af1b6db6c632ba9e50ccc2,"private java.lang.String getLabInfraIssueDescription() throws java.io.IOException { java.lang.String bugTrackingSystem = com.android.vts.entity.TestSuiteResultEntity.systemConfigProp.getProperty(""bug.tracking.system""); java.lang.String templateName = com.android.vts.entity.TestSuiteResultEntity.bugTrackingSystemProp.getProperty((bugTrackingSystem + "".labInfraIssue.template.name"")); java.io.InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream((((""bug_tracking_system/"" + bugTrackingSystem) + ""/"") + templateName)); java.lang.String templateDescription = org.apache.commons.io.IOUtils.toString(inputStream, ""UTF-8""); java.util.Map<java.lang.String, java.lang.String> valuesMap = new java.util.HashMap<>(); valuesMap.put(""suiteBuildNumber"", suiteBuildNumber); valuesMap.put(""buildId"", buildId); valuesMap.put(""modulesDone"", java.lang.Integer.toString(modulesDone)); valuesMap.put(""modulesTotal"", java.lang.Integer.toString(modulesTotal)); valuesMap.put(""hostName"", hostName); valuesMap.put(""resultPath"", resultPath); valuesMap.put(""buildVendorFingerprint"", buildVendorFingerprint); valuesMap.put(""buildSystemFingerprint"", buildSystemFingerprint); org.apache.commons.lang.text.StrSubstitutor sub = new org.apache.commons.lang.text.StrSubstitutor(valuesMap); java.lang.String resolvedDescription = sub.replace(templateDescription); return resolvedDescription; }",cb030b9dc4fb0ef417659c99d6b7db46139271c7,2018-05-09 03:42:31,4
680938,hostside_src_com_android_graphics_benchmark_metric_GraphicsBenchmarkMetricCollector.java,"private void collect(com.android.tradefed.device.metric.DeviceMetricData runData) throws java.lang.InterruptedException { try { com.android.tradefed.log.LogUtil.CLog.e(""Running benchmarking stats...""); java.lang.String cmd; java.lang.String[] layerList; if ((com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTestApk) == null) { com.android.tradefed.log.LogUtil.CLog.e(""No test apk provided!""); return; } com.android.tradefed.log.LogUtil.CLog.e((""Target Layer: "" + (com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTestApk.getLayerName()))); boolean firstLoop = true; cmd = (""dumpsys SurfaceFlinger --latency \"""" + (com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTestApk.getLayerName())) + ""\""""; java.lang.String[] raw = mDevice.executeShellCommand(cmd).split(""\n""); if (firstLoop) { mVSyncPeriod = java.lang.Long.parseLong(raw[0]); firstLoop = false; } boolean overlap = false; for (int i = 1; i < (raw.length); i++) { java.lang.String[] parts = raw[i].split(""\t""); if ((parts.length) == 3) { if (sample(java.lang.Long.parseLong(parts[2]))) { overlap = true; } } } if (!overlap) com.android.tradefed.log.LogUtil.CLog.e(""No overlap with previous poll, we missed some frames!""); } catch (com.android.tradefed.device.DeviceNotAvailableException | java.lang.NullPointerException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } }",2485215b93cb301fcbf8c304ab8aa8efef4753d0,"private void collect(com.android.tradefed.device.metric.DeviceMetricData runData) throws java.lang.InterruptedException { try { if ((com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTestApk) == null) { com.android.tradefed.log.LogUtil.CLog.e(""No test apk info provided.""); return; } java.lang.String cmd = (""dumpsys SurfaceFlinger --latency \"""" + (com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTestApk.getLayerName())) + ""\""""; java.lang.String[] raw = mDevice.executeShellCommand(cmd).split(""\n""); com.android.tradefed.log.LogUtil.CLog.d(""Collecting benchmark stats for layer: %s"", com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTestApk.getLayerName()); if (mFirstLoop) { if ((raw.length) == 1) { return; } mVSyncPeriod = java.lang.Long.parseLong(raw[0]); mFirstLoop = false; } boolean overlap = false; for (int i = 1; i < (raw.length); i++) { java.lang.String[] parts = raw[i].split(""\t""); if ((parts.length) == 3) { if (sample(java.lang.Long.parseLong(parts[2]))) { overlap = true; } } } if (!overlap) { com.android.tradefed.log.LogUtil.CLog.e(""No overlap with previous poll, we missed some frames!""); } } catch (com.android.tradefed.device.DeviceNotAvailableException | java.lang.NullPointerException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } }",c477c2abc66047fd72744128eb31fc85b24560c1,"private void collect(com.android.tradefed.device.metric.DeviceMetricData runData) throws java.lang.InterruptedException { try { if ((com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTestApk) == null) { com.android.tradefed.log.LogUtil.CLog.e(""No test apk info provided.""); return; } com.android.tradefed.log.LogUtil.CLog.d(""Collecting benchmark stats for layer: %s"", com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTestApk.getLayerName()); java.lang.String cmd = (""dumpsys SurfaceFlinger --latency \"""" + (com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTestApk.getLayerName())) + ""\""""; java.lang.String[] raw = mDevice.executeShellCommand(cmd).split(""\n""); if (mFirstLoop) { if ((raw.length) == 1) { return; } mVSyncPeriod = java.lang.Long.parseLong(raw[0]); mFirstLoop = false; } boolean overlap = false; for (int i = 1; i < (raw.length); i++) { java.lang.String[] parts = raw[i].split(""\t""); if ((parts.length) == 3) { if (sample(java.lang.Long.parseLong(parts[2]))) { overlap = true; } } } if (!overlap) { com.android.tradefed.log.LogUtil.CLog.e(""No overlap with previous poll, we missed some frames!""); } } catch (com.android.tradefed.device.DeviceNotAvailableException | java.lang.NullPointerException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } }",68f5470f062297fa122eb7af46197a4cb59b3c8e,2018-05-09 22:54:39,4
681795,system_image_uitests_app_src_androidTest_java_com_android_devtools_systemimage_uitest_unittest_watchers_CrashWatcherTest.java,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo public void testCrashWatcher() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""DisplayingBitmaps""); device.findObject(new android.support.test.uiautomator.UiSelector().className(""android.widget.ImageView"")).click(); }",e3af7800b3f8d2469fc337b9d9b83a338263956d,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo public void testCrashWatcher() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); boolean isCrashExampleInstalled = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, ""com.example.android.displayingbitmaps""); if (!isCrashExampleInstalled) { com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.installApk(instrumentation, ""CrashExample.apk""); } com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""DisplayingBitmaps""); device.findObject(new android.support.test.uiautomator.UiSelector().className(""android.widget.ImageView"")).click(); }",f53cf5ef61de3077fd36ce1d392077b145cc949f,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo public void testCrashWatcher() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); if (!(com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, ""com.example.android.displayingbitmaps""))) { com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.installApk(instrumentation, ""CrashExample.apk""); } com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""DisplayingBitmaps""); device.findObject(new android.support.test.uiautomator.UiSelector().className(""android.widget.ImageView"")).click(); }",0e9aa19dd3d6440c7926e2ad1373562add81f59d,2018-05-09 23:05:19,3
681795,system_image_uitests_app_src_androidTest_java_com_android_devtools_systemimage_uitest_smoke_AppTest.java,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""14578823"") public void installAppAndLaunch() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); if ((api) == 18) { return; } com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""RsHelloCompute""); assertTrue(testFramework.getDevice().findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.APP_IMAGE_VIEW_ID)).exists()); }",7e6eb7f2b42615c737fcd1b35da2bc1d1d95125f,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""14578823"") public void installAppAndLaunch() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); if ((api) == 18) { return; } boolean isHelloComputeInstalled = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, ""com.example.android.rs.hellocompute""); if (!isHelloComputeInstalled) { com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.installApk(instrumentation, ""HelloCompute.apk""); } com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""RsHelloCompute""); assertTrue(testFramework.getDevice().findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.APP_IMAGE_VIEW_ID)).exists()); }",05d37bbc8b14042c559b57dca0450e030b59cb7b,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""14578823"") public void installAppAndLaunch() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); if ((api) == 18) { return; } if (!(com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, ""com.example.android.rs.hellocompute""))) { com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.installApk(instrumentation, ""HelloCompute.apk""); } com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""RsHelloCompute""); assertTrue(testFramework.getDevice().findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.APP_IMAGE_VIEW_ID)).exists()); }",6e5a1def8eae1751a0441e7a42f7d7f0d1c8c396,2018-05-09 23:05:19,3
681795,system_image_uitests_app_src_androidTest_java_com_android_devtools_systemimage_uitest_smoke_VpnTest.java,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""14578822"") public void testVpn() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); if ((testFramework.getApi()) == 19) { return; } if (!(verifyVpnStatus(device))) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""TestVPN""); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.START_VPN_BUTTON_RES)).clickAndWaitForNewWindow(); new com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher(device).checkForCondition(); org.junit.Assert.assertTrue(""Failed to find the VPN lock icon after starting VPN!"", verifyVpnStatus(device)); } }",02683bacc1b071d2f5adcd6e45aad4f099c78e65,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""14578822"") public void testVpn() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); if ((api) == 19) { return; } boolean isTestVPNInstalled = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, ""com.test.vpn""); if (!isTestVPNInstalled) { com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.installApk(instrumentation, ""FredVPN.apk""); } if (!(verifyVpnStatus(device))) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""TestVPN""); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.START_VPN_BUTTON_RES)).clickAndWaitForNewWindow(); new com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher(device).checkForCondition(); org.junit.Assert.assertTrue(""Failed to find the VPN lock icon after starting VPN!"", verifyVpnStatus(device)); } }",e4479b77d4abf7327655cd959101a234d66d4613,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""14578822"") public void testVpn() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); if ((api) == 19) { return; } if (!(com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, ""com.test.vpn""))) { com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.installApk(instrumentation, ""FredVPN.apk""); } if (!(verifyVpnStatus(device))) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""TestVPN""); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.START_VPN_BUTTON_RES)).clickAndWaitForNewWindow(); new com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher(device).checkForCondition(); org.junit.Assert.assertTrue(""Failed to find the VPN lock icon after starting VPN!"", verifyVpnStatus(device)); } }",a881ead6dcbee3a7247cf184563a7a02b2d03f42,2018-05-09 23:05:19,3
682101,dalvik_src_main_java_dalvik_system_DexPathList.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void addDexPath(java.lang.String dexPath, java.io.File optimizedDirectory, boolean isTrusted) { final java.util.List<java.io.IOException> suppressedExceptionList = new java.util.ArrayList<java.io.IOException>(); final dalvik.system.DexPathList.Element[] newElements = dalvik.system.DexPathList.makeDexElements(dalvik.system.DexPathList.splitDexPath(dexPath), optimizedDirectory, suppressedExceptionList, definingContext, isTrusted); if ((newElements != null) && ((newElements.length) > 0)) { final dalvik.system.DexPathList.Element[] oldElements = dexElements; dexElements = new dalvik.system.DexPathList.Element[(oldElements.length) + (newElements.length)]; java.lang.System.arraycopy(oldElements, 0, dexElements, 0, oldElements.length); java.lang.System.arraycopy(newElements, 0, dexElements, oldElements.length, newElements.length); } if ((suppressedExceptionList.size()) > 0) { final java.io.IOException[] newSuppressedExceptions = suppressedExceptionList.toArray(new java.io.IOException[suppressedExceptionList.size()]); if ((dexElementsSuppressedExceptions) != null) { final java.io.IOException[] oldSuppressedExceptions = dexElementsSuppressedExceptions; final int suppressedExceptionsLength = (oldSuppressedExceptions.length) + (newSuppressedExceptions.length); dexElementsSuppressedExceptions = new java.io.IOException[suppressedExceptionsLength]; java.lang.System.arraycopy(oldSuppressedExceptions, 0, dexElementsSuppressedExceptions, 0, oldSuppressedExceptions.length); java.lang.System.arraycopy(newSuppressedExceptions, 0, dexElementsSuppressedExceptions, oldSuppressedExceptions.length, newSuppressedExceptions.length); } else { dexElementsSuppressedExceptions = newSuppressedExceptions; } } }",da38086ff78df5ef382736aa352a2464394130ec,"public void addDexPath(java.lang.String dexPath, java.io.File optimizedDirectory, boolean isTrusted) { final java.util.List<java.io.IOException> suppressedExceptionList = new java.util.ArrayList<java.io.IOException>(); final dalvik.system.DexPathList.Element[] newElements = dalvik.system.DexPathList.makeDexElements(dalvik.system.DexPathList.splitDexPath(dexPath), optimizedDirectory, suppressedExceptionList, definingContext, isTrusted); if ((newElements != null) && ((newElements.length) > 0)) { final dalvik.system.DexPathList.Element[] oldElements = dexElements; dexElements = new dalvik.system.DexPathList.Element[(oldElements.length) + (newElements.length)]; java.lang.System.arraycopy(oldElements, 0, dexElements, 0, oldElements.length); java.lang.System.arraycopy(newElements, 0, dexElements, oldElements.length, newElements.length); } if ((suppressedExceptionList.size()) > 0) { final java.io.IOException[] newSuppressedExceptions = suppressedExceptionList.toArray(new java.io.IOException[suppressedExceptionList.size()]); if ((dexElementsSuppressedExceptions) != null) { final java.io.IOException[] oldSuppressedExceptions = dexElementsSuppressedExceptions; final int suppressedExceptionsLength = (oldSuppressedExceptions.length) + (newSuppressedExceptions.length); dexElementsSuppressedExceptions = new java.io.IOException[suppressedExceptionsLength]; java.lang.System.arraycopy(oldSuppressedExceptions, 0, dexElementsSuppressedExceptions, 0, oldSuppressedExceptions.length); java.lang.System.arraycopy(newSuppressedExceptions, 0, dexElementsSuppressedExceptions, oldSuppressedExceptions.length, newSuppressedExceptions.length); } else { dexElementsSuppressedExceptions = newSuppressedExceptions; } } }",e96abec0c11b7647e8304a8b3e4269df155b34ca,2018-05-10 15:46:56,7
682101,dalvik_src_main_java_dalvik_system_DexFile.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,static native void setTrusted(java.lang.Object cookie);,2ce0aa6e0ccb4e52be6ef34bc3cdd3814f898efb,private static native void setTrusted(java.lang.Object cookie);,79e733abd675f9ee79712e6835fce101f5f4da83,2018-05-10 15:46:56,7
682550,updater_sample_src_com_example_android_systemupdatersample_ui_MainActivity.java,"private void applyUpdate(final com.example.android.systemupdatersample.UpdateConfig config) { if ((config.getInstallType()) == (com.example.android.systemupdatersample.UpdateConfig.AB_INSTALL_TYPE_NON_STREAMING)) { com.example.android.systemupdatersample.PayloadSpec payload; try { payload = com.example.android.systemupdatersample.util.PayloadSpecs.forNonStreaming(config.getUpdatePackageFile()); } catch (java.io.IOException e) { android.util.Log.e(com.example.android.systemupdatersample.ui.MainActivity.TAG, ""Error creating payload spec"", e); android.widget.Toast.makeText(this, ""Error creating payload spec"", Toast.LENGTH_LONG).show(); return; } updateEngineApplyPayload(payload); } else { android.util.Log.d(com.example.android.systemupdatersample.ui.MainActivity.TAG, ""Starting PrepareStreamingService""); com.example.android.systemupdatersample.services.PrepareStreamingService.startService(this, config, ( code, payloadSpec) -> { if (code == PrepareStreamingService.RESULT_CODE_SUCCESS) { updateEngineApplyPayload(payloadSpec); } else { android.util.Log.e(com.example.android.systemupdatersample.ui.MainActivity.TAG, (""PrepareStreamingService failed, result code is "" + code)); android.widget.Toast.makeText(this, (""PrepareStreamingService failed, result code is "" + code), Toast.LENGTH_LONG).show(); } }); } }",40d038296932171996b957d6bfc92fbed34f2f0e,"private void applyUpdate(final com.example.android.systemupdatersample.UpdateConfig config) { if ((config.getInstallType()) == (com.example.android.systemupdatersample.UpdateConfig.AB_INSTALL_TYPE_NON_STREAMING)) { com.example.android.systemupdatersample.PayloadSpec payload; try { payload = com.example.android.systemupdatersample.util.PayloadSpecs.forNonStreaming(config.getUpdatePackageFile()); } catch (java.io.IOException e) { android.util.Log.e(com.example.android.systemupdatersample.ui.MainActivity.TAG, ""Error creating payload spec"", e); android.widget.Toast.makeText(this, ""Error creating payload spec"", Toast.LENGTH_LONG).show(); return; } updateEngineApplyPayload(payload, null); } else { android.util.Log.d(com.example.android.systemupdatersample.ui.MainActivity.TAG, ""Starting PrepareStreamingService""); com.example.android.systemupdatersample.services.PrepareStreamingService.startService(this, config, ( code, payloadSpec) -> { if (code == PrepareStreamingService.RESULT_CODE_SUCCESS) { List<java.lang.String> extraProperties = new com.example.android.systemupdatersample.ui.ArrayList<>(); extraProperties.add((""USER_AGENT="" + (com.example.android.systemupdatersample.ui.MainActivity.HTTP_USER_AGENT))); extraProperties.add((""AUTHORIZATION="" + (com.example.android.systemupdatersample.ui.MainActivity.HTTP_AUTHORIZATION))); updateEngineApplyPayload(payloadSpec, extraProperties); } else { android.util.Log.e(com.example.android.systemupdatersample.ui.MainActivity.TAG, (""PrepareStreamingService failed, result code is "" + code)); android.widget.Toast.makeText(this, (""PrepareStreamingService failed, result code is "" + code), Toast.LENGTH_LONG).show(); } }); } }",f715dd885e9520c839d90a861ab1f4dcb2b7b2c7,"private void applyUpdate(final com.example.android.systemupdatersample.UpdateConfig config) { if ((config.getInstallType()) == (com.example.android.systemupdatersample.UpdateConfig.AB_INSTALL_TYPE_NON_STREAMING)) { com.example.android.systemupdatersample.PayloadSpec payload; try { payload = com.example.android.systemupdatersample.util.PayloadSpecs.forNonStreaming(config.getUpdatePackageFile()); } catch (java.io.IOException e) { android.util.Log.e(com.example.android.systemupdatersample.ui.MainActivity.TAG, ""Error creating payload spec"", e); android.widget.Toast.makeText(this, ""Error creating payload spec"", Toast.LENGTH_LONG).show(); return; } updateEngineApplyPayload(payload, null); } else { android.util.Log.d(com.example.android.systemupdatersample.ui.MainActivity.TAG, ""Starting PrepareStreamingService""); com.example.android.systemupdatersample.services.PrepareStreamingService.startService(this, config, ( code, payloadSpec) -> { if (code == PrepareStreamingService.RESULT_CODE_SUCCESS) { List<java.lang.String> extraProperties = new com.example.android.systemupdatersample.ui.ArrayList<>(); extraProperties.add((""USER_AGENT="" + (com.example.android.systemupdatersample.ui.MainActivity.HTTP_USER_AGENT))); config.getStreamingMetadata().getAuthorization().ifPresent(( s) -> extraProperties.add((""AUTHORIZATION="" + s))); updateEngineApplyPayload(payloadSpec, extraProperties); } else { android.util.Log.e(com.example.android.systemupdatersample.ui.MainActivity.TAG, (""PrepareStreamingService failed, result code is "" + code)); android.widget.Toast.makeText(this, (""PrepareStreamingService failed, result code is "" + code), Toast.LENGTH_LONG).show(); } }); } }",b6bd2facba951ed5e23571c4a75f10d9c7d9d26f,2018-05-10 16:03:34,7
667064,hostside_src_com_android_graphics_benchmark_testtype_GraphicsBenchmarkHostsideController.java,"@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.name())) + ""]"")); } }",4783a59530930bb5245fcc1e3b48e440042ae3e8,"@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.name())) + ""]"")); getDevice().uninstallPackage(apk.getPackageName()); } }",4307f82bfc9de57a4f51f02365451657557ad414,"@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.Map<java.lang.String, java.lang.String> runMetrics = new java.util.HashMap<>(); initApkList(); getDevice().pushFile(mApkInfoFile, ApkInfo.APK_LIST_LOCATION); for (com.android.graphics.benchmark.ApkInfo apk : mApks) { java.io.File apkFile = findApk(apk.getFileName()); getDevice().installPackage(apkFile, true); com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.setAppLayerName(apk); listener.testRunStarted(""graphicsbenchmark"", mApks.size()); com.android.ddmlib.testrunner.TestIdentifier identifier = new com.android.ddmlib.testrunner.TestIdentifier(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.getName())) + ""]"")); java.util.Map<java.lang.String, java.lang.String> testMetrics = new java.util.HashMap<>(); listener.testStarted(identifier); if (apkFile == null) { listener.testFailed(identifier, java.lang.String.format(""Missing APK. Unable to find %s in %s."", apk.getFileName(), getApkDir())); } else { runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, ((""run["" + (apk.getName())) + ""]"")); } listener.testEnded(identifier, testMetrics); com.android.graphics.benchmark.proto.ResultDataProto.Result resultData = retrieveResultData(); com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.setDeviceResultData(resultData); listener.testRunEnded(0, runMetrics); getDevice().uninstallPackage(apk.getPackageName()); } }",7f372d0fe9c96ec3c0c2e323e248c35af7cc15ae,2018-05-10 17:49:24,4
683162,hostside_src_com_android_graphics_benchmark_metric_GraphicsBenchmarkMetricCollector.java,"private void onEnd(com.android.tradefed.device.metric.DeviceMetricData runData) { if ((com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mDeviceResultData) != null) { com.android.tradefed.log.LogUtil.CLog.e((""Intent timestamp: "" + (com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mDeviceResultData.getEvents(0).getTimestamp()))); } try (java.io.BufferedWriter outputFile = new java.io.BufferedWriter(new java.io.FileWriter(""/tmp/0/graphics-benchmark/out.txt"", (!(mFirstRun))))) { outputFile.write(((""VSync Period: "" + (mVSyncPeriod)) + ""\n\n"")); long loadTime = 0L; if ((com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mDeviceResultData.getEventsCount()) > 0) { loadTime = (com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mDeviceResultData.getEvents(0).getTimestamp()) * 1000000; } else { com.android.tradefed.log.LogUtil.CLog.e(""No start benchmark intent given""); } processTimestampsSlice(loadTime, mElapsedTimes.get(((mElapsedTimes.size()) - 1)), outputFile, runData); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } mFirstRun = false; }",3a565baa18e143da66073eea311b5be8b636cfc6,"private void onEnd(com.android.tradefed.device.metric.DeviceMetricData runData) { if ((com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mDeviceResultData) != null) { com.android.tradefed.log.LogUtil.CLog.e((""Intent timestamp: "" + (com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mDeviceResultData.getEvents(0).getTimestamp()))); } try (java.io.BufferedWriter outputFile = new java.io.BufferedWriter(new java.io.FileWriter(""/tmp/0/graphics-benchmark/out.txt"", (!(mFirstRun))))) { outputFile.write(((""VSync Period: "" + (mVSyncPeriod)) + ""\n\n"")); long loadTime = 0L; if ((com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mDeviceResultData.getEventsCount()) > 0) { loadTime = (com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mDeviceResultData.getEvents(0).getTimestamp()) * 1000000; } else { com.android.tradefed.log.LogUtil.CLog.e(""No start benchmark intent given""); } processTimestampsSlice(0, loadTime, mElapsedTimes.get(((mElapsedTimes.size()) - 1)), outputFile, runData); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } mFirstRun = false; }",c2e26b706885196c09e7718ffa62e37464420741,"private void onEnd(com.android.tradefed.device.metric.DeviceMetricData runData) { try (java.io.BufferedWriter outputFile = new java.io.BufferedWriter(new java.io.FileWriter(""/tmp/0/graphics-benchmark/out.txt"", (!(mFirstRun))))) { outputFile.write(((""VSync Period: "" + (mVSyncPeriod)) + ""\n\n"")); if ((com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mDeviceResultData.getEventsCount()) == 0) { com.android.tradefed.log.LogUtil.CLog.w(""No start benchmark intent given; assuming single run with no loading period to exclude.""); } long startTime = 0L; int runIndex = 0; for (com.android.graphics.benchmark.proto.ResultDataProto.Event e : com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mDeviceResultData.getEventsList()) { if ((e.getType()) != (ResultDataProto.Event.Type.START_LOOP)) { continue; } long endTime = (e.getTimestamp()) * 1000000; if (startTime != 0) { processTimestampsSlice((runIndex++), startTime, endTime, outputFile, runData); } startTime = endTime; } processTimestampsSlice(runIndex, startTime, mElapsedTimes.get(((mElapsedTimes.size()) - 1)), outputFile, runData); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } mFirstRun = false; }",b28462b20864e8f4a772de68505c0ad9ba58a36a,2018-05-11 01:26:14,5
683162,hostside_src_com_android_graphics_benchmark_metric_GraphicsBenchmarkMetricCollector.java,"private void processTimestampsSlice(long startTimestamp, long endTimestamp, java.io.BufferedWriter outputFile, com.android.tradefed.device.metric.DeviceMetricData runData) throws java.io.IOException { double minFPS = java.lang.Double.MAX_VALUE; double maxFPS = 0.0; long totalTimeNs = 0; outputFile.write(((""Started at: "" + startTimestamp) + "" ms \n"")); outputFile.write(""Frame Time\t\tFrames Per Second\n""); long prevTime = 0L; int numOfTimestamps = 0; for (long time : mElapsedTimes) { if (time < startTimestamp) { continue; } if (time > endTimestamp) { break; } if (prevTime == 0) { prevTime = time; continue; } long timeDiff = time - prevTime; prevTime = time; double currentFPS = 1.0E9 / timeDiff; minFPS = (currentFPS < minFPS) ? currentFPS : minFPS; maxFPS = (currentFPS > maxFPS) ? currentFPS : maxFPS; totalTimeNs += timeDiff; numOfTimestamps++; outputFile.write((((timeDiff + "" ms\t\t"") + currentFPS) + "" fps\n"")); } outputFile.write(""\nSTATS\n""); double avgFPS = (numOfTimestamps * 1.0E9) / totalTimeNs; outputFile.write(((""min FPS = "" + minFPS) + ""\n"")); outputFile.write(((""max FPS = "" + maxFPS) + ""\n"")); outputFile.write(((""avg FPS = "" + avgFPS) + ""\n"")); runData.addStringMetric(""min_fps"", java.lang.Double.toString(minFPS)); runData.addStringMetric(""max_fps"", java.lang.Double.toString(maxFPS)); runData.addStringMetric(""fps"", java.lang.Double.toString(avgFPS)); outputFile.write(""\n""); }",6637356646af4394c6ef6506f56990a445d3f38b,"private void processTimestampsSlice(int runIndex, long startTimestamp, long endTimestamp, java.io.BufferedWriter outputFile, com.android.tradefed.device.metric.DeviceMetricData runData) throws java.io.IOException { double minFPS = java.lang.Double.MAX_VALUE; double maxFPS = 0.0; long totalTimeNs = 0; outputFile.write(((((""Started run "" + runIndex) + "" at: "") + startTimestamp) + "" ns \n"")); outputFile.write(""Frame Time\t\tFrames Per Second\n""); long prevTime = 0L; int numOfTimestamps = 0; for (long time : mElapsedTimes) { if (time < startTimestamp) { continue; } if (time > endTimestamp) { break; } if (prevTime == 0) { prevTime = time; continue; } long timeDiff = time - prevTime; prevTime = time; double currentFPS = 1.0E9 / timeDiff; minFPS = (currentFPS < minFPS) ? currentFPS : minFPS; maxFPS = (currentFPS > maxFPS) ? currentFPS : maxFPS; totalTimeNs += timeDiff; numOfTimestamps++; outputFile.write((((timeDiff + "" ms\t\t"") + currentFPS) + "" fps\n"")); } outputFile.write(""\nSTATS\n""); double avgFPS = (numOfTimestamps * 1.0E9) / totalTimeNs; outputFile.write(((""min FPS = "" + minFPS) + ""\n"")); outputFile.write(((""max FPS = "" + maxFPS) + ""\n"")); outputFile.write(((""avg FPS = "" + avgFPS) + ""\n"")); runData.addStringMetric(((""run_"" + runIndex) + "".min_fps""), java.lang.Double.toString(minFPS)); runData.addStringMetric(((""run_"" + runIndex) + "".max_fps""), java.lang.Double.toString(maxFPS)); runData.addStringMetric(((""run_"" + runIndex) + "".fps""), java.lang.Double.toString(avgFPS)); outputFile.write(""\n""); }",d7a1a8d842c3f5fc0dc5a60e318975fa1481a987,"private void processTimestampsSlice(int runIndex, long startTimestamp, long endTimestamp, java.io.BufferedWriter outputFile, com.android.tradefed.device.metric.DeviceMetricData runData) throws java.io.IOException { double minFPS = java.lang.Double.MAX_VALUE; double maxFPS = 0.0; long totalTimeNs = 0; outputFile.write(((((""Started run "" + runIndex) + "" at: "") + startTimestamp) + "" ns \n"")); outputFile.write(""Frame Time\t\tFrames Per Second\n""); long prevTime = 0L; int numOfTimestamps = 0; for (long time : mElapsedTimes) { if (time < startTimestamp) { continue; } if (time > endTimestamp) { break; } if (prevTime == 0) { prevTime = time; continue; } long timeDiff = time - prevTime; prevTime = time; double currentFPS = 1.0E9 / timeDiff; minFPS = (currentFPS < minFPS) ? currentFPS : minFPS; maxFPS = (currentFPS > maxFPS) ? currentFPS : maxFPS; totalTimeNs += timeDiff; numOfTimestamps++; outputFile.write((((timeDiff + "" ns\t\t"") + currentFPS) + "" fps\n"")); } if (numOfTimestamps == 0) { outputFile.write(""No samples in period, assuming spurious intent.\n\n""); return; } outputFile.write(""\nSTATS\n""); double avgFPS = (numOfTimestamps * 1.0E9) / totalTimeNs; outputFile.write(((""min FPS = "" + minFPS) + ""\n"")); outputFile.write(((""max FPS = "" + maxFPS) + ""\n"")); outputFile.write(((""avg FPS = "" + avgFPS) + ""\n"")); runData.addStringMetric(((""run_"" + runIndex) + "".min_fps""), java.lang.Double.toString(minFPS)); runData.addStringMetric(((""run_"" + runIndex) + "".max_fps""), java.lang.Double.toString(maxFPS)); runData.addStringMetric(((""run_"" + runIndex) + "".fps""), java.lang.Double.toString(avgFPS)); outputFile.write(""\n""); }",71bd155ac18466ee0ab42a6ee06e69844e52ece2,2018-05-11 01:26:14,5
682593,helper_src_com_android_graphics_benchmark_ApkListXmlParser.java,"private com.android.graphics.benchmark.ApkInfo createApkInfo(org.w3c.dom.Element element) { java.util.List<com.android.graphics.benchmark.ApkInfo.Argument> args = new java.util.ArrayList<>(); org.w3c.dom.NodeList argsNodeList = element.getElementsByTagName(""args""); if ((argsNodeList.getLength()) > 0) { org.w3c.dom.NodeList children = argsNodeList.item(0).getChildNodes(); for (int j = 0; j < (children.getLength()); j++) { org.w3c.dom.Node argNode = children.item(j); if ((argNode.getNodeType()) != (org.w3c.dom.Node.ELEMENT_NODE)) { continue; } org.w3c.dom.Element argElement = ((org.w3c.dom.Element) (argNode)); args.add(new com.android.graphics.benchmark.ApkInfo.Argument(argElement.getTagName(), argElement.getTextContent())); } } return new com.android.graphics.benchmark.ApkInfo(getElement(element, ""name"", null), getElement(element, ""fileName"", null), getElement(element, ""packageName"", null), getElement(element, ""layerName"", null), args, java.lang.Integer.parseInt(getElement(element, ""runTime"", ""10000""))); }",42bf7517c26d342abdf03237142b7a64921055e4,"private com.android.graphics.benchmark.ApkInfo createApkInfo(org.w3c.dom.Element element) { java.util.List<com.android.graphics.benchmark.ApkInfo.Argument> args = new java.util.ArrayList<>(); org.w3c.dom.NodeList argsNodeList = element.getElementsByTagName(""args""); if ((argsNodeList.getLength()) > 0) { org.w3c.dom.NodeList children = argsNodeList.item(0).getChildNodes(); for (int j = 0; j < (children.getLength()); j++) { org.w3c.dom.Node argNode = children.item(j); if ((argNode.getNodeType()) != (org.w3c.dom.Node.ELEMENT_NODE)) { continue; } org.w3c.dom.Element argElement = ((org.w3c.dom.Element) (argNode)); java.lang.String type = argElement.getAttribute(""type""); if ((type == null) || (type.isEmpty())) { type = ""STRING""; } args.add(new com.android.graphics.benchmark.ApkInfo.Argument(argElement.getTagName(), argElement.getTextContent(), ApkInfo.Argument.Type.valueOf(type.toUpperCase(java.util.Locale.getDefault())))); } } return new com.android.graphics.benchmark.ApkInfo(getElement(element, ""name"", null), getElement(element, ""fileName"", null), getElement(element, ""packageName"", null), getElement(element, ""layerName"", null), args, java.lang.Integer.parseInt(getElement(element, ""runTime"", ""10000""))); }",f4fc5c0d5338771a5773ca480f17bcbca5704dfb,"private com.android.graphics.benchmark.ApkInfo createApkInfo(org.w3c.dom.Element element) { java.util.List<com.android.graphics.benchmark.ApkInfo.Argument> args = new java.util.ArrayList<>(); org.w3c.dom.NodeList argsNodeList = element.getElementsByTagName(""args""); if ((argsNodeList.getLength()) > 0) { org.w3c.dom.NodeList children = argsNodeList.item(0).getChildNodes(); for (int j = 0; j < (children.getLength()); j++) { org.w3c.dom.Node argNode = children.item(j); if ((argNode.getNodeType()) != (org.w3c.dom.Node.ELEMENT_NODE)) { continue; } org.w3c.dom.Element argElement = ((org.w3c.dom.Element) (argNode)); java.lang.String type = argElement.getAttribute(""type""); if ((type == null) || (type.isEmpty())) { type = ""STRING""; } args.add(new com.android.graphics.benchmark.ApkInfo.Argument(argElement.getTagName(), argElement.getTextContent(), ApkInfo.Argument.Type.valueOf(type.toUpperCase(java.util.Locale.US)))); } } return new com.android.graphics.benchmark.ApkInfo(getElement(element, ""name"", null), getElement(element, ""fileName"", null), getElement(element, ""packageName"", null), getElement(element, ""layerName"", null), args, java.lang.Integer.parseInt(getElement(element, ""runTime"", ""10000""))); }",02482441a74d159b0f30aefd9bcc60ef4dfb5765,2018-05-11 01:50:35,2
683082,updater_sample_src_com_example_android_systemupdatersample_services_PrepareStreamingService.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static boolean verifyPackageCompatibility(java.io.File file) { try { return android.os.RecoverySystem.verifyPackageCompatibility(file); } catch (java.io.IOException e) { android.util.Log.w(com.example.android.systemupdatersample.services.PrepareStreamingService.TAG, ""Failed to verify package compatibility"", e); return false; } }",b81d1b7fb56d4f32739afca26fc63a433e3945a0,"private static boolean verifyPackageCompatibility(java.io.File file) { try { return android.os.RecoverySystem.verifyPackageCompatibility(file); } catch (java.io.IOException e) { android.util.Log.e(com.example.android.systemupdatersample.services.PrepareStreamingService.TAG, ""Failed to verify package compatibility"", e); return false; } }",65d537927b616747cc85a777af36b664d1711a2d,2018-05-11 03:05:19,3
682182,test_979-const-method-handle_src_Main.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void repeatConstMethodType1(java.lang.invoke.MethodType expected) { java.lang.System.out.print(""repeatConstMethodType1(""); java.lang.System.out.print(expected); java.lang.System.out.println("")""); for (int i = 0; i < 12000; ++i) { java.lang.invoke.MethodType actual = Main.methodType0(); if (!(Main.methodType1().equals(expected))) { java.lang.System.out.print(""Expected: ""); java.lang.System.out.println(expected); java.lang.System.out.print(""Actual: ""); java.lang.System.out.println(actual); Main.unreachable(); } } }",8631c45f11b7c0cd7678f103fe8a0b0409cf5592,"private static void repeatConstMethodType1(java.lang.invoke.MethodType expected) { java.lang.System.out.print(""repeatConstMethodType1(""); java.lang.System.out.print(expected); java.lang.System.out.println("")""); for (int i = 0; i < 12000; ++i) { java.lang.invoke.MethodType actual = Main.methodType1(); if (!(actual.equals(expected))) { java.lang.System.out.print(""Expected: ""); java.lang.System.out.println(expected); java.lang.System.out.print(""Actual: ""); java.lang.System.out.println(actual); Main.unreachable(); } } }",02867941800a151384cb65297caec94c20f17ff7,2018-05-11 08:21:43,8
682844,test_979-const-method-handle_src_Main.java,"private static void repeatConstMethodType0(java.lang.invoke.MethodType expected) { java.lang.System.out.print(""repeatConstMethodType0(""); java.lang.System.out.print(expected); java.lang.System.out.println("")""); for (int i = 0; i < 12000; ++i) { java.lang.invoke.MethodType actual = Main.methodType0(); if (!(actual.equals(expected))) { java.lang.System.out.print(""Expected: ""); java.lang.System.out.println(expected); java.lang.System.out.print(""Actual: ""); java.lang.System.out.println(actual); Main.unreachable(); } } }",84b4700f81934e696405fb6bca1b90dcf6791275,"private static void repeatConstMethodType0(java.lang.invoke.MethodType expected) { java.lang.System.out.print(""repeatConstMethodType0(""); java.lang.System.out.print(expected); java.lang.System.out.println("")""); for (int i = 0; i < 12000; ++i) { java.lang.invoke.MethodType actual = Main.methodType0(); Main.assertEquals(expected, actual); } }",f007657656934e83f3e723dd09b301f1128102be,"private static void repeatConstMethodType0(java.lang.invoke.MethodType expected) { java.lang.System.out.print(""repeatConstMethodType0(""); java.lang.System.out.print(expected); java.lang.System.out.println("")""); for (int i = 0; i < (Main.ITERATIONS_FOR_JIT); ++i) { java.lang.invoke.MethodType actual = Main.methodType0(); Main.assertEquals(expected, actual); } }",52970700a1f55478192f66b0f47402086bc23d93,2018-05-11 13:40:38,5
682844,test_979-const-method-handle_src_Main.java,"private static void repeatConstMethodType1(java.lang.invoke.MethodType expected) { java.lang.System.out.print(""repeatConstMethodType1(""); java.lang.System.out.print(expected); java.lang.System.out.println("")""); for (int i = 0; i < 12000; ++i) { java.lang.invoke.MethodType actual = Main.methodType1(); if (!(actual.equals(expected))) { java.lang.System.out.print(""Expected: ""); java.lang.System.out.println(expected); java.lang.System.out.print(""Actual: ""); java.lang.System.out.println(actual); Main.unreachable(); } } }",02867941800a151384cb65297caec94c20f17ff7,"private static void repeatConstMethodType1(java.lang.invoke.MethodType expected) { java.lang.System.out.print(""repeatConstMethodType1(""); java.lang.System.out.print(expected); java.lang.System.out.println("")""); for (int i = 0; i < 12000; ++i) { java.lang.invoke.MethodType actual = Main.methodType1(); Main.assertEquals(expected, actual); } }",f190dac951555acaff6992ed240b4ca49ef2919a,"private static void repeatConstMethodType1(java.lang.invoke.MethodType expected) { java.lang.System.out.print(""repeatConstMethodType1(""); java.lang.System.out.print(expected); java.lang.System.out.println("")""); for (int i = 0; i < (Main.ITERATIONS_FOR_JIT); ++i) { java.lang.invoke.MethodType actual = Main.methodType1(); Main.assertEquals(expected, actual); } }",b0af833960d11c4ceb17ffdd2776a95359c43bd9,2018-05-11 13:40:38,5
682844,test_979-const-method-handle_src_Main.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void repeatConstMethodHandle() throws java.lang.Throwable { java.lang.System.out.println(""repeatConstMethodHandle()""); java.lang.String[] values = new java.lang.String[]{ ""A"", ""B"", ""C"" }; for (int i = 0; i < 12000; ++i) { java.lang.String value = values[(i % (values.length))]; Main.setNameHandle().invoke(value); java.lang.String actual = ((java.lang.String) (Main.getNameHandle().invokeExact())); Main.assertEquals(value, actual); Main.assertEquals(value, Main.name); } }",76aeb103c7c6483d9cb368b80cd7096707e98d5e,"private static void repeatConstMethodHandle() throws java.lang.Throwable { java.lang.System.out.println(""repeatConstMethodHandle()""); java.lang.String[] values = new java.lang.String[]{ ""A"", ""B"", ""C"" }; for (int i = 0; i < (Main.ITERATIONS_FOR_JIT); ++i) { java.lang.String value = values[(i % (values.length))]; Main.setNameHandle().invoke(value); java.lang.String actual = ((java.lang.String) (Main.getNameHandle().invokeExact())); Main.assertEquals(value, actual); Main.assertEquals(value, Main.name); } }",2ea2dca12939c60e36242fce686f177248677903,2018-05-11 13:40:38,5
681003,src_com_android_bluetooth_newavrcp_MediaPlayerList.java,@android.annotation.NonNull com.android.bluetooth.avrcp.Metadata getCurrentSongInfo() { final com.android.bluetooth.avrcp.MediaPlayerWrapper player = getActivePlayer(); if (player == null) return com.android.bluetooth.avrcp.Util.empty_data(); return player.getCurrentMetadata(); },b3423466c5212583d04722257e1e17ba8ca6c0e3,"@android.annotation.NonNull com.android.bluetooth.avrcp.Metadata getCurrentSongInfo() { final com.android.bluetooth.avrcp.MediaPlayerWrapper player = getActivePlayer(); if (player == null) return com.android.bluetooth.avrcp.Util.empty_data(); if (!(getCurrentMediaId().equals(""""))) { for (com.android.bluetooth.avrcp.Metadata data : getNowPlayingList()) { if (data.mediaId.equals(getCurrentMediaId())) { return data.clone(); } } } return player.getCurrentMetadata(); }",9b7db1e2edb680fa98424ac767c4fdeeb6d07fb8,@android.annotation.NonNull com.android.bluetooth.avrcp.Metadata getCurrentSongInfo() { final com.android.bluetooth.avrcp.MediaPlayerWrapper player = getActivePlayer(); if (player == null) return com.android.bluetooth.avrcp.Util.empty_data(); return player.getCurrentMetadata(); },b3423466c5212583d04722257e1e17ba8ca6c0e3,2018-05-11 21:40:23,2
683290,src_apksigner_java_com_android_apksigner_ApkSignerTool.java,"public static void main(java.lang.String[] params) throws java.lang.Exception { if ((((params.length) == 0) || (""--help"".equals(params[0]))) || (""-h"".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if (""--version"".equals(params[0])) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } java.lang.String cmd = params[0]; try { if (""sign"".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""verify"".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""rotate"".equals(cmd)) { com.android.apksigner.ApkSignerTool.rotate(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""help"".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if (""version"".equals(cmd)) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } else { throw new com.android.apksigner.ApkSignerTool.ParameterException(((""Unsupported command: "" + cmd) + "". See --help for supported commands"")); } } catch (com.android.apksigner.ApkSignerTool.ParameterException | com.android.apksigner.OptionsParser e) { java.lang.System.err.println(e.getMessage()); java.lang.System.exit(1); return; } }",98aafc713d46dfbbd4fd6834459a6a077142e660,"public static void main(java.lang.String[] params) throws java.lang.Exception { if ((((params.length) == 0) || (""--help"".equals(params[0]))) || (""-h"".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if (""--version"".equals(params[0])) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } java.lang.String cmd = params[0]; try { if (""sign"".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""verify"".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""rotate"".equals(cmd)) { com.android.apksigner.ApkSignerTool.rotate(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""help"".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if (""version"".equals(cmd)) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } else if (""dump-hints"".equals(cmd)) { com.android.apksigner.ApkSignerTool.dumpHints(java.util.Arrays.copyOfRange(params, 1, params.length)); } else { throw new com.android.apksigner.ApkSignerTool.ParameterException(((""Unsupported command: "" + cmd) + "". See --help for supported commands"")); } } catch (com.android.apksigner.ApkSignerTool.ParameterException | com.android.apksigner.OptionsParser e) { java.lang.System.err.println(e.getMessage()); java.lang.System.exit(1); return; } }",06f3ba451cae8dbeba865b7c1e5522a8c07add03,"public static void main(java.lang.String[] params) throws java.lang.Exception { if ((((params.length) == 0) || (""--help"".equals(params[0]))) || (""-h"".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if (""--version"".equals(params[0])) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } java.lang.String cmd = params[0]; try { if (""sign"".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""verify"".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""rotate"".equals(cmd)) { com.android.apksigner.ApkSignerTool.rotate(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""help"".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if (""version"".equals(cmd)) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } else { throw new com.android.apksigner.ApkSignerTool.ParameterException(((""Unsupported command: "" + cmd) + "". See --help for supported commands"")); } } catch (com.android.apksigner.ApkSignerTool.ParameterException | com.android.apksigner.OptionsParser e) { java.lang.System.err.println(e.getMessage()); java.lang.System.exit(1); return; } }",98aafc713d46dfbbd4fd6834459a6a077142e660,2018-05-11 23:33:04,4
681822,src_com_android_bluetooth_hfp_HeadsetService.java,"@java.lang.Override public void run() { synchronized(mStateMachines) { mDialingOutTimeoutEvent = null; doForStateMachine(mDialingOutDevice, ( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.DIALING_OUT_RESULT, 0, 0, mDialingOutDevice)); } }",48ef759bbaa9d7a067c3ffa137a04ef268e09abc,"@java.lang.Override public void run() { synchronized(mStateMachines) { mDialingOutTimeoutEvent = null; doForStateMachine(mDialingOutDevice, ( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.DIALING_OUT_RESULT, 0, 0, mDialingOutDevice)); mSystemInterface.getAudioManager().setParameters(""A2dpSuspended=false""); } }",0b70de7832b71738902cf6c68cd7c015bdbf6826,"@java.lang.Override public void run() { synchronized(mStateMachines) { mDialingOutTimeoutEvent = null; doForStateMachine(mDialingOutDevice, ( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.DIALING_OUT_RESULT, 0, 0, mDialingOutDevice)); } }",48ef759bbaa9d7a067c3ffa137a04ef268e09abc,2018-05-12 02:39:07,8
681822,src_com_android_bluetooth_hfp_HeadsetService.java,"boolean dialOutgoingCall(android.bluetooth.BluetoothDevice fromDevice, java.lang.String dialNumber) { synchronized(mStateMachines) { if ((mDialingOutTimeoutEvent) != null) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, (""dialOutgoingCall, already dialing by "" + (mDialingOutTimeoutEvent))); return false; } if (isVirtualCallStarted()) { if (!(stopScoUsingVirtualVoiceCall())) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, ""dialOutgoingCall failed to stop current virtual call""); return false; } } if (!(setActiveDevice(fromDevice))) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, (""dialOutgoingCall failed to set active device to "" + fromDevice)); return false; } android.content.Intent intent = new android.content.Intent(android.content.Intent.ACTION_CALL_PRIVILEGED, android.net.Uri.fromParts(PhoneAccount.SCHEME_TEL, dialNumber, null)); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); startActivity(intent); mDialingOutTimeoutEvent = new com.android.bluetooth.hfp.HeadsetService.DialingOutTimeoutEvent(fromDevice); mStateMachinesThread.getThreadHandler().postDelayed(mDialingOutTimeoutEvent, com.android.bluetooth.hfp.HeadsetService.DIALING_OUT_TIMEOUT_MS); return true; } }",dbaf5f95bb0f55c3ff3a5dc4255bdfdb9950683f,"boolean dialOutgoingCall(android.bluetooth.BluetoothDevice fromDevice, java.lang.String dialNumber) { synchronized(mStateMachines) { if (!(isOnStateMachineThread())) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, ""dialOutgoingCall must be called from state machine thread""); return false; } if ((mDialingOutTimeoutEvent) != null) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, (""dialOutgoingCall, already dialing by "" + (mDialingOutTimeoutEvent))); return false; } if (isVirtualCallStarted()) { if (!(stopScoUsingVirtualVoiceCall())) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, ""dialOutgoingCall failed to stop current virtual call""); return false; } } if (!(setActiveDevice(fromDevice))) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, (""dialOutgoingCall failed to set active device to "" + fromDevice)); return false; } mSystemInterface.getAudioManager().setParameters(""A2dpSuspended=true""); android.content.Intent intent = new android.content.Intent(android.content.Intent.ACTION_CALL_PRIVILEGED, android.net.Uri.fromParts(PhoneAccount.SCHEME_TEL, dialNumber, null)); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); startActivity(intent); mDialingOutTimeoutEvent = new com.android.bluetooth.hfp.HeadsetService.DialingOutTimeoutEvent(fromDevice); mStateMachinesThread.getThreadHandler().postDelayed(mDialingOutTimeoutEvent, com.android.bluetooth.hfp.HeadsetService.DIALING_OUT_TIMEOUT_MS); return true; } }",f208bd42f4d7a7bc6d42e7dc0326bf4f2230961b,"boolean dialOutgoingCall(android.bluetooth.BluetoothDevice fromDevice, java.lang.String dialNumber) { synchronized(mStateMachines) { if (!(isOnStateMachineThread())) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, ""dialOutgoingCall must be called from state machine thread""); return false; } if ((mDialingOutTimeoutEvent) != null) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, (""dialOutgoingCall, already dialing by "" + (mDialingOutTimeoutEvent))); return false; } if (isVirtualCallStarted()) { if (!(stopScoUsingVirtualVoiceCall())) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, ""dialOutgoingCall failed to stop current virtual call""); return false; } } if (!(setActiveDevice(fromDevice))) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, (""dialOutgoingCall failed to set active device to "" + fromDevice)); return false; } android.content.Intent intent = new android.content.Intent(android.content.Intent.ACTION_CALL_PRIVILEGED, android.net.Uri.fromParts(PhoneAccount.SCHEME_TEL, dialNumber, null)); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); startActivity(intent); mDialingOutTimeoutEvent = new com.android.bluetooth.hfp.HeadsetService.DialingOutTimeoutEvent(fromDevice); mStateMachinesThread.getThreadHandler().postDelayed(mDialingOutTimeoutEvent, com.android.bluetooth.hfp.HeadsetService.DIALING_OUT_TIMEOUT_MS); return true; } }",380200ec4390ff51dd663f71686112af7137a834,2018-05-12 02:39:07,8
681822,src_com_android_bluetooth_hfp_HeadsetService.java,"@com.android.internal.annotations.VisibleForTesting public void onAudioStateChangedFromStateMachine(android.bluetooth.BluetoothDevice device, int fromState, int toState) { synchronized(mStateMachines) { if ((fromState != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) && (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED))) { } if ((fromState != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) && (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED))) { if ((((mActiveDevice) != null) && (!(mActiveDevice.equals(device)))) && (shouldPersistAudio())) { if (!(connectAudio(mActiveDevice))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (((((""onAudioStateChangedFromStateMachine, failed to connect to new "" + ""active device "") + (mActiveDevice)) + "", after "") + device) + "" is disconnected from SCO"")); } } } } }",71ffec9174f24445c3f3dccb6e9500407a579095,"@com.android.internal.annotations.VisibleForTesting public void onAudioStateChangedFromStateMachine(android.bluetooth.BluetoothDevice device, int fromState, int toState) { synchronized(mStateMachines) { if ((fromState != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) && (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED))) { } if ((fromState != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) && (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED))) { if ((((mActiveDevice) != null) && (!(mActiveDevice.equals(device)))) && (shouldPersistAudio())) { if (!(connectAudio(mActiveDevice))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (((((""onAudioStateChangedFromStateMachine, failed to connect to new "" + ""active device "") + (mActiveDevice)) + "", after "") + device) + "" is disconnected from SCO"")); } } } if (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { mSystemInterface.getAudioManager().setParameters(""A2dpSuspended=false""); } } }",9dca8061a37f340a78b37ba25d9b688127877a33,"@com.android.internal.annotations.VisibleForTesting public void onAudioStateChangedFromStateMachine(android.bluetooth.BluetoothDevice device, int fromState, int toState) { synchronized(mStateMachines) { if (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { if (fromState != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { if ((((mActiveDevice) != null) && (!(mActiveDevice.equals(device)))) && (shouldPersistAudio())) { if (!(connectAudio(mActiveDevice))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (((((""onAudioStateChangedFromStateMachine, failed to connect"" + ("" audio to new "" + ""active device "")) + (mActiveDevice)) + "", after "") + device) + "" is disconnected from SCO"")); } } } if (mSystemInterface.isCallIdle()) { mSystemInterface.getAudioManager().setParameters(""A2dpSuspended=false""); } } } }",c2e8790dea154207a7cc293608388eb71aef1055,2018-05-12 02:39:07,8
681822,src_com_android_bluetooth_hfp_HeadsetService.java,"private boolean startScoUsingVirtualVoiceCall() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH_ADMIN permission""); android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, (""startScoUsingVirtualVoiceCall: "" + (com.android.bluetooth.Utils.getUidPidString()))); synchronized(mStateMachines) { if (isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""startScoUsingVirtualVoiceCall: audio is not idle""); return false; } if ((mActiveDevice) == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""startScoUsingVirtualVoiceCall: no active device""); return false; } boolean inTelecomCall = (!(mVirtualCallStarted)) && ((mSystemInterface.isInCall()) || (mSystemInterface.isRinging())); if (inTelecomCall) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""startScoUsingVirtualVoiceCall: Telecom call in progress""); return false; } if (mVirtualCallStarted) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""startScoUsingVirtualVoiceCall: has already started""); return false; } mVirtualCallStarted = true; phoneStateChanged(0, 0, HeadsetHalConstants.CALL_STATE_DIALING, """", 0, true); phoneStateChanged(0, 0, HeadsetHalConstants.CALL_STATE_ALERTING, """", 0, true); phoneStateChanged(1, 0, HeadsetHalConstants.CALL_STATE_IDLE, """", 0, true); return true; } }",2ec9d2200e6e6d58702f62f602cfcad8610a3264,"private boolean startScoUsingVirtualVoiceCall() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH_ADMIN permission""); android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, (""startScoUsingVirtualVoiceCall: "" + (com.android.bluetooth.Utils.getUidPidString()))); synchronized(mStateMachines) { if (isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""startScoUsingVirtualVoiceCall: audio is not idle""); return false; } if ((mActiveDevice) == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""startScoUsingVirtualVoiceCall: no active device""); return false; } boolean inTelecomCall = (!(mVirtualCallStarted)) && ((mSystemInterface.isInCall()) || (mSystemInterface.isRinging())); if (inTelecomCall) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""startScoUsingVirtualVoiceCall: Telecom call in progress""); return false; } if (mVirtualCallStarted) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""startScoUsingVirtualVoiceCall: has already started""); return false; } mVirtualCallStarted = true; mStateMachinesThread.getThreadHandler().post(() -> mSystemInterface.getAudioManager().setParameters(""A2dpSuspended=true"")); phoneStateChanged(0, 0, HeadsetHalConstants.CALL_STATE_DIALING, """", 0, true); phoneStateChanged(0, 0, HeadsetHalConstants.CALL_STATE_ALERTING, """", 0, true); phoneStateChanged(1, 0, HeadsetHalConstants.CALL_STATE_IDLE, """", 0, true); return true; } }",4b7fa90975d85f17af9147b8fa3bf14e10d69560,"private boolean startScoUsingVirtualVoiceCall() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH_ADMIN permission""); android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, (""startScoUsingVirtualVoiceCall: "" + (com.android.bluetooth.Utils.getUidPidString()))); synchronized(mStateMachines) { if (isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""startScoUsingVirtualVoiceCall: audio is not idle""); return false; } if ((mActiveDevice) == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""startScoUsingVirtualVoiceCall: no active device""); return false; } boolean inTelecomCall = (!(mVirtualCallStarted)) && ((mSystemInterface.isInCall()) || (mSystemInterface.isRinging())); if (inTelecomCall) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""startScoUsingVirtualVoiceCall: Telecom call in progress""); return false; } if (mVirtualCallStarted) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""startScoUsingVirtualVoiceCall: has already started""); return false; } mVirtualCallStarted = true; phoneStateChanged(0, 0, HeadsetHalConstants.CALL_STATE_DIALING, """", 0, true); phoneStateChanged(0, 0, HeadsetHalConstants.CALL_STATE_ALERTING, """", 0, true); phoneStateChanged(1, 0, HeadsetHalConstants.CALL_STATE_IDLE, """", 0, true); return true; } }",2ec9d2200e6e6d58702f62f602cfcad8610a3264,2018-05-12 02:39:07,8
682549,src_com_android_bluetooth_newavrcp_MediaPlayerWrapper.java,"@java.lang.Override public void handleMessage(android.os.Message msg) { if ((msg.what) != (com.android.bluetooth.avrcp.MediaPlayerWrapper.TimeoutHandler.MSG_TIMEOUT)) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (""Unknown message on timeout handler: "" + (msg.what))); return; } android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (""Timeout while waiting for metadata to sync for "" + (mPackageName))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current Metadata: "" + (getMetadata().getDescription()))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current Playstate: "" + (getPlaybackState()))); for (int i = 0; ((getQueue()) != null) && (i < (getQueue().size())); i++) { android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ((("" └ QueueItem("" + i) + ""): "") + (getQueue().get(i)))); } if (com.android.bluetooth.avrcp.MediaPlayerWrapper.sTesting) android.util.Log.wtfStack(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ""Crashing the stack""); }",b356cc9eb038b6a1f428547d74a2f7359d9634c1,"@java.lang.Override public void handleMessage(android.os.Message msg) { if ((msg.what) != (com.android.bluetooth.avrcp.MediaPlayerWrapper.TimeoutHandler.MSG_TIMEOUT)) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (""Unknown message on timeout handler: "" + (msg.what))); return; } android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (""Timeout while waiting for metadata to sync for "" + (mPackageName))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current Metadata: "" + (com.android.bluetooth.avrcp.Util.toMetadata(getMetadata())))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current Playstate: "" + (getPlaybackState()))); java.util.List<com.android.bluetooth.avrcp.Metadata> current_queue = com.android.bluetooth.avrcp.Util.toMetadataList(queue); for (int i = 0; i < (current_queue.size()); i++) { android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ((("" └ QueueItem("" + i) + ""): "") + (current_queue.get(i)))); } if (com.android.bluetooth.avrcp.MediaPlayerWrapper.sTesting) android.util.Log.wtfStack(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ""Crashing the stack""); }",ae4bb95091f5b7aa98c3d659358cc314e4d3c2f1,"@java.lang.Override public void handleMessage(android.os.Message msg) { if ((msg.what) != (com.android.bluetooth.avrcp.MediaPlayerWrapper.TimeoutHandler.MSG_TIMEOUT)) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (""Unknown message on timeout handler: "" + (msg.what))); return; } android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (""Timeout while waiting for metadata to sync for "" + (mPackageName))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current Metadata: "" + (com.android.bluetooth.avrcp.Util.toMetadata(getMetadata())))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current Playstate: "" + (getPlaybackState()))); java.util.List<com.android.bluetooth.avrcp.Metadata> current_queue = com.android.bluetooth.avrcp.Util.toMetadataList(getQueue()); for (int i = 0; i < (current_queue.size()); i++) { android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ((("" └ QueueItem("" + i) + ""): "") + (current_queue.get(i)))); } if (com.android.bluetooth.avrcp.MediaPlayerWrapper.sTesting) android.util.Log.wtfStack(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ""Crashing the stack""); }",3832f38a9b9da0057b70e261c0d6c26da580c0d4,2018-05-14 19:07:23,6
685341,sample_app_src_java_com_android_graphics_benchmark_example_Sphere.java,private int build() { mSphereVertices = java.nio.ByteBuffer.allocateDirect((((((mNumSegments) * ((mNumSegments) + 1)) * (com.android.graphics.benchmark.example.Sphere.COORDS_PER_VERTEX)) * (com.android.graphics.benchmark.example.Sphere.VERTEX_STRIDE)) * 2)).order(java.nio.ByteOrder.nativeOrder()).asFloatBuffer(); mIndices = java.nio.ByteBuffer.allocateDirect(((((mNumSegments) * ((mNumSegments) + 2)) * 2) * 4)).order(java.nio.ByteOrder.nativeOrder()).asIntBuffer(); double dTheta = (2 * (java.lang.Math.PI)) / (mNumSegments); double dPhi = (java.lang.Math.PI) / (mNumSegments); int points = 0; boolean firstLoop = true; double epsilon = 1.0E-10; for (double phi = -(java.lang.Math.PI); phi <= (0 + epsilon); phi += dPhi) { if (!firstLoop) { mIndices.put(((points - (2 * (mNumSegments))) + 1)); mIndices.put((points - (mNumSegments))); mNumIndices += 2; } for (double theta = 0.0; theta < (((java.lang.Math.PI) * 2) - epsilon); theta += dTheta) { mSphereVertices.put(((float) (((mRadius) * (java.lang.Math.sin(phi))) * (java.lang.Math.cos(theta))))); mSphereVertices.put(((float) (((mRadius) * (java.lang.Math.sin(phi))) * (java.lang.Math.sin(theta))))); mSphereVertices.put(((float) ((mRadius) * (java.lang.Math.cos(phi))))); if (!firstLoop) { mIndices.put((points - (mNumSegments))); mIndices.put(points); mNumIndices += 2; } points++; } if (!firstLoop) { mIndices.put(((points - (mNumSegments)) - 1)); mIndices.put(((points - (2 * (mNumSegments))) + 1)); mNumIndices += 2; } firstLoop = false; } mIndices.position(0); mSphereVertices.position(0); return points; },9d134d839d329d0858cab3f58dcf4ebfcb4cc19b,"private int build() { mSphereVertices = java.nio.ByteBuffer.allocateDirect((((((mNumSegments) * ((mNumSegments) + 1)) * (com.android.graphics.benchmark.example.Sphere.COORDS_PER_VERTEX)) * (com.android.graphics.benchmark.example.Sphere.VERTEX_STRIDE)) * 2)).order(java.nio.ByteOrder.nativeOrder()).asFloatBuffer(); mIndices = java.nio.ByteBuffer.allocateDirect(((((mNumSegments) * ((mNumSegments) + 2)) * 2) * 4)).order(java.nio.ByteOrder.nativeOrder()).asIntBuffer(); double dTheta = (2 * (java.lang.Math.PI)) / (mNumSegments); double dPhi = (java.lang.Math.PI) / (mNumSegments); int points = 0; boolean firstLoop = true; double epsilon = 1.0E-10; for (double phi = -(java.lang.Math.PI); phi <= (0 + epsilon); phi += dPhi) { for (double theta = 0.0; theta < (((java.lang.Math.PI) * 2) - epsilon); theta += dTheta) { mSphereVertices.put(((float) (((mRadius) * (java.lang.Math.sin(phi))) * (java.lang.Math.cos(theta))))); mSphereVertices.put(((float) (((mRadius) * (java.lang.Math.sin(phi))) * (java.lang.Math.sin(theta))))); mSphereVertices.put(((float) ((mRadius) * (java.lang.Math.cos(phi))))); if (!firstLoop) { mIndices.put((points - (mNumSegments))); mIndices.put(points); mNumIndices += 2; } points++; } if (!firstLoop) { mIndices.put((points - (2 * (mNumSegments)))); mIndices.put((points - (mNumSegments))); mNumIndices += 2; } firstLoop = false; } java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (int i = 0; i < (mNumIndices); i++) { sb.append(mIndices.get(i)); sb.append("", ""); } mIndices.position(0); mSphereVertices.position(0); return points; }",7eb3ae36b95b95fed8dfeb9f63804922324e2011,private int build() { mSphereVertices = java.nio.ByteBuffer.allocateDirect((((((mNumSegments) * ((mNumSegments) + 1)) * (com.android.graphics.benchmark.example.Sphere.COORDS_PER_VERTEX)) * (com.android.graphics.benchmark.example.Sphere.VERTEX_STRIDE)) * 2)).order(java.nio.ByteOrder.nativeOrder()).asFloatBuffer(); mIndices = java.nio.ByteBuffer.allocateDirect(((((mNumSegments) * ((mNumSegments) + 2)) * 2) * 4)).order(java.nio.ByteOrder.nativeOrder()).asIntBuffer(); double dTheta = (2 * (java.lang.Math.PI)) / (mNumSegments); double dPhi = (java.lang.Math.PI) / (mNumSegments); int points = 0; boolean firstLoop = true; double epsilon = 1.0E-10; for (double phi = -(java.lang.Math.PI); phi <= (0 + epsilon); phi += dPhi) { for (double theta = 0.0; theta < (((java.lang.Math.PI) * 2) - epsilon); theta += dTheta) { mSphereVertices.put(((float) (((mRadius) * (java.lang.Math.sin(phi))) * (java.lang.Math.cos(theta))))); mSphereVertices.put(((float) (((mRadius) * (java.lang.Math.sin(phi))) * (java.lang.Math.sin(theta))))); mSphereVertices.put(((float) ((mRadius) * (java.lang.Math.cos(phi))))); if (!firstLoop) { mIndices.put((points - (mNumSegments))); mIndices.put(points); mNumIndices += 2; } points++; } if (!firstLoop) { mIndices.put((points - (2 * (mNumSegments)))); mIndices.put((points - (mNumSegments))); mNumIndices += 2; } firstLoop = false; } mIndices.position(0); mSphereVertices.position(0); return points; },1f52fa07931099e39e66cee129d6054ed0368935,2018-05-14 21:19:00,2
684867,src_com_android_bluetooth_btservice_ActiveDeviceManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void wiredAudioDeviceConnected() { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ""wiredAudioDeviceConnected""); } setA2dpActiveDevice(null); setHfpActiveDevice(null); setHearingAidActiveDevice(null); }",66efe668a3892d8a5b80f8f9ebb340f783d10fbe,"@android.support.annotation.VisibleForTesting void wiredAudioDeviceConnected() { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ""wiredAudioDeviceConnected""); } setA2dpActiveDevice(null); setHfpActiveDevice(null); setHearingAidActiveDevice(null); }",c9feb40e2365570ea5b8798a4a66c82b62749609,2018-05-15 15:49:10,6
684867,src_com_android_bluetooth_btservice_ActiveDeviceManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onAudioDevicesAdded(android.media.AudioDeviceInfo[] addedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ""onAudioDevicesAdded""); } boolean hasAddedWiredDevice = false; for (android.media.AudioDeviceInfo deviceInfo : addedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, (((""Audio device added: "" + (deviceInfo.getProductName())) + "" type: "") + (deviceInfo.getType()))); } if (isWiredHeadset(deviceInfo)) { hasAddedWiredDevice = true; break; } } if (hasAddedWiredDevice) { wiredAudioDeviceConnected(); } }",419e659e2952c899b678bbd0721748762d39b355,"@java.lang.Override public void onAudioDevicesAdded(android.media.AudioDeviceInfo[] addedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ""onAudioDevicesAdded""); } boolean hasAddedWiredDevice = false; for (android.media.AudioDeviceInfo deviceInfo : addedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, (((""Audio device added: "" + (deviceInfo.getProductName())) + "" type: "") + (deviceInfo.getType()))); } if (isWiredAudioHeadset(deviceInfo)) { hasAddedWiredDevice = true; break; } } if (hasAddedWiredDevice) { wiredAudioDeviceConnected(); } }",72c8552665088b55501268ce1640a6b5401105fc,2018-05-15 15:49:10,6
684867,src_com_android_bluetooth_btservice_ActiveDeviceManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean isWiredHeadset(android.media.AudioDeviceInfo deviceInfo) { switch (deviceInfo.getType()) { case android.media.AudioDeviceInfo.TYPE_WIRED_HEADSET : case android.media.AudioDeviceInfo.TYPE_WIRED_HEADPHONES : case android.media.AudioDeviceInfo.TYPE_USB_HEADSET : return true; default : break; } return false; },bff25af51cc493b7a844df2c0d1231a04b74b13d,private boolean isWiredAudioHeadset(android.media.AudioDeviceInfo deviceInfo) { switch (deviceInfo.getType()) { case android.media.AudioDeviceInfo.TYPE_WIRED_HEADSET : case android.media.AudioDeviceInfo.TYPE_WIRED_HEADPHONES : case android.media.AudioDeviceInfo.TYPE_USB_HEADSET : return true; default : break; } return false; },5a213cf33386e1526b7457038a84f455c4d85e8e,2018-05-15 15:49:10,6
684867,src_com_android_bluetooth_btservice_ActiveDeviceManager.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onAudioDevicesRemoved(android.media.AudioDeviceInfo[] removedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ""onAudioDevicesRemoved""); } boolean wasWiredAudioDeviceRemoved = false; for (android.media.AudioDeviceInfo deviceInfo : removedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, (((""Audio device removed: "" + (deviceInfo.getProductName())) + "" type: "") + (deviceInfo.getType()))); } if (isWiredHeadset(deviceInfo)) { wasWiredAudioDeviceRemoved = true; break; } } if (!wasWiredAudioDeviceRemoved) { return; } boolean hasConnectedWiredDevice = false; android.media.AudioDeviceInfo[] devices = mAudioManager.getDevices(AudioManager.GET_DEVICES_OUTPUTS); for (android.media.AudioDeviceInfo deviceInfo : devices) { if (isWiredHeadset(deviceInfo)) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, (((""Found connected wired device: "" + (deviceInfo.getProductName())) + "" type: "") + (deviceInfo.getType()))); } hasConnectedWiredDevice = true; break; } } if (!hasConnectedWiredDevice) { allWiredAudioDevicesDisconnected(); } }",1e935b11693569fc60f34f303058b2e41a49fe94,@java.lang.Override public void onAudioDevicesRemoved(android.media.AudioDeviceInfo[] removedDevices) { },431b6ffc078cf2b46beb0369d2e302ef18e3883d,2018-05-15 15:49:10,6
684867,tests_unit_src_com_android_bluetooth_btservice_ActiveDeviceManagerTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void wiredAudioDeviceConnected_setAllActiveDevicesNull() { a2dpConnected(mA2dpDevice); headsetConnected(mA2dpHeadsetDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mHeadsetDevice); }",c3d783d5a81762a4982d0cc20a0d0d173f9c73c7,"@org.junit.Test public void wiredAudioDeviceConnected_setAllActiveDevicesNull() { a2dpConnected(mA2dpDevice); headsetConnected(mHeadsetDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mHeadsetDevice); mActiveDeviceManager.wiredAudioDeviceConnected(); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(isNull()); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(isNull()); verify(mHearingAidService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(isNull()); }",a17c50ebb345699d045987efb28b4313a40ae716,2018-05-15 15:49:10,6
656019,tests_tests_media_src_android_media_cts_AudioTrackLatencyTest.java,"public void testPlaySmallBuffer() throws java.lang.Exception { final java.lang.String TEST_NAME = ""testPlaySmallBuffer""; android.media.cts.AudioTrackLatencyTest.TestSetup setup = new android.media.cts.AudioTrackLatencyTest.TestSetup(); android.media.AudioTrack track = setup.createTrack(); int framesWrittenTotal = setup.primeAudioTrack(TEST_NAME); int position1 = track.getPlaybackHeadPosition(); assertEquals((TEST_NAME + "": initial position""), 0, position1); track.play(); final long MAX_TIME_TO_START_MSEC = 500; long giveUpAt = (java.lang.System.currentTimeMillis()) + MAX_TIME_TO_START_MSEC; int position2 = track.getPlaybackHeadPosition(); while ((position1 == position2) && ((java.lang.System.currentTimeMillis()) < giveUpAt)) { java.lang.Thread.sleep(20); position2 = track.getPlaybackHeadPosition(); } assertTrue(((TEST_NAME + "": did it start?, position after start = "") + position2), (position2 > position1)); final int several = 3; java.lang.Thread.sleep((((several * framesWrittenTotal) * (android.media.cts.AudioTrackLatencyTest.MILLIS_PER_SECOND)) / (setup.sampleRate))); position2 = track.getPlaybackHeadPosition(); assertEquals((TEST_NAME + "": did it play all the data?""), framesWrittenTotal, position2); track.release(); }",c813eeb406dc5c54ea937f7cab8bb90a00859a05,"public void testPlaySmallBuffer() throws java.lang.Exception { final java.lang.String TEST_NAME = ""testPlaySmallBuffer""; android.media.cts.AudioTrackLatencyTest.TestSetup setup = new android.media.cts.AudioTrackLatencyTest.TestSetup(); android.media.AudioTrack track = setup.createTrack(); int framesWrittenTotal = setup.primeAudioTrack(TEST_NAME); int position1 = track.getPlaybackHeadPosition(); assertEquals((TEST_NAME + "": initial position""), 0, position1); track.play(); final long MAX_TIME_TO_START_MSEC = 500; long giveUpAt = (java.lang.System.currentTimeMillis()) + MAX_TIME_TO_START_MSEC; int position2 = track.getPlaybackHeadPosition(); while ((position1 == position2) && ((java.lang.System.currentTimeMillis()) < giveUpAt)) { java.lang.Thread.sleep(20); position2 = track.getPlaybackHeadPosition(); } assertTrue(((TEST_NAME + "": did it start?, position after start = "") + position2), (position2 > position1)); final int several = 4; java.lang.Thread.sleep((((several * framesWrittenTotal) * (android.media.cts.AudioTrackLatencyTest.MILLIS_PER_SECOND)) / (setup.sampleRate))); position2 = track.getPlaybackHeadPosition(); assertEquals((TEST_NAME + "": did it play all the data?""), framesWrittenTotal, position2); track.release(); }",2248873a2f02e7b5f6c64f53fad24435c4c927c1,"public void testPlaySmallBuffer() throws java.lang.Exception { final java.lang.String TEST_NAME = ""testPlaySmallBuffer""; android.media.cts.AudioTrackLatencyTest.TestSetup setup = new android.media.cts.AudioTrackLatencyTest.TestSetup(); android.media.AudioTrack track = setup.createTrack(); int framesWrittenTotal = setup.primeAudioTrack(TEST_NAME); int position1 = track.getPlaybackHeadPosition(); assertEquals((TEST_NAME + "": initial position""), 0, position1); track.play(); final long MAX_TIME_TO_START_MSEC = 500; long giveUpAt = (java.lang.System.currentTimeMillis()) + MAX_TIME_TO_START_MSEC; int position2 = track.getPlaybackHeadPosition(); while ((position1 == position2) && ((java.lang.System.currentTimeMillis()) < giveUpAt)) { java.lang.Thread.sleep(20); position2 = track.getPlaybackHeadPosition(); } assertTrue(((TEST_NAME + "": did it start?, position after start = "") + position2), (position2 > position1)); final int several = 3; final int WARM_UP_TIME_MSEC = 300; final long sleepTimeMSec = WARM_UP_TIME_MSEC + (((several * framesWrittenTotal) * (android.media.cts.AudioTrackLatencyTest.MILLIS_PER_SECOND)) / (setup.sampleRate)); java.lang.Thread.sleep(sleepTimeMSec); position2 = track.getPlaybackHeadPosition(); assertEquals((TEST_NAME + "": did it play all the data?""), framesWrittenTotal, position2); track.release(); }",29d162dd0c67ff04852701ea99bab3c46699ab9e,2018-05-15 17:02:37,12
664961,tests_tests_bluetooth_src_android_bluetooth_cts_BluetoothLeScanTest.java,"@android.test.suitebuilder.annotation.MediumTest public void testOpportunisticScan() { if (!(isBleSupported())) { return; } android.bluetooth.le.ScanSettings opportunisticScanSettings = new android.bluetooth.le.ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_OPPORTUNISTIC).build(); android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback emptyScanCallback = new android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback(); mScanner.startScan(java.util.Collections.<android.bluetooth.le.ScanFilter>emptyList(), opportunisticScanSettings, emptyScanCallback); sleep(android.bluetooth.cts.BluetoothLeScanTest.SCAN_DURATION_MILLIS); assertTrue(emptyScanCallback.getScanResults().isEmpty()); android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback regularScanCallback = new android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback(); android.bluetooth.le.ScanSettings regularScanSettings = new android.bluetooth.le.ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY).build(); java.util.List<android.bluetooth.le.ScanFilter> filters = new java.util.ArrayList<>(); android.bluetooth.le.ScanFilter filter = createScanFilter(); if (filter != null) { filters.add(filter); } else { android.util.Log.d(android.bluetooth.cts.BluetoothLeScanTest.TAG, ""no appropriate filter can be set""); } mScanner.startScan(filters, regularScanSettings, regularScanCallback); sleep(android.bluetooth.cts.BluetoothLeScanTest.SCAN_DURATION_MILLIS); assertTrue(""opportunistic scan results shouldn't be empty"", (!(emptyScanCallback.getScanResults().isEmpty()))); mScanner.stopScan(regularScanCallback); sleep(1000); emptyScanCallback.clear(); sleep(android.bluetooth.cts.BluetoothLeScanTest.SCAN_DURATION_MILLIS); assertTrue(""opportunistic scan shouldn't have scan results"", emptyScanCallback.getScanResults().isEmpty()); }",fcfc0a736574b6056361d19acafb5a978d6f05f9,"@android.test.suitebuilder.annotation.MediumTest public void testOpportunisticScan() { return; if (!(isBleSupported())) { return; } android.bluetooth.le.ScanSettings opportunisticScanSettings = new android.bluetooth.le.ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_OPPORTUNISTIC).build(); android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback emptyScanCallback = new android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback(); mScanner.startScan(java.util.Collections.<android.bluetooth.le.ScanFilter>emptyList(), opportunisticScanSettings, emptyScanCallback); sleep(android.bluetooth.cts.BluetoothLeScanTest.SCAN_DURATION_MILLIS); assertTrue(emptyScanCallback.getScanResults().isEmpty()); android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback regularScanCallback = new android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback(); android.bluetooth.le.ScanSettings regularScanSettings = new android.bluetooth.le.ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY).build(); java.util.List<android.bluetooth.le.ScanFilter> filters = new java.util.ArrayList<>(); android.bluetooth.le.ScanFilter filter = createScanFilter(); if (filter != null) { filters.add(filter); } else { android.util.Log.d(android.bluetooth.cts.BluetoothLeScanTest.TAG, ""no appropriate filter can be set""); } mScanner.startScan(filters, regularScanSettings, regularScanCallback); sleep(android.bluetooth.cts.BluetoothLeScanTest.SCAN_DURATION_MILLIS); assertTrue(""opportunistic scan results shouldn't be empty"", (!(emptyScanCallback.getScanResults().isEmpty()))); mScanner.stopScan(regularScanCallback); sleep(1000); emptyScanCallback.clear(); sleep(android.bluetooth.cts.BluetoothLeScanTest.SCAN_DURATION_MILLIS); assertTrue(""opportunistic scan shouldn't have scan results"", emptyScanCallback.getScanResults().isEmpty()); }",b0c1874ce679c941e8b82d5ec906449f36c60770,@android.test.suitebuilder.annotation.MediumTest public void testOpportunisticScan() { return; },7b5d4e84fc500b5b47cb0480f0ebb77f5fcd8dc2,2018-05-15 17:04:33,2
683161,tests_tests_permission2_src_android_permission2_cts_PermissionPolicyTest.java,"private java.util.List<android.content.pm.PermissionInfo> loadExpectedPermissions() throws java.lang.Exception { java.util.List<android.content.pm.PermissionInfo> permissions = new java.util.ArrayList<>(); try (java.io.InputStream in = getContext().getResources().openRawResource(android.permission2.cts.R.raw.android_manifest)) { org.xmlpull.v1.XmlPullParser parser = android.util.Xml.newPullParser(); parser.setInput(in, null); final int outerDepth = parser.getDepth(); int type; while (((type = parser.next()) != (org.xmlpull.v1.XmlPullParser.END_DOCUMENT)) && ((type != (org.xmlpull.v1.XmlPullParser.END_TAG)) || ((parser.getDepth()) > outerDepth))) { if ((type == (org.xmlpull.v1.XmlPullParser.END_TAG)) || (type == (org.xmlpull.v1.XmlPullParser.TEXT))) { continue; } if (android.permission2.cts.PermissionPolicyTest.TAG_PERMISSION.equals(parser.getName())) { android.content.pm.PermissionInfo permissionInfo = new android.content.pm.PermissionInfo(); permissionInfo.name = parser.getAttributeValue(null, android.permission2.cts.PermissionPolicyTest.ATTR_NAME); permissionInfo.group = parser.getAttributeValue(null, android.permission2.cts.PermissionPolicyTest.ATTR_PERMISSION_GROUP); permissionInfo.protectionLevel = android.permission2.cts.PermissionPolicyTest.parseProtectionLevel(parser.getAttributeValue(null, android.permission2.cts.PermissionPolicyTest.ATTR_PROTECTION_LEVEL)); permissions.add(permissionInfo); } else { android.util.Log.e(android.permission2.cts.PermissionPolicyTest.LOG_TAG, (""Unknown tag "" + (parser.getName()))); } } } return permissions; }",28a0838efa3448ce69cb19d488d099db4ccc9ffa,"private java.util.List<android.content.pm.PermissionInfo> loadExpectedPermissions(int androidManifestId) throws java.lang.Exception { java.util.List<android.content.pm.PermissionInfo> permissions = new java.util.ArrayList<>(); try (java.io.InputStream in = getContext().getResources().openRawResource(androidManifestId)) { org.xmlpull.v1.XmlPullParser parser = android.util.Xml.newPullParser(); parser.setInput(in, null); final int outerDepth = parser.getDepth(); int type; while (((type = parser.next()) != (org.xmlpull.v1.XmlPullParser.END_DOCUMENT)) && ((type != (org.xmlpull.v1.XmlPullParser.END_TAG)) || ((parser.getDepth()) > outerDepth))) { if ((type == (org.xmlpull.v1.XmlPullParser.END_TAG)) || (type == (org.xmlpull.v1.XmlPullParser.TEXT))) { continue; } if (android.permission2.cts.PermissionPolicyTest.TAG_PERMISSION.equals(parser.getName())) { android.content.pm.PermissionInfo permissionInfo = new android.content.pm.PermissionInfo(); permissionInfo.name = parser.getAttributeValue(null, android.permission2.cts.PermissionPolicyTest.ATTR_NAME); permissionInfo.group = parser.getAttributeValue(null, android.permission2.cts.PermissionPolicyTest.ATTR_PERMISSION_GROUP); permissionInfo.protectionLevel = android.permission2.cts.PermissionPolicyTest.parseProtectionLevel(parser.getAttributeValue(null, android.permission2.cts.PermissionPolicyTest.ATTR_PROTECTION_LEVEL)); permissions.add(permissionInfo); } else { android.util.Log.e(android.permission2.cts.PermissionPolicyTest.LOG_TAG, (""Unknown tag "" + (parser.getName()))); } } } return permissions; }",2921e93d21d9a1693c5b166fedeee3858e360de9,"private java.util.List<android.content.pm.PermissionInfo> loadExpectedPermissions() throws java.lang.Exception { java.util.List<android.content.pm.PermissionInfo> permissions = new java.util.ArrayList<>(); try (java.io.InputStream in = getContext().getResources().openRawResource(android.permission2.cts.R.raw.android_manifest)) { org.xmlpull.v1.XmlPullParser parser = android.util.Xml.newPullParser(); parser.setInput(in, null); final int outerDepth = parser.getDepth(); int type; while (((type = parser.next()) != (org.xmlpull.v1.XmlPullParser.END_DOCUMENT)) && ((type != (org.xmlpull.v1.XmlPullParser.END_TAG)) || ((parser.getDepth()) > outerDepth))) { if ((type == (org.xmlpull.v1.XmlPullParser.END_TAG)) || (type == (org.xmlpull.v1.XmlPullParser.TEXT))) { continue; } if (android.permission2.cts.PermissionPolicyTest.TAG_PERMISSION.equals(parser.getName())) { android.content.pm.PermissionInfo permissionInfo = new android.content.pm.PermissionInfo(); permissionInfo.name = parser.getAttributeValue(null, android.permission2.cts.PermissionPolicyTest.ATTR_NAME); permissionInfo.group = parser.getAttributeValue(null, android.permission2.cts.PermissionPolicyTest.ATTR_PERMISSION_GROUP); permissionInfo.protectionLevel = android.permission2.cts.PermissionPolicyTest.parseProtectionLevel(parser.getAttributeValue(null, android.permission2.cts.PermissionPolicyTest.ATTR_PROTECTION_LEVEL)); permissions.add(permissionInfo); } else { android.util.Log.e(android.permission2.cts.PermissionPolicyTest.LOG_TAG, (""Unknown tag "" + (parser.getName()))); } } } return permissions; }",28a0838efa3448ce69cb19d488d099db4ccc9ffa,2018-05-15 20:41:00,2
623704,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,"@org.junit.Test public void testUnbondDevice_disconnectBeforeUnbond() { mCurrentDevice = getTestDevice(0); org.junit.Assert.assertTrue(mHeadsetService.connect(mCurrentDevice)); verify(mObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectHfp(mCurrentDevice); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectedEvent); try { java.lang.Thread.sleep(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException exception) { org.junit.Assert.fail(""Interrupted while waiting for callback to disconnected state""); } doReturn(BluetoothDevice.BOND_NONE).when(mAdapterService).getBondState(eq(mCurrentDevice)); android.content.Intent unbondIntent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_BOND_STATE_CHANGED); unbondIntent.putExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.BOND_NONE); unbondIntent.putExtra(BluetoothDevice.EXTRA_DEVICE, mCurrentDevice); android.support.test.InstrumentationRegistry.getTargetContext().sendBroadcast(unbondIntent); verify(mObjectsFactory, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).destroyStateMachine(mStateMachineArgument.capture()); org.junit.Assert.assertEquals(mCurrentDevice, mStateMachineArgument.getValue().getDevice()); }",f09519f6de276b6a9bed9520ea9bb0f4910c5ddc,"@org.junit.Test public void testUnbondDevice_disconnectBeforeUnbond() { android.bluetooth.BluetoothDevice device = getTestDevice(0); org.junit.Assert.assertTrue(mHeadsetService.connect(device)); verify(mObjectsFactory).makeStateMachine(device, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectHfp(device); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, device); mHeadsetService.messageFromNative(connectedEvent); try { java.lang.Thread.sleep(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException exception) { org.junit.Assert.fail(""Interrupted while waiting for callback to disconnected state""); } doReturn(BluetoothDevice.BOND_NONE).when(mAdapterService).getBondState(eq(device)); android.content.Intent unbondIntent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_BOND_STATE_CHANGED); unbondIntent.putExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.BOND_NONE); unbondIntent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); android.support.test.InstrumentationRegistry.getTargetContext().sendBroadcast(unbondIntent); verify(mObjectsFactory, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).destroyStateMachine(mStateMachineArgument.capture()); org.junit.Assert.assertEquals(device, mStateMachineArgument.getValue().getDevice()); }",e3e52429d1d3c5593c8e306003d5d6408c2b8eab,"@org.junit.Test public void testUnbondDevice_disconnectBeforeUnbond() { android.bluetooth.BluetoothDevice device = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 0); mBondedDevices.add(device); org.junit.Assert.assertTrue(mHeadsetService.connect(device)); verify(mObjectsFactory).makeStateMachine(device, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); waitAndVerifyConnectionStateIntent(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS, device, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED); verify(mNativeInterface).connectHfp(device); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, device); mHeadsetService.messageFromNative(connectedEvent); waitAndVerifyConnectionStateIntent(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS, device, BluetoothProfile.STATE_DISCONNECTED, BluetoothProfile.STATE_CONNECTING); doReturn(BluetoothDevice.BOND_NONE).when(mAdapterService).getBondState(eq(device)); android.content.Intent unbondIntent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_BOND_STATE_CHANGED); unbondIntent.putExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.BOND_NONE); unbondIntent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); android.support.test.InstrumentationRegistry.getTargetContext().sendBroadcast(unbondIntent); verify(mObjectsFactory, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).destroyStateMachine(mStateMachineArgument.capture()); org.junit.Assert.assertEquals(device, mStateMachineArgument.getValue().getDevice()); }",66e042b6fae05cf6d895721180f71d2573bb7eb0,2018-05-15 23:12:06,36
623704,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void startVoiceRecognitionFromHf(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.hfp.HeadsetStackEvent startVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED, HeadsetHalConstants.VR_STATE_STARTED, device); mHeadsetService.messageFromNative(startVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).activateVoiceRecognition(); mHeadsetService.startVoiceRecognition(device); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters(""A2dpSuspended=true""); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).atResponseCode(device, HeadsetHalConstants.AT_RESPONSE_OK, 0); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectAudio(device); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); }",eef007d6be39272b222eeb65c1e4c75d71a3ca05,"private void startVoiceRecognitionFromHf(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.hfp.HeadsetStackEvent startVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED, HeadsetHalConstants.VR_STATE_STARTED, device); mHeadsetService.messageFromNative(startVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).activateVoiceRecognition(); org.junit.Assert.assertTrue(mHeadsetService.startVoiceRecognition(device)); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).atResponseCode(device, HeadsetHalConstants.AT_RESPONSE_OK, 0); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters(""A2dpSuspended=true""); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectAudio(device); waitAndVerifyAudioStateIntent(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS, device, BluetoothHeadset.STATE_AUDIO_CONNECTING, BluetoothHeadset.STATE_AUDIO_DISCONNECTED); mHeadsetService.messageFromNative(new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_CONNECTED, device)); waitAndVerifyAudioStateIntent(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS, device, BluetoothHeadset.STATE_AUDIO_CONNECTED, BluetoothHeadset.STATE_AUDIO_CONNECTING); verifyNoMoreInteractions(mNativeInterface); }",382a70dd94703042c5740659e67f49974b8d48bd,2018-05-15 23:12:06,36
623704,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testVoiceRecognition_SingleHfInitiatedSuccess() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromHf(device); }",448a18fa92728550ef09218917c1955eb506658e,"@org.junit.Test public void testVoiceRecognition_SingleHfInitiatedSuccess() { android.bluetooth.BluetoothDevice device = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 0); connectTestDevice(device); org.junit.Assert.assertTrue(mHeadsetService.setActiveDevice(device)); verify(mNativeInterface).setActiveDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromHf(device); }",fe6e1c292c79b479d0ede62d8d3cc029473d21a1,2018-05-15 23:12:06,36
623704,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testVoiceRecognition_SingleHfInitiatedFailedToActivate() { when(mSystemInterface.activateVoiceRecognition()).thenReturn(false); android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); com.android.bluetooth.hfp.HeadsetStackEvent startVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED, HeadsetHalConstants.VR_STATE_STARTED, device); mHeadsetService.messageFromNative(startVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).activateVoiceRecognition(); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).atResponseCode(device, HeadsetHalConstants.AT_RESPONSE_ERROR, 0); verifyNoMoreInteractions(mSystemInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); verifyNoMoreInteractions(mNativeInterface); verifyZeroInteractions(mAudioManager); }",3a2f9bf0781d89693fe55ad63db13f9d1f8d8f29,"@org.junit.Test public void testVoiceRecognition_SingleHfInitiatedFailedToActivate() { when(mSystemInterface.activateVoiceRecognition()).thenReturn(false); android.bluetooth.BluetoothDevice device = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 0); connectTestDevice(device); org.junit.Assert.assertTrue(mHeadsetService.setActiveDevice(device)); verify(mNativeInterface).setActiveDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); com.android.bluetooth.hfp.HeadsetStackEvent startVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED, HeadsetHalConstants.VR_STATE_STARTED, device); mHeadsetService.messageFromNative(startVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).activateVoiceRecognition(); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).atResponseCode(device, HeadsetHalConstants.AT_RESPONSE_ERROR, 0); verifyNoMoreInteractions(mNativeInterface); verifyZeroInteractions(mAudioManager); }",d0b44bab6396cdda439f6c1a74c72c9e4da2bb75,2018-05-15 23:12:06,36
623704,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testVoiceRecognition_SingleHfInitiatedTimeout() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); com.android.bluetooth.hfp.HeadsetStackEvent startVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED, HeadsetHalConstants.VR_STATE_STARTED, device); mHeadsetService.messageFromNative(startVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).activateVoiceRecognition(); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.START_VR_TIMEOUT_WAIT_MILLIS)).atResponseCode(device, HeadsetHalConstants.AT_RESPONSE_ERROR, 0); verifyNoMoreInteractions(mSystemInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); verifyNoMoreInteractions(mNativeInterface); verifyZeroInteractions(mAudioManager); }",90d346b02b4281b5bbd519af65aceaad1c06be57,"@org.junit.Test public void testVoiceRecognition_SingleHfInitiatedTimeout() { android.bluetooth.BluetoothDevice device = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 0); connectTestDevice(device); org.junit.Assert.assertTrue(mHeadsetService.setActiveDevice(device)); verify(mNativeInterface).setActiveDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); com.android.bluetooth.hfp.HeadsetStackEvent startVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED, HeadsetHalConstants.VR_STATE_STARTED, device); mHeadsetService.messageFromNative(startVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).activateVoiceRecognition(); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.START_VR_TIMEOUT_WAIT_MILLIS)).atResponseCode(device, HeadsetHalConstants.AT_RESPONSE_ERROR, 0); verifyNoMoreInteractions(mNativeInterface); verifyZeroInteractions(mAudioManager); }",15bd02e3bfaee76b32bb9d2325859b17969793c2,2018-05-15 23:12:06,36
623704,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testVoiceRecognition_MultiAgInitiatedSuccess() { android.bluetooth.BluetoothDevice deviceA = getTestDevice(0); connectHfpDevice(deviceA); android.bluetooth.BluetoothDevice deviceB = getTestDevice(1); connectHfpDevice(deviceB); org.junit.Assert.assertEquals(deviceA, mHeadsetService.getActiveDevice()); org.junit.Assert.assertTrue(mHeadsetService.setActiveDevice(deviceB)); org.junit.Assert.assertEquals(deviceB, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromAg(); com.android.bluetooth.hfp.HeadsetStackEvent startVrEventA = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED, HeadsetHalConstants.VR_STATE_STARTED, deviceA); mHeadsetService.messageFromNative(startVrEventA); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).atResponseCode(deviceA, HeadsetHalConstants.AT_RESPONSE_ERROR, 0); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); }",f47bfee0a21721ef40a34b64d329fb46fbfe158d,"@org.junit.Test public void testVoiceRecognition_MultiAgInitiatedSuccess() { android.bluetooth.BluetoothDevice deviceA = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 0); connectTestDevice(deviceA); android.bluetooth.BluetoothDevice deviceB = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); connectTestDevice(deviceB); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).sendBsir(deviceA, false); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).sendBsir(deviceB, false); org.junit.Assert.assertTrue(mHeadsetService.setActiveDevice(deviceB)); verify(mNativeInterface).setActiveDevice(deviceB); org.junit.Assert.assertEquals(deviceB, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromAg(); com.android.bluetooth.hfp.HeadsetStackEvent startVrEventA = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED, HeadsetHalConstants.VR_STATE_STARTED, deviceA); mHeadsetService.messageFromNative(startVrEventA); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).stopVoiceRecognition(deviceB); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).disconnectAudio(deviceB); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).atResponseCode(deviceA, HeadsetHalConstants.AT_RESPONSE_ERROR, 0); verifyNoMoreInteractions(mNativeInterface); }",016d068036be3ef928f2f833ca68f9d7527a805f,2018-05-15 23:12:06,36
623704,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testVoiceRecognition_SingleAgStopSuccess() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromAg(); org.junit.Assert.assertTrue(mHeadsetService.stopVoiceRecognition(device)); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).stopVoiceRecognition(device); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).disconnectAudio(device); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters(""A2dpSuspended=false""); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); }",19ce6e1e699b3e033a82493166110f08488d7e83,"@org.junit.Test public void testVoiceRecognition_SingleAgStopSuccess() { android.bluetooth.BluetoothDevice device = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 0); connectTestDevice(device); org.junit.Assert.assertTrue(mHeadsetService.setActiveDevice(device)); verify(mNativeInterface).setActiveDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromAg(); org.junit.Assert.assertTrue(mHeadsetService.stopVoiceRecognition(device)); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).stopVoiceRecognition(device); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).disconnectAudio(device); verifyNoMoreInteractions(mNativeInterface); }",ebea3fd28a4036056bf93750c7ff038d4931c95a,2018-05-15 23:12:06,36
623704,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testVoiceRecognition_SingleAgInitiatedSuccess() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromAg(); }",dbf26e4e07856227c6eca80564a23067844b99d4,"@org.junit.Test public void testVoiceRecognition_SingleAgInitiatedSuccess() { android.bluetooth.BluetoothDevice device = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 0); connectTestDevice(device); org.junit.Assert.assertTrue(mHeadsetService.setActiveDevice(device)); verify(mNativeInterface).setActiveDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromAg(); }",9edbcfadcd9e15cb18cc27ab269823e941e34e6d,2018-05-15 23:12:06,36
623704,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void startVoiceRecognitionFromAg() { android.bluetooth.BluetoothDevice device = mHeadsetService.getActiveDevice(); org.junit.Assert.assertNotNull(device); org.junit.Assert.assertTrue(mHeadsetService.startVoiceRecognition(device)); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters(""A2dpSuspended=true""); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).startVoiceRecognition(device); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectAudio(device); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); }",50bfa013b5beb4d6acc402c12611753fe5e3f020,"private void startVoiceRecognitionFromAg() { android.bluetooth.BluetoothDevice device = mHeadsetService.getActiveDevice(); org.junit.Assert.assertNotNull(device); org.junit.Assert.assertTrue(mHeadsetService.startVoiceRecognition(device)); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).startVoiceRecognition(device); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters(""A2dpSuspended=true""); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectAudio(device); waitAndVerifyAudioStateIntent(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS, device, BluetoothHeadset.STATE_AUDIO_CONNECTING, BluetoothHeadset.STATE_AUDIO_DISCONNECTED); mHeadsetService.messageFromNative(new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_CONNECTED, device)); waitAndVerifyAudioStateIntent(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS, device, BluetoothHeadset.STATE_AUDIO_CONNECTED, BluetoothHeadset.STATE_AUDIO_CONNECTING); verifyNoMoreInteractions(mNativeInterface); }",4011a9e0a248e8f283f2ca27880bc85a3ec09d22,2018-05-15 23:12:06,36
623704,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,"@org.junit.Test public void testConnectFromApi() { mCurrentDevice = getTestDevice(0); org.junit.Assert.assertTrue(mHeadsetService.connect(mCurrentDevice)); verify(mObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectHfp(mCurrentDevice); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(mCurrentDevice), mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTING })); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_SLC_CONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectedEvent); try { java.lang.Thread.sleep(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException exception) { org.junit.Assert.fail(""Interrupted while waiting for callback""); } org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(mCurrentDevice), mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTED })); org.junit.Assert.assertEquals(mCurrentDevice, mHeadsetService.getActiveDevice()); }",fbc4154af3ebd1efde4426b84c5c4ef23f611a3a,"@org.junit.Test public void testConnectFromApi() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(java.util.Collections.singletonList(device), mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTED })); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); }",ad975391de7b1a57e5f6046464cdeb9495e73632,"@org.junit.Test public void testConnectFromApi() { android.bluetooth.BluetoothDevice device = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 0); mBondedDevices.add(device); org.junit.Assert.assertTrue(mHeadsetService.connect(device)); verify(mObjectsFactory).makeStateMachine(device, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); waitAndVerifyConnectionStateIntent(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS, device, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED); verify(mNativeInterface).connectHfp(device); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mHeadsetService.getConnectionState(device)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(device), mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTING })); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_SLC_CONNECTED, device); mHeadsetService.messageFromNative(connectedEvent); waitAndVerifyConnectionStateIntent(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS, device, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_CONNECTING); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTED, mHeadsetService.getConnectionState(device)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(device), mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTED })); }",623bdbde1e525e56dd5910643f596618475f7194,2018-05-15 23:12:06,36
623704,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testVoiceRecognition_SingleHfStopSuccess() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromHf(device); com.android.bluetooth.hfp.HeadsetStackEvent stopVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED, HeadsetHalConstants.VR_STATE_STOPPED, device); mHeadsetService.messageFromNative(stopVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).deactivateVoiceRecognition(); mHeadsetService.stopVoiceRecognition(device); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).atResponseCode(device, HeadsetHalConstants.AT_RESPONSE_OK, 0); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).disconnectAudio(device); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters(""A2dpSuspended=false""); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); }",f548587152231744eb1723ea97c4535bc41e9256,"@org.junit.Test public void testVoiceRecognition_SingleHfStopSuccess() { android.bluetooth.BluetoothDevice device = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 0); connectTestDevice(device); org.junit.Assert.assertTrue(mHeadsetService.setActiveDevice(device)); verify(mNativeInterface).setActiveDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromHf(device); com.android.bluetooth.hfp.HeadsetStackEvent stopVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED, HeadsetHalConstants.VR_STATE_STOPPED, device); mHeadsetService.messageFromNative(stopVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).deactivateVoiceRecognition(); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS).times(2)).atResponseCode(device, HeadsetHalConstants.AT_RESPONSE_OK, 0); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).disconnectAudio(device); verifyNoMoreInteractions(mNativeInterface); }",71c8b044cc6c0d01c319d1aacc5fd1b06445f47f,2018-05-15 23:12:06,36
623704,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,"@org.junit.Test public void testGetHeadsetService() { org.junit.Assert.assertEquals(mHeadsetService, com.android.bluetooth.hfp.HeadsetService.getHeadsetService()); mCurrentDevice = getTestDevice(0); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(BluetoothHeadset.STATE_AUDIO_DISCONNECTED, mHeadsetService.getAudioState(mCurrentDevice)); }",2658229023ef03c560dc55296f1da4a064a3d04e,"@org.junit.Test public void testGetHeadsetService() { org.junit.Assert.assertEquals(mHeadsetService, com.android.bluetooth.hfp.HeadsetService.getHeadsetService()); android.bluetooth.BluetoothDevice device = getTestDevice(0); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState(device)); org.junit.Assert.assertEquals(BluetoothHeadset.STATE_AUDIO_DISCONNECTED, mHeadsetService.getAudioState(device)); }",2a7795e771e3ab8244a584e8551bc51bc8dee330,"@org.junit.Test public void testGetHeadsetService() { org.junit.Assert.assertEquals(mHeadsetService, com.android.bluetooth.hfp.HeadsetService.getHeadsetService()); android.bluetooth.BluetoothDevice device = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 0); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState(device)); org.junit.Assert.assertEquals(BluetoothHeadset.STATE_AUDIO_DISCONNECTED, mHeadsetService.getAudioState(device)); }",11bce57754c405d675cbde4fb027779fd6f7d86c,2018-05-15 23:12:06,36
623704,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void connectHfpDevice(android.bluetooth.BluetoothDevice device) { org.junit.Assert.assertTrue(mHeadsetService.connect(device)); verify(mObjectsFactory).makeStateMachine(device, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectHfp(device); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mHeadsetService.getConnectionState(device)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(device), mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTING })); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_SLC_CONNECTED, device); mHeadsetService.messageFromNative(connectedEvent); try { java.lang.Thread.sleep(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException exception) { org.junit.Assert.fail((""Interrupted while waiting for callback for "" + device)); } org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTED, mHeadsetService.getConnectionState(device)); org.junit.Assert.assertThat(mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTED }), org.hamcrest.CoreMatchers.hasItem(device)); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); }",7e4c59e05eefc8a52a3234c575082263ae1b1c21,"private void connectTestDevice(android.bluetooth.BluetoothDevice device) { mBondedDevices.add(device); com.android.bluetooth.hfp.HeadsetStackEvent rfcommConnectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_CONNECTED, device); mHeadsetService.messageFromNative(rfcommConnectedEvent); verify(mObjectsFactory).makeStateMachine(device, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); waitAndVerifyConnectionStateIntent(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS, device, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mHeadsetService.getConnectionState(device)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(device), mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTING })); com.android.bluetooth.hfp.HeadsetStackEvent slcConnectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_SLC_CONNECTED, device); mHeadsetService.messageFromNative(slcConnectedEvent); waitAndVerifyConnectionStateIntent(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS, device, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_CONNECTING); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTED, mHeadsetService.getConnectionState(device)); }",7f759c90f7df1811b19e0f2c9441fb57efe1ce53,2018-05-15 23:12:06,36
623704,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testVoiceRecognition_SingleAgInitiatedDeviceNotConnected() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); android.bluetooth.BluetoothDevice wrongDevice = getTestDevice(1); org.junit.Assert.assertFalse(mHeadsetService.startVoiceRecognition(wrongDevice)); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); verifyZeroInteractions(mAudioManager); }",05475a0ec065f70f7a65a71c4d263359af6a08f3,"@org.junit.Test public void testVoiceRecognition_SingleAgInitiatedDeviceNotConnected() { android.bluetooth.BluetoothDevice disconnectedDevice = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 0); org.junit.Assert.assertFalse(mHeadsetService.startVoiceRecognition(disconnectedDevice)); verifyNoMoreInteractions(mNativeInterface); verifyZeroInteractions(mAudioManager); }",67e59f1b32c7af65b60f4a35932e0d61c9ed7fcd,2018-05-15 23:12:06,36
676201,ojluni_src_main_java_java_util_Scanner.java,"private java.lang.String buildIntegerPatternString() { java.lang.String radixDigits = digits.substring(0, radix); java.lang.String nonZeroRadixDigits = (((""((?i)["" + (digits.substring(1, radix))) + ""]|("") + (non0Digit)) + ""))""; java.lang.String digit = (""((?i)["" + radixDigits) + ""]|\\p{javaDigit})""; java.lang.String groupedNumeral = (((((((((""("" + nonZeroRadixDigits) + digit) + ""?"") + digit) + ""?("") + (groupSeparator)) + digit) + digit) + digit) + "")+)""; java.lang.String numeral = (((""(("" + digit) + ""++)|"") + groupedNumeral) + "")""; java.lang.String javaStyleInteger = (""([-+]?("" + numeral) + ""))""; java.lang.String negativeInteger = ((negativePrefix) + numeral) + (negativeSuffix); java.lang.String positiveInteger = ((positivePrefix) + numeral) + (positiveSuffix); return (((((""("" + javaStyleInteger) + "")|("") + positiveInteger) + "")|("") + negativeInteger) + "")""; }",b4ecd43a907f0bb53698b53497592645eec97b73,"private java.lang.String buildIntegerPatternString() { java.lang.String radixDigits = digits.substring(0, radix); java.lang.String digit = (""((?i)["" + radixDigits) + ""]|\\p{javaDigit})""; java.lang.String nonZeroRadixDigits = (((""((?i)["" + (digits.substring(1, radix))) + ""]|("") + (non0Digit)) + ""))""; java.lang.String groupedNumeral = (((((((((""("" + nonZeroRadixDigits) + digit) + ""?"") + digit) + ""?("") + (groupSeparator)) + digit) + digit) + digit) + "")+)""; java.lang.String numeral = (((""(("" + digit) + ""++)|"") + groupedNumeral) + "")""; java.lang.String javaStyleInteger = (""([-+]?("" + numeral) + ""))""; java.lang.String negativeInteger = ((negativePrefix) + numeral) + (negativeSuffix); java.lang.String positiveInteger = ((positivePrefix) + numeral) + (positiveSuffix); return (((((""("" + javaStyleInteger) + "")|("") + positiveInteger) + "")|("") + negativeInteger) + "")""; }",5d4d66c198d7d8bcd8816c53630a8908a2b264a9,"private java.lang.String buildIntegerPatternString() { java.lang.String radixDigits = digits.substring(0, radix); java.lang.String digit = (""((?i)["" + radixDigits) + ""]|\\p{javaDigit})""; java.lang.String non0RadixDigits = (((""((?i)["" + (digits.substring(1, radix))) + ""]|("") + (non0Digit)) + ""))""; java.lang.String groupedNumeral = (((((((((""("" + non0RadixDigits) + digit) + ""?"") + digit) + ""?("") + (groupSeparator)) + digit) + digit) + digit) + "")+)""; java.lang.String numeral = (((""(("" + digit) + ""++)|"") + groupedNumeral) + "")""; java.lang.String javaStyleInteger = (""([-+]?("" + numeral) + ""))""; java.lang.String negativeInteger = ((negativePrefix) + numeral) + (negativeSuffix); java.lang.String positiveInteger = ((positivePrefix) + numeral) + (positiveSuffix); return (((((""("" + javaStyleInteger) + "")|("") + positiveInteger) + "")|("") + negativeInteger) + "")""; }",718f7a76307cf0a56a8fec470cd0f462e0e836b7,2018-05-16 00:36:38,8
686630,tools_vm-tests-tf_src_util_build_FileUtil.java,,,"public static java.lang.String readFile(java.io.File f) { byte[] tmp = new byte[((int) (f.length()))]; try (java.io.FileInputStream fis = new java.io.FileInputStream(f)) { int pos = 0; while (pos != (tmp.length)) { int read = fis.read(tmp, pos, ((tmp.length) - pos)); if (read == (-1)) { throw new java.io.IOException(""Unexpected EOF""); } pos += read; } return new java.lang.String(tmp); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }",6223ce8df2722368d5908f49a824563c3b5fb346,"public static java.lang.String readFile(java.io.File f) { if ((f.length()) > (java.lang.Integer.MAX_VALUE)) { throw new java.lang.IllegalArgumentException(f.toString()); } byte[] tmp = new byte[((int) (f.length()))]; try (java.io.FileInputStream fis = new java.io.FileInputStream(f)) { int pos = 0; while (pos != (tmp.length)) { int read = fis.read(tmp, pos, ((tmp.length) - pos)); if (read == (-1)) { throw new java.io.IOException(""Unexpected EOF""); } pos += read; } return new java.lang.String(tmp); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }",93420bd5972854314634e4b8a100a47bb4a14572,2018-05-16 02:10:16,3
683761,src_com_android_settings_network_TetherPreferenceController.java,"@java.lang.Override public void onResume() { if ((mAirplaneModeObserver) == null) { mAirplaneModeObserver = new com.android.settings.network.TetherPreferenceController.SettingObserver(); } if ((mTetherReceiver) == null) { mTetherReceiver = new com.android.settings.network.TetherPreferenceController.TetherBroadcastReceiver(); } mContext.registerReceiver(mTetherReceiver, new android.content.IntentFilter(android.net.ConnectivityManager.ACTION_TETHER_STATE_CHANGED)); mContext.getContentResolver().registerContentObserver(mAirplaneModeObserver.uri, false, mAirplaneModeObserver); }",6120fd725d7277fdb1d11bc76079044a6bdec6c0,"@java.lang.Override public void onResume() { if (((mBluetoothAdapter) != null) && ((mBluetoothAdapter.getState()) == (android.bluetooth.BluetoothAdapter.STATE_ON))) { final android.bluetooth.BluetoothProfile profile = mBluetoothPan.get(); if (profile == null) { mBluetoothAdapter.getProfileProxy(mContext, mBtProfileServiceListener, BluetoothProfile.PAN); } } if ((mAirplaneModeObserver) == null) { mAirplaneModeObserver = new com.android.settings.network.TetherPreferenceController.SettingObserver(); } if ((mTetherReceiver) == null) { mTetherReceiver = new com.android.settings.network.TetherPreferenceController.TetherBroadcastReceiver(); } mContext.registerReceiver(mTetherReceiver, new android.content.IntentFilter(android.net.ConnectivityManager.ACTION_TETHER_STATE_CHANGED)); mContext.getContentResolver().registerContentObserver(mAirplaneModeObserver.uri, false, mAirplaneModeObserver); }",fdcb1f9bd160eeff615f2b04aeedcb30d504ac89,"@java.lang.Override public void onResume() { if ((mAirplaneModeObserver) == null) { mAirplaneModeObserver = new com.android.settings.network.TetherPreferenceController.SettingObserver(); } if ((mTetherReceiver) == null) { mTetherReceiver = new com.android.settings.network.TetherPreferenceController.TetherBroadcastReceiver(); } mContext.registerReceiver(mTetherReceiver, new android.content.IntentFilter(android.net.ConnectivityManager.ACTION_TETHER_STATE_CHANGED)); mContext.getContentResolver().registerContentObserver(mAirplaneModeObserver.uri, false, mAirplaneModeObserver); }",6120fd725d7277fdb1d11bc76079044a6bdec6c0,2018-05-17 01:28:01,6
687982,core_tests_coretests_src_android_net_SntpClientTest.java,@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); android.net.ConnectivityManager mCM = getContext().getSystemService(android.net.ConnectivityManager.class); mNetwork = mCM.getActiveNetwork(); },14277df62a71b91ce67e93f4c90525ba7e05b91d,@org.junit.Before public void setUp() throws java.lang.Exception { mNetwork = new android.net.Network(0); mServer = new android.net.SntpClientTest.SntpTestServer(); mClient = new android.net.SntpClient(); },39951f58b1b8d08f8149f4abf7fbdd5dde1eb9dc,@org.junit.Before public void setUp() throws java.lang.Exception { mNetwork = new android.net.Network(ConnectivityManager.NETID_UNSET); mServer = new android.net.SntpClientTest.SntpTestServer(); mClient = new android.net.SntpClient(); },72c3739e7e82081400427fec23e611fb8b986fbc,2018-05-18 01:44:42,3
684217,harnesses_tradefed_src_com_android_tradefed_util_OutputUtil.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setAbiBitness(java.lang.String bitness) { mAbiBitness = bitness; },67732e438cb607237c70a381fe21a0bf54756ada,public void setAbiName(java.lang.String abiName) { mAbiName = abiName; },baddf4aa4d8b01a164a77f9e10e2006a92149fdd,2018-05-18 17:53:32,8
684217,harnesses_tradefed_src_com_android_tradefed_util_OutputUtil.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void addVtsRunnerOutputFile(java.io.File logFile) { java.lang.String fileName = logFile.getName(); com.android.tradefed.result.LogDataType type; if (fileName.endsWith("".html"")) { type = com.android.tradefed.result.LogDataType.HTML; } else if (fileName.startsWith(""logcat"")) { type = com.android.tradefed.result.LogDataType.LOGCAT; } else if ((fileName.startsWith(""bugreport"")) && (fileName.endsWith("".zip""))) { type = com.android.tradefed.result.LogDataType.BUGREPORTZ; } else if ((fileName.endsWith("".txt"")) || (fileName.endsWith("".log""))) { type = com.android.tradefed.result.LogDataType.TEXT; } else if (fileName.endsWith("".zip"")) { type = com.android.tradefed.result.LogDataType.ZIP; } else { com.android.tradefed.log.LogUtil.CLog.w(""Unknown output file type. Skipping %s"", logFile); return; } java.lang.String outputFileName = ((((mTestModuleName) + ""_"") + fileName) + ""_"") + (mAbiBitness); com.android.tradefed.result.FileInputStreamSource inputSource = new com.android.tradefed.result.FileInputStreamSource(logFile); mListener.testLog(outputFileName, type, inputSource); }",54e72a2979a43acab98dba8e412ce1b7d21cfdab,"private void addVtsRunnerOutputFile(java.io.File logFile) { java.lang.String fileName = logFile.getName(); com.android.tradefed.result.LogDataType type; if (fileName.endsWith("".html"")) { type = com.android.tradefed.result.LogDataType.HTML; } else if (fileName.startsWith(""logcat"")) { type = com.android.tradefed.result.LogDataType.LOGCAT; } else if ((fileName.startsWith(""bugreport"")) && (fileName.endsWith("".zip""))) { type = com.android.tradefed.result.LogDataType.BUGREPORTZ; } else if ((fileName.endsWith("".txt"")) || (fileName.endsWith("".log""))) { type = com.android.tradefed.result.LogDataType.TEXT; } else if (fileName.endsWith("".zip"")) { type = com.android.tradefed.result.LogDataType.ZIP; } else { com.android.tradefed.log.LogUtil.CLog.w(""Unknown output file type. Skipping %s"", logFile); return; } java.lang.String outputFileName = ((((mTestModuleName) + ""_"") + fileName) + ""_"") + (mAbiName); com.android.tradefed.result.FileInputStreamSource inputSource = new com.android.tradefed.result.FileInputStreamSource(logFile); mListener.testLog(outputFileName, type, inputSource); }",f528a9e185d56b505495efd2acfe74693de3b9a9,2018-05-18 17:53:32,8
